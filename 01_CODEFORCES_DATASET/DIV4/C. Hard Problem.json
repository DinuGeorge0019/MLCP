{
    "link": "https://codeforces.com//contest/2044/problem/C",
    "problemId": "3086854",
    "problem_idx": "C",
    "shortId": "2044C",
    "contest_number": "2044",
    "problem_submissions": {
        "F": [
            296933150,
            296655063,
            296674411,
            296677763,
            296669954,
            296737361,
            296736034,
            296677816,
            296696398,
            296687386,
            296699481,
            296685099,
            296683886,
            296731517,
            296707787,
            296654373,
            296909091,
            296715340,
            296702594,
            296696190
        ],
        "G2": [
            296699390,
            296704280,
            296704818,
            298531131,
            296733068,
            296720698,
            296741262,
            296739720,
            296746308,
            296911444,
            296724382
        ],
        "H": [
            296697535,
            296733580,
            296740491,
            296722038,
            296725052,
            296682267,
            297077288,
            296716701,
            296694010,
            296739316,
            296709869
        ],
        "G1": [
            296659278,
            296653404,
            296691524,
            296692154,
            296687763,
            296690954,
            296714485,
            296708514,
            296694498,
            296722350,
            296692196,
            296714994,
            296716472,
            296675871,
            296678021,
            296689324,
            296711355,
            296718740,
            296717970
        ],
        "C": [
            296648915,
            296601876,
            296603677,
            296620266,
            296604632,
            296657618,
            296599716,
            296615593,
            296628687,
            296619240,
            296670537,
            297235105,
            296605830,
            296636731,
            296609140,
            296608950,
            296601490,
            296614087,
            296616894,
            296625117
        ],
        "E": [
            296623207,
            296640913,
            296636063,
            296663200,
            296642784,
            296664551,
            296656718,
            296657876,
            296674393,
            296649940,
            296693263,
            296657969,
            296721389,
            296645567,
            296630574,
            296667579,
            296641163,
            296648307,
            296683859
        ],
        "D": [
            296600718,
            296615344,
            296619619,
            296653987,
            296656132,
            296660646,
            296617887,
            302243346,
            296634501,
            296657055,
            296633273,
            296682986,
            296625109,
            296724190,
            296673253,
            296639245,
            296646292,
            296630851,
            296634818,
            296656565
        ],
        "B": [
            296590822,
            296591602,
            296590194,
            296602338,
            296593446,
            296653034,
            296591762,
            296620268,
            296615058,
            296600993,
            296669880,
            297230228,
            296596906,
            296631957,
            296596806,
            296598863,
            296591614,
            296604776,
            296608256,
            296609998
        ],
        "A": [
            296584122,
            296592381,
            296592956,
            296589246,
            296585131,
            296651916,
            296584578,
            296583609,
            296596837,
            296592612,
            296669080,
            297228403,
            296585930,
            296627664,
            296585567,
            296590101,
            296585364,
            296594212,
            296600836,
            296587924
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137306",
    "editorial": "Problem Credits: cry Analysis: macaquedev Solution Let , , be three sets\r\nof monkeys, such that monkeys in can only sit in row , in row , and can\r\nsit anywhere. It is clear that if there is free space in row , and there\r\nare monkeys left in set , it is optimal to seat a monkey from set onto\r\nrow . This is because a monkey from set can be seated on either row, and\r\nthere might be space left on the other row for that same monkey in set\r\nafter youâve already seated the monkey from set . However, this is not\r\nthe case if you start by seating the monkeys in set in the front row,\r\nsince you might now leave empty seats at the back, but then have monkeys\r\nfrom set still left unseated.Therefore, the strategy is as follows: seat\r\nas many monkeys from set as you can in the front row, then seat as many\r\nmonkeys from set as you can in the back row, then seat as many monkeys\r\nfrom set as you can, and that yields the answer.\r\n",
    "name": "C. Hard Problem",
    "statement": "Ball is the teacher in Paperfold University. The seats of his classroom\r\nare arranged in 2 rows with m seats each.Ball is teaching a + b + c\r\nmonkeys, and he wants to assign as many monkeys to a seat as possible.\r\nBall knows that a of them only want to sit in row 1, b of them only want\r\nto sit in row 2, and c of them have no preference. Only one monkey may\r\nsit in each seat, and each monkey’s preference must be followed if it is\r\nseated.What is the maximum number of monkeys that Ball can seat?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define int long long#define pii pair<int,int>#define pb push_back#define in insert#define fi first#define se second#define ld long double#define vvec vector<vector<int>>using namespace std;const int mod=1000000007;const int N=2e5+7;const int inf=1e17;int a[N];int n; signed main(){    ios_base::sync_with_stdio(0);    cin.tie(0);cout.tie(0);    //freopen(\"TASK.inp\",\"r\",stdin);    //freopen(\"TASK.out\",\"w\",stdout);    int t;cin>>t;    while(t--){        int A,B,C;cin>>n>>A>>B>>C;        int ma=min(n,A);        int mb=min(n,B);        int thuaA=n-ma;        int thuaB=n-mb;        ma+=min(thuaA,C);        C-=min(thuaA,C);        mb+=min(thuaB,C);        cout<<ma+mb<<'\\n';    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\C. Hard Problem.json",
    "hint": []
}