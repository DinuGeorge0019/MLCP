{"link": "https://codeforces.com//contest/1807/problem/G2", "problemId": "1838168", "problem_idx": "G2", "shortId": "1807G2", "contest_number": "1807", "problem_submissions": {"F": [198180616, 198186190, 198173908, 198171005, 198219904, 198227866, 198217508, 198214833, 198204632, 198200151, 198214050, 198189193, 198185762, 198231970, 198235896, 198228554, 198239515, 198209832, 198220721], "E": [198163239, 198186188, 198149936, 198201671, 198171057, 198193404, 198177128, 198162416, 198182729, 198179440, 198203385, 198195116, 198366866, 198157434, 198167075, 198178694, 198189166, 198158428, 198165846, 198162136, 198158251], "G2": [198145015, 198137148, 198195227, 198182421, 198178727, 198158742, 198185869, 198169755, 198175371, 198176448, 198178249, 198206149, 198207584, 198189902, 198168732, 198178571, 198181264, 198198169, 198185162], "B": [198143870, 198138728, 198120221, 198130226, 198126207, 198130685, 198126856, 198135177, 198139105, 198122438, 198125411, 198126062, 198128046, 198121277, 198121825, 198130142, 198124129, 198132199, 198137528], "C": [198133948, 198146211, 198132638, 198137869, 198139227, 198143163, 198136231, 198148066, 198130077, 198135106, 198133973, 198134982, 198136576, 198131022, 198135217, 198139552, 198137513, 198141347, 198131804], "G1": [198133059, 198150338, 198182849, 198183462, 198175914, 198147239, 198178480, 198168437, 198173855, 198176599, 198168261, 198206516, 198197738, 198173520, 198161260, 198169179, 198182940, 198185108, 198185266], "A": [198122998, 198125805, 198110843, 198112403, 198113641, 198115780, 198114548, 198114635, 198110722, 198110785, 198111172, 198116447, 198110883, 198111058, 198110866, 198116237, 198114064, 198122835, 198110735], "D": [198122742, 198156287, 198129356, 198145081, 198138349, 198158337, 198148123, 198154214, 198156828, 198147860, 198147020, 198142203, 198146687, 198137100, 198147269, 198146571, 198144778, 198146944, 198142568]}, "name": "G2. Subsequence Addition  Hard Version ", "statement": "Initially, array a contains just the number 1. You can perform several\r\noperations in order to change the array. In an operation, you can select\r\nsome subsequence^{\r\ndagger} of a and add into a an element equal to the sum of all elements\r\nof the subsequence. You are given a final array c. Check if c can be\r\nobtained from the initial array a by performing some number (possibly 0)\r\nof operations on the initial array.^{\r\ndagger} A sequence b is a subsequence of a sequence a if b can be\r\nobtained from a by the deletion of several (possibly zero, but not all)\r\nelements. In other words, select k (1\r\nleq k\r\nleq |a|) distinct indices i_1, i_2,\r\ndots, i_k and insert anywhere into a a new element with the value equal\r\nto a_{i_1} + a_{i_2} +\r\ndots + a_{i_k}.\r\n", "solutions": ["#include \"iostream\"\n#include \"vector\"\n#include \"algorithm\"\n#include \"string\"\n#include \"map\"\n#include \"bitset\"\n#include \"set\"\n#include \"numeric\"\n#include \"iomanip\"\n#include \"random\"\n\n#define sz(x) (int)(x.size())\n#define ll long long\n#define int long long\n#define pii pair <int, int>\n#define x first\n#define y second\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\nusing namespace std;\n\nvoid solve() {\n    ll n;\n    cin >> n;\n    vector <int> v(n);\n    for (auto & e : v) cin >> e;\n    sort(all(v));\n    int f = 1;\n    int s = 1;\n    if (v[0] != 1) f = 0;\n    for (int i = 1; i < n; i++) {\n        if (v[i] > s) {\n            f = 0;\n        }\n        s += v[i];\n    }\n    if (f) {\n        cout << \"YES\\n\";\n    } else {\n        cout << \"NO\\n\";\n    }\n}\n\n\nsigned main() {\n//    freopen(\"monument.in\", \"r\", stdin);\n//    freopen(\"monument.out\", \"w\", stdout);\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    ll t;\n    cin >> t;\n    while (t--) {\n        solve();\n    }\n}\n\n"], "input": "", "output": "", "tags": ["bitmasks", "dp", "greedy", "implementation", "sortings"], "dificulty": "1100", "interactive": false}