{
    "link": "https://codeforces.com//contest/1985/problem/B",
    "problemId": "2693238",
    "problem_idx": "B",
    "shortId": "1985B",
    "contest_number": "1985",
    "problem_submissions": {
        "H2": [
            265333958,
            265329942,
            265374762,
            265463376,
            265409850,
            265351075
        ],
        "H1": [
            265304421,
            265299704,
            265357822,
            265323224,
            265337141,
            265317283,
            265460730,
            265316153,
            265348936,
            265366976,
            265339269,
            265346344,
            265357275,
            265361186,
            265337987,
            265334505,
            265306082,
            265333344,
            265334310,
            265354855,
            265343925,
            265371157
        ],
        "G": [
            265288874,
            265285319,
            265308921,
            265294504,
            265294389,
            265349930,
            265333888,
            265302787,
            265321226,
            265321550,
            265314648,
            265319240,
            265320919,
            265319004,
            265351809,
            265347102,
            265363396,
            265321287,
            265334515
        ],
        "F": [
            265257998,
            265258336,
            265333805,
            265266191,
            265268417,
            265271517,
            265282573,
            265284015,
            265291933,
            265287030,
            265294216,
            265292426,
            265308217,
            265434837,
            265263951,
            265284551,
            265298432,
            265310548,
            265350787,
            265303880
        ],
        "E": [
            265247823,
            265268762,
            265279707,
            265250320,
            265260021,
            265260461,
            265269987,
            265268916,
            265276148,
            265277202,
            265271686,
            265278947,
            265288365,
            265270779,
            265321070,
            265309211,
            265281402,
            265290891,
            265283574
        ],
        "D": [
            265235702,
            265239453,
            265240274,
            265240512,
            265241523,
            265246501,
            265258934,
            265252788,
            265235638,
            265251750,
            265255373,
            265255903,
            265267987,
            265248169,
            265284904,
            265257354,
            265249745,
            265271001,
            265260658
        ],
        "C": [
            265224906,
            265231755,
            265230963,
            265229487,
            265231546,
            265231239,
            265250492,
            265242728,
            265240303,
            265242396,
            265240944,
            265239306,
            265248406,
            265232912,
            265250913,
            265243972,
            265239446,
            265242638,
            265248246,
            265243103
        ],
        "B": [
            265217781,
            265226807,
            265225301,
            265218520,
            265227661,
            265222521,
            265233641,
            265228462,
            265227301,
            265231808,
            265227127,
            265229582,
            265225549,
            265222424,
            265237127,
            265233502,
            265228316,
            265225179,
            265231906
        ],
        "A": [
            265211682,
            265215627,
            265211806,
            265211700,
            265213517,
            265214069,
            265212496,
            265216202,
            265212886,
            265212184,
            265216504,
            265214755,
            265214870,
            265213138,
            265212889,
            265220571,
            265212383,
            265212109,
            265213889
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129620",
    "editorial": "To maximize the number of multiples of x\n less than n\n, it optimal to choose a small x\n, in this case, 2\n. The only exception is n=3\n, where it is optimal to choose 3\n instead, since both 2\n and 3\n have only one multiple less than 3\n.",
    "name": "B. Maximum Multiple Sum",
    "statement": "Given an integer n, find an integer x such that: 2\r\nleq x\r\nleq n. The sum of multiples of x that are less than or equal to n is\r\nmaximized. Formally, x + 2x + 3x +\r\ndots + kx where kx\r\nleq n is maximized over all possible values of x.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using namespace std; #define int long long#define inf 0x3F3F3F3F3F3F3F3F const int MXN = 3e5 + 5; void _(){\tint n;\tcin >> n;\tarray<int, 2> res = {0, 0};\tfor (int i = 2; i <= n; i++)\t{\t\tres = max(res, {(n / i) * (n / i + 1) * i, i});\t}\tcout << res[1] << '\\n';} signed main(){\tios_base::sync_with_stdio(0);\tcin.tie(0);\tint t;\tcin >> t;\tfor (int tt = 1; tt <= t; tt++)\t{\t\t_();\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math",
        "number theory"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\B. Maximum Multiple Sum.json",
    "hint": []
}