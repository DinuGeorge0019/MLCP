{
    "link": "https://codeforces.com//contest/1352/problem/G",
    "problemId": "616899",
    "problem_idx": "G",
    "shortId": "1352G",
    "contest_number": "1352",
    "problem_submissions": {
        "F": [
            79519824,
            79501899,
            79508349,
            79516237,
            79506001,
            79518696,
            79523931,
            79522749,
            79483374,
            79531674,
            79537014,
            79535573,
            79524146,
            79555211,
            79561303
        ],
        "G": [
            79504466,
            79502943,
            79532774,
            79495765,
            79544513,
            79506723,
            79542393,
            79531344,
            79510893,
            79543566,
            79546643,
            79551234,
            79538383,
            79529159,
            79529270
        ],
        "E": [
            79499837,
            79510559,
            79500279,
            79502777,
            79499957,
            79521311,
            79498277,
            79498269,
            79508383,
            79522598,
            79517137,
            79514677,
            79515124,
            79516881,
            79536338,
            79518155
        ],
        "D": [
            79490796,
            79507180,
            79492758,
            79507592,
            79490945,
            79501213,
            79506138,
            79501463,
            79536636,
            79509984,
            79508108,
            79508294,
            79510176,
            79506745,
            79499572
        ],
        "C": [
            79486074,
            79480411,
            79484795,
            79474929,
            79484699,
            79485552,
            79489387,
            79492925,
            79514110,
            79492840,
            79498250,
            79488969,
            79497059,
            79489417,
            79480049
        ],
        "B": [
            79475380,
            79486583,
            79480176,
            79484075,
            79479831,
            79480077,
            79512493,
            79485299,
            79484046,
            79486297,
            79488494,
            79485859,
            79481804,
            79499936,
            79483390,
            79489564
        ],
        "A": [
            79473627,
            79474594,
            79473761,
            79489909,
            79473724,
            79475259,
            79473858,
            79474663,
            79474493,
            79476206,
            79474153,
            79474833,
            79475651,
            79474141,
            79474705
        ]
    },
    "name": "G. Special Permutation",
    "statement": "A permutation of length n is an array p=[p_1,p_2,\r\ndots,p_n], which contains every integer from 1 to n (inclusive) and,\r\nmoreover, each number appears exactly once. For example, p=[3,1,4,2,5]\r\nis a permutation of length 5.For a given number n (n\r\nge 2), find a permutation p in which absolute difference (that is, the\r\nabsolute value of difference) of any two neighboring (adjacent) elements\r\nis between 2 and 4, inclusive. Formally, find such permutation p that 2\r\nle |p_i - p_{i+1}|\r\nle 4 for each i (1\r\nle i < n).Print any such permutation for the given integer n or\r\ndetermine that it does not exist.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\nmt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);\n    long long powmod(long long a,long long b,long long mod) {\n        if (b==0 || a==1)  {if (mod==1) return 0; else return 1; }\n       \n        if (b%2==0) { long long k=powmod(a,b/2,mod); return (k*k)%mod; }\n        else {long long k=powmod(a,b/2,mod); return ( (k*k) %mod *a)% mod; }\n    }\n    long long gcd(long long a, long long b) {\n        if (a==0) return b;\n        if (b==0) return a;\n        if (a>b) return gcd(a%b,b); else return gcd(b%a,a);\n    }\n      int prime(int p) { // 1 - простое\n        for (int i=2;i*i<=p;i++) {\n            if (p%i==0 && i<p) return i;  \n        }\n        return 1;\n    }\n    \n     int inv(int a, int mod) {\n        return powmod(a,mod-2,mod); \n    }\n  int random_modul() {\n    \n    uniform_int_distribution <int> u1(1e9, 2e9);\n    int pepega=u1(rnd); \n    while (prime(pepega)!=1) pepega=u1(rnd); \n    return pepega; \n}\n \n    void solve () {\n       \n       \n         /* --------- */\n       \n    int a;\n    cin>>a;\n    if (a<=3) {cout<<\"-1\\n\"; return; }\n    if (a==4) {\n        cout<<\"3 1 4 2\\n\"; return; \n    }\n    int max1=0; \n    for (int i=1;i<=a;i+=2) { max1=i; cout<<i<<\" \"; }\n    if (max1+1>a) {\n        cout<<max1-3<<\" \"<<max1-1<<\" \"; for (int j=max1-5;j>=1;j-=2) cout<<j<<\" \"; cout<<\"\\n\"; return;  \n    }\n    cout<<max1-3<<\" \"<<max1+1<<\" \"<<max1-1<<\" \"; for (int j=max1-5;j>=1;j-=2) cout<<j<<\" \";cout<<\"\\n\"; return;  \n        /* --------- */   \n            return;\n    }\n     \n     \n     \n    signed main() {\n       ios_base::sync_with_stdio(false);\n       cin.tie(0);\n       cout.tie(0); \n       \n       //  cout<<fixed<<setprecision(10); \n       \n          int tututu;\n          tututu=1;\n          \n       \n        cin>>tututu; // если нет запросов, то закоментить\n        \n          for (int qwerty=0;qwerty<tututu;qwerty++) solve();\n      \n       \n        return 0;\n    }"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\G. Special Permutation.json",
    "editorial_link": "https://codeforces.com//blog/entry/77161",
    "editorial": "If then there is no answer. You can do some handwork to be sure.\r\nOtherwise, the answer exists and there is one simple way to construct\r\nit: firstly, letâs put all odd integers into the answer in decreasing\r\norder, then put , , and all other even numbers in increasing order. To\r\ntest that it always works, you can run some kind of checker locally (you\r\ncan check all tests very fast, in less than one second, this may be very\r\nhelpful sometimes).\r\n",
    "hint": []
}