{
    "link": "https://codeforces.com//contest/1999/problem/C",
    "problemId": "2800021",
    "problem_idx": "C",
    "shortId": "1999C",
    "contest_number": "1999",
    "problem_submissions": {
        "G1": [
            274763546,
            274786025,
            274806389,
            274840194,
            274853481,
            274834731,
            274853398,
            274844144,
            274812432,
            274836138,
            274820618,
            274843459,
            274849762,
            274858308,
            274835246,
            274831909,
            274831235,
            274872122,
            274861661,
            274796200,
            274846512
        ],
        "G2": [
            274763246,
            274827897,
            274840676,
            274840339,
            274840889,
            274839833,
            274846067,
            274860687,
            274899747,
            274886725,
            274859772,
            274849972,
            274878481,
            274865843,
            274900308,
            274864325,
            274876622,
            274882909,
            274905026,
            274877976
        ],
        "A": [
            274756621,
            274711498,
            274718208,
            274731277,
            274715124,
            274718517,
            274712966,
            274717324,
            274747240,
            274726763,
            274712143,
            274713636,
            274713905,
            274715689,
            274727839,
            274713028,
            274713489,
            274718476,
            274727012,
            274712494
        ],
        "F": [
            274752769,
            274772748,
            274807808,
            274808540,
            274814792,
            274766600,
            274807913,
            274772354,
            291543797,
            274802791,
            274779921,
            274819097,
            274813900,
            274849820,
            274822552,
            274815589,
            274815616,
            274830598,
            274831805,
            274838941,
            274833354
        ],
        "E": [
            274743113,
            274804694,
            274769334,
            274772223,
            274798556,
            274767430,
            274824575,
            274771838,
            274781424,
            274762831,
            274830423,
            274800434,
            274791853,
            274809267,
            274790720,
            274797751,
            274800095,
            274803759,
            274812604,
            274802441
        ],
        "D": [
            274743008,
            274749250,
            274756261,
            274761914,
            274762217,
            274742445,
            274758072,
            274738445,
            274750316,
            274751795,
            274764980,
            274764398,
            274762112,
            274764098,
            274764317,
            274767030,
            274769275,
            274784555,
            274757786,
            274779987
        ],
        "C": [
            274733934,
            274739602,
            274747230,
            274752038,
            274733588,
            274731999,
            274745624,
            274762591,
            274746480,
            274740104,
            274745735,
            274752511,
            274745579,
            274774916,
            274752830,
            274777913,
            274757696,
            274760442,
            274746053,
            274765650
        ],
        "B": [
            274729919,
            274733598,
            274739149,
            274742867,
            274742348,
            274829536,
            274736580,
            274834606,
            274748527,
            274828913,
            274733682,
            274738419,
            274736193,
            274772911,
            274771754,
            274803093,
            274738451,
            274741527,
            274770711,
            274769032
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132383",
    "editorial": "We just need to find the lengths of the gaps between intervals. Note that from the additional constraint on the input, the intervals are in sorted order. So you need to find if for any i>1\n, li?ri?1?s\n, and also if l1?s\n (the initial interval), or if m?rn?s\n (the final interval).",
    "name": "C. Showering",
    "statement": "As a computer science student, Alex faces a hard challenge showering. He\r\ntries to shower daily, but despite his best efforts there are always\r\nchallenges. He takes s minutes to shower and a day only has m minutes!\r\nHe already has n tasks planned for the day. Task i is represented as an\r\ninterval (l_i, r_i), which means that Alex is busy and can not take a\r\nshower in that time interval (at any point in time strictly between l_i\r\nand r_i). Given all n time intervals, will Alex be able to shower that\r\nday? In other words, will Alex have a free time interval of length at\r\nleast s?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>using namespace std;int T;int main(){\tcin>>T;\twhile(T--){\t\tint n,s,m;\t\tcin>>n>>s>>m;\t\tint lst=0;\t\tbool can=0;\t\tfor(int i=1;i<=n;i++){\t\t\tint l,r;cin>>l>>r;\t\t\tif(l-lst>=s)can=1;\t\t\tlst=r;\t\t}\t\tif(m-lst>=s)can=1;\t\tputs(can?\"Yes\":\"No\");\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\C. Showering.json",
    "hint": []
}