{
    "link": "https://codeforces.com//contest/1692/problem/F",
    "problemId": "1429120",
    "problem_idx": "F",
    "shortId": "1692F",
    "contest_number": "1692",
    "problem_submissions": {
        "H": [
            160580859,
            160583343,
            160584024,
            160591427,
            160604329,
            160601660,
            160602770,
            160591772,
            160608130,
            160611041,
            160620364,
            160621319,
            160619381,
            160618233,
            160622294,
            160613918,
            160628107,
            160617962,
            160614609,
            160643082
        ],
        "G": [
            160562460,
            160570594,
            160559507,
            160575861,
            160575576,
            160581343,
            160579924,
            160562724,
            160590526,
            160575936,
            160585349,
            160592700,
            160560569,
            160593274,
            160587766,
            160595936,
            160599240,
            160597677,
            160598172,
            160599850
        ],
        "F": [
            160558944,
            160560903,
            160554913,
            160569954,
            160569726,
            160576576,
            160569448,
            160552626,
            160711327,
            160565447,
            160552495,
            160570386,
            160577679,
            160554842,
            160583969,
            160582875,
            160587537,
            160572488,
            160592240,
            160593057,
            160581747
        ],
        "E": [
            160555875,
            160564426,
            160548685,
            160564880,
            160559917,
            160572392,
            160565478,
            160577943,
            160712616,
            160548747,
            160545596,
            160581064,
            160560503,
            160600870,
            160571478,
            160575070,
            160580660,
            160559141,
            160571957,
            160581322,
            160567665
        ],
        "C": [
            160545506,
            160538919,
            160535266,
            160535003,
            160543492,
            160536935,
            160542321,
            160553726,
            160713621,
            160539285,
            160614357,
            160536964,
            160538313,
            160541667,
            160540495,
            160545824,
            160548840,
            160541701,
            160548074,
            160550180,
            160541364
        ],
        "D": [
            160544926,
            160550827,
            160592866,
            160546020,
            160554626,
            160555449,
            160554106,
            160593306,
            160579624,
            160592312,
            160553091,
            160562496,
            160556860,
            160565854,
            160567737,
            160593173,
            160565369,
            160568337,
            160554700
        ],
        "B": [
            160530169,
            160535271,
            160528395,
            160529425,
            160536550,
            160528956,
            160535713,
            160541091,
            160546587,
            160573845,
            160541194,
            160574218,
            160533557,
            160534102,
            160539459,
            160535203,
            160535317,
            160537940,
            160535614
        ],
        "A": [
            160521818,
            160525799,
            160521041,
            160521228,
            160523912,
            160521038,
            160524330,
            160542524,
            160525231,
            160521582,
            160522402,
            160527508,
            160521394,
            160522965,
            160525213,
            160523749,
            160523544,
            160525247,
            160523625
        ]
    },
    "name": "F. 3SUM",
    "statement": "Given an array a of positive integers with length n, determine if there\r\nexist three indices i, j, k such that a_i + a_j + a_k ends in the digit\r\n3.\r\n",
    "solutions": [
        "//\n// Created by Vladimir Zvezdin on 14.06.2022.\n//\n\n#                                                                                                                       include                                                                                                                                                                   <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate<typename T1, typename T2>\nostream &operator<<(ostream &out, pair<T1, T2> &p) {\n    out << p.first << ' ' << p.second;\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nistream &operator>>(istream &in, pair<T1, T2> &p) {\n    in >> p.first >> p.second;\n    return in;\n}\n\ntemplate<typename T>\nostream &operator<<(ostream &out, vector<T> &arr) {\n    for (auto &i: arr) out << i << ' ';\n    return out;\n}\n\ntemplate<typename T>\nistream &operator>>(istream &in, vector<T> &arr) {\n    for (auto &i: arr) in >> i;\n    return in;\n}\n\ntemplate<typename T>\nostream &operator<<(ostream &out, set<T> &arr) {\n    for (auto &i: arr) out << i << ' ';\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nostream &operator<<(ostream &out, map<T1, T2> &arr) {\n    for (auto &i: arr) out << i << '\\n';\n    return out;\n}\n\nvoid dbg_out() { cerr << endl; }\n\ntemplate<typename Head, typename... Tail>\nvoid dbg_out(Head H, Tail... T) {\n    cerr << ' ' << H;\n    dbg_out(T...);\n}\n\ntypedef long long ll;\ntypedef long long ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n#define ff first\n#define ss second\n#define all(x) x.begin(), x.end()\n\nvoid solve();\n\n//#define TASK \"E\"\n\nint32_t main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n#ifdef TASK\n    freopen(TASK \".in\", \"r\", stdin);\n    freopen(TASK \".out\", \"w\", stdout);\n#endif\n\n    int t;\n    cin >> t;\n    while (t--) {\n        int n;\n        cin >> n;\n        vector<int> a(n);\n        cin >> a;\n        vector<int> cnt(10);\n        for(auto i : a)\n            cnt[i % 10]++;\n        bool ok = 0;\n        for(int i = 0; i < 10; ++i) {\n            for(int j = 0; j < 10; ++j) {\n                for(int k = 0; k < 10; ++k) {\n                    if ((i + j + k) % 10 != 3) continue;\n                    cnt[i]--;\n                    cnt[j]--;\n                    cnt[k]--;\n                    if (cnt[i] >= 0 && cnt[j] >= 0 && cnt[k] >= 0)\n                        ok = 1;\n                    cnt[i]++;\n                    cnt[j]++;\n                    cnt[k]++;\n                }\n            }\n        }\n        cout << (ok ? \"YES\\n\" : \"NO\\n\");\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\F. 3SUM.json",
    "editorial_link": "https://codeforces.com//blog/entry/103883",
    "editorial": "Since we only care about the last digit of the sum , we can ignore all\r\nnumbers other than the last digits of the elements of . (For example, we\r\ncan consider to be the same as .)Now note that if a number appears more\r\nthan times in the array, we can ignore all copies that occur more than\r\ntimes, since our sum only involves three numbers. (For example, we can\r\nconsider to be the same as .)Using these observations, note that there\r\nare only digits, and each digit can occur at most times. So we can\r\nalways reduce the array to one of length . Since is very small, we can\r\nbrute force all triples , which runs quickly enough.Time complexity: .\r\n"
}