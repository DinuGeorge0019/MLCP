{
    "link": "https://codeforces.com//contest/1999/problem/G2",
    "problemId": "2800026",
    "problem_idx": "G2",
    "shortId": "1999G2",
    "contest_number": "1999",
    "problem_submissions": {
        "G1": [
            274763546,
            274786025,
            274806389,
            274840194,
            274853481,
            274834731,
            274853398,
            274844144,
            274812432,
            274836138,
            274820618,
            274843459,
            274849762,
            274858308,
            274835246,
            274831909,
            274831235,
            274872122,
            274861661,
            274796200,
            274846512
        ],
        "G2": [
            274763246,
            274827897,
            274840676,
            274840339,
            274840889,
            274839833,
            274846067,
            274860687,
            274899747,
            274886725,
            274859772,
            274849972,
            274878481,
            274865843,
            274900308,
            274864325,
            274876622,
            274882909,
            274905026,
            274877976
        ],
        "A": [
            274756621,
            274711498,
            274718208,
            274731277,
            274715124,
            274718517,
            274712966,
            274717324,
            274747240,
            274726763,
            274712143,
            274713636,
            274713905,
            274715689,
            274727839,
            274713028,
            274713489,
            274718476,
            274727012,
            274712494
        ],
        "F": [
            274752769,
            274772748,
            274807808,
            274808540,
            274814792,
            274766600,
            274807913,
            274772354,
            291543797,
            274802791,
            274779921,
            274819097,
            274813900,
            274849820,
            274822552,
            274815589,
            274815616,
            274830598,
            274831805,
            274838941,
            274833354
        ],
        "E": [
            274743113,
            274804694,
            274769334,
            274772223,
            274798556,
            274767430,
            274824575,
            274771838,
            274781424,
            274762831,
            274830423,
            274800434,
            274791853,
            274809267,
            274790720,
            274797751,
            274800095,
            274803759,
            274812604,
            274802441
        ],
        "D": [
            274743008,
            274749250,
            274756261,
            274761914,
            274762217,
            274742445,
            274758072,
            274738445,
            274750316,
            274751795,
            274764980,
            274764398,
            274762112,
            274764098,
            274764317,
            274767030,
            274769275,
            274784555,
            274757786,
            274779987
        ],
        "C": [
            274733934,
            274739602,
            274747230,
            274752038,
            274733588,
            274731999,
            274745624,
            274762591,
            274746480,
            274740104,
            274745735,
            274752511,
            274745579,
            274774916,
            274752830,
            274777913,
            274757696,
            274760442,
            274746053,
            274765650
        ],
        "B": [
            274729919,
            274733598,
            274739149,
            274742867,
            274742348,
            274829536,
            274736580,
            274834606,
            274748527,
            274828913,
            274733682,
            274738419,
            274736193,
            274772911,
            274771754,
            274803093,
            274738451,
            274741527,
            274770711,
            274769032
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132383",
    "editorial": "Consider one query of the form ?  a  b\n for a<b\n. That means:\n\nIf a<b<x\n, the response is a?b\n (both a\n and b\n are measured correctly).\nIf a<x?b\n, the response is a?(b+1)\n (a\n is measured correctly, but b\n is not).\nIf x?a<b\n, the repsone is (a+1)?(b+1)\n (both a\n and b\n are measured incorrectly).\nThis means that as a result of one query, we can cut the list of possible x\n values into three pieces: (b,999]\n, (a,b]\n, or (1,a]\n. In other words, if we choose a\n and b\n appropriately, the number of possible x\n goes down by a factor of 3\n.\nIf we repeat this, each time dividing the search space into three equal pieces, then the number of queries needed is ?log3(1000)?=7\n.\n\nThis is similar to the so-called ternary search to find the maximum of a unimodal function (although it is slightly different). You should be careful about the small case when there are only two possible values of x\n left.",
    "name": "G2. Ruler  hard version ",
    "statement": "mathbf{7} .We have a secret ruler that is missing one number x (2\r\nleq x\r\nleq 999). When you measure an object of length y, the ruler reports the\r\nfollowing values: If y < x, the ruler (correctly) measures the object as\r\nhaving length y. If y\r\ngeq x, the ruler incorrectly measures the object as having length y+1.\r\nYou need to find the value of x. To do that, you can make queries of the\r\nfollowing form:\r\ntexttt{?} a b in response, we will measure the side lengths of an a\r\ntimes b rectangle with our ruler and multiply the results, reporting the\r\nmeasured area of the rectangle back to you. For example, if x=4 and you\r\nquery a 3\r\ntimes 5 rectangle, we will measure its side lengths as 3\r\ntimes 6 and report 18 back to you. Find the value of x. You can ask at\r\nmost\r\nmathbf{7} queries.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>using namespace std;int T;int solve(int l,int r){\tif(l==r)return l;\tint lmid=(2*l+r)/3,rmid=(2*r+l)/3;\tcout<<\"? \"<<lmid<<\" \"<<rmid<<endl;\tint got;cin>>got;\tif(got==lmid*rmid)return solve(rmid+1,r);\tif(got==(lmid+1)*(rmid+1))return solve(l,lmid);\treturn solve(lmid+1,rmid);}int main(){\tcin>>T;\twhile(T--){\t\tint got=solve(2,999);\t\tcout<<\"! \"<<got<<endl;\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "interactive",
        "ternary search"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\G2. Ruler  hard version .json",
    "hint": []
}