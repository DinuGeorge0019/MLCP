{
    "link": "https://codeforces.com//contest/2009/problem/F",
    "problemId": "2852156",
    "problem_idx": "F",
    "shortId": "2009F",
    "contest_number": "2009",
    "problem_submissions": {
        "G3": [
            279769452,
            279768632,
            279768293,
            279634016
        ],
        "G2": [
            279623507,
            279826246
        ],
        "G1": [
            279587563,
            279636106,
            279609767,
            279612959,
            279609227,
            279608763,
            279609285,
            279611833,
            279624668,
            279639153,
            279638461,
            279635081,
            279635668,
            279621773,
            279633270,
            279633684,
            279636753,
            279730650,
            279662759,
            279656445,
            279655663,
            279631130,
            279639017,
            279552989,
            279637280
        ],
        "F": [
            279547213,
            279564027,
            279559926,
            279582719,
            279583635,
            279613621,
            279577030,
            279594617,
            279621002,
            279590457,
            279608835,
            279603151,
            279614857,
            279626998,
            279613197,
            279621646,
            279597606,
            279601727,
            279569426
        ],
        "E": [
            279533616,
            279526687,
            279525143,
            279563806,
            279568079,
            279557530,
            279568309,
            279554596,
            279562319,
            279532877,
            279566258,
            280040026,
            279574760,
            279576830,
            279569963,
            279593338,
            279623467,
            279604028,
            279620362,
            279559627
        ],
        "D": [
            279533481,
            279557169,
            279569552,
            279571388,
            279553891,
            279540841,
            279541654,
            279543146,
            279532771,
            279609111,
            279548630,
            279584666,
            279578933,
            279553297,
            279551555,
            279565043,
            279612797,
            279573047,
            279527024
        ],
        "C": [
            279500445,
            279536680,
            279503360,
            279514834,
            279545156,
            279521416,
            279528596,
            279528820,
            279537845,
            279521228,
            279569591,
            279558031,
            279545403,
            286087129,
            279516214,
            279555897,
            279529719,
            279601758,
            279552170,
            279523006
        ],
        "B": [
            279496402,
            279511490,
            279496624,
            279497398,
            279513790,
            279507712,
            279513891,
            279508370,
            279503498,
            279497302,
            279514475,
            279523682,
            279500707,
            279500657,
            279545377,
            279514768,
            279554375,
            279500128,
            279509479
        ],
        "A": [
            279487493,
            279493652,
            279488106,
            279487346,
            279488818,
            279497706,
            279494564,
            279502386,
            279489427,
            279489773,
            279499517,
            279489734,
            279491016,
            279488760,
            279487942,
            279488254,
            279492954,
            279543689,
            279488083,
            279491184
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/133296",
    "editorial": "Problem Credits: cry Analysis: cry Solution Let\u00e2\u0080\u0099s duplicate the array\r\nand concatenate it with itself. Now, should have length and for all .\r\nNow, the \u00e2\u0080\u0099th element of the \u00e2\u0080\u0099th rotation is .It can be shown for any\r\ninteger , it belongs in rotation and at position . Let denote the\r\nrotation for and denote the rotation for . If , we are adding full\r\narrays to our answer. The leftovers is just the suffix of rotation\r\nstarting at position and the prefix of rotation of starting at position\r\n. This can be done with prefix sums. You may need to handle separately.\r\n",
    "name": "F. Firefly s Queries",
    "statement": "Firefly is given an array a of length n. Let c_i denote the i\u2019th cyclic\r\nshift^{\r\ntext{ }} of a. She creates a new array b such that b = c_1 + c_2 +\r\ndots + c_n where + represents concatenation^{\r\ntext{ }}. Then, she asks you q queries. For each query, output the sum\r\nof all elements in the subarray of b that starts from the l-th element\r\nand ends at the r-th element, inclusive of both ends.^{\r\ntext{ }}The x-th (1\r\nleq x\r\nleq n) cyclic shift of the array a is a_x, a_{x+1}\r\nldots a_n, a_1, a_2\r\nldots a_{x - 1}. Note that the 1-st shift is the initial a.^{\r\ntext{ }}The concatenation of two arrays p and q of length n (in other\r\nwords, p + q) is p_1, p_2, ..., p_n, q_1, q_2, ..., q_n.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>using namespace std;using ll=long long;using i128=__int128;using ull=unsigned long long;using ld=long double;using pii=pair<int,int>;using pll=pair<ll,ll>;clock_t a;const int M=998244353;const ll inf=1e17;const ld eps=1e-10;void oT(char c='.'){cout<<c<<\"Time:\"<<double(clock()-a)<<'\\n';}struct Solution{\t\tint n,q;vector<ll>a,pre;\tll Qry(ll x)\t{\t\tint d=x/n,L=x%n;\t\treturn pre[L+d]-pre[d]+pre[n]*d;\t}\tvoid Init()\t{\t\tcin>>n>>q;a.resize(n*2+1,0);pre=a;\t\tfor(int i=1;i<=n;i++)cin>>a[i],a[n+i]=a[i];\t\tfor(int i=1;i<=n*2;i++)pre[i]=pre[i-1]+a[i];\t\tfor(ll i=1,l,r;i<=q;i++)\t\t{\t\t\tcin>>l>>r;cout<<Qry(r)-Qry(l-1)<<\"\\n\";\t\t}\t}\tvoid Solve()\t{\u00a0\t}};void precal(){}signed main() {    ios::sync_with_stdio(0);cin.tie(0);precal();    int t=1;cin>>t;while(t--){Solution sol;sol.Init();sol.Solve();}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "data structures",
        "flows",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\F. Firefly s Queries.json"
}