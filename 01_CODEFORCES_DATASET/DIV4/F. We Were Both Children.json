{
    "link": "https://codeforces.com//contest/1850/problem/F",
    "problemId": "2083772",
    "problem_idx": "F",
    "shortId": "1850F",
    "contest_number": "1850",
    "problem_submissions": {
        "H": [
            214871893,
            214865969,
            214852788,
            214869885,
            214859482,
            214871930,
            214890048,
            214882151,
            214901510,
            214906261,
            214875061,
            214897397,
            214901042,
            215288667,
            214912797,
            214877629,
            214908207,
            214901454,
            214905957,
            214892389,
            214894992
        ],
        "G": [
            214828842,
            214846473,
            214837139,
            214858241,
            214868612,
            214852093,
            224564308,
            214869726,
            214870609,
            214875672,
            215057304,
            214871890,
            214803757,
            214868618,
            214885459,
            215288625,
            214843045,
            214862477,
            214892403,
            214884644,
            214841291,
            214878802,
            214871156
        ],
        "F": [
            214815502,
            214833560,
            214816072,
            214846638,
            214841482,
            214857335,
            214863567,
            214861114,
            214839320,
            214860814,
            214821104,
            214856950,
            214839551,
            215288612,
            214856448,
            214855319,
            214835288,
            214847715,
            214831337,
            214856836,
            214841904
        ],
        "E": [
            214804249,
            214821169,
            214840502,
            214835624,
            214832597,
            214814581,
            214835044,
            214825933,
            214819122,
            214819358,
            214821266,
            215288692,
            215288598,
            214820552,
            214886884,
            214820942,
            214833482,
            214816679,
            214841546,
            214854853
        ],
        "C": [
            214790919,
            214777067,
            214774253,
            214778713,
            214791898,
            214779810,
            214784107,
            214784529,
            214790788,
            214779957,
            214798775,
            214783437,
            214778795,
            215288576,
            214786043,
            214771276,
            214785575,
            214784633,
            214784836,
            214789023,
            214796431
        ],
        "D": [
            214784734,
            214830108,
            214803817,
            214792127,
            214792253,
            214803497,
            214803302,
            214793684,
            214798203,
            214802221,
            214789266,
            214813947,
            214801704,
            214805655,
            215288587,
            214803885,
            214788179,
            214795029,
            214801980,
            214802908,
            214806616,
            214816519
        ],
        "B": [
            214769482,
            214788903,
            214769359,
            214771548,
            214775998,
            214771521,
            214772110,
            214772055,
            214779327,
            214768046,
            214785939,
            214784384,
            214771623,
            215288562,
            214776480,
            214765670,
            214772913,
            214774261,
            214777175,
            214781034,
            214784926
        ],
        "A": [
            214759216,
            214762760,
            214761570,
            214759352,
            214761903,
            214765601,
            214759471,
            214759894,
            214759572,
            214762667,
            214759542,
            214762985,
            214760054,
            214761038,
            215288460,
            214759685,
            214758925,
            214776553,
            214759093,
            214766299,
            214760976,
            214768326
        ]
    },
    "name": "F. We Were Both Children",
    "statement": "Mihai and Slavic were looking at a group of n frogs, numbered from 1 to\r\nn, all initially located at point 0. Frog i has a hop length of a_i.\r\nEach second, frog i hops a_i units forward. Before any frogs start\r\nhopping, Slavic and Mihai can place trap in a coordinate in order to\r\ncatch all frogs that will ever pass through the corresponding\r\ncoordinate.However, the children can\u2019t go far away from their home so\r\nthey can only place a trap in the first n points (that is, in a point\r\nwith a coordinate between 1 and n) and the children can\u2019t place a trap\r\nin point 0 since they are scared of frogs.Can you help Slavic and Mihai\r\nfind out what is the maximum number of frogs they can catch using a\r\ntrap?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n#define dbg(a)  cerr << #a << \": \" << a << \"\\n\"\n\nvoid solve () {\n\tll n;  cin >> n;\n\tvector<ll> a(n);\n\tvector<int> cnt(n + 1);\n\tfor (auto &ai: a) {\n\t\tcin >> ai;\n\t\tif (ai > n)  continue;\n\t\tcnt[ai]++;\n\t}\n\tfor (int i = n; i >= 1; --i) {\n\t\tfor (int j = i + i; j <= n; j += i) {\n\t\t\tcnt[j] += cnt[i];\n\t\t}\n\t}\n\n\tcout << *max_element(cnt.begin(), cnt.end()) << \"\\n\";\n}\n\nint main(){\n\tios::sync_with_stdio(0), cin.tie(0);\n\t\n\tint tc = 1;\n\tcin >> tc;\n\tfor (int t = 1; t <= tc; ++t) {\n\t  solve();\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math",
        "number theory"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\F. We Were Both Children.json",
    "editorial_link": "https://codeforces.com//blog/entry/118466",
    "editorial": "We disregard any larger than since we can\u00e2\u0080\u0099t catch them anyway. We keep\r\nin how many frogs we have for each hop distance. We go through each from\r\nto and add to every multiple of smaller or equal to . This action is a\r\nharmonic series and takes time. We go through all from to and take the\r\nmaximum.\r\n"
}