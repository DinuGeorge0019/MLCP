{
    "link": "https://codeforces.com//contest/2044/problem/H",
    "problemId": "3086861",
    "problem_idx": "H",
    "shortId": "2044H",
    "contest_number": "2044",
    "problem_submissions": {
        "F": [
            296933150,
            296655063,
            296674411,
            296677763,
            296669954,
            296737361,
            296736034,
            296677816,
            296696398,
            296687386,
            296699481,
            296685099,
            296683886,
            296731517,
            296707787,
            296654373,
            296909091,
            296715340,
            296702594,
            296696190
        ],
        "G2": [
            296699390,
            296704280,
            296704818,
            298531131,
            296733068,
            296720698,
            296741262,
            296739720,
            296746308,
            296911444,
            296724382
        ],
        "H": [
            296697535,
            296733580,
            296740491,
            296722038,
            296725052,
            296682267,
            297077288,
            296716701,
            296694010,
            296739316,
            296709869
        ],
        "G1": [
            296659278,
            296653404,
            296691524,
            296692154,
            296687763,
            296690954,
            296714485,
            296708514,
            296694498,
            296722350,
            296692196,
            296714994,
            296716472,
            296675871,
            296678021,
            296689324,
            296711355,
            296718740,
            296717970
        ],
        "C": [
            296648915,
            296601876,
            296603677,
            296620266,
            296604632,
            296657618,
            296599716,
            296615593,
            296628687,
            296619240,
            296670537,
            297235105,
            296605830,
            296636731,
            296609140,
            296608950,
            296601490,
            296614087,
            296616894,
            296625117
        ],
        "E": [
            296623207,
            296640913,
            296636063,
            296663200,
            296642784,
            296664551,
            296656718,
            296657876,
            296674393,
            296649940,
            296693263,
            296657969,
            296721389,
            296645567,
            296630574,
            296667579,
            296641163,
            296648307,
            296683859
        ],
        "D": [
            296600718,
            296615344,
            296619619,
            296653987,
            296656132,
            296660646,
            296617887,
            302243346,
            296634501,
            296657055,
            296633273,
            296682986,
            296625109,
            296724190,
            296673253,
            296639245,
            296646292,
            296630851,
            296634818,
            296656565
        ],
        "B": [
            296590822,
            296591602,
            296590194,
            296602338,
            296593446,
            296653034,
            296591762,
            296620268,
            296615058,
            296600993,
            296669880,
            297230228,
            296596906,
            296631957,
            296596806,
            296598863,
            296591614,
            296604776,
            296608256,
            296609998
        ],
        "A": [
            296584122,
            296592381,
            296592956,
            296589246,
            296585131,
            296651916,
            296584578,
            296583609,
            296596837,
            296592612,
            296669080,
            297228403,
            296585930,
            296627664,
            296585567,
            296590101,
            296585364,
            296594212,
            296600836,
            296587924
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137306",
    "editorial": "Problem Credits: cry Analysis: chromate00 Solution Consider translating\r\nthe sum back onto the matrix. For simplicity we discuss about querying\r\nthe whole matrix.The sum we would like to find is . Here, corresponds to\r\n, so we will translate this to . The issue left is on the multiplied to\r\nit.Remember that we index the entries in increasing order of , and then\r\nincreasing order of . Assuming and were -indexed, this will mean entry\r\ncorresponds to (also -indexed). You can notice that this naturally\r\ncorresponds to the order we had defined as well.Then, what we want to\r\nfind is . Notice , , are independent, and we can split them into sums ,\r\n, . Each of these three sums can be precomputed entry by entry, and a 2D\r\nprefix sum can solve the answer for the entire matrix.The query for a\r\nsubmatrix is very similar. Formally, you have to care about: That we\r\nhave columns instead of now; That the precomputed values might not start\r\nfrom on the first row/column of the query. Still, these two issues can\r\nbe fixed using the three sums we have precomputed. The time complexity\r\nbecomes .\r\n",
    "name": "H. Hard Demon Problem",
    "statement": "Swing is given an n\r\ntimes n matrix M containing positive integers. He has q queries to ask\r\nyou. For each query, he gives you four integers x_1, y_1, x_2, y_2 and\r\nasks you to flatten the submatrix bounded by (x_1, y_1) and (x_2, y_2)\r\ninto an array A. Formally, A = [M_{(x1,y1)}, M_{(x1,y1+1)},\r\nldots, M_{(x1,y2)}, M_{(x1+1,y1)}, M_{(x1+1,y1+1)},\r\nldots, M_{(x2,y2)}]. The following image depicts the flattening of a\r\nsubmatrix bounded by the red dotted lines. The orange arrows denote the\r\ndirection that the elements of the submatrix are appended to the back of\r\nA, and A is shown at the bottom of the image. Afterwards, he asks you\r\nfor the value of\r\nsum_{i=1}^{|A|} A_i\r\ncdot i (sum of A_i\r\ncdot i over all i).\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define int long long#define pii pair<int,int>#define pb push_back#define in insert#define fi first#define se second#define ld long double#define vvec vector<vector<int>>using namespace std;const int mod=1000000007;const int N=2e3+78;const int inf=1e17;int a[N][N],b[N][N],c[N][N];int n,q;Â signed main(){    ios_base::sync_with_stdio(0);    cin.tie(0);cout.tie(0);    //freopen(\"TASK.inp\",\"r\",stdin);    //freopen(\"TASK.out\",\"w\",stdout);    int tt;cin>>tt;    while(tt--){        cin>>n>>q;        for(int i=1;i<=n;i++){            for(int j=1;j<=n;j++)cin>>c[i][j];        }        for(int i=1;i<=n;i++){            for(int j=1;j<=n;j++)a[i][j]=c[i][j]*i;        }        for(int i=1;i<=n;i++){            for(int j=1;j<=n;j++)b[i][j]=c[i][j]*j;        }        for(int i=1;i<=n;i++){            for(int j=1;j<=n;j++){                c[i][j]+=c[i-1][j]+c[i][j-1]-c[i-1][j-1];                a[i][j]+=a[i-1][j]+a[i][j-1]-a[i-1][j-1];                b[i][j]+=b[i-1][j]+b[i][j-1]-b[i-1][j-1];            }        }        while(q--){            int x1,y1,x2,y2;cin>>x1>>y1>>x2>>y2;            int tonga=a[x2][y2]-a[x1-1][y2]-a[x2][y1-1]+a[x1-1][y1-1];            int tongb=b[x2][y2]-b[x1-1][y2]-b[x2][y1-1]+b[x1-1][y1-1];            int tongc=c[x2][y2]-c[x1-1][y2]-c[x2][y1-1]+c[x1-1][y1-1];            int sum1=tongb;            int sum2=tonga*(y2-y1+1);            int cc=-y1+1-x1*(y2-y1+1);            int sum3=tongc*cc;            cout<<sum1+sum2+sum3<<\" \";        }        cout<<'\\n';    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "dp",
        "implementation",
        "math"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\H. Hard Demon Problem.json",
    "hint": []
}