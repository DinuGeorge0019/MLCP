{
    "link": "https://codeforces.com//contest/1807/problem/D",
    "problemId": "1838164",
    "problem_idx": "D",
    "shortId": "1807D",
    "contest_number": "1807",
    "problem_submissions": {
        "F": [
            198180616,
            198186190,
            198173908,
            198171005,
            198219904,
            198227866,
            198217508,
            198214833,
            198204632,
            198200151,
            198214050,
            198189193,
            198185762,
            198231970,
            198235896,
            198228554,
            198239515,
            198209832,
            198220721
        ],
        "E": [
            198163239,
            198186188,
            198149936,
            198201671,
            198171057,
            198193404,
            198177128,
            198162416,
            198182729,
            198179440,
            198203385,
            198195116,
            198366866,
            198157434,
            198167075,
            198178694,
            198189166,
            198158428,
            198165846,
            198162136,
            198158251
        ],
        "G2": [
            198145015,
            198137148,
            198195227,
            198182421,
            198178727,
            198158742,
            198185869,
            198169755,
            198175371,
            198176448,
            198178249,
            198206149,
            198207584,
            198189902,
            198168732,
            198178571,
            198181264,
            198198169,
            198185162
        ],
        "B": [
            198143870,
            198138728,
            198120221,
            198130226,
            198126207,
            198130685,
            198126856,
            198135177,
            198139105,
            198122438,
            198125411,
            198126062,
            198128046,
            198121277,
            198121825,
            198130142,
            198124129,
            198132199,
            198137528
        ],
        "C": [
            198133948,
            198146211,
            198132638,
            198137869,
            198139227,
            198143163,
            198136231,
            198148066,
            198130077,
            198135106,
            198133973,
            198134982,
            198136576,
            198131022,
            198135217,
            198139552,
            198137513,
            198141347,
            198131804
        ],
        "G1": [
            198133059,
            198150338,
            198182849,
            198183462,
            198175914,
            198147239,
            198178480,
            198168437,
            198173855,
            198176599,
            198168261,
            198206516,
            198197738,
            198173520,
            198161260,
            198169179,
            198182940,
            198185108,
            198185266
        ],
        "A": [
            198122998,
            198125805,
            198110843,
            198112403,
            198113641,
            198115780,
            198114548,
            198114635,
            198110722,
            198110785,
            198111172,
            198116447,
            198110883,
            198111058,
            198110866,
            198116237,
            198114064,
            198122835,
            198110735
        ],
        "D": [
            198122742,
            198156287,
            198129356,
            198145081,
            198138349,
            198158337,
            198148123,
            198154214,
            198156828,
            198147860,
            198147020,
            198142203,
            198146687,
            198137100,
            198147269,
            198146571,
            198144778,
            198146944,
            198142568
        ]
    },
    "name": "D. Odd Queries",
    "statement": "You have an array a_1, a_2,\r\ndots, a_n. Answer q queries of the following form: If we change all\r\nelements in the range a_l, a_{l+1},\r\ndots, a_r of the array to k, will the sum of the entire array be odd?\r\nNote that queries are and do not affect future queries.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define int long long\n#define ll long long\n#define ld double\n#define all(a) a.begin(), a.end()\n#define rall(a) a.rbegin(), a.rend()\n#define line cout << '\\n'\n\n#define sz(v) ((int)(v).size())\nconst double pi = 3.1415926535897932384626433832795;\n\nconst long long mod = 998244353;\nconst long long inf = 9099999999999999999;\nconst long long nmax = 4e5 + 100;\nconst long double eps = 1e-9;\n\nrandom_device rd;\nmt19937 rnd(rd());\n//rnd(chrono::high_resolution_clock::now().time_since_epoch().count());\n//int MAGIC = rnd();\n\nvoid runtimeerror() {\n  int n, q;\n  cin >> n >> q;\n  vector <int> arr(n);\n  for (int i = 0; i < n; i++)\n    cin >> arr[i];\n  vector <int> pref(n + 1);\n  for (int i = 0; i < n; i++)\n    pref[i + 1] = pref[i] + arr[i];\n  while (q--) {\n    int l, r, k;\n    cin >> l >> r >> k;\n    if ((pref[n] - (pref[r] - pref[l - 1]) + k * (r - l + 1)) & 1) cout << \"YES\";\n    else cout << \"NO\";\n    line;\n  }\n}\n\nsigned main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n\n  //  freopen(\"input.txt\", \"r\", stdin);\n  //  freopen(\"output.txt\", \"w\", stdout);\n\n  ll t = 1;\n    cin >> t;\n  while (t--)\n    runtimeerror();\n\n  //  cout << \"WINNER\";\n  // i'm stupid man\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\D. Odd Queries.json",
    "editorial_link": "https://codeforces.com//blog/entry/114143",
    "editorial": "Note that for each question, the resulting array is So, the sum of the\r\nelements of the new array after each question is We can compute and in\r\ntime by precomputing the sum of all prefixes and suffixes, or\r\nalternatively by using the prefix sums technique. So we can find the sum\r\neach time in per question, and just check if it\u00e2\u0080\u0099s odd or not. The time\r\ncomplexity is .\r\n"
}