{
    "link": "https://codeforces.com//contest/2044/problem/G1",
    "problemId": "3086859",
    "problem_idx": "G1",
    "shortId": "2044G1",
    "contest_number": "2044",
    "problem_submissions": {
        "F": [
            296933150,
            296655063,
            296674411,
            296677763,
            296669954,
            296737361,
            296736034,
            296677816,
            296696398,
            296687386,
            296699481,
            296685099,
            296683886,
            296731517,
            296707787,
            296654373,
            296909091,
            296715340,
            296702594,
            296696190
        ],
        "G2": [
            296699390,
            296704280,
            296704818,
            298531131,
            296733068,
            296720698,
            296741262,
            296739720,
            296746308,
            296911444,
            296724382
        ],
        "H": [
            296697535,
            296733580,
            296740491,
            296722038,
            296725052,
            296682267,
            297077288,
            296716701,
            296694010,
            296739316,
            296709869
        ],
        "G1": [
            296659278,
            296653404,
            296691524,
            296692154,
            296687763,
            296690954,
            296714485,
            296708514,
            296694498,
            296722350,
            296692196,
            296714994,
            296716472,
            296675871,
            296678021,
            296689324,
            296711355,
            296718740,
            296717970
        ],
        "C": [
            296648915,
            296601876,
            296603677,
            296620266,
            296604632,
            296657618,
            296599716,
            296615593,
            296628687,
            296619240,
            296670537,
            297235105,
            296605830,
            296636731,
            296609140,
            296608950,
            296601490,
            296614087,
            296616894,
            296625117
        ],
        "E": [
            296623207,
            296640913,
            296636063,
            296663200,
            296642784,
            296664551,
            296656718,
            296657876,
            296674393,
            296649940,
            296693263,
            296657969,
            296721389,
            296645567,
            296630574,
            296667579,
            296641163,
            296648307,
            296683859
        ],
        "D": [
            296600718,
            296615344,
            296619619,
            296653987,
            296656132,
            296660646,
            296617887,
            302243346,
            296634501,
            296657055,
            296633273,
            296682986,
            296625109,
            296724190,
            296673253,
            296639245,
            296646292,
            296630851,
            296634818,
            296656565
        ],
        "B": [
            296590822,
            296591602,
            296590194,
            296602338,
            296593446,
            296653034,
            296591762,
            296620268,
            296615058,
            296600993,
            296669880,
            297230228,
            296596906,
            296631957,
            296596806,
            296598863,
            296591614,
            296604776,
            296608256,
            296609998
        ],
        "A": [
            296584122,
            296592381,
            296592956,
            296589246,
            296585131,
            296651916,
            296584578,
            296583609,
            296596837,
            296592612,
            296669080,
            297228403,
            296585930,
            296627664,
            296585567,
            296590101,
            296585364,
            296594212,
            296600836,
            296587924
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137306",
    "editorial": "Problem Credits: Lilypad Analysis: macaquedev Solution This problem\r\ndeals with a specific subclass of graphs called \"functional graphs\",\r\nalso known as \"successor graphs\". The key feature that they have is that\r\neach node only has one successor. Therefore, the graph in the problem\r\nwill necessarily be split into components, where each component\r\nnecessarily contains one cycle, and each node will either be in the\r\ncycle, or it will be on a path leading towards the cycle.Observe that if\r\na node that is not on a cycle currently has a plushie, this plushie will\r\ncause the arrangement to be unstable until the plushie reaches the\r\ncycle. Proof: suppose node has the plushie on day . On the next day,\r\nwill no longer have this plushie, because they will have passed it down\r\nto , therefore, the arrangement has changed. This continues inductively\r\nuntil the plushie reaches the cycle of its component.From this, we know\r\nthat the answer is at least the distance of any node to the cycle. Now,\r\nsince every node in the cycle already has a plushie, we know that these\r\nplushies just get passed round and round, so actually, nodes within the\r\ncycle cannot change the answer. Therefore, we\u00e2\u0080\u0099ve already found the final\r\nanswer.\r\n",
    "name": "G1. Medium Demon Problem  easy version ",
    "statement": "A group of n spiders has come together to exchange plushies. Initially,\r\neach spider has 1 plushie. Every year, if spider i has at least one\r\nplushie, he will give exactly one plushie to spider r_i. Otherwise, he\r\nwill do nothing. Note that all plushie transfers happen at the same\r\ntime. The process is in the current year if each spider has the same\r\nnumber of plushies (before the current year\u2019s exchange) as he did the\r\nprevious year (before the previous year\u2019s exchange). Note that year 1\r\ncan never be .Find the first year in which the process becomes .\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define int long longusing namespace std;const int N = 2e5+5;int t , n , m , low[N] , num[N] , cnt , stt[N] , sl , ans , dem[N] , a[N];bool ck[N];vector<int> mp[N] , nmp[N];stack<int> st;void dfs(int u){\tlow[u] = num[u] = ++cnt;\tst.push(u);\tfor(auto x : mp[u]){\t\tif(stt[x]) continue;\t\tif(!num[x]){\t\t\tdfs(x);\t\t\tlow[u] = min(low[x],low[u]);\t\t}else low[u] = min(low[u],num[x]);\t}\tif(low[u] == num[u]){\t\tsl++;\t\tint v;\t\tdo{            v = st.top();            st.pop();            stt[v] = sl;        }while (v != u);\t}}queue<pair<int,int>> ls;main(){    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);    cin>>t;    while(t--){        cin>>n;        for(int i = 1 ; i <= n ; i++){            cin>>a[i];            mp[i].push_back(a[i]);        }        for(int i = 1 ; i <= n ; i++){            if(!num[i]) dfs(i);        }        for(int i = 1 ; i <= n ; i++){            if(!stt[i]){                sl++;                stt[i] = sl;            }        }        for(int i = 1 ; i <= n ; i++){            nmp[stt[i]].push_back(stt[a[i]]);            dem[stt[a[i]]]++;        }        for(int i = 1 ; i <= sl ; i++){            if(!dem[i]) ls.push({i,1});        }        //for(int i = 1 ; i <= n ; i++) cout<<stt[i]<<'\\n';        while(!ls.empty()){            int u = ls.front().first;            int cc = ls.front().second;            ans = max(ans,cc);            ls.pop();            for(auto x : nmp[u]){                dem[x]--;                if(dem[x] == 0) ls.push({x,cc+1});            }        }        if(sl == 1) cout<<2<<'\\n';        else cout<<ans+2<<'\\n';        for(int i = 1 ; i <= n ; i++){            mp[i].clear();            nmp[i].clear();            dem[i] = 0;            sl = 0;            stt[i] = 0;            ans = 0;        }    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graph matchings",
        "graphs",
        "implementation",
        "trees"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\G1. Medium Demon Problem  easy version .json"
}