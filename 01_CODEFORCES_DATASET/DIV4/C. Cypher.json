{
    "link": "https://codeforces.com//contest/1703/problem/C",
    "problemId": "1459217",
    "problem_idx": "C",
    "shortId": "1703C",
    "contest_number": "1703",
    "problem_submissions": {
        "G": [
            163879354,
            163876701,
            163880552,
            163887554,
            163881906,
            163893756,
            164072213,
            163895080,
            163898333,
            163903459,
            163892881,
            163905274,
            163897275,
            163901266,
            163873117,
            163892493,
            163905636,
            163901566,
            163923296,
            163907786
        ],
        "F": [
            163850998,
            163858977,
            163853177,
            163846137,
            163922692,
            163855752,
            163876304,
            163853951,
            163874504,
            163871177,
            163873109,
            163859383,
            163873709,
            163873018,
            163856287,
            163879014,
            163887365,
            163879906,
            163862907,
            163875738
        ],
        "E": [
            163848798,
            163850755,
            163868103,
            163869552,
            163867675,
            163862143,
            163872743,
            163857154,
            163830638,
            163880434,
            163870578,
            163865786,
            163867906,
            163915635,
            163866711,
            163863745,
            163871687,
            163844531,
            163865925
        ],
        "D": [
            163827889,
            163832881,
            163833809,
            163835348,
            163842692,
            163839970,
            163839327,
            163847394,
            163853863,
            163832997,
            163851832,
            163851452,
            163835633,
            163842486,
            163871782,
            163837033,
            163852428,
            163846440,
            163842230
        ],
        "C": [
            163817923,
            163823865,
            163824885,
            163813762,
            164128413,
            163827461,
            163825229,
            163824848,
            163834560,
            163829456,
            163822136,
            163825218,
            163840368,
            163823674,
            163824378,
            163823979,
            163825333,
            163830007,
            163824841,
            163830416
        ],
        "B": [
            163811054,
            163815361,
            163814856,
            163807606,
            163816423,
            163812311,
            163813269,
            163818089,
            163841436,
            163811359,
            163816169,
            163825648,
            163813873,
            163814791,
            163816214,
            163817003,
            163814838,
            163815021,
            163816164
        ],
        "A": [
            163806945,
            163807884,
            163806991,
            163805874,
            163808042,
            163806851,
            163807428,
            163808801,
            163823605,
            163807286,
            163806888,
            163816037,
            163805969,
            163807627,
            163807835,
            163808519,
            163807784
        ]
    },
    "name": "C. Cypher",
    "statement": "Luca has a cypher made up of a sequence of n wheels, each with a digit\r\na_i written on it. On the i-th wheel, he made b_i moves. Each move is\r\none of two types: move (denoted by\r\ntexttt{U}): it increases the i-th digit by 1. After applying the up move\r\non 9, it becomes 0. move (denoted by\r\ntexttt{D}): it decreases the i-th digit by 1. After applying the down\r\nmove on 0, it becomes 9. Luca knows the final sequence of wheels and the\r\nmoves for each wheel. Help him find the original sequence and crack the\r\ncypher.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n#define all(x) x.begin(), x.end()\nusing ll = long long;\nusing db = long double;\n\n#ifdef LOCAL\n#include \"./debug.h\"\n#define fstart cout.setf(ios::fixed); cout.precision(10); int START = clock(); ifstream cin(\"./input.txt\"); ofstream cout(\"output.txt\")\n#define finish cout << \"\\ntime: \" << setprecision(4) << (clock() - START) / (double)(CLOCKS_PER_SEC); return 0\n#else\n#define debug(x...) 1\n#define fstart cin.tie(0); cout.tie(0); cout.setf(ios::fixed); cout.precision(10); ios_base::sync_with_stdio(0)\n#define finish return 0\n#endif\n\n\n\nsigned main() {\n    fstart;\n\n    int T; cin >> T;\n    while (T--) {\n        int n; cin >> n;\n        vector<int> a(n);\n        for (auto& x : a)\n            cin >> x;\n\n        for (int i = 0; i < n; i++) {\n            int k; cin >> k;\n            string s; cin >> s;\n            for (auto& c : s)\n                a[i] += (c == 'D'), a[i] -= (c == 'U');\n            a[i] %= 10;\n            a[i] += 10;\n            a[i] %= 10;\n        }\n\n        for (auto& x : a)\n            cout << x << \" \";\n        cout << \"\\n\";\n\n    }\n\n    finish;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\C. Cypher.json",
    "editorial_link": "https://codeforces.com//blog/entry/104786",
    "editorial": "We will perform each move in reverse from the final sequence of the\r\ncypher. move: it increases the -th digit by . After applying the up move\r\non , it becomes . move (denoted by ): it decreases the -th digit by .\r\nAfter applying the down move on , it becomes . Now we just need to\r\nimplement the two types of moves. The time complexity is per test case.\r\n",
    "hint": []
}