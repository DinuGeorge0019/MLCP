{
    "link": "https://codeforces.com//contest/1692/problem/C",
    "problemId": "1429117",
    "problem_idx": "C",
    "shortId": "1692C",
    "contest_number": "1692",
    "problem_submissions": {
        "H": [
            160580859,
            160583343,
            160584024,
            160591427,
            160604329,
            160601660,
            160602770,
            160591772,
            160608130,
            160611041,
            160620364,
            160621319,
            160619381,
            160618233,
            160622294,
            160613918,
            160628107,
            160617962,
            160614609,
            160643082
        ],
        "G": [
            160562460,
            160570594,
            160559507,
            160575861,
            160575576,
            160581343,
            160579924,
            160562724,
            160590526,
            160575936,
            160585349,
            160592700,
            160560569,
            160593274,
            160587766,
            160595936,
            160599240,
            160597677,
            160598172,
            160599850
        ],
        "F": [
            160558944,
            160560903,
            160554913,
            160569954,
            160569726,
            160576576,
            160569448,
            160552626,
            160711327,
            160565447,
            160552495,
            160570386,
            160577679,
            160554842,
            160583969,
            160582875,
            160587537,
            160572488,
            160592240,
            160593057,
            160581747
        ],
        "E": [
            160555875,
            160564426,
            160548685,
            160564880,
            160559917,
            160572392,
            160565478,
            160577943,
            160712616,
            160548747,
            160545596,
            160581064,
            160560503,
            160600870,
            160571478,
            160575070,
            160580660,
            160559141,
            160571957,
            160581322,
            160567665
        ],
        "C": [
            160545506,
            160538919,
            160535266,
            160535003,
            160543492,
            160536935,
            160542321,
            160553726,
            160713621,
            160539285,
            160614357,
            160536964,
            160538313,
            160541667,
            160540495,
            160545824,
            160548840,
            160541701,
            160548074,
            160550180,
            160541364
        ],
        "D": [
            160544926,
            160550827,
            160592866,
            160546020,
            160554626,
            160555449,
            160554106,
            160593306,
            160579624,
            160592312,
            160553091,
            160562496,
            160556860,
            160565854,
            160567737,
            160593173,
            160565369,
            160568337,
            160554700
        ],
        "B": [
            160530169,
            160535271,
            160528395,
            160529425,
            160536550,
            160528956,
            160535713,
            160541091,
            160546587,
            160573845,
            160541194,
            160574218,
            160533557,
            160534102,
            160539459,
            160535203,
            160535317,
            160537940,
            160535614
        ],
        "A": [
            160521818,
            160525799,
            160521041,
            160521228,
            160523912,
            160521038,
            160524330,
            160542524,
            160525231,
            160521582,
            160522402,
            160527508,
            160521394,
            160522965,
            160525213,
            160523749,
            160523544,
            160525247,
            160523625
        ]
    },
    "name": "C. Where's the Bishop ",
    "statement": "Mihai has an 8\r\ntimes 8 chessboard whose rows are numbered from 1 to 8 from top to\r\nbottom and whose columns are numbered from 1 to 8 from left to\r\nright.Mihai has placed exactly one bishop on the chessboard. (In other\r\nwords, the row and column of the bishop are between 2 and 7,\r\ninclusive.)The bishop attacks in all directions diagonally, and there is\r\nno limit to the distance which the bishop can attack. Note that the cell\r\non which the bishop is placed is also considered attacked. Mihai has\r\nmarked all squares the bishop attacks, but forgot where the bishop was!\r\nHelp Mihai find the position of the bishop.\r\n",
    "solutions": [
        "//\n// Created by Vladimir Zvezdin on 14.06.2022.\n//\n\n#                                                                                                                       include                                                                                                                                                                   <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate<typename T1, typename T2>\nostream &operator<<(ostream &out, pair<T1, T2> &p) {\n    out << p.first << ' ' << p.second;\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nistream &operator>>(istream &in, pair<T1, T2> &p) {\n    in >> p.first >> p.second;\n    return in;\n}\n\ntemplate<typename T>\nostream &operator<<(ostream &out, vector<T> &arr) {\n    for (auto &i: arr) out << i << ' ';\n    return out;\n}\n\ntemplate<typename T>\nistream &operator>>(istream &in, vector<T> &arr) {\n    for (auto &i: arr) in >> i;\n    return in;\n}\n\ntemplate<typename T>\nostream &operator<<(ostream &out, set<T> &arr) {\n    for (auto &i: arr) out << i << ' ';\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nostream &operator<<(ostream &out, map<T1, T2> &arr) {\n    for (auto &i: arr) out << i << '\\n';\n    return out;\n}\n\nvoid dbg_out() { cerr << endl; }\n\ntemplate<typename Head, typename... Tail>\nvoid dbg_out(Head H, Tail... T) {\n    cerr << ' ' << H;\n    dbg_out(T...);\n}\n\ntypedef long long ll;\ntypedef long long ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n#define ff first\n#define ss second\n#define all(x) x.begin(), x.end()\n\nvoid solve();\n\n//#define TASK \"C\"\n\nint32_t main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n#ifdef TASK\n    freopen(TASK \".in\", \"r\", stdin);\n    freopen(TASK \".out\", \"w\", stdout);\n#endif\n\n    int dx[] = {1, 1, -1, -1, 0};\n    int dy[] = {-1, 1, 1, -1, 0};\n    int T;\n    cin >> T;\n    while(T--) {\n        char a[8][8];\n        for(int i = 0; i < 8; ++i)\n            for(int j = 0; j < 8; ++j)\n                cin >> a[i][j];\n        for(int i = 1; i + 1 < 8; ++i) {\n            for(int j = 1; j + 1 < 8; ++j) {\n                bool ok = 1;\n                for(int c = 0; c < 5; ++c)\n                    if (a[i + dx[c]][j + dy[c]] != '#')\n                        ok = 0;\n                if (ok) {\n                    cout << i + 1 << ' ' << j + 1 << endl;\n                }\n            }\n        }\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\C. Where's the Bishop .json",
    "editorial_link": "https://codeforces.com//blog/entry/103883",
    "editorial": "There are many ways to solve the problem. One way is to look for the\r\nfollowing pattern: There can only be one such pattern if there is one\r\nbishop and it\u00e2\u0080\u0099s not on the edge of the board. We can iterate through all\r\ncells and see if we can match this pattern, and if we can we output the\r\ncentre cell.You can also look at the positions of the two diagonals and\r\nintersect them, but it requires more implementation.Time complexity: per\r\ntestcase.\r\n"
}