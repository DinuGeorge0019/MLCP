{
    "link": "https://codeforces.com//contest/2044/problem/G2",
    "problemId": "3086860",
    "problem_idx": "G2",
    "shortId": "2044G2",
    "contest_number": "2044",
    "problem_submissions": {
        "F": [
            296933150,
            296655063,
            296674411,
            296677763,
            296669954,
            296737361,
            296736034,
            296677816,
            296696398,
            296687386,
            296699481,
            296685099,
            296683886,
            296731517,
            296707787,
            296654373,
            296909091,
            296715340,
            296702594,
            296696190
        ],
        "G2": [
            296699390,
            296704280,
            296704818,
            298531131,
            296733068,
            296720698,
            296741262,
            296739720,
            296746308,
            296911444,
            296724382
        ],
        "H": [
            296697535,
            296733580,
            296740491,
            296722038,
            296725052,
            296682267,
            297077288,
            296716701,
            296694010,
            296739316,
            296709869
        ],
        "G1": [
            296659278,
            296653404,
            296691524,
            296692154,
            296687763,
            296690954,
            296714485,
            296708514,
            296694498,
            296722350,
            296692196,
            296714994,
            296716472,
            296675871,
            296678021,
            296689324,
            296711355,
            296718740,
            296717970
        ],
        "C": [
            296648915,
            296601876,
            296603677,
            296620266,
            296604632,
            296657618,
            296599716,
            296615593,
            296628687,
            296619240,
            296670537,
            297235105,
            296605830,
            296636731,
            296609140,
            296608950,
            296601490,
            296614087,
            296616894,
            296625117
        ],
        "E": [
            296623207,
            296640913,
            296636063,
            296663200,
            296642784,
            296664551,
            296656718,
            296657876,
            296674393,
            296649940,
            296693263,
            296657969,
            296721389,
            296645567,
            296630574,
            296667579,
            296641163,
            296648307,
            296683859
        ],
        "D": [
            296600718,
            296615344,
            296619619,
            296653987,
            296656132,
            296660646,
            296617887,
            302243346,
            296634501,
            296657055,
            296633273,
            296682986,
            296625109,
            296724190,
            296673253,
            296639245,
            296646292,
            296630851,
            296634818,
            296656565
        ],
        "B": [
            296590822,
            296591602,
            296590194,
            296602338,
            296593446,
            296653034,
            296591762,
            296620268,
            296615058,
            296600993,
            296669880,
            297230228,
            296596906,
            296631957,
            296596806,
            296598863,
            296591614,
            296604776,
            296608256,
            296609998
        ],
        "A": [
            296584122,
            296592381,
            296592956,
            296589246,
            296585131,
            296651916,
            296584578,
            296583609,
            296596837,
            296592612,
            296669080,
            297228403,
            296585930,
            296627664,
            296585567,
            296590101,
            296585364,
            296594212,
            296600836,
            296587924
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137306",
    "editorial": "Problem Credits: Lilypad Analysis: Proof_by_QED Solution Note that\r\nsimilarly to G1, once all plushies end up in the hands of spiders who\r\nare in a loop, the process becomes stable. Letâs model the input as a\r\ncollection of rooted forests. For each spider , if is part of a loop,\r\nthen letâs compress the loop into a single node and use that as the root\r\nof a tree. Otherwise, if spider gives a present to spider , then letâs\r\ndraw an edge from to . Now, let be any node that is not part of a loop.\r\nHow long will it take until spider runs out of presents? We can see that\r\nit is the subtree size of , as one present leaves the subtree each\r\nyear.Thus, our challenge now is to process the nodes in an efficient\r\norder such that we can find the subtree size of all nodes. This can be\r\ndone with topological sorting, which gives us an order that processes\r\nall nodes starting from the leaf upwards. After the topological sort, we\r\nmay do dynamic programming to find subtree sizes of all nodes. Let be\r\nthe number of days until spider runs out of presents. Letâs suppose that\r\nwe already calculated (we initialize it to be for all nodes since each\r\nspider starts with a present). Then, we should add to . Doing this and\r\nadding up all values of nodes directly before a cycle will yield the\r\nanswer.\r\n",
    "name": "G2. Medium Demon Problem  hard version ",
    "statement": "A group of n spiders has come together to exchange plushies. Initially,\r\neach spider has 1 plushie. Every year, if spider i has at least one\r\nplushie, he will give exactly one plushie to spider r_i. Otherwise, he\r\nwill do nothing. Note that all plushie transfers happen at the same\r\ntime. The process is in the current year if each spider has the same\r\nnumber of plushies (before the current year’s exchange) as he did the\r\nprevious year (before the previous year’s exchange). Note that year 1\r\ncan never be .Find the first year in which the process becomes .\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define int long longusing namespace std;const int N = 2e5+5;int t , n , m , low[N] , num[N] , cnt , stt[N] , sl , ans , dem[N] , a[N];int ck[N];vector<int> mp[N] , nmp[N];stack<int> st;void dfs(int u){\tlow[u] = num[u] = ++cnt;\tst.push(u);\tfor(auto x : mp[u]){\t\tif(stt[x]) continue;\t\tif(!num[x]){\t\t\tdfs(x);\t\t\tlow[u] = min(low[x],low[u]);\t\t}else low[u] = min(low[u],num[x]);\t}\tif(low[u] == num[u]){\t\tsl++;\t\tint v;\t\tdo{            ck[sl]++;            v = st.top();            st.pop();            stt[v] = sl;        }while (v != u);\t}}queue<pair<int,int>> ls;int solve(int u){    int res = 1;    for(auto x : nmp[u]) res += solve(x);    return res;}main(){    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);    cin>>t;    while(t--){        cin>>n;        for(int i = 1 ; i <= n ; i++){            cin>>a[i];            mp[i].push_back(a[i]);        }        for(int i = 1 ; i <= n ; i++){            if(!num[i]) dfs(i);        }        for(int i = 1 ; i <= n ; i++){            if(!stt[i]){                sl++;                stt[i] = sl;            }        }        for(int i = 1 ; i <= n ; i++){            if(ck[stt[i]] == 1 && ck[stt[a[i]]] == 1){                nmp[stt[a[i]]].push_back(stt[i]);                dem[stt[i]]++;            }        }        for(int i = 1 ; i <= sl ; i++){            if(ck[i] == 1 && !dem[i]){                ans = max(ans,solve(i));            }        }        cout<<ans+2<<'\\n';        for(int i = 1 ; i <= n ; i++){            mp[i].clear();            nmp[i].clear();            num[i] = 0;            low[i] = 0;            dem[i] = 0;            sl = 0;            stt[i] = 0;            ans = 0;            ck[i] = 0;        }    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "dsu",
        "graphs",
        "implementation",
        "trees"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\G2. Medium Demon Problem  hard version .json",
    "hint": []
}