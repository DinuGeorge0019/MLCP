{
    "link": "https://codeforces.com//contest/1742/problem/G",
    "problemId": "1584062",
    "problem_idx": "G",
    "shortId": "1742G",
    "contest_number": "1742",
    "problem_submissions": {
        "F": [
            176088434,
            175953044,
            175949290,
            175945773,
            175971876,
            175956188,
            175957305,
            175965256,
            175956666,
            175986547,
            175967228,
            175990142,
            175973277,
            175995491,
            175965274,
            175965118,
            175981574,
            175999797,
            175962842,
            175951834
        ],
        "G": [
            176088369,
            175967459,
            175958531,
            175962640,
            175942664,
            175961452,
            175978946,
            175980978,
            175996879,
            175961906,
            175978933,
            175980234,
            175974556,
            175962390,
            175992279,
            176006662,
            175998640,
            175988444,
            175973867,
            176011912
        ],
        "E": [
            175929743,
            175927916,
            175936666,
            175943925,
            175935324,
            175941784,
            175923888,
            175943247,
            175943495,
            175938334,
            175943285,
            175964043,
            175940442,
            175952017,
            175952132,
            175946109,
            175938097,
            175944046,
            175930209
        ],
        "D": [
            175922448,
            175917700,
            175931114,
            175925762,
            175903264,
            175930423,
            175912934,
            175931204,
            175933934,
            175950019,
            175928370,
            175923385,
            175918999,
            175933942,
            175925951,
            175937215,
            175924390,
            175931438,
            175917485
        ],
        "C": [
            175911573,
            175932064,
            175915066,
            175911109,
            175944918,
            175919477,
            175930954,
            175917347,
            175913405,
            175915900,
            175916495,
            175915920,
            175929840,
            175935658,
            175910930,
            175920672,
            175928041,
            175977210,
            175909445
        ],
        "B": [
            175896747,
            175892645,
            175906800,
            175897939,
            175914560,
            175901372,
            175894798,
            175901141,
            175900477,
            175897511,
            175903643,
            175902169,
            175897218,
            175901587,
            175895073,
            175910023,
            175914406,
            175902476,
            175898799
        ],
        "A": [
            175891011,
            175890670,
            175898330,
            175892580,
            175898679,
            175893875,
            175890834,
            175893408,
            175892512,
            175891126,
            175892054,
            175894976,
            175891245,
            175892986,
            175890956,
            175896962,
            175898765,
            175893870,
            175893102
        ]
    },
    "name": "G. Orray",
    "statement": "You are given an array a consisting of n nonnegative integers. Let’s\r\ndefine the prefix OR array b as the array b_i = a_1 \r\nmathsf{OR} a_2 \r\nmathsf{OR} \r\ndots \r\nmathsf{OR} a_i, where\r\nmathsf{OR} represents the bitwise OR operation. In other words, the\r\narray b is formed by computing the\r\nmathsf{OR} of every prefix of a.You are asked to rearrange the elements\r\nof the array a in such a way that its prefix OR array is\r\nlexicographically maximum.An array x is lexicographically greater than\r\nan array y if in the first position where x and y differ, x_i > y_i.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define int long long \nusing namespace std;\n#define vi vector<int>\n#define pb push_back\n \nvoid solve()\n{\n\tint n;\n\tcin>>n;\n\tmultiset<int> s;\n \n\tfor(int i=0;i<n;i++)\n\t{\n\t\t int a;\n\t\t cin>>a;\n\t\t s.insert(a);\n\t}\n \n\tvi ans;\n \n\tint val=0;\n \n\tfor(int i=30;i>=0;i--)\n\t{\n\t\t int x=0;\n \n\t\t if((1<<i) & val)\n\t\t \t continue;\n \n\t\t for(int x1:s)\n\t\t {\n            if((1<<i) & x1)\n            {\n            \t if((val | x) < (val | x1))\n            \t \tx=x1;\n            }\n\t\t }\n \n\t\t if(x==0)\n\t\t \t continue;\n \n\t\t \tans.pb(x);\n\t\t \tval=val|x;\n\t\t \tauto p=s.lower_bound(x);\n\t\t \ts.erase(p);\n\t}\n \n\tfor(auto x:s)\n\t\t ans.pb(x);\n \n\t\tfor(auto x:ans)\n\t\t\t cout<<x<<\" \";\n \n\t\t\tcout<<endl;\n}\n \nint32_t main()\n{\n\t int t=1;\n \n\t cin>>t;\n \n\t while(t--)\n\t {\n\t \t solve();\n\t }\n\t return 0;\n}    "
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\G. Orray.json",
    "editorial_link": "https://codeforces.com//blog/entry/107962",
    "editorial": "Note that in this context denotes .We can make the observation that only\r\nthe first elements matter, since after placing them optimally we can be\r\nsure all bits that could be set in the prefix OR would have already been\r\nset. So, we can brute force the optimal choice times (we choose to add\r\nan element if it provides the largest new prefix OR value among all\r\nunused elements) and then just add the rest of the unused elements.\r\n",
    "hint": []
}