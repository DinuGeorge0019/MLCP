{
    "link": "https://codeforces.com//contest/1722/problem/D",
    "problemId": "1524436",
    "problem_idx": "D",
    "shortId": "1722D",
    "contest_number": "1722",
    "problem_submissions": {
        "F": [
            170228432,
            170238760,
            170238447,
            170210010,
            170244311,
            170249847,
            170248990,
            170242753,
            170253987,
            170258155,
            170276802,
            170261239,
            170275384,
            170277690,
            170282251,
            170270200,
            170259586,
            170262035,
            170269336
        ],
        "G": [
            170201112,
            170239449,
            170242558,
            170231194,
            170252747,
            170261353,
            170265362,
            170245859,
            170241143,
            170270513,
            170254138,
            170230903,
            170246195,
            170265008,
            170257046,
            170286329,
            170267206,
            170289304,
            170253883
        ],
        "E": [
            170193046,
            170214495,
            170222070,
            170186508,
            170214137,
            170237586,
            170233277,
            170270766,
            170263452,
            170259315,
            170236844,
            170358200,
            170246843,
            170283220,
            170249250,
            170244656,
            170245016,
            170419946,
            170419889,
            170419820,
            170419722,
            170404871,
            170404830,
            170404803,
            170251944,
            170235689,
            170243907,
            170288376
        ],
        "B": [
            170184199,
            170175987,
            170182860,
            170222795,
            170174365,
            170177381,
            170174290,
            170175147,
            170180988,
            170176801,
            170176996,
            170185025,
            170178862,
            170179975,
            170177572,
            170174442,
            170196613,
            170178351,
            170176426
        ],
        "D": [
            170183156,
            170200419,
            170184918,
            170213538,
            170201758,
            170199636,
            170199991,
            170191578,
            170207198,
            170225091,
            170208494,
            170210667,
            170213605,
            170217491,
            170221636,
            170192639,
            170223864,
            170205720,
            170207316
        ],
        "C": [
            170177096,
            170190052,
            170201001,
            170214549,
            170180461,
            170183783,
            170184985,
            170181654,
            170191714,
            170190466,
            170186277,
            170194039,
            170659608,
            170191919,
            170201222,
            170193920,
            170181146,
            170213055,
            170187645,
            170193080
        ],
        "A": [
            170175728,
            170174285,
            170175641,
            170177482,
            170172907,
            170174547,
            170172857,
            170173111,
            170175353,
            170173745,
            170174044,
            170177681,
            170172889,
            170175006,
            170172831,
            170173065,
            170200391,
            170175631,
            170172819
        ]
    },
    "name": "D. Line",
    "statement": "There are n people in a horizontal line, each looking either to the left\r\nor the right. Each person counts the number of people in the direction\r\nthey are looking. The of the line is the sum of each person’s count.For\r\nexample, in the arrangement , where stands for a person looking left and\r\nstands for a person looking right, the counts for each person are [0, 3,\r\n2, 3, 4], and the value is 0+3+2+3+4=12.You are given the initial\r\narrangement of people in the line. For each k from 1 to n, determine the\r\nmaximum value of the line if you can change the direction of k people.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define lowbit(x) x&(-x)\n#define int long long\nusing namespace std;\nconst int N=2e5+5;\nint n,m,q;\ninline int gcd(int x,int y){return (!y)?x:gcd(y,x%y);}\nstruct data{\n\tint x,y;\n\tbool operator <(const data &t)const{\n\t\treturn x<t.x;\n\t}\n}d[N];\nnamespace BIT{\n\tint c[N];\n\tinline void add(int x,int y){\n\t\tfor(;x<=n;x+=lowbit(x))c[x]+=y;\n\t}\n\tinline int ask(int x){\n\t\tint ans=0;\n\t\tfor(;x;x-=lowbit(x))ans+=c[x];\n\t\treturn ans;\n\t}\n}\nnamespace Splay{\n\tint cnt,root;\n\tstruct tree{\n\t\tint f,val,siz,num;\n\t\tint son[2];\n\t}t[200005];\n\tinline void pushup(int x){\n\t\tt[x].siz=t[t[x].son[0]].siz+t[t[x].son[1]].siz+t[x].num;\n\t}\n\tinline void rot(int x){\n\t\tint prt=t[x].f,grf=t[prt].f,key=(t[prt].son[1]==x);\n\t\tt[grf].son[t[grf].son[1]==prt]=x;\n\t\tt[x].f=grf;\n\t\tt[prt].son[key]=t[x].son[!key];\n\t\tt[t[x].son[!key]].f=prt;\n\t\tt[x].son[!key]=prt;\n\t\tt[prt].f=x;\n\t\tpushup(prt),pushup(x);\n\t}\n\tinline void splay(int x,int goal){\n\t\twhile(t[x].f!=goal){\n\t\t\tint prt=t[x].f,grf=t[t[x].f].f;\n\t\t\tif(grf!=goal&&(t[grf].son[1]==prt)==(t[t[x].f].son[1]==x))rot(t[x].f);\n\t\t\trot(x);\n\t\t}\n\t\tif(!goal)root=x;\n\t}\n\tinline void insert(int x){\n\t\tint y=root,prt=0;\n\t\twhile(y&&t[y].val!=x)prt=y,y=t[y].son[x>t[y].val];\n\t\tif(y)++t[y].num;\n\t\telse{\n\t\t\ty=++cnt;\n\t\t\tif(prt)t[prt].son[x>t[prt].val]=y;\n\t\t\tt[y].son[0]=t[y].son[1]=0;\n\t\t\tt[y].val=x,t[y].f=prt,t[y].num=t[y].siz=1;\n\t\t}\n\t\tsplay(y,0);\n\t}\n\tinline void find(int x){\n\t\tif(!root)return;\n\t\tint y=root;\n\t\twhile(t[y].son[x>t[y].val]&&x!=t[y].val)y=t[y].son[x>t[y].val];\n\t\tsplay(y,0);\n\t}\n\tinline int fhd(int x,int key){\n\t\tfind(x);\n\t\tif(t[root].val>x&&key)return root;\n\t\tif(t[root].val<x&&!key)return root;\n\t\tint y=t[root].son[key];\n\t\tif(!y)return 0;\n\t\twhile(t[y].son[!key])y=t[y].son[!key];\n\t\treturn y;\n\t}\n\tinline void delt(int x){\n\t\tint fro=fhd(x,0),beh=fhd(x,1);\n\t\tsplay(fro,0),splay(beh,fro);\n\t\tint y=t[beh].son[0];\n\t\tif(t[y].num>1)--t[y].num,splay(y,0);\n\t\telse t[beh].son[0]=0,splay(beh,0);\n\t}\n\tinline int kth(int x){\n\t\tif(t[root].siz<x)return -1;\n\t\tint y=root;\n\t\twhile(1){\n\t\t\tint s=t[y].son[0];\n\t\t\tif(x<=t[s].siz)y=s;\n\t\t\telse if(x<=t[y].num+t[s].siz)return t[y].val;\n\t\t\telse x-=(t[s].siz+t[y].num),y=t[y].son[1];\n\t\t}\n\t}\n}\nstring s;\nint a[N],b[N];\nsigned main(){\n\tstd::ios::sync_with_stdio(false);\n\tcin.tie(0),cout.tie(0);\n\tint t;\n\tcin>>t;\n\twhile(t--){\n\t\tcin>>n>>s;\n\t\ts=' '+s;\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tif(s[i]=='L')a[i]=i-1,b[i]=n-i-i+1;\n\t\t\telse a[i]=n-i,b[i]=i-1-n+i;\n\t\t}\n\t\tint ans=0;\n\t\tfor(int i=1;i<=n;++i)ans+=a[i];\n\t\tsort(b+1,b+n+1);reverse(b+1,b+n+1);\n\t\tfor(int i=1;i<=n;++i)cout<<(ans=max(ans,ans+b[i]))<<\" \";\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\D. Line.json",
    "editorial_link": "https://codeforces.com//blog/entry/106478",
    "editorial": "For each person, letâs calculate how much the value will change if they\r\nturn around. For example, in the line , if the -th person turns around,\r\nthen the value of the line will change by , , , , , respectively. (For\r\ninstance, if the second person turns around, they see people before and\r\nperson after, so the value of the line changes by if they turn\r\naround.)Now note that if a person turns around, it doesnât affect anyone\r\nelseâs value. So the solution is a greedy one: letâs sort the array of\r\nvalues in increasing order. Afterwards, we should go from the left to\r\nthe right, and see if the value will increase if this person turns\r\naround; if it does, we should add it to the current total and\r\ncontinue.The time complexity of this solution is per testcase.\r\n",
    "hint": []
}