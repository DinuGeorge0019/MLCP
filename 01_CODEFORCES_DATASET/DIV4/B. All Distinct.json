{
    "link": "https://codeforces.com//contest/1692/problem/B",
    "problemId": "1429116",
    "problem_idx": "B",
    "shortId": "1692B",
    "contest_number": "1692",
    "problem_submissions": {
        "H": [
            160580859,
            160583343,
            160584024,
            160591427,
            160604329,
            160601660,
            160602770,
            160591772,
            160608130,
            160611041,
            160620364,
            160621319,
            160619381,
            160618233,
            160622294,
            160613918,
            160628107,
            160617962,
            160614609,
            160643082
        ],
        "G": [
            160562460,
            160570594,
            160559507,
            160575861,
            160575576,
            160581343,
            160579924,
            160562724,
            160590526,
            160575936,
            160585349,
            160592700,
            160560569,
            160593274,
            160587766,
            160595936,
            160599240,
            160597677,
            160598172,
            160599850
        ],
        "F": [
            160558944,
            160560903,
            160554913,
            160569954,
            160569726,
            160576576,
            160569448,
            160552626,
            160711327,
            160565447,
            160552495,
            160570386,
            160577679,
            160554842,
            160583969,
            160582875,
            160587537,
            160572488,
            160592240,
            160593057,
            160581747
        ],
        "E": [
            160555875,
            160564426,
            160548685,
            160564880,
            160559917,
            160572392,
            160565478,
            160577943,
            160712616,
            160548747,
            160545596,
            160581064,
            160560503,
            160600870,
            160571478,
            160575070,
            160580660,
            160559141,
            160571957,
            160581322,
            160567665
        ],
        "C": [
            160545506,
            160538919,
            160535266,
            160535003,
            160543492,
            160536935,
            160542321,
            160553726,
            160713621,
            160539285,
            160614357,
            160536964,
            160538313,
            160541667,
            160540495,
            160545824,
            160548840,
            160541701,
            160548074,
            160550180,
            160541364
        ],
        "D": [
            160544926,
            160550827,
            160592866,
            160546020,
            160554626,
            160555449,
            160554106,
            160593306,
            160579624,
            160592312,
            160553091,
            160562496,
            160556860,
            160565854,
            160567737,
            160593173,
            160565369,
            160568337,
            160554700
        ],
        "B": [
            160530169,
            160535271,
            160528395,
            160529425,
            160536550,
            160528956,
            160535713,
            160541091,
            160546587,
            160573845,
            160541194,
            160574218,
            160533557,
            160534102,
            160539459,
            160535203,
            160535317,
            160537940,
            160535614
        ],
        "A": [
            160521818,
            160525799,
            160521041,
            160521228,
            160523912,
            160521038,
            160524330,
            160542524,
            160525231,
            160521582,
            160522402,
            160527508,
            160521394,
            160522965,
            160525213,
            160523749,
            160523544,
            160525247,
            160523625
        ]
    },
    "name": "B. All Distinct",
    "statement": "Sho has an array a consisting of n integers. An operation consists of\r\nchoosing two distinct indices i and j and removing a_i and a_j from the\r\narray.For example, for the array [2, 3, 4, 2, 5], Sho can choose to\r\nremove indices 1 and 3. After this operation, the array becomes [3, 2,\r\n5]. Note that after any operation, the length of the array is reduced by\r\ntwo.After he made some operations, Sho has an array that has only\r\nelements. In addition, he made operations such that the resulting array\r\nis the possible. More formally, the array after Sho has made his\r\noperations respects these criteria: No pairs such that (i < j) and a_i =\r\na_j exist. The length of a is maximized. Output the length of the final\r\narray.\r\n",
    "solutions": [
        "//\n// Created by Vladimir Zvezdin on 14.06.2022.\n//\n\n#                                                                                                                       include                                                                                                                                                                   <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate<typename T1, typename T2>\nostream &operator<<(ostream &out, pair<T1, T2> &p) {\n    out << p.first << ' ' << p.second;\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nistream &operator>>(istream &in, pair<T1, T2> &p) {\n    in >> p.first >> p.second;\n    return in;\n}\n\ntemplate<typename T>\nostream &operator<<(ostream &out, vector<T> &arr) {\n    for (auto &i: arr) out << i << ' ';\n    return out;\n}\n\ntemplate<typename T>\nistream &operator>>(istream &in, vector<T> &arr) {\n    for (auto &i: arr) in >> i;\n    return in;\n}\n\ntemplate<typename T>\nostream &operator<<(ostream &out, set<T> &arr) {\n    for (auto &i: arr) out << i << ' ';\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nostream &operator<<(ostream &out, map<T1, T2> &arr) {\n    for (auto &i: arr) out << i << '\\n';\n    return out;\n}\n\nvoid dbg_out() { cerr << endl; }\n\ntemplate<typename Head, typename... Tail>\nvoid dbg_out(Head H, Tail... T) {\n    cerr << ' ' << H;\n    dbg_out(T...);\n}\n\ntypedef long long ll;\ntypedef long long ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n#define ff first\n#define ss second\n#define all(x) x.begin(), x.end()\n\nvoid solve();\n\n//#define TASK \"B\"\n\nint32_t main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n#ifdef TASK\n    freopen(TASK \".in\", \"r\", stdin);\n    freopen(TASK \".out\", \"w\", stdout);\n#endif\n\n    int T;\n    cin >> T;\n    while(T--) {\n        int n;\n        cin >> n;\n        vector<int> a(n);\n        cin >> a;\n        map<int, int> d;\n        for(auto i : a)\n            d[i]++;\n        int cnt = 0;\n        for(auto [i, j] : d) {\n            cnt += j - 1;\n        }\n        cout << n - (cnt + 1) / 2 * 2 << endl;\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\B. All Distinct.json",
    "editorial_link": "https://codeforces.com//blog/entry/103883",
    "editorial": "Note that the size of the array doesn\u00e2\u0080\u0099t change parity, since it always\r\ndecreases by . Let\u00e2\u0080\u0099s count the number of distinct elements, call it . If\r\nis the same parity as (the length of the array), then we can make sure\r\nall of these distinct elements stay in the array by removing two\r\nelements at a time. Otherwise, isn\u00e2\u0080\u0099t the same parity as . Then is the\r\nsame parity as , and we can make sure distinct elements stay in the\r\narray by removing two elements at a time. So the answer is if and have\r\nthe same parity, and otherwise.For example: has , . So and have the same\r\nparity, and we can get all distinct numbers by removing , .Time\r\ncomplexity: or , depending on the implementation.\r\n"
}