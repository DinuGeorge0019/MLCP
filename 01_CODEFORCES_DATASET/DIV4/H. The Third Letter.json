{"link": "https://codeforces.com//contest/1850/problem/H", "problemId": "2083774", "problem_idx": "H", "shortId": "1850H", "contest_number": "1850", "problem_submissions": {"H": [214871893, 214865969, 214852788, 214869885, 214859482, 214871930, 214890048, 214882151, 214901510, 214906261, 214875061, 214897397, 214901042, 215288667, 214912797, 214877629, 214908207, 214901454, 214905957, 214892389, 214894992], "G": [214828842, 214846473, 214837139, 214858241, 214868612, 214852093, 224564308, 214869726, 214870609, 214875672, 215057304, 214871890, 214803757, 214868618, 214885459, 215288625, 214843045, 214862477, 214892403, 214884644, 214841291, 214878802, 214871156], "F": [214815502, 214833560, 214816072, 214846638, 214841482, 214857335, 214863567, 214861114, 214839320, 214860814, 214821104, 214856950, 214839551, 215288612, 214856448, 214855319, 214835288, 214847715, 214831337, 214856836, 214841904], "E": [214804249, 214821169, 214840502, 214835624, 214832597, 214814581, 214835044, 214825933, 214819122, 214819358, 214821266, 215288692, 215288598, 214820552, 214886884, 214820942, 214833482, 214816679, 214841546, 214854853], "C": [214790919, 214777067, 214774253, 214778713, 214791898, 214779810, 214784107, 214784529, 214790788, 214779957, 214798775, 214783437, 214778795, 215288576, 214786043, 214771276, 214785575, 214784633, 214784836, 214789023, 214796431], "D": [214784734, 214830108, 214803817, 214792127, 214792253, 214803497, 214803302, 214793684, 214798203, 214802221, 214789266, 214813947, 214801704, 214805655, 215288587, 214803885, 214788179, 214795029, 214801980, 214802908, 214806616, 214816519], "B": [214769482, 214788903, 214769359, 214771548, 214775998, 214771521, 214772110, 214772055, 214779327, 214768046, 214785939, 214784384, 214771623, 215288562, 214776480, 214765670, 214772913, 214774261, 214777175, 214781034, 214784926], "A": [214759216, 214762760, 214761570, 214759352, 214761903, 214765601, 214759471, 214759894, 214759572, 214762667, 214759542, 214762985, 214760054, 214761038, 215288460, 214759685, 214758925, 214776553, 214759093, 214766299, 214760976, 214768326]}, "name": "H. The Third Letter", "statement": "In order to win his toughest battle, Mircea came up with a great\r\nstrategy for his army. He has n soldiers and decided to arrange them in\r\na certain way in camps. Each soldier has to belong to exactly one camp,\r\nand there is one camp at each integer point on the x-axis (at points\r\ncdots, -2, -1, 0, 1, 2,\r\ncdots).The strategy consists of m conditions. Condition i tells that\r\nsoldier a_i should belong to a camp that is situated d_i meters in front\r\nof the camp that person b_i belongs to. (If d_i < 0, then a_i\u2019s camp\r\nshould be -d_i meters behind b_i\u2019s camp.)Now, Mircea wonders if there\r\nexists a partition of soldiers that respects the condition and he asks\r\nfor your help! Answer \"\" if there is a partition of the n soldiers that\r\nsatisfies of the m conditions and \"\" otherwise.Note that two different\r\nsoldiers be placed in the same camp.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n#define dbg(a)  cerr << #a << \": \" << a << \"\\n\"\n\n\nvoid solve () {\n\tint n, m;  cin >> n >> m;\n\tvector<array<int, 2>> adj[n];\n\tfor (int e = 0; e < m; ++e) {\n\t\tint u, v, w;  cin >> u >> v >> w;  u--, v--;\n\t\tadj[u].push_back({v, w});\n\t\tadj[v].push_back({u, -w});\n\t}\n\n\tmap<ll, ll> pos;\n\tfor (int u = 0; u < n; ++u) {\n\t\tif (!pos.count(u)) {\n\t\t\tqueue<int> q;  q.push(u);\n\t\t\tpos[u] = 0;\n\t\t\twhile (!q.empty()) {\n\t\t\t\tauto u = q.front();  q.pop();\n\t\t\t\tfor (auto [v, w]: adj[u]) {\n\t\t\t\t\tif (pos.count(v)) {\n\t\t\t\t\t\tif (pos[v] - pos[u] != w) {\n\t\t\t\t\t\t\tcout << \"NO\\n\";\n\t\t\t\t\t\t\treturn ;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tpos[v] = pos[u] + w;\n\t\t\t\t\t\tq.push(v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tcout << \"YES\\n\";\n}\n\nint main(){\n\tios::sync_with_stdio(0), cin.tie(0);\n\t\n\tint tc = 1;\n\tcin >> tc;\n\tfor (int t = 1; t <= tc; ++t) {\n\t  solve();\n\t}\n}"], "input": "", "output": "", "tags": ["dfs and similar", "dsu", "graphs", "greedy", "implementation"], "dificulty": "1700", "interactive": false}