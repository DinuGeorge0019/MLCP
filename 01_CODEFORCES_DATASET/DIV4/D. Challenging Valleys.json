{
    "link": "https://codeforces.com//contest/1760/problem/D",
    "problemId": "1654041",
    "problem_idx": "D",
    "shortId": "1760D",
    "contest_number": "1760",
    "problem_submissions": {
        "F": [
            181970958,
            181950281,
            181958213,
            181965757,
            181944948,
            181970759,
            182137619,
            181978710,
            181975200,
            182010196,
            181966682,
            181975500,
            181975570,
            182068449,
            181971980,
            181969952,
            181982261,
            181977736,
            182001597,
            182004425,
            181959044,
            181960815
        ],
        "G": [
            181957910,
            181964483,
            181962348,
            181994157,
            181968737,
            181984162,
            181970230,
            181984643,
            181974424,
            181996148,
            181999866,
            182000308,
            182002923,
            181998982,
            182001075,
            182008221,
            181988981,
            181982666,
            181982848,
            182019928
        ],
        "D": [
            181925187,
            181924159,
            181926165,
            181933690,
            181961790,
            181933549,
            181948303,
            181930557,
            181924578,
            181929764,
            181933444,
            181924258,
            181934676,
            181927528,
            181934490,
            181940229,
            181930678,
            181939059,
            181941298,
            181931472
        ],
        "E": [
            181912280,
            181936624,
            181953534,
            181942834,
            181931986,
            181946510,
            181941618,
            181954737,
            181941455,
            181949963,
            181949921,
            181956622,
            181950008,
            181945918,
            181949626,
            181947544,
            181961711,
            181955020,
            181938685,
            181941972
        ],
        "C": [
            181906916,
            181917198,
            181915993,
            181915337,
            181922253,
            181919151,
            181912080,
            181916644,
            181911070,
            181912168,
            181914772,
            181914699,
            181915083,
            181911256,
            181917814,
            181906724,
            181913420,
            181922501,
            181911904,
            181915134
        ],
        "B": [
            181898180,
            181911813,
            181909417,
            181906573,
            181914704,
            181908082,
            181902374,
            181901695,
            181899205,
            181901224,
            181903533,
            181905511,
            181900583,
            181898635,
            181905113,
            181899276,
            181901539,
            181906560,
            181913258,
            181900918
        ],
        "A": [
            181894497,
            181906833,
            181903456,
            181901896,
            181908348,
            181897559,
            181894901,
            181894647,
            181894426,
            181894493,
            181895542,
            181896483,
            181894727,
            181894560,
            181895964,
            181894478,
            181895400,
            181897142,
            181898165,
            181894344
        ]
    },
    "name": "D. Challenging Valleys",
    "statement": "You are given an array a[0\r\ndots n-1] of n integers. This array is called a \"\" if there exists\r\nsubarray a[l\r\ndots r] such that: 0\r\nle l\r\nle r\r\nle n-1, a_l = a_{l+1} = a_{l+2} =\r\ndots = a_r, l = 0 or a_{l-1} > a_{l}, r = n-1 or a_r < a_{r+1}. Here are\r\nthree examples: The first image shows the array [3, 2, 2, 1, 2, 2, 3],\r\nit because only subarray with indices l=r=3 satisfies the condition.The\r\nsecond image shows the array [1, 1, 1, 2, 3, 3, 4, 5, 6, 6, 6], it\r\nbecause only subarray with indices l=0, r=2 satisfies the codition.The\r\nthird image shows the array [1, 2, 3, 4, 3, 2, 1], it because two\r\nsubarrays l=r=0 and l=r=6 that satisfy the condition.You are asked\r\nwhether the given array is a valley or not.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\n#define int long long\n#define pb push_back\n#define pf push_front\n#define ppf pop_front\n#define ppb pop_back\n#define F first\n#define S second\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>\n\nvoid freo(string x) {\n  freopen((x + \".in\").c_str(), \"r\", stdin);\n  freopen((x + \".out\").c_str(), \"w\", stdout);\n}\n\nvoid solve() {\n  int n;\n  cin >> n;\n  int a[n];\n  for (int i = 0; i < n; i++) cin >> a[i];\n  vector <pair <int, int>> comp;\n  int l = 0;\n  for (int i = 1; i < n; i++) {\n    if (a[i] != a[l]) {\n      comp.pb({l, i - 1});\n      l = i;\n    } \n  }\n  comp.pb({l, n - 1});\n  int cnt = 0;\n  for (auto i : comp) {\n    if ((i.F == 0 || a[i.F - 1] > a[i.F]) && (i.S == n - 1 || a[i.S + 1] > a[i.S])) cnt++;\n  }\n  if (cnt == 1) cout << \"YES\\n\";\n  else cout << \"NO\\n\";\n}\n\nsigned main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  cout.tie(0);\n  //freo(\"timeline\");\n  int tt = 1;\n  cin >> tt;\n  while (tt--) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "two pointers"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\D. Challenging Valleys.json",
    "editorial_link": "https://codeforces.com//blog/entry/109348",
    "editorial": "One possible solution is to represent a range of equal element as a\r\nsingle element with that value. Construct this array and loop through it\r\nand check how many element satisfy the conditions or and or . If exactly\r\none index satisfies these conditions, print \"YES\" and othewise\r\n\"NO\".Complexity:\r\n",
    "hint": []
}