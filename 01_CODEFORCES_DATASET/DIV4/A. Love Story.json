{
    "link": "https://codeforces.com//contest/1829/problem/A",
    "problemId": "1910845",
    "problem_idx": "A",
    "shortId": "1829A",
    "contest_number": "1829",
    "problem_submissions": {
        "H": [
            204823379,
            204818792,
            204824435,
            204813179,
            204829782,
            204824942,
            204824891,
            204831475,
            204829116,
            204812904,
            204820548,
            204813548,
            204853253,
            204828645,
            204819513,
            204862189,
            205152847,
            205152752,
            204813060,
            204833324,
            204856160
        ],
        "G": [
            204812415,
            204813072,
            204810737,
            204879903,
            204839324,
            204821300,
            204841768,
            204857522,
            204849840,
            204855874,
            204857412,
            204830495,
            204842991,
            204871081,
            204827619,
            204848652,
            204850787,
            204810246,
            204848842,
            204865545,
            204844410
        ],
        "F": [
            204795243,
            204797952,
            204799327,
            204802021,
            204800634,
            204808672,
            204802889,
            204801401,
            204800071,
            204801746,
            204812847,
            204814366,
            204820676,
            204827118,
            204799702,
            204893918,
            204852930,
            204810147,
            204811532
        ],
        "E": [
            204786697,
            204777053,
            204782830,
            204792056,
            204789229,
            204792045,
            204785911,
            204789109,
            204791218,
            204784445,
            204807615,
            204797187,
            204801035,
            204803562,
            204786341,
            204786937,
            204794944,
            204788261
        ],
        "D": [
            204781736,
            204798820,
            204773405,
            204783612,
            204777255,
            204783304,
            204777409,
            204779547,
            204782415,
            204783282,
            204775953,
            204790781,
            204784060,
            204790345,
            204792489,
            204794503,
            205414060,
            204778870,
            204783934,
            204793712
        ],
        "C": [
            204773988,
            204765804,
            204766404,
            204774510,
            204770221,
            204771018,
            204768526,
            204767918,
            204770763,
            204769787,
            204782101,
            204773789,
            204770871,
            204776634,
            204772786,
            204772890,
            204774161,
            204774203
        ],
        "B": [
            204757299,
            204752820,
            204757449,
            204757921,
            204757841,
            204763094,
            204755414,
            204756116,
            204756282,
            204756481,
            204771921,
            204758336,
            204757819,
            204765627,
            204777479,
            204755801,
            204764288,
            204760239
        ],
        "A": [
            204751190,
            204753835,
            204751237,
            204751978,
            204752622,
            204755727,
            204750673,
            204750589,
            204750742,
            204752279,
            204758952,
            204750800,
            204751415,
            204751397,
            204755067,
            204750777,
            204751807
        ]
    },
    "name": "A. Love Story",
    "statement": "Timur loves codeforces. That’s why he has a string s having length 10\r\nmade containing only lowercase Latin letters. Timur wants to know how\r\nmany indices string s from the string \"\".For example string s = \"\"\r\ndiffers from \"\" in 4 indices, shown in bold.Help Timur by finding the\r\nnumber of indices where string s differs from \"\".Note that you can’t\r\nreorder the characters in the string s.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#define bit(i, x) (x >> i & 1)\n#define _unique(x) (x).resize(unique((x).begin(), (x).end()) - (x).begin());\n#define all(x) (x).begin(), (x).end()\n#define rep(i, l, r) for(int i = l; i <= r; i++)\nusing namespace std;\nusing namespace __gnu_pbds;\ntemplate<class T> using ordered_set =tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update> ;\nconst int N = 3e5 + 3;\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nint rnd(int l,int r) {\n    return l+rng()%(r-l+1);\n}\ntemplate<typename T> void cmax(T &a, T b) {a = max(a, b);}\n\n\nstring a = \"codeforces\";\nstring b;\n\nvoid solve() {\n    cin >> b;\n    int res = 0;\n    rep(i, 0, min(a.size(), b.size()) - 1) {\n        res += (a[i] != b[i]);\n    }\n    cout << res << \"\\n\";\n}\n\nsigned main()\n{\n    ios_base::sync_with_stdio(NULL); cin.tie(nullptr); cout.tie(nullptr);\n\n//    freopen(\"testing.txt\", \"r\", stdin);\n//    freopen(\"outputing.txt\", \"w\", stdout);\n    #define task \"\"\n//    freopen(task\".inp\", \"r\", stdin);\n//    freopen(task\".out\", \"w\", stdout);\n//    #define Kawaii\n    #ifdef Kawaii\n        auto starttime = chrono::high_resolution_clock::now();\n    #endif\n\n    int t; cin >> t;\n    while (t--) solve();\n\n\n\n\n\n\n\n    #ifdef Kawaii\n        auto endtime = chrono::high_resolution_clock::now();\n        auto duration = chrono::duration_cast<chrono::milliseconds>(endtime - starttime).count();\n        cout << \"\\n=====\" << \"\\nUsed: \" << duration << \" ms\\n\";\n    #endif\n\n    return 0 ^ 0;\n}\n// Okina Matara sitting in a wheelchair\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\A. Love Story.json",
    "editorial_link": "https://codeforces.com//blog/entry/116108",
    "editorial": "You need to implement what is written in the statement. You need to\r\ncompare the given string with the string \"\" character by character,\r\ncounting the number of differences. We know that the length of is , so\r\nwe can simply iterate through both strings and compare each character at\r\nthe same index.If the characters are the same, we move on to the next\r\nindex. If they are different, we count it as a difference and move on to\r\nthe next index. Once we have compared all characters, we output the\r\nnumber of differences.\r\n",
    "hint": []
}