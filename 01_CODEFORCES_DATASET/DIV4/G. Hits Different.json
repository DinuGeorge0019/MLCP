{
    "link": "https://codeforces.com//contest/1829/problem/G",
    "problemId": "1910851",
    "problem_idx": "G",
    "shortId": "1829G",
    "contest_number": "1829",
    "problem_submissions": {
        "H": [
            204823379,
            204818792,
            204824435,
            204813179,
            204829782,
            204824942,
            204824891,
            204831475,
            204829116,
            204812904,
            204820548,
            204813548,
            204853253,
            204828645,
            204819513,
            204862189,
            205152847,
            205152752,
            204813060,
            204833324,
            204856160
        ],
        "G": [
            204812415,
            204813072,
            204810737,
            204879903,
            204839324,
            204821300,
            204841768,
            204857522,
            204849840,
            204855874,
            204857412,
            204830495,
            204842991,
            204871081,
            204827619,
            204848652,
            204850787,
            204810246,
            204848842,
            204865545,
            204844410
        ],
        "F": [
            204795243,
            204797952,
            204799327,
            204802021,
            204800634,
            204808672,
            204802889,
            204801401,
            204800071,
            204801746,
            204812847,
            204814366,
            204820676,
            204827118,
            204799702,
            204893918,
            204852930,
            204810147,
            204811532
        ],
        "E": [
            204786697,
            204777053,
            204782830,
            204792056,
            204789229,
            204792045,
            204785911,
            204789109,
            204791218,
            204784445,
            204807615,
            204797187,
            204801035,
            204803562,
            204786341,
            204786937,
            204794944,
            204788261
        ],
        "D": [
            204781736,
            204798820,
            204773405,
            204783612,
            204777255,
            204783304,
            204777409,
            204779547,
            204782415,
            204783282,
            204775953,
            204790781,
            204784060,
            204790345,
            204792489,
            204794503,
            205414060,
            204778870,
            204783934,
            204793712
        ],
        "C": [
            204773988,
            204765804,
            204766404,
            204774510,
            204770221,
            204771018,
            204768526,
            204767918,
            204770763,
            204769787,
            204782101,
            204773789,
            204770871,
            204776634,
            204772786,
            204772890,
            204774161,
            204774203
        ],
        "B": [
            204757299,
            204752820,
            204757449,
            204757921,
            204757841,
            204763094,
            204755414,
            204756116,
            204756282,
            204756481,
            204771921,
            204758336,
            204757819,
            204765627,
            204777479,
            204755801,
            204764288,
            204760239
        ],
        "A": [
            204751190,
            204753835,
            204751237,
            204751978,
            204752622,
            204755727,
            204750673,
            204750589,
            204750742,
            204752279,
            204758952,
            204750800,
            204751415,
            204751397,
            204755067,
            204750777,
            204751807
        ]
    },
    "name": "G. Hits Different",
    "statement": "In a carnival game, there is a huge pyramid of cans with 2023 rows,\r\nnumbered in a regular pattern as shown. You throw a ball at the pyramid,\r\nand it hits a single can with number n^2. This causes all cans that are\r\nstacked on top of this can to fall (that is, can n^2 falls, then the\r\ncans directly above n^2 fall, then the cans directly above those cans,\r\nand so on). For example, the picture above shows the cans that would\r\nfall if can 9^2 is hit.What is the of the numbers on all cans that fall?\r\nRecall that n^2 = n\r\ntimes n.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#define bit(i, x) (x >> i & 1)\n#define _unique(x) (x).resize(unique((x).begin(), (x).end()) - (x).begin());\n#define all(x) (x).begin(), (x).end()\n#define rep(i, l, r) for(int i = l; i <= r; i++)\nusing namespace std;\nusing namespace __gnu_pbds;\ntemplate<class T> using ordered_set =tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update> ;\nconst int N = 3e5 + 3;\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nint rnd(int l,int r) {\n    return l+rng()%(r-l+1);\n}\ntemplate<typename T> void cmax(T &a, T b) {a = max(a, b);}\n\n#define fi first\n#define se second\n\nint n;\nlong long a[3002][3002];\nint vst[(int)1e7];\npair<int, int> pos[(int)1e7];\n\nvoid solve() {\n    cin >> n;\n    cout << a[pos[n].first][pos[n].second] << \"\\n\";\n}\n\nsigned main()\n{\n    ios_base::sync_with_stdio(NULL); cin.tie(nullptr); cout.tie(nullptr);\n\n//    freopen(\"testing.txt\", \"r\", stdin);\n//    freopen(\"outputing.txt\", \"w\", stdout);\n    #define task \"\"\n//    freopen(task\".inp\", \"r\", stdin);\n//    freopen(task\".out\", \"w\", stdout);\n//    #define Kawaii\n    #ifdef Kawaii\n        auto starttime = chrono::high_resolution_clock::now();\n    #endif\n\n    int cur = 1, d = 0;\n    rep(i, 1, 2023) {\n        int k = cur, d2 = i;\n        rep(j, 1, 2023) {\n            a[i][j] = 1ll*k*k;\n            a[i][j] += a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1];\n            pos[k] = make_pair(i, j);\n            k += ++d2;\n        }\n        cur += ++d;\n    }\n\n\n\n    int t; cin >> t;\n    while (t--) solve();\n\n\n\n\n\n\n\n    #ifdef Kawaii\n        auto endtime = chrono::high_resolution_clock::now();\n        auto duration = chrono::duration_cast<chrono::milliseconds>(endtime - starttime).count();\n        cout << \"\\n=====\" << \"\\nUsed: \" << duration << \" ms\\n\";\n    #endif\n\n    return 0 ^ 0;\n}\n// Okina Matara sitting in a wheelchair\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "implementation",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\G. Hits Different.json",
    "editorial_link": "https://codeforces.com//blog/entry/116108",
    "editorial": "There are many solutions which involve going row by row and using some\r\ncomplicated math formulas, but here is a solution that requires no\r\nformulas and is much quicker to code.The cans are hard to deal with, but\r\nif we replace them with a different shape, a diamond, we get the\r\nfollowing: Now the cans that fall just form a rectangle. In fact, letâs\r\nrotate the picture: What we can see is that each query is just a 2D\r\nprefix sum! So we can precompute all prefix sums in the grid in time,\r\nwhere is the maximum value of the input, and answer each sum in time.To\r\navoid finding the row and column, we can instead iterate through the\r\ncells in order , that is, we go diagonal-by-diagonal in the grid above.\r\nNow, make a separate array , and keep track of the answer for each cell\r\nfrom to as we find its prefix sum. This avoids having to do any\r\ncomplicated math or binary search to find the row and column for the\r\nprefix sum. See the implementation for more details.The time complexity\r\nis precomputation with per test case.\r\n",
    "hint": []
}