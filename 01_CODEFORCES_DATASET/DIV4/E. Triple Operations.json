{
    "link": "https://codeforces.com//contest/1999/problem/E",
    "problemId": "2800023",
    "problem_idx": "E",
    "shortId": "1999E",
    "contest_number": "1999",
    "problem_submissions": {
        "G1": [
            274763546,
            274786025,
            274806389,
            274840194,
            274853481,
            274834731,
            274853398,
            274844144,
            274812432,
            274836138,
            274820618,
            274843459,
            274849762,
            274858308,
            274835246,
            274831909,
            274831235,
            274872122,
            274861661,
            274796200,
            274846512
        ],
        "G2": [
            274763246,
            274827897,
            274840676,
            274840339,
            274840889,
            274839833,
            274846067,
            274860687,
            274899747,
            274886725,
            274859772,
            274849972,
            274878481,
            274865843,
            274900308,
            274864325,
            274876622,
            274882909,
            274905026,
            274877976
        ],
        "A": [
            274756621,
            274711498,
            274718208,
            274731277,
            274715124,
            274718517,
            274712966,
            274717324,
            274747240,
            274726763,
            274712143,
            274713636,
            274713905,
            274715689,
            274727839,
            274713028,
            274713489,
            274718476,
            274727012,
            274712494
        ],
        "F": [
            274752769,
            274772748,
            274807808,
            274808540,
            274814792,
            274766600,
            274807913,
            274772354,
            291543797,
            274802791,
            274779921,
            274819097,
            274813900,
            274849820,
            274822552,
            274815589,
            274815616,
            274830598,
            274831805,
            274838941,
            274833354
        ],
        "E": [
            274743113,
            274804694,
            274769334,
            274772223,
            274798556,
            274767430,
            274824575,
            274771838,
            274781424,
            274762831,
            274830423,
            274800434,
            274791853,
            274809267,
            274790720,
            274797751,
            274800095,
            274803759,
            274812604,
            274802441
        ],
        "D": [
            274743008,
            274749250,
            274756261,
            274761914,
            274762217,
            274742445,
            274758072,
            274738445,
            274750316,
            274751795,
            274764980,
            274764398,
            274762112,
            274764098,
            274764317,
            274767030,
            274769275,
            274784555,
            274757786,
            274779987
        ],
        "C": [
            274733934,
            274739602,
            274747230,
            274752038,
            274733588,
            274731999,
            274745624,
            274762591,
            274746480,
            274740104,
            274745735,
            274752511,
            274745579,
            274774916,
            274752830,
            274777913,
            274757696,
            274760442,
            274746053,
            274765650
        ],
        "B": [
            274729919,
            274733598,
            274739149,
            274742867,
            274742348,
            274829536,
            274736580,
            274834606,
            274748527,
            274828913,
            274733682,
            274738419,
            274736193,
            274772911,
            274771754,
            274803093,
            274738451,
            274741527,
            274770711,
            274769032
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132383",
    "editorial": "Consider writing the numbers in ternary (it is like binary but instead we use three digits, and for clarity we will use \"digit\" in the solution instead of \"bit\" or \"trit\").\n\nIn the operation, we will add a 0\n to the end of the number x\n and remove the last digit of y\n. For example, if x=8\n and y=11\n, then in ternary the numbers are 223\n and 1023\n. After the operation, x=24\n and y=3\n, and indeed in ternary they are 2203\n and 103\n. (This is because multiplying by 3\n is multiplying by 103\n, and similarly dividing by 3\n is like dividing by 103\n.)\n\nThis means that the total number of digits across all numbers does not change (since we add one digit and remove one digit). So how is it possible to make all numbers 0\n?\n\nWell, there is one exception to the above rule: when we use the operation with x=0\n, we add a 0\n to the end of the number 0\n, but this added digit doesn't count (because 3?0=0\n). This means that if we ever do the operation with x=0\n, then we will lose one digit total (since x\n doesn't gain a digit, but y\n loses a digit).\n\nThis means the solution is as follows: first, we make one of the numbers equal to 0\n. Then, we will use this 0\n to remove all the digits of all other numbers. To use the fewest number of operations possible, we should do the first step on the minimum number, since it has the fewest digits.\n\nLet f(x)\n denote the number of ternary digits in the number x\n (actually, f(x)=?log3(x)?+1\n). Then the first step takes f(l)\n operations (since l\n is the smallest number in the range [l,r]\n), and the second step takes f(l)+?+f(r)\n operations (since we need to remove all the digits, which is the total number of digits from l\n to r\n).\n\nThis means the answer for each test case is f(l)+f(l)+?+f(r)\n. To find this sum quickly, we can compute prefix sums on f\n so that the answer is simply f(l)+psum(r)?psum(l?1)\n, which takes O(1)\n time per test case with O(n)\n precomputation.",
    "name": "E. Triple Operations",
    "statement": "On the board Ivy wrote down all integers from l to r, inclusive.In an\r\noperation, she does the following: pick two numbers x and y on the\r\nboard, erase them, and in their place write the numbers 3x and\r\nlfloor\r\nfrac{y}{3}\r\nrfloor. (Here\r\nlfloor\r\nbullet\r\nrfloor denotes rounding down to the nearest integer). What is the\r\nminimum number of operations Ivy needs to make all numbers on the board\r\nequal 0? We have a proof that this is always possible.\r\n",
    "solutions": [
        "/*Though leaves are many , the root is one.Through all the lying days of my youthI swayed my leaves and flowers in the sun.Now I may wither into the truth.\t  \t  \t- William Butler Yeats*///#pragma GCC optimize(\"Ofast\",\"unroll-loops\",\"omit-frame-pointer\",\"inline\") //Optimization flags//#pragma GCC option(\"arch=native\",\"tune=native\",\"no-zero-upper\") //Enable AVX//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2\")#include<bits/stdc++.h>//#include<ext/pb_ds/assoc_container.hpp>using namespace std;//using namespace __gnu_pbds;const int inf=0x3f3f3f3f;const double eps=1e-6;const int mod=1e9+7;typedef long long ll;#ifndef LOCAL#define cerr if(0)cout#define eprintf(...) 0#else#define eprintf(...) fprintf(stderr, __VA_ARGS__)#endifinline string getstr(string &s,int l,int r){string ret=\"\";for(int i=l;i<=r;i++)ret.push_back(s[i]);return ret;}int modpow(int x,int y,int md=mod){int ret=1;do{if(y&1)ret=(ll)ret*x%md;x=(ll)x*x%md;}while(y>>=1);return ret;}inline int Rand(){return rand()*32768+rand();}int lg[200005],sum[200005];int main(){\tlg[0]=0;lg[1]=1;\tfor(int i=2;i<=2e5;i++)lg[i]=lg[i/3]+1;\tfor(int i=1;i<=2e5;i++)sum[i]=sum[i-1]+lg[i];\tint T;cin>>T;\twhile(T--){\t\tint l,r;\t\tcin>>l>>r;\t\tcout<<lg[l]+sum[r]-sum[l-1]<<endl;\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "implementation",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\E. Triple Operations.json",
    "hint": []
}