{
    "link": "https://codeforces.com//contest/2044/problem/E",
    "problemId": "3086856",
    "problem_idx": "E",
    "shortId": "2044E",
    "contest_number": "2044",
    "problem_submissions": {
        "F": [
            296933150,
            296655063,
            296674411,
            296677763,
            296669954,
            296737361,
            296736034,
            296677816,
            296696398,
            296687386,
            296699481,
            296685099,
            296683886,
            296731517,
            296707787,
            296654373,
            296909091,
            296715340,
            296702594,
            296696190
        ],
        "G2": [
            296699390,
            296704280,
            296704818,
            298531131,
            296733068,
            296720698,
            296741262,
            296739720,
            296746308,
            296911444,
            296724382
        ],
        "H": [
            296697535,
            296733580,
            296740491,
            296722038,
            296725052,
            296682267,
            297077288,
            296716701,
            296694010,
            296739316,
            296709869
        ],
        "G1": [
            296659278,
            296653404,
            296691524,
            296692154,
            296687763,
            296690954,
            296714485,
            296708514,
            296694498,
            296722350,
            296692196,
            296714994,
            296716472,
            296675871,
            296678021,
            296689324,
            296711355,
            296718740,
            296717970
        ],
        "C": [
            296648915,
            296601876,
            296603677,
            296620266,
            296604632,
            296657618,
            296599716,
            296615593,
            296628687,
            296619240,
            296670537,
            297235105,
            296605830,
            296636731,
            296609140,
            296608950,
            296601490,
            296614087,
            296616894,
            296625117
        ],
        "E": [
            296623207,
            296640913,
            296636063,
            296663200,
            296642784,
            296664551,
            296656718,
            296657876,
            296674393,
            296649940,
            296693263,
            296657969,
            296721389,
            296645567,
            296630574,
            296667579,
            296641163,
            296648307,
            296683859
        ],
        "D": [
            296600718,
            296615344,
            296619619,
            296653987,
            296656132,
            296660646,
            296617887,
            302243346,
            296634501,
            296657055,
            296633273,
            296682986,
            296625109,
            296724190,
            296673253,
            296639245,
            296646292,
            296630851,
            296634818,
            296656565
        ],
        "B": [
            296590822,
            296591602,
            296590194,
            296602338,
            296593446,
            296653034,
            296591762,
            296620268,
            296615058,
            296600993,
            296669880,
            297230228,
            296596906,
            296631957,
            296596806,
            296598863,
            296591614,
            296604776,
            296608256,
            296609998
        ],
        "A": [
            296584122,
            296592381,
            296592956,
            296589246,
            296585131,
            296651916,
            296584578,
            296583609,
            296596837,
            296592612,
            296669080,
            297228403,
            296585930,
            296627664,
            296585567,
            296590101,
            296585364,
            296594212,
            296600836,
            296587924
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137306",
    "editorial": "Problem Credits: Proof_by_QED,Lilypad Analysis: macaquedev, chromate00\r\nSolution 1 (Binary Search)Clearly, trying to bruteforce over all\r\npossible values of or is too slow, because the bounds are . However,\r\nthere is another variable that you can actually bruteforce over and that\r\nis . This is because exponentiation famously makes numbers very big very\r\nquickly and if we set as small as possible (i.e. ), we only need to\r\ncheck . This is because , so there cannot possibly be any solutions for\r\nfor any .Now, letâs rephrase the problem. We need to find pairs such\r\nthat . Now, we can check every value of from to , and for each, binary\r\nsearch to find the smallest such that fits the conditions, and the\r\nlargest . Now, we can subtract these two values and add this to the\r\nanswer.\r\n",
    "name": "E. Insane Problem",
    "statement": "Wave is given five integers k, l_1, r_1, l_2, and r_2. Wave wants you to\r\nhelp her count the number of ordered pairs (x, y) such that all of the\r\nfollowing are satisfied: l_1\r\nleq x\r\nleq r_1. l_2\r\nleq y\r\nleq r_2. There exists a non-negative integer n such that\r\nfrac{y}{x} = k^n.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#define int long long#define endl \"\\n\"using namespace std; int countIntersect(int l1, int r1, int l2, int r2){    array<int, 2> p1 = {l1, r1}, p2 = {l2, r2};    if (p1 > p2) swap(p1, p2);    l1 = p1[0]; r1 = p1[1]; l2 = p2[0]; r2 = p2[1];     if (r1 < l2) return 0;    if ((l1 <= l2) && (r2 <= r1)) return r2 - l2 + 1;    if ((l2 <= l1) && (r1 <= r2)) return r1 - l1 + 1;    return r1 - l2 + 1;} signed main(){    cin.tie(0) -> sync_with_stdio(0);     if (fopen(\"task.inp\",\"r\")){        freopen(\"task.inp\",\"r\", stdin);        freopen(\"task.out\",\"w\", stdout);    }    #define FILENAME \"mpoints\"    if (fopen(FILENAME\".inp\",\"r\")){        freopen(FILENAME\".inp\",\"r\",stdin);        freopen(FILENAME\".out\",\"w\",stdout);    }     int tc; cin >> tc;    while (tc--){        int k, l1, r1, l2, r2;        cin >> k >> l1 >> r1 >> l2 >> r2;         int ans = 0;        for (int d = 1; d <= r2; d *= k){            int l3 = (l2 + d - 1) / d, r3 = r2 / d;            if (l3 > r3) continue;            ans += countIntersect(l1, r1, l3, r3);        }         cout << ans << endl;    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "implementation",
        "math",
        "number theory"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\E. Insane Problem.json",
    "hint": []
}