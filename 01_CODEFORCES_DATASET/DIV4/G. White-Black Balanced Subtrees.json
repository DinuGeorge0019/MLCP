{
    "link": "https://codeforces.com//contest/1676/problem/G",
    "problemId": "1394659",
    "problem_idx": "G",
    "shortId": "1676G",
    "contest_number": "1676",
    "problem_submissions": {
        "H1": [
            156663309,
            156671035,
            156676406,
            156677707,
            156687383,
            156685420,
            156683017,
            156685580,
            156680845,
            156671307,
            156687981,
            156692199,
            156657699,
            156687504,
            156687346,
            156669994,
            156692215,
            156690772,
            156699306,
            156674281
        ],
        "F": [
            156662637,
            156656235,
            156665211,
            156662718,
            156672962,
            156670420,
            156669171,
            156672700,
            156689970,
            156701445,
            156668704,
            156670980,
            156692969,
            156667724,
            156672833,
            156697894,
            156674219,
            156675205,
            156671046,
            156695991
        ],
        "H2": [
            156662559,
            156672919,
            156681840,
            156677592,
            156687173,
            156685234,
            156690935,
            156688441,
            156684282,
            156671711,
            156695356,
            156692679,
            156656052,
            156687092,
            156691243,
            156679289,
            156697513,
            156691027,
            156699563,
            156671734
        ],
        "G": [
            156653552,
            156661675,
            156671235,
            156675609,
            156680563,
            156678234,
            156674526,
            156681628,
            156674365,
            156683892,
            156676420,
            156679729,
            156701067,
            156674224,
            156680025,
            156686261,
            156680343,
            156680683,
            156677057,
            156684128
        ],
        "D": [
            156645060,
            156650467,
            156648808,
            156663990,
            156656243,
            156654084,
            156654738,
            156653252,
            156652931,
            156720716,
            156654408,
            156652941,
            156637656,
            156666271,
            156684420,
            156652544,
            156655842,
            156653648,
            156661131,
            156659068,
            156666840
        ],
        "E": [
            156637739,
            156656814,
            156654288,
            156651298,
            156645000,
            156661246,
            156659306,
            156663832,
            156658669,
            156662700,
            156660368,
            156647103,
            156671327,
            156659242,
            156657789,
            156660550,
            156665251,
            156665346,
            156657650,
            156676846
        ],
        "C": [
            156635303,
            156637333,
            156640687,
            156644760,
            156634239,
            156639390,
            156648512,
            156642440,
            156638160,
            156643703,
            156638666,
            156653980,
            156643726,
            156635835,
            156643174,
            156650355,
            156639499,
            156649527,
            156641083,
            156646143
        ],
        "B": [
            156625015,
            156622909,
            156630747,
            156623442,
            156623221,
            156628681,
            156623121,
            156628287,
            156626048,
            156630150,
            156624457,
            156631684,
            156634804,
            156625307,
            156634457,
            156622363,
            156628178,
            156624635,
            156624141,
            156627356
        ],
        "A": [
            156619295,
            156618687,
            156622372,
            156618765,
            156618606,
            156621261,
            156618635,
            156621495,
            156621071,
            156622861,
            156618818,
            156619301,
            156623952,
            156618523,
            156619829,
            156618483,
            156619228,
            156619089,
            156618766,
            156619486
        ]
    },
    "name": "G. White-Black Balanced Subtrees",
    "statement": "You are given a rooted tree consisting of n vertices numbered from 1 to\r\nn. The root is vertex 1. There is also a string s denoting the color of\r\neach vertex: if s_i =\r\ntexttt{B}, then vertex i is black, and if s_i =\r\ntexttt{W}, then vertex i is white.A subtree of the tree is called\r\nbalanced if the number of white vertices equals the number of black\r\nvertices. Count the number of balanced subtrees.A is a connected\r\nundirected graph without cycles. A is a tree with a selected vertex,\r\nwhich is called the . In this problem, all trees have root 1.The tree is\r\nspecified by an array of parents a_2,\r\ndots, a_n containing n-1 numbers: a_i is the parent of the vertex with\r\nthe number i for all i = 2,\r\ndots, n. The parent of a vertex u is a vertex that is the next vertex on\r\na simple path from u to the root.The of a vertex u is the set of all\r\nvertices that pass through u on a simple path to the root. For example,\r\nin the picture below, 7 is in the subtree of 3 because the simple path 7\r\nto 5\r\nto 3\r\nto 1 passes through 3. Note that a vertex is included in its subtree,\r\nand the subtree of the root is the entire tree. The picture shows the\r\ntree for n=7, a=[1,1,2,3,3,5], and s=\r\ntexttt{WBBWWBW}. The subtree at the vertex 3 is balanced.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 4040;\n\nint a[N];\nvector<int> edges[N];\nstring s;\nint ans;\nint f[N];\n\nvoid dfs(int x)\n{\n\tf[x] = 0;\n\tif(s[x - 1] == 'B')\n\t\tf[x] ++;\n\telse\n\t\tf[x] --;\n\tfor(auto &y : edges[x])\n\t{\n\t\tdfs(y);\n\t\tf[x] += f[y];\n\t}\n\t\n\tans += !f[x];\n}\n\nint main()\n{\n\tint t;\n\tint n;\n\tint i;\n\t\n\tcin >> t;\n\twhile(t --)\n\t{\n\t\tcin >> n;\n\t\tfor(i = 1; i <= n; i ++)\n\t\t\tedges[i].clear();\n\t\tfor(i = 2; i <= n; i ++)\n\t\t\tcin >> a[i];\n\t\tfor(i = 2; i <= n; i ++)\n\t\t\tedges[a[i]].push_back(i);\n\t\tcin >> s;\n\t\t\n\t\tans = 0;\n\t\tdfs(1);\n\t\t\n\t\tcout << ans << endl;\n\t}\n\t\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "graphs",
        "trees"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\G. White-Black Balanced Subtrees.json",
    "editorial_link": "https://codeforces.com//blog/entry/102710",
    "editorial": "Letâs run a dynamic programming from the leaves to the root. For each\r\nvertex store the values of the number of balanced subtrees, as well as\r\nthe number of white and black vertices in it. Then from a vertex we can\r\ncount the total number of white vertices in its subtree as well as the\r\nblack vertices in its subtree, and update our total if they are equal.\r\nRemember to include the color of the vertex itself in these counts. The\r\nanswer is the answer at the root.Therefore the problem is solved in\r\ntime.\r\n",
    "hint": []
}