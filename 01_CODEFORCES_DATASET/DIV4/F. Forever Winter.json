{
    "link": "https://codeforces.com//contest/1829/problem/F",
    "problemId": "1910850",
    "problem_idx": "F",
    "shortId": "1829F",
    "contest_number": "1829",
    "problem_submissions": {
        "H": [
            204823379,
            204818792,
            204824435,
            204813179,
            204829782,
            204824942,
            204824891,
            204831475,
            204829116,
            204812904,
            204820548,
            204813548,
            204853253,
            204828645,
            204819513,
            204862189,
            205152847,
            205152752,
            204813060,
            204833324,
            204856160
        ],
        "G": [
            204812415,
            204813072,
            204810737,
            204879903,
            204839324,
            204821300,
            204841768,
            204857522,
            204849840,
            204855874,
            204857412,
            204830495,
            204842991,
            204871081,
            204827619,
            204848652,
            204850787,
            204810246,
            204848842,
            204865545,
            204844410
        ],
        "F": [
            204795243,
            204797952,
            204799327,
            204802021,
            204800634,
            204808672,
            204802889,
            204801401,
            204800071,
            204801746,
            204812847,
            204814366,
            204820676,
            204827118,
            204799702,
            204893918,
            204852930,
            204810147,
            204811532
        ],
        "E": [
            204786697,
            204777053,
            204782830,
            204792056,
            204789229,
            204792045,
            204785911,
            204789109,
            204791218,
            204784445,
            204807615,
            204797187,
            204801035,
            204803562,
            204786341,
            204786937,
            204794944,
            204788261
        ],
        "D": [
            204781736,
            204798820,
            204773405,
            204783612,
            204777255,
            204783304,
            204777409,
            204779547,
            204782415,
            204783282,
            204775953,
            204790781,
            204784060,
            204790345,
            204792489,
            204794503,
            205414060,
            204778870,
            204783934,
            204793712
        ],
        "C": [
            204773988,
            204765804,
            204766404,
            204774510,
            204770221,
            204771018,
            204768526,
            204767918,
            204770763,
            204769787,
            204782101,
            204773789,
            204770871,
            204776634,
            204772786,
            204772890,
            204774161,
            204774203
        ],
        "B": [
            204757299,
            204752820,
            204757449,
            204757921,
            204757841,
            204763094,
            204755414,
            204756116,
            204756282,
            204756481,
            204771921,
            204758336,
            204757819,
            204765627,
            204777479,
            204755801,
            204764288,
            204760239
        ],
        "A": [
            204751190,
            204753835,
            204751237,
            204751978,
            204752622,
            204755727,
            204750673,
            204750589,
            204750742,
            204752279,
            204758952,
            204750800,
            204751415,
            204751397,
            204755067,
            204750777,
            204751807
        ]
    },
    "name": "F. Forever Winter",
    "statement": "A graph is generated from two integers x and y, both greater than 1, as\r\nfollows: Start with one central vertex. Connect x new vertices to this\r\ncentral vertex. Connect y new vertices to of these x vertices. For\r\nexample, below is a snowflake graph for x=5 and y=3. Given a snowflake\r\ngraph, determine the values of x and y.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#define bit(i, x) (x >> i & 1)\n#define _unique(x) (x).resize(unique((x).begin(), (x).end()) - (x).begin());\n#define all(x) (x).begin(), (x).end()\n#define rep(i, l, r) for(int i = l; i <= r; i++)\nusing namespace std;\nusing namespace __gnu_pbds;\ntemplate<class T> using ordered_set =tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update> ;\nconst int N = 3e5 + 3;\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nint rnd(int l,int r) {\n    return l+rng()%(r-l+1);\n}\ntemplate<typename T> void cmax(T &a, T b) {a = max(a, b);}\n\n#define fi first\n#define se second\n\nint n, m;\nvector<int> adj[N];\nint deg[N], vst[N];\nint f[202][202];\n\nvoid dfs(int u, int root) {\n    vst[u] = 1;\n    for(int v : adj[u]) if (!vst[v]) {\n        dfs(v, root);\n        f[root][u] = max(f[root][u], f[root][v] + 1);\n    }\n}\n\nvoid solve() {\n    cin >> n >> m;\n    rep(i, 1, m) {\n        int x, y; cin >> x >> y;\n        adj[x].push_back(y);\n        adj[y].push_back(x);\n        deg[x]++, deg[y]++;\n    }\n\n    rep(i, 1, n) {\n        rep(j, 1, n) vst[j] = 0;\n        dfs(i, i);\n    }\n    int x, y;\n    rep(i, 1, n) if (f[i][i] == 2) {\n        x = deg[i];\n        y = deg[adj[i][0]] - 1;\n        break;\n    }\n    cout << x << \" \" << y << \"\\n\";\n    rep(i, 1, n) {\n        adj[i].clear();\n        deg[i] = 0;\n        vst[i] = 0;\n    }\n    rep(i, 1, n) rep(j, 1, n) f[i][j] = 0;\n}\n\nsigned main()\n{\n    ios_base::sync_with_stdio(NULL); cin.tie(nullptr); cout.tie(nullptr);\n\n//    freopen(\"testing.txt\", \"r\", stdin);\n//    freopen(\"outputing.txt\", \"w\", stdout);\n    #define task \"\"\n//    freopen(task\".inp\", \"r\", stdin);\n//    freopen(task\".out\", \"w\", stdout);\n//    #define Kawaii\n    #ifdef Kawaii\n        auto starttime = chrono::high_resolution_clock::now();\n    #endif\n\n    int t; cin >> t;\n    while (t--) solve();\n\n\n\n\n\n\n\n    #ifdef Kawaii\n        auto endtime = chrono::high_resolution_clock::now();\n        auto duration = chrono::duration_cast<chrono::milliseconds>(endtime - starttime).count();\n        cout << \"\\n=====\" << \"\\nUsed: \" << duration << \" ms\\n\";\n    #endif\n\n    return 0 ^ 0;\n}\n// Okina Matara sitting in a wheelchair\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\F. Forever Winter.json",
    "editorial_link": "https://codeforces.com//blog/entry/116108",
    "editorial": "The of a vertex is the number of vertices connected to it. We can count\r\nthe degree of a vertex by seeing how many times it appears in the\r\ninput.Let\u00e2\u0080\u0099s count the degrees of the vertices in a snowflake graph. The\r\nstarting vertex has degree . Each of the newly-generated vertices has\r\ndegree (they have new neighbors, along with the starting vertex). Each\r\nof the newly-generated vertices has degree (they are only connected to\r\nthe previous vertex). Thus, we can make this table: CountDegree So we\r\ncan simply count the degrees, see which degree appears only once (it is\r\n) and see the number of vertices with degree (it is ), and from here we\r\ncan compute and .However, there is an edge case. If , then the first two\r\nrows combine: CountDegree We can still compute by counting the number of\r\nvertices with degree , and from here we can see that the other degree\r\nhas vertices of that type, so we can subtract one to extract and from\r\nthere, extract .The time complexity is per test case.\r\n"
}