{
    "link": "https://codeforces.com//contest/1791/problem/F",
    "problemId": "1764446",
    "problem_idx": "F",
    "shortId": "1791F",
    "contest_number": "1791",
    "problem_submissions": {
        "G2": [
            191958131,
            191971714,
            191959659,
            191958230,
            191985981,
            191990107,
            192010397,
            192022143,
            192026632,
            192009247,
            192008489,
            191978702,
            192030245,
            192013013,
            192448135,
            192447632,
            192012370,
            191991972,
            192027059,
            192037908
        ],
        "G1": [
            191904574,
            191888658,
            191928315,
            191942325,
            191932732,
            191920192,
            191929765,
            191937199,
            191917827,
            191917733,
            191952488,
            191954182,
            191893606,
            191952450,
            191953930,
            191937779,
            191933720,
            191944464
        ],
        "F": [
            191897354,
            191937727,
            191921203,
            191922917,
            191913192,
            191911808,
            191930384,
            191936558,
            191928717,
            191910030,
            191952082,
            191946442,
            191935770,
            191962030,
            192024472,
            191941593,
            192576519,
            192576463,
            192575894,
            192575798,
            192036363,
            191955548,
            191950300,
            191940578,
            191953610
        ],
        "E": [
            191885323,
            191923099,
            191922588,
            191907909,
            191893339,
            191922711,
            191894210,
            191912372,
            191909000,
            191894812,
            191893693,
            191907186,
            191918338,
            191923434,
            191918943,
            191910133,
            191928876,
            191899722,
            191919676
        ],
        "D": [
            191871418,
            191874838,
            191907562,
            191882805,
            191886550,
            191882717,
            191886746,
            191888932,
            191885472,
            191885182,
            191895924,
            191887101,
            191876371,
            191900684,
            191898470,
            191887590,
            191891777,
            191884491
        ],
        "C": [
            191863568,
            191868815,
            191888044,
            191876716,
            191872443,
            191870687,
            191861973,
            191884084,
            191876016,
            191884999,
            191872708,
            191868481,
            191885394,
            191877725,
            191881646,
            191878136,
            191868081
        ],
        "B": [
            191857536,
            191860028,
            191862778,
            191859727,
            191863844,
            191863773,
            191869782,
            191862839,
            191865613,
            191870245,
            191922097,
            191860380,
            191886295,
            191869480,
            191878024,
            191867772,
            191858170
        ],
        "A": [
            191850371,
            191851499,
            191851786,
            191863602,
            191852219,
            191852453,
            191850271,
            191850785,
            191852180,
            191856918,
            191851785,
            191850906,
            191855840,
            191856980,
            191850674,
            191858794,
            191850528
        ]
    },
    "name": "F. Range Update Point Query",
    "statement": "Given an array a_1, a_2,\r\ndots, a_n, you need to handle a total of q updates and queries of two\r\ntypes: 1 l r for each index i with l\r\nleq i\r\nleq r, update the value of a_i to the sum of the digits of a_i. 2 x\r\noutput a_x.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\nusing namespace std;\n#define int               long long\n#define pb                push_back\n#define ppb               pop_back\n#define all(x)            (x).begin(),(x).end()\n#define uniq(v)           (v).erase(unique(all(v)),(v).end())\n#define sz(x)             (int)((x).size())\n#define f                 first\n#define s                 second\n#define pii               pair<int,int>\n#define rep(i,a,b)        for(int i = a; i < b; i++)\n#define repd(i,a,b)       for(int i = a; i >= b; i--)\n#define mem1(a)           memset(a, -1, sizeof(a))\n#define ppc               __builtin_popcount\n#define ppcll             __builtin_popcountll\n#define ll                long long\n#define ld                long double\n\ntemplate<typename T,typename U>istream& operator>>(istream& in,pair<T,U> &a){in>>a.f>>a.s;return in;}\ntemplate<typename T,typename U>ostream& operator<<(ostream& out,pair<T,U> a){out<<'('<<a.f<<\", \"<<a.s<<')';return out;}\ntemplate<typename T>ostream& operator<<(ostream&cout,vector<T>const&v){cout<<\"[\";rep(i,0,sz(v)){if(i)cout<<\", \";cout<<v[i];}return cout<<\"]\";}\ntemplate<typename T, typename U> static inline void amin(T &x, U y){ if(y<x) x=y; }\ntemplate<typename T, typename U> static inline void amax(T &x, U y){ if(x<y) x=y; }\n\n#ifndef ONLINE_JUDGE\n#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)\ntemplate <typename Arg1>\nvoid __f(const char* name, Arg1&& arg1) {\n      cout << name << \" : \" << arg1 << std::endl;\n}\ntemplate <typename Arg1, typename... Args>\nvoid __f(const char* names, Arg1&& arg1, Args&&... args) {\n      const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << \" : \" << arg1 << \" | \"; __f(comma + 1, args...);\n}\n#else\n#define dbg(...)\n#endif\n\nconst ld pi = 3.14159265358979323846;\nconst char nl = '\\n';\nconst long long INF=1e18;\nconst int32_t M=1e9+7;\nconst int32_t MM=998244353;\n\nconst int N=1e6+5;      \nll n, m, q, k, l, r, x, y, z, a[N], b[N], c[N];\nstring s,t;\n\nconst int32_t maxn = N;\ntemplate <typename Node, typename Update>\nstruct segtree {\n      bool built = false, lazy[4 * maxn];\n      Node t[4 * maxn], zero = Node();\n      Update upds[4 * maxn], noop = Update();\n      int32_t tl[4 * maxn], tr[4 * maxn];\n      inline void push(int32_t v) {\n            if(!lazy[v]) return;\n            apply(2*v, upds[v]);\n            apply(2*v + 1, upds[v]);\n            lazy[v] = 0;\n            upds[v] = noop;\n      }\n      inline void apply(int32_t v, Update& upd) {\n            upd.apply(t[v], tl[v], tr[v]);\n            if(tl[v] != tr[v]) {\n                  lazy[v] = 1;\n                  upds[v].combine(upd, tl[v], tr[v]);\n            }\n      }\n      template <typename T> \n      void build(T& a, int32_t v, int32_t l, int32_t r) {\n            tl[v] = l;\n            tr[v] = r;\n            if(l == r){\n                  t[v] = a[l];\n                  return;\n            }\n            int32_t m = (l + r) / 2;\n            build(a, 2*v, l, m);\n            build(a, 2*v + 1, m+1, r);\n            t[v].merge(t[2*v], t[2*v + 1]);\n      }\n      Node query(int32_t v, int l, int r) {\n            if(tr[v] < l || tl[v] > r) return zero;\n            if(l <= tl[v] && tr[v] <= r) return t[v];\n            push(v);\n            Node a = query(2*v, l, r), b = query(2*v + 1, l, r), ans;\n            ans.merge(a, b);\n            return ans;\n      }\n      void rupd(int32_t v, int l, int r, Update& upd){\n            if(tr[v] < l || tl[v] > r) return;\n            if(l <= tl[v] && tr[v] <= r) {\n                  apply(v, upd);\n                  return;\n            }\n            push(v);\n            rupd(2*v, l, r, upd);\n            rupd(2*v + 1, l, r, upd);\n            t[v].merge(t[2*v], t[2*v + 1]);\n      }\n      \n      int len = maxn;\n      void clear() {\n            fill(t, t + 4*len, zero);\n            fill(upds, upds + 4*len, noop);\n            fill(lazy, lazy + 4*len, false);\n            built = false;\n      }\n      template <typename T>\n      void build(T& a) {\n            build(a, 1, 0, len-1);\n            built = true;\n      }\n      Node query(int l, int r) { \n            if(!built) build(t);\n            return query(1, l, r); \n      }\n      void rupd(int l, int r, Update upd) { \n            if(!built) build(t); \n            rupd(1, l, r, upd); \n      }\n};\n \nstruct node{\n      int v = 0;\n      node() {}\n      node(int val){\n            v = val;\n      }\n      void merge(node& l, node& r) {\n            v = l.v + r.v;\n      }\n};\nstruct update{\n      int v = 0;\n      update() {}\n      update(int val){\n            v = val;\n      }\n      void combine(update& o, int tl, int tr){\n            v += o.v;\n      }\n      void apply(node& x, int tl, int tr){\n            x.v += v * (tr - tl + 1);\n      }\n};\nsegtree<node, update> st;\n\nvoid KSBR(){\n      cin >> n >> q;\n      rep(i,0,n) cin >> a[i];\n      st.len = n + 5;\n      st.clear();\n      while(q--){\n            int t; cin >> t;\n            if(t == 1) {\n                  int l, r;\n                  cin >> l >> r; --l, --r;\n                  st.rupd(l, r, 1);\n            } else {\n                  int x;\n                  cin >> x;\n                  --x;\n                  int val = a[x], steps = st.query(x,x).v;\n                  while(steps--) {\n                        int sum = 0;\n                        for(char c : to_string(val)) sum += c - '0';\n                        val = sum;\n                        if(val <= 9) break;\n                  }\n                  cout << val << nl;\n            }\n      }\n} \nsigned main(){\n      ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n      #ifdef SIEVE\n            sieve();\n      #endif\n      #ifdef NCR\n            init();\n      #endif\n      int t=1, tc = 1;\n      cin>>t;\n      while(t--) {\n            //cout << \"Case \" << \"#\" << tc++ << \": \";\n            KSBR();\n      }\n}     "
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "data structures"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\F. Range Update Point Query.json",
    "editorial_link": "https://codeforces.com//blog/entry/112282",
    "editorial": "Let denote the sum of the digits of . The key observation is the\r\nfollowing: after the operation is applied to index thrice, it won\u00e2\u0080\u0099t\r\nchange after any further operations. The proof is provided at the bottom\r\nof the editorial.So we only need to update if it\u00e2\u0080\u0099s been updated at most\r\ntimes so far; otherwise, we can ignore it. This allows us to do the\r\nfollowing solution: store the current \"active\" indices (that is, indices\r\nthat have been updated times) in a sorted list (for example, in C++).\r\nThen: search for the smallest active index at least (since the list is\r\nsorted, we can do it in ). Afterwards, update that index (replace with\r\n), remove it if it\u00e2\u0080\u0099s no longer active, and binary search for the next\r\nlargest active index in the sorted list, until we pass . just output .\r\nAlthough it looks like we take time for each update, we actually only\r\never update each element of the array at most times, so we will do no\r\nmore than binary searches.Therefore the time complexity is amortized .\r\nTo show this, note that initially . The maximum possible value of the\r\nsum of the digits of is , achieved when . So .Now considering the\r\nnumbers from to , the one with maximum sum of digits is , with . Hence .\r\nFinally, considering the numbers from to , the one with maximum sum of\r\ndigits is , so . That is, after three operations, becomes a single\r\ndigit. Any further operations, and it won\u00e2\u0080\u0099t change any more.\r\n"
}