{
    "link": "https://codeforces.com//contest/1999/problem/F",
    "problemId": "2800024",
    "problem_idx": "F",
    "shortId": "1999F",
    "contest_number": "1999",
    "problem_submissions": {
        "G1": [
            274763546,
            274786025,
            274806389,
            274840194,
            274853481,
            274834731,
            274853398,
            274844144,
            274812432,
            274836138,
            274820618,
            274843459,
            274849762,
            274858308,
            274835246,
            274831909,
            274831235,
            274872122,
            274861661,
            274796200,
            274846512
        ],
        "G2": [
            274763246,
            274827897,
            274840676,
            274840339,
            274840889,
            274839833,
            274846067,
            274860687,
            274899747,
            274886725,
            274859772,
            274849972,
            274878481,
            274865843,
            274900308,
            274864325,
            274876622,
            274882909,
            274905026,
            274877976
        ],
        "A": [
            274756621,
            274711498,
            274718208,
            274731277,
            274715124,
            274718517,
            274712966,
            274717324,
            274747240,
            274726763,
            274712143,
            274713636,
            274713905,
            274715689,
            274727839,
            274713028,
            274713489,
            274718476,
            274727012,
            274712494
        ],
        "F": [
            274752769,
            274772748,
            274807808,
            274808540,
            274814792,
            274766600,
            274807913,
            274772354,
            291543797,
            274802791,
            274779921,
            274819097,
            274813900,
            274849820,
            274822552,
            274815589,
            274815616,
            274830598,
            274831805,
            274838941,
            274833354
        ],
        "E": [
            274743113,
            274804694,
            274769334,
            274772223,
            274798556,
            274767430,
            274824575,
            274771838,
            274781424,
            274762831,
            274830423,
            274800434,
            274791853,
            274809267,
            274790720,
            274797751,
            274800095,
            274803759,
            274812604,
            274802441
        ],
        "D": [
            274743008,
            274749250,
            274756261,
            274761914,
            274762217,
            274742445,
            274758072,
            274738445,
            274750316,
            274751795,
            274764980,
            274764398,
            274762112,
            274764098,
            274764317,
            274767030,
            274769275,
            274784555,
            274757786,
            274779987
        ],
        "C": [
            274733934,
            274739602,
            274747230,
            274752038,
            274733588,
            274731999,
            274745624,
            274762591,
            274746480,
            274740104,
            274745735,
            274752511,
            274745579,
            274774916,
            274752830,
            274777913,
            274757696,
            274760442,
            274746053,
            274765650
        ],
        "B": [
            274729919,
            274733598,
            274739149,
            274742867,
            274742348,
            274829536,
            274736580,
            274834606,
            274748527,
            274828913,
            274733682,
            274738419,
            274736193,
            274772911,
            274771754,
            274803093,
            274738451,
            274741527,
            274770711,
            274769032
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132383",
    "editorial": "Say the array has x\n ones and y\n zeroes.\n\nIf the median of a subsequence of length k\n is 1\n, then there are at least ?k2?+1\n ones in the array.\n\nLet's iterate over the number of ones in the subsequence from ?k2?+1\n to x\n. Suppose there are i\n ones. Then there are k?i\n zeroes. The number of ways to choose i\n ones from x\n is (xi)\n, that is, x\n choose i\n (this is the so-called binomial coefficient). Similarly, the number of ways to choose k?i\n zeroes from y\n of them is (yk?i)\n.\n\nTherefore the answer is the sum of (xi)(yk?i)\n over all i\n from ?k2?+1\n to x\n. You can compute binomial coefficients in many ways, for example precomputing all factorials and then using the formula (nk)=n!(n?k)!k!\n. Depending on your implementation, it can take O(nlogMOD)\n or O(n+logMOD)\n time.\n\nIf you don't know how to do that, we recommend you read the article.",
    "name": "F. Expected Median",
    "statement": "Arul has a array^{\r\ntext{ }} a of length n.He will take all subsequences^{\r\ntext{ }} of length k (k is odd) of this array and find their median.^{\r\ntext{ }}What is the sum of all these values?As this sum can be very\r\nlarge, output it modulo 10^9 + 7. In other words, print the remainder of\r\nthis sum when divided by 10^9 + 7.^{\r\ntext{ }}A binary array is an array consisting only of zeros and ones.^{\r\ntext{ }}An array b is a subsequence of an array a if b can be obtained\r\nfrom a by the deletion of several (possibly, zero or all) elements.\r\nSubsequences have to be contiguous.^{\r\ntext{ }}The median of an array of odd length k is the\r\nfrac{k+1}{2}-th element when sorted.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>using namespace std;int T,a[200005];const int mod=1e9+7;int power(int x,int y){\tint ret=1;\tdo{\t\tif(y&1)ret=1ll*ret*x%mod;\t\tx=1ll*x*x%mod;\t}while(y>>=1);\treturn ret;}int fact[200005],inv[200005];int C(int n,int m){\treturn 1ll*fact[n]*inv[m]%mod*inv[n-m]%mod;}int main(){\tfact[0]=1;inv[0]=1;\tfor(int i=1;i<=2e5;i++){\t\tfact[i]=1ll*fact[i-1]*i%mod;\t\tinv[i]=power(fact[i],mod-2);\t}\tcin>>T;\twhile(T--){\t\tint n,k;cin>>n>>k;\t\tfor(int i=1;i<=n;i++)cin>>a[i];\t\tint cnt=0;\t\tfor(int i=1;i<=n;i++)cnt+=a[i];\t\tint ans=0;\t\tfor(int i=k/2+1;i<=k;i++){\t\t\tif(cnt>=i&&(n-cnt)>=k-i){\t\t\t\tans=(ans+1ll*C(cnt,i)*C(n-cnt,k-i))%mod;\t\t\t}\t\t}\t\tcout<<ans<<endl;\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\F. Expected Median.json"
}