{
    "link": "https://codeforces.com//contest/1676/problem/B",
    "problemId": "1394654",
    "problem_idx": "B",
    "shortId": "1676B",
    "contest_number": "1676",
    "problem_submissions": {
        "H1": [
            156663309,
            156671035,
            156676406,
            156677707,
            156687383,
            156685420,
            156683017,
            156685580,
            156680845,
            156671307,
            156687981,
            156692199,
            156657699,
            156687504,
            156687346,
            156669994,
            156692215,
            156690772,
            156699306,
            156674281
        ],
        "F": [
            156662637,
            156656235,
            156665211,
            156662718,
            156672962,
            156670420,
            156669171,
            156672700,
            156689970,
            156701445,
            156668704,
            156670980,
            156692969,
            156667724,
            156672833,
            156697894,
            156674219,
            156675205,
            156671046,
            156695991
        ],
        "H2": [
            156662559,
            156672919,
            156681840,
            156677592,
            156687173,
            156685234,
            156690935,
            156688441,
            156684282,
            156671711,
            156695356,
            156692679,
            156656052,
            156687092,
            156691243,
            156679289,
            156697513,
            156691027,
            156699563,
            156671734
        ],
        "G": [
            156653552,
            156661675,
            156671235,
            156675609,
            156680563,
            156678234,
            156674526,
            156681628,
            156674365,
            156683892,
            156676420,
            156679729,
            156701067,
            156674224,
            156680025,
            156686261,
            156680343,
            156680683,
            156677057,
            156684128
        ],
        "D": [
            156645060,
            156650467,
            156648808,
            156663990,
            156656243,
            156654084,
            156654738,
            156653252,
            156652931,
            156720716,
            156654408,
            156652941,
            156637656,
            156666271,
            156684420,
            156652544,
            156655842,
            156653648,
            156661131,
            156659068,
            156666840
        ],
        "E": [
            156637739,
            156656814,
            156654288,
            156651298,
            156645000,
            156661246,
            156659306,
            156663832,
            156658669,
            156662700,
            156660368,
            156647103,
            156671327,
            156659242,
            156657789,
            156660550,
            156665251,
            156665346,
            156657650,
            156676846
        ],
        "C": [
            156635303,
            156637333,
            156640687,
            156644760,
            156634239,
            156639390,
            156648512,
            156642440,
            156638160,
            156643703,
            156638666,
            156653980,
            156643726,
            156635835,
            156643174,
            156650355,
            156639499,
            156649527,
            156641083,
            156646143
        ],
        "B": [
            156625015,
            156622909,
            156630747,
            156623442,
            156623221,
            156628681,
            156623121,
            156628287,
            156626048,
            156630150,
            156624457,
            156631684,
            156634804,
            156625307,
            156634457,
            156622363,
            156628178,
            156624635,
            156624141,
            156627356
        ],
        "A": [
            156619295,
            156618687,
            156622372,
            156618765,
            156618606,
            156621261,
            156618635,
            156621495,
            156621071,
            156622861,
            156618818,
            156619301,
            156623952,
            156618523,
            156619829,
            156618483,
            156619228,
            156619089,
            156618766,
            156619486
        ]
    },
    "name": "B. Equal Candies",
    "statement": "There are n boxes with different quantities of candies in each of them.\r\nThe i-th box has a_i candies inside.You also have n friends that you\r\nwant to give the candies to, so you decided to give each friend a box of\r\ncandies. But, you don\u2019t want any friends to get upset so you decided to\r\neat some (possibly none) candies from each box so that all boxes have\r\nthe same quantity of candies in them. Note that you may eat a different\r\nnumber of candies from different boxes and you cannot add candies to any\r\nof the boxes.What\u2019s the minimum total number of candies you have to eat\r\nto satisfy the requirements?\r\n",
    "solutions": [
        "#include <iostream>\n\nusing namespace std;\n\nconst int N = 100;\n\nlong long a[N];\n\nint main()\n{\n\tint t;\n\tint n;\n\tint i;\n\tlong long mn;\n\tlong long ans;\n\t\n\tcin >> t;\n\twhile(t --)\n\t{\n\t\tcin >> n;\n\t\tfor(i = 1; i <= n; i ++)\n\t\t\tcin >> a[i];\n\t\t\n\t\tfor(i = 1, mn = 1e7; i <= n; i ++)\n\t\t\tmn = min(mn, a[i]);\n\t\tfor(i = 1, ans = 0; i <= n; i ++)\n\t\t\tans += a[i] - mn;\n\t\t\n\t\tcout << ans << endl;\n\t}\n\t\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\B. Equal Candies.json",
    "editorial_link": "https://codeforces.com//blog/entry/102710",
    "editorial": "Because we can only eat candies from boxes. The only way to make all\r\nboxes have the same quantity of candies in them would be to make all\r\ncandies contain a number of candies equal to the minimum quantity of\r\ncandies a box initially has. So, we should find this minimum number,\r\nlet\u00e2\u0080\u0099s denote it as , and then for each box, there should be eaten\r\ncandies. So the answer would be the sum of over all -s ().\r\n"
}