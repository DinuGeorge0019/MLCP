{
    "link": "https://codeforces.com//contest/1915/problem/C",
    "problemId": "2402114",
    "problem_idx": "C",
    "shortId": "1915C",
    "contest_number": "1915",
    "problem_submissions": {
        "G": [
            239324603,
            239298351,
            239291102,
            239327463,
            239315080,
            239298429,
            239331435,
            239358831,
            239338223,
            239314225,
            239331510,
            239346542,
            239337633,
            239370168,
            239369180,
            239346160,
            239559103,
            239363546,
            239366749,
            239350512,
            239369322
        ],
        "F": [
            239261781,
            239274034,
            239280013,
            239277963,
            239293339,
            239315714,
            239301552,
            239299242,
            239313346,
            239255585,
            239307013,
            239309817,
            239320406,
            239305928,
            239311152,
            239289443,
            239306361,
            239321545,
            239304709
        ],
        "E": [
            239252852,
            239258994,
            239296056,
            239261417,
            239262022,
            239235807,
            239267335,
            239276554,
            239285923,
            239294542,
            239293476,
            239282605,
            239281481,
            239274431,
            239270230,
            239292535,
            239277557,
            239285105,
            239263650
        ],
        "D": [
            239241155,
            239247992,
            239248670,
            239253126,
            239253995,
            239265657,
            239256680,
            239258090,
            239261104,
            239300303,
            239269518,
            239270520,
            239276544,
            239257868,
            239261471,
            239248761,
            239266865,
            239256141,
            239279955
        ],
        "C": [
            239228990,
            239226480,
            239224069,
            239236359,
            239238727,
            239222422,
            239239617,
            239236963,
            239233571,
            239295826,
            239252410,
            239245816,
            239244426,
            239235233,
            239238862,
            239256492,
            239238732,
            239259700,
            239238830
        ],
        "B": [
            239224409,
            239251414,
            239218293,
            239226511,
            239233979,
            239239693,
            239258634,
            239229667,
            239227054,
            239241984,
            239243810,
            239239053,
            239236365,
            239228576,
            239232683,
            239242403,
            239227250,
            239227149,
            239231560
        ],
        "A": [
            239213502,
            239213532,
            239213467,
            239216520,
            239220630,
            239778066,
            239214629,
            239216014,
            239213684,
            239216469,
            239222519,
            239229063,
            239219211,
            239218084,
            239214816,
            239220861,
            239217466,
            239213553,
            239214366,
            239215372
        ]
    },
    "name": "C. Can I Square ",
    "statement": "Calin has n buckets, the i-th of which contains a_i wooden squares of\r\nside length 1.Can Calin build a square using the given squares?\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\nusing namespace std;       \n\n// #pragma comment(linker, \"/stack:200000000\")\n// #pragma GCC optimize(\"Ofast\")\n// #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\n\nusing ll = long long;\nusing ld = long double;\n#define pb push_back\n#define ff first\n#define ss second\n#define sz(x) (ll)(x).size()\n#define all(x) (x).begin(), (x).end()\n#define rall(x) (x).rbegin(), (x).rend()\n\nvoid freopen(string s) { freopen((s+\".in\").c_str(), \"r\", stdin); freopen((s+\".out\").c_str(), \"w\", stdout); }\nvoid IOIGold2024_InshAllah() { ios_base::sync_with_stdio(false); cin.tie(NULL); }\nll binmul(ll a, ll b, ll c) { ll res = 0; while(b) { if(b&1) (res += a) %= c; (a += a) %= c; b >>= 1; } return res; }\nll binpow(ll a, ll b, ll c) { ll res = 1; while(b) { if(b&1) (res *= a) %= c; (a *= a) %= c; b >>= 1; } return res; }\ntemplate<typename T> T gcd(T a, T b) { if(b==0) return a; return gcd(b, a%b); }\ntemplate<typename T> T lcm(T a, T b) { return a/gcd(a, b)*b; }\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nld rnd() { return rng()%INT_MAX*1.0/INT_MAX; }\n\nconst ll inf = 1e18+7, MX = LLONG_MAX, MN = LLONG_MIN;\nconst ll mod = 1e9+7, N = 3e5+5;\n\nvoid kigash() {\n    ll n, sum = 0;\n    cin>>n;\n    for(ll i=1; i<=n; i++) {\n        ll x;\n        cin>>x;\n        sum += x;\n    }\n    if(ll(sqrt(sum))*ll(sqrt(sum))==sum) cout<<\"YES\\n\";\n    else cout<<\"NO\\n\";\n    return;\n}\n\nsigned main(/*Kigash Amir*/) {\n    // freopen(\"\");\n    IOIGold2024_InshAllah();\n    ll tt = 1;\n    cin>>tt;\n    for(ll i=1; i<=tt; i++) {\n        kigash();\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\C. Can I Square .json",
    "editorial_link": "https://codeforces.com//blog/entry/123952",
    "editorial": "You should add up all the values to get the sum . Then we just need to\r\ncheck if is a perfect square. There are many ways, for example you can\r\nuse inbuilt function or binary search. Be careful with precision errors,\r\nsince function might return a floating-point type.\r\n"
}