{
    "link": "https://codeforces.com//contest/1807/problem/E",
    "problemId": "1838165",
    "problem_idx": "E",
    "shortId": "1807E",
    "contest_number": "1807",
    "problem_submissions": {
        "F": [
            198180616,
            198186190,
            198173908,
            198171005,
            198219904,
            198227866,
            198217508,
            198214833,
            198204632,
            198200151,
            198214050,
            198189193,
            198185762,
            198231970,
            198235896,
            198228554,
            198239515,
            198209832,
            198220721
        ],
        "E": [
            198163239,
            198186188,
            198149936,
            198201671,
            198171057,
            198193404,
            198177128,
            198162416,
            198182729,
            198179440,
            198203385,
            198195116,
            198366866,
            198157434,
            198167075,
            198178694,
            198189166,
            198158428,
            198165846,
            198162136,
            198158251
        ],
        "G2": [
            198145015,
            198137148,
            198195227,
            198182421,
            198178727,
            198158742,
            198185869,
            198169755,
            198175371,
            198176448,
            198178249,
            198206149,
            198207584,
            198189902,
            198168732,
            198178571,
            198181264,
            198198169,
            198185162
        ],
        "B": [
            198143870,
            198138728,
            198120221,
            198130226,
            198126207,
            198130685,
            198126856,
            198135177,
            198139105,
            198122438,
            198125411,
            198126062,
            198128046,
            198121277,
            198121825,
            198130142,
            198124129,
            198132199,
            198137528
        ],
        "C": [
            198133948,
            198146211,
            198132638,
            198137869,
            198139227,
            198143163,
            198136231,
            198148066,
            198130077,
            198135106,
            198133973,
            198134982,
            198136576,
            198131022,
            198135217,
            198139552,
            198137513,
            198141347,
            198131804
        ],
        "G1": [
            198133059,
            198150338,
            198182849,
            198183462,
            198175914,
            198147239,
            198178480,
            198168437,
            198173855,
            198176599,
            198168261,
            198206516,
            198197738,
            198173520,
            198161260,
            198169179,
            198182940,
            198185108,
            198185266
        ],
        "A": [
            198122998,
            198125805,
            198110843,
            198112403,
            198113641,
            198115780,
            198114548,
            198114635,
            198110722,
            198110785,
            198111172,
            198116447,
            198110883,
            198111058,
            198110866,
            198116237,
            198114064,
            198122835,
            198110735
        ],
        "D": [
            198122742,
            198156287,
            198129356,
            198145081,
            198138349,
            198158337,
            198148123,
            198154214,
            198156828,
            198147860,
            198147020,
            198142203,
            198146687,
            198137100,
            198147269,
            198146571,
            198144778,
            198146944,
            198142568
        ]
    },
    "name": "E. Interview",
    "statement": "Before the last stage of the exam, the director conducted an interview.\r\nHe gave Gon n piles of stones, the i-th pile having a_i stones.Each\r\nstone is identical and weighs 1 grams, except for one special stone that\r\nis part of an unknown pile and weighs 2 grams. Gon can only ask the\r\ndirector questions of one kind: he can choose k piles, and the director\r\nwill tell him the total weight of the piles chosen. More formally, Gon\r\ncan choose an integer k (1\r\nleq k\r\nleq n) and k unique piles p_1, p_2,\r\ndots, p_k (1\r\nleq p_i\r\nleq n), and the director will return the total weight m_{p_1} + m_{p_2}\r\n+\r\ndots + m_{p_k}, where m_i denotes the weight of pile i. Gon is tasked\r\nwith finding the pile that contains the special stone. However, the\r\ndirector is busy. Help Gon find this pile in at most\r\nmathbf{30} queries.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define int long long\n#define ll long long\n#define ld double\n#define all(a) a.begin(), a.end()\n#define rall(a) a.rbegin(), a.rend()\n#define line cout << '\\n'\n\n#define sz(v) ((int)(v).size())\nconst double pi = 3.1415926535897932384626433832795;\n\nconst long long mod = 998244353;\nconst long long inf = 9099999999999999999;\nconst long long nmax = 4e5 + 100;\nconst long double eps = 1e-9;\n\nrandom_device rd;\nmt19937 rnd(rd());\n//rnd(chrono::high_resolution_clock::now().time_since_epoch().count());\n//int MAGIC = rnd();\n\nint ask(vector <int> arr) {\n  cout << \"? \";\n  cout << sz(arr) << ' ';\n  for (auto x : arr)\n    cout << x << ' ';\n  cout << endl;\n  int x;\n  cin >> x;\n  cout << endl;\n  return x;\n}\n\nvoid runtimeerror() {\n  int n;\n  cin >> n;\n  vector <int> arr(n);\n  for (int i = 0; i < n; i++)\n    cin >> arr[i];\n  vector <int> pref(n + 1);\n  for (int i = 0; i < n; i++)\n    pref[i + 1] = pref[i] + arr[i];\n\n  int l = 0, r = n;\n  while (r - l > 1) {\n    int mid = (r + l) / 2;\n    vector <int> p;\n    for (int i = 1; i <= mid; i++)\n      p.emplace_back(i);\n    int res = ask(p);\n    if (res != pref[mid]) r = mid;\n    else l = mid;\n  }\n  cout << \"! \" << r << endl;\n}\n\nsigned main() {\n//  ios_base::sync_with_stdio(false);\n//  cin.tie(nullptr);\n//  cout.tie(nullptr);\n\n  //  freopen(\"input.txt\", \"r\", stdin);\n  //  freopen(\"output.txt\", \"w\", stdout);\n\n  ll t = 1;\n    cin >> t;\n  while (t--)\n    runtimeerror();\n\n  //  cout << \"WINNER\";\n  // i'm stupid man\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation",
        "interactive"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\E. Interview.json",
    "editorial_link": "https://codeforces.com//blog/entry/114143",
    "editorial": "Consider this question: if we take some range of piles, how do we know\r\nif it contains the special pile? If it doesnât contain the special pile,\r\nthen the total weight should be grams, since each stone weighs one gram.\r\nIf it does contain the special pile, then the total weight should be\r\ngrams, since each stone weighs one gram except for the special stone,\r\nwhich weighs two grams. So we can determine if a range contains the\r\nspecial pile using a single query.Now we can binary search for the\r\nanswer: first check the range . If it has the special pile, then split\r\nit into two parts and check if one of them has the special stone;\r\notherwise, check the other half. This will take at most queries, which\r\nis well below the limit of .The time complexity is (for reading the\r\ninput).\r\n",
    "hint": []
}