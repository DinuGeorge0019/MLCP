{
    "link": "https://codeforces.com//contest/2065/problem/D",
    "problemId": "3192583",
    "problem_idx": "D",
    "shortId": "2065D",
    "contest_number": "2065",
    "problem_submissions": {
        "E": [
            305312354,
            305194637,
            305291861,
            305309920,
            305191466,
            305278591,
            305269404,
            305338868,
            305236207,
            305244718,
            305249851,
            305252901,
            305349934,
            305269590,
            305273100,
            305259568
        ],
        "H": [
            305281397,
            305277196,
            305224889,
            305409482,
            305298450
        ],
        "G": [
            305270269,
            305243226,
            305283571,
            305303347,
            305246836,
            305290460,
            305288465,
            305291691,
            305285379,
            305320630,
            305316576,
            305330919,
            305297977
        ],
        "F": [
            305207005,
            305224958,
            305268816,
            305205600,
            305222883,
            305216507,
            305222057,
            305260089,
            305263894,
            305280050,
            305293362,
            305295319,
            305317233
        ],
        "C2": [
            305180569,
            305175163,
            305195198,
            305161534,
            305164762,
            305196151,
            305168272,
            305203417,
            305207903,
            305224173,
            305208149,
            305192948,
            305194564,
            305189082
        ],
        "D": [
            305170929,
            305192657,
            305245769,
            305169854,
            305167651,
            305189554,
            305177158,
            305214051,
            305194947,
            305233657,
            305228720,
            305230467,
            305236708,
            305231361
        ],
        "C1": [
            305166664,
            305175397,
            305194143,
            305170322,
            305170303,
            305159411,
            305196219,
            305205049,
            305201974,
            305189516,
            305173737,
            305175472,
            305190744
        ],
        "B": [
            305156321,
            305139860,
            305165371,
            305145780,
            305145036,
            305176896,
            305147932,
            305189102,
            305149733,
            305181688,
            305181612,
            305177814,
            305157221,
            305200290
        ],
        "A": [
            305141292,
            305137241,
            305159681,
            305138394,
            305141442,
            305138107,
            305171143,
            305138752,
            305155403,
            305142146,
            305137327,
            305142353,
            305157006
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/139178",
    "editorial": "Problem Credits: cry Analysis: macaquedev SolutionIt is clear that the\r\nscore of an array of length can be expressed as .Let’s solve this\r\nproblem with for arrays with element in each. Due to the above fact,\r\nit’s clear that the optimal way to arrange this array is to sort the\r\nelements from largest to smallest.Now, we come to the issue of combining\r\narrays. Suppose you have two arrays and , both of length m. Is there a\r\nnice way of expressing the score of and the score of (where represents\r\nconcatenation) in terms of and ?Turns out there is. The score of is\r\nequal to . This is because of the following: Now, we can clearly replace\r\nall the terms with as follows: Now, we can take out a factor of as\r\nfollows: Therefore, whichever of and has the larger sum should go first,\r\nbecause then you get a larger overall score. This argument also extends\r\nbeyond two arrays, so the solution is as follows:Sort the arrays\r\nthemselves in terms of their sum, from largest sum to smallest Put\r\ntogether the final array Take the score This score is guaranteed to be\r\nmaximal.\r\n",
    "name": "D. Skibidus and Sigma",
    "statement": "Let’s denote the score of an array b with k elements as\r\nsum_{i=1}^{k}\r\nleft(\r\nsum_{j=1}^ib_j\r\nright). In other words, let S_i denote the sum of the first i elements\r\nof b. Then, the score can be denoted as S_1+S_2+\r\nldots+S_k.Skibidus is given n arrays a_1,a_2,\r\nldots,a_n, each of which contains m elements. Being the sigma that he\r\nis, he would like to concatenate them in to form a single array\r\ncontaining n\r\ncdot m elements. Please find the maximum possible score Skibidus can\r\nachieve with his concatenated array! Formally, among all possible\r\npermutations^{\r\ntext{ }} p of length n, output the maximum score of a_{p_1} + a_{p_2} +\r\ndots + a_{p_n}, where + represents concatenation^{\r\ntext{ }}.^{\r\ntext{ }}A permutation of length n contains all integers from 1 to n\r\nexactly once.^{\r\ntext{ }}The concatenation of two arrays c and d with lengths e and f\r\nrespectively (i.e. c + d) is c_1, c_2,\r\nldots, c_e, d_1, d_2,\r\nldots d_f.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV4\\D. Skibidus and Sigma.json",
    "hint": []
}