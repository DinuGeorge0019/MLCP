{
    "link": "https://codeforces.com//contest/976/problem/D",
    "problemId": "179788",
    "problem_idx": "D",
    "shortId": "976D",
    "contest_number": "976",
    "problem_submissions": {
        "F": [
            37763363,
            37769230,
            37771809,
            37769578,
            37765676,
            37771852,
            37775489,
            40889146,
            37778041,
            37772108,
            37770120,
            37757030
        ],
        "E": [
            37759612,
            37757569,
            37763598,
            37765549,
            37756497,
            37767476,
            37763904,
            37761921,
            37762005,
            37760373,
            37795909,
            37761211,
            37765405,
            72387001,
            37763422,
            37761979,
            37766932,
            37762131,
            37774529,
            37769526
        ],
        "D": [
            37757523,
            37766476,
            37758195,
            37762921,
            38269676,
            37760546,
            37768835,
            37769171,
            37773037,
            37769443,
            37775265,
            37789135,
            37775829,
            37773943,
            37772078,
            37768377,
            37772102
        ],
        "C": [
            37753334,
            37753217,
            37761367,
            37754559,
            37753952,
            37755372,
            37756629,
            37754330,
            37754742,
            37756131,
            37753666,
            37754884,
            37754248,
            37754586,
            37754439,
            37755438,
            37764985,
            37761302,
            37758356
        ],
        "B": [
            37752460,
            37751754,
            37759385,
            37753338,
            37752699,
            37754118,
            37754359,
            37753149,
            37755340,
            37754515,
            37752717,
            37753548,
            37753298,
            37756555,
            37753663,
            37754307,
            37766708,
            37755815,
            37756102
        ],
        "A": [
            37750664,
            37750612,
            37751755,
            37750646,
            37750641,
            37751080,
            37750713,
            37750665,
            37750980,
            37750618,
            37750952,
            37750900,
            37751444,
            37752036,
            37752198,
            37763975,
            37751822,
            37753480
        ]
    },
    "name": "D. Degree Set",
    "statement": "You are given a sequence of positive integers (). Your task is to\r\nconstruct an undirected graph such that: there are exactly vertices;\r\nthere are no self-loops; there are no multiple edges; there are no more\r\nthan edges; its is equal to . Vertices should be numbered through . is\r\nan array with length equal to the number of vertices in a graph such\r\nthat is the number of vertices adjacent to -th vertex. is a sorted in\r\nincreasing order sequence of all distinct values from the .It is\r\nguaranteed that there exists such a graph that all the conditions hold,\r\nand it contains no more than edges.Print the resulting graph.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:336777216\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n\ntypedef tuple<int, int, int> t3;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\n\nint IT_MAX = 1 << 17;\nconst ll MOD = 998244353;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 0x3f3f3f3f3f3f3f3f;\nconst db PI = acos(-1);\nconst db ERR = 1e-10;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<n;i++)\n#define Se second\n#define Fi first\n\nint in[305];\n\nbool chk[1050][1050];\nint main() {\n\tint N, i, j, k;\n\tscanf(\"%d\", &N);\n\tfor (i = 1; i <= N; i++) scanf(\"%d\", &in[i]);\n\n\tint X = in[N] + 1;\n\n\tint st = 1, en = in[N] + 1;\n\tint sti = 1, eni = N;\n\twhile (1) {\n\t\tif (sti == eni) {\n\t\t\tfor (i = st; i <= en; i++) for (j = i + 1; j <= en; j++) chk[i][j] = true;\n\t\t\tbreak;\n\t\t}\n\t\tif (sti + 1 == eni) {\n\t\t\tfor (i = st; i < st + in[sti]; i++) for (j = st; j <= en; j++) chk[i][j] = true;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tfor (i = sti + 1; i <= eni - 1; i++) in[i] -= in[sti];\n\n\t\tfor (i = st; i < st + in[sti]; i++) for (j = st; j <= en; j++) chk[i][j] = true;\n\t\tst = st + in[sti];\n\t\ten = st + in[eni - 1];\n\t\tsti++, eni--;\n\t}\n\t\n\tvector <pii> Va;\n\tfor (i = 1; i <= X; i++) for (j = i + 1; j <= X; j++) if (chk[i][j] || chk[j][i]) Va.emplace_back(i, j);\n\n\tprintf(\"%d\\n\", (int)Va.size());\n\tfor (auto it : Va) printf(\"%d %d\\n\", it.first, it.second);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "graphs",
        "implementation"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Degree Set.json",
    "editorial_link": "https://codeforces.com//blog/entry/59195",
    "editorial": "We prove that the answer always always exists by constructing it. Graph\r\nfor is a single vertex; Graph for is a clique of vertices; Graph for\r\nsome is obtained from the graph by adding vertices initially connected\r\nto nothing and vertices connected to all previously mentioned ones. The\r\nvertices connected to nothing got degrees , the vertices from the\r\nprevious step increased their degrees by and finally there appeared\r\nvertices of degree . The number is vertices is as needed.\r\n"
}