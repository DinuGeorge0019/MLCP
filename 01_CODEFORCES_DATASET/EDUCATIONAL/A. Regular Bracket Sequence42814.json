{
    "link": "https://codeforces.com//contest/1132/problem/A",
    "problemId": "307695",
    "problem_idx": "A",
    "shortId": "1132A",
    "contest_number": "1132",
    "problem_submissions": {
        "E": [
            50850068,
            50849530,
            50845767,
            50845285,
            50999251,
            50998220,
            50984714,
            50983025,
            50849124,
            50834937,
            50849964,
            50853384,
            50853400,
            50852279,
            50851280,
            50853752,
            50855850,
            50853199,
            51446514,
            50851785,
            50834992,
            50854163,
            50845937
        ],
        "G": [
            50842167,
            50854823,
            50857129,
            50854920,
            50844161,
            50859138,
            57119782,
            50878894,
            51002265,
            50995547,
            50857246,
            50834458,
            50982974,
            50871478
        ],
        "F": [
            50840202,
            50838419,
            50836444,
            50982824,
            50982298,
            50914403,
            50914340,
            50845586,
            50832740,
            50838344,
            50839910,
            50835170,
            50841485,
            50845495,
            50850234,
            50846859,
            50849525,
            50847269,
            50833261,
            50843613,
            50842907,
            50837062,
            50843690,
            50848869
        ],
        "D": [
            50834165,
            50842583,
            50852105,
            50872042,
            50872030,
            50859910,
            50859897,
            50858488,
            50851238,
            50841187,
            50848482,
            50846027,
            50850423,
            50849233,
            50840756,
            50846142,
            50842178,
            50842159,
            50851492,
            50842299,
            50850678,
            50854836,
            50842129,
            50854102
        ],
        "C": [
            50827032,
            50833764,
            50832215,
            50839270,
            50881672,
            50828449,
            50836070,
            50832571,
            50831895,
            50835165,
            50830486,
            50829266,
            50832724,
            50834393,
            50838461,
            50842825,
            50830636,
            50837272,
            50843085,
            50842733,
            50838178
        ],
        "B": [
            50825116,
            50826216,
            50828719,
            50855444,
            50825477,
            50825790,
            50828172,
            50826213,
            50832189,
            50825110,
            50828347,
            50828834,
            50837439,
            50825450,
            50826572,
            50843916,
            50826867,
            50835237
        ],
        "A": [
            50824651,
            50824679,
            50826667,
            50855859,
            50824764,
            50824716,
            50825124,
            50824755,
            50829449,
            50824659,
            50826098,
            50836545,
            50824668,
            50824888,
            50845090,
            50825359,
            50834758
        ]
    },
    "name": "A. Regular Bracket Sequence",
    "statement": "A string is called if it does not contain any characters other than \"\"\r\nand \"\". A bracket sequence is called if it it is possible to obtain\r\ncorrect arithmetic expression by inserting characters \"\" and \"\" into\r\nthis sequence. For example, \"\", \"\" and \"\" are regular bracket sequences;\r\n\"\" and \"\" are bracket sequences (but not regular ones), and \"\" and \"\"\r\nare not bracket sequences at all.You have a number of strings; each\r\nstring is a bracket sequence of length 2. So, overall you have cnt_1\r\nstrings \"\", cnt_2 strings \"\", cnt_3 strings \"\" and cnt_4 strings \"\". You\r\nwant to write all these strings in some order, one after another; after\r\nthat, you will get a long bracket sequence of length 2(cnt_1 + cnt_2 +\r\ncnt_3 + cnt_4). You wonder: is it possible to choose some order of the\r\nstrings you have such that you will get a regular bracket sequence? .\r\n",
    "solutions": [
        "#ifndef BZ\n#pragma GCC optimize \"-O3\"\n#endif\n#include <bits/stdc++.h>\n\n#define FASTIO\n#define ALL(v) (v).begin(), (v).end()\n#define rep(i, l, r) for (int i = (l); i < (r); ++i)\n\n#ifdef FASTIO\n#define scanf abacaba\n#define printf abacaba\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\nusing namespace std;\n\ntemplate<typename T> T mo(T x, T y) { x %= y; return x <= 0 ? x + y : x; }\n\nint main() {\n#ifdef FASTIO\n    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n#endif\n    int a, b, c, d;\n    cin >> a >> b >> c >> d;\n    ll bal = 2ll * a;\n    if (c > 0 && bal == 0) {\n        cout << 0 << \"\\n\";\n        return 0;\n    }\n    if (a != d) {\n        cout << 0 << \"\\n\";\n        return 0;\n    }\n    cout << 1 << \"\\n\";\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Regular Bracket Sequence42814.json",
    "editorial_link": "https://codeforces.com/blog/entry/65752",
    "editorial": "For bracket sequence to be regular, it should have equal number of\r\nopening and closing brackets. So, if , then it\u00e2\u0080\u0099s impossible to construct\r\nany regular bracket sequence. is completely irrelevant to us, since\r\ninserting or removing a substring doesn\u00e2\u0080\u0099t change the status of the\r\nstring we get. Almost the same applies to , but we should have at least\r\none substring before it. So, if , but , there is no solution.In all\r\nother cases it is possible to order all strings as follows: all strings\r\n, then all strings , then all strings , then all strings .\r\n"
}