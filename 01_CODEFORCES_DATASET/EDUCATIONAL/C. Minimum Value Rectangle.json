{
    "link": "https://codeforces.com//contest/1027/problem/C",
    "problemId": "209490",
    "problem_idx": "C",
    "shortId": "1027C",
    "contest_number": "1027",
    "problem_submissions": {
        "G": [
            41777591,
            41794075,
            41789651,
            41795096,
            41939341,
            41938165,
            41796137,
            42098879,
            42133042
        ],
        "E": [
            41771294,
            41773308,
            41779379,
            41769311,
            41773946,
            41775704,
            41772136,
            41773355,
            41779847,
            41781989,
            41784347,
            41777571,
            41784573,
            41777063,
            41778773,
            41776995,
            41786639,
            41778631,
            41778849,
            41779109
        ],
        "F": [
            41768065,
            41785375,
            41776031,
            41777064,
            64515193,
            41778051,
            41781324,
            41779089,
            41778653,
            41776480,
            41776867,
            41774399,
            41778108,
            41783735,
            41779480,
            41782813,
            41784214,
            42675272,
            42673408,
            41785662,
            41778618,
            41786449,
            41792717,
            41792403,
            41790072,
            41787559,
            41785600
        ],
        "D": [
            41766114,
            41769377,
            41772019,
            41765799,
            41768093,
            41767980,
            41769938,
            41769777,
            41767951,
            41766660,
            41768756,
            41770224,
            41770243,
            41773173,
            41773790,
            41772403,
            41773900,
            41774900,
            41773430,
            41773585
        ],
        "C": [
            41765079,
            41766031,
            41768208,
            41764342,
            41765993,
            41765549,
            41767982,
            41768445,
            41764158,
            41772730,
            41766169,
            41767810,
            41767876,
            41767390,
            41770932,
            41768551,
            41769543,
            41768596,
            41768222,
            41768699,
            41769864,
            41769626
        ],
        "B": [
            41762630,
            41763189,
            41765301,
            41762037,
            41763563,
            41762756,
            41764132,
            41765033,
            41765562,
            41762467,
            41763527,
            41764762,
            41763245,
            41763720,
            41763112,
            41766236,
            41764943,
            41765112,
            41765051,
            41766842
        ],
        "A": [
            41761297,
            41761064,
            41763316,
            41761011,
            41761231,
            41761105,
            41761008,
            41761632,
            41761600,
            41761296,
            41761079,
            41761346,
            41761160,
            41761251,
            41761159,
            41761563,
            41761142,
            41761529,
            41761274,
            41764617
        ]
    },
    "name": "C. Minimum Value Rectangle",
    "statement": "You have n sticks of the given lengths.Your task is to choose exactly\r\nfour of them in such a way that they can form a rectangle. No sticks can\r\nbe cut to pieces, each side of the rectangle must be formed by a single\r\nstick. No stick can be chosen multiple times. It is guaranteed that it\r\nis always possible to choose such sticks.Let S be the area of the\r\nrectangle and P be the perimeter of the rectangle. The chosen rectangle\r\nshould have the value\r\nfrac{P^2}{S} minimal possible. The value is taken without any\r\nrounding.If there are multiple answers, print any of them.Each testcase\r\ncontains several lists of sticks, for each of them you are required to\r\nsolve the problem separately.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define mp make_pair\n\nconst int N = (int)1e6 + 7;\nint n;\nll a[N];\n\nvoid solve() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%lld\", &a[i]);\n\tsort(a, a + n);\n\tll bp = (ll)1e9, bq = 1;\n\tll bx = -1, by = -1;\n\tll lst = -1;\n\tint L = 0;\n\twhile(L < n) {\n\t\tint R = L + 1;\n\t\twhile(R < n && a[L] == a[R]) R++;\n\t\tif (R - L >= 4) {\n\t\t\tprintf(\"%lld %lld %lld %lld\\n\", a[L], a[L], a[L], a[L]);\n\t\t\treturn;\n\t\t}\n\t\tif (R - L >= 2) {\n\t\t\tll x = a[L];\n\t\t\tif (lst != -1) {\n\t\t\t\tll p = (x + lst) * (x + lst);\n\t\t\t\tll q = x * lst;\n\t\t\t\t//eprintf(\"! %lld %lld %lld %lld\\n\", lst, x, p, q);\n\t\t\t\tif (p * bq < q * bp) {\n\t\t\t\t\tbp = p;\n\t\t\t\t\tbq = q;\n\t\t\t\t\tbx = lst;\n\t\t\t\t\tby = x;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlst = x;\n\t\t}\n\t\tL = R;\n\t}\n\tprintf(\"%lld %lld %lld %lld\\n\", bx, bx, by, by);\n}\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) solve();\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Minimum Value Rectangle.json",
    "editorial_link": "https://codeforces.com//blog/entry/61311",
    "editorial": "Let\u00e2\u0080\u0099s work with the formula a bit: Let , then the formula becomes .\r\nConsidering , , thus is strictly increasing and has its minimum at .So\r\nthe solution will be to sort the list, extract the pairs of sticks of\r\nequal length and check only neighbouring pairs in sorted order for the\r\nanswer.Overall complexity: .\r\n"
}