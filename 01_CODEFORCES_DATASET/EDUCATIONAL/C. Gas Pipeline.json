{
    "link": "https://codeforces.com//contest/1207/problem/C",
    "problemId": "393973",
    "problem_idx": "C",
    "shortId": "1207C",
    "contest_number": "1207",
    "problem_submissions": {
        "G": [
            59304889,
            59306176,
            59301627,
            59302407,
            59304210,
            59305372,
            59299826,
            59307985,
            59309136,
            59355235,
            59305105,
            59306118,
            59301046,
            59312490,
            59309174,
            59287118,
            59310203,
            59295342,
            59301224,
            59539702,
            59539581,
            59351316
        ],
        "F": [
            59294259,
            59294479,
            59293703,
            59293849,
            59293275,
            59295696,
            59294933,
            59295843,
            59294771,
            59355160,
            59296347,
            59298285,
            59281377,
            59296537,
            59297200,
            59291269,
            59286364,
            59296630,
            59287709,
            59292729,
            59290075
        ],
        "E": [
            59292194,
            59292083,
            59291434,
            59290312,
            59295934,
            59293256,
            59291138,
            59291830,
            59292503,
            59355130,
            59293757,
            59294706,
            59287064,
            59293320,
            59294341,
            59301962,
            59302885,
            59297608,
            59313261,
            59287955,
            59288580
        ],
        "D": [
            59288834,
            59287831,
            59288996,
            59287685,
            59289737,
            59290739,
            59290294,
            59288360,
            59289950,
            59355097,
            59292036,
            59291781,
            72384113,
            59294418,
            59290806,
            59291351,
            59299257,
            59291468,
            59299192,
            59306695,
            59285530,
            59286504
        ],
        "C": [
            59285396,
            59284651,
            59285140,
            59282971,
            59284725,
            59287600,
            59288738,
            59284263,
            59285344,
            59354996,
            59286662,
            59287414,
            59304338,
            59287720,
            59292924,
            59296911,
            59299362,
            59300644,
            59304203,
            59281217,
            59283117
        ],
        "B": [
            59279519,
            59278225,
            59278842,
            59278682,
            59280115,
            59279180,
            59278245,
            59278492,
            59278908,
            59354975,
            59279326,
            59282036,
            59291564,
            59283101,
            59282410,
            59293321,
            59292638,
            59301723,
            59308496,
            59277604,
            59278398
        ],
        "A": [
            59275875,
            59276003,
            59275839,
            59276009,
            59276337,
            59276873,
            59279814,
            59276133,
            59276212,
            59354913,
            59276348,
            59277224,
            59276516,
            59275776,
            59279300,
            59292197,
            59276302,
            59302397,
            59275866,
            59275778,
            59276055
        ]
    },
    "name": "C. Gas Pipeline",
    "statement": "You are responsible for installing a gas pipeline along a road. Let’s\r\nconsider the road (for simplicity) as a segment [0, n] on OX axis. The\r\nroad can have several crossroads, but for simplicity, we’ll denote each\r\ncrossroad as an interval (x, x + 1) with integer x. So we can represent\r\nthe road as a binary string consisting of n characters, where character\r\nmeans that current interval doesn’t contain a crossroad, and means that\r\nthere is a crossroad.Usually, we can install the pipeline along the road\r\non height of 1 unit with supporting pillars in each integer point (so,\r\nif we are responsible for [0, n] road, we must install n + 1 pillars).\r\nBut on crossroads we should lift the pipeline up to the height 2, so the\r\npipeline won’t obstruct the way for cars.We can do so inserting several\r\nzig-zag-like lines. Each zig-zag can be represented as a segment [x, x +\r\n1] with integer x consisting of three parts: 0.5 units of horizontal\r\npipe + 1 unit of vertical pipe + 0.5 of horizontal. Note that if\r\npipeline is currently on height 2, the pillars that support it should\r\nalso have length equal to 2 units. Each unit of gas pipeline costs us a\r\nbourles, and each unit of pillar b bourles. So, it’s not always optimal\r\nto make the whole pipeline on the height 2. Find the shape of the\r\npipeline with minimum possible cost and calculate that cost.Note that\r\nyou start and finish the pipeline on height 1 and, also, it’s guaranteed\r\nthat the first and last characters of the input string are equal to .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nchar s[200010];\ntypedef long long ll;\nint a, b, n;\nll dp[200010][2];\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while(t--) {\n        scanf(\"%d%d%d\", &n, &a, &b);\n        scanf(\"%s\", s);\n        dp[0][0] = b, dp[0][1] = 1e15;\n        for(int i = 0; i < n; i++) {\n            if(s[i] == '0') {\n                dp[i + 1][0] = min(dp[i][0] + a, dp[i][1] + a + a) + b;\n                dp[i + 1][1] = min(dp[i][1] + a, dp[i][0] + a + a) + b + b;\n            }\n            else {\n                dp[i + 1][0] = 1e15;\n                dp[i + 1][1] = dp[i][1] + b + b + a;\n            }\n        }\n        printf(\"%I64d\\n\", dp[n][0]);\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Gas Pipeline.json",
    "editorial_link": "https://codeforces.com//blog/entry/69314",
    "editorial": "This task was designed as a simple dynamic programming problem, but it\r\nalso can be solved greedily.The dp solution is following: when we have\r\nalready built some prefix of the pipeline all we need to know is the\r\nlength of the prefix the height of the pipelineâs endpoint ( or ). So we\r\ncan calculate the following dynamic programming: is the minimal answer\r\nfor prefix of length with pipeline at height . Transitions are quite\r\nstraightforward: if then we can either leave the pipeline on the same\r\nlevel, or change it. If then we have to stay on the height . Look at the\r\nsource code for the formal transitions. The answer is .The greedy\r\nsolution is based on the following fact: letâs look at some subsegment\r\nconsisting of âs. Itâs always optimal either to leave this subsegment on\r\nheight or raise it to height . We can calculate the amount we have to\r\npay in both cases and choose the optimal one.\r\n",
    "hint": []
}