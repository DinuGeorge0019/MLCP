{
    "link": "https://codeforces.com//contest/903/problem/G",
    "problemId": "138456",
    "problem_idx": "G",
    "shortId": "903G",
    "contest_number": "903",
    "problem_submissions": {
        "G": [
            33178321,
            33187453,
            33186301,
            33186897,
            33180699,
            33191173
        ],
        "F": [
            33174261,
            33178825,
            33181844,
            33178084,
            33183961,
            33180065,
            33185073,
            33176301,
            33183378,
            33188720,
            33182673,
            33185566,
            33181772,
            33181057,
            33184431,
            33176177
        ],
        "E": [
            33168457,
            33170258,
            33172872,
            33170814,
            33175293,
            33172943,
            33175009,
            33187458,
            33176493,
            33221819,
            33172057,
            33172327,
            33172721,
            33177599,
            33184047,
            33178079,
            33180655
        ],
        "C": [
            33161165,
            33161825,
            33162567,
            33163273,
            33167452,
            33160898,
            33163474,
            33159957,
            33161910,
            33167835,
            33159945,
            33162031,
            33164207,
            33164018,
            33160657,
            33163832,
            33161875
        ],
        "B": [
            33160080,
            33161172,
            33161528,
            33163824,
            33170257,
            33160007,
            33162660,
            33167319,
            33163497,
            33166907,
            33161299,
            33160216,
            33164455,
            33161461,
            33166773,
            33162803,
            33162955
        ],
        "A": [
            33158587,
            33158617,
            33158738,
            33158766,
            33160497,
            33158658,
            33158711,
            33158644,
            33158620,
            33165123,
            33158631,
            33158588,
            33159095,
            33158687,
            33158727,
            33158733
        ],
        "D": [
            33192267,
            78961090,
            33166706,
            33185032,
            33189320,
            33188936,
            33184706,
            33183639,
            33190417
        ]
    },
    "name": "G. Yet Another Maxflow Problem",
    "statement": "In this problem you will have to deal with a very special network.The\r\nnetwork consists of two parts: part and part . Each part consists of\r\nvertices; -th vertex of part is denoted as , and -th vertex of part is\r\ndenoted as .For each index () there is a directed edge from vertex to\r\nvertex , and from to , respectively. Capacities of these edges are given\r\nin the input. Also there might be several directed edges going from part\r\nto part (but never from to ).You have to calculate the maximum flow\r\nvalue from to in this network. Capacities of edges connecting to might\r\nsometimes change, and you also have to maintain the maximum flow value\r\nafter these changes. Apart from that, the network is fixed (there are no\r\nchanges in part , no changes of edges going from to , and no edge\r\ninsertions or deletions).Take a look at the example and the notes to\r\nunderstand the structure of the network better.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:336777216\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n\ntypedef tuple<int, int, int> t3;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\n\nint IT_MAX = 1 << 18;\nconst ll MOD = 1000000007;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 0x3f3f3f3f3f3f3f3f;\nconst db PI = acos(-1);\nconst db ERR = 1e-9;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<n;i++)\n#define Se second\n#define Fi first\n\nclass Node {\npublic:\n\tll mn, v;\n\tNode() {\n\t\tmn = v = 0;\n\t}\n};\nNode indt[600000];\nvoid propagate(int n) {\n\tll v = indt[n].v;\n\tindt[2 * n].mn += v;\n\tindt[2 * n].v += v;\n\tindt[2 * n + 1].mn += v;\n\tindt[2 * n + 1].v += v;\n\tindt[n].v = 0;\n}\nvoid update(int st, int en, int S, int E, int n, ll v) {\n\tif (en < S || E < st) return;\n\tif (st <= S && E <= en) {\n\t\tindt[n].v += v;\n\t\tindt[n].mn += v;\n\t\treturn;\n\t}\n\tpropagate(n);\n\n\tint M = (S + E) / 2;\n\tupdate(st, en, S, M, 2 * n, v);\n\tupdate(st, en, M + 1, E, 2 * n + 1, v);\n\tindt[n].mn = min(indt[2 * n].mn, indt[2 * n + 1].mn);\n}\nll getmn(int st, int en, int S, int E, int n) {\n\tif (en < S || E < st) return LL_INF;\n\tif (st <= S && E <= en) return indt[n].mn;\n\tpropagate(n);\n\n\tint M = (S + E) / 2;\n\treturn min(getmn(st, en, S, M, 2 * n), getmn(st, en, M + 1, E, 2 * n + 1));\n}\n\nll X[200050];\nll Y[200050];\nvector <pll> Ve[200050];\n\nll ans[200050];\nmultiset <ll> Sa;\nint main() {\n\tint N, M, Q, i, j;\n\tscanf(\"%d %d %d\", &N, &M, &Q);\n\tfor (i = 1; i < N; i++) scanf(\"%lld %lld\", &X[i], &Y[i]);\n\n\tfor (i = 1; i < N; i++) update(i, i, 0, IT_MAX - 1, 1, Y[i]);\n\twhile (M--) {\n\t\tint t1, t2, t3;\n\t\tscanf(\"%d %d %d\", &t1, &t2, &t3);\n\t\tVe[t1].emplace_back(t3, t2);\n\t}\n\n\tfor (i = 1; i <= N; i++) {\n\t\tfor (auto it : Ve[i]) update(0, it.second - 1, 0, IT_MAX - 1, 1, it.first);\n\t\tans[i] = getmn(0, N - 1, 0, IT_MAX - 1, 1);\n\t}\n\tfor (i = 1; i <= N; i++) {\n\t\tans[i] += X[i];\n\t\tSa.insert(ans[i]);\n\t}\n\tprintf(\"%lld\\n\", *(Sa.begin()));\n\twhile (Q--) {\n\t\tint t1, t2;\n\t\tscanf(\"%d %d\", &t1, &t2);\n\t\tSa.erase(Sa.lower_bound(ans[t1]));\n\t\tans[t1] -= X[t1];\n\t\tX[t1] = t2;\n\t\tans[t1] += X[t1];\n\t\tSa.insert(ans[t1]);\n\t\tprintf(\"%lld\\n\", *(Sa.begin()));\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "flows",
        "graphs"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\G. Yet Another Maxflow Problem.json",
    "editorial_link": "https://codeforces.com//blog/entry/56330",
    "editorial": "First of all, let\u00e2\u0080\u0099s calculate minimum cut instead of maximum flow.The\r\nvalue of the cut is minimum if we choose (the first set of the cut) as\r\nfirst vertices of part and first vertices of part (, ). That\u00e2\u0080\u0099s because\r\nif is the minimum index such that , then we don\u00e2\u0080\u0099t have to add any\r\nvertices such that to , because that would only increase the value of\r\nthe cut. Similarly, if is the maximum index such that , then it\u00e2\u0080\u0099s\r\noptimal to add every vertex such that to .Okay, so we can try finding\r\nminimum cut as a function value of the cut if we choose as the union of\r\nfirst vertices in and first vertices in .To find its minimum, let\u00e2\u0080\u0099s\r\nrewrite it as , where is the sum of capacities of edges added to the cut\r\nin part (it doesn\u00e2\u0080\u0099t depend on part ), is the sum of capacities added to\r\nthe cut from part , and is the sum of capacities added to the cut by\r\nedges going from to .These functions can be denoted this way: if ;\r\notherwise is the capacity of the edge going from to ; if ; otherwise is\r\nthe capacity of the edge going from to ; is the sum of capacities over\r\nall edges such that and . Since only the values of are not fixed, we can\r\nsolve this problem with the following algorithm: For each (), find the\r\nminimum possible sum of . Let\u00e2\u0080\u0099s denote this as , and let\u00e2\u0080\u0099s denote ;\r\nBuild a segment tree that allows to get minimum value and modify a\r\nsingle value over the values of . When we need to change capacity of an\r\nedge, we add the difference between new and old capacities to ; and to\r\ncalculate the maximum flow, we query minimum over the whole tree. But\r\nhow can we calculate the values of ? We can do it using another segment\r\ntree that allows to query minimum on segment and add some value to the\r\nsegment. First of all, let\u00e2\u0080\u0099s set and build this segment tree over values\r\nof . The value of is fixed for given , so it is not modified; the value\r\nof is initially since when , there are no vertices belonging to in the\r\npart .And then we calculate the values of one by one. When we increase ,\r\nwe need to process all edges leading from to part . When we process an\r\nedge leading to vertex with capacity , we have to add to every value of\r\nsuch that (since if , then ), and this can be performed by addition on\r\nsegment in the segment tree. After processing each edge leading from to\r\npart , we can query as the minimum value in the segment tree.Time\r\ncomplexity of this solution is .\r\n"
}