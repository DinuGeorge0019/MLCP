{
    "link": "https://codeforces.com//contest/2069/problem/A",
    "problemId": "3213446",
    "problem_idx": "A",
    "shortId": "2069A",
    "contest_number": "2069",
    "problem_submissions": {
        "E": [
            306720227,
            306703455,
            306762040,
            306709414,
            306720479,
            306710204,
            306717271,
            306714232,
            306713491,
            306717023,
            306719634,
            306716305,
            306717171,
            306715546,
            306713534,
            307552024,
            306752930,
            306724477,
            306721728,
            306718615,
            306718992,
            306726971,
            306725677
        ],
        "F": [
            306709347,
            306728258,
            306727520,
            306728135,
            306741225,
            306726966,
            306744015,
            306732116,
            306739032,
            306855146,
            306737313,
            306730256,
            306733511,
            306743505,
            306725225,
            306745953,
            306762587,
            306739080,
            306745663,
            306744259,
            306729975,
            306736187,
            306742000
        ],
        "D": [
            306694099,
            306695545,
            306695100,
            306694667,
            306690359,
            306701386,
            306701212,
            306696826,
            306697964,
            306697288,
            306699133,
            306704039,
            306702795,
            306701942,
            306702458,
            306700726,
            306707761,
            306704425,
            306708530,
            306707972
        ],
        "C": [
            306685465,
            306686684,
            306687348,
            306684235,
            306683606,
            306688263,
            306688039,
            306687329,
            306856369,
            306685918,
            306688691,
            306688112,
            306685819,
            306691359,
            306688654,
            306686865,
            306692320,
            306691352,
            306695398,
            306686441,
            306689890
        ],
        "B": [
            306681829,
            306682850,
            306682972,
            306680572,
            306680880,
            306682298,
            306683281,
            306682689,
            306856172,
            306681142,
            306684519,
            306683738,
            306681106,
            306703816,
            306682841,
            306682588,
            306685491,
            306683927,
            306691965,
            306683224,
            306685776
        ],
        "A": [
            306678234,
            306678240,
            306678194,
            306678094,
            306678179,
            306678115,
            306678333,
            306678481,
            306855634,
            306678273,
            306679166,
            306678389,
            306678130,
            306680446,
            306678338,
            306678258,
            306678871,
            306678235,
            306687347,
            306679141,
            306678310
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/139774",
    "editorial": "Let’s try to find some contradiction of the following kind for the given\r\narray: we know for sure that some element must be equal to its\r\nneighbors, but the corresponding value is zero, or vice versa.If both\r\nand are equal to , it means that the -th element is equal to both of its\r\nneighbors, then must also be equal to . That is, if there exists such an\r\nindex that and , we have a contradiction.It is not difficult to prove\r\nthat if such an index does not exist, then it is always possible to find\r\nan array that satisfies all conditions. Let’s construct it as follows: ;\r\nfor each subsequent element , if at least one of is equal to , we must\r\nchoose , otherwise we set . This way, we can be sure that if is equal to\r\n, then . Therefore, the only problem may arise if some is equal to , but\r\nat the same time . However, if and , then . Similarly, . Thus, we have\r\nconstructed the case where and , which is the only case which can lead\r\nto a contradiction.Therefore, the solution reduces to checking whether\r\nthere exists such an index that and .\r\n",
    "name": "A. Was there an Array ",
    "statement": "For an array of integers a_1, a_2,\r\ndots, a_n, we define its as the array b_2, b_3,\r\ndots, b_{n-1}, where b_i = 1 if the i-th element of the array a is equal\r\nto both of its neighbors, and b_i = 0 if the i-th element of the array a\r\nis not equal to at least one of its neighbors.For example, for the array\r\n[1, 2, 2, 2, 3, 3, 4, 4, 4, 4], the equality characteristic will be [0,\r\n1, 0, 0, 0, 0, 1, 1].You are given the array b_2, b_3,\r\ndots, b_{n-1}. Your task is to determine whether there exists such an\r\narray a for which the given array is the equality characteristic.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "graph matchings",
        "greedy"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Was there an Array .json",
    "hint": []
}