{
    "link": "https://codeforces.com//contest/1279/problem/A",
    "problemId": "504273",
    "problem_idx": "A",
    "shortId": "1279A",
    "contest_number": "1279",
    "problem_submissions": {
        "E": [
            67737947,
            67733364,
            67730576,
            67739828,
            67742536,
            67737172,
            67724903,
            67736976,
            67729524,
            67727105,
            67747837,
            67731683,
            67732984,
            67748535,
            67744932
        ],
        "F": [
            67737545,
            67718265,
            67764598,
            67761358,
            67761175,
            67737082,
            67725475,
            67770261,
            67748335,
            67724855,
            67743206,
            67734760,
            67745652,
            67744739,
            67715547,
            67721155,
            67752838,
            67725507,
            67753025,
            67734101,
            67763755,
            67725445,
            67752215,
            67728799,
            67734922,
            67753488
        ],
        "D": [
            67712365,
            67710004,
            67715225,
            67711743,
            67720035,
            67741233,
            67733656,
            67738820,
            67706683,
            67710710,
            67712344,
            67716189,
            67712742,
            67717775,
            67716646,
            67717595,
            67717233,
            67714949,
            67709766
        ],
        "C": [
            67708271,
            67707793,
            67712401,
            67706993,
            67715784,
            67738909,
            67733706,
            67739694,
            67710632,
            67708442,
            67708816,
            67712768,
            67706695,
            67710203,
            67712897,
            67713466,
            67711730,
            67709788,
            67706084
        ],
        "B": [
            67703572,
            67702979,
            67708187,
            67704555,
            67708809,
            67737826,
            67733752,
            67740661,
            67706039,
            67703968,
            67706335,
            67709187,
            67703627,
            67705748,
            67708508,
            67710463,
            67705061,
            67706427,
            67703535
        ],
        "A": [
            67701146,
            67701133,
            67701117,
            67701163,
            67704539,
            67735636,
            67733784,
            67741171,
            67702120,
            67701143,
            67701243,
            67701332,
            67701184,
            67701399,
            67702929,
            67702323,
            67701558,
            67701229,
            67701070
        ]
    },
    "name": "A. New Year Garland",
    "statement": "Polycarp is sad New Year is coming in few days but there is still no\r\nsnow in his city. To bring himself New Year mood, he decided to decorate\r\nhis house with some garlands.The local store introduced a new service\r\nthis year, called \"Build your own garland\". So you can buy some red,\r\ngreen and blue lamps, provide them and the store workers will solder a\r\nsingle garland of them. The resulting garland will have all the lamps\r\nyou provided put in a line. Moreover, no pair of lamps of the same color\r\nwill be adjacent to each other in this garland!For example, if you\r\nprovide 3 red, 3 green and 3 blue lamps, the resulting garland can look\r\nlike this: \"\" (\"\" being the red, green and blue color, respectively).\r\nNote that it’s ok to have lamps of the same color on the ends of the\r\ngarland.However, if you provide, say, 1 red, 10 green and 2 blue lamps\r\nthen the store workers won’t be able to build any garland of them. Any\r\ngarland consisting of these lamps will have at least one pair of lamps\r\nof the same color adjacent to each other. Note that the store workers\r\nshould use all the lamps you provided.So Polycarp has bought some sets\r\nof lamps and now he wants to know if the store workers can build a\r\ngarland from each of them.\r\n",
    "solutions": [
        "#include <cmath>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <list>\n#include <time.h>\n#include <math.h>\n#include <random>\n#include <deque>\n#include <queue>\n#include <cassert>\n#include <unordered_map>\n#include <unordered_set>\n#include <iomanip>\n#include <bitset>\n#include <sstream>\n#include <chrono>\n#include <cstring>\n\nusing namespace std;\n\ntypedef long long ll;\n\n#ifdef iq\n  mt19937 rnd(228);\n#else\n  mt19937 rnd(chrono::high_resolution_clock::now().time_since_epoch().count());\n#endif\n\nint main() {\n#ifdef iq\n  freopen(\"a.in\", \"r\", stdin);\n#endif\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  auto solve = [&] () {\n    ll a, b, c;\n    cin >> a >> b >> c;\n    if (max(max(a, b), c) > (a + b + c + 1) / 2) {\n      cout << \"No\\n\";\n    } else {\n      cout << \"Yes\\n\";\n    }\n  };\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. New Year Garland.json",
    "editorial_link": "https://codeforces.com//blog/entry/72577",
    "editorial": "Let (if it is not the case, do some swaps). If , then at least two blue\r\nlamps will be adjacent so there is no solution.Otherwise the answer can\r\nbe easily constucted. Place all blue lamps in a row. Then place red\r\nlamps: one between the first and the second blue lamp, one between the\r\nsecond and the third, and so on. Then place all green lamps: one between\r\nthe -th blue lamp and the -th, one between the blue lamps with numbers\r\nand , and so on. Since , there is at least one non-blue lamp between\r\neach pair of blue lamps. If , we didnât place all green lamps, we can\r\nplace the remaining one before all other lamps (the same with ).So, if\r\nwe swap , and in such a way that , we only have to check that .\r\n",
    "hint": []
}