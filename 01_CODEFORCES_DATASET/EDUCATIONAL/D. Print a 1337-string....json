{
    "link": "https://codeforces.com//contest/1202/problem/D",
    "problemId": "385665",
    "problem_idx": "D",
    "shortId": "1202D",
    "contest_number": "1202",
    "problem_submissions": {
        "F": [
            58450924,
            58449423,
            58454352,
            58459803,
            58448615,
            58683759,
            58544660,
            58632018,
            58460608,
            58677253,
            59095272
        ],
        "E": [
            58446577,
            59548224,
            58440455,
            58449286,
            58475576,
            58455191,
            58455332,
            58449043,
            58451450,
            58448860,
            58450378,
            58451427,
            58451624,
            58451536,
            58451835,
            58443909,
            58451432,
            58452032,
            58454174,
            58451009,
            58452592,
            58451940
        ],
        "D": [
            58444092,
            58442549,
            58443962,
            58475546,
            58444450,
            58440999,
            58440440,
            58443368,
            58445508,
            58445716,
            58445057,
            58441174,
            58445333,
            58445907,
            58446487,
            58445052,
            58442732,
            58442650,
            58444867,
            58447384,
            58446089
        ],
        "C": [
            58441598,
            58452310,
            58442367,
            58475556,
            58442473,
            58439618,
            58446484,
            58442135,
            58443668,
            58443427,
            58442755,
            58446380,
            58443036,
            58443982,
            58455139,
            58441929,
            58447606,
            58446719,
            58443811,
            58445636,
            58448227
        ],
        "B": [
            58439444,
            58444513,
            58438813,
            58475511,
            58439503,
            58438262,
            58439422,
            58439559,
            58440663,
            58440425,
            58439072,
            58440288,
            58439823,
            58440365,
            58439836,
            58438293,
            58440655,
            58440555,
            58440058,
            58442143,
            58438995
        ],
        "A": [
            58438253,
            58437660,
            58437723,
            58475481,
            58437816,
            58437640,
            58437730,
            58437581,
            58437903,
            58437729,
            58437803,
            58437783,
            58437814,
            58438010,
            58438207,
            58437638,
            58439242,
            58437860,
            58437712,
            58437966,
            58440352
        ]
    },
    "name": "D. Print a 1337-string...",
    "statement": "You are given an integer n. You have to find a sequence s consisting of\r\ndigits\r\n{1, 3, 7\r\n} such that it has exactly n subsequences equal to 1337.For example,\r\nsequence 337133377 has 6 subsequences equal to 1337: 337\r\nunderline{1}3\r\nunderline{3}\r\nunderline{3}7\r\nunderline{7} (you can remove the second and fifth characters); 337\r\nunderline{1}\r\nunderline{3}3\r\nunderline{3}7\r\nunderline{7} (you can remove the third and fifth characters); 337\r\nunderline{1}\r\nunderline{3}\r\nunderline{3}37\r\nunderline{7} (you can remove the fourth and fifth characters); 337\r\nunderline{1}3\r\nunderline{3}\r\nunderline{3}\r\nunderline{7}7 (you can remove the second and sixth characters); 337\r\nunderline{1}\r\nunderline{3}3\r\nunderline{3}\r\nunderline{7}7 (you can remove the third and sixth characters); 337\r\nunderline{1}\r\nunderline{3}\r\nunderline{3}3\r\nunderline{7}7 (you can remove the fourth and sixth characters). You have\r\nto answer t independent queries.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nusing pii=pair<int,int>;\nvector<int> V;\nint main(){\n\tfor(int i=3;;i++){\n\t\tint x=1LL*i*(i-1)*(i-2)/6;\n\t\tif(x>1000000000)break;\n\t\tV.push_back(x);\n\t}\n\tint sz=V.size();\n\tint T;scanf(\"%d\",&T);\n\twhile(T--){\n\t\tint n;scanf(\"%d\",&n);\n\t\tvector<int> W;\n\t\tint i=sz;\n\t\twhile(n){\n\t\t\twhile(i&&V[i-1]>n)i--;\n\t\t\tn-=V[i-1];\n\t\t\tW.push_back(i+1);\n\t\t}\n\t\tint m=W.size();\n\t\tW.push_back(0);\n\t\tfor(int i=0;i<m;i++){\n\t\t\tprintf(\"1\");\n\t\t\tfor(int j=0;j<W[i]-W[i+1];j++)printf(\"37\");\n\t\t}\n\t\tputs(\"\");\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "constructive algorithms",
        "math",
        "strings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Print a 1337-string....json",
    "editorial_link": "https://codeforces.com/blog/entry/68972",
    "editorial": "Letâs consider the following string . If digit occurs times in it, then\r\nstring have subsequences . Letâs increase the number of digits in this\r\nstring while condition holds ( is the number of digits in this string).\r\nThe length of this string will not exceed because . The value will not\r\nexceed as well.All we have to do is increase the number of subsequences\r\nin the current string by . So if we add digits after the first two\r\ndigits we increase the number of subsequences by . The string will look\r\nlike this: , where sequence consists of exactly digits and sequence\r\nconsists of exactly digits .\r\n",
    "hint": []
}