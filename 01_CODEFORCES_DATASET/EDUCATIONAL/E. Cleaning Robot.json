{"link": "https://codeforces.com//contest/1739/problem/E", "problemId": "1559867", "problem_idx": "E", "shortId": "1739E", "contest_number": "1739", "problem_submissions": {"F": [173982711, 173969607, 173981022, 173986288, 173992146, 173980539, 173991072, 173980378, 173978555, 174245795, 174000933, 173993564, 173995270, 173994662, 173995645, 173994787, 173991035, 173995175, 173975986, 173996342, 173995107, 173986566], "E": [173962909, 173976378, 173969496, 173967080, 173967227, 173969366, 173969799, 173988104, 173970277, 173983172, 173983299, 173978308, 173974083, 173979712, 173983159, 173980060, 173986740, 173979502, 173967920], "D": [173953446, 173954284, 173959501, 173953114, 173950233, 173963545, 173960383, 173950745, 173966040, 173950883, 173962543, 173951795, 173957703, 173966024, 173951939, 173967693, 173958723, 173974529, 173956732], "C": [173946487, 173945498, 173949713, 174075655, 174075624, 173946209, 173940986, 173958498, 173954556, 173955135, 173961377, 173958964, 173957077, 173960274, 173951680, 173958743, 173985617, 173961155, 173949432, 173968872, 173953205], "B": [173936382, 173937044, 173937069, 173935458, 173935314, 173943298, 173937530, 173935389, 173954918, 173937400, 173937767, 173940608, 173940106, 173945520, 173936795, 173941470, 173938759, 173964539, 173936543], "A": [173934470, 173935151, 173934498, 173934222, 173934344, 173939803, 173934700, 173934286, 173952986, 173934928, 173934527, 173936084, 173935340, 173938305, 173937802, 173937555, 173935130, 173963081, 173934367]}, "name": "E. Cleaning Robot", "statement": "Consider a hallway, which can be represented as the matrix with 2 rows\r\nand n columns. Let\u2019s denote the cell on the intersection of the i-th row\r\nand the j-th column as (i, j). The distance between the cells (i_1, j_1)\r\nand (i_2, j_2) is |i_1 - i_2| + |j_1 - j_2|.There is a cleaning robot in\r\nthe cell (1, 1). Some cells of the hallway are clean, other cells are\r\ndirty (the cell with the robot is clean). You want to clean the hallway,\r\nso you are going to launch the robot to do this.After the robot is\r\nlaunched, it works as follows. While at least one cell is dirty, the\r\nrobot chooses among those which are dirty, moves there and cleans it (so\r\nthe cell is no longer dirty). After cleaning a cell, the robot again\r\nfinds the closest dirty cell , and so on. This process repeats until the\r\nwhole hallway is clean.However, there is a critical bug in the robot\u2019s\r\nprogram. If at some moment, there are multiple closest (to the robot\u2019s\r\ncurrent position) dirty cells, the robot malfunctions.You want to clean\r\nthe hallway in such a way that the robot doesn\u2019t malfunction. , you can\r\nclean some (possibly zero) of the dirty cells yourself. However, you\r\ndon\u2019t want to do too much dirty work yourself while you have this nice,\r\nsmart (yet buggy) robot to do this. Note that you cannot make a clean\r\ncell dirty.Calculate the maximum possible number of cells you can leave\r\ndirty before launching the robot, so that it doesn\u2019t malfunction.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n#ifdef tabr\n#include \"library/debug.cpp\"\n#else\n#define debug(...)\n#endif\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int n;\n    cin >> n;\n    vector<string> s(2);\n    for (int i = 0; i < 2; i++) {\n        cin >> s[i];\n        s[i] += \"0\";\n    }\n    vector dp(2, vector<int>(2, -10101010));\n    dp[0][0] = 0;\n    dp[0][s[1][0] - '0'] = 0;\n    for (int i = 0; i < n; i++) {\n        vector new_dp(2, vector<int>(2, -10101010));\n        for (int x = 0; x < 2; x++) {\n            new_dp[x][s[x ^ 1][i + 1] - '0'] = max(new_dp[x][s[x ^ 1][i + 1] - '0'], dp[x][0] + (s[x][i + 1] - '0'));\n            new_dp[x][0] = max(new_dp[x][0], dp[x][0] + (s[x][i + 1] - '0'));\n            new_dp[x ^ 1][0] = max(new_dp[x ^ 1][0], dp[x][1] + 1 + (s[x ^ 1][i + 1] - '0'));\n        }\n        swap(dp, new_dp);\n    }\n    int ans = -1;\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            ans = max(ans, dp[i][j]);\n        }\n    }\n    cout << ans << '\\n';\n    return 0;\n}"], "input": "", "output": "", "tags": ["bitmasks", "dp"], "dificulty": "2400", "interactive": false}