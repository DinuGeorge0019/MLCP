{
    "link": "https://codeforces.com//contest/1783/problem/A",
    "problemId": "1728810",
    "problem_idx": "A",
    "shortId": "1783A",
    "contest_number": "1783",
    "problem_submissions": {
        "G": [
            188483896,
            188470188,
            188490778,
            188491718,
            188493113,
            188527457,
            188526933,
            188518837,
            188481313
        ],
        "F": [
            188457991,
            188459741,
            188468922,
            188473664,
            188468205,
            188471208,
            188461540,
            188473366,
            188477664,
            188473046,
            188489629,
            188473873,
            188484171,
            188480546,
            188485471,
            188484623,
            188483301,
            188466307,
            188469985,
            188485060
        ],
        "E": [
            188452364,
            188453897,
            188463917,
            188466624,
            188459377,
            188459968,
            188455446,
            188466225,
            188471180,
            188466814,
            188462880,
            188467584,
            188467423,
            188462700,
            188463311,
            188503353,
            188474118,
            188475092,
            188461623,
            188502886,
            188463602,
            188475668
        ],
        "D": [
            188448529,
            188449082,
            188455318,
            188454045,
            188455437,
            188454808,
            188471673,
            188459878,
            188455664,
            188459984,
            188457996,
            188455008,
            188460084,
            188450967,
            188459128,
            188456144,
            188459103,
            188459237,
            188463185
        ],
        "C": [
            188443311,
            188439911,
            188447553,
            188445874,
            188449689,
            188446252,
            188448135,
            188452418,
            188447924,
            188450344,
            188449627,
            188448578,
            188449959,
            188467122,
            188452277,
            188450824,
            188449810,
            188450396,
            188451763,
            188456895
        ],
        "B": [
            188434637,
            188433902,
            188440591,
            188436845,
            188440180,
            188437731,
            188434593,
            188440675,
            188439917,
            188436694,
            188436264,
            188437707,
            188438645,
            188437659,
            188440538,
            188439980,
            188442461,
            188440519,
            188465336,
            188436451
        ],
        "A": [
            188432373,
            188432255,
            188432618,
            188432523,
            188433063,
            188432771,
            188432273,
            188433871,
            188432631,
            188433273,
            188432881,
            188432854,
            188433005,
            188432822,
            188435678,
            188432922,
            188432552,
            188432977,
            188432291,
            188432577
        ]
    },
    "name": "A. Make it Beautiful",
    "statement": "An array a is called if it contains element which is equal to the . If\r\nthe array is not ugly, it is .For example: the array [6, 3, 9, 6] is\r\nugly: the element 9 is equal to 6 + 3; the array [5, 5, 7] is ugly: the\r\nelement 5 (the second one) is equal to 5; the array [8, 4, 10, 14] is\r\nbeautiful: 8\r\nne 0, 4\r\nne 8, 10\r\nne 8 + 4, 14\r\nne 8 + 4 + 10, so there is no element which is equal to the sum of all\r\nelements before it. You are given an array a such that 1\r\nle a_1\r\nle a_2\r\nle\r\ndots\r\nle a_n\r\nle 100. You have to the elements of a in such a way that the resulting\r\narray is beautiful. Note that you are not allowed to insert new elements\r\nor erase existing ones, you can only change the order of elements of a.\r\nYou are allowed to keep the array a unchanged, if it is beautiful.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n;\n    std::cin >> n;\n    \n    std::vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> a[i];\n    }\n    \n    if (a[0] == a[n - 1]) {\n        std::cout << \"NO\\n\";\n    } else {\n        std::cout << \"YES\\n\";\n        std::reverse(a.begin() + 1, a.end());\n        for (int i = 0; i < n; i++) {\n            std::cout << a[i] << \" \\n\"[i == n - 1];\n        }\n    }\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math",
        "sortings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Make it Beautiful.json",
    "editorial_link": "https://codeforces.com//blog/entry/111194",
    "editorial": "If we put the maximum in the array on the first position, then for every\r\nelement, starting from the third one, the sum of elements before it will\r\nbe greater than it (since that sum is greater than the maximum value in\r\nthe array). So, the only element that can make our array ugly is the\r\nsecond element. We need to make sure that it is not equal to the first\r\nelement.Letâs put the maximum element on the first position, the minimum\r\nelement on the second position, and then fill the rest of the array\r\narbitrarily. The only case when it fails is when the maximum element is\r\nequal to the minimum element and itâs easy to see that if the maximum is\r\nequal to the minimum, then the first element of the array will be equal\r\nto the second element no matter what, and the array cannot become\r\nbeautiful.So, the solution is to check if the maximum is different from\r\nthe minimum, and if it is so, put them on the first two positions, and\r\nthe order of remaining elements does not matter. Note that the given\r\narray is sorted, so the minimum is the first element, the maximum is the\r\nlast element.\r\n",
    "hint": []
}