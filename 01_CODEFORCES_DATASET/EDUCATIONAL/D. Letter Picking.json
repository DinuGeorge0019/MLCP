{"link": "https://codeforces.com//contest/1728/problem/D", "problemId": "1534225", "problem_idx": "D", "shortId": "1728D", "contest_number": "1728", "problem_submissions": {"F": [171415471, 171408709, 171477755, 171477598, 171800837, 171602685, 171508405, 171615612, 171428158, 171416710, 171516704], "G": [171401437, 171423625, 171401320, 171405459, 171408910, 171400855, 171410753, 171399735, 171425286, 171424973, 171424864, 171421363, 171409384, 171429440, 171419291, 171421745, 171401911, 171420331, 171494040, 171406232, 171419649, 171415822, 171442989, 171426124, 171423998, 171422898, 171422786, 171419842], "E": [171378857, 171391875, 171380622, 171383139, 171380478, 171390287, 171381329, 171385138, 171384190, 171396093, 171392841, 171388311, 171403618, 171390049, 171393452, 171494181, 171455206, 171419342, 171391692, 171398313, 171393739, 171428155, 171396053, 171400068], "D": [171364431, 171379034, 171368807, 171365018, 171370163, 171375547, 171369467, 171380229, 171364084, 171374772, 171368217, 171377453, 171410355, 171379812, 171386430, 171377364, 171385449, 171375075, 171380828, 171376969], "C": [171356021, 171355657, 171354790, 171355489, 171357376, 171364423, 171358552, 171371507, 171356927, 171358656, 171358481, 171361890, 171364747, 171361193, 171494234, 171359234, 171364539, 171370274, 171358915, 171369689, 171370585], "B": [171350944, 171350546, 171350225, 171351747, 171353484, 171350234, 171353700, 171367743, 171353076, 171355275, 171352643, 171355734, 171359875, 171351546, 171353658, 171357176, 171361933, 171353420, 171361436, 171361759], "A": [171346435, 171346486, 171346382, 171346456, 171348074, 171346466, 171346859, 171352332, 171346599, 171349231, 171346445, 171346558, 171348949, 171346594, 171346485, 171349162, 171347108, 171346675, 171346628, 171349812]}, "name": "D. Letter Picking", "statement": "Alice and Bob are playing a game. Initially, they are given a non-empty\r\nstring s, consisting of lowercase Latin letters. The length of the\r\nstring is even. Each player also has a string of their own, initially\r\nempty.Alice starts, then they alternate moves. In one move, a player\r\ntakes either the first or the last letter of the string s, removes it\r\nfrom s and (adds to the beginning) it to their own string.The game ends\r\nwhen the string s becomes empty. The winner is the player with a\r\nlexicographically smaller string. If the players\u2019 strings are equal,\r\nthen it\u2019s a draw.A string a is lexicographically smaller than a string b\r\nif there exists such position i that a_j = b_j for all j < i and a_i <\r\nb_i.What is the result of the game if both players play optimally (e. g.\r\nboth players try to win; if they can\u2019t, then try to draw)?\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate<typename T>\nvoid chmin(T& x, const T& y) {\n\tif (x > y) x = y;\n}\ntemplate<typename T>\nvoid chmax(T& x, const T& y) {\n\tif (x < y) x = y;\n}\ntypedef int64_t s64;\ntypedef uint64_t u64;\ntypedef uint32_t u32;\ntypedef pair<int, int> pii;\n#define rep(i, l, r) for (int i = l; i <= r; ++i)\n#define per(i, r, l) for (int i = r; i >= l; --i)\n#define rep0(i, l, r) for (int i = l; i < r; ++i)\n#define gc (c = getchar())\nchar readc() {\n\tchar c;\n\twhile (isspace(gc))\n\t\t;\n\treturn c;\n}\nint read() {\n\tchar c;\n\twhile (gc < '-')\n\t\t;\n\tif (c == '-') {\n\t\tint x = gc - '0';\n\t\twhile (gc >= '0') x = x * 10 + c - '0';\n\t\treturn -x;\n\t}\n\tint x = c - '0';\n\twhile (gc >= '0') x = x * 10 + c - '0';\n\treturn x;\n}\n#undef gc\n\nconst int N = 2005;\n\nchar c[N];\nint dp[N][N];\nint T, n;\n\nint main() {\n#ifdef local\n\tfreopen(\"1.in\", \"r\", stdin);\n#endif\n\tT = read();\n\twhile (T--) {\n\t\tscanf(\"%s\", c + 1);\n\t\tn = strlen(c + 1);\n\t\tfor (int i = 1; i <= n - 1; i++) {\n\t\t\tif (c[i] == c[i + 1])\n\t\t\t\tdp[i][i + 1] = 0;\n\t\t\telse\n\t\t\t\tdp[i][i + 1] = 1;\n\t\t}\n\t\tfor (int len = 4; len <= n; len += 2) {\n\t\t\tfor (int l = 1; l <= n - len + 1; l++) {\n\t\t\t\tint r = l + len - 1;\n\t\t\t\tdp[l][r] = -1;\n\t\t\t\t// choose l\n\t\t\t\tint ret = 1;\n\t\t\t\tif (dp[l + 1][r - 1] != 0)\n\t\t\t\t\tret = min(ret, dp[l + 1][r - 1]);\n\t\t\t\telse if (c[r] < c[l])\n\t\t\t\t\tret = -1;\n\t\t\t\telse if (c[r] == c[l])\n\t\t\t\t\tret = min(ret, 0);\n\t\t\t\tif (dp[l + 2][r] != 0)\n\t\t\t\t\tret = min(ret, dp[l + 2][r]);\n\t\t\t\telse if (c[l + 1] < c[l])\n\t\t\t\t\tret = -1;\n\t\t\t\telse if (c[l + 1] == c[l])\n\t\t\t\t\tret = min(ret, 0);\n\t\t\t\tdp[l][r] = max(dp[l][r], ret);\n\t\t\t\tret = 1;\n\t\t\t\tif (dp[l + 1][r - 1] != 0)\n\t\t\t\t\tret = min(ret, dp[l + 1][r - 1]);\n\t\t\t\telse if (c[l] < c[r])\n\t\t\t\t\tret = -1;\n\t\t\t\telse if (c[l] == c[r])\n\t\t\t\t\tret = min(ret, 0);\n\t\t\t\tif (dp[l][r - 2] != 0)\n\t\t\t\t\tret = min(ret, dp[l][r - 2]);\n\t\t\t\telse if (c[r - 1] < c[r])\n\t\t\t\t\tret = -1;\n\t\t\t\telse if (c[r - 1] == c[r])\n\t\t\t\t\tret = min(ret, 0);\n\t\t\t\tdp[l][r] = max(dp[l][r], ret);\n\t\t\t}\n\t\t}\n\t\tif (dp[1][n] == 1)\n\t\t\tprintf(\"Alice\\n\");\n\t\telse if (dp[1][n] == 0)\n\t\t\tprintf(\"Draw\\n\");\n\t\telse\n\t\t\tprintf(\"Bob\\n\");\n\t}\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "dp", "games", "two pointers"], "dificulty": "1800", "interactive": false}