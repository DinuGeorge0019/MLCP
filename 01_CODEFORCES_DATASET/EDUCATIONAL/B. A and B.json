{
    "link": "https://codeforces.com//contest/1278/problem/B",
    "problemId": "498931",
    "problem_idx": "B",
    "shortId": "1278B",
    "contest_number": "1278",
    "problem_submissions": {
        "E": [
            67224918,
            67231614,
            67223912,
            67253812,
            67225741,
            67224871,
            67225251,
            67224253,
            67224097,
            67228073,
            67224351,
            67238384,
            67238891,
            67235763,
            67230622,
            67227930,
            67239651,
            67240882,
            67235370,
            67231237,
            67232624
        ],
        "F": [
            67220843,
            67234059,
            67225490,
            67229828,
            67232198,
            67228232,
            67234554,
            67236753,
            67235814,
            67235952,
            67222634,
            67222261,
            67233844,
            67234877,
            67233597,
            67235880,
            168626483,
            67236179,
            67239000,
            67242413,
            67234942
        ],
        "D": [
            67217029,
            67303164,
            67301866,
            67298063,
            67237371,
            67236431,
            67235408,
            67220294,
            67220865,
            67220608,
            67221489,
            67220476,
            67219646,
            67219320,
            67220067,
            67226705,
            67224401,
            67222526,
            67227114,
            67223817,
            67223367,
            67231531,
            67228179,
            67226295
        ],
        "C": [
            67214007,
            67214267,
            67217998,
            67216889,
            67218307,
            67216554,
            67216623,
            67215042,
            67215238,
            67217005,
            67217682,
            67215492,
            67219419,
            67219630,
            67218331,
            67220921,
            67220564,
            67238779
        ],
        "B": [
            67212862,
            67212809,
            67214461,
            67213367,
            67214581,
            67214399,
            67214511,
            67213321,
            67213424,
            67214716,
            67216187,
            67217236,
            67216491,
            67238990,
            67224941,
            67214356,
            67216320,
            67214479,
            67213910
        ],
        "A": [
            67212605,
            67233989,
            67212600,
            67213460,
            67212650,
            67212623,
            67213201,
            67212677,
            67212601,
            67212657,
            67213584,
            67212831,
            67213003,
            67213058,
            67213442,
            67213081,
            67213875,
            67213272,
            67212886
        ]
    },
    "name": "B. A and B",
    "statement": "You are given two integers a and b. You can perform a sequence of\r\noperations: during the first operation you choose one of these numbers\r\nand increase it by 1; during the second operation you choose one of\r\nthese numbers and increase it by 2, and so on. You choose the number of\r\nthese operations yourself.For example, if a = 1 and b = 3, you can\r\nperform the following sequence of three operations: add 1 to a, then a =\r\n2 and b = 3; add 2 to b, then a = 2 and b = 5; add 3 to a, then a = 5\r\nand b = 5. Calculate the minimum number of operations required to make a\r\nand b equal.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<int,P> P1;\ntypedef pair<P,P> P2;\n#define pu push\n#define pb push_back\n#define mp make_pair\n#define eps 1e-7\n#define INF 1000000000\n#define fi first\n#define sc second\n#define rep(i,x) for(int i=0;i<x;i++)\n#define repn(i,x) for(int i=1;i<=x;i++)\n#define SORT(x) sort(x.begin(),x.end())\n#define ERASE(x) x.erase(unique(x.begin(),x.end()),x.end())\n#define POSL(x,v) (lower_bound(x.begin(),x.end(),v)-x.begin())\n#define POSU(x,v) (upper_bound(x.begin(),x.end(),v)-x.begin())\nvoid solve(){\n\tll a,b; cin >> a >> b;\n\ta = abs(a-b);\n\tif(a == 0) { puts(\"0\"); return; }\n\tfor(ll i=1;;i++){\n\t\tll sum = i*(i+1)/2;\n\t\tif(a%2 != sum%2) continue;\n\t\tif(a > sum) continue;\n\t\tcout<<i<<endl;return;\n\t}\n}\nint main(){\n\tint t; cin >> t;\n\twhile(t--)solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. A and B.json",
    "editorial_link": "https://codeforces.com//blog/entry/72330",
    "editorial": "Assume that . Let\u00e2\u0080\u0099s denote the minimum number of operations required to\r\nmake and equal as .There are two restrictions on : At first, , because\r\nif then will be greater than (after applying all operations); Secondly,\r\nintegers and must have the same parity, because if they have different\r\nparity, then and will have different parity (after applying all\r\noperations).It turns out that we always can make integers and equal\r\nafter applying operations. It\u00e2\u0080\u0099s true because we have to add to and the\r\nrest to . And we can get any integer from to as a sum of subset of set .\r\n"
}