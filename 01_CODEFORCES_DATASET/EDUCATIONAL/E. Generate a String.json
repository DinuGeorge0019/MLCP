{
    "link": "https://codeforces.com//contest/710/problem/E",
    "problemId": "68763",
    "problem_idx": "E",
    "shortId": "710E",
    "contest_number": "710",
    "problem_submissions": {
        "E": [
            20054996,
            20055960,
            20050515,
            20056207,
            20062379,
            20050639,
            20060515,
            27538320,
            24141101,
            20058483,
            20061563,
            20063242,
            20056323,
            20059072,
            20054898,
            20054597,
            20052086,
            20056820,
            20054542,
            36740748,
            20055879
        ],
        "C": [
            20054051,
            20051373,
            20056438,
            20051555,
            20054552,
            20057101,
            20058774,
            20058437,
            20052547,
            20053723,
            20053869,
            20053250,
            31838188,
            20053265,
            20052921,
            20048285,
            20051208,
            20051131,
            20052481
        ],
        "D": [
            20051723,
            20054925,
            20102628,
            20080042,
            20058096,
            20227651,
            20063470,
            20057421,
            20073897,
            20058831,
            20063211,
            20063051,
            20065659,
            20073500
        ],
        "B": [
            20047805,
            20048112,
            20047656,
            20048116,
            20049100,
            20050209,
            20048553,
            20053733,
            20048382,
            23338455,
            23338445,
            23338229,
            23337441,
            23337163,
            20047912,
            20048941,
            20047671,
            20047834,
            20048990,
            20047586,
            20047900,
            20049325,
            20050272
        ],
        "A": [
            20047538,
            20047664,
            20047537,
            20047609,
            20048066,
            20048101,
            20047871,
            20049535,
            20047569,
            20047558,
            20047774,
            20047559,
            20048643,
            20047690,
            20047542,
            20047577,
            20047828,
            20048745
        ],
        "F": [
            20058436,
            20060159,
            27715475,
            27715435,
            27715423,
            27715408,
            27715385,
            27715362,
            27715335,
            27714560,
            27714385,
            20065369,
            20065327,
            20065292,
            20065031,
            20056674,
            20065676,
            20065486,
            20065406,
            20065347,
            20065268,
            20061631,
            31301760,
            42656662,
            20137188
        ]
    },
    "name": "E. Generate a String",
    "statement": "wants to generate an input file for some programming competition\r\nproblem.His input is a string consisting of letters \u2019a\u2019. He is too lazy\r\nto write a generator so he will manually generate the input in a text\r\neditor.Initially, the text editor is empty. It takes him seconds to\r\ninsert or delete a letter \u2019a\u2019 from the text file and seconds to copy the\r\ncontents of the entire text file, and duplicate it. wants to find the\r\nminimum amount of time needed for him to create the input file of\r\nexactly letters \u2019a\u2019. Help him to determine the amount of time needed to\r\ngenerate the input.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <ctype.h>\n#include <deque>\n#include <queue>\n#include <cstring>\n#include <set>\n#include <list>\n#include <map>\n#include <random>\n#include <unordered_map>\n#include <stdio.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef std::vector<int> vi;\ntypedef std::vector<bool> vb;\ntypedef std::vector<string> vs;\ntypedef std::vector<double> vd;\ntypedef std::vector<long long> vll;\ntypedef std::vector<std::vector<int> > vvi;\ntypedef vector<vvi> vvvi;\ntypedef vector<vll> vvll;\ntypedef std::vector<std::pair<int, int> > vpi;\ntypedef vector<vpi> vvpi;\ntypedef std::pair<int, int> pi;\ntypedef std::pair<ll, ll> pll;\ntypedef std::vector<pll> vpll;\n\nconst long long mod = 1000000007;\n\n#define all(c) (c).begin(),(c).end()\n#define sz(c) (int)(c).size()\n#define forn(i, a, b) for(int i = a; i < b; i++)\n\n#define pb push_back\n#define mp make_pair\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.txt\", \"rt\", stdin);\n    freopen(\"output.txt\", \"wt\", stdout);\n#endif\n    int n,x,y;\n    cin>>n>>x>>y;\n    vll ans(n+1);\n    ans[1] = x;\n    forn(k,2,n+1) {\n        ans[k] = ans[k-1] + x;\n        if (k%2 == 0) ans[k] = min(ans[k], ans[k/2] + y);\n        else {\n            ans[k] = min(ans[k], ans[(k+1)/2] + x + y);\n        }\n    }\n    cout<<ans[n];\n    \n    \n    \n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Generate a String.json",
    "editorial_link": "https://codeforces.com//blog/entry/46761",
    "editorial": "The problem was suggested by Zi Song Yeoh zscoder. This problem has a\r\nsimple solution described by participants in the comments. My solution\r\nis a little harder. Let\u00e2\u0080\u0099s solve it using dynamic programming. Let be the\r\nsmallest amount of time needed to get letters \u00e2\u0080\u0099a\u00e2\u0080\u0099. Let\u00e2\u0080\u0099s consider\r\ntransitions: the transition for adding one letter \u00e2\u0080\u0099a\u00e2\u0080\u0099 can be simply\r\ndone. Let\u00e2\u0080\u0099s process transitions for multiplying by two and subtraction\r\nby one simultaneously: let\u00e2\u0080\u0099s decrease the number times by one right\r\nafter getting it. Easy to see that such updates never include each\r\nother, so we can store them in queue by adding the new update at the\r\ntail of the queue and taking the best update from the head. The solution\r\nis hard to describe, but it is very simple in the code, so please check\r\nit to understand the idea :-) C++ solution\r\n"
}