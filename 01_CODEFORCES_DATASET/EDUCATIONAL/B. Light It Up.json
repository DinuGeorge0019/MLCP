{
    "link": "https://codeforces.com//contest/1000/problem/B",
    "problemId": "193655",
    "problem_idx": "B",
    "shortId": "1000B",
    "contest_number": "1000",
    "problem_submissions": {
        "G": [
            39718562,
            39719543,
            39731044,
            39745353
        ],
        "E": [
            39714455,
            39714380,
            39711396,
            39717344,
            39715216,
            39714198,
            39717274,
            39714849,
            39716315,
            39710033,
            39719087,
            39714919,
            39717269,
            39719314,
            39715149,
            39718067,
            39717227,
            39715819,
            39716698,
            39714956
        ],
        "F": [
            39713460,
            39707084,
            39730558,
            39730512,
            39730296,
            39730270,
            39730256,
            39730239,
            39730221,
            39730211,
            39730154,
            39730127,
            39730113,
            39730102,
            39730087,
            39730070,
            39730054,
            39730038,
            39730029,
            39715353,
            39714587,
            39718375,
            39717776,
            39709495,
            39717288,
            39718275,
            39707695,
            39714904,
            39719561,
            39715859,
            39716309,
            41303353,
            41303333,
            39722296,
            39721263,
            39713335,
            39715356,
            39718313,
            39720559,
            39710578
        ],
        "D": [
            39712036,
            39711284,
            39709815,
            39710348,
            39711331,
            39711469,
            39714291,
            39712438,
            39711322,
            39711986,
            39710186,
            39711296,
            39710596,
            39711080,
            39713011,
            39710269,
            39712921,
            39714356,
            39714670,
            39711775
        ],
        "C": [
            39709789,
            39708273,
            39708437,
            39708497,
            39707490,
            39709711,
            39711470,
            39710285,
            39709663,
            39712657,
            39707054,
            39709385,
            39707981,
            39708400,
            39708339,
            39708579,
            39711654,
            39712280,
            39711950,
            39712277
        ],
        "B": [
            39708786,
            39709741,
            39707292,
            39706954,
            39708573,
            39707999,
            39708997,
            39708329,
            39708450,
            39715462,
            39712282,
            39720742,
            39715883,
            39713342,
            39706846,
            39709837,
            39709912,
            39706999,
            39710604,
            39710245,
            39709682,
            39713043
        ],
        "A": [
            39706953,
            39704546,
            39704256,
            39704278,
            39704401,
            39705070,
            39705301,
            39704306,
            39704491,
            39713520,
            39705360,
            39704298,
            39704641,
            39704487,
            39704983,
            39705096,
            39704429,
            39704776,
            39705211,
            39713228
        ]
    },
    "name": "B. Light It Up",
    "statement": "Recently, you bought a brand new smart lamp with programming features.\r\nAt first, you set up a schedule to the lamp. Every day it will turn\r\npower on at moment 0 and turn power off at moment M. Moreover, the lamp\r\nallows you to set a program of switching its state (states are \"lights\r\non\" and \"lights off\"). Unfortunately, some program is already installed\r\ninto the lamp.The lamp allows only programs. Good program can be\r\nrepresented as a non-empty array a, where 0 < a_1 < a_2 <\r\ndots < a_{|a|} < M. All a_i must be integers. Of course, preinstalled\r\nprogram is a good program.The lamp follows program a in next manner: at\r\nmoment 0 turns power and light on. Then at moment a_i the lamp flips its\r\nstate to opposite (if it was lit, it turns off, and vice versa). The\r\nstate of the lamp flips instantly: for example, if you turn the light\r\noff at moment 1 and then do nothing, the total time when the lamp is lit\r\nwill be 1. Finally, at moment M the lamp is turning its power off\r\nregardless of its state.Since you are not among those people who read\r\ninstructions, and you don’t understand the language it’s written in, you\r\nrealize (after some testing) the only possible way to alter the\r\npreinstalled program. You can element into the program a, so it still\r\nshould be a program after alteration. Insertion can be done between any\r\npair of consecutive elements of a, or even at the begining or at the end\r\nof a.Find such a way to alter the program that the total time when the\r\nlamp is lit is maximum possible. Maybe you should leave program\r\nuntouched. If the lamp is lit from x till moment y, then its lit for y -\r\nx units of time. Segments of time when the lamp is lit are summed up.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define fi first\n#define se second\n#define fin(s) freopen( s, \"r\", stdin );\n#define fout(s) freopen( s, \"w\", stdout );\n\nconst long long N = 100100;\nconst long long Q = 2e18;\nconst long long mod = 1e9 + 7;\nconst long long MAGIC = 30;\n\nusing namespace std;\n\nint n;\nint m;\nint d[N][2][2];\n\nvoid solve()\n{\n        vector < int > a;\n        a.push_back(0);\n        cin >> n >> m;\n        for(int i = 1; i <= n; i++){\n                int x;\n                cin >> x;\n                a.push_back(x);\n                d[i][0][0] = -1e9;\n                d[i][1][0] = -1e9;\n                d[i][0][1] = -1e9;\n                d[i][1][1] = -1e9;\n        }\n        d[0][0][0] = -1e9;\n        d[0][1][0] = -1e9;\n        a.push_back(m);\n        for(int i = 1; i <= n + 1; i++){\n                d[i][0][0] = d[i - 1][0][1] + a[i] - a[i - 1];\n                d[i][0][1] = d[i - 1][0][0];\n                d[i][1][0] = d[i - 1][1][1] + a[i] - a[i - 1];\n                if(a[i - 1] + 1 < a[i]) d[i][1][0] = max(d[i][1][0], d[i - 1][0][0] + a[i] - a[i - 1] - 1);\n                d[i][1][1] = d[i - 1][1][0];\n                if(a[i - 1] + 1 < a[i]) d[i][1][1] = max(d[i][1][1], d[i - 1][0][1] + a[i] - a[i - 1] - 1);\n        }\n        n++;\n        int ans = d[n][0][0];\n        ans = max(ans, d[n][0][1]);\n        ans = max(ans, d[n][1][0]);\n        ans = max(ans, d[n][1][1]);\n        cout << ans << \"\\n\";\n}\n\nbool mtest = false; int main()\n{\n        //fin(\"input.txt\");\n        //fout(\"output.txt\");\n        //fin(\"island.in\");\n        //fout(\"island.out\");\n        ios_base::sync_with_stdio(0);\n        int TE = 1;\n        if(mtest)\n                cin >> TE;\n        while(TE--)\n                solve();\n        return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Light It Up.json",
    "editorial_link": "https://codeforces.com/blog/entry/60288",
    "editorial": "At first, letâs insert and in array , so all possible positions for\r\ninserting will always belong to . At second, let be value to insert and\r\n. It can be proven, that itâs always optimal to move to or to . So, for\r\neach we need to check only and . To check it fast enough, we need to\r\nknow total time of lamp is lit for each prefix and precalculate for each\r\n, total time of lamp is lit if starting from light is on / lights is\r\noff.Result complexity is .\r\n",
    "hint": []
}