{
    "link": "https://codeforces.com//contest/1796/problem/C",
    "problemId": "1802547",
    "problem_idx": "C",
    "shortId": "1796C",
    "contest_number": "1796",
    "problem_submissions": {
        "F": [
            195363403,
            195358131,
            195479952,
            195352672,
            197311670,
            196155422,
            195754330
        ],
        "E": [
            195322604,
            195319205,
            195326482,
            195321452,
            195327641,
            195860691,
            195453420,
            195453193,
            195322745,
            195328001,
            195331101,
            195332636,
            195326730,
            195325672,
            195330089,
            195730772,
            195730423,
            195326388,
            195341037,
            195326008,
            195331716,
            195328756,
            195331573,
            195338613,
            195329663
        ],
        "D": [
            195301353,
            195304722,
            195305253,
            195303622,
            195309683,
            195303260,
            195314948,
            195309431,
            195312674,
            195316263,
            195314478,
            195311060,
            195310198,
            195308650,
            195308315,
            195293456,
            195319263,
            195305260,
            195544976,
            195315681
        ],
        "C": [
            195293384,
            195295362,
            195292646,
            195293592,
            195298098,
            195294172,
            195296742,
            195299256,
            195301143,
            195303080,
            195303361,
            195304837,
            195724689,
            195723906,
            195300890,
            195288215,
            195295041,
            195302705,
            195306906,
            195294076,
            195307764
        ],
        "B": [
            195288248,
            195289700,
            195287789,
            195287682,
            195290336,
            195286518,
            195290220,
            195290123,
            195290068,
            195287181,
            195292039,
            195293913,
            195289326,
            195284427,
            195288804,
            195305536,
            195289798,
            195287403,
            195298773
        ],
        "A": [
            195283882,
            195284135,
            195283927,
            195289942,
            195285318,
            195283838,
            195283735,
            195283820,
            195283931,
            195283631,
            195283664,
            195285369,
            195285859,
            195283473,
            195283857,
            195283713,
            195284138,
            195283860,
            195284027
        ]
    },
    "name": "C. Maximum Set",
    "statement": "A set of positive integers S is called beautiful if, for every two\r\nintegers x and y from this set, either x divides y or y divides x (or\r\nboth).You are given two integers l and r. Consider all beautiful sets\r\nconsisting of integers not less than l and not greater than r. You have\r\nto print two numbers: the maximum possible size of a beautiful set where\r\nall elements are from l to r; the number of beautiful sets consisting of\r\nintegers from l to r with the maximum possible size. Since the second\r\nnumber can be very large, print it modulo 998244353.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define mod 998244353\n#define int long long\nusing namespace std;\nint n,a[2000005];\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint T;\n\tcin >> T;\n\twhile(T--)\n\t{\n\t\tint l,r;\n\t\tcin >> l >> r;\n\t\tif(l*2>r)\n\t\t{\n\t\t\tcout << \"1 \" << r-l+1 << \"\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tint cnt=1,p=1;\n\t\tfor(int i=l*2;i<=r;i*=2) ++cnt,p*=2;\n\t\tint ans=(r/p)-(l-1)+max(0ll,(r/(p/2*3))-(l-1))*(cnt-1);\n\t\tcout << cnt << \" \" << ans << \"\\n\";\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Maximum Set.json",
    "editorial_link": "https://codeforces.com//blog/entry/113408",
    "editorial": "Every beautiful set can be represented as a sequence of its elements in\r\nsorted order. Let these elements for some set be ; also, let . When the\r\nset is beautiful, every is an integer greater than .Itâs easy to see\r\nthat if and belong to , the whole set belongs to . Since , in order to\r\nmaximize , we need to choose and as small as possible. So, why donât we\r\nchoose and every ? This will allow us to calculate the maximum possible\r\nsize of a beautiful set (let be this maximum possible size).Okay, what\r\nabout counting those sets? The claims and that every are no longer true\r\nby default. However, there are some constraints on .Firstly, every . If\r\nwe had some value of , we could replace it with two values of , and the\r\nsize of the set would increase.Secondly, there is at most one . If there\r\nare two values , we could replace them with three , and the size of the\r\nset would increase as well.So, the sequence contains at most one value ,\r\nand the rest of the values are .We will divide the sets we want to count\r\ninto two categories: the ones with all , and the ones with one value .To\r\ncount the sets in the first category, we simply need to count the number\r\nof different minimum values in those sets. Those minimum values have to\r\nbe such that multiplying them by wouldnât make them greater than , so\r\nthese are all integers from the segment . For every such integer, there\r\nexists exactly one set of the first category.To count the sets in the\r\nsecond category, we do a similar thing. The minimum value in the set\r\nshould be from the segment ; but for every integer from this segment,\r\nthere are different sets of the second category since there are ways to\r\nchoose which is equal to .\r\n",
    "hint": []
}