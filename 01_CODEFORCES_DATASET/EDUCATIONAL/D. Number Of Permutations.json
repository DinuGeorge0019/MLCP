{
    "link": "https://codeforces.com//contest/1207/problem/D",
    "problemId": "393974",
    "problem_idx": "D",
    "shortId": "1207D",
    "contest_number": "1207",
    "problem_submissions": {
        "G": [
            59304889,
            59306176,
            59301627,
            59302407,
            59304210,
            59305372,
            59299826,
            59307985,
            59309136,
            59355235,
            59305105,
            59306118,
            59301046,
            59312490,
            59309174,
            59287118,
            59310203,
            59295342,
            59301224,
            59539702,
            59539581,
            59351316
        ],
        "F": [
            59294259,
            59294479,
            59293703,
            59293849,
            59293275,
            59295696,
            59294933,
            59295843,
            59294771,
            59355160,
            59296347,
            59298285,
            59281377,
            59296537,
            59297200,
            59291269,
            59286364,
            59296630,
            59287709,
            59292729,
            59290075
        ],
        "E": [
            59292194,
            59292083,
            59291434,
            59290312,
            59295934,
            59293256,
            59291138,
            59291830,
            59292503,
            59355130,
            59293757,
            59294706,
            59287064,
            59293320,
            59294341,
            59301962,
            59302885,
            59297608,
            59313261,
            59287955,
            59288580
        ],
        "D": [
            59288834,
            59287831,
            59288996,
            59287685,
            59289737,
            59290739,
            59290294,
            59288360,
            59289950,
            59355097,
            59292036,
            59291781,
            72384113,
            59294418,
            59290806,
            59291351,
            59299257,
            59291468,
            59299192,
            59306695,
            59285530,
            59286504
        ],
        "C": [
            59285396,
            59284651,
            59285140,
            59282971,
            59284725,
            59287600,
            59288738,
            59284263,
            59285344,
            59354996,
            59286662,
            59287414,
            59304338,
            59287720,
            59292924,
            59296911,
            59299362,
            59300644,
            59304203,
            59281217,
            59283117
        ],
        "B": [
            59279519,
            59278225,
            59278842,
            59278682,
            59280115,
            59279180,
            59278245,
            59278492,
            59278908,
            59354975,
            59279326,
            59282036,
            59291564,
            59283101,
            59282410,
            59293321,
            59292638,
            59301723,
            59308496,
            59277604,
            59278398
        ],
        "A": [
            59275875,
            59276003,
            59275839,
            59276009,
            59276337,
            59276873,
            59279814,
            59276133,
            59276212,
            59354913,
            59276348,
            59277224,
            59276516,
            59275776,
            59279300,
            59292197,
            59276302,
            59302397,
            59275866,
            59275778,
            59276055
        ]
    },
    "name": "D. Number Of Permutations",
    "statement": "You are given a sequence of n pairs of integers: (a_1, b_1), (a_2, b_2),\r\ndots , (a_n, b_n). This sequence is called bad if it is sorted in\r\nnon-descending order by first elements or if it is sorted in\r\nnon-descending order by second elements. Otherwise the sequence is good.\r\nThere are examples of good and bad sequences: s = [(1, 2), (3, 2), (3,\r\n1)] is bad because the sequence of first elements is sorted: [1, 3, 3];\r\ns = [(1, 2), (3, 2), (1, 2)] is bad because the sequence of second\r\nelements is sorted: [2, 2, 2]; s = [(1, 1), (2, 2), (3, 3)] is bad\r\nbecause both sequences (the sequence of first elements and the sequence\r\nof second elements) are sorted; s = [(1, 3), (3, 3), (2, 2)] is good\r\nbecause neither the sequence of first elements ([1, 3, 2]) nor the\r\nsequence of second elements ([3, 3, 2]) is sorted. Calculate the number\r\nof permutations of size n such that after applying this permutation to\r\nthe sequence s it turns into a good sequence. A permutation p of size n\r\nis a sequence p_1, p_2,\r\ndots , p_n consisting of n distinct integers from 1 to n (1\r\nle p_i\r\nle n). If you apply permutation p_1, p_2,\r\ndots , p_n to the sequence s_1, s_2,\r\ndots , s_n you get the sequence s_{p_1}, s_{p_2},\r\ndots , s_{p_n}. For example, if s = [(1, 2), (1, 3), (2, 3)] and p = [2,\r\n3, 1] then s turns into [(1, 3), (2, 3), (1, 2)].\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nconst int mod = 998244353;\nmap<int, int> a, b;\nmap<pair<int, int>, int> ab;\npair<int, int> d[300010];\nint n;\nint fac[300010];\nint main() {\n    ios :: sync_with_stdio(0);\n    cin >> n;\n    fac[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        cin >> d[i].first >> d[i].second;\n        fac[i] = 1ll * i * fac[i - 1] % mod;\n        a[d[i].first] += 1;\n        b[d[i].second] += 1;\n        ab[d[i]] += 1;\n    }\n    sort(d + 1, d + 1 + n);\n    int ans = fac[n], tmp = 1;\n    for(auto i : a)\n        tmp = 1ll * tmp * fac[i.second] % mod;\n    ans = (ans - tmp + mod) % mod;\n    tmp = 1;\n    for(auto i : b)\n        tmp = 1ll * tmp * fac[i.second] % mod;\n    ans = (ans - tmp + mod) % mod;\n    tmp = 1;\n    for(auto i : ab)\n        tmp = 1ll * tmp * fac[i.second] % mod;\n    for(int i = 1; i < n; i++) if(d[i + 1].second < d[i].second) tmp = 0;\n    ans = (ans + tmp) % mod;\n    cout << ans << endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Number Of Permutations.json",
    "editorial_link": "https://codeforces.com//blog/entry/69314",
    "editorial": "Let\u00e2\u0080\u0099s suppose that all permutation are good. We counted the permutations\r\ngiving the sequences where the first elements are sorted (we denote the\r\nnumber of such permutations as ) and the permutations giving the\r\nsequences where the second elements are sorted (we denote the number of\r\nsuch permutations as ). Then the answer is , right? No, because we\r\nsubtracted the number of sequences where first and second elements are\r\nsorted simultaneously (we denote this number as ) twice. So, the answer\r\nis .How can we calculate the value of ? It\u00e2\u0080\u0099s easy to understand that the\r\nelements having equal can be arranged in any order. So, , where is the\r\nnumber of elements equal to among . can be calculated the same way.How\r\ncan we calculate the value of ? First of all, there is a case where it\r\nis impossible to arrange the elements of the sequence so that the first\r\nelements and the second elements are sorted. To check that, we may sort\r\nthe given sequence comparing two elements by , and if are equal by . If\r\nthe sequence of second elements in the resulting sequence is not sorted,\r\nthen . Otherwise, equal elements of the given sequence can be arranged\r\nin any order. So , where , , ..., are the elements that appear in the\r\ngiven sequence of pairs at least once.\r\n"
}