{
    "link": "https://codeforces.com//contest/652/problem/E",
    "problemId": "52872",
    "problem_idx": "E",
    "shortId": "652E",
    "contest_number": "652",
    "problem_submissions": {
        "F": [
            16928285,
            16930373,
            16931256,
            16970841,
            16961705,
            16935106,
            156953099,
            16939325,
            17157478,
            16976822,
            16929598
        ],
        "E": [
            16926440,
            16927126,
            16928485,
            16928041,
            16928079,
            16927963,
            16929010,
            16928885,
            16928945,
            16929000,
            16929278,
            16926493,
            16928821,
            16929439,
            16928127,
            16930840,
            16929731,
            16930544,
            16929622
        ],
        "D": [
            16923853,
            16925192,
            16926960,
            16924196,
            16924625,
            16925554,
            16925730,
            16924207,
            16926093,
            16926313,
            16925298,
            16926004,
            16926568,
            16924529,
            16926045,
            16925170,
            16925998,
            16927190,
            16926470
        ],
        "C": [
            16923132,
            16923717,
            16926036,
            16923304,
            16924095,
            16924304,
            16924230,
            16925378,
            16924383,
            16924805,
            16924428,
            16924018,
            16924971,
            16925484,
            16923795,
            16923653,
            16924997,
            16925262,
            16925278
        ],
        "B": [
            16922478,
            16922741,
            16925620,
            16922710,
            16922792,
            16922869,
            16923264,
            16922610,
            16922818,
            16923450,
            16923095,
            16923418,
            16923515,
            16923547,
            16922822,
            16922672,
            16922783,
            16923327,
            16924223
        ],
        "A": [
            16922372,
            16922446,
            16922797,
            16922454,
            16922532,
            16922643,
            16922693,
            16922430,
            16922460,
            16923027,
            16922810,
            16922924,
            16922740,
            16923101,
            16922457,
            16922433,
            16923996,
            16922614,
            16923536
        ]
    },
    "name": "E. Pursuit For Artifacts",
    "statement": "Johnny is playing a well-known computer game. The game are in some\r\ncountry, where the player can freely travel, pass quests and gain an\r\nexperience.In that country there are islands and bridges between them,\r\nso you can travel from any island to any other. In the middle of some\r\nbridges are lying ancient powerful artifacts. Johnny is not interested\r\nin artifacts, but he can get some money by selling some artifact.At the\r\nstart Johnny is in the island and the artifact-dealer is in the island\r\n(possibly they are on the same island). Johnny wants to find some\r\nartifact, come to the dealer and sell it. The only difficulty is that\r\nbridges are too old and destroying right after passing over them.\r\nJohnnie’s character can’t swim, fly and teleport, so the problem became\r\ntoo difficult.Note that Johnny can’t pass the half of the bridge,\r\ncollect the artifact and return to the same island. Determine if Johnny\r\ncan find some artifact and sell it.\r\n",
    "solutions": [
        "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<queue>\n#include<stack>\n#include<cassert>\n#define PB push_back\n#define MP make_pair\n#define sz(v) (in((v).size()))\n#define forn(i,n) for(in i=0;i<(n);++i)\n#define forv(i,v) forn(i,sz(v))\n#define fors(i,s) for(auto i=(s).begin();i!=(s).end();++i)\n#define all(v) (v).begin(),(v).end()\nusing namespace std;\ntypedef long long in;\ntypedef vector<in> VI;\ntypedef vector<VI> VVI;\nVVI ppi;\nstruct bridges{\n  VVI impl;\n  stack<in> whr;\n  stack<in> hsn;\n  stack<in> ci;\n  VI vst;\n  VI trc;\n  VI hit;\n  in mhsh;\n  stack<in> ts;\n  VI comp,psd,gvh;\n  void ad(in a, in b){\n    impl[a].PB(b);\n    impl[b].PB(a);\n  }\n  void ini(in n){\n    mhsh=n;\n    impl=VVI(mhsh,VI(0));\n  }\n  void hasol(){\n    trc.resize(mhsh,0);\n    vst.resize(mhsh,0);\n    hit.resize(mhsh,0);\n    psd=hit;\n    comp.resize(mhsh,-1);\n    gvh.resize(mhsh,0);\n    in crn=0;\n    in ccp=0;\n    forn(z,mhsh){\n      if(vst[z])\n\tcontinue;\n      crn++;\n      whr.push(z);\n      hsn.push(0);\n      vst[z]=crn;\n      hit[z]=0;\n      in chit=1;\n      ci.push(0);\n      in u,i,ch,v;\n      while(!whr.empty()){\n\tu=whr.top();\n\ti=ci.top();\n\tch=hsn.top();\n\tgvh[u]=ch;\n\tif(!psd[u]){\n\t  ts.push(u);\n\t  psd[u]=1;\n\t}\n\tif(i==sz(impl[u])){\n\t  if(ch>=hit[u]){\n\t    while(1){\n\t      comp[ts.top()]=ccp;\n\t      ts.pop();\n\t      if(comp[u]!=-1)\n\t\tbreak;\n\t    }\n\t    ccp++;\n\t  }\n\t  whr.pop();\n\t  ci.pop();\n\t  hsn.pop();\n\t  continue;\n\t}\n\tv=impl[u][i];\n\tif(trc[u]==v){\n\t  ci.top()++;\n\t  continue;\n\t}\n\tif(vst[v]==0){\n\t  trc[v]=u;\n\t  whr.push(v);\n\t  hsn.push(chit);\n\t  ci.push(0);\n\t  hit[v]=chit++;\n\t  vst[v]=crn;\n\t  continue;\n\t}\n\tif(vst[v]==crn && comp[v]==-1){\n\t  if(gvh[v]<ch){\n\t    hsn.top()=gvh[v];\n\t  }\n\t}\n\tci.top()++;\n      }\n    }\n  }\n};\nVVI egs;\nbridges mbr;\nin n,m;\nVI tx,ty,tbr;\nbool fnd=0;\nVI dfv;\nset<in> gdcp;\nbool isfd(in a){\n  return gdcp.find(a)!=gdcp.end();\n}\nin dfs(in u, in gl){\n  if(dfv[u])\n    return 0;\n  dfv[u]=1;\n  if(u==gl){\n    gdcp.insert(mbr.comp[u]);\n    return 1;\n  }\n  in tt;\n  forv(i,egs[u]){\n    tt=egs[u][i];\n    if(dfs(tt,gl)){\n      gdcp.insert(mbr.comp[u]);\n      return 1;\n    }\n  }\n  return 0;\n}\nint main(){\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  cin>>n>>m;\n  mbr.ini(n);\n  tx=ty=tbr=VI(m);\n  egs.resize(n);\n  forn(i,m){\n    cin>>tx[i]>>ty[i]>>tbr[i];\n    --tx[i];\n    --ty[i];\n    egs[tx[i]].PB(ty[i]);\n    egs[ty[i]].PB(tx[i]);\n    mbr.ad(tx[i],ty[i]);\n  }\n  mbr.hasol();\n  in id1,id2;\n  cin>>id1>>id2;\n  --id1;\n  --id2;\n  dfv.resize(n);\n  dfs(id1,id2);\n  forn(i,m){\n    if(tbr[i]){\n      if(isfd(mbr.comp[tx[i]])&&isfd(mbr.comp[ty[i]])){\n\tcout<<\"YES\"<<endl;\n\treturn 0;\n      }\n    }\n  }\n  cout<<\"NO\"<<endl;\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dsu",
        "graphs",
        "trees"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Pursuit For Artifacts.json",
    "editorial_link": "https://codeforces.com//blog/entry/43986",
    "editorial": "The problem was suggested by Alexey Dergunov dalex. Edge biconnected\r\ncomponent in an undirected graph is a maximal by inclusion set of\r\nvertices so that there are two edge disjoint paths between any pair of\r\nvertices. Consider the graph with biconnected components as vertices.\r\nEasy to see that itâs a tree (if it contains some cycle then the whole\r\ncycle is a biconnected component). All edges are destroying when we\r\npassing over them so we canât returnto the same vertex (in the tree)\r\nafter leaving it by some edge. Consider the biconncted components that\r\ncontains the vertices and . Letâs denote them and . Statement: the\r\nanswer is YES if and only if on the path in the tree from the vertex to\r\nthe vertex there are an edge with an artifact or there are a biconnected\r\ncomponent that contains some edge with an artifact. Easy to see that the\r\nstatement is true: if there are such edge then we can pass over it in\r\nthe tree on the path from to or we can pass over it in biconnected\r\ncomponent. The converse also easy to check. Here is one of the ways to\r\nfind edge biconnected components: Letâs orient all edges to direction\r\nthat depth first search passed it for the first time. Letâs find in new\r\ndirected graph strongly connected components. Statement: the strongly\r\nconnected components in the new graph coincide with the biconnected\r\ncomponents in old undirected graph. Also you can notice that the edges\r\nin tree is the bridges of the graph (bridges in terms of graph theory).\r\nSo you can simply find the edges in the graph. Not too short C++\r\nsolutionconst int N = 500500, M = 500500;int n, m; int eused[M]; vector\r\neid[N]; vector g1[N], tg1[N]; vector w[N]; int a, b;bool read() { if\r\n(!(cin >> n >> m)) return false; forn(i, m) eused[i] = false; forn(i, n)\r\n{ g1[i].clear(); tg1[i].clear(); eid[i].clear(); w[i].clear(); } forn(i,\r\nm) { int x, y, z; assert(scanf(\"\r\n",
    "hint": []
}