{
    "link": "https://codeforces.com//contest/1487/problem/C",
    "problemId": "897749",
    "problem_idx": "C",
    "shortId": "1487C",
    "contest_number": "1487",
    "problem_submissions": {
        "G": [
            107454023,
            107463460,
            108576854,
            107460627,
            107450583,
            107451415,
            107430357,
            107444206,
            107450475,
            107450812,
            107922779,
            107446295,
            107455969,
            107448609,
            107460406,
            107464872,
            107461634,
            107460893,
            107461280,
            107537497
        ],
        "F": [
            107439893,
            107447022,
            107443885,
            107469668,
            107469505,
            107444768,
            107452696,
            107498096,
            107498067,
            107494456,
            107622368,
            107452390,
            107465180
        ],
        "E": [
            107424178,
            107424961,
            107432865,
            107429617,
            107432584,
            107450909,
            107426371,
            107427677,
            107427122,
            107429815,
            107619068,
            107618663,
            107432462,
            107430691,
            107435461,
            107433872,
            107429938,
            107432421,
            107433935,
            107430580,
            107430754
        ],
        "D": [
            107421373,
            107421309,
            107427665,
            107423119,
            107428301,
            107453801,
            107421667,
            107423926,
            107424261,
            107424540,
            107428634,
            107426278,
            107425386,
            107425551,
            107425722,
            107429097,
            107425401,
            107424375,
            107424284
        ],
        "C": [
            107420002,
            107418181,
            108576710,
            107420782,
            107436848,
            107423312,
            107458805,
            107419068,
            107421219,
            107421707,
            107421854,
            107426343,
            107423376,
            107421931,
            107421521,
            107423818,
            107421650,
            107421555,
            107422095,
            107421412
        ],
        "B": [
            107416333,
            107413010,
            108576679,
            107416798,
            107424397,
            107419739,
            107460613,
            107414304,
            107416812,
            107415960,
            107414948,
            107416874,
            107418655,
            107417622,
            107416871,
            107416648,
            107416339,
            107414794,
            107418914,
            107416654
        ],
        "A": [
            107410359,
            107409706,
            108576659,
            107410154,
            107409888,
            107412513,
            107461425,
            107409652,
            107410618,
            107410216,
            107410119,
            107412422,
            107409710,
            107411124,
            107409938,
            107409679,
            107409688,
            107409851,
            107409775,
            107410068
        ]
    },
    "name": "C. Minimum Ties",
    "statement": "A big football championship will occur soon! n teams will compete in it,\r\nand each pair of teams will play exactly one game against each\r\nother.There are two possible outcomes of a game: the game may result in\r\na tie, then both teams get 1 point; one team might win in a game, then\r\nthe winning team gets 3 points and the losing team gets 0 points. The\r\nscore of a team is the number of points it gained during all games that\r\nit played.You are interested in a hypothetical situation when all teams\r\nget the same score at the end of the championship. A simple example of\r\nthat situation is when all games result in ties, but you want to\r\nminimize the number of ties as well.Your task is to describe a situation\r\n(choose the result of each game) so that all teams get the same score,\r\nand the number of ties is the minimum possible.\r\n",
    "solutions": [
        "#pragma GCC optimize (\"O3\")\n#pragma GCC target (\"sse4\")\n \n#include <bits/stdc++.h>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n \ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<ld,ld> pd;\n \ntypedef vector<int> vi;\ntypedef vector<ld> vd;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\ntypedef vector<pl> vpl;\ntypedef vector<cd> vcd;\n \n#define FOR(i, a, b) for (int i=a; i<(b); i++)\n#define F0R(i, a) for (int i=0; i<(a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n#define trav(a,x) for (auto& a : x)\n#define uid(a, b) uniform_int_distribution<int>(a, b)(rng)\n \n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n#define ins insert\n\ntemplate<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\ntemplate<class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\n \nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n \nconst int MOD = 1000000007;\nconst char nl = '\\n';\nconst int MX = 100001; //check the limits, dummy\n\nvoid solve() {\n\n    int N; cin >> N;\n    F0R(i, N) {\n        FOR(j, i+1, N) {\n            int dif = j-i;\n            if (dif * 2 == N) {\n                cout << 0 << \" \";\n            } else if (dif * 2 < N) {\n                    cout << 1 << \" \";\n            } else {\n                    cout << -1 << \" \";\n            }\n        }\n    }\n    cout << nl;\n\n}\n \nint main() {\n\tios_base::sync_with_stdio(0); cin.tie(0);    \n\n    int T = 1;\n    cin >> T;\n    while(T--) {\n        solve();\n    }\n\n\treturn 0;\n}\n \n// read the question correctly (ll vs int)\n// template by bqi343\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Minimum Ties.json",
    "editorial_link": "https://codeforces.com//blog/entry/87873",
    "editorial": "If is odd, then we can solve the problem without any ties: each team\r\nshould win exactly matches and lose the same number of matches. Finding\r\nwhich matches each team wins and which matches each team loses can be\r\ndone with some graph algorithms (like Eulerian cycles or circulations),\r\nor with a simple construction: place all teams in a circle in any order,\r\nand let the -th team win against the next teams after it in the circle,\r\nand lose to all other teams.Unfortunately, if is even, we need to use\r\nsome ties since the total sum of scores over all teams is exactly when\r\nthere are no ties, and this number is not divisible by when is even.\r\nEach tie reduces the total sum by , and the minimum number of ties to\r\nmake divisible by is (since ). So, if we find an answer with exactly\r\nties, it is optimal. And itâs easy to find one: once again, place all\r\nteams in a circle in any order; make the -th team win against next teams\r\nin the circle, lose against previous teams in the circle, and tie with\r\nthe opposite team in the circle.\r\n",
    "hint": []
}