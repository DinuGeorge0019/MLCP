{
    "link": "https://codeforces.com//contest/1155/problem/C",
    "problemId": "334463",
    "problem_idx": "C",
    "shortId": "1155C",
    "contest_number": "1155",
    "problem_submissions": {
        "F": [
            53147227,
            53157176,
            53156900,
            53156084,
            53154052,
            53160034,
            53156325,
            53151832,
            53154755,
            53148688,
            53161959,
            53262750,
            53737446,
            53737379,
            53175185
        ],
        "E": [
            53135994,
            53143627,
            53147598,
            53158466,
            53136989,
            53158165,
            53136136,
            53151523,
            53138725,
            53138756,
            53143870,
            53141750,
            53144225,
            53141600,
            53144263,
            53142970,
            53144678,
            53143027,
            53146492,
            53139061
        ],
        "D": [
            53132284,
            53136375,
            53137845,
            53140433,
            53131955,
            53144376,
            53152771,
            53133770,
            53130242,
            53133856,
            53135466,
            53137404,
            53132457,
            53137383,
            53135331,
            53136120,
            53161942,
            53136545,
            53137490,
            53137142
        ],
        "C": [
            53130521,
            53133027,
            53132212,
            53133949,
            53152978,
            53158707,
            53154112,
            53130838,
            53134553,
            53131325,
            53130045,
            53131332,
            53135487,
            53132186,
            53132107,
            53133338,
            53132645,
            53132555,
            53132260
        ],
        "B": [
            53127872,
            53130197,
            53129680,
            53129662,
            53128390,
            53156310,
            53155054,
            53129416,
            53131929,
            53128726,
            53127750,
            53128694,
            53130002,
            53129606,
            53130017,
            53128669,
            53130637,
            53130008,
            53131121
        ],
        "A": [
            53127037,
            53127563,
            53127047,
            53127010,
            53127272,
            53156874,
            53155461,
            53127028,
            53127341,
            53127201,
            53128346,
            53127115,
            53128140,
            53127708,
            53127365,
            53130750,
            53128472,
            53127451,
            53127014
        ]
    },
    "name": "C. Alarm Clocks Everywhere",
    "statement": "Ivan is going to sleep now and wants to set his alarm clock. There will\r\nbe many necessary events tomorrow, the i-th of them will start during\r\nthe x_i-th minute. Ivan doesn’t want to skip any of the events, so he\r\nhas to set his alarm clock in such a way that it rings during minutes\r\nx_1, x_2,\r\ndots, x_n, so he will be awake during each of these minutes ().Ivan can\r\nchoose two properties for the alarm clock the first minute it will ring\r\n(let’s denote it as y) and the interval between two consecutive signals\r\n(let’s denote it by p). After the clock is set, it will ring during\r\nminutes y, y + p, y + 2p, y + 3p and so on.Ivan can choose minute as the\r\nfirst one, but he cannot choose any arbitrary value of p. He has to pick\r\nit among the given values p_1, p_2,\r\ndots, p_m (his phone does not support any other options for this\r\nsetting).So Ivan has to choose the first minute y when the alarm clock\r\nshould start ringing and the interval between two consecutive signals\r\np_j in such a way that it will ring during all given minutes x_1, x_2,\r\ndots, x_n (and it does not matter if his alarm clock will ring in any\r\nother minutes).Your task is to tell the first minute y and the index j\r\nsuch that if Ivan sets his alarm clock with properties y and p_j it will\r\nring during all given minutes x_1, x_2,\r\ndots, x_n or say that it is impossible to choose such values of the\r\ngiven properties. If there are multiple answers, you can print any.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <queue>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, int> pli;\ntypedef pair<ll, ll> pll;\ntypedef long double ld;\n#define mp make_pair\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\nll gcd(ll x, ll y) {\n\treturn y == 0 ? x : gcd(y, x % y);\n}\n\nconst ll INF = (ll)1e18 + 55;\n\nint n, m;\nll x, y, z;\nll ans1 = INF;\nint ans2;\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d%d\", &n, &m);\n\ty = 0;\n\tscanf(\"%lld\", &x);\n\tfor (int i = 1; i < n; i++) {\n\t\tscanf(\"%lld\", &z);\n\t\ty = gcd(y, abs(z - x));\n\t}\n\tx = (x - 1) % y + 1;\n\tans2 = -1;\n\tfor (int i = 0; i < m; i++) {\n\t\tscanf(\"%lld\", &z);\n\t\tif (y % z) continue;\n\t\tz = (x - 1) % z + 1;\n\t\tif (z < ans1) {\n\t\t\tans1 = z;\n\t\t\tans2 = i + 1;\n\t\t}\n\t}\n\tif (ans2 == -1)\n\t\tprintf(\"NO\\n\");\n\telse\n\t\tprintf(\"YES\\n%lld %d\\n\", ans1, ans2);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "number theory"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Alarm Clocks Everywhere.json",
    "editorial_link": "https://codeforces.com/blog/entry/66687",
    "editorial": "It is obvious that we can always take as . But we donât know which value\r\nof we can take. Let be for all from to . The value of should be divisor\r\nof value of . The maximum possible divisor of each is (greatest common\r\ndivisor). And then it is obvious that the value of should be the divisor\r\nof . So we have to find divisor of among all values . If there is no\r\nsuch value then the answer is \"\".Time complexity: .\r\n",
    "hint": []
}