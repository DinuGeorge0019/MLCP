{
    "link": "https://codeforces.com//contest/954/problem/I",
    "problemId": "167346",
    "problem_idx": "I",
    "shortId": "954I",
    "contest_number": "954",
    "problem_submissions": {
        "I": [
            36483613,
            36489921,
            36491468,
            36492587,
            36489151,
            36505182,
            36498444,
            36489158,
            36493599,
            36495253,
            36493983,
            36523197,
            36517457,
            36494315,
            36517490
        ],
        "E": [
            36478770,
            36477321,
            36476296,
            36476332,
            36477191,
            36479277,
            36478407,
            36484072,
            36476637,
            36483722,
            36476830,
            36479359,
            36479273,
            36481624,
            36479515,
            36473956,
            36477339,
            36477449,
            36476422,
            36481260
        ],
        "D": [
            36478485,
            36475307,
            36474083,
            36478258,
            36474970,
            36476455,
            36476263,
            36472023,
            36474824,
            36478016,
            36474200,
            36476982,
            36476891,
            36474372,
            36477175,
            36479984,
            36487971,
            36474275,
            36474076,
            36475466
        ],
        "C": [
            36476002,
            36474037,
            36473020,
            36474296,
            36473832,
            36473968,
            36474218,
            36474540,
            36483525,
            36476724,
            36472809,
            36474171,
            36499291,
            36473004,
            36474442,
            36477242,
            36486700,
            36473123,
            36472782,
            36473808
        ],
        "G": [
            36475037,
            36479869,
            36479819,
            36482297,
            36479701,
            36481399,
            36480184,
            36480325,
            36481161,
            36480550,
            36485383,
            36482231,
            36482668,
            36492299,
            36483624,
            36487406,
            36490213,
            36485274,
            36478330,
            36479287
        ],
        "F": [
            36474930,
            36486416,
            36483404,
            36528491,
            36484207,
            36482822,
            36485630,
            36483061,
            36477477,
            36481839,
            36487500,
            36482960,
            36488051,
            36485000,
            36479677,
            36489393,
            36482816,
            36484976,
            36483377,
            36483862,
            36487177
        ],
        "H": [
            36473564,
            36483628,
            36486927,
            36487388,
            36497291,
            36492759,
            36492641,
            36496336,
            36493059,
            36491960,
            36490810,
            36488245,
            36487713,
            36489798,
            36483087
        ],
        "B": [
            36472231,
            36471541,
            36471094,
            36471718,
            36471325,
            36471918,
            36470816,
            36471290,
            36470543,
            36472680,
            36470969,
            36471052,
            36470688,
            36471049,
            36472812,
            36475352,
            36471581,
            36471121,
            36470814,
            36470886
        ],
        "A": [
            36470941,
            36470615,
            36469920,
            36470743,
            36470038,
            36470789,
            36469978,
            36470246,
            36469943,
            36471510,
            36470178,
            36469918,
            36469982,
            36470334,
            36471516,
            36475017,
            36470944,
            36470503,
            36470133,
            36470029
        ]
    },
    "name": "I. Yet Another String Matching Problem",
    "statement": "Suppose you have two strings and , and their length is equal. You may\r\nperform the following operation any number of times: choose two\r\ndifferent characters and , and replace every occurence of in both\r\nstrings with . Let’s denote the between strings and as the minimum\r\nnumber of operations required to make these strings equal. For example,\r\nif is and is , the between them is we may replace every occurence of\r\nwith , so becomes , and then we may replace every occurence of with , so\r\nboth strings become .You are given two strings and . For every substring\r\nof consisting of characters you have to determine the between this\r\nsubstring and .\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\n#define MN 262144\nconst double pi=acos(-1);\nstruct cp\n{\n\tdouble r,i;\n\tcp(double r=0,double i=0):r(r),i(i){}\n\tcp operator+(cp b){return cp(r+b.r,i+b.i);}\n\tcp operator-(cp b){return cp(r-b.r,i-b.i);}\n\tcp operator*(cp b){return cp(r*b.r-i*b.i,r*b.i+i*b.r);}\n}w[2][MN+5],x[MN+5],y[MN+5];\nint N,R[MN+5],u[MN+5][6][6],f[6];\nchar a[MN+5],b[MN+5];\nint gf(int k){return f[k]<0?k:f[k]=gf(f[k]);}\nvoid init(int n)\n{\n\tfor(N=1;N<=n;N<<=1);\n\tcp g(cos(2*pi/N),sin(2*pi/N));int i,j,k;\n\tfor(i=w[0][0].r=1;i<N;++i)w[0][i]=w[0][i-1]*g;\n\tfor(i=w[1][0].r=1;i<N;++i)w[1][i]=w[0][N-i];\n\tfor(i=j=0;i<N;R[++i]=j)for(k=N>>1;(j^=k)<k;k>>=1);\n}\nvoid fft(cp*x,int v)\n{\n\tint i,j,k;\n\tfor(i=0;i<N;++i)if(i<R[i])swap(x[i],x[R[i]]);\n\tfor(i=1;i<N;i<<=1)for(j=0;j<N;j+=i<<1)for(k=0;k<i;++k)\n\t{\n\t\tcp p=x[i+j+k]*w[v][N/(i<<1)*k];\n\t\tx[i+j+k]=x[j+k]-p;x[j+k]=x[j+k]+p;\n\t}\n\tif(v)for(i=0;i<N;++i)x[i].r/=N,x[i].i/=N;\n}\nint main()\n{\n\tint n,m,i,j,k,ans=0;\n\tscanf(\"%s%s\",a+1,b+1);\n\tn=strlen(a+1);m=strlen(b+1);init(n+n);\n\tfor(i=0;i<6;++i)for(j=0;j<6;++j)if(i!=j)\n\t{\n\t\tmemset(x,0,sizeof(x));memset(y,0,sizeof(y));\n\t\tfor(k=1;k<=n;++k)x[k]=a[k]==i+'a';\n\t\tfor(k=1;k<=m;++k)y[n-k]=b[k]==j+'a';\n\t\tfft(x,0);fft(y,0);\n\t\tfor(k=0;k<N;++k)x[k]=x[k]*y[k];\n\t\tfft(x,1);\n\t\tfor(k=0;k<=n-m;++k)u[k][i][j]=x[n+k].r>0.5;\n\t}\n\tfor(k=0;k<=n-m;++k)\n\t{\n\t\tmemset(f,-1,sizeof(f));ans=0;\n\t\tfor(i=0;i<6;++i)for(j=0;j<6;++j)if(u[k][i][j]&&gf(i)!=gf(j))f[gf(i)]=gf(j),++ans;\n\t\tprintf(\"%d \",ans);\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "fft",
        "math"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\I. Yet Another String Matching Problem.json",
    "editorial_link": "https://codeforces.com//blog/entry/58519",
    "editorial": "Unfortunately, it seems we failed to eliminate bitset solutions.The\napproach in our model solution is the following:Firstly, letâs try to\nfind some \"naive\" solution for calculating the distance between two\nstrings. We may build an undirected graph where vertices represent\nletters, and edges represent that one letter must be transformed into\nanother. Then all letters in the same component should become one\nletter, so the answer is the number of distinct letters minus the number\nof components.Then letâs get back to original problem. For every\nsubstring of we have to find which letters have to be merged to make it\nequal with . This can be done with the help of FFT: to find all\npositions in substrings of with character that coincide with occurences\nof in , we may compute a convolution of two following arrays: set to\nevery position in where occurs , and to every position in where occurs\n(all other elements should be ). After trying these convolutions for\nevery pair of different characters, we compute the answer for every\nsubstring using DFS (or any other method).\n",
    "hint": []
}