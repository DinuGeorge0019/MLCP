{
    "link": "https://codeforces.com//contest/1922/problem/A",
    "problemId": "2433274",
    "problem_idx": "A",
    "shortId": "1922A",
    "contest_number": "1922",
    "problem_submissions": {
        "F": [
            242258354,
            242278276,
            242274562,
            242271525,
            242258097,
            242274599,
            242271507,
            242268588,
            242285652,
            242271581,
            242270540,
            242278542,
            242282333,
            242270699,
            242270119,
            242276867,
            242286431,
            242276715,
            242276487,
            242283192,
            242281108,
            242278860,
            242278983,
            242285548
        ],
        "E": [
            242241568,
            242225493,
            242242029,
            242279592,
            242237693,
            242231955,
            242236354,
            242245342,
            242255638,
            242244187,
            242239291,
            242260117,
            242249388,
            242249138,
            242239806,
            242257431,
            242256396,
            242263321,
            242231103,
            242254535,
            242253629,
            242270325
        ],
        "D": [
            242234045,
            242236857,
            242236461,
            242246467,
            242239405,
            242245547,
            242240299,
            242240756,
            242237650,
            242234866,
            242248459,
            242242872,
            242244162,
            242252228,
            242244373,
            242239696,
            242254494,
            242245049,
            242250144,
            242243755,
            242246758
        ],
        "C": [
            242227385,
            242230966,
            242228502,
            242224242,
            242227745,
            242228850,
            242229081,
            242228504,
            242227487,
            242227235,
            242229333,
            242232708,
            242229815,
            242234164,
            242230429,
            242229813,
            242239026,
            242239967,
            242231740,
            242235920
        ],
        "B": [
            242220641,
            242221058,
            242221110,
            242219955,
            242221311,
            242233194,
            242221713,
            242221320,
            242222042,
            242223201,
            242221647,
            242219752,
            242221561,
            242226204,
            242224089,
            242222658,
            242227596,
            242222002,
            242224729,
            242223236
        ],
        "A": [
            242219259,
            242219714,
            242223200,
            242219077,
            242219362,
            242220179,
            242219565,
            242219194,
            242219734,
            242219881,
            242219505,
            242219046,
            242219400,
            242221402,
            242220981,
            242220554,
            242223002,
            242219741,
            242219322,
            242220234
        ]
    },
    "name": "A. Tricky Template",
    "statement": "You are given an integer n and three strings a, b, c, each consisting of\r\nn lowercase Latin letters.Let a template be a string t consisting of n\r\nlowercase and/or uppercase Latin letters. The string s matches the\r\ntemplate t if the following conditions hold for all i from 1 to n: if\r\nthe i-th letter of the template is , then s_i must be as t_i; if the\r\ni-th letter of the template is , then s_i must be from the of t_i. For\r\nexample, if there is a letter ’A’ in the template, you cannot use the\r\nletter ’a’ in the corresponding position of the string. Accordingly, the\r\nstring doesn’t match the template if the condition doesn’t hold for at\r\nleast one i.Determine whether there exists a template t such that the\r\nstrings a and b match it, while the string c does not.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#ifndef ONLINE_JUDGE\n#include \"debug.h\"  // https://github.com/Heltion/debug.h/blob/main/debug.h\n#else\n#define debug(...) (void)417\n#endif\nusing i64 = int64_t;\nint main() {\n  cin.tie(nullptr)->sync_with_stdio(false);\n  cout << fixed << setprecision(20);\n  int t;\n  cin >> t;\n  for (int ti = 0; ti < t; ti += 1) {\n    int n;\n    string a, b, c;\n    cin >> n >> a >> b >> c;\n    bool ans = false;\n    for (int i = 0; i < n; i += 1) {\n      if (a[i] == b[i] and a[i] != c[i]) { ans = true; }\n      if (a[i] != c[i] and b[i] != c[i]) { ans = true; }\n    }\n    cout << (ans ? \"YES\" : \"NO\") << \"\\n\";\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Tricky Template.json",
    "editorial_link": "https://codeforces.com//blog/entry/124890",
    "editorial": "In order for a string not to match the pattern, there must be at least\r\none position from to where the condition doesnât hold. Letâs iterate\r\nover this position and check if it is possible to pick a letter in the\r\npattern such that and match, while doesnât match. If or equal , then it\r\nis definitely not possible. Since does not match, the equal letter also\r\ndoesnât match. And if both are different from , then it is always\r\npossible to pick the uppercase letter to only prohibit it.Great, now the\r\nstring definitely doesnât match the pattern. Now we should guarantee\r\nthat the strings and match. Complete the template as follows: for all\r\nother positions, we will pick uppercase letters that differ from both\r\nand . Obviously, among letters, there will always be such a\r\nletter.Therefore, the solution is as follows: iterate over the positions\r\nand check that there is at least one where differs from and differs from\r\n. If there is, the answer is \"\". Otherwise, the answer is \"\".Overall\r\ncomplexity: for each testcase.\r\n",
    "hint": []
}