{
    "link": "https://codeforces.com//contest/1612/problem/E",
    "problemId": "1198239",
    "problem_idx": "E",
    "shortId": "1612E",
    "contest_number": "1612",
    "problem_submissions": {
        "F": [
            136454446,
            136443408,
            136448569,
            136447134,
            136456076,
            136455474,
            136456753,
            136447271,
            136463331,
            136457585,
            136451795,
            136455146,
            136466801,
            136458322,
            136466012,
            136470454,
            136470912,
            136437898,
            136449817
        ],
        "G": [
            136441097,
            136445642,
            136443193,
            136435909,
            136444442,
            136447874,
            136444457,
            136453773,
            136451816,
            136466000,
            136464894,
            136468423,
            136436868,
            136467114,
            136451881,
            136455169,
            136439762,
            136431665,
            136483294,
            136433577,
            136448604
        ],
        "E": [
            136432700,
            136437971,
            136478291,
            136437457,
            136451828,
            136439707,
            136440209,
            136458464,
            136439310,
            136440686,
            136441493,
            136444282,
            136445062,
            136445391,
            136571543,
            136452932,
            136447870,
            136444392,
            136446716,
            136451569,
            136449325,
            136458083,
            136453137,
            136438833
        ],
        "D": [
            136427875,
            136432221,
            136431776,
            136429717,
            136432159,
            136428903,
            136429714,
            136434455,
            136434329,
            136431021,
            136438170,
            136439001,
            136445408,
            136437693,
            136436906,
            136425598,
            136443833,
            136454774,
            136454860,
            136431686
        ],
        "C": [
            136427045,
            136429953,
            136429634,
            136424300,
            136429072,
            136425761,
            136426268,
            136430944,
            136430349,
            136427934,
            136434022,
            136430101,
            136430333,
            136432880,
            136433170,
            136439471,
            136433291,
            136452483,
            136456465,
            136428370
        ],
        "B": [
            136424559,
            136426931,
            136427614,
            136426640,
            136425629,
            136432355,
            136424153,
            136427726,
            136427375,
            136424825,
            136429445,
            136426911,
            136426490,
            136429175,
            136430275,
            136436731,
            136428475,
            136450629,
            136459018,
            136425566
        ],
        "A": [
            136423641,
            136423524,
            136423454,
            136423614,
            136423605,
            136434187,
            136423437,
            136423664,
            136423746,
            136423549,
            136423622,
            136423647,
            136423440,
            136424189,
            136425302,
            136430159,
            136424218,
            136448121,
            136459267,
            136423589
        ]
    },
    "name": "E. Messages",
    "statement": "Monocarp is a tutor of a group of n students. He communicates with them\r\nusing a conference in a popular messenger.Today was a busy day for\r\nMonocarp he was asked to forward a lot of posts and announcements to his\r\ngroup, that\u2019s why he had to write a very large number of messages in the\r\nconference. Monocarp knows the students in the group he is tutoring\r\nquite well, so he understands which message should each student read:\r\nMonocarp wants the student i to read the message m_i.Of course, no one\u2019s\r\ngoing to read all the messages in the conference. That\u2019s why Monocarp\r\ndecided to pin some of them. Monocarp can pin any number of messages,\r\nand if he wants anyone to read some message, he should pin it otherwise\r\n.Unfortunately, even if a message is pinned, some students may skip it\r\nanyway. For each student i, Monocarp knows that they will read at most\r\nk_i messages. Suppose Monocarp pins t messages; if t\r\nle k_i, then the i-th student will read all the pinned messages; but if\r\nt > k_i, the i-th student will choose exactly k_i random pinned messages\r\n(all possible subsets of pinned messages of size k_i are equiprobable)\r\nand read only the chosen messages.Monocarp wants to maximize the\r\nexpected number of students that read their respective messages (i.e.\r\nthe number of such indices i that student i reads the message m_i). Help\r\nhim to choose how many (and which) messages should he pin!\r\n",
    "solutions": [
        "// xtqqwq\n#include<bits/stdc++.h>\n\n#define pb push_back\n#define fi first\n#define se second\n#define mp make_pair\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef pair<ll,ll> pll;\ntypedef long double ld;\n\ntemplate <typename T> bool chkmin(T &x,T y){return x>y?x=y,1:0;}\ntemplate <typename T> bool chkmax(T &x,T y){return x<y?x=y,1:0;}\n\nint readint(){\n\tint x=0,f=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\n\nconst int N=200000;\nint n,opt; ll ans1,ans2;\nll x[200005],y[200005];\npii a[200005];\nvector<int> vec;\n\nint main(){\n\tans1=0,ans2=1;\n\tn=readint();\n\tfor(int i=1;i<=n;i++) x[i]=readint(),y[i]=readint();\n\tfor(int i=1;i<=20;i++){\n\t\tfor(int j=1;j<=N;j++) a[j]=mp(0,j);\n\t\tfor(int j=1;j<=n;j++) a[x[j]].fi+=min(y[j],(ll)i);\n\t\tsort(a+1,a+N+1);\n\t\treverse(a+1,a+N+1);\n\t\tll sum=0;\n\t\tfor(int j=1;j<=i;j++) sum+=a[j].fi;\n\t\tif(sum*ans2>ans1*i){\n\t\t\tans1=sum,ans2=i;\n\t\t\tvec.clear();\n\t\t\tfor(int j=1;j<=i;j++) vec.pb(a[j].se);\n\t\t}\n\t}\n\tfor(int j=1;j<=N;j++) a[j]=mp(0,j);\n\tfor(int j=1;j<=n;j++) a[x[j]].fi+=y[j];\n\tsort(a+1,a+N+1);\n\treverse(a+1,a+N+1);\n\tll sum=0;\n\tfor(int j=1;j<=N;j++){\n\t\tsum+=a[j].fi;\n\t\tif(j>20){\n\t\t\tif(sum*ans2>ans1*j){\n\t\t\t\tans1=sum,ans2=j;\n\t\t\t\tvec.clear();\n\t\t\t\topt=j;\n\t\t\t}\n\t\t}\n\t}\n\tif(vec.size()){\n\t\tprintf(\"%d\\n\",vec.size());\n\t\tfor(auto r:vec) printf(\"%d \",r);\n\t\tprintf(\"\\n\");\n\t}\n\telse{\n\t\tprintf(\"%d\\n\",opt);\n\t\tfor(int j=1;j<=opt;j++) printf(\"%d \",a[j].se);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "greedy",
        "probabilities",
        "sortings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Messages.json",
    "editorial_link": "https://codeforces.com//blog/entry/97164",
    "editorial": "First of all, let\u00e2\u0080\u0099s rewrite the answer using expectation linearity. The\r\nexpected number of students who read their respective messages is equal\r\nto , where is a random value which is if the -th student reads the\r\nmessage , and if the -th student doesn\u00e2\u0080\u0099t do it.Let\u00e2\u0080\u0099s analyze the\r\nexpected value of . Suppose Monocarp pins the messages . There are three\r\ncases: if , then the -th student won\u00e2\u0080\u0099t read the message , so ; if and ,\r\nthen the -th student will definitely read the message , so ; if and ,\r\nthen . If we iterate on the number of messages we pin , we can calculate\r\nthe sum of for each message (considering that we pin it), sort all of\r\nthe messages and pick best of them. So, we have a solution working in\r\n.The only thing we need to improve this solution sufficiently is the\r\nfact that we don\u00e2\u0080\u0099t have to consider the case . Since every is not\r\ngreater than , the sum of for a message in the case is the same as this\r\nsum of in the case , but multiplied by the coefficient and we pick best\r\nvalues, their sum multiplied by is not greater than the sum of best\r\nvalues. The same holds for and greater.\r\n"
}