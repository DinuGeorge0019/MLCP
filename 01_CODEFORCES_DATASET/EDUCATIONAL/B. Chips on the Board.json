{"link": "https://codeforces.com//contest/1879/problem/B", "problemId": "2226286", "problem_idx": "B", "shortId": "1879B", "contest_number": "1879", "problem_submissions": {"F": [224937536, 224935202, 224950610, 224926179, 224962842, 224969051, 224930929, 224967422, 224963265, 224966461, 224940572, 224966841, 224954569, 225047271, 224982141, 224973229, 225020484, 225376642, 224974176, 225441069], "E": [224915766, 224914283, 224947954, 224935300, 224927963, 224966463, 224932997, 224929889, 224950618, 224966233, 224954318, 224969484, 224930880, 224920140, 224922897, 224920584, 224928749, 224925724, 224924188, 224933925], "D": [224888044, 224890483, 224896670, 224904072, 224896642, 224898559, 224895640, 224898718, 224909765, 224890763, 224903520, 224917804, 224935485, 224900120, 224899388, 224897270, 224896991, 224895504, 224897180, 224904052], "C": [224883111, 224886635, 224905698, 224893770, 224888377, 224894906, 224886723, 224893779, 224902835, 224885562, 224895691, 224922809, 224940882, 224893191, 224888785, 224888462, 224890469, 224889684, 224903420, 224892974], "B": [224880512, 224883808, 224889537, 224888023, 224883379, 224885924, 224899117, 224885706, 224885740, 224883031, 224886861, 224914364, 224945905, 224884557, 224881988, 224884765, 224884529, 224883777, 224884553, 224888797], "A": [224880000, 224880258, 224880343, 224880667, 224881398, 224880389, 224901703, 224881377, 224880233, 224880172, 224880548, 224906481, 224947822, 224880196, 224880217, 225049284, 224880515, 224880208, 224880388, 224880513, 224881480]}, "name": "B. Chips on the Board", "statement": "You are given a board of size n\r\ntimes n (n rows and n colums) and two arrays of positive integers a and\r\nb of size n.Your task is to place the chips on this board so that the\r\nfollowing condition is satisfied for every cell (i, j): there exists at\r\nleast one chip in the same column or in the same row as the cell (i, j).\r\nI. e. there exists a cell (x, y) such that there is a chip in that cell,\r\nand either x = i or y = j (or both). The cost of putting a chip in the\r\ncell (i, j) is equal to a_i + b_j. For example, for n=3, a=[1, 4, 1] and\r\nb=[3, 2, 2]. One of the possible chip placements is as follows: The\r\ntotal cost of that placement is (1+3) + (1+2) + (1+2) = 10.Calculate the\r\nminimum possible total cost of putting chips according to the rules\r\nabove.\r\n", "solutions": ["#include \"bits/stdc++.h\"\n#pragma GCC optimize (\"O3\")\n#pragma GCC target (\"sse4\")\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n \ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<ld,ld> pd;\n \ntypedef vector<int> vi;\ntypedef vector<ld> vd;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\ntypedef vector<pl> vpl;\ntypedef vector<cd> vcd;\n\ntemplate<class T> using pq = priority_queue<T>;\ntemplate<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;\n \n#define FOR(i, a, b) for (int i=a; i<(b); i++)\n#define F0R(i, a) for (int i=0; i<(a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n#define trav(a,x) for (auto& a : x)\n#define uid(a, b) uniform_int_distribution<int>(a, b)(rng)\n \n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n#define ins insert\n\ntemplate<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\ntemplate<class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\n \nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\nvoid __print(int x) {cerr << x;}\nvoid __print(long x) {cerr << x;}\nvoid __print(long long x) {cerr << x;}\nvoid __print(unsigned x) {cerr << x;}\nvoid __print(unsigned long x) {cerr << x;}\nvoid __print(unsigned long long x) {cerr << x;}\nvoid __print(float x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(long double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\n\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << \", \"; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \", \" : \"\"), __print(i); cerr << \"}\";}\nvoid _print() {cerr << \"]\\n\";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\n#ifdef DEBUG\n#define dbg(x...) cerr << \"\\e[91m\"<<__func__<<\":\"<<__LINE__<<\" [\" << #x << \"] = [\"; _print(x); cerr << \"\\e[39m\" << endl;\n#else\n#define dbg(x...)\n#endif\n\n\nconst int MOD = 1000000007;\nconst char nl = '\\n';\nconst int MX = 100001; \n\nvoid solve() {\n    int N; cin >> N;\n    vl A(N), B(N);\n    F0R(i, N) cin >> A[i];\n    F0R(i, N) cin >> B[i];\n    sort(all(A)); sort(all(B));\n    ll ans1 = B[0] * N, ans2 = A[0] * N;\n    F0R(i, N) {\n        ans1 += A[i];\n        ans2 += B[i];\n    }\n    cout << min(ans1, ans2) << nl;\n\n}\n \nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n\n    int T = 1;\n    cin >> T;\n    while(T--) {\n        solve();\n    }\n\n\treturn 0;\n}\n\n"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy"], "dificulty": "900", "interactive": false}