{
    "link": "https://codeforces.com//contest/702/problem/E",
    "problemId": "66882",
    "problem_idx": "E",
    "shortId": "702E",
    "contest_number": "702",
    "problem_submissions": {
        "E": [
            19486872,
            19487666,
            19486777,
            19488022,
            19488501,
            19486952,
            19489405,
            19490682,
            19489522,
            19488617,
            19490923,
            19486709,
            19522484,
            19490874,
            19489785,
            19489723,
            19491945,
            19490147,
            19488259
        ],
        "D": [
            19485847,
            19522818,
            19484850,
            19484926,
            19486392,
            19486665,
            19485668,
            19486132,
            19485860,
            19486710,
            19487180,
            19486570,
            19489538,
            19522515,
            19522418,
            19486300,
            19487524,
            19487454,
            19488567,
            19487473,
            19486660
        ],
        "C": [
            19483715,
            19483569,
            19483475,
            19484435,
            19484197,
            19484188,
            19484516,
            19484086,
            19484332,
            19484785,
            19484582,
            19484825,
            19522492,
            19484774,
            19485083,
            19485937,
            19486251,
            19485322,
            19485133
        ],
        "B": [
            19482582,
            19482877,
            19482445,
            19483458,
            19483246,
            19482500,
            19483149,
            19482917,
            19482947,
            19483579,
            19483004,
            19483922,
            19522499,
            19483767,
            19483896,
            19483055,
            19484158,
            19483561,
            19484180
        ],
        "A": [
            19482266,
            19482419,
            19482207,
            19482228,
            19482294,
            19482199,
            19482499,
            19482303,
            19482312,
            19482233,
            19482288,
            19482949,
            19522504,
            19482543,
            19482505,
            19484313,
            19482461,
            19482547,
            19482286
        ],
        "F": [
            127799040,
            19527903,
            19529247,
            19529141,
            19523290,
            19514117,
            19501229
        ]
    },
    "name": "E. Analysis of Pathes in Functional Graph",
    "statement": "You are given a . It is a directed graph, in which from each vertex goes\r\nexactly one arc. The vertices are numerated from to .Graph is given as\r\nthe array , where the number of vertex to which goes the only arc from\r\nthe vertex . Besides you are given array with weights of the arcs ,\r\nwhere the arc weight from to . Also you are given the integer (the\r\nlength of the path) and you need to find for each vertex two numbers and\r\n, where: the sum of the weights of all arcs of the path with length\r\nequals to which starts from the vertex ; the minimal weight from all\r\narcs on the path with length which starts from the vertex . The length\r\nof the path is the number of arcs on this path.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef signed long long ll;\n\n#undef _P\n#define _P(...) (void)printf(__VA_ARGS__)\n#define FOR(x,to) for(x=0;x<(to);x++)\n#define FORR(x,arr) for(auto& x:arr)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define ALL(a) (a.begin()),(a.end())\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\n//-------------------------------------------------------\n\nint N;\nll K;\nint F[101010][41];\nll W[101010][41];\nll S[101010][41];\n\nvoid solve() {\n\tint i,j,k,l,r,x,y; string s;\n\t\n\tcin>>N>>K;\n\tFOR(i,N) cin>>F[i][0];\n\tFOR(i,N) cin>>W[i][0], S[i][0]=W[i][0];\n\t\n\tFOR(i,40) {\n\t\tFOR(x,N) F[x][i+1]=F[F[x][i]][i];\n\t\tFOR(x,N) W[x][i+1]=min(W[x][i],W[F[x][i]][i]);\n\t\tFOR(x,N) S[x][i+1]=S[x][i]+S[F[x][i]][i];\n\t}\n\t\n\tFOR(i,N) {\n\t\tll X=K;\n\t\tll mi=1LL<<40;\n\t\tll tot=0;\n\t\tint cur=i;\n\t\tFOR(j,40) if(X&(1LL<<j)) {\n\t\t\tmi=min(mi,W[cur][j]);\n\t\t\ttot+=S[cur][j];\n\t\t\tcur=F[cur][j];\n\t\t}\n\t\tcout<<tot<<\" \"<<mi<<endl;\n\t}\n\t\n\t\n}\n\n\nint main(int argc,char** argv){\n\tstring s;int i;\n\tif(argc==1) ios::sync_with_stdio(false), cin.tie(0);\n\tFOR(i,argc-1) s+=argv[i+1],s+='\\n';\n\tFOR(i,s.size()) ungetc(s[s.size()-1-i],stdin);\n\tsolve(); return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "graphs"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Analysis of Pathes in Functional Graph.json",
    "editorial_link": "https://codeforces.com//blog/entry/46324?locale=en",
    "editorial": "This problem can be solved with help of the binary exponentiation.Let\r\nthe is a structure, which for the vertex store the information about the\r\npath from this vertex with length equals to . The information which we\r\nneed: the number of vertex, in which ends the path with length from the\r\nvertex , the sum of the arcs weights on the path with length from the\r\nvertex , the minimal weight of the arc on the path with length from the\r\nvertex . So if we have this values for all vertices and two fixed values\r\n: and it is easy to find the values for all : , i. e. at first we went\r\nto the vertex , and then with help of the array we can undrstand where\r\nwe will stand in the end of the path; ; . The structures for the values\r\nand are and arrays of the structures, indexed with numbers of the graph\r\nvertices. So we showed that if we have two arrays for and we can get the\r\narray for . The operation which we described above we can call the\r\nmultiply of the arrays, then the needed values can be found with help of\r\nraised values to the power . For make it we can use the binary\r\nexponentiation.Also this problem can be solved with help of \"binary\r\nshifts\", but in fact it is the same thing that we described above.\r\n",
    "hint": []
}