{
    "link": "https://codeforces.com//contest/1251/problem/E1",
    "problemId": "449548",
    "problem_idx": "E1",
    "shortId": "1251E1",
    "contest_number": "1251",
    "problem_submissions": {
        "D": [
            63400316,
            63400298,
            63400254,
            63400203,
            63400050,
            63399984,
            63399855,
            63312403,
            63311940,
            63318990,
            63314573,
            63427346,
            63313882,
            63324960,
            63323872,
            63313008,
            63319425,
            63312837,
            63313209,
            63313402,
            63313713,
            63313403,
            64630107,
            63316214,
            63315539,
            63310152,
            63317232,
            63314816
        ],
        "E2": [
            63399693,
            63399662,
            63399248,
            63399098,
            63398546,
            63365832,
            63365269,
            63364770,
            63338273,
            63317755,
            63314968,
            63314711,
            63319868,
            63427473,
            63323675,
            63322799,
            63317013,
            63330304,
            63326912,
            63315944,
            63319041,
            63319971,
            63319185,
            63322016,
            64630154,
            63319603,
            63323442,
            63321804,
            63320973
        ],
        "F": [
            63396794,
            63395657,
            63340397,
            63340247,
            63322387,
            63331974,
            63347502,
            63345880,
            63325885,
            63328608,
            63427571,
            63333465,
            63330239,
            63311325,
            63320807,
            63332225,
            63349152,
            63349006,
            63348927,
            63346482,
            63354827,
            63555798,
            63396546,
            63361055,
            63321261,
            63339709
        ],
        "C": [
            63339509,
            63309630,
            63308770,
            63309154,
            63311219,
            63425373,
            63310517,
            63308226,
            63320102,
            63309048,
            63314299,
            63306755,
            63309969,
            63308377,
            63311623,
            63309667,
            64630061,
            63312827,
            63308776,
            63307614,
            63311843,
            63311519
        ],
        "E1": [
            63317840,
            63315090,
            63315149,
            63319942,
            63427459,
            63323582,
            63322914,
            63316888,
            63330357,
            63326985,
            63315977,
            63318948,
            63319867,
            63319014,
            63322137,
            64630159,
            63319793,
            63323604,
            63329086,
            63321906,
            63320849
        ],
        "B": [
            63308319,
            63306252,
            63306938,
            63308521,
            63425306,
            63309307,
            63306115,
            63321613,
            63306650,
            63307802,
            63305211,
            63307273,
            63305885,
            63310074,
            63307855,
            64630021,
            63308550,
            63306496,
            63305718,
            63309015,
            63308105
        ],
        "A": [
            63304668,
            63304379,
            63304115,
            63305872,
            63425273,
            63304642,
            63304137,
            63319299,
            63304384,
            63304697,
            63304218,
            63304454,
            63304321,
            63307231,
            63304364,
            64629970,
            63304438,
            63304343,
            63304369,
            63305312,
            63306229
        ]
    },
    "name": "E1. Voting  Easy Version ",
    "statement": "Now elections are held in Berland and you want to win them. More\r\nprecisely, you want everyone to vote for you.There are n voters, and two\r\nways to convince each of them to vote for you. The first way to convince\r\nthe i-th voter is to pay him p_i coins. The second way is to make m_i\r\nother voters vote for you, and the i-th voter will vote for\r\nfree.Moreover, the process of such voting takes place in several steps.\r\nFor example, if there are five voters with m_1 = 1, m_2 = 2, m_3 = 2,\r\nm_4 = 4, m_5 = 5, then you can buy the vote of the fifth voter, and\r\neventually everyone will vote for you. Set of people voting for you will\r\nchange as follows: {5}\r\nrightarrow {1, 5}\r\nrightarrow {1, 2, 3, 5}\r\nrightarrow {1, 2, 3, 4, 5}.Calculate the minimum number of coins you\r\nhave to spend so that everyone votes for you.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int INF = 1e9 + 5;\nconst long long LL_INF = (long long) 2e18 + 5;\n\nstruct voter {\n    int M, P;\n\n    bool operator<(const voter &other) const {\n        return M < other.M;\n    }\n};\n\nint N;\nvector<voter> voters;\n\nlong long evaluate(int buy) {\n    int index = 0;\n    priority_queue<int> pq;\n\n    for (int position = buy; position < N; position++) {\n        while (index < N && voters[index].M <= position)\n            pq.push(voters[index++].P);\n\n        if (pq.empty())\n            return LL_INF - buy;\n\n        pq.pop();\n    }\n\n    while (index < N)\n        pq.push(voters[index++].P);\n\n    long long sum = 0;\n\n    while (!pq.empty()) {\n        sum += pq.top();\n        pq.pop();\n    }\n\n    return sum;\n}\n\nvoid solve_case() {\n    cin >> N;\n    voters.resize(N);\n\n    for (voter &v : voters)\n        cin >> v.M >> v.P;\n\n    sort(voters.begin(), voters.end());\n    int low = 0, high = N;\n\n    while (low < high) {\n        int mid = (low + high) / 2;\n\n        if (evaluate(mid) < evaluate(mid + 1))\n            high = mid;\n        else\n            low = mid + 1;\n    }\n\n    cout << evaluate(low) << '\\n';\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int T;\n    cin >> T;\n\n    while (T-- > 0)\n        solve_case();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "greedy"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E1. Voting  Easy Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/70860",
    "editorial": "Denote the number of voters with as . Also denote , i.e. is equal to\r\nnumber of voters with .Letâs group all voters by value . Weâll consider\r\nall these group in decreasing value of . Assume that now we consider\r\ngroup with . Then there are two cases: if then all these voters will\r\nvote for you for free. is equal to the number of votes bought in\r\nprevious steps; if then we have to buy additional votes. Moreover the\r\nvalue of this \"bought\" voter must be greater than or equal to . Since\r\nthese voters indistinguishable we have to buy cheapest voter (with a\r\nminimal value of ). So, all we have to do it maintain values not yet\r\nbought voters in some data structure (for example in ).\r\n",
    "hint": []
}