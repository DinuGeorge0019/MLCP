{
    "link": "https://codeforces.com//contest/1082/problem/F",
    "problemId": "64168",
    "problem_idx": "F",
    "shortId": "1082F",
    "contest_number": "1082",
    "problem_submissions": {
        "F": [
            46328946,
            46337799,
            46339884,
            46346150,
            46445422,
            46359069,
            46431759,
            46637242,
            46637151,
            46325175,
            46338896,
            46409182
        ],
        "G": [
            46323996,
            46323275,
            46334802,
            46323141,
            46326108,
            46329586,
            46321808,
            163694400,
            163693799,
            46332091,
            46330084,
            46336228,
            46329478,
            46334035,
            46334852,
            46340605,
            46341989,
            46332446,
            46341097,
            46318296,
            46328921,
            46335428
        ],
        "E": [
            46318513,
            46330600,
            46328796,
            46321883,
            46324879,
            46325643,
            46324793,
            46322771,
            46328316,
            46332015,
            46327943,
            46323542,
            46327890,
            46325362,
            46330431,
            46320019,
            46338363,
            46322189,
            46331138
        ],
        "D": [
            46316454,
            46320831,
            46325078,
            46317954,
            46322179,
            46323264,
            46336380,
            46328840,
            46322602,
            46323491,
            46324308,
            46330072,
            46325620,
            46329576,
            46325051,
            46330163,
            46325538,
            46319965,
            46324331
        ],
        "C": [
            46314364,
            46317118,
            46317698,
            46315803,
            46318057,
            46319400,
            46316833,
            46317944,
            46317349,
            46317946,
            46320711,
            46318098,
            46319780,
            46320328,
            46319548,
            46328045,
            46319609,
            46315734,
            46318281
        ],
        "B": [
            46313723,
            46315264,
            46315248,
            46314114,
            46315542,
            46315654,
            46315306,
            46315753,
            46315155,
            46315310,
            46317088,
            46316030,
            46316402,
            46316343,
            46315252,
            46358458,
            46314954,
            46314579,
            46315821
        ],
        "A": [
            46313553,
            46313861,
            46313655,
            46313685,
            46313732,
            46313657,
            46313638,
            46313650,
            46313676,
            46313977,
            46315097,
            46313735,
            46314264,
            46315003,
            46313777,
            46326534,
            46313605,
            46313586,
            46314557
        ]
    },
    "name": "F. Speed Dial",
    "statement": "Polycarp\u2019s phone book contains n phone numbers, each of them is\r\ndescribed by s_i the number itself and m_i the number of times Polycarp\r\ndials it in daily.Polycarp has just bought a brand new phone with an\r\namazing feature! More precisely, k buttons on it can have a number\r\nassigned to it (not necessary from the phone book). To enter some number\r\nPolycarp can press one of these k buttons and then finish the number\r\nusing usual digit buttons (entering a number with only digit buttons is\r\nalso possible). button can only be used when no digits are entered. No\r\nbutton can have its number reassigned.What is the minimal total number\r\nof Polycarp can achieve after he assigns numbers to buttons and enters\r\neach of the numbers from his phone book the given number of times in an\r\noptimal way?\r\n",
    "solutions": [
        "/*\nShe came from the past\nShe was never meant to last\nHer destiny was fatal\nFrom the start\nA messenger from hell\nShe cast a deadly spell\nOn all of those who dare\nTo cross her heart\nAin't no use in you trying to run\nFate has taken it's toll\nJust one look and the damage is done\nBurn your eyes\nTurn your heart into stone\nHistory foretold of a circle\nCast in gold\nAn evil seed of power\nSealed within\nBut fate has lent a hand\nDestroyed the golden band\nAnd freed her soul\nTo wash the land with sin\nAin't no use in you trying to run\nFate has taken it's toll\nJust one look and the damage is done\nBurn your eyes\nTurn your heart into stone\nShe cast a deadly spell\nShe put a spell on you\nShe's got evil in her heart\nTurn your heart into stone\nTurn your heart into stone\n*/\n\n#pragma GCC optimize(\"O3\")\n#define _CRT_SECURE_NO_WARNINGS\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <complex>\n#include <math.h>\n#include <set>\n#include <vector>\n#include <map>\n#include <queue>\n#include <stdio.h>\n#include <stack>\n#include <algorithm>\n#include <list>\n#include <ctime>\n\n#include <memory.h>\n#include <assert.h>\n\n#define y0 sdkfaslhagaklsldk\n\n#define y1 aasdfasdfasdf\n#define yn askfhwqriuperikldjk\n#define j1 assdgsdgasghsf\n#define tm sdfjahlfasfh\n#define lr asgasgash\n#define norm asdfasdgasdgsd\n#define have adsgagshdshfhds\n#define ends asdgahhfdsfshdshfd\n#define prev asdgSHJsfgsdfhdsh\n#define hash asdgasdgasdgdfrywewery\n\n#define eps 1e-8\n#define M_PI 3.141592653589793\n#define bsize 512\n\n#define ldouble long double\nusing namespace std;\n\n#define bs 1000000007\n\nconst int N = 600031;\n\nint n,k;\nstring st;\nint am;\nint total_size;\n\nint done[531][531][11],knap[531][531][11];\nvector<int> g[531];\nint memo[531][531][11];\nint subsize[N];\n\nint have[531][11];\nint C;\nint dep[N];\n\nint solve(int v,int dep_above,int to_put){\n\n\t//cout<<v<<\" \"<<dep_above<<\" \"<<to_put<<endl;\n\n\tif (done[v][dep_above][to_put])\n\t\treturn memo[v][dep_above][to_put];\n\tdone[v][dep_above][to_put]=1;\n\n\tfor (int i=0;i<=g[v].size();i++){\n\t\tfor (int j=0;j<=to_put;j++){\n\t\t\tknap[v][i][j]=-1e9;\n\t\t}\n\t}\n\tknap[v][0][0]=0;\n\tfor (int i=0;i<g[v].size();i++){\n\t\tint to=g[v][i];\n\t\tfor (int already=0;already<=to_put;already++){\n\t\t\tfor (int here=0;here+already<=to_put;here++){\n\t\t\t\tfor (int in_root=0;in_root<=1;in_root++){\n\t\t\t\t\tint saved=knap[v][i][already];\n\t\t\t\t\tif (in_root)\n\t\t\t\t\t\tsaved+=subsize[to]*(dep[to]-dep_above);\n\t\t\t\t\tif (in_root==1&&here==0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (in_root==1)\n\t\t\t\t\t\tsaved+=solve(to,dep[to],here-1);\n\t\t\t\t\telse\n\t\t\t\t\t\tsaved+=solve(to,dep_above,here);\n\t\t\t\t\tknap[v][i+1][already+here]=max(knap[v][i+1][already+here],saved);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i=0;i<=to_put;i++)\n\t\tmemo[v][dep_above][to_put]=max(memo[v][dep_above][to_put],knap[v][g[v].size()][i]);\n\treturn memo[v][dep_above][to_put];\n}\n\nvoid add(string st,int am){\n\tint ptr=0;\n\tfor (int i=0;i<st.size();i++){\n\t\tint here=st[i]-'0';\n\t\tif (have[ptr][here]==0){\n\t\t\t++C;\n\t\t\thave[ptr][here]=C;\n\t\t\tg[ptr].push_back(C);\n\t\t\tdep[C]=dep[ptr]+1;\n\t\t}\n\t\tptr=have[ptr][here];\n\t\tsubsize[ptr]+=am;\n\t}\n}\n\nint main(){\n//\tfreopen(\"apache.in\",\"r\",stdin);\n//\tfreopen(\"apache.out\",\"w\",stdout);\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\tios_base::sync_with_stdio(0);\n\t//cin.tie(0);\n\n\tcin>>n>>k;\n\n\tfor (int i=1;i<=n;i++){\n\t\tcin>>st;\n\t\tcin>>am;\n\t\tadd(st,am);\n\t\ttotal_size+=st.size()*am;\n\t}\n\n\tint res=solve(0,0,k);\n\tcout<<total_size-res<<endl;\n\n//\tcin.get(); cin.get();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "strings",
        "trees"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Speed Dial.json",
    "editorial_link": "https://codeforces.com/blog/entry/63544",
    "editorial": "The first thing to come to one\u00e2\u0080\u0099s mind is dynamic programming on a trie.\r\nThe most naive of the solutions take , where is the total length of\r\nstrings.I\u00e2\u0080\u0099ll introduce the faster approach.Let be the solution for\r\nsubtree of the vertex with buttons remaining and is the closest ancestor\r\nvertex with the button used in it.This dp will be recalced via the other\r\ndp.Let be the same thing as but only first children of is taken into\r\nconsideration and doesn\u00e2\u0080\u0099t have a button in it.Give buttons to the\r\ncurrent child, then update with + . will then have two options: for\r\nhaving button in it and for not having button in it. has transitions and\r\nstates. has total transitions and also states.\r\n"
}