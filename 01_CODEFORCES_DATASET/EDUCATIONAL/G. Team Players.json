{
    "link": "https://codeforces.com//contest/985/problem/G",
    "problemId": "184588",
    "problem_idx": "G",
    "shortId": "985G",
    "contest_number": "985",
    "problem_submissions": {
        "G": [
            38542149,
            38512186,
            38512236,
            38513581,
            38508155,
            38634852,
            38634344,
            38634277,
            38515048
        ],
        "F": [
            38499146,
            38499001,
            38501533,
            38502149,
            44969812,
            38501168,
            38505525,
            38502880,
            38530512,
            38499950,
            38499753,
            38505154,
            38503491,
            38504126,
            38510981,
            38505877,
            38504312,
            38507584,
            38509250,
            38506993,
            38507253
        ],
        "E": [
            38493702,
            38497357,
            38497944,
            38499266,
            38496305,
            38496738,
            38500977,
            38502378,
            38496622,
            38497691,
            38498718,
            38497100,
            38498488,
            38496555,
            38502188,
            38501286,
            38496578,
            38488837,
            38503513,
            38500067,
            38501389
        ],
        "D": [
            38491674,
            38495666,
            38493742,
            38495486,
            38495900,
            38495531,
            38494634,
            38495573,
            38493765,
            38502434,
            38497951,
            38500032,
            38496113,
            38498092
        ],
        "C": [
            38489266,
            38490508,
            38491062,
            38490764,
            38489327,
            38492089,
            38489607,
            38491317,
            38489050,
            38492258,
            38493205,
            38490810,
            38490379,
            38491131,
            38492401,
            38495949,
            38492200,
            38493338,
            38495062
        ],
        "B": [
            38486666,
            38488118,
            38487524,
            38488045,
            38487258,
            38487260,
            38487379,
            38487785,
            38486818,
            38488660,
            38487046,
            38487281,
            38487622,
            38487410,
            38487870,
            38578001,
            38491648,
            38488972,
            38488613,
            38488764
        ],
        "A": [
            38486349,
            38486599,
            38486409,
            38487064,
            38486426,
            38486427,
            38486493,
            38486415,
            38486362,
            38487242,
            38486378,
            38489634,
            38486554,
            38486364,
            38486402,
            38577942,
            38487704,
            38486613,
            38486447,
            38487421
        ]
    },
    "name": "G. Team Players",
    "statement": "There are n players numbered from 0 to n-1 with ranks. The i-th player\r\nhas rank i.Players can form teams: the team should consist of three\r\nplayers and of players in the team should have a conflict. The rank of\r\nthe team is calculated using the following algorithm: let i, j, k be the\r\nranks of players in the team and i < j < k, then the rank of the team is\r\nequal to A\r\ncdot i + B\r\ncdot j + C\r\ncdot k.You are given information about the pairs of players who a\r\nconflict. Calculate the total sum of ranks over all possible valid teams\r\nmodulo 2^{64}.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n\ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<ld,ld> pd;\n\ntypedef vector<int> vi;\ntypedef vector<ld> vd;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\ntypedef vector<pl> vpl;\ntypedef vector<cd> vcd;\n\ntemplate <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;\n\n#define FOR(i, a, b) for (int i=a; i<(b); i++)\n#define F0R(i, a) for (int i=0; i<(a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n\nconst int MOD = 1000000007;\nconst ll INF = 1e18;\nconst int MX = 200001;\n\ntypedef unsigned long long ul;\n\nul N,M,A,B,C,ans;\nvi adj[MX];\nvector<bitset<MX>> has;\nint key[MX];\nvpi ed;\n\nvoid solve0() {\n    F0R(i,N) {\n        ans += A*(N-1-i)*(N-2-i)/2*i;\n        ans += B*i*(N-1-i)*i;\n        ans += C*i*(i-1)/2*i;\n    }\n}\n\nvoid solve1() {\n    F0R(i,N) for (int j: adj[i]) if (i < j) {\n        ans -= A*(i-1)*i/2+B*i*i+C*j*i;\n        ans -= A*(j-i-1)*i+B*(i+j)*(j-i-1)/2+C*j*(j-i-1);\n        ans -= A*(N-1-j)*i+B*(N-1-j)*j+C*(N-1-j)*(N+j)/2;\n        // [i+1,j-1]\n        // [j+1,n-1]\n    }\n}\n\nvoid solve2() {\n    F0R(i,N) {\n        vi v0, v1;\n        for (int j: adj[i]) {\n            if (j < i) v0.pb(j);\n            else v1.pb(j);\n        }\n        sort(all(v0)), sort(all(v1));\n        ans += C*sz(v0)*(sz(v0)-1)/2*i;\n        F0R(j,sz(v0)) {\n            ans += B*j*v0[j];\n            ans += A*(sz(v0)-1-j)*v0[j];\n        }\n        // do stuff\n        ans += A*sz(v1)*(sz(v1)-1)/2*i;\n        F0R(j,sz(v1)) {\n            ans += C*j*v1[j];\n            ans += B*(sz(v1)-1-j)*v1[j];\n        }\n        \n        for (int j: v0) ans += A*j*sz(v1);\n        for (int j: v1) ans += C*j*sz(v0);\n        ans += B*sz(v0)*sz(v1)*i;\n    }\n}\n\nul eval(int a, int b, int c) {\n    if (a > c) swap(a,c);\n    if (a > b) swap(a,b);\n    if (b > c) swap(b,c);\n    return A*a+B*b+C*c;\n}\n\nbitset<MX> curhas;\n\nvoid solve3() {\n    F0R(i,N) {\n        if (sz(adj[i])*sz(adj[i]) >= N) {\n            key[i] = sz(has);\n            has.pb(bitset<MX>());\n            \n            int K = key[i];\n            for (int j: adj[i]) has[K][j] = 1;\n            for (auto a: ed) if (a.s < i && has[K][a.f] && has[K][a.s]) ans -= eval(a.f,a.s,i);\n        } else {\n            sort(adj[i].rbegin(),adj[i].rend());\n            for (int j: adj[i]) if (j < i) {\n                if (sz(adj[j])*sz(adj[j]) >= N) {\n                    for (int k: adj[i]) if (k < j && has[key[j]][k]) ans -= eval(j,k,i);\n                } else {\n                    for (int k: adj[j])  curhas[k] = 1;\n                    for (int k: adj[i]) if (k < j && curhas[k]) ans -= eval(j,k,i);\n                    for (int k: adj[j])  curhas[k] = 0;\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    cin >> N >> M >> A >> B >> C;\n    F0R(i,M) {\n        int u, v; cin >> u >> v;\n        if (u > v) swap(u,v);\n        adj[u].pb(v), adj[v].pb(u);\n        ed.pb({u,v});\n    }\n    // N = 500;\n    solve0();\n    solve1();\n    solve2();\n    solve3();\n    cout << ans;\n}\n\n// read the question correctly (is y a vowel? what are the exact constraints?)\n// look out for SPECIAL CASES (n=1?) and overflow (ll vs int?)"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\G. Team Players.json",
    "editorial_link": "https://codeforces.com//blog/entry/59623",
    "editorial": "Let\u00e2\u0080\u0099s solve this task in several steps.At first, let\u00e2\u0080\u0099s calculate sum of\r\nall triples. For each player consider three cases: there are exactly\r\nways to choose triple; there are ways; there are ways. At second, let\u00e2\u0080\u0099s\r\ncalculate sum over all triples such that exists pair or . To calculate\r\nit we need for each iterate over all neighbors of . Again some cases: if\r\nthen there are exactly ways to choose ; if , there are ways to choose .\r\nBut we calculated some triples twice, so we need to subtract triples\r\nwhere both and exists. It is easy to calculate sorting adjacency lists\r\nof all .At third, let\u00e2\u0080\u0099s calculate sum over all triple where exists pair\r\n, but pairs and are not. . is a sum of all triples where pair exists. It\r\ncan be calculated while iterating in increasing order. is a sum of all\r\ntriples where pairs and exists. It can be calculated while iterating and\r\nasking sum on segment of adjacency list of ( with prefix sums for each\r\nvertex ). is a sum of all triples where pairs and exists. It can be\r\ncalculated while iterating and asking sum on prefix of adjacency list of\r\n(same ). is a sum of all triples where all pairs , and exists. It is\r\nmodification of calculating number of triangles in graph. It can be done\r\nin and will be explained below. Then result .The algorithm of finding in\r\nthe given graph is following:Let\u00e2\u0080\u0099s call vertex if and otherwise. For\r\neach heavy vertex precalculate boolean array of adjacency of vertex .\r\nIt\u00e2\u0080\u0099s cost of memory and time but memory can be reduced by using\r\nbitsets.To calculate number of triangles let\u00e2\u0080\u0099s iterate over . There are\r\ntwo cases: if is heavy, then just iterate over all edges and check and .\r\nThis part works with time since there are heavy vertices. if is light,\r\nthen iterate over all pair , where (at first fix , then iterate ). To\r\ncheck existence of edge consider two more cases: if is heavy, just check\r\n. It works in . if is light, just check in some global array all\r\nneighbors of , check all with and uncheck neighbors of . Checking in\r\narray require time and will be done times. So it will be in total.\r\nSimilarly, iterating pairs works with in total. So comlexity of\r\nalgorithm and all task is .\r\n"
}