{
    "link": "https://codeforces.com//contest/1398/problem/F",
    "problemId": "699506",
    "problem_idx": "F",
    "shortId": "1398F",
    "contest_number": "1398",
    "problem_submissions": {
        "G": [
            89915963,
            89919649,
            89969541,
            89969478,
            89969399,
            89923373,
            89932796,
            89925690,
            89932477,
            89942517,
            89940456,
            89939176,
            89934894,
            89934457,
            89937693,
            89934633,
            89938319,
            89937371,
            89998747,
            89998438,
            89941918,
            89943420,
            89938418,
            89962347,
            89937826,
            91732579,
            91721537,
            91721531,
            91720040,
            91720007,
            91719903,
            89956129,
            89955780,
            89942074,
            89938585,
            89944168
        ],
        "F": [
            89912067,
            89913917,
            89970425,
            89946897,
            89910497,
            89907909,
            89921580,
            89925827,
            89926930,
            89927249,
            89928492,
            89920424,
            90033370,
            89917113,
            89932855,
            89933064,
            89929161,
            89924362,
            89920121,
            89940340,
            89933347,
            89929042
        ],
        "E": [
            89905047,
            89908543,
            89968389,
            89916074,
            89918608,
            89913134,
            89918941,
            89911745,
            89920728,
            89917154,
            89930653,
            89930795,
            89916495,
            89920330,
            89922316,
            89913338,
            89912908,
            89934884,
            89919511,
            89915904
        ],
        "D": [
            89896202,
            89894262,
            89927478,
            89895466,
            89894434,
            89904634,
            89907380,
            89898375,
            89898000,
            89898904,
            89895538,
            89900457,
            89898646,
            89893142,
            89905486,
            89900465,
            89900312,
            89902255,
            89897637
        ],
        "C": [
            89885830,
            89883985,
            89884334,
            89886727,
            89888686,
            89890331,
            89887777,
            89891076,
            89887912,
            89887655,
            89893333,
            89888198,
            89884415,
            89891205,
            89886744,
            89888315,
            89893476,
            89886675
        ],
        "B": [
            89882536,
            89880929,
            89882045,
            89882783,
            89885320,
            89885640,
            89884725,
            89881741,
            89883376,
            89882325,
            89890179,
            89884220,
            89880525,
            89887877,
            89881688,
            89882767,
            89889537,
            89882098
        ],
        "A": [
            89878857,
            89878683,
            89924676,
            89879194,
            89878701,
            89878764,
            89880470,
            89880388,
            89879912,
            89878682,
            89878924,
            89878750,
            89886185,
            89879017,
            89878663,
            89880890,
            89878758,
            89878853,
            89884879,
            89878791
        ]
    },
    "name": "F. Controversial Rounds",
    "statement": "Alice and Bob play a game. The game consists of several sets, and each\r\nset consists of several rounds. Each round is won either by Alice or by\r\nBob, and the set ends when one of the players has won x rounds in a row.\r\nFor example, if Bob won five rounds in a row and x = 2, then two sets\r\nends.You know that Alice and Bob have already played n rounds, and you\r\nknow the results of some rounds. For each x from 1 to n, calculate the\r\nmaximum possible number of sets that could have already finished if each\r\nset lasts until one of the players wins x rounds in a row. It is\r\npossible that the last set is still not finished in that case, you\r\nshould not count it in the answer.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__);fflush(stderr);\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int N = (int)1e6 + 7;\nchar s[N];\nint lst[2];\nint a[N];\nint nxt[N];\nint n;\npii ord[N];\n\nint getNext(int p) {\n\treturn nxt[p] == p ? p : nxt[p] = getNext(nxt[p]);\n}\nvoid turnOn(int p) {\n\tnxt[p] = p + 1;\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d\", &n);\n\tscanf(\"%s\", s);\n\tlst[0] = lst[1] = n;\n\tfor (int i = n - 1; i >= 0; i--) {\n\t\tif (s[i] != '?')\n\t\t\tlst[(int)(s[i] - '0')] = i;\n\t\ta[i] = max(lst[0], lst[1]) - i;\n\t\tord[i] = mp(a[i], i);\n\t}\n\t/*\n\tfor (int i = 0; i < n; i++)\n\t\teprintf(\"%d \", a[i]);\n\teprintf(\"\\n\");\n\t*/\n\tfor (int i = 0; i < n; i++)\n\t\tnxt[i] = i;\n\tnxt[n] = n;\n\tsort(ord, ord + n);\n\tint l = 0;\n\tfor (int k = 1; k <= n; k++) {\n\t\twhile(l < n && ord[l].first < k) {\n\t\t\tturnOn(ord[l].second);\n\t\t\tl++;\n\t\t}\n\t\tint ans = 0;\n\t\tint p = 0;\n\t\twhile(p < n) {\n\t\t\tp = getNext(p);\n\t\t\tif (p == n) break;\n\t\t\tans++;\n\t\t\tp += k;\n\t\t}\n\t\tprintf(\"%d \", ans);\n\t}\n\tprintf(\"\\n\");\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "dp",
        "greedy",
        "two pointers"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Controversial Rounds.json",
    "editorial_link": "https://codeforces.com//blog/entry/81506",
    "editorial": "Letâs consider the following function : minimum index such that there is\r\na substring of string of length consisting of only characters and or and\r\n. If this function has asymptotic then we can solve problem for .Now,\r\nletâs precalculate two array and ; is equal the maximum integer such\r\nthat substring consist only characters and . is equal the maximum\r\ninteger such that substring consist only characters and . Also letâs\r\nprecalculate the arrays and of size ; contain all positions such that\r\nsubstring consist only characters and and or ; contain all positions\r\nsuch that substring consist only characters and and or . After that\r\nletâs solve problem for some . Suppose, that now we already processed\r\nfirst elements of . If or then we increase the answer and change .\r\nOtherwise we have to find the minimum element (denote this element as )\r\nin or such that . If there is no such element then we found the final\r\nanswer . Otherwise letâs increase answer and change and continue this\r\nalgorithm.\r\n",
    "hint": []
}