{
    "link": "https://codeforces.com//contest/990/problem/C",
    "problemId": "188992",
    "problem_idx": "C",
    "shortId": "990C",
    "contest_number": "990",
    "problem_submissions": {
        "F": [
            39110066,
            39104822,
            39113275,
            39114587,
            39116563,
            39116347,
            39108471,
            39110743,
            39112419,
            39112294,
            39108515,
            39111997,
            39116686,
            39101868,
            39116200,
            39118004,
            39116805
        ],
        "G": [
            39103567,
            39107402,
            39106809,
            39106218,
            39109082,
            39109620,
            39112690,
            39099088,
            39107571,
            39107687,
            39101902,
            39093184,
            39110367,
            39109522,
            39104630,
            39111664,
            39109028,
            39108412,
            39110999,
            39098996,
            39104033,
            39110989
        ],
        "E": [
            39100436,
            39099837,
            39102349,
            39105427,
            39103107,
            39102633,
            39102885,
            39108880,
            39105761,
            39109203,
            39112620,
            39094389,
            39105905,
            39112883,
            39105943,
            39113374,
            39104376,
            39107310,
            39113606,
            39104223
        ],
        "D": [
            39097266,
            39096033,
            39098379,
            39099218,
            39098520,
            39098083,
            39096052,
            39105736,
            39099850,
            39105515,
            39109276,
            39104646,
            39099923,
            39115103,
            39100668,
            39103321,
            39099280,
            39102959,
            39097613,
            39097717
        ],
        "C": [
            39093177,
            39093378,
            39093798,
            39094808,
            39094793,
            39094824,
            39092448,
            39093937,
            39096177,
            39100038,
            39095064,
            39091685,
            39095797,
            39094884,
            39094704,
            39096565,
            39094721,
            39095152,
            39094603,
            39094594
        ],
        "B": [
            39090464,
            39091292,
            39090459,
            39091170,
            39091740,
            39091855,
            39090681,
            39099050,
            39093555,
            39099346,
            39098193,
            39090407,
            39092627,
            39091505,
            39092737,
            39092039,
            39090632,
            39091613,
            39090743,
            39091072
        ],
        "A": [
            39088999,
            39088905,
            39088870,
            39088899,
            39089924,
            39089350,
            39089008,
            39089597,
            39089600,
            39090391,
            39090409,
            39089125,
            39089740,
            39090714,
            39089522,
            39088868,
            39088892,
            39089011,
            39089148
        ]
    },
    "name": "C. Bracket Sequences Concatenation Problem",
    "statement": "A bracket sequence is a string containing only characters \"(\" and \")\".A\r\nregular bracket sequence is a bracket sequence that can be transformed\r\ninto a correct arithmetic expression by inserting characters \"1\" and \"+\"\r\nbetween the original characters of the sequence. For example, bracket\r\nsequences \"()()\", \"(())\" are regular (the resulting expressions are:\r\n\"(1)+(1)\", \"((1+1)+1)\"), and \")(\" and \"(\" are not.You are given n\r\nbracket sequences s_1, s_2,\r\ndots , s_n. Calculate the number of pairs i, j\r\n, (1\r\nle i, j\r\nle n) such that the bracket sequence s_i + s_j is a regular bracket\r\nsequence. Operation + means concatenation i.e. \"()(\" + \")()\" =\r\n\"()()()\".If s_i + s_j and s_j + s_i are regular bracket sequences and i\r\nne j, then both pairs (i, j) and (j, i) must be counted in the answer.\r\nAlso, if s_i + s_i is a regular bracket sequence, the pair (i, i) must\r\nbe counted in the answer.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\nconst int Maxn = 800015;\nconst int nil = 400005;\n\nchar tmp[Maxn];\nint n;\nint st[Maxn], mn[Maxn];\nvector <int> V[Maxn];\nll res;\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%s\", tmp); int tlen = strlen(tmp);\n\t\tmn[i] = Maxn;\n\t\tfor (int j = 0; j < tlen; j++) {\n\t\t\tif (tmp[j] == '(') st[i]++;\n\t\t\telse st[i]--;\n\t\t\tmn[i] = min(mn[i], st[i]);\n\t\t}\n\t\tV[st[i] + nil].push_back(mn[i]);\n\t}\n\tfor (int i = 0; i < Maxn; i++) if (V[i].size())\n\t\tsort(V[i].begin(), V[i].end());\n\tfor (int i = 0; i < n; i++) if (mn[i] >= 0) {\n\t\tint ost = nil - st[i];\n\t\tint add = V[ost].end() - lower_bound(V[ost].begin(), V[ost].end(), -st[i]);\n\t\tres += add;\n\t}\n\tcout << res << endl;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Bracket Sequences Concatenation Problem.json",
    "editorial_link": "https://codeforces.com//blog/entry/59962",
    "editorial": "Let be the mirror reflection of the string . For example: (\"((\") = \"))\",\r\n(\"))(\") = \")((\", (\"()\") = \"()\".Let string be good if it does not have a\r\nprefix, which have more closing brackets than opening ones. For example,\r\n\"((\", \"(())(\", \"()()\" are good, and \"())\", \")((\", \"()())\" are not.The\r\nbalance of the string is the difference between number of opening and\r\nclosing brackets in . For example, (\"(()\") = 1, (\"()\") = 0.Let be the\r\nnumber of good strings with a balance .The answer to the problem is .\r\n"
}