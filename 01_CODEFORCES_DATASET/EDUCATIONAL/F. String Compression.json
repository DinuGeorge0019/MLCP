{"link": "https://codeforces.com//contest/825/problem/F", "problemId": "114549", "problem_idx": "F", "shortId": "825F", "contest_number": "825", "problem_submissions": {"G": [28611826, 28611356, 28617070, 28630000, 28611377, 28668357, 28644356, 28617410, 28616887, 115447701, 28617449], "F": [28607801, 28609631, 28607347, 28609116, 28609094, 28607614, 28608923, 28607754, 28610528, 28609319, 28614043, 28612882, 28614726, 28613035, 28614128, 28617246, 28608834], "E": [28606236, 28612183, 28603943, 28604761, 28605629, 28605699, 28621023, 28620710, 28614410, 28606910, 28606445, 28612588, 28606404, 28608319, 28610978, 28607253, 28602716, 28604390, 28605864], "D": [28601870, 28604440, 28602315, 28603224, 28602271, 28603578, 28602162, 28602307, 28605123, 28604422, 28602824, 28605475, 28605112, 28601966, 28604848, 28601067, 28602879, 28603271, 28602582], "C": [28600566, 28604558, 28600573, 28601511, 28601329, 28600992, 28600584, 28601117, 28602961, 28602487, 28601481, 28603635, 28602536, 28600048, 28601839, 28599960, 28601178, 28600725, 28600385], "B": [28599824, 28602822, 28599867, 28599843, 28600338, 28600036, 28599560, 28600486, 28599738, 28600276, 28600463, 28602528, 28601519, 28610253, 28599911, 28599338, 28600292, 28600011, 28599745], "A": [28598954, 28602676, 28599093, 28599010, 28599148, 28598936, 28599534, 28599292, 28599020, 28598945, 28599332, 28601537, 28599412, 28598882, 28598949, 28598917, 28599099, 28599150, 28598894]}, "name": "F. String Compression", "statement": "Ivan wants to write a letter to his friend. The letter is a string\r\nconsisting of lowercase Latin letters.Unfortunately, when Ivan started\r\nwriting the letter, he realised that it is very long and writing the\r\nwhole letter may take extremely long time. So he wants to write the of\r\nstring instead of the string itself.The of string is a sequence of\r\nstrings , where is the decimal representation of number (without any\r\nleading zeroes) and is some string consisting of lowercase Latin\r\nletters. If Ivan writes string exactly times, then string exactly times,\r\nand so on, the result will be string .The length of a is . Among all\r\nIvan wants to choose a version such that its length is minimum possible.\r\nHelp Ivan to determine minimum possible length.\r\n", "solutions": ["#ifdef __GNUC__\n#pragma GCC target(\"sse4,avx\")\n#endif\n#include <immintrin.h>\n#include <algorithm>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <cstdint>\n#include <numeric>\n\nstd::vector<int> getSelfPi(const std::string& s, int pos) {\n    size_t n = s.length() - pos;\n    std::vector<int> res(n);\n    size_t cur = 0;\n    for (size_t i = 1; i < n; i++) {\n        while (s[i + pos] != s[cur + pos] && cur > 0) {\n            cur = res[cur - 1];\n        }\n        if (s[i + pos] == s[cur + pos]) cur++;\n        res[i] = cur;\n    }\n    return res;\n}\n\nstruct Solution {\n  std::string s;\n  std::vector<std::vector<int>> pis;\n  void buildPi() {\n      pis.resize(s.length());\n      for (int i = 0; i < s.length(); i++) {\n          pis[i] = getSelfPi(s, i);\n      }\n  }\n  int log10(int diff) {\n      int res = 0;\n      while (diff > 0) {\n          res++;\n          diff /= 10;\n      }\n      return res;\n  }\n\n  void run(std::istream& in, std::ostream& out) {\n      in >> s;\n      buildPi();\n      std::vector<int> dyn(s.length() + 1, 1000000);\n      dyn[0] = 0;\n      for (int i = 0; i < s.length(); i++) {\n          int init = dyn[i];\n          for (int j = i + 1; j <= s.length(); j++) {\n              dyn[j] = std::min(dyn[j], init + j - i + 1);\n              int len = pis[i][j - i - 1];\n              int diff = j - i - len;\n              if ((j - i) % diff == 0) {\n                  dyn[j] = std::min(dyn[j], init + diff + log10((j - i) / diff));\n              }\n\n          }\n      }\n      out << dyn[s.length()] << std::endl;\n  }\n};\n\nint main() {\n    std::cin.sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    Solution().run(std::cin, std::cout);\n    return 0;\n}"], "input": "", "output": "", "tags": ["dp", "hashing", "string suffix structures", "strings"], "dificulty": "2400", "interactive": false}