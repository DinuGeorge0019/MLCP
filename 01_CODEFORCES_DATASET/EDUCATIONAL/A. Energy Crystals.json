{
    "link": "https://codeforces.com//contest/2111/problem/A",
    "problemId": "3419286",
    "problem_idx": "A",
    "shortId": "2111A",
    "contest_number": "2111",
    "problem_submissions": {
        "G": [
            322719568,
            322738251,
            322737232,
            322734882,
            322733848,
            322739705,
            322765348,
            322764688,
            322752005,
            322753587,
            322751319,
            322720568,
            322729631,
            322757116,
            322785461,
            322890645,
            323020347,
            322778439,
            322778419,
            322778201,
            322778119,
            322778020,
            322777882,
            322777223,
            322776997,
            322776001,
            322775936
        ],
        "E": [
            322697990,
            322695191,
            322705487,
            322705821,
            322705980,
            322713283,
            322724677,
            322738049,
            322690431,
            322700985,
            322700076,
            322704262,
            322702259,
            322707219,
            322704094,
            322705822,
            322703551
        ],
        "F": [
            322691387,
            322716243,
            322719103,
            322728613,
            322729993,
            322731051,
            322740913,
            322686943,
            322710192,
            322719720,
            322713672,
            322713636,
            322726013,
            322721562,
            322720556,
            322728230,
            322730210
        ],
        "D": [
            322678511,
            322686771,
            322684334,
            322692059,
            322689019,
            322692746,
            322686820,
            322741814,
            322683201,
            322689247,
            322687368,
            322686598,
            322691632,
            322687656,
            322691451,
            322694053,
            322684204
        ],
        "C": [
            322676707,
            322681404,
            322679043,
            322681662,
            322681314,
            322683752,
            322680197,
            322743070,
            322679811,
            322681807,
            322679034,
            322681517,
            322680587,
            322678741,
            322686213,
            322679235,
            322680369
        ],
        "B": [
            322676127,
            322679449,
            322677961,
            322679172,
            322678800,
            322680312,
            322678349,
            322745453,
            322678542,
            322679221,
            322677917,
            322679124,
            322677847,
            322677424,
            322681157,
            322677471,
            322677308
        ],
        "A": [
            322675651,
            322676474,
            322676120,
            322676736,
            322675861,
            322677535,
            322676082,
            322747128,
            322675974,
            322676468,
            322676128,
            322676492,
            322675977,
            322675843,
            322676405,
            322675792,
            322675708
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143528",
    "editorial": "Let’s relax the requirement that all crystals must be charged exactly to\r\nlevel and allow the energy level to rise above it, i.e., in the end.We\r\nwill try to come up with a greedy algorithm to charge the crystals. The\r\nsimplest idea is to take the crystal with the minimum energy level and\r\ncharge it as much as possible. If all three crystals have , then we have\r\nour answer. The energy level will change as follows:Each action takes a\r\ncrystal and charges it to level , where is the minimum charge of the\r\nother two crystals at that moment. Note that if we apply the action to a\r\ncrystal, its energy level increases by at least ; therefore, the answer\r\ncan be obtained in actions.It turns out that this algorithm already\r\nsolves the problem, and the condition that the energy level must be\r\nexactly does not affect anything. This is because, at the last moment\r\nwhen the greedy algorithm is about to charge some crystal to level:We\r\ncan instead set it to exactly . Let’s check why this is permissible and\r\ndoes not change the number of moves:The state will be , where and , so\r\nthe next two actions can be as follows:Meanwhile, the greedy algorithm\r\nwould also perform two actions:\r\n",
    "name": "A. Energy Crystals",
    "statement": "There are three energy crystals numbered 1, 2, and 3; let’s denote the\r\nenergy level of the i-th crystal as a_i. Initially, all of them are\r\ndischarged, meaning their energy levels are equal to 0. Each crystal\r\nneeds to be charged to level x .In one action, you can increase the\r\nenergy level of any one crystal by any positive amount; however, the\r\nenergy crystals are synchronized with each other, so an action can only\r\nbe performed if the following condition is met afterward: for each pair\r\nof crystals i, j, it must hold that a_{i}\r\nge\r\nlfloor\r\nfrac{a_{j}}{2}\r\nrfloor. What is the minimum number of actions required to charge all the\r\ncrystals?\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Energy Crystals.json",
    "hint": []
}