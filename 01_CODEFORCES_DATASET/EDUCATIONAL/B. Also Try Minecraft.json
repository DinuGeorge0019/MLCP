{"link": "https://codeforces.com//contest/1709/problem/B", "problemId": "1473245", "problem_idx": "B", "shortId": "1709B", "contest_number": "1709", "problem_submissions": {"F": [165168347, 165171155, 165167911, 165174463, 165176163, 165160774, 165168485, 165153508, 165190349, 165187538, 165182010, 165187878, 165188862, 165199087, 165192962, 165196109, 165191946, 165144458, 165186818, 165193512, 165203160], "E": [165159365, 165161441, 165158406, 165162017, 165168742, 165174634, 165187067, 165172843, 165175285, 165185776, 165171787, 165176500, 165174638, 165175948, 165172273, 165158835, 165190131, 165153154, 165197774, 165181829, 165178900], "D": [165150554, 165148981, 165152094, 165156213, 165151693, 165153019, 165151289, 165162605, 165149121, 165155132, 165160454, 165159258, 165152293, 165165679, 165219278, 165218001, 165217824, 165217721, 165217510, 165217230, 165156286, 165159148, 165160000, 165161618, 165152984], "C": [165144629, 165143580, 165141216, 165150836, 165145746, 165145999, 165145473, 165163144, 165144208, 165149116, 165150518, 165148291, 165145172, 165171500, 165146230, 165166415, 165151667, 165148193, 165146642], "B": [165139451, 165137999, 165136858, 165138643, 165140562, 165138703, 165137403, 165156435, 165139221, 165142115, 165142999, 165139377, 165138165, 165141728, 165137879, 165168796, 165142050, 165141198, 165138920], "A": [165135387, 165134436, 165133952, 165134310, 165134821, 165133959, 165133957, 165138163, 165134268, 165134365, 165134868, 165134280, 165133923, 165136754, 165134369, 165170607, 165135087, 165136295, 165134364]}, "name": "B. Also Try Minecraft", "statement": "You are beta testing the new secret Terraria update. This update will\r\nadd quests to the game!Simply, the world map can be represented as an\r\narray of length n, where the i-th column of the world has height\r\na_i.There are m quests you have to test. The j-th of them is represented\r\nby two integers s_j and t_j. In this quest, you have to go from the\r\ncolumn s_j to the column t_j. At the start of the quest, you are\r\nappearing at the column s_j.In one move, you can go from the column x to\r\nthe column x-1 or to the column x+1. In this version, you have Spectre\r\nBoots, which allow you to fly. Since it is a beta version, they are\r\nbugged, so they only allow you to fly when you are going up and have\r\ninfinite fly duration. When you are moving from the column with the\r\nheight p to the column with the height q, then you get some amount of\r\nfall damage. If the height p is greater than the height q, you get p - q\r\nfall damage, otherwise you fly up and get 0 damage.For each of the given\r\nquests, determine the minimum amount of fall damage you can get during\r\nthis quest.\r\n", "solutions": ["#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n#include <array>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) {fprintf(stderr, __VA_ARGS__);fflush(stderr);}\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int N = 100100;\nint n;\nll a[N];\nll pref[N], suf[N];\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint q;\n\tscanf(\"%d%d\", &n, &q);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%lld\", &a[i]);\n\tpref[0] = 0;\n\tfor (int i = 1; i < n; i++)\n\t\tpref[i] = pref[i - 1] + max(0LL, a[i - 1] - a[i]);\n\tsuf[n - 1] = 0;\n\tfor (int i = n - 2; i >= 0; i--)\n\t\tsuf[i] = suf[i + 1] + max(0LL, a[i + 1] - a[i]);\n\twhile(q--) {\n\t\tint v, u;\n\t\tscanf(\"%d%d\", &v, &u);\n\t\tv--;u--;\n\t\tif (v <= u) {\n\t\t\tprintf(\"%lld\\n\", pref[u] - pref[v]);\n\t\t} else {\n\t\t\tprintf(\"%lld\\n\", suf[u] - suf[v]);\n\t\t}\n\t}\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "dp", "implementation"], "dificulty": "900", "interactive": false}