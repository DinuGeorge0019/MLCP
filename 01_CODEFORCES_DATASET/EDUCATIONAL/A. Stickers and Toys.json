{
    "link": "https://codeforces.com//contest/1187/problem/A",
    "problemId": "365117",
    "problem_idx": "A",
    "shortId": "1187A",
    "contest_number": "1187",
    "problem_submissions": {
        "G": [
            56332310,
            56340989,
            56686103,
            56327820,
            56357942,
            56357893,
            56357546,
            56393615,
            56385554,
            56337872,
            56340206,
            56343105,
            56383525,
            56344635,
            56413429,
            56342762,
            56340438,
            56341811,
            56342716,
            56365621
        ],
        "F": [
            56329446,
            56334290,
            56324078,
            56328221,
            56327378,
            56337303,
            56342526,
            56331177,
            56340043,
            56336355,
            56334752,
            56336077,
            56336627,
            56360333
        ],
        "E": [
            56323030,
            56330456,
            56319363,
            56322371,
            56320247,
            56329005,
            56327923,
            56326133,
            56329409,
            56326249,
            56424958,
            56328252,
            56326656,
            56325346,
            56328882,
            56328436,
            56328661,
            56323830,
            56324440,
            56325389
        ],
        "D": [
            56321688,
            56327439,
            56325081,
            56328701,
            56323355,
            56322789,
            56358499,
            56324879,
            56323568,
            56320080,
            56323458,
            56413111,
            56325452,
            56541360,
            56321839,
            56320767,
            56323441
        ],
        "C": [
            56317291,
            56315455,
            56314711,
            56314827,
            56313223,
            56319121,
            56318984,
            56317025,
            56320070,
            56318484,
            56425545,
            56329379,
            56320274,
            56318352,
            56316738,
            56318754,
            56319277,
            56317240,
            56316893,
            56317391
        ],
        "B": [
            56314215,
            56313013,
            56312493,
            56311346,
            56311654,
            56315580,
            56313289,
            56312101,
            56313618,
            56315894,
            56313703,
            56315753,
            56314242,
            56313556,
            56315340,
            56314265,
            56313400,
            56314155,
            56314393
        ],
        "A": [
            56311354,
            56311017,
            56311059,
            56312444,
            56310978,
            56312306,
            56311272,
            56310955,
            56311255,
            56311625,
            56311777,
            56313786,
            56311277,
            56310994,
            56311316,
            56311426,
            56311025,
            56311856,
            56311363
        ]
    },
    "name": "A. Stickers and Toys",
    "statement": "Your favorite shop sells n Kinder Surprise chocolate eggs. You know that\r\nexactly s stickers and exactly t toys are placed in n eggs in total.Each\r\nKinder Surprise can be one of three types: it can contain a single\r\nsticker and ; it can contain a single toy and ; it can contain both a\r\nsingle sticker a single toy. But you which type a particular Kinder\r\nSurprise has. All eggs look identical and indistinguishable from each\r\nother.What is the minimum number of Kinder Surprise Eggs you have to buy\r\nto be sure that, whichever types they are, you’ll obtain at least one\r\nsticker and at least one toy?Note that you do not open the eggs in the\r\npurchasing process, that is, you just buy some number of eggs. It’s\r\nguaranteed that the answer always exists.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=1000*1007;\n\nint main()\n{\n\tint t;\n\tscanf(\"%d\", &t);\n\tfor (int i=1; i<=t; i++)\n\t{\n\t\tll n, a, b;\n\t\tscanf(\"%lld%lld%lld\", &n, &a, &b);\n\t\tif (a>b)\n\t\t\tswap(a, b);\n\t\tll x=b-(a+b-n)+1;\n\t\tprintf(\"%lld\\n\", x);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Stickers and Toys.json",
    "editorial_link": "https://codeforces.com//blog/entry/68111",
    "editorial": "Note, that there are exactly eggs with only a sticker and, analogically,\r\nexactly with only a toy. So we need to buy more than eggs, or exactly .\r\n",
    "hint": []
}