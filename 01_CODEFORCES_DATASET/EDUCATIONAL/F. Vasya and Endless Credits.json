{
    "link": "https://codeforces.com//contest/1107/problem/F",
    "problemId": "288739",
    "problem_idx": "F",
    "shortId": "1107F",
    "contest_number": "1107",
    "problem_submissions": {
        "E": [
            49013467,
            49008460,
            49012396,
            49006242,
            49008619,
            49017766,
            49019000,
            49012372,
            49011583,
            176420718,
            49013181,
            49015268,
            49018364,
            49014306,
            49015741,
            49004388,
            48997380,
            49015240,
            49002659,
            49009546,
            49008550
        ],
        "G": [
            49011365,
            49010194,
            49016397,
            49014169,
            49016073,
            49011313,
            49010209,
            49025351,
            49022889,
            49019588,
            49010516,
            49020197,
            49021008,
            49020053,
            49017813,
            49036704,
            49020211,
            49015481,
            49030126
        ],
        "F": [
            49008073,
            49012089,
            49021192,
            49015026,
            49017918,
            49019060,
            49366532,
            49825656,
            49825549,
            49021809
        ],
        "D": [
            48997651,
            49010674,
            49008906,
            49001237,
            49051114,
            49002152,
            49005979,
            49003643,
            49005670,
            49006757,
            49005502,
            49007559,
            49006488,
            49007684,
            49005318,
            49010907,
            49009162,
            49010914,
            49006671,
            49005756,
            49006449
        ],
        "C": [
            48994637,
            48998923,
            49003509,
            48997020,
            48998710,
            48997908,
            49002063,
            48998329,
            49002178,
            48999947,
            49000421,
            49004011,
            49003004,
            48998353,
            49007207,
            49005313,
            48999254,
            49018676,
            49000412,
            49000294
        ],
        "B": [
            48993730,
            48996062,
            48998013,
            48994172,
            48995232,
            48997773,
            48995013,
            48998484,
            48995876,
            48996083,
            48994456,
            48998645,
            48994729,
            48997378,
            49001444,
            48995542,
            49016049,
            48995486,
            48997049
        ],
        "A": [
            48993686,
            48993925,
            48994361,
            48993741,
            48994038,
            48994065,
            48994006,
            48996736,
            48994321,
            48994290,
            48993884,
            48994319,
            48994054,
            48994165,
            49000099,
            48993805,
            49017652,
            48993935,
            48993923
        ]
    },
    "name": "F. Vasya and Endless Credits",
    "statement": "Vasya wants to buy himself a nice new car. Unfortunately, he lacks some\r\nmoney. Currently he has exactly burles.However, the local bank has n\r\ncredit offers. Each offer can be described with three numbers a_i, b_i\r\nand k_i. Offers are numbered from 1 to n. If Vasya takes the i-th offer,\r\nthen the bank gives him a_i burles at the beginning of the month and\r\nthen Vasya pays bank b_i burles at the end of each month for the next\r\nk_i months (including the month he activated the offer). .. . Several\r\ncredits can be active at the same time. It implies that Vasya pays bank\r\nthe sum of b_i over all the i of active credits at the end of each\r\nmonth.Vasya wants to buy a car in the middle of some month. He just\r\ntakes all the money he currently has and buys the car of that exact\r\nprice.Vasya don\u2019t really care what he\u2019ll have to pay the bank back after\r\nhe buys a car. He just goes out of the country on his car so that the\r\nbank can\u2019t find him anymore.What is the maximum price that car can have?\r\n",
    "solutions": [
        "#ifndef BZ\n#pragma GCC optimize \"-O3\"\n#endif\n#include <bits/stdc++.h>\n\n#define FASTIO\n#define ALL(v) (v).begin(), (v).end()\n#define rep(i, l, r) for (int i = (l); i < (r); ++i)\n\n#ifdef FASTIO\n#define scanf abacaba\n#define printf abacaba\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\nusing namespace std;\n\nconst ll INF = 1e18;\nconst int MX = 507;\n\nll a[MX][MX];\n\nusing T = ll;\nT hungary(int n, int m) {\n    vector<T> u(n + 1), v(m + 1);\n    vector<int> p(m + 1), way(m + 1);\n    for (int i = 1; i <= n; ++i) {\n        p[0] = i;\n        int j0 = 0;\n        vector<T> minv (m + 1, INF);\n        vector<char> used (m + 1, 0);\n        do {\n            used[j0] = 1;\n            int i0 = p[j0], j1 = 0;\n            T d = INF;\n            for (int j = 1; j <= m; ++j)\n                if (!used[j]) {\n                    T cur = a[i0][j] - u[i0] - v[j];\n                    if (cur < minv[j])\n                        minv[j] = cur, way[j] = j0;\n                    if (minv[j] < d)\n                        d = minv[j], j1 = j;\n                }\n            for (int j = 0; j <= m; ++j)\n                if (used[j])\n                    u[p[j]] += d, v[j] -= d;\n                else\n                    minv[j] -= d;\n            j0 = j1;\n        } while (p[j0] != 0);\n        do {\n            int j1 = way[j0];\n            p[j0] = p[j1];\n            j0 = j1;\n        } while (j0);\n    }\n\n    vector<int> ans (n + 1);\n    for (int j = 1; j <= m; ++j)\n        ans[p[j]] = j;\n    T cost = -v[0];\n    return cost;\n}\n\n\n\nint main() {\n#ifdef FASTIO\n    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n#endif\n    int n;\n    cin >> n;\n    for (int i = 1; i <= n; i++) {\n        ll x, y, z;\n        cin >> x >> y >> z;\n        for (int j = 1; j <= n; j++) {\n            a[i][j] = -max(0ll, x);\n            if (j <= z) {\n                x -= y;\n            }\n        }\n    }\n/*\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            cout << a[i][j] << \" \";\n        }\n        cout << endl;\n    } */\n    cout << -hungary(n, n) << \"\\n\";\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "flows",
        "graph matchings",
        "graphs",
        "sortings"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Vasya and Endless Credits.json",
    "editorial_link": "https://codeforces.com//blog/entry/64833",
    "editorial": "Notice that if we take offer exactly months before we buy the car, it\r\nwill provide us with money at the time of the car purchase. Moreover,\r\nthe only values of that make sense are . This means we can immediately\r\nsolve the problem via an algorithm for the assignment problem, such as\r\nmin-cost flow or the Hungarian algorithm. This has a runtime of or ,\r\nwhich manages to fit under the time limit with a good implementation.\r\nCode: 49033783 The better solution is to notice that for all offers\r\nwhere we don\u00e2\u0080\u0099t use up all months, it\u00e2\u0080\u0099s best to sort them by (so that the\r\nhighest values of have the lowest values of ). This leads to a very nice\r\nDP solution: 49035446\r\n"
}