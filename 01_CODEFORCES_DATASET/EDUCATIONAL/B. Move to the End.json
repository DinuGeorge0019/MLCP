{
    "link": "https://codeforces.com//contest/2104/problem/B",
    "problemId": "3357538",
    "problem_idx": "B",
    "shortId": "2104B",
    "contest_number": "2104",
    "problem_submissions": {
        "G": [
            317634002,
            317631743,
            320673214,
            317636349,
            317639303,
            317631308,
            317640372,
            317641490,
            317634993,
            317623920,
            317623580,
            317647581,
            317646744,
            317640479,
            317649324,
            317648614,
            317603575,
            317625986,
            317658338,
            317654956,
            317656090
        ],
        "F": [
            317618453,
            317615339,
            317611576,
            317619502,
            317642933,
            317616740,
            317626825,
            317624444,
            317635700,
            317630227,
            317652195,
            317651366,
            317632460,
            317639846,
            317622626,
            317627252,
            317618955,
            317629645,
            317633465
        ],
        "E": [
            317600678,
            317604770,
            317604225,
            317601494,
            317605089,
            317605713,
            317610349,
            317606588,
            317606228,
            317611391,
            317609737,
            317616567,
            317624447,
            317604365,
            317605239,
            317606517,
            317605527,
            317603967
        ],
        "D": [
            317596832,
            317600994,
            317595577,
            317597224,
            317599585,
            317599131,
            317603322,
            317601392,
            317602519,
            317606339,
            317605002,
            317608223,
            317625926,
            317598715,
            317596708,
            317599445,
            317601363,
            317598919
        ],
        "C": [
            317592206,
            317594503,
            317591740,
            317592536,
            317595007,
            317592453,
            317599440,
            317596483,
            317666768,
            317597634,
            317597533,
            317596118,
            317603421,
            317628135,
            317593822,
            317592818,
            317594552,
            317594062,
            317592586
        ],
        "B": [
            317586512,
            317588149,
            317586474,
            317586748,
            317587897,
            317586575,
            317590393,
            317589124,
            317590519,
            317590566,
            317590505,
            317595035,
            317629001,
            317588704,
            317587930,
            317589549,
            317586793,
            317587862
        ],
        "A": [
            317583850,
            317584199,
            317583696,
            317583966,
            317584221,
            317583906,
            317584707,
            317583779,
            317583664,
            317586307,
            317586411,
            317589674,
            317629578,
            317583905,
            317584152,
            317583791,
            317583699,
            317583693
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142472",
    "editorial": "If we move an element to the end of the array, then each element (except\r\nthe one we selected) will either remain in its place or move position to\r\nthe left. This means that if we are interested in the sum of the last\r\nelements after we have shifted some element to the end, it will\r\nnecessarily include the last elements of the original array (each of\r\nthem will move at most position to the left, so they will still be\r\nincluded in the last elements).Thus, the answer for each is the sum of\r\nthe last elements, plus some additional element. Can we use any element?\r\nIt turns out, yes; if we want to use the element at index , which is not\r\namong the last , we just need to move it to the end. Obviously, among\r\nall these elements, we need to take the maximum.Therefore, the answer\r\nfor each value of is . Calculating these values naively is too slow, but\r\nwe can speed it up as follows: we will build two arrays and , where is\r\nthe sum of the first elements of the array, and is the maximum of them.\r\nThen the answer for is simply .To quickly construct these two arrays, we\r\ncan use the fact that , , and . This way, we will obtain a solution in .\r\n",
    "name": "B. Move to the End",
    "statement": "You are given an array a consisting of n integers.For every integer k\r\nfrom 1 to n, you have to do the following: choose an arbitrary element\r\nof a and move it to the right end of the array (you can choose the last\r\nelement, then the array won’t change); print the sum of k last elements\r\nof a; move the element you’ve chosen on the first step to its original\r\nposition (restore the original array a). For every k, you choose the\r\nelement which you move so that the value you print is .Calculate the\r\nvalue you print for every k.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "greedy",
        "implementation"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Move to the End.json",
    "hint": []
}