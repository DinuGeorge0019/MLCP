{
    "link": "https://codeforces.com//contest/1574/problem/A",
    "problemId": "1115674",
    "problem_idx": "A",
    "shortId": "1574A",
    "contest_number": "1574",
    "problem_submissions": {
        "F": [
            129371777,
            129390921,
            129389731,
            129403988,
            129393793,
            129405865,
            129397624,
            129402611,
            129407592,
            129402025,
            129406898,
            129404634,
            129404840,
            129396171,
            129404379,
            129428143,
            129709936
        ],
        "E": [
            129358674,
            129374904,
            129374765,
            129380449,
            129384709,
            129384504,
            129386221,
            129385268,
            129386371,
            129386001,
            129382985,
            129391466,
            129400354,
            129386981,
            129377485,
            129381385,
            129368975,
            129386322,
            131512763,
            129380209,
            129375216
        ],
        "D": [
            129351289,
            129361598,
            129356978,
            129361351,
            129369248,
            129359850,
            129368999,
            129364465,
            129359499,
            129374264,
            129364919,
            129372422,
            129366912,
            129361472,
            129361829,
            129360363,
            129358818,
            129366595,
            129366262,
            129357077
        ],
        "C": [
            129345085,
            129349632,
            129348099,
            129350669,
            129350365,
            129350502,
            129357353,
            129349080,
            129351966,
            129349226,
            129354359,
            129353753,
            129347195,
            129407614,
            129351570,
            129352219,
            129351381,
            129349196,
            129351680,
            129362666
        ],
        "B": [
            129342942,
            129343801,
            129344237,
            129345556,
            129343553,
            129345572,
            129345752,
            129344787,
            129345774,
            129343483,
            129344471,
            129343826,
            129343420,
            129410456,
            129346117,
            129346262,
            129343905,
            129345607,
            129345689,
            129346070
        ],
        "A": [
            129341973,
            129342397,
            129341943,
            129342408,
            129341991,
            129342232,
            129342087,
            129342285,
            129343124,
            129342143,
            129342078,
            129341990,
            129341904,
            129411806,
            129343011,
            129342282,
            129341912,
            129342040,
            129342183,
            129341989
        ]
    },
    "name": "A. Regular Bracket Sequences",
    "statement": "A bracket sequence is a string containing only characters \"\" and \"\". A\r\nregular bracket sequence is a bracket sequence that can be transformed\r\ninto a correct arithmetic expression by inserting characters \"\" and \"\"\r\nbetween the original characters of the sequence. For example, bracket\r\nsequences \"\" and \"\" are regular (the resulting expressions are: \"\" and\r\n\"\"), and \"\", \"\" and \"\" are not.You are given an integer n. Your goal is\r\nto construct and print different regular bracket sequences of length 2n.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 20.09.2021 17:34:39       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n;\n    cin >> n;\n    vector<string> res;\n    string s = \"\";\n    function<void(int, int)> Dfs = [&](int v, int b) {\n      if ((int) res.size() == n) {\n        return;\n      }\n      if (b < 0 || b > 2 * n - v) {\n        return;\n      }\n      if (v == 2 * n) {\n        res.push_back(s);\n        return;\n      }\n      s += \"(\";\n      Dfs(v + 1, b + 1);\n      s.pop_back();\n      s += \")\";\n      Dfs(v + 1, b - 1);\n      s.pop_back();\n    };\n    Dfs(0, 0);\n    for (auto& x : res) {\n      cout << x << '\\n';\n    }\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Regular Bracket Sequences.json",
    "editorial_link": "https://codeforces.com//blog/entry/95188",
    "editorial": "There are many ways to solve this problem. The model solution does the\r\nfollowing thing: start with the sequence ; merge the first characters\r\ninto one sequence to get ; merge the first characters into one sequence\r\nto get ; and so on.\r\n"
}