{
    "link": "https://codeforces.com//contest/1194/problem/A",
    "problemId": "372215",
    "problem_idx": "A",
    "shortId": "1194A",
    "contest_number": "1194",
    "problem_submissions": {
        "E": [
            57460080,
            57035519,
            57036170,
            57036063,
            57128801,
            57128706,
            57128697,
            57128659,
            57128612,
            57128540,
            57128243,
            57128111,
            57036122,
            57038525,
            57047818,
            57039795,
            57039479,
            57042294,
            57040196,
            57036224,
            57042239,
            57040076,
            57104697,
            57102024,
            57101946,
            57062641,
            57042300,
            57042350,
            57042204,
            57055044,
            57053556,
            57046934,
            57046549,
            57042532
        ],
        "A": [
            57046342,
            57022752,
            57022576,
            57022542,
            57022673,
            57022779,
            57022508,
            57024885,
            57022776,
            57023918,
            57022665,
            57023995,
            57022524,
            57022685,
            57028419,
            57027614,
            57022718,
            57022691,
            57023076,
            57024152
        ],
        "B": [
            57046133,
            57024457,
            57023825,
            57024116,
            57024620,
            57026379,
            57024611,
            57023215,
            57025344,
            57025498,
            57024993,
            57026889,
            57024968,
            57025445,
            57030710,
            57029529,
            57024907,
            57024604,
            57025406,
            57027222
        ],
        "C": [
            57045626,
            57025890,
            57026227,
            57026533,
            57026651,
            57028509,
            57026843,
            57027145,
            57026992,
            57027849,
            57027432,
            57029395,
            57027548,
            57028521,
            57032512,
            57032102,
            57027763,
            57027180,
            57027134,
            57031699
        ],
        "G": [
            57044495,
            57124672,
            57083729,
            57083446,
            57083302,
            57051811,
            144563243,
            57059946,
            57059836,
            57059526,
            57059380,
            57058688,
            57057384,
            66619078,
            66618958,
            66618872,
            57059217,
            57080922,
            57079990,
            57079590,
            57079506,
            99043474,
            99036226
        ],
        "F": [
            57028516,
            57040353,
            57042500,
            57037960,
            57127884,
            57047571,
            57045756,
            57041898,
            57051035,
            57048196,
            57045806,
            57053225,
            57047719,
            57051194,
            57063470,
            57052822,
            57047382,
            57051062,
            57040128,
            57052740,
            57051156,
            57053947,
            57051969
        ],
        "D": [
            57026382,
            57028806,
            57032441,
            57028933,
            57029747,
            57030899,
            57031250,
            57031182,
            57036191,
            57030939,
            57039325,
            57034516,
            57033749,
            57033063,
            57035777,
            57036535,
            57031217,
            57033511,
            57038656,
            57037146
        ]
    },
    "name": "A. Remove a Progression",
    "statement": "You have a list of numbers from 1 to n written from left to right on the\r\nblackboard.You perform an algorithm consisting of several steps (steps\r\nare 1-indexed). On the i-th step you wipe the i-th number (considering\r\nonly numbers). You wipe (not one digit). When there are less than i\r\nnumbers remaining, you stop your algorithm. Now you wonder: what is the\r\nvalue of the x-th remaining number after the algorithm is stopped?\r\n",
    "solutions": [
        "#pragma GCC optimize (\"O3\")\n#pragma GCC target (\"sse4\")\n\n#include <bits/stdc++.h>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/rope>\n\nusing namespace std;\nusing namespace __gnu_pbds;\nusing namespace __gnu_cxx;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n\ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<ld,ld> pd;\n\ntypedef vector<int> vi;\ntypedef vector<ld> vd;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\ntypedef vector<pl> vpl;\ntypedef vector<cd> vcd;\n\ntemplate <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;\n\n#define FOR(i, a, b) for (int i = (a); i < (b); i++)\n#define F0R(i, a) for (int i = 0; i < (a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= (a); i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n#define trav(a, x) for (auto& a : x)\n\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n\n#define sz(x) (int)x.size()\n#define all(x) begin(x), end(x)\n#define rsz resize\n\nconst int MOD = 1000000007; // 998244353\nconst ll INF = 1e18;\nconst int MX = 200005;\nconst ld PI = 4*atan((ld)1);\n\ntemplate<class T> void ckmin(T &a, T b) { a = min(a, b); }\ntemplate<class T> void ckmax(T &a, T b) { a = max(a, b); }\n\nnamespace input {\n    template<class T> void re(complex<T>& x);\n    template<class T1, class T2> void re(pair<T1,T2>& p);\n    template<class T> void re(vector<T>& a);\n    template<class T, size_t SZ> void re(array<T,SZ>& a);\n\n    template<class T> void re(T& x) { cin >> x; }\n    void re(double& x) { string t; re(t); x = stod(t); }\n    void re(ld& x) { string t; re(t); x = stold(t); }\n    template<class Arg, class... Args> void re(Arg& first, Args&... rest) { \n        re(first); re(rest...); \n    }\n\n    template<class T> void re(complex<T>& x) { T a,b; re(a,b); x = cd(a,b); }\n    template<class T1, class T2> void re(pair<T1,T2>& p) { re(p.f,p.s); }\n    template<class T> void re(vector<T>& a) { F0R(i,sz(a)) re(a[i]); }\n    template<class T, size_t SZ> void re(array<T,SZ>& a) { F0R(i,SZ) re(a[i]); }\n}\n\nusing namespace input;\n\nnamespace output {\n    template<class T1, class T2> void pr(const pair<T1,T2>& x);\n    template<class T, size_t SZ> void pr(const array<T,SZ>& x);\n    template<class T> void pr(const vector<T>& x);\n    template<class T> void pr(const set<T>& x);\n    template<class T1, class T2> void pr(const map<T1,T2>& x);\n\n    template<class T> void pr(const T& x) { cout << x; }\n    template<class Arg, class... Args> void pr(const Arg& first, const Args&... rest) { \n        pr(first); pr(rest...); \n    }\n\n    template<class T1, class T2> void pr(const pair<T1,T2>& x) { \n        pr(\"{\",x.f,\", \",x.s,\"}\"); \n    }\n    template<class T> void prContain(const T& x) {\n        pr(\"{\");\n        bool fst = 1; for (const auto& a: x) pr(!fst?\", \":\"\",a), fst = 0; // const needed for vector<bool>\n        pr(\"}\");\n    }\n    template<class T, size_t SZ> void pr(const array<T,SZ>& x) { prContain(x); }\n    template<class T> void pr(const vector<T>& x) { prContain(x); }\n    template<class T> void pr(const set<T>& x) { prContain(x); }\n    template<class T1, class T2> void pr(const map<T1,T2>& x) { prContain(x); }\n    \n    void ps() { pr(\"\\n\"); }\n    template<class Arg> void ps(const Arg& first) { \n        pr(first); ps(); // no space at end of line\n    }\n    template<class Arg, class... Args> void ps(const Arg& first, const Args&... rest) { \n        pr(first,\" \"); ps(rest...); // print w/ spaces\n    }\n}\n\nusing namespace output;\n\nnamespace io {\n    void setIn(string s) { freopen(s.c_str(),\"r\",stdin); }\n    void setOut(string s) { freopen(s.c_str(),\"w\",stdout); }\n    void setIO(string s = \"\") {\n        ios_base::sync_with_stdio(0); cin.tie(0); // fast I/O\n        if (sz(s)) { setIn(s+\".in\"), setOut(s+\".out\"); } // for USACO\n    }\n}\n\nusing namespace io;\n\ntemplate<class T> T invGeneral(T a, T b) {\n    a %= b; if (a == 0) return b == 1 ? 0 : -1;\n    T x = invGeneral(b,a); \n    return x == -1 ? -1 : ((1-(ll)b*x)/a+b)%b;\n}\n\ntemplate<class T> struct modular {\n    T val; \n    explicit operator T() const { return val; }\n    modular() { val = 0; }\n    modular(const ll& v) { \n        val = (-MOD <= v && v <= MOD) ? v : v % MOD;\n        if (val < 0) val += MOD;\n    }\n    \n    friend ostream& operator<<(ostream& os, const modular& a) { return os << a.val; }\n    friend bool operator==(const modular& a, const modular& b) { return a.val == b.val; }\n    friend bool operator!=(const modular& a, const modular& b) { return !(a == b); }\n\n    modular operator-() const { return modular(-val); }\n    modular& operator+=(const modular& m) { if ((val += m.val) >= MOD) val -= MOD; return *this; }\n    modular& operator-=(const modular& m) { if ((val -= m.val) < 0) val += MOD; return *this; }\n    modular& operator*=(const modular& m) { val = (ll)val*m.val%MOD; return *this; }\n    friend modular pow(modular a, ll p) {\n        modular ans = 1; for (; p; p /= 2, a *= a) if (p&1) ans *= a;\n        return ans;\n    }\n    friend modular inv(const modular& a) { \n        auto i = invGeneral(a.val,MOD); assert(i != -1);\n        return i;\n    } // equivalent to return exp(b,MOD-2) if MOD is prime\n    modular& operator/=(const modular& m) { return (*this) *= inv(m); }\n    \n    friend modular operator+(modular a, const modular& b) { return a += b; }\n    friend modular operator-(modular a, const modular& b) { return a -= b; }\n    friend modular operator*(modular a, const modular& b) { return a *= b; }\n    \n    friend modular operator/(modular a, const modular& b) { return a /= b; }\n};\n\ntypedef modular<int> mi;\ntypedef pair<mi,mi> pmi;\ntypedef vector<mi> vmi;\ntypedef vector<pmi> vpmi;\n\nint q;\n\nint main() {\n    setIO(); re(q);\n    F0R(i,q) {\n    \tint n,x; re(n,x);\n    \tps(2*x);\n    }\n}\n\n/* stuff you should look for\n    * int overflow, array bounds\n    * special cases (n=1?), set tle\n    * do smth instead of nothing and stay organized\n*/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Remove a Progression.json",
    "editorial_link": "https://codeforces.com//blog/entry/68405",
    "editorial": "After some simulation of the given algorithm (in your head, on paper or\r\non a computer) we can realize that exactly all odd numbers are erased.\r\nSo, all even numbers remain, and the answer is .\r\n",
    "hint": []
}