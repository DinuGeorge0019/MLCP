{
    "link": "https://codeforces.com//contest/837/problem/E",
    "problemId": "116711",
    "problem_idx": "E",
    "shortId": "837E",
    "contest_number": "837",
    "problem_submissions": {
        "G": [
            29167867,
            29168921,
            29171657,
            29211841,
            29211768,
            29194112,
            29194042,
            29194028,
            29175447,
            29168227,
            29172693,
            29172204,
            29166926,
            29165613,
            29171547,
            29173009,
            29190922,
            32561173,
            29172886,
            29172783,
            29172758,
            29172505,
            29172166
        ],
        "F": [
            29165055,
            29166362,
            29168864,
            29166638,
            29169357,
            29169429,
            29164558,
            29186836,
            29168655,
            29167876,
            29169339,
            29172957,
            29171060,
            29171284,
            29168929,
            29172401,
            29169905,
            29168071,
            29172819
        ],
        "E": [
            29162020,
            29163186,
            29165795,
            29163264,
            29164907,
            29165095,
            29162428,
            29167933,
            29164726,
            29164807,
            29166669,
            29167308,
            29166973,
            29172476,
            29166198,
            29169034,
            29165312,
            29163338,
            29169750
        ],
        "D": [
            29161276,
            29162239,
            29163430,
            29162397,
            29162640,
            29163863,
            29160761,
            29163799,
            29174585,
            29164816,
            29165533,
            29164344,
            29163361,
            29163790,
            29167229,
            30486037,
            29175514,
            29161500,
            29167261
        ],
        "C": [
            29160368,
            29160646,
            29161707,
            29160573,
            29161464,
            29161685,
            29160675,
            29160760,
            29162171,
            29161153,
            29162346,
            29163214,
            29163154,
            29161641,
            29165376,
            29161315,
            29160556,
            29163716
        ],
        "B": [
            29159633,
            29159893,
            29160590,
            29159654,
            29160221,
            29159770,
            29161534,
            29161149,
            29160418,
            29160903,
            29161228,
            29162604,
            29271569,
            29164321,
            29195260,
            29160168,
            29175059,
            29162325
        ],
        "A": [
            29158816,
            29158847,
            29159160,
            29160665,
            29159109,
            29158852,
            29159205,
            29159017,
            29158817,
            29158878,
            29159185,
            29161667,
            29158818,
            29158815,
            29159058,
            29159399
        ]
    },
    "name": "E. Vasya's Function",
    "statement": "Vasya is studying number theory. He has denoted a function such that: ;\r\n, where is the greatest common divisor of and . Vasya has two numbers\r\nand , and he wants to calculate . He tried to do it by himself, but\r\nfound out that calculating this function the way he wants to do that\r\nmight take very long time. So he decided to ask you to implement a\r\nprogram that will calculate this function swiftly.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:1048576\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n#define rf(x) (x)=0;while(*p<48)p++;while(47<*p)(x)=((x)<<3)+((x)<<1)+(*p++&15);\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\ntypedef tuple <int, int, int> t3;\n\nint IT_MAX = 1 << 18;\nconst ll MOD = 1000000009;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 1234567890123456789ll;\nconst db PI = acos(-1);\nconst db EPS = 1e-8;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<(n);i++)\n\nll gcd(ll a, ll b) {\n\treturn (a == 0) ? b : gcd(b%a, a);\n}\nll aa(ll a, ll b) {\n\tif (b == 0) return 0;\n\n\tll g = gcd(a, b);\n\ta = a / g, b = b / g;\n\n\tll oa = a;\n\tll mn = b;\n\tfor (ll i = 2; i * i <= a; i++) {\n\t\tif (a % i) continue;\n\t\tmn = min(mn, b%i);\n\t\twhile (a % i == 0) a /= i;\n\t}\n\tif (a != 1) mn = min(mn, b%a);\n\treturn aa(oa, b - mn) + mn;\n}\n\nint main() {\n\tll X, Y;\n\tscanf(\"%lld %lld\", &X, &Y);\n\treturn !printf(\"%lld\\n\", aa(X, Y));\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation",
        "math"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Vasya's Function.json",
    "editorial_link": "https://codeforces.com//blog/entry/53662",
    "editorial": "One important fact is that when we subtract from , new will be divisible\r\nby old . And, of course, is always divisible by .Let\u00e2\u0080\u0099s factorize .\r\nConsider the moment when changes. If we denote old value of by , the new\r\nvalue of will be divisible by some , where is a prime divisor of . Let\u00e2\u0080\u0099s\r\ncheck all prime divisors of and for each of these divisors find the\r\nnumber of times we need to subtract from to get divisible by ; that is\r\njust (don\u00e2\u0080\u0099t forget that also has to be divisible by ). Among all prime\r\ndivisors of pick one with the minimum required number of operations (let\r\nthis number of operations be ), add to answer, subtract from and repeat\r\nthe process.\r\n"
}