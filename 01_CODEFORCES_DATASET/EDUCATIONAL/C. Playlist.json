{
    "link": "https://codeforces.com//contest/1140/problem/C",
    "problemId": "317586",
    "problem_idx": "C",
    "shortId": "1140C",
    "contest_number": "1140",
    "problem_submissions": {
        "G": [
            51711380,
            51715425,
            51701961,
            51723677,
            51713161,
            51826208,
            51725702,
            51751383,
            51751094,
            51871694
        ],
        "E": [
            51707475,
            51698157,
            51710451,
            51699057,
            51698619,
            51700718,
            51698345,
            51703686,
            51826592,
            51711304,
            51706757,
            51709505,
            51702992,
            51711975,
            51716308,
            51694918,
            51707265,
            51699848,
            51701075,
            51700169,
            51701450
        ],
        "F": [
            51700190,
            51704937,
            51708125,
            51707572,
            51715636,
            51713154,
            51709309,
            51745229,
            51724116,
            51717194,
            51826549,
            51704389,
            51714714,
            51719425,
            51719809,
            51889038,
            51888545,
            51716543,
            51712779,
            51717719,
            51719576,
            51772442,
            51734097,
            51801995,
            52594541,
            52594485
        ],
        "D": [
            51692897,
            51692552,
            51711200,
            51692355,
            51691890,
            51695018,
            51693289,
            51690531,
            51826633,
            51691126,
            51688766,
            51694582,
            51696697,
            51687330,
            51696460,
            51700363,
            51702095,
            51691157,
            51691573,
            51691854,
            51693356
        ],
        "C": [
            51691812,
            51690406,
            51711880,
            51691405,
            51690720,
            51691755,
            51691383,
            51689446,
            51826659,
            51690305,
            51696638,
            51692263,
            51691635,
            51692542,
            51695004,
            51699456,
            51696505,
            51690289,
            51689951,
            51689550,
            51688775
        ],
        "B": [
            51689841,
            51689192,
            51712746,
            51689822,
            51689241,
            51688933,
            51689569,
            51688189,
            51826766,
            51688939,
            51690552,
            51689048,
            51689939,
            51691885,
            51692884,
            51696524,
            51689978,
            51688514,
            51688185,
            51688344,
            51690712
        ],
        "A": [
            51687668,
            51687221,
            51713210,
            51688333,
            51687348,
            51687390,
            51687760,
            51687210,
            51826788,
            51687239,
            51687778,
            51687499,
            51688125,
            51688099,
            51687757,
            51687342,
            51688091,
            51687317,
            51687203,
            51687474,
            51687413
        ]
    },
    "name": "C. Playlist",
    "statement": "You have a playlist consisting of n songs. The i-th song is\r\ncharacterized by two numbers t_i and b_i its length and beauty\r\nrespectively. The pleasure of listening to set of songs is equal to the\r\ntotal length of the songs in the set multiplied by the minimum beauty\r\namong them. For example, the pleasure of listening to a set of 3 songs\r\nhaving lengths [5, 7, 4] and beauty values [11, 14, 6] is equal to (5 +\r\n7 + 4)\r\ncdot 6 = 96.You need to choose k songs from your playlist, so the\r\npleasure of listening to the set of these songs them is maximum\r\npossible.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define pb push_back\n#define fir first\n#define sec second\n#define ld long double\n//#define ll __int128\nusing namespace std;\nconst int N=600010;\ntypedef pair <int,int> P;\nstruct node {\n\tint t,b;\n}a[N];\npriority_queue <int,vector<int>,greater<int> > q;\nint read()\n{\n\tint x=0;char c=getchar(),flag='+';\n\twhile(!isdigit(c)) flag=c,c=getchar();\n\twhile(isdigit(c)) x=x*10+c-'0',c=getchar();\n\treturn flag=='-'?-x:x;\n}\nbool cmp(node a,node b) {return a.b>b.b;}\nvoid print(ll x)\n{\n\tif(x/10) print(x/10);\n\tprintf(\"%d\",(int)x%10);\n}\nint main()\n{\n\tint n=read(),k=read();\n\tfor(int i=1;i<=n;i++) a[i].t=read(),a[i].b=read();\n\tsort(a+1,a+n+1,cmp);\n\tll sum=0,ans=0;\n\tq.push(a[1].t);\n\tans=1ll*a[1].t*a[1].b;\n\tsum=a[1].t;\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint tmp=q.top();\n\t\tq.push(a[i].t);\n\t\tsum+=a[i].t;\n\t\twhile(q.size()>k) sum-=q.top(),q.pop();\n\t\tans=max(ans,sum*a[i].b);\n\t}\n\tcout<<(long long) ans;\n//\tprint(ans);\n\treturn 0;\n}\n/*by DT_Kang*/\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "sortings"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Playlist.json",
    "editorial_link": "https://codeforces.com//blog/entry/66147",
    "editorial": "If we fix a song with minimum beauty in the answer, then we need to take\r\nthe remaining songs (or less) among those having beauty greater than or\r\nequal to the beauty of the fixed song and the longer they are, the\r\nbetter.So, we will iterate on the songs in the order of decreasing their\r\nbeauty, and for the current song we will maintain longest songs having\r\ngreater or similar beauty. This can be done using some standard\r\ncontainers: in or in .\r\n",
    "hint": []
}