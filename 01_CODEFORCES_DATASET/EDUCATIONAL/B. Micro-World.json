{
    "link": "https://codeforces.com//contest/990/problem/B",
    "problemId": "188991",
    "problem_idx": "B",
    "shortId": "990B",
    "contest_number": "990",
    "problem_submissions": {
        "F": [
            39110066,
            39104822,
            39113275,
            39114587,
            39116563,
            39116347,
            39108471,
            39110743,
            39112419,
            39112294,
            39108515,
            39111997,
            39116686,
            39101868,
            39116200,
            39118004,
            39116805
        ],
        "G": [
            39103567,
            39107402,
            39106809,
            39106218,
            39109082,
            39109620,
            39112690,
            39099088,
            39107571,
            39107687,
            39101902,
            39093184,
            39110367,
            39109522,
            39104630,
            39111664,
            39109028,
            39108412,
            39110999,
            39098996,
            39104033,
            39110989
        ],
        "E": [
            39100436,
            39099837,
            39102349,
            39105427,
            39103107,
            39102633,
            39102885,
            39108880,
            39105761,
            39109203,
            39112620,
            39094389,
            39105905,
            39112883,
            39105943,
            39113374,
            39104376,
            39107310,
            39113606,
            39104223
        ],
        "D": [
            39097266,
            39096033,
            39098379,
            39099218,
            39098520,
            39098083,
            39096052,
            39105736,
            39099850,
            39105515,
            39109276,
            39104646,
            39099923,
            39115103,
            39100668,
            39103321,
            39099280,
            39102959,
            39097613,
            39097717
        ],
        "C": [
            39093177,
            39093378,
            39093798,
            39094808,
            39094793,
            39094824,
            39092448,
            39093937,
            39096177,
            39100038,
            39095064,
            39091685,
            39095797,
            39094884,
            39094704,
            39096565,
            39094721,
            39095152,
            39094603,
            39094594
        ],
        "B": [
            39090464,
            39091292,
            39090459,
            39091170,
            39091740,
            39091855,
            39090681,
            39099050,
            39093555,
            39099346,
            39098193,
            39090407,
            39092627,
            39091505,
            39092737,
            39092039,
            39090632,
            39091613,
            39090743,
            39091072
        ],
        "A": [
            39088999,
            39088905,
            39088870,
            39088899,
            39089924,
            39089350,
            39089008,
            39089597,
            39089600,
            39090391,
            39090409,
            39089125,
            39089740,
            39090714,
            39089522,
            39088868,
            39088892,
            39089011,
            39089148
        ]
    },
    "name": "B. Micro-World",
    "statement": "You have a Petri dish with bacteria and you are preparing to dive into\r\nthe harsh micro-world. But, unfortunately, you don\u2019t have any microscope\r\nnearby, so you can\u2019t watch them.You know that you have n bacteria in the\r\nPetri dish and size of the i-th bacteria is a_i. Also you know\r\nintergalactic positive integer constant K.The i-th bacteria can swallow\r\nthe j-th bacteria if and only if a_i > a_j and a_i\r\nle a_j + K. The j-th bacteria disappear, but the i-th bacteria doesn\u2019t\r\nchange its size. The bacteria can perform multiple swallows. On each\r\nswallow operation any bacteria i can swallow any bacteria j if a_i > a_j\r\nand a_i\r\nle a_j + K. The swallow operations go one after another.For example, the\r\nsequence of bacteria sizes a=[101, 53, 42, 102, 101, 55, 54] and K=1.\r\nThe one of possible sequences of swallows is: [101, 53, 42, 102,\r\nunderline{101}, 55, 54]\r\nto [101,\r\nunderline{53}, 42, 102, 55, 54]\r\nto [\r\nunderline{101}, 42, 102, 55, 54]\r\nto [42, 102, 55,\r\nunderline{54}]\r\nto [42, 102, 55]. In total there are 3 bacteria remained in the Petri\r\ndish.Since you don\u2019t have a microscope, you can only guess, what the\r\nminimal possible number of bacteria can remain in your Petri dish when\r\nyou finally will find any microscope.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int Maxn = 200005;\n\nint n, k;\nint a[Maxn];\n\nint main()\n{\n\tscanf(\"%d %d\", &n, &k);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%d\", &a[i]);\n\tsort(a, a + n);\n\tvector <int> S;\n\tfor (int i = 0; i < n; i++) {\n\t\twhile (!S.empty() && S.back() < a[i] && a[i] <= S.back() + k)\n\t\t\tS.pop_back();\n\t\tS.push_back(a[i]);\n\t}\n\tprintf(\"%d\\n\", int(S.size()));\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Micro-World.json",
    "editorial_link": "https://codeforces.com//blog/entry/59962",
    "editorial": "It can be proved that the optimal answer equals to a number of bacteria\r\nwhich can\u00e2\u0080\u0099t be eaten by any other bacteria. So for each bacteria you\r\nneed to check existence of any bacteria satisfying condition .There\r\nplenty of ways to check this condition. One of them is to sort array and\r\nfor each find minimal with or with two-pointers technique. Or you can\r\nuse the fact that and build solution around it.Result complexity is .\r\n"
}