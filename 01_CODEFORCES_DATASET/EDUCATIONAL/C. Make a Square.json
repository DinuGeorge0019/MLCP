{
    "link": "https://codeforces.com//contest/962/problem/C",
    "problemId": "173204",
    "problem_idx": "C",
    "shortId": "962C",
    "contest_number": "962",
    "problem_submissions": {
        "G": [
            37172159,
            83380479,
            37224207
        ],
        "F": [
            37161607,
            37156639,
            37157368,
            37160858,
            37168373,
            37163241,
            37162662,
            37165808,
            37164621,
            37171463,
            37169577,
            37166104,
            37163342,
            37173342,
            37165989,
            37161726,
            37173135,
            37178620
        ],
        "E": [
            37153541,
            37151735,
            37153606,
            37152970,
            37152043,
            37166043,
            37160792,
            37170495,
            37160553,
            37168665,
            37158596,
            37163761,
            37162634,
            37170755,
            37158513,
            37157137,
            37165223,
            37172878,
            37170948,
            37159083,
            37152437
        ],
        "D": [
            37152390,
            37151214,
            37151627,
            37153937,
            37156427,
            37155745,
            37155575,
            37154679,
            37154153,
            37157155,
            37157760,
            37157154,
            37160470,
            37158892,
            37157799,
            37158412,
            37156233,
            37151441
        ],
        "C": [
            37150680,
            37149822,
            37150471,
            37152075,
            37154129,
            37152922,
            37153000,
            37151382,
            37151999,
            37153115,
            37152133,
            37154853,
            37152337,
            37154136,
            37153887,
            37154222,
            37150166
        ],
        "B": [
            37148859,
            37148433,
            37150807,
            37150329,
            37150353,
            37151339,
            37150005,
            37149509,
            37149604,
            37150809,
            37150669,
            37150725,
            37163838,
            37150528,
            37151572,
            37173974,
            37149032
        ],
        "A": [
            37147366,
            37147343,
            37147362,
            37147371,
            37147659,
            37147394,
            37147434,
            37147365,
            37147570,
            37147605,
            37147447,
            37147530,
            37147430,
            37147619,
            37147410,
            37174371,
            37147400
        ]
    },
    "name": "C. Make a Square",
    "statement": "You are given a positive integer n, written without leading zeroes (for\r\nexample, the number is incorrect). In one operation you can delete any\r\ndigit of the given integer so that the result remains a positive integer\r\nwithout leading zeros.Determine the minimum number of operations that\r\nyou need to consistently apply to the given integer n to make from it\r\nthe square of some positive integer or report that it is impossible.An\r\ninteger x is the square of some positive integer if and only if x=y^2\r\nfor some positive integer y.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n\ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<double,double> pd;\n\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\n\ntemplate <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;\n\n#define FOR(i, a, b) for (int i=a; i<(b); i++)\n#define F0R(i, a) for (int i=0; i<(a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n\nconst int MOD = 1000000007;\nconst ll INF = 1e18;\nconst int MX = 100001;\n\nint dist = MOD, n;\n\nint get(int i) {\n    // cout << i << \"\\n\";\n    string a = to_string(i), b = to_string(n);\n    reverse(all(a)), reverse(all(b));\n    int ind = 0;\n    for (char c: a) {\n        while (ind < sz(b) && b[ind] != c) ind ++;\n        if (ind == sz(b)) return MOD;\n        ind ++;\n    }\n    return sz(b)-sz(a);\n}\n\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    cin >> n;\n    for (ll i = 1; i*i <= n; ++i) dist = min(dist,get(i*i));\n    if (dist == MOD) cout << -1;\n    else cout << dist;\n}\n\n// read the question correctly (is y a vowel?)\n// look out for SPECIAL CASES (n=1?) and overflow (ll vs int?)"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Make a Square.json",
    "editorial_link": "https://codeforces.com//blog/entry/58869",
    "editorial": "Consider the given integer as a string . Use the masks to brute all\r\npossible ways to delete digits. Let the remaining integer for the\r\ncurrent mask is a string . If the first character of is zero, skip this\r\nmask. Otherwise, we revert the string into the integer .Now we need to\r\ncheck does the is a square of some integer. It can be done in many ways,\r\nfor example, by adding all the integer squares less than into the (its\r\nsize will be approximately equal to the square root of ) and check that\r\nis in this set. If this is the case, we should update the answer with\r\nthe difference between the string and the string , because this\r\ndifference is equal to the number of deleted digits for the current\r\nmask.\r\n",
    "hint": []
}