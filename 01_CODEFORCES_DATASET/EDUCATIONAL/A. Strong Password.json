{
    "link": "https://codeforces.com//contest/1997/problem/A",
    "problemId": "2784494",
    "problem_idx": "A",
    "shortId": "1997A",
    "contest_number": "1997",
    "problem_submissions": {
        "F": [
            273554813,
            273562336,
            273555588,
            273558521,
            273558184,
            273555359,
            273562297,
            273565830,
            273546283,
            273544285,
            273566836,
            273566119,
            273585907,
            273568802,
            273555309,
            273574760,
            273588700,
            273578615,
            273575242,
            273588906
        ],
        "E": [
            273537014,
            273527320,
            273531772,
            273535164,
            273526322,
            273540324,
            273541553,
            273544138,
            273572699,
            273564384,
            273777832,
            273550008,
            273548972,
            273536881,
            273554636,
            273544552,
            273556209,
            273544842,
            273546282,
            273666737,
            273666189,
            273553954,
            273545375
        ],
        "D": [
            273513568,
            273513144,
            273513742,
            273512836,
            273510170,
            273516169,
            273515679,
            273515838,
            273510617,
            273513446,
            273517815,
            273525464,
            273518352,
            273521955,
            273529234,
            273520142,
            273512102,
            273520565,
            273515266,
            273520749
        ],
        "C": [
            273496813,
            273497815,
            273498571,
            273503315,
            273497876,
            273499195,
            273500860,
            273502791,
            273499347,
            273496485,
            273508798,
            273507268,
            273509198,
            273511156,
            273522873,
            273509562,
            273503505,
            273507797,
            273508832,
            273510628
        ],
        "B": [
            273490300,
            273489109,
            273490092,
            273494428,
            273492341,
            273491848,
            273492911,
            273494262,
            273492523,
            273491731,
            273501850,
            273497360,
            273496735,
            273504535,
            273502692,
            273496964,
            273493065,
            273497766,
            273504790,
            273497879
        ],
        "A": [
            273486630,
            273485994,
            273491236,
            273487968,
            273486132,
            273486581,
            273486579,
            273487757,
            273487599,
            273486090,
            273488578,
            273489964,
            273488719,
            273489029,
            273504662,
            273489452,
            273486034,
            273487994,
            273500770,
            273488432
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132154",
    "editorial": "The time it takes to type a string can actually be calculated as\r\nfollows: , where is the number of characters in the string, and is the\r\nnumber of pairs of adjacent equal characters (usually a character takes\r\nseconds to type, but the right character in every pair of adjacent equal\r\ncharacters takes only , so each pair reduces the total time by ). Since\r\nwe always add a new character, will increase by no matter what; so we\r\nneed to minimize .Now there are two cases: if there is a pair of\r\nadjacent equal characters in the string, we can decrease by by\r\n\"breaking\" it as follows: choose any character different from the\r\ncharacters in that pair, and insert it between them. It\u00e2\u0080\u0099s easy to see\r\nthat we can \"break\" at most one such pair, so we can\u00e2\u0080\u0099t do better;\r\notherwise, is already , so we just need to keep it equal to . For\r\nexample, we can choose any character not equal to the last character in\r\nthe string, and append it to the right of it. There are other solutions\r\nas well, like iterating on all possible characters and all possible\r\ninsertion positions.\r\n",
    "name": "A. Strong Password",
    "statement": "Monocarp\u2019s current password on Codeforces is a string s, consisting of\r\nlowercase Latin letters. Monocarp thinks that his current password is\r\ntoo weak, so he wants to into the password to make it stronger. Monocarp\r\ncan choose any letter and insert it anywhere, even before the first\r\ncharacter or after the last character.Monocarp thinks that the\r\npassword\u2019s strength is proportional to the time it takes him to type the\r\npassword. The time it takes to type the password is calculated as\r\nfollows: the time to type the first character is 2 seconds; for each\r\ncharacter other than the first, the time it takes to type it is 1 second\r\nif it is the same as the previous character, or 2 seconds otherwise. For\r\nexample, the time it takes to type the password is 14; the time it takes\r\nto type the password is 2; the time it takes to type the password is\r\n11.You have to help Monocarp insert a lowercase Latin letter into his\r\npassword so that the resulting password takes the maximum possible\r\namount of time to type.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>//#define int li#define f first#define s second\u00a0using namespace std;using li = long long;using ld = long double;\u00a0\u00a0int32_t main(){    ios_base::sync_with_stdio(0);    cin.tie(0);\u00a0    int t;    cin >> t;\u00a0    while(t--)    {        string s;        cin >> s;        bool F = 0;\u00a0        for(int i = 1; i < s.size(); i++)            if(s[i] == s[i - 1] && !F)            {                F = 1;                cout << s.substr(0, i) + (s[i] == 'a' ? 'b' : 'a') + s.substr(i, (int)s.size() - i) << \"\\n\";            }\u00a0        if(!F)            cout << s + (s.back() == 'a' ? 'b' : 'a') << \"\\n\";    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Strong Password.json"
}