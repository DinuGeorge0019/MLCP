{
    "link": "https://codeforces.com//contest/630/problem/F",
    "problemId": "48791",
    "problem_idx": "F",
    "shortId": "630F",
    "contest_number": "630",
    "problem_submissions": {
        "O": [
            16162903,
            16166611,
            16170272,
            16171000,
            16171810,
            16171540,
            16172283,
            16173069,
            16167245,
            16171219,
            16164343,
            16169317,
            16174467,
            16172825
        ],
        "Q": [
            16161959,
            16164291,
            16168164,
            16164256,
            16165332,
            16161924,
            16168611,
            16169122,
            16169587,
            16167987,
            16169984,
            16166498,
            16167531,
            16170624
        ],
        "P": [
            16159753,
            16168311,
            16167051,
            16167988,
            16168847,
            16164766,
            16173513,
            16170710,
            16173871,
            16179782,
            16173109,
            16173490,
            16172784,
            16177565
        ],
        "M": [
            16155509,
            16162573,
            16165539,
            16162684,
            16162420,
            16167688,
            16166121,
            16164621,
            16163626,
            16164560,
            16162370,
            16165223,
            16164963,
            16163595
        ],
        "E": [
            16152380,
            16160619,
            16161712,
            16147294,
            16175954,
            16175750,
            16175431,
            16166073,
            16169901,
            16175945,
            16147341,
            16150297,
            16152724,
            16177249
        ],
        "N": [
            16151590,
            16153799,
            16151528,
            16157513,
            16146949,
            16155784,
            16150975,
            16151370,
            16158313,
            16151633,
            16163001,
            16163835,
            16162449,
            16154984
        ],
        "R": [
            16151159,
            16154632,
            16149854,
            16156275,
            16152605,
            16151989,
            16161091,
            16150805,
            16162196,
            16170548,
            16164486,
            16157270
        ],
        "K": [
            16150889,
            16150119,
            16148623,
            16153831,
            16147112,
            16154207,
            16149001,
            16147948,
            16151167,
            16150379,
            16157788,
            16162488,
            16148339,
            16146783
        ],
        "J": [
            16149936,
            16145918,
            16144654,
            16150906,
            16145412,
            16145798,
            16147365,
            16144163,
            16149421,
            16146206,
            16155219,
            16146266,
            16145884,
            16145928
        ],
        "I": [
            16149446,
            16159581,
            16153928,
            16168967,
            16155732,
            16149794,
            16155421,
            16153120,
            16161689,
            16156527,
            16159462
        ],
        "H": [
            16148788,
            16153028,
            16147725,
            16150057,
            16150523,
            16147874,
            16147074,
            16150571,
            16153180,
            16152828,
            16155334
        ],
        "G": [
            16145821,
            16151098,
            16146735,
            16149212,
            16151570,
            16153204,
            16152288,
            16148784,
            16152025,
            16152257,
            16151581
        ],
        "F": [
            16145172,
            16147675,
            16146138,
            16147927,
            16145028,
            16146758,
            16146367,
            16146858,
            16150133,
            16146605,
            16150882,
            16147502
        ],
        "D": [
            16144568,
            16145159,
            16145434,
            16145697,
            16147726,
            16145377,
            16150271,
            16145822,
            16145733,
            16147562,
            16145418,
            16150369,
            16148886,
            16145271
        ],
        "C": [
            16144140,
            16145561,
            16144178,
            16144987,
            16144428,
            16144887,
            16145346,
            16144900,
            16145360,
            16145353,
            16144827,
            16144860,
            16145310,
            16144685
        ],
        "B": [
            16143836,
            16144446,
            16145107,
            16269732,
            16144253,
            16144142,
            16144388,
            16144927,
            16144633,
            16144917,
            16144673,
            16144408,
            16144556,
            16144704,
            16144100
        ],
        "A": [
            16143484,
            16143767,
            16143487,
            16143551,
            16143694,
            16143671,
            16143921,
            16143662,
            16143576,
            16143506,
            16143977,
            16143785,
            16143578,
            16143548,
            16143505
        ],
        "L": [
            16156555,
            16156947,
            16160816,
            16157607,
            16162858,
            16158499,
            16154525,
            16148850,
            16158336,
            16159403,
            16163163,
            16162239
        ]
    },
    "name": "F. Selection of Personnel",
    "statement": "One company of IT City decided to create a group of innovative\r\ndevelopments consisting from to people and hire new employees for it.\r\nAfter placing an advertisment the company received resumes. Now the HR\r\ndepartment has to evaluate each possible group composition and select\r\none of them. Your task is to count the number of variants of group\r\ncomposition to evaluate.\r\n",
    "solutions": [
        "/**\n *    author:  enot.1.10, Vladimir Smykalov ([emailÂ protected])\n *    created: 18.02.2016 17:50:32       \n**/\n#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\n#define F first\n#define S second\n#define pb push_back\n#define mp make_pair\n#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)\n#define eprintf(...) fprintf(stderr, __VA_ARGS__),fflush(stderr)\n#define sz(a) ((int)(a).size())\n#define all(a) (a).begin(),a.end()\n#define pw(x) (1LL<<(x))\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef double dbl;\ntypedef vector<int> vi;\ntypedef pair<int, int> pi;\n\nconst int inf = (int)1.01e9;\nconst dbl eps = 1e-9;\n\n/* --- main part --- */\n\n#define TASK \"1\"\n\nll cnk(ll n, int k)\n{\n    ll res = 1;\n    forn(i, k) res = (res * (n - i)) / (i + 1);\n    return res;\n}\n\nint main()\n{\n    #ifdef home\n        assert(freopen(TASK\".in\", \"r\", stdin));\n        assert(freopen(TASK\".out\", \"w\", stdout));\n    #endif\n    ll n, t;\n\n    cin >> n;\n    ll res = cnk(n, 5) + cnk(n, 6) + cnk(n, 7);\n    cout << res;\n    #ifdef home\n        eprintf(\"Time: %d ms\\n\", (int)(clock() * 1000. / CLOCKS_PER_SEC));\n    #endif\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Selection of Personnel.json",
    "editorial_link": "https://codeforces.com//blog/entry/23604?locale=en",
    "editorial": "The amount of ways to choose a group of 5 people from n candidates is equal to the number of combinations , the amount of ways to choose a group of 6 people from n candidates is , the amount of ways to choose a group of 7 people from n candidates is , the amount of ways to choose a group of 5, 6 or 7 people from n candidates is .\n\nTo avoid 64-bit integer overflow  can be calculated in the following way: n / 1 * (n - 1) / 2 * (n - 2) / 3 * (n - 3) / 4 * (n - 4) / 5 * (n - 5) / 6 * (n - 6) / 7. Each division returns an integer because each prefix of this formula after division is also the number of combinations .",
    "hint": []
}