{
    "link": "https://codeforces.com//contest/632/problem/E",
    "problemId": "50147",
    "problem_idx": "E",
    "shortId": "632E",
    "contest_number": "632",
    "problem_submissions": {
        "F": [
            16449954,
            16449774,
            16448025,
            16447543,
            16474130,
            16447469,
            16465805,
            16465734,
            16449676,
            16449356,
            16449961,
            16450068,
            16557410,
            16449769,
            16450214,
            16449702,
            16464012
        ],
        "E": [
            16447028,
            16449753,
            16445979,
            16453840,
            16453803,
            16448350,
            16447568,
            16449040,
            16605043,
            16448762,
            16447224,
            16448913,
            16449761,
            128072075,
            44908882,
            16457507
        ],
        "D": [
            16446074,
            16445153,
            16444353,
            16454357,
            16446366,
            16445038,
            16445634,
            16444742,
            16453325,
            16445984,
            16447854,
            16446133,
            16445283,
            16446954,
            16447982,
            16445318,
            16444664,
            16445724
        ],
        "C": [
            16444421,
            16444120,
            16443606,
            16443645,
            16445009,
            16444221,
            16444738,
            16443779,
            16445075,
            16444107,
            16445524,
            16449207,
            16450843,
            16448580,
            16448209,
            16447449,
            16444580,
            16444579,
            16443960,
            16444153,
            24720150,
            24720135
        ],
        "B": [
            16443783,
            16443777,
            16443815,
            16443887,
            16444524,
            16444113,
            16444187,
            16451169,
            16443637,
            16443942,
            16443903,
            16444676,
            16444341,
            16444136,
            16444765,
            16447115,
            16444024,
            16443821,
            16443819
        ],
        "A": [
            16443584,
            16443594,
            16443558,
            16443577,
            16443765,
            16443750,
            16443746,
            16445513,
            16443626,
            16443702,
            16443955,
            16443808,
            16443676,
            16444067,
            16446687,
            16443663,
            16443559,
            16443628
        ]
    },
    "name": "E. Thief in a Shop",
    "statement": "A thief made his way to a shop.As usual he has his lucky knapsack with\r\nhim. The knapsack can contain objects. There are kinds of products in\r\nthe shop and an infinite number of products of each kind. The cost of\r\none product of kind is .The thief is greedy, so he will take exactly\r\nproducts (it\u2019s possible for some kinds to take several products of that\r\nkind).Find all the possible total costs of products the thief can nick\r\ninto his knapsack.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <set>\n#include <map>\n#include <string>\n#include <vector>\n#include <bitset>\n#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <queue>\n\n\ntypedef long long ll;\ntypedef long double ld;\n\nusing namespace std;\n\nint n, k;\nint dp[1000010];\nvector<int> vv;\n\nint main() {\n\tcin >> n >> k;\n\tint mn = 10000;\n\tfor (int i = 0; i < n; ++i) {\n\t\tint a;\n\t\tcin >> a;\n\t\tmn = min(mn, a);\n\t\tvv.push_back(a);\n\t}\n\tfor (int i = 0; i < (int)vv.size(); ++i)\n\t\tvv[i] -= mn;\n\tsort(vv.begin(), vv.end());\n\tvv.resize(unique(vv.begin(), vv.end()) - vv.begin());\n\tint mx = k * vv.back();\n\tfor (int j = 0; j <= mx; ++j)\n\t\tdp[j] = k + 1;\n\tdp[0] = 0;\n\tfor (int i = 0; i < (int)vv.size(); ++i) {\n\t\tint x = vv[i];\n\t\tif (x == 0)\n\t\t\tcontinue;\n\t\tfor (int j = 0; j <= mx - x; ++j)\n\t\t\tdp[j + x] = min(dp[j + x], dp[j] + 1);\n\t}\n\tfor (int i = 0; i <= mx; ++i)\n\t\tif (dp[i] <= k)\n\t\t\tprintf(\"%d \", mn * k + i);\n\treturn 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "divide and conquer",
        "dp",
        "fft",
        "math"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Thief in a Shop.json",
    "editorial_link": "https://codeforces.com//blog/entry/43493",
    "editorial": "The problem was suggested by Alexey Chesnokov CleRIC. Let , then it is\r\nthe standard problem which can be solved by FFT (Fast Fourier\r\nTransform). The solution is the following: consider the polynomial which\r\nthe -th coefficient equals to one if and only if there is the number in\r\nthe given array. Let\u00e2\u0080\u0099s multiply that polynomial by itself and find for\r\nwhich the coefficient in square not equals to . Those values will be in\r\nthe answer. Easy to modificate the solution for the arbitrary . We\r\nshould simply calculate the -th degree of the polynomial. The complexity\r\nwill be , where is the maximal sum. We can improve that solution.\r\nInstead of calculating the -th degree of the polynomial we can calculate\r\nthe -th degree of the DFT of the polynomial. The only problem is the\r\nlarge values of the -th degrees. We can\u00e2\u0080\u0099t use FFT with complex numbers,\r\nbecause of the precision problems. But we can do that with NTT\r\n(Number-theoretic transform). But that solution also has a problem. It\r\ncan happen that some coefficients became equals to zero modulo , but\r\nactually they are not equal to zero. To get round that problem we can\r\nchoose two-three random modules and get the complexity . The main author\r\nsolution has the complexity (FFT with complex numbers), the second\r\nsolution has the same complexity, but uses NTT and the third solution\r\nhas the improved complexity (but it was already hacked by halyavin). ++\r\nsolution, complex FFT by me. ++ solution, NTT by me. ++ solution,\r\nimproved NTT by me. ++ solution by CleRIC. P.S.: To get faster solution\r\nyou should each time multiply the polynomials of the required degree,\r\nbut not of the degree . Complexity: or , depending the bravery of the\r\ncoder :-) UPD: It turns out that the first approach also has complexity\r\n. See below the comment of halyavin.\r\n"
}