{
    "link": "https://codeforces.com//contest/1117/problem/G",
    "problemId": "300047",
    "problem_idx": "G",
    "shortId": "1117G",
    "contest_number": "1117",
    "problem_submissions": {
        "G": [
            50133387,
            50123254,
            50123975,
            50124239,
            50123132,
            50123974,
            50123215,
            50127013,
            50125132,
            50130140,
            50133285,
            50124682,
            50142168,
            50142000,
            50128625,
            50127307,
            50133494,
            50129719,
            50134469,
            50129830
        ],
        "F": [
            50129894,
            50129949,
            50128458,
            50125468,
            50258283,
            50124925,
            50127988,
            50122434,
            50127178,
            50132498,
            50126909,
            50125577
        ],
        "E": [
            50113506,
            50115627,
            50118164,
            50107209,
            50118889,
            50116932,
            50118288,
            50119948,
            50118689,
            50116057,
            50116780,
            50120258,
            50120803,
            50119739,
            50121927,
            50120709,
            50116907,
            50127759,
            50122643
        ],
        "D": [
            50110620,
            50112367,
            50131628,
            50126652,
            50113412,
            50109860,
            50115490,
            50114987,
            50116012,
            50113616,
            50125192,
            50118574,
            50115262,
            50116431,
            50116297,
            50116049,
            50110665,
            50113350,
            50117624
        ],
        "C": [
            50108198,
            50108891,
            50111125,
            50127915,
            50107557,
            50112815,
            50111363,
            50117842,
            50111074,
            50110415,
            50111200,
            50113692,
            50111129,
            50113480,
            50108576,
            50111462,
            50115486,
            50110963,
            50119614
        ],
        "B": [
            50104160,
            50104529,
            50104672,
            50128597,
            50104068,
            50103950,
            50111786,
            50105649,
            50106152,
            50105125,
            50105851,
            50105634,
            50104517,
            50104965,
            50103901,
            50105704,
            50105385,
            50105318,
            50104942
        ],
        "A": [
            50102635,
            50102746,
            50102713,
            50128246,
            50102816,
            50102612,
            50103360,
            50104051,
            50103578,
            50102668,
            50103665,
            50103717,
            50102845,
            50102752,
            50102665,
            50102783,
            50102642,
            50102966,
            50102721
        ]
    },
    "name": "G. Recursive Queries",
    "statement": "You are given a permutation p_1, p_2,\r\ndots, p_n. You should answer q queries. Each query is a pair (l_i, r_i),\r\nand you should calculate f(l_i, r_i).Let’s denote m_{l, r} as the\r\nposition of the maximum in subsegment p_l, p_{l+1},\r\ndots, p_r.Then f(l, r) = (r - l + 1) + f(l, m_{l,r} - 1) + f(m_{l,r} +\r\n1, r) if l\r\nle r or 0 otherwise.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef signed long long ll;\n\n#undef _P\n#define _P(...) (void)printf(__VA_ARGS__)\n#define FOR(x,to) for(x=0;x<(to);x++)\n#define FORR(x,arr) for(auto& x:arr)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define ALL(a) (a.begin()),(a.end())\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\n//-------------------------------------------------------\n\nint N,Q;\nint P[1010101];\nint L[1010101],R[1010101];\n\nint Lma[1010101],Rma[1010101];\nvector<int> delL[1010101],delR[1010101];\nvector<int> QL[1010101],QR[1010101];\ntemplate<class V,int NV> class SegTree_1 {\npublic:\n\tvector<V> val;\n\tstatic V const def=0;\n\tV comp(V l,V r){ return max(l,r);};\n\t\n\tSegTree_1(){val=vector<V>(NV*2,def);};\n\tV getval(int x,int y,int l=0,int r=NV,int k=1) { // x<=i<y\n\t\tif(r<=x || y<=l) return def;\n\t\tif(x<=l && r<=y) return val[k];\n\t\treturn comp(getval(x,y,l,(l+r)/2,k*2),getval(x,y,(l+r)/2,r,k*2+1));\n\t}\n\tvoid update(int entry, V v) {\n\t\tentry += NV;\n\t\tval[entry]=comp(v,val[entry]);\n\t\twhile(entry>1) entry>>=1, val[entry]=comp(val[entry*2],val[entry*2+1]);\n\t}\n};\nSegTree_1<int,1<<20> st;\n\ntemplate<class V, int ME> class BIT {\npublic:\n\tV bit[1<<ME];\n\tV operator()(int e) {if(e<0) return 0;V s=0;e++;while(e) s+=bit[e-1],e-=e&-e; return s;}\n\tvoid add(int e,V v) { e++; while(e<=1<<ME) bit[e-1]+=v,e+=e&-e;}\n};\nBIT<ll,20> sum;\nBIT<int,20> mu;\n\nll ret[1010101];\n\nvoid solve() {\n\tint i,j,k,l,r,x,y; string s;\n\t\n\tscanf(\"%d%d\",&N,&Q);\n\tfor(i=1;i<=N;i++) {\n\t\tscanf(\"%d\",&P[i]);\n\t\tLma[i]=st.getval(P[i],N+1);\n\t\tdelL[Lma[i]].push_back(i);\n\t\tst.update(P[i],i);\n\t\tsum.add(i,i-Lma[i]);\n\t}\n\tFOR(i,st.val.size()) st.val[i]=0;\n\tfor(i=N;i>=1;i--) {\n\t\tRma[i]=N+1-st.getval(P[i],N+1);\n\t\tdelR[Rma[i]].push_back(i);\n\t\tst.update(P[i],N+1-i);\n\t}\n\t\n\tFOR(i,Q) {\n\t\tscanf(\"%d\",&L[i]);\n\t\tQL[L[i]].push_back(i);\n\t}\n\tFOR(i,Q) {\n\t\tscanf(\"%d\",&R[i]);\n\t\tQR[R[i]].push_back(i);\n\t}\n\t\n\tFOR(i,N+1) {\n\t\tFORR(q,QL[i]) ret[q]+=(sum(R[q])-sum(L[q]-1))-1LL*i*(mu(R[q])-mu(L[q]-1));\n\t\tFORR(x,delL[i]) {\n\t\t\tsum.add(x,x+1-(sum(x)-sum(x-1)));\n\t\t\tmu.add(x,1);\n\t\t}\n\t}\n\tZERO(mu.bit);\n\tZERO(sum.bit);\n\tfor(i=1;i<=N;i++) {\n\t\tsum.add(i,Rma[i]-i-1);\n\t}\n\tfor(i=N+1;i>=1;i--) {\n\t\tFORR(q,QR[i]) ret[q]+=(sum(R[q])-sum(L[q]-1))+1LL*i*(mu(R[q])-mu(L[q]-1));\n\t\tFORR(x,delR[i]) {\n\t\t\tsum.add(x,-x-(sum(x)-sum(x-1)));\n\t\t\tmu.add(x,1);\n\t\t}\n\t}\n\t\n\tFOR(i,Q) cout<<ret[i]<<\" \";\n\tcout<<endl;\n\t\n}\n\n\nint main(int argc,char** argv){\n\tstring s;int i;\n\tif(argc==1) ios::sync_with_stdio(false), cin.tie(0);\n\tFOR(i,argc-1) s+=argv[i+1],s+='\\n'; FOR(i,s.size()) ungetc(s[s.size()-1-i],stdin);\n\tcout.tie(0); solve(); return 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\G. Recursive Queries.json",
    "editorial_link": "https://codeforces.com//blog/entry/65365",
    "editorial": "Letâs denote and, analogically, . Then, we can note that . So we can\r\nswitch to calculating (and ).Letâs be the closest from the left to\r\nelement such that . To calculate we will look from the other side: we\r\nwill look at it as the sum of lengths of segments induced by each\r\nelement from . Each element ( will add to value equal to , or a\r\npiecewise linear function if we look at as a variable. And is a value of\r\na sum of linear functions induced by in a point .To process it\r\nefficiently we can one by one add induced linear functions to the\r\ncorresponding subsegments using BIT or Segment Tree and if weâve added\r\nfunctions induced by we can calculate answer for all queries which looks\r\nlike .To calculate we can just reverse array and all queries.Result time\r\ncomplexity is . Note, that itâs still works quite slow, so you should\r\nuse fast data structures like BIT of iterative segment tree.\r\n",
    "hint": []
}