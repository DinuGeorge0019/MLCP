{
    "link": "https://codeforces.com//contest/1073/problem/B",
    "problemId": "243297",
    "problem_idx": "B",
    "shortId": "1073B",
    "contest_number": "1073",
    "problem_submissions": {
        "G": [
            44873257,
            44854949,
            44872747,
            44857777,
            44904113,
            44992378,
            44992266,
            44905426,
            44884903,
            44945894,
            44917741
        ],
        "F": [
            44867029,
            44865010,
            44864483,
            44871287,
            44872814,
            44868847,
            44879071,
            44874774,
            44882300,
            44882274,
            44882259,
            44904164,
            45084744,
            45695799,
            44888299
        ],
        "E": [
            44859477,
            44871290,
            44861403,
            44863217,
            44864294,
            44859185,
            44863995,
            44861353,
            44862909,
            44862761,
            44864156,
            44861997,
            44866321,
            44865560,
            44864610,
            44864622,
            44866506,
            44866536,
            44864718,
            44867428
        ],
        "D": [
            44857129,
            44872779,
            44856075,
            44857988,
            44858337,
            44861164,
            44866799,
            44854399,
            44858649,
            44887677,
            44857825,
            44863255,
            44857894,
            44856716,
            44859464,
            44857349,
            44858547,
            44860520,
            44859062,
            44858058
        ],
        "C": [
            44852935,
            44867793,
            44850047,
            44853493,
            44853830,
            44872109,
            44870370,
            44851223,
            44852821,
            44887759,
            44853381,
            44855264,
            44855099,
            44853761,
            44855656,
            44859785,
            44852765,
            44856270,
            44855283,
            44855046
        ],
        "B": [
            44847780,
            44861886,
            44847247,
            44849026,
            44846682,
            44849066,
            44868560,
            44847702,
            44847526,
            44848456,
            44847355,
            44849516,
            44847583,
            44849338,
            44847283,
            44847620,
            44847641,
            44850429,
            44848272
        ],
        "A": [
            44846309,
            44861253,
            44846364,
            44847286,
            44846147,
            44847332,
            44867659,
            44846213,
            44846204,
            44846510,
            44846224,
            44846724,
            44846207,
            44847114,
            44846296,
            44846271,
            44846181,
            44848595,
            44846401
        ]
    },
    "name": "B. Vasya and Books",
    "statement": "Vasya has got n books, numbered from 1 to n, arranged in a stack. The\r\ntopmost book has number a_1, the next one a_2, and so on. The book at\r\nthe bottom of the stack has number a_n. .Vasya wants to move all the\r\nbooks to his backpack in n steps. During i-th step he wants to move the\r\nbook number b_i into his backpack. If the book with number b_i is in the\r\nstack, he takes this book and all the books the book b_i, and puts them\r\ninto the backpack; otherwise he does nothing and begins the next step.\r\nFor example, if books are arranged in the order [1, 2, 3] (book 1 is the\r\ntopmost), and Vasya moves the books in the order [2, 1, 3], then during\r\nthe first step he will move two books (1 and 2), during the second step\r\nhe will do nothing (since book 1 is already in the backpack), and during\r\nthe third step one book (the book number 3). Help Vasya! Tell him the\r\nnumber of books he will put into his backpack during each step.\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> a(n), b(n);\n  for (int i = 0; i < n; i++) {\n    scanf(\"%d\", &a[i]);\n    a[i]--;\n  }\n  for (int i = 0; i < n; i++) {\n    scanf(\"%d\", &b[i]);\n    b[i]--;\n  }\n  vector<bool> in(n);\n  int j = 0;\n  for (int i = 0; i < n; i++) {\n    int ans = 0;\n    while (!in[b[i]]) {\n      in[a[j++]] = true;\n      ans++;\n    }\n    printf(\"%d \", ans);\n  }\n  putchar('\\n');\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Vasya and Books.json",
    "editorial_link": "https://codeforces.com/blog/entry/62742",
    "editorial": "Let\u00e2\u0080\u0099s maintain the pointer to the topmost non-deleted book and whether\r\neach book whether is removed from the stack or not. Initially, all books\r\nare in a stack, and is 0 (if we store the array 0-indexed). We will\r\nprocess the array in the order . If the current book is removed from the\r\nstack, then the answer for it is zero. Otherwise, we will increment the\r\npointer until the equality is satisfied, while marking all the\r\nintermediate books in the array . After that, the answer for the book\r\nwill be the number of marked books in the array (including itself).Since\r\nthe pointer shifts times at total, we get a solution with an complexity.\r\n"
}