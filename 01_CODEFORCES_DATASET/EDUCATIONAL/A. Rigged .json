{
    "link": "https://codeforces.com//contest/1879/problem/A",
    "problemId": "2226285",
    "problem_idx": "A",
    "shortId": "1879A",
    "contest_number": "1879",
    "problem_submissions": {
        "F": [
            224937536,
            224935202,
            224950610,
            224926179,
            224962842,
            224969051,
            224930929,
            224967422,
            224963265,
            224966461,
            224940572,
            224966841,
            224954569,
            225047271,
            224982141,
            224973229,
            225020484,
            225376642,
            224974176,
            225441069
        ],
        "E": [
            224915766,
            224914283,
            224947954,
            224935300,
            224927963,
            224966463,
            224932997,
            224929889,
            224950618,
            224966233,
            224954318,
            224969484,
            224930880,
            224920140,
            224922897,
            224920584,
            224928749,
            224925724,
            224924188,
            224933925
        ],
        "D": [
            224888044,
            224890483,
            224896670,
            224904072,
            224896642,
            224898559,
            224895640,
            224898718,
            224909765,
            224890763,
            224903520,
            224917804,
            224935485,
            224900120,
            224899388,
            224897270,
            224896991,
            224895504,
            224897180,
            224904052
        ],
        "C": [
            224883111,
            224886635,
            224905698,
            224893770,
            224888377,
            224894906,
            224886723,
            224893779,
            224902835,
            224885562,
            224895691,
            224922809,
            224940882,
            224893191,
            224888785,
            224888462,
            224890469,
            224889684,
            224903420,
            224892974
        ],
        "B": [
            224880512,
            224883808,
            224889537,
            224888023,
            224883379,
            224885924,
            224899117,
            224885706,
            224885740,
            224883031,
            224886861,
            224914364,
            224945905,
            224884557,
            224881988,
            224884765,
            224884529,
            224883777,
            224884553,
            224888797
        ],
        "A": [
            224880000,
            224880258,
            224880343,
            224880667,
            224881398,
            224880389,
            224901703,
            224881377,
            224880233,
            224880172,
            224880548,
            224906481,
            224947822,
            224880196,
            224880217,
            225049284,
            224880515,
            224880208,
            224880388,
            224880513,
            224881480
        ]
    },
    "name": "A. Rigged ",
    "statement": "Monocarp organizes a weightlifting competition. There are n athletes\r\nparticipating in the competition, the i-th athlete has strength s_i and\r\nendurance e_i. The 1-st athlete is Monocarp’s friend Polycarp, and\r\nMonocarp really wants Polycarp to win.The competition will be conducted\r\nas follows. The jury will choose a positive integer w, which denotes the\r\nweight of the barbell that will be used in the competition. The goal for\r\neach athlete is to lift the barbell as many times as possible. The\r\nathlete who lifts the barbell the most amount of times will be declared\r\nthe winner .If the barbell’s weight w is than the strength of the i-th\r\nathlete s_i, then the i-th athlete will be unable to lift the barbell\r\neven one single time. Otherwise, the i-th athlete will be able to lift\r\nthe barbell, and the number of times he does it will be equal to his\r\nendurance e_i.For example, suppose there are 4 athletes with parameters\r\ns_1 = 7, e_1 = 4; s_2 = 9, e_2 = 3; s_3 = 4, e_3 = 6; s_4 = 2, e_4 = 2.\r\nIf the weight of the barbell is 5, then: the first athlete will be able\r\nto lift the barbell 4 times; the second athlete will be able to lift the\r\nbarbell 3 times; the third athlete will be unable to lift the barbell;\r\nthe fourth athlete will be unable to lift the barbell. Monocarp wants to\r\nchoose w in such a way that Polycarp (the 1-st athlete) wins the\r\ncompetition. Help him to choose the value of w, or report that it is\r\nimpossible.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\n#pragma GCC optimize (\"O3\")\n#pragma GCC target (\"sse4\")\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n \ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<ld,ld> pd;\n \ntypedef vector<int> vi;\ntypedef vector<ld> vd;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\ntypedef vector<pl> vpl;\ntypedef vector<cd> vcd;\n\ntemplate<class T> using pq = priority_queue<T>;\ntemplate<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;\n \n#define FOR(i, a, b) for (int i=a; i<(b); i++)\n#define F0R(i, a) for (int i=0; i<(a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n#define trav(a,x) for (auto& a : x)\n#define uid(a, b) uniform_int_distribution<int>(a, b)(rng)\n \n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n#define ins insert\n\ntemplate<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\ntemplate<class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\n \nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\nvoid __print(int x) {cerr << x;}\nvoid __print(long x) {cerr << x;}\nvoid __print(long long x) {cerr << x;}\nvoid __print(unsigned x) {cerr << x;}\nvoid __print(unsigned long x) {cerr << x;}\nvoid __print(unsigned long long x) {cerr << x;}\nvoid __print(float x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(long double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\n\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << \", \"; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \", \" : \"\"), __print(i); cerr << \"}\";}\nvoid _print() {cerr << \"]\\n\";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\n#ifdef DEBUG\n#define dbg(x...) cerr << \"\\e[91m\"<<__func__<<\":\"<<__LINE__<<\" [\" << #x << \"] = [\"; _print(x); cerr << \"\\e[39m\" << endl;\n#else\n#define dbg(x...)\n#endif\n\n\nconst int MOD = 1000000007;\nconst char nl = '\\n';\nconst int MX = 100001; \n\nvoid solve() {\n    int N; cin >> N;\n    int S[N], E[N]; F0R(i, N) cin >> S[i] >> E[i];\n    FOR(i, 1, N) {\n        if (S[i] >= S[0] && E[i] >= E[0]) {\n            cout << -1 << nl; return;\n        }\n    }\n    cout << S[0] << nl;\n\n}\n \nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n\n    int T = 1;\n    cin >> T;\n    while(T--) {\n        solve();\n    }\n\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Rigged .json",
    "editorial_link": "https://codeforces.com//blog/entry/120773",
    "editorial": "Letâs figure out the optimal value of . If , then Polycarp cannot lift\r\nthe barbell. If , then some athletes having less strength than Polycarp\r\nmight be able to lift the barbell. So the optimal value of is . All\r\nthatâs left to do is check that there are such athletes who are able to\r\nlift weight greater than or equal to times. If such athletes exist, then\r\nthe answer is . Otherwise, the answer is .\r\n",
    "hint": []
}