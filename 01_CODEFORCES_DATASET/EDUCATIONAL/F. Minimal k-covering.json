{"link": "https://codeforces.com//contest/976/problem/F", "problemId": "179790", "problem_idx": "F", "shortId": "976F", "contest_number": "976", "problem_submissions": {"F": [37763363, 37769230, 37771809, 37769578, 37765676, 37771852, 37775489, 40889146, 37778041, 37772108, 37770120, 37757030], "E": [37759612, 37757569, 37763598, 37765549, 37756497, 37767476, 37763904, 37761921, 37762005, 37760373, 37795909, 37761211, 37765405, 72387001, 37763422, 37761979, 37766932, 37762131, 37774529, 37769526], "D": [37757523, 37766476, 37758195, 37762921, 38269676, 37760546, 37768835, 37769171, 37773037, 37769443, 37775265, 37789135, 37775829, 37773943, 37772078, 37768377, 37772102], "C": [37753334, 37753217, 37761367, 37754559, 37753952, 37755372, 37756629, 37754330, 37754742, 37756131, 37753666, 37754884, 37754248, 37754586, 37754439, 37755438, 37764985, 37761302, 37758356], "B": [37752460, 37751754, 37759385, 37753338, 37752699, 37754118, 37754359, 37753149, 37755340, 37754515, 37752717, 37753548, 37753298, 37756555, 37753663, 37754307, 37766708, 37755815, 37756102], "A": [37750664, 37750612, 37751755, 37750646, 37750641, 37751080, 37750713, 37750665, 37750980, 37750618, 37750952, 37750900, 37751444, 37752036, 37752198, 37763975, 37751822, 37753480]}, "name": "F. Minimal k-covering", "statement": "You are given a bipartite graph , is the set of vertices of the first\r\npart, is the set of vertices of the second part and is the set of edges.\r\nThere might be multiple edges.Let\u2019s call some subset of its edges iff\r\nthe graph has each of its vertices incident to at least edges. is such a\r\n-covering that the size of the subset is minimal possible.Your task is\r\nto find minimal -covering for each , where is the minimal degree of any\r\nvertex in graph .\r\n", "solutions": ["#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:336777216\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n\ntypedef tuple<int, int, int> t3;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\n\nint IT_MAX = 1 << 17;\nconst ll MOD = 998244353;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 0x3f3f3f3f3f3f3f3f;\nconst db PI = acos(-1);\nconst db ERR = 1e-10;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<n;i++)\n#define Se second\n#define Fi first\n\nclass edge {\npublic:\n\tint s, e, f;\n\tedge() {\n\t\ts = e = f = 0;\n\t}\n\tedge(int s, int e, int f) : s(s), e(e), f(f) {}\n};\nvector <edge> Ve;\nvector <int> conn[10050];\nvoid epush(int s, int e, int f) {\n\tconn[s].push_back(Ve.size());\n\tconn[e].push_back(Ve.size() + 1);\n\tVe.emplace_back(s, e, f);\n\tVe.emplace_back(e, s, 0);\n}\n\nint dis[10050];\nint dchk[10050];\nint pos[10050];\nint DFS(int n, int snk, int C) {\n\tif (n == snk) return 1;\n\tdchk[n] = C;\n\tfor (; pos[n] < conn[n].size(); pos[n]++) {\n\t\tint it = conn[n][pos[n]];\n\t\tedge &ed = Ve[it];\n\t\tif (ed.f == 0 || dchk[ed.e] == C || dis[ed.e] != dis[ed.s] + 1) continue;\n\t\tif (DFS(ed.e, snk, C)) {\n\t\t\tVe[it].f--;\n\t\t\tVe[it ^ 1].f++;\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\nint getFlow(int src, int snk) {\n\tint i, j;\n\tvector <int> Vu;\n\tfor (i = 0; i <= snk; i++) dis[i] = INF, dchk[i] = pos[i] = 0;\n\tdis[src] = 0;\n\tVu.push_back(src);\n\tfor (i = 0; i < Vu.size(); i++) {\n\t\tfor (auto it : conn[Vu[i]]) {\n\t\t\tif (Ve[it].f == 0 || dis[Ve[it].e] != INF) continue;\n\t\t\tdis[Ve[it].e] = dis[Ve[it].s] + 1;\n\t\t\tVu.push_back(Ve[it].e);\n\t\t}\n\t}\n\tif (dis[snk] == INF) return 0;\n\n\tint f = 0;\n\twhile (DFS(src, snk, f + 1)) f++;\n\treturn f;\n}\n\nint deg[4050];\nint in[2050][2];\n\nvector <int> Vl[4050];\nbool echk[2050];\nint main() {\n\tint N1, N2, M, i, j, k;\n\tscanf(\"%d %d %d\", &N1, &N2, &M);\n\tfor (i = 1; i <= M; i++) {\n\t\tint t1, t2;\n\t\tscanf(\"%d %d\", &t1, &t2);\n\t\tdeg[t1]++, deg[N1 + t2]++;\n\t\tepush(t1, t2 + N1, 1);\n\n\t\tin[i][0] = t1, in[i][1] = t2;\n\t}\n\tint src = 0, snk = N1 + N2 + 1;\n\tfor (i = 1; i <= N1; i++) epush(src, i, 0);\n\tfor (i = 1; i <= N2; i++) epush(i + N1, snk, 0);\n\n\tint mn = INF;\n\tfor (i = 1; i <= N1 + N2; i++) mn = min(mn, deg[i]);\n\n\tprintf(\"0\\n\");\n\tfor (int q = 1; q <= mn; q++) {\n\t\tfor (auto &it : Ve) {\n\t\t\tif (it.s == src) it.f++;\n\t\t\tif (it.e == snk) it.f++;\n\t\t}\n\n\t\tint f = 0, t;\n\t\twhile (t = getFlow(src, snk)) f += t;\n\n\t\tfor (i = 1; i <= M; i++) echk[i] = false;\n\t\tvector <int> Va;\n\t\tfor (i = 0; i < M; i++) if (Ve[2 * i].f == 0) Va.push_back(i + 1), echk[i + 1] = true;\n\t\tfor (i = 1; i <= N1 + N2; i++) Vl[i].clear();\n\t\tfor (i = 1; i <= M; i++) {\n\t\t\tif (echk[i]) continue;\n\t\t\tVl[in[i][0]].push_back(i);\n\t\t\tVl[in[i][1] + N1].push_back(i);\n\t\t}\n\t\tfor (auto &it : Ve) {\n\t\t\tif (it.s != src && it.e != snk) continue;\n\n\t\t\tint t = it.f;\n\t\t\tint n = it.e;\n\t\t\tif (it.e == snk) n = it.s;\n\t\t\tfor (i = 0; i < it.f; i++) Va.push_back(Vl[n][i]);\n\t\t}\n\n\t\tprintf(\"%d \", (int)Va.size());\n\t\tfor (auto it : Va) printf(\"%d \", it);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["flows", "graphs"], "dificulty": "2500", "interactive": false}