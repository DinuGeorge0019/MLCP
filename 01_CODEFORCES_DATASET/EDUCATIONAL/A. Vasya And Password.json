{
    "link": "https://codeforces.com//contest/1051/problem/A",
    "problemId": "222357",
    "problem_idx": "A",
    "shortId": "1051A",
    "contest_number": "1051",
    "problem_submissions": {
        "F": [
            43140779,
            43140701,
            43140521,
            43144878,
            43149555,
            43136128,
            43135754,
            43146222,
            43141081,
            43140208,
            43140886,
            43148136,
            43125606,
            43139391,
            43143179,
            43180670,
            43137698,
            43132665,
            43136422,
            43137213,
            43136215,
            43152919,
            43140345
        ],
        "E": [
            43135788,
            43135396,
            43135166,
            43144968,
            43139384,
            43145873,
            43148036,
            43133440,
            43138040,
            43130161,
            43150071,
            43172602,
            43169210,
            43138739,
            43141483,
            43140870
        ],
        "D": [
            43122761,
            43123321,
            43124505,
            43127072,
            43131033,
            43132900,
            43131873,
            43120016,
            43141171,
            43141877,
            43118771,
            109385219,
            43126836,
            43129621,
            43130021,
            43126148,
            43128304,
            43128721,
            43127454,
            43124199,
            43127027
        ],
        "C": [
            43120001,
            43120557,
            43121091,
            43122279,
            43123187,
            43129372,
            43126529,
            43136659,
            43142859,
            43145151,
            43120361,
            43120848,
            43124838,
            43124502,
            43122781,
            43124340,
            43124338,
            43124203,
            43121537,
            43122507
        ],
        "B": [
            43118265,
            43118662,
            43118894,
            43119173,
            43118548,
            43118066,
            43121653,
            43137307,
            43143272,
            43145683,
            43118005,
            43118512,
            43121090,
            43120908,
            43119605,
            43119200,
            43119726,
            43119810,
            43118546,
            43119160
        ],
        "A": [
            43118136,
            43118310,
            43118532,
            43118569,
            43120138,
            43261343,
            43119567,
            43119846,
            43140090,
            43144863,
            43147178,
            43123917,
            43118256,
            43120404,
            43119598,
            43118824,
            43118544,
            43118365,
            43118914,
            43118324,
            43118586
        ],
        "G": [
            43151141,
            43245454
        ]
    },
    "name": "A. Vasya And Password",
    "statement": "Vasya came up with a password to register for a string s. The password\r\nin should be a string, consisting of lowercase and uppercase Latin\r\nletters and digits.But since takes care of the security of its users,\r\nuser passwords must contain at least one digit, at least one uppercase\r\nLatin letter and at least one lowercase Latin letter. For example, the\r\npasswords \"\", \"\" and \"\" are valid, and the passwords \"\", \"\" and \"\" are\r\nnot. A substring of string s is a string x = s_l s_{l + 1}\r\ndots s_{l + len - 1} (1\r\nle l\r\nle |s|, 0\r\nle len\r\nle |s| - l + 1). len is the length of the substring. Note that the empty\r\nstring is also considered a substring of s, it has the length 0.Vasya’s\r\npassword, however, may come too weak for the security settings of . He\r\nlikes his password, so he wants to replace some its substring with\r\nanother string of the same length in order to satisfy the above\r\nconditions. This operation should be performed once, and .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef signed long long ll;\n\n#undef _P\n#define _P(...) (void)printf(__VA_ARGS__)\n#define FOR(x,to) for(x=0;x<(to);x++)\n#define FORR(x,arr) for(auto& x:arr)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define ALL(a) (a.begin()),(a.end())\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\n//-------------------------------------------------------\n\nint T;\nstring S,A=\"aA1\";\nint N;\n\nbool ok(string S) {\n\tint mask=0;\n\tFORR(c,S) {\n\t\tif(c>='0' && c<='9') mask |= 1;\n\t\tif(c>='a' && c<='z') mask |= 2;\n\t\tif(c>='A' && c<='Z') mask |= 4;\n\t}\n\treturn mask==7;\n}\nvoid solve() {\n\tint i,j,k,l,r,x,y; string s;\n\t\n\tcin>>T;\n\twhile(T--) {\n\t\tcin>>S;\n\t\tN=S.size();\n\t\t\n\t\tif(ok(S)) {\n\t\t\tcout<<S<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tFOR(i,N) {\n\t\t\tstring T=S;\n\t\t\tFOR(j,3) {\n\t\t\t\tT[i]=A[j];\n\t\t\t\tif(ok(T)) {\n\t\t\t\t\tcout<<T<<endl;\n\t\t\t\t\tgoto out;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tFOR(i,N-1) {\n\t\t\tstring T=S;\n\t\t\tFOR(x,3) {\n\t\t\t\tFOR(y,3) {\n\t\t\t\t\tT[i]=A[x];\n\t\t\t\t\tT[i+1]=A[y];\n\t\t\t\t\tif(ok(T)) {\n\t\t\t\t\t\tcout<<T<<endl;\n\t\t\t\t\t\tgoto out;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout:\n\t\t;\n\t}\n}\n\n\nint main(int argc,char** argv){\n\tstring s;int i;\n\tif(argc==1) ios::sync_with_stdio(false), cin.tie(0);\n\tFOR(i,argc-1) s+=argv[i+1],s+='\\n'; FOR(i,s.size()) ungetc(s[s.size()-1-i],stdin);\n\tcout.tie(0); solve(); return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "strings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Vasya And Password.json",
    "editorial_link": "https://codeforces.com//blog/entry/61969",
    "editorial": "There are just a few general cases in the task to consider: If the\r\npassword is already valid, nothing has to be changed, just print . Try\r\nto change exactly one character, iterate over all positions in and all\r\nthree options for character (any digit, any lowercase or uppercase Latin\r\nletter). After the replacement the string is checked for the validity\r\nand printed if it turned out to be valid. We werenât able to replace a\r\nsubstring of length 0 or 1, then the answer is at least 2. We can obtain\r\nit in a following manner: replace the first two characters to \"\" if the\r\nthird character is an uppercase Latin letter, to \"\" if the third\r\ncharacter is a lowercase Latin letter and to \"\" if the third character\r\nis a digit.\r\n",
    "hint": []
}