{
    "link": "https://codeforces.com//contest/1251/problem/C",
    "problemId": "449546",
    "problem_idx": "C",
    "shortId": "1251C",
    "contest_number": "1251",
    "problem_submissions": {
        "D": [
            63400316,
            63400298,
            63400254,
            63400203,
            63400050,
            63399984,
            63399855,
            63312403,
            63311940,
            63318990,
            63314573,
            63427346,
            63313882,
            63324960,
            63323872,
            63313008,
            63319425,
            63312837,
            63313209,
            63313402,
            63313713,
            63313403,
            64630107,
            63316214,
            63315539,
            63310152,
            63317232,
            63314816
        ],
        "E2": [
            63399693,
            63399662,
            63399248,
            63399098,
            63398546,
            63365832,
            63365269,
            63364770,
            63338273,
            63317755,
            63314968,
            63314711,
            63319868,
            63427473,
            63323675,
            63322799,
            63317013,
            63330304,
            63326912,
            63315944,
            63319041,
            63319971,
            63319185,
            63322016,
            64630154,
            63319603,
            63323442,
            63321804,
            63320973
        ],
        "F": [
            63396794,
            63395657,
            63340397,
            63340247,
            63322387,
            63331974,
            63347502,
            63345880,
            63325885,
            63328608,
            63427571,
            63333465,
            63330239,
            63311325,
            63320807,
            63332225,
            63349152,
            63349006,
            63348927,
            63346482,
            63354827,
            63555798,
            63396546,
            63361055,
            63321261,
            63339709
        ],
        "C": [
            63339509,
            63309630,
            63308770,
            63309154,
            63311219,
            63425373,
            63310517,
            63308226,
            63320102,
            63309048,
            63314299,
            63306755,
            63309969,
            63308377,
            63311623,
            63309667,
            64630061,
            63312827,
            63308776,
            63307614,
            63311843,
            63311519
        ],
        "E1": [
            63317840,
            63315090,
            63315149,
            63319942,
            63427459,
            63323582,
            63322914,
            63316888,
            63330357,
            63326985,
            63315977,
            63318948,
            63319867,
            63319014,
            63322137,
            64630159,
            63319793,
            63323604,
            63329086,
            63321906,
            63320849
        ],
        "B": [
            63308319,
            63306252,
            63306938,
            63308521,
            63425306,
            63309307,
            63306115,
            63321613,
            63306650,
            63307802,
            63305211,
            63307273,
            63305885,
            63310074,
            63307855,
            64630021,
            63308550,
            63306496,
            63305718,
            63309015,
            63308105
        ],
        "A": [
            63304668,
            63304379,
            63304115,
            63305872,
            63425273,
            63304642,
            63304137,
            63319299,
            63304384,
            63304697,
            63304218,
            63304454,
            63304321,
            63307231,
            63304364,
            64629970,
            63304438,
            63304343,
            63304369,
            63305312,
            63306229
        ]
    },
    "name": "C. Minimize The Integer",
    "statement": "You are given a huge integer a consisting of n digits (n is between 1\r\nand 3\r\ncdot 10^5, inclusive). It may contain leading zeros.You can swap two\r\ndigits on adjacent (neighboring) positions if the swapping digits are of\r\ndifferent parity (that is, they have different remainders when divided\r\nby 2). For example, if a = 032867235 you can get the following integers\r\nin a single operation: 302867235 if you swap the first and the second\r\ndigits; 023867235 if you swap the second and the third digits; 032876235\r\nif you swap the fifth and the sixth digits; 032862735 if you swap the\r\nsixth and the seventh digits; 032867325 if you swap the seventh and the\r\neighth digits. Note, that you can’t swap digits on positions 2 and 4\r\nbecause the positions are not adjacent. Also, you can’t swap digits on\r\npositions 3 and 4 because the digits have the same parity.You can\r\nperform any number (possibly, zero) of such operations.Find the minimum\r\ninteger you can obtain.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid solve_case() {\n    string A;\n    cin >> A;\n    string even, odd, answer;\n\n    for (char c : A)\n        if ((c - '0') % 2 == 0)\n            even += c;\n        else\n            odd += c;\n\n    answer.resize(A.size());\n    merge(even.begin(), even.end(), odd.begin(), odd.end(), answer.begin());\n    cout << answer << '\\n';\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int T;\n    cin >> T;\n\n    while (T-- > 0)\n        solve_case();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "two pointers"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Minimize The Integer.json",
    "editorial_link": "https://codeforces.com//blog/entry/70860",
    "editorial": "Letâs consider two sequences of digits: and , there is the first even\r\ndigit in , is the second even digit and so on and is the first odd digit\r\nin , is the second odd digit and so on.Since you canât swap digits of\r\nsame parity, the sequence of even digits of never changed. Sequence of\r\nodd digits of also never changed. So the first digit in the answer will\r\nbe equal to or to . And since we have to minimize the answer, we have to\r\nchose the as the first digit in answer and them delete it from the\r\ncorresponding sequence (in this way sequence turn into or sequence turn\r\ninto ). Second, third and followings digits need to choose in the same\r\nway.\r\n",
    "hint": []
}