{
    "link": "https://codeforces.com//contest/1238/problem/B",
    "problemId": "434106",
    "problem_idx": "B",
    "shortId": "1238B",
    "contest_number": "1238",
    "problem_submissions": {
        "G": [
            62148377,
            62150345,
            62148994,
            62146428,
            62171195,
            62152430,
            62150450,
            62151715,
            63077598,
            62153399,
            62153961,
            62326923,
            62163873,
            62157710,
            63252631
        ],
        "C": [
            62139579,
            62128875,
            62134212,
            62149084,
            62171152,
            62131518,
            62131617,
            62138927,
            62130356,
            62145335,
            62127646,
            62128518,
            62127470,
            62128489,
            62132928,
            62130729,
            62130656,
            62131114,
            62129400,
            62129293,
            62129389,
            62141737
        ],
        "F": [
            62135057,
            62143199,
            62146057,
            62137636,
            62171175,
            62141888,
            62144431,
            62147441,
            62144667,
            62133761,
            62136545,
            62139411,
            62133600,
            62138749,
            62143755,
            62143321,
            62145892,
            62144865,
            62148327,
            62148901,
            62145390
        ],
        "E": [
            62130371,
            62135558,
            62133197,
            62133178,
            62171181,
            62138707,
            62138998,
            71444053,
            62143394,
            62142446,
            62126207,
            62132191,
            62134744,
            62139465,
            62131237,
            62138771,
            62335532,
            62136799,
            62138459,
            62139760,
            62138816,
            62133466,
            62139306,
            62136690
        ],
        "D": [
            62130325,
            62130011,
            62129721,
            62133154,
            62171155,
            62134587,
            62136980,
            62133511,
            62142844,
            62150513,
            62130499,
            62130138,
            62131294,
            62128520,
            62132339,
            62134000,
            62132013,
            62132252,
            62131248,
            62131658,
            62131164
        ],
        "B": [
            62124194,
            62124712,
            62125813,
            62133117,
            62171147,
            62134676,
            62126226,
            62125252,
            62142403,
            62146274,
            62123866,
            62124453,
            62125991,
            62125432,
            62124476,
            62123794,
            62126146,
            62127228,
            62126305,
            62123963,
            62127931,
            62125892
        ],
        "A": [
            62120855,
            62121082,
            62121998,
            62121600,
            62171137,
            62121874,
            62120946,
            62121255,
            62120923,
            62120856,
            62121293,
            62121013,
            62121176,
            62120783,
            62120942,
            62121012,
            62121072,
            62121136,
            62121767,
            62121527
        ]
    },
    "name": "B. Kill 'Em All",
    "statement": "Ivan plays an old action game called Heretic. He\u2019s stuck on one of the\r\nfinal levels of this game, so he needs some help with killing the\r\nmonsters.The main part of the level is a large corridor (so large and\r\nnarrow that it can be represented as an infinite coordinate line). The\r\ncorridor is divided into two parts; let\u2019s assume that the point x = 0 is\r\nwhere these parts meet.The right part of the corridor is filled with n\r\nmonsters for each monster, its initial coordinate x_i is given (and\r\nsince all monsters are in the right part, every x_i is positive).The\r\nleft part of the corridor is filled with crusher traps. If some monster\r\nenters the left part of the corridor or the origin (so, its current\r\ncoordinate becomes to 0), it gets instantly killed by a trap.The main\r\nweapon Ivan uses to kill the monsters is the Phoenix Rod. It can launch\r\na missile that explodes upon impact, obliterating every monster caught\r\nin the explosion and throwing all other monsters away from the\r\nepicenter. Formally, suppose that Ivan launches a missile so that it\r\nexplodes in the point c. Then every monster is either killed by\r\nexplosion or pushed away. Let some monster\u2019s current coordinate be y,\r\nthen: if c = y, then the monster is killed; if y < c, then the monster\r\nis pushed r units to the left, so its current coordinate becomes y - r;\r\nif y > c, then the monster is pushed r units to the right, so its\r\ncurrent coordinate becomes y + r. Ivan is going to kill the monsters as\r\nfollows: choose some integer point d and launch a missile into that\r\npoint, then wait until it explodes and all the monsters which are pushed\r\nto the left part of the corridor are killed by crusher traps, then, if\r\nat least one monster is still alive, choose another integer point\r\n(probably the one that was already used) and launch a missile there, and\r\nso on.What is the minimum number of missiles Ivan has to launch in order\r\nto kill all of the monsters? You may assume that every time Ivan fires\r\nthe Phoenix Rod, he chooses the impact point optimally.You have to\r\nanswer q independent queries.\r\n",
    "solutions": [
        "#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n#pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<int,P> P1;\ntypedef pair<P,P> P2;\n#define pu push\n#define pb push_back\n#define mp make_pair\n#define eps 1e-7\n#define INF 1000000000\n#define mod 1000000007\n#define fi first\n#define sc second\n#define rep(i,x) for(int i=0;i<x;i++)\n#define repn(i,x) for(int i=1;i<=x;i++)\n#define SORT(x) sort(x.begin(),x.end())\n#define ERASE(x) x.erase(unique(x.begin(),x.end()),x.end())\n#define POSL(x,v) (lower_bound(x.begin(),x.end(),v)-x.begin())\n#define POSU(x,v) (upper_bound(x.begin(),x.end(),v)-x.begin())\nint q;\nint n,r;\nvector<int>vec;\n\nint main(){\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tscanf(\"%d%d\",&n,&r); vec.clear();\n\t\trep(i,n){ int a; scanf(\"%d\",&a); vec.pb(a); }\n\t\tSORT(vec); ERASE(vec);\n\t\tll gen = 0;\n\t\tfor(int i=vec.size()-1;i>=1;i--){\n\t\t\tgen += r;\n\t\t\tif(vec[i-1] <= gen){\n\t\t\t\tprintf(\"%d\\n\",vec.size()-i); goto nxt;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",vec.size()); nxt:;\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Kill 'Em All.json",
    "editorial_link": "https://codeforces.com//blog/entry/70450",
    "editorial": "Notice the following fact: it\u00e2\u0080\u0099s never optimal to fire a missile at such\r\na position that there are monsters to the right of it. That suggests the\r\nnext solution: sort the positions, leave only the unique ones and\r\nprocess to shoot at the rightmost alive monster until every monster is\r\ndead. Position of some monster after shots are made is the original\r\nposition minus , because the monster could only be pushed to the\r\nleft.Overall complexity: .\r\n"
}