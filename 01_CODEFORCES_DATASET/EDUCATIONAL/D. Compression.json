{"link": "https://codeforces.com//contest/1107/problem/D", "problemId": "288737", "problem_idx": "D", "shortId": "1107D", "contest_number": "1107", "problem_submissions": {"E": [49013467, 49008460, 49012396, 49006242, 49008619, 49017766, 49019000, 49012372, 49011583, 176420718, 49013181, 49015268, 49018364, 49014306, 49015741, 49004388, 48997380, 49015240, 49002659, 49009546, 49008550], "G": [49011365, 49010194, 49016397, 49014169, 49016073, 49011313, 49010209, 49025351, 49022889, 49019588, 49010516, 49020197, 49021008, 49020053, 49017813, 49036704, 49020211, 49015481, 49030126], "F": [49008073, 49012089, 49021192, 49015026, 49017918, 49019060, 49366532, 49825656, 49825549, 49021809], "D": [48997651, 49010674, 49008906, 49001237, 49051114, 49002152, 49005979, 49003643, 49005670, 49006757, 49005502, 49007559, 49006488, 49007684, 49005318, 49010907, 49009162, 49010914, 49006671, 49005756, 49006449], "C": [48994637, 48998923, 49003509, 48997020, 48998710, 48997908, 49002063, 48998329, 49002178, 48999947, 49000421, 49004011, 49003004, 48998353, 49007207, 49005313, 48999254, 49018676, 49000412, 49000294], "B": [48993730, 48996062, 48998013, 48994172, 48995232, 48997773, 48995013, 48998484, 48995876, 48996083, 48994456, 48998645, 48994729, 48997378, 49001444, 48995542, 49016049, 48995486, 48997049], "A": [48993686, 48993925, 48994361, 48993741, 48994038, 48994065, 48994006, 48996736, 48994321, 48994290, 48993884, 48994319, 48994054, 48994165, 49000099, 48993805, 49017652, 48993935, 48993923]}, "name": "D. Compression", "statement": "You are given a binary matrix A of size n\r\ntimes n. Let\u2019s denote an x-compression of the given matrix as a matrix B\r\nof size\r\nfrac{n}{x}\r\ntimes\r\nfrac{n}{x} such that for every i\r\nin [1, n], j\r\nin [1, n] the condition A[i][j] = B[\r\nlceil\r\nfrac{i}{x}\r\nrceil][\r\nlceil\r\nfrac{j}{x}\r\nrceil] is met.Obviously, x-compression is possible only if x divides n,\r\nbut this condition is not enough. For example, the following matrix of\r\nsize 2\r\ntimes 2 does not have any 2-compression: 01 10 For the given matrix A,\r\nfind maximum x such that an x-compression of this matrix is possible.\r\n", "solutions": ["#ifndef BZ\n#pragma GCC optimize \"-O3\"\n#endif\n#include <bits/stdc++.h>\n\n#define FASTIO\n#define ALL(v) (v).begin(), (v).end()\n#define rep(i, l, r) for (int i = (l); i < (r); ++i)\n\n#ifdef FASTIO\n#define scanf abacaba\n#define printf abacaba\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\nusing namespace std;\n\nconst int MX = 5300;\n\nbool a[MX][MX];\n\nbool er[MX], ec[MX];\n\nint main() {\n#ifdef FASTIO\n    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n#endif\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        string s;\n        cin >> s;\n        for (int j = 0; j < n / 4; j++) {\n            int x = 0;\n            if (s[j] >= '0' && s[j] <= '9') {\n                x = s[j] - '0';\n            } else {\n                x = s[j] - 'A' + 10;\n            }\n            for (int k = 3; k >= 0; k--) {\n                if (x % 2 == 1) {\n                    a[i][4 * j + k] = true;\n                }\n                x /= 2;\n            }\n        }\n    }\n\n    for (int i = 1; i < n; i++) {\n        ec[i] = true;\n        for (int j = 0; j < n; j++) {\n            if (a[i][j] != a[i - 1][j]) {\n                ec[i] = false;\n            }\n        }\n    }\n\n    for (int j = 1; j < n; j++) {\n        er[j] = true;\n        for (int i = 0; i < n; i++) {\n            if (a[i][j] != a[i][j - 1]) {\n                er[j] = false;\n            }\n        }\n    }\n\n    int ans = 1;\n    for (int i = 1; i <= n; i++) {\n        if (n % i) {\n            continue;\n        }\n        bool ok = true;\n        for (int j = 0; j < n; j++) {\n            if (j % i != 0 && (!ec[j] || !er[j])) {\n                ok = false;\n            }\n        }\n        if (ok) {\n            ans=  i;\n        }\n    }\n    cout << ans << \"\\n\";\n    return 0;\n}\n\n"], "input": "", "output": "", "tags": ["dp", "implementation", "math", "number theory"], "dificulty": "1800", "interactive": false}