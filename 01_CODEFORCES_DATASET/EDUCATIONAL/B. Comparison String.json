{
    "link": "https://codeforces.com//contest/1837/problem/B",
    "problemId": "1937910",
    "problem_idx": "B",
    "shortId": "1837B",
    "contest_number": "1837",
    "problem_submissions": {
        "F": [
            207194085,
            207203613,
            207207682,
            207213171,
            207211865,
            207210824,
            207211176,
            207318425,
            207318356,
            207219269,
            207223400,
            207222112,
            207230081,
            209182293,
            207218386,
            207220953,
            207230258,
            207229992,
            207230774,
            207219053,
            207217652,
            207234599,
            207241428,
            207217300
        ],
        "E": [
            207188119,
            207194518,
            207187724,
            207193975,
            207201887,
            207200866,
            207200402,
            207204477,
            207201158,
            207203473,
            207202659,
            209182421,
            207206918,
            207295603,
            207295577,
            207295208,
            207212525,
            207205450,
            207220600,
            207221757,
            207209332,
            207208536,
            207213556,
            207215245,
            207197679
        ],
        "B": [
            207173438,
            207165428,
            207164196,
            207176139,
            207175678,
            207167732,
            207174974,
            207163573,
            207171463,
            207163877,
            207175371,
            207164199,
            207166728,
            209182537,
            207176961,
            207175758,
            207169369,
            207163934,
            207178400,
            207163937,
            207176249,
            207171837,
            207164338,
            207177413,
            207185470
        ],
        "D": [
            207172764,
            207180689,
            207175489,
            207169386,
            207180603,
            207183437,
            207177453,
            207182367,
            207184812,
            207187481,
            207183382,
            209182475,
            207187168,
            207187553,
            207189679,
            207186480,
            207191942,
            207180382,
            207189882,
            207187720,
            207180792
        ],
        "C": [
            207163791,
            207169258,
            207167268,
            207163200,
            207171135,
            207167990,
            207163968,
            207163247,
            207171084,
            207177546,
            207172770,
            209182511,
            207171094,
            207178509,
            207179374,
            207167154,
            207173221,
            207169406,
            207177662,
            207172590,
            207173505
        ],
        "A": [
            207156762,
            207156505,
            207156456,
            207156409,
            207157257,
            207156929,
            207156537,
            207156398,
            207156432,
            207157333,
            207156686,
            209182570,
            207157924,
            207157341,
            207156863,
            207156455,
            207156545,
            207156506,
            207157325,
            207156712,
            207156556
        ]
    },
    "name": "B. Comparison String",
    "statement": "You are given a string s of length n, where each character is either or\r\n.An array a consisting of n+1 elements is compatible with the string s\r\nif, for every i from 1 to n, the character s_i represents the result of\r\ncomparing a_i and a_{i+1}, i. e.: s_i is if and only if a_i < a_{i+1};\r\ns_i is if and only if a_i > a_{i+1}. For example, the array [1, 2, 5, 4,\r\n2] is compatible with the string . There are other arrays with are\r\ncompatible with that string, for example, [13, 37, 42, 37, 13].The of\r\nthe array is the number of different elements in it. For example, the\r\ncost of [1, 2, 5, 4, 2] is 4; the cost of [13, 37, 42, 37, 13] is 3.You\r\nhave to calculate the minimum cost among all arrays which are compatible\r\nwith the given string s.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n  int t;\n  cin >> t;\n  for (int i = 0; i < t; i++){\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n    int c = 1, ans = 2;\n    for (int j = 1; j < n; j++){\n      if (s[j] == s[j - 1]){\n        c++;\n        ans = max(ans, c + 1);\n      } else {\n        c = 1;\n      }\n    }\n    cout << ans << endl;\n  }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Comparison String.json",
    "editorial_link": "https://codeforces.com//blog/entry/116752",
    "editorial": "Suppose there is a segment of length that consists of equal characters\r\nin . This segment implies that there are at least distinct values in the\r\nanswer: for example, if the segment consists of signs, the first element\r\nshould be less than the second element, the second element should be\r\nless than the third element, and so on, so the corresponding segment of\r\nthe array contains at least different elements.So, the answer is at\r\nleast , where is the length of the longest segment of the string that\r\nconsists of equal characters. Can we construct the array which will\r\ncontain exactly distinct values? It turns out we can do it with the\r\nfollowing greedy algorithm: letâs use integers from to for our array ,\r\nand letâs construct it from left to right; every time we place an\r\nelement, we choose either the largest possible integer we can use (if\r\nthe next character is ) or the smallest possible integer we can use (if\r\nthe next character is ). For example, for the string , the first\r\nelements of the array will be (and we can use any integer from to in the\r\nlast position). That way, whenever a segment of equal characters begins,\r\nthe current value in the array will be either or , and we will be able\r\nto decrease or increase it times, so we wonât arrive at a situation\r\nwhere, for example, the current value is and we have to find a smaller\r\ninteger.So, the problem basically reduces to finding the longest\r\ncontiguous subsegment of equal characters in .\r\n",
    "hint": []
}