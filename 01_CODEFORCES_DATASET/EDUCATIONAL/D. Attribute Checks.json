{
    "link": "https://codeforces.com//contest/2025/problem/D",
    "problemId": "2948774",
    "problem_idx": "D",
    "shortId": "2025D",
    "contest_number": "2025",
    "problem_submissions": {
        "G": [
            285888128,
            285968165,
            285968156,
            285968149,
            285968144,
            285897832,
            285920810,
            285910851,
            285909011,
            285930826,
            285929850,
            285925790,
            285926690,
            285922742,
            285921341,
            285927635,
            285927533,
            285927378,
            285927290,
            285927201,
            285926718,
            285927241,
            285924989,
            299831833,
            286121442
        ],
        "F": [
            285868426,
            285875834,
            285881666,
            285895954,
            285888111,
            285886401,
            285885303,
            285891958,
            285893731,
            285892263,
            285879653,
            285886660,
            285891778,
            285886231,
            285896708,
            285895437,
            285887128,
            285901645,
            285898009,
            285911413,
            285909168
        ],
        "E": [
            285859957,
            285867757,
            285870223,
            285876387,
            285873807,
            285876494,
            285872556,
            285873708,
            285881956,
            285870423,
            285874469,
            285878077,
            285869033,
            285872685,
            285876656,
            285892958,
            285888168,
            285880850,
            285877703,
            285879472
        ],
        "C": [
            285855265,
            285848963,
            285851041,
            285855836,
            285849335,
            285851254,
            285854960,
            285854181,
            285864164,
            285852009,
            285850624,
            285853432,
            285850248,
            285850107,
            285852412,
            285937663,
            285937269,
            285852480,
            285853757,
            285856229,
            285852397,
            285853481
        ],
        "D": [
            285854273,
            285858071,
            285858183,
            285867921,
            285860641,
            285863810,
            285864716,
            285864881,
            285873876,
            285863514,
            285859817,
            285865001,
            285869981,
            285860140,
            285866304,
            285941352,
            285868260,
            285864450,
            285868121,
            285865847,
            285869499
        ],
        "B": [
            285844312,
            285844368,
            285843910,
            285848590,
            285844872,
            285845275,
            285846752,
            285845703,
            285858394,
            285844772,
            285844563,
            285847140,
            285845401,
            285845320,
            285848121,
            285848201,
            285847162,
            285850578,
            285846812,
            285847900
        ],
        "A": [
            285841954,
            285841960,
            285842031,
            285842286,
            285842224,
            285842066,
            285842261,
            285842191,
            285843710,
            285842044,
            285842146,
            285842134,
            285841991,
            285842021,
            285846906,
            285842091,
            285842126,
            285842764,
            285842102,
            285842266
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135173",
    "editorial": "For the start, letâs introduce a slow but correct solution. Let be the\r\nanswer to the task if we processed first records and the current\r\nIntelligence level is . If we know Intelligence level , then we also\r\nknow the current Strength level , where is just a total number of points\r\nin first records.Since we want to use dp, letâs discuss transitions: If\r\nthe last record , then it was a point, and there are only two options:\r\nwe either raised Intelligence, so the last state was ; or raised\r\nStrength, coming from state . In other words, we can calculate . If the\r\nlast record , then itâs an Intelligence check, and it doesnât affect the\r\nstate, only its answer. For all , ; otherwise, itâs . If , then itâs a\r\nStrength check and affects the values in a similar way. For all , ;\r\notherwise, itâs also . OK, weâve got a solution with time and memory,\r\nbut we can speed it up. Note that the first case appears only times,\r\nwhile the second and third cases are just range additions. So, if we can\r\ndo addition in , then processing the first case in linear time is enough\r\nto achieve complexity.How to process range additions in time? Letâs use\r\nsome difference array to do it lazily. Instead of adding some value to\r\nthe segment , weâll only add value to and to . And when we meet , weâll\r\n\"push\" all accumulated operations all at once.The total value you need\r\nto add to some position is . So, we can calculate all of them in just\r\ngoing from left to right, maintaining the prefix sum.The last question\r\nis reducing the space complexity. As usual, you can store only the last\r\ntwo layers: for the current layer and previous layer . But actually, you\r\ncan store only one layer and update it in-place.Letâs store only one\r\nlast layer of dp as . Attribute checks donât change array at all. In\r\ncase , you, firstly, push all data from to , and then you need to recalc\r\nvalues in . But since the formula is , you can just iterate over in and\r\neverything works!In total, we have a solution with time and space\r\ncomplexity.\r\n",
    "name": "D. Attribute Checks",
    "statement": "Imagine a game where you play as a character that has two attributes:\r\n\"Strength\" and \"Intelligence\", that are at zero level initially.During\r\nthe game, you’ll acquire m attribute points that allow you to increase\r\nyour attribute levels one point will increase one of the attributes by\r\none level. But sometimes, you’ll encounter a so-called \"Attribute\r\nChecks\": if your corresponding attribute is high enough, you’ll pass it;\r\notherwise, you’ll fail it.Spending some time, you finally prepared a\r\nlist which contains records of all points you got and all checks you’ve\r\nmet. And now you’re wondering: what is the maximum number of attribute\r\nchecks you can pass in a single run if you’d spend points wisely?Note\r\nthat you can’t change the order of records.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using i64 = long long;using u64 = unsigned long long;using u32 = unsigned; int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int n, m;    std::cin >> n >> m;        std::vector<int> dp {0};    std::vector<int> f {0};    int s = 0;        for (int i = 0; i < n; i++) {        int r;        std::cin >> r;                if (r > 0) {            if (r < f.size()) {                f[r]++;            }        } else if (r < 0) {            r = -r;            r = s - r;            if (r >= 0) {                f[0]++;                f[r + 1]--;            }        } else {            for (int j = 1; j <= s; j++) {                f[j] += f[j - 1];            }            for (int j = 0; j <= s; j++) {                dp[j] += f[j];            }            dp.push_back(0);            s++;            for (int j = s; j >= 1; j--) {                dp[j] = std::max(dp[j], dp[j - 1]);            }            f.assign(s + 1, 0);        }    }    for (int j = 1; j <= s; j++) {        f[j] += f[j - 1];    }    for (int j = 0; j <= s; j++) {        dp[j] += f[j];    }        int ans = *std::max_element(dp.begin(), dp.end());    std::cout << ans << \"\\n\";        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "implementation",
        "math",
        "two pointers"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Attribute Checks.json",
    "hint": []
}