{
    "link": "https://codeforces.com//contest/1082/problem/D",
    "problemId": "64165",
    "problem_idx": "D",
    "shortId": "1082D",
    "contest_number": "1082",
    "problem_submissions": {
        "F": [
            46328946,
            46337799,
            46339884,
            46346150,
            46445422,
            46359069,
            46431759,
            46637242,
            46637151,
            46325175,
            46338896,
            46409182
        ],
        "G": [
            46323996,
            46323275,
            46334802,
            46323141,
            46326108,
            46329586,
            46321808,
            163694400,
            163693799,
            46332091,
            46330084,
            46336228,
            46329478,
            46334035,
            46334852,
            46340605,
            46341989,
            46332446,
            46341097,
            46318296,
            46328921,
            46335428
        ],
        "E": [
            46318513,
            46330600,
            46328796,
            46321883,
            46324879,
            46325643,
            46324793,
            46322771,
            46328316,
            46332015,
            46327943,
            46323542,
            46327890,
            46325362,
            46330431,
            46320019,
            46338363,
            46322189,
            46331138
        ],
        "D": [
            46316454,
            46320831,
            46325078,
            46317954,
            46322179,
            46323264,
            46336380,
            46328840,
            46322602,
            46323491,
            46324308,
            46330072,
            46325620,
            46329576,
            46325051,
            46330163,
            46325538,
            46319965,
            46324331
        ],
        "C": [
            46314364,
            46317118,
            46317698,
            46315803,
            46318057,
            46319400,
            46316833,
            46317944,
            46317349,
            46317946,
            46320711,
            46318098,
            46319780,
            46320328,
            46319548,
            46328045,
            46319609,
            46315734,
            46318281
        ],
        "B": [
            46313723,
            46315264,
            46315248,
            46314114,
            46315542,
            46315654,
            46315306,
            46315753,
            46315155,
            46315310,
            46317088,
            46316030,
            46316402,
            46316343,
            46315252,
            46358458,
            46314954,
            46314579,
            46315821
        ],
        "A": [
            46313553,
            46313861,
            46313655,
            46313685,
            46313732,
            46313657,
            46313638,
            46313650,
            46313676,
            46313977,
            46315097,
            46313735,
            46314264,
            46315003,
            46313777,
            46326534,
            46313605,
            46313586,
            46314557
        ]
    },
    "name": "D. Maximum Diameter Graph",
    "statement": "Graph constructive problems are back! This time the graph you are asked\r\nto build should match the following properties.The graph is connected if\r\nand only if there exists a path between every pair of vertices.The\r\ndiameter (aka \"longest shortest path\") of a connected undirected graph\r\nis the maximum number of edges in the path between any pair of its\r\nvertices.The degree of a vertex is the number of edges incident to\r\nit.Given a sequence of n integers a_1, a_2,\r\ndots, a_n construct a graph of n vertices such that: the graph contains\r\nno self-loops and no multiple edges; the degree d_i of the i-th vertex\r\ndoesn\u2019t exceed a_i (i.e. d_i\r\nle a_i); the diameter of the graph is maximum possible. Output the\r\nresulting graph or report that no solution exists.\r\n",
    "solutions": [
        "/*\nI feel unhappy\nI feel so sad\nI lost the best friend\nThat I ever had\n\nShe was my woman\nI loved her so\nBut it's too late now\nI've let her go\n\nI'm going through changes\nI'm going through changes\n\nWe shared the years\nWe shared each day\nIn love together\nWe found a way\n\nBut soon the world\nHad its evil way\nMy heart was blinded\nLove went astray\n\nI'm going through changes\nI'm going through changes\n\nIt took so long\nTo realize\nThat I can still hear\nHer last goodbyes\n\nNow all my days\nAre filled with tears\nWish I could go back\nAnd change these years\n\nI'm going through changes\nI'm going through changes\n*/\n\n#pragma GCC optimize(\"O3\")\n#define _CRT_SECURE_NO_WARNINGS\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <complex>\n#include <math.h>\n#include <set>\n#include <vector>\n#include <map>\n#include <queue>\n#include <stdio.h>\n#include <stack>\n#include <algorithm>\n#include <list>\n#include <ctime>\n\n#include <memory.h>\n#include <assert.h>\n\n#define y0 sdkfaslhagaklsldk\n\n#define y1 aasdfasdfasdf\n#define yn askfhwqriuperikldjk\n#define j1 assdgsdgasghsf\n#define tm sdfjahlfasfh\n#define lr asgasgash\n#define norm asdfasdgasdgsd\n#define have adsgagshdshfhds\n#define ends asdgahhfdsfshdshfd\n#define prev asdgSHJsfgsdfhdsh\n#define hash asdgasdgasdgdfrywewery\n\n#define eps 1e-8\n#define M_PI 3.141592653589793\n#define bsize 512\n\n#define ldouble long double\nusing namespace std;\n\n#define bs 1000000007\n\nconst int N = 200031;\n\nint n;\nint deg[N],in_chain[N];\nint s_deg;\nvector<int> leaves,non_leaves;\nvector<pair<int,int> > ans;\n\nint get_free(){\n\tfor (int i=1;i<=n;i++){\n\t\tif (in_chain[i]==1&&deg[i]>0){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nvoid add_edge(int a,int b){\n\tdeg[a]--;\n\tdeg[b]--;\n\tans.push_back(make_pair(a,b));\n}\n\nint main(){\n//\tfreopen(\"apache.in\",\"r\",stdin);\n//\tfreopen(\"apache.out\",\"w\",stdout);\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\tios_base::sync_with_stdio(0);\n\t//cin.tie(0);\n\n\t// n>=3;\n\tcin>>n;\n\tfor (int i=1;i<=n;i++){\n\t\tcin>>deg[i];\n\t\ts_deg+=deg[i];\n\t\tif (deg[i]==1)\n\t\t\tleaves.push_back(i);\n\t\telse\n\t\t\tnon_leaves.push_back(i),\n\t\t\tin_chain[i]=1;\n\t}\n\n\tif (s_deg<2*n-2){\n\t\tcout<<\"NO\"<<endl;\n\t\treturn 0;\n\t}\n\n\tint Ans=non_leaves.size()-1;\n\n\tif (leaves.size()>0)\n\t\tAns++;\n\tif (leaves.size()>1)\n\t\tAns++;\n\n\tcout<<\"YES\"<<\" \"<<Ans<<endl;\n\tfor (int i=1;i<non_leaves.size();i++){\n\t\tadd_edge(non_leaves[i-1],non_leaves[i]);\n\t}\n\n\tfor (int i=0;i<leaves.size();i++){\n\t\tif (i==0)\n\t\t\tadd_edge(leaves[i],non_leaves[0]);\n\t\telse if (i==1)\n\t\t\tadd_edge(leaves[i],non_leaves[non_leaves.size()-1]);\n\t\telse\n\t\t{\n\t\t\tint p=get_free();\n\t\t\tadd_edge(leaves[i],p);\n\t\t}\n\t}\n\n\n\tcout<<ans.size()<<endl;\n\tfor (int i=0;i<ans.size();i++){\n\t\tcout<<ans[i].first<<\" \"<<ans[i].second<<endl;\n\t}\n\n//\tcin.get(); cin.get();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "graphs",
        "implementation"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Maximum Diameter Graph.json",
    "editorial_link": "https://codeforces.com/blog/entry/63544",
    "editorial": "Let\u00e2\u0080\u0099s construct the graph the following manner. Take all the vertices\r\nwith and build a bamboo out of them. Surely, all but the end ones will\r\nhave degree , the diameter now is the number of vertices minus 1.One can\r\nshow that building the graph any other way won\u00e2\u0080\u0099t make the diameter\r\ngreater.How should we distribute the other vertices? Two of them can be\r\nused to increase diameter. And all the others won\u00e2\u0080\u0099t matter, they can be\r\npaired with any of the vertices with degrees to spare. If no loops are\r\nadded then the diameter won\u00e2\u0080\u0099t change the path that was the longest won\u00e2\u0080\u0099t\r\nbecome any shorter.All those facts imply that the graph should be a tree\r\nand the sum of should be at least .Overall complexity: .\r\n"
}