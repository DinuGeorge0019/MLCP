{
    "link": "https://codeforces.com//contest/1076/problem/F",
    "problemId": "253930",
    "problem_idx": "F",
    "shortId": "1076F",
    "contest_number": "1076",
    "problem_submissions": {
        "G": [
            45625846,
            45630140,
            45632982,
            46960572,
            46960569,
            46960484,
            46960479,
            45661891,
            45661748,
            45661556,
            45637887
        ],
        "F": [
            45614239,
            45617004,
            45617675,
            45621744,
            45623056,
            45621580,
            45616229,
            45624418,
            45620163,
            45626942,
            45622892,
            92696270,
            45628245,
            45626700,
            45628806,
            45625577,
            45627726,
            45626872,
            45629774,
            45627914
        ],
        "E": [
            45608069,
            45606664,
            45609407,
            45611410,
            45613399,
            45608388,
            45619010,
            45614637,
            45612416,
            45607002,
            45613856,
            45612132,
            45618044,
            45620715,
            45614237,
            45682359,
            45621599,
            45618734,
            45620976
        ],
        "D": [
            45604073,
            45602278,
            45603983,
            45604745,
            45608217,
            45612332,
            45603996,
            45608096,
            45607173,
            45610865,
            45611014,
            45608491,
            45611013,
            45612751,
            45610584,
            45615172,
            45677601,
            45613074,
            45613230
        ],
        "C": [
            45600029,
            45599030,
            45599822,
            45597549,
            45600013,
            45601957,
            45599535,
            45601880,
            45597795,
            45594983,
            45608083,
            45600343,
            45605220,
            45599746,
            45605736,
            45602724,
            45604906,
            45602506
        ],
        "B": [
            45596357,
            45597200,
            45597164,
            45595268,
            45596818,
            45597059,
            45596991,
            45599540,
            45605291,
            45600750,
            45604626,
            45597294,
            45597956,
            45598110,
            45602593,
            45598676,
            45601974,
            45596576
        ],
        "A": [
            45594616,
            45596057,
            45594765,
            45594566,
            45594867,
            45594852,
            45605960,
            45594859,
            45594710,
            45599455,
            45594781,
            45595172,
            45594643,
            45594748,
            45596363,
            45595242,
            45597244,
            45594970
        ]
    },
    "name": "F. Summer Practice Report",
    "statement": "Vova has taken his summer practice this year and now he should write a\r\nreport on how it went.Vova has already drawn all the tables and wrote\r\ndown all the formulas. Moreover, he has already decided that the report\r\nwill consist of exactly n pages and the i-th page will include x_i\r\ntables and y_i formulas. The pages are numbered from 1 to n.Vova fills\r\nthe pages one after another, he can\u2019t go filling page i + 1 before\r\nfinishing page i and he can\u2019t skip pages. However, if he draws than k\r\ntables in a row or writes than k formulas in a row then he will get\r\nbored. Vova wants to rearrange tables and formulas in each page in such\r\na way that he doesn\u2019t get bored in the process. Vova can\u2019t move some\r\ntable or some formula to another page.Note that the count doesn\u2019t reset\r\non the start of the new page. For example, if the page ends with 3\r\ntables and the next page starts with 5 tables, then it\u2019s counted as 8\r\ntables in a row.Help Vova to determine if he can rearrange tables and\r\nformulas on each page in such a way that there is no more than k tables\r\nin a row and no more than k formulas in a row.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef double D;\ntypedef long long int LL;\n\n#define st first\n#define nd second\n#define pb push_back\n#define PLL pair <LL, LL>\n#define PII pair <int, int>\n\nconst int N = 3e5 + 7;\nconst int MX = 1e9 + 7;\nconst LL INF = 1e18 + 9LL;\n\nint n, k;\nint x[N], y[N];\nint dp[N][2];\n\nint get(int la, int lb, int ca, int cb){\n\tint ret = k + 1;\n\tif(la <= k){\n\t\tint need = (cb + k - 1) / k;\n\t\tLL maxPoss = 1LL * cb * k + k - la;\n\t\tif(need <= ca && ca <= maxPoss)\n\t\t\tret = min(1LL * ret, max(1LL, k - maxPoss + ca));\n\t}\n\t\n\tif(lb <= k){\n\t\tLL maxPoss = 1LL * (ca - 1) * k + k - lb;\n\t\tLL maxPoss2 = 1LL * (cb + 1) * k;\n\t\t\n\t\tif(cb <= maxPoss && ca <= maxPoss2)\n\t\t\tret = min(1LL * ret, max(1LL, k - maxPoss2 + ca));\n\t}\n\t\n\treturn ret;\n}\n\nint main(){\n//\tios_base::sync_with_stdio(false);\n//\tcin.tie(NULL);\n//\tcout.tie(NULL);\n\n\tscanf(\"%d %d\", &n, &k);\n\tfor(int i = 1; i <= n; ++i)\n\t\tscanf(\"%d\", &x[i]);\n\tfor(int i = 1; i <= n; ++i)\n\t\tscanf(\"%d\", &y[i]);\n\t\n\tfor(int i = 1; i <= n; ++i){\n\t\tdp[i][0] = get(dp[i - 1][0], dp[i - 1][1], x[i], y[i]);\n\t\tdp[i][1] = get(dp[i - 1][1], dp[i - 1][0], y[i], x[i]);\n\t}\n\t\n\tputs((dp[n][0] <= k || dp[n][1] <= k) ? \"YES\" : \"NO\");\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Summer Practice Report.json",
    "editorial_link": "https://codeforces.com/blog/entry/63151",
    "editorial": "Let\u00e2\u0080\u0099s intruduce the following dynamic programming approach. , is the\r\nsmallest number of elements of type page can end with. If we learn to\r\nrecalculate it, the answer will be \"\" if or . I will try to prove it on\r\nthe fly.Let\u00e2\u0080\u0099s look into the constructing of each page from the following\r\nperspective. I\u00e2\u0080\u0099ll consider the cases when the current page ends with\r\ntables and the previous page ends with either tables or formulas. Let\u00e2\u0080\u0099s\r\nwrite down all the tables and then put formulas as separators to them. I\r\nwill call number of tables on the end of the previous page , the number\r\nof formulas on the end of the previous page , the number on tables on\r\nthe current page and the number of formulas on the current page . In the\r\ncase with tables on the end of the previous page the smallest number of\r\nseparators you can have is . Moreover, if you have , you can put one of\r\nthe formulas right before the end of the page, ending it with table. The\r\nonly case is when there are too many separators. should be less or equal\r\nto (you can put up to separators before each table).The case with\r\nformulas on the end of the previous page isn\u00e2\u0080\u0099t that different. The\r\nsmallest number of separators is and the limit to the number of\r\nseparators is (you can\u00e2\u0080\u0099t put separators before the first table as in the\r\nfirst case, the maximum number to that position is determined by the\r\nprevious page).Now let\u00e2\u0080\u0099s take a look at resulting expressions. You can\r\nnotice that lowering can only decrease the lower bound on the number of\r\nseparators and lowering can only increase the upper bound on the number\r\nof separators. That shows that minimizing the values in is always\r\nprofitable.Overall complexity: .\r\n"
}