{"link": "https://codeforces.com//contest/1437/problem/C", "problemId": "775841", "problem_idx": "C", "shortId": "1437C", "contest_number": "1437", "problem_submissions": {"G": [96904215, 96908358, 96911556, 96933769, 96933754, 96933518, 96933473, 96933445, 96933414, 96933394, 96933374, 96932455, 96904310, 96918769, 96918726, 96918674, 96918569, 96915736, 96908201, 96875131, 106175814, 96910852, 96987761, 96907141, 96934887], "F": [96888983, 96900781, 96907021, 96914548, 96914009, 96904550, 96923575, 96889382, 96917076, 96892031, 96900189, 96901851, 96912014, 96916841, 96913488, 97559818, 96910656], "E": [96880914, 96882404, 96885840, 96932444, 96885328, 96892490, 96890860, 96896271, 96896163, 96888156, 96885346, 96887072, 96892577, 96896957, 96895240, 96898636, 97559735, 96897006], "D": [96875179, 96877608, 96875178, 96880944, 96885771, 96877805, 96898190, 96885975, 96876295, 96879122, 96877985, 96883085, 96879709, 96879615, 96881903, 97558972, 96886384], "C": [96871849, 96873242, 96871401, 96937777, 96917473, 96874581, 96876847, 96873952, 96902915, 96882435, 96874057, 96876339, 96874008, 96878071, 96874148, 96873187, 96875974, 97558809, 96872333], "B": [96868094, 96870116, 96868044, 96871520, 96869439, 96870069, 96905187, 96921093, 96871936, 96870828, 96870841, 96868971, 96868275, 96868652, 96869849, 97558720, 96868938], "A": [96867417, 96867598, 96867496, 96867654, 96867506, 96867568, 96906923, 96868396, 96867566, 96869874, 96869082, 96867617, 96867510, 96867621, 96867703, 97558428, 96867545]}, "name": "C. Chef Monocarp", "statement": "Chef Monocarp has just put n dishes into an oven. He knows that the i-th\r\ndish has its optimal cooking time equal to t_i minutes.At any minute T\r\nMonocarp can put dish out of the oven. If the i-th dish is put out at\r\nsome minute T, then its unpleasant value is |T - t_i| the absolute\r\ndifference between T and t_i. Once the dish is out of the oven, it can\u2019t\r\ngo back in.Monocarp should put all the dishes out of the oven. What is\r\nthe minimum total unpleasant value Monocarp can obtain?\r\n", "solutions": ["#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__);fflush(stderr);\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int INF = (int)1e8;\nconst int N = 422;\nint n;\nint a[N];\nint dp[N][N];\n\nvoid solve() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%d\", &a[i]);\n\tsort(a, a + n);\n\tint l = -1, r = INF;\n\tfor (int i = 0; i <= n; i++)\n\t\tfor (int x = 0; x <= 2 * n; x++)\n\t\t\tdp[i][x] = INF;\n\tdp[0][0] = 0;\n\tfor (int i = 0; i <= n; i++)\n\t\tfor (int x = 0; x < 2 * n; x++) {\n\t\t\tdp[i][x + 1] = min(dp[i][x + 1], dp[i][x]);\n\t\t\tif (i < n)\n\t\t\t\tdp[i + 1][x + 1] = min(dp[i + 1][x + 1], dp[i][x] + abs(a[i] - (x + 1)));\n\t\t}\n\tprintf(\"%d\\n\", dp[n][2 * n]);\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) solve();\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["dp", "flows", "graph matchings", "greedy", "math", "sortings"], "dificulty": "1800", "interactive": false}