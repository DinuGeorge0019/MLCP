{
    "link": "https://codeforces.com//contest/1832/problem/F",
    "problemId": "1919537",
    "problem_idx": "F",
    "shortId": "1832F",
    "contest_number": "1832",
    "problem_submissions": {
        "F": [
            205612816,
            205618187,
            205616065,
            205615360,
            205612997,
            205612699,
            205616615,
            205704621,
            205757584,
            205930525,
            205621852,
            205621757
        ],
        "E": [
            205588370,
            205576685,
            205587590,
            205562791,
            205578695,
            205581418,
            205576017,
            205588938,
            205587310,
            205585791,
            205594909,
            205587637,
            205568079,
            205590489,
            205592123,
            205595293,
            205581468,
            205598039,
            205585624
        ],
        "D1": [
            205582572,
            205571409,
            205573052,
            205565935,
            205571345,
            205569679,
            205567398,
            205577948,
            205578327,
            205578690,
            205578885,
            205573631,
            205580478,
            205584975,
            205584642,
            205576123,
            205577262,
            205587661,
            205590424,
            205578991,
            205594286
        ],
        "D2": [
            205582469,
            205571220,
            205573149,
            205573248,
            205571140,
            205587711,
            205587841,
            205578108,
            205578462,
            205578510,
            205604647,
            205579021,
            205580354,
            205589204,
            205584769,
            205584072,
            205587751,
            205599151,
            205586621,
            205599536
        ],
        "C": [
            205557102,
            205556400,
            205556488,
            205552484,
            205557070,
            205556143,
            205558460,
            205557880,
            205559387,
            205559279,
            205557942,
            205559043,
            205556434,
            205554797,
            205556994,
            205564356,
            205564037,
            205562522,
            205562917
        ],
        "B": [
            205552451,
            205550855,
            205551794,
            205549640,
            205552032,
            205552318,
            205551056,
            205550768,
            205554849,
            205551853,
            205553247,
            205555210,
            205553102,
            205550776,
            205552302,
            205556686,
            205557181,
            205553564,
            205556320
        ],
        "A": [
            205549496,
            205548656,
            205548697,
            205548635,
            205548771,
            205548615,
            205548617,
            205548590,
            205549420,
            205548691,
            205549006,
            205548793,
            205548840,
            205548603,
            205548831,
            205550263,
            205548997,
            205555130,
            205552258
        ]
    },
    "name": "F. Zombies",
    "statement": "Polycarp plays a computer game in a post-apocalyptic setting. The\r\nzombies have taken over the world, and Polycarp with a small team of\r\nsurvivors is defending against hordes trying to invade their base. The\r\nzombies are invading for x minutes starting from minute 0. There are n\r\nentrances to the base, and every minute one zombie attempts to enter\r\nthrough every entrance.The survivors can defend the entrances against\r\nthe zombies. There are two options: manually shoot the zombies coming\r\nthrough a certain entrance; automatically set up an electric fence on a\r\ncertain entrance to fry the zombies. If an entrance is defended either\r\nor both ways during some minute, no zombie goes through.Every entrance\r\nis defended by a single dedicated survivor. The i-th entrance is\r\ndefended manually from minute l_i until minute r_i, non-inclusive [l_i,\r\nr_i).There are k generators that can be used to defend the entrances\r\nautomatically. Every entrance should be connected to exactly one\r\ngenerator, but a generator can be connected to multiple entrances (or\r\neven none of them). Each generator will work for exactly m minutes.\r\nPolycarp can choose when to power on each generator independently of\r\neach other, the m minute long interval should be fully inside the [0, x)\r\ntime interval.Polycarp is a weird gamer. He wants the game to be as\r\ndifficult as possible for him. So he wants to connect each entrance to a\r\ngenerator and choose the time for each generator in such a way that as\r\nmany zombies as possible enter the base. Please, help him to achieve\r\nthat!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nconstexpr int inf = 1E9 + 1;\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int n, k, x, m;\n    std::cin >> n >> k >> x >> m;\n    \n    i64 ans = 1LL * n * (x - m);\n    \n    std::vector<int> l(n), r(n);\n    std::vector<int> cand{0, x - m};\n    for (int i = 0; i < n; i++) {\n        std::cin >> l[i] >> r[i];\n        ans -= r[i] - l[i];\n        if (l[i] <= x - m) {\n            cand.push_back(l[i]);\n        }\n        if (r[i] >= m) {\n            cand.push_back(r[i] - m);\n        }\n    }\n    std::sort(cand.begin(), cand.end());\n    \n    cand.erase(std::unique(cand.begin(), cand.end()), cand.end());\n    \n    cand.insert(cand.begin(), -inf);\n    cand.push_back(inf);\n    \n    int N = cand.size();\n    \n    std::vector<int> o(n);\n    std::iota(o.begin(), o.end(), 0);\n    std::sort(o.begin(), o.end(), [&](int i, int j) {\n        return l[i] + r[i] < l[j] + r[j];\n    });\n    \n    std::vector f(N, std::vector<i64>(N));\n    for (int i = 1, L = 0; i < N; i++) {\n        while (L < n && l[o[L]] + r[o[L]] - m < 2 * cand[i]) {\n            L++;\n        }\n        int R = L;\n        i64 sum = 0;\n        for (int j = i + 1; j < N; j++) {\n            while (R < n && (j == N - 1 || l[o[R]] + r[o[R]] - m < cand[i] + cand[j])) {\n                sum += std::max(0, std::min(cand[i] + m, r[o[R]]) - std::max(cand[i], l[o[R]]));\n                R++;\n            }\n            f[i][j] += sum;\n        }\n    }\n    for (int j = N - 2, R = n; j >= 0; j--) {\n        while (R && l[o[R - 1]] + r[o[R - 1]] - m >= 2 * cand[j]) {\n            R--;\n        }\n        int L = R;\n        i64 sum = 0;\n        for (int i = j - 1; i >= 0; i--) {\n            while (L && (i == 0 || l[o[L - 1]] + r[o[L - 1]] - m >= cand[i] + cand[j])) {\n                L--;\n                sum += std::max(0, std::min(cand[j] + m, r[o[L]]) - std::max(cand[j], l[o[L]]));\n            }\n            f[i][j] += sum;\n        }\n    }\n    \n    k++;\n    \n    i64 lo = 0, hi = 1E13;\n    \n    auto get = [&](i64 x) {\n        std::vector<i64> dp(N, -1E18);\n        dp[0] = 0;\n        std::vector<int> cnt(N);\n        \n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if (dp[j] < dp[i] + f[i][j] - x) {\n                    dp[j] = dp[i] + f[i][j] - x;\n                    cnt[j] = cnt[i] + 1;\n                }\n            }\n        }\n        \n        return std::pair(dp[N - 1], cnt[N - 1]);\n    };\n    \n    while (lo + 1 < hi) {\n        i64 m = (lo + hi) / 2;\n        auto [val, cnt] = get(m);\n        if (cnt < k) {\n            hi = m;\n        } else {\n            lo = m;\n        }\n    }\n    \n    auto [vl, cl] = get(lo);\n    auto [vr, cr] = get(hi);\n    \n    ans += std::min(vl + lo * k, vr + hi * k);\n    \n    std::cout << ans << \"\\n\";\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp"
    ],
    "dificulty": "3200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Zombies.json",
    "editorial_link": "https://codeforces.com//blog/entry/116454",
    "editorial": "First of all, letâs rephrase the problem a bit. For each entrance, we\r\nwill have two time segments: the segment when it is guarded, and the\r\nsegment when the corresponding generator works. The zombies will arrive\r\nthrough that entrance at every moment not belonging to these two\r\nsegments; so, if we want to maximize the number of zombies, we want to\r\nminimize the length of the unions of these pairs of segments for the\r\nentrances; and since the lengths of the segments are fixed, minimizing\r\nthe union means maximizing the intersection. So, we need to choose the\r\ntime segments for the generators and assign entrances to generators so\r\nthat the sum of intersections of segment pairs for each entrance is the\r\nmaximum possible.Okay, now we work with the sum of intersections.\r\nSuppose there are multiple generators (for which we have already chosen\r\ntheir time segments) and an entrance; is there an easy method how to\r\nchoose the optimal generator for the entrance? In fact, there is. We\r\nneed to look at the centers of all segments (both for the generators and\r\nthe entrance), and choose the generator for which the distance from the\r\ncenter of the entrance-segment to the center of the segment from that\r\ngenerator is the minimum possible (this only works because all\r\ngenerators have the same working time). Mathematically, if the segments\r\nfor the generators are denoted as , and the segment borders for the\r\nentrance are , we need to choose the generator that minimizes the value\r\nof , since it also minimizes the distance between the centers of the\r\nsegments.Do you see where this is going? In fact, this observation\r\nallows us to use exchange argument DP. Suppose the segments for the\r\ngenerators are already chosen; we can sort the entrances according to\r\nthe values for each entrance, and then split the sorted order of\r\nentrances into several groups: all entrances in the first group are\r\noptimal to hook up to the first generator, all entrances in the second\r\ngroup are optimal to hook up to the second generator, and so on. But\r\nsince the segments of the generators are not fixed, we will instead\r\nsplit the sorted order of the entrances into groups, and for each group,\r\noptimally choose the segment for the respective generator. So, this\r\nleads us to the following dynamic programming: the maximum possible sum\r\nof intersections if we have split the first entrances in sorted order\r\ninto groups. The transitions in this dynamic programming are quite\r\nsimple: we can just iterate on the next group, transitioning from to\r\n.Unfortunately, there are still two issues with this solution: How to\r\nreduce the number of transitions from to something like or ? How to\r\nchoose the best generator placement for a group of entrances, preferably\r\neither in or per one segment of entrances? Okay, the solution to the\r\nfirst issue is not that difficult. Intuitively, it looks like the\r\nrunning time of this dynamic programming can be improved with some of\r\nthe well-known DP optimizations. The two that probably come to mind\r\nfirst are divide-and-conquer optimization and aliens trick. Both of them\r\nseem to work, but unfortunately, we can prove only one of them (the\r\nproof is in the paragraph below). You can choose any of these two\r\noptimizations.We can prove this via quadrangle inequality: let be the\r\ntotal intersection for the entrances from to if the generator for them\r\nis chosen optimally, and be the optimal starting moment of the generator\r\nfor entrances from to . We have to show that , where .Suppose . Then, if\r\nwe take all entrances from the first group and add them to the second\r\ngroup, then choosing as the starting point for these two groups gives us\r\nthe total intersection equal to exactly . So, in this case, .Now suppose\r\n(the case is similar). Letâs again try to move all entrances from the\r\nfirst group to the second group. If the resulting sum of intersections\r\n(without shifting the starting points for the generators) did not\r\ndecrease, we have shown that . Otherwise, at least one entrance from is\r\ncloser to than to (in terms of distance between the segment centers).\r\nThis means that since the centers of the segments in are not greater\r\nthan the center of the segments in , then the segments from are also\r\ncloser to than to . So, the optimal starting moment for can be shifted\r\nto , and we arrive at the case we analyzed in the previous paragraph.The\r\nsolution to the second issue is a bit more complex. First of all, notice\r\nthat the only possible starting moments for generators we are interested\r\nin are of the form and , so there are only of them. Then letâs try to\r\nunderstand how to evaluate the sum of intersections for the generator\r\nstarting at some fixed moment and a segment of entrances. The model\r\nsolution does some very scary stuff with logarithmic data structures,\r\nbut the participants of the round showed us a much easier way: create a\r\nmatrix, where the number in the cell is the intersection of the segment\r\nfor the -th starting moment of the generator, and the segment when the\r\n-th entrance (in sorted order) is guarded; then, for a segment of\r\nentrances and a fixed starting moment of the generator, the total\r\nintersection can be calculated in using prefix sums on this\r\nmatrix.Unfortunately, trying each starting moment for every group of\r\nsegments is still . But it can be improved using something like Knuth\r\noptimization: let be the optimal starting point of the generator for the\r\ngroup of entrances ; then is between and , so calculating these optimal\r\nstarting points in the style of Knuth optimization gives us . However,\r\nthereâs one last nasty surprise waiting for us: if we are not careful\r\nabout choosing optimal starting moments, itâs possible that (for\r\nexample, if the segment for the entrance includes the segment for the\r\ngenerator ), which breaks the initialization of Knuth optimization. To\r\nresolve this issue, we can initialize the values of in a monotonic way,\r\nchoosing only from values not less than .Implementing all of this\r\nresults in a solution that works in .\r\n",
    "hint": []
}