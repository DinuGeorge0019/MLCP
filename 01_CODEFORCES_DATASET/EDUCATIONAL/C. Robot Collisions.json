{
    "link": "https://codeforces.com//contest/1525/problem/C",
    "problemId": "987013",
    "problem_idx": "C",
    "shortId": "1525C",
    "contest_number": "1525",
    "problem_submissions": {
        "D": [
            116596850,
            116594983,
            116556621,
            116344048,
            116344302,
            116349055,
            116346341,
            116347417,
            116335585,
            116344826,
            116338508,
            116335707,
            116341307,
            116349851,
            116341668,
            116351051,
            116353738,
            116347590,
            116343356,
            116345813,
            116346453,
            116348324
        ],
        "F": [
            116372175,
            116372025,
            116380530,
            116381098,
            116381539,
            116374296,
            116382706,
            116380101,
            116523025,
            116385915,
            116383799,
            116377898,
            116380915,
            116382591,
            116385839,
            116395698
        ],
        "E": [
            116351338,
            116353665,
            116354964,
            116353294,
            116353957,
            116361966,
            116348163,
            116347670,
            116343533,
            116351101,
            116353993,
            116360946,
            116355058,
            116358519,
            116354709,
            116351286,
            116352542,
            116358011,
            116357879
        ],
        "C": [
            116334549,
            116339182,
            116340233,
            116340613,
            116342489,
            116350963,
            116337654,
            116366806,
            116362628,
            116359745,
            116345739,
            116358283,
            116349150,
            116349846,
            116332723,
            116338076,
            116338563,
            116342647,
            116341792
        ],
        "B": [
            116321920,
            116322956,
            116323732,
            116325314,
            116321887,
            116323618,
            116323021,
            116322464,
            116326670,
            116325875,
            116323111,
            116331257,
            116322276,
            116322144,
            116322587,
            116325439,
            116323730,
            116321987,
            116325764
        ],
        "A": [
            116320634,
            116320705,
            116320798,
            116320688,
            116320665,
            116321107,
            116320786,
            116320654,
            116321098,
            116320865,
            116320734,
            116327758,
            116320593,
            116320655,
            116320605,
            116320657,
            116320652,
            116320617,
            116320774
        ]
    },
    "name": "C. Robot Collisions",
    "statement": "There are n robots driving along an OX axis. There are also two walls:\r\none is at coordinate 0 and one is at coordinate m.The i-th robot starts\r\nat an integer coordinate x_i\u00a0(0 < x_i < m) and moves either left\r\n(towards the 0) or right with the speed of 1 unit per second. No two\r\nrobots start at the same coordinate.Whenever a robot reaches a wall, it\r\nturns around instantly and continues his ride in the opposite direction\r\nwith the same speed.Whenever several robots meet at the same coordinate,\r\nthey collide and explode into dust. Once a robot has exploded, it\r\ndoesn\u2019t collide with any other robot. Note that if several robots meet\r\nat a non-integer coordinate, nothing happens.For each robot find out if\r\nit ever explodes and print the time of explosion if it happens and -1\r\notherwise.\r\n",
    "solutions": [
        "/*\n    author:  Maksim1744\n    created: 16.05.2021 11:10:10\n*/\n\n#include \"bits/stdc++.h\"\n\nusing namespace std;\n\nusing ll = long long;\nusing ld = long double;\n\n#define mp   make_pair\n#define pb   push_back\n#define eb   emplace_back\n\n#define sum(a)     ( accumulate ((a).begin(), (a).end(), 0ll))\n#define mine(a)    (*min_element((a).begin(), (a).end()))\n#define maxe(a)    (*max_element((a).begin(), (a).end()))\n#define mini(a)    ( min_element((a).begin(), (a).end()) - (a).begin())\n#define maxi(a)    ( max_element((a).begin(), (a).end()) - (a).begin())\n#define lowb(a, x) ( lower_bound((a).begin(), (a).end(), (x)) - (a).begin())\n#define uppb(a, x) ( upper_bound((a).begin(), (a).end(), (x)) - (a).begin())\n\ntemplate<typename T>             vector<T>& operator--            (vector<T> &v){for (auto& i : v) --i;            return  v;}\ntemplate<typename T>             vector<T>& operator++            (vector<T> &v){for (auto& i : v) ++i;            return  v;}\ntemplate<typename T>             istream& operator>>(istream& is,  vector<T> &v){for (auto& i : v) is >> i;        return is;}\ntemplate<typename T>             ostream& operator<<(ostream& os,  vector<T>  v){for (auto& i : v) os << i << ' '; return os;}\ntemplate<typename T, typename U> pair<T,U>& operator--           (pair<T, U> &p){--p.first; --p.second;            return  p;}\ntemplate<typename T, typename U> pair<T,U>& operator++           (pair<T, U> &p){++p.first; ++p.second;            return  p;}\ntemplate<typename T, typename U> istream& operator>>(istream& is, pair<T, U> &p){is >> p.first >> p.second;        return is;}\ntemplate<typename T, typename U> ostream& operator<<(ostream& os, pair<T, U>  p){os << p.first << ' ' << p.second; return os;}\ntemplate<typename T, typename U> pair<T,U> operator-(pair<T,U> a, pair<T,U> b){return mp(a.first-b.first, a.second-b.second);}\ntemplate<typename T, typename U> pair<T,U> operator+(pair<T,U> a, pair<T,U> b){return mp(a.first+b.first, a.second+b.second);}\ntemplate<typename T, typename U> void umin(T& a, U b){if (a > b) a = b;}\ntemplate<typename T, typename U> void umax(T& a, U b){if (a < b) a = b;}\n\n#ifdef HOME\n#define SHOW_COLORS\n#include \"C:/C++ libs/print.cpp\"\n#else\n#define show(...) void(0)\n#define mclock    void(0)\n#define shows     void(0)\n#define debug  if (false)\n#endif\n\nvoid test_case(int test) {\n    int n, m;\n    cin >> n >> m;\n    vector<int> ans(n, -1);\n    vector<pair<pair<int, char>, int>> v(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> v[i].first.first;\n        v[i].second = i;\n    }\n    for (int i = 0; i < n; ++i) {\n        cin >> v[i].first.second;\n    }\n    sort(v.begin(), v.end());\n    vector<deque<pair<int, int>>> cur(2);\n    for (auto [xd, i] : v) {\n        auto [x, d] = xd;\n        if (d == 'R') {\n            cur[x % 2].eb(x, i);\n        } else {\n            if (!cur[x % 2].empty()) {\n                auto [xx, ii] = cur[x % 2].back();\n                cur[x % 2].pop_back();\n                ans[i] = ans[ii] = abs(x - xx) / 2;\n            } else {\n                cur[x % 2].emplace_front(-x, i);\n            }\n        }\n    }\n    for (int i = 0; i < 2; ++i) {\n        while (cur[i].size() >= 2) {\n            auto [x, j] = cur[i].back();\n            cur[i].pop_back();\n            auto [xx, jj] = cur[i].back();\n            cur[i].pop_back();\n            ans[j] = ans[jj] = (m - x) + (x - xx) / 2;\n        }\n    }\n    cout << ans << '\\n';\n}\n\nint main() {\n    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n\n    int T;\n    cin >> T;\n    for (int test = 1; test <= T; ++test) {\n        test_case(test);\n    }\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Robot Collisions.json",
    "editorial_link": "https://codeforces.com//blog/entry/90793",
    "editorial": "Notice that the robots that start at even coordinates can never collide\r\nwith the robots that start at odd coordinates. You can see that if a\r\nrobot starts at an even coordinate, it\u00e2\u0080\u0099ll be at an even coordinate on an\r\neven second and at an odd coordinate on an odd second.Thus, we\u00e2\u0080\u0099ll solve\r\nthe even and the odd cases separately.Sort the robots by their starting\r\ncoordinate. Apparently, that step was an inconvenience for some of you.\r\nThere is a common trick that can help you to implement that. Create a\r\nseparate array of integer indices and sort them with a comparator that\r\nlooks up the value by indices provided to tell the order. This gives you\r\nthe order of elements and doesn\u00e2\u0080\u0099t require you to modify the original\r\ndata in any way.Consider the task without reflections of the wall. Take\r\na look at the first robot. If it goes to the left, then nothing ever\r\nhappens to it. Otherwise, remember that it goes to the right. Look at\r\nthe next one. If it goes to the left, then it can collide with the first\r\none if that went to the right. Otherwise, remember that it also goes to\r\nthe right. Now for the third one. If this one goes to the left, who does\r\nit collide with? Obviously, the rightmost alive robot that goes to the\r\nright.So the idea is to keep a stack of the alive robots. If a robot\r\ngoes to the left, then check if the stack is empty. If it isn\u00e2\u0080\u0099t, then\r\nthe top of the stack robot is the one who will collide with it. Pop it\r\nfrom the stack, since it explodes. If a robot goes to the right, simply\r\npush it to the stack. The time of the collision is just the distance\r\nbetween the robots divided by .If there are robots left in the stack\r\nafter every robot is processed, then they all go to the right together,\r\nso they never collide.What changes when the reflections are\r\nintroduced?Almost nothing, actually. Well, now if the stack is empty and\r\na robot goes to the left, then it behaves as a one going to the right.\r\nYou can reflect the part of the way from its start to the wall. Just say\r\nthat instead of starting at some going to the left, it starts at going\r\nto the right. Since there\u00e2\u0080\u0099s no one alive to the left of him initially,\r\nthat will change nothing. That should be used for computing the\r\ncollision time.However, the final robots in the stack also act\r\ndifferently. First, the top of the stack robots reflects off the wall\r\nand collides with the second on the stack one. Then the third and the\r\nfourth and so on. So you can pop them in pairs until or are left.The\r\ncoordinate reflection trick can be used here as well. Imagine that the\r\ntop of the stack starts at and goes to the left instead of starting in\r\ngoing to the right. For the same reason it changes nothing.Overall\r\ncomplexity: .\r\n"
}