{
    "link": "https://codeforces.com//contest/818/problem/E",
    "problemId": "112249",
    "problem_idx": "E",
    "shortId": "818E",
    "contest_number": "818",
    "problem_submissions": {
        "G": [
            30023806,
            28149762,
            28149727,
            28149674,
            28150840,
            28150782,
            28150772,
            28150751,
            28150583,
            36665796,
            28151676,
            28150077,
            28257233,
            28153699,
            28148603,
            28155021,
            28156689,
            28156349,
            28183779
        ],
        "F": [
            28147295,
            28150245,
            28148357,
            28147147,
            28148601,
            28147618,
            28149338,
            28148822,
            28148432,
            28150045,
            28149715,
            28149799,
            28150664,
            28150399,
            28265989,
            28152841,
            28152214,
            28151371,
            28150016,
            28150927,
            28150947,
            28149764
        ],
        "E": [
            28145911,
            28145866,
            28146912,
            28146350,
            28146816,
            28150531,
            28146712,
            28147272,
            28147609,
            28147038,
            28148502,
            28147986,
            28147358,
            28149016,
            28148737,
            28150693,
            28148409,
            28146623,
            28149530,
            28149268,
            28147603
        ],
        "D": [
            28144801,
            28145060,
            28145928,
            28145417,
            28145327,
            28143658,
            28146282,
            28144973,
            28145879,
            28146889,
            28146309,
            28145676,
            28146984,
            28146985,
            28145000,
            28147304,
            28145917,
            28147015,
            28147874,
            28146172
        ],
        "C": [
            28144306,
            28147073,
            28145409,
            28144547,
            28144448,
            28144425,
            28145368,
            28146425,
            28145275,
            28145837,
            28145300,
            28145004,
            28145976,
            28145637,
            28147975,
            28146492,
            28148332,
            28146298,
            28146819,
            28144965
        ],
        "B": [
            28143095,
            28143560,
            28143556,
            28143415,
            28143669,
            28144503,
            28144240,
            28143720,
            28144083,
            28143468,
            28143875,
            28143599,
            28143355,
            28143995,
            28143629,
            28143924,
            28143708,
            28142954,
            28143812,
            28144185
        ],
        "A": [
            28142461,
            28142521,
            28142540,
            28142460,
            28142740,
            28142644,
            28142466,
            28142416,
            28142519,
            28142508,
            28142479,
            28142800,
            28142422,
            28142542,
            28142573,
            28142463,
            28142490,
            28142485
        ]
    },
    "name": "E. Card Game Again",
    "statement": "Vova again tries to play some computer card game.The rules of deck\r\ncreation in this game are simple. Vova is given an existing deck of\r\ncards and a magic number . The order of the cards in the deck is fixed.\r\nEach card has a number written on it; number is written on the -th card\r\nin the deck.After receiving the deck and the magic number, Vova removes\r\n(possibly ) cards from the top of the deck, (possibly ) cards from the\r\nbottom of the deck, and the rest of the deck is his new deck (Vova has\r\nto leave at least one card in the deck after removing cards). So Vova’s\r\nnew deck actually contains cards , , ... , from the original deck.Vova’s\r\nnew deck is considered iff the product of all numbers written on the\r\ncards in his new deck is divisible by . So Vova received a deck\r\n(possibly not a one) and a number , and now he wonders, how many ways\r\nare there to choose and so the deck he will get after removing cards\r\nfrom the top and cards from the bottom is ?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define N 101010\ntypedef long long LL;\nint n , k , a[ N ] , t[ N ];\nbool p[ N ];\nvoid init(){\n  cin >> n >> k;\n  for( int i = 0 ; i < n ; i ++ )\n    cin >> a[ i ];\n}\nint g[ N ];\nvoid go( int pp ){\n  int nd = 0;\n  while( k % pp == 0 )\n    nd ++, k /= pp;\n  for( int i = 0 ; i < n ; i ++ ){\n    g[ i ] = 0;\n    while( a[ i ] % pp == 0 )\n      g[ i ] ++, a[ i ] /= pp;\n  }\n  for( int i = 0 , j = -1 , c = 0 ; i < n ; i ++ ){\n    while( j < n and c < nd ) c += g[ ++ j ];\n    t[ i ] = max( t[ i ] , j );\n    c -= g[ i ];\n  }\n}\nvoid solve(){\n  if( k == 1 ){\n    cout << (LL)( n + 1 ) * n / 2 << endl;\n    return;\n  }\n  for( int i = 2 ; i < N ; i ++ ) if( !p[ i ] ){\n    if( k % i == 0 ) go( i );\n    for( int j = i ; j < N ; j += i )\n      p[ j ] = true;\n  }\n  if( k > 1 ) go( k );\n  LL ans = 0;\n  for( int i = 0 ; i < n ; i ++ )\n    ans += n - t[ i ];\n  cout << ans << endl;\n}\nint main(){\n  init();\n  solve();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "number theory",
        "two pointers"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Card Game Again.json",
    "editorial_link": "https://codeforces.com/blog/entry/52991",
    "editorial": "Letâs use two pointers.Firstly you need to learn to factorize any number\r\nin no more than . We donât actually need any of their prime divisors\r\nexcept for those that are presented in . So letâs factorize in . After\r\nthat check for the maximum power of each useful prime will work in for\r\neach number.Now notice that if some segment has its product divisible by\r\nthen all segments for () will also have products divisible by .Now we\r\nhave to find the smallest for each out there. Thatâs where two pointers\r\nkick in. Letâs maintain the current product of the segment in factorized\r\nform (only useful primes), as in normal form its enormous. The power of\r\nsome prime in this form is the sum of powers of this prime in all the\r\nnumbers in the segment. We firstly move the left border of the segment\r\none step to the right and then keep moving the right border to the right\r\nuntil power of at least one prime number in the product is smaller than\r\nin . It means that it is not divisible by . Moving the left border means\r\nsubtracting all the powers of useful primes of number from the product\r\nand moving the right border is adding all the powers of useful primes of\r\n.The first time we reach such a segment, we add () to answer (consider\r\n-indexed).Overall complexity: , where is up to .\r\n",
    "hint": []
}