{
    "link": "https://codeforces.com//contest/1398/problem/D",
    "problemId": "699504",
    "problem_idx": "D",
    "shortId": "1398D",
    "contest_number": "1398",
    "problem_submissions": {
        "G": [
            89915963,
            89919649,
            89969541,
            89969478,
            89969399,
            89923373,
            89932796,
            89925690,
            89932477,
            89942517,
            89940456,
            89939176,
            89934894,
            89934457,
            89937693,
            89934633,
            89938319,
            89937371,
            89998747,
            89998438,
            89941918,
            89943420,
            89938418,
            89962347,
            89937826,
            91732579,
            91721537,
            91721531,
            91720040,
            91720007,
            91719903,
            89956129,
            89955780,
            89942074,
            89938585,
            89944168
        ],
        "F": [
            89912067,
            89913917,
            89970425,
            89946897,
            89910497,
            89907909,
            89921580,
            89925827,
            89926930,
            89927249,
            89928492,
            89920424,
            90033370,
            89917113,
            89932855,
            89933064,
            89929161,
            89924362,
            89920121,
            89940340,
            89933347,
            89929042
        ],
        "E": [
            89905047,
            89908543,
            89968389,
            89916074,
            89918608,
            89913134,
            89918941,
            89911745,
            89920728,
            89917154,
            89930653,
            89930795,
            89916495,
            89920330,
            89922316,
            89913338,
            89912908,
            89934884,
            89919511,
            89915904
        ],
        "D": [
            89896202,
            89894262,
            89927478,
            89895466,
            89894434,
            89904634,
            89907380,
            89898375,
            89898000,
            89898904,
            89895538,
            89900457,
            89898646,
            89893142,
            89905486,
            89900465,
            89900312,
            89902255,
            89897637
        ],
        "C": [
            89885830,
            89883985,
            89884334,
            89886727,
            89888686,
            89890331,
            89887777,
            89891076,
            89887912,
            89887655,
            89893333,
            89888198,
            89884415,
            89891205,
            89886744,
            89888315,
            89893476,
            89886675
        ],
        "B": [
            89882536,
            89880929,
            89882045,
            89882783,
            89885320,
            89885640,
            89884725,
            89881741,
            89883376,
            89882325,
            89890179,
            89884220,
            89880525,
            89887877,
            89881688,
            89882767,
            89889537,
            89882098
        ],
        "A": [
            89878857,
            89878683,
            89924676,
            89879194,
            89878701,
            89878764,
            89880470,
            89880388,
            89879912,
            89878682,
            89878924,
            89878750,
            89886185,
            89879017,
            89878663,
            89880890,
            89878758,
            89878853,
            89884879,
            89878791
        ]
    },
    "name": "D. Colored Rectangles",
    "statement": "You are given three multisets of pairs of colored sticks: R pairs of red\r\nsticks, the first pair has length r_1, the second pair has length r_2,\r\ndots, the R-th pair has length r_R; G pairs of green sticks, the first\r\npair has length g_1, the second pair has length g_2,\r\ndots, the G-th pair has length g_G; B pairs of blue sticks, the first\r\npair has length b_1, the second pair has length b_2,\r\ndots, the B-th pair has length b_B; You are constructing rectangles from\r\nthese pairs of sticks with the following process: take a pair of sticks\r\nof one color; take a pair of sticks of another color different from the\r\nfirst one; add the area of the resulting rectangle to the total area.\r\nThus, you get such rectangles that their opposite sides are the same\r\ncolor and their adjacent sides are not the same color.Each pair of\r\nsticks can be used at most once, some pairs can be left unused. You are\r\nnot allowed to split a pair into independent sticks.What is the maximum\r\narea you can achieve?\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__);fflush(stderr);\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int N = 202;\nint a[N], b[N], c[N];\nint dp[N][N][N];\nint n, m, k;\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%d\", &a[i]);\n\tsort(a, a + n);\n\tfor (int i = 0; i < m; i++)\n\t\tscanf(\"%d\", &b[i]);\n\tsort(b, b + m);\n\tfor (int i = 0; i < k; i++)\n\t\tscanf(\"%d\", &c[i]);\n\tsort(c, c + k);\n\n\tfor (int i = n; i >= 0; i--)\n\t\tfor (int j = m; j >= 0; j--)\n\t\t\tfor (int h = k; h >= 0; h--) {\n\t\t\t\tif (i > 0 && j > 0)\n\t\t\t\t\tdp[i - 1][j - 1][h] = max(dp[i - 1][j - 1][h], dp[i][j][h] + a[i - 1] * b[j - 1]);\n\t\t\t\tif (i > 0 && h > 0)\n\t\t\t\t\tdp[i - 1][j][h - 1] = max(dp[i - 1][j][h - 1], dp[i][j][h] + a[i - 1] * c[h - 1]);\n\t\t\t\tif (j > 0 && h > 0)\n\t\t\t\t\tdp[i][j - 1][h - 1] = max(dp[i][j - 1][h - 1], dp[i][j][h] + b[j - 1] * c[h - 1]);\n\t\t\t}\n\tint ans = 0;\n\tfor (int i = 0; i <= n; i++)\n\t\tfor (int j = 0; j <= m; j++)\n\t\t\tfor (int h = 0; h <= k; h++)\n\t\t\t\tans = max(ans, dp[i][j][h]);\n\tprintf(\"%d\\n\", ans);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "sortings"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Colored Rectangles.json",
    "editorial_link": "https://codeforces.com//blog/entry/81506",
    "editorial": "Let\u00e2\u0080\u0099s build some rectangles and take a look at the resulting pairings.\r\nFor example, consider only red/green rectangles. Let the rectangles be ,\r\n, .... Sort them in a non-decreasing order of . I claim that in the most\r\noptimal set are also sorted in a non-decreasing order. It\u00e2\u0080\u0099s easy to\r\nprove with some induction.Moreover, if there are some green or red\r\nsticks that are not taken and that are longer than the smallest taken\r\ncorresponding sticks, then it\u00e2\u0080\u0099s always optimal to take those\r\ninstead.These facts helps us to conclude that from each set only some\r\nsuffix of the largest sticks are taken. And they also give us the idea\r\nof the solution: sort the sticks in each set and pick the largest from\r\nany of the two sets into a pair until no pairs can be taken.However, the\r\ngreedy approach of \"take from any two of the three sets\" is incorrect.\r\nWe need to choose these two sets smartly. Let store the maximum total\r\narea that can be obtained by taking largest red sticks, largest green\r\nsticks and largest blue sticks. Each transition chooses a pair of colors\r\nand takes the next pairs in both of them.The answer is the maximum value\r\nin all the .Overall complexity: .\r\n"
}