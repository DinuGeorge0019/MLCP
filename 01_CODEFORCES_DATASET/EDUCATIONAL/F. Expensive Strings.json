{
    "link": "https://codeforces.com//contest/616/problem/F",
    "problemId": "45349",
    "problem_idx": "F",
    "shortId": "616F",
    "contest_number": "616",
    "problem_submissions": {
        "F": [
            15300786,
            15299144,
            15300407,
            15308014,
            15298659,
            15302230,
            15343881,
            15307137,
            15302999,
            15320984,
            15302125,
            15301613,
            15302389,
            16304774
        ],
        "E": [
            15294336,
            15296370,
            15296055,
            15299653,
            15294693,
            15294203,
            15295924,
            15295314,
            15296974,
            15298724,
            15298421,
            15296783,
            15296993,
            15297669,
            15298444,
            15297290,
            15298438,
            15297005,
            15297742,
            15294191,
            15296949
        ],
        "D": [
            15292434,
            15293329,
            15294173,
            15292753,
            15307747,
            15291461,
            15292962,
            15291869,
            15293349,
            15311532,
            15309884,
            15290895,
            15292938,
            15291478,
            15291995,
            15292322,
            15292029,
            15294220,
            15293485,
            15292134,
            15291999,
            15296150,
            15292776
        ],
        "C": [
            15291423,
            15291977,
            15292603,
            15292078,
            15290640,
            15291851,
            15293736,
            15291941,
            15292201,
            15291847,
            15290459,
            15291357,
            15293820,
            15291327,
            15293027,
            15292213,
            15291382,
            15291194,
            15291415,
            15291744
        ],
        "B": [
            15289897,
            15289576,
            15290149,
            15290568,
            15289808,
            15289641,
            15290425,
            15289878,
            15289727,
            15289729,
            15289456,
            15290134,
            15289943,
            15289714,
            15290242,
            15290500,
            15289857,
            15289675,
            15289746,
            15290000
        ],
        "A": [
            15289459,
            15289308,
            15289551,
            15290016,
            15289415,
            15289340,
            15289832,
            15289405,
            15289403,
            15289339,
            15289246,
            15289704,
            15289544,
            15307602,
            15289399,
            15289609,
            15325750,
            15289995,
            15289432,
            15289359,
            15289427,
            15289492
        ]
    },
    "name": "F. Expensive Strings",
    "statement": "You are given strings . Each string has cost .Let’s define the function\r\nof string , where is the number of occurrences of in , is the length of\r\nthe string . Find the maximal value of function over all strings.Note\r\nthat the string is not necessarily some string from .\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <set>\n#include <map>\n#include <string>\n#include <vector>\n#include <bitset>\n#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <queue>\n\n\ntypedef long long ll;\ntypedef double ld;\n\nusing namespace std;\n\nconst int MAXN = 650000;\nconst int SYM = 256;\n\nll ans = 0;\n\nchar s[MAXN];\nint nc[MAXN];\nint gc[MAXN];\nint cost[MAXN];\npair<int, int> rmq[MAXN * 4];\nint fs[MAXN];\nint p[MAXN];\nint lcp[MAXN];\nll pr[MAXN];\nset<int> ss;\nint st[MAXN];\nint en[MAXN];\nint len[MAXN];\nint m;\nint newc[MAXN];\nint cc[MAXN];\nint newp[MAXN];\nint c[MAXN];\n\n\n\n\n\n\nvoid build(int v, int tl, int tr) {\n\tif (tl + 1 == tr) {\n\t\trmq[v] = make_pair(lcp[tl], tl);\n\t\treturn;\n\t}\n\tint m = (tl + tr) >> 1;\n\tbuild(v * 2 + 1, tl, m);\n\tbuild(v * 2 + 2, m, tr);\n\trmq[v] = min(rmq[v * 2 + 1], rmq[v * 2 + 2]);\n}\n\npair<int, int> get(int v, int tl, int tr, int l, int r) {\n\tif (r <= tl || tr <= l)\n\t\treturn make_pair(MAXN, 0);\n\tif (l <= tl && tr <= r)\n\t\treturn rmq[v];\n\tint m = (tl + tr) >> 1;\n\treturn min(get(v * 2 + 1, tl, m, l, r), get(v * 2 + 2, m, tr, l, r));\n}\n\nvoid init() {\n\tfor (int i = 0; i < m; ++i)\n\t\tnc[i] = gc[p[i]];\n\tpr[0] = 0;\n\tfor (int i = 0; i < m; ++i)\n\t\tpr[i + 1] = pr[i] + nc[i];\n\tss.clear();\n\tfor (int i = 0; i < m; ++i)\n\t\tif (s[i] == '#' || s[i] == 1)\n\t\t\tss.insert(i);\n\tfor (int i = 0; i < m; ++i) {\n\t\tint x = *ss.lower_bound(p[i]);\n\t\tfs[i] = x - p[i];\n\t}\n\tfor (int i = 0; i < m - 1; ++i)\n\t\tlcp[i] = min(lcp[i], min(fs[i], fs[i + 1]));\n\tlcp[m - 1] = 0;\n\tbuild(0, 0, m);\n}\n\n\nvoid dfs(int l, int r, int lst) {\n\tif (l == r) {\n\t\tif (fs[l] > lst)\n\t\t\tans = max(ans, nc[l] * (ll)fs[l]);\n\t\treturn;\n\t}\n\tauto gg = get(0, 0, m, l, r);\n\tif (gg.first > lst)\n\t\tans = max((ll)gg.first * (ll)(pr[r + 1] - pr[l]), ans);\n\tdfs(l, gg.second, max(lst, gg.first));\n\tdfs(gg.second + 1, r, max(lst, gg.first));\n}\n\nint nm(int x, int n) {\n\twhile (x < 0)\n\t\tx += n;\n\twhile (x >= n)\n\t\tx -= n;\n\treturn x;\n}\n\nvoid makesa(char *s, int n) {\n\tfor (int i = 0; i < n; ++i)\n\t\tc[i] = s[i], ++cc[c[i] + 1];\n\tfor (int i = 0; i < SYM; ++i)\n\t\tcc[i + 1] += cc[i];\n\tfor (int i = 0; i < n; ++i)\n\t\tp[cc[c[i]]++] = i;\n\tfor (int k = 0; (1 << k) < n; ++k) {\n\t\tfor (int i = 0; i < n; ++i)\n\t\t\tp[i] = nm(p[i] - (1 << k), n);\n\t\tmemset(cc, 0, sizeof(cc));\n\t\tfor (int i = 0; i < n; ++i)\n\t\t\t++cc[c[i] + 1];\n\t\tfor (int i = 0; i < max(n, SYM); ++i)\n\t\t\tcc[i + 1] += cc[i];\n\t\tfor (int i = 0; i < n; ++i)\n\t\t\tnewp[cc[c[p[i]]]++] = p[i];\n\t\tmemcpy(p, newp, sizeof(newp[0]) * n);\n\t\tnewc[p[0]] = 0;\n\t\tfor (int i = 1; i < n; ++i) {\n\t\t\tif (c[p[i]] == c[p[i - 1]] && c[nm(p[i] + (1 << k), n)] == c[nm(p[i - 1] + (1 << k), n)])\n\t\t\t\tnewc[p[i]] = newc[p[i - 1]];\n\t\t\telse\n\t\t\t\tnewc[p[i]] = newc[p[i - 1]] + 1;\n\t\t}\n\t\tmemcpy(c, newc, sizeof(newc[0]) * n);\n\t}\n\tif (n == 1) {\n\t\tlcp[0] = 0;\n\t\treturn;\n\t}\n\tint lst = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tint now = c[i];\n\t\tif (now == n - 1) {\n\t\t\tlst = 0;\n\t\t\tcontinue;\n\t\t}\n\t\t--lst;\n\t\tif (lst < 0)\n\t\t\t++lst;\n\t\twhile (s[i + lst] == s[p[now + 1] + lst])\n\t\t\t++lst;\n\t\tlcp[now] = lst;\n\t}\n}\n\n\nint n;\n\nint main() {\n\tscanf(\"%d\", &n);\n\tchar *s2 = s;\n\tfor (int i = 0; i < n; ++i) {\n\t\tscanf(\" %s\", s2);\n\t\tlen[i] = strlen(s2);\n\t\tst[i] = s2 - s;\n\t\ten[i] = st[i] + len[i];\n\t\ts2 += len[i];\n\t\ts2[0] = '#';\n\t\t++s2;\n\t}\n\n\tfor (int i = 0; i < n; ++i)\n\t\tscanf(\"%d\", cost + i);\n\n\tfor (int i = 0; i < n; ++i)\n\t\tfor (int j = st[i]; j < en[i]; ++j)\n\t\t\tgc[j] = cost[i];\n\n\tm = s2 - s;\n\ts[m - 1] = 1;\n\n\tmakesa(s, m); //array & lcp\n\t\n\tinit(); //nc & pref sums & rmq on lcp & find first #\n\n\tdfs(0, m - 1, 0);\n\n\tcout << ans << \"\\n\";\n\n\treturn 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "string suffix structures",
        "strings"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Expensive Strings.json",
    "editorial_link": "https://codeforces.com//blog/entry/22712",
    "editorial": "This problem was prepared by Grigory Reznikow vintage_Vlad_Makeev. His\r\nsolution uses suffix array. This problem is a typical problem for some\r\nsuffix data structure. Four competitors who solved this problem during\r\nthe contest used suffix automaton and one competitor used suffix tree.\r\nMy own solution used suffix tree so Iâll describe solution with tree (I\r\nthink itâs simple except of the building of the tree). Letâs build the\r\nnew string by concatenation of all strings from input separating them by\r\ndifferent separators. The number of separators is so the alphabet is\r\nalso . So we should use map<int, int> to store the tree and the\r\ncomplexity is increased by . Letâs build the suffix tree for the new\r\nstring. Letâs match all the separators to the strings from the left of\r\nthe separator. Letâs run dfs on the suffix tree that doesnât move over\r\nseparators and returns the sum of the costs of the strings matched to\r\nthe separators from the subtree of the current vertex. Easy to see that\r\nwe should simply update the answer by the product of the depth of the\r\ncurrent vertex and the sum in the subtree of the current vertex. ++\r\nsolution Complexity: .\r\n",
    "hint": []
}