{
    "link": "https://codeforces.com//contest/1743/problem/A",
    "problemId": "1590316",
    "problem_idx": "A",
    "shortId": "1743A",
    "contest_number": "1743",
    "problem_submissions": {
        "G": [
            176744926,
            176752632,
            176765710,
            176759446,
            176826731,
            176825958,
            176825876,
            176825841,
            176825795,
            176825757,
            176777747,
            176767399,
            176787833,
            176794001,
            176793915,
            176793787,
            176793693,
            176793601,
            176793457,
            176793414,
            176793075,
            176792582,
            176790966,
            176790830,
            176790739,
            176790602,
            176790480,
            176790442,
            176790394,
            176877236,
            176797381,
            177041275
        ],
        "F": [
            176737097,
            176733706,
            176744244,
            176746662,
            176734362,
            176741223,
            176737910,
            176729577,
            176742322,
            176771541,
            176747634,
            176866127,
            176744359,
            176742533,
            176764904,
            176749314,
            176748844,
            176759565,
            176751246,
            176746192,
            176742294,
            176760205
        ],
        "E": [
            176732507,
            176757486,
            176736176,
            176739966,
            176749212,
            176748013,
            176727666,
            176739006,
            176729866,
            176763689,
            176763186,
            176762781,
            176756640,
            176764718,
            176740887,
            176756959,
            176787283,
            176742950,
            176761500,
            176766019,
            176770369,
            176749818
        ],
        "D": [
            176723746,
            176718140,
            176716615,
            176721411,
            176719450,
            176723698,
            176718782,
            176720745,
            176721715,
            176722102,
            176729581,
            176725500,
            176730292,
            176719597,
            176730936,
            176731941,
            176724207,
            176723731,
            176736911
        ],
        "C": [
            176716029,
            176704815,
            176706962,
            176708929,
            176705118,
            176704124,
            176715109,
            176705993,
            176708271,
            176707432,
            176707937,
            176714968,
            176710289,
            176708841,
            176705755,
            176710426,
            176713787,
            176707796,
            176708736,
            176710057
        ],
        "B": [
            176712751,
            176699478,
            176698683,
            176699488,
            176698322,
            176698046,
            176699875,
            176699384,
            176699501,
            176699739,
            176704430,
            176700303,
            176700238,
            176699124,
            176702452,
            176707386,
            176700133,
            176698867,
            176703708
        ],
        "A": [
            176712234,
            176698003,
            176697838,
            176697817,
            176697799,
            176697771,
            176697968,
            176697810,
            176698111,
            176698066,
            176699952,
            176697901,
            176698001,
            176697928,
            176699293,
            176697926,
            176697958,
            176697832,
            176698850
        ]
    },
    "name": "A. Password",
    "statement": "Monocarp has forgotten the password to his mobile phone. The password\r\nconsists of 4 digits from 0 to 9 (note that it can start with the digit\r\n0).Monocarp remembers that his password had exactly two different\r\ndigits, and each of these digits appeared exactly two times in the\r\npassword. Monocarp also remembers some digits which were definitely not\r\nused in the password.You have to calculate the number of different\r\nsequences of 4 digits that could be the password for Monocarp’s mobile\r\nphone (i. e. these sequences should meet all constraints on Monocarp’s\r\npassword).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n;\n    std::cin >> n;\n    \n    for (int i = 0; i < n; i++) {\n        int x;\n        std::cin >> x;\n    }\n    \n    std::cout << (10 - n) * (9 - n) * 3 << \"\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Password.json",
    "editorial_link": "https://codeforces.com//blog/entry/108153",
    "editorial": "There are two possible solutions for the problem.The first solution is\r\nbasically brute force. Each password can be obtained from an integer\r\nfrom to . If the number is from to , then itâs already a password of\r\nlength . Otherwise, you have to prepend it with enough zeros so that it\r\nbecomes length .Then you have to check if the password is valid. First,\r\ncheck if it consists of exactly two different digits: make a set of all\r\nits characters (set<char> in case of C++, for example) and check its\r\nsize. Then check if the first digit of the password appears exactly\r\ntwice. It would mean that the other digits appears exactly twice as\r\nwell. Finally, check if neither of the found digits are forbidden.The\r\nsecond solution is based on combinatorics. First, choose the two digits\r\nthat will appear in the password: . Since digits are prohibited, the\r\nremaining are allowed. Second, choose the positions that will be taken\r\nby the first one: . The answer is the product of these two values.\r\n",
    "hint": []
}