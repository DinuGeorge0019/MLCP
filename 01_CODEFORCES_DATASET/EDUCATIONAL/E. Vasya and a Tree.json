{"link": "https://codeforces.com//contest/1076/problem/E", "problemId": "253929", "problem_idx": "E", "shortId": "1076E", "contest_number": "1076", "problem_submissions": {"G": [45625846, 45630140, 45632982, 46960572, 46960569, 46960484, 46960479, 45661891, 45661748, 45661556, 45637887], "F": [45614239, 45617004, 45617675, 45621744, 45623056, 45621580, 45616229, 45624418, 45620163, 45626942, 45622892, 92696270, 45628245, 45626700, 45628806, 45625577, 45627726, 45626872, 45629774, 45627914], "E": [45608069, 45606664, 45609407, 45611410, 45613399, 45608388, 45619010, 45614637, 45612416, 45607002, 45613856, 45612132, 45618044, 45620715, 45614237, 45682359, 45621599, 45618734, 45620976], "D": [45604073, 45602278, 45603983, 45604745, 45608217, 45612332, 45603996, 45608096, 45607173, 45610865, 45611014, 45608491, 45611013, 45612751, 45610584, 45615172, 45677601, 45613074, 45613230], "C": [45600029, 45599030, 45599822, 45597549, 45600013, 45601957, 45599535, 45601880, 45597795, 45594983, 45608083, 45600343, 45605220, 45599746, 45605736, 45602724, 45604906, 45602506], "B": [45596357, 45597200, 45597164, 45595268, 45596818, 45597059, 45596991, 45599540, 45605291, 45600750, 45604626, 45597294, 45597956, 45598110, 45602593, 45598676, 45601974, 45596576], "A": [45594616, 45596057, 45594765, 45594566, 45594867, 45594852, 45605960, 45594859, 45594710, 45599455, 45594781, 45595172, 45594643, 45594748, 45596363, 45595242, 45597244, 45594970]}, "name": "E. Vasya and a Tree", "statement": "Vasya has a tree consisting of n vertices with root in vertex 1. At\r\nfirst all vertices has 0 written on it.Let d(i, j) be the distance\r\nbetween vertices i and j, i.e. number of edges in the shortest path from\r\ni to j. Also, let\u2019s denote k-subtree of vertex x set of vertices y such\r\nthat next two conditions are met: x is the ancestor of y (each vertex is\r\nthe ancestor of itself); d(x, y)\r\nle k. Vasya needs you to process m queries. The i-th query is a triple\r\nv_i, d_i and x_i. For each query Vasya adds value x_i to each vertex\r\nfrom d_i-subtree of v_i.Report to Vasya all values, written on vertices\r\nof the tree after processing all queries.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef double D;\ntypedef long long int LL;\n\n#define st first\n#define nd second\n#define pb push_back\n#define PLL pair <LL, LL>\n#define PII pair <int, int>\n\nconst int N = 3e5 + 7;\nconst int T = 1 << 19;\n\nconst int MX = 1e9 + 7;\nconst LL INF = 1e18 + 9LL;\n\nint n, m;\nLL ans[N];\nvector <int> G[N];\n\nint rv[N];\nint pre[N];\nint post[N];\nint depth[N];\n\nLL tree[T + T + 7];\nvector <PII> quests[N];\n\nvoid dfs(int u, int p){\n\tstatic int Time = 0;\n\t\n\tpre[u] = ++Time;\n\trv[Time] = u;\n\t\n\tfor(auto v: G[u]){\n\t\tif(v == p)\n\t\t\tcontinue;\n\n\t\tdepth[v] = depth[u] + 1;\n\t\tdfs(v, u);\n\t}\n\t\n\tpost[u] = Time;\n}\n\nvoid add(int x, int v){\n\tx += T;\n\twhile(x){\n\t\ttree[x] += v;\n\t\tx >>= 1;\n\t}\n}\n\nLL ask(int from, int to){\n\tLL ret = 0;\n\tfrom += T, to += T;\n\t\n\twhile(from < to){\n\t\tif(from & 1)\n\t\t\tret += tree[from];\n\t\tif(!(to & 1))\n\t\t\tret += tree[to];\n\t\t\n\t\tfrom = (from + 1) >> 1;\n\t\tto = (to - 1) >> 1;\n\t}\n\t\n\tif(from == to)\n\t\tret += tree[from];\n\treturn ret;\n}\n\nint main(){\n//\tios_base::sync_with_stdio(false);\n//\tcin.tie(NULL);\n//\tcout.tie(NULL);\n\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i < n; ++i){\n\t\tint u, v;\n\t\tscanf(\"%d %d\", &u, &v);\n\t\t\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\n\t}\n\t\n\tdepth[1] = 1;\n\tdfs(1, 0);\n\t\n\tscanf(\"%d\", &m);\n\tfor(int i = 1; i <= m; ++i){\n\t\tint v, d, x;\n\t\tscanf(\"%d %d %d\", &v, &d, &x);\n\t\t\n\t\td += depth[v];\n\t\td = min(d, n);\n\t\t\n\t\tquests[pre[v]].push_back({d, x});\n\t\tquests[post[v] + 1].push_back({d, -x});\n\t}\n\t\n\tfor(int i = 1; i <= n; ++i){\n\t\tfor(auto v: quests[i])\n\t\t\tadd(v.st, v.nd);\n\t\t\n\t\tans[rv[i]] = ask(depth[rv[i]], n);\n\t}\n\t\n\tfor(int i = 1; i <= n; ++i)\n\t\tprintf(\"%lld \", ans[i]);\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "trees"], "dificulty": "1900", "interactive": false}