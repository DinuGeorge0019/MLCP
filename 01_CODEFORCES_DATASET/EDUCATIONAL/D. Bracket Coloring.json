{
    "link": "https://codeforces.com//contest/1837/problem/D",
    "problemId": "1937912",
    "problem_idx": "D",
    "shortId": "1837D",
    "contest_number": "1837",
    "problem_submissions": {
        "F": [
            207194085,
            207203613,
            207207682,
            207213171,
            207211865,
            207210824,
            207211176,
            207318425,
            207318356,
            207219269,
            207223400,
            207222112,
            207230081,
            209182293,
            207218386,
            207220953,
            207230258,
            207229992,
            207230774,
            207219053,
            207217652,
            207234599,
            207241428,
            207217300
        ],
        "E": [
            207188119,
            207194518,
            207187724,
            207193975,
            207201887,
            207200866,
            207200402,
            207204477,
            207201158,
            207203473,
            207202659,
            209182421,
            207206918,
            207295603,
            207295577,
            207295208,
            207212525,
            207205450,
            207220600,
            207221757,
            207209332,
            207208536,
            207213556,
            207215245,
            207197679
        ],
        "B": [
            207173438,
            207165428,
            207164196,
            207176139,
            207175678,
            207167732,
            207174974,
            207163573,
            207171463,
            207163877,
            207175371,
            207164199,
            207166728,
            209182537,
            207176961,
            207175758,
            207169369,
            207163934,
            207178400,
            207163937,
            207176249,
            207171837,
            207164338,
            207177413,
            207185470
        ],
        "D": [
            207172764,
            207180689,
            207175489,
            207169386,
            207180603,
            207183437,
            207177453,
            207182367,
            207184812,
            207187481,
            207183382,
            209182475,
            207187168,
            207187553,
            207189679,
            207186480,
            207191942,
            207180382,
            207189882,
            207187720,
            207180792
        ],
        "C": [
            207163791,
            207169258,
            207167268,
            207163200,
            207171135,
            207167990,
            207163968,
            207163247,
            207171084,
            207177546,
            207172770,
            209182511,
            207171094,
            207178509,
            207179374,
            207167154,
            207173221,
            207169406,
            207177662,
            207172590,
            207173505
        ],
        "A": [
            207156762,
            207156505,
            207156456,
            207156409,
            207157257,
            207156929,
            207156537,
            207156398,
            207156432,
            207157333,
            207156686,
            209182570,
            207157924,
            207157341,
            207156863,
            207156455,
            207156545,
            207156506,
            207157325,
            207156712,
            207156556
        ]
    },
    "name": "D. Bracket Coloring",
    "statement": "A regular bracket sequence is a bracket sequence that can be transformed\r\ninto a correct arithmetic expression by inserting characters \"\" and \"\"\r\nbetween the original characters of the sequence. For example: the\r\nbracket sequences \"\" and \"\" are regular (the resulting expressions are:\r\n\"\" and \"\"); the bracket sequences \"\", \"\" and \"\" are not. A bracket\r\nsequence is called if one of the following conditions is satisfied: it\r\nis a regular bracket sequence; if the order of the characters in this\r\nsequence is reversed, it becomes a regular bracket sequence. For\r\nexample, the bracket sequences \"\", \"\", \"\", \"\" are beautiful.You are\r\ngiven a bracket sequence s. You have to color it in such a way that:\r\nevery bracket is colored into one color; for every color, there is at\r\nleast one bracket colored into that color; for every color, if you write\r\ndown the sequence of brackets having that color in the order they\r\nappear, you will get a beautiful bracket sequence. Color the given\r\nbracket sequence s into the number of colors according to these\r\nconstraints, or report that it is impossible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n  int t;\n  cin >> t;\n  for (int i = 0; i < t; i++){\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n    vector<int> S(n + 1, 0);\n    S[0] = 0;\n    for (int j = 0; j < n; j++){\n      if (s[j] == '('){\n        S[j + 1] = S[j] + 1;\n      }\n      if (s[j] == ')'){\n        S[j + 1] = S[j] - 1;\n      }\n    }\n    if (S[n] != 0){\n      cout << -1 << endl;\n    } else {\n      bool pos = false, neg = false;\n      for (int j = 0; j < n; j++){\n        if (S[j] > 0){\n          pos = true;\n        }\n        if (S[j] < 0){\n          neg = true;\n        }\n      }\n      if (!pos || !neg){\n        cout << 1 << endl;\n        for (int j = 0; j < n; j++){\n          cout << 1;\n          if (j < n - 1){\n            cout << ' ';\n          }\n        }\n        cout << endl;\n      } else {\n        vector<int> c(n);\n        for (int j = 0; j < n; j++){\n          if (S[j] + S[j + 1] > 0){\n            c[j] = 1;\n          } else {\n            c[j] = 2;\n          }\n        }\n        cout << 2 << endl;\n        for (int j = 0; j < n; j++){\n          cout << c[j];\n          if (j < n - 1){\n            cout << ' ';\n          }\n        }\n        cout << endl;\n      }\n    }\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Bracket Coloring.json",
    "editorial_link": "https://codeforces.com//blog/entry/116752",
    "editorial": "What properties do beautiful bracket sequences have? Well, each\r\nbeautiful sequence is either an RBS (regular bracket sequence) or a\r\nreversed RBS. For RBS, the (the difference between the number of opening\r\nand closing brackets) is non-negative for every its prefix, and equal to\r\nzero at the end of the string. For a reversed RBS, the balance is\r\nnon-positive for every prefix, and zero at the end of the string. So,\r\nevery beautiful string has balance equal to , and if the string has\r\nnon-zero balance, it is impossible to color it. Letâs consider the case\r\nwhen the balance of is .Suppose we calculated the balance on every\r\nprefix of , and split it into parts by cutting it along the positions\r\nwhere the balance is . For example, the string will be split into , and\r\n. For every part of the string we obtain, the balance in the end is\r\nequal to , and the balance in the middle of the part is never equal to\r\n(since positions with balance equal to were the positions where we split\r\nthe string). So, the balance is either positive in all positions of the\r\npart, or negative in all positions of the part; and every string we\r\nobtain from cutting into parts will be beautiful.A concatenation of two\r\nRBSâes is always an RBS. The same can be said about the strings which\r\nbecome RBS after reversing. So, for every part we obtain after cutting\r\ninto parts, we can determine whether it is an RBS or a reversed RBS,\r\nconcatenate all RBSâes into one big RBS (by coloring them into color ),\r\nand concatenate all reversed RBSâes into one string (by coloring them\r\ninto color ). This construction shows that the maximum number of colors\r\nis and allows to obtain the coloring into two colors; so, all thatâs\r\nleft to solve the problem is to check whether itâs possible to use just\r\none color (it is the case if and only if the given string is beautiful).\r\n",
    "hint": []
}