{"link": "https://codeforces.com//contest/1837/problem/D", "problemId": "1937912", "problem_idx": "D", "shortId": "1837D", "contest_number": "1837", "problem_submissions": {"F": [207194085, 207203613, 207207682, 207213171, 207211865, 207210824, 207211176, 207318425, 207318356, 207219269, 207223400, 207222112, 207230081, 209182293, 207218386, 207220953, 207230258, 207229992, 207230774, 207219053, 207217652, 207234599, 207241428, 207217300], "E": [207188119, 207194518, 207187724, 207193975, 207201887, 207200866, 207200402, 207204477, 207201158, 207203473, 207202659, 209182421, 207206918, 207295603, 207295577, 207295208, 207212525, 207205450, 207220600, 207221757, 207209332, 207208536, 207213556, 207215245, 207197679], "B": [207173438, 207165428, 207164196, 207176139, 207175678, 207167732, 207174974, 207163573, 207171463, 207163877, 207175371, 207164199, 207166728, 209182537, 207176961, 207175758, 207169369, 207163934, 207178400, 207163937, 207176249, 207171837, 207164338, 207177413, 207185470], "D": [207172764, 207180689, 207175489, 207169386, 207180603, 207183437, 207177453, 207182367, 207184812, 207187481, 207183382, 209182475, 207187168, 207187553, 207189679, 207186480, 207191942, 207180382, 207189882, 207187720, 207180792], "C": [207163791, 207169258, 207167268, 207163200, 207171135, 207167990, 207163968, 207163247, 207171084, 207177546, 207172770, 209182511, 207171094, 207178509, 207179374, 207167154, 207173221, 207169406, 207177662, 207172590, 207173505], "A": [207156762, 207156505, 207156456, 207156409, 207157257, 207156929, 207156537, 207156398, 207156432, 207157333, 207156686, 209182570, 207157924, 207157341, 207156863, 207156455, 207156545, 207156506, 207157325, 207156712, 207156556]}, "name": "D. Bracket Coloring", "statement": "A regular bracket sequence is a bracket sequence that can be transformed\r\ninto a correct arithmetic expression by inserting characters \"\" and \"\"\r\nbetween the original characters of the sequence. For example: the\r\nbracket sequences \"\" and \"\" are regular (the resulting expressions are:\r\n\"\" and \"\"); the bracket sequences \"\", \"\" and \"\" are not. A bracket\r\nsequence is called if one of the following conditions is satisfied: it\r\nis a regular bracket sequence; if the order of the characters in this\r\nsequence is reversed, it becomes a regular bracket sequence. For\r\nexample, the bracket sequences \"\", \"\", \"\", \"\" are beautiful.You are\r\ngiven a bracket sequence s. You have to color it in such a way that:\r\nevery bracket is colored into one color; for every color, there is at\r\nleast one bracket colored into that color; for every color, if you write\r\ndown the sequence of brackets having that color in the order they\r\nappear, you will get a beautiful bracket sequence. Color the given\r\nbracket sequence s into the number of colors according to these\r\nconstraints, or report that it is impossible.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n  int t;\n  cin >> t;\n  for (int i = 0; i < t; i++){\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n    vector<int> S(n + 1, 0);\n    S[0] = 0;\n    for (int j = 0; j < n; j++){\n      if (s[j] == '('){\n        S[j + 1] = S[j] + 1;\n      }\n      if (s[j] == ')'){\n        S[j + 1] = S[j] - 1;\n      }\n    }\n    if (S[n] != 0){\n      cout << -1 << endl;\n    } else {\n      bool pos = false, neg = false;\n      for (int j = 0; j < n; j++){\n        if (S[j] > 0){\n          pos = true;\n        }\n        if (S[j] < 0){\n          neg = true;\n        }\n      }\n      if (!pos || !neg){\n        cout << 1 << endl;\n        for (int j = 0; j < n; j++){\n          cout << 1;\n          if (j < n - 1){\n            cout << ' ';\n          }\n        }\n        cout << endl;\n      } else {\n        vector<int> c(n);\n        for (int j = 0; j < n; j++){\n          if (S[j] + S[j + 1] > 0){\n            c[j] = 1;\n          } else {\n            c[j] = 2;\n          }\n        }\n        cout << 2 << endl;\n        for (int j = 0; j < n; j++){\n          cout << c[j];\n          if (j < n - 1){\n            cout << ' ';\n          }\n        }\n        cout << endl;\n      }\n    }\n  }\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy"], "dificulty": "1400", "interactive": false}