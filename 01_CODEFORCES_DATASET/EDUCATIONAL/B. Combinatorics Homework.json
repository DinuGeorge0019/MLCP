{
    "link": "https://codeforces.com//contest/1574/problem/B",
    "problemId": "1115675",
    "problem_idx": "B",
    "shortId": "1574B",
    "contest_number": "1574",
    "problem_submissions": {
        "F": [
            129371777,
            129390921,
            129389731,
            129403988,
            129393793,
            129405865,
            129397624,
            129402611,
            129407592,
            129402025,
            129406898,
            129404634,
            129404840,
            129396171,
            129404379,
            129428143,
            129709936
        ],
        "E": [
            129358674,
            129374904,
            129374765,
            129380449,
            129384709,
            129384504,
            129386221,
            129385268,
            129386371,
            129386001,
            129382985,
            129391466,
            129400354,
            129386981,
            129377485,
            129381385,
            129368975,
            129386322,
            131512763,
            129380209,
            129375216
        ],
        "D": [
            129351289,
            129361598,
            129356978,
            129361351,
            129369248,
            129359850,
            129368999,
            129364465,
            129359499,
            129374264,
            129364919,
            129372422,
            129366912,
            129361472,
            129361829,
            129360363,
            129358818,
            129366595,
            129366262,
            129357077
        ],
        "C": [
            129345085,
            129349632,
            129348099,
            129350669,
            129350365,
            129350502,
            129357353,
            129349080,
            129351966,
            129349226,
            129354359,
            129353753,
            129347195,
            129407614,
            129351570,
            129352219,
            129351381,
            129349196,
            129351680,
            129362666
        ],
        "B": [
            129342942,
            129343801,
            129344237,
            129345556,
            129343553,
            129345572,
            129345752,
            129344787,
            129345774,
            129343483,
            129344471,
            129343826,
            129343420,
            129410456,
            129346117,
            129346262,
            129343905,
            129345607,
            129345689,
            129346070
        ],
        "A": [
            129341973,
            129342397,
            129341943,
            129342408,
            129341991,
            129342232,
            129342087,
            129342285,
            129343124,
            129342143,
            129342078,
            129341990,
            129341904,
            129411806,
            129343011,
            129342282,
            129341912,
            129342040,
            129342183,
            129341989
        ]
    },
    "name": "B. Combinatorics Homework",
    "statement": "You are given four integer values a, b, c and m.Check if there exists a\r\nstring that contains: a letters ”; b letters ”; c letters ”; no other\r\nletters; exactly m pairs of adjacent equal letters (exactly m such\r\npositions i that the i-th letter is equal to the (i+1)-th one).\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 20.09.2021 17:36:57       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int a, b, c, m;\n    cin >> a >> b >> c >> m;\n    int other = a + b + c - max(a, max(b, c));\n    int L = a + b + c - 1 - 2 * other;\n    int R = a - 1 + b - 1 + c - 1;\n    cout << (L <= m && m <= R ? \"YES\" : \"NO\") << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "greedy",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Combinatorics Homework.json",
    "editorial_link": "https://codeforces.com//blog/entry/95188",
    "editorial": "Letâs start with a simple assumption. For some fixed values , the values\r\nof that the answers exist for, make up a range. So thereâs the smallest\r\npossible number of adjacent equal pairs one can construct and the\r\nlargest one everything in-between exists as well.The largest number is\r\nsimple put all Aâs, then all Bâs, then all Câs. So this value is .The\r\nsmallest number is trickier. Letâs instead investigate when itâs equal\r\nto . WLOG, assume . Imagine the following construction. There are\r\nletters C which separate blocks of letters A and B. There are ( if you\r\nconsider the ones to the sides of all letters C, but we want the\r\nsmallest value, so we shouldnât consider them) such blocks, thus itâs\r\npossible that each block contains no more than one letter A and no more\r\nthan one letter B. So letters A and B will never produce adjacent\r\npairs.If there are empty blocks, then there are adjacent letters C. So\r\nthe condition to still have no empty blocks is to have at least letters\r\nA and B in total. If , then any extra letter C can only be put adjacent\r\nto another letter C, thus producing an extra pair (at least one extra\r\npair, but since we are examining the lower bound, we can always do\r\nexactly one). That means that the lower bound is .Now for the proof of\r\nthe fact that every value in-between is also achievable. Since we have a\r\nconstruction for , letâs try modifying it. Letâs reduce the test to the\r\nfollowing way. While , decrease the count of the letter that appears the\r\nmost by and decrease by . Now build the string for with the reduced\r\nvalues. After that put the letters back, placing them next to the last\r\noccurrence of the same letter (there is at least one occurrence of each\r\nletter, the proof is trivial). That increases by and the count of this\r\nletter by . Thus, weâll return to the initial test.Overall complexity:\r\nper testcase.\r\n",
    "hint": []
}