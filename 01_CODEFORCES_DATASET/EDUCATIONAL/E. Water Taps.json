{
    "link": "https://codeforces.com//contest/954/problem/E",
    "problemId": "167342",
    "problem_idx": "E",
    "shortId": "954E",
    "contest_number": "954",
    "problem_submissions": {
        "I": [
            36483613,
            36489921,
            36491468,
            36492587,
            36489151,
            36505182,
            36498444,
            36489158,
            36493599,
            36495253,
            36493983,
            36523197,
            36517457,
            36494315,
            36517490
        ],
        "E": [
            36478770,
            36477321,
            36476296,
            36476332,
            36477191,
            36479277,
            36478407,
            36484072,
            36476637,
            36483722,
            36476830,
            36479359,
            36479273,
            36481624,
            36479515,
            36473956,
            36477339,
            36477449,
            36476422,
            36481260
        ],
        "D": [
            36478485,
            36475307,
            36474083,
            36478258,
            36474970,
            36476455,
            36476263,
            36472023,
            36474824,
            36478016,
            36474200,
            36476982,
            36476891,
            36474372,
            36477175,
            36479984,
            36487971,
            36474275,
            36474076,
            36475466
        ],
        "C": [
            36476002,
            36474037,
            36473020,
            36474296,
            36473832,
            36473968,
            36474218,
            36474540,
            36483525,
            36476724,
            36472809,
            36474171,
            36499291,
            36473004,
            36474442,
            36477242,
            36486700,
            36473123,
            36472782,
            36473808
        ],
        "G": [
            36475037,
            36479869,
            36479819,
            36482297,
            36479701,
            36481399,
            36480184,
            36480325,
            36481161,
            36480550,
            36485383,
            36482231,
            36482668,
            36492299,
            36483624,
            36487406,
            36490213,
            36485274,
            36478330,
            36479287
        ],
        "F": [
            36474930,
            36486416,
            36483404,
            36528491,
            36484207,
            36482822,
            36485630,
            36483061,
            36477477,
            36481839,
            36487500,
            36482960,
            36488051,
            36485000,
            36479677,
            36489393,
            36482816,
            36484976,
            36483377,
            36483862,
            36487177
        ],
        "H": [
            36473564,
            36483628,
            36486927,
            36487388,
            36497291,
            36492759,
            36492641,
            36496336,
            36493059,
            36491960,
            36490810,
            36488245,
            36487713,
            36489798,
            36483087
        ],
        "B": [
            36472231,
            36471541,
            36471094,
            36471718,
            36471325,
            36471918,
            36470816,
            36471290,
            36470543,
            36472680,
            36470969,
            36471052,
            36470688,
            36471049,
            36472812,
            36475352,
            36471581,
            36471121,
            36470814,
            36470886
        ],
        "A": [
            36470941,
            36470615,
            36469920,
            36470743,
            36470038,
            36470789,
            36469978,
            36470246,
            36469943,
            36471510,
            36470178,
            36469918,
            36469982,
            36470334,
            36471516,
            36475017,
            36470944,
            36470503,
            36470133,
            36470029
        ]
    },
    "name": "E. Water Taps",
    "statement": "Consider a system of water taps all pouring water into the same\r\ncontainer. The -th water tap can be set to deliver any amount of water\r\nfrom to ml per second (this amount may be a real number). The water\r\ndelivered by -th tap has temperature .If for every you set -th tap to\r\ndeliver exactly ml of water per second, then the resulting temperature\r\nof water will be (if , then to avoid division by zero we state that the\r\nresulting water temperature is ).You have to set all the water taps in\r\nsuch a way that the resulting temperature is exactly . What is the\r\nmaximum amount of water you may get per second if its temperature has to\r\nbe ?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define pa pair<int,int>\n#define MN 200000\nusing namespace std;\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\ndouble ans=0;\nint n,T,aa[MN+5],tt[MN+5],num1,num2;\npa a[MN+5],b[MN+5];\nlong long big,sml;\nint main()\n{\n\tn=read();T=read();\n\tfor(int i=1;i<=n;++i) aa[i]=read();\n\tfor(int i=1;i<=n;++i) \n\t{\n\t\ttt[i]=read();\n\t\tif(tt[i]==T) ans+=aa[i];\n\t\telse if(tt[i]>T) a[++num1]=make_pair(tt[i],aa[i]),big+=1LL*aa[i]*(tt[i]-T);\n\t\telse if(tt[i]<T) b[++num2]=make_pair(tt[i],aa[i]),sml+=1LL*aa[i]*(T-tt[i]);\n\t}\n\tsort(a+1,a+num1+1);\n\tsort(b+1,b+num2+1,greater<pa>());\n\tif(big>sml)\n\t{\n\t\tfor(int i=1;i<=n;++i) \n\t\t\tswap(a[i],b[i]),\n\t\t\ta[i].first=T*2-a[i].first,\n\t\t\tb[i].first=T*2-b[i].first;\n\t\tswap(big,sml);swap(num1,num2);\n\t}\n\tlong long now=0;\n\tfor(int i=1;i<=num1;++i) ans+=a[i].second;\n\tfor(int i=1;i<=num2;++i)\n\t{\n\t\tnow+=1LL*b[i].second*(T-b[i].first);\n\t\tif(now<big) ans+=b[i].second;\n\t\telse \n\t\t{\n\t\t\tnow-=1LL*b[i].second*(T-b[i].first);\n\t\t\tdouble l=0,r=b[i].second,mid,res=0;\n\t\t\tfor(int tms=1;tms<=60;++tms)\n\t\t\t{\n\t\t\t\tmid=(l+r)/2.0;\n\t\t\t\tif(now+mid*(T-b[i].first)<=big) res=mid,l=mid;\n\t\t\t\telse r=mid;\n\t\t\t}\n\t\t\treturn 0*printf(\"%.10lf\",ans+res); \n\t\t}\n\t}\n\tprintf(\"%.10lf\",ans);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "sortings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Water Taps.json",
    "editorial_link": "https://codeforces.com//blog/entry/58519",
    "editorial": "The following greedy strategy work. Letâs turn all the taps at full\r\npower. If total temperature is greater than then we would like to\r\ndecrease power on some taps with higher temperature. We want to decrease\r\nas low power as possible, so we should prioritize taps with the highest\r\ntemperature. Sort all taps by temperature and find the total power on\r\nsuffix you should decrease to have equal temperatures. This can be done\r\nwith binary search. The same works for smaller initial\r\ntemperature.Overall complexity: .\r\n",
    "hint": []
}