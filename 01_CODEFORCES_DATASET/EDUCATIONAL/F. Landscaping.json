{
    "link": "https://codeforces.com//contest/1901/problem/F",
    "problemId": "2344508",
    "problem_idx": "F",
    "shortId": "1901F",
    "contest_number": "1901",
    "problem_submissions": {
        "F": [
            234139795,
            234112748,
            234103658,
            234097027,
            234112666,
            234118024,
            234116885
        ],
        "E": [
            234065459,
            234076546,
            234069856,
            234070615,
            234085957,
            234066021,
            234066735,
            234068222,
            234123566,
            234071419,
            234068506,
            234075027,
            234066253,
            234072391,
            234076668,
            234075249,
            234077116,
            234073015,
            234079787,
            234077325,
            234078963,
            234077428
        ],
        "D": [
            234059266,
            234066962,
            234077135,
            234065574,
            234073531,
            234059592,
            234057927,
            234058609,
            234060703,
            234062187,
            234061187,
            234057982,
            234062995,
            234064642,
            234065220,
            234066157,
            234063304,
            234070380,
            234062967,
            234064478
        ],
        "C": [
            234055454,
            234062464,
            234053576,
            234057800,
            234066571,
            234053506,
            234054362,
            234053969,
            234055911,
            234057899,
            234055445,
            234055518,
            234057642,
            234057153,
            234058416,
            234054122,
            234056909,
            234059219,
            234056184,
            234057280
        ],
        "B": [
            234050431,
            234057124,
            234050481,
            234052402,
            234062066,
            234050328,
            234050035,
            234050267,
            234051686,
            234052344,
            234050483,
            234049639,
            234051580,
            234051832,
            234054088,
            234049961,
            234051995,
            234050409,
            234050570,
            234048852
        ],
        "A": [
            234048501,
            234049709,
            234048700,
            234048910,
            234056617,
            234048535,
            234048461,
            234048607,
            234048554,
            234050197,
            234048543,
            234048558,
            234048500,
            234049049,
            234049927,
            234048455,
            234048762,
            234048578,
            234048742,
            234048388
        ]
    },
    "name": "F. Landscaping",
    "statement": "You are appointed to a very important task: you are in charge of\r\nflattening one specific road.The road can be represented as a polygonal\r\nline starting at (0, 0), ending at (n - 1, 0) and consisting of n\r\nvertices (including starting and ending points). The coordinates of the\r\ni-th vertex of the polyline are (i, a_i).\"Flattening\" road is equivalent\r\nto choosing some line segment from (0, y_0) to (n - 1, y_1) such that\r\nall points of the polyline are below the chosen segment (or on the same\r\nheight). Values y_0 and y_1 .You can imagine that the road has some dips\r\nand pits, and you start pouring pavement onto it until you make the road\r\nflat. Points 0 and n - 1 have infinitely high walls, so pavement doesn\u2019t\r\nfall out of segment [0, n - 1]. The of flattening the road is equal to\r\nthe area between the chosen segment and the polyline. You want to\r\nminimize the cost, that\u2019s why the flattened road is not necessary\r\nhorizontal.But there is a problem: your data may be too old, so you sent\r\na person to measure new heights. The person goes from 0 to n - 1 and\r\nsends you new heights b_i of each vertex i of the polyline.Since\r\nmeasuring new heights may take a while, and you don\u2019t know when you\u2019ll\r\nbe asked, calculate the minimum cost (and corresponding y_0 and y_1) to\r\nflatten the road after each new height b_i you get.\r\n",
    "solutions": [
        "/**\n                                                                                   .@@\n                                                                                  .@@@@\n                                                     :--:::::::-----==:           %%@@@%\n                                             :*++*+==--========----------:-==:    @%@@@@.\n                                        .:. ..-=+=+*+==---=----------------------:*@%@@@@         .:..\n                                    .::::-----==+++====+***#+----=------:--------:-=%%@@@#+%@@@@@@@@@@@@@@@@@@@@@@@\n                :+%@@@@@@@@@@@@@@%::::=*=+++++=++==*%*=-:=*#+##=-----------------:::-@%@@@@@@@@@@@@@@@@@@@@@@@@@@@*\n             %%%%%%%%%%%%@@@@@@= .:=%@@@@@%#+=+++%@@@%+-==--++-=*=-------------:-----:*@@@@@@@@@@@@@@@@@@@@@@@@@@%\n             .@%%%%%%%%%@@@@%-  .-+%@@@%@%%%####%#*#%%%%==----+=:-++-::------=----:::-:=@@@@@@@@@@@@@@@@@@@@@@@@%\n               %%%%%%%%@%@@+  .::*%@@@@%#**#####******+*%+===---+=..:==---------:---::::-@@@@@@@@@@@@@@@@@@@@@@@\n                %%%@%@%@@@:  .:.%%%%%#=+*+*+*#*+=+***+*#+##=--=-:-+.   ==--------::::--::-@@@@@@@@@@@@@@@@@@@@@\n                .#%%%@%@%   . -@%%%*==+*++++**+++=+*++=++=+#--=----=:    +---:-::::::::--:-%@@@@@@@@@@@@@@@@@@=\n                 :@%%%@=   . =%%%#---======+=========++=====*+--=-=--=.    --::::::::::::--=@@@@@@@@@@@@@@@@@@@:\n                  @%@#   .  -%%*+---========-:===++======-==-==--=-----:     :-::::::::::::-=@@@@@@@@@@@@@@@@@@@=\n                  @#.   .  .#*=+.-=-==-==-=-::===+=-==-=--=--==+=:------=     .-:::::::-:--:--#@@@@@@@@@@@@@@@@@@#\n                 -         #+=-.:----=------.:-=-*===----==--==-+=-:::-::-:     :-::::::::::::==+@@@@@@@@@@@@@@@@@@\n                     .    -==:..-=--==--:--:.-===+====----=====--=--::::::--      ::::::::::--:=%*=*@@@@@@@@@@@@@@@@.\n                .+: .    .==-. :----==-::--:.---==-===---:------:----::::::-+       -:::------=--+#+#@@@@@@@@@@@@@@@@.\n              .  . -    ::--. .::---:-:.-=-: :--==--==:=--:-::::::--=-:::-:::*.      :::-==-==--:--**@@@@@@@%@@@@@@@@@=\n                :.:     :::.. .--:::::: --::.:-:---:--:--:::::::::--:==:::::::+.       -:-=-=------:*+@@@@@@@@+ #@@@@@@\n               #-.     -::.. .=+:::::-:.--:-:.::::::::::+:::::::::::::=-:::::::=.       :=-=---------=%@@@@@@@@@  :@@@@\n             =@-.     :=..   -=::::-:=.:::::-.::::::::::%.::::::::::::-=:::::::-+-        *%+=-------::%@@@@@@@@@:   :.\n            #@*.      +-..  :-:::::::-..::::::.:::::::::%:-==:..::::::--+:::-:-====        :*%*+--------@@@@@@@@@@@\n          .@@#       :=:   .::::::::-:.::::::-.::::::.::#.:-=-.:..::-.::-+:-=--===-=         -#++*+===-:#@@@@@@@@@@@@\n         *@@*.    .  --.  .:::::::::-..::::.:::.::..:..-+:: :.......=-.::==--==-====-         .**++++++=*@@@@@@@@@@@@@@:\n       =@@@==.   .: .=-.  ::::::.:::= .::::...::.-.....+::.  - :....:*::--==--=======-          -*++=+=++@@@@@@@@@@@@@@@@@@%-\n     +@@@@::- . .:- :=-. .::::::.::=- .::......=.=.....+ :.  :  ... - -:-==+---==-=--*: .        .*++++=+%@@@@@@@@@@@@@@@\n   :@@@@%.=.. : :--.-=:..:.::.:....-  ......... --:   ::.:.  .  :::.-  ----=#+====-==-*.           :*++=++@@@@@@@@@@@@@.\n     +*#-- :.:: :-::==..::.:..:...:: .:....... . ::   :. :.      -::. ..:#=-=+-==-===-=+.+       ..  -+=++%#=-+=%@@@@#\n        . ...::.--::==: ::........-:..=-   :  .   .   . .:.      :-*-    .:=-+====-==--=-+#       :.   +++++==+++++*@@*\n          :.::.::-.-==-.=-:...--.: :.::-.  :            .:    :+--:.     ::.==+===---=-=+--%.      +@@=. :=*+++++++*++*\n          .::::::::==---=-:.. =- .  ..: :..:  .:...  :  -. .+.   -*=:.+@@@@@@@@*====---=+*:**. .    =@@**%+:-+*%*++***+=\n       . ...::::::-+=--+-=:--.+:.    ..  :.-.:::::. .:  :.*.  :-:+#@@%#++=%:-@##+===-==-=+--==+ ..   .###*+++**#@%#+*+++*=\n       ..::::::::.*+--:=-----:=:-....::=:--=:....:..=. :.    ..+@@@*+==---#-=@*+*====-===+:-=*@% ::    *#*+*#+*++#%%%%##*+++-\n       .::.:::::::%=--:-------: .     : -:-+#+-....= ..:     -*#::%+-:=+---:+**-+==-===-=-+-=@@@@ -#    =***#%#+*+#%==*+\n      :.:::::::::-+=:---=-----. .      :. ::=..:..:   .       :   -=--:..:--+#-:-+=======-%==#@@@@:.@=   :#***%%#*+=#-==\n      :-::-::::.:--*:---=-=---: . ..-+*#%#=-+:...:.                :+-....-+=::::#=======-*%-+@@@%@@-%%-  .#++*%%#*+#*+-\n    . =-:::=:::::-:+.:--=-=--:- .=**+-:::+++%-..:.   .               ::..--:....:=#-=====-#@+=@@@%*%@%%@%-  -*+#%:*%++*=\n      =:::---:------::-:==-=--+.      ....:  :.:.                     .   ......::*=-====-*@#-%@@%#*%%%%%%@*. +**- .*#**=\n     +:::. :---=--=:=:-:==-==-:@.    .....:. ..:.                       ...::...--:*=====-+@@-*@%%*##%%*###+#*= +-  ::-:**\n     ::-:   .:---.#:=.:-==-==-:%%    ....  ..:  :                              :=  ==-+==-*@@=*@%#**#%#****##*++**- .:     .\n    .--      .:--:=:=-.-==-==-:%@+   ....   .:                                ::   :=--===#@@**%%**#*##***++**+=+*- ::\n   :.         :----=.- -=-====-%@@:   ...   .      .                         .     :---==-@@@#%%%#*#*******+++***+# :\n .             -:--: .:-+--==-:%@@@                                              . #%:-===@@@#%##*##**+++#*+*+*+****-\n                ::-:  *:%==----*+%@%   .                                        . #@%--+=*@%@%%##**#**+++%#*==+*++*+=\n                -=:-. #:+#+---:#%++%#.                      . .:. .:+          ..#@@@--**%%%%%###*+#++*++*--+*==+++-+.\n                . =:: -==%@--=-=%**%%+                 =@+ .....:.:.:.         .*:@@%--%%@%%%####**#++*+++--:   .+*-==\n                   :---+**%%---:@**%%#+     .      :@%%%::.:::::..:.:         .-::%%%-:@%%%%%###**#*+++=*+-::    :==:-=\n               .    :=-+*##*#:-:**+*%**@:           =@#*:.::::::::::        .:...:@%%-+%%%%%###**+%*==+=%=:-.    ..    :.\n               .     +*=+**%**-:=***##*+%%.        . .*%.:::::::::..       :. ....@%%=%%%#*#####+#%+===+:-:-.    .\n                     .+-++**#+** +*-*++++%%%.    ..     --:.::.:::       =: .    .%%#+%%####*+@*++%+=-+. .:-\n                      --++=**#*+*-++==+++%%%#@+..         .:::.        :=.  .    .%%%#*#*##*#+#=++#===:  .-\n               .    . =-=+****+**+#:+==++#%%#%%%@%=. ..              :-:       .  %#%###%*##.:*+==#++-    :\n                    .  :-=+=++***++#-:+++*++*#%%%%@@%=.. ..       :---.           #@@%@@@@=  :=  .+-+-\n                .    . :.-===++**+==*+::+#++++*#%%%%%%%%-.     .*=:-:.            *%%%##*==+**#*+==*+=\n                     :  -::====++*=+=+*==*=-=#**##%#%%%%%*+-:%#--:-. ..           .%#*=-==-*#*++==++-=#*:\n                     :*::**=====+**==+=++*##*+++**##%%%%%%. :::.:. ..             .:=--===+@#*+++=+*+=-=+=*#=\n                     #-=+==*=-++++#++==-++++*++++*#%%%%%%=-  .:.... .            .  -=--=+@#*#%@@%+==+=====+*+\n                   ..*++==+**+:=*++%++++#++++++*+**#%%%%#-=. .:........              .@-=+++#%%@@%@=======++*@+\n                .+-.-+*==*++#+-:=++*%+=**++++++*++**%%%%--=-.::..........            .: ==++*%@@%@+========+*#@@+\n               -:--.=-*+*+++++=:.:-+*#+++*****=+*##%+#%==---::...........           :    .+%@@@%@#+======++*#%%@@#%=\n              +::-:==--=*==**=#=:::-+#**+*+**++**%=.-++-:::--... ..  ....          :.     ..-@@@*++====++++*#%@@@%*=+.\n              =---.=--:*+=+#*+=:-:--=++=**+++++*#+:=-.--:.:::..........           +        ..*%-+=-====+++*###@@@#+=+#*\n              =----==-*+===@%:..-=---++##=+++***#-. .:=::...:..........         :=          :*:==-=====+++*%#%@@*++++##@*\n             .+=-=*=+#*---==%:.:-=%+#+-:--+++*+*%:..  -::.............         :.          .--==-=======+*#*%@%+++==+##@#%+\n             -:=##*+=-::-===+:.--+*#---::+*++++#+ ....-  .:.........  ..   . :+. .         =============+**#*++++===*%%#%###.\n             :--*#@*+-::::-==-:-=#=.---:-+*==+#-......-:  ..........        :.            +============+*##**++====*%%%#**+=+\n            .:---%=@*+-::--:-:.-*=:=:--=#++*@%-... . .-:.... ......       .:.           .=-===========+**+++===-===*#***+++=-:\n            ..:-==+*#+*=:-::--.=+=::-=+*+%@+#@%.... ..-:.  .........     .-            .+============++========--===++**++==--\n             .:----++%**-::  .+=+=++++++*%#+@@@%......-:.  .            =. .          .+-===-===-==++==--===------==+++====--:\n              ..:--=*#%*+=   .=%##-:-+++*##+@@@@@.... -:.  .         ..-             -+==-======++*=======------==++======+*#*\n               .::=-=#+#-  .::=#-:-:=++=+##*@@@@@@.. .::.  .         -:      .     .=+==-==+-==++=:=---=----========+**+=----:=\n                .::--=+#=.:::-*=:::::++=+*#*%.#@@@@:..::.   .   .  .+           .=#*++++*+=====--=-=---=--=+**##*+=====-------:-\n                 ..::-=*+::::=:.::::--===**+*. -@@@@:.::  ...  .  -.. .  .  .-%@@@*+*#*#*+====--=-:----*##*+==--==---======----:\n                   ..:-:+:-:--:::--:::-+#*+++:   @@@@+:-  ..  .  +. ..   -@@@@@@@*@%*###*======*+-=-=%#=-=======-====-=======-:-+\n                     ..:=::::::::::-:**++=-++.   .@@@@#= . .   :+    :#@@@@@@@@@%##%%%%#+++==#@%%@=**+==========-------=====-=+==\n                       .  .:::::::--+==----+#++.  .@@@@@ .. ..:::+#%@%@@@@@@@#@%%%%%%@%*=+#@@@%@#%@=============------=====++++=+\n                          ....  ..::=-:----+*=+**=++@@@@@:.-*@@%%%%%@@@@*:. .@@%%@%%@%**%@@@@@##@@*========--------=====+++*#*+==\n                           .    ...::=:--==++=+++=+++%@@@@@@@%%@%@@#-      :%#%%%%@%#@@@@@@@%#@*@@+--===-----------======*##**=--\n                                ...:.--:--=*+===++=++=#@@@@@%%%#*++=.     :%%%@@%%@@@@@@@@+@@#+*@@+===-----------====+++*##**+=-:\n                                ....:+=:-==#++===+++===%@@%#*+==+++++++*##@@@%@@@@@@@@@**%##+=-%@#=-------------====+++*##*++=-:.\n                                 ..:-+#===+#  .-:=+=*+*+#*+==+++++++++**%@@@@@@@@@@@*-@@#+=+==+@@=--------------===+++*##*+=-:.\n                                  ..:=%+==+%       =#*-##*#+=%+++=++*+#%@@@@@@@@@@:%@#*=+=-+=#@@+-=-------------====+*#*++=-:.\n                                     .=*===*      .--#:..-#@@-.   .:=**@@@@@@@@*@@@%+%+@@=--#@%=--:----------------=+++==-:.\n                                       =::--         :*-##==-.        -@@@@@@@@@@@@@@@@@@@@@%+=::::::::::::::::::--====-:..\n                                           ...        *%=-.....       %@@@@@@@@@@@@@@@@@@@@@*-::..:.............:::--:..      .-:\n                                                  ::  ==.   .....    +@%@@@@@@@@@@@@@@@@@@@@*.:. . ...          .... .     =@*-:\n                                                      ::..:---::... :#*#@@@@@@@@@%%@@@@@@@@@@+ .                  :*    ##+%+:\n                                                             ...::::*-:::@@@@@@%##%%%%@@@@@@@#                   -+. *+ =  -:\n                                                                   ..  .#@@%%%%##*+*#%@@@%%%=                    . :     ::\n                                                                        @@@%%%######%%%%#####%=                =        #\n                                                                          @@@@@%@@%%%###*##*-                 . .     =\n                                                                          :@@%%%%###******+=-                 .\n                                                                            *@###***+**+++:\n                                                                               -*- =*++*:\n\n\n                                         Credit for the pic: J5-daigada from deviantart\n*/\n#include <cassert>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <cctype>\n\n#include <algorithm>\n#include <random>\n#include <bitset>\n#include <queue>\n#include <functional>\n#include <set>\n#include <map>\n#include <vector>\n#include <chrono>\n#include <iostream>\n#include <iomanip>\n#include <limits>\n#include <numeric>\n#include <unordered_map>\n#include <unordered_set>\n\nusing namespace std;\n\n#define int long long\n\nstruct Vector {\n    int x;\n    int y;\n\n    Vector(int x = 0, int y = 0): x(x), y(y) {}\n};\n\nVector operator-(const Vector& a, const Vector& b) {\n    return Vector(a.x - b.x, a.y - b.y);\n}\n\nint cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nconst int N = 2e5 + 100;\nconst double EPS = 1e-6;\nint a[N], b[N];\nVector pa[N], pb[N];\n\nint ltan[2][N], rtan[2][N];\n\ndouble out[N];\n\ndouble mid;\n\nvoid upd(double& ans, Vector a, Vector b) {\n    if (a.x <= mid + EPS && b.x >= mid - EPS) {\n        ans = max(ans, (a.y * (b.x - mid) + b.y * (mid - a.x)) / (b.x - a.x));\n    }\n}\n\nint st[N];\n\nvoid solve(int l, int r, double ans) {\n    if (r - l == 1) {\n        upd(ans, pb[ltan[1][l]], pb[l]);\n        upd(ans, pb[l], pa[rtan[1][l]]);\n        out[l] = ans;\n        return;\n    }\n    int m = (l + r) / 2;\n    int sz = 0;\n    for (int i = m; i < r; ++i) {\n        while (sz >= 2 && cross(pa[st[sz - 1]] - pa[st[sz - 2]], pa[i] - pa[st[sz - 1]]) >= 0) {\n            --sz;\n        }\n        st[sz++] = i;\n    }\n    double ansl = ans;\n    for (int i = m; i < r; ++i) {\n        upd(ansl, pb[ltan[0][i]], pa[i]);\n        upd(ansl, pa[i], pa[rtan[0][i]]);\n    }\n    double ansr = ans;\n    for (int i = l; i < m; ++i) {\n        upd(ansr, pb[ltan[1][i]], pb[i]);\n        upd(ansr, pb[i], pa[rtan[1][i]]);\n    }\n    for (int i = 1; i < sz; ++i) {\n        upd(ansl, pa[st[i - 1]], pa[st[i]]);\n    }\n    int start_k = 0;\n    while ((1 << start_k) < sz) ++start_k;\n    for (int i = l; i < m; ++i) {\n        if (i > mid + EPS) continue;\n        int id = 0;\n        for (int k = start_k; k >= 0; --k) {\n            int id1 = id + (1 << k);\n            int id2 = id - (1 << k);\n            while (id1 >= sz) id1 -= sz;\n            while (id2 < 0) id2 += sz;\n            if (cross(pa[st[id1]] - pa[i], pa[st[id]] - pa[i]) < 0) {\n                id = id1;\n            }\n            if (cross(pa[st[id2]] - pa[i], pa[st[id]] - pa[i]) < 0) {\n                id = id2;\n            }\n        }\n        if (cross(pa[st[id]] - pa[i], pa[rtan[0][i]] - pa[i]) < 0) {\n            rtan[0][i] = st[id];\n        }\n    }\n    for (int i = l; i < m; ++i) {\n        if (i > mid + EPS) continue;\n        int id = 0;\n        for (int k = start_k; k >= 0; --k) {\n            int id1 = id + (1 << k);\n            int id2 = id - (1 << k);\n            while (id1 >= sz) id1 -= sz;\n            while (id2 < 0) id2 += sz;\n            if (cross(pa[st[id1]] - pb[i], pa[st[id]] - pb[i]) < 0) {\n                id = id1;\n            }\n            if (cross(pa[st[id2]] - pb[i], pa[st[id]] - pb[i]) < 0) {\n                id = id2;\n            }\n        }\n        if (cross(pa[st[id]] - pb[i], pa[rtan[1][i]] - pb[i]) < 0) {\n            rtan[1][i] = st[id];\n        }\n    }\n\n    sz = 0;\n    for (int i = l; i < m; ++i) {\n        while (sz >= 2 && cross(pb[st[sz - 1]] - pb[st[sz - 2]], pb[i] - pb[st[sz - 1]]) >= 0) {\n            --sz;\n        }\n        st[sz++] = i;\n    }\n    for (int i = 1; i < sz; ++i) {\n        upd(ansr, pb[st[i - 1]], pb[st[i]]);\n    }\n    start_k = 0;\n    while ((1 << start_k) < sz) ++start_k;\n    for (int i = m; i < r; ++i) {\n        if (i < mid - EPS) continue;\n        int id = 0;\n        for (int k = start_k; k >= 0; --k) {\n            int id1 = id + (1 << k);\n            int id2 = id - (1 << k);\n            while (id1 >= sz) id1 -= sz;\n            while (id2 < 0) id2 += sz;\n            if (cross(pb[st[id1]] - pa[i], pb[st[id]] - pa[i]) > 0) {\n                id = id1;\n            }\n            if (cross(pb[st[id2]] - pa[i], pb[st[id]] - pa[i]) > 0) {\n                id = id2;\n            }\n        }\n        if (cross(pb[st[id]] - pa[i], pb[ltan[0][i]] - pa[i]) > 0) {\n            ltan[0][i] = st[id];\n        }\n    }\n    for (int i = m; i < r; ++i) {\n        if (i < mid - EPS) continue;\n        int id = 0;\n        for (int k = start_k; k >= 0; --k) {\n            int id1 = id + (1 << k);\n            int id2 = id - (1 << k);\n            while (id1 >= sz) id1 -= sz;\n            while (id2 < 0) id2 += sz;\n            if (cross(pb[st[id1]] - pb[i], pb[st[id]] - pb[i]) > 0) {\n                id = id1;\n            }\n            if (cross(pb[st[id2]] - pb[i], pb[st[id]] - pb[i]) > 0) {\n                id = id2;\n            }\n        }\n        if (cross(pb[st[id]] - pb[i], pb[ltan[1][i]] - pb[i]) > 0) {\n            ltan[1][i] = st[id];\n        }\n    }\n\n    solve(l, m, ansl);\n    solve(m, r, ansr);\n}\n\nvoid solve() {\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n        pa[i] = {i, a[i]};\n    }\n    for (int i = 0; i < n; ++i) {\n        cin >> b[i];\n        pb[i] = {i, b[i]};\n    }\n    for (int i = 0; i < n; ++i) {\n        ltan[0][i] = ltan[1][i] = 0;\n        rtan[0][i] = rtan[1][i] = n - 1;\n    }\n    mid = (double)(n - 1) / 2;\n    solve(0, n, 0);\n    for (int i = 0; i < n; ++i) {\n        cout << out[i] * 2 << \" \";\n    }\n}\n\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout << fixed << setprecision(20);\n    int uwu = 1;\n    /// cin >> uwu;\n    while (uwu--) {\n        solve();\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "geometry",
        "two pointers"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Landscaping.json",
    "editorial_link": "https://codeforces.com//blog/entry/122645",
    "editorial": "Let\u00e2\u0080\u0099s say that we are searching for the best line that contains the best\r\nsegment.Observation : the best line touches at least one vertex of the\r\npolyline. Otherwise, you can push it down until it touches\r\npolyline.Observation : the best line touches two vertices of the\r\npolyline. Suppose it touches only one vertex then it\u00e2\u0080\u0099s not hard to prove\r\nthat rotating the line around point either clockwise or counterclockwise\r\nwill decrease the area under the line.Observation : if both points are\r\non the left half () then rotating the line clockwise around point will\r\ndecrease the area. Analogically, if both points are on the right half ()\r\nthen rotating the line counterclockwise around will decrease the\r\narea.Observation : since all points of the polyline should be under the\r\nline, then the vertices the line touches are the consecutive vertices on\r\nthe convex hull of the polyline.In total, we understand that the pair of\r\npoints we need a segment of the convex hull that crosses a vertical line\r\n.Knowing that, what can we do? Let\u00e2\u0080\u0099s split all vertices in two halves:\r\n\"left half\" with all vertices to the left of and \"right half\" with all\r\nvertices to the right. Note that while we process the first half of\r\n\"queries\" the right half (vertices in ) remains the same. If we know how\r\nto process the first half of queries, then processing the second half is\r\npractically the same thing but in the reverse order.So, how to find that\r\nbest segment of the convex hull that crosses efficiently while we work\r\nwith the left half of vertices? Note that if we look at all segments\r\nthat connect vertex from the left part with vertex from the right part:\r\neach segment will certainly cross in some real point ; the segment of\r\nthe convex hull will have maximum possible (otherwise, it\u00e2\u0080\u0099s not a convex\r\nhull segment). There are around segment that crosses but we don\u00e2\u0080\u0099t need\r\nall of them. Let\u00e2\u0080\u0099s calculate for each vertex () (both the old and new\r\nvalues) the segment that crosses and has maximum possible.Note that this\r\n\"maximum possible\" segment connects with some vertex that on the convex\r\nhull that was built on the right half (otherwise, we will find convex\r\nhull point with higher slope and its will be bigger).In other words, for\r\neach point from the left, we are searching a to the convex hull on the\r\nright. And we can do it efficiently with binary search while checking\r\nsome cross products. Let\u00e2\u0080\u0099s name that tangent line as where is a point\r\nfrom the left half.One more observation: . You can prove it by looking\r\nat the area of trapezoid that formed by segment . So, let\u00e2\u0080\u0099s define a\r\nfunction that takes line and returns (or the answer to the task).We have\r\nall we need to calculate the answer: the answer to the -th query is\r\nequal to the maximum among for all and for all .In total, the solution\r\nis next: build convex hull on vertices ; calculate with binary search\r\nfor all ; calculate for all and store suffix maximums among these\r\nvalues; calculate with binary search for all ; calculate for all and\r\nstore prefix maximums among these values; calculate the -th answer as\r\nmaximum between the -th prefix maximum and the -th suffix maximum. In\r\norder to solve the task for the right half just reverse arrays and and\r\nswap them, and do the same algorithm above. It\u00e2\u0080\u0099s true, because replacing\r\nfirst values with in array is equivalent to replacing last values with\r\nin array .Complexity of the solution is because of binary searches. Note\r\nthat we can do everything in integers, except calculating the values of\r\nfunction and taking maximum among .\r\n"
}