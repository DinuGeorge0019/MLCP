{
    "link": "https://codeforces.com//contest/2111/problem/D",
    "problemId": "3419289",
    "problem_idx": "D",
    "shortId": "2111D",
    "contest_number": "2111",
    "problem_submissions": {
        "G": [
            322719568,
            322738251,
            322737232,
            322734882,
            322733848,
            322739705,
            322765348,
            322764688,
            322752005,
            322753587,
            322751319,
            322720568,
            322729631,
            322757116,
            322785461,
            322890645,
            323020347,
            322778439,
            322778419,
            322778201,
            322778119,
            322778020,
            322777882,
            322777223,
            322776997,
            322776001,
            322775936
        ],
        "E": [
            322697990,
            322695191,
            322705487,
            322705821,
            322705980,
            322713283,
            322724677,
            322738049,
            322690431,
            322700985,
            322700076,
            322704262,
            322702259,
            322707219,
            322704094,
            322705822,
            322703551
        ],
        "F": [
            322691387,
            322716243,
            322719103,
            322728613,
            322729993,
            322731051,
            322740913,
            322686943,
            322710192,
            322719720,
            322713672,
            322713636,
            322726013,
            322721562,
            322720556,
            322728230,
            322730210
        ],
        "D": [
            322678511,
            322686771,
            322684334,
            322692059,
            322689019,
            322692746,
            322686820,
            322741814,
            322683201,
            322689247,
            322687368,
            322686598,
            322691632,
            322687656,
            322691451,
            322694053,
            322684204
        ],
        "C": [
            322676707,
            322681404,
            322679043,
            322681662,
            322681314,
            322683752,
            322680197,
            322743070,
            322679811,
            322681807,
            322679034,
            322681517,
            322680587,
            322678741,
            322686213,
            322679235,
            322680369
        ],
        "B": [
            322676127,
            322679449,
            322677961,
            322679172,
            322678800,
            322680312,
            322678349,
            322745453,
            322678542,
            322679221,
            322677917,
            322679124,
            322677847,
            322677424,
            322681157,
            322677471,
            322677308
        ],
        "A": [
            322675651,
            322676474,
            322676120,
            322676736,
            322675861,
            322677535,
            322676082,
            322747128,
            322675974,
            322676468,
            322676128,
            322676492,
            322675977,
            322675843,
            322676405,
            322675792,
            322675708
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143528",
    "editorial": "Let be the floor where the -th group has its -th class. Then, the number\r\nof moves between floors can be expressed as follows:Using the fact that\r\n, we can rewrite it as follows:Or as follows:Let’s analyze how big can\r\nwe make the first part of this expression, and how small can we make the\r\nsecond part of this expression. Every auditorium can be used at most\r\ntwice during two consecutive classes, so if the number of groups is\r\neven, then cannot be greater than the sum of maximum floors, multiplied\r\nby . If is odd, then we also add the -th maximum floor.Similarly, if is\r\neven, then cannot be less than the sum of minimum floors, multiplied by\r\n. If is odd, then we also add the -th minimum floor.This is a bound on\r\nthe number of movements; if we achieve it, our answer will be optimal.\r\nAchieving it is actually not that difficult.Suppose the list of\r\nauditoriums is sorted (sorting it also sorts the list of floors where\r\nthe auditoriums are located). If is even, we can split all groups into\r\ntwo parts of sizes . The first half will have their first classes in the\r\nlowest auditoriums, then go to the highest auditoriums, then return to\r\nlowest auditoriums, and so on. The second half will do the opposite:\r\nstart in the highest auditoriums, then go to the lowest auditoriums,\r\nthen return, and so on.If is odd, then the \"extra\" group can use the -th\r\nlowest auditorium for odd-indexed classes and -th highest auditorium for\r\neven-indexed classes.This solution achieves the bound which we proved\r\nearlier, so it is optimal.\r\n",
    "name": "D. Creating a Schedule",
    "statement": "A new semester is about to begin, and it is necessary to create a\r\nschedule for the first day. There are a total of n groups and m\r\nclassrooms in the faculty. It is also known that each group has exactly\r\n6 classes on the first day, and the k-th class of each group takes place\r\nat the same time. Each class must be held in a classroom, and at the\r\nsame time, there cannot be classes for more than one group in the same\r\nclassroom.Each classroom has its own index (at least three digits), and\r\nall digits of this index, except for the last two, indicate the floor on\r\nwhich the classroom is located. For example, classroom 479 is located on\r\nthe 4-th floor, while classroom 31415 is on the 314-th floor. Between\r\nfloors, one can move by stairs; for any floor x > 1, one can either go\r\ndown to floor x - 1 or go up to floor x + 1; from the first floor, one\r\ncan only go up to the second; from the floor 10^7 (which is the last\r\none), it is possible to go only to the floor 9999999.The faculty’s\r\ndean’s office has decided to create the schedule in such a way that\r\nstudents move as much as possible between floors, meaning that . When\r\nthe students move from one floor to another floor, they take the\r\nshortest path.For example, if there are n = 2 groups and m = 4\r\nclassrooms [479, 290, 478, 293], the schedule can be arranged as\r\nfollows: 129029324784793293290447947852932906479478 In such a schedule,\r\nthe groups will move between the 2nd and 4th floors each time, resulting\r\nin a total of 20 movements between floors.Help the dean’s office create\r\nany suitable schedule!\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Creating a Schedule.json",
    "hint": []
}