{
    "link": "https://codeforces.com//contest/1849/problem/A",
    "problemId": "2121798",
    "problem_idx": "A",
    "shortId": "1849A",
    "contest_number": "1849",
    "problem_submissions": {
        "F": [
            215983324,
            215952856,
            215937825,
            216386632,
            215955686,
            215953676,
            215963177,
            215957010,
            215951070,
            215964780,
            216982954,
            215957194,
            215972632,
            215944919,
            215944313,
            215955103,
            215959952,
            215969003,
            215980309,
            215974158,
            215944399,
            215979671,
            215977278
        ],
        "E": [
            215924453,
            215947662,
            216386610,
            215933511,
            215933733,
            215934077,
            215914493,
            215965756,
            215977352,
            215941711,
            233941264,
            215936437,
            215935391,
            215977463,
            215969180,
            215945577,
            215912738,
            215939893,
            215950899,
            215934318,
            215964596,
            215959218,
            215957991,
            215955934
        ],
        "D": [
            215901738,
            215911695,
            216386594,
            215909113,
            215918034,
            215916358,
            215933169,
            215909241,
            215922975,
            234220985,
            215915496,
            215918649,
            215921028,
            215919624,
            215925910,
            215965913,
            215944986,
            215923778,
            215918733,
            215917075,
            215927258,
            215909167,
            215930917
        ],
        "C": [
            215896251,
            215894479,
            216386570,
            215900243,
            215896179,
            215907225,
            215897874,
            215899171,
            215913186,
            216103314,
            215910665,
            215904112,
            215906218,
            215893558,
            215913416,
            215898003,
            215913451,
            215905641,
            215906717,
            215916261,
            215893733,
            215907522
        ],
        "B": [
            215891011,
            215887978,
            215890857,
            215886817,
            215889862,
            215890551,
            215889747,
            215890405,
            216103286,
            215904981,
            215895899,
            215891636,
            215886438,
            215894588,
            215888040,
            215888730,
            215892001,
            215891534,
            215895784,
            215887055,
            215895512
        ],
        "A": [
            215887103,
            215884849,
            215885125,
            215884783,
            215885307,
            215885029,
            215884781,
            215885053,
            216103329,
            215902406,
            215889192,
            215885764,
            215884723,
            215885605,
            215884732,
            215884795,
            215885200,
            215885812,
            215885953,
            215884704,
            215884853
        ]
    },
    "name": "A. Morning Sandwich",
    "statement": "Monocarp always starts his morning with a good ol’ sandwich. Sandwiches\r\nMonocarp makes always consist of bread, cheese and/or ham.A sandwich\r\nalways follows the formula: a piece of bread a slice of cheese or ham a\r\npiece of bread\r\ndots a slice of cheese or ham a piece of bread So it always has bread on\r\ntop and at the bottom, and it alternates between bread and filling,\r\nwhere filling is a slice of either cheese or ham. Each piece of bread\r\nand each slice of cheese or ham is called a layer.Today Monocarp woke up\r\nand discovered that he has b pieces of bread, c slices of cheese and h\r\nslices of ham. What is the maximum number of layers his morning sandwich\r\ncan have?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int b, c, h;\n    std::cin >> b >> c >> h;\n    \n    std::cout << std::min(b, c + h + 1) * 2 - 1 << \"\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Morning Sandwich.json",
    "editorial_link": "https://codeforces.com//blog/entry/118752",
    "editorial": "Notice that the type of filling doesnât matter. We can treat both cheese\r\nand ham together as one filling, with quantity .Then letâs start\r\nbuilding a sandwich layer by layer. Put a piece of bread. Then put a\r\nlayer of filling and a piece of bread. Then another layer of filling and\r\na piece of bread. Observe that you can add one layer of filling and one\r\npiece of bread until one of them runs out. After youâve done that times,\r\nyou placed layers of bread and layers of filling.Thus, there are two\r\ngeneral cases. If bread runs out first, then . Otherwise, . The one that\r\nruns out first is the smaller of these two values. So the answer is\r\n.Overall complexity: per testcase.\r\n",
    "hint": []
}