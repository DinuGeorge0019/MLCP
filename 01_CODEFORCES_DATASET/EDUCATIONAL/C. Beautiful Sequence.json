{
    "link": "https://codeforces.com//contest/2069/problem/C",
    "problemId": "3213448",
    "problem_idx": "C",
    "shortId": "2069C",
    "contest_number": "2069",
    "problem_submissions": {
        "E": [
            306720227,
            306703455,
            306762040,
            306709414,
            306720479,
            306710204,
            306717271,
            306714232,
            306713491,
            306717023,
            306719634,
            306716305,
            306717171,
            306715546,
            306713534,
            307552024,
            306752930,
            306724477,
            306721728,
            306718615,
            306718992,
            306726971,
            306725677
        ],
        "F": [
            306709347,
            306728258,
            306727520,
            306728135,
            306741225,
            306726966,
            306744015,
            306732116,
            306739032,
            306855146,
            306737313,
            306730256,
            306733511,
            306743505,
            306725225,
            306745953,
            306762587,
            306739080,
            306745663,
            306744259,
            306729975,
            306736187,
            306742000
        ],
        "D": [
            306694099,
            306695545,
            306695100,
            306694667,
            306690359,
            306701386,
            306701212,
            306696826,
            306697964,
            306697288,
            306699133,
            306704039,
            306702795,
            306701942,
            306702458,
            306700726,
            306707761,
            306704425,
            306708530,
            306707972
        ],
        "C": [
            306685465,
            306686684,
            306687348,
            306684235,
            306683606,
            306688263,
            306688039,
            306687329,
            306856369,
            306685918,
            306688691,
            306688112,
            306685819,
            306691359,
            306688654,
            306686865,
            306692320,
            306691352,
            306695398,
            306686441,
            306689890
        ],
        "B": [
            306681829,
            306682850,
            306682972,
            306680572,
            306680880,
            306682298,
            306683281,
            306682689,
            306856172,
            306681142,
            306684519,
            306683738,
            306681106,
            306703816,
            306682841,
            306682588,
            306685491,
            306683927,
            306691965,
            306683224,
            306685776
        ],
        "A": [
            306678234,
            306678240,
            306678194,
            306678094,
            306678179,
            306678115,
            306678333,
            306678481,
            306855634,
            306678273,
            306679166,
            306678389,
            306678130,
            306680446,
            306678338,
            306678258,
            306678871,
            306678235,
            306687347,
            306679141,
            306678310
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/139774",
    "editorial": "Let’s change the definition of a beautiful sequence a bit. We can prove\r\nthat the condition \"for every element except the first one, there is an\r\nelement to the left less than it\" is equivalent to \"the first element is\r\nless than every other element in the sequence\". We can prove that these\r\ntwo conditions are equivalent by induction: for the -nd element of the\r\nsequence , the only element to the left is the -st (), so ; assume we\r\nhave proved that, for every , . Let’s prove that . Suppose that the\r\nelement to the left of which is less than is ; if , then obviously, ;\r\notherwise, and , so . Using similar induction, we can prove that \"for\r\nevery element except the last one, there is an element to the right\r\nlarger than it\" is the same as \"the last element is greater than every\r\nother element in the sequence\".Since the array consists only of , and ,\r\nwe can notice that there is only one possible beautiful sequence\r\npattern: (i. e. one , followed by any number of consecutive and one\r\nfinal ). Any other pattern is invalid: the leftmost element should be\r\nstrictly less than every element in the middle (every element from the\r\n-nd to the second-to-last), and the rightmost should be strictly greater\r\nthan every element in the middle; so, the leftmost element should be ,\r\nthe rightmost element should be , and every element in the middle should\r\nbe .In order to calculate the number of subsequences that match the\r\naforementioned pattern, we can use dynamic programming. Let be the\r\nnumber of subsequences if we have considered the first elements of the\r\narray, and the current state is (for example, state means that the\r\nsequence is empty, state means that we have taken the element equal to ,\r\nstate means that we have taken some number of ’s, state means that we\r\nhave taken the element and the sequence is finished). The transitions in\r\nthis dynamic programming are pretty simple and can be done in for each\r\nstate.So the total complexity of the solution is .\r\n",
    "name": "C. Beautiful Sequence",
    "statement": "Let’s call an integer sequence if the following conditions hold: its\r\nlength is at least 3; for every element except the first one, there is\r\nan element to the left less than it; for every element except the last\r\none, there is an element to the right larger than it; For example, [1,\r\n4, 2, 4, 7] and [1, 2, 4, 8] are beautiful, but [1, 2], [2, 2, 4], and\r\n[1, 3, 5, 3] are not.Recall that a subsequence is a sequence that can be\r\nobtained from another sequence by removing some elements without\r\nchanging the order of the remaining elements.You are given an integer\r\narray a of size n, where . Your task is to calculate the number of\r\nbeautiful subsequences of the array a. Since the answer might be large,\r\nprint it modulo 998244353.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "greedy",
        "two pointers"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Beautiful Sequence.json",
    "hint": []
}