{
    "link": "https://codeforces.com//contest/2111/problem/F",
    "problemId": "3419291",
    "problem_idx": "F",
    "shortId": "2111F",
    "contest_number": "2111",
    "problem_submissions": {
        "G": [
            322719568,
            322738251,
            322737232,
            322734882,
            322733848,
            322739705,
            322765348,
            322764688,
            322752005,
            322753587,
            322751319,
            322720568,
            322729631,
            322757116,
            322785461,
            322890645,
            323020347,
            322778439,
            322778419,
            322778201,
            322778119,
            322778020,
            322777882,
            322777223,
            322776997,
            322776001,
            322775936
        ],
        "E": [
            322697990,
            322695191,
            322705487,
            322705821,
            322705980,
            322713283,
            322724677,
            322738049,
            322690431,
            322700985,
            322700076,
            322704262,
            322702259,
            322707219,
            322704094,
            322705822,
            322703551
        ],
        "F": [
            322691387,
            322716243,
            322719103,
            322728613,
            322729993,
            322731051,
            322740913,
            322686943,
            322710192,
            322719720,
            322713672,
            322713636,
            322726013,
            322721562,
            322720556,
            322728230,
            322730210
        ],
        "D": [
            322678511,
            322686771,
            322684334,
            322692059,
            322689019,
            322692746,
            322686820,
            322741814,
            322683201,
            322689247,
            322687368,
            322686598,
            322691632,
            322687656,
            322691451,
            322694053,
            322684204
        ],
        "C": [
            322676707,
            322681404,
            322679043,
            322681662,
            322681314,
            322683752,
            322680197,
            322743070,
            322679811,
            322681807,
            322679034,
            322681517,
            322680587,
            322678741,
            322686213,
            322679235,
            322680369
        ],
        "B": [
            322676127,
            322679449,
            322677961,
            322679172,
            322678800,
            322680312,
            322678349,
            322745453,
            322678542,
            322679221,
            322677917,
            322679124,
            322677847,
            322677424,
            322681157,
            322677471,
            322677308
        ],
        "A": [
            322675651,
            322676474,
            322676120,
            322676736,
            322675861,
            322677535,
            322676082,
            322747128,
            322675974,
            322676468,
            322676128,
            322676492,
            322675977,
            322675843,
            322676405,
            322675792,
            322675708
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143528",
    "editorial": "If a figure consists of a single piece, then its perimeter-to-area ratio\r\nis to . In fact, this is the maximum ratio that can be achieved. That\r\nis, if , the answer is .Now we need to understand what other ratios can\r\nexist:Suppose we have placed one piece; let’s add one neighboring piece\r\nto it. Notice that if the next unit piece touches one side of our\r\nfigure, the area increases by , and the perimeter increases by . Thus,\r\nif we add pieces to our very first one in this manner, the ratio will\r\nbe:This can be transformed into the following form:This means that if\r\nthe ratio is and can be represented in this form, then we can draw it as\r\na strip figure, that is, a rectangle .Now let’s imagine a situation\r\nwhere we added pieces in the manner described above, and then we add a\r\npiece that touches two or more sides of our figure. In this case, the\r\narea increases by , but the perimeter does not increase:Thus, if we\r\nconstructed the figure in this way, the ratio . This means that if the\r\nratio cannot be represented in the form and is greater than two, the\r\nanswer is also .We are left to deal with the case when . In fact, when\r\nit equals two, we can draw a square with a side of , and that will be\r\nour answer.If , then any figure with such a ratio can be obtained. The\r\nratios can be divided into two cases: when the numerator is even and\r\nwhen it is odd.When the numerator is odd, it is straightforward: we\r\nremember that if we place a piece on some figure so that it touches only\r\none side, the perimeter increases by , and the area by . So let’s\r\nsubtract from and from until we get . Such a ratio can easily be drawn\r\nas a square with a side of .Thus, any ratio in this case can be\r\nrepresented as a square to which a strip has been added.When the\r\nnumerator is even, let’s subtract from and from until we get the ratio .\r\nThis ratio can also be represented as a square with a side of\r\n.Therefore, all figures with a ratio can be drawn as a square to which a\r\nstrip has been added. Let’s estimate the number of pieces used in such a\r\nsolution. Obviously, the worst case will be when we need to draw a large\r\nsquare, for example, for the ratio or . But even in such cases, and\r\npieces are needed, respectively.\r\n",
    "name": "F. Puzzle",
    "statement": "You have been gifted a puzzle, where each piece of this puzzle is a\r\nsquare with a side length of one. You can glue any picture onto this\r\npuzzle, cut it, and obtain an almost ordinary jigsaw puzzle.Your friend\r\nis an avid mathematician, so he suggested you consider the following\r\nproblem. Is it possible to arrange the puzzle pieces in such a way that\r\nthe following conditions are met: the pieces are aligned parallel to the\r\ncoordinate axes; the pieces do not overlap each other; all pieces form a\r\nsingle connected component (i.e., there exists a path from each piece to\r\nevery other piece along the pieces, where each two consecutive pieces\r\nshare a side); the ratio of the perimeter of this component to the area\r\nof this component equals\r\nfrac{p}{s}; the number of pieces used does not exceed 50\r\n,000. Can you handle it?\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Puzzle.json"
}