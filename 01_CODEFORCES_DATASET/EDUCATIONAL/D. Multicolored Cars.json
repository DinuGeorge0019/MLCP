{
    "link": "https://codeforces.com//contest/818/problem/D",
    "problemId": "112248",
    "problem_idx": "D",
    "shortId": "818D",
    "contest_number": "818",
    "problem_submissions": {
        "G": [
            30023806,
            28149762,
            28149727,
            28149674,
            28150840,
            28150782,
            28150772,
            28150751,
            28150583,
            36665796,
            28151676,
            28150077,
            28257233,
            28153699,
            28148603,
            28155021,
            28156689,
            28156349,
            28183779
        ],
        "F": [
            28147295,
            28150245,
            28148357,
            28147147,
            28148601,
            28147618,
            28149338,
            28148822,
            28148432,
            28150045,
            28149715,
            28149799,
            28150664,
            28150399,
            28265989,
            28152841,
            28152214,
            28151371,
            28150016,
            28150927,
            28150947,
            28149764
        ],
        "E": [
            28145911,
            28145866,
            28146912,
            28146350,
            28146816,
            28150531,
            28146712,
            28147272,
            28147609,
            28147038,
            28148502,
            28147986,
            28147358,
            28149016,
            28148737,
            28150693,
            28148409,
            28146623,
            28149530,
            28149268,
            28147603
        ],
        "D": [
            28144801,
            28145060,
            28145928,
            28145417,
            28145327,
            28143658,
            28146282,
            28144973,
            28145879,
            28146889,
            28146309,
            28145676,
            28146984,
            28146985,
            28145000,
            28147304,
            28145917,
            28147015,
            28147874,
            28146172
        ],
        "C": [
            28144306,
            28147073,
            28145409,
            28144547,
            28144448,
            28144425,
            28145368,
            28146425,
            28145275,
            28145837,
            28145300,
            28145004,
            28145976,
            28145637,
            28147975,
            28146492,
            28148332,
            28146298,
            28146819,
            28144965
        ],
        "B": [
            28143095,
            28143560,
            28143556,
            28143415,
            28143669,
            28144503,
            28144240,
            28143720,
            28144083,
            28143468,
            28143875,
            28143599,
            28143355,
            28143995,
            28143629,
            28143924,
            28143708,
            28142954,
            28143812,
            28144185
        ],
        "A": [
            28142461,
            28142521,
            28142540,
            28142460,
            28142740,
            28142644,
            28142466,
            28142416,
            28142519,
            28142508,
            28142479,
            28142800,
            28142422,
            28142542,
            28142573,
            28142463,
            28142490,
            28142485
        ]
    },
    "name": "D. Multicolored Cars",
    "statement": "Alice and Bob got very bored during a long car trip so they decided to\r\nplay a game. From the window they can see cars of different colors\r\nrunning past them. Cars are going one after another.The game rules are\r\nlike this. Firstly Alice chooses some color , then Bob chooses some\r\ncolor (). After each car they update the number of cars of their chosen\r\ncolor that have run past them. Let’s define this numbers after -th car\r\nand . If for every then the winner is Alice. If for every then the\r\nwinner is Bob. Otherwise it’s a draw. Bob knows all the colors of cars\r\nthat they will encounter and order of their appearance. Alice have\r\nalready chosen her color and Bob now wants to choose such color that he\r\nwill win the game (draw is not a win). Help him find this color.If there\r\nare multiple solutions, print any of them. If there is no such color\r\nthen print .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define N 1000001\nint n , a , x , cnt[ N ];\nbool died[ N ];\nint main(){\n  cin >> n >> a;\n  set< pair<int,int> > S;\n  for( int i = 1 ; i < N ; i ++ )\n    S.insert( { 0 , i } );\n  while( n -- ){\n    cin >> x;\n    if( not died[ x ] ){\n      S.erase( S.find( { cnt[ x ] , x } ) );\n      cnt[ x ] ++;\n      S.insert( { cnt[ x ] , x } );\n    }\n    while( S.size() and S.begin()->first < cnt[ a ] ){\n      died[ S.begin()->second ] = true;\n      S.erase( S.begin() );\n    }\n  }\n  for( auto i : S )\n    if( i.second != a ){\n      cout << i.second << endl;\n      exit(0);\n    }\n  cout << -1 << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Multicolored Cars.json",
    "editorial_link": "https://codeforces.com/blog/entry/52991",
    "editorial": "Letâs maintain the current availability of colors and the amounts of\r\ncars of each color. Firstly color is never available.When car of some\r\ncolor () goes, you check if the number of cars of color past before this\r\none isnât smaller than the number of cars of color . Only after that\r\nincrement the amount by one. If it was less then set its availability to\r\nfalse.If car of color goes then simply increment its amount.In the end\r\niterate over all colors and check if itâs both available and has higher\r\nor equal amount than the amount of cars of color .Okay, why this works?\r\nAs all the amounts cannot decrease, color will become not available at\r\nsome moment when car of color goes. And this will be encountered either\r\nwhen the new car of color goes, or in the end of the sequence. Amount of\r\ncars of color doesnât update between this periods. And if there was\r\npoint when there became more cars of color than of color then this\r\ninequality will hold until the next moment we will check.Overall\r\ncomplexity: .\r\n",
    "hint": []
}