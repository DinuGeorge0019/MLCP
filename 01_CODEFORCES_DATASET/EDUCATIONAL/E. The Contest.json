{
    "link": "https://codeforces.com//contest/1257/problem/E",
    "problemId": "470640",
    "problem_idx": "E",
    "shortId": "1257E",
    "contest_number": "1257",
    "problem_submissions": {
        "D": [
            65057118,
            65056815,
            64811909,
            64812228,
            64902701,
            64852999,
            64814000,
            64812775,
            64810546,
            64816528,
            64811860,
            64815149,
            64813583,
            64859190,
            64812263,
            64833625,
            64835681,
            64837730,
            64812160,
            64814684,
            64816849,
            64813089,
            64816979,
            64819402,
            64816732
        ],
        "C": [
            65056409,
            64806576,
            64805235,
            64806785,
            64807190,
            64804696,
            64807450,
            64806032,
            64809153,
            64805479,
            64859181,
            64806083,
            64833699,
            64837249,
            64838553,
            64806562,
            64809106,
            64808660,
            64805745,
            64806256,
            64807560,
            64807194
        ],
        "G": [
            64897847,
            64897831,
            64897799,
            64897485,
            64897435,
            64897360,
            64897323,
            64897206,
            64897135,
            64897132,
            64832008,
            64834753,
            64834055,
            65121895,
            65107512,
            65106890,
            64896695,
            64896568,
            64824847,
            64838006,
            64831302,
            64827437,
            64838916,
            64835759,
            64897295,
            64843586,
            64835359,
            64859234,
            64838704,
            65758026,
            65701826,
            64838221,
            64811892,
            64819153,
            64825152,
            64845699,
            211233713
        ],
        "E": [
            64865638,
            64865598,
            64816641,
            64819423,
            64857985,
            64831912,
            64817543,
            64814313,
            64819647,
            64817584,
            64819210,
            64817767,
            64859197,
            64814324,
            64824835,
            64832464,
            64832777,
            64820509,
            64818561,
            64820860,
            64817451,
            64823687,
            64821709,
            64824423
        ],
        "F": [
            64821055,
            64823926,
            64819069,
            64824118,
            64836060,
            64833509,
            64822156,
            64828427,
            64823151,
            64859227,
            64836114,
            64824755,
            64828355,
            64829448,
            64829060,
            64827403,
            64826552,
            64828456,
            64828341,
            64826098,
            64830812
        ],
        "B": [
            64802390,
            64803311,
            64804526,
            64804462,
            64802487,
            64804783,
            64803616,
            64806366,
            64802273,
            64859169,
            64803153,
            64833735,
            64838243,
            64839005,
            64803686,
            64806451,
            64806108,
            64802622,
            64803655,
            64803331,
            64803958
        ],
        "A": [
            64800956,
            64800953,
            64801859,
            64801038,
            64800918,
            64800975,
            64800962,
            64803138,
            64800908,
            64859160,
            64801089,
            64833779,
            64838753,
            64839327,
            64800961,
            64801572,
            64801191,
            64800917,
            64801440,
            64800919,
            64801087
        ]
    },
    "name": "E. The Contest",
    "statement": "A team of three programmers is going to play a contest. The contest\r\nconsists of n problems, numbered from 1 to n. Each problem is printed on\r\na separate sheet of paper. The participants have decided to divide the\r\nproblem statements into three parts: the first programmer took some\r\nprefix of the statements (some number of first paper sheets), the third\r\ncontestant took some suffix of the statements (some number of last paper\r\nsheets), and the second contestant took all remaining problems. But\r\nsomething went wrong the statements were printed in the wrong order, so\r\nthe contestants have received the problems in some random order.The\r\nfirst contestant has received problems a_{1, 1}, a_{1, 2},\r\ndots, a_{1, k_1}. The second one has received problems a_{2, 1}, a_{2,\r\n2},\r\ndots, a_{2, k_2}. The third one has received all remaining problems\r\n(a_{3, 1}, a_{3, 2},\r\ndots, a_{3, k_3}).The contestants don’t want to play the contest before\r\nthey redistribute the statements. They want to redistribute them so that\r\nthe first contestant receives some prefix of the problemset, the third\r\ncontestant receives some suffix of the problemset, and the second\r\ncontestant receives all the remaining problems.During one move, some\r\ncontestant may give one of their problems to other contestant. What is\r\nthe minimum number of moves required to redistribute the problems?.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Finds the length of the longest subsequence of values such that compare is true for all consecutive pairs.\ntemplate<typename T, typename T_compare>\nint longest_increasing_subsequence(vector<T> values, T_compare &&compare) {\n    vector<T> best_ending;\n\n    for (T value : values) {\n        auto it = lower_bound(best_ending.begin(), best_ending.end(), value, compare);\n\n        if (it == best_ending.end())\n            best_ending.push_back(value);\n        else\n            *it = value;\n    }\n\n    return best_ending.size();\n}\n\nconst int P = 3;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int K[P];\n    int N = 0;\n\n    for (int p = 0; p < P; p++) {\n        cin >> K[p];\n        N += K[p];\n    }\n\n    vector<int> who(N, -1);\n\n    for (int p = 0; p < P; p++)\n        for (int k = 0; k < K[p]; k++) {\n            int a;\n            cin >> a;\n            a--;\n            who[a] = p;\n        }\n\n    cout << N - longest_increasing_subsequence(who, less_equal<int>()) << '\\n';\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "greedy"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. The Contest.json",
    "editorial_link": "https://codeforces.com//blog/entry/71434",
    "editorial": "Suppose we want to divide first problems of the contest between the\r\nfirst contestant and the second contestant (the first contestant will\r\nget first problems, and the second contestant will get problems in the\r\nmiddle), and then give all the remaining problems to the third\r\ncontestant. We are going to iterate on from to and, for each possible ,\r\nfind the best value of .Okay. Now suppose we fixed and , and now we want\r\nto calculate the number of problems that should be redistributed. Letâs\r\ndenote as the number of problems among first ones given to the -th\r\ncontestant, as the number of problems among last ones given to the -th\r\ncontestant, and as the number of problems in the middle given to the -th\r\ncontestant.Obviously, the answer for fixed and is , but we donât like\r\nthis expression because we donât know how to minimize it for fixed . We\r\nknow that, for fixed , the values of and are constant. Using that, we\r\nmay arrive at the fact that minimizing is the same as minimizing for\r\nfixed and now we have a way to quickly find best possible for fixed .\r\n",
    "hint": []
}