{
    "link": "https://codeforces.com//contest/1132/problem/D",
    "problemId": "307698",
    "problem_idx": "D",
    "shortId": "1132D",
    "contest_number": "1132",
    "problem_submissions": {
        "E": [
            50850068,
            50849530,
            50845767,
            50845285,
            50999251,
            50998220,
            50984714,
            50983025,
            50849124,
            50834937,
            50849964,
            50853384,
            50853400,
            50852279,
            50851280,
            50853752,
            50855850,
            50853199,
            51446514,
            50851785,
            50834992,
            50854163,
            50845937
        ],
        "G": [
            50842167,
            50854823,
            50857129,
            50854920,
            50844161,
            50859138,
            57119782,
            50878894,
            51002265,
            50995547,
            50857246,
            50834458,
            50982974,
            50871478
        ],
        "F": [
            50840202,
            50838419,
            50836444,
            50982824,
            50982298,
            50914403,
            50914340,
            50845586,
            50832740,
            50838344,
            50839910,
            50835170,
            50841485,
            50845495,
            50850234,
            50846859,
            50849525,
            50847269,
            50833261,
            50843613,
            50842907,
            50837062,
            50843690,
            50848869
        ],
        "D": [
            50834165,
            50842583,
            50852105,
            50872042,
            50872030,
            50859910,
            50859897,
            50858488,
            50851238,
            50841187,
            50848482,
            50846027,
            50850423,
            50849233,
            50840756,
            50846142,
            50842178,
            50842159,
            50851492,
            50842299,
            50850678,
            50854836,
            50842129,
            50854102
        ],
        "C": [
            50827032,
            50833764,
            50832215,
            50839270,
            50881672,
            50828449,
            50836070,
            50832571,
            50831895,
            50835165,
            50830486,
            50829266,
            50832724,
            50834393,
            50838461,
            50842825,
            50830636,
            50837272,
            50843085,
            50842733,
            50838178
        ],
        "B": [
            50825116,
            50826216,
            50828719,
            50855444,
            50825477,
            50825790,
            50828172,
            50826213,
            50832189,
            50825110,
            50828347,
            50828834,
            50837439,
            50825450,
            50826572,
            50843916,
            50826867,
            50835237
        ],
        "A": [
            50824651,
            50824679,
            50826667,
            50855859,
            50824764,
            50824716,
            50825124,
            50824755,
            50829449,
            50824659,
            50826098,
            50836545,
            50824668,
            50824888,
            50845090,
            50825359,
            50834758
        ]
    },
    "name": "D. Stressful Training",
    "statement": "Berland SU holds yet another training contest for its students today. n\r\nstudents came, each of them brought his laptop. However, it turned out\r\nthat everyone has forgot their chargers!Let students be numbered from 1\r\nto n. Laptop of the i-th student has charge a_i at the beginning of the\r\ncontest and it uses b_i of charge per minute (i.e. if the laptop has c\r\ncharge at the beginning of some minute, it becomes c - b_i charge at the\r\nbeginning of the next minute). The whole contest lasts for k\r\nminutes.Polycarp (the coach of Berland SU) decided to buy a charger so\r\nthat all the students would be able to successfully finish the contest.\r\nHe buys the charger at the same moment the contest starts.Polycarp can\r\nchoose to buy the charger with any non-negative (zero or positive)\r\ninteger power output. The power output is chosen before the purchase, it\r\ncan’t be changed afterwards. Let the chosen power output be x. (from the\r\nminute contest starts to the last minute of the contest) he can plug the\r\ncharger into any of the student’s laptops and use it for some number of\r\nminutes. If the laptop is using b_i charge per minute then it will\r\nbecome b_i - x per minute while the charger is plugged in. Negative\r\npower usage rate means that the laptop’s charge is increasing. The\r\ncharge of any laptop isn’t limited, it can become infinitely large. The\r\ncharger can be plugged in no more than one laptop at the same time.The\r\nstudent successfully finishes the contest if the charge of his laptop\r\nnever is below zero at the beginning of some minute (from the minute\r\ncontest starts to the last minute of the contest, zero charge is\r\nallowed). The charge of the laptop of the minute the contest ends\r\ndoesn’t matter.Help Polycarp to determine the minimal possible power\r\noutput the charger should have so that all the students are able to\r\nsuccessfully finish the contest. Also report if no such charger exists.\r\n",
    "solutions": [
        "#ifndef BZ\n#pragma GCC optimize \"-O3\"\n#endif\n#include <bits/stdc++.h>\n\n#define FASTIO\n#define ALL(v) (v).begin(), (v).end()\n#define rep(i, l, r) for (int i = (l); i < (r); ++i)\n\n#ifdef FASTIO\n#define scanf abacaba\n#define printf abacaba\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\nusing namespace std;\n\ntemplate<typename T> T mo(T x, T y) { x %= y; return x <= 0 ? x + y : x; }\n\nconst int MX = 200 * 1000 + 7;\n\nll a[MX], b[MX];\nll aa[MX];\n\nint bad(ll x, ll y) {\n    return min(ll(1e9), x / y + 1);\n}\n\nint main() {\n#ifdef FASTIO\n    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n#endif\n    int n, k;\n    cin >> n >> k;\n    for (int i = 1; i <= n; i++) {\n        cin >> a[i];\n    }\n    for (int i = 1; i <= n; i++) {\n        cin >> b[i];\n    }\n    const ll INF = 1e18;\n    ll lg = -1, rg = INF;\n    while (rg - lg > 1) {\n        ll mg = (lg + rg) >> 1;\n        priority_queue<pair<int, int> > fail;\n        for (int i = 1; i <= n; i++) {\n            aa[i] = a[i];\n            fail.emplace(-bad(aa[i], b[i]), i);\n        }\n        bool fl = false;\n        for (int i = 1; i <= k; i++) {\n            auto it = fail.top();\n            fail.pop();\n            it.first = -it.first;\n            if (it.first < i) {\n                fl = true;\n                break;\n            }\n            if (it.first > k) {\n                break;\n            }\n            int v = it.second;\n            aa[v] += mg;\n            fail.emplace(-bad(aa[v], b[v]), v);\n        }\n        if (fl) {\n            lg = mg;\n        } else {\n            rg = mg;\n        }\n    }\n    if (rg == INF) {\n        rg = -1;\n    }\n    cout << rg << \"\\n\";\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Stressful Training.json",
    "editorial_link": "https://codeforces.com/blog/entry/65752",
    "editorial": "The easiest part of the solution is to notice that if the charger of\r\npower works then the charger of power also works. Thus, binary search is\r\napplicable to the problem. is really small and only one laptop can be\r\ncharged during some minute. It implies that check function can work in\r\nsomething polynomial on by searching for the right laptop to charge\r\nduring every minute.I claim that the greedy algorithm works. Find the\r\nlaptop that gets his charge below zero the first. Charge it for one\r\nminute as early as possible. Repeat until you either donât have time to\r\ncharge the laptop (check returns false) or the contest is over (check\r\nreturns true).Why greedy works? Well, check any case where check returns\r\nfalse. If some laptop runs out of power then all the minutes up to the\r\ncurrent one are used to charge something. Moreover, you can free no\r\nminute of these as by doing greedy we charged all laptops as late as\r\npossible. Freeing some minute will lead to other laptop dying\r\nearlier.One way to implement this is the following. Keep a heap of\r\nevents (), pop its head, add to it if the time is greater than the\r\nnumber of charges already made and push it back to heap. That will\r\nsimulate the entire process in . Unfortunately, this may be too slow on\r\nsome implementations.Letâs try the following linear approach. Maintain\r\nnot the heap but such an array that -th its cell contains all indices of\r\nall the laptops to run out of charge on the beginning of minute . Keep\r\nan iterator to the first non-empty position. Pop a single index out of\r\nthis vector, charge it and push it to the new position. Youâll still\r\nmake steps and on each step youâll make instant operations. That will\r\nmake it for this simulation.Iâm not really sure how to build the maximal\r\nanswer case, however, I can estimate the upper bound of binary search.\r\nYou can set in such a way that it charges every laptop in one minute so\r\nthat it wonât run out of power until the end of the contest. Choose the\r\nsmallest , the greatest , the greatest and youâll end up with total\r\nusage. Thus, will always be enough.Overall complexity: . (or if you are\r\nskillful enough to squeeze it :D).\r\n",
    "hint": []
}