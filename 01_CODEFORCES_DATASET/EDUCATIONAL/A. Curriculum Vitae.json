{
    "link": "https://codeforces.com//contest/846/problem/A",
    "problemId": "120997",
    "problem_idx": "A",
    "shortId": "846A",
    "contest_number": "846",
    "problem_submissions": {
        "F": [
            30108156,
            30107162,
            30106647,
            30108328,
            30107786,
            30107476,
            30108023,
            30105549,
            30105678,
            30108397,
            30109633,
            30109280,
            30109385,
            30107975,
            30110238,
            30108732,
            30108760,
            30110164
        ],
        "E": [
            30107342,
            30108640,
            30109160,
            30110715,
            30110194,
            30109970,
            30108774,
            30110412,
            30109505,
            30110880,
            30108739,
            30110755,
            30111630,
            30111870,
            30111911,
            30111723,
            30113425,
            30111880
        ],
        "D": [
            30105892,
            30106073,
            30106673,
            30106266,
            30106933,
            30108722,
            30106872,
            30105786,
            30108926,
            30106473,
            30106803,
            30107029,
            30107512,
            30108104,
            30109714,
            30108207,
            30110001,
            30111074,
            30108770
        ],
        "C": [
            30105238,
            30104755,
            30105662,
            30105293,
            30106309,
            30106223,
            30104825,
            30107791,
            30105043,
            30105080,
            30106115,
            30105906,
            30106686,
            30106808,
            30107246,
            30107701,
            30107036,
            30107208
        ],
        "B": [
            30103719,
            30103777,
            30104242,
            30103580,
            30104340,
            30105094,
            30103843,
            30104470,
            30103928,
            30103957,
            30104536,
            30104441,
            30104836,
            30104758,
            30104309,
            30105851,
            30104847,
            30105774
        ],
        "A": [
            30103161,
            30103232,
            30103250,
            30103170,
            30103456,
            30103369,
            30103168,
            30103235,
            30103196,
            30103253,
            30103176,
            30103313,
            30103584,
            30103300,
            30103249,
            30104174,
            30103638,
            30104542
        ]
    },
    "name": "A. Curriculum Vitae",
    "statement": "Hideo Kojima has just quit his job at Konami. Now he is going to find a\r\nnew place to work. Despite being such a well-known person, he still\r\nneeds a CV to apply for a job.During all his career Hideo has produced\r\ngames. Some of them were successful, some were not. Hideo wants to\r\nremove several of them (possibly zero) from his CV to make a better\r\nimpression on employers. As a result there should be no unsuccessful\r\ngame which comes right after successful one in his CV.More formally, you\r\nare given an array of zeros and ones. Zero corresponds to an\r\nunsuccessful game, one to a successful one. Games are given in order\r\nthey were produced, and Hideo can\u2019t swap these values. He should remove\r\nsome elements from this array in such a way that no zero comes right\r\nafter one.Besides that, Hideo still wants to mention as much games in\r\nhis CV as possible. Help this genius of a man determine the maximum\r\nnumber of games he can leave in his CV.\r\n",
    "solutions": [
        "// eddy1021\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef double D;\ntypedef long double LD;\ntypedef long long LL;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\n#define mod9 1000000009LL\n#define mod7 1000000007LL\n#define INF  1023456789LL\n#define INF16 10000000000000000LL\n#define eps 1e-9\n#define SZ(x) (int)(x).size()\n#define ALL(x) (x).begin(), (x).end()\n#define IOS ios_base::sync_with_stdio(0); cin.tie(0)\n#ifndef ONLINE_JUDGE\n#define debug(...) printf(__VA_ARGS__)\n#else \n#define debug(...)\n#endif\ninline LL getint(){\n  LL _x=0,_tmp=1; char _tc=getchar();    \n  while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();\n  if( _tc == '-' ) _tc=getchar() , _tmp = -1;\n  while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();\n  return _x*_tmp;\n}\ninline LL add( LL _x , LL _y , LL _mod = mod7 ){\n  _x += _y;\n  return _x >= _mod ? _x - _mod : _x;\n}\ninline LL sub( LL _x , LL _y , LL _mod = mod7 ){\n  _x -= _y;\n  return _x < 0 ? _x + _mod : _x;\n}\ninline LL mul( LL _x , LL _y , LL _mod = mod7 ){\n  _x *= _y;\n  return _x >= _mod ? _x % _mod : _x;\n}\nLL mypow( LL _a , LL _x , LL _mod ){\n  if( _x == 0 ) return 1LL;\n  LL _ret = mypow( mul( _a , _a , _mod ) , _x >> 1 , _mod );\n  if( _x & 1 ) _ret = mul( _ret , _a , _mod );\n  return _ret;\n}\nLL mymul( LL _a , LL _x , LL _mod ){\n  if( _x == 0 ) return 0LL;\n  LL _ret = mymul( add( _a , _a , _mod ) , _x >> 1 , _mod );\n  if( _x & 1 ) _ret = add( _ret , _a , _mod );\n  return _ret;\n}\ninline bool equal( D _x ,  D _y ){\n  return _x > _y - eps && _x < _y + eps;\n}\n#define Bye exit(0)\nint __ = 1 , _cs;\n/*********default*********/\nvoid build(){\n\n}\n#define N 111\nint a[ N ] , n;\nvoid init(){\n  n = getint();\n  for( int i = 1 ; i <= n ; i ++ )\n    a[ i ] = a[ i - 1 ] + getint();\n}\nvoid solve(){\n  int ans = 0;\n  for( int i = 0 ; i <= n ; i ++ )\n    ans = max( ans , i - a[ i ] + a[ n ] - a[ i ] );\n  cout << ans << endl;\n}\nint main(){\n  build();\n  //__ = getint();\n  while( __ -- ){\n    init();\n    solve();\n  }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Curriculum Vitae.json",
    "editorial_link": "https://codeforces.com//blog/entry/54357",
    "editorial": "The statement literally asks for the longest subsequence which looks\r\nlike . Let\u00e2\u0080\u0099s find out how many zeroes will be in this sequence and then\r\ntake all ones which come after the last zero. On each step take the next\r\nzero from the beginning of the sequence and count ones after it. Update\r\nanswer with the maximum value.You can precalc number of ones on suffix\r\nwith partial sums but it was not necessary in this task.Overall\r\ncomplexity: (naively) or (with partial sums).\r\n"
}