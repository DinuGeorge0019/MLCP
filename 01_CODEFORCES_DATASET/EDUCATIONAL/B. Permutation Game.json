{
    "link": "https://codeforces.com//contest/818/problem/B",
    "problemId": "112246",
    "problem_idx": "B",
    "shortId": "818B",
    "contest_number": "818",
    "problem_submissions": {
        "G": [
            30023806,
            28149762,
            28149727,
            28149674,
            28150840,
            28150782,
            28150772,
            28150751,
            28150583,
            36665796,
            28151676,
            28150077,
            28257233,
            28153699,
            28148603,
            28155021,
            28156689,
            28156349,
            28183779
        ],
        "F": [
            28147295,
            28150245,
            28148357,
            28147147,
            28148601,
            28147618,
            28149338,
            28148822,
            28148432,
            28150045,
            28149715,
            28149799,
            28150664,
            28150399,
            28265989,
            28152841,
            28152214,
            28151371,
            28150016,
            28150927,
            28150947,
            28149764
        ],
        "E": [
            28145911,
            28145866,
            28146912,
            28146350,
            28146816,
            28150531,
            28146712,
            28147272,
            28147609,
            28147038,
            28148502,
            28147986,
            28147358,
            28149016,
            28148737,
            28150693,
            28148409,
            28146623,
            28149530,
            28149268,
            28147603
        ],
        "D": [
            28144801,
            28145060,
            28145928,
            28145417,
            28145327,
            28143658,
            28146282,
            28144973,
            28145879,
            28146889,
            28146309,
            28145676,
            28146984,
            28146985,
            28145000,
            28147304,
            28145917,
            28147015,
            28147874,
            28146172
        ],
        "C": [
            28144306,
            28147073,
            28145409,
            28144547,
            28144448,
            28144425,
            28145368,
            28146425,
            28145275,
            28145837,
            28145300,
            28145004,
            28145976,
            28145637,
            28147975,
            28146492,
            28148332,
            28146298,
            28146819,
            28144965
        ],
        "B": [
            28143095,
            28143560,
            28143556,
            28143415,
            28143669,
            28144503,
            28144240,
            28143720,
            28144083,
            28143468,
            28143875,
            28143599,
            28143355,
            28143995,
            28143629,
            28143924,
            28143708,
            28142954,
            28143812,
            28144185
        ],
        "A": [
            28142461,
            28142521,
            28142540,
            28142460,
            28142740,
            28142644,
            28142466,
            28142416,
            28142519,
            28142508,
            28142479,
            28142800,
            28142422,
            28142542,
            28142573,
            28142463,
            28142490,
            28142485
        ]
    },
    "name": "B. Permutation Game",
    "statement": "children are standing in a circle and playing a game. Children\u2019s numbers\r\nin clockwise order form a permutation of length . It is an integer\r\nsequence such that each integer from to appears exactly once in it.The\r\ngame consists of steps. On each step the current leader with index\r\ncounts out people in clockwise order, starting from the next person. The\r\nlast one to be pointed at by the leader becomes the new leader.You are\r\ngiven numbers indices of leaders in the beginning of each step. Child\r\nwith number is the first leader in the game. Write a program which will\r\nrestore a possible permutation . If there are multiple solutions then\r\nprint any of them. If there is no solution then print .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define N 111\nint n , m , a[ N ] , l[ N ];\nbool used[ N ];\nint main(){\n  cin >> n >> m;\n  for( int i = 0 ; i < m ; i ++ )\n    cin >> l[ i ];\n  for( int i = 1 ; i < m ; i ++ ){\n    int x = ( l[ i ] - l[ i - 1 ] + n ) % n;\n    if( x == 0 ) x = n;\n    if( a[ l[ i - 1 ] ] == 0 ){\n      if( used[ x ] ){\n        puts( \"-1\" );\n        exit(0);\n      }\n      a[ l[ i - 1 ] ] = x;\n      used[ x ] = true;\n      continue;\n    }\n    if( x != a[ l[ i - 1 ] ] ){\n      puts( \"-1\" );\n      exit(0);\n    }\n  }\n  for( int i = 1 ; i <= n ; i ++ ) if( a[ i ] == 0 )\n    for( int j = 1 ; j <= n ; j ++ ) if( !used[ j ] ){\n      a[ i ] = j;\n      used[ j ] = true;\n      break;\n    }\n  for( int i = 1 ; i <= n ; i ++ )\n    printf( \"%d%c\" , a[ i ] , \" \\n\"[ i == n ] );\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Permutation Game.json",
    "editorial_link": "https://codeforces.com/blog/entry/52991",
    "editorial": "Let\u00e2\u0080\u0099s show by construction that there can be no ambiguity in values of\r\nof the children who were leaders at least once (except for probably the\r\nlast leader).If then on this step the value of taken was exactly .\r\nOtherwise went over and in circle ended up to the left or in the same\r\nposition. So for this case should be . Obviously counting cannot go over\r\ntwo or more times as this will result in .We only need to check if all\r\nthe numbers are unique and fill the unvisited children with remaining\r\nvalues to form the permutation.Overall complexity: .\r\n"
}