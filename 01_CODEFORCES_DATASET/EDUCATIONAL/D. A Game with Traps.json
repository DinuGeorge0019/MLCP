{
    "link": "https://codeforces.com//contest/1260/problem/D",
    "problemId": "482536",
    "problem_idx": "D",
    "shortId": "1260D",
    "contest_number": "1260",
    "problem_submissions": {
        "F": [
            65858730,
            65862568,
            66652397,
            66566066,
            66562444,
            66562321,
            66562191,
            66549616,
            66548423,
            66547174,
            66518194,
            66518036,
            66517620,
            66510535,
            66510382,
            66510329,
            66510272,
            66510123,
            66479420,
            66479366,
            66477381,
            66477286,
            66476986,
            66321512,
            66246571,
            66246300,
            66238302,
            66238072,
            66237291,
            66208821,
            66204798,
            66204686,
            66203676,
            66203473,
            66203066,
            66202735,
            66202708,
            66159751,
            66157778,
            66157649,
            66157618,
            66156988,
            65877182,
            65877041,
            65876947,
            65876872,
            65876803,
            65876438,
            65866876,
            66367088,
            65866080,
            65866251,
            65864285,
            65877636,
            65873623,
            65885023,
            66605734,
            66774965
        ],
        "E": [
            65846156,
            65847430,
            65837398,
            65853743,
            65845843,
            65855348,
            65845810,
            65888526,
            65846187,
            65841086,
            65850296,
            65842358,
            65848204,
            65850447,
            65852329,
            65852192,
            65851204,
            65854002,
            65852510
        ],
        "D": [
            65842916,
            65839945,
            65842733,
            65847161,
            65840341,
            65840171,
            65846096,
            65839274,
            65888522,
            65837646,
            65842330,
            65843302,
            65851742,
            65843499,
            65843987,
            65845327,
            65933516,
            65844977,
            65845445,
            65847585,
            65843731
        ],
        "C": [
            65833157,
            65835911,
            65834737,
            65835945,
            65833091,
            65840410,
            65832981,
            65888509,
            65833437,
            65830880,
            65835473,
            65834819,
            65835069,
            65838384,
            65834359,
            65834145,
            65837535,
            65834275,
            65835760
        ],
        "B": [
            65831075,
            65831703,
            65829870,
            65830692,
            65829912,
            65833299,
            65829889,
            65888498,
            65829702,
            65829574,
            65830168,
            65831336,
            65830234,
            65832147,
            65830305,
            65830813,
            65831299,
            65830442,
            65831731
        ],
        "A": [
            65829790,
            65829709,
            65829549,
            65829616,
            65829579,
            65830086,
            65829577,
            65888488,
            65829556,
            65829530,
            65829593,
            65829726,
            65829617,
            65830283,
            65829711,
            65829913,
            65830075,
            65829704,
            65830725
        ]
    },
    "name": "D. A Game with Traps",
    "statement": "You are playing a computer game, where you lead a party of m soldiers.\r\nEach soldier is characterised by his agility a_i.The level you are\r\ntrying to get through can be represented as a straight line segment from\r\npoint 0 (where you and your squad is initially located) to point n + 1\r\n(where the boss is located).The level is filled with k traps. Each trap\r\nis represented by three numbers l_i, r_i and d_i. l_i is the location of\r\nthe trap, and d_i is the danger level of the trap: whenever a soldier\r\nwith agility lower than d_i steps on a trap (that is, moves to the point\r\nl_i), he gets instantly killed. Fortunately, you can disarm traps: if\r\nyou move to the point r_i, you disarm this trap, and it no longer poses\r\nany danger to your soldiers. Traps don\u2019t affect you, only your\r\nsoldiers.You have t seconds to complete the level that is, to bring some\r\nsoldiers from your squad to the boss. Before the level starts, you\r\nchoose which soldiers will be coming with you, and which soldiers won\u2019t\r\nbe. After that, you have to bring to the boss. To do so, you may perform\r\nthe following actions: if your location is x, you may move to x + 1 or\r\nx - 1. This action consumes one second; if your location is x and the\r\nlocation of your squad is x, you may move to x + 1 or to x - 1 with your\r\nsquad in one second. You may not perform this action if it puts some\r\nsoldier in danger (i. e. the point your squad is moving into contains a\r\nnon-disarmed trap with d_i greater than agility of some soldier from the\r\nsquad). This action consumes one second; if your location is x and there\r\nis a trap i with r_i = x, you may disarm this trap. This action is done\r\ninstantly (it consumes no time). Note that after each action both your\r\ncoordinate and the coordinate of your squad should be integers.You have\r\nto choose the maximum number of soldiers such that they all can be\r\nbrought from the point 0 to the point n + 1 (where the boss waits) in no\r\nmore than t seconds.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n \nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\nint m, n, k, t;\nint A[200005];\nint L[200005];\nint R[200005];\nint D[200005];\n\nint ok(int x) {\n    int a = A[m - x];\n    vector<pii> P;\n    for (int i = 1; i <= k; i++) {\n        if (D[i] <= a) continue;\n        P.emplace_back(L[i], R[i]);\n    }\n    sort(P.begin(), P.end());\n    int sum = 0, ed = 0;\n    for (auto i : P) {\n        if (i.second <= ed) continue;\n        if (ed < i.first) ed = i.first - 1;\n        sum += i.second - ed;\n        ed = i.second;\n    }\n    ll need = (n + 1) + sum * 2ll;\n    return need <= t;\n}\n\nint main() {\n    scanf(\"%d %d %d %d\", &m, &n, &k, &t);\n    for (int i = 0; i < m; i++) scanf(\"%d\", &A[i]);\n    for (int i = 1; i <= k; i++) {\n        scanf(\"%d %d %d\", &L[i], &R[i], &D[i]);\n    }\n    sort(A, A + m);\n    int st = 0, ed = m;\n    while (st < ed) {\n        int md = st + ed + 1 >> 1;\n        if (ok(md)) st = md;\n        else ed = md - 1;\n    }\n    printf(\"%d\\n\", st);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "sortings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. A Game with Traps.json",
    "editorial_link": "https://codeforces.com//blog/entry/71805",
    "editorial": "When we fix a set of soldiers, we can determine a set of traps that may\r\naffect our squad: these are the traps with danger level greater than the\r\nlowest agility value. So we can use binary search on minimum possible\r\nagility of a soldier that we can choose.How should we actually bring our\r\nsoldiers to the boss? Each trap that can affect our squad can be\r\nactually treated as a segment such that our squad cannot move to until\r\nwe move to and disarm this trap. We should walk through such segments\r\nfor three times: the first time we walk forwards without our squad to\r\ndisarm the trap, the second time we walk backwards to return to our\r\nsquad, and the third time we walk forwards with our squad. So the total\r\ntime we have to spend can be calculated as , where is the number of unit\r\nsegments belonging to at least one trap-segment and it can be calculated\r\nwith event processing algorithms or with segment union.Time complexity\r\nis or , but it is possible to write a solution in without binary search.\r\n"
}