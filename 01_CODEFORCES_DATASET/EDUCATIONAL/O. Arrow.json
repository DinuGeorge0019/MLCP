{
    "link": "https://codeforces.com//contest/630/problem/O",
    "problemId": "48800",
    "problem_idx": "O",
    "shortId": "630O",
    "contest_number": "630",
    "problem_submissions": {
        "O": [
            16162903,
            16166611,
            16170272,
            16171000,
            16171810,
            16171540,
            16172283,
            16173069,
            16167245,
            16171219,
            16164343,
            16169317,
            16174467,
            16172825
        ],
        "Q": [
            16161959,
            16164291,
            16168164,
            16164256,
            16165332,
            16161924,
            16168611,
            16169122,
            16169587,
            16167987,
            16169984,
            16166498,
            16167531,
            16170624
        ],
        "P": [
            16159753,
            16168311,
            16167051,
            16167988,
            16168847,
            16164766,
            16173513,
            16170710,
            16173871,
            16179782,
            16173109,
            16173490,
            16172784,
            16177565
        ],
        "M": [
            16155509,
            16162573,
            16165539,
            16162684,
            16162420,
            16167688,
            16166121,
            16164621,
            16163626,
            16164560,
            16162370,
            16165223,
            16164963,
            16163595
        ],
        "E": [
            16152380,
            16160619,
            16161712,
            16147294,
            16175954,
            16175750,
            16175431,
            16166073,
            16169901,
            16175945,
            16147341,
            16150297,
            16152724,
            16177249
        ],
        "N": [
            16151590,
            16153799,
            16151528,
            16157513,
            16146949,
            16155784,
            16150975,
            16151370,
            16158313,
            16151633,
            16163001,
            16163835,
            16162449,
            16154984
        ],
        "R": [
            16151159,
            16154632,
            16149854,
            16156275,
            16152605,
            16151989,
            16161091,
            16150805,
            16162196,
            16170548,
            16164486,
            16157270
        ],
        "K": [
            16150889,
            16150119,
            16148623,
            16153831,
            16147112,
            16154207,
            16149001,
            16147948,
            16151167,
            16150379,
            16157788,
            16162488,
            16148339,
            16146783
        ],
        "J": [
            16149936,
            16145918,
            16144654,
            16150906,
            16145412,
            16145798,
            16147365,
            16144163,
            16149421,
            16146206,
            16155219,
            16146266,
            16145884,
            16145928
        ],
        "I": [
            16149446,
            16159581,
            16153928,
            16168967,
            16155732,
            16149794,
            16155421,
            16153120,
            16161689,
            16156527,
            16159462
        ],
        "H": [
            16148788,
            16153028,
            16147725,
            16150057,
            16150523,
            16147874,
            16147074,
            16150571,
            16153180,
            16152828,
            16155334
        ],
        "G": [
            16145821,
            16151098,
            16146735,
            16149212,
            16151570,
            16153204,
            16152288,
            16148784,
            16152025,
            16152257,
            16151581
        ],
        "F": [
            16145172,
            16147675,
            16146138,
            16147927,
            16145028,
            16146758,
            16146367,
            16146858,
            16150133,
            16146605,
            16150882,
            16147502
        ],
        "D": [
            16144568,
            16145159,
            16145434,
            16145697,
            16147726,
            16145377,
            16150271,
            16145822,
            16145733,
            16147562,
            16145418,
            16150369,
            16148886,
            16145271
        ],
        "C": [
            16144140,
            16145561,
            16144178,
            16144987,
            16144428,
            16144887,
            16145346,
            16144900,
            16145360,
            16145353,
            16144827,
            16144860,
            16145310,
            16144685
        ],
        "B": [
            16143836,
            16144446,
            16145107,
            16269732,
            16144253,
            16144142,
            16144388,
            16144927,
            16144633,
            16144917,
            16144673,
            16144408,
            16144556,
            16144704,
            16144100
        ],
        "A": [
            16143484,
            16143767,
            16143487,
            16143551,
            16143694,
            16143671,
            16143921,
            16143662,
            16143576,
            16143506,
            16143977,
            16143785,
            16143578,
            16143548,
            16143505
        ],
        "L": [
            16156555,
            16156947,
            16160816,
            16157607,
            16162858,
            16158499,
            16154525,
            16148850,
            16158336,
            16159403,
            16163163,
            16162239
        ]
    },
    "name": "O. Arrow",
    "statement": "Petya has recently started working as a programmer in the IT city\r\ncompany that develops computer games.Besides game mechanics\r\nimplementation to create a game it is necessary to create tool programs\r\nthat can be used by game designers to create game levels. Petya’s first\r\nassignment is to create a tool that allows to paint different arrows on\r\nthe screen.A user of this tool will choose a point on the screen,\r\nspecify a vector (the arrow direction) and vary several parameters to\r\nget the required graphical effect. In the first version of the program\r\nPetya decided to limit parameters of the arrow by the following: a point\r\nwith coordinates , a nonzero vector with coordinates , positive scalars\r\n.The produced arrow should have the following properties. The arrow\r\nconsists of a triangle and a rectangle. The triangle is isosceles with\r\nbase of length and altitude of length perpendicular to the base. The\r\nrectangle sides lengths are and . Point is situated in the middle of the\r\ntriangle base and in the middle of side of rectangle that has length .\r\nArea of intersection of the triangle and the rectangle is zero. The\r\ndirection from point to the triangle vertex opposite to base containing\r\nthe point coincides with direction of vector.Enumerate the arrow points\r\ncoordinates in counter-clockwise order starting from the tip.\r\n",
    "solutions": [
        "/**\n *    author:  enot.1.10, Vladimir Smykalov ([email protected])\n *    created: 18.02.2016 18:45:12       \n**/\n#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\n#define F first\n#define S second\n#define pb push_back\n#define mp make_pair\n#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)\n#define eprintf(...) fprintf(stderr, __VA_ARGS__),fflush(stderr)\n#define sz(a) ((int)(a).size())\n#define all(a) (a).begin(),a.end()\n#define pw(x) (1LL<<(x))\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef double dbl;\ntypedef vector<int> vi;\ntypedef pair<int, int> pi;\n\nconst int inf = (int)1.01e9;\nconst dbl eps = 1e-9;\n\n/* --- main part --- */\n\n#define TASK \"1\"\n\nnamespace point_output\n{\n    static char buf[8][30];\n    static int bufc = 0;\n}\n\nstruct pt\n{\n    dbl x, y;\n    pt() {}\n    pt(dbl xx, dbl yy): x(xx), y(yy) {}\n\n    void read()\n    {\n        double xx, yy;\n        scanf(\"%lf%lf\", &xx, &yy);\n        x = xx, y = yy;\n    }\n    void draw(int color = 0) const\n    {\n        printf(\"point %.4lf %.4lf %d\\n\", (double)x, (double)y, color);\n    }\n    void out() const\n    {\n        eprintf(\"(%.4lf, %.4lf)\\n\", (double)x, (double)y);\n    }\n    char* str() const\n    {\n        using namespace point_output;\n        bufc = (bufc + 1) & 7;\n        sprintf(buf[bufc], \"%.10lf %.10lf\", (double)x, (double)y);\n        return buf[bufc];\n    }\n};\n\ninline pt operator + (pt const &p1, pt const &p2) { return pt(p1.x + p2.x, p1.y + p2.y); }\ninline pt operator - (pt const &p1, pt const &p2) { return pt(p1.x - p2.x, p1.y - p2.y); }\ninline pt operator * (pt const &p, dbl c) { return pt(p.x * c, p.y * c); }\ninline pt operator * (dbl c, pt const &p) { return pt(p.x * c, p.y * c); }\ninline pt operator / (pt const &p, dbl c) { return pt(p.x / c, p.y / c); }\n\ninline dbl vect(pt const &p1, pt const &p2) { return p1.x * p2.y - p1.y * p2.x; }\ninline dbl scal(pt const &p1, pt const &p2) { return p1.x * p2.x + p1.y * p2.y; }\ninline dbl len(pt const &p) { return sqrt(p.x * p.x + p.y * p.y); }\n\ninline dbl dist(pt const &p1, pt const &p2)\n{\n    dbl xx = p1.x - p2.x;\n    dbl yy = p1.y - p2.y;\n    return sqrt(xx * xx + yy * yy);\n}\n\ninline bool operator < (pt const &p1, pt const &p2) { return p1.x < p2.x - eps || (abs(p1.x - p2.x) < eps && p1.y < p2.y - eps); }\ninline bool operator > (pt const &p1, pt const &p2) { return p1.x > p2.x + eps || (abs(p1.x - p2.x) < eps && p1.y > p2.y + eps); }\ninline bool operator == (pt const &p1, pt const &p2) { return abs(p1.x - p2.x) < eps && abs(p1.y - p2.y) < eps; }\n\n\nstruct line\n{\n    dbl a, b, c;\n    line() {}\n    line(dbl aa, dbl bb, dbl cc): a(aa), b(bb), c(cc) {}\n    line(pt const &p1, pt const &p2)\n    {\n        a = p1.y - p2.y;\n        b = p2.x - p1.x;\n        c = p1.x * p2.y - p1.y * p2.x;\n    }\n    inline dbl operator () (pt const &p) const\n    {\n        return a * p.x + b * p.y + c;\n    }\n    void norm()\n    {\n        dbl dd = sqrt(a * a + b * b);\n        a /= dd;\n        b /= dd;\n        c /= dd;\n    }    \n    void draw(int color = 0) const\n    {\n        printf(\"line %.4lf %.4lf %.4lf %d\\n\", (double)a, (double)b, (double)c, color);\n    }\n    void out() const\n    {\n        eprintf(\"(%.4lf, %.4lf, %.4lf)\\n\", (double)a, (double)b, (double)c);\n    }\n};\n\ninline pt intersect(line const &l1, line const &l2)\n{\n    dbl D = l1.a * l2.b - l1.b * l2.a;\n    return pt((l1.b * l2.c - l2.b * l1.c) / D,\n              (l1.a * l2.c - l2.a * l1.c) / (-D));\n}\n\ninline pt proj(pt const &p, line const &l)\n{   \n    return p - pt(l.a, l.b) * (l(p) / sqrt(l.a * l.a + l.b * l.b));\n}\n\ninline dbl dist(pt const &p, line const &l) { return abs(l(p) / sqrt(l.a * l.a + l.b * l.b)); }\ninline dbl dist(line const &l, pt const &p) { return abs(l(p) / sqrt(l.a * l.a + l.b * l.b)); }\n  \n\n\nconst dbl PI = acos(-1);\n\nint n, r;\n\npt get(int i)\n{\n    dbl alp = 2 * PI * i / n;\n    return pt(cos(alp) * r, sin(alp) * r);\n}\n\nvoid out(pt p)\n{\n    printf(\"%.10f %.10f\\n\", p.x, p.y);\n}\n\nint main()\n{\n    #ifdef home\n        assert(freopen(TASK\".in\", \"r\", stdin));\n        assert(freopen(TASK\".out\", \"w\", stdout));\n    #endif\n    pt P, V;\n    P.read();\n    V.read();\n    dbl a, b, c, d;\n    cin >> a >> b >> c >> d;\n\n    V = V * (1. / len(V));\n    pt V2 = pt(-V.y, V.x);\n    \n    out(P + V * b);\n    out(P + V2 * (a / 2));\n    out(P + V2 * (c / 2));\n    out(P + V2 * (c / 2) - V * d);\n    out(P - V2 * (c / 2) - V * d);\n    out(P - V2 * (c / 2));\n    out(P - V2 * (a / 2));\n\n\n    #ifdef home\n        eprintf(\"Time: %d ms\\n\", (int)(clock() * 1000. / CLOCKS_PER_SEC));\n    #endif\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\O. Arrow.json",
    "editorial_link": "https://codeforces.com//blog/entry/23604?locale=en",
    "editorial": "To get a vector of the given length b in the direction of the given vector (vx,?vy) it is just required to normalize the given vector (divide it by its length) and then multiply by b.\n\nLet's denote , vnx?=?vx?/?len, vny?=?vy?/?len. Then (vnx,?vny) is the normalized vector, and the first point of the arrow is (px?+?vnx·b,?py?+?vny·b).\n\nTo get the second point of the arrow one needs to rotate the normalized vector 90 degrees counter-clockwise and then multiply by the half of the triangle base a?/?2. Let's denote vlx?=??-?vny,?vly?=?vnx. Then (vlx,?vly) is the normalized vector 90 degrees counter-clockwise to (vnx,?vny). So the second point of the arrow is (px?+?vlx·a?/?2,?py?+?vly·a?/?2).\n\nThe third point can be found the same way as the second point but the length of the vector to it is c?/?2. So the third point of the arrow is (px?+?vlx·c?/?2,?py?+?vly·c?/?2).\n\nThe fourth point can be found by adding the vector of the length c?/?2 to the left of the given and the vector of the length d reverse to the given. So the fourth point of the arrow is (px?+?vlx·c?/?2?-?vnx·d,?py?+?vly·c?/?2?-?vny·d).\n\nThe remaining points are symmetrical to the points discussed above so they can be obtained the same way, just using minus for (vlx,?vly) instead of plus. So the next points are (px?-?vlx·c?/?2?-?vnx·d,?py?-?vly·c?/?2?-?vny·d), (px?-?vlx·c?/?2,?py?-?vly·c?/?2), (px?-?vlx·a?/?2,?py?-?vly·a?/?2).",
    "hint": []
}