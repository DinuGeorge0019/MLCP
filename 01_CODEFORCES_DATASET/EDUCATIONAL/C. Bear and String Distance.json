{"link": "https://codeforces.com//contest/628/problem/C", "problemId": "48825", "problem_idx": "C", "shortId": "628C", "contest_number": "628", "problem_submissions": {"F": [16211421, 16211567, 16211169, 16208042, 16208527, 16211299, 16220786, 16205726, 16251882, 16212235, 16209081, 16210918, 16211253], "E": [16209151, 16209513, 16209798, 16210303, 16210389, 16210209, 16207914, 16208921, 16208930, 16210016, 16208755, 16210104, 16210071, 16211325, 16211040, 16210904, 16210538, 16209234, 16210698, 16210531, 16214256], "D": [16206627, 16206845, 16206086, 16207092, 16208100, 16205719, 16205288, 16206076, 16260286, 16206980, 16206584, 16206673, 16206619, 16207592, 16206640, 16380499, 16206826, 16207654], "C": [16204024, 16203998, 16203984, 16204943, 16204160, 16203580, 16204456, 16203644, 16203472, 16204820, 16204285, 16204239, 16203927, 16204552, 16204730, 16203693, 16204713, 16204672], "B": [16203509, 16203431, 16203495, 16204395, 16203326, 16203172, 16204023, 16203232, 16203233, 16204126, 16203462, 16203612, 16203325, 16203859, 16203731, 16203308, 16203766, 16203989], "A": [16203031, 16203135, 16203205, 16203772, 16203048, 16203023, 16203022, 16203045, 16203001, 16203771, 16203077, 16203193, 16203044, 16203133, 16203132, 16203092, 16203204, 16203389]}, "name": "C. Bear and String Distance", "statement": "Limak is a little polar bear. He likes strings strings of length ,\r\nconsisting of lowercase English letters only.The distance between two\r\nletters is defined as the difference between their positions in the\r\nalphabet. For example, , and .Also, the distance between two nice\r\nstrings is defined as the sum of distances of corresponding letters. For\r\nexample, , and .Limak gives you a nice string and an integer . He\r\nchallenges you to find any nice string that . Find any satisfying the\r\ngiven conditions, or print \"\" if it\u2019s impossible to do so.As\r\ninput/output can reach huge size it is recommended to use fast\r\ninput/output methods: for example, prefer to use instead of in C++,\r\nprefer to use instead of in .\r\n", "solutions": ["#ifdef __GNUC__\n#pragma GCC target(\"sse4,avx\")\n#endif\n#include <immintrin.h>\n#include <algorithm>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <cstdint>\n#include <numeric>\n\nvoid run(std::istream &in, std::ostream &out) {\n  int n, k;\n  in >> n >> k;\n  std::string s;\n  in >> s;\n  int maxValue = 0;\n  for (int i = 0; i < s.length(); i++) {\n    maxValue += std::max(s[i] - 'a', 'z' - s[i]);\n  }\n  if (maxValue < k) {\n    out << \"-1\" << std::endl;\n    return;\n  }\n  std::string t;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] - 'a' > 'z' - s[i]) {\n      int d = std::min(s[i] - 'a', k);\n      k -= d;\n      t.push_back(s[i] - d);\n    } else {\n      int d = std::min('z' - s[i], k);\n      k -= d;\n      t.push_back(s[i] + d);\n    }\n  }\n  out << t << std::endl;\n}\n\nint main() {\n  std::cin.sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  run(std::cin, std::cout);\n  return 0;\n}"], "input": "", "output": "", "tags": ["greedy", "strings"], "dificulty": "1300", "interactive": false}