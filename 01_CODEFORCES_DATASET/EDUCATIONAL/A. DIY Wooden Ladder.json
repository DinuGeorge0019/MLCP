{
    "link": "https://codeforces.com//contest/1197/problem/A",
    "problemId": "376702",
    "problem_idx": "A",
    "shortId": "1197A",
    "contest_number": "1197",
    "problem_submissions": {
        "E": [
            57531154,
            57527419,
            57524743,
            57530013,
            57536981,
            57526074,
            57537246,
            57517565,
            57532671,
            57531296,
            57535739,
            57533494,
            57533139,
            57532015,
            57531974,
            57534465,
            57537214,
            57536595,
            57532983,
            57537941
        ],
        "F": [
            57526205,
            57536510,
            57543227,
            57542356,
            57545070,
            57550429,
            57543354,
            57546681,
            57528127,
            57549295,
            57552678,
            57550308,
            57548615,
            57551319,
            57581907,
            57549488,
            57548121,
            57552168,
            57768625,
            57596008
        ],
        "D": [
            57517769,
            57521167,
            57531349,
            57521225,
            57523524,
            57536466,
            57530751,
            57531287,
            57521039,
            57522693,
            57521081,
            57524029,
            57524614,
            57523599,
            57524677,
            65550218,
            65550195,
            57524514,
            57523363,
            57524805,
            57525867,
            57524276
        ],
        "C": [
            57514645,
            57521161,
            57515560,
            57517240,
            57519467,
            57517149,
            57517926,
            57531832,
            57516648,
            57519324,
            57516744,
            57516779,
            57517866,
            57515185,
            57519335,
            57518781,
            57516998,
            57518983,
            57516506,
            57517063
        ],
        "B": [
            57513686,
            57521152,
            57513883,
            57515172,
            57516705,
            57515562,
            57515187,
            57532696,
            57515047,
            57517088,
            57514854,
            57515032,
            57514991,
            57513966,
            57514537,
            57515780,
            57514347,
            57514964,
            57514669,
            57515319
        ],
        "A": [
            57513085,
            57521143,
            57513101,
            57513203,
            57513756,
            57513671,
            57513230,
            57532141,
            57513274,
            57513512,
            57513153,
            57513271,
            57513173,
            57513091,
            57513126,
            57513220,
            57513223,
            57513310,
            57513141,
            57513251
        ]
    },
    "name": "A. DIY Wooden Ladder",
    "statement": "Let’s denote a k-step ladder as the following structure: exactly k + 2\r\nwooden planks, of which two planks of length k+1 the base of the ladder;\r\nk planks of length 1 the steps of the ladder; Note that neither the base\r\nplanks, nor the steps planks are required to be equal.For example,\r\nladders 1 and 3 are correct 2-step ladders and ladder 2 is a correct\r\n1-step ladder. On the first picture the lengths of planks are [3, 3] for\r\nthe base and [1] for the step. On the second picture lengths are [3, 3]\r\nfor the base and [2] for the step. On the third picture lengths are [3,\r\n4] for the base and [2, 3] for the steps. You have n planks. The length\r\nof the i-th planks is a_i. You don’t have a saw, so you can’t cut the\r\nplanks you have. Though you have a hammer and nails, so you can assemble\r\nthe improvised \"ladder\" from the planks.The question is: what is the\r\nmaximum number k such that you can choose some subset of the given\r\nplanks and assemble a k-step ladder using them?\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <queue>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, int> pli;\ntypedef pair<ll, ll> pll;\ntypedef long double ld;\n#define mp make_pair\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\nconst int N = 100100;\nint n;\nint a[N];\n\nvoid solve() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%d\", &a[i]);\n\tsort(a, a + n);\n\tint k = a[n - 2] - 1;\n\tk = min(k, n - 2);\n\tprintf(\"%d\\n\", k);\n}\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) solve();\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. DIY Wooden Ladder.json",
    "editorial_link": "https://codeforces.com/blog/entry/68615",
    "editorial": "Since all planks have length at least so we can take any planks as\r\nsteps. So, all we need is to maximize the length of base planks. We can\r\ntake the first and second maximum as base, then the answer is minimum\r\namong second maximum - 1 and .\r\n",
    "hint": []
}