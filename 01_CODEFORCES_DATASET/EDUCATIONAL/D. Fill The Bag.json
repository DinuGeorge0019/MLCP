{
    "link": "https://codeforces.com//contest/1303/problem/D",
    "problemId": "538603",
    "problem_idx": "D",
    "shortId": "1303D",
    "contest_number": "1303",
    "problem_submissions": {
        "G": [
            71097266,
            70883386,
            70955431,
            70955302,
            71079595,
            71079587,
            71079399,
            71079349,
            71033664,
            70936374,
            70936308,
            70936214,
            70880989,
            70891160,
            70926122,
            70886272,
            71216890,
            71204250,
            70902620,
            71200015,
            70940169,
            71279910,
            70899562,
            71278035,
            70896282,
            70900541,
            70900494
        ],
        "F": [
            71044888,
            71044744,
            70899994,
            70890051,
            70888815,
            70932923,
            70932898,
            70932421,
            70932306,
            70932207,
            70932013,
            70931555,
            70915800,
            70904497,
            70912908,
            70884185,
            138818627,
            70892348,
            70886515,
            70891950,
            71199846,
            70884407,
            70897531,
            70893903,
            70894963,
            70893107,
            70925189,
            70924800,
            70897907
        ],
        "E": [
            70868559,
            70868408,
            70868922,
            70872692,
            70869150,
            70869901,
            70874174,
            70872386,
            70874403,
            70875550,
            71199810,
            70873171,
            70863746,
            70871476,
            70905263,
            70869281,
            70875226,
            70874988,
            70881045,
            70874968,
            70882383,
            70877044
        ],
        "D": [
            70863251,
            70862650,
            70863288,
            70862684,
            70865048,
            70865462,
            70867179,
            70866583,
            70869772,
            70868436,
            71199774,
            70869707,
            70873016,
            70865851,
            70862875,
            70869379,
            70868162,
            70869500,
            70869186,
            70873860,
            70869244
        ],
        "C": [
            70859686,
            70858172,
            70859652,
            70865909,
            70861024,
            70860138,
            70862819,
            70861003,
            70864530,
            70863875,
            71199753,
            70865732,
            70856962,
            70860948,
            70858736,
            70863123,
            70860398,
            70864062,
            70861729,
            70862531,
            70860453
        ],
        "B": [
            70855213,
            70854594,
            70853630,
            70935416,
            70856554,
            70855070,
            70861321,
            70855979,
            70856395,
            70857261,
            70857192,
            71199724,
            70861383,
            70852833,
            70856458,
            70855360,
            70857332,
            70856143,
            70857430,
            70853208,
            70856253,
            70853781
        ],
        "A": [
            70849936,
            70850631,
            70849990,
            70849934,
            70850041,
            70849959,
            70849980,
            70850863,
            70852663,
            70850352,
            71199700,
            70859542,
            70849914,
            70851564,
            70849996,
            70851983,
            70850145,
            70850480,
            70850071,
            70850741,
            70850778
        ]
    },
    "name": "D. Fill The Bag",
    "statement": "You have a bag of size n. Also you have m boxes. The size of i-th box is\r\na_i, where each a_i is an integer non-negative power of two.You can\r\ndivide boxes into two parts of equal size. Your goal is to fill the bag\r\ncompletely.For example, if n = 10 and a = [1, 1, 32] then you have to\r\ndivide the box of size 32 into two parts of size 16, and then divide the\r\nbox of size 16. So you can fill the bag with boxes of size 1, 1 and\r\n8.Calculate the minimum number of divisions required to fill the bag of\r\nsize n.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll long long\n#define ar array\n\nll n;\nll m, c[61];\n\nvoid solve() {\n\tcin >> n >> m;\n\tmemset(c, 0, sizeof(c));\n\tll s=0;\n\tfor(int i=0, a; i<m; ++i) {\n\t\tcin >> a;\n\t\ts+=a;\n\t\t++c[31-__builtin_clz(a)];\n\t}\n\tif(s<n) {\n\t\tcout << \"-1\\n\";\n\t\treturn;\n\t}\n\tint ans=0;\n\tfor(int i=0; i<60; ++i) {\n\t\tif(n>>i&1) {\n\t\t\tif(!c[i]) {\n\t\t\t\tint j=i+1;\n\t\t\t\twhile(!c[j])\n\t\t\t\t\t++j;\n\t\t\t\t--c[j];\n\t\t\t\twhile(--j>=i) {\n\t\t\t\t\t++c[j];\n\t\t\t\t\t++ans;\n\t\t\t\t}\n\t\t\t\t++c[i];\n\t\t\t}\n\t\t\t--c[i];\n\t\t}\n\t\tc[i+1]+=c[i]/2;\n\t}\n\tcout << ans << \"\\n\";\n}\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\n\tint t;\n\tcin >> t;\n\twhile(t--)\n\t\tsolve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "greedy"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Fill The Bag.json",
    "editorial_link": "https://codeforces.com//blog/entry/73872",
    "editorial": "If , then the answer is , because the just can divide all boxes to size\r\nand then fill the bag. Otherwise the answer is .If the answer is , letâs\r\ncalculate the minimum number of divisions. Letâs consider all boxes from\r\nsmall to large. Presume that now we consider boxes of size . Then there\r\nare three cases: if in binary representation of the -th bit is equal to\r\n, then we donât need boxes of size and we can merge it into boxes of\r\nsize ; if in binary representation of the -th bit is equal to and we\r\nhave at most one box of size , then we have to put it box in the bag and\r\nthen merge the remaining boxes of size into boxes of size ; if in binary\r\nrepresentation of the -th bit is equal to and we have not boxes of size\r\n, then we have to divide the large box into box of size (letâs presume\r\nthat itâs box of size ). After that we just continue this algorithm with\r\nbox of size .\r\n",
    "hint": []
}