{
    "link": "https://codeforces.com//contest/1354/problem/D",
    "problemId": "623447",
    "problem_idx": "D",
    "shortId": "1354D",
    "contest_number": "1354",
    "problem_submissions": {
        "G": [
            80502712,
            80500640,
            80479424,
            80521575,
            80514570,
            80507519,
            80516727,
            80506952,
            80522749,
            80517834
        ],
        "F": [
            80492752,
            80491818,
            80486741,
            80486733,
            80498606,
            80506559,
            80492000,
            80506147,
            80493453,
            80507365,
            80500930,
            80492368,
            80502196,
            80506705,
            80501348,
            80502603,
            80507003,
            80504378,
            80500666,
            80509209
        ],
        "E": [
            80478361,
            80481693,
            80494073,
            80473313,
            80489080,
            80489590,
            80500698,
            80489890,
            80484400,
            80477593,
            80478451,
            80492063,
            80495115,
            80483322,
            80494477,
            80486894,
            80494427,
            80491606,
            80488314
        ],
        "D": [
            80469519,
            80470691,
            80498555,
            80467168,
            80480497,
            80478286,
            80477445,
            80477111,
            80466399,
            80471019,
            80473056,
            80471601,
            80482362,
            80488495,
            80473238,
            80482948,
            80466995,
            80486731,
            80484796,
            80475358
        ],
        "C2": [
            80463522,
            80484245,
            80502970,
            80478908,
            80472069,
            80468985,
            80468689,
            80472664,
            80476619,
            80476720,
            80489656,
            80477361,
            80476069,
            80503667,
            80473397,
            80472911,
            80489616,
            80481827,
            80482549,
            80500296
        ],
        "C1": [
            80463378,
            80464968,
            80501505,
            80478534,
            80468463,
            80462050,
            80463990,
            80463377,
            80459508,
            80460645,
            80463967,
            80465199,
            80472341,
            80461193,
            80463170,
            80458830,
            80475032,
            80470173,
            80520837,
            80468845,
            80464138
        ],
        "B": [
            80454412,
            80455734,
            80504343,
            80456075,
            80456469,
            80457930,
            80459404,
            80456913,
            80454847,
            80456739,
            80454406,
            80455296,
            80457195,
            80455557,
            80457336,
            80455902,
            80456106,
            80460925,
            80455491,
            80455115
        ],
        "A": [
            80454037,
            80454106,
            80505746,
            80454365,
            80454427,
            80454271,
            80454716,
            80454697,
            80454135,
            80454424,
            80455156,
            80454027,
            80454887,
            80454126,
            80454558,
            80454452,
            80454285,
            80456834,
            80476438,
            80454206
        ]
    },
    "name": "D. Multiset",
    "statement": "You are given a multiset consisting of n integers. You have to process\r\nqueries of two types: add integer k into the multiset; find the k-th\r\norder statistics in the multiset and remove it. k-th order statistics in\r\nthe multiset is the k-th element in the sorted list of all elements of\r\nthe multiset. For example, if the multiset contains elements 1, 4, 2, 1,\r\n4, 5, 7, and k = 3, then you have to find the 3-rd element in [1, 1, 2,\r\n4, 4, 5, 7], which is 2. If you try to delete an element which occurs\r\nmultiple times in the multiset, only one occurence is removed. After\r\nprocessing all queries, print number belonging to the multiset, or say\r\nthat it is empty.\r\n",
    "solutions": [
        "#include <map>\n#include <set>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\nconst int lim = 1048576;\nint bit[1048588];\nvoid add(int pos, int val) {\n\tfor (int i = pos; i <= lim; i += i & (-i)) {\n\t\tbit[i] += val;\n\t}\n}\nint bsearch(int x) {\n\tif (x == 0) return 0;\n\tint ptr = 0;\n\tfor (int i = lim / 2; i >= 1; i >>= 1) {\n\t\tif (bit[ptr + i] < x) {\n\t\t\tx -= bit[ptr + i];\n\t\t\tptr += i;\n\t\t}\n\t}\n\treturn ptr + 1;\n}\nint main() {\n\tcin.tie(0);\n\tios_base::sync_with_stdio(false);\n\tint N, Q;\n\tcin >> N >> Q;\n\tfor (int i = 0; i < N; ++i) {\n\t\tint x;\n\t\tcin >> x;\n\t\tadd(x, 1);\n\t}\n\tint cnt = N;\n\tfor (int i = 0; i < Q; ++i) {\n\t\tint x;\n\t\tcin >> x;\n\t\tif (x >= 0) add(x, 1), ++cnt;\n\t\telse {\n\t\t\tint ptr = bsearch(-x);\n\t\t\tadd(ptr, -1);\n\t\t\t--cnt;\n\t\t}\n\t}\n\tif (cnt == 0) {\n\t\tcout << 0 << endl;\n\t}\n\telse {\n\t\tcout << bsearch(1) << endl;\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Multiset.json",
    "editorial_link": "https://codeforces.com//blog/entry/77593",
    "editorial": "First solution: write some data structure that would simulate the\r\noperations as they are given, for example, a segment tree or a Fenwick\r\ntree. Probably will require optimization since the limits are\r\nstrict.Second solution: notice that we have to find only one number\r\nbelonging to the multiset. For example, let\u00e2\u0080\u0099s find the minimum element.\r\nWe can do it with binary search as follows: let\u00e2\u0080\u0099s write a function that,\r\nfor a given element , tells the number of elements not greater than in\r\nthe resulting multiset. To implement it, use the fact that all elements\r\nare indistinguishable, and all elements are indistinguishable too, so\r\nthe multiset can be maintained with just two counters.Okay, how does\r\nthis function help? The minimum in the resulting multiset is the minimum\r\nsuch that this function returns non-zero for it, and since the function\r\nis monotonous, we can find the answer with binary search.\r\n"
}