{
    "link": "https://codeforces.com//contest/1976/problem/A",
    "problemId": "2672917",
    "problem_idx": "A",
    "shortId": "1976A",
    "contest_number": "1976",
    "problem_submissions": {
        "F": [
            263314410,
            263323534,
            263323690,
            263325512,
            263334653,
            263331007,
            263325411,
            263343899,
            263340351,
            263335929,
            263326828,
            263332991,
            263341073,
            263348258,
            263349127,
            263349457,
            263346381,
            263355969,
            263347175,
            263342030
        ],
        "E": [
            263305882,
            263313991,
            263310881,
            263312246,
            263315063,
            263311135,
            263313445,
            263315175,
            263343942,
            263328216,
            263320417,
            263320641,
            263323277,
            263324951,
            263331673,
            263329104,
            263324699,
            263325555,
            263316314,
            263328040,
            263331822
        ],
        "C": [
            263292519,
            263287752,
            263288751,
            263286876,
            263284054,
            263285532,
            263285507,
            263293215,
            263285305,
            263285884,
            263286170,
            263285744,
            263298002,
            263303206,
            263289650,
            263291396,
            263291844,
            263302664,
            263303154,
            263303039,
            263301515
        ],
        "D": [
            263292311,
            263298587,
            263366307,
            263299064,
            263295271,
            263295241,
            263295262,
            263303840,
            263298130,
            263292787,
            263298290,
            263306115,
            263312088,
            263291555,
            263300847,
            263305912,
            263364926,
            263302707,
            263310976,
            263298729,
            263311543,
            263313366
        ],
        "B": [
            263272017,
            263272271,
            263275878,
            263272612,
            263272889,
            263274173,
            263277739,
            263274170,
            263273861,
            263276359,
            263274099,
            263279892,
            263280435,
            263273730,
            263275861,
            263277331,
            263275586,
            263274544,
            263272648,
            263279232
        ],
        "A": [
            263268782,
            263268834,
            263269741,
            263268999,
            263269168,
            263269203,
            263269867,
            263269889,
            263269156,
            263268775,
            263269596,
            263270510,
            263268758,
            263268826,
            263268756,
            263270814,
            263269912,
            263269509,
            263268983,
            263270469
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129992",
    "editorial": "Thereâs no real idea in the problem, the main difficulty is the\r\nimplementation.Many programming languages have functions to check if a\r\ncharacter is a digit or if itâs a letter. They can be used to check that\r\nno digit follows a letter.How does the order check work? Well, most\r\nlanguages allow you to compare characters with inequality signs (so, we\r\nhave to check that for all corresponding separately for digits and\r\nletters). How does that work? Inside the language, every character is\r\nassigned a code. Thatâs called an ASCII table. It contains digits,\r\nletters and lots of other characters. And the less or equal check uses\r\nthat table.If you look at the table carefully, youâll notice that the\r\ndigits come before the lowercase Latin letters. Digits have codes from\r\n48 to 57 and the lowercase letters have codes from 97 to 122. Thus, you\r\ncan ignore the check that the digits come before the letters and just\r\nmake sure that all characters of the string (regardless of their types)\r\nand sorted in a non-decreasing order.For example, you can sort the\r\nstring and compare the result with the original string. If they are the\r\nsame, then the answer is \"\". Alternatively, you can use function if your\r\nlanguage has it.Overall complexity: or per testcase.\r\n",
    "name": "A. Verify Password",
    "statement": "Monocarp is working on his new site, and the current challenge is to\r\nmake the users pick strong passwords.Monocarp decided that strong\r\npasswords should satisfy the following conditions: password should\r\nconsist only of lowercase Latin letters and digits; there should be no\r\ndigit that comes after a letter (so, after each letter, there is either\r\nanother letter or the string ends); all digits should be sorted in the\r\nnon-decreasing order; all letters should be sorted in the non-decreasing\r\norder. Note that it’s allowed for the password to have only letters or\r\nonly digits.Monocarp managed to implement the first condition, but he\r\nstruggles with the remaining ones. Can you help him to verify the\r\npasswords?\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using i64 = long long; void solve() {    int n;    std::cin >> n;        std::string s;    std::cin >> s;        if (std::is_sorted(s.begin(), s.end())) {        std::cout << \"YES\\n\";    } else {        std::cout << \"NO\\n\";    }} int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "sortings",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Verify Password.json",
    "hint": []
}