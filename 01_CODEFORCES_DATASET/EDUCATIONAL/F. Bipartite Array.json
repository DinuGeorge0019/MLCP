{"link": "https://codeforces.com//contest/1620/problem/F", "problemId": "1233293", "problem_idx": "F", "shortId": "1620F", "contest_number": "1620", "problem_submissions": {"G": [139834723, 139834630, 139800025, 139798720, 139797780, 139795833, 139793177, 139797195, 139801753, 139800125, 139798252, 139806590, 139801965, 139799470, 139800885, 139815133, 139836989, 139836961, 139803234, 139783937, 139766371, 139781791, 198626640, 139785516, 139791910, 139794593, 139799506, 139797098, 139802371, 139794714], "E": [139834170, 139768900, 139778404, 139777262, 139781401, 139780307, 180264469, 139772320, 139783598, 139787731, 139788776, 139795635, 139801166, 139803161, 139771172, 139772982, 139775572, 139777494, 139781749, 139783689, 139782938, 139773708], "D": [139828795, 139828599, 139828445, 139801175, 139773916, 139773661, 139775200, 139772309, 139777532, 139778435, 139852816, 139778132, 139769927, 139780286, 139786796, 139790402, 139791529, 139805624, 139765400, 139770581, 139781836, 139766109, 139779076, 139774566, 139785166], "F": [139826678, 139786211, 139791869, 139787814, 139791341, 139788904, 139814807, 139811473, 139818294, 139801200, 139837073, 139811622, 139810717, 139801430, 139908478, 139834808, 139830354], "B": [139800559, 139758636, 139759221, 139759228, 139768929, 139762743, 139760389, 139791856, 139762557, 139759423, 139779986, 139793644, 139810932, 139757813, 139761675, 139760955, 139759416, 139760977, 139759368, 139760377], "C": [139765159, 139765932, 139765302, 139774145, 139773181, 207683198, 139765484, 139764863, 139771290, 139772950, 139784482, 139796217, 139807967, 139762141, 139766772, 139767896, 139775442, 139767619, 139767081, 139780353], "A": [139756564, 139756597, 139756503, 139756739, 139759409, 139756692, 139757881, 139756729, 139756611, 139777143, 139792512, 139812388, 139756396, 139756654, 139757129, 139756551, 139756903, 139756439, 139756571]}, "name": "F. Bipartite Array", "statement": "You are given a permutation p consisting of n integers 1, 2,\r\ndots, n (a permutation is an array where each element from 1 to n occurs\r\nexactly once).Let\u2019s call an array a if the following undirected graph is\r\nbipartite: the graph consists of n vertices; two vertices i and j are\r\nconnected by an edge if i < j and a_i > a_j. Your task is to find a\r\narray of integers a of size n, such that a_i = p_i or a_i = -p_i, or\r\nreport that no such array exists. If there are multiple answers, print\r\nany of them.\r\n", "solutions": ["#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <chrono>\n#include <cmath>\n#include <cstring>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <vector>\nusing namespace std;\n\n// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0200r0.html\ntemplate<class Fun> class y_combinator_result {\n    Fun fun_;\npublic:\n    template<class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}\n    template<class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); }\n};\ntemplate<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }\n\n\ntemplate<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }\ntemplate<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = \", \"; return os << '}'; }\n\nvoid dbg_out() { cerr << endl; }\ntemplate<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }\n#ifdef NEAL_DEBUG\n#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)\n#else\n#define dbg(...)\n#endif\n\ntemplate<typename T_vector>\nvoid output_vector(const T_vector &v, bool add_one = false, int start = -1, int end = -1) {\n    if (start < 0) start = 0;\n    if (end < 0) end = int(v.size());\n\n    for (int i = start; i < end; i++)\n        cout << v[i] + (add_one ? 1 : 0) << (i < end - 1 ? ' ' : '\\n');\n}\n\n\nconst int INF = int(1e9) + 5;\n\nstruct state {\n    int high = -INF, low = -INF;\n    int previous = -1, a = 0;\n\n    bool operator<(const state &other) const {\n        if (high != other.high)\n            return high < other.high;\n\n        return low < other.low;\n    }\n\n    pair<state, bool> add(int from, int x) {\n        if (x < low)\n            return {state(), false};\n\n        state sum = *this;\n        sum.previous = from;\n        sum.a = x;\n\n        if (x > high)\n            sum.high = x;\n        else\n            sum.low = x;\n\n        return {sum, true};\n    }\n};\n\nvoid run_case() {\n    int N;\n    cin >> N;\n    vector<int> P(N);\n\n    for (auto &p : P)\n        cin >> p;\n\n    vector<vector<state>> dp(N + 1);\n    dp[0] = {state()};\n\n    for (int i = 0; i < N; i++) {\n        for (int x : {-P[i], P[i]})\n            for (int j = 0; j < int(dp[i].size()); j++) {\n                state s = dp[i][j];\n                pair<state, bool> result = s.add(j, x);\n\n                if (result.second)\n                    dp[i + 1].push_back(result.first);\n            }\n\n        sort(dp[i + 1].begin(), dp[i + 1].end());\n        vector<state> filtered;\n\n        for (state s : dp[i + 1]) {\n            bool bad = false;\n\n            for (state f : filtered)\n                if (f.low <= s.low && f.high <= s.high)\n                    bad = true;\n\n            if (!bad)\n                filtered.push_back(s);\n        }\n\n        dp[i + 1] = filtered;\n    }\n\n    if (dp.back().empty()) {\n        cout << \"NO\" << '\\n';\n        return;\n    }\n\n    cout << \"YES\" << '\\n';\n    vector<int> A(N);\n    int index = 0;\n\n    for (int i = N - 1; i >= 0; i--) {\n        state s = dp[i + 1][index];\n        A[i] = s.a;\n        index = s.previous;\n    }\n\n    output_vector(A);\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n#ifndef NEAL_DEBUG\n    cin.tie(nullptr);\n#endif\n\n    int tests;\n    cin >> tests;\n\n    while (tests-- > 0)\n        run_case();\n}\n"], "input": "", "output": "", "tags": ["dp", "greedy"], "dificulty": "2800", "interactive": false}