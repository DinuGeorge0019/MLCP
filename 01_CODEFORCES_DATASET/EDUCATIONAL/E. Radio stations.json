{"link": "https://codeforces.com//contest/762/problem/E", "problemId": "90126", "problem_idx": "E", "shortId": "762E", "contest_number": "762", "problem_submissions": {"F": [24128800, 24127287, 24131448, 24128833, 24128590], "E": [24122771, 24123546, 24117007, 24124444, 24127665, 24127353, 24122694, 24124867, 24128194, 24130174, 24129986, 24129967, 24127255, 24123944, 24123747, 24128463, 24126253, 24117536, 24126607], "D": [24120216, 24117937, 24120594, 24123699, 24120899, 24122923, 24125654, 24122077, 24124440, 24123437, 24124479, 24129845, 64773611, 24129570, 24127415, 24125478, 24129569, 24125183, 24124387, 24117686], "C": [24117649, 24115665, 24118684, 24120038, 24118048, 24119412, 24117040, 24153774, 24117580, 24118699, 24120548, 24119249, 24120443, 24120966, 24122719, 24122392, 24134825, 24118679], "B": [24115242, 24114275, 24114874, 24121323, 24115338, 24115218, 24114366, 24115078, 24114616, 24115065, 24117965, 24115815, 24115613, 24116743, 24116439, 24116970, 24124581, 24115154, 24114842], "A": [24113787, 24113769, 24113819, 24114373, 24113802, 24113840, 24113765, 24113864, 24113822, 24115779, 24114962, 24114446, 24113882, 24114350, 24114566, 24114001, 24114912, 24113931, 24113786]}, "name": "E. Radio stations", "statement": "In the lattice points of the coordinate line there are radio stations,\r\nthe -th of which is described by three integers: the coordinate of the\r\n-th station on the line, the broadcasting range of the -th station, the\r\nbroadcasting frequency of the -th station. We will say that two radio\r\nstations with numbers and reach each other, if the broadcasting range of\r\neach of them is more or equal to the distance between them. In other\r\nwords .Let\u2019s call a pair of radio stations bad if , stations and reach\r\neach other and they are close in frequency, that is, .Find the number of\r\nbad pairs of radio stations.\r\n", "solutions": ["// eddy1021\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef double D;\ntypedef long double LD;\ntypedef long long LL;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\n#define mod9 1000000009LL\n#define mod7 1000000007LL\n#define INF  1023456789LL\n#define INF16 10000000000000000LL\n#define eps 1e-9\n#define SZ(x) (int)(x).size()\n#define ALL(x) (x).begin(), (x).end()\n#ifndef ONLINE_JUDGE\n#define debug(...) printf(__VA_ARGS__)\n#else \n#define debug(...)\n#endif\ninline LL getint(){\n  LL _x=0,_tmp=1; char _tc=getchar();    \n  while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();\n  if( _tc == '-' ) _tc=getchar() , _tmp = -1;\n  while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();\n  return _x*_tmp;\n}\ninline LL add( LL _x , LL _y , LL _mod = mod7 ){\n  _x += _y;\n  return _x >= _mod ? _x - _mod : _x;\n}\ninline LL sub( LL _x , LL _y , LL _mod = mod7 ){\n  _x -= _y;\n  return _x < 0 ? _x + _mod : _x;\n}\ninline LL mul( LL _x , LL _y , LL _mod = mod7 ){\n  _x *= _y;\n  return _x >= _mod ? _x % _mod : _x;\n}\nLL mypow( LL _a , LL _x , LL _mod ){\n  if( _x == 0 ) return 1LL;\n  LL _ret = mypow( mul( _a , _a , _mod ) , _x >> 1 , _mod );\n  if( _x & 1 ) _ret = mul( _ret , _a , _mod );\n  return _ret;\n}\nLL mymul( LL _a , LL _x , LL _mod ){\n  if( _x == 0 ) return 0LL;\n  LL _ret = mymul( add( _a , _a , _mod ) , _x >> 1 , _mod );\n  if( _x & 1 ) _ret = add( _ret , _a , _mod );\n  return _ret;\n}\ninline bool equal( D _x ,  D _y ){\n  return _x > _y - eps && _x < _y + eps;\n}\n#define Bye exit(0)\nint __ = 1 , _cs;\n/*********default*********/\n#define N 101010\nstruct Nd{\n  int sum , tl , tr;\n  Nd(){\n    sum = tl = tr = 0;\n  }\n} nd[ N * 30 * 4 ];\nint nid;\nint new_node(){ return ++ nid; }\ninline int Sum( int x ){\n  return x ? nd[ x ].sum : 0;\n}\n#define mid ((l+r)>>1)\nvoid modify( int now , int l , int r , int p ){\n  if( l == r ){\n    nd[ now ].sum ++;\n    return;\n  }\n  if( p <= mid ){\n    if( !nd[ now ].tl )\n      nd[ now ].tl = new_node();\n    modify( nd[ now ].tl , l , mid , p );\n  }else{\n    if( !nd[ now ].tr )\n      nd[ now ].tr = new_node();\n    modify( nd[ now ].tr , mid + 1 , r , p );\n  }\n  nd[ now ].sum = Sum( nd[ now ].tl ) + Sum( nd[ now ].tr );\n}\nint query( int now , int l , int r , int ql , int qr ){\n  if( !now || r < ql || l > qr ) return 0;\n  if( ql <= l && r <= qr ) return nd[ now ].sum;\n  return query( nd[ now ].tl , l , mid , ql , qr ) +\n         query( nd[ now ].tr , mid + 1 , r , ql , qr );\n}\nint rt[ 10101 ];\nvoid build(){\n\n}\nint n , k , maxx , maxf;\nvector< pair<int,pair<int,int> > > v;\nvoid init(){\n  n = getint();\n  k = getint();\n  for( int i = 0 ; i < n ; i ++ ){\n    int xi = getint();\n    int ri = getint();\n    int fi = getint();\n    maxx = max( maxx , xi );\n    maxf = max( maxf , fi );\n    v.push_back( { ri , { xi , fi } } );\n  }\n}\nvoid solve(){\n  sort( v.begin() , v.end() );\n  reverse( v.begin() , v.end() );\n  LL ans = 0;\n  for( auto i : v ){\n    int nr = i.first;\n    int nx = i.second.first;\n    int nf = i.second.second;\n    int lx = max( 1 , nx - nr ) , rx = min( maxx , nx + nr );\n    int lf = max( 1 , nf - k ) , rf = min( maxf , nf + k );\n    for( int j = lf ; j <= rf ; j ++ )\n      ans += query( rt[ j ] , 1 , maxx , lx , rx );\n    if( !rt[ nf ] ) rt[ nf ] = new_node();\n    modify( rt[ nf ] , 1 , maxx , nx );\n    //printf( \"r=%d x=%d f=%d : ans=%lld\\n\" , nr , nx , nf , ans );\n  }\n  printf( \"%lld\\n\" , ans );\n}\nint main(){\n  build();\n  //__ = getint();\n  while( __ -- ){\n    init();\n    solve();\n  }\n}\n"], "input": "", "output": "", "tags": ["binary search", "data structures"], "dificulty": "2200", "interactive": false}