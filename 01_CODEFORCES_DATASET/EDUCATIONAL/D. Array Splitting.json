{
    "link": "https://codeforces.com//contest/1175/problem/D",
    "problemId": "354216",
    "problem_idx": "D",
    "shortId": "1175D",
    "contest_number": "1175",
    "problem_submissions": {
        "E": [
            55152697,
            55143297,
            55144842,
            55149453,
            55145090,
            55152529,
            55156277,
            55145238,
            55141766,
            55151809,
            55150612,
            55150119,
            55150752,
            55156812,
            55152738,
            55154944,
            55150125,
            55154652,
            55158266,
            55163765
        ],
        "F": [
            55143004,
            55151795,
            55152215,
            55142312,
            55154601,
            55143715,
            55151506,
            55166103,
            55151247,
            55162817,
            55160160,
            55154302,
            55159983,
            55153216,
            55161466,
            55160616,
            55159270,
            55167756,
            76726554,
            55159045
        ],
        "D": [
            55137941,
            55140293,
            55140750,
            55145972,
            55139564,
            55144646,
            55138002,
            55141894,
            55136780,
            55138695,
            55141164,
            55144507,
            55139116,
            55139569,
            55142712,
            55138367,
            55143330,
            55142605,
            55147375,
            55147140
        ],
        "C": [
            55134609,
            55137594,
            55139019,
            55137598,
            55135791,
            55137314,
            55136601,
            55136692,
            55135046,
            55136312,
            55137446,
            55142893,
            55137610,
            55138266,
            55140998,
            55137003,
            55146366,
            55138295,
            55140586,
            55141407
        ],
        "B": [
            55132016,
            55133684,
            55136306,
            55134307,
            55133707,
            55134207,
            55135033,
            55133685,
            55171853,
            55133665,
            55137967,
            55138315,
            55133858,
            55138192,
            55135842,
            55133934,
            55137057,
            55134510,
            55135402,
            55137596
        ],
        "A": [
            55129715,
            55129741,
            55129684,
            55129658,
            55129917,
            55129679,
            55130628,
            55129791,
            55130186,
            55130042,
            55129731,
            55135937,
            55130056,
            55130398,
            55129926,
            55129655,
            55132057,
            55130203,
            55131132,
            55132516
        ],
        "G": [
            55169838,
            55219359,
            58237199,
            55161904,
            55163020
        ]
    },
    "name": "D. Array Splitting",
    "statement": "You are given an array a_1, a_2,\r\ndots, a_n and an integer k.You are asked to divide this array into k\r\nnon-empty consecutive subarrays. Every element in the array should be\r\nincluded in exactly one subarray. Let f(i) be the index of subarray the\r\ni-th element belongs to. Subarrays are numbered from left to right and\r\nfrom 1 to k.Let the cost of division be equal to\r\nsum\r\nlimits_{i=1}^{n} (a_i\r\ncdot f(i)). For example, if a = [1, -2, -3, 4, -5, 6, -7] and we divide\r\nit into 3 subbarays in the following way: [1, -2, -3], [4, -5], [6, -7],\r\nthen the cost of division is equal to 1\r\ncdot 1 - 2\r\ncdot 1 - 3\r\ncdot 1 + 4\r\ncdot 2 - 5\r\ncdot 2 + 6\r\ncdot 3 - 7\r\ncdot 3 = -9.Calculate the maximum cost you can obtain by dividing the\r\narray a into k non-empty consecutive subarrays.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nusing ll = long long;\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0);\n\n\tint n, k;\n\tcin >> n >> k;\n\n\tvector<ll> as(n);\n\tfor (int i = 0; i < n; ++i) cin >> as[i];\n\n\tvector<ll> suff_sum(n, 0);\n\tfor (int i = n-2; i >= 0; --i) suff_sum[i] = as[i+1] + suff_sum[i+1];\n\tsuff_sum.pop_back();\n\n\tll res = as[0] + (n > 1 ? suff_sum[0] : 0);\n\tsort(suff_sum.begin(), suff_sum.end());\n\tfor (int j = 0; j < k-1; ++j) {\n\t\tres += suff_sum.back();\n\t\tsuff_sum.pop_back();\n\t}\n\tcout << res << '\\n';\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Array Splitting.json",
    "editorial_link": "https://codeforces.com/blog/entry/67484",
    "editorial": "Letâs denote as (just a suffix sum). And let be the position where\r\nstarts the -th subarray (obviously, and ). Then we can make an\r\ninteresting transformation: So, our task is equivalent to choosing sum\r\nof all array and different suffix sums. And we want to maximize their\r\ntotal sum.Thatâs why we can just greedily take maximum suffix sums along\r\nwith sum of all array.\r\n",
    "hint": []
}