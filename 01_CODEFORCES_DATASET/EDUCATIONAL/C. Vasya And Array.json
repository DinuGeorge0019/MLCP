{
    "link": "https://codeforces.com//contest/1187/problem/C",
    "problemId": "365119",
    "problem_idx": "C",
    "shortId": "1187C",
    "contest_number": "1187",
    "problem_submissions": {
        "G": [
            56332310,
            56340989,
            56686103,
            56327820,
            56357942,
            56357893,
            56357546,
            56393615,
            56385554,
            56337872,
            56340206,
            56343105,
            56383525,
            56344635,
            56413429,
            56342762,
            56340438,
            56341811,
            56342716,
            56365621
        ],
        "F": [
            56329446,
            56334290,
            56324078,
            56328221,
            56327378,
            56337303,
            56342526,
            56331177,
            56340043,
            56336355,
            56334752,
            56336077,
            56336627,
            56360333
        ],
        "E": [
            56323030,
            56330456,
            56319363,
            56322371,
            56320247,
            56329005,
            56327923,
            56326133,
            56329409,
            56326249,
            56424958,
            56328252,
            56326656,
            56325346,
            56328882,
            56328436,
            56328661,
            56323830,
            56324440,
            56325389
        ],
        "D": [
            56321688,
            56327439,
            56325081,
            56328701,
            56323355,
            56322789,
            56358499,
            56324879,
            56323568,
            56320080,
            56323458,
            56413111,
            56325452,
            56541360,
            56321839,
            56320767,
            56323441
        ],
        "C": [
            56317291,
            56315455,
            56314711,
            56314827,
            56313223,
            56319121,
            56318984,
            56317025,
            56320070,
            56318484,
            56425545,
            56329379,
            56320274,
            56318352,
            56316738,
            56318754,
            56319277,
            56317240,
            56316893,
            56317391
        ],
        "B": [
            56314215,
            56313013,
            56312493,
            56311346,
            56311654,
            56315580,
            56313289,
            56312101,
            56313618,
            56315894,
            56313703,
            56315753,
            56314242,
            56313556,
            56315340,
            56314265,
            56313400,
            56314155,
            56314393
        ],
        "A": [
            56311354,
            56311017,
            56311059,
            56312444,
            56310978,
            56312306,
            56311272,
            56310955,
            56311255,
            56311625,
            56311777,
            56313786,
            56311277,
            56310994,
            56311316,
            56311426,
            56311025,
            56311856,
            56311363
        ]
    },
    "name": "C. Vasya And Array",
    "statement": "Vasya has an array a_1, a_2,\r\ndots, a_n.You don\u2019t know this array, but he told you m facts about this\r\narray. The i-th fact is a triple of numbers t_i, l_i and r_i (0\r\nle t_i\r\nle 1, 1\r\nle l_i < r_i\r\nle n) and it means: if t_i=1 then subbarray a_{l_i}, a_{l_i + 1},\r\ndots, a_{r_i} is sorted in non-decreasing order; if t_i=0 then subbarray\r\na_{l_i}, a_{l_i + 1},\r\ndots, a_{r_i} is not sorted in non-decreasing order. A subarray is not\r\nsorted if there is at least one pair of consecutive elements in this\r\nsubarray such that the former is greater than the latter. For example if\r\na = [2, 1, 1, 3, 2] then he could give you three facts: t_1=1, l_1=2,\r\nr_1=4 (the subarray [a_2, a_3, a_4] = [1, 1, 3] is sorted), t_2=0,\r\nl_2=4, r_2=5 (the subarray [a_4, a_5] = [3, 2] is not sorted), and\r\nt_3=0, l_3=3, r_3=5 (the subarray [a_3, a_5] = [1, 3, 2] is not\r\nsorted).You don\u2019t know the array a. Find array which satisfies all the\r\ngiven facts.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=1000*1007;\n\nint n, m;\n\nint tab[nax];\n\nint per[nax];\n\nvector <pii> nope;\n\nint czy(int a, int b)\n{\n\tfor (int i=a; i<b; i++)\n\t\tif (per[i]>per[i+1])\n\t\t\treturn 0;\n\treturn 1;\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tint t, a, b;\n\t\tscanf(\"%d%d%d\", &t, &a, &b);\n\t\tif (t)\n\t\t{\n\t\t\ttab[a]++;\n\t\t\ttab[b]--;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnope.push_back({a, b});\n\t\t}\n\t}\n\tfor (int i=1; i<=n; i++)\n\t\ttab[i]+=tab[i-1];\n\tint k=2*n;\n\tint v=1;\n\twhile(v<=n)\n\t{\n\t\tint w=0;\n\t\twhile(tab[v+w])\n\t\t\tw++;\n\t\tk--;\n\t\tfor (int i=0; i<=w; i++)\n\t\t\tper[v+i]=k;\n\t\tv+=w+1;\n\t}\n\tdebug() << range(per+1, per+1+n) << nope;\n\tfor (pii i : nope)\n\t{\n\t\tif (czy(i.first, i.second))\n\t\t{\n\t\t\tprintf(\"NO\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"YES\\n\");\n\tfor (int i=1; i<=n; i++)\n\t\tprintf(\"%d \", per[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Vasya And Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/68111",
    "editorial": "Let\u00e2\u0080\u0099s consider array , such that .Then subarray is sorted in\r\nnon-decreasing order if and only if all elements are greater or equal to\r\nzero.So if we have fact , then all elements must be greater or equal to\r\nzero.Let\u00e2\u0080\u0099s create the following array : if there is such a fact that ,\r\nand otherwise.After that we create the following array : , and for all\r\nother indexes .This array satisfies all facts such that . So all we have\r\nto do is check that all remaining facts are satisfied.\r\n"
}