{
    "link": "https://codeforces.com//contest/873/problem/E",
    "problemId": "127823",
    "problem_idx": "E",
    "shortId": "873E",
    "contest_number": "873",
    "problem_submissions": {
        "F": [
            31249155,
            31246074,
            31247917,
            31248578,
            31249388,
            31249158,
            31251415,
            31251584,
            31250733,
            31288783,
            31250579,
            31245985,
            31253356,
            31247757,
            31248728,
            31247477,
            31250335,
            50573188,
            31250325,
            31251280
        ],
        "E": [
            31248134,
            31249919,
            31252439,
            31251022,
            31250865,
            31249737,
            31252775,
            31249136,
            31250580,
            31253627,
            31288769,
            31253029,
            31255710,
            31253949,
            31251510,
            31251487,
            31250360,
            31262356,
            31249482,
            31279947,
            31254652
        ],
        "D": [
            31245980,
            31247767,
            31247101,
            31246043,
            31246748,
            31245415,
            31247268,
            112870619,
            31246541,
            31245811,
            31246941,
            31288779,
            31248218,
            31249255,
            31247717,
            31246658,
            31251512,
            31244912,
            31245095,
            31246576,
            31246214,
            31247900
        ],
        "C": [
            31244661,
            31246346,
            31244654,
            31244959,
            31244457,
            31244670,
            31245105,
            31244159,
            31244863,
            31245509,
            31247509,
            31245175,
            31252048,
            31251951,
            31245641,
            31244103,
            31244492,
            31244705,
            31245349
        ],
        "B": [
            31243795,
            31244797,
            31243640,
            31244221,
            31243588,
            31243630,
            251388248,
            206107056,
            102945786,
            102945751,
            31243439,
            31243368,
            31243788,
            31244097,
            31246401,
            31243794,
            31252944,
            31252443,
            31243336,
            31243339,
            31243565,
            31243646,
            31244189
        ],
        "A": [
            31242945,
            31244304,
            31243017,
            31243228,
            31242934,
            31243184,
            31242993,
            31242977,
            31243012,
            31243412,
            31244065,
            31243098,
            31243193,
            31252560,
            31242943,
            31242939,
            31243039,
            31243390
        ]
    },
    "name": "E. Awards For Contestants",
    "statement": "Alexey recently held a programming contest for students from Berland.\r\nstudents participated in a contest, -th of them solved problems. Now he\r\nwants to award some contestants. Alexey can award the students with\r\ndiplomas of three different degrees. Each student either will receive\r\none diploma of some degree, or won’t receive any diplomas at all. Let be\r\nthe number of students that are awarded with diplomas of degree (). The\r\nfollowing conditions must hold: For each () ; For any two degrees and .\r\nOf course, there are a lot of ways to distribute the diplomas. Let be\r\nthe degree of diploma -th student will receive (or if -th student won’t\r\nreceive any diplomas). Also for any such that let be the maximum number\r\nof problems solved by a student that receives a diploma of degree , and\r\nbe the minimum number of problems solved by a student that receives a\r\ndiploma of degree . Alexey wants to distribute the diplomas in such a\r\nway that: If student solved more problems than student , then he has to\r\nbe awarded not worse than student (it’s impossible that student receives\r\na diploma and doesn’t receive any, and also it’s impossible that both of\r\nthem receive a diploma, but ); is maximum possible; Among all ways that\r\nmaximize the previous expression, is maximum possible; Among all ways\r\nthat correspond to the two previous conditions, is maximum possible,\r\nwhere is the maximum number of problems solved by a student that doesn’t\r\nreceive any diploma (or if each student is awarded with some diploma).\r\nHelp Alexey to find a way to award the contestants!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define all(a) (a).begin(), (a).end()\n#define sz(a) (int)(a).size()\n#define pb push_back\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef double ld;\ntypedef pair<ll, ll> pll;\n\nconst int rmax = 15;\nconst int nmax = 100500;\n\nvector<pii> vals;\nvector<vector<pii> > sparse;\nint deg[nmax];\n\npii get(int l, int r) {\n\tint len = r - l + 1;\n\tint k = deg[len];\n\treturn max(sparse[l][k], sparse[l + len - (1 << k)][k]);\n}\n\nint main() {\n\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\n\t//ifstream cin(\"input.txt\");\n\t//ofstream cout(\"output.txt\");\n\n\tint n;\n\tcin >> n;\n\n\tvector<int> x(n);\n\tvector<pii> a;\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> x[i];\n\t\ta.pb({x[i], i});\n\t}\n\tsort(all(a));\n\n\tvals.pb({a[0].first, 0});\n\tfor (int i = 1; i < n; ++i) {\n\t\tvals.pb({a[i]. first - a[i - 1].first, i});\n\t}\n\n\tsparse = vector<vector<pii> >(n, vector<pii>(rmax));\n\tfor (int i = 0; i < n; ++i) {\n\t\tsparse[i][0] = vals[i];\n\t}\n\tfor (int r = 0; r + 1 < rmax; ++r) {\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tint t = min(i + (1 << r), n - 1);\n\t\t\tsparse[i][r + 1] = max(sparse[i][r], sparse[t][r]);\n\t\t}\n\t}\n\n\tdeg[0] = -1;\n\tfor (int i = 1; i < nmax; ++i) {\n\t\tdeg[i] = deg[i - 1];\n\t\tif (!(i & (i - 1))) {\n\t\t\t++deg[i];\n\t\t}\n\t}\n\n\tint bestx = -1, besty = -1, bestz = -1;\n\tint besti, bestj, bestk;\n\n\tfor (int i = n - 1; i >= 0; --i) {\n\t\tfor (int j = i - 1; j >= 0; --j) {\n\t\t\tint lena = n - 1 - i + 1;\n\t\t\tint lenb = i - 1 - j + 1;\n\t\t\tif (lena > 2 * lenb || lenb > 2 * lena) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint minlen = max({1, (lena + 1) / 2, (lenb + 1) / 2});\n\t\t\tint maxlen = min({j, 2 * lena, 2 * lenb});\n\t\t\tif (minlen > maxlen) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpii p = get(j - maxlen, j - minlen);\n\t\t\t/*if (i == n - 1 && j == n - 2) {\n\t\t\t\tcout << p.first << \" \" << p.second << \"\\n\";\n\t\t\t}*/\n\t\t\tif ((a[i].first - a[i - 1].first > bestx) || (a[i].first - a[i - 1].first == bestx && \n\t\t\t\t(a[j].first - a[j - 1].first > besty || (a[j].first - a[j - 1].first == besty && p.first > bestz)))) {\n\t\t\t\tbestx = a[i].first - a[i - 1].first;\n\t\t\t\tbesty = a[j].first - a[j - 1].first;\n\t\t\t\tbestz = p.first;\n\t\t\t\tbesti = i, bestj = j, bestk = p.second;\n\t\t\t}\n\t\t}\n\t}\n\n\tvector<int> ans(n);\n\tfor (int i = 0; i < bestk; ++i) {\n\t\tans[a[i].second] = -1;\n\t}\n\tfor (int i = bestk; i < bestj; ++i) {\n\t\tans[a[i].second] = 3;\n\t}\n\tfor (int i = bestj; i < besti; ++i) {\n\t\tans[a[i].second] = 2;\n\t}\n\tfor (int i = besti; i < n; ++i) {\n\t\tans[a[i].second] = 1;\n\t}\n\n\tfor (int i = 0; i < n; ++i) {\n\t\tcout << ans[i] << \" \";\n\t}\n\tcout << \"\\n\";\n\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "dp"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Awards For Contestants.json",
    "editorial_link": "https://codeforces.com//blog/entry/55171",
    "editorial": "Letâs consider naive solution: make three loops to fix amounts of people\r\nto get dimplomas of each degree, take the best. Obviously, sorting the\r\nscores will regroup optimal blocks for each degree in such a way that\r\nthey come in segments of initial array. We tried to make these solutions\r\nfail but underestimated the abilities of contestants to optimize this\r\nkind of stuff and couple of such made it to the end of contest. :(To be\r\nhonest, we just need to get rid of the last loop. Let be the difference\r\nbetween and ( is sorted, ). Then let be the position of the last diploma\r\nof second degree and , be the amounts of diplomas of the first ans the\r\nsecond degrees. Thus the best position to put the separator between the\r\nthird degree and no diploma is the postion with the maximum number in\r\narray over segment . This are the borders of possible amount of the\r\ndimplomas of the third degree.Maximum over segment can be implemented\r\nwith segment tree, sparse table or even naive square matrix with precalc\r\ntime and memory.Overall complexity: /.\r\n",
    "hint": []
}