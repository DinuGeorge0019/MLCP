{
    "link": "https://codeforces.com//contest/632/problem/B",
    "problemId": "50144",
    "problem_idx": "B",
    "shortId": "632B",
    "contest_number": "632",
    "problem_submissions": {
        "F": [
            16449954,
            16449774,
            16448025,
            16447543,
            16474130,
            16447469,
            16465805,
            16465734,
            16449676,
            16449356,
            16449961,
            16450068,
            16557410,
            16449769,
            16450214,
            16449702,
            16464012
        ],
        "E": [
            16447028,
            16449753,
            16445979,
            16453840,
            16453803,
            16448350,
            16447568,
            16449040,
            16605043,
            16448762,
            16447224,
            16448913,
            16449761,
            128072075,
            44908882,
            16457507
        ],
        "D": [
            16446074,
            16445153,
            16444353,
            16454357,
            16446366,
            16445038,
            16445634,
            16444742,
            16453325,
            16445984,
            16447854,
            16446133,
            16445283,
            16446954,
            16447982,
            16445318,
            16444664,
            16445724
        ],
        "C": [
            16444421,
            16444120,
            16443606,
            16443645,
            16445009,
            16444221,
            16444738,
            16443779,
            16445075,
            16444107,
            16445524,
            16449207,
            16450843,
            16448580,
            16448209,
            16447449,
            16444580,
            16444579,
            16443960,
            16444153,
            24720150,
            24720135
        ],
        "B": [
            16443783,
            16443777,
            16443815,
            16443887,
            16444524,
            16444113,
            16444187,
            16451169,
            16443637,
            16443942,
            16443903,
            16444676,
            16444341,
            16444136,
            16444765,
            16447115,
            16444024,
            16443821,
            16443819
        ],
        "A": [
            16443584,
            16443594,
            16443558,
            16443577,
            16443765,
            16443750,
            16443746,
            16445513,
            16443626,
            16443702,
            16443955,
            16443808,
            16443676,
            16444067,
            16446687,
            16443663,
            16443559,
            16443628
        ]
    },
    "name": "B. Alice, Bob, Two Teams",
    "statement": "Alice and Bob are playing a game. The game involves splitting up game\r\npieces into two teams. There are pieces, and the -th piece has a\r\nstrength .The way to split up game pieces is split into several steps:\r\nFirst, Alice will split the pieces into two different groups and . This\r\ncan be seen as writing the assignment of teams of a piece in an\r\ncharacter string, where each character is or . Bob will then choose an\r\narbitrary prefix or suffix of the string, and flip each character in\r\nthat suffix (i.e. change to and to ). He can do this step at most once.\r\nAlice will get all the pieces marked and Bob will get all the pieces\r\nmarked . The strength of a player is then the sum of strengths of the\r\npieces in the group.Given Alice’s initial split into two teams, help Bob\r\ndetermine an optimal strategy. Return the maximum strength he can\r\nachieve.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <set>\n#include <map>\n#include <string>\n#include <vector>\n#include <bitset>\n#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <queue>\n\n\ntypedef long long ll;\ntypedef long double ld;\n\nusing namespace std;\n\nint n;\nll p[600000];\nchar s[600000];\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; ++i)\n\t\tscanf(\"%lld\", p + i);\n\tscanf(\" %s\", s);\n\tll sa = 0;\n\tll sb = 0;\n\tfor (int i = 0; i < n; ++i)\n\t\tif (s[i] == 'A')\n\t\t\tsa += p[i];\n\t\telse\n\t\t\tsb += p[i];\n\tll ans = max(sa, sb);\n\tll na = 0;\n\tll nb = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (s[i] == 'A')\n\t\t\tna += p[i];\n\t\telse\n\t\t\tnb += p[i];\n\t\tll xa = sa - na;\n\t\tll xb = sb - nb;\n\t\tans = max(ans, max(na + xb, nb + xa));\n\t}\n\tcout << ans << \"\\n\";\n\treturn 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Alice, Bob, Two Teams.json",
    "editorial_link": "https://codeforces.com//blog/entry/43493",
    "editorial": "The problem was suggested by Lewin Gan Lewin. Letâs calculate the prefix\r\nsums for all numbers (and store it in array ) and for numbers with\r\nletter B (and store it in array ). Now we can find the sum of all\r\nnumbers in any segment in time and the sum of numbers with letter B.\r\nLetâs iterate over prefix or suffix to flip and calculate the sum in\r\nthat case by formulas: for prefixes and for suffixes. C++ solution by\r\nme. Python solution by Lewin. Complexity: .\r\n",
    "hint": []
}