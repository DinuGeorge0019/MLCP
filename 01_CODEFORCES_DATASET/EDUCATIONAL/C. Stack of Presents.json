{
    "link": "https://codeforces.com//contest/1279/problem/C",
    "problemId": "504275",
    "problem_idx": "C",
    "shortId": "1279C",
    "contest_number": "1279",
    "problem_submissions": {
        "E": [
            67737947,
            67733364,
            67730576,
            67739828,
            67742536,
            67737172,
            67724903,
            67736976,
            67729524,
            67727105,
            67747837,
            67731683,
            67732984,
            67748535,
            67744932
        ],
        "F": [
            67737545,
            67718265,
            67764598,
            67761358,
            67761175,
            67737082,
            67725475,
            67770261,
            67748335,
            67724855,
            67743206,
            67734760,
            67745652,
            67744739,
            67715547,
            67721155,
            67752838,
            67725507,
            67753025,
            67734101,
            67763755,
            67725445,
            67752215,
            67728799,
            67734922,
            67753488
        ],
        "D": [
            67712365,
            67710004,
            67715225,
            67711743,
            67720035,
            67741233,
            67733656,
            67738820,
            67706683,
            67710710,
            67712344,
            67716189,
            67712742,
            67717775,
            67716646,
            67717595,
            67717233,
            67714949,
            67709766
        ],
        "C": [
            67708271,
            67707793,
            67712401,
            67706993,
            67715784,
            67738909,
            67733706,
            67739694,
            67710632,
            67708442,
            67708816,
            67712768,
            67706695,
            67710203,
            67712897,
            67713466,
            67711730,
            67709788,
            67706084
        ],
        "B": [
            67703572,
            67702979,
            67708187,
            67704555,
            67708809,
            67737826,
            67733752,
            67740661,
            67706039,
            67703968,
            67706335,
            67709187,
            67703627,
            67705748,
            67708508,
            67710463,
            67705061,
            67706427,
            67703535
        ],
        "A": [
            67701146,
            67701133,
            67701117,
            67701163,
            67704539,
            67735636,
            67733784,
            67741171,
            67702120,
            67701143,
            67701243,
            67701332,
            67701184,
            67701399,
            67702929,
            67702323,
            67701558,
            67701229,
            67701070
        ]
    },
    "name": "C. Stack of Presents",
    "statement": "Santa has to send presents to the kids. He has a large stack of n\r\npresents, numbered from 1 to n; the topmost present has number a_1, the\r\nnext present is a_2, and so on; the bottom present has number a_n. All\r\nnumbers are distinct.Santa has a list of m presents he has to send: b_1,\r\nb_2, ..., b_m. He will send them .To send a present, Santa has to find\r\nit in the stack by removing all presents above it, taking this present\r\nand returning all removed presents on top of the stack. So, if there are\r\nk presents above the present Santa wants to send, it takes him 2k + 1\r\nseconds to do it. Fortunately, Santa can speed the whole process up when\r\nhe returns the presents to the stack, he may reorder them as he wishes\r\n(only those which were above the present he wanted to take; the presents\r\nbelow cannot be affected in any way).What is the minimum time required\r\nto send all of the presents, provided that Santa knows the whole list of\r\npresents he has to send and reorders the presents optimally? Santa\r\ncannot change the order of presents or interact with the stack of\r\npresents in any other way.Your program has to answer t different test\r\ncases.\r\n",
    "solutions": [
        "#include <cmath>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <list>\n#include <time.h>\n#include <math.h>\n#include <random>\n#include <deque>\n#include <queue>\n#include <cassert>\n#include <unordered_map>\n#include <unordered_set>\n#include <iomanip>\n#include <bitset>\n#include <sstream>\n#include <chrono>\n#include <cstring>\n\nusing namespace std;\n\ntypedef long long ll;\n\n#ifdef iq\n  mt19937 rnd(228);\n#else\n  mt19937 rnd(chrono::high_resolution_clock::now().time_since_epoch().count());\n#endif\n\nint main() {\n#ifdef iq\n  freopen(\"a.in\", \"r\", stdin);\n#endif\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  auto solve = [&] () {\n    int n, m;\n    cin >> n >> m;\n    vector <int> a(n);\n    vector <int> ind(n);\n    for (int i = 0; i < n; i++) {\n      cin >> a[i];\n      a[i]--;\n      ind[a[i]] = i;\n    }\n    vector <int> b(m);\n    int mx = -1;\n    ll ans = 0;\n    for (int i = 0; i < m; i++) {\n      cin >> b[i];\n      b[i]--;\n      int x = ind[b[i]];\n      if (x > mx) {\n        mx = x;\n        ans += 2 * (x - i) + 1;\n      } else {\n        ans++;\n      }\n    }\n    cout << ans << '\\n';\n  };\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Stack of Presents.json",
    "editorial_link": "https://codeforces.com//blog/entry/72577",
    "editorial": "At first let\u00e2\u0080\u0099s precalculate array such that .Now presume that we have to\r\ncalculate answer for . Then there are two cases (let\u00e2\u0080\u0099s denote ,\r\ninitially ): if then we have to spend seconds on it ( second on the gift\r\n, seconds on removing gifts above and seconds on pushing these gifts);\r\nif then we can reorder gifts by previous actions such that gift be on\r\nthe top of stack. So we spend only second on it.\r\n"
}