{"link": "https://codeforces.com//contest/1661/problem/E", "problemId": "1361831", "problem_idx": "E", "shortId": "1661E", "contest_number": "1661", "problem_submissions": {"F": [153187553, 153195355, 153198079, 153192699, 153208735, 153197140, 153204834, 153209679, 153216895, 153192345, 153209985, 153215287, 153214260, 153206784, 153181924, 153187391, 153499691], "E": [153181602, 153183458, 153186252, 153186023, 153206034, 153195940, 153194023, 153206147, 153218775, 153197839, 153195670, 153202578, 153201319, 153198707, 153201518, 153192938, 153189205, 153195957, 153196511], "D": [153174390, 153174537, 153175638, 153174007, 153176690, 153176745, 153185907, 153182627, 153178744, 153172686, 153190154, 153190396, 153190106, 153210872, 153207891, 153175462, 153176825, 153177570, 153175676], "C": [153170138, 153167530, 153168248, 153169048, 153170259, 153170541, 153168119, 153170774, 153172726, 153194437, 153178130, 153175287, 153185061, 153205419, 153246548, 153215381, 153166182, 153169099, 153168642, 153167758], "B": [153162156, 153162580, 153161952, 153162200, 153164678, 153162918, 153163800, 153162935, 153167883, 153164440, 153162927, 153168126, 153181318, 153200885, 153216655, 153161628, 153165270, 153163647, 153161926], "A": [153160994, 153160951, 153163491, 153160922, 153160942, 153161262, 153161508, 153160985, 153162410, 153161094, 153160862, 153162511, 153178823, 153198439, 153217630, 153160910, 153162727, 153160959, 153160858]}, "name": "E. Narrow Components", "statement": "You are given a matrix a, consisting of 3 rows and n columns. Each cell\r\nof the matrix is either free or taken.A free cell y is reachable from a\r\nfree cell x if at least one of these conditions hold: x and y share a\r\nside; there exists a free cell z such that z is reachable from x and y\r\nis reachable from z. A connected component is a set of free cells of the\r\nmatrix such that all cells in it are reachable from one another, but\r\nadding any other free cell to the set violates this rule.You are asked q\r\nqueries about the matrix. Each query is the following: l r count the\r\nnumber of connected components of the matrix, consisting of columns from\r\nl to r of the matrix a, inclusive. Print the answers to all queries.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  int n;\n  cin >> n;\n  vector<string> a(3);\n  for (int i = 0; i < 3; i++){\n    cin >> a[i];\n  }\n  vector<int> c1(n + 1, 0);\n  for (int i = 0; i < n; i++){\n    c1[i + 1] = c1[i];\n    for (int j = 0; j < 3; j++){\n      if (a[j][i] == '1'){\n        c1[i + 1]++;\n        if (j > 0){\n          if (a[j - 1][i] == '1'){\n            c1[i + 1]--;\n          }\n        }\n      }\n    }\n  }\n  vector<int> c2(n, 0);\n  for (int i = 0; i < n - 1; i++){\n    c2[i + 1] = c2[i];\n    for (int j = 0; j < 3; j++){\n      if (a[j][i] == '1' && a[j][i + 1] == '1'){\n        c2[i + 1]++;\n        if (j > 0){\n          if (a[j - 1][i] == '1' && a[j - 1][i + 1] == '1'){\n            c2[i + 1]--;\n          }\n        }\n      }\n    }\n  }\n  vector<int> p;\n  for (int i = 0; i < n; i++){\n    if (a[0][i] == '1' && a[1][i] == '1' && a[2][i] == '1'){\n      p.push_back(i);\n    }\n  }\n  int cnt = p.size();\n  vector<int> L, R;\n  for (int i = 0; i < cnt - 1; i++){\n    if (p[i + 1] - p[i] >= 2){\n      bool ok = true;\n      for (int j = p[i] + 1; j < p[i + 1]; j++){\n        if (!(a[0][j] == '1' && a[1][j] == '0' && a[2][j] == '1')){\n          ok = false;\n        }\n      }\n      if (ok){\n        L.push_back(p[i]);\n        R.push_back(p[i + 1]);\n      }\n    }\n  }\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++){\n    int l, r;\n    cin >> l >> r;\n    l--;\n    int ans1 = c1[r] - c1[l];\n    int ans2 = c2[r - 1] - c2[l];\n    int p1 = lower_bound(L.begin(), L.end(), l) - L.begin();\n    int p2 = lower_bound(R.begin(), R.end(), r) - R.begin();\n    int ans3 = max(p2 - p1, 0);\n    cout << ans1 - ans2 + ans3 << \"\\n\";\n  }\n}"], "input": "", "output": "", "tags": ["brute force", "data structures", "dp", "dsu", "math", "trees"], "dificulty": "2500", "interactive": false}