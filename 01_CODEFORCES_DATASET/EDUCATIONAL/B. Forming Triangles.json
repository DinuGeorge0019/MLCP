{
    "link": "https://codeforces.com//contest/1922/problem/B",
    "problemId": "2433275",
    "problem_idx": "B",
    "shortId": "1922B",
    "contest_number": "1922",
    "problem_submissions": {
        "F": [
            242258354,
            242278276,
            242274562,
            242271525,
            242258097,
            242274599,
            242271507,
            242268588,
            242285652,
            242271581,
            242270540,
            242278542,
            242282333,
            242270699,
            242270119,
            242276867,
            242286431,
            242276715,
            242276487,
            242283192,
            242281108,
            242278860,
            242278983,
            242285548
        ],
        "E": [
            242241568,
            242225493,
            242242029,
            242279592,
            242237693,
            242231955,
            242236354,
            242245342,
            242255638,
            242244187,
            242239291,
            242260117,
            242249388,
            242249138,
            242239806,
            242257431,
            242256396,
            242263321,
            242231103,
            242254535,
            242253629,
            242270325
        ],
        "D": [
            242234045,
            242236857,
            242236461,
            242246467,
            242239405,
            242245547,
            242240299,
            242240756,
            242237650,
            242234866,
            242248459,
            242242872,
            242244162,
            242252228,
            242244373,
            242239696,
            242254494,
            242245049,
            242250144,
            242243755,
            242246758
        ],
        "C": [
            242227385,
            242230966,
            242228502,
            242224242,
            242227745,
            242228850,
            242229081,
            242228504,
            242227487,
            242227235,
            242229333,
            242232708,
            242229815,
            242234164,
            242230429,
            242229813,
            242239026,
            242239967,
            242231740,
            242235920
        ],
        "B": [
            242220641,
            242221058,
            242221110,
            242219955,
            242221311,
            242233194,
            242221713,
            242221320,
            242222042,
            242223201,
            242221647,
            242219752,
            242221561,
            242226204,
            242224089,
            242222658,
            242227596,
            242222002,
            242224729,
            242223236
        ],
        "A": [
            242219259,
            242219714,
            242223200,
            242219077,
            242219362,
            242220179,
            242219565,
            242219194,
            242219734,
            242219881,
            242219505,
            242219046,
            242219400,
            242221402,
            242220981,
            242220554,
            242223002,
            242219741,
            242219322,
            242220234
        ]
    },
    "name": "B. Forming Triangles",
    "statement": "You have n sticks, numbered from 1 to n. The length of the i-th stick is\r\n2^{a_i}.You want to choose 3 sticks out of the given n sticks, and form\r\na triangle out of them, using the sticks as the sides of the triangle. A\r\ntriangle is called non-degenerate if its area is greater than 0.You have\r\nto calculate the number of ways to choose exactly 3 sticks so that a\r\ntriangle can be formed out of them. Note that the order of choosing\r\nsticks does not matter (for example, choosing the 1-st, 2-nd and 4-th\r\nstick is the same as choosing the 2-nd, 4-th and 1-st stick).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#ifndef ONLINE_JUDGE\n#include \"debug.h\"  // https://github.com/Heltion/debug.h/blob/main/debug.h\n#else\n#define debug(...) (void)417\n#endif\nusing i64 = int64_t;\nint main() {\n  cin.tie(nullptr)->sync_with_stdio(false);\n  cout << fixed << setprecision(20);\n  int t;\n  cin >> t;\n  for (int ti = 0; ti < t; ti += 1) {\n    int n;\n    cin >> n;\n    vector<int> c(n + 1);\n    for (int i = 0, a; i < n; i += 1) {\n      cin >> a;\n      c[a] += 1;\n    }\n    i64 ans = 0, sum = 0;\n    for (i64 ci : c) {\n      ans += ci * (ci - 1) * (ci - 2) / 6;\n      ans += ci * (ci - 1) / 2 * sum;\n      sum += ci;\n    }\n    cout << ans << \"\\n\";\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "constructive algorithms",
        "math",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Forming Triangles.json",
    "editorial_link": "https://codeforces.com//blog/entry/124890",
    "editorial": "At first, letâs figure out which sticks can be used to make a triangle.\r\nLetâs denote the length of the longest stick as , the shortest stick as\r\nand the middle stick as (in other words, is an array of length ,\r\nconsisting of three sticks for a triangle, sorted in non-ascending\r\norder). Important fact: . Itâs true because if , then and the triangle\r\nis degenerate. At the same time, the value of the can be any integer\r\nfrom to .So all we have to do is calculate the number of triples of\r\nsticks such that there are two or three maximums in the triple. Letâs\r\ncreate an array , where is the number of sticks of length , and the\r\narray , where is the number of sticks no longer than . Now letâs iterate\r\nover the length of the longest stick in the triangle (denote it as ).\r\nThen there are two cases: All three sticks in a triangle are equal. Then\r\nthe number of such triangles can be computed with a binomial\r\ncoefficient: ; Only two sticks are equal (and have the same length).\r\nThen the number of such triangles is .\r\n",
    "hint": []
}