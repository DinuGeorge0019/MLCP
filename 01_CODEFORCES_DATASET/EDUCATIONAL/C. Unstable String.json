{
    "link": "https://codeforces.com//contest/1535/problem/C",
    "problemId": "1005284",
    "problem_idx": "C",
    "shortId": "1535C",
    "contest_number": "1535",
    "problem_submissions": {
        "F": [
            118419611,
            118426010,
            118430867,
            118426204,
            118431979,
            118430548,
            118427577,
            118427147,
            118426507,
            118434537,
            118439125,
            118438429,
            118430864,
            118436547,
            118434959,
            118453422,
            118456471,
            118456451,
            118456355,
            118456131,
            118456058,
            118456048,
            118455909,
            118455542,
            118455503,
            118455485
        ],
        "E": [
            118400147,
            118402299,
            118394572,
            118405499,
            118401297,
            118401883,
            118414866,
            118411914,
            118414294,
            118416129,
            118415333,
            118407183,
            118406610,
            118405332,
            118409528,
            118409895,
            118409924,
            118411325,
            118411281,
            118410495
        ],
        "D": [
            118386781,
            118389062,
            118387245,
            118390389,
            118390997,
            118394077,
            118396153,
            118398368,
            118392634,
            118407760,
            118505002,
            118402523,
            118396763,
            118398598,
            118397636,
            118397134,
            118395495,
            118396828,
            118399622,
            118398243,
            118400710,
            118402452
        ],
        "C": [
            118378877,
            118377465,
            118375938,
            118430752,
            118379578,
            118379282,
            118380197,
            118383333,
            118382719,
            118391368,
            118391117,
            118384601,
            118383707,
            118399476,
            118384199,
            118383290,
            118382649,
            118384396,
            118382126,
            118382935,
            118380453,
            118382432
        ],
        "B": [
            118372987,
            118446923,
            118371985,
            118371638,
            118369895,
            118374146,
            118373752,
            118371435,
            118372857,
            118372165,
            118379497,
            118375234,
            118373646,
            118372652,
            118378295,
            118372318,
            118372891,
            118372700,
            118376055,
            118373052,
            118370572
        ],
        "A": [
            118369280,
            118369165,
            118369096,
            118369133,
            118369295,
            118369220,
            118369112,
            118369384,
            118369143,
            118369677,
            118369872,
            118369144,
            118369236,
            118370094,
            118369134,
            118369278,
            118369451,
            118369228,
            118369772,
            118369174
        ]
    },
    "name": "C. Unstable String",
    "statement": "You are given a string s consisting of the characters , , and .Let\u2019s\r\ncall a string if it consists of the characters and and any two adjacent\r\ncharacters are different (i. e. it has the form or ).Let\u2019s call a string\r\nif it consists of the characters , , and , and you can replace the\r\ncharacters to or (for each character, the choice is independent), so\r\nthat the string becomes .For example, the strings , , and are beautiful,\r\nand the strings and are not.Calculate the number of beautiful contiguous\r\nsubstrings of the string s.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n  int t;\n  cin >> t;\n  for (int i = 0; i < t; i++){\n    string s;\n    cin >> s;\n    int N = s.size();\n    vector<vector<int>> a(3);\n    for (int j = 0; j < 3; j++){\n      a[j].push_back(-1);\n    }\n    for (int j = 0; j < N; j++){\n      if (s[j] != '?'){\n        a[2].push_back(j);\n        int d = s[j] - '0';\n        int p = (d + j) % 2;\n        a[p].push_back(j);\n      }\n    }\n    for (int j = 0; j < 3; j++){\n      a[j].push_back(N);\n    }\n    vector<long long> S(3, 0);\n    for (int j = 0; j < 3; j++){\n      int cnt = a[j].size();\n      for (int k = 0; k < cnt - 1; k++){\n        long long d = a[j][k + 1] - a[j][k];\n        S[j] += d * (d - 1) / 2;\n      }\n    }\n    cout << S[0] + S[1] - S[2] << endl;\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "implementation",
        "strings",
        "two pointers"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Unstable String.json",
    "editorial_link": "https://codeforces.com//blog/entry/91481",
    "editorial": "Let\u00e2\u0080\u0099s find a simple condition when the string is not beautiful. A string\r\nis not beautiful if there are two characters (or two characters ) at an\r\nodd distance, or and at an even distance (because in this case, the\r\nstring cannot be made unstable).Iterate over the right border of the\r\nsubstring . Let be the maximum index such that the substring is not\r\nbeautiful (or if the substring is beautiful). Then we have to add to the\r\nanswer (since any substring of a beautiful string is also\r\nbeautiful).Denote as the last occurrence of ( or ) at the position of\r\nparity .Let , is the parity of , then , i. e. find the nearest character\r\nthat breaks a beautiful substring ( at an odd distance or at an even\r\ndistance)The case for is similar. If , then we can choose what this\r\ncharacter will be. Obviously, we need to choose the option with the\r\nsmaller value of .\r\n"
}