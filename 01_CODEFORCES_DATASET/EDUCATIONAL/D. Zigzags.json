{"link": "https://codeforces.com//contest/1400/problem/D", "problemId": "709186", "problem_idx": "D", "shortId": "1400D", "contest_number": "1400", "problem_submissions": {"D": [91063958, 91019003, 90921157, 90924583, 91129094, 90921742, 90924518, 90925405, 90924228, 90928527, 90927053, 90928008, 90921390, 90926754, 90926098, 90923479, 90932560, 90927207, 90928111, 90927601, 90927240], "E": [91063322, 90999997, 90927958, 90932635, 91129112, 90933891, 90932788, 90935094, 90929091, 90933541, 90984689, 90938941, 90934180, 90924023, 90933282, 90933092, 92294796, 92121423, 90928722, 90927143, 91007103, 90937273, 90935595, 90936018, 90937203, 90931579], "A": [90999219, 90908018, 90908383, 91129044, 90908056, 90908072, 90909135, 90908276, 90908322, 90909230, 90908179, 90908024, 90908751, 90908160, 90908096, 90908554, 90910364, 90910969, 90908122, 90909588], "G": [90977154, 90944389, 90958977, 91129247, 90953059, 90965280, 90969288, 90980892, 90974551, 90962476, 90980693, 90948619, 90945807, 90946996, 90945319, 90958148, 90949510, 90964852, 90966663], "F": [90977148, 90956838, 90944290, 91129137, 90963414, 90954565, 90943343, 90954552, 90955511, 90976453, 90961680, 90961250, 91019872, 91482375, 91348176, 90960811, 91338009, 90994292], "B": [90918673, 90916748, 91129051, 90911853, 90914978, 90917579, 90917952, 90918236, 90916691, 90916458, 90913884, 90919126, 90919862, 90914960, 90914966, 90919061, 90921310, 90914836, 90917699], "C": [90915688, 90920946, 91129078, 90918859, 90921028, 90921919, 90921370, 90923530, 90922399, 90921710, 90918731, 90923624, 90923408, 90918967, 90930451, 90922773, 90925808, 90920451, 90924212]}, "name": "D. Zigzags", "statement": "You are given an array a_1, a_2\r\ndots a_n. Calculate the number of tuples (i, j, k, l) such that: 1\r\nle i < j < k < l\r\nle n; a_i = a_k and a_j = a_l;\r\n", "solutions": ["#include <algorithm>\n#include <array>\n#include <cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\ntemplate<typename T> ostream& operator<<(ostream &os, const vector<T> &v) { os << '{'; string sep; for (const auto &x : v) os << sep << x, sep = \", \"; return os << '}'; }\ntemplate<typename T, size_t size> ostream& operator<<(ostream &os, const array<T, size> &arr) { os << '{'; string sep; for (const auto &x : arr) os << sep << x, sep = \", \"; return os << '}'; }\ntemplate<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }\n\nvoid dbg_out() { cerr << endl; }\ntemplate<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }\n\n#ifdef NEAL_DEBUG\n#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)\n#else\n#define dbg(...)\n#endif\n\n\nvoid run_case() {\n    int N;\n    cin >> N;\n    vector<int> A(N);\n\n    for (auto &a : A) {\n        cin >> a;\n        a--;\n    }\n\n    vector<int> left(N, 0), right(N, 0);\n    int64_t total = 0;\n\n    for (auto &a : A)\n        right[a]++;\n\n    for (int j = 0; j < N; j++) {\n        right[A[j]]--;\n        vector<int> save_right = right;\n\n        for (int k = j + 1; k < N; k++) {\n            right[A[k]]--;\n            total += left[A[k]] * right[A[j]];\n        }\n\n        right = save_right;\n        left[A[j]]++;\n    }\n\n    cout << total << '\\n';\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n#ifndef NEAL_DEBUG\n    cin.tie(nullptr);\n#endif\n\n    int tests;\n    cin >> tests;\n\n    while (tests-- > 0)\n        run_case();\n}\n"], "input": "", "output": "", "tags": ["brute force", "combinatorics", "data structures", "math", "two pointers"], "dificulty": "1900", "interactive": false}