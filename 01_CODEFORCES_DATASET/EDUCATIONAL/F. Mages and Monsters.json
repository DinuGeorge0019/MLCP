{
    "link": "https://codeforces.com//contest/792/problem/F",
    "problemId": "100429",
    "problem_idx": "F",
    "shortId": "792F",
    "contest_number": "792",
    "problem_submissions": {
        "F": [
            25853903,
            25865237
        ],
        "E": [
            25848693,
            25847349,
            25847865,
            25848336,
            25849755,
            25879304,
            25850910,
            25852379,
            25850927,
            25851533,
            25846730,
            25852220,
            25853726,
            25852467,
            25850303,
            25850709,
            25864381,
            25958829
        ],
        "D": [
            25844822,
            25845472,
            25845024,
            25845925,
            25845207,
            25846638,
            25846685,
            25844772,
            25847053,
            25844370,
            25847875,
            25846005,
            25849330,
            25846978,
            25848700,
            25846288,
            25847259,
            25846482,
            25845802
        ],
        "C": [
            25843667,
            25844426,
            25843057,
            25844653,
            25843502,
            25843226,
            25845206,
            25847034,
            25852877,
            25845288,
            25853718,
            25845444,
            25844045,
            25846780,
            25853037,
            25847850,
            25843767,
            25844267,
            25844868,
            25843846
        ],
        "B": [
            25841582,
            25841630,
            25841112,
            25842707,
            25841353,
            25841339,
            25842555,
            25842111,
            25842036,
            25841205,
            25844104,
            25841963,
            25843854,
            25843428,
            25846396,
            25841879,
            25841715,
            25842437,
            25841499
        ],
        "A": [
            25840740,
            25840467,
            25840502,
            25840643,
            25840525,
            25840508,
            25840842,
            25840507,
            25840672,
            25840477,
            25843123,
            25840669,
            25840725,
            25840826,
            25845885,
            25840646,
            25840520,
            25840707,
            25840777
        ]
    },
    "name": "F. Mages and Monsters",
    "statement": "Vova plays a computer game known as Mages and Monsters. Vova\u2019s character\r\nis a mage. Though as he has just started, his character knows no\r\nspells.Vova\u2019s character can learn new spells during the game. Every\r\nspell is characterized by two values and damage per second and mana cost\r\nper second, respectively. Vova doesn\u2019t have to use a spell for an\r\ninteger amount of seconds. More formally, if he uses a spell with damage\r\nand mana cost for seconds, then he will deal damage and spend mana (no\r\nrounding). If there is no mana left (mana amount is set in the start of\r\nthe game and it remains the same at the beginning of every fight), then\r\ncharacter won\u2019t be able to use any spells. It is prohibited to use\r\nmultiple spells simultaneously.Also Vova can fight monsters. Every\r\nmonster is characterized by two values and monster kills Vova\u2019s\r\ncharacter in seconds and has health points. Mana refills after every\r\nfight (or Vova\u2019s character revives with full mana reserve), so previous\r\nfights have no influence on further ones.Vova\u2019s character kills a\r\nmonster, if he deals damage to it in no more than seconds using his\r\nspells (it is allowed to use more than one spell in a fight) and\r\nspending no more mana than he had at the beginning of the fight. .You\r\nhave to write a program which can answer two types of queries: Vova\u2019s\r\ncharacter learns new spell which deals damage per second and costs mana\r\nper second. Vova fights the monster which kills his character in seconds\r\nand has health points. For every query of second type you have to\r\ndetermine if Vova is able to win the fight with corresponding monster.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <set>\n#include <map>\n#include <string>\n#include <vector>\n#include <bitset>\n#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <queue>\n\n#define mp make_pair\n#define pb push_back\n\n\ntypedef long long ll;\ntypedef long double ld;\n\nusing namespace std;\n\n#ifndef LOCAL\n#define cerr _cer\nstruct _cert\n{\n    template <typename T> _cert& operator << (T) { return *this; }\n};\n_cert _cer;\n#endif\n\ntemplate <typename T> void dprint(T begin, T end) {\n    for (auto i = begin; i != end; i++) {\n\t\tcerr << (*i) << \" \";\n    }\n    cerr << \"\\n\";\n}\n\nset<pair<ll, ll> > ss;\nint q;\nll m;\n\nint bd(pair<ll, ll> a, pair<ll, ll> b, pair<ll, ll> c) {\n\tb.first -= a.first;\n\tb.second -= a.second;\n\tc.first -= a.first;\n\tc.second -= a.second;\n\treturn ((ld)b.first * (ld)c.second - (ld)b.second * (ld)c.first) <= 0;\n}\n\nint main() {\n\tscanf(\"%d%lld\", &q, &m);\n\tint ij = 0;\n\tss.insert(make_pair(0, 0));\n\tfor (int i = 0; i < q; ++i) {\n\t\tint k, t, h;\n\t\tll x, y, a, b;\n\t\tscanf(\"%d%d%d\", &k, &t, &h);\n\t\tif (k == 1) {\n\t\t\tx = (t + ij) % 1000000 + 1;\n\t\t\ty = (h + ij) % 1000000 + 1;\n\t\t\tauto it = ss.lower_bound(make_pair(x, 0));\n\t\t\tif (it != ss.end() && it->second <= y)\n\t\t\t\tcontinue;\n\t\t\tauto it2 = prev(it);\n\t\t\tif (it != ss.end() && bd(*it2, make_pair(x, y), *it))\n\t\t\t\tcontinue;\n\t\t\tit = ss.insert(make_pair(x, y)).first;\n\t\t\twhile (next(it) != ss.end() && next(it)->first == x)\n\t\t\t\tss.erase(next(it));\n\t\t\twhile (prev(it) != ss.begin() && bd(*prev(prev(it)), *prev(it), *it))\n\t\t\t\tss.erase(prev(it));\n\t\t}\n\t\telse {\n\t\t\tb = (t + ij) % 1000000 + 1;\n\t\t\ta = (h + ij) % 1000000 + 1;\n\t\t\tauto it = ss.lower_bound(make_pair((a + b - 1) / b, 0));\n\t\t\tint fl = 0;\n\t\t\tif (it != ss.end()) {\n\t\t\t\tif (it->second * b <= m)\n\t\t\t\t\tfl = 1;\n\t\t\t\telse {\n\t\t\t\t\tauto it2 = prev(it);\n\t\t\t\t\tif (bd(make_pair(it2->first * b, it2->second * b), make_pair(a, m), make_pair(it->first * b, it->second * b)))\n\t\t\t\t\t\tfl = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fl) {\n\t\t\t\tprintf(\"YES\\n\");\n\t\t\t\tij = i + 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprintf(\"NO\\n\");\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "geometry"
    ],
    "dificulty": "3100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Mages and Monsters.json",
    "editorial_link": "https://codeforces.com//blog/entry/51254",
    "editorial": "Let\u00e2\u0080\u0099s represent spells as points on cartesian plane. If we consider\r\nthree spells , and such that and is above on the cartesian plane or\r\nbelongs to it, then we don\u00e2\u0080\u0099t need to use spell because we can replace it\r\nwith a linear combination of spells and without any additional mana\r\ncost.We can maintain the lower boundary of the convex hull of all points\r\nfrom -type queries and the point . Then to process -type query we have\r\nto find the intersection of aforementioned lower boundary and the line\r\n(our average damage in this fight has to be at least this value). If\r\nthere is no intersection, then the answer is because even with infinite\r\nmana Vova\u00e2\u0080\u0099s character can\u00e2\u0080\u0099t deal that much damage before dying. If there\r\nis an intersection, we have to check that it is not higher than the line\r\nto ensure that we have enough mana to kill the monster in given time.\r\nModel solution uses only integral calculations, but it seems that\r\nprecision is enough.Time complexity: .\r\n"
}