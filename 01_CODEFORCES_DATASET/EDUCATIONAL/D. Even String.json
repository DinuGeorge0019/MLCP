{
    "link": "https://codeforces.com//contest/2086/problem/D",
    "problemId": "3306523",
    "problem_idx": "D",
    "shortId": "2086D",
    "contest_number": "2086",
    "problem_submissions": {
        "F": [
            313800473,
            313815107,
            313814871,
            313816809,
            313824037,
            313823800,
            313823595,
            313823290,
            313831013,
            313847963
        ],
        "E": [
            313778103,
            313768063,
            313796531,
            313772368,
            313776096,
            313773540,
            313775500,
            313777349,
            313773743,
            313773212,
            313777394,
            313774460,
            313780281,
            313777023,
            313779749,
            313779985,
            313789675,
            313782783,
            313780927
        ],
        "D": [
            313765839,
            313760163,
            313763413,
            313762506,
            313761667,
            313764480,
            313761919,
            313762403,
            313764311,
            313768000,
            313764673,
            313765244,
            313767408,
            313766701,
            313767208,
            313767620,
            313765113,
            313765919,
            313769446
        ],
        "C": [
            313762408,
            313757321,
            313759589,
            313757952,
            313757592,
            313758776,
            313758447,
            313758249,
            313761365,
            313762216,
            313760196,
            313762012,
            313758933,
            313763649,
            313761491,
            313762919,
            313757921,
            313761818
        ],
        "B": [
            313759878,
            313752573,
            313755779,
            313754646,
            313754713,
            313753530,
            313755287,
            313755649,
            313756220,
            313750845,
            313757002,
            313758471,
            313753446,
            313758811,
            313757915,
            313759796,
            313754670,
            313758593
        ],
        "A": [
            313747124,
            313744880,
            313745589,
            313744964,
            313745790,
            313744642,
            313747626,
            313744833,
            313745066,
            313744593,
            313747501,
            313747195,
            313744587,
            313748494,
            313746594,
            313746261,
            313746218,
            313744938
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/141425",
    "editorial": "From the statement, it follows that all identical letters in must be\r\npositioned either at even indices or at odd indices simultaneously.Let’s\r\nexamine how the ways to construct the string are formed: A subset of\r\nletters that we take for the odd positions (the remaining letters will\r\nbe at the even positions); The number of ways to create a string with a\r\nfixed subset of letters at the odd positions. Let denote the sum of the\r\narray . We also denote as the number of odd positions, and as the number\r\nof even positions.For now, let’s ignore the second point and calculate\r\nhow many ways there are to distribute the letters such that we can\r\ncreate at least one suitable string . That is, we need to count the\r\nnumber of ways to choose a set of letters that will occupy the odd\r\npositions. This resembles a modification of the classical knapsack\r\nproblem, which can be solved using dynamic programming. Let denote the\r\nnumber of ways to take a subset of letters such that the number of\r\nletters taken equals . The base case of the dynamic programming is , and\r\nthe entire dynamic can be computed using two nested loops:The number\r\nwe’re interested in will be in .Now we need to understand what to do\r\nwith point . Notice that if we have fixed a subset of letters at the odd\r\npositions, then the number of ways to create the string is equal to the\r\nproduct of the multinomial coefficients:Notice that this product is a\r\nconstant, meaning it does not depend on the specific subset :Thus, the\r\nanswer to the entire problem is simply the product:The total complexity\r\ncomplexity is .\r\n",
    "name": "D. Even String",
    "statement": "You would like to construct a string s, consisting of lowercase Latin\r\nletters, such that the following condition holds: For every pair of\r\nindices i and j such that s_{i} = s_{j}, the difference of these indices\r\nis even, that is, |i - j|\r\nbmod 2 = 0. Constructing any string is too easy, so you will be given an\r\narray c of 26 numbers the required number of occurrences of each\r\nindividual letter in the string s. So, for every i\r\nin [1, 26], the i-th letter of the Latin alphabet should occur exactly\r\nc_i times.Your task is to count the number of distinct strings s that\r\nsatisfy all these conditions. Since the answer can be huge, output it\r\nmodulo 998\r\n,244\r\n,353.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "dp",
        "math",
        "strings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Even String.json"
}