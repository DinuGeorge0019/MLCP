{
    "link": "https://codeforces.com//contest/803/problem/A",
    "problemId": "104506",
    "problem_idx": "A",
    "shortId": "803A",
    "contest_number": "803",
    "problem_submissions": {
        "G": [
            26726035,
            26727236,
            26728097,
            26728472,
            26729664,
            26728547,
            26729890,
            26729652,
            26730512,
            26730113,
            26730878,
            26731530,
            26730264,
            26729609,
            26731875,
            26731225,
            26730998,
            26731497,
            85623556,
            85623400,
            85623203,
            85610564,
            26730604,
            26731476,
            26739085
        ],
        "F": [
            26724381,
            26725200,
            26724999,
            26724225,
            26725048,
            26726085,
            26726135,
            26725801,
            26725931,
            26726156,
            26724237,
            26725565,
            26725769,
            26725975,
            26725077,
            26727341,
            219766415,
            219762164,
            86051599,
            85608329,
            85608294,
            26727055,
            26729462,
            26724972,
            26728098
        ],
        "E": [
            26723728,
            26723918,
            26725958,
            26726239,
            26725998,
            26724505,
            26727035,
            26727052,
            26723853,
            26725311,
            26727501,
            26726914,
            26727667,
            26727932,
            26726295,
            26728308,
            219762036,
            98250927,
            85613733,
            85609978,
            26729021,
            26728273,
            26726912,
            26725646
        ],
        "D": [
            26722977,
            26723233,
            26723695,
            26725081,
            26724545,
            26723805,
            26724818,
            26724584,
            26727766,
            26724054,
            26726588,
            26724927,
            26726822,
            26728941,
            26727298,
            26726013,
            219765850,
            219765028,
            219764202,
            219763496,
            219763057,
            219762723,
            219441244,
            219440803,
            85611079,
            85608311,
            26727687,
            26726965,
            26728216,
            26724323
        ],
        "C": [
            26722334,
            26722568,
            26722532,
            26722824,
            26723265,
            26722578,
            26723153,
            26723401,
            26722404,
            26722763,
            26723297,
            26723217,
            26723235,
            26723982,
            26723346,
            26723675,
            242139836,
            219765419,
            219763158,
            219763096,
            219761007,
            219442588,
            146711212,
            145821319,
            145799672,
            145735366,
            145734989,
            145733450,
            98410618,
            86049796,
            85608695,
            85608222,
            26725413,
            26725578,
            26723041,
            26729567,
            26723237
        ],
        "B": [
            26721944,
            26722045,
            26721880,
            26722109,
            26722081,
            26722066,
            26721973,
            26722263,
            26721992,
            26722120,
            26722619,
            26722232,
            26722292,
            26722323,
            26722429,
            26722715,
            219763640,
            219440626,
            219440279,
            219439802,
            219439698,
            219439657,
            219439387,
            145736466,
            145734257,
            145732182,
            145731921,
            145731518,
            145731457,
            98408561,
            86048023,
            85606269,
            85605951,
            26723519,
            26722908,
            26722174,
            26722306
        ],
        "A": [
            26721819,
            26721835,
            26721801,
            26721879,
            26721871,
            26721890,
            26722559,
            26722009,
            26721857,
            26721866,
            26722146,
            26721862,
            26721911,
            26721970,
            26722141,
            26722309,
            219764352,
            219763598,
            219760906,
            219439616,
            145819775,
            145737562,
            145734009,
            145733505,
            145732992,
            145731371,
            98408337,
            85608245,
            85608205,
            26725229,
            26724294,
            26721926,
            26721904
        ]
    },
    "name": "A. Maximal Binary Matrix",
    "statement": "You are given matrix with rows and columns filled with zeroes. You\r\nshould put ones in it in such a way that the resulting matrix is\r\nsymmetrical with respect to the main diagonal (the diagonal that goes\r\nfrom the top left to the bottom right corner) and is lexicographically\r\nmaximal.One matrix is lexicographically greater than the other if the\r\nfirst different number in the first different row from the top in the\r\nfirst matrix is greater than the corresponding number in the second\r\none.If there exists no such matrix then output .\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <ctime>\n#include <string>\n#include <cstring>\n#include <complex>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define mp make_pair\n\nconst int N = 111;\nint n, k;\nint a[N][N];\n\nint main()\n{\n//    freopen(\"input.txt\", \"r\", stdin);\n//    freopen(\"output.txt\", \"w\", stdout);\n\n    scanf(\"%d%d\", &n, &k);\n    if (k > n * n)\n    {\n        printf(\"-1\\n\");\n        return 0;\n    }\n    for (int i = 0; k > 0 && i < n; i++)\n    {\n        a[i][i] = 1;\n        k--;\n        for (int j = i + 1; k > 1 && j < n; j++)\n        {\n            a[i][j] = a[j][i] = 1;\n            k -= 2;\n        }\n    }\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n            printf(\"%d \", a[i][j]);\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Maximal Binary Matrix.json",
    "editorial_link": "https://codeforces.com//blog/entry/51768",
    "editorial": "Letâs construct matrix from top to bottom, from left to right. At\r\ncurrent step we consider position . Look at contents of cells and . If\r\nnumber of zeroes in them doesnât exceed , then letâs fill those cells\r\nwith ones and decrease by this number.If isnât equal to in the end of\r\nalgorithm, then there is no answer.Overall complexity: .\r\n",
    "hint": []
}