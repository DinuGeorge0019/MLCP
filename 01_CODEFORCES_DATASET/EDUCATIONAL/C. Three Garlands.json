{
    "link": "https://codeforces.com//contest/911/problem/C",
    "problemId": "142497",
    "problem_idx": "C",
    "shortId": "911C",
    "contest_number": "911",
    "problem_submissions": {
        "F": [
            33730338,
            33736236,
            33729501,
            33733851,
            33737431,
            33736160,
            33727192,
            33731600,
            33738270,
            33731121,
            33731406,
            33727367,
            33728276,
            33726638,
            33731778,
            33732737,
            33730029,
            33731049,
            33829722,
            33829713,
            33734856
        ],
        "G": [
            33728994,
            33728318,
            33736310,
            33730624,
            33734693,
            33730072,
            33735518,
            33736927,
            33973095,
            33726198,
            33734145,
            33725486,
            33916145,
            33742312,
            33742380,
            33759087,
            33796642,
            33796567,
            76805271,
            33829935,
            33829896,
            33829810,
            33829610
        ],
        "E": [
            33722163,
            33722735,
            33725907,
            33726299,
            33730629,
            33721023,
            33733522,
            33726343,
            33733907,
            33718645,
            33736707,
            33723912,
            33723633,
            33723315,
            33722403,
            33726466,
            33724328,
            33722719,
            33725898
        ],
        "D": [
            33717830,
            33719177,
            33731193,
            33727114,
            33724269,
            33733276,
            33731713,
            33720741,
            33735525,
            33736390,
            33733900,
            33719447,
            33718488,
            33721217,
            33717781,
            33719325,
            33720612,
            33717555,
            33721885
        ],
        "C": [
            33716749,
            33717557,
            33718909,
            33717327,
            33726728,
            33731930,
            33730836,
            33718913,
            33730374,
            33721277,
            33735066,
            33717357,
            33719578,
            33716462,
            33717823,
            33718307,
            33715178,
            33719484
        ],
        "B": [
            33714368,
            33718005,
            33715412,
            33715624,
            33717403,
            33729431,
            33715928,
            33715342,
            33736651,
            33732506,
            33715356,
            33714796,
            33715837,
            33713865,
            33715844,
            33716072,
            33718139,
            33716208
        ],
        "A": [
            33713428,
            33714079,
            33713974,
            33713612,
            33713484,
            33713403,
            33728723,
            33713514,
            33713445,
            33735048,
            33731862,
            33714094,
            33713551,
            33713430,
            33713412,
            33713709,
            33713489,
            33714231,
            33713552
        ]
    },
    "name": "C. Three Garlands",
    "statement": "Mishka is decorating the Christmas tree. He has got three garlands, and\r\nall of them will be put on the tree. After that Mishka will switch these\r\ngarlands on.When a garland is switched on, it periodically changes its\r\nstate sometimes it is lit, sometimes not. Formally, if -th garland is\r\nswitched on during -th second, then it is lit only during seconds , , ,\r\nand so on.Mishka wants to switch on the garlands in such a way that\r\nduring each second after switching the garlands on there would be at\r\nleast one lit garland. Formally, Mishka wants to choose three integers ,\r\nand (not necessarily distinct) so that he will switch on the first\r\ngarland during -th second, the second one during -th second, and the\r\nthird one during -th second, respectively, and during each second\r\nstarting from at least one garland will be lit.Help Mishka by telling\r\nhim if it is possible to do this!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#ifndef ONLINE_JUDGE\n# include <sys/time.h>\n# include <sys/resource.h>\n#endif\n\n/*** TEMPLATE CODE STARTS HERE ***/\n\n#ifndef M_PI\n#define M_PI 3.1415926535897932384626433832795028841971693993751\n#endif\n\nusing namespace std;\n\ntypedef vector<string> vs;\ntypedef long long ll;\ntypedef complex<double> pnt;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\n#define RA(x) begin(x), end(x)\n#define FE(i, x) for (auto i = begin(x); i != end(x); ++i)\n#define SZ(x) ((ll) (x).size())\n\ntemplate<class T>\nvoid splitstr(const string &s, vector<T> &out)\n{\n    istringstream in(s);\n    out.clear();\n    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));\n}\n\ntemplate<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }\n\nstatic void redirect(int argc, const char **argv)\n{\n#ifndef ONLINE_JUDGE\n    struct rlimit rlim;\n    getrlimit(RLIMIT_STACK, &rlim);\n    rlim.rlim_cur = 256 * 1024 * 1024;\n    setrlimit(RLIMIT_STACK, &rlim);\n#ifndef __SANITIZE_ADDRESS__\n    getrlimit(RLIMIT_DATA, &rlim);\n    rlim.rlim_cur = 256 * 1024 * 1024;\n    setrlimit(RLIMIT_DATA, &rlim);\n#endif\n#endif\n\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n    if (argc > 1)\n    {\n        static filebuf f;\n        f.open(argv[1], ios::in);\n        cin.rdbuf(&f);\n        if (!cin)\n        {\n            cerr << \"Failed to open '\" << argv[1] << \"'\" << endl;\n            exit(1);\n        }\n    }\n\n    if (argc > 2)\n    {\n        static filebuf f;\n        f.open(argv[2], ios::out | ios::trunc);\n        cout.rdbuf(&f);\n        if (!cout)\n        {\n            cerr << \"Failed to open '\" << argv[2] << \"'\" << endl;\n        }\n    }\n}\n\n/*** TEMPLATE CODE ENDS HERE */\n\nint main(int argc, const char **argv)\n{\n    redirect(argc, argv);\n    int K[3];\n    cin >> K[0] >> K[1] >> K[2];\n    sort(RA(K));\n    bool good = (K[0] == 1)\n        || (K[0] == 2 && K[1] == 2)\n        || (K[0] == 2 && K[1] == 4 && K[2] == 4)\n        || (K[0] == 3 && K[1] == 3 && K[2] == 3);\n    cout << (good ? \"YES\\n\" : \"NO\\n\");\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Three Garlands.json",
    "editorial_link": "https://codeforces.com/blog/entry/56771",
    "editorial": "There are pretty few cases to have : One of is equal to ; At least two\r\nof are equal to ; All equal ; . It\u00e2\u0080\u0099s easy to notice that having minimum\r\nof equal to produce the only case, greater numbers will always miss some\r\nseconds. Let\u00e2\u0080\u0099s consider minimum of , let it cover all odd seconds. Now\r\nyou should cover all even seconds and and are the only possible\r\nsolutions.Overall complexity: .\r\n"
}