{
    "link": "https://codeforces.com//contest/1221/problem/B",
    "problemId": "415608",
    "problem_idx": "B",
    "shortId": "1221B",
    "contest_number": "1221",
    "problem_submissions": {
        "G": [
            60878901,
            60954325,
            60892510,
            60889777,
            60939440,
            60957169,
            60954037,
            60954018,
            60887759,
            60892512,
            61066187,
            60888304,
            60953665,
            60884074
        ],
        "F": [
            60872429,
            60906430,
            60877026,
            60879328,
            60873795,
            60880496,
            60880041,
            60882317,
            60876205,
            60881638,
            60879016,
            60884701,
            60883109,
            60876230,
            60885368,
            60884882,
            60888631,
            60877275
        ],
        "E": [
            60865427,
            60906424,
            60870455,
            60872355,
            60881944,
            60867813,
            60873346,
            60871774,
            60882236,
            60957159,
            60869840,
            60865430,
            60870324,
            60874697,
            60871945,
            60886034,
            60875073,
            60873664,
            60883200,
            60875153,
            60886105,
            60887173
        ],
        "D": [
            60858978,
            60906413,
            60858963,
            60862133,
            60857697,
            60858483,
            60858390,
            60860167,
            60862000,
            60957149,
            60859058,
            60857548,
            60865511,
            60860504,
            60857388,
            60865183,
            60887076,
            60866989,
            60863673,
            60861492,
            60857971,
            60867806,
            60885376
        ],
        "C": [
            60854799,
            60906405,
            60854087,
            60858148,
            60855694,
            60855339,
            60856078,
            60857408,
            60859538,
            60957138,
            60855511,
            60854166,
            60860646,
            60858018,
            60854647,
            60856215,
            60857135,
            60857947,
            60855000,
            60855230,
            60864597,
            60884317
        ],
        "B": [
            60853702,
            60906395,
            60853284,
            60856858,
            60853405,
            60869020,
            60854977,
            60855791,
            60854474,
            60957129,
            60854297,
            60853117,
            60859658,
            60856090,
            60853528,
            60854286,
            60855985,
            60856982,
            60854601,
            60853843,
            60862970,
            60883738
        ],
        "A": [
            60853175,
            60906382,
            60852746,
            60855419,
            60852846,
            60852969,
            60852978,
            60853994,
            60853299,
            60957119,
            60852836,
            60852764,
            60858768,
            60853799,
            60852813,
            60853187,
            60854280,
            60853549,
            60853275,
            60852850,
            60861325,
            60883303
        ]
    },
    "name": "B. Knights",
    "statement": "You are given a chess board with n rows and n columns. Initially all\r\ncells of the board are empty, and you have to put a white or a black\r\nknight into each cell of the board.A knight is a chess piece that can\r\nattack a piece in cell (x_2, y_2) from the cell (x_1, y_1) if one of the\r\nfollowing conditions is met: |x_1 - x_2| = 2 and |y_1 - y_2| = 1, or\r\n|x_1 - x_2| = 1 and |y_1 - y_2| = 2. Here are some examples of which\r\ncells knight can attack. In each of the following pictures, if the\r\nknight is currently in the blue cell, it can attack all red cells (and\r\nonly them). A is a pair of knights of colors such that these knights\r\nattack each other. You have to put a knight (a white one or a black one)\r\ninto each cell in such a way that the number of duels is maximum\r\npossible.\r\n",
    "solutions": [
        "#ifdef DEBUG\n#define _GLIBCXX_DEBUG\n#endif\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long double ld;\ntypedef long long ll;\nint n;\nvoid solve() {\n    cin >> n;\n    vector < int > all;\n    for (int i = 0; i < n; i++) {\n        int x;\n        cin >> x;\n        if (x > 2048) continue;\n        int y = 0;\n        while ((1 << y) < x) y++;\n        all.push_back(y);\n    }\n    sort(all.begin(), all.end());\n    reverse(all.begin(), all.end());\n    for (int i = 0; i < 11; i++) {\n        vector < int > nall;\n        int cnt = 0;\n        for (int j = 0; j < all.size(); j++) {\n            if (all[j] == i) cnt++;\n            else nall.push_back(all[j]);\n        }\n        for (int p = 0; p < cnt / 2; p++) nall.push_back(i + 1);\n        all = nall;\n    }\n    if (!all.empty()) cout << \"YES\" << '\\n';\n    else cout << \"NO\" << '\\n';\n}\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    //freopen(\"input.txt\", \"r\", stdin);\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if ((i + j) & 1) cout << \"W\";\n            else cout << \"B\";\n        }\n        cout << '\\n';\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Knights.json",
    "editorial_link": "https://codeforces.com//blog/entry/69925",
    "editorial": "Letâs denote a cell (, ) as if is even, otherwise the cell is . Itâs\r\neasy to see that if a knight is occupying a black cell, then all cells\r\nattacked by it are white, and vice versa.Using this fact, we can\r\nconstruct a solution where every pair of knights that attack each other\r\nhave different colors put black knights into black cells, and white\r\nknights into white cells, so every pair of knights that can possibly\r\nform a duel actually form it.\r\n",
    "hint": []
}