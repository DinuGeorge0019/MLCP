{"link": "https://codeforces.com//contest/1948/problem/F", "problemId": "2532318", "problem_idx": "F", "shortId": "1948F", "contest_number": "1948", "problem_submissions": {"G": [251472376, 251497915, 251480984, 251480163, 251489959, 251467292, 251485648, 251500573, 251486197, 251512722, 251521639, 251480657, 251509802, 251528428, 251520218, 251515719, 251959006, 251871508, 251537711, 251535946, 251529016, 251516034, 251533510, 251533892], "E": [251455000, 251464649, 251452268, 251480095, 251460808, 251464897, 251506007, 251480198, 251478117, 251501414, 251479798, 251486494, 251498878, 251484347, 251486715, 251474115, 251485874, 251484195, 251499420], "F": [251446403, 251454570, 251464038, 251471618, 251471081, 251484983, 251475462, 251495125, 251493237, 251458734, 251522756, 251503819, 251513774, 251502504, 251506031, 251513492, 251502955, 251521827, 251479729], "D": [251428147, 251500203, 251431497, 251439266, 251434727, 251440547, 251446816, 251446867, 251456743, 251442045, 251470051, 251447446, 251460726, 251467120, 251467499, 251465257, 251451922, 251465519, 251467189, 251458845], "C": [251425049, 251426495, 251431074, 251427750, 251427491, 251433261, 251437529, 251439503, 251431968, 251453203, 251439755, 251452383, 251446018, 251457382, 251439370, 251471934, 251459502, 251461525, 251447180], "B": [251421706, 251420680, 251422950, 251421537, 251420205, 251424082, 251426365, 251440040, 251423639, 251430207, 251430125, 251435004, 251430108, 251439531, 251427186, 251441008, 251448490, 251446251, 251436268], "A": [251419288, 251417353, 251417664, 251417432, 251417471, 251418376, 251419094, 251418141, 251417555, 251419693, 251424986, 251423459, 251419168, 251420360, 251418645, 251426543, 251449327, 251430256, 251427243]}, "name": "F. Rare Coins", "statement": "There are n bags numbered from 1 to n, the i-th bag contains a_i golden\r\ncoins and b_i silver coins.The value of a gold coin is 1. The value of a\r\nsilver coin is either 0 or 1, determined for each silver coin\r\nindependently (0 with probability\r\nfrac{1}{2}, 1 with probability\r\nfrac{1}{2}).You have to answer q independent queries. Each query is the\r\nfollowing: l r calculate the probability that the total value of coins\r\nin bags from l to r is strictly greater than the total value in all\r\nother bags.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 15.03.2024 10:47:50\n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\ntemplate <typename T>\nT inverse(T a, T m) {\n  T u = 0, v = 1;\n  while (a != 0) {\n    T t = m / a;\n    m -= t * a; swap(a, m);\n    u -= t * v; swap(u, v);\n  }\n  assert(m == 1);\n  return u;\n}\n\ntemplate <typename T>\nclass Modular {\n public:\n  using Type = typename decay<decltype(T::value)>::type;\n\n  constexpr Modular() : value() {}\n  template <typename U>\n  Modular(const U& x) {\n    value = normalize(x);\n  }\n\n  template <typename U>\n  static Type normalize(const U& x) {\n    Type v;\n    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);\n    else v = static_cast<Type>(x % mod());\n    if (v < 0) v += mod();\n    return v;\n  }\n\n  const Type& operator()() const { return value; }\n  template <typename U>\n  explicit operator U() const { return static_cast<U>(value); }\n  constexpr static Type mod() { return T::value; }\n\n  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }\n  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }\n  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }\n  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }\n  Modular& operator++() { return *this += 1; }\n  Modular& operator--() { return *this -= 1; }\n  Modular operator++(int) { Modular result(*this); *this += 1; return result; }\n  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }\n  Modular operator-() const { return Modular(-value); }\n\n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {\n    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));\n    return *this;\n  }\n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, long long>::value, Modular>::type& operator*=(const Modular& rhs) {\n    long long q = static_cast<long long>(static_cast<long double>(value) * rhs.value / mod());\n    value = normalize(value * rhs.value - q * mod());\n    return *this;\n  }\n  template <typename U = T>\n  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {\n    value = normalize(value * rhs.value);\n    return *this;\n  }\n\n  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }\n\n  friend const Type& abs(const Modular& x) { return x.value; }\n\n  template <typename U>\n  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);\n\n  template <typename U>\n  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);\n\n  template <typename V, typename U>\n  friend V& operator>>(V& stream, Modular<U>& number);\n\n private:\n  Type value;\n};\n\ntemplate <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }\ntemplate <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }\ntemplate <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }\n\ntemplate <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\n\ntemplate <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }\n\ntemplate <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\n\ntemplate <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\n\ntemplate <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\n\ntemplate <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\n\ntemplate<typename T, typename U>\nModular<T> power(const Modular<T>& a, const U& b) {\n  assert(b >= 0);\n  Modular<T> x = a, res = 1;\n  U p = b;\n  while (p > 0) {\n    if (p & 1) res *= x;\n    x *= x;\n    p >>= 1;\n  }\n  return res;\n}\n\ntemplate <typename T>\nbool IsZero(const Modular<T>& number) {\n  return number() == 0;\n}\n\ntemplate <typename T>\nstring to_string(const Modular<T>& number) {\n  return to_string(number());\n}\n\n// U == std::ostream? but done this way because of fastoutput\ntemplate <typename U, typename T>\nU& operator<<(U& stream, const Modular<T>& number) {\n  return stream << number();\n}\n\n// U == std::istream? but done this way because of fastinput\ntemplate <typename U, typename T>\nU& operator>>(U& stream, Modular<T>& number) {\n  typename common_type<typename Modular<T>::Type, long long>::type x;\n  stream >> x;\n  number.value = Modular<T>::normalize(x);\n  return stream;\n}\n\n/*\nusing ModType = int;\n\nstruct VarMod { static ModType value; };\nModType VarMod::value;\nModType& md = VarMod::value;\nusing Mint = Modular<VarMod>;\n*/\n\nconstexpr int md = 998244353;\nusing Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;\n\nvector<Mint> fact(1, 1);\nvector<Mint> inv_fact(1, 1);\n\nMint C(int n, int k) {\n  if (k < 0 || k > n) {\n    return 0;\n  }\n  while ((int) fact.size() < n + 1) {\n    fact.push_back(fact.back() * (int) fact.size());\n    inv_fact.push_back(1 / fact.back());\n  }\n  return fact[n] * inv_fact[k] * inv_fact[n - k];\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n, q;\n  cin >> n >> q;\n  vector<int> a(n);\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n  }\n  vector<int> b(n);\n  for (int i = 0; i < n; i++) {\n    cin >> b[i];\n  }\n  vector<int> pa(n + 1);\n  for (int i = 0; i < n; i++) {\n    pa[i + 1] = pa[i] + a[i];\n  }\n  vector<int> pb(n + 1);\n  for (int i = 0; i < n; i++) {\n    pb[i + 1] = pb[i] + b[i];\n  }\n  int coins = pb[n];\n  vector<Mint> ans(coins + 1);\n  for (int i = coins - 1; i >= 0; i--) {\n    ans[i] = ans[i + 1] + C(coins, i + 1);\n  }\n  auto inv_den = 1 / power(Mint(2), coins);\n  while (q--) {\n    int l, r;\n    cin >> l >> r;\n    --l;\n    auto in_a = pa[r] - pa[l];\n    auto in_b = pb[r] - pb[l];\n    auto out_a = pa[n] - in_a;\n    auto out_b = pb[n] - in_b;\n    // in_a + rand(in_b) > out_a + rand(out_b)\n    // rand(in_b + out_b) > out_a + out_b - in_a\n    auto bound = out_a + out_b - in_a;\n    cout << (bound >= coins ? 0 : (bound < 0 ? 1 : ans[bound] * inv_den)) << '\\n';\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["combinatorics", "math", "probabilities"], "dificulty": "2500", "interactive": false}