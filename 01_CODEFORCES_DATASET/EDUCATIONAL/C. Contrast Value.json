{
    "link": "https://codeforces.com//contest/1832/problem/C",
    "problemId": "1919533",
    "problem_idx": "C",
    "shortId": "1832C",
    "contest_number": "1832",
    "problem_submissions": {
        "F": [
            205612816,
            205618187,
            205616065,
            205615360,
            205612997,
            205612699,
            205616615,
            205704621,
            205757584,
            205930525,
            205621852,
            205621757
        ],
        "E": [
            205588370,
            205576685,
            205587590,
            205562791,
            205578695,
            205581418,
            205576017,
            205588938,
            205587310,
            205585791,
            205594909,
            205587637,
            205568079,
            205590489,
            205592123,
            205595293,
            205581468,
            205598039,
            205585624
        ],
        "D1": [
            205582572,
            205571409,
            205573052,
            205565935,
            205571345,
            205569679,
            205567398,
            205577948,
            205578327,
            205578690,
            205578885,
            205573631,
            205580478,
            205584975,
            205584642,
            205576123,
            205577262,
            205587661,
            205590424,
            205578991,
            205594286
        ],
        "D2": [
            205582469,
            205571220,
            205573149,
            205573248,
            205571140,
            205587711,
            205587841,
            205578108,
            205578462,
            205578510,
            205604647,
            205579021,
            205580354,
            205589204,
            205584769,
            205584072,
            205587751,
            205599151,
            205586621,
            205599536
        ],
        "C": [
            205557102,
            205556400,
            205556488,
            205552484,
            205557070,
            205556143,
            205558460,
            205557880,
            205559387,
            205559279,
            205557942,
            205559043,
            205556434,
            205554797,
            205556994,
            205564356,
            205564037,
            205562522,
            205562917
        ],
        "B": [
            205552451,
            205550855,
            205551794,
            205549640,
            205552032,
            205552318,
            205551056,
            205550768,
            205554849,
            205551853,
            205553247,
            205555210,
            205553102,
            205550776,
            205552302,
            205556686,
            205557181,
            205553564,
            205556320
        ],
        "A": [
            205549496,
            205548656,
            205548697,
            205548635,
            205548771,
            205548615,
            205548617,
            205548590,
            205549420,
            205548691,
            205549006,
            205548793,
            205548840,
            205548603,
            205548831,
            205550263,
            205548997,
            205555130,
            205552258
        ]
    },
    "name": "C. Contrast Value",
    "statement": "For an array of integers [a_1, a_2,\r\ndots, a_n], let\u2019s call the value |a_1-a_2|+|a_2-a_3|+\r\ncdots+|a_{n-1}-a_n| the of the array. Note that the contrast of an array\r\nof size 1 is equal to 0.You are given an array of integers a. Your task\r\nis to build an array of b in such a way that all the following\r\nconditions are met: b is not empty, i.e there is at least one element; b\r\nis a subsequence of a, i.e b can be produced by deleting some elements\r\nfrom a (maybe zero); the contrast of b is equal to the contrast of a.\r\nWhat is the minimum possible size of the array b?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n;\n    std::cin >> n;\n    \n    std::vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> a[i];\n    }\n    n = std::unique(a.begin(), a.end()) - a.begin();\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        if (((i == 0 || a[i] > a[i - 1]) && (i == n - 1 || a[i] > a[i + 1]))\n            || ((i == 0 || a[i] < a[i - 1]) && (i == n - 1 || a[i] < a[i + 1]))) {\n            ans++;\n        }\n    }\n    std::cout << ans << \"\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Contrast Value.json",
    "editorial_link": "https://codeforces.com//blog/entry/116454",
    "editorial": "Let\u00e2\u0080\u0099s rephrase the problem in the following form: let the elements of\r\nthe array be points on a coordinate line. Then the absolute difference\r\nbetween two adjacent elements of the array can be represented as the\r\ndistance between two points, and the contrast of the entire array is\r\nequal to the total distance to visit all points in the given order.In\r\nthis interpretation, it becomes obvious that removing any set of points\r\ndoes not increase contrast. Since the resulting contrast should be equal\r\nto the original one, we can only remove elements from the array that do\r\nnot decrease the contrast.First of all, let\u00e2\u0080\u0099s look at consecutive equal\r\nelements, it is obvious that you can delete all of them except one, and\r\nthe contrast of the array will not change. In some languages, you can\r\nuse a standard function to do this for example, in C++ you can use\r\n.After that, let\u00e2\u0080\u0099s look at such positions that ; you can delete the -th\r\nelement, because . Similarly, for positions , where , the element can be\r\nremoved. In all other cases, removing the element will decrease the\r\ncontrast.\r\n"
}