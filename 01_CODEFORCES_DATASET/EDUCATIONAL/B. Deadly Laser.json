{
    "link": "https://codeforces.com//contest/1721/problem/B",
    "problemId": "1521725",
    "problem_idx": "B",
    "shortId": "1721B",
    "contest_number": "1721",
    "problem_submissions": {
        "F": [
            169847425,
            169855093,
            169874051,
            169859751,
            169871554,
            169869426,
            169892039,
            169866057,
            169866260,
            169879985,
            169882444,
            169880200,
            169868972,
            169943924,
            169887978,
            169882264,
            169879150,
            169868978,
            169868554,
            169884451,
            169886386,
            169884169,
            169836583,
            169890280,
            169889729
        ],
        "E": [
            169825445,
            169831576,
            169846355,
            169845815,
            169845247,
            169849940,
            170071212,
            169840961,
            169843652,
            169842409,
            169855809,
            169853200,
            169849055,
            169861077,
            169848556,
            169841458,
            169835951,
            169859126,
            169853059,
            169861299,
            169890819,
            169860030,
            169851763,
            169839234
        ],
        "D": [
            169816642,
            169857780,
            169827464,
            169828353,
            169825938,
            169823055,
            169827534,
            169839208,
            169826501,
            169831272,
            169830277,
            169840516,
            169830590,
            169829045,
            169820762,
            169829319,
            169841817,
            169849956,
            169828079,
            169855346,
            169832685
        ],
        "C": [
            169812006,
            169821873,
            169865515,
            169815093,
            169818535,
            169828842,
            169823304,
            169816953,
            169821336,
            169818460,
            169821914,
            169817547,
            169822314,
            169825383,
            169842253,
            169820059,
            169823503,
            169835000,
            169824388,
            169861925,
            169815457
        ],
        "B": [
            169804991,
            169810857,
            169806854,
            169811441,
            169813569,
            169810575,
            169808902,
            169808903,
            169811401,
            169810906,
            169807229,
            169812143,
            169813395,
            169807352,
            169812235,
            169815520,
            169825227,
            169814779,
            169864673,
            169808536
        ],
        "A": [
            169804030,
            169804283,
            169861742,
            169804044,
            169806500,
            169805484,
            169806996,
            169804568,
            169805103,
            169805093,
            169804586,
            169804045,
            169804642,
            169805849,
            169804015,
            169804388,
            169808577,
            169817992,
            169808806,
            169866242,
            169804342
        ]
    },
    "name": "B. Deadly Laser",
    "statement": "The robot is placed in the top left corner of a grid, consisting of n\r\nrows and m columns, in a cell (1, 1).In one step, it can move into a\r\ncell, adjacent by a side to the current one: (x, y)\r\nrightarrow (x, y + 1); (x, y)\r\nrightarrow (x + 1, y); (x, y)\r\nrightarrow (x, y - 1); (x, y)\r\nrightarrow (x - 1, y). The robot can’t move outside the grid.The cell\r\n(s_x, s_y) contains a deadly laser. If the robot comes into some cell\r\nthat has distance less than or equal to d to the laser, it gets\r\nevaporated. The distance between two cells (x_1, y_1) and (x_2, y_2) is\r\n|x_1 - x_2| + |y_1 - y_2|.Print the smallest number of steps that the\r\nrobot can take to reach the cell (n, m) without getting evaporated or\r\nmoving outside the grid. If it’s not possible to reach the cell (n, m),\r\nprint .The laser is neither in the starting cell, nor in the ending\r\ncell. The starting cell always has distance greater than d to the laser.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n, m, x, y, d;\n    std::cin >> n >> m >> x >> y >> d;\n    \n    if ((y - d <= 1 || x + d >= n) && (y + d >= m || x - d <= 1)) {\n        std::cout << \"-1\\n\";\n    } else {\n        std::cout << n + m - 2 << \"\\n\";\n    }\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Deadly Laser.json",
    "editorial_link": "https://codeforces.com//blog/entry/106416",
    "editorial": "First, letâs determine if itâs possible to reach the end at all. If the\r\nlaserâs field doesnât span until any wall, then itâs surely possible\r\njust stick to the wall yourself.If it touches at most one wall, itâs\r\nstill possible. If itâs the bottom wall or the left wall, then take the\r\npath close to the top and the right wall. Vice versa, if itâs the top\r\nwall or the right wall, then take the path close to the bottom and the\r\nleft wall.What if both of these paths are locked? That means that the\r\nlaser touches at least two walls at the same time: the top one and the\r\nleft one, or the bottom one and the right one. Turns out, itâs\r\ncompletely impossible to reach the end in either of these two cases.\r\nJust draw a picture and see for yourself.Thus, we can always take at\r\nleast one of the path sticking to the walls. The distance from the start\r\nto the end is , and both of these paths are exactly this long. So the\r\nanswer is always either or .To check if the laser touches a wall with\r\nits field, you can either use a formula or check every cell adjacent to\r\na wall.Overall complexity: or per testcase.\r\n",
    "hint": []
}