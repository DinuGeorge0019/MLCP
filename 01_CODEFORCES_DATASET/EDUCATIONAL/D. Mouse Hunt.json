{
    "link": "https://codeforces.com//contest/1027/problem/D",
    "problemId": "209491",
    "problem_idx": "D",
    "shortId": "1027D",
    "contest_number": "1027",
    "problem_submissions": {
        "G": [
            41777591,
            41794075,
            41789651,
            41795096,
            41939341,
            41938165,
            41796137,
            42098879,
            42133042
        ],
        "E": [
            41771294,
            41773308,
            41779379,
            41769311,
            41773946,
            41775704,
            41772136,
            41773355,
            41779847,
            41781989,
            41784347,
            41777571,
            41784573,
            41777063,
            41778773,
            41776995,
            41786639,
            41778631,
            41778849,
            41779109
        ],
        "F": [
            41768065,
            41785375,
            41776031,
            41777064,
            64515193,
            41778051,
            41781324,
            41779089,
            41778653,
            41776480,
            41776867,
            41774399,
            41778108,
            41783735,
            41779480,
            41782813,
            41784214,
            42675272,
            42673408,
            41785662,
            41778618,
            41786449,
            41792717,
            41792403,
            41790072,
            41787559,
            41785600
        ],
        "D": [
            41766114,
            41769377,
            41772019,
            41765799,
            41768093,
            41767980,
            41769938,
            41769777,
            41767951,
            41766660,
            41768756,
            41770224,
            41770243,
            41773173,
            41773790,
            41772403,
            41773900,
            41774900,
            41773430,
            41773585
        ],
        "C": [
            41765079,
            41766031,
            41768208,
            41764342,
            41765993,
            41765549,
            41767982,
            41768445,
            41764158,
            41772730,
            41766169,
            41767810,
            41767876,
            41767390,
            41770932,
            41768551,
            41769543,
            41768596,
            41768222,
            41768699,
            41769864,
            41769626
        ],
        "B": [
            41762630,
            41763189,
            41765301,
            41762037,
            41763563,
            41762756,
            41764132,
            41765033,
            41765562,
            41762467,
            41763527,
            41764762,
            41763245,
            41763720,
            41763112,
            41766236,
            41764943,
            41765112,
            41765051,
            41766842
        ],
        "A": [
            41761297,
            41761064,
            41763316,
            41761011,
            41761231,
            41761105,
            41761008,
            41761632,
            41761600,
            41761296,
            41761079,
            41761346,
            41761160,
            41761251,
            41761159,
            41761563,
            41761142,
            41761529,
            41761274,
            41764617
        ]
    },
    "name": "D. Mouse Hunt",
    "statement": "Medicine faculty of Berland State University has just finished their\r\nadmission campaign. As usual, about 80\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define mp make_pair\n\nconst int N = 200200;\nint n;\nint g[N];\nint c[N];\nint deg[N];\nint q[N];\nint topQ;\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%d\", &c[i]);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%d\", &g[i]);\n\t\tg[i]--;\n\t\tdeg[g[i]]++;\n\t}\n\tfor (int v = 0; v < n; v++)\n\t\tif (deg[v] == 0)\n\t\t\tq[topQ++] = v;\n\tfor (int i = 0; i < topQ; i++) {\n\t\tint v = q[i];\n\t\tdeg[g[v]]--;\n\t\tif (deg[g[v]] == 0)\n\t\t\tq[topQ++] = g[v];\n\t}\n\tint ans = 0;\n\tfor (int v = 0; v < n; v++) {\n\t\tif (deg[v] == 0) continue;\n\t\tint u = v;\n\t\tint cur = (int)1e9;\n\t\twhile(deg[u] != 0) {\n\t\t\tdeg[u] = 0;\n\t\t\tcur = min(cur, c[u]);\n\t\t\tu = g[u];\n\t\t}\n\t\tans += cur;\n\t}\n\tprintf(\"%d\\n\", ans);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Mouse Hunt.json",
    "editorial_link": "https://codeforces.com//blog/entry/61311",
    "editorial": "Mouse jumps on a cycle at some point, no matter the starting vertex,\r\nthus itâs always the most profitable to set traps on cycles. The\r\nstructure of the graph implies that there are no intersecting cycles.\r\nMoreover, mouse will visit each vertex of the cycle, so itâs enough to\r\nset exactly one trap on each cycle. The only thing left is to find the\r\ncheapest vertex of each cycle. This can be done by a simple dfs.Overall\r\ncomplexity: .\r\n",
    "hint": []
}