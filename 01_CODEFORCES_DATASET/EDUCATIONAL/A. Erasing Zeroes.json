{
    "link": "https://codeforces.com//contest/1303/problem/A",
    "problemId": "538600",
    "problem_idx": "A",
    "shortId": "1303A",
    "contest_number": "1303",
    "problem_submissions": {
        "G": [
            71097266,
            70883386,
            70955431,
            70955302,
            71079595,
            71079587,
            71079399,
            71079349,
            71033664,
            70936374,
            70936308,
            70936214,
            70880989,
            70891160,
            70926122,
            70886272,
            71216890,
            71204250,
            70902620,
            71200015,
            70940169,
            71279910,
            70899562,
            71278035,
            70896282,
            70900541,
            70900494
        ],
        "F": [
            71044888,
            71044744,
            70899994,
            70890051,
            70888815,
            70932923,
            70932898,
            70932421,
            70932306,
            70932207,
            70932013,
            70931555,
            70915800,
            70904497,
            70912908,
            70884185,
            138818627,
            70892348,
            70886515,
            70891950,
            71199846,
            70884407,
            70897531,
            70893903,
            70894963,
            70893107,
            70925189,
            70924800,
            70897907
        ],
        "E": [
            70868559,
            70868408,
            70868922,
            70872692,
            70869150,
            70869901,
            70874174,
            70872386,
            70874403,
            70875550,
            71199810,
            70873171,
            70863746,
            70871476,
            70905263,
            70869281,
            70875226,
            70874988,
            70881045,
            70874968,
            70882383,
            70877044
        ],
        "D": [
            70863251,
            70862650,
            70863288,
            70862684,
            70865048,
            70865462,
            70867179,
            70866583,
            70869772,
            70868436,
            71199774,
            70869707,
            70873016,
            70865851,
            70862875,
            70869379,
            70868162,
            70869500,
            70869186,
            70873860,
            70869244
        ],
        "C": [
            70859686,
            70858172,
            70859652,
            70865909,
            70861024,
            70860138,
            70862819,
            70861003,
            70864530,
            70863875,
            71199753,
            70865732,
            70856962,
            70860948,
            70858736,
            70863123,
            70860398,
            70864062,
            70861729,
            70862531,
            70860453
        ],
        "B": [
            70855213,
            70854594,
            70853630,
            70935416,
            70856554,
            70855070,
            70861321,
            70855979,
            70856395,
            70857261,
            70857192,
            71199724,
            70861383,
            70852833,
            70856458,
            70855360,
            70857332,
            70856143,
            70857430,
            70853208,
            70856253,
            70853781
        ],
        "A": [
            70849936,
            70850631,
            70849990,
            70849934,
            70850041,
            70849959,
            70849980,
            70850863,
            70852663,
            70850352,
            71199700,
            70859542,
            70849914,
            70851564,
            70849996,
            70851983,
            70850145,
            70850480,
            70850071,
            70850741,
            70850778
        ]
    },
    "name": "A. Erasing Zeroes",
    "statement": "You are given a string s. Each character is either or .You want all \u2019s\r\nin the string to form a contiguous subsegment. For example, if the\r\nstring is , , or , then all \u2019s form a contiguous subsegment, and if the\r\nstring is , or , then this condition is not met.You may erase some\r\n(possibly none) \u2019s from the string. What is the minimum number of \u2019s\r\nthat you have to erase?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll long long\n#define ar array\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\n\tint t;\n\tcin >> t;\n\twhile(t--) {\n\t\tstring s;\n\t\tcin >> s;\n\t\tint l=0, r=s.size()-1;\n\t\twhile(l<s.size()&&s[l]=='0')\n\t\t\t++l;\n\t\twhile(~r&&s[r]=='0')\n\t\t\t--r;\n\t\tint c=0;\n\t\tfor(int i=l; i<=r; ++i)\n\t\t\tc+=s[i]!='1';\n\t\tcout << c << \"\\n\";\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Erasing Zeroes.json",
    "editorial_link": "https://codeforces.com//blog/entry/73872",
    "editorial": "Let\u00e2\u0080\u0099s find the first and the last position of -characters (denote them\r\nas and respectively). Since the can\u00e2\u0080\u0099t delete -characters, all\r\n-characters between and will remain. So, we have to delete all\r\n-characters between and .\r\n"
}