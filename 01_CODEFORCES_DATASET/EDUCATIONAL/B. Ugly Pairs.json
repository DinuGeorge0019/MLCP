{
    "link": "https://codeforces.com//contest/1156/problem/B",
    "problemId": "338449",
    "problem_idx": "B",
    "shortId": "1156B",
    "contest_number": "1156",
    "problem_submissions": {
        "A": [
            53639029,
            53626152,
            53625678,
            53630793,
            53625404,
            53614352,
            53623128,
            53628986,
            53624721,
            53623695,
            53625017,
            53634723,
            53624542,
            53628079,
            53633627,
            53624437,
            53623236,
            53629488,
            53623966,
            53615060
        ],
        "B": [
            53637891,
            53617977,
            53617293,
            53625525,
            53620909,
            53621377,
            53618385,
            53633927,
            53620068,
            53619804,
            53621825,
            53614635,
            53623085,
            53633560,
            53636498,
            53618667,
            53619022,
            53619496,
            53620680,
            53624386
        ],
        "C": [
            53636621,
            53619670,
            53619150,
            53614135,
            53617663,
            53625504,
            53624957,
            53661619,
            53635201,
            53626601,
            53622201,
            53615675,
            53635681,
            53619089,
            53620360,
            53614001,
            53620016,
            53634903,
            53620881,
            53615566,
            53626189
        ],
        "G": [
            53635130,
            53641842,
            53954352,
            53641770,
            203176755,
            53643379
        ],
        "D": [
            53620605,
            53623897,
            53623535,
            53629070,
            53631245,
            53633026,
            53629459,
            53616004,
            53628435,
            53632954,
            53632904,
            53620339,
            53632312,
            53623609,
            53618157,
            53629146,
            53629263,
            53627644,
            53629790,
            53630995
        ],
        "F": [
            53617719,
            53632417,
            53636572,
            53634637,
            53627300,
            53636941,
            53634698,
            53625519,
            53635307,
            53636482,
            53636370,
            53630747,
            53636740,
            53635472,
            53633389,
            53637182,
            53632117,
            53637419,
            53635743,
            53636158
        ],
        "E": [
            53614077,
            53629771,
            53629915,
            53618247,
            53637367,
            53630569,
            53631126,
            53661599,
            53620934,
            53631115,
            53629004,
            53629934,
            53625980,
            53630101,
            53619260,
            53627891,
            53632780,
            53621624,
            53634838,
            53638304,
            53634716
        ]
    },
    "name": "B. Ugly Pairs",
    "statement": "You are given a string, consisting of lowercase Latin letters.A pair of\r\nletters in a string is considered ugly if these letters are also in a\r\nalphabet. For example, string \"\" contains ugly pairs at positions (1, 2)\r\n\"\" and (2, 3) \"\". Letters \u201d and \u201d aren\u2019t considered neighbouring in a\r\nalphabet.Can you rearrange the letters of a given string so that there\r\nare no ugly pairs? You can choose any order of the letters of the given\r\nstring but you can\u2019t add any new letters or remove the existing ones.\r\nYou can also leave the order the same.If there are multiple answers,\r\nprint any of them.You also have to answer T separate queries.\r\n",
    "solutions": [
        "//#pragma comment(linker, \"/stack:200000000\")\n//#pragma GCC optimize(\"Ofast\")\n//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//#pragma GCC optimize(\"unroll-loops\")\n\n#include <iostream>\n#include <stdlib.h>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <deque>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <random>\n#include <assert.h>\n#include <memory.h>\n#include <time.h>\n\n#define uint unsigned int\n#define ll long long\n#define ull unsigned long long\n#define ld long double\n#define rep(i, l, r) for (int i = l; i < r; i++)\n#define repb(i, r, l) for (int i = r; i > l; i--)\n#define sz(a) (int)a.size()\n#define fi first\n#define se second\n#define mp(a, b) make_pair(a, b)\n#define rank qwertyuio\n\nusing namespace std;\n\ninline bool setmin(int &x, int y) { return (y < x) ? x = y, 1 : 0; }\ninline bool setmax(int &x, int y) { return (y > x) ? x = y, 1 : 0; }\ninline bool setmin(ll &x, ll y) { return (y < x) ? x = y, 1 : 0; }\ninline bool setmax(ll &x, ll y) { return (y > x) ? x = y, 1 : 0; }\n\nconst int N = 200000;\nconst int inf = (int)1e9 + 1;\nconst ll big = (ll)1e18 + 1;\nconst int P = 239;\nconst int P1 = 31;\nconst int P2 = 57;\nconst int MOD = (int)1e9 + 7;\nconst int MOD1 = (int)1e9 + 9;\nconst int MOD2 = 998244353;\nconst double eps = 1e-9;\nconst double pi = atan2(0, -1);\nconst int ABC = 26;\n\nint main()\n{\n    //freopen(\"a.in\", \"r\", stdin);\n    //freopen(\"a.out\", \"w\", stdout);\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(20);\n    cout << fixed;\n    //ll TL = 0.95 * CLOCKS_PER_SEC;\n    //clock_t time = clock();\n    int T;\n    cin >> T;\n    while (T--) {\n        string s;\n        cin >> s;\n        map<char, int> mapa;\n        for (char c : s) {\n            mapa[c]++;\n        }\n        vector<pair<char, int> > a;\n        for (auto it : mapa) {\n            a.push_back(it);\n        }\n        if (sz(a) == 1) {\n            rep(i, 0, a[0].se) {\n                cout << a[0].fi;\n            }\n            cout << \"\\n\";\n            continue;\n        }\n        if (sz(a) == 2) {\n            if (a[0].fi + 1 != a[1].fi) {\n                rep(i, 0, a[0].se) {\n                    cout << a[0].fi;\n                }\n                rep(i, 0, a[1].se) {\n                    cout << a[1].fi;\n                }\n                cout << \"\\n\";\n            } else {\n                cout << \"No answer\\n\";\n            }\n            continue;\n        }\n        if (sz(a) == 3) {\n            if (a[0].fi + 1 == a[1].fi && a[1].fi + 1 == a[2].fi) {\n                cout << \"No answer\\n\";\n            } else if (a[0].fi + 1 != a[1].fi) {\n                rep(i, 0, a[1].se) {\n                    cout << a[1].fi;\n                }\n                rep(i, 0, a[0].se) {\n                    cout << a[0].fi;\n                }\n                rep(i, 0, a[2].se) {\n                    cout << a[2].fi;\n                }\n                cout << \"\\n\";\n            } else {\n                rep(i, 0, a[1].se) {\n                    cout << a[1].fi;\n                }\n                rep(i, 0, a[2].se) {\n                    cout << a[2].fi;\n                }\n                rep(i, 0, a[0].se) {\n                    cout << a[0].fi;\n                }\n                cout << \"\\n\";\n            }\n            continue;\n        }\n        for (int j = 1; j < sz(a); j += 2) {\n            rep(i, 0, a[j].se) {\n                cout << a[j].fi;\n            }\n        }\n        for (int j = 0; j < sz(a); j += 2) {\n            rep(i, 0, a[j].se) {\n                cout << a[j].fi;\n            }\n        }\n        cout << \"\\n\";\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "greedy",
        "implementation",
        "sortings",
        "strings"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Ugly Pairs.json",
    "editorial_link": "https://codeforces.com/blog/entry/66827",
    "editorial": "To be honest, the solution to this problem is easier to code than to\r\nprove.Let\u00e2\u0080\u0099s follow the next strategy. Write down all the letters of the\r\nstring which have odd positions in alphabet (\"\") and even positions in\r\nalphabet (\"\"). Sort both of these lists in non-decreasing order. The\r\nanswer is either concatenation of the lists (odd + even or even + odd)\r\nor \"\".Now for the proof part. Let\u00e2\u0080\u0099s establish that we don\u00e2\u0080\u0099t care about\r\nequal letters and leave just a single copy of each letter of the string.\r\nLet\u00e2\u0080\u0099s check some cases: There is just a single letter. That\u00e2\u0080\u0099s trivial.\r\nThere are two letters of the same parity. There is no incorrect\r\narrangement for this. There are two letters of different parity. If they\r\ndiffer by one then no answer exists. Otherwise any arrangement works.\r\nThere are three letters and they are consecutive in alphabet. No answer\r\nexists. There are other types of three letters. Then the one of the\r\ndifferent parity can put on the side (e.g. \"\" and \"\"). As the difference\r\nbetween at least one of these letters and that one isn\u00e2\u0080\u0099t 1, that\r\narrangement will be ok. Finally, there are at least 4 letters. It means\r\nthat the difference between either the smallest odd and the largest even\r\nor between the smallest even and the largest odd isn\u00e2\u0080\u0099t 1. The only thing\r\nyou need to do is to implement the check function the most\r\nstraightforward way possible and check both arrangements.Overall\r\ncomplexity: .\r\n"
}