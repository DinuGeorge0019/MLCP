{
    "link": "https://codeforces.com//contest/1948/problem/E",
    "problemId": "2532317",
    "problem_idx": "E",
    "shortId": "1948E",
    "contest_number": "1948",
    "problem_submissions": {
        "G": [
            251472376,
            251497915,
            251480984,
            251480163,
            251489959,
            251467292,
            251485648,
            251500573,
            251486197,
            251512722,
            251521639,
            251480657,
            251509802,
            251528428,
            251520218,
            251515719,
            251959006,
            251871508,
            251537711,
            251535946,
            251529016,
            251516034,
            251533510,
            251533892
        ],
        "E": [
            251455000,
            251464649,
            251452268,
            251480095,
            251460808,
            251464897,
            251506007,
            251480198,
            251478117,
            251501414,
            251479798,
            251486494,
            251498878,
            251484347,
            251486715,
            251474115,
            251485874,
            251484195,
            251499420
        ],
        "F": [
            251446403,
            251454570,
            251464038,
            251471618,
            251471081,
            251484983,
            251475462,
            251495125,
            251493237,
            251458734,
            251522756,
            251503819,
            251513774,
            251502504,
            251506031,
            251513492,
            251502955,
            251521827,
            251479729
        ],
        "D": [
            251428147,
            251500203,
            251431497,
            251439266,
            251434727,
            251440547,
            251446816,
            251446867,
            251456743,
            251442045,
            251470051,
            251447446,
            251460726,
            251467120,
            251467499,
            251465257,
            251451922,
            251465519,
            251467189,
            251458845
        ],
        "C": [
            251425049,
            251426495,
            251431074,
            251427750,
            251427491,
            251433261,
            251437529,
            251439503,
            251431968,
            251453203,
            251439755,
            251452383,
            251446018,
            251457382,
            251439370,
            251471934,
            251459502,
            251461525,
            251447180
        ],
        "B": [
            251421706,
            251420680,
            251422950,
            251421537,
            251420205,
            251424082,
            251426365,
            251440040,
            251423639,
            251430207,
            251430125,
            251435004,
            251430108,
            251439531,
            251427186,
            251441008,
            251448490,
            251446251,
            251436268
        ],
        "A": [
            251419288,
            251417353,
            251417664,
            251417432,
            251417471,
            251418376,
            251419094,
            251418141,
            251417555,
            251419693,
            251424986,
            251423459,
            251419168,
            251420360,
            251418645,
            251426543,
            251449327,
            251430256,
            251427243
        ]
    },
    "name": "E. Clique Partition",
    "statement": "You are given two integers, n and k. There is a graph on n vertices,\r\nnumbered from 1 to n, which initially has no edges.You have to assign\r\neach vertex an integer; let a_i be the integer on the vertex i. All a_i\r\nshould be distinct integers from 1 to n.After assigning integers, for\r\nevery pair of vertices (i, j), you add an edge between them if |i - j| +\r\n|a_i - a_j|\r\nle k.Your goal is to create a graph which can be partitioned into the\r\nminimum possible (for the given values of n and k) number of cliques.\r\nEach vertex of the graph should belong to exactly one clique. Recall\r\nthat a clique is a set of vertices such that every pair of vertices in\r\nit are connected with an edge.. So we also ask you to print the\r\npartition itself.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 15.03.2024 10:55:44\n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n, k;\n    cin >> n >> k;\n    vector<int> a(n, -1);\n    vector<int> c(n, -1);\n    int cnt = 0;\n    int beg = 0;\n    while (beg < n) {\n      k = min(k, n - beg);\n      int half = (k - 1) / 2;\n      for (int i = 0; i < k; i++) {\n        a[beg + i] = beg + (half - 1 - i);\n        if (a[beg + i] < beg) {\n          a[beg + i] += k;\n        }\n        c[beg + i] = cnt;\n      }\n      cnt += 1;\n      beg += k;\n    }\n    for (int i = 0; i < n; i++) {\n      cout << a[i] + 1 << \" \\n\"[i == n - 1];\n    }\n    cout << cnt << '\\n';\n    for (int i = 0; i < n; i++) {\n      cout << c[i] + 1 << \" \\n\"[i == n - 1];\n    }\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "graphs",
        "greedy",
        "implementation"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Clique Partition.json",
    "editorial_link": "https://codeforces.com//blog/entry/127182",
    "editorial": "There are two main steps to solve the problem: analyzing the maximum\r\nsize of a clique; showing a construction that always allows us to get a\r\nclique of the maximum possible size. Firstly, the maximum size of a\r\nclique cannot exceed k. If there are at least k+1 vertices in the same\r\nclique, then at least two of them (call them i and j) have |i - j|\r\nge k. And since a_i\r\nne a_j, then |a_i - a_j|\r\nge 1. So, |i - j| + |a_i - a_j| is at least k+1, so these two vertices\r\nwon\u00e2\u0080\u0099t have an edge connecting them (and cannot belong to the same\r\nclique).Secondly, let\u00e2\u0080\u0099s try to find a construction that always allows us\r\nto get cliques of size k. To do this, try to solve the problem when k =\r\nn; and if n > k, we can split all vertices into\r\nlceil\r\nfrac{n}{k}\r\nrceil cliques as follows: for each clique, we assign a consecutive block\r\nof vertices and numbers that will be assigned to them (for example,\r\nvertices from 1 to k and numbers from 1 to k belong to the first clique,\r\nvertices from k+1 to 2k and numbers from k+1 to 2kn belong to the second\r\nclique), and then use the solution for n = k on each of these blocks.To\r\nobtain a solution for n = k, you can either try bruteforcing it locally\r\non, say, n\r\nle 10 and analyzing the results. One of the possible constructions is as\r\nfollows: let m =\r\nlceil\r\nfrac{k}{2}\r\nrceil; split all vertices and numbers from 1 to k into two blocks: [1,\r\nm] and [m + 1, k]; and then, in each block, the greater the index of the\r\nvertex, the less the integer it gets. So it looks as follows: a_1 = m,\r\na_2 = m-1,\r\ndots, a_m = 1, a_{m+1} = n, a_{m+2} = n-1,\r\ndots, a_n = m+1. We can show that the \"distance\" between any two\r\nvertices in different halves is exactly k, and the distance between any\r\ntwo vertices in the same half is at most 2(m-1), which never exceeds k.\r\n"
}