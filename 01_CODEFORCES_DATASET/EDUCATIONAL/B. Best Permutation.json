{
    "link": "https://codeforces.com//contest/1728/problem/B",
    "problemId": "1534223",
    "problem_idx": "B",
    "shortId": "1728B",
    "contest_number": "1728",
    "problem_submissions": {
        "F": [
            171415471,
            171408709,
            171477755,
            171477598,
            171800837,
            171602685,
            171508405,
            171615612,
            171428158,
            171416710,
            171516704
        ],
        "G": [
            171401437,
            171423625,
            171401320,
            171405459,
            171408910,
            171400855,
            171410753,
            171399735,
            171425286,
            171424973,
            171424864,
            171421363,
            171409384,
            171429440,
            171419291,
            171421745,
            171401911,
            171420331,
            171494040,
            171406232,
            171419649,
            171415822,
            171442989,
            171426124,
            171423998,
            171422898,
            171422786,
            171419842
        ],
        "E": [
            171378857,
            171391875,
            171380622,
            171383139,
            171380478,
            171390287,
            171381329,
            171385138,
            171384190,
            171396093,
            171392841,
            171388311,
            171403618,
            171390049,
            171393452,
            171494181,
            171455206,
            171419342,
            171391692,
            171398313,
            171393739,
            171428155,
            171396053,
            171400068
        ],
        "D": [
            171364431,
            171379034,
            171368807,
            171365018,
            171370163,
            171375547,
            171369467,
            171380229,
            171364084,
            171374772,
            171368217,
            171377453,
            171410355,
            171379812,
            171386430,
            171377364,
            171385449,
            171375075,
            171380828,
            171376969
        ],
        "C": [
            171356021,
            171355657,
            171354790,
            171355489,
            171357376,
            171364423,
            171358552,
            171371507,
            171356927,
            171358656,
            171358481,
            171361890,
            171364747,
            171361193,
            171494234,
            171359234,
            171364539,
            171370274,
            171358915,
            171369689,
            171370585
        ],
        "B": [
            171350944,
            171350546,
            171350225,
            171351747,
            171353484,
            171350234,
            171353700,
            171367743,
            171353076,
            171355275,
            171352643,
            171355734,
            171359875,
            171351546,
            171353658,
            171357176,
            171361933,
            171353420,
            171361436,
            171361759
        ],
        "A": [
            171346435,
            171346486,
            171346382,
            171346456,
            171348074,
            171346466,
            171346859,
            171352332,
            171346599,
            171349231,
            171346445,
            171346558,
            171348949,
            171346594,
            171346485,
            171349162,
            171347108,
            171346675,
            171346628,
            171349812
        ]
    },
    "name": "B. Best Permutation",
    "statement": "Let\u2019s define the value of the permutation p of n integers 1, 2, ..., n\r\n(a permutation is an array where each element from 1 to n occurs exactly\r\nonce) as follows: initially, an integer variable x is equal to 0; if x <\r\np_1, then add p_1 to x (set x = x + p_1), otherwise assign 0 to x; if x\r\n< p_2, then add p_2 to x (set x = x + p_2), otherwise assign 0 to x; ...\r\nif x < p_n, then add p_n to x (set x = x + p_n), otherwise assign 0 to\r\nx; the value of the permutation is x at the end of this process. For\r\nexample, for p = [4, 5, 1, 2, 3, 6], the value of x changes as follows:\r\n0, 4, 9, 0, 2, 5, 11, so the value of the permutation is 11.You are\r\ngiven an integer n. Find a permutation p of size n with the maximum\r\npossible value among all permutations of size n. If there are several\r\nsuch permutations, you can print any of them.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate<typename T>\nvoid chmin(T& x, const T& y) {\n\tif (x > y) x = y;\n}\ntemplate<typename T>\nvoid chmax(T& x, const T& y) {\n\tif (x < y) x = y;\n}\ntypedef int64_t s64;\ntypedef uint64_t u64;\ntypedef uint32_t u32;\ntypedef pair<int, int> pii;\n#define rep(i, l, r) for (int i = l; i <= r; ++i)\n#define per(i, r, l) for (int i = r; i >= l; --i)\n#define rep0(i, l, r) for (int i = l; i < r; ++i)\n#define gc (c = getchar())\nchar readc() {\n\tchar c;\n\twhile (isspace(gc))\n\t\t;\n\treturn c;\n}\nint read() {\n\tchar c;\n\twhile (gc < '-')\n\t\t;\n\tif (c == '-') {\n\t\tint x = gc - '0';\n\t\twhile (gc >= '0') x = x * 10 + c - '0';\n\t\treturn -x;\n\t}\n\tint x = c - '0';\n\twhile (gc >= '0') x = x * 10 + c - '0';\n\treturn x;\n}\n#undef gc\n\nint T, n;\n\nint main() {\n#ifdef local\n\tfreopen(\"1.in\", \"r\", stdin);\n#endif\n\tT = read();\n\twhile (T--) {\n\t\tn = read();\n\t\tif (n % 2 == 0) {\n\t\t\tfor (int i = 2; i <= n - 2; i += 2) printf(\"%d %d \", i, i - 1);\n\t\t\tprintf(\"%d %d\\n\", n - 1, n);\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"1 2 3 \");\n\t\tfor (int i = 5; i <= n - 2; i += 2) printf(\"%d %d \", i, i - 1);\n\t\tprintf(\"%d %d\\n\", n - 1, n);\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Best Permutation.json",
    "editorial_link": "https://codeforces.com//blog/entry/106805",
    "editorial": "Let be the value of the variable after steps. Note that should be less\r\nthan for to be not equal to . It means that does not exceed . It turns\r\nout that for there is always a permutation such that is equal to .The\r\nonly thing left is to find out how to build such a permutation. There\r\nare many suitable permutations, let\u00e2\u0080\u0099s consider one of the possible\r\noptions. For an even , a suitable permutation is . You can see that in\r\nsuch a permutation changes as follows: . For an odd , there is a similar\r\npermutation , where changes as follows: .\r\n"
}