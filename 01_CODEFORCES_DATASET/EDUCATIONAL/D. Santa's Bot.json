{
    "link": "https://codeforces.com//contest/1279/problem/D",
    "problemId": "504276",
    "problem_idx": "D",
    "shortId": "1279D",
    "contest_number": "1279",
    "problem_submissions": {
        "E": [
            67737947,
            67733364,
            67730576,
            67739828,
            67742536,
            67737172,
            67724903,
            67736976,
            67729524,
            67727105,
            67747837,
            67731683,
            67732984,
            67748535,
            67744932
        ],
        "F": [
            67737545,
            67718265,
            67764598,
            67761358,
            67761175,
            67737082,
            67725475,
            67770261,
            67748335,
            67724855,
            67743206,
            67734760,
            67745652,
            67744739,
            67715547,
            67721155,
            67752838,
            67725507,
            67753025,
            67734101,
            67763755,
            67725445,
            67752215,
            67728799,
            67734922,
            67753488
        ],
        "D": [
            67712365,
            67710004,
            67715225,
            67711743,
            67720035,
            67741233,
            67733656,
            67738820,
            67706683,
            67710710,
            67712344,
            67716189,
            67712742,
            67717775,
            67716646,
            67717595,
            67717233,
            67714949,
            67709766
        ],
        "C": [
            67708271,
            67707793,
            67712401,
            67706993,
            67715784,
            67738909,
            67733706,
            67739694,
            67710632,
            67708442,
            67708816,
            67712768,
            67706695,
            67710203,
            67712897,
            67713466,
            67711730,
            67709788,
            67706084
        ],
        "B": [
            67703572,
            67702979,
            67708187,
            67704555,
            67708809,
            67737826,
            67733752,
            67740661,
            67706039,
            67703968,
            67706335,
            67709187,
            67703627,
            67705748,
            67708508,
            67710463,
            67705061,
            67706427,
            67703535
        ],
        "A": [
            67701146,
            67701133,
            67701117,
            67701163,
            67704539,
            67735636,
            67733784,
            67741171,
            67702120,
            67701143,
            67701243,
            67701332,
            67701184,
            67701399,
            67702929,
            67702323,
            67701558,
            67701229,
            67701070
        ]
    },
    "name": "D. Santa's Bot",
    "statement": "Santa Claus has received letters from n different kids throughout this\r\nyear. Of course, each kid wants to get some presents from Santa: in\r\nparticular, the i-th kid asked Santa to give them one of k_i different\r\nitems as a present. Some items could have been asked by multiple\r\nkids.Santa is really busy, so he wants the New Year Bot to choose the\r\npresents for all children. Unfortunately, the Bot’s algorithm of\r\nchoosing presents is bugged. To choose a present for some kid, the Bot\r\ndoes the following: choose one kid x equiprobably among all n kids;\r\nchoose some item y equiprobably among all k_x items kid x wants; choose\r\na kid z who will receive the present equipropably among all n kids (this\r\nchoice is independent of choosing x and y); the resulting triple (x, y,\r\nz) is called of the Bot. If kid z listed item y as an item they want to\r\nreceive, then the decision . Otherwise, the Bot’s choice is .Santa is\r\naware of the bug, but he can’t estimate if this bug is really severe. To\r\ndo so, he wants to know the probability that one decision generated\r\naccording to the aforementioned algorithm is . Can you help him?\r\n",
    "solutions": [
        "#include <cmath>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <list>\n#include <time.h>\n#include <math.h>\n#include <random>\n#include <deque>\n#include <queue>\n#include <cassert>\n#include <unordered_map>\n#include <unordered_set>\n#include <iomanip>\n#include <bitset>\n#include <sstream>\n#include <chrono>\n#include <cstring>\n\nusing namespace std;\n\ntypedef long long ll;\n\n#ifdef iq\n  mt19937 rnd(228);\n#else\n  mt19937 rnd(chrono::high_resolution_clock::now().time_since_epoch().count());\n#endif\n\nconst int M = 998244353;\n\nint mul(int a, int b) {\n  return (a * (ll) b) % M;\n}\n\nint pw(int a, int n) {\n  int res = 1;\n  while (n) {\n    if (n % 2 == 0) {\n      a = mul(a, a);\n      n/= 2;\n    } else {\n      res = mul(res,a);\n      n--;\n    }\n  }\n  return res;\n}\n\nint inv(int x) {\n  return pw(x, M - 2);\n}\n\nint main() {\n#ifdef iq\n  freopen(\"a.in\", \"r\", stdin);\n#endif\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  int n;\n  cin >> n;\n  int mod = M;\n  vector <int> a(1000000);\n  int id = 0;\n  vector <vector <int> > p;\n  for (int i = 0; i < n; i++) {\n    int k;\n    cin >> k;\n    vector <int> t;\n    for (int i = 0; i < k; i++) {\n      int x;\n      cin >> x;\n      x--;\n      t.push_back(x);\n      a[x]++;\n    }\n    p.push_back(t);\n    id += k;\n  }\n  int ans = 0;\n  int kek = inv(n);\n  for (int i = 0; i < n; i++) {\n    int ok = inv(p[i].size());\n    for (int x : p[i]) {\n      int prob = mul(mul(kek, ok), mul(a[x], kek));\n      ans += prob;\n      if (ans >= M) ans -= M;\n    }\n  }\n  cout << ans << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math",
        "probabilities"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Santa's Bot.json",
    "editorial_link": "https://codeforces.com//blog/entry/72577",
    "editorial": "First of all, how to deal with the fractions modulo ? According to\r\nFermatâs little theorem, if is coprime with . So, the inverse element\r\nfor the denominator is , taken modulo .A cool property of fractions\r\ntaken modulo (or any other number such that denominator is coprime with\r\nit) is that if we want to add two fractions together and calculate the\r\nresult modulo some number, we can convert these fractions beforehand and\r\nthen just add them as integer numbers. The same works with subtracting,\r\nmultiplying, dividing and exponentiating fractions.Okay, now for the\r\nsolution itself. We know that there are at most possible pairs of ; we\r\ncan iterate on these pairs, calculate the probability that the fixed\r\npair is included in the robotâs decision (that probability is ), and\r\ncalculate the probability that extends to a valid triple (it is equal to\r\n, where is the number of kids who want item ). Multiplying these two\r\nprobabilities, we get the probability that is chosen produces a valid\r\ndecision (since these events are independent), and we sum up these\r\nvalues over all possible pairs .\r\n",
    "hint": []
}