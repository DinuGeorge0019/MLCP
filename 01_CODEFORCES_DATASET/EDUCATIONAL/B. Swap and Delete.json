{
    "link": "https://codeforces.com//contest/1913/problem/B",
    "problemId": "2387088",
    "problem_idx": "B",
    "shortId": "1913B",
    "contest_number": "1913",
    "problem_submissions": {
        "F": [
            237765417,
            237786045,
            237798410,
            237793751,
            237794290,
            237782267,
            237795023,
            237800140,
            237807937,
            237810699,
            237812614,
            249487858,
            249487734,
            237811339,
            237810034,
            237786173,
            237918310,
            238095706,
            238317726,
            238317705,
            238317604,
            238062834,
            238062445,
            237828170
        ],
        "E": [
            237747038,
            237760786,
            237768219,
            237770076,
            237769118,
            237750176,
            237762212,
            237777254,
            237781408,
            237770526,
            237770804,
            237785103,
            237769588,
            237762037,
            237767968,
            237768315,
            237776019,
            237777315,
            237775619
        ],
        "D": [
            237741941,
            237751825,
            237754635,
            237754576,
            237759161,
            237795697,
            237798473,
            237753926,
            237756867,
            237764842,
            237762933,
            237761396,
            237809126,
            237799893,
            237754034,
            237759987,
            237761087,
            237760420,
            237755829,
            237761290
        ],
        "C": [
            237735693,
            237739173,
            237740092,
            237741221,
            237739010,
            237738520,
            237799594,
            237738193,
            237740375,
            237744478,
            237744080,
            237745844,
            237762290,
            237803855,
            237741083,
            237740358,
            237744813,
            237743742,
            237745330,
            237745113
        ],
        "B": [
            237734023,
            237735619,
            237736194,
            237737923,
            237736443,
            237735162,
            237800569,
            237735958,
            237737285,
            237740748,
            237737318,
            237739744,
            237743140,
            237806408,
            237735801,
            237736968,
            237740846,
            237738174,
            237741145,
            237740499
        ],
        "A": [
            237733399,
            237733472,
            237733545,
            237733680,
            237733544,
            237733357,
            237734167,
            237733513,
            237734405,
            237733701,
            237733822,
            237734094,
            237807435,
            237733584,
            237733737,
            237733530,
            237733681,
            237735085,
            237733871
        ]
    },
    "name": "B. Swap and Delete",
    "statement": "You are given a binary string s (a string consisting only of -s and\r\n-s).You can perform two types of operations on s: delete one character\r\nfrom s. This operation costs 1 coin; swap any pair of characters in s.\r\nThis operation is free (costs 0 coins). You can perform these operations\r\nany number of times and in any order.Let’s name a string you’ve got\r\nafter performing operations above as t. The string t is if for each i\r\nfrom t_i\r\nneq s_i (|t| is the length of the string t). The empty string is . Note\r\nthat you are comparing the resulting string t with the s.What is the\r\nminimum total cost to make the string t good?\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 18.12.2023 09:37:30       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    string s;\n    cin >> s;\n    int n = (int) s.size();\n    vector<int> cnt(2);\n    for (char c : s) {\n      cnt[(int) (c - '0')] += 1;\n    }\n    vector<int> need(2);\n    int ans = n;\n    for (int i = 0; i < n; i++) {\n      need[(int) (s[i] - '0') ^ 1] += 1;\n      if (cnt[0] >= need[0] && cnt[1] >= need[1]) {\n        ans = n - 1 - i;\n      }\n    }\n    cout << ans << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "strings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Swap and Delete.json",
    "editorial_link": "https://codeforces.com//blog/entry/123493",
    "editorial": "Letâs count the number of -s and -s in as and correspondingly. Since\r\nconsists of characters from then will contain no more than zeros and\r\nones.Letâs build greedily, since we always compare with prefix of .\r\nSuppose the length of is at least one, it means that must be different\r\nfrom , so if we must set . So letâs check that we have at least one (or\r\n), take and place it at . Case is the same.After placing we can\r\nanalogically try to place and so on until we run out of necessary digits\r\nor build the whole string of length .Weâve built the longest possible\r\nstring in time, so the answer is .\r\n",
    "hint": []
}