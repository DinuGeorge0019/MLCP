{
    "link": "https://codeforces.com//contest/1278/problem/F",
    "problemId": "498935",
    "problem_idx": "F",
    "shortId": "1278F",
    "contest_number": "1278",
    "problem_submissions": {
        "E": [
            67224918,
            67231614,
            67223912,
            67253812,
            67225741,
            67224871,
            67225251,
            67224253,
            67224097,
            67228073,
            67224351,
            67238384,
            67238891,
            67235763,
            67230622,
            67227930,
            67239651,
            67240882,
            67235370,
            67231237,
            67232624
        ],
        "F": [
            67220843,
            67234059,
            67225490,
            67229828,
            67232198,
            67228232,
            67234554,
            67236753,
            67235814,
            67235952,
            67222634,
            67222261,
            67233844,
            67234877,
            67233597,
            67235880,
            168626483,
            67236179,
            67239000,
            67242413,
            67234942
        ],
        "D": [
            67217029,
            67303164,
            67301866,
            67298063,
            67237371,
            67236431,
            67235408,
            67220294,
            67220865,
            67220608,
            67221489,
            67220476,
            67219646,
            67219320,
            67220067,
            67226705,
            67224401,
            67222526,
            67227114,
            67223817,
            67223367,
            67231531,
            67228179,
            67226295
        ],
        "C": [
            67214007,
            67214267,
            67217998,
            67216889,
            67218307,
            67216554,
            67216623,
            67215042,
            67215238,
            67217005,
            67217682,
            67215492,
            67219419,
            67219630,
            67218331,
            67220921,
            67220564,
            67238779
        ],
        "B": [
            67212862,
            67212809,
            67214461,
            67213367,
            67214581,
            67214399,
            67214511,
            67213321,
            67213424,
            67214716,
            67216187,
            67217236,
            67216491,
            67238990,
            67224941,
            67214356,
            67216320,
            67214479,
            67213910
        ],
        "A": [
            67212605,
            67233989,
            67212600,
            67213460,
            67212650,
            67212623,
            67213201,
            67212677,
            67212601,
            67212657,
            67213584,
            67212831,
            67213003,
            67213058,
            67213442,
            67213081,
            67213875,
            67213272,
            67212886
        ]
    },
    "name": "F. Cards",
    "statement": "Consider the following experiment. You have a deck of m cards, and\r\nexactly one card is a joker. n times, you do the following: shuffle the\r\ndeck, take the top card of the deck, look at it and return it into the\r\ndeck.Let x be the number of times you have taken the joker out of the\r\ndeck during this experiment. Assuming that every time you shuffle the\r\ndeck, all m! possible permutations of cards are equiprobable, what is\r\nthe expected value of x^k? Print the answer modulo 998244353.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<int,P> P1;\ntypedef pair<P,P> P2;\n#define pu push\n#define pb push_back\n#define mp make_pair\n#define eps 1e-7\n#define INF 1000000000\n#define fi first\n#define sc second\n#define rep(i,x) for(int i=0;i<x;i++)\n#define repn(i,x) for(int i=1;i<=x;i++)\n#define SORT(x) sort(x.begin(),x.end())\n#define ERASE(x) x.erase(unique(x.begin(),x.end()),x.end())\n#define POSL(x,v) (lower_bound(x.begin(),x.end(),v)-x.begin())\n#define POSU(x,v) (upper_bound(x.begin(),x.end(),v)-x.begin())\nconst ll mod = 998244353;\nll modpow(ll x,ll n){\n\tll res=1;\n\twhile(n>0){\n\t\tif(n&1) res=res*x%mod;\n\t\tx=x*x%mod;\n\t\tn>>=1;\n\t}\n\treturn res;\n}\nll n,m,k;\nll kth[10005],C[5005][5005];\nll R[5005];\nint main(){\n\tcin >> n >> m >> k;\n\trep(i,5005)rep(j,i+1){\n\t\tif(j==0||j==i)C[i][j]=1;\n\t\telse{\n\t\t\tC[i][j] = C[i-1][j]+C[i-1][j-1];\n\t\t\tif(C[i][j]>=mod)C[i][j]-=mod;\n\t\t}\n\t}\n\tll ans = 0;\n\tfor(int i=0;i<10005;i++) kth[i] = modpow(1LL*i,k);\n\tfor(int i=0;i<5005;i++) R[i] = modpow(1LL*i,mod-2);\n\tfor(int i=1;i<=k;i++){\n\t\tif(n < i) continue;\n\t\tll coef = modpow(modpow(m,i),mod-2);\n\t\tfor(ll x=n;x>=n-i+1;x--) coef = coef*x%mod;\n\t\trepn(j,i) coef = coef*R[j]%mod;\n\t\t\n\t\tll num = 0;\n\t\tfor(int j=0;j<i;j++){\n\t\t\tll val = C[i][j]*kth[i-j]%mod;\n\t\t\tif(j%2==0)num+=val; else num-=val;\n\t\t}\n\t\tnum%=mod;\n\t\tans += coef*num%mod;\n\t}\n\tcout<<(ans%mod+mod)%mod<<endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math",
        "number theory",
        "probabilities"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Cards.json",
    "editorial_link": "https://codeforces.com//blog/entry/72330",
    "editorial": "First of all, I would like to thank Errichto for his awesome lecture on\r\nexpected value: part 1, part 2. This problem was invented after I\r\nlearned the concept of estimating the square of expected value from that\r\nlecture and the editorial uses some ideas that were introduced there.\r\nOkay, now for the editorial itself. We call a number as good if , and\r\nthe -th shuffle of the deck resulted in a joker on top. from our problem\r\nis the number of such good numbers . We can represent as the number of\r\npairs such that every element of the pair is a good number, as the\r\nnumber of triples, and so on is the number of -tuples such that each\r\nelement of a tuple is a good number. So we can rewrite the expected\r\nvalue of as the expected number of such tuples, or the sum of over all\r\ntuples , where is the probability that consists of good numbers. How to\r\ncalculate the probability that is a good tuple? Since all shuffles of\r\nthe deck result in a joker with probability , should be equal to but\r\nthat is true only if all elements in are unique. How to deal with tuples\r\nwith repeating elements? Since all occurences of the same element are\r\neither good or bad (with probability of being good), the correct formula\r\nfor is , where is the number of distinct elements in the tuple. Okay,\r\nthen for each we have to calculate the number of -tuples with exactly\r\ndistinct elements. To do that, we use dynamic programming: let be the\r\nnumber of -tuples with exactly distinct elements. Each transition in\r\nthis dynamic programming solution models adding an element to the tuple;\r\nif we want to compute the transitions leading from , we either add a new\r\nelement to the tuple (there are ways to choose it, and we enter the\r\nstate ), or we add an already existing element (there are ways to choose\r\nit, and we enter the state ). Overall complexity is or , depending on\r\nyour implementation. Solution (BledDest)\r\n",
    "hint": []
}