{
    "link": "https://codeforces.com//contest/825/problem/A",
    "problemId": "114544",
    "problem_idx": "A",
    "shortId": "825A",
    "contest_number": "825",
    "problem_submissions": {
        "G": [
            28611826,
            28611356,
            28617070,
            28630000,
            28611377,
            28668357,
            28644356,
            28617410,
            28616887,
            115447701,
            28617449
        ],
        "F": [
            28607801,
            28609631,
            28607347,
            28609116,
            28609094,
            28607614,
            28608923,
            28607754,
            28610528,
            28609319,
            28614043,
            28612882,
            28614726,
            28613035,
            28614128,
            28617246,
            28608834
        ],
        "E": [
            28606236,
            28612183,
            28603943,
            28604761,
            28605629,
            28605699,
            28621023,
            28620710,
            28614410,
            28606910,
            28606445,
            28612588,
            28606404,
            28608319,
            28610978,
            28607253,
            28602716,
            28604390,
            28605864
        ],
        "D": [
            28601870,
            28604440,
            28602315,
            28603224,
            28602271,
            28603578,
            28602162,
            28602307,
            28605123,
            28604422,
            28602824,
            28605475,
            28605112,
            28601966,
            28604848,
            28601067,
            28602879,
            28603271,
            28602582
        ],
        "C": [
            28600566,
            28604558,
            28600573,
            28601511,
            28601329,
            28600992,
            28600584,
            28601117,
            28602961,
            28602487,
            28601481,
            28603635,
            28602536,
            28600048,
            28601839,
            28599960,
            28601178,
            28600725,
            28600385
        ],
        "B": [
            28599824,
            28602822,
            28599867,
            28599843,
            28600338,
            28600036,
            28599560,
            28600486,
            28599738,
            28600276,
            28600463,
            28602528,
            28601519,
            28610253,
            28599911,
            28599338,
            28600292,
            28600011,
            28599745
        ],
        "A": [
            28598954,
            28602676,
            28599093,
            28599010,
            28599148,
            28598936,
            28599534,
            28599292,
            28599020,
            28598945,
            28599332,
            28601537,
            28599412,
            28598882,
            28598949,
            28598917,
            28599099,
            28599150,
            28598894
        ]
    },
    "name": "A. Binary Protocol",
    "statement": "Polycarp has just invented a new binary protocol for data transmission.\r\nHe is encoding positive integer decimal number to binary string using\r\nfollowing algorithm: Each digit is represented with number of characters\r\nequal to the value of that digit (for it is zero ones). Digits are\r\nwritten one by one in order corresponding to number and separated by\r\nsingle character. Though Polycarp learnt how to encode the numbers, he\r\nhas no idea how to decode them back. Help him calculate the decoded\r\nnumber.\r\n",
    "solutions": [
        "#ifdef __GNUC__\n#pragma GCC target(\"sse4,avx\")\n#endif\n#include <immintrin.h>\n#include <algorithm>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <cstdint>\n#include <numeric>\n\nvoid run(std::istream &in, std::ostream &out) {\n    int n;\n    in >> n;\n    std::string s;\n    in >> s;\n    s.push_back('0');\n    int res = 0;\n    int cur = 0;\n    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == '1') {\n            cur++;\n        } else {\n            res = 10 * res + cur;\n            cur = 0;\n        }\n    }\n    out << res << std::endl;\n}\n\nint main() {\n  std::cin.sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  run(std::cin, std::cout);\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Binary Protocol.json",
    "editorial_link": "https://codeforces.com//blog/entry/53334",
    "editorial": "Letâs decode the number digit by digit starting from the leftmost. When\r\nyou meet in the string, increase the value of the current digit. For\r\nprint current digit and proceed to the next one. Donât forget to print\r\nthe last digit when the string is over.Overall complexity: .\r\n",
    "hint": []
}