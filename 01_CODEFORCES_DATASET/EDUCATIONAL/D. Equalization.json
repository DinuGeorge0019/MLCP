{
    "link": "https://codeforces.com//contest/2075/problem/D",
    "problemId": "3273593",
    "problem_idx": "D",
    "shortId": "2075D",
    "contest_number": "2075",
    "problem_submissions": {
        "F": [
            311092897,
            311105371,
            311091977,
            311106822,
            311119612,
            311127395,
            311111998,
            311124374,
            311123265,
            311135481,
            311127374,
            311124949,
            311133033,
            311127513,
            311123593,
            311131608,
            311137578,
            311136881,
            311133323,
            311066636
        ],
        "E": [
            311078477,
            311076658,
            311072206,
            311087192,
            311086935,
            311076933,
            311081142,
            311089235,
            311087311,
            311085142,
            311096896,
            311100487,
            311099554,
            311111156,
            311091394,
            311097405,
            311088422,
            311171203,
            311103877,
            311113693,
            311080280
        ],
        "D": [
            311061322,
            311057750,
            311060365,
            311055119,
            311060010,
            311059723,
            311071257,
            311070356,
            311063998,
            311066698,
            311082700,
            311064184,
            311068410,
            311078395,
            311082862,
            311069076,
            311068306,
            311073979,
            311087117,
            311088989
        ],
        "C": [
            311052044,
            311051318,
            311056183,
            311050640,
            311054145,
            311055185,
            311051870,
            311052149,
            311059642,
            311052003,
            311055738,
            311055390,
            311062256,
            311062646,
            311066843,
            311053249,
            311062988,
            311059819,
            311096162
        ],
        "B": [
            311045239,
            311044707,
            311043555,
            311043641,
            311046416,
            311046113,
            311044758,
            311043793,
            311048255,
            311045137,
            311044396,
            311044990,
            311049796,
            311048015,
            311058751,
            311045105,
            311045287,
            311046394,
            311099408
        ],
        "A": [
            311042018,
            311040390,
            311040326,
            311040380,
            311040339,
            311040623,
            311040931,
            311040288,
            311041987,
            311040424,
            311040342,
            311040291,
            311041844,
            311040490,
            311049977,
            311040412,
            311040468,
            311040975,
            311101264
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/140781",
    "editorial": "Note that for any positive integer , the following equality holds: .\r\nThis means that for each number, only the total power of two by which it\r\nwill be divided is significant.Due to the restriction that the same\r\npower of two cannot be used twice, we can divide all powers (in this\r\nproblem, we can consider powers from to ) into three groups: the powers\r\nby which will be divided; the powers by which will be divided; and the\r\npowers that will not be used.However, there may be many suitable\r\npartitions, but we need to minimize the cost. To do so, we can use\r\ndynamic programming to calculate the minimum cost if we considered the\r\nfirst powers, with the sum of the first group equal to and the sum of\r\nthe second group equal to . The transitions in this dynamic programming\r\nare straightforward: either we add the next power to the first group, or\r\nto the second, or we exclude it.Note that this dynamic programming can\r\nbe computed once and then used to calculate the answer for any given\r\ntest case. Using this dynamic programming, the answer can be computed as\r\nfollows: iterate over and such that , and select the minimum among the\r\nvalues .\r\n",
    "name": "D. Equalization",
    "statement": "You are given two non-negative integers x and y.You can perform the\r\nfollowing operation any number of times (possibly zero): choose a\r\npositive integer k and divide either x or y by 2^k rounding down. The\r\ncost of this operation is 2^k. However, there is an additional\r\nconstraint: you cannot select the same value of k more than once.Your\r\ntask is to calculate the minimum possible cost in order to make x equal\r\nto y.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "dp",
        "graphs",
        "math"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Equalization.json"
}