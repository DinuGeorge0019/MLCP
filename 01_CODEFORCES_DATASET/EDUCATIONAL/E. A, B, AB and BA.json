{
    "link": "https://codeforces.com//contest/2069/problem/E",
    "problemId": "3213450",
    "problem_idx": "E",
    "shortId": "2069E",
    "contest_number": "2069",
    "problem_submissions": {
        "E": [
            306720227,
            306703455,
            306762040,
            306709414,
            306720479,
            306710204,
            306717271,
            306714232,
            306713491,
            306717023,
            306719634,
            306716305,
            306717171,
            306715546,
            306713534,
            307552024,
            306752930,
            306724477,
            306721728,
            306718615,
            306718992,
            306726971,
            306725677
        ],
        "F": [
            306709347,
            306728258,
            306727520,
            306728135,
            306741225,
            306726966,
            306744015,
            306732116,
            306739032,
            306855146,
            306737313,
            306730256,
            306733511,
            306743505,
            306725225,
            306745953,
            306762587,
            306739080,
            306745663,
            306744259,
            306729975,
            306736187,
            306742000
        ],
        "D": [
            306694099,
            306695545,
            306695100,
            306694667,
            306690359,
            306701386,
            306701212,
            306696826,
            306697964,
            306697288,
            306699133,
            306704039,
            306702795,
            306701942,
            306702458,
            306700726,
            306707761,
            306704425,
            306708530,
            306707972
        ],
        "C": [
            306685465,
            306686684,
            306687348,
            306684235,
            306683606,
            306688263,
            306688039,
            306687329,
            306856369,
            306685918,
            306688691,
            306688112,
            306685819,
            306691359,
            306688654,
            306686865,
            306692320,
            306691352,
            306695398,
            306686441,
            306689890
        ],
        "B": [
            306681829,
            306682850,
            306682972,
            306680572,
            306680880,
            306682298,
            306683281,
            306682689,
            306856172,
            306681142,
            306684519,
            306683738,
            306681106,
            306703816,
            306682841,
            306682588,
            306685491,
            306683927,
            306691965,
            306683224,
            306685776
        ],
        "A": [
            306678234,
            306678240,
            306678194,
            306678094,
            306678179,
            306678115,
            306678333,
            306678481,
            306855634,
            306678273,
            306679166,
            306678389,
            306678130,
            306680446,
            306678338,
            306678258,
            306678871,
            306678235,
            306687347,
            306679141,
            306678310
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/139774",
    "editorial": "Firstly, let’s find the solution that maximizes the number of used\r\nblocks of length ( and ). Each used block of length frees us one and ,\r\nso we don’t lose anything.Secondly, since we don’t have and , any pair\r\nof equal neighboring characters will be split in-between in any possible\r\npartition. So, let’s split them at the start. As a result, we’ll get\r\nblocks with alternating characters of four types: : if it’s length it\r\ncan be split in -s and -s for any . For example: , or ; : practically\r\nthe same as the previous, so let’s just count the total number of blocks\r\nwe can get from the first two types as ; : it can be split in of , but\r\nif we need at least one the total number of blocks will reduce to . For\r\nexample: , but ; : the same case, but favors -s instead. So, let’s split\r\ninto and into as much as we can. As a result, one of three cases will\r\nfollow: We spent all : then remaining blocks will be split into . We\r\nlose one pair of and for each block, so it’s optimal to reduce the\r\nnumber of remaining , so it’s optimal to split -s into -s at the first\r\nstep. We spent all : remaining blocks will be split into . The case is\r\nthe same as previous and gives the same greedy: split shortest -s into\r\n-s at the first step. There are no and left. Only odd-length blocks left\r\n(the first two types}, so it doesn’t matter how to split it. In total\r\nwe’ll get more blocks of length . Note that cases and will lead to\r\neither case or zeroing both and , but if both and we’ll also get extra\r\nblocks from the first two types of alternating strings. In other words,\r\nthere are not so much casework as it seems.In total, the strategy is the\r\nfollowing: split -s into in increasing order of lengths; split -s into\r\nin increasing order of lengths; split remaining -s into in any order;\r\nsplit remaining -s into in any order; calculate extra pairs you’ll get\r\nusing the formula . check that you have enough and to cover remaining -s\r\nand -s. Total complexity is .\r\n",
    "name": "E. A, B, AB and BA",
    "statement": "You are given a string s consisting of characters and .Your task is to\r\nsplit it into blocks of length 1 and 2 in such a way that there are no\r\nmore than a strings equal to \"\"; there are no more than b strings equal\r\nto \"\"; there are no more than ab strings \"\"; there are no more than ba\r\nstrings \"\"; Strings \"\" and \"\" are prohibited. Each character of the\r\ninitial string s should belong to exactly one block.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "sortings",
        "strings"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. A, B, AB and BA.json"
}