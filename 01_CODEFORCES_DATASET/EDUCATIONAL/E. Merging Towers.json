{
    "link": "https://codeforces.com//contest/1380/problem/E",
    "problemId": "670987",
    "problem_idx": "E",
    "shortId": "1380E",
    "contest_number": "1380",
    "problem_submissions": {
        "F": [
            86713166,
            86683254,
            86680631,
            86680966,
            86687165,
            86684140,
            86669350,
            86688621,
            86687283,
            86673002,
            86689951,
            86691835,
            86685205,
            86710315,
            86689156,
            86687400,
            86687045,
            86687896,
            86690019
        ],
        "G": [
            86677566,
            86685201,
            86688237,
            86689481,
            86686718,
            86691383,
            86690954,
            86692142,
            86694360,
            86693986,
            86693332,
            86693299,
            86700820,
            86693764,
            86685196,
            86684314
        ],
        "E": [
            86675522,
            86675407,
            86673302,
            86676691,
            86680473,
            86684037,
            86681297,
            86679620,
            86685647,
            86685220,
            86686544,
            86674567,
            86678512,
            86684412,
            86683830,
            86676323,
            86680714,
            86681696,
            86690990
        ],
        "D": [
            86667662,
            86670333,
            86669219,
            86673424,
            86678569,
            86680592,
            86676914,
            86676735,
            86681998,
            86680522,
            86687871,
            86670447,
            86672345,
            86680156,
            86679073,
            86689461,
            86721905,
            86687223
        ],
        "C": [
            86667582,
            86670259,
            86669101,
            86667895,
            86670203,
            86672224,
            86667959,
            86672685,
            86676101,
            86675384,
            86675814,
            86668973,
            86672498,
            86672045,
            86670655,
            86667252,
            86668731,
            86674537,
            86668780
        ],
        "B": [
            86667335,
            86670187,
            86671042,
            86667790,
            86672794,
            86670893,
            86667752,
            86671215,
            86673431,
            86671665,
            86674484,
            86670341,
            86660822,
            86669327,
            86673817,
            86667069,
            86673326,
            86672657,
            86668683
        ],
        "A": [
            86667075,
            86670143,
            86668605,
            86667568,
            86667937,
            86657614,
            86657741,
            86669480,
            86673357,
            86672922,
            86672973,
            86668720,
            86672438,
            86659787,
            86671597,
            86666992,
            86671323,
            86669608,
            86668545
        ]
    },
    "name": "E. Merging Towers",
    "statement": "You have a set of n discs, the i-th disc has radius i. Initially, these\r\ndiscs are split among m towers: each tower contains at least one disc,\r\nand the discs in each tower are sorted in descending order of their\r\nradii from bottom to top.You would like to assemble one tower containing\r\nall of those discs. To do so, you may choose two different towers i and\r\nj (each containing at least one disc), take several (possibly all) top\r\ndiscs from the tower i and put them on top of the tower j in the same\r\norder, as long as the top disc of tower j is bigger than each of the\r\ndiscs you move. You may perform this operation any number of times.For\r\nexample, if you have two towers containing discs [6, 4, 2, 1] and [8, 7,\r\n5, 3] (in order from bottom to top), there are only two possible\r\noperations: move disc 1 from the first tower to the second tower, so the\r\ntowers are [6, 4, 2] and [8, 7, 5, 3, 1]; move discs [2, 1] from the\r\nfirst tower to the second tower, so the towers are [6, 4] and [8, 7, 5,\r\n3, 2, 1]. Let the of some set of towers be the minimum number of\r\noperations required to assemble one tower containing all of the discs.\r\nFor example, the of the set of towers [[3, 1], [2]] is 2: you may move\r\nthe disc 1 to the second tower, and then move both discs from the second\r\ntower to the first tower.You are given m - 1 queries. Each query is\r\ndenoted by two numbers a_i and b_i, and means \"merge the towers a_i and\r\nb_i\" (that is, take all discs from these two towers and assemble a new\r\ntower containing all of them in descending order of their radii from top\r\nto bottom). The resulting tower gets index a_i.For each k\r\nin [0, m - 1], calculate the of the set of towers after the first k\r\nqueries are performed.\r\n",
    "solutions": [
        "#pragma GCC optimize (\"O3\")\n#pragma GCC target (\"sse4\")\n \n#include <bits/stdc++.h>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n \ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<ld,ld> pd;\n \ntypedef vector<int> vi;\ntypedef vector<ld> vd;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\ntypedef vector<pl> vpl;\ntypedef vector<cd> vcd;\n \n#define FOR(i, a, b) for (int i=a; i<(b); i++)\n#define F0R(i, a) for (int i=0; i<(a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n#define trav(a,x) for (auto& a : x)\n \n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n#define ins insert\n\ntemplate<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\ntemplate<class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\n \nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n \nconst int MOD = 1000000007;\nconst char nl = '\\n';\nconst int MX = 100001; //check the limits, dummy\n \n\nint main() {\n\tios_base::sync_with_stdio(0); cin.tie(0);    \n\t\n    int N, M; cin >> N >> M;\n    int col[N];\n    vector<vi> A(M);\n    int ans = N-1;\n    F0R(i, N) {\n        cin >> col[i]; col[i]--;\n        A[col[i]].pb(i);\n        if (i > 0 && col[i] == col[i-1]) ans--;\n    }\n\n    cout << ans << nl;\n\n    int rep[M]; F0R(i, M) rep[i] = i;\n\n    F0R(it, M-1) {\n        int X, Y; cin >> X >> Y; X--; Y--;\n        int oa = X;\n        X = rep[X]; Y = rep[Y];\n        if (sz(A[X]) < sz(A[Y])) {\n            swap(X, Y);\n        }\n\n        trav(a, A[Y]) {\n            if (a > 0 && col[a-1] == X) {\n                ans--;\n            }\n            if (a < N-1 && col[a+1] == X) {\n                ans--;\n            }\n        }\n        trav(a, A[Y]) {\n            col[a] = X;\n            A[X].pb(a);\n        }\n        rep[oa] = X;\n        cout << ans << nl;\n    }\n\n\n\n    \n\t\n\treturn 0;\n}\n \n// read the question correctly (ll vs int)\n// template by bqi343\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dsu",
        "implementation",
        "trees"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Merging Towers.json",
    "editorial_link": "https://codeforces.com//blog/entry/80054",
    "editorial": "First of all, let\u00e2\u0080\u0099s try to find a simple way to evaluate the difficulty\r\nof a given set of towers. I claim that the difficulty is equal to the\r\nnumber of pairs of discs that belong to different towers. during each\r\noperation we can \"merge\" at most one such pair: if we move discs to the\r\ntower with disk on top of it, only the pair can be affected; we can\r\nalways take the first several discs belonging to the same tower and move\r\nthem to the tower containing disc , thus merging exactly one pair in\r\nexactly one operation.After that, there are two main approaches: LCA and\r\nsmall-to-large merging. The model solution uses LCA, so I\u00e2\u0080\u0099ll describe\r\nit.For each pair , we have to find the first moment these discs belong\r\nto the same tower. To do so, let\u00e2\u0080\u0099s build a rooted tree on vertices. The\r\nvertices to will be the leaves of the tree and will represent the\r\noriginal towers. The vertex will represent the tower created during the\r\n-th query and will have two children the vertices representing the\r\ntowers we merge during the -th query. The vertex is the root.Now, if\r\nsome vertex is an ancestor of vertex , it means that the tower\r\nrepresented by vertex contains all the discs from the tower represented\r\nby vertex . So, to find the first tower containing two discs and , we\r\nhave to find the lowest common ancestor of the vertices representing the\r\ntowers and . The easiest way to do it is to implement something like\r\nbinary lifting, which allows us to solve the problem in .\r\n"
}