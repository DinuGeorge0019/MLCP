{
    "link": "https://codeforces.com//contest/1202/problem/C",
    "problemId": "385664",
    "problem_idx": "C",
    "shortId": "1202C",
    "contest_number": "1202",
    "problem_submissions": {
        "F": [
            58450924,
            58449423,
            58454352,
            58459803,
            58448615,
            58683759,
            58544660,
            58632018,
            58460608,
            58677253,
            59095272
        ],
        "E": [
            58446577,
            59548224,
            58440455,
            58449286,
            58475576,
            58455191,
            58455332,
            58449043,
            58451450,
            58448860,
            58450378,
            58451427,
            58451624,
            58451536,
            58451835,
            58443909,
            58451432,
            58452032,
            58454174,
            58451009,
            58452592,
            58451940
        ],
        "D": [
            58444092,
            58442549,
            58443962,
            58475546,
            58444450,
            58440999,
            58440440,
            58443368,
            58445508,
            58445716,
            58445057,
            58441174,
            58445333,
            58445907,
            58446487,
            58445052,
            58442732,
            58442650,
            58444867,
            58447384,
            58446089
        ],
        "C": [
            58441598,
            58452310,
            58442367,
            58475556,
            58442473,
            58439618,
            58446484,
            58442135,
            58443668,
            58443427,
            58442755,
            58446380,
            58443036,
            58443982,
            58455139,
            58441929,
            58447606,
            58446719,
            58443811,
            58445636,
            58448227
        ],
        "B": [
            58439444,
            58444513,
            58438813,
            58475511,
            58439503,
            58438262,
            58439422,
            58439559,
            58440663,
            58440425,
            58439072,
            58440288,
            58439823,
            58440365,
            58439836,
            58438293,
            58440655,
            58440555,
            58440058,
            58442143,
            58438995
        ],
        "A": [
            58438253,
            58437660,
            58437723,
            58475481,
            58437816,
            58437640,
            58437730,
            58437581,
            58437903,
            58437729,
            58437803,
            58437783,
            58437814,
            58438010,
            58438207,
            58437638,
            58439242,
            58437860,
            58437712,
            58437966,
            58440352
        ]
    },
    "name": "C. You Are Given a WASD-string...",
    "statement": "You have a string s a sequence of commands for your toy robot. The robot\r\nis placed in some cell of a grid. He can perform four commands: \u2019W\u2019 move\r\none cell up; \u2019S\u2019 move one cell down; \u2019A\u2019 move one cell left; \u2019D\u2019 move\r\none cell right. Let Grid(s) be the grid of minimum possible area such\r\nthat there is a position in the grid where you can place the robot in\r\nsuch a way that it will not fall from the grid while running the\r\nsequence of commands s. For example, if s =\r\ntext{DSAWWAW} then Grid(s) is the 4\r\ntimes 3 grid: you can place the robot in the cell (3, 2); the robot\r\nperforms the command \u2019D\u2019 and moves to (3, 3); the robot performs the\r\ncommand \u2019S\u2019 and moves to (4, 3); the robot performs the command \u2019A\u2019 and\r\nmoves to (4, 2); the robot performs the command \u2019W\u2019 and moves to (3, 2);\r\nthe robot performs the command \u2019W\u2019 and moves to (2, 2); the robot\r\nperforms the command \u2019A\u2019 and moves to (2, 1); the robot performs the\r\ncommand \u2019W\u2019 and moves to (1, 1). You have 4 extra letters: one \u2019W\u2019, one\r\n\u2019A\u2019, one \u2019S\u2019, one \u2019D\u2019. You\u2019d like to insert in any position of sequence\r\ns to minimize the area of Grid(s).What is the minimum area of Grid(s)\r\nyou can achieve?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nusing pii=pair<int,int>;\nset<pii> A,B;\nchar b[201010];\nint main(){\n\tint T;scanf(\"%d\",&T);\n\twhile(T--){\n\t\tA.clear();B.clear();\n\t\tint x=0,y=0;\n\t\tscanf(\"%s\",b);\n\t\tint n=strlen(b);\n\t\tA.insert({x,0});\n\t\tB.insert({y,0});\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(b[i]=='W')y++;\n\t\t\telse if(b[i]=='S')y--;\n\t\t\telse if(b[i]=='A')x++;\n\t\t\telse x--;\n\t\t\tA.insert({x,i+1});\n\t\t\tB.insert({y,i+1});\n\t\t}\t\t\n\t\tlong long ans=1LL*(prev(A.end())->first-A.begin()->first+1)*(prev(B.end())->first-B.begin()->first+1);\n\t\tx=0,y=0;\n\t\tint mx=0,Mx=0,my=0,My=0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint a=A.begin()->first,b=prev(A.end())->first,c=B.begin()->first,d=prev(B.end())->first;\n\t\t\tans=min(ans,1LL*(max(Mx,b+1)-min(mx,a+1)+1)*(max(My,d)-min(my,c)+1));\n\t\t\tans=min(ans,1LL*(max(Mx,b-1)-min(mx,a-1)+1)*(max(My,d)-min(my,c)+1));\n\t\t\tans=min(ans,1LL*(max(Mx,b)-min(mx,a)+1)*(max(My,d+1)-min(my,c+1)+1));\n\t\t\tans=min(ans,1LL*(max(Mx,b)-min(mx,a)+1)*(max(My,d-1)-min(my,c-1)+1));\n\t\t\tA.erase({x,i});\n\t\t\tB.erase({y,i});\n\t\t\tif(::b[i]=='W')y++;\n\t\t\telse if(::b[i]=='S')y--;\n\t\t\telse if(::b[i]=='A')x++;\n\t\t\telse x--;\n\t\t\tMx=max(Mx,x);\n\t\t\tmx=min(mx,x);\n\t\t\tMy=max(My,y);\n\t\t\tmy=min(my,y);\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "greedy",
        "implementation",
        "math",
        "strings"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. You Are Given a WASD-string....json",
    "editorial_link": "https://codeforces.com/blog/entry/68972",
    "editorial": "The problem asks us to maintain the bounding box while inserting the\r\ncharacter of one of types between every adjacent characters in . Of\r\ncourse, we can do it, but do we really to do it in such way? Let\u00e2\u0080\u0099s think\r\na little. Inserting \u00e2\u0080\u0099W\u00e2\u0080\u0099 or \u00e2\u0080\u0099S\u00e2\u0080\u0099 doesn\u00e2\u0080\u0099t affect the width of the bounding\r\nbox, and \u00e2\u0080\u0099A\u00e2\u0080\u0099 or \u00e2\u0080\u0099D\u00e2\u0080\u0099 doesn\u00e2\u0080\u0099t affect the height. So, they are absolutely\r\nindependent! And we can divide our WASD-string on WS-string and\r\nAD-string. Moreover, inserting \u00e2\u0080\u0099W\u00e2\u0080\u0099 or \u00e2\u0080\u0099S\u00e2\u0080\u0099 in WS-string and \u00e2\u0080\u0099A\u00e2\u0080\u0099 or \u00e2\u0080\u0099D\u00e2\u0080\u0099 in\r\nAD-string is almost same thing, so we don\u00e2\u0080\u0099t even need to write different\r\ncode for different string!How to handle only WS-string? Let\u00e2\u0080\u0099s replace\r\n\u00e2\u0080\u0099W\u00e2\u0080\u0099 as and \u00e2\u0080\u0099S\u00e2\u0080\u0099 as and suppose that we started in position . Then the\r\nposition, where we go after commands, is just prefix sum of first\r\nelements (). Then the length of the bounding box is (maximum position -\r\nminimum position + 1). The maximum (minimum) position is a maximum\r\n(minimum) element in array of prefix sums .What the inserted value do?\r\nIt add to suffix of . Let\u00e2\u0080\u0099s choose, for example, . The can\u00e2\u0080\u0099t decrease\r\nthe maximum, but can increase the minimum, so we need to place it\r\nsomewhere before all minimums in (or before the first minimum). But, if\r\nwe place it before any of maximum elements then we will increase it and\r\nprevent decreasing the length of bounding box. So we need to place\r\nsomewhere after all maximums on (or after the last maximum). And here\r\ngoes the solution: find position of the first minimum in and position of\r\nthe last maximum. If then we can insert and decrease the length of\r\nbounding box (but, since, we insert command that move robot, we can\u00e2\u0080\u0099t\r\nachieve bounding box of length ).What to do with ? Just multiply by and\r\nnow we can insert instead of in absolutely same manner.What to do with\r\nAD-string? Denote \u00e2\u0080\u0099A\u00e2\u0080\u0099 as and \u00e2\u0080\u0099D\u00e2\u0080\u0099 as and everything is absolutely the\r\nsame.\r\n"
}