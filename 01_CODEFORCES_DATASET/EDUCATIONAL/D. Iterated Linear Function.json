{
    "link": "https://codeforces.com//contest/678/problem/D",
    "problemId": "62342",
    "problem_idx": "D",
    "shortId": "678D",
    "contest_number": "678",
    "problem_submissions": {
        "F": [
            18453131,
            18420467,
            18425171,
            18429408,
            18431074,
            18428972,
            18515149,
            18432045,
            89962482,
            18522658,
            18427723
        ],
        "E": [
            18423856,
            18426719,
            18424135,
            18422717,
            18424399,
            18422688,
            18421665,
            18423374,
            18424000,
            18427338,
            18425849,
            18427192,
            18423884,
            18423912,
            18423782,
            18423439,
            18422852,
            18426690,
            18426397,
            18430230,
            18428108
        ],
        "D": [
            18422167,
            18420673,
            18421079,
            18421585,
            18418234,
            18420418,
            18420469,
            18421143,
            18421608,
            18420811,
            18420770,
            18422521,
            18422464,
            18421452,
            18418864,
            18420342,
            18421560,
            18422253,
            18422291,
            18423193
        ],
        "C": [
            18421205,
            18418762,
            18419353,
            18420283,
            18419554,
            18419287,
            18418669,
            18419102,
            18419489,
            18418869,
            18419091,
            18419530,
            18417774,
            18417333,
            18422755,
            18419713,
            18418829
        ],
        "B": [
            18418891,
            18418100,
            18418460,
            18419775,
            18420991,
            18418525,
            18417867,
            18418207,
            18418651,
            18418012,
            18418189,
            18420158,
            18418599,
            18418750,
            18419513,
            18418365,
            18418476,
            18418554,
            18418016
        ],
        "A": [
            18417154,
            18416577,
            18416530,
            18416541,
            18416507,
            18416774,
            18416581,
            18416781,
            18417063,
            18416573,
            18416637,
            18417124,
            18416520,
            18416522,
            18416509,
            18417176,
            18416817,
            18416584
        ]
    },
    "name": "D. Iterated Linear Function",
    "statement": "Consider a linear function . Let’s define and for . For the given\r\ninteger values , , and find the value of modulo .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int Q = 1e9 + 7;\nstruct Matrix {\n    int n , m , a[2][2];\n    Matrix (int _n = 0, int _m = 0) {\n        n = _n , m = _m;\n        memset(a , 0 , sizeof(a));\n    }\n    Matrix operator * (const Matrix &R) const {\n        Matrix res(n , R.m);\n        for (int i = 0 ; i < n ; ++ i) {\n            for (int j = 0 ; j < m ; ++ j) {\n                for (int k = 0 ; k < R.m ; ++ k) {\n                    res.a[i][k] += (LL)a[i][j] * R.a[j][k] % Q;\n                    res.a[i][k] %= Q;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nint main() {\n    LL A , B , n , x;\n    cin >> A >> B >> n >> x;\n    Matrix I(1 , 2);\n    I.a[0][0] = x , I.a[0][1] = 1;\n    Matrix P(2 , 2);\n    P.a[0][0] = A;\n    P.a[1][0] = B;\n    P.a[1][1] = 1;\n    while (n) {\n        if (n & 1) {\n            I = I * P;\n        }\n        P = P * P;\n        n >>= 1;\n    }\n    cout << I.a[0][0] << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "number theory"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Iterated Linear Function.json",
    "editorial_link": "https://codeforces.com//blog/entry/45405",
    "editorial": "The problem was suggested by Zi Song Yeoh zscoder. The problem can be\r\nsolved using closed formula: itâs need to calculate the sum of geometric\r\nprogression. The formula can be calculated using binary exponentiation.\r\nIâll describe more complicated solution, but itâs more general. If we\r\nhave a set of variables and at each step all variables are recalculating\r\nfrom each other using linear function, we can use binary matrix\r\nexponentiation. There is only one variable in our problem. The new\r\nvariable is calculating using formula . Consider the matrix and the\r\nvector . Letâs multiply and . Easy to see that we will get the vector .\r\nSo to make iterations we should multiply and times. We can do that using\r\nbinary matrix exponentiation, because matrix multiplication is\r\nassociative. As an exercise try to write down the matrix for the\r\nFibonacci numbers and calculate the -th Fibonacci number in time. The\r\nmatrix and the vector is under the spoiler. The matrix and the vector\r\nfor the Fibonacci numbersz=[[0, 1], [1, 1]], v=[0, 1].\r\n",
    "hint": []
}