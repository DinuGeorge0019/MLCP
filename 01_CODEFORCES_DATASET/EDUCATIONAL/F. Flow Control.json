{
    "link": "https://codeforces.com//contest/990/problem/F",
    "problemId": "188995",
    "problem_idx": "F",
    "shortId": "990F",
    "contest_number": "990",
    "problem_submissions": {
        "F": [
            39110066,
            39104822,
            39113275,
            39114587,
            39116563,
            39116347,
            39108471,
            39110743,
            39112419,
            39112294,
            39108515,
            39111997,
            39116686,
            39101868,
            39116200,
            39118004,
            39116805
        ],
        "G": [
            39103567,
            39107402,
            39106809,
            39106218,
            39109082,
            39109620,
            39112690,
            39099088,
            39107571,
            39107687,
            39101902,
            39093184,
            39110367,
            39109522,
            39104630,
            39111664,
            39109028,
            39108412,
            39110999,
            39098996,
            39104033,
            39110989
        ],
        "E": [
            39100436,
            39099837,
            39102349,
            39105427,
            39103107,
            39102633,
            39102885,
            39108880,
            39105761,
            39109203,
            39112620,
            39094389,
            39105905,
            39112883,
            39105943,
            39113374,
            39104376,
            39107310,
            39113606,
            39104223
        ],
        "D": [
            39097266,
            39096033,
            39098379,
            39099218,
            39098520,
            39098083,
            39096052,
            39105736,
            39099850,
            39105515,
            39109276,
            39104646,
            39099923,
            39115103,
            39100668,
            39103321,
            39099280,
            39102959,
            39097613,
            39097717
        ],
        "C": [
            39093177,
            39093378,
            39093798,
            39094808,
            39094793,
            39094824,
            39092448,
            39093937,
            39096177,
            39100038,
            39095064,
            39091685,
            39095797,
            39094884,
            39094704,
            39096565,
            39094721,
            39095152,
            39094603,
            39094594
        ],
        "B": [
            39090464,
            39091292,
            39090459,
            39091170,
            39091740,
            39091855,
            39090681,
            39099050,
            39093555,
            39099346,
            39098193,
            39090407,
            39092627,
            39091505,
            39092737,
            39092039,
            39090632,
            39091613,
            39090743,
            39091072
        ],
        "A": [
            39088999,
            39088905,
            39088870,
            39088899,
            39089924,
            39089350,
            39089008,
            39089597,
            39089600,
            39090391,
            39090409,
            39089125,
            39089740,
            39090714,
            39089522,
            39088868,
            39088892,
            39089011,
            39089148
        ]
    },
    "name": "F. Flow Control",
    "statement": "You have to handle a very complex water distribution system. The system\r\nconsists of n junctions and m pipes, i-th pipe connects junctions x_i\r\nand y_i.The only thing you can do is adjusting the pipes. You have to\r\nchoose m integer numbers f_1, f_2, ..., f_m and use them as pipe\r\nsettings. i-th pipe will distribute f_i units of water per second from\r\njunction x_i to junction y_i (if f_i is negative, then the pipe will\r\ndistribute |f_i| units of water per second from junction y_i to junction\r\nx_i). It is allowed to set f_i to any integer from -2\r\ncdot 10^9 to 2\r\ncdot 10^9.In order for the system to work properly, there are some\r\nconstraints: for every i\r\nin [1, n], i-th junction has a number s_i associated with it meaning\r\nthat the difference between incoming and outcoming flow for i-th\r\njunction must be s_i (if s_i is not negative, then i-th junction must\r\nreceive s_i units of water per second; if it is negative, then i-th\r\njunction must transfer |s_i| units of water per second to other\r\njunctions).Can you choose the integers f_1, f_2, ..., f_m in such a way\r\nthat all requirements on incoming and outcoming flows are satisfied?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#pragma comment(linker, \"/STACK:16000000\")\nusing namespace std;\n\ntypedef pair <int, int> ii;\n\nconst int Maxn = 200005;\nconst int Maxm = 20;\n\nint n;\nint s[Maxn];\nint par[Maxn], siz[Maxn];\nint m;\nint A[Maxn], B[Maxn], C[Maxn];\nvector <ii> neigh[Maxn];\n\nint getPar(int x) { return par[x] == x? x: par[x] = getPar(par[x]); }\n\nbool unionSet(int a, int b)\n{\n\ta = getPar(a), b = getPar(b);\n\tif (a == b) return false;\n\tif (siz[a] < siz[b]) swap(a, b);\n\tsiz[a] += siz[b]; par[b] = a;\n\treturn true;\n}\n\nvoid Add(int ind, int a, int b, int c)\n{\n\tif (A[ind] == a && B[ind] == b) C[ind] += c;\n\telse C[ind] -= c;\n}\n\nint Solve(int v, int p = 0)\n{\n\tint cnt = s[v];\n\tfor (int i = 0; i < neigh[v].size(); i++) {\n\t\tii u = neigh[v][i];\n\t\tif (u.first == p) continue;\n\t\tint add = Solve(u.first, v);\n\t\tAdd(u.second, v, u.first, add);\n\t\tcnt += add;\n\t}\n\treturn cnt;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tint sum = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%d\", &s[i]);\n\t\tsum += s[i];\n\t}\n\tif (sum != 0) { printf(\"Impossible\\n\"); return 0; }\n\tprintf(\"Possible\\n\");\n\tfor (int i = 1; i <= n; i++)\n\t\tpar[i] = i, siz[i] = 1;\n\tscanf(\"%d\", &m);\n\tfor (int i = 1; i <= m; i++) {\n\t\tscanf(\"%d %d\", &A[i], &B[i]);\n\t\tif (unionSet(A[i], B[i])) {\n\t\t\tneigh[A[i]].push_back(ii(B[i], i));\n\t\t\tneigh[B[i]].push_back(ii(A[i], i));\n\t\t}\n\t}\n\tSolve(1);\n\tfor (int i = 1; i <= m; i++)\n\t\tprintf(\"%d\\n\", C[i]);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "greedy",
        "trees"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Flow Control.json",
    "editorial_link": "https://codeforces.com//blog/entry/59962",
    "editorial": "The answer is if and only if the sum of values is not equal to . Writing\r\nsome number on edge does not change the total sum and the goal of the\r\nproblem is to make in each vertex, thus getting in total.The algorithm\r\nis simple: you get an arbitrary spanning tree (with dfs or dsu), output\r\nthe difference between sums of values of subtrees (can be calculated\r\nwith dfs) for edges in this tree and for the rest of edges.Let\u00e2\u0080\u0099s take an\r\narbitrary correct answer. If is has some cycle in graph of edges with\r\nnon-zero numbers on them, then you can remove it. For example, select\r\nany edge on it and subtract the number on it from all the edges of the\r\ncycle. This doesn\u00e2\u0080\u0099t break the correctness of the answer, as you change\r\nboth in and out flows for each vertex by the same value. Now that edge\r\nhas . This way, any answer can be transformed to tree. And for any edge\r\non tree we want to tranfer excess water units from the larger subtree to\r\nthe smaller.Overall complexity: .\r\n"
}