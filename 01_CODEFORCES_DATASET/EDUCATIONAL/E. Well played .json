{"link": "https://codeforces.com//contest/976/problem/E", "problemId": "179789", "problem_idx": "E", "shortId": "976E", "contest_number": "976", "problem_submissions": {"F": [37763363, 37769230, 37771809, 37769578, 37765676, 37771852, 37775489, 40889146, 37778041, 37772108, 37770120, 37757030], "E": [37759612, 37757569, 37763598, 37765549, 37756497, 37767476, 37763904, 37761921, 37762005, 37760373, 37795909, 37761211, 37765405, 72387001, 37763422, 37761979, 37766932, 37762131, 37774529, 37769526], "D": [37757523, 37766476, 37758195, 37762921, 38269676, 37760546, 37768835, 37769171, 37773037, 37769443, 37775265, 37789135, 37775829, 37773943, 37772078, 37768377, 37772102], "C": [37753334, 37753217, 37761367, 37754559, 37753952, 37755372, 37756629, 37754330, 37754742, 37756131, 37753666, 37754884, 37754248, 37754586, 37754439, 37755438, 37764985, 37761302, 37758356], "B": [37752460, 37751754, 37759385, 37753338, 37752699, 37754118, 37754359, 37753149, 37755340, 37754515, 37752717, 37753548, 37753298, 37756555, 37753663, 37754307, 37766708, 37755815, 37756102], "A": [37750664, 37750612, 37751755, 37750646, 37750641, 37751080, 37750713, 37750665, 37750980, 37750618, 37750952, 37750900, 37751444, 37752036, 37752198, 37763975, 37751822, 37753480]}, "name": "E. Well played ", "statement": "Recently Max has got himself into popular CCG \"BrainStone\". As\r\n\"BrainStone\" is a pretty intellectual game, Max has to solve numerous\r\nhard problems during the gameplay. Here is one of them:Max owns\r\ncreatures, -th of them can be described with two numbers its health and\r\nits damage . Max also has two types of spells in stock: Doubles health\r\nof the creature ( := ); Assigns value of of the creature to its ( := ).\r\nSpell of first type can be used no more than times in total, of the\r\nsecond type no more than times in total. Spell can be used on a certain\r\ncreature multiple times. Spells can be used in arbitrary order. It isn\u2019t\r\nnecessary to use all the spells.Max is really busy preparing for his\r\nfinal exams, so he asks you to determine what is the maximal total\r\ndamage of all creatures he can achieve if he uses spells in most optimal\r\nway.\r\n", "solutions": ["#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:336777216\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n\ntypedef tuple<int, int, int> t3;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\n\nint IT_MAX = 1 << 17;\nconst ll MOD = 998244353;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 0x3f3f3f3f3f3f3f3f;\nconst db PI = acos(-1);\nconst db ERR = 1e-10;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<n;i++)\n#define Se second\n#define Fi first\n\npll in[200050];\n\nint main() {\n\tll N, A, B, i, j;\n\tscanf(\"%lld %lld %lld\", &N, &A, &B);\n\tfor (i = 1; i <= N; i++) scanf(\"%lld %lld\", &in[i].first, &in[i].second);\n\tB = min(B, N);\n\n\tsort(in + 1, in + N + 1, [](pll a, pll b) {\n\t\treturn a.first - a.second > b.first - b.second;\n\t});\n\n\tll ans = 0;\n\tfor (i = 1; i <= N; i++) ans += in[i].second;\n\n\tif (B == 0) return !printf(\"%lld\\n\", ans);\n\tfor (i = 1; i <= B; i++) if (in[i].first > in[i].second) ans += in[i].first - in[i].second;\n\n\tll ANS = ans;\n\tfor (i = 1; i <= N; i++) {\n\t\tll tans = ans;\n\t\tif (i <= B) {\n\t\t\ttans += max(in[i].first << A, in[i].second) - in[i].second;\n\t\t\ttans -= max(0ll, in[i].first - in[i].second);\n\t\t}\n\t\telse {\n\t\t\ttans += max(in[i].first << A, in[i].second) - in[i].second;\n\t\t\ttans -= max(0ll, in[B].first - in[B].second);\n\t\t}\n\t\tANS = max(ANS, tans);\n\t}\n\treturn !printf(\"%lld\\n\", ANS);\n}"], "input": "", "output": "", "tags": ["greedy", "sortings"], "dificulty": "2100", "interactive": false}