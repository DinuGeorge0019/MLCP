{
    "link": "https://codeforces.com//contest/628/problem/B",
    "problemId": "48824",
    "problem_idx": "B",
    "shortId": "628B",
    "contest_number": "628",
    "problem_submissions": {
        "F": [
            16211421,
            16211567,
            16211169,
            16208042,
            16208527,
            16211299,
            16220786,
            16205726,
            16251882,
            16212235,
            16209081,
            16210918,
            16211253
        ],
        "E": [
            16209151,
            16209513,
            16209798,
            16210303,
            16210389,
            16210209,
            16207914,
            16208921,
            16208930,
            16210016,
            16208755,
            16210104,
            16210071,
            16211325,
            16211040,
            16210904,
            16210538,
            16209234,
            16210698,
            16210531,
            16214256
        ],
        "D": [
            16206627,
            16206845,
            16206086,
            16207092,
            16208100,
            16205719,
            16205288,
            16206076,
            16260286,
            16206980,
            16206584,
            16206673,
            16206619,
            16207592,
            16206640,
            16380499,
            16206826,
            16207654
        ],
        "C": [
            16204024,
            16203998,
            16203984,
            16204943,
            16204160,
            16203580,
            16204456,
            16203644,
            16203472,
            16204820,
            16204285,
            16204239,
            16203927,
            16204552,
            16204730,
            16203693,
            16204713,
            16204672
        ],
        "B": [
            16203509,
            16203431,
            16203495,
            16204395,
            16203326,
            16203172,
            16204023,
            16203232,
            16203233,
            16204126,
            16203462,
            16203612,
            16203325,
            16203859,
            16203731,
            16203308,
            16203766,
            16203989
        ],
        "A": [
            16203031,
            16203135,
            16203205,
            16203772,
            16203048,
            16203023,
            16203022,
            16203045,
            16203001,
            16203771,
            16203077,
            16203193,
            16203044,
            16203133,
            16203132,
            16203092,
            16203204,
            16203389
        ]
    },
    "name": "B. New Skateboard",
    "statement": "Max wants to buy a new skateboard. He has calculated the amount of money\r\nthat is needed to buy a new skateboard. He left a calculator on the\r\nfloor and went to ask some money from his parents. Meanwhile his little\r\nbrother Yusuf came and started to press the keys randomly. Unfortunately\r\nMax has forgotten the number which he had calculated. The only thing he\r\nknows is that the number is divisible by .You are given a string\r\nconsisting of digits (the number on the display of the calculator after\r\nYusuf randomly pressed the keys). Your task is to find the number of\r\nsubstrings which are divisible by . A substring can start with a zero.A\r\nsubstring of a string is a nonempty sequence of consecutive\r\ncharacters.For example if string is then we have four substrings that\r\nare divisible by : , , and . For the string the answer is three: , , .As\r\ninput/output can reach huge size it is recommended to use fast\r\ninput/output methods: for example, prefer to use instead of in C++,\r\nprefer to use instead of in .\r\n",
    "solutions": [
        "#ifdef __GNUC__\n#pragma GCC target(\"sse4,avx\")\n#endif\n#include <immintrin.h>\n#include <algorithm>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <cstdint>\n#include <numeric>\n\nvoid run(std::istream &in, std::ostream &out) {\n  std::string s;\n  in >> s;\n  int64_t ans = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (((s[i] - '0') % 4) == 0) {\n      ans++;\n    }\n  }\n  for (int i = 0; i + 2 <= s.length(); i++) {\n    int num = (s[i] - '0') * 10 + s[i + 1] - '0';\n    if (num % 4 == 0) {\n      ans += i + 1;\n    }\n  }\n  out << ans << std::endl;\n}\n\nint main() {\n  std::cin.sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  run(std::cin, std::cout);\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. New Skateboard.json",
    "editorial_link": "https://codeforces.com//blog/entry/43203",
    "editorial": "This is one of the problems suggested by Bayram Berdiyev bayram, Allanur\r\nShiriyev Allanur, Bekmyrat Atayev Bekmyrat.A. The key observation is\r\nthat the number is divisible by if and only if its last two digits forms\r\na number divisible by . So to calculate the answer at first we should\r\ncount the substrings of length one. Now let\u00e2\u0080\u0099s consider pairs of\r\nconsecutive digits. If they forms a two digit number that is divisible\r\nby we should increase the answer by the index of the right one. C++\r\nsolution Complexity: .\r\n"
}