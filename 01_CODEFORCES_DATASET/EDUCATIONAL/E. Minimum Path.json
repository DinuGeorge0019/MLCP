{
    "link": "https://codeforces.com//contest/1473/problem/E",
    "problemId": "864973",
    "problem_idx": "E",
    "shortId": "1473E",
    "contest_number": "1473",
    "problem_submissions": {
        "G": [
            104324184,
            104387693,
            104338182,
            104349212,
            104348798,
            104346480,
            104390780,
            104390610,
            104390495,
            104389764,
            104383982,
            104383801,
            104346655,
            104341001,
            104315264,
            104352224,
            104352185,
            104375589,
            104397435,
            104397194,
            104376606,
            104352690,
            104352754,
            104352534,
            104398919,
            104398235,
            104330024
        ],
        "F": [
            104316672,
            104314197,
            104321921,
            104322437,
            104324528,
            104322986,
            104314395,
            104317108,
            104322022,
            104311306,
            136810058,
            104327481,
            104330457,
            104324027,
            104334280,
            104334405,
            104340043,
            104329360,
            104332558
        ],
        "E": [
            104307026,
            104303673,
            104306129,
            104311187,
            104320601,
            104327879,
            104304639,
            104302012,
            104310767,
            104318435,
            104314089,
            104313021,
            104316783,
            104313523,
            104318767,
            104312111,
            104314876,
            104327257,
            104303395
        ],
        "D": [
            104300616,
            104298125,
            104298419,
            104305187,
            104310558,
            104332950,
            104295784,
            104297395,
            104304904,
            104298645,
            104306694,
            104301645,
            104305953,
            104307851,
            104307522,
            104307146,
            104309694,
            104303434,
            104321617
        ],
        "C": [
            104297127,
            104291328,
            104310275,
            104297010,
            104300137,
            104335806,
            104289962,
            104291239,
            104299846,
            104320575,
            104299422,
            104297141,
            104307584,
            104296827,
            104299646,
            104301166,
            104302797,
            104297015,
            104316440
        ],
        "B": [
            104289189,
            104283439,
            104284166,
            104288050,
            104287625,
            104337404,
            104283726,
            104283807,
            104286751,
            104285766,
            104285844,
            104292438,
            104285398,
            104287974,
            104288404,
            104287047,
            104293072,
            104288614,
            104287425
        ],
        "A": [
            104282920,
            104280323,
            104280823,
            104280333,
            104281130,
            104338367,
            104280298,
            104280342,
            104281217,
            104281168,
            104280838,
            104286833,
            104280557,
            104280439,
            104281300,
            104280646,
            104289104,
            104281489,
            104280913
        ]
    },
    "name": "E. Minimum Path",
    "statement": "You are given a weighted undirected connected graph consisting of n\r\nvertices and m edges. It is guaranteed that there are no self-loops or\r\nmultiple edges in the given graph.Let’s define the weight of the path\r\nconsisting of k edges with indices e_1, e_2,\r\ndots, e_k as\r\nsum\r\nlimits_{i=1}^{k}{w_{e_i}} -\r\nmax\r\nlimits_{i=1}^{k}{w_{e_i}} +\r\nmin\r\nlimits_{i=1}^{k}{w_{e_i}}, where w_i weight of the i-th edge in the\r\ngraph.Your task is to find the minimum weight of the path from the 1-st\r\nvertex to the i-th vertex for each i (2\r\nle i\r\nle n).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing i64 = long long;\nusing u64 = unsigned long long;\nusing u32 = unsigned;\nconstexpr i64 inf = 1e18;\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    int n, m;\n    std::cin >> n >> m;\n    std::vector<std::vector<std::pair<int, int>>> e(n);\n    for (int i = 0; i < m; i++) {\n        int u, v, w;\n        std::cin >> u >> v >> w;\n        u--;\n        v--;\n        e[u].emplace_back(v, w);\n        e[v].emplace_back(u, w);\n    }\n    std::vector<i64> dis(4 * n, inf);\n    std::priority_queue<std::pair<i64, int>> h;\n    dis[0] = 0;\n    h.emplace(0, 0);\n    while (!h.empty()) {\n        i64 d = -h.top().first;\n        int x = h.top().second;\n        h.pop();\n        if (d > dis[x]) {\n            continue;\n        }\n        int u = x / 4;\n        int p = x / 2 % 2;\n        int q = x % 2;\n        for (auto [v, w] : e[u]) {\n            int y = v * 4 + p * 2 + q;\n            if (dis[y] > dis[x] + w) {\n                dis[y] = dis[x] + w;\n                h.emplace(-dis[y], y);\n            }\n            if (p == 0 && dis[y + 2] > dis[x]) {\n                dis[y + 2] = dis[x];\n                h.emplace(-dis[y + 2], y + 2);\n            }\n            if (q == 0 && dis[y + 1] > dis[x] + 2 * w) {\n                dis[y + 1] = dis[x] + 2 * w;\n                h.emplace(-dis[y + 1], y + 1);\n            }\n        }\n    }\n    for (int i = 1; i < n; i++) {\n        std::cout << std::min(dis[i * 4], dis[i * 4 + 3]) << \" \\n\"[i == n - 1];\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "shortest paths"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Minimum Path.json",
    "editorial_link": "https://codeforces.com//blog/entry/86827",
    "editorial": "Letâs consider a problem where you can subtract the weight of any edge\r\n(not only the maximum one) that belong to the current path and similarly\r\nadd the weight of any edge (not only the minimum one) that belong to the\r\ncurrent path.To solve that problem we can build a new graph where the\r\nnode can be represented as the following triple (node from the initial\r\ngraph, flag that some edge has been subtracted, flag that some edge has\r\nbeen added). Now we can run Dijkstraâs algorithm to find the length of\r\nthe shortest paths in such a graph.We can notice that on the shortest\r\npath, the maximum weight edge was subtracted and the minimum weight edge\r\nwas added. Letâs assume that this is not the case, and an edge of\r\nnon-maximum weight was subtracted from the path, then we can reduce the\r\nlength of the path by choosing an edge of maximum weight. But this is\r\nnot possible, because we considered the shortest path. Similarly, it is\r\nproved that the added edge was of minimal weight.Using this fact, it is\r\nnot difficult to notice that by solving the modified problem, we have\r\nsolved the original one.\r\n",
    "hint": []
}