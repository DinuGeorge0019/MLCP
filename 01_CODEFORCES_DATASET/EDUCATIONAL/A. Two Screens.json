{
    "link": "https://codeforces.com//contest/2025/problem/A",
    "problemId": "2948771",
    "problem_idx": "A",
    "shortId": "2025A",
    "contest_number": "2025",
    "problem_submissions": {
        "G": [
            285888128,
            285968165,
            285968156,
            285968149,
            285968144,
            285897832,
            285920810,
            285910851,
            285909011,
            285930826,
            285929850,
            285925790,
            285926690,
            285922742,
            285921341,
            285927635,
            285927533,
            285927378,
            285927290,
            285927201,
            285926718,
            285927241,
            285924989,
            299831833,
            286121442
        ],
        "F": [
            285868426,
            285875834,
            285881666,
            285895954,
            285888111,
            285886401,
            285885303,
            285891958,
            285893731,
            285892263,
            285879653,
            285886660,
            285891778,
            285886231,
            285896708,
            285895437,
            285887128,
            285901645,
            285898009,
            285911413,
            285909168
        ],
        "E": [
            285859957,
            285867757,
            285870223,
            285876387,
            285873807,
            285876494,
            285872556,
            285873708,
            285881956,
            285870423,
            285874469,
            285878077,
            285869033,
            285872685,
            285876656,
            285892958,
            285888168,
            285880850,
            285877703,
            285879472
        ],
        "C": [
            285855265,
            285848963,
            285851041,
            285855836,
            285849335,
            285851254,
            285854960,
            285854181,
            285864164,
            285852009,
            285850624,
            285853432,
            285850248,
            285850107,
            285852412,
            285937663,
            285937269,
            285852480,
            285853757,
            285856229,
            285852397,
            285853481
        ],
        "D": [
            285854273,
            285858071,
            285858183,
            285867921,
            285860641,
            285863810,
            285864716,
            285864881,
            285873876,
            285863514,
            285859817,
            285865001,
            285869981,
            285860140,
            285866304,
            285941352,
            285868260,
            285864450,
            285868121,
            285865847,
            285869499
        ],
        "B": [
            285844312,
            285844368,
            285843910,
            285848590,
            285844872,
            285845275,
            285846752,
            285845703,
            285858394,
            285844772,
            285844563,
            285847140,
            285845401,
            285845320,
            285848121,
            285848201,
            285847162,
            285850578,
            285846812,
            285847900
        ],
        "A": [
            285841954,
            285841960,
            285842031,
            285842286,
            285842224,
            285842066,
            285842261,
            285842191,
            285843710,
            285842044,
            285842146,
            285842134,
            285841991,
            285842021,
            285846906,
            285842091,
            285842126,
            285842764,
            285842102,
            285842266
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135173",
    "editorial": "Whenever we perform the second action (copy from one screen to the other\r\nscreen), we overwrite what was written on the other screen. It means\r\nthat we can consider the string on the other screen to be empty before\r\nthe copying, and that we only need to copy at most once.So, the optimal\r\nsequence of operations should look as follows: add some characters to\r\none of the screens, copy them to the other screen, and then finish both\r\nstrings.We need to copy as many characters as possible. Since after\r\ncopying, we can only append new characters to the end of the strings on\r\nthe screens, the string we copy must be a prefix of both of the given\r\nstrings. So, we need to find the length of the longest common prefix of\r\nthe given strings. This can be done in linear time if we scan these\r\nstrings until we find a pair of different characters in the same\r\npositions; however, the constraints were low enough so that you could do\r\nit slower (like, for example, iterate on the length of the prefix and\r\ncheck that both prefixes of this length are equal).Okay, now let be the\r\nlength of the longest common prefix. Using operations, we write\r\ncharacters in total; so the number of operations we need will be .\r\nHowever, if the longest common prefix is empty, thereâs no need to copy\r\nanything, and we can write both strings in seconds.\r\n",
    "name": "A. Two Screens",
    "statement": "There are two screens which can display sequences of uppercase Latin\r\nletters. Initially, both screens display nothing.In one second, you can\r\ndo one of the following two actions: choose a screen and an uppercase\r\nLatin letter, and append that letter to of the sequence displayed on\r\nthat screen; choose a screen and copy the sequence from it to the other\r\nscreen, . You have to calculate the minimum number of seconds you have\r\nto spend so that the first screen displays the sequence s, and the\r\nsecond screen displays the sequence t.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using i64 = long long;using u64 = unsigned long long;using u32 = unsigned; void solve() {    std::string s, t;    std::cin >> s >> t;        int i = 0;    while (i < s.size() && i < t.size() && s[i] == t[i]) {        i++;    }        int ans = s.size() + t.size() - std::max(0, i - 1);    std::cout << ans << \"\\n\";} int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "strings",
        "two pointers"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Two Screens.json",
    "hint": []
}