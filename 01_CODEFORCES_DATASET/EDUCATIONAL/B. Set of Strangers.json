{
    "link": "https://codeforces.com//contest/2069/problem/B",
    "problemId": "3213447",
    "problem_idx": "B",
    "shortId": "2069B",
    "contest_number": "2069",
    "problem_submissions": {
        "E": [
            306720227,
            306703455,
            306762040,
            306709414,
            306720479,
            306710204,
            306717271,
            306714232,
            306713491,
            306717023,
            306719634,
            306716305,
            306717171,
            306715546,
            306713534,
            307552024,
            306752930,
            306724477,
            306721728,
            306718615,
            306718992,
            306726971,
            306725677
        ],
        "F": [
            306709347,
            306728258,
            306727520,
            306728135,
            306741225,
            306726966,
            306744015,
            306732116,
            306739032,
            306855146,
            306737313,
            306730256,
            306733511,
            306743505,
            306725225,
            306745953,
            306762587,
            306739080,
            306745663,
            306744259,
            306729975,
            306736187,
            306742000
        ],
        "D": [
            306694099,
            306695545,
            306695100,
            306694667,
            306690359,
            306701386,
            306701212,
            306696826,
            306697964,
            306697288,
            306699133,
            306704039,
            306702795,
            306701942,
            306702458,
            306700726,
            306707761,
            306704425,
            306708530,
            306707972
        ],
        "C": [
            306685465,
            306686684,
            306687348,
            306684235,
            306683606,
            306688263,
            306688039,
            306687329,
            306856369,
            306685918,
            306688691,
            306688112,
            306685819,
            306691359,
            306688654,
            306686865,
            306692320,
            306691352,
            306695398,
            306686441,
            306689890
        ],
        "B": [
            306681829,
            306682850,
            306682972,
            306680572,
            306680880,
            306682298,
            306683281,
            306682689,
            306856172,
            306681142,
            306684519,
            306683738,
            306681106,
            306703816,
            306682841,
            306682588,
            306685491,
            306683927,
            306691965,
            306683224,
            306685776
        ],
        "A": [
            306678234,
            306678240,
            306678194,
            306678094,
            306678179,
            306678115,
            306678333,
            306678481,
            306855634,
            306678273,
            306679166,
            306678389,
            306678130,
            306680446,
            306678338,
            306678258,
            306678871,
            306678235,
            306687347,
            306679141,
            306678310
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/139774",
    "editorial": "Let’s fix some color and look at all cells of that color. We can decide\r\neither to leave this color as the resulting one and then we can ignore\r\nall these cells. Or we should get rid of this color, and it would cost\r\nat least one operation.If all cells are pairwise strangers, then one\r\noperation is enough to recolor all of them in the desired color.\r\nOtherwise, we need at least two operations. It turns out that two\r\noperations are enough: each connected component of the same color can be\r\npainted in two steps if we color the table like a chessboard and choose\r\n\"black\" cells at the first step and \"white\" cells at the second step.\r\nSince components don’t touch each other, we can choose subsets from\r\ndifferent components independently. In total, we can get rid of any\r\ncolor in two steps.As a result, for each color, let’s calculate the\r\nnumber of steps we need to get rid of it as . It’s equal to if it’s\r\npresent in the table, plus if there are two neighbors of that color. The\r\nanswer then equals to minus the color we decided to leave untouched. Or,\r\noptimally,\r\n",
    "name": "B. Set of Strangers",
    "statement": "You are given a table of n rows and m columns. Initially, the cell at\r\nthe i-th row and the j-th column has color a_{i, j}.Let’s say that two\r\ncells are if they share a side. Strangers are allowed to touch with\r\ncorners.Let’s say that the set of cells is a if all pairs of cells in\r\nthe set are strangers. Sets with no more than one cell are sets of\r\nstrangers by definition.In one step, you can choose any set of strangers\r\nand paint all of them in some other color. You can choose the resulting\r\ncolor.What is the minimum number of steps you need to make the whole\r\ntable the same color?\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "matrices"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Set of Strangers.json"
}