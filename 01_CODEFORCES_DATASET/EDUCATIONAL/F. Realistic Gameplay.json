{
    "link": "https://codeforces.com//contest/1430/problem/F",
    "problemId": "755158",
    "problem_idx": "F",
    "shortId": "1430F",
    "contest_number": "1430",
    "problem_submissions": {
        "G": [
            95237045,
            95235075,
            95240737,
            97566243,
            95239114,
            95228241,
            95221926,
            95230929,
            95239632,
            95250364,
            95455283,
            95252471,
            95256236,
            95242546,
            95303013,
            98871928
        ],
        "F": [
            95220487,
            95228332,
            95223150,
            97566130,
            95216783,
            95250832,
            95242433,
            95256538,
            95247019,
            95248722,
            95240985,
            95228704,
            95232008,
            95232802,
            95230075,
            95232563,
            95238448,
            95465311,
            95234311,
            95232005
        ],
        "E": [
            95211511,
            95210553,
            95208920,
            97565966,
            95208366,
            95208320,
            95213012,
            95219246,
            95219352,
            95220042,
            95209230,
            95216025,
            95206937,
            95209011,
            95216031,
            95214609,
            95202690,
            95215844,
            95218385
        ],
        "D": [
            95208553,
            95206064,
            95205170,
            97565921,
            95205237,
            95202655,
            95224583,
            95213640,
            95216224,
            95211198,
            95204449,
            95212306,
            95215958,
            95200930,
            95207117,
            95208215,
            95216892,
            95212972,
            95215071
        ],
        "C": [
            95197013,
            95198163,
            95199698,
            97565869,
            95200959,
            95198168,
            95198409,
            95198669,
            95209890,
            95204911,
            95197315,
            95202373,
            95200953,
            95202547,
            95204796,
            95194169,
            95198706,
            95205881,
            95210665
        ],
        "B": [
            95195119,
            95195489,
            95196116,
            97565818,
            95196356,
            95194999,
            95195326,
            95195742,
            95196929,
            95195601,
            95195544,
            95196763,
            95197327,
            95194053,
            95194687,
            95199867,
            95195154,
            95196136,
            95196683
        ],
        "A": [
            95193928,
            95194100,
            95194842,
            97565779,
            95194326,
            95193977,
            95194039,
            95194134,
            95194416,
            95194244,
            95194071,
            95194430,
            95194685,
            95193941,
            95193947,
            95197083,
            95194045,
            95194254,
            95194714
        ]
    },
    "name": "F. Realistic Gameplay",
    "statement": "Recently you\u2019ve discovered a new shooter. They say it has realistic game\r\nmechanics.Your character has a gun with magazine size equal to k and\r\nshould exterminate n waves of monsters. The i-th wave consists of a_i\r\nmonsters and happens from the l_i-th moment of time up to the r_i-th\r\nmoments of time. All a_i monsters spawn at moment l_i and you have to\r\nexterminate all of them before the moment r_i ends (you can kill\r\nmonsters right at moment r_i). For every two consecutive waves, the\r\nsecond wave starts not earlier than the first wave ends (though the\r\nsecond wave can start at the same moment when the first wave ends)\r\nformally, the condition r_i\r\nle l_{i + 1} holds. Take a look at the notes for the examples to\r\nunderstand the process better.You are confident in yours and your\r\ncharacter\u2019s skills so you can assume that aiming and shooting are\r\ninstant and you need exactly one bullet to kill one monster. But\r\nreloading takes exactly 1 unit of time.One of the realistic mechanics is\r\na mechanic of reloading: when you reload you throw away the old magazine\r\nwith all remaining bullets in it. That\u2019s why constant reloads may cost\r\nyou excessive amounts of spent bullets.You\u2019ve taken a liking to this\r\nmechanic so now you are wondering: what is the minimum possible number\r\nof bullets you need to spend (both used and thrown) to exterminate all\r\nwaves.Note that you don\u2019t throw the remaining bullets away after\r\neradicating all monsters, and you start with a full magazine.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define ull unsigned ll\n#define uint unsigned\n#define pii pair<int,int>\n#define pll pair<ll,ll>\n#define IT iterator\n#define PB push_back\n#define fi first\n#define se second\n#define For(i,j,k) for (int i=(int)(j);i<=(int)(k);i++)\n#define Rep(i,j,k) for (int i=(int)(j);i>=(int)(k);i--)\n#define CLR(a,v) memset(a,v,sizeof(a));\n#define CPY(a,b) memcpy(a,b,sizeof(a));\n#define debug puts(\"wzpakking\")\n#define y1 ysghysgsygsh\nusing namespace std;\nconst int N=2005;\nint n,k;\nint l[N],r[N],a[N];\nll f[N];\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tFor(i,1,n) scanf(\"%d%d%d\",&l[i],&r[i],&a[i]);\n\tmemset(f,33,sizeof(f));\n\tf[0]=0;\n\tll ans=1ll<<60;\n\tFor(i,1,n){\n\t\tint nT=l[i];\n\t\tll cost=k,Bul=k;\n\t\tFor(j,i,n){\n\t\t\tif (!Bul&&l[j]!=r[j-1])\tBul=k,cost+=k;\n\t\t\t//cout<<i<<' '<<j<<' '<<Bul<<' '<<cost<<endl; \n\t\t\tif (Bul+1ll*(r[j]-l[j])*k<a[j]) break;\n\t\t\tint v=min(Bul,1ll*a[j]),rem=a[j];\n\t\t\tBul-=v; rem-=v;\n\t\t\tint round=(rem+k-1)/k;\n\t\t\tcost+=1ll*round*k;\n\t\t\tBul+=1ll*round*k;\n\t\t\tBul-=rem;\n\t\t\t//cout<<i<<' '<<j<<' '<<Bul<<' '<<cost<<' '<<round<<endl;\n\t\t\tif (r[j]!=l[j+1]||round!=r[j]-l[j]){\n\t\t\t\tif (j==n) ans=min(ans,f[i-1]+cost-Bul);\n\t\t\t\tf[j]=min(f[j],f[i-1]+cost);\n\t\t\t}\n\t\t\tif (round!=r[j]-l[j]&&!Bul)\n\t\t\t\tBul+=k,cost+=k;\n\t\t}\n\t}\n\tif (ans>1ll<<58)\n\t\tans=-1;\n\tcout<<ans<<endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Realistic Gameplay.json",
    "editorial_link": "https://codeforces.com//blog/entry/83614",
    "editorial": "Note some observations: if we meet a new wave and start shooting it\u00e2\u0080\u0099s\r\noptimal to shoot monsters in the wave using full magazines while we can\r\nand there are no reasons to take breaks between shooting monsters from\r\none wave. That\u00e2\u0080\u0099s why we can track only moments when waves start and the\r\nnumber of remaining bullets in magazine we have at these\r\nmoments.Moreover, since the next wave starts not earlier than the\r\nprevious ends, we can think that when we start dealing with one wave\r\nwe\u00e2\u0080\u0099ve already dealt with the previous one. Also, instead of keeping\r\ntrack of the remaining bullets, let\u00e2\u0080\u0099s just look only at such indices of\r\nwaves when we reloaded and threw remaining bullets before reaching\r\nthem.So, we can write the next dp: is the minimum number of bullets we\r\nspend dealing with the first waves and now we standing at the moment\r\nwith full magazine. Obviously, .Now, with fixed we can iterate over the\r\nindex of a wave before which we\u00e2\u0080\u0099ll reload throwing away remaining\r\nbullets. And for waves we need to check that we are able to exterminate\r\nall these waves without throwing away any bullets. We can check it with\r\nseveral formulas.If it\u00e2\u0080\u0099s possible for segment then the possibility for\r\nthe segment is just checking that we can exterminate the -th wave having\r\nbullets in the start in no more than reloads plus checking that we have\r\nat least one unit before for a reload.As a result, the time complexity\r\nof the solution is .\r\n"
}