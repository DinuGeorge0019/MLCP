{
    "link": "https://codeforces.com//contest/2104/problem/C",
    "problemId": "3357539",
    "problem_idx": "C",
    "shortId": "2104C",
    "contest_number": "2104",
    "problem_submissions": {
        "G": [
            317634002,
            317631743,
            320673214,
            317636349,
            317639303,
            317631308,
            317640372,
            317641490,
            317634993,
            317623920,
            317623580,
            317647581,
            317646744,
            317640479,
            317649324,
            317648614,
            317603575,
            317625986,
            317658338,
            317654956,
            317656090
        ],
        "F": [
            317618453,
            317615339,
            317611576,
            317619502,
            317642933,
            317616740,
            317626825,
            317624444,
            317635700,
            317630227,
            317652195,
            317651366,
            317632460,
            317639846,
            317622626,
            317627252,
            317618955,
            317629645,
            317633465
        ],
        "E": [
            317600678,
            317604770,
            317604225,
            317601494,
            317605089,
            317605713,
            317610349,
            317606588,
            317606228,
            317611391,
            317609737,
            317616567,
            317624447,
            317604365,
            317605239,
            317606517,
            317605527,
            317603967
        ],
        "D": [
            317596832,
            317600994,
            317595577,
            317597224,
            317599585,
            317599131,
            317603322,
            317601392,
            317602519,
            317606339,
            317605002,
            317608223,
            317625926,
            317598715,
            317596708,
            317599445,
            317601363,
            317598919
        ],
        "C": [
            317592206,
            317594503,
            317591740,
            317592536,
            317595007,
            317592453,
            317599440,
            317596483,
            317666768,
            317597634,
            317597533,
            317596118,
            317603421,
            317628135,
            317593822,
            317592818,
            317594552,
            317594062,
            317592586
        ],
        "B": [
            317586512,
            317588149,
            317586474,
            317586748,
            317587897,
            317586575,
            317590393,
            317589124,
            317590519,
            317590566,
            317590505,
            317595035,
            317629001,
            317588704,
            317587930,
            317589549,
            317586793,
            317587862
        ],
        "A": [
            317583850,
            317584199,
            317583696,
            317583966,
            317584221,
            317583906,
            317584707,
            317583779,
            317583664,
            317586307,
            317586411,
            317589674,
            317629578,
            317583905,
            317584152,
            317583791,
            317583699,
            317583693
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142472",
    "editorial": "There are many ways to solve this problem. I will describe one of the\r\nways that doesn’t use too much casework.The key observation we need is\r\nthat, if a player has a strategy that allows him/her to take the cards\r\non turn , then he/she has a strategy to take the cards on turn . There\r\nare two ways to prove it, choose any of them: the first way is to\r\nconsider the options each player has. When a player loses a card, they\r\nlose one of their options; when a player gains a card, they gain a new\r\noption for a turn. So, if a player can’t take cards on some turn, then\r\non the next turn, their options will be even more limited, and the\r\nopponent will still be able to use all the cards they were able to use\r\non the previous turn; the second way is to consider it for Alice and Bob\r\nseparately. If Alice can take cards on turn no matter what Bob does,\r\nthen she has a card which beats every card Bob has (and she will still\r\nhave this card on the next turn). Otherwise, if Bob can take cards on\r\nturn no matter what Alice does, then for every card Alice has, Bob has a\r\ncard that beats it (and that won’t change on the next turn). So, if a\r\nplayer can take cards on the first turn, they win. All that’s left to\r\ncheck is who wins on the first turn. If Alice has a card that beats\r\nevery card Bob has, she wins. Otherwise, Bob wins.\r\n",
    "name": "C. Card Game",
    "statement": "Alice and Bob are playing a game. They have n cards numbered from 1 to\r\nn. At the beginning of the game, some of these cards are given to Alice,\r\nand the rest are given to Bob.Card with number i beats card with number\r\nj if and only if i > j, : card 1 beats card n.The game continues as long\r\nas each player has at least one card. During each turn, the following\r\noccurs: Alice chooses one of her cards and places it face up on the\r\ntable; Bob, seeing Alice’s card, chooses one of his cards and places it\r\nface up on the table; if Alice’s card beats Bob’s card, both cards are\r\ntaken by Alice. Otherwise, both cards are taken by Bob. A player can use\r\na card that they have taken during one of the previous turns.The player\r\nwho has no cards at the beginning of a turn loses. Determine who will\r\nwin if both players play optimally.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "games",
        "greedy",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Card Game22682.json"
}