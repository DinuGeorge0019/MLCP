{"link": "https://codeforces.com//contest/1295/problem/C", "problemId": "526702", "problem_idx": "C", "shortId": "1295C", "contest_number": "1295", "problem_submissions": {"F": [69765027, 69766931, 69774700, 69768602, 69856768, 69855408, 69855407, 69855207, 69795000, 69794801, 69794791, 69780998, 70134503, 69764574, 69774965, 69768972, 69767605, 69764218, 69774776, 69773934, 69777915, 69775661, 69780279, 69776002, 69772429, 69771368, 69777730, 69779043], "E": [69754267, 69756231, 69750419, 69758264, 75026655, 75026651, 75026616, 75026614, 75026605, 75026602, 69861069, 69860763, 69796506, 69751804, 70134450, 69755652, 69754935, 69757172, 69759455, 69762033, 69761392, 69761807, 69764886, 69763394, 69762971, 69754925, 69778394, 69762618, 69760940], "D": [69749184, 69749435, 69737870, 69746208, 69740901, 70134431, 69750756, 69745336, 69774454, 69751512, 69748972, 69748437, 69750220, 69755333, 69757518, 69754451, 69753242, 69748833, 69755501, 69757780, 69749229], "C": [69746419, 69745530, 69752829, 69744855, 69859631, 69859619, 69742998, 70134418, 69749557, 69743909, 69747578, 69746709, 69752867, 69746601, 69749344, 69748626, 69749455, 69751397, 69746966, 69748635, 69750189, 69746738], "B": [69741160, 69740703, 69739974, 69739609, 69792992, 69737452, 70134357, 69742495, 69740938, 69745005, 69743434, 69743024, 69740858, 69742897, 69742450, 69742512, 69742639, 69740406, 69745732, 69757660, 69746475, 69745760, 69745145, 69742911, 69741321, 69742736, 69741570], "A": [69736925, 69736449, 69735963, 69735937, 69793731, 69735857, 70134345, 69737467, 69736037, 69735902, 69737776, 69735865, 69736131, 69736841, 69736251, 69735843, 69740300, 69744873, 69735945, 69738318, 69752292]}, "name": "C. Obtain The String", "statement": "You are given two strings s and t consisting of lowercase Latin letters.\r\nAlso you have a string z which is initially empty. You want string z to\r\nbe equal to string t. You can perform the following operation to achieve\r\nthis: append any subsequence of s at the end of string z. A subsequence\r\nis a sequence that can be derived from the given sequence by deleting\r\nzero or more elements without changing the order of the remaining\r\nelements. For example, if z = ac, s = abcde, you may turn z into\r\nfollowing strings in one operation: z = acace (if we choose subsequence\r\nace); z = acbcd (if we choose subsequence bcd); z = acbce (if we choose\r\nsubsequence bce). Note that after this operation string s doesn\u2019t\r\nchange.Calculate the minimum number of such operations to turn string z\r\ninto string t.\r\n", "solutions": ["// Words are flowing out like endless rain into a paper cup\n// They slither while they pass they slip away across the universe\n// Pools of sorrow, waves of joy are drifting through my open mind\n// Possessing and caressing me\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing LL = long long;\n\nnamespace _buff {\n\nconst size_t BUFF = 1 << 19;\nchar ibuf[BUFF], *ib = ibuf, *ie = ibuf;\nchar getc() {\n    if (ib == ie) {\n        ib = ibuf;\n        ie = ibuf + fread(ibuf, 1, BUFF, stdin);\n    }\n    return ib == ie ? -1 : *ib++;\n}\n\n}\n\nLL read() {\n    using namespace _buff;\n    LL ret = 0;\n    bool pos = true;\n    char c = getc();\n    for (; (c < '0' || c > '9') && c != '-'; c = getc()) {\n        assert(~c);\n    }\n    if (c == '-') {\n        pos = false;\n        c = getc();\n    }\n    for (; c >= '0' && c <= '9'; c = getc()) {\n        ret = (ret << 3) + (ret << 1) + (c ^ 48);\n    }\n    return pos ? ret : -ret;\n}\n\nconst size_t N = 1e5 + 5;\nconst size_t AL = 26;\n\nint ls, lt;\nchar s[N], t[N];\nint nxt[N][AL];\n\nvoid get_nxt() {\n    static int head[AL];\n    fill(begin(head), end(head), -1);\n    for (int i = ls; i > 0; --i) {\n        memcpy(nxt[i], head, sizeof head);\n        head[(int) s[i] - 'a'] = i;\n    }\n    memcpy(nxt[0], head, sizeof head);\n}\n\nvoid solve() {\n    scanf(\"%s%s\", s + 1, t);\n    ls = strlen(s + 1);\n    lt = strlen(t);\n    get_nxt();\n    int ans = 0;\n    for (int i = 0; i < lt; ) {\n        int cur = 0;\n        while (i < lt && ~nxt[cur][(int) t[i] - 'a']) {\n            cur = nxt[cur][(int) t[i++] - 'a'];\n        }\n        ++ans;\n        if (!cur) {\n            puts(\"-1\");\n            return;\n        }\n    }\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while (t--) solve();\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["dp", "greedy", "strings"], "dificulty": "1600", "interactive": false}