{
    "link": "https://codeforces.com//contest/803/problem/D",
    "problemId": "104509",
    "problem_idx": "D",
    "shortId": "803D",
    "contest_number": "803",
    "problem_submissions": {
        "G": [
            26726035,
            26727236,
            26728097,
            26728472,
            26729664,
            26728547,
            26729890,
            26729652,
            26730512,
            26730113,
            26730878,
            26731530,
            26730264,
            26729609,
            26731875,
            26731225,
            26730998,
            26731497,
            85623556,
            85623400,
            85623203,
            85610564,
            26730604,
            26731476,
            26739085
        ],
        "F": [
            26724381,
            26725200,
            26724999,
            26724225,
            26725048,
            26726085,
            26726135,
            26725801,
            26725931,
            26726156,
            26724237,
            26725565,
            26725769,
            26725975,
            26725077,
            26727341,
            219766415,
            219762164,
            86051599,
            85608329,
            85608294,
            26727055,
            26729462,
            26724972,
            26728098
        ],
        "E": [
            26723728,
            26723918,
            26725958,
            26726239,
            26725998,
            26724505,
            26727035,
            26727052,
            26723853,
            26725311,
            26727501,
            26726914,
            26727667,
            26727932,
            26726295,
            26728308,
            219762036,
            98250927,
            85613733,
            85609978,
            26729021,
            26728273,
            26726912,
            26725646
        ],
        "D": [
            26722977,
            26723233,
            26723695,
            26725081,
            26724545,
            26723805,
            26724818,
            26724584,
            26727766,
            26724054,
            26726588,
            26724927,
            26726822,
            26728941,
            26727298,
            26726013,
            219765850,
            219765028,
            219764202,
            219763496,
            219763057,
            219762723,
            219441244,
            219440803,
            85611079,
            85608311,
            26727687,
            26726965,
            26728216,
            26724323
        ],
        "C": [
            26722334,
            26722568,
            26722532,
            26722824,
            26723265,
            26722578,
            26723153,
            26723401,
            26722404,
            26722763,
            26723297,
            26723217,
            26723235,
            26723982,
            26723346,
            26723675,
            242139836,
            219765419,
            219763158,
            219763096,
            219761007,
            219442588,
            146711212,
            145821319,
            145799672,
            145735366,
            145734989,
            145733450,
            98410618,
            86049796,
            85608695,
            85608222,
            26725413,
            26725578,
            26723041,
            26729567,
            26723237
        ],
        "B": [
            26721944,
            26722045,
            26721880,
            26722109,
            26722081,
            26722066,
            26721973,
            26722263,
            26721992,
            26722120,
            26722619,
            26722232,
            26722292,
            26722323,
            26722429,
            26722715,
            219763640,
            219440626,
            219440279,
            219439802,
            219439698,
            219439657,
            219439387,
            145736466,
            145734257,
            145732182,
            145731921,
            145731518,
            145731457,
            98408561,
            86048023,
            85606269,
            85605951,
            26723519,
            26722908,
            26722174,
            26722306
        ],
        "A": [
            26721819,
            26721835,
            26721801,
            26721879,
            26721871,
            26721890,
            26722559,
            26722009,
            26721857,
            26721866,
            26722146,
            26721862,
            26721911,
            26721970,
            26722141,
            26722309,
            219764352,
            219763598,
            219760906,
            219439616,
            145819775,
            145737562,
            145734009,
            145733505,
            145732992,
            145731371,
            98408337,
            85608245,
            85608205,
            26725229,
            26724294,
            26721926,
            26721904
        ]
    },
    "name": "D. Magazine Ad",
    "statement": "The main city magazine offers its readers an opportunity to publish\r\ntheir ads. The format of the ad should be like this:There are\r\nspace-separated non-empty words of lowercase and uppercase Latin\r\nletters.There are hyphen characters in some words, their positions set\r\nword wrapping points. Word can include more than one hyphen. It is\r\nguaranteed that there are no adjacent spaces and no adjacent hyphens. No\r\nhyphen is adjacent to space. There are no spaces and no hyphens before\r\nthe first word and after the last word. When the word is wrapped, the\r\npart of the word before hyphen and the hyphen itself stay on current\r\nline and the next part of the word is put on the next line. You can also\r\nput line break between two words, in that case the space stays on\r\ncurrent line. Check notes for better understanding.The ad can occupy no\r\nmore that lines and should have minimal width. The width of the ad is\r\nthe maximal length of string (letters, spaces and hyphens are counted)\r\nin it.You should write a program that will find minimal width of the ad.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <ctime>\n#include <string>\n#include <cstring>\n#include <complex>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define mp make_pair\n\nconst int INF = (int)1e9;\nint k;\nstring s;\nint n;\n\nint solve(int w)\n{\n    int ans = 0;\n    int l = 0;\n    while(l < n)\n    {\n        ans++;\n        int r = l + w;\n        if (r >= n) break;\n        while(r > l && s[r - 1] != ' ' && s[r - 1] != '-') r--;\n        if (r == l) return INF;\n        l = r;\n    }\n    return ans;\n}\n\nint main()\n{\n//    freopen(\"input.txt\", \"r\", stdin);\n//    freopen(\"output.txt\", \"w\", stdout);\n\n    cin >> k;\n    getline(cin, s);\n    getline(cin, s);\n\n    n = s.length();\n    int l = 0, r = n;\n    while(r - l > 1)\n    {\n        int m = (l + r) / 2;\n        if (solve(m) <= k)\n            r = m;\n        else\n            l = m;\n    }\n    cout << r << endl;\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Magazine Ad.json",
    "editorial_link": "https://codeforces.com//blog/entry/51768",
    "editorial": "Firstly notice that there is no difference between space and hyphen, you\r\ncan replace them with the same character, if you want.Letâs run binary\r\nsearch on answer. Fix width and greedily construct ad wrap word only if\r\nyou donât option to continue on the same line. Then check if number of\r\nlines doesnât exceed .Overall complexity: .\r\n",
    "hint": []
}