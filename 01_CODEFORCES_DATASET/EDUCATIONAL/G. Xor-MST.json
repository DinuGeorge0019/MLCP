{
    "link": "https://codeforces.com//contest/888/problem/G",
    "problemId": "133220",
    "problem_idx": "G",
    "shortId": "888G",
    "contest_number": "888",
    "problem_submissions": {
        "G": [
            32172042,
            32168632,
            32168909,
            32170476,
            32167506,
            32171976,
            32173035,
            241155169,
            241155102,
            235169005,
            32169597,
            32173708,
            32168771,
            32171814,
            32171370,
            32172912,
            32165432,
            32167149,
            32169268,
            32171477,
            32172225,
            32173216
        ],
        "F": [
            32171987,
            32170278,
            32172159,
            32171197,
            32170478,
            32168014,
            32169190,
            32170622,
            32174858,
            32168606,
            32173283,
            32170912,
            32174868,
            32169893,
            32169158
        ],
        "E": [
            32163719,
            32165466,
            32165072,
            32165480,
            32166182,
            32169561,
            32165622,
            32166940,
            32164948,
            32166592,
            32167933,
            32165907,
            32166704,
            32171701,
            32166673,
            32165423,
            32165438,
            32166167,
            32165797
        ],
        "D": [
            32162976,
            32163974,
            32163652,
            32163977,
            32164153,
            32164359,
            32163516,
            32164004,
            32163586,
            32165640,
            32166333,
            32164675,
            32169307,
            32172406,
            32165201,
            94891011,
            32164182,
            32164378,
            32165173,
            32164264
        ],
        "C": [
            32161993,
            32162950,
            32162732,
            32162517,
            32162876,
            32163006,
            32164421,
            32165163,
            32162702,
            32164873,
            32163434,
            32163145,
            32168574,
            32172811,
            32163766,
            32162891,
            32163365,
            32163387,
            32163154
        ],
        "B": [
            32161291,
            32161464,
            32161908,
            32161485,
            32162020,
            32161911,
            32162011,
            32161731,
            32161722,
            32164340,
            32162169,
            32161577,
            32167466,
            32173057,
            32162454,
            32161287,
            32162576,
            32162145,
            32162125
        ],
        "A": [
            32160859,
            32160877,
            32161303,
            32160939,
            32161211,
            32161025,
            32161283,
            32160935,
            32160863,
            32164003,
            32161065,
            32160871,
            32166966,
            32173329,
            32161342,
            32161916,
            32160867,
            32161042,
            32161000
        ]
    },
    "name": "G. Xor-MST",
    "statement": "You are given a complete undirected graph with vertices. A number is\r\nassigned to each vertex, and the weight of an edge between vertices and\r\nis equal to .Calculate the weight of the minimum spanning tree in this\r\ngraph.\r\n",
    "solutions": [
        "// eddy1021\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef double D;\ntypedef long double LD;\ntypedef long long LL;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\n#define mod9 1000000009LL\n#define mod7 1000000007LL\n#define INF  1023456789LL\n#define INF16 10000000000000000LL\n#define eps 1e-9\n#define SZ(x) (int)(x).size()\n#define ALL(x) (x).begin(), (x).end()\n#define IOS ios_base::sync_with_stdio(0); cin.tie(0)\n#ifndef ONLINE_JUDGE\n#define debug(...) printf(__VA_ARGS__)\n#else \n#define debug(...)\n#endif\ninline LL getint(){\n  LL _x=0,_tmp=1; char _tc=getchar();    \n  while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();\n  if( _tc == '-' ) _tc=getchar() , _tmp = -1;\n  while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();\n  return _x*_tmp;\n}\ninline LL add( LL _x , LL _y , LL _mod = mod7 ){\n  _x += _y;\n  return _x >= _mod ? _x - _mod : _x;\n}\ninline LL sub( LL _x , LL _y , LL _mod = mod7 ){\n  _x -= _y;\n  return _x < 0 ? _x + _mod : _x;\n}\ninline LL mul( LL _x , LL _y , LL _mod = mod7 ){\n  _x *= _y;\n  return _x >= _mod ? _x % _mod : _x;\n}\nLL mypow( LL _a , LL _x , LL _mod ){\n  if( _x == 0 ) return 1LL;\n  LL _ret = mypow( mul( _a , _a , _mod ) , _x >> 1 , _mod );\n  if( _x & 1 ) _ret = mul( _ret , _a , _mod );\n  return _ret;\n}\nLL mymul( LL _a , LL _x , LL _mod ){\n  if( _x == 0 ) return 0LL;\n  LL _ret = mymul( add( _a , _a , _mod ) , _x >> 1 , _mod );\n  if( _x & 1 ) _ret = add( _ret , _a , _mod );\n  return _ret;\n}\ninline bool equal( D _x ,  D _y ){\n  return _x > _y - eps && _x < _y + eps;\n}\nvoid sleep( double sec = 1021 ){\n  clock_t s = clock();\n  while( clock() - s < CLOCKS_PER_SEC * sec );\n}\n#define Bye exit(0)\nint __ = 1 , _cs;\n/*********default*********/\nvoid build(){\n\n}\n#define N 201010\nint p[ N ];\nint f( int x ){\n  return x == p[ x ] ? x : p[ x ] = f( p[ x ] );\n}\nvoid uni( int x , int y ){\n  p[ f( x ) ] = f( y );\n}\nstruct Nd{\n  Nd *t[ 2 ];\n  Nd(){\n    t[ 0 ] = t[ 1 ] = NULL;\n  }\n};\nvoid modify( Nd* now , int vl , int bt ){\n  if( bt < 0 ) return;\n  int son = (vl >> bt) & 1;\n  if( !now->t[ son ] )\n    now->t[ son ] = new Nd();\n  modify( now->t[ son ] , vl , bt - 1 );\n}\nint n , a[ N ];\nvoid init(){\n  n = getint();\n  for( int i = 0 ; i < n ; i ++ )\n    a[ i ] = getint();\n  sort( a , a + n );\n  n = unique( a , a + n ) - a;\n}\nLL ans;\nunordered_map<int,int> id;\nvector< pair<int,pair<int,int>> > e;\nvoid add_edge( int i1 , int i2 , int c ){\n  e.push_back( { c , { i1 , i2 } } );\n}\nvoid gogo( Nd* now , int vl , int bt , int cur , bool same ){\n  if( bt < 0 ){\n    if( same ) return;\n    //cerr << vl << \" \" << cur << endl;\n    add_edge( id[ vl ] , id[ cur ] , vl ^ cur );\n    return;\n  }\n  if( same ){\n    for( int i = 0 ; i < 2 ; i ++ )\n      if( now->t[ i ] )\n        gogo( now->t[ i ] , vl , bt - 1 , cur + i * (1 << bt) , \n              i == ((vl >> bt) & 1));\n  }else{\n    int nd = (vl >> bt) & 1;\n    for( int i = 0 ; i < 2 ; i ++ )\n      if( now->t[ i ^ nd ] ){\n        gogo( now->t[ i ^ nd ] , vl , bt - 1 , \n              cur + (i ^ nd) * (1 << bt) ,\n              false );\n        break;\n      }\n  }\n}\nvoid solve(){\n  Nd *root = new Nd();\n  for( int i = 0 ; i < n ; i ++ ){\n    modify( root , a[ i ] , 29 );\n    id[ a[ i ] ] = i;\n  }\n  for( int i = 0 ; i < n ; i ++ )\n    gogo( root , a[ i ] , 29 , 0 , true );\n  sort( e.begin() , e.end() );\n  ans = 0;\n  for( int i = 0 ; i < n ; i ++ )\n    p[ i ] = i;\n  for( auto i : e )\n    if( f( i.second.first ) !=\n        f( i.second.second ) ){\n      ans += i.first;\n      uni( i.second.first ,\n           i.second.second );\n    }\n  cout << ans << endl;\n}\nint main(){\n  build();\n  //__ = getint();\n  while( __ -- ){\n    init();\n    solve();\n  }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "data structures"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\G. Xor-MST.json",
    "editorial_link": "https://codeforces.com//blog/entry/55701",
    "editorial": "We can use Boruvkaâs algorithm to solve this problem.This algorithm\r\nusually works in : initially MST is empty, and then we run a number of\r\niterations. During each iteration we find connected components in the\r\ngraph formed by already added edges, and for each component we find the\r\nshortest edge that leads out of this component. Then we add the edges we\r\nfound to the MST (but we should be careful to avoid adding edges that\r\nform cycles in MST). The number of iterations is at most , and each of\r\niterations can be done in .However, in this problem we need to speed up\r\nthis algorithm. We can do each iteration in time using a binary trie. We\r\ncan store all values from in a trie. When we need to find the shortest\r\nedge that connects some component with vertices outside of it, we\r\nfirstly remove all values contained in this component from the trie.\r\nAfter that, for each vertex in the component we can find the closest\r\nvertex outside the component in by descending the trie. And then we\r\ninsert the values of belonging to the component back into the trie.\r\nSince for each vertex we descend the trie three times (to remove it, to\r\nfind closest vertex and to add it back), each iteration requries , and\r\nthe whole algorithm works in time.\r\n",
    "hint": []
}