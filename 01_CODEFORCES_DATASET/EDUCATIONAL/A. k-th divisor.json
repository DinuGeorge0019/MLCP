{
    "link": "https://codeforces.com//contest/762/problem/A",
    "problemId": "90122",
    "problem_idx": "A",
    "shortId": "762A",
    "contest_number": "762",
    "problem_submissions": {
        "F": [
            24128800,
            24127287,
            24131448,
            24128833,
            24128590
        ],
        "E": [
            24122771,
            24123546,
            24117007,
            24124444,
            24127665,
            24127353,
            24122694,
            24124867,
            24128194,
            24130174,
            24129986,
            24129967,
            24127255,
            24123944,
            24123747,
            24128463,
            24126253,
            24117536,
            24126607
        ],
        "D": [
            24120216,
            24117937,
            24120594,
            24123699,
            24120899,
            24122923,
            24125654,
            24122077,
            24124440,
            24123437,
            24124479,
            24129845,
            64773611,
            24129570,
            24127415,
            24125478,
            24129569,
            24125183,
            24124387,
            24117686
        ],
        "C": [
            24117649,
            24115665,
            24118684,
            24120038,
            24118048,
            24119412,
            24117040,
            24153774,
            24117580,
            24118699,
            24120548,
            24119249,
            24120443,
            24120966,
            24122719,
            24122392,
            24134825,
            24118679
        ],
        "B": [
            24115242,
            24114275,
            24114874,
            24121323,
            24115338,
            24115218,
            24114366,
            24115078,
            24114616,
            24115065,
            24117965,
            24115815,
            24115613,
            24116743,
            24116439,
            24116970,
            24124581,
            24115154,
            24114842
        ],
        "A": [
            24113787,
            24113769,
            24113819,
            24114373,
            24113802,
            24113840,
            24113765,
            24113864,
            24113822,
            24115779,
            24114962,
            24114446,
            24113882,
            24114350,
            24114566,
            24114001,
            24114912,
            24113931,
            24113786
        ]
    },
    "name": "A. k-th divisor",
    "statement": "You are given two integers and . Find -th smallest divisor of , or\r\nreport that it doesn\u2019t exist.Divisor of is any such natural number, that\r\ncan be divided by it without remainder.\r\n",
    "solutions": [
        "// eddy1021\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef double D;\ntypedef long double LD;\ntypedef long long LL;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\n#define mod9 1000000009LL\n#define mod7 1000000007LL\n#define INF  1023456789LL\n#define INF16 10000000000000000LL\n#define eps 1e-9\n#define SZ(x) (int)(x).size()\n#define ALL(x) (x).begin(), (x).end()\n#ifndef ONLINE_JUDGE\n#define debug(...) printf(__VA_ARGS__)\n#else \n#define debug(...)\n#endif\ninline LL getint(){\n  LL _x=0,_tmp=1; char _tc=getchar();    \n  while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();\n  if( _tc == '-' ) _tc=getchar() , _tmp = -1;\n  while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();\n  return _x*_tmp;\n}\ninline LL add( LL _x , LL _y , LL _mod = mod7 ){\n  _x += _y;\n  return _x >= _mod ? _x - _mod : _x;\n}\ninline LL sub( LL _x , LL _y , LL _mod = mod7 ){\n  _x -= _y;\n  return _x < 0 ? _x + _mod : _x;\n}\ninline LL mul( LL _x , LL _y , LL _mod = mod7 ){\n  _x *= _y;\n  return _x >= _mod ? _x % _mod : _x;\n}\nLL mypow( LL _a , LL _x , LL _mod ){\n  if( _x == 0 ) return 1LL;\n  LL _ret = mypow( mul( _a , _a , _mod ) , _x >> 1 , _mod );\n  if( _x & 1 ) _ret = mul( _ret , _a , _mod );\n  return _ret;\n}\nLL mymul( LL _a , LL _x , LL _mod ){\n  if( _x == 0 ) return 0LL;\n  LL _ret = mymul( add( _a , _a , _mod ) , _x >> 1 , _mod );\n  if( _x & 1 ) _ret = add( _ret , _a , _mod );\n  return _ret;\n}\ninline bool equal( D _x ,  D _y ){\n  return _x > _y - eps && _x < _y + eps;\n}\n#define Bye exit(0)\nint __ = 1 , _cs;\n/*********default*********/\nvoid build(){\n\n}\nLL n , k;\nvoid init(){\n  n = getint();\n  k = getint();\n}\nvoid solve(){\n  vector<LL> v;\n  for( LL i = 1 ; i * i <= n ; i ++ )\n    if( n % i == 0 ){\n      v.push_back( i );\n      if( n / i != i )\n        v.push_back( n / i );\n    }\n  sort( v.begin() , v.end() );\n  if( k > (int)v.size() )\n    puts( \"-1\" );\n  else\n    printf( \"%lld\\n\" , v[ k - 1 ] );\n}\nint main(){\n  build();\n  //__ = getint();\n  while( __ -- ){\n    init();\n    solve();\n  }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "number theory"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. k-th divisor.json",
    "editorial_link": "https://codeforces.com//blog/entry/50010",
    "editorial": "If you find all the small divisors of n that are less than sqrt(n), you can find the rest of them dividing n by the small ones."
}