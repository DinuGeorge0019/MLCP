{"link": "https://codeforces.com//contest/1716/problem/C", "problemId": "1494202", "problem_idx": "C", "shortId": "1716C", "contest_number": "1716", "problem_submissions": {"F": [166973182, 166969763, 166955726, 166980503, 166971153, 166982692, 166980605, 166983476, 166980127, 166991091, 166984328, 174506735, 166989832, 166994539, 166994104, 167001346, 166987296, 166992176, 167001598, 166984678, 166980048, 166989609, 166991438], "E": [166965293, 166978547, 166976884, 166972995, 166981522, 166965872, 166976854, 166973781, 166987347, 166978953, 166992476, 174506754, 166979608, 166979158, 166999544, 166982891, 166981173, 166992198, 166994171, 166998037, 166985315], "D": [166956573, 166961021, 166948324, 166940829, 166964589, 166961790, 166945640, 166966226, 166990484, 166958577, 166963786, 166970823, 166970282, 166968378, 166964318, 166974075, 166965600, 166970563, 166970355, 166971544, 166978778], "C": [166949159, 166950864, 166972142, 166963779, 166956508, 166957181, 166966957, 166958122, 166972096, 166974861, 166961876, 166963035, 166961356, 166959918, 166967210, 166954669, 166964729, 166960756, 166967143, 166974763], "B": [166933142, 166932739, 166939087, 166932145, 166933138, 166932019, 166931348, 166934835, 166932251, 166931312, 166937500, 166936523, 166932821, 166932877, 166940841, 166932031, 166935420, 166935573, 166933744, 166937079], "A": [166930228, 166930333, 166931520, 166930280, 166930300, 166930222, 166930190, 166930301, 166930500, 166930207, 166932038, 166930537, 166930220, 166930271, 166933329, 166930353, 166930639, 166930376, 166930158, 166931421]}, "name": "C. Robot in a Hallway", "statement": "There is a grid, consisting of 2 rows and m columns. The rows are\r\nnumbered from 1 to 2 from top to bottom. The columns are numbered from 1\r\nto m from left to right.The robot starts in a cell (1, 1). In one\r\nsecond, it can perform either of two actions: move into a cell adjacent\r\nby a side: up, right, down or left; remain in the same cell. The robot\r\nis not allowed to move outside the grid.Initially, all cells, except for\r\nthe cell (1, 1), are locked. Each cell (i, j) contains a value a_{i,j}\r\nthe moment that this cell gets unlocked. The robot can only move into a\r\ncell (i, j) if at least a_{i,j} seconds have passed before the move.The\r\nrobot should visit all cells (cell (1, 1) is considered entered at the\r\nstart). It can finish in any cell.What is the fastest the robot can\r\nachieve that?\r\n", "solutions": ["#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n#include <array>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) {fprintf(stderr, __VA_ARGS__);fflush(stderr);}\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int N = 200200;\nint n;\nint a[2][N];\nint b[2][N];\nint c[2][N];\n\nvoid solve() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < 2; i++)\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tscanf(\"%d\", &a[i][j]);\n\t\t\tif (i + j > 0) a[i][j]++;\n\t\t}\n\tb[0][n] = b[1][n] = 0;\n\tfor (int i = n - 1; i >= 0; i--) {\n\t\tfor (int k = 0; k < 2; k++) {\n\t\t\tb[k][i] = max(max(a[k ^ 1][i], a[k][i] + 2 * (n - i) - 1), b[k][i + 1] + 1);\n\t\t}\n\t}\n\tint ans = (int)1e9 + (int)1e8;\n\tint cur = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tint k = i & 1;\n\t\tans = min(ans, max(cur, b[k][i]));\n\t\tcur = max(cur, a[k][i] + 2 * (n - i) - 1);\n\t\tcur = max(cur, a[k ^ 1][i] + 2 * (n - i) - 2);\n\t}\n\tprintf(\"%d\\n\", ans);\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) solve();\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "dp", "greedy", "implementation", "ternary search"], "dificulty": "2000", "interactive": false}