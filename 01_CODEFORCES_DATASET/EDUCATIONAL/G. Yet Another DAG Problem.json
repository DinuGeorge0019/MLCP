{
    "link": "https://codeforces.com//contest/1430/problem/G",
    "problemId": "755159",
    "problem_idx": "G",
    "shortId": "1430G",
    "contest_number": "1430",
    "problem_submissions": {
        "G": [
            95237045,
            95235075,
            95240737,
            97566243,
            95239114,
            95228241,
            95221926,
            95230929,
            95239632,
            95250364,
            95455283,
            95252471,
            95256236,
            95242546,
            95303013,
            98871928
        ],
        "F": [
            95220487,
            95228332,
            95223150,
            97566130,
            95216783,
            95250832,
            95242433,
            95256538,
            95247019,
            95248722,
            95240985,
            95228704,
            95232008,
            95232802,
            95230075,
            95232563,
            95238448,
            95465311,
            95234311,
            95232005
        ],
        "E": [
            95211511,
            95210553,
            95208920,
            97565966,
            95208366,
            95208320,
            95213012,
            95219246,
            95219352,
            95220042,
            95209230,
            95216025,
            95206937,
            95209011,
            95216031,
            95214609,
            95202690,
            95215844,
            95218385
        ],
        "D": [
            95208553,
            95206064,
            95205170,
            97565921,
            95205237,
            95202655,
            95224583,
            95213640,
            95216224,
            95211198,
            95204449,
            95212306,
            95215958,
            95200930,
            95207117,
            95208215,
            95216892,
            95212972,
            95215071
        ],
        "C": [
            95197013,
            95198163,
            95199698,
            97565869,
            95200959,
            95198168,
            95198409,
            95198669,
            95209890,
            95204911,
            95197315,
            95202373,
            95200953,
            95202547,
            95204796,
            95194169,
            95198706,
            95205881,
            95210665
        ],
        "B": [
            95195119,
            95195489,
            95196116,
            97565818,
            95196356,
            95194999,
            95195326,
            95195742,
            95196929,
            95195601,
            95195544,
            95196763,
            95197327,
            95194053,
            95194687,
            95199867,
            95195154,
            95196136,
            95196683
        ],
        "A": [
            95193928,
            95194100,
            95194842,
            97565779,
            95194326,
            95193977,
            95194039,
            95194134,
            95194416,
            95194244,
            95194071,
            95194430,
            95194685,
            95193941,
            95193947,
            95197083,
            95194045,
            95194254,
            95194714
        ]
    },
    "name": "G. Yet Another DAG Problem",
    "statement": "You are given a directed acyclic graph (a directed graph that does not\r\ncontain cycles) of n vertices and m arcs. The i-th arc leads from the\r\nvertex x_i to the vertex y_i and has the weight w_i.Your task is to\r\nselect an integer a_v for each vertex v, and then write a number b_i on\r\neach arcs i such that b_i = a_{x_i} - a_{y_i}. You must select the\r\nnumbers so that: all b_i are positive; the value of the expression\r\nsum\r\nlimits_{i = 1}^{m} w_i b_i is the lowest possible. It can be shown that\r\nfor any directed acyclic graph with non-negative w_i, such a way to\r\nchoose numbers exists.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define ull unsigned ll\n#define uint unsigned\n#define pii pair<int,int>\n#define pll pair<ll,ll>\n#define IT iterator\n#define PB push_back\n#define fi first\n#define se second\n#define For(i,j,k) for (int i=(int)(j);i<=(int)(k);i++)\n#define Rep(i,j,k) for (int i=(int)(j);i>=(int)(k);i--)\n#define CLR(a,v) memset(a,v,sizeof(a));\n#define CPY(a,b) memcpy(a,b,sizeof(a));\n#define debug puts(\"wzpakking\")\n#define y1 ysghysgsygsh\nusing namespace std;\nconst int N=20;\nint n,m,S,ind[N];\nint e[1<<18|5];\nint f[1<<18|5];\nint fr[1<<18|5];\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tFor(i,1,m){\n\t\tint x,y,w;\n\t\tscanf(\"%d%d%d\",&x,&y,&w);\n\t\t--x; --y;\n\t\tind[y]|=1<<x;\n\t\te[(1<<x)|(1<<y)]=w;\n\t\tS+=w;\n\t}\n\tFor(i,0,n-1)\n\t\tFor(S,0,(1<<n)-1)\n\t\t\tif (S&(1<<i))\n\t\t\t\te[S]+=e[S^(1<<i)];\n\tmemset(f,30,sizeof(f));\n\tf[0]=0;\n\tFor(i,0,(1<<n)-1){\n\t\t//cerr<<i<<endl;\n\t\tf[i]+=S-e[i]-e[(1<<n)-1-i];\n\t\tint SS=0;\n\t\tFor(j,0,n-1) if (!(i&(1<<j)))\n\t\t\tif ((ind[j]&i)==ind[j])\n\t\t\t\tSS|=1<<j;\n\t\tfor (int j=SS;j;j=(j-1)&SS)\n\t\t\tif (f[i|j]>f[i]) f[i|j]=f[i],fr[i|j]=j;\n\t}\n\tint res[20];\n\tFor(i,0,n-1) res[i]=0;\n\tint S=(1<<n)-1;\n\tfor (;S;S-=fr[S]){\n\t\t//cout<<S<<' '<<fr[S]<<endl;\n\t\tFor(i,0,n-1) if (S&(1<<i)) ++res[i];\n\t}\n\tFor(i,0,n-1) cout<<res[i]<<' ';\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "dfs and similar",
        "dp",
        "flows",
        "graphs",
        "math"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\G. Yet Another DAG Problem.json",
    "editorial_link": "https://codeforces.com//blog/entry/83614",
    "editorial": "The key observation in this problem is that the values of should form a\r\ncontiguous segment of integers. For example, suppose there exists a\r\nvalue such that there is at least one , there is at least one , but no .\r\nWe can decrease all values of that are greater than by , so the answer\r\nwill still be valid, but the value of will decrease. So, the values of\r\nform a contiguous segment of integers. We can always assume that this\r\nsegment is , since subtracting the same value from each does not change\r\nanything.The other observation we need is that we can rewrite the\r\nexpression we have to minimize as follows: , where is the signed sum of\r\nweights of all arcs incident to the vertex (the weights of all arcs\r\nleading from are taken with positive sign, and the weights of all arcs\r\nleading to are taken with negative sign). These two observations lead us\r\nto a bitmask dynamic programming solution: let be the minimum value of ,\r\nif we assigned the values from to the vertices from . A naive way to\r\ncalculate this dynamic programming is to iterate on the submask of ,\r\ncheck that choosing the integer for each vertex from that submask\r\ndoesn\u00e2\u0080\u0099t ruin anything (for each vertex that belongs to this submask, all\r\nvertices that are reachable from it should have , so they should belong\r\nto , but not to the submask we iterate on), and update the dynamic\r\nprogramming value. But this solution is , and, depending on your\r\nimplementation, this might be too slow.It\u00e2\u0080\u0099s possible to speed this up to\r\nin a way similar to how profile dp can be optimized from to : we won\u00e2\u0080\u0099t\r\niterate on the submask; instead, we will try to add the vertices one by\r\none, and we should be able to add a vertex to the mask only if all\r\nvertices that are reachable from it already belong to the mask. There is\r\na possibility that we add two vertices connected by an arc with the same\r\nvalue of , so, for a fixed value of , we should consider assigning it to\r\nvertices in topological sorting order (that way, if one vertex is\r\nreachable from another, it will be considered later, so we won\u00e2\u0080\u0099t add\r\nboth of those with the same value of ).\r\n"
}