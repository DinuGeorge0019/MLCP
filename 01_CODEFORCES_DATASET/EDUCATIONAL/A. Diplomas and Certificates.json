{
    "link": "https://codeforces.com//contest/818/problem/A",
    "problemId": "112245",
    "problem_idx": "A",
    "shortId": "818A",
    "contest_number": "818",
    "problem_submissions": {
        "G": [
            30023806,
            28149762,
            28149727,
            28149674,
            28150840,
            28150782,
            28150772,
            28150751,
            28150583,
            36665796,
            28151676,
            28150077,
            28257233,
            28153699,
            28148603,
            28155021,
            28156689,
            28156349,
            28183779
        ],
        "F": [
            28147295,
            28150245,
            28148357,
            28147147,
            28148601,
            28147618,
            28149338,
            28148822,
            28148432,
            28150045,
            28149715,
            28149799,
            28150664,
            28150399,
            28265989,
            28152841,
            28152214,
            28151371,
            28150016,
            28150927,
            28150947,
            28149764
        ],
        "E": [
            28145911,
            28145866,
            28146912,
            28146350,
            28146816,
            28150531,
            28146712,
            28147272,
            28147609,
            28147038,
            28148502,
            28147986,
            28147358,
            28149016,
            28148737,
            28150693,
            28148409,
            28146623,
            28149530,
            28149268,
            28147603
        ],
        "D": [
            28144801,
            28145060,
            28145928,
            28145417,
            28145327,
            28143658,
            28146282,
            28144973,
            28145879,
            28146889,
            28146309,
            28145676,
            28146984,
            28146985,
            28145000,
            28147304,
            28145917,
            28147015,
            28147874,
            28146172
        ],
        "C": [
            28144306,
            28147073,
            28145409,
            28144547,
            28144448,
            28144425,
            28145368,
            28146425,
            28145275,
            28145837,
            28145300,
            28145004,
            28145976,
            28145637,
            28147975,
            28146492,
            28148332,
            28146298,
            28146819,
            28144965
        ],
        "B": [
            28143095,
            28143560,
            28143556,
            28143415,
            28143669,
            28144503,
            28144240,
            28143720,
            28144083,
            28143468,
            28143875,
            28143599,
            28143355,
            28143995,
            28143629,
            28143924,
            28143708,
            28142954,
            28143812,
            28144185
        ],
        "A": [
            28142461,
            28142521,
            28142540,
            28142460,
            28142740,
            28142644,
            28142466,
            28142416,
            28142519,
            28142508,
            28142479,
            28142800,
            28142422,
            28142542,
            28142573,
            28142463,
            28142490,
            28142485
        ]
    },
    "name": "A. Diplomas and Certificates",
    "statement": "There are students who have taken part in an olympiad. Now it\u2019s time to\r\naward the students.Some of them will receive diplomas, some wiil get\r\ncertificates, and others won\u2019t receive anything. Students with diplomas\r\nand certificates are called . But there are some rules of counting the\r\nnumber of diplomas and certificates. The number of certificates must be\r\ntimes greater than the number of diplomas. The number of must (i.e. not\r\nbe greater than half of ). It\u2019s possible that there are no .You have to\r\nidentify the maximum possible number of , according to these rules. Also\r\nfor this case you have to calculate the number of students with\r\ndiplomas, the number of students with certificates and the number of\r\nstudents who are not .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#define ms(s, n) memset(s, n, sizeof(s))\n#define FOR(i, a, b) for (int i = (a); i < (b); i++)\n#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)\n#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)\n#define sz(a) int((a).size())\n#define present(t, x) (t.find(x) != t.end())\n#define all(a) (a).begin(), (a).end()\n#define uni(a) (a).erase(unique(all(a)), (a).end())\n#define pb push_back\n#define pf push_front\n#define mp make_pair\n#define fi first\n#define se second\n#define prec(n) fixed<<setprecision(n)\n#define bit(n, i) (((n) >> (i)) & 1)\n#define bitcount(n) __builtin_popcountll(n)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\ntypedef pair<int, int> pi;\ntypedef vector<int> vi;\ntypedef vector<pi> vii;\nconst int MOD = (int) 1e9 + 7;\nconst int MOD2 = 1007681537;\nconst int INF = (int) 1e9;\nconst ll LINF = (ll) 1e18;\nconst ld PI = acos((ld) -1);\nconst ld EPS = 1e-9;\ninline ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}\ninline ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}\ninline ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}\ntemplate<class T> inline int chkmin(T& a, const T& val) {return val < a ? a = val, 1 : 0;}\ntemplate<class T> inline int chkmax(T& a, const T& val) {return a < val ? a = val, 1 : 0;}\ninline ll isqrt(ll k) {ll r = sqrt(k) + 1; while (r * r > k) r--; return r;}\ninline ll icbrt(ll k) {ll r = cbrt(k) + 1; while (r * r * r > k) r--; return r;}\ninline void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}\ninline void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}\ninline int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}\ninline int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}\ninline int sign(ld x) {return x < -EPS ? -1 : x > +EPS;}\ninline int sign(ld x, ld y) {return sign(x - y);}\n#define db(x) cerr << #x << \" = \" << (x) << \" \";\n#define endln cerr << \"\\n\";\n\nvoid solve() {\n    long long n, k; cin >> n >> k;\n    long long win = n >> 1;\n    long long a = win / (k + 1);\n    long long b = a * k;\n    cout << a << \" \" << b << \" \" << n - a - b << \"\\n\";\n}\n\nint main() {\n    int JUDGE_ONLINE = 1;\n    if (fopen(\"in.txt\", \"r\")) {\n        JUDGE_ONLINE = 0;\n        assert(freopen(\"in.txt\", \"r\", stdin));\n        //assert(freopen(\"out.txt\", \"w\", stdout));\n    }\n    else {\n        ios_base::sync_with_stdio(0), cin.tie(0);\n    }\n    solve();\n    if (!JUDGE_ONLINE) {\n        //cout << \"\\nTime elapsed: \" << 1000 * clock() / CLOCKS_PER_SEC << \"ms\\n\";\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Diplomas and Certificates.json",
    "editorial_link": "https://codeforces.com/blog/entry/52991",
    "editorial": "Let be the number of students with diplomas and students with\r\ncertificates. is always . So the total number of winners is . It should\r\nnot exceed , so the maximum value for will be hit in , where is .Overall\r\ncomplexity: .\r\n"
}