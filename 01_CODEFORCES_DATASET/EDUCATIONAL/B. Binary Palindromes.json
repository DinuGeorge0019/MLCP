{"link": "https://codeforces.com//contest/1251/problem/B", "problemId": "449545", "problem_idx": "B", "shortId": "1251B", "contest_number": "1251", "problem_submissions": {"D": [63400316, 63400298, 63400254, 63400203, 63400050, 63399984, 63399855, 63312403, 63311940, 63318990, 63314573, 63427346, 63313882, 63324960, 63323872, 63313008, 63319425, 63312837, 63313209, 63313402, 63313713, 63313403, 64630107, 63316214, 63315539, 63310152, 63317232, 63314816], "E2": [63399693, 63399662, 63399248, 63399098, 63398546, 63365832, 63365269, 63364770, 63338273, 63317755, 63314968, 63314711, 63319868, 63427473, 63323675, 63322799, 63317013, 63330304, 63326912, 63315944, 63319041, 63319971, 63319185, 63322016, 64630154, 63319603, 63323442, 63321804, 63320973], "F": [63396794, 63395657, 63340397, 63340247, 63322387, 63331974, 63347502, 63345880, 63325885, 63328608, 63427571, 63333465, 63330239, 63311325, 63320807, 63332225, 63349152, 63349006, 63348927, 63346482, 63354827, 63555798, 63396546, 63361055, 63321261, 63339709], "C": [63339509, 63309630, 63308770, 63309154, 63311219, 63425373, 63310517, 63308226, 63320102, 63309048, 63314299, 63306755, 63309969, 63308377, 63311623, 63309667, 64630061, 63312827, 63308776, 63307614, 63311843, 63311519], "E1": [63317840, 63315090, 63315149, 63319942, 63427459, 63323582, 63322914, 63316888, 63330357, 63326985, 63315977, 63318948, 63319867, 63319014, 63322137, 64630159, 63319793, 63323604, 63329086, 63321906, 63320849], "B": [63308319, 63306252, 63306938, 63308521, 63425306, 63309307, 63306115, 63321613, 63306650, 63307802, 63305211, 63307273, 63305885, 63310074, 63307855, 64630021, 63308550, 63306496, 63305718, 63309015, 63308105], "A": [63304668, 63304379, 63304115, 63305872, 63425273, 63304642, 63304137, 63319299, 63304384, 63304697, 63304218, 63304454, 63304321, 63307231, 63304364, 64629970, 63304438, 63304343, 63304369, 63305312, 63306229]}, "name": "B. Binary Palindromes", "statement": "A palindrome is a string t which reads the same backward as forward\r\n(formally, t[i] = t[|t| + 1 - i] for all i\r\nin [1, |t|]). Here |t| denotes the length of a string t. For example,\r\nthe strings , and are palindromes.You have n binary strings s_1, s_2,\r\ndots, s_n (each s_i consists of zeroes and/or ones). You can swap any\r\npair of characters any number of times (possibly, zero). Characters can\r\nbe either from the same string or from different strings there are no\r\nrestrictions.Formally, in one move you: choose four integer numbers x,\r\na, y, b such that 1\r\nle x, y\r\nle n and 1\r\nle a\r\nle |s_x| and 1\r\nle b\r\nle |s_y| (where x and y are string indices and a and b are positions in\r\nstrings s_x and s_y respectively), swap (exchange) the characters s_x[a]\r\nand s_y[b]. What is the maximum number of strings you can make\r\npalindromic simultaneously?\r\n", "solutions": ["#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid solve_case() {\n    int N;\n    cin >> N;\n    vector<string> strings(N);\n    bool odd = false;\n    int counts[2] = {0, 0};\n\n    for (string &str : strings) {\n        cin >> str;\n        odd = odd || str.size() % 2 != 0;\n\n        for (char c : str)\n            counts[c - '0']++;\n    }\n\n    int answer = (odd || counts[0] % 2 == 0) ? N : N - 1;\n    cout << answer << '\\n';\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int Q;\n    cin >> Q;\n\n    while (Q-- > 0)\n        solve_case();\n}\n"], "input": "", "output": "", "tags": ["greedy", "strings"], "dificulty": "1400", "interactive": false}