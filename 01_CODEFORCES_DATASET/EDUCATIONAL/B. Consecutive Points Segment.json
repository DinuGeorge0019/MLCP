{
    "link": "https://codeforces.com//contest/1671/problem/B",
    "problemId": "1376216",
    "problem_idx": "B",
    "shortId": "1671B",
    "contest_number": "1671",
    "problem_submissions": {
        "F": [
            154542143,
            154558308,
            154555068,
            154557074,
            154562560,
            154560412,
            154560334,
            154580455,
            154580066,
            154579893,
            154579534,
            154559391,
            154560455,
            154556037,
            154570936,
            154568652,
            154567294,
            154570123,
            154570095,
            154571694,
            154567547,
            154573773,
            154574629
        ],
        "E": [
            154528618,
            154523246,
            154538308,
            154531841,
            154536634,
            154537536,
            154534868,
            154536863,
            154540214,
            154537733,
            154537068,
            154539560,
            154544853,
            154541083,
            154543961,
            154546659,
            154540036,
            154543052
        ],
        "D": [
            154515283,
            154518590,
            154521489,
            154520458,
            154521403,
            154524920,
            154528513,
            154532728,
            154525208,
            154525643,
            154525793,
            154526566,
            154525948,
            154532548,
            154534260,
            154534156,
            154549567,
            154532508
        ],
        "C": [
            154510946,
            154513613,
            154516509,
            154516298,
            154514632,
            154518397,
            154518432,
            154511688,
            154514098,
            154517459,
            154516109,
            154520271,
            154520298,
            154520714,
            154518755,
            154518674,
            154516230,
            154526116
        ],
        "B": [
            154508972,
            154509429,
            154511794,
            154511150,
            154510866,
            154511702,
            154510603,
            154509631,
            154511147,
            154510842,
            154511266,
            154514390,
            154513321,
            154513559,
            154512703,
            154511916,
            154511617,
            154520025
        ],
        "A": [
            154508532,
            154508535,
            154508654,
            154509163,
            154508619,
            154508583,
            154508765,
            154508590,
            154508804,
            154509162,
            154508941,
            154509310,
            154508759,
            154508605,
            154508711,
            154508600,
            154508845,
            154516250
        ]
    },
    "name": "B. Consecutive Points Segment",
    "statement": "You are given n points with integer coordinates on a coordinate axis OX.\r\nThe coordinate of the i-th point is x_i. All points’ coordinates are\r\ndistinct and given in strictly increasing order.For each point i, you\r\ncan do the following operation : take this point and move it by 1 to the\r\nleft or to the right (i..e., you can change its coordinate x_i to x_i -\r\n1 or to x_i + 1). In other words, for each point, you choose\r\n(separately) its new coordinate. For the i-th point, it can be either\r\nx_i - 1, x_i or x_i + 1.Your task is to determine if you can move some\r\npoints as described above in such a way that the new set of points forms\r\na of integers, i. e. for some integer l the coordinates of points should\r\nbe equal to l, l + 1,\r\nldots, l + n - 1.Note that the resulting points should have\r\ncoordinates.You have to answer t independent test cases.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 22.04.2022 18:36:41       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n      cin >> a[i];\n    }\n    for (int i = 0; i < n; i++) {\n      a[i] -= i;\n    }\n    int L = *min_element(a.begin(), a.end());\n    int R = *max_element(a.begin(), a.end());\n    cout << (R - L <= 2 ? \"YES\" : \"NO\") << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math",
        "sortings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Consecutive Points Segment.json",
    "editorial_link": "https://codeforces.com//blog/entry/102181",
    "editorial": "We can see that the answer is if and only if there are no more than two\r\ngaps of length between the given points. If there is no gap, the answer\r\nis obviously . If there is only one gap of length , we can just move the\r\nleft (or the right) part of the set to this gap. When there are two\r\ngaps, we can move the part before the first gap to the right and the\r\npart after the second gap to the left. Of course, if there is a gap of\r\nlength at least (or multiple gaps with the total length ), we canât move\r\nthe points from the left and the right part to satisfy the middle\r\ngap.Time complexity: .\r\n",
    "hint": []
}