{
    "link": "https://codeforces.com//contest/1555/problem/B",
    "problemId": "1062141",
    "problem_idx": "B",
    "shortId": "1555B",
    "contest_number": "1555",
    "problem_submissions": {
        "F": [
            124306614,
            124343856,
            124312339,
            124307563,
            124318196,
            124319806,
            124318258,
            124337936,
            124326369,
            124312719,
            124312071,
            124325220,
            124322375,
            124337491,
            124327796,
            124313538,
            124320609,
            124319069,
            124334134
        ],
        "E": [
            124292614,
            124284546,
            124290978,
            124299668,
            124299626,
            124301534,
            124305345,
            124311168,
            124315291,
            124304878,
            124305598,
            124300363,
            124304344,
            124324832,
            124306310,
            124305064,
            124305374
        ],
        "C": [
            124284989,
            124280595,
            124283283,
            124284609,
            124285731,
            124291694,
            124283589,
            124282860,
            124292981,
            124286855,
            124287174,
            124284102,
            124289820,
            124283315,
            124290207,
            124292792,
            124290345
        ],
        "D": [
            124282896,
            124281706,
            124287585,
            124287694,
            124291470,
            124295363,
            124329814,
            124293642,
            124293299,
            124285216,
            124284331,
            124294215,
            124292885,
            124291338,
            124294163,
            124296113,
            124299446,
            124297892,
            124294376
        ],
        "B": [
            124280802,
            124279957,
            124281993,
            124281520,
            124282708,
            124281869,
            124281852,
            124283175,
            124289412,
            124282989,
            124282919,
            124281809,
            124286550,
            124291562,
            124286726,
            124289852,
            124285340
        ],
        "A": [
            124279594,
            124279557,
            124279608,
            124279611,
            124279723,
            124279607,
            124279587,
            124279711,
            124282014,
            124280166,
            124279749,
            124279696,
            124279824,
            124279602,
            124281131,
            124280445,
            124279990
        ]
    },
    "name": "B. Two Tables",
    "statement": "You have an axis-aligned rectangle room with width W and height H, so\r\nthe lower left corner is in point (0, 0) and the upper right corner is\r\nin (W, H).There is a rectangular table standing in this room. The sides\r\nof the table are parallel to the walls, the lower left corner is in\r\n(x_1, y_1), and the upper right corner in (x_2, y_2).You want to place\r\nanother rectangular table in this room with width w and height h with\r\nthe width of the table parallel to the width of the room.The problem is\r\nthat sometimes there is not enough space to place the second table\r\nwithout intersecting with the first one (there are no problems with\r\ntables touching, though).You any of the tables, but you can move the\r\nfirst table inside the room. What is the minimum distance you should\r\nmove the first table to free enough space for the second one?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nconst int INF = 1000000000;\nint main(){\n  cout << fixed << setprecision(20);\n  int t;\n  cin >> t;\n  for (int i = 0; i < t; i++){\n    int W, H;\n    cin >> W >> H;\n    int x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    int w, h;\n    cin >> w >> h;\n    int ans = INF;\n    if (x2 - x1 + w <= W){\n      ans = min(ans, max(w - x1, 0));\n      ans = min(ans, max(x2 - (W - w), 0));\n    }\n    if (y2 - y1 + h <= H){\n      ans = min(ans, max(h - y1, 0));\n      ans = min(ans, max(y2 - (H - h), 0));\n    }\n    if (ans == INF){\n      cout << -1 << endl;\n    } else {\n      cout << ans << endl;\n    }\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Two Tables.json",
    "editorial_link": "https://codeforces.com//blog/entry/93389",
    "editorial": "Firstly, let\u00e2\u0080\u0099s notice the next property: if two axis-aligned rectangles\r\ndon\u00e2\u0080\u0099t intersect, then we can draw a vertical or horizontal line between\r\nthem. In other words, either or if and are coordinates of the one\r\nrectangle and and of the other one (analogically, for coordinates).Now,\r\nsuppose you want to move the first table by . Note that if in result\r\nthey will be divided by vertical line then we can set they still will be\r\ndivided, but the total distance will decrease. Analogically, if divided\r\nby horizontal line, we can set .In other words, it\u00e2\u0080\u0099s always optimal to\r\nmove the table either horizontally or vertically.Let\u00e2\u0080\u0099s look at the case\r\nof horizontal move: at first, we need to check that both tables can fit\r\nin the room, or their total width . If yes, then we calculate the\r\nmovement distance as follows: if we move the table right then there\r\nshould be at least to the left of it, or . Since we want to minimize\r\nthen we take .If we want to move the table left, then there should be at\r\nleast to the right, or , minimizing means taking . So, the result is\r\n.The vertical case can be handled in the same manner, if then the result\r\nis .The answer is the minimum among all possible variants, or if both\r\ncases are impossible.\r\n"
}