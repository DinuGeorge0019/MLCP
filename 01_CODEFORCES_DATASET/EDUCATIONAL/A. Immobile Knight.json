{
    "link": "https://codeforces.com//contest/1739/problem/A",
    "problemId": "1559863",
    "problem_idx": "A",
    "shortId": "1739A",
    "contest_number": "1739",
    "problem_submissions": {
        "F": [
            173982711,
            173969607,
            173981022,
            173986288,
            173992146,
            173980539,
            173991072,
            173980378,
            173978555,
            174245795,
            174000933,
            173993564,
            173995270,
            173994662,
            173995645,
            173994787,
            173991035,
            173995175,
            173975986,
            173996342,
            173995107,
            173986566
        ],
        "E": [
            173962909,
            173976378,
            173969496,
            173967080,
            173967227,
            173969366,
            173969799,
            173988104,
            173970277,
            173983172,
            173983299,
            173978308,
            173974083,
            173979712,
            173983159,
            173980060,
            173986740,
            173979502,
            173967920
        ],
        "D": [
            173953446,
            173954284,
            173959501,
            173953114,
            173950233,
            173963545,
            173960383,
            173950745,
            173966040,
            173950883,
            173962543,
            173951795,
            173957703,
            173966024,
            173951939,
            173967693,
            173958723,
            173974529,
            173956732
        ],
        "C": [
            173946487,
            173945498,
            173949713,
            174075655,
            174075624,
            173946209,
            173940986,
            173958498,
            173954556,
            173955135,
            173961377,
            173958964,
            173957077,
            173960274,
            173951680,
            173958743,
            173985617,
            173961155,
            173949432,
            173968872,
            173953205
        ],
        "B": [
            173936382,
            173937044,
            173937069,
            173935458,
            173935314,
            173943298,
            173937530,
            173935389,
            173954918,
            173937400,
            173937767,
            173940608,
            173940106,
            173945520,
            173936795,
            173941470,
            173938759,
            173964539,
            173936543
        ],
        "A": [
            173934470,
            173935151,
            173934498,
            173934222,
            173934344,
            173939803,
            173934700,
            173934286,
            173952986,
            173934928,
            173934527,
            173936084,
            173935340,
            173938305,
            173937802,
            173937555,
            173935130,
            173963081,
            173934367
        ]
    },
    "name": "A. Immobile Knight",
    "statement": "There is a chess board of size n\r\ntimes m. The rows are numbered from 1 to n, the columns are numbered\r\nfrom 1 to m.Let\u2019s call a cell if a knight placed in that cell can\u2019t move\r\nto any other cell on the board. Recall that a chess knight moves two\r\ncells in one direction and one cell in a perpendicular direction: Find\r\nany cell on the board. If there are no such cells, print any cell on the\r\nboard.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#ifdef tabr\n#include \"library/debug.cpp\"\n#else\n#define debug(...)\n#endif\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int tt;\n    cin >> tt;\n    while (tt--) {\n        int n, m;\n        cin >> n >> m;\n        if (n == 1 || m == 1) {\n            cout << 1 << \" \" << 1 << '\\n';\n        } else {\n            cout << 2 << \" \" << 2 << '\\n';\n        }\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Immobile Knight.json",
    "editorial_link": "https://codeforces.com//blog/entry/107461",
    "editorial": "Let\u00e2\u0080\u0099s consider some cases.If at least one of or are , then all cells are\r\nisolated. A knight can\u00e2\u0080\u0099t move one in a perpendicular direction.If at\r\nleast one of or are at least , then the knight always has at least one\r\nmove. No matter where you place it, it can move two cells along the\r\ngreater of the dimensions and move one in a perpendicular direction,\r\nbecause it\u00e2\u0080\u0099s at least .Three cases are left. , and . For all of these\r\ncases, the middle cell is isolated. That cell is .Since it doesn\u00e2\u0080\u0099t\r\nmatter which cell you print in the first two cases, you can always print\r\n.Overall complexity: per testcase.Alternatively, you can check every\r\npossible cell. Iterate over a cell and check all eight possible knight\r\nmoves from it. If none are inside the board, the cell is\r\nisolated.Overall complexity: per testcase.\r\n"
}