{"link": "https://codeforces.com//contest/1574/problem/D", "problemId": "1115677", "problem_idx": "D", "shortId": "1574D", "contest_number": "1574", "problem_submissions": {"F": [129371777, 129390921, 129389731, 129403988, 129393793, 129405865, 129397624, 129402611, 129407592, 129402025, 129406898, 129404634, 129404840, 129396171, 129404379, 129428143, 129709936], "E": [129358674, 129374904, 129374765, 129380449, 129384709, 129384504, 129386221, 129385268, 129386371, 129386001, 129382985, 129391466, 129400354, 129386981, 129377485, 129381385, 129368975, 129386322, 131512763, 129380209, 129375216], "D": [129351289, 129361598, 129356978, 129361351, 129369248, 129359850, 129368999, 129364465, 129359499, 129374264, 129364919, 129372422, 129366912, 129361472, 129361829, 129360363, 129358818, 129366595, 129366262, 129357077], "C": [129345085, 129349632, 129348099, 129350669, 129350365, 129350502, 129357353, 129349080, 129351966, 129349226, 129354359, 129353753, 129347195, 129407614, 129351570, 129352219, 129351381, 129349196, 129351680, 129362666], "B": [129342942, 129343801, 129344237, 129345556, 129343553, 129345572, 129345752, 129344787, 129345774, 129343483, 129344471, 129343826, 129343420, 129410456, 129346117, 129346262, 129343905, 129345607, 129345689, 129346070], "A": [129341973, 129342397, 129341943, 129342408, 129341991, 129342232, 129342087, 129342285, 129343124, 129342143, 129342078, 129341990, 129341904, 129411806, 129343011, 129342282, 129341912, 129342040, 129342183, 129341989]}, "name": "D. The Strongest Build", "statement": "Ivan is playing yet another roguelike computer game. He controls a\r\nsingle hero in the game. The hero has n equipment slots. There is a list\r\nof c_i items for the i-th slot, the j-th of them increases the hero\r\nstrength by a_{i,j}. The items for each slot are pairwise distinct and\r\nare listed in the increasing order of their strength increase. So,\r\na_{i,1} < a_{i,2} <\r\ndots < a_{i,c_i}.For each slot Ivan chooses exactly one item. Let the\r\nchosen item for the i-th slot be the b_i-th item in the corresponding\r\nlist. The sequence of choices [b_1, b_2,\r\ndots, b_n] is called .The strength of a build is the sum of the strength\r\nincreases of the items in it. Some builds are banned from the game.\r\nThere is a list of m pairwise distinct banned builds. It\u2019s guaranteed\r\nthat there\u2019s at least one build that\u2019s not banned.What is the build with\r\nthe maximum strength that is not banned from the game? If there are\r\nmultiple builds with maximum strength, print any of them.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 20.09.2021 17:42:17       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n;\n  cin >> n;\n  vector<vector<int>> a(n);\n  vector<int> c(n);\n  for (int i = 0; i < n; i++) {\n    cin >> c[i];\n    a[i].resize(c[i]);\n    for (int j = 0; j < c[i]; j++) {\n      cin >> a[i][j];\n    }\n  }\n  int m;\n  cin >> m;\n  vector<vector<int>> f(m, vector<int>(n));\n  for (int i = 0; i < m; i++) {\n    for (int j = 0; j < n; j++) {\n      cin >> f[i][j];\n      --f[i][j];\n    }\n  }\n  sort(f.begin(), f.end());\n  set<pair<int, vector<int>>> s;\n  {\n    int sum = 0;\n    vector<int> v(n);\n    for (int i = 0; i < n; i++) {\n      sum += a[i].back();\n      v[i] = c[i] - 1;\n    }\n    s.emplace(sum, v);\n  }\n  while (true) {\n    assert(!s.empty());\n    auto it = prev(s.end());\n    int sum = it->first;\n    vector<int> v = it->second;\n    s.erase(it);\n    auto iter = lower_bound(f.begin(), f.end(), v);\n    if (iter == f.end() || *iter != v) {\n      for (int i = 0; i < n; i++) {\n        if (i > 0) {\n          cout << \" \";\n        }\n        cout << v[i] + 1;\n      }\n      cout << endl;\n      break;\n    }\n    for (int i = n - 1; i >= 0; i--) {\n      if (v[i] > 0) {\n        int new_sum = sum - a[i][v[i]] + a[i][v[i] - 1];\n        v[i] -= 1;\n        s.emplace(new_sum, v);\n        v[i] += 1;\n      }\n      if (v[i] < c[i] - 1) {\n        break;\n      }\n    }\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "brute force", "data structures", "dfs and similar", "graphs", "greedy", "hashing", "implementation"], "dificulty": "2000", "interactive": false}