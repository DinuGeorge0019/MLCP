{
    "link": "https://codeforces.com//contest/797/problem/C",
    "problemId": "103030",
    "problem_idx": "C",
    "shortId": "797C",
    "contest_number": "797",
    "problem_submissions": {
        "F": [
            26392422,
            26393656,
            26389980,
            26393053,
            26392770,
            26393200,
            26401058,
            26400600,
            26393845,
            26538858,
            26399564,
            26404933
        ],
        "E": [
            26384593,
            26386641,
            26387413,
            26384179,
            26390646,
            26385085,
            26384145,
            26385218,
            26385422,
            26383237,
            26385301,
            26385048,
            26387123,
            26383986,
            26385186,
            26383971,
            26385690,
            26386757,
            26387505
        ],
        "D": [
            26383853,
            26385506,
            26386518,
            26386869,
            26388006,
            26386076,
            26386759,
            26387198,
            26384655,
            26384909,
            26400699,
            26386910,
            26386839,
            26385859,
            26386865,
            26387340,
            26385970,
            26387551,
            26388539,
            26386426
        ],
        "C": [
            26382881,
            26383936,
            26385046,
            26385741,
            26385840,
            26383373,
            26384974,
            26383476,
            26383055,
            26382583,
            26383371,
            26383953,
            26383269,
            26383187,
            26384315,
            26382972,
            26384647,
            26385000,
            26382428
        ],
        "B": [
            26382061,
            26382225,
            26383108,
            26384548,
            26383123,
            26382179,
            26382430,
            26382528,
            26381992,
            26382016,
            26382484,
            26382716,
            26382235,
            26382138,
            26382837,
            26382347,
            26382410,
            26382477,
            26381988
        ],
        "A": [
            26381703,
            26381847,
            26382576,
            26383357,
            26382358,
            26381775,
            26381835,
            26381732,
            26381711,
            26381736,
            26381944,
            26381723,
            26381696,
            26381784,
            26381802,
            26381687,
            26381777,
            26381801,
            26381706
        ]
    },
    "name": "C. Minimal string",
    "statement": "Petya recieved a gift of a string with length up to characters for his\r\nbirthday. He took two more empty strings and and decided to play a game.\r\nThis game has two possible moves: Extract the character of and append\r\nwith this character. Extract the character of and append with this\r\ncharacter. Petya wants to get strings and empty and string\r\nlexicographically minimal.You should write a program that will help\r\nPetya win the game.\r\n",
    "solutions": [
        "// In the name of God\n\n#include <iostream>\n#include <algorithm>\n#include <fstream>\n#include <vector>\n#include <deque>\n#include <assert.h>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <stdio.h>\n#include <string.h>\n#include <utility>\n#include <math.h>\n#include <bitset>\n#include <iomanip>\n#include <complex>\n\nusing namespace std;\n\n#define rep(i, a, b) for (int i = (a), i##_end_ = (b); i < i##_end_; ++i)\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mp make_pair\n#define x first\n#define y second\n#define pb push_back\n#define SZ(x) (int((x).size()))\n#define ALL(x) (x).begin(), (x).end()\n\ntemplate<typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }\ntemplate<typename T> inline bool smin(T &a, const T &b)   { return a > b ? a = b : a;    }\ntemplate<typename T> inline bool smax(T &a, const T &b)   { return a < b ? a = b : a;    }\n\ntypedef long long LL;\n\nconst int N = (int) 1e5 + 5, mod = (int) 0;\nint best[N], q[N];\nint main() {\n\tstring s;\n\tcin >> s;\n\tint n = (int) s.size();\n\tbest[n] = 1e9;\n\tfor (int j = n - 1; j >= 0; --j) {\n\t\ts[j] -= 'a';\n\t\tbest[j] = min(best[j + 1], (int) s[j]);\n\t}\n\tstring res = \"\";\n\tint t = 0;\n\tfor (int j = 0; j < n; ++j) {\n\t\tq[t++] = s[j];\n\t\twhile (t > 0 && q[t - 1] <= best[j + 1]) res += char(q[t - 1] + 'a'), --t;\n\t}\n\tcout << res << endl;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "strings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Minimal string.json",
    "editorial_link": "https://codeforces.com//blog/entry/51588",
    "editorial": "On every step you should maintain minimal alphabetic letter in current\r\nstring (this can be done by keeping array of 26 cells with number of\r\ntimes each letter appear in string nd updating it on every step). Letâs\r\ncall string a stack and use its terms.Now you extract letters from one\r\nby one. Put the letter to the top of the stack. Pop letters from the top\r\nof stack and push them to answer while they are less or equal than any\r\nletter left in string . After string becomes empty push all the letters\r\nfrom stack to answer.The answer will be lexicographically minimal. It is\r\nobvious if we consider the case when current top of stack is strictly\r\ngreater than any character from the remaining string , or there is a\r\ncharacter in that is strictly less than current top. If current top is\r\nequal to some character then appending answer with the letter from top\r\nwonât make answer worse.Overall complexity: , where is the length of the\r\nalpabet, in our case.\r\n",
    "hint": []
}