{"link": "https://codeforces.com//contest/1550/problem/E", "problemId": "1045985", "problem_idx": "E", "shortId": "1550E", "contest_number": "1550", "problem_submissions": {"F": [122483395, 122494928, 122494758, 122498831, 122495349, 122507186, 122504855, 122499174, 122495286, 122505655, 122503411, 122504082, 122506733, 122503920, 122507265, 122505173, 122514546, 122521422, 122608494, 122664141], "E": [122476565, 122473503, 122481437, 122485433, 122484524, 122485212, 122477724, 122500057, 122485157, 122486711, 122488337, 122498290, 122489523, 122484119, 122495271, 122476181, 122481232, 122481328, 122483526, 122494342], "D": [122471547, 122486544, 122474791, 122475055, 122481071, 122477408, 122494393, 122479516, 122495901, 122496325, 122494541, 122483595, 122476325, 122488807, 122472450, 122476646, 122472723, 122476521, 122472515], "C": [122458749, 122460413, 122460329, 122460157, 122463960, 122460682, 122465581, 122460735, 122465109, 122500532, 122457985, 122461570, 122463484, 122466793, 122463616, 122461328, 122473999, 122456442, 122457482, 122463020, 122460109, 122461048], "B": [122454763, 122454362, 122455252, 122454378, 122452343, 122454794, 122458968, 122500982, 122454363, 122455298, 122455088, 122454989, 122455874, 122454863, 122466413, 122453075, 122454714, 122455929, 122454807, 122453314], "A": [122451771, 122451821, 122451970, 122451770, 122451715, 122451928, 122452304, 122501407, 122451789, 122452298, 122451870, 122452153, 122452203, 122451998, 122462780, 122451777, 122452058, 122452234, 122451766, 122451752]}, "name": "E. Stringforces", "statement": "You are given a string s of length n. Each character is either one of\r\nthe first k lowercase Latin letters or a question mark.You are asked to\r\nreplace every question mark with one of the first k lowercase Latin\r\nletters in such a way that the following value is maximized.Let f_i be\r\nthe maximum length substring of string s, which consists entirely of the\r\ni-th Latin letter. A substring of a string is a contiguous subsequence\r\nof that string. If the i-th letter doesn\u2019t appear in a string, then f_i\r\nis equal to 0.The value of a string s is the minimum value among f_i for\r\nall i from 1 to k.What is the maximum value the string can have?\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int n, k;\n    std::cin >> n >> k;\n    \n    std::string s;\n    std::cin >> s;\n    \n    int lo = 0, hi = n;\n    \n    while (lo < hi) {\n        int len = (lo + hi + 1) / 2;\n        \n        std::vector f(k, std::vector<int>(n + 2));\n        \n        for (int c = 0; c < k; c++) {\n            f[c][n] = f[c][n + 1] = n + 1;\n            \n            for (int i = n - 1, l = 0; i >= 0; i--) {\n                if (s[i] == '?' || s[i] == 'a' + c) {\n                    l++;\n                } else {\n                    l = 0;\n                }\n                \n                f[c][i] = (l >= len ? i + len : f[c][i + 1]);\n            }\n        }\n        \n        std::vector<int> dp(1 << k, n + 1);\n        dp[0] = 0;\n        for (int s = 0; s < (1 << k); s++) {\n            for (int i = 0; i < k; i++) {\n                if (s >> k & 1) {\n                    continue;\n                }\n                \n                int t = s | 1 << i;\n                dp[t] = std::min(dp[t], f[i][dp[s]]);\n            }\n        }\n        \n        if (dp.back() <= n) {\n            lo = len;\n        } else {\n            hi = len - 1;\n        }\n    }\n    \n    std::cout << lo << \"\\n\";\n    \n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "bitmasks", "brute force", "dp", "strings", "two pointers"], "dificulty": "2500", "interactive": false}