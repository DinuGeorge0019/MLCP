{
    "link": "https://codeforces.com//contest/1117/problem/C",
    "problemId": "300043",
    "problem_idx": "C",
    "shortId": "1117C",
    "contest_number": "1117",
    "problem_submissions": {
        "G": [
            50133387,
            50123254,
            50123975,
            50124239,
            50123132,
            50123974,
            50123215,
            50127013,
            50125132,
            50130140,
            50133285,
            50124682,
            50142168,
            50142000,
            50128625,
            50127307,
            50133494,
            50129719,
            50134469,
            50129830
        ],
        "F": [
            50129894,
            50129949,
            50128458,
            50125468,
            50258283,
            50124925,
            50127988,
            50122434,
            50127178,
            50132498,
            50126909,
            50125577
        ],
        "E": [
            50113506,
            50115627,
            50118164,
            50107209,
            50118889,
            50116932,
            50118288,
            50119948,
            50118689,
            50116057,
            50116780,
            50120258,
            50120803,
            50119739,
            50121927,
            50120709,
            50116907,
            50127759,
            50122643
        ],
        "D": [
            50110620,
            50112367,
            50131628,
            50126652,
            50113412,
            50109860,
            50115490,
            50114987,
            50116012,
            50113616,
            50125192,
            50118574,
            50115262,
            50116431,
            50116297,
            50116049,
            50110665,
            50113350,
            50117624
        ],
        "C": [
            50108198,
            50108891,
            50111125,
            50127915,
            50107557,
            50112815,
            50111363,
            50117842,
            50111074,
            50110415,
            50111200,
            50113692,
            50111129,
            50113480,
            50108576,
            50111462,
            50115486,
            50110963,
            50119614
        ],
        "B": [
            50104160,
            50104529,
            50104672,
            50128597,
            50104068,
            50103950,
            50111786,
            50105649,
            50106152,
            50105125,
            50105851,
            50105634,
            50104517,
            50104965,
            50103901,
            50105704,
            50105385,
            50105318,
            50104942
        ],
        "A": [
            50102635,
            50102746,
            50102713,
            50128246,
            50102816,
            50102612,
            50103360,
            50104051,
            50103578,
            50102668,
            50103665,
            50103717,
            50102845,
            50102752,
            50102665,
            50102783,
            50102642,
            50102966,
            50102721
        ]
    },
    "name": "C. Magic Ship",
    "statement": "You a captain of a ship. Initially you are standing in a point (x_1,\r\ny_1) (obviously, all positions in the sea can be described by cartesian\r\nplane) and you want to travel to a point (x_2, y_2). You know the\r\nweather forecast the string s of length n, consisting only of letters ,\r\n, and . The letter corresponds to a direction of wind. Moreover, the\r\nforecast is periodic, e.g. the first day wind blows to the side s_1, the\r\nsecond day s_2, the n-th day s_n and (n+1)-th day s_1 again and so on.\r\nShip coordinates change the following way: if wind blows the direction ,\r\nthen the ship moves from (x, y) to (x, y + 1); if wind blows the\r\ndirection , then the ship moves from (x, y) to (x, y - 1); if wind blows\r\nthe direction , then the ship moves from (x, y) to (x - 1, y); if wind\r\nblows the direction , then the ship moves from (x, y) to (x + 1, y). The\r\nship can also either go one of the four directions or stay in place each\r\nday. If it goes then it’s exactly 1 unit of distance. Transpositions of\r\nthe ship and the wind add up. If the ship stays in place, then only the\r\ndirection of wind counts. For example, if wind blows the direction and\r\nthe ship moves the direction , then from point (x, y) it will move to\r\nthe point (x - 1, y + 1), and if it goes the direction , then it will\r\nmove to the point (x, y + 2).You task is to determine the minimal number\r\nof days required for the ship to reach the point (x_2, y_2).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef signed long long ll;\n\n#undef _P\n#define _P(...) (void)printf(__VA_ARGS__)\n#define FOR(x,to) for(x=0;x<(to);x++)\n#define FORR(x,arr) for(auto& x:arr)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define ALL(a) (a.begin()),(a.end())\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\n//-------------------------------------------------------\n\nint X,Y;\nint LR[101010],UD[101010];\nint N;\nstring S;\n\nll can(ll step) {\n\tll LR2=LR[N]*(step/N)+LR[step%N];\n\tll UD2=UD[N]*(step/N)+UD[step%N];\n\t\n\treturn (abs(X-LR2)+abs(Y-UD2)<=step);\n}\n\nvoid solve() {\n\tint i,j,k,l,r,x,y; string s;\n\t\n\tcin>>x>>y;\n\tcin>>X>>Y;\n\tX-=x;\n\tY-=y;\n\tcin>>N>>S;\n\tFOR(i,N) {\n\t\tLR[i+1]=LR[i];\n\t\tUD[i+1]=UD[i];\n\t\tif(S[i]=='U') UD[i+1]++;\n\t\tif(S[i]=='D') UD[i+1]--;\n\t\tif(S[i]=='L') LR[i+1]--;\n\t\tif(S[i]=='R') LR[i+1]++;\n\t}\n\t\n\tll ret=(1LL<<50)-1;\n\tif(can(ret)==0) return _P(\"-1\\n\");\n\tfor(i=49;i>=0;i--) if(can(ret-(1LL<<i))) ret-=1LL<<i;\n\tcout<<ret<<endl;\n}\n\n\nint main(int argc,char** argv){\n\tstring s;int i;\n\tif(argc==1) ios::sync_with_stdio(false), cin.tie(0);\n\tFOR(i,argc-1) s+=argv[i+1],s+='\\n'; FOR(i,s.size()) ungetc(s[s.size()-1-i],stdin);\n\tcout.tie(0); solve(); return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Magic Ship.json",
    "editorial_link": "https://codeforces.com//blog/entry/65365",
    "editorial": "Note, that if we can reach the destination in days, so we can reach it\r\nin days, since we can stay in the destination point by moving to the\r\nopposite to the wind direction. So, we can binary search the answer.To\r\ncheck the possibility to reach the destination point in days we should\r\nat first look at the position the wind moves ship to. Now we can\r\ncalculate where we can go: since each day we can move in one of four\r\ndirections or not move at all, we can reach any point with Manhattan\r\ndistance . So we need to check that .To calculate we can note, that\r\nthere were full cycles and extra days. So it can be calculated with time\r\nusing prefix sums.Finally, about borders of binary search: to reach the\r\ndestination point we need to move closer at least by one (it terms of\r\nManhattan distance) from the full cycle of the wind. So, if answer\r\nexists then it doesnât exceed .\r\n",
    "hint": []
}