{"link": "https://codeforces.com//contest/1709/problem/D", "problemId": "1473247", "problem_idx": "D", "shortId": "1709D", "contest_number": "1709", "problem_submissions": {"F": [165168347, 165171155, 165167911, 165174463, 165176163, 165160774, 165168485, 165153508, 165190349, 165187538, 165182010, 165187878, 165188862, 165199087, 165192962, 165196109, 165191946, 165144458, 165186818, 165193512, 165203160], "E": [165159365, 165161441, 165158406, 165162017, 165168742, 165174634, 165187067, 165172843, 165175285, 165185776, 165171787, 165176500, 165174638, 165175948, 165172273, 165158835, 165190131, 165153154, 165197774, 165181829, 165178900], "D": [165150554, 165148981, 165152094, 165156213, 165151693, 165153019, 165151289, 165162605, 165149121, 165155132, 165160454, 165159258, 165152293, 165165679, 165219278, 165218001, 165217824, 165217721, 165217510, 165217230, 165156286, 165159148, 165160000, 165161618, 165152984], "C": [165144629, 165143580, 165141216, 165150836, 165145746, 165145999, 165145473, 165163144, 165144208, 165149116, 165150518, 165148291, 165145172, 165171500, 165146230, 165166415, 165151667, 165148193, 165146642], "B": [165139451, 165137999, 165136858, 165138643, 165140562, 165138703, 165137403, 165156435, 165139221, 165142115, 165142999, 165139377, 165138165, 165141728, 165137879, 165168796, 165142050, 165141198, 165138920], "A": [165135387, 165134436, 165133952, 165134310, 165134821, 165133959, 165133957, 165138163, 165134268, 165134365, 165134868, 165134280, 165133923, 165136754, 165134369, 165170607, 165135087, 165136295, 165134364]}, "name": "D. Rorororobot", "statement": "There is a grid, consisting of n rows and m columns. The rows are\r\nnumbered from 1 to n from bottom to top. The columns are numbered from 1\r\nto m from left to right. The i-th column has the bottom a_i cells\r\nblocked (the cells in rows 1, 2,\r\ndots, a_i), the remaining n - a_i cells are unblocked.A robot is\r\ntravelling across this grid. You can send it commands move up, right,\r\ndown or left. If a robot attempts to move into a blocked cell or outside\r\nthe grid, it explodes.However, the robot is broken it executes each\r\nreceived command k times. So if you tell it to move up, for example, it\r\nwill move up k times (k cells). You can\u2019t send it commands while the\r\nrobot executes the current one.You are asked q queries about the robot.\r\nEach query has a start cell, a finish cell and a value k. Can you send\r\nthe robot an arbitrary number of commands (possibly, zero) so that it\r\nreaches the finish cell from the start cell, given that it executes each\r\ncommand k times?The robot must stop in the finish cell. If it visits the\r\nfinish cell while still executing commands, it doesn\u2019t count.\r\n", "solutions": ["#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n#include <array>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) {fprintf(stderr, __VA_ARGS__);fflush(stderr);}\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int N = 200200;\nconst int LOG = 18;\nint a[N];\nint n, m;\nint sparse[LOG][N];\nint p2[N];\n\nint getMax(int l, int r) {\n\tint k = p2[r - l];\n\treturn max(sparse[k][l], sparse[k][r - (1 << k)]);\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d%d\", &m, &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%d\", &a[i]);\n\t\tsparse[0][i] = a[i];\n\t}\n\tfor (int k = 0; k < LOG - 1; k++) {\n\t\tfor (int i = 0; i + (1 << (k + 1)) <= n; i++)\n\t\t\tsparse[k + 1][i] = max(sparse[k][i], sparse[k][i + (1 << k)]);\n\t}\n\tfor (int i = 2; i < N; i++)\n\t\tp2[i] = p2[i / 2] + 1;\n\tint q;\n\tscanf(\"%d\", &q);\n\twhile(q--) {\n\t\tint x1, y1, x2, y2, k;\n\t\tscanf(\"%d%d%d%d%d\", &y1, &x1, &y2, &x2, &k);\n\t\tif (abs(x1 - x2) % k) {\n\t\t\tprintf(\"NO\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tif (abs(y1 - y2) % k) {\n\t\t\tprintf(\"NO\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tif (x1 > x2) swap(x1, x2);\n\t\tint mx = getMax(x1 - 1, x2);\n\t\tint y = m - (m % k);\n\t\ty += y1 % k;\n\t\twhile(y <= m) y += k;\n\t\ty -= k;\n\t\tif (y <= mx) {\n\t\t\tprintf(\"NO\\n\");\n\t\t} else {\n\t\t\tprintf(\"YES\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "data structures", "greedy", "math"], "dificulty": "1700", "interactive": false}