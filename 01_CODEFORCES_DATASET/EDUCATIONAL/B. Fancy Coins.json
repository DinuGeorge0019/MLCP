{
    "link": "https://codeforces.com//contest/1860/problem/B",
    "problemId": "2169698",
    "problem_idx": "B",
    "shortId": "1860B",
    "contest_number": "1860",
    "problem_submissions": {
        "F": [
            219298549,
            219320447,
            219349019,
            219323121,
            219334429,
            219337442,
            219335056,
            219339341,
            219339231,
            219349246,
            219345811,
            219439688,
            219439045,
            219356857,
            219353864,
            219402976,
            219353456,
            219351823
        ],
        "E": [
            219277150,
            219281408,
            219287269,
            219300383,
            219293770,
            219301781,
            219289069,
            219306188,
            219288291,
            219288789,
            219301050,
            219298191,
            219305638,
            219306388,
            219300992,
            219313680,
            219301529,
            219309490,
            219305863,
            219309540,
            219307800
        ],
        "D": [
            219271388,
            219273923,
            219270716,
            219286342,
            219405254,
            219345669,
            219344552,
            219277413,
            219284438,
            219280247,
            219290826,
            219278202,
            219277998,
            219274616,
            219275328,
            219282484,
            219281832,
            219279471,
            219288325,
            219282155,
            219284217,
            219287012,
            219287888
        ],
        "C": [
            219264168,
            219264568,
            219266116,
            219265339,
            219269044,
            219276912,
            219269876,
            219279690,
            219266598,
            219268637,
            219263040,
            219261658,
            219264629,
            219267625,
            219267964,
            219267177,
            219271968,
            219274243,
            219264405,
            219273316
        ],
        "B": [
            219260635,
            219258799,
            219260447,
            219259349,
            219260950,
            219267717,
            219262012,
            219271581,
            219260726,
            219261008,
            219259442,
            219257734,
            219259759,
            219262401,
            219260169,
            219259084,
            219263649,
            219264522,
            219272480,
            219264690
        ],
        "A": [
            219257237,
            219257029,
            219257674,
            219257720,
            219257171,
            219258923,
            219257078,
            219260398,
            219257258,
            219257446,
            219257236,
            219256961,
            219257126,
            219257819,
            219257229,
            219257120,
            219257449,
            219257142,
            219257016,
            219258968
        ]
    },
    "name": "B. Fancy Coins",
    "statement": "Monocarp is going to make a purchase with cost of exactly m burles.He\r\nhas two types of coins, in the following quantities: coins worth 1\r\nburle: a_1 regular coins and infinitely many fancy coins; coins worth k\r\nburles: a_k regular coins and infinitely many fancy coins. Monocarp\r\nwants to make his purchase in such a way that there’s the total worth of\r\nprovided coins is m. He can use both regular and fancy coins. However,\r\nhe wants to spend as little fancy coins as possible.What’s the smallest\r\ntotal number of fancy coins he can use to make a purchase?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int m, k, a1, ak;\n    std::cin >> m >> k >> a1 >> ak;\n    \n    int t = std::max(0, std::min(m / k, (m - a1 + k - 1) / k));\n    int ans = std::max(0, t - ak) + std::max(0, m - t * k - a1);\n    \n    std::cout << ans << \"\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "greedy",
        "math"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Fancy Coins.json",
    "editorial_link": "https://codeforces.com//blog/entry/119504",
    "editorial": "There are two ways to approach this problem: a mathematical way and an\r\nalgorithmic way.Letâs start by looking at the possible ways to represent\r\nburles with our coins. For example, we could try to use as many coins of\r\nvalue as possible: then, the number of coins of value will be , and the\r\nnumber of coins of value will be .Now suppose itâs not optimal to use\r\nthat many coins of value ; what if itâs better to use more coins of\r\nvalue and fewer coins of value ? Well, we can still start with using\r\ncoins of value and coins of value , and then try to replace one coin of\r\nvalue with coins of value several times (maybe zero).How many times\r\nshould we do this, and when should we stop to get an optimal solution?\r\nWell, firstly, letâs make sure that we have already taken as many\r\nregular coins as possible. Then, if we have at least leftover coins of\r\nvalue which are regular (not fancy), and we have taken at least one\r\nfancy coin of value , itâs better to replace that coin. Itâs easy to see\r\nthat thereâs no need for any replacements if thatâs not the case: if we\r\ndonât have regular coins which are currently unused, then at least one\r\nof the replacement coins will be fancy; and if the coin of value we want\r\nto replace is not fancy, why replacing it at all?So, we could write a\r\nwhile-loop that keeps track how many coins of which types we have taken,\r\nand replaces one fancy coin of value with regular coins of value until\r\nitâs impossible. Unfortunately, this is too slow. But instead of running\r\nthis loop, we can calculate the number of times we make that replacement\r\nin : it is the minimum of the number of regular coins of value we arenât\r\nusing, divided by , and the number of fancy coins of value we are\r\nusing.So, the outline of the solution is the following: start by taking\r\nas many coins of value as possible, and calculate how many coins of\r\nwhich value we have taken; calculate how many regular and fancy coins of\r\nboth types we have taken; calculate how many \"replacements\" (discard one\r\nfancy coin of value , add regular coins of value ) we can make. The\r\nsecond approach also starts with analyzing how many coins of value and\r\nhow many coins of value we can take. The minimum number of coins of\r\nvalue we can take is , and the maximum number of such coins is .Let\r\ndenote the number of fancy coins we use, if we take coins of value .\r\nThis function can easily be calculated because we know how many coins of\r\nboth types we take, if is fixed. We need to find the minimum of this\r\nfunction on .How does behave? The meaning of going from to is just\r\nreplacing coins of value with one coin of value . When we increase ,\r\nobviously, we should try to discard fancy coins of value first, then\r\nregular coins of value (and the number of fancy coins we will discard\r\nwill never increase when we increase ). Similarly, we should try to take\r\nregular coins of value first, then fancy ones (and the number of fancy\r\ncoins we take will never decrease when we increase ). So, the value of\r\ndoes not decrease when increases.All of this means that the minimum\r\nvalue of can be found using ternary search.\r\n",
    "hint": []
}