{
    "link": "https://codeforces.com//contest/1452/problem/F",
    "problemId": "802109",
    "problem_idx": "F",
    "shortId": "1452F",
    "contest_number": "1452",
    "problem_submissions": {
        "F": [
            98942480,
            98939437,
            98940434,
            106494164,
            106494140,
            98942341,
            98945383,
            98935697,
            98927001,
            98944945,
            98934044,
            98976764,
            99270253
        ],
        "E": [
            98926708,
            98926305,
            98923150,
            98930994,
            98926114,
            98927253,
            98926662,
            99001021,
            98943947,
            99042260,
            98926234,
            98930834,
            98943700,
            98921374,
            98925742,
            98930269,
            98929950,
            98918489,
            98928745,
            98929548
        ],
        "D": [
            98906301,
            98909937,
            98915472,
            98909763,
            98919427,
            98912085,
            99000804,
            98903628,
            98909739,
            98911723,
            98911927,
            98913556,
            98901042,
            98908884,
            98907045,
            98910263,
            98910231,
            98913804,
            98909129
        ],
        "C": [
            98899318,
            98901635,
            98905651,
            98903381,
            98906519,
            98900085,
            98896987,
            98906559,
            98901684,
            98905788,
            98906611,
            98898047,
            98901391,
            98899348,
            98900377,
            98902439,
            98902965,
            98898261
        ],
        "B": [
            98897777,
            98898220,
            98901029,
            98900303,
            98904013,
            98898005,
            99000726,
            99000688,
            98978607,
            98898951,
            98904401,
            98905057,
            98908639,
            98904166,
            98896699,
            98898174,
            98897853,
            98902989,
            98899546,
            98900510,
            98903751
        ],
        "A": [
            98895449,
            98895686,
            98896660,
            98896462,
            98897246,
            98895467,
            98895360,
            98896351,
            100779606,
            98895507,
            98904547,
            98896942,
            98895363,
            98895604,
            98895575,
            98895460,
            98903659,
            98895637,
            98896531
        ],
        "G": [
            99251139,
            98943421,
            99550385,
            99358496,
            99358463,
            99358399,
            99296629,
            99296419,
            99053359,
            99052180,
            98944458,
            98945555,
            99287849
        ]
    },
    "name": "F. Divide Powers",
    "statement": "You are given a multiset of powers of two. More precisely, for each i\r\nfrom 0 to n exclusive you have cnt_i elements equal to 2^i.In one\r\noperation, you can choose any one element 2^l > 1 and divide it into two\r\nelements 2^{l - 1}.You should perform q queries. Each query has one of\r\ntwo types: \"1 pos val\" assign cnt_{pos} := val; \"2 x k\" calculate the\r\nminimum number of operations you need to make at least k elements with\r\nvalue lower or equal to 2^x. Note that all queries of the second type\r\ndon\u2019t change the multiset; that is, you just calculate the minimum\r\nnumber of operations, you don\u2019t perform them.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\n\nll C[35];\nll A[35];\nint N, Q;\n\nint main() {\n\tscanf(\"%d%d\", &N, &Q);\n\tfor(int i = 0; i < N; i++) scanf(\"%lld\", &C[i]);\n\twhile(Q--) {\n\t\tint t; scanf(\"%d\", &t);\n\t\tif(t == 1) {\n\t\t\tint p, v; scanf(\"%d%d\", &p, &v);\n\t\t\tC[p] = v;\n\t\t}\n\t\telse {\n\t\t\tint x; ll k; scanf(\"%d%lld\", &x, &k);\n\t\t\tfor(int i = 0; i < N; i++) A[i] = C[i];\n\t\t\tll s = 0;\n\t\t\tfor(int i = 0; i <= x; i++) s += (1LL << i) * C[i];\n\t\t\tll ans = 0;\n\t\t\tif(s < k) {\n\t\t\t\tfor(int i = x + 1; i < N; i++) {\n\t\t\t\t\tif(s + A[i] * (1LL << i) < k) {\n\t\t\t\t\t\ts += A[i] * (1LL << i);\n\t\t\t\t\t\tans += A[i] * ((1LL << i - x) - 1);\n\t\t\t\t\t\tA[x] += A[i] * (1LL << i - x);\n\t\t\t\t\t\tA[i] = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tll b = 1LL << i;\n\t\t\t\t\tll q = (k - s) / b;\n\t\t\t\t\tans += q * ((1LL << i - x) - 1);\n\t\t\t\t\tA[i] -= q;\n\t\t\t\t\tA[x] += q * (1LL << i - x);\n\t\t\t\t\ts += q * b;\n\n\t\t\t\t\tif(s < k) {\n\t\t\t\t\t\tA[i]--;\n\t\t\t\t\t\tfor(int j = i - 1; j > x; j--) A[j] = 1;\n\t\t\t\t\t\tA[x] += 2;\n\t\t\t\t\t\ts += 1LL << x + 1;\n\t\t\t\t\t\tans += i - x;\n\t\t\t\t\t\tif(s >= k) break;\n\t\t\t\t\t\tll lft = k - s;\n\t\t\t\t\t\tll r = lft % (1LL << x + 1);\n\t\t\t\t\t\tif(r) lft += ((1LL << x + 1) - r);\n\n\t\t\t\t\t\t// printf(\"%lld\\n\", lft);\n\t\t\t\t\t\t// printf(\"%lld\\n\", ans);\n\t\t\t\t\t\tfor(int j = i - 1; j > x; j--) {\n\t\t\t\t\t\t\tif(lft >= 1LL << j) {\n\t\t\t\t\t\t\t\tA[j] = 0;\n\t\t\t\t\t\t\t\tA[x] += 1LL << j - x;\n\t\t\t\t\t\t\t\tans += ((1LL << j - x) - 1);\n\t\t\t\t\t\t\t\tlft -= 1LL << j;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts = k;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif(s < k) { puts(\"-1\"); continue; }\n\t\t\t}\n\n\t\t\t// for(int i = 0; i < N; i++) printf(\"%lld \", A[i]); puts(\"\");\n\n\t\t\tll cnt = 0;\n\t\t\tfor(int i = 0; i <= x; i++) cnt += A[i];\n\t\t\tfor(int i = x + 1; i < N; i++) {\n\t\t\t\tif(cnt >= k) break;\n\t\t\t\tll lft = k - cnt;\n\t\t\t\tll b = 1LL << i - x;\n\t\t\t\tif(b * A[i] < lft) {\n\t\t\t\t\tans += A[i] * (b - 1);\n\t\t\t\t\tcnt += b * A[i];\n\t\t\t\t\tA[x] += A[i] * b;\n\t\t\t\t\tA[i] = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tll q = lft / b;\n\t\t\t\tans += q * (b - 1);\n\t\t\t\tcnt += q * b;\n\t\t\t\tA[x] += q * b;\n\t\t\t\tA[i] -= q;\n\t\t\t\tlft -= q * b;\n\t\t\t\t\n\t\t\t\tans += lft; cnt = k;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tprintf(\"%lld\\n\", ans + max(0LL, k - cnt));\n\t\t}\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. Divide Powers.json",
    "editorial_link": "https://codeforces.com//blog/entry/84847",
    "editorial": "Several observations:Generally, we have two types of operations: divide\r\nand either or . If then in one division we\u00e2\u0080\u0099ll get element , so we can\r\njust keep track of the total possible number of these operations as .If\r\nthen if we decide to split whole to -s then we get elements but in\r\noperations, i. e. in one division we\u00e2\u0080\u0099ll get elements. So it\u00e2\u0080\u0099s preferably\r\nto fully split than . Also, the less the more profitable each\r\ndivision.As a result, let\u00e2\u0080\u0099s act greedy: let\u00e2\u0080\u0099s say, we need more elements\r\n. Let\u00e2\u0080\u0099s iterate over in the increasing order. If then let\u00e2\u0080\u0099s fully split\r\nin in operations, decrease , increase a counter of operations and\r\nincrease accordingly. If then the situation becomes complicated. We can\r\neither don\u00e2\u0080\u0099t touch and try to use preserved operations with small if ,\r\nor split in two -s. Now we spent one operation and get two . If then we\r\ndon\u00e2\u0080\u0099t need one of and can split further only one . If then it\u00e2\u0080\u0099s optimal\r\nto fully split one of and proceed further with only one and recalculated\r\n, and . In both cases we can solve optimal splitting of recursively in\r\nthe same manner as . Since in each step we lower then we need to check\r\nonly cases per each query. Note, that we can treat situation () in packs\r\nfor several with equal , so the first part also works in .The resulting\r\ncomplexity is per query.\r\n"
}