{
    "link": "https://codeforces.com//contest/1976/problem/C",
    "problemId": "2672919",
    "problem_idx": "C",
    "shortId": "1976C",
    "contest_number": "1976",
    "problem_submissions": {
        "F": [
            263314410,
            263323534,
            263323690,
            263325512,
            263334653,
            263331007,
            263325411,
            263343899,
            263340351,
            263335929,
            263326828,
            263332991,
            263341073,
            263348258,
            263349127,
            263349457,
            263346381,
            263355969,
            263347175,
            263342030
        ],
        "E": [
            263305882,
            263313991,
            263310881,
            263312246,
            263315063,
            263311135,
            263313445,
            263315175,
            263343942,
            263328216,
            263320417,
            263320641,
            263323277,
            263324951,
            263331673,
            263329104,
            263324699,
            263325555,
            263316314,
            263328040,
            263331822
        ],
        "C": [
            263292519,
            263287752,
            263288751,
            263286876,
            263284054,
            263285532,
            263285507,
            263293215,
            263285305,
            263285884,
            263286170,
            263285744,
            263298002,
            263303206,
            263289650,
            263291396,
            263291844,
            263302664,
            263303154,
            263303039,
            263301515
        ],
        "D": [
            263292311,
            263298587,
            263366307,
            263299064,
            263295271,
            263295241,
            263295262,
            263303840,
            263298130,
            263292787,
            263298290,
            263306115,
            263312088,
            263291555,
            263300847,
            263305912,
            263364926,
            263302707,
            263310976,
            263298729,
            263311543,
            263313366
        ],
        "B": [
            263272017,
            263272271,
            263275878,
            263272612,
            263272889,
            263274173,
            263277739,
            263274170,
            263273861,
            263276359,
            263274099,
            263279892,
            263280435,
            263273730,
            263275861,
            263277331,
            263275586,
            263274544,
            263272648,
            263279232
        ],
        "A": [
            263268782,
            263268834,
            263269741,
            263268999,
            263269168,
            263269203,
            263269867,
            263269889,
            263269156,
            263268775,
            263269596,
            263270510,
            263268758,
            263268826,
            263268756,
            263270814,
            263269912,
            263269509,
            263268983,
            263270469
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129992",
    "editorial": "Let\u00e2\u0080\u0099s naively calculate the answer for the -th candidate. While\r\ncalculating it, let\u00e2\u0080\u0099s store two values: the type of job the -th\r\ncandidate was hired for; the index of the first candidate who was hired\r\nfor a suboptimal role.We can show that this first candidate who was\r\nhired for a suboptimal role is the only possible candidate who can\r\nchange his role if another candidate doesn\u00e2\u0080\u0099t show up. So, for all other\r\ncandidates among the first candidates, their roles are fixed.To prove\r\nthis, we can consider the following cases: if the candidate who doesn\u00e2\u0080\u0099t\r\nshow up has an index or greater, then for all candidates after them,\r\nthere is only one possible job (when we consider that candidate , all\r\npositions on one of the job are already filled); if the index who\r\ndoesn\u00e2\u0080\u0099t show up has index less than , then the candidate will take the\r\nsame job as that candidate has taken, and in any case, all positions of\r\nthe optimal job of the candidate will be filled after we take that\r\ncandidate. Now we can use the -th candidate\u00e2\u0080\u0099s answer to calculate the\r\nanswer for the -th candidate as follows: if and , we can \"move\" the -th\r\ncandidate to the role and the -th candidate to the role , this will\r\nchange the answer by in case of the -th candidate was hired as\r\nprogrammer (similarly for tester); otherwise, we can simply \"move\" the\r\n-th candidate to the role , this will change the answer by in case of\r\nthe -th candidate was hired as programmer (similarly for tester).\r\n",
    "name": "C. Job Interview",
    "statement": "Monocarp is opening his own IT company. He wants to hire n programmers\r\nand m testers. There are n+m+1 candidates, numbered from 1 to n+m+1 in\r\nchronological order of their arriving time. The i-th candidate has\r\nprogramming skill a_i and testing skill b_i (a person\u2019s programming\r\nskill is different from their testing skill). The skill of the team is\r\nthe sum of the programming skills of all candidates hired as\r\nprogrammers, and the sum of the testing skills of all candidates hired\r\nas testers.When a candidate arrives to interview, Monocarp tries to\r\nassign them to the most suitable position for them (if their programming\r\nskill is higher, then he hires them as a programmer, otherwise as a\r\ntester). If all slots for that position are filled, Monocarp assigns\r\nthem to the other position.Your task is, for each candidate, calculate\r\nthe skill of the team if everyone except them comes to interview. Note\r\nthat it means that exactly n+m candidates will arrive, so all n+m\r\npositions in the company will be filled.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\u00a0using i64 = long long;\u00a0void solve() {    int n, m;    std::cin >> n >> m;        const int N = n + m + 1;    std::vector<int> a(N), b(N);    for (int i = 0; i < N; i++) {        std::cin >> a[i];    }    for (int i = 0; i < N; i++) {        std::cin >> b[i];    }        int t = 0;    int x = 0, y = 0;    i64 sum = 0;    while (x < n && y < m) {        if (a[t] > b[t]) {            sum += a[t];            x++;        } else {            sum += b[t];            y++;        }        t++;    }        std::vector<i64> ans(N);    i64 res = sum;    for (int i = t; i < N; i++) {        res += x == n ? b[i] : a[i];    }    for (int i = t; i < N; i++) {        ans[i] = res - (x == n ? b[i] : a[i]);    }    for (int i = 0; i < t; i++) {        if ((x == n) == (a[i] < b[i])) {            ans[i] = res - std::max(a[i], b[i]);        }    }        int ot = t;    int ox = x;    if (x == n) {        x--;    } else {        y--;    }    while (x < n && y < m) {        if (a[t] > b[t]) {            sum += a[t];            x++;        } else {            sum += b[t];            y++;        }        t++;    }    res = sum;    for (int i = t; i < N; i++) {        res += x == n ? b[i] : a[i];    }    for (int i = 0; i < ot; i++) {        if ((ox == n) == (a[i] > b[i])) {            ans[i] = res - std::max(a[i], b[i]);        }    }        for (int i = 0; i < N; i++) {        std::cout << ans[i] << \" \\n\"[i == N - 1];    }}\u00a0int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "implementation",
        "two pointers"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Job Interview.json"
}