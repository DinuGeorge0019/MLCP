{
    "link": "https://codeforces.com//contest/903/problem/D",
    "problemId": "138453",
    "problem_idx": "D",
    "shortId": "903D",
    "contest_number": "903",
    "problem_submissions": {
        "G": [
            33178321,
            33187453,
            33186301,
            33186897,
            33180699,
            33191173
        ],
        "F": [
            33174261,
            33178825,
            33181844,
            33178084,
            33183961,
            33180065,
            33185073,
            33176301,
            33183378,
            33188720,
            33182673,
            33185566,
            33181772,
            33181057,
            33184431,
            33176177
        ],
        "E": [
            33168457,
            33170258,
            33172872,
            33170814,
            33175293,
            33172943,
            33175009,
            33187458,
            33176493,
            33221819,
            33172057,
            33172327,
            33172721,
            33177599,
            33184047,
            33178079,
            33180655
        ],
        "C": [
            33161165,
            33161825,
            33162567,
            33163273,
            33167452,
            33160898,
            33163474,
            33159957,
            33161910,
            33167835,
            33159945,
            33162031,
            33164207,
            33164018,
            33160657,
            33163832,
            33161875
        ],
        "B": [
            33160080,
            33161172,
            33161528,
            33163824,
            33170257,
            33160007,
            33162660,
            33167319,
            33163497,
            33166907,
            33161299,
            33160216,
            33164455,
            33161461,
            33166773,
            33162803,
            33162955
        ],
        "A": [
            33158587,
            33158617,
            33158738,
            33158766,
            33160497,
            33158658,
            33158711,
            33158644,
            33158620,
            33165123,
            33158631,
            33158588,
            33159095,
            33158687,
            33158727,
            33158733
        ],
        "D": [
            33192267,
            78961090,
            33166706,
            33185032,
            33189320,
            33188936,
            33184706,
            33183639,
            33190417
        ]
    },
    "name": "D. Almost Difference",
    "statement": "Letâ€™s denote a function You are given an array consisting of integers.\r\nYou have to calculate the sum of over all pairs such that .\r\n",
    "solutions": [
        "#define _CRT_SECURE_NO_DEPRECATE\n#pragma comment(linker, \"/STACK:167772160000\")\n#include <iostream>\n#include <fstream>\n#include <cstdio>\n#include <stdio.h>\n#include <cstdlib>\n#include <stdlib.h>\n#include <string>\n#include <list>\n#include <fstream>\n#include <algorithm>\n#include <cmath>\n#include <map>\n#include <vector>\n#include <iomanip>\n#include <queue>\n#include <deque>\n#include <set>\n#include <stack>\n#include <sstream>\n#include <assert.h>\n#include <functional>\n#include <climits>\n#include <cstring>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll, ll> pll;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\n//typedef uint64_t ull;\n//typedef std::pair<long double,long double> pdd;\n#define for8(i) for( i = 1; i<=8; i++)\n#define fori(N)          for(int i = 0; i<(N); i++)\n#define forj(N)         for(int j = 0; j<(N); j++)\n#define fork(N)         for(int k = 0; k<(N); k++)\n#define forl(N)         for(int l = 0; l<(N); l++)\n#define ford(N)         for(int d = 0; d<(N); d++)\n#define fori1(N)          for(int i = 1; i<=(N); i++)\n#define forj1(N)         for(int j = 1; j<=(N); j++)\n#define fork1(N)         for(int k = 1; k<=(N); k++)\n#define ford1(N)         for(int d = 1; d<=(N); d++)\n#define PI (2*asin(1))\n#define read(n) scanf(\"%d\", &n);\n#define read2(n, m) scanf(\"%d%d\", &n, &m);\n#define readll(n) scanf(\"%I64d\", &n);\n#define mp make_pair\nmap<ll, ll>totC, c;\nll a[210000];\nint main()\n{\n\tios::sync_with_stdio(false); cin.tie(0);\n#if defined(_DEBUG) || defined(_RELEASE)\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tint n; cin >> n;\n\tfori(n) {\n\t\tcin >> a[i];\n\t\ttotC[a[i]]++;\n\t}\n\tll answer = 0;\n\tunsigned long long pos, neg;\n\tpos = neg = 0;\n\tforj(n) {\n\t\tll i = a[j];\n\t\tll lf = c[i - 1] + c[i] + c[i + 1];\n\t\tll rg = totC[i - 1] + totC[i] + totC[i + 1] - 1 - lf;\n\t\tlf = j - lf;\n\t\trg = n - j - 1 - rg;\n\t\tpos += (unsigned long long)(i*lf);\n\t\tneg += (unsigned long long)(i*rg);\n\t\tc[i]++;\n\t}\n\tif (pos >= neg)cout << pos - neg;\n\telse cout << \"-\" << neg - pos;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "math"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Almost Difference.json",
    "editorial_link": "https://codeforces.com//blog/entry/56330",
    "editorial": "Starting pretty boring this came out as the most fun and controversial\r\nproblem of the contest...Well, here is the basis of the solution. You\r\nmaintain some kind of map/hashmap with amounts each number appeared in\r\narray so far. Processing each number you subtract times (-indexed), add\r\nprefix sum up to -th number, subtract , and and add times. Then update\r\nwith .And now we have to treat numbers greater than long long limits.\r\nObviously, you can use built-in bigints from java/python ot write your\r\nown class with support of addition and printing of such numbers.\r\nHowever, numbers were up to by absolute value. Then you can use long\r\ndouble, its precision is enough for simple multiplication and addition.\r\nYou can also use unsigned long long numbers: one for negative terms and\r\nthe other one for positive terms, in the end you should handle printing\r\nnegative numbers.Overall complexity: .\r\n",
    "hint": []
}