{
    "link": "https://codeforces.com//contest/873/problem/B",
    "problemId": "127820",
    "problem_idx": "B",
    "shortId": "873B",
    "contest_number": "873",
    "problem_submissions": {
        "F": [
            31249155,
            31246074,
            31247917,
            31248578,
            31249388,
            31249158,
            31251415,
            31251584,
            31250733,
            31288783,
            31250579,
            31245985,
            31253356,
            31247757,
            31248728,
            31247477,
            31250335,
            50573188,
            31250325,
            31251280
        ],
        "E": [
            31248134,
            31249919,
            31252439,
            31251022,
            31250865,
            31249737,
            31252775,
            31249136,
            31250580,
            31253627,
            31288769,
            31253029,
            31255710,
            31253949,
            31251510,
            31251487,
            31250360,
            31262356,
            31249482,
            31279947,
            31254652
        ],
        "D": [
            31245980,
            31247767,
            31247101,
            31246043,
            31246748,
            31245415,
            31247268,
            112870619,
            31246541,
            31245811,
            31246941,
            31288779,
            31248218,
            31249255,
            31247717,
            31246658,
            31251512,
            31244912,
            31245095,
            31246576,
            31246214,
            31247900
        ],
        "C": [
            31244661,
            31246346,
            31244654,
            31244959,
            31244457,
            31244670,
            31245105,
            31244159,
            31244863,
            31245509,
            31247509,
            31245175,
            31252048,
            31251951,
            31245641,
            31244103,
            31244492,
            31244705,
            31245349
        ],
        "B": [
            31243795,
            31244797,
            31243640,
            31244221,
            31243588,
            31243630,
            251388248,
            206107056,
            102945786,
            102945751,
            31243439,
            31243368,
            31243788,
            31244097,
            31246401,
            31243794,
            31252944,
            31252443,
            31243336,
            31243339,
            31243565,
            31243646,
            31244189
        ],
        "A": [
            31242945,
            31244304,
            31243017,
            31243228,
            31242934,
            31243184,
            31242993,
            31242977,
            31243012,
            31243412,
            31244065,
            31243098,
            31243193,
            31252560,
            31242943,
            31242939,
            31243039,
            31243390
        ]
    },
    "name": "B. Balanced Substring",
    "statement": "You are given a string consisting only of characters and . A substring\r\nof is a string , and its length equals to . A substring is called if the\r\nnumber of zeroes () equals to the number of ones in this substring.You\r\nhave to determine the length of the longest substring of .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define all(a) (a).begin(), (a).end()\n#define sz(a) (int)(a).size()\n#define pb push_back\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef double ld;\ntypedef pair<ll, ll> pll;\n\nint main() {\n\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\n\t//ifstream cin(\"input.txt\");\n\t//ofstream cout(\"output.txt\");\n\n\tint n;\n\tcin >> n;\n\n\tmap<int, int> mapa;\n\tstring s;\n\tcin >> s;\n\n\tint x = 0, y = 0;\n\tmapa[0] = -1;\n\tint ans = 0;\n\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (s[i] == '0') {\n\t\t\t++x;\n\t\t} else {\n\t\t\t++y;\n\t\t}\n\t\tif (mapa.count(y - x)) {\n\t\t\tans = max(ans, i - mapa[y - x]);\n\t\t} else {\n\t\t\tmapa[y - x] = i;\n\t\t}\t\t\n\t}\n\n\tcout << ans << \"\\n\";\n\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Balanced Substring.json",
    "editorial_link": "https://codeforces.com//blog/entry/55171",
    "editorial": "Let be the number of zeroes and the number of ones on prefix of length ;\r\nalso let (). The interesting property of is that the substring is\r\nbalanced iff . That leads to a solution: for each value of maintain the\r\nminimum where this is obtained (let it be called ), and for each index\r\nin the string update answer with .\r\n"
}