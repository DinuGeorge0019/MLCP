{
    "link": "https://codeforces.com//contest/1073/problem/C",
    "problemId": "243298",
    "problem_idx": "C",
    "shortId": "1073C",
    "contest_number": "1073",
    "problem_submissions": {
        "G": [
            44873257,
            44854949,
            44872747,
            44857777,
            44904113,
            44992378,
            44992266,
            44905426,
            44884903,
            44945894,
            44917741
        ],
        "F": [
            44867029,
            44865010,
            44864483,
            44871287,
            44872814,
            44868847,
            44879071,
            44874774,
            44882300,
            44882274,
            44882259,
            44904164,
            45084744,
            45695799,
            44888299
        ],
        "E": [
            44859477,
            44871290,
            44861403,
            44863217,
            44864294,
            44859185,
            44863995,
            44861353,
            44862909,
            44862761,
            44864156,
            44861997,
            44866321,
            44865560,
            44864610,
            44864622,
            44866506,
            44866536,
            44864718,
            44867428
        ],
        "D": [
            44857129,
            44872779,
            44856075,
            44857988,
            44858337,
            44861164,
            44866799,
            44854399,
            44858649,
            44887677,
            44857825,
            44863255,
            44857894,
            44856716,
            44859464,
            44857349,
            44858547,
            44860520,
            44859062,
            44858058
        ],
        "C": [
            44852935,
            44867793,
            44850047,
            44853493,
            44853830,
            44872109,
            44870370,
            44851223,
            44852821,
            44887759,
            44853381,
            44855264,
            44855099,
            44853761,
            44855656,
            44859785,
            44852765,
            44856270,
            44855283,
            44855046
        ],
        "B": [
            44847780,
            44861886,
            44847247,
            44849026,
            44846682,
            44849066,
            44868560,
            44847702,
            44847526,
            44848456,
            44847355,
            44849516,
            44847583,
            44849338,
            44847283,
            44847620,
            44847641,
            44850429,
            44848272
        ],
        "A": [
            44846309,
            44861253,
            44846364,
            44847286,
            44846147,
            44847332,
            44867659,
            44846213,
            44846204,
            44846510,
            44846224,
            44846724,
            44846207,
            44847114,
            44846296,
            44846271,
            44846181,
            44848595,
            44846401
        ]
    },
    "name": "C. Vasya and Robot",
    "statement": "Vasya has got a robot which is situated on an infinite Cartesian plane,\r\ninitially in the cell (0, 0). Robot can perform the following four kinds\r\nof operations: move from (x, y) to (x, y + 1); move from (x, y) to (x,\r\ny - 1); move from (x, y) to (x - 1, y); move from (x, y) to (x + 1, y).\r\nVasya also has got a sequence of n operations. Vasya wants to modify\r\nthis sequence so after performing it the robot will end up in (x,\r\ny).Vasya wants to change the sequence so the length of changed\r\nsubsegment is minimum possible. This length can be calculated as\r\nfollows: maxID - minID + 1, where maxID is the maximum index of a\r\nchanged operation, and minID is the minimum index of a changed\r\noperation. For example, if Vasya changes to , then the operations with\r\nindices 2, 5 and 7 are changed, so the length of changed subsegment is\r\n7 - 2 + 1 = 6. Another example: if Vasya changes to , then the length of\r\nchanged subsegment is 1. Help Vasya! Tell him the minimum length of\r\nsubsegment that he needs to change so that the robot will go from (0, 0)\r\nto (x, y), or tell him that it\u2019s impossible.\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nbool can(int x, int y, int n) {\n  x = abs(x);\n  y = abs(y);\n  return (x + y) % 2 == n % 2 && x + y <= n;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  string s;\n  cin >> s;\n  int x, y;\n  cin >> x >> y;\n  if (!can(x, y, n)) {\n    cout << \"-1\" << endl;\n    return 0;\n  }\n  int r = n;\n  int l = -1;\n  while (r - l > 1) {\n    int m = (l + r) / 2;\n    int lx = 0;\n    int ly = 0;\n    int rx = 0;\n    int ry = 0;\n    for (int i = m; i < n; i++) {\n      if (s[i] == 'U') ry++;\n      if (s[i] == 'D') ry--;\n      if (s[i] == 'L') rx--;\n      if (s[i] == 'R') rx++;\n    }\n    bool ok = false;\n    for (int i = 0; i + m <= n; i++) {\n      ok |= can(x - lx - rx, y - ly - ry, m);\n      if (s[i] == 'U') ly++;\n      if (s[i] == 'D') ly--;\n      if (s[i] == 'L') lx--;\n      if (s[i] == 'R') lx++;\n      if (i + m < n) {\n        if (s[i+m] == 'U') ly--;\n        if (s[i+m] == 'D') ly++;\n        if (s[i+m] == 'L') lx++;\n        if (s[i+m] == 'R') lx--;\n      }\n    }\n    if (ok) {\n      r = m;\n    } else {\n      l = m;\n    }\n  }\n  cout << r << endl;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "two pointers"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Vasya and Robot.json",
    "editorial_link": "https://codeforces.com/blog/entry/62742",
    "editorial": "Denote . If , then the answer is -1, since the robot will not have the\r\ntime to reach cell in steps. Also, if and have different parity, then\r\nthe answer is also -1, as in one move the robot changes the parity of\r\nthe sum of its coordinates.In all other cases, the answer exists. Let\u00e2\u0080\u0099s\r\nuse binary search to solve this problem. Consider all segments of length\r\n. For a fixed length of the segment , let\u00e2\u0080\u0099s iterate over the position of\r\nthe beginning of the segment . At the same time, we will maintain the\r\ncell that the robot will stop at if it execute all commands, except\r\ncommands with indices . We denote this position as . We also calculate\r\nthe distances from the cell to the cell the value . If there is at least\r\none position of the beginning of the segment for which , then we can\r\nchange the segment of length so that the robot comes to the cell,\r\notherwise it can\u00e2\u0080\u0099t.\r\n"
}