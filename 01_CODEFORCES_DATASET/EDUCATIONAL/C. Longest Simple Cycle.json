{
    "link": "https://codeforces.com//contest/1476/problem/C",
    "problemId": "881704",
    "problem_idx": "C",
    "shortId": "1476C",
    "contest_number": "1476",
    "problem_submissions": {
        "G": [
            105913861,
            105944560,
            105939646,
            105923864,
            105934727,
            105937410,
            105935084
        ],
        "E": [
            105882617,
            105882778,
            105909929,
            105895535,
            105907314,
            105884522,
            105881576,
            105889515,
            105891029,
            105897702,
            105902043,
            105904102,
            105909138,
            105899391,
            105895913,
            105970659,
            105900322,
            105895017,
            105909435,
            105904890
        ],
        "D": [
            105872560,
            105872434,
            105872750,
            105874690,
            105888665,
            105869131,
            105875044,
            105876453,
            105878527,
            105868738,
            105873785,
            105878660,
            105867024,
            105887668,
            105877564,
            105874050,
            105886943,
            105878950,
            105887180
        ],
        "C": [
            105865233,
            105867141,
            105882799,
            105868688,
            105880463,
            105863560,
            105866932,
            105868909,
            105872012,
            105880982,
            105868535,
            105869296,
            105877911,
            105869813,
            105870709,
            105864538,
            105872343,
            105869274,
            105872286
        ],
        "B": [
            105854579,
            105853524,
            105854032,
            105858231,
            105859227,
            105853292,
            105853315,
            105856769,
            105859608,
            105859912,
            105854635,
            105856976,
            105853309,
            105859505,
            105858926,
            105855562,
            105860530,
            105853840,
            105860836
        ],
        "A": [
            105850622,
            105850650,
            105852722,
            105850820,
            105851490,
            105850582,
            105850685,
            105850741,
            105851248,
            105853267,
            105850773,
            105851638,
            105850636,
            105851230,
            105852640,
            105850665,
            105852244,
            105850634,
            105851161
        ],
        "F": [
            131696052,
            106171367
        ]
    },
    "name": "C. Longest Simple Cycle",
    "statement": "You have n chains, the i-th chain consists of c_i vertices. Vertices in\r\neach chain are numbered independently from 1 to c_i along the chain. In\r\nother words, the i-th chain is the undirected graph with c_i vertices\r\nand (c_i - 1) edges connecting the j-th and the (j + 1)-th vertices for\r\neach 1\r\nle j < c_i.Now you decided to unite chains in one graph in the following\r\nway: the first chain is skipped; the 1-st vertex of the i-th chain is\r\nconnected by an edge with the a_i-th vertex of the (i - 1)-th chain; the\r\nlast (c_i-th) vertex of the i-th chain is connected by an edge with the\r\nb_i-th vertex of the (i - 1)-th chain. Calculate the length of the\r\nlongest simple cycle in the resulting graph.A is a chain where the first\r\nand last vertices are connected as well. If you travel along the simple\r\ncycle, each vertex of this cycle will be visited exactly once.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n//dengyaotriangle!\n\nint main(){\n    ios::sync_with_stdio(0);cin.tie(0);\n    int t;\n    cin>>t;\n    while(t--){\n        int n;\n        cin>>n;\n        vector<int> a(n),b(n),c(n);\n        for(int i=0;i<n;i++)cin>>c[i];\n        for(int i=0;i<n;i++)cin>>a[i];\n        for(int i=0;i<n;i++)cin>>b[i];\n        long long cl=0;\n        long long ans=0;\n        for(int i=1;i<n;i++){\n            if(a[i]==b[i]){\n                cl=2;\n            }else{\n                if(cl==0)cl=abs(a[i]-b[i])+2;\n                else cl=max(cl+2+c[i-1]-1-abs(a[i]-b[i]),abs(a[i]-b[i])+2ll);\n            }\n            ans=max(ans,cl+c[i]-1);\n        }\n        cout<<ans<<'\\n';\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "graphs",
        "greedy"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Longest Simple Cycle.json",
    "editorial_link": "https://codeforces.com//blog/entry/87356",
    "editorial": "Suppose, weâve built the graph and chosen any simple cycle. Due to the\r\nnature of the graph, any simple cycle right part is part of one of the\r\nchains. So, letâs for each chain calculate the longest simple path with\r\nits right part on this chain and denote it as .Obviously, . Now, letâs\r\nlook at chain . If we go along the cycle in both ways, we will step to\r\nvertices and of the previous chain. If then we closed cycle and itâs the\r\nonly possible cycle, so .Otherwise, we can either go from and and meet\r\neach other closing the cycle with part of the -th chain between -th and\r\n-th vertices this part has edges and our cycle will have length .But if\r\nwe decide to go in different ways, then we will meet the first and the\r\nlast vertices of the -th chain. After that, weâll go to the -th and the\r\n-th vertices of -th chain and will make almost the same choice.But,\r\ninstead of recurrently solving the same problem, we can note that, in\r\nfact, we took a cycle that ends at the -th chain, erased the part\r\nbetween vertices and , and merged it with our -th chain part, so the\r\nlength of this merged cycle will be equal to . Since we maximize we just\r\nchoose, what part: or is longer and take it.As a result, we can iterate\r\nfrom left to right, calculate all and print the maximum among them.\r\n",
    "hint": []
}