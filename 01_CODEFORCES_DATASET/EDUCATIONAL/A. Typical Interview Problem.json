{
    "link": "https://codeforces.com//contest/1796/problem/A",
    "problemId": "1802545",
    "problem_idx": "A",
    "shortId": "1796A",
    "contest_number": "1796",
    "problem_submissions": {
        "F": [
            195363403,
            195358131,
            195479952,
            195352672,
            197311670,
            196155422,
            195754330
        ],
        "E": [
            195322604,
            195319205,
            195326482,
            195321452,
            195327641,
            195860691,
            195453420,
            195453193,
            195322745,
            195328001,
            195331101,
            195332636,
            195326730,
            195325672,
            195330089,
            195730772,
            195730423,
            195326388,
            195341037,
            195326008,
            195331716,
            195328756,
            195331573,
            195338613,
            195329663
        ],
        "D": [
            195301353,
            195304722,
            195305253,
            195303622,
            195309683,
            195303260,
            195314948,
            195309431,
            195312674,
            195316263,
            195314478,
            195311060,
            195310198,
            195308650,
            195308315,
            195293456,
            195319263,
            195305260,
            195544976,
            195315681
        ],
        "C": [
            195293384,
            195295362,
            195292646,
            195293592,
            195298098,
            195294172,
            195296742,
            195299256,
            195301143,
            195303080,
            195303361,
            195304837,
            195724689,
            195723906,
            195300890,
            195288215,
            195295041,
            195302705,
            195306906,
            195294076,
            195307764
        ],
        "B": [
            195288248,
            195289700,
            195287789,
            195287682,
            195290336,
            195286518,
            195290220,
            195290123,
            195290068,
            195287181,
            195292039,
            195293913,
            195289326,
            195284427,
            195288804,
            195305536,
            195289798,
            195287403,
            195298773
        ],
        "A": [
            195283882,
            195284135,
            195283927,
            195289942,
            195285318,
            195283838,
            195283735,
            195283820,
            195283931,
            195283631,
            195283664,
            195285369,
            195285859,
            195283473,
            195283857,
            195283713,
            195284138,
            195283860,
            195284027
        ]
    },
    "name": "A. Typical Interview Problem",
    "statement": "The FB-string is formed as follows. Initially, it is empty. We go\r\nthrough all positive integers, starting from 1, in ascending order, and\r\ndo the following for each integer: if the current integer is divisible\r\nby 3, append to the end of the FB-string; if the current integer is\r\ndivisible by 5, append to the end of the FB-string. Note that if an\r\ninteger is divisible by both 3 and 5, we append , and then , not in the\r\nopposite order.The first 10 characters of the FB-string are : the first\r\ncomes from the integer 3, the next character () comes from 5, the next\r\ncomes from the integer 6, and so on. It’s easy to see that this string\r\nis infinitely long. Let f_i be the i-th character of FB-string; so, f_1\r\nis , f_2 is , f_3 is , f_4 is , and so on.You are given a string s,\r\nconsisting of characters and/or . You have to determine whether it is a\r\nsubstring (contiguous subsequence) of the FB-string. In other words,\r\ndetermine if it is possible to choose two integers l and r (1\r\nle l\r\nle r) so that the string f_l f_{l+1} f_{l+2}\r\ndots f_r is exactly s.For example: is a substring of the FB-string: if\r\nwe pick l = 3 and r = 5, the string f_3 f_4 f_5 is exactly ; is a\r\nsubstring of the FB-string: if we pick l = 2 and r = 9, the string f_2\r\nf_3 f_4\r\ndots f_9 is exactly ; is not a substring of the FB-string.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define mod 998244353\n#define int long long\nusing namespace std;\nint n,a[2000005];\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint T;\n\tcin >> T;\n\t\t\tstring t;\n\t\t\tfor(int j=1;j<=3000;j++)\n\t\t\t{\n\t\t\t\tif(j%3==0) t+='F';\n\t\t\t\tif(j%5==0) t+='B';\n\t\t\t}\n\twhile(T--)\n\t{\n\t\tint n;\n\t\tcin >> n;\n\t\tstring s;\n\t\tcin >> s;\n\t\tint flag=0;\n\t\tfor(int i=0;i<=100;i++)\n\t\t{\n\t\t\tif(t.substr(i,s.size())==s)\n\t\t\t{\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag) cout << \"YES\\n\";\n\t\telse cout << \"NO\\n\";\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Typical Interview Problem.json",
    "editorial_link": "https://codeforces.com//blog/entry/113408",
    "editorial": "Itâs easy to see that the FB-string repeats every characters: after\r\nprocessing every numbers, we will get the same remainders modulo and as\r\nnumbers ago, and when we process consecutive numbers, we get characters.\r\nSo, .This means that if we want to find a substring no longer than\r\ncharacters in the FB-string, we donât need to consider more than first\r\ncharacters of the FB-string: the substring of length starting with the\r\n-th character ends with the -th character, and we donât need to consider\r\nsubstrings starting on positions greater than .So, the solution is to\r\ngenerate at least first characters of the FB-string, and then check if\r\nthe substring occurs in the generated string using a standard function\r\nlike .\r\n",
    "hint": []
}