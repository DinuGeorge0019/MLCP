{
    "link": "https://codeforces.com//contest/893/problem/B",
    "problemId": "135512",
    "problem_idx": "B",
    "shortId": "893B",
    "contest_number": "893",
    "problem_submissions": {
        "D": [
            32587846,
            32584166,
            32584580,
            32587450,
            32584069,
            32583060,
            32588853,
            32589858,
            32585182,
            32590659,
            32586485,
            32589315,
            32591783,
            32597332,
            32598552,
            32591926,
            32591314,
            32591378,
            32595633,
            32593677
        ],
        "F": [
            32587029,
            32588564,
            32633440,
            32633411,
            32600577,
            32591730,
            32591080,
            32593455,
            32595872,
            32596856,
            32595308,
            32598298,
            32597321,
            32596161,
            32595895,
            32587274,
            32617128,
            32590562,
            32596152,
            32592069,
            32595471,
            32597133,
            32631856,
            32597548,
            32597501,
            32596510,
            32594100,
            32588288
        ],
        "E": [
            32582663,
            32585881,
            32587039,
            32583891,
            32589038,
            32590654,
            32590403,
            32589458,
            32590147,
            32585649,
            32586443,
            32598380,
            32591576,
            32589935,
            32595163,
            32587306,
            32598292,
            32632299,
            32631834,
            32597903,
            32592050,
            32595887
        ],
        "C": [
            32580222,
            32581731,
            32579674,
            32581061,
            32582009,
            32580473,
            32581974,
            32581755,
            32582911,
            32582779,
            32581570,
            32581398,
            32580526,
            32582157,
            32582935,
            32581251,
            32583782,
            32581776,
            32581603,
            32588827
        ],
        "B": [
            32579038,
            32579297,
            32579032,
            32580119,
            32580362,
            32579253,
            32579828,
            32580254,
            32581551,
            32581638,
            32580169,
            32580423,
            32579209,
            32580529,
            32581182,
            32578812,
            32582642,
            32580448,
            32580061,
            32587514
        ],
        "A": [
            32578761,
            32578814,
            32578771,
            32578835,
            32579027,
            32578799,
            32578920,
            32578996,
            32579962,
            32580679,
            32579419,
            32579406,
            32579609,
            32579237,
            32580280,
            32579180,
            32578788,
            32579540,
            32578923,
            32586994
        ]
    },
    "name": "B. Beautiful Divisors",
    "statement": "Recently Luba learned about a special kind of numbers that she calls\r\nnumbers. The number is called iff its binary representation consists of\r\nconsecutive ones, and then consecutive zeroes.Some examples of beautiful\r\nnumbers: (); (); (); (). More formally, the number is beautiful iff\r\nthere exists some positive integer such that the number is equal to\r\n.Luba has got an integer number , and she wants to find its greatest\r\nbeautiful divisor. Help her to find it!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define itn int\n#define all(x) (x).begin(), (x).end()\n#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())\n\n#ifdef ONLINE_JUDGE\n\tinline int pidorand() {\n\t\treturn ((rand() & 32767) << 15) | (rand() & 32767);\n\t}\n\t#define rand pidorand\n#endif\t// ONLINE_JUDGE\n\n#ifdef OLBOEB\n\t#define return std::cerr << __FUNCTION__ << \"\\n\"; return\n#endif  // OLBOEB\n\nusing namespace std;\n\ninline int nxt() {\n\tint x;\n\tscanf(\"%d\", &x);\n\treturn x;\n}\n\nbool isWonderful(int d) {\n\tint l = __builtin_ctz(d);\n\treturn d == ((2 << l) - 1) << l;\n}\n\nint main() {\n\tint n = nxt();\n\tint d = 1;\n\tfor (int i = 2; i <= n; ++i) {\n\t\tif (n % i || !isWonderful(i)) {\n\t\t\tcontinue;\n\t\t}\n\t\td = i;\n\t}\n\tprintf(\"%d\\n\", d);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Beautiful Divisors.json",
    "editorial_link": "https://codeforces.com//blog/entry/55989",
    "editorial": "Letâs notice that there are only beautiful numbers less than . Generate\r\nthem all and select the greatest one which is also divisor of .Overall\r\ncomplexity: .\r\n",
    "hint": []
}