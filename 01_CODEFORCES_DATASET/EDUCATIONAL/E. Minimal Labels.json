{"link": "https://codeforces.com//contest/825/problem/E", "problemId": "114548", "problem_idx": "E", "shortId": "825E", "contest_number": "825", "problem_submissions": {"G": [28611826, 28611356, 28617070, 28630000, 28611377, 28668357, 28644356, 28617410, 28616887, 115447701, 28617449], "F": [28607801, 28609631, 28607347, 28609116, 28609094, 28607614, 28608923, 28607754, 28610528, 28609319, 28614043, 28612882, 28614726, 28613035, 28614128, 28617246, 28608834], "E": [28606236, 28612183, 28603943, 28604761, 28605629, 28605699, 28621023, 28620710, 28614410, 28606910, 28606445, 28612588, 28606404, 28608319, 28610978, 28607253, 28602716, 28604390, 28605864], "D": [28601870, 28604440, 28602315, 28603224, 28602271, 28603578, 28602162, 28602307, 28605123, 28604422, 28602824, 28605475, 28605112, 28601966, 28604848, 28601067, 28602879, 28603271, 28602582], "C": [28600566, 28604558, 28600573, 28601511, 28601329, 28600992, 28600584, 28601117, 28602961, 28602487, 28601481, 28603635, 28602536, 28600048, 28601839, 28599960, 28601178, 28600725, 28600385], "B": [28599824, 28602822, 28599867, 28599843, 28600338, 28600036, 28599560, 28600486, 28599738, 28600276, 28600463, 28602528, 28601519, 28610253, 28599911, 28599338, 28600292, 28600011, 28599745], "A": [28598954, 28602676, 28599093, 28599010, 28599148, 28598936, 28599534, 28599292, 28599020, 28598945, 28599332, 28601537, 28599412, 28598882, 28598949, 28598917, 28599099, 28599150, 28598894]}, "name": "E. Minimal Labels", "statement": "You are given a directed acyclic graph with vertices and edges. There\r\nare no self-loops or multiple edges between any pair of vertices. Graph\r\ncan be disconnected.You should assign labels to all vertices in such a\r\nway that: Labels form a valid permutation of length an integer sequence\r\nsuch that each integer from to appears exactly once in it. If there\r\nexists an edge from vertex to vertex then should be smaller than .\r\nPermutation should be lexicographically smallest among all suitable.\r\nFind such sequence of labels to satisfy all the conditions.\r\n", "solutions": ["#ifdef __GNUC__\n#pragma GCC target(\"sse4,avx\")\n#endif\n#include <immintrin.h>\n#include <algorithm>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <cstdint>\n#include <numeric>\n#include <queue>\n\nvoid run(std::istream &in, std::ostream &out) {\n    int n, m;\n    in >> n >> m;\n    std::vector<std::vector<int>> graph(n);\n    std::vector<int> deg(n);\n    for (int i = 0; i < m; i++) {\n        int from, to;\n        in >> from >> to;\n        from--;to--;\n        deg[from]++;\n        graph[to].push_back(from);\n    }\n    std::vector<int> answer(n);\n    std::priority_queue<int, std::vector<int>, std::less<int>> queue;\n    for (int i = 0; i < n; i++) {\n        if (deg[i] == 0) {\n            queue.push(i);\n        }\n    }\n    for (int i = n; i >= 1; i--) {\n        int v = queue.top();\n        queue.pop();\n        for (int nv : graph[v]) {\n            deg[nv]--;\n            if (deg[nv] == 0) {\n                queue.push(nv);\n            }\n        }\n        answer[v] = i;\n    }\n    for (int i = 0; i < n; i++) {\n        out << answer[i] << \" \";\n    }\n    out << std::endl;\n}\n\nint main() {\n  std::cin.sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  run(std::cin, std::cout);\n  return 0;\n}"], "input": "", "output": "", "tags": ["data structures", "dfs and similar", "graphs", "greedy"], "dificulty": "2300", "interactive": false}