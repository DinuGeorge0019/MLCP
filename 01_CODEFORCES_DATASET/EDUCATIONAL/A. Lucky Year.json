{
    "link": "https://codeforces.com//contest/808/problem/A",
    "problemId": "106397",
    "problem_idx": "A",
    "shortId": "808A",
    "contest_number": "808",
    "problem_submissions": {
        "E": [
            27137197,
            27134808,
            27134054,
            27132549,
            27131870,
            27132812,
            27138350,
            27133736,
            27131963,
            27140761,
            27135118,
            27134983,
            27132973,
            27138881,
            27134671,
            27261177,
            27134231
        ],
        "G": [
            27135167,
            27130618,
            27132801,
            27169611,
            27134965,
            27137204,
            27160747,
            27136267,
            27135740,
            27136906,
            27138137,
            27159188,
            27140353,
            27136012,
            27136390,
            27133992,
            27143226,
            27141294
        ],
        "F": [
            27133833,
            27138112,
            27177906,
            27136765,
            27164228,
            27142537,
            27133888,
            27166317,
            27145346,
            27277981,
            27273337,
            27267183,
            27141042,
            27133326,
            27139365,
            27141028,
            27139853,
            27137233,
            27203781,
            27164790,
            27139352
        ],
        "D": [
            27128503,
            27127219,
            27129431,
            27127572,
            27126819,
            27126652,
            27126413,
            27131013,
            27128036,
            27144856,
            27149028,
            27130439,
            27159164,
            27158696,
            27130609,
            27129280,
            31052395,
            27170361,
            27127426,
            27204067
        ],
        "C": [
            27127241,
            27126114,
            27126407,
            27126117,
            27125155,
            27125545,
            27125616,
            27128374,
            27126308,
            27126044,
            27126773,
            27128917,
            27129043,
            27127777,
            27126008,
            27126821,
            27129336
        ],
        "B": [
            27125488,
            27124939,
            27125624,
            27125294,
            27125238,
            27124591,
            27125024,
            27127379,
            27125310,
            27124893,
            27125455,
            27127633,
            27127827,
            27131416,
            27125036,
            27126129,
            27163815,
            27127143
        ],
        "A": [
            27124684,
            27124405,
            27124596,
            27124469,
            27124323,
            27124317,
            27124491,
            27126511,
            27124424,
            27124395,
            27124442,
            27124926,
            27125033,
            27130660,
            27124528,
            27124407,
            27163707,
            27124848
        ]
    },
    "name": "A. Lucky Year",
    "statement": "Apart from having lots of holidays throughout the year, residents of\r\nBerland also have whole years. Year is considered if it has no more than\r\nnon-zero digit in its number. So years 100, 40000, 5 are and 12, 3001\r\nand 12345 are not.You are given current year in Berland. Your task is to\r\nfind how long will residents of Berland wait till the next year.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<algorithm>\nlong long x,z=1,s[1007];\nint p=0;\nint main(){\n\tfor(int i=1;i<=10;++i){\n\t\tfor(int j=1;j<=9;++j)s[p++]=j*z;\n\t\tz*=10;\n\t}\n\tscanf(\"%I64d\",&x);\n\tprintf(\"%I64d\",*std::upper_bound(s,s+p,x)-x);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Lucky Year.json",
    "editorial_link": "https://codeforces.com//blog/entry/52010",
    "editorial": "Notice that the next lucky year always looks like (first digit of the\r\ncurrent + 1) 10^(number of digits of the current - 1). It holds also for\r\nnumbers starting with 9, it will be 10 10^(number of digits - 1). The\r\nanswer is the difference between the next lucky year and current year.\r\n"
}