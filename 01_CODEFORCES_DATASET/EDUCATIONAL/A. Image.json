{
    "link": "https://codeforces.com//contest/1721/problem/A",
    "problemId": "1521724",
    "problem_idx": "A",
    "shortId": "1721A",
    "contest_number": "1721",
    "problem_submissions": {
        "F": [
            169847425,
            169855093,
            169874051,
            169859751,
            169871554,
            169869426,
            169892039,
            169866057,
            169866260,
            169879985,
            169882444,
            169880200,
            169868972,
            169943924,
            169887978,
            169882264,
            169879150,
            169868978,
            169868554,
            169884451,
            169886386,
            169884169,
            169836583,
            169890280,
            169889729
        ],
        "E": [
            169825445,
            169831576,
            169846355,
            169845815,
            169845247,
            169849940,
            170071212,
            169840961,
            169843652,
            169842409,
            169855809,
            169853200,
            169849055,
            169861077,
            169848556,
            169841458,
            169835951,
            169859126,
            169853059,
            169861299,
            169890819,
            169860030,
            169851763,
            169839234
        ],
        "D": [
            169816642,
            169857780,
            169827464,
            169828353,
            169825938,
            169823055,
            169827534,
            169839208,
            169826501,
            169831272,
            169830277,
            169840516,
            169830590,
            169829045,
            169820762,
            169829319,
            169841817,
            169849956,
            169828079,
            169855346,
            169832685
        ],
        "C": [
            169812006,
            169821873,
            169865515,
            169815093,
            169818535,
            169828842,
            169823304,
            169816953,
            169821336,
            169818460,
            169821914,
            169817547,
            169822314,
            169825383,
            169842253,
            169820059,
            169823503,
            169835000,
            169824388,
            169861925,
            169815457
        ],
        "B": [
            169804991,
            169810857,
            169806854,
            169811441,
            169813569,
            169810575,
            169808902,
            169808903,
            169811401,
            169810906,
            169807229,
            169812143,
            169813395,
            169807352,
            169812235,
            169815520,
            169825227,
            169814779,
            169864673,
            169808536
        ],
        "A": [
            169804030,
            169804283,
            169861742,
            169804044,
            169806500,
            169805484,
            169806996,
            169804568,
            169805103,
            169805093,
            169804586,
            169804045,
            169804642,
            169805849,
            169804015,
            169804388,
            169808577,
            169817992,
            169808806,
            169866242,
            169804342
        ]
    },
    "name": "A. Image",
    "statement": "You have an image file of size 2\r\ntimes 2, consisting of 4 pixels. Each pixel can have one of 26 different\r\ncolors, denoted by lowercase Latin letters.You want to recolor some of\r\nthe pixels of the image . In one move, you can choose pixels and paint\r\nthem into some other color .What is the minimum number of moves you have\r\nto make in order to fulfill your goal?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    std::set<char> s;\n    for (int i = 0; i < 4; i++) {\n        char c;\n        std::cin >> c;\n        s.insert(c);\n    }\n    std::cout << s.size() - 1 << \"\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Image.json",
    "editorial_link": "https://codeforces.com//blog/entry/106416",
    "editorial": "There are some solutions based on case analysis, but in my opinion, the\r\nmost elegant one is the following:Letâs pick a color with the maximum\r\npossible number of pixels and repaint all other pixels into it. We will\r\ntry to pick all pixels of some other color and repaint them in one\r\noperation, and we can ignore the constraint that we can repaint no more\r\nthan pixels, since we will never need to repaint or pixels in one\r\noperation. So, the number of operations is just the number of colors\r\nother than the one we chosen, or just , where is the number of different\r\ncolors in the image. To calculate this, we can use a set or an array of\r\nsize , where we mark which colors are present.\r\n",
    "hint": []
}