{"link": "https://codeforces.com//contest/710/problem/F", "problemId": "68764", "problem_idx": "F", "shortId": "710F", "contest_number": "710", "problem_submissions": {"E": [20054996, 20055960, 20050515, 20056207, 20062379, 20050639, 20060515, 27538320, 24141101, 20058483, 20061563, 20063242, 20056323, 20059072, 20054898, 20054597, 20052086, 20056820, 20054542, 36740748, 20055879], "C": [20054051, 20051373, 20056438, 20051555, 20054552, 20057101, 20058774, 20058437, 20052547, 20053723, 20053869, 20053250, 31838188, 20053265, 20052921, 20048285, 20051208, 20051131, 20052481], "D": [20051723, 20054925, 20102628, 20080042, 20058096, 20227651, 20063470, 20057421, 20073897, 20058831, 20063211, 20063051, 20065659, 20073500], "B": [20047805, 20048112, 20047656, 20048116, 20049100, 20050209, 20048553, 20053733, 20048382, 23338455, 23338445, 23338229, 23337441, 23337163, 20047912, 20048941, 20047671, 20047834, 20048990, 20047586, 20047900, 20049325, 20050272], "A": [20047538, 20047664, 20047537, 20047609, 20048066, 20048101, 20047871, 20049535, 20047569, 20047558, 20047774, 20047559, 20048643, 20047690, 20047542, 20047577, 20047828, 20048745], "F": [20058436, 20060159, 27715475, 27715435, 27715423, 27715408, 27715385, 27715362, 27715335, 27714560, 27714385, 20065369, 20065327, 20065292, 20065031, 20056674, 20065676, 20065486, 20065406, 20065347, 20065268, 20061631, 31301760, 42656662, 20137188]}, "name": "F. String Set Queries", "statement": "You should process queries over a set of strings. Each query is one of\r\nthree kinds: Add a string to the set . It is guaranteed that the string\r\nwas not added before. Delete a string from the set . It is guaranteed\r\nthat the string is in the set . For the given string find the number of\r\noccurrences of the strings from the set . If some string from has\r\nseveral occurrences in you should count all of them. Note that you\r\nshould solve the problem in mode. It means that you can\u2019t read the whole\r\ninput at once. You can read each query only after writing the answer for\r\nthe last query of the third type. Use functions in and in languages\r\nafter each writing in your program.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 300010;\n\nconst int MAGIC = 500;\n\nconst int LONGS = N / MAGIC + 10;\n\nchar foo[N];\n\nstring s[LONGS]; \nint cost[LONGS];\n\nint a[N][29];\nint value[N];\nint p[N];\n\nint main() {\n  int tt;\n  scanf(\"%d\", &tt);\n  int n = 1;\n  int cnt = 0;\n  while (tt--) {\n    int type;\n    scanf(\"%d %s\", &type, foo);\n    int len = strlen(foo);\n    if (type == 1 || type == 2) {\n      if (len <= MAGIC) {\n        int t = 1;\n        for (int j = 0; j < len; j++) {\n          int c = foo[j] - 'a';\n          if (a[t][c] == 0) {\n            a[t][c] = ++n;\n          }\n          t = a[t][c];\n        }\n        value[t] += 3 - 2 * type;\n      } else {\n        s[cnt] = \"\";\n        for (int j = 0; j < len; j++) {\n          s[cnt] += foo[j];\n        }\n        s[cnt] += \"{\";\n        cost[cnt] = 3 - 2 * type;\n        cnt++;\n      }\n    } else {\n      long long ans = 0;\n      for (int j = 0; j < len; j++) {\n        int t = 1;\n        for (int k = j; k < len; k++) {\n          int c = foo[k] - 'a';\n          if (a[t][c] == 0) {\n            break;\n          }\n          t = a[t][c];\n          ans += value[t];\n        }\n      }\n      for (int id = 0; id < cnt; id++) {\n        int long_len = s[id].length();\n        long_len--;\n        if (long_len > len) {\n          continue;\n        }\n        int k = 0;\n        p[1] = 0;\n        for (int i = 2; i <= long_len; i++) {\n          while (k > 0 && s[id][i - 1] != s[id][k]) {\n            k = p[k];\n          }\n          if (s[id][i - 1] == s[id][k]) {\n            k++;\n          }\n          p[i] = k;\n        }\n        k = 0;\n        for (int i = 1; i <= len; i++) {\n          while (k > 0 && foo[i - 1] != s[id][k]) {\n            k = p[k];\n          }\n          if (foo[i - 1] == s[id][k]) {\n            k++;\n          }\n          if (k == long_len) {\n            ans += cost[id];\n          }\n        }\n      }\n      cout << ans << endl;\n    }\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "data structures", "hashing", "interactive", "string suffix structures", "strings"], "dificulty": "2400", "interactive": false}