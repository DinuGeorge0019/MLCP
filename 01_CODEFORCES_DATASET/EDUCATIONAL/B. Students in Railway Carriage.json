{
    "link": "https://codeforces.com//contest/962/problem/B",
    "problemId": "173203",
    "problem_idx": "B",
    "shortId": "962B",
    "contest_number": "962",
    "problem_submissions": {
        "G": [
            37172159,
            83380479,
            37224207
        ],
        "F": [
            37161607,
            37156639,
            37157368,
            37160858,
            37168373,
            37163241,
            37162662,
            37165808,
            37164621,
            37171463,
            37169577,
            37166104,
            37163342,
            37173342,
            37165989,
            37161726,
            37173135,
            37178620
        ],
        "E": [
            37153541,
            37151735,
            37153606,
            37152970,
            37152043,
            37166043,
            37160792,
            37170495,
            37160553,
            37168665,
            37158596,
            37163761,
            37162634,
            37170755,
            37158513,
            37157137,
            37165223,
            37172878,
            37170948,
            37159083,
            37152437
        ],
        "D": [
            37152390,
            37151214,
            37151627,
            37153937,
            37156427,
            37155745,
            37155575,
            37154679,
            37154153,
            37157155,
            37157760,
            37157154,
            37160470,
            37158892,
            37157799,
            37158412,
            37156233,
            37151441
        ],
        "C": [
            37150680,
            37149822,
            37150471,
            37152075,
            37154129,
            37152922,
            37153000,
            37151382,
            37151999,
            37153115,
            37152133,
            37154853,
            37152337,
            37154136,
            37153887,
            37154222,
            37150166
        ],
        "B": [
            37148859,
            37148433,
            37150807,
            37150329,
            37150353,
            37151339,
            37150005,
            37149509,
            37149604,
            37150809,
            37150669,
            37150725,
            37163838,
            37150528,
            37151572,
            37173974,
            37149032
        ],
        "A": [
            37147366,
            37147343,
            37147362,
            37147371,
            37147659,
            37147394,
            37147434,
            37147365,
            37147570,
            37147605,
            37147447,
            37147530,
            37147430,
            37147619,
            37147410,
            37174371,
            37147400
        ]
    },
    "name": "B. Students in Railway Carriage",
    "statement": "There are n consecutive seat places in a railway carriage. Each place is\r\neither empty or occupied by a passenger.The university team for the\r\nOlympiad consists of a student-programmers and b student-athletes.\r\nDetermine the largest number of students from all a+b students, which\r\nyou can put in the railway carriage so that: no student-programmer is\r\nsitting next to the student-programmer; and no student-athlete is\r\nsitting next to the student-athlete. In the other words, there should\r\nnot be two consecutive (adjacent) places where two student-athletes or\r\ntwo student-programmers are sitting.Consider that initially occupied\r\nseat places are occupied by jury members (who obviously are not students\r\nat all).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n\ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<double,double> pd;\n\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\n\ntemplate <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;\n\n#define FOR(i, a, b) for (int i=a; i<(b); i++)\n#define F0R(i, a) for (int i=0; i<(a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n\nconst int MOD = 1000000007;\nconst ll INF = 1e18;\nconst int MX = 100001;\n\nint n,a,b,ans;\nvi v;\n\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    cin >> n >> a >> b;\n    string s; cin >> s;\n    vi v;\n    int cur = 0;\n    for (char c: s) {\n        if (c == '*') {\n            if (cur) v.pb(cur);\n            cur = 0;\n        } else cur ++;\n    }\n    if (cur) v.pb(cur);\n    for (int i: v) {\n        if (a < b) swap(a,b);\n        int x = min(a,(i+1)/2), y = min(b,i/2);\n        a -= x, b -= y;\n        ans += x+y;\n    }\n    cout << ans;\n}\n\n// read the question correctly (is y a vowel?)\n// look out for SPECIAL CASES (n=1?) and overflow (ll vs int?)"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Students in Railway Carriage.json",
    "editorial_link": "https://codeforces.com//blog/entry/58869",
    "editorial": "We will iterate from the left to the right through the given string and\r\ntake the maximal substrings consisting from the dots only (bounded by\r\nasterisks/string bounds). Let the length of the current such substring\r\nis .If is even, in the places corresponding to this substring, you can\r\nput maximum students of each type, simply alternating them. Considering\r\nremaining and , you can put student-programmers and student-athletes in\r\nthese places.If is odd, then in the places corresponding to this\r\nsubstring, you can put students of the one type and students of the\r\nother type. If , then you need to start put students from a\r\nstudent-programmer. So, of student-programmers and of student-athletes\r\ncan be put in this substring. Otherwise, you need to put students in the\r\nsame way, but starting from a student-athlete.Also, you need to remember\r\nto maintain the number of remaining students and after processing the\r\ncurrent substring and move on to the next substring consisting of the\r\ndots only.\r\n",
    "hint": []
}