{
    "link": "https://codeforces.com//contest/1620/problem/A",
    "problemId": "1233288",
    "problem_idx": "A",
    "shortId": "1620A",
    "contest_number": "1620",
    "problem_submissions": {
        "G": [
            139834723,
            139834630,
            139800025,
            139798720,
            139797780,
            139795833,
            139793177,
            139797195,
            139801753,
            139800125,
            139798252,
            139806590,
            139801965,
            139799470,
            139800885,
            139815133,
            139836989,
            139836961,
            139803234,
            139783937,
            139766371,
            139781791,
            198626640,
            139785516,
            139791910,
            139794593,
            139799506,
            139797098,
            139802371,
            139794714
        ],
        "E": [
            139834170,
            139768900,
            139778404,
            139777262,
            139781401,
            139780307,
            180264469,
            139772320,
            139783598,
            139787731,
            139788776,
            139795635,
            139801166,
            139803161,
            139771172,
            139772982,
            139775572,
            139777494,
            139781749,
            139783689,
            139782938,
            139773708
        ],
        "D": [
            139828795,
            139828599,
            139828445,
            139801175,
            139773916,
            139773661,
            139775200,
            139772309,
            139777532,
            139778435,
            139852816,
            139778132,
            139769927,
            139780286,
            139786796,
            139790402,
            139791529,
            139805624,
            139765400,
            139770581,
            139781836,
            139766109,
            139779076,
            139774566,
            139785166
        ],
        "F": [
            139826678,
            139786211,
            139791869,
            139787814,
            139791341,
            139788904,
            139814807,
            139811473,
            139818294,
            139801200,
            139837073,
            139811622,
            139810717,
            139801430,
            139908478,
            139834808,
            139830354
        ],
        "B": [
            139800559,
            139758636,
            139759221,
            139759228,
            139768929,
            139762743,
            139760389,
            139791856,
            139762557,
            139759423,
            139779986,
            139793644,
            139810932,
            139757813,
            139761675,
            139760955,
            139759416,
            139760977,
            139759368,
            139760377
        ],
        "C": [
            139765159,
            139765932,
            139765302,
            139774145,
            139773181,
            207683198,
            139765484,
            139764863,
            139771290,
            139772950,
            139784482,
            139796217,
            139807967,
            139762141,
            139766772,
            139767896,
            139775442,
            139767619,
            139767081,
            139780353
        ],
        "A": [
            139756564,
            139756597,
            139756503,
            139756739,
            139759409,
            139756692,
            139757881,
            139756729,
            139756611,
            139777143,
            139792512,
            139812388,
            139756396,
            139756654,
            139757129,
            139756551,
            139756903,
            139756439,
            139756571
        ]
    },
    "name": "A. Equal or Not Equal",
    "statement": "You had n positive integers a_1, a_2,\r\ndots, a_n arranged . For each pair of neighboring numbers (a_1 and a_2,\r\na_2 and a_3, ..., a_{n - 1} and a_n, and a_n and a_1), you wrote down:\r\nare the numbers in the pair equal or not.Unfortunately, you’ve lost a\r\npiece of paper with the array a. Moreover, you are afraid that even\r\ninformation about equality of neighboring elements may be inconsistent.\r\nSo, you are wondering: is there any array a which is consistent with\r\ninformation you have about equality or non-equality of corresponding\r\npairs?\r\n",
    "solutions": [
        "#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <chrono>\n#include <cmath>\n#include <cstring>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <vector>\nusing namespace std;\n\n// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0200r0.html\ntemplate<class Fun> class y_combinator_result {\n    Fun fun_;\npublic:\n    template<class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}\n    template<class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); }\n};\ntemplate<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }\n\n\ntemplate<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }\ntemplate<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = \", \"; return os << '}'; }\n\nvoid dbg_out() { cerr << endl; }\ntemplate<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }\n#ifdef NEAL_DEBUG\n#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)\n#else\n#define dbg(...)\n#endif\n\n\nvoid run_case() {\n    string S;\n    cin >> S;\n    cout << (count(S.begin(), S.end(), 'N') == 1 ? \"NO\" : \"YES\") << '\\n';\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n#ifndef NEAL_DEBUG\n    cin.tie(nullptr);\n#endif\n\n    int tests;\n    cin >> tests;\n\n    while (tests-- > 0)\n        run_case();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dsu",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Equal or Not Equal.json",
    "editorial_link": "https://codeforces.com//blog/entry/98061",
    "editorial": "Letâs look at a group of : itâs easy to see that each such a group is\r\nequal to the same number. Now, letâs look at how these groups are\r\ndistributed on the circle: If there are no then all are just equal to\r\neach other. Itâs okay. If there is exactly one then from one side, all\r\nof them are still in one group, so they should be equal, but from the\r\nother side, one pair should have different values. Itâs contradiction.\r\nIf there are more than one then all numbers are divided in several\r\ngroups with different values. Itâs okay. As a result, array exists as\r\nlong as the number of isnât .\r\n",
    "hint": []
}