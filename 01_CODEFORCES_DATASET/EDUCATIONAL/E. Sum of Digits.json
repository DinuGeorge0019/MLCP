{
    "link": "https://codeforces.com//contest/1373/problem/E",
    "problemId": "657374",
    "problem_idx": "E",
    "shortId": "1373E",
    "contest_number": "1373",
    "problem_submissions": {
        "F": [
            85069466,
            85013919,
            85003216,
            85004527,
            85017380,
            85006414,
            85013443,
            85009359,
            85034855,
            85024344,
            85027318,
            85021209,
            85169119,
            85034898,
            85023023,
            85025050,
            85021057,
            85011972,
            85013310,
            85009397,
            85086450,
            85048971,
            85105442,
            85026023,
            85034574
        ],
        "G": [
            85018688,
            85013794,
            85023274,
            85029274,
            85027188,
            85026875,
            85025205,
            85031642,
            85033493,
            85060324,
            85029140,
            85035646,
            85035445,
            85030303,
            85169123,
            85031978,
            85034028,
            85038006,
            85044469,
            85037568,
            85029439,
            85040658,
            85105410,
            85055846,
            85052926,
            85051925,
            85051272,
            85044699
        ],
        "E": [
            84999770,
            85000250,
            85000769,
            85016220,
            85003055,
            85022007,
            85003196,
            85014929,
            85009060,
            85051465,
            85015459,
            85015122,
            85013600,
            85169037,
            85015655,
            85012581,
            85027850,
            85004717,
            85029830,
            85050882,
            85062787,
            85017522,
            85010450,
            85023419
        ],
        "D": [
            84989194,
            84988897,
            84987666,
            84989409,
            84993779,
            84995810,
            84995168,
            84988737,
            84989555,
            84996435,
            84994778,
            85169112,
            84993838,
            84996979,
            84999087,
            84988720,
            84993282,
            84997221,
            84991423,
            84994984,
            85005381
        ],
        "C": [
            84985114,
            84983803,
            84984904,
            84985027,
            84987964,
            84987787,
            84988785,
            84985367,
            84985891,
            84989713,
            84990559,
            85169107,
            84990269,
            84988468,
            84994211,
            84985714,
            84988231,
            84989967,
            84987837,
            84989263,
            84994345
        ],
        "B": [
            84983530,
            84983359,
            84983895,
            84983713,
            84984272,
            84984923,
            84984729,
            84983954,
            84983931,
            84986620,
            85051946,
            84984732,
            85169102,
            84984725,
            84984153,
            84984773,
            84984191,
            84984894,
            84984839,
            84984490,
            84985320,
            84987225
        ],
        "A": [
            84983369,
            84984629,
            84983633,
            84983428,
            84983600,
            84983500,
            84983426,
            84983406,
            84983552,
            84983668,
            84986837,
            85168973,
            84983414,
            84983504,
            84983712,
            85163611,
            84983517,
            84983932,
            84983627,
            84984784,
            84983882,
            84985111
        ]
    },
    "name": "E. Sum of Digits",
    "statement": "Let f(x) be the sum of digits of a decimal number x.Find the smallest\r\nnon-negative integer x such that f(x) + f(x + 1) +\r\ndots + f(x + k) = n.\r\n",
    "solutions": [
        "#pragma GCC optimize (\"O3\")\n#pragma GCC target (\"sse4\")\n \n#include <bits/stdc++.h>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n \ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<ld,ld> pd;\n \ntypedef vector<int> vi;\ntypedef vector<ld> vd;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\ntypedef vector<pl> vpl;\ntypedef vector<cd> vcd;\n \n#define FOR(i, a, b) for (int i=a; i<(b); i++)\n#define F0R(i, a) for (int i=0; i<(a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n#define trav(a,x) for (auto& a : x)\n \n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n#define ins insert\n\ntemplate<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\ntemplate<class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\n \nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n \nconst int MOD = 1000000007;\nconst char nl = '\\n';\nconst int MX = 100001; //check the limits, dummy\nstring lower(string A, string B) {\n    if (A == \"\") return B;\n    if (B == \"\") return A;\n    if (sz(A) < sz(B)) return A;\n    if (sz(B) < sz(A)) return B;\n    if (A < B) return A;\n    return B;\n}\nint main() {\n\tios_base::sync_with_stdio(0); cin.tie(0);    \n\t\n    int T; cin >> T;\n    while(T--) {\n        int N, K; cin >> N >> K;\n        string ans = \"\";\n\n        F0R(u, 10) {\n            F0R(nn, 20) {\n                string res; res += u + '0';\n                F0R(i, nn) res += '9';\n                int rem = N;\n                int C = 0;\n                F0R(k, K+1) {\n                    rem -= (u+k)%10;\n                    if (u+k >= 10) C++;\n                }\n\n                int reg = K+1 - C;\n                rem -= 9 * reg * nn;\n                rem -= C;\n\n                if (rem < 0) continue;\n                if (rem % (K+1) != 0) continue;\n                rem /= K+1;\n                if (rem > 8) {\n                    res += '8'; rem -= 8;\n                } \n\n                while (rem > 0) {\n                    res += '0' + min(rem, 9);\n                    rem -= 9;\n                }\n\n                reverse(all(res));\n                ans = lower(ans, res);\n                \n            }\n        }\n\n        if (ans == \"\") {\n            cout << -1 << nl;\n        } else cout << ans << nl;\n\n    }\n\t\n\treturn 0;\n}\n \n// read the question correctly (ll vs int)\n// template by bqi343\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "dp",
        "greedy"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Sum of Digits.json",
    "editorial_link": "https://codeforces.com//blog/entry/79376",
    "editorial": "There are many ways to solve this problem (including precalculating all\r\nanswers), but the model solution is based on the following:In most\r\ncases, . It is not true only when the last digit of is (and if we know\r\nthe number of -digits at the end of , we can easily derive the formula\r\nfor ). And since , there will be at most one number with last digit\r\nequal to in .Let\u00e2\u0080\u0099s iterate on the last digit of and the number of\r\n-digits before it. Suppose the fixed has no other digits other than the\r\nlast one and several -digits before it. Let\u00e2\u0080\u0099s calculate .Here goes the\r\ntrick. If we prepend with several digits such that the last of them is\r\nnot , and the sum of those digits is , then . So we can easily derive\r\nthe value of we need and construct the smallest number with sum of\r\ndigits equal to (don\u00e2\u0080\u0099t forget that the last digit should not be ).\r\n"
}