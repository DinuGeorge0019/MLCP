{"link": "https://codeforces.com//contest/1187/problem/B", "problemId": "365118", "problem_idx": "B", "shortId": "1187B", "contest_number": "1187", "problem_submissions": {"G": [56332310, 56340989, 56686103, 56327820, 56357942, 56357893, 56357546, 56393615, 56385554, 56337872, 56340206, 56343105, 56383525, 56344635, 56413429, 56342762, 56340438, 56341811, 56342716, 56365621], "F": [56329446, 56334290, 56324078, 56328221, 56327378, 56337303, 56342526, 56331177, 56340043, 56336355, 56334752, 56336077, 56336627, 56360333], "E": [56323030, 56330456, 56319363, 56322371, 56320247, 56329005, 56327923, 56326133, 56329409, 56326249, 56424958, 56328252, 56326656, 56325346, 56328882, 56328436, 56328661, 56323830, 56324440, 56325389], "D": [56321688, 56327439, 56325081, 56328701, 56323355, 56322789, 56358499, 56324879, 56323568, 56320080, 56323458, 56413111, 56325452, 56541360, 56321839, 56320767, 56323441], "C": [56317291, 56315455, 56314711, 56314827, 56313223, 56319121, 56318984, 56317025, 56320070, 56318484, 56425545, 56329379, 56320274, 56318352, 56316738, 56318754, 56319277, 56317240, 56316893, 56317391], "B": [56314215, 56313013, 56312493, 56311346, 56311654, 56315580, 56313289, 56312101, 56313618, 56315894, 56313703, 56315753, 56314242, 56313556, 56315340, 56314265, 56313400, 56314155, 56314393], "A": [56311354, 56311017, 56311059, 56312444, 56310978, 56312306, 56311272, 56310955, 56311255, 56311625, 56311777, 56313786, 56311277, 56310994, 56311316, 56311426, 56311025, 56311856, 56311363]}, "name": "B. Letters Shop", "statement": "The letters shop showcase is a string s, consisting of n lowercase Latin\r\nletters. As the name tells, letters are sold in the shop.Letters are\r\nsold one by one from the leftmost to the rightmost. Any customer can\r\nonly buy some prefix of letters from the string s.There are m friends,\r\nthe i-th of them is named t_i. Each of them is planning to estimate the\r\nfollowing value: how many letters (the length of the shortest prefix)\r\nwould s/he need to buy if s/he wanted to construct her/his name of\r\nbought letters. The name can be constructed if each letter is presented\r\nin the equal or greater amount. For example, for s=\"\" and t_i=\"\" 5\r\nletters have to be bought (\"\"). For example, for s=\"\" and t_i=\"\" 6\r\nletters have to be bought (\"\"). For example, for s=\"\" and t_i=\"\" 5\r\nletters have to be bought (\"\"). For example, for s=\"\" and t_i=\"\" 2\r\nletters have to be bought (\"\"). For example, for s=\"\" and t_i=\"\" all 9\r\nletters have to be bought (\"\"). It is guaranteed that every friend can\r\nconstruct her/his name using the letters from the string s.Note that the\r\nvalues for friends are independent, friends are only estimating them but\r\nnot actually buying the letters.\r\n", "solutions": ["//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=1000*1007;\n\nint n;\nvi gdz[nax];\n\nint m;\nchar wcz[nax];\n\nint ile[nax];\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i=0; i<26; i++)\n\t\tgdz[i].push_back(0);\n\tscanf(\"%s\", wcz+1);\n\tfor (int i=1; i<=n; i++)\n\t\tgdz[wcz[i]-'a'].push_back(i);\n\t//~ for (int i=0; i<26; i++)\n\t\t//~ debug() << i << \" \" << gdz[i];\n\tscanf(\"%d\", &m);\n\twhile(m--)\n\t{\n\t\tfor (int i=0; i<26; i++)\n\t\t\tile[i]=0;\n\t\tscanf(\"%s\", wcz+1);\n\t\tint k=strlen(wcz+1);\n\t\t//~ debug() << range(wcz+1, wcz+1+k);\n\t\tfor (int i=1; i<=k; i++)\n\t\t\tile[wcz[i]-'a']++;\n\t\tint wyn=0;\n\t\t//~ debug() << range(ile, ile+26);\n\t\tfor (int i=0; i<26; i++)\n\t\t\twyn=max(wyn, gdz[i][ile[i]]);\n\t\tprintf(\"%d\\n\", wyn);\n\t}\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "implementation", "strings"], "dificulty": "1300", "interactive": false}