{
    "link": "https://codeforces.com//contest/1849/problem/B",
    "problemId": "2121799",
    "problem_idx": "B",
    "shortId": "1849B",
    "contest_number": "1849",
    "problem_submissions": {
        "F": [
            215983324,
            215952856,
            215937825,
            216386632,
            215955686,
            215953676,
            215963177,
            215957010,
            215951070,
            215964780,
            216982954,
            215957194,
            215972632,
            215944919,
            215944313,
            215955103,
            215959952,
            215969003,
            215980309,
            215974158,
            215944399,
            215979671,
            215977278
        ],
        "E": [
            215924453,
            215947662,
            216386610,
            215933511,
            215933733,
            215934077,
            215914493,
            215965756,
            215977352,
            215941711,
            233941264,
            215936437,
            215935391,
            215977463,
            215969180,
            215945577,
            215912738,
            215939893,
            215950899,
            215934318,
            215964596,
            215959218,
            215957991,
            215955934
        ],
        "D": [
            215901738,
            215911695,
            216386594,
            215909113,
            215918034,
            215916358,
            215933169,
            215909241,
            215922975,
            234220985,
            215915496,
            215918649,
            215921028,
            215919624,
            215925910,
            215965913,
            215944986,
            215923778,
            215918733,
            215917075,
            215927258,
            215909167,
            215930917
        ],
        "C": [
            215896251,
            215894479,
            216386570,
            215900243,
            215896179,
            215907225,
            215897874,
            215899171,
            215913186,
            216103314,
            215910665,
            215904112,
            215906218,
            215893558,
            215913416,
            215898003,
            215913451,
            215905641,
            215906717,
            215916261,
            215893733,
            215907522
        ],
        "B": [
            215891011,
            215887978,
            215890857,
            215886817,
            215889862,
            215890551,
            215889747,
            215890405,
            216103286,
            215904981,
            215895899,
            215891636,
            215886438,
            215894588,
            215888040,
            215888730,
            215892001,
            215891534,
            215895784,
            215887055,
            215895512
        ],
        "A": [
            215887103,
            215884849,
            215885125,
            215884783,
            215885307,
            215885029,
            215884781,
            215885053,
            216103329,
            215902406,
            215889192,
            215885764,
            215884723,
            215885605,
            215884732,
            215884795,
            215885200,
            215885812,
            215885953,
            215884704,
            215884853
        ]
    },
    "name": "B. Monsters",
    "statement": "Monocarp is playing yet another computer game. And yet again, his\r\ncharacter is killing some monsters. There are n monsters, numbered from\r\n1 to n, and the i-th of them has a_i health points initially.Monocarp’s\r\ncharacter has an ability that deals k damage to the monster with the .\r\nIf there are several of them, . If a monster’s health becomes less than\r\nor equal to 0 after Monocarp uses his ability, then it dies.Monocarp\r\nuses his ability until all monsters die. Your task is to determine the\r\norder in which monsters will die.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n, k;\n    std::cin >> n >> k;\n    \n    std::vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> a[i];\n    }\n    \n    std::vector<int> p(n);\n    std::iota(p.begin(), p.end(), 0);\n    std::stable_sort(p.begin(), p.end(),\n        [&](int i, int j) {\n            return (a[i] - 1) % k > (a[j] - 1) % k;\n        });\n    for (int i = 0; i < n; i++) {\n        std::cout << p[i] + 1 << \" \\n\"[i == n - 1];\n    }\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Monsters.json",
    "editorial_link": "https://codeforces.com//blog/entry/118752",
    "editorial": "Letâs simulate the game process until the number of health points of\r\neach monster becomes or less. Then we can consider that the -th monster\r\nhas health instead of (except for the case when is divisible by , then\r\nthe remaining health is , not ).Now, the health points of all monsters\r\nare from to , so each time we damage a monster, we kill it. Therefore,\r\nmonsters with health points will die first, then the ones with health\r\npoints, and so on. So, letâs sort the monsters by their remaining health\r\npoints in descending order (donât forget that, if two monsters have the\r\nsame health, then they should be compared by index). And the order you\r\nget after sorting is the answer to the problem.\r\n",
    "hint": []
}