{
    "link": "https://codeforces.com//contest/863/problem/C",
    "problemId": "123493",
    "problem_idx": "C",
    "shortId": "863C",
    "contest_number": "863",
    "problem_submissions": {
        "F": [
            30585747,
            30587406,
            30587581,
            30586987,
            30589318,
            30588386,
            30614835,
            30589226,
            30587748,
            30588069,
            30589138,
            30588637,
            30589602,
            30588953,
            30587113,
            30590006,
            30591128,
            30589525,
            30591328
        ],
        "E": [
            30584826,
            30584892,
            30586722,
            30586370,
            30585856,
            30586447,
            30586390,
            30586258,
            30587809,
            30586316,
            30587721,
            30587855,
            30587775,
            30588242,
            30587782,
            30587403,
            30589806
        ],
        "D": [
            30584161,
            30582889,
            30583896,
            30584983,
            30584514,
            30599512,
            30585431,
            30584907,
            30584911,
            30586408,
            30585496,
            30586610,
            30586374,
            30584958,
            30587183,
            30584596,
            30585231,
            30587520
        ],
        "C": [
            30583486,
            30584324,
            30585366,
            30584169,
            30583738,
            30584504,
            30584405,
            30584037,
            30585386,
            30584778,
            30585657,
            30585045,
            30584141,
            30586261,
            30586674,
            30591722,
            30586154
        ],
        "B": [
            30581979,
            30583463,
            30582674,
            30582188,
            30582199,
            30582158,
            30582064,
            30582238,
            30582609,
            30582456,
            30582868,
            30582784,
            30582689,
            30582852,
            30583217,
            30606326,
            30582212,
            30582335
        ],
        "A": [
            30581619,
            30581704,
            30581695,
            30581653,
            30581650,
            30786677,
            30581665,
            30581657,
            30581629,
            30581763,
            30581628,
            30581791,
            30581663,
            30581713,
            30581800,
            30581819,
            30581630,
            30581694
        ],
        "G": [
            57430904,
            30596090
        ]
    },
    "name": "C. 1-2-3",
    "statement": "Ilya is working for the company that constructs robots. Ilya writes\r\nprograms for entertainment robots, and his current project is \"Bob\", a\r\nnew-generation game robot. Ilya’s boss wants to know his progress so\r\nfar. Especially he is interested if Bob is better at playing different\r\ngames than the previous model, \"Alice\". So now Ilya wants to compare his\r\nrobots’ performance in a simple game called \"1-2-3\". This game is\r\nsimilar to the \"Rock-Paper-Scissors\" game: both robots secretly choose a\r\nnumber from the set and say it at the same moment. If both robots choose\r\nthe same number, then it’s a draw and noone gets any points. But if\r\nchosen numbers are different, then one of the robots gets a point: beats\r\n, beats and beats . Both robots’ programs make them choose their numbers\r\nin such a way that their choice in -th game depends only on the numbers\r\nchosen by them in -th game. Ilya knows that the robots will play games,\r\nAlice will choose number in the first game, and Bob will choose in the\r\nfirst game. He also knows both robots’ programs and can tell what each\r\nrobot will choose depending on their choices in previous game. Ilya\r\ndoesn’t want to wait until robots play all games, so he asks you to\r\npredict the number of points they will have after the final game.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\nusing namespace std;\n#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))\n#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))\n#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))\nstatic const int INF = 0x3f3f3f3f; static const long long INFL = 0x3f3f3f3f3f3f3f3fLL;\ntypedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;\ntemplate<typename T, typename U> static void amin(T &x, U y) { if (y < x) x = y; }\ntemplate<typename T, typename U> static void amax(T &x, U y) { if (x < y) x = y; }\n\nint main() {\n\tlong long K; int a; int b;\n\twhile (~scanf(\"%lld%d%d\", &K, &a, &b)) {\n\t\t-- a, -- b;\n\t\tvector<vector<int> > A(3, vector<int>(3));\n\t\tfor (int i = 0; i < 3; ++ i) for (int j = 0; j < 3; ++ j)\n\t\t\tscanf(\"%d\", &A[i][j]), -- A[i][j];\n\t\tvector<vector<int> > B(3, vector<int>(3));\n\t\tfor (int i = 0; i < 3; ++ i) for (int j = 0; j < 3; ++ j)\n\t\t\tscanf(\"%d\", &B[i][j]), -- B[i][j];\n\t\tstruct Perm {\n\t\t\tarray<pair<int, pair<ll, ll>>, 9> next;\n\t\t\tPerm() {\n\t\t\t\trep(i, 9)\n\t\t\t\t\tnext[i] = { i, {0, 0} };\n\t\t\t}\n\t\t\tPerm operator*(const Perm &that) {\n\t\t\t\tPerm res;\n\t\t\t\trep(i, 9) {\n\t\t\t\t\tint j = next[i].first;\n\t\t\t\t\tres.next[i] = {\n\t\t\t\t\t\tthat.next[j].first,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnext[i].second.first + that.next[j].second.first,\n\t\t\t\t\t\t\tnext[i].second.second + that.next[j].second.second,\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t}\n\t\t};\n\t\tPerm perm;\n\t\trep(i, 3) rep(j, 3) {\n\t\t\tint x = A[i][j], y = B[i][j];\n\t\t\tperm.next[i * 3 + j] = { x * 3 + y, {(i + 2) % 3 == j, (j + 2) % 3 == i} };\n\t\t}\n\t\tPerm x = perm, y{};\n\t\twhile (K > 0) {\n\t\t\tif (K & 1) y = y * x;\n\t\t\tx = x * x;\n\t\t\tK >>= 1;\n\t\t}\n\t\tauto ans = y.next[a * 3 + b].second;\n\t\tprintf(\"%lld %lld\\n\", ans.first, ans.second);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "implementation"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. 1-2-3.json",
    "editorial_link": "https://codeforces.com//blog/entry/54708",
    "editorial": "Notice that there are only possible patterns in this game. You can used\r\nin a following way. Simulate games till one of the patterns get\r\nrepeated. Games between this pair of occurences will get you the same\r\ntotal outcome no matter when they are played. Let the distance between\r\nthe games with the same pattern is and index of these games are and\r\n(zero-indexed). Total score of some interval is . Then the answer will\r\nbe + + .\r\n",
    "hint": []
}