{"link": "https://codeforces.com//contest/1312/problem/G", "problemId": "557983", "problem_idx": "G", "shortId": "1312G", "contest_number": "1312", "problem_submissions": {"G": [72824912, 72825940, 72832858, 72832125, 72830981, 72830579, 72827258, 72818410, 73118157, 72832195, 72826680, 72837006, 72831183, 72846291, 72845347, 72835299, 72834657, 72834166, 72836122, 72834407, 72826975, 72828977, 72837738, 72829233, 72828895, 72814710], "F": [72816196, 72815449, 72836440, 72835939, 72833544, 72818707, 72831850, 73118148, 72823917, 72821869, 72817848, 72823973, 72825602, 72821962, 72825661, 72827867, 72825004, 72836754, 72835570, 72830789, 72837405, 72824053, 72824708], "E": [72807538, 72806508, 72938781, 72938462, 72938238, 72849613, 72849474, 72839861, 72834168, 72811533, 72810583, 73118128, 72810138, 72811240, 72806275, 72810780, 72813492, 72813999, 72814345, 72819726, 72816559, 72814069, 72818755, 72815412, 72820356, 72810691, 72826172], "D": [72804418, 72803272, 72940991, 72940962, 72801330, 72805787, 73118118, 72807156, 72809073, 86477031, 72803786, 72808232, 72806322, 72805660, 72809462, 72812808, 72814419, 72810586, 72812917, 72812165, 72817006, 72832064, 72827740], "C": [72798692, 72799958, 72796730, 72804789, 73118106, 72800009, 72800362, 72797813, 72800910, 72799283, 72799712, 72801433, 72802442, 72813095, 72802040, 72808078, 72800616, 72812371, 72830092, 72828590], "B": [72793777, 72794214, 72793197, 72797455, 73118103, 72795859, 72796621, 72793808, 72794859, 72794981, 72794667, 72795692, 72795259, 72794528, 72797051, 72796632, 72795714, 72810192, 72793542, 72829098], "A": [72792172, 72792542, 72792143, 72792487, 73118076, 72793403, 72793192, 72792295, 72792118, 72792591, 72792492, 72792213, 72792502, 72792229, 72794177, 72793376, 72792458, 72809334, 72829278, 72829336]}, "name": "G. Autocompletion", "statement": "You are given a set of strings S. Each string consists of lowercase\r\nLatin letters.For each string in this set, you want to calculate the\r\nminimum number of seconds required to type this string. To type a\r\nstring, you have to start with an empty string and transform it into the\r\nstring you want to type using the following actions: if the current\r\nstring is t, choose some lowercase Latin letter c and append it to the\r\nback of t, so the current string becomes t + c. This action takes 1\r\nsecond; use autocompletion. When you try to autocomplete the current\r\nstring t, a list of all strings s\r\nin S such that t is a prefix of s is shown to you. , and the strings are\r\nordered lexicographically. You can transform t into the i-th string from\r\nthis list in i seconds. Note that you may choose any string from this\r\nlist you want, it is not necessarily the string you are trying to type.\r\nWhat is the minimum number of seconds that you have to spend to type\r\neach string from S?.\r\n", "solutions": ["#ifdef DEBUG\n#define _GLIBCXX_DEBUG\n#endif\n//#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long double ld;\ntypedef long long ll;\nconst int maxN = (int)1e6 + 10;\nvector < pair < char, int > > g[maxN];\nint n;\nbool can[maxN];\nint dp[maxN];\nconst int INF = (int)1e9;\nint bal[maxN];\nint k;\nbool used[maxN];\nint a[maxN];\nvoid dfs(int v, int& cur) {\n    bal[v] = cur;\n    if (used[v]) {\n        cur++;\n    }\n    sort(g[v].begin(), g[v].end());\n    for (auto it : g[v]) {\n        dfs(it.second, cur);\n    }\n}\nint h[maxN];\nvoid calc(int v, int val, int sec) {\n    dp[v] = min(dp[v], val + h[v]);\n    if (used[v]) {\n        dp[v] = min(dp[v], sec + bal[v] + 1);\n    }\n    for (auto it : g[v]) {\n        h[it.second] = h[v] + 1;\n        calc(it.second, min(val, dp[v] - h[v]), min(sec, dp[v] - bal[v]));\n    }\n}\n\nvoid solve() {\n    cin >> n;\n    for (int i = 1; i <= n; i++) {\n        int p;\n        char c;\n        cin >> p >> c;\n        g[p].emplace_back(c, i);\n    }\n    cin >> k;\n    for (int i = 0; i <= n; i++) {\n        dp[i] = INF;\n    }\n    for (int i = 1; i <= k; i++) {\n        cin >> a[i];\n        used[a[i]] = true;\n    }\n    dp[0] = 0;\n    int p = 1;\n    dfs(0, p);\n    calc(0, INF, INF);\n    for (int i = 1; i <= k; i++) cout << dp[a[i]] << \" \";\n    cout << '\\n';\n}\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n//    freopen(\"input.txt\", \"r\", stdin);\n    int tst = 1;\n//    cin >> tst;\n    while (tst--) solve();\n    return 0;\n}"], "input": "", "output": "", "tags": ["data structures", "dfs and similar", "dp"], "dificulty": "2600", "interactive": false}