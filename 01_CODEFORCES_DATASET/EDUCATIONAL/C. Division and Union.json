{
    "link": "https://codeforces.com//contest/1101/problem/C",
    "problemId": "281056",
    "problem_idx": "C",
    "shortId": "1101C",
    "contest_number": "1101",
    "problem_submissions": {
        "G": [
            48239479,
            48229345,
            48232833,
            48236005,
            48238584,
            48237077,
            48239817,
            48236726,
            48424442,
            48241897,
            48244236,
            48246271,
            48243763,
            48241853,
            48248346,
            48243669,
            48239804,
            48232428,
            48236056,
            48233716
        ],
        "F": [
            48234729,
            48238339,
            48245658,
            48241971,
            48243102,
            48243980,
            48248208,
            48253790,
            48249237,
            48251881,
            48251772,
            48254209,
            48250740,
            48252733,
            48257301,
            48253052,
            48236429,
            48245061,
            48242715,
            48241926,
            48292686,
            48258183
        ],
        "E": [
            48227685,
            48224274,
            48222676,
            48226514,
            48225235,
            48225759,
            48224993,
            48229382,
            48234805,
            48231496,
            48237158,
            48276590,
            48233129,
            48237913,
            48231111,
            48230324,
            48226575,
            48224137,
            48222074,
            48228244,
            48223937
        ],
        "D": [
            48225904,
            132803821,
            132802920,
            48232171,
            48230596,
            48230036,
            48246912,
            48230700,
            48231186,
            48232249,
            48228292,
            48232968,
            48229870,
            48235723,
            48238573,
            48253038,
            48236119,
            48237471,
            48242160,
            48224926,
            48233664,
            48227806,
            48238739,
            48236228
        ],
        "C": [
            48220755,
            48221737,
            48220938,
            48222851,
            48222128,
            48224023,
            48222001,
            48221817,
            48228289,
            48227053,
            48229439,
            48222389,
            48224672,
            48228555,
            48228217,
            48221108,
            48222667,
            48220453,
            48229806,
            48227541
        ],
        "B": [
            48218348,
            48218521,
            48218025,
            48219067,
            48219419,
            48219511,
            48219183,
            48218594,
            48221174,
            48217036,
            48221983,
            48224393,
            48219257,
            48217297,
            48224770,
            48217931,
            48218900,
            50490666,
            48220404,
            48221056
        ],
        "A": [
            48216068,
            48216088,
            48215851,
            48216101,
            48215964,
            48215856,
            48216330,
            48216376,
            48215843,
            48215822,
            48218304,
            48215863,
            48216823,
            48215814,
            48216519,
            48216032,
            48215829,
            48216427,
            48216203
        ]
    },
    "name": "C. Division and Union",
    "statement": "There are n segments [l_i, r_i] for 1\r\nle i\r\nle n. You should divide all segments into two groups in such way that\r\nthere is no pair of segments from different groups which have at least\r\none common point, or say that it’s impossible to do it. Each segment\r\nshould belong to exactly one group.To optimize testing process you will\r\nbe given multitest.\r\n",
    "solutions": [
        "#include <algorithm>  \n#include <iostream>  \n#include <sstream>  \n#include <string>  \n#include <vector>  \n#include <queue>  \n#include <set>  \n#include <map>  \n#include <cstdio>  \n#include <cstdlib>  \n#include <cctype>  \n#include <cmath>  \n#include <cstring>\n#include <list>  \n#include <cassert>\n#include <climits>\n#include <bitset>\nusing namespace std;  \n\n#define PB push_back  \n#define MP make_pair  \n#define SZ(v) ((int)(v).size())  \n#define FOR(i,a,b) for(int i=(a);i<(b);++i)  \n#define REP(i,n) FOR(i,0,n)  \n#define FORE(i,a,b) for(int i=(a);i<=(b);++i)  \n#define REPE(i,n) FORE(i,0,n)  \n#define FORSZ(i,a,v) FOR(i,a,SZ(v))  \n#define REPSZ(i,v) REP(i,SZ(v))  \ntypedef long long ll;  \nint gcd(int a,int b) { return b==0?a:gcd(b,a%b); }\n\nconst int MAXN=100000;\nstruct Seg { int l,r,id; };\nbool operator<(const Seg &a,const Seg &b) { return a.l<b.l; }\n\nint n;\nSeg seg[MAXN];\nint ans[MAXN];\n\nbool solve() {\n\tsort(seg,seg+n);\n\tint upto=seg[0].r;\n\tREP(i,n) {\n\t\tif(seg[i].l>upto) { REP(j,n) ans[seg[j].id]=seg[j].r<=upto?1:2; return true; }\n\t\tupto=max(upto,seg[i].r);\n\t}\n\treturn false;\n}\n\nvoid run() {\n\tscanf(\"%d\",&n);\n\tREP(i,n) scanf(\"%d%d\",&seg[i].l,&seg[i].r),seg[i].id=i;\n\tif(!solve()) { printf(\"-1\\n\"); return; }\n\tREP(i,n) { if(i!=0) printf(\" \"); printf(\"%d\",ans[i]); } puts(\"\");\n}\n\nint main() {\n\tint n; scanf(\"%d\",&n); REP(i,n) run();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "sortings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Division and Union.json",
    "editorial_link": "https://codeforces.com/blog/entry/64483",
    "editorial": "Letâs prove that division possible if and only if union of all segments\r\nhas two and more segments. If the union have at least two segments, then\r\nwe can choose one of them and put all segments it contains in one group\r\nand other segments to another group. On the other hand, if we can divide\r\nall segments in two groups in such way that there are no pair from\r\ndifferent group which intersects, then union of segments from the first\r\ngroup doesnât intersect union of segments from another and union of\r\nunions consists of several non-intersecting components.How can it help?\r\nIf union of segments consits of several segments then exists such that\r\nfor any segment either or and both parts are non-empty. Moreover, equals\r\nto one of .It leads us straight to one of possible solutions: sort all\r\nsegments by in increasing order and for each we should check that\r\n(suffix minimum). If weâve found such then all prefix goes to one group\r\nand suffix to another.\r\n",
    "hint": []
}