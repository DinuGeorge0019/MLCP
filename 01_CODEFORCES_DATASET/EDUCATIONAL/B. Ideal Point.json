{
    "link": "https://codeforces.com//contest/1795/problem/B",
    "problemId": "1785698",
    "problem_idx": "B",
    "shortId": "1795B",
    "contest_number": "1795",
    "problem_submissions": {
        "G": [
            193868249,
            193922126,
            193880640,
            193880242,
            193879883,
            193877939,
            193892319,
            193909416,
            193909281,
            193909039,
            193908855,
            193907982,
            193907256,
            193907116,
            193905885,
            193905428,
            193895936,
            193894919,
            193900585,
            193900447,
            193900331,
            193900021,
            193895212,
            193901119,
            193897399,
            194065980,
            193895350,
            193897364,
            193910352,
            193909678,
            193877594,
            193901310,
            193900708,
            193909774,
            193909664,
            193908826,
            193902609,
            193895098,
            193898582,
            193887169,
            193989778,
            193903191,
            193906575,
            193901677
        ],
        "E": [
            193858484,
            193864061,
            193860485,
            193866472,
            193870118,
            193881494,
            193869535,
            193877440,
            194065966,
            193867450,
            193873381,
            193864290,
            193872060,
            193880762,
            193876051,
            193901176,
            193882421,
            193899122,
            193881276,
            193885055
        ],
        "F": [
            193849592,
            193871412,
            193870619,
            193880295,
            193883585,
            193866256,
            193887756,
            193901053,
            193899102,
            193887184,
            194065972,
            193879792,
            193887970,
            193889897,
            193889600,
            193879424,
            193886027,
            193888430,
            193890811,
            193880065,
            193894847,
            193891841
        ],
        "D": [
            193842483,
            193853701,
            193849666,
            193849500,
            193854093,
            193850355,
            193858853,
            193853243,
            194065953,
            193855818,
            193855956,
            193852941,
            193856134,
            193845600,
            193859844,
            193851729,
            193849114,
            193866588,
            193860778,
            193855517
        ],
        "C": [
            193840570,
            193847474,
            193846113,
            193844888,
            193847932,
            193844693,
            193851549,
            193846559,
            194065943,
            193849210,
            193849704,
            193847867,
            193849903,
            193858596,
            193851945,
            193847688,
            193845368,
            193860332,
            193855373,
            193849162
        ],
        "B": [
            193839119,
            193839637,
            193839480,
            193839407,
            193839832,
            193839202,
            193842405,
            193840503,
            194065925,
            193843321,
            193841514,
            193841857,
            193840539,
            193848293,
            193839850,
            193839356,
            193839529,
            193847088,
            193842717,
            193840388
        ],
        "A": [
            193838910,
            193838985,
            193838946,
            193838908,
            193839007,
            193838901,
            193840204,
            193839189,
            194065914,
            193839222,
            193839386,
            193882631,
            193839087,
            193843666,
            193841139,
            193839086,
            193838960,
            193838928,
            193845036,
            193840156,
            193838911
        ]
    },
    "name": "B. Ideal Point",
    "statement": "You are given n one-dimensional segments (each segment is denoted by two\r\nintegers its endpoints).Let\u2019s define the function f(x) as the number of\r\nsegments covering point x (a segment covers the point x if l\r\nle x\r\nle r, where l is the left endpoint and r is the right endpoint of the\r\nsegment).An integer point x is called if it belongs to more segments\r\nthan any other integer point, i. e. f(y) < f(x) is true for any other\r\ninteger point y.You are given an integer k. Your task is to determine\r\nwhether it is possible to remove some (possibly zero) segments, so that\r\nthe given point k becomes .\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 16.02.2023 18:36:57       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n, k;\n    cin >> n >> k;\n    vector<int> l(n), r(n);\n    for (int i = 0; i < n; i++) {\n      cin >> l[i] >> r[i];\n    }\n    bool L = false;\n    bool R = false;\n    for (int i = 0; i < n; i++) {\n      L |= (l[i] == k);\n      R |= (r[i] == k);\n    }\n    cout << (L && R ? \"YES\" : \"NO\") << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "geometry",
        "greedy"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Ideal Point.json",
    "editorial_link": "https://codeforces.com//blog/entry/112963",
    "editorial": "First of all, let\u00e2\u0080\u0099s delete all segments that do not cover the point\r\n(because they increase the value of the function at points other than ).\r\nIf there are no segments left, then the answer is . Otherwise, all\r\nsegments cover the point . And it remains to check whether the point is\r\nthe only point which is covered by all segments. Note that it does not\r\nmake sense to delete any of the remaining segments, because if there are\r\nseveral points with maximum value of , then deleting segments can only\r\nincrease their number.To check the number of points with the maximum\r\nvalue of , you can iterate over from to and calculate , because of the\r\nsmall number of segments in the problem. A faster way is to check the\r\nsize of the intersection of all segments. The left boundary of the\r\nintersection is , and the right boundary is ; if , then the point is\r\nideal, otherwise it is not.\r\n"
}