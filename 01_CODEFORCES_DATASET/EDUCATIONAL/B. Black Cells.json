{
    "link": "https://codeforces.com//contest/2026/problem/B",
    "problemId": "2985129",
    "problem_idx": "B",
    "shortId": "2026B",
    "contest_number": "2026",
    "problem_submissions": {
        "F": [
            288561266,
            289460762,
            288610204,
            288597833,
            288597166,
            288569834,
            288622486,
            288654341,
            288862318,
            289435066
        ],
        "E": [
            288532750,
            288648436,
            289460758,
            288538098,
            288522785,
            288536060,
            288547433,
            288544648,
            288565205,
            288561153,
            288562514,
            288560885,
            288560234,
            288562220,
            288569450,
            288563732,
            288565049,
            288562236,
            288561108,
            288565165,
            288569967
        ],
        "C": [
            288529378,
            288523247,
            288587507,
            288523790,
            288525729,
            288530332,
            288531829,
            288528175,
            288530132,
            288533395,
            288532265,
            288535389,
            288532312,
            288535104,
            288538148,
            288539384,
            288557011,
            288540483,
            288538281
        ],
        "D": [
            288525443,
            288532543,
            288578032,
            288532129,
            288536966,
            288541005,
            288544765,
            288551300,
            288551604,
            288547887,
            288547345,
            288554913,
            288553450,
            288546930,
            288552551,
            288553665,
            288542913,
            288552909,
            288551588
        ],
        "B": [
            288512906,
            288512626,
            288591954,
            288514323,
            288515612,
            288518687,
            288518565,
            288516062,
            288516991,
            288516923,
            288523730,
            288523890,
            288520786,
            288521682,
            288521503,
            288524297,
            288520697,
            288521668,
            288521796
        ],
        "A": [
            288510200,
            288515667,
            288594432,
            288510659,
            288510501,
            288510904,
            288511010,
            288517929,
            288511642,
            288510491,
            288516233,
            288511665,
            288510831,
            288512187,
            288514794,
            288512225,
            288511936,
            288512066,
            288512165
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135680",
    "editorial": "First, letâs consider the case when is even. It is not difficult to\r\nnotice that to minimize the value of , the cells have to be painted in\r\nthe following pairs: , , ..., . Then the answer is equal to the maximum\r\nof the distances between the cells in the pairs.For odd , it is\r\nnecessary to add one more cell (so that cells can be divided into\r\npairs). If we add a new cell from the segment , itâs paired either with\r\nthe -th cell or with the -th cell (depending on the parity of ).\r\nTherefore, to minimize the value of , the new cell should be chosen\r\namong and (in fact, only one of the two options is needed, but we can\r\nkeep both). Note that one of these options may already be an existing\r\ncell, in which case it does not need to be considered. Thus, there are\r\noptions for the new cell, and for each of them, we can calculate the\r\nanswer in or , and take the minimum among them. Thus, we obtained a\r\nsolution in (or depending on the implementation). There is also a faster\r\nsolution in , but it was not required for this problem.\r\n",
    "name": "B. Black Cells",
    "statement": "You are given a strip divided into cells, numbered from left to right\r\nfrom 0 to 10^{18}. Initially, all cells are white.You can perform the\r\nfollowing operation: choose two cells i and j, such that i\r\nne j and |i - j|\r\nle k, and paint them black.A list a is given. All cells from this list\r\nmust be painted black. Additionally, cell that is not in this list can\r\nalso be painted black. Your task is to determine the minimum value of k\r\nfor which this is possible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std; using ll = int64_t; void solve(){\tint N;\tcin >> N;\tvector<ll> A(N);\tfor(int i = 0; i < N; i++) cin >> A[i];\tif(N % 2 == 0){\t\tll ans = 0;\t\tfor(int i = 0; i < N; i += 2){\t\t\tans = max(ans, abs(A[i] - A[i + 1]));\t\t}\t\tcout << ans << '\\n';\t} else {\t\tvector<ll> pref_max(N / 2 + 1, 0);\t\tvector<ll> suff_max(N / 2 + 1, 0);\t\tfor(int i = 0; i + 1 < N; i += 2){\t\t\tint a = i/2;\t\t\tpref_max[a + 1] = max(pref_max[a], abs(A[i] - A[i + 1]));\t\t}\t\tfor(int i = N-2; i >= 0; i -= 2){\t\t\tint a = N/2 - 1 - i/2;\t\t\tsuff_max[a + 1] = max(suff_max[a], abs(A[i] - A[i + 1]));\t\t}\t\tll ans = 2e18;\t\tfor(int i = 0; i <= N/2; i++){\t\t\tans = min(ans, max(pref_max[i], suff_max[N/2 - i]));\t\t}\t\tif(ans == 0) ans = 1;\t\tcout << ans << '\\n';\t}} int main(){\tios_base::sync_with_stdio(false), cin.tie(nullptr);\tint T;\tcin >> T;\twhile(T--) solve();}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Black Cells.json",
    "hint": []
}