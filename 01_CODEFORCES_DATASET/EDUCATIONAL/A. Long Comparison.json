{
    "link": "https://codeforces.com//contest/1613/problem/A",
    "problemId": "1209361",
    "problem_idx": "A",
    "shortId": "1613A",
    "contest_number": "1613",
    "problem_submissions": {
        "F": [
            137662460,
            137680102,
            137669930,
            137680388,
            137676481,
            137689054,
            137677544,
            137670783,
            137684225,
            137683109,
            137695659,
            137689822,
            137678272,
            137672898,
            137688331,
            137700851,
            137691450,
            137776678,
            137775393,
            137689226,
            137689675,
            137703031
        ],
        "E": [
            137655072,
            137656585,
            137663380,
            137661012,
            137661380,
            137660230,
            137663524,
            137662766,
            137664563,
            137669185,
            137669422,
            137670709,
            137669302,
            137681566,
            137674305,
            137665393,
            137678462,
            137670584,
            137679435,
            137664635
        ],
        "D": [
            137646881,
            137645109,
            137652424,
            137648321,
            137652518,
            137652740,
            137657211,
            137653818,
            137651858,
            137656413,
            137653916,
            137656694,
            137657143,
            137657455,
            137659528,
            137655936,
            137665693,
            137656041,
            137646478,
            137655272
        ],
        "C": [
            137634971,
            137635045,
            137641150,
            137632004,
            137642031,
            137634798,
            137639433,
            137636954,
            137638798,
            137636121,
            137638972,
            137644414,
            137635322,
            137642182,
            137647281,
            137639264,
            137643162,
            137637445,
            137634607,
            137639818
        ],
        "B": [
            137631052,
            137629986,
            137635688,
            137629262,
            137630431,
            137630193,
            137632384,
            137630955,
            137634981,
            137632132,
            137632097,
            137637773,
            137629234,
            137636896,
            137636754,
            137634314,
            137635536,
            137633727,
            137630130,
            137635595
        ],
        "A": [
            137628660,
            137628698,
            137630882,
            137628467,
            137628655,
            137628608,
            137630089,
            137628835,
            137631891,
            137629156,
            137628914,
            137629328,
            137628519,
            137632470,
            137630776,
            137629772,
            137629039,
            137628924,
            137628505,
            137630736
        ]
    },
    "name": "A. Long Comparison",
    "statement": "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a\r\nspecific format: a positive integer x with p zeros appended to its\r\nend.Now Monocarp asks you to compare these two numbers. Can you help\r\nhim?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define all(x) (x).begin(), (x).end()\n#define itn int\n#define make_unique(x) sort((x).begin(), (x).end()); (x).erase(unique((x).begin(), (x).end()), (x).end())\n\nusing namespace std;\n\ninline int nxt() {\n\tint x;\n\tcin >> x;\n\treturn x;\n}\n\nvoid solve() {\n\tlong long x1 = nxt(), p1 = nxt();\n\tlong long x2 = nxt(), p2 = nxt();\n\tif (to_string(x1).length() + p1 != to_string(x2).length() + p2) {\n\t\tcout << (to_string(x1).length() + p1 < to_string(x2).length() + p2 ? '<' : '>') << \"\\n\";\n\t} else {\n\t\twhile (p1 > p2) {\n\t\t\tx1 *= 10;\n\t\t\t--p1;\n\t\t}\n\t\twhile (p2 > p1) {\n\t\t\tx2 *= 10;\n\t\t\t--p2;\n\t\t}\n\t\tif (x1 == x2) {\n\t\t\tcout << \"=\\n\";\n\t\t} else {\n\t\t\tcout << (x1 < x2 ? \"<\" : \">\") << \"\\n\";\n\t\t}\n\t}\n}\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\n\tint t = nxt();\n\twhile (t--) {\n\t\tsolve();\n\t}\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Long Comparison.json",
    "editorial_link": "https://codeforces.com//blog/entry/97467",
    "editorial": "First, letâs say that appending the number with zeros is the same as\r\nmultiplying it by .The given numbers are so large that they canât fit\r\ninto any reasonable integer type. Even if you use a language with\r\nunlimited length integers (python, for example) or store the numbers in\r\nstrings, you should still face the time limit issue. So letâs learn to\r\nshrink the numbers a bit.Note that the result of the comparison of two\r\nnumbers doesnât change if you divide both numbers by the same positive\r\nnumber. So we can keep dividing both numbers by until one of them is not\r\ndivisible anymore. Letâs also ignore the trailing zeros in and and leave\r\nthem as is. If the first number is appended with zeros and the second\r\nnumbers is appended with zeros, we can subtract from both values,\r\neffectively dividing both numbers by .This way, one of the numbers\r\nbecomes short enough to fit into an integer type (because it has and is\r\nonly up to ). The other number might still be large enough.However, if\r\nitâs really large, we can instantly say that itâs larger than another\r\none. Say, if its is at least . This number it at least and the other\r\nnumber is at most .Otherwise, we can calculate this number as well and\r\ncompare the values normally.Overall complexity: per testcase.\r\n",
    "hint": []
}