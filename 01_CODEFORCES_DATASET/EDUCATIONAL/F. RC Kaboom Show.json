{"link": "https://codeforces.com//contest/1359/problem/F", "problemId": "634677", "problem_idx": "F", "shortId": "1359F", "contest_number": "1359", "problem_submissions": {"C": [81997007, 81727058, 81734733, 81730835, 81740916, 81747939, 81729612, 81737303, 81737447, 81741656, 81752868, 81776094, 81761832, 81724495, 81746226, 81738450, 81730327, 81729715, 81731437, 81744227, 81733481], "F": [81812419, 81764295, 81854273, 81854109, 81853958, 81778328, 81787414, 81786228, 81796920, 81794151, 81788283, 81787937, 81784721, 81790808, 81789636, 81804129, 81796060, 81778353, 81798275, 105524321, 105524094, 105524008, 81799361, 81796754, 81795964, 81808154, 81868467, 205746151, 205745147, 140844519], "D": [81739116, 81744503, 81735878, 81749048, 81740279, 81749196, 81744086, 81743897, 81754255, 81762454, 81758312, 81744429, 81728105, 81726622, 81721526, 81737234, 81738327, 81737186, 81731810, 81739976], "E": [81734306, 81750721, 81743059, 81759597, 81729601, 81756849, 81752573, 81749938, 81761248, 81768636, 81784969, 81729272, 81731972, 81733967, 81747782, 81743404, 81743235, 81742828, 81736556, 81742484], "B": [81716705, 81725433, 81718596, 81720832, 81719267, 81716337, 81719010, 81727250, 81721619, 81746513, 81720940, 81767813, 81716284, 81717634, 81717996, 81719942, 81719713, 81719807, 81718363, 81718512], "A": [81715063, 81720474, 81715122, 81715707, 81715255, 81715098, 81715727, 81721547, 81715498, 81744191, 81715755, 81770964, 81715068, 81715226, 81715093, 81715532, 81715578, 81715424, 81715396, 81715264]}, "name": "F. RC Kaboom Show", "statement": "You know, it\u2019s hard to conduct a show with lots of participants and\r\nspectators at the same place nowadays. Still, you are not giving up on\r\nyour dream to make a car crash showcase! You decided to replace the real\r\ncars with remote controlled ones, call the event \"Remote Control Kaboom\r\nShow\" and stream everything online.For the preparation you arranged an\r\narena an infinite 2D-field. You also bought n remote controlled cars and\r\nset them up on the arena. Unfortunately, the cars you bought can only go\r\nforward without turning left, right or around. So you additionally put\r\nthe cars in the direction you want them to go.To be formal, for each car\r\ni (1\r\nle i\r\nle n) you chose its initial position (x_i, y_i) and a direction vector\r\n(dx_i, dy_i). Moreover, each car has a constant speed s_i units per\r\nsecond. So after car i is launched, it stars moving from (x_i, y_i) in\r\nthe direction (dx_i, dy_i) with constant speed s_i.The goal of the show\r\nis to create a car collision as fast as possible! You noted that\r\nlaunching every car at the beginning of the show often fails to produce\r\nany collisions at all. Thus, you plan to launch the i-th car at some\r\nmoment t_i. Note that it\u2019s not necessary for t_i to be integer and t_i\r\nis allowed to be equal to t_j for any i, j.The show starts at time 0.\r\nThe show ends when two cars i and j (i\r\nne j) collide (i. e. come to the same coordinate at the same time). The\r\nduration of the show is the time between the start and the end.What\u2019s\r\nthe fastest crash you can arrange by choosing all t_i? If it\u2019s possible\r\nto arrange a crash then print the shortest possible duration of the\r\nshow. Otherwise, report that it\u2019s impossible.\r\n", "solutions": ["#ifdef DEBUG\n#define _GLIBCXX_DEBUG\n#endif\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long double ld;\ntypedef long long ll;\nconst ld EPS = 1E-12;\n\nconst int maxN = 25000 + 10;\nint x[maxN], y[maxN], dx[maxN], dy[maxN], ss[maxN];\nint n;\n\nstruct pt {\n    ld x, y;\n    pt(ld x, ld y) : x(x), y(y) {}\n};\n\nstruct seg {\n    pt p, q;\n    int id;\n    seg(pt& x, pt& y, int& id) : p(x), q(y), id(id) {}\n\n    double get_y (double x) const {\n        if (abs (p.x - q.x) < EPS)  return p.y;\n        return p.y + (q.y - p.y) * (x - p.x) / (q.x - p.x);\n    }\n};\n\n\ninline bool intersect1d (ld l1, ld r1, ld l2, ld r2) {\n    if (l1 > r1)  swap (l1, r1);\n    if (l2 > r2)  swap (l2, r2);\n    return max (l1, l2) <= min (r1, r2) + EPS;\n}\n\ninline int vec (const pt & a, const pt & b, const pt & c) {\n    ld s = (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);\n    return abs(s)<EPS ? 0 : s>0 ? +1 : -1;\n}\n\nbool intersect (const seg & a, const seg & b) {\n    return intersect1d (a.p.x, a.q.x, b.p.x, b.q.x)\n           && intersect1d (a.p.y, a.q.y, b.p.y, b.q.y)\n           && vec (a.p, a.q, b.p) * vec (a.p, a.q, b.q) <= 0\n           && vec (b.p, b.q, a.p) * vec (b.p, b.q, a.q) <= 0;\n}\n\n\nbool operator< (const seg & a, const seg & b) {\n    double x = max (min (a.p.x, a.q.x), min (b.p.x, b.q.x));\n    return a.get_y(x) < b.get_y(x) - EPS;\n}\n\n\nstruct has_inter {\n\n    struct event {\n        ld x;\n        int tp, id;\n\n        event() {}\n\n        event(ld x, int tp, int id)\n            : x(x), tp(tp), id(id) {}\n\n        bool operator<(const event &e) const {\n            if (abs(x - e.x) > EPS) return x < e.x;\n            return tp > e.tp;\n        }\n    };\n\n    set<seg> s;\n    vector<set<seg>::iterator> where;\n\n    inline set<seg>::iterator prev(set<seg>::iterator it) {\n        return it == s.begin() ? s.end() : --it;\n    }\n\n    inline set<seg>::iterator next(set<seg>::iterator it) {\n        return ++it;\n    }\n\n    pair<int, int> solve(const vector<seg> &a) {\n        int n = (int) a.size();\n        vector<event> e;\n        for (int i = 0; i < n; ++i) {\n            e.push_back(event(min(a[i].p.x, a[i].q.x), +1, i));\n            e.push_back(event(max(a[i].p.x, a[i].q.x), -1, i));\n        }\n        sort(e.begin(), e.end());\n\n        s.clear();\n        where.resize(a.size());\n        for (size_t i = 0; i < e.size(); ++i) {\n            int id = e[i].id;\n            if (e[i].tp == +1) {\n                auto nxt = s.lower_bound(a[id]), prv = prev(nxt);\n                if (nxt != s.end() && intersect(*nxt, a[id]))\n                    return make_pair(nxt->id, id);\n                if (prv != s.end() && intersect(*prv, a[id]))\n                    return make_pair(prv->id, id);\n                where[id] = s.insert(nxt, a[id]);\n            } else {\n                auto nxt = next(where[id]), prv = prev(where[id]);\n                if (nxt != s.end() && prv != s.end() && intersect(*nxt, *prv))\n                    return make_pair(prv->id, nxt->id);\n                s.erase(where[id]);\n            }\n        }\n\n        return make_pair(-1, -1);\n    }\n};\nbool has(ld T) {\n    vector < seg > f;\n    for (int i = 1; i <= n; i++) {\n        pt c1{(ld)x[i], (ld)y[i]};\n        ld D = sqrt(dx[i] * dx[i] + dy[i] * dy[i]);\n        pt c2{x[i] + T * ss[i] * dx[i] / D, y[i] + T * ss[i] * dy[i] / D};\n        f.emplace_back(c1, c2, i);\n    }\n    has_inter Q;\n    return Q.solve(f).first != -1;\n}\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n//    freopen(\"input.txt\", \"r\", stdin);\n    cin >> n;\n    for (int i = 1; i <= n; i++) {\n        cin >> x[i] >> y[i] >> dx[i] >> dy[i] >> ss[i];\n    }\n    ld l = 0;\n    ld r = 2e12;\n    if (!has(r)) {\n        cout << \"No show :(\" << '\\n';\n    }\n    else {\n        for (int it = 0; it < 75; it++) {\n            ld mid = (l + r) / 2;\n            if (has(mid)) r = mid;\n            else l = mid;\n        }\n        cout << fixed << setprecision(12) << (l + r) / 2 << '\\n';\n    }\n    return 0;\n}"], "input": "", "output": "", "tags": ["binary search", "brute force", "data structures", "geometry", "math"], "dificulty": "2900", "interactive": false}