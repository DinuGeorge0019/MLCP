{
    "link": "https://codeforces.com//contest/1612/problem/B",
    "problemId": "1198236",
    "problem_idx": "B",
    "shortId": "1612B",
    "contest_number": "1612",
    "problem_submissions": {
        "F": [
            136454446,
            136443408,
            136448569,
            136447134,
            136456076,
            136455474,
            136456753,
            136447271,
            136463331,
            136457585,
            136451795,
            136455146,
            136466801,
            136458322,
            136466012,
            136470454,
            136470912,
            136437898,
            136449817
        ],
        "G": [
            136441097,
            136445642,
            136443193,
            136435909,
            136444442,
            136447874,
            136444457,
            136453773,
            136451816,
            136466000,
            136464894,
            136468423,
            136436868,
            136467114,
            136451881,
            136455169,
            136439762,
            136431665,
            136483294,
            136433577,
            136448604
        ],
        "E": [
            136432700,
            136437971,
            136478291,
            136437457,
            136451828,
            136439707,
            136440209,
            136458464,
            136439310,
            136440686,
            136441493,
            136444282,
            136445062,
            136445391,
            136571543,
            136452932,
            136447870,
            136444392,
            136446716,
            136451569,
            136449325,
            136458083,
            136453137,
            136438833
        ],
        "D": [
            136427875,
            136432221,
            136431776,
            136429717,
            136432159,
            136428903,
            136429714,
            136434455,
            136434329,
            136431021,
            136438170,
            136439001,
            136445408,
            136437693,
            136436906,
            136425598,
            136443833,
            136454774,
            136454860,
            136431686
        ],
        "C": [
            136427045,
            136429953,
            136429634,
            136424300,
            136429072,
            136425761,
            136426268,
            136430944,
            136430349,
            136427934,
            136434022,
            136430101,
            136430333,
            136432880,
            136433170,
            136439471,
            136433291,
            136452483,
            136456465,
            136428370
        ],
        "B": [
            136424559,
            136426931,
            136427614,
            136426640,
            136425629,
            136432355,
            136424153,
            136427726,
            136427375,
            136424825,
            136429445,
            136426911,
            136426490,
            136429175,
            136430275,
            136436731,
            136428475,
            136450629,
            136459018,
            136425566
        ],
        "A": [
            136423641,
            136423524,
            136423454,
            136423614,
            136423605,
            136434187,
            136423437,
            136423664,
            136423746,
            136423549,
            136423622,
            136423647,
            136423440,
            136424189,
            136425302,
            136430159,
            136424218,
            136448121,
            136459267,
            136423589
        ]
    },
    "name": "B. Special Permutation",
    "statement": "A permutation of length n is an array p=[p_1,p_2,\r\ndots, p_n] which contains every integer from 1 to n (inclusive) exactly\r\nonce. For example, p=[4, 2, 6, 5, 3, 1] is a permutation of length 6.You\r\nare given three integers n, a and b, where n is an even number. Print\r\nany permutation of length n that the minimum among equals a and the\r\nmaximum among equals b. Print if no such permutation exists.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define mp make_pair\n#define pb push_back\n#define x first\n#define y second\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntemplate <typename T> void chkmax(T &x,T y){x<y?x=y:T();}\ntemplate <typename T> void chkmin(T &x,T y){y<x?x=y:T();}\ntemplate <typename T> void readint(T &x)\n{\n\tx=0;int f=1;char c;\n\tfor(c=getchar();!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=x*10+(c-'0');\n\tx*=f;\n}\n/*const int MOD=;\ninline int dmy(int x){return x>=MOD?x-MOD:x;}\ninline void inc(int &x,int y){x=dmy(x+y);}\nint qmi(int x,int y)\n{\n\tint ans=1;\n\tfor(;y;y>>=1,x=1ll*x*x%MOD)\n\t\tif(y&1)ans=1ll*ans*x%MOD;\n\treturn ans;\n}*/\nconst int MAXN=105;\n\nint n,x,y,a[MAXN];\nvoid solve()\n{\n\treadint(n),readint(x),readint(y);\n\ta[1]=x;\n\tfor(int i=2,cur=n;i<=n/2;++i)\n\t{\n\t\twhile(cur==x||cur==y)--cur;\n\t\ta[i]=cur;--cur;\n\t}\n\tfor(int i=n/2+1,cur=1;i<n;++i)\n\t{\n\t\twhile(cur==x||cur==y)++cur;\n\t\ta[i]=cur;++cur;\n\t}\n\ta[n]=y;\n\tbool fl=1;\n\tfor(int i=1;i<=n/2;++i)if(a[i]<x){fl=0;break;}\n\tfor(int i=n/2+1;i<=n;++i)if(a[i]>y){fl=0;break;}\n\tif(!fl)printf(\"-1\\n\");\n\telse\n\t{\n\t\tfor(int i=1;i<=n;++i)printf(\"%d \",a[i]);\n\t\tputchar('\\n');\n\t}\n}\n\nint main()\n{\n\t#ifdef LOCAL\n\tfreopen(\"code.in\",\"r\",stdin);\n//\tfreopen(\"code.out\",\"w\",stdout);\n\t#endif\n\tint T;\n\treadint(T);\n\twhile(T--)solve();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Special Permutation.json",
    "editorial_link": "https://codeforces.com//blog/entry/97164",
    "editorial": "There are many different constructions that give the correct answer, if\r\nit exists. In my opinion, one of the most elegant is the following one.\r\nshould always be present in the left half, and should be present in the\r\nright half, but the exact order of elements in each half doesnât matter.\r\nSo, it will never be wrong to put in the first position, and in the\r\nsecond position.As for the remaining elements, we want elements of the\r\nleft half to be as big as possible (since they shouldnât be less than ),\r\nand elements of the right half as small as possible (since they\r\nshouldnât be greater than ). Letâs put the elements , , , ...,\r\n(excluding and ) on positions , , , ..., , respectively, so the elements\r\nin the left half are as big as possible, and the elements in the right\r\nhalf are as small as possible.After constructing a permutation according\r\nto these rules, we should check if it meets the constraints (and print\r\nit if it does).\r\n",
    "hint": []
}