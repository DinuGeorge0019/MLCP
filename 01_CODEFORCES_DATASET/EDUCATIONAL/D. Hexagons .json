{
    "link": "https://codeforces.com//contest/630/problem/D",
    "problemId": "48789",
    "problem_idx": "D",
    "shortId": "630D",
    "contest_number": "630",
    "problem_submissions": {
        "O": [
            16162903,
            16166611,
            16170272,
            16171000,
            16171810,
            16171540,
            16172283,
            16173069,
            16167245,
            16171219,
            16164343,
            16169317,
            16174467,
            16172825
        ],
        "Q": [
            16161959,
            16164291,
            16168164,
            16164256,
            16165332,
            16161924,
            16168611,
            16169122,
            16169587,
            16167987,
            16169984,
            16166498,
            16167531,
            16170624
        ],
        "P": [
            16159753,
            16168311,
            16167051,
            16167988,
            16168847,
            16164766,
            16173513,
            16170710,
            16173871,
            16179782,
            16173109,
            16173490,
            16172784,
            16177565
        ],
        "M": [
            16155509,
            16162573,
            16165539,
            16162684,
            16162420,
            16167688,
            16166121,
            16164621,
            16163626,
            16164560,
            16162370,
            16165223,
            16164963,
            16163595
        ],
        "E": [
            16152380,
            16160619,
            16161712,
            16147294,
            16175954,
            16175750,
            16175431,
            16166073,
            16169901,
            16175945,
            16147341,
            16150297,
            16152724,
            16177249
        ],
        "N": [
            16151590,
            16153799,
            16151528,
            16157513,
            16146949,
            16155784,
            16150975,
            16151370,
            16158313,
            16151633,
            16163001,
            16163835,
            16162449,
            16154984
        ],
        "R": [
            16151159,
            16154632,
            16149854,
            16156275,
            16152605,
            16151989,
            16161091,
            16150805,
            16162196,
            16170548,
            16164486,
            16157270
        ],
        "K": [
            16150889,
            16150119,
            16148623,
            16153831,
            16147112,
            16154207,
            16149001,
            16147948,
            16151167,
            16150379,
            16157788,
            16162488,
            16148339,
            16146783
        ],
        "J": [
            16149936,
            16145918,
            16144654,
            16150906,
            16145412,
            16145798,
            16147365,
            16144163,
            16149421,
            16146206,
            16155219,
            16146266,
            16145884,
            16145928
        ],
        "I": [
            16149446,
            16159581,
            16153928,
            16168967,
            16155732,
            16149794,
            16155421,
            16153120,
            16161689,
            16156527,
            16159462
        ],
        "H": [
            16148788,
            16153028,
            16147725,
            16150057,
            16150523,
            16147874,
            16147074,
            16150571,
            16153180,
            16152828,
            16155334
        ],
        "G": [
            16145821,
            16151098,
            16146735,
            16149212,
            16151570,
            16153204,
            16152288,
            16148784,
            16152025,
            16152257,
            16151581
        ],
        "F": [
            16145172,
            16147675,
            16146138,
            16147927,
            16145028,
            16146758,
            16146367,
            16146858,
            16150133,
            16146605,
            16150882,
            16147502
        ],
        "D": [
            16144568,
            16145159,
            16145434,
            16145697,
            16147726,
            16145377,
            16150271,
            16145822,
            16145733,
            16147562,
            16145418,
            16150369,
            16148886,
            16145271
        ],
        "C": [
            16144140,
            16145561,
            16144178,
            16144987,
            16144428,
            16144887,
            16145346,
            16144900,
            16145360,
            16145353,
            16144827,
            16144860,
            16145310,
            16144685
        ],
        "B": [
            16143836,
            16144446,
            16145107,
            16269732,
            16144253,
            16144142,
            16144388,
            16144927,
            16144633,
            16144917,
            16144673,
            16144408,
            16144556,
            16144704,
            16144100
        ],
        "A": [
            16143484,
            16143767,
            16143487,
            16143551,
            16143694,
            16143671,
            16143921,
            16143662,
            16143576,
            16143506,
            16143977,
            16143785,
            16143578,
            16143548,
            16143505
        ],
        "L": [
            16156555,
            16156947,
            16160816,
            16157607,
            16162858,
            16158499,
            16154525,
            16148850,
            16158336,
            16159403,
            16163163,
            16162239
        ]
    },
    "name": "D. Hexagons ",
    "statement": "After a probationary period in the game development company of IT City\r\nPetya was included in a group of the programmers that develops a new\r\nturn-based strategy game resembling the well known \"Heroes of Might &\r\nMagic\". A part of the game is turn-based fights of big squadrons of\r\nenemies on infinite fields where every cell is in form of a hexagon.Some\r\nof magic effects are able to affect several field cells at once, cells\r\nthat are situated not farther than cells away from the cell in which the\r\neffect was applied. The distance between cells is the minimum number of\r\ncell border crosses on a path from one cell to another.It is easy to see\r\nthat the number of cells affected by a magic effect grows rapidly when\r\nincreases, so it can adversely affect the game performance. That’s why\r\nPetya decided to write a program that can, given , determine the number\r\nof cells that should be repainted after effect application, so that game\r\ndesigners can balance scale of the effects and the game performance.\r\nHelp him to do it. Find the number of hexagons situated not farther than\r\ncells away from a given cell.\r\n",
    "solutions": [
        "/**\n *    author:  enot.1.10, Vladimir Smykalov ([email protected])\n *    created: 18.02.2016 17:50:32       \n**/\n#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\n#define F first\n#define S second\n#define pb push_back\n#define mp make_pair\n#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)\n#define eprintf(...) fprintf(stderr, __VA_ARGS__),fflush(stderr)\n#define sz(a) ((int)(a).size())\n#define all(a) (a).begin(),a.end()\n#define pw(x) (1LL<<(x))\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef double dbl;\ntypedef vector<int> vi;\ntypedef pair<int, int> pi;\n\nconst int inf = (int)1.01e9;\nconst dbl eps = 1e-9;\n\n/* --- main part --- */\n\n#define TASK \"1\"\n\n\n\nint main()\n{\n    #ifdef home\n        assert(freopen(TASK\".in\", \"r\", stdin));\n        assert(freopen(TASK\".out\", \"w\", stdout));\n    #endif\n    ll n, t;\n\n    cin >> n;\n    cout << n * (n + 1) * 3 + 1;\n    #ifdef home\n        eprintf(\"Time: %d ms\\n\", (int)(clock() * 1000. / CLOCKS_PER_SEC));\n    #endif\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Hexagons .json",
    "editorial_link": "https://codeforces.com//blog/entry/23604?locale=en",
    "editorial": "Let's count the number of cells having the distance of exactly n. For n?=?0 it is 1, for n?=?1 it is 6, for n?=?2 it is 12, for n?=?3 it is 18 and so on. One can notice that n?=?0 is a special case, and then the amount increases by addition of 6. These numbers form an arithmetic progression. In the problem we need to sum these numbers. The formula of the sum of an arithmetic progression is (first?+?last)·amount?/?2. The first is 6, the last is 6n, the amount is n. So the sum is (6?+?6n)n?/?2?=?3(n?+?1)n. And plus 1 that is not in the arithmetic progression. So the final formula is 1?+?3n(n?+?1).\n\nTo avoid overflow, multiplication in the formula should be performed in 64-bit integer type. For this either 3 or 1 or n should have 64-bit integer type. The literals are 64-bit integer when they have suffix L in Java or LL in C++.",
    "hint": []
}