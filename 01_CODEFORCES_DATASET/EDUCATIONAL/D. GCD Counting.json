{
    "link": "https://codeforces.com//contest/1101/problem/D",
    "problemId": "281057",
    "problem_idx": "D",
    "shortId": "1101D",
    "contest_number": "1101",
    "problem_submissions": {
        "G": [
            48239479,
            48229345,
            48232833,
            48236005,
            48238584,
            48237077,
            48239817,
            48236726,
            48424442,
            48241897,
            48244236,
            48246271,
            48243763,
            48241853,
            48248346,
            48243669,
            48239804,
            48232428,
            48236056,
            48233716
        ],
        "F": [
            48234729,
            48238339,
            48245658,
            48241971,
            48243102,
            48243980,
            48248208,
            48253790,
            48249237,
            48251881,
            48251772,
            48254209,
            48250740,
            48252733,
            48257301,
            48253052,
            48236429,
            48245061,
            48242715,
            48241926,
            48292686,
            48258183
        ],
        "E": [
            48227685,
            48224274,
            48222676,
            48226514,
            48225235,
            48225759,
            48224993,
            48229382,
            48234805,
            48231496,
            48237158,
            48276590,
            48233129,
            48237913,
            48231111,
            48230324,
            48226575,
            48224137,
            48222074,
            48228244,
            48223937
        ],
        "D": [
            48225904,
            132803821,
            132802920,
            48232171,
            48230596,
            48230036,
            48246912,
            48230700,
            48231186,
            48232249,
            48228292,
            48232968,
            48229870,
            48235723,
            48238573,
            48253038,
            48236119,
            48237471,
            48242160,
            48224926,
            48233664,
            48227806,
            48238739,
            48236228
        ],
        "C": [
            48220755,
            48221737,
            48220938,
            48222851,
            48222128,
            48224023,
            48222001,
            48221817,
            48228289,
            48227053,
            48229439,
            48222389,
            48224672,
            48228555,
            48228217,
            48221108,
            48222667,
            48220453,
            48229806,
            48227541
        ],
        "B": [
            48218348,
            48218521,
            48218025,
            48219067,
            48219419,
            48219511,
            48219183,
            48218594,
            48221174,
            48217036,
            48221983,
            48224393,
            48219257,
            48217297,
            48224770,
            48217931,
            48218900,
            50490666,
            48220404,
            48221056
        ],
        "A": [
            48216068,
            48216088,
            48215851,
            48216101,
            48215964,
            48215856,
            48216330,
            48216376,
            48215843,
            48215822,
            48218304,
            48215863,
            48216823,
            48215814,
            48216519,
            48216032,
            48215829,
            48216427,
            48216203
        ]
    },
    "name": "D. GCD Counting",
    "statement": "You are given a tree consisting of n vertices. A number is written on\r\neach vertex; the number on vertex i is equal to a_i.Let\u2019s denote the\r\nfunction g(x, y) as the greatest common divisor of the numbers written\r\non the vertices belonging to the simple path from vertex x to vertex y\r\n(including these two vertices). Also let\u2019s denote dist(x, y) as the\r\nnumber of vertices on the simple path between vertices x and y,\r\nincluding the endpoints. dist(x, x) = 1 for every vertex x.Your task is\r\ncalculate the maximum value of dist(x, y) among such pairs of vertices\r\nthat g(x, y) > 1.\r\n",
    "solutions": [
        "#include <algorithm>  \n#include <iostream>  \n#include <sstream>  \n#include <string>  \n#include <vector>  \n#include <queue>  \n#include <set>  \n#include <map>  \n#include <cstdio>  \n#include <cstdlib>  \n#include <cctype>  \n#include <cmath>  \n#include <cstring>\n#include <list>  \n#include <cassert>\n#include <climits>\n#include <bitset>\nusing namespace std;  \n\n#define PB push_back  \n#define MP make_pair  \n#define SZ(v) ((int)(v).size())  \n#define FOR(i,a,b) for(int i=(a);i<(b);++i)  \n#define REP(i,n) FOR(i,0,n)  \n#define FORE(i,a,b) for(int i=(a);i<=(b);++i)  \n#define REPE(i,n) FORE(i,0,n)  \n#define FORSZ(i,a,v) FOR(i,a,SZ(v))  \n#define REPSZ(i,v) REP(i,SZ(v))  \ntypedef long long ll;  \nint gcd(int a,int b) { return b==0?a:gcd(b,a%b); }\n\nconst int MAXN=200000;\nconst int MAXVAL=200000;\n\nint n;\nint val[MAXN];\nvector<int> adj[MAXN];\n\nint pmn[MAXVAL+1];\nvector<int> who[MAXVAL+1];\n\nint mark[MAXN];\nint q[MAXN],qhead,qtail;\nint d[MAXN];\n\npair<int,int> farthest(int p,int s) {\n\tqhead=qtail=0; d[s]=0,q[qhead++]=s;\n\twhile(qtail<qhead) { int at=q[qtail++]; REPSZ(i,adj[at]) { int to=adj[at][i]; if(mark[to]!=p||d[to]!=-1) continue; d[to]=d[at]+1,q[qhead++]=to; } }\n\tint u=q[qhead-1];\n\tpair<int,int> ret=MP(u,d[u]);\n\tREP(i,qhead) { int at=q[i]; d[at]=-1; }\n\treturn ret;\n}\n\nint calc(int p,int s) {\n\t//printf(\"calc(%d,%d)\\n\",p,s+1);\n\tqhead=qtail=0; q[qhead++]=s,mark[s]=p; while(qtail<qhead) { int at=q[qtail++]; REPSZ(i,adj[at]) { int to=adj[at][i]; if(val[to]%p!=0||mark[to]==p) continue; q[qhead++]=to,mark[to]=p; } }\n\tint u=farthest(p,s).first;\n\treturn farthest(p,u).second+1;\n}\n\nint solve() {\n\tmemset(pmn,-1,sizeof(pmn)); FORE(i,2,MAXVAL) if(pmn[i]==-1) for(int j=i;j<=MAXVAL;j+=i) if(pmn[j]==-1) pmn[j]=i;\n\tREPE(i,MAXVAL) who[i].clear();\n\tREP(i,n) { int x=val[i]; while(x!=1) { int p=pmn[x]; while(x%p==0) x/=p; who[p].PB(i); } }\n\n\tint ret=0;\n\tREP(i,n) mark[i]=-1,d[i]=-1;\n\tREPE(p,MAXVAL) if(SZ(who[p])>0) {\n\t\t//printf(\"%d:\",p); REPSZ(i,who[p]) printf(\" %d\",who[p][i]+1); puts(\"\");\n\t\tREPSZ(i,who[p]) {\n\t\t\tint at=who[p][i]; if(mark[at]==p) continue;\n\t\t\tint cur=calc(p,at);\n\t\t\tret=max(ret,cur);\n\t\t}\n\t}\n\treturn ret;\n}\n\nvoid run() {\n\tscanf(\"%d\",&n);\n\tREP(i,n) scanf(\"%d\",&val[i]);\n\tREP(i,n-1) { int a,b; scanf(\"%d%d\",&a,&b); --a,--b; adj[a].PB(b); adj[b].PB(a); }\n\tprintf(\"%d\\n\",solve());\n}\n\nint main() {\n\trun();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dfs and similar",
        "dp",
        "number theory",
        "trees"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. GCD Counting.json",
    "editorial_link": "https://codeforces.com/blog/entry/64483",
    "editorial": "I know there exists solution and author of the problem promises to tell\r\nit to you (here he explained it). I\u00e2\u0080\u0099d love to tell easier to code and\r\nabout the same time to work solution.At first, notice that it is only\r\nenough to check the paths such that all vertices on it is divisible by\r\nsome prime.Let\u00e2\u0080\u0099s for each calculate the path of the maximum length to\r\npass through it. That means that one part of this path goes down to one\r\nchild of it and another part goes down to another child.For each vertex\r\nwe will store the lengths of maximum paths through vertices with values\r\ndivisible by each prime in . That is memory. To recalc the answer we\r\nwill store all values of children nodes, sort them and update the answer\r\nwith two pointers technique.Don\u00e2\u0080\u0099t forget about the case of !Overall\r\ncomplexity: .\r\n"
}