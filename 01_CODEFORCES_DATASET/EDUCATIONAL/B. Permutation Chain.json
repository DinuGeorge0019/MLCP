{"link": "https://codeforces.com//contest/1716/problem/B", "problemId": "1494201", "problem_idx": "B", "shortId": "1716B", "contest_number": "1716", "problem_submissions": {"F": [166973182, 166969763, 166955726, 166980503, 166971153, 166982692, 166980605, 166983476, 166980127, 166991091, 166984328, 174506735, 166989832, 166994539, 166994104, 167001346, 166987296, 166992176, 167001598, 166984678, 166980048, 166989609, 166991438], "E": [166965293, 166978547, 166976884, 166972995, 166981522, 166965872, 166976854, 166973781, 166987347, 166978953, 166992476, 174506754, 166979608, 166979158, 166999544, 166982891, 166981173, 166992198, 166994171, 166998037, 166985315], "D": [166956573, 166961021, 166948324, 166940829, 166964589, 166961790, 166945640, 166966226, 166990484, 166958577, 166963786, 166970823, 166970282, 166968378, 166964318, 166974075, 166965600, 166970563, 166970355, 166971544, 166978778], "C": [166949159, 166950864, 166972142, 166963779, 166956508, 166957181, 166966957, 166958122, 166972096, 166974861, 166961876, 166963035, 166961356, 166959918, 166967210, 166954669, 166964729, 166960756, 166967143, 166974763], "B": [166933142, 166932739, 166939087, 166932145, 166933138, 166932019, 166931348, 166934835, 166932251, 166931312, 166937500, 166936523, 166932821, 166932877, 166940841, 166932031, 166935420, 166935573, 166933744, 166937079], "A": [166930228, 166930333, 166931520, 166930280, 166930300, 166930222, 166930190, 166930301, 166930500, 166930207, 166932038, 166930537, 166930220, 166930271, 166933329, 166930353, 166930639, 166930376, 166930158, 166931421]}, "name": "B. Permutation Chain", "statement": "A permutation of length n is a sequence of integers from 1 to n such\r\nthat each integer appears in it exactly once.Let the fixedness of a\r\npermutation p be the number of fixed points in it the number of\r\npositions j such that p_j = j, where p_j is the j-th element of the\r\npermutation p.You are asked to build a sequence of permutations a_1,\r\na_2,\r\ndots, starting from the identity permutation (permutation a_1 = [1, 2,\r\ndots, n]). Let\u2019s call it a permutation chain. Thus, a_i is the i-th\r\npermutation of length n.For every i from 2 onwards, the permutation a_i\r\nshould be obtained from the permutation a_{i-1} by swapping any two\r\nelements in it (not necessarily neighboring). The fixedness of the\r\npermutation a_i should be strictly lower than the fixedness of the\r\npermutation a_{i-1}.Consider some chains for n = 3: a_1 = [1, 2, 3], a_2\r\n= [1, 3, 2] that is a valid chain of length 2. From a_1 to a_2, the\r\nelements on positions 2 and 3 get swapped, the fixedness decrease from 3\r\nto 1. a_1 = [2, 1, 3], a_2 = [3, 1, 2] that is not a valid chain. The\r\nfirst permutation should always be [1, 2, 3] for n = 3. a_1 = [1, 2, 3],\r\na_2 = [1, 3, 2], a_3 = [1, 2, 3] that is not a valid chain. From a_2 to\r\na_3, the elements on positions 2 and 3 get swapped but the fixedness\r\nincrease from 1 to 3. a_1 = [1, 2, 3], a_2 = [3, 2, 1], a_3 = [3, 1, 2]\r\nthat is a valid chain of length 3. From a_1 to a_2, the elements on\r\npositions 1 and 3 get swapped, the fixedness decrease from 3 to 1. From\r\na_2 to a_3, the elements on positions 2 and 3 get swapped, the fixedness\r\ndecrease from 1 to 0. Find the longest permutation chain. If there are\r\nmultiple longest answers, print any of them.\r\n", "solutions": ["#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n#include <array>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) {fprintf(stderr, __VA_ARGS__);fflush(stderr);}\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nvoid solve() {\n\tint n;\n\tscanf(\"%d\", &n);\n\tprintf(\"%d\\n\", n);\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 1; j <= i; j++)\n\t\t\tprintf(\"%d \", j + 1);\n\t\tprintf(\"1 \");\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t\tprintf(\"%d \", j + 1);\n\t\tprintf(\"\\n\");\n\t}\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) solve();\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "math"], "dificulty": "800", "interactive": false}