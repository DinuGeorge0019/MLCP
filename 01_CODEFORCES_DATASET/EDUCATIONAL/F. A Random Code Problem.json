{"link": "https://codeforces.com//contest/1626/problem/F", "problemId": "1263152", "problem_idx": "F", "shortId": "1626F", "contest_number": "1626", "problem_submissions": {"F": [143582629, 143582389, 143582261, 143030095, 143019770, 143017980, 143015927, 143006584, 143023462, 143045218, 143026061, 143072563, 143021001, 143025294, 143015197, 143148041, 143279801, 143279754, 143024492, 143100204, 143021824, 143021213, 143026062, 143139699, 143154043], "E": [143010407, 142989954, 143008363, 143007466, 143004225, 143013367, 143007933, 143008509, 143004621, 143020671, 143009993, 143010097, 143019395, 143017128, 143017699, 143016277, 143019421, 143018155, 143017417, 143018743], "D": [142998685, 143013473, 142988837, 142997007, 142994432, 142986599, 142991567, 142995751, 142993422, 142993529, 142995186, 142999199, 142996240, 142996592, 143000338, 142993884, 142998691, 142998238, 142999391, 143006779], "C": [142980226, 142979015, 142977662, 142982232, 142982146, 142978115, 142981893, 142985454, 142982343, 142973197, 142987870, 142983951, 142981935, 142983145, 142987103, 142984609, 142987630, 142988530, 142988589, 142986757], "B": [142966509, 142971358, 142971311, 142969795, 142977281, 142971069, 142970463, 142974139, 142973968, 142967452, 142975316, 142974511, 142969981, 142973410, 142975897, 142971054, 142977505, 142974933, 142973959, 142976717], "A": [142962825, 142965501, 142963716, 142963362, 142962925, 142962831, 142962961, 142963214, 142962815, 142962827, 142965526, 142964440, 142963478, 142962969, 142963307, 142963256, 142966097, 142963562, 142966185, 142966137]}, "name": "F. A Random Code Problem", "statement": "You are given an integer array a_0, a_1,\r\ndots, a_{n - 1}, and an integer k. You perform the following code with\r\nit:long long ans = 0; // create a 64-bit signed variable which is\r\ninitially equal to 0for(int i = 1; i <= k; i++){ int idx = rnd.next(0,\r\nn - 1); // generate a random integer between 0 and n - 1, both inclusive\r\n// each integer from 0 to n - 1 has the same probability of being chosen\r\nans += a[idx]; a[idx] -= (a[idx]\r\n", "solutions": ["#pragma region Macros\n//#pragma GCC target(\"avx2\")\n// #pragma GCC optimize(\"O3\")\n// #pragma comment(linker, \"/stack:200000000\")\n#ifdef ONLINE_JUDGE\n// #pragma GCC optimize(\"unroll-loops\")\n// #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,fma,abm,mmx,avx,avx2,tune=native\")\n// #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,fma,abm,mmx,avx,avx2\")\n// #pragma GCC target(\"avx2\")\n#endif\n#pragma GCC optimize(\"Ofast\")\n#ifdef noimi\n#define oj_local(a, b) b\n#else\n#define oj_local(a, b) a\n#endif\n\n#define LOCAL if(oj_local(0, 1))\n#define OJ if(oj_local(1, 0))\n\n#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <cctype>\n#include <cfenv>\n#include <cfloat>\n#include <chrono>\n#include <cinttypes>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstdarg>\n#include <cstddef>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <deque>\n#include <fstream>\n#include <functional>\n#include <immintrin.h>\n#include <initializer_list>\n#include <iomanip>\n#include <ios>\n#include <iostream>\n#include <istream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <map>\n#include <memory>\n#include <new>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <random>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <streambuf>\n#include <string>\n#include <tuple>\n#include <type_traits>\n#include <typeinfo>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\n\nusing namespace std;\nusing ll = long long;\nusing ull = unsigned long long int;\nusing i128 = __int128_t;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nusing ld = long double;\ntemplate <typename T> using vc = vector<T>;\ntemplate <typename T> using vvc = vector<vc<T>>;\ntemplate <typename T> using vvvc = vector<vvc<T>>;\nusing vi = vc<int>;\nusing vl = vc<ll>;\nusing vpi = vc<pii>;\nusing vpl = vc<pll>;\ntemplate <class T> using pq = priority_queue<T>;\ntemplate <class T> using pqg = priority_queue<T, vector<T>, greater<T>>;\ntemplate <typename T> int si(const T &x) { return x.size(); }\ntemplate <class T, class S> inline bool chmax(T &a, const S &b) { return (a < b ? a = b, 1 : 0); }\ntemplate <class T, class S> inline bool chmin(T &a, const S &b) { return (a > b ? a = b, 1 : 0); }\nvi iota(int n) {\n    vi a(n);\n    return iota(a.begin(), a.end(), 0), a;\n}\ntemplate <typename T> vi iota(const vector<T> &a, bool greater = false) {\n    vi res(a.size());\n    iota(res.begin(), res.end(), 0);\n    sort(res.begin(), res.end(), [&](int i, int j) {\n        if(greater) return a[i] > a[j];\n        return a[i] < a[j];\n    });\n    return res;\n}\n\n// macros\n#define overload5(a, b, c, d, e, name, ...) name\n#define overload4(a, b, c, d, name, ...) name\n#define endl '\\n'\n#define REP0(n) for(ll jidlsjf = 0; jidlsjf < n; ++jidlsjf)\n#define REP1(i, n) for(ll i = 0; i < (n); ++i)\n#define REP2(i, a, b) for(ll i = (a); i < (b); ++i)\n#define REP3(i, a, b, c) for(ll i = (a); i < (b); i += (c))\n#define rep(...) overload4(__VA_ARGS__, REP3, REP2, REP1, REP0)(__VA_ARGS__)\n#define per0(n) for(int jidlsjf = 0; jidlsjf < n; ++jidlsjf)\n#define per1(i, n) for(ll i = (n)-1; i >= 0; --i)\n#define per2(i, a, b) for(ll i = (a)-1; i >= b; --i)\n#define per3(i, a, b, c) for(ll i = (a)-1; i >= b; i -= c)\n#define per(...) overload4(__VA_ARGS__, per3, per2, per1, per0)(__VA_ARGS__)\n#define fore0(a) rep(a.size())\n#define fore1(i, a) for(auto &&i : a)\n#define fore2(a, b, v) for(auto &&[a, b] : v)\n#define fore3(a, b, c, v) for(auto &&[a, b, c] : v)\n#define fore4(a, b, c, d, v) for(auto &&[a, b, c, d] : v)\n#define fore(...) overload5(__VA_ARGS__, fore4, fore3, fore2, fore1, fore0)(__VA_ARGS__)\n#define fi first\n#define se second\n#define pb push_back\n#define ppb pop_back\n#define ppf pop_front\n#define eb emplace_back\n#define drop(s) cout << #s << endl, exit(0)\n#define si(c) (int)(c).size()\n#define lb(c, x) distance((c).begin(), lower_bound(all(c), (x)))\n#define ub(c, x) distance((c).begin(), upper_bound(all(c), (x)))\n#define rng(v, l, r) v.begin() + l, v.begin() + r\n#define all(c) begin(c), end(c)\n#define rall(c) rbegin(c), rend(c)\n#define SORT(v) sort(all(v))\n#define REV(v) reverse(all(v))\n#define UNIQUE(x) SORT(x), x.erase(unique(all(x)), x.end())\ntemplate <typename T = ll, typename S> T SUM(const S &v) { return accumulate(all(v), T(0)); }\n#define MIN(v) *min_element(all(v))\n#define MAX(v) *max_element(all(v))\n#define overload2(_1, _2, name, ...) name\n#define vec(type, name, ...) vector<type> name(__VA_ARGS__)\n#define vv(type, name, h, ...) vector<vector<type>> name(h, vector<type>(__VA_ARGS__))\n#define vvv(type, name, h, w, ...) vector<vector<vector<type>>> name(h, vector<vector<type>>(w, vector<type>(__VA_ARGS__)))\n#define vvvv(type, name, a, b, c, ...)                                                                                                                         \\\n    vector<vector<vector<vector<type>>>> name(a, vector<vector<vector<type>>>(b, vector<vector<type>>(c, vector<type>(__VA_ARGS__))))\nconstexpr pii dx4[4] = {pii{1, 0}, pii{0, 1}, pii{-1, 0}, pii{0, -1}};\nconstexpr pii dx8[8] = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};\n\nnamespace yesno_impl {\nconst string YESNO[2] = {\"NO\", \"YES\"};\nconst string YesNo[2] = {\"No\", \"Yes\"};\nconst string yesno[2] = {\"no\", \"yes\"};\nconst string firstsecond[2] = {\"second\", \"first\"};\nconst string FirstSecond[2] = {\"Second\", \"First\"};\nconst string possiblestr[2] = {\"impossible\", \"possible\"};\nvoid YES(bool t = 1) { cout << YESNO[t] << endl; }\nvoid NO(bool t = 1) { YES(!t); }\nvoid Yes(bool t = 1) { cout << YesNo[t] << endl; }\nvoid No(bool t = 1) { Yes(!t); }\nvoid yes(bool t = 1) { cout << yesno[t] << endl; }\nvoid no(bool t = 1) { yes(!t); }\nvoid first(bool t = 1) { cout << firstsecond[t] << endl; }\nvoid First(bool t = 1) { cout << FirstSecond[t] << endl; }\nvoid possible(bool t = 1) { cout << possiblestr[t] << endl; }\n}; // namespace yesno_impl\nusing namespace yesno_impl;\n\n#define INT(...)                                                                                                                                               \\\n    int __VA_ARGS__;                                                                                                                                           \\\n    IN(__VA_ARGS__)\n#define LL(...)                                                                                                                                                \\\n    ll __VA_ARGS__;                                                                                                                                            \\\n    IN(__VA_ARGS__)\n#define STR(...)                                                                                                                                               \\\n    string __VA_ARGS__;                                                                                                                                        \\\n    IN(__VA_ARGS__)\n#define CHR(...)                                                                                                                                               \\\n    char __VA_ARGS__;                                                                                                                                          \\\n    IN(__VA_ARGS__)\n#define DBL(...)                                                                                                                                               \\\n    double __VA_ARGS__;                                                                                                                                        \\\n    IN(__VA_ARGS__)\n#define VEC(type, name, size)                                                                                                                                  \\\n    vector<type> name(size);                                                                                                                                   \\\n    IN(name)\n#define VEC2(type, name1, name2, size)                                                                                                                         \\\n    vector<type> name1(size), name2(size);                                                                                                                     \\\n    for(int i = 0; i < size; i++) IN(name1[i], name2[i])\n#define VEC3(type, name1, name2, name3, size)                                                                                                                  \\\n    vector<type> name1(size), name2(size), name3(size);                                                                                                        \\\n    for(int i = 0; i < size; i++) IN(name1[i], name2[i], name3[i])\n#define VV(type, name, h, w)                                                                                                                                   \\\n    vector<vector<type>> name(h, vector<type>(w));                                                                                                             \\\n    IN(name)\nint scan() { return getchar(); }\nvoid scan(int &a) { cin >> a; }\nvoid scan(long long &a) { cin >> a; }\nvoid scan(char &a) { cin >> a; }\nvoid scan(double &a) { cin >> a; }\nvoid scan(string &a) { cin >> a; }\ntemplate <class T, class S> void scan(pair<T, S> &p) { scan(p.first), scan(p.second); }\ntemplate <class T> void scan(vector<T> &);\ntemplate <class T> void scan(vector<T> &a) {\n    for(auto &i : a) scan(i);\n}\ntemplate <class T> void scan(T &a) { cin >> a; }\nvoid IN() {}\ntemplate <class Head, class... Tail> void IN(Head &head, Tail &...tail) {\n    scan(head);\n    IN(tail...);\n}\n\ntemplate <typename T, typename S> T ceil(T x, S y) {\n    assert(y);\n    return (y < 0 ? ceil(-x, -y) : (x > 0 ? (x + y - 1) / y : x / y));\n}\n\ntemplate <typename T, typename S> T floor(T x, S y) {\n    assert(y);\n    return (y < 0 ? floor(-x, -y) : (x > 0 ? x / y : x / y - (x % y == 0 ? 0 : 1)));\n}\ntemplate <class T> T POW(T x, int n) {\n    T res = 1;\n    for(; n; n >>= 1, x *= x)\n        if(n & 1) res *= x;\n    return res;\n}\ntemplate <class T, class S> T POW(T x, S n, const ll &mod) {\n    T res = 1;\n    x %= mod;\n    for(; n; n >>= 1, x = x * x % mod)\n        if(n & 1) res = res * x % mod;\n    return res;\n}\nvector<pll> factor(ll x) {\n    vector<pll> ans;\n    for(ll i = 2; i * i <= x; i++)\n        if(x % i == 0) {\n            ans.push_back({i, 1});\n            while((x /= i) % i == 0) ans.back().second++;\n        }\n    if(x != 1) ans.push_back({x, 1});\n    return ans;\n}\ntemplate <class T> vector<T> divisor(T x) {\n    vector<T> ans;\n    for(T i = 1; i * i <= x; i++)\n        if(x % i == 0) {\n            ans.pb(i);\n            if(i * i != x) ans.pb(x / i);\n        }\n    return ans;\n}\ntemplate <typename T> void zip(vector<T> &x) {\n    vector<T> y = x;\n    UNIQUE(y);\n    for(int i = 0; i < x.size(); ++i) { x[i] = lb(y, x[i]); }\n}\ntemplate <class S> void fold_in(vector<S> &v) {}\ntemplate <typename Head, typename... Tail, class S> void fold_in(vector<S> &v, Head &&a, Tail &&...tail) {\n    for(auto e : a) v.emplace_back(e);\n    fold_in(v, tail...);\n}\ntemplate <class S> void renumber(vector<S> &v) {}\ntemplate <typename Head, typename... Tail, class S> void renumber(vector<S> &v, Head &&a, Tail &&...tail) {\n    for(auto &&e : a) e = lb(v, e);\n    renumber(v, tail...);\n}\ntemplate <class S, class... Args> vector<S> zip(vector<S> &head, Args &&...args) {\n    vector<S> v;\n    fold_in(v, head, args...);\n    sort(all(v)), v.erase(unique(all(v)), v.end());\n    renumber(v, head, args...);\n    return v;\n}\ntemplate <typename T> vector<T> RUI(const vector<T> &v) {\n    vector<T> res(v.size() + 1);\n    for(int i = 0; i < v.size(); i++) res[i + 1] = res[i] + v[i];\n    return res;\n}\n\n// x in [l, r)\ntemplate <class T, class S> bool inc(const T &x, const S &l, const S &r) { return l <= x and x < r; }\n\nconstexpr ll ten(int n) { return n == 0 ? 1 : ten(n - 1) * 10; }\n// bit \u6f14\u7b97\u7cfb\nll pow2(int i) { return 1LL << i; }\nint topbit(signed t) { return t == 0 ? -1 : 31 - __builtin_clz(t); }\nint topbit(ll t) { return t == 0 ? -1 : 63 - __builtin_clzll(t); }\nint lowbit(signed a) { return a == 0 ? 32 : __builtin_ctz(a); }\nint lowbit(ll a) { return a == 0 ? 64 : __builtin_ctzll(a); }\n// int allbit(int n) { return (1 << n) - 1; }\nconstexpr ll mask(int n) { return (1LL << n) - 1; }\n// int popcount(signed t) { return __builtin_popcount(t); }\n// int popcount(ll t) { return __builtin_popcountll(t); }\nint popcount(uint64_t t) { return __builtin_popcountll(t); }\nbool ispow2(int i) { return i && (i & -i) == i; }\n\nll rnd(ll l, ll r) { //[l, r)\n#ifdef noimi\n    static mt19937_64 gen;\n#else\n    static mt19937_64 gen(chrono::steady_clock::now().time_since_epoch().count());\n#endif\n    return uniform_int_distribution<ll>(l, r - 1)(gen);\n}\nll rnd(ll n) { return rnd(0, n); }\n\ntemplate <class t> void random_shuffle(vc<t> &a) { rep(i, si(a)) swap(a[i], a[rnd(0, i + 1)]); }\n\nint in() {\n    int x;\n    cin >> x;\n    return x;\n}\nll lin() {\n    unsigned long long x;\n    cin >> x;\n    return x;\n}\n\ntemplate <class T, class S> pair<T, S> operator-(const pair<T, S> &x, const pair<T, S> &y) { return pair<T, S>(x.fi - y.fi, x.se - y.se); }\ntemplate <class T, class S> pair<T, S> operator+(const pair<T, S> &x, const pair<T, S> &y) { return pair<T, S>(x.fi + y.fi, x.se + y.se); }\ntemplate <class T> pair<T, T> operator&(const pair<T, T> &l, const pair<T, T> &r) { return pair<T, T>(max(l.fi, r.fi), min(l.se, r.se)); }\ntemplate <class T, class S> pair<T, S> operator+=(pair<T, S> &l, const pair<T, S> &r) { return l = l + r; }\ntemplate <class T, class S> pair<T, S> operator-=(pair<T, S> &l, const pair<T, S> &r) { return l = l - r; }\ntemplate <class T> bool intersect(const pair<T, T> &l, const pair<T, T> &r) { return (l.se < r.se ? r.fi < l.se : l.fi < r.se); }\n\ntemplate <typename T> struct edge {\n    int from, to;\n    T cost;\n    int id;\n    edge(int to, T cost) : from(-1), to(to), cost(cost) {}\n    edge(int from, int to, T cost) : from(from), to(to), cost(cost) {}\n    edge(int from, int to, T cost, int id) : from(from), to(to), cost(cost), id(id) {}\n    constexpr bool operator<(const edge<T> &rhs) const noexcept { return cost < rhs.cost; }\n    edge &operator=(const int &x) {\n        to = x;\n        return *this;\n    }\n    operator int() const { return to; }\n    friend ostream operator<<(ostream &os, edge &e) { return os << e.to; }\n};\ntemplate <typename T> using Edges = vector<edge<T>>;\n\nusing Tree = vector<vector<int>>;\nusing Graph = vector<vector<int>>;\ntemplate <class T> using Wgraph = vector<vector<edge<T>>>;\nGraph getG(int n, int m = -1, bool directed = false, int margin = 1) {\n    Tree res(n);\n    if(m == -1) m = n - 1;\n    while(m--) {\n        int a, b;\n        cin >> a >> b;\n        a -= margin, b -= margin;\n        res[a].emplace_back(b);\n        if(!directed) res[b].emplace_back(a);\n    }\n    return res;\n}\nGraph getTreeFromPar(int n, int margin = 1) {\n    Graph res(n);\n    for(int i = 1; i < n; i++) {\n        int a;\n        cin >> a;\n        res[a - margin].emplace_back(i);\n    }\n    return res;\n}\ntemplate <class T> Wgraph<T> getWg(int n, int m = -1, bool directed = false, int margin = 1) {\n    Wgraph<T> res(n);\n    if(m == -1) m = n - 1;\n    while(m--) {\n        int a, b;\n        T c;\n        scan(a), scan(b), scan(c);\n        a -= margin, b -= margin;\n        res[a].emplace_back(b, c);\n        if(!directed) res[b].emplace_back(a, c);\n    }\n    return res;\n}\nvoid add(Graph &G, int x, int y) { G[x].eb(y), G[y].eb(x); }\ntemplate <class S, class T> void add(Wgraph<S> &G, int x, int y, T c) { G[x].eb(y, c), G[y].eb(x, c); }\n\n#define TEST                                                                                                                                                   \\\n    INT(testcases);                                                                                                                                            \\\n    while(testcases--)\n\nistream &operator>>(istream &is, i128 &v) {\n    string s;\n    is >> s;\n    v = 0;\n    for(int i = 0; i < (int)s.size(); i++) {\n        if(isdigit(s[i])) { v = v * 10 + s[i] - '0'; }\n    }\n    if(s[0] == '-') { v *= -1; }\n    return is;\n}\n\nostream &operator<<(ostream &os, const i128 &v) {\n    if(v == 0) { return (os << \"0\"); }\n    i128 num = v;\n    if(v < 0) {\n        os << '-';\n        num = -num;\n    }\n    string s;\n    for(; num > 0; num /= 10) { s.push_back((char)(num % 10) + '0'); }\n    reverse(s.begin(), s.end());\n    return (os << s);\n}\nnamespace aux {\ntemplate <typename T, unsigned N, unsigned L> struct tp {\n    static void output(std::ostream &os, const T &v) {\n        os << std::get<N>(v) << (&os == &cerr ? \", \" : \" \");\n        tp<T, N + 1, L>::output(os, v);\n    }\n};\ntemplate <typename T, unsigned N> struct tp<T, N, N> {\n    static void output(std::ostream &os, const T &v) { os << std::get<N>(v); }\n};\n} // namespace aux\ntemplate <typename... Ts> std::ostream &operator<<(std::ostream &os, const std::tuple<Ts...> &t) {\n    if(&os == &cerr) { os << '('; }\n    aux::tp<std::tuple<Ts...>, 0, sizeof...(Ts) - 1>::output(os, t);\n    if(&os == &cerr) { os << ')'; }\n    return os;\n}\ntemplate <class T, class S> ostream &operator<<(ostream &os, const pair<T, S> &p) {\n    if(&os == &cerr) { return os << \"(\" << p.first << \", \" << p.second << \")\"; }\n    return os << p.first << \" \" << p.second;\n}\ntemplate <class Ch, class Tr, class Container> std::basic_ostream<Ch, Tr> &operator<<(std::basic_ostream<Ch, Tr> &os, const Container &x) {\n    bool f = true;\n    if(&os == &cerr) os << \"[\";\n    for(auto &y : x) {\n        if(&os == &cerr)\n            os << (f ? \"\" : \", \") << y;\n        else\n            os << (f ? \"\" : \" \") << y;\n        f = false;\n    }\n    if(&os == &cerr) os << \"]\";\n    return os;\n}\n\n#ifdef noimi\n#undef endl\nvoid debug() { cerr << endl; }\nvoid debug(bool) { cerr << endl; }\ntemplate <class Head, class... Tail> void debug(bool is_front, Head head, Tail... tail) {\n    if(!is_front) cerr << \", \";\n    cerr << head;\n    debug(false, tail...);\n}\n\n#define dump(args...)                                                                                                                                          \\\n    {                                                                                                                                                          \\\n        vector<string> _debug = _split(#args, ',');                                                                                                            \\\n        err(true, begin(_debug), args);                                                                                                                        \\\n    }\n\nvector<string> _split(const string &s, char c) {\n    vector<string> v;\n    stringstream ss(s);\n    string x;\n    while(getline(ss, x, c)) {\n        if(empty(v))\n            v.eb(x);\n        else {\n            bool flag = false;\n            for(auto [c, d] : {pair('(', ')'), pair('[', ']'), pair('{', '}')}) {\n                if(count(all(v.back()), c) != count(all(v.back()), d)) flag = true;\n            }\n            if(flag)\n                v.back() += \",\" + x;\n            else\n                v.eb(x);\n        }\n    }\n    return move(v);\n}\n\nvoid err(bool, vector<string>::iterator) { cerr << endl; }\ntemplate <typename T, typename... Args> void err(bool is_front, vector<string>::iterator it, T a, Args... args) {\n    if(!is_front) cerr << \", \";\n    cerr << it->substr((*it)[0] == ' ', (*it).size()) << \" = \" << a, err(false, ++it, args...);\n}\n\n// #define dump(...) cerr << #__VA_ARGS__ << \" : \", debug(true, __VA_ARGS__)\n#else\n#define dump(...) static_cast<void>(0)\n#define dbg(...) static_cast<void>(0)\n#endif\nvoid OUT() { cout << endl; }\ntemplate <class Head, class... Tail> void OUT(const Head &head, const Tail &...tail) {\n    cout << head;\n    if(sizeof...(tail)) cout << ' ';\n    OUT(tail...);\n}\n\ntemplate <typename T> static constexpr T inf = numeric_limits<T>::max() / 2;\n\ntemplate <class F> struct REC {\n    F f;\n    REC(F &&f_) : f(std::forward<F>(f_)) {}\n    template <class... Args> auto operator()(Args &&...args) const { return f(*this, std::forward<Args>(args)...); }\n};\n\ntemplate <class S> vector<pair<S, int>> runLength(const vector<S> &v) {\n    vector<pair<S, int>> res;\n    for(auto &e : v) {\n        if(res.empty() or res.back().fi != e)\n            res.eb(e, 1);\n        else\n            res.back().se++;\n    }\n    return res;\n}\nvector<pair<char, int>> runLength(const string &v) {\n    vector<pair<char, int>> res;\n    for(auto &e : v) {\n        if(res.empty() or res.back().fi != e)\n            res.eb(e, 1);\n        else\n            res.back().se++;\n    }\n    return res;\n}\n\nint toint(const char &c, const char start = 'a') { return c - start; }\nint toint(const char &c, const string &chars) { return find(all(chars), c) - begin(chars); }\nint alphabets_to_int(const char &c) { return (islower(c) ? c - 'a' : c - 'A' + 26); }\ntemplate <typename T> auto toint(const T &v, const char &start = 'a') {\n    vector<decltype(toint(v[0]))> ret;\n    ret.reserve(v.size());\n    for(auto &&e : v) ret.emplace_back(toint(e, start));\n    return ret;\n}\ntemplate <typename T> auto toint(const T &v, const string &start) {\n    vector<decltype(toint(v[0]))> ret;\n    ret.reserve(v.size());\n    for(auto &&e : v) ret.emplace_back(toint(e, start));\n    return ret;\n}\n// a -> 0, A -> 26\ntemplate <typename T> auto alphabets_to_int(const T &s) {\n    vector<decltype(alphabets_to_int(s[0]))> res;\n    res.reserve(s.size());\n    for(auto &&e : s) { res.emplace_back(alphabets_to_int(e)); }\n    return res;\n}\n\ntemplate <class T, class F> T bin_search(T ok, T ng, const F &f) {\n    while(abs(ok - ng) > 1) {\n        T mid = ok + ng >> 1;\n        (f(mid) ? ok : ng) = mid;\n    }\n    return ok;\n}\ntemplate <class T, class F> T bin_search_double(T ok, T ng, const F &f, int iter = 80) {\n    while(iter--) {\n        T mid = (ok + ng) / 2;\n        (f(mid) ? ok : ng) = mid;\n    }\n    return ok;\n}\n\nstruct Setup_io {\n    Setup_io() {\n        ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n        cout << fixed << setprecision(11);\n    }\n} setup_io;\n\n#pragma endregion\n\nnamespace Modular998 {\n#line 1 \"a.cpp\"\n\n#line 2 \"library/fps/berlekamp-massey.hpp\"\n\ntemplate <typename mint> vector<mint> BerlekampMassey(const vector<mint> &s) {\n    const int N = (int)s.size();\n    vector<mint> b, c;\n    b.reserve(N + 1);\n    c.reserve(N + 1);\n    b.push_back(mint(1));\n    c.push_back(mint(1));\n    mint y = mint(1);\n    for(int ed = 1; ed <= N; ed++) {\n        int l = int(c.size()), m = int(b.size());\n        mint x = 0;\n        for(int i = 0; i < l; i++) x += c[i] * s[ed - l + i];\n        b.emplace_back(mint(0));\n        m++;\n        if(x == mint(0)) continue;\n        mint freq = x / y;\n        if(l < m) {\n            auto tmp = c;\n            c.insert(begin(c), m - l, mint(0));\n            for(int i = 0; i < m; i++) c[m - 1 - i] -= freq * b[m - 1 - i];\n            b = tmp;\n            y = x;\n        } else {\n            for(int i = 0; i < m; i++) c[l - 1 - i] -= freq * b[m - 1 - i];\n        }\n    }\n    reverse(begin(c), end(c));\n    return c;\n}\n\n#line 2 \"library/modulo/binomial.hpp\"\n\ntemplate <typename T> struct Binomial {\n    vector<T> f, g, h;\n    Binomial(int MAX = 0) : f(1, T(1)), g(1, T(1)), h(1, T(1)) {\n        while(MAX >= (int)f.size()) extend();\n    }\n\n    void extend() {\n        int n = f.size();\n        int m = n * 2;\n        f.resize(m);\n        g.resize(m);\n        h.resize(m);\n        for(int i = n; i < m; i++) f[i] = f[i - 1] * T(i);\n        g[m - 1] = f[m - 1].inverse();\n        h[m - 1] = g[m - 1] * f[m - 2];\n        for(int i = m - 2; i >= n; i--) {\n            g[i] = g[i + 1] * T(i + 1);\n            h[i] = g[i] * f[i - 1];\n        }\n    }\n\n    T fac(int i) {\n        if(i < 0) return T(0);\n        while(i >= (int)f.size()) extend();\n        return f[i];\n    }\n\n    T finv(int i) {\n        if(i < 0) return T(0);\n        while(i >= (int)g.size()) extend();\n        return g[i];\n    }\n\n    T inv(int i) {\n        if(i < 0) return -inv(-i);\n        while(i >= (int)h.size()) extend();\n        return h[i];\n    }\n\n    T C(int n, int r) {\n        if(n < 0 || n < r || r < 0) return T(0);\n        return fac(n) * finv(n - r) * finv(r);\n    }\n\n    inline T operator()(int n, int r) { return C(n, r); }\n\n    template <typename I> T multinomial(const vector<I> &r) {\n        static_assert(is_integral<I>::value == true);\n        int n = 0;\n        for(auto &x : r) {\n            if(x < 0) return T(0);\n            n += x;\n        }\n        T res = fac(n);\n        for(auto &x : r) res *= finv(x);\n        return res;\n    }\n\n    template <typename I> T operator()(const vector<I> &r) { return multinomial(r); }\n\n    T C_naive(int n, int r) {\n        if(n < 0 || n < r || r < 0) return T(0);\n        T ret = T(1);\n        r = min(r, n - r);\n        for(int i = 1; i <= r; ++i) ret *= inv(i) * (n--);\n        return ret;\n    }\n\n    T P(int n, int r) {\n        if(n < 0 || n < r || r < 0) return T(0);\n        return fac(n) * finv(n - r);\n    }\n\n    T H(int n, int r) {\n        if(n < 0 || r < 0) return T(0);\n        return r == 0 ? 1 : C(n + r - 1, r);\n    }\n};\n\n#line 2 \"library/modint/montgomery-modint.hpp\"\n\ntemplate <uint32_t mod> struct LazyMontgomeryModInt {\n    using mint = LazyMontgomeryModInt;\n    using i32 = int32_t;\n    using u32 = uint32_t;\n    using u64 = uint64_t;\n\n    static constexpr u32 get_r() {\n        u32 ret = mod;\n        for(i32 i = 0; i < 4; ++i) ret *= 2 - mod * ret;\n        return ret;\n    }\n\n    static constexpr u32 r = get_r();\n    static constexpr u32 n2 = -u64(mod) % mod;\n    static_assert(r * mod == 1, \"invalid, r * mod != 1\");\n    static_assert(mod < (1 << 30), \"invalid, mod >= 2 ^ 30\");\n    static_assert((mod & 1) == 1, \"invalid, mod % 2 == 0\");\n\n    u32 a;\n\n    constexpr LazyMontgomeryModInt() : a(0) {}\n    constexpr LazyMontgomeryModInt(const int64_t &b) : a(reduce(u64(b % mod + mod) * n2)){};\n\n    static constexpr u32 reduce(const u64 &b) { return (b + u64(u32(b) * u32(-r)) * mod) >> 32; }\n\n    constexpr mint &operator+=(const mint &b) {\n        if(i32(a += b.a - 2 * mod) < 0) a += 2 * mod;\n        return *this;\n    }\n\n    constexpr mint &operator-=(const mint &b) {\n        if(i32(a -= b.a) < 0) a += 2 * mod;\n        return *this;\n    }\n\n    constexpr mint &operator*=(const mint &b) {\n        a = reduce(u64(a) * b.a);\n        return *this;\n    }\n\n    constexpr mint &operator/=(const mint &b) {\n        *this *= b.inverse();\n        return *this;\n    }\n\n    constexpr mint operator+(const mint &b) const { return mint(*this) += b; }\n    constexpr mint operator-(const mint &b) const { return mint(*this) -= b; }\n    constexpr mint operator*(const mint &b) const { return mint(*this) *= b; }\n    constexpr mint operator/(const mint &b) const { return mint(*this) /= b; }\n    constexpr bool operator==(const mint &b) const { return (a >= mod ? a - mod : a) == (b.a >= mod ? b.a - mod : b.a); }\n    constexpr bool operator!=(const mint &b) const { return (a >= mod ? a - mod : a) != (b.a >= mod ? b.a - mod : b.a); }\n    constexpr mint operator-() const { return mint() - mint(*this); }\n\n    constexpr mint pow(u64 n) const {\n        mint ret(1), mul(*this);\n        while(n > 0) {\n            if(n & 1) ret *= mul;\n            mul *= mul;\n            n >>= 1;\n        }\n        return ret;\n    }\n\n    constexpr mint inverse() const { return pow(mod - 2); }\n\n    friend ostream &operator<<(ostream &os, const mint &b) { return os << b.get(); }\n\n    friend istream &operator>>(istream &is, mint &b) {\n        int64_t t;\n        is >> t;\n        b = LazyMontgomeryModInt<mod>(t);\n        return (is);\n    }\n\n    constexpr u32 get() const {\n        u32 ret = reduce(a);\n        return ret >= mod ? ret - mod : ret;\n    }\n\n    static constexpr u32 get_mod() { return mod; }\n};\n#line 2 \"library/fps/ntt-friendly-fps.hpp\"\n\n#line 2 \"library/ntt/ntt-avx2.hpp\"\n\n#line 2 \"library/modint/simd-montgomery.hpp\"\n\n#include <immintrin.h>\n\n__attribute__((target(\"sse4.2\"))) inline __m128i my128_mullo_epu32(const __m128i &a, const __m128i &b) { return _mm_mullo_epi32(a, b); }\n\n__attribute__((target(\"sse4.2\"))) inline __m128i my128_mulhi_epu32(const __m128i &a, const __m128i &b) {\n    __m128i a13 = _mm_shuffle_epi32(a, 0xF5);\n    __m128i b13 = _mm_shuffle_epi32(b, 0xF5);\n    __m128i prod02 = _mm_mul_epu32(a, b);\n    __m128i prod13 = _mm_mul_epu32(a13, b13);\n    __m128i prod = _mm_unpackhi_epi64(_mm_unpacklo_epi32(prod02, prod13), _mm_unpackhi_epi32(prod02, prod13));\n    return prod;\n}\n\n__attribute__((target(\"sse4.2\"))) inline __m128i montgomery_mul_128(const __m128i &a, const __m128i &b, const __m128i &r, const __m128i &m1) {\n    return _mm_sub_epi32(_mm_add_epi32(my128_mulhi_epu32(a, b), m1), my128_mulhi_epu32(my128_mullo_epu32(my128_mullo_epu32(a, b), r), m1));\n}\n\n__attribute__((target(\"sse4.2\"))) inline __m128i montgomery_add_128(const __m128i &a, const __m128i &b, const __m128i &m2, const __m128i &m0) {\n    __m128i ret = _mm_sub_epi32(_mm_add_epi32(a, b), m2);\n    return _mm_add_epi32(_mm_and_si128(_mm_cmpgt_epi32(m0, ret), m2), ret);\n}\n\n__attribute__((target(\"sse4.2\"))) inline __m128i montgomery_sub_128(const __m128i &a, const __m128i &b, const __m128i &m2, const __m128i &m0) {\n    __m128i ret = _mm_sub_epi32(a, b);\n    return _mm_add_epi32(_mm_and_si128(_mm_cmpgt_epi32(m0, ret), m2), ret);\n}\n\n__attribute__((target(\"avx2\"))) inline __m256i my256_mullo_epu32(const __m256i &a, const __m256i &b) { return _mm256_mullo_epi32(a, b); }\n\n__attribute__((target(\"avx2\"))) inline __m256i my256_mulhi_epu32(const __m256i &a, const __m256i &b) {\n    __m256i a13 = _mm256_shuffle_epi32(a, 0xF5);\n    __m256i b13 = _mm256_shuffle_epi32(b, 0xF5);\n    __m256i prod02 = _mm256_mul_epu32(a, b);\n    __m256i prod13 = _mm256_mul_epu32(a13, b13);\n    __m256i prod = _mm256_unpackhi_epi64(_mm256_unpacklo_epi32(prod02, prod13), _mm256_unpackhi_epi32(prod02, prod13));\n    return prod;\n}\n\n__attribute__((target(\"avx2\"))) inline __m256i montgomery_mul_256(const __m256i &a, const __m256i &b, const __m256i &r, const __m256i &m1) {\n    return _mm256_sub_epi32(_mm256_add_epi32(my256_mulhi_epu32(a, b), m1), my256_mulhi_epu32(my256_mullo_epu32(my256_mullo_epu32(a, b), r), m1));\n}\n\n__attribute__((target(\"avx2\"))) inline __m256i montgomery_add_256(const __m256i &a, const __m256i &b, const __m256i &m2, const __m256i &m0) {\n    __m256i ret = _mm256_sub_epi32(_mm256_add_epi32(a, b), m2);\n    return _mm256_add_epi32(_mm256_and_si256(_mm256_cmpgt_epi32(m0, ret), m2), ret);\n}\n\n__attribute__((target(\"avx2\"))) inline __m256i montgomery_sub_256(const __m256i &a, const __m256i &b, const __m256i &m2, const __m256i &m0) {\n    __m256i ret = _mm256_sub_epi32(a, b);\n    return _mm256_add_epi32(_mm256_and_si256(_mm256_cmpgt_epi32(m0, ret), m2), ret);\n}\n#line 4 \"library/ntt/ntt-avx2.hpp\"\n\nnamespace ntt_inner {\nusing u64 = uint64_t;\nconstexpr uint32_t get_pr(uint32_t mod) {\n    if(mod == 2) return 1;\n    u64 ds[32] = {};\n    int idx = 0;\n    u64 m = mod - 1;\n    for(u64 i = 2; i * i <= m; ++i) {\n        if(m % i == 0) {\n            ds[idx++] = i;\n            while(m % i == 0) m /= i;\n        }\n    }\n    if(m != 1) ds[idx++] = m;\n\n    uint32_t pr = 2;\n    while(1) {\n        int flg = 1;\n        for(int i = 0; i < idx; ++i) {\n            u64 a = pr, b = (mod - 1) / ds[i], r = 1;\n            while(b) {\n                if(b & 1) r = r * a % mod;\n                a = a * a % mod;\n                b >>= 1;\n            }\n            if(r == 1) {\n                flg = 0;\n                break;\n            }\n        }\n        if(flg == 1) break;\n        ++pr;\n    }\n    return pr;\n}\n\nconstexpr int SZ_FFT_BUF = 1 << 23;\nuint32_t _buf1[SZ_FFT_BUF] __attribute__((aligned(64)));\nuint32_t _buf2[SZ_FFT_BUF] __attribute__((aligned(64)));\n} // namespace ntt_inner\n\ntemplate <typename mint> struct NTT {\n    static constexpr uint32_t mod = mint::get_mod();\n    static constexpr uint32_t pr = ntt_inner::get_pr(mint::get_mod());\n    static constexpr int level = __builtin_ctzll(mod - 1);\n    mint dw[level], dy[level];\n    mint *buf1, *buf2;\n\n    constexpr NTT() {\n        setwy(level);\n        union raw_cast {\n            mint dat;\n            uint32_t _;\n        };\n        buf1 = &(((raw_cast *)(ntt_inner::_buf1))->dat);\n        buf2 = &(((raw_cast *)(ntt_inner::_buf2))->dat);\n    }\n\n    constexpr void setwy(int k) {\n        mint w[level], y[level];\n        w[k - 1] = mint(pr).pow((mod - 1) / (1 << k));\n        y[k - 1] = w[k - 1].inverse();\n        for(int i = k - 2; i > 0; --i) w[i] = w[i + 1] * w[i + 1], y[i] = y[i + 1] * y[i + 1];\n        dw[0] = dy[0] = w[1] * w[1];\n        dw[1] = w[1], dy[1] = y[1], dw[2] = w[2], dy[2] = y[2];\n        for(int i = 3; i < k; ++i) {\n            dw[i] = dw[i - 1] * y[i - 2] * w[i];\n            dy[i] = dy[i - 1] * w[i - 2] * y[i];\n        }\n    }\n\n    __attribute__((target(\"avx2\"))) void ntt(mint *a, int n) {\n        int k = n ? __builtin_ctz(n) : 0;\n        if(k == 0) return;\n        if(k == 1) {\n            mint a1 = a[1];\n            a[1] = a[0] - a[1];\n            a[0] = a[0] + a1;\n            return;\n        }\n        if(k & 1) {\n            int v = 1 << (k - 1);\n            if(v < 8) {\n                for(int j = 0; j < v; ++j) {\n                    mint ajv = a[j + v];\n                    a[j + v] = a[j] - ajv;\n                    a[j] += ajv;\n                }\n            } else {\n                const __m256i m0 = _mm256_set1_epi32(0);\n                const __m256i m2 = _mm256_set1_epi32(mod + mod);\n                int j0 = 0;\n                int j1 = v;\n                for(; j0 < v; j0 += 8, j1 += 8) {\n                    __m256i T0 = _mm256_loadu_si256((__m256i *)(a + j0));\n                    __m256i T1 = _mm256_loadu_si256((__m256i *)(a + j1));\n                    __m256i naj = montgomery_add_256(T0, T1, m2, m0);\n                    __m256i najv = montgomery_sub_256(T0, T1, m2, m0);\n                    _mm256_storeu_si256((__m256i *)(a + j0), naj);\n                    _mm256_storeu_si256((__m256i *)(a + j1), najv);\n                }\n            }\n        }\n        int u = 1 << (2 + (k & 1));\n        int v = 1 << (k - 2 - (k & 1));\n        mint one = mint(1);\n        mint imag = dw[1];\n        while(v) {\n            if(v == 1) {\n                mint ww = one, xx = one, wx = one;\n                for(int jh = 0; jh < u;) {\n                    ww = xx * xx, wx = ww * xx;\n                    mint t0 = a[jh + 0], t1 = a[jh + 1] * xx;\n                    mint t2 = a[jh + 2] * ww, t3 = a[jh + 3] * wx;\n                    mint t0p2 = t0 + t2, t1p3 = t1 + t3;\n                    mint t0m2 = t0 - t2, t1m3 = (t1 - t3) * imag;\n                    a[jh + 0] = t0p2 + t1p3, a[jh + 1] = t0p2 - t1p3;\n                    a[jh + 2] = t0m2 + t1m3, a[jh + 3] = t0m2 - t1m3;\n                    xx *= dw[__builtin_ctz((jh += 4))];\n                }\n            } else if(v == 4) {\n                const __m128i m0 = _mm_set1_epi32(0);\n                const __m128i m1 = _mm_set1_epi32(mod);\n                const __m128i m2 = _mm_set1_epi32(mod + mod);\n                const __m128i r = _mm_set1_epi32(mint::r);\n                const __m128i Imag = _mm_set1_epi32(imag.a);\n                mint ww = one, xx = one, wx = one;\n                for(int jh = 0; jh < u;) {\n                    if(jh == 0) {\n                        int j0 = 0;\n                        int j1 = v;\n                        int j2 = j1 + v;\n                        int j3 = j2 + v;\n                        int je = v;\n                        for(; j0 < je; j0 += 4, j1 += 4, j2 += 4, j3 += 4) {\n                            const __m128i T0 = _mm_loadu_si128((__m128i *)(a + j0));\n                            const __m128i T1 = _mm_loadu_si128((__m128i *)(a + j1));\n                            const __m128i T2 = _mm_loadu_si128((__m128i *)(a + j2));\n                            const __m128i T3 = _mm_loadu_si128((__m128i *)(a + j3));\n                            const __m128i T0P2 = montgomery_add_128(T0, T2, m2, m0);\n                            const __m128i T1P3 = montgomery_add_128(T1, T3, m2, m0);\n                            const __m128i T0M2 = montgomery_sub_128(T0, T2, m2, m0);\n                            const __m128i T1M3 = montgomery_mul_128(montgomery_sub_128(T1, T3, m2, m0), Imag, r, m1);\n                            _mm_storeu_si128((__m128i *)(a + j0), montgomery_add_128(T0P2, T1P3, m2, m0));\n                            _mm_storeu_si128((__m128i *)(a + j1), montgomery_sub_128(T0P2, T1P3, m2, m0));\n                            _mm_storeu_si128((__m128i *)(a + j2), montgomery_add_128(T0M2, T1M3, m2, m0));\n                            _mm_storeu_si128((__m128i *)(a + j3), montgomery_sub_128(T0M2, T1M3, m2, m0));\n                        }\n                    } else {\n                        ww = xx * xx, wx = ww * xx;\n                        const __m128i WW = _mm_set1_epi32(ww.a);\n                        const __m128i WX = _mm_set1_epi32(wx.a);\n                        const __m128i XX = _mm_set1_epi32(xx.a);\n                        int j0 = jh * v;\n                        int j1 = j0 + v;\n                        int j2 = j1 + v;\n                        int j3 = j2 + v;\n                        int je = j1;\n                        for(; j0 < je; j0 += 4, j1 += 4, j2 += 4, j3 += 4) {\n                            const __m128i T0 = _mm_loadu_si128((__m128i *)(a + j0));\n                            const __m128i T1 = _mm_loadu_si128((__m128i *)(a + j1));\n                            const __m128i T2 = _mm_loadu_si128((__m128i *)(a + j2));\n                            const __m128i T3 = _mm_loadu_si128((__m128i *)(a + j3));\n                            const __m128i MT1 = montgomery_mul_128(T1, XX, r, m1);\n                            const __m128i MT2 = montgomery_mul_128(T2, WW, r, m1);\n                            const __m128i MT3 = montgomery_mul_128(T3, WX, r, m1);\n                            const __m128i T0P2 = montgomery_add_128(T0, MT2, m2, m0);\n                            const __m128i T1P3 = montgomery_add_128(MT1, MT3, m2, m0);\n                            const __m128i T0M2 = montgomery_sub_128(T0, MT2, m2, m0);\n                            const __m128i T1M3 = montgomery_mul_128(montgomery_sub_128(MT1, MT3, m2, m0), Imag, r, m1);\n                            _mm_storeu_si128((__m128i *)(a + j0), montgomery_add_128(T0P2, T1P3, m2, m0));\n                            _mm_storeu_si128((__m128i *)(a + j1), montgomery_sub_128(T0P2, T1P3, m2, m0));\n                            _mm_storeu_si128((__m128i *)(a + j2), montgomery_add_128(T0M2, T1M3, m2, m0));\n                            _mm_storeu_si128((__m128i *)(a + j3), montgomery_sub_128(T0M2, T1M3, m2, m0));\n                        }\n                    }\n                    xx *= dw[__builtin_ctz((jh += 4))];\n                }\n            } else {\n                const __m256i m0 = _mm256_set1_epi32(0);\n                const __m256i m1 = _mm256_set1_epi32(mod);\n                const __m256i m2 = _mm256_set1_epi32(mod + mod);\n                const __m256i r = _mm256_set1_epi32(mint::r);\n                const __m256i Imag = _mm256_set1_epi32(imag.a);\n                mint ww = one, xx = one, wx = one;\n                for(int jh = 0; jh < u;) {\n                    if(jh == 0) {\n                        int j0 = 0;\n                        int j1 = v;\n                        int j2 = j1 + v;\n                        int j3 = j2 + v;\n                        int je = v;\n                        for(; j0 < je; j0 += 8, j1 += 8, j2 += 8, j3 += 8) {\n                            const __m256i T0 = _mm256_loadu_si256((__m256i *)(a + j0));\n                            const __m256i T1 = _mm256_loadu_si256((__m256i *)(a + j1));\n                            const __m256i T2 = _mm256_loadu_si256((__m256i *)(a + j2));\n                            const __m256i T3 = _mm256_loadu_si256((__m256i *)(a + j3));\n                            const __m256i T0P2 = montgomery_add_256(T0, T2, m2, m0);\n                            const __m256i T1P3 = montgomery_add_256(T1, T3, m2, m0);\n                            const __m256i T0M2 = montgomery_sub_256(T0, T2, m2, m0);\n                            const __m256i T1M3 = montgomery_mul_256(montgomery_sub_256(T1, T3, m2, m0), Imag, r, m1);\n                            _mm256_storeu_si256((__m256i *)(a + j0), montgomery_add_256(T0P2, T1P3, m2, m0));\n                            _mm256_storeu_si256((__m256i *)(a + j1), montgomery_sub_256(T0P2, T1P3, m2, m0));\n                            _mm256_storeu_si256((__m256i *)(a + j2), montgomery_add_256(T0M2, T1M3, m2, m0));\n                            _mm256_storeu_si256((__m256i *)(a + j3), montgomery_sub_256(T0M2, T1M3, m2, m0));\n                        }\n                    } else {\n                        ww = xx * xx, wx = ww * xx;\n                        const __m256i WW = _mm256_set1_epi32(ww.a);\n                        const __m256i WX = _mm256_set1_epi32(wx.a);\n                        const __m256i XX = _mm256_set1_epi32(xx.a);\n                        int j0 = jh * v;\n                        int j1 = j0 + v;\n                        int j2 = j1 + v;\n                        int j3 = j2 + v;\n                        int je = j1;\n                        for(; j0 < je; j0 += 8, j1 += 8, j2 += 8, j3 += 8) {\n                            const __m256i T0 = _mm256_loadu_si256((__m256i *)(a + j0));\n                            const __m256i T1 = _mm256_loadu_si256((__m256i *)(a + j1));\n                            const __m256i T2 = _mm256_loadu_si256((__m256i *)(a + j2));\n                            const __m256i T3 = _mm256_loadu_si256((__m256i *)(a + j3));\n                            const __m256i MT1 = montgomery_mul_256(T1, XX, r, m1);\n                            const __m256i MT2 = montgomery_mul_256(T2, WW, r, m1);\n                            const __m256i MT3 = montgomery_mul_256(T3, WX, r, m1);\n                            const __m256i T0P2 = montgomery_add_256(T0, MT2, m2, m0);\n                            const __m256i T1P3 = montgomery_add_256(MT1, MT3, m2, m0);\n                            const __m256i T0M2 = montgomery_sub_256(T0, MT2, m2, m0);\n                            const __m256i T1M3 = montgomery_mul_256(montgomery_sub_256(MT1, MT3, m2, m0), Imag, r, m1);\n                            _mm256_storeu_si256((__m256i *)(a + j0), montgomery_add_256(T0P2, T1P3, m2, m0));\n                            _mm256_storeu_si256((__m256i *)(a + j1), montgomery_sub_256(T0P2, T1P3, m2, m0));\n                            _mm256_storeu_si256((__m256i *)(a + j2), montgomery_add_256(T0M2, T1M3, m2, m0));\n                            _mm256_storeu_si256((__m256i *)(a + j3), montgomery_sub_256(T0M2, T1M3, m2, m0));\n                        }\n                    }\n                    xx *= dw[__builtin_ctz((jh += 4))];\n                }\n            }\n            u <<= 2;\n            v >>= 2;\n        }\n    }\n\n    __attribute__((target(\"avx2\"))) void intt(mint *a, int n, int normalize = true) {\n        int k = n ? __builtin_ctz(n) : 0;\n        if(k == 0) return;\n        if(k == 1) {\n            mint a1 = a[1];\n            a[1] = a[0] - a[1];\n            a[0] = a[0] + a1;\n            if(normalize) {\n                a[0] *= mint(2).inverse();\n                a[1] *= mint(2).inverse();\n            }\n            return;\n        }\n        int u = 1 << (k - 2);\n        int v = 1;\n        mint one = mint(1);\n        mint imag = dy[1];\n        while(u) {\n            if(v == 1) {\n                mint ww = one, xx = one, yy = one;\n                u <<= 2;\n                for(int jh = 0; jh < u;) {\n                    ww = xx * xx, yy = xx * imag;\n                    mint t0 = a[jh + 0], t1 = a[jh + 1];\n                    mint t2 = a[jh + 2], t3 = a[jh + 3];\n                    mint t0p1 = t0 + t1, t2p3 = t2 + t3;\n                    mint t0m1 = (t0 - t1) * xx, t2m3 = (t2 - t3) * yy;\n                    a[jh + 0] = t0p1 + t2p3, a[jh + 2] = (t0p1 - t2p3) * ww;\n                    a[jh + 1] = t0m1 + t2m3, a[jh + 3] = (t0m1 - t2m3) * ww;\n                    xx *= dy[__builtin_ctz(jh += 4)];\n                }\n            } else if(v == 4) {\n                const __m128i m0 = _mm_set1_epi32(0);\n                const __m128i m1 = _mm_set1_epi32(mod);\n                const __m128i m2 = _mm_set1_epi32(mod + mod);\n                const __m128i r = _mm_set1_epi32(mint::r);\n                const __m128i Imag = _mm_set1_epi32(imag.a);\n                mint ww = one, xx = one, yy = one;\n                u <<= 2;\n                for(int jh = 0; jh < u;) {\n                    if(jh == 0) {\n                        int j0 = 0;\n                        int j1 = v;\n                        int j2 = v + v;\n                        int j3 = j2 + v;\n                        for(; j0 < v; j0 += 4, j1 += 4, j2 += 4, j3 += 4) {\n                            const __m128i T0 = _mm_loadu_si128((__m128i *)(a + j0));\n                            const __m128i T1 = _mm_loadu_si128((__m128i *)(a + j1));\n                            const __m128i T2 = _mm_loadu_si128((__m128i *)(a + j2));\n                            const __m128i T3 = _mm_loadu_si128((__m128i *)(a + j3));\n                            const __m128i T0P1 = montgomery_add_128(T0, T1, m2, m0);\n                            const __m128i T2P3 = montgomery_add_128(T2, T3, m2, m0);\n                            const __m128i T0M1 = montgomery_sub_128(T0, T1, m2, m0);\n                            const __m128i T2M3 = montgomery_mul_128(montgomery_sub_128(T2, T3, m2, m0), Imag, r, m1);\n                            _mm_storeu_si128((__m128i *)(a + j0), montgomery_add_128(T0P1, T2P3, m2, m0));\n                            _mm_storeu_si128((__m128i *)(a + j2), montgomery_sub_128(T0P1, T2P3, m2, m0));\n                            _mm_storeu_si128((__m128i *)(a + j1), montgomery_add_128(T0M1, T2M3, m2, m0));\n                            _mm_storeu_si128((__m128i *)(a + j3), montgomery_sub_128(T0M1, T2M3, m2, m0));\n                        }\n                    } else {\n                        ww = xx * xx, yy = xx * imag;\n                        const __m128i WW = _mm_set1_epi32(ww.a);\n                        const __m128i XX = _mm_set1_epi32(xx.a);\n                        const __m128i YY = _mm_set1_epi32(yy.a);\n                        int j0 = jh * v;\n                        int j1 = j0 + v;\n                        int j2 = j1 + v;\n                        int j3 = j2 + v;\n                        int je = j1;\n                        for(; j0 < je; j0 += 4, j1 += 4, j2 += 4, j3 += 4) {\n                            const __m128i T0 = _mm_loadu_si128((__m128i *)(a + j0));\n                            const __m128i T1 = _mm_loadu_si128((__m128i *)(a + j1));\n                            const __m128i T2 = _mm_loadu_si128((__m128i *)(a + j2));\n                            const __m128i T3 = _mm_loadu_si128((__m128i *)(a + j3));\n                            const __m128i T0P1 = montgomery_add_128(T0, T1, m2, m0);\n                            const __m128i T2P3 = montgomery_add_128(T2, T3, m2, m0);\n                            const __m128i T0M1 = montgomery_mul_128(montgomery_sub_128(T0, T1, m2, m0), XX, r, m1);\n                            __m128i T2M3 = montgomery_mul_128(montgomery_sub_128(T2, T3, m2, m0), YY, r, m1);\n                            _mm_storeu_si128((__m128i *)(a + j0), montgomery_add_128(T0P1, T2P3, m2, m0));\n                            _mm_storeu_si128((__m128i *)(a + j2), montgomery_mul_128(montgomery_sub_128(T0P1, T2P3, m2, m0), WW, r, m1));\n                            _mm_storeu_si128((__m128i *)(a + j1), montgomery_add_128(T0M1, T2M3, m2, m0));\n                            _mm_storeu_si128((__m128i *)(a + j3), montgomery_mul_128(montgomery_sub_128(T0M1, T2M3, m2, m0), WW, r, m1));\n                        }\n                    }\n                    xx *= dy[__builtin_ctz(jh += 4)];\n                }\n            } else {\n                const __m256i m0 = _mm256_set1_epi32(0);\n                const __m256i m1 = _mm256_set1_epi32(mod);\n                const __m256i m2 = _mm256_set1_epi32(mod + mod);\n                const __m256i r = _mm256_set1_epi32(mint::r);\n                const __m256i Imag = _mm256_set1_epi32(imag.a);\n                mint ww = one, xx = one, yy = one;\n                u <<= 2;\n                for(int jh = 0; jh < u;) {\n                    if(jh == 0) {\n                        int j0 = 0;\n                        int j1 = v;\n                        int j2 = v + v;\n                        int j3 = j2 + v;\n                        for(; j0 < v; j0 += 8, j1 += 8, j2 += 8, j3 += 8) {\n                            const __m256i T0 = _mm256_loadu_si256((__m256i *)(a + j0));\n                            const __m256i T1 = _mm256_loadu_si256((__m256i *)(a + j1));\n                            const __m256i T2 = _mm256_loadu_si256((__m256i *)(a + j2));\n                            const __m256i T3 = _mm256_loadu_si256((__m256i *)(a + j3));\n                            const __m256i T0P1 = montgomery_add_256(T0, T1, m2, m0);\n                            const __m256i T2P3 = montgomery_add_256(T2, T3, m2, m0);\n                            const __m256i T0M1 = montgomery_sub_256(T0, T1, m2, m0);\n                            const __m256i T2M3 = montgomery_mul_256(montgomery_sub_256(T2, T3, m2, m0), Imag, r, m1);\n                            _mm256_storeu_si256((__m256i *)(a + j0), montgomery_add_256(T0P1, T2P3, m2, m0));\n                            _mm256_storeu_si256((__m256i *)(a + j2), montgomery_sub_256(T0P1, T2P3, m2, m0));\n                            _mm256_storeu_si256((__m256i *)(a + j1), montgomery_add_256(T0M1, T2M3, m2, m0));\n                            _mm256_storeu_si256((__m256i *)(a + j3), montgomery_sub_256(T0M1, T2M3, m2, m0));\n                        }\n                    } else {\n                        ww = xx * xx, yy = xx * imag;\n                        const __m256i WW = _mm256_set1_epi32(ww.a);\n                        const __m256i XX = _mm256_set1_epi32(xx.a);\n                        const __m256i YY = _mm256_set1_epi32(yy.a);\n                        int j0 = jh * v;\n                        int j1 = j0 + v;\n                        int j2 = j1 + v;\n                        int j3 = j2 + v;\n                        int je = j1;\n                        for(; j0 < je; j0 += 8, j1 += 8, j2 += 8, j3 += 8) {\n                            const __m256i T0 = _mm256_loadu_si256((__m256i *)(a + j0));\n                            const __m256i T1 = _mm256_loadu_si256((__m256i *)(a + j1));\n                            const __m256i T2 = _mm256_loadu_si256((__m256i *)(a + j2));\n                            const __m256i T3 = _mm256_loadu_si256((__m256i *)(a + j3));\n                            const __m256i T0P1 = montgomery_add_256(T0, T1, m2, m0);\n                            const __m256i T2P3 = montgomery_add_256(T2, T3, m2, m0);\n                            const __m256i T0M1 = montgomery_mul_256(montgomery_sub_256(T0, T1, m2, m0), XX, r, m1);\n                            const __m256i T2M3 = montgomery_mul_256(montgomery_sub_256(T2, T3, m2, m0), YY, r, m1);\n                            _mm256_storeu_si256((__m256i *)(a + j0), montgomery_add_256(T0P1, T2P3, m2, m0));\n                            _mm256_storeu_si256((__m256i *)(a + j2), montgomery_mul_256(montgomery_sub_256(T0P1, T2P3, m2, m0), WW, r, m1));\n                            _mm256_storeu_si256((__m256i *)(a + j1), montgomery_add_256(T0M1, T2M3, m2, m0));\n                            _mm256_storeu_si256((__m256i *)(a + j3), montgomery_mul_256(montgomery_sub_256(T0M1, T2M3, m2, m0), WW, r, m1));\n                        }\n                    }\n                    xx *= dy[__builtin_ctz(jh += 4)];\n                }\n            }\n            u >>= 4;\n            v <<= 2;\n        }\n        if(k & 1) {\n            v = 1 << (k - 1);\n            if(v < 8) {\n                for(int j = 0; j < v; ++j) {\n                    mint ajv = a[j] - a[j + v];\n                    a[j] += a[j + v];\n                    a[j + v] = ajv;\n                }\n            } else {\n                const __m256i m0 = _mm256_set1_epi32(0);\n                const __m256i m2 = _mm256_set1_epi32(mod + mod);\n                int j0 = 0;\n                int j1 = v;\n                for(; j0 < v; j0 += 8, j1 += 8) {\n                    const __m256i T0 = _mm256_loadu_si256((__m256i *)(a + j0));\n                    const __m256i T1 = _mm256_loadu_si256((__m256i *)(a + j1));\n                    __m256i naj = montgomery_add_256(T0, T1, m2, m0);\n                    __m256i najv = montgomery_sub_256(T0, T1, m2, m0);\n                    _mm256_storeu_si256((__m256i *)(a + j0), naj);\n                    _mm256_storeu_si256((__m256i *)(a + j1), najv);\n                }\n            }\n        }\n        if(normalize) {\n            mint invn = mint(n).inverse();\n            for(int i = 0; i < n; i++) a[i] *= invn;\n        }\n    }\n\n    __attribute__((target(\"avx2\"))) void inplace_multiply(int l1, int l2, int zero_padding = true) {\n        int l = l1 + l2 - 1;\n        int M = 4;\n        while(M < l) M <<= 1;\n        if(zero_padding) {\n            for(int i = l1; i < M; i++) ntt_inner::_buf1[i] = 0;\n            for(int i = l2; i < M; i++) ntt_inner::_buf2[i] = 0;\n        }\n        const __m256i m0 = _mm256_set1_epi32(0);\n        const __m256i m1 = _mm256_set1_epi32(mod);\n        const __m256i r = _mm256_set1_epi32(mint::r);\n        const __m256i N2 = _mm256_set1_epi32(mint::n2);\n        for(int i = 0; i < l1; i += 8) {\n            __m256i a = _mm256_loadu_si256((__m256i *)(ntt_inner::_buf1 + i));\n            __m256i b = montgomery_mul_256(a, N2, r, m1);\n            _mm256_storeu_si256((__m256i *)(ntt_inner::_buf1 + i), b);\n        }\n        for(int i = 0; i < l2; i += 8) {\n            __m256i a = _mm256_loadu_si256((__m256i *)(ntt_inner::_buf2 + i));\n            __m256i b = montgomery_mul_256(a, N2, r, m1);\n            _mm256_storeu_si256((__m256i *)(ntt_inner::_buf2 + i), b);\n        }\n        ntt(buf1, M);\n        ntt(buf2, M);\n        for(int i = 0; i < M; i += 8) {\n            __m256i a = _mm256_loadu_si256((__m256i *)(ntt_inner::_buf1 + i));\n            __m256i b = _mm256_loadu_si256((__m256i *)(ntt_inner::_buf2 + i));\n            __m256i c = montgomery_mul_256(a, b, r, m1);\n            _mm256_storeu_si256((__m256i *)(ntt_inner::_buf1 + i), c);\n        }\n        intt(buf1, M, false);\n        const __m256i INVM = _mm256_set1_epi32((mint(M).inverse()).a);\n        for(int i = 0; i < l; i += 8) {\n            __m256i a = _mm256_loadu_si256((__m256i *)(ntt_inner::_buf1 + i));\n            __m256i b = montgomery_mul_256(a, INVM, r, m1);\n            __m256i c = my256_mulhi_epu32(my256_mullo_epu32(b, r), m1);\n            __m256i d = _mm256_and_si256(_mm256_cmpgt_epi32(c, m0), m1);\n            __m256i e = _mm256_sub_epi32(d, c);\n            _mm256_storeu_si256((__m256i *)(ntt_inner::_buf1 + i), e);\n        }\n    }\n\n    void ntt(vector<mint> &a) {\n        int M = (int)a.size();\n        for(int i = 0; i < M; i++) buf1[i].a = a[i].a;\n        ntt(buf1, M);\n        for(int i = 0; i < M; i++) a[i].a = buf1[i].a;\n    }\n\n    void intt(vector<mint> &a) {\n        int M = (int)a.size();\n        for(int i = 0; i < M; i++) buf1[i].a = a[i].a;\n        intt(buf1, M, true);\n        for(int i = 0; i < M; i++) a[i].a = buf1[i].a;\n    }\n\n    vector<mint> multiply(const vector<mint> &a, const vector<mint> &b) {\n        if(a.size() == 0 && b.size() == 0) return vector<mint>{};\n        int l = a.size() + b.size() - 1;\n        if(min<int>(a.size(), b.size()) <= 40) {\n            vector<mint> s(l);\n            for(int i = 0; i < (int)a.size(); ++i)\n                for(int j = 0; j < (int)b.size(); ++j) s[i + j] += a[i] * b[j];\n            return s;\n        }\n        assert(l <= ntt_inner::SZ_FFT_BUF);\n        int M = 4;\n        while(M < l) M <<= 1;\n        for(int i = 0; i < (int)a.size(); ++i) buf1[i].a = a[i].a;\n        for(int i = (int)a.size(); i < M; ++i) buf1[i].a = 0;\n        for(int i = 0; i < (int)b.size(); ++i) buf2[i].a = b[i].a;\n        for(int i = (int)b.size(); i < M; ++i) buf2[i].a = 0;\n        ntt(buf1, M);\n        ntt(buf2, M);\n        for(int i = 0; i < M; ++i) buf1[i].a = mint::reduce(uint64_t(buf1[i].a) * buf2[i].a);\n        intt(buf1, M, false);\n        vector<mint> s(l);\n        mint invm = mint(M).inverse();\n        for(int i = 0; i < l; ++i) s[i] = buf1[i] * invm;\n        return s;\n    }\n\n    void ntt_doubling(vector<mint> &a) {\n        int M = (int)a.size();\n        for(int i = 0; i < M; i++) buf1[i].a = a[i].a;\n        intt(buf1, M);\n        mint r = 1, zeta = mint(pr).pow((mint::get_mod() - 1) / (M << 1));\n        for(int i = 0; i < M; i++) buf1[i] *= r, r *= zeta;\n        ntt(buf1, M);\n        a.resize(2 * M);\n        for(int i = 0; i < M; i++) a[M + i].a = buf1[i].a;\n    }\n};\n#line 2 \"library/fps/formal-power-series.hpp\"\n\nusing mint = LazyMontgomeryModInt<998244353>;\nusing vmint = vector<mint>;\nBinomial<mint> binomial;\nmint inv(int i) { return binomial.inv(i); }\nmint C(int r, int c) { return binomial.C(r, c); }\nmint P(int r, int c) { return binomial.P(r, c); }\nmint fact(int r) { return binomial.fac(r); }\nmint ifact(int r) { return binomial.finv(r); }\n\n} // namespace Modular998\n\nusing namespace Modular998;\n\nmint dp[720720];\n\nint main() {\n    INT(n, a0, x, y, k, M);\n    constexpr ll L = 720720;\n    binomial = Binomial<mint>((int)L + 1);\n    vmint dp(L);\n    mint ans;\n\n    mint T = mint(k) * mint(n).pow(k - 1);\n    ll e = a0;\n    rep(n) {\n        int s = e % L;\n        dp[s] += 1;\n        ans += T * (e - s);\n        e = (e * x + y) % M;\n    }\n\n    mint S = mint(n).pow(k - 1);\n    rep(m, 1, k + 1) {\n        rep(i, L) {\n            ans += dp[i] * i * S;\n            mint mem = dp[i];\n            dp[i] *= n - 1;\n            dp[i - i % m] += mem;\n        }\n        S *= inv(n);\n    }\n    OUT(ans);\n}"], "input": "", "output": "", "tags": ["combinatorics", "dp", "math", "number theory", "probabilities"], "dificulty": "2800", "interactive": false}