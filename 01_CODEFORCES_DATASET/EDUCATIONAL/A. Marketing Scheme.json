{
    "link": "https://codeforces.com//contest/1437/problem/A",
    "problemId": "775839",
    "problem_idx": "A",
    "shortId": "1437A",
    "contest_number": "1437",
    "problem_submissions": {
        "G": [
            96904215,
            96908358,
            96911556,
            96933769,
            96933754,
            96933518,
            96933473,
            96933445,
            96933414,
            96933394,
            96933374,
            96932455,
            96904310,
            96918769,
            96918726,
            96918674,
            96918569,
            96915736,
            96908201,
            96875131,
            106175814,
            96910852,
            96987761,
            96907141,
            96934887
        ],
        "F": [
            96888983,
            96900781,
            96907021,
            96914548,
            96914009,
            96904550,
            96923575,
            96889382,
            96917076,
            96892031,
            96900189,
            96901851,
            96912014,
            96916841,
            96913488,
            97559818,
            96910656
        ],
        "E": [
            96880914,
            96882404,
            96885840,
            96932444,
            96885328,
            96892490,
            96890860,
            96896271,
            96896163,
            96888156,
            96885346,
            96887072,
            96892577,
            96896957,
            96895240,
            96898636,
            97559735,
            96897006
        ],
        "D": [
            96875179,
            96877608,
            96875178,
            96880944,
            96885771,
            96877805,
            96898190,
            96885975,
            96876295,
            96879122,
            96877985,
            96883085,
            96879709,
            96879615,
            96881903,
            97558972,
            96886384
        ],
        "C": [
            96871849,
            96873242,
            96871401,
            96937777,
            96917473,
            96874581,
            96876847,
            96873952,
            96902915,
            96882435,
            96874057,
            96876339,
            96874008,
            96878071,
            96874148,
            96873187,
            96875974,
            97558809,
            96872333
        ],
        "B": [
            96868094,
            96870116,
            96868044,
            96871520,
            96869439,
            96870069,
            96905187,
            96921093,
            96871936,
            96870828,
            96870841,
            96868971,
            96868275,
            96868652,
            96869849,
            97558720,
            96868938
        ],
        "A": [
            96867417,
            96867598,
            96867496,
            96867654,
            96867506,
            96867568,
            96906923,
            96868396,
            96867566,
            96869874,
            96869082,
            96867617,
            96867510,
            96867621,
            96867703,
            97558428,
            96867545
        ]
    },
    "name": "A. Marketing Scheme",
    "statement": "You got a job as a marketer in a pet shop, and your current task is to\r\nboost sales of cat food. One of the strategies is to sell cans of food\r\nin packs with discounts. Suppose you decided to sell packs with a cans\r\nin a pack with a discount and some customer wants to buy x cans of cat\r\nfood. Then he follows a greedy strategy: he buys\r\nleft\r\nlfloor\r\nfrac{x}{a}\r\nright\r\nrfloor packs with a discount; then he wants to buy the remaining (x\r\nbmod a) cans one by one. But customers are greedy in general, so if the\r\ncustomer wants to buy (x\r\nbmod a) cans one by one and it happens that (x\r\nbmod a)\r\nge\r\nfrac{a}{2} he decides to buy the whole pack of a cans (instead of buying\r\n(x\r\nbmod a) cans). It makes you, as a marketer, happy since the customer\r\nbought more than he wanted initially.You know that each of the customers\r\nthat come to your shop can buy any number of cans from l to r inclusive.\r\nCan you choose such size of pack a that each customer buys more cans\r\nthan they wanted initially?\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__);fflush(stderr);\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) {\n\t\tll x, y;\n\t\tscanf(\"%lld%lld\", &x, &y);\n\t\tif (2 * x > y) {\n\t\t\tprintf(\"YES\\n\");\n\t\t} else {\n\t\t\tprintf(\"NO\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Marketing Scheme.json",
    "editorial_link": "https://codeforces.com//blog/entry/84149",
    "editorial": "Note that if then exists such that and, obviously, a customer, who wants\r\nto buy cans won\u00e2\u0080\u0099t buy more than he wants.That\u00e2\u0080\u0099s why and we can rephrase\r\nour task as finding such that . The longer the segment is the better and\r\nthe maximum we can take is . As a result, we need to check that .\r\n"
}