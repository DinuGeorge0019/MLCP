{
    "link": "https://codeforces.com//contest/1680/problem/C",
    "problemId": "1398257",
    "problem_idx": "C",
    "shortId": "1680C",
    "contest_number": "1680",
    "problem_submissions": {
        "F": [
            157047850,
            157060684,
            157042836,
            157059615,
            157060798,
            158084238,
            157065404,
            157062967,
            157061917,
            157070522,
            157068911,
            157063520,
            157068892,
            157055321,
            157070359,
            157059828,
            157067724,
            157073079,
            157081810,
            157079385,
            157105181
        ],
        "E": [
            157041040,
            157049624,
            157047687,
            157040462,
            157036732,
            157047646,
            157052435,
            157048797,
            157052165,
            157051933,
            157052874,
            157059209,
            157046788,
            157045330,
            157056328,
            157052190,
            157048507,
            157050045,
            157051601,
            157048385
        ],
        "D": [
            157034306,
            157035182,
            157038681,
            157048294,
            158084226,
            157074494,
            157044699,
            157036339,
            157047488,
            157040348,
            157044725,
            157050170,
            157047151,
            157062708,
            157050690,
            157073571,
            157048489,
            157064425,
            157042063,
            157043656,
            157043396,
            157043910
        ],
        "C": [
            157027102,
            157026046,
            157029273,
            157029023,
            158084216,
            157023897,
            157025338,
            157028892,
            157029198,
            157031553,
            157033288,
            157030228,
            157028759,
            157029727,
            157032895,
            157036498,
            157043784,
            157026230,
            157030697,
            157031960,
            157038763
        ],
        "B": [
            157018674,
            157018124,
            157022874,
            157018932,
            157018732,
            157019545,
            157018987,
            157019892,
            157025559,
            157018220,
            157022589,
            157021909,
            157021994,
            157021310,
            157023912,
            157020972,
            157018915,
            157021224,
            157020613,
            157022918
        ],
        "A": [
            157018002,
            157017909,
            157018617,
            157017994,
            157017953,
            157018014,
            157018037,
            157018035,
            157019519,
            157017930,
            157031859,
            157018590,
            157019204,
            157018082,
            157018046,
            157018257,
            157017944,
            157018274,
            157018303,
            157018968
        ]
    },
    "name": "C. Binary String",
    "statement": "You are given a string s consisting of characters and/or .You have to\r\nremove several (possibly zero) characters from the beginning of the\r\nstring, and then several (possibly zero) characters from the end of the\r\nstring. . The cost of the removal is the of the following two values:\r\nthe number of characters left in the string; the number of characters\r\nremoved from the string. What is the cost of removal you can achieve?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nvoid solve(){\n\tstring s;\n\tcin >> s;\n\tint n = (int)s.size();\n\tint st = -1;\n\tint en = n;\n\twhile(st + 1 < en){\n\t\tint mid = (st + en) / 2;\n\t\tbool works = false;\n\t\tint left0 = 0;\n\t\tfor(char c : s) if(c == '0') left0++;\n\t\tint rem1 = 0;\n\t\tint l = 0;\n\t\twhile(l < n && left0 > mid){\n\t\t\tif(s[l] == '0'){\n\t\t\t\tleft0--;\n\t\t\t} else {\n\t\t\t\trem1++;\n\t\t\t}\n\t\t\tl++;\n\t\t}\n\t\tif(left0 <= mid && rem1 <= mid) works = true;\n\t\tint r = n;\n\t\twhile(l > 0){\n\t\t\tl--;\n\t\t\tif(s[l] == '0'){\n\t\t\t\tleft0++;\n\t\t\t} else {\n\t\t\t\trem1--;\n\t\t\t}\n\t\t\twhile(r > l && left0 > mid){\n\t\t\t\tr--;\n\t\t\t\tif(s[r] == '0'){\n\t\t\t\t\tleft0--;\n\t\t\t\t} else {\n\t\t\t\t\trem1++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(left0 <= mid && rem1 <= mid) works = true;\n\t\t}\n\t\tif(works){\n\t\t\ten = mid;\n\t\t} else {\n\t\t\tst = mid;\n\t\t}\n\t}\n\tcout << en << '\\n';\n}\n\nint main(){\n\tios_base::sync_with_stdio(false), cin.tie(nullptr);\n\tint T;\n\tcin >> T;\n\twhile(T--) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "strings",
        "two pointers"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Binary String.json",
    "editorial_link": "https://codeforces.com//blog/entry/102852",
    "editorial": "There are many different approaches to this problem: dynamic\r\nprogramming, binary search, greedy, two pointers, anything you want. The\r\nmodel solution uses an approach based on binary search, so I\u00e2\u0080\u0099ll describe\r\nit.First of all, why does binary search work? Let\u00e2\u0080\u0099s say that the number\r\nof \u00e2\u0080\u0099s is . If the cost of deletion is , then we have deleted at most\r\ncharacters , and have left at most characters . Let\u00e2\u0080\u0099s increase the\r\nnumber of characters we delete from the prefix of the string until the\r\nnumber of deleted \u00e2\u0080\u0099s becomes : if , it\u00e2\u0080\u0099s always possible. So, if we\r\nconsider the segment of values , the fact that we can get cost implies\r\nthat we can get cost , so we can use binary search on segment to find\r\nthe minimum achievable cost.Now, how to check if we can obtain the cost\r\nof deletion equal to ? One possible way to do this is to form an array ,\r\nwhere is the position of the -th character in the string, and find the\r\nminimum value of in this array: the string that should remain has to\r\ncontain at least characters , and the minimum value of is the minimum\r\npossible length of such string. Then we can find the number of \u00e2\u0080\u0099s in\r\nthis string and check if it is greater than or not.\r\n"
}