{
    "link": "https://codeforces.com//contest/1117/problem/A",
    "problemId": "300041",
    "problem_idx": "A",
    "shortId": "1117A",
    "contest_number": "1117",
    "problem_submissions": {
        "G": [
            50133387,
            50123254,
            50123975,
            50124239,
            50123132,
            50123974,
            50123215,
            50127013,
            50125132,
            50130140,
            50133285,
            50124682,
            50142168,
            50142000,
            50128625,
            50127307,
            50133494,
            50129719,
            50134469,
            50129830
        ],
        "F": [
            50129894,
            50129949,
            50128458,
            50125468,
            50258283,
            50124925,
            50127988,
            50122434,
            50127178,
            50132498,
            50126909,
            50125577
        ],
        "E": [
            50113506,
            50115627,
            50118164,
            50107209,
            50118889,
            50116932,
            50118288,
            50119948,
            50118689,
            50116057,
            50116780,
            50120258,
            50120803,
            50119739,
            50121927,
            50120709,
            50116907,
            50127759,
            50122643
        ],
        "D": [
            50110620,
            50112367,
            50131628,
            50126652,
            50113412,
            50109860,
            50115490,
            50114987,
            50116012,
            50113616,
            50125192,
            50118574,
            50115262,
            50116431,
            50116297,
            50116049,
            50110665,
            50113350,
            50117624
        ],
        "C": [
            50108198,
            50108891,
            50111125,
            50127915,
            50107557,
            50112815,
            50111363,
            50117842,
            50111074,
            50110415,
            50111200,
            50113692,
            50111129,
            50113480,
            50108576,
            50111462,
            50115486,
            50110963,
            50119614
        ],
        "B": [
            50104160,
            50104529,
            50104672,
            50128597,
            50104068,
            50103950,
            50111786,
            50105649,
            50106152,
            50105125,
            50105851,
            50105634,
            50104517,
            50104965,
            50103901,
            50105704,
            50105385,
            50105318,
            50104942
        ],
        "A": [
            50102635,
            50102746,
            50102713,
            50128246,
            50102816,
            50102612,
            50103360,
            50104051,
            50103578,
            50102668,
            50103665,
            50103717,
            50102845,
            50102752,
            50102665,
            50102783,
            50102642,
            50102966,
            50102721
        ]
    },
    "name": "A. Best Subsegment",
    "statement": "You are given array a_1, a_2,\r\ndots, a_n. Find the subsegment a_l, a_{l+1},\r\ndots, a_r (1\r\nle l\r\nle r\r\nle n) with maximum arithmetic mean\r\nfrac{1}{r - l + 1}\r\nsum\r\nlimits_{i=l}^{r}{a_i} (in floating-point numbers, i.e. without any\r\nrounding).If there are many such subsegments find the one.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef signed long long ll;\n\n#undef _P\n#define _P(...) (void)printf(__VA_ARGS__)\n#define FOR(x,to) for(x=0;x<(to);x++)\n#define FORR(x,arr) for(auto& x:arr)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define ALL(a) (a.begin()),(a.end())\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\n//-------------------------------------------------------\n\n\nint N;\nint A[101010];\n\nvoid solve() {\n\tint i,j,k,l,r,x,y; string s;\n\t\n\tcin>>N;\n\tint ma=-1;\n\tFOR(i,N) {\n\t\tcin>>A[i];\n\t\tma=max(ma,A[i]);\n\t}\n\tint cur=0,ret=0;\n\tFOR(i,N) {\n\t\tif(A[i]==ma) cur++;\n\t\telse cur=0;\n\t\tret=max(ret,cur);\n\t}\n\tcout<<ret<<endl;\n\t\n}\n\n\nint main(int argc,char** argv){\n\tstring s;int i;\n\tif(argc==1) ios::sync_with_stdio(false), cin.tie(0);\n\tFOR(i,argc-1) s+=argv[i+1],s+='\\n'; FOR(i,s.size()) ungetc(s[s.size()-1-i],stdin);\n\tcout.tie(0); solve(); return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Best Subsegment.json",
    "editorial_link": "https://codeforces.com//blog/entry/65365",
    "editorial": "There is a property of arithmetic mean: and the equality holds when .\r\nObviously, we can always gain maximum arithmetic mean equal to by taking\r\nsingle maximum element from . Considering the property above, we need to\r\ntake only maximum elements in our subsegment, that\u00e2\u0080\u0099s why we need to find\r\nthe longest subsegment consisting only of maximum elements.\r\n"
}