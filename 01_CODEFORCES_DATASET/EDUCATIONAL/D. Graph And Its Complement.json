{
    "link": "https://codeforces.com//contest/990/problem/D",
    "problemId": "188993",
    "problem_idx": "D",
    "shortId": "990D",
    "contest_number": "990",
    "problem_submissions": {
        "F": [
            39110066,
            39104822,
            39113275,
            39114587,
            39116563,
            39116347,
            39108471,
            39110743,
            39112419,
            39112294,
            39108515,
            39111997,
            39116686,
            39101868,
            39116200,
            39118004,
            39116805
        ],
        "G": [
            39103567,
            39107402,
            39106809,
            39106218,
            39109082,
            39109620,
            39112690,
            39099088,
            39107571,
            39107687,
            39101902,
            39093184,
            39110367,
            39109522,
            39104630,
            39111664,
            39109028,
            39108412,
            39110999,
            39098996,
            39104033,
            39110989
        ],
        "E": [
            39100436,
            39099837,
            39102349,
            39105427,
            39103107,
            39102633,
            39102885,
            39108880,
            39105761,
            39109203,
            39112620,
            39094389,
            39105905,
            39112883,
            39105943,
            39113374,
            39104376,
            39107310,
            39113606,
            39104223
        ],
        "D": [
            39097266,
            39096033,
            39098379,
            39099218,
            39098520,
            39098083,
            39096052,
            39105736,
            39099850,
            39105515,
            39109276,
            39104646,
            39099923,
            39115103,
            39100668,
            39103321,
            39099280,
            39102959,
            39097613,
            39097717
        ],
        "C": [
            39093177,
            39093378,
            39093798,
            39094808,
            39094793,
            39094824,
            39092448,
            39093937,
            39096177,
            39100038,
            39095064,
            39091685,
            39095797,
            39094884,
            39094704,
            39096565,
            39094721,
            39095152,
            39094603,
            39094594
        ],
        "B": [
            39090464,
            39091292,
            39090459,
            39091170,
            39091740,
            39091855,
            39090681,
            39099050,
            39093555,
            39099346,
            39098193,
            39090407,
            39092627,
            39091505,
            39092737,
            39092039,
            39090632,
            39091613,
            39090743,
            39091072
        ],
        "A": [
            39088999,
            39088905,
            39088870,
            39088899,
            39089924,
            39089350,
            39089008,
            39089597,
            39089600,
            39090391,
            39090409,
            39089125,
            39089740,
            39090714,
            39089522,
            39088868,
            39088892,
            39089011,
            39089148
        ]
    },
    "name": "D. Graph And Its Complement",
    "statement": "Given three numbers n, a, b. You need to find an adjacency matrix of\r\nsuch an undirected graph that the number of components in it is equal to\r\na, and the number of components in its complement is b. The matrix must\r\nbe symmetric, and all digits on the main diagonal must be zeroes.In an\r\nundirected graph loops (edges from a vertex to itself) are not allowed.\r\nIt can be at most one edge between a pair of vertices.The adjacency\r\nmatrix of an undirected graph is a square matrix of size n consisting\r\nonly of \"0\" and \"1\", where n is the number of vertices of the graph and\r\nthe i-th row and the i-th column correspond to the i-th vertex of the\r\ngraph. The cell (i,j) of the adjacency matrix contains 1 if and only if\r\nthe i-th and j-th vertices in the graph are connected by an edge.A\r\nconnected component is a set of vertices X such that for every two\r\nvertices from this set there exists at least one path in the graph\r\nconnecting this pair of vertices, but adding any other vertex to X\r\nviolates this rule.The complement or inverse of a graph G is a graph H\r\non the same vertices such that two distinct vertices of H are adjacent\r\nif and only if they are not adjacent in G.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int Maxn = 1005;\n\nint n, a, b;\nchar B[Maxn][Maxn];\n\nint main()\n{\n\tscanf(\"%d %d %d\", &n, &a, &b);\n\tif (a != 1 && b != 1) { printf(\"NO\\n\"); return 0; }\n\tif ((n == 2 || n == 3) && a == 1 && b == 1) { printf(\"NO\\n\"); return 0; }\n\tprintf(\"YES\\n\");\n\tfor (int i = 0; i < n; i++)\n\t\tB[i][i] = '0';\n\tchar cola = '1', colb = '0';\n\tif (b != 1) { swap(cola, colb); swap(a, b); }\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < n; j++) if (i != j)\n\t\t\tB[i][j] = B[j][i] = colb;\n\tfor (int i = a - 1; i + 1 < n; i++)\n\t\tB[i][i + 1] = B[i + 1][i] = cola;\n\tfor (int i = 0; i < n; i++) {\n\t\tB[i][n] = '\\0';\n\t\tprintf(\"%s\\n\", B[i]);\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "graphs",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Graph And Its Complement.json",
    "editorial_link": "https://codeforces.com//blog/entry/59962",
    "editorial": "Letâs prove that if , then . Let be the original graph, and the\r\ncomplement of the graph . Letâs look at each pair of vertices . If and\r\nbelong to different components of the graph , then there is an edge\r\nbetween them in the graph . Otherwise, and belong to the same component\r\nof the graph , but since has more than one component, there is vertex in\r\nother component of , and there are edges and in . Thatâs why, there is a\r\nconnected path for any pair of vertices , and the graph is connected.\r\nSimilarly, the case is proved.So, if , then the answer is \"NO\".\r\nOtherwise, . Consider the case where (if , we can swap and , and output\r\ncomplement of the constructed graph). To have components in the graph ,\r\nit is enough to connect the vertex with the vertex , the vertex with the\r\nvertex , , the vertex with the vertex . A particular cases are the tests\r\nand . There is no suitable graph for them.\r\n",
    "hint": []
}