{
    "link": "https://codeforces.com//contest/1117/problem/D",
    "problemId": "300044",
    "problem_idx": "D",
    "shortId": "1117D",
    "contest_number": "1117",
    "problem_submissions": {
        "G": [
            50133387,
            50123254,
            50123975,
            50124239,
            50123132,
            50123974,
            50123215,
            50127013,
            50125132,
            50130140,
            50133285,
            50124682,
            50142168,
            50142000,
            50128625,
            50127307,
            50133494,
            50129719,
            50134469,
            50129830
        ],
        "F": [
            50129894,
            50129949,
            50128458,
            50125468,
            50258283,
            50124925,
            50127988,
            50122434,
            50127178,
            50132498,
            50126909,
            50125577
        ],
        "E": [
            50113506,
            50115627,
            50118164,
            50107209,
            50118889,
            50116932,
            50118288,
            50119948,
            50118689,
            50116057,
            50116780,
            50120258,
            50120803,
            50119739,
            50121927,
            50120709,
            50116907,
            50127759,
            50122643
        ],
        "D": [
            50110620,
            50112367,
            50131628,
            50126652,
            50113412,
            50109860,
            50115490,
            50114987,
            50116012,
            50113616,
            50125192,
            50118574,
            50115262,
            50116431,
            50116297,
            50116049,
            50110665,
            50113350,
            50117624
        ],
        "C": [
            50108198,
            50108891,
            50111125,
            50127915,
            50107557,
            50112815,
            50111363,
            50117842,
            50111074,
            50110415,
            50111200,
            50113692,
            50111129,
            50113480,
            50108576,
            50111462,
            50115486,
            50110963,
            50119614
        ],
        "B": [
            50104160,
            50104529,
            50104672,
            50128597,
            50104068,
            50103950,
            50111786,
            50105649,
            50106152,
            50105125,
            50105851,
            50105634,
            50104517,
            50104965,
            50103901,
            50105704,
            50105385,
            50105318,
            50104942
        ],
        "A": [
            50102635,
            50102746,
            50102713,
            50128246,
            50102816,
            50102612,
            50103360,
            50104051,
            50103578,
            50102668,
            50103665,
            50103717,
            50102845,
            50102752,
            50102665,
            50102783,
            50102642,
            50102966,
            50102721
        ]
    },
    "name": "D. Magic Gems",
    "statement": "Reziba has many magic gems. Each magic gem can be split into M normal\r\ngems. The amount of space each magic (and normal) gem takes is 1 unit. A\r\nnormal gem cannot be split.Reziba wants to choose a set of magic gems\r\nand split some of them, so the total space occupied by the resulting set\r\nof gems is N units. If a magic gem is chosen and split, it takes M units\r\nof space (since it is split into M gems); if a magic gem is not split,\r\nit takes 1 unit.How many different configurations of the resulting set\r\nof gems can Reziba have, such that the total amount of space taken is N\r\nunits? Print the answer modulo 1000000007 (10^9+7). Two configurations\r\nare considered different if the number of magic gems Reziba takes to\r\nform them differs, or the indices of gems Reziba has to split differ.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef signed long long ll;\n\n#undef _P\n#define _P(...) (void)printf(__VA_ARGS__)\n#define FOR(x,to) for(x=0;x<(to);x++)\n#define FORR(x,arr) for(auto& x:arr)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define ALL(a) (a.begin()),(a.end())\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\n//-------------------------------------------------------\n\nconst int MAT=101;\nstruct Mat { ll v[MAT][MAT]; Mat(){ZERO(v);};};\nll mo=1000000007;\n\nMat mulmat(Mat& a,Mat& b,int n=MAT) {\n\tll mo2=4*mo*mo;\n\tint x,y,z; Mat r;\n\tFOR(x,n) FOR(y,n) r.v[x][y]=0;\n\tFOR(x,n) FOR(z,n) FOR(y,n) {\n\t\tr.v[x][y] += a.v[x][z]*b.v[z][y];\n\t\tif(r.v[x][y]>mo2) r.v[x][y] -= mo2;\n\t}\n\tFOR(x,n) FOR(y,n) r.v[x][y]%=mo;\n\treturn r;\n}\n\nMat powmat(ll p,Mat a,int n=MAT) {\n\tint i,x,y; Mat r;\n\tFOR(x,n) FOR(y,n) r.v[x][y]=0;\n\tFOR(i,n) r.v[i][i]=1;\n\twhile(p) {\n\t\tif(p%2) r=mulmat(r,a,n);\n\t\ta=mulmat(a,a,n);\n\t\tp>>=1;\n\t}\n\treturn r;\n}\n\nll modpow(ll a, ll n = mo-2) {\n\tll r=1;\n\twhile(n) r=r*((n%2)?a:1)%mo,a=a*a%mo,n>>=1;\n\treturn r;\n}\n\nll N,M;\n\nMat A;\n\nvoid solve() {\n\tint i,j,k,l,r,x,y; string s;\n\t\n\tcin>>N>>M;\n\t\n\tif(N<M) return _P(\"1\\n\");\n\t\n\tA.v[0][0]=A.v[0][M-1]=1;\n\tfor(i=1;i<M;i++) A.v[i][i-1]=1;\n\tMat B=powmat(N-(M-1),A,M);\n\t\n\tll ret=0;\n\tFOR(i,M) ret+=B.v[0][i];\n\tcout<<ret%mo<<endl;\n\t\n\t\n\t\n}\n\n\nint main(int argc,char** argv){\n\tstring s;int i;\n\tif(argc==1) ios::sync_with_stdio(false), cin.tie(0);\n\tFOR(i,argc-1) s+=argv[i+1],s+='\\n'; FOR(i,s.size()) ungetc(s[s.size()-1-i],stdin);\n\tcout.tie(0); solve(); return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "math",
        "matrices"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Magic Gems.json",
    "editorial_link": "https://codeforces.com//blog/entry/65365",
    "editorial": "Let\u00e2\u0080\u0099s reformulate the solution to the form of dynamic programming. the\r\nnumber of ways to split the gems so that the total amount of space taken\r\nis . Then there are obvious transitions of either splitting the last gem\r\nor not. .And that can be easily rewritten in such a way that matrix\r\nexponentiation becomes the solution.Overall complexity: .\r\n"
}