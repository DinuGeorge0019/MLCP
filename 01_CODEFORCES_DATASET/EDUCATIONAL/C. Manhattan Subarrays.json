{"link": "https://codeforces.com//contest/1550/problem/C", "problemId": "1045983", "problem_idx": "C", "shortId": "1550C", "contest_number": "1550", "problem_submissions": {"F": [122483395, 122494928, 122494758, 122498831, 122495349, 122507186, 122504855, 122499174, 122495286, 122505655, 122503411, 122504082, 122506733, 122503920, 122507265, 122505173, 122514546, 122521422, 122608494, 122664141], "E": [122476565, 122473503, 122481437, 122485433, 122484524, 122485212, 122477724, 122500057, 122485157, 122486711, 122488337, 122498290, 122489523, 122484119, 122495271, 122476181, 122481232, 122481328, 122483526, 122494342], "D": [122471547, 122486544, 122474791, 122475055, 122481071, 122477408, 122494393, 122479516, 122495901, 122496325, 122494541, 122483595, 122476325, 122488807, 122472450, 122476646, 122472723, 122476521, 122472515], "C": [122458749, 122460413, 122460329, 122460157, 122463960, 122460682, 122465581, 122460735, 122465109, 122500532, 122457985, 122461570, 122463484, 122466793, 122463616, 122461328, 122473999, 122456442, 122457482, 122463020, 122460109, 122461048], "B": [122454763, 122454362, 122455252, 122454378, 122452343, 122454794, 122458968, 122500982, 122454363, 122455298, 122455088, 122454989, 122455874, 122454863, 122466413, 122453075, 122454714, 122455929, 122454807, 122453314], "A": [122451771, 122451821, 122451970, 122451770, 122451715, 122451928, 122452304, 122501407, 122451789, 122452298, 122451870, 122452153, 122452203, 122451998, 122462780, 122451777, 122452058, 122452234, 122451766, 122451752]}, "name": "C. Manhattan Subarrays", "statement": "Suppose you have two points p = (x_p, y_p) and q = (x_q, y_q). Let\u2019s\r\ndenote the Manhattan distance between them as d(p, q) = |x_p - x_q| +\r\n|y_p - y_q|.Let\u2019s say that three points p, q, r form a triple if d(p, r)\r\n= d(p, q) + d(q, r).Let\u2019s say that an array b_1, b_2,\r\ndots, b_m is if it is impossible to choose three indices i, j, k such\r\nthat the points (b_i, i), (b_j, j) and (b_k, k) form a bad triple.You\r\nare given an array a_1, a_2,\r\ndots, a_n. Calculate the number of subarrays of a. A subarray of the\r\narray a is the array a_l, a_{l + 1},\r\ndots, a_r for some 1\r\nle l\r\nle r\r\nle n.Note that, according to the definition, subarrays of length 1 and 2\r\nare .\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    while (t--) {\n        int n;\n        std::cin >> n;\n        \n        std::vector<int> a(n);\n        for (int i = 0; i < n; i++) {\n            std::cin >> a[i];\n        }\n        \n        auto isGood = [&](int l, int r) {\n            for (int i = l; i <= r; i++) {\n                for (int j = i + 1; j <= r; j++) {\n                    for (int k = j + 1; k <= r; k++) {\n                        if (a[i] >= a[j] && a[j] >= a[k]) {\n                            return false;\n                        }\n                        if (a[i] <= a[j] && a[j] <= a[k]) {\n                            return false;\n                        }\n                    }\n                }\n            }\n            \n            return true;\n        };\n        \n        int ans = 0;\n        for (int i = 0, j = 0; i < n; i++) {\n            while (!isGood(j, i)) {\n                j++;\n            }\n            \n            ans += i - j + 1;\n        }\n        \n        std::cout << ans << \"\\n\";\n    }\n    \n    return 0;\n}"], "input": "", "output": "", "tags": ["brute force", "geometry", "greedy", "implementation"], "dificulty": "1700", "interactive": false}