{
    "link": "https://codeforces.com//contest/1217/problem/E",
    "problemId": "404647",
    "problem_idx": "E",
    "shortId": "1217E",
    "contest_number": "1217",
    "problem_submissions": {
        "F": [
            60119255,
            60118536,
            60117179,
            60112264,
            60128130,
            60127503,
            60126918,
            60123155,
            60108293,
            60125049,
            60146948,
            60128055,
            60130824,
            60133706,
            60133628,
            60133577,
            60133431,
            60148111,
            60128465,
            60130939,
            60194071,
            60161365,
            60161338,
            60161260,
            60133265,
            60131839
        ],
        "E": [
            60105066,
            60116418,
            60106390,
            60121938,
            60108304,
            60146942,
            60108305,
            60105389,
            60107537,
            60103856,
            60133910,
            60133496,
            60106424,
            60108802,
            60109228,
            60105208,
            60109038,
            60113612,
            60109155,
            60108937,
            60108739,
            60185912,
            60121211,
            60119745
        ],
        "D": [
            60093380,
            60096462,
            60101910,
            60101769,
            60146935,
            60099412,
            60094151,
            60095526,
            60100622,
            60098634,
            60099130,
            60111816,
            60100421,
            60093903,
            60100608,
            60099424,
            60113888,
            60106298,
            60107083
        ],
        "C": [
            60088873,
            60091347,
            60096256,
            60097679,
            60146931,
            60089815,
            60086473,
            60091850,
            60090230,
            60091598,
            60096228,
            60090577,
            60097512,
            60091408,
            60091681,
            60095632,
            60094356,
            60083533,
            60095174
        ],
        "B": [
            60085129,
            60084473,
            60090224,
            60089598,
            60146927,
            60087277,
            60084144,
            60085003,
            60086682,
            60087576,
            60086106,
            60085538,
            60094264,
            60087892,
            60094300,
            60089353,
            60089039,
            60094083,
            60086577
        ],
        "A": [
            60083114,
            60082761,
            60084492,
            60083647,
            60146918,
            60083293,
            60082871,
            60082868,
            60082958,
            60082935,
            60083622,
            60083726,
            60084591,
            60083527,
            60083900,
            60086802,
            60083832,
            60082824,
            60083536
        ]
    },
    "name": "E. Sum Queries ",
    "statement": "Let’s define a multiset the following way. Write down the sum of all\r\nelements of the multiset in its decimal representation. For each\r\nposition of that number check if the multiset includes at least one\r\nelement such that the digit of the element and the digit of the sum at\r\nthat position are the same. If that holds for every position, then the\r\nmultiset is . Otherwise it’s .For example, multiset\r\n{20, 300, 10001\r\n} is and multiset\r\n{20, 310, 10001\r\n} is : The red digits mark the elements and the positions for which\r\nthese elements have the same digit as the sum. The sum of the first\r\nmultiset is 10321, every position has the digit required. The sum of the\r\nsecond multiset is 10331 and the second-to-last digit doesn’t appear in\r\nany number, thus making the multiset .You are given an array a_1, a_2,\r\ndots, a_n, consisting of n integers.You are asked to perform some\r\nqueries on it. The queries can be of two types: 1 i x replace a_i with\r\nthe value x; 2 l r find the subset of the multiset of the numbers a_l,\r\na_{l + 1},\r\ndots, a_r with the minimum sum, or report that no subset exists. Note\r\nthat the empty multiset is .For each query of the second type print the\r\nlowest sum of the subset. Print if no subset exists.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define fs first\n#define se second\n#define y0 qwertyuiop\n#define y1 asdfghjkl\n\n/*\nAuthor : Tropical_maid\nCreated : 2019/09/06, 00:05:55\n*/\n\nusing namespace std;\ntypedef long long llong;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef pair<llong, llong> pll;\n\nconst int inf = 1e9 + 5;\n\npii operator+(pii a, pii b) {\n    if (a.fs > b.fs) a.se = a.fs, a.fs = b.fs;\n    else if (a.se > b.fs) a.se = b.fs;\n    if (a.fs > b.se) a.se = a.fs, a.fs = b.se;\n    else if (a.se > b.se) a.se = b.se;\n    return a;\n}\n\nconst int sz = 1 << 18;\nstruct segtree {\n    pii seg[sz << 1];\n    segtree() {\n        for (int i = 0; i < (sz << 1); ++i) seg[i] = pii(inf, inf);\n    }\n    void init() {\n        for (int i = sz; --i; ) seg[i] = seg[i << 1] + seg[i << 1 | 1];\n    }\n    void update(int x, int v) {\n        x += sz;\n        seg[x] = pii(v, inf);\n        while (x >>= 1)\n            seg[x] = seg[x << 1] + seg[x << 1 | 1];\n    }\n    pii query(int x, int y) {\n        x += sz;\n        y += sz;\n        pii ret = pii(inf, inf);\n        while (x <= y) {\n            if ((x & 1) == 1) ret = ret + seg[x++];\n            if ((y & 1) == 0) ret = ret + seg[y--];\n            x >>= 1;\n            y >>= 1;\n        }\n        return ret;\n    }\n} seg[10];\n\nvoid update(int i, int x) {\n    for (int j = 0, k = x; j < 10; ++j, k /= 10) {\n        if (k % 10 > 0) seg[j].update(i, x);\n        else seg[j].update(i, inf);\n    }\n}\n\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int n, q;\n    cin >> n >> q;\n    for (int i = 1; i <= n; ++i) {\n        int x;\n        cin >> x;\n        for (int j = 0, k = x; j < 10; ++j, k /= 10) {\n            if (k % 10 > 0) seg[j].seg[i + sz] = pii(x, inf);\n            else seg[j].seg[i + sz] = pii(inf, inf);\n        }\n    }\n    for (int i = 0; i < 10; ++i) seg[i].init();\n    while (q--) {\n        int t, x, y;\n        cin >> t >> x >> y;\n        if (t == 1) update(x, y);\n        else {\n            int ans = inf + inf;\n            for (int i = 0; i < 10; ++i) {\n                pii ret = seg[i].query(x, y);\n                if (ret.se == inf) continue;\n                ans = min(ans, ret.fs + ret.se);\n            }\n            printf(\"%d\\n\", ans < inf + inf ? ans : -1);\n        }\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Sum Queries .json",
    "editorial_link": "https://codeforces.com//blog/entry/69605",
    "editorial": "We are given the definition of the balanced multiset but letâs instead\r\nfix the criteria to determine if the multiset is unbalanced.Take an\r\nempty multiset and start adding numbers to it until it becomes\r\nunbalanced. Empty set to the set of one number is trivial. Now for the\r\nsecond number. If there is some position such that both numbers have\r\nnon-zero digits in it, then the multiset becomes unbalanced (let these\r\nbe non-zero digits and , then can be neither , nor ).After that letâs\r\nprove that you can never make an unbalanced multiset balanced again by\r\nadding numbers to it. Let there be such multisets and such is\r\nunbalanced, is balanced and . Take a look at the lowest position which\r\nhas non-zero digits in several numbers from . The sum of these digits\r\nshould be equal to at least one of them modulo (to satisfy the condition\r\nof balance). That can only mean their sum is greater or equal to , thus\r\nis make a carry to the next position. The sum of digits on the next\r\nposition plus carry should also be equal to some digit of them, thus\r\npushing some other carry value to the next one. And so on until the\r\ncarry makes it to the position greater than any position in any of the\r\nnumbers. But the carry is non-zero and there is no number with any\r\nnon-zero digit in this position. That makes our assumption\r\nincorrect.After all, it implies that any unbalanced multiset of size\r\ngreater than two has an unbalanced multiset of size two.The problem now\r\ngot reduced to: find a pair of numbers and such that , there is at least\r\none position such that both and have non-zero digits on it and is\r\nminimal possible.That can be easily maintained in a segment tree. Let a\r\nnode corresponding to the interval keep the best answer on an interval\r\n(the sum of such a pair) and an array the smallest number on an interval\r\nwhich has a non-zero digit at position or if none exists.The update is\r\neasy. Iterate over the digits of a new number and update the values in\r\nthe array in the corresponding nodes.The merge is done the following\r\nway: push the best answers from children to the parent and then iterate\r\nover the positions and try to combine the smallest numbers at each one\r\nfrom the left child and the right child.Idea-wise this is the same as\r\nstoring a segtree and calculating the answer by each position\r\nseparately.However, these approaches differ by a huge constant factor\r\nperformance-wise. The former one accesses the memory in a much more\r\ncache-friendly way. You might want to take that as a general advice on\r\nimplementing multiple segtrees.Overall complexity: .\r\n",
    "hint": []
}