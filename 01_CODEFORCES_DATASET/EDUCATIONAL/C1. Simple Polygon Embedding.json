{
    "link": "https://codeforces.com//contest/1354/problem/C1",
    "problemId": "623456",
    "problem_idx": "C1",
    "shortId": "1354C1",
    "contest_number": "1354",
    "problem_submissions": {
        "G": [
            80502712,
            80500640,
            80479424,
            80521575,
            80514570,
            80507519,
            80516727,
            80506952,
            80522749,
            80517834
        ],
        "F": [
            80492752,
            80491818,
            80486741,
            80486733,
            80498606,
            80506559,
            80492000,
            80506147,
            80493453,
            80507365,
            80500930,
            80492368,
            80502196,
            80506705,
            80501348,
            80502603,
            80507003,
            80504378,
            80500666,
            80509209
        ],
        "E": [
            80478361,
            80481693,
            80494073,
            80473313,
            80489080,
            80489590,
            80500698,
            80489890,
            80484400,
            80477593,
            80478451,
            80492063,
            80495115,
            80483322,
            80494477,
            80486894,
            80494427,
            80491606,
            80488314
        ],
        "D": [
            80469519,
            80470691,
            80498555,
            80467168,
            80480497,
            80478286,
            80477445,
            80477111,
            80466399,
            80471019,
            80473056,
            80471601,
            80482362,
            80488495,
            80473238,
            80482948,
            80466995,
            80486731,
            80484796,
            80475358
        ],
        "C2": [
            80463522,
            80484245,
            80502970,
            80478908,
            80472069,
            80468985,
            80468689,
            80472664,
            80476619,
            80476720,
            80489656,
            80477361,
            80476069,
            80503667,
            80473397,
            80472911,
            80489616,
            80481827,
            80482549,
            80500296
        ],
        "C1": [
            80463378,
            80464968,
            80501505,
            80478534,
            80468463,
            80462050,
            80463990,
            80463377,
            80459508,
            80460645,
            80463967,
            80465199,
            80472341,
            80461193,
            80463170,
            80458830,
            80475032,
            80470173,
            80520837,
            80468845,
            80464138
        ],
        "B": [
            80454412,
            80455734,
            80504343,
            80456075,
            80456469,
            80457930,
            80459404,
            80456913,
            80454847,
            80456739,
            80454406,
            80455296,
            80457195,
            80455557,
            80457336,
            80455902,
            80456106,
            80460925,
            80455491,
            80455115
        ],
        "A": [
            80454037,
            80454106,
            80505746,
            80454365,
            80454427,
            80454271,
            80454716,
            80454697,
            80454135,
            80454424,
            80455156,
            80454027,
            80454887,
            80454126,
            80454558,
            80454452,
            80454285,
            80456834,
            80476438,
            80454206
        ]
    },
    "name": "C1. Simple Polygon Embedding",
    "statement": "You are given a regular polygon with 2\r\ncdot n vertices (it\u2019s convex and has equal sides and equal angles) and\r\nall its sides have length 1. Let\u2019s name it as 2n-gon.Your task is to\r\nfind the square of the minimum size such that you can embed 2n-gon in\r\nthe square. Embedding 2n-gon in the square means that you need to place\r\n2n-gon in the square in such way that each point which lies inside or on\r\na border of 2n-gon should also lie inside or on a border of the\r\nsquare.You can rotate 2n-gon and/or the square.\r\n",
    "solutions": [
        "#include <map>\n#include <set>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\nconst int inf = 1012345678;\nconst double pi = acos(-1.0);\nint main() {\n\tint Q;\n\tcin >> Q;\n\tcout.precision(20);\n\twhile (Q--) {\n\t\tint N;\n\t\tcin >> N; N *= 2;\n\t\tdouble pang = 2 * pi * (N % 4 == 0 ? 360.0 / (2 * N) : 360.0 / (4 * N)) / 360;\n\t\tdouble xl = 1.0e+99, xr = -1.0e+99, yl = 1.0e+99, yr = -1.0e+99;\n\t\tfor (int j = 0; j < N; ++j) {\n\t\t\tdouble px = cos(2 * pi * j / N + pang);\n\t\t\tdouble py = sin(2 * pi * j / N + pang);\n\t\t\txl = min(xl, px);\n\t\t\txr = max(xr, px);\n\t\t\tyl = min(yl, py);\n\t\t\tyr = max(yr, py);\n\t\t}\n\t\tdouble opt2 = max(xr - xl, yr - yl);\n\t\tcout << fixed << opt2 / sin(pi / N) / 2 << endl;\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "geometry",
        "math",
        "ternary search"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C1. Simple Polygon Embedding.json",
    "editorial_link": "https://codeforces.com//blog/entry/77593",
    "editorial": "It\u00e2\u0080\u0099s not hard to come up with a solution if you just imagine how -gon\r\nlooks when is even. The solution is to rotate -gon in such way that\r\nseveral its sides are parallel to sides of the square. And the answer is\r\nequal to the distance from center to any side multiplied by two, or:\r\n"
}