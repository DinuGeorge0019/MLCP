{"link": "https://codeforces.com//contest/600/problem/C", "problemId": "41575", "problem_idx": "C", "shortId": "600C", "contest_number": "600", "problem_submissions": {"E": [14516781, 14521796, 14522661, 14523717, 30527329, 14524644, 14516280, 14515812, 14516214, 14518451, 14519071, 14519248, 14519280, 14518850, 14518744, 14518295, 14521024, 14524030, 14518640, 14519985, 14534724, 14534675], "D": [14515579, 14519010, 14518774, 14521193, 14533916, 14533879, 17533027, 77083288, 14526699, 14520082], "C": [14514280, 14514611, 14515088, 14516246, 14514489, 14514198, 14514520, 14514586, 14514814, 14515845, 14514811, 14514852, 14514847, 14516022, 14513813, 14515214, 14515296, 14517008, 14517583], "B": [14513498, 14513713, 14514312, 14515199, 64489984, 64489958, 64437360, 64437339, 64437310, 64437262, 64437238, 64437187, 64356527, 64356317, 64356304, 64356219, 64356053, 64356040, 64356029, 64355961, 64355802, 64355581, 64355572, 64355497, 64355269, 64355250, 64355067, 64355022, 64355018, 64355008, 64354957, 64354927, 64354893, 64354674, 64354610, 64354604, 64354499, 64354477, 64354377, 64354366, 64354314, 64354299, 64354208, 64354016, 64353840, 64353829, 64353816, 64353659, 64353647, 64353627, 64353521, 64353432, 64353406, 64353383, 64353315, 64353296, 64352793, 64352299, 64352204, 14513750, 14513852, 14513619, 14513719, 14513814, 14513671, 14513567, 14513744, 14513927, 14514916, 14513319, 14514212, 14514452, 14514809, 14515622], "A": [14513396, 14513543, 14514079, 14514797, 14513623, 14513416, 14513555, 14513558, 14513502, 14513418, 14513548, 14513680, 14517095, 14519574, 14514382, 14515226], "F": [15165948, 15165905, 15165817, 110063771, 77143032, 14560500]}, "name": "C. Make Palindrome", "statement": "A string is called palindrome if it reads the same from left to right\r\nand from right to left. For example \"\", \"\", \"\" and \"\" are palindroms,\r\nbut strings \"\" and \"\" are not.You are given string consisting of\r\nlowercase Latin letters. At once you can choose any position in the\r\nstring and change letter in that position to any other lowercase letter.\r\nSo after each changing the length of the string doesn\u2019t change. At first\r\nyou can change some letters in . Then you can permute the order of\r\nletters as you want. Permutation doesn\u2019t count as changes. You should\r\nobtain palindrome with the minimal number of changes. If there are\r\nseveral ways to do that you should get the lexicographically\r\n(alphabetically) smallest palindrome. So firstly you should minimize the\r\nnumber of changes and then minimize the palindrome lexicographically.\r\n", "solutions": ["/*\nYour insecurities makes me feel\nSo helpless, feel like letting go\nYour insincerities, it makes a world\nOf difference, you will never know\n\nAnother voiced rejection\nThrow it at me, please just let me go\nAnother selfish reason\nThrow it at me, please just let me go\n\nIt's all too much for me, I cannot hide\nThe sickness you bring on in me\nFree of sympathy, you'll never know\nHow it hurts, you will never know\n\nAnother voiced rejection\nThrow it at me, please just let me go\nAnother selfish reason\nThrow it at me, please just let me go\n\nThrow it at me, please just let me go\nAnother selfish reason\nThrow it at me, please just let me go\nAnother voiced rejection\nThrow it at me, please just let me go\n\nAnother selfish reason, throw it at me\nPlease just let me go, let me go\n*/\n\n//#pragma comment(linker, \"/STACK:16777216\")\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <complex>\n#include <math.h>\n#include <set>\n#include <vector>\n#include <map>  \n#include <queue>\n#include <stdio.h>\n#include <stack>\n#include <algorithm>\n#include <list>\n#include <ctime>\n#include <memory.h>\n#include <ctime> \n#include <assert.h>\n\n#define y0 sdkfaslhagaklsldk\n#define y1 aasdfasdfasdf\n#define yn askfhwqriuperikldjk\n#define j1 assdgsdgasghsf\n#define tm sdfjahlfasfh\n#define lr asgasgash\n\n#define eps 1e-8\n#define M_PI 3.141592653589793\n#define bs 1000000007\n#define bsize 512\n\nconst int N = 200005;\n\nusing namespace std;\n\nstring st;\nint cnt[N];\ndeque<char> qu;\nvector<int> odd;\n\nint main(){\n\t//freopen(\"beavers.in\",\"r\",stdin);\n\t//freopen(\"beavers.out\",\"w\",stdout);\n\t//freopen(\"F:/in.txt\",\"r\",stdin);\n\t//freopen(\"F:/output.txt\",\"w\",stdout);\n\tios_base::sync_with_stdio(0);\n\t//cin.tie(0);\n\t\n\tcin>>st;\n\tfor (int i=0;i<st.size();i++)\n\t{\n\t\tcnt[st[i]]++;\n\t}\n\t\n\tfor (int i='a';i<='z';i++)\n\t\tif (cnt[i]%2)\n\t\t\todd.push_back(i);\n\t\n\tsort(odd.begin(),odd.end());\n\t/*\n\tif (odd.size()%2)\n\t{\n\t\tfor (int i=2;i<odd.size();i++)\n\t\t{\n\t\t\tcnt[odd[i]]--;\n\t\t\tcnt[odd[0]]++;\n\t\t}\n\t}\n\telse\n\t\n\tfor (int i=1;i<odd.size();i++)\n\t{\n\t\tcnt[odd[i]]--;\n\t\tcnt[odd[0]]++;\n\t}\n\t*/\n\t\n\tint sz=odd.size();\n\tint l=0;\n\tint r=sz-1;\n\twhile (l<r)\n\t{\n\t\tcnt[odd[l]]++;\n\t\tcnt[odd[r]]--;\n\t\t++l;\n\t\t--r;\n\t}\n\t\n\tint op=-1;\n\t\n\tfor (int i='a';i<='z';i++)\n\t{\n\t\tif (cnt[i]%2)\n\t\t{\n\t\t\tcnt[i]--;\n\t\t\tqu.push_back(i);\n\t\t}\n\t}\n\tfor (int i='z';i>='a';i--)\n\t{\n\t\twhile (cnt[i])\n\t\t{\n\t\t\tqu.push_back(i);\n\t\t\tqu.push_front(i);\n\t\t\tcnt[i]-=2;\n\t\t}\n\t}\n\t\n\twhile (qu.size())\n\t{\n\t\tcout<<qu.front();\n\t\tqu.pop_front();\n\t}\n\tcout<<endl;\n\t\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy", "strings"], "dificulty": "1800", "interactive": false}