{"link": "https://codeforces.com//contest/612/problem/C", "problemId": "43951", "problem_idx": "C", "shortId": "612C", "contest_number": "612", "problem_submissions": {"F": [15015795, 15017252, 15017564, 15018652, 15015599, 15019361, 15017340, 15018654, 15018390], "E": [15010777, 15013400, 15012462, 15011810, 15012679, 15013333, 15013462, 15013944, 15012201, 15013667, 15013024, 15014276, 15013859, 15015715, 15015116, 15015247, 15029017, 15014027], "D": [15009323, 15008963, 15010162, 15010758, 15010353, 15011058, 15011357, 15011634, 15014470, 15010446, 15011643, 15012291, 15011559, 15012012, 15012245, 15011608, 15011635, 15028872, 15012187], "C": [15008569, 15009102, 15009409, 15009193, 15010189, 15009546, 15011006, 15009509, 15009168, 115507184, 115502940, 15010264, 15009734, 15009610, 15009584, 15010138, 15009962, 15009608, 15009629], "B": [15008273, 15008554, 15008493, 15008437, 15009218, 15008849, 15010423, 15011364, 15008522, 15009393, 15008208, 15008534, 15008851, 15008467, 15008897, 15008961, 15010023], "A": [15008217, 15008351, 15008267, 15008284, 15008898, 15008420, 15010012, 15010693, 15008295, 15008665, 15008737, 15008297, 15008383, 15008260, 15008327, 15008392, 15008492]}, "name": "C. Replace To Make Regular Bracket Sequence", "statement": "You are given string consists of opening and closing brackets of four\r\nkinds , , , . There are two types of brackets: opening and closing. You\r\ncan replace any bracket by another of the same type. For example, you\r\ncan replace by the bracket , but you can\u2019t replace it by or .The\r\nfollowing definition of a regular bracket sequence is well-known, so you\r\ncan be familiar with it.Let\u2019s define a regular bracket sequence (RBS).\r\nEmpty string is RBS. Let and be a RBS then the strings , , , are also\r\nRBS.For example the string \"\" is RBS, but the strings \"\" and \"\" are\r\nnot.Determine the least number of replaces to make the string RBS.\r\n", "solutions": ["/*\nHide from the public eye, choose to appear when it suits you\nClaim you're just, killing women and children\nFight, when you choose to fight, hide in a cave when you're hunted\nLike a beast spawned from hell, utilizing fear\n\nChosen by god or a coward insane?\nStand up and show me your face!\n\nSuicidal, in a trance\nA religious army\nFight without a uniform and hide in the crowd\nCall it holy, call it just\nAuthorized by heaven\nLeave your wounded as they die, and call it gods will\n\nRun when its time to pay, fear consequence of your action\nReappear, when you're almost forgotten\nDream of a world in peace, yet you cause pain and destruction\nKill your own, a response of your actions\n\nCaptured in all you lies, fear is in your eyes\nCreature who's gone insane, your war is in vain\nTrapped in a cage of stone, we'll destroy your home\nConsequence of your action\n*/\n\n//#pragma comment(linker, \"/STACK:16777216\")\n#define _CRT_SECURE_NO_WARNINGS\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <complex>\n#include <math.h>\n#include <set>\n#include <vector>\n#include <map>  \n#include <queue>\n#include <stdio.h>\n#include <stack>\n#include <algorithm>\n#include <list>\n#include <ctime>\n#include <memory.h>\n#include <ctime> \n#include <assert.h>\n\n#define y0 sdkfaslhagaklsldk\n#define y1 aasdfasdfasdf\n#define yn askfhwqriuperikldjk\n#define j1 assdgsdgasghsf\n#define tm sdfjahlfasfh\n#define lr asgasgash\n\n#define eps 1e-8\n#define M_PI 3.141592653589793\n#define bs 1000000007\n#define bsize 512\n\nconst int N = 210000;\n\nusing namespace std;\n\nstring st;\nstack<char> S;\nint ans;\n\nint get_type(char c)\n{\n\tif (c == '<' || c == '{' || c == '[' || c == '(')\n\t\treturn 1;\n\treturn 2;\n}\n\nbool paired(char a, char b)\n{\n\tif (a == '<'&&b == '>')\n\t\treturn true;\n\tif (a == '('&&b == ')')\n\t\treturn true;\n\tif (a == '['&&b == ']')\n\t\treturn true;\n\tif (a == '{'&&b == '}')\n\t\treturn true;\n\treturn false;\n}\n\nint main(){\n\t//freopen(\"beavers.in\",\"r\",stdin);\n\t//freopen(\"beavers.out\",\"w\",stdout);\n\t//freopen(\"F:/in.txt\",\"r\",stdin);\n\t//freopen(\"F:/output.txt\",\"w\",stdout);\n\tios_base::sync_with_stdio(0);\n\t//cin.tie(0);\n\t\n\tcin >> st;\n\n\tfor (int i = 0; i < st.size(); i++)\n\t{\n\t\tif (get_type(st[i]) == 1)\n\t\t{\n\t\t\tS.push(st[i]);\n\t\t\tcontinue;\n\t\t}\n\t\tif (S.size() == 0)\n\t\t{\n\t\t\tcout << \"Impossible\" << endl;\n\t\t\treturn 0;\n\t\t}\n\t\tchar val = S.top();\n\t\tif (!paired(val, st[i]))\n\t\t\t++ans;\n\t\tS.pop();\n\t}\n\n\tif (S.size())\n\t{\n\t\tcout << \"Impossible\" << endl;\n\t\treturn 0;\n\t}\n\telse\n\n\t\tcout << ans << endl;\n\tcin.get(); cin.get();\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures", "expression parsing", "math"], "dificulty": "1400", "interactive": false}