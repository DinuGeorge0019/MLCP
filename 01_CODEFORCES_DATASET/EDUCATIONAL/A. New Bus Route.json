{
    "link": "https://codeforces.com//contest/792/problem/A",
    "problemId": "100424",
    "problem_idx": "A",
    "shortId": "792A",
    "contest_number": "792",
    "problem_submissions": {
        "F": [
            25853903,
            25865237
        ],
        "E": [
            25848693,
            25847349,
            25847865,
            25848336,
            25849755,
            25879304,
            25850910,
            25852379,
            25850927,
            25851533,
            25846730,
            25852220,
            25853726,
            25852467,
            25850303,
            25850709,
            25864381,
            25958829
        ],
        "D": [
            25844822,
            25845472,
            25845024,
            25845925,
            25845207,
            25846638,
            25846685,
            25844772,
            25847053,
            25844370,
            25847875,
            25846005,
            25849330,
            25846978,
            25848700,
            25846288,
            25847259,
            25846482,
            25845802
        ],
        "C": [
            25843667,
            25844426,
            25843057,
            25844653,
            25843502,
            25843226,
            25845206,
            25847034,
            25852877,
            25845288,
            25853718,
            25845444,
            25844045,
            25846780,
            25853037,
            25847850,
            25843767,
            25844267,
            25844868,
            25843846
        ],
        "B": [
            25841582,
            25841630,
            25841112,
            25842707,
            25841353,
            25841339,
            25842555,
            25842111,
            25842036,
            25841205,
            25844104,
            25841963,
            25843854,
            25843428,
            25846396,
            25841879,
            25841715,
            25842437,
            25841499
        ],
        "A": [
            25840740,
            25840467,
            25840502,
            25840643,
            25840525,
            25840508,
            25840842,
            25840507,
            25840672,
            25840477,
            25843123,
            25840669,
            25840725,
            25840826,
            25845885,
            25840646,
            25840520,
            25840707,
            25840777
        ]
    },
    "name": "A. New Bus Route",
    "statement": "There are cities situated along the main road of Berland. Cities are\r\nrepresented by their coordinates integer numbers . All coordinates are\r\npairwise distinct.It is possible to get from one city to another only by\r\nbus. But all buses and roads are very old, so the Minister of Transport\r\ndecided to build a new bus route. The Minister doesn’t want to spend\r\nlarge amounts of money he wants to choose two cities in such a way that\r\nthe distance between them is minimal possible. The distance between two\r\ncities is equal to the absolute value of the difference between their\r\ncoordinates.It is possible that there are multiple pairs of cities with\r\nminimal possible distance, so the Minister wants to know the quantity of\r\nsuch pairs. Your task is to write a program that will calculate the\r\nminimal possible distance between two pairs of cities and the quantity\r\nof pairs which have this distance.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <set>\n#include <map>\n#include <string>\n#include <vector>\n#include <bitset>\n#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <queue>\n\n#define mp make_pair\n#define pb push_back\n\n\ntypedef long long ll;\ntypedef long double ld;\n\nusing namespace std;\n\n#ifndef LOCAL\n#define cerr _cer\nstruct _cert\n{\n    template <typename T> _cert& operator << (T) { return *this; }\n};\n_cert _cer;\n#endif\n\ntemplate <typename T> void dprint(T begin, T end) {\n    for (auto i = begin; i != end; i++) {\n\t\tcerr << (*i) << \" \";\n    }\n    cerr << \"\\n\";\n}\n\nint n;\nint a[220000];\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; ++i)\n\t\tscanf(\"%d\", a + i);\n\tsort(a, a + n);\n\tll bst = a[n - 1] - a[0];\n\tll cnt = 0;\n\tfor (int i = 0; i < n - 1; ++i) {\n\t\tll l = a[i + 1] - a[i];\n\t\tif (bst > l)\n\t\t\tbst = l, cnt = 0;\n\t\tif (bst == l)\n\t\t\t++cnt;\n\t}\n\tcout << bst << \" \" << cnt << \"\\n\";\n\treturn 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "sortings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. New Bus Route.json",
    "editorial_link": "https://codeforces.com//blog/entry/51254",
    "editorial": "At first letâs notice that if there exists such triple , and that , then\r\nand .Thus we can sort all numbers and check only adjacent ones. There\r\nare exactly of such pairs. The only thing left is to find minimal\r\ndistance of all pairs and count pairs with that distance.Overall\r\ncomplexity:\r\n",
    "hint": []
}