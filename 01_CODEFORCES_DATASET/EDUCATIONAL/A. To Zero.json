{
    "link": "https://codeforces.com//contest/2075/problem/A",
    "problemId": "3273590",
    "problem_idx": "A",
    "shortId": "2075A",
    "contest_number": "2075",
    "problem_submissions": {
        "F": [
            311092897,
            311105371,
            311091977,
            311106822,
            311119612,
            311127395,
            311111998,
            311124374,
            311123265,
            311135481,
            311127374,
            311124949,
            311133033,
            311127513,
            311123593,
            311131608,
            311137578,
            311136881,
            311133323,
            311066636
        ],
        "E": [
            311078477,
            311076658,
            311072206,
            311087192,
            311086935,
            311076933,
            311081142,
            311089235,
            311087311,
            311085142,
            311096896,
            311100487,
            311099554,
            311111156,
            311091394,
            311097405,
            311088422,
            311171203,
            311103877,
            311113693,
            311080280
        ],
        "D": [
            311061322,
            311057750,
            311060365,
            311055119,
            311060010,
            311059723,
            311071257,
            311070356,
            311063998,
            311066698,
            311082700,
            311064184,
            311068410,
            311078395,
            311082862,
            311069076,
            311068306,
            311073979,
            311087117,
            311088989
        ],
        "C": [
            311052044,
            311051318,
            311056183,
            311050640,
            311054145,
            311055185,
            311051870,
            311052149,
            311059642,
            311052003,
            311055738,
            311055390,
            311062256,
            311062646,
            311066843,
            311053249,
            311062988,
            311059819,
            311096162
        ],
        "B": [
            311045239,
            311044707,
            311043555,
            311043641,
            311046416,
            311046113,
            311044758,
            311043793,
            311048255,
            311045137,
            311044396,
            311044990,
            311049796,
            311048015,
            311058751,
            311045105,
            311045287,
            311046394,
            311099408
        ],
        "A": [
            311042018,
            311040390,
            311040326,
            311040380,
            311040339,
            311040623,
            311040931,
            311040288,
            311041987,
            311040424,
            311040342,
            311040291,
            311041844,
            311040490,
            311049977,
            311040412,
            311040468,
            311040975,
            311101264
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/140781",
    "editorial": "If you subtract an odd number from an odd number, you will get an even\r\nnumber. And if you subtract an even number from an even number, you will\r\nalso get an even number. Therefore, after each operation, we obtain an\r\neven number.Additionally, we can always subtract the maximum number that\r\nwe can. If the result of the subtraction is less than , we can simply\r\nuse a smaller value of in the last operation.Based on this, we can write\r\nthe following solution: initially, if is odd, subtract from it to make\r\nit even (or do nothing if it is already even). Then subtract from the\r\nresulting until we reach or a negative number.However, we may have to\r\nsubtract from for a long time. Therefore, let’s speed this up. We need\r\nto find the minimum number of operations such that . That is, is (the\r\nresult of dividing by , rounded up).You can simply calculate using\r\ndouble precision floating-point numbers (type ) and round it using some\r\nstandard function like ; in this problem, you won’t have issues with\r\ncalculation accuracy. However, with large values of and , you may get an\r\nincorrect answer due to precision errors, so it’s better to divide by\r\nwith rounding up using integers. To divide the number by the number\r\nwithout using floating-point numbers, you can use one of two methods:\r\neither perform integer division of by rounding down (this is standard\r\ninteger division), and then add to the answer if ; or divide by rounding\r\ndown; this will automatically increase the answer by compared to\r\ndividing by if is not divisible by .\r\n",
    "name": "A. To Zero",
    "statement": "You are given two integers n and k; k is an odd number not less than 3.\r\nYour task is to turn n into 0.To do this, you can perform the following\r\noperation any number of times: choose a number x from 1 to k and\r\nsubtract it from n. However, if the value of n is even (divisible by 2),\r\nthen x must also be even, and if the value of n is odd (not divisible by\r\n2), then x must be odd.In different operations, you can choose the same\r\nvalues of x, but you don’t have to. So, there are no limitations on\r\nusing the same value of x.Calculate the minimum number of operations\r\nrequired to turn n into 0.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. To Zero.json",
    "hint": []
}