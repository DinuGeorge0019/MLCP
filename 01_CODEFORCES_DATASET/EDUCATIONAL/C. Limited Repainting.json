{
    "link": "https://codeforces.com//contest/2070/problem/C",
    "problemId": "3233352",
    "problem_idx": "C",
    "shortId": "2070C",
    "contest_number": "2070",
    "problem_submissions": {
        "F": [
            308138412,
            308139598,
            308140261,
            308135086,
            308908838,
            308908402,
            308148058,
            308132721,
            308156502,
            308160384,
            308171018,
            308167755,
            308165459,
            308169840,
            308157047,
            308169763,
            308168481,
            308160062,
            308168693,
            308165415,
            308163695,
            308171178,
            308169858,
            308170143,
            308112373,
            308154384
        ],
        "E": [
            308118136,
            308123977,
            308115696,
            308119993,
            308121221,
            308160669,
            308139138,
            308136015,
            308135014,
            308127816,
            308146323,
            308144103,
            308131271,
            308145219,
            308126468,
            308144951,
            308131787,
            308146433,
            308129269,
            308170336
        ],
        "D": [
            308106225,
            308103599,
            308103669,
            308108885,
            308112445,
            308106317,
            308115443,
            308108990,
            308111970,
            308115191,
            308111541,
            308110510,
            308111609,
            308122150,
            308114708,
            308128882,
            308117643,
            308118502,
            308133018,
            308115402
        ],
        "C": [
            308100859,
            308098324,
            308098879,
            308109896,
            308106577,
            308101095,
            308107090,
            308102322,
            308104592,
            308108143,
            308104331,
            308111140,
            308106216,
            308114471,
            308109710,
            308123284,
            308111358,
            308110052,
            308140320,
            308124878
        ],
        "B": [
            308096187,
            308093094,
            308093408,
            308096114,
            308095735,
            308094203,
            308101217,
            308098141,
            308098911,
            308093342,
            308098262,
            308097763,
            308099852,
            308108770,
            308099377,
            308099819,
            308097452,
            308104146,
            308143559,
            308098413
        ],
        "A": [
            308091489,
            308091216,
            308091213,
            308091721,
            308091212,
            308091326,
            308095453,
            308091596,
            308092398,
            308091301,
            308091697,
            308091411,
            308091275,
            308091454,
            308091384,
            308091843,
            308091304,
            308091461,
            308145036,
            308091695
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/140146",
    "editorial": "The problem asks to minimize the maximum. An experienced participant\r\nshould immediately consider binary search as a possible solution.The\r\ncondition for binary search can be formulated as follows: is there a\r\ncoloring such that its penalty does not exceed ? If the penalty does not\r\nexceed , then it does not exceed , which means the function is\r\nmonotonic.This can be interpreted as follows. Cells with a penalty less\r\nthan or equal to can be left red, or they can be painted blue. Cells\r\nwith a penalty greater than must be painted the correct color. In fact,\r\nsince we donâ€™t care about the cells of the first type, we can simply\r\nremove them from the strip. We need to ensure that the cells of the\r\nsecond type can be correctly colored in no more than operations. That\r\nis, we need to check that the blue cells can be divided into no more\r\nthan contiguous segments.This check can be done in linear time. We can\r\ncount the number of positions such that cell is blue, and cell is either\r\nabsent or red. Each such position indicates the start of a segment.\r\nTherefore, their count is equal to the number of segments.Overall\r\ncomplexity: for each testcase.\r\n",
    "name": "C. Limited Repainting",
    "statement": "You are given a strip, consisting of n cells, all cells are initially\r\ncolored red.In one operation, you can choose a segment of consecutive\r\ncells and paint them . Before painting, the chosen cells can be either\r\nred or blue. Note that it is not possible to paint them red. You are\r\nallowed to perform at most k operations (possibly zero).For each cell,\r\nthe desired color after all operations is specified: red or blue.It is\r\nclear that it is not always possible to satisfy all requirements within\r\nk operations. Therefore, for each cell, a penalty is also specified,\r\nwhich is applied if the cell ends up the wrong color after all\r\noperations. For the i-th cell, the penalty is equal to a_i.The penalty\r\nof the final painting is calculated as the among all cells that are\r\npainted the wrong color. If there are no such cells, the painting\r\npenalty is equal to 0.What is the minimum penalty of the final painting\r\nthat can be achieved?\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Limited Repainting.json"
}