{
    "link": "https://codeforces.com//contest/1455/problem/C",
    "problemId": "815716",
    "problem_idx": "C",
    "shortId": "1455C",
    "contest_number": "1455",
    "problem_submissions": {
        "E": [
            100080155,
            100079381,
            100078449,
            100069275,
            100012146,
            100015897,
            100022845,
            100016854,
            100016418,
            100020237,
            100020046,
            100028425,
            100029068,
            100034230,
            100029402,
            100051234,
            100023750,
            100021088,
            100056948,
            100056790,
            100027354,
            100027044,
            100024946,
            100025731
        ],
        "F": [
            100078450,
            100025388,
            100024460,
            100036395,
            100043068,
            100042389,
            100045529,
            100060216,
            100044226,
            100043456,
            100052099,
            100046594,
            100048576,
            103031134
        ],
        "D": [
            100078448,
            100005946,
            100008735,
            100010384,
            100011871,
            100006215,
            100010441,
            100013223,
            100016383,
            100022310,
            100014989,
            100021069,
            100012652,
            100006839,
            100007553,
            100009178,
            100010622,
            100017383
        ],
        "B": [
            100078446,
            99997720,
            100001458,
            100004151,
            99999328,
            99996708,
            100002292,
            99997258,
            100004647,
            100006268,
            100003306,
            100007106,
            100000261,
            99994951,
            99999396,
            99999653,
            100001010,
            99999631,
            100001869
        ],
        "G": [
            100042304,
            100034172,
            100133399,
            100133353,
            100129809,
            100466593,
            100055077,
            100046402,
            100109589,
            102917383,
            100053452
        ],
        "C": [
            100002522,
            100004461,
            100006266,
            100003366,
            100000366,
            100005398,
            100004212,
            100008763,
            100010135,
            100006377,
            100015174,
            100005740,
            99999911,
            100008765,
            100001216,
            100002465,
            100006020
        ],
        "A": [
            99993343,
            99993450,
            99994266,
            99993464,
            99993313,
            99995467,
            99993403,
            99995627,
            99997962,
            99993689,
            99993532,
            99993614,
            99993321,
            99993386,
            99994914,
            99994222,
            99993353
        ]
    },
    "name": "C. Ping-pong",
    "statement": "Alice and Bob play ping-pong with simplified rules.During the game, the\r\nplayer serving the ball commences a play. The server strikes the ball\r\nthen the receiver makes a return by hitting the ball back. Thereafter,\r\nthe server and receiver must alternately make a return until one of them\r\ndoesn\u2019t make a return.The one who doesn\u2019t make a return loses this play.\r\nThe winner of the play commences the next play. Alice starts the first\r\nplay.Alice has x stamina and Bob has y. To hit the ball (while serving\r\nor returning) each player spends 1 stamina, so if they don\u2019t have any\r\nstamina, they can\u2019t return the ball (and lose the play) or can\u2019t serve\r\nthe ball (in this case, the other player serves the ball instead). If\r\nboth players run out of stamina, the game is over.Sometimes, it\u2019s\r\nstrategically optimal not to return the ball, lose the current play, but\r\nsave the stamina. On the contrary, when the server commences a play,\r\nthey have to hit the ball, if they have some stamina left.Both Alice and\r\nBob play optimally and want to, firstly, maximize their number of wins\r\nand, secondly, minimize the number of wins of their opponent.Calculate\r\nthe resulting number of Alice\u2019s and Bob\u2019s wins.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <chrono>\n#include <cmath>\n#include <cstring>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <vector>\nusing namespace std;\n\ntemplate<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }\ntemplate<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = \", \"; return os << '}'; }\n\nvoid dbg_out() { cerr << endl; }\ntemplate<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }\n\n#ifdef NEAL_DEBUG\n#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)\n#else\n#define dbg(...)\n#endif\n\n\nvoid run_case() {\n    int X, Y;\n    cin >> X >> Y;\n    cout << X - 1 << ' ' << Y << '\\n';\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n#ifndef NEAL_DEBUG\n    cin.tie(nullptr);\n#endif\n\n    int tests;\n    cin >> tests;\n\n    while (tests-- > 0)\n        run_case();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "games",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Ping-pong.json",
    "editorial_link": "https://codeforces.com//blog/entry/85186",
    "editorial": "Let\u00e2\u0080\u0099s find an answer for a little different version of the game. Let\u00e2\u0080\u0099s\r\nsay that is the final score if the first player has stamina and the\r\nsecond has stamina. The first player can either hit the ball or .How to\r\ncalculate ? Obviously, and . Otherwise, the first player can either hit\r\nthe ball: then the player spent stamina and now it\u00e2\u0080\u0099s to the second\r\nplayer to decide hit or lose. So basically, we moved to the state and\r\nthe answer in this case is where ; or lose the play: then the player\r\ndoesn\u00e2\u0080\u0099t spend any stamina, but the opponent serve the ball. He serves\r\nthe ball, spend stamina and return to the state, where the first player\r\ndecides hit or lose. Formally, the answer in this case is . Looking at ,\r\nand one of transitions we can guess that and prove it by induction: is\r\neither or , but and and is better than , so .The final step is to note\r\nthat since Alice starts the first play and serve ball the answer is .\r\n"
}