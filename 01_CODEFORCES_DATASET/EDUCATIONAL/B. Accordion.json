{"link": "https://codeforces.com//contest/1101/problem/B", "problemId": "281055", "problem_idx": "B", "shortId": "1101B", "contest_number": "1101", "problem_submissions": {"G": [48239479, 48229345, 48232833, 48236005, 48238584, 48237077, 48239817, 48236726, 48424442, 48241897, 48244236, 48246271, 48243763, 48241853, 48248346, 48243669, 48239804, 48232428, 48236056, 48233716], "F": [48234729, 48238339, 48245658, 48241971, 48243102, 48243980, 48248208, 48253790, 48249237, 48251881, 48251772, 48254209, 48250740, 48252733, 48257301, 48253052, 48236429, 48245061, 48242715, 48241926, 48292686, 48258183], "E": [48227685, 48224274, 48222676, 48226514, 48225235, 48225759, 48224993, 48229382, 48234805, 48231496, 48237158, 48276590, 48233129, 48237913, 48231111, 48230324, 48226575, 48224137, 48222074, 48228244, 48223937], "D": [48225904, 132803821, 132802920, 48232171, 48230596, 48230036, 48246912, 48230700, 48231186, 48232249, 48228292, 48232968, 48229870, 48235723, 48238573, 48253038, 48236119, 48237471, 48242160, 48224926, 48233664, 48227806, 48238739, 48236228], "C": [48220755, 48221737, 48220938, 48222851, 48222128, 48224023, 48222001, 48221817, 48228289, 48227053, 48229439, 48222389, 48224672, 48228555, 48228217, 48221108, 48222667, 48220453, 48229806, 48227541], "B": [48218348, 48218521, 48218025, 48219067, 48219419, 48219511, 48219183, 48218594, 48221174, 48217036, 48221983, 48224393, 48219257, 48217297, 48224770, 48217931, 48218900, 50490666, 48220404, 48221056], "A": [48216068, 48216088, 48215851, 48216101, 48215964, 48215856, 48216330, 48216376, 48215843, 48215822, 48218304, 48215863, 48216823, 48215814, 48216519, 48216032, 48215829, 48216427, 48216203]}, "name": "B. Accordion", "statement": "An is a string (yes, in the real world accordions are musical\r\ninstruments, but let\u2019s forget about it for a while) which can be\r\nrepresented as a concatenation of: an opening bracket (ASCII code 091),\r\na colon (ASCII code 058), some (possibly zero) vertical line characters\r\n(ASCII code 124), another colon, and a closing bracket (ASCII code 093).\r\nThe length of the accordion is the number of characters in it.For\r\nexample, , and are accordions having length 4, 6 and 7. , , , are not\r\naccordions. You are given a string s. You want to transform it into an\r\naccordion by removing some (possibly zero) characters from it. Note that\r\nyou may not insert new characters or reorder existing ones. Is it\r\npossible to obtain an accordion by removing characters from s, and if\r\nso, what is the maximum possible length of the result?\r\n", "solutions": ["#include <algorithm>  \n#include <iostream>  \n#include <sstream>  \n#include <string>  \n#include <vector>  \n#include <queue>  \n#include <set>  \n#include <map>  \n#include <cstdio>  \n#include <cstdlib>  \n#include <cctype>  \n#include <cmath>  \n#include <cstring>\n#include <list>  \n#include <cassert>\n#include <climits>\n#include <bitset>\nusing namespace std;  \n\n#define PB push_back  \n#define MP make_pair  \n#define SZ(v) ((int)(v).size())  \n#define FOR(i,a,b) for(int i=(a);i<(b);++i)  \n#define REP(i,n) FOR(i,0,n)  \n#define FORE(i,a,b) for(int i=(a);i<=(b);++i)  \n#define REPE(i,n) FORE(i,0,n)  \n#define FORSZ(i,a,v) FOR(i,a,SZ(v))  \n#define REPSZ(i,v) REP(i,SZ(v))  \ntypedef long long ll;  \nint gcd(int a,int b) { return b==0?a:gcd(b,a%b); }\n\nconst int MAXLEN=500000;\n\nchar s[MAXLEN+1]; int slen;\n\nint solve() {\n\tint l=0; while(l<slen&&s[l]!='[') ++l; while(l<slen&&s[l]!=':') ++l; if(l>=slen) return -1;\n\tint r=slen-1; while(r>=0&&s[r]!=']') --r; while(r>=0&&s[r]!=':') --r; if(l>=r) return -1;\n\tint ret=4; FORE(i,l+1,r-1) if(s[i]=='|') ++ret; return ret;\n}\n\nvoid run() {\n\tscanf(\"%s\",s); slen=strlen(s);\n\tprintf(\"%d\\n\",solve());\n}\n\nint main() {\n\trun();\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["greedy", "implementation"], "dificulty": "1300", "interactive": false}