{"link": "https://codeforces.com//contest/1288/problem/C", "problemId": "516089", "problem_idx": "C", "shortId": "1288C", "contest_number": "1288", "problem_submissions": {"F": [68819552, 68808531, 68807458, 70134760, 68807017, 68813769, 68812618, 102301682, 68810583, 68807992, 68818667, 68814476, 68814904, 148920535, 69079454, 69075918, 69087920, 68817577, 68867890, 68867024], "E": [68789304, 68799414, 70134713, 68794162, 68793417, 68796419, 68796122, 68798077, 68796394, 68805226, 68789819, 68793916, 68792563, 68828678, 68828570, 68828548, 68828508, 68828405, 68825187, 68824325, 68795790, 68796556, 68795660, 68795978, 68794855, 68795573, 68798172, 68797193], "D": [68783658, 68790087, 70134685, 68790433, 68784769, 68786894, 68787811, 68794372, 68789589, 68795124, 68786983, 68787137, 68787922, 68782622, 68788267, 68791758, 68788474, 68787396, 68786555, 69711971, 69711762, 68788055, 68792205], "C": [68780932, 68782036, 70134661, 68786063, 68780437, 68783287, 68784254, 68819757, 68791290, 86478943, 68783597, 68785836, 68782781, 68782659, 68783955, 68780494, 68784922, 68782777, 68784716, 68784512, 68784035, 68782534, 68783571], "B": [68779970, 68780416, 70134627, 68782676, 68781485, 68781383, 68781464, 68781107, 68781318, 68782464, 68780637, 68781282, 68782023, 68779901, 68781253, 68780876, 68782711, 68780458, 68781060, 68780498, 68781762], "A": [68779722, 68779812, 70134580, 68780111, 68782502, 68779822, 68779930, 68779750, 68780171, 68781059, 68779815, 68780062, 68780122, 68779758, 68779835, 68779859, 68779825, 68779886, 68780036, 68779829, 68780004]}, "name": "C. Two Arrays", "statement": "You are given two integers n and m. Calculate the number of pairs of\r\narrays (a, b) such that: the length of both arrays is equal to m; each\r\nelement of each array is an integer between 1 and n (inclusive); a_i\r\nle b_i for any index i from 1 to m; array a is sorted in non-descending\r\norder; array b is sorted in non-ascending order. As the result can be\r\nvery large, you should print it modulo 10^9+7.\r\n", "solutions": ["//#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n//defines\ntypedef long long ll;\ntypedef long double ld;\n#define TIME clock() * 1.0 / CLOCKS_PER_SEC\n#define prev _prev\n#define y0 _y0\n#define kill _kill\n\n//permanent constants\nconst ld pi = acos(-1.0);\nconst int day[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\nconst int digarr[10] = {6, 2, 5, 5, 4, 5, 6, 3, 7, 6};\nconst int dx[4] = {0, 1, 0, -1};\nconst int dy[4] = {1, 0, -1, 0};\nconst int dxo[8] = {-1, -1, -1, 0, 1, 1, 1, 0};\nconst int dyo[8] = {-1, 0, 1, 1, 1, 0, -1, -1};\nconst int alf = 26;\nconst int dig = 10;\nconst int two = 2;\nconst int th = 3;\nconst ll prost = 239;\nconst ll btc = 30;\nconst ld eps = 1e-10;\nconst ll INF = (ll)(1e18 + 239);\nconst int BIG = (int)(1e9 + 239);\nconst int MOD = 1e9 + 7; //(int)(1e9 + 7); //998244353;\nconst ll MOD2 = (ll)MOD * (ll)MOD;\n\n//random\nmt19937 rnd(239); //(chrono::high_resolution_clock::now().time_since_epoch().count());\n\n//constants\nconst int M = (int)(2e5 + 239);\nconst int N = (int)(1e3 + 239);\nconst int L = 20;\nconst int T = (1 << 20);\nconst int B = 500;\nconst int X = 12;\n\nint dp[X][N], n, m;\n\nint32_t main()\n{\n#ifdef ONPC\n    freopen(\"input.txt\", \"r\", stdin);\n#endif\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++)\n        dp[1][i] = 1;\n    for (int i = 2; i <= m; i++)\n        for (int j = 1; j <= n; j++)\n        {\n            dp[i][j] = 0;\n            for (int l = 1; l <= j; l++)\n            {\n                dp[i][j] += 1LL * (j - l + 1) * dp[i - 1][l] % MOD;\n                if (dp[i][j] >= MOD)\n                    dp[i][j] -= MOD;\n            }\n        }\n    int ans = 0;\n    for (int l = 1; l <= n; l++)\n    {\n        ans += 1LL * dp[m][l] * (n - l + 1) % MOD;\n        if (ans >= MOD)\n            ans -= MOD;\n    }\n    cout << ans;\n    return 0;\n}"], "input": "", "output": "", "tags": ["combinatorics", "dp"], "dificulty": "1600", "interactive": false}