{
    "link": "https://codeforces.com//contest/1093/problem/B",
    "problemId": "270223",
    "problem_idx": "B",
    "shortId": "1093B",
    "contest_number": "1093",
    "problem_submissions": {
        "F": [
            47064317,
            47066369,
            47072013,
            47063078,
            47070194,
            47066599,
            47069818,
            47071658,
            47069736,
            47073345,
            47066962,
            47067247,
            47069530,
            47073606,
            47073395,
            47061796,
            47063002,
            47067085,
            47069647
        ],
        "E": [
            47059940,
            47175053,
            47174990,
            47174965,
            47060977,
            47054377,
            47057431,
            47053669,
            47071310,
            47064501,
            47060021,
            47063571,
            47051018,
            47060722,
            47054485,
            47099037,
            47099010,
            47054662,
            47065797,
            47074158,
            47051089,
            47074689,
            47067318,
            47063903,
            47063526,
            47063507,
            47058046,
            47058483
        ],
        "G": [
            47051449,
            47054318,
            47060619,
            47069286,
            47064176,
            47054294,
            47058010,
            47064582,
            47059658,
            47045741,
            47069865,
            47071490,
            47044907,
            47068431,
            47054907,
            47076907,
            47070943,
            47045135,
            47052551,
            47065756,
            47061805,
            47064972
        ],
        "D": [
            47046394,
            47048590,
            47050157,
            47049421,
            47048833,
            47047771,
            47051232,
            47049608,
            47047579,
            47056236,
            47052390,
            47047717,
            47060889,
            47049097,
            47062998,
            47068801,
            47069194,
            47070905,
            47050207,
            47053679
        ],
        "C": [
            47043859,
            47045338,
            47046257,
            47046095,
            47044608,
            47045282,
            47047834,
            47047265,
            47045573,
            47053477,
            47049038,
            47043947,
            47058752,
            47044937,
            47064718,
            47070147,
            233878752,
            233878357,
            233877672,
            233874035,
            47071603,
            47073360,
            47045788,
            47044965
        ],
        "B": [
            47041242,
            47042516,
            47041777,
            47042122,
            47042500,
            47043090,
            47044535,
            47044930,
            47041021,
            47051714,
            47043546,
            47041074,
            47056563,
            47042532,
            47063756,
            47070397,
            47070118,
            47071889,
            47042554,
            47041254
        ],
        "A": [
            47040802,
            47041248,
            47040853,
            47040900,
            47040739,
            47042123,
            47040939,
            47043340,
            47040729,
            47052191,
            47041112,
            47040744,
            47075234,
            47055833,
            47041119,
            47063989,
            47070741,
            47069623,
            47071501,
            47041275,
            47040765
        ]
    },
    "name": "B. Letters Rearranging",
    "statement": "You are given a string s consisting only of lowercase Latin letters.You\r\ncan rearrange all letters of this string as you wish. Your task is to\r\nobtain a string by rearranging the letters of the given string or report\r\nthat it is impossible to do it.Letâ€™s call a string if it is not a\r\npalindrome. Palindrome is a string which is read from left to right the\r\nsame as from right to left. For example, strings \"\", \"\" and \"\" are\r\npalindromes and strings \"\", \"\" are not.You have to answer t queries.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int t; cin >> t;\n    while (t--) {\n        string s; cin >> s;\n        sort(s.begin(), s.end());\n        string t = s;\n        reverse(t.begin(), t.end());\n        if (s == t) cout << -1 << endl;\n        else cout << s << endl;\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "sortings",
        "strings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Letters Rearranging.json",
    "editorial_link": "https://codeforces.com/blog/entry/63877",
    "editorial": "The only case when the answer is is when all letters of the string are\r\nequal. Why is it so? Because if we have at least two different letters\r\nwe can place the first one at the first position of the string and the\r\nsecond one at the last position of the string. Then it is clearly that\r\nthe obtained string is . We can implement this solution by the following\r\nway: sort and if (the first letter equals to the last one) then the\r\nanswer is otherwise the answer is .\r\n",
    "hint": []
}