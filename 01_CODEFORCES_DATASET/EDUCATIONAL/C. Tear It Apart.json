{
    "link": "https://codeforces.com//contest/1821/problem/C",
    "problemId": "1887929",
    "problem_idx": "C",
    "shortId": "1821C",
    "contest_number": "1821",
    "problem_submissions": {
        "F": [
            202874134,
            202859904,
            202858229,
            202861559,
            202872887,
            202859974,
            202856919,
            202868327,
            202882475,
            202876779,
            202870359,
            202879197,
            202869342,
            202883580,
            202880852,
            203770664,
            202876913,
            202876748,
            202875057,
            202875004,
            202878771,
            202874220,
            202869665
        ],
        "E": [
            202851078,
            202851207,
            202852651,
            202845029,
            202854281,
            202869953,
            202852432,
            202850529,
            202858695,
            202849198,
            202862275,
            202850037,
            202856111,
            202863740,
            202868777,
            202865633,
            202858626,
            202863992,
            202876455
        ],
        "D": [
            202839910,
            202837788,
            202840967,
            202837261,
            202846749,
            202839594,
            202843601,
            202842780,
            202848113,
            202843851,
            202849914,
            202836012,
            202848152,
            202848821,
            202851217,
            202856400,
            202848668,
            202853904,
            202847149
        ],
        "C": [
            202829555,
            202830560,
            202832642,
            202830912,
            202836849,
            202832172,
            202834957,
            202827979,
            202831432,
            202832058,
            202834744,
            202833738,
            202834719,
            202831454,
            202838345,
            202836024,
            202839448,
            202842531,
            202836507
        ],
        "B": [
            202826167,
            202826238,
            202826386,
            202826297,
            202828596,
            202827059,
            202829521,
            202825674,
            202826732,
            202829400,
            202829530,
            202825769,
            202828359,
            202826421,
            202828754,
            202830182,
            202834397,
            202837813,
            202832744
        ],
        "A": [
            202824330,
            202824182,
            202824201,
            202824170,
            202825451,
            202824300,
            202825020,
            202824095,
            202824581,
            202824237,
            202824979,
            202824089,
            202824602,
            202824298,
            202824347,
            202824916,
            202826157,
            202824991,
            202825871
        ]
    },
    "name": "C. Tear It Apart",
    "statement": "You are given a string s, consisting of lowercase Latin letters.In one\r\noperation, you can select several (one or more) positions in it such\r\nthat no two selected positions are adjacent to each other. Then you\r\nremove the letters on the selected positions from the string. The\r\nresulting parts are concatenated without changing their order.What is\r\nthe smallest number of operations required to make all the letters in s\r\nthe same?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntemplate<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return true; } return false; }\ntemplate<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return true; } return false; }\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define mp make_pair\n#define si(x) int(x.size())\nconst int mod=998244353,MAX=300005,INF=1<<30;\n\nint main(){\n    \n    std::ifstream in(\"text.txt\");\n    std::cin.rdbuf(in.rdbuf());\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    int Q;cin>>Q;\n    while(Q--){\n        string S;cin>>S;\n        int ans=INF;\n        for(char c='a';c<='z';c++){\n            int ma=0;\n            int i=0;\n            while(i<si(S)){\n                if(S[i]==c) i++;\n                else{\n                    int j=i;\n                    while(j<si(S)&&S[j]!=c) j++;\n                    \n                    for(int t=1;;t++){\n                        if((1<<t)>j-i){\n                            chmax(ma,t);\n                            break;\n                        }\n                    }\n                    \n                    i=j;\n                }\n            }\n            \n            chmin(ans,ma);\n        }\n        \n        cout<<ans<<\"\\n\";\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math",
        "strings"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Tear It Apart.json",
    "editorial_link": "https://codeforces.com//blog/entry/115296",
    "editorial": "The resulting string looks like a single letter repeated a number of\r\ntimes. That sounds too vague. Letâs fix the exact letter that will be\r\nleft. Since the size of the alphabet is only , we can afford that.The\r\nletters now separate into letters and other letters. And all other\r\nletters can be treated as indistinguishable from each other. Letâs make\r\nletter into a binary and any other letter into a binary . Our goal is to\r\nremove all zeros from the string with the given operations.First, notice\r\nthat it doesnât help you to removes ones. If some operation contains\r\nboth ones and zeros, then taking ones out of it doesnât make any zeros\r\nin it adjacent. At the same time, these ones can only help you separate\r\nadjacent zeros later.Thus, we have some blocks of zeros, separated by\r\nthe blocks of ones. We want to remove only zeros. Notice how these\r\nblocks can be solved completely independently of each other. If you\r\nsolve block in operations, block in operations, ..., block in\r\noperations, then you can solve the entire string in operations. Since\r\nthe blocks are separated by the blocks of ones, you can combine the\r\nfirst operations for all blocks into one big operation and so on.The\r\nonly thing left is to calculate the number of operations for a single\r\nblock. Let it have length . Basically, in one operation, you can\r\ndecrease its length to . You can see that the longer the block, the\r\ngreater answer it has. So you can find the longest block first, then\r\ncalculate the answer for it. You can either use this iterative formula\r\nor notice that itâs a logarithm of in base and calculate that however\r\nyou want.To find the lengths of the blocks of zeros, you can use two\r\npointers.Overall complexity: per testcase.This problem can also be\r\nsolved in on an arbitrarily large alphabet. Basically, when you fix a\r\nletter, you can tell the lengths of the blocks of other letters by\r\nlooking at the occurrences of the letter. For occurrences , the lengths\r\nof the blocks are . So we can calculate the answer for a letter in . The\r\ntotal of that for all letters is .\r\n",
    "hint": []
}