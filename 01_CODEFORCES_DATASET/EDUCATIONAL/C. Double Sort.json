{
    "link": "https://codeforces.com//contest/1681/problem/C",
    "problemId": "1408804",
    "problem_idx": "C",
    "shortId": "1681C",
    "contest_number": "1681",
    "problem_submissions": {
        "E": [
            158182756,
            158181599,
            158189245,
            158201402,
            158212176,
            158209977,
            158197244,
            158200543,
            158207419,
            158195422,
            158212507,
            158201688,
            158217615,
            158236025,
            158203326,
            158213610,
            158220340,
            158209570,
            158222642,
            158202788
        ],
        "D": [
            158169620,
            158166339,
            158168627,
            158176540,
            158180183,
            158179810,
            158175614,
            158171745,
            158169793,
            158171043,
            158176143,
            158179351,
            158198071,
            158177219,
            158193904,
            158184952,
            158187520,
            158180354,
            158208785
        ],
        "F": [
            158163420,
            158197514,
            158198216,
            158189118,
            158175678,
            158193941,
            158204936,
            158208270,
            158190074,
            158203305,
            158200335,
            158211270,
            158186690,
            158250369,
            158237153,
            158219180,
            158187046,
            158203102,
            158220096,
            158206596,
            158220727
        ],
        "C": [
            158154298,
            158157033,
            158157275,
            158158888,
            158161011,
            158157520,
            158164047,
            158162763,
            158158338,
            158166846,
            158162496,
            158167443,
            158168946,
            158167710,
            158166768,
            158169766,
            158168157,
            158169965,
            158164354
        ],
        "B": [
            158153598,
            158154121,
            158153990,
            158154166,
            158155404,
            158154059,
            158159057,
            158156022,
            158154367,
            158163137,
            158157819,
            158159126,
            158157005,
            158167777,
            158160391,
            158158841,
            158161305,
            158161887,
            158159104
        ],
        "A": [
            158153541,
            158153617,
            158153597,
            158153653,
            158153683,
            158153631,
            158155593,
            158153768,
            158153633,
            158155729,
            158155747,
            158154711,
            158154019,
            158167893,
            158153987,
            158154332,
            158156617,
            158157260,
            158154882
        ]
    },
    "name": "C. Double Sort",
    "statement": "You are given two arrays a and b, both consisting of n integers.In one\r\nmove, you can choose two indices i and j (1\r\nle i, j\r\nle n; i\r\nneq j) and swap a_i with a_j and b_i with b_j. You have to perform the\r\nswap in both arrays.You are allowed to perform at most 10^4 moves\r\n(possibly, zero). Can you make both arrays sorted in a non-decreasing\r\norder at the end? If you can, print any sequence of moves that makes\r\nboth arrays sorted.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 23.05.2022 18:37:07       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n      cin >> a[i];\n    }\n    vector<int> b(n);\n    for (int i = 0; i < n; i++) {\n      cin >> b[i];\n    }\n    vector<pair<int, int>> p(n);\n    for (int i = 0; i < n; i++) {\n      p[i] = make_pair(a[i], b[i]);\n    }\n    sort(a.begin(), a.end());\n    sort(b.begin(), b.end());\n    vector<pair<int, int>> res;\n    bool fail = false;\n    for (int i = 0; i < n; i++) {\n      for (int j = i; j < n; j++) {\n        if (p[j] == make_pair(a[i], b[i])) {\n          swap(p[i], p[j]);\n          if (i != j) {\n            res.emplace_back(i, j);\n          }\n          break;\n        }\n      }\n      if (p[i] != make_pair(a[i], b[i])) {\n        fail = true;\n        break;\n      }\n    }\n    if (fail) {\n      cout << -1 << '\\n';\n    } else {\n      cout << res.size() << '\\n';\n      for (auto& p : res) {\n        cout << p.first + 1 << \" \" << p.second + 1 << \"\\n\";\n      }\n    }\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Double Sort.json",
    "editorial_link": "https://codeforces.com//blog/entry/103163",
    "editorial": "Imagine that all elements of are distinct. This way, sorting in\r\nincreasing order will fix the order of .If turns out sorted in a\r\nnon-decreasing order, then the answer exists. Otherwise, it doesnât. To\r\nobtain the sequence of swaps, you can sort with any comparison-based\r\nsorting algorithm you want: even bubble sort will not exceed the allowed\r\nnumber of swaps.What changes if has repeated elements? Distinct elements\r\nare still ordered among themselves, but now there are also blocks of\r\nequal elements. For each block, look into the corresponding values in .\r\nObviously, these have to be sorted in a non-decreasing order. Rearrange\r\nthem as they should be.In fact, this is exactly the same as sorting the\r\nsequence of pairs with a default comparator first by , then by .Since we\r\nfixed the wanted order, we can proceed with the same steps we made in a\r\ndistinct case.Overall complexity: or per testcase.\r\n",
    "hint": []
}