{"link": "https://codeforces.com//contest/846/problem/C", "problemId": "120999", "problem_idx": "C", "shortId": "846C", "contest_number": "846", "problem_submissions": {"F": [30108156, 30107162, 30106647, 30108328, 30107786, 30107476, 30108023, 30105549, 30105678, 30108397, 30109633, 30109280, 30109385, 30107975, 30110238, 30108732, 30108760, 30110164], "E": [30107342, 30108640, 30109160, 30110715, 30110194, 30109970, 30108774, 30110412, 30109505, 30110880, 30108739, 30110755, 30111630, 30111870, 30111911, 30111723, 30113425, 30111880], "D": [30105892, 30106073, 30106673, 30106266, 30106933, 30108722, 30106872, 30105786, 30108926, 30106473, 30106803, 30107029, 30107512, 30108104, 30109714, 30108207, 30110001, 30111074, 30108770], "C": [30105238, 30104755, 30105662, 30105293, 30106309, 30106223, 30104825, 30107791, 30105043, 30105080, 30106115, 30105906, 30106686, 30106808, 30107246, 30107701, 30107036, 30107208], "B": [30103719, 30103777, 30104242, 30103580, 30104340, 30105094, 30103843, 30104470, 30103928, 30103957, 30104536, 30104441, 30104836, 30104758, 30104309, 30105851, 30104847, 30105774], "A": [30103161, 30103232, 30103250, 30103170, 30103456, 30103369, 30103168, 30103235, 30103196, 30103253, 30103176, 30103313, 30103584, 30103300, 30103249, 30104174, 30103638, 30104542]}, "name": "C. Four Segments", "statement": "You are given an array of integer numbers. Let be the sum of all numbers\r\non positions from to non-inclusive (-th element is counted, -th element\r\nis not counted). For indices and holds . Indices in array are numbered\r\nfrom . For example, if , then , , and for each from to .Choose the\r\nindices of three delimiters , , () and divide the array in such a way\r\nthat the value of - + - is maximal. Note that some of the expressions\r\ncan correspond to empty segments (if for some segment).\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\n#define N 5140\nLL n , a[ N ] , s[ N ] , ss[ N ];\nLL lb[ N ] , rb[ N ];\nLL ls[ N ] , rs[ N ];\nint main(){\n  cin >> n;\n  for( int i = 0 ; i < n ; i ++ ){\n    cin >> a[ i ];\n    ss[ i ] = s[ i ] = a[ i ];\n    if( i ) s[ i ] += s[ i - 1 ];\n  }\n  for( int i = n - 2 ; i >= 0 ; i -- )\n    ss[ i ] += ss[ i + 1 ];\n  LL ans = s[ n - 1 ] , b[ 3 ] = { n , n , n };\n  LL bst = -1 , bs = 0;\n  for( int i = 0 ; i < n ; i ++ ){\n    if( s[ i ] > bs ) bs = s[ i ] , bst = i;\n    ls[ i ] = bs + bs - s[ i ];\n    lb[ i ] = bst;\n  }\n  if( ls[ n - 1 ] > ans ){\n    ans = ls[ n - 1 ];\n    b[ 0 ] = lb[ n - 1 ] + 1;\n    b[ 1 ] = n;\n    b[ 2 ] = n;\n  }\n  bst = n , bs = 0;\n  for( int i = n - 1 ; i >= 0 ; i -- ){\n    if( ss[ i ] < bs ) bs = ss[ i ] , bst = i;\n    rs[ i ] = ss[ i ] - bs - bs;\n    rb[ i ] = bst;\n  }\n  for( int i = 0 ; i + 1 < n ; i ++ ){\n    LL tans = ls[ i ] + rs[ i + 1 ];\n    if( tans <= ans ) continue;\n    ans = tans;\n    b[ 0 ] = lb[ i ] + 1;\n    b[ 1 ] = i + 1;\n    b[ 2 ] = rb[ i + 1 ];\n  }\n  cout << b[ 0 ] << \" \";\n  cout << b[ 1 ] << \" \";\n  cout << b[ 2 ] << endl;\n}\n"], "input": "", "output": "", "tags": ["brute force", "data structures", "dp"], "dificulty": "1800", "interactive": false}