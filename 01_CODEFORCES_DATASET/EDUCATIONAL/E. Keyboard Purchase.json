{
    "link": "https://codeforces.com//contest/1238/problem/E",
    "problemId": "434109",
    "problem_idx": "E",
    "shortId": "1238E",
    "contest_number": "1238",
    "problem_submissions": {
        "G": [
            62148377,
            62150345,
            62148994,
            62146428,
            62171195,
            62152430,
            62150450,
            62151715,
            63077598,
            62153399,
            62153961,
            62326923,
            62163873,
            62157710,
            63252631
        ],
        "C": [
            62139579,
            62128875,
            62134212,
            62149084,
            62171152,
            62131518,
            62131617,
            62138927,
            62130356,
            62145335,
            62127646,
            62128518,
            62127470,
            62128489,
            62132928,
            62130729,
            62130656,
            62131114,
            62129400,
            62129293,
            62129389,
            62141737
        ],
        "F": [
            62135057,
            62143199,
            62146057,
            62137636,
            62171175,
            62141888,
            62144431,
            62147441,
            62144667,
            62133761,
            62136545,
            62139411,
            62133600,
            62138749,
            62143755,
            62143321,
            62145892,
            62144865,
            62148327,
            62148901,
            62145390
        ],
        "E": [
            62130371,
            62135558,
            62133197,
            62133178,
            62171181,
            62138707,
            62138998,
            71444053,
            62143394,
            62142446,
            62126207,
            62132191,
            62134744,
            62139465,
            62131237,
            62138771,
            62335532,
            62136799,
            62138459,
            62139760,
            62138816,
            62133466,
            62139306,
            62136690
        ],
        "D": [
            62130325,
            62130011,
            62129721,
            62133154,
            62171155,
            62134587,
            62136980,
            62133511,
            62142844,
            62150513,
            62130499,
            62130138,
            62131294,
            62128520,
            62132339,
            62134000,
            62132013,
            62132252,
            62131248,
            62131658,
            62131164
        ],
        "B": [
            62124194,
            62124712,
            62125813,
            62133117,
            62171147,
            62134676,
            62126226,
            62125252,
            62142403,
            62146274,
            62123866,
            62124453,
            62125991,
            62125432,
            62124476,
            62123794,
            62126146,
            62127228,
            62126305,
            62123963,
            62127931,
            62125892
        ],
        "A": [
            62120855,
            62121082,
            62121998,
            62121600,
            62171137,
            62121874,
            62120946,
            62121255,
            62120923,
            62120856,
            62121293,
            62121013,
            62121176,
            62120783,
            62120942,
            62121012,
            62121072,
            62121136,
            62121767,
            62121527
        ]
    },
    "name": "E. Keyboard Purchase",
    "statement": "You have a password which you often type a string s of length n. Every\r\ncharacter of this string is one of the first m lowercase Latin\r\nletters.Since you spend a lot of time typing it, you want to buy a new\r\nkeyboard.A keyboard is a permutation of the first m Latin letters. For\r\nexample, if m = 3, then there are six possible keyboards: , , , , and\r\n.Since you type your password with one finger, you need to spend time\r\nmoving your finger from one password character to the next. The time to\r\nmove from character s_i to character s_{i+1} is equal to the distance\r\nbetween these characters on keyboard. The total time you have to spend\r\ntyping the password with a keyboard is called the of this keyboard.More\r\nformaly, the slowness of keyboard is equal to\r\nsum\r\nlimits_{i=2}^{n} |pos_{s_{i-1}} - pos_{s_i} |, where pos_x is position\r\nof letter x in keyboard.For example, if s is and the keyboard is , then\r\nthe total time of typing this password is |pos_a - pos_a| + |pos_a -\r\npos_c| + |pos_c - pos_a| + |pos_a - pos_b| + |pos_b - pos_c| = |2 - 2| +\r\n|2 - 3| + |3 - 2| + |2 - 1| + |1 - 3| = 0 + 1 + 1 + 1 + 2 = 5.Before\r\nbuying a new keyboard you want to know the minimum possible slowness\r\nthat the keyboard can have.\r\n",
    "solutions": [
        "#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n#pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<int,P> P1;\ntypedef pair<P,P> P2;\n#define pu push\n#define pb push_back\n#define mp make_pair\n#define eps 1e-7\n#define INF 1000000000\n#define mod 1000000007\n#define fi first\n#define sc second\n#define rep(i,x) for(int i=0;i<x;i++)\n#define repn(i,x) for(int i=1;i<=x;i++)\n#define SORT(x) sort(x.begin(),x.end())\n#define ERASE(x) x.erase(unique(x.begin(),x.end()),x.end())\n#define POSL(x,v) (lower_bound(x.begin(),x.end(),v)-x.begin())\n#define POSU(x,v) (upper_bound(x.begin(),x.end(),v)-x.begin())\nint n,m;\nstring s;\nint dp[(1<<20)],cnt[(1<<20)];\nint main(){\n\tcin >> n >> m >> s;\n\tfor(int i=1;i<n;i++){\n\t\tint x = s[i-1]-'a';\n\t\tint y = s[i]-'a';\n\t\tcnt[(1<<x)|(1<<y)] ++;\n\t}\n\trep(i,m) rep(j,(1<<m)){\n\t\tif(((j>>i)&1)) cnt[j] += cnt[j^(1<<i)];\n\t}\n\trep(i,(1<<m)) dp[i] = INF;\n\tdp[0] = 0;\n\trep(i,(1<<m)){\n\t\trep(j,m){\n\t\t\tif(((i>>j)&1)) continue;\n\t\t\tint add = n-1;\n\t\t\tadd -= cnt[i+(1<<j)] + cnt[(1<<m)-1-(i+(1<<j))];\n\t\t\tdp[i+(1<<j)] = min(dp[i+(1<<j)], dp[i] + add);\n\t\t}\n\t}\n\tcout << dp[(1<<m)-1] << endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "dp"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Keyboard Purchase.json",
    "editorial_link": "https://codeforces.com//blog/entry/70450",
    "editorial": "Let\u00e2\u0080\u0099s solve this problem by subset dynamic programming.Let\u00e2\u0080\u0099s denote as\r\nthe number of adjacent characters ( and ) in such that or .Let\u00e2\u0080\u0099s be some\r\nintermediate result (further it will be explained what kind of\r\nintermediate result) if we already added letters corresponding to subset\r\nto the keyboard (and we don\u00e2\u0080\u0099t care about the order of these letters).Now\r\nlet\u00e2\u0080\u0099s consider how to recalculate values of this dynamic programming\r\nusing some . Let\u00e2\u0080\u0099s iterate over a new letter on keyboard (and we know\r\nthe position of this letter on the keyboard: it\u00e2\u0080\u0099s equal to the number of\r\nelements in ). After adding this new letter, we want to calculate what\r\nit added to the . Let consider some letter and calculate how much time\r\nwill be spent on moving and . There are two cases. If letter is already\r\non current keyboard, then we should add to answer , and otherwise (where\r\nis the position of character on the keyboard). But we don\u00e2\u0080\u0099t know the\r\nposition of the letter . Let\u00e2\u0080\u0099s fix it as follows. We will add the\r\ncontribution of some letter when it will be added to the keyboard. So,\r\nwhen we added letter , we should add the value .So, the total complexity\r\nis .\r\n"
}