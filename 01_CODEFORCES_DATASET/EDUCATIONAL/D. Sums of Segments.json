{
    "link": "https://codeforces.com//contest/2026/problem/D",
    "problemId": "2985131",
    "problem_idx": "D",
    "shortId": "2026D",
    "contest_number": "2026",
    "problem_submissions": {
        "F": [
            288561266,
            289460762,
            288610204,
            288597833,
            288597166,
            288569834,
            288622486,
            288654341,
            288862318,
            289435066
        ],
        "E": [
            288532750,
            288648436,
            289460758,
            288538098,
            288522785,
            288536060,
            288547433,
            288544648,
            288565205,
            288561153,
            288562514,
            288560885,
            288560234,
            288562220,
            288569450,
            288563732,
            288565049,
            288562236,
            288561108,
            288565165,
            288569967
        ],
        "C": [
            288529378,
            288523247,
            288587507,
            288523790,
            288525729,
            288530332,
            288531829,
            288528175,
            288530132,
            288533395,
            288532265,
            288535389,
            288532312,
            288535104,
            288538148,
            288539384,
            288557011,
            288540483,
            288538281
        ],
        "D": [
            288525443,
            288532543,
            288578032,
            288532129,
            288536966,
            288541005,
            288544765,
            288551300,
            288551604,
            288547887,
            288547345,
            288554913,
            288553450,
            288546930,
            288552551,
            288553665,
            288542913,
            288552909,
            288551588
        ],
        "B": [
            288512906,
            288512626,
            288591954,
            288514323,
            288515612,
            288518687,
            288518565,
            288516062,
            288516991,
            288516923,
            288523730,
            288523890,
            288520786,
            288521682,
            288521503,
            288524297,
            288520697,
            288521668,
            288521796
        ],
        "A": [
            288510200,
            288515667,
            288594432,
            288510659,
            288510501,
            288510904,
            288511010,
            288517929,
            288511642,
            288510491,
            288516233,
            288511665,
            288510831,
            288512187,
            288514794,
            288512225,
            288511936,
            288512066,
            288512165
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135680",
    "editorial": "In the editorial, we will treat all elements as -indexed.The array\r\nconsists of \"blocks\", the first block has the elements , the second\r\nblock contains , and so on. Each position of element in can be converted\r\ninto a pair of the form \"index of the block, index of element in the\r\nblock\" using either a formula or binary search.Letâs analyze a query of\r\nthe form \"get the sum from the -th element in the -th block to the -th\r\nelement in the -th block\". Letâs initialize the result with the sum of\r\nall blocks from to (inclusive), then drop some first elements from the\r\nblock , and then drop some last elements from the block .We have to be\r\nable to calculate the following values: given an index of the block and\r\nthe indices of elements and from this block, calculate the sum from the\r\n-th element to the -th element in that block; given two indices of\r\nblocks and , calculate the sum from block to block . In the first case,\r\nwe need to calculate . Let be the sum of the first elements from the\r\ngiven array. The sum can be rewritten as . This is equal to ; the first\r\nvalue can be calculated in by building prefix sums over the array .The\r\neasiest way to calculate the sum over several blocks is the following\r\none: for each block, calculate the sum in it the same way as we\r\ncalculate the sum over part of the block; build prefix sums over sums in\r\nblocks. Depending on the implementation, the resulting complexity will\r\nbe either or .\r\n",
    "name": "D. Sums of Segments",
    "statement": "You are given a sequence of integers [a_1, a_2,\r\ndots, a_n]. Let s(l,r) be the sum of elements from a_l to a_r (i. e.\r\ns(l,r) =\r\nsum\r\nlimits_{i=l}^{r} a_i).Let’s construct another sequence b of size\r\nfrac{n(n+1)}{2} as follows: b = [s(1,1), s(1,2),\r\ndots, s(1,n), s(2,2), s(2,3),\r\ndots, s(2,n), s(3,3),\r\ndots, s(n,n)].For example, if a = [1, 2, 5, 10], then b = [1, 3, 8, 18,\r\n2, 7, 17, 5, 15, 10].You are given q queries. During the i-th query, you\r\nare given two integers l_i and r_i, and you have to calculate\r\nsum\r\nlimits_{j=l_i}^{r_i} b_j.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std; using ll = int64_t; void solve(){\tll N;\tcin >> N;\tvector<ll> A(N);\tfor(int i = 0; i < N; i++) cin >> A[i];\tvector<ll> psum(N+1);\tfor(int i = 0; i < N; i++) psum[i+1] = psum[i] + A[i];\tvector<ll> psum_psum(N+2);\tfor(int i = 0; i <= N; i++) psum_psum[i+1] = psum_psum[i] + psum[i];\tvector<ll> seg_val(N);\tfor(int i = 0; i < N; i++){\t\tll cnt = N-i;\t\tseg_val[i] = psum_psum[N+1] - psum_psum[i+1] - ll(cnt) * psum[i];\t}\tvector<ll> seg_val_psum(N+1);\tfor(int i = 0; i < N; i++) seg_val_psum[i+1] = seg_val_psum[i] + seg_val[i]; \tauto solve = [&](ll X) -> ll {\t\tll s = 0;\t\tll e = N;\t\twhile(s + 1 < e){\t\t\tll m = (s + e) / 2;\t\t\tll lcnt = ll(m) * ll(N + N-(m-1)) / 2;\t\t\tif(X >= lcnt){\t\t\t\ts = m;\t\t\t} else {\t\t\t\te = m;\t\t\t}\t\t}\t\tll lcnt = ll(s) * ll(N + N-(s-1)) / 2;\t\tll nleft = X - lcnt;\t\treturn seg_val_psum[s] + psum_psum[s+1 + nleft] - psum_psum[s+1] - nleft * psum[s];\t};\tint Q;\tcin >> Q;\twhile(Q--){\t\tll L, R;\t\tcin >> L >> R;\t\tll ans = solve(R) - solve(L-1);\t\tcout << ans << '\\n';\t}} int main(){\tios_base::sync_with_stdio(false), cin.tie(nullptr);\tsolve();}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "dp",
        "implementation",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Sums of Segments.json",
    "hint": []
}