{
    "link": "https://codeforces.com//contest/1661/problem/B",
    "problemId": "1361828",
    "problem_idx": "B",
    "shortId": "1661B",
    "contest_number": "1661",
    "problem_submissions": {
        "F": [
            153187553,
            153195355,
            153198079,
            153192699,
            153208735,
            153197140,
            153204834,
            153209679,
            153216895,
            153192345,
            153209985,
            153215287,
            153214260,
            153206784,
            153181924,
            153187391,
            153499691
        ],
        "E": [
            153181602,
            153183458,
            153186252,
            153186023,
            153206034,
            153195940,
            153194023,
            153206147,
            153218775,
            153197839,
            153195670,
            153202578,
            153201319,
            153198707,
            153201518,
            153192938,
            153189205,
            153195957,
            153196511
        ],
        "D": [
            153174390,
            153174537,
            153175638,
            153174007,
            153176690,
            153176745,
            153185907,
            153182627,
            153178744,
            153172686,
            153190154,
            153190396,
            153190106,
            153210872,
            153207891,
            153175462,
            153176825,
            153177570,
            153175676
        ],
        "C": [
            153170138,
            153167530,
            153168248,
            153169048,
            153170259,
            153170541,
            153168119,
            153170774,
            153172726,
            153194437,
            153178130,
            153175287,
            153185061,
            153205419,
            153246548,
            153215381,
            153166182,
            153169099,
            153168642,
            153167758
        ],
        "B": [
            153162156,
            153162580,
            153161952,
            153162200,
            153164678,
            153162918,
            153163800,
            153162935,
            153167883,
            153164440,
            153162927,
            153168126,
            153181318,
            153200885,
            153216655,
            153161628,
            153165270,
            153163647,
            153161926
        ],
        "A": [
            153160994,
            153160951,
            153163491,
            153160922,
            153160942,
            153161262,
            153161508,
            153160985,
            153162410,
            153161094,
            153160862,
            153162511,
            153178823,
            153198439,
            153217630,
            153160910,
            153162727,
            153160959,
            153160858
        ]
    },
    "name": "B. Getting Zero",
    "statement": "Suppose you have an integer v. In one operation, you can: either set v =\r\n(v + 1)\r\nbmod 32768 or set v = (2\r\ncdot v)\r\nbmod 32768. You are given n integers a_1, a_2,\r\ndots, a_n. What is the minimum number of operations you need to make\r\neach a_i equal to 0?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n  int n;\n  cin >> n;\n  vector<int> a(n);\n  for (int i = 0; i < n; i++){\n    cin >> a[i];\n  }\n  vector<int> d(32768, -1);\n  d[0] = 0;\n  queue<int> Q;\n  Q.push(0);\n  while (!Q.empty()){\n    int x = Q.front();\n    Q.pop();\n    int p1 = (x + 32768 - 1) % 32768;\n    if (d[p1] == -1){\n      d[p1] = d[x] + 1;\n      Q.push(p1);\n    }\n    if (x % 2 == 0){\n      int p2 = x / 2;\n      if (d[p2] == -1){\n        d[p2] = d[x] + 1;\n        Q.push(p2);\n      }\n      p2 += 32768 / 2;\n      if (d[p2] == -1){\n        d[p2] = d[x] + 1;\n        Q.push(p2);\n      }\n    }\n  }\n  for (int i = 0; i < n; i++){\n    cout << d[a[i]];\n    if (i < n - 1){\n      cout << ' ';\n    }\n  }\n  cout << endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "dfs and similar",
        "dp",
        "graphs",
        "greedy",
        "shortest paths"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Getting Zero.json",
    "editorial_link": "https://codeforces.com//blog/entry/101790",
    "editorial": "Note that , so you can make any value equal to by multiplying it by two\r\ntimes, since . So, the answer for each value is at most .Now, letâs note\r\nthat there is always an optimal answer that consists of: at first, add\r\none times, then multiply by two times and is the minimum answer. In\r\nother words, letâs just iterate over all and and check that . The answer\r\nis minimum among them.To prove that itâs optimal to add at first and\r\nonly then to multiply, note that itâs not optimal to add more than once\r\nafter muptiplying ( can be replaced by ). So there is at most one\r\nbetween two , but itâs not optimal to make even one since we need to\r\nmake divisible by and break divisibility.There are many other approaches\r\nto this task except this one: for example, since you can write bfs to\r\nfind the shortest paths from to all .\r\n",
    "hint": []
}