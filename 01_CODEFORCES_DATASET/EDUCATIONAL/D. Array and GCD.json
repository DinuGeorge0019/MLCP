{
    "link": "https://codeforces.com//contest/2104/problem/D",
    "problemId": "3357540",
    "problem_idx": "D",
    "shortId": "2104D",
    "contest_number": "2104",
    "problem_submissions": {
        "G": [
            317634002,
            317631743,
            320673214,
            317636349,
            317639303,
            317631308,
            317640372,
            317641490,
            317634993,
            317623920,
            317623580,
            317647581,
            317646744,
            317640479,
            317649324,
            317648614,
            317603575,
            317625986,
            317658338,
            317654956,
            317656090
        ],
        "F": [
            317618453,
            317615339,
            317611576,
            317619502,
            317642933,
            317616740,
            317626825,
            317624444,
            317635700,
            317630227,
            317652195,
            317651366,
            317632460,
            317639846,
            317622626,
            317627252,
            317618955,
            317629645,
            317633465
        ],
        "E": [
            317600678,
            317604770,
            317604225,
            317601494,
            317605089,
            317605713,
            317610349,
            317606588,
            317606228,
            317611391,
            317609737,
            317616567,
            317624447,
            317604365,
            317605239,
            317606517,
            317605527,
            317603967
        ],
        "D": [
            317596832,
            317600994,
            317595577,
            317597224,
            317599585,
            317599131,
            317603322,
            317601392,
            317602519,
            317606339,
            317605002,
            317608223,
            317625926,
            317598715,
            317596708,
            317599445,
            317601363,
            317598919
        ],
        "C": [
            317592206,
            317594503,
            317591740,
            317592536,
            317595007,
            317592453,
            317599440,
            317596483,
            317666768,
            317597634,
            317597533,
            317596118,
            317603421,
            317628135,
            317593822,
            317592818,
            317594552,
            317594062,
            317592586
        ],
        "B": [
            317586512,
            317588149,
            317586474,
            317586748,
            317587897,
            317586575,
            317590393,
            317589124,
            317590519,
            317590566,
            317590505,
            317595035,
            317629001,
            317588704,
            317587930,
            317589549,
            317586793,
            317587862
        ],
        "A": [
            317583850,
            317584199,
            317583696,
            317583966,
            317584221,
            317583906,
            317584707,
            317583779,
            317583664,
            317586307,
            317586411,
            317589674,
            317629578,
            317583905,
            317584152,
            317583791,
            317583699,
            317583693
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142472",
    "editorial": "First, let’s understand that operations from the statement impose only\r\none restriction: the sum of the resulting array must not be greater than\r\nthe sum of the original one.Now let’s consider an ideal array. If there\r\nis an element that contains at least two distinct prime factors (or its\r\nfactorization includes some prime more than once), we can reduce the\r\nelement to any of its factors and the array remains ideal. This means,\r\nwe can transform any ideal array into another ideal array that consists\r\nonly of primes. Furthermore, if a prime is in the array, but another\r\nprime , such that , is absent, we can reduce to without losing the\r\narray’s ideal property. Therefore, any ideal array of length can be\r\ntransformed into the array that consists of the first primes.Based on\r\nthe aforementioned facts, an array of length is beautiful if its sum is\r\nat least the sum of the first prime numbers.To solve the problem, we can\r\niterate over the number of remaining elements . If the sum of maximums\r\nfrom the array is at least the sum of first primes, we can update the\r\nanswer.It’s also useful to note that the sieve of Eratosthenes can\r\nefficiently generate the list of the first prime numbers. You need\r\nprimes, so you have to use the sieve up to something like .\r\n",
    "name": "D. Array and GCD",
    "statement": "You are given an integer array a of size n.You can perform the following\r\noperations any number of times (possibly, zero): pay one coin and\r\nincrease any element of the array by 1 (you must have at least 1 coin to\r\nperform this operation); gain one coin and decrease any element of the\r\narray by 1. Let’s say that an array is if both of the following\r\nconditions hold: each element of the array is at least 2; for each pair\r\nof indices i and j (1\r\nle i, j\r\nle n; i\r\nne j) the greatest common divisor (GCD) of a_i and a_j is equal to 1. If\r\nthe array has less than 2 elements, this condition is automatically\r\nsatisfied. Let’s say that an array is if it can be transformed into an\r\nideal array using the aforementioned operations, provided that you\r\ninitially have no coins. If the array is already ideal, then it is also\r\nbeautiful.The given array is not necessarily beautiful or ideal. You can\r\nremove any elements from it (including removing the entire array or not\r\nremoving anything at all). Your task is to calculate the minimum number\r\nof elements you have to remove (possibly, zero) from the array a to make\r\nit .\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Array and GCD.json",
    "hint": []
}