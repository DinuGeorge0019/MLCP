{
    "link": "https://codeforces.com//contest/1657/problem/B",
    "problemId": "1339152",
    "problem_idx": "B",
    "shortId": "1657B",
    "contest_number": "1657",
    "problem_submissions": {
        "F": [
            150503115,
            150499453,
            150509321,
            150511905,
            150517571,
            150521311,
            150511942,
            150512719,
            150504329,
            150515960,
            150512240,
            150519562,
            150516193,
            150522557,
            150517792,
            150525082,
            150521099,
            150526532,
            150498258
        ],
        "E": [
            150486345,
            150490802,
            150491754,
            150496559,
            150501319,
            150488737,
            150492757,
            150496033,
            150497203,
            150502682,
            150498901,
            150493901,
            150495208,
            150499778,
            150499542,
            150491019,
            150503092,
            150493803,
            150498682
        ],
        "D": [
            150478088,
            150483562,
            150484230,
            150485188,
            150483314,
            150482900,
            150485882,
            150491440,
            150494087,
            150489766,
            150493543,
            150488170,
            150502719,
            150493520,
            150493571,
            150497861,
            150497439,
            150487471,
            150503395
        ],
        "C": [
            150470574,
            150477398,
            150472059,
            150473115,
            150473331,
            150472319,
            150476196,
            150478092,
            150490090,
            150480365,
            150484688,
            150478395,
            150476845,
            150477792,
            150483257,
            150480052,
            150480944,
            150481904,
            150506549
        ],
        "B": [
            150466899,
            150465684,
            150465706,
            150466831,
            150467217,
            150466293,
            150467748,
            150486194,
            150467057,
            150470591,
            150468677,
            150466989,
            150468064,
            150466642,
            150468045,
            150467383,
            150467499,
            150468669
        ],
        "A": [
            150464865,
            150464773,
            150464769,
            150464812,
            150465126,
            150464939,
            150464906,
            150472446,
            150464866,
            150467928,
            150466097,
            150464791,
            150464960,
            150464872,
            150464833,
            150465034,
            150465120,
            150470046
        ]
    },
    "name": "B. XY Sequence",
    "statement": "You are given four integers n, B, x and y. You should build a sequence\r\na_0, a_1, a_2,\r\ndots, a_n where a_0 = 0 and for each i\r\nge 1 you can choose: either a_i = a_{i - 1} + x or a_i = a_{i - 1} - y.\r\nYour goal is to build such a sequence a that a_i\r\nle B for all i and\r\nsum\r\nlimits_{i=0}^{n}{a_i} is maximum possible.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n#include <array>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) {fprintf(stderr, __VA_ARGS__);fflush(stderr);}\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nll solve() {\n\tll n, b, x, y;\n\tll c = 0;\n\tscanf(\"%lld%lld%lld%lld\", &n, &b, &x, &y);\n\tll ans = 0;\n\twhile(n--) {\n\t\tif (c + x <= b)\n\t\t\tc += x;\n\t\telse\n\t\t\tc -= y;\n\t\tans += c;\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) {\n\t\tprintf(\"%lld\\n\", solve());\n\t}\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. XY Sequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/101161",
    "editorial": "Strategy is quite easy: we go from to and if we take this variant (we\r\nset ); otherwise we set . Note that all are in range so there won\u00e2\u0080\u0099t be\r\nany overflow/underflow.It\u00e2\u0080\u0099s also not hard to prove that this strategy\r\nmaximizes the sum. By contradiction: suppose the optimal answer has some\r\nindex where but . Let\u00e2\u0080\u0099s find first position where and swap operations\r\nbetween and . As a result, , all from were increased while remained the\r\nsame, i. e. there is no violation of the rules and the total sum\r\nincreased contradiction.\r\n"
}