{
    "link": "https://codeforces.com//contest/1555/problem/D",
    "problemId": "1062143",
    "problem_idx": "D",
    "shortId": "1555D",
    "contest_number": "1555",
    "problem_submissions": {
        "F": [
            124306614,
            124343856,
            124312339,
            124307563,
            124318196,
            124319806,
            124318258,
            124337936,
            124326369,
            124312719,
            124312071,
            124325220,
            124322375,
            124337491,
            124327796,
            124313538,
            124320609,
            124319069,
            124334134
        ],
        "E": [
            124292614,
            124284546,
            124290978,
            124299668,
            124299626,
            124301534,
            124305345,
            124311168,
            124315291,
            124304878,
            124305598,
            124300363,
            124304344,
            124324832,
            124306310,
            124305064,
            124305374
        ],
        "C": [
            124284989,
            124280595,
            124283283,
            124284609,
            124285731,
            124291694,
            124283589,
            124282860,
            124292981,
            124286855,
            124287174,
            124284102,
            124289820,
            124283315,
            124290207,
            124292792,
            124290345
        ],
        "D": [
            124282896,
            124281706,
            124287585,
            124287694,
            124291470,
            124295363,
            124329814,
            124293642,
            124293299,
            124285216,
            124284331,
            124294215,
            124292885,
            124291338,
            124294163,
            124296113,
            124299446,
            124297892,
            124294376
        ],
        "B": [
            124280802,
            124279957,
            124281993,
            124281520,
            124282708,
            124281869,
            124281852,
            124283175,
            124289412,
            124282989,
            124282919,
            124281809,
            124286550,
            124291562,
            124286726,
            124289852,
            124285340
        ],
        "A": [
            124279594,
            124279557,
            124279608,
            124279611,
            124279723,
            124279607,
            124279587,
            124279711,
            124282014,
            124280166,
            124279749,
            124279696,
            124279824,
            124279602,
            124281131,
            124280445,
            124279990
        ]
    },
    "name": "D. Say No to Palindromes",
    "statement": "Let\u2019s call the string if it does not contain a substring of length at\r\nleast 2, which is a palindrome. Recall that a palindrome is a string\r\nthat reads the same way from the first character to the last and from\r\nthe last character to the first. For example, the strings , , , are\r\npalindromes, but the strings , , are not.Let\u2019s define of a string as the\r\nminimum number of operations so that the string becomes beautiful, if in\r\none operation it is allowed to change any character of the string to one\r\nof the first 3 letters of the Latin alphabet (in lowercase).You are\r\ngiven a string s of length n, each character of the string is one of the\r\nfirst 3 letters of the Latin alphabet (in lowercase).You have to answer\r\nm queries calculate the cost of the substring of the string s from\r\nl_i-th to r_i-th position, inclusive.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nconst int INF = 1000000;\nint main(){\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  int n, m;\n  cin >> n >> m;\n  string s;\n  cin >> s;\n  vector<vector<int>> S(6, vector<int>(n + 1));\n  for (int i = 0; i < 6; i++){\n    S[i][0] = 0;\n    for (int j = 0; j < n; j++){\n      S[i][j + 1] = S[i][j];\n      if (i < 3){\n        if (s[j] - 'a' != (i + j) % 3){\n          S[i][j + 1]++;\n        }\n      } else {\n        if (s[j] - 'a' != (i - j % 3 + 3) % 3){\n          S[i][j + 1]++;\n        }\n      }\n    }\n  }\n  for (int i = 0; i < m; i++){\n    int l, r;\n    cin >> l >> r;\n    l--;\n    int ans = INF;\n    for (int j = 0; j < 6; j++){\n      ans = min(ans, S[j][r] - S[j][l]);\n    }\n    cout << ans << \"\\n\";\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "dp",
        "strings"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Say No to Palindromes.json",
    "editorial_link": "https://codeforces.com//blog/entry/93389",
    "editorial": "Note that in the beautiful string (because it is a palindrome of length\r\n) and (because it is a palindrome of length ). This means , i.e. a\r\nbeautiful string has the form , up to the permutation of the letters ,\r\nand .For each permutation of the letters , and , we will construct a\r\nstring , of the form of length . Let\u00e2\u0080\u0099s define an array of length as\r\nfollows: if (i.e. the character at the -th position does not need to be\r\nchanged) and otherwise. Let\u00e2\u0080\u0099s build an array of prefix sums of the array\r\n. Now you can process a query of the number of positions that need to be\r\nreplaced for the current line in .\r\n"
}