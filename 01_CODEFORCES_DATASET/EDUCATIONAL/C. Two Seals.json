{
    "link": "https://codeforces.com//contest/837/problem/C",
    "problemId": "116709",
    "problem_idx": "C",
    "shortId": "837C",
    "contest_number": "837",
    "problem_submissions": {
        "G": [
            29167867,
            29168921,
            29171657,
            29211841,
            29211768,
            29194112,
            29194042,
            29194028,
            29175447,
            29168227,
            29172693,
            29172204,
            29166926,
            29165613,
            29171547,
            29173009,
            29190922,
            32561173,
            29172886,
            29172783,
            29172758,
            29172505,
            29172166
        ],
        "F": [
            29165055,
            29166362,
            29168864,
            29166638,
            29169357,
            29169429,
            29164558,
            29186836,
            29168655,
            29167876,
            29169339,
            29172957,
            29171060,
            29171284,
            29168929,
            29172401,
            29169905,
            29168071,
            29172819
        ],
        "E": [
            29162020,
            29163186,
            29165795,
            29163264,
            29164907,
            29165095,
            29162428,
            29167933,
            29164726,
            29164807,
            29166669,
            29167308,
            29166973,
            29172476,
            29166198,
            29169034,
            29165312,
            29163338,
            29169750
        ],
        "D": [
            29161276,
            29162239,
            29163430,
            29162397,
            29162640,
            29163863,
            29160761,
            29163799,
            29174585,
            29164816,
            29165533,
            29164344,
            29163361,
            29163790,
            29167229,
            30486037,
            29175514,
            29161500,
            29167261
        ],
        "C": [
            29160368,
            29160646,
            29161707,
            29160573,
            29161464,
            29161685,
            29160675,
            29160760,
            29162171,
            29161153,
            29162346,
            29163214,
            29163154,
            29161641,
            29165376,
            29161315,
            29160556,
            29163716
        ],
        "B": [
            29159633,
            29159893,
            29160590,
            29159654,
            29160221,
            29159770,
            29161534,
            29161149,
            29160418,
            29160903,
            29161228,
            29162604,
            29271569,
            29164321,
            29195260,
            29160168,
            29175059,
            29162325
        ],
        "A": [
            29158816,
            29158847,
            29159160,
            29160665,
            29159109,
            29158852,
            29159205,
            29159017,
            29158817,
            29158878,
            29159185,
            29161667,
            29158818,
            29158815,
            29159058,
            29159399
        ]
    },
    "name": "C. Two Seals",
    "statement": "One very important person has a piece of paper in the form of a\r\nrectangle .Also, he has seals. Each seal leaves an impression on the\r\npaper in the form of a rectangle of the size . Each impression must be\r\nparallel to the sides of the piece of paper (but seal can be rotated by\r\n90 degrees).A very important person wants to choose two different seals\r\nand put them two impressions. Each of the selected seals puts exactly\r\none impression. Impressions should not overlap (but they can touch\r\nsides), and the total area occupied by them should be the largest\r\npossible. What is the largest area that can be occupied by two seals?\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:1048576\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n#define rf(x) (x)=0;while(*p<48)p++;while(47<*p)(x)=((x)<<3)+((x)<<1)+(*p++&15);\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\ntypedef tuple <int, int, int> t3;\n\nint IT_MAX = 1 << 18;\nconst ll MOD = 1000000009;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 1234567890123456789ll;\nconst db PI = acos(-1);\nconst db EPS = 1e-8;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<(n);i++)\n\nbool isValid(int a, int b, int c, int d) {\n\tif (a <= c && b <= d) return true;\n\tswap(a, b);\n\treturn a <= c && b <= d;\n}\n\nint in[105][2];\nint main() {\n\tint N, A, B, i, j, k;\n\tscanf(\"%d %d %d\", &N, &A, &B);\n\tfor (i = 1; i <= N; i++) scanf(\"%d %d\", &in[i][0], &in[i][1]);\n\n\tint ans = 0;\n\tfor (i = 1; i <= N; i++) {\n\t\tfor (j = i + 1; j <= N; j++) {\n\t\t\tfor (k = 1; k < A; k++) if (isValid(in[i][0], in[i][1], k, B) && isValid(in[j][0], in[j][1], A - k, B)) break;\n\t\t\tif (k < A) ans = max(ans, in[i][0] * in[i][1] + in[j][0] * in[j][1]);\n\t\t\tfor (k = 1; k < B; k++) if (isValid(in[i][0], in[i][1], A, k) && isValid(in[j][0], in[j][1], A, B - k)) break;\n\t\t\tif (k < B) ans = max(ans, in[i][0] * in[i][1] + in[j][0] * in[j][1]);\n\t\t}\n\t}\n\treturn !printf(\"%d\\n\", ans);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Two Seals.json",
    "editorial_link": "https://codeforces.com//blog/entry/53662",
    "editorial": "If you can place two rectangles in some way (without rotations), then\r\nit\u00e2\u0080\u0099s always possible to move one of them to the top left corner and\r\nstick the other either to the bottom of the first (and push it all the\r\nway to the left) or to the right of it (and push it all the way to the\r\ntop).Now let\u00e2\u0080\u0099s try all possible reorderings and rotations for every pair\r\nof seals. If there is at least one correct reordering then update the\r\nanswer.Overall complexity: .\r\n"
}