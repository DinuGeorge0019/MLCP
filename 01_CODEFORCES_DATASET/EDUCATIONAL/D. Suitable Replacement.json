{
    "link": "https://codeforces.com//contest/825/problem/D",
    "problemId": "114547",
    "problem_idx": "D",
    "shortId": "825D",
    "contest_number": "825",
    "problem_submissions": {
        "G": [
            28611826,
            28611356,
            28617070,
            28630000,
            28611377,
            28668357,
            28644356,
            28617410,
            28616887,
            115447701,
            28617449
        ],
        "F": [
            28607801,
            28609631,
            28607347,
            28609116,
            28609094,
            28607614,
            28608923,
            28607754,
            28610528,
            28609319,
            28614043,
            28612882,
            28614726,
            28613035,
            28614128,
            28617246,
            28608834
        ],
        "E": [
            28606236,
            28612183,
            28603943,
            28604761,
            28605629,
            28605699,
            28621023,
            28620710,
            28614410,
            28606910,
            28606445,
            28612588,
            28606404,
            28608319,
            28610978,
            28607253,
            28602716,
            28604390,
            28605864
        ],
        "D": [
            28601870,
            28604440,
            28602315,
            28603224,
            28602271,
            28603578,
            28602162,
            28602307,
            28605123,
            28604422,
            28602824,
            28605475,
            28605112,
            28601966,
            28604848,
            28601067,
            28602879,
            28603271,
            28602582
        ],
        "C": [
            28600566,
            28604558,
            28600573,
            28601511,
            28601329,
            28600992,
            28600584,
            28601117,
            28602961,
            28602487,
            28601481,
            28603635,
            28602536,
            28600048,
            28601839,
            28599960,
            28601178,
            28600725,
            28600385
        ],
        "B": [
            28599824,
            28602822,
            28599867,
            28599843,
            28600338,
            28600036,
            28599560,
            28600486,
            28599738,
            28600276,
            28600463,
            28602528,
            28601519,
            28610253,
            28599911,
            28599338,
            28600292,
            28600011,
            28599745
        ],
        "A": [
            28598954,
            28602676,
            28599093,
            28599010,
            28599148,
            28598936,
            28599534,
            28599292,
            28599020,
            28598945,
            28599332,
            28601537,
            28599412,
            28598882,
            28598949,
            28598917,
            28599099,
            28599150,
            28598894
        ]
    },
    "name": "D. Suitable Replacement",
    "statement": "You are given two strings and consisting of small Latin letters, string\r\ncan also contain characters. of string is calculated by following\r\nmetric:Any two letters can be swapped positions, these operations can be\r\nperformed arbitrary number of times over any pair of positions. Among\r\nall resulting strings , you choose the one with the largest number of\r\noccurrences of string . is this number of occurrences.You should replace\r\nall characters with small Latin letters in such a way that the of string\r\nis maximal.\r\n",
    "solutions": [
        "#ifdef __GNUC__\n#pragma GCC target(\"sse4,avx\")\n#endif\n#include <immintrin.h>\n#include <algorithm>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <cstdint>\n#include <numeric>\n#include <array>\n\nvoid run(std::istream &in, std::ostream &out) {\n    std::string s, t;\n    in >> s >> t;\n    std::array<int, 26> statT = {};\n    for (char c : t) {\n        statT[c - 'a']++;\n    }\n    std::array<int, 26> statS = {};\n    int empty = 0;\n    for (char c : s) {\n        if (c == '?') {\n            empty++;\n        } else {\n            statS[c - 'a']++;\n        }\n    }\n    int k;\n    for (k = 1; ; k++) {\n        int res = 0;\n        for (int i = 0; i < 26; i++) {\n            res += std::max(statT[i] * k - statS[i], 0);\n        }\n        if (res > empty) {\n            k--;\n            break;\n        }\n    }\n    std::string res;\n    for (int i = 0; i < 26; i++) {\n        int d = std::max(statT[i] * k - statS[i], 0);\n        res.append(d, 'a' + i);\n    }\n    size_t pos = 0;\n    for (char& c : s) {\n        if (c == '?') {\n            if (pos < res.size()) {\n                c = res[pos];\n                pos++;\n            } else {\n                c = 'a';\n            }\n        }\n    }\n    out << s << std::endl;\n}\n\nint main() {\n  std::cin.sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  run(std::cin, std::cout);\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Suitable Replacement.json",
    "editorial_link": "https://codeforces.com//blog/entry/53334",
    "editorial": "Notice that the order of letters doesnât matter at all, depends only on\r\namount of each letter.Let be the possibility that string will occur in\r\nat least times after replacing all signs and after some swaps. If is\r\ntrue then is also true. That leads to binary search over the answer.Let\r\nbe the amount of letters in and the amount of letters in . is the number\r\nof signs. is true if . If some letter appears in less times than needed\r\nthen replace some signs with it. Answer can be restored greedily by\r\nreplacing signs with the letters needed.Overall complexity: , where is\r\nthe size of the alphabet.\r\n",
    "hint": []
}