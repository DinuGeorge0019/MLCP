{"link": "https://codeforces.com//contest/1096/problem/F", "problemId": "275413", "problem_idx": "F", "shortId": "1096F", "contest_number": "1096", "problem_submissions": {"E": [47642254, 47649536, 47653679, 47648526, 47652142, 47650532, 47647313, 47647929, 47648225, 47694278, 47661678, 47661672, 47660722, 47660711, 47660680, 47660618, 47660582, 47660120, 47656494, 47655953, 47657647, 47817653, 47648933, 47665496, 47659752], "F": [47639264, 47644997, 47642974, 47644488, 47645071, 47645827, 47642225, 47651889, 47635316, 47632710, 47640155, 47703351, 47703260, 47636058, 47646007, 47639902, 47642860, 47639982, 47644292, 47643281, 47642796], "G": [47638289, 47637580, 47634875, 47638768, 47640048, 47642247, 47630999, 47650309, 47660389, 47657262, 47654048, 47629119, 47636649, 47642830, 47708729, 47708522, 47703016, 47700940, 47672367, 47656352, 47640712, 47641093, 47648435, 47638969, 47687049, 47686924, 47686825, 47646867, 47636051, 47647716], "D": [47635471, 47633956, 47638959, 47636889, 47629667, 47638623, 47639300, 47633153, 47649242, 47638629, 47633639, 47630356, 47634376, 47631648, 47636547, 47634092, 47638812, 72047403, 47632964, 47638521], "C": [47633317, 47631680, 47629418, 47632179, 47634755, 47633350, 47643997, 47635493, 47651183, 47635153, 47632143, 47638363, 47631171, 47629984, 47635983, 47631947, 47634094, 47646109, 47636660], "B": [47631281, 47629817, 47632624, 47628290, 47637243, 47631678, 47637542, 47630349, 47652229, 47629170, 47629856, 47637300, 47629416, 47628505, 47627019, 47628065, 47630666, 94912172, 47637515, 47631993], "A": [47628887, 47626041, 47629759, 47624992, 47630193, 47627541, 47635962, 47626700, 47652441, 47625024, 47625341, 47625412, 47625492, 47624882, 47624919, 47624912, 47627405, 47625425, 47625087]}, "name": "F. Inversion Expectation", "statement": "A permutation of size n is an array of size n such that each integer\r\nfrom 1 to n occurs exactly once in this array. An inversion in a\r\npermutation p is a pair of indices (i, j) such that i > j and a_i < a_j.\r\nFor example, a permutation [4, 1, 3, 2] contains 4 inversions: (2, 1),\r\n(3, 1), (4, 1), (4, 3).You are given a permutation p of size n. However,\r\nthe numbers on some positions are replaced by -1. Let the valid\r\npermutation be such a replacement of -1 in this sequence back to numbers\r\nfrom 1 to n in such a way that the resulting sequence is a permutation\r\nof size n.The given sequence was turned into a valid permutation\r\nrandomly with the equal probability of getting each valid\r\npermutation.Calculate the expected total number of inversions in the\r\nresulting valid permutation.It can be shown that it is in the form of\r\nfrac{P}{Q} where P and Q are non-negative integers and Q\r\nne 0. Report the value of P\r\ncdot Q^{-1}\r\npmod {998244353}.\r\n", "solutions": ["#pragma GCC optimize(3)\n#include<bits/stdc++.h>\n#define MAXN 1000005\n#define INF 1000000000\n#define MOD 998244353\n#define F first\n#define S second\nusing namespace std;\ntypedef long long ll;\nconst ll inv2=(MOD+1)/2;\nll a[MAXN],d,b[MAXN],s[MAXN],t[MAXN],c[MAXN],ans;\nint n,tt;\nll pow_(ll x,ll y)\n{\n    ll res=1;\n    while (y)\n    {\n        if (y&1) res=res*x%MOD;\n        x=x*x%MOD;\n        y>>=1;\n    }\n    return res;\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) scanf(\"%lld\",&a[i]);\n    for(int i=1;i<=n;i++) s[i]=1,t[i]=1; \n    d=n;\n    for(int i=n;i;i--)\n    {\n        if(a[i]!=-1)\n        {\n            tt=a[i]-1; while(tt) ans+=b[tt],tt-=tt&(-tt);\n            tt=a[i]; while(tt<MAXN) b[tt]++,tt+=tt&(-tt);\n            s[i]=0; d--; t[a[i]]=0;\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        s[i]+=s[i-1];\n        t[i]+=t[i-1];\n    }\n    (ans+=d*(d-1)/2%MOD*inv2)%=MOD;\n    ll inv=pow_(d,MOD-2);\n    for(int i=1;i<=n;i++)\n    {\n        if(a[i]!=-1)\n        {\n            (ans+=(s[i]*(d-t[a[i]])+(d-s[i])*t[a[i]])%MOD*inv)%=MOD;\n        }\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["dp", "math", "probabilities"], "dificulty": "2300", "interactive": false}