{
    "link": "https://codeforces.com//contest/1327/problem/F",
    "problemId": "571329",
    "problem_idx": "F",
    "shortId": "1327F",
    "contest_number": "1327",
    "problem_submissions": {
        "F": [
            74109494,
            74096912,
            74114522,
            74102690,
            74088644,
            74096945,
            74118574,
            74105095,
            74095826,
            74113555,
            74098825,
            74097831,
            74105606,
            74109593,
            74101097,
            74708534,
            74098586
        ],
        "G": [
            74091723,
            74123968,
            74123925,
            74114197,
            76629927,
            74211867,
            74588194,
            74135043,
            143583395,
            74127397,
            74126425,
            74105678,
            74715507
        ],
        "B": [
            74068544,
            74058114,
            74057729,
            74055609,
            74062072,
            74057059,
            74054855,
            74056002,
            74059330,
            74057094,
            74057214,
            74063726,
            74054652,
            74058809,
            74054826,
            74057170,
            74057831,
            74708239,
            74069029
        ],
        "E": [
            74063712,
            74072104,
            74084153,
            74095848,
            74069496,
            74077697,
            74073149,
            74081984,
            74074950,
            74080019,
            74086353,
            74075499,
            74090079,
            74089858,
            74078241,
            74086260,
            74708411,
            74085708
        ],
        "C": [
            74060977,
            74064317,
            74075501,
            74070865,
            74062695,
            74059969,
            74061257,
            74063448,
            74063934,
            74060895,
            74069645,
            74078565,
            74065457,
            74072914,
            74062504,
            74072575,
            74708279,
            74073328
        ],
        "D": [
            74058988,
            74081137,
            74080575,
            74087567,
            74078030,
            74085278,
            74068392,
            74068497,
            74084912,
            74069773,
            74079760,
            74085394,
            74082419,
            74068982,
            74073656,
            74080794,
            74708339,
            74079780
        ],
        "A": [
            74048309,
            74098107,
            74049366,
            74047546,
            74050945,
            74048503,
            74046989,
            74047125,
            74048033,
            74048151,
            74049565,
            74047828,
            74047513,
            74049730,
            74046774,
            74049977,
            74047800,
            74708180,
            74063309
        ]
    },
    "name": "F. AND Segments",
    "statement": "You are given three integers n, k, m and m conditions (l_1, r_1, x_1),\r\n(l_2, r_2, x_2),\r\ndots, (l_m, r_m, x_m).Calculate the number of distinct arrays a,\r\nconsisting of n integers such that: 0\r\nle a_i < 2^k for each 1\r\nle i\r\nle n; bitwise AND of numbers a[l_i]\r\n& a[l_i + 1]\r\n&\r\ndots\r\n& a[r_i] = x_i for each 1\r\nle i\r\nle m. Two arrays a and b are considered different if there exists such a\r\nposition i that a_i\r\nneq b_i. The number can be pretty large so print it modulo 998244353.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\ntypedef double db;\nmt19937 mrand(random_device{}()); \nconst ll mod=998244353;\nint rnd(int x) { return mrand() % x;}\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nconst int N=501000;\nint n,k,m,cnt[N],ss[N];\nll dp[N],ans=1;\nVI l[N];\nll solve(vector<PII> f,vector<int> g) {\n\tint m=SZ(g);\n\trep(i,1,n+1) ss[i]=0;\n\tfor (auto x:g) ss[x]++;\n\trep(i,1,n+1) ss[i]+=ss[i-1];\n\trep(i,0,SZ(f)) {\n\t\tf[i].fi=ss[f[i].fi-1]+1;\n\t\tf[i].se=ss[f[i].se];\n\t\tif (f[i].fi>f[i].se) return 0;\n\t}\n\trep(i,0,m+1) l[i].clear();\t\n\tfor (auto x:f) l[x.se].pb(x.fi);\n\tll sdp=1;\n\tdp[0]=1;\n\tint posl=0;\n\trep(i,1,m+1) {\n\t\tdp[i]=sdp; sdp=sdp*2%mod;\n\t\tint pr=posl;\n\t\tfor (auto x:l[i]) posl=max(posl,x);\n\t\trep(j,pr,posl) {\n\t\t\tsdp=(sdp-dp[j])%mod;\n\t\t\tdp[j]=0;\n\t\t}\n\t\t//rep(j,0,m+1) printf(\"%lld \",dp[j]); puts(\"\");\n\t}\n\tif (sdp<0) sdp+=mod;\n\treturn sdp;\n}\n\nint pl[N],pr[N],x[N];\nint main() {\n\tscanf(\"%d%d%d\",&n,&k,&m);;\n\trep(i,0,m) scanf(\"%d%d%d\",pl+i,pr+i,x+i);\n\trep(j,0,k) {\n\t\tvector<int> g;\n\t\tvector<PII> cs;\n\t\trep(i,1,n+1) cnt[i]=0;\n\t\trep(i,0,m) {\n\t\t\tif (x[i]&(1<<j)) {\n\t\t\t\tcnt[pl[i]]++; cnt[pr[i]+1]--;\n\t\t\t} else cs.pb(mp(pl[i],pr[i]));\n\t\t}\n\t\trep(i,1,n+1) cnt[i]+=cnt[i-1];\n\t\trep(i,1,n+1) if (cnt[i]==0) g.pb(i);\n\t\tans=ans*solve(cs,g)%mod;\n\t}\n\tprintf(\"%lld\\n\",ans);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "combinatorics",
        "data structures",
        "dp",
        "two pointers"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\F. AND Segments.json",
    "editorial_link": "https://codeforces.com//blog/entry/75147",
    "editorial": "We will solve the problem for each bit separately, and then multiply the\r\nresults.Obviously, if the position is covered by a segment with the\r\nvalue 1, then we have no choice, and we must put 1 there. For segments\r\nwith the value 0, there must be at least one position that they cover\r\nand its value is 0.So we can write the following dynamic programming:\r\ndp_i the number of arrays such that the last 0 was exactly at the\r\nposition i, and all 0-segments to the left of it contain at least one\r\nzero.It remains to determine which states j we can update from. The only\r\nrestriction we have is that there should not be any segment (l, r) with\r\nthe value 0, such that j < l and r < i. Since in this case, this segment\r\nwill not contain any zero values. For each position i, we may\r\nprecalculate the rightmost position f_i where some segment ending before\r\ni begins, and while calculating dp_i, we should sum up only the values\r\nstarting from position f_i. This can be done with prefix sums.\r\n"
}