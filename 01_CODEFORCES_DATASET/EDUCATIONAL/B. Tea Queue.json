{
    "link": "https://codeforces.com//contest/920/problem/B",
    "problemId": "152862",
    "problem_idx": "B",
    "shortId": "920B",
    "contest_number": "920",
    "problem_submissions": {
        "G": [
            34852743,
            34853590,
            34854300,
            34853934,
            34856261,
            34853609,
            34857997,
            34854137,
            34863997,
            34863325,
            34845932,
            35124212,
            35123972,
            34865228,
            34854370,
            34856832,
            34844552,
            34869557,
            34855295,
            34853458,
            34855692,
            34852849,
            34855311,
            34861027,
            34859762
        ],
        "F": [
            34850786,
            34848482,
            34849125,
            34847410,
            34850587,
            34855922,
            34851634,
            34865588,
            34861253,
            34849345,
            35122442,
            34861362,
            34851005,
            34852570,
            34847838,
            34850627,
            34847445,
            34849654,
            34849272,
            34857704,
            34855104,
            34855630
        ],
        "E": [
            34849129,
            34851685,
            34845896,
            34844151,
            34856145,
            34852326,
            34847420,
            34858206,
            34852441,
            35117849,
            34858048,
            34856421,
            64420065,
            59900329,
            59900252,
            34850422,
            34851876,
            34846457,
            34850665,
            34846959,
            34846751,
            34850722,
            34850540,
            34853490
        ],
        "D": [
            34846246,
            34857983,
            34865210,
            34864920,
            34863172,
            34865887,
            34863373,
            34855083,
            34863045,
            34852180,
            34864800,
            34865039,
            34861962,
            34930637,
            34904017,
            34882639,
            34870887,
            34935056,
            34932865
        ],
        "C": [
            34843334,
            34845308,
            34844415,
            34853136,
            34845188,
            34848715,
            34849757,
            34845177,
            34857782,
            35115887,
            35115738,
            35114927,
            34846351,
            34860924,
            34843957,
            34863534,
            34843082,
            34844466,
            34843157,
            34844360,
            34846666,
            34847453,
            34846518
        ],
        "B": [
            34842856,
            34846490,
            34843649,
            34849908,
            34843576,
            34845185,
            34844678,
            34844108,
            34855655,
            35114208,
            34844457,
            34859635,
            34842933,
            34867088,
            34844653,
            34842667,
            34842611,
            34843316,
            34845332,
            34845365,
            34845176
        ],
        "A": [
            34842470,
            34844425,
            34842543,
            34843209,
            34842761,
            34843665,
            34842482,
            34842652,
            34854235,
            35113527,
            34842534,
            34843074,
            34842510,
            34864789,
            34842605,
            34842461,
            34842474,
            34849846,
            34842901,
            34843015,
            34842733
        ]
    },
    "name": "B. Tea Queue",
    "statement": "Recently students from city S moved to city P to attend a programming\r\ncamp.They moved there by train. In the evening, all students in the\r\ntrain decided that they want to drink some tea. Of course, no two people\r\ncan use the same teapot simultaneously, so the students had to form a\r\nqueue to get their tea.-th student comes to the end of the queue at the\r\nbeginning of -th second. If there are multiple students coming to the\r\nqueue in the same moment, then the student with greater index comes\r\nafter the student with lesser index. Students in the queue behave as\r\nfollows: if there is nobody in the queue before the student, then he\r\nuses the teapot for exactly one second and leaves the queue with his\r\ntea; otherwise the student waits for the people before him to get their\r\ntea. If at the beginning of -th second student still cannot get his tea\r\n(there is someone before him in the queue), then he leaves the queue\r\nwithout getting any tea. For each student determine the second he will\r\nuse the teapot and get his tea (if he actually gets it).\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:336777216\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n\ntypedef tuple<int, int, int> t3;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\n\nint IT_MAX = 1 << 17;\nll MOD = 1000000007;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 0x3f3f3f3f3f3f3f3f;\nconst db PI = acos(-1);\nconst db ERR = 1e-10;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<n;i++)\n#define Se second\n#define Fi first\n\nvector <int> Vq;\n\nvector <int> Vl[6050];\nint in[6050][2];\nint ans[6050];\nint main() {\n\tint T;\n\tscanf(\"%d\", &T);\n\twhile (T--) {\n\t\tint N, i, j;\n\t\tscanf(\"%d\", &N);\n\t\tfor (i = 1; i <= N; i++) {\n\t\t\tint t1, t2;\n\t\t\tscanf(\"%d %d\", &t1, &t2);\n\t\t\tin[i][0] = t1, in[i][1] = t2;\n\t\t\tVl[t1].push_back(i);\n\t\t}\n\n\t\tint st = 0;\n\t\tfor (i = 1; i <= 6002; i++) {\n\t\t\tfor (auto it : Vl[i]) Vq.push_back(it);\n\t\t\twhile (st < Vq.size()) {\n\t\t\t\tif (in[Vq[st]][1] >= i) break;\n\t\t\t\tst++;\n\t\t\t}\n\t\t\tif (st < Vq.size()) {\n\t\t\t\tans[Vq[st]] = i;\n\t\t\t\tst++;\n\t\t\t}\n\t\t}\n\t\tfor (i = 1; i <= N; i++) printf(\"%d \", ans[i]);\n\t\tprintf(\"\\n\");\n\n\t\tfor (i = 1; i <= N; i++) ans[i] = 0;\n\t\tVq.clear();\n\t\tfor (i = 1; i <= 5000; i++) Vl[i].clear();\n\t}\n\treturn 0;\n}\n//*/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Tea Queue.json",
    "editorial_link": "https://codeforces.com/blog/entry/57516",
    "editorial": "Letâs store the last moment when somebody gets a tea in the variable .\r\nThen if for the -th student then he will not get a tea. Otherwise he\r\nwill get it during second. And if he gets a tea then will be replaced\r\nwith the answer for this student.\r\n",
    "hint": []
}