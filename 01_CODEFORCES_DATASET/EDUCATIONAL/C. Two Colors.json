{
    "link": "https://codeforces.com//contest/2075/problem/C",
    "problemId": "3273592",
    "problem_idx": "C",
    "shortId": "2075C",
    "contest_number": "2075",
    "problem_submissions": {
        "F": [
            311092897,
            311105371,
            311091977,
            311106822,
            311119612,
            311127395,
            311111998,
            311124374,
            311123265,
            311135481,
            311127374,
            311124949,
            311133033,
            311127513,
            311123593,
            311131608,
            311137578,
            311136881,
            311133323,
            311066636
        ],
        "E": [
            311078477,
            311076658,
            311072206,
            311087192,
            311086935,
            311076933,
            311081142,
            311089235,
            311087311,
            311085142,
            311096896,
            311100487,
            311099554,
            311111156,
            311091394,
            311097405,
            311088422,
            311171203,
            311103877,
            311113693,
            311080280
        ],
        "D": [
            311061322,
            311057750,
            311060365,
            311055119,
            311060010,
            311059723,
            311071257,
            311070356,
            311063998,
            311066698,
            311082700,
            311064184,
            311068410,
            311078395,
            311082862,
            311069076,
            311068306,
            311073979,
            311087117,
            311088989
        ],
        "C": [
            311052044,
            311051318,
            311056183,
            311050640,
            311054145,
            311055185,
            311051870,
            311052149,
            311059642,
            311052003,
            311055738,
            311055390,
            311062256,
            311062646,
            311066843,
            311053249,
            311062988,
            311059819,
            311096162
        ],
        "B": [
            311045239,
            311044707,
            311043555,
            311043641,
            311046416,
            311046113,
            311044758,
            311043793,
            311048255,
            311045137,
            311044396,
            311044990,
            311049796,
            311048015,
            311058751,
            311045105,
            311045287,
            311046394,
            311099408
        ],
        "A": [
            311042018,
            311040390,
            311040326,
            311040380,
            311040339,
            311040623,
            311040931,
            311040288,
            311041987,
            311040424,
            311040342,
            311040291,
            311041844,
            311040490,
            311049977,
            311040412,
            311040468,
            311040975,
            311101264
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/140781",
    "editorial": "Consider a general form of a fence: the planks from to are painted in\r\none color, and the planks from to are painted in another color.Let’s\r\niterate over the value of . It is then easy to determine which colors\r\nare suitable for the first half and which are suitable for the second\r\nhalf. Any color with will work for the first half, while for the second\r\nhalf, the colors must satisfy . If we sort the values of in\r\nnon-decreasing order, we can find the number of available colors using\r\nbinary search. In C++, we can use lower_bound, and in Python, we can use\r\nbisect.bisect_left.Let there be candidates for the first half and\r\ncandidates for the second half. We would like the number of ways to\r\nchoose two colors to be equal to . However, we have accidentally counted\r\ncases where we chose the same color for both halves of the fence. The\r\nnumber of such cases is , as that color must be sufficient for both\r\nhalves. Therefore, the contribution of to the answer is .Sum up the\r\nanswers for all to obtain the final answer to the problem.Overall\r\ncomplexity: for each test case.\r\n",
    "name": "C. Two Colors",
    "statement": "Monocarp has installed a new fence at his summer house. The fence\r\nconsists of n planks of the same size arranged in a row.Monocarp decided\r\nthat he would paint his fence according to the following rules: each\r\nplank of the fence will be painted in exactly one color; the number of\r\ndifferent colors that the planks will be painted in is two; the planks\r\nof the fence that are painted in the same color must form a continuous\r\nsequence, meaning that for all pairs of planks painted in the same\r\ncolor, there will be no planks painted in a different color between\r\nthem. Monocarp has m different paints, and the paint of the i-th color\r\nis sufficient to paint no more than a_i planks of the fence. Monocarp\r\nwill not buy any additional paints.Your task is to determine the number\r\nof different ways to paint the fence that satisfy all of Monocarp’s\r\ndescribed wishes. Two ways to paint are considered different if there\r\nexists a plank that is painted in different colors in these two ways.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Two Colors.json"
}