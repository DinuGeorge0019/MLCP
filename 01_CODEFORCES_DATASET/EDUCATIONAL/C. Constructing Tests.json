{
    "link": "https://codeforces.com//contest/938/problem/C",
    "problemId": "157305",
    "problem_idx": "C",
    "shortId": "938C",
    "contest_number": "938",
    "problem_submissions": {
        "G": [
            35382589,
            142741934,
            35374754,
            35374730,
            35374710,
            35374477,
            46133767,
            35440047
        ],
        "F": [
            35355120,
            35364585,
            35363394,
            35363174,
            35367302,
            35374806,
            35369385,
            35368951,
            35367527,
            35361321,
            35357853,
            35375040,
            35422822
        ],
        "E": [
            35352538,
            35354313,
            35352415,
            35358415,
            35352081,
            35358431,
            35356947,
            35369123,
            35351851,
            35352768,
            35353204,
            35355446,
            35355331,
            35364623,
            35352359,
            35354851,
            35364184,
            35361370,
            35349789
        ],
        "D": [
            35346635,
            35346136,
            35347680,
            35354109,
            35356864,
            35352477,
            35380385,
            35375255,
            35364649,
            35366010,
            35347274,
            35349910,
            35350445,
            35351420,
            35351959,
            35348864,
            35350459,
            35349429,
            35350797,
            35351471,
            35353004
        ],
        "C": [
            35345282,
            35350127,
            35345829,
            35352431,
            35355200,
            35349840,
            35349239,
            35363657,
            35345361,
            35347976,
            35348608,
            35349044,
            35347701,
            35346898,
            35346389,
            35351193,
            35383156,
            35355323,
            35348814,
            35348388,
            35350097,
            35356762
        ],
        "B": [
            35342225,
            35343255,
            35342194,
            35342912,
            35343411,
            35345634,
            35362645,
            35360273,
            35342183,
            35342830,
            35342648,
            35343913,
            35343057,
            35342574,
            35342930,
            35343254,
            35345517,
            35342996,
            35357602
        ],
        "A": [
            35341839,
            35341862,
            35342757,
            35341910,
            35341845,
            35344578,
            35362076,
            35359775,
            35341793,
            35341960,
            35341885,
            35342136,
            35341987,
            35341868,
            35342317,
            35344022,
            35341914,
            35342769
        ]
    },
    "name": "C. Constructing Tests",
    "statement": "Let’s denote a -free matrix as a binary (that is, consisting of only ’s\r\nand ’s) matrix such that every square submatrix of size of this matrix\r\ncontains at least one zero. Consider the following problem:You don’t\r\nhave to solve this problem. Instead, you have to construct a few tests\r\nfor it.You will be given numbers , , ..., . For every , find two\r\nintegers and () such that the answer for the aforementioned problem is\r\nexactly if we set and .\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:336777216\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n\ntypedef tuple<int, int, int> t3;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\n\nint IT_MAX = 1 << 19;\nint MOD = 1000000007;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 0x3f3f3f3f3f3f3f3f;\nconst db PI = acos(-1);\nconst db ERR = 1e-10;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<n;i++)\n#define Se second\n#define Fi first\n\nint main() {\n\tint T;\n\tscanf(\"%d\", &T);\n\twhile (T--) {\n\t\tll x, i;\n\t\tscanf(\"%lld\", &x);\n\t\tif (x == 0) {\n\t\t\tprintf(\"1 1\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (i = 1; i * i < x; i++) {\n\t\t\tif (x%i) continue;\n\n\t\t\tll t1 = i, t2 = x / i;\n\t\t\tif ((t1 + t2) % 2) continue;\n\t\t\tll N = (t1 + t2) / 2, NM = (t2 - t1) / 2;\n\t\t\tll M = N / NM;\n\t\t\tif (N*N - (N/M)*(N/M) == x) {\n\t\t\t\tprintf(\"%lld %lld\\n\", N, M);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (i*i >= x) printf(\"-1\\n\");\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "constructive algorithms"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Constructing Tests.json",
    "editorial_link": "https://codeforces.com//blog/entry/57840",
    "editorial": "Hint: At first we will solve the problem mentioned in the statement. The formula is . Firstly, each submatrix k?×?k should have at least one row with zero in it. Exactly  non-intersecting submatrices fit in matrix n?×?k. The same with the columns. So you should have at least this amount squared zeros.\n\nSolution\nNow that you know the formula, you can iterate over n and find the correct value. The lowest non-zero value you can get for some n is having k?=?2. So you can estimate n as about .\n\nNow let's get k for some fixed n.       . Due to rounding down, it's enough to check only this value of k.",
    "hint": []
}