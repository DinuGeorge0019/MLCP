{
    "link": "https://codeforces.com//contest/1792/problem/C",
    "problemId": "1749561",
    "problem_idx": "C",
    "shortId": "1792C",
    "contest_number": "1792",
    "problem_submissions": {
        "F2": [
            190375653,
            190403355,
            190403314,
            190376566,
            190371354,
            190371009,
            190378681,
            190390688,
            190380339,
            190390744,
            190397281,
            190395571,
            190396332,
            190405095,
            190396914,
            190408873,
            190408290,
            190408068,
            190403016,
            190399709,
            190399068,
            190440777,
            190401995
        ],
        "F1": [
            190360560,
            190376613,
            190370799,
            190366049,
            190372835,
            190357166,
            190380441,
            190390644,
            190395529,
            190392693,
            190394679,
            190392495,
            190385352,
            190378233,
            190371980,
            190376961,
            190394240,
            190393976,
            190392996,
            190356477,
            190392540,
            190390220,
            190391148,
            190435798,
            190392761
        ],
        "E": [
            190349536,
            190396415,
            190356797,
            190355921,
            190355685,
            190354329,
            190356654,
            190379338,
            190367695,
            190364381,
            190379913,
            190372928,
            190374531,
            190346879,
            190354441,
            190356992,
            190357830,
            190369017,
            190404398,
            190369702,
            190375086,
            190345346,
            190361270
        ],
        "D": [
            190338681,
            190342485,
            190377665,
            190342856,
            190335191,
            190347677,
            190340391,
            190336758,
            190364512,
            190353489,
            190336022,
            190340377,
            190341608,
            190336712,
            190338416,
            190338462,
            190342927,
            190342951,
            190340969,
            190356126,
            190343824
        ],
        "C": [
            190332032,
            190336067,
            190327325,
            190335874,
            190328548,
            190335825,
            190331257,
            190329975,
            190341574,
            190346406,
            190329101,
            190331331,
            190332174,
            190331190,
            190328589,
            190329328,
            190333145,
            190331745,
            190324986,
            190335758
        ],
        "B": [
            190326313,
            190322698,
            190320989,
            190331751,
            190324446,
            190330720,
            190326021,
            190327400,
            190330429,
            190335776,
            190324890,
            190326657,
            190333559,
            190327470,
            190325870,
            190324745,
            190327323,
            190329410,
            190330842,
            190329835
        ],
        "A": [
            190321850,
            190318780,
            190318690,
            190319485,
            190319112,
            190319183,
            190319784,
            190318833,
            190324148,
            190321022,
            190318836,
            190320391,
            190319287,
            190319729,
            190318884,
            190319911,
            190320170,
            190319083,
            190321001,
            190322167
        ]
    },
    "name": "C. Min Max Sort",
    "statement": "You are given a permutation p of length n (a permutation of length n is\r\nan array of length n in which each integer from 1 to n occurs exactly\r\nonce).You can perform the following operation any number of times\r\n(possibly zero): choose two different elements x and y and erase them\r\nfrom the permutation; insert the minimum of x and y into the permutation\r\nin such a way that it becomes the first element; insert the maximum of x\r\nand y into the permutation in such a way that it becomes the last\r\nelement. For example, if p = [1, 5, 4, 2, 3] and we want to apply the\r\noperation to the elements 3 and 5, then after the first step of the\r\noperation, the permutation becomes p = [1, 4, 2]; and after we insert\r\nthe elements, it becomes p = [3, 1, 4, 2, 5].Your task is to calculate\r\nthe minimum number of operations described above to sort the permutation\r\np in ascending order (i. e. transform p so that p_1 < p_2 <\r\ndots < p_n).\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\ninline int read()\n{\n\tint n=0,f=1,ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-')f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tn=n*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn n*f;\n}\nint a[500005],pos[500005];\nsigned main()\n{\n\tint t,n,ans;\n\tt=read();\n\tfor(int greg=1;greg<=t;greg++)\n\t{\n\t\tn=read();\n\t\tfor(int i=1;i<=n;i++)a[i]=read(),pos[a[i]]=i;\n\t\tif(n%2==1)ans=1;\n\t\telse ans=0;\n\t\twhile(1)\n\t\t{\n\t\t\tint x,y;\n\t\t\tif(n%2==1)\n\t\t\t{\n\t\t\t\tx=(n+1)/2-(ans+1)/2;\n\t\t\t\ty=(n+1)/2+(ans+1)/2;\n\t\t\t\tif(x<1||y>n||pos[y]-pos[y-1]<0||pos[x+1]-pos[x]<0)break;\n\t\t\t\tans+=2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx=n/2-ans/2;\n\t\t\t\ty=n/2+1+ans/2;\n\t\t\t\tif(x<1||y>n||pos[y]-pos[y-1]<0||pos[x+1]-pos[x]<0)break;\n\t\t\t\tans+=2;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",(n-ans)/2);\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "greedy",
        "math",
        "two pointers"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\C. Min Max Sort.json",
    "editorial_link": "https://codeforces.com//blog/entry/111835",
    "editorial": "If the array is already sorted, then the answer is . Otherwise, there is\r\na last operation, after which the permutation takes the form . Which\r\nmeans that the elements and are selected as the last operation (because\r\nthey are at the first and last positions after the operation). Now we\r\nknow that the last operation is and it doesnât matter where exactly\r\nthese numbers are in the permutation, i. e. we can assume that the\r\nanswer has increased by , and consider only the numbers 1. Similarly,\r\nfor the \"remaining\" permutation, there are two options, either it is\r\nsorted, and then the answer is , or there is a last operation and the\r\nnumbers and are used in it. And so on until the \"remaining\" permutation\r\nis sorted or empty.It remains to find out how to quickly check whether\r\nthe numbers in the segment are sorted (they go in the correct order in\r\nthe initial permutation). Note that this segment corresponds to values\r\nof elements, not to positions in the permutation. If this segment is\r\nsorted for some , then the answer does not exceed .There are several\r\nways to check, letâs consider one of them. Note that if the segment is\r\nsorted for some value , then it will be sorted for large values as well.\r\nSo we can start with the maximum value of (which is equal to ) and\r\ndecrease it until the segment remains sorted. Now for each we need only\r\ntwo checks that < and > , where is the position of the element in the\r\npermutation.Thus, we got the solution in linear time.Another way is to\r\nrun binary search on since if the numbers in appear in the permutation\r\nin sorted order, the same holds for . This approach yields a solution in\r\n.\r\n",
    "hint": []
}