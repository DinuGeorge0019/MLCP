{
    "link": "https://codeforces.com//contest/1076/problem/D",
    "problemId": "253928",
    "problem_idx": "D",
    "shortId": "1076D",
    "contest_number": "1076",
    "problem_submissions": {
        "G": [
            45625846,
            45630140,
            45632982,
            46960572,
            46960569,
            46960484,
            46960479,
            45661891,
            45661748,
            45661556,
            45637887
        ],
        "F": [
            45614239,
            45617004,
            45617675,
            45621744,
            45623056,
            45621580,
            45616229,
            45624418,
            45620163,
            45626942,
            45622892,
            92696270,
            45628245,
            45626700,
            45628806,
            45625577,
            45627726,
            45626872,
            45629774,
            45627914
        ],
        "E": [
            45608069,
            45606664,
            45609407,
            45611410,
            45613399,
            45608388,
            45619010,
            45614637,
            45612416,
            45607002,
            45613856,
            45612132,
            45618044,
            45620715,
            45614237,
            45682359,
            45621599,
            45618734,
            45620976
        ],
        "D": [
            45604073,
            45602278,
            45603983,
            45604745,
            45608217,
            45612332,
            45603996,
            45608096,
            45607173,
            45610865,
            45611014,
            45608491,
            45611013,
            45612751,
            45610584,
            45615172,
            45677601,
            45613074,
            45613230
        ],
        "C": [
            45600029,
            45599030,
            45599822,
            45597549,
            45600013,
            45601957,
            45599535,
            45601880,
            45597795,
            45594983,
            45608083,
            45600343,
            45605220,
            45599746,
            45605736,
            45602724,
            45604906,
            45602506
        ],
        "B": [
            45596357,
            45597200,
            45597164,
            45595268,
            45596818,
            45597059,
            45596991,
            45599540,
            45605291,
            45600750,
            45604626,
            45597294,
            45597956,
            45598110,
            45602593,
            45598676,
            45601974,
            45596576
        ],
        "A": [
            45594616,
            45596057,
            45594765,
            45594566,
            45594867,
            45594852,
            45605960,
            45594859,
            45594710,
            45599455,
            45594781,
            45595172,
            45594643,
            45594748,
            45596363,
            45595242,
            45597244,
            45594970
        ]
    },
    "name": "D. Edge Deletion",
    "statement": "You are given an undirected connected weighted graph consisting of n\r\nvertices and m edges. Let’s denote the length of the shortest path from\r\nvertex 1 to vertex i as d_i. You have to erase some edges of the graph\r\nso that at most k edges remain. Let’s call a vertex i if there still\r\nexists a path from 1 to i with length d_i after erasing the edges.Your\r\ngoal is to erase the edges in such a way that the number of vertices is\r\nmaximized.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef double D;\ntypedef long long int LL;\n\n#define st first\n#define nd second\n#define pb push_back\n#define PLL pair <LL, LL>\n#define PII pair <int, int>\n\nconst int N = 3e5 + 7;\nconst int MX = 1e9 + 7;\nconst LL INF = 1e18 + 9LL;\n\nint n, m, k;\nvector <int> res;\n\nPII p[N];\nLL dist[N];\nbool vis[N];\nvector <PII> T[N];\nvector <pair <PII, int> > G[N];\n\nvoid Dijkstra(int s){\n\tfor(int i = 1; i <= n; ++i)\n\t\tdist[i] = INF;\n\tdist[s] = 0;\n\t\n\tpriority_queue <PLL> Q;\n\tQ.push({0, s});\n\t\n\twhile(!Q.empty()){\n\t\tint u = Q.top().nd;\n\t\tQ.pop();\n\t\t\n\t\tif(vis[u])\n\t\t\tcontinue;\n\t\tvis[u] = true;\n\t\t\n\t\tif(p[u].st > 0)\n\t\t\tT[p[u].st].push_back({u, p[u].nd});\n\t\t\n\t\tfor(auto v: G[u])\n\t\t\tif(dist[v.st.st] > dist[u] + v.st.nd){\n\t\t\t\tdist[v.st.st] = dist[u] + v.st.nd;\n\t\t\t\tp[v.st.st] = {u, v.nd};\n\t\t\t\tQ.push({-dist[v.st.st], v.st.st});\n\t\t\t}\n\t}\n}\n\nvoid dfs(int u){\n\tfor(auto v: T[u]){\n\t\tif((int)res.size() < k)\n\t\t\tres.push_back(v.nd);\n\t\tdfs(v.st);\n\t}\n}\n\nint main(){\n//\tios_base::sync_with_stdio(false);\n//\tcin.tie(NULL);\n//\tcout.tie(NULL);\n\n\tscanf(\"%d %d %d\", &n, &m, &k);\n\tfor(int i = 1; i <= m; ++i){\n\t\tint u, v, c;\n\t\tscanf(\"%d %d %d\", &u, &v, &c);\n\n\t\tG[u].push_back({{v, c}, i});\n\t\tG[v].push_back({{u, c}, i});\n\t}\n\t\n\tDijkstra(1);\n\tdfs(1);\n\t\n\tprintf(\"%d\\n\", (int)res.size());\n\tfor(int v: res)\n\t\tprintf(\"%d \", v);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "greedy",
        "shortest paths"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\D. Edge Deletion.json",
    "editorial_link": "https://codeforces.com/blog/entry/63151",
    "editorial": "Letâs understand how many good vertices we may get if only edges remain.\r\nThis value is not greater than , since an edge an add only one good\r\nvertex, and for we have a good vertex with index . This is an upper\r\nbound; letâs try to find a solution getting exactly good vertices (or,\r\nif , all vertices of the graph will be good). Letâs run Dijkstraâs\r\nalgorithm from vertex and stop it as soon as we know the shortest paths\r\nto vertices (including vertex ). The answer should contain the edges\r\nbelonging to the shortest path tree built on these vertices.\r\n",
    "hint": []
}