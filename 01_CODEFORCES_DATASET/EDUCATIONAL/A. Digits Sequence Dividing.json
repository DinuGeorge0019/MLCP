{
    "link": "https://codeforces.com//contest/1107/problem/A",
    "problemId": "288734",
    "problem_idx": "A",
    "shortId": "1107A",
    "contest_number": "1107",
    "problem_submissions": {
        "E": [
            49013467,
            49008460,
            49012396,
            49006242,
            49008619,
            49017766,
            49019000,
            49012372,
            49011583,
            176420718,
            49013181,
            49015268,
            49018364,
            49014306,
            49015741,
            49004388,
            48997380,
            49015240,
            49002659,
            49009546,
            49008550
        ],
        "G": [
            49011365,
            49010194,
            49016397,
            49014169,
            49016073,
            49011313,
            49010209,
            49025351,
            49022889,
            49019588,
            49010516,
            49020197,
            49021008,
            49020053,
            49017813,
            49036704,
            49020211,
            49015481,
            49030126
        ],
        "F": [
            49008073,
            49012089,
            49021192,
            49015026,
            49017918,
            49019060,
            49366532,
            49825656,
            49825549,
            49021809
        ],
        "D": [
            48997651,
            49010674,
            49008906,
            49001237,
            49051114,
            49002152,
            49005979,
            49003643,
            49005670,
            49006757,
            49005502,
            49007559,
            49006488,
            49007684,
            49005318,
            49010907,
            49009162,
            49010914,
            49006671,
            49005756,
            49006449
        ],
        "C": [
            48994637,
            48998923,
            49003509,
            48997020,
            48998710,
            48997908,
            49002063,
            48998329,
            49002178,
            48999947,
            49000421,
            49004011,
            49003004,
            48998353,
            49007207,
            49005313,
            48999254,
            49018676,
            49000412,
            49000294
        ],
        "B": [
            48993730,
            48996062,
            48998013,
            48994172,
            48995232,
            48997773,
            48995013,
            48998484,
            48995876,
            48996083,
            48994456,
            48998645,
            48994729,
            48997378,
            49001444,
            48995542,
            49016049,
            48995486,
            48997049
        ],
        "A": [
            48993686,
            48993925,
            48994361,
            48993741,
            48994038,
            48994065,
            48994006,
            48996736,
            48994321,
            48994290,
            48993884,
            48994319,
            48994054,
            48994165,
            49000099,
            48993805,
            49017652,
            48993935,
            48993923
        ]
    },
    "name": "A. Digits Sequence Dividing",
    "statement": "You are given a sequence s consisting of n digits from 1 to 9.You have\r\nto divide it into segments (segment is a consecutive sequence of\r\nelements) (in other words, you have to place separators between some\r\ndigits of the sequence) in such a way that and if the resulting division\r\nwill be represented as an integer numbers sequence then each next\r\nelement of this sequence will be than the previous one.More formally: if\r\nthe resulting division of the sequence is t_1, t_2,\r\ndots, t_k, where k is the number of element in a division, then for each\r\ni from 1 to k-1 the condition t_{i} < t_{i + 1} (using comparing, it\r\nmeans that the integer representations of strings are compared) should\r\nbe satisfied.For example, if s=654 then you can divide it into parts [6,\r\n54] and it will be suitable division. But if you will divide it into\r\nparts [65, 4] then it will be bad division because 65 > 4. If s=123 then\r\nyou can divide it into parts [1, 23], [1, 2, 3] but not into parts [12,\r\n3].Your task is to find suitable division for each of the q independent\r\nqueries.\r\n",
    "solutions": [
        "#ifndef BZ\n#pragma GCC optimize \"-O3\"\n#endif\n#include <bits/stdc++.h>\n\n#define FASTIO\n#define ALL(v) (v).begin(), (v).end()\n#define rep(i, l, r) for (int i = (l); i < (r); ++i)\n\n#ifdef FASTIO\n#define scanf abacaba\n#define printf abacaba\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\nusing namespace std;\n\nint main() {\n#ifdef FASTIO\n    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n#endif\n    int t;\n    cin >> t;\n    for (int tt = 1; tt <= t; tt++) {\n        int n;\n        cin >>n;\n        string s;\n        cin >> s;\n        if (n == 2 && s[0] >= s[1]) {\n            cout << \"NO\\n\";\n        } else {\n            cout << \"YES\\n\";\n            cout << 2 << \"\\n\";\n            cout << s[0] << \" \" << s.substr(1, s.size()) << \"\\n\";\n        }\n    }\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "strings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Digits Sequence Dividing.json",
    "editorial_link": "https://codeforces.com//blog/entry/64833",
    "editorial": "Since we just want to make two numbers such that the first number is\r\nsmaller than the second, our best bet is to use only the first digit for\r\nthe first number and the rest of the digits for the second number. Note\r\nthat since the numbers can have up to 300 digits we shouldn\u00e2\u0080\u0099t actually\r\nevaluate the second number. Instead, since the digits only include 1\r\nthrough 9, we can handle that case by checking the number of digits.\r\nCode: 49002957\r\n"
}