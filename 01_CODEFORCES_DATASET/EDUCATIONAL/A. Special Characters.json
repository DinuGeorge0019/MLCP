{
    "link": "https://codeforces.com//contest/1948/problem/A",
    "problemId": "2532313",
    "problem_idx": "A",
    "shortId": "1948A",
    "contest_number": "1948",
    "problem_submissions": {
        "G": [
            251472376,
            251497915,
            251480984,
            251480163,
            251489959,
            251467292,
            251485648,
            251500573,
            251486197,
            251512722,
            251521639,
            251480657,
            251509802,
            251528428,
            251520218,
            251515719,
            251959006,
            251871508,
            251537711,
            251535946,
            251529016,
            251516034,
            251533510,
            251533892
        ],
        "E": [
            251455000,
            251464649,
            251452268,
            251480095,
            251460808,
            251464897,
            251506007,
            251480198,
            251478117,
            251501414,
            251479798,
            251486494,
            251498878,
            251484347,
            251486715,
            251474115,
            251485874,
            251484195,
            251499420
        ],
        "F": [
            251446403,
            251454570,
            251464038,
            251471618,
            251471081,
            251484983,
            251475462,
            251495125,
            251493237,
            251458734,
            251522756,
            251503819,
            251513774,
            251502504,
            251506031,
            251513492,
            251502955,
            251521827,
            251479729
        ],
        "D": [
            251428147,
            251500203,
            251431497,
            251439266,
            251434727,
            251440547,
            251446816,
            251446867,
            251456743,
            251442045,
            251470051,
            251447446,
            251460726,
            251467120,
            251467499,
            251465257,
            251451922,
            251465519,
            251467189,
            251458845
        ],
        "C": [
            251425049,
            251426495,
            251431074,
            251427750,
            251427491,
            251433261,
            251437529,
            251439503,
            251431968,
            251453203,
            251439755,
            251452383,
            251446018,
            251457382,
            251439370,
            251471934,
            251459502,
            251461525,
            251447180
        ],
        "B": [
            251421706,
            251420680,
            251422950,
            251421537,
            251420205,
            251424082,
            251426365,
            251440040,
            251423639,
            251430207,
            251430125,
            251435004,
            251430108,
            251439531,
            251427186,
            251441008,
            251448490,
            251446251,
            251436268
        ],
        "A": [
            251419288,
            251417353,
            251417664,
            251417432,
            251417471,
            251418376,
            251419094,
            251418141,
            251417555,
            251419693,
            251424986,
            251423459,
            251419168,
            251420360,
            251418645,
            251426543,
            251449327,
            251430256,
            251427243
        ]
    },
    "name": "A. Special Characters",
    "statement": "You are given an integer n.Your task is to build a string of uppercase\r\nLatin letters. There must be exactly n special characters in this\r\nstring. Let’s call a character if it is equal to exactly one of its\r\nneighbors.For example, there are 6 special characters in the string (at\r\npositions: 1, 3, 5, 6, 7 and 8).Print any suitable string or report that\r\nthere is no such string.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 15.03.2024 10:34:51\n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n;\n    cin >> n;\n    if (n % 2 == 1) {\n      cout << \"NO\" << '\\n';\n    } else {\n      cout << \"YES\" << '\\n';\n      for (int i = 0; i < n / 2; i++) {\n        cout << (i % 2 == 0 ? \"AA\" : \"BB\");\n      }\n      cout << '\\n';\n    }\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Special Characters.json",
    "editorial_link": "https://codeforces.com//blog/entry/127182",
    "editorial": "Letâs look at the blocks of consecutive equal characters (such that it\r\ncannot be extended to the left or to the right): if its length is 1,\r\nthen this block has 0 special characters; if its length is 2, then this\r\nblock has 2 special characters; if its length is at least 3, then this\r\nblock has 2 special characters (only the leftmost and the rightmost\r\nelements); We can see that there is no way to obtain an odd number of\r\nspecial characters. So the answer is for all odd values of n. And we can\r\neasily build the string for all even values of n. The answer for an even\r\nn may look like this: with\r\nfrac{n}{2} blocks of length 2 alternating between two different letters.\r\n",
    "hint": []
}