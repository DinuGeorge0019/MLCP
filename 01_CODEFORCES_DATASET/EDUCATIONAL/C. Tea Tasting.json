{"link": "https://codeforces.com//contest/1795/problem/C", "problemId": "1785699", "problem_idx": "C", "shortId": "1795C", "contest_number": "1795", "problem_submissions": {"G": [193868249, 193922126, 193880640, 193880242, 193879883, 193877939, 193892319, 193909416, 193909281, 193909039, 193908855, 193907982, 193907256, 193907116, 193905885, 193905428, 193895936, 193894919, 193900585, 193900447, 193900331, 193900021, 193895212, 193901119, 193897399, 194065980, 193895350, 193897364, 193910352, 193909678, 193877594, 193901310, 193900708, 193909774, 193909664, 193908826, 193902609, 193895098, 193898582, 193887169, 193989778, 193903191, 193906575, 193901677], "E": [193858484, 193864061, 193860485, 193866472, 193870118, 193881494, 193869535, 193877440, 194065966, 193867450, 193873381, 193864290, 193872060, 193880762, 193876051, 193901176, 193882421, 193899122, 193881276, 193885055], "F": [193849592, 193871412, 193870619, 193880295, 193883585, 193866256, 193887756, 193901053, 193899102, 193887184, 194065972, 193879792, 193887970, 193889897, 193889600, 193879424, 193886027, 193888430, 193890811, 193880065, 193894847, 193891841], "D": [193842483, 193853701, 193849666, 193849500, 193854093, 193850355, 193858853, 193853243, 194065953, 193855818, 193855956, 193852941, 193856134, 193845600, 193859844, 193851729, 193849114, 193866588, 193860778, 193855517], "C": [193840570, 193847474, 193846113, 193844888, 193847932, 193844693, 193851549, 193846559, 194065943, 193849210, 193849704, 193847867, 193849903, 193858596, 193851945, 193847688, 193845368, 193860332, 193855373, 193849162], "B": [193839119, 193839637, 193839480, 193839407, 193839832, 193839202, 193842405, 193840503, 194065925, 193843321, 193841514, 193841857, 193840539, 193848293, 193839850, 193839356, 193839529, 193847088, 193842717, 193840388], "A": [193838910, 193838985, 193838946, 193838908, 193839007, 193838901, 193840204, 193839189, 194065914, 193839222, 193839386, 193882631, 193839087, 193843666, 193841139, 193839086, 193838960, 193838928, 193845036, 193840156, 193838911]}, "name": "C. Tea Tasting", "statement": "A tea manufacturer decided to conduct a massive tea tasting. n sorts of\r\ntea will be tasted by n tasters. Both the sorts of tea and the tasters\r\nare numbered from 1 to n. The manufacturer prepared a_i milliliters of\r\nthe i-th sort of tea. The j-th taster can drink b_j milliliters of tea\r\nat once.The tasting will be conducted in steps. During the first step,\r\nthe i-th taster tastes the i-th sort of tea. The i-th taster drinks\r\nmin(a_i, b_i) tea (how much is available of the i-th sort and how much\r\nthe i-th taster can drink). a_i also decreases by this amount.Then all\r\ntasters move to the previous sort of tea. Thus, during the second step,\r\nthe i-th taster tastes the (i-1)-st sort of tea. The i-th taster drinks\r\nmin(a_{i-1}, b_i) tea. The 1-st person ends the tasting.During the third\r\nstep, the i-th taster tastes the (i-2)-nd sort of tea. The 2-nd taster\r\nends the tasting. This goes on until everyone ends the tasting.Take a\r\nlook at the tasting process for n = 3, a = [10, 20, 15], b = [9, 8, 6].\r\nIn the left row, there are the current amounts of each sort of tea. In\r\nthe right column, there are current amounts of tea each taster has drunk\r\nin total. The arrow tells which taster each tea goes to on the current\r\nstep. The number on the arrow is the amount minimum of how much is\r\navailable of the sort of tea and how much the taster can drink. For each\r\ntaster, print how many milliliters of tea he/she will drink in total.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 16.02.2023 18:38:42       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n;\n    cin >> n;\n    vector<long long> a(n);\n    for (int i = 0; i < n; i++) { \n      cin >> a[i];\n    }\n    vector<long long> b(n);\n    for (int i = 0; i < n; i++) { \n      cin >> b[i];\n    }\n    multiset<long long> s;\n    long long delta = 0;\n    for (int i = 0; i < n; i++) {\n      s.insert(a[i] - delta);\n      long long ans = 0;\n      while (!s.empty() && *s.begin() + delta <= b[i]) {\n        ans += *s.begin() + delta;\n        s.erase(s.begin());\n      }\n      ans += (long long) s.size() * b[i];\n      delta -= b[i];\n      cout << ans << \" \\n\"[i == n - 1];\n    }\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "data structures", "implementation"], "dificulty": "1500", "interactive": false}