{"link": "https://codeforces.com//contest/818/problem/F", "problemId": "112250", "problem_idx": "F", "shortId": "818F", "contest_number": "818", "problem_submissions": {"G": [30023806, 28149762, 28149727, 28149674, 28150840, 28150782, 28150772, 28150751, 28150583, 36665796, 28151676, 28150077, 28257233, 28153699, 28148603, 28155021, 28156689, 28156349, 28183779], "F": [28147295, 28150245, 28148357, 28147147, 28148601, 28147618, 28149338, 28148822, 28148432, 28150045, 28149715, 28149799, 28150664, 28150399, 28265989, 28152841, 28152214, 28151371, 28150016, 28150927, 28150947, 28149764], "E": [28145911, 28145866, 28146912, 28146350, 28146816, 28150531, 28146712, 28147272, 28147609, 28147038, 28148502, 28147986, 28147358, 28149016, 28148737, 28150693, 28148409, 28146623, 28149530, 28149268, 28147603], "D": [28144801, 28145060, 28145928, 28145417, 28145327, 28143658, 28146282, 28144973, 28145879, 28146889, 28146309, 28145676, 28146984, 28146985, 28145000, 28147304, 28145917, 28147015, 28147874, 28146172], "C": [28144306, 28147073, 28145409, 28144547, 28144448, 28144425, 28145368, 28146425, 28145275, 28145837, 28145300, 28145004, 28145976, 28145637, 28147975, 28146492, 28148332, 28146298, 28146819, 28144965], "B": [28143095, 28143560, 28143556, 28143415, 28143669, 28144503, 28144240, 28143720, 28144083, 28143468, 28143875, 28143599, 28143355, 28143995, 28143629, 28143924, 28143708, 28142954, 28143812, 28144185], "A": [28142461, 28142521, 28142540, 28142460, 28142740, 28142644, 28142466, 28142416, 28142519, 28142508, 28142479, 28142800, 28142422, 28142542, 28142573, 28142463, 28142490, 28142485]}, "name": "F. Level Generation", "statement": "Ivan is developing his own computer game. Now he tries to create some\r\nlevels for his game. But firstly for each level he needs to draw a graph\r\nrepresenting the structure of the level.Ivan decided that there should\r\nbe exactly vertices in the graph representing level , and the edges have\r\nto be bidirectional. When constructing the graph, Ivan is interested in\r\nspecial edges called . An edge between two vertices and is called a if\r\nthis edge belongs to every path between and (and these vertices will\r\nbelong to different connected components if we delete this edge). For\r\neach level Ivan wants to construct a graph where at least half of the\r\nedges are . He also wants to maximize the number of edges in each\r\nconstructed graph.So the task Ivan gave you is: given numbers , for each\r\ntell the maximum number of edges in a graph with vertices, if at least\r\nhalf of the edges are . .\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nLL C2( LL x ){ return x * ( x - 1 ) / 2; }\nint main(){\n  int q; cin >> q; while( q -- ){\n    LL n , a = 0; cin >> n;\n    LL bl = 1 , br = n - 1;\n    while( bl <= br ){\n      LL mid = (bl + br) >> 1;\n      LL res = C2( n - mid );\n      if( res < mid ){\n        a = max( a , mid + res );\n        br = mid - 1;\n      }else{\n        a = max( a , mid + mid );\n        bl = mid + 1;\n      }\n    }\n    cout << a << endl;\n  }\n}\n"], "input": "", "output": "", "tags": ["binary search", "math", "ternary search"], "dificulty": "2100", "interactive": false}