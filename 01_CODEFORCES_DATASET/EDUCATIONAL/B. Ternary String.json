{
    "link": "https://codeforces.com//contest/1354/problem/B",
    "problemId": "623445",
    "problem_idx": "B",
    "shortId": "1354B",
    "contest_number": "1354",
    "problem_submissions": {
        "G": [
            80502712,
            80500640,
            80479424,
            80521575,
            80514570,
            80507519,
            80516727,
            80506952,
            80522749,
            80517834
        ],
        "F": [
            80492752,
            80491818,
            80486741,
            80486733,
            80498606,
            80506559,
            80492000,
            80506147,
            80493453,
            80507365,
            80500930,
            80492368,
            80502196,
            80506705,
            80501348,
            80502603,
            80507003,
            80504378,
            80500666,
            80509209
        ],
        "E": [
            80478361,
            80481693,
            80494073,
            80473313,
            80489080,
            80489590,
            80500698,
            80489890,
            80484400,
            80477593,
            80478451,
            80492063,
            80495115,
            80483322,
            80494477,
            80486894,
            80494427,
            80491606,
            80488314
        ],
        "D": [
            80469519,
            80470691,
            80498555,
            80467168,
            80480497,
            80478286,
            80477445,
            80477111,
            80466399,
            80471019,
            80473056,
            80471601,
            80482362,
            80488495,
            80473238,
            80482948,
            80466995,
            80486731,
            80484796,
            80475358
        ],
        "C2": [
            80463522,
            80484245,
            80502970,
            80478908,
            80472069,
            80468985,
            80468689,
            80472664,
            80476619,
            80476720,
            80489656,
            80477361,
            80476069,
            80503667,
            80473397,
            80472911,
            80489616,
            80481827,
            80482549,
            80500296
        ],
        "C1": [
            80463378,
            80464968,
            80501505,
            80478534,
            80468463,
            80462050,
            80463990,
            80463377,
            80459508,
            80460645,
            80463967,
            80465199,
            80472341,
            80461193,
            80463170,
            80458830,
            80475032,
            80470173,
            80520837,
            80468845,
            80464138
        ],
        "B": [
            80454412,
            80455734,
            80504343,
            80456075,
            80456469,
            80457930,
            80459404,
            80456913,
            80454847,
            80456739,
            80454406,
            80455296,
            80457195,
            80455557,
            80457336,
            80455902,
            80456106,
            80460925,
            80455491,
            80455115
        ],
        "A": [
            80454037,
            80454106,
            80505746,
            80454365,
            80454427,
            80454271,
            80454716,
            80454697,
            80454135,
            80454424,
            80455156,
            80454027,
            80454887,
            80454126,
            80454558,
            80454452,
            80454285,
            80456834,
            80476438,
            80454206
        ]
    },
    "name": "B. Ternary String",
    "statement": "You are given a string s such that each its character is either , , or .\r\nYou have to choose the shortest contiguous substring of s such that it\r\ncontains each of these three characters at least once.A contiguous\r\nsubstring of string s is a string that can be obtained from s by\r\nremoving some (possibly zero) characters from the beginning of s and\r\nsome (possibly zero) characters from the end of s.\r\n",
    "solutions": [
        "#include <map>\n#include <set>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std;\nconst int inf = 1012345678;\nint main() {\n\tint Q;\n\tcin >> Q;\n\twhile (Q--) {\n\t\tstring S;\n\t\tcin >> S;\n\t\tvector<int> cnt(3);\n\t\tint pre = 0, ans = inf;\n\t\tfor (int i = 0; i < S.size(); ++i) {\n\t\t\twhile (pre != S.size() && (cnt[0] == 0 || cnt[1] == 0 || cnt[2] == 0)) {\n\t\t\t\t++cnt[S[pre++] - '1'];\n\t\t\t}\n\t\t\tif (cnt[0] != 0 && cnt[1] != 0 && cnt[2] != 0) {\n\t\t\t\tans = min(ans, pre - i);\n\t\t\t}\n\t\t\t--cnt[S[i] - '1'];\n\t\t}\n\t\tcout << (ans == inf ? 0 : ans) << '\\n';\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp",
        "implementation",
        "two pointers"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Ternary String.json",
    "editorial_link": "https://codeforces.com//blog/entry/77593",
    "editorial": "There are multiple solutions involving advanced methods such as binary\r\nsearch or two pointers, but I\u00e2\u0080\u0099ll try to describe a simpler one.The main\r\nidea of my solution is that the answer should look like : one character\r\nof type , a block of characters of type , and one character of type . If\r\nwe find all blocks of consecutive equal characters in our string, each\r\ncandidate for the answer can be obtained by expanding a block to the\r\nleft and to the right by exactly one character. So the total length of\r\nall candidates is , and we can check them all.Why does the answer look\r\nlike ? If the first character of the substring appears somewhere else in\r\nit, it can be deleted. The same applies for the last character. So, the\r\nfirst and the last characters should be different, and should not appear\r\nanywhere else within the string. Since there are only three types of\r\ncharacters, the answer always looks like .\r\n"
}