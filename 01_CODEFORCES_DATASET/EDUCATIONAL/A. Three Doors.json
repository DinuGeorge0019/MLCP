{
    "link": "https://codeforces.com//contest/1709/problem/A",
    "problemId": "1473244",
    "problem_idx": "A",
    "shortId": "1709A",
    "contest_number": "1709",
    "problem_submissions": {
        "F": [
            165168347,
            165171155,
            165167911,
            165174463,
            165176163,
            165160774,
            165168485,
            165153508,
            165190349,
            165187538,
            165182010,
            165187878,
            165188862,
            165199087,
            165192962,
            165196109,
            165191946,
            165144458,
            165186818,
            165193512,
            165203160
        ],
        "E": [
            165159365,
            165161441,
            165158406,
            165162017,
            165168742,
            165174634,
            165187067,
            165172843,
            165175285,
            165185776,
            165171787,
            165176500,
            165174638,
            165175948,
            165172273,
            165158835,
            165190131,
            165153154,
            165197774,
            165181829,
            165178900
        ],
        "D": [
            165150554,
            165148981,
            165152094,
            165156213,
            165151693,
            165153019,
            165151289,
            165162605,
            165149121,
            165155132,
            165160454,
            165159258,
            165152293,
            165165679,
            165219278,
            165218001,
            165217824,
            165217721,
            165217510,
            165217230,
            165156286,
            165159148,
            165160000,
            165161618,
            165152984
        ],
        "C": [
            165144629,
            165143580,
            165141216,
            165150836,
            165145746,
            165145999,
            165145473,
            165163144,
            165144208,
            165149116,
            165150518,
            165148291,
            165145172,
            165171500,
            165146230,
            165166415,
            165151667,
            165148193,
            165146642
        ],
        "B": [
            165139451,
            165137999,
            165136858,
            165138643,
            165140562,
            165138703,
            165137403,
            165156435,
            165139221,
            165142115,
            165142999,
            165139377,
            165138165,
            165141728,
            165137879,
            165168796,
            165142050,
            165141198,
            165138920
        ],
        "A": [
            165135387,
            165134436,
            165133952,
            165134310,
            165134821,
            165133959,
            165133957,
            165138163,
            165134268,
            165134365,
            165134868,
            165134280,
            165133923,
            165136754,
            165134369,
            165170607,
            165135087,
            165136295,
            165134364
        ]
    },
    "name": "A. Three Doors",
    "statement": "There are three doors in front of you, numbered from 1 to 3 from left to\r\nright. Each door has a lock on it, which can only be opened with a key\r\nwith the same number on it as the number on the door.There are three\r\nkeys one for each door. Two of them are hidden behind the doors, so that\r\nthere is no more than one key behind each door. So two doors have one\r\nkey behind them, one door doesn\u2019t have a key behind it. To obtain a key\r\nhidden behind a door, you should first unlock that door. The remaining\r\nkey is in your hands.Can you open all the doors?\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n#include <array>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) {fprintf(stderr, __VA_ARGS__);fflush(stderr);}\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nint a[5];\n\nvoid solve() {\n\teprintf(\"solve\\n\");\n\tfor (int i = 0; i < 4; i++)\n\t\tscanf(\"%d\", &a[i]);\n\tint p = 0;\n\tfor (int i = 0; i < 3; i++) {\n\t\tp = a[p];\n\t\teprintf(\"%d\\n\", p);\n\t\tif (p == 0) {\n\t\t\tprintf(\"NO\\n\");\n\t\t\treturn;\n\t\t}\n\t}\n\tprintf(\"YES\\n\");\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) solve();\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Three Doors.json",
    "editorial_link": "https://codeforces.com//blog/entry/105164",
    "editorial": "Note that we never have a choice in what door should we open. First, we\r\nopen the door with the same number as the key in our hand. Then, the\r\ndoor with the same number as the key behind the first opened door.\r\nFinally, the door with the same number as the key behind the second\r\nopened door.If any of the first and second opened doors didn\u00e2\u0080\u0099t have a\r\nkey behind it, then it\u00e2\u0080\u0099s impossible. Otherwise, we open every door.Let\r\nbe the keys behind the corresponding doors. Then we should check if is\r\nnot zero and is not zero.Overall complexity: per testcase.\r\n"
}