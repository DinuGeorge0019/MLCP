{
    "link": "https://codeforces.com//contest/1743/problem/E",
    "problemId": "1590320",
    "problem_idx": "E",
    "shortId": "1743E",
    "contest_number": "1743",
    "problem_submissions": {
        "G": [
            176744926,
            176752632,
            176765710,
            176759446,
            176826731,
            176825958,
            176825876,
            176825841,
            176825795,
            176825757,
            176777747,
            176767399,
            176787833,
            176794001,
            176793915,
            176793787,
            176793693,
            176793601,
            176793457,
            176793414,
            176793075,
            176792582,
            176790966,
            176790830,
            176790739,
            176790602,
            176790480,
            176790442,
            176790394,
            176877236,
            176797381,
            177041275
        ],
        "F": [
            176737097,
            176733706,
            176744244,
            176746662,
            176734362,
            176741223,
            176737910,
            176729577,
            176742322,
            176771541,
            176747634,
            176866127,
            176744359,
            176742533,
            176764904,
            176749314,
            176748844,
            176759565,
            176751246,
            176746192,
            176742294,
            176760205
        ],
        "E": [
            176732507,
            176757486,
            176736176,
            176739966,
            176749212,
            176748013,
            176727666,
            176739006,
            176729866,
            176763689,
            176763186,
            176762781,
            176756640,
            176764718,
            176740887,
            176756959,
            176787283,
            176742950,
            176761500,
            176766019,
            176770369,
            176749818
        ],
        "D": [
            176723746,
            176718140,
            176716615,
            176721411,
            176719450,
            176723698,
            176718782,
            176720745,
            176721715,
            176722102,
            176729581,
            176725500,
            176730292,
            176719597,
            176730936,
            176731941,
            176724207,
            176723731,
            176736911
        ],
        "C": [
            176716029,
            176704815,
            176706962,
            176708929,
            176705118,
            176704124,
            176715109,
            176705993,
            176708271,
            176707432,
            176707937,
            176714968,
            176710289,
            176708841,
            176705755,
            176710426,
            176713787,
            176707796,
            176708736,
            176710057
        ],
        "B": [
            176712751,
            176699478,
            176698683,
            176699488,
            176698322,
            176698046,
            176699875,
            176699384,
            176699501,
            176699739,
            176704430,
            176700303,
            176700238,
            176699124,
            176702452,
            176707386,
            176700133,
            176698867,
            176703708
        ],
        "A": [
            176712234,
            176698003,
            176697838,
            176697817,
            176697799,
            176697771,
            176697968,
            176697810,
            176698111,
            176698066,
            176699952,
            176697901,
            176698001,
            176697928,
            176699293,
            176697926,
            176697958,
            176697832,
            176698850
        ]
    },
    "name": "E. FTL",
    "statement": "Monocarp is playing a video game. In the game, he controls a spaceship\r\nand has to destroy an enemy spaceship.Monocarp has two lasers installed\r\non his spaceship. Both lasers 1 and 2 have two values: p_i the power of\r\nthe laser; t_i the reload time of the laser. When a laser is fully\r\ncharged, Monocarp can either shoot it or wait for the other laser to\r\ncharge and shoot both of them at the same time.An enemy spaceship has h\r\ndurability and s shield capacity. When Monocarp shoots an enemy\r\nspaceship, it receives (P - s) damage (i. e. (P - s) gets subtracted\r\nfrom its durability), where P is the total power of the lasers that\r\nMonocarp shoots (i. e. p_i if he only shoots laser i and p_1 + p_2 if he\r\nshoots both lasers at the same time). An enemy spaceship is considered\r\ndestroyed when its durability becomes 0 or lower.Initially, both lasers\r\nare zero charged.What\u2019s the lowest amount of time it can take Monocarp\r\nto destroy an enemy spaceship?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int p1, p2, h, s;\n    i64 t1, t2;\n    \n    std::cin >> p1 >> t1 >> p2 >> t2 >> h >> s;\n    \n    std::vector<i64> dp(h + 1);\n    dp[0] = 0;\n    for (int i = 1; i <= h; i++) {\n        dp[i] = std::min(dp[std::max(0, i - (p1 - s))] + t1, dp[std::max(0, i - (p2 - s))] + t2);\n        for (int j = 1; j <= i; j++) {\n            if (j * t1 >= t2) {\n                i64 dmg = (j - 1) * (p1 - s) + (j * t1 - t2) / t2 * (p2 - s) + (p1 + p2 - s);\n                dp[i] = std::min(dp[i], dp[std::max(0LL, i - dmg)] + j * t1);\n            }\n            if (j * t2 >= t1) {\n                i64 dmg = (j - 1) * (p2 - s) + (j * t2 - t1) / t1 * (p1 - s) + (p1 + p2 - s);\n                dp[i] = std::min(dp[i], dp[std::max(0LL, i - dmg)] + j * t2);\n            }\n        }\n    }\n    std::cout << dp[h] << \"\\n\";\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. FTL.json",
    "editorial_link": "https://codeforces.com//blog/entry/108153",
    "editorial": "At any time, we have three possible choices: wait and shoot the first\r\nlaser, the second laser and both lasers. Sometimes it makes sense to\r\nwait to both because you can deal more damage than you would do by\r\nshooting both lasers separately.The first claim: greedy won\u00e2\u0080\u0099t work.\r\nMaybe there is a sufficiently smart greedy, we weren\u00e2\u0080\u0099t able to come up\r\nwith it. The second claim: bruteforce won\u00e2\u0080\u0099t work. The funny thing is\r\nthat it actually worked on the constraints up to , but again, we\r\ncouldn\u00e2\u0080\u0099t code any sufficiently fast one for .Thus, let\u00e2\u0080\u0099s try some\r\ndynamic programming. Since all the times are huge, we\u00e2\u0080\u0099d want to avoid\r\nhaving them as the states. What is small, however, is the durability of\r\nthe enemy ship and the number of shots we have to make to destroy\r\nit.Ideally, we\u00e2\u0080\u0099d like to have some the smallest time to deal damage to\r\nthe enemy ship. This way, would be the answer. Sadly, it\u00e2\u0080\u0099s not\r\nimmediately clear how to get rid of reload times completely. There might\r\nbe states with different times until the charge with the same damage\r\ndealt, and we don\u00e2\u0080\u0099t know which of those we want to keep.Thus, let\u00e2\u0080\u0099s make\r\nthe dp state more complicated. Let be the smallest time it takes to deal\r\ndamage if the last shot was from both lasers at the same time. This way\r\nwe know the reload times of both lasers they are full and ., as moment\r\nhas both lasers zero charged as if after a shot.What are the\r\ntransitions? Well, now we have to shoot each laser multiple times, then\r\nwait until both are charged and shoot both. Both lasers can now be\r\nconsidered independent of each other.Let the time between the previous\r\ndouble shot and the next one be some value . During this time, it never\r\nmade sense to wait until shooting each laser. So we waited , shot the\r\nfirst laser, waited another , shot again, until we couldn\u00e2\u0080\u0099t shoot\r\nanymore, since the laser wouldn\u00e2\u0080\u0099t recharge in time before the double\r\nshot. Same for the second laser. Notice that if both and , then you\r\ncould just decrease by and shoot each laser the same number of times.\r\nThus, only that are multiples of either or are optimal.Thus, we can\r\niterate over all possible waiting times . Just iterate over and for all\r\nfrom to . Having a fixed , calculate the number of shots of each laser,\r\ncalculate the damage, go into the corresponding dp state.It could also\r\nhappen that the last shot before destroying the ship wasn\u00e2\u0080\u0099t a double\r\none. However, it still follows the same ideas. It means that each laser\r\nwas shooting non-stop until the ship was destroyed. Thus, the\r\ndestruction time is still a multiple of either of the reload\r\ntimes.Overall complexity: .\r\n"
}