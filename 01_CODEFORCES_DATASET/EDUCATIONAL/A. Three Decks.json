{
    "link": "https://codeforces.com//contest/2104/problem/A",
    "problemId": "3357537",
    "problem_idx": "A",
    "shortId": "2104A",
    "contest_number": "2104",
    "problem_submissions": {
        "G": [
            317634002,
            317631743,
            320673214,
            317636349,
            317639303,
            317631308,
            317640372,
            317641490,
            317634993,
            317623920,
            317623580,
            317647581,
            317646744,
            317640479,
            317649324,
            317648614,
            317603575,
            317625986,
            317658338,
            317654956,
            317656090
        ],
        "F": [
            317618453,
            317615339,
            317611576,
            317619502,
            317642933,
            317616740,
            317626825,
            317624444,
            317635700,
            317630227,
            317652195,
            317651366,
            317632460,
            317639846,
            317622626,
            317627252,
            317618955,
            317629645,
            317633465
        ],
        "E": [
            317600678,
            317604770,
            317604225,
            317601494,
            317605089,
            317605713,
            317610349,
            317606588,
            317606228,
            317611391,
            317609737,
            317616567,
            317624447,
            317604365,
            317605239,
            317606517,
            317605527,
            317603967
        ],
        "D": [
            317596832,
            317600994,
            317595577,
            317597224,
            317599585,
            317599131,
            317603322,
            317601392,
            317602519,
            317606339,
            317605002,
            317608223,
            317625926,
            317598715,
            317596708,
            317599445,
            317601363,
            317598919
        ],
        "C": [
            317592206,
            317594503,
            317591740,
            317592536,
            317595007,
            317592453,
            317599440,
            317596483,
            317666768,
            317597634,
            317597533,
            317596118,
            317603421,
            317628135,
            317593822,
            317592818,
            317594552,
            317594062,
            317592586
        ],
        "B": [
            317586512,
            317588149,
            317586474,
            317586748,
            317587897,
            317586575,
            317590393,
            317589124,
            317590519,
            317590566,
            317590505,
            317595035,
            317629001,
            317588704,
            317587930,
            317589549,
            317586793,
            317587862
        ],
        "A": [
            317583850,
            317584199,
            317583696,
            317583966,
            317584221,
            317583906,
            317584707,
            317583779,
            317583664,
            317586307,
            317586411,
            317589674,
            317629578,
            317583905,
            317584152,
            317583791,
            317583699,
            317583693
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142472",
    "editorial": "Let us assume that we have managed to make the number of cards equal.\r\nThen each deck contains cards. Since the total number of cards from the\r\nhasn’t changed, there were cards in total.This means that if is not\r\ndivisible by , the answer is definitely \"\".Otherwise, we know that ,\r\nwhich means . If the first or the second deck already has more cards\r\nthan , the answer is also \"\". Otherwise, we can move cards to the first\r\ndeck and cards to the second deck. Since , it’s enough to check if\r\n.Overall complexity: per test case.\r\n",
    "name": "A. Three Decks",
    "statement": "Monocarp placed three decks of cards in a row on the table. The first\r\ndeck consists of a cards, the second deck consists of b cards, and the\r\nthird deck consists of c cards, with the condition a < b < c.Monocarp\r\nwants to take some number of cards (at least one, but no more than c)\r\nfrom the deck and distribute them between the first two decks so that\r\neach of the taken cards ends up in either the first or the second deck.\r\nIt is possible that all the cards taken from the third deck will go into\r\nthe same deck.Your task is to determine whether Monocarp can make the\r\nnumber of cards in all three decks equal using the described operation.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Three Decks.json",
    "hint": []
}