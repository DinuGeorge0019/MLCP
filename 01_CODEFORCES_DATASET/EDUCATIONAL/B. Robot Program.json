{
    "link": "https://codeforces.com//contest/2070/problem/B",
    "problemId": "3233351",
    "problem_idx": "B",
    "shortId": "2070B",
    "contest_number": "2070",
    "problem_submissions": {
        "F": [
            308138412,
            308139598,
            308140261,
            308135086,
            308908838,
            308908402,
            308148058,
            308132721,
            308156502,
            308160384,
            308171018,
            308167755,
            308165459,
            308169840,
            308157047,
            308169763,
            308168481,
            308160062,
            308168693,
            308165415,
            308163695,
            308171178,
            308169858,
            308170143,
            308112373,
            308154384
        ],
        "E": [
            308118136,
            308123977,
            308115696,
            308119993,
            308121221,
            308160669,
            308139138,
            308136015,
            308135014,
            308127816,
            308146323,
            308144103,
            308131271,
            308145219,
            308126468,
            308144951,
            308131787,
            308146433,
            308129269,
            308170336
        ],
        "D": [
            308106225,
            308103599,
            308103669,
            308108885,
            308112445,
            308106317,
            308115443,
            308108990,
            308111970,
            308115191,
            308111541,
            308110510,
            308111609,
            308122150,
            308114708,
            308128882,
            308117643,
            308118502,
            308133018,
            308115402
        ],
        "C": [
            308100859,
            308098324,
            308098879,
            308109896,
            308106577,
            308101095,
            308107090,
            308102322,
            308104592,
            308108143,
            308104331,
            308111140,
            308106216,
            308114471,
            308109710,
            308123284,
            308111358,
            308110052,
            308140320,
            308124878
        ],
        "B": [
            308096187,
            308093094,
            308093408,
            308096114,
            308095735,
            308094203,
            308101217,
            308098141,
            308098911,
            308093342,
            308098262,
            308097763,
            308099852,
            308108770,
            308099377,
            308099819,
            308097452,
            308104146,
            308143559,
            308098413
        ],
        "A": [
            308091489,
            308091216,
            308091213,
            308091721,
            308091212,
            308091326,
            308095453,
            308091596,
            308092398,
            308091301,
            308091697,
            308091411,
            308091275,
            308091454,
            308091384,
            308091843,
            308091304,
            308091461,
            308145036,
            308091695
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/140146",
    "editorial": "Letâ€™s simulate the process until either the command sequence terminates\r\nor the robot reaches the point .If the sequence ends and the robot is\r\nnot at , then the answer to the problem is .Otherwise, we need to check\r\nwhether the robot can return to the point if we begin executing commands\r\nagain. We can simply iterate through the sequence and record the first\r\ntime the robot returns to the point . If no such time exists, then the\r\nanswer to the problem is . Otherwise, this loop (from to ) will continue\r\nuntil time expires. In this case, the answer is , where is the remaining\r\ntime after the first hit of the point , and is the time required for the\r\nrobot to return to the same position from the point .\r\n",
    "name": "B. Robot Program",
    "statement": "There is a robot on the coordinate line. Initially, the robot is located\r\nat the point x (x\r\nne 0). The robot has a sequence of commands of length n consisting of\r\ncharacters, where represents a move to the left by one unit (from point\r\np to point (p-1)) and represents a move to the right by one unit (from\r\npoint p to point (p+1)).The robot starts executing this sequence of\r\ncommands (one command per second, in the order they are presented).\r\nHowever, whenever the robot reaches the point 0, the counter of executed\r\ncommands is reset (i. e. it starts executing the entire sequence of\r\ncommands from the very beginning). If the robot has completed all\r\ncommands and is not at 0, it stops.Your task is to calculate how many\r\ntimes the robot will enter the point 0 during the next k seconds.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Robot Program.json",
    "hint": []
}