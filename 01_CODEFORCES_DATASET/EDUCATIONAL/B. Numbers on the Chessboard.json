{
    "link": "https://codeforces.com//contest/1027/problem/B",
    "problemId": "209489",
    "problem_idx": "B",
    "shortId": "1027B",
    "contest_number": "1027",
    "problem_submissions": {
        "G": [
            41777591,
            41794075,
            41789651,
            41795096,
            41939341,
            41938165,
            41796137,
            42098879,
            42133042
        ],
        "E": [
            41771294,
            41773308,
            41779379,
            41769311,
            41773946,
            41775704,
            41772136,
            41773355,
            41779847,
            41781989,
            41784347,
            41777571,
            41784573,
            41777063,
            41778773,
            41776995,
            41786639,
            41778631,
            41778849,
            41779109
        ],
        "F": [
            41768065,
            41785375,
            41776031,
            41777064,
            64515193,
            41778051,
            41781324,
            41779089,
            41778653,
            41776480,
            41776867,
            41774399,
            41778108,
            41783735,
            41779480,
            41782813,
            41784214,
            42675272,
            42673408,
            41785662,
            41778618,
            41786449,
            41792717,
            41792403,
            41790072,
            41787559,
            41785600
        ],
        "D": [
            41766114,
            41769377,
            41772019,
            41765799,
            41768093,
            41767980,
            41769938,
            41769777,
            41767951,
            41766660,
            41768756,
            41770224,
            41770243,
            41773173,
            41773790,
            41772403,
            41773900,
            41774900,
            41773430,
            41773585
        ],
        "C": [
            41765079,
            41766031,
            41768208,
            41764342,
            41765993,
            41765549,
            41767982,
            41768445,
            41764158,
            41772730,
            41766169,
            41767810,
            41767876,
            41767390,
            41770932,
            41768551,
            41769543,
            41768596,
            41768222,
            41768699,
            41769864,
            41769626
        ],
        "B": [
            41762630,
            41763189,
            41765301,
            41762037,
            41763563,
            41762756,
            41764132,
            41765033,
            41765562,
            41762467,
            41763527,
            41764762,
            41763245,
            41763720,
            41763112,
            41766236,
            41764943,
            41765112,
            41765051,
            41766842
        ],
        "A": [
            41761297,
            41761064,
            41763316,
            41761011,
            41761231,
            41761105,
            41761008,
            41761632,
            41761600,
            41761296,
            41761079,
            41761346,
            41761160,
            41761251,
            41761159,
            41761563,
            41761142,
            41761529,
            41761274,
            41764617
        ]
    },
    "name": "B. Numbers on the Chessboard",
    "statement": "You are given a chessboard of size n\r\ntimes n. It is filled with numbers from 1 to n^2 in the following way:\r\nthe first\r\nlceil\r\nfrac{n^2}{2}\r\nrceil numbers from 1 to\r\nlceil\r\nfrac{n^2}{2}\r\nrceil are written in the cells with even sum of coordinates from left to\r\nright from top to bottom. The rest n^2 -\r\nlceil\r\nfrac{n^2}{2}\r\nrceil numbers from\r\nlceil\r\nfrac{n^2}{2}\r\nrceil + 1 to n^2 are written in the cells with odd sum of coordinates\r\nfrom left to right from top to bottom. The operation\r\nlceil\r\nfrac{x}{y}\r\nrceil means division x by y rounded up.For example, the left board on\r\nthe following picture is the chessboard which is given for n=4 and the\r\nright board is the chessboard which is given for n=5. You are given q\r\nqueries. The i-th query is described as a pair x_i, y_i. The answer to\r\nthe i-th query is the number written in the cell x_i, y_i (x_i is the\r\nrow, y_i is the column). Rows and columns are numbered from 1 to n.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define mp make_pair\n\nll n;\n\nvoid solve() {\n\tll x, y;\n\tscanf(\"%lld%lld\", &x, &y);\n\tx--;y--;\n\tll ans = 0;\n\tif ((x + y) % 2 == 0) {\n\t\tans += (x / 2) * n;\n\t\tif (x % 2 == 0) {\n\t\t} else {\n\t\t\tans += (n + 1) / 2;\n\t\t}\n\t\tans += y / 2;\n\t} else {\n\t\tans += (n * n + 1) / 2;\n\t\tans += (x / 2) * n;\n\t\tif (x % 2 == 0) {\n\n\t\t} else {\n\t\t\tans += n / 2;\n\t\t}\n\t\tans += y / 2;\n\t}\n\tprintf(\"%lld\\n\", ans + 1);\n}\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint q;\n\tscanf(\"%lld%d\", &n, &q);\n\twhile(q--) solve();\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\B. Numbers on the Chessboard.json",
    "editorial_link": "https://codeforces.com//blog/entry/61311",
    "editorial": "Let\u00e2\u0080\u0099s see the following fact: if we will decrease from all numbers\r\nwritten in cells with an odd sum of coordinates and write out the\r\nnumbers obtained on the board from left to right from top to bottom, the\r\nsequence will looks like for even (for odd there is only one number at\r\nthe end of the sequence, but, in general, it does not matter).Let\u00e2\u0080\u0099s try\r\nto find out the answer for some query (). Let (1-indexed). There is the\r\nposition of our cell in order of the written sequence. The first\r\napproximation of the answer is . But now we are remember that we\r\ndecreased from all numbers written in cells with an odd sum of\r\ncoordinates. So if is even then the answer is , otherwise the answer is\r\n. Note that you should be careful with integer overflow in C++, Java or\r\nsimilar languages. 64-bit datatype is quite enough.Time complexity: .\r\n"
}