{
    "link": "https://codeforces.com//contest/1217/problem/A",
    "problemId": "404643",
    "problem_idx": "A",
    "shortId": "1217A",
    "contest_number": "1217",
    "problem_submissions": {
        "F": [
            60119255,
            60118536,
            60117179,
            60112264,
            60128130,
            60127503,
            60126918,
            60123155,
            60108293,
            60125049,
            60146948,
            60128055,
            60130824,
            60133706,
            60133628,
            60133577,
            60133431,
            60148111,
            60128465,
            60130939,
            60194071,
            60161365,
            60161338,
            60161260,
            60133265,
            60131839
        ],
        "E": [
            60105066,
            60116418,
            60106390,
            60121938,
            60108304,
            60146942,
            60108305,
            60105389,
            60107537,
            60103856,
            60133910,
            60133496,
            60106424,
            60108802,
            60109228,
            60105208,
            60109038,
            60113612,
            60109155,
            60108937,
            60108739,
            60185912,
            60121211,
            60119745
        ],
        "D": [
            60093380,
            60096462,
            60101910,
            60101769,
            60146935,
            60099412,
            60094151,
            60095526,
            60100622,
            60098634,
            60099130,
            60111816,
            60100421,
            60093903,
            60100608,
            60099424,
            60113888,
            60106298,
            60107083
        ],
        "C": [
            60088873,
            60091347,
            60096256,
            60097679,
            60146931,
            60089815,
            60086473,
            60091850,
            60090230,
            60091598,
            60096228,
            60090577,
            60097512,
            60091408,
            60091681,
            60095632,
            60094356,
            60083533,
            60095174
        ],
        "B": [
            60085129,
            60084473,
            60090224,
            60089598,
            60146927,
            60087277,
            60084144,
            60085003,
            60086682,
            60087576,
            60086106,
            60085538,
            60094264,
            60087892,
            60094300,
            60089353,
            60089039,
            60094083,
            60086577
        ],
        "A": [
            60083114,
            60082761,
            60084492,
            60083647,
            60146918,
            60083293,
            60082871,
            60082868,
            60082958,
            60082935,
            60083622,
            60083726,
            60084591,
            60083527,
            60083900,
            60086802,
            60083832,
            60082824,
            60083536
        ]
    },
    "name": "A. Creating a Character",
    "statement": "You play your favourite game yet another time. You chose the character\r\nyou didn\u2019t play before. It has str points of strength and int points of\r\nintelligence. Also, at start, the character has exp free experience\r\npoints you can invest either in strength or in intelligence (by\r\ninvesting one point you can either raise strength by 1 or raise\r\nintelligence by 1).Since you\u2019d like to make some fun you want to create\r\na jock character, so it has more strength than intelligence points\r\n(resulting strength is than the resulting intelligence).Calculate the\r\nnumber of different character builds you can create (for the purpose of\r\nreplayability) if you must . Two character builds are different if their\r\nstrength and/or intellect are different.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define fs first\n#define se second\n#define y0 qwertyuiop\n#define y1 asdfghjkl\n\n/*\nAuthor : Tropical_maid\nCreated : 2019/09/05, 23:35:47\n*/\n\nusing namespace std;\ntypedef long long llong;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef pair<llong, llong> pll;\n\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T;\n    cin >> T;\n    while (T--) {\n        int st, in, ex;\n        cin >> st >> in >> ex;\n        int s = 0, e = ex + 1;\n        while (s < e) {\n            int m = (s + e) / 2;\n            if (st + m > in + ex - m) e = m;\n            else s = m + 1;\n        }\n        if (s > ex) printf(\"0\\n\");\n        else printf(\"%d\\n\", ex - s + 1);\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Creating a Character.json",
    "editorial_link": "https://codeforces.com//blog/entry/69605",
    "editorial": "Let and be number of free points that we invest in the strength and\r\nintelligence respectively. It\u00e2\u0080\u0099s obvious that since we must spend all\r\nfree points. From the other side we must make .Now we can expess and put\r\nit in the inequality: Since must be non negative we can get We can use\r\nor write the correct ceiling function that works with negative numerator\r\nor use one hack and magic and get with usual integer division. Let\u00e2\u0080\u0099s\r\ndenote this value as .Since all integer values from are good for us, so\r\nthe number of pairs is equal to .P.S.: Let me explain how to prove that\r\nis equal to . P.P.S.: Interesting fact: the formula above works for all\r\npositive and thats why it works in our case even though can be negative.\r\n"
}