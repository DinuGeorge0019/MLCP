{
    "link": "https://codeforces.com//contest/1082/problem/E",
    "problemId": "64167",
    "problem_idx": "E",
    "shortId": "1082E",
    "contest_number": "1082",
    "problem_submissions": {
        "F": [
            46328946,
            46337799,
            46339884,
            46346150,
            46445422,
            46359069,
            46431759,
            46637242,
            46637151,
            46325175,
            46338896,
            46409182
        ],
        "G": [
            46323996,
            46323275,
            46334802,
            46323141,
            46326108,
            46329586,
            46321808,
            163694400,
            163693799,
            46332091,
            46330084,
            46336228,
            46329478,
            46334035,
            46334852,
            46340605,
            46341989,
            46332446,
            46341097,
            46318296,
            46328921,
            46335428
        ],
        "E": [
            46318513,
            46330600,
            46328796,
            46321883,
            46324879,
            46325643,
            46324793,
            46322771,
            46328316,
            46332015,
            46327943,
            46323542,
            46327890,
            46325362,
            46330431,
            46320019,
            46338363,
            46322189,
            46331138
        ],
        "D": [
            46316454,
            46320831,
            46325078,
            46317954,
            46322179,
            46323264,
            46336380,
            46328840,
            46322602,
            46323491,
            46324308,
            46330072,
            46325620,
            46329576,
            46325051,
            46330163,
            46325538,
            46319965,
            46324331
        ],
        "C": [
            46314364,
            46317118,
            46317698,
            46315803,
            46318057,
            46319400,
            46316833,
            46317944,
            46317349,
            46317946,
            46320711,
            46318098,
            46319780,
            46320328,
            46319548,
            46328045,
            46319609,
            46315734,
            46318281
        ],
        "B": [
            46313723,
            46315264,
            46315248,
            46314114,
            46315542,
            46315654,
            46315306,
            46315753,
            46315155,
            46315310,
            46317088,
            46316030,
            46316402,
            46316343,
            46315252,
            46358458,
            46314954,
            46314579,
            46315821
        ],
        "A": [
            46313553,
            46313861,
            46313655,
            46313685,
            46313732,
            46313657,
            46313638,
            46313650,
            46313676,
            46313977,
            46315097,
            46313735,
            46314264,
            46315003,
            46313777,
            46326534,
            46313605,
            46313586,
            46314557
        ]
    },
    "name": "E. Increasing Frequency",
    "statement": "You are given array a of length n. You can choose one segment [l, r] (1\r\nle l\r\nle r\r\nle n) and integer value k (positive, negative or even zero) and change\r\na_l, a_{l + 1},\r\ndots, a_r by k each (i.e. a_i := a_i + k for each l\r\nle i\r\nle r).What is the maximum possible number of elements with value c that\r\ncan be obtained after one such operation?\r\n",
    "solutions": [
        "/*\nFeel so good I feel so fine\nLove that little lady always on my mind\nGives me lovin' every night and day\nNever gonna leave her, never goin' away\n\nSomeone to love me\nYou know she makes me feel alright\nSomeone who needs me\nLove me every single night\n\nFeel so happy since I met that girl\nWhen we're making love it's something out of this world\n\nFeels so good to know that she's all mine\nGoing to love that woman 'til the end of time\n\nSomeone to live for\nLove me 'til the end of time\nMakes me feel happy\nGood to know that she's all mine\n\nLovely lady make love all night long\nLovely lady never do me wrong\nI don't wanna leave ya\nI never wanna leave ya,\nanymore no more\nLovely lady, mystifying eyes\nLovely lady, she don't tell me no lies\nI know I'll never leave ya\nI'm never gonna leave ya anymore no more\n*/\n\n#pragma GCC optimize(\"O3\")\n#define _CRT_SECURE_NO_WARNINGS\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <complex>\n#include <math.h>\n#include <set>\n#include <vector>\n#include <map>\n#include <queue>\n#include <stdio.h>\n#include <stack>\n#include <algorithm>\n#include <list>\n#include <ctime>\n\n#include <memory.h>\n#include <assert.h>\n\n#define y0 sdkfaslhagaklsldk\n\n#define y1 aasdfasdfasdf\n#define yn askfhwqriuperikldjk\n#define j1 assdgsdgasghsf\n#define tm sdfjahlfasfh\n#define lr asgasgash\n#define norm asdfasdgasdgsd\n#define have adsgagshdshfhds\n#define ends asdgahhfdsfshdshfd\n#define prev asdgSHJsfgsdfhdsh\n#define hash asdgasdgasdgdfrywewery\n\n#define eps 1e-8\n#define M_PI 3.141592653589793\n#define bsize 512\n\n#define ldouble long double\nusing namespace std;\n\n#define bs 1000000007\n\nconst int N = 600031;\n\nint n,C,ar[N],pref[N],suf[N];\nint last_entry[N],best_pref[N];\nint ans;\n\nint main(){\n//\tfreopen(\"apache.in\",\"r\",stdin);\n//\tfreopen(\"apache.out\",\"w\",stdout);\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\tios_base::sync_with_stdio(0);\n\t//cin.tie(0);\n\n\tcin>>n>>C;\n\n\tfor (int i=1;i<=n;i++){\n\t\tcin>>ar[i];\n\t\tpref[i]=pref[i-1];\n\t\tif (ar[i]==C)\n\t\t\tpref[i]++;\n\t}\n\n\tfor (int i=n;i>=1;--i){\n\t\tsuf[i]=suf[i+1];\n\t\tif (ar[i]==C)\n\t\t\tsuf[i]++;\n\t}\n\n\tfor (int i=1;i<=n;i++){\n\t\tbest_pref[i]=pref[i-1]+1;\n\t\tint le=last_entry[ar[i]];\n\t\tif (le>0)\n\t\t\tbest_pref[i]=max(best_pref[i],best_pref[le]+1);\n\t\tlast_entry[ar[i]]=i;\n\t}\n\n\tfor (int i=1;i<=n;i++){\n\t\tans=max(ans,best_pref[i]+suf[i+1]);\n\t}\n\tcout<<ans<<endl;\n\n//\tcin.get(); cin.get();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp",
        "greedy"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Increasing Frequency.json",
    "editorial_link": "https://codeforces.com/blog/entry/63544",
    "editorial": "Let be a number of occurrences of number in subsegment .The given task\r\nis equivalent to choosing and value such that is maximum possible. But\r\nwith some transformations so we need to maximize .Key observation is the\r\nnext: if we fix some value then we can shrink each segment between\r\nconsecutive occurrences of in one element with weight equal to . Then we\r\nneed just to find subsegment with maximal sum the standard task which\r\ncan be solved in .Finally, total complexity is .\r\n",
    "hint": []
}