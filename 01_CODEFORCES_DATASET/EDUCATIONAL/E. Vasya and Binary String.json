{
    "link": "https://codeforces.com//contest/1107/problem/E",
    "problemId": "288738",
    "problem_idx": "E",
    "shortId": "1107E",
    "contest_number": "1107",
    "problem_submissions": {
        "E": [
            49013467,
            49008460,
            49012396,
            49006242,
            49008619,
            49017766,
            49019000,
            49012372,
            49011583,
            176420718,
            49013181,
            49015268,
            49018364,
            49014306,
            49015741,
            49004388,
            48997380,
            49015240,
            49002659,
            49009546,
            49008550
        ],
        "G": [
            49011365,
            49010194,
            49016397,
            49014169,
            49016073,
            49011313,
            49010209,
            49025351,
            49022889,
            49019588,
            49010516,
            49020197,
            49021008,
            49020053,
            49017813,
            49036704,
            49020211,
            49015481,
            49030126
        ],
        "F": [
            49008073,
            49012089,
            49021192,
            49015026,
            49017918,
            49019060,
            49366532,
            49825656,
            49825549,
            49021809
        ],
        "D": [
            48997651,
            49010674,
            49008906,
            49001237,
            49051114,
            49002152,
            49005979,
            49003643,
            49005670,
            49006757,
            49005502,
            49007559,
            49006488,
            49007684,
            49005318,
            49010907,
            49009162,
            49010914,
            49006671,
            49005756,
            49006449
        ],
        "C": [
            48994637,
            48998923,
            49003509,
            48997020,
            48998710,
            48997908,
            49002063,
            48998329,
            49002178,
            48999947,
            49000421,
            49004011,
            49003004,
            48998353,
            49007207,
            49005313,
            48999254,
            49018676,
            49000412,
            49000294
        ],
        "B": [
            48993730,
            48996062,
            48998013,
            48994172,
            48995232,
            48997773,
            48995013,
            48998484,
            48995876,
            48996083,
            48994456,
            48998645,
            48994729,
            48997378,
            49001444,
            48995542,
            49016049,
            48995486,
            48997049
        ],
        "A": [
            48993686,
            48993925,
            48994361,
            48993741,
            48994038,
            48994065,
            48994006,
            48996736,
            48994321,
            48994290,
            48993884,
            48994319,
            48994054,
            48994165,
            49000099,
            48993805,
            49017652,
            48993935,
            48993923
        ]
    },
    "name": "E. Vasya and Binary String",
    "statement": "Vasya has a string s of length n consisting only of digits and . Also he\r\nhas an array a of length n. Vasya performs the following operation until\r\nthe string becomes empty: choose some substring of , erase it from the\r\nstring and glue together the remaining parts (any of them can be empty).\r\nFor example, if he erases substring from string he will get the string .\r\nVasya gets a_x points for erasing substring of length x.Vasya wants to\r\nmaximize his total points, so help him with this!\r\n",
    "solutions": [
        "#ifndef BZ\n#pragma GCC optimize \"-O3\"\n#endif\n#include <bits/stdc++.h>\n\n#define FASTIO\n#define ALL(v) (v).begin(), (v).end()\n#define rep(i, l, r) for (int i = (l); i < (r); ++i)\n\n#ifdef FASTIO\n#define scanf abacaba\n#define printf abacaba\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\nusing namespace std;\n\nconst int MX = 107;\nconst ll INF = 1e18;\n\nstring s;\nint a[MX];\nll c[MX];\nll f[MX][MX];\nll g[MX][MX];\n\nvoid cg() {\n    for (int i = 0; i < MX; i++) {\n        for (int j = 0; j < MX; j++) {\n            g[i][j] = -INF;\n        }\n    }\n}\n\nint main() {\n#ifdef FASTIO\n    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n#endif\n    int n;\n    cin >> n;\n    cin >> s;\n    s = '$' + s;\n    for (int i = 1; i <= n; i++) {\n        cin >> a[i];\n    }\n    for (int i = 1; i <= n; i++) {\n        c[i] = a[i];\n        for (int j = 1; j <= i; j++) {\n            c[i] = max(c[i], c[j] + c[i - j]);\n        }\n    }\n\n    for (int l = n; l >= 1; l--) {\n        for (int d = 0; d < 2; d++) {\n            cg();\n            g[l - 1][0] = 0;\n            for (int i = l - 1; i + 1 <= n; i++) {\n                for (int j = 0; j <= n; j++) {\n                    if (s[i + 1] - '0' == d) {\n                        g[i + 1][j + 1] = max(g[i + 1][j + 1], g[i][j]);\n                    }\n                    for (int k = i + 1; k <= n; k++) {\n                        g[k][j] = max(g[k][j], g[i][j] + f[i + 1][k]);\n                    }\n                }\n            }\n            for (int r = l; r <= n; r++) {\n                for (int i = 0; i <= n; i++) {\n                    f[l][r] = max(f[l][r], g[r][i] + c[i]);\n                }\n            }\n        }\n    }\n\n    cout << f[1][n] << \"\\n\";\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\E. Vasya and Binary String.json",
    "editorial_link": "https://codeforces.com//blog/entry/64833",
    "editorial": "We set up a DP on (start index, end index, number of consecutive digits\r\nmatching our start index). In other words, the current string we are\r\nsolving is the substring from start index to end index, plus some number\r\nof additional digits (all equal to S[start]) added as a prefix to our\r\nsubstring. We then have two choices from any given state: The runtime is\r\n, with a very good constant factor. Code: 49036191 Does anybody have ?\r\n",
    "hint": []
}