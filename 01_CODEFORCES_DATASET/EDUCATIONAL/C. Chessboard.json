{"link": "https://codeforces.com//contest/961/problem/C", "problemId": "171414", "problem_idx": "C", "shortId": "961C", "contest_number": "961", "problem_submissions": {"G": [36970557, 36961677, 36955373, 36966255, 36968767, 36972374, 36973392, 36957451, 36991516, 36977772, 37364242, 37112264, 37103114], "F": [36962483, 58125816, 58125730, 36966139, 36964087, 37005545, 36970234, 36973408, 36969033, 36991746, 37364493, 37112764], "E": [36956673, 36957355, 36966375, 36957711, 36958527, 36964823, 36966940, 36964605, 36962819, 36970706, 36966486, 36958105, 36958693, 36959772, 36960024, 36961569, 36960764, 36960481, 36957668, 36960105], "D": [36955388, 36956052, 36969754, 36955080, 36956362, 36961025, 36963713, 36962592, 36966993, 36973138, 36969906, 36956687, 36956700, 36954860, 36958377, 36958046, 36957936, 36957484, 36960554, 36961499], "C": [36953672, 36954711, 36971159, 36953758, 36954957, 36955003, 36960223, 36959774, 36965066, 36959731, 36967876, 36954453, 36954510, 36957051, 36956228, 36956460, 36956413, 36954603, 36954325, 36955697], "B": [36952423, 36952593, 36971775, 36952372, 36952637, 36953362, 36954152, 36957455, 36960770, 36955533, 36967266, 36952701, 36952953, 36954148, 36953570, 36952980, 36953956, 36952386, 36952552, 36953095], "A": [36951806, 36951845, 36972158, 36951809, 36951933, 36951849, 36952464, 36956565, 36959860, 36954250, 36966810, 36951886, 36952011, 36951975, 36952180, 36951811, 36952978, 36951822, 36951814, 36951906]}, "name": "C. Chessboard", "statement": "Magnus decided to play a classic chess game. Though what he saw in his\r\nlocker shocked him! His favourite chessboard got broken into pieces,\r\neach of size by , is . And what\u2019s even worse, some squares were of wrong\r\ncolor. -th square of the -th row of -th piece of the board has color ;\r\nbeing black and being white. Now Magnus wants to change color of some\r\nsquares in such a way that he recolors minimum number of squares and\r\nobtained pieces form a valid chessboard. Every square has its color\r\ndifferent to each of the neightbouring by side squares in a valid board.\r\nIts size should be by . You are allowed to move pieces but .\r\n", "solutions": ["#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:336777216\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n\ntypedef tuple<int, int, int> t3;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\n\nint IT_MAX = 1 << 17;\nint MOD = 1000000007;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 0x3f3f3f3f3f3f3f3f;\nconst db PI = acos(-1);\nconst db ERR = 1e-10;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<n;i++)\n#define Se second\n#define Fi first\n\nchar in[4][105][105];\nchar cur[205][205];\n\nint u[4];\nint main() {\n\tint N, i, j, k;\n\tscanf(\"%d\", &N);\n\tfor (i = 0; i < 4; i++) for (j = 0; j < N; j++) scanf(\"%s\", in[i][j]);\n\n\tfor (i = 0; i < 4; i++) u[i] = i;\n\n\tint ans = INF;\n\tdo {\n\t\tfor (i = 0; i < 4; i++) {\n\t\t\tfor (j = 0; j < N; j++) for (k = 0; k < N; k++) cur[(i / 2)*N + j][(i % 2)*N + k] = in[u[i]][j][k];\n\t\t}\n\t\t\n\t\tint cnt = 0;\n\t\tfor (i = 0; i < 2 * N; i++) {\n\t\t\tfor (j = 0; j < 2 * N; j++) {\n\t\t\t\tchar c = '0' + (i + j) % 2;\n\t\t\t\tif (c != cur[i][j]) cnt++;\n\t\t\t}\n\t\t}\n\t\tans = min(ans, cnt);\n\t} while (next_permutation(u, u + 4));\n\treturn !printf(\"%d\\n\", ans);\n}"], "input": "", "output": "", "tags": ["bitmasks", "brute force", "implementation"], "dificulty": "1400", "interactive": false}