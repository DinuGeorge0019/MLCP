{
    "link": "https://codeforces.com//contest/1651/problem/A",
    "problemId": "1324096",
    "problem_idx": "A",
    "shortId": "1651A",
    "contest_number": "1651",
    "problem_submissions": {
        "C": [
            149173723,
            149105792,
            149117381,
            149152549,
            149106514,
            149108421,
            149108464,
            149108635,
            149109429,
            149110791,
            149109777,
            149108515,
            149109773,
            149111699,
            149114619,
            149106949,
            149113559,
            149129766
        ],
        "F": [
            149161364,
            149158834,
            149161121,
            149123303,
            149175934,
            149179491,
            191725924,
            149575413
        ],
        "E": [
            149139170,
            149130164,
            149147455,
            149137360,
            149140976,
            149145909,
            149141908,
            149139460,
            149147248,
            149148678,
            149156290,
            149148881,
            149154274,
            149143485,
            149163314,
            149138047,
            149159145
        ],
        "D": [
            149127559,
            149163309,
            149150118,
            149115060,
            149119439,
            149116468,
            149116651,
            149118386,
            149120734,
            149121740,
            149119776,
            149192081,
            149191968,
            149191879,
            149191841,
            149191815,
            149191600,
            149191163,
            149191124,
            149128435,
            149129157,
            149129578,
            149116059,
            149145989,
            149116064
        ],
        "B": [
            149098208,
            149096317,
            149154308,
            149094973,
            149099387,
            149095439,
            149099190,
            149096388,
            149097486,
            149098725,
            149098039,
            149097903,
            149102336,
            149093030,
            149096020,
            149099865,
            149101390
        ],
        "A": [
            149092351,
            149091868,
            149155144,
            149091621,
            149091628,
            149091655,
            149091686,
            149091765,
            149091751,
            149092326,
            149091819,
            149092231,
            149094932,
            149091603,
            149091630,
            149091669,
            149092684
        ]
    },
    "name": "A. Playoff",
    "statement": "Consider a playoff tournament where 2^n athletes compete. The athletes\r\nare numbered from 1 to 2^n.The tournament is held in n stages. In each\r\nstage, the athletes are split into pairs in such a way that each athlete\r\nbelongs exactly to one pair. In each pair, the athletes compete against\r\neach other, and exactly one of them wins. The winner of each pair\r\nadvances to the next stage, the athlete who was defeated gets eliminated\r\nfrom the tournament.The pairs are formed as follows: in the first stage,\r\nathlete 1 competes against athlete 2; 3 competes against 4; 5 competes\r\nagainst 6, and so on; in the second stage, the winner of the match \"1 2\"\r\ncompetes against the winner of the match \"3 4\"; the winner of the match\r\n\"5 6\" competes against the winner of the match \"7 8\", and so on; the\r\nnext stages are held according to the same rules. When athletes x and y\r\ncompete, the winner is decided as follows: if x+y is odd, the athlete\r\nwith the lower index wins (i. e. if x < y, then x wins, otherwise y\r\nwins); if x+y is even, the athlete with the higher index wins. The\r\nfollowing picture describes the way the tournament with n = 3 goes. Your\r\ntask is the following one: given the integer n, determine the index of\r\nthe athlete who wins the tournament.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\n#pragma GCC optimize (\"O3\")\n#pragma GCC target (\"sse4\")\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n \ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<ld,ld> pd;\n \ntypedef vector<int> vi;\ntypedef vector<ld> vd;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\ntypedef vector<pl> vpl;\ntypedef vector<cd> vcd;\n\ntemplate<class T> using pq = priority_queue<T>;\ntemplate<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;\n \n#define FOR(i, a, b) for (int i=a; i<(b); i++)\n#define F0R(i, a) for (int i=0; i<(a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n#define trav(a,x) for (auto& a : x)\n#define uid(a, b) uniform_int_distribution<int>(a, b)(rng)\n \n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n#define ins insert\n\ntemplate<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\ntemplate<class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\n \nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\nvoid __print(int x) {cerr << x;}\nvoid __print(long x) {cerr << x;}\nvoid __print(long long x) {cerr << x;}\nvoid __print(unsigned x) {cerr << x;}\nvoid __print(unsigned long x) {cerr << x;}\nvoid __print(unsigned long long x) {cerr << x;}\nvoid __print(float x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(long double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\n\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << \", \"; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \", \" : \"\"), __print(i); cerr << \"}\";}\nvoid _print() {cerr << \"]\\n\";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\n#ifdef DEBUG\n#define dbg(x...) cerr << \"\\e[91m\"<<__func__<<\":\"<<__LINE__<<\" [\" << #x << \"] = [\"; _print(x); cerr << \"\\e[39m\" << endl;\n#else\n#define dbg(x...)\n#endif\n\n\nconst int MOD = 1000000007;\nconst char nl = '\\n';\nconst int MX = 100001; \n\nvoid solve() {\n    int N; cin >> N;\n    cout << (1ll << N) - 1 << nl;\n}\n \nint main() {\n    cin.tie(0)->sync_with_stdio(0); \n    cin.exceptions(cin.failbit);\n\n    int T = 1;\n    cin >> T;\n    while(T--) {\n        solve();\n    }\n\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\EDUCATIONAL\\A. Playoff.json",
    "editorial_link": "https://codeforces.com//blog/entry/100796",
    "editorial": "During the first stage, every player with an even index competes against\r\na player with an odd index, so in each match during the first stage, the\r\nplayer whose index is smaller wins. The pairs are formed in such a way\r\nthat, in each pair, the player with an odd index has smaller index, so\r\nall players with even indices get eliminated, and all players with odd\r\nindices advance to the next stage.All of the remaining matches are\r\nbetween players with odd indices, so the winner of each match is the\r\nplayer with the larger index. So, the overall winner of the tournament\r\nis the player with the greatest odd index, which is .Note: in some\r\nlanguages (for example, C++), standard power functions work with\r\nfloating-point numbers instead of integers, so they will produce the\r\nanswer as a floating-point number (which may lead to wrong formatting of\r\nthe output and/or calculation errors). You might have to implement your\r\nown power function that works with integers, or compute using a loop.\r\n",
    "hint": []
}