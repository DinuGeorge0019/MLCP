{
    "link": "https://codeforces.com//contest/875/problem/C",
    "problemId": "128560",
    "problem_idx": "C",
    "shortId": "875C",
    "contest_number": "875",
    "problem_submissions": {
        "E": [
            31401553,
            31405129,
            31392967,
            31402730,
            31406263,
            31406095,
            31408958,
            31406910,
            31404200,
            32046810,
            31410002,
            31402646,
            31408382,
            31408030,
            31409057,
            31407519,
            31408444,
            31409422,
            31410812
        ],
        "F": [
            31398084,
            31399145,
            31396559,
            31395380,
            31403081,
            31400082,
            31403804,
            31406312,
            31396246,
            31399556,
            31401521,
            31404590,
            31400144,
            31400447,
            31405585,
            31400568,
            31400491
        ],
        "D": [
            31396611,
            31396495,
            31401963,
            31398464,
            31393353,
            31401930,
            31397316,
            31400838,
            31400178,
            31401960,
            31405520,
            31403500,
            31399600,
            31393212,
            31397813,
            31402582,
            31404085,
            31402819
        ],
        "C": [
            31393812,
            31393863,
            31406345,
            31407198,
            31398483,
            31396625,
            31396317,
            31397236,
            31394681,
            31407238,
            31393913,
            31402010,
            31410726,
            31409259,
            31398396,
            31400696,
            31397975
        ],
        "B": [
            31389883,
            31401063,
            31407394,
            31393529,
            31395934,
            31391146,
            31390806,
            31391837,
            31403535,
            31403703,
            31396960,
            31396617,
            31395546,
            31393934,
            31392682,
            31393141,
            31391081
        ],
        "A": [
            31388853,
            31388828,
            31407811,
            31389006,
            31389634,
            31389036,
            31388899,
            31388792,
            31388831,
            31388861,
            31388768,
            31390308,
            31389965,
            31388888,
            31389164,
            31388787,
            31388820
        ]
    },
    "name": "C. National Property",
    "statement": "You all know that the Library of Bookland is the largest library in the\r\nworld. There are dozens of thousands of books in the library.The\r\nalphabet of Bookland is so large that its letters are denoted by\r\npositive integers. Each letter can be small or large, the large version\r\nof a letter is denoted by . BSCII encoding, which is used everywhere in\r\nBookland, is made in that way so that large letters are presented in the\r\norder of the numbers they are denoted by, and small letters are\r\npresented in the order of the numbers they are denoted by, but all large\r\nletters are all small letters. For example, the following conditions\r\nhold: , , .A word is not greater than if one of the two following\r\nconditions holds: and , i.e. the first word is the prefix of the second\r\nword; there is a position , such that and , i.e. at the first position\r\nwhere the words differ the first word has a smaller letter than the\r\nsecond word has. For example, the word \" \" is before the word \" \" in\r\nlexicographical order. It is said that sequence of words is in\r\nlexicographical order if each word is not lexicographically greater than\r\nthe next word in the sequence.Denis has a sequence of words consisting\r\nof small letters only. He wants to change some letters to large (let’s\r\ncall this process a ) in such a way that the sequence of words is in\r\nlexicographical order. However, he soon realized that for some reason he\r\ncan’t change a single letter in a single word. He only can choose a\r\nletter and change all of its occurrences in words to large letters. He\r\ncan perform this operation any number of times with arbitrary letters of\r\nBookland’s alphabet.Help Denis to choose which letters he needs to\r\ncapitalize (make large) in order to make the sequence of words\r\nlexicographically ordered, or determine that it is impossible.Note that\r\nsome words can be .\r\n",
    "solutions": [
        "#include<iostream>\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nint n,m,f[100010],p;\nvector<int> a[100010],x[100010];\ninline void dfs(int i)\n{\n\tint j;\n\tfor(j=0;j<a[i].size();j++)\n\t  if(f[a[i][j]]==2)\n\t    p=1;\n\t  else if(!f[a[i][j]])\n\t    {\n\t\t f[a[i][j]]=1;\n\t\t dfs(a[i][j]);\n\t\t}\n}\nint main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tint i,j,k;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(i=1;i<=n;i++)\n\t  {\n\t   scanf(\"%d\",&k);\n\t   while(k--)\n\t     {\n\t\t  scanf(\"%d\",&j);\n\t\t  x[i].push_back(j);\n\t\t }\n\t  }\n\tfor(i=1;i<n;i++)\n\t  {\n\t   for(j=0;j<x[i].size() && j<x[i+1].size();j++)\n\t     if(x[i][j]!=x[i+1][j])\n\t       break;\n\t   if(j==x[i].size() || j==x[i+1].size())\n\t     {\n\t      if(x[i].size()>x[i+1].size())\n\t        p=1;\n\t\t }\n\t   else\n\t     if(x[i][j]<x[i+1][j])\n\t       a[x[i+1][j]].push_back(x[i][j]);\n\t     else\n\t       if(f[x[i][j]]==2 || f[x[i+1][j]]==1)\n\t         p=1;\n\t       else\n\t         f[x[i][j]]=1,f[x[i+1][j]]=2;\n\t  }\n\tfor(i=1;i<=m;i++)\n\t  if(f[i]==1)\n\t    dfs(i);\n\tif(p)\n\t  printf(\"No\\n\");\n\telse\n\t  {\n\t   printf(\"Yes\\n\");\n\t   for(i=1,k=0;i<=m;i++)\n\t     if(f[i]==1)\n\t       k++;\n\t   printf(\"%d\\n\",k);\n\t   for(i=1,k=0;i<=m;i++)\n\t     if(f[i]==1)\n\t       printf(\"%d \",i);\n\t  }\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "2-sat",
        "dfs and similar",
        "graphs",
        "implementation"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. National Property.json",
    "editorial_link": "https://codeforces.com//blog/entry/55233",
    "editorial": "Let the strings and are not prefixes of each other. Then it is necessary\r\nthat , where k is the first position, where and differ.Consider strings\r\nand . Let be the first position in which they differ. Then there are two\r\ncases:If , you capitalize and not capitalize .If , both these letters\r\nshould be capitalized or not capitalizes simultaneously.Letâs make a\r\ngraph in which letters will be vertexes. If , then mark as capitalized,\r\notherwise make a directed edge between and . It means that if we\r\ncapitalize , you also should capitalize .Note that our graph is acyclic\r\nbecause the edges are directed from big letters to small letters. Using\r\ndfs we capitalize all the letters, that are reachable from the\r\ncapitalized letters and check the answer. If the answer is wrong, there\r\nis no answer.\r\n",
    "hint": []
}