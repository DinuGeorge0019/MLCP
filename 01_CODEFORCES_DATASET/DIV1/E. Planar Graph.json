{
    "link": "https://codeforces.com//contest/223/problem/E",
    "problemId": "1800",
    "problem_idx": "E",
    "shortId": "223E",
    "contest_number": "223",
    "problem_submissions": {
        "D": [
            2201204,
            2227460,
            2224793
        ],
        "B": [
            2192755,
            2191107,
            2190792,
            2191517,
            2191782,
            2192823,
            2191897,
            2192037,
            2190839,
            2192321,
            2191711,
            2193472,
            2192118,
            2192281,
            2191191
        ],
        "C": [
            2191764,
            2193929,
            2191887,
            2192482,
            2192857,
            2191011,
            2194134,
            2193589,
            2192831,
            2190279,
            2193227,
            2192079,
            2193334,
            2194145,
            2192669
        ],
        "A": [
            2189710,
            2189450,
            2189566,
            2189994,
            2190232,
            2194735,
            2190245,
            2190504,
            2195271,
            2194162,
            2190423,
            2195205,
            2191251,
            2190814,
            2195342
        ],
        "E": [
            17753349,
            2235305
        ]
    },
    "name": "E. Planar Graph",
    "statement": "A graph is called , if it can be drawn in such a way that its edges\r\nintersect only at their vertexes.An is such a vertex of an undirected\r\ngraph, that when removed increases the number of connected components of\r\nthe graph.A is such an edge of an undirected graph, that when removed\r\nincreases the number of connected components of the graph.You’ve got a\r\nconnected undirected planar graph consisting of vertexes, numbered from\r\nto , drawn on the plane. The graph has no bridges, articulation points,\r\nloops and multiple edges. You are also given queries. Each query is a\r\ncycle in the graph. The query response is the number of graph vertexes,\r\nwhich (if you draw a graph and the cycle on the plane) are located\r\neither inside the cycle, or on it. Write a program that, given the graph\r\nand the queries, will answer each query.\r\n",
    "solutions": [
        "// {{{ by shik\n#include <bits/stdc++.h>\n#include <unistd.h>\n#define SZ(x) ((int)(x).size())\n#define ALL(x) begin(x),end(x)\n#define REP(i,n) for ( int i=0; i<int(n); i++ )\n#define REP1(i,a,b) for ( int i=(a); i<=int(b); i++ )\n#define FOR(it,c) for ( auto it=(c).begin(); it!=(c).end(); it++ )\n#define MP make_pair\n#define PB push_back\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int,int> PII;\ntypedef vector<int> VI;\n\n#ifdef SHIK\ntemplate<typename T>\nvoid _dump( const char* s, T&& head ) { cerr<<s<<\"=\"<<head<<endl; }\n\ntemplate<typename T, typename... Args>\nvoid _dump( const char* s, T&& head, Args&&... tail ) {\n    int c=0;\n    while ( *s!=',' || c!=0 ) {\n        if ( *s=='(' || *s=='[' || *s=='{' ) c++;\n        if ( *s==')' || *s==']' || *s=='}' ) c--;\n        cerr<<*s++;\n    }\n    cerr<<\"=\"<<head<<\", \";\n    _dump(s+1,tail...);\n}\n\n#define dump(...) do { \\\n    fprintf(stderr, \"%s:%d - \", __PRETTY_FUNCTION__, __LINE__); \\\n    _dump(#__VA_ARGS__, __VA_ARGS__); \\\n} while (0)\n\ntemplate<typename Iter>\nostream& _out( ostream &s, Iter b, Iter e ) {\n    s<<\"[\";\n    for ( auto it=b; it!=e; it++ ) s<<(it==b?\"\":\" \")<<*it;\n    s<<\"]\";\n    return s;\n}\n\ntemplate<typename A, typename B>\nostream& operator <<( ostream &s, const pair<A,B> &p ) { return s<<\"(\"<<p.first<<\",\"<<p.second<<\")\"; }\ntemplate<typename T>\nostream& operator <<( ostream &s, const vector<T> &c ) { return _out(s,ALL(c)); }\ntemplate<typename T, size_t N>\nostream& operator <<( ostream &s, const array<T,N> &c ) { return _out(s,ALL(c)); }\ntemplate<typename T>\nostream& operator <<( ostream &s, const set<T> &c ) { return _out(s,ALL(c)); }\ntemplate<typename A, typename B>\nostream& operator <<( ostream &s, const map<A,B> &c ) { return _out(s,ALL(c)); }\n#else\n#define dump(...)\n#endif\n\ntemplate<typename T>\nvoid _R( T &x ) { cin>>x; }\nvoid _R( int &x ) { scanf(\"%d\",&x); }\nvoid _R( long long &x ) { scanf(\"%\" PRId64,&x); }\nvoid _R( double &x ) { scanf(\"%lf\",&x); }\nvoid _R( char &x ) { scanf(\" %c\",&x); }\nvoid _R( char *x ) { scanf(\"%s\",x); }\n\nvoid R() {}\ntemplate<typename T, typename... U>\nvoid R( T& head, U&... tail ) {\n    _R(head);\n    R(tail...);\n}\n\ntemplate<typename T>\nvoid _W( const T &x ) { cout<<x; }\nvoid _W( const int &x ) { printf(\"%d\",x); }\ntemplate<typename T>\nvoid _W( const vector<T> &x ) {\n    for ( auto i=x.cbegin(); i!=x.cend(); i++ ) {\n        if ( i!=x.cbegin() ) putchar(' ');\n        _W(*i);\n    }\n}\n\nvoid W() {}\ntemplate<typename T, typename... U>\nvoid W( const T& head, const U&... tail ) {\n    _W(head);\n    putchar(sizeof...(tail)?' ':'\\n');\n    W(tail...);\n}\n\n#ifdef SHIK\n#define FILEIO(...)\n#else\n#define FILEIO(name) do {\\\n    freopen(name \".in\",\"r\",stdin); \\\n    freopen(name \".out\",\"w\",stdout); \\\n} while (0)\n#endif\n\n// }}}\n\nconst int N=1e5+10;\n\nstruct E {\n    int to,flow;\n    long double ang;\n};\n\n#ifdef SHIK\nostream& operator<<( ostream &o, const E &e ) {\n    return o<<MP(e.to,MP(e.flow,e.ang));\n}\n#endif\n\nbool operator <( const E &a, const E &b ) {\n    return a.ang<b.ang;\n}\n\nint n,m;\nLL x[N],y[N];\nvector<E> e[N];\nvector<int> sf[N];\n\ninline long double get_ang( int a, int b ) {\n    map<PII,long double> memo;\n    auto k=MP(a,b);\n    if ( memo.count(k) ) return memo[k];\n    else return memo[k]=atan2l(y[b]-y[a],x[b]-x[a]);\n}\n\ndouble cross( int a, int b ) {\n    return x[a]*y[b]-x[b]*y[a];\n}\n\nbool vis[N];\nint dfs( int p ) {\n    vis[p]=1;\n    int s=1;\n    for ( auto &i:e[p] ) if ( !vis[i.to] ) {\n        int f=dfs(i.to);\n        i.flow=-f;\n        for ( auto &j:e[i.to] ) if ( j.to==p ) j.flow=f;\n        s+=f;\n    }\n    return s;\n}\n\nint main() {\n    R(n,m);\n    REP(i,m) {\n        int a,b;\n        R(a,b);\n        e[a].PB({b,0,0});\n        e[b].PB({a,0,0});\n    }\n    REP1(i,1,n) R(x[i],y[i]);\n    int w=1;\n    REP1(i,1,n) if ( x[i]<x[w] ) w=i;\n    x[0]=x[w]-1;\n    e[0].PB({w,0,0});\n    e[w].PB({0,0,0});\n    dfs(0);\n    REP1(i,0,n) {\n        for ( auto &j:e[i] ) j.ang=get_ang(i,j.to);\n        sort(ALL(e[i]));\n        sf[i].PB(0);\n        for ( auto &j:e[i] ) sf[i].PB(sf[i].back()+j.flow);\n        dump(i,e[i],sf[i]);\n    }\n    int q;\n    R(q);\n    while ( q-- ) {\n        static int np,p[N];\n        R(np);\n        REP(i,np) R(p[i]);\n        p[np]=p[0];\n\n        double area=0;\n        REP(i,np) area+=cross(p[i],p[i+1]);\n        if ( area<0 ) reverse(p,p+np+1);\n        p[np+1]=p[1];\n\n        int ans=0;\n        REP(ii,np) {\n            int i=p[ii],j=p[ii+1],k=p[ii+2];\n            auto aji=get_ang(j,i);\n            auto ajk=get_ang(j,k);\n            int ti=lower_bound(ALL(e[j]),E{0,0,aji})-e[j].begin();\n            int tk=lower_bound(ALL(e[j]),E{0,0,ajk})-e[j].begin();\n            assert(ti<SZ(e[j]) && e[j][ti].to==i);\n            assert(tk<SZ(e[j]) && e[j][tk].to==k);\n            dump(i,j,k,ti,tk,aji,ajk);\n            if ( ti<tk ) {\n                ans+=sf[j][tk]-sf[j][ti+1];\n            } else {\n                ans+=sf[j].back()-sf[j][ti+1];\n                ans+=sf[j][tk];\n            }\n        }\n        W(ans);\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "flows",
        "geometry",
        "graphs"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Planar Graph.json",
    "editorial_link": "https://codeforces.com//blog/entry/5301",
    "editorial": "In the problem we were given an undirected planar graph without bridges, cutpoints, loops and multiedge laid on the plane. We get requests of the following type: to calculate the number of vertices inside the cycle or on it.\n\nLet us take an arbitrary vertex on the border of the graph, for example a vertex that has the least absciss. Let's add a new vertex with an edge to the chosen vertex in such way that the edge is outside the outer border of the graph. We'll call this new vertex a sink. Let's create a 1 value flow running to the sink from each vertex except the sink. Flow can be created using breadth-first or depth-first search. This operation will take the O(E) time.\n\nLet's examine any request. We assume that the cycle is oriented counter-clockwise (if it is not so, we can just reorient it). Let's make a cut on the graph. The first part will contain the vertices laying on the cycle or inside it, the second one  all remaining vertices including the sink. We'll now prove that the flow value through the cut is equal to the vertices number in the first part. It's obvious that we can calculate contribution from every vertex to the flow value independently. Let's assume that the vertex is situated in the first part. A unit flow runs from it to the sink along some path. As soon as this vertex and the sink are situated in different parts the flow passes the edges of the cut an odd number of times, that's why the contribution of this vertex to the flow through the cut is equal to 1. Let's take now a vertex situated in the second part. As soon as it's situated in the same part as the sink the flow passes the edges of the cut an even number of times, that's why the contribution of this vertex to the flow through the cut is zero. In order to calculate the flow value through the cut we need to sum up flow values passing through the cut's edges. It's important to notice that every edge of the cut is incident to only one vertex lying on the cycle, that's why we can sum up flows passing though edges going outside the cycle for each vertex in the cycle. In order to find all edges going outside the cycle we'll sort all edges going from each vertex counter-clockwise by angle. In this case all edges going outside the cycle will be placed after the previous vertex of the cycle and before the following vertex of the cycle. That's why the sum of flow values over the edges going outside reduces to a sum over an segment which is easily calculated using partial sums. The complexity of the solution is  for graph sorting plus  for the request where l is the cycle length. There is  in complexity because we have to know a position of a vertex in the adjacency list of another vertex.",
    "hint": []
}