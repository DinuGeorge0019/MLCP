{
    "link": "https://codeforces.com//contest/708/problem/B",
    "problemId": "68951",
    "problem_idx": "B",
    "shortId": "708B",
    "contest_number": "708",
    "problem_submissions": {
        "D": [
            20128638,
            20126204,
            20127943,
            20128433,
            20129319,
            20131176,
            20131436,
            20129838,
            20122993,
            20128159,
            20142291,
            20131523,
            20133302
        ],
        "C": [
            20118349,
            20120224,
            20122617,
            20118594,
            20120712,
            20117957,
            20121003,
            20121397,
            20122448,
            20125761,
            20125377,
            20142883,
            20115423,
            20116938,
            20120664,
            20122725,
            20120078,
            20120943
        ],
        "B": [
            20114040,
            20113824,
            20115208,
            20114995,
            20116521,
            20114682,
            20122861,
            20116437,
            20115616,
            20134188,
            20115824,
            20122403,
            20114546,
            20119679,
            20134838,
            20114458,
            20118558,
            20114710,
            20134501
        ],
        "A": [
            20109754,
            20109973,
            20109781,
            20109720,
            20110304,
            20110371,
            20110361,
            20110988,
            20111867,
            20110273,
            20109747,
            20109936,
            20109851,
            20109665,
            20123051,
            20111085,
            20110162,
            20110043,
            20110060
        ],
        "E": [
            20132586,
            20171243,
            20148122,
            20129101,
            20132661,
            20128262,
            20149149
        ]
    },
    "name": "B. Recover the String",
    "statement": "For each string consisting of characters \u201d and \u201d one can define four\r\nintegers , , and , where is the number of of length of the string equal\r\nto the sequence . In these problem you are given four integers , , , and\r\nhave to find any non-empty string that matches them, or determine that\r\nthere is no such string. One can prove that if at least one answer\r\nexists, there exists an answer of length no more than .\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\ntypedef long long ll;\nll a00, a01, a10, a11;\n\nvoid Fail()\n{\n\tprintf(\"Impossible\\n\");\n\texit(0);\n}\n\nll getPairs(ll x)\n{\n\tll n = (ll)sqrt(x * 2) - 2;\n\tif (n < 1) n = 1;\n\twhile(n * (n - 1) / 2 < x) n++;\n\tif (n * (n - 1) / 2 == x)\n\t\treturn n;\n\telse\n\t\treturn -1;\n}\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%lld%lld%lld%lld\", &a00, &a01, &a10, &a11);\n\tll s = a00 + a01 + a10 + a11;\n\tif (s == 0)\n\t{\n\t\tprintf(\"0\\n\");\n\t\treturn 0;\n\t}\n\tll n = getPairs(s);\n\tif (n == -1)\n\t\tFail();\n\tif (a00 == 0 && a01 == 0 && a10 == 0)\n\t{\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tprintf(\"1\");\n\t\tprintf(\"\\n\");\n\t\treturn 0;\n\t}\n\tif (a11 == 0 && a10 == 0 && a01 == 0)\n\t{\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tprintf(\"0\");\n\t\tprintf(\"\\n\");\n\t\treturn 0;\n\t}\n\tll z = getPairs(a00);\n\tll on = getPairs(a11);\n\tif (z == -1 || on == -1 || z + on != n)\n\t\tFail();\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tif (z > 0 && a01 >= on)\n\t\t{\n\t\t\ta01 -= on;\n\t\t\tz--;\n\t\t\tprintf(\"0\");\n\t\t}\n\t\telse if (on > 0 && a10 >= z)\n\t\t{\n\t\t\ta10 -= z;\n\t\t\ton--;\n\t\t\tprintf(\"1\");\n\t\t}\n\t\telse throw;\n\t}\n\tprintf(\"\\n\");\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Recover the String.json",
    "editorial_link": "https://codeforces.com//blog/entry/46763",
    "editorial": "Using and easy to calculate numbers of 0 and 1 in string (it could be\r\ndone by binary search or solving quadratic equation ). But in case , is\r\nnot fixed and could be equal 0 or 1. One could consider both cases for\r\nsure (or code several \u00e2\u0080\u0099if\u00e2\u0080\u0099s to throw away one of the variants). If ,\r\nthen answer is impossible. Otherwise it is possible to create such\r\nstring using greedy algorithm. Consider string , its array of\r\nsubsequences equals . One could swap neighbouring pairs one by one and\r\ntransform it to (similar to bubble sorting), its array equals . During\r\nthis process string corresponding to array was reproduced exactly once,\r\nbecause every swap reduce by one and increase by one, so we have\r\nsolution. One could make it linear: take string and move its zeros one\r\nby one directly in the end of string while . When become we will move\r\nnext zero on symbols left and finally get desired string. There is\r\nanother way to do it, when you build lexicographically smallest string\r\none symbol by one from the beginning.\r\n"
}