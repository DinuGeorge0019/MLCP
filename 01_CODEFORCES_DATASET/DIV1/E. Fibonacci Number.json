{
    "link": "https://codeforces.com//contest/193/problem/E",
    "problemId": "1408",
    "problem_idx": "E",
    "shortId": "193E",
    "contest_number": "193",
    "problem_submissions": {
        "E": [
            1760964,
            1761121,
            1761512
        ],
        "D": [
            1760240,
            1762133
        ],
        "C": [
            1758660,
            1761664,
            1756861,
            1760385,
            1757547,
            1757786,
            1758601,
            1759415,
            1759294,
            1758335,
            1759388,
            1758973,
            1758915,
            1759895,
            1758129,
            1758643
        ],
        "B": [
            1755241,
            1755126,
            1757246,
            1755771,
            1756101,
            1755179,
            1755123,
            1755569,
            1759901,
            1755152,
            1756669,
            1756100,
            1755910,
            1760390,
            1760344
        ],
        "A": [
            1754055,
            1754254,
            1754686,
            1754344,
            1754275,
            1758932,
            1756481,
            1757287,
            1754744,
            1756492,
            1755198,
            1754933,
            1754369,
            1755466
        ]
    },
    "name": "E. Fibonacci Number",
    "statement": "John Doe has a list of all Fibonacci numbers modulo . This list is\r\ninfinite, it starts with numbers and . Each number in the list, apart\r\nfrom the first two, is a sum of previous two modulo . That is, John’s\r\nlist is made from the Fibonacci numbers’ list by replacing each number\r\nthere by the remainder when divided by . John got interested in number\r\n() and now wants to find its first occurrence in the list given above.\r\nHelp John and find the number of the first occurence of number in the\r\nlist or otherwise state that number does not occur in the list. The\r\nnumeration in John’s list starts from zero. There, the -th position is\r\nthe number , the -st position is the number , the -nd position is the\r\nnumber , the -rd position is the number , the -th position is the number\r\nand so on. Thus, the beginning of the list looks like this:\r\n",
    "solutions": [
        "#include <iostream>\n\nusing namespace std;\n\nconst long long M = 10000000000000LL;\nconst int md = 100000000;\nconst int per = md*3/2;\nconst int nd = 30000000;\n\nlong long f[nd+10];\nlong long xa[500010], xb[500010], xc[500010];\nlong long x, ans;\nint q, a, b, it, c, i, itt;\n\ninline long long mul(long long a, long long b) {\n  long long a1 = a/10000000, a2 = a-a1*10000000;\n  long long b1 = b/10000000, b2 = b-b1*10000000;\n  long long res = a2*b2;\n  res += (a1*b2+b1*a2) % 1000000 * 10000000;\n  return res % M;\n}\n\nvoid check(long long z) {\n  if (ans != -1 && z >= ans) return;\n  long long q = z/nd, w = z % nd, res;\n  if (w == 0) res = xb[q];\n  else res = (mul(xb[q],f[w-1])+mul(xc[q],f[w])) % M;\n  if (res == x) ans = z;\n}\n\nlong long aa, bb, cc;\n\nvoid check2(long long z) {\n//  if (ans != -1 && z >= ans) return;\n  long long a = 1, b = 0, c = 1, na, nb, u;\n  long long step = 1LL << 50;\n  while (step > z) step >>= 1;\n  while (step) {\n    u = mul(b,b);\n    na = mul(a,a)+u;\n    if (na >= M) na -= M;\n    b = mul(b,a+c);\n    c = u+mul(c,c);\n    if (c >= M) c -= M;\n    a = na;\n    if (step & z) {\n      na = b;\n      nb = a+b;\n      if (nb >= M) nb -= M;\n      c = b+c;\n      if (c >= M) c -= M;\n      a = na; b = nb;\n    }\n    step >>= 1;\n  }\n  aa = a; bb = b; cc = c;\n}\n\nint main() {\n  f[0] = 0; f[1] = 1;\n  for (i=2;i<nd;i++) {\n    f[i] = f[i-1]+f[i-2];\n    if (f[i] >= M) f[i] -= M;\n  }\n  check2(nd);\n  xa[0] = 1; xb[0] = 0; xc[0] = 1;\n  xa[1] = aa; xb[1] = bb; xc[1] = cc;\n  for (i=2;i<(M*3/2)/nd;i++) {\n    xa[i] = mul(xa[i-1],xa[1])+mul(xb[i-1],xb[1]);\n    if (xa[i] >= M) xa[i] -= M;\n    xb[i] = mul(xa[i-1],xb[1])+mul(xb[i-1],xc[1]);\n    if (xb[i] >= M) xb[i] -= M;\n    xc[i] = mul(xb[i-1],xb[1])+mul(xc[i-1],xc[1]);\n    if (xc[i] >= M) xc[i] -= M;\n  }\n  cin >> x;\n  q = x % md;\n  a = 0; b = 1; it = 0;\n  ans = -1;\n  do {\n    if (a == q)\n      for (i=0;i<100000;i++) check((long long)i*per+it);\n    c = a+b;\n    if (c >= md) c -= md;\n    a = b; b = c;\n    it++;\n  } while (a != 0 || b != 1);\n  cout << ans << endl;\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math",
        "matrices"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Fibonacci Number.json",
    "editorial_link": "https://codeforces.com//blog/entry/4673",
    "editorial": "In this problem we had some Fibonacci number modulo 1013 f, and we had to determine the position of its first occurence in Fibonacci sequence modulo 1013.\n\nLet a and b be two different coprime modula  divisors of 1013.\nLet F be the actual Fibonacci number such that . Then  and .\nFind all occurences of number  in Fibonacci sequence modulo a period.\nFind all occurences of number  in Fibonacci sequence modulo b period.\nLet's fix a pair of such occurences. Let the occurence modulo a be in position i, and the occurence modulo b be in position j.\nLet t(m) be Fibonacci sequence modulo m period.\nFrom the Chinese Remainder Theorem, it follows that t(ab)?=?LCM(t(a),?t(b)) (remember that a and b are coprime).\nThen from fixed occurences of f in periods of sequences modulo a and b we can recover the position of occurence of f in period of sequence modulo ab. It could be done by solving the following Diophantine equation: i?+?t(a)?*?x?=?j?+?t(b)?*?y. We can solve it using a simple bruteforce of one of the roots.\nIf the occurence in sequence modulo ab period ( we have just found it) is u, then every occurence f in Fibonacci sequence modulo 1013 period can be represented as t(ab)?*?k?+?u. Then let's bruteforce k and find all occurences in sequence modulo 1013 period. To determine Fibonacci number on position ??+?t(ab) from known Fibonacci number on position ?, we need to multiply the vector (F?,?F??+?1) and some matrix.\nLet's choose a?=?59 and b?=?213. Note that there is no number that occur Fibonacci sequence modulo a or b period more than 8 times. That means that total count of pairs will never be greater than 64. For each occurence we'll bruteforce not more than  numbers. That was the author's solution.\nAlso that was possible to use the fact that for any number the count of its occurences in period of sequence modulo 10p (for any natural p) is not big more efficiently. From occurences in sequence modulo 10i period we could get occurences in sequence modulo 10i?+?1 period using the method we use to jump from modulus ab to modulus 1013.",
    "hint": []
}