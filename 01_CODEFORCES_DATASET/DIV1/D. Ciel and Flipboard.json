{
    "link": "https://codeforces.com//contest/321/problem/D",
    "problemId": "3266",
    "problem_idx": "D",
    "shortId": "321D",
    "contest_number": "321",
    "problem_submissions": {
        "D": [
            3996276,
            3980026,
            3983272,
            3983312,
            12592698,
            3984131
        ],
        "E": [
            3980136,
            4452055,
            3980389,
            3985877,
            3982432,
            3983276,
            3983985,
            3983546,
            3989402,
            3982283,
            3982901,
            3987486,
            3986621,
            3986597,
            3984324
        ],
        "B": [
            3977018,
            3976497,
            3975346,
            3975457,
            3977862,
            3977933,
            3976248,
            3977096,
            3975835,
            3975367,
            3981509,
            3977308,
            3981308,
            3976604,
            3978354,
            23607133
        ],
        "C": [
            3976574,
            3973635,
            80179378,
            80179360,
            80178543,
            80177368,
            3977407,
            3978721,
            3979609,
            3977413,
            3979117,
            3980301,
            3977480,
            3978832,
            3979230,
            3979055,
            3978017,
            3980667,
            3983932,
            3980825
        ],
        "A": [
            3973735,
            3982224,
            3988924,
            3983503,
            3973922,
            3973057,
            3973436,
            3974764,
            3973866,
            3973513,
            3973909,
            3973666,
            3985547,
            3973654,
            3974568
        ]
    },
    "name": "D. Ciel and Flipboard",
    "statement": "Fox Ciel has a board with rows and columns, there is one integer in each\r\ncell.It’s known that is an odd number, so let’s introduce . Fox Ciel can\r\ndo the following operation many times: she choose a sub-board with size\r\nrows and columns, then all numbers in it will be multiplied by -1.Return\r\nthe maximal sum of numbers in the board that she can get by these\r\noperations.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\n#include <cstring>\n#include <vector>\nusing namespace std;\nint n, k;\nconst int MAX_N = 33;\n\nint a[MAX_N][MAX_N], b[MAX_N][MAX_N];\n\nint main() {\n\tcin >> n;\n\tk = n / 2;\n\tfor (int i = 0; i < n; ++i) {\n\t\tfor (int j = 0; j < n; ++j) {\n\t\t\tcin >> b[i][j];\n\t\t}\n\t}\n\n\tint ans = 0;\n\n\tfor (int msk = 0; msk < (1 << (k + 1)); ++msk) {\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tfor (int j = 0; j < n; ++j) {\n\t\t\t\ta[i][j] = b[i][j];\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i <= k; ++i) {\n\t\t\tif (msk >> i & 1) {\n\t\t\t\tfor (int x = k; x <= k + k; ++x) {\n\t\t\t\t\tfor (int j = i; j <= i + k; ++j) {\n\t\t\t\t\t\ta[x][j] *= -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//i,i+k+1\n\n\t\tint cur = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tcur += a[k][i];\n\t\t}\n\n\t\tfor (int i = 0; i < k; ++i) {\n\t\t\tfor (int j = 0; j < n; ++j) {\n\t\t\t\ta[i][j] += a[i + k + 1][j];\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i < k; ++i) {\n\t\t\t//i,i+k+1\n\t\t\tint t1 = a[i][k], t2 = -t1;\n\t\t\tfor (int j = 0; j < k; ++j) {\n\t\t\t\t//a[i][j],a[i][j+k+1]\n\t\t\t\tint x = a[i][j], y = a[i][j + k + 1];\n\t\t\t\tt1 += max(x + y, -x - y);\n\t\t\t\tt2 += max(-x + y, x - y);\n\t\t\t}\n\t\t\tcur += max(t1, t2);\n\t\t}\n\n\t\tans = max(ans, cur);\n\t}\n\n\tcout << ans << endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "math"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Ciel and Flipboard.json",
    "editorial_link": "https://codeforces.com//blog/entry/8192",
    "editorial": "For this problem we need a big \"observation\": what setup of \"flips\" are\r\nvalid? What means set up of \"flips\", well, for example, after the 1st\r\nstep operation of example 1, we get: It means the left top 2x2 cells are\r\nnegatived. Given a 0-1 matrix of a set up of \"flips\", how can you\r\ndetermine if we can get it by some N x N (I use N instead of x here, it\r\ndonât make sense to write something like x x x.) flips. To solve this\r\nproblem, we need the following observation: Itâs quite easy to proof\r\nthan find that: after each operation, there always be 0 or 2 cells lay\r\nin {setUp[i][j], setUp[i][x], setUp[i][j+x]} or {setUp[j][i],\r\nsetUp[x][i], setUp[j+x][i]}. So what? Well, then there must be no more\r\nthan 2^(N*N) solutions, since if we determine the left top N x N cells,\r\nwe can determine others by above equations. And then? Magically we can\r\nproof if one set up meets all above equations, we can get it. And the\r\nproof only needs one line: think the operation as addition of vectors in\r\nGF2, then we have N*N independent vector, so there must be 2^(N*N)\r\ndifferent setups we can get. (Yes, I admit it need some knowledge, or\r\nfeeling in linear algebra) Then the things are easy: we enumerate\r\n{setUp[1][N], setUp[2][N], ..., setUp[N][N]}, and determine others by\r\ngreedy. (More detailed, by columns.) You can find details in my code.\r\n",
    "hint": []
}