{
    "link": "https://codeforces.com//contest/1010/problem/B",
    "problemId": "201803",
    "problem_idx": "B",
    "shortId": "1010B",
    "contest_number": "1010",
    "problem_submissions": {
        "B": [
            40799404,
            40801993,
            40788669,
            40787652,
            40789673,
            40789686,
            40789983,
            40785033,
            40792839,
            40805864,
            40788811,
            40787383,
            40789849,
            40789369,
            40787726,
            40805158,
            40792120,
            40788528
        ],
        "E": [
            40798849,
            40800058,
            40798099,
            40803219,
            40808162,
            40803215,
            40805435,
            40803779,
            40802990,
            40802895,
            40802904,
            40807344,
            40809272,
            40807596,
            40809118,
            40796705,
            40826253,
            40825565,
            40825440,
            40825326,
            40820969,
            40809148,
            40810854
        ],
        "D": [
            40790648,
            40792110,
            40793613,
            40792349,
            40794914,
            40795576,
            40794812,
            40796573,
            40795996,
            40791327,
            40795441,
            40794120,
            40793973,
            40796503,
            40791721,
            40802197,
            40794990,
            40796187
        ],
        "C": [
            40786265,
            40787662,
            40789931,
            40785223,
            40786749,
            40786331,
            40785962,
            40786363,
            40790435,
            40784715,
            40788036,
            40789805,
            40785906,
            40791178,
            40784561,
            40799332,
            40788152,
            40791287
        ],
        "A": [
            40783437,
            40783575,
            40783713,
            40784110,
            40784394,
            40784590,
            40783557,
            40784035,
            40783594,
            40783743,
            40791154,
            40783813,
            40784202,
            40785469,
            40783661,
            40798279,
            40784877,
            40785930
        ],
        "F": [
            40820195,
            40821625,
            40821278,
            40814070,
            40812966,
            47670616
        ]
    },
    "name": "B. Rocket",
    "statement": "Natasha is going to fly to Mars. Finally, Natasha sat in the rocket. She\r\nflies, flies... but gets bored. She wishes to arrive to Mars already! So\r\nshe decides to find something to occupy herself. She couldn\u2019t think of\r\nanything better to do than to calculate the distance to the red\r\nplanet.Let\u2019s define x as the distance to Mars. Unfortunately, Natasha\r\ndoes not know x. But it is known that 1\r\nle x\r\nle m, where Natasha knows the number m. Besides, x and m are positive\r\nintegers.Natasha can ask the rocket questions. Every question is an\r\ninteger y (1\r\nle y\r\nle m). The correct answer to the question is -1, if x<y, 0, if x=y, and\r\n1, if x>y. But the rocket is broken it does not always answer correctly.\r\nPrecisely: let the correct answer to the current question be equal to t,\r\nthen, if the rocket answers this question correctly, then it will answer\r\nt, otherwise it will answer -t.In addition, the rocket has a sequence p\r\nof length n. Each element of the sequence is either 0 or 1. The rocket\r\nprocesses this sequence in the cyclic order, that is 1-st element, 2-nd,\r\n3-rd,\r\nldots, (n-1)-th, n-th, 1-st, 2-nd, 3-rd,\r\nldots, (n-1)-th, n-th,\r\nldots. If the current element is 1, the rocket answers correctly, if 0\r\nlies. Natasha doesn\u2019t know the sequence p, but she knows its length\r\nn.You can ask the rocket no more than 60 questions.Help Natasha find the\r\ndistance to Mars. Assume, that the distance to Mars does not change\r\nwhile Natasha is asking questions.Your solution will not be accepted, if\r\nit does not receive an answer 0 from the rocket (even if the distance to\r\nMars is uniquely determined by the already received rocket\u2019s answers).\r\n",
    "solutions": [
        "#pragma comment(linker, \"/STACK:512000000\")\n#define _CRT_SECURE_NO_WARNINGS\n//#include \"testlib.h\"\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define all(a) a.begin(), a.end()\nusing li = long long;\nusing ld = long double;\nvoid solve(bool);\nvoid precalc();\nclock_t start;\nint main() {\n#ifdef AIM\n  //freopen(\"/home/alexandero/CLionProjects/ACM/input.txt\", \"r\", stdin);\n//freopen(\"/home/alexandero/CLionProjects/ACM/output.txt\", \"w\", stdout);\n//freopen(\"out.txt\", \"w\", stdout);\n#else\n  //freopen(\"input.txt\", \"r\", stdin);\n//freopen(\"output.txt\", \"w\", stdout);\n#endif\n  start = clock();\n  int t = 1;\n#ifndef AIM\n  cout.sync_with_stdio(0);\n  cin.tie(0);\n#endif\n  cout.precision(20);\n  cout << fixed;\n//cin \u00bb t;\n  precalc();\n  while (t--) {\n    solve(true);\n  }\n  cout.flush();\n\n#ifdef AIM1\n  while (true) {\nsolve(false);\n}\n#endif\n\n#ifdef AIM\n  cerr << \"\\n\\n time: \" << (clock() - start) / 1.0 / CLOCKS_PER_SEC << \"\\n\\n\";\n#endif\n  return 0;\n}\n\n//BE CAREFUL: IS INT REALLY INT?\n\ntemplate<typename T>\nT binpow(T q, T w, T mod) {\n  if (!w)\n    return 1 % mod;\n  if (w & 1)\n    return q * 1LL * binpow(q, w - 1, mod) % mod;\n  return binpow(q * 1LL * q % mod, w / 2, mod);\n}\n\ntemplate<typename T>\nT gcd(T q, T w) {\n  while (w) {\n    q %= w;\n    swap(q, w);\n  }\n  return q;\n}\ntemplate<typename T>\nT lcm(T q, T w) {\n  return q / gcd(q, w) * w;\n}\n\ntemplate <typename T>\nvoid make_unique(vector<T>& vec) {\n  sort(all(vec));\n  vec.erase(unique(all(vec)), vec.end());\n}\n\ntemplate<typename T>\nvoid relax_min(T& cur, T val) {\n  cur = min(cur, val);\n}\n\ntemplate<typename T>\nvoid relax_max(T& cur, T val) {\n  cur = max(cur, val);\n}\n\nvoid precalc() {\n\n}\n\n//#define int li\n//const li mod = 1000000007;\n\n//using ull = unsigned long long;\n\nvoid solve(bool read) {\n  int m, n;\n  cin >> m >> n;\n  vector<bool> correct(n, false);\n  for (int i = 0; i < n; ++i) {\n    cout << 1 << endl;\n    int ans;\n    cin >> ans;\n    if (ans == 0) {\n      return;\n    }\n    correct[i] = (ans == 1);\n  }\n  int L = 1, R = m + 1;\n  int cnt = 0;\n  while (L < R) {\n    int M = (L + R) / 2;\n    cout << M << endl;\n    int ans;\n    cin >> ans;\n    if (!correct[cnt]) {\n      ans = -ans;\n    }\n    cnt = (cnt + 1) % n;\n    if (ans == 0) {\n      return;\n    }\n    if (ans == 1) {\n      L = M;\n    } else {\n      R = M;\n    }\n  }\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "interactive"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Rocket.json",
    "editorial_link": "https://codeforces.com/blog/entry/60851",
    "editorial": "First we learn the sequence . For this print the query \"1\" times. If the\r\nanswer is \"0\" (that is, the distance to Mars is equal to one), then\r\nimmediately terminate the program. Otherwise, it is clear that the\r\ncorrect answer is \"1\" (that is, the distance to Mars is greater than\r\none). If -th answer of rocket is \"1\", then (that is, the rocket answered\r\nthe truth), otherwise (untruth). On this, we will spend no more than\r\nqueries, within the given constraints it is .Now you can find the number\r\nusing binary search. For each answer, you need to check: if the\r\ncorresponding element of the sequence equals to , then the answer sign\r\nmust be changed. On this, we will spend no more than queries, within the\r\ngiven constraints it is .The total number of queries does not exceed\r\n.Complexity: Bonus. Try to solve a similar problem but with a constraint\r\n.\r\n"
}