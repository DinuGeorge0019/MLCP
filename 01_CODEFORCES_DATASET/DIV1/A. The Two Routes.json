{
    "link": "https://codeforces.com//contest/601/problem/A",
    "problemId": "41469",
    "problem_idx": "A",
    "shortId": "601A",
    "contest_number": "601",
    "problem_submissions": {
        "A": [
            14454470,
            14443143,
            14447063,
            14443587,
            14445964,
            14443595,
            14444045,
            14444989,
            14446125,
            14443550,
            14443259,
            14443909,
            14445577,
            14444080,
            14443457,
            14446585,
            14444039,
            14443354
        ],
        "B": [
            14453038,
            14449287,
            14452241,
            14450261,
            14447679,
            14448966,
            14446447,
            14447283,
            14448908,
            14445351,
            14446449,
            14446110,
            14446584,
            14449868,
            14447883,
            14445592,
            14448674,
            14450206,
            14448949
        ],
        "C": [
            14451829,
            14446840,
            14444491,
            14448343,
            14449987,
            14446641,
            14447562,
            14449169,
            14451065,
            14449654,
            14454388,
            14453682,
            14454128,
            14447981,
            14450444,
            14450228,
            14453413,
            14447154,
            14447182
        ],
        "D": [
            14449920,
            14451694,
            14450636,
            14452396,
            14452299,
            14456203,
            14456286,
            14457609,
            14452835,
            14451843,
            14450703,
            14452065,
            14453099,
            14453143,
            14453767,
            14451161,
            14453943,
            14454530
        ],
        "E": [
            14447206,
            14455203,
            14456257,
            14455227,
            14455660,
            14455476,
            14454130,
            14452692,
            14454008,
            14577340,
            14553610
        ]
    },
    "name": "A. The Two Routes",
    "statement": "In Absurdistan, there are towns (numbered through ) and bidirectional\r\nrailways. There is also an absurdly simple road network for each pair of\r\ndifferent towns and , there is a bidirectional road between towns and\r\nthere is no railway between them. Travelling to a different town using\r\none railway or one road always takes exactly one hour.A train and a bus\r\nleave town at the same time. They both have the same destination, town ,\r\nand don\u2019t make any stops on the way (but they can wait in town ). The\r\ntrain can move only along railways and the bus can move only along\r\nroads.You\u2019ve been asked to plan out routes for the vehicles; each route\r\ncan use any road/railway multiple times. One of the most important\r\naspects to consider is safety in order to avoid accidents at railway\r\ncrossings, the train and the bus must not arrive at the same town\r\n(except town ) simultaneously.Under these constraints, what is the\r\nminimum number of hours needed for both vehicles to reach town (the\r\nmaximum of arrival times of the bus and the train)? Note, that bus and\r\ntrain are not required to arrive to the town at the same moment of time,\r\nbut are allowed to do so.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <cassert>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\n#include <queue>\nconst int N=410;\ndeque<pair<int,PII> > q;\nint dis[N][N][2],vis[N][N][2];\nint n,m,u,v,g[N][N],f[N][N];;\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\trep(i,0,m) {\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tg[u][v]=g[v][u]=1;\n\t}\n\tg[n][n]=1;\n\trep(i,1,n+1) rep(j,1,n+1) if (g[i][j]==0&&i!=j) f[i][j]=1; f[n][n]=1;\n\tmemset(dis,0x20,sizeof(dis));\n\tdis[1][1][0]=0;\n\tq.push_back(mp(1,mp(1,0)));\n\twhile (!q.empty()) {\n\t\tint u=q.front().fi,v=q.front().se.fi,dir=q.front().se.se;\n\t\tq.pop_front();\n\t\tif (vis[u][v][dir]) continue;\n\t\tvis[u][v][dir]=1;\n\t//\tprintf(\"%d %d %d %d\\n\",u,v,dir,dis[u][v][dir]);\n\t\tif (dir==0) {\n\t\t\trep(w,1,n+1) if (g[v][w]&&dis[u][w][1]>dis[u][v][0]+1) {\n\t\t\t\tdis[u][w][1]=dis[u][v][0]+1;\n\t\t\t\tq.push_back(mp(u,mp(w,1)));\n\t\t\t}\n\t\t} else {\n\t\t\trep(w,1,n+1) if (f[u][w]&&(w==n||w!=u)&&dis[w][v][0]>dis[u][v][1]) {\n\t\t\t\tdis[w][v][0]=dis[u][v][1];\n\t\t\t\tq.push_front(mp(w,mp(v,0)));\n\t\t\t}\n\t\t}\n\t}\n\tint r=min(dis[n][n][0],dis[n][n][1]);\n\tif (r>=10000000) puts(\"-1\"); else printf(\"%d\\n\",r);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "shortest paths"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. The Two Routes.json",
    "editorial_link": "https://codeforces.com//blog/entry/21755",
    "editorial": "The condition that the train and bus can't meet at one vertex except the final one is just trolling. If there's a railway , then the train can take it and wait in town N. If there's no such railway, then there's a road , the bus can take it and wait in N instead. There's nothing forbidding this :D.\n\nThe route of one vehicle is clear. How about the other one? Well, it can move as it wants, so the answer is the length of its shortest path from 1 to N... or ?-?1 if no such path exists. It can be found by BFS in time O(N?+?M)?=?O(N2).\n\nIn order to avoid casework, we can just compute the answer as the maximum of the train's and the bus's shortest distance from 1 to N. That way, we compute ; since the answer is ???1, it works well.\n\nIn summary, time and memory complexity: O(N2).\n\nBonus: Assume that there are M1 roads and M2 railways given on the input, all of them pairwise distinct.\n\nBonus 2: Additionally, assume that the edges are weighted. The speed of both vehicles is still the same \u0097 traversing an edge of length l takes l hours."
}