{
    "link": "https://codeforces.com//contest/2101/problem/F",
    "problemId": "3379871",
    "problem_idx": "F",
    "shortId": "2101F",
    "contest_number": "2101",
    "problem_submissions": {
        "D": [
            319294804,
            319237348,
            319244062,
            319233111,
            319248438,
            319270934,
            319247114,
            319246074,
            319245749,
            319256088,
            319251191,
            319251037,
            319261866,
            319252875,
            319254950,
            319262267,
            319251514,
            319255297
        ],
        "F": [
            319280605,
            319281731,
            319296938,
            319296545,
            319307832,
            319307784,
            319294905,
            319285038,
            319280546,
            319439373,
            319610626,
            319290581,
            322062368,
            319622463
        ],
        "E": [
            319261457,
            319271887,
            319269195,
            319269179,
            319260221,
            319295559,
            319294878,
            319271978,
            319272872,
            319314013,
            319277656,
            319282084,
            319306454,
            319284113,
            319285106,
            319318396,
            319280504,
            319284828,
            319289037
        ],
        "C": [
            319227789,
            319248152,
            319242282,
            319237027,
            319228539,
            319229145,
            319235166,
            319232460,
            319242619,
            319234897,
            319234927,
            319241291,
            319239653,
            319237271,
            319245442,
            319240061,
            319236820
        ],
        "B": [
            319220410,
            319218858,
            319221247,
            319221700,
            319222744,
            319220314,
            319219692,
            319223217,
            319223401,
            319224243,
            319230362,
            319224392,
            319222585,
            319222454,
            319227561,
            319224092
        ],
        "A": [
            319215799,
            319216381,
            319216154,
            319217268,
            319216406,
            319216292,
            319216910,
            319216574,
            319215332,
            319218464,
            319222747,
            319217683,
            319216023,
            319216949,
            319220045,
            319216375
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142788",
    "editorial": "SolutionNote: For the purpose of this editorial, the diameter of a\r\ncolored tree is defined as a simple path with maximum coolness which has\r\na blue and red node on each side.Let’s say a node is special iff the\r\ndistance of the farthest blue node from it plus the distance of the\r\nfarthesrt red node is equal to the length of the diameter of the tree.\r\nWe also define a special edge as an edge such that the distances of the\r\nfarthes red nodes on both sides are equal, and the distances of the blue\r\nnodes on each side are also equal to each other. Something like this:We\r\ncan see that the sum of distances of the farthest blue and green plus\r\none is the length of the diameter. We claim that if there is no special\r\nnode in a colored tree, then there must be a special edge. Proof: If\r\nthere is no special node in a tree, then that means the farthest red and\r\nblue node for each vertex are on one side of it. We know that if there\r\nis at least one blue and one red colored node, then we have a valid\r\ndiameter, so considering each node on that diameter, becuase it is not a\r\nspecial node the farthest blue and red of it must be on one side, and\r\nthis leasds us towards a speical edge, the formal proof is described\r\nlater when discussing .Let’s make some more observations. It’s easy to\r\nsee that the diameter of a tree is not necessarily unique, but an\r\ninteresting fact is that every two valid diameters must intersect with\r\neach other.Proof: if not, consider the tree is rooted from the blue/red\r\nnode of one diameter, this would trivially show us a new blue and red\r\nnode that has a distance longer than our current diameter and therefore\r\na contradiction.This gives us the idea that the intersection of all\r\nvalid diameters is a non-empty simple path on the tree.Proof: Consider\r\ntwo diameters and take their intersection, then add the rest one by one\r\nand take the intersection of the intersections. If there are any two\r\npairs with intersections that do not intersect, this means there exists\r\na pair of valid diameters which do not intersect with each other, and\r\nthis is against our hypothesis.Before continuing, you must have an idea\r\nso far that we are aiming to count the trees with special node based on\r\ntheir node, and others based on their special edge, but there is still a\r\nlot to discuss.Going back to the special nodes, it’s easy to see that\r\nthey must must be on our diameter, and what makes this more interesting\r\nis that they must be on all diameters! So, taking the simple path that\r\nwas the intersection of all valid diameters, we know that all of our\r\nspecial nodes lie on this path.Getting deeper on special nodes, we can\r\nsee that for a non-special node such as , the farthest blue and red are\r\nboth on the same subtree if we root the tree from . This makes the sum\r\nof distances to farthest red plus the farthest blue result in a number\r\nalways bigger than the actual length of our diameter (as there is a\r\nshared part). Call the child in which both the farthest red and blue lie\r\non a cool child.Let’s create another graph based on our tree (call it )\r\nthat has identical nodes to the tree, and directed edges. For each\r\nnon-special node, give a directed edge from the identical vertex in to\r\nits cool child. It’s easy to see that special nodes would not have any\r\nincoming edges to them in this new graph, but every non-special node has\r\nat least one. We can use this graph to formally prove almost everything.\r\nLet’s start with the fact that why any tree without a special node has a\r\nspecial edge?Proof: No special edge means that there are nodes in our\r\ntree that each have an outgoing edge, therefore directed edges as well.\r\nOur initial tree had only edge, so therefore based on the pigeonhole\r\nprinciple, there must be an edge in the initial tree, that two directed\r\nedges pass above it. It’s trivial that those edges cannot have the same\r\ndirection, and therefore this will lead us to a directed cycle of length\r\ntwo. Well, think about it, this is exactly what a special edge is!So if\r\nno special node is there, now we know that there is at least one special\r\nedge there somewhere. Well, it appears that we also cannot have more\r\nthan one special edge in a colored tree.Proof: If so, we know that both\r\nof them must appear on the diameter, and considering their placement,\r\nthis will contradict the fact that the distance of red and blue from\r\nboth sides must be equal.Combining both above observations, now we know\r\nthat if there is no special node in the colored tree, then there is\r\nexactly one special edge there somewhere.Now let’s solve the first\r\nsub-problem, which is how to solve the problem if there is no special\r\nnode. Define for a node as the number of colourings which the farthest\r\nblue has a distance of , and the farthest red has a distance of . How to\r\ncalculate ? Define as the same thing, but this time for the distance of\r\nat most for blue and at most for red. It’s easy to see that if we\r\nsomehow calculate , then the following equation holds: And here’s how we\r\nfind : Where is the number of nodes such as that have a distance less\r\nthan or equal to , is the number of nodes that have a distance bigger\r\nthan but less than or equal to , and is the number of nodes that have a\r\ndistance more than . Formally: This will so far give us an solution, dw\r\nwe’ll optimize it further later. Now we count the result for each edge\r\nof the tree, considering it will be a special edge in some colourings.\r\nCall both sides of the edge and just like the diagram shown above.\r\nAssuming we have calculated for all nodes, the answer is: We’re halfway\r\nthere! Before the optimizing part, the only question left is what if\r\nthere is a special node? Let’s define a super-special node a node that\r\nis special, and not only does it have the farthest blue and red on\r\ndifferent sides, but also either a blue node with distance one less than\r\nthe farthest blue, or a red node with distance one less than the\r\nfarthest red.Using the same observations that we made earlier and a\r\ndeeper understanding of , you can prove that there is at least one\r\nsuper-special node, also at most one super-special node, and therefore\r\nalways exactly one super-special node if there exists at least one\r\nspecial node. For such trees, we aim to calculate the answer for them\r\nbased on their super-special node.Make the tree rooted from an arbitrary\r\nnode. Define as if you’re in vertext , you iterated children, so far the\r\nfarthest blue node has a distance of , the farthest red node has a\r\ndistance of , and if these two don’t belong to one subtree (if possible,\r\npreferably ), and otherwise. Iterate over new subtrees and use the\r\nfunction defined before to end up with a computable implementation!Now\r\nadd another dimension to the above DP to keep track of if there is any\r\nblue node with distance one less than the farthest blue, or a red node\r\nwith distance one less than the farthest red. Note that this really\r\ndoesn’t change anything. The above DP, though correct, won’t give us a\r\ngood solution and is only explained for gaining deeper insight. After\r\ntruly understanding what is going on and what we are looking for, we can\r\nbreak down the same idea and calculate it manually, which will result in\r\na solution in the end. The primary fact to notice is that if the number\r\nof edges between two farthest red vertices is even, then it can be\r\nproven that the middle vertex of this path is a special node, and if\r\nodd, the middle edge is a special edge. As explaining everything in\r\ndetail takes forever, try to prove the things we missed yourself and ask\r\nif you encountered any issues.\r\n",
    "name": "F. Shoo Shatters the Sunshine",
    "statement": "You are given a tree with n vertices, where each vertex can be colored\r\nred, blue, or white. The of a coloring is defined as the maximum\r\ndistance^{\r\ntext{ }} between a red and a blue vertex.Formally, if we denote the\r\ncolor of the i-th vertex as c_i, the coolness of a coloring is\r\nmax d(u, v) over all pairs of vertices 1\r\nle u, v\r\nle n where c_u is and c_v is . If there are no red or no blue vertices,\r\nthe coolness is zero.Your task is to calculate the sum of coolness over\r\nall 3^n possible colorings of the tree, modulo 998\r\n,244\r\n,353.^{\r\ntext{ }}The distance between two vertices a and b in a tree is equal to\r\nthe number of edges on the unique simple path between vertex a and\r\nvertex b.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "trees"
    ],
    "dificulty": "3300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\F. Shoo Shatters the Sunshine.json",
    "hint": [
        "Hint 1 What are some properties of such colored trees?",
        "Hint 2 Is the farthest blue and red node unique?",
        "Hint 3 Should we look for an solution or optimizes a slower one?"
    ]
}