{
    "link": "https://codeforces.com//contest/126/problem/C",
    "problemId": "664",
    "problem_idx": "C",
    "shortId": "126C",
    "contest_number": "126",
    "problem_submissions": {
        "E": [
            854113,
            853528,
            853478
        ],
        "D": [
            848548,
            848806,
            851249,
            849307,
            848628,
            849555,
            849207,
            847738,
            847195,
            849847,
            847564,
            850037,
            851976,
            851517
        ],
        "C": [
            845968,
            846820,
            845605,
            845826,
            846897,
            846767,
            847633,
            846234,
            847958,
            848103,
            849052,
            847621,
            847480,
            852294,
            848150
        ],
        "B": [
            845264,
            845888,
            844695,
            845238,
            845702,
            845923,
            846711,
            844555,
            845924,
            846945,
            845744,
            846359,
            845914,
            845709
        ],
        "A": [
            844313,
            845180,
            853880,
            880738,
            852290,
            845616,
            850019,
            845773,
            850503,
            845064,
            844238
        ]
    },
    "name": "C. E-reader Display",
    "statement": "After years of hard work scientists invented an absolutely new e-reader\r\ndisplay. The new display has a larger resolution, consumes less energy\r\nand its production is cheaper. And besides, one can bend it. The only\r\ninconvenience is highly unusual management. For that very reason the\r\ndevelopers decided to leave the e-readers\u2019 software to programmers.The\r\ndisplay is represented by square of pixels, each of which can be either\r\nblack or white. The display rows are numbered with integers from to\r\nupside down, the columns are numbered with integers from to from the\r\nleft to the right. The display can perform commands like \"\". When a\r\ntraditional display fulfills such command, it simply inverts a color of\r\n, where is the row number and is the column number. But in our new\r\ndisplay every pixel that belongs to at least one of the segments and\r\n(both ends of both segments are included) inverts a color.For example,\r\nif initially a display in size is absolutely white, then the sequence of\r\ncommands , , , leads to the following changes: You are an e-reader\r\nsoftware programmer and you should calculate minimal number of commands\r\nneeded to display the picture. You can regard all display pixels as\r\ninitially white.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define N 2010\nchar s[N][N];int n,S=0;bool v1[N],v2[N],w1[N],w2[N];\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++)scanf(\"%s\",s[i]);\n\tfor(int i=n-1;i>0;i--)\n\t\tfor(int j=i;j<n;j++)\n\t\t\tif((s[j][j-i]-'0')^v1[j]^v2[j-i])S++,v1[j]^=1,v2[j-i]^=1;\n\tfor(int i=n-1;i>0;i--)\n\t\tfor(int j=i;j<n;j++)\n\t\t\tif((s[j-i][j]-'0')^w1[j-i]^w2[j])S++,w1[j-i]^=1,w2[j]^=1;\n\tfor(int i=0;i<n;i++)\n\t\tif((s[i][i]-'0')^v1[i]^v2[i]^w1[i]^w2[i])S++;\n\tprintf(\"%d\\n\",S);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. E-reader Display.json",
    "editorial_link": "https://codeforces.com/blog/entry/3140",
    "editorial": "You can see that every command i,?j you should do no more than once. Also order of commands doesn't matter. Actually, sequence of command you can represent as boolean matrix A with size n?\u00d7?n, where aij?=?1 mean that you do the command i,?j, and aij?=?0 mean that you don't do it.\n\nLet us describe one way to construct the matrix.\n\nLet the starting image is boolean matrix G. A boolean matrix B of size n?\u00d7?n stores intermediate image that you will recieve during process of doing commands.\n\nFor the upper half of matrix G without main diagonal you should move line by line from the up to the down. For every line you should move from the right to the left. You can see that for every positions all nonconsidered positions do not affect the current position. So, if you see that values for position  i,?j in the matrices G and B are different, you should do command i,?j: set in the matrix A aij?=?1, and change segments (i,?i)?-?(i,?j) and (j,?j)?-?(i,?j) in the matrix B.\n\nFor the lower half of the matrix G without main diagonal you should do it absolutely symmetric. At the end you should iterate over main diagonal. Here it should be clear.\n\nWell, for matrix G you always can build matrix A and do it by exactly one way. It mean that this way requires minimum number of commands. So, you can get answer for problem by following way: you can build the matrix A from the matrix G and output number of ones in the matrix A.\n\nThere is only one problem that you should solve. Algorithm that you can see above works in O(n3), that doesn't fit into time limits. Let's speed up it to O(n2). Consider in the matrix B the upper half without main diagonal. During doing commands all columns of cells that placed below current position will have same values. Values above current position are not matter for us. Therefore instead of the matrix B you can use only one array that stores values of columns. It allows you do every command in O(1) instead of O(n). This optimization gives a solution that works in O(n2)."
}