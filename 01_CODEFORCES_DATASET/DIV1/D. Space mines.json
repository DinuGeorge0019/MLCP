{
    "link": "https://codeforces.com//contest/89/problem/D",
    "problemId": "478",
    "problem_idx": "D",
    "shortId": "89D",
    "contest_number": "89",
    "problem_submissions": {
        "D": [
            492261,
            492054,
            491644,
            492548,
            491919,
            491966,
            492524,
            492023,
            492270,
            493211
        ],
        "C": [
            491274,
            491590,
            494170,
            491155,
            494716,
            494714,
            493157,
            493915,
            493856,
            491944,
            492125,
            491378,
            493230,
            494090,
            494024,
            492438
        ],
        "B": [
            490604,
            490688,
            493051,
            493381,
            493248,
            493828,
            491678,
            490992,
            493466,
            493681,
            491186,
            492876,
            492435,
            494470,
            494439,
            493776
        ],
        "A": [
            489185,
            489155,
            490046,
            490404,
            490021,
            489082,
            490779,
            489569,
            490295,
            489887,
            489342,
            493955,
            489473,
            496907
        ]
    },
    "name": "D. Space mines",
    "statement": "Once upon a time in the galaxy of far, far away...Darth Wader found out\r\nthe location of a rebels\u2019 base. Now he is going to destroy the base (and\r\nthe whole planet that the base is located at), using the Death Star.When\r\nthe rebels learnt that the Death Star was coming, they decided to use\r\ntheir new secret weapon space mines. Let\u2019s describe a space mine\u2019s\r\nbuild.Each space mine is shaped like a ball (we\u2019ll call it the mine\r\nbody) of a certain radius with the center in the point . Several spikes\r\nprotrude from the center. Each spike can be represented as a segment,\r\nconnecting the center of the mine with some point , such that\r\n(transporting long-spiked mines is problematic), where is the length of\r\nthe segment connecting and . It is convenient to describe the point by a\r\nvector such that .The Death Star is shaped like a ball with the radius\r\nof ( exceeds any mine\u2019s radius). It moves at a constant speed along the\r\nvector at the speed equal to . At the moment the rebels noticed the Star\r\nof Death, it was located in the point .The rebels located space mines\r\nalong the Death Star\u2019s way. You may regard the mines as being idle. The\r\nDeath Star does not know about the mines\u2019 existence and cannot notice\r\nthem, which is why it doesn\u2019t change the direction of its movement. As\r\nsoon as the Star of Death touched the mine (its body or one of the\r\nspikes), the mine bursts and destroys the Star of Death. A touching is\r\nthe situation when there is a point in space which belongs both to the\r\nmine and to the Death Star. It is considered that Death Star will not be\r\ndestroyed if it can move infinitely long time without touching the\r\nmines.Help the rebels determine whether they will succeed in destroying\r\nthe Death Star using space mines or not. If they will succeed, determine\r\nthe moment of time when it will happen (starting from the moment the\r\nDeath Star was noticed).\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<math.h>\nstruct XD{\n    double x,y,z;\n    void input(){scanf(\"%lf%lf%lf\",&x,&y,&z);}\n    XD operator+(const XD& b)const{\n\tXD a;\n\ta.x=x+b.x;\n\ta.y=y+b.y;\n\ta.z=z+b.z;\n\treturn a;\n    }\n};\nXD a,v;\ndouble r;\ninline double MIN(double a,double b){return a<b?a:b;}\ninline double solve(XD a,XD b,XD v,double r){//a speed v shortest time dis <=r\n    //Assume t=0 no touch\n    double c1,c2,c3;\n    c1=v.x*v.x+v.y*v.y+v.z*v.z;\n    c2=v.x*(a.x-b.x)*2+v.y*(a.y-b.y)*2+v.z*(a.z-b.z)*2;\n    c3=(a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y)+(a.z-b.z)*(a.z-b.z)-r*r;\n//    printf(\"%lf %lf %lf\\n\",c1,c2,c3);\n    //(a.x+v.x*t-b.x)^2+... <=r*r -> c1t^2+c2t+c3<=0\n    if(c2*c2-4*c1*c3<0)return 1e100;\n    double s1=(-c2-sqrt(c2*c2-4*c1*c3))/(2*c1);\n    if(s1<0)return 1e100;\n    else return s1;\n}\nint main(){\n    a.input();v.input();scanf(\"%lf\",&r);\n    int n,i;\n    scanf(\"%d\",&n);\n    double mint=1e100;\n    for(i=0;i<n;i++){\n\tXD cen;\n\tcen.input();\n\tdouble ri;\n\tscanf(\"%lf\",&ri);\n\tmint=MIN(mint,solve(a,cen,v,r+ri));\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t    XD dif;\n\t    dif.input();\n\t    mint=MIN(mint,solve(a,cen+dif,v,r));\n\t}\n    }\n    if(mint>1e99)puts(\"-1\");\n    else printf(\"%.10lf\\n\",mint);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Space mines.json",
    "editorial_link": "https://codeforces.com//blog/entry/2162",
    "editorial": "Initially lets pump all mines on radius of Death Star and squeeze Death Star into point. Now you should determine an intersection of a ray with obtained figures.\n\nMine's body with radius r is pumped into ball with radius r?+?R. Every mine's spike is pumped into union of two balls with radius R and cylinder. One of these balls lies inside of pumped mine's body, therefore you can don't consider it. Let length of spike is r0. Then cylinder will have heigth r0 and radius R. A distance between center of one base of the cylinder and edge of another one equals . Following unequation proves that this distance always less than radius of pumped mine's body and cylinder lies inside of the pumped mine's body:\n\n\n\nSo, you can don't consider the cylinders too. For every spike you should store only ball of radius R with center in a peak of the spike.\n\nNow we have set of balls, we are needed to determine a time in that some point collides with every of those balls. Lets write an equation:\n\n|A?+?vt?-?O|?=?R,\n\nwhere A is start position of point, v is vector of its velocity, O is center of ball, R is its radius. Lets rewrite equation in scalar variables:\n\n(Ax?+?vxt?-?Ox)2?+?(Ay?+?vyt?-?Oy)2?+?(Az?+?vzt?-?Oz)2?=?R2.\n\nWhen you expand brackets, you receive some quadratic equation from variable t:\n\nAt2?+?Bt?+?C?=?0.\n\nYou should solve it and choose minimal root (minimal root is time of the first collision of point with the ball, maximal one is time of the second collision). Check than root more than 0.\n\nNow you should determine all times and choose minimum of them. If there are no collisions, answer is -1.\n\nAll checking should be done in integer 64bit numbers for absolutely precision."
}