{
    "link": "https://codeforces.com//contest/1396/problem/C",
    "problemId": "712378",
    "problem_idx": "C",
    "shortId": "1396C",
    "contest_number": "1396",
    "problem_submissions": {
        "E": [
            91420325,
            91433351,
            91395963,
            91403549,
            91401123,
            91402411,
            91409596,
            91414724,
            91398509,
            91431034,
            98258243,
            91413242,
            91418927,
            91416810,
            100070579,
            100069379,
            91404326
        ],
        "D": [
            91388366,
            91423836,
            91402660,
            91943822,
            91410504,
            91407249,
            91405665,
            91404955,
            92387331,
            91409139,
            91420254
        ],
        "C": [
            91373061,
            91380961,
            91375173,
            91383628,
            91383246,
            91370624,
            91378488,
            91375423,
            91372747,
            91401459,
            91603982,
            91437619,
            91381246,
            91378361,
            91395543,
            91392372,
            91380457,
            91391062,
            91392240,
            91390152,
            91380894
        ],
        "B": [
            91358979,
            91360664,
            91363530,
            91358594,
            91358724,
            91359119,
            91363085,
            91359172,
            91358745,
            91363826,
            91362155,
            91366158,
            91362751,
            91365359,
            91360322,
            91364106,
            91365992,
            91378262,
            91361724,
            91365744
        ],
        "A": [
            91354401,
            91357111,
            91359227,
            91352552,
            91352349,
            91355053,
            91358883,
            91356416,
            91355726,
            91357237,
            91356536,
            91360026,
            91358794,
            91362354,
            91356173,
            91360020,
            91356069,
            91361174,
            91357755,
            91354128
        ]
    },
    "name": "C. Monster Invaders",
    "statement": "Ziota found a video game called \"Monster Invaders\".Similar to every\r\nother shooting RPG game, \"Monster Invaders\" involves killing monsters\r\nand bosses with guns.For the sake of simplicity, we only consider two\r\ndifferent types of monsters and three different types of guns.Namely,\r\nthe two types of monsters are: a normal monster with 1 hp. a boss with 2\r\nhp. And the three types of guns are: Pistol, deals 1 hp in damage to one\r\nmonster, r_1 reloading time Laser gun, deals 1 hp in damage to all the\r\nmonsters in the current level (including the boss), r_2 reloading time\r\nAWP, instantly kills any monster, r_3 reloading time The levels of the\r\ngame can be considered as an array a_1, a_2,\r\nldots, a_n, in which . Due to the nature of the game, .If Ziota damages\r\nthe boss but does not kill it immediately, (adjacent levels of level i\r\n(1 < i < n) are levels i - 1 and i + 1, the only adjacent level of level\r\n1 is level 2, the only adjacent level of level n is level n - 1). Ziota\r\ncan also choose to move to an adjacent level at any time. In order not\r\nto disrupt the space-time continuum within the game, Ziota starts the\r\ngame at level 1. The objective of the game is rather simple, to kill all\r\nthe bosses in all the levels. He is curious about the minimum time to\r\nfinish the game (assuming it takes no time to shoot the monsters with a\r\nloaded gun and Ziota has infinite ammo on all the three guns). Please\r\nhelp him find this value.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 30.08.2020 18:01:47       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p);\n\ntemplate <typename A, typename B, typename C>\nstring to_string(tuple<A, B, C> p);\n\ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p);\n\nstring to_string(const string& s) {\n  return '\"' + s + '\"';\n}\n\nstring to_string(const char* s) {\n  return to_string((string) s);\n}\n\nstring to_string(bool b) {\n  return (b ? \"true\" : \"false\");\n}\n\nstring to_string(vector<bool> v) {\n  bool first = true;\n  string res = \"{\";\n  for (int i = 0; i < static_cast<int>(v.size()); i++) {\n    if (!first) {\n      res += \", \";\n    }\n    first = false;\n    res += to_string(v[i]);\n  }\n  res += \"}\";\n  return res;\n}\n\ntemplate <size_t N>\nstring to_string(bitset<N> v) {\n  string res = \"\";\n  for (size_t i = 0; i < N; i++) {\n    res += static_cast<char>('0' + v[i]);\n  }\n  return res;\n}\n\ntemplate <typename A>\nstring to_string(A v) {\n  bool first = true;\n  string res = \"{\";\n  for (const auto &x : v) {\n    if (!first) {\n      res += \", \";\n    }\n    first = false;\n    res += to_string(x);\n  }\n  res += \"}\";\n  return res;\n}\n\ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p) {\n  return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\";\n}\n\ntemplate <typename A, typename B, typename C>\nstring to_string(tuple<A, B, C> p) {\n  return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \")\";\n}\n\ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p) {\n  return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \", \" + to_string(get<3>(p)) + \")\";\n}\n\nvoid debug_out() { cerr << endl; }\n\ntemplate <typename Head, typename... Tail>\nvoid debug_out(Head H, Tail... T) {\n  cerr << \" \" << to_string(H);\n  debug_out(T...);\n}\n\n#ifdef LOCAL\n#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n#else\n#define debug(...) 42\n#endif\n\nconst long long inf = (long long) 4e18;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n;\n  long long r1, r2, r3, d;\n  cin >> n >> r1 >> r2 >> r3 >> d;\n  vector<int> a(n);\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n  }\n  long long dp0 = 0;\n  long long dp1 = inf;\n  for (int i = 0; i < n; i++) {\n    long long cost1 = a[i] * r1 + r3;\n    long long cost2 = min(cost1, min(a[i] * r1 + r1 + r1, r2 + r1));\n    long long new_dp0 = inf;\n    long long new_dp1 = inf;\n    new_dp0 = min(new_dp0, dp0 + cost1);\n    new_dp1 = min(new_dp1, dp0 + cost2 + d);\n    new_dp0 = min(new_dp0, dp1 + cost2 + d);\n    if (i == n - 1) {\n      new_dp0 = min(new_dp0, dp1 + cost1);\n    }\n    dp0 = new_dp0;\n    dp1 = new_dp1;\n    debug(i, cost1, cost2, dp0, dp1);\n  }\n  cout << min(dp0, dp1 + d) + d * (n - 1) << '\\n';\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "implementation"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Monster Invaders.json",
    "editorial_link": "https://codeforces.com//blog/entry/82142",
    "editorial": "Let denote a rectangle with opposite corners and . For convenience,\r\nassume and .Letâs try solving the problem if coordinates are in range .\r\nWe could easily do this by coordinates compression.First, letâs look at\r\nthe problem with fixed. We define to be the smallest integer such that\r\nand is a rectangle (If there is no such integer, let ). It can be proven\r\nthat is non-decreasing, i.e. if , then .Now, letâs see how changes when\r\nwe iterate over a fixed . It is hard to add points to the set, so we\r\nwill try to support deleting points operation. For point , we have the\r\nfollowing definitions:Let set . Let with the largest .Let set . Let with\r\nthe smallest .(Note that or might represent empty set).With these two\r\nfunctions, we could see how changes after we delete point . It looks\r\nsomething like this: For every such that ;We could support this\r\noperation using segment tree with lazy propagation. The total time\r\ncomplexity is .\r\n",
    "hint": []
}