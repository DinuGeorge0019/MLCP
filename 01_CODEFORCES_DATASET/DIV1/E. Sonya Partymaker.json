{
    "link": "https://codeforces.com//contest/713/problem/E",
    "problemId": "71349",
    "problem_idx": "E",
    "shortId": "713E",
    "contest_number": "713",
    "problem_submissions": {
        "C": [
            26460974,
            20575910,
            20583094,
            20581559,
            20581733,
            20583408,
            20579455,
            20582507,
            20580790,
            20585663,
            37183524,
            20586646,
            20578141,
            20587141,
            20583393,
            20576023,
            20577632,
            20581746,
            20588485,
            80008205,
            79474335,
            20583081,
            20586247,
            20589607
        ],
        "D": [
            20589016,
            20588044,
            20589791,
            20590045,
            20590281,
            20591597,
            20591896,
            20601734,
            20601720,
            20594132,
            20593560,
            20593079,
            20596440,
            20593442,
            20596199,
            20584415,
            20594603,
            20595698,
            20593723,
            20595881,
            24960690,
            20593574
        ],
        "B": [
            20583151,
            20580004,
            20578178,
            20578836,
            20578366,
            20585770,
            20579555,
            20576646,
            20583230,
            20581847,
            20589836,
            20583553,
            20579782,
            20588723,
            20589144,
            20578568,
            20589488,
            20583796,
            20583317
        ],
        "A": [
            20572754,
            20572042,
            20571909,
            20572204,
            20571875,
            20571504,
            20584123,
            20571416,
            20574058,
            20587954,
            20571916,
            20573302,
            20574693,
            20573904,
            20589571,
            20575437,
            20571888,
            20573337,
            20572118,
            20572133
        ],
        "E": [
            20940861,
            20595260
        ]
    },
    "name": "E. Sonya Partymaker",
    "statement": "Owl Sonya decided to become a partymaker. To train for this role she\r\ngather all her owl friends in the country house. There are chairs\r\nlocated in a circle and consequently numbered with integers from to .\r\nThus, chairs and are neighbouring for all from to . Chairs and are also\r\nneighbouring. Some chairs are occupied by her friends. There are friends\r\nin total. No two friends occupy the same chair. Rules are the following:\r\nEach participant removes from the game the chair he is currently sitting\r\non. Each of the participants choose a direction that she will follow:\r\nclockwise (indices increase, from goes to ) and counter-clockwise\r\n(indices decrease, from goes to ). This direction may coincide or be\r\ndifferent for any pair of owls. Each turn all guests move one step in\r\nthe chosen directions. If some guest move to the position with a chair\r\nthere, he removes this chair from the game. Game ends if there are no\r\nmore chairs left in the game. Owls are very busy and want to get rid of\r\nthe game as soon as possible. They cooperate to pick the direction. Your\r\ngoal is to find the minimum number o moves required to finish the game.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <algorithm>\n\nconst int N = 100000 + 10;\n\nint m, n, a[N];\n\nvoid init() {\n  int p = -1, v = -1;\n  for (int i = 0; i < n; ++i) {\n    int t = (a[(i + 1) % n] - a[i] + m) % m;\n    if (t > v) v = t, p = i;\n  }\n  std::rotate(a, a + (p = (p + 1) % n), a + n);\n  for (int i = 1; i < n; ++i) if (a[i] < a[i - 1]) a[i] += m;\n  for (int i = 0, j = a[0]; i < n; ++i) a[i] -= j;\n}\n\nint f[N], b;\n\nint dp(int s) {\n  std::fill(f + s, f + n, 0);\n  for (int i = s; i < n; ++i) {\n    if (f[i - 1] + 1 < a[i] - b) return false;\n    f[i] = a[i];\n    if (f[i - 1] + 1 >= a[i]) f[i] = std::max(f[i], a[i] + b);\n    if (i > s && f[i - 2] + 1 >= a[i] - b) f[i] = std::max(f[i], a[i - 1] + b);\n  }\n  return f[n - 1];\n}\n\nbool check() {\n  f[0] = 0;\n  if (dp(1) + 1 >= m - b) return true;\n  if (a[0] + b + 1 >= a[1]) {\n    f[1] = std::max(a[0] + b, a[1]);\n    if (dp(2) + 1 >= m + std::min(0, a[1] - b)) return true;\n  }\n  return false;\n}\n\nint main() {\n  scanf(\"%d%d\", &m, &n);\n  for (int i = 0; i < n; ++i) scanf(\"%d\", &a[i]), --a[i];\n  if (n == 1) return printf(\"%d\\n\", m - 1), 0;\n  init();\n  int l = 0, r = m - a[n - 1];\n  while (l < r) {\n    int mid = (l + r) >> 1;\n    if (b = mid, check()) r = mid; else l = mid + 1;\n  }\n  printf(\"%d\\n\", l);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp"
    ],
    "dificulty": "3300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Sonya Partymaker.json",
    "editorial_link": "https://codeforces.com//blog/entry/47094",
    "editorial": "Will use binary search to find the answer. Assume that we need to know\r\nif it is enough minutes to visit each vertex. Lets is equal to minimum\r\nnumber of vertices to the left of , which wasnât visited yet, second\r\nparameter is equal to , if we haveât launched robot from vertex . I.e.\r\nwhen vertices havenât been visited, and if then vertices to the right we\r\nstill can visit. We need to calculate such DP for two starting states (,\r\n). Now we need to implement next: if then distance can be walked and we\r\nneed to update by if then we can update by using , update using , update\r\nWalk in time is also possible if (depending on start state)] . Need to\r\nassume few other facts: if then we can repeat with param , and if, ,\r\nthen distance can be walked To assume every case we need to calculate\r\nthis DP for each pair of sequent vertices\r\n",
    "hint": []
}