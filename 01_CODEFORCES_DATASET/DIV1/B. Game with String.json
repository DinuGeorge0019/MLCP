{
    "link": "https://codeforces.com//contest/930/problem/B",
    "problemId": "162259",
    "problem_idx": "B",
    "shortId": "930B",
    "contest_number": "930",
    "problem_submissions": {
        "E": [
            35937874,
            35940246,
            35942003,
            35941857,
            35942922,
            35943711,
            35940428,
            35939130,
            35941409,
            35945119,
            35945455,
            35938266,
            35942264,
            35942725
        ],
        "D": [
            35934631,
            35937311,
            35938039,
            35939179,
            35937578,
            35934166,
            35942235,
            35945157,
            35944906,
            35941913,
            35941573,
            35937960,
            35938844,
            35940488,
            35939332,
            35939670
        ],
        "C": [
            35931048,
            35931464,
            35931854,
            35931257,
            35932262,
            35938659,
            35933325,
            35930949,
            35933516,
            35933919,
            35936875,
            35931415,
            35932526,
            35933702,
            35934204,
            35934502,
            35932728,
            35934206,
            35934527
        ],
        "B": [
            35928663,
            35929193,
            35929409,
            35928730,
            35929849,
            35928584,
            35929521,
            35928824,
            35930726,
            35930401,
            35933251,
            35929420,
            35929927,
            35930360,
            35932014,
            35931682,
            35930124,
            35931864,
            35931720
        ],
        "A": [
            35926805,
            35926962,
            35927064,
            35926854,
            35927078,
            35929726,
            35930445,
            35926856,
            35927823,
            35927432,
            35928757,
            35926924,
            35926883,
            35927329,
            35927301,
            35927988,
            35927191,
            35927741,
            35928171
        ]
    },
    "name": "B. Game with String",
    "statement": "Vasya and Kolya play a game with a string, using the following rules.\r\nInitially, Kolya creates a string , consisting of small English letters,\r\nand uniformly at random chooses an integer from a segment . He tells\r\nVasya this string , and then shifts it letters to the left, i. e.\r\ncreates a new string . Vasya does not know the integer nor the string ,\r\nbut he wants to guess the integer . To do this, he asks Kolya to tell\r\nhim the first letter of the new string, and then, after he sees it, open\r\none more letter on some position, which Vasya can choose.Vasya\r\nunderstands, that he can’t guarantee that he will win, but he wants to\r\nknow the probability of winning, if he plays optimally. He wants you to\r\ncompute this probability. Note that Vasya wants to know the value of\r\nuniquely, it means, that if there are at least two cyclic shifts of that\r\nfit the information Vasya knowns, Vasya loses. Of course, at any moment\r\nof the game Vasya wants to maximize the probability of his win.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing ll = long long;\nusing ld = long double;\nusing ull = unsigned long long;\nusing namespace std;\n\nconst int MAXN = 5001;\n\nvector<int> p[MAXN];\n\nint main() {\n#ifdef BZ\n    freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n#endif\n    ios_base::sync_with_stdio(false); cout.setf(ios::fixed); cout.precision(20); cout.tie(nullptr); cin.tie(nullptr);\n    string s;\n    cin >> s;\n    int n = s.length();\n    string t = s + s;\n\n    for (int i = 0; i < n; ++i) {\n        p[s[i] - 'a'].push_back(i);\n    }\n\n    int ans = 0;\n\n    for (int i = 0; i < 26; ++i) {\n        int mx = 0;\n\n        for (int j = 0; j < n; ++j) {\n            vector<int> cn(26, 0);\n            for (int x : p[i]) {\n                ++cn[t[x + j] - 'a'];\n            }\n\n            int cur = 0;\n            for (int y : cn) {\n                cur += (y == 1);\n            }\n\n            mx = max(mx, cur);\n        }\n\n        ans += mx;\n    }\n\n    cout << ld(ans) / n << \"\\n\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "probabilities",
        "strings"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Game with String.json",
    "editorial_link": "https://codeforces.com//blog/entry/58177",
    "editorial": "Let's consider all possible c1 that will be first in t. Then, let's consider all possible numbers of second letter that Vasya will ask about  this will be d. If pair of letters (c1, c2) occurs only once at d distance, than if c2 opens second time, Vasya will be able to determine shift.\n\nSolution. Let's loop through all letters at d distance from all c1 letters and for each symbol c2 we will calculate number of such letters. This can be done in O(cnt(c1)), where cnt(c1) is number of letters c1 in initial string. Now, if we fix such d after opening c1, that maximizes number of unique pairs(we will name it p) (c1, c2) at d distance, this will be optimal d, and conditional probability of victory in situation of fixed c1 equals p?/?cnt(c1).\n\nNow we only need to sum up conditional probabilities for different c1. Probability of c1 equals cnt(c1)?/?n, thus answer is .",
    "hint": []
}