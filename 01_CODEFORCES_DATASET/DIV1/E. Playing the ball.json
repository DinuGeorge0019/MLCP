{
    "link": "https://codeforces.com//contest/420/problem/E",
    "problemId": "8702",
    "problem_idx": "E",
    "shortId": "420E",
    "contest_number": "420",
    "problem_submissions": {
        "D": [
            6447019,
            6443008,
            6912685,
            6445957,
            6445329,
            6443168,
            6444131,
            6443396,
            6445355,
            6451593,
            6451581,
            6451576,
            6445477,
            6445823,
            6445771,
            6446204,
            6445678,
            6446109,
            6446112,
            6453468,
            6446223,
            6446441
        ],
        "E": [
            6445798,
            6444814,
            6444979,
            6445922,
            97601411,
            6445707,
            6451168,
            6446265,
            6453470,
            6452703
        ],
        "B": [
            6443597,
            6444025,
            6443126,
            6443737,
            6443495,
            6442572,
            6444279,
            6445309,
            6444923,
            6442844,
            6443551,
            6443899,
            6443352,
            6444309,
            6444403,
            6443539,
            6442859,
            6444609,
            6443627
        ],
        "C": [
            6442567,
            6449379,
            6444178,
            6442191,
            6444286,
            6443894,
            6442929,
            6444396,
            6449718,
            6444138,
            6442459,
            6444175,
            6443120,
            6442842,
            6444661,
            6443838,
            6443047,
            6444348
        ],
        "A": [
            6440359,
            6440343,
            6443435,
            6440637,
            6440896,
            6440723,
            6443481,
            6440285,
            6440476,
            6440399,
            6440452,
            6440422,
            6440497,
            6442028,
            6443134,
            6440669,
            6440645,
            6440656,
            6441090
        ]
    },
    "name": "E. Playing the ball",
    "statement": "A coder cannot sit and code all day. Sometimes it is a good idea to rise\r\nfrom the desk, have a rest, have small talk with colleagues and even\r\nplay. The coders of the F company have their favorite ball game.Let\u2019s\r\nimagine the game on the plane with a cartesian coordinate system. The\r\npoint (0, 0) contains the player who chooses an arbitrary direction and\r\nthrows a ball in that direction. The ball hits the plane at distance\r\nfrom the player\u2019s original position and continues flying in the same\r\ndirection. After the ball hits the plane for the first time, it flies on\r\nand hits the plane again at distance from the player\u2019s original position\r\nand so on (it continue flying in the chosen direction and hitting the\r\nplane after each units). All coders in the F company are strong, so the\r\nball flies infinitely far away.The plane has circles painted on it. If a\r\nball hits the plane and hits a circle that is painted on the plane\r\n(including its border), then the player gets one point. The ball can hit\r\nmultiple circles at once and get one point for each of them (if the ball\r\nhits some circle times during the move, the player also gets points).\r\nCount the maximum number of points a player can get if he throws a ball\r\nin the arbitrary direction. Note that the direction may have real\r\ncooridinates.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#define FOR(i,s,e) for (int i=(s); i<(e); i++)\n#define FOE(i,s,e) for (int i=(s); i<=(e); i++)\n#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)\n#define EPS 1e-8\n#define N 20005\nusing namespace std;\n\nconst double PI = acos(-1.0);\n\nstruct vect{\n\tdouble x, y;\n\tvect(){}\n\tvect(double x, double y) : x(x), y(y){}\n\tvect operator + (vect const &T) const{return vect(x+T.x, y+T.y);}\n\tvect operator - (vect const &T) const{return vect(x-T.x, y-T.y);}\n\tvect operator * (double const &t) const{return vect(x*t, y*t);}\n\tdouble operator % (vect const &T) const{return x*T.x + y*T.y;}\n\tdouble operator ^ (vect const &T) const{return x*T.y - y*T.x;}\n\tvect rot(double t) const{return vect(x*cos(t)-y*sin(t), x*sin(t)+y*cos(t));}\n\tdouble len(){return sqrt(x*x + y*y);}\n\tint get(){return scanf(\"%lf%lf\", &x, &y);}\n};\n\nstruct dat{\n\tint v;\n\tdouble p;\n\tbool operator < (dat const &T) const{return p < T.p;}\n};\n\ninline double fix(double x){\n\tif (x > 1.) return 1.;\n\tif (x < -1.) return -1.;\n\treturn x;\n}\n\nint solve(vect c1, double r1, vect c2, double r2, vect &P1, vect &P2){\n\tvect u = c2 - c1;\n\tdouble d = u.len(), t;\n\tif (d - EPS > r1 + r2 || d + r1 + EPS < r2 || d + r2 + EPS < r1) return 0;\n\tt = acos(fix((d*d + r1*r1 - r2*r2) / (2*r1*d)));\n\tu = u * (r1 / u.len());\n\tP1 = c1 + u.rot(t);\n\tP2 = c1 + u.rot(-t);\n\treturn 1;\n}\n\nint n, d, m;\nvect cen;\ndat evt[N * 100];\n\nvoid add(double x, double y){\n\t// printf(\"%f %f\\n\", x, y);\n\tevt[m++] = (dat){1, x - EPS};\n\tevt[m++] = (dat){-1, y + EPS};\n}\n\nint main(){\n\tscanf(\"%d%d\", &n, &d);\n\tm = 0;\n\tFOR(i,0,n){\n\t\tvect cen, p[2];\n\t\tdouble dc, d1, d2, r, at[2];\n\t\tint c1, c2;\n\t\tcen.get(), scanf(\"%lf\", &r);\n\t\tdc = cen.len();\n\t\td1 = dc - r;\n\t\td2 = dc + r;\n\t\tc1 = max(1, (int)(d1 / d) - 3);\n\t\tc2 = (int)(d2 / d) + 3;\n\t\t\n\t\tFOE(j,c1,c2) if (solve(vect(0, 0), j * d, cen, r, p[0], p[1])){\n\t\t\tFOR(k,0,2) at[k] = atan2(p[k].y, p[k].x);\n\t\t\tif (at[0] <= at[1] && at[1] <= at[0] + PI);\n\t\t\telse if (at[0] >= 0 && at[1] <= at[0] - PI);\n\t\t\telse swap(at[0], at[1]);\n\t\t\tif (at[1] < at[0]) add(-PI, at[1]), add(at[0], PI);\n\t\t\telse add(at[0], at[1]);\n\t\t}\n\t}\n\t\n\tsort(evt, evt + m);\n\tint cnt = 0, ret = 0;\n\tFOR(i,0,m){\n\t\tcnt += evt[i].v;\n\t\tret = max(ret, cnt);\n\t}\n\n\tprintf(\"%d\\n\", ret);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Playing the ball.json",
    "editorial_link": "https://codeforces.com//blog/entry/11871",
    "editorial": "Let\u00e2\u0080\u0099s claim that we have ray and the infinite number of balls on it in\r\nthis problem. The -th ball is placed on the distance from the begging of\r\nthe ray. Let\u00e2\u0080\u0099s note that in the answer must be the ball which is placed\r\non the border of some cirlce. The second observation is the following.\r\nLet\u00e2\u0080\u0099s consider any circle. The number of angles, on which we can rotate\r\nour ray so that any ball will be on the border of this cirlce, doesn\u00e2\u0080\u0099t\r\nexceed . Let\u00e2\u0080\u0099s call these angles critical. Let\u00e2\u0080\u0099s put all critical angles\r\nfrom each circle to the array and sort. After that let\u00e2\u0080\u0099s consider every\r\ncirlce one-by-one. When we consider some cirlce we are going to find all\r\ncritical angles and sort them. So the number of balls, which will be\r\ninside of the cirlce, will be the constant if we rotate our ray on every\r\nangle between the two neighbour critical angles. Let\u00e2\u0080\u0099s find the number\r\nof these balls. Let\u00e2\u0080\u0099s create array , where is the answer value if we\r\nrotate the ray on the angle . So after we find and the positions of\r\nneighbour critical angles in we need to perform add on the segment query\r\nin . After we processed all critical angles of all circles the maximum\r\nin the will be the answer.\r\n"
}