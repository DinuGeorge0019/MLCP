{"link": "https://codeforces.com//contest/1500/problem/F", "problemId": "922997", "problem_idx": "F", "shortId": "1500F", "contest_number": "1500", "problem_submissions": {"F": [109882523, 156894272, 156888570, 109926929, 109926191, 109893056, 109892507, 110407942], "E": [109869658, 109880186, 109882627, 109869772, 109883572, 110177251, 112227681, 112227008, 112226855], "C": [109851937, 109858563, 109855424, 109847448, 109897897, 109858583, 109868120, 109862817, 109862820, 109847704, 109864051, 109866901, 109862545, 109862473, 109864278, 109866655, 109866161, 109873497, 109866235, 109876064], "A": [109847522, 109845877, 109846878, 109889115, 109845620, 109845386, 109845664, 109845260, 109853758, 109847140, 109849368, 109845237, 109845429, 109846259, 109846562, 109868273, 109864425, 109846842, 109854328], "B": [109845439, 109853012, 109858233, 109878921, 109849145, 109848615, 109856685, 109852114, 109880910, 109854120, 109859099, 109849597, 109849728, 109854205, 109854819, 109853965, 109859327, 109857020, 109863440], "D": [109866969, 109867253, 109854472, 109863287, 109861346, 109868138, 109875304, 109871552, 109879597, 109878283, 109877726, 109880816, 109873581, 109879840, 109875506, 109884990, 109881921, 109883609]}, "name": "F. Cupboards Jumps", "statement": "In the house where Krosh used to live, he had n cupboards standing in a\r\nline, the i-th cupboard had the height of h_i. Krosh moved recently, but\r\nhe wasn\u2019t able to move the cupboards with him. Now he wants to buy n new\r\ncupboards so that they look as similar to old ones as possible.Krosh\r\ndoes not remember the exact heights of the cupboards, but for every\r\nthree consecutive cupboards he remembers the height difference between\r\nthe tallest and the shortest of them. In other words, if the cupboards\u2019\r\nheights were h_1, h_2,\r\nldots, h_n, then Krosh remembers the values w_i =\r\nmax(h_{i}, h_{i + 1}, h_{i + 2}) -\r\nmin(h_{i}, h_{i + 1}, h_{i + 2}) for all 1\r\nleq i\r\nleq n - 2.Krosh wants to buy such n cupboards that all the values w_i\r\nremain the same. Help him determine the required cupboards\u2019 heights, or\r\ndetermine that he remembers something incorrectly and there is no\r\nsuitable sequence of heights.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 13.03.2021 14:01:42       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p);\n\ntemplate <typename A, typename B, typename C>\nstring to_string(tuple<A, B, C> p);\n\ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p);\n\nstring to_string(const string& s) {\n  return '\"' + s + '\"';\n}\n\nstring to_string(const char* s) {\n  return to_string((string) s);\n}\n\nstring to_string(bool b) {\n  return (b ? \"true\" : \"false\");\n}\n\nstring to_string(vector<bool> v) {\n  bool first = true;\n  string res = \"{\";\n  for (int i = 0; i < static_cast<int>(v.size()); i++) {\n    if (!first) {\n      res += \", \";\n    }\n    first = false;\n    res += to_string(v[i]);\n  }\n  res += \"}\";\n  return res;\n}\n\ntemplate <size_t N>\nstring to_string(bitset<N> v) {\n  string res = \"\";\n  for (size_t i = 0; i < N; i++) {\n    res += static_cast<char>('0' + v[i]);\n  }\n  return res;\n}\n\ntemplate <typename A>\nstring to_string(A v) {\n  bool first = true;\n  string res = \"{\";\n  for (const auto &x : v) {\n    if (!first) {\n      res += \", \";\n    }\n    first = false;\n    res += to_string(x);\n  }\n  res += \"}\";\n  return res;\n}\n\ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p) {\n  return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\";\n}\n\ntemplate <typename A, typename B, typename C>\nstring to_string(tuple<A, B, C> p) {\n  return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \")\";\n}\n\ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p) {\n  return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \", \" + to_string(get<3>(p)) + \")\";\n}\n\nvoid debug_out() { cerr << endl; }\n\ntemplate <typename Head, typename... Tail>\nvoid debug_out(Head H, Tail... T) {\n  cerr << \" \" << to_string(H);\n  debug_out(T...);\n}\n\n#ifdef LOCAL\n#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n;\n  long long C;\n  cin >> n >> C;\n  vector<long long> w(n - 2);\n  for (int i = 0; i < n - 2; i++) {\n    cin >> w[i];\n  }\n  long long L = 0;\n  long long R = w[0];\n  set<long long> s;\n  long long k = 1;\n  long long b = 0;\n  vector<long long> Ls(n - 2);\n  vector<long long> Rs(n - 2);\n  vector<bool> flag(n - 2);\n  vector<long long> any(n - 2);\n  Ls[0] = L;\n  Rs[0] = R;\n  any[0] = L;\n  for (int i = 1; i < n - 2; i++) {\n    bool inside = false;\n    inside |= (L <= w[i] && w[i] <= R);\n    if (!inside) {\n      auto it = s.find((w[i] - b) / k);\n      inside |= (it != s.end());\n    }\n    flag[i] = inside;\n    if (inside) {\n      L = 0;\n      R = w[i];\n      s.clear();\n      k = 1;\n      b = 0;\n    } else {\n      if (L <= R && L > w[i]) {\n        L = -1;\n        R = -2;\n      }\n      while (!s.empty()) {\n        auto it = (k == 1 ? prev(s.end()) : s.begin());\n        if (k * (*it) + b <= w[i]) {\n          break;\n        }\n        s.erase(it);\n      }\n      if (L > R && s.empty()) {\n        cout << \"NO\" << '\\n';\n        return 0;\n      }\n      if (L <= R) {\n        any[i - 1] = L;\n      } else {\n        any[i - 1] = k * (*s.begin()) + b;\n      }\n      if (L <= R) {\n        L = w[i] - L;\n        R = w[i] - R;\n        swap(L, R);\n      }\n      // x -> k * x + b\n      // I want: x -> w - (k * x + b)\n      // x -> -k * x + (w - b)\n      k = -k;\n      b = w[i] - b;\n      s.insert((w[i] - b) / k);\n    }\n    debug(L, R, s, k, b);\n    Ls[i] = L;\n    Rs[i] = R;\n  }\n  cout << \"YES\" << '\\n';\n  vector<long long> d(n - 2);\n  if (L <= R) {\n    d.back() = L;\n  } else {\n    d.back() = k * (*s.begin()) + b;\n  }\n  debug(any);\n  for (int i = n - 3; i > 0; i--) {\n    if (flag[i]) {\n      d[i - 1] = w[i];\n    } else {\n      if (d[i] == w[i]) {\n        d[i - 1] = any[i - 1];\n      } else {\n        d[i - 1] = w[i] - d[i];\n      }\n    }\n    assert(0 <= d[i - 1] && d[i - 1] <= w[i - 1]);\n  }\n  debug(d);\n  vector<long long> a(n);\n  a[0] = 0;\n  a[1] = w[0] - d[0];\n  a[2] = w[0];\n  for (int i = 3; i < n; i++) {\n    bool found = false;\n    for (int sign = -1; sign <= 1; sign += 2) {\n      a[i] = a[i - 1] + sign * d[i - 2];\n      long long mx = max(a[i], max(a[i - 1], a[i - 2]));\n      long long mn = min(a[i], min(a[i - 1], a[i - 2]));\n      if (mx - mn == w[i - 2]) {\n        found = true;\n        break;\n      }\n    }\n    assert(found);\n  }\n  long long mn = *min_element(a.begin(), a.end());\n  for (int i = 0; i < n; i++) {\n    a[i] -= mn;\n  }\n  for (int i = 0; i < n; i++) {\n    if (i > 0) {\n      cout << \" \";\n    }\n    cout << a[i];\n  }\n  cout << '\\n';\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["dp"], "dificulty": "3500", "interactive": false}