{
    "link": "https://codeforces.com//contest/1887/problem/D",
    "problemId": "2279000",
    "problem_idx": "D",
    "shortId": "1887D",
    "contest_number": "1887",
    "problem_submissions": {
        "F": [
            229268085,
            229284035,
            229267071,
            229288213,
            229337643,
            229337387,
            229279061,
            229293399,
            229278730,
            229369273
        ],
        "E": [
            229253684,
            229249394,
            229294341,
            229258494,
            229338891,
            229258700,
            229275116,
            229278155,
            229250811,
            229297774,
            229297309,
            229282242,
            229283031,
            229282090,
            229282378,
            229286467,
            229267304,
            229286116,
            229271763,
            229270583,
            229329580,
            229283920
        ],
        "D": [
            229234655,
            229233555,
            229233641,
            229232712,
            229245990,
            229235831,
            229244954,
            229260058,
            229227922,
            229264964,
            229263601,
            229262619,
            229264376,
            229257713,
            229260427,
            229286289,
            229259421,
            229255789,
            229242200
        ],
        "C": [
            229225852,
            229226994,
            229224941,
            229350172,
            229237731,
            229225395,
            229233603,
            229237191,
            229279756,
            229270695,
            229241111,
            229246450,
            229246617,
            229251201,
            229242629,
            229237936,
            229246963,
            229224946,
            229244776,
            229494537,
            229293735
        ],
        "B": [
            229219341,
            229218026,
            229215277,
            229224722,
            229339363,
            229339262,
            229339141,
            229221501,
            229217084,
            229218884,
            229227598,
            229211736,
            229227850,
            229229211,
            229230972,
            229210296,
            229231115,
            229228032,
            229227594,
            229234703,
            229369549,
            229231109,
            229226253
        ],
        "A2": [
            229211901,
            229206611,
            229205624,
            229212250,
            229211246,
            229243386,
            229208241,
            229214123,
            229256240,
            229230513,
            229220464,
            229213039,
            229223811,
            229217374,
            229212405,
            229212960,
            229215200,
            229212576,
            229215764,
            229211258
        ],
        "A1": [
            229207683,
            229206848,
            229205786,
            229207920,
            229207504,
            229243262,
            229206160,
            229214648,
            229256343,
            229206102,
            229220609,
            229213336,
            229217825,
            229217804,
            229210022,
            229205186,
            229215529,
            229207309,
            229215990,
            229206166
        ]
    },
    "name": "D. Split",
    "statement": "Let\u2019s call an array b_1, b_2,\r\nldots, b_m (m\r\nge 2) if it can be split into two parts such that all elements in the\r\nleft part are strictly smaller than all elements in the right part. In\r\nother words, there must exist an index 1\r\nle i < m such that every element from b_1,\r\nldots, b_i is strictly smaller than every element from b_{i+1},\r\nldots, b_m.Given an array a_1, a_2,\r\nldots a_n consisting of integers from 1 to n. There are q queries. Each\r\nquery consists of two numbers l and r. For each query, determine whether\r\nthe array a_l, a_{l+1},\r\nldots, a_r is good.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\ntemplate <typename T>\nstruct Fenwick {\n    int n;\n    std::vector<T> a;\n    \n    Fenwick(int n_ = 0) {\n        init(n_);\n    }\n    \n    void init(int n_) {\n        n = n_;\n        a.assign(n, T{});\n    }\n    \n    void add(int x, const T &v) {\n        for (int i = x + 1; i <= n; i += i & -i) {\n            a[i - 1] = a[i - 1] + v;\n        }\n    }\n    \n    T sum(int x) {\n        T ans{};\n        for (int i = x; i > 0; i -= i & -i) {\n            ans = ans + a[i - 1];\n        }\n        return ans;\n    }\n    \n    T rangeSum(int l, int r) {\n        return sum(r) - sum(l);\n    }\n    \n    int select(const T &k) {\n        int x = 0;\n        T cur{};\n        for (int i = 1 << std::__lg(n); i; i /= 2) {\n            if (x + i <= n && cur + a[x + i - 1] <= k) {\n                x += i;\n                cur = cur + a[x - 1];\n            }\n        }\n        return x;\n    }\n};\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int n;\n    std::cin >> n;\n    \n    std::vector<int> a(n), inva(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> a[i];\n        a[i]--;\n        inva[a[i]] = i;\n    }\n    \n    int q;\n    std::cin >> q;\n    \n    std::vector<int> ans(q);\n    std::vector<std::vector<std::pair<int, int>>> qry(n);\n    for (int i = 0; i < q; i++) {\n        int l, r;\n        std::cin >> l >> r;\n        l--, r--;\n        qry[l].emplace_back(r, i);\n    }\n    \n    std::vector<int> L(n), R(n), RR(n);\n    std::set<int> s{-1, n};\n    for (int i = n - 1; i >= 0; i--) {\n        int x = inva[i];\n        int l = *std::prev(s.lower_bound(x));\n        int r = *s.lower_bound(x);\n        s.insert(x);\n        L[x] = l, R[x] = r;\n    }\n    s = {-1, n};\n    for (int i = 0; i < n; i++) {\n        int x = inva[i];\n        if (R[x] < n) {\n            RR[x] = *s.lower_bound(R[x]);\n        }\n        s.insert(x);\n    }\n    std::vector<std::vector<std::pair<int, int>>> add(n);\n    for (int i = 0; i < n; i++) {\n        if (R[i] < n) {\n            add[L[i] + 1].emplace_back(R[i], 1);\n            add[L[i] + 1].emplace_back(RR[i], -1);\n            add[i + 1].emplace_back(R[i], -1);\n            add[i + 1].emplace_back(RR[i], 1);\n        }\n    }\n    Fenwick<int> fen(n);\n    for (int i = 0; i < n; i++) {\n        for (auto [x, y] : add[i]) {\n            fen.add(x, y);\n        }\n        for (auto [r, j] : qry[i]) {\n            if (fen.sum(r + 1) > 0) {\n                ans[j] = 1;\n            }\n        }\n    }\n    \n    for (int i = 0; i < q; i++) {\n        std::cout << (ans[i] ? \"Yes\" : \"No\") << \"\\n\";\n    }\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "divide and conquer",
        "dsu",
        "math",
        "trees",
        "two pointers"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Split.json",
    "editorial_link": "https://codeforces.com//blog/entry/121621",
    "editorial": "Let\u00e2\u0080\u0099s fix element . Let\u00e2\u0080\u0099s find all intervals for which this element can\r\nbe the maximum in the left part of a valid cut. Let be the nearest\r\nelement to the left of greater than , and be the nearest element to the\r\nright of greater than . Then, for to be the maximum element in the left\r\npart of the cut, the following conditions must be satisfied: But these\r\nconditions are obviously not enough, as we need to guarantee that all\r\nelements in the right part of the cut are greater than all elements in\r\nthe left part of the cut. However, since is the maximum element in the\r\nleft part of the cut, it is sufficient for all elements in the right\r\npart of the cut to be greater than . Therefore, if is the nearest\r\nelement to the right of smaller than , then .Thus, element can be the\r\nmaximum element in the left part of the cut of interval the following\r\nconditions are satisfied: For each element , we can find , , and in\r\ntime. This can be done, for example, using a segment tree or std::set if\r\nthe elements are iterated in ascending order.It only remains to notice\r\nthat if we consider the queries as points , then each element makes all\r\npoints in some rectangle good. Thus, the problem reduces to checking\r\nwhether a point lies in one of the rectangles. This is a classic problem\r\nthat can be solved using sweep line and, for example, a segment tree. We\r\nobtained a solution with a time complexity of .\r\n"
}