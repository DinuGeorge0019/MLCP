{
    "link": "https://codeforces.com//contest/1264/problem/B",
    "problemId": "486701",
    "problem_idx": "B",
    "shortId": "1264B",
    "contest_number": "1264",
    "problem_submissions": {
        "B": [
            66341401,
            66322874,
            66336572,
            66329159,
            66325790,
            66330100,
            66345009,
            66330236,
            66376038,
            66331864,
            66336631,
            66328124,
            66347648,
            66329347,
            66322983,
            66344650,
            66327116,
            66327090,
            66332056
        ],
        "D2": [
            66339545,
            66335577,
            66343751,
            66352069,
            66344993,
            66344301,
            66348378,
            66362083,
            66352256,
            66376168,
            66345089,
            138527512,
            66378228,
            66393120,
            66349950,
            66338137,
            66353567,
            66351786
        ],
        "D1": [
            66334941,
            66334668,
            66343694,
            66345117,
            66344078,
            66344165,
            66344520,
            66350440,
            66349159,
            66376114,
            66339049,
            66358201,
            66357642,
            66351611,
            66357362,
            66352980,
            66346482,
            66338263,
            66345809,
            66347614
        ],
        "A": [
            66330725,
            66323882,
            66323064,
            66323750,
            66337390,
            66323088,
            66323240,
            66323608,
            66323803,
            66375789,
            66323639,
            66328235,
            66324332,
            66323365,
            66323990,
            66326030,
            66323496,
            66322830,
            66323987,
            66323760
        ],
        "C": [
            66326327,
            66330012,
            66334720,
            66339910,
            66341281,
            66334697,
            66340151,
            66333112,
            66337232,
            66376069,
            66331626,
            66349943,
            66341121,
            66340814,
            66329673,
            66346210,
            66334293,
            66333006,
            66337575,
            66339417,
            66355906
        ],
        "E": [
            66322750,
            66338115,
            66328737,
            66333356,
            66334932,
            66353827,
            66331679,
            66338428,
            66427601,
            66422500,
            66422400,
            66421563,
            66419015,
            66419013,
            66380135,
            66362673,
            66361972,
            66357957,
            66377834,
            66346874,
            66338003,
            66349170,
            66358017,
            66342846,
            66355768,
            66361241,
            66346679
        ],
        "F": [
            66498558,
            115183857
        ]
    },
    "name": "B. Beautiful Sequence",
    "statement": "An integer sequence is called if the difference between any two\r\nconsecutive numbers is equal to 1. More formally, a sequence s_1, s_2,\r\nldots, s_{n} is beautiful if |s_i - s_{i+1}| = 1 for all 1\r\nleq i\r\nleq n - 1.Trans has a numbers 0, b numbers 1, c numbers 2 and d numbers\r\n3. He wants to construct a beautiful sequence using all of these a + b +\r\nc + d numbers.However, it turns out to be a non-trivial task, and Trans\r\nwas not able to do it. Could you please help Trans?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\ntypedef double db;\nmt19937 mrand(random_device{}()); \nconst ll mod=1000000007;\nint rnd(int x) { return mrand() % x;}\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nint p[10],q[10];\nint main() {\n\tscanf(\"%d%d%d%d\",p+0,p+1,p+2,p+3);\n\trep(st,0,4) {\n\t\trep(i,0,4) q[i]=p[i];\n\t\tint x=st;\n\t\tif (q[x]==0) continue;\n\t\tVI seq;\n\t\twhile (1) {\n\t\t\tseq.pb(x); q[x]--;\n\t\t\tif (x&&q[x-1]) {\n\t\t\t\tx--;\n\t\t\t} else if (x!=3&&q[x+1]) {\n\t\t\t\tx++;\n\t\t\t} else break;\n\t\t}\n\t\tif (q[0]==0&&q[1]==0&&q[2]==0&&q[3]==0) {\n\t\t\tputs(\"YES\");\n\t\t\tfor (auto x:seq) printf(\"%d \",x); puts(\"\");\n\t\t\treturn 0;\n\t\t}\n\t}\t\n\tputs(\"NO\");\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Beautiful Sequence.json",
    "editorial_link": "https://codeforces.com/blog/entry/71995",
    "editorial": "Firstly, let's arrange even numbers. It is optimal to arrange those numbers as 0,0,0,,0,2,2,2\n. Because we can place number 1\n anywhere while number 3\n only between two numbers 2\n or at the end beside a number 2\n. So we need to maximize the number of positions where we can place number 3\n. The above gives us an optimal way. The next step is to place the remaining numbers 1,3\n. Inserting them in internal positions first then at the ends later.\n\nBase on the above argument, we can do as following way that eliminates corner case issues:\n\nStarting from a number (try all possible value 0,1,2,3\n). At any moment, if x\n is the last element and there is at least number x?1\n remains, we append x?1\n otherwise we append x+1\n or stop if there is no x+1\n left. If we manage to use all numbers then we have a beautiful sequence and answer is 'YES'.",
    "hint": []
}