{
    "link": "https://codeforces.com//contest/933/problem/B",
    "problemId": "156719",
    "problem_idx": "B",
    "shortId": "933B",
    "contest_number": "933",
    "problem_submissions": {
        "E": [
            35263883,
            35251948,
            35268367,
            35268343,
            35258532,
            35265034,
            35258504,
            35265045
        ],
        "D": [
            35253928,
            35258185,
            35262993,
            35255562,
            35257209,
            35258119,
            35266124,
            35259046,
            35259628,
            35259700,
            35265335,
            35260449
        ],
        "B": [
            35233893,
            35242633,
            35232112,
            35233002,
            35238615,
            35243022,
            35243572,
            35238260,
            35247862,
            35234313,
            35245448,
            35242161,
            35237846,
            35238319,
            35230597,
            35242429,
            35250941,
            35238138,
            35236021
        ],
        "C": [
            35231166,
            35245330,
            35230279,
            35242029,
            49040337,
            35232953,
            35241307,
            35235433,
            36073540,
            35240997,
            35235741,
            35461289,
            35244755
        ],
        "A": [
            35230392,
            35232143,
            35233996,
            35230183,
            35230822,
            35233720,
            35235277,
            35231518,
            35235425,
            35231181,
            35231151,
            35232842,
            35231443,
            35233064,
            35232632,
            35243872,
            35232580,
            35231791,
            35232474,
            35231989
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/57763",
    "editorial": "For simplicityâs sake, we present a rather intuitive approach rather\r\nthan a rigorous proof (can be obtained by induction).For a given\r\npolynomial , whatâs its remainder taken modulo ?Let . Let Simulating the\r\nprocess of polynomial long division divided by , we get Try it yourself!\r\nA simple pattern emerges from the results. Letâs take a closer look!And\r\nthereâs another constraint: .Base negative , thatâs it! The coefficients\r\nis the base representation of . It surely exists, and is unique! We can\r\nalso deduce that , which is why there is no constraint on the output .If\r\nyou arenât familiar with negative bases, please refer to Wikipedia. But\r\nthat doesnât matter! You may as well come up with an algorithm for\r\nconverting to negative bases on your own. For an example, refer to the\r\nCalculation section in the aforementioned page.\r\n",
    "name": "B. A Determined Cleanup",
    "statement": "Little Tommy finds an old polynomial and cleaned it up by taking it\r\nmodulo another. But now he regrets doing this...Given two integers and ,\r\nfind a polynomial with non-negative integer coefficients strictly less\r\nthan , whose remainder is when divided by . That is, , where is a\r\npolynomial (not necessarily with integer coefficients).\r\n",
    "solutions": [
        "#include <iostream>#include <cstdio>#include <cstdlib>#include <algorithm>#include <cmath>#include <vector>#include <set>#include <map>#include <unordered_set>#include <unordered_map>#include <queue>#include <ctime>#include <cassert>#include <complex>#include <string>#include <cstring>using namespace std; #ifdef LOCAL\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)#else\t#define eprintf(...) 42#endif typedef long long ll;typedef pair<int, int> pii;#define mp make_pair   int main(){//\tfreopen(\"input.txt\", \"r\", stdin);//\tfreopen(\"output.txt\", \"w\", stdout); \tll p, k;\tscanf(\"%lld%lld\", &p, &k);\tvector<ll> ans;\twhile(p != 0) {\t\tll x = p % k;\t\twhile(x < 0) x += k;\t\tans.push_back(x);\t\tp -= x;\t\tp /= k;\t\tp *= -1;\t}\tprintf(\"%d\\n\", (int)ans.size());\tfor (ll x : ans)\t\tprintf(\"%lld \", x);\tprintf(\"\\n\"); \treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. A Determined Cleanup.json",
    "hint": []
}