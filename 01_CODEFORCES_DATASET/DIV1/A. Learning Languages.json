{"link": "https://codeforces.com//contest/277/problem/A", "problemId": "2667", "problem_idx": "A", "shortId": "277A", "contest_number": "277", "problem_submissions": {"E": [16290898, 3212642, 3214277, 3216560, 3217192, 3212882, 3213203, 3212293, 3216557, 3218831, 3213358, 3688854, 3214438, 3216817, 3212334, 3216978, 3215195, 3212023, 3214481], "C": [3217751, 3214405, 3212237, 3213774, 3214065, 3216032, 3215933, 3219588, 3213776, 3213602, 3234441, 3220825, 3214706, 3214937, 3218190], "D": [3215251, 3217272, 3218795, 3236907, 3258757], "A": [3211100, 3209085, 3208310, 3208691, 3208408, 3209073, 3209691, 3209304, 3209119, 3208608, 3209266, 3209939, 3210030, 3208575, 3209624, 3209909, 3208646, 3209846], "B": [3210150, 3226761, 3211703, 3216606, 3211138, 3211051, 3213290, 3212043, 3215513, 3212912, 3218799, 3212960, 3216246]}, "name": "A. Learning Languages", "statement": "The \"BerCorp\" company has got employees. These employees can use\r\napproved official languages for the formal correspondence. The languages\r\nare numbered with integers from to . For each employee we have the list\r\nof languages, which he knows. This list could be empty, i. e. an\r\nemployee may know no official languages. But the employees are willing\r\nto learn any number of official languages, as long as the company pays\r\ntheir lessons. A study course in one language for one employee costs\r\nberdollar.Find the minimum sum of money the company needs to spend so as\r\nany employee could correspond to any other one (their correspondence can\r\nbe indirect, i. e. other employees can help out translating).\r\n", "solutions": ["#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <bitset>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\n#define MAXV 110\n\nint parent[MAXV],rank[MAXV];\n\nvoid init(int n){\n    int i;\n    REP(i,n) {parent[i] = i; rank[i] = 1;}\n}\n\nint root(int x){\n    if(parent[x] != x) parent[x] = root(parent[x]);\n    return parent[x];\n}\n\nvoid connect(int x, int y){\n    int rx=root(x),ry=root(y);\n    if(rx == ry) return;\n    if(rank[rx] > rank[ry]) {parent[ry] = rx; rank[rx] += rank[ry];}\n    if(rank[rx] <= rank[ry]) {parent[rx] = ry; rank[ry] += rank[rx];}\n}\n\nbool a[110][110];\n\nint main(void){\n    int N,M,K,i,j,k,x;\n    \n    cin >> N >> M;\n    REP(i,N){\n        cin >> K;\n        REP(j,K){\n            cin >> x;\n            a[i][x-1] = true;\n        }\n    }\n    \n    bool nonzero = false;\n    REP(i,N) REP(j,M) if(a[i][j]) nonzero = true;\n    if(!nonzero){\n        cout << N << endl;\n        return 0;\n    }\n    \n    init(N);\n    \n    REP(i,N) REP(j,N) if(i < j){\n        bool found = false;\n        REP(k,M) if(a[i][k] && a[j][k]) found = true;\n        if(found){\n            connect(i, j);\n        //  cout << i << ' ' << j << endl;\n        }\n    }\n    \n    int comp = 0;\n    REP(i,N) if(root(i) == i) comp++;\n    cout << comp - 1 << endl;\n    \n    return 0;\n}\n"], "input": "", "output": "", "tags": ["dfs and similar", "dsu"], "dificulty": "1400", "interactive": false}