{"link": "https://codeforces.com//contest/123/problem/A", "problemId": "652", "problem_idx": "A", "shortId": "123A", "contest_number": "123", "problem_submissions": {"E": [830840, 831942, 831247, 1154341], "C": [830171, 829602, 829696, 830545, 830265, 830647, 831072, 830094, 829962, 833283, 832903, 833096], "D": [829496, 830812, 1447203, 829637, 831873, 1185562, 836113, 832570, 831822, 839081, 831840, 834715, 834693, 831236, 831444, 830484, 833338, 833314, 833310, 830603, 830534, 831043, 833652, 831461, 831555, 831382, 831934], "B": [828403, 828703, 828120, 829057, 828829, 829690, 829686, 832376, 828694, 829613, 829313, 828996, 829196, 828023, 828574, 829940, 829279], "A": [827847, 827523, 827572, 827701, 827834, 828726, 828164, 828031, 832616, 827887, 828344, 829843, 828296, 829771, 827580, 829074, 828185]}, "name": "A. Prime Permutation", "statement": "You are given a string , consisting of small Latin letters. Let\u2019s denote\r\nthe length of the string as . The characters in the string are numbered\r\nstarting from . Your task is to find out if it is possible to rearrange\r\ncharacters in string so that for any prime number and for any integer\r\nranging from to (inclusive) the following condition was fulfilled . If\r\nthe answer is positive, find one way to rearrange the characters.\r\n", "solutions": ["#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n\nusing namespace std;\n\ntypedef unsigned uint;\ntypedef long long Int;\ntypedef vector<int> vint;\ntypedef vector<string> vstr;\ntypedef pair<int,int> pint;\n#define mp make_pair\n\ntemplate<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << \" \"; cout << endl; }\ntemplate<class T> void pvp(T a, T b) { for (T i = a; i != b; ++i) cout << \"(\" << i->first << \", \" << i->second << \") \"; cout << endl; }\ntemplate<class T> void chmin(T &t, T f) { if (t > f) t = f; }\ntemplate<class T> void chmax(T &t, T f) { if (t < f) t = f; }\nint in_c() { int c; for (; (c = getchar()) <= ' '; ) { if (!~c) throw ~0; } return c; }\nint in() { int x = 0, c; for (; (uint)((c = getchar()) - '0') >= 10; ) { if (c == '-') return -in(); if (!~c) throw ~0; } do { x = (x << 3) + (x << 1) + (c - '0'); } while ((uint)((c = getchar()) - '0') < 10); return x; }\nInt In() { Int x = 0, c; for (; (uint)((c = getchar()) - '0') >= 10; ) { if (c == '-') return -In(); if (!~c) throw ~0; } do { x = (x << 3) + (x << 1) + (c - '0'); } while ((uint)((c = getchar()) - '0') < 10); return x; }\n\nconst int LIM = 1005;\nint isnp[1010];\nvoid prpr() {\n    int i, j;\n    isnp[0] = isnp[1] = 1;\n    for (i = 2; i * i < LIM; ++i) if (!isnp[i]) {\n        for (j = i * i; j < LIM; j += i) isnp[j] = 1;\n    }\n}\n\nint uf[1010];\nint root(int x) { return (uf[x] < 0) ? x : (uf[x] = root(uf[x])); }\nbool conn(int x, int y) {\n    x = root(x); y = root(y);\n    if (x == y) return 0;\n    if (uf[x] > uf[y]) swap(x, y);\n    uf[x] += uf[y]; uf[y] = x;\n    return 1;\n}\n\nvoid gen(int n) {\n    int p, i;\n    memset(uf, ~0, n << 2);\n    for (p = 2; p <= n; ++p) if (!isnp[p]) {\n        for (i = 1; i <= n / p; ++i) {\n            conn(p - 1, p * i - 1);\n        }\n    }\n}\n\nconst int M = 0x100;\n\nint N;\nchar S[1010];\nchar T[1010];\n\npint ps[1010];\n\nint qsLen;\npint qs[1010];\n\nint main() {\n    int i;\n    int c;\n    \n    prpr();\n    \n/*\nfor(int n=1;n<=1000;++n){\ngen(n);\nint cnt=0;for(i=0;i<n;++i)if(-uf[i]>1)++cnt;\nif(cnt!=1)cout<<\"n = \"<<n<<endl;\nif(n<=5){cout<<\"uf : \";pv(uf,uf+n);}\n}\n//*/\n    \n    for (; ~scanf(\"%s\", S); ) {\n        N = strlen(S);\n        gen(N);\n        for (c = 0; c < M; ++c) {\n            ps[c] = mp(0, c);\n        }\n        for (i = 0; i < N; ++i) {\n            ++ps[S[i] - 0].first;\n        }\n        sort(ps, ps + M, greater<pint>());\n        qsLen = 0;\n        for (i = 0; i < N; ++i) if (uf[i] < 0) {\n            qs[qsLen++] = mp(-uf[i], i);\n        }\n        sort(qs, qs + qsLen, greater<pint>());\n        if (ps[0].first < qs[0].first) {\n            puts(\"NO\");\n            continue;\n        }\n        for (i = 0; i < N; ++i) if (root(i) == qs[0].second) {\n            T[i] = ps[0].second;\n            --ps[0].first;\n        }\n        int j = 0;\n        for (i = 0; i < N; ++i) if (root(i) != qs[0].second) {\n            for (; ps[j].first == 0; ++j);\n            T[i] = ps[j].second;\n            --ps[j].first;\n        }\n        T[N] = 0;\n        puts(\"YES\");\n        puts(T);\n    }\n    \n    return 0;\n}\n"], "input": "", "output": "", "tags": ["implementation", "number theory", "strings"], "dificulty": "1300", "interactive": false}