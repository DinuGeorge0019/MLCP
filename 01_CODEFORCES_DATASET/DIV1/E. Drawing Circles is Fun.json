{
    "link": "https://codeforces.com//contest/372/problem/E",
    "problemId": "4186",
    "problem_idx": "E",
    "shortId": "372E",
    "contest_number": "372",
    "problem_submissions": {
        "D": [
            5426977,
            5430216,
            5428682,
            5430119,
            5427511,
            5430570,
            5430674,
            5430157,
            5432457,
            5430283,
            5428509,
            5431356,
            5431746,
            5438335,
            5439009,
            5430897,
            5431697,
            5427479,
            5431615,
            5437474
        ],
        "C": [
            5425620,
            5423917,
            5425367,
            5426752,
            5429971,
            5426458,
            5425626,
            5427101,
            5430049,
            5423463,
            5427437,
            5427041,
            5428996,
            5429237,
            5430350,
            5429420,
            5425660,
            5426153
        ],
        "B": [
            5423489,
            5421838,
            5424137,
            5424220,
            5424353,
            5423172,
            5423669,
            5423082,
            5424372,
            5425505,
            5428480,
            5425133,
            5425580,
            5425422,
            5424402,
            5431761,
            5424978,
            5423136,
            5424295
        ],
        "A": [
            5421957,
            5420847,
            5421730,
            5421129,
            5421031,
            5420888,
            5422498,
            5422219,
            5421566,
            5422639,
            5425833,
            5421459,
            5427633,
            5423077,
            5420877,
            5428458,
            5422847,
            5420856,
            5421782
        ],
        "E": [
            5430957
        ]
    },
    "name": "E. Drawing Circles is Fun",
    "statement": "There are a set of points on the plane. This set doesn’t contain the\r\norigin , and for each two distinct points in the set and , the triangle\r\nhas strictly positive area.Consider a set of pairs of points . We’ll\r\ncall the set if and only if: . All are distinct, and each is an element\r\nof . For any two pairs and , the circumcircles of triangles and have a\r\nsingle common point, and the circumcircle of triangles and have a single\r\ncommon point. Calculate the number of good sets of pairs modulo .\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <bitset>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\ntypedef long long ll;\nstruct frac {ll x,y;}; // x/y\n#define _abs(x) ((x)>0?(x):-(x))\nll gcd(ll x, ll y) {return x ? gcd(y%x,x) : y;}\nfrac make_frac(ll x, ll y) {if(y < 0) {x = -x; y = -y;} ll d = gcd(_abs(x),_abs(y)); frac f = {x/d,y/d}; return f;}\nfrac sum(frac &f1, frac &f2) {ll x = f1.x * f2.y + f1.y * f2.x; ll y = f1.y * f2.y; return make_frac(x,y);};\ndouble val(frac &f) {return (double)f.x / f.y;};\n\nstruct point {frac x,y;};\n\nint N;\npoint P[1010];\npair <pair <pair <ll, ll>, pair <ll, ll> >, pair <int, int> > Q[500010];\n\n#define MOD 1000000007ll\n#define PI acos(-1.0)\n#define eps 1.0E-9\nvector <double> v;\nvector <int> freq;\n\nll count(void){\n    int n=v.size(),i,j;\n    \n    sort(v.begin(),v.end());\n    \n    // cout << n << endl;\n    \n    freq.clear();\n    i = 0;\n    while(i < n){\n        for(j=i;j<n;j++) if(v[j] - v[i] > eps) break;\n        freq.push_back(j-i);\n        i = j;\n    }\n    \n    if(freq.size() < 2) return 0;\n    \n    ll ans = 1;\n    REP(i,freq.size()) ans = ans * (freq[i] + 1) % MOD;\n    REP(i,freq.size()) ans -= freq[i];\n    ans--;\n    ans = (ans + MOD) % MOD;\n    return ans;\n}\n\nll func(int K){\n    if(K < 2) return 0;\n    ll ans = 1;\n    int i;\n    REP(i,K) ans = ans * 2 % MOD;\n    ans = (ans - K - 1 + MOD) % MOD;\n    return ans;\n}\n\nint main(void){\n    int i,j,k;\n    \n    cin >> N;\n    REP(i,N){\n        int a,b,c,d;\n        cin >> a >> b >> c >> d;\n        P[i].x = make_frac(a*b*d*d, a*a*d*d+b*b*c*c);\n        P[i].y = make_frac(b*b*c*d, a*a*d*d+b*b*c*c);\n    }\n    \n    int sz = 0;\n    REP(i,N) REP(j,i){\n        frac x = sum(P[i].x, P[j].x);\n        frac y = sum(P[i].y, P[j].y);\n        Q[sz] = make_pair(make_pair(make_pair(x.x, x.y), make_pair(y.x, y.y)), make_pair(i, j));\n        sz++;\n    }\n    \n    sort(Q, Q+sz);\n    ll ans = 0;\n    i = 0;\n    while(i < sz){\n        for(j=i;j<sz;j++) if(Q[j].first != Q[i].first) break;\n        \n        v.clear();\n        for(k=i;k<j;k++){\n            int p = Q[k].second.first;\n            int q = Q[k].second.second;\n            double dx = val(P[p].x) - val(P[q].x);\n            double dy = val(P[p].y) - val(P[q].y);\n            double theta = atan2(dy, dx) - 7.0;\n            while(theta < 0.0) theta += PI;\n            v.push_back(theta);\n        }\n        \n        ll tmp = count();\n        ans = (ans + tmp) % MOD;\n        i = j;\n    }\n    \n    cout << ans << endl;\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "geometry"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Drawing Circles is Fun.json",
    "editorial_link": "https://codeforces.com/blog/entry/9944",
    "editorial": "All circles we must consider pass through O, so we can consider the\r\noperation inversion. At this operation, the point will be . From now, we\r\nthink the plane as the plane after inversed. \"The circumcircles of\r\ntriangles and have a single common point, and the circumcircle of\r\ntriangles and have a single common point\" can be said, after the\r\ninversion, is parallelogram. And we can say it \"the diagonal and have a\r\ncommon midpoint and the inclination of and are different\". So all we\r\nhave to do is make the list of the midpoints and inclination of all\r\npairs of points and the line passes through them, and sort this array,\r\nand do some multiplication. It can be solved in O(N^2 log N). my\r\nsolution: http://ideone.com/x3Xrqe\r\n",
    "hint": []
}