{"link": "https://codeforces.com//contest/95/problem/C", "problemId": "499", "problem_idx": "C", "shortId": "95C", "contest_number": "95", "problem_submissions": {"E": [535779, 536171, 535576, 534631, 535449, 537379, 535935, 538215, 538206, 535203, 543889, 535690, 536003, 536745, 536509, 549025], "B": [535031, 532607, 533801, 533350, 537169, 534776, 532824, 533550, 533473, 533499, 533085, 534188, 533285, 537343, 537019, 533757], "D": [534913, 535339, 534808, 950906, 535637, 535740, 536719, 535872, 536920, 536227, 537633], "C": [534317, 533819, 536411, 534119, 533891, 533661, 534495, 534743, 534102, 533774, 534164, 535462, 533913, 536894, 535197, 535469, 534630, 534725], "A": [533274, 536622, 537207, 536153, 533227, 532424, 532796, 532812, 532729, 532727, 533283, 534618, 532955, 532983, 533855, 532880]}, "name": "C. Volleyball", "statement": "Petya loves volleyball very much. One day he was running late for a\r\nvolleyball match. Petya hasn\u2019t bought his own car yet, that\u2019s why he had\r\nto take a taxi. The city has junctions, some of which are connected by\r\ntwo-way roads. The length of each road is defined by some positive\r\ninteger number of meters; the roads can have different lengths.Initially\r\neach junction has exactly one taxi standing there. The taxi driver from\r\nthe -th junction agrees to drive Petya (perhaps through several\r\nintermediate junctions) to some other junction if the travel distance is\r\nnot more than meters. Also, the cost of the ride doesn\u2019t depend on the\r\ndistance and is equal to bourles. Taxis can\u2019t stop in the middle of a\r\nroad. At the moment Petya is located on the junction and the volleyball\r\nstadium is on the junction . Determine the minimum amount of money Petya\r\nwill need to drive to the stadium.\r\n", "solutions": ["#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nconst int maxn=1000+10;\nconst long long oo=1000000000000000000LL;\n\nvector< pair<int,int> > e[maxn];\nlong long dist[maxn][maxn];\nlong long opt[maxn];\nbool flag[maxn];\nint que[maxn*maxn];\nint n,m,s,t;\nint limit[maxn],cost[maxn];\n\nint main()\n{\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tfor (int i=0,a,b,c;i<m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\te[a].push_back(make_pair(b,c));\n\t\te[b].push_back(make_pair(a,c));\n\t}\n\n\tfor (int i=1;i<=n;i++) scanf(\"%d%d\",&limit[i],&cost[i]);\n\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tfor (int j=1;j<=n;j++) dist[i][j]=oo,flag[j]=1;\n\t\tdist[i][i]=0;que[0]=i;flag[i]=0;\n\t\tfor (int l=0,r=0;l<=r;flag[que[l++]]=1)\n\t\tfor (int j=0;j<e[que[l]].size();j++)\n\t\tif (dist[i][e[que[l]][j].first]>dist[i][que[l]]+e[que[l]][j].second)\n\t\t{\n\t\t\tdist[i][e[que[l]][j].first]=dist[i][que[l]]+e[que[l]][j].second;\n\t\t\tif (flag[e[que[l]][j].first])\n\t\t\t{\n\t\t\t\tque[++r]=e[que[l]][j].first;\n\t\t\t\tflag[que[r]]=0;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (int i=1;i<=n;i++) opt[i]=oo,flag[i]=1;\n\topt[s]=0;que[0]=s;flag[s]=0;\n\tfor (int l=0,r=0;l<=r;flag[que[l++]]=1)\n\tfor (int i=1;i<=n;i++)\n\tif (dist[que[l]][i]<=limit[que[l]] &&\n\t\topt[i]>opt[que[l]]+cost[que[l]])\n\t{\n\t\topt[i]=opt[que[l]]+cost[que[l]];\n\t\tif (flag[i])\n\t\t{\n\t\t\tque[++r]=i;flag[i]=0;\n\t\t}\n\t}\n\tif (opt[t]==oo) printf(\"-1\\n\");\n\telse printf(\"%I64d\\n\",opt[t]);\n}\n"], "input": "", "output": "", "tags": ["shortest paths"], "dificulty": "1900", "interactive": false}