{
    "link": "https://codeforces.com//contest/663/problem/A",
    "problemId": "55357",
    "problem_idx": "A",
    "shortId": "663A",
    "contest_number": "663",
    "problem_submissions": {
        "E": [
            17350327,
            17349864,
            17353803,
            17353745,
            17350870,
            17351032,
            17350940,
            17349799,
            17351986,
            17351243,
            17350710,
            17347131,
            17352995,
            17350415,
            17349363,
            17351067,
            17353219,
            17353206,
            17350737
        ],
        "C": [
            17347790,
            17347307,
            17349302,
            17348183,
            17352062,
            17347576,
            17351577,
            17349777,
            17347691,
            17348798,
            17348588,
            17350481,
            17349299,
            17347750,
            17349697,
            17348180,
            17348352
        ],
        "B": [
            17346317,
            17346919,
            17351687,
            17347488,
            17350797,
            17352612,
            17346896,
            17352716,
            17346251,
            17346169
        ],
        "A": [
            17345568,
            17345670,
            17345320,
            17345148,
            17345271,
            17344956,
            17347728,
            17345255,
            17346364,
            17352110,
            17345277,
            17344920,
            17352735,
            17344992,
            17345337
        ],
        "D": [
            17350825,
            17611100,
            17366417
        ]
    },
    "name": "A. Rebus",
    "statement": "You are given a rebus of form , consisting of only question marks,\r\nseparated by arithmetic operation \u201d and \u201d, equality and positive integer\r\n. The goal is to replace each question mark with some positive integer\r\nfrom to , such that equality holds.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#include<unistd.h>\nusing namespace std;\n#define FZ(n) memset((n),0,sizeof(n))\n#define FMO(n) memset((n),-1,sizeof(n))\n#define F first\n#define S second\n#define PB push_back\n#define ALL(x) begin(x),end(x)\n#define SZ(x) ((int)(x).size())\n#define IOS ios_base::sync_with_stdio(0); cin.tie(0)\ntemplate<typename A, typename B>\nostream& operator <<(ostream &s, const pair<A,B> &p) {\n  return s<<\"(\"<<p.first<<\",\"<<p.second<<\")\";\n}\ntemplate<typename T>\nostream& operator <<(ostream &s, const vector<T> &c) {\n  s<<\"[ \";\n  for (auto it : c) s << it << \" \";\n  s<<\"]\";\n  return s;\n}\n// Let's Fight!\n\nconst int MAXN = 1050;\n\nint N;\nvector<string> vs;\nint target;\nbool sgn[MAXN];\nint ans[MAXN];\n\nbool calc()\n{\n  N = (vs.size() - 1) / 2;\n  for(int i=1; i<N; i++)\n    if(vs[2*i-1] == \"-\")\n      sgn[i] = 1;\n  target = stoi(vs.back().c_str());\n\n  int posnum = 0;\n  for(int i=0; i<N; i++)\n    if(!sgn[i])\n      posnum++;\n\n  for(int i=0; i<N; i++)\n    ans[i] = 1;\n  int dif = target - (posnum - (N - posnum));\n\n  for(int i=0; i<N; i++)\n  {\n    if(dif > 0 && !sgn[i])\n    {\n      int x = min(dif, target-1);\n      dif -= x;\n      ans[i] += x;\n    }\n    else if(dif < 0 && sgn[i])\n    {\n      int x = min(-dif, target-1);\n      dif += x;\n      ans[i] += x;\n    }\n  }\n\n  return dif == 0;\n}\n\nint main() {\n  IOS;\n\n  string s;\n  while(cin>>s) vs.PB(s);\n  bool res = calc();\n  if(!res)\n    cout<<\"Impossible\"<<endl;\n  else\n  {\n    cout<<\"Possible\"<<endl;\n    for(int i=0; i<N; i++)\n      cout<<ans[i]<<\" \"<<vs[2*i+1]<<\" \";\n    cout<<target<<endl;\n  }\n\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "expression parsing",
        "greedy",
        "math"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Rebus.json",
    "editorial_link": "https://codeforces.com//blog/entry/44408",
    "editorial": "First we check whether any solution exists at\nall. For that purpose, we calculate the number of positive (the first\none and any other with the sign) and negative elements (with the sign)\nin the sum. Let them be and , respectively. Then the minimum value of\nthe sum that can be possibly obtained is equal to , as each positive\nnumber can be , but all negative can be . Similarly, the maximum\npossible value is equal to . The solution therefore exists if and only\nif . Now suppose a solution exists. Let\u00e2\u0080\u0099s insert the numbers into the\nsum one by one from left to right. Suppose that we have determined the\nnumbers for some prefix of the expression with the sum of . Let the sign\nof the current unknown be ( or ) and there are some unknown numbers left\nto the right, excluding the examined unknown, among them positive and\nnegative elements. Suppose that the current unknown number takes value .\nHow do we find out whether this leads to a solution? The answer is: in\nthe same way we checked it in the beginning of the solution. Examine the\nsmallest and the largest values of the total sum that we can get. These\nare equal to and , respectively. Then we may set the current number to ,\nif holds. To find the value of , we can solve a system of inequalities,\nbut it is easier simply to check all possible values from to . BONUS Let\nbe the number of unknowns in the rebus. Prove that the complexity of the\ndescribed solution (implementation shown below) is , not . Code\n"
}