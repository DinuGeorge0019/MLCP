{
    "link": "https://codeforces.com//contest/251/problem/D",
    "problemId": "2348",
    "problem_idx": "D",
    "shortId": "251D",
    "contest_number": "251",
    "problem_submissions": {
        "C": [
            2708116,
            2703586,
            2704109,
            2703232,
            2706506,
            2702257,
            2703703,
            2703280,
            2704115,
            2703686,
            2705486,
            2704984,
            2704534,
            2705165,
            2704884,
            2705233
        ],
        "D": [
            2706516,
            2706940,
            2707149,
            2704789,
            2714168,
            2709244,
            2963073
        ],
        "B": [
            2702885,
            2710707,
            2702748,
            2702944,
            2703852,
            2706610,
            2702523,
            2702863,
            2704268,
            2703034,
            2702681,
            2702420,
            2702396,
            2702786,
            2702560
        ],
        "A": [
            2700911,
            2700969,
            2701184,
            2701021,
            2701182,
            2704236,
            2701557,
            2700957,
            2701183,
            2703855,
            2701084,
            2701446,
            2701163,
            2701237,
            2701243,
            2701186
        ]
    },
    "name": "D. Two Sets",
    "statement": "Little Petya likes numbers a lot. Recently his mother has presented him\r\na collection of non-negative integers. There’s only one thing Petya\r\nlikes more than numbers: playing with little Masha. He immediately\r\ndecided to give a part of his new collection to her. To make the game\r\neven more interesting, Petya decided to give Masha such collection of\r\nnumbers for which the following conditions fulfill: Let’s introduce to\r\ndenote the of all numbers Petya has got left; and let’s introduce to\r\ndenote the of all numbers he gave to Masha. Value must be as large as\r\npossible. If there are multiple ways to divide the collection so that\r\nthe previous condition fulfilled, then Petya minimizes the value . The\r\noperation is a bitwise excluding \"\", that is denoted as \"\" in the Pascal\r\nlanguage and \"\" in C/C++/Java.Help Petya divide the collection as\r\ndescribed above. If there are multiple suitable ways to divide it, find\r\nany of them. Please note that after Petya gives a part of his numbers to\r\nMasha, he may have no numbers left. The reverse situation is also\r\npossible, when Petya gives nothing to Masha. In both cases we must\r\nassume that the of an empty set of numbers equals 0.\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <stdio.h>\n#include <set>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <memory.h>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nconst int N = 222222;\nconst int m = 62;\n\nlong long a[N], b[N], mask[N];\nint c[N], n, who[N];\nint need[N], used[N];\n\nbool can() {\n  int i, j, k;\n  for (i=0;i<n;i++) b[i] = a[i], mask[i] = 0, used[i] = 0;\n  for (j=m-1;j>=0;j--)\n    if (need[j] != -1) {\n      who[j] = -1;\n      for (i=0;i<n;i++)\n        if (!used[i] && (b[i] & (1LL << j))) {\n          used[i] = 1;\n          who[j] = i;\n          mask[i] |= (1LL << j);\n          for (k=0;k<n;k++)\n            if (i != k && (b[k] & (1LL << j))) {\n              b[k] ^= b[i];\n              mask[k] ^= mask[i];\n            }\n          break;\n        }\n    }\n  long long have = 0, ms = 0;\n  for (j=m-1;j>=0;j--)\n    if (need[j] != -1) {\n      if ((!!(have & (1LL << j))) != need[j]) {\n        if (who[j] == -1) return false;\n        have ^= b[who[j]];\n        ms ^= mask[who[j]];\n      }\n    }\n  for (i=0;i<n;i++) c[i] = 2;\n  for (j=0;j<m;j++)\n    if (ms & (1LL << j)) c[who[j]] = 1;\n  return true;\n}\n\nint main() {\n//  freopen(\"in\", \"r\", stdin);\n//  freopen(\"out\", \"w\", stdout);\n  int i, j;\n  scanf(\"%d\", &n);\n  for (i=0;i<n;i++) scanf(\"%I64d\", &a[i]);\n  long long X = 0;\n  for (i=0;i<n;i++) X ^= a[i];\n  for (j=0;j<m;j++) need[j] = -1;\n  for (j=m-1;j>=0;j--)\n    if (!(X & (1LL << j))) {\n      need[j] = 1;\n      if (!can()) need[j] = 0;\n    }\n  for (j=m-1;j>=0;j--)\n    if (X & (1LL << j)) {\n      need[j] = 0;\n      if (!can()) need[j] = 1;\n    }\n  can();\n  for (i=0;i<n-1;i++) printf(\"%d \", c[i]);\n  printf(\"%d\\n\", c[n-1]);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "math"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Two Sets.json",
    "editorial_link": "https://codeforces.com//blog/entry/6054",
    "editorial": "Let be the of all numbers in the input. Also let be the of all numbers\r\nin the first collection and be the of all numbers in the second\r\ncollection. Note, if the -th bit in is equal to 1 then the same bit in\r\nnumbers and is either equal 0 and 1 or 1 and 0, respectively.\r\nAnalogically, if the -th bit in is equal to 0 then this bit in numbers\r\nand is either equal 0 and 0 or 1 and 1, respectively. As we can see, if\r\nthe -th bit in is equal to 1 then it doesnât affect on the sum in any\r\nway. For now, letâs forget about the second condition in the statement\r\nwhich asks us to minimize in case of tie. In order to find the optimal\r\nvalue of we need to make one more observation. Letâs look at the most\r\nsignificant bit of number which is equal to 0. If there exist such\r\npartitions of the initial collection in which this bit is equal to 1 in\r\nthen the optimal partition should be one of them. To prove this one\r\nshould remember that the respective bit in number is also equal to 1.\r\nLet this bit correspond to . If the bit we are looking at is equal to 1\r\nin both and then the smallest possible value of is . On the other hand,\r\nif both and have zero in this bit, then the maximal possible value of is\r\nwhich is strictly smaller than . Weâll be solving the initial problem\r\nwith a greedy algorithm. Letâs iterate over all bits which are equal to\r\n0 in number from highest to lowest. Weâll try to put 1 to the number in\r\nthis position and then check if there exists at least one partition\r\nwhich satisfies the current condition together with all conditions weâve\r\nalready set up. If such partition exists, then we can leave our newly\r\nadded condition and move to lower bits. If there is no such condition,\r\nthen we need to move to lower bits without adding any new conditions. At\r\nthe end weâll find the maximal value of . So, we have a set of\r\nconditions and we want to check if there exist at least one partition\r\nwhich satisfies all of them. For each condition for -th bit weâll create\r\nan equation over the field with variables, where the coefficient at the\r\n-th variable is equal to the -th bit of the -th number. If some variable\r\nis equal to one then we take the corresponding number into the first\r\nset, otherwise â into the second one. This system of equations can be\r\nsolved with Gaussian elimination. Note that we donât need to solve the\r\ncomplete system from scratch every time we add a new equation. Itâs\r\nsufficient to recalculate the matrix from the previous state, which can\r\nbe done in . Here is the number of equations in the system. Now we need\r\nto minimize while keeping the value of unchanged. It can be done in the\r\nsimilar way as finding the optimal value of . Weâll iterate over all\r\nbits which are equal to 1 in number starting from the highest one. For\r\nthe current bit weâll try to put 0 in the corresponding position of . If\r\nafter adding this condition our system of equations becomes\r\nincompatible, then we need to put 1 in this position of . The complexity\r\nof this algorithm is , where â is the length of binary notation of the\r\nlargest number. For further optimization one can use in Gaussian\r\nelimination, although it wasnât necessary for getting AC during the\r\ncontest.\r\n",
    "hint": []
}