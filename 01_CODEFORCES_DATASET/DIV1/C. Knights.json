{
    "link": "https://codeforces.com//contest/1067/problem/C",
    "problemId": "242829",
    "problem_idx": "C",
    "shortId": "1067C",
    "contest_number": "1067",
    "problem_submissions": {
        "E": [
            44797063,
            44801350,
            44801345,
            44800256,
            44807009,
            44795862,
            44802107,
            44801174,
            44802534,
            44808036,
            44807819,
            44808903,
            44813776,
            44808812,
            44823059,
            44822826
        ],
        "C": [
            44791919,
            44798705,
            44789846,
            45703244,
            44817690,
            44796737,
            44821755,
            44819508,
            44819482,
            44798809,
            44800641
        ],
        "B": [
            44785395,
            44790831,
            44786324,
            44787984,
            44813565,
            44800421,
            44789408,
            44792434,
            44795239,
            44792208,
            44793600,
            44795334,
            44790580,
            44792571,
            44793492,
            44790971,
            44785468,
            44794434
        ],
        "A": [
            44781795,
            44784467,
            44782825,
            44782486,
            44802955,
            44788563,
            44785068,
            44786748,
            44791948,
            44785790,
            44788019,
            44787518,
            44785264,
            44787093,
            44892470,
            44785358,
            44786648,
            44792812,
            44788577
        ],
        "D": [
            44810645,
            44811277,
            59968450,
            44830180,
            44927930,
            44819755,
            44819681,
            44819351,
            44807988,
            44804123
        ]
    },
    "name": "C. Knights",
    "statement": "Ivan places knights on infinite chessboard. Initially there are n\r\nknights. If there is free cell which is under attack of at least 4\r\nknights then he places new knight in this cell. Ivan repeats this until\r\nthere are no such free cells. One can prove that this process is finite.\r\nOne can also prove that position in the end does not depend on the order\r\nin which new knights are placed.Ivan asked you to find initial placement\r\nof exactly n knights such that in the end there will be at least\r\nlfloor\r\nfrac{n^{2}}{10}\r\nrfloor knights.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=1000*1007;\n\nint n;\nvector <pii> ruch;\n\npii rusz(pii a, pii b)\n{\n\treturn {a.first+b.first, a.second+b.second};\n}\n\nint powiedz(vector <pii> wek)\n{\n\tset <pii> setel;\n\tqueue <pii> kol;\n\tfor (pii i : wek)\n\t{\n\t\tsetel.insert(i);\n\t\tfor (pii j : ruch)\n\t\t\tkol.push(rusz(i, j));\n\t}\n\twhile(!kol.empty())\n\t{\n\t\tpii v=kol.front();\n\t\tkol.pop();\n\t\tif (setel.count(v))\n\t\t\tcontinue;\n\t\tint li=0;\n\t\tfor (pii i : ruch)\n\t\t\tli+=setel.count(rusz(v, i));\n\t\tif (li>=4)\n\t\t{\n\t\t\tsetel.insert(v);\n\t\t\tfor (pii i : ruch)\n\t\t\t\tkol.push(rusz(v, i));\n\t\t}\n\t}\n\treturn setel.size();\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i=-2; i<=2; i++)\n\t\tfor (int j=-2; j<=2; j++)\n\t\t\tif (i*i+j*j==5)\n\t\t\t\truch.push_back({i, j});\n\tvector < pair <int,pii> > wek;\n\tsort(wek.begin(), wek.end());\n\tfor (int i=0; i<=10000; i++)\n\t\tfor (int j=0; j<=10000 && (i<3 || j<3); j++)\n\t\t\tif ((i&1)==(j&1))\n\t\t\t\twek.push_back({i+j, {i, j}});\n\tsort(wek.begin(), wek.end());\n\tvector <pii> chce;\n\tfor (int i=0; i<n; i++)\n\t\tchce.push_back(wek[i].second);\n\t//~ debug() << imie(powiedz(chce)) << \" na \" << n*n/10;\n\t//~ int x=powiedz(chce);\n\t//~ debug() << imie(x-(n*n/10));\n\t//~ assert(x>=(n*n/10));\n\tfor (pii i : chce)\n\t\tprintf(\"%d %d\\n\", i.first, i.second);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Knights.json",
    "editorial_link": "https://codeforces.com/blog/entry/62688",
    "editorial": "If after some loops of the process we will have two neighboring lines\r\nwith length total complexity of knights would be not less than .In this\r\nconstruction: initial placement. added knights. Would be two neighboring\r\nlines with length so total complexity of knights would be .The possible\r\nway to facilitate the invention this (or over) solutions is to write\r\nprocess modeling.Bonus: Solve this problem with complexity .\r\n"
}