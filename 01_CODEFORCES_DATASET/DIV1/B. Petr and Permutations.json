{
    "link": "https://codeforces.com//contest/986/problem/B",
    "problemId": "186082",
    "problem_idx": "B",
    "shortId": "986B",
    "contest_number": "986",
    "problem_submissions": {
        "D": [
            42104811,
            42104792,
            42104740,
            42104337,
            42103931,
            42103877,
            42103819,
            42103728,
            42103430,
            42103363,
            42090622,
            42090614,
            42090469,
            42090439,
            42090421,
            42090403,
            42090387,
            38733857,
            38748243,
            38741625,
            38744949,
            38732535,
            38776124,
            38775923,
            73829906,
            48935186,
            46682125,
            38947315,
            38947302,
            38947285,
            38946968,
            38946777,
            38946767,
            38946516,
            38946375,
            38946181,
            38944862,
            38944853,
            38944843,
            38944833,
            38944826,
            38944784,
            38944707,
            38944667,
            38944627,
            38903696,
            38903692,
            38903690,
            38903603,
            38903544,
            38903533,
            38903435,
            38903221,
            38903111,
            38903010,
            38902730,
            38902722,
            38902698,
            38868689,
            38868687,
            38868625,
            38868606,
            38868604,
            38868564,
            38868475,
            38868474,
            38868436,
            38868410,
            38868378,
            38868342,
            38868314,
            38868268,
            38868265,
            38868261,
            38868236,
            38868233,
            38868218,
            38868215,
            38868193,
            38868187,
            38868182,
            38868177,
            38868174,
            38868170,
            38868106,
            38868104,
            38868091,
            38868070,
            38868066,
            38868064,
            38868060,
            38868052,
            38868048,
            38868019,
            38868012,
            38868008,
            38868002,
            38783809,
            38783797,
            38783781,
            38783746,
            38783741,
            38783462,
            38783445,
            38780380,
            38776796,
            38776020,
            38776009,
            38775996,
            38775983,
            38775959,
            38774927,
            38774159,
            38774142,
            38774133,
            38774083,
            38772484,
            38772455,
            38772446,
            38772398,
            38772056,
            38771982,
            38771852,
            38771749,
            38771473,
            38770302,
            38770261,
            38758325,
            38743969,
            38775097,
            38775073,
            38775025,
            38774686,
            38769151
        ],
        "E": [
            38747055,
            38738177,
            38746661,
            38745236,
            38748676,
            38751753,
            38745180,
            38747262,
            38746823,
            38745830,
            38751939,
            38740507,
            38750013,
            38749870,
            38752411,
            38979399,
            38747190,
            38753936,
            38746328,
            42589039,
            38781799,
            38781783,
            38752251,
            38750400,
            38738811,
            38743630
        ],
        "F": [
            38743952,
            38741619,
            38749997,
            38752035,
            38759153,
            38766951,
            38747287,
            38803173,
            38802767
        ],
        "C": [
            38736843,
            38745069,
            38732331,
            38733537,
            38731636,
            38741009,
            38735527,
            38733610,
            38737347,
            38735879,
            38747912,
            38735093,
            38731137,
            38747956,
            38732967,
            38749305,
            38742224,
            38742550,
            38745758,
            38746063
        ],
        "B": [
            38727078,
            38726856,
            38726789,
            38729993,
            38726090,
            38734230,
            38728365,
            38728016,
            38727081,
            38728548,
            38726100,
            38728328,
            38735514,
            38726544,
            38737280,
            38727906,
            38727500,
            38748980,
            38769342
        ],
        "A": [
            38722963,
            38723690,
            38723235,
            38724127,
            38723622,
            38736390,
            38723609,
            38724267,
            38724018,
            38725327,
            38724685,
            38725264,
            38723597,
            38724159,
            38722907,
            38723625,
            38725178,
            38724347,
            38741266,
            38724867
        ]
    },
    "name": "B. Petr and Permutations",
    "statement": "Petr likes to come up with problems about randomly generated data. This\r\ntime problem is about random permutation. He decided to generate a\r\nrandom permutation this way: he takes identity permutation of numbers\r\nfrom 1 to n and then 3n times takes a random pair of different elements\r\nand swaps them. Alex envies Petr and tries to imitate him in all kind of\r\nthings. Alex has also come up with a problem about random permutation.\r\nHe generates a random permutation just like Petr but swaps elements 7n+1\r\ntimes instead of 3n times. Because it is more random, OK?!You somehow\r\nget a test from one of these problems and now you want to know from\r\nwhich one.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 29.05.2018 18:40:07       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n;\n  cin >> n;\n  vector<int> a(n);\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n    a[i]--;\n  }\n  vector<int> was(n, 0);\n  int cyc = 0;\n  for (int i = 0; i < n; i++) {\n    if (was[i]) {\n      continue;\n    }\n    cyc++;\n    int p = i;\n    while (!was[p]) {\n      was[p] = 1;\n      p = a[p];\n    }\n  }\n  cout << ((n - cyc) % 2 == (3 * n) % 2 ? \"Petr\" : \"Um_nik\") << '\\n';\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Petr and Permutations.json",
    "editorial_link": "https://codeforces.com//blog/entry/59758",
    "editorial": "Each swap change the parity of permutation. and always have different\r\nparities, so the solution is just to calculate the parity of the given\r\npermutation and check if it is equal to parity of or to parity of .To\r\ncalculate the parity you can just calculate the number of inversions\r\nwith your favorite method (Fenwick tree, Segment tree, mergesort or\r\nwhatever) in time. But it is easier to calculate the number of cycles in\r\npermutation in time.\r\n",
    "hint": []
}