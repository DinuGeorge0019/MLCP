{
    "link": "https://codeforces.com//contest/201/problem/B",
    "problemId": "1456",
    "problem_idx": "B",
    "shortId": "201B",
    "contest_number": "201",
    "problem_submissions": {
        "D": [
            1842426,
            1845322,
            1848015,
            2017065,
            1845704,
            1843679,
            1843165,
            1843645,
            1843721,
            1842642,
            3962764,
            1843892
        ],
        "E": [
            1841059,
            1842295,
            1842570,
            1848002,
            1842412,
            1843333,
            1841361,
            1842083,
            1843064,
            1842151,
            1843347
        ],
        "A": [
            1840364,
            1839374,
            1839153,
            1847954,
            1840731,
            1839399,
            1844333,
            1839094,
            1839993,
            1841295,
            1840073,
            1839956,
            1838952,
            1839521,
            1838849,
            1839719,
            1839105,
            1839524
        ],
        "C": [
            1840066,
            1840781,
            1840491,
            1847992,
            1840261,
            1840947,
            1839278,
            1840815,
            1841258,
            1842024,
            1841894,
            1844043,
            1841094,
            1844134,
            1840094,
            1867350,
            1840802,
            1840979
        ],
        "B": [
            1839596,
            1838940,
            1839961,
            1847965,
            1841485,
            1840001,
            1840567,
            1839860,
            1841578,
            1839437,
            1840889,
            1840454,
            1839972,
            1839833,
            1841387,
            1839459,
            1840240,
            1840100,
            1840475
        ]
    },
    "name": "B. Guess That Car ",
    "statement": "A widely known among some people Belarusian sport programmer Yura\r\npossesses lots of information about cars. That is why he has been\r\ninvited to participate in a game show called \"Guess That Car!\".The game\r\nshow takes place on a giant parking lot, which is meters long from north\r\nto south and meters wide from west to east. The lot has dividing lines\r\ndrawn from west to east and dividing lines drawn from north to south,\r\nwhich divide the parking lot into by meter squares. There is a car\r\nparked strictly inside each square. The dividing lines are numbered from\r\nto from north to south and from to from west to east. Each square has\r\ncoordinates so that the square in the north-west corner has coordinates\r\nand the square in the south-east corner has coordinates . See the\r\npicture in the notes for clarifications.Before the game show the\r\norganizers offer Yura to occupy any of the intersection points of the\r\ndividing lines. After that he can start guessing the cars. After Yura\r\nchooses a point, he will be prohibited to move along the parking lot\r\nbefore the end of the game show. As Yura is a car expert, he will always\r\nguess all cars he is offered, it’s just a matter of time. Yura knows\r\nthat to guess each car he needs to spend time equal to the square of the\r\neuclidean distance between his point and the center of the square with\r\nthis car, multiplied by some coefficient characterizing the machine’s\r\n\"rarity\" (the rarer the car is, the harder it is to guess it). More\r\nformally, guessing a car with \"rarity\" placed in a square whose center\r\nis at distance from Yura takes seconds. The time Yura spends on turning\r\nhis head can be neglected.It just so happened that Yura knows the\r\n\"rarity\" of each car on the parking lot in advance. Help him choose his\r\npoint so that the total time of guessing all cars is the smallest\r\npossible.\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\ntypedef long long ll;\n\nint X,Y;\nint a[1010][1010];\nll sumx[1010],sumy[1010];\nll costx[1010],costy[1010];\n\nint main(void){\n    int i,j;\n    \n    cin >> X >> Y;\n    REP(i,X) REP(j,Y) cin >> a[i][j];\n    REP(i,X) REP(j,Y){\n        sumx[i] += a[i][j];\n        sumy[j] += a[i][j];\n    }\n    \n    REP(i,X+1) REP(j,X) costx[i] += sumx[j] * (2*i-2*j-1) * (2*i-2*j-1);\n    REP(i,Y+1) REP(j,Y) costy[i] += sumy[j] * (2*i-2*j-1) * (2*i-2*j-1);\n    \n    int ansx = 0, ansy = 0;\n    REP(i,X+1) if(costx[i] < costx[ansx]) ansx = i;\n    REP(i,Y+1) if(costy[i] < costy[ansy]) ansy = i;\n    \n    cout << 4 * (costx[ansx] + costy[ansy]) << endl << ansx << ' ' << ansy << endl;;\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "ternary search"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Guess That Car .json",
    "editorial_link": "https://codeforces.com/blog/entry/4808",
    "editorial": "We need to find such x and y that the value of  is minimum possible. This expression can be rewritten as . Note that the first part doesn't depend on y and the second part doesn't depend on x, so we can minimize these parts separately. Here is how to minimize , the second part is minimized similarly. As the expression in the brackets doesn't depend on j, this part can be rewritten as , where . Now it's enough to calculate the required value for all possible values of x and choose x for which this value is the smallest. The optimal value of y can be found similarly.\n\nThe overall complexity of this solution is O(n·m?+?n2?+?m2).\n\nAs the objective function is convex, other approaches to this problem are possible, for example, ternary search, gradient descent or analytical approach (calculation of derivatives).",
    "hint": []
}