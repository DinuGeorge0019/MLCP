{"link": "https://codeforces.com//contest/1078/problem/E", "problemId": "257670", "problem_idx": "E", "shortId": "1078E", "contest_number": "1078", "problem_submissions": {"D": [45940862, 45933303, 45935766, 45933853, 45930995, 45936488, 45940747, 45943827, 45939112, 45949887, 45939231, 45940966, 45940947, 45958692, 45958625, 45928396, 45942294, 45942258, 45942248, 45942159, 45942142, 45942044, 45941921, 45940689], "E": [45937493, 45942033, 45960731, 45946630], "B": [45928126, 45925305, 45926274, 45926072, 45923067, 45926568, 45940774, 45920994, 45922995, 45940934, 45949871, 45927955, 45922044, 45923855, 45923008, 45958814, 45932880, 45923428, 45938791, 45941333, 45925850, 45924600, 45924279], "C": [45926441, 45929882, 45930167, 45929211, 45934188, 45931921, 45926885, 45928260, 45930909, 45932518, 45925565, 45924426, 45931751, 45929018, 45958808, 45923916, 45927809, 45932834, 45932060, 45934408], "A": [45921892, 45921151, 45920874, 45923123, 45920460, 45920490, 45920725, 45923466, 45934579, 45920717, 45924554, 45958821, 45927000, 45931917, 45930488, 45922107, 45922245, 45921493]}, "name": "E. Negative Time Summation", "statement": "Everyone knows that computers become faster and faster. Recently Berland\r\nscientists have built a machine that can move itself back in time!More\r\nspecifically, it works as follows. It has an infinite grid and a robot\r\nwhich stands on one of the cells. Each cell of the grid can either be\r\nempty or contain or . The machine also has a program which consists of\r\ninstructions, which are being handled one by one. Each instruction is\r\nrepresented by exactly one symbol (letter or digit) and takes exactly\r\none unit of time (say, second) to be performed, except the last type of\r\noperation (it\u2019s described below). Here they are: or : the robot places\r\nthis number into the cell he is currently at. If this cell wasn\u2019t empty\r\nbefore the operation, its previous number is replaced anyway. : the\r\nrobot rases the number into the cell he is at. , , or : the robot goes\r\none cell to the eft/ight/p/own. : the robot tays where he is for a unit\r\nof time. : let x be 0, if the cell with the robot is empty, otherwise\r\nlet x be one more than the digit in this cell (that is, x = 1 if the\r\ndigit in this cell is 0, and x = 2 if the digit is 1). Then the machine\r\nravels x seconds back in time. Note that this doesn\u2019t change the\r\ninstructions order, but it changes the position of the robot and the\r\nnumbers in the grid as they were x units of time ago. You can consider\r\nthis instruction to be equivalent to a pressed x times. For example, let\r\nthe board be completely empty, and the program be . Let the robot\r\ninitially be at (0, 0). [now is the moment 0, the command is ]: we do\r\nnothing. [now is the moment 1, the command is ]: we are now at (1, 0).\r\n[now is the moment 2, the command is ]: we are at (1, 0), and this cell\r\ncontains 1. [now is the moment 3, the command is ]: we travel 1 + 1 = 2\r\nmoments back, that is, to the moment 1. [now is the moment 1, the\r\ncommand is ]: we are again at (0, 0), and the board is clear again, but\r\nafter we follow this instruction, this cell has 0 in it. We\u2019ve just\r\nrewritten the history. The consequences of the third instruction have\r\nnever happened. Now Berland scientists want to use their machine in\r\npractice. For example, they want to be able to add two integers.Assume\r\nthat the initial state of the machine is as follows: One positive\r\ninteger is written in binary on the grid in such a way that its right\r\nbit is at the cell (0, 1), from left to right from the highest bit to\r\nthe lowest bit. The other positive integer is written in binary on the\r\ngrid in such a way that its right bit is at the cell (0, 0), from left\r\nto right from the highest bit to the lowest bit. All the other cells are\r\nempty. The robot is at (0, 0). We consider this state to be always in\r\nthe past; that is, if you manage to travel to any negative moment, the\r\nboard was always as described above, and the robot was at (0, 0) for\r\neternity. You are asked to write a program after which The robot stands\r\non a non-empty cell, If we read the number starting from the cell with\r\nthe robot and moving to the right until the first empty cell, this will\r\nbe a + b in binary, from the highest bit to the lowest bit. Note that\r\nthere are no restrictions on other cells. In particular, there may be a\r\ndigit just to the left to the robot after all instructions.In each test\r\nyou are given up to 1000 pairs (a, b), and your program must work for\r\nall these pairs. Also since the machine\u2019s memory is not very big, your\r\nprogram must consist of no more than 10^5 instructions.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\n\nstring pulld = \"s10utsusdteds\";\nstring pullr = \"s10ltslsrters\";\nstring pulll = \"s10rtsrsltels\";\nstring pull_all;\nvoid make_pull_all(){\n\tfor(int i = 0; i < 36; i++){\n\t\tpull_all += pulld;\n\t\tpull_all += \"ls\";\n\t}\n\tfor(int i = 0; i < 36; i++){\n\t\tpull_all += \"r\";\n\t}\n}\n\nint main(){\n\tmake_pull_all();\n\tstring ans;\n\tans += \"d\" + pull_all;\n\tans += \"d\" + pull_all;\n\tans += \"uu\" + pull_all;\n\tans += \"d\";\n\tans += \"l0r\";\n\tfor(int i = 0; i < 32; i++){\n\t\tans += \"1010utdtlt\";\n\t\tans += \"r\" + pullr + \"l\";\n\t\tans += \"1100utdtlt\";\n\t\tans += \"l\" + pulll + \"l\" + pulll + \"rr\";\n\t\tans += \"l\";\n\t}\n\tans += \"rr\";\n\tcout << ans << endl;\n}"], "input": "", "output": "", "tags": ["constructive algorithms"], "dificulty": "3400", "interactive": false}