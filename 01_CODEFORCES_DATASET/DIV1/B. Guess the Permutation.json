{
    "link": "https://codeforces.com//contest/1588/problem/B",
    "problemId": "1186191",
    "problem_idx": "B",
    "shortId": "1588B",
    "contest_number": "1588",
    "problem_submissions": {
        "D": [
            135372629,
            135381098,
            135359109,
            135369800,
            135370088,
            135380867,
            135357823,
            135362201,
            135366407,
            135370846,
            135374380,
            135373580,
            135374295,
            135373419,
            135378493,
            135376601,
            135375978,
            135382040
        ],
        "C": [
            135363142,
            135352112,
            135379109,
            135361010,
            135362653,
            135375549,
            135350810,
            135353082,
            135359513,
            135351205,
            135365941,
            135366190,
            135366197,
            135366261,
            135798161,
            135798159,
            135798156,
            135798153,
            135793795,
            135353318,
            135359719,
            135363580,
            135376282,
            135360557
        ],
        "B": [
            135354041,
            135372942,
            135367733,
            135353235,
            135382607,
            135353847,
            135347088,
            135367644,
            135348462,
            135359847,
            135354086,
            135351940,
            135356516,
            135347194,
            135365557,
            135349342,
            135357424,
            135354885,
            135351181
        ],
        "A": [
            135347972,
            135342643,
            135342911,
            135343015,
            135342760,
            135342918,
            135342730,
            135343666,
            135342808,
            135352544,
            135343056,
            135344466,
            135342657,
            135342700,
            135342859,
            135345441,
            135343145,
            135343927,
            135342677
        ],
        "E": [
            135346443,
            135364189,
            135371530,
            135382787,
            135381160,
            135387683,
            135507210,
            135399676,
            135412491,
            135411131,
            135507958,
            135387301
        ],
        "F": [
            135608326,
            135531498,
            135406993,
            135398120,
            135395364
        ]
    },
    "name": "B. Guess the Permutation",
    "statement": "Jury initially had a sequence a of length n, such that a_i = i.The jury\r\nchose three integers i, j, k, such that 1\r\nleq i < j < k\r\nleq n, j - i > 1. After that, Jury reversed subsegments [i, j - 1] and\r\n[j, k] of the sequence a.Reversing a subsegment [l, r] of the sequence a\r\nmeans reversing the order of elements a_l, a_{l+1},\r\nldots, a_r in the sequence, i. e. a_l is swapped with a_r, a_{l+1} is\r\nswapped with a_{r-1}, etc.You are given the number n and you should find\r\ni, j, k after asking some questions.In one question you can choose two\r\nintegers l and r (1\r\nleq l\r\nleq r\r\nleq n) and ask the number of inversions on the subsegment [l, r] of the\r\nsequence a. You will be given the number of pairs (i, j) such that l\r\nleq i < j\r\nleq r, and a_i > a_j.Find the chosen numbers i, j, k after at most 40\r\nquestions.The numbers i, j, and k are fixed before the start of your\r\nprogram and do not depend on your queries.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define sz(v) ((int)(v).size())\n#define all(v) (v).begin(), (v).end()\nusing namespace std;\nusing lint = long long;\nusing pi = pair<lint, lint>;\nconst int MAXN = 1600;\n\nlint query(int s, int e){\n\tcout << \"? \" << s << \" \" << e << endl;\n\tlint x; cin >> x; return x;\n}\n\nint main(){\n\tint t; cin >> t;\n\twhile(t--){\n\t\tint n; cin >> n;\n\t\tint s = 1, e = n;\n\t\twhile(s != e){\n\t\t\tint m = (s + e) / 2;\n\t\t\tif(query(1, m)) e = m;\n\t\t\telse s = m + 1;\n\t\t}\n\t\t// [1, s] have inversion >= 1\n\t\tint ai = s - 1;\n\t\tlint delta = query(ai, n) - query(ai + 1, n);\n\t\tint aj = ai + delta + 1;\n\t\tlint total = query(aj, n);\n\t\tint ak = aj;\n\t\t{\n\t\t\tlint s = 1, e = n;\n\t\t\twhile(s != e){\n\t\t\t\tlint m = (s + e) / 2;\n\t\t\t\tif(m * (m - 1) / 2 >= total) e = m;\n\t\t\t\telse s = m + 1;\n\t\t\t}\n\t\t\tak += s - 1;\n\t\t}\n\t\tcout << \"! \" << ai <<  \" \" << aj << \" \" <<  ak << endl;\n\t}\n\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics",
        "implementation",
        "interactive"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Guess the Permutation.json",
    "editorial_link": "https://codeforces.com//blog/entry/96953",
    "editorial": "Note that the number of inversions on decreasing sequence of length l\n is (l2)\n.\n\nAs we reversed two non-overlaping subsegments, the number of inversions on each subsegment is equal to sum of number of inversions of parts of reversed subsegments, which are decreasing.\n\nFirst of all, let's find A:=(k?j+12)+(j?i2)\n Â— total number of inversions in sequence. We use 1 question for that.\n\nNow let's look on the number of inversions on subsegment [x\n, n\n]. If this number is less than A, then not both reversed subsegments fit entirely, so i<x\n, otherwise i?x\n.\n\nNow we can apply binnary search to find i\n. We use log2(n)\n questions here.\n\nNow let's ask the number of inversions on subsegment [i+1\n, n\n], let's call this number B. We use 1\n question here. From the structure of sequence: A?B\n = |{x|x>i,ax<ai}|\n = |[i+1,j?1]|\n = j?i?1\n.\n\nNow we can find j?i\n, j\n and (j?i2)\n, due to the definition of A, we find (k?j+12)\n.\n\nFinaly, we can solve quadratic equation for k?j+1\n and get k\n.\n\nOverall, we used log2(n)+2?32\n questions, but we gave you a bit more, in case your solution uses few more questions on some stage.",
    "hint": []
}