{"link": "https://codeforces.com//contest/1718/problem/F", "problemId": "1509969", "problem_idx": "F", "shortId": "1718F", "contest_number": "1718", "problem_submissions": {"F": [168597010, 168624668, 173812548, 173812098, 168599096], "D": [168565469, 168586026, 168571061, 168581216, 168578771, 168572736, 168587794, 168591318, 168592506, 168597359, 168590948, 168600506, 168597231, 168582453, 168687986], "C": [168541281, 168543939, 168544627, 168545043, 168549826, 168553177, 168540235, 168546151, 168543268, 168562740, 168541559, 168562194, 168567397, 168609760, 168609209, 168608717, 168567701, 168606687, 168620286, 168547337, 168546667, 168553348, 168556898, 168552397], "B": [168533942, 168529866, 168534830, 168535200, 168537223, 168547085, 168528202, 168537852, 168530917, 168805783, 168550097, 168530349, 168548672, 168547336, 168549427, 168545357, 168535673, 168532763, 168537259, 168542957, 168536570], "A2": [168516853, 168520403, 168525192, 168517279, 168521825, 168526171, 168517695, 168521659, 168518863, 168529215, 168520755, 168523804, 168536216, 168521669, 168523926, 168522044, 168518219, 168525244, 168524582, 168517935], "A1": [168516745, 168520669, 168524305, 168517111, 168521468, 168525366, 168517892, 168521859, 168518553, 168529389, 168520943, 168523566, 168536034, 168521371, 168523798, 168521699, 168516764, 168524985, 168524317, 168517770], "E": [168650929, 168598643, 168610266, 173790812]}, "name": "F. Burenka, an Array and Queries", "statement": "Eugene got Burenka an array a of length n of integers from 1 to m for\r\nher birthday. Burenka knows that Eugene really likes integers (integers\r\nx and y such that they have only one common factor (equal to 1)) so she\r\nwants to to ask Eugene q questions about the present. Each time Burenka\r\nwill choose a subsegment a_l, a_{l + 1},\r\nldots, a_r of array a, and compute the product of these numbers p = a_l\r\ncdot a_{l + 1}\r\ncdot\r\nldots\r\ncdot a_r. Then she will ask Eugene to count the number of integers\r\nbetween 1 and C inclusive which are coprime with p. Help Eugene answer\r\nall the questions!\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 16.08.2022 18:50:55       \n**/\n#undef _GLIBCXX_DEBUG\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\ntemplate <typename T>\nT inverse(T a, T m) {\n  T u = 0, v = 1;\n  while (a != 0) {\n    T t = m / a;\n    m -= t * a; swap(a, m);\n    u -= t * v; swap(u, v);\n  }\n  assert(m == 1);\n  return u;\n}\n\ntemplate <typename T>\nclass Modular {\n public:\n  using Type = typename decay<decltype(T::value)>::type;\n\n  constexpr Modular() : value() {}\n  template <typename U>\n  Modular(const U& x) {\n    value = normalize(x);\n  }\n\n  template <typename U>\n  static Type normalize(const U& x) {\n    Type v;\n    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);\n    else v = static_cast<Type>(x % mod());\n    if (v < 0) v += mod();\n    return v;\n  }\n\n  const Type& operator()() const { return value; }\n  template <typename U>\n  explicit operator U() const { return static_cast<U>(value); }\n  constexpr static Type mod() { return T::value; }\n\n  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }\n  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }\n  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }\n  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }\n  Modular& operator++() { return *this += 1; }\n  Modular& operator--() { return *this -= 1; }\n  Modular operator++(int) { Modular result(*this); *this += 1; return result; }\n  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }\n  Modular operator-() const { return Modular(-value); }\n\n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {\n#ifdef _WIN32\n    uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);\n    uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;\n    asm(\n      \"divl %4; \\n\\t\"\n      : \"=a\" (d), \"=d\" (m)\n      : \"d\" (xh), \"a\" (xl), \"r\" (mod())\n    );\n    value = m;\n#else\n    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));\n#endif\n    return *this;\n  }\n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, long long>::value, Modular>::type& operator*=(const Modular& rhs) {\n    long long q = static_cast<long long>(static_cast<long double>(value) * rhs.value / mod());\n    value = normalize(value * rhs.value - q * mod());\n    return *this;\n  }\n  template <typename U = T>\n  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {\n    value = normalize(value * rhs.value);\n    return *this;\n  }\n\n  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }\n\n  friend const Type& abs(const Modular& x) { return x.value; }\n\n  template <typename U>\n  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);\n\n  template <typename U>\n  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);\n\n  template <typename V, typename U>\n  friend V& operator>>(V& stream, Modular<U>& number);\n\n private:\n  Type value;\n};\n\ntemplate <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }\ntemplate <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }\ntemplate <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }\n\ntemplate <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\n\ntemplate <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }\n\ntemplate <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\n\ntemplate <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\n\ntemplate <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\n\ntemplate <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\n\ntemplate<typename T, typename U>\nModular<T> power(const Modular<T>& a, const U& b) {\n  assert(b >= 0);\n  Modular<T> x = a, res = 1;\n  U p = b;\n  while (p > 0) {\n    if (p & 1) res *= x;\n    x *= x;\n    p >>= 1;\n  }\n  return res;\n}\n\ntemplate <typename T>\nbool IsZero(const Modular<T>& number) {\n  return number() == 0;\n}\n\ntemplate <typename T>\nstring to_string(const Modular<T>& number) {\n  return to_string(number());\n}\n\n// U == std::ostream? but done this way because of fastoutput\ntemplate <typename U, typename T>\nU& operator<<(U& stream, const Modular<T>& number) {\n  return stream << number();\n}\n\n// U == std::istream? but done this way because of fastinput\ntemplate <typename U, typename T>\nU& operator>>(U& stream, Modular<T>& number) {\n  typename common_type<typename Modular<T>::Type, long long>::type x;\n  stream >> x;\n  number.value = Modular<T>::normalize(x);\n  return stream;\n}\n\n/*\nusing ModType = int;\n\nstruct VarMod { static ModType value; };\nModType VarMod::value;\nModType& md = VarMod::value;\nusing Mint = Modular<VarMod>;\n*/\n\nconstexpr int md = 123;\nusing Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;\n\n/*vector<Mint> fact(1, 1);\nvector<Mint> inv_fact(1, 1);\n\nMint C(int n, int k) {\n  if (k < 0 || k > n) {\n    return 0;\n  }\n  while ((int) fact.size() < n + 1) {\n    fact.push_back(fact.back() * (int) fact.size());\n    inv_fact.push_back(1 / fact.back());\n  }\n  return fact[n] * inv_fact[k] * inv_fact[n - k];\n}*/\n\nnamespace factorizer {\n\ntemplate <typename T>\nstruct FactorizerVarMod { static T value; };\ntemplate <typename T>\nT FactorizerVarMod<T>::value;\n\ntemplate <typename T>\nbool IsPrime(T n, const vector<T>& bases) {\n  if (n < 2) {\n    return false;\n  }\n  vector<T> small_primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n  for (const T& x : small_primes) {\n    if (n % x == 0) {\n      return n == x;\n    }\n  }\n  if (n < 31 * 31) {\n    return true;\n  }\n  int s = 0;\n  T d = n - 1;\n  while ((d & 1) == 0) {\n    d >>= 1;\n    s++;\n  }\n  FactorizerVarMod<T>::value = n;\n  for (const T& a : bases) {\n    if (a % n == 0) {\n      continue;\n    }\n    Modular<FactorizerVarMod<T>> cur = a;\n    cur = power(cur, d);\n    if (cur == 1) {\n      continue;\n    }\n    bool witness = true;\n    for (int r = 0; r < s; r++) {\n      if (cur == n - 1) {\n        witness = false;\n        break;\n      }\n      cur *= cur;\n    }\n    if (witness) {\n      return false;\n    }\n  }\n  return true;\n}\n\nbool IsPrime(int64_t n) {\n  return IsPrime(n, {2, 325, 9375, 28178, 450775, 9780504, 1795265022});\n}\n\nbool IsPrime(int32_t n) {\n  return IsPrime(n, {2, 7, 61});\n}\n\n// but if you really need uint64_t version...\n/*\nbool IsPrime(uint64_t n) {\n  if (n < 2) {\n    return false;\n  }\n  vector<uint32_t> small_primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n  for (uint32_t x : small_primes) {\n    if (n == x) {\n      return true;\n    }\n    if (n % x == 0) {\n      return false;\n    }\n  }\n  if (n < 31 * 31) {\n    return true;\n  }\n  uint32_t s = __builtin_ctzll(n - 1);\n  uint64_t d = (n - 1) >> s;\n  function<bool(uint64_t)> witness = [&n, &s, &d](uint64_t a) {\n    uint64_t cur = 1, p = d;\n    while (p > 0) {\n      if (p & 1) {\n        cur = (__uint128_t) cur * a % n;\n      }\n      a = (__uint128_t) a * a % n;\n      p >>= 1;\n    }\n    if (cur == 1) {\n      return false;\n    }\n    for (uint32_t r = 0; r < s; r++) {\n      if (cur == n - 1) {\n        return false;\n      }\n      cur = (__uint128_t) cur * cur % n;\n    }\n    return true;\n  };\n  vector<uint64_t> bases_64bit = {2, 325, 9375, 28178, 450775, 9780504, 1795265022};\n  for (uint64_t a : bases_64bit) {\n    if (a % n == 0) {\n      return true;\n    }\n    if (witness(a)) {\n      return false;\n    }\n  }\n  return true;\n}\n*/\n\nvector<int> least = {0, 1};\nvector<int> primes;\nint precalculated = 1;\n\nvoid RunLinearSieve(int n) {\n  n = max(n, 1);\n  least.assign(n + 1, 0);\n  primes.clear();\n  for (int i = 2; i <= n; i++) {\n    if (least[i] == 0) {\n      least[i] = i;\n      primes.push_back(i);\n    }\n    for (int x : primes) {\n      if (x > least[i] || i * x > n) {\n        break;\n      }\n      least[i * x] = x;\n    }\n  }\n  precalculated = n;\n}\n\nvoid RunSlowSieve(int n) {\n  n = max(n, 1);\n  least.assign(n + 1, 0);\n  for (int i = 2; i * i <= n; i++) {\n    if (least[i] == 0) {\n      for (int j = i * i; j <= n; j += i) {\n        if (least[j] == 0) {\n          least[j] = i;\n        }\n      }\n    }\n  }\n  primes.clear();\n  for (int i = 2; i <= n; i++) {\n    if (least[i] == 0) {\n      least[i] = i;\n      primes.push_back(i);\n    }\n  }\n  precalculated = n;\n}\n\nvoid RunSieve(int n) {\n  RunLinearSieve(n);\n}\n\ntemplate <typename T>\nvector<pair<T, int>> MergeFactors(const vector<pair<T, int>>& a, const vector<pair<T, int>>& b) {\n  vector<pair<T, int>> c;\n  int i = 0;\n  int j = 0;\n  while (i < (int) a.size() || j < (int) b.size()) {\n    if (i < (int) a.size() && j < (int) b.size() && a[i].first == b[j].first) {\n      c.emplace_back(a[i].first, a[i].second + b[j].second);\n      ++i;\n      ++j;\n      continue;\n    }\n    if (j == (int) b.size() || (i < (int) a.size() && a[i].first < b[j].first)) {\n      c.push_back(a[i++]);\n    } else {\n      c.push_back(b[j++]);\n    }\n  }\n  return c;\n}\n\ntemplate <typename T>\nvector<pair<T, int>> RhoC(const T& n, const T& c) {\n  if (n <= 1) {\n    return {};\n  }\n  if ((n & 1) == 0) {\n    return MergeFactors({{2, 1}}, RhoC(n / 2, c));\n  }\n  if (IsPrime(n)) {\n    return {{n, 1}};\n  }\n  FactorizerVarMod<T>::value = n;\n  Modular<FactorizerVarMod<T>> x = 2;\n  Modular<FactorizerVarMod<T>> saved = 2;\n  T power = 1;\n  T lam = 1;\n  while (true) {\n    x = x * x + c;\n    T g = __gcd((x - saved)(), n);\n    if (g != 1) {\n      return MergeFactors(RhoC(g, c + 1), RhoC(n / g, c + 1));\n    }\n    if (power == lam) {\n      saved = x;\n      power <<= 1;\n      lam = 0;\n    }\n    lam++;\n  }\n  return {};\n}\n\ntemplate <typename T>\nvector<pair<T, int>> Rho(const T& n) {\n  return RhoC(n, static_cast<T>(1));\n}\n\ntemplate <typename T>\nvector<pair<T, int>> Factorize(T x) {\n  if (x <= 1) {\n    return {};\n  }\n  if (x <= precalculated) {\n    vector<pair<T, int>> ret;\n    while (x > 1) {\n      if (!ret.empty() && ret.back().first == least[x]) {\n        ret.back().second++;\n      } else {\n        ret.emplace_back(least[x], 1);\n      }\n      x /= least[x];\n    }\n    return ret;\n  }\n  if (x <= static_cast<int64_t>(precalculated) * precalculated) {\n    vector<pair<T, int>> ret;\n    if (!IsPrime(x)) {\n      for (T i : primes) {\n        T t = x / i;\n        if (i > t) {\n          break;\n        }\n        if (x == t * i) {\n          int cnt = 0;\n          while (x % i == 0) {\n            x /= i;\n            cnt++;\n          }\n          ret.emplace_back(i, cnt);\n          if (IsPrime(x)) {\n            break;\n          }\n        }\n      }\n    }\n    if (x > 1) {\n      ret.emplace_back(x, 1);\n    }\n    return ret;\n  }\n  return Rho(x);\n}\n\ntemplate <typename T>\nvector<T> BuildDivisorsFromFactors(const vector<pair<T, int>>& factors) {\n  vector<T> divisors = {1};\n  for (auto& p : factors) {\n    int sz = (int) divisors.size();\n    for (int i = 0; i < sz; i++) {\n      T cur = divisors[i];\n      for (int j = 0; j < p.second; j++) {\n        cur *= p.first;\n        divisors.push_back(cur);\n      }\n    }\n  }\n  sort(divisors.begin(), divisors.end());\n  return divisors;\n}\n\n}  // namespace factorizer\n\n// https://codeforces.com/blog/entry/61203\n// https://ideone.com/No6ksW\n\ninline int64_t hilbertOrder(int x, int y, int pow, int rotate) {\n\tif (pow == 0) {\n\t\treturn 0;\n\t}\n\tint hpow = 1 << (pow-1);\n\tint seg = (x < hpow) ? (\n\t\t(y < hpow) ? 0 : 3\n\t) : (\n\t\t(y < hpow) ? 1 : 2\n\t);\n\tseg = (seg + rotate) & 3;\n\tconst int rotateDelta[4] = {3, 0, 0, 1};\n\tint nx = x & (x ^ hpow), ny = y & (y ^ hpow);\n\tint nrot = (rotate + rotateDelta[seg]) & 3;\n\tint64_t subSquareSize = int64_t(1) << (2*pow - 2);\n\tint64_t ans = seg * subSquareSize;\n\tint64_t add = hilbertOrder(nx, ny, pow-1, nrot);\n\tans += (seg == 1 || seg == 2) ? add : (subSquareSize - add - 1);\n\treturn ans;\n}\n\nconst int X = 777;\nconst int Y = 12345;\nconst int W = (int) 1e5 + 10;\n\nint dp[X];\nint all[Y * 3];\nint has[W];\nint cnt[W];\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n, M, C, q;\n  cin >> n >> M >> C >> q;\n  factorizer::RunSieve(max(M, C));\n  vector<int> a(n);\n  vector<vector<int>> fs(n);\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n    auto f = factorizer::Factorize(a[i]);\n    for (auto& qq : f) {\n      fs[i].push_back(qq.first);\n    }\n  }\n  vector<int> from(q), to(q);\n  vector<int> res(q, 0);\n  for (int i = 0; i < q; i++) {\n    cin >> from[i] >> to[i];\n    --from[i]; --to[i];\n  }\n  auto Add = [&](int i) {\n    for (int f : fs[i]) {\n      has[f] = 1;\n      cnt[f] += 1;\n    }\n  };\n  auto Remove = [&](int i) {\n    for (int f : fs[i]) {\n      cnt[f] -= 1;\n      has[f] = !!cnt[f];\n    }\n  };\n  vector<long long> value(q);\n  for (int i = 0; i < q; i++) {\n    value[i] = hilbertOrder(from[i], to[i], 21, 0);\n  }\n  vector<int> order(q);\n  iota(order.begin(), order.end(), 0);\n  sort(order.begin(), order.end(), [&](int i, int j) {\n    return value[i] < value[j];\n  });\n  vector<int> nums;\n  for (int i = 1; i <= C; i++) {\n    nums.push_back(C / i);\n  }\n  debug(\"Hi\");\n  sort(nums.begin(), nums.end());\n  nums.resize(unique(nums.begin(), nums.end()) - nums.begin());\n  int sz = (int) nums.size();\n  debug(sz);\n  vector<int> pos(max(C, M) + 1, -1);\n  for (int i = 0; i < sz; i++) {\n    pos[nums[i]] = i;\n  }\n  debug(\"Hi\");\n  vector<int> ps;\n  for (int i = 2; i <= M; i++) {\n    if (factorizer::least[i] == i) {\n      ps.push_back(i);\n    }\n  }\n  reverse(ps.begin(), ps.end());\n  dp[sz - 1] = 1;\n  int Q = 0;\n  int cc = 0;\n  for (int p : ps) {\n    for (int i = 0; i < sz; i++) {\n      if (nums[i] >= p && dp[i] != 0) {\n        Q += 1;\n        dp[pos[nums[i] / p]] = 1;\n        all[cc++] = pos[nums[i] / p];\n        all[cc++] = i;\n        all[cc++] = p;\n      }\n    }\n  }\n  debug(\"Hi\");\n  cc /= 3;\n  debug(cc);\n  int L = 0;\n  int R = -1;\n  for (int i : order) {\n    while (R < to[i]) {\n      R += 1;\n      Add(R);\n    }\n    while (L > from[i]) {\n      L -= 1;\n      Add(L);\n    }\n    while (R > to[i]) {\n      Remove(R);\n      R -= 1;\n    }\n    while (L < from[i]) {\n      Remove(L);\n      L += 1;\n    }\n    memset(dp, 0, sizeof(dp));\n    dp[sz - 1] = 1;\n    int* u = all;\n    for (int j = 0; j < cc; j++) {\n      dp[*u] -= dp[*(u + 1)] * has[*(u + 2)];\n      u += 3;\n    }\n    for (int j = 0; j < sz; j++) {\n      res[i] += dp[j] * nums[j];\n    }\n  }\n  for (int i = 0; i < q; i++) {\n    cout << res[i] << '\\n';\n  }\n  debug(clock());\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "math", "number theory"], "dificulty": "3300", "interactive": false}