{
    "link": "https://codeforces.com//contest/1508/problem/F",
    "problemId": "958786",
    "problem_idx": "F",
    "shortId": "1508F",
    "contest_number": "1508",
    "problem_submissions": {
        "D": [
            113258208,
            113225842,
            113232066,
            113242382,
            113242310,
            113248310,
            113252824,
            113256393,
            113240058,
            113236672,
            113233206,
            113240165,
            113242005,
            113242817,
            113243142
        ],
        "F": [
            113247954,
            113415583,
            113275748,
            113263512,
            113569093,
            113516939
        ],
        "C": [
            113237315,
            113213039,
            113214478,
            113213780,
            113212574,
            113213010,
            113224842,
            113226169,
            113232722,
            113215825,
            113215542,
            113224987,
            113223453,
            113228420,
            113228228,
            113217788,
            113226078,
            113229271,
            113230097
        ],
        "E": [
            113228353,
            113239041,
            113241831,
            113228851,
            113231701,
            113244425,
            113243109,
            113247201,
            113253919,
            113253035,
            113238610,
            113246155,
            113333091,
            113246539,
            113240797,
            113246922
        ],
        "A": [
            113201428,
            113189518,
            113189456,
            113190605,
            113198010,
            113192641,
            113194080,
            113204739,
            113207875,
            113194317,
            113200012,
            113222414,
            113194745,
            113195037,
            113199971,
            113199286,
            113193286,
            113195565,
            113191574,
            113194231
        ],
        "B": [
            113197951,
            113196658,
            113192904,
            113196665,
            113201215,
            113199153,
            113202442,
            113210198,
            113217372,
            113203624,
            113208530,
            113197629,
            113206458,
            113203987,
            113206383,
            113212945,
            113200476,
            113197819,
            113199529,
            113200558
        ]
    },
    "name": "F. Optimal Encoding",
    "statement": "Touko’s favorite sequence of numbers is a permutation a_1, a_2,\r\ndots, a_n of 1, 2,\r\ndots, n, and she wants some collection of permutations that are similar\r\nto her favorite permutation.She has a collection of q intervals of the\r\nform [l_i, r_i] with 1\r\nle l_i\r\nle r_i\r\nle n. To create permutations that are similar to her favorite\r\npermutation, she coined the following definition: A permutation b_1,\r\nb_2,\r\ndots, b_n allows an interval [l’, r’] to if for any pair of integers (x,\r\ny) such that l’\r\nle x < y\r\nle r’, we have b_x < b_y if and only if a_x < a_y. A permutation b_1,\r\nb_2,\r\ndots, b_n is if b allows all intervals [l_i, r_i] for all 1\r\nle i\r\nle k to hold their shapes. Yuu wants to figure out all k-similar\r\npermutations for Touko, but it turns out this is a very hard task;\r\ninstead, Yuu will the set of all k-similar permutations with directed\r\nacylic graphs (DAG). Yuu also coined the following definitions for\r\nherself: A permutation b_1, b_2,\r\ndots, b_n a DAG G’ if for all edge u\r\nto v in G’, we must have b_u < b_v. A is a DAG G_k on the set of\r\nvertices 1, 2,\r\ndots, n such that a permutation b_1, b_2,\r\ndots, b_n satisfies G_k if and only if b is k-similar. Since Yuu is free\r\ntoday, she wants to figure out the minimum number of edges among all\r\nk-encodings for each k from 1 to q.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nint main() {\n\tusing namespace std;\n\tios_base::sync_with_stdio(false), cin.tie(nullptr);\n\n\tint N, Q; cin >> N >> Q;\n\tvector<int> A(N); for (auto& a : A) { cin >> a; a--; }\n\tvector<int> leftmost(N); iota(leftmost.begin(), leftmost.end(), 0);\n\tstruct vert_dat {\n\t\tpair<int, int> prv_pred;\n\t\tpair<int, int> prv_succ;\n\t\tpair<int, int> nxt_pred;\n\t\tpair<int, int> nxt_succ;\n\t};\n\tvector<vert_dat> verts(N);\n\tfor (int i = 0; i < N; i++) {\n\t\tverts[i].prv_pred = {-1, -1};\n\t\tverts[i].prv_succ = {N, -1};\n\t\tverts[i].nxt_pred = {-1, -1};\n\t\tverts[i].nxt_succ = {N, -1};\n\t}\n\n\tint ans = 0;\n\tfor (int q = 0; q < Q; q++) {\n\t\tint L, R; cin >> L >> R; L--;\n\t\tint b = R;\n\t\twhile (leftmost[b-1] > L) b--;\n\t\tfor (; b < R; b++) {\n\t\t\tassert(b > L && leftmost[b-1] <= L);\n\t\t\twhile (leftmost[b] > L) {\n\t\t\t\tleftmost[b]--;\n\t\t\t\tint a = leftmost[b];\n\t\t\t\t// insert the a-b constraint\n\t\t\t\tif (A[a] < A[b] && A[b] < verts[a].nxt_succ.first) {\n\t\t\t\t\tif (verts[a].nxt_succ.second != -1) {\n\t\t\t\t\t\tint c = verts[a].nxt_succ.second;\n\t\t\t\t\t\tverts[c].prv_pred.second = -1;\n\t\t\t\t\t\tans--;\n\t\t\t\t\t}\n\t\t\t\t\tverts[a].nxt_succ = {A[b], b};\n\t\t\t\t\tif (verts[b].prv_pred.second != -1) {\n\t\t\t\t\t\tint c = verts[b].prv_pred.second;\n\t\t\t\t\t\tverts[c].nxt_succ.second = -1;\n\t\t\t\t\t\tans--;\n\t\t\t\t\t}\n\t\t\t\t\tverts[b].prv_pred = {A[a], a};\n\t\t\t\t\tans++;\n\t\t\t\t} else if (A[a] > A[b] && A[b] > verts[a].nxt_pred.first) {\n\t\t\t\t\tif (verts[a].nxt_pred.second != -1) {\n\t\t\t\t\t\tint c = verts[a].nxt_pred.second;\n\t\t\t\t\t\tverts[c].prv_succ.second = -1;\n\t\t\t\t\t\tans--;\n\t\t\t\t\t}\n\t\t\t\t\tif (verts[b].prv_succ.second != -1) {\n\t\t\t\t\t\tint c = verts[b].prv_succ.second;\n\t\t\t\t\t\tverts[c].nxt_pred.second = -1;\n\t\t\t\t\t\tans--;\n\t\t\t\t\t}\n\t\t\t\t\tverts[a].nxt_pred = {A[b], b};\n\t\t\t\t\tverts[b].prv_succ = {A[a], a};\n\t\t\t\t\tans++;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcout << ans << '\\n';\n\t}\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\F. Optimal Encoding.json",
    "editorial_link": "https://codeforces.com//blog/entry/89644",
    "editorial": "We will first solve the problem for -similar permutations only. Letâs\r\ntransform each of the ranges into edges on a DAG we call : for all\r\nranges , for all pairs of indices such that , we add an edge from to .\r\nWe can easily see a permutation is -similar iff it satisfies . Now, our\r\ntask is to remove edges from such that the number of permutations that\r\nsatisfy it stays the same. We can remove an edge if and only if there is\r\na path from to with length . If there exists a path of length between ,\r\nthen we can remove the edge without having to worry about losing\r\ndependency between and . On the other hand, if there doesnât exist such\r\na path, then the only path connecting and is via the edge itself;\r\nremoving that edge removes any dependency between and . When that is the\r\ncase, we can easily create a permutation such that , then we simply swap\r\nand to gain a permutation that does not satisfy the original DAG.Letâs\r\nreturn to our problem. For any element , we consider the edges\r\nconnecting such that a of ; we define a of in a similar manner. There is\r\nat most one right edge of . Suppose there are two right edges of ,\r\nnamely and (suppose ). Because of our range construction, there must be\r\na range that covers both and . This range must covers too, therefore\r\nthere is a path between and , therefore we can remove either or\r\n.Therefore, there is at most one right edge . We can actually find this\r\nright edge: suppose is a range such that , and is as large as possible.\r\nThen is the index between and such that and is as small as possible. We\r\ncan prove similar results with the left edge of (denoted as ).However,\r\nthere will be cases when is actually not needed (I will call this\r\nphenomenon ). What is the condition for to be hidden? Thatâs when\r\nthereâs a path from to with length ! Suppose this path is in the format\r\n. We can prove that : if then that implies but , which means the right\r\nedge of is instead. Because , we can take the range such that , is as\r\nsmall as possible, and check if there exists an index such that . That\r\nconcludes the solution for finding the optimal encoding for\r\n-permutations. To recap: Find left and right edges of all . Check if the\r\nleft/right edges of all are hidden. If they are, remove them from the\r\nanswer. Letâs return to the original problem. For each range , instead\r\nof adding an edge for every to , letâs only add an edge between and such\r\nthat and are adjacent values in the range. This doesnât change our\r\nanswer because of lemma 1. Letâs call these edges .Surprisingly, all of\r\nour previous observations hold, but this time on the set of candidate\r\nedges. Namely, At any query, there is at most one right edge , which is\r\none of the candidate edges. The right edge must satisfy that , and is\r\nthe smallest such value in the range , where is the range covering with\r\nthe largest . is hidden if there exists a candidate edge such that , ,\r\nand where is the range covering with the smallest . We call this edge\r\nthe of the edge . All of the above points holds for the left edge .\r\nLetâs organize the candidate edges: for any edge , if , label as a of ,\r\nelse label as a of . Letâs sort the right candidate edges of by\r\nincreasing , and sort the left candidate edges of by decreasing . The\r\nvalues of the right end of the right candidate edges are decreasing,\r\ni.e. if the right candidate edges of are such that, , then . Similarly,\r\nif we sort the left candidate edges of by decreasing index, then the\r\nvalues of the left end of these candidate edges are decreasing.Using\r\nthis observation, we can prove that if the destroyer of is , and the\r\ndestroyer of is , then , or ; we can also prove a similar result with\r\nthe destroyers of left candidate edges. Therefore, we can use two\r\npointers to figure out the destroyer for each left and right candidate\r\nedge of .For each right candidate edge , letâs see when this candidate\r\nedge is used in the optimal encoding: The candidate edge is first\r\nactivated when there exists a range covering . We call this timestamp .\r\nThe candidate edge is hidden when there exists a range covering , where\r\nis the destroyer of . We call this timestamp . The candidate edge is\r\ndeactivated when there exists a range covering , where is the right\r\ncandidate edge after . We call this timestamp . For each candidate edge,\r\nwe can find these timestamps using a Fenwick tree. With these three\r\ntimestamps, we can figure out the range of time where each candidate\r\nedge is used (which is ), and modify the answer accordingly.Finally,\r\nletâs find out how many candidate edges there are: The number of\r\ncandidate edges is . Suppose for a range , we maintain edges such that ,\r\nand the values and are adjacent in the range . When we add/subtract one\r\nof the ends by 1, i.e. when we consider , the amount of edges that are\r\nmodified between and is (for example, if we add another element, then we\r\nremove at most 1 old edge and add at most 2 new edges; similarly, when\r\nremoving an element, we remove at most 2 old edges and add at most 1 new\r\nedge).Therefore, consider Moâs algorithm on the given collection of\r\nranges , each candidate edge must appear during the process of iterating\r\nover the ranges, and the number of modification is , therefore the\r\nnumber of candidate edges is .That concludes the solution to the full\r\nproblem. To recap: Find all candidate edges. Find the destroyer of all\r\ncandidate edges. Find the range of timestamps where each candidate edge\r\nis used. The complexity is . In particular, your set candidate edges\r\ndoes not have to be exactly the edges connecting consecutive values\r\nbetween ranges; these candidate edges only need to satisfy 3 conditions:\r\nAll edges that are included in some optimal -encoding must be present in\r\nthe set of candidate edges. The observation is not violated, i.e. if we\r\nsort the left/right candidate edges of any node by the other endpoint,\r\nthen the value at the other endpoint must be sorted as well. The number\r\nof candidate edges must not be too large, at about edges. This is to\r\nloosen up the process of generating the candidate edges, since the naive\r\nMo-and-set-of-values approach is incredibly expensive. My\r\nedge-generating approach involves using Mo with rollback to only allow\r\ndeletion of values so I can maintain the sorted values with a linked\r\nlist, and I also do not delete intermediary edges while iterating one\r\nrange to another.\r\n",
    "hint": [
        "Hint 1 Start by solving the problem for -encodings only.",
        "Hint 2 We can get an encoding by including every possible edge. Which of them can we exclude? Answer We need to keep an edge if and only if no other path from to exists.",
        "Hint 3 What does the previous observation look like from the perspective of a single vertex? Answer Each vertex has at most two outgoing edges, one on each side, and we can easily characterize when one of them is redundant.",
        "Hint 4 We need to solve the full version now. For a vertex , how do the endpoints of its outgoing edges change when we add a new interval? Answer The endpoints of the right edges increase monotonically, while the endpoints of the left edges decrease monotonically.",
        "Hint 5 How can we use the previous observation to characterize edges becoming redundant more concretely? Answer For each right edge, we can find a particular left edge, such that the right edge becomes redundant once the left edge appears. This gives us an interval of times for each edge during which it is relevant.",
        "Hint 6 Use Mo's algorithm on the input intervals to find the relevant edges."
    ]
}