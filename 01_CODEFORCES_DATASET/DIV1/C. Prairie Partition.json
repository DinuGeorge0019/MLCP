{"link": "https://codeforces.com//contest/806/problem/C", "problemId": "105597", "problem_idx": "C", "shortId": "806C", "contest_number": "806", "problem_submissions": {"E": [26946399, 26946353, 26942942, 26940751, 26976136, 26943065, 26942598, 26942187, 26937843, 26947143, 27001343, 26946488, 26943631, 26951183, 26939699, 26944777], "D": [26938120, 26934427, 26936263, 26937600, 26934513, 26936339, 26937621, 26938327, 26939404, 26938853, 26942391, 26940455, 26938860, 26938974, 26941503, 26941670], "B": [26933193, 26932004, 26938489, 26932467, 26931704, 26932365, 26935492, 26932113, 26930780, 26942817, 26930285, 26932725, 26943302, 26937682, 26931932, 26932598], "C": [26931766, 26942392, 26933099, 26934784, 26933629, 26933365, 26933930, 26931141, 26934600, 26930447, 26934117, 26934951, 26929917, 26933809, 26935513, 26934671], "A": [26928049, 26926811, 26929039, 26927072, 26927004, 26926681, 26927002, 26927962, 26928737, 26927722, 26927311, 26932013, 26927300, 26928724, 26926850, 26927034, 26927665, 26929077]}, "name": "C. Prairie Partition", "statement": "It can be shown that any positive integer can be uniquely represented as\r\n, where and are integers, , . Let\u2019s call that representation of .For\r\nexample, the prairie partitions of , , and are: ,,,. Alice took a\r\nsequence of positive integers (possibly with repeating elements),\r\nreplaced every element with the sequence of summands in its prairie\r\npartition, arranged the resulting numbers in non-decreasing order and\r\ngave them to Borys. Now Borys wonders how many elements Alice\u2019s original\r\nsequence could contain. Find all possible options!\r\n", "solutions": ["#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <algorithm>\n#include <numeric>\n#include <random>\n#include <vector>\n#include <array>\n#include <bitset>\n#include <queue>\n#include <set>\n#include <unordered_set>\n#include <map>\n#include <unordered_map>\n\nusing namespace std;\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nconstexpr ll TEN(int n) { return (n==0) ? 1 : 10*TEN(n-1); }\ntemplate<class T> using V = vector<T>;\ntemplate<class T> using VV = V<V<T>>;\n\nint bsr(uint x) { return 31 - __builtin_clz(x); }\nint bsr(ull x) { return 63 - __builtin_clzll(x); }\nint bsf(uint x) { return __builtin_ctz(x); }\nint bsf(ull x) { return __builtin_ctzll(x); }\n\nconst int MB = 50;\n\nint base[MB];\nint st[MB];\n\nbool check(int c) {\n    int c0 = 0, c1 = c;\n    for (int i = 0; i < MB-1; i++) {\n        c0 += st[i];\n        if (c0+c1 <= base[i]) {\n            //inc\n            int u = base[i] - (c0+c1);\n            if (c1 < u) return false;\n            c1 -= u;\n            c0 += u;\n        } else {\n            //dec\n            if (i == 0) return false;\n            int dec = (c0+c1) - base[i];\n            int dec0 = min(c0, dec);\n            c0 -= dec0;\n            dec -= dec0;\n            int dec1 = min(c1, dec);\n            c1 -= dec1;\n            dec -= dec1;\n            if (dec) return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << setprecision(20);\n    int n;\n    cin >> n;\n    int offset = 0;\n    for (int i = 0; i < n; i++) {\n        ll x;\n        cin >> x;\n        int u = bsr(ull(x));\n        if (x == (1LL<<u)) {\n            // pow 2\n            base[u]++;\n        } else {\n            for (int i = 0; i <= u; i++) {\n                base[i]--;\n            }\n            offset++;\n            st[u+1]++;\n        }\n    }\n\n/*    for (int i = 0; i < MB; i++) {\n        cout << base[i] << \" \";\n    }\n    cout << endl;\n\n    for (int i = 0; i < MB; i++) {\n        cout << st[i] << \" \";\n    }\n    cout << endl;*/\n\n    V<int> ok;\n    for (int i = 0; i <= n; i++) {\n        if (check(i)) ok.push_back(i+offset);\n    }\n\n    if (ok.size() == 0) {\n        cout << -1 << endl;\n    } else {\n        for (int d: ok) {\n            cout << d << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "greedy"], "dificulty": "2200", "interactive": false}