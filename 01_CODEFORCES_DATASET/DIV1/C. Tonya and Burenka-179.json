{
    "link": "https://codeforces.com//contest/1718/problem/C",
    "problemId": "1509966",
    "problem_idx": "C",
    "shortId": "1718C",
    "contest_number": "1718",
    "problem_submissions": {
        "F": [
            168597010,
            168624668,
            173812548,
            173812098,
            168599096
        ],
        "D": [
            168565469,
            168586026,
            168571061,
            168581216,
            168578771,
            168572736,
            168587794,
            168591318,
            168592506,
            168597359,
            168590948,
            168600506,
            168597231,
            168582453,
            168687986
        ],
        "C": [
            168541281,
            168543939,
            168544627,
            168545043,
            168549826,
            168553177,
            168540235,
            168546151,
            168543268,
            168562740,
            168541559,
            168562194,
            168567397,
            168609760,
            168609209,
            168608717,
            168567701,
            168606687,
            168620286,
            168547337,
            168546667,
            168553348,
            168556898,
            168552397
        ],
        "B": [
            168533942,
            168529866,
            168534830,
            168535200,
            168537223,
            168547085,
            168528202,
            168537852,
            168530917,
            168805783,
            168550097,
            168530349,
            168548672,
            168547336,
            168549427,
            168545357,
            168535673,
            168532763,
            168537259,
            168542957,
            168536570
        ],
        "A2": [
            168516853,
            168520403,
            168525192,
            168517279,
            168521825,
            168526171,
            168517695,
            168521659,
            168518863,
            168529215,
            168520755,
            168523804,
            168536216,
            168521669,
            168523926,
            168522044,
            168518219,
            168525244,
            168524582,
            168517935
        ],
        "A1": [
            168516745,
            168520669,
            168524305,
            168517111,
            168521468,
            168525366,
            168517892,
            168521859,
            168518553,
            168529389,
            168520943,
            168523566,
            168536034,
            168521371,
            168523798,
            168521699,
            168516764,
            168524985,
            168524317,
            168517770
        ],
        "E": [
            168650929,
            168598643,
            168610266,
            173790812
        ]
    },
    "name": "C. Tonya and Burenka-179",
    "statement": "Tonya was given an array of a of length n written on a postcard for his\r\nbirthday. For some reason, the postcard turned out to be a , so the\r\nindex of the element located strictly to the right of the n-th is 1.\r\nTonya wanted to study it better, so he bought a robot \"Burenka-179\".A\r\nprogram for Burenka is a pair of numbers (s, k), where 1\r\nleq s\r\nleq n, 1\r\nleq k\r\nleq n-1. Note that k be equal to n. Initially, Tonya puts the robot in\r\nthe position of the array s. After that, Burenka makes n steps through\r\nthe array. If at the beginning of a step Burenka stands in the position\r\ni, then the following happens: The number a_{i} is added to the of the\r\nprogram. \"Burenka\" moves k positions to the right (i := i + k is\r\nexecuted, if i becomes greater than n, then i := i - n). Help Tonya find\r\nthe maximum possible of a program for \"Burenka\" if the initial\r\nusefulness of any program is 0.Also, Tony’s friend Ilyusha asks him to\r\nchange the array q times. Each time he wants to assign a_p := x for a\r\ngiven index p and a value x. You need to find the maximum possible of\r\nthe program after each of these changes.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 16.08.2022 17:54:45       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n, q;\n    cin >> n >> q;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n      cin >> a[i];\n    }\n    vector<int> ds;\n    int old = n;\n    for (int i = 2; i <= n; i++) {\n      if (n % i == 0) {\n        ds.push_back(old / i);\n        while (n % i == 0) {\n          n /= i;\n        }\n      }\n    }\n    n = old;\n    int sz = (int) ds.size();\n    vector<vector<long long>> b(sz);\n    for (int i = 0; i < sz; i++) {\n      b[i].resize(ds[i]);\n    }\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < sz; j++) {\n        b[j][i % ds[j]] += a[i];\n      }\n    }\n    multiset<long long> s;\n    for (int i = 0; i < sz; i++) {\n      for (int j = 0; j < ds[i]; j++) {\n        s.insert(b[i][j] * ds[i]);\n      }\n    }\n    cout << (*s.rbegin()) << '\\n';\n    while (q--) {\n      int pos, val;\n      cin >> pos >> val;\n      --pos;\n      int delta = val - a[pos];\n      a[pos] = val;\n      for (int i = 0; i < sz; i++) {\n        int j = pos % ds[i];\n        s.erase(s.find(b[i][j] * ds[i]));\n        b[i][j] += delta;\n        s.insert(b[i][j] * ds[i]);\n      }\n      cout << (*s.rbegin()) << '\\n';\n    }\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Tonya and Burenka-179.json",
    "editorial_link": "https://codeforces.com//blog/entry/106049",
    "editorial": "Tutorial Letâs note that the answer for and is the same.Indeed, for the\nnumber , we will visit numbers with indices for from to inclusive, from\nthis we can see that the index of the -th number coincides with the\nindex of , and if we look at two indexes, the difference between which\nis and , then they are different, since , therefore, the answer is (the\nsum of numbers with indices for from to ) .Now letâs prove that the\nfirst numbers are the same for and , note that only those indices that\nhave the same remainder as when divided by are suitable, but there are\nonly of such indices, and we proved that we should have of different\nindices, so they are all represented once, therefore the answer for and\nis the same, because the sum consists of the same numbers.So, we need to\nconsider only being divisors of , this is already passes tests if we\nwrite, for example, a segment tree, but we donât want to write a segment\ntree, so we go further, prove that for , the answer is less or equal\nthan for if and are divisors of , why is this so?Note that for the\nnumber , the answer beats for groups of numbers, so that in each group\nthere is exactly and each number is in exactly one group, and for\ndifferent the answer will be (the sum in the group that belongs to)\n.Letâs look at the answer for the optimal for , letâs call the set at\nwhich it is reached , note that in for different there are independent\nsets that are subsets of . Let be the sum in the -th set. Now note that\nwe need to prove this is true for any , easy to see.So you need to\niterate the divisors which equals to where is prime, now it can be\npassed with a set. Hurray!For the divisor , it is proposed to store\nanswers for all pairs , where and the maximum among them, they can be\ncounted initially for for one , each request is changing one of the\nvalues, this can be done for .The complexity of the authorâs solution is\n, where 6 is the maximum number of different prime divisors of the\nnumber .\n",
    "hint": [
        "Hint 1 The answer for and is the same.",
        "Hint 2 In this problem, a general statement is useful: for any array of length , is true.",
        "Hint 3 Try applying the second hint for and divisible by , where are divisors of .",
        "Hint 4 We can consider only which equals to , where is a simple divisor of ."
    ]
}