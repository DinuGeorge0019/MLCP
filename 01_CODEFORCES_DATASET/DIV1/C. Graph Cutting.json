{
    "link": "https://codeforces.com//contest/406/problem/C",
    "problemId": "7389",
    "problem_idx": "C",
    "shortId": "406C",
    "contest_number": "406",
    "problem_submissions": {
        "E": [
            6113980,
            6115371,
            6117401,
            6114390,
            6114632,
            6115961,
            6113761,
            6119100,
            6122295,
            6132836,
            6117696,
            6115484
        ],
        "D": [
            6111550,
            6112818,
            6117396,
            6111602,
            6114018,
            6112889,
            6110196,
            6112558,
            6113207,
            6114342,
            6109879,
            6117233,
            6113495,
            6112560,
            6111190,
            6113785,
            6113949,
            6114279,
            6113928,
            6111720,
            6116758,
            6114622
        ],
        "C": [
            6110187,
            6111166,
            6117392,
            6115342,
            6111381,
            6110506,
            6110270,
            6108894,
            6114229,
            6110730,
            6111155,
            6113968,
            6111745,
            6111516,
            6128689,
            6128286,
            6111327,
            6111782,
            6108166
        ],
        "B": [
            6108889,
            6109179,
            6117390,
            6108130,
            6113002,
            6108132,
            6108085,
            6107339,
            6110967,
            6110982,
            6107994,
            6108825,
            6109585,
            6108127,
            6108320,
            6109839,
            6109061,
            6109268,
            6109691,
            6111113
        ],
        "A": [
            6107835,
            6107644,
            6117388,
            6107225,
            6112427,
            6117543,
            6106926,
            6106550,
            6108138,
            6107728,
            6107011,
            6108007,
            6108768,
            6106947,
            6107483,
            6108996,
            6107104,
            6108198,
            6108284,
            6109349
        ]
    },
    "name": "C. Graph Cutting",
    "statement": "Little Chris is participating in a graph cutting contest. He\u2019s a pro.\r\nThe time has come to test his skills to the fullest.Chris is given a\r\nsimple undirected connected graph with vertices (numbered from 1 to )\r\nand edges. The problem is to cut it into edge-distinct paths of length\r\n2. Formally, Chris has to partition all edges of the graph into pairs in\r\nsuch a way that the edges in a single pair are adjacent and each edge\r\nmust be contained in exactly one pair.For example, the figure shows a\r\nway Chris can cut a graph. The first sample test contains the\r\ndescription of this graph. You are given a chance to compete with Chris.\r\nFind a way to cut the given graph or determine that it is impossible!\r\n",
    "solutions": [
        "#pragma comment(linker, \"/STACK:512000000\")\n#define _CRT_SECURE_NO_DEPRECATE\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <fstream>\n#include <cstdio>\n#include <cstdlib>\n#include <cassert>\n#include <climits>\n#include <ctime>\n#include <numeric>\n#include <vector>\n#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <cstring>\n#include <iomanip>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <list>\n#include <map>\n#include <string>\n#include <sstream>\n#include <set>\n#include <stack>\n#include <queue>\nusing namespace std;\ntemplate<class T> inline T sqr(T x) { return x * x; }\ntemplate<class T> inline string tostr(const T & x) { stringstream ss; ss << x; return ss.str(); }\ntypedef long long lng;\ntypedef unsigned long long ulng;\ntypedef unsigned int uint;\ntypedef unsigned char uchar;\ntypedef long double ld;\ntypedef pair<int, int> PII;\ntypedef pair<string, string> PSS;\ntypedef pair<PII, int> PIII;\ntypedef pair<lng, lng> PLL;\ntypedef pair<lng, int> PLI;\ntypedef pair<int, lng> PIL;\ntypedef pair<ld, ld> PDD;\n#define left asdleft\n#define right asdright\n#define link asdlink\n#define unlink asdunlink\n#define next asdnext\n#define prev asdprev\n#define y0 asdy0\n#define y1 asdy1\n#define mp make_pair\n#define pb push_back\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define clr(ar,val) memset(ar, val, sizeof(ar))\n#define istr stringstream\n#define forn(i,n) for(int i=0;i<(n);++i)\n#define forv(i,v) forn(i,sz(v))\n#define X first\n#define Y second\n#define hash asdhash\n#define move asdmove\nconst ld EPS = 1e-12;\nconst int INF = 1000*1000*1000;\nconst char CINF = 102;\nconst lng LINF = INF * 1ll * INF;\nconst ld DINF = 1e200;\nconst ld PI = 3.1415926535897932384626433832795l;\nint gcd(int a,int b){return a?gcd(b%a,a):b;}\nlng gcd(lng a,lng b){return a?gcd(b%a,a):b;}\nlng powmod(lng a,lng p,lng m){lng r=1;while(p){if(p&1)r=r*a%m;p>>=1;a=a*a%m;}return r;}\n#define TASKA \"sequence\"\n\nint n;\nvector<int> gr[110000];\nint D[110000];\nvector<pair<int,PII> > ans;\n\nbool dfs(int v,int d,int pr){\n\tD[v]=d;\n\tint x=-1;\n\tforv(i,gr[v]){\n\t\tint p=gr[v][i];\n\t\tbool t=false;\n\t\tif(D[p]){\n\t\t\tif(p != pr && D[p]<d)\n\t\t\t\tt=true;\n\t\t}else\n\t\t\tt=dfs(p,d+1,v);\n\t\tif(!t)\n\t\t\tcontinue;\n\t\tif(x==-1)\n\t\t\tx=p;\n\t\telse{\n\t\t\tans.pb(mp(p,mp(v,x)));\n\t\t\tx=-1;\n\t\t}\n\t}\n\tif(x!=-1){\n\t\tans.pb(mp(pr,mp(v,x)));\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nint main(){\n#ifdef __ASD__\n\tfreopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n#else\n\t//freopen(TASKA\".in\", \"r\", stdin); freopen(TASKA\".out\", \"w\", stdout);\n#endif\n\t\n\tint m;\n\tcin>>n>>m;\n\tforn(i,m){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\t--a;--b;\n\t\tgr[a].pb(b);\n\t\tgr[b].pb(a);\n\t}\n\tif(!dfs(0,1,-1)){\n\t\tcout<<\"No solution\";\n\t\treturn 0;\n\t}\n\tforv(i,ans){\n\t\tprintf(\"%d %d %d\\n\",ans[i].X + 1, ans[i].Y.X+1, ans[i].Y.Y+1);\n\t}\n\t\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Graph Cutting.json",
    "editorial_link": "https://codeforces.com//blog/entry/11186",
    "editorial": "It can be proved that only graphs with an odd number of edges cannot be\r\npartitioned into path of length 2. We will construct a recursive\r\nfunction that solves the problem and also serves as a proof for this\r\nstatement. The function partition(v) will operate on non-blocked edges.\r\nIt will partition the component of vertex connected by the non-blocked\r\nedges into paths of length 2. If this component has an odd number of\r\nedges, the function will partition all the edges of the component,\r\nexcept one edge ; the function then will return vertex , expecting that\r\nthe parent function call will assign it to some path. The function works\r\nas follows: find all vertices that are adjacent to by the non-blocked\r\nedges, call this set adjacent. Then block all the edges from this set\r\nvertices to . For each in adjacent, call partition(u). Suppose\r\npartition(u) returned a vertex . That means we can pair it into the path\r\n. Otherwise, if partition(u) does not return anything, we add to\r\nunpaired, since the edge is not yet in any path. We can pair any two\r\nvertices of this set , into a single path . We pair as much of them as\r\npossible in any order. If from this set a single vertex, , is left\r\nunpaired, the function will return . Otherwise the function will not\r\nreturn anything. The function could be implemented as a single DFS:\r\nSolution complexity: .\r\n"
}