{
    "link": "https://codeforces.com//contest/933/problem/C",
    "problemId": "156720",
    "problem_idx": "C",
    "shortId": "933C",
    "contest_number": "933",
    "problem_submissions": {
        "E": [
            35263883,
            35251948,
            35268367,
            35268343,
            35258532,
            35265034,
            35258504,
            35265045
        ],
        "D": [
            35253928,
            35258185,
            35262993,
            35255562,
            35257209,
            35258119,
            35266124,
            35259046,
            35259628,
            35259700,
            35265335,
            35260449
        ],
        "B": [
            35233893,
            35242633,
            35232112,
            35233002,
            35238615,
            35243022,
            35243572,
            35238260,
            35247862,
            35234313,
            35245448,
            35242161,
            35237846,
            35238319,
            35230597,
            35242429,
            35250941,
            35238138,
            35236021
        ],
        "C": [
            35231166,
            35245330,
            35230279,
            35242029,
            49040337,
            35232953,
            35241307,
            35235433,
            36073540,
            35240997,
            35235741,
            35461289,
            35244755
        ],
        "A": [
            35230392,
            35232143,
            35233996,
            35230183,
            35230822,
            35233720,
            35235277,
            35231518,
            35235425,
            35231181,
            35231151,
            35232842,
            35231443,
            35233064,
            35232632,
            35243872,
            35232580,
            35231791,
            35232474,
            35231989
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/57763",
    "editorial": "It seems the problem can be solved with case analysis at first sight.\r\nOkay let\u00e2\u0080\u0099s try to do so...For , it\u00e2\u0080\u0099s trivial and the answer is, of\r\ncourse, .For , there are two cases: If the two circles are intersect,\r\nthe answer is ; Otherwise, the answer is . For ... well I think it\u00e2\u0080\u0099s\r\nreally a tough job, so think about general case will probably make our\r\nlives better.The main solution is based on Euler\u00e2\u0080\u0099s formula for planar\r\ngraph. This formula tells us that if we denote the number of vertices in\r\na connected graph by , the number of edges by and the number of faces\r\n(or regions) by , we have . Since the circles can form several\r\ncomponents, denoted the number of which by , the formula for general\r\nplanar graph should be .So what we need to do is to calculate , , and .\r\nIt\u00e2\u0080\u0099s easy to see that is the number of unique intersection between\r\ncircles. As for , we can calculate the number of edges on each circle,\r\nwhich is equal to the unique intersection on each circle. The only\r\nspecial case is a single circle, and we can consider it as a graph\r\nwithout vertices and edges but forms one component, or a vertex with an\r\nedge to itself. Anyway it doesn\u00e2\u0080\u0099t matter when . The last one is , which\r\ncan be obtained easily with the help of dsu or dfs/bfs.The total\r\ncomplexity is , but why I leave this special case as a problem instead\r\nof a general case? Reread the first sentence of this tutorial and you\r\nwill get the answer :)Here I want to show you the test 113, which is\r\nmade by hands. Guess how many regions in this graph? Construct three\r\ncircles within the given constraints that share one common intersection\r\nwith at least one non-integral coordinate.And also, unfortunately, this\r\nproblem coincides with this problem and I am really sorry for this\r\nissue.\r\n",
    "name": "C. A Colourful Prospect",
    "statement": "Little Tommy is watching a firework show. As circular shapes spread\r\nacross the sky, a splendid view unfolds on the night of Lunar New Year\u2019s\r\neve.A wonder strikes Tommy. How many regions are formed by the circles\r\non the sky? We consider the sky as a flat plane. A region is a connected\r\npart of the plane with positive area, whose bound consists of parts of\r\nbounds of the circles and is a curve or several curves without\r\nself-intersections, and that does not contain any curve other than its\r\nboundaries. Note that exactly one of the regions extends infinitely.\r\n",
    "solutions": [
        "#include <iostream>#include <cstdio>#include <cstdlib>#include <cmath>#include <algorithm>using namespace std;\u00a0const double eps = 1e-9;inline bool eq(double x, double y){\treturn fabs(x - y) < eps;}bool ls(double x, double y){\treturn (x < y) && !eq(x, y);}bool lseq(double x, double y){\treturn ls(x, y) || eq(x, y);}\u00a0struct Point {\tdouble x, y;\u00a0\tPoint () : x(0), y(0) {}\tPoint (double x, double y) : x(x), y(y) {}\u00a0\tvoid scan()\t{\t\tscanf(\"%lf%lf\", &x, &y);\t}\u00a0\tvoid print()\t{//\t\tprintf(\"%.4lf %.4lf\\n\", x, y);\t}\u00a0\tPoint operator + (Point a)\t{\t\treturn Point(x + a.x, y + a.y);\t}\u00a0\tPoint operator - (Point a)\t{\t\treturn Point(x - a.x, y - a.y);\t}\u00a0\tPoint operator * (double k)\t{\t\treturn Point(x * k, y * k);\t}\u00a0\tPoint operator / (double k)\t{\t\treturn *this * (1. / k);\t}\u00a0\tdouble operator % (Point a)\t{\t\treturn x * a.x + y * a.y;\t}\u00a0\tdouble operator * (Point a)\t{\t\treturn x * a.y - y * a.x;\t}\u00a0\tdouble sqLen()\t{\t\treturn *this % *this;\t}\u00a0\tdouble len()\t{\t\treturn sqrt( sqLen() );\t}\u00a0\tPoint norm()\t{\t\treturn *this / len();\t}\u00a0\tPoint rot()\t{\t\treturn Point(-y, x);\t}\u00a0\tPoint rot(double angle)\t{\t\treturn *this * cos(angle) + rot() * sin(angle);\t}\u00a0\tbool operator < (const Point &a) const\t{\t\tif (eq(x, a.x))\t\t\treturn ls(y, a.y);\t\treturn ls(x, a.x);\t}\u00a0\tbool operator == (const Point &a) const\t{\t\treturn !( (*this < a) || (a < *this) );\t}};\u00a0struct Circle{\tPoint O;\tdouble R;\u00a0\tvoid scan()\t{\t\tO.scan();\t\tscanf(\"%lf\", &R);\t}\u00a0\tbool operator < (const Circle &a) const\t{\t\tif (eq(R, a.R))\t\t\treturn O < a.O;\t\treturn ls(R, a.R);\t}\u00a0\tbool operator == (const Circle &a) const\t{\t\treturn !( (*this < a) || (a < *this) );\t}};\u00a0int n;int ans = 1;Circle a[600];Point b[260000];int sz;int par[260000];int s[260000];\u00a0void intersect_circles(Circle A, Circle B){\tPoint O1 = A.O;\tPoint O2 = B.O;\tdouble R1 = A.R;\tdouble R2 = B.R;\tdouble L = (O1 - O2).len();\tif (L < fabs(R2 - R1) || L > (R1 + R2))\t\treturn;\tdouble d = 0.5 * (L + (R1 * R1 - R2 * R2) / L);\tPoint H = O1 + (O2 - O1).norm() * d;\tdouble len = sqrt(R1 * R1 - d * d);\tPoint a = (O2 - O1).rot().norm() * len;\tb[sz++] = H + a;\tb[sz++] = H - a;\treturn;}\u00a0inline int get_par(int v){\tif (par[v] == -1)\t\treturn v;\treturn par[v] = get_par(par[v]);}\u00a0void unite(int v, int u){\tv = get_par(v);\tu = get_par(u);\tif (v == u)\t\treturn;\tif (s[v] < s[u])\t{\t\tpar[v] = u;\t\ts[u] += s[v];\t}\telse\t{\t\tpar[u] = v;\t\ts[v] += s[u];\t}}\u00a0int main(){//\tfreopen(\"input.txt\", \"r\", stdin);//\tfreopen(\"output.txt\", \"w\", stdout);\u00a0\tscanf(\"%d\", &n);\tfor (int i = 0; i < n; i++)\t\ta[i].scan();\tsort(a, a + n);\tn = unique(a, a + n) - a;\tfor (int i = 0; i < n; i++)\t\tfor (int j = 0; j < i; j++)\t\t\tintersect_circles(a[i], a[j]);\tsort(b, b + sz);\tsz = unique(b, b + sz) - b;\tans -= sz;\tfor (int i = 0; i < sz; i++)\t{\t\tpar[i] = -1;\t\ts[i] = 1;\t}\tfor (int i = 0; i < n; i++)\t{\t\tint t = -1;\t\tfor (int j = 0; j < sz; j++)\t\t{\t\t\tif ( fabs(a[i].R * a[i].R - ( a[i].O - b[j] ).sqLen()) < 1e-6 )\t\t\t{\t\t\t\tans++;\t\t\t\tif (t == -1)\t\t\t\t\tt = j;\t\t\t\telse\t\t\t\t\tunite(t, j);\t\t\t}\t\t}\t\tif (t == -1)\t\t\tans++;\t}\tfor (int i = 0; i < sz; i++)\t\tif (par[i] == -1)\t\t\tans++;\tprintf(\"%d\\n\", ans);\u00a0\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "graphs"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. A Colourful Prospect.json"
}