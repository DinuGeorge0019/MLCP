{
    "link": "https://codeforces.com//contest/288/problem/E",
    "problemId": "2805",
    "problem_idx": "E",
    "shortId": "288E",
    "contest_number": "288",
    "problem_submissions": {
        "E": [
            3461335,
            3458641,
            3460719,
            3463436,
            3464512,
            3465599,
            3463363
        ],
        "D": [
            3459154,
            3461432,
            3462104,
            3459195,
            3461788,
            3463179,
            3460795,
            3460033,
            3460203,
            3460132,
            3460594,
            3462546,
            3461278,
            3460741,
            3460872,
            3463288,
            3461898,
            3463050,
            3459096
        ],
        "C": [
            3456557,
            3456008,
            3456566,
            3460063,
            3459414,
            3455119,
            3457015,
            3455658,
            3456591,
            3461209,
            3457290,
            3458346,
            3456693,
            3458697,
            3459031,
            3457702,
            3456625,
            3456183,
            3459280,
            3461683
        ],
        "B": [
            3454685,
            3454711,
            3454445,
            3455354,
            3456458,
            3458036,
            3455646,
            3457997,
            3455444,
            3455146,
            3455413,
            3456413,
            3455198,
            3455816,
            3455015,
            3456234,
            3455164,
            3454216,
            3456654,
            3456132
        ],
        "A": [
            3453504,
            3453349,
            3455471,
            3453867,
            3453397,
            3453393,
            3454113,
            3453524,
            3454252,
            3453356,
            3454346,
            3454163,
            3455311,
            3454507,
            3455240,
            3454740,
            3453430,
            3455107,
            3453891,
            3453666
        ]
    },
    "name": "E. Polo the Penguin and Lucky Numbers",
    "statement": "Polo the Penguin have two positive integers and , both of them are lucky\r\nnumbers. Moreover, their lengths (that is, the number of digits in the\r\ndecimal representation without the leading zeroes) are equal to each\r\nother.Let’s assume that is the number of distinct lucky numbers, each of\r\nthem cannot be greater than or less than , and is the -th (in increasing\r\norder) number of them. Find . As the answer can be rather large, print\r\nthe remainder after dividing it by ().\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\n#define P 1000000007\n#define N 100010\nchar s[N],t[N];\nint n;int f0[N][4],f1[N][4],f2[N][4];bool g[N][4];\nint p10[N],p4[N],p7[N];\nvoid ff(int x,int y)\n{\n    if(g[x][y])return;\n    g[x][y]=1;\n    int le=(y&1)?s[x]-'0':4,ri=(y&2)?t[x]-'0':7;\n    if(x==0)\n    {\n        if(le!=4||ri!=7)return;\n        f0[x][y]=1,\n        f1[x][y]=4+7,\n        f2[x][y]=4*7;\n        return;\n    }\n    if(le<=4&&4<=ri)\n    {\n        int y2=0;\n        if(4==le&&(y&1))y2^=1;\n        if(4==ri&&(y&2))y2^=2;\n        ff(x-1,y2);\n        int k=(ll)p10[x]*4%P;\n        f0[x][y]=((ll)f0[x][y]+f0[x-1][y2])%P;\n        f1[x][y]=((ll)f1[x][y]+(ll)k*2%P*f0[x-1][y2]%P+f1[x-1][y2])%P;\n        f2[x][y]=((ll)f2[x][y]+(ll)k*k%P*f0[x-1][y2]%P+(ll)k*f1[x-1][y2]%P+f2[x-1][y2])%P;\n    }\n    if(le<=7&&7<=ri)\n    {\n        int y2=0;\n        if(7==le&&(y&1))y2^=1;\n        if(7==ri&&(y&2))y2^=2;\n        ff(x-1,y2);\n        int k=(ll)p10[x]*7%P;\n        f0[x][y]=((ll)f0[x][y]+f0[x-1][y2])%P;\n        f1[x][y]=((ll)f1[x][y]+(ll)k*2%P*f0[x-1][y2]%P+f1[x-1][y2])%P;\n        f2[x][y]=((ll)f2[x][y]+(ll)k*k%P*f0[x-1][y2]%P+(ll)k*f1[x-1][y2]%P+f2[x-1][y2])%P;\n    }\n    if(le==4&&ri==7)\n    {\n        int le=((ll)p10[x]*4+p7[x])%P,ri=((ll)p10[x]*7+p4[x])%P;\n        f0[x][y]=((ll)f0[x][y]+1)%P;\n        f1[x][y]=((ll)f1[x][y]+le+ri)%P;\n        f2[x][y]=((ll)f2[x][y]+(ll)le*ri)%P;\n    }\n}\nint main()\n{\n    p10[0]=1,p4[0]=0,p7[0]=0;\n    for(int i=1;i<N;i++)\n        p10[i]=(ll)p10[i-1]*10%P,\n        p4[i]=((ll)p4[i-1]*10+4)%P,\n        p7[i]=((ll)p7[i-1]*10+7)%P;\n    scanf(\"%s%s\",s,t);n=strlen(s);\n    reverse(s,s+n),reverse(t,t+n);\n    ff(n-1,3);\n    printf(\"%d\\n\",f2[n-1][3]);\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "implementation",
        "math"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Polo the Penguin and Lucky Numbers.json",
    "editorial_link": "https://codeforces.com/blog/entry/7241",
    "editorial": "Solution. In this problem there are a lot of different formulas, most of them are for optimizing solution and making it lenear. Editorial shows just a general idea because it's pretty hard to explain all of them and good for you to derive it by yourself. If you have any questions  write them all in comments.\n\nDenote by a1,?a2,?...,?an all lucky number from segment. First of all, we need to do reduce the problem a bit. Let we have some fixed digit (pos,?d), i. e. position of this digit is pos (from 0 from right to left) and value is d (4 or 7). Then, for all ai (1???i?<?n) such that pos-th digit of ai is equal to d, we need to add ai?+?1?×?d?×?10pos to the answer. Now we can see that problem can be reduced to the following. For each fixed digit (pos,?d) find the sum of all ai such that ai?+?1 on the pos-th position has digit d. Obviously, we can solve the problem for 1..l and 1..r separately and then subtract the first from the second  that will be the answer.\n\nHow to find such sum among all lucky numbers of some length but less than some lucky number x? We will describe the general idea. Any lucky number, less than x has some common prefix with x, then one digit is less than the corresponing in x (i. e. it is 7 in x and 4 in another integer) and the rest of the digits are arbitrary. So, by iterating all such positions where is the first digit less than in x, we can, using the fact that the rest of the digits are arbitrary and some formulas and precomputations, compute the results for each position and digit.",
    "hint": []
}