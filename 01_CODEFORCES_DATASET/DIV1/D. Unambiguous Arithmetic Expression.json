{
    "link": "https://codeforces.com//contest/115/problem/D",
    "problemId": "605",
    "problem_idx": "D",
    "shortId": "115D",
    "contest_number": "115",
    "problem_submissions": {
        "D": [
            700677,
            709440,
            703439,
            700783
        ],
        "E": [
            699985,
            700148,
            699895,
            700886,
            700709,
            699935,
            700481,
            704109,
            702223,
            702118,
            701045,
            699830,
            700560
        ],
        "C": [
            698491,
            698807,
            698911,
            698386,
            699374,
            701004,
            698059,
            699204,
            699619,
            699661,
            702059
        ],
        "B": [
            697429,
            697289,
            697881,
            697365,
            697647,
            697668,
            699366,
            697349,
            697691,
            697537,
            697907,
            698287,
            699705
        ],
        "A": [
            696588,
            696258,
            695843,
            695844,
            696704,
            696136,
            696907,
            695911,
            696007,
            696195,
            695937,
            696483,
            695990
        ]
    },
    "name": "D. Unambiguous Arithmetic Expression",
    "statement": "Let\u2019s define an (UAE) as follows. All non-negative integers are UAE\u2019s.\r\nIntegers may have leading zeroes (for example, and are considered valid\r\nintegers). If and are two UAE\u2019s, then \"\", \"\", \"\", and \"\" (all without\r\nthe double quotes) are UAE\u2019s. If is an UAE, then \"\" and \"\" (both without\r\nthe double quotes) are UAE\u2019s.You are given a string consisting only of\r\ndigits (\"\" - \"\") and characters \"\", \"\", \"\", and \"\". Your task is to\r\ncompute the number of different possible unambiguous arithmetic\r\nexpressions such that if all brackets (characters \"\" and \"\") of that\r\nunambiguous arithmetic expression are removed, it becomes the input\r\nstring. Since the answer may be very large, print it modulo ().\r\n",
    "solutions": [
        "#include <iostream>\n\nusing namespace std;\n\nconst int md = 1000003;\n\nint f[2222][2222];\nint a[2222], x[2222], y[2222], st[2222];\n\nint main() {\n  string s;\n  cin >> s;\n  int n = s.length(), i, j, k;\n  for (i=0;i<n-1;i++)\n    if (s[i] < '0' || s[i] > '9')\n      if (s[i+1] == '*' || s[i+1] == '/') {\n        cout << 0 << endl;\n        return 0;\n      }\n  if (s[0] == '*' || s[0] == '/') {\n    cout << 0 << endl;\n    return 0;\n  }\n  int m = 0, t = 0;\n  for (i=0;i<n;i++)\n    if (s[i] < '0' || s[i] > '9') t++; else\n    if (t || i == 0) {\n      a[m] = t-1;\n      m++;\n      t = 0;\n    }\n  a[0]++;\n  if (t) {\n    cout << 0 << endl;\n    return 0;\n  }\n  n = 0;\n  for (i=0;i<m;i++) {\n    st[i] = n;\n    for (j=a[i];j>=0;j--) {\n      x[n] = i;\n      y[n] = j;\n      n++;\n    }\n  }\n  long long g;\n  for (i=n-1;i>=0;i--) {\n    f[i][x[i]] = 1;\n    for (j=x[i]+1;j<m;j++) {\n      if (y[i] > 0) f[i][j] = f[i+1][j];\n      else f[i][j] = 0;\n      g = 0;\n      for (k=x[i];k<j;k++) g += (long long)f[i][k]*f[st[k+1]][j];\n      f[i][j] = (f[i][j]+g) % md;\n    }\n  }\n  cout << f[0][m-1] << endl;\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "expression parsing"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Unambiguous Arithmetic Expression.json",
    "editorial_link": "https://codeforces.com/blog/entry/2584",
    "editorial": "This problem is solved using Dynamic Programming. The somewhat\r\nstraightforward dynamic programming is to represent the state as\r\n{start_pos, end_pos}, which represents the number of unambiguous\r\narithmetic expression on the substring of the input starting at\r\nstart_pos and ending at end_pos. This however has a complexity of O(N^3)\r\nand is not suitable for our problem. The solution uses the state {pos,\r\nbraces}. This state is somewhat tricky to explain. This means that we\r\nhave read the first pos characters in the input. We\u00e2\u0080\u0099re expected to read\r\na single unambiguous arithmetic expression, close it with some number of\r\nbrackets that we don\u00e2\u0080\u0099t care (to be explained below), and then, if braces\r\nis zero, that\u00e2\u0080\u0099s it. Otherwise, we\u00e2\u0080\u0099re then expected to read a binary\r\noperator (either + - * or /), then open a bracket, then move the state\r\nto {pos + some_value, braces-1}. That is, braces keeps track on the\r\nnumber of second operands of binary expression that we need to make. For\r\nan example how this works, let\u00e2\u0080\u0099s try to solve a particular test case:\r\n\"++0*+1\" Let\u00e2\u0080\u0099s denote with quotes the part of the input that we haven\u00e2\u0080\u0099t\r\nprocessed. We\u00e2\u0080\u0099re going to create the unambiguous arithmetic expression\r\nby scanning it left to right and making some choices. There are three\r\nchoices: 1) Create a unary expression. In the example above, \"++0*+1\" ->\r\n+(\"+0*+1\" We don\u00e2\u0080\u0099t really care about where the closing bracket is yet.\r\n2) Create a binary expression. In the example above, +(\"+0*+1\" ->\r\n+((\"+0*+1\" How does this tells that we will need to create a binary\r\nexpression? The second open bracket does not have any operator\r\npreceeding it. The only thing that can makes this a proper prefix of an\r\nunambiguous arithmetic expression is that if this bracket belongs to the\r\nfirst operand of a binary expression. For our example, we suppose we\r\nread another unary expression +((\"+0*+1\" -> +((+(\"0*+1\" 3a) Read an\r\ninteger. In our example above, +((+(\"0*+1\" -> +((+(0))*(\"+1\" There are\r\ntwo questions. a) how do we know the number of closing brackets we have\r\nto make? This is actually easy - for every open bracket we have, if it\u00e2\u0080\u0099s\r\nfor a unary expression, we simply close and repeat. Otherwise it\u00e2\u0080\u0099s a\r\nclosing bracket for possibly the first operand to a binary expression,\r\nso we close it, and we read a binary operator (* in the example above),\r\nand try to read the second operand of the binary expression. Finally:\r\n+((+(0))*(\"+1\" -> +((+(0))*(+(\"1\" 3b) We try to read an integer again\r\nand we have no open brackets that belongs to the first operand of a\r\nbinary expression, and we have ourself a possible answer.\r\n+((+(0))*(+(\"1\" -> +((+(0))*(+(1))) So, in the state {pos, braces}, pos\r\ndetermines the starting location of the remaining unprocessed input.\r\nbraces indicates the number of open brackets that belongs to a binary\r\nexpression. So, in the examples above: 1) \"++0*+1\" -> +(\"+0*+1\" is\r\nrepresented by {0, 0} -> {1, 0} More specifically, for unary\r\nexpressions, {pos, braces} -> {pos+1, braces} 2) +(\"+0*+1\" -> +((\"+0*+1\"\r\nis represented by {1, 0} -> {1, 1} More specifically, for binary\r\nexpressions, {pos, braces} -> {pos, braces+1} 3a) +((+(\"0*+1\" ->\r\n+((+(0))*(\"+1\"\r\n"
}