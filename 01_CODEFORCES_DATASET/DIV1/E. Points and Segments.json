{"link": "https://codeforces.com//contest/429/problem/E", "problemId": "9406", "problem_idx": "E", "shortId": "429E", "contest_number": "429", "problem_submissions": {"E": [6595809, 6600093, 6592978, 6601793, 6652557, 6599111, 6619551, 6619545, 6597254, 6597744], "C": [6593728, 6600070, 6592280, 6592740, 6600977, 6600868, 6594386, 6592397, 6594791, 6593656, 6596025, 6593807, 6593862, 6598107, 6594449, 6598559, 6594937, 6592148, 6594524, 6592432, 6594909, 6590473], "D": [6591664, 6600092, 6591240, 6590624, 6590639, 6591834, 6591461, 6591644, 6590500, 6592190, 6591828, 6591578, 6591777, 6592587, 27994201, 6591983, 6594641, 6604627, 6593023, 6594793, 6591937, 6593041], "B": [6589690, 6600091, 6589488, 6589367, 6588962, 6590036, 6588367, 6590786, 6591308, 6589466, 6590642, 6589551, 6589761, 6589966, 6589108, 6590082, 6589028, 6590294, 6589190, 6595125], "A": [6588164, 6600088, 6588109, 6588114, 6588105, 6588288, 6588966, 6588346, 6592136, 6588117, 6588421, 6588130, 6588989, 6588112, 27994125, 6589842, 6588200, 6588169, 6588529, 6590124, 6593587]}, "name": "E. Points and Segments", "statement": "Iahub isn\u2019t well prepared on geometry problems, but he heard that this\r\nyear there will be a lot of geometry problems on the IOI selection camp.\r\nScared, Iahub locked himself in the basement and started thinking of new\r\nproblems of this kind. One of them is the following.Iahub wants to draw\r\ndistinct segments on the axis. He can draw each segment with either red\r\nor blue. The drawing is good if and only if the following requirement is\r\nmet: for each point of the axis consider all the segments that contains\r\npoint ; suppose, that red segments and blue segments contain point ; for\r\neach point inequality must be satisfied.A segment contains a point if\r\nand only if .Iahub gives you the starting and ending points of all the\r\nsegments. You have to find any good drawing for him.\r\n", "solutions": ["#pragma comment(linker, \"/STACK:60000000\")\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <ctime>\n#include <cstring>\n#include <cassert>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <queue>\n#include <functional>\n\nusing namespace std;\n\n#define forn(i, n) for(int i = 0; i < (int)(n); i++)\n#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)\n#define pb push_back\n#define mp make_pair\n#define fs first\n#define sc second\n#define last(a) int(a.size() - 1)\n#define all(a) a.begin(), a.end()\n#define seta(a,x) memset (a, x, sizeof (a))\n#define I (int)\n#define next NEXTHUI\n#define prev PREVHUI\n#define y1 Y1HUI\n\ntypedef long long int64;\ntypedef pair <int, int> pii;\ntypedef long double ldb;\n\nconst long double eps = 1e-9;\nconst int inf = (1 << 30) - 1;\nconst int64 inf64 = ((int64)1 << 62) - 1;\nconst long double pi = 3.1415926535897932384626433832795;\n\ntemplate <class T> T sqr (T x) {return x * x;}\n\nint n;\nvector<pii> a;\nvector< vector<int> > g;\nvector<int> pos[100500];\nint col[200500];\n\nvoid error() {\n\tcout << -1 << endl;\n\texit(0);\n}\n\nvoid go(int v, int c) {\n\tcol[v]= c;\n\tforn(i, g[v].size())\n\t\tif (col[g[v][i]] == -1)\n\t\t\tgo(g[v][i], 1 - c);\n\t\telse if (col[g[v][i]] == c)\n\t\t\terror();\t\t\t\t\n}\n\nint main ()\n{\n//\tfreopen (\"input.txt\", \"r\", stdin);\n//\tfreopen (\"output.txt\", \"w\", stdout);\n\tcin >> n;\n\ta.clear();\n\tforn(i, n) {\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tx *= 2;\n\t\ty *= 2;\n\t\ta.pb(mp(x-1, i));\n\t\ta.pb(mp(y, i));\n\t}\t\n\tsort(all(a));\n\tforn(i, a.size())\n\t\tpos[a[i].sc].pb(i);\n\tg.resize(n * 2);\n\tforn(i, n) {\n\t\tg[i * 2].pb(i * 2 + 1);\n\t\tg[i * 2 + 1].pb(i * 2);\n\n\t\tg[pos[i][0]].pb(pos[i][1]);\n\t\tg[pos[i][1]].pb(pos[i][0]);\n\t}\n\tseta(col, 255);\n\tforn(i, n * 2)\n\t\tif (col[i] == -1)\n\t\t\tgo(i, 0);\n\tforn(i, n)\n\t\tprintf(\"%d \", col[pos[i][0]]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["graphs"], "dificulty": "3000", "interactive": false}