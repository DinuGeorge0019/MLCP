{
    "link": "https://codeforces.com//contest/1965/problem/B",
    "problemId": "2614996",
    "problem_idx": "B",
    "shortId": "1965B",
    "contest_number": "1965",
    "problem_submissions": {
        "F": [
            258465624,
            258627065,
            263837667,
            258481689
        ],
        "D": [
            258447727,
            258460812,
            258466117,
            258450218,
            258464835,
            258457510,
            258458513,
            258465971,
            259573719,
            258506961,
            258454027,
            258456282,
            258483429,
            258453210,
            258453791
        ],
        "C": [
            258425895,
            258434352,
            258433902,
            258442030,
            258433331,
            258429762,
            258434494,
            258427059,
            258424566,
            258435014,
            258430069,
            258434394,
            258430905,
            258434841,
            258457386,
            258428580,
            258429520,
            258434274
        ],
        "B": [
            258420424,
            258428605,
            258430303,
            258433453,
            258426877,
            258424079,
            258428403,
            258433720,
            259639909,
            258437552,
            258428917,
            258424298,
            258428062,
            258424086,
            258427169,
            258427222,
            258425398,
            258424422,
            258426595
        ],
        "A": [
            258418141,
            258418841,
            258425010,
            258419725,
            258419999,
            258418044,
            258419071,
            258418897,
            258418989,
            258419441,
            258418664,
            258419165,
            258419761,
            258418751,
            258419361,
            258418280,
            258427816,
            258420207
        ],
        "E": [
            258446500,
            258464809,
            258455602,
            258503208,
            258466942,
            258468402,
            258463371,
            258447373,
            258452406,
            258457290,
            258460561,
            258509487,
            258461569,
            302317911,
            258464177,
            258450702,
            258478527
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/128914",
    "editorial": "Notice that for a fixed , a solution for is also a solution for all . So\r\nwe can ignore the value of and just assume itâs always .If we didnât\r\nhave the restriction that no subsequence can add up to , the most\r\nnatural solution would be . Every value from to appears as the sum of\r\nthe subsequence given by its binary representation. We will use a\r\nmodified version of this array to solve the problem.Let be the largest\r\ninteger such that . We will use this array (of size ):To prove that no\r\nsubsequence of adds up to , consider the list of all elements in the\r\narray that are at most , since these are the only ones that could be\r\npresent in a subsequence adding to . These areSince these add up to , no\r\nsubsequence can add up to .To prove that for all where , there is a\r\nsubsequence adding up to , we consider several cases: If , we can simply\r\nuse the binary representation of . If , we can first take all of the\r\nelements that are at most as part of our subsequence. We then need to\r\nremove elements with a sum equal to . Because , is less than , so we can\r\nsimply remove its binary representation. If , we can take along with the\r\nbinary representation of . The one edge case is when the bit is set in .\r\nIn this case, we replace with .So in all cases, we can form a\r\nsubsequence adding up to .Complexity:\r\n",
    "name": "B. Missing Subsequence Sum",
    "statement": "You are given two integers n and k. Find a sequence a of non-negative\r\nintegers of size at most 25 such that the following conditions hold.\r\nThere is no subsequence of a with a sum of k. For all 1\r\nle v\r\nle n where v\r\nne k, there is a subsequence of a with a sum of v. A sequence b is a\r\nsubsequence of a if b can be obtained from a by the deletion of several\r\n(possibly, zero or all) elements, without changing the order of the\r\nremaining elements. For example, [5, 2, 3] is a subsequence of [1, 5, 7,\r\n8, 2, 4, 3].It can be shown that under the given constraints, a solution\r\nalways exists.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using i64 = long long; void solve() {    int n, k;    std::cin >> n >> k;        int s = k - 1;    std::vector<int> ans;    for (int i = 1; i <= s; i *= 2) {        ans.push_back(i);        s -= i;    }    if (s > 0) {        ans.push_back(s);    }    for (int i = k + 1; i <= n; i *= 2) {        ans.push_back(i);    }    ans.push_back(2 * k + 1);    std::cout << ans.size() << \"\\n\";    for (int i = 0; i < ans.size(); i++) {        std::cout << ans[i] << \" \\n\"[i == ans.size() - 1];    }} int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "greedy",
        "number theory"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Missing Subsequence Sum.json",
    "hint": []
}