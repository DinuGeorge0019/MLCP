{
    "link": "https://codeforces.com//contest/1416/problem/D",
    "problemId": "740368",
    "problem_idx": "D",
    "shortId": "1416D",
    "contest_number": "1416",
    "problem_submissions": {
        "F": [
            94006266,
            94013395,
            94017337,
            94007333,
            94012350,
            94016693,
            94144598,
            94144345,
            94143862,
            94143815,
            94143507,
            94143372,
            94134107,
            94022751,
            94013371,
            94123054,
            93993751,
            93995209,
            94206946,
            94047832
        ],
        "D": [
            93996097,
            94002143,
            93994280,
            93996848,
            94000279,
            93995262,
            93992025,
            94030965,
            93988840,
            94001509,
            93996287,
            94006105,
            94007577,
            94017080,
            93995866,
            93997659,
            93998139,
            93997214,
            93995418,
            94000331,
            93999706
        ],
        "E": [
            93989598,
            93993245,
            94005344,
            94008684,
            94029993,
            94019586,
            94015916,
            94018911,
            94274661,
            94428216,
            94428140,
            94046134
        ],
        "B": [
            93977851,
            93981480,
            93977205,
            93989726,
            93978642,
            93985288,
            93976209,
            93981357,
            93985099,
            93999768,
            93994963,
            94270201,
            93976947,
            93987758,
            93986950,
            93981437,
            93979361,
            93987047,
            93979513
        ],
        "C": [
            93974213,
            93978374,
            93983878,
            93979532,
            94282160,
            93989242,
            93980978,
            93980593,
            93976201,
            93990186,
            93986370,
            93974300,
            93996660,
            94001007,
            93983516,
            93980305,
            93980649,
            93977960,
            93984553,
            93980471,
            93985644
        ],
        "A": [
            93970422,
            93970885,
            93970919,
            93970033,
            93971425,
            93971578,
            93970140,
            93970220,
            93970538,
            93970561,
            93981050,
            94269181,
            94002877,
            93970437,
            93972131,
            93974465,
            93974988,
            93972065,
            93971571,
            93970260
        ]
    },
    "name": "D. Graph and Queries",
    "statement": "You are given an undirected graph consisting of n vertices and m edges.\r\nInitially there is a single integer written on every vertex: the vertex\r\ni has p_i written on it. All p_i are distinct integers from 1 to n.You\r\nhave to process q queries of two types: 1 v among all vertices reachable\r\nfrom the vertex v using the edges of the graph (including the vertex v\r\nitself), find a vertex u with the largest number p_u written on it,\r\nprint p_u and replace p_u with 0; 2 i delete the i-th edge from the\r\ngraph. Note that, in a query of the first type, it is possible that all\r\nvertices reachable from v have 0 written on them. In this case, u is not\r\nexplicitly defined, but since the selection of u does not affect\r\nanything, you can choose any vertex reachable from v and print its value\r\n(which is 0).\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 27.09.2020 18:48:59       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass segtree {\n public:\n  struct node {\n    int mx = -1;\n\n    void apply(int l, int r, int v) {\n      mx = v;\n    }\n  };\n\n  node unite(const node &a, const node &b) const {\n    node res;\n    res.mx = max(a.mx, b.mx);\n    return res;\n  }\n\n  inline void push(int x, int l, int r) {\n  }\n\n  inline void pull(int x, int z) {\n    tree[x] = unite(tree[x + 1], tree[z]);\n  }\n\n  int n;\n  vector<node> tree;\n\n  void build(int x, int l, int r) {\n    if (l == r) {\n      return;\n    }\n    int y = (l + r) >> 1;\n    int z = x + ((y - l + 1) << 1);\n    build(x + 1, l, y);\n    build(z, y + 1, r);\n    pull(x, z);\n  }\n\n  template <typename M>\n  void build(int x, int l, int r, const vector<M> &v) {\n    if (l == r) {\n      tree[x].apply(l, r, v[l]);\n      return;\n    }\n    int y = (l + r) >> 1;\n    int z = x + ((y - l + 1) << 1);\n    build(x + 1, l, y, v);\n    build(z, y + 1, r, v);\n    pull(x, z);\n  }\n\n  node get(int x, int l, int r, int ll, int rr) {\n    if (ll <= l && r <= rr) {\n      return tree[x];\n    }\n    int y = (l + r) >> 1;\n    int z = x + ((y - l + 1) << 1);\n    push(x, l, r);\n    node res{};\n    if (rr <= y) {\n      res = get(x + 1, l, y, ll, rr);\n    } else {\n      if (ll > y) {\n        res = get(z, y + 1, r, ll, rr);\n      } else {\n        res = unite(get(x + 1, l, y, ll, rr), get(z, y + 1, r, ll, rr));\n      }\n    }\n    pull(x, z);\n    return res;\n  }\n\n  template <typename... M>\n  void modify(int x, int l, int r, int ll, int rr, const M&... v) {\n    if (ll <= l && r <= rr) {\n      tree[x].apply(l, r, v...);\n      return;\n    }\n    int y = (l + r) >> 1;\n    int z = x + ((y - l + 1) << 1);\n    push(x, l, r);\n    if (ll <= y) {\n      modify(x + 1, l, y, ll, rr, v...);\n    }\n    if (rr > y) {\n      modify(z, y + 1, r, ll, rr, v...);\n    }\n    pull(x, z);\n  }\n\n  int find_first_knowingly(int x, int l, int r, const function<bool(const node&)> &f) {\n    if (l == r) {\n      return l;\n    }\n    push(x, l, r);\n    int y = (l + r) >> 1;\n    int z = x + ((y - l + 1) << 1);\n    int res;\n    if (f(tree[x + 1])) {\n      res = find_first_knowingly(x + 1, l, y, f);\n    } else {\n      res = find_first_knowingly(z, y + 1, r, f);\n    }\n    pull(x, z);\n    return res;\n  }\n\n  int find_first(int x, int l, int r, int ll, int rr, const function<bool(const node&)> &f) {\n    if (ll <= l && r <= rr) {\n      if (!f(tree[x])) {\n        return -1;\n      }\n      return find_first_knowingly(x, l, r, f);\n    }\n    push(x, l, r);\n    int y = (l + r) >> 1;\n    int z = x + ((y - l + 1) << 1);\n    int res = -1;\n    if (ll <= y) {\n      res = find_first(x + 1, l, y, ll, rr, f);\n    }\n    if (rr > y && res == -1) {\n      res = find_first(z, y + 1, r, ll, rr, f);\n    }\n    pull(x, z);\n    return res;\n  }\n\n  int find_last_knowingly(int x, int l, int r, const function<bool(const node&)> &f) {\n    if (l == r) {\n      return l;\n    }\n    push(x, l, r);\n    int y = (l + r) >> 1;\n    int z = x + ((y - l + 1) << 1);\n    int res;\n    if (f(tree[z])) {\n      res = find_last_knowingly(z, y + 1, r, f);\n    } else {\n      res = find_last_knowingly(x + 1, l, y, f);\n    }\n    pull(x, z);\n    return res;\n  }\n\n  int find_last(int x, int l, int r, int ll, int rr, const function<bool(const node&)> &f) {\n    if (ll <= l && r <= rr) {\n      if (!f(tree[x])) {\n        return -1;\n      }\n      return find_last_knowingly(x, l, r, f);\n    }\n    push(x, l, r);\n    int y = (l + r) >> 1;\n    int z = x + ((y - l + 1) << 1);\n    int res = -1;\n    if (rr > y) {\n      res = find_last(z, y + 1, r, ll, rr, f);\n    }\n    if (ll <= y && res == -1) {\n      res = find_last(x + 1, l, y, ll, rr, f);\n    }\n    pull(x, z);\n    return res;\n  }\n\n  segtree(int _n) : n(_n) {\n    assert(n > 0);\n    tree.resize(2 * n - 1);\n    build(0, 0, n - 1);\n  }\n\n  template <typename M>\n  segtree(const vector<M> &v) {\n    n = v.size();\n    assert(n > 0);\n    tree.resize(2 * n - 1);\n    build(0, 0, n - 1, v);\n  }\n\n  node get(int ll, int rr) {\n    assert(0 <= ll && ll <= rr && rr <= n - 1);\n    return get(0, 0, n - 1, ll, rr);\n  }\n\n  node get(int p) {\n    assert(0 <= p && p <= n - 1);\n    return get(0, 0, n - 1, p, p);\n  }\n\n  template <typename... M>\n  void modify(int ll, int rr, const M&... v) {\n    assert(0 <= ll && ll <= rr && rr <= n - 1);\n    modify(0, 0, n - 1, ll, rr, v...);\n  }\n\n  // find_first and find_last call all FALSE elements\n  // to the left (right) of the sought position exactly once\n\n  int find_first(int ll, int rr, const function<bool(const node&)> &f) {\n    assert(0 <= ll && ll <= rr && rr <= n - 1);\n    return find_first(0, 0, n - 1, ll, rr, f);\n  }\n\n  int find_last(int ll, int rr, const function<bool(const node&)> &f) {\n    assert(0 <= ll && ll <= rr && rr <= n - 1);\n    return find_last(0, 0, n - 1, ll, rr, f);\n  }\n};\n\nclass dsu {\n public:\n  vector<int> p;\n  int n;\n\n  dsu(int _n) : n(_n) {\n    p.resize(n);\n    iota(p.begin(), p.end(), 0);\n  }\n\n  inline int get(int x) {\n    return (x == p[x] ? x : (p[x] = get(p[x])));\n  }\n\n  inline bool unite(int x, int y) {\n    x = get(x);\n    y = get(y);\n    if (x != y) {\n      p[x] = y;\n      return true;\n    }\n    return false;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n, m, q;\n  cin >> n >> m >> q;\n  vector<int> p(n);\n  vector<int> pos(n);\n  for (int i = 0; i < n; i++) {\n    cin >> p[i];\n    --p[i];\n    pos[p[i]] = i;\n  }\n  vector<int> from(m);\n  vector<int> to(m);\n  for (int i = 0; i < m; i++) {\n    cin >> from[i] >> to[i];\n    --from[i]; --to[i];\n  }\n  vector<int> op(q);\n  vector<int> id(q);\n  for (int i = 0; i < q; i++) {\n    cin >> op[i] >> id[i];\n    --id[i];\n  }\n  vector<bool> removed(m, false);\n  for (int i = 0; i < q; i++) {\n    if (op[i] == 2) {\n      removed[id[i]] = true;\n    }\n  }\n  dsu d(n);\n  vector<int> head(n);\n  vector<int> tail(n);\n  iota(head.begin(), head.end(), 0);\n  iota(tail.begin(), tail.end(), 0);\n  vector<int> nxt(n, -1);\n  for (int i = 0; i < m; i++) {\n    if (!removed[i]) {\n      int x = d.get(from[i]);\n      int y = d.get(to[i]);\n      if (x != y) {\n        d.unite(x, y);\n        nxt[tail[x]] = head[y];\n        head[y] = head[x];\n      }\n    }\n  }\n  vector<int> start(q, -1);\n  vector<int> finish(q, -1);\n  for (int i = q - 1; i >= 0; i--) {\n    if (op[i] == 2) {\n      int x = d.get(from[id[i]]);\n      int y = d.get(to[id[i]]);\n      if (x != y) {\n        d.unite(x, y);\n        nxt[tail[x]] = head[y];\n        head[y] = head[x];\n      }\n    } else {\n      int x = d.get(id[i]);\n      start[i] = head[x];\n      finish[i] = tail[x];\n    }\n  }\n  vector<int> seq;\n  for (int i = 0; i < n; i++) {\n    if (d.get(i) == i) {\n      int u = head[i];\n      while (true) {\n        seq.push_back(u);\n        if (u == tail[i]) {\n          break;\n        }\n        u = nxt[u];\n      }\n    }\n  }\n  assert((int) seq.size() == n);\n  vector<int> in_seq(n, -1);\n  for (int i = 0; i < n; i++) {\n    in_seq[seq[i]] = i;\n  }\n  vector<int> arr(n);\n  for (int i = 0; i < n; i++) {\n    arr[i] = p[seq[i]];\n  }\n  segtree st(arr);\n  for (int i = 0; i < q; i++) {\n    if (op[i] == 1) {\n      int L = in_seq[start[i]];\n      int R = in_seq[finish[i]];\n      int res = st.get(L, R).mx;\n      cout << res + 1 << '\\n';\n      if (res != -1) {\n        st.modify(in_seq[pos[res]], in_seq[pos[res]], -1);\n      }\n    }\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dsu",
        "graphs",
        "implementation",
        "trees"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Graph and Queries.json",
    "editorial_link": "https://codeforces.com//blog/entry/83036",
    "editorial": "Basically, we want to transform each \"connected component maximum\" query\r\ninto \"segment maximum\" query. It can be efficiently done using DSU and\r\nprocessing all queries in reversed order. For simplicity, letâs assume\r\nall edges will eventually get deleted in the process. If not, you can\r\nalways add some extra queries at the end. Initially, each vertex is a\r\nconnected component on its own. We are processing all queries in reverse\r\norder. If the current query is of first type, remember the \"boss\" of the\r\ncorresponding vertex. Otherwise, unite the corresponding vertices\r\naccordingly. If we want to unite two bosses and , we create a new fake\r\nvertex and add edges , so that the subtree of becomes responsible for\r\nboth components of and . Notice that we cannot apply small-to-large\r\nmerging to our DSU, but we are still able to use path-compression\r\nheuristic. Now, our DSU-tree is ready. Each query of first type is now a\r\nsubtree-maximum query and all queries of second type can be ignored. The\r\nsolution onwards should be pretty straightforward. We first do an\r\nEulerian tour on our tree to transform each subtree into a segment.\r\nUsing segment tree we are able to efficiently process all queries.Time\r\ncomplexity: Space complexity:\r\n",
    "hint": []
}