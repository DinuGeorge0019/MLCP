{"link": "https://codeforces.com//contest/634/problem/D", "problemId": "49951", "problem_idx": "D", "shortId": "634D", "contest_number": "634", "problem_submissions": {"E": [16414340, 16416138, 16413706, 16414973, 16415599, 16414780, 16415591, 16416199, 16416181, 16416348, 16415632, 16415457, 16416072, 16413745, 16466856, 16413386], "D": [16411007, 16410815, 16412075, 16411999, 16412771, 16413214, 16412917, 16413088, 16413557, 16414243, 16411968, 16413070, 16413608, 16410814, 16411583, 16411708, 16418042, 16411828], "C": [16409750, 16409051, 16410811, 16409734, 16410839, 16411665, 16411917, 16411834, 16411108, 16413312, 16410161, 16411194, 16417790, 16416407, 16409322, 16410089, 16410459, 16409945, 16409746, 16410147], "B": [16408395, 16409662, 16410216, 16408841, 16409386, 16409860, 16410585, 16409660, 16410064, 16408757, 16417413, 16417828, 16409703, 16408566, 16409147, 16409169, 16409287, 16410817, 16408754], "A": [16407814, 16407800, 16408726, 16407801, 16408251, 16407972, 16407935, 16408112, 16408492, 16407803, 16407794, 16408196, 16407918, 16407735, 16407903, 16407915, 16407851, 16408302, 16407766], "F": [16417401, 17066904]}, "name": "D. Package Delivery", "statement": "Johnny drives a truck and must deliver a package from his hometown to\r\nthe district center. His hometown is located at point on a number line,\r\nand the district center is located at the point .Johnny\u2019s truck has a\r\ngas tank that holds exactly liters, and his tank is initially full. As\r\nhe drives, the truck consumes exactly one liter per unit distance\r\ntraveled. Moreover, there are gas stations located at various points\r\nalong the way to the district center. The -th station is located at the\r\npoint on the number line and sells an unlimited amount of fuel at a\r\nprice of dollars per liter. Find the minimum cost Johnny must pay for\r\nfuel to successfully complete the delivery.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\n#define jjs(i, s, x) for (int i = (s); i < int(x); i++)\n#define jjl(i, x) jjs(i, 0, x)\n#define ji(x) jjl(i, x)\n#define jj(x) jjl(j, x)\n#define jk(x) jjl(k, x)\n#define jij(a, b) ji(a) jj(b)\n#define ever ;;\n#define foreach(x, C) for (auto& x : (C))\n#define INF ((int) 1e9+10)\n#define LINF ((ll) 1e16)\n#define pb push_back\n#define mp make_pair\n#define nrint(x) int x; rint(x);\n#define nrlong(x) long long x; rint(x);\n#define rfloat(x) scanf(\"%lf\", &(x))\n\n#define rint readInteger\ntemplate<typename T>\nbool readInteger(T& x)\n{\n\tchar c,r=0,n=0;\n\tx=0;\n\tfor (ever)\n\t{\n\t\tc=getchar();\n\t\tif ((c<0) && (!r))\n\t\t\treturn(0);\n\t\telse if ((c=='-') && (!r))\n\t\t\tn=1;\n\t\telse if ((c>='0') && (c<='9'))\n\t\t\tx=x*10+c-'0',r=1;\n\t\telse if (r)\n\t\t\tbreak;\n\t}\n\tif (n)\n\t\tx=-x;\n\treturn(1);\n}\n\ntemplate <typename T, T MOD>\nstruct ModInt\n{\n\tT value;\n\tModInt() : value(0)\n\t{}\n\tModInt(T x)\n\t{\n\t\tx %= MOD;\n\t\tif (x < 0)\n\t\t\tx += MOD;\n\t\tvalue = x;\n\t}\n\nprivate:\nT __________________(T ___, T ____) {\nif (!____) return ___;\nreturn __________________\n\n(____,___%____);} T _____________(T _, T __, T ____, T ___) {\nT _____,______,_______=____-_;\nassert(!(_______%\n__________________(__,___)));for(_____=______=0;_____-______!=_______;){\n\t_____=(_______+______+__-1)/\n__*__;______=(_____-_______+___-1)/___*___;}return _____+_;}\npublic:\n\tModInt& operator += (ModInt x)\n\t{\n\t\tvalue += x.value;\n\t\tif (value >= MOD)\n\t\t\tvalue -= MOD;\n\t\treturn *this;\n\t}\n\tModInt& operator -= (ModInt x)\n\t{\n\t\tvalue -= x.value;\n\t\tif (value < 0)\n\t\t\tvalue += MOD;\n\t\treturn *this;\n\t}\n\tModInt& operator *= (ModInt x)\n\t{\n\t\tvalue *= x.value;\n\t\tvalue %= MOD;\n\t\treturn *this;\n\t}\n\tModInt& operator /= (ModInt x)\n\t{\n\t\tx.invert();\n\t\treturn *this *= x;\n\t}\n\n\tModInt operator + (ModInt x) const\n\t{\n\t\tModInt o = *this;\n\t\to += x;\n\t\treturn o;\n\t}\n\tModInt operator - (ModInt x) const\n\t{\n\t\tModInt o = *this;\n\t\to -= x;\n\t\treturn o;\n\t}\n\tModInt operator * (ModInt x) const\n\t{\n\t\tModInt o = *this;\n\t\to *= x;\n\t\treturn o;\n\t}\n\tModInt operator / (ModInt x) const\n\t{\n\t\tModInt o = *this;\n\t\to /= x;\n\t\treturn o;\n\t}\n\tbool operator == (ModInt x) const\n\t{\n\t\treturn value == x.value;\n\t}\n\tbool operator != (ModInt x) const\n\t{\n\t\treturn !(*this == x);\n\t}\n\n\tModInt operator - () const\n\t{\n\t\treturn ModInt(0) - *this;\n\t}\n\n\tModInt operator ^ (long long x) const\n\t{\n\t\tModInt ret = 1;\n\t\tModInt mul = *this;\n\t\twhile (x)\n\t\t{\n\t\t\tif (x & 1)\n\t\t\t\tret *= mul;\n\t\t\tmul *= mul;\n\t\t\tx >>= 1;\n\t\t}\n\t\treturn ret;\n\t}\n\tModInt& operator ^= (long long x)\n\t{\n\t\treturn *this = *this ^ x;\n\t}\n\nprivate:\n\tvoid invert()\n\t{\n\t\t*this ^= MOD-2;\n\t}\npublic:\n\tvoid answer()\n\t{\n\t\tstd::cout << value << std::endl;\n\t}\n};\ntypedef ModInt<long long, 1000000007> mint;\n\ntypedef long long ll;\ntypedef pair<int, int> pi;\ntypedef vector<pi> VPI;\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<ll> VLL;\n\ntypedef tuple<int, int, int> tup;\n\nint main()\n{\n\tint n, d, m;\n\trint(d); rint(n); rint(m);\n\tVPI gas(m);\n\tpriority_queue<tup, vector<tup>, greater<tup>> Q;\n\tji(m)\n\t{\n\t\trint(gas[i].first);\n\t\trint(gas[i].second);\n\t}\n\tgas.push_back({0, 0});\n\tm = gas.size();\n\tji(m)\n\t\tQ.push(make_tuple(gas[i].first, gas[i].second, 1));\n\tQ.push(make_tuple(d, -1, -1));\n\tint lastPos = 0;\n\tmultiset<int> costSet;\n\tll tot = 0;\n\twhile (true)\n\t{\n\t\ttup t = Q.top();\n\t\tQ.pop();\n\t\tint pos = get<0>(t);\n\t\tint value = get<1>(t);\n\t\tint type = get<2>(t);\n\t\t// printf(\"<%d %d %d>\\n\", pos, value, type);\n\t\tif (pos != lastPos)\n\t\t{\n\t\t\tif (costSet.empty())\n\t\t\t{\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tll costPer = *costSet.begin();\n\t\t\ttot += costPer * (pos - lastPos);\n\t\t\tlastPos = pos;\n\t\t}\n\t\tif (type == -1)\n\t\t\tbreak;\n\t\telse if (type == 1)\n\t\t{\n\t\t\tcostSet.insert(value);\n\t\t\tQ.push(make_tuple(pos + n, value, 0));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tassert(type == 0);\n\t\t\tcostSet.erase(costSet.find(value));\n\t\t}\n\t}\n\tprintf(\"%lld\\n\", tot);\n}\n"], "input": "", "output": "", "tags": ["data structures", "divide and conquer", "greedy"], "dificulty": "2200", "interactive": false}