{
    "link": "https://codeforces.com//contest/666/problem/A",
    "problemId": "57413",
    "problem_idx": "A",
    "shortId": "666A",
    "contest_number": "666",
    "problem_submissions": {
        "E": [
            17594948,
            17581972,
            17586090,
            59816920,
            60238846
        ],
        "D": [
            17582206,
            17581333,
            17682266,
            17585111,
            17578532,
            17682483,
            17593764,
            17580882
        ],
        "C": [
            17576782,
            17576849,
            17576800,
            17578215,
            17578937,
            17578155,
            17577254,
            17578057,
            17578881,
            17579042,
            17579726,
            17577922,
            17578916,
            17579778,
            17580460,
            17580072
        ],
        "B": [
            17573525,
            17573061,
            17576637,
            17573442,
            17574093,
            17572951,
            17573669,
            17574447,
            17576416,
            17574060,
            17574231,
            17575134,
            17573766,
            17575544,
            17576709,
            17573819,
            17575438,
            17575919,
            17575656
        ],
        "A": [
            17569955,
            17569857,
            17570262,
            17570541,
            17570429,
            17570371,
            17570641,
            17570192,
            17570791,
            17570963,
            17571866,
            17570753,
            17570879,
            17571604,
            17570261,
            17571058,
            17570440,
            17570884,
            17570485
        ]
    },
    "name": "A. Reberland Linguistics",
    "statement": "First-rate specialists graduate from Berland State Institute of Peace\r\nand Friendship. You are one of the most talented students in this\r\nuniversity. The education is not easy because you need to have\r\nfundamental knowledge in different areas, which sometimes are not\r\nrelated to each other. For example, you should know linguistics very\r\nwell. You learn a structure of Reberland language as foreign language.\r\nIn this language words are constructed according to the following rules.\r\nFirst you need to choose the \"root\" of the word some string which has\r\nmore than letters. Then several strings with the length or symbols are\r\nappended to this word. The only restriction . All these strings are\r\nconsidered to be suffixes of the word (this time we use word \"suffix\" to\r\ndescribe a morpheme but not the few last characters of the string as you\r\nmay used to). Here is one exercise that you have found in your task\r\nlist. You are given the word . Find all distinct strings with the length\r\nor , which can be suffixes of this word according to the word\r\nconstructing rules in Reberland language. Two strings are considered\r\ndistinct if they have different length or there is a position in which\r\ncorresponding characters do not match. Let’s look at the example: the\r\nword is given. This word can be obtained in the following ways: , where\r\nthe root of the word is overlined, and suffixes are marked by \"corners\".\r\nThus, the set of possible suffixes for this word is .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define FO(i,a,b) for (int i = (a); i < (b); i++)\n#define sz(v) int(v.size())\n\nusing namespace std;\n\nchar s[10005];\nint n;\nset<string> f;\n\nint bf[10005][5];\n\nstring gs(int a, int b) {\n    return string(s+a,s+b);\n}\n\nbool cf(int i, int l) {\n    if (i+l > n) return false;\n    if (i+l == n) return true;\n    if (bf[i][l] != -1) return bf[i][l];\n    FO(nl,2,4) {\n        if (cf(i+l,nl) && gs(i,i+l) != gs(i+l,i+l+nl)) {\n            return bf[i][l] = true;\n        }\n    }\n    return bf[i][l] = false;\n}\n\nint main() {\n    memset(bf,-1,sizeof bf);\n\n    scanf(\" %s\", s);\n    n = strlen(s);\n    FO(i,5,n) {\n        FO(l,2,4) {\n            if (cf(i,l)) f.insert(gs(i,i+l));\n        }\n    }\n    printf(\"%d\\n\", sz(f));\n    for (string r : f) printf(\"%s\\n\", r.c_str());\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "implementation",
        "strings"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Reberland Linguistics.json",
    "editorial_link": "https://codeforces.com//blog/entry/44622",
    "editorial": "This problem is solved with dynamic programming. We can select an\r\narbitrary root of any length (at least five). Letâs reverse the string.\r\nA boolean value denotes if we could split a prefix of length to a\r\nstrings of length 2 and 3 so that the last string has a corresponding\r\nlength. Transitions: . Similarly, . If any of is true we add the\r\ncorresponding string to the set of answers.\r\n",
    "hint": []
}