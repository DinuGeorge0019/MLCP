{
    "link": "https://codeforces.com//contest/983/problem/A",
    "problemId": "183239",
    "problem_idx": "A",
    "shortId": "983A",
    "contest_number": "983",
    "problem_submissions": {
        "E": [
            38286454,
            38283020,
            38289482,
            38292735,
            38289453,
            38293779,
            38302472,
            38293561,
            38300012,
            38293577,
            38302643,
            38302639,
            38302635,
            38302629,
            38300139,
            38300133,
            38300000,
            38293677,
            38332361,
            38290750,
            38296688,
            38287165,
            38281146,
            38282245,
            38289240,
            38294540,
            38292692
        ],
        "C": [
            38282068,
            38290172,
            38281090,
            38284331,
            38284560,
            38280127,
            38285062,
            38284712,
            38287114,
            38296797,
            38287523,
            38296777,
            38305865,
            38421418,
            38281072,
            38282940
        ],
        "B": [
            38275765,
            38281040,
            38275649,
            38277253,
            38280013,
            38275961,
            38274648,
            38276342,
            38282348,
            38281288,
            38277599,
            38291629,
            38284850,
            38285475,
            38285545,
            38278223,
            38284828,
            38274818,
            38274252
        ],
        "A": [
            38273115,
            38279677,
            38273911,
            38271977,
            38277206,
            38393404,
            38274395,
            38272239,
            38278413,
            38325576,
            38319214,
            38319178,
            38319075,
            38319020,
            38318977,
            38318949,
            38318775,
            38311499,
            38311463,
            38311378,
            38273182,
            38332311,
            38276058,
            38279900,
            38288950,
            38281038,
            38282952,
            38280788,
            38276091,
            38275298,
            38271513,
            38271658
        ],
        "D": [
            38430702,
            38334183,
            38527958
        ]
    },
    "name": "A. Finite or not ",
    "statement": "You are given several queries. Each query consists of three integers p,\r\nq and b. You need to answer whether the result of p/q in notation with\r\nbase b is a finite fraction.A fraction in notation with base b is finite\r\nif it contains finite number of numerals after the decimal point. It is\r\nalso possible that a fraction has zero numerals after the decimal point.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define L long long\nusing namespace std;\nint t;\nL p,q,m;\ninline L gcd(L n,L m)\n{\n    return m?gcd(m,n%m):n;\n}\nint main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tint i;\n\tL k;\n\tscanf(\"%d\",&t);\n\twhile(t--)\n\t  {\n       scanf(\"%lld%lld%lld\",&p,&q,&m);\n       k=gcd(p,q);\n       q/=k;\n       k=gcd(q,m);\n       while(q>1 && k>1)\n         {\n          k=gcd(q,k);\n          q/=k;\n         }\n       if(q==1)\n         printf(\"Finite\\n\");\n       else\n         printf(\"Infinite\\n\");\n      }\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Finite or not .json",
    "editorial_link": "https://codeforces.com//blog/entry/59484",
    "editorial": "First, if and are not coprime, divide them on . Fraction is finite if\r\nand only if there is integer such that . Since and are being coprime\r\nnow, all prime factors of are prime factors of . Now we can do\r\niterations while . If after iterations, there are prime factors of which\r\nare not prime factors of fraction is , else fraction is . But this\r\nsolution works in . Letâs add in iterations and name iterations when\r\nchanges iterations of the first type and when it doesnât change\r\niterations of the second type. Iterations of second type works summary\r\nin . Number of iterations of the first type is too but on each iteration\r\ndecreases twice. Note that number of iterations in Euclidâs algorithm is\r\nequal to number of this decreases. So iterations of first type works in\r\nsummary. Total time complexity is Solution\r\n",
    "hint": []
}