{
    "link": "https://codeforces.com//contest/744/problem/A",
    "problemId": "85239",
    "problem_idx": "A",
    "shortId": "744A",
    "contest_number": "744",
    "problem_submissions": {
        "D": [
            23172550,
            23101161,
            23068735,
            23073667,
            23132587,
            23132570,
            23072938
        ],
        "B": [
            23071347,
            23055547,
            23056640,
            23057482,
            23055511,
            23066941,
            23058988,
            23055885,
            23055635,
            23056110,
            23057772,
            23056735,
            23057617,
            23056511,
            23062111,
            23062274,
            23057681,
            23057651,
            23056286
        ],
        "C": [
            23071345,
            23057499,
            23060727,
            23060442,
            23060420,
            23066137,
            23056758,
            23059869,
            23060628,
            23060184,
            23060124,
            23061291,
            23060827,
            23061807,
            23057367,
            23057447,
            23062076,
            23060867,
            23062926
        ],
        "E": [
            23071342,
            23063797,
            23070592,
            23069714,
            23064327
        ],
        "A": [
            23071326,
            23052903,
            23053379,
            23054137,
            23053853,
            23053406,
            23053000,
            23053710,
            23053750,
            23054145,
            23053643,
            23053798,
            23058381,
            23059184,
            23053344,
            23054382,
            23053476
        ]
    },
    "name": "A. Hongcow Builds A Nation",
    "statement": "Hongcow is ruler of the world. As ruler of the world, he wants to make\r\nit easier for people to travel by road within their own countries.The\r\nworld can be modeled as an undirected graph with nodes and edges. of the\r\nnodes are home to the governments of the countries that make up the\r\nworld.There is at most one edge connecting any two nodes and no edge\r\nconnects a node to itself. Furthermore, for any two nodes corresponding\r\nto governments, . Any graph that satisfies all of these conditions is\r\n.Hongcow wants to add as many edges as possible to the graph while\r\nkeeping it stable. Determine the maximum number of edges Hongcow can\r\nadd.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 1234567;\n\nvector <int> g[N];\nint cap[N];\nbool was[N];\nint x[N];\nvector <int> yes, no;\n\nint main() {\n  int n, m, k;\n  scanf(\"%d %d %d\", &n, &m, &k);\n  for (int i = 0; i < k; i++) {\n    int foo;\n    scanf(\"%d\", &foo);\n    foo--;\n    cap[foo] = 1;\n  }\n  for (int i = 0; i < m; i++) {\n    int foo, bar;\n    scanf(\"%d %d\", &foo, &bar);\n    foo--; bar--;\n    g[foo].push_back(bar);\n    g[bar].push_back(foo);\n  }\n  for (int i = 0; i < n; i++) {\n    was[i] = false;\n  }\n  for (int i = 0; i < n; i++) {\n    if (was[i]) {\n      continue;\n    }\n    int b = 0, e = 1;\n    x[0] = i;\n    was[i] = true;\n    while (b < e) {\n      for (int j = 0; j < (int) g[x[b]].size(); j++) {\n        int u = g[x[b]][j];\n        if (!was[u]) {\n          x[e] = u;\n          was[u] = true;\n          e++;\n        }\n      }\n      b++;\n    }\n    int have = 0;\n    for (int j = 0; j < e; j++) {\n      have += cap[x[j]];\n    }\n    if (have) {\n      yes.push_back(e);\n    } else {\n      no.push_back(e);\n    }\n  }\n  int all_no = 0;\n  int max_yes = 0;\n  for (int i = 0; i < (int) yes.size(); i++) {\n    max_yes = max(max_yes, yes[i]);\n  }\n  for (int i = 0; i < (int) no.size(); i++) {\n    all_no += no[i];\n  }\n  long long ans = 0;\n  for (int i = 0; i < (int) yes.size(); i++) {\n    if (yes[i] == max_yes) {\n      yes[i] += all_no;\n      max_yes = -1;\n    }\n    ans += yes[i] * 1LL * (yes[i] - 1) / 2;\n  }\n  cout << (ans - m) << endl;\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Hongcow Builds A Nation.json",
    "editorial_link": "https://codeforces.com//blog/entry/49126",
    "editorial": "First, let\u00e2\u0080\u0099s make all connected components cliques. This graph is still\r\nstable. Now, there are some components without special nodes. Where\r\nshould we connect them? If there is a component with size A and a\r\ncomponent with size B, we can add A*B edges if we connect these two\r\ncomponents. So, it makes sense to choose the largest component. code\r\n"
}