{
    "link": "https://codeforces.com//contest/1924/problem/F",
    "problemId": "2447862",
    "problem_idx": "F",
    "shortId": "1924F",
    "contest_number": "1924",
    "problem_submissions": {
        "E": [
            243630255,
            243625417,
            243831471,
            243819146,
            243638029,
            243635094,
            243635575,
            243643653,
            243641448,
            243654047,
            243642725,
            243655474,
            243640193,
            243642282,
            243738773,
            243738280,
            243737868,
            243737472,
            243736583,
            243647040,
            243643392,
            243656506,
            243623598,
            243647525,
            243642926
        ],
        "D": [
            243610539,
            243613703,
            243615017,
            243615468,
            243616484,
            243609433,
            243612607,
            243604919,
            243590030,
            243626983,
            243620249,
            243611671,
            243630742,
            243627184,
            243647496,
            243637086,
            243615081
        ],
        "C": [
            243600996,
            243608465,
            243605004,
            243605423,
            243609031,
            243624334,
            243598851,
            243618516,
            243614897,
            243607146,
            243609954,
            243605925,
            243615697,
            243614877,
            243629728,
            243619721,
            243625857
        ],
        "B": [
            243576284,
            243596345,
            243574522,
            243584076,
            243591802,
            243608792,
            243595388,
            243582812,
            243591583,
            243581060,
            243590774,
            243588502,
            243614602,
            243593249,
            243586709,
            243594966,
            243581169,
            243586114
        ],
        "A": [
            243557786,
            243557461,
            243557951,
            243558389,
            243559700,
            243571068,
            243569238,
            243556739,
            243561136,
            243559764,
            243556383,
            243563507,
            243559787,
            243566206,
            243566244,
            243561059,
            243558400,
            243589028
        ],
        "F": [
            243674865,
            243667546,
            243888054,
            243737554,
            246427685
        ]
    },
    "name": "F. Anti-Proxy Attendance",
    "statement": "Mr. 1048576 is one of those faculty who hates wasting his time in taking\r\nclass attendance. Instead of taking attendance the old-fashioned way, he\r\ndecided to try out something new today.There are n students in his\r\nclass, having roll numbers 1 to n. He knows that today. In order to\r\ndetermine who is absent, he can ask some queries to the class. In each\r\nquery, he can provide two integers l and r (1\r\nleq l\r\nleq r\r\nleq n) and all students whose roll numbers are between l and r\r\n(inclusive) will raise their hands. He then counts them to determine if\r\nthe roll number of the absent student lies between these values.Things\r\nseemed fine until his teaching assistant noticed something the students\r\nare dishonest! Some students whose roll numbers lie in the given range\r\nmay not raise their hands, while some other students whose roll number\r\ndoes not lie in the given range may raise their hands. But the students\r\ndonâ€™t want to raise much suspicion. So, only the following 4 cases are\r\npossible for a particular query (l,r) True Positive: r-l+1 students are\r\npresent and r-l+1 students raised their hands. True Negative: r-l\r\nstudents are present and r-l students raised their hands. False\r\nPositive: r-l students are present but r-l+1 students raised their\r\nhands. False Negative: r-l+1 students are present but r-l students\r\nraised their hands. In the first two cases, the students are said to be\r\nanswering honestly, while in the last two cases, the students are said\r\nto be answering dishonestly. The students can mutually decide upon their\r\nstrategy, not known to Mr. 1048576. Also, the students do not want to\r\nraise any suspicion and at the same time, want to create a lot of\r\nconfusion. So, their strategy always meets the following two conditions\r\nThe students will never answer honestly 3 times in a row. The students\r\nwill never answer dishonestly 3 times in a row. Mr. 1048576 is\r\nfrustrated by this act of students. So, he is willing to mark at most 2\r\nstudents as absent (though he knows that only one is). The attendance is\r\nsaid to be successful if the student who is actually absent is among\r\nthose two. Also, due to limited class time, he can only ask up to\r\nlceil\r\nlog_{1.116}{n}\r\nrceil-1 queries (weird numbers but okay). Help him complete a successful\r\nattendance.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <chrono>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstring>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <vector>\nusing namespace std;\n\nusing ll = long long;\nusing db = long double;  // or double, if TL is tight\nusing str = string;      // yay python!\n\n// pairs\nusing pi = pair<int, int>;\nusing pl = pair<ll, ll>;\nusing pd = pair<db, db>;\n#define mp make_pair\n#define f first\n#define s second\n\n#define tcT template <class T\n#define tcTU tcT, class U\n// ^ lol this makes everything look weird but I'll try it\ntcT > using V = vector<T>;\ntcT, size_t SZ > using AR = array<T, SZ>;\nusing vi = V<int>;\nusing vb = V<bool>;\nusing vl = V<ll>;\nusing vd = V<db>;\nusing vs = V<str>;\nusing vpi = V<pi>;\nusing vpl = V<pl>;\nusing vpd = V<pd>;\n\n// vectors\n// oops size(x), rbegin(x), rend(x) need C++17\n#define sz(x) int((x).size())\n#define bg(x) begin(x)\n#define all(x) bg(x), end(x)\n#define rall(x) x.rbegin(), x.rend()\n#define sor(x) sort(all(x))\n#define rsz resize\n#define ins insert\n#define pb push_back\n#define eb emplace_back\n#define ft front()\n#define bk back()\n\n#define lb lower_bound\n#define ub upper_bound\ntcT > int lwb(V<T> &a, const T &b) { return int(lb(all(a), b) - bg(a)); }\ntcT > int upb(V<T> &a, const T &b) { return int(ub(all(a), b) - bg(a)); }\n\n// loops\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n#define F0R(i, a) FOR(i, 0, a)\n#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)\n#define R0F(i, a) ROF(i, 0, a)\n#define rep(a) F0R(_, a)\n#define each(a, x) for (auto &a : x)\n\nconst int MOD = 998244353;  // 1e9+7;\nconst int MX = (int)2e5 + 5;\nconst ll BIG = 1e18;  // not too close to LLONG_MAX\nconst db PI = acos((db)-1);\nconst int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  // for every grid problem!!\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());\ntemplate <class T> using pqg = priority_queue<T, vector<T>, greater<T>>;\n\n// bitwise ops\n// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\nconstexpr int pct(int x) { return __builtin_popcount(x); }  // # of bits set\nconstexpr int bits(int x) {  // assert(x >= 0); // make C++11 compatible until\n\t                         // USACO updates ...\n\treturn x == 0 ? 0 : 31 - __builtin_clz(x);\n}  // floor(log2(x))\nconstexpr int p2(int x) { return 1 << x; }\nconstexpr int msk2(int x) { return p2(x) - 1; }\n\nll cdiv(ll a, ll b) {\n\treturn a / b + ((a ^ b) > 0 && a % b);\n}  // divide a by b rounded up\nll fdiv(ll a, ll b) {\n\treturn a / b - ((a ^ b) < 0 && a % b);\n}  // divide a by b rounded down\n\ntcT > bool ckmin(T &a, const T &b) {\n\treturn b < a ? a = b, 1 : 0;\n}  // set a = min(a,b)\ntcT > bool ckmax(T &a, const T &b) {\n\treturn a < b ? a = b, 1 : 0;\n}  // set a = max(a,b)\n\ntcTU > T fstTrue(T lo, T hi, U f) {\n\t++hi;\n\tassert(lo <= hi);  // assuming f is increasing\n\twhile (lo < hi) {  // find first index such that f is true\n\t\tT mid = lo + (hi - lo) / 2;\n\t\tf(mid) ? hi = mid : lo = mid + 1;\n\t}\n\treturn lo;\n}\ntcTU > T lstTrue(T lo, T hi, U f) {\n\t--lo;\n\tassert(lo <= hi);  // assuming f is decreasing\n\twhile (lo < hi) {  // find first index such that f is true\n\t\tT mid = lo + (hi - lo + 1) / 2;\n\t\tf(mid) ? lo = mid : hi = mid - 1;\n\t}\n\treturn lo;\n}\ntcT > void remDup(vector<T> &v) {  // sort and remove duplicates\n\tsort(all(v));\n\tv.erase(unique(all(v)), end(v));\n}\ntcTU > void safeErase(T &t, const U &u) {\n\tauto it = t.find(u);\n\tassert(it != end(t));\n\tt.erase(it);\n}\n\ninline namespace IO {\n#define SFINAE(x, ...)                                                         \\\n\ttemplate <class, class = void> struct x : std::false_type {};              \\\n\ttemplate <class T> struct x<T, std::void_t<__VA_ARGS__>> : std::true_type {}\n\nSFINAE(DefaultI, decltype(std::cin >> std::declval<T &>()));\nSFINAE(DefaultO, decltype(std::cout << std::declval<T &>()));\nSFINAE(IsTuple, typename std::tuple_size<T>::type);\nSFINAE(Iterable, decltype(std::begin(std::declval<T>())));\n\ntemplate <auto &is> struct Reader {\n\ttemplate <class T> void Impl(T &t) {\n\t\tif constexpr (DefaultI<T>::value) is >> t;\n\t\telse if constexpr (Iterable<T>::value) {\n\t\t\tfor (auto &x : t) Impl(x);\n\t\t} else if constexpr (IsTuple<T>::value) {\n\t\t\tstd::apply([this](auto &...args) { (Impl(args), ...); }, t);\n\t\t} else static_assert(IsTuple<T>::value, \"No matching type for read\");\n\t}\n\ttemplate <class... Ts> void read(Ts &...ts) { ((Impl(ts)), ...); }\n};\n\ntemplate <class... Ts> void re(Ts &...ts) { Reader<cin>{}.read(ts...); }\n#define def(t, args...)                                                        \\\n\tt args;                                                                    \\\n\tre(args);\n\ntemplate <auto &os, bool debug, bool print_nd> struct Writer {\n\tstring comma() const { return debug ? \",\" : \"\"; }\n\ttemplate <class T> constexpr char Space(const T &) const {\n\t\treturn print_nd && (Iterable<T>::value or IsTuple<T>::value) ? '\\n'\n\t\t                                                             : ' ';\n\t}\n\ttemplate <class T> void Impl(T const &t) const {\n\t\tif constexpr (DefaultO<T>::value) os << t;\n\t\telse if constexpr (Iterable<T>::value) {\n\t\t\tif (debug) os << '{';\n\t\t\tint i = 0;\n\t\t\tfor (auto &&x : t)\n\t\t\t\t((i++) ? (os << comma() << Space(x), Impl(x)) : Impl(x));\n\t\t\tif (debug) os << '}';\n\t\t} else if constexpr (IsTuple<T>::value) {\n\t\t\tif (debug) os << '(';\n\t\t\tstd::apply(\n\t\t\t    [this](auto const &...args) {\n\t\t\t\t    int i = 0;\n\t\t\t\t    (((i++) ? (os << comma() << \" \", Impl(args)) : Impl(args)),\n\t\t\t\t     ...);\n\t\t\t    },\n\t\t\t    t);\n\t\t\tif (debug) os << ')';\n\t\t} else static_assert(IsTuple<T>::value, \"No matching type for print\");\n\t}\n\ttemplate <class T> void ImplWrapper(T const &t) const {\n\t\tif (debug) os << \"\\033[0;31m\";\n\t\tImpl(t);\n\t\tif (debug) os << \"\\033[0m\";\n\t}\n\ttemplate <class... Ts> void print(Ts const &...ts) const {\n\t\t((Impl(ts)), ...);\n\t}\n\ttemplate <class F, class... Ts>\n\tvoid print_with_sep(const std::string &sep, F const &f,\n\t                    Ts const &...ts) const {\n\t\tImplWrapper(f), ((os << sep, ImplWrapper(ts)), ...), os << '\\n';\n\t}\n\tvoid print_with_sep(const std::string &) const { os << '\\n'; }\n};\n\ntemplate <class... Ts> void pr(Ts const &...ts) {\n\tWriter<cout, false, true>{}.print(ts...);\n}\ntemplate <class... Ts> void ps(Ts const &...ts) {\n\tWriter<cout, false, true>{}.print_with_sep(\" \", ts...);\n}\n}  // namespace IO\n\ninline namespace Debug {\ntemplate <typename... Args> void err(Args... args) {\n\tWriter<cerr, true, false>{}.print_with_sep(\" | \", args...);\n}\ntemplate <typename... Args> void errn(Args... args) {\n\tWriter<cerr, true, true>{}.print_with_sep(\" | \", args...);\n}\n\nvoid err_prefix(str func, int line, string args) {\n\tcerr << \"\\033[0;31m\\u001b[1mDEBUG\\033[0m\"\n\t     << \" | \"\n\t     << \"\\u001b[34m\" << func << \"\\033[0m\"\n\t     << \":\"\n\t     << \"\\u001b[34m\" << line << \"\\033[0m\"\n\t     << \" - \"\n\t     << \"[\" << args << \"] = \";\n}\n\n#ifdef LOCAL\n#define dbg(args...) err_prefix(__FUNCTION__, __LINE__, #args), err(args)\n#define dbgn(args...) err_prefix(__FUNCTION__, __LINE__, #args), errn(args)\n#else\n#define dbg(...)\n#define dbgn(args...)\n#endif\n\nconst auto beg_time = std::chrono::high_resolution_clock::now();\n// https://stackoverflow.com/questions/47980498/accurate-c-c-clock-on-a-multi-core-processor-with-auto-overclock?noredirect=1&lq=1\ndouble time_elapsed() {\n\treturn chrono::duration<double>(std::chrono::high_resolution_clock::now() -\n\t                                beg_time)\n\t    .count();\n}\n}  // namespace Debug\n\ninline namespace FileIO {\nvoid setIn(str s) { freopen(s.c_str(), \"r\", stdin); }\nvoid setOut(str s) { freopen(s.c_str(), \"w\", stdout); }\nvoid setIO(str s = \"\") {\n\tcin.tie(0)->sync_with_stdio(0);  // unsync C / C++ I/O streams\n\tcout << fixed << setprecision(12);\n\t// cin.exceptions(cin.failbit);\n\t// throws exception when do smth illegal\n\t// ex. try to read letter into int\n\tif (sz(s)) setIn(s + \".in\"), setOut(s + \".out\");  // for old USACO\n}\n}  // namespace FileIO\n\n// make sure to intialize ALL GLOBAL VARS between tcs!\n\nint calc_lim(int N) { return ceil(log(N) / log(1.116)) - 1; }\n\nvoid solve(int tc) {\n\tdef(int, N);\n\tvi hist(N);\n\tvi max_with_ans{2, 2, 2, 2};\n\twhile (max_with_ans.bk < max(N, (int)1e5)) {\n\t\tint n = sz(max_with_ans);\n\t\t// len - s_1 <= max_with_ans(n - 2)\n\t\t// len - s_2 <= max_with_ans(n - 3)\n\t\t// len - s_3 <= max_with_ans(n - 4)\n\t\t// s_1 + s_2 + s_3 >= len\n\t\tmax_with_ans.pb((max_with_ans.at(n - 2) + max_with_ans.at(n - 3) +\n\t\t                 max_with_ans.at(n - 4)) /\n\t\t                2);\n\t\t// max_with_ans.pb(max_with_ans.at(n - 2) + max_with_ans.at(n - 3) +\n\t\t//                 max_with_ans.at(n - 4));\n\t}\n\tauto get_ans = [&](int len) {\n\t\tF0R(i, sz(max_with_ans)) if (len <= max_with_ans[i]) return i;\n\t\tassert(false);\n\t};\n\t// dbg(sz(max_with_ans) - 1, get_ans(1e5));\n\tint lim = get_ans(N);\n\t// dbg(max_with_ans);\n\t// dbg(get_ans(1e5));\n\t// dbg(calc_lim(1e5));\n\tvi cands(N);\n\tiota(all(cands), 0);\n\tauto query = [&](int l, int r) -> bool {\n\t\tassert(lim);\n\t\t--lim;\n\t\tps(\"?\", 1 + l, 1 + r);\n\t\tcout.flush();\n\t\tint x;\n\t\tre(x);\n\t\tx = r - l + 1 - x;  // if true: x = 1 -> in range\n\t\tassert(0 <= x && x <= 1);\n\t\tvi ncands;\n\t\tfor (int c : cands) {\n\t\t\tbool lie = x ^ (l <= c && c <= r);\n\t\t\tif (lie) {\n\t\t\t\tckmin(hist[c], 0);\n\t\t\t\t--hist[c];\n\t\t\t} else {\n\t\t\t\tckmax(hist[c], 0);\n\t\t\t\t++hist[c];\n\t\t\t}\n\t\t\tif (abs(hist[c]) < 3) ncands.pb(c);\n\t\t}\n\t\tswap(cands, ncands);\n\t\tdbg(cands, hist, x);\n\t\treturn x;\n\t};\n\tauto sgn = [&](int x) {\n\t\tif (x < 0) return -1;\n\t\treturn 1;\n\t};\n\tauto all_same_sign = [&]() {\n\t\tassert(sz(cands));\n\t\tfor (int c : cands) {\n\t\t\tif (hist[c] == 0) return false;\n\t\t\tif (sgn(hist[c]) != sgn(hist[cands.ft])) return false;\n\t\t}\n\t\treturn true;\n\t};\n\twhile (sz(cands) > 2) {\n\t\tconst int len = sz(cands);\n\t\tconst int a = get_ans(len);\n\t\tAR<vi, 3> segs;\n\t\tfor (int c : cands) {\n\t\t\tif (len - sz(segs.at(0)) > max_with_ans.at(a - 2)) {\n\t\t\t\tsegs.at(0).pb(c);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (len - sz(segs.at(1)) > max_with_ans.at(a - 3)) {\n\t\t\t\tsegs.at(1).pb(c);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tsegs.at(2).pb(c);\n\t\t}\n\t\tdbg(len, sz(segs[0]), sz(segs[1]), sz(segs[2]), a);\n\t\tassert(len - sz(segs.at(0)) <= max_with_ans.at(a - 2));\n\t\tassert(len - sz(segs.at(1)) <= max_with_ans.at(a - 3));\n\t\tassert(len - sz(segs.at(2)) <= max_with_ans.at(a - 4));\n\t\tif (!all_same_sign()) query(0, N - 1);\n\t\tassert(all_same_sign());\n\t\tassert(lim >= a - 1);\n\t\tvi state{sgn(hist[cands.ft])};\n\t\twhile (sz(state) < 3) state.pb(state.bk);\n\t\tauto similar = [&](vi expected_state) {\n\t\t\tif (state != expected_state) { each(t, expected_state) t *= -1; }\n\t\t\tassert(state == expected_state);\n\t\t};\n\t\tauto upd = [&](int l, int r, bool res) {\n\t\t\tassert(0 <= l && l <= r && r <= 2);\n\t\t\tF0R(c, 3) {\n\t\t\t\tbool lie = (l <= c && c <= r) ^ res;\n\t\t\t\tif (lie) {\n\t\t\t\t\tckmin(state[c], 0);\n\t\t\t\t\t--state[c];\n\t\t\t\t} else {\n\t\t\t\t\tckmax(state[c], 0);\n\t\t\t\t\t++state[c];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tauto select = [&](int pos) {\n\t\t\tdbg(\"SELECT\", pos);\n\t\t\tif (pos == -1) upd(0, 2, query(0, N - 1));\n\t\t\telse upd(pos, pos, query(segs.at(pos).ft, segs.at(pos).bk));\n\t\t};\n\t\tsimilar({1, 1, 1});\n\t\tselect(0);\n\t\tdbg(state);\n\t\tif (abs(state[0]) == 2) {\n\t\t\tsimilar({-2, 1, 1});\n\t\t\tselect(-1);\n\t\t\tif (abs(state[0]) == 3) {\n\t\t\t\tsimilar({-3, -1, -1});  // elim 0, 3 (save)\n\t\t\t} else {\n\t\t\t\tsimilar({1, 2, 2});\n\t\t\t\tselect(1);\n\t\t\t\tif (abs(state[1]) == 3) {\n\t\t\t\t\tsimilar({-1, 3, -1});  // elim 1, 4 (save)\n\t\t\t\t} else {\n\t\t\t\t\tsimilar({2, -1, 3});  // elim 2, 4\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tsimilar({1, -2, -2});\n\t\t\tselect(1);\n\t\t\tif (abs(state[1]) == 3) {\n\t\t\t\tsimilar({2, -3, 1});  // elim 1, 3 (save)\n\t\t\t} else {\n\t\t\t\tsimilar({-1, 1, -3});  // elim 2, 3\n\t\t\t}\n\t\t}\n\t}\n\tassert(sz(cands));\n\tfor (int c : cands) {\n\t\tps(\"!\", 1 + c);\n\t\tcout.flush();\n\t\tdef(int, y);\n\t\tif (y == 1) {\n\t\t\tps(\"#\");\n\t\t\tcout.flush();\n\t\t\treturn;\n\t\t}\n\t}\n\tassert(false);\n}\n\n// 1: 3 (save)\n// 2: 4 (save)\n// 3: 4\n\nint main() {\n\tsetIO();\n\tint TC;\n\tre(TC);\n\tFOR(i, 1, TC + 1) solve(i);\n}\n\n/* stuff you should look for\n * int overflow, array bounds\n * special cases (n=1?)\n * do smth instead of nothing and stay organized\n * WRITE STUFF DOWN\n * DON'T GET STUCK ON ONE APPROACH\n */\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dp",
        "interactive",
        "ternary search"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\F. Anti-Proxy Attendance.json",
    "editorial_link": "https://codeforces.com//blog/entry/125137",
    "editorial": "TutorialThere might be multiple strategies to solve this problem. I will\r\ndescribe one of them.First, letÃ¢Â€Â™s try to solve a slightly easier version\r\nwhere something like queries are allowed and subset queries are allowed\r\ninstead of range queries.The main idea is to maintain a search space of\r\nsize and reduce it to a search space of size using atmost queries. At\r\nthe end, there will be exactly elements remaining in the search space\r\nwhich can be guessed. The number of queries required to reduce a search\r\nspace of size to a search space of size using the above strategy will be\r\nequal to . Given below is one of the strategies how this can be\r\nachieved. Let the current search space be . Divide into disjoint\r\nexhaustive subsets , and of nearly equal size. Then follow the decision\r\ntree given below to discard one of the three subsets using at most\r\nqueries.It can seen that all the leaf nodes discard at least one-third\r\nof the search space based on the previous three queries. Now, coming\r\nback to the problem where only ranges are allowed to be queried. This\r\ncan be easily solved by choosing , and in such a way that all elements\r\nof are less than all elements of and all elements of are less than all\r\nelements of . Then all queries used in the above decision tree can be\r\nreduced to range queries since it really doesnÃ¢Â€Â™t matter what are the\r\nactual elements of , and .Finally, there is just one small optimization\r\nleft to be done. Notice that when gets eliminated, only queries are used\r\nand when and get eliminated, queries are used. So, it must be more\r\noptimal to keep the size of smaller than and but by how much? The answer\r\nis given by the equation . It has two imaginary and two real roots out\r\nof which only one is positive . So by taking the size of the segments\r\napproximately , and , you can do it in lesser number of queries which is\r\nless than which is less than .\r\n",
    "hint": []
}