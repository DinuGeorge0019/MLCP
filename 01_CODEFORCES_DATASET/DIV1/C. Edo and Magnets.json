{
    "link": "https://codeforces.com//contest/594/problem/C",
    "problemId": "40380",
    "problem_idx": "C",
    "shortId": "594C",
    "contest_number": "594",
    "problem_submissions": {
        "E": [
            16759125
        ],
        "A": [
            14859835,
            14187151,
            14168211,
            14172935,
            14182638
        ],
        "B": [
            14156236,
            14148350,
            14148054,
            14157567,
            14148683,
            14153705,
            14154342,
            14148482,
            14159536,
            14174689,
            14159892,
            14159855,
            14159731
        ],
        "D": [
            14150984,
            14155176,
            14155954,
            14153436,
            14155957,
            14149401,
            14158502,
            14157969,
            14149011,
            14149866,
            14152166,
            14149390,
            14153522,
            14151360,
            14154138,
            14150754,
            14152455
        ],
        "C": [
            14148084,
            14150600,
            14150845,
            14151161,
            14152433,
            14158444,
            14151325,
            14153060,
            14153280,
            14152819,
            14149839,
            14153721,
            14148614,
            14156263,
            14151875,
            14156017,
            14156027
        ]
    },
    "name": "C. Edo and Magnets",
    "statement": "Edo has got a collection of refrigerator magnets!He decided to buy a\r\nrefrigerator and hang the magnets on the door. The shop can make the\r\nrefrigerator with any size of the door that meets the following\r\nrestrictions: the refrigerator door must be rectangle, and both the\r\nlength and the width of the door must be .Edo figured out how he wants\r\nto place the magnets on the refrigerator. He introduced a system of\r\ncoordinates on the plane, where each magnet is represented as a\r\nrectangle with sides parallel to the coordinate axes.Now he wants to\r\nremove no more than magnets (he may choose to keep all of them) and\r\nattach all remaining magnets to the refrigerator door, and the area of\r\nthe door should be as small as possible. A magnet is considered to be\r\nattached to the refrigerator door if lies on the door or on its\r\nboundary. The relative positions of all the remaining magnets must\r\ncorrespond to the plan.Let us explain the last two sentences. Letâ€™s\r\nsuppose we want to hang two magnets on the refrigerator. If the magnet\r\nin the plan has coordinates of the lower left corner (, ) and the upper\r\nright corner (, ), then its center is located at (, ) (may not be\r\nintegers). By saying the relative position should correspond to the plan\r\nwe mean that the only available operation is translation, i.e. the\r\nvector connecting the centers of two magnets in the original plan, must\r\nbe equal to the vector connecting the centers of these two magnets on\r\nthe refrigerator.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<iostream>\n#include<cstdlib>\n#include<cmath>\n#include<vector>\n#include<map>\n#include<set>\n#include<queue>\n#include<bitset>\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nconst db pi=acos(-1);\nvoid gn(int &x){\n\tint sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');\n\tif(c=='-')sg=-1,x=0;else x=c-'0';\n\twhile((c=getchar())>='0'&&c<='9')x=x*10+c-'0';\n\tx*=sg;\n}\nvoid gn(ll &x){\n\tint sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');\n\tif(c=='-')sg=-1,x=0;else x=c-'0';\n\twhile((c=getchar())>='0'&&c<='9')x=x*10+c-'0';\n\tx*=sg;\n}\nconst int mo=1000000007;\nconst int inf=1061109567;\nint qp(int a,ll b){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}\nint dx[4]={1,0,-1,0};\nint dy[4]={0,1,0,-1};\n\nint n,k;\n\nstruct node{\n\tll x,y;int id;\n}p[111111],q[111111];\nint cmpx(const node &a,const node&b){\n\treturn a.x<b.x;\n}\nint cmpy(const node &a,const node&b){\n\treturn a.y<b.y;\n}\nint ind=0;\nint off[111111];\nint cnt=0;\nvoid mark(int i){\n\tif(off[i]!=ind){\n\t\toff[i]=ind;\n\t\tcnt++;\n\t}\n}\n\nint main(){\n\tgn(n);gn(k);\n\tfor (int i=1;i<=n;i++){\n\t\tint a,b,c,d;\n\t\tgn(a);\n\t\tgn(b);\n\t\tgn(c);\n\t\tgn(d);\n\t\tp[i].x=a+c;\n\t\tp[i].y=b+d;\n\t\tp[i].id=i;\n\t}\n\tfor (int i=1;i<=n;i++)q[i]=p[i];\n\tsort(p+1,p+1+n,cmpx);\n\tsort(q+1,q+1+n,cmpy);\n\t\n\tll mi=ll(6e18);\n\tfor (int l=0;l<=k;l++)\n\t\tfor (int r=0;r<=k;r++)\n\t\t\tfor (int u=0;u<=k;u++)\n\t\t\t\tfor (int d=0;d<=k;d++){\n\t\t\t\t\t++ind;cnt=0;\n\t\t\t\t\tfor (int i=1;i<=l;i++)mark(p[i].id);\n\t\t\t\t\tfor (int i=n;i>=n-r+1;i--)mark(p[i].id);\n\t\t\t\t\tfor (int i=1;i<=d;i++)mark(q[i].id);\n\t\t\t\t\tfor (int i=n;i>=n-u+1;i--)mark(q[i].id);\n\t\t\t\t\tif(cnt>k)continue;\n\n\t\t\t\t\tll w=max(2ll,p[n-r].x-p[l+1].x);\n\t\t\t\t\tll h=max(2ll,q[n-u].y-q[d+1].y);\n\t\t\t\t\tif(w&1)w++;\n\t\t\t\t\tif(h&1)h++;\n\t\t\t\t\tmi=min(mi,(w/2)*(h/2));\n\t\t\t\t}\n\tcout<<mi<<endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "implementation",
        "two pointers"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Edo and Magnets.json",
    "editorial_link": "https://codeforces.com//blog/entry/21487",
    "editorial": "Let's find the centers of every rectangle and multiple them of 2 (to make all coordinates integers).Then we need to by the rectangle door, which contains all dots, but the lengths of the sides of this door must be rounded up to the nearest integers.\n\nNow, let's delete the magnets from the door one by one, gradually the door will decrease. Obviously every time optimal to delete only dots, which owned to the sides of the rectangle. Let's brute 4k ways, how we will do delete the magnets. We will do it with helps of recursion, every time we will delete point with minimum or maximum value of the coordinates. If we will store 4 arrays (or 2 deques) we can do it with asymptotic O(1). Such a solution works O(4k).\n\nIt can be easily shown that this algorithm delete always some number of the leftmost, rightmost, uppermost and lowermost points. So we can brute how k will distributed between this values and we can model the deleting with helps of 4 arrays. This solution has asymptotic behavior O(k4).",
    "hint": []
}