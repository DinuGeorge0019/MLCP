{
    "link": "https://codeforces.com//contest/213/problem/E",
    "problemId": "1591",
    "problem_idx": "E",
    "shortId": "213E",
    "contest_number": "213",
    "problem_submissions": {
        "E": [
            1958173,
            1969539,
            1959873,
            1958351,
            1966588
        ],
        "C": [
            1956984,
            1956310,
            1956134,
            1954719,
            1956966,
            1955946,
            1956887,
            1958032,
            1956545,
            1956052,
            1957958,
            1958035,
            1956906,
            1958230,
            1958332
        ],
        "A": [
            1955875,
            1954301,
            1955345,
            1958002,
            1955539,
            1958852,
            1959099,
            1957250,
            1954723,
            1954879,
            1954628,
            1955388,
            1957376,
            1958738
        ],
        "B": [
            1955158,
            1954754,
            1954497,
            1957206,
            1954491,
            1954655,
            1955055,
            1956017,
            1960091,
            1954587,
            1956726,
            1956267,
            1958376,
            1954707,
            1954701
        ],
        "D": [
            1958270,
            1958148,
            1956444,
            1958920,
            1958358,
            1958527,
            1958577,
            1959892,
            1960192,
            1959820,
            1960125,
            1960223
        ]
    },
    "name": "E. Two Permutations",
    "statement": "Rubik is very keen on number permutations. A with length is a sequence,\r\nconsisting of different numbers from 1 to . Element number of this\r\npermutation will be denoted as .Furik decided to make a present to Rubik\r\nand came up with a new problem on permutations. Furik tells Rubik two\r\nnumber permutations: permutation with length and permutation with length\r\n. Rubik must give an answer to the problem: how many distinct integers\r\nexist, such that sequence of length is a subsequence of .Sequence is a\r\nof sequence , if there are such indices , that , , , , where is the\r\nlength of sequence , and is the length of sequence . You are given\r\npermutations and , help Rubik solve the given problem.\r\n",
    "solutions": [
        "#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <complex>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <cassert>\nusing namespace std;\n\nconst int maxn = 222222;\n\nunsigned long long p4423[maxn];\n\n#define IX(l, r) (((l) + (r)) | ((l) != (r)))\n\nstruct State {\n    unsigned long long hashValue;\n    int count;\n\n    void assign(int value) {\n        if (value == 0) {\n            hashValue = 0;\n            count = 0;\n        } else {\n            hashValue = value;\n            count = 1;\n        }\n    }\n\n    void assign(const State &l, const State &r) {\n        hashValue = p4423[r.count] * l.hashValue + r.hashValue;\n        count = l.count + r.count;\n    }\n};\n\nState states[maxn * 2];\n\nint n, m;\nint a[maxn], b[maxn];\nint pos[maxn];\n\nvoid update(int l, int r, int p, int v)\n{\n    if (l == r) {\n        if (p == l) {\n            states[IX(l, r)].assign(v);\n        }\n        return;\n    }\n    int m = l + r >> 1;\n    if (p <= m) {\n        update(l, m, p, v);\n    }\n    if (p > m) {\n        update(m + 1, r, p, v);\n    }\n    states[IX(l, r)].assign(states[IX(l, m)], states[IX(m + 1, r)]);\n}\n\nint main()\n{\n    p4423[0] = 1;\n    for (int i = 1; i < maxn; i++) {\n        p4423[i] = p4423[i-1] * 4423;\n    }\n    scanf(\"%d%d\", &n, &m);\n    unsigned long long targetHash = 0, ones = 0;\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", a + i);\n        targetHash = targetHash * 4423 + a[i];\n        ones = ones * 4423 + 1;\n    }\n    for (int i = 0; i < m; i++) {\n        scanf(\"%d\", b + i);\n        pos[b[i]] = i;\n    }\n    for (int i = 1; i < n; i++) {\n        update(0, m - 1, pos[i], i);\n    }\n    int ret = 0;\n    for (int i = n; i <= m; i++) {\n        update(0, m - 1, pos[i], i);\n        assert(states[IX(0, m - 1)].count == n);\n        if (states[IX(0, m - 1)].hashValue == targetHash) {\n            ret ++;\n        }\n        targetHash += ones;\n        update(0, m - 1, pos[i - n + 1], 0);\n    }\n    printf(\"%d\\n\", ret);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "hashing",
        "strings"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Two Permutations.json",
    "editorial_link": "https://codeforces.com//blog/entry/4982",
    "editorial": "For given two permutation we will make two another by next\r\ntransformation: New_A[A[i]] = i, where New_A news permutation, A given\r\npermutation. Lets we get two permutation A and B. Now our problem is\r\nnext: how many sub-arrays of length n are equals to firs permutation.\r\nTwo arrays will be equal if after swaping every element with its number\r\nin sorted array obtained arrays will be element-wise equal.Further\r\nsolution hashes, but we will use not only modulo 2^64, we will use some\r\nbig modulos, but they must be smaller then 2^32-1.Lets step[i] =\r\n1000003^i.Lets F(A) = num[1]*step[1] + num[2]*step[2] + ... +\r\nnum[n]*step[n], where num[i] number of the element A[i] in sorted\r\narray.If we will compare arrays, we can use this function. But it can be\r\nvery big, so we will count it by modulos.So now our problem is to\r\ncalculate F function to every subarray. Lets look what will change after\r\nadding/deleting some elent from set: some element from num array willnot\r\nchange, and some will become grater after adding, and become lower after\r\ndeleting. So we must use some interval-tree to recount our F function.\r\nWe need to know sum of step[i] on some interval of added numbers and\r\ncount of elements on some interval. Uses this information we can simply\r\nrecount out function. Also we must remember that after adding element\r\nwith coeficinet step[i], where i>n and deleting some previos element our\r\nfunction will become grater that we need. So we will multiple hash of\r\nfirst array by 1000003 to avoid this issue.\r\n",
    "hint": []
}