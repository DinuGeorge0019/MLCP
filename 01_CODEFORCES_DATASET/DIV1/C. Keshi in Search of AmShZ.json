{
    "link": "https://codeforces.com//contest/1693/problem/C",
    "problemId": "1430890",
    "problem_idx": "C",
    "shortId": "1693C",
    "contest_number": "1693",
    "problem_submissions": {
        "F": [
            160880007,
            160880972,
            160861674,
            160875588,
            160882783,
            160878948,
            160890167,
            160899913,
            161040863,
            160893311,
            160892940
        ],
        "E": [
            160864775,
            160851833,
            160876978,
            160893451,
            160863343,
            160869365,
            160873611,
            160876701,
            160883190,
            160881001,
            160869009,
            160890042,
            160889537,
            160889370,
            160888603,
            160888570,
            160884303
        ],
        "D": [
            160848374,
            160868923,
            160880702,
            160854200,
            160854032,
            160862911,
            160859336,
            160861278,
            160860933,
            160866823,
            160880935,
            160874455,
            160855846,
            160857826,
            160858928,
            160851586,
            160859103
        ],
        "C": [
            160833863,
            160838237,
            160831750,
            160839496,
            160831595,
            160847471,
            160845192,
            160845432,
            160842623,
            160834916,
            160845029,
            160853816,
            160836315,
            160837724,
            160840237,
            160837127,
            160842065,
            160837528
        ],
        "B": [
            160829995,
            160831749,
            160828393,
            160835792,
            160838408,
            160836721,
            160840343,
            160837858,
            160837790,
            160829673,
            160840637,
            160838527,
            160830551,
            160831811,
            160831387,
            160832406,
            160834629,
            160831231
        ],
        "A": [
            160824784,
            160824733,
            160824181,
            160826982,
            160842765,
            160829489,
            160836610,
            160834230,
            160827824,
            160825693,
            160827125,
            160830489,
            160824662,
            160825298,
            160825387,
            160826936,
            160829963,
            160825879
        ]
    },
    "name": "C. Keshi in Search of AmShZ",
    "statement": "AmShZ has traveled to Italy from Iran for the Thom Yorke concert. There\r\nare n cities in Italy indexed from 1 to n and m roads indexed from 1 to\r\nm. Initially, Keshi is located in the city 1 and wants to go to AmShZ\u2019s\r\nhouse in the city n. Since Keshi doesn\u2019t know the map of Italy, AmShZ\r\nhelps him to see each other as soon as possible.In the beginning of each\r\nday, AmShZ can send one of the following two messages to Keshi: AmShZ\r\nsends the index of one road to Keshi as a road. Then Keshi will\r\nunderstand that he should never use that road and he will remain in his\r\ncurrent city for the day. AmShZ tells Keshi to move. Then, Keshi will\r\nrandomly choose one of the cities reachable from his current city and\r\nmove there. (city B is reachable from city A if there\u2019s an out-going\r\nroad from city A to city B which hasn\u2019t become yet). If there are no\r\nsuch cities, Keshi will remain in his current city.Note that AmShZ\r\nalways knows Keshi\u2019s current location. AmShZ and Keshi want to find the\r\nsmallest possible integer d for which they can make sure that they will\r\nsee each other after at most d days. Help them find d.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC target (\"avx2\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=1000*1007;\n\nint n, m;\n\nint wyn[nax];\n\nint jesz[nax];\nvi graf[nax];\n\nint wiem[nax];\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tint a, b;\n\t\tscanf(\"%d%d\", &a, &b);\n\t\tgraf[b].push_back(a);\n\t\tjesz[a]++;\n\t}\n\tfor (int i=1; i<=n; i++)\n\t\twiem[i]=-1;\n\tpriority_queue<pii> kol;\n\tkol.push({0, n});\n\twhile(!kol.empty())\n\t{\n\t\tint odl=-kol.top().first;\n\t\tint v=kol.top().second;\n\t\tkol.pop();\n\t\tif (wiem[v]>=0)\n\t\t\tcontinue;\n\t\twiem[v]=odl;\n\t\tfor (int i : graf[v])\n\t\t{\n\t\t\tjesz[i]--;\n\t\t\tkol.push({-(1+odl+jesz[i]), i});\n\t\t}\n\t}\n\tprintf(\"%d\\n\", wiem[1]);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "greedy",
        "shortest paths"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Keshi in Search of AmShZ.json",
    "editorial_link": "https://codeforces.com//blog/entry/103952",
    "editorial": "Define as the minimum number of days needed to reach city from city .\r\n.We have to assume that Keshi will always choose the worst reachable\r\ncity, that is the city with maximum .For each node we kind of have to\r\nchoose and block all neighbors(outgoing edges) with a distance more than\r\n.We will use Dijkstra\u00e2\u0080\u0099s algorithm.Note that in Dijkstra\u00e2\u0080\u0099s algorithm we\r\nmark the nodes in increasing order of .At each step get the node with\r\nthe minimum . For each node that there is an edge from to , calculate if\r\nwas . You know the number of edges you have to block since the neighbors\r\nwith greater are the ones that are not marked yet.Time complexity:\r\n"
}