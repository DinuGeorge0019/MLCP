{
    "link": "https://codeforces.com//contest/204/problem/E",
    "problemId": "1546",
    "problem_idx": "E",
    "shortId": "204E",
    "contest_number": "204",
    "problem_submissions": {
        "D": [
            1890391,
            1887471,
            1890599,
            1889369,
            1889690,
            1887786,
            1890524,
            1888787,
            1890893,
            1890291,
            1889544,
            1889099,
            1890138,
            1888234
        ],
        "C": [
            1887005,
            1885936,
            1886676,
            1884378,
            1886948,
            1886445,
            1888022,
            1890493,
            1887876,
            1887950,
            1890335,
            1891041,
            1888850,
            1891535
        ],
        "B": [
            1885016,
            1884494,
            1884426,
            1885084,
            1884105,
            1885072,
            1886343,
            1886124,
            1885617,
            1886009,
            1886808,
            1885527,
            1884342,
            1885170
        ],
        "A": [
            1884472,
            1883818,
            1883786,
            1886039,
            1884808,
            1892033,
            1884885,
            1884244,
            1884597,
            1885114,
            1886281,
            1884488,
            1890685,
            1884595
        ],
        "E": [
            1922274,
            1922268,
            1922264,
            1922262,
            1922224,
            1922202,
            1922184,
            1922174,
            1922170,
            1922131,
            1922121,
            1892756
        ]
    },
    "name": "E. Little Elephant and Strings",
    "statement": "The Little Elephant loves strings very much. He has an array from\r\nstrings, consisting of lowercase English letters. Let\u2019s number the\r\nelements of the array from 1 to , then let\u2019s denote the element number\r\nas . For each string the Little Elephant wants to find the number of\r\npairs of integers and such that substring is a substring to at least\r\nstrings from array (including the -th string).Help the Little Elephant\r\nsolve this problem.If you are not familiar with the basic notation in\r\nstring problems, you can find the corresponding definitions in the\r\nnotes.\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <algorithm>\n#include <numeric>\n#include <iterator>\n#include <functional>\n#include <complex>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <cassert>\nusing namespace std;\ntypedef long long LL;\n\n// SA from http://www.prefield.com/algorithm/string/suffix_array.html\n\nstruct SaComp {\n\tconst int sp, *sr, srlen;\n\tSaComp(int sp, const vector<int>& sr) : sp(sp), sr(&sr[0]), srlen(sr.size()) {}\n\tbool operator()(int a, int b) const\n\t  { return make_pair(sr[a], a+sp<srlen?sr[a+sp]:0x7fffffff)\n\t         < make_pair(sr[b], b+sp<srlen?sr[b+sp]:0x7fffffff); }\n};\n\ntemplate<typename RanIt>\nvector<int> compute_suffix_array(RanIt beg, RanIt end)\n{\n\tconst int N = end - beg;\n\n\tvector<int> sa(N);\n\tvector<int> sort_rank(beg, end);\n\tfor(int i=0; i<N; ++i)\n\t\tsa[i] = i;\n\n\tsort(sa.begin(), sa.end(), SaComp(0, sort_rank));\n\tfor(int sorted_prefix=1; sorted_prefix<N; sorted_prefix*=2)\n\t{\n\t\tSaComp cmp(sorted_prefix, sort_rank);\n\t\tsort(sa.begin(), sa.end(), cmp);\n\n\t\tvector<int> block_id(N);\n\t\tfor(int i=1; i<N; ++i)\n\t\t\tblock_id[i] = block_id[i-1] + (cmp(sa[i-1], sa[i]) ? 1 : 0);\n\t\tfor(int i=0; i<N; ++i)\n\t\t\tsort_rank[sa[i]] = block_id[i];\n\t}\n\treturn sa;\n}\n\nvector<int> inv_sa(const vector<int>& sa)\n{\n\tvector<int> isa(sa.size());\n\tfor(int i=0; i<sa.size(); ++i)\n\t\tisa[sa[i]] = i;\n\treturn isa;\n}\n\ntemplate<typename RanIte>\nvector<int> longest_common_prefix(RanIte beg, RanIte end, const vector<int>& sa)\n{\n\tconst int N = sa.size();\n\tvector<int> lcp(N);\n\tvector<int> inv = inv_sa(sa);\n\n\tint len = 0;\n\tfor(int i=0; i<N; ++i) {\n\t\tint sa_idx = inv[i];\n\t\tif( sa_idx == 0 )\n\t\t\tlcp[sa_idx] = -1;\n\t\telse {\n\t\t\tfor(int k=sa[sa_idx-1]; i+len<N && k+len<N && *(beg+i+len)==*(beg+k+len);)\n\t\t\t\t++len;\n\t\t\tlcp[sa_idx] = len;\n\t\t}\n\t\tif(len) --len;\n\t}\n\treturn lcp;\n}\n\ntemplate<typename T>\nstruct RMQ\n{\n\tvector< vector<int> > rm;\n\tvector<T> d;\n\n\tRMQ( const vector<T>& d ) : d(d) {\n\t\tint n = d.size();\n\n\t\t// rm[k][x] = i s.t. d[i] is the minimum in [x, x+2^k)\n\t\trm.push_back( vector<int>(n) );\n\t\tfor(int x=0; x<n; ++x)\n\t\t\trm[0][x] = x;\n\t\tfor(int k=1; (1<<k)<=n; ++k) {\n\t\t\trm.push_back( rm[k-1] );\n\t\t\tfor(int x=0; x+(1<<k-1)<n; ++x)\n\t\t\t\tif( d[rm[k][x]] > d[rm[k-1][x + (1<<k-1)]] )\n\t\t\t\t\trm[k][x] = rm[k-1][x + (1<<k-1)];\n\t\t}\n\t}\n\n\t// min {i in [L,R] | d[i] is minumum among d[L..R]}\n\tint operator()(int L, int R) const {\n\t\tint k=0;\n\t\tfor(; L+(1<<k) < R-(1<<k)+1; ++k) {}\n\t\tint i = rm[k][L];\n\t\tint j = rm[k][R-(1<<k)+1];\n\t\treturn (d[i]<=d[j] ? i : j);\n\t}\n\n\t// {i in [L,R] | d[i] is minumum among d[L..R]}\n\tvector<int> all(int L, int R) const {\n\t\tvector<int> ans;\n\t\tint minValue = d[(*this)(L, R)];\n\t\twhile( L <= R ) {\n\t\t\tint C = (*this)(L, R);\n\t\t\tif( minValue < d[C] )\n\t\t\t\tbreak;\n\t\t\tans.push_back(C);\n\t\t\tL = C+1;\n\t\t}\n\t\treturn ans;\n\t}\n\n\t// max {i in [L,R] | d[i]<X}, or -1\n\tint rightmost_less_than_X(int L, int R, T X) const {\n\t\tif(L>R) return -1;\n\n\t\tint k=0;\n\t\tfor(; L+(1<<k) < R-(1<<k)+1; ++k) {}\n\n\t\tint i = rm[k][L];\n\t\tint j = rm[k][R-(1<<k)+1];\n\t\tif( !(d[i]<X || d[j]<X) )\n\t\t\treturn -1;\n\t\tif( d[j] < X )\n\t\t\tL = R-(1<<k)+1;\n\n\t\tfor(; k; --k) { // Answer is in [L, L+(1<<k))\n\t\t\ti = rm[k-1][L];\n\t\t\tj = rm[k-1][L+(1<<k-1)];\n\t\t\tif( d[j] < X )\n\t\t\t\tL += 1<<k-1;\n\t\t}\n\t\treturn L;\n\t}\n\n\t// min {i in [L,R] | d[i]<X}, or -1\n\tint leftmost_less_than_X(int L, int R, T X) const {\n\t\tif(L>R) return -1;\n\n\t\tint k=0;\n\t\tfor(; L+(1<<k) < R-(1<<k)+1; ++k) {}\n\n\t\tint i = rm[k][L];\n\t\tint j = rm[k][R-(1<<k)+1];\n\t\tif( !(d[i]<X || d[j]<X) )\n\t\t\treturn -1;\n\t\tif( !(d[i] < X) )\n\t\t\tL = R-(1<<k)+1;\n\n\t\tfor(; k; --k) { // Answer is in [L, L+(1<<k))\n\t\t\ti = rm[k-1][L];\n\t\t\tj = rm[k-1][L+(1<<k-1)];\n\t\t\tif( !(d[i] < X) )\n\t\t\t\tL += 1<<k-1;\n\t\t}\n\t\treturn L;\n\t}\n};\n\nvoid solve(const vector<string>& SS, int K)\n{\n\tstring S;\n\tvector<int> sep;\n\tfor(int i=0; i<SS.size(); ++i) {\n\t\tif(i) S += '$';\n\t\tS += SS[i];\n\t\tsep.push_back(S.size());\n\t}\n\n\tint sa_end = S.size();\n\tvector<int> sa = compute_suffix_array(S.begin(), S.end());\n\tvector<int> lcp = longest_common_prefix(S.begin(), S.end(), sa);\n\tint sa_start = 0;\n\twhile(S[sa[sa_start]]<'A')\n\t\t++sa_start;\n\n\tvector<int> blk_of(sa_end, -1);\n\tfor(int i=sa_start; i<sa_end; ++i) {\n\t\tint blk = lower_bound(sep.begin(), sep.end(), sa[i]) - sep.begin();\n\t\tblk_of[i] = blk;\n\t}\n\n\tvector<int> first_index_of_K_diff_blocks(sa_end, 0x7fffffff);\n\tmap<int,int> blk_set;\n\tfor(int i=sa_start,k=sa_start; i<sa_end; ++i) {\n\t\tfor(; blk_set.size()<K && k<sa_end; ++k)\n\t\t\tblk_set[blk_of[k]]++;\n\t\tif( blk_set.size() == K )\n\t\t\tfirst_index_of_K_diff_blocks[i] = k-1;\n\t\tif( --blk_set[blk_of[i]] == 0 )\n\t\t\tblk_set.erase(blk_of[i]);\n\t}\n\n\n\n\tRMQ<int> rmq( vector<int>(lcp.begin(), lcp.end()) );\n\n\tvector<LL> total(SS.size());\n\tfor(int s=sa_start; s<sa_end; ++s)\n\t{\n\t\tint len_L=1, len_R=sep[blk_of[s]] - sa[s];\n\t\tint possible_len = 0;\n\t\twhile( len_L <= len_R )\n\t\t{\n\t\t\tint len_C = (len_L+len_R) / 2;\n\n\t\t\tint l = rmq.rightmost_less_than_X(sa_start, s, len_C);\n\t\t\tif(l==-1) l=sa_start;\n\t\t\tint r = rmq.leftmost_less_than_X(s+1, sa_end-1, len_C);\n\t\t\tif(r==-1) r=sa_end-1; else r--;\n\n\t\t\t// [l,r] has same prefix of length >= len_C as s\n\t\t\tif( first_index_of_K_diff_blocks[l] <= r ) {\n\t\t\t\tpossible_len = len_C;\n\t\t\t\tlen_L = len_C + 1;\n\t\t\t} else\n\t\t\t\tlen_R = len_C - 1;\n\t\t}\n\t\ttotal[blk_of[s]] += possible_len;\n\t}\n\n\tfor(int i=0; i<total.size(); ++i)\n\t\tcout << (i?\" \":\"\") << total[i];\n\tcout<<endl;\n}\n\nint main()\n{\n\tfor(int N,K; cin>>N>>K; )\n\t{\n\t\tvector<string> SS(N);\n\t\tfor(int i=0; i<SS.size(); ++i)\n\t\t\tcin >> SS[i];\n\t\tsolve(SS, K);\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation",
        "string suffix structures",
        "two pointers"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Little Elephant and Strings.json",
    "editorial_link": "https://codeforces.com/blog/entry/4849",
    "editorial": "To solve this problems we can use suffix array. More information about\r\nsuffix arrays you can find in the Internet. Firstly, concatenate all\r\nstrings into the one separating consecutive strings by some unique\r\ncharacters (it was also useful to not use strings, but arrays of\r\nintegers). For example, three strings may be concatenated in the\r\nfollowing way: . Now we should build suffix array using this total\r\nstring, this allows to us to sort all cyclic shifts of the string. After\r\nthat each cyclic shift will either begin with additional character or\r\nthe character from the input strings. Notice now that to find the result\r\nwe need to find for each cyclic shift (begging of which doesn\u00e2\u0080\u0099t contain\r\nadditional character) the largest size of it\u00e2\u0080\u0099s prefix such that this\r\nprefix is substring of at least different input strings. This value can\r\nbe found by binary search, but for this we need some function which can\r\nanswer the questions: how many input strings contain prefix of size of\r\ncyclic shift as a substring. How to make ? Look at all cyclic shifts,\r\nprefix of size of which is equal to preifx of size of -th shift. Since\r\nall shifts are sorted lexicoraphically, this set of shifts can be\r\nrepresented as integral of indices of shifts (). How to find and ? For\r\neach pair of consecutive shifts we can find it\u00e2\u0080\u0099s greatest common prefix\r\n(using properties of suffix array). Than and can be found using RMQ. For\r\nwe need to know the rigthmost pair of shift (but to the left from ) that\r\ntheir greatest common prefix is less than . Analogically we can find .\r\nAfter that we have interval and we need to find the number of different\r\ninput strings that belongs to the shifts from -th to -th (actually, we\r\nneed to find the number of different integer on interval). But, notice\r\nthat we dont need the exactly number of different integers, we need to\r\nknow just it is at least or not. So let equals to the greatest () such\r\nthat the number of different integers on interval is equal to . Then if\r\n, obiously, interval will also contains at least different. So is done.\r\nThe only thing to done is to fill array . This is pretty simple using\r\n(but it is possible without it but using RMQ). We will go from left to\r\nrigh at keep the indices of the last (the rightmost) different integers\r\nin the . If some integer comes, then (if it was earlier) we need to\r\nerase this previous index from set (if it was still in) and insert new\r\ncurrent. While the size of set is greater than , we should erase the\r\nminimal number from it. Then if in some position the size of the set\r\n(after above changings) is equal to , than is equal to the minimal\r\nnumber in set. Since we times use binary search, and function works in\r\ntime, the total complexity is .\r\n"
}