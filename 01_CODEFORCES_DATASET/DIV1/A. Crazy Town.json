{
    "link": "https://codeforces.com//contest/498/problem/A",
    "problemId": "19899",
    "problem_idx": "A",
    "shortId": "498A",
    "contest_number": "498",
    "problem_submissions": {
        "E": [
            9254353,
            9255134,
            9255917,
            9257774,
            9256751,
            9258696,
            9256130,
            9254869,
            9255218,
            9257482,
            9259085,
            9259412,
            9293653
        ],
        "D": [
            9252551,
            9253707,
            9253982,
            9253218,
            9254235,
            9256783,
            9248603,
            9260246,
            9259443,
            9259317,
            9251692,
            9252178,
            9254847,
            9253161,
            9255257,
            9254544,
            9255567
        ],
        "C": [
            9251331,
            9245747,
            9250927,
            9247459,
            9249177,
            9251204,
            9249816,
            9248998,
            9251162,
            9248001,
            9250917,
            9253358
        ],
        "B": [
            9248724,
            9250737,
            9247577,
            9260817,
            9250130,
            9252321,
            9249119,
            9253380,
            9258038,
            9252693,
            9253079,
            9252863,
            9250195
        ],
        "A": [
            9245371,
            9251410,
            9245412,
            9245364,
            9247095,
            9245481,
            9245345,
            9245357,
            9245352,
            9245488,
            9245360,
            9245992,
            9246642,
            9245626
        ]
    },
    "name": "A. Crazy Town",
    "statement": "Crazy Town is a plane on which there are infinite line roads. Each road\r\nis defined by the equation , where and are not both equal to the zero.\r\nThe roads divide the plane into connected regions, possibly of infinite\r\nspace. Letâ€™s call each such region a block. We define an intersection as\r\nthe point where at least two different roads intersect.Your home is\r\nlocated in one of the blocks. Today you need to get to the University,\r\nalso located in some block. In one step you can move from one block to\r\nanother, if the length of their common border is nonzero (in particular,\r\nthis means that if the blocks are adjacent to one intersection, but have\r\nno shared nonzero boundary segment, then it are not allowed to move from\r\none to another one in one step).Determine what is the minimum number of\r\nsteps you have to perform to get to the block containing the university.\r\nIt is guaranteed that neither your home nor the university is located on\r\nthe road.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <ctime>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <list>\n#include <set>\n#include <map>\n#include <iostream>\n\n#define pb push_back\n#define mp make_pair\n#define TASKNAME \"\"\n\n#ifdef DEBUG\n#define eprintf(...) fprintf(stderr,__VA_ARGS__)\n#else\n#define eprintf(...)\n#endif\n\n#define TIMESTAMP(x) eprintf(\"[\" #x \"] Time = %.3lfs\\n\",clock()*1.0/CLOCKS_PER_SEC)\n\n#ifdef _WIN32\n#define LLD \"%I64d\"\n#else\n#define LLD \"%lld\"\n#endif\n\n#define sz(x) ((int)(x).size())\n#define forn(i, n) for (int i = 0; i < (n); i++)\n\nusing namespace std;\n\ntypedef long double ld;\ntypedef long long ll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<int, int> pii;\ntypedef pair<ll, int> pli;\ntypedef pair<int, ll> pil;\ntypedef pair<ll, ll> pll;\ntypedef vector<pii> vpii;\n\nconst int inf = 1e9;\nconst double eps = 1e-9;\nconst int INF = inf;\nconst double EPS = eps;\n\n#ifdef DEBUG\nstruct __timestamper {\n  ~__timestamper(){\n    TIMESTAMP(end);\n  }\n} __Timestamper;\n#else\nstruct __timestamper {};\n#endif\n\n/*Template end*/\n\nint sgn(ll x) {\n  return x < 0 ? -1 : !!x;\n}\n\nstruct pt {\n  int x, y;\n};\n\nstruct line {\n  int a, b, c;\n  int side(const pt &p) const {\n    return sgn(ll(a) * p.x + ll(b) * p.y + c);\n  }\n};\n\nint main() {\n  #ifdef DEBUG\n  freopen(TASKNAME\".in\",\"r\",stdin);\n  freopen(TASKNAME\".out\",\"w\",stdout);\n  #endif\n\n  pt st;\n  while (scanf(\"%d%d\", &st.x, &st.y) == 2) {\n    pt en;\n    scanf(\"%d%d\", &en.x, &en.y);\n\n    int n;\n    scanf(\"%d\", &n);\n\n    int ans = 0;\n    while (n --> 0) {\n      line l;\n      scanf(\"%d%d%d\", &l.a, &l.b, &l.c);\n      int s1 = l.side(st);\n      int s2 = l.side(en);\n      assert(s1 && s2);\n      if (s1 != s2) ans++;\n    }\n    printf(\"%d\\n\", ans);\n  }\n\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Crazy Town.json",
    "editorial_link": "https://codeforces.com//blog/entry/15353",
    "editorial": "It can be easily proved that, if two points from statement are placed on\r\ndifferent sides of some line, this line will be crossed anyway. So, all\r\nwe need to do is to cross all these lines, so the answer is the number\r\nof these lines. To check if two points lies on different sides of a line\r\none can simply use its coordinates to place in line equation and check\r\nif these two values have different signs. Solution complexity .\r\n",
    "hint": []
}