{
    "link": "https://codeforces.com//contest/1198/problem/C",
    "problemId": "380937",
    "problem_idx": "C",
    "shortId": "1198C",
    "contest_number": "1198",
    "problem_submissions": {
        "F": [
            58070272,
            58050274,
            58050240,
            58050207,
            58050120,
            58050094,
            58050069,
            58050046,
            58050006,
            58049923,
            58049860,
            58049749,
            58019601,
            58020980,
            58023606,
            58025464,
            58030444,
            58024358,
            58026672,
            58028904,
            58162403,
            58161986,
            58161687,
            58161301,
            58039796,
            58039793,
            58039362,
            58039355,
            58039125,
            58039123,
            58038995,
            58038994,
            58038812,
            58038810,
            58038134,
            58038133,
            58037905,
            58037904,
            58037582,
            58037581,
            58037164,
            58036882,
            58036679,
            58032989,
            58029905,
            58028352,
            58028560,
            58031397,
            58032467,
            58052909,
            58052897,
            58051859,
            58036577,
            58036553
        ],
        "D": [
            58009170,
            58008663,
            58011717,
            58013706,
            58003645,
            58007012,
            58019265,
            58015153,
            58015508,
            58008652,
            58007749,
            58009878,
            58015548,
            58020689,
            58012149,
            58011680,
            58013790,
            58004635
        ],
        "E": [
            58005211,
            58006936,
            58007024,
            58005225,
            58009765,
            58014251,
            58015403,
            58012193,
            58011483,
            58014790,
            58013911,
            58010339,
            58023389,
            58007572,
            58008131,
            57999112,
            58014046
        ],
        "C": [
            58001259,
            57997749,
            58001059,
            58007271,
            58013728,
            58018717,
            58005961,
            58006629,
            58048331,
            58006607,
            57998153,
            58003794,
            58001508,
            58001992,
            58002563,
            58001272,
            58004043,
            57999919
        ],
        "B": [
            57998572,
            58004780,
            57994973,
            58001340,
            57998225,
            58001182,
            57997197,
            58002237,
            57998507,
            58005059,
            58000720,
            57998812,
            57999975,
            57997709,
            58009338,
            57997300
        ],
        "A": [
            57995047,
            57995575,
            57997676,
            57995156,
            57995500,
            57997301,
            57995357,
            57998877,
            57995263,
            58002849,
            58004383,
            58026838,
            57997108,
            57995572,
            58007187,
            57995267
        ]
    },
    "name": "C. Matching vs Independent Set",
    "statement": "You are given a graph with 3\r\ncdot n vertices and m edges. You are to find a matching of n edges, an\r\nindependent set of n vertices.A set of edges is called a matching if no\r\ntwo edges share an endpoint.A set of vertices is called an independent\r\nset if no two vertices are connected with an edge.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=1000*1007;\n\nint n, m;\n\nvector <pii> graf[nax];\nint out[nax];\n\nvoid test()\n{\n\tvi ma, in;\n\tscanf(\"%d%d\", &n, &m);\n\tn*=3;\n\tfor (int i=1; i<=n; i++)\n\t{\n\t\tout[i]=0;\n\t\tgraf[i].clear();\n\t}\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tint a, b;\n\t\tscanf(\"%d%d\", &a, &b);\n\t\tgraf[a].push_back({b, i});\n\t\tgraf[b].push_back({a, i});\n\t}\n\tfor (int i=1; i<=n; i++)\n\t{\n\t\tif (out[i])\n\t\t\tcontinue;\n\t\tpii som={-1, -1};\n\t\tfor (pii j : graf[i])\n\t\t\tif (!out[j.first])\n\t\t\t\tsom=j;\n\t\tif (som.first>0)\n\t\t{\n\t\t\tout[i]=out[som.first]=1;\n\t\t\tma.push_back(som.second);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tout[i]=1;\n\t\t\tin.push_back(i);\n\t\t}\n\t}\n\tif ((int)ma.size()>(int)in.size())\n\t{\n\t\tprintf(\"Matching\\n\");\n\t\tfor (int i=0; i<n/3; i++)\n\t\t\tprintf(\"%d \", ma[i]);\n\t\tprintf(\"\\n\");\n\t}\n\telse\n\t{\n\t\tprintf(\"IndSet\\n\");\n\t\tfor (int i=0; i<n/3; i++)\n\t\t\tprintf(\"%d \", in[i]);\n\t\tprintf(\"\\n\");\n\t}\n}\n\nint main()\n{\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--)\n\t\ttest();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "graphs",
        "greedy",
        "sortings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Matching vs Independent Set.json",
    "editorial_link": "https://codeforces.com/blog/entry/68812",
    "editorial": "Let\u00e2\u0080\u0099s try to take edges to matching greedily in some order. If we can\r\nadd an edge to the matching (both endpoints are not covered), then we\r\ntake it. It is easy to see that all vertices not covered by the matching\r\nform an independent set otherwise we would add an edge to the matching.\r\nEither matching or independent set has size at least . Complexity .\r\n"
}