{
    "link": "https://codeforces.com//contest/341/problem/B",
    "problemId": "3423",
    "problem_idx": "B",
    "shortId": "341B",
    "contest_number": "341",
    "problem_submissions": {
        "D": [
            4376750,
            4378780,
            4376395,
            4376720,
            4378230,
            4379371,
            4379846,
            4378978,
            4379778,
            4378578,
            4381466,
            4381249,
            4379639,
            4434623,
            4381692,
            4380681,
            4380927,
            4380941,
            4449185,
            4374777
        ],
        "C": [
            4375168,
            4374068,
            4379294,
            4375659,
            4375652,
            4375871,
            4375036,
            4378006,
            4374746,
            4375347,
            4374858,
            4376054,
            4375611,
            4377642,
            4376535,
            4378502,
            4380054,
            4385371
        ],
        "B": [
            4372755,
            4372469,
            4374229,
            4375035,
            4374390,
            4374268,
            4379570,
            4373332,
            4379590,
            4372609,
            4373078,
            4372906,
            4373853,
            4373520,
            4374372,
            4374299,
            4376277,
            4376672
        ],
        "A": [
            4372149,
            4371769,
            4372926,
            4372916,
            4383777,
            4373604,
            4372813,
            4371963,
            4372756,
            4380996,
            4371671,
            4372384,
            4372154,
            4458518,
            4372373,
            4372183,
            4373535,
            4372955,
            4378126,
            4376128
        ],
        "E": [
            4404432,
            4383929,
            4395989,
            4381763
        ]
    },
    "name": "B. Bubble Sort Graph",
    "statement": "Iahub recently has learned Bubble Sort, an algorithm that is used to\r\nsort a permutation with elements , , ..., in ascending order. He is\r\nbored of this so simple algorithm, so he invents his own graph. The\r\ngraph (letâ€™s call it ) initially has vertices and 0 edges. During Bubble\r\nSort execution, edges appear as described in the following algorithm\r\n(pseudocode). procedure bubbleSortGraph() build a graph G with n\r\nvertices and 0 edges repeat swapped = false for i = 1 to n - 1 inclusive\r\ndo: if a[i] > a[i + 1] then add an undirected edge in G between a[i] and\r\na[i + 1] swap( a[i], a[i + 1] ) swapped = true end if end for until not\r\nswapped /* repeat the algorithm as long as swapped value is true. */ end\r\nprocedureFor a graph, an independent set is a set of vertices in a\r\ngraph, no two of which are adjacent (so there are no edges between\r\nvertices of an independent set). A maximum independent set is an\r\nindependent set which has maximum cardinality. Given the permutation,\r\nfind the size of the maximum independent set of graph , if we use such\r\npermutation as the premutation in procedure bubbleSortGraph.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <cmath>\n#include <ctime>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <queue>\n#include <deque>\n#include <list>\n#include <set>\n#include <map>\n\nusing namespace std;\n\n#define pb push_back\n#define mp make_pair\n#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#define sz(x) ((int)(x).size())\n\ntypedef long long ll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<int, int> pii;\n\nclass fenv_tree {\n  static int f(int x) { return x & -x; }\n  vi tr;\n  public:\n  fenv_tree(int n) : tr(n + 1, 0) {}\n  void relax(int x, int val) {\n    for (x++; x < sz(tr); x += f(x))\n      tr[x] = max(tr[x], val);\n  }\n  int get(int x) {\n    int res = 0;\n    for (x++; x > 0; x -= f(x))\n      res = max(res, tr[x]);\n    return res;\n  }\n};\n\nint main() {\n  #ifdef DEBUG\n  freopen(\".in\", \"r\", stdin);\n  freopen(\".out\", \"w\", stdout);\n  #endif\n\n  int n;\n  while (scanf(\"%d\", &n) >= 1) {\n    vi as(n);\n    for (int i = 0; i < n; i++)\n      scanf(\"%d\", &as[i]), as[i]--;\n\n    fenv_tree tr(n);\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n      int cans = tr.get(as[i]);\n      cans++;\n      ans = max(ans, cans);\n      tr.relax(as[i], cans);\n    }\n    printf(\"%d\\n\", ans);\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "dp"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Bubble Sort Graph.json",
    "editorial_link": "https://codeforces.com/blog/entry/8755",
    "editorial": "A good way to approach this problem is to notice that you can't build the graph. In worst case, the graph will be built in O(N2) complexity, which will time out. Also, notice that \"maximal independent set\" is a NP-Hard task, so even if you can build the graph you can't continue from there. So, the correct route to start is to think of graph's properties instead of building it. After sketching a little on the paper, you should find this property:\n\nLemma 1 Suppose we choose 2 indices i and j, such as i < j. We'll have an edge on the graph between vertices ai and aj if and only if ai > aj. We'll call that i and j form an inversion in the permutation.\n\nProof We assume we know the proof that bubble sort does sort correctly an array. To proof lemma 1, we need to show two things.\n\nEvery inversion will be swapped by bubble sort.\nFor each i < j when ai < aj, bubble sort will NOT swap this elements.\nTo proof 1, if bubble sort wouldn't swap an inversion, the sequence wouldn't be sorted. But we know that bubble sort always sorts a sequence, so all inversions will be swapped. Proofing 2 is trivial, just by looking at the code.\n\nSo far we've got how the graph G is constructed. Let's apply it in maximal independent set problem.\n\nLemma 2 A maximal independent set of graph G is a longest increasing sequence for permutation a.\n\nProof: Suppose we have a set of indices i1 < i2 < ... ik such as ai1, ai2, ..., aik form an independent set. Then, anyhow we'd choose d and e, there won't exist an edge between aid and aie. According to proof 1, this only happens when aid < aie. Hence, an independent set will be equivalent to an increasing sequence of permutation a. The maximal independent set is simply the maximal increasing sequence of permutation a.\n\nThe task reduces to find longest increasing sequence for permutation a. This is a classical problem which can be solved in O(N?*?logN). Here is an interesting discussion about how to do it.",
    "hint": []
}