{
    "link": "https://codeforces.com//contest/1229/problem/A",
    "problemId": "419075",
    "problem_idx": "A",
    "shortId": "1229A",
    "contest_number": "1229",
    "problem_submissions": {
        "E2": [
            66535857,
            61153989,
            61162985,
            61167725,
            61164541,
            61175914,
            73169874,
            73169292,
            67251679,
            61176348,
            61171644,
            61168314,
            61282274
        ],
        "C": [
            61156990,
            61139280,
            61133462,
            61168973,
            61144252,
            61152507,
            61152114,
            61139574,
            61138824,
            61139511,
            61146010,
            61154268,
            61140423,
            61146503,
            61146999,
            61163280,
            61145517,
            61140699
        ],
        "E1": [
            61153988,
            61160360,
            61157052,
            61164602,
            61165567,
            61168930,
            61169365,
            61171555,
            61161774,
            61282244,
            91100857
        ],
        "D": [
            61143107,
            61152425,
            61148639,
            61156853,
            61153552,
            61162885,
            61162936,
            61151975,
            61157442,
            61157392,
            61156341,
            61210834,
            61160744,
            61159221,
            61160510,
            61155666,
            61165039,
            61163062
        ],
        "B": [
            61128405,
            61132933,
            61165615,
            61142364,
            61131741,
            61140527,
            61129638,
            61133794,
            61131083,
            61134616,
            61139186,
            61132543,
            61141781,
            61139438,
            61135873,
            61137164,
            61151652
        ],
        "A": [
            61122880,
            61126193,
            61123596,
            61131920,
            61125660,
            61128699,
            61125244,
            61171108,
            61124176,
            61136192,
            61128585,
            61129134,
            61124511,
            61133577,
            61132336,
            61124059,
            61130617,
            61131139
        ],
        "F": [
            61198842,
            61176125,
            61453900,
            61180269,
            61179508,
            61398042
        ]
    },
    "name": "A. Marcin and Training Camp",
    "statement": "Marcin is a coach in his university. There are n students who want to\r\nattend a training camp. Marcin is a smart coach, so he wants to send\r\nonly the students that can work calmly with each other.Let\u2019s focus on\r\nthe students. They are indexed with integers from 1 to n. Each of them\r\ncan be described with two integers a_i and b_i; b_i is equal to the\r\nskill level of the i-th student (the higher, the better). Also, there\r\nare 60 known algorithms, which are numbered with integers from 0 to 59.\r\nIf the i-th student knows the j-th algorithm, then the j-th bit (2^j) is\r\nset in the binary representation of a_i. Otherwise, this bit is not\r\nset.Student x thinks that he is better than student y if and only if x\r\nknows some algorithm which y doesn\u2019t know. Note that two students can\r\nthink that they are better than each other. A group of students can work\r\ntogether calmly if no student in this group thinks that he is better\r\nthan everyone else in this group.Marcin wants to send a group of at\r\nleast two students which will work together calmly and will have the\r\nmaximum possible sum of the skill levels. What is this sum?\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <queue>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, int> pli;\ntypedef pair<ll, ll> pll;\ntypedef long double ld;\n#define mp make_pair\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\nconst int N = 7007;\nint n;\nll a[N];\nll b[N];\nint deg[N];\nint q[N];\nint topQ;\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%lld\", &a[i]);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%lld\", &b[i]);\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (i == j) continue;\n\t\t\tif ((a[i] ^ (a[i] & a[j])) == 0)\n\t\t\t\tdeg[i]++;\n\t\t}\n\tfor (int i = 0; i < n; i++)\n\t\tif (deg[i] == 0)\n\t\t\tq[topQ++] = i;\n\tfor (int i = 0; i < topQ; i++) {\n\t\tint v = q[i];\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (v == j) continue;\n\t\t\tif (deg[j] == 0) continue;\n\t\t\tif ((a[j] ^ (a[j] & a[v])) == 0) {\n\t\t\t\tdeg[j]--;\n\t\t\t\tif (deg[j] == 0)\n\t\t\t\t\tq[topQ++] = j;\n\t\t\t}\n\t\t}\n\t}\n\tif (topQ >= n - 1) {\n\t\tprintf(\"0\\n\");\n\t\treturn 0;\n\t}\n\tll ans = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tans += b[i];\n\tfor (int i = 0; i < topQ; i++)\n\t\tans -= b[q[i]];\n\tprintf(\"%lld\\n\", ans);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "graphs",
        "greedy"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Marcin and Training Camp.json",
    "editorial_link": "https://codeforces.com//blog/entry/70008",
    "editorial": "If there are multiple people with the same set of skills (i.e., the same\r\nvalues of ), it\u00e2\u0080\u0099s optimal to take each of them to the camp as they won\u00e2\u0080\u0099t\r\nthink they\u00e2\u0080\u0099re better than everyone else.Now consider a person which has\r\na different set of skills than everyone else. If they have a strictly\r\nsmaller set of skills than someone already in the group, they can safely\r\nbe included in the group. If they don\u00e2\u0080\u0099t, we can prove that they can\u00e2\u0080\u0099t\r\never be included in the group. This allows us to implement a simple\r\nsolution: first take all people that have an equal set of skills as\r\nsomeone else, and then include everyone else who has a strictly smaller\r\nset of skills than someone already in the group.\r\n"
}