{
    "link": "https://codeforces.com//contest/319/problem/C",
    "problemId": "3257",
    "problem_idx": "C",
    "shortId": "319C",
    "contest_number": "319",
    "problem_submissions": {
        "D": [
            3948106,
            3949160,
            3951651,
            3949707,
            3949637,
            3949775,
            3962727,
            3950884,
            4081627,
            3951853
        ],
        "C": [
            3946594,
            3947263,
            3948244,
            3948613,
            3948176,
            3945420,
            3945758,
            3945713,
            3946296,
            3946346,
            3946524,
            3946613,
            3946482,
            3945816,
            3947039,
            3946470
        ],
        "B": [
            3944659,
            3943682,
            3946080,
            3946044,
            3946423,
            3943572,
            3944269,
            3944276,
            3944495,
            3944694,
            3944617,
            3944629,
            3943999,
            3945031,
            3943612,
            3945716
        ],
        "A": [
            3942928,
            3944735,
            3943181,
            3943824,
            3943092,
            3942620,
            3942968,
            3942994,
            3942953,
            3943439,
            3942852,
            3943177,
            3942732,
            3944034,
            3944966,
            3944250
        ],
        "E": [
            4934160
        ]
    },
    "name": "C. Kalila and Dimna in the Logging Industry",
    "statement": "Kalila and Dimna are two jackals living in a huge jungle. One day they\r\ndecided to join a logging factory in order to make money. The manager of\r\nlogging factory wants them to go to the jungle and cut trees with\r\nheights . They bought a chain saw from a shop. Each time they use the\r\nchain saw on the tree number , they can decrease the height of this tree\r\nby one unit. Each time that Kalila and Dimna use the chain saw, they\r\nneed to recharge it. Cost of charging depends on the id of the trees\r\nwhich have been cut completely (a tree is cut completely if its height\r\nequal to 0). If the maximum id of a tree which has been cut completely\r\nis (the tree that have height in the beginning), then the cost of\r\ncharging the chain saw would be . If no tree is cut completely, Kalila\r\nand Dimna cannot charge the chain saw. The chainsaw is charged in the\r\nbeginning. We know that for each < , and and also and . Kalila and Dimna\r\nwant to cut all the trees completely, with minimum cost. They want you\r\nto help them! Will you?\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cassert>\n#include <ctime>\n#include <cstring>\n#include <string>\n#include <set>\n#include <map>\n#include <vector>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define fs first\n#define sc second\nconst double pi = acos(-1.0);\n\nconst int size = 200 * 1000;\n\nlong long a[size], b[size];\n\nlong long comp(pair <long long, long long> a, pair <long long, long long> b) {\n\tlong long d = b.fs - a.fs;\n\tlong long z = a.sc - b.sc;\n\treturn (d + z - 1) / z;\n}\n\nlong long ans[size];\n\nint main() {\n\tint n;\n\n\t//freopen(\"problem_c.in\", \"r\", stdin);\n\t//freopen(\"problem_c.out\", \"w\", stdout);\n\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%I64d\", &a[i]);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%I64d\", &b[i]);\n\tans[0] = b[0];\n\tvector <pair <long long, long long> > st;\n\tst.pb(mp(0, 0));\n\tfor (int i = 1; i < n; i++) {\n\t\tint lb = 0;\n\t\tint rb = int(st.size()) - 1;\n\t\tint mid;\n\t\twhile (lb < rb) {\n\t\t\tmid = (lb + rb + 1) / 2;\n\t\t\tif (st[mid].fs > a[i])\n\t\t\t\trb = mid - 1;\n\t\t\telse\n\t\t\t\tlb = mid;\n\t\t}\n\t\tans[i] = ans[st[lb].sc] + b[st[lb].sc] * (a[i] - 1) + b[i];\n\t\twhile (!st.empty() && comp(mp(ans[st.back().sc], b[st.back().sc]), mp(ans[i], b[i])) <= st.back().fs)\n\t\t\tst.pop_back();\n\t\tif (st.empty())\n\t\t\tst.pb(mp(0, i));\n\t\telse\n\t\t\tst.pb(mp(comp(mp(ans[st.back().sc], b[st.back().sc]), mp(ans[i], b[i])), i));\n\t}\n\n\tcout << ans[n - 1] << endl;\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "geometry"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Kalila and Dimna in the Logging Industry.json",
    "editorial_link": "https://codeforces.com//blog/entry/8166",
    "editorial": "This problem is equal to finding the minimum cost to cut the last tree\r\ncompletely. Because any cutting operation can be done with no cost\r\nafterward. Let be the minimum cost to cut the -th tree completely. Itâs\r\neasy to figure out that we can calculate if we know the index of the\r\nlast tree which has been cut completely (-th tree). Knowing this would\r\nbe equal to . So . Using the above information the problem has an easy\r\ndynamic programming solution in . Thereâs a known method which can be\r\nused to improve recursive relations with similar form. Itâs called\r\nConvex Hull Trick. You can read about it here.\r\n",
    "hint": []
}