{"link": "https://codeforces.com//contest/1067/problem/D", "problemId": "242830", "problem_idx": "D", "shortId": "1067D", "contest_number": "1067", "problem_submissions": {"E": [44797063, 44801350, 44801345, 44800256, 44807009, 44795862, 44802107, 44801174, 44802534, 44808036, 44807819, 44808903, 44813776, 44808812, 44823059, 44822826], "C": [44791919, 44798705, 44789846, 45703244, 44817690, 44796737, 44821755, 44819508, 44819482, 44798809, 44800641], "B": [44785395, 44790831, 44786324, 44787984, 44813565, 44800421, 44789408, 44792434, 44795239, 44792208, 44793600, 44795334, 44790580, 44792571, 44793492, 44790971, 44785468, 44794434], "A": [44781795, 44784467, 44782825, 44782486, 44802955, 44788563, 44785068, 44786748, 44791948, 44785790, 44788019, 44787518, 44785264, 44787093, 44892470, 44785358, 44786648, 44792812, 44788577], "D": [44810645, 44811277, 59968450, 44830180, 44927930, 44819755, 44819681, 44819351, 44807988, 44804123]}, "name": "D. Computer Game", "statement": "Ivan plays some computer game. There are n quests in the game. Each\r\nquest can be upgraded once, this increases the reward for its\r\ncompletion. Each quest has 3 parameters a_{i}, b_{i}, p_{i}: reward for\r\ncompleting quest before upgrade, reward for completing quest after\r\nupgrade (a_{i} < b_{i}) and probability of successful completing the\r\nquest.Each second Ivan can try to complete one quest and he will succeed\r\nwith probability p_{i}. In case of success Ivan will get the reward and\r\nopportunity to upgrade any one quest (not necessary the one he just\r\ncompleted). In case of failure he gets nothing. Quests after\r\ncompleting.Ivan has t seconds. He wants to maximize expected value of\r\nhis total gain after t seconds. Help him to calculate this value.\r\n", "solutions": ["#ifndef BZ\n#pragma GCC optimize \"-O3\"\n#endif\n#include <bits/stdc++.h>\n\n#define ALL(v) (v).begin(), (v).end()\n#define rep(i, l, r) for (int i = (l); i < (r); ++i)\n\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\nusing namespace std;\n\n\n/*\nll pw(ll a, ll b) {\n\tll ans = 1; while (b) {\n\t\twhile (!(b & 1)) b >>= 1, a = (a * a) % MOD;\n\t\tans = (ans * a) % MOD, --b;\n\t} return ans;\n}\n*/\n\nconst int MAXN = 120000;\n\nint n;\nll t;\n\nld p[MAXN];\nll a[MAXN];\nvector<pair<ld, ld> > vv;\nld br[MAXN];\n\nld eps1 = 1e-12;\n\nbool bad(pair<ld, ld> a, pair<ld, ld> b, pair<ld, ld> c) {\n\treturn (b.second - a.second) / (a.first - b.first) >= (c.second - b.second) / (b.first - c.first);\n}\n\nint main() {\n\tcout.setf(ios::fixed);\n\tcout.precision(20);\n\tscanf(\"%d%lld\", &n, &t);\n\tld b = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tll B;\n\t\tscanf(\"%lld%lld%Lf\", a + i, &B, p + i);\n\t\tb = max(b, B * p[i]);\n\t}\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (p[i] != 0) {\n\t\t\tvv.emplace_back(1 - p[i], b - p[i] * a[i]);\n\t\t}\n\t}\n\tif (vv.size() == 0) {\n\t\tcout << 0 << \"\\n\";\n\t\treturn 0;\n\t}\n\tsort(ALL(vv));\n\treverse(ALL(vv));\n\tvector<pair<ld, ld>> st;\n\tfor (auto p: vv) {\n\t\tif (!st.empty() && abs(st.back().first - p.first) <= eps1) {\n\t\t\tif (st.back().second < p.second)\n\t\t\t\tcontinue;\n\t\t\tst.pop_back();\n\t\t}\n\t\twhile (st.size() >= 2 && bad(st[st.size() - 2], st[st.size() - 1], p))\n\t\t\tst.pop_back();\n\t\tst.push_back(p);\n\t}\n\tld k = 0;\n\tint now = 0;\n\tfor (int i = 0; i + 1 < st.size(); ++i)\n\t\tbr[i] = (st[i + 1].second - st[i].second) / (st[i].first - st[i + 1].first);\n\tll tmpt = t;\n\twhile (t) {\n\t\twhile (now + 1 < st.size() && br[now] <= k)\n\t\t\t++now;\n\t\tvector<pair<ld, ld>> go;\n\t\tgo.push_back(st[now]);\n\t\tfor (int i = 0; i < 40; ++i)\n\t\t\tgo.emplace_back(go.back().first * go.back().first, go.back().second * (1 + go.back().first));\n\t\tfor (int i = go.size() - 1; i >= 0; --i) {\n\t\t\tif ((1ll << i) <= t && (now + 1 == st.size() || go[i].first * k + go[i].second <= br[now])) {\n\t\t\t\tt -= (1ll << i);\n\t\t\t\tk = go[i].first * k + go[i].second;\n\t\t\t}\n\t\t}\n\t\tif (t) {\n\t\t\tk = go[0].first * k + go[0].second;\n\t\t\t--t;\n\t\t}\n\t}\n\tcout << tmpt * b - k << \"\\n\";\n\treturn 0;\n}\n\n\n"], "input": "", "output": "", "tags": ["dp", "greedy", "math", "probabilities"], "dificulty": "3100", "interactive": false}