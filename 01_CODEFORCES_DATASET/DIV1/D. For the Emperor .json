{
    "link": "https://codeforces.com//contest/2046/problem/D",
    "problemId": "3064642",
    "problem_idx": "D",
    "shortId": "2046D",
    "contest_number": "2046",
    "problem_submissions": {
        "E2": [
            294584009,
            294914447,
            299392707
        ],
        "E1": [
            294583764,
            294575583,
            294575752,
            294582430,
            294565503,
            294626979,
            294869963,
            294674514,
            294674138,
            294611999,
            294672171,
            295181016,
            299301861,
            294579122,
            294609733
        ],
        "D": [
            294560152,
            294564191,
            294566638,
            294575690,
            294573167,
            294577461,
            294570961,
            294577018,
            294582440,
            294580055,
            294581279,
            294580878,
            294578858,
            294578559,
            294582493,
            294576385,
            294578827
        ],
        "C": [
            294540710,
            294545229,
            294545966,
            294548359,
            294558363,
            294545738,
            294550008,
            294552252,
            294555169,
            294551693,
            294558653,
            294550648,
            294551477,
            294560374,
            294559914,
            294555355,
            294557938,
            294552127,
            294543297,
            294557586
        ],
        "B": [
            294535038,
            294535101,
            294537375,
            294540562,
            294536849,
            294536519,
            294541688,
            294539018,
            294541654,
            294536164,
            294543153,
            294539414,
            294540802,
            294537409,
            294549010,
            294540274,
            294543427,
            294535624,
            294535094,
            294536775
        ],
        "A": [
            294532826,
            294532846,
            294539095,
            294533971,
            294533241,
            294533253,
            294534636,
            294533446,
            294534152,
            294532988,
            294537957,
            294533256,
            294533123,
            294534271,
            294537609,
            294533346,
            294537414,
            294532885,
            294532806,
            294533598
        ],
        "F2": [
            301103610,
            294606357
        ],
        "F1": [
            301085708,
            295825018,
            294574079
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136908",
    "editorial": "We will compress the graph into strongly connected components. Inside a component, each runner can move between any pair of vertices and thus visit all. We will now solve the problem for a directed acyclic graph.\n\nWe will check for the existence of an answer. Suppose all runners already know the winning plan, and we will try to send them out so that each vertex is visited at least once. To do this, it is necessary to decompose the graph into paths such that:\n\neach vertex belongs to at least one path;\nno more than a[i]\n paths start at each vertex (where a[i]\n is the number of runners initially located at the vertex);\npaths may intersect.\nTake the source s\n and the sink t\n, and now a path can be represented as a sequence s\n, u1\n, ..., uk\n, t\n.\n\nWe will divide u\n into uin\n and uout\n and will consider that a vertex u\n belongs to least one transition from uin\n to uout\n. We will draw the following edges:\n\nfrom s\n to uin\n with capacity cap=a[u]\n;\nfrom uin\n to uout\n with cap=inf\n and the condition of flow through the edge f?1\n;\nfrom uout\n to t\n with cap=inf\n;\nfrom uout\n to vin\n with cap=inf\n for all edges (u, v) in the original graph.\n  This is equivalent to finding a flow with constraints in this graph.\n\nTo do this, we will create a dummy source s?\n and sink t?\n, and now for each edge (uin,uout)\n with flow through it 1?f?inf\n, we will make the following replacements by drawing edges:\n\nfrom uin\n to uout\n with cap=inf?1\n;\nfrom s?\n to uout\n with cap=1\n;\nfrom uin\n to t?\n with cap=1\n;\nfrom t\n to s\n with cap=inf\n.\nFinding a flow that satisfies the constraints is equivalent to finding the maximum flow from s?\n to t?\n, and if it equals the number of vertices, then the answer exists; otherwise, we can output ?1\n at this step.\n\n \n\nNow we minimize the number of runners who initially know the plan. Note that:\n\nit makes no sense for runners to move until they know the plan;\nit makes no sense to pass the plan to more than one runner from one city.\nWe try to take this into account when constructing. Instead of adding edges from the source to uin\n, we will do the following:\n\ncreate a vertex ucnt\n to control the number of runners and draw edges:\nfrom s\n to ucnt\n with cap=a[u]\n;\nfrom ucnt\n to uout\n with cap=a[u]\n;\nfrom ucnt\n to uin\n with cap=1\n, cost=1\n.\nassign zero cost to all other edges.\n  This is equivalent to ensuring that all a[i]\n runners learn the plan, but if no one comes to our city, we will personally tell exactly one runner from this number, paying cost=1\n for that person.\n\nThe answer to the problem is the minimum cost of the maximum flow from s?\n to t?\n with this graph construction. The proof follows from the graph construction.\n\nMCMF can be considered as O(n2m2)\n or O(n3m)\n for any graphs, but it is worth noting that the flow value f\n is limited to n\n, and we have a solution in O(fnm)\n using Ford-Bellman or O(fmlogn)\n using Dijkstra's algorithm with potentials.\n\nInterestingly, we note that as a result, we obtained 3n\n vertices and m+7n\n edges. With careful implementation, MCMF fits well within TL.",
    "name": "D. For the Emperor ",
    "statement": "In Ancient Rome, a plan to defeat the barbarians was developed, but for\r\nits implementation, each city must be informed about it.The northern\r\npart of the Roman Empire consists of n cities connected by m one-way\r\nroads. Initially, the i-th city has a_i messengers, and each messenger\r\ncan freely move between cities following the existing roads. A messenger\r\ncan carry a copy of the plan with him and inform the cities he visits,\r\nand can make unlimited copies for other messengers in the city he is\r\ncurrently in.At the start, you will produce some number of plans and\r\ndeliver them to messengers of your choice. Your goal is to make sure\r\nthat every city is visited by a messenger with a plan. Find the smallest\r\nnumber of the plans you need to produce originally, so that the\r\nmessengers will deliver them to every city, or determine that it is\r\nimpossible to do so at all.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\u00a0using i64 = long long;using u64 = unsigned long long;using u32 = unsigned;using u128 = unsigned __int128;\u00a0template<class T>struct MinCostFlow {    struct _Edge {        int to;        T cap;        T cost;        _Edge(int to_, T cap_, T cost_) : to(to_), cap(cap_), cost(cost_) {}    };    int n;    std::vector<_Edge> e;    std::vector<std::vector<int>> g;    std::vector<T> h, dis;    std::vector<int> pre;    bool dijkstra(int s, int t) {        dis.assign(n, std::numeric_limits<T>::max());        pre.assign(n, -1);        std::priority_queue<std::pair<T, int>, std::vector<std::pair<T, int>>, std::greater<std::pair<T, int>>> que;        dis[s] = 0;        que.emplace(0, s);        while (!que.empty()) {            T d = que.top().first;            int u = que.top().second;            que.pop();            if (dis[u] != d) {                continue;            }            for (int i : g[u]) {                int v = e[i].to;                T cap = e[i].cap;                T cost = e[i].cost;                if (cap > 0 && dis[v] > d + h[u] - h[v] + cost) {                    dis[v] = d + h[u] - h[v] + cost;                    pre[v] = i;                    que.emplace(dis[v], v);                }            }        }        return dis[t] != std::numeric_limits<T>::max();    }    MinCostFlow() {}    MinCostFlow(int n_) {        init(n_);    }    void init(int n_) {        n = n_;        e.clear();        g.assign(n, {});    }    void addEdge(int u, int v, T cap, T cost) {        g[u].push_back(e.size());        e.emplace_back(v, cap, cost);        g[v].push_back(e.size());        e.emplace_back(u, 0, -cost);    }    std::pair<T, T> flow(int s, int t) {        T flow = 0;        T cost = 0;        h.assign(n, 0);        while (dijkstra(s, t)) {            for (int i = 0; i < n; ++i) {                h[i] += dis[i];            }            T aug = std::numeric_limits<int>::max();            for (int i = t; i != s; i = e[pre[i] ^ 1].to) {                aug = std::min(aug, e[pre[i]].cap);            }            for (int i = t; i != s; i = e[pre[i] ^ 1].to) {                e[pre[i]].cap -= aug;                e[pre[i] ^ 1].cap += aug;            }            flow += aug;            cost += aug * h[t];        }        return std::make_pair(flow, cost);    }    struct Edge {        int from;        int to;        T cap;        T cost;        T flow;    };    std::vector<Edge> edges() {        std::vector<Edge> a;        for (int i = 0; i < e.size(); i += 2) {            Edge x;            x.from = e[i + 1].to;            x.to = e[i].to;            x.cap = e[i].cap + e[i + 1].cap;            x.cost = e[i].cost;            x.flow = e[i + 1].cap;            a.push_back(x);        }        return a;    }};\u00a0constexpr int N = 200;constexpr int inf = 1E5;\u00a0void solve() {    int n, m;    std::cin >> n >> m;        std::vector<int> a(n);    for (int i = 0; i < n; i++) {        std::cin >> a[i];    }        std::vector g(n, std::bitset<N> {});    for (int i = 0; i < n; i++) {        g[i].set(i);    }        std::vector<std::array<int, 2>> edges(m);    for (int i = 0; i < m; i++) {        int u, v;        std::cin >> u >> v;        u--;        v--;        g[u].set(v);        edges[i] = {u, v};    }        for (int k = 0; k < n; k++) {        for (int i = 0; i < n; i++) {            if (g[i][k]) {                g[i] |= g[k];            }        }    }        std::vector<int> bel(n, -1);    int cnt = 0;    for (int i = 0; i < n; i++) {        for (int j = 0; j < i; j++) {            if (g[i] == g[j]) {                bel[i] = bel[j];                break;            }        }        if (bel[i] == -1) {            bel[i] = cnt++;        }    }        std::vector<int> sum(cnt);    for (int i = 0; i < n; i++) {        sum[bel[i]] += a[i];    }        for (auto &[u, v] : edges) {        u = bel[u];        v = bel[v];    }    n = cnt;        MinCostFlow<int> G(n * 3 + 4);    int S = n * 3, T = S + 1;    int S0 = T + 1, T0 = S0 + 1;        int ans = 0;    std::vector<int> cost(n);    for (int i = 0; i < n; i++) {        cost[i] = sum[i] > 0 ? 1 : inf;    }        int must = 0;    for (int i = 0; i < n; i++) {        G.addEdge(S0, 3 * i + 1, 1, 0);        G.addEdge(3 * i, T0, 1, 0);        G.addEdge(3 * i + 1, 3 * i, 1, cost[i]);        must++;                G.addEdge(3 * i, 3 * i + 1, inf, 0);        G.addEdge(3 * i + 1, 3 * i + 2, inf, 0);                G.addEdge(S0, 3 * i + 2, 1, 0);        G.addEdge(3 * i + 1, T0, 1, 0);        must++;                G.addEdge(S, 3 * i + 1, sum[i], 0);                G.addEdge(3 * i + 2, T, inf, 0);    }    G.addEdge(T, S, inf, 0);    for (auto [u, v] : edges) {        if (u != v) {            G.addEdge(3 * u + 2, 3 * v, inf, 0);        }    }    {        auto [flow, cost] = G.flow(S0, T0);        if (flow != must) {            std::cout << -1 << \"\\n\";            return;        }        ans += cost;    }        if (ans > n) {        ans = -1;    }    std::cout << ans << \"\\n\";}\u00a0int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "flows",
        "graphs"
    ],
    "dificulty": "3100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. For the Emperor .json"
}