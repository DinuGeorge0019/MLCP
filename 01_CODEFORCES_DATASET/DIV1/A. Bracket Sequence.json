{"link": "https://codeforces.com//contest/223/problem/A", "problemId": "1796", "problem_idx": "A", "shortId": "223A", "contest_number": "223", "problem_submissions": {"D": [2201204, 2227460, 2224793], "B": [2192755, 2191107, 2190792, 2191517, 2191782, 2192823, 2191897, 2192037, 2190839, 2192321, 2191711, 2193472, 2192118, 2192281, 2191191], "C": [2191764, 2193929, 2191887, 2192482, 2192857, 2191011, 2194134, 2193589, 2192831, 2190279, 2193227, 2192079, 2193334, 2194145, 2192669], "A": [2189710, 2189450, 2189566, 2189994, 2190232, 2194735, 2190245, 2190504, 2195271, 2194162, 2190423, 2195205, 2191251, 2190814, 2195342], "E": [17753349, 2235305]}, "name": "A. Bracket Sequence", "statement": "A is a string, containing only characters \"\", \"\", \"\" and \"\".A is a\r\nbracket sequence that can be transformed into a correct arithmetic\r\nexpression by inserting characters \"\" and \"\" between the original\r\ncharacters of the sequence. For example, bracket sequences \"\", \"\" are\r\ncorrect (the resulting expressions are: \"\", \"\"), and \"\" and \"\" are not.\r\nA of string (where is the length of string ) is the string . .You are\r\ngiven a bracket sequence, not necessarily correct. Find its substring\r\nwhich is a correct bracket sequence and contains as many opening square\r\nbrackets as possible.\r\n", "solutions": ["// @author peter50216\n// #includes {{{\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<assert.h>\n#include<stdarg.h>\n#include<time.h>\n#include<limits.h>\n#include<ctype.h>\n#include<string>\n#include<map>\n#include<set>\n#include<queue>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n// }}}\n\nchar in[101000];\nint stk[101000],sc;\nint cnt[101000];\nint pre[101000];\nint main(){\n    int i;\n    scanf(\"%s\",in);\n    int n=strlen(in);\n    cnt[0]=0;\n    for(i=0;i<n;i++)pre[i]=-1;\n    for(i=1;i<=n;i++)cnt[i]=cnt[i-1]+(in[i-1]=='['?1:0);\n    for(i=0;i<n;i++){\n        if(in[i]=='('||in[i]=='['){\n            stk[sc++]=i;\n        }else{\n            if(sc==0||(in[stk[sc-1]]=='('&&in[i]==']')\n                    ||(in[stk[sc-1]]=='['&&in[i]==')')){\n                sc=0;\n                continue;\n            }\n            pre[i]=stk[sc-1];\n            if(pre[i]>0&&pre[pre[i]-1]!=-1){\n                pre[i]=pre[pre[i]-1];\n            }\n            sc--;\n        }\n    }\n    int ma=0,ml=0,mr=-1;\n    for(i=0;i<n;i++)if(pre[i]!=-1&&ma<cnt[i+1]-cnt[pre[i]]){\n        ma=cnt[i+1]-cnt[pre[i]];\n        ml=pre[i];mr=i;\n    }\n    printf(\"%d\\n\",ma);\n    for(i=ml;i<=mr;i++)printf(\"%c\",in[i]);\n    puts(\"\");\n}\n// vim: fdm=marker:commentstring=\\ \\\"\\ %s:nowrap:autoread\n\n"], "input": "", "output": "", "tags": ["data structures", "expression parsing", "implementation"], "dificulty": "1700", "interactive": false}