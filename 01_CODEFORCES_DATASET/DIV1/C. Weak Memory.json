{
    "link": "https://codeforces.com//contest/187/problem/C",
    "problemId": "1323",
    "problem_idx": "C",
    "shortId": "187C",
    "contest_number": "187",
    "problem_submissions": {
        "B": [
            1679215,
            1673469,
            1673732,
            1673153,
            1675030,
            1674956,
            1675111,
            1673806,
            1679398,
            1676105,
            1674092,
            1674719,
            1674215,
            1676107,
            1674271,
            1673982,
            1674600,
            1674313,
            1673997,
            1674141
        ],
        "E": [
            1678609,
            1679989
        ],
        "D": [
            1676469,
            1678199,
            1678043,
            2407052,
            1678555,
            1679755,
            1678435,
            1704251,
            1703901,
            1680981,
            1679861,
            1687546,
            1679340
        ],
        "C": [
            1674683,
            1675935,
            1675188,
            1676560,
            1676489,
            1677858,
            1674899,
            1676989,
            1677275,
            1675430,
            1676217,
            1675632,
            1674653,
            1675726,
            1676281,
            1676115,
            1676408,
            1676632,
            1676653
        ],
        "A": [
            1672823,
            1672616,
            1673643,
            1673994,
            1673278,
            1672815,
            1672696,
            1672795,
            1675020,
            1673285,
            1673012,
            1672803,
            1672821,
            1672657,
            1672773,
            1673154,
            1672871,
            1672576,
            1672702
        ]
    },
    "name": "C. Weak Memory",
    "statement": "is qualified for ICPC World Finals in Harbin, China. After team\r\nexcursion to Sun Island Park for snow sculpture art exposition, PMP\r\nshould get back to buses before they leave. But the park is really big\r\nand he does not know how to find them.The park has intersections\r\nnumbered through . There are bidirectional roads that connect some pairs\r\nof these intersections. At intersections, ICPC volunteers are helping\r\nthe teams and showing them the way to their destinations. Locations of\r\nvolunteers are fixed and distinct.When PMP asks a volunteer the way to\r\nbus station, he/she can tell him the whole path. But the park is fully\r\ncovered with ice and snow and everywhere looks almost the same. So PMP\r\ncan only memorize at most intersections after each question (excluding\r\nthe intersection they are currently standing). He always tells\r\nvolunteers about his weak memory and if there is no direct path of\r\nlength (in number of roads) at most that leads to bus station, the\r\nvolunteer will guide PMP to another volunteer (who is at most\r\nintersections away, of course). ICPC volunteers know the area very well\r\nand always tell PMP the best way. So if there exists a way to bus\r\nstations, PMP will definitely find it.PMP’s initial location is\r\nintersection and the buses are at intersection . There will always be a\r\nvolunteer at intersection . Your job is to find out the minimum which\r\nguarantees that PMP can find the buses.\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<assert.h>\n#include<stdarg.h>\n#include<time.h>\n#include<string>\n#include<map>\n#include<set>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nint hv[101000];\nvector<int> ed[101000];\nint dis[101000];\nint ss,ee;\nint que[101000],qs,qe;\nbool inq[101000];\nint n;\ninline int pop(){\n    int a=que[qs++];\n    if(qs==101000)qs=0;\n    inq[a]=0;\n    return a;\n}\ninline void push(int x){\n    if(inq[x])return;\n    inq[x]=1;\n    que[qe++]=x;\n    if(qe==101000)qe=0;\n}\nconst int INF=1000000000;\ninline int f(int dd){\n    qs=qe=0;\n    push(ss);\n    int i;\n    for(i=0;i<n;i++)dis[i]=INF;\n    dis[ss]=0;\n    while(qs!=qe){\n        int np=pop();\n        if(dis[np]==dd)continue;\n        for(i=0;i<ed[np].size();i++){\n            int y=ed[np][i];\n            if(dis[y]>dis[np]+1){\n                dis[y]=dis[np]+1;\n                if(hv[y])dis[y]=0;\n                push(y);\n            }\n        }\n    }\n    if(dis[ee]!=INF)return 1;\n    return 0;\n}\nint main(){\n    int m,k,i,j;\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(i=0;i<k;i++){\n        int x;\n        scanf(\"%d\",&x);\n        hv[x-1]=1;\n    }\n    while(m--){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        a--;b--;\n        ed[a].push_back(b);\n        ed[b].push_back(a);\n    }\n    scanf(\"%d%d\",&ss,&ee);\n    ss--;ee--;\n    int l=1,r=n;\n    while(l<r){\n        int m=(l+r)/2;\n        if(f(m))r=m;\n        else l=m+1;\n    }\n    if(f(l))printf(\"%d\\n\",l);\n    else puts(\"-1\");\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dsu"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Weak Memory.json",
    "editorial_link": "https://codeforces.com/blog/entry/4540",
    "editorial": "There were many different correct approaches to this problem during the contest. But I will explain authors solution.\n\nFirst we can use binary search over the value of q. Now for a fixed q we want to check s-t connectivity.\n\nLet K be the set of all intersections with volunteers union s and t. One can use BFS from each k?K, one by one. Then build a graph G with vertices K. For each two vertices k1,k2?K add an edge between them, if their shortest distance is less than or equal to q. Finally use any path finding algorithm to check the connectivity. Unfortunately this solution has time (and space) complexity of O(|K|*m) which is not good enough.\n\nWe can optimize the above solution by initiating BFS from all k?K at once. In other words during the initialization step in BFS algorithm, we push all these vertices in the queue with distance 0. Each element in the queue also maintains its source (i.e. the source it is originating from). In BFS each time we have have a vertex u with source su and we want to set the minimum distance to a vertex v that is already set from a different path with source sv, we connect su and sv in G if d(u)+d(v)+1<= q, where d(x) denotes length of the shortest path from a vertex in K to x. As we are only dealing with connectivity, this approach is correct. (Proof of correctness is left as an exercise)\n\nBFS takes O(m) time and we add at most O(m) edges to G, so the overall complexity is O(m) for a fixed q. As we used binary search to find the smallest q, we can solve the problem in O(m*logn).",
    "hint": []
}