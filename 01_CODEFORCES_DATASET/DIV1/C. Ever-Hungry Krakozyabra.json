{"link": "https://codeforces.com//contest/833/problem/C", "problemId": "116221", "problem_idx": "C", "shortId": "833C", "contest_number": "833", "problem_submissions": {"E": [29083224, 29083091], "D": [29016770, 29016294, 29011617, 29013958, 29009345, 29244474, 29205082, 29015261, 29017136, 29012336, 29008041, 29014134, 29019073], "C": [29008615, 29008359, 29015249, 29038532, 29038473, 29013146, 29010690, 29004990, 29014257, 29023306, 29012381, 29014235, 29007517, 29015632, 29016681], "B": [29000858, 28999434, 29001150, 29001528, 29002115, 29002974, 29016798, 29017661, 29016482, 29001800, 29005534, 29010788, 29005299, 29004648, 29003078, 29002266, 29014197, 29004174, 28997722], "A": [28994520, 28994190, 28994134, 28993034, 28994420, 28995369, 28994393, 28997116, 29011489, 28992915, 28994389, 28993845, 28993595, 28996557, 28993837, 28993225, 28994120, 28993719, 28995865, 28994510]}, "name": "C. Ever-Hungry Krakozyabra", "statement": "Recently, a wild Krakozyabra appeared at Jelly Castle. It is, truth to\r\nbe said, always eager to have something for dinner.Its favorite meal is\r\nnatural numbers (typically served with honey sauce), or, to be more\r\nprecise, the zeros in their corresponding decimal representations. As\r\nfor other digits, Krakozyabra dislikes them; moreover, they often cause\r\nit indigestion! So, as a necessary precaution, Krakozyabra prefers to\r\nsort the digits of a number in non-descending order before proceeding to\r\nfeast. Then, the leading zeros of the resulting number are eaten and the\r\nremaining part is discarded as an .For example, if Krakozyabra is to\r\nhave the number for dinner, its would be the number .Slastyona is not\r\nreally fond of the idea of Krakozyabra living in her castle. Hovewer,\r\nher natural hospitality prevents her from leaving her guest without\r\nfood. Slastyona has a range of natural numbers from to , which she is\r\ngoing to feed the guest with. Help her determine how many distinct are\r\ngoing to be discarded by Krakozyabra by the end of the dinner.\r\n", "solutions": ["//PRZEMYSL ASSERTY\n\n//SPRAWDZ CORNER CASE'Y, MINIMALNE I MAKSYMALNE WEJ\u015aCIE I WYJ\u015aCIE\n\n//MODULO = 1\n\n//while (clock()<=69*CLOCKS_PER_SEC)\n\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nconst long long inf=(long long)1000*1000*1000*1000*1000*1007;\nconst int d=19;\n\nlong long a, b;\n\nint ile[d+7];\nint dol[d+7];\nint gor[d+7];\nint pom[d+7];\nint pom2[d+7];\n\nint wyn;\n\nint check()\n{\n\tfor (int i=0; i<=9; i++)\n\t\tpom[i]=ile[i];\n\tfor (int i=0; i<d; i++)\n\t{\n\t\tif (dol[i]==gor[i])\n\t\t{\n\t\t\tif (pom[dol[i]])\n\t\t\t\tpom[dol[i]]--;\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t\tif (i+1==d)\n\t\t\t\treturn 1;\n\t\t\tcontinue;\n\t\t}\n\t\tfor (int j=dol[i]+1; j<gor[i]; j++)\n\t\t\tif (pom[j])\n\t\t\t\treturn 1;\n\t\t\n\t\tif (pom[dol[i]])\n\t\t{\n\t\t\tint ok=1;\n\t\t\t\n\t\t\tfor (int j=0; j<=9; j++)\n\t\t\t\tpom2[j]=pom[j];\n\t\t\tpom2[dol[i]]--;\n\t\t\tfor (int j=i+1; j<d; j++)\n\t\t\t{\n\t\t\t\tfor (int l=dol[j]+1; l<=9; l++)\n\t\t\t\t\tif (pom2[l])\n\t\t\t\t\t\treturn 1;\n\t\t\t\tif (!pom2[dol[j]])\n\t\t\t\t{\n\t\t\t\t\tok=0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tpom2[dol[j]]--;\n\t\t\t}\n\t\t\tif (ok)\n\t\t\t\treturn 1;\n\t\t}\n\t\tif (pom[gor[i]])\n\t\t{\n\t\t\tint ok=1;\n\t\t\t\n\t\t\tfor (int j=0; j<=9; j++)\n\t\t\t\tpom2[j]=pom[j];\n\t\t\tpom2[gor[i]]--;\n\t\t\tfor (int j=i+1; j<d; j++)\n\t\t\t{\n\t\t\t\tfor (int l=0; l<gor[j]; l++)\n\t\t\t\t\tif (pom2[l])\n\t\t\t\t\t\treturn 1;\n\t\t\t\tif (!pom2[gor[j]])\n\t\t\t\t{\n\t\t\t\t\tok=0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tpom2[gor[j]]--;\n\t\t\t}\n\t\t\tif (ok)\n\t\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n}\n\nvoid licz(int v, int ost)\n{\n\tif (v==d)\n\t{\n\t\twyn+=check();\n\t\treturn;\n\t}\n\tile[ost]++;\n\tlicz(v+1, ost);\n\tile[ost]--;\n\tif (ost<9)\n\t\tlicz(v, ost+1);\n}\n\nint main()\n{\n\tscanf(\"%lld%lld\", &a, &b);\n\tfor (int i=0; i<d; i++)\n\t{\n\t\tdol[i]=(a%10);\n\t\ta/=10;\n\t\tgor[i]=(b%10);\n\t\tb/=10;\n\t}\n\treverse(dol, dol+d);\n\treverse(gor, gor+d);\n\tlicz(0, 0);\n\tprintf(\"%d\\n\", wyn);\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "combinatorics", "greedy", "math"], "dificulty": "2700", "interactive": false}