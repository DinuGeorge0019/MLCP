{"link": "https://codeforces.com//contest/380/problem/E", "problemId": "5533", "problem_idx": "E", "shortId": "380E", "contest_number": "380", "problem_submissions": {"A": [5676030, 5677444, 5667291, 5667878, 5667181, 5667622, 5667888, 5676828, 5666938, 5673846, 5670879, 5671395, 5669327, 5667863, 5667948, 5667971], "B": [5675030, 5677446, 5675293, 5674969, 5675596, 5677558], "E": [5673042, 5677453, 5674068, 5676554, 5676509, 5676152, 5673443, 5674960, 5673247, 5668823, 5671385, 5675127, 5674081, 6260429, 6260427, 6260419, 6260414, 6260386, 6260376, 6260372], "C": [5670663, 5677450, 5668629, 5669869, 5669624, 5673114, 5670447, 5670550, 5670519, 5668457, 5669925, 5671669, 5675539, 5669908, 5671123], "D": [5669162, 5677451, 5672118, 5672469, 5675471, 5671822, 5674127, 5674948, 5672625, 5672722, 5676148, 5674145, 5674258, 5673843, 5674777]}, "name": "E. Sereja and Dividing", "statement": "Let\u2019s assume that we have a sequence of doubles and a double variable .\r\nYou are allowed to perform the following two-staged operation: choose an\r\nindex of the sequence element ; consecutively perform assignments: .\r\nLet\u2019s use function to represent the largest value that can be obtained\r\nfrom variable , using the described operation any number of times and\r\nsequence .Sereja has sequence . Help Sereja calculate sum: . Record\r\nrepresents a sequence containing the elements in brackets in the given\r\norder. To avoid problems with precision, please, print the required sum\r\ndivided by .\r\n", "solutions": ["#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <bitset>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\nint N;\nint a[300010];\nvector <pair <int, int> > v;\nset <int> s;\n\ndouble get_coef(int x){\n    int i,prev,cnt;\n    double two,c1=0.0,c2=0.0;\n    \n    s.insert(x);\n    \n    __typeof(s.begin()) itr = s.find(x);\n    two = 1.0;\n    cnt = 0;\n    prev = x;\n    while(cnt < 50){\n        itr--;\n        int y = (*itr);\n        c1 += (prev - y) * two;\n        if(y == -1) break;\n        cnt++;\n        two /= 2.0;\n        prev = y;\n    }\n    \n    itr = s.find(x);\n    two = 1.0;\n    cnt = 0;\n    prev = x;\n    while(cnt < 50){\n        itr++;\n        int y = (*itr);\n        c2 += (y - prev) * two;\n        if(y == N) break;\n        cnt++;\n        two /= 2.0;\n        prev = y;\n    }\n    \n    // cout << c1 << ' ' << c2 << endl;\n        \n    return c1 * c2;\n}\n\nint main(void){\n    int i,j;\n    \n    cin >> N;\n    REP(i,N) scanf(\"%d\", &a[i]);\n    \n    REP(i,N) v.push_back(make_pair(-a[i], i));\n    sort(v.begin(),v.end());\n    \n    s.insert(-1);\n    s.insert(N);\n    \n    double ans = 0.0;\n    REP(i,N){\n        double x = get_coef(v[i].second);\n        ans += x * a[v[i].second];\n    }\n    \n    ans = ans / 2.0 / N / N;\n    printf(\"%.9f\\n\", ans);\n    \n    return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures"], "dificulty": "2600", "interactive": false}