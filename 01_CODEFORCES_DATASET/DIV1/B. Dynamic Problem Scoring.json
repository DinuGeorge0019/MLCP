{
    "link": "https://codeforces.com//contest/806/problem/B",
    "problemId": "105596",
    "problem_idx": "B",
    "shortId": "806B",
    "contest_number": "806",
    "problem_submissions": {
        "E": [
            26946399,
            26946353,
            26942942,
            26940751,
            26976136,
            26943065,
            26942598,
            26942187,
            26937843,
            26947143,
            27001343,
            26946488,
            26943631,
            26951183,
            26939699,
            26944777
        ],
        "D": [
            26938120,
            26934427,
            26936263,
            26937600,
            26934513,
            26936339,
            26937621,
            26938327,
            26939404,
            26938853,
            26942391,
            26940455,
            26938860,
            26938974,
            26941503,
            26941670
        ],
        "B": [
            26933193,
            26932004,
            26938489,
            26932467,
            26931704,
            26932365,
            26935492,
            26932113,
            26930780,
            26942817,
            26930285,
            26932725,
            26943302,
            26937682,
            26931932,
            26932598
        ],
        "C": [
            26931766,
            26942392,
            26933099,
            26934784,
            26933629,
            26933365,
            26933930,
            26931141,
            26934600,
            26930447,
            26934117,
            26934951,
            26929917,
            26933809,
            26935513,
            26934671
        ],
        "A": [
            26928049,
            26926811,
            26929039,
            26927072,
            26927004,
            26926681,
            26927002,
            26927962,
            26928737,
            26927722,
            26927311,
            26932013,
            26927300,
            26928724,
            26926850,
            26927034,
            26927665,
            26929077
        ]
    },
    "name": "B. Dynamic Problem Scoring",
    "statement": "Vasya and Petya take part in a Codeforces round. The round lasts for two\r\nhours and contains five problems.For this round the dynamic problem\r\nscoring is used. If you were lucky not to participate in any Codeforces\r\nround with dynamic problem scoring, here is what it means. The maximum\r\npoint value of the problem depends on the ratio of the number of\r\nparticipants who solved the problem to the total number of round\r\nparticipants. Everyone who made at least one submission is considered to\r\nbe participating in the round.Pay attention to the range bounds. For\r\nexample, if 40 people are taking part in the round, and 10 of them solve\r\na particular problem, then the solvers fraction is equal to , and the\r\nproblem’s maximum point value is equal to 1500.If the problem’s maximum\r\npoint value is equal to , then for each whole minute passed from the\r\nbeginning of the contest to the moment of the participant’s correct\r\nsubmission, the participant loses points. For example, if the problem’s\r\nmaximum point value is 2000, and the participant submits a correct\r\nsolution to it 40 minutes into the round, this participant will be\r\nawarded with points for this problem.There are participants in the\r\nround, including Vasya and Petya. For each participant and each problem,\r\nthe number of minutes which passed between the beginning of the contest\r\nand the submission of this participant to this problem is known. It’s\r\nalso possible that this participant made no submissions to this\r\nproblem.With two seconds until the end of the round, all participants’\r\nsubmissions have passed pretests, and not a single hack attempt has been\r\nmade. Vasya believes that no more submissions or hack attempts will be\r\nmade in the remaining two seconds, and every submission will pass the\r\nsystem testing.Unfortunately, Vasya is a cheater. He has registered new\r\naccounts for the round. Now Vasya can submit any of his solutions from\r\nthese new accounts in order to change the maximum point values of the\r\nproblems. Vasya can also submit any wrong solutions to any problems.\r\nNote that Vasya can not submit correct solutions to the problems he\r\nhasn’t solved.Vasya seeks to score strictly more points than Petya in\r\nthe current round. Vasya has already prepared the scripts which allow to\r\nobfuscate his solutions and submit them into the system from any of the\r\nnew accounts in just fractions of seconds. However, Vasya doesn’t want\r\nto make his cheating too obvious, so he wants to achieve his goal while\r\nmaking submissions from the smallest possible number of new\r\naccounts.Find the smallest number of new accounts Vasya needs in order\r\nto beat Petya (provided that Vasya’s assumptions are correct), or report\r\nthat Vasya can’t achieve his goal.\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <algorithm>\n#include <numeric>\n#include <random>\n#include <vector>\n#include <array>\n#include <bitset>\n#include <queue>\n#include <set>\n#include <unordered_set>\n#include <map>\n#include <unordered_map>\n\n#define tm f__k\nusing namespace std;\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nconstexpr ll TEN(int n) { return (n==0) ? 1 : 10*TEN(n-1); }\ntemplate<class T> using V = vector<T>;\ntemplate<class T> using VV = V<V<T>>;\n\nint bsr(uint x) { return 31 - __builtin_clz(x); }\nint bsr(ull x) { return 63 - __builtin_clzll(x); }\nint bsf(uint x) { return __builtin_ctz(x); }\nint bsf(ull x) { return __builtin_ctzll(x); }\n\nint n;\nint ac[5];\nint tm[2][5];\n\nint f(int p, int d, int m, int n) {\n    if (tm[p][d] == -1) return 0;\n    int fr = 250 - tm[p][d];\n    if (2*m > n) return fr*2;\n    if (4*m > n) return fr*4;\n    if (8*m > n) return fr*6;\n    if (16*m > n) return fr*8;\n    if (32*m > n) return fr*10;\n    return fr*12;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << setprecision(20);\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < 5; j++) {\n            int x;\n            cin >> x;\n            if (i <= 1) tm[i][j] = x;\n            if (x != -1) ac[j]++;\n        }\n    }\n\n    for (int m = 0; m < 120*40; m++) {\n        int sm = 0;\n        for (int j = 0; j < 5; j++) {\n            int ma = -TEN(9);\n            for (int a = 0; a <= m; a++) {\n                if (a && tm[0][j] == -1) break;\n                ma = max(ma, f(0, j, ac[j]+a, n+m) - f(1, j, ac[j]+a, n+m));\n            }\n            sm += ma;\n        }\n        if (sm > 0) {\n            cout << m << endl;\n            return 0;\n        }\n    }\n    cout << -1 << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Dynamic Problem Scoring.json",
    "editorial_link": "https://codeforces.com//blog/entry/51883",
    "editorial": "Dynamic problem scoring used to be used more often in Codeforces rounds,\r\nincluding some tournament rounds like VK Cup 2015 Finals.Once you read\r\nthe problem statement carefully, the problem itself isnât overly\r\ndifficult. Consider new accounts Vasya puts into play. Correct solutions\r\nto which problems does he submit from these new accounts? If Vasya\r\nhasnât solved a problem, he canât submit correct solutions to it. If\r\nVasya has solved a problem which Petya hasnât solved, then clearly Vasya\r\nwants the maximum point value of this problem to be as high as possible,\r\nthus it doesnât make sense to submit its solution from the new accounts.\r\nSuppose Vasya solved the problem at minute , Petya solved it at minute\r\nand the problemâs maximum point value is , then Vasyaâs and Petyaâs\r\nscores for this problem are and , respectively. Letâs denote the\r\ndifference between these values by . Vasya wants to maximize this value.\r\nIf is positive (that is, Vasya solved the problem faster than Petya),\r\nthen is maximized when is maximized. To maximize , Vasya shouldnât\r\nsubmit correct solutions to this problem from the new accounts. On the\r\nother hand, if is negative (that is, Petya solved the problem faster\r\nthan Vasya), then is maximized when is minimized. To minimize , Vasya\r\nsubmit correct solutions to this problem from the new accounts. Finally,\r\nif is zero (that is, Petya and Vasya solved the problem at the same\r\nmoment), then for any value of , so it doesnât matter if Vasya submits\r\ncorrect solutions to this problem or not. It follows from the above that\r\nVasya should always do the same for all new accounts he puts into\r\nplay.Letâs iterate over the number of new accounts Vasya puts into play,\r\nstarting from 0. Then we can determine what solutions Vasya should\r\nsubmit from these accounts using the reasoning above. Then we can\r\ncalculate the maximum point values of the problems, and then the number\r\nof points Vasya and Petya will score. If Vasyaâs score is higher than\r\nPetyaâs score, then the answer is , otherwise we increase by one and\r\ncontinue.When do we stop? If Vasya submits solutions to a problem from\r\nthe new accounts, then after putting at least accounts into play the\r\nmaximum point value of this problem will reach 500 and wonât change\r\nanymore. If Vasya doesnât, then after putting at least accounts into\r\nplay the maximum point value of this problem will reach 3000 and wonât\r\nchange anymore. Therefore, if exceeds , we can stop and output .Note\r\nthat we canât find the value of using binary search due to the fact that\r\nVasya canât submit solutions to the problems he hasnât solved. That is,\r\nmore accounts do not mean more profit. For example, consider the\r\nfollowing test case: 30 -1 -1 -1 -1-1 0 -1 -1 -1-1 0 -1 -1 -1If Vasya\r\ndoesnât use any new accounts, his score will be 1000, while Petyaâs\r\nscore will be 500. If Vasya uses at least 61 accounts, both his and\r\nPetyaâs score will be 3000.\r\n",
    "hint": []
}