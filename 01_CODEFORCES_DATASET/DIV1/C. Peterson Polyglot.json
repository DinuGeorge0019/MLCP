{
    "link": "https://codeforces.com//contest/778/problem/C",
    "problemId": "95643",
    "problem_idx": "C",
    "shortId": "778C",
    "contest_number": "778",
    "problem_submissions": {
        "D": [
            25045880,
            25060354,
            25044951,
            25042270,
            25047480,
            25048926,
            25045795,
            25045544,
            25045486,
            25047721,
            25047363,
            25048949,
            25046309,
            25047075,
            25047917,
            25047905,
            25036950,
            25042732
        ],
        "E": [
            25042969,
            25046345,
            25048943,
            25037368,
            25230220,
            25046363,
            25054654,
            25048918,
            25047591,
            25047081
        ],
        "A": [
            25035252,
            25031242,
            25245410,
            25036410,
            25031451,
            25031235,
            25031489,
            25038781,
            25031419,
            25031309,
            25031692,
            25032018,
            25031359,
            25031871,
            25031264,
            25031548,
            25034117,
            25032346,
            25031343,
            25041816,
            25031435
        ],
        "B": [
            25034518,
            25033704,
            25035119,
            25035355,
            25034840,
            25040894,
            25042142,
            25035930,
            25034089,
            25038221,
            25035530,
            25036277,
            25035911,
            25033345,
            25036435,
            25039201,
            25037280,
            25038965,
            25040791,
            25035608
        ],
        "C": [
            25038188,
            25041985,
            25049416,
            25045342,
            25039545,
            25046412,
            25037203,
            25040856,
            25043392,
            25042924,
            25041581,
            25064524,
            25064516,
            25064118,
            25050637,
            25050497,
            25042489,
            25043145,
            25043153,
            25044553,
            25044592,
            25043572,
            25044608,
            25050488,
            25049895
        ]
    },
    "name": "C. Peterson Polyglot",
    "statement": "Peterson loves to learn new languages, but his favorite hobby is making\r\nnew ones. Language is a set of words, and word is a sequence of\r\nlowercase Latin letters.Peterson makes new language every morning. It is\r\ndifficult task to store the whole language, so Peterson have invented\r\nnew data structure for storing his languages which is called . Broom is\r\nrooted tree with edges marked with letters. Initially broom is\r\nrepresented by the only vertex the root of the broom. When Peterson\r\nwants to add new word to the language he stands at the root and\r\nprocesses the letters of new word one by one. Consider that Peterson\r\nstands at the vertex . If there is an edge from marked with current\r\nletter, Peterson goes through this edge. Otherwise Peterson adds new\r\nedge from to the new vertex , marks it with the current letter and goes\r\nthrough the new edge. Size of broom is the number of vertices in it.In\r\nthe evening after working day Peterson can’t understand the language he\r\nmade this morning. It is too difficult for bored Peterson and he tries\r\nto make it simpler. Simplification of the language is the process of\r\nerasing some letters from some words of this language. Formally,\r\nPeterson takes some positive integer and erases -th letter from all the\r\nwords of this language having length at least . Letters in words are\r\nindexed starting by 1. Peterson considers that simplification should\r\nchange at least one word, i.e. there has to be at least one word of\r\nlength at least . Peterson tries to make his language as simple as\r\npossible, so he wants to choose such that the size of the broom for his\r\nsimplified language is as small as possible.Peterson is pretty annoyed\r\nwith this task so he asks you for help. Write a program to find the\r\nsmallest possible size of the broom and integer .\r\n",
    "solutions": [
        "#include<cstdio>\n#include<algorithm>\n#include<vector>\n#define pii pair<int,int>\nusing namespace std;\nstruct Trie{\n    int ch[26], par;\n}w[601000];\nint C[301000], Res[301000];\nvector<pii>TP;\nint n, rr, cnt;\nvoid Do(int a, int b){\n    int i;\n    for(i=0;i<26;i++){\n        if(!w[b].ch[i])continue;\n        if(!w[a].ch[i]){\n            w[a].ch[i] = ++cnt;\n            TP.push_back(pii(a,i));\n        }\n        else rr++;\n        Do(w[a].ch[i], w[b].ch[i]);\n    }\n}\nvoid DFS(int a, int dep){\n    int i, Mx = 0, pv = -1, x, vv;\n    C[a] = 1;\n    for(i=0;i<26;i++){\n        if(w[a].ch[i]){\n            DFS(w[a].ch[i], dep + 1);\n            C[a] += C[w[a].ch[i]];\n            if(Mx < C[w[a].ch[i]]){\n                Mx = C[w[a].ch[i]], pv = w[a].ch[i];\n            }\n        }\n    }\n    if(pv==-1)return;\n    vv = pv;\n    rr = 1;\n    cnt = n;\n    for(i=0;i<26;i++){\n        x = w[a].ch[i];\n        if(!x)continue;\n        if(x == pv)continue;\n        rr++;\n        Do(pv, x);\n    }\n    Res[dep] += rr;\n    for(i=0;i<TP.size();i++){\n        w[TP[i].first].ch[TP[i].second] = 0;\n    }\n    TP.clear();\n}\nint main(){\n    int i, a, b, Mx = -1;\n    char pp[3];\n    scanf(\"%d\",&n);\n    for(i=1;i<n;i++){\n        scanf(\"%d%d%s\",&a,&b,pp);\n        w[a].ch[pp[0]-'a'] = b;\n        w[b].par = a;\n    }\n    DFS(1, 1);\n    for(i=1;i<=n;i++){\n        if(Mx < Res[i])Mx = Res[i], a = i;\n    }\n    printf(\"%d\\n%d\\n\",n-Mx,a);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dfs and similar",
        "dsu",
        "hashing",
        "strings",
        "trees"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Peterson Polyglot.json",
    "editorial_link": "https://codeforces.com//blog/entry/50724",
    "editorial": "While erasing letters\non position , trie changes like the following: all the edges from one\nfixed vertex of depth are merging into one. You can see it on the\npicture in the sample explanation. After merging of the subtrees we have\nthe only tree union of subtrees as the result. Consider the following\nalgorithm. For every vertex iterate over all the subtrees of âs children\nexcept for the children having largest subtree. There is an interesting\nfact: this algorithm works in in total. Denote as the size of the\nsubtree rooted at vertex . Let be the âs child with the largest subtree,\ni.e. for every children of . If is a child of and then . Letâs prove\nthat. Consider vertex and look at the moments of time when we have\niterated over it. Letâs go up through the ancestors of . Every time we\niterate over the size of the current subtree becomes twice greater.\nTherefore we couldât iterate over more than times in total. It proves\nthat time complexity of this algorithm is . Solution: How to unite\nsubtrees? First method. Find the largest subtree: it has been already\nbuilt. Try to add another subtree in the following way. Letâs run over\nsmaller subtreeâs vertices and add new vertices into respective places\nof larger subtree. As the result we will have the union of the subtrees\nof âs children. All we need from this union is itâs size. After that we\nneed to roll it back. Letâs remember all the memory cells, which were\nchanged while merging trees, and their old values. After merging we can\nrestore itâs old values in reverse order. Is it possible to implement\nmerging without rolling back? Second method. Letâs take all the subtrees\nexcept for the largest one and build their union using new memory. After\nthat we should have two subtrees: the largest one and the union of the\nrest. We can find size of their union without any changes. Everything we\nneed is to run over one of these trees examining another tree for the\nexistence of respective vertices. After this we can reuse the memory we\nhave used for building new tree.\n",
    "hint": []
}