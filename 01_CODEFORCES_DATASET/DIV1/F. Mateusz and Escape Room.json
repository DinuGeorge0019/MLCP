{
    "link": "https://codeforces.com//contest/1229/problem/F",
    "problemId": "419081",
    "problem_idx": "F",
    "shortId": "1229F",
    "contest_number": "1229",
    "problem_submissions": {
        "E2": [
            66535857,
            61153989,
            61162985,
            61167725,
            61164541,
            61175914,
            73169874,
            73169292,
            67251679,
            61176348,
            61171644,
            61168314,
            61282274
        ],
        "C": [
            61156990,
            61139280,
            61133462,
            61168973,
            61144252,
            61152507,
            61152114,
            61139574,
            61138824,
            61139511,
            61146010,
            61154268,
            61140423,
            61146503,
            61146999,
            61163280,
            61145517,
            61140699
        ],
        "E1": [
            61153988,
            61160360,
            61157052,
            61164602,
            61165567,
            61168930,
            61169365,
            61171555,
            61161774,
            61282244,
            91100857
        ],
        "D": [
            61143107,
            61152425,
            61148639,
            61156853,
            61153552,
            61162885,
            61162936,
            61151975,
            61157442,
            61157392,
            61156341,
            61210834,
            61160744,
            61159221,
            61160510,
            61155666,
            61165039,
            61163062
        ],
        "B": [
            61128405,
            61132933,
            61165615,
            61142364,
            61131741,
            61140527,
            61129638,
            61133794,
            61131083,
            61134616,
            61139186,
            61132543,
            61141781,
            61139438,
            61135873,
            61137164,
            61151652
        ],
        "A": [
            61122880,
            61126193,
            61123596,
            61131920,
            61125660,
            61128699,
            61125244,
            61171108,
            61124176,
            61136192,
            61128585,
            61129134,
            61124511,
            61133577,
            61132336,
            61124059,
            61130617,
            61131139
        ],
        "F": [
            61198842,
            61176125,
            61453900,
            61180269,
            61179508,
            61398042
        ]
    },
    "name": "F. Mateusz and Escape Room",
    "statement": "Mateusz likes to travel! However, on his 42nd visit to Saint\r\nComputersburg there is not much left to sightsee. That\u2019s why he decided\r\nto go to an escape room with his friends!The team has solved all riddles\r\nflawlessly. There is only one riddle remaining a huge circular table!\r\nThere are n weighing scales lying on top of the table, distributed along\r\nthe circle. Each scale is adjacent to exactly two other scales: for each\r\ni\r\nin\r\n{1, 2,\r\ndots, n-1\r\n}, the i-th and the (i+1)-th scales are adjacent to each other, as well\r\nas the first and the n-th scale.The i-th scale initially contains a_i\r\nheavy coins. Mateusz can perform moves each move consists of fetching a\r\nsingle coin from one scale and putting it on any adjacent scale.It turns\r\nout that the riddle will be solved when there is a specific amount of\r\ncoins on each of the scales. Specifically, each scale has parameters l_i\r\nand r_i. If each coin lies on a single scale and for each i, the i-th\r\nscale contains at least l_i and at most r_i coins, the riddle will be\r\nsolved and Mateusz\u2019s team will win!Mateusz is aiming for the best\r\npossible time. Therefore, he wants to solved the riddle as quickly as\r\npossible. What is the minimum possible number of moves required to\r\nfulfill all the conditions?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nmt19937 mrand(random_device{}()); \nconst ll mod=1000000007;\nint rnd(int x) { return mrand() % x;}\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n \nconst int N=35100;\nint a[N],l[N],r[N],n;\n\nstruct pq {\n\tll q[2*N];\n\tint sz=0;\n\tll offset=0;\n\tvoid init(ll val) {\n\t\tsz=n+1;\n\t\trep(i,0,sz) q[i]=-val;\n\t}\n\tll top() {\n\t\treturn -q[0]+offset;\n\t}\n\tvoid push(ll x) {\n\t\tq[sz++]=-(x-offset);\n\t\tpush_heap(q,q+sz);\n\t}\n\tvoid shift(ll x) {\n\t\toffset+=x;\n\t}\n\tvoid pop() {\n\t\tpop_heap(q,q+sz); --sz;\n\t}\n};\n\nll solve(ll t) {\n\tpq L,R;\n\tL.init(-t); R.init(t);\n\tll key=abs(t);\n\trep(i,0,n) {\n\t\tL.shift(a[i]-l[i]); R.shift(r[i]-a[i]);\n\t\tif (i!=n-1) {\n\t\t\tll pL=L.top(),pR=R.top();\n\t\t\tif (pL>=0&&pR>=0) {\n\t\t\t\tL.push(0); R.push(0);\n\t\t\t} else if (pR<0) {\n\t\t\t\tkey+=-pR;\n\t\t\t\tL.push(-pR); R.pop();\n\t\t\t\tR.push(0); R.push(0);\n\t\t\t} else {\n\t\t\t\tkey+=-pL;\n\t\t\t\tR.push(-pL); L.pop();\n\t\t\t\tL.push(0); L.push(0);\n\t\t\t}\n\t\t}\n\t}\n\tL.shift(t); R.shift(-t);\n\tll pL=L.top(),pR=R.top();\n\tif (pL>=0&&pR>=0) return key;\n\tif (pR<0) {\n\t\tint k=0;\n\t\twhile (1) {\n\t\t\tR.pop();\n\t\t\tll cR=R.top(); ++k;\n\t\t\tif (cR>=0) return key+k*(-pR);\n\t\t\tkey+=k*(cR-pR); pR=cR;\n\t\t}\n\t} else {\n\t\tint k=0;\n\t\twhile (1) {\n\t\t\tL.pop();\n\t\t\tll cL=L.top(); ++k;\n\t\t\tif (cL>=0) return key+k*(-pL);\n\t\t\tkey+=k*(cL-pL); pL=cL;\n\t\t}\n\t}\n\tassert(0);\n\treturn 0;\n}\n \nint sa;\nint main() {\n\tscanf(\"%d\",&n);\n\trep(i,0,n) scanf(\"%d%d%d\",a+i,l+i,r+i),sa+=a[i];\n\tint pL=-sa,pR=sa;\n\twhile (pL+4<pR) {\n\t\tint fl=(pL+pR)/2,fr=fl+1;\n\t\tif (solve(fl)>solve(fr)) pL=fl;\n\t\telse pR=fr;\n\t}\n\tll ans=1ll<<60;\n\trep(i,pL,pR+1) {\n\t\tans=min(ans,solve(i));\n\t}\n\tprintf(\"%lld\\n\",ans);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\F. Mateusz and Escape Room.json",
    "editorial_link": "https://codeforces.com//blog/entry/70008",
    "editorial": "Let\u00e2\u0080\u0099s introduce the variables where is the number of coins passed from\r\nthe -th to the -th scale (or, , it means that coins are passed from the\r\n-th to the -th scale). We can now create the following conditions\r\nregarding the final number of stones on each scale:It turns out that for\r\nany sequence integers satisfying the inequalities before, we can create\r\na sequence of moves satisfying all the conditions in the statement! In\r\norder to see this, consider a few cases: If , then we take any coin and\r\nmake a full lap with it along the circle in the order of increasing \u00e2\u0080\u0099s.\r\nWe can now decrease each by one. If , we can do the similar thing, but\r\nwe\u00e2\u0080\u0099re decreasing \u00e2\u0080\u0099s. In the remaining cases, we can pick a scale that\r\nwon\u00e2\u0080\u0099t receive coins anymore (that is, and ) and it still has some coins\r\nto distribute ( or ). If , take a single coin, put it on the -th scale,\r\nand decrease by one. If , take a coin, put it on the -th scale, and\r\nincrease by one. By following these operations, we will create the final\r\nconfiguration in moves.Therefore, we need to minimize this value. Let\u00e2\u0080\u0099s\r\ntry to guess and try to optimize for some fixed . The simplest way is to\r\nwrite a dynamic programming: the minimum value of given a value of and\r\nsuch that the final numbers of stones on the second, third, fourth, ,\r\n-th scale are satisfied. To progress, we iterate over the possible\r\nvalues such that and compute the best value of . Notice that the initial\r\nstate is and everywhere else. To compute the result, we must take the\r\nminimum value for satisfying .How to improve this DP? First of all,\r\nwe\u00e2\u0080\u0099ll try to maintain the as a function on . In order to compute from ,\r\nwe\u00e2\u0080\u0099ll need to: Shift the function (left or right). Given a function and\r\na constant , compute . Given a function , compute . It turns out that\r\nafter each of these operations, the function remains convex. We can\r\ntherefore say that the function is linear on some segments with\r\nincreasing slopes. Therefore, we can maintain a function as a set of\r\nsegments, each segment described by its length and its slope.How to\r\ndescribe the second operation? We can see that it\u00e2\u0080\u0099s actually adding a\r\nsegment with slope and length to the function. Meanwhile, the third\r\noperation is splitting the function into two parts: for negative and\r\npositive . We need to decrease the slopes in the first part by , and\r\nincrease the slopes in the second part by .All these operations can be\r\nimplemented on any balanced BST in time. Therefore, the whole subproblem\r\n(for fixed ) can be solved in time.How to solve the general problem? It\r\nturns out that... Therefore, we can run a ternary search on to find the\r\noptimal result for any . This ternary search takes iterations, so the\r\nfinal time complexity is with a rather large constant.\r\n"
}