{
    "link": "https://codeforces.com//contest/704/problem/E",
    "problemId": "67581",
    "problem_idx": "E",
    "shortId": "704E",
    "contest_number": "704",
    "problem_submissions": {
        "D": [
            40927696,
            40927622,
            40927587,
            40927467,
            40927396,
            19704142,
            19710237,
            19708323,
            19774513,
            19774457,
            19774399,
            19764110,
            19708427,
            19756062,
            26821434,
            22052930
        ],
        "C": [
            19708702,
            23913352,
            19710963,
            19714551,
            19717256,
            19728619,
            19710982,
            19720592,
            22049772,
            19704534
        ],
        "B": [
            19698622,
            19822826,
            19698078,
            19696251,
            19698272,
            19697250,
            19698738,
            19697542,
            19699793,
            19700128,
            19700526,
            19700174,
            19702386,
            19697314,
            19708684,
            19700116
        ],
        "A": [
            19690324,
            19692784,
            19688619,
            19690302,
            19690344,
            19691492,
            19691120,
            19689897,
            19691217,
            19692269,
            19690729,
            19691407,
            19691187,
            19689858,
            19690147,
            19691829,
            19694517,
            19693111,
            19701512,
            19690489
        ],
        "E": [
            27277354,
            20669015,
            22073776,
            22073733
        ]
    },
    "name": "E. Iron Man",
    "statement": "Tony Stark is playing a game with his suits (they have auto-pilot now).\r\nHe lives in Malibu. Malibu has junctions numbered from to , connected\r\nwith roads. One can get from a junction to any other junction using\r\nthese roads (graph of Malibu forms a tree).Tony has suits. There’s a\r\nspecial plan for each suit. The -th suit will appear at the moment of\r\ntime in the junction , and will move to junction using the shortest path\r\nbetween and with the speed roads per second (passing a junctions takes\r\nno time), and vanishing immediately when arriving at (if it reaches in\r\ntime , it’s available there at moment , but not in further moments).\r\nAlso, suits move continuously (for example if , at time it’s in the\r\nmiddle of a road. Please note that if it means the suit will be at\r\njunction number only at moment and then it vanishes. An explosion\r\nhappens if at any moment of time two suits share the same exact location\r\n(it may be in a junction or somewhere on a road; while appearing,\r\nvanishing or moving).Your task is to tell Tony the moment of the the\r\nfirst explosion (if there will be any).\r\n",
    "solutions": [
        "#include <algorithm>\n#include <bitset>\n#include <cassert>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <limits>\n#include <map>\n#include <memory>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\nusing namespace std;\n\n// {{{\n// clang-format off\n#define all(a) (a).begin(), (a).end()\n#define sz(a) static_cast<int>((a).size())\n#define fillchar(a, x) memset(a, x, sizeof(a))\n#define rep(i, a, b) for (int i = int(a); i <= int(b); ++i)\n#define irep(i, a, b) for (int i = int(a); i >= int(b); --i)\n#define replr(i, a, b) rep(i, a, (b)-1)\n#define reprl(i, a, b) irep(i, (b)-1, a)\n#define repn(i, n) rep(i, 0, (n)-1)\n#define irepn(i, n) irep(i, (n)-1, 0)\n#define fi first\n#define se second\n#define pb push_back\n#define mp make_pair\n#define popcount __builtin_popcount\ntypedef long long LL;\ntypedef pair<int, int> PII;\ntypedef pair<LL, LL> PLL;\ntypedef vector<int> VI;\ntypedef vector<LL> VL;\ntypedef vector<bool> VB;\ntypedef vector<string> VS;\ntypedef vector<PII> VPI;\ntypedef vector<PLL> VPL;\ntypedef vector<VI> VVI;\ntypedef vector<VL> VVL;\ntypedef vector<VB> VVB;\ntypedef vector<VS> VVS;\ntypedef vector<VPI> VVPI;\ntypedef vector<VPL> VVPL;\ntemplate <class T, class S> ostream& operator<<(ostream& os, const pair<T, S>& v) { return os << \"(\" << v.first << \", \" << v.second << \")\"; }\ntemplate <class T> ostream& operator<<(ostream& os, const vector<T>& v) { os << \"[\"; repn(i, sz(v)) { if(i) os << \", \"; os << v[i]; } return os << \"]\"; }\ntemplate <class T> bool setmax(T& _a, T _b) { if(_a < _b) { _a = _b; return true; } return false; }\ntemplate <class T> bool setmin(T& _a, T _b) { if(_b < _a) { _a = _b; return true; } return false; }\ntemplate <class T> T gcd(T _a, T _b) { return _b == 0 ? _a : gcd(_b, _a % _b); }\nVI read_vi(int n = -1) { if (n < 0) scanf(\"%d\", &n); VI a(n); repn(i, n) scanf(\"%d\", &a[i]); return a; }\nVL read_vl(int n = -1) { if (n < 0) scanf(\"%d\", &n); VL a(n); repn(i, n) scanf(\"%lld\", &a[i]); return a; }\nVPI read_vpi(int n = -1) { if (n < 0) scanf(\"%d\", &n); VPI a(n); repn(i, n) scanf(\"%d%d\", &a[i].fi,&a[i].se); return a; }\nVPL read_vpl(int n = -1) { if (n < 0) scanf(\"%d\", &n); VPL a(n); repn(i, n) scanf(\"%lld%lld\", &a[i].fi,&a[i].se); return a; }\ninline LL powmod(LL a, LL b, LL m) { LL r = 1; for(; b > 0; b >>= 1, a = a * a % m) { if(b & 1) r = r * a % m; } return r; }\n// clang-format on\n// }}}\n\ntypedef long double R;\n\nconst R EPS = 1e-12;\nint sgn(R x) { return x < -EPS ? -1 : x > EPS; }\nstruct Point {\n    R x, y;\n    Point() {}\n    Point(R _x, R _y) : x(_x), y(_y) {}\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(R b) const { return Point(x * b, y * b); }\n    Point operator/(R b) const { return Point(x / b, y / b); }\n    void rotate90() {\n        swap(x, y);\n        x = -x;\n    }\n    R len() const { return sqrt(x * x + y * y); }\n    void normalize() { *this = *this / len(); }\n    friend R mult(Point p1, Point p2) { return p1.x * p2.y - p1.y * p2.x; }\n    friend R dot(Point p1, Point p2) { return p1.x * p2.x + p1.y * p2.y; }\n    friend R mult(Point p0, Point p1, Point p2) {\n        return mult(p1 - p0, p2 - p0);\n    }\n    friend R dot(Point p0, Point p1, Point p2) { return dot(p1 - p0, p2 - p0); }\n    friend R dist(Point p1, Point p2) { return (p1 - p2).len(); }\n    R lambda(Point s, Point t) const {  // return c: p=s+(t-s)*c\n        return dot(s, t, *this) / dot(s, t, t);\n    }\n};\nstruct Line {\n    R a, b, c;\n    Line() {}\n    Line(R _a, R _b, R _c) : a(_a), b(_b), c(_c) {}\n    Line(Point p1, Point p2) {\n        a = p2.y - p1.y, b = p1.x - p2.x;\n        c = -(p1.x * a + p1.y * b);\n    }\n    Point cross(const Line& l) const {\n        R t = a * l.b - b * l.a;\n        R x = b * l.c - c * l.b;\n        R y = c * l.a - a * l.c;\n        return Point(x / t, y / t);\n    }\n};\nstruct Segment {\n    Point p1, p2;\n    bool is_point = false;\n    Segment(R x, R y) : p1(x, y), p2(x, y), is_point(true) {}\n    Segment(R x1, R y1, R x2, R y2) : p1(x1, y1), p2(x2, y2) {\n        if(p1.y > p2.y) swap(p1, p2);\n    }\n    R at(R y) const {\n        if(is_point) {\n            assert(sgn(y - p1.y) == 0);\n            return p1.x;\n        }\n        return p1.x + (y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y);\n    }\n};\n\nvector<Segment> prepare() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    VVI es(n);\n    repn(i, n - 1) {\n        int a, b;\n        scanf(\"%d%d\", &a, &b), --a, --b;\n        es[a].pb(b), es[b].pb(a);\n    }\n    const int LOG = 20;\n    VI my(n, -1), dep(n);\n    VVI up(n, VI(LOG, -1));\n    const function<int(int, int)> cal_my = [&](int x, int fa) {\n        if(fa >= 0) dep[x] = dep[fa] + 1;\n        up[x][0] = fa;\n        for(int i = 0; up[x][i] >= 0; ++i) up[x][i + 1] = up[up[x][i]][i];\n        int size = 1, best = -1;\n        for(int y : es[x]) {\n            if(y != fa) {\n                int tmp = cal_my(y, x);\n                size += tmp;\n                if(setmax(best, tmp)) my[x] = y;\n            }\n        }\n        return size;\n    };\n    cal_my(0, -1);\n    VI head(n), where(n), arr;\n    const function<void(int, int, int)> dfs = [&](int x, int fa, int h) {\n        head[x] = h, where[x] = sz(arr), arr.pb(x);\n        if(my[x] >= 0) {\n            dfs(my[x], x, h);\n        }\n        for(int y : es[x]) {\n            if(y != fa && y != my[x]) {\n                arr.pb(x);\n                dfs(y, x, x);\n            }\n        }\n    };\n    dfs(0, -1, 0);\n    const auto lca = [&](int x, int y) {\n        if(dep[x] > dep[y]) swap(x, y);\n        repn(i, LOG) if((dep[y] - dep[x]) & (1 << i)) y = up[y][i];\n        irepn(i, LOG) if(up[x][i] != up[y][i]) x = up[x][i], y = up[y][i];\n        if(x != y) x = up[x][0];\n        return x;\n    };\n    const auto extract = [&](int x, int target) {\n        VPI r;\n        while(x != target) {\n            int y = head[x];\n            if(dep[y] < dep[target]) y = target;\n            int len = dep[x] - dep[y];\n            r.pb(mp(where[x], where[x] - len));\n            x = y;\n        }\n        return r;\n    };\n\n    // cout << head << endl;\n    // cout << where << endl;\n    // cout << arr << endl;\n\n    vector<Segment> segments;\n    while(m--) {\n        int t, c, x, y;\n        scanf(\"%d%d%d%d\", &t, &c, &x, &y), --x, --y;\n        int z = lca(x, y);\n        VPI px = extract(x, z);\n        VPI py = extract(y, z);\n        bool covered = false;\n        if(!px.empty() && px.back().se == where[z]) covered = true;\n        if(!py.empty() && py.back().se == where[z]) covered = true;\n        int cur = 0;\n        for(const auto& p : px) {\n            int tmp = cur + abs(p.fi - p.se);\n            segments.pb(Segment(p.fi, t + R(cur) / c, p.se, t + R(tmp) / c));\n            cur = tmp;\n        }\n        if(!covered) {\n            segments.pb(Segment(where[z], t + R(cur) / c));\n        }\n        reverse(all(py));\n        for(auto& p : py) {\n            swap(p.fi, p.se);\n            int tmp = cur + abs(p.fi - p.se);\n            segments.pb(Segment(p.fi, t + R(cur) / c, p.se, t + R(tmp) / c));\n            cur = tmp;\n        }\n    }\n    return segments;\n}\n\nbool on_segment(Point p, Segment b) {\n    return sgn(dot(p, b.p1, b.p2)) <= 0 && sgn(mult(p, b.p1, b.p2)) == 0;\n}\n\nR intersection(Segment a, Segment b) {\n    if(sgn(mult(a.p1, a.p2, b.p1)) * sgn(mult(a.p1, a.p2, b.p2)) > 0)\n        return 1e50;\n    if(sgn(mult(b.p1, b.p2, a.p1)) * sgn(mult(b.p1, b.p2, a.p2)) > 0)\n        return 1e50;\n    if(sgn(mult(a.p1 - a.p2, b.p1 - b.p2)) == 0) {\n        R r = 1e50;\n        if(on_segment(a.p1, b)) setmin(r, a.p1.y);\n        if(on_segment(a.p2, b)) setmin(r, a.p2.y);\n        if(on_segment(b.p1, a)) setmin(r, b.p1.y);\n        if(on_segment(b.p2, a)) setmin(r, b.p2.y);\n        return r;\n    } else {\n        return Line(a.p1, a.p2).cross(Line(b.p1, b.p2)).y;\n    }\n}\n\nR cur = 0;\nvector<Segment> segments;\n\nvoid find_intersection() {\n    R found = 1e50;\n    vector<pair<R, int>> events;\n    repn(i, sz(segments)) {\n        events.pb(mp(segments[i].p1.y, -i - 1));\n        events.pb(mp(segments[i].p2.y + EPS / 5, i));\n    }\n    sort(all(events));\n    struct Id {\n        int i;\n        bool operator<(const Id& b) const {\n            int s = sgn(segments[i].at(cur) - segments[b.i].at(cur));\n            if(s == 0) s = i - b.i;\n            return s < 0;\n        }\n    };\n    set<Id> ids;\n    for(const auto& e : events) {\n        if(e.fi >= found) break;\n        cur = e.fi;\n        if(e.se < 0) {\n            auto it = ids.insert(Id{-e.se - 1}).fi;\n            auto p = it;\n            ++p;\n            if(p != ids.end()) {\n                setmin(found, intersection(segments[it->i], segments[p->i]));\n            }\n            p = it;\n            if(p != ids.begin()) {\n                --p;\n                setmin(found, intersection(segments[it->i], segments[p->i]));\n            }\n        } else {\n            assert(ids.erase(Id{e.se}) == 1);\n        }\n    }\n    if(found > 1e40) {\n        printf(\"-1\\n\");\n    } else {\n        assert(found >= 0);\n        printf(\"%.15lf\\n\", (double)found);\n    }\n}\n\nint main() {\n    segments = prepare();\n    find_intersection();\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "geometry",
        "trees"
    ],
    "dificulty": "3300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Iron Man.json",
    "editorial_link": "https://codeforces.com//blog/entry/46450",
    "editorial": "First, we're gonna solve the problem for when the given tree is a bamboo (path). For simplifying, assume vertices are numbered from left to right with 1,?2,?..,?n (it's an array). There are some events (appearing and vanishing). Sort these events in chronological order. At first (time ?-??) no suit is there. Consider a moment of time t. In time t, consider all available suits sorted in order of their positions. This gives us a vector f(t).\n\n \n\nLemma 1: If i and j are gonna be at the same location (and explode), there's a t such that i and j are both present in f(t) and in f(t) they're neighbours.\n\nThis is obvious since if at the moment before they explode there's another suit between them, i or j and that suit will explode (and i and j won't get to the same location).\n\nLemma 2: If i and j are present in f(t) and in time t, i has position less than j, then there's no time e?>?t such that in it i has position greater than j.\n\nThis hold because they move continuously and the moment they wanna pass by each other they explode.\n\nSo this gives us an approach: After sorting the events, process them one by one. consider ans is the best answer we've got so far (earliest explosion, initially ?). Consider there's a set se that contains the current available suits at any time, compared by they positions (so comparing function for this set would be a little complicated, because we always want to compare the suits in the current time, i.e. the time when the current event happens). If at any moment of time, time of event to be processed is greater than or equal to ans, we break the loop. When processing events:\n\nFirst of all, because current event's time is less than current ans, elements in se are still in increasing order of their position due to lemma 2 (because if two elements were gonna switch places, they would explode before this event and ans would be equal to their explosion time). There are two types of events:\n\nSuit i appears. After updating the current moment of time (so se's comparing function can use it), we insert i into se. Then we check i with its two neighbours in se to update ans (check when i and its neighbours are gonna share the same position).\n\nSuit i vanishes. After updating the current moment of time, we erase i from se and check its two previous neighbours (which are now neighbours to each other) and update ans by their explosion time.\n\nThis algorithm will always find the first explosion due to lemma 1 (because the suits that're gonna explode first are gonna be neighbours at some point).\n\nThis algorithm only works for bamboos. For the original problem, we'll use heavy-light decompositions. At first, we decompose the path of a suit into heavy-light sub-chains (like l sub-chains) and we replace this suit by l suits, each moving only within a subchain. Now, we solve the problem for each chain (which is a bamboo, and we know how to solve the problem for a bamboo). After replacing each suit, we'll get  suits because  and we need an extra log for sorting events and using set, so the total time complexity is .",
    "hint": []
}