{
    "link": "https://codeforces.com//contest/2115/problem/B",
    "problemId": "3415144",
    "problem_idx": "B",
    "shortId": "2115B",
    "contest_number": "2115",
    "problem_submissions": {
        "A": [
            322373149,
            322373057,
            322191671,
            322196906,
            322191306,
            322207089,
            322339019,
            322205731,
            322191602,
            322193299,
            322321188,
            322320656,
            322193684,
            322193937,
            322193846,
            322195728,
            322193849,
            322208657,
            322196496,
            322194770,
            322195138,
            322193397,
            322277408,
            322205364,
            322201021
        ],
        "E": [
            322277481,
            322279542,
            322287881,
            322287269,
            322268790,
            322276073,
            322479322,
            322316002,
            322463290,
            322674274,
            322484220
        ],
        "D": [
            322247280,
            322249604,
            322253666,
            322244252,
            322244159,
            322252360,
            322259840,
            322274633,
            322274421,
            322243918,
            322262198,
            322264257,
            322258885,
            322256903,
            322256375,
            322270049,
            322285061,
            322255261,
            322270426,
            322274051
        ],
        "C": [
            322226886,
            322242092,
            322247023,
            322262817,
            322237987,
            322228189,
            322234047,
            322256038,
            322250633,
            322253986,
            322247586,
            322244155,
            322267167,
            322253884,
            322236170,
            322239045,
            322256498,
            322247239
        ],
        "B": [
            322199788,
            322207830,
            322209032,
            322228331,
            322214165,
            322204435,
            322203425,
            322201226,
            322209167,
            322226797,
            322225099,
            322216043,
            322219704,
            322219745,
            322213225,
            322218856,
            322205348,
            322216288,
            322222101,
            322216208
        ],
        "F2": [
            322365448
        ],
        "F1": [
            322365418
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143418",
    "editorial": "SolutionLet’s think of the problem in another way, if we only require\r\nthat for all , the final value of is greater than or equal to , what\r\nwill be the limitations for all ?It is possible to prove that the\r\nrestricted form exists as a sequence . It is sufficient that for all\r\n.Next we try to illustrate this thing, we need to work backward from the\r\nlast operation and observe the restrictions on in each step. After the\r\nlast operation, we have , which means .Consider an operation that\r\nreplaces with . If for a post-operation restriction of , can we recover\r\nthe pre-operation restriction ? Let us think as follows: It is not\r\ndifficult to find that for , . , because the before the operation is\r\noverwritten, it will not actually have any restrictions. . Since the new\r\nis the original , it can be found that for the original , we have ,\r\nwhile for is symmetric. We have thus proved that, according to the\r\neventually obtained , for all is a sufficient condition to eventually\r\nmake all for all .And ultimately all , thus for all , is necessary. In\r\nfact, we could just take and do all the operations sequentially to see\r\nif we end up with . This is because as decreases, eventually decreases\r\nas well, and by the guarantee there is always , so in effect we are\r\ntrying to minimize all of , and then minimizing all of is clearly an\r\noptimal decision.Time complexity: per test case.Memory complexity: per\r\ntest case.\r\n",
    "name": "B. Gellyfish and Camellia Japonica",
    "statement": "Gellyfish has an array of n integers c_1, c_2,\r\nldots, c_n. In the beginning, c = [a_1, a_2,\r\nldots, a_n].Gellyfish will make q modifications to c.For i = 1,2,\r\nldots,q, Gellyfish is given three integers x_i, y_i, and z_i between 1\r\nand n. Then Gellyfish will set c_{z_i} :=\r\nmin(c_{x_i}, c_{y_i}).After the q modifications, c = [b_1, b_2,\r\nldots, b_n].Now Flower knows the value of b and the value of the\r\nintegers x_i, y_i, and z_i for all 1\r\nleq i\r\nleq q, but she doesn’t know the value of a.Flower wants to find any\r\npossible value of the array a or report that no such a exists.If there\r\nare multiple possible values of the array a, you may output any of them.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "dfs and similar",
        "dp",
        "graphs",
        "greedy",
        "trees"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Gellyfish and Camellia Japonica.json",
    "hint": [
        "Hint 1 Try working backwards from the final sequence, to the initial.",
        "Hint 2 If you're confused about Hint 1 , it's probably because the result isn't unique each time. Think carefully about whether you can just take the \"tightest\" result possible"
    ]
}