{"link": "https://codeforces.com//contest/1137/problem/A", "problemId": "309117", "problem_idx": "A", "shortId": "1137A", "contest_number": "1137", "problem_submissions": {"C": [51278692, 51013174, 51012138, 51014594, 51060015, 51011758, 51015377, 51058095, 51060423, 51013462, 51011929, 51013820, 51016620, 51021729, 51016142, 51022376, 51017039, 51022733], "D": [51022280, 51016149, 51021902, 51016444, 51017886, 51022110, 51022575, 51017121, 51017510, 51026190, 51017887, 51020056, 51071936, 51020439, 51057402, 51015057, 51021542, 51016650], "F": [51021456, 51151872, 51044265, 208399382, 208399328, 51370362, 51370305, 56076657, 51062431, 51062375, 51201422, 51152102], "E": [51015510, 51019659, 51017815, 51022086, 51024208, 51025483, 51015317, 51021155, 51026207, 51019242, 51116875, 51022655, 51043942, 51019234, 51021992, 51040600], "B": [51007898, 51008699, 51007790, 51010637, 51008661, 51008854, 51009928, 51010030, 51008543, 51011271, 51008351, 51008938, 51007902, 51007130, 51009176, 51009835, 51007086, 51008751, 51007248], "A": [51006589, 51007409, 51005936, 51007585, 51007232, 51007035, 51007494, 51006878, 51006201, 51013385, 51006659, 51007366, 51005796, 51010835, 51007279, 51007757, 51009144, 51007439, 51005946]}, "name": "A. Skyscrapers", "statement": "Dora loves adventures quite a lot. During some journey she encountered\r\nan amazing city, which is formed by n streets along the Eastern\r\ndirection and m streets across the Southern direction. Naturally, this\r\ncity has nm intersections. At any intersection of i-th Eastern street\r\nand j-th Southern street there is a monumental skyscraper. Dora\r\ninstantly became curious and decided to explore the heights of the city\r\nbuildings.When Dora passes through the intersection of the i-th Eastern\r\nand j-th Southern street she examines those two streets. After Dora\r\nlearns the heights of all the skyscrapers on those two streets she\r\nwonders: how one should reassign heights to the skyscrapers on those two\r\nstreets, so that the maximum height would be as small as possible and\r\nthe result of comparing the heights of any two skyscrapers on one street\r\nwouldn\u2019t change.Formally, on every of nm intersections Dora solves an\r\nindependent problem. She sees n + m - 1 skyscrapers and for each of them\r\nshe knows its real height. Moreover, any two heights can be compared to\r\nget a result \"greater\", \"smaller\" or \"equal\". Now Dora wants to select\r\nsome integer x and assign every skyscraper a height from 1 to x. When\r\nassigning heights, Dora wants to preserve the relative order of the\r\nskyscrapers in both streets. That is, the result of any comparison of\r\nheights of two skyscrapers in the current Eastern street shouldn\u2019t\r\nchange and the result of any comparison of heights of two skyscrapers in\r\ncurrent Southern street shouldn\u2019t change as well. Note that skyscrapers\r\nlocated on the Southern street are not compared with skyscrapers located\r\non the Eastern street only. However, the skyscraper located at the\r\nstreets intersection can be compared with both Southern and Eastern\r\nskyscrapers. For every intersection Dora wants to calculate the minimum\r\npossible x.For example, if the intersection and the two streets\r\ncorresponding to it look as follows: Then it is optimal to replace the\r\nheights of the skyscrapers as follows (note that all comparisons \"less\",\r\n\"equal\", \"greater\" inside the Eastern street and inside the Southern\r\nstreet are preserved) The largest used number is 5, hence the answer for\r\nthis intersection would be 5.Help Dora to compute the answers for each\r\nintersection.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef wxh010910\n  freopen(\"input.txt\", \"r\", stdin);\n#endif\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<int>> a(n, vector<int>(m));\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> a[i][j];\n    }\n  }\n  vector<vector<int>> row_less(n, vector<int>(m));\n  vector<vector<int>> row_more(n, vector<int>(m));\n  for (int i = 0; i < n; ++i) {\n    vector<int> b = a[i];\n    sort(b.begin(), b.end());\n    b.erase(unique(b.begin(), b.end()), b.end());\n    for (int j = 0; j < m; ++j) {\n      row_less[i][j] = lower_bound(b.begin(), b.end(), a[i][j]) - b.begin();\n      row_more[i][j] = b.size() - 1 - row_less[i][j];\n    }\n  }\n  vector<vector<int>> col_less(n, vector<int>(m));\n  vector<vector<int>> col_more(n, vector<int>(m));\n  for (int i = 0; i < m; ++i) {\n    vector<int> b(n);\n    for (int j = 0; j < n; ++j) {\n      b[j] = a[j][i];\n    }\n    sort(b.begin(), b.end());\n    b.erase(unique(b.begin(), b.end()), b.end());\n    for (int j = 0; j < n; ++j) {\n      col_less[j][i] = lower_bound(b.begin(), b.end(), a[j][i]) - b.begin();\n      col_more[j][i] = b.size() - 1 - col_less[j][i];\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      if (j) {\n        cout << \" \";\n      }\n      cout << 1 + max(row_less[i][j], col_less[i][j]) + max(row_more[i][j], col_more[i][j]);\n    }\n    cout << \"\\n\";\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["implementation", "sortings"], "dificulty": "1600", "interactive": false}