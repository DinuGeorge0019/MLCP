{
    "link": "https://codeforces.com//contest/1685/problem/D1",
    "problemId": "1410455",
    "problem_idx": "D1",
    "shortId": "1685D1",
    "contest_number": "1685",
    "problem_submissions": {
        "E": [
            158459552,
            158470179,
            158498551,
            158474226,
            158469548,
            163064811,
            163064579,
            162972274,
            161995310
        ],
        "D1": [
            158446537,
            158446179,
            158436497,
            158441308,
            158450152,
            158437819,
            158438771,
            158444550,
            158444057,
            158444961,
            158450485,
            158456436,
            158455279,
            158451423,
            158456717,
            158456702,
            158458839,
            158450419,
            158454329
        ],
        "C": [
            158440149,
            158436682,
            158456408,
            158436985,
            158433630,
            158430630,
            158430086,
            158437803,
            158438284,
            158438857,
            158446162,
            158444048,
            158440132,
            158447129,
            158447895,
            158449525,
            158447760,
            158457006,
            158449988
        ],
        "B": [
            158430617,
            158426337,
            158489620,
            158427132,
            158430769,
            158427058,
            158419568,
            158419647,
            158422845,
            158428180,
            158427930,
            158426993,
            158428289,
            158433041,
            158438360,
            158432708,
            158432524,
            158429703,
            158431029,
            158439177
        ],
        "A": [
            158416845,
            158416623,
            158416445,
            158417978,
            158414637,
            158414483,
            158414377,
            158414577,
            158419066,
            158418105,
            158416435,
            158417522,
            158415887,
            158415929,
            158418032,
            158416211,
            158417132,
            158417328,
            158424448
        ],
        "D2": [
            158457366,
            158450783,
            158467580,
            158467275,
            158561732,
            166382774,
            166382436
        ]
    },
    "name": "D1. Permutation Weight  Easy Version ",
    "statement": ".You are given a permutation p_1, p_2,\r\nldots, p_n of integers from 1 to n.Let\u2019s define the weight of the\r\npermutation q_1, q_2,\r\nldots, q_n of integers from 1 to n as |q_1 - p_{q_{2}}| + |q_2 -\r\np_{q_{3}}| +\r\nldots + |q_{n-1} - p_{q_{n}}| + |q_n - p_{q_{1}}|You want your\r\npermutation to be as lightweight as possible. Find any permutation q\r\nwith the smallest possible weight.\r\n",
    "solutions": [
        "//Awwawa! Dis cold yis ratten buy Pikachu!\n#include <bits/stdc++.h>\n#define ll long long\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define vi vector<int>\n#define pi pair<int, int>\n#define mod 998244353\ntemplate<typename T> bool chkmin(T &a, T b){return (b < a) ? a = b, 1 : 0;}\ntemplate<typename T> bool chkmax(T &a, T b){return (b > a) ? a = b, 1 : 0;}\nll ksm(ll a, ll b) {if (b == 0) return 1; ll ns = ksm(a, b >> 1); ns = ns * ns % mod; if (b & 1) ns = ns * a % mod; return ns;}\nusing namespace std;\nconst int maxn = 205;\nint n;\nint p[maxn];\nint fl[maxn];\nvi mg(vi a, vi b, int k) {\n    int p[2];\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == k)  p[0] = i;\n    }\n    for (int i = 0; i < b.size(); i++)\n        if (b[i] == k + 1)\n            p[1] = i;\n    //cout << p[0] << ' ' << p[1] << endl;\n    vi res;\n    for (int i = 0; i + 1 < a.size(); i++)\n        res.pb(a[(p[0] + 1 + i) % a.size()]);\n    for (int i = 0; i < b.size(); i++)\n        res.pb(b[(p[1] + i) % b.size()]);\n    res.pb(k);\n    return res;\n}\nvi fd(int x) {\n    vi res;\n    while (1) {\n        res.pb(x); fl[x] = 1;\n        //cout << x << ' ' << p[x] << endl;\n        x = p[x];\n        if (fl[x]) break;\n    }\n    return res;\n}\n\nint main() {\n    int t;\n    cin >> t;\n   //cout << \"AA\" << endl;\n    while (t--) {\n        cin >> n;\n        memset(fl, 0, sizeof(fl));\n        for (int i = 1; i <= n; i++)\n            cin >> p[i];\n        vi cur = fd(1);\n        for (int i = 2; i <= n; i++) {\n            if (fl[i]) continue;\n            else {\n                vi h = fd(i);\n                cur = mg(cur, h, i - 1);\n            }\n        }\n        reverse(cur.begin(), cur.end());\n        for (int i = 0; i < n; i++)\n            cout << cur[i] << \" \";\n    }\n    return (0-0); //<3\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "dsu"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D1. Permutation Weight  Easy Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/103198",
    "editorial": "Let\u00e2\u0080\u0099s first understand what is the minimum possible weight of . When can\r\nit be ?Only when for each . Clearly, such exists only when is just one\r\ncycle. This gives a hint that we should look at cycles.Consider\r\nsplitting of into cycles (where a cycle is an array such that for ).\r\nLet\u00e2\u0080\u0099s say there are of such cycles. I claim that the answer is . You can\r\nsee the proof in the tutorial of the hard version of this problem.Now,\r\nlet\u00e2\u0080\u0099s provide an example. We will construct a permutation as follows:\r\nInitially, it\u00e2\u0080\u0099s equal to Then, for each from to , if and are in\r\ndifferent cycles in currently, swap them.One such swap reduces the\r\nnumber of cycles by exactly , so we will do exactly such swaps and will\r\nconsist of exactly one cycle. Next, construct by the rule (it\u00e2\u0080\u0099s possible\r\nas is just one cycle). As , the weight of is just the sum of . Clearly,\r\none swap increases this value by at most , so in the end it will be at\r\nmost , as desired.\r\n"
}