{
    "link": "https://codeforces.com//contest/138/problem/C",
    "problemId": "734",
    "problem_idx": "C",
    "shortId": "138C",
    "contest_number": "138",
    "problem_submissions": {
        "D": [
            980256,
            979660,
            979865,
            981459,
            981782,
            980490,
            980859,
            981836,
            980983,
            981220,
            982093
        ],
        "C": [
            977164,
            977134,
            978135,
            978148,
            979334,
            977388,
            977560,
            980285,
            976404,
            978363,
            977955,
            977707,
            978190,
            978555,
            976840,
            982255,
            978719
        ],
        "B": [
            976212,
            977359,
            976881,
            978412,
            978151,
            981022,
            984515,
            979243,
            978060,
            990834,
            976636,
            980026,
            976613,
            976894,
            979990,
            982256,
            976694
        ],
        "A": [
            975301,
            975042,
            975181,
            979365,
            975615,
            980600,
            975885,
            975355,
            975294,
            974907,
            975053,
            982540,
            975212,
            975316,
            978556
        ],
        "E": [
            984982
        ]
    },
    "name": "C. Mushroom Gnomes - 2",
    "statement": "One day Natalia was walking in the woods when she met a little mushroom\r\ngnome. The gnome told her the following story:Everybody knows that the\r\nmushroom gnomes\u2019 power lies in the magic mushrooms that grow in the\r\nnative woods of the gnomes. There are trees and magic mushrooms in the\r\nwoods: the -th tree grows at a point on a straight line with coordinates\r\nand has the height of , the -th mushroom grows at the point with\r\ncoordinates and has magical powers .But one day wild mushroommunchers,\r\nthe sworn enemies of mushroom gnomes unleashed a terrible storm on their\r\nhome forest. As a result, some of the trees began to fall and crush the\r\nmagic mushrooms. The supreme oracle of mushroom gnomes calculated in\r\nadvance the probability for each tree that it will fall to the left, to\r\nthe right or will stand on. If the tree with the coordinate and height\r\nfalls to the left, then all the mushrooms that belong to the right-open\r\ninterval , are destroyed. If a tree falls to the right, then the\r\nmushrooms that belong to the left-open interval are destroyed. Only\r\nthose mushrooms that are not hit by a single tree survive.Knowing that\r\nall the trees fall independently of each other (i.e., all the events are\r\nmutually independent, and besides, the trees do not interfere with other\r\ntrees falling in an arbitrary direction), the supreme oracle was also\r\nable to quickly calculate what would be the expectation of the total\r\npower of the mushrooms which survived after the storm. His calculations\r\nultimately saved the mushroom gnomes from imminent death.Natalia, as a\r\ngood Olympiad programmer, got interested in this story, and she decided\r\nto come up with a way to quickly calculate the expectation of the sum of\r\nthe surviving mushrooms\u2019 power.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <cmath>\n#include <memory.h>\n#include <string>\n#include <set>\nusing namespace std;\n#define forn(i,n) for(int i=0;i<(n);++i)\n#define forv(i,v) forn(i,(int)(v).size())\n#define iinf 1000000000\n#define all(v) (v).begin(),(v).end()\n#define pb push_back\n#define mp make_pair\n#define lng long long\n#define eps 1e-8\n#define SQ(a) ((a)*(a))\n#define PI 3.14159265359\n#define index asdindex\n#define FI first\n#define SE second\n\nint n,m;\nint A[110000];\nint H[110000];\nint L[110000];\nint R[110000];\npair<int,int> mush[110000];\npair<double,int> add[110000];\n\nint main(){\n#ifdef __ASD__\n\tfreopen(\"input.txt\",\"r\",stdin);freopen(\"output.txt\",\"w\",stdout);\n#endif\n\n\tios_base::sync_with_stdio(false);\n\n\tcin>>n>>m;\n\tforn(i,n)\n\t\tcin>>A[i]>>H[i]>>L[i]>>R[i];\n\tforn(i,m)\n\t\tcin>>mush[i].FI>>mush[i].SE;\n\tsort(mush,mush+m);\n\tforn(i,n){\n\t\tpair<double,int> v(0.,0);\n\t\tif(L[i]==100)\n\t\t\tv.SE=1;\n\t\telse\n\t\t\tv.FI=log(1-1.*L[i]/100);\n\t\tint p=lower_bound(mush,mush+m,mp(A[i]-H[i],-iinf))-mush;\n\t\tadd[p].FI+=v.FI;\n\t\tadd[p].SE+=v.SE;\n\t\tp=lower_bound(mush,mush+m,mp(A[i],-iinf))-mush;\n\t\tadd[p].FI-=v.FI;\n\t\tadd[p].SE-=v.SE;\n\t\tv=mp(0.,0);\n\t\tif(R[i]==100)\n\t\t\tv.SE=1;\n\t\telse\n\t\t\tv.FI=log(1-1.*R[i]/100);\n\t\tp=lower_bound(mush,mush+m,mp(A[i],+iinf))-mush;\n\t\tadd[p].FI+=v.FI;\n\t\tadd[p].SE+=v.SE;\n\t\tp=lower_bound(mush,mush+m,mp(A[i]+H[i],+iinf))-mush;\n\t\tadd[p].FI-=v.FI;\n\t\tadd[p].SE-=v.SE;\n\t}\n\n\tdouble res=0;\n\n\tdouble l=0;\n\tint z=0;\n\tforn(i,m){\n\t\tl+=add[i].FI;\n\t\tz+=add[i].SE;\n\t\tif(z<0)\n\t\t\texit(3234);\n\t\tif(z==0)\n\t\t\tres+=mush[i].SE*exp(l);\n\t}\n\tprintf(\"%.15lf\",res);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "probabilities",
        "sortings"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Mushroom Gnomes - 2.json",
    "editorial_link": "https://codeforces.com//blog/entry/3462",
    "editorial": "First of all - the answer is the sum for all mushrooms of the probabilities of not being destroyed multiplied by that mushroom's power. That is a simple property of random variables' means.\n\nSo we come to the equivalent statement: we still have mushrooms, but now instead of trees we have a family of segments with probabilities arranged to them. Every segment \"exists\" with this probability, otherwise it doesn't, and all these events are independent. We want to count the sum of probabilities (with weights) for each mushroom not to lie in any \"existing\" segment. (Note that we can reformulate the statement this way because any segments containing any fixed point are truly independent: they can't belong to the same tree. Thus the probability to survive for any point in this statement is equal to the probability for this point in the original statement).\n\nNow, how do we count this? There are several ways:\n\n1) \"Scanning line\". If we go from left to right, we can meet three kinds of events: \"the segment i started\", \"the segment i finished\", \"the mushroom j found\". We can easily support the probability of current point being covered by \"existing\" segment if we multiply it by segment's probability when we find its beginning and divide by it if we find its end. If we find a mushroom by the way, we can add the known probability to answer (multiplied by its power). To perform the above trick we just sort the array of events by x-coordinate and iterate over it.\n\nThis solution is good in theory, but in practice it has a flaw: if the number of segments is large, after multiplying lots of real numbers less then 1 we can exceed the negative explonent of the real type used, and thus get a 0 in a variable instead of desired value. And after any number of divisions it still would be 0, so we couldn't get any sane answer anymore.\n\nThis trouble can be resolved in several ways (without changing the solution much):\n\na) We can have no more than 101 distinct values of probabilities for segments. So, if we store an array for quantities of segments containing current point and having a corresponding probability, we just add and substract 1's from array's elements. When we find a mushroom we find the product of degrees with exponents stored in array, spending ~100 operations.\n\nb) We can store a set of segments containing current point. Every operation with set works in O(log N) time, and iterating over the whole set works in O(N) time. So, upon meeting mushroom we iterate over set and multiply the probabilities for all segments in it.\nThe next thing that helps us is that we can drop the answer for current mushroom if it's too small. If we don't store the segments with probability 1, the most number of segments which probabilities' product more than 1e-8 is about 2000 (since 0.99 ^ 2000 < 1e-8). So we can count everything in time.\n\nc) If we use logs of probabilities instead of themselves, we have to add and substract them instead of multiplying and dividing. This way we won't encounter any precision troubles.\n\n2) Segment tree.\n\nLet's sort the mushrooms by their coordinates. Let's also assume we have some set of segments and already counted the desired probabilities. And now we want to add a new segment to the set. What will change? The probabilities of mushrooms lying in this segment (and thus forming a segment in the array) will multiply by segment's probability.\nNow it's clear we can use multiplication segment tree (or simple addition segment tree if we use logs again) to perform the queries for all segments and then sum up the elements in the end.\n\nAbout the strange score and pretest: we discovered the trouble with precision quite late, and realized that it makes the problem way harder ('cause it's hard to predict during writing and submission phases). What's worse, it won't show itself on the small tests. So we decided to \"show up\" the test and let the contestants solve this additional problem, for additional score. (However, not all solutions from above list do actually deal with this problem. Unfortunately, we didn't came up with them beforehand.)"
}