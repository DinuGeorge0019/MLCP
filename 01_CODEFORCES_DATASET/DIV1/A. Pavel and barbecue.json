{
    "link": "https://codeforces.com//contest/759/problem/A",
    "problemId": "89810",
    "problem_idx": "A",
    "shortId": "759A",
    "contest_number": "759",
    "problem_submissions": {
        "D": [
            24042663,
            24044352,
            24045382,
            24043506,
            24045238,
            24043490,
            24042979,
            24045976,
            24046805,
            24046489,
            24045414,
            24046878,
            24045586,
            24044218,
            24046750,
            24048837,
            24048930,
            24045107,
            24049310,
            24047941
        ],
        "C": [
            24039992,
            24041637,
            24042097,
            24039244,
            24042431,
            24038977,
            24045787,
            24042805,
            24042270,
            24042690,
            24043790,
            24042556,
            24043437,
            24048532,
            24043622,
            24043222,
            24044113,
            29763466,
            29763430,
            24060556,
            24048425,
            24043154,
            24044032
        ],
        "B": [
            24037454,
            24038457,
            24039020,
            24040925,
            24038375,
            24044395,
            24038784,
            24039274,
            24038903,
            24039124,
            24039288,
            24039629,
            24040886,
            24038009,
            24039848,
            24039613,
            24036880,
            24038463,
            24040006,
            24040241
        ],
        "A": [
            24036272,
            24036509,
            24037538,
            24045297,
            24036223,
            24045401,
            24036423,
            24037461,
            24037032,
            24036975,
            24036471,
            24037688,
            24038305,
            24036140,
            24037910,
            24037165,
            24039125,
            24036572,
            24037614,
            24038031
        ],
        "E": [
            24052445,
            24051804,
            24055034
        ]
    },
    "name": "A. Pavel and barbecue",
    "statement": "Pavel cooks barbecue. There are skewers, they lay on a brazier in a row,\r\neach on one of positions. Pavel wants each skewer to be cooked some time\r\nin every of positions in two directions: in the one it was directed\r\noriginally and in the reversed direction.Pavel has a plan: a permutation\r\nand a sequence , consisting of zeros and ones. Each second Pavel move\r\nskewer on position to position , and if equals then he reverses it. So\r\nhe hope that every skewer will visit every position in both\r\ndirections.Unfortunately, not every pair of permutation and sequence\r\nsuits Pavel. What is the minimum total number of elements in the given\r\npermutation and the given sequence he needs to change so that every\r\nskewer will visit each of placements? Note that after changing the\r\npermutation should remain a permutation as well.There is no problem for\r\nPavel, if some skewer visits some of the placements several times before\r\nhe ends to cook. In other words, a permutation and a sequence suit him\r\nif there is an integer (), so that after seconds each skewer visits each\r\nof the placements.It can be shown that some suitable pair of permutation\r\nand sequence exists for any .\r\n",
    "solutions": [
        "#include <cstdio>\n\nint a[200002];\nint d[200002];\nint v[200002];\n\nint main() {\n\tint i, j, n, t, r = 1;\n\tscanf(\"%d\", &n);\n\tfor (i = 1; i <= n; i++) scanf(\"%d\", &a[i]);\n\tfor (i = 0; i < n; i++) {\n\t\tscanf(\"%d\", &d[i]);\n\t\tr ^= d[i];\n\t}\n\tt = 0;\n\tfor (i = 1; i <= n; i++) if (!v[i]) {\n\t\tt++;\n\t\tfor (j = i; !v[j]; j = a[j]) v[j] = 1;\n\t}\n\tprintf(\"%d\", r + (t > 1 ? t : 0));\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "dsu"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Pavel and barbecue.json",
    "editorial_link": "https://codeforces.com//blog/entry/49946",
    "editorial": "At first, let's deal with the permutation. We can see that p should have exactly one cycle to suit Pavel. The minimum number of changes is 0 if there is only one cycle, and the number of cycles if there is more than one cycle.\n\nWhat should we do with b? We can see that the skewers visit a particular position x in the same direction again and again if and only if the total number of ones in b is even. If the total number of ones in b is odd, then each time a skewer visits a particular position x, it has direction different from the previous time. Thus, the condition is satisfied if and only if the number of ones in b is odd. We should add 1 to the answer if it isn't."
}