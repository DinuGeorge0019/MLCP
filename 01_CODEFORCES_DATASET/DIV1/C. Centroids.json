{
    "link": "https://codeforces.com//contest/708/problem/C",
    "problemId": "68952",
    "problem_idx": "C",
    "shortId": "708C",
    "contest_number": "708",
    "problem_submissions": {
        "D": [
            20128638,
            20126204,
            20127943,
            20128433,
            20129319,
            20131176,
            20131436,
            20129838,
            20122993,
            20128159,
            20142291,
            20131523,
            20133302
        ],
        "C": [
            20118349,
            20120224,
            20122617,
            20118594,
            20120712,
            20117957,
            20121003,
            20121397,
            20122448,
            20125761,
            20125377,
            20142883,
            20115423,
            20116938,
            20120664,
            20122725,
            20120078,
            20120943
        ],
        "B": [
            20114040,
            20113824,
            20115208,
            20114995,
            20116521,
            20114682,
            20122861,
            20116437,
            20115616,
            20134188,
            20115824,
            20122403,
            20114546,
            20119679,
            20134838,
            20114458,
            20118558,
            20114710,
            20134501
        ],
        "A": [
            20109754,
            20109973,
            20109781,
            20109720,
            20110304,
            20110371,
            20110361,
            20110988,
            20111867,
            20110273,
            20109747,
            20109936,
            20109851,
            20109665,
            20123051,
            20111085,
            20110162,
            20110043,
            20110060
        ],
        "E": [
            20132586,
            20171243,
            20148122,
            20129101,
            20132661,
            20128262,
            20149149
        ]
    },
    "name": "C. Centroids",
    "statement": "is a connected acyclic graph. Suppose you are given a tree consisting of\r\nvertices. The vertex of this tree is called if the size of each\r\nconnected component that appears if this vertex is removed from the tree\r\ndoesn\u2019t exceed .You are given a tree of size and can perform no more\r\nthan one edge replacement. is the operation of removing one edge from\r\nthe tree (without deleting incident vertices) and inserting one new edge\r\n(without adding new vertices) in such a way that the graph remains a\r\ntree. For each vertex you have to determine if it\u2019s possible to make it\r\ncentroid by performing no more than one edge replacement.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nconst int N = 400200;\nint n;\nvector<int> g[N];\nbool ans[N];\nint sz[N];\n\nvoid dfs(int v)\n{\n\tsz[v] = 1;\n\tfor (int u : g[v])\n\t{\n\t\tif (sz[u] != -1) continue;\n\t\tdfs(u);\n\t\tsz[v] += sz[u];\n\t}\n\treturn;\n}\n\nvoid dfsSolve(int v, int s)\n{\n\tans[v] = (2 * (n - sz[v] - s)) <= n;\n\tfor (int u : g[v])\n\t\tif (sz[u] < sz[v])\n\t\t\tdfsSolve(u, s);\n\treturn;\n}\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tint v, u;\n\t\tscanf(\"%d%d\", &v, &u);\n\t\tv--;u--;\n\t\tg[v].push_back(u);\n\t\tg[u].push_back(v);\n\t}\n\tfor (int i = 0; i < n; i++)\n\t\tsz[i] = -1;\n\tdfs(0);\n\tint v = 0;\n\twhile(true)\n\t{\n\t\tint w = -1;\n\t\tfor (int u : g[v])\n\t\t{\n\t\t\tif (sz[u] > sz[v]) continue;\n\t\t\tif (2 * sz[u] >= n)\n\t\t\t{\n\t\t\t\tw = u;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (w == -1) break;\n\t\tv = w;\n\t}\n\tif (2 * sz[v] == n)\n\t{\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tprintf(\"1 \");\n\t\tprintf(\"\\n\");\n\t\treturn 0;\n\t}\n\tfor (int i = 0; i < n; i++)\n\t\tsz[i] = -1;\n\tdfs(v);\n\tans[v] = 1;\n\tint m1 = -1, m2 = -1;\n\tfor (int u : g[v])\n\t{\n\t\tif (sz[u] > m1)\n\t\t{\n\t\t\tm2 = m1;\n\t\t\tm1 = sz[u];\n\t\t}\n\t\telse if (sz[u] > m2)\n\t\t\tm2 = sz[u];\n\t}\n\tfor (int u : g[v])\n\t{\n\t\tif (sz[u] == m1)\n\t\t\tdfsSolve(u, m2);\n\t\telse\n\t\t\tdfsSolve(u, m1);\n\t}\n\tfor (int i = 0; i < n; i++)\n\t\tprintf(\"%d \", (int)ans[i]);\n\tprintf(\"\\n\");\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dfs and similar",
        "dp",
        "graphs",
        "greedy",
        "trees"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Centroids.json",
    "editorial_link": "https://codeforces.com//blog/entry/46763",
    "editorial": "The first observation is that to make vertex a centroid we need to\r\nchoose some subtree not containing with size not exceeding (assume its\r\nroot is ), remove an edge between its subtree and the remaining tree,\r\nand add an edge between and , in such a way that subtrees of all\r\nchildren of have size not exceeding .Consider the centroid of the tree,\r\nlet\u00e2\u0080\u0099s make it a root. Assume are the neighbours of , and are the\r\nsubtrees of these vertices. Then it is easy to prove, that if some\r\nvertex can be made a centroid after replacing one edge of the tree, then\r\nit can be done using one of the following options: Remove some edge for\r\nand add an edge . Remove the edge and add edge . It is possible, if the\r\nsize of is exactly . This is true, because if the root of the subtree\r\nwhich we disconnect from the part of the tree containing is in some , ,\r\nthen we can move up to and disconnect the whole subtree , since its size\r\ndoes not exceed . If then the size of the disconnected subtree is more\r\nthan , since the sum of sizes of for plus vertex is already . So, the\r\nonly remaining option is , and the only possible edge to erase is ,\r\notherwise will be in the disconnected subtree.So we need to calculate\r\nthe sizes of all subtrees (array ) and then run dfs from . Vertex can be\r\nmade a centroid if ether , or (since we add edge to maximize , if the\r\nlast condition holds, then the number of vertices in the connected\r\ncomponent of , if is deleted from the tree, will not exceed so all the\r\ncondition for being centroid will hold). To check the second condition,\r\nwe need to find two maximums in the set . The described solution has\r\ncomplexity .\r\n"
}