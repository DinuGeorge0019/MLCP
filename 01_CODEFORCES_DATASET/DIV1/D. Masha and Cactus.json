{"link": "https://codeforces.com//contest/856/problem/D", "problemId": "121786", "problem_idx": "D", "shortId": "856D", "contest_number": "856", "problem_submissions": {"D": [30250286, 30248673, 30250147, 30250541, 30249770, 30271191], "C": [30249129, 30248932, 30248929, 30249736, 30251499, 30249147, 30250069, 30249822], "B": [30247472, 30247324, 30247880, 30249381, 30248057, 30247570, 30247709, 30248446], "A": [30246548, 30246864, 30247263, 30246924, 30246957, 30246458, 30246947, 30246849], "E": [30265847, 30259642]}, "name": "D. Masha and Cactus", "statement": "Masha is fond of cacti. When she was a little girl, she decided to plant\r\na tree. Now Masha wants to make a nice cactus out of her tree.Recall\r\nthat is a connected undirected graph that has no cycles. is a connected\r\nundirected graph such that each vertex belongs to at most one\r\ncycle.Masha has some additional edges that she can add to a tree. For\r\neach edge she knows which vertices it would connect and the of this\r\nedge. Masha can add some of these edges to the graph if the resulting\r\ngraph is a cactus. of the resulting cactus is sum of beauties of all\r\nadded edges. Help Masha find out what maximum of the resulting cactus\r\nshe can achieve.\r\n", "solutions": ["#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <set>\n#include <map>\n#include <utility>\n#include <cstdlib>\n#include <memory>\n#include <queue>\n#include <cassert>\n#include <cmath>\n#include <ctime>\n#include <complex>\n#include <bitset>\n#include <fstream>\n#include <unordered_map>\n#include <unordered_set>\n#include <numeric>\n\nusing namespace std;\n\n#define ws ws_____________________\n#define y1 y1_____________________\n#define y0 y0_____________________\n#define left left_________________\n#define right right_______________\n#define next next_________________\n#define prev prev_________________\n#define hash hash_________________\n\n#define pb push_back\n#define fst first\n#define snd second\n#define mp make_pair \n#define sz(C) ((int) (C).size())\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)\n#define all(C) begin(C), end(C)\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int uint;\ntypedef pair<int,int> pii;\ntypedef pair<ll, ll> pll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<pii> vii;\ntypedef long double ld;\ntypedef complex<double> cd;\n\n#ifdef LOCAL\n#define eprintf(args...) fprintf(stderr, args), fflush(stderr)\n#else\n#define eprintf(...) ;\n#endif\n\n#define FILE_NAME \"a\"\n\nstruct Edge {\n\tint a, b;\n\tint cost;\n\n\tvoid read() {\n\t\tscanf(\"%d%d%d\", &a, &b, &cost);\n\t\t--a;\n\t\t--b;\n\t}\n};\n\nint n, m;\nvvi g;\nvector<Edge> es;\n\nbool read() {\n\tif  (scanf(\"%d%d\", &n, &m) < 2) {\n\t\treturn 0;\n\t}\n\tg.clear();\n\tg.resize(n);\n\tfor (int i = 1; i < n; ++i) {\n\t\tint par;\n\t\tscanf(\"%d\", &par);\n\t\t--par;\n\t\tg[par].pb(i);\n\t}\n\tes.resize(m);\n\tforn(i, m) {\n\t\tes[i].read();\n\t}\n\treturn 1;\n}\n\nstruct FenwTree {\n\tvi t;\n\n\tFenwTree(int n = 0) {\n\t\tt.assign(n, 0);\n\t}\n\n\tint get(int r) {\n\t\tint s = 0;\n\t\tfor (int i = r; i >= 0; i &= i + 1, --i) {\n\t\t\ts += t[i];\n\t\t}\n\t\treturn s;\n\t}\n\n\tint get(int l, int r) {\n\t\treturn get(r) - get(l - 1);\n\t}\n\n\tvoid inc(int pos, int v) {\n\t\tfor (int i = pos; i < sz(t); i |= i + 1) {\n\t\t\tt[i] += v;\n\t\t}\n\t}\n};\n\nint LOG;\nvvi par;\nvi tin;\nvi tout;\nint timer;\nvector<vector<Edge>> es_node;\nvi dp;\nvi sum_dp;\nvi order;\nFenwTree fenwTree;\n\nbool upper(int a, int b) {\n\treturn tin[a] <= tin[b] && tout[b] <= tout[a];\n}\n\nint lca(int a, int b) {\n\tif  (upper(a, b)) {\n\t\treturn a;\n\t}\n\tif  (upper(b, a)) {\n\t\treturn b;\n\t}\n\tford(l, LOG) {\n\t\tif  (!upper(par[b][l], a)) {\n\t\t\tb = par[b][l];\n\t\t}\n\t}\n\treturn par[b][0];\n}\n\nvoid set_func(int v, int f) {\n\tfenwTree.inc(tin[v], f);\n\tfenwTree.inc(tout[v], -f);\n}\n\nint sum_func(int a, int b) {\n\tassert(upper(a, b));\n\tint ans = fenwTree.get(0, tin[b]);\n\tif  (a) {\n\t\tans -= fenwTree.get(0, tin[a] - 1);\n\t}\n\treturn ans;\n}\n\nvoid dfs0(int v, int p) {\n\ttin[v] = timer++;\n\torder.pb(v);\n\n\tpar[v][0] = p;\n\tfor (int i = 1; i < LOG; ++i) {\n\t\tpar[v][i] = par[par[v][i - 1]][i - 1];\n\t}\n\n\tfor (int to : g[v]) {\n\t\tdfs0(to, v);\n\t}\n\n\ttout[v] = timer++;\n\torder.pb(v);\n}\n\nvoid dfs(int v) {\n\tsum_dp[v] = 0;\n\tfor (int to : g[v]) {\n\t\tdfs(to);\n\t\tsum_dp[v] += dp[to];\n\t}\n\n\tdp[v] = sum_dp[v];\n\n\tauto find_son = [&](int u) {\n\t\tint L = 0;\n\t\tint R = sz(g[v]);\n\t\twhile (L != R - 1) {\n\t\t\tint M = (L + R) / 2;\n\t\t\tif  (tin[g[v][M]] <= tin[u]) {\n\t\t\t\tL = M;\n\t\t\t} else {\n\t\t\t\tR = M;\n\t\t\t}\n\t\t}\n\t\treturn L;\n\t};\n\n\tfor (const auto& e : es_node[v]) {\n\t\tint a = e.a;\n\t\tint b = e.b;\n\t\tassert(a != b);\n\n\t\tif  (tin[a] > tin[b]) {\n\t\t\tswap(a, b);\n\t\t}\n\n\t\tint cur = e.cost;\n\n\t\tconst int b_to = g[v].at(find_son(b));\n\t\tif  (a == v) {\n\t\t\tcur += sum_dp[b];\n\t\t\tcur += sum_func(b_to, b);\n\t\t\tcur += sum_dp[v] - dp[b_to];\n\t\t} else {\n\t\t\tconst int a_to = g[v].at(find_son(a));\n\t\t\tcur += sum_dp[a];\n\t\t\tcur += sum_func(a_to, a);\n\t\t\tcur += sum_dp[b];\n\t\t\tcur += sum_func(b_to, b);\n\t\t\tcur += sum_dp[v] - dp[a_to] - dp[b_to];\n\t\t}\n\n\t\tdp[v] = max(dp[v], cur);\n\t}\n\n\tfor (int to : g[v]) {\n\t\tset_func(to, sum_dp[v] - dp[to]);\n\t}\n}\n\nint solve() {\n\tLOG = 0;\n\twhile ((1 << LOG) < n) {\n\t\t++LOG;\n\t}\n\tpar.assign(n, vi(LOG));\n\ttimer = 0;\n\ttin.assign(n, 0);\n\ttout.assign(n, 0);\n\torder.clear();\n\n\tdfs0(0, 0);\n\n\tes_node.clear();\n\tes_node.resize(n);\n\tfor (const auto& e : es) {\n\t\tint lc = lca(e.a, e.b);\n\t\tes_node[lc].pb(e);\n\t}\n\n\tfenwTree = FenwTree(sz(order));\n\tdp.assign(n, 0);\n\tsum_dp.assign(n, 0);\n\tdfs(0);\n\n\treturn dp[0];\n}\n\nint main() {\n#ifdef LOCAL\n\tfreopen(FILE_NAME \".in\", \"r\", stdin);\n\t// freopen(FILE_NAME \".out\", \"w\", stdout);\n#endif\n\n\twhile (read()) {\n\t\tprintf(\"%d\\n\", solve());\n\t}\n\n#ifdef LOCAL\n\tcerr.precision(5);\n\tcerr << \"Time: \" << fixed << (double) clock() / CLOCKS_PER_SEC << endl;\n#endif\n\treturn 0;\n}\n\n"], "input": "", "output": "", "tags": ["dp", "trees"], "dificulty": "2400", "interactive": false}