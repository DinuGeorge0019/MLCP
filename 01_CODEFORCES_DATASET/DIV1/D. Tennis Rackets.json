{"link": "https://codeforces.com//contest/309/problem/D", "problemId": "3004", "problem_idx": "D", "shortId": "309D", "contest_number": "309", "problem_submissions": {"B": [3731099, 3730792, 3731042, 3731786, 3730550, 3730284, 3729908, 3730541, 3730449, 3730996, 3729978, 3731064, 3730199, 3730107], "D": [3730805, 3730544, 3730976, 3731589, 3734080, 3734069, 3734066, 3734061, 3734059, 3734056, 3734042, 3734033, 3730688], "E": [3730645], "A": [3729981, 3730417, 3729803, 3730204, 3729805, 3729780, 3729813, 3729791, 3729913, 3729965, 3729850, 3729792, 3729963, 3729911, 3731133], "C": [3729784, 3729949, 3730172, 3730228, 3729910, 3729943, 3730005, 3730049, 3730161, 3730116, 3730023, 3729795, 3729875, 3729810, 3730574, 3730818, 3729859]}, "name": "D. Tennis Rackets", "statement": "Professional sport is more than hard work. It also is the equipment,\r\ndesigned by top engineers. As an example, let\u2019s take tennis. Not only\r\nshould you be in great shape, you also need an excellent racket! In this\r\nproblem your task is to contribute to the development of tennis and to\r\nhelp to design a revolutionary new concept of a racket!The concept is a\r\ntriangular racket. Ant it should be not just any triangle, but a regular\r\none. As soon as you\u2019ve chosen the shape, you need to stretch the net. By\r\nthe time you came the rocket had holes drilled on each of its sides. The\r\nholes divide each side into equal parts. At that, the closest to each\r\napex holes on each side are made for better ventilation only and you\r\ncannot stretch the net through them. The next revolutionary idea as to\r\nstretch the net as obtuse triangles through the holes, so that for each\r\ntriangle all apexes lay on different sides. Moreover, you need the net\r\nto be stretched along every possible obtuse triangle. That\u2019s where we\r\nneed your help help us to count the number of triangles the net is going\r\nto consist of.Two triangles are considered to be different if their\r\npictures on the fixed at some position racket are different.\r\n", "solutions": ["#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n\nusing namespace std;\n\ntypedef unsigned uint;\ntypedef long long Int;\ntypedef vector<int> vint;\ntypedef pair<int,int> pint;\n#define mp make_pair\n\ntemplate<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << \" \"; cout << endl; }\ntemplate<class T> void chmin(T &t, T f) { if (t > f) t = f; }\ntemplate<class T> void chmax(T &t, T f) { if (t < f) t = f; }\nint in() { int x; scanf(\"%d\", &x); return x; }\n\nint N, M;\nInt anss[50010];\n\nint main() {\n\tint a, b;\n\t\n\tfor (; ~scanf(\"%d%d\", &N, &M); ) {\n\t\t++N;\n\t\t++M;\n\t\tfor (a = M; a <= N - M; ++a) {\n\t\t\tif (a * 2 > N) {\n\t\t\t\tanss[a] = anss[N - a];\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tanss[a] = 0;\n\t\t\tfor (b = M; b <= N - M; ++b) {\n\t\t\t\tint nmr = (N - a) * (2 * a - b);\n\t\t\t\tint dnm = a + b;\n\t\t\t\tint x = (nmr < 0) ? (nmr / dnm) : ((nmr + dnm - 1) / dnm);\n// cout<<a<<\" \"<<b<<\" \"<<x<<endl;\n\t\t\t\tif (x <= M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tchmin(x, N - M + 1);\n\t\t\t\tanss[a] += x - M;\n\t\t\t}\n\t\t}\n\t\tInt ans = 0;\n\t\tfor (a = M; a <= N - M; ++a) {\n\t\t\tans += anss[a];\n\t\t}\n\t\tans *= 3;\n\t\tcout << ans << endl;\n\t}\n\t\n\treturn 0;\n}\n\n"], "input": "", "output": "", "tags": ["brute force", "geometry"], "dificulty": "2700", "interactive": false}