{
    "link": "https://codeforces.com//contest/933/problem/A",
    "problemId": "156718",
    "problem_idx": "A",
    "shortId": "933A",
    "contest_number": "933",
    "problem_submissions": {
        "E": [
            35263883,
            35251948,
            35268367,
            35268343,
            35258532,
            35265034,
            35258504,
            35265045
        ],
        "D": [
            35253928,
            35258185,
            35262993,
            35255562,
            35257209,
            35258119,
            35266124,
            35259046,
            35259628,
            35259700,
            35265335,
            35260449
        ],
        "B": [
            35233893,
            35242633,
            35232112,
            35233002,
            35238615,
            35243022,
            35243572,
            35238260,
            35247862,
            35234313,
            35245448,
            35242161,
            35237846,
            35238319,
            35230597,
            35242429,
            35250941,
            35238138,
            35236021
        ],
        "C": [
            35231166,
            35245330,
            35230279,
            35242029,
            49040337,
            35232953,
            35241307,
            35235433,
            36073540,
            35240997,
            35235741,
            35461289,
            35244755
        ],
        "A": [
            35230392,
            35232143,
            35233996,
            35230183,
            35230822,
            35233720,
            35235277,
            35231518,
            35235425,
            35231181,
            35231151,
            35232842,
            35231443,
            35233064,
            35232632,
            35243872,
            35232580,
            35231791,
            35232474,
            35231989
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/57763",
    "editorial": "Since , it\u00e2\u0080\u0099s equivalent to find a longest subsequence like . By an easy\ndynamic programming we can find it in or time. You can see solution in\nthe model solution below. Here we introduce an O(n) approach: Since the\nsubsequence can be split into 4 parts () , we can set be the longest\nsubsequence of with first parts.\n",
    "name": "A. A Twisty Movement",
    "statement": "A performer holding the rod low is represented by a , while one holding\r\nit high is represented by a . Thus, the line of performers can be\r\nrepresented by a sequence .Little Tommy is among them. He would like to\r\nchoose an interval (), then reverse so that the length of the longest\r\nnon-decreasing subsequence of the new sequence is maximum.A\r\nnon-decreasing subsequence is a sequence of indices , such that and .\r\nThe length of the subsequence is .\r\n",
    "solutions": [
        "#include <iostream>#include <cstdio>#include <cstdlib>#include <algorithm>#include <cmath>#include <vector>#include <set>#include <map>#include <unordered_set>#include <unordered_map>#include <queue>#include <ctime>#include <cassert>#include <complex>#include <string>#include <cstring>using namespace std;\u00a0#ifdef LOCAL\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)#else\t#define eprintf(...) 42#endif\u00a0typedef long long ll;typedef pair<int, int> pii;#define mp make_pair\u00a0const int N = 2020;int n;int a[N];int ans = 0;\u00a0int main(){//\tfreopen(\"input.txt\", \"r\", stdin);//\tfreopen(\"output.txt\", \"w\", stdout);\u00a0\tscanf(\"%d\", &n);\tfor (int i = 0; i < n; i++)\t\tscanf(\"%d\", &a[i]);\tfor (int z = 0; z <= n; z++) {\t\tint ans1 = 0, ans2 = 0;\t\tint sum = 0;\t\tfor (int i = 0; i < z; i++)\t\t\tsum += (int)(a[i] == 1);\t\tans1 = max(ans1, sum);\t\tfor (int i = z - 1; i >= 0; i--) {\t\t\tif (a[i] == 1)\t\t\t\tsum--;\t\t\telse\t\t\t\tsum++;\t\t\tans1 = max(ans1, sum);\t\t}\t\tsum = 0;\t\tfor (int i = z; i < n; i++)\t\t\tsum += (int)(a[i] == 2);\t\tans2 = max(ans2, sum);\t\tfor (int i = z; i < n; i++) {\t\t\tif (a[i] == 1)\t\t\t\tsum++;\t\t\telse\t\t\t\tsum--;\t\t\tans2 = max(ans2, sum);\t\t}\t\tans = max(ans, ans1 + ans2);\t}\tprintf(\"%d\\n\", ans);\u00a0\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. A Twisty Movement.json"
}