{"link": "https://codeforces.com//contest/464/problem/B", "problemId": "13525", "problem_idx": "B", "shortId": "464B", "contest_number": "464", "problem_submissions": {"D": [7709708, 7703672, 7707768, 7709029, 7710992, 7714718, 7711118, 7710774, 7711609, 7712288, 7712591, 7712787, 7710684, 7706753], "B": [7707364, 7708530, 7705479, 7704768, 7708864, 7707171, 7708559, 7708825, 7709917, 7707346, 7709741, 7707538, 8183505, 7706050, 7707819, 7709775], "C": [7704070, 7705447, 7708594, 7706019, 7703932, 7708284, 7708480, 7706511, 7704666, 7709574, 7707010, 7705245, 7706182, 7708374, 7703721, 7711028, 7703271], "A": [7701335, 7709425, 7702860, 7710099, 7708555, 7702605, 7703010, 7704248, 7702307, 7705030, 7704432, 7701212, 7711093, 7707511, 7702270, 7703295, 7705744]}, "name": "B. Restore Cube ", "statement": "Peter had a cube with non-zero length of a side. He put the cube into\r\nthree-dimensional space in such a way that its vertices lay at integer\r\npoints (it is possible that the cube\u2019s sides are not parallel to the\r\ncoordinate axes). Then he took a piece of paper and wrote down eight\r\nlines, each containing three integers coordinates of cube\u2019s vertex (a\r\nsingle line contains coordinates of a single vertex, each vertex is\r\nwritten exactly once), put the paper on the table and left. While Peter\r\nwas away, his little brother Nick decided to play with the numbers on\r\nthe paper. In one operation Nick could swap some numbers (Nick didn\u2019t\r\nswap numbers from distinct lines). Nick could have performed any number\r\nof such operations.When Peter returned and found out about Nick\u2019s\r\nmischief, he started recollecting the original coordinates. Help Peter\r\nrestore the original position of the points or else state that this is\r\nimpossible and the numbers were initially recorded incorrectly.\r\n", "solutions": ["#include <cstring>\n#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <memory.h>\n#include <cassert>\n\nusing namespace std;\n\nconst long long inf = (long long)1e18;\n\nint x[8][3];\nlong long vx[8][3];\nlong long d[8];\n\nvoid dfs(int v) {\n  if (v == 8) {\n    long long side = -1;\n    for (int i = 0; i < 8; i++) {\n      long long mn = inf;\n      int id1 = -1;\n      int id2 = -1;\n      int id3 = -1;\n      int id4 = -1;\n      for (int j = 0; j < 8; j++) {\n        if (i == j) {\n          continue;\n        }\n        d[j] = 0;\n        for (int q = 0; q < 3; q++) {\n          vx[j][q] = x[j][q] - x[i][q];\n          d[j] += vx[j][q] * vx[j][q];\n        }\n        if (d[j] < mn) {\n          mn = d[j];\n          id1 = -1;\n          id2 = -1;\n          id3 = -1;\n          id4 = -1;\n        }\n        if (d[j] == mn) {\n          id4 = id3;\n          id3 = id2;\n          id2 = id1;\n          id1 = j;\n        }\n      }\n      if (id4 != -1 || id3 == -1) {\n        return;\n      }\n      if (mn == 0) {\n        return;\n      }\n      if (side == -1) {\n        side = mn;\n      }\n      if (side != mn) {\n        return;\n      }\n      if (vx[id1][0] * vx[id2][0] + vx[id1][1] * vx[id2][1] + vx[id1][2] * vx[id2][2] != 0) {\n        return;\n      }\n      if (vx[id1][0] * vx[id3][0] + vx[id1][1] * vx[id3][1] + vx[id1][2] * vx[id3][2] != 0) {\n        return;\n      }\n      if (vx[id3][0] * vx[id2][0] + vx[id3][1] * vx[id2][1] + vx[id3][2] * vx[id2][2] != 0) {\n        return;\n      }\n    }\n    puts(\"YES\");\n    for (int i = 0; i < 8; i++) {\n      printf(\"%d %d %d\\n\", x[i][0], x[i][1], x[i][2]);\n    }\n    exit(0);\n    return;\n  }\n  sort(x[v], x[v] + 3);\n  do {\n    dfs(v + 1);\n  } while (next_permutation(x[v], x[v] + 3));\n}\n\nint main() {\n  for (int i = 0; i < 8; i++) {\n    scanf(\"%d %d %d\", x[i] + 0, x[i] + 1, x[i] + 2);\n  }\n  dfs(1);\n  puts(\"NO\");\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "geometry"], "dificulty": "2000", "interactive": false}