{
    "link": "https://codeforces.com//contest/993/problem/C",
    "problemId": "190654",
    "problem_idx": "C",
    "shortId": "993C",
    "contest_number": "993",
    "problem_submissions": {
        "F": [
            39315278,
            39320695,
            39316458,
            39677099
        ],
        "E": [
            39303954,
            44679848,
            44679803,
            39298654,
            39318832,
            39301524,
            39298924,
            39298197,
            39302275,
            39302298,
            39298229,
            39298156,
            39300839,
            39300092,
            39352453,
            39352393,
            39352354,
            39303455,
            39304019,
            39307250,
            39300445,
            39304215,
            39295908,
            39310154
        ],
        "D": [
            39301603,
            39306272,
            39305543,
            39303758,
            39301872,
            39306720,
            39307619,
            39312577,
            39306349,
            39308036,
            39310122,
            39446648,
            39311312,
            39310199,
            39311258,
            39311908,
            39309211,
            39312503,
            41629328,
            39305033
        ],
        "C": [
            39298935,
            39297300,
            39298508,
            39300315,
            39304660,
            39297439,
            39298052,
            39296218,
            39303022,
            39303419,
            39304668,
            39300073,
            39299818,
            39298805,
            39302281,
            39300110,
            39306526,
            39299493
        ],
        "B": [
            39297062,
            39295065,
            39295700,
            39296902,
            39295145,
            39299299,
            39296202,
            39294546,
            39301730,
            39301559,
            39302344,
            39295884,
            39296798,
            39301508,
            39306228,
            39297394,
            39303701,
            39296320
        ],
        "A": [
            39295010,
            39292992,
            39292988,
            39294233,
            39305393,
            39293507,
            39294073,
            39292365,
            39300142,
            39294094,
            39296117,
            39292842,
            39294818,
            39295302,
            39304183,
            39295611,
            39298852,
            39293790
        ]
    },
    "name": "C. Careful Maneuvering",
    "statement": "There are two small spaceship, surrounded by two groups of enemy larger\r\nspaceships. The space is a two-dimensional plane, and one group of the\r\nenemy spaceships is positioned in such a way that they all have integer\r\ny-coordinates, and their x-coordinate is equal to -100, while the second\r\ngroup is positioned in such a way that they all have integer\r\ny-coordinates, and their x-coordinate is equal to 100.Each spaceship in\r\nboth groups will simultaneously shoot two laser shots (infinite ray that\r\ndestroys any spaceship it touches), one towards each of the small\r\nspaceships, all at the same time. The small spaceships will be able to\r\navoid all the laser shots, and now want to position themselves at some\r\nlocations with x=0 (with not necessarily integer y-coordinates), such\r\nthat the rays shot at them would destroy as many of the enemy spaceships\r\nas possible. Find the largest numbers of spaceships that can be\r\ndestroyed this way, assuming that the enemy spaceships canâ€™t avoid laser\r\nshots.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define mp make_pair\n\nint ANS;\n\nconst int C = 40400;\nconst int N = 62;\nint n, m;\nint a[N], b[N];\nvector<int> da, db;\nint c[C];\nbool ua[N], ub[N];\n\nvoid solve(int S) {\n\tint st = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tua[i] = 0;\n\t\tfor (int y : db)\n\t\t\tua[i] |= a[i] + y == S;\n\t\tst += ua[i];\n\t\tif (!ua[i])\n\t\t\tfor (int y : db)\n\t\t\t\tc[a[i] + y]++;\n\t}\n\tfor (int i = 0; i < m; i++) {\n\t\tub[i] = 0;\n\t\tfor (int x : da)\n\t\t\tub[i] |= x + b[i] == S;\n\t\tst += ub[i];\n\t\tif (!ub[i])\n\t\t\tfor (int x : da)\n\t\t\t\tc[x + b[i]]++;\n\t}\n\tfor (int x : da)\n\t\tfor (int y : db) {\n\t\t\tANS = max(ANS, st + c[x + y]);\n\t\t\tc[x + y] = 0;\n\t\t}\n}\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%d\", &a[i]);\n\t\ta[i] += C / 4;\n\t}\n\tfor (int i = 0; i < m; i++) {\n\t\tscanf(\"%d\", &b[i]);\n\t\tb[i] += C / 4;\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tbool ok = true;\n\t\tfor (int x : da)\n\t\t\tok &= a[i] != x;\n\t\tif (ok) da.push_back(a[i]);\n\t}\n\tfor (int i = 0; i < m; i++) {\n\t\tbool ok = true;\n\t\tfor (int x : db)\n\t\t\tok &= b[i] != x;\n\t\tif (ok) db.push_back(b[i]);\n\t}\n\tfor (int x : da)\n\t\tfor (int y : db)\n\t\t\tsolve(x + y);\n\tprintf(\"%d\\n\", ANS);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "geometry"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Careful Maneuvering.json",
    "editorial_link": "https://codeforces.com//blog/entry/60047",
    "editorial": "One way to solve the problem is to fix one spaceship in the left half and one spaceship in the right half, and assume that they shoot each other by the means of shooting towards one of the small spaceships. This gives us a coordinate of one small spaceship. Once we have it, iterate over all the large spaceships, mark those that are already shot.\n\nNow all that is left is to find the best place to position the second spaceship. To do that, create a map from a coordinate to number of unmarked spaceships that would be destroyed if the second small spaceship is at that coordinate. Iterate over each unique spaceship coordinate on the left and each unique spaceship coordinate on the right, and increment the value in the map that corresponds to the position of the second small spaceship that would result in those two large spaceships shooting each other down by the number of large unmarked spaceships at the fixed coordinates.\n\nThen update the final answer with the largest value in the map plus the number of marked spaceships and move to the next pair of spaceships in the outer loop.",
    "hint": []
}