{"link": "https://codeforces.com//contest/232/problem/D", "problemId": "1947", "problem_idx": "D", "shortId": "232D", "contest_number": "232", "problem_submissions": {"D": [2346447, 2453840, 2673464, 2351686, 2351635, 2361185, 2356801, 2386026], "A": [2343160, 2344433, 2341097, 2341781, 2340598, 2342868, 2342498, 2340984, 2340712, 2356088, 2341364, 2341135, 2343044, 2341523, 2341326, 2341345, 2341452], "B": [2340867, 2340703, 2342538, 2341256, 2342019, 2341112, 2341451, 2342353, 2341669, 2342315, 2342610, 2342080, 2342975, 2343085, 2343108, 2343200], "E": [2564230, 3726445, 2360898, 2389163, 2349135, 2349124], "C": [2348750, 2348392, 2352824, 2348892]}, "name": "D. Fence", "statement": "John Doe has a crooked fence, consisting of rectangular planks, lined up\r\nfrom the left to the right: the plank that goes -th (from left to right)\r\nhas width 1 and height . We will assume that the plank that goes -th\r\n(from left to right) has index .A from to is a sequence of planks of\r\nwood with indices from to inclusive, that is, planks with indices . The\r\nwidth of the piece of the fence from to is value .Two pieces of the\r\nfence from to and from to are called matching, if the following\r\nconditions hold: the pieces do not intersect, that is, there isn\u2019t a\r\nsingle plank, such that it occurs in both pieces of the fence; the\r\npieces are of the same width; for all the following condition holds: .\r\nJohn chose a few pieces of the fence and now wants to know how many\r\ndistinct matching pieces are for each of them. Two pieces of the fence\r\nare distinct if there is a plank, which belongs to one of them and does\r\nnot belong to the other one.\r\n", "solutions": ["#include <iostream>\n#include <iomanip>\n#include <stdio.h>\n#include <set>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <memory.h>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nconst int N = 400010;\n\nvector < pair <int, int> > b;\nint a[N], s[N], pz[N], g[N], ng[N], lcp[N], d[20][N];\nint m, n, i, j, k;\nint ma[N], ml[N], mr[N], ans[N];\n\nvoid modify(int q, int v) {\n  ma[q] = v;\n  int x = q;\n  while (x <= m) {\n    if (v < ml[x]) ml[x] = v;\n    x = (x | (x-1))+1;\n  }\n  x = q;\n  while (x > 0) {\n    if (v < mr[x]) mr[x] = v;\n    x &= x-1;\n  }\n}\n\nint findmin(int ll, int rr) {\n  if (ll > rr) return (int)1e9;\n  int res = (int)1e9, x = ll;\n  while ((x | (x-1))+1 <= rr) {\n    if (mr[x] < res) res = mr[x];\n    x = (x | (x-1))+1;\n  }\n  if (ma[x] < res) res = ma[x];\n  x = rr;\n  while ((x & (x-1)) >= ll) {\n    if (ml[x] < res) res = ml[x];\n    x &= x-1;\n  }\n  return res;\n}\n\nint ke;\nint e[N], es[N], ef[N], ew[N], sum[N], last[N], pred[N];\n\nvoid addev(int u, int ss, int ff, int wh) {\n  e[ke] = u;\n  es[ke] = ss;\n  ef[ke] = ff;\n  ew[ke] = wh;\n  ke++;\n}\n\nvoid addevent(int lower, int upper, int ss, int ff, int wh) {\n  addev(upper, ss, ff, wh);\n  if (lower > 0) addev(lower-1, ss, ff, ~wh);\n}\n\nint main() {\n//  freopen(\"in\",\"r\",stdin);\n//  freopen(\"out\",\"w\",stdout);\n  scanf(\"%d\", &n);\n  for (i=0;i<n;i++) scanf(\"%d\", s+i);\n  for (i=0;i<n-1;i++) s[i] = s[i+1]-s[i];\n  n--;\n  for (i=n;i<2*n;i++) s[i] = -s[i-n];\n  b.clear();\n  for (i=0;i<2*n;i++) b.push_back(make_pair(s[i], i));\n  sort(b.begin(), b.end());\n  int kg = 0;\n  i = 0;\n  while (i < 2*n) {\n    j = i;\n    while (j < 2*n && b[j].first == b[i].first) j++;\n    for (k=i;k<j;k++) {\n      a[k] = b[k].second;\n      pz[a[k]] = k;\n      g[k] = kg;\n    }\n    kg++;\n    i = j;\n  }\n  int step = 1, it = 0;\n  while (kg < 2*n) {\n    for (i=0;i<2*n;i++) d[it][a[i]] = g[i];\n    it++;\n    int nkg = 0;\n    i = 0;\n    while (i < 2*n) {\n      j = i;\n      while (j < 2*n && g[i] == g[j]) j++;\n      b.clear();\n      for (k=i;k<j;k++)\n        if (a[k]+step < 2*n) b.push_back(make_pair(g[pz[a[k]+step]], a[k]));\n        else b.push_back(make_pair(-1, a[k]));\n      sort(b.begin(), b.end());\n      for (k=0;k<j-i;k++) a[i+k] = b[k].second;\n      for (k=i;k<j;k++) {\n        if (k == i || b[k-i].first != b[k-i-1].first) nkg++;\n        ng[k] = nkg-1;\n      }\n      i = j;\n    }\n    for (i=0;i<2*n;i++) pz[a[i]] = i;\n    for (i=0;i<2*n;i++) g[i] = ng[i];\n    kg = nkg;\n    step <<= 1;\n  }\n  for (i=0;i<2*n;i++) {\n    int v = 0, x = a[i], y = a[i+1];\n    for (j=it-1;j>=0;j--)\n      if (x+v < 2*n && y+v < 2*n && d[j][x+v] == d[j][y+v]) v += (1 << j);\n    lcp[i] = v;\n/*    printf(\"%d\",a[i]);\n    for (j=a[i];j<2*n;j++) printf(\" %d\",s[j]);\n    printf(\"\\n\");\n    printf(\"%d\\n\",lcp[i]);\n*/\n  }\n  m = 2*n-1;\n  for (i=1;i<=m;i++) ma[i] = ml[i] = mr[i] = (int)1e9;\n  for (i=1;i<=m;i++) modify(i, lcp[i-1]);\n  int tt;\n  scanf(\"%d\", &tt);\n  ke = 0;\n  for (int qq=0;qq<tt;qq++) {\n    int ql, qr;\n    scanf(\"%d %d\", &ql, &qr);\n    if (ql == qr) ans[qq] = n; else {\n      ans[qq] = 0;\n      int x = pz[ql-1], ll, rr, mid;\n      ll = x-1; rr = m-1;\n      while (ll < rr) {\n        mid = (ll+rr+1) >> 1;\n        if (findmin(x+1,mid+1) >= qr-ql) ll = mid;\n        else rr = mid-1;\n      }\n      int upper = ll+1;\n      ll = 0; rr = x;\n      while (ll < rr) {\n        mid = (ll+rr) >> 1;\n        if (findmin(mid+1,x) >= qr-ql) rr = mid;\n        else ll = mid+1;\n      }\n      int lower = ll;\n      int ss = 1, ff = ql-(qr-ql+1);\n      if (ss <= ff) addevent(lower, upper, ss+n-1, ff+n-1, qq);\n      ss = qr+1; ff = n-(qr-ql+1)+2;\n      if (ss <= ff) addevent(lower, upper, ss+n-1, ff+n-1, qq);\n    }\n  }\n  for (i=0;i<2*n;i++) last[i] = -1;\n  for (i=0;i<ke;i++) {\n    pred[i] = last[e[i]];\n    last[e[i]] = i;\n  }\n  memset(sum,0,sizeof(sum));\n  for (i=0;i<2*n;i++) {\n    int x = a[i]+1;\n    while (x <= 2*n) {\n      sum[x]++;\n      x = (x | (x-1))+1;\n    }\n    j = last[i];\n    while (j >= 0) {\n      x = ef[j]+1;\n      while (x > 0) {\n        if (ew[j] >= 0) ans[ew[j]] += sum[x];\n        else ans[~ew[j]] -= sum[x];\n        x &= x-1;\n      }\n      x = es[j];\n      while (x > 0) {\n        if (ew[j] >= 0) ans[ew[j]] -= sum[x];\n        else ans[~ew[j]] += sum[x];\n        x &= x-1;\n      }\n      j = pred[j];\n    }\n  }\n  for (int qq=0;qq<tt;qq++) printf(\"%d\\n\", ans[qq]);\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "data structures", "string suffix structures"], "dificulty": "2900", "interactive": false}