{"link": "https://codeforces.com//contest/480/problem/B", "problemId": "15739", "problem_idx": "B", "shortId": "480B", "contest_number": "480", "problem_submissions": {"E": [8311013, 8313055, 8314156, 8325797, 8315473, 8325232, 11709971, 8353321], "C": [8305908, 8306095, 8306489, 8305168, 8306046, 8307120, 8307521, 8307102, 8305050, 8306309, 8306145, 8307452, 8307404, 8307470, 8307938, 8306829, 8309720, 8308359], "A": [8304671, 8302322, 8301986, 8303885, 8302500, 8302484, 8302315, 8302995, 8305921, 8302490, 8302288, 8303565, 8303850, 8303423, 8302746, 8302974, 8303485, 8317285], "B": [8303927, 8304607, 8304712, 8306656, 8304745, 8305167, 8304670, 8305422, 8307631, 8304999, 8304658, 8305487, 8305732, 8314422, 8305673, 8308163, 8305105, 8306250], "D": [8310575, 8311382, 8313441, 8312962, 8315083, 8315272, 8314092, 8316276, 8315227, 8311890, 8317405, 8315325, 8316637]}, "name": "B. Long Jumps", "statement": "Valery is a PE teacher at a school in Berland. Soon the students are\r\ngoing to take a test in long jumps, and Valery has lost his favorite\r\nruler! However, there is no reason for disappointment, as Valery has\r\nfound another ruler, its length is centimeters. The ruler already has\r\nmarks, with which he can make measurements. We assume that the marks are\r\nnumbered from 1 to in the order they appear from the beginning of the\r\nruler to its end. The first point coincides with the beginning of the\r\nruler and represents the origin. The last mark coincides with the end of\r\nthe ruler, at distance from the origin. This ruler can be repesented by\r\nan increasing sequence , where denotes the distance of the -th mark from\r\nthe origin (, ).Valery believes that with a ruler he can measure the\r\ndistance of centimeters, if there is a pair of integers and (), such\r\nthat the distance between the -th and the -th mark is exactly equal to\r\n(in other words, ). Under the rules, the girls should be able to jump at\r\nleast centimeters, and the boys should be able to jump at least ()\r\ncentimeters. To test the children\u2019s abilities, Valery needs a ruler to\r\nmeasure each of the distances and . Your task is to determine what is\r\nthe minimum number of additional marks you need to add on the ruler so\r\nthat they can be used to measure the distances and . Valery can add the\r\nmarks at any integer non-negative distance from the origin not exceeding\r\nthe length of the ruler.\r\n", "solutions": ["#include <bits/stdc++.h>\n\n/*** TEMPLATE CODE STARTS HERE ***/\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef long long ll;\ntypedef complex<double> pnt;\ntypedef pair<int, int> pii;\n\n#define RA(x) begin(x), end(x)\n#define FE(i, x) for (auto i = begin(x); i != end(x); ++i)\n#define SZ(x) ((int) (x).size())\n\ntemplate<class T>\nvoid splitstr(const string &s, vector<T> &out)\n{\n    istringstream in(s);\n    out.clear();\n    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));\n}\n\ntemplate<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }\n\nstatic void redirect(int argc, const char **argv)\n{\n    ios::sync_with_stdio(false);\n    if (argc > 1)\n    {\n        static filebuf f;\n        f.open(argv[1], ios::in);\n        cin.rdbuf(&f);\n        if (!cin)\n        {\n            cerr << \"Failed to open '\" << argv[1] << \"'\" << endl;\n            exit(1);\n        }\n    }\n\n    if (argc > 2)\n    {\n        static filebuf f;\n        f.open(argv[2], ios::out | ios::trunc);\n        cout.rdbuf(&f);\n        if (!cout)\n        {\n            cerr << \"Failed to open '\" << argv[2] << \"'\" << endl;\n        }\n    }\n}\n\n/*** TEMPLATE CODE ENDS HERE */\n\nstatic int can(const vi &a, const set<int> &have, int x)\n{\n    for (int v : a)\n        if (have.count(v + x))\n            return v;\n    return -1;\n}\n\nint main(int argc, const char **argv)\n{\n    redirect(argc, argv);\n    int N, L, x, y;\n    cin >> N >> L >> x >> y;\n    vi a(N);\n    set<int> have;\n    for (int i = 0; i < N; i++)\n    {\n        cin >> a[i];\n        have.insert(a[i]);\n    }\n\n    int can_x = can(a, have, x);\n    int can_y = can(a, have, y);\n    int can_xy = can(a, have, x + y);\n    vi ans;\n    if (can_x >= 0 || can_y >= 0)\n    {\n        if (can_x < 0)\n            ans.push_back(x);\n        if (can_y < 0)\n            ans.push_back(y);\n    }\n    else if (can_xy >= 0)\n    {\n        ans.push_back(can_xy + x);\n    }\n    else\n    {\n        int found = -1;\n        for (int v : a)\n            if (v >= x || v <= L - y)\n                if (have.count(v + (y - x)))\n                {\n                    if (v >= x)\n                        found = v - x;\n                    else\n                        found = v + y;\n                    break;\n                }\n        if (found >= 0)\n            ans.push_back(found);\n        else\n        {\n            ans.push_back(x);\n            ans.push_back(y);\n        }\n    }\n    cout << ans.size() << '\\n';\n    for (int i = 0; i < SZ(ans); i++)\n    {\n        if (i)\n            cout << ' ';\n        cout << ans[i];\n    }\n    cout << '\\n';\n\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "greedy", "hashing", "implementation", "sortings"], "dificulty": "1700", "interactive": false}