{
    "link": "https://codeforces.com//contest/1628/problem/A",
    "problemId": "1270542",
    "problem_idx": "A",
    "shortId": "1628A",
    "contest_number": "1628",
    "problem_submissions": {
        "F": [
            143704137,
            143703628,
            143702221,
            143703556,
            147001965
        ],
        "E": [
            143675713,
            143683767,
            143678064,
            143684015,
            143703839,
            143703586,
            143684851,
            143683465,
            143685498,
            143691038,
            143689260,
            143676465,
            143693250,
            143684297,
            143687706,
            143698977,
            143697149,
            143693737,
            143726859,
            143698932,
            143695817,
            143695968
        ],
        "D2": [
            143658634,
            143670285,
            143666637,
            143665499,
            143666995,
            143667409,
            143672399,
            143672413,
            143661151,
            143647661,
            143658816,
            143673791,
            143659789,
            143650476,
            143675004,
            143660718,
            143676678,
            143684084,
            143660907
        ],
        "D1": [
            143652051,
            143661015,
            143649637,
            143665355,
            143640835,
            143647447,
            143672291,
            143669534,
            143658393,
            143632054,
            143652557,
            143673638,
            143659662,
            143650805,
            143669620,
            143647751,
            143667415,
            143668369,
            143654580
        ],
        "C": [
            143648600,
            143653504,
            143662609,
            143671130,
            143659087,
            143671994,
            143662240,
            143665901,
            143679854,
            143654744,
            143666734,
            143658744,
            143650933,
            143640762,
            143660335,
            143673771,
            143662259,
            143663580,
            143684690
        ],
        "B": [
            143641041,
            143647996,
            143687560,
            143645776,
            143664691,
            143661275,
            143640613,
            143649322,
            143664737,
            143644329,
            143690738,
            143695054,
            143657006,
            143653454,
            143666253,
            143657114,
            143649062,
            143668019
        ],
        "A": [
            143633679,
            143636764,
            143632428,
            143638866,
            143635799,
            143637277,
            143632341,
            143633434,
            143635604,
            143658928,
            143634190,
            143633884,
            143633848,
            143634819,
            143640442,
            143650623,
            143643930,
            143639364,
            143636998
        ]
    },
    "name": "A. Meximum Array",
    "statement": "Mihai has just learned about the MEX concept and since he liked it so\r\nmuch, he decided to use it right away.Given an array a of n non-negative\r\nintegers, Mihai wants to create that is formed in the following\r\nway:While a is not empty: Choose an integer k (1\r\nleq k\r\nleq |a|). Append the MEX of the first k numbers of the array a to the\r\nend of array b and erase them from the array a, shifting the positions\r\nof the remaining numbers in a. But, since Mihai loves big arrays as much\r\nas the MEX concept, he wants the new array b to be the . So, Mihai asks\r\nyou to tell him what the maximum array b that can be created by\r\nconstructing the array optimally is.An array x is lexicographically\r\ngreater than an array y if in the first position where x and y differ\r\nx_i > y_i or if |x| > |y| and y is a prefix of x (where |x| denotes the\r\nsize of the array x).The of a set of non-negative integers is the\r\nminimal non-negative integer such that it is not in the set. For\r\nexample, ({{1, 2, 3}}) = 0 and ({{0, 1, 2, 4, 5}}) = 3.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 22.01.2022 17:34:53       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n      cin >> a[i];\n    }\n    vector<int> res;\n    vector<int> cnt(n + 1);\n    for (int i = 0; i < n; i++) {\n      cnt[a[i]] += 1;\n    }\n    int i = 0;\n    while (i < n) {\n      int mex = 0;\n      while (cnt[mex] > 0) {\n        mex += 1;\n      }\n      vector<bool> seen(mex);\n      int cc = 0;\n      while (i < n) {\n        if (a[i] < mex && !seen[a[i]]) {\n          seen[a[i]] = true;\n          cc += 1;\n        }\n        cnt[a[i]] -= 1;\n        i += 1;\n        if (cc == mex) {\n          break;\n        }\n      }\n      res.push_back(mex);\n    }\n    cout << res.size() << '\\n';\n    for (int i = 0; i < (int) res.size(); i++) {\n      cout << res[i] << \" \\n\"[i == (int) res.size() - 1];\n    }\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "greedy",
        "implementation",
        "math",
        "two pointers"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Meximum Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/99276",
    "editorial": "The splitting points can be picked greedily. Firstly, find the MEX of\r\nall suffixes, this can be easily done in or . Instead of removing\r\nelements, we consider that we need to split the array into some number\r\nof subarrays. Let be the index we are currently at and MEX() the MEX of\r\nthe set formed from the numbers .Start the process by looking at the\r\nfirst element, so initially. Then do the following process as long as :\r\nfind the first position such that MEX() MEX(), add this MEX to the array\r\nand do the same process starting from position , so . This process\r\nalways produces the optimal answer because if for each element in we\r\nchoose to remove the minimum amount of elements from to obtain the\r\nmaximum element , so we have more elements in the future to do the same\r\noptimal choices.Complexity: or depending on implementation.\r\n",
    "hint": []
}