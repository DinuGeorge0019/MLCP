{"link": "https://codeforces.com//contest/1010/problem/A", "problemId": "201802", "problem_idx": "A", "shortId": "1010A", "contest_number": "1010", "problem_submissions": {"B": [40799404, 40801993, 40788669, 40787652, 40789673, 40789686, 40789983, 40785033, 40792839, 40805864, 40788811, 40787383, 40789849, 40789369, 40787726, 40805158, 40792120, 40788528], "E": [40798849, 40800058, 40798099, 40803219, 40808162, 40803215, 40805435, 40803779, 40802990, 40802895, 40802904, 40807344, 40809272, 40807596, 40809118, 40796705, 40826253, 40825565, 40825440, 40825326, 40820969, 40809148, 40810854], "D": [40790648, 40792110, 40793613, 40792349, 40794914, 40795576, 40794812, 40796573, 40795996, 40791327, 40795441, 40794120, 40793973, 40796503, 40791721, 40802197, 40794990, 40796187], "C": [40786265, 40787662, 40789931, 40785223, 40786749, 40786331, 40785962, 40786363, 40790435, 40784715, 40788036, 40789805, 40785906, 40791178, 40784561, 40799332, 40788152, 40791287], "A": [40783437, 40783575, 40783713, 40784110, 40784394, 40784590, 40783557, 40784035, 40783594, 40783743, 40791154, 40783813, 40784202, 40785469, 40783661, 40798279, 40784877, 40785930], "F": [40820195, 40821625, 40821278, 40814070, 40812966, 47670616]}, "name": "A. Fly", "statement": "Natasha is going to fly on a rocket to Mars and return to Earth. Also,\r\non the way to Mars, she will land on n - 2 intermediate planets.\r\nFormally: we number all the planets from 1 to n. 1 is Earth, n is Mars.\r\nNatasha will make exactly n flights: 1\r\nto 2\r\nto\r\nldots n\r\nto 1.Flight from x to y consists of two phases: take-off from planet x\r\nand landing to planet y. This way, the overall itinerary of the trip\r\nwill be: the 1-st planet\r\nto take-off from the 1-st planet\r\nto landing to the 2-nd planet\r\nto 2-nd planet\r\nto take-off from the 2-nd planet\r\nto\r\nldots\r\nto landing to the n-th planet\r\nto the n-th planet\r\nto take-off from the n-th planet\r\nto landing to the 1-st planet\r\nto the 1-st planet.The mass of the rocket together with all the useful\r\ncargo (but without fuel) is m tons. However, Natasha does not know how\r\nmuch fuel to load into the rocket. Unfortunately, fuel can only be\r\nloaded on Earth, so if the rocket runs out of fuel on some other planet,\r\nNatasha will not be able to return home. Fuel is needed to take-off from\r\neach planet and to land to each planet. It is known that 1 ton of fuel\r\ncan lift off a_i tons of rocket from the i-th planet or to land b_i tons\r\nof rocket onto the i-th planet. For example, if the weight of rocket is\r\n9 tons, weight of fuel is 3 tons and take-off coefficient is 8 (a_i =\r\n8), then 1.5 tons of fuel will be burnt (since 1.5\r\ncdot 8 = 9 + 3). The new weight of fuel after take-off will be 1.5 tons.\r\nPlease note, that it is allowed to burn non-integral amount of fuel\r\nduring take-off or landing, and the amount of initial fuel can be\r\nnon-integral as well.Help Natasha to calculate the minimum mass of fuel\r\nto load into the rocket. Note, that the rocket must spend fuel to carry\r\nboth useful cargo and the fuel itself. However, it doesn\u2019t need to carry\r\nthe fuel which has already been burnt. Assume, that the rocket takes off\r\nand lands instantly.\r\n", "solutions": ["#pragma comment(linker, \"/STACK:512000000\")\n#define _CRT_SECURE_NO_WARNINGS\n//#include \"testlib.h\"\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define all(a) a.begin(), a.end()\nusing li = long long;\nusing ld = long double;\nvoid solve(bool);\nvoid precalc();\nclock_t start;\nint main() {\n#ifdef AIM\n  freopen(\"/home/alexandero/CLionProjects/ACM/input.txt\", \"r\", stdin);\n//freopen(\"/home/alexandero/CLionProjects/ACM/output.txt\", \"w\", stdout);\n//freopen(\"out.txt\", \"w\", stdout);\n#else\n  //freopen(\"input.txt\", \"r\", stdin);\n//freopen(\"output.txt\", \"w\", stdout);\n#endif\n  start = clock();\n  int t = 1;\n#ifndef AIM\n  cout.sync_with_stdio(0);\n  cin.tie(0);\n#endif\n  cout.precision(20);\n  cout << fixed;\n//cin \u00bb t;\n  precalc();\n  while (t--) {\n    solve(true);\n  }\n  cout.flush();\n\n#ifdef AIM1\n  while (true) {\nsolve(false);\n}\n#endif\n\n#ifdef AIM\n  cerr << \"\\n\\n time: \" << (clock() - start) / 1.0 / CLOCKS_PER_SEC << \"\\n\\n\";\n#endif\n  return 0;\n}\n\n//BE CAREFUL: IS INT REALLY INT?\n\ntemplate<typename T>\nT binpow(T q, T w, T mod) {\n  if (!w)\n    return 1 % mod;\n  if (w & 1)\n    return q * 1LL * binpow(q, w - 1, mod) % mod;\n  return binpow(q * 1LL * q % mod, w / 2, mod);\n}\n\ntemplate<typename T>\nT gcd(T q, T w) {\n  while (w) {\n    q %= w;\n    swap(q, w);\n  }\n  return q;\n}\ntemplate<typename T>\nT lcm(T q, T w) {\n  return q / gcd(q, w) * w;\n}\n\ntemplate <typename T>\nvoid make_unique(vector<T>& vec) {\n  sort(all(vec));\n  vec.erase(unique(all(vec)), vec.end());\n}\n\ntemplate<typename T>\nvoid relax_min(T& cur, T val) {\n  cur = min(cur, val);\n}\n\ntemplate<typename T>\nvoid relax_max(T& cur, T val) {\n  cur = max(cur, val);\n}\n\nvoid precalc() {\n\n}\n\n//#define int li\n//const li mod = 1000000007;\n\n//using ull = unsigned long long;\n\nvoid solve(bool read) {\n  int n, m;\n  cin >> n >> m;\n  vector<int> a(n), b(n);\n  for (int i = 0; i < n; ++i) {\n    cin >> a[i];\n  }\n  for (int i = 0; i < n; ++i) {\n    cin >> b[i];\n  }\n  double L = 0, R = 1e9 + 10;\n  for (int w = 0; w < 100; ++w) {\n    double M = (L + R) / 2;\n    double rest = M;\n    for (int i = 0; i < n; ++i) {\n      rest -= (rest + m) / a[i];\n      if (rest < 0) {\n        break;\n      }\n      rest -= (rest + m) / b[i];\n      if (rest < 0) {\n        break;\n      }\n    }\n    if (rest >= 0) {\n      R = M;\n    } else {\n      L = M;\n    }\n  }\n  if (R > 1e9 + 5) {\n    cout << \"-1\\n\";\n    return;\n  }\n  cout << R << \"\\n\";\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "input": "", "output": "", "tags": ["binary search", "math"], "dificulty": "1500", "interactive": false}