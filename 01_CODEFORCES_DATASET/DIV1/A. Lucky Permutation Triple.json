{
    "link": "https://codeforces.com//contest/303/problem/A",
    "problemId": "2983",
    "problem_idx": "A",
    "shortId": "303A",
    "contest_number": "303",
    "problem_submissions": {
        "D": [
            3709553,
            3709363,
            3711716,
            3706959,
            3711238,
            3710228,
            3710306,
            3708941,
            3711129,
            3709516
        ],
        "C": [
            3708423,
            3712044,
            3708743,
            3711908,
            3708382,
            3713447,
            3708443,
            3708735,
            3709727,
            3721641,
            3721639,
            3708625,
            9135696,
            3709288,
            3710050,
            3710908,
            3710008
        ],
        "B": [
            3707219,
            3707849,
            3707392,
            3708158,
            3707654,
            3707136,
            3707080,
            3707477,
            3707196,
            3707562,
            3707548,
            3709279,
            3718742,
            3707141,
            3707469,
            3706781,
            3708750,
            3708294
        ],
        "A": [
            3706160,
            3706280,
            3706779,
            3706051,
            3706066,
            3706259,
            3706288,
            3706277,
            3707619,
            3706249,
            3706193,
            3706655,
            3706132,
            3706057,
            3706549,
            3706144,
            3707218,
            3706263,
            3706997
        ]
    },
    "name": "A. Lucky Permutation Triple",
    "statement": "Bike is interested in permutations. A permutation of length is an\r\ninteger sequence such that each integer from 0 to appears exactly once\r\nin it. For example, is a permutation of length 3 while both and is not.A\r\npermutation triple of permutations of length is called a Lucky\r\nPermutation Triple if and only if . The sign denotes the -th element of\r\npermutation . The modular equality described above denotes that the\r\nremainders after dividing by and dividing by are equal.Now, he has an\r\ninteger and wants to find a Lucky Permutation Triple. Could you please\r\nhelp him?\r\n",
    "solutions": [
        "#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstring>\n#include <cassert>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> PII;\n#define MP make_pair\n#define FOR(v,p,k) for(int v=p;v<=k;++v)\n#define FORD(v,p,k) for(int v=p;v>=k;--v)\n#define REP(i,n) for(int i=0;i<(n);++i)\n#define VAR(v,i) __typeof(i) v=(i)\n#define FORE(i,c) for(__typeof(c.begin()) i=(c.begin());i!=(c).end();++i)\n#define PB push_back\n#define ST first\n#define ND second\n#define SZ(x) (int)(x).size()\n#define ALL(c) c.begin(),c.end()\n#define ZERO(x) memset(x,0,sizeof(x))\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    int n;\n    cin >> n;\n    if (n % 2 == 0) {\n        cout << -1 << endl;\n    } else {\n        for (int i = 0; i < n; ++i) {\n            cout << i << \" \\n\"[i == n - 1];\n        }\n        for (int i = 0; i < n; ++i) {\n            cout << ((n - 2) * (LL) i) % n << \" \\n\"[i == n - 1];\n        }\n        for (int i = 0; i < n; ++i) {\n            cout << ((n - 1) * (LL) i) % n << \" \\n\"[i == n - 1];\n        }\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Lucky Permutation Triple.json",
    "editorial_link": "https://codeforces.com//blog/entry/7641",
    "editorial": "Math, Constructive algorithms, Congruent\n\nwhen n is odd, A[i] = B[i] = i\nwhen n is even, there is no solution. So why? Because:\nS = \\Sum_{i=0}^{n-1} i = n/2 (mod n) but 2*S = 0 (mod n)",
    "hint": []
}