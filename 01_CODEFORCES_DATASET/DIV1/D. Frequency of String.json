{"link": "https://codeforces.com//contest/963/problem/D", "problemId": "175449", "problem_idx": "D", "shortId": "963D", "contest_number": "963", "problem_submissions": {"E": [37408346, 37407644, 51152346, 37411847, 37415664, 37414743, 37424807, 37560510, 63561204, 37525085], "D": [37404929, 37404881, 37407341, 37406493, 37404117, 37403898, 37407185, 37408546, 37404537, 37409644, 37405529, 37411456, 37412888, 37408258, 37411536, 37411945, 37405408, 37405454, 37410330], "C": [37403149, 37410272, 37405789, 37402217, 37408755, 37410613, 37405532, 37406058, 37410998, 37406279, 37408081, 37407255, 37409639, 37405742, 37409484, 37407736, 37415193, 37408262], "A": [37400764, 37398530, 37400243, 37398542, 37398672, 37398448, 37403076, 37400054, 37401968, 37403020, 37402655, 37401825, 37399871, 37409184, 37400223, 37401116, 37399078, 37407652], "B": [37399438, 37401875, 37403648, 37403088, 37402069, 37401815, 37401672, 37402933, 37403748, 37400539, 37403834, 37404008, 37402988, 37412215, 37402134, 37404563, 37403658, 37399677, 37411986]}, "name": "D. Frequency of String", "statement": "You are given a string s. You should answer n queries. The i-th query\r\nconsists of integer k_i and string m_i. The answer for this query is the\r\nminimum length of such a string t that t is a substring of s and m_i has\r\nat least k_i occurrences as a substring in t.A substring of a string is\r\na continuous segment of characters of the string.It is guaranteed that\r\nfor any two queries the strings m_i from these queries are different.\r\n", "solutions": ["//FUCK YOU, PIECE OF SHIT\n#ifndef BZ\n#pragma GCC optimize \"-O3\"\n#endif\n#include <bits/stdc++.h>\n\nusing ll = long long;\nusing ld = long double;\nusing ull = uint64_t;\nusing namespace std;\n\nconst int MAXN = 200228;\n\nconst ll HV = 193297;\null pw[MAXN];\null h[MAXN];\nint k[MAXN];\nvector<int> an[MAXN];\nvector<pair<ull, int>> v[MAXN];\nint ln[MAXN];\n\nint main() {\n\tios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cout.setf(ios::fixed); cout.precision(20);\n\tstring s;\n\tcin >> s;\n\tint n = s.length();\n\tpw[0] = 1;\n\tfor (int i = 1; i < MAXN; ++i) {\n\t\tpw[i] = pw[i - 1] * HV;\n\t}\n\n\th[0] = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\th[i + 1] = h[i] + pw[i] * s[i];\n\t}\n\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; ++i) {\n\t\tstring t;\n\t\tcin >> k[i] >> t;\n\t\tull ch = 0;\n\t\tfor (int i = 0; i < t.length(); ++i) {\n\t\t\tch += pw[i] * t[i];\n\t\t}\n\n\t\tch *= pw[n];\n\t\tln[i] = t.length();\n\n\t\tv[t.length()].emplace_back(ch, i);\n\t}\n\n\tfor (int len = 1; len <= n; ++len) {\n\t\tif (v[len].empty()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tsort(v[len].begin(), v[len].end());\n\n\t\tfor (int i = 0; i + len <= n; ++i) {\n\t\t\tull ch = h[i + len] - h[i];\n\t\t\tch *= pw[n - i];\n\t\t\tauto it = lower_bound(v[len].begin(), v[len].end() - 1, pair<ull, int>{ch, 0});\n\t\t\tif (it->first == ch) {\n\t\t\t\tan[it->second].push_back(i);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (int i = 0; i < q; ++i) {\n\t\t--k[i];\n\t\tif (an[i].size() <= k[i]) {\n\t\t\tcout << \"-1\\n\";\n\t\t} else {\n\t\t\tint ans = MAXN;\n\t\t\tfor (int j = 0; j + k[i] < an[i].size(); ++j) {\n\t\t\t\tans = min(ans, an[i][j + k[i]] - an[i][j]);\n\t\t\t}\n\n\t\t\tcout << ans + ln[i] << \"\\n\"; \n\t\t}\n\t}\n\n}\n\n\n\n\n\n"], "input": "", "output": "", "tags": ["hashing", "string suffix structures", "strings"], "dificulty": "2500", "interactive": false}