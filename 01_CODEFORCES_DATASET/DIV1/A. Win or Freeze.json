{
    "link": "https://codeforces.com//contest/150/problem/A",
    "problemId": "929",
    "problem_idx": "A",
    "shortId": "150A",
    "contest_number": "150",
    "problem_submissions": {
        "D": [
            1194790,
            1195710,
            1196410,
            1196643,
            1195734,
            1193495,
            1197438,
            1194800,
            1193784,
            1198921
        ],
        "C": [
            1192372,
            1192889,
            1193569,
            1192214,
            1192135,
            1196040,
            1193366,
            1195697,
            1197378,
            1191883,
            1193918,
            1192472,
            1192349
        ],
        "B": [
            1188186,
            2541924,
            1188277,
            1188125,
            1187707,
            1188412,
            1188356,
            1188767,
            1186964,
            1188247,
            1188294,
            1188405,
            1188647,
            1194611,
            1188404,
            1188925
        ],
        "A": [
            1187447,
            1187836,
            1187271,
            1187190,
            1197743,
            1187054,
            1187897,
            1187519,
            1187187,
            1187884,
            1187266,
            1187565,
            1187877,
            1187293,
            1188217
        ],
        "E": [
            1201858,
            1204781
        ]
    },
    "name": "A. Win or Freeze",
    "statement": "You can’t possibly imagine how cold our friends are this winter in\r\nNvodsk! Two of them play the following game to warm up: initially a\r\npiece of paper has an integer . During a move a player should write any\r\ninteger number that is a divisor of the last written number. Then he\r\nshould run this number of circles around the hotel. Let us remind you\r\nthat a number’s divisor is called if it is different from one and from\r\nthe divided number itself. The first person who as he continues to lie\r\nin his warm bed under three blankets while the other one keeps running.\r\nDetermine which player wins considering that both players play\r\noptimally. If the first player wins, print any winning first move.\r\n",
    "solutions": [
        "#pragma comment (linker, \"/STACK:200000000\")\n#define _SECURE_SCL 0\n#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <ctime>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <deque>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <string>\n#include <stack>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long int64;\nconst int INF = (int) 1E9;\nconst int64 INF64 = (int64) 1E18;\nconst double EPS = 1E-9;\nconst double PI = acos((double)0) * 2;\n\n#define forn(i,n)  for (int i=0; i<int(n); ++i)\n#define ford(i,n)  for (int i=int(n)-1; i>=0; --i)\n#define fore(i,l,n)  for (int i=int(l); i<int(n); ++i)\n#define all(a)  a.begin(), a.end()\n#define fs  first\n#define sc  second\n#define pb  push_back\n#define mp  make_pair\n\n\nint64 n;\n\n\nbool read() {\n\treturn !! (cin >> n);\n}\n\n\nint64 mindiv (int64 n) {\n\tfor (int64 i=2; i*i<=n; ++i)\n\t\tif (n % i == 0)\n\t\t\treturn i;\n\treturn -1;\n}\n\nvoid solve() {\n\tint64 p = mindiv (n);\n\n\tif (p == -1) {\n\t\tcout << \"1\\n0\\n\";\n\t\treturn;\n\t}\n\n\tint64 q = mindiv (n / p);\n\tif (q != -1) {\n\t\tcout << \"1\\n\" << p*q << '\\n';\n\t\treturn;\n\t}\n\n\tcout << \"2\\n\";\n}\n\n\nint main() {\n#ifdef SU2_PROJ\n\tfreopen (\"input.txt\", \"rt\", stdin);\n\tfreopen (\"output.txt\", \"wt\", stdout);\n\twhile (read())\n\t\tsolve();\n#else\n\tif (!read())  throw;\n\tsolve();\n#endif\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "math",
        "number theory"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Win or Freeze.json",
    "editorial_link": "https://codeforces.com/blog/entry/3905?locale=en",
    "editorial": "if is prime or than itâs victory. We loose if: or , where and are prime.\r\nIt is quite obvious that it is always possible to move in bad position\r\nin any other case. That means all other numbers grants us the victory.\r\nWe only have to check if has a divisor of the loose type. We can easily\r\ndo it in time.\r\n",
    "hint": []
}