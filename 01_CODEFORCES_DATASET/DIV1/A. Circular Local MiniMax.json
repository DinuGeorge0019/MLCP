{
    "link": "https://codeforces.com//contest/1685/problem/A",
    "problemId": "1410452",
    "problem_idx": "A",
    "shortId": "1685A",
    "contest_number": "1685",
    "problem_submissions": {
        "E": [
            158459552,
            158470179,
            158498551,
            158474226,
            158469548,
            163064811,
            163064579,
            162972274,
            161995310
        ],
        "D1": [
            158446537,
            158446179,
            158436497,
            158441308,
            158450152,
            158437819,
            158438771,
            158444550,
            158444057,
            158444961,
            158450485,
            158456436,
            158455279,
            158451423,
            158456717,
            158456702,
            158458839,
            158450419,
            158454329
        ],
        "C": [
            158440149,
            158436682,
            158456408,
            158436985,
            158433630,
            158430630,
            158430086,
            158437803,
            158438284,
            158438857,
            158446162,
            158444048,
            158440132,
            158447129,
            158447895,
            158449525,
            158447760,
            158457006,
            158449988
        ],
        "B": [
            158430617,
            158426337,
            158489620,
            158427132,
            158430769,
            158427058,
            158419568,
            158419647,
            158422845,
            158428180,
            158427930,
            158426993,
            158428289,
            158433041,
            158438360,
            158432708,
            158432524,
            158429703,
            158431029,
            158439177
        ],
        "A": [
            158416845,
            158416623,
            158416445,
            158417978,
            158414637,
            158414483,
            158414377,
            158414577,
            158419066,
            158418105,
            158416435,
            158417522,
            158415887,
            158415929,
            158418032,
            158416211,
            158417132,
            158417328,
            158424448
        ],
        "D2": [
            158457366,
            158450783,
            158467580,
            158467275,
            158561732,
            166382774,
            166382436
        ]
    },
    "name": "A. Circular Local MiniMax",
    "statement": "You are given n integers a_1, a_2,\r\nldots, a_n. Is it possible to arrange them on a circle so that each\r\nnumber is strictly greater than both its neighbors or strictly smaller\r\nthan both its neighbors?In other words, check if there exists a\r\nrearrangement b_1, b_2,\r\nldots, b_n of the integers a_1, a_2,\r\nldots, a_n such that for each i from 1 to n at least one of the\r\nfollowing conditions holds: b_{i-1} < b_i > b_{i+1} b_{i-1} > b_i <\r\nb_{i+1}To make sense of the previous formulas for i=1 and i=n, one shall\r\ndefine b_0=b_n and b_{n+1}=b_1.\r\n",
    "solutions": [
        "//hey alc\n#include <bits/stdc++.h>\n#define ll long long\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define vi vector<int>\n#define pi pair<int, int>\n#define mod 1000000007\ntemplate<typename T> bool chkmin(T &a, T b){return (b < a) ? a = b, 1 : 0;}\ntemplate<typename T> bool chkmax(T &a, T b){return (b > a) ? a = b, 1 : 0;}\nll ksm(ll a, ll b) {if (b == 0) return 1; ll ns = ksm(a, b >> 1); ns = ns * ns % mod; if (b & 1) ns = ns * a % mod; return ns;}\nusing namespace std;\nconst int maxn = 200005;\nint cnt[maxn];\nint hv[maxn];\nint a[maxn];\nint b[maxn];\nint main() {\n    int t;\n    cin >> t;\n    while (t--) {\n        int n;\n        cin >> n;\n        for (int i = 1; i <= n; i++) scanf(\"%d\", &a[i]);\n        sort(a + 1, a + n + 1);\n        int fl = 1;\n        if (n % 2) fl = 0;\n        else {\n            int cnt = 1;\n            for (int i = 1; i <= n; i += 2)\n                b[i] = a[cnt++];\n            for (int i = 2; i <= n; i += 2)\n                b[i] = a[cnt++];\n            for (int i = 1; i <= n; i++) {\n                int nx = b[i + 1];\n                if (i == n) nx = b[1];\n                if (b[i] == nx) fl = 0;\n            }\n        }\n        if (fl) {\n            printf(\"Yes\\n\");\n            for (int i = 1; i <= n; i++)\n                printf(\"%d \", b[i]);\n            printf(\"\\n\");\n        }\n        else printf(\"No\\n\");\n    }\n    return (0-0); //<3\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "sortings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Circular Local MiniMax.json",
    "editorial_link": "https://codeforces.com//blog/entry/103198",
    "editorial": "Let\u00e2\u0080\u0099s call local minimum if and local maximum if . It\u00e2\u0080\u0099s clear that in\r\nthe arrangement satisfying the conditions from the statement, if is a\r\nlocal minimum, is a local maximum, and vice versa. Local minimums and\r\nlocal maximums will be alternating.Then it\u00e2\u0080\u0099s easy to see that such an\r\narrangement can\u00e2\u0080\u0099t exist for odd . Indeed, suppose that the conditions\r\nfrom the statement are satisfied for . If we suppose that is local\r\nminimum, we get that is local maximum, is local minimum, , is local\r\nminimum, is local maximum. Clearly, can\u00e2\u0080\u0099t be a local maximum and a local\r\nminimum at the same time, leading to a contradiction.Let\u00e2\u0080\u0099s now consider\r\nthe case of even . Sort the array , so that . Let\u00e2\u0080\u0099s show that if for\r\nsome , then there is no arrangement satisfying the conditions from the\r\nstatement. Indeed, consider such an arrangement: we have numbers , and\r\nno two of them can be adjacent, so they occupy every second position. In\r\naddition, as local maximums and local minimums are alternating, we get\r\nthat all are local maximums or all are local minimums. The first would\r\nimply that , which isn\u00e2\u0080\u0099t possible. The second would imply that , which\r\nisn\u00e2\u0080\u0099t possible.It turns out that if there is no such , the arrangement\r\nexists. Indeed, we can arrange numbers on the circle in the following\r\norder: . Here for , for , and .\r\n"
}