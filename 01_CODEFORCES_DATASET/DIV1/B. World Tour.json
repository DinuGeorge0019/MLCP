{
    "link": "https://codeforces.com//contest/666/problem/B",
    "problemId": "57414",
    "problem_idx": "B",
    "shortId": "666B",
    "contest_number": "666",
    "problem_submissions": {
        "E": [
            17594948,
            17581972,
            17586090,
            59816920,
            60238846
        ],
        "D": [
            17582206,
            17581333,
            17682266,
            17585111,
            17578532,
            17682483,
            17593764,
            17580882
        ],
        "C": [
            17576782,
            17576849,
            17576800,
            17578215,
            17578937,
            17578155,
            17577254,
            17578057,
            17578881,
            17579042,
            17579726,
            17577922,
            17578916,
            17579778,
            17580460,
            17580072
        ],
        "B": [
            17573525,
            17573061,
            17576637,
            17573442,
            17574093,
            17572951,
            17573669,
            17574447,
            17576416,
            17574060,
            17574231,
            17575134,
            17573766,
            17575544,
            17576709,
            17573819,
            17575438,
            17575919,
            17575656
        ],
        "A": [
            17569955,
            17569857,
            17570262,
            17570541,
            17570429,
            17570371,
            17570641,
            17570192,
            17570791,
            17570963,
            17571866,
            17570753,
            17570879,
            17571604,
            17570261,
            17571058,
            17570440,
            17570884,
            17570485
        ]
    },
    "name": "B. World Tour",
    "statement": "A famous sculptor Cicasso goes to a world tour!Well, it is not actually\r\na world-wide. But not everyone should have the opportunity to see works\r\nof sculptor, shouldn’t he? Otherwise there will be no any exclusivity.\r\nSo Cicasso will entirely hold the world tour in his native country\r\nBerland.Cicasso is very devoted to his work and he wants to be\r\ndistracted as little as possible. Therefore he will visit only four\r\ncities. These cities will be different, so no one could think that he\r\nhas \"favourites\". Of course, to save money, he will chose the shortest\r\npaths between these cities. But as you have probably guessed, Cicasso is\r\na weird person. Although he doesn’t like to organize exhibitions, he\r\nlikes to travel around the country and enjoy its scenery. So he wants\r\nthe total distance which he will travel to be as large as possible.\r\nHowever, the sculptor is bad in planning, so he asks you for help. There\r\nare cities and one-way roads in Berland. You have to choose four\r\ndifferent cities, which Cicasso will visit and also determine the order\r\nin which he will visit them. So that the total distance he will travel,\r\nif he visits cities in your order, starting from the first city in your\r\nlist, and ending in the last, choosing each time the shortest route\r\nbetween a pair of cities will be the largest. Note that intermediate\r\nroutes may pass through the cities, which are assigned to the tour, as\r\nwell as pass twice through the same city. For example, the tour can look\r\nlike that: . Four cities in the order of visiting marked as overlines:\r\n.Note that Berland is a high-tech country. So using nanotechnologies all\r\nroads were altered so that they have the same length. For the same\r\nreason moving using regular cars is not very popular in the country, and\r\nit can happen that there are such pairs of cities, one of which\r\ngenerally can not be reached by car from the other one. However, Cicasso\r\nis very conservative and cannot travel without the car. Choose cities so\r\nthat the sculptor can make the tour using only the automobile. It is\r\nguaranteed that it is always possible to do.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define FO(i,a,b) for (int i = (a); i < (b); i++)\n#define sz(v) int(v.size())\n\nusing namespace std;\n\nvector<int> u[3005];\nint sp[3005][3005];\nint n, m;\nvector<pair<int,int> > fin[3005];\nvector<pair<int,int> > fout[3005];\n\nint p[4];\n\nint bp[4];\nint bl;\n\nvoid upd() {\n    int l = 0;\n    FO(i,0,3) l += sp[p[i]][p[i+1]];\n    if (l > bl) {\n        FO(i,1,4) FO(j,0,i) if (p[i] == p[j]) return;\n        FO(i,0,4) bp[i] = p[i];\n        bl = l;\n    }\n}\n\nint q[3005], qs, qe;\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    FO(z,0,m) {\n        int x, y; scanf(\"%d%d\", &x, &y); x--; y--;\n        u[x].push_back(y);\n    }\n    FO(i,0,n) {\n        FO(j,0,n) sp[i][j] = 1e5;\n        qs = qe = 0;\n        q[qe++] = i;\n        sp[i][i] = 0;\n        while (qs != qe) {\n            int f = q[qs++];\n            for (int j : u[f]) {\n                if (sp[i][j] > 1e4) {\n                    sp[i][j] = sp[i][f]+1;\n                    q[qe++] = j;\n                }\n            }\n        }\n    }\n    FO(i,0,n) {\n        FO(j,0,n) if (j != i && sp[j][i] < 1e4) {\n            fin[i].emplace_back(sp[j][i],j);\n            if (sz(fin[i]) > 3) {\n                sort(fin[i].begin(),fin[i].end());\n                fin[i].erase(fin[i].begin());\n            }\n        }\n\n        FO(j,0,n) if (j != i && sp[i][j] < 1e4) {\n            fout[i].emplace_back(sp[i][j],j);\n            if (sz(fout[i]) > 3) {\n                sort(fout[i].begin(),fout[i].end());\n                fout[i].erase(fout[i].begin());\n            }\n        }\n    }\n\n    FO(i,0,n) FO(j,0,n) if (i != j && sp[i][j] < 1e4) {\n        p[1] = i;\n        p[2] = j;\n        for (auto &f : fin[i]) for (auto &e : fout[j]) {\n            p[0] = f.second;\n            p[3] = e.second;\n            upd();\n        }\n    }\n    FO(i,0,4) printf(\"%d%c\", 1+bp[i], \" \\n\"[i==3]);\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "shortest paths"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. World Tour.json",
    "editorial_link": "https://codeforces.com//blog/entry/44622",
    "editorial": "You are given the oriented graph, find four distinct vertices such that\r\neach vertex if reachable from previous and the sum of shortest paths\r\nbetween consequitive vertices is as large as possible. First letâs run a\r\nBFS from each vertex and find three most distant vertices over given\r\ngraph and its reverse. Afterwards loop through each possible and .\r\nHaving them fixed, loop through among three most distant vertices from\r\nin the reversed graph and through among three most distant vertices from\r\nin tie initial graph. This is sufficient, because if weâve fixed and and\r\nis not one of three furthest from then we could replace it with one of\r\nthem and improve the answer.\r\n",
    "hint": []
}