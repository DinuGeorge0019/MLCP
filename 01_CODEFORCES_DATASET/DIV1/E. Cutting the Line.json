{
    "link": "https://codeforces.com//contest/594/problem/E",
    "problemId": "40382",
    "problem_idx": "E",
    "shortId": "594E",
    "contest_number": "594",
    "problem_submissions": {
        "E": [
            16759125
        ],
        "A": [
            14859835,
            14187151,
            14168211,
            14172935,
            14182638
        ],
        "B": [
            14156236,
            14148350,
            14148054,
            14157567,
            14148683,
            14153705,
            14154342,
            14148482,
            14159536,
            14174689,
            14159892,
            14159855,
            14159731
        ],
        "D": [
            14150984,
            14155176,
            14155954,
            14153436,
            14155957,
            14149401,
            14158502,
            14157969,
            14149011,
            14149866,
            14152166,
            14149390,
            14153522,
            14151360,
            14154138,
            14150754,
            14152455
        ],
        "C": [
            14148084,
            14150600,
            14150845,
            14151161,
            14152433,
            14158444,
            14151325,
            14153060,
            14153280,
            14152819,
            14149839,
            14153721,
            14148614,
            14156263,
            14151875,
            14156017,
            14156027
        ]
    },
    "name": "E. Cutting the Line",
    "statement": "You are given a non-empty line and an integer . The following operation\r\nis performed with this line exactly once: A line is split into non-empty\r\nsubstrings, i.e. string is represented as a concatenation of a set of\r\nstrings , . Some of strings are replaced by strings , that is, their\r\nrecord from right to left. The lines are concatenated back in the same\r\norder, we get string , where equals or . Your task is to determine the\r\nlexicographically smallest string that could be the result of applying\r\nthe given operation to the string .\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<set>\n#include<queue>\n#include<bitset>\n#include<utility>\n#include<functional>\n#include<iomanip>\n#include<sstream>\n#include<ctime>\n#include<cassert>\nusing namespace std;\n#define y0 y0z\n#define y1 y1z\n#define yn ynz\n#define j0 j0z\n#define j1 j1z\n#define jn jnz\n#define tm tmz\n#define pi ((db)3.14159265358979323846264338327950288L)\n#define buli __builtin_popcountll\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define fil(a,b) memset((a),(b),sizeof(a))\n#define cl(a) fil(a,0)\n#define siz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define foreach(it,a) for(__typeof((a).begin()) it=(a).begin();it!=(a).end();it++)\n#define rep(i,a,b) for (int i=(a),_ed=(b);i<_ed;i++)\n#define per(i,a,b) for (int i=(b)-1,_ed=(a);i>=_ed;i--)\n#define pw(x) ((ll(1))<<(x))\n#define upmo(a,b) (((a)=((a)+(b))%mo)<0?(a)+=mo:(a))\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<pii> vpii;\ntemplate<typename T,typename S>inline bool upmin(T&a,const S&b){return a>b?a=b,1:0;}\ntemplate<typename T,typename S>inline bool upmax(T&a,const S&b){return a<b?a=b,1:0;}\ntemplate<typename N,typename PN>inline N flo(N a,PN b){return a>=0?a/b:-((-a-1)/b)-1;}\ntemplate<typename N,typename PN>inline N cei(N a,PN b){return a>0?(a-1)/b+1:-(-a/b);}\ntemplate<typename N>N gcd(N a,N b){return b?gcd(b,a%b):a;}\n#if ( ( _WIN32 || __WIN32__ ) && __cplusplus < 201103L)\n    #define lld \"%I64d\"\n#else\n    #define lld \"%lld\"\n#endif\ninline void gn(long long&x){\n\tint sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');c=='-'?(sg=-1,x=0):(x=c-'0');\n\twhile((c=getchar())>='0'&&c<='9')x=x*10+c-'0';x*=sg;\n}\ninline void gn(int&x){long long t;gn(t);x=t;}\ninline void gn(unsigned long long&x){long long t;gn(t);x=t;}\ninline void gn(double&x){double t;scanf(\"%lf\",&t);x=t;}\ninline void gn(long double&x){double t;scanf(\"%lf\",&t);x=t;}\n#ifdef JCVB\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#else\n#define debug(...) \n#endif\ntypedef long long ll;\ntypedef double db;\ninline ll sqr(ll a){return a*a;}\ninline db sqrf(db a){return a*a;}\nint inf=0x3f3f3f3f;\ndb eps=1e-6;\nint mo=1000000007;\nint qp(int a,ll b){int n=1;do{if(b&1)n=1ll*n*a%mo;a=1ll*a*a%mo;}while(b>>=1);return n;}\nchar s[10111111];\nint k,n;\nint mi[5111111];\nint mami[5111111];\nint z[10111111];\n\nint dbg=0;\nvoid buildz(int n){\n\tz[1]=n;\n\tif(n<=1)return;\n\tz[n+1]='a'-1;\n\twhile(s[2+z[2]]==s[1+z[2]])z[2]++;\n\tint a=2;\n\tfor (int i=3;i<=n;i++){\n\t\tif(i<=a+z[a]-1){\n\t\t\tz[i]=min(a+z[a]-1-i+1,z[i-a+1]);\n\t\t}\n\t\twhile(s[i+z[i]]==s[1+z[i]])z[i]++;\n\t\tif(i+z[i]>a+z[a])a=i;\n\t}\n}\nint zcmp(int i,int le){\n\tif(z[i]>=le)return 0;\n\tchar a=s[1+z[i]],b=s[i+z[i]];\n\tif(a<b)return 1;\n\treturn -1;\n}\nvoid init(){\n\tint i=1,j=2,k=0;\n\ts[n+1]='a'-2;\n\tint bo=0;\n\tint las=0,las2=0;\n\twhile(i<=n){\n\t\tk=0;\n\t\twhile(s[i+k]==s[j+k]){\n\t\t\tk++;\n\t\t}\n\t\tif(s[i+k]>s[j+k]){\n\t\t\tbo++;\n\t\t\tint d=j-i,e=i+k;\n\t\t\tdo{\n\t\t\t\ti+=d;\n\t\t\t\tmi[i-1]=las+1;\n\t\t\t\tmami[i-1]=las2+1;\n\t\t\t\tlas=i-1;\n\t\t\t\tif(dbg)printf(\"%d \",i-1);\n\t\t\t}while(i-1<e);\n\t\t\tlas2=las;\n\t\t\tj=i+1;\n\t\t}else{\n\t\t\tj=j+k+1;\n\t\t}\n\t}\n}\n\nchar ans[5111111];\nchar s2[5111111];\nvoid doit(){\n\trep(t,n+1,n+n+1)s[t]=s[t-n];\n\ts[n+n+1]=0;\n\tint i=1,j=2,k=0;\n\twhile(j<=n){\n\t\tk=0;\n\t\twhile(k<n && s[i+k]==s[j+k])k++;\n\t\tif(s[i+k]>s[j+k]){\n\t\t\ti=max(i+k+1,j);\n\t\t\tj=i+1;\n\t\t}else{\n\t\t\tj=j+k+1;\n\t\t}\n\t}\n\tint tmp=0;rep(t,i,i+n)ans[++tmp]=s[t];\n\t////////////\n\trep(i,1,n+1)s2[i]=s[n-i+1];\n\tint bo=0;\n\trep(i,1,n+1)if(ans[i]!=s2[i]){\n\t\tif(ans[i]>s2[i])bo=1;\n\t\tbreak;\n\t}\n\tif(bo)rep(i,1,n+1)ans[i]=s2[i];\n\t////////////\n\tbo=0;\n\trep(i,1,n+1)if(ans[i]!=s[i]){\n\t\tif(ans[i]>s[i])bo=1;\n\t\tbreak;\n\t}\n\tif(bo)rep(i,1,n+1)ans[i]=s[i];\n\t//////////\n\trep(i,1,n+1)s[n+i]=s2[i];\n\tbuildz(2*n);\n\tint opt=1;\n\trep(i,2,n){\n\t\tint ve=zcmp(2*n+1-i,i-opt);\n\t\tif(ve==1){\n\t\t\topt=i;\n\t\t}else if(ve==0){\n\t\t\tve=zcmp(i-opt+1,opt);\n\t\t\tif(ve==-1)opt=i;\n\t\t}\n\t}\n\ttmp=0;\n\tper(i,opt+1,n+1)s2[++tmp]=s[i];\n\trep(i,1,opt+1)s2[++tmp]=s[i];\n\tbo=0;\n\trep(i,1,n+1)if(ans[i]!=s2[i]){\n\t\tif(ans[i]>s2[i])bo=1;\n\t\tbreak;\n\t}\n\tif(bo)rep(i,1,n+1)ans[i]=s2[i];\n\t//////////\n\tinit();\n\ttmp=0;\n\trep(i,mi[n],n+1)s2[++tmp]=s[i];\n\tper(i,1,mi[n])s2[++tmp]=s[i];\n\tbo=0;\n\trep(i,1,n+1)if(ans[i]!=s2[i]){\n\t\tif(ans[i]>s2[i])bo=1;\n\t\tbreak;\n\t}\n\tif(bo)rep(i,1,n+1)ans[i]=s2[i];\n\n\n\ts[++n]='z'+1;\n\tinit();\n\tn--;\n\ttmp=0;\n\trep(i,mami[n+1],n+1)s2[++tmp]=s[i];\n\tper(i,1,mami[n+1])s2[++tmp]=s[i];\n\tbo=0;\n\trep(i,1,n+1)if(ans[i]!=s2[i]){\n\t\tif(ans[i]>s2[i])bo=1;\n\t\tbreak;\n\t}\n\tif(bo)rep(i,1,n+1)ans[i]=s2[i];\n\n\n\trep(i,1,n+1)putchar(ans[i]);\n\tputchar('\\n');\n}\n\nint main()\n{\n#ifdef JCVB\n\t//freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"1.out\",\"w\",stdout);\n\tint _time_jc=clock();\n#endif\n\tscanf(\"%s\",s+1);\n\tn=strlen(s+1);\n\tgn(k);\n\tif(k==1){\n\t\trep(i,1,n+1)s2[i]=s[n-i+1];\n\t\tint bo=0;\n\t\trep(i,1,n+1)if(s[i]!=s2[i]){\n\t\t\tif(s[i]<s2[i]);\n\t\t\telse bo=1;\n\t\t\tbreak;\n\t\t}\n\t\tif(bo==0)\n\t\t\tprintf(\"%s\\n\",s+1);\n\t\telse \n\t\t\tprintf(\"%s\\n\",s2+1);\n\t\treturn 0;\n\t}\n\tif(strncmp(s+1,\"aaabehbieifhddd\",15)==0)dbg=1;\n\tdbg=0;\n\tif(dbg)printf(\"n=%d\\n\",n);\n\tfor (int i=1;i<n-i+1;i++)swap(s[i],s[n-i+1]);\n\tinit();\n\tint las=n;\n\tfor (int t=k;t>2 && las;t--){\n\t\tint sst=mi[las],st=sst,le=las-sst+1;\n\t\tif(st==las){\n\t\t\twhile(las>=1 && mi[las]==las)putchar(s[las]),las--;\n\t\t}else{\n\t\t\twhile(st-le>=1){\n\t\t\t\tint bo=1;\n\t\t\t\tst-=le;\n\t\t\t\trep(i,0,le){\n\t\t\t\t\tif(s[st+i]!=s[sst+i]){\n\t\t\t\t\t\tbo=0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(bo==0){\n\t\t\t\t\tst+=le;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trep(i,st,las+1)putchar(s[i]);\n\t\t\tlas=st-1;\n\t\t}\n\t}\n\tif(las){\n\t\tn=las;\n\t\tdoit();\n\n\t}\n\tputchar('\\n');\n\n\t\n#ifdef JCVB\n\tdebug(\"time: %d\\n\",int(clock()-_time_jc));\n#endif\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "string suffix structures",
        "strings"
    ],
    "dificulty": "3100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Cutting the Line.json",
    "editorial_link": "https://codeforces.com//blog/entry/21487",
    "editorial": "Let's describe the greedy algorithm, which allows to solve the problem for every k?>?2 for every string S.\n\nLet's think, that we always reverse some prefix of the string S (may be with length equals to one). Because we want to minimize lexicographically the string it is easy to confirm that we will reverse such a prefixes, which prefix (after reversing) is equals to the minimal lexicographically suffix of the reverse string S (let it be Sr)  this is prefix, which length equals to the length of the minimum suffix Sr (the reverse operation of the prefix S equals to change it with suffix Sr).\n\nLet the lexicographically minimal suffix of the string Sr is s. It can be shown, that there are no 2 entries s in Sr which intersects, because of that the string s will be with period and minimal suffix will with less length. So, the string Sr looks like tpsaptp?-?1sap?-?1tp?-?2... t1sa1, where sx means the concatenation of the string s x times, a1,?a2,?...,?ap  integers, and the strings t1,?t2,?...,?tp  some non-empty (exclude may be tp) strings, which do not contain the s inside.\n\nIf we reverse some needed prefix of the string s, we will go to the string S', and the minimal suffix s' of the reversing string S'r can't be lexicographically less than s, because of that we need to make s' equals to s. It will helps us to increase prefix which look like sb in the answer (and we will can minimize it too). it is easy to show, that maximum b, which we can get equals to a1 in case p?=?1 ?  (in case if p \\geq 2$). After such operations the prefix of the answer will looks like sa1saitisai?-?1... sa2t2. Because t_{i}  non-empty strings we can not to increase the number of concatenations s in the prefix of the answer. The reversing of the second prefix (sai...) can be done because k?>?2.\n\nFrom the information described above we know that if k?>?2 for lost string we need always reverse prefix, which after reversing is equals to the suffix of the string Sr which looks like sa1. To find this suffix every time, we need only once to build Lindon decomposition (with helps of Duval's algorithm) of the reverse string and carefully unite the equals strings. Only one case is lost  prefix of the lost string does not need to be reverse  we can make the concatenation of the consecutive reverse prefixes with length equals to 1.\n\nBecause for k?=?1 the problem is very easy, we need to solve it for k?=?2  cut the string on the two pieces (prefix and suffix) and some way of their reverse. The case when nothing reverse is not interesting, let's look on other cases:\n\nPrefix do not reverse. In this case always reversing suffix. Two variants of the string with reverse suffix we can compare with O(1) with helps of z-function of the string Sr#S.\n\nPrefix reverse. To solve this case we can use approvals from the editorial of the problem F Yandex.Algorithm 2015 Round 2.2 which was written by GlebsHP and check only 2 ways of reversing prefix. We need for them to brute the reverse of suffixes.",
    "hint": []
}