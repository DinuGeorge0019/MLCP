{"link": "https://codeforces.com//contest/528/problem/B", "problemId": "24748", "problem_idx": "B", "shortId": "528B", "contest_number": "528", "problem_submissions": {"E": [10341247, 10347694, 10319347], "D": [10329962, 10320069, 10323923, 10323825, 15074824, 15074755, 15074588, 13788938, 12800686, 10323881, 10325933, 10320996, 10324989, 10325719, 10324991, 10322203, 10325699, 10330641, 10325792, 15079118, 15024306, 15024301, 15024294, 10326179, 10326263, 10326568, 10771730, 10326292, 10326245, 10595851, 10595702, 10595678, 10595541, 10595511, 10595468, 10595396, 10595378, 10595366, 10595274, 10595233, 10594977, 10594940, 10594912, 10594743, 10594617, 10325531, 10318821], "C": [10318112, 10318394, 10319266, 10320615, 10318827, 10326662, 10320967, 10321573, 10322337, 10325513, 10322954, 10330901, 10330797, 10322938, 10330769, 10321075, 10321402, 10323235, 10322360, 10323460, 10323142, 10370800], "B": [10314537, 10315068, 10315364, 10314727, 10316045, 10315205, 10316694, 10315441, 10317355, 10318177, 10316603, 10315049, 10313726, 10317367, 10314711, 10315826, 10318768, 10317793, 10318969, 10315008], "A": [10312991, 10313324, 10313565, 10313501, 10314349, 10313172, 10313135, 10314168, 10314385, 10315234, 10313926, 10317754, 10314988, 10315685, 10313735, 10314526, 10314740, 10314101, 10314876, 10312997]}, "name": "B. Clique Problem", "statement": "The clique problem is one of the most well-known NP-complete problems.\r\nUnder some simplification it can be formulated as follows. Consider an\r\nundirected graph . It is required to find a subset of vertices of the\r\nmaximum size such that any two of them are connected by an edge in graph\r\n. Sounds simple, doesn\u2019t it? Nobody yet knows an algorithm that finds a\r\nsolution to this problem in polynomial time of the size of the graph.\r\nHowever, as with many other NP-complete problems, the clique problem is\r\neasier if you consider a specific type of a graph.Consider distinct\r\npoints on a line. Let the -th point have the coordinate and weight .\r\nLet\u2019s form graph , whose vertices are these points and edges connect\r\nexactly the pairs of points , such that the distance between them is not\r\nless than the sum of their weights, or more formally: .Find the size of\r\nthe maximum clique in such graph.\r\n", "solutions": ["#include <bits/stdc++.h>\n#define REP(a,b) for(int a=0; a<(b); ++a)\n#define FWD(a,b,c) for(int a=(b); a<(c); ++a)\n#define FWDS(a,b,c,d) for(int a=(b); a<(c); a+=d)\n#define BCK(a,b,c) for(int a=(b); a>(c); --a)\n#define ALL(a) (a).begin(), (a).end()\n#define SIZE(a) ((int)(a).size())\n#define VAR(x) #x \": \" << x << \" \"\n#define popcount __builtin_popcount\n#define popcountll __builtin_popcountll\n#define gcd __gcd\n#define x first\n#define y second\n#define st first\n#define nd second\n#define pb push_back\n\nusing namespace std;\n\ntemplate<typename T> ostream& operator<<(ostream &out, const vector<T> &v){ out << \"{\"; for(const T &a : v) out << a << \", \"; out << \"}\"; return out; }\ntemplate<typename S, typename T> ostream& operator<<(ostream &out, const pair<S,T> &p){ out << \"(\" << p.st << \", \" << p.nd << \")\"; return out; }\n\ntypedef long long LL;\ntypedef pair<int, int> PII;\ntypedef long double K;\ntypedef vector<int> VI;\n\nconst int INF = 1000000000;\n\nconst int dx[] = {0,0,-1,1}; //1,1,-1,1};\nconst int dy[] = {-1,1,0,0}; //1,-1,1,-1};\n\nint n, res;\nint X[200010];\nint W[200010];\nint R[200010];\n\nstruct event {\n\tint i, type, x;\n};\n\nbool cmp(event a, event b){\n\tif(a.x != b.x) return a.x < b.x;\n\treturn a.type < b.type;\n}\n\nvector<event> E;\n\nint main(){\n\tscanf(\"%d\", &n);\n\tevent e;\n\tFWD(i,0,n){\n\t\tscanf(\"%d %d\", &X[i], &W[i]);\n\t\te.i = i;\n\t\te.type = 1;\n\t\te.x = X[i] - W[i];\n\t\tE.push_back(e);\n\t\te.type = -1;\n\t\te.x = X[i] + W[i];\n\t\tE.push_back(e);\n\t}\n\tsort(ALL(E), cmp);\n\tFWD(i,0,SIZE(E)){\n\t\te = E[i];\n//\t\tprintf(\"event %d %d %d\\n\", e.i, e.type, e.x);\n\t\tif(e.type == -1) res = max(res, R[e.i]);\n\t\telse R[e.i] = res + 1;\n\t}\n\tprintf(\"%d\\n\", res);\n\treturn 0;\n}\n\n"], "input": "", "output": "", "tags": ["dp", "greedy"], "dificulty": "1800", "interactive": false}