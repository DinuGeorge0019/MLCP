{
    "link": "https://codeforces.com//contest/321/problem/E",
    "problemId": "3267",
    "problem_idx": "E",
    "shortId": "321E",
    "contest_number": "321",
    "problem_submissions": {
        "D": [
            3996276,
            3980026,
            3983272,
            3983312,
            12592698,
            3984131
        ],
        "E": [
            3980136,
            4452055,
            3980389,
            3985877,
            3982432,
            3983276,
            3983985,
            3983546,
            3989402,
            3982283,
            3982901,
            3987486,
            3986621,
            3986597,
            3984324
        ],
        "B": [
            3977018,
            3976497,
            3975346,
            3975457,
            3977862,
            3977933,
            3976248,
            3977096,
            3975835,
            3975367,
            3981509,
            3977308,
            3981308,
            3976604,
            3978354,
            23607133
        ],
        "C": [
            3976574,
            3973635,
            80179378,
            80179360,
            80178543,
            80177368,
            3977407,
            3978721,
            3979609,
            3977413,
            3979117,
            3980301,
            3977480,
            3978832,
            3979230,
            3979055,
            3978017,
            3980667,
            3983932,
            3980825
        ],
        "A": [
            3973735,
            3982224,
            3988924,
            3983503,
            3973922,
            3973057,
            3973436,
            3974764,
            3973866,
            3973513,
            3973909,
            3973666,
            3985547,
            3973654,
            3974568
        ]
    },
    "name": "E. Ciel and Gondolas",
    "statement": "Fox Ciel is in the Amusement Park. And now she is in a queue in front of\r\nthe Ferris wheel. There are people (or foxes more precisely) in the\r\nqueue: we use first people to refer one at the head of the queue, and\r\n-th people to refer the last one in the queue.There will be gondolas,\r\nand the way we allocate gondolas looks like this: When the first\r\ngondolas come, the people in head of the queue go into the gondolas.\r\nThen when the second gondolas come, the people in head of the remain\r\nqueue go into the gondolas. ... The remain people go into the last (-th)\r\ngondolas. Note that , , ..., must be positive. You can get from the\r\nstatement that and .You know, people don’t want to stay with strangers\r\nin the gondolas, so your task is to find an optimal allocation way (that\r\nis find an optimal sequence ) to make people happy. For every pair of\r\npeople and , there exists a value denotes a level of unfamiliar. You can\r\nassume for all and for all . Then an unfamiliar value of a gondolas is\r\nthe sum of the levels of unfamiliar between any pair of people that is\r\ninto the gondolas.A total unfamiliar value is the sum of unfamiliar\r\nvalues for all gondolas. Help Fox Ciel to find the minimal possible\r\ntotal unfamiliar value for some optimal allocation.\r\n",
    "solutions": [
        "/*\n * e.cpp\n *\n *  Created on: 2013-6-29\n *      Author: ����\n */\n\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\n#include <cstring>\n#include <vector>\n#include <deque>\nusing namespace std;\n\nconst int MAX_N = 4000 + 10, MAX_K = 800 + 10;\n\nint dp[MAX_K][MAX_N], n, k;\nint U[MAX_N][MAX_N];\n\nconst int INF = ~0U >> 3;\n\nstruct node {\n\tint l, r, ch;\n\tnode() {\n\t}\n\tnode(int _l, int _r, int _ch) :\n\t\t\tl(_l), r(_r), ch(_ch) {\n\t}\n};\n\nint Prev[MAX_N], Dp[MAX_N];\nint top = 0;\nint Cost(int l, int r) {\n\treturn U[l - 1][r - 1];\n}\n\nint Get(int i, int j) {\n\tif (j >= i)\n\t\treturn INF;\n\treturn Prev[j] + Cost(j + 1, i);\n}\nint binary(node t, int i) {\n\tint l = t.l, r = t.r;\n#define check(m) (Get(m,t.ch)<Get(m,i))\n\tif (check(r))\n\t\treturn r;\n\twhile (l + 1 < r) {\n\t\tint m = (l + r) / 2;\n\t\tif (check(m))\n\t\t\tl = m;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n#undef check\n}\n\nvoid oneStep() {\n\tDp[0] = 0;\n\tdeque<node> D;\n\tD.push_back(node(1, n, 0));\n\tfor (int i = 1; i <= n; i++) {\n\t\tDp[i] = Get(i, D.front().ch);\n\t\tif (D.front().l < D.front().r)\n\t\t\tD.front().l++;\n\t\telse\n\t\t\tD.pop_front();\n\t\tnode t;\n\t\tint e;\n\t\twhile (D.size()) {\n\t\t\tt = D.back();\n\t\t\tif (Get(t.l, i) <= Get(t.l, t.ch)) {\n\t\t\t\tD.pop_back();\n\t\t\t} else {\n\t\t\t\te = binary(t, i);\n\t\t\t\tD.back().r = e;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (D.size() == 0)\n\t\t\tD.push_back(node(i + 1, n, i));\n\t\telse if (e < n)\n\t\t\tD.push_back(node(e + 1, n, i));\n\t}\n}\n\nint main() {\n\tcin >> n >> k;\n\tfor (int r = 0; r < n; ++r) {\n\t\tfor (int c = 0; c < n; ++c) {\n\t\t\tchar ch;\n\t\t\twhile (ch = getchar(), (ch < '0' || ch > '9'))\n\t\t\t\t;\n\t\t\tU[r][c] = ch - '0';\n\t\t}\n\t}\n\n\tfor (int i = n - 1; i >= 0; --i) {\n\t\tfor (int j = i + 2; j < n; ++j) {\n\t\t\tU[i][j] += U[i + 1][j] + U[i][j - 1] - U[i + 1][j - 1];\n\t\t}\n\t}\n\n\t//k=1\n\tDp[0] = 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tDp[i] = Cost(1, i);\n\t}\n\tmemcpy(Prev, Dp, sizeof(int) * (n + 1));\n\n\tfor (int i = 2; i <= k; ++i) {\n\t\toneStep();\n\t\tmemcpy(Prev, Dp, sizeof(int) * (n + 1));\n\t}\n\tcout << Dp[n] << endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "divide and conquer",
        "dp"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Ciel and Gondolas.json",
    "editorial_link": "https://codeforces.com//blog/entry/8192",
    "editorial": "This problem may jog your memory of OI times (if you have been an OIer\r\nand now grows up, like me). Maybe some Chinese contestants might think\r\nthis problem doesnât worth 2500, but DP optimization is an advanced\r\ntopic in programming contest for many regions. Itâs quite easy to find\r\nan O(N^2 K) DP: (dp[i][j] means the minimal cost if we divide 1...j\r\nfoxes into i groups) There are many ways to optimize this kind of dp\r\nequation, but a large part of them based one the property of cost\r\nfunction. So we need to find some property independent of cost function.\r\nLet opt[i][j] = the smallest k such that dp[i][j] = dp[i][k] +\r\ncost(k+1...j) Then intuitively we have opt[i][1] <= opt[i][2] <= ... <=\r\nopt[i][n]. (I admit some people donât think itâs intuitively correct,\r\nbut it can proof by some high school algebra) Then how to use this\r\nstuff? Let n = 200 and suppose we already get dp[i][j] for i<=3 and now\r\nwe have to compute dp[4][j]: If we first compute dp[4][100], then we can\r\nhave opt[4][100] at the same time. And when we compute dp[4][1] ...\r\ndp[4][99], we know that the k must lay in 1...opt[4][100]. When we\r\ncompute dp[4][101] ... dp[4][200], we know that k must lay in\r\nopt[4][100]...n. Letâs formalize this thing: We use compute(d, L, R,\r\noptL, optR) to denote we are computing dp[d][L...R], and we know the k\r\nmust be in range optL...optR. Then we have: One can show that this\r\nsolution will run in O(NlogN * K). Note that we donât need opt[d][M] at\r\nthe center of interval optL...optR. We can proof at each recursive\r\ndepth, the total cost by line 2 will be no more than 2n. And there are\r\nat most O(log(n)) depths.\r\n",
    "hint": []
}