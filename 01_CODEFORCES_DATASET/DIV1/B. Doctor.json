{"link": "https://codeforces.com//contest/83/problem/B", "problemId": "443", "problem_idx": "B", "shortId": "83B", "contest_number": "83", "problem_submissions": {"E": [451947, 450977, 459818, 465914], "D": [449763, 448488, 452955, 452808, 452804, 448288, 449164, 450962, 452221, 451606, 451773, 451891, 450141, 449774, 449599, 450292, 449258, 450035, 450619], "C": [448521, 455889, 451494, 451794, 449865, 450165, 450276, 450602, 449657, 452977, 452829, 452759], "B": [447440, 452573, 449754, 447625, 448201, 447469, 450579, 448308, 447785, 447475, 447853, 448099, 447816, 448223, 447713, 447775], "A": [446362, 452366, 446401, 446361, 446485, 446374, 446375, 446560, 446585, 446384, 446420, 446524, 446437, 447399, 446502, 446789]}, "name": "B. Doctor", "statement": "There are animals in the queue to Dr. Dolittle. When an animal comes\r\ninto the office, the doctor examines him, gives prescriptions, appoints\r\ntests and may appoint extra examination. Doc knows all the forest\r\nanimals perfectly well and therefore knows exactly that the animal\r\nnumber in the queue will have to visit his office exactly times. We will\r\nassume that an examination takes much more time than making tests and\r\nother extra procedures, and therefore we will assume that once an animal\r\nleaves the room, it immediately gets to the end of the queue to the\r\ndoctor. Of course, if the animal has visited the doctor as many times as\r\nnecessary, then it doesn\u2019t have to stand at the end of the queue and it\r\nimmediately goes home. Doctor plans to go home after receiving animals,\r\nand therefore what the queue will look like at that moment is important\r\nfor him. Since the doctor works long hours and she can\u2019t get distracted\r\nlike that after all, she asked you to figure it out.\r\n", "solutions": ["#pragma comment(linker, \"/STACK:60000000\")\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <ctime>\n#include <cstring>\n#include <cassert>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <queue>\n#include <functional>\n\nusing namespace std;\n\n#define forn(i, n) for(int i = 0; i < (int)(n); i++)\n#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)\n#define pb push_back\n#define mp make_pair\n#define fs first\n#define sc second\n#define last(a) int(a.size() - 1)\n#define all(a) a.begin(), a.end()\n#define seta(a,x) memset (a, x, sizeof (a))\n#define I (int)\n\ntypedef long long int64;\ntypedef pair <int, int> pii;\ntypedef long double ldb;\n\nconst long double eps = 1e-9;\nconst int inf = (1 << 30) - 1;\nconst int64 inf64 = ((int64)1 << 62) - 1;\nconst long double pi = 3.1415926535897932384626433832795;\n\ntemplate <class T> T sqr (T x) {return x * x;}\n\nmap <int, int> S;\nint a[100000]; \n\nint main ()\n{\n//\tfreopen (\"input.txt\", \"r\", stdin);\n//\tfreopen (\"output.txt\", \"w\", stdout);\n\tint n;\n\tint64 k;\n\tcin >> n >> k;\n\tS.clear ();\n\tforn (i, n)\n\t\tscanf (\"%d\", &a[i]);\n\tforn (i, n) \n\t\tif (S.count (a[i]))\n\t\t\tS[a[i]] ++;\n\t\telse\n\t\t\tS[a[i]] = 1;\n\tint64 sum = 0;\n\tforn (i, n)\n\t\tsum += a[i];\n\tif (sum < k) {\n\t\tcout << -1 << endl;\n\t\treturn 0;\n\t}\n\tint64 N = n;\n\tint64 cur = 0;\n\tfor (map <int, int> :: iterator it = S.begin(); it != S.end(); it ++)\n\t\tif (N * (it->fs - cur) <= k) {\n\t\t\tk -= N * (it->fs - cur);\n\t\t\tcur = it->fs;\n\t\t\tN -= it->sc;\n\t\t} else {\n\t\t\tcur += k / N;\n\t\t\tk %= N;\n\t\t\tbreak;\n\t\t}\n\tint l = 0;\n\tforn (i, n) \n\t\tif (a[i] > cur) {\n\t\t\tif (k == 0) {\n\t\t\t\tl = i;\n\t\t\t\tbreak;\n\t\t\t} else\n\t\t\t\tk --;\n\t\t}\n\tfor (int i = l; i < n; i ++)\n\t\tif (a[i] > cur)\n\t\t\tprintf (\"%d \", i+1);\n\tfor (int i = 0; i < l; i ++)\n\t\tif (a[i] > cur+1)\n\t\t\tprintf (\"%d \", i+1);\n\tprintf (\"\\n\");\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "math", "sortings"], "dificulty": "1800", "interactive": false}