{
    "link": "https://codeforces.com//contest/1558/problem/A",
    "problemId": "1088949",
    "problem_idx": "A",
    "shortId": "1558A",
    "contest_number": "1558",
    "problem_submissions": {
        "F": [
            126899482,
            126888055,
            126902100,
            126890640,
            126888389,
            126894123,
            126904590,
            126900041,
            126902212,
            126902942,
            127549735,
            127006693
        ],
        "E": [
            126883583,
            126896785,
            126884151,
            126898148,
            126905418,
            126902611,
            126899238,
            126907028,
            126907352,
            126891363,
            126891974,
            126891356,
            126892061,
            126902546,
            126900088,
            126903655,
            126904227,
            126900317,
            126902700
        ],
        "D": [
            126869704,
            126870708,
            126871179,
            126874038,
            126874151,
            126876731,
            126871810,
            126867588,
            126872511,
            126871952,
            126882884,
            126882215,
            126882465,
            126878861,
            126876122,
            126890668,
            126874784,
            126883630,
            126892178,
            126890480
        ],
        "B": [
            126858181,
            126855670,
            126854102,
            126855872,
            126858058,
            126860085,
            126854841,
            126852806,
            126853901,
            126856718,
            126855353,
            126856232,
            126858032,
            126857658,
            126854131,
            126863721,
            126854756,
            126864821,
            126867061,
            126863501
        ],
        "A": [
            126854362,
            126850555,
            126848635,
            126848815,
            126849088,
            126855964,
            126848126,
            126847884,
            126848457,
            126849581,
            126847772,
            126849333,
            126852232,
            126849014,
            126848809,
            126853376,
            126847687,
            126859049,
            126849750,
            126850402
        ],
        "C": [
            126850882,
            126858888,
            126859482,
            126861350,
            126866099,
            126867225,
            126859442,
            126858664,
            126862495,
            126861859,
            126865577,
            126860578,
            126863128,
            126865366,
            126858535,
            126873768,
            126863562,
            126873408,
            126874458,
            126871983
        ]
    },
    "name": "A. Charmed by the Game",
    "statement": "Alice and Borys are playing tennis.A tennis match consists of . In each\r\ngame, one of the players is and the other one is .Players serve in\r\nturns: after a game where Alice is serving follows a game where Borys is\r\nserving, and vice versa.Each game ends with a victory of one of the\r\nplayers. If a game is won by the serving player, it\u2019s said that this\r\nplayer . If a game is won by the receiving player, it\u2019s said that this\r\nplayer .It is known that Alice won a games and Borys won b games during\r\nthe match. It is unknown who served first and who won which games.Find\r\nall values of k such that exactly k breaks could happen during the match\r\nbetween Alice and Borys in total.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nvoid solve(){\n\tint a, b;\n\tcin >> a >> b;\n\tint n = (a + b);\n\tint x = n / 2;\n\tint y = (n+1) / 2;\n\tset<int> val;\n\tfor(int _ = 0; _ < 2; _++){\n\t\tfor(int z = min(a, x) + min(b, y); z >= max(a + x, b + y) - n; z -= 2) val.insert(n - z);\n\t\tswap(a, b);\n\t}\n\tcout << val.size() << '\\n';\n\tfor(int z : val){\n\t\tcout << z << ' ';\n\t}\n\tcout << '\\n';\n}\n\nint main(){\n\tios_base::sync_with_stdio(false), cin.tie(nullptr);\n\tint T;\n\tcin >> T;\n\twhile(T--) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Charmed by the Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/94216",
    "editorial": "First of all, we don\u00e2\u0080\u0099t know who served first, but there are only two\r\noptions, so let\u00e2\u0080\u0099s just try both and unite the sets of \u00e2\u0080\u0099s we get.Assume\r\nthat Alice served first. Exactly games were played. If is even, both\r\nplayers served exactly times, and if is odd, Alice served one more time\r\nthan Borys.The simplest way to consider both cases is to say that Alice\r\nserved times, and Borys served times ( denotes rounding up, and denotes\r\nrounding down).Let be the number of times Borys broke Alice\u00e2\u0080\u0099s serve (),\r\nand let be the number of times Alice broke Borys\u00e2\u0080\u0099 serve ().In this case,\r\nthe number of games Alice won is , and the number of games Borys won is\r\n.We know neither nor , but let\u00e2\u0080\u0099s loop over . From , we can calculate .\r\nIf , the values of and represent a valid scenario of the match with\r\nexactly breaks in total.The case when Borys served first is handled\r\nsimilarly.Analyzing the formulas further, we can find a \"closed-form\"\r\nsolution: Let . If is even, all possible values of are . If is odd, all\r\npossible values of are .\r\n"
}