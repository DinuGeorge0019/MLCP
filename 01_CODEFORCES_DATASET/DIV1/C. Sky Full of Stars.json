{
    "link": "https://codeforces.com//contest/997/problem/C",
    "problemId": "194452",
    "problem_idx": "C",
    "shortId": "997C",
    "contest_number": "997",
    "problem_submissions": {
        "D": [
            39842612,
            39837685,
            39842379,
            39838295,
            39837935,
            39842740,
            39843076,
            39859781,
            39844833,
            39844190,
            39833354,
            39839922,
            39854124,
            39853938,
            39841292,
            39838113,
            39841101,
            39836594,
            39854271,
            39854180,
            39841626
        ],
        "E": [
            39838988,
            39839303,
            40677876,
            39860384,
            216157458,
            207265582
        ],
        "C": [
            39833262,
            39841343,
            39842130,
            39832983,
            39840312,
            39831596,
            39835919,
            39837971,
            39858804,
            39838178,
            39837144,
            39850195,
            39850032,
            39850007,
            39849997,
            39849695,
            39849346,
            39849204,
            39848619,
            39840597,
            39849012,
            39851642,
            39851588,
            39851576,
            39851518,
            39851506,
            39851317,
            39851202,
            39850994,
            39850828,
            39850773,
            39850608,
            39850592,
            39850571,
            39850194,
            39850131,
            39850042,
            39850008,
            39849917,
            39849907,
            39849611,
            39849473,
            39849310,
            39849195,
            39849073,
            39849029,
            39848917,
            39848844,
            39833638
        ],
        "B": [
            39825922,
            39826364,
            39827934,
            39825576,
            39828070,
            39839886,
            39829927,
            39831407,
            39858660,
            39828494,
            39832160,
            39839554,
            39828743,
            39833583,
            39835350,
            39842444,
            39828730,
            39826817
        ],
        "A": [
            39823476,
            39823484,
            39823390,
            39823892,
            39823506,
            39823245,
            39824375,
            39824053,
            39858605,
            39823570,
            39823352,
            39837740,
            39823612,
            39823561,
            39841314,
            39824552,
            39838338,
            39823711,
            39823355
        ]
    },
    "name": "C. Sky Full of Stars",
    "statement": "On one of the planets of Solar system, in Atmosphere University, many\r\nstudents are fans of bingo game.It is well known that one month on this\r\nplanet consists of n^2 days, so calendars, represented as square matrix\r\nn by n are extremely popular.Weather conditions are even more unusual.\r\nDue to the unique composition of the atmosphere, when interacting with\r\nsunlight, every day sky takes one of three colors: blue, green or red.To\r\nplay the bingo, you need to observe the sky for one month after each\r\nday, its cell is painted with the color of the sky in that day, that is,\r\nblue, green or red.At the end of the month, students examine the\r\ncalendar. If at least one row or column contains only cells of one\r\ncolor, that month is called lucky.Let’s call two colorings of calendar\r\ndifferent, if at least one cell has different colors in them. It is easy\r\nto see that there are 3^{n\r\ncdot n} different colorings. How much of them are lucky? Since this\r\nnumber can be quite large, print it modulo 998244353.\r\n",
    "solutions": [
        "#include <iostream>\n#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#include <time.h>\n#include <stdlib.h>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <algorithm>\n#include <sstream>\n#include <stack>\n#include <iomanip>\nusing namespace std;\n#define pb push_back\n#define mp make_pair\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntypedef double ld;\ntypedef vector<int> vi;\n#define fi first\n#define se second\n#define fe first\n#define FO(x) {freopen(#x\".in\",\"r\",stdin);freopen(#x\".out\",\"w\",stdout);}\n#define Edg int M=0,fst[SZ],vb[SZ],nxt[SZ];void ad_de(int a,int b){++M;nxt[M]=fst[a];fst[a]=M;vb[M]=b;}void adde(int a,int b){ad_de(a,b);ad_de(b,a);}\n#define Edgc int M=0,fst[SZ],vb[SZ],nxt[SZ],vc[SZ];void ad_de(int a,int b,int c){++M;nxt[M]=fst[a];fst[a]=M;vb[M]=b;vc[M]=c;}void adde(int a,int b,int c){ad_de(a,b,c);ad_de(b,a,c);}\n#define es(x,e) (int e=fst[x];e;e=nxt[e])\n#define esb(x,e,b) (int e=fst[x],b=vb[e];e;e=nxt[e],b=vb[e])\n#define SZ 2333333\nll fac[SZ],rfac[SZ];\nconst int MOD=998244353;\nll qp(ll a,ll b)\n{\n\tll x=1; a%=MOD;\n\twhile(b)\n\t{\n\t\tif(b&1) x=x*a%MOD;\n\t\ta=a*a%MOD; b>>=1;\n\t}\n\treturn x;\n}\nll C(int a,int b)\n{\n\tif(b>a||b<0) return 0;\n\treturn fac[a]*rfac[a-b]%MOD*rfac[b]%MOD;\n}\nint main()\n{\n\tfac[0]=1;\n\tfor(int i=1;i<SZ;++i) fac[i]=fac[i-1]*i%MOD;\n\trfac[SZ-1]=qp(fac[SZ-1],MOD-2);\n\tfor(int i=SZ-1;i;--i) rfac[i-1]=rfac[i]*i%MOD;\n\tint n;\n\tcin>>n;\n\tll ans=qp(qp(3,n)-3,n);\n\tfor(int i=1;i<=n;++i)\n\t\tif(i&1)\n\t\t{\n\t\tans-=C(n,i)*qp(qp(3,n-i)-1,n)*3;ans%=MOD;\n\t\tans-=C(n,i)*(qp(3,i)-3)%MOD*\n\t\tqp(qp(3,n-i),n);ans%=MOD;\n\t\t}\n\t\telse\n\t\t{\n\t\tans+=C(n,i)*qp(qp(3,n-i)-1,n)*3;ans%=MOD;\n\t\tans+=C(n,i)*(qp(3,i)-3)%MOD*\n\t\tqp(qp(3,n-i),n);ans%=MOD;\n\t\t}\n\tans=qp(3,(ll)n*n)-ans;\n\tans=(ans%MOD+MOD)%MOD;\n\tcout<<ans<<\"\\n\";\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Sky Full of Stars.json",
    "editorial_link": "https://codeforces.com/blog/entry/60357",
    "editorial": "Let be the set of all colorings, where -th line contains only one color,\r\nand be the set of colorings, where -th column contains only one\r\ncolor.This way, you need to calculate .As usual, we can use\r\ninclusion-exclusion formula to reduce the calculation of multiplications\r\nto calculation all possible intersections of sets above.More over, due\r\nto the obvious symmetry, to calculate the size of intersection of some\r\nset of and it is not important to know exact indices only number of\r\ntaken -s and number of -s.This way Where is the number of colorings,\r\nwhere first rows and first columns are onecolored.It turns out, that\r\nformula for differs significantly depending on presence of zero in itâs\r\narguments.Letâs examine the case where zero is present, the .Indeed, you\r\nshould choose one color in each of the first columns, and the rest\r\nshould be painted in any way. If both arguments are , that is, there is\r\nat least one one-colored column and at least one-colored row, than we\r\ncan notice, that all one-colored rows and columns are in fact of one\r\ncolor.This way, Since we should first select the globally common color,\r\nand then paint all the rest in any way.Summation of all -s gives\r\nsolution with or complexity, depending on implementation.But we need to\r\ngo faster. Letâs sum all summands with or in a stupid way, in .Then\r\nexamine all other summands. We have a formula:Letâs replace our\r\nvariables: , .Since , , we haveNote, that .Using this, we can collect\r\nall summands for fixed , however with fixed we have not summands, but .\r\nWe can workaround it by adding and removing the missing summand. Letâs\r\ngo: This formula has only summands, nd hence can be evaluated fast\r\nenough.To calculate powers of number fast, we can use binary pow method.\r\n",
    "hint": []
}