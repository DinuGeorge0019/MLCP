{
    "link": "https://codeforces.com//contest/2023/problem/A",
    "problemId": "2964364",
    "problem_idx": "A",
    "shortId": "2023A",
    "contest_number": "2023",
    "problem_submissions": {
        "F": [
            287014608,
            287072234,
            299830672,
            287085195,
            287027962,
            287042299,
            287238133,
            287043650
        ],
        "E": [
            286990891,
            287003441,
            287204391,
            287202274,
            287014470,
            287010378,
            287009293,
            287034992,
            287190288,
            287004818,
            287142133
        ],
        "D": [
            286943910,
            286985197,
            287179114,
            287178062,
            286983477,
            286986708,
            286993474,
            286930212,
            286984453,
            286985894,
            286983025,
            286981875,
            287091406,
            286988866,
            286991623,
            286991730,
            286972363,
            290388826,
            290388744,
            286996161,
            286993279,
            287000155,
            287068676,
            287061033,
            286997472,
            287003784
        ],
        "C": [
            286925333,
            287063584,
            286928411,
            286930839,
            286944563,
            286945303,
            286973941,
            286936797,
            286923792,
            286935049,
            286934113,
            286960906,
            286944493,
            286935726,
            286931426,
            286988231,
            286961072,
            286929444,
            286959433,
            286973882,
            286960461
        ],
        "B": [
            286913842,
            286912400,
            286915696,
            286920706,
            286917936,
            286918820,
            286920898,
            286929873,
            286915247,
            286917134,
            286915488,
            286916176,
            286919025,
            286919305,
            286914068,
            286921817,
            286912738,
            286921828,
            286922164,
            286920262
        ],
        "A": [
            286905356,
            286905575,
            286907414,
            286907460,
            286908014,
            286911602,
            286910636,
            286905107,
            286906378,
            286906055,
            286906420,
            286919318,
            286909880,
            286905489,
            286910067,
            286910062,
            286905533,
            286909956,
            286907288,
            286911621
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135341",
    "editorial": "Let\u00e2\u0080\u0099s sort the arrays in order of non-decreasing sum of elements. It\r\nturns out that it is always optimal to concatenate the arrays in this\r\norder.To prove this, let\u00e2\u0080\u0099s consider some optimal answer. Note that if in\r\nthe final order there are two adjacent arrays, such that the sum of the\r\nelements of the left array is greater than the sum of the elements of\r\nthe right array, then we can swap them, and the number of inversions\r\nwill not increase. Thus, we can bring any optimal answer to ours by\r\nswapping adjacent arrays so that the number of inversions does not\r\nincrease each time. Thus, such an order is truly optimal.\r\n",
    "name": "A. Concatenation of Arrays",
    "statement": "You are given n arrays a_1,\r\nldots, a_n. The length of each array is two. Thus, a_i = [a_{i, 1},\r\na_{i, 2}]. You need to concatenate the arrays into a single array of\r\nlength 2n such that the number of inversions^{\r\ndagger} in the resulting array is minimized. Note that you to count the\r\nactual number of inversions.More formally, you need to choose a\r\npermutation^{\r\nddagger} p of length n, so that the array b = [a_{p_1,1}, a_{p_1,2},\r\na_{p_2, 1}, a_{p_2, 2},\r\nldots, a_{p_n,1}, a_{p_n,2}] contains as few inversions as possible.^{\r\ndagger}The number of inversions in an array c is the number of pairs of\r\nindices i and j such that i < j and c_i > c_j.^{\r\nddagger}A permutation of length n is an array consisting of n distinct\r\nintegers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray), and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\u00a0using i64 = long long;\u00a0void solve() {    int n;    std::cin >> n;        std::vector<std::array<int, 2>> a(n);    for (int i = 0; i < n; i++) {        std::cin >> a[i][0] >> a[i][1];    }        std::sort(a.begin(), a.end(),        [&](auto x, auto y) {            return x[0] + x[1] < y[0] + y[1];        });    for (int i = 0; i < n; i++) {        std::cout << a[i][0] << \" \" << a[i][1] << \" \\n\"[i == n - 1];    }}\u00a0int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);\u00a0    int t;    std::cin >> t;\u00a0    while (t--) {        solve();    }\u00a0    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Concatenation of Arrays.json"
}