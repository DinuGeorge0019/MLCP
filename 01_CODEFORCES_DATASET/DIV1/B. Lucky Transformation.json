{
    "link": "https://codeforces.com//contest/121/problem/B",
    "problemId": "643",
    "problem_idx": "B",
    "shortId": "121B",
    "contest_number": "121",
    "problem_submissions": {
        "E": [
            813184,
            803481,
            804722,
            807180,
            805935,
            810990,
            806927,
            805358,
            806319,
            806698,
            840501,
            806868,
            805056,
            812302,
            812293,
            806675,
            806432,
            806020,
            808900,
            807365
        ],
        "D": [
            805974,
            806976,
            804593,
            807857,
            805817,
            819735,
            813011,
            812998,
            837217,
            803664,
            808156,
            805706,
            805598
        ],
        "C": [
            802677,
            802018,
            801698,
            801546,
            802560,
            819807,
            803535,
            802530,
            801865,
            801880,
            802443,
            803919,
            803381,
            804324,
            802973,
            804478,
            802405,
            803458
        ],
        "B": [
            801179,
            800708,
            801605,
            800499,
            800562,
            802015,
            800515,
            800124,
            800949,
            800846,
            801743,
            801824,
            801868,
            801182,
            802657,
            801227,
            800781
        ],
        "A": [
            799835,
            799318,
            799152,
            799351,
            799213,
            800618,
            799387,
            799038,
            799161,
            799506,
            799375,
            800196,
            800336,
            799657,
            799505,
            799863,
            799637
        ]
    },
    "name": "B. Lucky Transformation",
    "statement": "Petya has a number consisting of digits without leading zeroes. He\r\nrepresented it as an array of digits without leading zeroes. Let\u2019s call\r\nit . The numeration starts with , starting from the most significant\r\ndigit. Petya wants to perform the following times: find the minimum such\r\nthat and , if is odd, then to assign , otherwise to assign . Note that\r\nif no was found, then the operation counts as completed and the array\r\ndoesn\u2019t change at all.You are given the initial number as an array of\r\ndigits and the number . Help Petya find the result of completing\r\noperations.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <iostream>\n#include <assert.h>\n#include <sstream>\n#include <complex>\n#include <numeric>\n#include <cstring>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <queue>\n#include <cmath>\n#include <map>\n#include <set>\n\nusing namespace std;\n\n#define all(a)\t\t\t(a).begin(), (a).end()\n#define sz(a)\t\t\tint((a).size())\n#define FOR(i, a, b)\tfor (int i(a); i < b; ++i)\n#define REP(i, n)\t\tFOR(i, 0, n)\n#define UN(v)\t\t\tsort(all(v)), (v).erase(unique((v).begin(), (v).end()), (v).end())\n#define CL(a, b)\t\tmemset(a, b, sizeof a)\n#define pb\t\t\t\tpush_back\n#define X\t\t\t\tfirst\n#define Y\t\t\t\tsecond\n\ntypedef long long ll;\ntypedef vector <int> vi;\ntypedef pair <int, int> pii;\n\nint n, k;\nchar s[100500];\n\nint main() {\n\tcin >> n >> k >> s;\n\tint i = 0;\n\tfor (; k > 0; ) {\n\t\tif (s[i] == 0 || s[i + 1] == 0) break;\n\t\tif (s[i] == '4' && s[i + 1] == '7') {\n\t\t\tif (i % 2) {\n\t\t\t\ts[i] = '7';\n\t\t\t\t--k;\n\t\t\t\tif (i) {\n\t\t\t\t\t--i;\n\t\t\t\t\tif (s[i] == '4') {\n\t\t\t\t\t\tk %= 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ts[i + 1] = '4';\n\t\t\t\t--k;\n\t\t\t}\n\t\t} else ++i;\n\t}\n\tputs(s);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "strings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Lucky Transformation.json",
    "editorial_link": "https://codeforces.com//blog/entry/2956",
    "editorial": "Notice, that if there exits such i that i mod 2 = 0 and di?=?4 and di?+?1?=?7 and di?-?1?=?4 then after that operation there will be a loop. So, let we simple do all operation from left ro right, and, when we will win our loop, just return a rusult (which variates by k mod 2 (k is one that leaves after operation from left side)."
}