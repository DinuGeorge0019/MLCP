{"link": "https://codeforces.com//contest/354/problem/B", "problemId": "3667", "problem_idx": "B", "shortId": "354B", "contest_number": "354", "problem_submissions": {"D": [4777100, 138831224, 4787255], "B": [4773542, 4773611, 4776468, 4775805, 4775193, 4773708, 4777067, 4775769, 4772925, 4775400, 4771413, 4771906, 4774887, 4777860, 4778618], "E": [4771246, 4771315, 4769492, 4772059, 4772808, 4771657, 4773587, 4773533, 4773905, 4774625, 4774509, 4772823, 4772897, 4776755, 4773505, 4773556, 4773459], "A": [4769568, 4768918, 4772027, 4767693, 4768128, 4767864, 4767903, 4768032, 4777935, 4771459, 4769551, 4767761, 4767775, 4769653, 4768177, 4767934, 4771768], "C": [4768755, 4770072, 4771488, 4770801, 4770647, 4775263, 4770953, 4771621, 4770211, 4772507, 4775843, 4771271, 4771934, 4770241, 4775127, 4769346]}, "name": "B. Game with Strings", "statement": "Given an table consisting of lowercase English letters. We\u2019ll consider\r\nsome string if the table contains a correct path corresponding to the\r\ngiven string. In other words, good strings are all strings we can obtain\r\nby moving from the left upper cell of the table only to the right and\r\ndown. Here\u2019s the formal definition of correct paths:Consider rows of the\r\ntable are numbered from 1 to from top to bottom, and columns of the\r\ntable are numbered from 1 to from left to the right. Cell is a cell of\r\ntable on the -th row and in the -th column. This cell corresponds to\r\nletter .A path of length is a sequence of table cells . The following\r\npaths are correct: There is only one correct path of length , that is,\r\nconsisting of a single cell: ; Let\u2019s assume that is a correct path of\r\nlength , then paths and are correct paths of length . We should assume\r\nthat a path corresponds to a string of length : .Two players play the\r\nfollowing game: initially they have an empty string. Then the players\r\ntake turns to add a letter to the end of the string. After each move\r\n(adding a new letter) the resulting string must be good. The game ends\r\nafter turns. A player wins by the following scenario: If the resulting\r\nstring has strictly more letters \"\" than letters \"\", then the first\r\nplayer wins; If the resulting string has strictly more letters \"\" than\r\nletters \"\", then the second player wins; If the resulting string has the\r\nsame number of letters \"\" and \"\", then the players end the game with a\r\ndraw. Your task is to determine the result of the game provided that\r\nboth players played optimally well.\r\n", "solutions": ["#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <bitset>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\n#define INF (1<<29)\n\nint N;\nstring board[30];\n\nint dp[42][(1<<20)];\nint mask[42][30];\n\nint func(int i, int j, int c, bool first){\n    if(dp[i][j] != 10000) return dp[i][j];\n    \n    int next;\n    int ans = -INF;\n    \n    if(i == 2*(N-1)){\n        ans = 0;\n    } else {\n        REP(next,26){\n            int i2 = i + 1;\n            int j2 = (mask[i+1][next] & (j | (j << 1)));\n            if(j2 != 0) ans = max(ans, -func(i2, j2, next, !first));\n        }\n    }\n    \n    if(first){\n        if(c == 0) ans++; else if(c == 1) ans--;\n    } else {\n        if(c == 0) ans--; else if(c == 1) ans++;\n    }\n    \n//  cout << i << ' ' << j << ' ' << ans << endl;\n    \n    return dp[i][j] = ans;\n}\n\nint main(void){\n    int i,j,k;\n    \n    cin >> N;\n    REP(i,N) cin >> board[i];\n    \n    REP(i,2*N) REP(j,26) REP(k,N){\n        int x = k;\n        int y = i-x;\n        if(y >= 0 && y < N && board[x][y] - 'a' == j) mask[i][j] |= (1<<k);\n    }\n    \n    REP(i,2*N) REP(j,(1<<N)) dp[i][j] = 10000;\n    int ans = func(0, 1, board[0][0] - 'a', false);\n    if(ans < 0) cout << \"FIRST\" << endl;\n    if(ans == 0) cout << \"DRAW\" << endl;\n    if(ans > 0) cout << \"SECOND\" << endl;\n    \n    return 0;\n}\n"], "input": "", "output": "", "tags": ["bitmasks", "dp", "games"], "dificulty": "2400", "interactive": false}