{
    "link": "https://codeforces.com//contest/856/problem/B",
    "problemId": "121784",
    "problem_idx": "B",
    "shortId": "856B",
    "contest_number": "856",
    "problem_submissions": {
        "D": [
            30250286,
            30248673,
            30250147,
            30250541,
            30249770,
            30271191
        ],
        "C": [
            30249129,
            30248932,
            30248929,
            30249736,
            30251499,
            30249147,
            30250069,
            30249822
        ],
        "B": [
            30247472,
            30247324,
            30247880,
            30249381,
            30248057,
            30247570,
            30247709,
            30248446
        ],
        "A": [
            30246548,
            30246864,
            30247263,
            30246924,
            30246957,
            30246458,
            30246947,
            30246849
        ],
        "E": [
            30265847,
            30259642
        ]
    },
    "name": "B. Similar Words",
    "statement": "Let us call a non-empty sequence of lowercase English letters a . of a\r\nword is a word that can be obtained from by removing zero or more last\r\nletters of .Let us call two words , if one of them can be obtained from\r\nthe other by removing its first letter.You are given a set of words.\r\nFind the maximal possible size of set of non-empty words such that they\r\nsatisfy the following: each word of is prefix of some word from ; has no\r\nsimilar words.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <set>\n#include <map>\n#include <utility>\n#include <cstdlib>\n#include <memory>\n#include <queue>\n#include <cassert>\n#include <cmath>\n#include <ctime>\n#include <complex>\n#include <bitset>\n#include <fstream>\n#include <unordered_map>\n#include <unordered_set>\n#include <numeric>\n\nusing namespace std;\n\n#define ws ws_____________________\n#define y1 y1_____________________\n#define y0 y0_____________________\n#define left left_________________\n#define right right_______________\n#define next next_________________\n#define prev prev_________________\n#define hash hash_________________\n\n#define pb push_back\n#define fst first\n#define snd second\n#define mp make_pair \n#define sz(C) ((int) (C).size())\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)\n#define all(C) begin(C), end(C)\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int uint;\ntypedef pair<int,int> pii;\ntypedef pair<ll, ll> pll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<pii> vii;\ntypedef long double ld;\ntypedef complex<double> cd;\n\n#ifdef LOCAL\n#define eprintf(args...) fprintf(stderr, args), fflush(stderr)\n#else\n#define eprintf(...) ;\n#endif\n\n#define FILE_NAME \"a\"\n\nconst int MAX = 1e6 + 10;\n\nstring read_string() {\n\tstatic char buf[MAX];\n\tscanf(\"%s\\n\", buf);\n\treturn buf;\n}\n\nint n;\nvector<string> s;\n\nbool read() {\n\tif  (scanf(\"%d\\n\", &n) < 1) {\n\t\treturn 0;\n\t}\n\ts.resize(n);\n\tforn(i, n) {\n\t\ts[i] = read_string();\n\t}\n\treturn 1;\n}\n\nconst int A = 26;\n\nstruct Node;\nusing NodePtr = Node*;\n\nstruct Node {\n\tNodePtr to[A];\n\tNodePtr go[A];\n\tNodePtr link;\n\n\tNodePtr par;\n\tint c_par;\n\tint len;\n\n\tNode() {\n\t\tmemset (to, 0, sizeof to);\n\t\tmemset (go, 0, sizeof go);\n\t\tlink = par = 0;\n\t\tlen = 0;\n\t\tc_par = -1;\n\t}\n\n\tvoid* operator new(size_t);\n};\n\nNode pool[MAX * 2];\nint ptr_pool;\n\nvoid* Node::operator new(size_t) {\n\tpool[ptr_pool] = Node();\n\treturn pool + ptr_pool++;\n}\n\nNodePtr root;\n\nNodePtr get_link(NodePtr);\nNodePtr get_go(NodePtr, int);\n\nNodePtr get_go(NodePtr v, int c) {\n\tif  (!v) {\n\t\treturn root;\n\t}\t\n\n\tif  (v->to[c]) {\n\t\treturn v->to[c];\n\t}\n\n\tif  (v == root) {\n\t\treturn root;\n\t}\n\n\tif  (v->go[c]) {\n\t\treturn v->go[c];\n\t}\n\n\treturn (v->go[c] = get_go(get_link(v), c));\n}\n\nNodePtr get_link(NodePtr v) {\n\tassert(v);\n\n\tif  (v == root) {\n\t\treturn 0;\n\t}\n\n\tif  (v->link) {\n\t\treturn v->link;\n\t}\n\n\treturn (v->link = get_go(get_link(v->par), v->c_par));\n}\n\nvoid add_string(const string& s, NodePtr& root) {\n\tNodePtr v = root;\n\tfor (char ch : s) {\n\t\tconst int c = ch - 'a';\n\t\tif  (!v->to[c]) {\n\t\t\tv->to[c] = new Node();\n\t\t\tv->to[c]->par = v;\n\t\t\tv->to[c]->len = v->len + 1;\n\t\t\tv->to[c]->c_par = c;\n\t\t}\n\t\tv = v->to[c];\n\t}\n}\n\nvi dfs(vvi& g, int v) {\n\tvi dp(2, 0);\n\tfor (int to : g[v]) {\n\t\tvi dp_to = dfs(g, to);\n\n\t\tvi ndp(2);\n\t\tndp[0] = dp[0] + dp_to[0];\n\t\tndp[1] = *max_element(all(dp)) + *max_element(all(dp_to));\n\n\t\tdp.swap(ndp);\n\t}\n\n\tdp = {dp[1], dp[0] + 1};\n\n\t// eprintf(\"v = %d\\n\", v);\n\t// eprintf(\"dp:\\n\");\n\t// forn(i, sz(dp)) {\n\t// \teprintf(\"i=%d, dp=%d\\n\", i, dp[i]);\n\t// }\n\n\treturn dp;\n}\n\nint solve() {\n\tptr_pool = 0;\n\troot = new Node();\n\n\tfor (const auto& str : s) {\n\t\tadd_string(str, root);\n\t}\n\n\tvvi g(ptr_pool);\n\tvi deg_in(ptr_pool);\n\tfor (int i = 1; i < ptr_pool; ++i) {\n\t\tNodePtr v = pool + i;\n\t\tNodePtr u = get_link(v);\n\t\tassert(u);\n\t\tif  (u != root && u->len + 1 == v->len) {\n\t\t\tg[u - pool].pb(v - pool);\n\t\t\t++deg_in[v - pool];\n\t\t}\n\t}\n\n\t// eprintf(\"graph:\\n\");\n\t// for (int v = 1; v < ptr_pool; ++v) {\n\t// \teprintf(\"v = %d\\n\", v);\n\t// \tfor (int to : g[v]) {\n\t// \t\teprintf(\" -> %d\\n\", to);\n\t// \t}\n\t// }\n\n\tint ans = 0;\n\tfor (int i = 1; i < ptr_pool; ++i) {\n\t\tif  (deg_in[i] == 0) {\n\t\t\tvi dp = dfs(g, i);\n\t\t\tans += *max_element(all(dp));\n\t\t}\n\t}\n\n\treturn ans;\n}\n\nint main() {\n#ifdef LOCAL\n\tfreopen(FILE_NAME \".in\", \"r\", stdin);\n\t// freopen(FILE_NAME \".out\", \"w\", stdout);\n#endif\n\n\tint T;\n\tscanf(\"%d\\n\", &T);\n\tforn(t, T) {\n\t\tassert(read());\n\t\tprintf(\"%d\\n\", solve());\n\t}\n\n#ifdef LOCAL\n\tcerr.precision(5);\n\tcerr << \"Time: \" << fixed << (double) clock() / CLOCKS_PER_SEC << endl;\n#endif\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "hashing",
        "strings",
        "trees"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Similar Words.json",
    "editorial_link": "https://codeforces.com//blog/entry/54452",
    "editorial": "Let us consider the following similarity graph: the vertices are the prefixes of the given words, two vertices are connected by an edge if the corresponding words are similar. Note that the set of vertices in this graph is the same as in the trie for the given words, so it doesn't exceed the sum of lengths of words.\n\nLet us prove that the resulting graph is a forest. If two words are similar, let us call the shorter one the parent of the longer one. Each vertex now has at most one parent, and there are no cycles, so the graph is a set of trees Â— a forest.\n\nNow the required set is the independent set in the constructed similarity graph, so we can use dynamic programming or greedy algorithm to find it.\n\nThere are two ways to construct the similarity graph.\n\nWay 1. Hashes For each prefix find its hash, make a set of all hashes. Now for each prefix remove its first letter, check if such hash exists. If it does, connect them by an edge.\n\nWay 2. Aho-Corasick\n\nLet us build Aho-Corasick automaton for the given set of words. The vertices of the similarity graph are automaton vertices. An edge exists between two vertices if the suffix link from one of them goes to the other one, and their depths differ by exacly 1.",
    "hint": []
}