{
    "link": "https://codeforces.com//contest/1276/problem/A",
    "problemId": "495588",
    "problem_idx": "A",
    "shortId": "1276A",
    "contest_number": "1276",
    "problem_submissions": {
        "D": [
            66855093,
            66857065,
            66845974,
            66997276,
            66858540,
            66861684,
            66862730,
            66868898,
            66866703,
            66862266,
            66863710,
            66863337,
            66865506,
            66863170,
            66863353,
            66867792,
            66869234,
            66868492,
            66866182,
            66863049
        ],
        "C": [
            66843940,
            66846263,
            66855304,
            66856299,
            66850349,
            66850097,
            66849241,
            66845111,
            66840733,
            66851808,
            66846583,
            66853445,
            66848190,
            66854997,
            66857353,
            66855797,
            66855510,
            66860652,
            66856100,
            66851090
        ],
        "B": [
            66838883,
            66837202,
            66851887,
            66837950,
            66845504,
            66843521,
            66841052,
            66839337,
            66846582,
            66845011,
            66837082,
            66842169,
            66845204,
            66846655,
            66853297,
            66842949,
            66842748,
            66847818,
            66847458,
            66873447,
            66868214
        ],
        "A": [
            66836393,
            66834386,
            66848931,
            66834574,
            66835090,
            66834499,
            66835628,
            66834748,
            66844259,
            66835765,
            66834448,
            66836891,
            66834649,
            66835369,
            66834624,
            66839341,
            66838551,
            66839846,
            66837852,
            66838233
        ],
        "F": [
            66875333,
            66866989,
            68039784,
            67198171,
            67466141
        ],
        "E": [
            93753835,
            67190434,
            67455260,
            81662494
        ]
    },
    "name": "A. As Simple as One and Two",
    "statement": "You are given a non-empty string s=s_1s_2\r\ndots s_n, which consists only of lowercase Latin letters. Polycarp does\r\nnot like a string if it contains at least one string \"\" or at least one\r\nstring \"\" (or both at the same time) as a . In other words, Polycarp\r\ndoes not like the string s if there is an integer j (1\r\nle j\r\nle n-2), that s_{j}s_{j+1}s_{j+2}=\"\" or s_{j}s_{j+1}s_{j+2}=\"\".For\r\nexample: Polycarp does not like strings \"\", \"\", \"\" and \"\" (they all have\r\nat least one substring \"\" or \"\"), Polycarp likes strings \"\", \"\" and \"\"\r\n(they have no substrings \"\" and \"\"). Polycarp wants to select a certain\r\nset of indices (positions) and remove all letters on these positions.\r\nAll removals are made at the same time.For example, if the string looks\r\nlike s=\"\", then if Polycarp selects two indices 3 and 6, then \"\" will be\r\nselected and the result is \"\".What is the minimum number of indices\r\n(positions) that Polycarp needs to select to make the string liked? What\r\nshould these positions be?\r\n",
    "solutions": [
        "#include<cstdio>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nchar p[160000];\nint D[160000][6][6], Path[160000][6][6];\nint n, w[160000];\nvoid Solve() {\n\tint i, j, k;\n\tscanf(\"%s\", p + 1);\n\tfor (i = 1; p[i]; i++);\n\tn = i - 1;\n\tfor (i = 1; i <= n; i++) {\n\t\tif (p[i] == 'o') {\n\t\t\tw[i] = 1;\n\t\t}\n\t\telse if (p[i] == 'n') {\n\t\t\tw[i] = 2;\n\t\t}\n\t\telse if (p[i] == 'e') {\n\t\t\tw[i] = 3;\n\t\t}\n\t\telse if (p[i] == 't') {\n\t\t\tw[i] = 4;\n\t\t}\n\t\telse if (p[i] == 'w') {\n\t\t\tw[i] = 5;\n\t\t}\n\t\telse {\n\t\t\tw[i] = 0;\n\t\t}\n\t}\n\tfor (i = 0; i <= n; i++)for (j = 0; j < 6; j++)for (k = 0; k < 6; k++)D[i][j][k] = 1e9;\n\tD[0][0][0] = 0;\n\tfor (i = 1; i <= n; i++) {\n\t\tfor (j = 0; j < 6; j++) {\n\t\t\tfor (k = 0; k < 6; k++) {\n\t\t\t\tif (D[i-1][j][k] > 8e8)continue;\n\t\t\t\tif (D[i][j][k] > D[i - 1][j][k] + 1){\n\t\t\t\t\tD[i][j][k] = D[i - 1][j][k] + 1;\n\t\t\t\t\tPath[i][j][k] = -1;\n\t\t\t\t}\n\t\t\t\tif (j == 1 && k == 2 && w[i] == 3)continue;\n\t\t\t\tif (j == 4 && k == 5 && w[i] == 1)continue;\n\t\t\t\tif (D[i][k][w[i]] > D[i - 1][j][k]) {\n\t\t\t\t\tD[i][k][w[i]] = D[i - 1][j][k];\n\t\t\t\t\tPath[i][k][w[i]] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint Mn = 1e9, x, y;\n\tfor (i = 0; i < 6; i++) {\n\t\tfor (j = 0; j < 6; j++) {\n\t\t\tif (Mn > D[n][i][j]) {\n\t\t\t\tx = i, y = j;\n\t\t\t\tMn = D[n][i][j];\n\t\t\t}\n\t\t}\n\t}\n\tvector<int>Ans;\n\tfor (i = n; i >= 1; i--) {\n\t\tif (Path[i][x][y] == -1) {\n\t\t\tAns.push_back(i);\n\t\t\tcontinue;\n\t\t}\n\t\tint t = Path[i][x][y];\n\t\ty = x;\n\t\tx = t;\n\t}\n\tprintf(\"%d\\n\", Ans.size());\n\tif (!Ans.empty()) {\n\t\treverse(Ans.begin(), Ans.end());\n\t\tfor (auto &t : Ans)printf(\"%d \", t);\n\t}\n\tputs(\"\");\n}\nint main() {\n\t//freopen(\"input.txt\", \"r\", stdin);\n\tint TC;\n\tscanf(\"%d\", &TC);\n\twhile (TC--) {\n\t\tSolve();\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. As Simple as One and Two.json",
    "editorial_link": "https://codeforces.com//blog/entry/72239",
    "editorial": "Consider each occurrence of substrings one and two. Obviously, at least one character have to be deleted in such substrings. These substrings cannot intersect in any way, except for one case: twone. Thus, the answer is necessarily no less than the value c21+c1+c2\n, where c21\n is the number of occurrences of the string twone and c1\n is the number of occurrences of the string one (which are not part of twone) and c2\n is the number of occurrences of the string two (which are not part of twone).\n\nLet's propose a method that does exactly c21+c1+c2\n removals and, thus, will be optimal.\n\nDelete character o in each occurrence of twone. This action will delete both substrings one and two at the same time.\nNext, delete character n in each occurrence of one. This action will delete all substrings one.\nNext, delete character w in each occurrence of two. This action will delete all substrings two.\nNote that it is important to delete the middle letters in the last two paragraphs to avoid appearing a new occurrence after a line is collapsed.",
    "hint": []
}