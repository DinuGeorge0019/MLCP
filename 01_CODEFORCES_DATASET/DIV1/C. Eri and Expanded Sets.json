{
    "link": "https://codeforces.com//contest/2006/problem/C",
    "problemId": "2845532",
    "problem_idx": "C",
    "shortId": "2006C",
    "contest_number": "2006",
    "problem_submissions": {
        "F": [
            278838627,
            278834885,
            278839605,
            278842896,
            283040284,
            278849665,
            279479840,
            279030892,
            278872889
        ],
        "E": [
            278816205,
            278815039,
            278825195,
            278819088,
            278823646,
            278824405,
            278834146,
            278833851,
            278836845,
            278834660,
            278831348,
            278835070,
            278824284,
            278835798,
            278834079,
            278836349,
            278834150,
            278840676,
            278837721,
            278840281
        ],
        "D": [
            278802409,
            278805803,
            278813224,
            278825476,
            278809587,
            278813203,
            278814738,
            278815896,
            278817434,
            278818422,
            278823248,
            278822269,
            278830412,
            278825693,
            278818908,
            278819966,
            278823289,
            278817077,
            278823950,
            278818832
        ],
        "C": [
            278788793,
            278798461,
            278801097,
            278797423,
            278800136,
            278800438,
            278797097,
            278802996,
            278798370,
            278802119,
            278807042,
            278803250,
            278809464,
            278800483,
            278808112,
            278808529,
            278813687,
            278799260,
            278808716,
            278807375
        ],
        "B": [
            278783201,
            278791628,
            278792112,
            278787764,
            278787151,
            278789090,
            278788997,
            278795304,
            278790397,
            278793228,
            278796651,
            278795483,
            278796854,
            278787538,
            278797112,
            278796560,
            278796305,
            278792796,
            278798821,
            278792242
        ],
        "A": [
            278774854,
            278780780,
            278783421,
            278777635,
            278777703,
            278778768,
            278777654,
            278780623,
            278781426,
            278784680,
            278779860,
            278783271,
            278779619,
            278776511,
            278786116,
            278783656,
            278783630,
            278778742,
            278777793,
            278783717
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/133382",
    "editorial": "Letâs consider the elements in the final set , and take as its\r\ndifference array.Observation 1: is odd. Otherwise we can turn into two\r\n.Observation 2: Adjacent are not different. Suppose and are different\r\nand odd, then is even, and , so can be larger.Thus, the array is an\r\narithmetic progression, with an odd tolerance .If you notice this, and\r\ncan also notice the monotonicity, you can maintain for a range of\r\nnumbers to show that the final set is an arithmetic progression starting\r\nfrom , consisting of elements and has tolerance . Itâs amazing that two\r\npieces of information like this can be merged, so we can use sparse\r\ntable to maintain.However, thereâs a better way to solve it. Similar to\r\nEuclidean Algorithm, the tolerance is equal to the maximum odd divisor\r\nof the gcd of the difference array of , that is, . Then the restriction\r\nmeans that is a power of .For a fixed point , find the smallest that\r\ninterval is good. A divisor of a power of is still a power of , so it\r\nhas monotonicity, which makes it possible to use two pointers to\r\nmaintain it in or . Using sparse table or binary lifting may reach the\r\nsame complexity. Note that adjacent same numbers should be carefully\r\ndealt with.\r\n",
    "name": "C. Eri and Expanded Sets",
    "statement": "Let there be a set that contains positive integers. To expand the set to\r\ncontain as many integers as possible, Eri can choose two integers x\r\nneq y from the set such that their average\r\nfrac{x+y}2 is still a positive integer and isn’t contained in the set,\r\nand add it to the set. The integers x and y remain in the set.Let’s call\r\nthe set of integers if, after the elements are sorted, the difference\r\nbetween any pair of adjacent elements is 1. For example, sets\r\n{2\r\n},\r\n{2, 5, 4, 3\r\n},\r\n{5, 6, 8, 7\r\n} are consecutive, while\r\n{2, 4, 5, 6\r\n},\r\n{9, 7\r\n} are not.Eri likes consecutive sets. Suppose there is an array b, then\r\nEri puts all elements in b into the set. If after a finite number of\r\noperations described above, the set can become consecutive, the array b\r\nwill be called .Note that if the same integer appears in the array\r\nmultiple times, we only put it into the set , as a set always contains\r\ndistinct positive integers.Eri has an array a of n positive integers.\r\nPlease help him to count the number of pairs of integers (l,r) such that\r\n1\r\nleq l\r\nleq r\r\nleq n and the subarray a_l, a_{l+1},\r\nldots, a_r is brilliant.\r\n",
    "solutions": [
        "/** *    author:  tourist *    created: 30.08.2024 07:52:31**/#include <bits/stdc++.h> using namespace std; #ifdef LOCAL#include \"algo/debug.h\"#else#define debug(...) 42#endif int main() {  ios::sync_with_stdio(false);  cin.tie(nullptr);  int tt;  cin >> tt;  while (tt--) {    int n;    cin >> n;    vector<int> a(n);    for (int i = 0; i < n; i++) {      cin >> a[i];    }    vector<int> b(n - 1);    for (int i = 0; i < n - 1; i++) {      b[i] = abs(a[i] - a[i + 1]);    }    int64_t ans = int64_t(n) * (n + 1) / 2;    vector<pair<int, int>> c;    vector<pair<int, int>> new_c;    for (int i = 0; i < n - 1; i++) {      new_c.clear();      new_c.emplace_back(b[i], 1);      for (auto& [v, cnt] : c) {        new_c.emplace_back(__gcd(v, b[i]), cnt);      }      swap(c, new_c);      sort(c.begin(), c.end());      int sz = 1;      for (int j = 1; j < int(c.size()); j++) {        if (c[j].first == c[sz - 1].first) {          c[sz - 1].second += c[j].second;        } else {          c[sz++] = c[j];        }      }      c.resize(sz);      for (auto& [v, cnt] : c) {        if (v & (v - 1)) {          ans -= cnt;        }      }    }    cout << ans << '\\n';  }  return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "divide and conquer",
        "math",
        "number theory",
        "two pointers"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Eri and Expanded Sets.json",
    "hint": [
        "Hint1 Let's try to judge whether an array is brilliant, and try to sort it first. What happens if we minus from each element? Answer Nothing will change.",
        "Hint2 We only care about the relative positions between the elements. Let's consider the difference array of array : .",
        "Hint3 What will the difference array look like after no more operations can be done?"
    ]
}