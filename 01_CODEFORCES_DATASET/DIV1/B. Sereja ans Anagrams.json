{
    "link": "https://codeforces.com//contest/367/problem/B",
    "problemId": "4097",
    "problem_idx": "B",
    "shortId": "367B",
    "contest_number": "367",
    "problem_submissions": {
        "A": [
            5253633,
            5248539,
            5245621,
            5246967,
            5245187,
            5245239,
            5244912,
            5260352,
            5248460,
            5246717,
            5247161,
            5247626,
            5250480,
            5245644,
            5245467,
            5248078
        ],
        "D": [
            5251109,
            5249684,
            5251377,
            5253799,
            5250841,
            5254107,
            5254017,
            5254422,
            5250750,
            5253666,
            5254820,
            5253839,
            5253605,
            5254366,
            5255055,
            5254149
        ],
        "E": [
            5249574,
            5253117,
            5253114,
            5256266,
            5249949,
            5258981,
            5256724,
            5261975,
            5266872,
            5268278,
            5260869
        ],
        "B": [
            5248117,
            5245452,
            5253998,
            5248352,
            5248954,
            5247801,
            5248088,
            5250697,
            5246678,
            5248495,
            5245796,
            5247335,
            5247628,
            5249396,
            5248757,
            5249320
        ],
        "C": [
            5246223,
            5247815,
            5247820,
            5249874,
            5249775,
            5249473,
            5249680,
            5248776,
            5247935,
            5249664,
            5249146,
            5249197,
            5249315,
            5250702,
            5250582,
            5251144
        ]
    },
    "name": "B. Sereja ans Anagrams",
    "statement": "Sereja has two sequences and and number . Sequence consists of integers\r\n. Similarly, sequence consists of integers . As usual, Sereja studies\r\nthe sequences he has. Today he wants to find the number of positions ,\r\nsuch that sequence can be obtained from sequence by rearranging\r\nelements.Sereja needs to rush to the gym, so he asked to find all the\r\ndescribed positions of .\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <bitset>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\nmap <int, int> mp;\n\nint bad;\nint a[200010],b[200010],c[200010];\nbool ans[200010];\n\nvoid add(int x){\n    mp[x]++;\n    int tmp = mp[x];\n    if(tmp == 1) bad++;\n    if(tmp == 0) bad--;\n}\n\nvoid erase(int x){\n    mp[x]--;\n    int tmp = mp[x];\n    if(tmp == -1) bad++;\n    if(tmp == 0) bad--;\n}\n\nvoid func(int n, int m, int offset, int step){ // b: m, c: n, find b from c\n    int i;\n    \n    if(n < m) return;\n    \n    REP(i,m) add(c[i]);\n    if(bad == 0) ans[offset] = true;\n    // cout << offset << ' ' << bad << endl;\n    \n    for(i=m;i<n;i++){\n        add(c[i]);\n        erase(c[i-m]);\n        if(bad == 0) ans[offset + step * (i-m+1)] = true;\n        // cout << offset + step * (i-m+1) << ' ' << bad << endl;\n    }\n    \n    for(i=n-m;i<n;i++) erase(c[i]);\n}\n\nint main(void){\n    int n,m,p,i,j;\n    \n    cin >> n >> m >> p;\n    REP(i,n) scanf(\"%d\", &a[i]);\n    REP(i,m) scanf(\"%d\", &b[i]);\n    \n    REP(i,m) erase(b[i]);\n    \n    REP(i,p){\n        int n2 = 0;\n        for(j=i;j<n;j+=p){\n            c[n2] = a[j];\n            n2++;\n        }\n        func(n2, m, i, p);\n    }\n    \n    int cnt = 0;\n    REP(i,n) if(ans[i]) cnt++;\n    cout << cnt << endl;\n    bool first = true;\n    REP(i,n) if(ans[i]){\n        if(!first) printf(\" \");\n        first = false;\n        printf(\"%d\", i+1);\n    }\n    \n    cout << endl;\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Sereja ans Anagrams.json",
    "editorial_link": "https://codeforces.com//blog/entry/9726",
    "editorial": "We will divide the sequence on sequences. -st, -th, -th, ... element\r\nwill go to the first sequence, -nd, -th, -th... will go to the second\r\nsequence and so on. Now you need to find an answer for each of them,\r\nconsidering that . This can be solved by a simple method. You can go\r\nalong the sequence from left to right and count the number of\r\noccurrences of each number. If the number of occurrences of each number\r\nwill match the number of occurrences of the same number in the second\r\nsequence, then everything is OK.\r\n"
}