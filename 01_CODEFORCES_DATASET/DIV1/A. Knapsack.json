{"link": "https://codeforces.com//contest/1446/problem/A", "problemId": "797255", "problem_idx": "A", "shortId": "1446A", "contest_number": "1446", "problem_submissions": {"D2": [98488179, 98479602, 98464320, 98467493, 98464495, 98464291, 98477056, 98482171, 98496133, 98469225, 98470769, 98488185, 98481918, 98482926, 98479038], "F": [98482236, 98470414, 98500090, 98497700, 98476856, 98476210, 98484136, 98489678, 98481827, 98491554, 98484171, 98504348, 98502497, 98493379, 98482100, 98486768, 98492674, 98490163, 98501084], "E": [98475344, 98498258, 98500804, 98495217, 115705388, 106404746], "D1": [98457158, 98460382, 98456556, 98456978, 98464440, 98464426, 98466567, 98470196, 98464176, 98472990, 98478320, 98479479, 98482287, 98493368, 98460232, 98466662, 98460275, 98466691, 98472979, 98478998], "C": [98450996, 98452840, 98450218, 98453943, 98450946, 98452214, 98452223, 98455447, 98455497, 98455239, 98461758, 98461392, 98466665, 98466780, 98453580, 98454283, 98455611, 98457408, 98454698, 98458074], "B": [98446682, 98448334, 98447974, 98447142, 98452896, 98448193, 98448567, 98451491, 98449697, 98450934, 98454616, 98452183, 98446811, 98455267, 98447295, 98450250, 98449344, 98450158, 98450376, 98449480], "A": [98444992, 98445944, 98444925, 98445065, 98445347, 98445666, 98444771, 98446535, 98446420, 98447534, 98447441, 98445935, 98450208, 98461593, 98445099, 98445257, 98445487, 98446333, 98447509, 98445254]}, "name": "A. Knapsack", "statement": "You have a knapsack with the capacity of W. There are also n items, the\r\ni-th one has weight w_i. You want to put some of these items into the\r\nknapsack in such a way that their total weight C is at least half of its\r\nsize, but (obviously) does not exceed it. Formally, C should satisfy:\r\nlceil\r\nfrac{W}{2}\r\nrceil\r\nle C\r\nle W. Output the list of items you will put into the knapsack or\r\ndetermine that fulfilling the conditions is impossible. If there are\r\nseveral possible lists of items satisfying the conditions, you can\r\noutput any. Note that you have to maximize the sum of weights of items\r\nin the knapsack.\r\n", "solutions": ["#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__);fflush(stderr);\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int N = 200200;\nint n;\nll a[N];\nll W;\n\nvoid solve() {\n\tscanf(\"%d%lld\", &n, &W);\n\tvector<int> ans;\n\tll S = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tll x;\n\t\tscanf(\"%lld\", &x);\n\t\tif (x > W) continue;\n\t\tif (2 * x >= W) {\n\t\t\tans.clear();\n\t\t\tans = {i + 1};\n\t\t\tS = x;\n\t\t} else if (S + x <= W) {\n\t\t\tS += x;\n\t\t\tans.push_back(i + 1);\n\t\t}\n\t}\n\tif (2 * S < W)\n\t\tprintf(\"-1\\n\");\n\telse {\n\t\tprintf(\"%d\\n\", (int)ans.size());\n\t\tfor (int x : ans)\n\t\t\tprintf(\"%d \", x);\n\t\tprintf(\"\\n\");\n\t}\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) solve();\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy", "sortings"], "dificulty": "1300", "interactive": false}