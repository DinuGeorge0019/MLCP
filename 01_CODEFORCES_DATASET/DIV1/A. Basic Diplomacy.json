{
    "link": "https://codeforces.com//contest/1483/problem/A",
    "problemId": "931270",
    "problem_idx": "A",
    "shortId": "1483A",
    "contest_number": "1483",
    "problem_submissions": {
        "F": [
            110657198,
            110657366,
            110680394,
            110676074,
            110665233,
            113439308,
            113059400,
            111430671,
            111430417
        ],
        "D": [
            110640647,
            110642867,
            110640739,
            110649362,
            110656109,
            110648351,
            110669875,
            110646025,
            110641671,
            110641253,
            110642818,
            110645567,
            110644771,
            110644923,
            110644779,
            110648343,
            110645625,
            110649200,
            110647913
        ],
        "C": [
            110637482,
            110639495,
            110638107,
            110639034,
            110636245,
            110643783,
            110646712,
            110639119,
            110637748,
            110637078,
            110639242,
            110639215,
            110640002,
            110638528,
            110640575,
            110640398,
            110641125,
            110641145,
            110641078,
            110642087
        ],
        "B": [
            110634536,
            110634072,
            110635529,
            110635361,
            110642670,
            110636167,
            110639544,
            110634766,
            110633516,
            110637084,
            110643607,
            110635632,
            110634992,
            110636625,
            110637243,
            110635431,
            110638777,
            110635673,
            110637846
        ],
        "A": [
            110629442,
            110628350,
            110629067,
            110628964,
            110631520,
            110629138,
            110634726,
            110632933,
            110628500,
            110629504,
            110630632,
            110632453,
            110628740,
            110630017,
            110629975,
            110630962,
            110628508,
            110633725,
            110630402,
            110630508
        ],
        "E": [
            110660726,
            110669157,
            204375141,
            110665918,
            110662689,
            110666386,
            110657015,
            113441196,
            113891758,
            110672789,
            111426124,
            110692107
        ]
    },
    "name": "A. Basic Diplomacy",
    "statement": "Aleksey has n friends. He is also on a vacation right now, so he has m\r\ndays to play this new viral cooperative game! But since it\u2019s\r\ncooperative, Aleksey will need one teammate in each of these m days.On\r\neach of these days some friends will be available for playing, and all\r\nothers will not. On each day Aleksey must choose one of his available\r\nfriends to offer him playing the game (and they, of course, always\r\nagree). However, if any of them happens to be chosen strictly more than\r\nleft\r\nlceil\r\ndfrac{m}{2}\r\nright\r\nrceil times, then all other friends are offended. Of course, Aleksey\r\ndoesn\u2019t want to offend anyone.Help him to choose teammates so that\r\nnobody is chosen strictly more than\r\nleft\r\nlceil\r\ndfrac{m}{2}\r\nright\r\nrceil times.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nint main() {\n\tusing namespace std;\n\tios_base::sync_with_stdio(false), cin.tie(nullptr);\n\n\tint T; cin >> T;\n\twhile (T--) {\n\t\tint N, M; cin >> N >> M;\n\n\t\tvector<vector<int>> F(M);\n\t\tfor (auto& v : F) {\n\t\t\tint k; cin >> k;\n\t\t\tv.resize(k);\n\t\t\tfor (auto& a : v) cin >> a;\n\t\t}\n\n\t\tvector<int> cnt(N+1);\n\t\tvector<int> C(M);\n\t\tfor (int i = 0; i < M; i++) {\n\t\t\tC[i] = F[i][0];\n\t\t\tcnt[C[i]]++;\n\t\t}\n\n\t\tfor (int v = 1; v <= N; v++) {\n\t\t\tif (cnt[v] > (M+1)/2) {\n\t\t\t\tfor (int i = 0; cnt[v] > (M+1)/2 && i < M; i++) {\n\t\t\t\t\tif (C[i] == v && int(F[i].size()) > 1) {\n\t\t\t\t\t\tcnt[C[i]]--;\n\t\t\t\t\t\tC[i] = F[i][1];\n\t\t\t\t\t\tcnt[C[i]]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cnt[v] > (M+1)/2) {\n\t\t\t\t\tcout << \"NO\" << '\\n';\n\t\t\t\t\tgoto finished;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcout << \"YES\" << '\\n';\n\t\tfor (int i = 0; i < M; i++) {\n\t\t\tcout << C[i] << \" \\n\"[i+1==M];\n\t\t}\n\nfinished:;\n\t}\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Basic Diplomacy.json",
    "editorial_link": "https://codeforces.com//blog/entry/88963",
    "editorial": "First, for each day we select an arbitrary friend from the list. With this choice, at most one friend will play more than ?m2?\n times. Let's call him f\n. We want to fix schedule such that f\n will play exactly ?m2?\n times. To do this, we go through all the days and, if f\n is assigned on a certain day and someone else can play this day, then we assign anyone except f\n for that day. We will make such replacements while f\n plays more than ?m2?\n times. There is only one case when this is not possible: if f\n is the only friend who can play in more than ?m2?\n days."
}