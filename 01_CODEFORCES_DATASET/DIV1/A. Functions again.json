{
    "link": "https://codeforces.com//contest/788/problem/A",
    "problemId": "100721",
    "problem_idx": "A",
    "shortId": "788A",
    "contest_number": "788",
    "problem_submissions": {
        "E": [
            25924862,
            25925377,
            25915904,
            25922582,
            25915050,
            25918684,
            25941153,
            25921354,
            25925269,
            25935314,
            25926533,
            25926046,
            25936552,
            25927749,
            25926831,
            25919133,
            25921191
        ],
        "D": [
            25915542,
            25915181,
            25939395,
            25930075,
            25941576,
            25921672,
            25929951,
            25917640,
            25923984,
            26061916,
            26104610,
            25928092,
            25925001,
            25924944,
            26043257
        ],
        "C": [
            25904961,
            25906051,
            25905059,
            25908402,
            25906489,
            25909800,
            25905943,
            25913627,
            25910389,
            25907305,
            25913724,
            25911198,
            25913363,
            25908585,
            25910198,
            25909085,
            25915912,
            25913369,
            25907071,
            25907012
        ],
        "B": [
            25903079,
            25903720,
            25902453,
            25904332,
            25903705,
            25904849,
            25903086,
            25902909,
            25905715,
            25902462,
            25905159,
            25905547,
            25906945,
            25904624,
            25903809,
            25910532,
            25906509,
            25927693,
            25946077
        ],
        "A": [
            25900169,
            25901048,
            25900244,
            25901169,
            25900572,
            25900694,
            25900718,
            25900816,
            25901339,
            25905048,
            25900137,
            25900587,
            25901139,
            25902041,
            25900581,
            25899979,
            25900864,
            25900329,
            25900280,
            25900541
        ]
    },
    "name": "A. Functions again",
    "statement": "Something happened in Uzhlyandia again... There are riots on the\r\nstreets... Famous Uzhlyandian superheroes Shean the Sheep and Stas the\r\nGiraffe were called in order to save the situation. Upon the arriving,\r\nthey found that citizens are worried about maximum values of the Main\r\nUzhlyandian Function , which is defined as follows:In the above formula,\r\nmust hold, where is the size of the Main Uzhlyandian Array , and means\r\nabsolute value of . But the heroes skipped their math lessons in school,\r\nso they asked you for help. Help them calculate the maximum value of\r\namong all possible values of and for the given array .\r\n",
    "solutions": [
        "#ifdef DEBUG\n#define _GLIBCXX_DEBUG\n#endif\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nmt19937 mrand(random_device{} ()); \n\nint rnd(int x) {\n  return mrand() % x;\n}\n\ntypedef long double ld;\ntypedef long long ll;\n\n#ifdef DEBUG\n#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)\n#else\n#define eprintf(...) ;\n#endif\n\n#define pb push_back\n#define mp make_pair\n#define sz(x) ((int) (x).size())\n#define TASK \"text\"\n\nconst int inf = (int) 1.01e9;\nconst ld eps = 1e-9;\nconst ld pi = acos((ld) -1.0);\n\nconst int mod = (int) 1e9 + 7;\n\nvoid add(int &x, int y) {\n  if ((x += y) >= mod) {\n    x -= mod;\n  }\n}\n\nint mult(int x, int y) {\n  return (long long) x * y % mod;\n}\n\nint power(int x, int pw) {\n  int res = 1;\n  for (; pw; pw >>= 1) {\n    if (pw & 1) {\n      res = mult(res, x);\n    }\n    x = mult(x, x);\n  }\n  return res;\n}\n\nvoid precalc() {\n}\n\n\nconst int maxn = (int) 1e5 + 10;\nint a[maxn];\nint n;\n\nint read() {\n  if (scanf(\"%d\", &n) < 1) {\n    return 0;\n  }\n  for (int i = 0; i < n; ++i) {\n    scanf(\"%d\", a + i);\n  }\n  return 1;\n}\n\nvoid solve() {\n  long long res = 0;\n\n  long long mn = 0, mx = 0;\n  for (int i = n - 2; i >= 0; --i) {\n    long long x = abs(a[i] - a[i + 1]);\n\n    long long nmn = min(0ll, x - mx);\n    long long nmx = max(0ll, x - mn);\n    mn = nmn, mx = nmx;\n    res = max(res, mx);\n  }\n  printf(\"%lld\\n\", res);\n}\n\nint main() {\n  precalc();\n#ifdef LOCAL\n  freopen(TASK \".out\", \"w\", stdout);\n  assert(freopen(TASK \".in\", \"r\", stdin));\n#endif\n\n  while (1) {\n    if (!read()) {\n      break;\n    }\n    solve();\n#ifdef DEBUG\n    eprintf(\"Time %.2f\\n\", (double) clock() / CLOCKS_PER_SEC);\n#endif\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "two pointers"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Functions again.json",
    "editorial_link": "https://codeforces.com//blog/entry/51312",
    "editorial": "We can solve the problem for segments with odd and even separately.\r\nLet\u00e2\u0080\u0099s build arrays () and (). Obviously, that segment with the greatest\r\nsum in array starts in some even index. In every segment starting in odd\r\nindex we can move one position right and make answer not-worse, because\r\nevery element of odd index in is non-positive. Also, sum of segment\r\nstarting in even index of equals to value of on the same segment.\r\nAnalogically for array and odd starting indexes. So the answer equals to\r\nmaximal of maximal sums of arrays and .The segment with the greatest sum\r\ncan be found with the two pointers method or using prefix sums. Such\r\nsolution works with complexity.\r\n"
}