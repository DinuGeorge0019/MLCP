{
    "link": "https://codeforces.com//contest/238/problem/D",
    "problemId": "2114",
    "problem_idx": "D",
    "shortId": "238D",
    "contest_number": "238",
    "problem_submissions": {
        "E": [
            2504243,
            2503858,
            2509891,
            2694210,
            2552413
        ],
        "B": [
            2501797,
            2504771,
            2501096,
            2501711,
            2501715,
            2500046,
            2500118,
            2500703,
            2501297,
            2500963,
            2500837,
            2501321,
            2500477,
            2500698,
            2502278,
            2501139,
            2500966,
            2501060,
            2501238
        ],
        "C": [
            2500671,
            2502160,
            2502349,
            2502372,
            2500466,
            2501719,
            2501950,
            2502275,
            2502065,
            2502329,
            2502087,
            2502235,
            2501641,
            2502453,
            2501221,
            2502604,
            2502443,
            2502751,
            2503154
        ],
        "A": [
            2498142,
            2498095,
            2498716,
            2498060,
            2498106,
            2498185,
            2498628,
            2498741,
            2498627,
            2498605,
            2499081,
            2498586,
            2498140,
            2501538,
            2498125,
            2498688,
            2499407,
            2498390
        ],
        "D": [
            2556123,
            2505008
        ]
    },
    "name": "D. Tape Programming",
    "statement": "There is a programming language in which every program is a non-empty\r\nsequence of \"\" and \"\" signs and digits. Let\u2019s explain how the\r\ninterpreter of this programming language works. A program is interpreted\r\nusing movement of instruction pointer (IP) which consists of two parts.\r\nCurrent character pointer (CP); Direction pointer (DP) which can point\r\nleft or right; Initially CP points to the leftmost character of the\r\nsequence and DP points to the right.We repeat the following steps until\r\nthe first moment that CP points to somewhere outside the sequence. If CP\r\nis pointing to a digit the interpreter prints that digit then CP moves\r\none step according to the direction of DP. After that the value of the\r\nprinted digit in the sequence decreases by one. If the printed digit was\r\nthen it cannot be decreased therefore it\u2019s erased from the sequence and\r\nthe length of the sequence decreases by one. If CP is pointing to \"\" or\r\n\"\" then the direction of DP changes to \"left\" or \"right\"\r\ncorrespondingly. Then CP moves one step according to DP. If the new\r\ncharacter that CP is pointing to is \"\" or \"\" then the previous character\r\nwill be erased from the sequence. If at any moment the CP goes outside\r\nof the sequence the execution is terminated.It\u2019s obvious the every\r\nprogram in this language terminates after some steps.We have a sequence\r\nof \"\", \"\" and digits. You should answer queries. Each query gives you\r\nand and asks how many of each digit will be printed if we run the\r\nsequence as an independent program in this language.\r\n",
    "solutions": [
        "#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#define REP(i,m) for(int i=0;i<m;++i)\n#define REPN(i,m,in) for(int i=in;i<m;++i)\n#define ALL(t) (t).begin(),(t).end()\n#define pb push_back\n#define mp make_pair\n#define fr first\n#define sc second\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define prl cerr<<\"called:\"<< __LINE__<<endl\nusing namespace std;\nstatic const int INF =500000000; \ntemplate<class T> void debug(T a,T b){ for(;a!=b;++a) cerr<<*a<<' ';cerr<<endl;}\ntypedef long long int lint;\ntypedef pair<int,int> pi;\nint n,q;\nstruct list{\n\tint next[100005],back[100005];\n\tlist(){\n\t\tREP(i,100005) next[i]=i+1,back[i]=i-1;\n\t}\n\tint get(int a,int t){\n\t\t++a;\n\t\tif(t==0) return next[a]-1;\n\t\telse return back[a]-1;\n\t}\n\tvoid erase(int a){\n\t\t++a;\n\t\tnext[back[a]]=next[a];\n\t\tback[next[a]]=back[a];\n\t}\n};\nlist move;\n\nint vised[100005];\nchar buf[100005];\nint putted[3000005][10];\nint passed[100005],backtime[100005];\nvector<int> stk;\nint main(){\n\tcin>>n>>q;\n\tscanf(\"%s\",buf);\n\tint cp=0,dp=0,last=0;//0:forward 1:backward\n\tint start=0;\n\tint t;\n\tmemset(backtime,-1,sizeof(backtime));\n\tmemset(vised,-1,sizeof(vised));\n\tfor(t=0;;++t){\n\n\t\tif(cp==-1){\n\t\t\tREP(i,n) if(!passed[i]){\n\t\t\t\tstart=cp=i;break;\n\t\t\t}\n\t\t\tif(cp==-1) break;\n\t\t\tdp=0;\n\t\t\tlast=0;\n\t\t}\n\t\tif(vised[cp]==-1){\n\t\t\tvised[cp]=t;\n\t\t\tstk.pb(cp);\n\t\t}\n\t\tREP(i,10) putted[t+1][i]=putted[t][i];\n\t\tpassed[cp]=1;\n\t\tif(buf[cp]>='0' && buf[cp]<='9'){\n\t\t\tputted[t+1][buf[cp]-'0']++;\n\t\t\tif(buf[cp]=='0'){\n\t\t\t\tmove.erase(cp);\n\t\t\t\tif(start==cp) ++start;\n\t\t\t}else{\n\t\t\t\t--buf[cp];\n\t\t\t}\n\t\t\tlast=0;\n\t\t}else if(buf[cp]=='<'){\n\t\t\tdp=1;\n\t\t\tlast=1;\n\t\t}else{\n\t\t\tdp=0;\n\t\t\tlast=1;\n\t\t}\n\t\tint prev=cp;\n\t\tcp=move.get(cp,dp);\n\t\twhile(!stk.empty() && stk.back()>cp){\n\t\t\tbacktime[stk.back()]=t+1;\n\t\t\tstk.pop_back();\n\t\t}\n\t\tif(cp<start){\n\t\t\tcp=-1;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif(cp>=n){\n\t\t\t++t;\n\t\t\tbreak;\n\t\t}\n\t\tif(last && (buf[cp]=='<' || buf[cp]=='>')){\n\t\t\tmove.erase(prev);\n\t\t}\n\t}\n\tREP(hoge,q){\n\t\tint l,r;cin>>l>>r;\n\t\t--l;\n\t\tint begin=vised[l],end=t;\n\t\tif(backtime[l]>=0){\n\t\t\tend=min(end,backtime[l]);\n\t\t}\n\t\tif(r<n) end=min(end,vised[r]);\n\t\tREP(i,10){\n\t\t\tprintf(\"%d%c\",putted[end][i]-putted[begin][i],i==9?'\\n':' ');\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Tape Programming.json",
    "editorial_link": "https://codeforces.com//blog/entry/5765",
    "editorial": "This problem was my favorite in the problemset. The primary point is that at any moment during the interpretation of a program only a prefix of the program is modified and used by IP.\n\nConsider we want to calculate the output of subsequence sl,?...,?sr. While running the original program s1,?...,?sn if at any moment CP enters the interval [l,?r] it should be pointing to position l and the direction of DP should be right. So it's like we have started interpreting sl,?...,?sr independently. The termination of execution of sl,?...,?sr is the first time CP points to somewhere outside interval [l,?r].\n\nTherefore what we need to solve the problem is to run the original program. And after each termination if the program is nonempty then run it again until program is empty. Then we should keep a log of positions we have visited and the time of each visit and the number of printed digits of each type until then. After this preprocessing the to calculate the answer of query (li,?ri) its enough to find the first time CP visited sli and the first time CP visited sri?+?1 or sli?-?1 after that."
}