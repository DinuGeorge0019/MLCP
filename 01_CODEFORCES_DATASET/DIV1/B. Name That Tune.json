{
    "link": "https://codeforces.com//contest/498/problem/B",
    "problemId": "19900",
    "problem_idx": "B",
    "shortId": "498B",
    "contest_number": "498",
    "problem_submissions": {
        "E": [
            9254353,
            9255134,
            9255917,
            9257774,
            9256751,
            9258696,
            9256130,
            9254869,
            9255218,
            9257482,
            9259085,
            9259412,
            9293653
        ],
        "D": [
            9252551,
            9253707,
            9253982,
            9253218,
            9254235,
            9256783,
            9248603,
            9260246,
            9259443,
            9259317,
            9251692,
            9252178,
            9254847,
            9253161,
            9255257,
            9254544,
            9255567
        ],
        "C": [
            9251331,
            9245747,
            9250927,
            9247459,
            9249177,
            9251204,
            9249816,
            9248998,
            9251162,
            9248001,
            9250917,
            9253358
        ],
        "B": [
            9248724,
            9250737,
            9247577,
            9260817,
            9250130,
            9252321,
            9249119,
            9253380,
            9258038,
            9252693,
            9253079,
            9252863,
            9250195
        ],
        "A": [
            9245371,
            9251410,
            9245412,
            9245364,
            9247095,
            9245481,
            9245345,
            9245357,
            9245352,
            9245488,
            9245360,
            9245992,
            9246642,
            9245626
        ]
    },
    "name": "B. Name That Tune",
    "statement": "It turns out that you are a great fan of rock band AC/PE. Peter learned\r\nthat and started the following game: he plays the first song of the list\r\nof songs of the group, and you have to find out the name of the song.\r\nAfter you tell the song name, Peter immediately plays the following song\r\nin order, and so on.The -th song of AC/PE has its recognizability . This\r\nmeans that if the song has not yet been recognized by you, you listen to\r\nit for exactly one more second and with probability of percent you\r\nrecognize it and tell it’s name. Otherwise you continue listening it.\r\nNote that you can only try to guess it only when it is integer number of\r\nseconds after the moment the song starts playing.In all AC/PE songs the\r\nfirst words of chorus are the same as the title, so when you’ve heard\r\nthe first seconds of -th song and its chorus starts, you immediately\r\nguess its name for sure.For example, in the song Highway To Red the\r\nchorus sounds pretty late, but the song has high recognizability. In the\r\nsong Back In Blue, on the other hand, the words from the title sound\r\nclose to the beginning of the song, but it’s hard to name it before\r\nhearing those words. You can name both of these songs during a few more\r\nfirst seconds.Determine the expected number songs of you will recognize\r\nif the game lasts for exactly seconds (i. e. you can make the last guess\r\non the second , after that the game stops).\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <ctime>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <list>\n#include <set>\n#include <map>\n#include <iostream>\n\n#define pb push_back\n#define mp make_pair\n#define TASKNAME \"\"\n\n#ifdef DEBUG\n#define eprintf(...) fprintf(stderr,__VA_ARGS__)\n#else\n#define eprintf(...)\n#endif\n\n#define TIMESTAMP(x) eprintf(\"[\" #x \"] Time = %.3lfs\\n\",clock()*1.0/CLOCKS_PER_SEC)\n\n#ifdef _WIN32\n#define LLD \"%I64d\"\n#else\n#define LLD \"%lld\"\n#endif\n\n#define sz(x) ((int)(x).size())\n#define forn(i, n) for (int i = 0; i < (n); i++)\n\nusing namespace std;\n\ntypedef long double ld;\ntypedef long long ll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<int, int> pii;\ntypedef pair<ll, int> pli;\ntypedef pair<int, ll> pil;\ntypedef pair<ll, ll> pll;\ntypedef vector<pii> vpii;\n\nconst int inf = 1e9;\nconst double eps = 1e-9;\nconst int INF = inf;\nconst double EPS = eps;\n\n#ifdef DEBUG\nstruct __timestamper {\n  ~__timestamper(){\n    TIMESTAMP(end);\n  }\n} __Timestamper;\n#else\nstruct __timestamper {};\n#endif\n\n/*Template end*/\n\nint main() {\n  #ifdef DEBUG\n  freopen(TASKNAME\".in\",\"r\",stdin);\n  freopen(TASKNAME\".out\",\"w\",stdout);\n  #endif\n\n  int n, maxt;\n  while (scanf(\"%d%d\", &n, &maxt) == 2) {\n    vector<ld> ps(n);\n    vi ts(n);\n    forn (i, n) {\n      int p;\n      scanf(\"%d%d\", &p, &ts[i]);\n      ps[i] = p / 100.0;\n    }\n\n    vector<ld> cdyn(maxt + 1, 0);\n    cdyn[maxt] = 1;\n\n    vector<ld> ndyn(maxt + 1, 0);\n    vector<ld> toadd(maxt + 2, 0);\n\n    ld ans = 0;\n    forn (id, n) {\n      fill(ndyn.begin(), ndyn.end(), 0);\n      fill(toadd.begin(), toadd.end(), 0);\n\n/*      ld toCur = 1;\n      for (int was = 1; was < ts[id]; was++) {\n        ld cprob = toCur * ps[id];\n\n        for (int olt = was; olt <= maxt; olt++) {\n          ndyn[olt - was] += cprob * cdyn[olt];\n        }\n\n        toCur *= 1 - ps[id];\n      }*/\n      ld toCur = 1;\n      for (int was = 1; was < ts[id]; was++) toCur *= 1 - ps[id];\n      for (int olt = 1; olt <= maxt; olt++) {\n        toadd[olt - 1] += ps[id] * cdyn[olt];\n        if (olt >= ts[id]) {\n          toadd[olt - ts[id]] -= toCur * ps[id] * cdyn[olt];\n        }\n      }\n      \n      for (int i = maxt; i >= 0; i--) {\n        ndyn[i] = toadd[i];\n        if (i < maxt) ndyn[i] += ndyn[i + 1] * (1 - ps[id]);\n      }\n      for (int olt = ts[id]; olt <= maxt; olt++) {\n        ndyn[olt - ts[id]] += toCur * cdyn[olt];\n      }\n\n      {\n        ld csum = 0;\n        for (ld x : ndyn) csum += x;\n        ans += csum;\n      }\n      cdyn.swap(ndyn);\n    }\n    printf(\"%.18f\\n\", (double)ans);\n  }\n\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "probabilities",
        "two pointers"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Name That Tune.json",
    "editorial_link": "https://codeforces.com//blog/entry/15353",
    "editorial": "Letâs numerate all the songs and seconds starting from 0. Problem will\r\nbe solved using DP approach. State will be described by two integers :\r\nis probability of that we named exactly songs, and the last named song\r\nwas named exactly before âth second (after seconds). obviously. To make\r\na move from state to state (), we must name the song exactly after\r\nseconds its playing probability of that is . To fixed state sum of that\r\nmoves can be represented as . Simple calculation of this value for each\r\nstate gives complexity, so one must notice, that this values can be\r\ncalculated using two pointers for fixed (in common case it represent a\r\nsegment with length) for every in time . This way calculating this type\r\nof moves takes time. There is also a move to and a move from to , when\r\nwe couldnât name current song in time . This types of moves is\r\ncalculated with too. Solution complexity .\r\n",
    "hint": []
}