{
    "link": "https://codeforces.com//contest/2089/problem/D",
    "problemId": "3285046",
    "problem_idx": "D",
    "shortId": "2089D",
    "contest_number": "2089",
    "problem_submissions": {
        "E": [
            312117803,
            312117703,
            312026130,
            312177107,
            312173295,
            312027793,
            312310993,
            313591454
        ],
        "D": [
            312005425,
            312035983,
            312012646,
            312019023,
            312056542,
            312030790,
            312054855,
            312180193,
            312030778
        ],
        "B1": [
            311991638,
            311974074,
            311977257,
            311972783,
            311983703,
            311976653,
            311974663,
            311979567,
            311977867,
            311972876,
            311991596,
            311992114,
            311995537,
            312002724,
            311975692,
            311984582
        ],
        "B2": [
            311991504,
            311976057,
            311977008,
            311974724,
            311983600,
            311985419,
            311992609,
            311979419,
            311994591,
            311992227,
            311991999,
            311996351,
            312002610,
            311983804
        ],
        "C2": [
            311986572,
            311996842,
            311993140,
            311998124,
            312010341,
            312018999,
            312025560,
            312024295,
            312015915,
            312001206,
            312022380,
            312015982,
            312024268,
            312015714,
            312022629
        ],
        "C1": [
            311971941,
            311984058,
            311983107,
            311982200,
            311999669,
            311989579,
            311981776,
            311986834,
            312000911,
            311982471,
            311996193,
            312013435,
            312002171,
            311994068,
            311985200,
            311999126
        ],
        "A": [
            311962756,
            311967378,
            311963536,
            311963013,
            311973819,
            311962523,
            311964171,
            311965578,
            311966948,
            311963646,
            311964125,
            311965567,
            311963107,
            311964180,
            311964607,
            311967685
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/141053",
    "editorial": "SolutionEach operation transform three adjacent characters into one. If\r\nthe string starts with 11, the answer should be yes since we can first\r\ntransform the remaining part into a single 0 or 1 and then the value of\r\n11? is always .If the string ends with 1, only 101 has no solution,\r\notherwise it starts with 11 or 0, or we can transform 10? in the front\r\nof the string into a 0. Then transform the rest part of the string into\r\na single character to make the last operation 0?(anything):1 makes 1.If\r\nan operation transformed a string ending with 0 into one ending with 1,\r\nit must be 1?1:0 makes 1.Consider the case where the strings contains 11\r\nas a substring. After transforming the remaining part, ?11?? or ??11?\r\nwill be derived. The cases are 01100, 00110, 01110, 10110. All other\r\ncases start with 11 or end with 1.All cases of ??11? have a\r\nsolution:(0?0:1)?1:0 makes 1.(0?1:1)?1:0 makes 1.1?(0?1:1):0 makes\r\n1.However, 01100 has no solution.Since 0?0:1 equals 1, before the last\r\n1, any two adjacent 0’s with no 1 in between can be eliminated. Thus, if\r\nthere are two 1’s with an even number of 0’s in between, and there are\r\nan even number of characters in front the former 1, i.e.,\r\n(..)*1(00)*1(..)*0 in regular expression, the answer should be yes,\r\nsince after eliminating the 0’s in between, the 1’s become adjacent. The\r\nparity of the characters before the former 1 guarantees that it will not\r\nbecome 01100.Another case is that the string ends with 0 and every pair\r\nof adjacent 1’s has an odd number of 0’s in between. Since 0(1?0:1)0\r\nmakes 000, 1(0?1:0)1 makes 101, 10(1?0:0)01 makes 10001, there is no way\r\nto change the parity of the consecutive 0’s to make 11 to change the\r\nending 0 into 1.In the remaining case, there are even 0’s between some\r\npair of adjacent 1’s, but the number of characters before the first 1 is\r\nodd, there must be only one pair. Suppose the string is 1-indexed. It is\r\nbecause the indices of such pair of 1’s must be [odd, even]; while the\r\nindices in the previous case must be [even, odd]. Thus, if there are two\r\nsuch pairs of this case [odd, even], in the parity sequence [odd, even,\r\n..., odd, even] there must be an [even, odd] as a substring.Therefore,\r\nany other pair of adjacent 1’s must have odd 0’s in between, i.e., in\r\nregular expression. Any operation remains the string in this case,\r\nexcept that the string is and the operation is makes 1. Since it must\r\nends with 00, it becomes a string ending with 0 and every pair of\r\nadjacent 1’s has odd 0’s in between, which is a case mentioned before\r\nthat has no solution.In conclusion, it has a solution if and only of at\r\nleast one of the two following conditions is met: It ends with 1 but it\r\nis not 101. It has two adjacent 1’s such that there are even 0’s in\r\nbetween and the number of characters before the former 1 is even.\r\n",
    "name": "D. Conditional Operators",
    "statement": "In C++, the conditional operator is used as the value of is y if x is\r\ntrue; otherwise, the value is z. x, y, and z may also be expressions. It\r\nis right-associated; that is, is equivalent to . 0 means false and 1\r\nmeans true.Given a binary string with length 2n+1, you need to show\r\nwhether the value of the expression can be 1 after inserting n\r\nconditional operators into the string. You can use parentheses. For\r\nexample, the string can be transformed into , whose value is 1.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "3200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Conditional Operators.json",
    "hint": []
}