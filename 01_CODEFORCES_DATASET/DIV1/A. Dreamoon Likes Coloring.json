{
    "link": "https://codeforces.com//contest/1329/problem/A",
    "problemId": "582573",
    "problem_idx": "A",
    "shortId": "1329A",
    "contest_number": "1329",
    "problem_submissions": {
        "E": [
            75408443,
            75525199,
            75525023,
            75681621,
            76019995,
            76016936,
            75967053,
            75966418
        ],
        "D": [
            75389063,
            75398925,
            75385191,
            75401307,
            75408075,
            75405008,
            75403445,
            75404364,
            75403371,
            75659972,
            75411387,
            75407920,
            75411250,
            75412465,
            75413663,
            75407247,
            75409435,
            75922378,
            75921522,
            75921098,
            75920566,
            75920416,
            75919758,
            75919734,
            75806069,
            75805925,
            75803536,
            75803307,
            75803058,
            75802910,
            75800662,
            75395261,
            75399040
        ],
        "C": [
            75374256,
            75371549,
            75396568,
            75381813,
            75372171,
            75376833,
            75380449,
            75377512,
            75386022,
            75659958,
            75378281,
            75378362,
            75487924,
            75487540,
            75487429,
            75487406,
            75386768,
            75380568,
            75386156,
            75382219,
            75387697,
            75369638,
            76036841,
            75372968,
            75421067
        ],
        "B": [
            75357516,
            75353754,
            75360937,
            75361445,
            75363313,
            75362516,
            75363699,
            75367490,
            75367087,
            75659949,
            75361718,
            75364241,
            75358119,
            75363158,
            75368163,
            75368647,
            75364635,
            75360193,
            76036829,
            75359511,
            75363649,
            75368965
        ],
        "A": [
            75354673,
            75356344,
            75356602,
            75357362,
            75359450,
            75355169,
            75357071,
            75359811,
            75354137,
            75659929,
            75354669,
            75356764,
            75372979,
            75355330,
            75359586,
            75360814,
            75615883,
            75354430,
            76036826,
            75355988,
            75360416,
            75354524
        ]
    },
    "name": "A. Dreamoon Likes Coloring",
    "statement": "Dreamoon likes coloring cells very much.There is a row of n cells.\r\nInitially, all cells are empty (don\u2019t contain any color). Cells are\r\nnumbered from 1 to n.You are given an integer m and m integers l_1, l_2,\r\nldots, l_m (1\r\nle l_i\r\nle n)Dreamoon will perform m operations.In i-th operation, Dreamoon will\r\nchoose a number p_i from range [1, n-l_i+1] (inclusive) and will paint\r\nall cells from p_i to p_i+l_i-1 (inclusive) in i-th color. Note that\r\ncells may be colored more one than once, in this case, cell will have\r\nthe color from the latest operation.Dreamoon hopes that after these m\r\noperations, all colors will appear at least once and all cells will be\r\ncolored. Please help Dreamoon to choose p_i in each operation to satisfy\r\nall constraints.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__);fflush(stderr);\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n \n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\ndouble startTime;\ndouble getCurrentTime() {\n\treturn ((double)clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int N = 100100;\nint n, m;\nint a[N];\nint ans[N];\n\nint main()\n{\n\tstartTime = (double)clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 0; i < m; i++)\n\t\tscanf(\"%d\", &a[i]);\n\tfor (int i = 0; i < m; i++) {\n\t\tans[i] = i;\n\t\tif (a[i] + i > n) {\n\t\t\tprintf(\"-1\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tans[m] = n;\n\tfor (int i = m - 1; i >= 0; i--) {\n\t\tans[i] = max(ans[i], ans[i + 1] - a[i]);\n\t}\n\tif (ans[0] > 0) {\n\t\tprintf(\"-1\\n\");\n\t\treturn 0;\n\t}\n\tfor (int i = 0; i < m; i++)\n\t\tprintf(\"%d \", ans[i] + 1);\n\tprintf(\"\\n\");\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Dreamoon Likes Coloring.json",
    "editorial_link": "https://codeforces.com//blog/entry/75559",
    "editorial": "After reading the statement, you may find this is a problem that will be\r\ntagged as \"constructive algorithms\" in Codefores. And you also can find\r\nthis problem is just problem A in Div. 1. So basically we can expect\r\nthere exist some simple methods to solve it.If a \"constructive\r\nalgorithms\" problem asks you to determine whether the solution exists or\r\nnot, usually they have a common pattern(especially in problem hardness\r\nwhich is before Div. 1 B(inclusive)), this is, there are some simple\r\nconstraints can divide test data into \"Yes\", and \"No\". Therefore, the\r\nfirst thing to solve this problem is finding some trivial conditions\r\nthat cannot achieve Dreamoon\u00e2\u0080\u0099s hope. After some try, you may find there\r\nare two trivial conditions that achieving Dreamoon\u00e2\u0080\u0099s hope is impossible.\r\nThe two conditions are listed as follows:1. Sum of is less than . In\r\nthis condition, there always is at least one empty grid.2. There exists\r\nsome such that . If , it means after you do -th operation, there only\r\ngrid is not colored by -th color. So at least one of previous color will\r\ndisapear after this operation. Now I want to talk about another feature\r\nof some \"constructive algorithms\" first. Sometimes, the condition given\r\nby the problem is to \"open\", this is to say that if we added some more\r\nstrict constraint, the problem is still can be solved. And when the\r\nconstraint it more strict, we can deduce the solution more easily.One of\r\ncommon \"strict constraint\" is \"sorted\". I believe you have ever seen\r\nmany problems that the first step is sorting something. Now, we also\r\nwant to apply \"sorted\" in the problem.After applying \"sort\", we firstly\r\nconsider the edge cases of above two impossible conditions. The first\r\ncase is \"sum of is equal to \". In this case, we have a unique solution\r\nafter applying \"sort\", . The second case is is hold for all . In this\r\ncase, there is also a unique solution that . The two cases coressond to\r\nis largest and is smallest among all that exist solutions for same . And\r\nfor same , when we decrase from the largest possible value, we can just\r\nchange from to for some smallest indices to get solution. To sum it up,\r\nfinally, we get the answer. The answer is just , for each .There exist\r\nmany other methods to construct solutions. I believe the construction\r\nmethod one can think out is relative to the study experience.\r\n"
}