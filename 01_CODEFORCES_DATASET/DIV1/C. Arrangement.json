{
    "link": "https://codeforces.com//contest/107/problem/C",
    "problemId": "564",
    "problem_idx": "C",
    "shortId": "107C",
    "contest_number": "107",
    "problem_submissions": {
        "D": [
            631074,
            632228,
            633629,
            632921,
            633464,
            632054,
            631978,
            632641,
            632457,
            632305,
            633703,
            632778,
            632827
        ],
        "C": [
            629632,
            632720,
            632094,
            632639,
            634261,
            630830,
            636165,
            633949
        ],
        "B": [
            628278,
            628879,
            628954,
            627989,
            629002,
            630226,
            628861,
            629530,
            628650,
            628939,
            628920,
            629402,
            628525,
            629206,
            629445,
            629058,
            629408
        ],
        "A": [
            627482,
            627526,
            628267,
            627433,
            628167,
            627658,
            627777,
            628413,
            627577,
            628188,
            628306,
            630891,
            627548,
            627550,
            629729,
            627698,
            627546
        ],
        "E": [
            633956
        ]
    },
    "name": "C. Arrangement",
    "statement": "In the year 2500 the annual graduation ceremony in the German University\r\nin Cairo (GUC) has run smoothly for almost 500 years so far.The most\r\nimportant part of the ceremony is related to the arrangement of the\r\nprofessors in the ceremonial hall.Traditionally GUC has professors. Each\r\nprofessor has his seniority level. All seniorities are different. Let\u2019s\r\nenumerate the professors from to , with being the most senior professor\r\nand being the most junior professor.The ceremonial hall has seats, one\r\nseat for each professor. Some places in this hall are meant for more\r\nsenior professors than the others. More specifically, pairs of seats are\r\nin \"senior-junior\" relation, and the tradition requires that for all\r\npairs of seats the professor seated in \"senior\" position should be more\r\nsenior than the professor seated in \"junior\" position .GUC is very\r\nstrict about its traditions, which have been carefully observed starting\r\nfrom year 2001. The tradition requires that: The seating of the\r\nprofessors changes every year. Year 2001 ceremony was using\r\nlexicographically first arrangement of professors in the ceremonial\r\nhall. Each consecutive year lexicographically next arrangement of the\r\nprofessors is used. The arrangement of the professors is the list of\r\nintegers, where the first integer is the seniority of the professor\r\nseated in position number one, the second integer is the seniority of\r\nthe professor seated in position number two, etc.Given , the number of\r\nprofessors, , the current year and pairs of restrictions, output the\r\narrangement of the professors for this year.\r\n",
    "solutions": [
        "/*\n * c.cpp\n *\n *  Created on: 2011-8-23\n *      Author: mac\n */\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)\n#define REP(i,n) for(int i=0;i<n;++i)\nusing namespace std;\n\ntypedef long long int64;\nint n, m;\nint64 kth;\n\nint w[20];\nint before[20] = { };\nconst int MAX_N = 16;\nconst int MAX_S = 1 << MAX_N;\n\nint64 eval(int p) {\n\tstatic int64 dp[20][MAX_S];\n\tmemset(dp, 0, sizeof dp);\n\tint at[MAX_N] = { };\n\tmemset(at, -1, sizeof at);\n\tfor (int i = 0; i < p; ++i) {\n\t\tat[w[i]] = i;\n\t}\n\tdp[0][0] = 1;\n\tfor (int i = 0; i < n; ++i) {\n\t\tfor (int j = 0; j < (1 << n); ++j) {\n\t\t\tif (dp[i][j] != 0) {\n\t\t\t\tint64 c = dp[i][j];\n\t\t\t\tfor (int k = 0; k < n; ++k) {\n\t\t\t\t\tif (~j >> k & 1) {\n\t\t\t\t\t\tif (at[i] != -1 && at[i] != k)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tif ((j & before[k]) == before[k]) {\n\t\t\t\t\t\t\tdp[i + 1][j ^ (1 << k)] += c;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[n][(1 << n) - 1];\n}\nint main() {\n\tcin >> n >> kth >> m;\n\tfor (int i = 0; i < m; ++i) {\n\t\tint a, b;\n\t\tcin >> a >> b, --a, --b;\n\t\tbefore[b] |= 1 << a;\n\t}\n\tkth -= 2001;\n\tif (eval(0) <= kth) {\n\t\tcout << \"The times have changed\" << endl;\n\t\treturn 0;\n\t}\n\tint used = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tfor (int j = 0; j < n; ++j) {\n\t\t\tif (used >> j & 1)\n\t\t\t\tcontinue;\n\t\t\tw[i] = j;\n\t\t\tint64 tmp = eval(i + 1);\n\t\t\tif (tmp <= kth) {\n\t\t\t\tkth -= tmp;\n\t\t\t} else {\n\t\t\t\tused |= 1 << j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < n; ++i) {\n\t\tcout << w[i] + 1 << \" \";\n\t}\n\tcout << endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "dp"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Arrangement.json",
    "editorial_link": "https://codeforces.com/blog/entry/2514",
    "editorial": "The problem asks for finding the lexicographically n-th permutation satisfying the input constraints.\n\nThe trick which confused many contestants, as well as a few authors and testers, is that instead of having the restrictions formulated in a way position[a[i]]?<?position[b[i]] the restrictions were element at position[a[i]] < element at position[b[i]].\n\nAs in most problems where one has to output lexicographically n-th answer, the idea which can result in the solution which is passing the systests is to learn how to compute the number of solutions satisfying certain constraints.\n\nWe will speak about how to compute the number of solutions in a bit, but first let's understand how having such function would lead to a solution. The very first observation is: if the total number of possible solutions is less than y?-?2000, then the answer is \"The times have changed\". Once we have ensured that the solution exists it can be found using some of search.\n\nA simple approach would be the following: fix the first element of the resulting permutation to be 1 and count the number of possible solutions. If we do have enough to reach year y, then the first element must be 1, because there exists enough permutations with the first element being 1 to cover the years up to y, and any permutation where the first element is not 1 comes after any permutation where the first element is 1 in lexicographical order.\n\nAnd if fixing the first element to be 1 is not giving enough permutations, then we should decrease the \"desired\" year by the number of solutions with 1 being fixed as the first element and start looking for the solutions with 2 as the first element. The intuition is that there are not enough solutions with 1 being the first element, but once we acknowledge that and start looking for the other solutions --- with 2 as the first element, we are speaking not about arrangements for years 2001 and onwards but about the years 2001 + number of solutions with first element being one and onwards. Therefore instead of looking for the permutation with index y?-?2001 with the first element being 1 we are looking for the permutation with the lower index, y - 2001 - number of solutions with first element being one, with the first element being 2 or higher.\n\nThis process should be continued until all the elements are identified. Once the first index is fixed the known prefix would become a two-numbers prefix, and it will grow until all the permutation is constructed.\n\nNow to complete the solution we need to be able to compute the number of permutations which satisfy two restrictions: the input constraints and the added \"permutation has prefix P\" constraint. This problem can be solved using DP.\n\nFor a given prefix P of length m, (n-m) other elements should be placed.\n\nAssume first that we are going to be iterating over all possible permutations with the given prefix using the brute force, but, instead of trying each possible value for the element at the next empty position i, we would be trying each possible position for the next not-yet-placed element i. This approach would work, but in O((n?-?m)!) time, which is obviously unfeasible. We need to find some way to reduce the state space and make it run faster.\n\nThe key observation is the following: the state of the partially solved problem can be completely described by the bitmask of the currently occupied positions. This statement is nontrivial, as, from the first glance, it seems that apart from the unused positions mask, the information about the order, in which the already-placed elements are placed, is important. However it's not. Recall that all the constraints have the form of \"element at position ai is less than the element at position bi\". Provided the elements are placed in increasing order, in order to satisfy each constraint it's enough to confirm that, if the element to be placed is being put into position i, there is no such constraint in the input, that the element at position i should be less than the element at position j, while the element at position j has already been placed.\n\nThis approach results in the DP with 2n?-?m states. Note that the next element to be placed can always be determined by the number of bits set in the mask and the prefix elements.\n\nThe implementation of the above algorithm requires nontrivial coding, as the elements, belonging to the prefix, have to be treated differently compared to the elements which were placed by the DP. This is because the DP is enforcing that the elements are always added in the increasing order, which does not have to be the case for the elements conducting the prefix."
}