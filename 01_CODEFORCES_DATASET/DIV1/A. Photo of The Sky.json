{
    "link": "https://codeforces.com//contest/1012/problem/A",
    "problemId": "203191",
    "problem_idx": "A",
    "shortId": "1012A",
    "contest_number": "1012",
    "problem_submissions": {
        "D": [
            40965345,
            40960627,
            40962755,
            40958672,
            40960130,
            40960868,
            40957816,
            40962185,
            40977537,
            40977026,
            40958559,
            40961785,
            40963025,
            40963296,
            40964134,
            40968496,
            40964728
        ],
        "E": [
            40960617,
            40966609,
            40966430,
            40968315,
            40959955,
            40968344,
            41293524,
            40971324,
            40961945,
            40965219,
            40964178,
            40964935,
            40966686
        ],
        "C": [
            40946223,
            40950962,
            40949847,
            40947169,
            40948884,
            40951113,
            40948032,
            40950863,
            40949840,
            40948978,
            40950249,
            40944733,
            40947497,
            40951510,
            40946864,
            40950557,
            40948982,
            40953572,
            40952480,
            40955310
        ],
        "B": [
            40942792,
            40947068,
            40945179,
            40941414,
            40943485,
            40944363,
            40943466,
            40948512,
            40943709,
            40942617,
            40946516,
            40941822,
            40945156,
            40945233,
            40943297,
            40953601,
            40943064,
            40946807,
            40947838,
            40944988
        ],
        "A": [
            40940407,
            40940426,
            40944393,
            40940053,
            40941238,
            40941590,
            40941675,
            40939828,
            40941205,
            40939974,
            40940704,
            40939790,
            40943152,
            40941982,
            40942155,
            40942198,
            40952349,
            40943555,
            40944486,
            40941409
        ],
        "F": [
            41294072,
            40975225,
            40975082,
            48927133,
            48926928,
            48926890,
            48926661,
            48926482,
            48926274,
            48926240,
            48926110,
            48925986,
            48925954,
            48925448,
            48924606
        ]
    },
    "name": "A. Photo of The Sky",
    "statement": "Pavel made a photo of his favourite stars in the sky. His camera takes a\r\nphoto of all points of the sky that belong to some rectangle with sides\r\nparallel to the coordinate axes.Strictly speaking, it makes a photo of\r\nall points with coordinates (x, y), such that x_1\r\nleq x\r\nleq x_2 and y_1\r\nleq y\r\nleq y_2, where (x_1, y_1) and (x_2, y_2) are coordinates of the left\r\nbottom and the right top corners of the rectangle being photographed.\r\nThe area of this rectangle can be zero.After taking the photo, Pavel\r\nwrote down coordinates of n of his favourite stars which appeared in the\r\nphoto. These points are not necessarily distinct, there can be multiple\r\nstars in the same point of the sky.Pavel has lost his camera recently\r\nand wants to buy a similar one. Specifically, he wants to know the\r\ndimensions of the photo he took earlier. Unfortunately, the photo is\r\nalso lost. His notes are also of not much help; numbers are written in\r\nrandom order all over his notepad, so it’s impossible to tell which\r\nnumbers specify coordinates of which points.Pavel asked you to help him\r\nto determine what are the possible dimensions of the photo according to\r\nhis notes. As there are multiple possible answers, find the dimensions\r\nwith the minimal possible area of the rectangle.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define mp make_pair\n\nconst int N = 200200;\nint n;\nll a[N];\nll ans = (ll)1e18 + 4;\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < 2 * n; i++)\n\t\tscanf(\"%lld\", &a[i]);\n\tsort(a, a + 2 * n);\n\tans = (a[n - 1] - a[0]) * (a[2 * n - 1] - a[n]);\n\tll bst = (ll)1e9 + 4;\n\tfor (int i = 1; i <= n - 1; i++) {\n\t\tbst = min(bst, a[i + n - 1] - a[i]);\n\t}\n\tans = min(ans, bst * (a[2 * n - 1] - a[0]));\n\tprintf(\"%lld\\n\", ans);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math",
        "sortings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Photo of The Sky.json",
    "editorial_link": "https://codeforces.com/blog/entry/60920",
    "editorial": "At first letâs sort array , so we can assume that .Note that area of\r\nrectangle with bottom-left corner in , and up-right corner in is .So the\r\ntask is to partite array into multisets (sets with equal elements) and\r\nof size , such that is minimal among all such partitions ( minimum in\r\nmultiset , maximum in multiset ). Letâs look at such partitionThere are\r\ncases: Minimum and maximum are in one multiset. Letâs assume that they\r\nare both in . Then . We need to minimize . If index of in is , and is ,\r\nhtne , because there are elements in . So we can use and desired\r\ndifference will not increase. So as it is optimial to use some segment\r\nof length . Minimum and maximum are not in one multiset. Letâs assume\r\nthat minimum in , and maximum in . Then note, that maximum in always ,\r\nbecause size of is . And minimum in will be , because size of is . So ,\r\nso you can use prefix of length as and suffix of length as . So answer\r\nis minimum of for each and . That is, you can simply check all\r\ncontigious subsets as first set and all the remaints as the second one.\r\nComplexity is .\r\n",
    "hint": []
}