{
    "link": "https://codeforces.com//contest/264/problem/B",
    "problemId": "2527",
    "problem_idx": "B",
    "shortId": "264B",
    "contest_number": "264",
    "problem_submissions": {
        "D": [
            2970633,
            2970188,
            2969616,
            2972161,
            2970655,
            2972191,
            2971577,
            2970650,
            2971498,
            2971572,
            2972055,
            2972383,
            2971674,
            2972692,
            2971818,
            2972335
        ],
        "C": [
            2968127,
            2967219,
            2967855,
            2968130,
            2966487,
            2966588,
            2967563,
            2967148,
            2967835,
            2968495,
            2969405,
            2968262,
            2968182,
            2968431,
            2970284,
            2968742,
            2969164,
            2966742
        ],
        "B": [
            2965253,
            2965388,
            2965967,
            2964982,
            2964487,
            2965047,
            2964632,
            2965554,
            2964885,
            2965097,
            2966188,
            2965309,
            2965972,
            2965497,
            2965546,
            2967550,
            2966171
        ],
        "A": [
            2963692,
            2963886,
            2964531,
            2963631,
            2963360,
            2963339,
            2963656,
            2963270,
            2995453,
            2963462,
            2963614,
            2963459,
            2963970,
            2964239,
            2963708,
            2963681,
            2964333,
            2963722
        ],
        "E": [
            2971453,
            3192402,
            2977035,
            2974561,
            2972662
        ]
    },
    "name": "B. Good Sequences",
    "statement": "Squirrel Liss is interested in sequences. She also has preferences of\r\nintegers. She thinks integers are .Now she is interested in good\r\nsequences. A sequence is called if it satisfies the following three\r\nconditions: The sequence is strictly increasing, i.e. for each . No two\r\nadjacent elements are coprime, i.e. for each (where denotes the greatest\r\ncommon divisor of the integers and ). All elements of the sequence are\r\ngood integers. Find the length of the longest good sequence.\r\n",
    "solutions": [
        "#pragma comment(linker, \"/STACK:60000000\")\n//#define _MY_OPT_MODE_\n#define _CRT_SECURE_NO_WARNINGS\n#define _CRT_SECURE_NO_DEPRECATE\n\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <algorithm>\n\n#include <vector>\n#include <set>\n#include <map>\n#include <bitset>\n#include <queue>\n#include <stack>\n#include <list>\n\n#include <ctime>\n#include <cassert>\n\nusing namespace std;\n\ntypedef long double ldb;\ntypedef long long int64;\ntypedef pair <int, int> pii;\ntypedef pair <double, double> pdd;\n\n#define y0 wwwwwww\n#define y1 qqqqqqq\n#define next NEXT\n#define prev PREV\n#define forn(i, n) for (int i = 0; i < (int) n; i++)\n#define ford(i, n) for (int i = (int) n - 1; i >= 0; i--)\n#define seta(a, b) memset(a, b, sizeof(a))\n#define pb push_back\n#define all(a) (a).begin(), (a).end()\n#define last(a) a[a.size() - 1]\n#define mp make_pair\n#define fs first\n#define sc second\n\ntemplate <class T> T sqr(T x) { return x * x; }\n\ndouble const pi = 3.1415926535897932384626433832795;\nint const inf = (int) 1e9;\nint64 const inf64 = (int64) 4e18;\nconst string name = \"b\";\n\nconst int NMAX = 100100;\nint n, a[NMAX], ans[NMAX], prev[NMAX];\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen((name + \".in\").data(), \"r\", stdin);\n\tfreopen((name + \".out\").data(), \"w\", stdout);\n#endif\n\n\tcin >> n;\n\tforn(i, n)\n\t\tscanf(\"%d\", &a[i]);\n\n\tforn(i, NMAX)\n\t\tprev[i] = -1;\n\tint answer = 0;\n\tforn(i, n)\n\t{\n\t\tans[i] = 1;\n\t\tfor (int d = 2; d * d <= a[i]; ++d)\n\t\t\tif (a[i] % d == 0)\n\t\t\t{\n\t\t\t\tif (prev[d] >= 0) ans[i] = max(ans[i], ans[prev[d]] + 1);\n\t\t\t\tif (prev[a[i] / d] >= 0) ans[i] = max(ans[i], ans[prev[a[i] / d]] + 1);\n\t\t\t\tprev[d] = prev[a[i] / d] = i;\n\t\t\t}\n\t\tif (prev[a[i]] >= 0) ans[i] = max(ans[i], ans[prev[a[i]]] + 1);\n\t\tprev[a[i]] = i;\n\t\tanswer = max(answer, ans[i]);\n\t}\n\tcout << answer << endl;\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "number theory"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Good Sequences.json",
    "editorial_link": "https://codeforces.com/blog/entry/6478",
    "editorial": "The main idea is DP. Let's define dp[x] as the maximal value of the length of the good sequence whose last element is x, and define d[i] as the (maximal value of dp[x] where x is divisible by i).\n\nYou should calculate dp[x] in the increasing order of x. The value of dp[x] is (maximal value of d[i] where i is a divisor of x) + 1. After you calculate dp[x], for each divisor i of x, you should update d[i] too.\n\nThis algorithm works in O(nlogn) because the sum of the number of the divisor from 1 to n is O(nlogn).\n\nNote that there is a corner case. When the set is {1}, you should output 1."
}