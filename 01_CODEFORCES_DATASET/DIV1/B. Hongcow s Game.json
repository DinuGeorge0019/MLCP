{
    "link": "https://codeforces.com//contest/744/problem/B",
    "problemId": "85240",
    "problem_idx": "B",
    "shortId": "744B",
    "contest_number": "744",
    "problem_submissions": {
        "D": [
            23172550,
            23101161,
            23068735,
            23073667,
            23132587,
            23132570,
            23072938
        ],
        "B": [
            23071347,
            23055547,
            23056640,
            23057482,
            23055511,
            23066941,
            23058988,
            23055885,
            23055635,
            23056110,
            23057772,
            23056735,
            23057617,
            23056511,
            23062111,
            23062274,
            23057681,
            23057651,
            23056286
        ],
        "C": [
            23071345,
            23057499,
            23060727,
            23060442,
            23060420,
            23066137,
            23056758,
            23059869,
            23060628,
            23060184,
            23060124,
            23061291,
            23060827,
            23061807,
            23057367,
            23057447,
            23062076,
            23060867,
            23062926
        ],
        "E": [
            23071342,
            23063797,
            23070592,
            23069714,
            23064327
        ],
        "A": [
            23071326,
            23052903,
            23053379,
            23054137,
            23053853,
            23053406,
            23053000,
            23053710,
            23053750,
            23054145,
            23053643,
            23053798,
            23058381,
            23059184,
            23053344,
            23054382,
            23053476
        ]
    },
    "name": "B. Hongcow s Game",
    "statement": "In this problem, you will be playing a game with Hongcow. How lucky of\r\nyou!Hongcow has a hidden by matrix . Let denote the entry -th row and\r\n-th column of the matrix. The rows and columns are labeled from to .The\r\nmatrix entries are between and . In addition, for all valid . Your task\r\nis to find the minimum value along each row, excluding diagonal\r\nelements. Formally, for each , you must find .To do this, you can ask\r\nHongcow some questions.A question consists of giving Hongcow a subset of\r\ndistinct indices , with . Hongcow will respond with integers. The -th\r\ninteger will contain the minimum value of .You may only ask Hongcow at\r\nmost questions he thinks you only need that many questions answered.When\r\nyou are ready to answer, print out a single integer on its own line,\r\nthen integers on the next line. The -th integer should be the minimum\r\nvalue in the -th row of the matrix, excluding the -th element. Do not\r\nforget to flush the final answer as well. Printing the answer does not\r\ncount as asking a question.You will get verdict if Your question or\r\nanswers are not in the format described in this statement. You ask\r\nstrictly more than questions. Your question contains duplicate indices.\r\nThe value of in your question does not lie in the range from to ,\r\ninclusive. Your final answer is not correct. You will get if you don\u2019t\r\nprint anything or if you forget to flush the output, including for the\r\nfinal answer (more info about flushing output below).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 1234;\n\nint x[N][N], y[N][N];\n\nvoid query(vector <int> z) {\n  int sz = z.size();\n  printf(\"%d\\n\", sz);\n  for (int i = 0; i < sz; i++) {\n    if (i > 0) putchar(' ');\n    printf(\"%d\", z[i] + 1);\n  }\n  printf(\"\\n\");\n  fflush(stdout);\n}\n\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  for (int j = 0; (1 << j) < n; j++) {\n    vector <int> a, b;\n    for (int i = 0; i < n; i++) {\n      if (i & (1 << j)) {\n        a.push_back(i);\n      } else {\n        b.push_back(i);\n      }\n    }\n    query(a);\n    for (int i = 0; i < n; i++) {\n      scanf(\"%d\", &x[i][j]);\n    }\n    query(b);\n    for (int i = 0; i < n; i++) {\n      scanf(\"%d\", &y[i][j]);\n    }\n  }\n  printf(\"%d\\n\", -1);\n  for (int i = 0; i < n; i++) {\n    int ans = (int) 2e9;\n    for (int j = 0; (1 << j) < n; j++) {\n      if (i & (1 << j)) {\n        ans = min(ans, y[i][j]);\n      } else {\n        ans = min(ans, x[i][j]);\n      }\n    }\n    if (i > 0) putchar(' ');\n    printf(\"%d\", ans);\n  }\n  printf(\"\\n\");\n  fflush(stdout);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "divide and conquer",
        "interactive"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Hongcow s Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/49126",
    "editorial": "For the bits solution: We want to create 20 questions where for every i\r\n!= j, there exists a question that contains j and not i, and also a\r\nqusetion that contains i and not j. If we can do this, we can find the\r\nmin for each row. Note that i != j implies that there exists a bit index\r\nwhere i and j differ. So, let\u00e2\u0080\u0099s ask 2 questions for each bit position,\r\none where all indices have a value of 0 in that position, and one where\r\nall indices have a value of 1 in that position. This is a total of at\r\nmost 20 questions, and we can show that this satisfies the condition\r\nabove, so this solves the problem. Parallelization will basically reduce\r\nto the above solution, but is another way of looking at the problem.\r\nFirst, let\u00e2\u0080\u0099s ask {1,2,...,n/2} and {n/2+1,...,n} This handles the case\r\nwhere the min lies on the opposite half. For example, this handles the\r\ncase where the min lies in the X part of the matrix, and we split it\r\ninto two identical problems of size n/2 within the O matrix. Now, we can\r\nask questions for each submatrix, but we can notice that these two don\u00e2\u0080\u0099t\r\ninteract so we can combine all the questions at this level. However, we\r\nshould ask the questions in parallel, as we don\u00e2\u0080\u0099t have that many\r\nquestions For example, for n=8, we should ask As you can see, this\r\nreduces to the bit approach above if N is a power of 2. code\r\n"
}