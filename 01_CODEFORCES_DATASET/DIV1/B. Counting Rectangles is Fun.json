{
    "link": "https://codeforces.com//contest/372/problem/B",
    "problemId": "4183",
    "problem_idx": "B",
    "shortId": "372B",
    "contest_number": "372",
    "problem_submissions": {
        "D": [
            5426977,
            5430216,
            5428682,
            5430119,
            5427511,
            5430570,
            5430674,
            5430157,
            5432457,
            5430283,
            5428509,
            5431356,
            5431746,
            5438335,
            5439009,
            5430897,
            5431697,
            5427479,
            5431615,
            5437474
        ],
        "C": [
            5425620,
            5423917,
            5425367,
            5426752,
            5429971,
            5426458,
            5425626,
            5427101,
            5430049,
            5423463,
            5427437,
            5427041,
            5428996,
            5429237,
            5430350,
            5429420,
            5425660,
            5426153
        ],
        "B": [
            5423489,
            5421838,
            5424137,
            5424220,
            5424353,
            5423172,
            5423669,
            5423082,
            5424372,
            5425505,
            5428480,
            5425133,
            5425580,
            5425422,
            5424402,
            5431761,
            5424978,
            5423136,
            5424295
        ],
        "A": [
            5421957,
            5420847,
            5421730,
            5421129,
            5421031,
            5420888,
            5422498,
            5422219,
            5421566,
            5422639,
            5425833,
            5421459,
            5427633,
            5423077,
            5420877,
            5428458,
            5422847,
            5420856,
            5421782
        ],
        "E": [
            5430957
        ]
    },
    "name": "B. Counting Rectangles is Fun",
    "statement": "There is an rectangular grid, each cell of the grid contains a single\r\ninteger: zero or one. Let’s call the cell on the -th row and the -th\r\ncolumn as .Let’s define a \"rectangle\" as four integers . Rectangle\r\ndenotes a set of cells of the grid . Let’s define a \"good rectangle\" as\r\na rectangle that includes only the cells with zeros.You should answer\r\nthe following queries: calculate the number of good rectangles all of\r\nwhich cells are in the given rectangle.\r\n",
    "solutions": [
        "#include <cstdlib>\n#include <cctype>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n//#include <iostream>\n#include <sstream>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <fstream>\n#include <numeric>\n#include <iomanip>\n#include <bitset>\n#include <list>\n#include <stdexcept>\n#include <functional>\n#include <utility>\n#include <ctime>\n#include <cassert>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<(int)n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\n#define ACCU accumulate\ntypedef vector<int> VI;\ntypedef vector<string> VS;\ntypedef vector<double> VD;\ntypedef long long ll;\ntypedef pair<int,int> PII;\ntypedef pair<ll,ll> PLL;\ntypedef vector<ll> VL;\nconst ll mod=1000000007;\nconst double eps=1e-9;\nconst double pi=acos(0)*2;\nll powmod(ll a,ll b) {ll res=1;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll powmod(ll a,ll b,ll mod) {ll res=1;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nconst int N=50;\nint n,m,q,brd[N][N],sum[N][N],valid[N][N][N][N];\nint _a,_b,_c,_d;\nchar st[N][N];\nint main() {\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\trep(i,1,n+1) scanf(\"%s\",st[i]);\n\trep(i,1,n+1) rep(j,1,m+1) brd[i][j]=st[i][j-1]-'0';\n\trep(i,1,n+1) rep(j,1,m+1) sum[i][j]=brd[i][j]==0;\n\trep(i,1,n+1) rep(j,1,m+1) sum[i][j]+=sum[i][j-1];\n\trep(i,1,n+1) rep(j,1,m+1) sum[i][j]+=sum[i-1][j];\n\trep(a,1,n+1) rep(c,a,n+1) rep(b,1,m+1) rep(d,b,m+1) {\n\t\tvalid[a][c][b][d]=(sum[c][d]-sum[a-1][d]-sum[c][b-1]+sum[a-1][b-1]==(d-b+1)*(c-a+1));\n\t}\n\trep(a,1,n+1) rep(c,1,n+1) rep(b,1,m+1) rep(d,1,m+1) valid[a][c][b][d]+=valid[a-1][c][b][d];\n\trep(a,1,n+1) rep(c,1,n+1) rep(b,1,m+1) rep(d,1,m+1) valid[a][c][b][d]+=valid[a][c-1][b][d];\n\trep(a,1,n+1) rep(c,1,n+1) rep(b,1,m+1) rep(d,1,m+1) valid[a][c][b][d]+=valid[a][c][b-1][d];\n\trep(a,1,n+1) rep(c,1,n+1) rep(b,1,m+1) rep(d,1,m+1) valid[a][c][b][d]+=valid[a][c][b][d-1];\n\trep(i,0,q) {\n\t\tscanf(\"%d%d%d%d\",&_a,&_b,&_c,&_d);\n\t\tprintf(\"%d\\n\",valid[_c][_c][_d][_d]-valid[_a-1][_c][_d][_d]-valid[_c][_c][_b-1][_d]+valid[_a-1][_c][_b-1][_d]);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "divide and conquer",
        "dp"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Counting Rectangles is Fun.json",
    "editorial_link": "https://codeforces.com/blog/entry/9944",
    "editorial": "We can precalculate all rectangles, in O(N^2M^2) with using consecutive\r\nsums for 2D. And then we use 4D consecutive sums, we can answer the\r\nqueries. The time conplexity is O(N^2M^2+Q). my solution:\r\nhttp://ideone.com/QOjwse\r\n",
    "hint": []
}