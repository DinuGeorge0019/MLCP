{"link": "https://codeforces.com//contest/1218/problem/H", "problemId": "412340", "problem_idx": "H", "shortId": "1218H", "contest_number": "1218", "problem_submissions": {"D": [60648151, 60643203, 60647260, 60645392, 60642748], "H": [60644806, 60638524], "E": [60642127, 60641056, 60641513, 60643564, 60648498], "I": [60640334, 60639607, 60640474, 60637390, 60638678], "F": [60638215, 60637531, 60635942, 60636552, 60636479], "C": [60637983, 60674902, 60648025], "B": [60648802], "A": [60645770], "G": []}, "name": "H. Function Composition", "statement": "We are definitely not going to bother you with another generic story\r\nwhen Alice finds about an array or when Alice and Bob play some stupid\r\ngame. This time you\u2019ll get a simple, plain text.First, let us define\r\nseveral things. We define function F on the array A such that F(i, 1) =\r\nA[i] and F(i, m) = A[F(i, m - 1)] for m > 1. In other words, value F(i,\r\nm) represents composition A[...A[i]] applied m times.You are given an\r\narray of length N with non-negative integers. You are expected to give\r\nan answer on Q queries. Each query consists of two numbers m and y. For\r\neach query determine how many x exist such that F(x,m) = y.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\nusing ll = long long;\nusing lint = long long;\nusing pii = pair<int, int>;\n#define x first\n#define y second\n\nconst int N = 200005;\n\nint n, q, a[N], ind[N], ps[N], pe[N], pc, dep[N], cyc[N], cn[N], csz[N], cc;\nvector<int> e[N], dv[N];\nvector<vector<vector<int>>> cv;\nqueue<int> qq;\n\nvoid f(int x, int y, int z, int u, int v, int w){\n    dep[x] = z;\n    ps[x] = ++pc;\n    dv[dep[x]].push_back(pc);\n    cv[u][(v+dep[x])%w].push_back(dep[x]);\n    for(int i : e[x]) if(i != x) f(i, x, z + 1, u, v, w);\n    pe[x] = pc;\n}\n\nint main(){ ios_base::sync_with_stdio(0); cin.tie(0);\n    cin >> n;\n    for(int i = 1; i <= n; i++){\n        cin >> a[i];\n        ind[a[i]]++;\n    }\n    for(int i = 1; i <= n; i++) if(!ind[i]) qq.push(i);\n    while(!qq.empty()){\n        int x = qq.front();\n        qq.pop();\n        e[a[x]].push_back(x);\n        if(--ind[a[x]] == 0) qq.push(a[x]);\n    }\n    cv.push_back(vector<vector<int>>());\n    for(int i = 1; i <= n; i++) if(ind[i]){\n        if(!cyc[i]){\n            cyc[i] = ++cc;\n            cv.push_back(vector<vector<int>>());\n            cv[cc].push_back(vector<int>());\n            int zz = 1;\n            for(int j = a[i]; j != i; j = a[j], zz++){\n                cyc[j] = cc;\n                cv[cc].push_back(vector<int>());\n            }\n            int z = zz;\n            csz[i] = zz;\n            cn[i] = --z;\n            for(int j = a[i]; j != i; j = a[j]){\n                csz[j] = zz;\n                cn[j] = --z;\n            }\n        }\n        f(i, 0, 0, cyc[i], cn[i], csz[i]);\n    }\n    for(auto &i : cv) for(auto &j : i) sort(j.begin(), j.end());\n    cin >> q;\n    for(; q--; ){\n        ll m; int y; cin >> m >> y;\n        if(cyc[y]){\n            int idx = (cn[y] + m) % csz[y];\n            m = min(m, ll(1e6));\n            auto &cur = cv[cyc[y]][idx];\n            cout << int(\n                upper_bound(cur.begin(), cur.end(), m) -\n                cur.begin()) << '\\n';\n        }\n        else{\n            ll t = dep[y] + m;\n            if(t >= N) cout << \"0\\n\";\n            else cout << int(\n                upper_bound(dv[t].begin(), dv[t].end(), pe[y]) -\n                lower_bound(dv[t].begin(), dv[t].end(), ps[y])) << '\\n';\n        }\n    }\n}"], "input": "", "output": "", "tags": ["dfs and similar"], "dificulty": "2900", "interactive": false}