{
    "link": "https://codeforces.com//contest/605/problem/C",
    "problemId": "42719",
    "problem_idx": "C",
    "shortId": "605C",
    "contest_number": "605",
    "problem_submissions": {
        "C": [
            14733414,
            14720384,
            14720999,
            14727321,
            14722464,
            14721634,
            14727835,
            14731363,
            14731595,
            14730092,
            14726129,
            14721720,
            14724282,
            14722284,
            14722209,
            14728049
        ],
        "D": [
            14724788,
            14728609,
            14730065,
            14729000,
            14724493,
            14732219,
            14728421,
            14723804,
            14721730,
            14724221,
            14732566,
            14780111,
            14732774,
            14732416,
            14730015,
            14724377
        ],
        "A": [
            14722715,
            14715950,
            14715817,
            14716990,
            14715828,
            14715926,
            14717224,
            14715773,
            14715784,
            14715907,
            14716365,
            14720150,
            14715839,
            14716429,
            14716499,
            14716967,
            14715831,
            14715776
        ],
        "B": [
            14721948,
            14718121,
            14718105,
            14718689,
            14718666,
            14718313,
            14719575,
            14717722,
            14717902,
            14718552,
            14718421,
            14718419,
            14718059,
            14719671,
            14718443,
            14719771,
            14718528,
            14719776
        ],
        "E": [
            14718635,
            14725044,
            14723153,
            14726864,
            14729961,
            14722181,
            14723791,
            14727330,
            14729035,
            14727305,
            14723008,
            14728473,
            14728113,
            14731024,
            14729704,
            14736246,
            14736224
        ]
    },
    "name": "C. Freelancer s Dreams",
    "statement": "Mikhail the Freelancer dreams of two things: to become a cool programmer\r\nand to buy a flat in Moscow. To become a cool programmer, he needs at\r\nleast experience points, and a desired flat in Moscow costs dollars.\r\nMikhail is determined to follow his dreams and registered at a freelance\r\nsite.He has suggestions to work on distinct projects. Mikhail has\r\nalready evaluated that the participation in the -th project will\r\nincrease his experience by per day and bring dollars per day. As\r\nfreelance work implies flexible working hours, Mikhail is free to stop\r\nworking on one project at any time and start working on another project.\r\nDoing so, he receives the respective share of experience and money.\r\nMikhail is only trying to become a cool programmer, so he is able to\r\nwork only on one project at any moment of time.Find the real value,\r\nequal to the minimum number of days Mikhail needs to make his dream come\r\ntrue.For example, suppose Mikhail is suggested to work on three projects\r\nand , , , , , . Also, and . In order to achieve his aims Mikhail has to\r\nwork for days on both first and third projects. Indeed, and .\r\n",
    "solutions": [
        "#include <cstdio>\n#include <algorithm>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\ntypedef long double LD;\nconst int N=101000;\nint n,p,q,a[N],b[N];\nLD ff(LD x) {\n\tLD mv=1;\n\trep(i,0,n) mv=min(mv,(1-b[i]*x)/a[i]);\n\treturn mv*p+x*q;\n}\nint main() {\n\tscanf(\"%d%d%d\",&n,&p,&q);\n\trep(i,0,n) scanf(\"%d%d\",a+i,b+i);\n\tLD l=0,r=1; r/=*max_element(b,b+n);\n\trep(i,0,200) {\n\t\tLD fl=(l+l+r)/3,fr=(r+r+l)/3;\n\t\tif (ff(fl)>ff(fr)) r=fr; else l=fl;\n\t}\n\tprintf(\"%.10f\\n\",(double)ff((l+r)/2));\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Freelancer s Dreams.json",
    "editorial_link": "https://codeforces.com//blog/entry/22019",
    "editorial": "Let s build the set P on the plane of points (x, y) such that we can\r\nreceive x money and y experience per time unit. Place points (a[i],\r\nb[i]) on the plane. Add also two points (max(a[i]), 0) and (0,\r\nmax(b[i])). All these points for sure are included to P. Find their\r\nconvex hull. After that, any point inside or at the border of the convex\r\nhull would correspond to usage of some linear combination of projects.\r\nNow we should select some point which hero should use as the average\r\nspeed of receiving money and experience during all time of achieving his\r\ndream. This point should be non-strictly inside the convex hull. The\r\ndream is realized if we get to point (A,B). The problem lets us to get\r\nupper of righter, but to do so is not easier than to get to the (A,B)\r\nitself. So let s direct a ray from (0,0) to (A,B) and find the latest\r\nmoment when this ray was inside our convex hull. This point would\r\ncorrespond to the largest available speed of receiving resources in the\r\ndirection of point (A,B). Coordinates of this point are speed of getting\r\nresources. To find the point, we have to intersect the ray and the\r\nconvex hull.\r\n",
    "hint": []
}