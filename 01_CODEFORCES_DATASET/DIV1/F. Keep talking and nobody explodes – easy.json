{
    "link": "https://codeforces.com//contest/1302/problem/F",
    "problemId": "530376",
    "problem_idx": "F",
    "shortId": "1302F",
    "contest_number": "1302",
    "problem_submissions": {
        "G": [
            70178308,
            70181430
        ],
        "F": [
            70174410,
            70180942
        ],
        "B": [
            70169462,
            70166865
        ],
        "C": [
            70167717,
            70168002
        ],
        "A": [
            70167198,
            70167522
        ],
        "J": [
            70183433
        ],
        "D": [
            70170852
        ],
        "H": []
    },
    "editorial_link": "https://codeforces.com//blog/entry/73599",
    "editorial": "One could guess that if we are asked not to mix up if and else\r\nstatements then the problem is actually to choose which statements to\r\nmix up. A simple bruteforce of all mix-up-masks does the trick.\r\n",
    "name": "F. Keep talking and nobody explodes – easy",
    "statement": "You have the safe lock which consists of 5 decimal digits. If you rotate\r\nsome digit, it increases by one, except 9 which becomes 0.Initially, the\r\nlock contains number x. To unlock the safe you must do the following\r\noperations in order (and be careful, don’t mix up if and else\r\nstatements).If sum of digits on positions 1 and 4 is greater than 10,\r\nrotate digit on position 1 by 3 times, else rotate digit on position 4\r\nby 8 times.If sum of digits on positions 3 and 2 is greater than 8,\r\nrotate digit on position 4 by 9 times, else rotate digit on position 5\r\nby 8 times.If digit on position 3 is odd, rotate digit on position 3 by\r\n3 times, else rotate digit on position 3 by 4 times.If digit on position\r\n5 is greater than digit on position 2, rotate digit on position 4 by 1\r\ntimes, else rotate digit on position 2 by 7 times.If digit on position 1\r\nis odd, rotate digit on position 1 by 3 times, else rotate digit on\r\nposition 3 by 5 times.If digit on position 4 is odd, rotate digit on\r\nposition 4 by 7 times, else rotate digit on position 1 by 9 times.If\r\ndigit on position 4 is greater than digit on position 1, rotate digit on\r\nposition 4 by 9 times, else rotate digit on position 4 by 2 times.If\r\ndigit on position 1 is greater than digit on position 3, rotate digit on\r\nposition 2 by 1 times, else rotate digit on position 3 by 1 times.If\r\ndigit on position 5 is greater than digit on position 3, rotate digit on\r\nposition 4 by 5 times, else rotate digit on position 5 by 8 times.If sum\r\nof digits on positions 1 and 3 is greater than 8, rotate digit on\r\nposition 4 by 5 times, else rotate digit on position 2 by 5 times.If\r\ndigit on position 1 is greater than digit on position 4, rotate digit on\r\nposition 4 by 3 times, else rotate digit on position 2 by 3 times.If sum\r\nof digits on positions 3 and 1 is greater than 9, rotate digit on\r\nposition 2 by 9 times, else rotate digit on position 2 by 2 times.If sum\r\nof digits on positions 4 and 3 is greater than 10, rotate digit on\r\nposition 4 by 7 times, else rotate digit on position 5 by 7 times.If\r\ndigit on position 3 is greater than digit on position 2, rotate digit on\r\nposition 3 by 2 times, else rotate digit on position 4 by 6 times.If\r\ndigit on position 1 is greater than digit on position 3, rotate digit on\r\nposition 1 by 9 times, else rotate digit on position 2 by 9 times.If\r\ndigit on position 3 is odd, rotate digit on position 3 by 9 times, else\r\nrotate digit on position 1 by 5 times.If sum of digits on positions 3\r\nand 5 is greater than 9, rotate digit on position 3 by 4 times, else\r\nrotate digit on position 3 by 9 times.If digit on position 3 is greater\r\nthan digit on position 1, rotate digit on position 5 by 1 times, else\r\nrotate digit on position 5 by 7 times.If digit on position 1 is greater\r\nthan digit on position 3, rotate digit on position 2 by 9 times, else\r\nrotate digit on position 4 by 6 times.If sum of digits on positions 2\r\nand 3 is greater than 10, rotate digit on position 2 by 2 times, else\r\nrotate digit on position 3 by 6 times.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using i64 = long long; int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int n;    std::cin >> n;        std::vector<int> a(n);    for (int i = 0; i < n; i++) {        std::cin >> a[i];    }        std::vector<std::vector<int>> adj(n);        for (int i = 1; i < n; i++) {        int u, v;        std::cin >> u >> v;        u--, v--;        adj[u].push_back(v);        adj[v].push_back(u);    }        std::vector<int> dp(n), t(n);    std::vector<std::set<int>> s(n);    std::function<void(int, int)> dfs = [&](int x, int p) {        std::map<int, int> cnt;        if (adj[x].size() == 1 && x) {            s[x].insert(0);            dp[x] = 1;        }        for (auto y : adj[x]) {            if (y == p) {                continue;            }            dfs(y, x);            dp[x] += dp[y] + 1;            if (s[x].size() < s[y].size()) {                std::swap(s[x], s[y]);                std::swap(t[x], t[y]);            }            for (auto z : s[y]) {                z ^= t[x] ^ t[y];                if (s[x].count(z)) {                    cnt[z ^ t[x]]++;                } else {                    s[x].insert(z);                }            }        }        if (!cnt.empty()) {            int mx = 0;            for (auto [_, v] : cnt) {                mx = std::max(mx, v);            }            dp[x] -= mx + 1;            s[x].clear();            t[x] = a[x];            for (auto [z, v] : cnt) {                if (v == mx) {                    s[x].insert(z);                }            }        } else {            dp[x] -= 1;            t[x] ^= a[x];        }    };    dfs(0, -1);        int ans = dp[0] + !s[0].count(t[0]);    std::cout << ans << \"\\n\";        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "expression parsing"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\F. Keep talking and nobody explodes – easy.json"
}