{
    "link": "https://codeforces.com//contest/949/problem/B",
    "problemId": "163629",
    "problem_idx": "B",
    "shortId": "949B",
    "contest_number": "949",
    "problem_submissions": {
        "E": [
            36105597,
            36104729,
            36107882,
            36106052,
            36109939,
            36109078,
            36111836,
            36112039,
            36111175,
            36106962,
            36109964,
            36110554,
            36111413,
            36109601,
            36111115,
            36110022,
            36110942,
            94270940,
            36111425,
            36106250,
            36109832
        ],
        "D": [
            36101360,
            36106649,
            36105542,
            36109215,
            36106017,
            36106726,
            36102230,
            36101449,
            36103104,
            36110228,
            36103260,
            36105066,
            36107080,
            36106355,
            36107442,
            36106210,
            36107773,
            36109010,
            36109232,
            36112599
        ],
        "C": [
            36097297,
            36099409,
            36097097,
            36099338,
            36100026,
            36100955,
            36098934,
            36097758,
            36099260,
            36100420,
            36101363,
            36101312,
            36100998,
            36103414,
            36103747,
            36102556,
            36101236,
            36102526,
            50661562,
            36100630,
            36101932
        ],
        "B": [
            36095300,
            36092787,
            36094621,
            36097341,
            36096959,
            36097302,
            36093518,
            36094892,
            36097014,
            36095796,
            36096835,
            36098669,
            36097021,
            36100952,
            36098276,
            36097313,
            36097889,
            36098939,
            36095872,
            36098787
        ],
        "A": [
            36093067,
            36095425,
            36093246,
            36094348,
            36092357,
            36093156,
            36095248,
            36092415,
            36092267,
            36097893,
            36093322,
            36092795,
            36093362,
            36093672,
            36096228,
            36095964,
            36093387,
            36095876,
            36127878,
            36094011
        ]
    },
    "name": "B. A Leapfrog in the Array",
    "statement": "Dima is a beginner programmer. During his working process, he regularly\r\nhas to repeat the following operation again and again: to remove every\r\nsecond element from the array. One day he has been bored with easy\r\nsolutions of this problem, and he has come up with the following\r\nextravagant algorithm.Let’s consider that initially array contains\r\nnumbers from to and the number is located in the cell with the index\r\n(Indices are numbered starting from one) and other cells of the array\r\nare empty. Each step Dima selects a non-empty array cell with the\r\nmaximum index and moves the number written in it to the nearest empty\r\ncell to the left of the selected one. The process continues until all\r\nnumbers will appear in the first cells of the array. For example if ,\r\nthe array is changing as follows: You have to write a program that\r\nallows you to determine what number will be in the cell with index ()\r\nafter Dima’s algorithm finishes.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:336777216\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n\ntypedef tuple<int, int, int> t3;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\n\nint IT_MAX = 1 << 17;\nint MOD = 1000000007;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 0x3f3f3f3f3f3f3f3f;\nconst db PI = acos(-1);\nconst db ERR = 1e-10;\n#define szz(x) (int)(x).size()\n#define Se second\n#define Fi first\n\nint main() {\n\tll N, Q;\n\tscanf(\"%lld %lld\", &N, &Q);\n\twhile (Q--) {\n\t\tll t;\n\t\tscanf(\"%lld\", &t);\n\n\t\tll ans = 0;\n\t\tll x = N, y = t;\n\t\twhile (x >= 2) {\n\t\t\tif (x % 2 == 0) {\n\t\t\t\tif (y % 2 == 1) {\n\t\t\t\t\tans += (y + 1) / 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tans += x / 2;\n\t\t\t\tx /= 2, y /= 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (y % 2 == 1) {\n\t\t\t\t\tans += (y + 1) / 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tans += (x + 1) / 2;\n\t\t\t\tx /= 2, y /= 2;\n\t\t\t\ty--;\n\t\t\t\tif (y == 0) y = x;\n\t\t\t}\n\t\t}\n\t\tif (x == 1) ans++;\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. A Leapfrog in the Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/58291",
    "editorial": "In odd position value will be set. For even position letâs find out\r\nposition from which value has arrived and iterate over such position\r\nuntil we will arrive to odd position for which we know answer.At the\r\nmoment of jumping to cell there are elements to the right of the\r\nposition . So there are elements to the right of this position and jump\r\nto cell was done from position . During each such jump length of jump\r\ndecreases at least by 2 times, so there are no more than jumps and\r\nsolution works in .\r\n",
    "hint": []
}