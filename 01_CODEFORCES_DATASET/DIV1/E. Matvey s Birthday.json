{"link": "https://codeforces.com//contest/718/problem/E", "problemId": "72544", "problem_idx": "E", "shortId": "718E", "contest_number": "718", "problem_submissions": {"C": [22302962, 22302941, 22302889, 22302852, 22302731, 22302692, 20846565, 20849386, 20847435, 20859089, 20848615, 20840892, 20856665, 20846554, 20847508, 20848199, 20847949, 20848925, 20849628, 20854862, 20850773, 20851572, 20861188, 20850610], "D": [20853333, 20864854, 20856011, 20861286, 21246935, 21246860, 20864386], "A": [20842439, 20877357, 20843102, 20840207, 20845729, 20843895, 20841441, 20841738, 20840153, 20842838, 20841757, 20842345, 20848915, 20842908, 20843212, 20840112, 20842542, 20845574], "E": [20878493, 21383093, 33904537]}, "name": "E. Matvey s Birthday", "statement": "Today is Matvey\u2019s birthday. He never knows what to ask as a present so\r\nfriends gave him a string of length . This string consists of only first\r\neight English letters: \u201d, \u201d, , \u201d.First question that comes to mind is:\r\nwho might ever need some string? Matvey is a special boy so he instantly\r\nfound what to do with this string. He used it to build an undirected\r\ngraph where vertices correspond to position in the string and there is\r\nan edge between distinct positions and () if of the following conditions\r\nhold: and are neighbouring, i.e. . Positions and contain equal\r\ncharacters, i.e. . Then Matvey decided to find the diameter of this\r\ngraph. Diameter is a maximum distance (length of the shortest path)\r\namong all pairs of vertices. Also, Matvey wants to find the number of\r\npairs of vertices such that the distance between them is equal to the\r\ndiameter of the graph. As he is very cool and experienced programmer he\r\nmanaged to solve this problem very fast. Will you do the same?\r\n", "solutions": ["#include <bits/stdc++.h>\n\n#define FO(i,a,b) for (int i = (a); i < (b); i++)\n#define sz(v) int(v.size())\n\nusing namespace std;\n\ntypedef long long ll;\n\nint n, m;\nchar s[100015];\nint a[100015];\n\nvector<int> u[100015];\nint dst[100015][15];\nbool proc[100015];\n\nvoid clc(int l) {\n    FO(i,0,n+m) {\n        dst[i][l] = 1e9;\n        proc[i] = false;\n    }\n    deque<int> q;\n    q.push_back(n+l);\n    dst[n+l][l] = 0;\n    while (!q.empty()) {\n        int i = q.front(); q.pop_front();\n        if (proc[i]) continue;\n        proc[i] = true;\n        for (int j : u[i]) {\n            int nd = dst[i][l];\n            if (i < n) {\n                nd++;\n            }\n            if (nd < dst[j][l]) {\n                dst[j][l] = nd;\n                if (i < n) q.push_back(j);\n                else q.push_front(j);\n            }\n        }\n    }\n}\n\nint c[8][2<<21];\n\nvoid add(vector<int> v) {\n    FO(i,0,m) if (v[i] == 0) {\n        int r = 0;\n        int ind = 0;\n        FO(j,0,m) if (j != i) {\n            assert(1 <= v[j] && v[j] <= 8);\n            r |= (8-v[j]) << ind;\n            ind += 3;\n        }\n        c[i][r]++;\n        return;\n    }\n    assert(false);\n}\n\nvector<int> mv[100005];\n\n// num at least d apart\nll qu(int i, int d) {\n    vector<int> ov(m);\n    FO(j,0,m) {\n        FO(k,0,m) {\n            if (mv[i][j] != 8) {\n                ov[k] = max(ov[k], d - (mv[i][j] + dst[j+n][k] + 1));\n                ov[k] = min(ov[k],8);\n            }\n        }\n    }\n    ll res = 0;\n    FO(j,0,m) if (ov[j] == 0) {\n        int r = 0;\n        int ind = 0;\n        FO(k,0,m) if (k != j) {\n            int l = ov[k];\n            if (l == 0) l = 1;\n            r |= (8-l) << ind;\n            ind += 3;\n        }\n        res += c[j][r];\n    }\n    for (int j = i-d+1; j <= i+d-1; j++) if (0 <= j && j < n) {\n        bool allgrt = true;\n        FO(k,0,m) allgrt &= mv[j][k] >= ov[k];\n        if (allgrt) res--;\n    }\n    return res;\n}\n\nll cntg(int d) {\n    ll res = 0;\n    FO(i,0,n) res += qu(i, d);\n    assert(res % 2 == 0);\n    return res / 2;\n}\n\nint main() {\n    scanf(\"%d %s\", &n, s);\n    map<char,int> seen;\n    FO(i,0,n) {\n        if (!seen.count(s[i])) {\n            int j = sz(seen);\n            seen[s[i]] = j;\n        }\n        a[i] = seen[s[i]];\n    }\n    m = sz(seen);\n\n    FO(i,0,n) {\n        if (i) u[i].push_back(i-1);\n        if (i+1<n) u[i].push_back(i+1);\n        u[n+a[i]].push_back(i);\n        u[i].push_back(n+a[i]);\n    }\n    FO(i,0,m) clc(i);\n\n    FO(i,0,n) {\n        vector<int> v;\n        FO(j,0,m) {\n            int ldst = dst[i][j];\n            if (ldst >= 8) ldst = 8;\n            v.push_back(ldst);\n        }\n        add(v);\n        mv[i] = v;\n    }\n    FO(i,0,m) {\n        FO(j,0,m-1) {\n            FO(t,0,1<<(3*(m-1))) {\n                if (t & (7 << (j*3))) {\n                    c[i][t] += c[i][t - (1 << (j*3))];\n                }\n            }\n        }\n    }\n    ll lst = 0;\n    FO(i,1,100) {\n        ll nk = cntg(i);\n        if (nk == 0) {\n            printf(\"%d %lld\\n\", i-1, lst);\n            return 0;\n        }\n        lst = nk;\n    }\n}\n\n"], "input": "", "output": "", "tags": ["bitmasks", "graphs"], "dificulty": "3300", "interactive": false}