{
    "link": "https://codeforces.com//contest/274/problem/E",
    "problemId": "2645",
    "problem_idx": "E",
    "shortId": "274E",
    "contest_number": "274",
    "problem_submissions": {
        "C": [
            3158978,
            3161367,
            3160459,
            3161088,
            3162848,
            3162836,
            3165392,
            3165808
        ],
        "D": [
            3157146,
            3154578,
            3158626,
            3159674,
            3155066,
            3154610,
            3154494,
            3162878,
            3155274,
            3154799,
            3156202,
            3154900,
            3156390,
            3156684,
            3157059,
            3155641,
            3157406,
            3158027,
            3156972,
            3156358
        ],
        "B": [
            3152846,
            3152029,
            3153572,
            3152338,
            3153369,
            3152405,
            3153123,
            3152132,
            3152478,
            3153001,
            3152618,
            3151871,
            3152600,
            3152514,
            3153029,
            3154367,
            3152641,
            3154376,
            3154181
        ],
        "A": [
            3151000,
            3150976,
            3151370,
            3151011,
            3151226,
            3150986,
            3151237,
            3151023,
            3151171,
            3151002,
            3150999,
            3152680,
            3151235,
            3150991,
            3151625,
            3151251,
            3169649,
            3151050,
            3151668,
            3151075
        ],
        "E": [
            3179779,
            3170504,
            3166357,
            3166349
        ]
    },
    "name": "E. Mirror Room",
    "statement": "Imagine an grid with some blocked cells. The top left cell in the grid\r\nhas coordinates and the bottom right cell has coordinates . There are\r\nblocked cells in the grid and others are empty. You flash a laser beam\r\nfrom the center of an empty cell in one of the diagonal directions (i.e.\r\nnorth-east, north-west, south-east or south-west). If the beam hits a\r\nblocked cell or the border of the grid it will reflect. The behavior of\r\nthe beam reflection in different situations is depicted in the figure\r\nbelow. After a while the beam enters an infinite cycle. Count the number\r\nof empty cells that the beam goes through at least once. We consider\r\nthat the beam goes through cell if it goes through its center.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<ctime>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<sstream>\n#include<bitset>\n#include<vector>\n#include<string>\n#include<set>\n#include<map>\n#include<queue>\n#include<iomanip>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\ntypedef pair<int,int> pii;\ntypedef pair<ld,ld> pdd;\ntypedef pair<ll,ll> pll;\n\n#define X first\n#define Y second\n\nconst int MaxN=1<<18;\n\nint n,m,k;\nmap<int,set<pii> > a,b;\nset<pii> H;\nmap<pii,set<pii> > u;\npii s,w;\n\nvoid add_point(int x,int y)\n{\n\tpii p(x,y);\n\ta[x+y].insert(p);\n\tb[x-y].insert(p);\n\tH.insert(p);\n}\n\nvoid init()\n{\n\tcin>>n>>m>>k;\n\tfor (int i=0;i<=n+1;++i)\n\t{\n\t\tadd_point(i,0);\n\t\tadd_point(i,m+1);\n\t}\n\tfor (int j=0;j<=m+1;++j)\n\t{\n\t\tadd_point(0,j);\n\t\tadd_point(n+1,j);\n\t}\n\tfor (int i=1;i<=k;++i)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd_point(x,y);\n\t}\n\tstring s;\n\tcin>>::s.X>>::s.Y>>s;\n\tw=pii((s[0]=='N')?-1:1,(s[1]=='W')?-1:1);\n}\n\npii operator - (pii a,pii b)\n{\n\treturn pii(a.X-b.X,a.Y-b.Y);\n}\n\npii operator - (pii a)\n{\n\treturn pii(-a.X,-a.Y);\n}\n\nvector<pii> pa[MaxN],pb[MaxN];\n\nvoid add_line(pii a,pii b)\n{\n\tif (a>b) swap(a,b);\n\tif (a.X+a.Y==b.X+b.Y)\n\t\tpa[a.X+a.Y].push_back(pii(a.X-a.Y+m,b.X-b.Y+m));\n\telse\n\t\tpb[a.X-a.Y+m].push_back(pii(a.X+a.Y,b.X+b.Y));\n}\n\nll ans;\n\nvoid deal(vector<pii> &p)\n{\n\tif (p.empty()) return;\n\tsort(p.begin(),p.end());\n\tvector<pii> v;\n\tpii a=p[0];\n\tfor (int i=1;i<p.size();++i)\n\t{\n\t\tif (p[i].X>a.Y)\n\t\t{\n\t\t\tv.push_back(a);\n\t\t\ta=p[i];\n\t\t}\n\t\telse\n\t\t\ta.Y=max(a.Y,p[i].Y);\n\t}\n\tv.push_back(a);\n\tp=v;\n\tfor (int i=0;i<p.size();++i)\n\t\tans+=(p[i].Y-p[i].X)/2+1;\n}\n\nvoid work()\n{\n\twhile (1)\n\t{\n\t\tset<pii>::iterator it;\n\t\tif (w==pii(-1,1))\n\t\t\tit=--a[s.X+s.Y].upper_bound(s);\n\t\telse if (w==pii(-1,-1))\n\t\t\tit=--b[s.X-s.Y].upper_bound(s);\n\t\telse if (w==pii(1,1))\n\t\t\tit=b[s.X-s.Y].upper_bound(s);\n\t\telse\n\t\t\tit=a[s.X+s.Y].upper_bound(s);\n\t\tadd_line(s,*it-w);\n\t\ts=*it-w;\n\t\tif (!(u[*it].insert(w).Y)) break;\n\t\tint x=H.count(pii(it->X-w.X,it->Y));\n\t\tint y=H.count(pii(it->X,it->Y-w.Y));\n\t\tif (x==y)\n\t\t\tw=-w;\n\t\telse if (x)\n\t\t{\n\t\t\ts.X+=w.X;\n\t\t\tw.Y=-w.Y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ts.Y+=w.Y;\n\t\t\tw.X=-w.X;\n\t\t}\n\t}\n\tfor (int i=1;i<=n+m;++i)\n\t{\n\t\tdeal(pa[i]);\n\t\tdeal(pb[i]);\n\t}\n\tcout<<ans<<endl;\n}\n\nint main()\n{\n\tinit();\n\twork();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Mirror Room.json",
    "editorial_link": "https://codeforces.com//blog/entry/6759",
    "editorial": "The blocked cells can make lots of complicated patterns. So it\u0092s obvious that the solution in includes simulating the path the laser beam goes. But the dimensions of the gird are large and the beam might travel a long path before entering a loop. So na\u00efve simulation will surely time out (See note!).\n\nIt\u0092s kind of obvious that the beam finally comes back to its initial position and direction. Here were going to prove that the maximum number of times the beam might reflect until it reaches its first state is O(n?+?m?+?k). Consider an empty grid, It has O(n?+?m) maximal empty diagonal segments. When we block a cell, the two diagonal segments which pass this cell split. So the number of maximal empty diagonal segments increases by two. There for there are O(n?+?m?+?k) of these segments. Also If you look at the behavior of the beam it passes some of the segments one after another. So if you simulate the beam, it reflects O(n?+?m?+?k) times. Instead of na\u00efve simulation we can find the next position the beam reflects.\n\nNow we\u0092re going to prove that no cell will be visited twice. A cell gets visited twice in the cycle if we pass it in both NE-SW direction and NW-SE direction. Consider the grid colored in black and white like a chessboard. There are two types of diagonal segments the NE-SW ones and NW-SE ones (property 1). At each reflection we alternate between these two. Also there are two types of segments in another way, black segments and white segments (property 2). As you can see each time one of the properties changes the other one also changes. As a result we\u0092ll never pass a black cell in both directions, and the same is for a white cell."
}