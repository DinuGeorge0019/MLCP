{
    "link": "https://codeforces.com//contest/827/problem/A",
    "problemId": "113845",
    "problem_idx": "A",
    "shortId": "827A",
    "contest_number": "827",
    "problem_submissions": {
        "F": [
            28447535,
            28704912
        ],
        "B": [
            28442493,
            28434829,
            28432891,
            28434941,
            28434124,
            28440743,
            28434219,
            28434038,
            28435758,
            28436170,
            28442340,
            28436191,
            28436588,
            28434003,
            28436389,
            28434757,
            28437055,
            28448594,
            28438989
        ],
        "C": [
            28440487,
            28438660,
            28438441,
            28438938,
            28437666,
            28446435,
            28437809,
            28439569,
            28439405,
            28439836,
            28438472,
            28441170,
            28440770,
            28437931,
            28442353,
            28442274,
            28441410,
            28437286,
            28455031,
            28442955
        ],
        "E": [
            28436548,
            28441080,
            28466758,
            28444795,
            28441962,
            28439200,
            28445462,
            28450329,
            28446470,
            28443820,
            28444149,
            28441607,
            28444424,
            28451564,
            28465030,
            28453083,
            28453061,
            28452855,
            28445979,
            28445398,
            28447328,
            28450262,
            28443711,
            28447639
        ],
        "A": [
            28432871,
            28432173,
            28431465,
            28433215,
            28452981,
            28437424,
            28432872,
            28451754,
            28432696,
            28432687,
            28432382,
            28432827,
            28432606,
            28431751,
            28435184,
            28437702,
            28433063,
            28446111,
            28434053
        ],
        "D": [
            28445554,
            28441989,
            28447486,
            28446928,
            28441195,
            28445740,
            28448719,
            28454047,
            28460505,
            28543175,
            28454400,
            28446342,
            28447977,
            29638472,
            28445305,
            28443739
        ]
    },
    "name": "A. String Reconstruction",
    "statement": "Ivan had string consisting of small English letters. However, his friend\r\nJulia decided to make fun of him and hid the string . Ivan preferred\r\nmaking a new string to finding the old one. Ivan knows some information\r\nabout the string . Namely, he remembers, that string occurs in string at\r\nleast times or more, he also remembers exactly positions where the\r\nstring occurs in string : these positions are . He remembers such\r\nstrings .You are to reconstruct string such that it fits all the\r\ninformation Ivan remembers. Strings and string consist of small English\r\nletters only.\r\n",
    "solutions": [
        "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<queue>\n#include<cassert>\n#define PB push_back\n#define MP make_pair\n#define sz(v) (in((v).size()))\n#define forn(i,n) for(in i=0;i<(n);++i)\n#define forv(i,v) forn(i,sz(v))\n#define fors(i,s) for(auto i=(s).begin();i!=(s).end();++i)\n#define all(v) (v).begin(),(v).end()\nusing namespace std;\ntypedef int in;\ntypedef vector<in> VI;\ntypedef vector<VI> VVI;\nset<in> unseen;\nconst in mx=2e6+9;\nchar ans[mx];\nin mxl=0;\nstring t;\nchar tt[mx];\nint main(){\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  forn(i,mx)\n    ans[i]='a';\n  forn(i,mx)\n    unseen.insert(i);\n  in n;\n  scanf(\"%d\",&n);\n  in k,x;\n  set<in>::iterator it,it2;\n  forn(z,n){\n    scanf(\"%s\",tt);\n    t=string(tt);\n    scanf(\"%d\",&k);\n    forn(zz,k){\n      scanf(\"%d\",&x);\n      --x;\n      mxl=max(mxl,x+sz(t));\n      it=unseen.lower_bound(x);\n      while(it!=unseen.end() && *it<x+sz(t)){\n\tit2=it;\n\t++it;\n\tans[*it2]=t[*it2-x];\n\tunseen.erase(it2);\n      }\n    }\n  }\n  ans[mxl]='\\0';\n  printf(\"%s\\n\",ans);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "sortings",
        "strings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. String Reconstruction.json",
    "editorial_link": "https://codeforces.com//blog/entry/53268",
    "editorial": "At first let\u00e2\u0080\u0099s sort all given string by their positions and also\r\ndetermine the length of the answer string.After that fill the answer\r\nstring with letters \"\" because the answer string must be\r\nlexicographically minimal.Let\u00e2\u0080\u0099s use variable the minimal index of letter\r\nin the answer string which did not already processed. After that we need\r\nto iterate through the sorted strings. If the next string ends before we\r\nskip it. In the other case, we need to impose this string to the answer\r\nstring beginning from necessary position and write down all letters\r\nbeginning from or from the beginning of impose (depending on which of\r\nthese values is greater). If the imposing of string ends in position we\r\nneed to make and move to the next string.\r\n"
}