{"link": "https://codeforces.com//contest/607/problem/C", "problemId": "43765", "problem_idx": "C", "shortId": "607C", "contest_number": "607", "problem_submissions": {"E": [14958443, 14961849, 14961838, 14961831, 16737326], "D": [14951724, 14952244, 14950470, 14950039, 14952208, 14949972, 14952659, 14968005, 14967954, 14967922, 14967912, 14967907, 14967903, 14967896, 14967707, 14967669, 14956925, 14956428, 14958812, 14957599, 14953577, 14952372, 14951711, 14957330, 14954653, 14952137, 14951821, 14954577, 14952711], "C": [14947368, 14953869, 14954714, 14954225, 14954959, 14954407, 14957641, 14951200, 14952263, 14949536, 14956671, 14955594, 14955895, 14951583, 14957050], "B": [14944943, 14943843, 14943439, 14944195, 14944079, 14951944, 14944759, 14945484, 14944543, 14945215, 14944778, 14945950, 14944649, 14947158, 14943778, 14944962, 14948034, 14943374, 14945989], "A": [14941938, 14942696, 14942042, 14943122, 14941989, 14950953, 14942232, 14942613, 14942728, 14942057, 14942385, 14946665, 14948612, 14942429, 14941952, 14943906, 14943291, 15059376, 14942040, 14942093]}, "name": "C. Marbles", "statement": "In the spirit of the holidays, Saitama has given Genos two grid paths of\r\nlength (a weird gift even by Saitama\u2019s standards). A grid path is an\r\nordered sequence of neighbouring squares in an infinite grid. Two\r\nsquares are neighbouring if they share a side.One example of a grid path\r\nis . Note that squares in this sequence might be repeated, i.e. path has\r\nself intersections.Movement within a grid path is restricted to adjacent\r\nsquares within the sequence. That is, from the -th square, one can to\r\nthe -th or -th squares of this path. Note that there is only a single\r\nvalid move from the first and last squares of a grid path. Also note,\r\nthat even if there is some -th square of the path that coincides with\r\nthe -th square, only moves to -th and -th squares are available. For\r\nexample, from the second square in the above sequence, one can only move\r\nto either the first or third squares.To ensure that movement is not\r\nambiguous, the two grid paths will not have an alternating sequence of\r\nthree squares. For example, a contiguous subsequence in a valid grid\r\npath.One marble is placed on the first square of each grid path. Genos\r\nwants to get both marbles to the last square of each grid path. However,\r\nthere is a catch. Whenever he moves one marble, the other marble will\r\ncopy its movement if possible. For instance, if one marble moves east,\r\nthen the other marble will and move east as well. By , we mean if moving\r\neast is a valid move, then the marble will move east.Moving north\r\nincreases the second coordinate by , while moving south decreases it by\r\n. Similarly, moving east increases first coordinate by , while moving\r\nwest decreases it.Given these two valid grid paths, Genos wants to know\r\nif it is possible to move both marbles to the ends of their respective\r\npaths. That is, if it is possible to move the marbles such that both\r\nmarbles rest on the last square of their respective paths.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i, a, b) for (int i = (a), _end_ = (b); i < _end_; ++i)\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mp make_pair\n#define x first\n#define y second\n#define pb push_back\n#define SZ(x) (int((x).size()))\n#define ALL(x) (x).begin(), (x).end()\n\ntemplate<typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }\n\ntypedef long long LL;\n\nconst int oo = 0x3f3f3f3f;\n\nconst int maxn = 1000000;\n\nint n;\nchar a[maxn + 5], b[maxn + 5];\nint nxt[maxn + 5];\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tscanf(\"%*d\");\n\tscanf(\"%s%s\", a, b);\n\tn = strlen(a);\n\tREP(i, 0, n)\n\t{\n\t\tif (a[i] == 'N') a[i] = 'S';\n\t\telse if (a[i] == 'S') a[i] = 'N';\n\t\telse if (a[i] == 'E') a[i] = 'W';\n\t\telse if (a[i] == 'W') a[i] = 'E';\n\t}\n\treverse(b, b + n);\n\tnxt[0] = 0, nxt[1] = 0;\n\tint i = 1, j = 0;\n\twhile (i < n)\n\t{\n\t\twhile (j && b[i] != b[j]) j = nxt[j];\n\t\tif (b[i] == b[j]) ++j;\n\t\t++i;\n\t\tnxt[i] = j;\n\t}\n\tint cur = 0;\n\tREP(i, 0, n)\n\t{\n\t\twhile (cur && a[i] != b[cur]) cur = nxt[cur];\n\t\tif (a[i] == b[cur]) ++cur;\n\t}\n\tputs(cur ? \"NO\" : \"YES\");\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["hashing", "strings"], "dificulty": "2500", "interactive": false}