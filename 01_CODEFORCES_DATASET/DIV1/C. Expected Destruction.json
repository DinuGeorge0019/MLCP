{
    "link": "https://codeforces.com//contest/1854/problem/C",
    "problemId": "2119348",
    "problem_idx": "C",
    "shortId": "1854C",
    "contest_number": "1854",
    "problem_submissions": {
        "F": [
            216373971,
            217354172,
            217397292
        ],
        "D": [
            216310150,
            216289199,
            216321960,
            216339370,
            216308614,
            216330486,
            216327260,
            216330943,
            216339614,
            216349670,
            216345647,
            216345106,
            224815766,
            216547574,
            216366587
        ],
        "E": [
            216288237,
            216300028,
            216302036,
            216268441,
            216334493,
            216313354,
            216348664,
            216267007,
            216336955,
            216296297,
            216300153,
            216312130,
            216307051,
            216317337,
            216275749,
            216320776,
            216324267,
            216319909,
            216313856
        ],
        "C": [
            216273942,
            216261365,
            216266654,
            216275371,
            216264423,
            216276518,
            216281959,
            216283401,
            216256269,
            216270575,
            216274010,
            216274561,
            216269163,
            216301579,
            216282188,
            216295268,
            216271804,
            216301995
        ],
        "A2": [
            216264333,
            216379126,
            216379111,
            216318393,
            216275667,
            216295850,
            216251357,
            216257398,
            216276514,
            216268588,
            216307226,
            216280080,
            216286828,
            216278270,
            216337810,
            216308708,
            216280874,
            216295056,
            216275828
        ],
        "A1": [
            216258579,
            216252405,
            216255683,
            216241030,
            216251535,
            216248642,
            216276758,
            216268768,
            216282006,
            216259868,
            216249337,
            216287041,
            216244661,
            216249684,
            216243548,
            216258618,
            216238489,
            216275974
        ],
        "B": [
            216248516,
            216256912,
            216241500,
            216256089,
            216258617,
            216267337,
            216293058,
            216272552,
            216268356,
            216253180,
            216258044,
            216262545,
            216263544,
            216287092,
            216255748,
            216251265,
            216280599,
            216287965
        ]
    },
    "name": "C. Expected Destruction",
    "statement": "You have a set S of n distinct integers between 1 and m.Each second you\r\ndo the following steps: Pick an element x in S uniformly at random.\r\nRemove x from S. If x+1\r\nleq m and x+1 is not in S, add x+1 to S. What is the expected number of\r\nseconds until S is empty?Output the answer modulo 1\r\n,000\r\n,000\r\n,007.Formally, let P = 1\r\n,000\r\n,000\r\n,007. It can be shown that the answer can be expressed as an irreducible\r\nfraction\r\nfrac{a}{b}, where a and b are integers and b\r\nnot\r\nequiv 0\r\npmod{P}. Output the integer equal to a\r\ncdot b^{-1}\r\nbmod P. In other words, output an integer z such that 0\r\nle z < P and z\r\ncdot b\r\nequiv a\r\npmod{P}.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC target (\"avx2\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=507;\nconst ll mod=1000*1000*1000+7;\nconst ll o2=(mod+1)/2;\n\nll inv(ll v)\n{\n\tif (v<=1)\n\t\treturn v;\n\treturn inv(mod%v)*(mod-mod/v)%mod;\n}\n\nint n, m;\n\nint tab[nax];\n\nll dp[nax][nax];\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i=1; i<=n; i++)\n\t\tscanf(\"%d\", &tab[i]);\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tfor (int j=0; j<i; j++)\n\t\t{\n\t\t\tif (!j)\n\t\t\t{\n\t\t\t\tdp[i][j]=i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdp[i][j]=(dp[i-1][j]+1+dp[i][j-1])*o2%mod;\n\t\t\t}\n\t\t}\n\t}\n\tll wyn=m+1-tab[n];\n\tfor (int i=1; i<n; i++)\n\t{\n\t\tint a=m+1-tab[i];\n\t\tint b=m+1-tab[i+1];\n\t\twyn+=dp[a][b];\n\t}\n\twyn%=mod;\n\tprintf(\"%lld\\n\", wyn);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math",
        "probabilities"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Expected Destruction.json",
    "editorial_link": "https://codeforces.com//blog/entry/118540",
    "editorial": "Solution Consider an grid, where the -th row initially contains a block\nin column , and row contains a block in column . The set is empty if all\nthe blocks are in column ; i.e., if every block has reached the block in\nthe following row. Every \"connected component\" of blocks (except the\nlast one) represents an element in the set. These components move\nequiprobably. Letâs calculate the expected time required for the block\nin row to \"reach\" the block in row . If you consider a single pair of\nblocks, every block moves with probability , unless block is in column\n.So, you can calculate expected number of moves of the block before it\nreaches the block , if the block is in position and the block is in\nposition .The base cases are (because only the block can move) and\n(because block has already reached block ). In the other cases, .By\nlinearity of expectation, the answer is the sum of .Complexity:\n",
    "hint": [
        "Hint 1 Consider blocks in positions . After how much time does block disappear? It may be convenient to put a fake \"static\" block in position .",
        "Hint 2 Block disappears when it reaches block . But what if block disappears before block ?",
        "Hint 3 From the perspective of block , it's convenient to assume that block never disappears: when it touches another block , it's that disappears.",
        "Hint 4 When you consider the pair of blocks , the other blocks don't really matter, and you can use linearity of expectation to calculate the contribution of each pair independently. A reasonable interpretation is given by considering an grid, where the -th row initially contains a block in column . Then, you are calculating the expected time required for the blocks to have another block immediately below them (in the same column).",
        "Hint 5 Blocks both move with probability , unless block has reached position .",
        "Hint 6 expected number of moves of block before it disappears, if the block is in position and the block is in position ."
    ]
}