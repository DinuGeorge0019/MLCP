{
    "link": "https://codeforces.com//contest/930/problem/D",
    "problemId": "162261",
    "problem_idx": "D",
    "shortId": "930D",
    "contest_number": "930",
    "problem_submissions": {
        "E": [
            35937874,
            35940246,
            35942003,
            35941857,
            35942922,
            35943711,
            35940428,
            35939130,
            35941409,
            35945119,
            35945455,
            35938266,
            35942264,
            35942725
        ],
        "D": [
            35934631,
            35937311,
            35938039,
            35939179,
            35937578,
            35934166,
            35942235,
            35945157,
            35944906,
            35941913,
            35941573,
            35937960,
            35938844,
            35940488,
            35939332,
            35939670
        ],
        "C": [
            35931048,
            35931464,
            35931854,
            35931257,
            35932262,
            35938659,
            35933325,
            35930949,
            35933516,
            35933919,
            35936875,
            35931415,
            35932526,
            35933702,
            35934204,
            35934502,
            35932728,
            35934206,
            35934527
        ],
        "B": [
            35928663,
            35929193,
            35929409,
            35928730,
            35929849,
            35928584,
            35929521,
            35928824,
            35930726,
            35930401,
            35933251,
            35929420,
            35929927,
            35930360,
            35932014,
            35931682,
            35930124,
            35931864,
            35931720
        ],
        "A": [
            35926805,
            35926962,
            35927064,
            35926854,
            35927078,
            35929726,
            35930445,
            35926856,
            35927823,
            35927432,
            35928757,
            35926924,
            35926883,
            35927329,
            35927301,
            35927988,
            35927191,
            35927741,
            35928171
        ]
    },
    "name": "D. Game with Tokens",
    "statement": "Consider the following game for two players. There is one white token\r\nand some number of black tokens. Each token is placed on a plane in a\r\npoint with integer coordinates and .The players take turn making moves,\r\nwhite starts. On each turn, a player moves tokens of their color by to\r\nup, down, left or right. Black player can choose directions for each\r\ntoken independently.After a turn of the white player the white token can\r\nnot be in a point where a black token is located. There are no other\r\nconstraints on locations of the tokens: positions of black tokens can\r\ncoincide, after a turn of the black player and initially the white token\r\ncan be in the same point with some black point. If at some moment the\r\nwhite player can\u2019t make a move, he loses. If the white player makes\r\nmoves, he wins.You are to solve the following problem. You are given\r\ninitial positions of all black tokens. It is guaranteed that initially\r\nall these positions are distinct. In how many places can the white token\r\nbe located initially so that if both players play optimally, the black\r\nplayer wins?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing ll = long long;\nusing ld = long double;\nusing ull = unsigned long long;\nusing namespace std;\n\nconst int MAXN = 500001;\nconst int C = 220000;\n\nll ans = 0;\nint umn[MAXN], umx[MAXN];\nint dmn[MAXN], dmx[MAXN];\n\nstruct Val {\n    vector<int> a[MAXN];\n\n    void calc(int md) {\n        umn[0] = MAXN;\n        umx[0] = -MAXN;\n        for (int i = 1; i < MAXN; ++i) {\n\n            umn[i] = umn[i - 1], umx[i] = umx[i - 1];\n            for (int y : a[i]) {\n                umn[i] = min(umn[i], y);\n            }\n\n            for (int y : a[i]) {\n                umx[i] = max(umx[i], y);\n            }\n        }\n\n        dmn[MAXN - 1] = MAXN;\n        dmx[MAXN - 1] = -MAXN;\n        for (int i = MAXN - 2; i >= 0; --i) {\n            dmn[i] = dmn[i + 1], dmx[i] = dmx[i + 1];\n            for (int y : a[i]) {\n                dmn[i] = min(dmn[i], y);\n            }\n\n            for (int y : a[i]) {\n                dmx[i] = max(dmx[i], y);\n            }\n        }\n\n        for (int i = 1; i < MAXN; ++i) {\n            if (i % 2 != md) {\n                continue;\n            }\n\n            int l = max(dmn[i + 1], umn[i - 1]) + 1;\n            int r = min(dmx[i + 1], umx[i - 1]) - 1;\n            if (((l + C) % 2) != (i % 2)) {\n                ++l;\n            }\n\n            if (((r + C) % 2) != (i % 2)) {\n                --r;\n            }\n\n            int ad = (r - l);\n            if (ad >= 0) {\n                ans += max(0, ad / 2 + 1);\n            }\n        }\n    }\n};\n\nVal v[2];\n\nint main() {\n#ifdef BZ\n    freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n#endif\n    ios_base::sync_with_stdio(false); cout.setf(ios::fixed); cout.precision(20); cout.tie(nullptr); cin.tie(nullptr);\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n        int x, y;\n        cin >> x >> y;\n\n        v[(x + y + C) % 2].a[x + y + C].push_back(x - y);\n    }\n\n    v[0].calc(1);\n    v[1].calc(0);\n\n    cout << ans << \"\\n\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "games",
        "implementation"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Game with Tokens.json",
    "editorial_link": "https://codeforces.com//blog/entry/58177",
    "editorial": "Note that if black and white chip are placed in the beginning in points {x,?y} with the same parity of x?+?y then black chip can't be on the manhattan distance 1 from white chip before white's move. So black chip can't block white chip and can't somehow affect the game. We can solve the problem independently for black chips with odd x?+?y, white chip with even x?+?y and for black chips with even x?+?y, white chip with odd x?+?y.\n\nNote that we can solve the problem for black chips with even x?+?y if we move all of them on 1 upward and then solve the problem for odd x?+?y. Let's now consider only black chips with odd x?+?y.\n\nLook at the image. If black chip is placed in black point then it can stop white chip placed in red, blue, yellow, green points if it will move up, down, left, right, respectively (i.e. white point can't make infinite number of move in these directions whatever moves it will make).\n\nNote that one black chip can stop white chip only in one or zero directions. If there are four black chips that can stop white chip in different directions then black will win. Else white chip can move in some direction infinitely and white will win.\n\nSo, every black chip generates four angles of different types. If point {x,?y} is contained in intersection of four angles of different types and x?+?y is even then we should count this point in answer.\n\nLet's substitute every point {x,?y} to point {x?+?y,?x?-?y}. There are still four types of angles but now every coordinate of white chip must be even number. In particular, the first image will look like this:\n\nLet's leave only points with even coordinates and divide every coordinate by two. Still every black chip generates four angles, white chip must be in intersection of four angles of different types but now there are no restrictions about parity of anything.\n\nHow to count points in intersection of four angles of different types effectively? Find for each type of angles and for each x-coordinate half-interval of y-coordinates such that every point in this half-interval will be in some angle of current type. If we can find these half-intervals then we can find for every x-coordinate length of intersections of four half-intervals and answer will be equal to sum of these lengths.\n\nLet's consider angles of only one type because for other types we can do something symmetric. Let's these angles will have sides directed upward and rightward. Then for each x-coordinate half-interval is [Lx,??) where Lx is minimal y-coordinate of vertices of angles which aren't placed to the right from x. So we can sort all vertices by x and then write some easy scanline."
}