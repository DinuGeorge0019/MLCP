{"link": "https://codeforces.com//contest/121/problem/C", "problemId": "644", "problem_idx": "C", "shortId": "121C", "contest_number": "121", "problem_submissions": {"E": [813184, 803481, 804722, 807180, 805935, 810990, 806927, 805358, 806319, 806698, 840501, 806868, 805056, 812302, 812293, 806675, 806432, 806020, 808900, 807365], "D": [805974, 806976, 804593, 807857, 805817, 819735, 813011, 812998, 837217, 803664, 808156, 805706, 805598], "C": [802677, 802018, 801698, 801546, 802560, 819807, 803535, 802530, 801865, 801880, 802443, 803919, 803381, 804324, 802973, 804478, 802405, 803458], "B": [801179, 800708, 801605, 800499, 800562, 802015, 800515, 800124, 800949, 800846, 801743, 801824, 801868, 801182, 802657, 801227, 800781], "A": [799835, 799318, 799152, 799351, 799213, 800618, 799387, 799038, 799161, 799506, 799375, 800196, 800336, 799657, 799505, 799863, 799637]}, "name": "C. Lucky Permutation", "statement": "One day Petya dreamt of a lexicographically -th permutation of integers\r\nfrom to . Determine how many lucky numbers in the permutation are\r\nlocated on the positions whose indexes are also lucky numbers.\r\n", "solutions": ["#include <algorithm>\n#include <iostream>\n#include <assert.h>\n#include <sstream>\n#include <complex>\n#include <numeric>\n#include <cstring>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <queue>\n#include <cmath>\n#include <map>\n#include <set>\n\nusing namespace std;\n\n#define all(a)\t\t\t(a).begin(), (a).end()\n#define sz(a)\t\t\tint((a).size())\n#define FOR(i, a, b)\tfor (int i(a); i < b; ++i)\n#define REP(i, n)\t\tFOR(i, 0, n)\n#define UN(v)\t\t\tsort(all(v)), (v).erase(unique((v).begin(), (v).end()), (v).end())\n#define CL(a, b)\t\tmemset(a, b, sizeof a)\n#define pb\t\t\t\tpush_back\n#define X\t\t\t\tfirst\n#define Y\t\t\t\tsecond\n\ntypedef long long ll;\ntypedef vector <int> vi;\ntypedef pair <int, int> pii;\n\nint n, k;\nint p[13];\n\nbool islucky(int x) {\n\treturn x ? (x % 10 == 4 || x % 10 == 7) && islucky(x / 10) : true;\n}\n\nint go(ll x) {\n\tif (x > n) return 0;\n\tint res = go(x * 10 + 4) + go(x * 10 + 7);\n\tif (x >= n - 12) {\n\t\tres += islucky(n - 12 + p[x - (n - 12)]);\n\t} else {\n\t\t++res;\n\t}\n\treturn res;\n}\n\nint main() {\n\tcin >> n >> k;\n\tREP (i, 13) p[i] = i;\n\t--k;\n\tif (n <= 13) {\n\t\tll t = 1;\n\t\tREP (i, n) t *= i + 1;\n\t\tif (k >= t) {\n\t\t\tputs(\"-1\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor (int i = 12; i >= 0; --i) {\n\t\tsort(p, p + i + 1);\n\t\tll z = 1;\n\t\tREP (j, i) z *= j + 1;\n\t\tswap(p[i], p[k / z]);\n\t\tk %= z;\n\t}\n\treverse(p, p + 13);\n\tcout << go(4) + go(7) << endl;\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "combinatorics", "number theory"], "dificulty": "1900", "interactive": false}