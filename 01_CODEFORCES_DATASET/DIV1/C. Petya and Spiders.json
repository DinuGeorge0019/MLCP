{"link": "https://codeforces.com//contest/111/problem/C", "problemId": "584", "problem_idx": "C", "shortId": "111C", "contest_number": "111", "problem_submissions": {"D": [662767, 662482, 660714, 662088, 661622, 661475, 663213, 662999, 665139, 663475, 663580, 663102, 662156, 662688, 662062, 663791, 664321, 664054, 663134], "C": [661017, 660823, 662136, 659868, 659913, 660005, 659563, 660967, 661428, 660790, 660974, 661489, 661410, 663647, 661449, 661359, 661322, 659593], "B": [658508, 658276, 660241, 658067, 658492, 662345, 658611, 659356, 658769, 658223, 658207, 662686, 663419, 662647, 660010, 659052, 661996, 664110], "A": [657728, 657568, 657631, 658791, 657382, 657971, 657490, 657859, 657378, 659022, 657338, 658706, 657670, 657472, 659525, 659462, 664166]}, "name": "C. Petya and Spiders", "statement": "Little Petya loves training spiders. Petya has a board in size. Each\r\ncell of the board initially has a spider sitting on it. After one second\r\nPetya chooses a certain action for each spider, and all of them humbly\r\nperform its commands. There are 5 possible commands: to stay idle or to\r\nmove from current cell to some of the four side-neighboring cells (that\r\nis, one command for each of the four possible directions). Petya gives\r\nthe commands so that no spider leaves the field. It is allowed for\r\nspiders to pass through each other when they crawl towards each other in\r\nopposite directions. All spiders crawl simultaneously and several\r\nspiders may end up in one cell. Petya wants to know the maximum possible\r\nnumber of spider-free cells after one second.\r\n", "solutions": ["// Authored by dolphinigle\n// CodeForces 83\n// 3 Sep 2011\n\n#include <vector>\n#include <list>\n#include <map>\n#include <set>\n\n#include <queue>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstring>\n\n#define FORN(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define DEBUG(x) cout << '>' << #x << ':' << x << '\\n';\n\n#define REP(X,Y,Z) for (int (X) = (Y);(X) < (Z);++(X))\n#define RESET(Z,Y) memset(Z,Y,sizeof(Z))\n\n#define SZ(Z) ((int)Z.size())\n#define ALL(W) W.begin(), W.end()\n#define PB push_back\n\n#define MP make_pair\n#define A first\n#define B second\n\n#define INF 1023123123\n#define EPS 1e-11\n\n#define MX(Z,Y) Z = max((Z),(Y))\n#define MN(X,Y) X = min((X),(Y))\n\n#define FORIT(X,Y) for(typeof((Y).begin()) X = (Y).begin();X!=(Y).end();X++)\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef double db;\ntypedef vector<int> vint;\ntypedef vector<ll> vll;\n\nint dp[45][1 << 6][1 << 6];\nint row, col;\n\nint Solve(int nowcol, int up, int now) {\n  if (dp[nowcol][up][now] != -1) return dp[nowcol][up][now];\n  int& alias = dp[nowcol][up][now];\n  if (nowcol == col-1) {\n    // we're at the bottom row\n    // we have to check it's covered, otherwise we return some huge negative value.\n    for (int j = 0; j < row; ++j) {\n      int ok = 0;\n      for (int k = -1; k < 2; ++k) {\n        int c = j+k;\n        if (c < 0 || c >= row) continue;\n        if (now & (1 << c)) {\n          ok = 1;\n          break;\n        }\n      }\n      if (up & (1 << j)) ok = 1;\n      if (!ok) {\n        return alias = -INF;\n      }\n    }\n    alias = 0;\n    FORN(j, row) if (!(now & (1 << j))) ++alias;\n    return alias;\n  } else {\n    alias = -INF;\n    FORN(mask, (1 << row)) {\n      int maskok = 1;\n      for (int r = 0; r < row; ++r) {\n        int ok = 0;\n        for (int k = -1; k < 2; ++k) {\n          int rr = r + k;\n          if (rr < 0 || rr >= row) continue;\n          if ((now & (1 << rr))) {\n            ok = 1;\n            break;\n          }\n        }\n        if (up & (1 << r)) ok = 1;\n        if (mask & (1 << r)) ok = 1;\n        if (!ok) {\n          maskok = 0;\n          break;\n        }\n      }\n      if (!maskok) continue;\n      int jml = Solve(nowcol+1, now, mask);\n      for (int r = 0; r < row; ++r) if (!(now & (1 << r))) ++jml;\n      MX(alias, jml);\n    }\n    return alias;\n  }\n}\n\nint main() {\n\n  cin >> row >> col;\n\n  if (row > col) swap(row, col);\n  // row <= 6;\n  FORN(i, 45) FORN(j, (1 << 6)) FORN(k, (1 << 6)) dp[i][j][k] = -1;\n  int ret = -INF;\n  FORN(i, (1 << row)) MX(ret, Solve(0, 0, i));\n  cout << ret << endl;\n\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["bitmasks", "dp", "dsu"], "dificulty": "2100", "interactive": false}