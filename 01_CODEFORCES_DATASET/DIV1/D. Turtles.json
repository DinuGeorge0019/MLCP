{
    "link": "https://codeforces.com//contest/348/problem/D",
    "problemId": "3554",
    "problem_idx": "D",
    "shortId": "348D",
    "contest_number": "348",
    "problem_submissions": {
        "C": [
            4588342,
            4590159,
            4593135,
            4588912,
            4585853,
            4589632,
            4585524,
            4586580,
            4585883,
            4581239,
            4588365,
            4618235
        ],
        "B": [
            4580097,
            4582356,
            4579942,
            4582963,
            4589468,
            4587659,
            4577354,
            4585315,
            4580326,
            4582274,
            4579794,
            4606814,
            4580277,
            4584510,
            4582530,
            4581233,
            4588037,
            4582260,
            4589608
        ],
        "A": [
            4576873,
            4574641,
            4574230,
            4576431,
            4576985,
            4585961,
            4574860,
            4576105,
            4577005,
            4576961,
            4574398,
            4574642,
            4577358,
            4575644,
            4582569,
            4583556,
            4575731,
            4575526
        ],
        "D": [
            4576020,
            4578123,
            4580839,
            4584931,
            4582728,
            4580253,
            4592562,
            4587185,
            4588035,
            4587652,
            4587737,
            4590796,
            4582015
        ],
        "E": [
            4583454,
            4855776,
            4616595,
            4820950,
            4618329
        ]
    },
    "name": "D. Turtles",
    "statement": "You’ve got a table of size . We’ll consider the table rows numbered from\r\ntop to bottom 1 through , and the columns numbered from left to right 1\r\nthrough . Then we’ll denote the cell in row and column as .Initially\r\ncell contains two similar turtles. Both turtles want to get to cell .\r\nSome cells of the table have obstacles but it is guaranteed that there\r\naren’t any obstacles in the upper left and lower right corner. A turtle\r\n(one or the other) can go from cell to one of two cells and , as long as\r\nthe required cell doesn’t contain an obstacle. The turtles have had an\r\nargument so they don’t want to have any chance of meeting each other\r\nalong the way. Help them find the number of ways in which they can go\r\nfrom cell to cell .More formally, find the number of pairs of\r\nnon-intersecting ways from cell to cell modulo . Two ways are called\r\nnon-intersecting if they have exactly two common points the starting\r\npoint and the final point.\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <bitset>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\ntypedef long long ll;\n#define MOD 1000000007\n\nint X,Y;\nchar a[3010][3010];\nint dp[3010][3010];\n\nll func(int sx, int sy, int gx, int gy){\n    int i,j;\n    \n    REP(i,X) REP(j,Y) dp[i][j] = 0;\n    if(a[sx][sy] != '#') dp[sx][sy] = 1;\n    for(i=sx;i<X;i++) for(j=sy;j<Y;j++) if(dp[i][j] > 0){\n        if(i+1 < X && a[i+1][j] != '#'){\n            dp[i+1][j] += dp[i][j];\n            if(dp[i+1][j] >= MOD) dp[i+1][j] -= MOD;\n        }\n        if(j+1 < Y && a[i][j+1] != '#'){\n            dp[i][j+1] += dp[i][j];\n            if(dp[i][j+1] >= MOD) dp[i][j+1] -= MOD;\n        }\n    }\n    \n    return dp[gx][gy];\n}\n\nint main(void){\n    int i,j;\n    \n    cin >> X >> Y;\n    REP(i,X) scanf(\"%s\", a[i]);\n    \n    ll A = func(0, 1, X-2, Y-1);\n    ll B = func(0, 1, X-1, Y-2);\n    ll C = func(1, 0, X-2, Y-1);\n    ll D = func(1, 0, X-1, Y-2);\n    ll ans = ((A * D - B * C) % MOD + MOD) % MOD;\n    cout << ans << endl;\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "matrices"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Turtles.json",
    "editorial_link": "https://codeforces.com//blog/entry/9031",
    "editorial": "In the problem youâre asked to find the number of pairs of\r\nnon-intersecting paths between left upper and right lower corners of the\r\ngrid. You can use following lemma for that. Thanks to rng_58 for the\r\nlink. More precisely, considering our problem, this lemma states that\r\ngiven sets of initial and final points, the answer is equal to the\r\nfollowing determinant: Finally we need to decide what sets of initial\r\nand final points we choose. You can take and in order to make paths\r\nnon-intersecting even in 2 points.\r\n",
    "hint": []
}