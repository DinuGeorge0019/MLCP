{
    "link": "https://codeforces.com//contest/1129/problem/B",
    "problemId": "303018",
    "problem_idx": "B",
    "shortId": "1129B",
    "contest_number": "1129",
    "problem_submissions": {
        "D": [
            50457140,
            50468228,
            50468213,
            50452551,
            50784588,
            50784524,
            50784516,
            50784486,
            50455866,
            50463030,
            50451241,
            50455843,
            50456518,
            50444260,
            50455126,
            50471374,
            50469822,
            50469757,
            50469734,
            50469338,
            50469151,
            50468662,
            50468322,
            50468273,
            50465415,
            50464634,
            50455747,
            50457843,
            50458250,
            50464059,
            50449299,
            50457330
        ],
        "E": [
            50451183,
            50458483,
            50460101,
            50455688,
            50458301,
            75936467,
            50458791
        ],
        "C": [
            50447279,
            50446245,
            50449561,
            50445538,
            50440385,
            50445043,
            50447738,
            50448032,
            50454787,
            50450606,
            50457517,
            58851047,
            58850895,
            50459942,
            50451465,
            50454057,
            50448457,
            50449663
        ],
        "B": [
            50443936,
            50443531,
            50442156,
            50441155,
            50445396,
            50439298,
            50442768,
            50443504,
            50459278,
            50443656,
            50448178,
            50451750,
            50447513,
            50459190,
            50456796,
            50442875,
            50451493
        ],
        "A1": [
            50438306,
            50436838,
            50435800,
            50454577,
            50434391,
            50434469,
            50436959,
            50437853,
            50449686,
            50439524,
            50436300,
            50436664,
            50460719,
            50444960,
            50438530,
            50438635,
            50437445
        ],
        "A2": [
            50438193,
            50437084,
            50435385,
            50454632,
            50434194,
            50434343,
            50437228,
            50438028,
            50449587,
            50439649,
            50436143,
            50436524,
            50460819,
            50444992,
            50438364,
            50437253,
            50437622
        ]
    },
    "name": "B. Wrong Answer",
    "statement": "Consider the following problem: given an array a containing n integers\r\n(indexed from 0 to n-1), find\r\nmax\r\nlimits_{0\r\nleq l\r\nleq r\r\nleq n-1}\r\nsum\r\nlimits_{l\r\nleq i\r\nleq r} (r-l+1)\r\ncdot a_i. In this problem, 1\r\nleq n\r\nleq 2\r\n,000 and |a_i|\r\nleq 10^6.In an attempt to solve the problem described, Alice quickly\r\ncame up with a blazing-fast greedy algorithm and coded it. Her\r\nimplementation in pseudocode is as follows: find_answer(n, a) # Assumes\r\nn is an integer between 1 and 2000, inclusive # Assumes a is a list\r\ncontaining n integers: a[0], a[1], ..., a[n-1] res = 0 cur = 0 k = -1 i\r\n= 0 i = n-1 cur = cur + a[i] cur < 0 cur = 0 k = i res = max(res,\r\n(i-k)*cur) resAlso, as you can see, Alice’s idea is not entirely\r\ncorrect. For example, suppose n = 4 and a = [6, -8, 7, -42]. Then, would\r\nreturn 7, but the correct answer is 3\r\ncdot (6-8+7) = 15.You told Alice that her solution is incorrect, but she\r\ndid not believe what you said.Given an integer k, you are to find any\r\nsequence a of n integers such that the correct answer and the answer\r\nproduced by Alice’s algorithm differ by exactly k. Note that although\r\nthe choice of n and the content of the sequence is yours, you must still\r\nfollow the constraints earlier given: that 1\r\nleq n\r\nleq 2\r\n,000 and that the absolute value of each element does not exceed 10^6.\r\nIf there is no such sequence, determine so.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\n#define PB push_back\n#define MP make_pair\n#define LL long long\n#define int LL\n#define FOR(i,a,b) for(int i = (a); i <= (b); i++)\n#define RE(i,n) FOR(i,1,n)\n#define REP(i,n) FOR(i,0,(int)(n)-1)\n#define R(i,n) REP(i,n)\n#define VI vector<int>\n#define PII pair<int,int>\n#define LD long double\n#define FI first\n#define SE second\n#define st FI\n#define nd SE\n#define ALL(x) (x).begin(), (x).end()\n#define SZ(x) ((int)(x).size())\n\n#define unordered_map __fast_unordered_map\ntemplate<class Key, class Value, class Hash = std::hash<Key>>\nusing unordered_map = __gnu_pbds::gp_hash_table<Key, Value, Hash>;\n\ntemplate<class C> void mini(C &a4, C b4) { a4 = min(a4, b4); }\ntemplate<class C> void maxi(C &a4, C b4) { a4 = max(a4, b4); }\n\ntemplate<class TH> void _dbg(const char *sdbg, TH h){ cerr<<sdbg<<'='<<h<<endl; }\ntemplate<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a) {\n  while(*sdbg!=',')cerr<<*sdbg++;\n  cerr<<'='<<h<<','; _dbg(sdbg+1, a...);\n}\n\ntemplate<class T> ostream &operator<<(ostream& os, vector<T> V) {\n  os << \"[\"; for (auto vv : V) os << vv << \",\"; return os << \"]\";\n}\ntemplate<class L, class R> ostream &operator<<(ostream &os, pair<L,R> P) {\n  return os << \"(\" << P.st << \",\" << P.nd << \")\";\n}\n\n#ifdef LOCAL\n#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)\n#else\n#define debug(...) (__VA_ARGS__)\n#define cerr if(0)cout\n#endif\n\nvoid CheckAns(VI a, int K) {\n  int res = 0, cur = 0, k = -1;\n  int n = SZ(a);\n  for (int i = 0; i < n; ++i) {\n    cur += a[i];\n    if (cur < 0) { cur = 0; k = i; }\n    maxi(res, (i - k) * cur);\n  }\n\n  int my_res = 0;\n  for (int L = 0; L < n; ++L) {\n    LL s = 0;\n    for (int R = L; R < n; ++R) {\n      s += a[R];\n      maxi(my_res, s * (R - L + 1));\n    }\n  }\n\n  debug(my_res, res);\n\n  assert(my_res - res == K);\n  cout << SZ(a) << \"\\n\";\n  for (int v : a) { cout << v << \" \"; }\n  cout << \"\\n\";\n}\n\nint32_t main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(11);\n  cerr << fixed << setprecision(6);\n\n  int K;\n  cin >> K;\n  const int M = 1e6;\n\n  if (K == 1) {\n    VI ans{1, -2, 2};\n    CheckAns(ans, K);\n    return 0;\n  }\n  if (K <= 5) {\n    VI ans(2 * K);\n    ans[2 * K - 2] = -(K - 1);\n    ans[2 * K - 1] = K;\n    debug(ans);\n    CheckAns(ans, K);\n    return 0;\n  }\n\n  for (int n = 4;; ++n) {\n    int a = 1;\n    while ((K + a) % n != 0) { ++a; }\n\n    while (a <= M - 1) {\n      LL b = (K + a) / n + 2;\n      if (0 < b && b <= a) {\n        VI ans(n);\n        ans[n - 4] = -1;\n        ans[n - 3] = a;\n        ans[n - 2] = -(a + 1);\n        ans[n - 1] = b;\n        CheckAns(ans, K);\n        debug(a, b, n);\n        return 0;\n      }\n      a += n;\n    }\n  }\n\n  assert(false);\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Wrong Answer.json",
    "editorial_link": "https://codeforces.com/blog/entry/65520",
    "editorial": "Suppose and for each . Let .Assume also that .It is easy to see that\r\nAliceâs algorithm produces as the answer. Meanwhile, there are two\r\npossible correct answers: either or , whichever is greater.Assume\r\nfurther that . The correct answer for this array is then . The\r\ndifference between these two results is .Now, we can easily create array\r\ngreedily so that .The time complexity is .\r\n",
    "hint": []
}