{"link": "https://codeforces.com//contest/504/problem/E", "problemId": "20651", "problem_idx": "E", "shortId": "504E", "contest_number": "504", "problem_submissions": {"D": [9413857, 9415317, 9414618, 9414335, 9414712, 9421240, 9415227, 9413052, 9413088, 9412895], "C": [9411735, 9413692, 9412956, 9412560, 9412053, 9410886, 9412226, 9412435, 9412519, 9412154, 9424712], "B": [9410465, 9409352, 9409933, 9410329, 9408364, 9410523, 9413452, 9410100, 9409772, 9409410, 9413230, 9409855, 9410114, 9410231, 9410054], "A": [9407864, 9408933, 9408565, 9408075, 9409262, 9408270, 9407763, 9408138, 9407931, 9407399, 9408250, 9407650, 9407865, 9407661, 9408743], "E": [9443621, 9411256, 9413318, 9421624, 9456035, 9420369, 9420367]}, "name": "E. Misha and LCP on Tree", "statement": "Misha has a tree with characters written on the vertices. He can choose\r\ntwo vertices and of this tree and write down characters of vertices\r\nlying on a path from to . We\u2019ll say that such string corresponds to pair\r\n.Misha has queries of type: you are given vertices , , , ; you need to\r\nfind the largest common prefix of the strings that correspond to pairs\r\nand . Your task is to help him.\r\n", "solutions": ["#include <bits/stdc++.h>\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <string>\n#include <cstring>\n#include <sstream>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n\n#define rep(i,n) for(int i=0;i<(int)(n);++i)\n#define iter(a) __typeof(a.begin())\n#define FOR(it,a) for(iter(a)it=a.begin();it!=a.end();++it)\n#define F first\n#define S second\n#define SZ(a) (int)((a).size())\n#define sz(a) SZ(a)\n#define pb(a) push_back(a)\n#define mp(a,b) make_pair(a,b)\n#define ALL(a) (a).begin(),(a).end()\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> PI;\ntypedef unsigned long long ull;\n\n#define PR(...) do{cerr << \"line : \" << __LINE__ << endl; pr(#__VA_ARGS__, __VA_ARGS__);}while(0);\ntemplate<class T>\nvoid pr(const string& name, T t){\n  cerr << name << \": \" << t << endl;\n}\n\ntemplate<typename T, typename ... Types>\nvoid pr(const string& names, T t, Types ... rest) {\n  auto comma_pos = names.find(',');\n  cerr << names.substr(0, comma_pos) << \": \" << t << \", \";\n  auto next_name_pos = names.find_first_not_of(\" \\t\\n\", comma_pos + 1);\n  pr(string(names, next_name_pos), rest ...);\n}\n\ntemplate<class T,class U> ostream& operator<< (ostream& o, const pair<T,U>& v){return o << \"(\" << v.F << \", \" << v.S << \")\";}\ntemplate<class T> ostream& operator<< (ostream& o, const vector<T>& v){o << \"{\";rep(i,SZ(v)) o << (i?\", \":\"\") << v[i];return o << \"}\";}\ntemplate<class T> string to_s(const T& v){ostringstream is;is << v;return is.str();}\n//                 <  ^  >  V\nconst int dx[] = { 0,-1, 0, 1};\nconst int dy[] = {-1, 0, 1, 0};\n#define endl '\\n'\n\n\n\nconst int MAX_N = 3e5+10;\n\nvector<int> G[MAX_N];\nint start[MAX_N];\nint end[MAX_N];\n\nPI upsegpos[MAX_N];\nPI downsegpos[MAX_N];\n\nstring treech;\nint mod = 1000000021;\nconst int MUL = 37;\nll pow37[MAX_N * 2];\n\n\nstruct SqrtLogSeg{\n  vector<int> seg;\n  vector<ll> aseg;\n  vector<ll> bseg;\n  vector<bool> lazy;\n  vector<ll> lazya;\n  vector<ll> lazyb;\n\n  vector<ll> sum;\n  \n  void init(){\n    int n = seg.size();\n    ll t = 0;\n    sum.pb(t);\n    for(int i = 0; i < n; ++i){\n      t = t * MUL + treech[seg[i]];\n      t %= mod;\n      sum.pb(t);\n    }\n  }\n  \n  \n  inline ll query(int l,int r){\n    ll ret = (sum[r] - sum[l] * pow37[r-l] % mod)%mod;\n    if(ret < 0) ret += mod;\n    //assert(ret >=0 && ret < mod);\n    return ret;\n  }\n  \n  inline void lazyup(int k,int cl,int cr){\n    if(lazy[k]){\n      lazy[k] = false;\n      ll a = lazya[k];\n      ll b = lazyb[k];\n      if(cl + 1 < cr){\n        lazy[k*2+1] = true;\n        lazy[k*2+2] = true;\n        \n        lazya[k*2+1] = lazya[k*2+2] = a;\n        lazyb[k*2+1] = lazyb[k*2+2] = b;\n      }\n      \n      int n = cr - cl;\n      // aseg[k] = modpow(a,n,mod);\n      // bseg[k] = a==1?b*n%mod:(aseg[k]+mod-1) * inv(a+mod-1,mod) % mod * b % mod;\n    }\n  }\n  \n  inline PI update(int cl,int cr,int ql,int qr,int k,ll a,ll b){\n    if(cr <= ql || qr <= cl){\n      lazyup(k,cl,cr);\n      //PR(\"update\",cl,cr,ql,qr,aseg[k],bseg[k],a,b);\n      return mp(aseg[k],bseg[k]);\n    }\n    \n    if(ql <= cl && cr <= qr){\n      lazy[k] = true;\n      lazya[k] = a;\n      lazyb[k] = b;      \n      lazyup(k,cl,cr);\n      return mp(aseg[k],bseg[k]);\n    }\n\n    if(lazy[k]){\n      lazy[k] = false;\n      lazy[k*2+1] = lazy[k*2+2] = true;\n      lazya[k*2+1] = lazya[k*2+2] = lazya[k];\n      lazyb[k*2+1] = lazyb[k*2+2] = lazyb[k];\n    }\n    //lazyup(k,cl,cr);\n    int mid = (cl+cr)/2;\n    PI q1 = update(cl,mid,ql,qr,k*2+1,a,b);\n    PI q2 = update(mid,cr,ql,qr,k*2+2,a,b);\n    auto ret = PI(0,0);//qmerge(q1,q2);\n    aseg[k] = ret.F;\n    bseg[k] = ret.S;\n    //PR(\"update\",cl,cr,aseg[k],bseg[k]);\n    return ret;\n  }\n  \n  void update(int l, int r,ll a, ll b){\n    update(0,SZ(seg),l,r,0,a,b);\n  }\n};\n \nSqrtLogSeg segs[MAX_N * 2];\nint segscnt;\n\n\nint subwe[MAX_N];\nint depth[MAX_N];\nint subtdfs(int cv,int p,int d){\n  subwe[cv] = 1;\n  depth[cv] = d;\n  for(auto e : G[cv])\n    if(e != p)\n      subwe[cv] += subtdfs(e, cv, d + 1);\n  return subwe[cv];\n}\n \nint pnodeseg[MAX_N];\nvoid makeheavy(int cv, int p){\n  vector<int> seg;\n  //PR(cv,p);\n  int segp = p;\n  while(true){\n    //cout << cv << endl;\n    auto ne = mp(mp(-1,0),0);\n    for(auto e : G[cv])\n      if(e != p)\n        ne = max(mp(mp(subwe[e],e),e),ne);\n    pnodeseg[cv] =  segp;\n    seg.pb(cv);\n    if(ne.F.F == -1)\n      break;\n    \n    \n    int np = cv;\n    int ncv = ne.F.S;\n    for(auto e : G[cv]){\n      if(e == p) continue;\n      if(e != ne.F.S)\n        makeheavy(e,cv);\n    }\n    p = np;\n    cv = ncv;\n  }\n  \n  \n  for(int i = 0; i < SZ(seg); ++i)\n    downsegpos[seg[i]] = mp(segscnt,i);\n  segs[segscnt++].seg = seg;\n  segs[segscnt-1].init();\n  //PR(cv,seg);\n  reverse(ALL(seg));\n  for(int i = 0; i < SZ(seg); ++i)\n    upsegpos[seg[i]] = mp(segscnt,i);\n  segs[segscnt++].seg = seg;\n  segs[segscnt-1].init();\n}\n\n\ninline vector<pair<int,PI> > getseg(int s, int t){\n  if(s==t){\n    vector<pair<int,PI> > ret;\n    ret.pb(mp(upsegpos[s].F,mp(upsegpos[s].S,upsegpos[s].S)));\n    ret.pb(mp(downsegpos[s].F,mp(downsegpos[s].S,downsegpos[s].S)));\n    return ret;\n  }\n  \n  static vector<pair<int,PI> > sret,tret;\n  sret.clear();\n  tret.clear();\n  int ss = s;\n  int tt = t;\n  while(s != t){\n    int ps = segs[upsegpos[s].F].seg.back();\n    int pt = segs[downsegpos[t].F].seg[0];\n    //PR(ps,pt,s,t);\n    //cerr << depth[ps] << ' ' << depth[pt] << endl;\n    \n    if(ps == pt){\n      if(depth[s] < depth[t]){\n        tret.push_back(mp(downsegpos[t].F,mp(downsegpos[s].S,downsegpos[t].S)));\n      }else{\n        sret.push_back(mp(upsegpos[s].F,mp(upsegpos[s].S,upsegpos[t].S)));\n      }\n      break;\n    }\n    \n    if(depth[ps] < depth[pt]){\n      tret.push_back(mp(downsegpos[t].F,mp(0,downsegpos[t].S)));\n      t = pnodeseg[t];\n      //if(t == s) sret.pb(mp(upsegpos[t].F,mp(upsegpos[t].S,upsegpos[t].S)));\n      //if(s == t) sret.pb(mp(downsegpos[t].F,mp(downsegpos[t].S,downsegpos[t].S)));\n    }else{\n      sret.push_back(mp(upsegpos[s].F,mp(upsegpos[s].S,segs[upsegpos[s].F].seg.size()-1)));\n      s = pnodeseg[s];\n      //if(s == t) sret.pb(mp(downsegpos[t].F,mp(downsegpos[t].S,downsegpos[t].S)));\n    }\n    if(s == t){\n      if(ss < tt) sret.pb(mp(downsegpos[t].F,mp(downsegpos[t].S,downsegpos[t].S)));\n      else sret.pb(mp(upsegpos[t].F,mp(upsegpos[t].S,upsegpos[t].S)));\n    }\n  }\n  \n  for(int i = SZ(tret)-1; i >= 0; --i)\n    sret.pb(tret[i]);\n  return sret;\n}\n\nbool ispr(int a){\n  for(int i = 2; i*i<=a; ++i)\n    if(a % i== 0) return false;\n  return true;\n}\n\n\nint main(int argc, char *argv[])\n{\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  mod += time(NULL) % 100000;\n  while(!ispr(mod)) ++mod;\n  \n  pow37[0] = 1;\n  for(int i = 0; i < MAX_N+100; ++i)\n    pow37[i+1] = pow37[i] * MUL % mod;\n  \n  int n;\n  cin >> n;\n  cin >> treech;\n  \n  \n  rep(i,n-1){\n    int a,b;\n    cin >> a >> b;\n    --a,--b;\n    G[a].pb(b);\n    G[b].pb(a);\n  }\n  \n  subtdfs(0,-1,0);\n  makeheavy(0,-1);\n  \n  \n  \n  int Q;\n  cin >> Q;\n\n  rep(iii,Q){\n    int a,b,c,d;\n    cin >> a >> b >> c >> d;\n    --a,--b,--c,--d;\n    if(a==b || c==d){\n      cout << (treech[a] == treech[c] ? 1 : 0) << endl;\n      continue;\n    }\n    auto ab = getseg(a,b);\n    auto cd = getseg(c,d);\n    for(auto& e : ab) e.S.S++;\n    for(auto& e : cd) e.S.S++;\n    int ans = 0;\n\n    int aidx = 0;\n    int cidx = 0;\n    int aoffset = 0;\n    int coffset = 0;\n    \n    // PR(ab);\n    // for(auto e : ab)\n    //   PR(segs[e.F].seg);\n    // PR(cd);\n    // for(auto e : cd) PR(segs[e.F].seg);\n    \n    while(aidx < SZ(ab) && cidx < SZ(cd)){\n      int al = ab[aidx].S.F + aoffset;\n      int ar = ab[aidx].S.S;\n      int cl = cd[cidx].S.F + coffset;\n      int cr = cd[cidx].S.S;\n      if(al == ar){\n        ++aidx;\n        aoffset = 0;\n        continue;\n      }\n      if(cl == cr){\n        ++cidx;\n        coffset = 0;\n        continue;\n      }\n      int le = min(ar-al,cr-cl);\n      //PR(le);\n      if(segs[ab[aidx].F].query(al,al+le) == segs[cd[cidx].F].query(cl,cl+le)){\n        ans += le;\n        aoffset += le;\n        coffset += le;\n        continue;\n      }\n      int low = 0;\n      int up = le;\n      while(low+1 < up){\n        int mle = (low+up)/2;\n        if(segs[ab[aidx].F].query(al,al+mle) == segs[cd[cidx].F].query(cl,cl+mle)) low = mle;\n        else up = mle;\n      }\n      ans += low;\n      break;\n    }\n    \n    cout << ans << endl;\n  }\n  \n  // rep(i, Q){\n  //   int q;\n  //   cin >> q;\n  //   if(q == 1){\n  //     int u,v,a,b;\n  //     cin >> u >> v >> a >> b;\n  //     --u,--v;\n  //     if(u == v){\n  //       for(auto e : getseg(u,v)){\n  //         //PR(e);\n  //         segs[e.F].update(e.S.F,e.S.S+1,a,b);\n  //       }\n  //     }else{\n  //       rep(j,2){\n  //         //PR(getseg(u,v));\n  //         for(auto e : getseg(u,v)){\n  //           segs[e.F].update(e.S.F,e.S.S+1,a,b);\n  //         }\n  //         swap(u,v);\n  //       }\n  //     }\n  //   }else{\n  //     int u,v,x;\n  //     cin >> u >> v >> x;\n  //     --u,--v;\n  //     PI ret(1,0);\n  //     if(u == v){\n  //       auto e = getseg(u,v)[0];\n  //       ret = segs[e.F].query(e.S.F,e.S.S+1);\n  //     }else{\n\n  //       for(auto e : getseg(u,v)){\n  //         auto qa = segs[e.F].query(e.S.F,e.S.S+1);\n  //         ret = qmerge(ret,qa);\n  //       }\n  //     }\n  //     cout << (ret.F*x + ret.S) % mod << endl;\n  //   }\n  // }\n  \n  return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "dfs and similar", "hashing", "string suffix structures", "trees"], "dificulty": "3000", "interactive": false}