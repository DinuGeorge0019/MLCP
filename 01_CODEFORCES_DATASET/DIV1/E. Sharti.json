{
    "link": "https://codeforces.com//contest/494/problem/E",
    "problemId": "19368",
    "problem_idx": "E",
    "shortId": "494E",
    "contest_number": "494",
    "problem_submissions": {
        "D": [
            9118626,
            9110497,
            9186603,
            9121795,
            9113766,
            9135685,
            9135672,
            9135646,
            9135644,
            9118440,
            9118021,
            9114872
        ],
        "C": [
            9115660,
            9117032,
            9115729,
            9112157,
            9113416,
            9118088,
            9112989,
            9113678,
            9114840,
            9114457,
            9115024,
            9116699,
            9114578,
            9115874,
            9153533
        ],
        "E": [
            9112090,
            9123061,
            9123029,
            9114944,
            9811638
        ],
        "B": [
            9104681,
            9106022,
            9107594,
            9107713,
            9107377,
            9105960,
            9107410,
            9107902,
            9108808,
            9108302,
            9109468,
            9108127,
            9106911,
            9107132,
            9108038,
            9109018
        ],
        "A": [
            9103881,
            9104046,
            9103935,
            9104128,
            9103929,
            9104036,
            9104015,
            9104004,
            9104614,
            9104250,
            9104342,
            9104831,
            9104167,
            9104248,
            9104541,
            9104804
        ]
    },
    "name": "E. Sharti",
    "statement": "During the last 24 hours Hamed and Malek spent all their time playing\r\n\"Sharti\". Now they are too exhausted to finish the last round. So they\r\nasked you for help to determine the winner of this round. \"Sharti\" is\r\nplayed on a board with some of cells colored white and others colored\r\nblack. The rows of the board are numbered from top to bottom using\r\nnumber to . Also the columns of the board are numbered from left to\r\nright using numbers to . The cell located at the intersection of -th row\r\nand -th column is denoted by .The players alternatively take turns. In\r\neach turn the player must choose a square with side-length at most with\r\nits lower-right cell painted white. Then the colors of all the cells in\r\nthis square are inversed (white cells become black and vice-versa). The\r\nplayer who cannot perform a move in his turn loses. You know Hamed and\r\nMalek are very clever and they would have played their best moves at\r\neach turn. Knowing this and the fact that Hamed takes the first turn,\r\ngiven the initial board as described in the input, you must determine\r\nwhich one of them will be the winner.\r\n",
    "solutions": [
        "#include <cstring>\n#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <memory.h>\n#include <cassert>\n\nusing namespace std;\n\nconst int N = 888888;\n\nint mn[N], add[N], cnt[N];\nint ry[N];\n\nvoid build(int x, int l, int r) {\n  mn[x] = 0;\n  add[x] = 0;\n  cnt[x] = ry[r] - ry[l - 1];\n  if (l < r) {\n    int y = (l + r) >> 1;\n    build(x + x, l, y);\n    build(x + x + 1, y + 1, r);\n  }\n}\n\nvoid modify(int x, int l, int r, int ll, int rr, int v) {\n  if (ll <= l && r <= rr) {\n    add[x] += v;\n    return;\n  }\n  if (add[x] != 0) {\n    add[x + x] += add[x];\n    add[x + x + 1] += add[x];\n    add[x] = 0;\n  }\n  int y = (l + r) >> 1;\n  if (ll <= y) {\n    modify(x + x, l, y, ll, rr, v);\n  }\n  if (rr > y) {\n    modify(x + x + 1, y + 1, r, ll, rr, v);\n  }\n  int w1 = mn[x + x] + add[x + x];\n  int w2 = mn[x + x + 1] + add[x + x + 1];\n  mn[x] = (w1 < w2 ? w1 : w2);\n  cnt[x] = (w1 == mn[x] ? cnt[x + x] : 0) + (w2 == mn[x] ? cnt[x + x + 1] : 0);\n}\n\nint xa[N], ya[N], xb[N], yb[N];\nint rya[N], ryb[N];\n\nint main() {\n  int n, m, k;\n  scanf(\"%d %d %d\", &n, &m, &k);\n  for (int i = 0; i < m; i++) {\n    scanf(\"%d %d %d %d\", xa + i, ya + i, xb + i, yb + i);\n  }\n  int step = 1;\n  while (step <= k) {\n    vector < pair <int, int> > ys;\n    for (int i = 0; i < m; i++) {\n      if (xa[i] > xb[i] || ya[i] > yb[i]) {\n        continue;\n      }\n      ys.push_back(make_pair(ya[i] - 1, i));\n      ys.push_back(make_pair(yb[i], ~i));\n    }\n    if (ys.empty()) {\n      break;\n    }\n    sort(ys.begin(), ys.end());\n    int t = 0;\n    ry[0] = ys[0].first;\n    int yss = ys.size();\n    for (int i = 0; i < yss; i++) {\n      if (i > 0 && ys[i].first != ys[i - 1].first) {\n        t++;\n        ry[t] = ys[i].first;\n      }\n      if (ys[i].second >= 0) {\n        rya[ys[i].second] = t + 1;\n      } else {\n        ryb[~ys[i].second] = t;\n      }\n    }\n    if (t == 0) {\n      break;\n    }\n    build(1, 1, t);\n    vector < pair <int, int> > e;\n    for (int i = 0; i < m; i++) {\n      if (xa[i] > xb[i] || ya[i] > yb[i]) {\n        continue;\n      }\n      e.push_back(make_pair(xa[i] - 1, i));\n      e.push_back(make_pair(xb[i], ~i));\n    }\n    sort(e.begin(), e.end());\n    int es = e.size();\n    int ans = 0;\n    for (int id = 0; id < es - 1; id++) {\n      int i = e[id].second;\n      if (i >= 0) {\n        modify(1, 1, t, rya[i], ryb[i], 1);\n      } else {\n        modify(1, 1, t, rya[~i], ryb[~i], -1);\n      }\n      int dx = e[id + 1].first - e[id].first;\n      int mul = ry[t] - ry[0];\n      if (mn[1] + add[1] == 0) {\n        mul -= cnt[1];\n      }\n      ans ^= ((dx & 1) * (mul & 1));\n    }\n    if (ans == 1) {\n      puts(\"Hamed\");\n      return 0;\n    }\n    for (int i = 0; i < m; i++) {\n      xa[i] = ((xa[i] + 1) >> 1);\n      ya[i] = ((ya[i] + 1) >> 1);\n      xb[i] = (xb[i] >> 1);\n      yb[i] = (yb[i] >> 1);\n    }\n    n >>= 1;\n    step <<= 1;\n  }\n  puts(\"Malek\");\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "games"
    ],
    "dificulty": "3200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Sharti.json",
    "editorial_link": "https://codeforces.com/blog/entry/15148",
    "editorial": "Let\u00e2\u0080\u0099s first solve this problem for another game: Suppose that we\u00e2\u0080\u0099ve an\r\ntable. Each cell have some(possibly zero) marbles on it. During each\r\nmove the player chooses a square with side-length at most which its\r\nlower-right cell has at least one marble, he removes one marble from it\r\nand puts one marble in every other cell of this square. One can notice\r\nthat in such game each marble is independent of the others and doesn\u00e2\u0080\u0099t\r\naffect other marbles. So one can see this game as some separate games\r\nplayed on some tables. More formally for each marble placed in a cell\r\nsuch as consider the game when played on a table which the only marble\r\nplaced on it is at its lower-right cell. Let\u00e2\u0080\u0099s denote the Grundy number\r\nof this game by . Then according to Grundy theorem the first player has\r\na winning strategy if and only if the xor of for every cell having odd\r\nnumber of marbles on it is positive. To calculate note that the first\r\nmove in such game must be choosing a square with its lower-right cell\r\nbeing the lower-right cell of table. So the only thing to decide is the\r\nside-length of chosen square at the first move. Let\u00e2\u0080\u0099s say we choose the\r\nfirst square width side length . Grundy number of the next state will be\r\nequal to xor of for every . Using this fact one can calculate for all (\r\nbeing an arbitrary integers) in . If we calculated the first values of\r\none can see a pattern in the Grundy numbers. Then one can prove that\r\nwhere the maximum power of which is a divisor of and the maximum power\r\nof which is not greater than . Now let\u00e2\u0080\u0099s prove that our first game(the\r\ngame described in the statement) is actually the same as this game.\r\nSuppose that a player has a winning strategy in the first game. Consider\r\na table containing one marble at every cell which is white in the table\r\nof the first game. We\u00e2\u0080\u0099ll prove that the same player has winning strategy\r\nin this game as well. Note that a cell is white in the first game if and\r\nonly if the parity of marbles in the second game is odd so there is at\r\nleast one marble on it. So as long as the other player chooses a square\r\nwith its lower-right cell having odd number of marbles in the second\r\ngame, his move corresponds to a move in the first game so the player\r\nhaving winning strategy can counter his move. If the other player\r\nchooses a square with its lower-right cell having even number of\r\nmarbles, it means the cell had at least 2 marbles on it so the player\r\ncan counter it by choosing the same square which makes the parity of\r\nevery cell to be the same after these 2 moves. And since it can be\r\nproven that both of the game will end at some point then the player has\r\nwinning strategy in this game as well. The reverse of this fact can also\r\nbe proven the same since if a player has a winning strategy there is\r\nalso a winning strategy in which this player always chooses squares with\r\nlower-right cell having odd number of marbles(since otherwise the other\r\nplayer can counter it as described above) and counters the moves of the\r\nother player at which he chose a square with lower-right cell having\r\neven number of marbles by choosing the same square(since the Grundy\r\nnumber by countering in this way won\u00e2\u0080\u0099t change the Grundy number and thus\r\nwon\u00e2\u0080\u0099t change the player with winning strategy). So if we consider a\r\ntable having one marble at each of the cells which are in at least one\r\nof the rectangles given in the input we only need to calculate the\r\nGrundy number of this state and check whether it\u00e2\u0080\u0099s positive or not to\r\ndetermine the winner. To do this for each lets define as the number of\r\ncells which are contained in at least one of the given rectangles, and .\r\nLets also define . Then according the fact we described above about the\r\nnumber of s which are xored equals . Knowing this calculating the Grundy\r\nnumber of the initial state is easy. Calculating is identical to a very\r\nwell-known problem which is given some rectangles count the number of\r\ncells in at least one of them and can be solved in ( being number of\r\nrectangles). So overall complexity will be . If there is any problem in\r\nthe editorial please feel free to note that to us. Thank you.\r\n"
}