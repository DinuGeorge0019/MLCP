{"link": "https://codeforces.com//contest/1218/problem/I", "problemId": "412341", "problem_idx": "I", "shortId": "1218I", "contest_number": "1218", "problem_submissions": {"D": [60648151, 60643203, 60647260, 60645392, 60642748], "H": [60644806, 60638524], "E": [60642127, 60641056, 60641513, 60643564, 60648498], "I": [60640334, 60639607, 60640474, 60637390, 60638678], "F": [60638215, 60637531, 60635942, 60636552, 60636479], "C": [60637983, 60674902, 60648025], "B": [60648802], "A": [60645770], "G": []}, "name": "I. The Light Square", "statement": "For her birthday Alice received an interesting gift from her friends The\r\nLight Square. The Light Square game is played on an N\r\ntimes N lightbulbs square board with a magical lightbulb bar of size N\r\ntimes 1 that has magical properties. At the start of the game some\r\nlights on the square board and magical bar are turned on. The goal of\r\nthe game is to transform the starting light square board pattern into\r\nsome other pattern using the magical bar without rotating the square\r\nboard. The magical bar works as follows: It can be placed on any row or\r\ncolumn The orientation of the magical lightbulb must be left to right or\r\ntop to bottom for it to keep its magical properties The entire bar needs\r\nto be fully placed on a board The lights of the magical bar never change\r\nIf the light on the magical bar is the same as the light of the square\r\nit is placed on it will switch the light on the square board off,\r\notherwise it will switch the light on The magical bar can be used an\r\ninfinite number of times Alice has a hard time transforming her square\r\nboard into the pattern Bob gave her. Can you help her transform the\r\nboard or let her know it is impossible? If there are multiple solutions\r\nprint any.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\nusing ll = long long;\nusing pii = pair<int, int>;\n#define x first\n#define y second\n\nconst int N = 2005;\n\nchar str[N];\nint n, a[N][N], b[N], p[4*N], c[4*N], cnt;\n\nint f(int x){\n    if(x == p[x]) return x;\n    return p[x] = f(p[x]);\n}\n\nint main(){ ios_base::sync_with_stdio(0); cin.tie(0);\n    cin >> n;\n    for(int i = 1; i <= n; i++){\n        cin >> (str+1);\n        for(int j = 1; j <= n; j++) a[i][j] = str[j]&1;\n    }\n    for(int i = 1; i <= n; i++){\n        cin >> (str+1);\n        for(int j = 1; j <= n; j++) a[i][j] ^= str[j]&1;\n    }\n    cin >> (str+1);\n    for(int i = 1; i <= n; i++) b[i] = str[i]&1;\n    iota(p, p + 4*n+3, 0);\n    int T = 4*n+1, F = 4*n+2;\n    for(int i = 1; i <= n; i++) for(int j = 1; j <= n; j++){\n        switch(2*b[i] + b[j]){\n        case 0:\n            if(a[i][j]){ cout << \"-1\\n\"; return 0; }\n            break;\n        case 1:\n            p[f(i)] = f(a[i][j] ? T : F);\n            break;\n        case 2:\n            p[f(j + n)] = f(a[i][j] ? T : F);\n            break;\n        case 3:\n            if(a[i][j]){\n                p[f(i)] = f(j + 3*n);\n                p[f(i + 2*n)] = f(j + n);\n            }\n            else{\n                p[f(i)] = f(j + n);\n                p[f(i + 2*n)] = f(j + 3*n);\n            }\n            break;\n        }\n    }\n    c[f(T)] = 1;\n    c[f(F)] = -1;\n    for(int i = 1; i <= 2*n; i++){\n        if(f(i) == f(i + 2*n)){ cout << \"-1\\n\"; return 0; }\n        if(c[f(i)] && c[f(i)] == c[f(i + 2*n)]){ cout << \"-1\\n\"; return 0; }\n        if(!c[f(i)] && !c[f(i + 2*n)]) c[f(i)] = -1;\n        if(!c[f(i)] && c[f(i + 2*n)]) c[f(i)] = -c[f(i + 2*n)];\n        if(!c[f(i + 2*n)] && c[f(i)]) c[f(i + 2*n)] = -c[f(i)];\n        if(c[f(i)] > 0) cnt++;\n    }\n    cout << cnt << '\\n';\n    for(int i = 1; i <= n; i++) if(c[f(i)] > 0) cout << \"row \" << i-1 << '\\n';\n    for(int i = 1; i <= n; i++) if(c[f(i + n)] > 0) cout << \"col \" << i-1 << '\\n';\n}"], "input": "", "output": "", "tags": ["2-sat", "dfs and similar", "greedy"], "dificulty": "2100", "interactive": false}