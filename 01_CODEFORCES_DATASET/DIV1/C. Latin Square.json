{"link": "https://codeforces.com//contest/1458/problem/C", "problemId": "837944", "problem_idx": "C", "shortId": "1458C", "contest_number": "1458", "problem_submissions": {"C": [101749748, 101754548, 101742006, 101765508, 101760904, 101735121, 101758711, 101733697, 101742587, 101742771, 101744109, 101764706, 101753517, 101758458, 103876484, 101781534], "D": [101742255, 101733305, 101750551, 101754872, 101747447, 101747468, 101737535, 101761632, 101756331, 101755812, 102023685, 101761131, 101768544, 101764759, 103932701, 101747159], "E": [101737863, 101746540, 101766037, 101749099, 101757343, 101752859, 101763081, 101766464, 101774328, 101752190, 101746555, 101751393, 101757105], "B": [101728732, 101721253, 101733062, 101725510, 101763762, 101727209, 101722722, 101732397, 101727564, 101724112, 101730858, 101735965, 101740443, 101732340, 101727159, 101744347, 101723637, 101730363, 101730317], "A": [101720547, 101718495, 101723686, 101718493, 101718664, 101719145, 101718463, 101718584, 101718634, 101718787, 101720142, 101718675, 101719084, 101722215, 101718515, 101719224, 101718795, 101718781, 101721089], "F": [102925392, 102542392, 102542303, 103841307]}, "name": "C. Latin Square", "statement": "You are given a square matrix of size n. Every row and every column of\r\nthis matrix is a permutation of 1, 2,\r\nldots, n. Let a_{i, j} be the element at the intersection of i-th row\r\nand j-th column for every 1\r\nleq i, j\r\nleq n. Rows are numbered 1,\r\nldots, n top to bottom, and columns are numbered 1,\r\nldots, n left to right.There are six types of operations: : cyclically\r\nshift all columns to the right, formally, set the value of each a_{i, j}\r\nto a_{i, ((j - 2)\r\nbmod n) + 1}; : cyclically shift all columns to the left, formally, set\r\nthe value of each a_{i, j} to a_{i, (j\r\nbmod n) + 1}; : cyclically shift all rows down, formally, set the value\r\nof each a_{i, j} to a_{((i - 2)\r\nbmod n) + 1, j}; : cyclically shift all rows up, formally, set the value\r\nof each a_{i, j} to a_{(i\r\nbmod n) + 1, j}; : replace the permutation read left to right in each\r\nrow with its inverse. : replace the permutation read top to bottom in\r\neach column with its inverse. Inverse of a permutation p_1, p_2,\r\nldots, p_n is a permutation q_1, q_2,\r\nldots, q_n, such that p_{q_i} = i for every 1\r\nleq i\r\nleq n.One can see that after any sequence of operations every row and\r\nevery column of the matrix will still be a permutation of 1, 2,\r\nldots, n.Given the initial matrix description, you should process m\r\noperations and output the final matrix.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 19.12.2020 13:42:39       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n, m;\n    cin >> n >> m;\n    vector<vector<int>> p(n * n, vector<int>(3));\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        int v;\n        cin >> v;\n        --v;\n        p[i * n + j][0] = i;\n        p[i * n + j][1] = j;\n        p[i * n + j][2] = v;\n      }\n    }\n    string s;\n    cin >> s;\n    vector<int> order(3);\n    iota(order.begin(), order.end(), 0);\n    vector<int> shift(3, 0);\n    for (char c : s) {\n      if (c == 'R') {\n        shift[1] = (shift[1] + 1) % n;\n      }\n      if (c == 'L') {\n        shift[1] = (shift[1] + n - 1) % n;\n      }\n      if (c == 'D') {\n        shift[0] = (shift[0] + 1) % n;\n      }\n      if (c == 'U') {\n        shift[0] = (shift[0] + n - 1) % n;\n      }\n      if (c == 'I') {\n        swap(order[1], order[2]);\n        swap(shift[1], shift[2]);\n      }\n      if (c == 'C') {\n        swap(order[0], order[2]);\n        swap(shift[0], shift[2]);\n      }\n    }\n    vector<vector<int>> a(n, vector<int>(n, -1));\n    vector<int> z(3);\n    for (int i = 0; i < n * n; i++) {\n      for (int j = 0; j < 3; j++) {\n        z[j] = (p[i][order[j]] + shift[j]) % n;\n      }\n      a[z[0]][z[1]] = z[2];\n    }\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        if (j > 0) {\n          cout << \" \";\n        }\n        assert(a[i][j] != -1);\n        cout << a[i][j] + 1;\n      }\n      cout << '\\n';\n    }\n    cout << '\\n';\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["math", "matrices"], "dificulty": "2700", "interactive": false}