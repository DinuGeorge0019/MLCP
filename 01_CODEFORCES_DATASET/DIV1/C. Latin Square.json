{
    "link": "https://codeforces.com//contest/1458/problem/C",
    "problemId": "837944",
    "problem_idx": "C",
    "shortId": "1458C",
    "contest_number": "1458",
    "problem_submissions": {
        "C": [
            101749748,
            101754548,
            101742006,
            101765508,
            101760904,
            101735121,
            101758711,
            101733697,
            101742587,
            101742771,
            101744109,
            101764706,
            101753517,
            101758458,
            103876484,
            101781534
        ],
        "D": [
            101742255,
            101733305,
            101750551,
            101754872,
            101747447,
            101747468,
            101737535,
            101761632,
            101756331,
            101755812,
            102023685,
            101761131,
            101768544,
            101764759,
            103932701,
            101747159
        ],
        "E": [
            101737863,
            101746540,
            101766037,
            101749099,
            101757343,
            101752859,
            101763081,
            101766464,
            101774328,
            101752190,
            101746555,
            101751393,
            101757105
        ],
        "B": [
            101728732,
            101721253,
            101733062,
            101725510,
            101763762,
            101727209,
            101722722,
            101732397,
            101727564,
            101724112,
            101730858,
            101735965,
            101740443,
            101732340,
            101727159,
            101744347,
            101723637,
            101730363,
            101730317
        ],
        "A": [
            101720547,
            101718495,
            101723686,
            101718493,
            101718664,
            101719145,
            101718463,
            101718584,
            101718634,
            101718787,
            101720142,
            101718675,
            101719084,
            101722215,
            101718515,
            101719224,
            101718795,
            101718781,
            101721089
        ],
        "F": [
            102925392,
            102542392,
            102542303,
            103841307
        ]
    },
    "name": "C. Latin Square",
    "statement": "You are given a square matrix of size n. Every row and every column of\r\nthis matrix is a permutation of 1, 2,\r\nldots, n. Let a_{i, j} be the element at the intersection of i-th row\r\nand j-th column for every 1\r\nleq i, j\r\nleq n. Rows are numbered 1,\r\nldots, n top to bottom, and columns are numbered 1,\r\nldots, n left to right.There are six types of operations: : cyclically\r\nshift all columns to the right, formally, set the value of each a_{i, j}\r\nto a_{i, ((j - 2)\r\nbmod n) + 1}; : cyclically shift all columns to the left, formally, set\r\nthe value of each a_{i, j} to a_{i, (j\r\nbmod n) + 1}; : cyclically shift all rows down, formally, set the value\r\nof each a_{i, j} to a_{((i - 2)\r\nbmod n) + 1, j}; : cyclically shift all rows up, formally, set the value\r\nof each a_{i, j} to a_{(i\r\nbmod n) + 1, j}; : replace the permutation read left to right in each\r\nrow with its inverse. : replace the permutation read top to bottom in\r\neach column with its inverse. Inverse of a permutation p_1, p_2,\r\nldots, p_n is a permutation q_1, q_2,\r\nldots, q_n, such that p_{q_i} = i for every 1\r\nleq i\r\nleq n.One can see that after any sequence of operations every row and\r\nevery column of the matrix will still be a permutation of 1, 2,\r\nldots, n.Given the initial matrix description, you should process m\r\noperations and output the final matrix.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 19.12.2020 13:42:39       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n, m;\n    cin >> n >> m;\n    vector<vector<int>> p(n * n, vector<int>(3));\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        int v;\n        cin >> v;\n        --v;\n        p[i * n + j][0] = i;\n        p[i * n + j][1] = j;\n        p[i * n + j][2] = v;\n      }\n    }\n    string s;\n    cin >> s;\n    vector<int> order(3);\n    iota(order.begin(), order.end(), 0);\n    vector<int> shift(3, 0);\n    for (char c : s) {\n      if (c == 'R') {\n        shift[1] = (shift[1] + 1) % n;\n      }\n      if (c == 'L') {\n        shift[1] = (shift[1] + n - 1) % n;\n      }\n      if (c == 'D') {\n        shift[0] = (shift[0] + 1) % n;\n      }\n      if (c == 'U') {\n        shift[0] = (shift[0] + n - 1) % n;\n      }\n      if (c == 'I') {\n        swap(order[1], order[2]);\n        swap(shift[1], shift[2]);\n      }\n      if (c == 'C') {\n        swap(order[0], order[2]);\n        swap(shift[0], shift[2]);\n      }\n    }\n    vector<vector<int>> a(n, vector<int>(n, -1));\n    vector<int> z(3);\n    for (int i = 0; i < n * n; i++) {\n      for (int j = 0; j < 3; j++) {\n        z[j] = (p[i][order[j]] + shift[j]) % n;\n      }\n      a[z[0]][z[1]] = z[2];\n    }\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        if (j > 0) {\n          cout << \" \";\n        }\n        assert(a[i][j] != -1);\n        cout << a[i][j] + 1;\n      }\n      cout << '\\n';\n    }\n    cout << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "matrices"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Latin Square.json",
    "editorial_link": "https://codeforces.com//blog/entry/85750",
    "editorial": "For convenience, let's assume that all row and column indices, as well as matrix values, are from 0,\u0085,n?1\n instead for 1,\u0085,n\n.\n\nIf only shift operations were present, we could solve the problem in linear time: just maintain where the top left corner ends up after all the shifts, and then the matrix can be easily reconstructed (if this is not immediately clear to you, take a moment and think how this should be done). For the inverse operations, the approach is going to be similar, but we'll need a different way to look at the matrix. Instead of the matrix, let's think about the set of all triples (i,j,a[i][j])\n. Imagining a set of n2\n points in 3D, where i,j\n are x\n and y\n coordinates in the horizontal plance, and a[i][j]\n is the height z\n is a good mental picture.\n\nShift operations apply x?(x\u00b11)modn\n and y?(y\u00b11)modn\n to all points. We can think of this as a translation of the entire 3D space, with some looping at the borders. Instead of the given points, let's keep track of where the point (0,0,0)\n is located after the operations are done; it's just as easy as in two-dimensional version from before.\n\nNow let's introduce the inverses. Consider, say, a row inverse operation, and all the points (i,j,k)\n, where k=a[i][j]\n, that have the same row index i\n. As an example, suppose that the top (0\n-th) row of the matrix contains numbers (2,1,3,0)\n. The entries in the row correspond to points (0,0,2)\n, (0,1,1)\n, (0,2,3)\n, (0,3,0)\n. The inverse permutation to this row is (3,1,0,2)\n, thus the new set of points should be (0,0,3)\n, (0,1,1)\n, (0,2,0)\n, (0,3,2)\n. In general, if there is currently a point (i,j,k)\n in the set, then after the inverse there must be a point (i,k,j)\n. Thus, the entire operation may be summarized as \"swap the second and third coordinates\". Similarly, the column inverse is \"swap the first and third coordinates\". Again, we think of this transformation applied to the entire 3D space: this can be seen as a mirror reflection with respect to y=z\n or x=z\n plane.\n\nHow does this affect our \"keep track of (0,0,0)\n\" approach? It is easy to update its position: just swap respective coordinates. However, we now need to care about how the answer is reconstructed, since, say, the point (1,0,0)\n not necessarily ends up one step to the right of (0,0,0)\n. Thus, in addition, let's keep track of how the direction vectors vx=(1,0,0)\n, vy=(0,1,0)\n, vz=(0,0,1)\n are permuted after all operations. Shifts do not affect them, but inverses swap two of them, depending on which coordinates where swapped.\n\nWe are almost done, we just need to reconstruct the answer at the end. If we had an initially given point p=(i,j,k)\n, where will it end up? If the origin ends up at a position represented as a vector v0=(x,y,z)\n, then p\n ends up at p?=v0+ivx+jvy+kvz\n, where vx,vy,vz\n are permuted accordingly. Once we have the result p?=(i?,j?,k?)\n, all we need is to put k?\n into b[i?][j?]\n, where b\n is the answer matrix.\n\nThis results, once again, in a linear time solution. This explanation could have been much shorter with some linear-algebraic machinery (basically each transformation = multiplication by a certain matrix), but I chose to leave it as elementary (?\n simple!) as possible."
}