{"link": "https://codeforces.com//contest/297/problem/D", "problemId": "2862", "problem_idx": "D", "shortId": "297D", "contest_number": "297", "problem_submissions": {"E": [3573577, 3572177, 3599204, 3789658, 3600333], "C": [3572198, 3569026, 3567778, 3569809, 3574619, 3568949, 3571082, 3571182, 3571915, 3572417, 3571389, 3576338, 3581124], "D": [3571285, 3568393, 3572434, 3572411, 3572809, 3569746, 3574175, 3574132, 3574196, 3574904, 3574825, 3575155, 3572689, 3572000, 3569044, 3569682, 3569691, 3570483, 3570423], "B": [3565273, 3565232, 3566085, 3565337, 3567367, 3565921, 3564958, 3565122, 3565530, 3566819, 3566006, 3566209, 3567427, 3565310, 3565669, 3565428, 3567419, 3567159, 3565321], "A": [3564985, 3564892, 3565047, 3564918, 3565603, 3565210, 3574423, 3565848, 3568320, 3564943, 3565186, 3565376, 3565311, 3564926, 3564908, 3564901, 3566394, 3565891, 3566461]}, "name": "D. Color the Carpet", "statement": "Even polar bears feel cold when lying on the ice. Therefore, a polar\r\nbear Alice is going to make a carpet. The carpet can be viewed as a grid\r\nwith height and width . Then the grid is divided into squares. Alice is\r\ngoing to assign one of different colors to each square. The colors are\r\nnumbered from 1 to . She may choose not to use all of the\r\ncolors.However, there are some restrictions. For every two adjacent\r\nsquares (squares that shares an edge) and , there is a in one of the\r\nforms: , or . Example of the color constraints: Ideally, Alice wants to\r\nsatisfy all color constraints. But again, life in the Arctic is hard. It\r\nis not always possible to satisfy all color constraints. Fortunately,\r\nshe will still be happy if at least of the color constraints are\r\nsatisfied. If she has colors she can color the carpet in the following\r\nway: And she is happy because of the color constraints are satisfied,\r\nand . Your task is to help her color the carpet.\r\n", "solutions": ["#include <iostream>\n#include <iomanip>\n#include <stdio.h>\n#include <set>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <memory.h>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint a[4444][4444];\nchar hor[4444][4444], ver[4444][4444];\n\nint main() {\n  int h, w, k;\n  scanf(\"%d %d %d\", &h, &w, &k);\n  for (int i=0;i<2*h-1;i++)\n    if (i % 2 == 0) {\n      scanf(\"%s\", hor[i / 2]);\n    } else {\n      scanf(\"%s\", ver[i / 2]);\n    }\n  if (k == 1) {\n    int cnt = 0;\n    for (int i=0;i<h;i++)\n      for (int j=0;j<w-1;j++)\n        if (hor[i][j] == 'E') cnt++;\n    for (int i=0;i<h-1;i++)\n      for (int j=0;j<w;j++)\n        if (ver[i][j] == 'E') cnt++;\n    int total = h*(w-1) + (h-1)*w;\n    if (4*cnt >= 3*total) {\n      printf(\"YES\\n\");\n      for (int i=0;i<h;i++) {\n        for (int j=0;j<w-1;j++) printf(\"%d \", 1);\n        printf(\"%d\\n\", 1);\n      }\n    }\n    else printf(\"NO\\n\");\n    return 0;\n  }\n  printf(\"YES\\n\");\n  if (h*(w-1) >= (h-1)*w) {\n    for (int i=0;i<h;i++) {\n      a[i][0] = 1;\n      for (int j=0;j<w-1;j++)\n        if (hor[i][j] == 'E') a[i][j+1] = a[i][j];\n        else a[i][j+1] = 3-a[i][j];\n      if (i > 0) {\n        int good = 0, bad = 0;\n        for (int j=0;j<w;j++)\n          if ((ver[i-1][j] == 'E') != (a[i-1][j] == a[i][j])) bad++;\n          else good++;\n        if (bad > good) {\n          for (int j=0;j<w;j++) a[i][j] = 3-a[i][j];\n        }\n      }\n    }\n  } else {\n    for (int j=0;j<w;j++) {\n      a[0][j] = 1;\n      for (int i=0;i<h-1;i++)\n        if (ver[i][j] == 'E') a[i+1][j] = a[i][j];\n        else a[i+1][j] = 3-a[i][j];\n      if (j > 0) {\n        int good = 0, bad = 0;\n        for (int i=0;i<h;i++)\n          if ((hor[i][j-1] == 'E') != (a[i][j-1] == a[i][j])) bad++;\n          else good++;\n        if (bad > good) {\n          for (int i=0;i<h;i++) a[i][j] = 3-a[i][j];\n        }\n      }\n    }\n  }\n  for (int i=0;i<h;i++) {\n    for (int j=0;j<w-1;j++) printf(\"%d \", a[i][j]);\n    printf(\"%d\\n\", a[i][w-1]);\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms"], "dificulty": "2500", "interactive": false}