{"link": "https://codeforces.com//contest/1063/problem/C", "problemId": "236987", "problem_idx": "C", "shortId": "1063C", "contest_number": "1063", "problem_submissions": {"F": [44321779, 44310989, 44539942, 44524512, 44473039, 44472562, 50480317, 51150998, 44317621, 44317615, 44312825, 44373124], "D": [44311197, 44305997, 44303323, 44313702, 44361765, 44361136, 44376357, 44376258, 44307498, 44337552, 44311559, 44305058, 44311516, 44304459, 44311498, 44312697, 44315110], "E": [44305503, 44313651, 44315069, 44307031, 44313364, 44308262, 44337210, 44313717, 44317640, 44314472, 44311650], "C": [44298733, 44296257, 44305349, 44298667, 44298705, 44299697, 44299069, 44300205, 44299465, 44299657, 44301626, 44302301, 44304486, 44306960, 44302436, 44309287, 44301972, 44304513, 44301966], "A": [44295781, 44291759, 44291627, 44296582, 44291453, 44291198, 44292770, 44291128, 44296111, 44296432, 44292644, 44293693, 44292723, 44296227, 44292099, 44305135, 44297417, 44292247, 44291472], "B": [44295123, 44298986, 44296043, 44295205, 44297251, 44302092, 44296710, 44297936, 44295873, 44297588, 44298080, 44299136, 44294684, 44297166, 44295722, 44296834, 44296659, 44296927]}, "name": "C. Dwarves, Hats and Extrasensory Abilities", "statement": "In good old times dwarves tried to develop extrasensory abilities:\r\nExactly dwarves entered completely dark cave. Each dwarf received a hat\r\nwhite or black. While in cave, none of the dwarves was able to see\r\neither his own hat or hats of other Dwarves. Dwarves went out of the\r\ncave to the meadow and sat at an arbitrary place one after the other.\r\nWhen a dwarf leaves the cave, he sees the colors of all hats of all\r\ndwarves that are seating on the meadow (i.e. left the cave before him).\r\nHowever, he is not able to see the color of his own hat and none of the\r\ndwarves can give him this information. The task for dwarves was to got\r\ndiverged into two parts one with dwarves with white hats and one with\r\nblack hats. After many centuries, dwarves finally managed to select the\r\nright place on the meadow without error. Will you be able to repeat\r\ntheir success?You are asked to successively name different integer\r\npoints on the plane. After naming each new point you will be given its\r\ncolor black or white. Your task is to ensure that the named points can\r\nbe split by a line in such a way that all points of one color lie on the\r\nsame side from the line and points of different colors lie on different\r\nsides. Moreover, no points can belong to the line. Also, you need to\r\nreport any such line at the end of the process.In this problem, the\r\ninteractor is the colors of the points in the tests are not fixed\r\nbeforehand and the jury program can select them arbitrarily, in\r\nparticular, depending on your program output.\r\n", "solutions": ["#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\n#define PB push_back\n#define MP make_pair\n#define LL long long\n#define int LL\n#define FOR(i,a,b) for(int i = (a); i <= (b); i++)\n#define RE(i,n) FOR(i,1,n)\n#define REP(i,n) FOR(i,0,(int)(n)-1)\n#define R(i,n) REP(i,n)\n#define VI vector<int>\n#define PII pair<int,int>\n#define LD long double\n#define FI first\n#define SE second\n#define st FI\n#define nd SE\n#define ALL(x) (x).begin(), (x).end()\n#define SZ(x) ((int)(x).size())\n\n#define unordered_map __fast_unordered_map\ntemplate<class Key, class Value, class Hash = std::hash<Key>>\nusing unordered_map = __gnu_pbds::gp_hash_table<Key, Value, Hash>;\n\ntemplate<class C> void mini(C &a4, C b4) { a4 = min(a4, b4); }\ntemplate<class C> void maxi(C &a4, C b4) { a4 = max(a4, b4); }\n\ntemplate<class TH> void _dbg(const char *sdbg, TH h){ cerr<<sdbg<<'='<<h<<endl; }\ntemplate<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a) {\n  while(*sdbg!=',')cerr<<*sdbg++;\n  cerr<<'='<<h<<','; _dbg(sdbg+1, a...);\n}\n\ntemplate<class T> ostream &operator<<(ostream& os, vector<T> V) {\n  os << \"[\"; for (auto vv : V) os << vv << \",\"; return os << \"]\";\n}\ntemplate<class L, class R> ostream &operator<<(ostream &os, pair<L,R> P) {\n  return os << \"(\" << P.st << \",\" << P.nd << \")\";\n}\n\n#ifdef LOCAL\n#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)\n#else\n#define debug(...) (__VA_ARGS__)\n#define cerr if(0)cout\n#endif\n\nbool GetColor(int x, int y) {\n  cout << x << \" \" << y << endl;\n  string s;\n  cin >> s;\n  return s == \"black\";\n}\n\nbool GetColor(PII x) {\n  return GetColor(x.st, x.nd);\n}\n\nvoid Answer(int x1, int y1, int x2, int y2) {\n  cout << x1 << \" \" << y1 << \" \" << x2 << \" \" << y2 << endl;\n  exit(0);\n}\n\nconst int kMax = 9e8;\nconst int kBase = 100;\n\nPII GetPointAt(int t) {\n  if (t <= kMax) {\n    return PII{kBase + t, kBase};\n  } else {\n    t -= kMax;\n    assert(t <= kMax);\n    return PII{kBase + kMax, kBase + t};\n  }\n}\n\nint32_t main() {\n  int N;\n  cin >> N;\n\n  if (N == 1) {\n    GetColor(0, 0);\n    Answer(1, 0, 2, 1);\n  }\n\n  int from = 0, to = kMax * 2;\n  bool first_color = GetColor(GetPointAt(0));\n\n  for (int i = 2; i <= N; ++i) {\n    assert(to - from >= 2);\n    const int mid = ((LL)from + to) / 2;\n    const bool mid_color = GetColor(GetPointAt(mid));\n    if (mid_color == first_color)\n      from = mid;\n    else\n      to = mid;\n  }\n\n  const auto pt_from = GetPointAt(from);\n  // const auto pt_to = GetPointAt(to);\n\n  if (from < kMax) {\n    Answer(pt_from.st, pt_from.nd + 1, pt_from.st + 1, pt_from.nd - 1);\n  } else {\n    Answer(pt_from.st - 1, pt_from.nd + 1, pt_from.st + 1, pt_from.nd);\n  }\n}\n\n"], "input": "", "output": "", "tags": ["binary search", "constructive algorithms", "geometry", "interactive"], "dificulty": "1900", "interactive": false}