{
    "link": "https://codeforces.com//contest/251/problem/A",
    "problemId": "2345",
    "problem_idx": "A",
    "shortId": "251A",
    "contest_number": "251",
    "problem_submissions": {
        "C": [
            2708116,
            2703586,
            2704109,
            2703232,
            2706506,
            2702257,
            2703703,
            2703280,
            2704115,
            2703686,
            2705486,
            2704984,
            2704534,
            2705165,
            2704884,
            2705233
        ],
        "D": [
            2706516,
            2706940,
            2707149,
            2704789,
            2714168,
            2709244,
            2963073
        ],
        "B": [
            2702885,
            2710707,
            2702748,
            2702944,
            2703852,
            2706610,
            2702523,
            2702863,
            2704268,
            2703034,
            2702681,
            2702420,
            2702396,
            2702786,
            2702560
        ],
        "A": [
            2700911,
            2700969,
            2701184,
            2701021,
            2701182,
            2704236,
            2701557,
            2700957,
            2701183,
            2703855,
            2701084,
            2701446,
            2701163,
            2701237,
            2701243,
            2701186
        ]
    },
    "name": "A. Points on Line",
    "statement": "Little Petya likes points a lot. Recently his mom has presented him\r\npoints lying on the line . Now Petya is wondering in how many ways he\r\ncan choose three distinct points so that the distance between the two\r\nfarthest of them doesn’t exceed .Note that the order of the points\r\ninside the group of three chosen points doesn’t matter.\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <stdio.h>\n#include <set>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <memory.h>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint x[444444];\n\nint main() {\n//  freopen(\"in\", \"r\", stdin);\n//  freopen(\"out\", \"w\", stdout);\n  int n, d, i, j;\n  scanf(\"%d %d\", &n, &d);\n  for (i=0;i<n;i++) scanf(\"%d\", x+i);\n  j = 0;\n  long long ans = 0;\n  for (i=0;i<n;i++) {\n    while (x[i]-x[j] > d) j++;\n    ans += (long long)(i-j)*(i-j-1)/2;\n  }\n  cout << ans << endl;\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics",
        "two pointers"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Points on Line.json",
    "editorial_link": "https://codeforces.com//blog/entry/6054",
    "editorial": "Letâs select the rightmost point of our triplet. In order to do this we\r\ncan iterate over all points in ascending order of their X-coordinate. At\r\nthe same time weâll maintain a pointer to the leftmost point which lays\r\non the distance not greater than from the current rightmost point. We\r\ncan easily find out the number of points in the segment between two\r\npointers, excluding the rightmost point. Letâs call this number . Then\r\nthere exist exactly triplets of points with the fixed rightmost point.\r\nThe only thing left is to sum up these values for all rightmost points.\r\n",
    "hint": []
}