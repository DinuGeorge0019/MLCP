{
    "link": "https://codeforces.com//contest/2115/problem/D",
    "problemId": "3415146",
    "problem_idx": "D",
    "shortId": "2115D",
    "contest_number": "2115",
    "problem_submissions": {
        "A": [
            322373149,
            322373057,
            322191671,
            322196906,
            322191306,
            322207089,
            322339019,
            322205731,
            322191602,
            322193299,
            322321188,
            322320656,
            322193684,
            322193937,
            322193846,
            322195728,
            322193849,
            322208657,
            322196496,
            322194770,
            322195138,
            322193397,
            322277408,
            322205364,
            322201021
        ],
        "E": [
            322277481,
            322279542,
            322287881,
            322287269,
            322268790,
            322276073,
            322479322,
            322316002,
            322463290,
            322674274,
            322484220
        ],
        "D": [
            322247280,
            322249604,
            322253666,
            322244252,
            322244159,
            322252360,
            322259840,
            322274633,
            322274421,
            322243918,
            322262198,
            322264257,
            322258885,
            322256903,
            322256375,
            322270049,
            322285061,
            322255261,
            322270426,
            322274051
        ],
        "C": [
            322226886,
            322242092,
            322247023,
            322262817,
            322237987,
            322228189,
            322234047,
            322256038,
            322250633,
            322253986,
            322247586,
            322244155,
            322267167,
            322253884,
            322236170,
            322239045,
            322256498,
            322247239
        ],
        "B": [
            322199788,
            322207830,
            322209032,
            322228331,
            322214165,
            322204435,
            322203425,
            322201226,
            322209167,
            322226797,
            322225099,
            322216043,
            322219704,
            322219745,
            322213225,
            322218856,
            322205348,
            322216288,
            322222101,
            322216208
        ],
        "F2": [
            322365448
        ],
        "F1": [
            322365418
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143418",
    "editorial": "SolutionWe can assume that the initial value of is . In each step, we\r\ncan choose to add to , or do nothing. Each suffix of the sequence can be\r\nseen as a subproblem, so we prove inductively that the answer, as a\r\nfunction of the initial value of , is an affine transformation, i.e.,\r\n.When , this is trivial: .When , we can choose to add to or not. Let\r\ndenote the answer function from the second operation onward. The two\r\npossible outcomes correspond to: Not choosing : result is Choosing :\r\nresult is . Although we donâ€™t know the exact value of , is a constant.\r\nSuppose the highest set bit in the binary representation of is at\r\nposition . Then, the decision of whether to apply this operation depends\r\nonly on: Whether we want to maximize or minimize the final answer\r\nWhether the -th bit of is or It is easy to observe that the new function\r\n(before this decision) remains a affine transformation, satisfying\r\n.Based on the above process, we can represent the answer function using\r\na orthogonal basis. Each element in the orthogonal basis represents a\r\nvector in the null space of . Additionally, we keep a tag for each\r\nvector, indicating whether it is used to increase or decrease the value\r\nof .In each iteration, we try to insert into the linear basis, and\r\nassociate it with a tag depending on the index .Time complexity: per\r\ntest case.Memory complexity: per test case.\r\n",
    "name": "D. Gellyfish and Forget-Me-Not",
    "statement": "Gellyfish and Flower are playing a game.The game consists of two arrays\r\nof n integers a_1,a_2,\r\nldots,a_n and b_1,b_2,\r\nldots,b_n, along with a binary string c_1c_2\r\nldots c_n of length n.There is also an integer x which is initialized to\r\n0.The game consists of n rounds. For i = 1,2,\r\nldots,n, the round proceeds as follows: If c_i =\r\nmathtt{0}, Gellyfish will be the active player. Otherwise, if c_i =\r\nmathtt{1}, Flower will be the active player. The active player will\r\nperform of the following operations: Set x:=x\r\noplus a_i. Set x:=x\r\noplus b_i. Here,\r\noplus denotes the bitwise XOR operation. Gellyfish wants to minimize the\r\nfinal value of x after n rounds, while Flower wants to maximize it. Find\r\nthe final value of x after all n rounds if both players play optimally.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "dp",
        "games",
        "greedy",
        "math"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Gellyfish and Forget-Me-Not.json",
    "hint": [
        "Hint 1 Consider if consists only of , this problem turned out to be another classic problem. So you need at least something that you know what it is.",
        "Hint 2 \"linear basis\" is the answer to Hint 1 . Please try to understand this: all addition operations are interpreted as XOR operations."
    ]
}