{
    "link": "https://codeforces.com//contest/438/problem/B",
    "problemId": "9964",
    "problem_idx": "B",
    "shortId": "438B",
    "contest_number": "438",
    "problem_submissions": {
        "D": [
            6770791,
            6768533,
            6771704,
            6771558,
            6772564,
            6771497,
            6770667,
            6772913,
            6771311,
            6770765,
            6771398,
            6772501,
            6771788,
            6773163,
            6773332,
            6768886,
            6769122
        ],
        "C": [
            6769384,
            6771772,
            6770600,
            6769986,
            6769707,
            6770322,
            6773155,
            6770624,
            6772819,
            6772764,
            6772925,
            6771300,
            6773617,
            6772385,
            6771439,
            6774162
        ],
        "B": [
            6766623,
            6766692,
            6766851,
            6766923,
            6766505,
            6769047,
            6767842,
            6768520,
            6767461,
            6766938,
            6767311,
            6768462,
            6767303,
            6769160,
            6766952,
            6767030,
            6767555
        ],
        "A": [
            6765683,
            6765687,
            6765701,
            6765754,
            6767149,
            6765703,
            6766656,
            6766754,
            6766105,
            6765753,
            6765896,
            6765923,
            6765796,
            6768072,
            6766138,
            6765696,
            6765784
        ],
        "E": [
            6784450,
            6784415,
            39812196,
            39812172,
            6951957
        ]
    },
    "name": "B. The Child and Zoo",
    "statement": "Of course our child likes walking in a zoo. The zoo has areas, that are\r\nnumbered from to . The -th area contains animals in it. Also there are\r\nroads in the zoo, and each road connects two distinct areas. Naturally\r\nthe zoo is connected, so you can reach any area of the zoo from any\r\nother area using the roads.Our child is very smart. Imagine the child\r\nwant to go from area to area . Firstly he considers all the simple\r\nroutes from to . For each route the child writes down the number, that\r\nis equal to the minimum number of animals among the route areas. Let\u2019s\r\ndenote the largest of the written numbers as . Finally, the child\r\nchooses one of the routes for which he writes down the value .After the\r\nchild has visited the zoo, he thinks about the question: what is the\r\naverage value of for all pairs ? Can you answer his question?\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <ctime>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <list>\n#include <set>\n#include <map>\n#include <iostream>\n\n#define pb push_back\n#define mp make_pair\n#define TASKNAME \"\"\n\n#ifdef LOCAL\n#define eprintf(...) fprintf(stderr,__VA_ARGS__)\n#else\n#define eprintf(...)\n#endif\n\n#define TIMESTAMP(x) eprintf(\"[\" #x \"] Time = %.3lfs\\n\",clock()*1.0/CLOCKS_PER_SEC)\n\n#ifdef linux\n#define LLD \"%lld\"\n#else\n#define LLD \"%I64d\"\n#endif\n\n#define sz(x) ((int)(x).size())\n\nusing namespace std;\n\ntypedef long double ld;\ntypedef long long ll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef vector<pii> vpii;\n\nconst int inf = 1e9;\nconst double eps = 1e-9;\nconst double INF = inf;\nconst double EPS = eps;\n\nconst int maxn = 110000;\n\nll res, cval;\nint Snm[maxn], Sz[maxn];\n\nint SNM (int v)\n{\n  if (Snm[v]==v)\n    return v;\n  Snm[v]=SNM(Snm[v]);\n  return Snm[v];\n}\n\nvoid join (int a, int b)\n{\n  a=SNM(a), b=SNM(b);\n  if (a==b)\n    return;\n  if (Sz[a]>Sz[b])\n    swap(a,b);\n  res+=cval*1ll*Sz[a]*1ll*Sz[b];\n  Sz[b]+=Sz[a], Snm[a]=b;\n}\n        \npii A[maxn];\nint Val[maxn];\nvi G[maxn];\nbool u[maxn];\n\nint main()\n{\n  int i, j, n, m, v1, v2;\n  #ifdef LOCAL\n  freopen(TASKNAME\".in\",\"r\",stdin);\n  freopen(TASKNAME\".out\",\"w\",stdout);\n  #endif\n  scanf(\"%d%d\", &n, &m);\n  for (i=0; i<n; i++)\n    scanf(\"%d\", &A[i].first), A[i].second=i, Val[i]=A[i].first, Snm[i]=i, Sz[i]=1;\n  sort(A,A+n), reverse(A,A+n);  \n  for (i=0; i<m; i++)\n    scanf(\"%d%d\", &v1, &v2), v1--, v2--, G[v1].pb(v2), G[v2].pb(v1);\n  for (i=0; i<n; i++)\n  {\n    int v=A[i].second;\n    u[v]=1, cval=Val[v];\n    for (j=0; j<(int)G[v].size(); j++)\n    {\n      int nv=G[v][j];\n      if (u[nv])\n        join(v,nv);\n    }\n  }\n  res*=2ll;\n  ld ans=res;\n  ans/=n*1ll*(n-1);\n  printf(\"%.8lf\\n\", (double)ans);\n  TIMESTAMP(end);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "dsu",
        "sortings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. The Child and Zoo.json",
    "editorial_link": "https://codeforces.com/blog/entry/12513",
    "editorial": "First, there is nothing in the graph. We sort all the areas of the original graph by their animal numbers in decreasing order, and then add them one by one.\n\nWhen we add area i, we add all the roads (i,?j), where j is some area that has been added.\n\nAfter doing so, we have merged some connected components. If p and q are two areas in different connected components we have merged just then, f(p,?q) must equals the vi, because they are not connected until we add node i.\n\nSo we use Union-Find Set to do such procedure, and maintain the size of each connected component, then we can calculate the answer easily."
}