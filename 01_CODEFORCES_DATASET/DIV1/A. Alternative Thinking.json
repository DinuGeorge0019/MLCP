{"link": "https://codeforces.com//contest/603/problem/A", "problemId": "42010", "problem_idx": "A", "shortId": "603A", "contest_number": "603", "problem_submissions": {"E": [14601511, 14617280, 14604705, 14600443], "B": [14593533, 14587045, 14589326, 14589031, 14586181, 14589818, 14588082, 14588941, 14588018, 14589775, 14590006, 14589946, 14591160, 14588048, 14591719, 14589609, 14588347, 14594211, 14588610], "C": [14591371, 14590095, 14592691, 14592593, 14589544, 14587905, 14590360, 14592646, 14593601, 14593350, 14595265, 14602871, 14589734, 14593412, 14595137, 14591430, 14591097, 14598084, 14593035], "A": [14587155, 14591228, 14594284, 14586714, 14587304, 14592455, 14586190, 14586556, 14586409, 14588357, 14613579, 14591988, 14586421, 14587516, 14587463, 14586240, 14590046, 14586262], "D": [14596780, 14600081, 14597772, 14601222, 14598361, 14599882, 14599185, 14602018, 14603122, 14599499]}, "name": "A. Alternative Thinking", "statement": "Kevin has just recevied his disappointing results on the USA\r\nIdentification of Cows Olympiad (USAICO) in the form of a binary string\r\nof length . Each character of Kevin\u2019s string represents Kevin\u2019s score on\r\none of the questions of the olympiad for a correctly identified cow and\r\notherwise.However, all is not lost. Kevin is a big proponent of\r\nalternative thinking and believes that his score, instead of being the\r\nsum of his points, should be the length of the longest alternating\r\nsubsequence of his string. Here, we define an of a string as a\r\nsubsequence where no two consecutive elements are equal. For example, ,\r\n, and are alternating sequences, while and are not.Kevin, being the\r\nsneaky little puffball that he is, is willing to hack into the USAICO\r\ndatabases to improve his score. In order to be subtle, he decides that\r\nhe will flip exactly one substring that is, take a non-empty substring\r\nof his score and change all s in that substring to s and vice versa.\r\nAfter such an operation, Kevin wants to know the length of the longest\r\npossible alternating subsequence that his string could have.\r\n", "solutions": ["#include<stdio.h>\n#include<iostream>\n#include<vector>\n#include<cmath>\n#include<algorithm>\n#include<memory.h>\n#include<map>\n#include<set>\n#include<queue>\n#include<list>\n#include<sstream>\n#include<cstring>\n#define mp make_pair\n#define pb push_back      \n#define F first\n#define S second\n#define SS stringstream\n#define sqr(x) ((x)*(x))\n#define m0(x) memset(x,0,sizeof(x))\n#define m1(x) memset(x,63,sizeof(x))\n#define CC(x) cout << (x) << endl\n#define pw(x) (1ll<<(x))\n#define buli(x) __builtin_popcountll(x)\n#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)\n#define M 1000000007\n#define N 211111\n\n#define TASK \"1\"\n\nusing namespace std;\ntypedef pair<int,int> pt;\n\nint n;\nchar s[N];\n\nint dp[N][3][2];\n\nint main(){\n//\tfreopen(TASK\".in\",\"r\",stdin);\t\n//\tfreopen(TASK\".out\",\"w\",stdout);\n\tscanf(\"%d\\n\", &n);\n\tgets(s);\n\tfor (int i = 0; i <= n; i++) for (int j = 0; j <= 2; j++) for (int k = 0; k < 2; k++) dp[i][j][k] = -1e9 -1;\n\tdp[0][0][0] = 0;\n\tdp[0][0][1] = 0;\n\n\tfor (int i = 0; i < n; i++) for (int j = 0; j <= 2; j++) for (int k = 0; k < 2; k++) if (dp[i][j][k] >= 0) {\n\n\t\tint cur = s[i] - '0';\n\t\tif (j == 1) cur ^= 1;\n\t\tdp[i + 1][j][k] = max(dp[i + 1][j][k], dp[i][j][k]);\n\n\t\tif (cur == k) dp[i + 1][j][k ^ 1] = max(dp[i + 1][j][k ^ 1], dp[i][j][k] + 1);\n\n\t\tif (j <= 1) dp[i][j + 1][k] = max(dp[i][j + 1][k], dp[i][j][k]);\n\t}\n\tint ans = 0;\n\tfor (int j = 0; j <= 2; j++) for (int k = 0; k < 2; k++) ans = max(ans, dp[n][j][k]);\n\tcout << ans << endl;\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["dp", "greedy", "math"], "dificulty": "1600", "interactive": false}