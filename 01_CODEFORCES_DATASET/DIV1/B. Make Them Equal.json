{
    "link": "https://codeforces.com//contest/1416/problem/B",
    "problemId": "740366",
    "problem_idx": "B",
    "shortId": "1416B",
    "contest_number": "1416",
    "problem_submissions": {
        "F": [
            94006266,
            94013395,
            94017337,
            94007333,
            94012350,
            94016693,
            94144598,
            94144345,
            94143862,
            94143815,
            94143507,
            94143372,
            94134107,
            94022751,
            94013371,
            94123054,
            93993751,
            93995209,
            94206946,
            94047832
        ],
        "D": [
            93996097,
            94002143,
            93994280,
            93996848,
            94000279,
            93995262,
            93992025,
            94030965,
            93988840,
            94001509,
            93996287,
            94006105,
            94007577,
            94017080,
            93995866,
            93997659,
            93998139,
            93997214,
            93995418,
            94000331,
            93999706
        ],
        "E": [
            93989598,
            93993245,
            94005344,
            94008684,
            94029993,
            94019586,
            94015916,
            94018911,
            94274661,
            94428216,
            94428140,
            94046134
        ],
        "B": [
            93977851,
            93981480,
            93977205,
            93989726,
            93978642,
            93985288,
            93976209,
            93981357,
            93985099,
            93999768,
            93994963,
            94270201,
            93976947,
            93987758,
            93986950,
            93981437,
            93979361,
            93987047,
            93979513
        ],
        "C": [
            93974213,
            93978374,
            93983878,
            93979532,
            94282160,
            93989242,
            93980978,
            93980593,
            93976201,
            93990186,
            93986370,
            93974300,
            93996660,
            94001007,
            93983516,
            93980305,
            93980649,
            93977960,
            93984553,
            93980471,
            93985644
        ],
        "A": [
            93970422,
            93970885,
            93970919,
            93970033,
            93971425,
            93971578,
            93970140,
            93970220,
            93970538,
            93970561,
            93981050,
            94269181,
            94002877,
            93970437,
            93972131,
            93974465,
            93974988,
            93972065,
            93971571,
            93970260
        ]
    },
    "name": "B. Make Them Equal",
    "statement": "You are given an array a consisting of n integers, numbered from 1 to n.\r\nYou can perform the following operation no more than 3n times: choose\r\nthree integers i, j and x (1\r\nle i, j\r\nle n; 0\r\nle x\r\nle 10^9); assign a_i := a_i - x\r\ncdot i, a_j := a_j + x\r\ncdot i. After each operation, all elements of the array should be .Can\r\nyou find a sequence of no more than 3n operations after which all\r\nelements of the array are equal?\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 27.09.2020 18:16:30       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n;\n    cin >> n;\n    vector<int> a(n + 1);\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n      cin >> a[i];\n      sum += a[i];\n    }\n    if (sum % n != 0) {\n      cout << -1 << '\\n';\n      continue;\n    }\n    int avg = sum / n;\n    vector<tuple<int, int, int>> ret;\n    auto Do = [&](int i, int j, int x) {\n      assert(a[i] >= x * i);\n      ret.emplace_back(i, j, x);\n      a[i] -= x * i;\n      a[j] += x * i;\n    };\n    for (int i = 2; i <= n; i++) {\n      int r = (i - a[i] % i) % i;\n      Do(1, i, r);\n      assert(a[i] % i == 0);\n      Do(i, 1, a[i] / i);\n    }\n    for (int i = 2; i <= n; i++) {\n      Do(1, i, avg);\n    }\n    cout << ret.size() << '\\n';\n    for (auto& t : ret) {\n      cout << get<0>(t) << \" \" << get<1>(t) << \" \" << get<2>(t) << '\\n';\n    }\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Make Them Equal.json",
    "editorial_link": "https://codeforces.com//blog/entry/83036",
    "editorial": "Let be the sum of the array. If is not divisible by , then the answer is\r\nobviously . Otherwise, there always exists a solution which uses no more\r\nthan queries. We will solve this problem in two phases.First phase:\r\ngather the sum in . Letâs iterate over in increasing order. If is\r\ndivisible by , we can immediately transfer it using one operation.\r\nOtherwise, we have to make it divisible by transferring from to . Note\r\nthat this operation does not break a condition on non-negativity because\r\nall are initially positive. This way, we successfully finish this phase\r\nusing at most operations.Second phase: distribute the sum across all\r\nelements. Just iterate over all and make a transfer of from to . This\r\nphase takes exactly operations.Time complexity: Space complexity:\r\n",
    "hint": []
}