{
    "link": "https://codeforces.com//contest/2115/problem/F1",
    "problemId": "3415148",
    "problem_idx": "F1",
    "shortId": "2115F1",
    "contest_number": "2115",
    "problem_submissions": {
        "A": [
            322373149,
            322373057,
            322191671,
            322196906,
            322191306,
            322207089,
            322339019,
            322205731,
            322191602,
            322193299,
            322321188,
            322320656,
            322193684,
            322193937,
            322193846,
            322195728,
            322193849,
            322208657,
            322196496,
            322194770,
            322195138,
            322193397,
            322277408,
            322205364,
            322201021
        ],
        "E": [
            322277481,
            322279542,
            322287881,
            322287269,
            322268790,
            322276073,
            322479322,
            322316002,
            322463290,
            322674274,
            322484220
        ],
        "D": [
            322247280,
            322249604,
            322253666,
            322244252,
            322244159,
            322252360,
            322259840,
            322274633,
            322274421,
            322243918,
            322262198,
            322264257,
            322258885,
            322256903,
            322256375,
            322270049,
            322285061,
            322255261,
            322270426,
            322274051
        ],
        "C": [
            322226886,
            322242092,
            322247023,
            322262817,
            322237987,
            322228189,
            322234047,
            322256038,
            322250633,
            322253986,
            322247586,
            322244155,
            322267167,
            322253884,
            322236170,
            322239045,
            322256498,
            322247239
        ],
        "B": [
            322199788,
            322207830,
            322209032,
            322228331,
            322214165,
            322204435,
            322203425,
            322201226,
            322209167,
            322226797,
            322225099,
            322216043,
            322219704,
            322219745,
            322213225,
            322218856,
            322205348,
            322216288,
            322222101,
            322216208
        ],
        "F2": [
            322365448
        ],
        "F1": [
            322365418
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143418",
    "editorial": "SolutionWe apply block decomposition to the operations, dividing every\r\noperations into a single round. Within each round, the sequence is\r\npartitioned into segments. For each segment, we maintain a queue that\r\nrecords all elements added to that segment during the round. Type 1 and\r\n2 operations can be handled directly by pushing into the appropriate\r\nsegment s queue or toggling a reversal flag. Type 3 (deletion) is\r\nhandled by marking the element as deleted without immediately removing\r\nit from queues. At the end of each round, we rebuild the sequence.\r\nSpecifically, for each position in the sequence, we record which segment\r\nit belongs to, and treat the position as containing all elements\r\ncurrently in that segmentâ€™s queue.For queries, we process the\r\ncontribution from each round one by one. In each round: Identify the\r\nsegment that contains position . Iterate through the queue of that\r\nsegment. For each element, if it has been marked as deleted, remove it\r\nfrom the front of the queue and continue; otherwise, consider it as\r\npresent. Since each element is inserted and deleted at most once per\r\nsegment, and each segment has amortized processing per round, the total\r\ncost per query remains efficient.We choose , resulting in rounds in\r\ntotal. The total time and space complexity is:\r\n",
    "name": "F1. Gellyfish and Lycoris Radiata  Easy Version ",
    "statement": "Gellyfish has an array consisting of n sets. Initially, all the sets are\r\nempty.Now Gellyfish will do q operations. Each operation contains one\r\nmodification operation and one query operation, for the i-th (1\r\nleq i\r\nleq q) operation:First, there will be a modification operation, which is\r\none of the following: operation: You are given an integer r. For the\r\n1-th to r-th sets, insert element i. Note that the element inserted here\r\nis i, the index of the operation, not the index of the set. operation:\r\nYou are given an integer r. Reverse the 1-th to r-th sets. operation:\r\nYou are given an integer x. Delete element x from all sets that contain\r\nx. Followed by a query operation: operation: You are given an integer p.\r\nOutput the smallest element in the p-th set (If the p-th set is empty,\r\nthe answer is considered to be 0). Now, Flower needs to provide the\r\nanswer for each query operation. Please help her!: Gellyfish will only\r\ngive the next operation after Flower has answered the previous query\r\noperation. That is, you need to solve this problem . Please refer to the\r\ninput format for more details.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "data structures"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\F1. Gellyfish and Lycoris Radiata  Easy Version .json",
    "hint": []
}