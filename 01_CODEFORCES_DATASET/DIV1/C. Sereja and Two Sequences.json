{
    "link": "https://codeforces.com//contest/425/problem/C",
    "problemId": "8919",
    "problem_idx": "C",
    "shortId": "425C",
    "contest_number": "425",
    "problem_submissions": {
        "B": [
            6493816,
            6490109,
            6487858,
            6492945,
            6493447,
            6494871,
            6503981,
            6490064,
            6487024,
            6487873,
            6488901,
            6490848,
            6487215,
            6488740,
            6491398,
            6488181,
            6494124
        ],
        "E": [
            6490795,
            6493696,
            6491349,
            6492041,
            6492843,
            6491006,
            6493942,
            6492765,
            6494748,
            6494561,
            6492813,
            6495319,
            6492515
        ],
        "D": [
            6489455,
            6489243,
            6493425,
            6488979,
            6491658,
            6492358,
            6492448,
            6491514,
            6489861,
            6490799,
            6495344,
            6495192,
            6489703,
            6494515,
            6492875,
            6489743,
            6494196,
            6487259
        ],
        "C": [
            6487948,
            6491220,
            6490395,
            6494547,
            6494500,
            6494191,
            6490274,
            6489790,
            6489399,
            6488464,
            6495052,
            6490305,
            6492770,
            6492019,
            6492713,
            6491433,
            6490329,
            6492999,
            6490722
        ],
        "A": [
            6485874,
            6485358,
            6485796,
            6485600,
            6486055,
            6486577,
            6485984,
            6486210,
            6485602,
            6485840,
            6487099,
            6485836,
            6485353,
            6486318,
            6486057,
            6485564,
            6493037
        ]
    },
    "name": "C. Sereja and Two Sequences",
    "statement": "Sereja has two sequences and , consisting of integers. One day Sereja\r\ngot bored and he decided two play with them. The rules of the game was\r\nvery simple. Sereja makes several moves, in one move he can perform one\r\nof the following actions: Choose several (at least one) first elements\r\nof sequence (non-empty prefix of ), choose several (at least one) first\r\nelements of sequence (non-empty prefix of ); the element of sequence\r\nwith the maximum index among the chosen ones must be equal to the\r\nelement of sequence with the maximum index among the chosen ones; remove\r\nthe chosen elements from the sequences. Remove all elements of both\r\nsequences. The first action is worth energy units and adds one dollar to\r\nSereja’s electronic account. The second action is worth the number of\r\nenergy units equal to the number of elements Sereja removed from the\r\nsequences before performing this action. After Sereja performed the\r\nsecond action, he gets all the money that he earned on his electronic\r\naccount during the game.Initially Sereja has energy units and no money\r\non his account. What maximum number of money can Sereja get? Note, the\r\namount of Seraja’s energy mustn’t be negative at any time moment.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <ctime>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <fstream>\n#include <cstdlib>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <numeric>\n\n#define mp make_pair\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#define forn(i, n) for (int i = 0; i < (int)(n); ++i)\n#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)\n\nusing namespace std;\n\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef long long i64;\ntypedef vector<i64> vi64;\ntypedef vector<vi64> vvi64;\n\nconst int maxn = 100001;\nconst int maxq = 100001;\nconst int maxl = 400;\n\nint dp[maxl][maxn];\nint a[maxn];\nvi b[maxq];\n\nint main() {\n#ifdef LOCAL_DEFINE\n    freopen(\"input.txt\", \"rt\", stdin);\n    freopen(\"output.txt\", \"wt\", stdout);\n#endif\n\n    int N, M, S, E;\n    scanf(\"%d%d%d%d\", &N, &M, &S, &E);\n    forn(i, N) {\n        int x;\n        scanf(\"%d\", &x);\n        a[i] = x;\n    }\n    forn(i, M) {\n        int x;\n        scanf(\"%d\", &x);\n        b[x].pb(i);\n    }\n\n    int ans = 0;\n    forn(i, N) {\n        dp[1][i] = b[a[i]].empty() ? 1e9 : b[a[i]][0];\n        if (E + i + dp[1][i] + 2 <= S) {\n            ans = 1;\n        }\n    }\n\n    for (int j = 2; j <= S / E; ++j) {\n        int minI = 1e9;\n        forn(i, N) {\n            vi::const_iterator it = upper_bound(all(b[a[i]]), minI);\n            if (it == b[a[i]].end()) {\n                dp[j][i] = 1e9;\n            } else {\n                dp[j][i] = *it;\n            }\n            if (j * E + i + 1 + dp[j][i] + 1 <= S) {\n                ans = j;\n            }\n            minI = min(minI, dp[j - 1][i]);\n        }\n    }\n    cout << ans << '\\n';\n\n\n#ifdef LOCAL_DEFINE\n    cerr << \"Time elapsed: \" << 1.0 * clock() / CLOCKS_PER_SEC << \" s.\\n\";\n#endif\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Sereja and Two Sequences.json",
    "editorial_link": "https://codeforces.com//blog/entry/11998",
    "editorial": "In thgis problem we will use dynamic programming: minimal pozition of\r\ndeleted element in second array, such that we have made first operation\r\ntimes and have deleted not more then elements from first array. Lets\r\ndecided how to calculate transfers. Standing in pozition we can change\r\nnothing and go to pozition , by other words make transfer . What happens\r\nwhen we make first operation with fixed prefix(by -th element) in first\r\narray? We should find element in second array with number greater and\r\nvalue equal to , lets its pozition is , so we need to make transfer .\r\nHow to find required element quickly: lets just do vector of pozition in\r\nsecond array for all different elements that contains in second array.\r\nThen we can simply use binary search.\r\n",
    "hint": []
}