{
    "link": "https://codeforces.com//contest/1103/problem/C",
    "problemId": "286147",
    "problem_idx": "C",
    "shortId": "1103C",
    "contest_number": "1103",
    "problem_submissions": {
        "E": [
            48753270,
            48771690,
            48772282
        ],
        "C": [
            48737996,
            48751833,
            48742130,
            48750924,
            48753455,
            48785591,
            48744586,
            48747377,
            48750469,
            48752184,
            48749897,
            48750575,
            48750490,
            48749685,
            48751441
        ],
        "B": [
            48729408,
            48731995,
            48733031,
            48738196,
            48732688,
            48735686,
            48732548,
            48745783,
            48738143,
            48736855,
            48734767,
            48731627,
            48740835,
            48746307,
            48736276,
            48737788,
            48737739,
            48735990,
            48736042
        ],
        "A": [
            48723784,
            48727790,
            48725191,
            48732437,
            48724396,
            48725785,
            48724635,
            48726318,
            48725482,
            48726526,
            48724739,
            48726676,
            48725374,
            48729843,
            48724696,
            48726116,
            48730660,
            48725296,
            48724384
        ],
        "D": [
            48745574,
            48759308,
            48758091,
            48757563,
            48785689,
            48755420,
            48758598,
            48759719,
            48935021,
            48790648,
            48790368,
            48790273,
            48768973,
            48768847,
            48768502,
            48768204,
            48768156,
            48759654,
            48763805,
            48758531
        ]
    },
    "name": "C. Johnny Solving",
    "statement": "Today is tuesday, that means there is a dispute in JOHNNY SOLVING team\r\nagain: they try to understand who is Johnny and who is Solving. That\u2019s\r\nwhy guys asked Umnik to help them. Umnik gave guys a connected graph\r\nwith n vertices without loops and multiedges, such that a degree of any\r\nvertex is at least 3, and also he gave a number 1\r\nleq k\r\nleq n. Because Johnny is not too smart, he promised to find a simple\r\npath with length at least\r\nfrac{n}{k} in the graph. In reply, Solving promised to find k simple by\r\nvertices cycles with representatives, such that: Length of each cycle is\r\nat least 3. Length of each cycle is not divisible by 3. In each cycle\r\nmust be a representative - vertex, which belongs only to this cycle\r\namong all cycles. You need to help guys resolve the dispute, for that\r\nyou need to find a solution for Johnny: a simple path with length at\r\nleast\r\nfrac{n}{k} (n is not necessarily divided by k), or solution for Solving:\r\nk cycles that satisfy all the conditions above. If there is no any\r\nsolution - print -1.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\n#define PB push_back\n#define MP make_pair\n#define LL long long\n#define int LL\n#define FOR(i,a,b) for(int i = (a); i <= (b); i++)\n#define RE(i,n) FOR(i,1,n)\n#define REP(i,n) FOR(i,0,(int)(n)-1)\n#define R(i,n) REP(i,n)\n#define VI vector<int>\n#define PII pair<int,int>\n#define LD long double\n#define FI first\n#define SE second\n#define st FI\n#define nd SE\n#define ALL(x) (x).begin(), (x).end()\n#define SZ(x) ((int)(x).size())\n\n#define unordered_map __fast_unordered_map\ntemplate<class Key, class Value, class Hash = std::hash<Key>>\nusing unordered_map = __gnu_pbds::gp_hash_table<Key, Value, Hash>;\n\ntemplate<class C> void mini(C &a4, C b4) { a4 = min(a4, b4); }\ntemplate<class C> void maxi(C &a4, C b4) { a4 = max(a4, b4); }\n\ntemplate<class TH> void _dbg(const char *sdbg, TH h){ cerr<<sdbg<<'='<<h<<endl; }\ntemplate<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a) {\n  while(*sdbg!=',')cerr<<*sdbg++;\n  cerr<<'='<<h<<','; _dbg(sdbg+1, a...);\n}\n\ntemplate<class T> ostream &operator<<(ostream& os, vector<T> V) {\n  os << \"[\"; for (auto vv : V) os << vv << \",\"; return os << \"]\";\n}\ntemplate<class L, class R> ostream &operator<<(ostream &os, pair<L,R> P) {\n  return os << \"(\" << P.st << \",\" << P.nd << \")\";\n}\n\n#ifdef LOCAL\n#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)\n#else\n#define debug(...) (__VA_ARGS__)\n#define cerr if(0)cout\n#endif\n\nconst int MaxN = 3e5 + 100;\n\nvector<int> adj[MaxN];\nint depth[MaxN];\nint parent[MaxN];\nint who_max_depth;\nbool is_leaf[MaxN];\nbool visited[MaxN];\n\nint N, M, K;\n\nvoid Dfs(int v, int p) {\n  visited[v] = true;\n  parent[v] = p;\n  is_leaf[v] = true;\n  for (int s : adj[v]) {\n    if (visited[s]) { continue; }\n    depth[s] = depth[v] + 1;\n    Dfs(s, v);\n    is_leaf[v] = false;\n  }\n  if (depth[v] > depth[who_max_depth]) {\n    who_max_depth = v;\n  }\n}\n\nint32_t main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(11);\n  cerr << fixed << setprecision(6);\n\n  cin >> N >> M >> K;\n\n  if (N == 1) {\n    cout << \"PATH\\n1\\n1\\n\";\n    return 0;\n  }\n\n  for (int i = 0; i < M; ++i) {\n    int u, v;\n    cin >> u >> v;\n    adj[u].PB(v);\n    adj[v].PB(u);\n  }\n\n  who_max_depth = 1;\n  depth[1] = 1;\n  Dfs(1, -1);\n\n  const int bound = (N + K - 1) / K;\n\n  if (depth[who_max_depth] >= bound) {\n    vector<int> path{who_max_depth};\n    while (path.back() != 1) {\n      path.PB(parent[path.back()]);\n    }\n    assert(SZ(path) >= bound);\n    cout << \"PATH\\n\";\n    cout << SZ(path) << \"\\n\";\n    for (int v : path) { cout << v << \" \"; }\n    cout << \"\\n\";\n    return 0;\n  }\n\n  vector<VI> cycles;\n  for (int v = 1; v <= N; ++v) {\n    if (!is_leaf[v]) { continue; }\n    vector<int> edges_up;\n    for (int s : adj[v]) {\n      if (s == parent[v]) { continue; }\n      edges_up.PB(s);\n    }\n\n    debug(v, edges_up);\n    assert(SZ(edges_up) >= 2);\n    edges_up.resize(2);\n\n    bool found = false;\n    for (int s : edges_up) {\n      const int len = depth[v] - depth[s] + 1;\n      if (len % 3 == 0) { continue; }\n\n      found = true;\n      vector<int> cyc{v};\n      while (cyc.back() != s) {\n        cyc.PB(parent[cyc.back()]);\n      }\n      cycles.PB(cyc);\n      break;\n    }\n\n    if (!found) {\n      int a = edges_up[0];\n      int b = edges_up[1];\n      if (depth[a] < depth[b]) { swap(a, b); }\n      vector<int> cyc{v, a};\n      while (cyc.back() != b) {\n        cyc.PB(parent[cyc.back()]);\n      }\n      cycles.PB(cyc);\n    }\n  }\n\n  debug(cycles);\n  assert(SZ(cycles) >= K);\n  cycles.resize(K);\n  cout << \"CYCLES\\n\";\n  for (auto &cyc : cycles) {\n    cout << SZ(cyc) << \"\\n\";\n    for (int v : cyc) { cout << v << \" \"; }\n    cout << \"\\n\";\n  }\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "math"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Johnny Solving.json",
    "editorial_link": "https://codeforces.com//blog/entry/64722",
    "editorial": "Let's build a dfs spanning tree from the vertex 1\n and find the depth of the tree. If the depth is at least nk\n then we can just print the path from the root to the deepest vertex.\n\nOtherwise, there will be at least k\n leaves in the tree. Let's prove it. Consider a tree with c\n leaves, after that consider a path from a particular leaf to the root, let's denote length of i\n-th path (in vertices) by xi\n. We can say that x1+\u0085+xc?n\n, because every particular vertex in the tree will be covered by one of pathways. So, using Dirichlet's principle we can say that max(x1,\u0085,xc)?nc\n. Hence, depth of the tree is at least nc\n.\n\nNow, consider a leaf in our spanning tree, let's denote it like v\n. This leaf has at least 2 back edges (edges which connected with one of ancestors), let's denote ancestors like x\n and y\n. Obviosly, we have three cycles here: path from x\n to v\n with corresponding back edge, the same cycle from y\n to v\n, and path between x\n and y\n with two back edges connected with v\n. Lengths of these cycles are d(v,x)+1\n, d(v,y)+1\n and d(x,y)+2\n, where d(a,b)\n - distance between vertices a and b. It's clear that one of these numbers is not divisible by three. Last problem is to choose representative - we should choose leaves. Size of output is not exceed 106\n because the depth of our tree at most nk\n and each cycle has length O(nk)\n."
}