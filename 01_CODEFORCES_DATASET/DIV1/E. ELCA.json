{"link": "https://codeforces.com//contest/482/problem/E", "problemId": "15992", "problem_idx": "E", "shortId": "482E", "contest_number": "482", "problem_submissions": {"E": [8395492, 8395487, 8395485, 8395484, 8395481], "D": [8386071, 8389539, 8389292, 8390634, 8390063, 8388875, 8388934, 8389261, 8389687, 8445804, 8390689, 8390772, 9364523, 8390299, 8389829], "C": [8384458, 8395228, 8386818, 8387122, 8391988, 8393481, 8394742, 8391508, 8393489, 8387159, 8387776], "B": [8382609, 8381668, 8382625, 8383076, 8381676, 8382713, 8382593, 8383732, 8383882, 8385352, 8383031, 8383352, 8382682, 8381439, 8383046, 8382782], "A": [8380309, 8380134, 8380145, 8380792, 8380181, 8383494, 8380551, 8380832, 8382370, 8381220, 8380876, 8380679, 8381208, 8382400, 8381109, 8380183]}, "name": "E. ELCA", "statement": "You have a root tree containing vertexes. Let\u2019s number the tree vertexes\r\nwith integers from to . The tree root is in the vertex .Each vertex\r\n(except fot the tree root) has a direct ancestor . Also each vertex has\r\nits integer value . Your task is to perform following queries: (). If\r\nisn\u2019t in subtree of , you must perform the assignment . Otherwise you\r\nmust perform assignment . Note that after this query the graph continues\r\nto be a tree consisting of vertexes. . Perform assignment . Your task is\r\nfollowing. Before starting performing queries and after each query you\r\nhave to calculate expected value written on the lowest common ancestor\r\nof two equiprobably selected vertices and . Here lowest common ancestor\r\nof and is the deepest vertex that lies on the both of the path from the\r\nroot to vertex and the path from the root to vertex . Please note that\r\nthe vertices and can be the same (in this case their lowest common\r\nancestor coincides with them).\r\n", "solutions": ["#include <cstring>\n#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <memory.h>\n#include <cassert>\n\nusing namespace std;\n\nconst int N = 200010;\nconst int BLOCK = 350;\n\nvector <int> g[N];\nint pv[N];\nint value[N];\nlong long coeff[N];\nbool imp[N];\nint down[N];\nlong long change[N], total[N];\nint up[N];\nlong long sz[N];\nint depth[N];\nlong long ans;\n\nvoid dfs(int v) {\n  coeff[v] = 0;\n  sz[v] = 1;\n  down[v] = -1;\n  int only = -1;\n  for (int j = 0; j < (int)g[v].size(); j++) {\n    int u = g[v][j];\n    depth[u] = depth[v] + 1;\n    dfs(u);\n    sz[v] += sz[u];\n    coeff[v] -= sz[u] * sz[u];\n    if (down[u] != -1) {\n      if (down[v] == -1) {\n        down[v] = down[u];\n        only = u;\n      } else {\n        imp[v] = true;\n      }\n    }\n  }\n  if (imp[v]) {\n    down[v] = v;\n  }\n  coeff[v] += sz[v] * sz[v];\n  ans += value[v] * coeff[v];\n  if (!imp[v] && only != -1) {\n    change[v] = (sz[v] + 1) * (sz[v] + 1) - sz[v] * sz[v];\n    change[v] -= (sz[only] + 1) * (sz[only] + 1) - sz[only] * sz[only];\n    change[v] *= value[v];\n  } else {\n    change[v] = 0;\n  }\n}\n\nchar op[N];\nint arg1[N], arg2[N];\n\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  for (int i = 1; i <= n; i++) {\n    g[i].clear();\n  }\n  pv[1] = -1;\n  for (int i = 2; i <= n; i++) {\n    scanf(\"%d\", pv + i);\n    g[pv[i]].push_back(i);\n  }\n  for (int i = 1; i <= n; i++) {\n    scanf(\"%d\", value + i);\n  }\n  int tt;\n  scanf(\"%d\", &tt);\n  for (int qq = 1; qq <= tt; qq++) {\n    char ch = getchar();\n    while (ch != 'P' && ch != 'V') {\n      ch = getchar();\n    }\n    op[qq] = ch;\n    scanf(\"%d %d\", arg1 + qq, arg2 + qq);\n  }\n  int next_q = 1;\n  while (next_q <= tt) {\n    int last_q = next_q + BLOCK - 1;\n    if (last_q > tt) {\n      last_q = tt;\n    }\n    for (int i = 1; i <= n; i++) {\n      imp[i] = false;\n    }\n    for (int qq = next_q; qq <= last_q; qq++) {\n      if (op[qq] == 'P') {\n        imp[arg1[qq]] = true;\n        imp[arg2[qq]] = true;\n      } else {\n        imp[arg1[qq]] = true;\n      }\n    }\n    ans = 0;\n    depth[1] = 0;\n    dfs(1);\n    for (int i = 1; i <= n; i++) {\n      up[i] = i;\n      total[i] = 0;\n    }\n    for (int i = 1; i <= n; i++) {\n      if (down[i] != -1) {\n        total[down[i]] += change[i];\n        if (depth[i] < depth[up[down[i]]]) {\n          up[down[i]] = i;\n        }\n      }\n    }\n    if (next_q == 1) {\n      printf(\"%.15lf\\n\", (double)(1.0 * ans / n / n));\n    }\n    for (int qq = next_q; qq <= last_q; qq++) {\n      if (op[qq] == 'P') {\n        int v = arg1[qq];\n        int u = arg2[qq];\n        int z = u;\n        while (z != v && z != -1) {\n          z = pv[up[z]];\n        }\n        if (z == v) {\n          swap(u, v);\n        }\n        {\n          int z = v;\n          while (z != -1) {\n            ans -= total[z] * sz[v];\n            int new_z = pv[up[z]];\n            if (new_z == -1) {\n              break;\n            }\n            ans -= coeff[new_z] * value[new_z];\n            coeff[new_z] -= sz[new_z] * sz[new_z];\n            sz[new_z] -= sz[v];\n            coeff[new_z] += sz[new_z] * sz[new_z];\n            if (up[z] != z) {\n              coeff[new_z] += sz[up[z]] * sz[up[z]];\n              sz[up[z]] -= sz[v];\n              coeff[new_z] -= sz[up[z]] * sz[up[z]];\n            } else {\n              if (z != v) {\n                coeff[new_z] += (sz[up[z]] + sz[v]) * (sz[up[z]] + sz[v]);\n                coeff[new_z] -= sz[up[z]] * sz[up[z]];\n              } else {\n                coeff[new_z] += sz[up[z]] * sz[up[z]];\n              }\n            }\n            ans += coeff[new_z] * value[new_z];\n            z = new_z;\n          }\n        }\n        {\n          ans -= coeff[u] * value[u];\n          coeff[u] -= sz[u] * sz[u];\n          sz[u] += sz[v];\n          coeff[u] += sz[u] * sz[u];\n          coeff[u] -= sz[v] * sz[v];\n          ans += coeff[u] * value[u];\n        }\n        {\n          int z = u;\n          while (z != -1) {\n            ans += total[z] * sz[v];\n            int new_z = pv[up[z]];\n            if (new_z == -1) {\n              break;\n            }\n            ans -= coeff[new_z] * value[new_z];\n            coeff[new_z] -= sz[new_z] * sz[new_z];\n            sz[new_z] += sz[v];\n            coeff[new_z] += sz[new_z] * sz[new_z];\n            if (up[z] != z) {\n              coeff[new_z] += sz[up[z]] * sz[up[z]];\n              sz[up[z]] += sz[v];\n              coeff[new_z] -= sz[up[z]] * sz[up[z]];\n            } else {\n              coeff[new_z] += (sz[up[z]] - sz[v]) * (sz[up[z]] - sz[v]);\n              coeff[new_z] -= sz[up[z]] * sz[up[z]];\n            }\n            ans += coeff[new_z] * value[new_z];\n            z = new_z;\n          }\n        }\n        pv[v] = u;\n        total[v] = 0;\n        up[v] = v;\n      } else {\n        int v = arg1[qq];\n        ans += (arg2[qq] - value[v]) * coeff[v];\n        value[v] = arg2[qq];\n      }\n      printf(\"%.15lf\\n\", (double)(1.0 * ans / n / n));\n    }\n    for (int i = 1; i <= n; i++) {\n      g[i].clear();\n    }\n    for (int i = 2; i <= n; i++) {\n      g[pv[i]].push_back(i);\n    }\n    next_q = last_q + 1;\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "trees"], "dificulty": "3200", "interactive": false}