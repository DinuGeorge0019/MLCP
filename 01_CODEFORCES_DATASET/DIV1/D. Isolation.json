{"link": "https://codeforces.com//contest/1129/problem/D", "problemId": "303020", "problem_idx": "D", "shortId": "1129D", "contest_number": "1129", "problem_submissions": {"D": [50457140, 50468228, 50468213, 50452551, 50784588, 50784524, 50784516, 50784486, 50455866, 50463030, 50451241, 50455843, 50456518, 50444260, 50455126, 50471374, 50469822, 50469757, 50469734, 50469338, 50469151, 50468662, 50468322, 50468273, 50465415, 50464634, 50455747, 50457843, 50458250, 50464059, 50449299, 50457330], "E": [50451183, 50458483, 50460101, 50455688, 50458301, 75936467, 50458791], "C": [50447279, 50446245, 50449561, 50445538, 50440385, 50445043, 50447738, 50448032, 50454787, 50450606, 50457517, 58851047, 58850895, 50459942, 50451465, 50454057, 50448457, 50449663], "B": [50443936, 50443531, 50442156, 50441155, 50445396, 50439298, 50442768, 50443504, 50459278, 50443656, 50448178, 50451750, 50447513, 50459190, 50456796, 50442875, 50451493], "A1": [50438306, 50436838, 50435800, 50454577, 50434391, 50434469, 50436959, 50437853, 50449686, 50439524, 50436300, 50436664, 50460719, 50444960, 50438530, 50438635, 50437445], "A2": [50438193, 50437084, 50435385, 50454632, 50434194, 50434343, 50437228, 50438028, 50449587, 50439649, 50436143, 50436524, 50460819, 50444992, 50438364, 50437253, 50437622]}, "name": "D. Isolation", "statement": "Find the number of ways to divide an array a of n integers into any\r\nnumber of disjoint non-empty segments so that, in each segment, there\r\nexist at most k distinct integers that appear exactly once.Since the\r\nanswer can be large, find it modulo 998\r\n,244\r\n,353.\r\n", "solutions": ["#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\n#define PB push_back\n#define MP make_pair\n#define LL long long\n//#define int LL\n#define FOR(i,a,b) for(int i = (a); i <= (b); i++)\n#define RE(i,n) FOR(i,1,n)\n#define REP(i,n) FOR(i,0,(int)(n)-1)\n#define VI vector<int>\n#define PII pair<int,int>\n#define LD long double\n#define FI first\n#define SE second\n#define st FI\n#define nd SE\n#define ALL(x) (x).begin(), (x).end()\n#define SZ(x) ((int)(x).size())\n\n#define unordered_map __fast_unordered_map\ntemplate<class Key, class Value, class Hash = std::hash<Key>>\nusing unordered_map = __gnu_pbds::gp_hash_table<Key, Value, Hash>;\n\ntemplate<class C> void mini(C &a4, C b4) { a4 = min(a4, b4); }\ntemplate<class C> void maxi(C &a4, C b4) { a4 = max(a4, b4); }\n\ntemplate<class TH> void _dbg(const char *sdbg, TH h){ cerr<<sdbg<<'='<<h<<endl; }\ntemplate<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a) {\n  while(*sdbg!=',')cerr<<*sdbg++;\n  cerr<<'='<<h<<','; _dbg(sdbg+1, a...);\n}\n\ntemplate<class T> ostream &operator<<(ostream& os, vector<T> V) {\n  os << \"[\"; for (auto vv : V) os << vv << \",\"; return os << \"]\";\n}\ntemplate<class L, class R> ostream &operator<<(ostream &os, pair<L,R> P) {\n  return os << \"(\" << P.st << \",\" << P.nd << \")\";\n}\n\n#ifdef LOCAL\n#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)\n#else\n#define debug(...) (__VA_ARGS__)\n#define cerr if(0)cout\n#endif\n\nconst int Mod = 998'244'353;\nconst int BlockLen = 170;\nconst int MaxN = 1e5 + 100;\nconst int NumBlocks = MaxN / BlockLen + 50;\n\nint values[MaxN];\nint dp[MaxN];\nint N, K;\n\nstruct Block {\n  int L, R;\n  vector<PII> pref_sums;\n  int ptr;\n  int increase;\n  VI num_incrs;\n\n  Block() : L(0), R(0), ptr(0), increase(0) {}\n  Block(int l, int r) : L(l), R(r), ptr(0), increase(0), num_incrs(r - l) {}\n\n  void IncrAll(int delta) { increase += delta; }\n\n  void Rebuild() {\n    VI order(SZ(num_incrs));\n    iota(ALL(order), 0);\n    sort(ALL(order), [&](int lhs, int rhs) {\n          return num_incrs[lhs] < num_incrs[rhs];\n        });\n\n    pref_sums.clear();\n    pref_sums.emplace_back((int)-1e9, 0);\n    pref_sums.emplace_back(num_incrs[order[0]], dp[order[0] + L]);\n\n    for (int i = 1; i < SZ(order); ++i) {\n      const int v = order[i];\n      LL val = (pref_sums.back().nd + dp[v + L]) % Mod;\n      if (num_incrs[v] == pref_sums.back().st) {\n        pref_sums.back().nd = val;\n      } else {\n        pref_sums.emplace_back(num_incrs[v], val);\n      }\n    }\n    ptr = 0;\n    debug(\"Rebuild\", pref_sums);\n  }\n\n  void IncrSeg(int lft, int rgt, int delta) {\n    for (int i = 0; i < SZ(num_incrs); ++i) {\n      num_incrs[i] += increase;\n    }\n    increase = 0;\n    for (int i = lft - L; i < rgt - L; ++i) {\n      num_incrs[i] += delta;\n    }\n    debug(num_incrs);\n    Rebuild();\n  }\n\n  int GetAtMaxK() {\n    while (ptr > 0 && pref_sums[ptr].st + increase > K) { --ptr; }\n    while (ptr < SZ(pref_sums) - 1 && pref_sums[ptr + 1].st + increase <= K) { ++ptr; }\n    debug(\"GetIn\", L, R, ptr, pref_sums, increase, K);\n    return pref_sums[ptr].nd;\n  }\n};\n\nBlock blocks[NumBlocks];\n\n\nvoid Increase(int L, int R, int delta) {\n  debug(\"Increase\", L, R, delta);\n  for (int i = 0; i < NumBlocks; ++i) {\n    const int l_block = i * BlockLen;\n    const int r_block = min((i + 1) * BlockLen, N + 1);\n    if (l_block > N) { break; }\n    if (r_block <= L || l_block >= R) { continue; }\n    if (L <= l_block && r_block <= R) {\n      blocks[i].IncrAll(delta);\n    } else {\n      blocks[i].IncrSeg(max<int>(L, l_block), min<int>(R, r_block), delta);\n    }\n  }\n}\n\nint GetAtMaxK() {\n  int ans = 0;\n  for (int i = 0; i < NumBlocks; ++i) {\n    const int l_block = i * BlockLen;\n    if (l_block > N) { break; }\n    ans = (ans + blocks[i].GetAtMaxK()) % Mod;\n  }\n  debug(\"Get\", ans);\n  return ans;\n}\n\nvoid BuildBlocks() {\n  for (int i = 0; i < NumBlocks; ++i) {\n    const int l_block = i * BlockLen;\n    const int r_block = min(N + 1, (i + 1) * BlockLen);\n    if (l_block > N) { break; }\n    debug(i, l_block, r_block);\n    blocks[i] = Block(l_block, r_block);\n    blocks[i].Rebuild();\n  }\n}\n\n\n\nint32_t main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(11);\n  cerr << fixed << setprecision(6);\n\n  cin >> N >> K;\n\n#ifdef TEST\n  for (int i = 0; i < N; ++i) { values[i] = i / 2 + 1; }\n  srand(69);\n  random_shuffle(values, values + N);\n#else\n  for (int i = 0; i < N; ++i) { cin >> values[i]; }\n#endif\n\n  dp[0] = 1;\n  BuildBlocks();\n\n  VI prev_occur(N + 1, 0), last_occur(N + 1, 0);\n\n  for (int i = 1; i <= N; ++i) {\n    const int v = values[i - 1];\n    if (last_occur[v]) {\n      Increase(prev_occur[v], last_occur[v], -1);\n    }\n    prev_occur[v] = last_occur[v];\n    last_occur[v] = i;\n    Increase(prev_occur[v], last_occur[v], 1);\n    dp[i] = GetAtMaxK();\n    blocks[i / BlockLen].Rebuild();\n  }\n\n  cout << dp[N] << \"\\n\";\n}\n\n"], "input": "", "output": "", "tags": ["data structures", "dp"], "dificulty": "2900", "interactive": false}