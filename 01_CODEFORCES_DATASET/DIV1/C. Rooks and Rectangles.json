{"link": "https://codeforces.com//contest/529/problem/C", "problemId": "25012", "problem_idx": "C", "shortId": "529C", "contest_number": "529", "problem_submissions": {"A": [10386870, 10387083, 10387317, 10387235, 10387134, 10386419, 10387369, 10386078, 10389580, 10388216, 10387712, 10386357, 10387632, 10386965, 10387734, 10385828], "C": [10386311, 10385455, 10386427, 10385364, 10406538, 10385834, 10386051, 10386918, 10386327, 10386510, 10385417, 10385724, 10386116, 10409781, 10386107, 10386201, 10386650, 10404350, 10386786, 10387225], "D": [10385805, 10386369, 10385736, 10386160, 10387079, 10385785, 10386933, 10385679, 10386619, 10386454, 10386390, 10387127, 10386675, 10386195, 10385799, 10388002], "E": [10385000, 10384871, 10384905, 10385848, 10385056, 10385201, 10385198, 10387352, 10385145, 10385184, 10385731, 10384843, 10385458, 10387221, 10385405, 10384991, 10385094], "B": [10384855, 10385831, 10385265, 10386319, 10385276, 10385001, 10385225, 10386328, 10385038, 10384881, 10385688, 10386077, 10385299, 10385149, 10385037, 10385267, 10384933, 10388225]}, "name": "C. Rooks and Rectangles", "statement": "Polycarpus has a chessboard of size , where rooks are placed. Polycarpus\r\nhasn\u2019t yet invented the rules of the game he will play. However, he has\r\nalready allocated rectangular areas of special strategic importance on\r\nthe board, they must be protected well. According to Polycarpus, a\r\nrectangular area of the board is well protected if all its vacant\r\nsquares can be beaten by the rooks that stand on this area. The rooks on\r\nthe rest of the board do not affect the area\u2019s defense. The position of\r\nthe rooks is fixed and cannot be changed. We remind you that the the\r\nrook beats the squares located on the same vertical or horizontal line\r\nwith it, if there are no other pieces between the square and the rook.\r\nHelp Polycarpus determine whether all strategically important areas are\r\nprotected.\r\n", "solutions": ["#include <algorithm>\n#include <cassert>\n#include <cstring>\n#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define TRACE(x) cout << #x << \" = \" << x << endl\n#define _ << \" _ \" <<\n\ntypedef long long llint;\ntypedef pair<int, int> par;\n#define x first\n#define y second\n\nconst int MAXN = 200020;\nconst int off = 1<<18;\nconst int inf = 1e9;\n\nvector<int> E[MAXN], F[MAXN];\nbool ans[MAXN];\npar a[MAXN];\npar q1[MAXN], q2[MAXN];\nint n, m, k, q;\n\nint T[2*off];\n\nint getmax(int i, int lo, int hi, int a, int b) {\n  if (lo >= b || hi <= a) return -inf;\n  if (lo >= a && hi <= b) return T[i];\n  return max(\n    getmax(i*2, lo, (lo+hi)/2, a, b),\n    getmax(i*2+1, (lo+hi)/2, hi, a, b)\n  );\n}\n\nvoid update(int x, int v) {\n  T[x += off] = v;\n  for (x /= 2; x; x /= 2)\n    T[x] = max(T[x*2], T[x*2+1]);\n}\n\nvoid solve() {\n  REP(i, m) E[i].clear(), F[i].clear();\n  REP(i, k) F[a[i].y].push_back(a[i].x);\n  REP(i, q) E[q1[i].y].push_back(i);\n\n  REP(i, 2*off) T[i] = inf;\n  for (int i = m-1; i >= 0; --i) {\n    for (int x: F[i]) update(x, i);\n    for (int j: E[i])\n      ans[j] |= getmax(1, 0, off, q1[j].x, q2[j].x+1) <= q2[j].y;\n  }\n}\n\nint main(void) {\n  scanf(\"%d %d %d %d\", &n, &m, &k, &q);\n  REP(i, k) {\n    scanf(\"%d %d\", &a[i].x, &a[i].y);\n    --a[i].x, --a[i].y;\n  }\n\n  REP(i, q) {\n    scanf(\"%d %d %d %d\", &q1[i].x, &q1[i].y, &q2[i].x, &q2[i].y);\n    --q1[i].x, --q1[i].y;\n    --q2[i].x, --q2[i].y;\n    ans[i] = false;\n  }\n\n  solve();\n  swap(n, m);\n  REP(i, k) swap(a[i].x, a[i].y);\n  REP(i, q) {\n    swap(q1[i].x, q1[i].y);\n    swap(q2[i].x, q2[i].y);\n  }\n  solve();\n\n  REP(i, q) puts(ans[i] ? \"YES\" : \"NO\");\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "sortings"], "dificulty": "2400", "interactive": false}