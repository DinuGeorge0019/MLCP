{
    "link": "https://codeforces.com//contest/1889/problem/D",
    "problemId": "2253921",
    "problem_idx": "D",
    "shortId": "1889D",
    "contest_number": "1889",
    "problem_submissions": {
        "F": [
            230286542,
            230266065,
            230262442
        ],
        "E": [
            230256898,
            230246832
        ],
        "D": [
            230235941,
            230232857,
            230224566,
            230272022,
            230272005,
            230271882,
            230271768,
            230230795,
            230267581,
            230266453,
            230266166,
            230265951,
            230226552,
            230234432,
            230236469,
            230251974,
            230254932,
            230230502,
            230243460,
            230250152,
            230249726,
            230244428,
            230257470,
            230253116,
            230249203,
            230254701,
            230259645,
            230251139
        ],
        "C2": [
            230210010,
            230217978,
            230434330,
            230213058,
            230214943,
            230216126,
            230223427,
            230223092,
            230233645,
            230213601,
            230231558,
            230237014,
            230233479,
            230223561,
            230227068,
            230237154,
            230230576,
            230236721,
            230222800,
            230220319
        ],
        "C1": [
            230200664,
            230217626,
            230211402,
            230212701,
            230201726,
            230298285,
            230199777,
            230209649,
            230223226,
            230202866,
            230195160,
            230217294,
            230211164,
            230200107,
            230209171,
            230227585,
            230205456,
            230230794,
            230222696,
            230222982,
            230220187
        ],
        "B": [
            230195225,
            230190509,
            230206755,
            230191485,
            230197446,
            230193895,
            230198878,
            230202551,
            230190822,
            230262085,
            230199606,
            230196726,
            230195700,
            230203093,
            230203643,
            230199184,
            230213572,
            230204206,
            230194309,
            230191500
        ],
        "A": [
            230190808,
            230198511,
            230201631,
            230187953,
            230191913,
            230188070,
            230191494,
            230197747,
            230187919,
            230186845,
            230194401,
            230191161,
            230186018,
            230251033,
            230195006,
            230188313,
            230193522,
            230193269,
            230187554,
            230187719
        ]
    },
    "name": "D. Game of Stacks",
    "statement": "You have n stacks r_1,r_2,\r\nldots,r_n. Each stack contains some positive integers ranging from 1 to\r\nn.Define the following functions:function init(pos): stacks := an array\r\nthat contains n stacks r[1], r[2], ..., r[n] return get(stacks,\r\npos)function get(stacks, pos): if stacks[pos] is empty: return pos else:\r\nnew_pos := the top element of stacks[pos] pop the top element of\r\nstacks[pos] return get(stacks, new_pos)You want to know the values\r\nreturned by\r\ntexttt{init(1)},\r\ntexttt{init(2)},\r\nldots,\r\ntexttt{init(n)}.Note that, during these calls, the stacks r_1,r_2,\r\nldots,r_n donâ€™t change, so the calls\r\ntexttt{init(1)},\r\ntexttt{init(2)},\r\nldots,\r\ntexttt{init(n)} are independent.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <chrono>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstring>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <vector>\nusing namespace std;\n\nusing ll = long long;\nusing db = long double;  // or double, if TL is tight\nusing str = string;      // yay python!\n\n// pairs\nusing pi = pair<int, int>;\nusing pl = pair<ll, ll>;\nusing pd = pair<db, db>;\n#define mp make_pair\n#define f first\n#define s second\n\n#define tcT template <class T\n#define tcTU tcT, class U\n// ^ lol this makes everything look weird but I'll try it\ntcT > using V = vector<T>;\ntcT, size_t SZ > using AR = array<T, SZ>;\nusing vi = V<int>;\nusing vb = V<bool>;\nusing vl = V<ll>;\nusing vd = V<db>;\nusing vs = V<str>;\nusing vpi = V<pi>;\nusing vpl = V<pl>;\nusing vpd = V<pd>;\n\n// vectors\n// oops size(x), rbegin(x), rend(x) need C++17\n#define sz(x) int((x).size())\n#define bg(x) begin(x)\n#define all(x) bg(x), end(x)\n#define rall(x) x.rbegin(), x.rend()\n#define sor(x) sort(all(x))\n#define rsz resize\n#define ins insert\n#define pb push_back\n#define eb emplace_back\n#define ft front()\n#define bk back()\n\n#define lb lower_bound\n#define ub upper_bound\ntcT > int lwb(V<T> &a, const T &b) { return int(lb(all(a), b) - bg(a)); }\ntcT > int upb(V<T> &a, const T &b) { return int(ub(all(a), b) - bg(a)); }\n\n// loops\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n#define F0R(i, a) FOR(i, 0, a)\n#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)\n#define R0F(i, a) ROF(i, 0, a)\n#define rep(a) F0R(_, a)\n#define each(a, x) for (auto &a : x)\n\nconst int MOD = 998244353;  // 1e9+7;\nconst int MX = (int)2e5 + 5;\nconst ll BIG = 1e18;  // not too close to LLONG_MAX\nconst db PI = acos((db)-1);\nconst int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  // for every grid problem!!\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());\ntemplate <class T> using pqg = priority_queue<T, vector<T>, greater<T>>;\n\n// bitwise ops\n// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\nconstexpr int pct(int x) { return __builtin_popcount(x); }  // # of bits set\nconstexpr int bits(int x) {  // assert(x >= 0); // make C++11 compatible until\n\t                         // USACO updates ...\n\treturn x == 0 ? 0 : 31 - __builtin_clz(x);\n}  // floor(log2(x))\nconstexpr int p2(int x) { return 1 << x; }\nconstexpr int msk2(int x) { return p2(x) - 1; }\n\nll cdiv(ll a, ll b) {\n\treturn a / b + ((a ^ b) > 0 && a % b);\n}  // divide a by b rounded up\nll fdiv(ll a, ll b) {\n\treturn a / b - ((a ^ b) < 0 && a % b);\n}  // divide a by b rounded down\n\ntcT > bool ckmin(T &a, const T &b) {\n\treturn b < a ? a = b, 1 : 0;\n}  // set a = min(a,b)\ntcT > bool ckmax(T &a, const T &b) {\n\treturn a < b ? a = b, 1 : 0;\n}  // set a = max(a,b)\n\ntcTU > T fstTrue(T lo, T hi, U f) {\n\t++hi;\n\tassert(lo <= hi);  // assuming f is increasing\n\twhile (lo < hi) {  // find first index such that f is true\n\t\tT mid = lo + (hi - lo) / 2;\n\t\tf(mid) ? hi = mid : lo = mid + 1;\n\t}\n\treturn lo;\n}\ntcTU > T lstTrue(T lo, T hi, U f) {\n\t--lo;\n\tassert(lo <= hi);  // assuming f is decreasing\n\twhile (lo < hi) {  // find first index such that f is true\n\t\tT mid = lo + (hi - lo + 1) / 2;\n\t\tf(mid) ? lo = mid : hi = mid - 1;\n\t}\n\treturn lo;\n}\ntcT > void remDup(vector<T> &v) {  // sort and remove duplicates\n\tsort(all(v));\n\tv.erase(unique(all(v)), end(v));\n}\ntcTU > void safeErase(T &t, const U &u) {\n\tauto it = t.find(u);\n\tassert(it != end(t));\n\tt.erase(it);\n}\n\ninline namespace IO {\n#define SFINAE(x, ...)                                                         \\\n\ttemplate <class, class = void> struct x : std::false_type {};              \\\n\ttemplate <class T> struct x<T, std::void_t<__VA_ARGS__>> : std::true_type {}\n\nSFINAE(DefaultI, decltype(std::cin >> std::declval<T &>()));\nSFINAE(DefaultO, decltype(std::cout << std::declval<T &>()));\nSFINAE(IsTuple, typename std::tuple_size<T>::type);\nSFINAE(Iterable, decltype(std::begin(std::declval<T>())));\n\ntemplate <auto &is> struct Reader {\n\ttemplate <class T> void Impl(T &t) {\n\t\tif constexpr (DefaultI<T>::value) is >> t;\n\t\telse if constexpr (Iterable<T>::value) {\n\t\t\tfor (auto &x : t) Impl(x);\n\t\t} else if constexpr (IsTuple<T>::value) {\n\t\t\tstd::apply([this](auto &...args) { (Impl(args), ...); }, t);\n\t\t} else static_assert(IsTuple<T>::value, \"No matching type for read\");\n\t}\n\ttemplate <class... Ts> void read(Ts &...ts) { ((Impl(ts)), ...); }\n};\n\ntemplate <class... Ts> void re(Ts &...ts) { Reader<cin>{}.read(ts...); }\n#define def(t, args...)                                                        \\\n\tt args;                                                                    \\\n\tre(args);\n\ntemplate <auto &os, bool debug, bool print_nd> struct Writer {\n\tstring comma() const { return debug ? \",\" : \"\"; }\n\ttemplate <class T> constexpr char Space(const T &) const {\n\t\treturn print_nd && (Iterable<T>::value or IsTuple<T>::value) ? '\\n'\n\t\t                                                             : ' ';\n\t}\n\ttemplate <class T> void Impl(T const &t) const {\n\t\tif constexpr (DefaultO<T>::value) os << t;\n\t\telse if constexpr (Iterable<T>::value) {\n\t\t\tif (debug) os << '{';\n\t\t\tint i = 0;\n\t\t\tfor (auto &&x : t)\n\t\t\t\t((i++) ? (os << comma() << Space(x), Impl(x)) : Impl(x));\n\t\t\tif (debug) os << '}';\n\t\t} else if constexpr (IsTuple<T>::value) {\n\t\t\tif (debug) os << '(';\n\t\t\tstd::apply(\n\t\t\t    [this](auto const &...args) {\n\t\t\t\t    int i = 0;\n\t\t\t\t    (((i++) ? (os << comma() << \" \", Impl(args)) : Impl(args)),\n\t\t\t\t     ...);\n\t\t\t    },\n\t\t\t    t);\n\t\t\tif (debug) os << ')';\n\t\t} else static_assert(IsTuple<T>::value, \"No matching type for print\");\n\t}\n\ttemplate <class T> void ImplWrapper(T const &t) const {\n\t\tif (debug) os << \"\\033[0;31m\";\n\t\tImpl(t);\n\t\tif (debug) os << \"\\033[0m\";\n\t}\n\ttemplate <class... Ts> void print(Ts const &...ts) const {\n\t\t((Impl(ts)), ...);\n\t}\n\ttemplate <class F, class... Ts>\n\tvoid print_with_sep(const std::string &sep, F const &f,\n\t                    Ts const &...ts) const {\n\t\tImplWrapper(f), ((os << sep, ImplWrapper(ts)), ...), os << '\\n';\n\t}\n\tvoid print_with_sep(const std::string &) const { os << '\\n'; }\n};\n\ntemplate <class... Ts> void pr(Ts const &...ts) {\n\tWriter<cout, false, true>{}.print(ts...);\n}\ntemplate <class... Ts> void ps(Ts const &...ts) {\n\tWriter<cout, false, true>{}.print_with_sep(\" \", ts...);\n}\n}  // namespace IO\n\ninline namespace Debug {\ntemplate <typename... Args> void err(Args... args) {\n\tWriter<cerr, true, false>{}.print_with_sep(\" | \", args...);\n}\ntemplate <typename... Args> void errn(Args... args) {\n\tWriter<cerr, true, true>{}.print_with_sep(\" | \", args...);\n}\n\nvoid err_prefix(str func, int line, string args) {\n\tcerr << \"\\033[0;31m\\u001b[1mDEBUG\\033[0m\"\n\t     << \" | \"\n\t     << \"\\u001b[34m\" << func << \"\\033[0m\"\n\t     << \":\"\n\t     << \"\\u001b[34m\" << line << \"\\033[0m\"\n\t     << \" - \"\n\t     << \"[\" << args << \"] = \";\n}\n\n#ifdef LOCAL\n#define dbg(args...) err_prefix(__FUNCTION__, __LINE__, #args), err(args)\n#define dbgn(args...) err_prefix(__FUNCTION__, __LINE__, #args), errn(args)\n#else\n#define dbg(...)\n#define dbgn(args...)\n#endif\n\nconst auto beg_time = std::chrono::high_resolution_clock::now();\n// https://stackoverflow.com/questions/47980498/accurate-c-c-clock-on-a-multi-core-processor-with-auto-overclock?noredirect=1&lq=1\ndouble time_elapsed() {\n\treturn chrono::duration<double>(std::chrono::high_resolution_clock::now() -\n\t                                beg_time)\n\t    .count();\n}\n}  // namespace Debug\n\ninline namespace FileIO {\nvoid setIn(str s) { freopen(s.c_str(), \"r\", stdin); }\nvoid setOut(str s) { freopen(s.c_str(), \"w\", stdout); }\nvoid setIO(str s = \"\") {\n\tcin.tie(0)->sync_with_stdio(0);  // unsync C / C++ I/O streams\n\tcout << fixed << setprecision(12);\n\t// cin.exceptions(cin.failbit);\n\t// throws exception when do smth illegal\n\t// ex. try to read letter into int\n\tif (sz(s)) setIn(s + \".in\"), setOut(s + \".out\");  // for old USACO\n}\n}  // namespace FileIO\n\n/**\n * Description: Disjoint Set Union with path compression\n * and union by size. Add edges and test connectivity.\n * Use for Kruskal's or Boruvka's minimum spanning tree.\n * Time: O(\\alpha(N))\n * Source: CSAcademy, KACTL\n * Verification: *\n */\n\nstruct DSU {\n\tvi e;\n\tvoid init(int N) { e = vi(N, -1); }\n\tint get(int x) { return e[x] < 0 ? x : e[x] = get(e[x]); }\n\tbool sameSet(int a, int b) { return get(a) == get(b); }\n\tint size(int x) { return -e[get(x)]; }\n\tvoid add_edge(int x, int y) {  // union by size\n\t\tx = get(x), y = get(y);\n\t\tassert(x != y);\n\t\t// if (x == y) return 0;\n\t\te[y] += e[x];\n\t\te[x] = y;\n\t}\n};\n\n/**tcT> T kruskal(int N, vector<pair<T,pi>> ed) {\n    sort(all(ed));\n    T ans = 0; DSU D; D.init(N); // edges that unite are in MST\n    each(a,ed) if (D.unite(a.s.f,a.s.s)) ans += a.f;\n    return ans;\n}*/\n\nint N;\nV<vi> C;\n// DSU D;\nvi ans;\n\n// int query(int x) {\n// \tvi stk{x};\n// \twhile (true) {\n// \t\tif (final_ans[stk.bk]) {\n\n// \t\t}\n// \t}\n// }\n\nint timer = 0;\n\nvi vis;\n\nvoid dfs(int x) {\n\t++timer;\n\tvi stk{x};\n\tvis[stk.bk] = timer;\n\twhile (true) {\n\t\tif (!ans[stk.bk] && !sz(C[stk.bk])) { ans[stk.bk] = stk.bk; }\n\t\tif (ans[stk.bk]) {\n\t\t\teach(x, stk) ans[x] = ans[stk.bk];\n\t\t\treturn;\n\t\t}\n\t\tint nxt = C[stk.bk].bk;\n\t\tif (vis[nxt] != timer) {\n\t\t\tstk.pb(nxt);\n\t\t\tvis[stk.bk] = timer;\n\t\t} else {\n\t\t\twhile (true) {\n\t\t\t\tassert(sz(stk));\n\t\t\t\tC[stk.bk].pop_back();\n\t\t\t\tif (stk.bk == nxt) break;\n\t\t\t\tvis[stk.bk] = 0;\n\t\t\t\tstk.pop_back();\n\t\t\t}\n\t\t\tassert(stk.bk == nxt);\n\t\t}\n\t}\n}\n\nint main() {\n\t// read read read\n\tsetIO();\n\tre(N);\n\t// D.init(N + 1);\n\t// D.add_edge(1, 2);\n\t// dbg(D.get(1), D.get(2));\n\t// exit(0);\n\tC.rsz(N + 1);\n\tFOR(i, 1, N + 1) {\n\t\tdef(int, K);\n\t\tC[i].rsz(K);\n\t\tre(C[i]);\n\t}\n\tans.rsz(N + 1);\n\tvis = vi(N + 1);\n\tFOR(i, 1, N + 1) dfs(i);\n\tans.erase(begin(ans));\n\tps(ans);\n\t// you should actually read the stuff at the bottom\n}\n\n/* stuff you should look for\n * int overflow, array bounds\n * special cases (n=1?)\n * do smth instead of nothing and stay organized\n * WRITE STUFF DOWN\n * DON'T GET STUCK ON ONE APPROACH\n */\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dfs and similar",
        "graphs",
        "implementation",
        "trees"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Game of Stacks.json",
    "editorial_link": "https://codeforces.com//blog/entry/121813",
    "editorial": "LetÃ¢Â€Â™s first consider an easy version of the problem: what if there is\r\nonly one element in each stack?Let be the element in stack . If we link\r\n, these edges will form several directed pseudo trees. For each pseudo\r\ntree, there is a cycle. ItÃ¢Â€Â™s not hard to find that those cycles actually\r\ncan be ignored, because if we go on the cycle, we will come back to the\r\nfirst node on the cycle and the cycle will be eliminated. After deleting\r\n(the edges) on the cycle, there are only trees left. Thus the root of\r\neach tree is the answer of nodes on the tree.When it comes back to the\r\noriginal problem, similarly, let be the top element of stack . The rest\r\nare the same cycles can be eliminated. In this case, we should run cycle\r\nelimination process many times until there is no cycle in the graph.Time\r\ncomplexity .\r\n",
    "hint": []
}