{
    "link": "https://codeforces.com//contest/1439/problem/A2",
    "problemId": "798715",
    "problem_idx": "A2",
    "shortId": "1439A2",
    "contest_number": "1439",
    "problem_submissions": {
        "E": [
            98736027,
            98740513,
            98743267,
            98751627,
            98746552,
            98793931,
            99104638
        ],
        "D": [
            98723891,
            98705229,
            98723612,
            98827591,
            98816648,
            98814032,
            98725036,
            98724071,
            98728933,
            98730831,
            98730544,
            98736469,
            98737101,
            98739698,
            98716903,
            98721633,
            98735777,
            98741204,
            98725990,
            98732940,
            98719637,
            98741795
        ],
        "C": [
            98717653,
            98714961,
            98717583,
            98709251,
            98712683,
            98710256,
            98709014,
            98716952,
            98723694,
            98722478,
            98723203,
            98711303,
            98733440,
            98725610,
            98728037,
            98706473,
            98717733,
            98731377,
            98715466,
            98722420
        ],
        "B": [
            98704771,
            98722470,
            98701689,
            98703648,
            98704924,
            98788376,
            98780895,
            98705172,
            98721750,
            98849262,
            98707321,
            98708231,
            98709710,
            98796719,
            98765489,
            98765480,
            98765433,
            98765408,
            98765370,
            98750864,
            98750749,
            98747376,
            98713010,
            98736680,
            98709620,
            98716637,
            98748644,
            114352814,
            99699811,
            98846560,
            98754739,
            98754712,
            98711616
        ],
        "A2": [
            98692587,
            98708717,
            98890116,
            98695391,
            98695058,
            98694605,
            98697338,
            98695371,
            98698896,
            98697020,
            98700533,
            98695246,
            98692759,
            98703206,
            98695281,
            98699389,
            98696575,
            98695659,
            98722036,
            98693365,
            98696174
        ],
        "A1": [
            98692484,
            98708569,
            98695320,
            98695174,
            98694699,
            98697254,
            98695563,
            98698871,
            98696932,
            98700473,
            98695187,
            98692661,
            98703311,
            98695126,
            98699325,
            98696645,
            98695725,
            98722109,
            98693254,
            98696254
        ]
    },
    "name": "A2. Binary Table  Hard Version ",
    "statement": "You are given a binary table of size n\r\ntimes m. This table consists of symbols 0 and 1.You can make such\r\noperation: select 3 different cells that belong to one 2\r\ntimes 2 square and change the symbols in these cells (change 0 to 1 and\r\n1 to 0).Your task is to make all symbols in the table equal to 0. You\r\nare allowed to make at most nm operations. It can be proved, that it is\r\nalways possible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\ntemplate <typename T, int NDIMS> struct tensor_view {\n\tstatic_assert(NDIMS >= 0, \"NDIMS must be nonnegative\");\n\nprotected:\n\tstd::array<int, NDIMS> shape;\n\tstd::array<int, NDIMS> strides;\n\tT* data;\n\n\ttensor_view(std::array<int, NDIMS> shape_, std::array<int, NDIMS> strides_, T* data_) : shape(shape_), strides(strides_), data(data_) {}\n\npublic:\n\ttensor_view() : shape{0}, strides{0}, data(nullptr) {}\n\nprotected:\n\tint flatten_index(std::array<int, NDIMS> idx) const {\n\t\tint res = 0;\n\t\tfor (int i = 0; i < NDIMS; i++) { res += idx[i] * strides[i]; }\n\t\treturn res;\n\t}\n\tint flatten_index_checked(std::array<int, NDIMS> idx) const {\n\t\tint res = 0;\n\t\tfor (int i = 0; i < NDIMS; i++) {\n\t\t\tassert(0 <= idx[i] && idx[i] < shape[i]);\n\t\t\tres += idx[i] * strides[i];\n\t\t}\n\t\treturn res;\n\t}\n\npublic:\n\tT& operator[] (std::array<int, NDIMS> idx) const {\n\t\treturn data[flatten_index(idx)];\n\t}\n\tT& at(std::array<int, NDIMS> idx) const {\n\t\treturn data[flatten_index_checked(idx)];\n\t}\n\n\ttemplate <int D = NDIMS>\n\tstd::enable_if_t<(0 < D), tensor_view<T, NDIMS-1>> operator[] (int idx) const {\n\t\tstd::array<int, NDIMS-1> nshape; std::copy(shape.begin()+1, shape.end(), nshape.begin());\n\t\tstd::array<int, NDIMS-1> nstrides; std::copy(strides.begin()+1, strides.end(), nstrides.begin());\n\t\tT* ndata = data + (strides[0] * idx);\n\t\treturn tensor_view<T, NDIMS-1>(nshape, nstrides, ndata);\n\t}\n\ttemplate <int D = NDIMS>\n\tstd::enable_if_t<(0 < D), tensor_view<T, NDIMS-1>> at(int idx) const {\n\t\tassert(0 <= idx && idx < shape[0]);\n\t\treturn operator[](idx);\n\t}\n\n\ttemplate <int D = NDIMS>\n\tstd::enable_if_t<(0 == D), T&> operator * () const {\n\t\treturn *data;\n\t}\n\n\ttemplate <typename U, int D> friend struct tensor_view;\n\ttemplate <typename U, int D> friend struct tensor;\n};\n\ntemplate <typename T, int NDIMS> struct tensor {\n\tstatic_assert(NDIMS >= 0, \"NDIMS must be nonnegative\");\n\nprotected:\n\tstd::array<int, NDIMS> shape;\n\tstd::array<int, NDIMS> strides;\n\tint len;\n\tT* data;\n\npublic:\n\ttensor() : shape{0}, strides{0}, len(0), data(nullptr) {}\n\n\texplicit tensor(std::array<int, NDIMS> shape_, const T& t = T()) {\n\t\tshape = shape_;\n\t\tstrides[NDIMS-1] = 1;\n\t\tfor (int i = NDIMS-1; i > 0; i--) {\n\t\t\tstrides[i-1] = strides[i] * shape[i];\n\t\t}\n\t\tlen = strides[0] * shape[0];\n\t\tdata = new T[len];\n\t\tstd::fill(data, data + len, t);\n\t}\n\n\ttensor(const tensor& o) : shape(o.shape), strides(o.strides), len(o.len), data(new T[len]) {\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tdata[i] = o.data[i];\n\t\t}\n\t}\n\n\ttensor& operator=(tensor&& o) noexcept {\n\t\tusing std::swap;\n\t\tswap(shape, o.shape);\n\t\tswap(strides, o.strides);\n\t\tswap(len, o.len);\n\t\tswap(data, o.data);\n\t\treturn *this;\n\t}\n\ttensor(tensor&& o) : tensor() {\n\t\t*this = std::move(o);\n\t}\n\ttensor& operator=(const tensor& o) {\n\t\treturn *this = tensor(o);\n\t}\n\t~tensor() { delete[] data; }\n\n\tusing view_t = tensor_view<T, NDIMS>;\n\tview_t view() {\n\t\treturn tensor_view<T, NDIMS>(shape, strides, data);\n\t}\n\toperator view_t() {\n\t\treturn view();\n\t}\n\n\tusing const_view_t = tensor_view<const T, NDIMS>;\n\tconst_view_t view() const {\n\t\treturn tensor_view<const T, NDIMS>(shape, strides, data);\n\t}\n\toperator const_view_t() const {\n\t\treturn view();\n\t}\n\n\tT& operator[] (std::array<int, NDIMS> idx) { return view()[idx]; }\n\tT& at(std::array<int, NDIMS> idx) { return view().at(idx); }\n\tconst T& operator[] (std::array<int, NDIMS> idx) const { return view()[idx]; }\n\tconst T& at(std::array<int, NDIMS> idx) const { return view().at(idx); }\n\n\ttemplate <int D = NDIMS>\n\tstd::enable_if_t<(0 < D), tensor_view<T, NDIMS-1>> operator[] (int idx) {\n\t\treturn view()[idx];\n\t}\n\ttemplate <int D = NDIMS>\n\tstd::enable_if_t<(0 < D), tensor_view<T, NDIMS-1>> at(int idx) {\n\t\treturn view().at(idx);\n\t}\n\n\ttemplate <int D = NDIMS>\n\tstd::enable_if_t<(0 < D), tensor_view<const T, NDIMS-1>> operator[] (int idx) const {\n\t\treturn view()[idx];\n\t}\n\ttemplate <int D = NDIMS>\n\tstd::enable_if_t<(0 < D), tensor_view<const T, NDIMS-1>> at(int idx) const {\n\t\treturn view().at(idx);\n\t}\n\n\ttemplate <int D = NDIMS>\n\tstd::enable_if_t<(0 == D), T&> operator * () {\n\t\treturn *view();\n\t}\n\ttemplate <int D = NDIMS>\n\tstd::enable_if_t<(0 == D), const T&> operator * () const {\n\t\treturn *view();\n\t}\n};\n\nint main() {\n\tusing namespace std;\n\tios_base::sync_with_stdio(false), cin.tie(nullptr);\n\n\tint T; cin >> T;\n\twhile (T--) {\n\t\tint N, M; cin >> N >> M;\n\t\ttensor<bool, 2> G({N, M});\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tstring s; cin >> s;\n\t\t\tfor (int j = 0; j < M; j++) {\n\t\t\t\tG[{i,j}] = s[j] - '0';\n\t\t\t}\n\t\t}\n\n\t\tvector<array<int, 6>> ops; ops.reserve(3*N*M);\n\n\t\tfor (int i = N-1; i >= 2; i--) {\n\t\t\tfor (int j = M-1; j >= 0; j--) {\n\t\t\t\tif (G[{i,j}]) {\n\t\t\t\t\tops.push_back({i,j,i-1,j,i-1,j?j-1:j+1});\n\t\t\t\t\tG[{i,j}] ^= 1;\n\t\t\t\t\tG[{i-1,j}] ^= 1;\n\t\t\t\t\tG[{i-1,j?j-1:j+1}] ^= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (int j = M-1; j >= 2; j--) {\n\t\t\tif (G[{0,j}] && G[{1,j}]) {\n\t\t\t\tops.push_back({0,j,1,j,0,j-1});\n\t\t\t\tG[{0,j}] ^= 1;\n\t\t\t\tG[{1,j}] ^= 1;\n\t\t\t\tG[{0,j-1}] ^= 1;\n\t\t\t} else if (G[{0,j}]) {\n\t\t\t\tops.push_back({0,j,0,j-1,1,j-1});\n\t\t\t\tG[{0,j}] ^= 1;\n\t\t\t\tG[{0,j-1}] ^= 1;\n\t\t\t\tG[{1,j-1}] ^= 1;\n\t\t\t} else if (G[{1,j}]) {\n\t\t\t\tops.push_back({1,j,0,j-1,1,j-1});\n\t\t\t\tG[{1,j}] ^= 1;\n\t\t\t\tG[{0,j-1}] ^= 1;\n\t\t\t\tG[{1,j-1}] ^= 1;\n\t\t\t} else {\n\t\t\t\t// no op\n\t\t\t}\n\t\t}\n\n\t\tif (G[{0,0}] ^ G[{0,1}] ^ G[{1,0}]) {\n\t\t\tops.push_back({0,0,0,1,1,0});\n\t\t}\n\t\tif (G[{0,0}] ^ G[{0,1}] ^ G[{1,1}]) {\n\t\t\tops.push_back({0,0,0,1,1,1});\n\t\t}\n\t\tif (G[{0,0}] ^ G[{1,0}] ^ G[{1,1}]) {\n\t\t\tops.push_back({0,0,1,0,1,1});\n\t\t}\n\t\tif (G[{0,1}] ^ G[{1,0}] ^ G[{1,1}]) {\n\t\t\tops.push_back({0,1,1,0,1,1});\n\t\t}\n\n\t\tcout << ops.size() << '\\n';\n\t\tfor (auto o : ops) {\n\t\t\tfor (int z = 0; z < 6; z++) {\n\t\t\t\tcout << o[z]+1 << \" \\n\"[z+1==6];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "graphs",
        "greedy",
        "implementation"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A2. Binary Table  Hard Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/84731",
    "editorial": "Consider two cases: If and , there are only possible operations, and we\r\ncan use up to operations. So, one can check all the possible ways of\r\nchoosing these operations, and seeing which combination of these\r\noperation will result in a full grid.Otherwise, at least one of and is\r\nbigger than . Without loss of generality imagine . Take the th row. For\r\neach cell within that row, we can use one operation on it, its left\r\nneighbour and the two cells above to fix this cell. We can do this for\r\nthe first cells in the row, and fix the last two with one operation on\r\nthem. We will make at most operations and reach a situation with one\r\nempty row. We can take the last row away and apply this procedure for\r\nthe remaining grid. If we say inductively that we will have at most\r\noperations for the remaining grid, we will have done at most operations\r\nin total. When , we can do the same with the columns, and when , we can\r\nfix the remaining grid as we discussed above.Time complexity: for each\r\ncase.\r\n"
}