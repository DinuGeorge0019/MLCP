{
    "link": "https://codeforces.com//contest/778/problem/B",
    "problemId": "95642",
    "problem_idx": "B",
    "shortId": "778B",
    "contest_number": "778",
    "problem_submissions": {
        "D": [
            25045880,
            25060354,
            25044951,
            25042270,
            25047480,
            25048926,
            25045795,
            25045544,
            25045486,
            25047721,
            25047363,
            25048949,
            25046309,
            25047075,
            25047917,
            25047905,
            25036950,
            25042732
        ],
        "E": [
            25042969,
            25046345,
            25048943,
            25037368,
            25230220,
            25046363,
            25054654,
            25048918,
            25047591,
            25047081
        ],
        "A": [
            25035252,
            25031242,
            25245410,
            25036410,
            25031451,
            25031235,
            25031489,
            25038781,
            25031419,
            25031309,
            25031692,
            25032018,
            25031359,
            25031871,
            25031264,
            25031548,
            25034117,
            25032346,
            25031343,
            25041816,
            25031435
        ],
        "B": [
            25034518,
            25033704,
            25035119,
            25035355,
            25034840,
            25040894,
            25042142,
            25035930,
            25034089,
            25038221,
            25035530,
            25036277,
            25035911,
            25033345,
            25036435,
            25039201,
            25037280,
            25038965,
            25040791,
            25035608
        ],
        "C": [
            25038188,
            25041985,
            25049416,
            25045342,
            25039545,
            25046412,
            25037203,
            25040856,
            25043392,
            25042924,
            25041581,
            25064524,
            25064516,
            25064118,
            25050637,
            25050497,
            25042489,
            25043145,
            25043153,
            25044553,
            25044592,
            25043572,
            25044608,
            25050488,
            25049895
        ]
    },
    "name": "B. Bitwise Formula",
    "statement": "Bob recently read about bitwise operations used in computers: , and . He\r\nhave studied their properties and invented a new game.Initially, Bob\r\nchooses integer , bit depth of the game, which means that all numbers in\r\nthe game will consist of bits. Then he asks Peter to choose some -bit\r\nnumber. After that, Bob computes the values of variables. Each variable\r\nis assigned either a constant -bit number or result of bitwise\r\noperation. Operands of the operation may be either variables defined\r\nbefore, or the number, chosen by Peter. After that, Peter’s score equals\r\nto the sum of all variable values.Bob wants to know, what number Peter\r\nneeds to choose to get the minimum possible score, and what number he\r\nneeds to choose to get the maximum possible score. In both cases, if\r\nthere are several ways to get the same score, find the minimum number,\r\nwhich he can choose.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#ifndef ONLINE_JUDGE\n# include <sys/time.h>\n# include <sys/resource.h>\n#endif\n\n/*** TEMPLATE CODE STARTS HERE ***/\n\nusing namespace std;\n\ntypedef vector<string> vs;\ntypedef long long ll;\ntypedef complex<double> pnt;\ntypedef vector<ll> vi;\ntypedef pair<ll, ll> pii;\n\n#define RA(x) begin(x), end(x)\n#define FE(i, x) for (auto i = begin(x); i != end(x); ++i)\n#define SZ(x) ((ll) (x).size())\n\ntemplate<class T>\nvoid splitstr(const string &s, vector<T> &out)\n{\n    istringstream in(s);\n    out.clear();\n    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));\n}\n\ntemplate<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }\n\nstatic void redirect(int argc, const char **argv)\n{\n#ifndef ONLINE_JUDGE\n    struct rlimit rlim;\n    getrlimit(RLIMIT_STACK, &rlim);\n    rlim.rlim_cur = 256 * 1024 * 1024;\n    setrlimit(RLIMIT_STACK, &rlim);\n    getrlimit(RLIMIT_DATA, &rlim);\n    rlim.rlim_cur = 256 * 1024 * 1024;\n    setrlimit(RLIMIT_DATA, &rlim);\n#endif\n\n    ios::sync_with_stdio(false);\n    if (argc > 1)\n    {\n        static filebuf f;\n        f.open(argv[1], ios::in);\n        cin.rdbuf(&f);\n        if (!cin)\n        {\n            cerr << \"Failed to open '\" << argv[1] << \"'\" << endl;\n            exit(1);\n        }\n    }\n\n    if (argc > 2)\n    {\n        static filebuf f;\n        f.open(argv[2], ios::out | ios::trunc);\n        cout.rdbuf(&f);\n        if (!cout)\n        {\n            cerr << \"Failed to open '\" << argv[2] << \"'\" << endl;\n        }\n    }\n}\n\n/*** TEMPLATE CODE ENDS HERE */\n\ntemplate<typename Op>\nstatic void combine(vector<array<int, 2>> &out,\n                    const vector<array<int, 2>> &left,\n                    const vector<array<int, 2>> &right,\n                    const Op &op)\n{\n    int M = SZ(out);\n    for (int i = 0; i < M; i++)\n        for (int j = 0; j < 2; j++)\n            out[i][j] = op(left[i][j], right[i][j]);\n}\n\nint main(int argc, const char **argv)\n{\n    redirect(argc, argv);\n    int N, M;\n    cin >> N >> M;\n    map<string, vector<array<int, 2>>> vars;\n    vector<array<int, 2>> peter(M);\n    for (int i = 0; i < M; i++)\n    {\n        peter[i][0] = 0;\n        peter[i][1] = 1;\n    }\n    for (int i = 0; i < N; i++)\n    {\n        string name, assign, left;\n        cin >> name >> assign >> left;\n        vector<array<int, 2>> out(M);\n        if (left[0] == '0' || left[0] == '1')\n        {\n            for (int j = 0; j < M; j++)\n                out[j][0] = out[j][1] = left[j] - '0';\n        }\n        else\n        {\n            string op, right;\n            cin >> op >> right;\n            const auto &leftv = (left == \"?\") ? peter : vars[left];\n            const auto &rightv = (right == \"?\") ? peter : vars[right];\n            if (op == \"XOR\")\n                combine(out, leftv, rightv, [](int x, int y) { return x ^ y; });\n            else if (op == \"AND\")\n                combine(out, leftv, rightv, [](int x, int y) { return x & y; });\n            else if (op == \"OR\")\n                combine(out, leftv, rightv, [](int x, int y) { return x | y; });\n        }\n        vars[name] = out;\n    }\n    vector<int> lo(M), hi(M);\n    for (int i = 0; i < M; i++)\n    {\n        int sums[2] = {0, 0};\n        for (const auto &entry : vars)\n        {\n            for (int j = 0; j < 2; j++)\n                sums[j] += entry.second[i][j];\n        }\n        if (sums[1] > sums[0])\n            hi[i] = 1;\n        if (sums[1] < sums[0])\n            lo[i] = 1;\n    }\n    for (int i = 0; i < M; i++)\n        cout << lo[i];\n    cout << '\\n';\n    for (int i = 0; i < M; i++)\n        cout << hi[i];\n    cout << '\\n';\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "dfs and similar",
        "expression parsing",
        "implementation"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Bitwise Formula.json",
    "editorial_link": "https://codeforces.com//blog/entry/50724",
    "editorial": "Note that changing -th bit of chosen number\ndoesnât change any bits of any of the variables other than -th one. Also\nnote that the total number of values is greater, as more variables have\n1 at -th position. Letâs solve for every bit independently: learn, what\nis the value of -th bit of chosen number. We can try both values and\nsimulate the given program. Choose one of the values that makes more\nvariables to have 1 at -th position. If both 0 and 1 give equal number\nof variables to have 1 at -th position, choose 0.\n",
    "hint": []
}