{"link": "https://codeforces.com//contest/559/problem/D", "problemId": "31963", "problem_idx": "D", "shortId": "559D", "contest_number": "559", "problem_submissions": {"E": [12182515, 12187399, 141685289, 12274173, 12181231, 12175304, 12176173], "D": [12174436, 12174384, 12175184, 12184862, 12179042, 12177010, 12178587, 49075843, 12177521, 12178544, 12177403, 12177707, 12177850, 12180968, 12184700, 12184490, 12181105, 12182102, 12177181], "B": [12168424, 12165732, 12167442, 12165414, 12170869, 12165053, 12170711, 12167857, 12167750, 12165064, 12170170, 12165197, 12169015, 12167991, 12167961, 12167252, 12165704, 12179411], "C": [12166898, 12169572, 12170142, 12166836, 12168670, 12169914, 12171548, 12172425, 12171036, 12171573, 12167528, 12170704, 12170899, 12172108, 12170757, 12172559, 12170995, 12170579], "A": [12164711, 12164664, 12165120, 12164570, 12172440, 12167121, 12167930, 12166447, 12185370, 12166201, 12165955, 12170667, 12167349, 12166038, 12183406, 12165416, 12164553, 12178800]}, "name": "D. Randomizer", "statement": "Gerald got tired of playing board games with the usual six-sided die,\r\nand he bought a toy called Randomizer. It functions as follows.A\r\nRandomizer has its own coordinate plane on which a strictly convex\r\npolygon is painted, the polygon is called a . If you shake a Randomizer,\r\nit draws some nondegenerate (i.e. having a non-zero area) convex polygon\r\nwith vertices at some vertices of the . The result of the roll (more\r\nprecisely, the result of the shaking) is considered to be the number of\r\npoints with integer coordinates, which were strictly inside (the points\r\non the border are not considered) the selected polygon. Now Gerald is\r\nwondering: what is the expected result of shaking the Randomizer?During\r\nthe shaking the Randomizer considers all the possible non-degenerate\r\nconvex polygons with vertices at the vertices of the . Let\u2019s assume that\r\nthere are versions of the polygons. Then the Randomizer chooses each of\r\nthem with probability .\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define SZ(x) ((int)(x).size())\n#define fi first\n#define se second\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\ntypedef long double LD;\nconst int N=101000;\nint n;\nll x[N],y[N];\nLD ans,pw[110];\nint main() {\n\tscanf(\"%d\",&n);\n\trep(i,0,n) scanf(\"%I64d%I64d\",x+i,y+i);\n\tpw[0]=1; rep(i,1,101) pw[i]=pw[i-1]/2;\n\tLD tot=1-pow(0.5,n)*(n*(n+1)/2+1);\n\tLD prob=1./4/tot;\n\trep(j,1,n) {\n\t\tLD r=prob; r*=1-pow(0.5,n-1-j);\n\t\tint k=j;\n\t\trep(i,0,n) {\n\t\t\tans+=r*(x[i]*y[k]-x[k]*y[i]-abs(__gcd(x[i]-x[k],y[i]-y[k])));\n\t\t\tif (k==n-1) k=0; else k++;\n\t\t}\n\t\tprob/=2;\n\t\tif (clock()>=2.2*CLOCKS_PER_SEC) break;\n\t}\n\tprintf(\"%.10f\\n\",(double)ans/2+1);\n}\n"], "input": "", "output": "", "tags": ["combinatorics", "geometry", "probabilities"], "dificulty": "2800", "interactive": false}