{
    "link": "https://codeforces.com//contest/132/problem/A",
    "problemId": "706",
    "problem_idx": "A",
    "shortId": "132A",
    "contest_number": "132",
    "problem_submissions": {
        "E": [
            925463,
            924045,
            926495,
            927129,
            930757,
            927949,
            927053
        ],
        "B": [
            923684,
            925104,
            927721,
            923959,
            924110,
            922324,
            922978,
            923016,
            925081,
            924882,
            922141,
            926108,
            923013,
            925452,
            925520,
            925045,
            926157,
            926077
        ],
        "D": [
            922457,
            922554,
            924871,
            922974,
            924948,
            924454,
            924331,
            923366,
            923651,
            925293,
            923560,
            925565,
            922791,
            924076,
            923184,
            923568,
            923999
        ],
        "C": [
            920611,
            921352,
            922698,
            921318,
            922939,
            921777,
            922465,
            921286,
            921687,
            923127,
            921959,
            921893,
            920032,
            922242,
            921743,
            922634,
            922920
        ],
        "A": [
            919809,
            919078,
            921073,
            919691,
            920209,
            919403,
            919950,
            919419,
            920157,
            919937,
            920116,
            920376,
            920930,
            921451,
            922067,
            920124,
            920860
        ]
    },
    "name": "A. Turing Tape",
    "statement": "INTERCAL is the oldest of esoteric programming languages. One of its\r\nmany weird features is the method of character-based output, known as\r\nTuring Tape method. It converts an array of unsigned 8-bit integers into\r\na sequence of characters to print, using the following method.The\r\nintegers of the array are processed one by one, starting from the first.\r\nProcessing -th element of the array is done in three steps:1. The 8-bit\r\nbinary notation of the ASCII-code of the previous printed character is\r\nreversed. When the first element of the array is processed, the result\r\nof this step is considered to be 0.2. The -th element of the array is\r\nsubtracted from the result of the previous step modulo 256.3. The binary\r\nnotation of the result of the previous step is reversed again to produce\r\nASCII-code of the -th character to be printed.You are given the text\r\nprinted using this method. Restore the array used to produce this text.\r\n",
    "solutions": [
        "#pragma comment(linker, \"/STACK:65777216\")\n \n#include <algorithm>\n#include <iostream>\n#include <string>\n#include<sstream>\n#include<string.h>\n#include <cstdio>\n#include <vector>\n#include <bitset>\n#include <cmath>\n#include <queue>\n#include<stack>\n#include <set>\n#include <map>\n#include<ctime>\n \nusing namespace std;\n \ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\ntypedef pair<double,double> pdd;\ntypedef unsigned long long ull;\n \n#define FOR(i,a,b) for (int i(a); i < (b); i++)\n#define REP(i,n) FOR(i,0,n)\n#define SORT(v) sort((v).begin(),(v).end())\n#define UN(v) sort((v).begin(),(v).end()),v.erase(unique(v.begin(),v.end()),v.end())\n#define CL(a,b) memset(a,b,sizeof(a))\n#define pb push_back\n\nint getcode(char c){\n\tint q = int(c);\n\tif(q<0) q += 256;\n\treturn q;\n}\n\nint mirror(int code){\n\tint res = 0;\n\tREP(i,8)if(code&(1<<i))\n\t\tres ^= (1<<(7-i));\n\treturn res;\n}\n\nint main(){\n#ifdef LocalHost\n    freopen(\"input.txt\",\"r\",stdin);\n//  freopen(\"output.txt\",\"w\",stdout);\n#endif\n\t\n\tstring s;\n\tgetline(cin,s);\n\n\tint prev = 0;\n\tREP(i,s.size()){\n\t\tprev = getcode(s[i]);\n\t\tprev = mirror(prev);\n\n\t\tint x = mirror(i?getcode(s[i-1]):0) - prev;\n\t\tx%=256;\n\t\tif(x<0) x+=256;\n\t\tcout<<x<<endl;\n\t}\n\n \n#ifdef LocalHost\n    cout<<endl<<endl<<\"TIME: \"<<clock()<<endl;\n#endif\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Turing Tape.json",
    "editorial_link": "https://codeforces.com//blog/entry/3302",
    "editorial": "This was another implementation problem, inspired by another great language INTERCAL. Technically it was a bit more complicated than the previous one, due to the usage of byte reversal and having to implement not the described procedure but its inverse. For i-th character of input data reverse it and store in rev[i]; then i-th number of the output can be calculated as (rev[i?-?1]?-?rev[i]?+?256)%256 (for i?=?0 rev[i?-?1]?=?0).",
    "hint": []
}