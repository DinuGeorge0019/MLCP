{"link": "https://codeforces.com//contest/1479/problem/C", "problemId": "889628", "problem_idx": "C", "shortId": "1479C", "contest_number": "1479", "problem_submissions": {"D": [106806356, 106798804, 106791682, 106791766, 106783633, 106814882, 106806404, 106823371, 106808799, 106822218, 106817839, 106848882, 106812415, 106835076, 106827553, 106802594, 106816382, 106815777, 106820515, 106838550, 106850875, 106833526], "C": [106782305, 106781616, 106813281, 106777792, 106806652, 106785851, 106790598, 106804329, 106788311, 106797179, 106801693, 106797158, 106799023, 106802871, 106833768, 106794280, 106835769, 106791359, 106812286, 106805528], "B2": [106767251, 106763833, 106764524, 106766365, 106766872, 106772583, 106777899, 106776623, 106772714, 106777329, 106781346, 106839134, 106782598, 106789550, 106774779, 106781374, 106779953, 106776541, 106784819, 106807842], "B1": [106761871, 106761547, 106772762, 106765327, 106765110, 106769139, 106770176, 106777978, 106783437, 106765790, 106777195, 106759777, 106771397, 106771604, 106765950, 106772183, 106778477, 106775679, 106771753, 106783453], "A": [106755900, 106753726, 106756482, 106751012, 106869291, 106756412, 106753230, 106749820, 106752580, 106752067, 106756325, 106758074, 106749882, 106753072, 106759686, 106753472, 106830245, 106764145, 106862156, 106753714, 106755663], "E": [106862710, 106861209, 106848127, 128939200, 106847859, 106846880, 112187125]}, "name": "C. Continuous City", "statement": "Some time ago Homer lived in a beautiful city. There were n blocks\r\nnumbered from 1 to n and m directed roads between them. Each road had a\r\npositive length, and each road went from the block with the smaller\r\nindex to the block with the larger index. For every two (different)\r\nblocks, there was at most one road between them. Homer discovered that\r\nfor some two numbers L and R the city was (L, R)-. The city is said to\r\nbe (L, R)-continuous, if all paths from block 1 to block n are of length\r\nbetween L and R (inclusive); and for every L\r\nleq d\r\nleq R, there is path from block 1 to block n whose length is d. A path\r\nfrom block u to block v is a sequence u = x_0\r\nto x_1\r\nto x_2\r\nto\r\ndots\r\nto x_k = v, where there is a road from block x_{i-1} to block x_{i} for\r\nevery 1\r\nleq i\r\nleq k. The length of a path is the sum of lengths over all roads in the\r\npath. Two paths x_0\r\nto x_1\r\nto\r\ndots\r\nto x_k and y_0\r\nto y_1\r\nto\r\ndots\r\nto y_l are different, if k\r\nneq l or x_i\r\nneq y_i for some 0\r\nleq i\r\nleq\r\nmin\r\n{k, l\r\n}. After moving to another city, Homer only remembers the two special\r\nnumbers L and R but forgets the numbers n and m of blocks and roads,\r\nrespectively, and how blocks are connected by roads. However, he\r\nbelieves the number of blocks should be no larger than 32 (because the\r\ncity was small).As the best friend of Homer, please tell him whether it\r\nis possible to find a (L, R)-continuous city or not.\r\n", "solutions": ["/**\n * code generated by JHelper\n * More info: https://github.com/AlexeyDmitriev/JHelper\n * @author\n */\n\n// Actual solution is at the bottom\n\n#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <climits>\n#include <cstdint>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <memory>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <stack>\n#include <string>\n#include <unordered_set>\n#include <unordered_map>\n#include <vector>\n\n#define sz(v) ((int)(v).size())\n#define all(v) (v).begin(),(v).end()\n\nusing namespace std;\n\ntypedef int64_t int64;\ntypedef pair<int, int> ii;\n\nclass CContinuousCity {\n public:\n  void solveOne() {\n    int l, r;\n    cin >> l >> r;\n    cout << \"YES\\n\";\n    vector<tuple<int, int, int>> edges;\n    int n = 23;\n    int need = r - l + 1;\n    int next = l;\n    for (int i = n; i >= n - 21; --i) {\n      int p2 = 1 << max(0, n - i - 1);\n      for (int j = i - 1; j >= n - 21; --j) {\n        edges.emplace_back(j, i, p2);\n      }\n      if (i < n && (need & p2)) {\n        if (next == 1) {\n          int ne = edges.size();\n          for (int j = 0; j < ne; ++j) {\n            if (get<0>(edges[j]) == i) {\n              edges.emplace_back(1, get<1>(edges[j]), get<2>(edges[j]));\n            }\n          }\n        } else {\n          edges.emplace_back(1, i, next - 1);\n        }\n        next += p2;\n        need -= p2;\n      }\n    }\n    assert(need == 0);\n    cout << n << \"\\n\";\n    cout << edges.size() << \"\\n\";\n    for (auto e : edges) {\n      cout << get<0>(e) << \" \" << get<1>(e) << \" \" << get<2>(e) << \"\\n\";\n    }\n  }\n\n  void solve() {\n    int nt = 1;\n    for (int it = 0; it < nt; ++it) {\n      solveOne();\n    }\n  }\n};\n\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n    CContinuousCity solver;\n\n\n    solver.solve();\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["bitmasks", "constructive algorithms"], "dificulty": "2500", "interactive": false}