{
    "link": "https://codeforces.com//contest/288/problem/C",
    "problemId": "2803",
    "problem_idx": "C",
    "shortId": "288C",
    "contest_number": "288",
    "problem_submissions": {
        "E": [
            3461335,
            3458641,
            3460719,
            3463436,
            3464512,
            3465599,
            3463363
        ],
        "D": [
            3459154,
            3461432,
            3462104,
            3459195,
            3461788,
            3463179,
            3460795,
            3460033,
            3460203,
            3460132,
            3460594,
            3462546,
            3461278,
            3460741,
            3460872,
            3463288,
            3461898,
            3463050,
            3459096
        ],
        "C": [
            3456557,
            3456008,
            3456566,
            3460063,
            3459414,
            3455119,
            3457015,
            3455658,
            3456591,
            3461209,
            3457290,
            3458346,
            3456693,
            3458697,
            3459031,
            3457702,
            3456625,
            3456183,
            3459280,
            3461683
        ],
        "B": [
            3454685,
            3454711,
            3454445,
            3455354,
            3456458,
            3458036,
            3455646,
            3457997,
            3455444,
            3455146,
            3455413,
            3456413,
            3455198,
            3455816,
            3455015,
            3456234,
            3455164,
            3454216,
            3456654,
            3456132
        ],
        "A": [
            3453504,
            3453349,
            3455471,
            3453867,
            3453397,
            3453393,
            3454113,
            3453524,
            3454252,
            3453356,
            3454346,
            3454163,
            3455311,
            3454507,
            3455240,
            3454740,
            3453430,
            3455107,
            3453891,
            3453666
        ]
    },
    "name": "C. Polo the Penguin and XOR operation",
    "statement": "Little penguin Polo likes permutations. But most of all he likes\r\npermutations of integers from to , inclusive.For permutation , Polo has\r\ndefined its beauty number .Expression means applying the operation of\r\nbitwise excluding \"OR\" to numbers and . This operation exists in all\r\nmodern programming languages, for example, in language and it is\r\nrepresented as \"\" and in as \"\".Help him find among all permutations of\r\nintegers from to the permutation with the maximum beauty.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int mn=1<<20;\nint f[mn*4+2];int n,a[mn];\nvoid blt(int p,int l,int r)\n{\n    if(l==r-1)\n    {\n        if(l<n)f[p]=1;else f[p]=0;\n        return;\n    }\n    int mid=(l+r)/2;\n    blt(p*2+1,l,mid),blt(p*2+2,mid,r);\n    f[p]=f[p*2+1]+f[p*2+2];\n}\nint ask(int p,int l,int r,int x,int y)\n{\n    if(l==r-1)\n    {\n        f[p]=0;a[x]=l;\n        return 0;\n    }\n    int mid=(l+r)/2;\n    int c=(x>>y)&1,S=-1;\n    if(c==0)\n    {\n        if(f[p*2+2])S=ask(p*2+2,mid,r,x,y-1)+(1<<y);else\n        if(f[p*2+1])S=ask(p*2+1,l,mid,x,y-1);\n    }else\n    {\n        if(f[p*2+1])S=ask(p*2+1,l,mid,x,y-1)+(1<<y);else\n        if(f[p*2+2])S=ask(p*2+2,mid,r,x,y-1);\n    }\n    f[p]=f[p*2+1]+f[p*2+2];\n    return S;\n}\nint main()\n{\n    scanf(\"%d\",&n);n++;\n    blt(0,0,mn);\n    ll S=0;\n    for(int i=0;i<n;i++)\n        S+=ask(0,0,mn,i,19);\n    cout<<S<<endl;\n    for(int i=0;i<n;i++)\n        printf(\"%d%c\",a[i],i==n-1?'\\n':' ');\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Polo the Penguin and XOR operation.json",
    "editorial_link": "https://codeforces.com/blog/entry/7241",
    "editorial": "Solution. Since we need to maximize the result, we need to find such permutation, for which the least number of bit disappear. (We consider bit disappeared if it was 1 both in i and pi, so in  it is 0). It turns out that for each n there is such permutation that no bit disappear. How to build it? We will be solving problem by iterations while n?>?0. On each iteration, we need to find the biggest (the leftmost in binary representation) bit which is not 0 in binary representation of n and denote it position (bits are numbered from 0) by b. Now we need to find integer m \u0097 minimal integer from 0 to n, inclusive, such that b-th bit is also 1 in it. After that you can see (look image below), that at  no bit disappear, at  no bit disappear, ..., at  no bit disappear. So, it is good to assign exactly that integers to our permutation, i. e. pm?=?m?-?1 and pm?-?1?=?m, pm?+?1?=?m?-?2 and pm?-?2?=?m?+?1 and so on. After that assign value m?-?(n?-?m?+?1)?-?1 to n and go to next iteration.\n\n \n\nNow when we know how to build permutation and that no bit disappear, the value of the answer is equal to ."
}