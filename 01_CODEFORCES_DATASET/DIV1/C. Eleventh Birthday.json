{
    "link": "https://codeforces.com//contest/856/problem/C",
    "problemId": "121785",
    "problem_idx": "C",
    "shortId": "856C",
    "contest_number": "856",
    "problem_submissions": {
        "D": [
            30250286,
            30248673,
            30250147,
            30250541,
            30249770,
            30271191
        ],
        "C": [
            30249129,
            30248932,
            30248929,
            30249736,
            30251499,
            30249147,
            30250069,
            30249822
        ],
        "B": [
            30247472,
            30247324,
            30247880,
            30249381,
            30248057,
            30247570,
            30247709,
            30248446
        ],
        "A": [
            30246548,
            30246864,
            30247263,
            30246924,
            30246957,
            30246458,
            30246947,
            30246849
        ],
        "E": [
            30265847,
            30259642
        ]
    },
    "name": "C. Eleventh Birthday",
    "statement": "It is Boryaâ€™s eleventh birthday, and he has got a great present: cards\r\nwith numbers. The -th card has the number written on it. Borya wants to\r\nput his cards in a row to get one greater number. For example, if Borya\r\nhas cards with numbers , , and , and he puts them in a row in this\r\norder, he would get a number .He is only 11, but he already knows that\r\nthere are ways to put his cards in a row. But today is a special day, so\r\nhe is only interested in such ways that the resulting big number is\r\ndivisible by eleven. So, the way from the previous paragraph is good,\r\nbecause , but if he puts the cards in the following order: , , , he\r\nwould get a number , it is not divisible by , so this way is not good\r\nfor Borya. Help Borya to find out how many good ways to put the cards\r\nare there.Borya considers all cards different, even if some of them\r\ncontain the same number. For example, if Borya has two cards with 1 on\r\nit, there are two good ways.Help Borya, find the number of good ways to\r\nput the cards. This number can be large, so output it modulo .\r\n",
    "solutions": [
        "#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <set>\n#include <map>\n#include <utility>\n#include <cstdlib>\n#include <memory>\n#include <queue>\n#include <cassert>\n#include <cmath>\n#include <ctime>\n#include <complex>\n#include <bitset>\n#include <fstream>\n#include <unordered_map>\n#include <unordered_set>\n#include <numeric>\n\nusing namespace std;\n\n#define ws ws_____________________\n#define y1 y1_____________________\n#define y0 y0_____________________\n#define left left_________________\n#define right right_______________\n#define next next_________________\n#define prev prev_________________\n#define hash hash_________________\n\n#define pb push_back\n#define fst first\n#define snd second\n#define mp make_pair \n#define sz(C) ((int) (C).size())\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)\n#define all(C) begin(C), end(C)\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int uint;\ntypedef pair<int,int> pii;\ntypedef pair<ll, ll> pll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<pii> vii;\ntypedef long double ld;\ntypedef complex<double> cd;\n\n#ifdef LOCAL\n#define eprintf(args...) fprintf(stderr, args), fflush(stderr)\n#else\n#define eprintf(...) ;\n#endif\n\n#define FILE_NAME \"a\"\n\nconst int MOD = 998244353;\n\nvoid add(int& x, int y) {\n\t((x += y) >= MOD) && (x -= MOD);\n}\n\nint mul(int x, int y) {\n\treturn x * 1ll * y % MOD;\n}\n\nconst int M = 11;\n\nvoid addM(int& x, int y) {\n\t((x += y) >= M) && (x -= M);\n}\n\nvoid subM(int& x, int y) {\n\taddM(x, -y + M);\n}\n\nvi repr(int a) {\n\tvi res;\n\twhile (a) {\n\t\tres.pb(a % 10);\n\t\ta /= 10;\n\t}\n\tassert(!res.empty());\n\treverse(all(res));\n\treturn res;\n}\n\npii convert(int a) {\n\tvi digs = repr(a);\n\n\tpii res;\n\tres.fst = sz(digs) & 1;\n\n\tforn(i, sz(digs)) {\n\t\tif  (i & 1) {\n\t\t\tsubM(res.snd, digs[i]);\n\t\t} else {\n\t\t\taddM(res.snd, digs[i]);\n\t\t}\n\t}\n\n\treturn res;\n}\n\nint n;\nvi odd;\nvi even;\n\nbool read() {\n\tif  (scanf(\"%d\", &n) < 1) {\n\t\treturn 0;\n\t}\n\todd.clear();\n\teven.clear();\n\tforn(i, n) {\n\t\tint a;\n\t\tscanf(\"%d\", &a);\n\t\tauto conv = convert(a);\n\t\tif  (conv.fst) {\n\t\t\todd.pb(conv.snd);\n\t\t} else {\n\t\t\teven.pb(conv.snd);\n\t\t}\n\t}\n\treturn 1;\n}\n\nvi calc1() {\n\tconst int all_even_poses = sz(odd) / 2;\n\tconst int all_odd_poses = sz(odd) - all_even_poses;\n\n\tvvi dp(all_even_poses + 1, vi(M, 0));\n\tdp[0][0] = 1;\n\tforn(i, sz(odd) + 1) {\n\t\tvvi ndp(all_even_poses + 1, vi(M, 0));\n\n\t\tforn(used_even, all_even_poses + 1) {\n\t\t\tconst int used_odd = i - used_even;\n\t\t\tforn(rem, M) {\n\t\t\t\tconst int cur_dp = dp[used_even][rem];\n\t\t\t\tif  (!cur_dp) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tassert(used_odd >= 0);\n\t\t\t\tassert(used_odd <= all_odd_poses);\n\n\t\t\t\t// eprintf(\"i = %d, used_even = %d, used_odd = %d, rem = %d, cur_dp = %d\\n\", i, used_even, used_odd, rem, cur_dp);\n\n\t\t\t\tif  (i == sz(odd)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// put to even\n\t\t\t\tif  (used_even < all_even_poses) {\n\t\t\t\t\tint nrem = rem;\n\t\t\t\t\taddM(nrem, odd[i]);\n\t\t\t\t\tassert(0 <= nrem && nrem < M);\n\t\t\t\t\tadd(ndp[used_even + 1][nrem], mul(cur_dp, all_even_poses - used_even));\n\t\t\t\t}\n\n\t\t\t\t// put to odd\n\t\t\t\tif  (used_odd < all_odd_poses) {\n\t\t\t\t\tint nrem = rem;\n\t\t\t\t\tsubM(nrem, odd[i]);\n\t\t\t\t\tassert(0 <= nrem && nrem < M);\n\t\t\t\t\tadd(ndp[used_even][nrem], mul(cur_dp, all_odd_poses - used_odd));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif  (i == sz(odd)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tdp.swap(ndp);\n\t}\n\n\treturn dp[all_even_poses];\n}\n\nint calc2(const vi& dyn1) {\n\tconst int max_places = sz(odd) + sz(even) + 1;\n\n\tvvi dp(max_places + 1, vi(M, 0));\n\tforn(rem, M) {\n\t\tdp[sz(odd) / 2 + 1][rem] = dyn1[rem];\n\t}\n\n\tforn(i, sz(even)) {\n\t\tconst int cur_places = sz(odd) + i + 1;\n\t\tvvi ndp(max_places + 1, vi(M, 0));\n\n\t\tforn(even_places, max_places + 1) {\n\t\t\tconst int odd_places = cur_places - even_places;\n\n\t\t\tforn(rem, M) {\n\t\t\t\tconst int cur_dp = dp[even_places][rem];\n\t\t\t\tif  (!cur_dp) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// eprintf(\"i = %d, even_places = %d, rem = %d, odd_places = %d\\n\", i, even_places, rem, odd_places);\n\n\t\t\t\tassert(even_places > 0);\n\t\t\t\tassert(odd_places >= 0);\n\n\t\t\t\t// to even place\n\t\t\t\tif  (even_places) {\n\t\t\t\t\tint nrem = rem;\n\t\t\t\t\taddM(nrem, even[i]);\n\t\t\t\t\tadd(ndp[even_places + 1][nrem], mul(cur_dp, even_places));\n\t\t\t\t}\n\n\t\t\t\t// to odd place\n\t\t\t\t{\n\t\t\t\t\tint nrem = rem;\n\t\t\t\t\tsubM(nrem, even[i]);\n\t\t\t\t\tadd(ndp[even_places][nrem], mul(cur_dp, odd_places));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tdp.swap(ndp);\n\t}\n\n\tint ans = 0;\n\tforn(i, sz(dp)) {\n\t\tadd(ans, dp[i][0]);\n\t}\n\n\treturn ans;\n}\n\nint solve() {\n\t// eprintf(\"even:\\n\");\n\t// for (int e : even) {\n\t// \teprintf(\"%d \", e);\n\t// }\n\t// eprintf(\"\\n\");\n\n\t// eprintf(\"odd:\\n\");\n\t// for (int o : odd) {\n\t// \teprintf(\"%d \", o);\n\t// }\n\t// eprintf(\"\\n\");\n\n\tvi dyn1 = calc1();\n\n\t// eprintf(\"dyn1:\\n\");\n\t// forn(i, sz(dyn1)) {\n\t// \teprintf(\"%d -> %d\\n\", i, dyn1[i]);\n\t// }\n\n\tint ans = calc2(dyn1);\n\n\treturn ans;\n}\n\nint main() {\n#ifdef LOCAL\n\tfreopen(FILE_NAME \".in\", \"r\", stdin);\n\t// freopen(FILE_NAME \".out\", \"w\", stdout);\n#endif\n\n\tint T;\n\tscanf(\"%d\", &T);\n\tforn(t, T) {\n\t\tassert(read());\n\t\tprintf(\"%d\\n\", solve());\n\t}\n\n#ifdef LOCAL\n\tcerr.precision(5);\n\tcerr << \"Time: \" << fixed << (double) clock() / CLOCKS_PER_SEC << endl;\n#endif\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Eleventh Birthday.json",
    "editorial_link": "https://codeforces.com//blog/entry/54452",
    "editorial": "Let us use divisibility rule for eleven. The number is divisible by eleven if the sum of digits at odd positions is equal to the sum of digits at even positions modulo 11. So for each number on a card there are only two parameters that we care about: the sign interchanging sum of its digits with digits at odd positions positive and digits at even position negative, and the parity of its digit count.\n\nLet us divide all cards to two groups: with even digit count and with odd digit count. Let us first put cards with numbers that have odd count of digits. Half of them (rounded up) will have their sign interchanging sum used as positive, other half as negative. Let us use dynamic programming to find the number of ways to sum them up to have a given sum modulo 11. The state includes the number of cards considered, the number of cards that are used as positive, and the current sum modulo 11. There are two transitions: take the current card as positive, and take it as negative.\n\nIf there are no cards with odd digit count, no matter how you order even digit count cards the result modulo 11 is the same. So the answer is either 0 or n!. In the other case each even digit count card can be used either as positive, or as negative, independent of the other cards. Use analogous dynamic programming to count the number of ways to get each possible sum modulo 11.\n\nFinally, combine results for even and odd digit count cards, getting the total sum modulo 11 equal to 0.",
    "hint": []
}