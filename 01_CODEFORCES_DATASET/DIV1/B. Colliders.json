{"link": "https://codeforces.com//contest/154/problem/B", "problemId": "955", "problem_idx": "B", "shortId": "154B", "contest_number": "154", "problem_submissions": {"E": [1231038, 1230512, 1358194], "D": [1225676, 1226429, 1228394, 1228749, 1229408, 1228702, 1229077, 1223939, 1227964, 1479286, 1228630, 1225612, 1229806, 1227500, 1227060], "C": [1223619, 1223667, 1223145, 1226138, 1224320, 1226736, 1226231, 1230453, 1229461, 1479267, 1226553, 1226465, 1225747, 1230469, 1224292, 1224323], "B": [1222804, 1227642, 1224517, 1223990, 1223294, 1225469, 1223473, 1226506, 1224622, 1479175, 1224138, 1223064, 1223792, 1223935, 1223500, 1223955, 1223146, 1223079], "A": [1221382, 1221463, 1226241, 1221946, 1222395, 1223447, 1221860, 1224559, 1222303, 1479137, 1222840, 1221809, 1230571, 1221518, 1221796, 1222615, 1221718]}, "name": "B. Colliders", "statement": "By 2312 there were Large Hadron Colliders in the inhabited part of the\r\nuniverse. Each of them corresponded to a single natural number from to .\r\nHowever, scientists did not know what activating several colliders\r\nsimultaneously could cause, so the colliders were deactivated.In 2312\r\nthere was a startling discovery: a collider\u2019s activity is safe if and\r\nonly if all numbers of activated colliders are pairwise relatively prime\r\nto each other (two numbers are relatively prime if their greatest common\r\ndivisor equals )! If two colliders with relatively nonprime numbers are\r\nactivated, it will cause a global collapse.Upon learning this,\r\nphysicists rushed to turn the colliders on and off and carry out all\r\nsorts of experiments. To make sure than the scientists\u2019 quickness\r\ndoesn\u2019t end with big trouble, the Large Hadron Colliders\u2019 Large Remote\r\nControl was created. You are commissioned to write the software for the\r\nremote (well, you do not expect anybody to operate it manually, do\r\nyou?).Initially, all colliders are deactivated. Your program receives\r\nmultiple requests of the form \"activate/deactivate the -th collider\".\r\nThe program should handle requests in the order of receiving them. The\r\nprogram should print the processed results in the format described\r\nbelow.To the request of \"\" (that is, to activate the -th collider), the\r\nprogram should print exactly one of the following responses: \"\" if the\r\nactivation was successful. \"\", if the -th collider was already activated\r\nbefore the request. \"\", if there is a conflict with the -th collider\r\n(that is, the -th collider is on, and numbers and are not relatively\r\nprime). In this case, the -th collider shouldn\u2019t be activated. If a\r\nconflict occurs with several colliders simultaneously, you should print\r\nthe number of any of them. The request of \"\" (that is, to deactivate the\r\n-th collider), should receive one of the following responses from the\r\nprogram: \"\", if the deactivation was successful. \"\", if the -th collider\r\nwas already deactivated before the request. You don\u2019t need to print\r\nquotes in the output of the responses to the requests.\r\n", "solutions": ["#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> di[101000];\nbool ison[101000];\nint cnt[101000];\nvector<int> as[101000];\ninline void seton(int x){\n    ison[x]=1;\n    for(int i=1;i<di[x].size();i++){\n        cnt[di[x][i]]++;\n        as[di[x][i]].push_back(x);\n    }\n}\ninline void setoff(int x){\n    ison[x]=0;\n    for(int i=1;i<di[x].size();i++)cnt[di[x][i]]--;\n}\ninline int conf(int x){\n    int i;\n    for(i=1;i<di[x].size();i++){\n        if(cnt[di[x][i]]){\n            while(1){\n                int r=as[di[x][i]][as[di[x][i]].size()-1];\n                if(ison[r])return r;\n                as[di[x][i]].pop_back();\n            }\n        }\n    }\n    return -1;\n}\nint main(){\n    int n,m,i,j;\n    scanf(\"%d%d\",&n,&m);\n    vector<int> d2;\n    for(i=1;i<=n;i++){\n        d2.clear();\n        for(j=1;j*j<=i;j++){\n            if(i%j==0){\n                di[i].push_back(j);\n                if(j*j!=i)d2.push_back(i/j);\n            }\n        }\n        for(j=d2.size()-1;j>=0;j--)di[i].push_back(d2[j]);\n    }\n    while(m--){\n        char tmp[10];\n        int x;\n        scanf(\"%s%d\",tmp,&x);\n        if(tmp[0]=='+'){\n            if(ison[x])puts(\"Already on\");\n            else{\n                int d=conf(x);\n                if(d==-1){\n                    seton(x);\n                    puts(\"Success\");\n                }else printf(\"Conflict with %d\\n\",d);\n            }\n        }else{\n            if(!ison[x])puts(\"Already off\");\n            else{\n                setoff(x);\n                puts(\"Success\");\n            }\n        }\n    }\n}\n"], "input": "", "output": "", "tags": ["math", "number theory"], "dificulty": "1600", "interactive": false}