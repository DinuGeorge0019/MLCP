{
    "link": "https://codeforces.com//contest/407/problem/D",
    "problemId": "7734",
    "problem_idx": "D",
    "shortId": "407D",
    "contest_number": "407",
    "problem_submissions": {
        "D": [
            6186438,
            6183272,
            6186415,
            6188995,
            6186843
        ],
        "C": [
            6183229,
            6184237,
            6184448,
            6181726,
            6183048,
            6186206,
            6183334,
            6183650,
            6187229,
            6183606,
            6183728,
            6181678,
            6184812,
            6186103,
            6186307,
            6184286,
            6185997
        ],
        "A": [
            6179819,
            6185054,
            6178519,
            6178154,
            6178508,
            6178273,
            6178388,
            6178848,
            6178615,
            6178776,
            6179374,
            6178369,
            6179907,
            6178927,
            6178200,
            6187273,
            6182603,
            6178438
        ],
        "B": [
            6178779,
            6180059,
            6180299,
            6179261,
            6180911,
            6179733,
            6180104,
            6180969,
            6180700,
            6180320,
            6180917,
            6186380,
            6181105,
            6180890,
            6180916,
            6181007,
            6182073,
            6187181
        ],
        "E": [
            6198010,
            6190656
        ]
    },
    "name": "D. Largest Submatrix 3",
    "statement": "You are given matrix of size , its elements are integers. We will assume\r\nthat the rows of the matrix are numbered from top to bottom from 1 to ,\r\nthe columns are numbered from left to right from 1 to . We will denote\r\nthe element on the intersecting of the -th row and the -th column as\r\n.We\u2019ll call submatrix such elements of the given matrix that AND . We\u2019ll\r\ncall the area of the submatrix number . We\u2019ll call a submatrix\r\ninhomogeneous, if all its elements are distinct.Find the largest (in\r\narea) inhomogenous submatrix of the given matrix.\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <set>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <memory.h>\n#include <string>\n#include <cstring>\n#include <sstream>\n#include <cstdlib>\n#include <ctime>\n#include <cassert>\n\nusing namespace std;\n\nconst int N = 444;\nconst int M = N * N;\n\nshort f[N][N][N];\n\ninline void add(int xa, int ya, int xb, int yb) {\n  yb--;\n  if (yb < f[xa][xb][ya]) {\n    f[xa][xb][ya] = yb;\n  }\n}\n\nint last[M], was[M];\nint a[N][N];\n\nint main() {\n  int r, c;\n  scanf(\"%d %d\", &r, &c);\n  for (int i = 1; i <= r; i++)\n    for (int j = 1; j <= c; j++) scanf(\"%d\", a[i] + j);\n  for (int i1 = 1; i1 <= r; i1++)\n    for (int i2 = i1; i2 <= r; i2++)\n      for (int j = 1; j <= c; j++) f[i1][i2][j] = c;\n  for (int i = 0; i < M; i++) {\n    last[i] = 0;\n    was[i] = 0;\n  }\n  int it = 0;\n  for (int i = 1; i <= r; i++) {\n    it++;\n    for (int j = c; j >= 1; j--) {\n      if (was[a[i][j]] == it) {\n        add(i, j, i, last[a[i][j]]);\n      }\n      last[a[i][j]] = j;\n      was[a[i][j]] = it;\n    }\n  }\n  for (int i1 = 1; i1 <= r; i1++) {\n    for (int i2 = i1 + 1; i2 <= r; i2++) {\n      it++;\n      for (int j = c; j >= 1; j--) {\n        if (was[a[i1][j]] == it) {\n          add(i1, j, i2, last[a[i1][j]]);\n        }\n        last[a[i1][j]] = j;\n        was[a[i1][j]] = it;\n        if (was[a[i2][j]] == it) {\n          add(i1, j, i2, last[a[i2][j]]);\n        }\n        last[a[i2][j]] = j;\n        was[a[i2][j]] = it;\n      }\n    }\n  }\n  int ans = 0;\n  for (int i1 = r; i1 >= 1; i1--)\n    for (int i2 = i1; i2 <= r; i2++)\n      for (int j = c; j >= 1; j--) {\n        int ft = f[i1][i2][j];\n        int area = (i2 - i1 + 1) * (ft - j + 1);\n        if (area > ans) {\n          ans = area;\n        }\n        if (i1 > 1 && ft < f[i1 - 1][i2][j]) {\n          f[i1 - 1][i2][j] = ft;\n        }\n        if (i2 < r && ft < f[i1][i2 + 1][j]) {\n          f[i1][i2 + 1][j] = ft;\n        }\n        if (j > 1 && ft < f[i1][i2][j - 1]) {\n          f[i1][i2][j - 1] = ft;\n        }\n      }\n  printf(\"%d\\n\", ans);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "hashing"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Largest Submatrix 3.json",
    "editorial_link": "https://codeforces.com//blog/entry/11333",
    "editorial": "In this task you have to find largest by area submatrix, consisting from\r\ndifferent numbers. Let\u00e2\u0080\u0099s see solutions from slow to fast. 1) Solution by\r\n: Iterate through two opposite vertices submatrix-answer and check that\r\nall numbers are different. 2) Solution by : Let\u00e2\u0080\u0099s fix Up and Down\r\nborders submatrix-answer (). Use two pointers method to iterate Left and\r\nRight borders: while in submatrix there are no equal numbers, increment\r\nRight, while there are equal numbers increment Left. Every check ,\r\nincrements . 3) Solution by : Let\u00e2\u0080\u0099s construct function maxR(Left) (let\u00e2\u0080\u0099s\r\nconsider that Up <= Down are fixed): maximal value Right, so that in\r\nsubmatrix (Up, Down, Left, Right) there is no equals numbers. You can\r\nsee that maxR(i) <= maxR(i + 1) is true for every i. How values of this\r\nfunction changes by shift Down to Down-1? Every value maxR(Left) can\r\nonly be the same (if segment(Down, Down, Left, maxR(Left)) only added\r\nnew numbers), or it can decrease. When maxR(Left) is decreasing? Only\r\nwhen one of the numbers from added segment have already been in the\r\ncurrent submatrix. Shift Down to down let\u00e2\u0080\u0099s see all numbers in row Down.\r\nFor each number (let it be in column j) find indices i and k so i <= j,\r\nthere is number, equal to a[Down][j] between rows Up and Down-1, i\r\nmaximal; k >= j, there is number, equal to a[Down][j] between rows Up\r\nand Down-1, k minimal. When you find these indices (it is easy to find\r\nthem using set, when you store all columns where number x was between Up\r\nand Down for all numbers x), you can try to update maxR[i] with j 1,\r\nmaxR[j] with k 1. It will be enough, if you also update for all i = m..1\r\nmaxR[i] = min(maxR[i], maxR[i + 1]). Now maxR(Left) is correct, and you\r\ncan check answer for these Up and Down by . 4) Now, solution by . It\r\nrequires understanding previous solution. Previous solution, despite\r\ngood asymptotics, requires to store a lot (about 160 000) sets, where\r\nyou will store about 160 000 elements. Even at n = 200 it works very\r\nslow. Let\u00e2\u0080\u0099s get rid of log. Set is using only for finding nearest left\r\nand right elements, which are in rows from Up to Down, and equal to\r\ncurrent. Note that when you do Up = Up 1, nearest element comes near (by\r\ncolumn) to a[i][j], so we can find all numbers, for which the nearest\r\nelement will be in new row Up, and update them nearest number, and do\r\nthat in . This solution uses memory and time. BONUS: Can you solve this\r\ntask faster than ? I spend a lot of time and I didn\u00e2\u0080\u0099t come to any\r\nsolution, but I can\u00e2\u0080\u0099t show that there is not solution faster.\r\n"
}