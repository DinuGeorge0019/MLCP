{
    "link": "https://codeforces.com//contest/1254/problem/A",
    "problemId": "475569",
    "problem_idx": "A",
    "shortId": "1254A",
    "contest_number": "1254",
    "problem_submissions": {
        "E": [
            65385076,
            65389059,
            65387406,
            65386461,
            65391860,
            65388358,
            65363435,
            65898589,
            65898484,
            65394164,
            65399861,
            66201727,
            65511222,
            65387985,
            65459118,
            65393939,
            65393500,
            65393329
        ],
        "D": [
            65367776,
            65371157,
            65363228,
            65371547,
            65376523,
            65913436,
            65376504,
            65392793,
            65392745,
            65392458,
            65378396,
            65374788,
            65374479,
            65375973,
            72224123,
            72224118,
            72222073,
            66201641,
            66201609,
            65765881,
            65505837,
            65498656,
            65498523,
            65498350,
            65448275,
            65421529,
            65421428,
            65420506,
            65420496,
            65420340,
            65420220,
            65419939,
            65419809,
            65419466,
            65419306,
            65410495,
            65410139,
            65394253,
            65394071,
            65393989,
            65393862,
            65393694,
            65393607,
            65393012,
            65391960,
            65391551,
            65372156,
            65379236,
            65379295,
            65458244,
            65380498,
            65379619,
            65398630,
            65392892,
            65392821,
            65392515,
            65379510,
            65376362,
            65378466,
            65385723
        ],
        "C": [
            65362906,
            65363606,
            65372750,
            65364742,
            65368283,
            65376926,
            65364286,
            65368353,
            65366513,
            65367352,
            65362577,
            65365184,
            65369353,
            65366181,
            65364840,
            65369974,
            65366318,
            65369506
        ],
        "B1": [
            65358065,
            65358880,
            65365540,
            65357743,
            65359033,
            65368715,
            65359200,
            65362593,
            65360678,
            65362903,
            65376471,
            65360693,
            65359085,
            65359111,
            65357280,
            65361721,
            65360645,
            65360620,
            65355048
        ],
        "B2": [
            65357919,
            65358760,
            65365394,
            65357802,
            65363382,
            65368676,
            65359261,
            65362680,
            65360774,
            65362731,
            65376512,
            65360901,
            65359018,
            65358907,
            65360708,
            65398529,
            65398522,
            65398389,
            65398370,
            65398329,
            65398291,
            65398212,
            65361653,
            65360607,
            65360509,
            65354503
        ],
        "A": [
            65355800,
            65355044,
            65354936,
            65355999,
            65356253,
            65372457,
            65355826,
            65357065,
            65357334,
            65359043,
            65356279,
            65357553,
            65355832,
            65355374,
            65354099,
            65354766,
            65367155,
            65356549,
            65357393
        ]
    },
    "name": "A. Feeding Chicken",
    "statement": "Long is a huge fan of CFC (Codeforces Fried Chicken). But the price of\r\nCFC is increasing, so he decides to breed the chicken on his own\r\nfarm.His farm is presented by a rectangle grid with r rows and c\r\ncolumns. Some of these cells contain rice, others are empty. k chickens\r\nare living on his farm. Long wants to give his chicken playgrounds by\r\nassigning these farm cells to his chickens. He would like to satisfy the\r\nfollowing requirements: Each cell of the farm is assigned to chicken.\r\nEach chicken is assigned cell. The set of cells assigned to every\r\nchicken forms a connected area. More precisely, if two cells (x, y) and\r\n(u, v) are assigned to the same chicken, this chicken is able to walk\r\nfrom (x, y) to (u, v) by passing only its cells and moving from each\r\ncell to another cell sharing a side. Long also wants to prevent his\r\nchickens from fighting for food. Hence he wants the difference between\r\nthe maximum and the minimum number of cells with rice assigned to a\r\nchicken to be as small as possible. Please help him.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=107;\n\nint n, m, k;\n\nchar wcz[nax][nax];\nint tab[nax][nax];\n\nint faj;\n\nchar pyt(int v)\n{\n\tif (v<26)\n\t\treturn 'a'+v;\n\tif (v<52)\n\t\treturn 'A'+(v-26);\n\treturn '0'+(v-52);\n}\n\nvoid test()\n{\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfaj=0;\n\tvector <pii> pola;\n\tfor (int i=1; i<=n; i++)\n\t{\n\t\tscanf(\"%s\", wcz[i]+1);\n\t\tif (i&1)\n\t\t{\n\t\t\tfor (int j=1; j<=m; j++)\n\t\t\t{\n\t\t\t\ttab[i][j]=(wcz[i][j]=='R');\n\t\t\t\tfaj+=tab[i][j];\n\t\t\t\tpola.push_back({i, j});\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (int j=m; j; j--)\n\t\t\t{\n\t\t\t\ttab[i][j]=(wcz[i][j]=='R');\n\t\t\t\tfaj+=tab[i][j];\n\t\t\t\tpola.push_back({i, j});\n\t\t\t}\n\t\t}\n\t}\n\tint bylo=0;\n\tint kt=0;\n\tfor (pii i : pola)\n\t{\n\t\tbylo+=tab[i.first][i.second];\n\t\tif (bylo>faj*(kt+1)/k)\n\t\t\tkt++;\n\t\tkt=min(kt, k-1);\n\t\twcz[i.first][i.second]=pyt(kt);\n\t}\n\t\n\tfor (int i=1; i<=n; i++)\n\t{\n\t\tfor (int j=1; j<=m; j++)\n\t\t\tprintf(\"%c\", wcz[i][j]);\n\t\tprintf(\"\\n\");\n\t}\n}\n\nint main()\n{\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--)\n\t\ttest();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Feeding Chicken.json",
    "editorial_link": "https://codeforces.com//blog/entry/71594",
    "editorial": "First, we will try to solve the problem when our rectangle is an array\r\n(or an rectangle).Let be the number of rice cells. It\u00e2\u0080\u0099s not hard to see\r\nthat the difference between the maximum and the minimum number of cells\r\nwith rice assigned to a chicken is either , when , or otherwise. Turns\r\nout, there is an easy way to assign: for the first chicken, we will\r\nassign to the current chicken a prefix of the current array that\r\ncontains exactly rice cells, and delete that prefix. The same for the\r\nothers chicken, we will assign to the current chicken a prefix of the\r\ncurrent array that contains exactly rice cells.Notice that there exists\r\na path that goes through every cell exactly once and every two\r\nconsecutive cells on the path share a side. One such path is By thinking\r\nthe path as an array, we can assign regions on the path according to the\r\nabove paragraph. Such an assignment is also a valid assignment for the\r\noriginal rectangle.\r\n"
}