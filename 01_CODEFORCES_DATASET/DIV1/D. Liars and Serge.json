{
    "link": "https://codeforces.com//contest/256/problem/D",
    "problemId": "2403",
    "problem_idx": "D",
    "shortId": "256D",
    "contest_number": "256",
    "problem_submissions": {
        "B": [
            2781429,
            2776681,
            2779641,
            2777927,
            2779004,
            2777545,
            2777829,
            2778651,
            2777720,
            2778451,
            2776552,
            2782245,
            2781330,
            2777533
        ],
        "D": [
            2779473,
            2779904,
            2777535,
            2782686,
            2789193,
            2781305
        ],
        "E": [
            2777253,
            2781852,
            2779020,
            2775034,
            2779843,
            2779937,
            2778999,
            2781729,
            2780947,
            2779725,
            2804945,
            2804943,
            2781663,
            2781905,
            2777856,
            2780182,
            2777426,
            2780269
        ],
        "C": [
            2776456,
            2777569,
            2783097,
            2779210,
            2776586,
            2776922,
            2776660,
            2779042,
            2777560,
            2782221,
            2778280,
            2780113,
            2780104,
            2777296
        ],
        "A": [
            2774012,
            2782979,
            2775596,
            2779786,
            2774535,
            2774925,
            2776089,
            2773923,
            2775590,
            2774961,
            2782829,
            2781660,
            2781773,
            2774247
        ]
    },
    "name": "D. Liars and Serge",
    "statement": "There are people, sitting in a line at the table. For each person we\r\nknow that he always tells either the truth or lies.Little Serge asked\r\nthem: how many of you always tell the truth? Each of the people at the\r\ntable knows everything (who is an honest person and who is a liar) about\r\nall the people at the table. The honest people are going to say the\r\ncorrect answer, the liars are going to say any integer from 1 to , which\r\nis not the correct answer. Every liar chooses his answer, regardless of\r\nthe other liars, so two distinct liars may give distinct answer.Serge\r\ndoes not know any information about the people besides their answers to\r\nhis question. He took a piece of paper and wrote integers , where is the\r\nanswer of the -th person in the row. Given this sequence, Serge\r\ndetermined that exactly people sitting at the table .Serge wonders, how\r\nmany variants of people\u2019s answers (sequences of answers of length )\r\nthere are where one can say that exactly people sitting at the table\r\napparently lie. As there can be rather many described variants of\r\nanswers, count the remainder of dividing the number of the variants by .\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n#include <climits>\n#include <numeric>\n#include <vector>\nusing namespace std;\nconst int MOD = 777777777;\n\ntypedef long long int64;\n\nstruct Int {\n\tint x;\n\tInt() :\n\t\t\tx(0) {\n\t}\n\tInt(int _x) :\n\t\t\tx(_x) {\n\t\tx %= MOD;\n\t\tif (x < 0)\n\t\t\tx += MOD;\n\t}\n\tInt(int64 _x) {\n\t\tx = _x % MOD;\n\t\tif (x < 0)\n\t\t\tx += MOD;\n\t}\n\tstatic Int get(int x) {\n\t\tInt a;\n\t\ta.x = x;\n\t\treturn a;\n\t}\n\n\tInt operator+(const Int&o) const {\n\t\tint t = x + o.x;\n\t\tif (t >= MOD)\n\t\t\tt -= MOD;\n\t\treturn get(t);\n\t}\n\tInt operator*(const Int&o) const {\n\t\treturn get(1LL * x * o.x % MOD);\n\t}\n\tInt operator-(const Int&o) const {\n\t\tint t = x - o.x;\n\t\tif (t < 0)\n\t\t\tt += MOD;\n\t\treturn get(t);\n\t}\n\tInt operator/(const Int&o) const {\n\t\treturn (*this) * o.inv();\n\t}\n\tInt&operator+=(const Int&o) {\n\t\treturn (*this) = *this + o;\n\t}\n\tInt&operator-=(const Int&o) {\n\t\treturn (*this) = *this - o;\n\t}\n\tInt&operator*=(const Int&o) {\n\t\treturn (*this) = *this * o;\n\t}\n\tInt&operator/=(const Int&o) {\n\t\treturn (*this) = *this / o;\n\t}\n\n\tInt power(int64 n) const {\n\t\tif (!n)\n\t\t\treturn get(1);\n\t\tconst Int&a = *this;\n\t\tif (n & 1)\n\t\t\treturn power(n - 1) * a;\n\t\telse\n\t\t\treturn (a * a).power(n >> 1);\n\t}\n\n\tInt inv() const {\n\t\treturn power(MOD - 2);\n\t}\n};\nconst int MAX_N = 300;\nInt comb[MAX_N][MAX_N];\nint n, k;\nInt dp[MAX_N][MAX_N][MAX_N];\nint a[10][300] = { { 0 }, { 2, 1 }, { 32, 30, 80, 109 }, { 6824, 59808, 147224, 415870, 1757896, 1897056, 4898872, 7593125 }, { 776830421, 290516100, 746623577, 293783147, 33900006, 735127505,\n\t\t565460332, 428982705, 472062098, 161873957, 117354594, 515619293, 578944191, 312106242, 569389279, 391464593 }, { 261086313, 584837659, 683961846, 468868529, 211593382, 736955478, 229471758,\n\t\t157617135, 398169441, 360252438, 629394768, 264125799, 647490480, 342079395, 391579767, 225200475, 486011304, 513156108, 628771752, 132906648, 142138221, 20119449, 444199674, 195188679,\n\t\t387329805, 44684703, 651912135, 737154512, 612549793, 519860281, 186175544, 212568440 }, { 240805271, 239509872, 581127897, 6511239, 156126222, 509425833, 672407328, 366667722, 459185405,\n\t\t509737025, 554790222, 165216555, 703150560, 74806569, 398730015, 383350905, 506108358, 51326142, 298053147, 104256117, 391428765, 374020479, 206607807, 87664059, 275899176, 56407680,\n\t\t551553401, 448939463, 582889860, 129676638, 226078251, 135769095, 61292868, 578972226, 190181628, 390739055, 184587732, 446575689, 732674124, 232198470, 676760679, 352474101, 611444862,\n\t\t575661807, 628905585, 320813094, 522840969, 469781928, 156006018, 554473341, 239654268, 643714911, 433540170, 199307003, 496385218, 291740751, 67309914, 370826673, 202356819, 279421821,\n\t\t421203111, 63744786, 520987612, 550671827 }, { 482164403, 768209115, 462063756, 154906374, 36099042, 341766705, 678182556, 621882744, 478771358, 231881111, 175889805, 243630450, 168908523,\n\t\t671961765, 55761813, 652682670, 773939082, 517628076, 756201264, 124604900, 750976272, 498253248, 676047609, 137170026, 705610017, 495032139, 561797418, 703097347, 500815609, 95984586,\n\t\t739707108, 265613565, 387099846, 777331779, 594676173, 591219559, 407997044, 208947235, 93337440, 478908360, 685013007, 487033953, 671903001, 39521181, 738490312, 33785059, 465470131,\n\t\t310453920, 54648783, 346831137, 427694175, 474743430, 705296781, 435828036, 429824745, 663532359, 261388683, 244690731, 533997135, 596108961, 506813013, 371892402, 590145264, 104733162,\n\t\t143420103, 654339672, 700348950, 685038942, 578826927, 286484229, 501639192, 434962491, 299270097, 27702486, 335375775, 111746817, 565603164, 294926121, 676063665, 735862995, 710035809,\n\t\t437011960, 668528077, 138765186, 508213986, 615036450, 353784942, 624827616, 343900011, 241289776, 52410890, 72018835, 352406796, 415705878, 4802637, 376367145, 65589678, 333633477, 341834527,\n\t\t303717460, 282387700, 42951006, 254706039, 423048528, 526429710, 68131467, 669954708, 12787348, 500636381, 317959019, 479433192, 657133515, 416259390, 610216692, 340129188, 44594256,\n\t\t257373347, 138718678, 530767740, 292922628, 37220268, 605295159, 480722613, 458170419, 30540300, 487159055, 232966794, 149150650 }, { 412133651, 386543325, 139952108, 289303402, 102404925,\n\t\t317067177, 396414708, 80515854, 663739304, 317300809, 228877044, 493725043, 715317967, 490300965, 315527373, 743539734, 488329191, 553627998, 533025234, 242583957, 706116537, 614109258,\n\t\t645447222, 523195911, 492109128, 722623041, 111085128, 766395126, 654378921, 691964847, 496688157, 399056049, 654363234, 102052314, 191720088, 473910948, 259736526, 332840025, 388047555,\n\t\t665791056, 627111387, 139696515, 441456687, 443032569, 283264821, 771641703, 452641455, 511306362, 117572859, 127701891, 721298331, 176520078, 357242229, 611296308, 696994956, 405628839,\n\t\t429224274, 465336054, 695091546, 689828796, 574648641, 351220905, 507964023, 675326610, 517248963, 453528621, 220301928, 494463186, 681789969, 339589656, 44524053, 417125457, 339589404,\n\t\t747135963, 341780733, 734158215, 396817281, 21997836, 5728464, 147611205, 456248898, 714128667, 377654949, 3862068, 128418948, 589390074, 304947090, 11703825, 228266073, 127304142, 429215724,\n\t\t361541124, 521572968, 468358191, 341231688, 65323503, 613778508, 15985323, 291661029, 410970006, 591638112, 349541550, 89967528, 224922159, 361094166, 584206074, 640051812, 324264456,\n\t\t652625388, 693768537, 11740617, 309238398, 211085469, 194905872, 639416484, 110110707, 296645895, 748118511, 131177718, 511142751, 775975599, 421403409, 475528473, 434685258, 1768977,\n\t\t80301375, 708023862, 569195676, 56238084, 632887668, 88089750, 631539342, 396695565, 38780154, 695798271, 469819224, 439587099, 69045921, 682966116, 112310856, 64943298, 534475872, 40215357,\n\t\t389728458, 286368453, 736006257, 501181650, 54829908, 603489402, 338032656, 512182818, 627500097, 462674016, 3103092, 157324491, 43978329, 596818971, 259025598, 9088632, 91991781, 577291428,\n\t\t211245489, 429471231, 142626330, 172560633, 510907446, 444609585, 758102058, 375112647, 744786693, 276174402, 19259856, 233672418, 745389414, 225772848, 23385663, 324290610, 519804558,\n\t\t120337812, 402578568, 360676008, 450089262, 551043738, 337388940, 512108856, 28879011, 690040638, 106017282, 558262341, 99972432, 608226003, 612152037, 42414435, 776201013, 39580443,\n\t\t518796945, 494437752, 583194366, 723936555, 415359657, 309569589, 751104774, 166684527, 249229170, 353120823, 130668327, 753823584, 580966092, 561963717, 543672234, 393846327, 586278000,\n\t\t327398400, 278403867, 156455586, 363920382, 190245195, 290039148, 547014447, 466218648, 146037150, 585462906, 666008595, 691786683, 374707494, 622498779, 231158277, 685740951, 115612245,\n\t\t681825249, 545555745, 551718468, 277206615, 640171035, 757727334, 195193908, 658656684, 457760646, 225925875, 505761984, 18685233, 506832921, 112511021, 396846646, 290147622, 113924623,\n\t\t669986155, 336008070, 63611061, 238586775, 119956662, 616557739, 772784623, 334527774, 410403148, 51933421 } };\nvoid makeTable() {\n\tcout << \"int a[10][300]={\";\n\tfor (n = 1; n <= 256; n <<= 1) {\n\t\tcout << \"{\";\n\t\tmemset(comb, 0, sizeof comb);\n\t\tfor (int i = 0; i <= n; ++i) {\n\t\t\tfor (int j = 0; j <= i; ++j) {\n\t\t\t\tcomb[i][j] = (!i || !j) ? 1 : comb[i - 1][j] + comb[i - 1][j - 1];\n\t\t\t}\n\t\t}\n\t\tmemset(dp, 0, sizeof dp);\n\n\t\tdp[1][0][0] = 1;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tfor (int j = 0; j <= n; ++j) {\n\t\t\t\tfor (int k = 0; k <= n; ++k) {\n\t\t\t\t\tInt c = dp[i][j][k];\n\t\t\t\t\tif (c.x == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int l = 0; j + l <= n; ++l) {\n\t\t\t\t\t\tint nk = k + ((l != i) ? l : 0);\n\t\t\t\t\t\tdp[i + 1][j + l][nk] += c * comb[n - j][l];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tcout << dp[n + 1][n][i].x;\n\t\t\tif (i + 1 <= n)\n\t\t\t\tcout << \",\";\n\t\t}\n\t\tcout << \"},\";\n\t}\n}\n\nint main() {\n\tint n, k;\n\tcin >> n >> k;\n\tint pw = 0;\n\twhile ((1 << pw) < n)\n\t\t++pw;\n\tcout << a[pw][k - 1] << endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Liars and Serge.json",
    "editorial_link": "https://codeforces.com//blog/entry/6161",
    "editorial": "If person say number x, and at all x was said by x persons, then we\r\ncannot tell anything about fixed person. Now we understand which\r\nsequence are good for us. We will calculate their count wuth dynamic\r\nprogramming dp[n][m][k], n which persons answers we set to the sequence\r\nright now, m how mant persons gived theis answers, k how many persons\r\nfrom them are liers.Transfer:dp[n][m][k]*cnk[N-m][n] ->\r\ndp[n+1][m+n][k]dp[n][m][k]*cnk[N-m][p] -> dp[n+1][m+p][k+p] p = 1 .. N,\r\np != n.We assume, that N total number of the persons. This solution get\r\nTLE, becouse complexity if O(N^4). We need to use precalc. It will not\r\nbe so big, as N is power of 2.\r\n"
}