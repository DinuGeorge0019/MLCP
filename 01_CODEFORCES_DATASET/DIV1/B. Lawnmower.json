{
    "link": "https://codeforces.com//contest/115/problem/B",
    "problemId": "603",
    "problem_idx": "B",
    "shortId": "115B",
    "contest_number": "115",
    "problem_submissions": {
        "D": [
            700677,
            709440,
            703439,
            700783
        ],
        "E": [
            699985,
            700148,
            699895,
            700886,
            700709,
            699935,
            700481,
            704109,
            702223,
            702118,
            701045,
            699830,
            700560
        ],
        "C": [
            698491,
            698807,
            698911,
            698386,
            699374,
            701004,
            698059,
            699204,
            699619,
            699661,
            702059
        ],
        "B": [
            697429,
            697289,
            697881,
            697365,
            697647,
            697668,
            699366,
            697349,
            697691,
            697537,
            697907,
            698287,
            699705
        ],
        "A": [
            696588,
            696258,
            695843,
            695844,
            696704,
            696136,
            696907,
            695911,
            696007,
            696195,
            695937,
            696483,
            695990
        ]
    },
    "name": "B. Lawnmower",
    "statement": "You have a garden consisting entirely of grass and weeds. Your garden is\r\ndescribed by an grid, with rows numbered to from top to bottom, and\r\ncolumns to from left to right. Each cell is identified by a pair which\r\nmeans that the cell is located at row and column . Each cell may contain\r\neither grass or weeds. For example, a garden may look as follows (empty\r\ncells denote grass): You have a land-mower with you to mow all the\r\nweeds. Initially, you are standing with your lawnmower at the top-left\r\ncorner of the garden. That is, at cell . At any moment of time you are\r\nfacing a certain direction either left or right. And initially, you face\r\nright.In one move you can do either one of these:1) Move one cell in the\r\ndirection that you are facing. if you are facing right: move from cell\r\nto cell if you are facing left: move from cell to cell 2) Move one cell\r\ndown (that is, from cell to cell ), and change your direction to the\r\nopposite one. if you were facing right previously, you will face left if\r\nyou were facing left previously, you will face right You are not allowed\r\nto leave the garden. Weeds will be mowed if you and your lawnmower are\r\nstanding at the cell containing the weeds (your direction doesn\u2019t\r\nmatter). This action isn\u2019t counted as a move.What is the minimum number\r\nof moves required to mow all the weeds?\r\n",
    "solutions": [
        "#include <vector>\n#include <cstring>\n#include <list>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <queue>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <stdlib.h>\n#include <ctime>\n#include <string>\n#include <complex>\n#ifdef __ASD__\n#include <windows.h>\n#endif\nusing namespace std;\n#define all(a) a.begin(),a.end()\n#define forn(i,n) for(int i=0;i<(n);++i)\n#define fornn(i,n) for(i=0;i<(n);++i)\n#define lng long long\n#define SQ(a) ((a)*(a))\n#define forv(i,v) for(int i=0;i<(int)v.size();++i)\n#define mp make_pair\n#define pb push_back\n#define ABS(a) ((a)<0?-(a):(a))\n#define iinf 1000000000\n#define linf 1000000000000000000LL\n#define dinf 1e200\n#define left asdleft\n#define prev asdprev\n#define eps 1e-12\n#define y1 asdy1\n#define y2 asdy2\n#define EQ(a,b) abs((a)-(b))<eps\n#define PI 3.1415926535897932384626433832795\n#define DEG2RAD PI/180\n#define ulng unsigned lng\n#define next asdnext\n#define prev asdprev\nvoid mytimer(string task){\n#ifdef __ASD__\n        static LARGE_INTEGER prev;      LARGE_INTEGER cur,freq; QueryPerformanceCounter(&cur);  QueryPerformanceFrequency(&freq);       if(task!=\"\")            cout<<task<<\" took \"<<(cur.QuadPart-prev.QuadPart)*1.0/freq.QuadPart<<endl;     prev=cur;\n#endif\n}\nvoid ext(int c){\n#ifdef __ASD__\n        exit(c);\n#endif\n}\n\nchar src[200][200];\nint n,m;\n \nvoid flip(){\n    forn(i,n)\n        reverse(src[i],src[i]+m);\n}\n\nbool empty(int a){\n    forn(i,m)\n        if(src[a][i]=='W')\n            return false;\n    return true;\n}\n\n#define taska \"burai\"\nint main(){\n#ifdef __ASD__\n    freopen(\"input.txt\",\"r\",stdin);freopen(\"output.txt\",\"w\",stdout);\n#else\n    //freopen(taska\".in\",\"r\",stdin);freopen(taska\".out\",\"w\",stdout);\n#endif\n\n    cin>>n>>m;\n    gets(src[0]);\n    forn(i,n)\n        gets(src[i]);\n    while(n>1&&empty(n-1))\n        --n;\n    \n    int p=0;\n    int res=n-1;\n    forn(i,n){\n        int q=m-1;\n        while(q>p&&src[i][q]!='W'&&src[i+1][q]!='W')\n            --q;\n        res+=q-p;\n        p=m-q-1;\n        flip();\n    }\n\n    cout<<res;\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Lawnmower.json",
    "editorial_link": "https://codeforces.com/blog/entry/2584",
    "editorial": "First, let\u00e2\u0080\u0099s observe a particular strategy that turns out to be optimal\r\nat the end of our discussion. Suppose we\u00e2\u0080\u0099re on a row, facing right. This\r\nstrategy say that we need to move to the right as long as there is a\r\nweed to the right of us either on this row or on the row directly below\r\nus. The idea is that we need to mow that weed, hence, we need to move\r\nthere. If it\u00e2\u0080\u0099s in the same row as us, it\u00e2\u0080\u0099s fairly obvious we have to mow\r\nthat before going down. If it\u00e2\u0080\u0099s at the row directly below us, since we\r\ncan\u00e2\u0080\u0099t move to the right in the row below us (since we\u00e2\u0080\u0099ll be facing left\r\nthere) we need to move there before going down. The strategy then says\r\nthat if we no longer need to move right, we go down, and face left.\r\nRepeat this until all weeds are mowed (replacing left and right in the\r\ndiscussion above) - and we have our strategy. This strategy is optimal.\r\nProof is using induction - but it\u00e2\u0080\u0099s not particularly interesting, so the\r\nidea is given instead. Suppose we\u00e2\u0080\u0099re on a row, facing right, again. If\r\nthere exist a weed to the right in this row or below us, then any\r\nsolution will necessarily move right as far as our strategy goes (for\r\nthe reason we discussed above). Some solution however choose to go\r\nfurther right despite having no weed in this row or the row directly\r\nbelow us. This solution is not optimal if we need to go left directly\r\nafter going down, for we can just simply go down instead of going\r\nright-down-left. On the other case, if we don\u00e2\u0080\u0099t need to go left directly\r\nafter going down, then it means that we go down twice-in-a-row! Hence,\r\ninstead of moving right in this row, we go down twice, then move right\r\nthere. And then the induction can continue and the proof can follow.\r\nRemarks I guess the actor should be Toastman instead :). Anyway, so\r\nsorry to disappoint you, but we decided to add some pretty strong\r\npretest to this problem, despite the fact that many solutions will\r\nprobably forget to take care of two consecutive empty rows. But still,\r\nthe pretest we gave only consist of one column, so feel free to hack the\r\nstragglers :) (not that this suggestion matters after the contest but\r\nstill...)\r\n"
}