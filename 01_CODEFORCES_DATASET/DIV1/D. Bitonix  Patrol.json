{
    "link": "https://codeforces.com//contest/217/problem/D",
    "problemId": "1610",
    "problem_idx": "D",
    "shortId": "217D",
    "contest_number": "217",
    "problem_submissions": {
        "C": [
            2030323,
            2028224,
            2030324,
            2028180,
            2030572,
            2027991,
            2028080,
            2028735,
            2028870,
            2028963,
            6055918,
            2033098,
            2028984,
            2030292,
            2029555,
            2029656,
            2045302
        ],
        "D": [
            2027935,
            2028420,
            2028882
        ],
        "B": [
            2025442,
            2028904,
            2025653,
            2028314,
            2029281,
            2032858,
            2030094,
            2032869,
            2032838,
            2027553,
            2026258
        ],
        "A": [
            2023511,
            2023579,
            2023545,
            2023525,
            2023509,
            2024047,
            2023513,
            2023838,
            2024026,
            2023574,
            2023601,
            2023618,
            2024082,
            2023647,
            2023532,
            2023666,
            2023680
        ],
        "E": [
            2028007,
            2029369,
            2033123,
            2070623,
            2070617
        ]
    },
    "name": "D. Bitonix  Patrol",
    "statement": "Byteland is trying to send a space mission onto the Bit-X planet. Their\r\ntask is complicated by the fact that the orbit of the planet is\r\nregularly patrolled by Captain Bitonix, the leader of the space forces\r\nof Bit-X.There are stations around Bit-X numbered clockwise from 1 to .\r\nThe stations are evenly placed on a circular orbit, so the stations\r\nnumber and , and the stations number 1 and , are neighboring. The\r\ndistance between every pair of adjacent stations is equal to space\r\nmiles. To go on a patrol, Captain Bitonix jumps in his rocket at one of\r\nthe stations and flies in a circle, covering a distance of at least one\r\nspace mile, before finishing in some (perhaps the starting)\r\nstation.Bitonix\u2019 rocket moves by burning fuel tanks. After Bitonix\r\nattaches an -liter fuel tank and chooses the direction (clockwise or\r\ncounter-clockwise), the rocket flies exactly space miles along a\r\ncircular orbit in the chosen direction. Note that the rocket has no\r\nbrakes; it is not possible for the rocket to stop before depleting a\r\nfuel tank.For example, assume that and and Bitonix has fuel tanks with\r\nvolumes of 10, 60, 90 and 100 liters. If Bitonix starts from station 1,\r\nuses the 100-liter fuel tank to go clockwise, then uses the 90-liter\r\nfuel tank to go clockwise, and then uses the 10-liter fuel tank to go\r\ncounterclockwise, he will finish back at station 1. This constitutes a\r\nvalid patrol. Note that Bitonix does not have to use all available fuel\r\ntanks. Another valid option for Bitonix in this example would be to\r\nsimply use the 60-liter fuel tank to fly to either station 2 or\r\n3.However, if was equal to 3, was equal to 60 and the only fuel tanks\r\navailable to Bitonix were one 10-liter tank and one 100-liter tank, he\r\nwould have no way of completing a valid patrol (he wouldn\u2019t be able to\r\nfinish any patrol exactly at the station).The Byteland space agency\r\nwants to destroy some of Captain Bitonix\u2019 fuel tanks so that he cannot\r\nto complete any valid patrol. Find how many different subsets of the\r\ntanks the agency can destroy to prevent Captain Bitonix from completing\r\na patrol and output the answer modulo .\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\ntypedef long long ll;\n#define MOD 1000000007\n\nint M;\nint cnt[130];\n// int CNT;\n\nint x[10];\nbool can[10][130];\nint mod[10000];\n\nint prod(int pos){ // cout << pos << endl;\n    ll ans = 1;\n    int i;\n    REP(i,pos) ans = ans * cnt[x[i]] % MOD;\n    return (int)ans;\n}\n\nint dfs(int pos, int last){ // cout << pos << endl;\n    int i,j;\n    \n//  CNT++;\n//  REP(i,pos) cout << x[i] << ' ';\n//  cout << endl;\n\n    int ans = prod(pos);\n    \n    if(pos < 6) for(i=last+1;i<=M/2;i++) if(!can[pos][i]){\n        x[pos] = i;\n        if(pos < 5){\n            REP(j,M) can[pos+1][j] = false;\n            REP(j,M) if(can[pos][j]) can[pos+1][j] = can[pos+1][mod[j+i]] = can[pos+1][mod[j-i+M]] = true;\n        }\n        int tmp = dfs(pos+1, i);\n        ans += tmp;\n        if(ans >= MOD) ans -= MOD;\n    }\n    \n    return ans;\n}\n\nint main(void){\n    int N,T,x,i;\n    \n    scanf(\"%d%d%d\",&N,&M,&T);\n    REP(i,T){\n        scanf(\"%d\",&x);\n        x %= M;\n        if(x != 0) cnt[min(x,M-x)]++;\n    }\n    \n    REP(i,10000) mod[i] = i % M;\n    can[0][0] = true;\n    int ans = dfs(0, 0);\n    printf(\"%d\\n\", ans);\n//  cout << CNT << endl;\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "combinatorics",
        "dfs and similar",
        "math"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Bitonix  Patrol.json",
    "editorial_link": "https://codeforces.com//blog/entry/5285",
    "editorial": "Observation 1.\n\nFuel tanks for which capacity gives the same remainder  are equivalent for Bitonix's purposes. Moreover, fuel tanks for which the capacities' remainders  sum to D are also equivalent. Out of every group of equivalent tanks, the agency can only leave at most one.\n\nObservation 2.\n\nIf more than six tanks remain, Bitonix can certainly complete his patrol. Indeed, let us assume that 7 tanks were left undestroyed by the agency. Out of the 128 possible subsets of those tanks, at least two distinct ones, say A and B, sum up to the same remainders modulo D. Thus, if Bitonix moves forward with tanks from A?-?B and backwards with tanks from B?-?A, he will finish at some station after an actual journey.\n\nBecause of observations 1 and 2, it turns out that a simple recursive search suffices to solve the problem. However, because of the large constraints, it may prove necessary to use some optimizations, such as using bitmasks for keeping track of what distances Bitonix can cover."
}