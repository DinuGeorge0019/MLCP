{"link": "https://codeforces.com//contest/444/problem/B", "problemId": "11251", "problem_idx": "B", "shortId": "444B", "contest_number": "444", "problem_submissions": {"B": [7031130, 7030965, 7024958, 7024676, 7030446, 7027559, 7026989, 7029436, 7032613, 7026604, 7041433, 7024980], "C": [7029407, 7026783, 7028625, 7029070, 7027854, 7035787, 7035783, 7031351, 7029689, 7028909, 7032738, 7033609, 7027863, 7030366, 7026206, 7047158, 7029026, 7027864], "A": [7026572, 7023113, 7022682, 7021917, 7022193, 7021891, 7023277, 7021994, 7023490, 7022290, 7021818, 7029841, 7024232, 7028150, 7022608, 7022804], "E": [7025382, 7029973, 7031979, 7031957, 7039984, 7039647, 7030433, 7029905, 7030939, 7032469, 7032562, 7035736, 7041366, 7041365, 7041358, 7041326, 7036608], "D": [7030340, 7032449, 7029379, 7031920, 7032235, 7032726, 7027353, 7024739, 7032806, 7032764, 7032749, 7032739, 7032700, 7031354, 7029340, 7031710, 7032104]}, "name": "B. DZY Loves FFT", "statement": "Fast Fourier Transformation is an algorithm used to calculate\r\nconvolution. Specifically, if , and are sequences with length , which\r\nare indexed from to , andWe can calculate fast using Fast Fourier\r\nTransformation.DZY made a little change on this formula. NowTo make\r\nthings easier, is a permutation of integers from to , and is a sequence\r\nonly containing and . Given and , DZY needs your help to calculate\r\n.Because he is naughty, DZY provides a special way to get and . What you\r\nneed is only three integers , , . After getting them, use the code below\r\nto generate and .//x is 64-bit variable;function getNextX() { x = (x *\r\n37 + 10007)\r\n", "solutions": ["#include<stdio.h>\n#include<iostream>\n#include<vector>\n#include<cmath>\n#include<algorithm>\n#include<memory.h>\n#include<map>\n#include<set>\n#include<queue>\n#include<list>\n#include<sstream>\n#include<cstring>\n#define mp make_pair\n#define pb push_back      \n#define F first\n#define S second\n#define SS stringstream\n#define sqr(x) ((x)*(x))\n#define m0(x) memset(x,0,sizeof(x))\n#define m1(x) memset(x,63,sizeof(x))\n#define CC(x) cout << (x) << endl\n#define pw(x) (1ll<<(x))\n#define M 1000000007\n#define N 211111\nusing namespace std;\ntypedef pair<int,int> pt;\n\nlong long x;\n\nint n, d;\n\nint a[N], b[N], u[N];\nset<int> W;\nset<int>::iterator it;\nint e[N], k;\n\nint magic = 400;\n\nlong long get() {\n\t x = (x * 37 + 10007) % 1000000007;\n\t return x;\t\n}\n\nint main(){\n//\tfreopen(\"1.in\",\"r\",stdin);\t\n//\tfreopen(\"1.out\",\"w\",stdout);\n\tcin >> n >> d >> x;\n\tfor (int i = 0; i < n; i++) a[i] = i;\n\tfor (int i = 0; i < n; i++) swap(a[i], a[get() % (i + 1)]);\n\tfor (int i = 0; i < n; i++) b[i] = (i < d);\n\tfor (int i = 0; i < n; i++) swap(b[i], b[get() % (i + 1)]);\n\n\tfor (int i = 0; i < n; i++) u[a[i]] = i;\n\n\n\tfor (int i = 0; i < n; i++) {\n\t\tif (b[i]) e[k++] = i;\n\t\tint ans = -1;\n\t\tW.insert(-a[i]);\n\t\tif (k < magic) {\n\t\t\tfor (int j = 0; j < k; j++) if (a[i - e[j]] > ans) ans = a[i - e[j]];\n\t\t} else {\n\t\t\tfor (it = W.begin(); it != W.end(); it++) if (b[i - u[-(*it)]]) {\n\t\t\t\tans = -(*it);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tans++;\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["probabilities"], "dificulty": "2300", "interactive": false}