{
    "link": "https://codeforces.com//contest/555/problem/D",
    "problemId": "30422",
    "problem_idx": "D",
    "shortId": "555D",
    "contest_number": "555",
    "problem_submissions": {
        "E": [
            11801002,
            11802846,
            11800102,
            11803583,
            11800123,
            11802210,
            11798298,
            11804601,
            11804794,
            11814374,
            11814369,
            11812993,
            11798643,
            11801381,
            11801970,
            11807078,
            11805652,
            11807059,
            11806770
        ],
        "D": [
            11798292,
            11797684,
            11802341,
            11798935,
            11804707,
            11798722,
            11803791,
            11799483,
            11805705,
            11790452,
            11894849,
            11797513,
            11795485,
            11794677,
            11798421
        ],
        "B": [
            11793605,
            11787993,
            11791939,
            11792335,
            11794935,
            17186416,
            11790076,
            11792803,
            11790163,
            11791786,
            11798665,
            11793439,
            11790680,
            11788414,
            11791421,
            11789757
        ],
        "A": [
            11791498,
            11789364,
            11789864,
            11794544,
            11805322,
            17186185,
            11803610,
            11791903,
            11786622,
            11787094,
            11786902,
            11800059,
            11789582,
            11786965,
            11790812,
            11786427,
            11786182
        ],
        "C": [
            11790530,
            11794079,
            11795417,
            11789940,
            11791044,
            11793448,
            11793773,
            11801897,
            11796749,
            11801939,
            11797130,
            11796059,
            11798373,
            11795041,
            11798751,
            11798577,
            11794820
        ]
    },
    "name": "D. Case of a Top Secret",
    "statement": "Andrewid the Android is a galaxy-famous detective. Now he is busy with a\r\ntop secret case, the details of which are not subject to\r\ndisclosure.However, he needs help conducting one of the investigative\r\nexperiment. There are pegs put on a plane, they are numbered from to ,\r\nthe coordinates of the -th of them are . Then, we tie to the bottom of\r\none of the pegs a weight on a tight rope of length (thus, its\r\ncoordinates will be equal to , where is the number of the used peg).\r\nThen the weight is pushed to the right, so that it starts to rotate\r\ncounterclockwise. At the same time, if the weight during rotation\r\ntouches some of the other pegs, it then begins to rotate around that\r\npeg. Suppose that each peg itself is very thin and does not affect the\r\nrope length while weight is rotating around it. More formally, if at\r\nsome moment the segment of the rope contains one or more pegs in\r\naddition to the peg around which the weight is rotating, the weight will\r\nthen rotate around the farthermost one of them on a shorter segment of a\r\nrope. In particular, if the segment of the rope touches some peg by its\r\nendpoint, it is considered that the weight starts to rotate around that\r\npeg on a segment of the rope of length .At some moment the weight will\r\nbegin to rotate around some peg, without affecting the rest of the pegs.\r\nAndrewid interested in determining the number of this peg.Andrewid\r\nprepared queries containing initial conditions for pushing the weight,\r\nhelp him to determine for each of them, around what peg the weight will\r\neventually rotate.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <iostream>\nusing namespace std;\nconst int MAX = 200005;\npair<int, int> p[MAX];\nint tmp[MAX], a[MAX];\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint n, q;\n\tcin >> n >> q;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tcin >> p[i].first;\n\t\tp[i].second = i + 1;\n\t\ttmp[i] = p[i].first;\n\t}\n\tsort(p, p + n);\n\tfor (int i = 0; i < n; i++)\n\t\ta[i] = p[i].first;\n\twhile (q--)\n\t{\n\t\tlong long l;\n\t\tint pos;\n\t\tcin >> pos >> l;\n\t\tpos = lower_bound(a, a + n, tmp[pos - 1]) - a;\n\t\tint dir = 1;\n\t\tint prv = -1;\n\t\twhile (true)\n\t\t{\n\t\t\tint nxt;\n\t\t\tif (dir == 1)\n\t\t\t\tnxt = upper_bound(a + pos, a + n, a[pos] + l) - 1 - a;\n\t\t\telse\n\t\t\t\tnxt = lower_bound(a, a + pos, a[pos] - l) - a;\n\t\t\tif (nxt == pos && pos == prv)\n\t\t\t\tbreak;\n\t\t\tlong long d = a[nxt] - a[pos];\n\t\t\tif (d < 0)\n\t\t\t\td *= -1;\n\t\t\tl -= d;\n\t\t\tif (nxt == prv)\n\t\t\t\tl %= 2 * d;\n\t\t\tprv = pos;\n\t\t\tpos = nxt;\n\t\t\tdir ^= 1;\n\t\t}\n\t\tcout << p[pos].second << \"\\n\";\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation",
        "math"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Case of a Top Secret.json",
    "editorial_link": "https://codeforces.com//blog/entry/18919",
    "editorial": "I call the length of the part of the rope from the weight to the last\r\nmet peg the active length (denoted as ). After each met peg active\r\nlength is reduced. Letâs process queries separately: at each step we can\r\nfind next peg with using binary search. If active length becomes at\r\nleast two times shorter or current step is the first one we proceed to\r\nthe next step. Otherwise say current peg is peg and the next one is peg\r\n(without loss of generality ). Then after peg the rope will again touch\r\npeg and the weight will again rotate around peg . Indeed, so the weight\r\nwill rotate around a peg not to the right to peg . And either or so it\r\nwonât also rotate around a peg to the left to peg . As long as the\r\nweight will rotate around these two pegs so we can skip through several\r\nsteps momentarily. This way active length is shortened at least twice so\r\nthere will be no more than steps. Time: ; solution.\r\n",
    "hint": []
}