{
    "link": "https://codeforces.com//contest/407/problem/C",
    "problemId": "7733",
    "problem_idx": "C",
    "shortId": "407C",
    "contest_number": "407",
    "problem_submissions": {
        "D": [
            6186438,
            6183272,
            6186415,
            6188995,
            6186843
        ],
        "C": [
            6183229,
            6184237,
            6184448,
            6181726,
            6183048,
            6186206,
            6183334,
            6183650,
            6187229,
            6183606,
            6183728,
            6181678,
            6184812,
            6186103,
            6186307,
            6184286,
            6185997
        ],
        "A": [
            6179819,
            6185054,
            6178519,
            6178154,
            6178508,
            6178273,
            6178388,
            6178848,
            6178615,
            6178776,
            6179374,
            6178369,
            6179907,
            6178927,
            6178200,
            6187273,
            6182603,
            6178438
        ],
        "B": [
            6178779,
            6180059,
            6180299,
            6179261,
            6180911,
            6179733,
            6180104,
            6180969,
            6180700,
            6180320,
            6180917,
            6186380,
            6181105,
            6180890,
            6180916,
            6181007,
            6182073,
            6187181
        ],
        "E": [
            6198010,
            6190656
        ]
    },
    "name": "C. Curious Array",
    "statement": "You’ve got an array consisting of integers: . Moreover, there are\r\nqueries, each query can be described by three integers . Query means\r\nthat we should add to each element , where .Record means the binomial\r\ncoefficient, or the number of combinations from elements into groups of\r\nelements.You need to fulfil consecutively all queries and then print the\r\nfinal array.\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <set>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <memory.h>\n#include <string>\n#include <cstring>\n#include <sstream>\n#include <cstdlib>\n#include <ctime>\n#include <cassert>\n\nusing namespace std;\n\nconst int md = 1000000007;\nconst int N = 100010;\nconst int K = 100;\nconst int K10 = K + 10;\n\nint inv[K10];\nint ans[K10][N];\n\nvoid init() {\n  for (int k = 0; k <= K; k++) {\n    inv[k] = 1;\n    int step = 1 << 30;\n    while (step > 0) {\n      inv[k] = (long long)inv[k] * inv[k] % md;\n      if (step & (md - 2)) inv[k] = (long long)inv[k] * k % md;\n      step >>= 1;\n    }\n  }\n}\n\ninline void add(int &x, int y) {\n  x += y;\n  if (x >= md) x -= md;\n}\n\nint nouse[N];\n\nint main() {\n  init();\n  int n, tt;\n  scanf(\"%d %d\", &n, &tt);\n  for (int i = 1; i <= n; i++) scanf(\"%d\", nouse + i);\n  for (int i = 0; i <= K; i++)\n    for (int j = 0; j <= n + 1; j++) ans[i][j] = 0;\n  while (tt--) {\n    int ll, rr, k;\n    scanf(\"%d %d %d\", &ll, &rr, &k);\n    add(ans[K - k][ll], 1);\n    add(ans[K - k][rr + 1], md - 1);\n    int u = 1;\n    for (int i = K - k + 1; i <= K; i++) {\n      int t = i - (K - k);\n      u = (long long)u * (t + rr - ll) % md;\n      u = (long long)u * inv[t] % md;\n      add(ans[i][rr + 1], md - u);\n    }\n  }\n  for (int j = 0; j <= K; j++)\n    for (int i = 1; i <= n; i++) {\n      add(ans[j][i], ans[j][i - 1]);\n      if (j > 0) {\n        add(ans[j][i], ans[j - 1][i]);\n      }\n    }\n  for (int i = 1; i <= n; i++) {\n    add(nouse[i], ans[K][i]);\n    printf(\"%d\", nouse[i] % md);\n    if (i < n) printf(\" \");\n  }\n  printf(\"\\n\");\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "implementation",
        "math"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Curious Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/11333",
    "editorial": "In this problem you had to find how to add binomial coefficients in\r\narray offline. Letâs see, how problem changes due to increasing k from\r\nsmall to big values. 1) All queries have K = 0 Every time you add 1 on\r\nsubsegment. For solve this task you can add 1 at some array b[] in b[L]\r\n1, then substract 1 from b[R+1], and after doing all queries make array\r\na[] as array of prefix sums of array b[]. 2) All queries have K = 1\r\nArithmetic progression 1 2 3 4 ... is added on subsegment For solve this\r\ntask you can add 1 at some array c[] in c[L] 1, then substract 1 from\r\nc[R+1], and after doing all queries make array b[] as array of prefix\r\nsums of array c[]. Actually you added 1 1 ... 1 on every subsegment at\r\neach query. If you will substract (R L + 1) from c[R+1], and make array\r\na[] as array of prefix sums of array b[], then it will be an answer: 1 1\r\n... 1 became 1 2 3 ... (R-L+1). 3) K is arbitrary Summaring previous\r\nresults one can see that if we will do and after that do a[i][j] =\r\na[i][j-1] + a[i+1][j] (making a[i] as array of prefix sums array\r\na[i+1]), a[0] will be the answer. What is C(k + 1 j + r l, k + 1 j)?\r\nThis number is need for each query affect only on segment L..R, and you\r\ncan see, why is it so, in Pascalâs Triangle. If this explanation is not\r\nclear for you, you can try to see other participants solutions (for\r\nexample, Xellosâs one).\r\n",
    "hint": []
}