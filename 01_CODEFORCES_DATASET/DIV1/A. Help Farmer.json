{
    "link": "https://codeforces.com//contest/142/problem/A",
    "problemId": "755",
    "problem_idx": "A",
    "shortId": "142A",
    "contest_number": "142",
    "problem_submissions": {
        "D": [
            1037429,
            1033957,
            1037084,
            1113531,
            1036315,
            1036207,
            1039046,
            1039771,
            1035511,
            1039807
        ],
        "C": [
            1036084,
            1037803,
            1040168,
            1038580,
            1038178,
            1041260,
            1038906,
            1038902,
            1038753,
            1034775,
            1040737,
            1039056,
            1038416,
            1037153,
            1034481
        ],
        "B": [
            1032453,
            1035023,
            1033212,
            1031763,
            1032487,
            1041275,
            1033427,
            1034500,
            1033279,
            1036000,
            1032039,
            1042729,
            1042583,
            1032611,
            1033180,
            1033834,
            1032713,
            1034068,
            1032534
        ],
        "A": [
            1031075,
            1031753,
            1031668,
            1031166,
            1031287,
            1041290,
            1031330,
            1031886,
            1032150,
            1031269,
            1033203,
            1031404,
            1031249,
            1031261,
            1031962,
            1031577,
            1031132
        ],
        "E": [
            1356376,
            1131959,
            1131952,
            1131947
        ]
    },
    "name": "A. Help Farmer",
    "statement": "Once upon a time in the Kingdom of Far Far Away lived Sam the Farmer.\r\nSam had a cow named Dawn and he was deeply attached to her. Sam would\r\nspend the whole summer stocking hay to feed Dawn in winter. Sam scythed\r\nhay and put it into haystack. As Sam was a bright farmer, he tried to\r\nmake the process of storing hay simpler and more convenient to use. He\r\ncollected the hay into cubical hay blocks of the same size. Then he\r\nstored the blocks in his barn. After a summer spent in hard toil Sam\r\nstored hay blocks and stored them in a barn as a rectangular\r\nparallelepiped layers high. Each layer had rows and each row had\r\nblocks.At the end of the autumn Sam came into the barn to admire one\r\nmore time the hay he’d been stacking during this hard summer.\r\nUnfortunately, Sam was horrified to see that the hay blocks had been\r\ncarelessly scattered around the barn. The place was a complete mess. As\r\nit turned out, thieves had sneaked into the barn. They completely\r\ndissembled and took away a layer of blocks from the parallelepiped’s\r\nfront, back, top and sides. As a result, the barn only had a\r\nparallelepiped containing hay blocks. To hide the evidence of the crime,\r\nthe thieves had dissembled the parallelepiped into single blocks and\r\nscattered them around the barn. After the theft Sam counted hay blocks\r\nin the barn but he forgot numbers , .Given number , find the minimally\r\npossible and maximally possible number of stolen hay blocks.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <set>\n#include <map>\n#include <string>\n#include <cmath>\n#include <cassert>\n#include <ctime>\n#include <algorithm>\n#include <queue>\n#include <memory.h>\n#include <stack>\n#define mp make_pair\n#define pb push_back                     \n#define setval(a,v) memset(a,v,sizeof(a))\n\n#if ( _WIN32 || __WIN32__ )\n    #define LLD \"%I64d\"\n#else\n    #define LLD \"%lld\"\n#endif\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n\nint main()\n{\n  #ifdef LOCAL\n    freopen(\"input.txt\",\"r\",stdin);\n    freopen(\"output.txt\",\"w\",stdout);\n  #endif\n    ll n;\n    cin >> n;\n    ll minv,maxv;\n    minv = (1LL<<60LL);\n    maxv = -minv;\n\n\n    for (int i = 1; i*i <= n; i++){\n        if (n % i != 0)\n            continue;\n        for (int I = 0; I < 2; I++){\n            int a = i;\n            if (I) a = n/i;\n            int n1 = n / a;\n            for (int j = 1; j*j <= n1; j++){\n                if (n1 % j) continue;\n                int b = j;\n                int c = n1 / j;\n                ll val = (a+1)*1LL*(b+2)*1LL*(c+2);\n                minv = min(minv,val);\n                maxv = max(maxv,val);\n            }\n        }\n    }\n\n    cout << minv - n <<\" \"<<maxv - n << endl;\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Help Farmer.json",
    "editorial_link": "https://codeforces.com/blog/entry/3651",
    "editorial": "Due to quite low constraint this problem is easily solvable by brute-force. Without loss of generality assume that A <= B <= C. Then it is clear that A cannot exceed , and, given A, B cannot exceed . Then all solution is just two cycles:\n\nfor (long long a = 1; a*a*a <= n; ++a) if (n%a == 0){\n for (long long b = a; b*b <= n/a; ++b) if ((n/a)%b == 0){\n  long long c = n/a/b;\n  ...  \n }\n}\n\nSince we assumed A <= B <= C, now it is not clear which parameter (A, B or C) is the height of haystack, so inside the cycle one should consider all three possibilities. For any N <= 10^9 the code inside the second loop runs no more than 25000 times, so this solution fits timelimit even for N <= 10^11 and maybe larger. Why it's so quick? It's because of the fact that number of divisors of arbitrary number N does not exceed about . That's why all similar solutions and maybe some other streetmagic that has anything common with divisors of N, should get AC.",
    "hint": []
}