{"link": "https://codeforces.com//contest/403/problem/A", "problemId": "7183", "problem_idx": "A", "shortId": "403A", "contest_number": "403", "problem_submissions": {"E": [6040937, 154984304, 6052630, 6052356, 14574817, 14574735, 14574710, 14574669, 14574665, 6040453], "A": [6035160, 6030951, 6030860, 6031178, 6034007, 6030859, 6031215, 6036883, 6034828, 6031673, 6031177, 6031105, 6030857, 6031293, 6030993, 6042179, 6030867, 6040743, 6030907, 6031032], "D": [6032031, 6036149, 6037514, 6035188, 6038552, 6036821, 6037360, 6035214, 6032979, 6051793, 6039305, 6040517, 6037815, 6037208, 6040122, 6042199, 6036355, 6036730, 6039500, 6040454], "B": [6037462, 6032575, 6037115, 6031670, 6038606, 6034965, 6038593, 6037275, 6035133, 6032908, 6036968, 6034116, 6033389, 6034279, 6042123, 6032620, 6032444, 6034225], "C": [6033086, 6035964, 6032440, 6032942, 6033609, 6032046, 6031154, 6035769, 6036195, 6034842, 6032124, 6038424, 6038292, 6035730, 6042190, 6033591, 6038234, 6037774, 6036096]}, "name": "A. Searching for Graph", "statement": "Let\u2019s call an undirected graph of vertices , if the following conditions\r\nfulfill: the graph contains exactly edges; the graph doesn\u2019t contain\r\nself-loops and multiple edges; for any integer (), any subgraph\r\nconsisting of vertices contains at most edges. A of a graph is some set\r\nof the graph vertices and some set of the graph edges. At that, the set\r\nof edges must meet the condition: both ends of each edge from the set\r\nmust belong to the chosen set of vertices. Your task is to find a graph\r\nconsisting of vertices.\r\n", "solutions": ["#include <cstdlib>\n#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <cstring>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\n\n#define SIZE(x) (int((x).size()))\n#define rep(i,l,r) for (int i=(l); i<=(r); i++)\n#define repd(i,r,l) for (int i=(r); i>=(l); i--)\n#define rept(i,c) for (typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)\n\n#ifndef ONLINE_JUDGE\n#define debug(x) { cerr<<#x<<\" = \"<<(x)<<endl; }\n#else\n#define debug(x) {}\n#endif\n\nint g[50][50];\n\nvoid lemon()\n{\n\tint n,p; scanf(\"%d%d\",&n,&p);\n\tmemset(g,0,sizeof g);\n\tint t=n/5;\n\trep(i,1,t)\n\t\trep(j,i*5-4,i*5)\n\t\t\trep(k,i*5-4,i*5)\n\t\t\t\tg[j][k]=1;\n\t\n\trep(i,t*5+1,n)\n\t{\n\t\tg[i][1]=1;\n\t\tg[1][i]=1;\n\t\tg[i][2]=1;\n\t\tg[2][i]=1;\n\t}\n\t\n\trep(k,1,p)\n\t{\n\t\tint flag=0;\n\t\trep(i,1,n)\n\t\t{\n\t\t\tif (flag) break;\n\t\t\trep(j,1,n)\n\t\t\t\tif (i!=j && !g[i][j])\n\t\t\t\t{\n\t\t\t\t\tg[i][j]=1; g[j][i]=1; flag=1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n\t}\n\t\n\trep(i,1,n)\n\t\trep(j,i+1,n)\n\t\t\tif (g[i][j])\n\t\t\t\tprintf(\"%d %d\\n\",i,j);\n\t\n\t\t\t\t\n}\n\nint main()\n{\n\tios::sync_with_stdio(true);\n\t#ifndef ONLINE_JUDGE\n\t\tfreopen(\"B.in\",\"r\",stdin);\n\t#endif\n\tint tcase; scanf(\"%d\",&tcase);\n\twhile (tcase--) lemon();\n\treturn 0;\n}\n\n"], "input": "", "output": "", "tags": ["constructive algorithms", "graphs"], "dificulty": "1500", "interactive": false}