{
    "link": "https://codeforces.com//contest/235/problem/C",
    "problemId": "2001",
    "problem_idx": "C",
    "shortId": "235C",
    "contest_number": "235",
    "problem_submissions": {
        "D": [
            3042109
        ],
        "C": [
            2417778,
            2401429,
            2402641
        ],
        "E": [
            2402112,
            2401617,
            2400848,
            2421152,
            2421132,
            120142495,
            120140982,
            2406375
        ],
        "A": [
            2397139,
            2395807,
            2396602,
            2395919,
            2397439,
            2396282,
            2397676,
            2397630,
            2396710,
            2396092,
            2396146,
            2396812,
            2396212,
            2397021,
            2396581
        ],
        "B": [
            2395952,
            2396750,
            2397121,
            2396950,
            2397083,
            2398248,
            2396164,
            2401830,
            2396720,
            2397471,
            2402358,
            2399645,
            2400107,
            2397813
        ]
    },
    "name": "C. Cyclical Quest",
    "statement": "Some days ago, WJMZBMR learned how to answer the query \"how many times\r\ndoes a string occur in a string \" quickly by preprocessing the string .\r\nBut now he wants to make it harder.So he wants to ask \"how many\r\nconsecutive substrings of are cyclical isomorphic to a given string \".\r\nYou are given string and strings , for each string find, how many\r\nconsecutive substrings of are cyclical isomorphic to .Two strings are\r\ncalled if one can rotate one string to get the other one. ’Rotate’ here\r\nmeans ’to take some consecutive chars (maybe none) from the beginning of\r\na string and put them back at the end of the string in the same order’.\r\nFor example, string \"\" can be rotated to string \"\". We can take\r\ncharacters \"\" from the beginning and put them at the end of \"\".\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\nchar buf[1000010];\nstring s,t;\n\n#define MAXN 1000000\nstruct state {int parent, maxlen; map <char, int> edge;};\nint S;\nstate node[2*MAXN+10];\n\nvoid suffix_automaton(void){\n    int i,j;\n    \n    node[0].parent = -1;\n    S = 1;\n    int prev = 0;\n    \n    REP(i,s.length()){\n        char c = s[i];\n        \n        int cur = S; S++;\n        node[cur].maxlen = i + 1;\n        \n        int p = prev;\n        while(p != -1){\n            if(node[p].edge.find(c) != node[p].edge.end()) break;\n            node[p].edge[c] = cur;\n            p = node[p].parent;\n        }\n        \n        if(p != -1){\n            int q = node[p].edge[c];\n            \n            if(node[q].maxlen == node[p].maxlen + 1){\n                node[cur].parent = q;\n            } else {\n                int q2 = S; S++;\n                node[q2].parent = node[q].parent;\n                node[q2].maxlen = node[p].maxlen + 1;\n                node[q2].edge = node[q].edge;\n                node[cur].parent = node[q].parent = q2;\n                \n                int r = p;\n                while(r != -1){\n                    if(node[r].edge.find(c) == node[r].edge.end() || node[r].edge[c] != q) break;\n                    node[r].edge[c] = q2;\n                    r = node[r].parent;\n                }\n            }\n        }\n        \n        prev = cur;\n    }\n}\n\nvector <int> child[2000010];\nint cnt[2000010];\nint minlen[2000010];\n\nvoid dfs(int x){\n    int i;\n    \n    REP(i,child[x].size()){\n        dfs(child[x][i]);\n        cnt[x] += cnt[child[x][i]];\n    }\n}\n\nint func(void){\n    int i;\n    \n    REP(i,S) if(node[i].parent != -1) minlen[i] = node[node[i].parent].maxlen + 1;\n    REP(i,S) if(node[i].parent != -1) child[node[i].parent].push_back(i);\n    \n    int x = 0;\n    REP(i,s.length()){\n        x = node[x].edge[s[i]];\n        cnt[x]++;\n    }\n    \n    dfs(0);\n}\n\nint query(int cycle){\n    int N=t.length(),i=0,j=0,x=0,ans=0;\n    \n    while(1){\n        char c = t[j%N];\n        while(i < j && node[x].edge.find(c) == node[x].edge.end()){\n            if(minlen[x] == j-i) x = node[x].parent;\n            i++;\n        }\n        \n        if(node[x].edge.find(c) == node[x].edge.end()){\n            i++; j++;\n        } else {\n            x = node[x].edge[c];\n            j++;\n        }\n        \n        if(j >= N + cycle) break;\n        if(j >= N && j-i >= N){\n            while(j-i > N){\n                if(minlen[x] == j-i) x = node[x].parent;\n                i++;\n            }\n            ans += cnt[x];\n        }\n    }\n    \n    return ans;\n}\n\nint fail[1000010],pre[1000010];\n\nvoid failure(void){\n    int i,j=-1;\n    fail[0] = -1;\n    REP(i,t.length()){\n        while(j >= 0 && t[i] != t[j]) j = fail[j];\n        j++;\n        fail[i+1] = j;\n    }\n}\n\nint kmp(void){ // [i-pre[i], i) matches\n    int N=t.length(),i,j=0;\n    for(i=0;;i++){\n        while(j == N || (j >= 0 && t[i%N] != t[j])) j = fail[j];\n        j++;\n        if(j == N && i+1 > N) return i+1-N;\n    }\n}\n\nint min_cycle(void){\n    failure();\n    return kmp();\n}\n\nint main(void){\n    int Q,i;\n    \n    scanf(\"%s\",buf); s = buf;\n    suffix_automaton();\n    func();\n    \n    scanf(\"%d\",&Q);\n    REP(i,Q){\n        scanf(\"%s\",buf); t = buf;\n        int cycle = min_cycle();\n        int ans = query(cycle);\n        printf(\"%d\\n\", ans);\n    }\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "string suffix structures",
        "strings"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Cyclical Quest.json",
    "editorial_link": "https://codeforces.com//blog/entry/5592",
    "editorial": "This problem can be solved by many suffix structures. Probably using\r\nsuffix automaton is the best way to solve it since suffix automaton is\r\nsimple and clear. Let us build a suffix automaton of the input string S,\r\nand consider the query string x. Let us also build a string t as x\r\nconcatenated with x dropping the last char. One can see that every\r\nconsecutive sub-string of t with length |x| is a rotation of x. Let us\r\nread the string t with suffix automaton we have build, and every time\r\ntake the first char out and add a new char, add the answer by the number\r\nof string equal to this current sub-string of t (which is a rotation of\r\nx). And one more thing, we should consider the repetend of x as well,\r\ncheck my solution here:2403375. Check here if you are not familiar with\r\nsuffix automaton :e-maxxâs blog\r\n",
    "hint": []
}