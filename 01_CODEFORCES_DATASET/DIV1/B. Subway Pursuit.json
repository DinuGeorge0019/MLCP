{"link": "https://codeforces.com//contest/1039/problem/B", "problemId": "215701", "problem_idx": "B", "shortId": "1039B", "contest_number": "1039", "problem_submissions": {"D": [42513714, 42511510, 42520062, 42506634, 42517597, 42520159, 42521567, 42523747, 42518726, 42517947, 42522840, 42517334, 42557382, 42552709, 42522292, 42521116, 42593278, 42593192, 42592919, 42592856, 42529738, 42525570, 42594801, 42594517, 42530840], "C": [42506498, 42504177, 42507968, 42513002, 42512024, 42513641, 42514946, 42508788, 42515591, 42512122, 42511727, 42516665, 42510178, 42514370, 42513831, 42505887, 42506202], "A": [42503958, 42503367, 42516900, 42503286, 42504774, 42503703, 42517670, 42510165, 42507659, 42503441, 42509759, 42530985, 42509802, 42525002, 42513799, 42511865], "B": [42501109, 42507268, 42505627, 42509001, 42507388, 42508900, 42510540, 42503816, 42504282, 42519348, 42522856, 42514032, 42504233, 42511724, 42514814, 42501808], "E": [44360079, 42649854, 42649543, 42648847, 42648674, 42648023, 42621125, 42617681, 42617609, 42617300]}, "name": "B. Subway Pursuit", "statement": "In the Wonderful Metropolis of the Future, there is no need in subway\r\ntrain drivers. Due to the technological progress, they were replaced by\r\nthe Artificial Intelligence (AI). Unfortunately, one day the predictions\r\nof sci-fi writers came true: the AI rebelled and now there is an\r\nuncontrollable train in the subway. It can be dangerous! Your task is to\r\nfind the train and stop the AI.The subway of the Metropolis is one line\r\n(regular straight line with no self-intersections) with n stations,\r\nindexed consecutively from 1 to n. At each moment the train is at some\r\nstation. You need to determine the index of this station, so that the\r\ntrain would be secured.To find the train, dispatcher Sarah gave you a\r\ngadget that allows you to select arbitrary numbers l and r (l\r\nle r), and then check, whether the train is located on a station with\r\nindex between l and r, inclusive. Unfortunately, recharging of the\r\ngadget takes some time (and every time you use it as soon as possible),\r\nso between two applications of the gadget the train can move to any\r\nstation that is at most k stations away. Formally, if the train was at\r\nthe station x when the gadget was applied, then at the next application\r\nof the gadget the train can appear at any station y such that\r\nmax(1, x - k)\r\nleq y\r\nleq\r\nmin(n, x + k).Note that AI is not aware that you are trying to catch the\r\ntrain, so it makes all moves according to its predefined plan.After an\r\nexamination of the gadget you found that it is very old and can hold no\r\nmore than 4500 applications, after which it will break and your mission\r\nwill be considered a failure.Can you find the station with the train\r\nusing no more than 4500 applications of the gadgets?\r\n", "solutions": ["#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <queue>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define mp make_pair\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\nchar s[10];\n\nbool query(ll l, ll r) {\n\tprintf(\"%lld %lld\\n\", l, r);\n\tfflush(stdout);\n\tscanf(\"%s\", s);\n\tif (s[0] == 'B') exit(0);\n\tif (s[0] == 'Y' && l == r) exit(0);\n\treturn s[0] == 'Y';\n}\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tll n;\n\tll l, r;\n\tll k;\n\tscanf(\"%lld%lld\", &n, &k);\n\tl = 1;\n\tr = n;\n\twhile(true) {\n\t\tll len = r - l + 1;\n\t\tif (len > 4 * k + 3) {\n\t\t\tll m = (l + r) / 2;\n\t\t\tif (query(l, m))\n\t\t\t\tr = m;\n\t\t\telse\n\t\t\t\tl = m + 1;\n\t\t} else {\n\t\t\tll x = l + rng() % len;\n\t\t\tif (query(x, x)) throw;\n\t\t}\n\t\tl = max(1LL, l - k);\n\t\tr = min(n, r + k);\n\t}\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "interactive", "probabilities"], "dificulty": "2100", "interactive": false}