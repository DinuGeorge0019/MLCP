{
    "link": "https://codeforces.com//contest/668/problem/A",
    "problemId": "57059",
    "problem_idx": "A",
    "shortId": "668A",
    "contest_number": "668",
    "problem_submissions": {
        "F": [
            17499550,
            17496606,
            17499490,
            17520108,
            17532592,
            18501140,
            17506872
        ],
        "B": [
            17492263,
            17485934,
            18962334,
            18962098,
            17485171,
            17485437,
            17486714,
            17488923,
            17486945,
            17485337,
            17484629,
            17487464,
            17484958,
            17488407,
            17491479,
            17485748,
            17490028,
            17488673,
            17494403,
            17485637
        ],
        "D": [
            17490332,
            17487430,
            17490281,
            17491665,
            17491589,
            17491023,
            17492381,
            17491847,
            17510482,
            17491540,
            17491742,
            17492256,
            17492993,
            17492659,
            17489839,
            17492977,
            17494347,
            17514667,
            17493357,
            17493004,
            17491261
        ],
        "C": [
            17488542,
            17483428,
            17488211,
            17499595,
            17489413,
            17489671,
            17487966,
            17489865,
            17488377,
            17490380,
            17490343,
            17491934,
            17490751,
            17488239,
            17491003,
            17488540,
            17492291,
            17488705,
            17488521
        ],
        "A": [
            17482539,
            17489363,
            17482477,
            17482341,
            17484937,
            17482743,
            17482929,
            17482753,
            17482646,
            17483327,
            17482913,
            17484500,
            17493264,
            17483554,
            17483365,
            17482861,
            17485075,
            17503074
        ],
        "E": [
            17501421,
            17514396,
            17516687,
            17501875,
            18500143,
            17500162,
            17503103
        ]
    },
    "name": "A. Little Artem and Matrix",
    "statement": "Little Artem likes electronics. He can spend lots of time making\r\ndifferent schemas and looking for novelties in the nearest electronics\r\nstore. The new control element was delivered to the store recently and\r\nArtem immediately bought it.That element can store information about the\r\nmatrix of integers size . There are inputs in that element, i.e. each\r\nrow and each column can get the signal. When signal comes to the input\r\ncorresponding to some row, this row cyclically shifts to the left, that\r\nis the first element of the row becomes last element, second element\r\nbecomes first and so on. When signal comes to the input corresponding to\r\nsome column, that column shifts cyclically to the top, that is first\r\nelement of the column becomes last element, second element becomes first\r\nand so on. Rows are numbered with integers from to from top to bottom,\r\nwhile columns are numbered with integers from to from left to\r\nright.Artem wants to carefully study this element before using it. For\r\nthat purpose he is going to set up an experiment consisting of turns. On\r\neach turn he either sends the signal to some input or checks what number\r\nis stored at some position of the matrix.Artem has completed his\r\nexperiment and has written down the results, but he has lost the chip!\r\nHelp Artem find any initial matrix that will match the experiment\r\nresults. It is guaranteed that experiment data is consistent, which\r\nmeans at least one valid matrix exists.\r\n",
    "solutions": [
        "#include <string>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <set>\n#include <map>\n#include <queue>\n#include <iostream>\n#include <sstream>\n#include <cstdio>\n#include <cmath>\n#include <ctime>\n#include <cstring>\n#include <cctype>\n#include <cassert>\n#include <limits>\n#include <functional>\n#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))\n#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))\n#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))\n#if defined(_MSC_VER) || __cplusplus > 199711L\n#define aut(r,v) auto r = (v)\n#else\n#define aut(r,v) __typeof(v) r = (v)\n#endif\n#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)\n#define all(o) (o).begin(), (o).end()\n#define pb(x) push_back(x)\n#define mp(x,y) make_pair((x),(y))\n#define mset(m,v) memset(m,v,sizeof(m))\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\nusing namespace std;\ntypedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;\ntemplate<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }\ntemplate<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }\n\nint main() {\n\tint n; int m; int q;\n\twhile(~scanf(\"%d%d%d\", &n, &m, &q)) {\n\t\tvector<vi> id(n, vi(m));\n\t\trep(i, n) rep(j, m)\n\t\t\tid[i][j] = i * m + j;\n\t\tvector<int> val(n * m, 0);\n\t\tvi tmp(n + m);\n\t\tfor(int ii = 0; ii < q; ++ ii) {\n\t\t\tint ty;\n\t\t\tscanf(\"%d\", &ty);\n\t\t\tif(ty == 1) {\n\t\t\t\tint r;\n\t\t\t\tscanf(\"%d\", &r), -- r;\n\t\t\t\trep(j, m) tmp[j] = id[r][j];\n\t\t\t\trotate(tmp.begin(), tmp.begin() + 1, tmp.begin() + m);\n\t\t\t\trep(j, m) id[r][j] = tmp[j];\n\t\t\t} else if(ty == 2) {\n\t\t\t\tint c;\n\t\t\t\tscanf(\"%d\", &c), -- c;\n\t\t\t\trep(i, n) tmp[i] = id[i][c];\n\t\t\t\trotate(tmp.begin(), tmp.begin() + 1, tmp.begin() + n);\n\t\t\t\trep(i, n) id[i][c] = tmp[i];\n\t\t\t} else if(ty == 3) {\n\t\t\t\tint r; int c; int x;\n\t\t\t\tscanf(\"%d%d%d\", &r, &c, &x), -- r, -- c;\n\t\t\t\tval[id[r][c]] = x;\n\t\t\t} else abort();\n\t\t}\n\t\trep(i, n) {\n\t\t\trep(j, m) {\n\t\t\t\tif(j != 0) putchar(' ');\n\t\t\t\tprintf(\"%d\", val[i * m + j]);\n\t\t\t}\n\t\t\tputs(\"\");\n\t\t}\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Little Artem and Matrix.json",
    "editorial_link": "https://codeforces.com//blog/entry/44538",
    "editorial": "Let's have 2 matrices: a, idx. In a we will have NULL for cell if we don't know the value or the value. idx will be initialized with idx[i][j] = {i, j}; Then we need to emulate the process on matrix idx. If we have 3rd query we can set up the value in matrix a, because we know the original position of that cell keeping idx."
}