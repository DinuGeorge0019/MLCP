{
    "link": "https://codeforces.com//contest/1329/problem/B",
    "problemId": "582574",
    "problem_idx": "B",
    "shortId": "1329B",
    "contest_number": "1329",
    "problem_submissions": {
        "E": [
            75408443,
            75525199,
            75525023,
            75681621,
            76019995,
            76016936,
            75967053,
            75966418
        ],
        "D": [
            75389063,
            75398925,
            75385191,
            75401307,
            75408075,
            75405008,
            75403445,
            75404364,
            75403371,
            75659972,
            75411387,
            75407920,
            75411250,
            75412465,
            75413663,
            75407247,
            75409435,
            75922378,
            75921522,
            75921098,
            75920566,
            75920416,
            75919758,
            75919734,
            75806069,
            75805925,
            75803536,
            75803307,
            75803058,
            75802910,
            75800662,
            75395261,
            75399040
        ],
        "C": [
            75374256,
            75371549,
            75396568,
            75381813,
            75372171,
            75376833,
            75380449,
            75377512,
            75386022,
            75659958,
            75378281,
            75378362,
            75487924,
            75487540,
            75487429,
            75487406,
            75386768,
            75380568,
            75386156,
            75382219,
            75387697,
            75369638,
            76036841,
            75372968,
            75421067
        ],
        "B": [
            75357516,
            75353754,
            75360937,
            75361445,
            75363313,
            75362516,
            75363699,
            75367490,
            75367087,
            75659949,
            75361718,
            75364241,
            75358119,
            75363158,
            75368163,
            75368647,
            75364635,
            75360193,
            76036829,
            75359511,
            75363649,
            75368965
        ],
        "A": [
            75354673,
            75356344,
            75356602,
            75357362,
            75359450,
            75355169,
            75357071,
            75359811,
            75354137,
            75659929,
            75354669,
            75356764,
            75372979,
            75355330,
            75359586,
            75360814,
            75615883,
            75354430,
            76036826,
            75355988,
            75360416,
            75354524
        ]
    },
    "name": "B. Dreamoon Likes Sequences",
    "statement": "Dreamoon likes sequences very much. So he created a problem about the\r\nsequence that you can’t find in OEIS: You are given two integers d, m,\r\nfind the number of arrays a, satisfying the following constraints: The\r\nlength of a is n, n\r\nge 1 1\r\nle a_1 < a_2 <\r\ndots < a_n\r\nle d Define an array b of length n as follows: b_1 = a_1,\r\nforall i > 1, b_i = b_{i - 1}\r\noplus a_i, where\r\noplus is the bitwise exclusive-or (xor). After constructing an array b,\r\nthe constraint b_1 < b_2 <\r\ndots < b_{n - 1} < b_n should hold. Since the number of possible arrays\r\nmay be too large, you need to find the answer modulo m.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__);fflush(stderr);\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n \n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\ndouble startTime;\ndouble getCurrentTime() {\n\treturn ((double)clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nvoid solve() {\n\tll d, m;\n\tscanf(\"%lld%lld\", &d, &m);\n\tll ans = 1;\n\tfor (int k = 0; k < 30; k++) {\n\t\tll l = 1LL << k, r = 1LL << (k + 1);\n\t\tr = min(r, d + 1);\n\t\tr -= l;\n\t\tr = max(r, 0LL);\n\t\tans = (ans * (r + 1)) % m;\n\t}\n\tans--;\n\tans %= m;\n\tif (ans < 0) ans += m;\n\tprintf(\"%lld\\n\", ans);\n}\n\nint main()\n{\n\tstartTime = (double)clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) solve();\n\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "combinatorics",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Dreamoon Likes Sequences.json",
    "editorial_link": "https://codeforces.com//blog/entry/75559",
    "editorial": "Firstly, we define a function as the position of the highest bit which\r\nis set to 1 in a positive integer . For example, , and .If the\r\nconstraints in this problem is satisfied, there is some observations,\r\nand must less than . And luckily, if is always hold, the constraints in\r\nthis problem will also be satisfied (Please prove them by yourself or\r\nwait for someone prove it in comments : ) P.S. the link of proof written\r\nby someone is int the end. )In other words, for each non-negative\r\ninteger , there is at most one such that . This is, at most one of the\r\npositive numbers in range can occur in . In each non-empty range, we can\r\nchoose one integer in it or donât choose anyone. So for each of them we\r\nhave different choice. Then according to the rule of product, we can\r\nmultiply all number of choices for different and minus the value by one\r\nto get the answer. For example, when d = 6, there are choices for ,\r\nchoices for , choices for . So the answer for is .\r\n",
    "hint": []
}