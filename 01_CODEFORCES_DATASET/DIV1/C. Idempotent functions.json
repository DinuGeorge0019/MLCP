{"link": "https://codeforces.com//contest/542/problem/C", "problemId": "27151", "problem_idx": "C", "shortId": "542C", "contest_number": "542", "problem_submissions": {"E": [10988594, 10988662, 10988040, 10988519, 10989472, 10986646, 10986386, 10987525, 10987889, 10997446, 10987208, 10988323, 10987814], "A": [10988183, 10988073, 10988917, 10988039, 10988066, 10988030, 10988339, 10987042, 10988676, 10988761, 10989522, 10985841, 10987459, 10994455], "D": [10986695, 10987150, 10987152, 10986150, 10986231, 10986943, 10990837, 10988365, 10989849, 10993982, 11035792, 11035777, 11035767, 11035727, 10990386, 10992159, 10990340, 10990120, 10987703, 10987627], "F": [10986005, 10986369, 10987577, 10990309, 10986553, 10985927, 10987236, 10985531, 10987038, 10986965, 10986721, 10986640, 10986454, 10985938, 10985827, 10985838, 10986342, 10986368], "C": [10985518, 10985721, 10985435, 10985462, 10985406, 10986200, 10986782, 10986530, 10985521, 10986222, 10986134, 10985353, 10985405, 10985560, 10985649, 10985787], "B": [10996302, 11060742, 11054057]}, "name": "C. Idempotent functions", "statement": "Some time ago Leonid have known about . defined on a set is such\r\nfunction , that for any the formula holds.Let\u2019s denote as the function\r\napplied times to the value . More formally, , for each .You are given\r\nsome function . Your task is to find minimum positive integer such that\r\nfunction is .\r\n", "solutions": ["#include <iostream>\n#include <fstream>\n#include <cstdio>\n#include <algorithm>\n#include <map>\n#include <vector>\n#include <string>\n#include <queue>\n\nusing namespace std;\ntypedef long long ll;\nconst int MAXN = 210;\n\nint N;\nint arr[MAXN];\nll mdist, mult;\nbool bad[MAXN];\n\nll gcd (ll a, ll b)\n{\n    if (b == 0) return a;\n    return gcd (b, a % b);\n}\n\nll lcd (ll a, ll b)\n{\n    ll g = gcd (a, b);\n    return a / g * b;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    \n    cin >> N;\n    for (int i = 0; i < N; i++)\n    {\n        cin >> arr[i];\n        arr[i]--;\n    }\n    \n    mdist = 0, mult = 1;\n    \n    for (int i = 0; i < N; i++)\n        bad[i] = false;\n    \n    for (int i = 0; i < N; i++)\n    {\n        int tot = 1, cloc = i;\n        for (int j = 0; j < N; j++)\n            cloc = arr[cloc];\n        \n        if (bad[cloc]) continue;\n        \n        int lval = cloc;\n        bad[cloc] = true;\n        cloc = arr[cloc];\n        while (lval != cloc)\n        {\n            //cout << cloc << \" 1\\n\";\n            bad[cloc] = true;\n            tot++;\n            cloc = arr[cloc];\n        }\n        \n        //cout << i << \" \" << tot << \"\\n\";\n        if (tot > 0)\n            mult = lcd (mult, (ll) tot);\n    }\n    \n    for (int i = 0; i < N; i++)\n    {\n        int tot = 0, cloc = i;\n        while (!bad[cloc])\n        {\n            //cout << cloc << \" 2\\n\";\n            tot++;\n            cloc = arr[cloc];\n        }\n        \n        mdist = max (mdist, (ll) tot);\n    }\n    \n    //cout << mdist << \" \" << mult << endl;\n    \n    ll res = (mdist / mult + 1) * mult;\n    while (res >= mdist + mult)\n        res -= mult;\n    while (res < mult)\n        res += mult;\n    \n    cout << res << \"\\n\";\n    return 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "graphs", "math"], "dificulty": "2000", "interactive": false}