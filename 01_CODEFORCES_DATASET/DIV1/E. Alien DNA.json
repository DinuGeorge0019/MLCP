{
    "link": "https://codeforces.com//contest/217/problem/E",
    "problemId": "1611",
    "problem_idx": "E",
    "shortId": "217E",
    "contest_number": "217",
    "problem_submissions": {
        "C": [
            2030323,
            2028224,
            2030324,
            2028180,
            2030572,
            2027991,
            2028080,
            2028735,
            2028870,
            2028963,
            6055918,
            2033098,
            2028984,
            2030292,
            2029555,
            2029656,
            2045302
        ],
        "D": [
            2027935,
            2028420,
            2028882
        ],
        "B": [
            2025442,
            2028904,
            2025653,
            2028314,
            2029281,
            2032858,
            2030094,
            2032869,
            2032838,
            2027553,
            2026258
        ],
        "A": [
            2023511,
            2023579,
            2023545,
            2023525,
            2023509,
            2024047,
            2023513,
            2023838,
            2024026,
            2023574,
            2023601,
            2023618,
            2024082,
            2023647,
            2023532,
            2023666,
            2023680
        ],
        "E": [
            2028007,
            2029369,
            2033123,
            2070623,
            2070617
        ]
    },
    "name": "E. Alien DNA",
    "statement": "Professor Bajtocy is conducting experiments on alien DNA. He has\r\ndiscovered that it is subject to repetitive mutations each mutation\r\nhappens in the same way: some continuous subsequence of the alien DNA\r\nbecomes active, copies itself, the copy gets mangled and inserts itself\r\nright after the original subsequence. The mangled copy of the activated\r\ncontinuous subsequence is formed by first joining all the elements at\r\nthe even positions in that subsequence, and then joining all the\r\nelements at the odd ones at the end. That is, if the activated\r\nsubsequence consists of 11 elements and represented as , its mangled\r\ncopy is .For example, if the original sequence was \"\" and the mutation\r\nhappened on the segment (that is the activated subsequence is \"\"), the\r\nmutated DNA is: \"\". The mangled copy of the activated subsequence is\r\nmarked with bold font.Professor Bajtocy has written down the original\r\nDNA sequence and the mutations that sequentially happened to it, and he\r\nnow asks you to recover the first elements of the DNA sequence after all\r\nthe mutations.\r\n",
    "solutions": [
        "#include <map>\n#include <set>\n#include <list>\n#include <ctime>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <vector>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <sstream>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std ;\n#define LS(t) ((t)<<1)\n#define RS(t) (((t)<<1)+1)\n#define MD(l,r) (((l)+(r))>>1)\n#define PI 3.1415926535897932384626433832795\nint n , m , L[5555] , R[5555] , T[33333333] ;\nint F[3333333] ;\nchar st[3333333] , ans[3333333] ;\n\ninline void BuildTree( int t , int l , int r )\n{\n\tT[t] = r - l + 1 ;\n\tif ( l < r ) {\n\t\tBuildTree( LS(t) , l , MD(l,r) ) ;\n\t\tBuildTree( RS(t) , MD(l,r)+1, r ) ;\n\t}\n}\n\ninline void Delete( int t , int l , int r , int x )\n{\n\tif ( l <= x && x <= r ) {\n\t\tT[t] -- ;\n\t\tif ( l < r ) {\n\t\t\tDelete( LS(t) , l , MD(l,r) , x ) ;\n\t\t\tDelete( RS(t) , MD(l,r)+1 , r , x ) ;\n\t\t}\n\t}\n}\n\ninline int Find( int t , int l , int r , int k )\n{\n\tif ( l == r ) {\n\t\treturn r ;\n\t}\n\tif ( T[LS(t)] >= k ) {\n\t\treturn Find( LS(t) , l , MD(l,r) , k ) ;\n\t}\n\treturn Find( RS(t) , MD(l,r)+1 , r , k-T[LS(t)] ) ;\n}\n\nint main( int argc, char *argv[] )\n{\n\tscanf( \"%s\" , st ) ;\n\tscanf( \"%d\" , &m ) ;\n\tBuildTree( 1 , 1 , m ) ;\n\tscanf( \"%d\" , &n ) ;\n\tfor ( int i = 0 ; i < n ; i ++ ) {\n\t\tscanf( \"%d%d\" , &L[i] , &R[i] ) ;\n\t}\n\tfor ( int i = n - 1 ; i >= 0 ; i -- )\n\tif ( R[i] < T[1] ) {\n\t\tint Len = R[i] - L[i] + 1 ;\n\t\tint now = L[i] + 1 ;\n\t\tif ( now > R[i] ) {\n\t\t\tnow = L[i] ;\n\t\t}\n\t\tfor ( int j = 1 ; j <= Len && R[i] < T[1] ; j ++ ) {\n\t\t\tint k = Find( 1 , 1 , m , R[i]+1 ) ;\n\t\t\tDelete( 1 , 1 , m , k ) ;\n\t\t\tF[k] = Find( 1 , 1 , m , now ) ;\n\t\t\tnow += 2 ;\n\t\t\tif ( now > R[i] ) {\n\t\t\t\tnow = L[i] ;\n\t\t\t}\n\t\t}\n\t}\n\tfor ( int i = 1 , j = 0 ; i <= m ; i ++ ) {\n\t\tif ( F[i] > 0 ) {\n\t\t\tans[i] = ans[F[i]] ;\n\t\t} else {\n\t\t\tans[i] = st[j++] ;\n\t\t}\n\t}\n\tprintf( \"%s\\n\" , ans + 1 ) ;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dsu",
        "trees"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Alien DNA.json",
    "editorial_link": "https://codeforces.com//blog/entry/5285",
    "editorial": "Note that it is easy to determine, looking at only the last mutation, how many letters it adds to the final result. Indeed, if we need to print out the first k letters of the sequence, and the last mutation is [l,?r], it suffices to find out the length of the overlap of segments [1,?k] and [r?+?1,?2r?-?l?+?1]. Say that it is x. Then, after the next to last mutation, we are only interested in the first k?-?x letters of the result \u0097 the rest is irrelevant, as it will become \"pushed out\" by the elements added in the last mutation. Repeating this reasoning going backwards, we shall find out that we can spend linear time adding letters to the result after every mutation, which turns out to be the main idea needed to solve the problem."
}