{
    "link": "https://codeforces.com//contest/1172/problem/D",
    "problemId": "355012",
    "problem_idx": "D",
    "shortId": "1172D",
    "contest_number": "1172",
    "problem_submissions": {
        "C2": [
            141600407,
            55254783,
            55254826,
            55257297,
            55253043,
            55256695,
            55259217,
            55259307,
            55260348,
            55256683,
            55270942,
            55262864,
            55394593,
            55256544,
            55256222,
            55256476
        ],
        "D": [
            55259812,
            55261379,
            55260385,
            55262554,
            55264421,
            55262846,
            55265864,
            55262949,
            55261237,
            55257268,
            55265259,
            55282819,
            55259099,
            55263111,
            55263637,
            55264769,
            55252234,
            55272471
        ],
        "C1": [
            55254052,
            55254936,
            55255627,
            55253139,
            55256736,
            55258621,
            55259255,
            55260376,
            55255981,
            55261688,
            55260260,
            55262975,
            55258783,
            55259505,
            55261611,
            55269127,
            55256504,
            55255804,
            55256553
        ],
        "B": [
            55249856,
            55248174,
            55250922,
            55254795,
            55250751,
            55252004,
            55254040,
            55251691,
            55250951,
            55253498,
            55253667,
            55248941,
            55252605,
            55253983,
            55255049,
            55260189,
            55249359,
            55251616,
            55252768
        ],
        "A": [
            55248325,
            55257508,
            55248960,
            55257490,
            55247357,
            55248700,
            55251742,
            55266272,
            55607192,
            55249619,
            55249678,
            55256938,
            55249251,
            55250622,
            55258815,
            55257623,
            55247019,
            55249926,
            55249357
        ],
        "E": [
            99401668,
            55317241,
            55479078,
            55479032,
            55478977
        ],
        "F": [
            55517893,
            55302923,
            55292935,
            55545710
        ]
    },
    "name": "D. Nauuo and Portals",
    "statement": "Nauuo is a girl who loves playing games related to portals.One day she\r\nwas playing a game as follows.In an n\r\ntimes n grid, the rows are numbered from 1 to n from top to bottom, the\r\ncolumns are numbered from 1 to n from left to right. We denote a cell on\r\nthe intersection of the r-th row and c-th column as (r,c).A portal is\r\ndoors. You can travel from one of them to another without changing your\r\ndirection. More formally, if you a cell with a door, you will teleport\r\nto the cell with the other door of the same portal and then the facing\r\nthe original direction. There be more than one doors in a single\r\ncell.The \"\" is the nearest cell in the direction you are facing. For\r\nexample, if you are facing bottom, the of (2,5) is (3,5).If you a cell\r\nwithout a door, you must the after that without changing the direction.\r\nIf the does not exist, you must exit the grid.You have to set some\r\n(possibly zero) portals in the grid, so that if you (i,1) facing right,\r\nyou will eventually exit the grid from (r_i,n), if you (1, i) facing\r\nbottom, you will exit the grid from (n,c_i).It is guaranteed that both\r\nr_{1..n} and c_{1..n} are of n elements. A permutation of n elements is\r\na sequence of numbers p_1,p_2,\r\nldots,p_n in which every integer from 1 to n appears exactly once.She\r\ngot confused while playing the game, can you help her to find a\r\nsolution?\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdlib>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <set>\n#define maxn 1005\n#define sq 355\n#define ll long long\n#define ld double\n#define mod 998244353\nusing namespace std;\nint r[maxn], c[maxn];\nint cnt;\nint os[maxn][4];\nvoid push(int a, int b, int c, int d)\n{\n\tos[cnt][0] = a, \n\tos[cnt][1] = b;\n\tos[cnt][2] = c;\n\tos[cnt][3] = d;\n\tcnt++;\n}\nvoid work(int n)\n{\n\tif(n == 0) return;\n\tif(r[n] == n && c[n] == n) work(n - 1);\n\telse\n\t{\n\t\tfor(int j = 1; j <= n - 1; j++)\n\t\t\tif(r[j] == n) r[j] = r[n];\n\t\tfor(int j = 1; j <= n - 1; j++)\n\t\t\tif(c[j] == n) c[j] = c[n];\n\t\twork(n - 1);\n\t\tpush(r[n], n, n, c[n]);\t\n\t} \n}\nint main()\n{\n\tint n;\n\tcin>>n;\n\tfor(int i = 1; i <= n; i++)\n\t\tscanf(\"%d\", &r[i]);\n\tfor(int i = 1; i <= n; i++)\n\t\tscanf(\"%d\", &c[i]);\n\twork(n);\n\tcout<<cnt<<endl;\n\tfor(int i = 0; i < cnt; i++)\n\t\tprintf(\"%d %d %d %d\\n\", os[i][0], os[i][1], os[i][2], os[i][3]);\n\treturn 0;\n} \n/*\n2 1 1 5\n\n \n*/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Nauuo and Portals.json",
    "editorial_link": "https://codeforces.com//blog/entry/67511",
    "editorial": "Tutorial Consider this problem:the person in facing right is numbered ,\nthe person in facing bottom is numbered . The person numbered has to\nexit the grid from , the person numbered has to exit the grid from .The\noriginal problem can be easily transferred to this problem. And now\nletâs transfer it into an subproblem by satisfying the requirement of\nthe first row and the first column.If and , you can simply do nothing\nand get an subproblem.Otherwise, you can set a portal consisting of two\ndoors in and where and . Swap and , and , then you will get an\nsubproblem.Then, you can solve the problem until it changes into a\none.This problem can be solved in , but the checker needs .\n",
    "hint": []
}