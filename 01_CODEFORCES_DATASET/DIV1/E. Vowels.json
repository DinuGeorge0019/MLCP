{"link": "https://codeforces.com//contest/383/problem/E", "problemId": "5726", "problem_idx": "E", "shortId": "383E", "contest_number": "383", "problem_submissions": {"B": [5756409, 5751225, 5757744, 5753341, 5808519, 5808489, 5808447, 5758844, 5759238, 5752874, 5755308, 5752676, 5753907, 5753281, 5756832, 5755532], "E": [5754649, 5757705, 5753388, 5758136, 5808454, 5755553, 5754159, 5755881, 5756030, 5755626, 5754883, 5757327, 5758405, 5757943], "D": [5753594, 5752449, 5752307, 5754262, 5808453, 5751984, 5752563, 5753410, 5753070, 5753481, 5755159, 5755983, 5755452, 5753533, 5756037, 5756133, 5757148, 5756616, 5755389, 5756824], "C": [5750456, 5751886, 5754923, 5749119, 5751328, 5751146, 5750311, 5750868, 5752299, 5751003, 5750201, 5751936, 5751653, 5754669, 5750989, 5754841, 5751430, 5750434], "A": [5747280, 5747986, 5747387, 5747246, 5808450, 5747221, 5747445, 5747936, 5747254, 5748686, 5747361, 5747734, 5747935, 5748612, 5748223, 5747638, 5747622, 5749616, 5757219]}, "name": "E. Vowels", "statement": "Iahubina is tired of so many complicated languages, so she decided to\r\ninvent a new, simple language. She already made a dictionary consisting\r\nof 3-words. A 3-word is a sequence of exactly lowercase letters of the\r\nfirst 24 letters of the English alphabet ( to ). She decided that some\r\nof the letters are vowels, and all the others are consonants. The whole\r\nlanguage is based on a simple rule: any word that contains at least one\r\nvowel is .Iahubina forgot which letters are the vowels, and wants to\r\nfind some possible correct sets of vowels. She asks Iahub questions. In\r\neach question, she will give Iahub a set of letters considered vowels\r\n(in this question). For each question she wants to know how many words\r\nof the dictionary are correct, considering the given set of\r\nvowels.Iahubina wants to know the of the squared answers to all the\r\npossible questions. There are different questions, they are all subsets\r\nof the set of the first 24 letters of the English alphabet. Help Iahub\r\nfind that number.\r\n", "solutions": ["#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n#include <ctime>\n#include <algorithm>\n#include <numeric>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <list>\n#include <map>\n#include <set>\n\nusing namespace std;\n\n#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#define pb push_back\n#define mp make_pair\n#define sz(x) ((int)(x).size())\n\ntypedef long long ll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<int, int> pii;\ntypedef pair<ll, int> pli;\ntypedef pair<int, ll> pil;\ntypedef pair<ll, ll> pll;\n\nvoid norm(int *f) {\n  for (int m = (1 << 12) - 1; m >= 0; m--) {\n    int res = 0;\n    for (int sub = m;; sub = (sub - 1) & m) {\n      res += f[sub];\n      if (!sub) break;\n    }\n    f[m] = res;\n  }\n}\n\nint fir[(1 << 12) + 10], las[(1 << 12) + 10];\nint fpc[12][(1 << 12) + 10];\nint lpc[12][(1 << 12) + 10];\n\nint main() {\n  #ifdef DEBUG\n  freopen(\".in\", \"r\", stdin);\n  freopen(\".out\", \"w\", stdout);\n  #endif\n\n  int n;\n  while (scanf(\"%d\", &n) >= 1) {\n    memset(fir, 0, sizeof fir);\n    memset(las, 0, sizeof las);\n    memset(fpc, 0, sizeof fpc);\n    memset(lpc, 0, sizeof lpc);\n\n    const int FIM = (1 << 12) - 1;\n    const int LAM = FIM << 12;\n\n    vi msks(n);\n    for (int i = 0; i < n; i++) {\n      char s[4];\n      scanf(\"%s\", s);\n      int msk = 0;\n      for (int i2 = 0; s[i2]; i2++)\n        msk |= 1 << (s[i2] - 'a');\n      msks[i] = msk;\n\n      int a = msk & FIM, b = (msk & LAM) >> 12;\n      int apos = __builtin_ctz(a);\n      int bpos = __builtin_ctz(b);\n\n      if (__builtin_popcount(a) == 0) {\n        las[b]++;\n      } else if (__builtin_popcount(b) == 0) {\n        fir[a]++;\n      } else if (__builtin_popcount(a) == 1) {\n        lpc[apos][b]++;\n      } else if (__builtin_popcount(b) == 1) {\n        fpc[bpos][a]++;\n      } else {\n        assert(false);\n      }\n    }\n    eprintf(\"go\\n\");\n    norm(fir);\n    norm(las);\n    for (int i = 0; i < 12; i++)\n      norm(fpc[i]), norm(lpc[i]);\n    eprintf(\"go2\\n\");\n\n    int ans = 0;\n    for (int m = 0; m < (1 << 24); m++) { // consonant is 1, vowel is 0\n      int cnt = 0;\n     \n      // cnt <-- number of bad, that is, subsets if 'm'\n      cnt += fir[m & FIM];\n      cnt += las[(m & LAM) >> 12];\n      for (int i = 0; i < 12; i++) if (m & (1 << i))\n        cnt += lpc[i][(m & LAM) >> 12];\n      for (int i = 0; i < 12; i++) if (m & (1 << (12 + i)))\n        cnt += fpc[i][m & FIM];\n\n//      eprintf(\"cnt=%d\\n\", cnt);\n      cnt = n - cnt;\n\n/*      int rcnt = 0;\n      for (int i = 0; i < n; i++) {\n        rcnt += ((~m & msks[i]) != 0);\n      }\n      if (cnt != rcnt) {\n        eprintf(\"m=%d; found %d != expected %d\\n\", ~m & (FIM | LAM), cnt, rcnt);\n        exit(0);\n      }*/\n      ans ^= cnt * cnt;\n    }\n    printf(\"%d\\n\", ans);\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["combinatorics", "divide and conquer", "dp"], "dificulty": "2700", "interactive": false}