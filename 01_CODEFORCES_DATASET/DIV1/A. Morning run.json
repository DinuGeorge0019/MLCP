{
    "link": "https://codeforces.com//contest/309/problem/A",
    "problemId": "3001",
    "problem_idx": "A",
    "shortId": "309A",
    "contest_number": "309",
    "problem_submissions": {
        "B": [
            3731099,
            3730792,
            3731042,
            3731786,
            3730550,
            3730284,
            3729908,
            3730541,
            3730449,
            3730996,
            3729978,
            3731064,
            3730199,
            3730107
        ],
        "D": [
            3730805,
            3730544,
            3730976,
            3731589,
            3734080,
            3734069,
            3734066,
            3734061,
            3734059,
            3734056,
            3734042,
            3734033,
            3730688
        ],
        "E": [
            3730645
        ],
        "A": [
            3729981,
            3730417,
            3729803,
            3730204,
            3729805,
            3729780,
            3729813,
            3729791,
            3729913,
            3729965,
            3729850,
            3729792,
            3729963,
            3729911,
            3731133
        ],
        "C": [
            3729784,
            3729949,
            3730172,
            3730228,
            3729910,
            3729943,
            3730005,
            3730049,
            3730161,
            3730116,
            3730023,
            3729795,
            3729875,
            3729810,
            3730574,
            3730818,
            3729859
        ]
    },
    "name": "A. Morning run",
    "statement": "People like to be fit. That’s why many of them are ready to wake up at\r\ndawn, go to the stadium and run. In this problem your task is to help a\r\ncompany design a new stadium. The city of N has a shabby old stadium.\r\nMany people like it and every morning thousands of people come out to\r\nthis stadium to run. The stadium can be represented as a circle, its\r\nlength is exactly meters with a marked start line. However, there can’t\r\nbe simultaneous start in the morning, so exactly at 7, each runner goes\r\nto his favorite spot on the stadium and starts running from there. Note\r\nthat not everybody runs in the same manner as everybody else. Some\r\npeople run in the clockwise direction, some of them run in the\r\ncounter-clockwise direction. It mostly depends on the runner’s mood in\r\nthe morning, so you can assume that each running direction is\r\nequiprobable for each runner in any fixed morning. The stadium is tiny\r\nand is in need of major repair, for right now there only is one running\r\ntrack! You can’t get too playful on a single track, that’s why all\r\nrunners keep the same running speed exactly 1 meter per a time unit.\r\nNevertheless, the runners that choose different directions bump into\r\neach other as they meet. The company wants to design a new stadium, but\r\nthey first need to know how bad the old one is. For that they need the\r\nexpectation of the number of bumpings by time units after the running\r\nhas begun. Help the company count the required expectation. Note that\r\neach runner chooses a direction equiprobably, independently from the\r\nothers and then all runners start running simultaneously at 7 a.m.\r\nAssume that each runner runs for time units without stopping. Consider\r\nthe runners to bump at a certain moment if at that moment they found\r\nthemselves at the same point in the stadium. A pair of runners can bump\r\nmore than once.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n\nusing namespace std;\n\ntypedef unsigned uint;\ntypedef long long Int;\ntypedef vector<int> vint;\ntypedef pair<int,int> pint;\n#define mp make_pair\n\ntemplate<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << \" \"; cout << endl; }\ntemplate<class T> void chmin(T &t, T f) { if (t > f) t = f; }\ntemplate<class T> void chmax(T &t, T f) { if (t < f) t = f; }\nint in() { int x; scanf(\"%d\", &x); return x; }\n\nint N;\nInt L, T;\nInt A[2000010];\n\nint main() {\n\tint i, j;\n\t\n\tfor (; ~scanf(\"%d\", &N); ) {\n\t\tL = in();\n\t\tT = in();\n\t\tfor (i = 0; i < N; ++i) {\n\t\t\tA[i] = in();\n\t\t}\n\t\tsort(A, A + N);\n\t\tfor (i = N; i <= N * 2; ++i) {\n\t\t\tA[i] = A[i - N] + L;\n\t\t}\n\t\tInt q = (T * 2) / L;\n\t\tInt r = (T * 2) % L;\n\t\tInt cnt = 0;\n\t\tfor (j = 0, i = 0; i < N; ++i) {\n\t\t\tfor (; A[j] - A[i] <= r; ++j);\n\t\t\tcnt += j - i - 1;\n\t\t}\n\t\tdouble ans = 0;\n\t\tans += 0.25 * ((double)N * (N - 1) * q + cnt);\n\t\tprintf(\"%.10f\\n\", ans);\n\t}\n\t\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "math",
        "two pointers"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Morning run.json",
    "editorial_link": "https://codeforces.com//blog/entry/7749",
    "editorial": "We were asked to find the expected value of meetings between the runners. How to do that? As the first step, expected value is lineal, so we can split the initial problems into the different ones: find the expected value of meetings between the fixed pair of runners. We will solve these problems. To do that we need to make some observations:\n\nLet x be the distance between the two runners and they run face to face for infinite amount of time (probability of that obviously equals to 0.5·0.5?=?0.25). Then the first meeting will happen at time , the next one  , the next   and so on.\n\nLet us assume that every run ran for l time units. Then if two runners meet  they meet exactly two times. The probability of the meeting equals to 0.5, because in two cases they run in the same direction and in two cases in the different ones.\n\nWe will build our solution based on these two observations. As the first step let us represent t as t?=?k·l?+?p, where 0???p?<?l. Then each runner will run k full laps. What does that mean? Because we have  pairs of runners, then in those k laps each pair will have 2k meetings with probability equals to 0.5. So, we need to add  to the answer.\n\nNow we need to take into account p seconds of running. Let us assume that the distance between two runners is x and they run towards each other. Then they will meet if , or x???2t. They will meet once more if , ir x???2t?-?l. They cannot meet more than twice, because p?<?l.\n\nLet us fix one of the runners, then using binary search we can find all other runners at distance no more than x from the fixed one. Let us choose x as x?=?2t, and then the number of runners at the distance no more than x stands for the number of runners which meet with the fixed one at least once. If x?=?2t?-?l, we will find the number of runners which meet with the fixed one exactly two times. Multiplying these numbers by 0.25  probability of the meeting, and add it to the answer.\n\nThe complexity of this solution is . We can reduce it using two pointers method.",
    "hint": []
}