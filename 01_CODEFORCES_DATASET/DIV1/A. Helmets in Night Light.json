{
    "link": "https://codeforces.com//contest/1876/problem/A",
    "problemId": "2251945",
    "problem_idx": "A",
    "shortId": "1876A",
    "contest_number": "1876",
    "problem_submissions": {
        "F": [
            227177806,
            227207094,
            227205539,
            227205151
        ],
        "E": [
            227157151,
            227151734,
            227168660,
            227172380,
            227183052,
            227309041,
            227308704,
            227174767,
            227180790,
            227181408,
            227180728,
            227180621,
            227182335,
            227260713,
            227259829,
            227186766,
            227170474,
            227321208,
            227261014
        ],
        "D": [
            227143743,
            227138577,
            227308847,
            227146942,
            227140586,
            227141511,
            227160448,
            227153072,
            227151615,
            227160275,
            227166901,
            227141697,
            227262091,
            227163246,
            227151371,
            227141424,
            227141434,
            227152662,
            227155489,
            227148839,
            227151040,
            227154461
        ],
        "C": [
            227128643,
            227130062,
            227133604,
            227130971,
            227129714,
            227144982,
            227139072,
            227133756,
            227145578,
            227141605,
            227156976,
            227263099,
            227135346,
            227132471,
            227128506,
            227133146,
            227135885,
            227135604,
            227140440,
            227137265
        ],
        "B": [
            227120010,
            227119885,
            227123059,
            227119488,
            227120157,
            227125041,
            227123945,
            227122604,
            227124586,
            227123169,
            227160403,
            227263121,
            227124143,
            227123043,
            227120364,
            227120185,
            227120687,
            227125676,
            227123006,
            227129980,
            227122132
        ],
        "A": [
            227117267,
            227116977,
            227118151,
            227116487,
            227116831,
            227118490,
            227120408,
            227118388,
            227121296,
            227117209,
            227162962,
            227263136,
            227118862,
            227118193,
            227117199,
            227115769,
            227117422,
            227121537,
            227118512,
            227124495,
            227116510
        ],
        "G": [
            227270487,
            229852864,
            229527555
        ]
    },
    "name": "A. Helmets in Night Light",
    "statement": "Pak Chanek is the chief of a village named Khuntien. On one night filled\r\nwith lights, Pak Chanek has a sudden and important announcement that\r\nneeds to be notified to all of the n residents in Khuntien.First, Pak\r\nChanek shares the announcement directly to one or more residents with a\r\ncost of p for each person. After that, the residents can share the\r\nannouncement to other residents using a magical helmet-shaped device.\r\nHowever, there is a cost for using the helmet-shaped device. For each i,\r\nif the i-th resident has got the announcement at least once (either\r\ndirectly from Pak Chanek or from another resident), he/she can share the\r\nannouncement to at most a_i other residents with a cost of b_i .If Pak\r\nChanek can also control how the residents share the announcement to\r\nother residents, what is the minimum cost for Pak Chanek to notify all n\r\nresidents of Khuntien about the announcement?\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC target (\"avx2\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=1000*1007;\n\nint n;\nll p;\n\npll tab[nax];\n\nvoid test()\n{\n\tscanf(\"%d%lld\", &n, &p);\n\tfor (int i=1; i<=n; i++)\n\t\tscanf(\"%lld\", &tab[i].second);\n\tfor (int i=1; i<=n; i++)\n\t\tscanf(\"%lld\", &tab[i].first);\n\tfor (int i=1; i<=n; i++)\n\t\ttab[i].first=min(tab[i].first, p);\n\tsort(tab+1, tab+1+n);\n\tll wyn=p;\n\tint wsk=1;\n\tll ile=0;\n\tfor (int i=2; i<=n; i++)\n\t{\n\t\twyn+=tab[wsk].first;\n\t\tile++;\n\t\tif (ile==tab[wsk].second)\n\t\t{\n\t\t\tile=0;\n\t\t\twsk++;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\", wyn);\n}\n\nint main()\n{\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--)\n\t\ttest();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Helmets in Night Light.json",
    "editorial_link": "https://codeforces.com//blog/entry/121200",
    "editorial": "Notice that since there are residents, there must be shares.There are\r\ntwo types of shares. A share directly by Pak Chanek to a resident, and a\r\nshare by a resident to another resident. A share by Pak Chanek is\r\nunlimited, while a share by a resident is limited by . So there are\r\nunlimited shares with cost and for each , there are shares with cost .In\r\nthe beginning, no residents are notified about the announcement, so Pak\r\nChanek must share once to some resident in the beginning.After that,\r\nsince there are residents remaining, there must be shares.\r\nTheoretically, the lowerbound of the minimum cost is the cheapest shares\r\n(including Pak Chanek\u00e2\u0080\u0099s shares). Turns out, there is always a strategy\r\nto use the cheapest shares to notify all residents after the first share\r\nby Pak Chanek.The strategy is we share the announcement to the residents\r\nwith the smallest values of first. Using the fact that , we can deduce\r\nthat we will always have a resident with an available share.We can solve\r\nthis using a simple sorting or a priority queue. Keep in mind about the\r\nunlimited shares with cost .Time complexity for each test case:\r\n"
}