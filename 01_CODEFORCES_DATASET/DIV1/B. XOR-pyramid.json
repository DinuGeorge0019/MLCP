{
    "link": "https://codeforces.com//contest/983/problem/B",
    "problemId": "183240",
    "problem_idx": "B",
    "shortId": "983B",
    "contest_number": "983",
    "problem_submissions": {
        "E": [
            38286454,
            38283020,
            38289482,
            38292735,
            38289453,
            38293779,
            38302472,
            38293561,
            38300012,
            38293577,
            38302643,
            38302639,
            38302635,
            38302629,
            38300139,
            38300133,
            38300000,
            38293677,
            38332361,
            38290750,
            38296688,
            38287165,
            38281146,
            38282245,
            38289240,
            38294540,
            38292692
        ],
        "C": [
            38282068,
            38290172,
            38281090,
            38284331,
            38284560,
            38280127,
            38285062,
            38284712,
            38287114,
            38296797,
            38287523,
            38296777,
            38305865,
            38421418,
            38281072,
            38282940
        ],
        "B": [
            38275765,
            38281040,
            38275649,
            38277253,
            38280013,
            38275961,
            38274648,
            38276342,
            38282348,
            38281288,
            38277599,
            38291629,
            38284850,
            38285475,
            38285545,
            38278223,
            38284828,
            38274818,
            38274252
        ],
        "A": [
            38273115,
            38279677,
            38273911,
            38271977,
            38277206,
            38393404,
            38274395,
            38272239,
            38278413,
            38325576,
            38319214,
            38319178,
            38319075,
            38319020,
            38318977,
            38318949,
            38318775,
            38311499,
            38311463,
            38311378,
            38273182,
            38332311,
            38276058,
            38279900,
            38288950,
            38281038,
            38282952,
            38280788,
            38276091,
            38275298,
            38271513,
            38271658
        ],
        "D": [
            38430702,
            38334183,
            38527958
        ]
    },
    "name": "B. XOR-pyramid",
    "statement": "For an array b of length m we define the function f as f(b) =\r\nbegin{cases} b[1] &\r\nquad\r\ntext{if } m = 1\r\nf(b[1]\r\noplus b[2],b[2]\r\noplus b[3],\r\ndots,b[m-1]\r\noplus b[m]) &\r\nquad\r\ntext{otherwise,}\r\nend{cases} where\r\noplus is bitwise exclusive OR.For example, f(1,2,4,8)=f(1\r\noplus2,2\r\noplus4,4\r\noplus8)=f(3,6,12)=f(3\r\noplus6,6\r\noplus12)=f(5,10)=f(5\r\noplus10)=f(15)=15You are given an array a and a few queries. Each query\r\nis represented as two integers l and r. The answer is the maximum value\r\nof f on all continuous subsegments of the array a_l, a_{l+1},\r\nldots, a_r.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define L long long\nusing namespace std;\nint n,m,x[5010],f[5010][5010];\nint main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tint i,j,k;\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++)\n\t  scanf(\"%d\",&x[i]),f[i][i]=x[i];\n\tfor(k=1;k<n;k++)\n\t  for(i=1;(j=i+k)<=n;i++)\n\t    f[i][j]=f[i][j-1]^f[i+1][j];\n\tfor(k=1;k<n;k++)\n\t  for(i=1;(j=i+k)<=n;i++)\n\t    f[i][j]=max(f[i][j],max(f[i][j-1],f[i+1][j]));\n\tscanf(\"%d\",&m);\n\twhile(m--)\n\t  {\n       scanf(\"%d%d\",&i,&j);\n       printf(\"%d\\n\",f[i][j]);\n      }\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. XOR-pyramid.json",
    "editorial_link": "https://codeforces.com//blog/entry/59484",
    "editorial": "Let\u00e2\u0080\u0099s calculate recursively and save arrays from each level of\r\nrecursion. We get two-dimencional array and . Now let\u00e2\u0080\u0099s view recursive\r\ncalculation for . You can see what array of -th level of recursion is\r\n(numbeer of levels of recursion is length of segment). To calculate\r\nmaximum of all sub-segments for each segment, replace on . Now answer of\r\nquestion is . Overall time complexity is .Solution\r\n"
}