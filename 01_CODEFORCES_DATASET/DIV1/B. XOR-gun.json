{
    "link": "https://codeforces.com//contest/1456/problem/B",
    "problemId": "814137",
    "problem_idx": "B",
    "shortId": "1456B",
    "contest_number": "1456",
    "problem_submissions": {
        "E": [
            99945782,
            99945769,
            99943961,
            99943904,
            99943880,
            99873391,
            99943557,
            99954051
        ],
        "D": [
            99891549,
            99889664,
            99863279,
            99878437,
            99869286,
            99874783,
            99874448,
            100422602,
            99869392,
            99876033,
            99880017,
            99873016,
            99879341,
            99881425,
            99901920,
            99901451,
            99880281,
            99883086,
            99883614,
            99883199,
            99862733,
            99895776,
            99881158,
            99886907
        ],
        "C": [
            99848424,
            99849677,
            99857483,
            99857864,
            99851459,
            99859071,
            100422587,
            99858400,
            99858652,
            99852406,
            99861212,
            99863136,
            99859584,
            99860765,
            99858493,
            99859743,
            99856324,
            99876682,
            99869205,
            99867241
        ],
        "B": [
            99844017,
            99851835,
            99850170,
            99846295,
            99847821,
            99846905,
            100422569,
            99849394,
            99851833,
            99847449,
            99854585,
            99849459,
            99854424,
            99841592,
            99848884,
            99849963,
            99842794,
            99879792,
            99851060,
            99853174
        ],
        "A": [
            99840628,
            99840575,
            99844401,
            99841761,
            100523512,
            99844053,
            99842901,
            100422550,
            99843639,
            99845108,
            99841813,
            99849319,
            99843116,
            99843583,
            99849152,
            99843890,
            99842869,
            99850296,
            99867700,
            99845589,
            99842066
        ]
    },
    "name": "B. XOR-gun",
    "statement": "Arkady owns a array a_1, a_2,\r\nldots, a_n. You are jealous of its beauty and want to destroy this\r\nproperty. You have a so-called that you can use one or more times.In one\r\nstep you can select two elements of the array, let\u2019s say x and y, remove\r\nthem from the array and insert the integer x\r\noplus y on their place, where\r\noplus denotes the bitwise XOR operation. Note that the length of the\r\narray decreases by one after the operation. You can\u2019t perform this\r\noperation when the length of the array reaches one.For example, if the\r\narray is [2, 5, 6, 8], you can select 5 and 6 and replace them with 5\r\noplus 6 = 3. The array becomes [2, 3, 8].You want the array no longer be\r\nnon-decreasing. What is the minimum number of steps needed? If the array\r\nstays non-decreasing no matter what you do, print -1.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nint main() {\n\tusing namespace std;\n\tios_base::sync_with_stdio(false), cin.tie(nullptr);\n\tint N; cin >> N;\n\tvector<int> A(N);\n\tfor (int i = 0; i < N; i++) {\n\t\tcin >> A[i];\n\t}\n\tvector<int> pref(N+1);\n\tfor (int i = 0; i < N; i++) {\n\t\tpref[i+1] = pref[i] ^ A[i];\n\t}\n\n\tfor (int l = 3; l <= N; l++) {\n\t\tfor (int i = 0, j = l; j <= N; i++, j++) {\n\t\t\tfor (int k = i+1; k <= j-1; k++) {\n\t\t\t\tif ((pref[k] ^ pref[i]) > (pref[j] ^ pref[k])) {\n\t\t\t\t\tcout << l-2 << '\\n';\n\t\t\t\t\texit(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcout << -1 << '\\n';\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "constructive algorithms",
        "math"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. XOR-gun.json",
    "editorial_link": "https://codeforces.com//blog/entry/85118",
    "editorial": "First let's compute array b1,b2,\u0085,bn\n, where bi\n is the index of the highest bit equal to 1\n in the binary notation of ai\n. The statement says bi?bi+1\n. These values can be computed by dividing the given numbers by 2\n until they are zero.\n\nNote that if for a given i\n the equality bi?1=bi=bi+1=t\n holds, then we can apply an operation to ai\n and ai+1\n, and the resulting integer is smaller than ai?1\n. Indeed, in ai?1\n the highest bit set is t\n, but in ai?ai+1\n the t\n-th and higher bits are zeros. That means if there is such an i\n (it is easy to check in a single linear pass), then the answer is 1\n.\n\nNow note that if there is no such i\n, then the size of the array n\n is not bigger than 2?(?log2109?+1)=60\n! Indeed, there are no more than two integers with the same highest bit set. It is much easier to solve the problem in such constraints.\n\nConsider some solution. In the final array, let's denote it as c\n, there is i\n such that ci>ci+1\n. Note that each element of the final array is equal to XOR of some subsegment of the initial array, and each element of the initial array belongs to exactly one such subsegment. Let this subsegment for ci\n be al,al+1,\u0085,am\n, and for ci+1\n be am+1,am+2,\u0085,ar\n. Then it's clear that to find an optimal solution it is enough to loop through all possible values of l\n, m\n, and r\n and check whether XOR of all elements of the left subsegment is larger than XOR of all elements of the right subsegment. If this inequality holds, update answer with value r?l?1\n. The complexity of this part is O(n3)\n or O(n4)\n depending on implementation."
}