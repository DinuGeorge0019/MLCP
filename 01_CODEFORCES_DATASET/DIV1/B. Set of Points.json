{
    "link": "https://codeforces.com//contest/277/problem/B",
    "problemId": "2668",
    "problem_idx": "B",
    "shortId": "277B",
    "contest_number": "277",
    "problem_submissions": {
        "E": [
            16290898,
            3212642,
            3214277,
            3216560,
            3217192,
            3212882,
            3213203,
            3212293,
            3216557,
            3218831,
            3213358,
            3688854,
            3214438,
            3216817,
            3212334,
            3216978,
            3215195,
            3212023,
            3214481
        ],
        "C": [
            3217751,
            3214405,
            3212237,
            3213774,
            3214065,
            3216032,
            3215933,
            3219588,
            3213776,
            3213602,
            3234441,
            3220825,
            3214706,
            3214937,
            3218190
        ],
        "D": [
            3215251,
            3217272,
            3218795,
            3236907,
            3258757
        ],
        "A": [
            3211100,
            3209085,
            3208310,
            3208691,
            3208408,
            3209073,
            3209691,
            3209304,
            3209119,
            3208608,
            3209266,
            3209939,
            3210030,
            3208575,
            3209624,
            3209909,
            3208646,
            3209846
        ],
        "B": [
            3210150,
            3226761,
            3211703,
            3216606,
            3211138,
            3211051,
            3213290,
            3212043,
            3215513,
            3212912,
            3218799,
            3212960,
            3216246
        ]
    },
    "name": "B. Set of Points",
    "statement": "Convexity of a set of points on the plane is the size of the largest\r\nsubset of points that form a convex polygon. Your task is to build a set\r\nof points with the convexity of exactly . Your set of points should not\r\ncontain three points that lie on a straight line.\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <bitset>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\nint main(void){\n    int N,M,i;\n    \n    cin >> N >> M;\n    \n    if(M == 3){\n        if(N == 3){\n            cout << 0 << ' ' << 0 << endl;\n            cout << 0 << ' ' << 1 << endl;\n            cout << 1 << ' ' << 0 << endl;\n            return 0;\n        }\n        \n        if(N == 4){\n            cout << 0 << ' ' << 0 << endl;\n            cout << 0 << ' ' << 10 << endl;\n            cout << 10 << ' ' << 0 << endl;\n            cout << 1 << ' ' << 1 << endl;\n            return 0;\n        }\n        \n        if(N >= 5){\n            cout << -1 << endl;\n            return 0;\n        }\n    }\n    \n    int X = 10000000;\n    REP(i,M) cout << i << ' ' << X+i*i << endl;\n    REP(i,N-M) cout << i << ' ' << -X-i*i << endl;\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "geometry"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Set of Points.json",
    "editorial_link": "https://codeforces.com//blog/entry/6815",
    "editorial": "For and there is no solution. Let\u00e2\u0080\u0099s learn how to construct the solution\r\nfor , where and is odd. Set up points on a circle of sufficiently large\r\nradius. This will be the inner polygon. The outer polygon will be the\r\ninner polygon multiplied by 2. More precisely (): If is even, construct\r\nthe solution for and then delete one point from each polygon. If ,\r\ndelete points from the inner polygon. Unfortunately, this solution\r\ndoesn\u00e2\u0080\u0099t work for and . Another approach is to set up points on a convex\r\nfunction (for example, ), and set up the rest points on a concave\r\nfunction (for example, ). Take a look at ng_58\u00e2\u0080\u0099s solution 3210150.\r\n"
}