{
    "link": "https://codeforces.com//contest/317/problem/B",
    "problemId": "3167",
    "problem_idx": "B",
    "shortId": "317B",
    "contest_number": "317",
    "problem_submissions": {
        "B": [
            3893431,
            3887094,
            3885846,
            3887031,
            3886538,
            3889909,
            3893582,
            3888615,
            3887617,
            3888413,
            3888179,
            3889453,
            3887116,
            3887888,
            3894545,
            3895617,
            3886384,
            3887572
        ],
        "C": [
            3892027,
            3893534,
            3892980,
            3892836,
            3889579,
            3894319,
            3891793,
            3887685,
            3891002,
            3893514,
            3895626,
            3891853,
            3895456,
            3895311,
            3890113,
            3891161,
            3891706,
            3890677
        ],
        "D": [
            3888744,
            3888593,
            3888799,
            3890273,
            3892231,
            3885265,
            3887984,
            3892250,
            3893865,
            3891338,
            3894467,
            3893215,
            3890469,
            3890547,
            3891578,
            3893589,
            3896477,
            3896297
        ],
        "A": [
            3884031,
            3884987,
            3884002,
            3884136,
            3889852,
            3886867,
            3884602,
            3891904,
            3885568,
            3884656,
            3883909,
            3885144,
            3894966,
            3884417,
            3885139
        ],
        "E": [
            3932317,
            3896465,
            3896429
        ]
    },
    "name": "B. Ants",
    "statement": "It has been noted that if some ants are put in the junctions of the\r\ngraphene integer lattice then they will act in the following fashion:\r\nevery minute at each junction (, ) containing at least four ants a group\r\nof four ants will be formed, and these four ants will scatter to the\r\nneighbouring junctions (, ), (, ), (, ), (, ) one ant in each direction.\r\nNo other ant movements will happen. Ants never interfere with each\r\nother.Scientists have put a colony of ants into the junction (0, 0) and\r\nnow they wish to know how many ants will there be at some given\r\njunctions, when the movement of the ants stops.\r\n",
    "solutions": [
        "#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstring>\n#include <cassert>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> PII;\n#define MP make_pair\n#define FOR(v,p,k) for(int v=p;v<=k;++v)\n#define FORD(v,p,k) for(int v=p;v>=k;--v)\n#define REP(i,n) for(int i=0;i<(n);++i)\n#define VAR(v,i) __typeof(i) v=(i)\n#define FORE(i,c) for(__typeof(c.begin()) i=(c.begin());i!=(c).end();++i)\n#define PB push_back\n#define ST first\n#define ND second\n#define SZ(x) (int)(x).size()\n#define ALL(c) c.begin(),c.end()\n#define ZERO(x) memset(x,0,sizeof(x))\n\nconst int A = 500;\n\nint t[1005][1005];\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    int n;\n    cin >> n;\n    t[A][A] = n;\n    int sz = 0;\n    while (true) {\n        bool ok = false;\n        for (int x = A - sz; x <= A + sz; ++x) {\n            for (int y = A - sz; y <= A + sz; ++y) {\n                if (t[x][y] >= 4) {\n                    if (max(abs(x - A), abs(y - A)) == sz) {\n                        ++sz;\n                    }\n                    ok = true;\n                    t[x - 1][y] += t[x][y] / 4;\n                    t[x + 1][y] += t[x][y] / 4;\n                    t[x][y - 1] += t[x][y] / 4;\n                    t[x][y + 1] += t[x][y] / 4;\n                    t[x][y] %= 4;\n                }\n            }\n        }\n        if (!ok) {\n            break;\n        }\n    }\n    int d;\n    cin >> d;\n    while (d--) {\n        int x, y;\n        cin >> x >> y;\n        if (max(abs(x), abs(y)) > sz) {\n            cout << 0 << \"\\n\";\n        } else {\n            cout << t[A + x][A + y  ] << \"\\n\";\n        }\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Ants.json",
    "editorial_link": "https://codeforces.com//blog/entry/7956",
    "editorial": "One may reformulate the problem ass follows. Non-negative integers A(x,?y) are placed in the vertices of two-dimensional lattice  We may imagine this construction as a function . On each step for each vertex P?=?(x,?y) with A(x,?y)???4 we perform operation ?P, which substracts 4 from A(x,?y) and adds 1 to A(x,?y?-?1), A(x,?y?+?1), A(x?-?1,?y), A(x?+?1,?y). We may think that operation ?P applies to the whole function A. We need to find values of A after the iterations stops.\n\nKey idea is that operactions ?P and ?Q for all points P and Q commutes, that is ?P(?Q(A))?=??Q(?P(A)). This means that the order of operations is unimportant. In particular, we may assume that from each given vertex run all possible four-groups of ants and not only one. After this observation one may run full emulation of the process. As an exercise contestants may check that ants will never leave square 200?Ã—?200 with center in the origin 0 with given constraints.",
    "hint": []
}