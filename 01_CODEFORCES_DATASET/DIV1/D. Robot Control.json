{
    "link": "https://codeforces.com//contest/346/problem/D",
    "problemId": "3506",
    "problem_idx": "D",
    "shortId": "346D",
    "contest_number": "346",
    "problem_submissions": {
        "D": [
            4517003,
            4516053,
            4520303,
            4518426,
            4519668,
            4519453,
            4520044,
            4520308,
            4520598,
            4519925,
            4520328,
            4536609,
            4520171
        ],
        "C": [
            4514630,
            4512046,
            4516249,
            4515877,
            4517922,
            4517089,
            4517025,
            4518644,
            4518590,
            4531944,
            4516902,
            4518219,
            4522630,
            4512654,
            4519217
        ],
        "B": [
            4513206,
            4517360,
            4514492,
            4514065,
            4515596,
            4513931,
            4513764,
            4514197,
            4516093,
            4513703,
            4523738,
            4523122,
            4518694,
            4514752
        ],
        "A": [
            4511118,
            4513688,
            4511296,
            4511103,
            4511703,
            4511202,
            4511179,
            4510998,
            4512725,
            4511681,
            4510991,
            4511097,
            4513241,
            4515270
        ],
        "E": [
            155070489,
            4717703
        ]
    },
    "name": "D. Robot Control",
    "statement": "The boss of the Company of Robot is a cruel man. His motto is \"Move\r\nforward Or Die!\". And that is exactly what his company’s product do.\r\nLook at the behavior of the company’s robot when it is walking in the\r\ndirected graph. This behavior has been called \"Three Laws of Robotics\":\r\nLaw 1. The Robot will destroy itself when it visits a vertex of the\r\ngraph which it has already visited. Law 2. The Robot will destroy itself\r\nwhen it has no way to go (that is when it reaches a vertex whose\r\nout-degree is zero). Law 3. The Robot will move randomly when it has\r\nmultiple ways to move (that is when it reach a vertex whose out-degree\r\nis more than one). Of course, the robot can move only along the directed\r\nedges of the graph. Can you imagine a robot behaving like that? That’s\r\nwhy they are sold at a very low price, just for those who are short of\r\nmoney, including mzry1992, of course. mzry1992 has such a robot, and she\r\nwants to move it from vertex to vertex in a directed graph safely\r\nwithout self-destruction. Luckily, she can send her robot special orders\r\nat each vertex. A special order shows the robot which way to move, if it\r\nhas multiple ways to move (to prevent random moving of the robot\r\naccording to Law 3). When the robot reaches vertex , mzry1992 takes it\r\noff the graph immediately. So you can see that, as long as there exists\r\na path from to , she can always find a way to reach the goal (whatever\r\nthe vertex has the outdegree of zero or not). Sample 2 However, sending\r\norders is expensive, so your task is to find the minimum number of\r\norders mzry1992 needs to send in the worst case. Please note that\r\nmzry1992 can give orders to the robot on the graph. Look at the first\r\nsample to clarify that part of the problem.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <iostream>\n#include <iomanip>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <vector>\n#include <cstdio>\n#include <cmath>\n#include <map>\n#include <set>\nusing namespace std;\n//#pragma comment(linker,\"/STACK:102400000,102400000\")\n\nint n, m;\nint OutDeg[1000001];\nvector <int> toMe[1000001];\nint S, T;\nvector <int> queue[1000001];\nint alreadyDeg[1000001];\nint minOut[1000001];\nint ans;\n\nint MAIN()\n{\n\tcin >> n >> m;\n\tmemset(OutDeg, 0, sizeof(OutDeg));\n\tmemset(alreadyDeg, 0, sizeof(alreadyDeg));\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint a, b;\n\t\tcin >> a >> b;\n\t\tOutDeg[a] ++;\n\t\ttoMe[b].push_back(a);\n\t}\n\tcin >> S >> T;\n\tans = 100000000;\n\tqueue[0].push_back(T);\n\tfor(int i = 0; i <= n; i++)\n\t{\n\t\tvector <int> waiting;\n\n\t\tfor(int j = 0; j < queue[i].size(); j++)\n\t\t{\n\t\t\tint v = queue[i][j];\n\t\t\t//cout << \"i = \" << i << \", v = \" << v << endl;\n\t\t\tif(v == S)\n\t\t\t\tans = i;\n\t\t\tfor(int k = 0; k < toMe[v].size(); k++)\n\t\t\t{\n\t\t\t\tint u = toMe[v][k];\n\n\t\t\t\tif(alreadyDeg[u] == OutDeg[u])\n\t\t\t\t\tcontinue;\n\t\t\t\tif(alreadyDeg[u] == 0)\n\t\t\t\t{\n\t\t\t\t\talreadyDeg[u] ++;\n\t\t\t\t\tminOut[u] = i;\n\t\t\t\t}\n\t\t\t\telse if(minOut[u] == i)\n\t\t\t\t\talreadyDeg[u] ++;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tminOut[u] ++;\n\t\t\t\t\talreadyDeg[u] = OutDeg[u];\n\t\t\t\t}\n\t\t\t\tif(alreadyDeg[u] == OutDeg[u])\n\t\t\t\t\tqueue[minOut[u]].push_back(u);\n\t\t\t\telse\n\t\t\t\t\twaiting.push_back(u);\n\t\t\t}\n\t\t}\n\n\t\tfor(int k = 0; k < waiting.size(); k++)\n\t\t{\n\t\t\tint u = waiting[k];\n\n\t\t\tif(OutDeg[u] != alreadyDeg[u])\n\t\t\t{\n\t\t\t\talreadyDeg[u] = OutDeg[u];\n\t\t\t\tminOut[u] ++;\n\t\t\t\tqueue[minOut[u]].push_back(u);\n\t\t\t}\n\t\t}\n\t}\n\tif(ans <= n)\n\t\tcout << ans << endl;\n\telse\n\t\tcout << -1 << endl;\n\treturn 0;\n}\n\nint main()\n{\n\t#ifdef LOCAL_TEST\n\t\tfreopen(\"in.txt\", \"r\", stdin);\n\t\tfreopen(\"out.txt\", \"w\", stdout);\n\t#endif\n\tios :: sync_with_stdio(false);\n\tcout << fixed << setprecision(16);\n\treturn MAIN();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "graphs",
        "shortest paths"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Robot Control.json",
    "editorial_link": "https://codeforces.com//blog/entry/8903",
    "editorial": "Let's dp from t to s.\n\ndp[u] = min(min(dp[v]) + 1 , max(dp[v])) | u->v\n\nHere dp[u] means, the minimum number of orders mzry1992 needs to send in the worst case. The left-hand-side is sending order while the right-hand side is not. At the beginning, we have dp[t] = 1, and dp[s] will be the answer.\n\nWe can see there is circular dependence in this equation, in this situation, one standard method is using Bellman-Ford algorithm to evaluate the dp function.\n\nBut it is not appropriate for this problem.\n\n(In fact, we add a part of targeted datas in pretest, these datas are enough to block most of our Bellman-Ford algorithm, although there is still a few participator can get accepted by Bellman-Ford algorithm during the contest.\n\nCheck rares.buhai's solution\n\ndp[u] = min(min(dp[v]) + 1 , max(dp[v])) | u->v\n\nThe expected solution is evaluating the dp function as the increased value of dp[u] itself. Further analysis shows, wheather we decided sending order or not in u can be judged as the out-degree of u.",
    "hint": []
}