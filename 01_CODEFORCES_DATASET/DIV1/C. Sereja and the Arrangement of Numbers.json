{
    "link": "https://codeforces.com//contest/367/problem/C",
    "problemId": "4098",
    "problem_idx": "C",
    "shortId": "367C",
    "contest_number": "367",
    "problem_submissions": {
        "A": [
            5253633,
            5248539,
            5245621,
            5246967,
            5245187,
            5245239,
            5244912,
            5260352,
            5248460,
            5246717,
            5247161,
            5247626,
            5250480,
            5245644,
            5245467,
            5248078
        ],
        "D": [
            5251109,
            5249684,
            5251377,
            5253799,
            5250841,
            5254107,
            5254017,
            5254422,
            5250750,
            5253666,
            5254820,
            5253839,
            5253605,
            5254366,
            5255055,
            5254149
        ],
        "E": [
            5249574,
            5253117,
            5253114,
            5256266,
            5249949,
            5258981,
            5256724,
            5261975,
            5266872,
            5268278,
            5260869
        ],
        "B": [
            5248117,
            5245452,
            5253998,
            5248352,
            5248954,
            5247801,
            5248088,
            5250697,
            5246678,
            5248495,
            5245796,
            5247335,
            5247628,
            5249396,
            5248757,
            5249320
        ],
        "C": [
            5246223,
            5247815,
            5247820,
            5249874,
            5249775,
            5249473,
            5249680,
            5248776,
            5247935,
            5249664,
            5249146,
            5249197,
            5249315,
            5250702,
            5250582,
            5251144
        ]
    },
    "name": "C. Sereja and the Arrangement of Numbers",
    "statement": "Let’s call an array consisting of integer numbers , , , , if it has the\r\nfollowing property: consider all pairs of numbers , such that number\r\noccurs in the array and number occurs in the array ; for each pair must\r\nexist some position , such that at least one of the two conditions are\r\nmet, either , or . Sereja wants to build a beautiful array , consisting\r\nof integers. But not everything is so easy, Sereja’s friend Dima has\r\ncoupons, each contains two integers . Coupon costs and allows you to use\r\nas many numbers as you want when constructing the array . Values are\r\ndistinct. Sereja has no coupons, so Dima and Sereja have made the\r\nfollowing deal. Dima builds some beautiful array of elements. After that\r\nhe takes rubles from Sereja for each , which occurs in the array .\r\nSereja believed his friend and agreed to the contract, and now he is\r\nwondering, what is the maximum amount of money he can pay.Help Sereja,\r\nfind the maximum amount of money he can pay to Dima.\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <bitset>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\ntypedef long long ll;\n\nll func(ll n){\n    ll ans = n * (n - 1) / 2;\n    if(n % 2 == 1) ans++; else ans += n / 2;\n    return ans;\n}\n\nint q[100010],w[100010];\n\nint main(void){\n    int i;\n    \n//  for(i=1;i<=10;i++) cout << i << ' ' << func(i) << endl;\n    \n    int n,m;\n    cin >> n >> m;\n    REP(i,m) scanf(\"%d%d\", &q[i], &w[i]);\n    sort(w, w+m);\n    reverse(w, w+m);\n    \n    while(func(m) > n) m--;\n    ll ans = 0;\n    REP(i,m) ans += w[i];\n    cout << ans << endl;\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "greedy",
        "sortings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Sereja and the Arrangement of Numbers.json",
    "editorial_link": "https://codeforces.com//blog/entry/9726",
    "editorial": "Clear that we need to collect as many of the most expensive properties\r\nthat would have been possible to build the array. Note that having\r\nnumbers, we have = binding ties. See that this is a graph in which to do\r\nEuler path, adding as little as possible edges. For everything is clear,\r\nand for , you need to add an additional rib. Why? This is your homework\r\n:) The detailed explanation can be found here.\r\n",
    "hint": []
}