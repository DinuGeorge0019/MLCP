{"link": "https://codeforces.com//contest/536/problem/A", "problemId": "26042", "problem_idx": "A", "shortId": "536A", "contest_number": "536", "problem_submissions": {"A": [10719921, 10706737, 10707689, 10711529, 10709676, 10707375, 10709573, 10707885, 10708720, 10706564, 10708318, 10709355, 10713459, 10725217, 10725216, 10725186, 10708292, 10706905, 10741377, 10713738], "B": [10718101, 10710644, 10709758, 10712675, 10707296, 10709351, 10713281, 10710208, 10710709, 10710095, 10711429, 10711411, 10707838, 10710289, 10713790, 10709325, 10709558], "E": [10716637, 10733077, 10733033, 10731562, 10741189], "C": [10709726, 10713480, 10715583, 10715941, 10717945, 10721487, 10717235, 10716651, 10717759, 10716150, 10716761, 10720841, 10718866], "D": [10717797, 10717420, 10719832, 10715603, 10716972, 10718818, 10719396, 10719946, 10724775, 10717671]}, "name": "A. Tavas and Karafs", "statement": "Each Karafs has a positive integer height. Tavas has an infinite\r\nsequence of Karafses. The height of the -th Karafs is .For a given ,\r\nlet\u2019s define an -bite operation as decreasing the height of at most\r\ndistinct not eaten Karafses by 1. Karafs is considered as eaten when its\r\nheight becomes zero.Now SaDDas asks you queries. In each query he gives\r\nyou numbers , and and you should find the largest number such that and\r\nsequence can be eaten or print -1 if there is no such number .\r\n", "solutions": ["#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<iostream>\n#include<cstdlib>\n#include<vector>\n#include<string>\n#include<queue>\n#include<map>\ntypedef long long ll;\n#define mo 1000000007\nint A,B,q;\n\nll su(ll l,ll r){\n    ll x1=A+(l-1)*B,x2=A+(r-1)*B;\n    return 1ll*(x1+x2)*(r-l+1)/2;\n}\nll x(ll i){\n    return A+(i-1)*B;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&A,&B,&q);\n    while(q--){\n        int l,t,m;\n        scanf(\"%d%d%d\",&l,&t,&m);\n        int lef=l,rig=l+t+5,mid;\n        while(lef<=rig){\n            mid=lef+rig>>1;\n            if(x(mid)<=t && su(l,mid)<=1ll*t*m)lef=mid+1;\n            else rig=mid-1;\n        }\n        if(rig==l-1)printf(\"-1\\n\");\n        else printf(\"%d\\n\",rig);\n    }\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "greedy", "math"], "dificulty": "1900", "interactive": false}