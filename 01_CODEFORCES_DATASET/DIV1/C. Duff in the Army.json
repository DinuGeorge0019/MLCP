{
    "link": "https://codeforces.com//contest/587/problem/C",
    "problemId": "38260",
    "problem_idx": "C",
    "shortId": "587C",
    "contest_number": "587",
    "problem_submissions": {
        "B": [
            13648546,
            13631319,
            13641731,
            13630364,
            13633855,
            13635275,
            13633091,
            13631092,
            13632489,
            13636118,
            13634961,
            13633410,
            13637437,
            13631295,
            13631061,
            13631176,
            13632360,
            13636955,
            13631513,
            13651693
        ],
        "F": [
            13647165,
            15306413,
            17349765,
            13654656
        ],
        "E": [
            13635518,
            13645026,
            13634711,
            13645375,
            13645998,
            13646627,
            13648041,
            13649025,
            13654642,
            13649552,
            13647771,
            13647562,
            13649838,
            13647318,
            13650802,
            13654796,
            13653392,
            13655928
        ],
        "A": [
            13627098,
            13626726,
            13642310,
            13627311,
            13628719,
            13627650,
            13627049,
            13626772,
            13626754,
            13627918,
            13626713,
            13628042,
            13629897,
            13626736,
            13627142,
            13626620,
            13626815,
            13629767,
            13626766,
            13627175
        ],
        "C": [
            13638605,
            13644702,
            13638823,
            13638488,
            13639824,
            13640040,
            13637207,
            13636153,
            13640829,
            13642556,
            13639860,
            13642332,
            13636367,
            13653829,
            13637091,
            13635819,
            13636868,
            13633329,
            13636406,
            13632991
        ],
        "D": [
            16774884,
            14175098,
            13654446,
            13648717
        ]
    },
    "name": "C. Duff in the Army",
    "statement": "Recently Duff has been a soldier in the army. Malek is her\r\ncommander.Their country, Andarz Gu has cities (numbered from to ) and\r\nbidirectional roads. Each road connects two different cities. There\r\nexist a unique path between any two cities.There are also people living\r\nin Andarz Gu (numbered from to ). Each person has and ID number. ID\r\nnumber of person is and he/she lives in city number . Note that there\r\nmay be more than one person in a city, also there may be no people\r\nliving in the city. Malek loves to order. That\u2019s why he asks Duff to\r\nanswer to queries. In each query, he gives her numbers and .To answer a\r\nquery:Assume there are people living in the cities lying on the path\r\nfrom city to city . Assume these people\u2019s IDs are in increasing order.\r\nIf , then Duff should tell Malek numbers in this order. In the other\r\nwords, Malek wants to know minimums on that path (or less, if there are\r\nless than people).Duff is very busy at the moment, so she asked you to\r\nhelp her and answer the queries.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <fstream>\n#include <cstdlib>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <numeric>\n\n#define mp make_pair\n#define mt make_tuple\n#define fi first\n#define se second\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#define rall(x) (x).rbegin(), (x).rend()\n#define forn(i, n) for (int i = 0; i < (int)(n); ++i)\n#define for1(i, n) for (int i = 1; i <= (int)(n); ++i)\n#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)\n#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)\n\nusing namespace std;\n\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<pii> vpi;\ntypedef vector<vi> vvi;\ntypedef long long i64;\ntypedef vector<i64> vi64;\ntypedef vector<vi64> vvi64;\n\ntemplate<class T> bool uin(T &a, T b) { return a > b ? (a = b, true) : false; }\ntemplate<class T> bool uax(T &a, T b) { return a < b ? (a = b, true) : false; }\n\nconst int MAXN = 100001, LOG = 17;\nvi e[MAXN];\nint up[LOG + 1][MAXN];\nint h[MAXN];\nvi x[LOG + 1][MAXN];\n\nvoid dfs(int v, int p) {\n    up[0][v] = p;\n    for (int u: e[v]) {\n        if (u == p) continue;\n        h[u] = h[v] + 1;\n        dfs(u, v);\n    }\n}\n\nint jmp(int v, int d) {\n    ford(i, LOG) {\n        if ((1 << i) <= d) {\n            v = up[i][v];\n            d -= 1 << i;\n        }\n    }\n    return v;\n}\n\nint lca(int u, int v) {\n    if (h[u] < h[v]) swap(u, v);\n    u = jmp(u, h[u] - h[v]);\n    if (u == v) return u;\n    ford(i, LOG) {\n        int uu = up[i][u], vv = up[i][v];\n        if (uu != vv) u = uu, v = vv;\n    }\n    return up[0][u];\n}\n\nvi merg(const vi &a, const vi &b, int A) {\n    vi v;\n    int i = 0, j = 0;\n    while (i < a.size() && j < b.size() && v.size() < A) {\n        if (a[i] == b[j]) {\n            v.pb(a[i]);\n            ++i; ++j;\n            continue;\n        }\n        if (a[i] < b[j]) v.pb(a[i++]);\n        else v.pb(b[j++]);\n    }\n    while (i < a.size() && v.size() < A) v.pb(a[i++]);\n    while (j < b.size() && v.size() < A) v.pb(b[j++]);\n    return v;\n}\n\nvoid upq(int v, int d, int a, vector<vi *> &res) {\n//    vi res;\n    ford(i, LOG) {\n        if ((1 << i) <= d) {\n            res.pb(&x[i][v]);\n            v = up[i][v];\n            d -= 1 << i;\n        }\n    }\n//    return res;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.precision(10);\n    cout << fixed;\n#ifdef LOCAL_DEFINE\n    freopen(\"input.txt\", \"rt\", stdin);\n#endif\n\n    int N, M, Q;\n//    cin >> N >> M >> Q; \n    scanf(\"%d%d%d\", &N, &M, &Q);\n    forn(i, N - 1) {\n        int x, y;\n//        cin >> x >> y;\n        scanf(\"%d%d\", &x, &y);\n        --x; --y;\n        e[x].pb(y);\n        e[y].pb(x);\n    }\n    forn(i, M) {\n        int v;\n//        cin >> v;\n        scanf(\"%d\", &v);\n        --v;\n        x[0][v].pb(i);\n    }\n    forn(i, N) {\n        sort(all(x[0][i]));\n        if (x[0][i].size() > 10) x[0][i].resize(10);\n    }\n    dfs(0, 0);\n    forn(i, LOG) forn(j, N) {\n        up[i + 1][j] = up[i][up[i][j]];\n        x[i + 1][j] = merg(x[i][j], x[i][up[i][j]], 10);\n    }\n    cerr << \"built\\n\";\n    forn(q, Q) {\n        int u, v, a;\n//        cin >> u >> v >> a;\n        scanf(\"%d%d%d\", &u, &v, &a);\n        --u; --v;\n        int w = lca(u, v);\n        vector<vi*> res;\n        upq(u, h[u] - h[w] + 1, a, res);\n        upq(v, h[v] - h[w], a, res);\n        vi ans;\n        vi ind(res.size());\n        set<pii> s;\n        forn(i, res.size()) {\n            if (!res[i]->empty()) s.insert(mp((*res[i])[0], i));\n        }\n        while (!s.empty() && ans.size() < a) {\n            int x = s.begin()->fi, j = s.begin()->se;\n            //if (ans.empty() || ans.back() != x) ans.pb(x);\n            ans.pb(x);\n            s.erase(s.begin());\n            ++ind[j];\n            if (ind[j] < res[j]->size()) s.insert(mp((*res[j])[ind[j]], j));\n        }\n        printf(\"%d\", (int)ans.size());\n        for (int x: ans) printf(\" %d\", x + 1);\n        printf(\"\\n\");\n    }\n\n#ifdef LOCAL_DEFINE\n    cerr << \"Time elapsed: \" << 1.0 * clock() / CLOCKS_PER_SEC << \" s.\\n\";\n#endif\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "trees"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Duff in the Army.json",
    "editorial_link": "https://codeforces.com//blog/entry/20971",
    "editorial": "For each 1???i???n and 0???j???lg(n), store the minimum 10 people in the path from city (vertex) i to its 2j?-?th parent in an array.\n\nNow everything is needed is: how to merge the array of two paths? You can keep the these 10 values in the array in increasing order and for merging, use merge function which will work in . And then delete the extra values (more than 10).\n\nAnd do the same as described in the article for a query (just like the preprocess part)."
}