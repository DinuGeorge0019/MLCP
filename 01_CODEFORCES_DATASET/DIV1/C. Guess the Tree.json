{"link": "https://codeforces.com//contest/429/problem/C", "problemId": "9404", "problem_idx": "C", "shortId": "429C", "contest_number": "429", "problem_submissions": {"E": [6595809, 6600093, 6592978, 6601793, 6652557, 6599111, 6619551, 6619545, 6597254, 6597744], "C": [6593728, 6600070, 6592280, 6592740, 6600977, 6600868, 6594386, 6592397, 6594791, 6593656, 6596025, 6593807, 6593862, 6598107, 6594449, 6598559, 6594937, 6592148, 6594524, 6592432, 6594909, 6590473], "D": [6591664, 6600092, 6591240, 6590624, 6590639, 6591834, 6591461, 6591644, 6590500, 6592190, 6591828, 6591578, 6591777, 6592587, 27994201, 6591983, 6594641, 6604627, 6593023, 6594793, 6591937, 6593041], "B": [6589690, 6600091, 6589488, 6589367, 6588962, 6590036, 6588367, 6590786, 6591308, 6589466, 6590642, 6589551, 6589761, 6589966, 6589108, 6590082, 6589028, 6590294, 6589190, 6595125], "A": [6588164, 6600088, 6588109, 6588114, 6588105, 6588288, 6588966, 6588346, 6592136, 6588117, 6588421, 6588130, 6588989, 6588112, 27994125, 6589842, 6588200, 6588169, 6588529, 6590124, 6593587]}, "name": "C. Guess the Tree", "statement": "Iahub and Iahubina went to a picnic in a forest full of trees. Less than\r\n5 minutes passed before Iahub remembered of trees from programming.\r\nMoreover, he invented a new problem and Iahubina has to solve it,\r\notherwise Iahub won\u2019t give her the food. Iahub asks Iahubina: can you\r\nbuild a rooted tree, such that each internal node (a node with at least\r\none son) has at least two sons; node has nodes in its subtree? Iahubina\r\nhas to guess the tree. Being a smart girl, she realized that it\u2019s\r\npossible no tree can follow Iahub\u2019s restrictions. In this way, Iahub\r\nwill eat all the food. You need to help Iahubina: determine if there\u2019s\r\nat least one tree following Iahub\u2019s restrictions. .\r\n", "solutions": ["#pragma comment(linker, \"/STACK:60000000\")\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <ctime>\n#include <cstring>\n#include <cassert>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <queue>\n#include <functional>\n\nusing namespace std;\n\n#define forn(i, n) for(int i = 0; i < (int)(n); i++)\n#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)\n#define pb push_back\n#define mp make_pair\n#define fs first\n#define sc second\n#define last(a) int(a.size() - 1)\n#define all(a) a.begin(), a.end()\n#define seta(a,x) memset (a, x, sizeof (a))\n#define I (int)\n#define next NEXTHUI\n#define prev PREVHUI\n#define y1 Y1HUI\n\ntypedef long long int64;\ntypedef pair <int, int> pii;\ntypedef long double ldb;\n\nconst long double eps = 1e-9;\nconst int inf = (1 << 30) - 1;\nconst int64 inf64 = ((int64)1 << 62) - 1;\nconst long double pi = 3.1415926535897932384626433832795;\n\ntemplate <class T> T sqr (T x) {return x * x;}\n\nint n;\nint s[25];\nint need[25], has[25];\n\nvoid answer(string s) {\n\tcout << s << endl;\n\texit(0);\n}\n\nvoid go(int num, int k) {\n\tif (k == n) {\n\t\tforn(i, n)\n\t\t\tif (has[i] != need[i]) return;\n\t\tanswer(\"YES\");\n\t\treturn;\n\t}\n\twhile (s[num] == 0)\n\t\tnum--;\n\thas[k] = 1;\n\tneed[k] = num;\n\tforn(i, k)\n\t\tif (num + 1 < need[i] && has[i] + num <= need[i]) {\n\t\t\thas[i] += num;\n\t\t\ts[num]--;\n\t\t\tgo(num, k + 1);\n\t\t\thas[i] -= num;\n\t\t\ts[num]++;\n\t\t\tif (num == 1) break;\n\t\t}\n}\n\nint main ()\n{\n//\tfreopen (\"input.txt\", \"r\", stdin);\n//\tfreopen (\"output.txt\", \"w\", stdout);\n\tseta(s, 0);\n\tcin >> n;\n\tforn(i, n) {\n\t\tint x;\n\t\tcin >> x;\n\t\ts[x]++;\n\t}\n\tif (s[n] != 1) answer(\"NO\");\n\tif (s[1] * 2 <= n) answer(\"NO\");\n\tneed[0] = n;\n\thas[0] = 1;\n\tgo(n-1, 1);\n\tanswer(\"NO\");\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["bitmasks", "constructive algorithms", "dp", "greedy", "trees"], "dificulty": "2300", "interactive": false}