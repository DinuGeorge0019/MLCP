{
    "link": "https://codeforces.com//contest/429/problem/C",
    "problemId": "9404",
    "problem_idx": "C",
    "shortId": "429C",
    "contest_number": "429",
    "problem_submissions": {
        "E": [
            6595809,
            6600093,
            6592978,
            6601793,
            6652557,
            6599111,
            6619551,
            6619545,
            6597254,
            6597744
        ],
        "C": [
            6593728,
            6600070,
            6592280,
            6592740,
            6600977,
            6600868,
            6594386,
            6592397,
            6594791,
            6593656,
            6596025,
            6593807,
            6593862,
            6598107,
            6594449,
            6598559,
            6594937,
            6592148,
            6594524,
            6592432,
            6594909,
            6590473
        ],
        "D": [
            6591664,
            6600092,
            6591240,
            6590624,
            6590639,
            6591834,
            6591461,
            6591644,
            6590500,
            6592190,
            6591828,
            6591578,
            6591777,
            6592587,
            27994201,
            6591983,
            6594641,
            6604627,
            6593023,
            6594793,
            6591937,
            6593041
        ],
        "B": [
            6589690,
            6600091,
            6589488,
            6589367,
            6588962,
            6590036,
            6588367,
            6590786,
            6591308,
            6589466,
            6590642,
            6589551,
            6589761,
            6589966,
            6589108,
            6590082,
            6589028,
            6590294,
            6589190,
            6595125
        ],
        "A": [
            6588164,
            6600088,
            6588109,
            6588114,
            6588105,
            6588288,
            6588966,
            6588346,
            6592136,
            6588117,
            6588421,
            6588130,
            6588989,
            6588112,
            27994125,
            6589842,
            6588200,
            6588169,
            6588529,
            6590124,
            6593587
        ]
    },
    "name": "C. Guess the Tree",
    "statement": "Iahub and Iahubina went to a picnic in a forest full of trees. Less than\r\n5 minutes passed before Iahub remembered of trees from programming.\r\nMoreover, he invented a new problem and Iahubina has to solve it,\r\notherwise Iahub won’t give her the food. Iahub asks Iahubina: can you\r\nbuild a rooted tree, such that each internal node (a node with at least\r\none son) has at least two sons; node has nodes in its subtree? Iahubina\r\nhas to guess the tree. Being a smart girl, she realized that it’s\r\npossible no tree can follow Iahub’s restrictions. In this way, Iahub\r\nwill eat all the food. You need to help Iahubina: determine if there’s\r\nat least one tree following Iahub’s restrictions. .\r\n",
    "solutions": [
        "#pragma comment(linker, \"/STACK:60000000\")\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <ctime>\n#include <cstring>\n#include <cassert>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <queue>\n#include <functional>\n\nusing namespace std;\n\n#define forn(i, n) for(int i = 0; i < (int)(n); i++)\n#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)\n#define pb push_back\n#define mp make_pair\n#define fs first\n#define sc second\n#define last(a) int(a.size() - 1)\n#define all(a) a.begin(), a.end()\n#define seta(a,x) memset (a, x, sizeof (a))\n#define I (int)\n#define next NEXTHUI\n#define prev PREVHUI\n#define y1 Y1HUI\n\ntypedef long long int64;\ntypedef pair <int, int> pii;\ntypedef long double ldb;\n\nconst long double eps = 1e-9;\nconst int inf = (1 << 30) - 1;\nconst int64 inf64 = ((int64)1 << 62) - 1;\nconst long double pi = 3.1415926535897932384626433832795;\n\ntemplate <class T> T sqr (T x) {return x * x;}\n\nint n;\nint s[25];\nint need[25], has[25];\n\nvoid answer(string s) {\n\tcout << s << endl;\n\texit(0);\n}\n\nvoid go(int num, int k) {\n\tif (k == n) {\n\t\tforn(i, n)\n\t\t\tif (has[i] != need[i]) return;\n\t\tanswer(\"YES\");\n\t\treturn;\n\t}\n\twhile (s[num] == 0)\n\t\tnum--;\n\thas[k] = 1;\n\tneed[k] = num;\n\tforn(i, k)\n\t\tif (num + 1 < need[i] && has[i] + num <= need[i]) {\n\t\t\thas[i] += num;\n\t\t\ts[num]--;\n\t\t\tgo(num, k + 1);\n\t\t\thas[i] -= num;\n\t\t\ts[num]++;\n\t\t\tif (num == 1) break;\n\t\t}\n}\n\nint main ()\n{\n//\tfreopen (\"input.txt\", \"r\", stdin);\n//\tfreopen (\"output.txt\", \"w\", stdout);\n\tseta(s, 0);\n\tcin >> n;\n\tforn(i, n) {\n\t\tint x;\n\t\tcin >> x;\n\t\ts[x]++;\n\t}\n\tif (s[n] != 1) answer(\"NO\");\n\tif (s[1] * 2 <= n) answer(\"NO\");\n\tneed[0] = n;\n\thas[0] = 1;\n\tgo(n-1, 1);\n\tanswer(\"NO\");\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "dp",
        "greedy",
        "trees"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Guess the Tree.json",
    "editorial_link": "https://codeforces.com//blog/entry/12265",
    "editorial": "The constrain n <= 24 immediately suggest us an exponential solution. 24\r\nnumbers seems to be not too big, but also not too small. What if we can\r\nreduce it by half? We can do this, by analyzing problem s restriction\r\nmore carefully. The problem states that each internal node has at least\r\ntwo sons. After drawing some trees likes these, one may notice there are\r\na lot of leafs in them. For a tree with this property, number of leafs\r\nis at least (n + 1) / 2. We ll proof this affirmation by mathematical\r\ninduction. For n = 1, affirmation is true. Now, suppose our tree has n\r\nnodes, and the root of it has sons {s1, s2, ..., sk}. Let s assume\r\nsubtree of s1 has n1 nodes, subtree of s2 has n2 nodes, ..., subtree of\r\nsk has nk nodes. By induction we get that s1 has at least (n1 + 1) / 2\r\nleafs, ..., sk has at least (nk + 1) / 2 leafs. Summing up, we get that\r\nour tree has at least (n1 + n2 + ... + nk + k) / 2 leafs. But n1 + n2 +\r\n... + nk = n 1. So it has at least (n + k 1) / 2 leafs. But, by\r\nhypothesis k >= 2, so our tree has at least (n + 1) / 2 leafs. For n =\r\n24, there will be at least 13 leafs, so at most 11 internal nodes. It\r\nlooks much better now for an exponential solution! Before presenting it,\r\nwe need one more observation. Suppose we sorted c[] array decreasing.\r\nNow, the father of node i can be only one of nodes {1, 2, ..., i 1}.\r\nNodes {i + 1, i + 2, ..., n} will have at most as much nodes as node i,\r\nso they can t be father of i. By doing this observation we can start\r\nalgorithm: start with node 1 and assign its sons. Then, move to node 2.\r\nIf it does not have a father, we won t have one, so current\r\nconfiguration is good. If he has a father (in this case node 1), then\r\ntree is connected so far. So we can assign children of node 2.\r\nGenerally, if a node i does not have a father when it s processed, it\r\nwon t have in future either. If it has, the tree is connected so far, so\r\nwe add children of i. Let s introduce the following dynamic programming.\r\nLet dp[node][mask][leafs] = is it possible to create a tree if all nodes\r\n{1, 2, ..., node} have already a father, exactly leafs nodes don t have\r\none and internal nodes corresponding to 1 in bitmask mask also don t\r\nhave one? If you never heart about bitmask word, this problem is not\r\ngood for you to start with. I recommend you problem E from round 191,\r\nwhere I explained more how bitmasks work. Back on the problem. If node\r\nhas 1 in its bit from the mask, then we know for sure the tree can t be\r\nbuilt. Otherwise, let s assign sons for node. We take all submasks of\r\nmask (number obtained by changing some bits from 1 to 0) and make sum of\r\ndegrees for corresponding nodes. Denote this number as S. These are the\r\ninternal nodes. How about the leafs? We need to have available L =\r\nc[node] S 1 leafs. If L is <= than leafs, we can use them. If L < 0,\r\nobviously we can t build the tree. Will remain obviously leafs L leafs.\r\nThe new mask will be mask ^ submask. Also, we need to iterate to\r\nnode + 1. If dp[node+1][mask ^ submask][leafs L]. One more condition\r\nthat needs to be considered: node needs to have at least 2 sons. This\r\nmeans L + cnt > 1 (where cnt are number of internal nodes used). When do\r\nwe stop the dp? When c[nod] = 1. If mask = 0 and leafs = 0, then we can\r\nbuild the tree. Otherwise, we can t. Let s analyze the complexity. There\r\nare O(2 ^ (n / 2)) masks, each of them has O(n) leafs, for each O(n)\r\nnode. This gives O(2 ^ (n / 2) * n ^ 2) states. Apparently, iterating\r\nover all submasks gives O(2 ^ (n / 2)) time for each submask, so overall\r\ncomplexity should be O(4 ^ (n / 2) * n ^ 2). But this complexity is over\r\nrated. Taking all submasks for all masks takes O(3 ^ (n / 2)) time,\r\ninstead of O(4 ^ (n / 2)) time. Why? Consider numbers written in base 3:\r\nfor a mask and a submask we can assign 3 ternary digits to each bit: 0\r\nif bit does not appear in mask 1 if bit appears in mask but not in\r\nsubmask 2 if bit appears in mask and in submask Obviously, there are O(3\r\n^ (n / 2)) numbers like this and the two problems are equivalent, so\r\nthis step takes O(3 ^ (n / 2)) and overall complexity is O(3 ^ (n / 2) *\r\nn ^ 2).\r\n",
    "hint": []
}