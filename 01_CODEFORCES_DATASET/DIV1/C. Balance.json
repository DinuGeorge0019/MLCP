{
    "link": "https://codeforces.com//contest/317/problem/C",
    "problemId": "3168",
    "problem_idx": "C",
    "shortId": "317C",
    "contest_number": "317",
    "problem_submissions": {
        "B": [
            3893431,
            3887094,
            3885846,
            3887031,
            3886538,
            3889909,
            3893582,
            3888615,
            3887617,
            3888413,
            3888179,
            3889453,
            3887116,
            3887888,
            3894545,
            3895617,
            3886384,
            3887572
        ],
        "C": [
            3892027,
            3893534,
            3892980,
            3892836,
            3889579,
            3894319,
            3891793,
            3887685,
            3891002,
            3893514,
            3895626,
            3891853,
            3895456,
            3895311,
            3890113,
            3891161,
            3891706,
            3890677
        ],
        "D": [
            3888744,
            3888593,
            3888799,
            3890273,
            3892231,
            3885265,
            3887984,
            3892250,
            3893865,
            3891338,
            3894467,
            3893215,
            3890469,
            3890547,
            3891578,
            3893589,
            3896477,
            3896297
        ],
        "A": [
            3884031,
            3884987,
            3884002,
            3884136,
            3889852,
            3886867,
            3884602,
            3891904,
            3885568,
            3884656,
            3883909,
            3885144,
            3894966,
            3884417,
            3885139
        ],
        "E": [
            3932317,
            3896465,
            3896429
        ]
    },
    "name": "C. Balance",
    "statement": "A system of vessels with water is given. Several pairs of vessels are\r\nconnected by tubes with transfusion mechanisms. One may transfer an\r\ninteger amount of liters of water between two vessels connected by such\r\ntube (tube works in both directions). There might be multiple tubes\r\nbetween two vessels. Total number of tubes equals . Volume of each\r\nvessel equals liters. Of course, the amount of the water in any vessel\r\ncannot exceed liters in the process of transfusions.Given the initial\r\namounts of water in the vessels and the desired amounts find a sequence\r\nof transfusions that deals with the task. Total number of transfusions\r\nmust not exceed .\r\n",
    "solutions": [
        "#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstring>\n#include <cassert>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> PII;\n#define MP make_pair\n#define FOR(v,p,k) for(int v=p;v<=k;++v)\n#define FORD(v,p,k) for(int v=p;v>=k;--v)\n#define REP(i,n) for(int i=0;i<(n);++i)\n#define VAR(v,i) __typeof(i) v=(i)\n#define FORE(i,c) for(__typeof(c.begin()) i=(c.begin());i!=(c).end();++i)\n#define PB push_back\n#define ST first\n#define ND second\n#define SZ(x) (int)(x).size()\n#define ALL(c) c.begin(),c.end()\n#define ZERO(x) memset(x,0,sizeof(x))\n\nint sk[305];\n\nLL sum_sk[305];\n\nbool is_path[305][305];\nint nx[305][305];\n\nint current[305];\nint desired[305];\n\nint n, volume, m;\n\nvector<int> x;\nvector<int> y;\nvector<int> d;\n\nvoid dom(int a, int b, int c) {\n    x.PB(a);\n    y.PB(b);\n    d.PB(c);\n    current[a] -= c;\n    current[b] += c;\n}\n\nvoid move(vector<int>& v, int l, int r, int val) {\n    if (l + 1 == r) {\n        dom(v[l], v[r], val);\n        return;\n    }\n    if (current[v[r - 1]] >= val) {\n        dom(v[r - 1], v[r], val);\n        move(v, l, r - 1, val);\n    } else {\n        dom(v[r - 1], v[r], current[v[r - 1]]);\n        move(v, l, r - 1, val);\n        dom(v[r - 1], v[r], val - desired[v[r - 1]]);\n    }\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin >> n >> volume >> m;\n    for (int i = 1; i <= n; ++i) {\n        cin >> current[i];\n    }\n    for (int i = 1; i <= n; ++i) {\n        cin >> desired[i];\n    }\n    for (int i = 1; i <= n; ++i) {\n        is_path[i][i] = true;\n    }\n    memset(nx, -1, sizeof(nx));\n    for (int i = 1; i <= m; ++i) {\n        int x, y;\n        cin >> x >> y;\n        is_path[x][y] = true;\n        nx[x][y] = y;\n        is_path[y][x] = true;\n        nx[y][x] = x;\n    }\n    for (int k = 1; k <= n; ++k) {\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 1; j <= n; ++j) {\n                if (!is_path[i][j] && is_path[i][k] && is_path[k][j]) {\n                    is_path[i][j] = true;\n                    nx[i][j] = nx[i][k];\n                }\n            }\n        }\n    }\n    for (int i = 1; i <= n; ++i) {\n        sk[i] = 1;\n        while (!is_path[i][sk[i]]) {\n            ++sk[i];\n        }\n        sum_sk[sk[i]] += current[i] - desired[i];\n    }\n    for (int i = 1; i <= n; ++i) {\n        if (sum_sk[i] != 0) {\n            cout << \"NO\" << endl;\n            return 0;\n        }\n    }\n    while (true) {\n        int l = 1;\n        while (l <= n && current[l] <= desired[l]) {\n            ++l;\n        }\n        if (l > n) {\n            break;\n        }\n        int r = 1;\n        while (!is_path[l][r] || current[r] >= desired[r]) {\n            ++r;\n        }\n        vector<int> path;\n        for (int c = l; c != -1; c = nx[c][r]) {\n            path.PB(c);\n        }\n        for (int i = (int) path.size() - 1; ; --i) {\n            if (current[path[i]] > desired[path[i]]) {\n                l = i;\n                break;\n            }\n        }\n        for (int i = l; ; ++i) {\n            if (current[path[i]] < desired[path[i]]) {\n                r = i;\n                break;\n            }\n        }\n        int transferred = min(current[path[l]] - desired[path[l]], desired[path[r]] - current[path[r]]);\n        move(path, l, r, transferred);\n    }\n    cout << x.size() << endl;\n    for (int i = 0; i < (int) x.size(); ++i) {\n        cout << x[i] << \" \" << y[i] << \" \" << d[i] << \"\\n\";\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "trees"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Balance.json",
    "editorial_link": "https://codeforces.com//blog/entry/7956",
    "editorial": "In this problem we need to find 2n2 transfusions from initial configuration to the desired one. First of all we propose the following: if in each connected component overall volume of the water in initial configuration is the same as in desired one, then answer exist. We call the vessel ready, if current volume of its water equals desired one. Let us describe solution which is probably easier to code. We will make vessels ready one by one. Consider the pair of non-ready vessels s and t (there is more water in s than desired, and less water in t than desired), such that they are connected by the path P, and if one transfuses d litres from s to t then one of the vessels becomes ready. Now we need to find a way to transfuse d litres by path P from s to t. One may write recursive function pour(s, t, d) for this aim. Let t' stand before t in this path, then function works as follows: transfuses from t' to t as many water as possible (not more than d of course), then calls pour(s, t', d) and on the final step transfuses from t' to t all that left. It is easy to check that all such transfusions are correct. This algorithm makes 2len transfusions on the path of length len, so total number of transfusions is not greater than 2n2."
}