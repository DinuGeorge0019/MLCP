{
    "link": "https://codeforces.com//contest/1710/problem/C",
    "problemId": "1478269",
    "problem_idx": "C",
    "shortId": "1710C",
    "contest_number": "1710",
    "problem_submissions": {
        "D": [
            165580964,
            165583659,
            165582423,
            165579985,
            165578292,
            165621030,
            165665623,
            165863180,
            165686266,
            165622179,
            253472539,
            253472055,
            253196732
        ],
        "C": [
            165561993,
            165571937,
            165567266,
            165564305,
            165560493,
            165557009,
            165565561,
            165573369,
            167610382,
            165564040,
            165565611,
            165559918,
            165863165,
            165574164,
            165561713,
            165562795,
            166635016,
            165567222,
            165574139,
            165575303,
            165568215,
            165580670,
            165575504
        ],
        "B": [
            165557184,
            165556433,
            165562218,
            165559397,
            165550455,
            165567723,
            165557989,
            165562869,
            167610352,
            165552192,
            165580788,
            165551441,
            165863147,
            165568559,
            165640205,
            165639837,
            165621062,
            165556086,
            165556541,
            167747535,
            165575476,
            165569308,
            165567541,
            165555460,
            165570664,
            165584416
        ],
        "E": [
            165552045,
            165543060,
            165549416,
            165565765,
            165563275,
            165541229,
            165548123,
            165548892,
            165559843,
            165548838,
            165565641,
            165863198,
            165549459,
            165565050,
            165564177,
            166635025,
            165555617,
            165553406,
            165554497,
            165569888,
            165555183,
            165548602
        ],
        "A": [
            165540652,
            165547446,
            165541424,
            165545863,
            165540100,
            165538811,
            165546951,
            165544526,
            167610720,
            167610305,
            165540896,
            165542843,
            165539482,
            165863070,
            165547951,
            165543234,
            165543554,
            165541413,
            165551173,
            165542506,
            165539602,
            165547656,
            165544347
        ]
    },
    "name": "C. XOR Triangle",
    "statement": "You are given a positive integer n. Since n may be very large, you are\r\ngiven its binary representation.You should compute the number of triples\r\n(a,b,c) with 0\r\nleq a,b,c\r\nleq n such that a\r\noplus b, b\r\noplus c, and a\r\noplus c are the sides of a non-degenerate triangle. Here,\r\noplus denotes the bitwise XOR operation.You should output the answer\r\nmodulo 998\r\n,244\r\n,353.Three positive values x, y, and z are the sides of a non-degenerate\r\ntriangle if and only if x+y>z, x+z>y, and y+z>x.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst int maxn=222222,mod=998244353;\n#define fi first\n#define se second\n#define MP make_pair\n#define PB push_back\n#define lson o<<1,l,mid\n#define rson o<<1|1,mid+1,r\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define ROF(i,a,b) for(int i=(a);i>=(b);i--)\n#define MEM(x,v) memset(x,v,sizeof(x))\ninline ll read(){\n\tchar ch=getchar();ll x=0,f=0;\n\twhile(ch<'0' || ch>'9') f|=ch=='-',ch=getchar();\n\twhile(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn f?-x:x;\n}\ninline int qpow(int a,int b){\n\tint ans=1;\n\tfor(;b;b>>=1,a=1ll*a*a%mod) if(b&1) ans=1ll*ans*a%mod;\n\treturn ans;\n}\nint n,f[maxn][8][8],a[maxn];\nchar s[maxn];\nint main(){\n\tscanf(\"%s\",s+1);\n\tn=strlen(s+1);\n\tFOR(i,1,n) a[i]=s[i]-'0';\n\tf[0][7][7]=1;\n\tFOR(i,0,n-1) FOR(j,0,7) FOR(k,0,7) if(f[i][j][k]){\n\t\tint x=(j&1)?a[i+1]:1,y=(j&2)?a[i+1]:1,z=(j&4)?a[i+1]:1;\n\t\tFOR(p,0,x) FOR(q,0,y) FOR(r,0,z){\n\t\t\tint jj=j,kk=k;\n\t\t\tif(p!=x) jj&=~1;\n\t\t\tif(q!=y) jj&=~2;\n\t\t\tif(r!=z) jj&=~4;\n\t\t\tint pp=p^q,qq=q^r,rr=p^r;\n\t\t\tif(pp&qq) kk&=~1;\n\t\t\tif(qq&rr) kk&=~2;\n\t\t\tif(pp&rr) kk&=~4;\n\t\t\tf[i+1][jj][kk]=(f[i+1][jj][kk]+f[i][j][k])%mod;\n\t\t}\n\t}\n\tint ans=0;\n\tFOR(i,0,7) ans=(ans+f[n][i][0])%mod;\n\tprintf(\"%d\\n\",ans);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "constructive algorithms",
        "dp",
        "greedy",
        "math"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. XOR Triangle.json",
    "editorial_link": "https://codeforces.com//blog/entry/105232",
    "editorial": "Define cnti1i2i3\n as:\n\nj\nth bit of cnti1i2i3\n is 1\n iif i1=aj,i2=bj,i3=cj\n\ne.g. a=(10)2,b=(11)2,c=(01)2\n then cnt110=(10)2,cnt011=(01)2\n, other cnt\n is 0.\n\na=cnt100+cnt101+cnt110+cnt111\n\nb=cnt010+cnt011+cnt110+cnt111\n\nc=cnt001+cnt011+cnt101+cnt111\n\na?b=cnt010+cnt011+cnt100+cnt101\n\na?c=cnt001+cnt011+cnt100+cnt110\n\nb?c=cnt001+cnt010+cnt101+cnt110\n\na?b+a?c>b?c?cnt011+cnt100>0\n\nsimilar:\n\ncnt101+cnt010>0\n\ncnt110+cnt001>0\n\nthen we use digit dp: dp[n][i][j]\n means when we consider first n\n bits, state of reaching the upper bound is i\n, state of conditions is j\n.\n\nEnumerate ajbjcj\n for j\n from |n|?1\n to 0\n and make transition.\n\nTime complexity is O(29|n|)\n where |n|\n is the length of input."
}