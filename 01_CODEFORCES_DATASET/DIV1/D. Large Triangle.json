{
    "link": "https://codeforces.com//contest/1019/problem/D",
    "problemId": "207016",
    "problem_idx": "D",
    "shortId": "1019D",
    "contest_number": "1019",
    "problem_submissions": {
        "D": [
            41494541,
            41486235,
            41489624,
            41496428,
            41482324,
            41485058,
            41485821,
            41503084,
            41488961,
            41490515,
            41488550,
            41488663,
            41486677,
            41490916,
            41491659,
            41491114,
            41488916,
            41491612,
            41493392
        ],
        "C": [
            41485063,
            41566656,
            41496194,
            41491682,
            41552113,
            41499582,
            41487460,
            41530705,
            41652339,
            205457358
        ],
        "A": [
            41477821,
            41473071,
            41475477,
            41477205,
            41474279,
            41472040,
            41473278,
            41472687,
            41471212,
            41472351,
            41478347,
            41474071,
            41472848,
            41472443,
            41471416,
            41473130,
            41524142,
            41480834,
            41476724,
            41472604
        ],
        "B": [
            41472593,
            41477785,
            41479330,
            41486699,
            41478688,
            41476845,
            41477610,
            41476296,
            41475985,
            41478284,
            41482245,
            41489236,
            41477340,
            41477044,
            41480533,
            41484731,
            41486696,
            41478640
        ],
        "E": [
            41541275,
            41536720,
            41496541,
            41519405,
            41505368,
            41533475
        ]
    },
    "name": "D. Large Triangle",
    "statement": "There is a strange peculiarity: if you connect the cities of Rostov,\r\nTaganrog and Shakhty, peculiarly, you get a triangle Unbelievable But\r\nTrue Students from many different parts of Russia and abroad come to\r\nSummer Informatics School. You marked the hometowns of the SIS\r\nparticipants on a map.Now you decided to prepare an interesting\r\ninfographic based on this map. The first thing you chose to do is to\r\nfind three cities on this map, such that they form a triangle with area\r\nS.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n#define PB push_back\n#define MP make_pair\n#define LL long long\n#define int LL\n#define FOR(i,a,b) for(int i = (a); i <= (b); i++)\n#define RE(i,n) FOR(i,1,n)\n#define REP(i,n) FOR(i,0,(int)(n)-1)\n#define R(i,n) REP(i,n)\n#define VI vector<int>\n#define PII pair<int,int>\n#define LD long double\n#define FI first\n#define SE second\n#define st FI\n#define nd SE\n#define ALL(x) (x).begin(), (x).end()\n#define SZ(x) ((int)(x).size())\n\ntemplate<class C> void mini(C &a4, C b4) { a4 = min(a4, b4); }\ntemplate<class C> void maxi(C &a4, C b4) { a4 = max(a4, b4); }\n\ntemplate<class TH> void _dbg(const char *sdbg, TH h){ cerr<<sdbg<<'='<<h<<endl; }\ntemplate<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a) {\n  while(*sdbg!=',')cerr<<*sdbg++;\n  cerr<<'='<<h<<','; _dbg(sdbg+1, a...);\n}\n\ntemplate<class T> ostream &operator<<(ostream& os, vector<T> V) {\n  os << \"[\"; for (auto vv : V) os << vv << \",\"; return os << \"]\";\n}\ntemplate<class L, class R> ostream &operator<<(ostream &os, pair<L,R> P) {\n  return os << \"(\" << P.st << \",\" << P.nd << \")\";\n}\n\n#ifdef LOCAL\n#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)\n#else\n#define debug(...) (__VA_ARGS__)\n#define cerr if(0)cout\n#endif\n\nconst int MAX = 2010;\nint n,S;\nstruct odc{\n  int x,y;\n  int a,b;\n};\nvector<odc> t; \nint x[MAX],y[MAX];\nvector<int> pts;\nvector<int> gd;\nvoid pri(int v){\n  cout << x[v] << \" \" << y[v] << \"\\n\";\n}\nint spr(int a,int b,int c){\n  int area = abs((x[b] - x[a]) * (y[c] - y[a]) -\n                 (x[c] - x[a]) * (y[b] - y[a]));\n  if(area == S){\n    cout << \"Yes\\n\";\n    pri(a);\n    pri(b);\n    pri(c);\n    exit(0);\n  }\n  return area < S;\n}\nvoid szu(int a,int b,int po,int ko){\n  while(abs(po - ko) != 1){\n    int m = (po + ko) / 2;\n    if(spr(a,b,pts[m])){\n      ko = m;\n    }else{\n      po = m;\n    }\n  }\n}\nint32_t main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(11);\n  cerr << fixed << setprecision(6);\n  cin >> n >> S;S*=2;\n  pts.resize(n);\n  gd.resize(n);\n  R(i,n){\n    pts[i] = i;\n    cin >> x[i] >> y[i];\n  }\n  sort(ALL(pts), [](int a,int b){\n    if(x[a] != x[b])\n      return x[a] < x[b];\n    return y[a] < y[b];\n  });\n  R(i,n){\n    gd[pts[i]] = i;\n  }\n  R(i,n)R(j,i){\n    odc pom{x[i] - x[j],y[i] - y[j], j, i};\n    if(pom.x < 0 || (pom.x == 0 && pom.y < 0)){\n      pom.x *= -1;\n      pom.y *= -1;\n      swap(pom.a,pom.b);\n    }\n    t.PB(pom);\n  }\n  sort(ALL(t),[](const odc& a,const odc& b){\n    return a.x * b.y < a.y * b.x;\n  });\n  for(auto el:t){\n    szu(el.a,el.b,-1,gd[el.a]);\n    szu(el.a,el.b,n,gd[el.b]);\n    assert(gd[el.a] + 1 == gd[el.b]);\n    swap(gd[el.a], gd[el.b]);\n    pts[gd[el.a]] = el.a;\n    pts[gd[el.b]] = el.b;\n  }\n  cout << \"No\\n\";\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "geometry",
        "sortings"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Large Triangle.json",
    "editorial_link": "https://codeforces.com//blog/entry/61161",
    "editorial": "Letâs fix one of edge of the triangle. We need to find a third point so\r\nthe area of triangle is equal to . Notice that area of triangle is\r\nproportional to scalar product of the normal vector to the chosen edge\r\nand radius-vector of third point. So, if we had all other points sorted\r\nby scalar product with normal to the edge, we could find the third point\r\nby binary search. It is the main goal of the solution.There are\r\ninteresting directions two normal vectors to each of edges, defined by\r\nall pairs of points. For each pair of points you can see that for some\r\ndirections one of points has larger scalar product with this direction,\r\nand for some other direction another point has larger scalar product. We\r\ncan see that points and have the same scalar product with vector with\r\nnormal vector edge defined by these two points. If you look at all\r\ndirections on unit circle, this vector and the opposite vector change\r\nthe order of points and in sorted order by scalar product. Also, as\r\nthere are no three points lying on one line, these two points will be\r\nneighboring in sorting order by this direction.So, we can maintain the\r\nsorting order. Letâs take all events on unit circle as all vectors of\r\ntype , and for every such event swap two neighboring points and in\r\nsorting order. After swap we can do a binary search for third point to\r\nfind a required triangle with area . This works in time.\r\n",
    "hint": []
}