{
    "link": "https://codeforces.com//contest/341/problem/A",
    "problemId": "3422",
    "problem_idx": "A",
    "shortId": "341A",
    "contest_number": "341",
    "problem_submissions": {
        "D": [
            4376750,
            4378780,
            4376395,
            4376720,
            4378230,
            4379371,
            4379846,
            4378978,
            4379778,
            4378578,
            4381466,
            4381249,
            4379639,
            4434623,
            4381692,
            4380681,
            4380927,
            4380941,
            4449185,
            4374777
        ],
        "C": [
            4375168,
            4374068,
            4379294,
            4375659,
            4375652,
            4375871,
            4375036,
            4378006,
            4374746,
            4375347,
            4374858,
            4376054,
            4375611,
            4377642,
            4376535,
            4378502,
            4380054,
            4385371
        ],
        "B": [
            4372755,
            4372469,
            4374229,
            4375035,
            4374390,
            4374268,
            4379570,
            4373332,
            4379590,
            4372609,
            4373078,
            4372906,
            4373853,
            4373520,
            4374372,
            4374299,
            4376277,
            4376672
        ],
        "A": [
            4372149,
            4371769,
            4372926,
            4372916,
            4383777,
            4373604,
            4372813,
            4371963,
            4372756,
            4380996,
            4371671,
            4372384,
            4372154,
            4458518,
            4372373,
            4372183,
            4373535,
            4372955,
            4378126,
            4376128
        ],
        "E": [
            4404432,
            4383929,
            4395989,
            4381763
        ]
    },
    "name": "A. Tourist Problem",
    "statement": "Iahub is a big fan of tourists. He wants to become a tourist himself, so\r\nhe planned a trip. There are destinations on a straight road that Iahub\r\nwants to visit. Iahub starts the excursion from kilometer 0. The\r\ndestinations are described by a non-negative integers sequence , , ...,\r\n. The number represents that the th destination is at distance\r\nkilometers from the starting point. No two destinations are located in\r\nthe same place. Iahub wants to visit each destination only once. Note\r\nthat, crossing through a destination is not considered visiting, unless\r\nIahub explicitly wants to visit it at that point. Also, after Iahub\r\nvisits his last destination, he doesn\u2019t come back to kilometer 0, as he\r\nstops his trip at the last destination. The distance between destination\r\nlocated at kilometer and next destination, located at kilometer , is\r\nkilometers. We call a \"route\" an order of visiting the destinations.\r\nIahub can visit destinations in any order he wants, as long as he visits\r\nall destinations and he doesn\u2019t visit a destination more than once.\r\nIahub starts writing out on a paper all possible routes and for each of\r\nthem, he notes the total distance he would walk. He\u2019s interested in the\r\naverage number of kilometers he would walk by choosing a route. As he\r\ngot bored of writing out all the routes, he asks you to help him.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <cmath>\n#include <ctime>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <queue>\n#include <deque>\n#include <list>\n#include <set>\n#include <map>\n\nusing namespace std;\n\n#define pb push_back\n#define mp make_pair\n#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#define sz(x) ((int)(x).size())\n\ntypedef long long ll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<int, int> pii;\n\nll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }\n\nint main() {\n  #ifdef DEBUG\n  freopen(\".in\", \"r\", stdin);\n  freopen(\".out\", \"w\", stdout);\n  #endif\n\n  int n;\n  while (scanf(\"%d\", &n) >= 1) {\n    vi as(n);\n    for (int i = 0; i < n; i++)\n      scanf(\"%d\", &as[i]);\n    sort(as.begin(), as.end());\n\n    ll suml = 0, sumr = 0;\n    for (int i = 0; i < n; i++) sumr += as[i];\n\n    ll ans = 0;\n    for (int i = 0; i < n; i++) {\n      sumr -= as[i];\n\n      ll sumLen = 0;\n      sumLen += sumr - ll(n - i - 1) * as[i];\n      sumLen += ll(i) * as[i] - suml;\n//      eprintf(\"%I64d (%I64d %I64d)\\n\", sumLen, suml, sumr);\n      ans += sumLen;\n\n      suml += as[i];\n    }\n//    eprintf(\"%I64d %I64d\\n\", ans, ansb);\n    for (int i = 0; i < n; i++)\n      ans += as[i];\n    ll ansb = n;\n    ll x = gcd(ans, ansb);\n    ans /= x;\n    ansb /= x;\n    printf(\"%I64d %I64d\\n\", ans, ansb);\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Tourist Problem.json",
    "editorial_link": "https://codeforces.com/blog/entry/8755",
    "editorial": "Despite this is a math task, the only math formula we'll use is that number of permutations with n elements is n!. From this one, we can deduce the whole task.\n\nThe average formula is sum_of_all_routes / number_of_routes. As each route is a permutation with n elements, number_of_routes is n!. Next suppose you have a permutation of a: p1, p2, \u0085, pn. The sum for it will be p1 + |p2 \u0096 p1| + \u0085 + |pn \u0096 pn-1|. The sum of routes will be the sum for each possible permutation.\n\nWe can calculate sum_of_all routes in two steps: first time we calculate sums like \u0093p1\u0094 and then we calculate sums like \u0093|p2 \u0096 p1| + \u0085 + |pn \u0096 pn-1|\u0094 for every existing permutation.\n\nFirst step Each element of a1, a2, \u0085, an can appear on the first position on the routes and needs to be added as much as it appears. Suppose I fixed an element X for the first position. I can fill positions 2, 3, .., n \u0096 1 in (n \u0096 1)! ways. Why? It is equivalent to permuting n \u0096 1 elements (all elements except X). So sum_of_all = a1 * (n \u0096 1)! + a2 * (n \u0096 1)! + \u0085 * an * (n \u0096 1)! = (n \u0096 1)! * (a1 + a2 + \u0085 + an).\n\nSecond step For each permutation, for each position j between 1 and n \u0096 1 we need to compute |pj \u0097 p(j?+?1)|. Similarly to first step, we observe that only elements from a can appear on consecutive positions. We fix 2 indices i and j. We\u0092re interested in how many permutations do ai appear before aj. We fix k such as on a permutation p, ai appears on position k and aj appears on a position k + 1. In how many ways can we fix this? n \u0096 1 ways (1, 2, \u0085, n \u0096 1). What\u0092s left? A sequence of (n \u0096 2) elements which can be permuted independently. So the sum of second step is |ai?-?aj| * (n \u0096 1) * (n \u0096 2)!, for each i != j. If I note (a1 + a2 + \u0085 + an) by S1 and |ai?-?aj| for each i != j by S2, the answer is (N \u0096 1)! * S1 + (N \u0096 1)! * S2 / N!. By a simplification, the answer is (S1 + S2) / N.\n\nThe only problem remained is how to calculate S2. Simple iteration won\u0092t enter in time limit. Let\u0092s think different. For each element, I need to make sum of differences between it and all smaller elements in the array a. As well, I need to make sum of all different between bigger elements than it and it. I\u0092ll focus on the first part. I sort increasing array a. Suppose I\u0092m at position i. I know that (i \u0096 1) elements are smaller than ai. The difference is simply (i \u0097 1) * ai \u0097 sum_of_elements_before_position_i. Sum of elements before position i can be computed when iterating i. Let\u0092s call the obtained sum Sleft. I need to calculate now sum of all differences between an element and bigger elements than it. This sum is equal to Sleft. As a proof, for an element ai, calculating the difference aj \u0097 ai when aj > ai is equivalent to calculating differences between aj and a smaller element of it (in this case ai). That\u0092s why Sleft = Sright.\n\nAs a conclusion, the answer is (S1 + 2 * Sleft) / N. For make fraction irreducible, you can use Euclid's algorithm. The complexity of the presented algorithm is O(N?*?logN), necessary due of sorting. Sorting can be implemented by count sort as well, having a complexity of O(maximalValue), but this is not necessary."
}