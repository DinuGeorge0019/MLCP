{
    "link": "https://codeforces.com//contest/1815/problem/D",
    "problemId": "1871722",
    "problem_idx": "D",
    "shortId": "1815D",
    "contest_number": "1815",
    "problem_submissions": {
        "F": [
            201555670,
            201558612,
            201561386,
            201567730,
            201566757,
            202046482,
            201726445,
            201935453,
            201585873
        ],
        "E": [
            201530172,
            201528832,
            201551207,
            201544435,
            201543833,
            201554402,
            201555894,
            201557703,
            201554929,
            201556101,
            201557247,
            201555003,
            201557950,
            201556139,
            201563294,
            201546853,
            201542261,
            201546492,
            201570815
        ],
        "D": [
            201513083,
            201506968,
            201521370,
            201517487,
            201522017,
            201533871,
            201533067,
            201531357,
            201527346,
            201537489,
            201539887,
            201539975,
            201543678,
            201546232,
            201566677,
            201568923,
            201534451
        ],
        "C": [
            201497483,
            201499771,
            201506268,
            201502220,
            201510933,
            201510356,
            201506402,
            201517502,
            201515562,
            201517401,
            201523915,
            201524806,
            201533994,
            201523878,
            201503778,
            201512320,
            201510486,
            201513744
        ],
        "B": [
            201489690,
            201490417,
            201495395,
            201494655,
            201496814,
            201493671,
            201494756,
            201502664,
            201501592,
            201503253,
            201515920,
            201510149,
            201510749,
            201492437,
            201503376,
            201496616,
            201500693
        ],
        "A": [
            201483243,
            201480897,
            201480866,
            201480768,
            201483195,
            201480859,
            201480836,
            201481081,
            201480782,
            201481965,
            201483607,
            201482857,
            201481459,
            201480707,
            201481969,
            201481110,
            201483462
        ]
    },
    "name": "D. XOR Counting",
    "statement": "Given two positive integers n and m. Find the sum of all possible values\r\nof a_1\r\nbigoplus a_2\r\nbigoplus\r\nldots\r\nbigoplus a_m, where a_1,a_2,\r\nldots,a_m are non-negative integers such that a_1+a_2+\r\nldots+a_m=n.Note that all possible values a_1\r\nbigoplus a_2\r\nbigoplus\r\nldots\r\nbigoplus a_m should be counted in the sum .As the answer may be too\r\nlarge, output your answer modulo 998244353.Here,\r\nbigoplus denotes the bitwise XOR operation.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 09.04.2023 11:16:04       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\ntemplate <typename T>\nT inverse(T a, T m) {\n  T u = 0, v = 1;\n  while (a != 0) {\n    T t = m / a;\n    m -= t * a; swap(a, m);\n    u -= t * v; swap(u, v);\n  }\n  assert(m == 1);\n  return u;\n}\n\ntemplate <typename T>\nclass Modular {\n public:\n  using Type = typename decay<decltype(T::value)>::type;\n\n  constexpr Modular() : value() {}\n  template <typename U>\n  Modular(const U& x) {\n    value = normalize(x);\n  }\n\n  template <typename U>\n  static Type normalize(const U& x) {\n    Type v;\n    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);\n    else v = static_cast<Type>(x % mod());\n    if (v < 0) v += mod();\n    return v;\n  }\n\n  const Type& operator()() const { return value; }\n  template <typename U>\n  explicit operator U() const { return static_cast<U>(value); }\n  constexpr static Type mod() { return T::value; }\n\n  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }\n  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }\n  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }\n  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }\n  Modular& operator++() { return *this += 1; }\n  Modular& operator--() { return *this -= 1; }\n  Modular operator++(int) { Modular result(*this); *this += 1; return result; }\n  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }\n  Modular operator-() const { return Modular(-value); }\n\n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {\n#ifdef _WIN32\n    uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);\n    uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;\n    asm(\n      \"divl %4; \\n\\t\"\n      : \"=a\" (d), \"=d\" (m)\n      : \"d\" (xh), \"a\" (xl), \"r\" (mod())\n    );\n    value = m;\n#else\n    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));\n#endif\n    return *this;\n  }\n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, long long>::value, Modular>::type& operator*=(const Modular& rhs) {\n    long long q = static_cast<long long>(static_cast<long double>(value) * rhs.value / mod());\n    value = normalize(value * rhs.value - q * mod());\n    return *this;\n  }\n  template <typename U = T>\n  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {\n    value = normalize(value * rhs.value);\n    return *this;\n  }\n\n  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }\n\n  friend const Type& abs(const Modular& x) { return x.value; }\n\n  template <typename U>\n  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);\n\n  template <typename U>\n  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);\n\n  template <typename V, typename U>\n  friend V& operator>>(V& stream, Modular<U>& number);\n\n private:\n  Type value;\n};\n\ntemplate <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }\ntemplate <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }\ntemplate <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }\n\ntemplate <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\n\ntemplate <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }\n\ntemplate <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\n\ntemplate <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\n\ntemplate <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\n\ntemplate <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\n\ntemplate<typename T, typename U>\nModular<T> power(const Modular<T>& a, const U& b) {\n  assert(b >= 0);\n  Modular<T> x = a, res = 1;\n  U p = b;\n  while (p > 0) {\n    if (p & 1) res *= x;\n    x *= x;\n    p >>= 1;\n  }\n  return res;\n}\n\ntemplate <typename T>\nbool IsZero(const Modular<T>& number) {\n  return number() == 0;\n}\n\ntemplate <typename T>\nstring to_string(const Modular<T>& number) {\n  return to_string(number());\n}\n\n// U == std::ostream? but done this way because of fastoutput\ntemplate <typename U, typename T>\nU& operator<<(U& stream, const Modular<T>& number) {\n  return stream << number();\n}\n\n// U == std::istream? but done this way because of fastinput\ntemplate <typename U, typename T>\nU& operator>>(U& stream, Modular<T>& number) {\n  typename common_type<typename Modular<T>::Type, long long>::type x;\n  stream >> x;\n  number.value = Modular<T>::normalize(x);\n  return stream;\n}\n\n/*\nusing ModType = int;\n\nstruct VarMod { static ModType value; };\nModType VarMod::value;\nModType& md = VarMod::value;\nusing Mint = Modular<VarMod>;\n*/\n\nconstexpr int md = 998244353;\nusing Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;\n\n/*vector<Mint> fact(1, 1);\nvector<Mint> inv_fact(1, 1);\n\nMint C(int n, int k) {\n  if (k < 0 || k > n) {\n    return 0;\n  }\n  while ((int) fact.size() < n + 1) {\n    fact.push_back(fact.back() * (int) fact.size());\n    inv_fact.push_back(1 / fact.back());\n  }\n  return fact[n] * inv_fact[k] * inv_fact[n - k];\n}*/\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    long long n;\n    int m;\n    cin >> n >> m;\n    if (m == 1) {\n      cout << Mint(n) << '\\n';\n      continue;\n    }\n    if (m > 2) {\n      if (n % 2 == 1) {\n        cout << Mint(n + 1) * Mint(n + 1) / 4 << '\\n';\n      } else {\n        cout << Mint(n) * Mint(n + 2) / 4 << '\\n';\n      }\n      continue;\n    }\n    vector<vector<Mint>> cnt(2, vector<Mint>(2));\n    vector<vector<Mint>> sum(2, vector<Mint>(2));\n    cnt[0][0] = 1;\n    for (int pos = 0; pos < 63; pos++) {\n      vector<vector<Mint>> new_cnt(2, vector<Mint>(2));\n      vector<vector<Mint>> new_sum(2, vector<Mint>(2));\n      int bit = (int) ((n >> pos) & 1);\n      for (int c = 0; c < 2; c++) {\n        for (int p = 0; p < 2; p++) {\n          for (int a = 0; a < 2; a++) {\n            if (pos == 0 && a != n % 2) {\n              continue;\n            }\n            int na = bit - a - c;\n            int nc = 0;\n            if (na < 0) {\n              na += 2;\n              nc = 1;\n            }\n            if (na == 1 && p == 1) {\n              continue;\n            }\n            new_cnt[nc][a] += cnt[c][p];\n            new_sum[nc][a] += sum[c][p] + cnt[c][p] * a * Mint(1LL << pos);\n          }\n        }\n      }\n      swap(cnt, new_cnt);\n      swap(sum, new_sum);\n    }\n    cout << sum[0][0] << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "combinatorics",
        "dp",
        "math"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. XOR Counting.json",
    "editorial_link": "https://codeforces.com//blog/entry/114899",
    "editorial": "Editorial If , it is clear that we only can have so the answer is .If ,\ngives a xor of , so all with the same parity as and at most can be\nachieved. Notice xor and sum are identical in terms of parity, and . So\nthese restrict that only values of that has same parity with and is at\nmost is possible as a result of the xor. Therefore, we can use to\ncalculate the sum of all non-negative integers at most and have same\nparity as .It remains to handle the case when . We create the functions\nand , where is the sum of all possible values of the xor and counts the\nnumber of all possible values of the xor. We then consider the\nfollowing:If is odd, then one of is even and the other is odd. WLOG\nassume is even and is odd. Then we let and . We can see that and . Hence\nwe know that , and .If is even, there are two cases. If and are both\neven, we let and . We can see that and . If and are both odd, we let and\n. We can see that and . Hence we know that , and . So we can simply DP.\nIt can be seen that the time complexity is per test case, so we are\ndone.\n"
}