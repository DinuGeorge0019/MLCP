{
    "link": "https://codeforces.com//contest/1887/problem/B",
    "problemId": "2278998",
    "problem_idx": "B",
    "shortId": "1887B",
    "contest_number": "1887",
    "problem_submissions": {
        "F": [
            229268085,
            229284035,
            229267071,
            229288213,
            229337643,
            229337387,
            229279061,
            229293399,
            229278730,
            229369273
        ],
        "E": [
            229253684,
            229249394,
            229294341,
            229258494,
            229338891,
            229258700,
            229275116,
            229278155,
            229250811,
            229297774,
            229297309,
            229282242,
            229283031,
            229282090,
            229282378,
            229286467,
            229267304,
            229286116,
            229271763,
            229270583,
            229329580,
            229283920
        ],
        "D": [
            229234655,
            229233555,
            229233641,
            229232712,
            229245990,
            229235831,
            229244954,
            229260058,
            229227922,
            229264964,
            229263601,
            229262619,
            229264376,
            229257713,
            229260427,
            229286289,
            229259421,
            229255789,
            229242200
        ],
        "C": [
            229225852,
            229226994,
            229224941,
            229350172,
            229237731,
            229225395,
            229233603,
            229237191,
            229279756,
            229270695,
            229241111,
            229246450,
            229246617,
            229251201,
            229242629,
            229237936,
            229246963,
            229224946,
            229244776,
            229494537,
            229293735
        ],
        "B": [
            229219341,
            229218026,
            229215277,
            229224722,
            229339363,
            229339262,
            229339141,
            229221501,
            229217084,
            229218884,
            229227598,
            229211736,
            229227850,
            229229211,
            229230972,
            229210296,
            229231115,
            229228032,
            229227594,
            229234703,
            229369549,
            229231109,
            229226253
        ],
        "A2": [
            229211901,
            229206611,
            229205624,
            229212250,
            229211246,
            229243386,
            229208241,
            229214123,
            229256240,
            229230513,
            229220464,
            229213039,
            229223811,
            229217374,
            229212405,
            229212960,
            229215200,
            229212576,
            229215764,
            229211258
        ],
        "A1": [
            229207683,
            229206848,
            229205786,
            229207920,
            229207504,
            229243262,
            229206160,
            229214648,
            229256343,
            229206102,
            229220609,
            229213336,
            229217825,
            229217804,
            229210022,
            229205186,
            229215529,
            229207309,
            229215990,
            229206166
        ]
    },
    "name": "B. Time Travel",
    "statement": "Berland is a country with ancient history, where roads were built and\r\ndestroyed for centuries. It is known that there always were n cities in\r\nBerland. You also have records of t key moments in the history of the\r\ncountry, numbered from 1 to t. Each record contains a list of roads\r\nbetween some pairs of cities, which could be used for travel in Berland\r\nat a specific moment in time.You have discovered a time machine that\r\ntransports you between key moments. Unfortunately, you cannot choose\r\nwhat point in time to end up at, but you know the order consisting of k\r\nmoments in time a_{i}, in which the machine will transport you. Since\r\nthere is little time between the travels, when you find yourself in the\r\nnext key moment in time (), you can travel on at most one existing road\r\nat that moment, coming out from the city you were in before time\r\ntravel.Currently, you are in city 1, and the time machine has already\r\ntransported you to moment a_{1}. You want to reach city n as quickly as\r\npossible. Determine the minimum number of time travels, , that you need\r\nto make in order to reach city n.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int n, t;\n    std::cin >> n >> t;\n    \n    std::vector<std::vector<std::pair<int, int>>> adj(n);\n    for (int i = 0; i < t; i++) {\n        int m;\n        std::cin >> m;\n        \n        for (int j = 0; j < m; j++) {\n            int x, y;\n            std::cin >> x >> y;\n            x--, y--;\n            adj[x].emplace_back(y, i);\n            adj[y].emplace_back(x, i);\n        }\n    }\n    \n    int k;\n    std::cin >> k;\n    std::vector<int> a(k);\n    std::vector<std::vector<int>> pos(t);\n    for (int i = 0; i < k; i++) {\n        std::cin >> a[i];\n        a[i]--;\n        pos[a[i]].push_back(i);\n    }\n    \n    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<>> q;\n    q.emplace(0, 0);\n    std::vector dis(n, -1);\n    \n    while (!q.empty()) {\n        auto [d, x] = q.top();\n        q.pop();\n        \n        if (dis[x] != -1) {\n            continue;\n        }\n        dis[x] = d;\n        \n        for (auto [y, i] : adj[x]) {\n            auto it = std::lower_bound(pos[i].begin(), pos[i].end(), d);\n            if (it != pos[i].end()) {\n                q.emplace(*it + 1, y);\n            }\n        }\n    }\n    \n    std::cout << dis[n - 1] << \"\\n\";\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "graphs",
        "shortest paths"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Time Travel.json",
    "editorial_link": "https://codeforces.com//blog/entry/121621",
    "editorial": "Let denote the minimum number of moves required to reach vertex .\r\nInitially, for all vertices except , where . We will gradually mark the\r\nvertices for which we know the optimal answer. Similar to Dijkstraâs\r\nalgorithm, at each iteration, we will select the vertex with the minimum\r\nvalue of among the unmarked vertices. We will mark it and relax its\r\nneighbors: let be an edge belonging to record , we will find the minimum\r\nindex such that and , then . We can find using binary search, by saving\r\nthe indices of occurrences in for each time moments. The time complexity\r\nof the solution is .\r\n",
    "hint": []
}