{
    "link": "https://codeforces.com//contest/587/problem/E",
    "problemId": "38262",
    "problem_idx": "E",
    "shortId": "587E",
    "contest_number": "587",
    "problem_submissions": {
        "B": [
            13648546,
            13631319,
            13641731,
            13630364,
            13633855,
            13635275,
            13633091,
            13631092,
            13632489,
            13636118,
            13634961,
            13633410,
            13637437,
            13631295,
            13631061,
            13631176,
            13632360,
            13636955,
            13631513,
            13651693
        ],
        "F": [
            13647165,
            15306413,
            17349765,
            13654656
        ],
        "E": [
            13635518,
            13645026,
            13634711,
            13645375,
            13645998,
            13646627,
            13648041,
            13649025,
            13654642,
            13649552,
            13647771,
            13647562,
            13649838,
            13647318,
            13650802,
            13654796,
            13653392,
            13655928
        ],
        "A": [
            13627098,
            13626726,
            13642310,
            13627311,
            13628719,
            13627650,
            13627049,
            13626772,
            13626754,
            13627918,
            13626713,
            13628042,
            13629897,
            13626736,
            13627142,
            13626620,
            13626815,
            13629767,
            13626766,
            13627175
        ],
        "C": [
            13638605,
            13644702,
            13638823,
            13638488,
            13639824,
            13640040,
            13637207,
            13636153,
            13640829,
            13642556,
            13639860,
            13642332,
            13636367,
            13653829,
            13637091,
            13635819,
            13636868,
            13633329,
            13636406,
            13632991
        ],
        "D": [
            16774884,
            14175098,
            13654446,
            13648717
        ]
    },
    "name": "E. Duff as a Queen",
    "statement": "Duff is the queen of her country, Andarz Gu. She’s a competitive\r\nprogramming fan. That’s why, when he saw her minister, Malek, free, she\r\ngave her a sequence consisting of non-negative integers, and asked him\r\nto perform queries for her on this sequence. There are two types of\r\nqueries: given numbers and , Malek should perform for each (, bitwise\r\nexclusive OR of numbers and ). given numbers and Malek should tell her\r\nthe score of sequence . Score of a sequence is the number of its\r\ndifferent Kheshtaks. A non-negative integer is a Kheshtak of this\r\nsequence if and only if there exists a subsequence of , let’s denote it\r\nas (possibly empty) such that (). If this subsequence is empty, then\r\n.Unlike Duff, Malek is not a programmer. That’s why he asked for your\r\nhelp. Please help him perform these queries.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <ctime>\n#include <cctype>\n#include <cassert>\n#define rep(i, a, n) for(int i = a; i < n; ++ i)\n#define rev_rep(i, a, n) for(int i = (int) n - 1; i >= a; -- i)\n#define clr(a, h) memset(a, (h), sizeof(a))\n#define transfer(a, h) memcpy(a, (h), sizeof (a))\n#define foreach(e, x) for(__typeof(x.begin()) e = x.begin(); e != x.end(); ++ e)\n#define all(x) x.begin(), x.end()\n#define SZ(x) (int(x.size()))\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\n#define de(x) cerr << #x << \"=\" << x << endl\n#define two(x) (1 << (x))\n#define twoL(x) (1ll << (x))\nusing namespace std;\n\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int ,int> PII;\ntypedef pair< int , PII> pii;\n\nconst int INF = ~0U>>1;\nconst int Mod = int(1e9) + 7;\n\ninline void addMod(int &x, int y) {\n\tx += y;\n\tif (x >= Mod) x -= Mod;\n}\n\ninline int powMod(int a, int x) {\n    int ret = 1;\n    for (; x; x >>= 1, a = 1ll * a * a % Mod)\n        if (x & 1) ret = 1ll * ret * a % Mod;\n    return ret; \n}\n\nconst int N=201000;\nint a[N],c[N],n,q,ty,l,r,k;\nstruct guass {\n\tint c[32],cnt;\n\tvoid clear() {\n\t\tcnt=0;\n\t\trep(i,0,31) c[i]=0;\n\t}\n\tvoid add(int x,int p=30) {\n\t\tfor (int i=p;i>=0&&x;i--) {\n\t\t\tx=min(x,x^c[i]);\n\t\t\tif (x&two(i)) { c[i]=x; cnt++; break;}\n\t\t}\n\t}\n\tvoid print() {\n\t\tfor (int i=30;i>=0;i--) printf(\"%d \",c[i]); puts(\"\");\n\t}\n}nd[4*N],ret;\nvoid Modify(int x,int p) { for (;x<=n;x+=x&-x) c[x]^=p;}\nint Query(int x) { int p=0; for (;x;x-=x&-x) p^=c[x]; return p; }\nvoid merge(int p) {\n\tnd[p].clear();\n\tfor (int i=30;i>=0;i--) nd[p].c[i]=nd[p+p].c[i];\n\tfor (int i=30;i>=0;i--) nd[p].add(nd[p+p+1].c[i],i);\n}\nvoid build(int p,int l,int r) {\n\tif (l==r) {\n\t\tnd[p].add(a[l]);\n\t} else {\n\t\tint mid=(l+r)>>1;\n\t\tbuild(p+p,l,mid);\n\t\tbuild(p+p+1,mid+1,r);\n\t\tmerge(p);\n\t}\n}\nvoid modify(int p,int l,int r,int x,int v) {\n\tif (l==r) {\n\t\tnd[p].clear();\n\t\ta[l]^=v;\n\t\tnd[p].add(a[l]);\n\t} else {\n\t\tint mid=(l+r)>>1;\n\t\tif (x<=mid) modify(p+p,l,mid,x,v);\n\t\telse modify(p+p+1,mid+1,r,x,v);\n\t\tmerge(p);\n\t}\n}\nvoid query(int p,int l,int r,int tl,int tr) {\n\tif (l==tl&&r==tr) {\n\t\tfor (int i=30;i>=0;i--) ret.add(nd[p].c[i],i);\n\t} else {\n\t\tint mid=(l+r)>>1;\n\t\tif (tr<=mid) query(p+p,l,mid,tl,tr);\n\t\telse if (tl>mid) query(p+p+1,mid+1,r,tl,tr);\n\t\telse query(p+p,l,mid,tl,mid),query(p+p+1,mid+1,r,mid+1,tr);\n\t}\n}\nint main() {\n//\tfreopen(\"in\",\"r\",stdin);\n\tscanf(\"%d%d\",&n,&q);\n\trep(i,1,n+1) scanf(\"%d\",a+i);\n\tfor (int i=n;i>=1;i--) a[i]^=a[i-1];\n\trep(i,1,n+1) Modify(i,a[i]);\n\tbuild(1,1,n);\n\trep(i,0,q) {\n\t\tscanf(\"%d%d%d\",&ty,&l,&r);\n\t\tif (ty==1) {\n\t\t\tscanf(\"%d\",&k);\n\t\t\tmodify(1,1,n,l,k),Modify(l,k);\n\t\t\tif (r+1<=n) modify(1,1,n,r+1,k),Modify(r+1,k);\n\t\t} else {\n\t\t\tret.clear();\n\t\t\tif (l+1<=r) query(1,1,n,l+1,r);\n\t\t\tret.add(Query(l));\n\t\t\tprintf(\"%d\\n\",two(ret.cnt));\n\t\t}\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Duff as a Queen.json",
    "editorial_link": "https://codeforces.com//blog/entry/20971",
    "editorial": "Lemma #1: If numbers b1,?b2,?...,?bk are k Kheshtaks of a1,?...,?an, then  is a Kheshtak of a1,?...,?an.\n\nProof: For each 1???i???k, consider maski is a binary bitmask of length n and its j?-?th bit shows a subsequence of a1,?...,?an (subset) with xor equal to bi.\n\nSo, xor of elements subsequence(subset) of a1,?...,?an with bitmask equal to  equals to . So, it's a Kheshtak of this sequence.\n\nFrom this lemma, we can get another results: If all numbers b1,?b2,?...,?bk are k Kheshtaks of a1,?...,?an, then every Kheshtak of b1,?b2,?...,?bk is a Kheshtak of a1,?...,?an\n\nLemma #2: Score of sequence a1,?a2,?...,?an is equal to the score of sequence .\n\nProof: If we show the second sequence by b1,?b2,?...,?bn, then for each 1???i???n:\n\nbi = \nai = \n each element from sequence b is a Kheshtak of sequence a and vise versa. So, due to the result of Lemma #1, each Kheshtak of sequence b is a Kheshtak of sequence a and vise versa. So:\n\nscore(b1,?...,?bn)???score(a1,?...,?an)\nscore(a1,?...,?an)???score(b1,?...,?bn)\n score(a1,?...,?an)?=?score(b1,?...,?bn)\n\n \n\nBack to original problem: denote another array b2,?...,?bn where . Let's solve these two problems:\n\n1- We have array a1,?...,?an and q queries of two types:\n\nupd(l,?r,?k): Given numbers l,?r and k, for each l???i???r, perform \nask(i):? Given number i, return the value of ai.\nThis problem can be solved easily with a simple segment tree using lazy propagation.\n\n2- We have array b2,?...,?bn and queries of two types:\n\nmodify(p,?k): Perform bp?=?k.\nbasis(l,?r): Find and return the basis vector of bl,?bl?+?1,?...,?br (using Gaussian Elimination, its size it at most 32).\nThis problem can be solved by a segment tree where in each node we have the basis of the substring of that node (node [l,?r) has the basis of sequence bl,?...,?br?-?1).\n\nThis way we can insert to a basis vector v:\n\ninsert(x, v)\n\tfor a in v\n\t\tif a & -a & x\n\t\t\tx ^= a\n\tif !x\n\t\treturn\n\tfor a in v\n\t\tif x & -x & a\n\t\t\ta ^= x\n\tv.push(x)\nBut size of v will always be less than or equal to 32. For merging two nodes (of segment tree), we can insert the elements of one in another one.\n\nFor handling queries of two types, we act like this:\n\nType one: Call functions: upd(l,?r,?k),  and .\n\nType two: Let b?=?basis(l?+?1,?r). Call insert(al,?b). And then print 2b.size() as the answer.",
    "hint": []
}