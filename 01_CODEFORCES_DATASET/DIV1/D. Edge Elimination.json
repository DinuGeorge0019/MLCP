{
    "link": "https://codeforces.com//contest/1667/problem/D",
    "problemId": "1373071",
    "problem_idx": "D",
    "shortId": "1667D",
    "contest_number": "1667",
    "problem_submissions": {
        "D": [
            154110050,
            154103852,
            154103937,
            154115479,
            154155764,
            154115906,
            154106152,
            154122484,
            154113686,
            154108338,
            154128689,
            154128856,
            154111430,
            154129489,
            154120823,
            154116376,
            154123174,
            154132994,
            154140447
        ],
        "E": [
            154098159,
            154112243,
            154113395,
            154103015,
            154110907,
            154132981,
            154119331,
            154111400,
            154101121,
            154121934,
            154125339,
            154115657,
            154116667,
            154129397,
            154116608,
            154116404,
            154106393,
            154102336,
            154119279,
            154115571,
            154118773
        ],
        "C": [
            154085084,
            154086351,
            154093926,
            154092233,
            154091477,
            154093338,
            154099548,
            154094249,
            154095983,
            154097356,
            154101589,
            154106382,
            154103698,
            154128503,
            154096518,
            154099179,
            154101629,
            154094236
        ],
        "B": [
            154081270,
            154079749,
            154080732,
            154084177,
            154082008,
            154087816,
            154084920,
            154081329,
            154079918,
            154089467,
            154085121,
            154087842,
            154083998,
            154085563,
            154088975,
            154094350,
            154109646,
            154150216,
            154080315,
            154083438
        ],
        "A": [
            154078911,
            154089336,
            154078854,
            154078866,
            154112501,
            154079024,
            154078951,
            154078873,
            154079568,
            154078977,
            154079611,
            154079048,
            154078916,
            154078899,
            154081306,
            154078922,
            154079058,
            154082401,
            154078903
        ]
    },
    "name": "D. Edge Elimination",
    "statement": "You are given a tree (connected, undirected, acyclic graph) with n\r\nvertices. Two edges are adjacent if they share exactly one endpoint. In\r\none move you can remove an arbitrary edge, if that edge is adjacent to\r\nan even number of remaining edges.Remove all of the edges, or determine\r\nthat it is impossible. If there are multiple solutions, print any.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define rep(i, n) for(int i = 0; i < (int)(n); i ++)\n#define rep1(i, n) for(int i = 1; i <= (int)(n); i ++)\n#define MP make_pair\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nconst int INF = 0x3f3f3f3f;\n\nint n;\nbool chv[200005], ist[200005];\nvector<int> G[200005], H[200005];\nint par[200005], otd[200005], sum[200005];\nvector<int> fr;\nvoid dfs(int v, int p, int d)\n{\n\tpar[v] = p;\n\tchv[v] = (d ^ (int)G[v].size()) & 1;\n\tist[v] = d & 1;\n\tif(chv[v]) fr.push_back(v);\n\tsum[v] = chv[v] - ist[v];\n\trep(i, G[v].size()) {\n\t\tint u = G[v][i];\n\t\tif(u == p) continue;\n\t\tdfs(u, v, d ^ 1);\n\t\tsum[v] += sum[u];\n\t}\n}\n\nvector<PII> ca;\nvoid solve()\n{\n\tscanf(\"%d\", &n);\n\trep1(i, n) G[i].clear();\n\trep(i, n - 1) {\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tG[u].push_back(v); G[v].push_back(u);\n\t}\n\tfr.clear();\n\tdfs(1, 0, 0);\n\trep1(i, n) if(max(sum[i], -sum[i]) != (i >= 2)) {\n\t\tprintf(\"NO\\n\"); return;\n\t}\n\tprintf(\"YES\\n\");\n\t\n\trep1(i, n) H[i].clear();\n\tfor(int i = 2; i <= n; i ++) if(sum[i] > 0) H[i].push_back(par[i]);\n\telse H[par[i]].push_back(i);\n\t\n\trep(i, fr.size()) {\n\t\tif(ist[fr[i]]) continue;\n\t\tca.clear();\n\t\tint nj;\n\t\tfor(int j = fr[i]; chv[j]; j = nj) {\n\t\t\tnj = H[j].back();\n\t\t\tca.push_back(MP(j, nj));\n\t\t\tH[j].pop_back();\n\t\t}\n\t\tfr.push_back(nj);\n\t\treverse(ca.begin(), ca.end());\n\t\trep(j, ca.size()) {\n\t\t\tprintf(\"%d %d\\n\", ca[j].first, ca[j].second);\n\t\t\tswap(chv[ca[j].first], chv[ca[j].second]);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint T;\n\tscanf(\"%d\", &T);\n\twhile(T --) solve();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "dp",
        "trees"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Edge Elimination.json",
    "editorial_link": "https://codeforces.com//blog/entry/102013",
    "editorial": "When an edge is removed, the two neighbouring vertex have the same parity of edges. We say that an edge is odd, if the parity is odd, and the edge is even otherwise.\n\nOne can see, that a vertex with even degree will have the same amount of odd and even edges. For a vertex with odd degree, there will be one more odd edge.\n\nStarting from the leaves, we can decide the parity of each edge (an edge connected to a leaf is odd).\n\nIf there is a contradiction somewhere than the answer is NO.\n\nOtherwise, there is a construction.\n\nIn each vertex decide the removal order of the outgoing edges. Any order is good, when it always changes parity, and ends with an odd edge. Consider the directed graph with these conditions. One can see, that this graph is acyclic, so there is a topological order of that graph which will satisfy all the conditions.\n\nAlso, it is possible to solve it recursively."
}