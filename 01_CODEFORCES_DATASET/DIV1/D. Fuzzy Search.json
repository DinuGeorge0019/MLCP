{
    "link": "https://codeforces.com//contest/528/problem/D",
    "problemId": "24750",
    "problem_idx": "D",
    "shortId": "528D",
    "contest_number": "528",
    "problem_submissions": {
        "E": [
            10341247,
            10347694,
            10319347
        ],
        "D": [
            10329962,
            10320069,
            10323923,
            10323825,
            15074824,
            15074755,
            15074588,
            13788938,
            12800686,
            10323881,
            10325933,
            10320996,
            10324989,
            10325719,
            10324991,
            10322203,
            10325699,
            10330641,
            10325792,
            15079118,
            15024306,
            15024301,
            15024294,
            10326179,
            10326263,
            10326568,
            10771730,
            10326292,
            10326245,
            10595851,
            10595702,
            10595678,
            10595541,
            10595511,
            10595468,
            10595396,
            10595378,
            10595366,
            10595274,
            10595233,
            10594977,
            10594940,
            10594912,
            10594743,
            10594617,
            10325531,
            10318821
        ],
        "C": [
            10318112,
            10318394,
            10319266,
            10320615,
            10318827,
            10326662,
            10320967,
            10321573,
            10322337,
            10325513,
            10322954,
            10330901,
            10330797,
            10322938,
            10330769,
            10321075,
            10321402,
            10323235,
            10322360,
            10323460,
            10323142,
            10370800
        ],
        "B": [
            10314537,
            10315068,
            10315364,
            10314727,
            10316045,
            10315205,
            10316694,
            10315441,
            10317355,
            10318177,
            10316603,
            10315049,
            10313726,
            10317367,
            10314711,
            10315826,
            10318768,
            10317793,
            10318969,
            10315008
        ],
        "A": [
            10312991,
            10313324,
            10313565,
            10313501,
            10314349,
            10313172,
            10313135,
            10314168,
            10314385,
            10315234,
            10313926,
            10317754,
            10314988,
            10315685,
            10313735,
            10314526,
            10314740,
            10314101,
            10314876,
            10312997
        ]
    },
    "name": "D. Fuzzy Search",
    "statement": "Leonid works for a small and promising start-up that works on decoding\r\nthe human genome. His duties include solving complex problems of finding\r\ncertain patterns in long strings consisting of letters \u201d, \u201d, \u201d and\r\n\u201d.Let\u2019s consider the following scenario. There is a fragment of a human\r\nDNA chain, recorded as a string . To analyze the fragment, you need to\r\nfind all occurrences of string in a string . However, the matter is\r\ncomplicated by the fact that the original chain fragment could contain\r\nminor mutations, which, however, complicate the task of finding a\r\nfragment. Leonid proposed the following approach to solve this\r\nproblem.Let\u2019s write down integer the error threshold. We will say that\r\nstring occurs in string on position (), if after putting string along\r\nwith this position, each character of string corresponds to the some\r\ncharacter of the same value in string at the distance of at most . More\r\nformally, for any () there must exist such (), that and .For example,\r\ncorresponding to the given definition, string \"\" occurs in string \"\" in\r\npositions , and . Note that at the given definition transforms to a\r\nsimple definition of the occurrence of a string in a string.Help Leonid\r\nby calculating in how many positions the given string occurs in the\r\ngiven string with the given error threshold.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define REP(a,b) for(int a=0; a<(b); ++a)\n#define FWD(a,b,c) for(int a=(b); a<(c); ++a)\n#define FWDS(a,b,c,d) for(int a=(b); a<(c); a+=d)\n#define BCK(a,b,c) for(int a=(b); a>(c); --a)\n#define ALL(a) (a).begin(), (a).end()\n#define SIZE(a) ((int)(a).size())\n#define VAR(x) #x \": \" << x << \" \"\n#define popcount __builtin_popcount\n#define popcountll __builtin_popcountll\n#define gcd __gcd\n#define x first\n#define y second\n#define st first\n#define nd second\n#define pb push_back\n\nusing namespace std;\n\ntemplate<typename T> ostream& operator<<(ostream &out, const vector<T> &v){ out << \"{\"; for(const T &a : v) out << a << \", \"; out << \"}\"; return out; }\ntemplate<typename S, typename T> ostream& operator<<(ostream &out, const pair<S,T> &p){ out << \"(\" << p.st << \", \" << p.nd << \")\"; return out; }\n\ntypedef long long LL;\ntypedef pair<int, int> PII;\ntypedef long double K;\ntypedef vector<int> VI;\n\nconst int dx[] = {0,0,-1,1}; //1,1,-1,1};\nconst int dy[] = {-1,1,0,0}; //1,-1,1,-1};\n\nint n, m, k;\nchar S[200010];\nchar T[200010];\n\nLL fpw(LL a, LL b, LL p){\n    LL r = 1; while(b){if(b&1) r=r*a%p; a=a*a%p; b/=2;} return r;\n}\n\nconst LL MOD = 2013265921; const LL ROOT = 440564289; // MOD == 15*(1<<27)+1 (prime)\nvector<LL> e, er; //vector<complex<K>> e;\t\t\t\t  // ROOT has order 2^27\nvoid FFT(vector<int> &x, LL d = 1){\n\tint n = x.size();\n\tif(n != SIZE(e)){\n\t\te.resize(n); er.resize(n);\n\t\te[0] = 1; e[1] = fpw(ROOT,(1<<27)/n,MOD);\n\t\ter[0] = 1; er[1] = fpw(e[1],MOD-2,MOD);\n\t\tFWD(i,2,n) e[i] = e[i-1] * e[1] % MOD;\n\t\tFWD(i,2,n) er[i] = er[i-1] * er[1] % MOD;\n\t}\n\tif(d == -1) swap(e, er);\n\tFWD(i,0,n){\n\t\tint j=0; for(int k=1; k<n; k<<=1, j<<=1) if(k&i) j++;   //haxy i cheetosy\n\t\tj>>=1; if(i<j) swap(x[i], x[j]);                        //haxy i cheetosy\n\t}\n\tint k=0;\n\twhile((1<<k)<n) k++;\n\tfor(int s=1; s<n; s<<=1){\n\t\t--k;\n\t\tfor(int i=0; i<n; i+=2*s) FWD(j,0,s){\n\t\t\tLL u = x[i+j], v = x[i+j+s]*e[j<<k]%MOD;\n\t\t\tx[i+j] = u+v-(u+v>=MOD?MOD:0);\n\t\t\tx[i+j+s] = u-v+(u-v<0?MOD:0);\n\t\t}\n\t}\n\tif(d == -1) swap(e, er);\n}\n\nvector<int> convolution(vector<int> a, vector<int> b){\n\t//printf(\"conv:\\n\");\n\t//for(int x : a) printf(\"%d \", x); printf(\"\\n\");\n\t//for(int x : b) printf(\"%d \", x); printf(\"\\n\");\n\tint n = 1; while(n < (int)max(a.size(), b.size())) n *= 2;\n\tn *= 2; a.resize(n); b.resize(n);\n\tint on = fpw(n,MOD-2,MOD);\n\tFFT(a); FFT(b); FWD(i,0,n) a[i] = (LL)a[i]*b[i]%MOD*on%MOD; FFT(a, -1);\n\treturn a;\n}\n\nint cnt[900010];\n\nvoid dolicz(char c){\n\t//printf(\"letter %c\\n\", c);\n\tvector<int> a, b;\n\ta.resize(m);\n\tb.resize(n);\n\tFWD(i,0,m) a[i] = (T[i] == c ? 1 : 0);\n\tint lkp = -k-1;\n\tFWD(i,0,n){\n\t\tif(S[i] == c) lkp = i;\n\t\tb[i] = (lkp >= i-k ? 1 : 0);\n\t}\n\tlkp = n+k+3;\n\tBCK(i,n-1,-1){\n\t\tif(S[i] == c) lkp = i;\n\t\tif(lkp <= i+k) b[i] = 1;\n\t}\n\tvector<int> d = convolution(a, b);\n\tFWD(i,0,SIZE(d)) cnt[i] += d[i];\n}\n\nint main(){\n\tscanf(\"%d %d %d\", &n, &m, &k);\n\tscanf(\"%s %s\", S, T);\n\treverse(S, S+n);\n\tdolicz('A');\n\tdolicz('T');\n\tdolicz('G');\n\tdolicz('C');\n\tint res = 0;\n\tFWD(i,0,n+m+1) if(cnt[i] == m) ++res;\n\tprintf(\"%d\\n\", res);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "fft"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Fuzzy Search.json",
    "editorial_link": "https://codeforces.com//blog/entry/17020",
    "editorial": "There were issues with this task. Intended constraints were actually ,\r\nand the intended solution was using Fast Fourier Transformation, that\r\nleads to running time. But unfortunately the statement contained wrong\r\nconstraints, so we reduced input size during the tour. Nevertheless, we\r\nwill add the harder version of this task and you will be able to submit\r\nit shortly. Key idea is to reduce this task to a polynomial\r\nmultiplication. Let s solve the task in following manner. For each\r\nposition i of the S for each character c from ATGC we will calculate\r\nmatch(c, i) that is equal to the number of c characters that have\r\nmatching symbol in S if we put string T in position i. Then the criteria\r\nfor us to have an occurrence at position i is that match(A, i) +\r\nmatch(T, i) + match(G, i) + match(C, i) == |T| (that means exactly that\r\neach character from T being put at position i has a corresponding\r\ncharacter in S). Now let s find out how to calculate match(c, i). Let s\r\nkeep only c characters and not c characters in both strings and denote\r\nthem by 1 and 0 respectively. Let s also spread each 1 in string S by\r\nthe distance k to the left and to the right. For example, k = 1 for the\r\nsample string AGCAATTCAT and the character A corresponding bit vector\r\nwill be 111110111, and for the character C it will be 0111001110. This\r\nbitvector can be calculated in by putting two events +1 and -1 in string\r\nS in positions and for each in original string S and then sweeping from\r\nleft to right over the string S and processing those events. Now our\r\ntask is reduced to searching all positions where the bitvector T is the\r\nsubmask of the bitvector S. In constraints this can be done by using\r\nbitsets in . Nevertheless, this task can be seen as calculation of\r\npolynomials S and reversed(T) product. We will keep this as an exercise\r\nfor those who decide to submit the harder version of this task. Let s\r\ndraw a bounding box that contains all intersection points. Let s fix a\r\ntriangle and consider three angles shown on the picture. Calculate area\r\nof intersection of those area with the bounding box and call this area\r\nto be the area of an angle . Then it s easy to see, that those three\r\nangles are complement to the triangle itself in the bounding box, i. e.\r\ntriangle area is bounding box area minus three angle areas. This leads\r\nus to the idea how to solve this task by carefully calculating for each\r\npossible formed angle on the plane, how much times does it appear in\r\ntotal answer if we sum all values like over all triples of lines.\r\nActually, the angle is considered as many times, as many lines there are\r\nthat intersect both sides of its right adjacent angle. So, our task is\r\nreduced to calculate for each angle on plane how much lines intersect\r\nits sides (i. e. its rays). This can be done in by fixing the first side\r\nof the angle and then adding lines in ascending order of polar angle,\r\nand then by keeping the number of lines that intersect the base line to\r\nthe left and that intersect the base line to the right. Key idea is that\r\nthe exact of four angles formed by the pair of lines that is crossed by\r\nsome third line c, can be determined by two numbers: its polar angle\r\nalpha and its crossing with a coordinate x. Further details are shown on\r\nthe picture below. There is also a nice short solution from enot110\r\nhere.\r\n"
}