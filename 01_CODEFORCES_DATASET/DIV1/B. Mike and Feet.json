{
    "link": "https://codeforces.com//contest/547/problem/B",
    "problemId": "28330",
    "problem_idx": "B",
    "shortId": "547B",
    "contest_number": "547",
    "problem_submissions": {
        "A": [
            11306176,
            11281663,
            11286152,
            11283154,
            11300410,
            11282966,
            11282839,
            11284240,
            11282987,
            11283935,
            11284453,
            11283105,
            11302976,
            11296402,
            11304989
        ],
        "E": [
            11300374,
            11295900,
            11296096,
            11332517,
            11332504,
            11301614,
            11329764,
            11329670,
            11329557,
            11302402,
            11296504,
            11303628,
            11310167,
            11310570,
            11335792,
            11334862,
            11310094,
            11298023,
            11289647
        ],
        "D": [
            11290397,
            11311418,
            11289189,
            11307197,
            11288244,
            11306223,
            11292199,
            11318433,
            11338617,
            11294617,
            11298075,
            11296934,
            11291997,
            11293528,
            11292331,
            11330482
        ],
        "C": [
            11288602,
            11286288,
            11282036,
            11285135,
            11284518,
            11286983,
            11288810,
            11287248,
            11292291,
            11290371,
            11293842,
            11290787,
            11289508,
            11302378,
            11289341,
            11290547,
            11300174
        ],
        "B": [
            11284410,
            11282963,
            11283861,
            11287519,
            11281935,
            11284503,
            11284754,
            11285157,
            11286946,
            11285798,
            11286796,
            11285456,
            11285604,
            11286200,
            11285607,
            11286328,
            11292395
        ]
    },
    "name": "B. Mike and Feet",
    "statement": "Mike is the president of country What-The-Fatherland. There are bears\r\nliving in this country besides Mike. All of them are standing in a line\r\nand they are numbered from to from left to right. -th bear is exactly\r\nfeet high. A group of bears is a non-empty contiguous segment of the\r\nline. The of a group is the number of bears in that group. The of a\r\ngroup is the minimum height of the bear in that group.Mike is a curious\r\nto know for each such that the maximum strength among all groups of size\r\n.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define SZ(X) ((int)(X).size())\n#define ALL(X) (X).begin(), (X).end()\n#define REP(I, N) for (int I = 0; I < (N); ++I)\n#define REPP(I, A, B) for (int I = (A); I < (B); ++I)\n#define RI(X) scanf(\"%d\", &(X))\n#define RII(X, Y) scanf(\"%d%d\", &(X), &(Y))\n#define RIII(X, Y, Z) scanf(\"%d%d%d\", &(X), &(Y), &(Z))\n#define DRI(X) int (X); scanf(\"%d\", &X)\n#define DRII(X, Y) int X, Y; scanf(\"%d%d\", &X, &Y)\n#define DRIII(X, Y, Z) int X, Y, Z; scanf(\"%d%d%d\", &X, &Y, &Z)\n#define RS(X) scanf(\"%s\", (X))\n#define CASET int ___T, case_n = 1; scanf(\"%d \", &___T); while (___T-- > 0)\n#define MP make_pair\n#define PB push_back\n#define MS0(X) memset((X), 0, sizeof((X)))\n#define MS1(X) memset((X), -1, sizeof((X)))\n#define LEN(X) strlen(X)\n#define PII pair<int,int>\n#define VPII vector<pair<int,int> >\n#define PLL pair<long long,long long>\n#define F first\n#define S second\ntypedef long long LL;\nusing namespace std;\nconst int MOD = 1e9+7;\nconst int SIZE = 1e6+10;\n// template end here\nint a[SIZE];\nVPII pp;\nstruct Union_Find{\n    int d[SIZE],num[SIZE];\n    void init(int n){\n        REP(i,n)d[i]=i,num[i]=1;\n    }\n    int find(int x){\n        return (x!=d[x])?(d[x]=find(d[x])):x;\n    }\n    bool uu(int x,int y){\n        x=find(x);\n        y=find(y);\n        if(x==y)return 0;\n        if(num[x]<=num[y]){\n            num[y]+=num[x];\n            d[x]=y;\n        }\n        else{\n            num[x]+=num[y];\n            d[y]=x;\n        }\n        return 1;\n    }\n}U;\ntemplate <class T>\nvoid maa(T& x,T y){\n    if(x<y)x=y;\n}\ntemplate <class T>\nvoid mii(T& x,T y){\n    if(x>y)x=y;\n}\nint an[SIZE];\nbool v[SIZE];\nvoid print_array(int arr[],int n){\n    REP(i,n){\n        if(i)printf(\" \");\n        printf(\"%d\",arr[i]);\n    }\n    puts(\"\");\n}\nint main(){\n    DRI(n);\n\n    REP(i,n){\n        RI(a[i]);\n        pp.PB(MP(a[i],i));\n    }\n    sort(ALL(pp));\n    reverse(ALL(pp));\n    U.init(n);\n    REP(i,n){\n        int me=pp[i].S;\n        if(me&&v[me-1]){\n            U.uu(me,me-1);\n        }\n        if(me+1<n&&v[me+1]){\n            U.uu(me,me+1);\n        }\n        v[me]=1;\n        maa(an[U.num[U.find(me)]],pp[i].F);\n    }\n    for(int i=n-1;i>0;i--)maa(an[i],an[i+1]);\n    print_array(an+1,n);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "dp",
        "dsu"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Mike and Feet.json",
    "editorial_link": "https://codeforces.com/blog/entry/18126",
    "editorial": "For each , find the largest that and show it by (if there is no such ,\r\nthen ). Also, find the smallest that and show it by (if there is no such\r\n, then ). This can be done in with a stack. Pseudo code of the first\r\npart (second part is also like that) : Consider that you are asked to\r\nprint integers, . Obviously, . For each , we know that can be minimum\r\nelement in groups of size . Se we need a data structure for us to do\r\nthis: We have array and all its elements are initially equal to . Also,\r\nqueries. Each query gives and want us to perform . We want the final\r\narray. This can be done in with a maximum partial sum (keeping maximum\r\ninstead of sum), read here for more information about partial sum. Time\r\ncomplexity: . C++ Code by PrinceOfPersia C++ Code by Haghani Java Code\r\nby Zlobober\r\n"
}