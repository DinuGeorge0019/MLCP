{
    "link": "https://codeforces.com//contest/468/problem/A",
    "problemId": "13934",
    "problem_idx": "A",
    "shortId": "468A",
    "contest_number": "468",
    "problem_submissions": {
        "B": [
            7871506,
            7871511,
            7872060,
            7872742,
            7871156,
            7871190,
            7873292,
            7877835,
            7874498,
            7874530,
            7873260,
            7871798,
            7873431,
            7880646,
            7874764,
            7872991,
            7872224,
            7874914,
            7872816,
            7873434
        ],
        "A": [
            7869312,
            7868480,
            7868920,
            7869884,
            7868194,
            7868219,
            7869275,
            7872981,
            7868801,
            7869110,
            7869014,
            7868639,
            7874076,
            7868501,
            7869672,
            7868999,
            7869364,
            7868817,
            7869566,
            7868775
        ],
        "C": [
            7874970,
            7875437,
            7876233,
            7877737,
            7878511,
            7880116,
            7875038,
            7877328,
            7876648,
            7878979,
            7879987,
            7876686,
            7878460,
            7880319,
            7881048,
            7879895,
            7881839
        ],
        "D": [
            7884795,
            7885524,
            7879880
        ]
    },
    "name": "A. 24 Game",
    "statement": "Little X used to play a card game called \"24 Game\", but recently he has\r\nfound it too easy. So he invented a new game.Initially you have a\r\nsequence of integers: . In a single step, you can pick two of them,\r\nlet\u2019s denote them and , erase them from the sequence, and append to the\r\nsequence either , or , or .After steps there is only one number left.\r\nCan you make this number equal to ?\r\n",
    "solutions": [
        "//#include <iostream>\n#include <fstream>\n#include <vector>\n#include <set>\n#include <map>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <cassert>\n#include <ctime>\n#include <algorithm>\n#include <sstream>\n#include <list>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <cstdlib>\n#include <cstdio>\n#include <iterator>\n#include <functional>\n#include <bitset>\n#define mp make_pair\n#define pb push_back\n\n#ifdef LOCAL\n#define eprintf(...) fprintf(stderr,__VA_ARGS__)\n#else\n#define eprintf(...)\n#endif\n\n#define TIMESTAMP(x) eprintf(\"[\"#x\"] Time : %.3lf s.\\n\", clock()*1.0/CLOCKS_PER_SEC)\n#define TIMESTAMPf(x,...) eprintf(\"[\" x \"] Time : %.3lf s.\\n\", __VA_ARGS__, clock()*1.0/CLOCKS_PER_SEC)\n\n#if ( ( _WIN32 || __WIN32__ ) && __cplusplus < 201103L)\n    #define LLD \"%I64d\"\n#else\n    #define LLD \"%lld\"\n#endif\n\nusing namespace std;\n\n#define TASKNAME \"A\"\n\n#ifdef LOCAL\nstatic struct __timestamper {\n    string what;\n    __timestamper(const char* what) : what(what){};\n    __timestamper(const string& what) : what(what){};\n    ~__timestamper(){\n        TIMESTAMPf(\"%s\", what.data());\n    }\n} __TIMESTAMPER(\"end\");\n#else \nstruct __timestamper {};\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\n\n\nint main(){\n  #ifdef LOCAL\n    assert(freopen(TASKNAME\".in\",\"r\",stdin));\n    assert(freopen(TASKNAME\".out\",\"w\",stdout));\n  #endif\n\n    int n;\n    scanf(\"%d\",&n);\n    if (n < 4) {\n        printf(\"NO\\n\");\n        return 0;\n    }\n    printf(\"YES\\n\");\n    if (n % 2 == 0) {\n        printf(\"3 * 4 = 12\\n\");\n        printf(\"2 * 12 = 24\\n\");\n        printf(\"1 * 24 = 24\\n\");\n        for (int i = 5; i < n; i += 2) {\n            printf(\"%d - %d = 1\\n\", i + 1, i);\n            printf(\"1 * 24 = 24\\n\");\n        }\n    } else {\n        printf(\"5 + 1 = 6\\n\");\n        printf(\"4 * 6 = 24\\n\");\n        printf(\"3 - 2 = 1\\n\");\n        printf(\"1 * 24 = 24\\n\");\n        for (int i = 6; i < n; i += 2) {\n            printf(\"%d - %d = 1\\n\", i + 1, i);\n            printf(\"1 * 24 = 24\\n\");\n        }\n    }\n\n      \n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. 24 Game.json",
    "editorial_link": "https://codeforces.com/blog/entry/13896",
    "editorial": "Solution 1: If , it's easy to find that it's impossible to make ,\nbecause the maximal number they can form is . If , we can simply add at\nthe end of the solution to the number . So we can find the solution of\nby hand.  Solution 2: We can find the pattern like that , and\nfind the solution of by hand or brute forces. Solution 3: A\nknapsack-like solution.\n"
}