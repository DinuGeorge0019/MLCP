{
    "link": "https://codeforces.com//contest/193/problem/A",
    "problemId": "1404",
    "problem_idx": "A",
    "shortId": "193A",
    "contest_number": "193",
    "problem_submissions": {
        "E": [
            1760964,
            1761121,
            1761512
        ],
        "D": [
            1760240,
            1762133
        ],
        "C": [
            1758660,
            1761664,
            1756861,
            1760385,
            1757547,
            1757786,
            1758601,
            1759415,
            1759294,
            1758335,
            1759388,
            1758973,
            1758915,
            1759895,
            1758129,
            1758643
        ],
        "B": [
            1755241,
            1755126,
            1757246,
            1755771,
            1756101,
            1755179,
            1755123,
            1755569,
            1759901,
            1755152,
            1756669,
            1756100,
            1755910,
            1760390,
            1760344
        ],
        "A": [
            1754055,
            1754254,
            1754686,
            1754344,
            1754275,
            1758932,
            1756481,
            1757287,
            1754744,
            1756492,
            1755198,
            1754933,
            1754369,
            1755466
        ]
    },
    "name": "A. Cutting Figure",
    "statement": "You\u2019ve gotten an sheet of squared paper. Some of its squares are\r\npainted. Let\u2019s mark the set of all painted squares as . Set is\r\nconnected. Your task is to find the minimum number of squares that we\r\ncan delete from set to make it not connected.A set of painted squares is\r\ncalled , if for every two squares and from this set there is a sequence\r\nof squares from the set, beginning in and ending in , such that in this\r\nsequence any square, except for the last one, shares a common side with\r\nthe square that follows next in the sequence. An empty set and a set\r\nconsisting of exactly one square are connected by definition.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n#include <algorithm>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\n#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#define pb push_back\n#define mp make_pair\n#define sz(x) ((int)(x).size())\n\ntypedef long long ll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<int, int> pii;\n\nconst int MAXH = 55;\nconst int MAXW = 55;\n\nchar f[MAXH][MAXW + 1];\nbool was[MAXH][MAXW];\nint h, w;\n\nvoid dfs(int x, int y) {\n  if (x < 0 || y < 0 || x >= w || y >= h) return;\n  if (f[y][x] != '#') return;\n  if (was[y][x]) return;\n  was[y][x] = true;\n  dfs(x + 1, y);\n  dfs(x - 1, y);\n  dfs(x, y + 1);\n  dfs(x, y - 1);\n}\n\nbool check() {\n  memset(was, 0, sizeof was);\n\n  bool wasd = false;\n  for (int y = 0; y < h; y++)\n  for (int x = 0; x < w; x++)\n    if (f[y][x] == '#' && !was[y][x]) {\n      if (wasd) return false;\n      dfs(x, y);\n      wasd = true;\n    }\n  return true;\n}\n\nint main() {\n  #ifdef DEBUG\n  freopen(\"std.in\", \"r\", stdin);\n  freopen(\"std.out\", \"w\", stdout);\n  #endif\n\n  while (scanf(\"%d%d\", &h, &w) >= 1) {\n    int cnt = 0;\n    for (int y = 0; y < h; y++) {\n      scanf(\"%s\", f[y]);\n      for (int x = 0; x < w; x++)\n        cnt += f[y][x] == '#';\n    }\n\n    if (cnt <= 2) printf(\"-1\\n\");\n    else {\n      int ans = 2;\n      for (int y = 0; y < h; y++)\n      for (int x = 0; x < w; x++)\n        if (f[y][x] == '#') {\n          f[y][x] = '.';\n          if (!check()) ans = 1;\n          f[y][x] = '#';\n        }\n      printf(\"%d\\n\", ans);\n    }\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "graphs",
        "trees"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Cutting Figure.json",
    "editorial_link": "https://codeforces.com//blog/entry/4673",
    "editorial": "Main idea: using the fact that the answer cannot be greater than 2, check answer 1.\n\nLet's proof that the answer is not greater than 2. Let area of the figure be greater than 3. Let's examine the leftmost of all topmost squares. There is no neighbors left or up to it. So, number of its neighbors is not more than 2. Thus, if we delete its neighbors, we shall disconnect the figure. If the area is equal to 3, we always can disconnect the figure by deletion of one square. It can be proofed by considering all two primary cases. If the area is not greater than 2, there is no way to disconnect the figure.\n\nThe algorithm: Check answer 1. We can simply brute-force the square to delete, and for each instance start dfs from any existing square. If during the dfs we visited not all of the remaining squares, we have found the square to delete. The answer is 1 if our bruteforce succeeded, and 2 otherwise.\n\nThat was necessary to consider the case when there is no answer.\n\nThe complexity of the described algorithm is O(n4). That was possible to search for articulation points and solve the problem in complexity O(n2), but in my opinion that required more time and effort."
}