{"link": "https://codeforces.com//contest/698/problem/B", "problemId": "65777", "problem_idx": "B", "shortId": "698B", "contest_number": "698", "problem_submissions": {"A": [19255240, 19238333, 19233487, 19233309, 19234715, 19232234, 19232460, 19232250, 19232256, 19233295, 19249652, 19232146, 19232208, 19232154, 19232533], "B": [19254561, 19237012, 19237862, 19236769, 19233173, 19239263, 19235681, 19237484, 19241788, 19236331, 19248894, 19236580, 19234441, 19235605, 19239046], "D": [19253572, 19249527, 19248444, 19246796, 19251047, 19251739], "C": [19248258, 19234132, 19243267, 19241700, 19248574, 19235387, 19239629, 19241130, 19239485, 19252239, 19235095, 19245084, 19242311, 19243465, 19252785], "F": [19242723, 19251904, 19301612, 19253678, 19251067, 19249915, 19278249, 19257429, 19255248], "E": [19254153, 19262072, 19250384, 19249636]}, "name": "B. Fix a Tree", "statement": "A tree is an undirected connected graph without cycles.Let\u2019s consider a\r\nrooted undirected tree with vertices, numbered through . There are many\r\nways to represent such a tree. One way is to create an array with\r\nintegers , where denotes a parent of vertex (here, for convenience a\r\nroot is considered its own parent). Given a sequence , one is able to\r\nrestore a tree: There must be exactly one index that . A vertex is a\r\nroot of the tree. For all other vertices , there is an edge between\r\nvertex and vertex . A sequence is called valid if the described\r\nprocedure generates some (any) rooted tree. For example, for sequences ,\r\nand valid.You are given a sequence , not necessarily valid. Your task is\r\nto change the minimum number of elements, in order to get a valid\r\nsequence. Print the minimum number of changes and an example of a valid\r\nsequence after that number of changes. If there are many valid sequences\r\nachievable in the minimum number of changes, print any of them.\r\n", "solutions": ["#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <cassert>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\nconst int N=201000;\nint n,p[N],vis[N],rt,cnt,T;\nint main() {\n\tscanf(\"%d\",&n);\n\trep(i,1,n+1) {\n\t\tscanf(\"%d\",p+i);\n\t\tif (p[i]==i) rt=i;\n\t}\n\trep(i,1,n+1) if (!vis[i]) {\n\t\tT++;\n\t\tint x=i;\n\t\twhile (!vis[x]) {\n\t\t\tvis[x]=T;\n\t\t\tx=p[x];\n\t\t}\n\t\tif (vis[x]==T) {\n\t\t\tif (!rt) {\n\t\t\t\trt=x; p[x]=x;\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\tif (x!=rt) {\n\t\t\t\tp[x]=rt;\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",cnt);\n\trep(i,1,n+1) printf(\"%d \",p[i]);\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "dfs and similar", "dsu", "graphs", "trees"], "dificulty": "1700", "interactive": false}