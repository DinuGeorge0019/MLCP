{"link": "https://codeforces.com//contest/947/problem/C", "problemId": "164139", "problem_idx": "C", "shortId": "947C", "contest_number": "947", "problem_submissions": {"C": [36173454, 36158955, 36159580, 36159099, 36160344, 36163522, 36159314, 36160080, 36160850, 36161300, 36159923, 36161359, 36160490, 36159503, 36160981, 36162645, 36160904, 36159951, 36161496], "E": [36168563, 36236455, 36170443, 39088009], "B": [36164839, 36156882, 36157486, 36156947, 36158529, 36159543, 36158110, 36157900, 36155578, 36159650, 36157136, 36158516, 36157266, 36157820, 36159109, 36159552, 36158553, 36157744, 36159160], "D": [36162982, 36163865, 36166846, 36164126, 36164997, 36171948, 36177192, 36164630, 36165682, 36165588, 36166182, 36171226, 36166510, 36166759, 36167046, 36167052, 36169076, 36165891, 36168487], "A": [36160906, 36154995, 36155654, 36155514, 36156087, 36157563, 36155459, 36156152, 36158089, 36157373, 36155161, 36155827, 36155589, 36156282, 36157634, 36156202, 36156868, 36156079, 36157276], "F": [36230948]}, "name": "C. Perfect Security", "statement": "Alice has a very important message consisting of some non-negative\r\nintegers that she wants to keep secret from Eve. Alice knows that the\r\nonly theoretically secure cipher is one-time pad. Alice generates a\r\nrandom key of the length equal to the message\u2019s length. Alice computes\r\nthe bitwise xor of each element of the message and the key (, where\r\ndenotes the bitwise XOR operation) and stores this encrypted message .\r\nAlice is smart. Be like Alice.For example, Alice may have wanted to\r\nstore a message . She generated a key . The encrypted message is thus\r\n.Alice realised that she cannot store the key with the encrypted\r\nmessage. Alice sent her key to Bob and deleted her own copy. Alice is\r\nsmart. Really, be like Alice.Bob realised that the encrypted message is\r\nonly secure as long as the key is secret. Bob thus randomly permuted the\r\nkey before storing it. Bob thinks that this way, even if Eve gets both\r\nthe encrypted message and the key, she will not be able to read the\r\nmessage. Bob is not smart. Don\u2019t be like Bob.In the above example, Bob\r\nmay have, for instance, selected a permutation and stored the permuted\r\nkey .One year has passed and Alice wants to decrypt her message. Only\r\nnow Bob has realised that this is impossible. As he has permuted the key\r\nrandomly, the message is lost forever. Did we mention that Bob isn\u2019t\r\nsmart?Bob wants to salvage at least some information from the message.\r\nSince he is not so smart, he asks for your help. You know the encrypted\r\nmessage and the permuted key . What is the lexicographically smallest\r\nmessage that could have resulted in the given encrypted text?More\r\nprecisely, for given and , find the lexicographically smallest message ,\r\nfor which there exists a permutation such that for every .Note that the\r\nsequence is lexicographically smaller than the sequence , if there is an\r\nindex such that and for all the condition holds.\r\n", "solutions": ["#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define M 10000010\nusing namespace std;\nconst int N=600005;\n\nint n,i,a[N],cur,np;\nint son[2][M],sum[M],x,y,j;\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tnp=1;\n\tfor(i=1;i<=n;i++){\n\t\tscanf(\"%d\",&x);\n\t\tfor(cur=1,j=29;j>=0;j--){\n\t\t\tif(!son[(x>>j)&1][cur])\n\t\t\t\tson[(x>>j)&1][cur]=++np;\n\t\t\tcur=son[(x>>j)&1][cur];\n\t\t\tsum[cur]++;\n\t\t}\n\t}\n\tfor(i=1;i<=n;i++){\n\t\ty=0;\n\t\tfor(cur=1,j=29;j>=0;j--){\n\t\t\tif(sum[son[(a[i]>>j)&1][cur]])\n\t\t\t\tcur=son[(a[i]>>j)&1][cur];\n\t\t\telse cur=son[!((a[i]>>j)&1)][cur],y|=1<<j/*,printf(\"%d %d\\n\",a[i],j)*/;\n\t\t\tsum[cur]--;\n\t\t}\n\t\tprintf(\"%d \",y);\n\t}\n}\n"], "input": "", "output": "", "tags": ["data structures", "greedy", "strings", "trees"], "dificulty": "1800", "interactive": false}