{
    "link": "https://codeforces.com//contest/2081/problem/D",
    "problemId": "3268218",
    "problem_idx": "D",
    "shortId": "2081D",
    "contest_number": "2081",
    "problem_submissions": {
        "B": [
            310774215,
            310752573,
            310826211,
            310739558,
            310740102,
            310737148,
            310765995,
            310740246,
            310740411,
            310741073,
            310738730,
            310756764,
            310764342,
            310740030,
            311003693,
            310899344,
            310756759
        ],
        "G2": [
            310759041,
            310768901
        ],
        "G1": [
            310755673,
            310759015,
            310756557,
            310778645,
            310765573,
            310772467
        ],
        "D": [
            310740089,
            310749620,
            310736583,
            310742447,
            310756472,
            310749776,
            311027213,
            310763231,
            310761892,
            310742331,
            310755537,
            310777318,
            310776606,
            310764407,
            310744818,
            310748246,
            310836677,
            310748850,
            310737628,
            310743454,
            310762523
        ],
        "F": [
            310771700,
            310779543,
            310754815,
            310762358,
            310891482,
            312515283
        ],
        "C": [
            310742461,
            310749579,
            310750103,
            310749689,
            310758863,
            310753338,
            310754039,
            310753444,
            310776556,
            310767765,
            310753226,
            310756623,
            310767338,
            310755335,
            310755677,
            310757463,
            310759247,
            310772525
        ],
        "A": [
            310731565,
            310739375,
            310732389,
            310731680,
            310732110,
            310734146,
            310732038,
            310732151,
            310731709,
            310735423,
            310732004,
            310743686,
            310737151,
            310732535,
            310735886,
            310731360,
            310731694,
            310736792
        ],
        "E": [
            312258360,
            310770842
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/140702",
    "editorial": "SolutionFirst, for vertices with the same weight, they can naturally be\r\ntreated as a single vertex. We observe that in the interval of weights ,\r\nonly the smallest is useful. It is because, if , connecting edges and\r\nwill always be better than connecting and . Therefore, for a vertex with\r\nweight , we enumerate . For each , we connect to the smallest that is\r\ngreater than or equal to . It can be proven that this approach\r\nguarantees a connected graph (since connecting only the first edge\r\nlarger than already forms a connected structure). This method generates\r\nedges (due to the harmonic series property). Directly applying Kruskalâ€™s\r\nalgorithm would result in a time complexity of . With radix sort, this\r\ncan be optimized to .\r\n",
    "name": "D. MST in Modulo Graph",
    "statement": "You are given a complete graph with n vertices, where the i-th vertex\r\nhas a weight p_i. The weight of the edge connecting vertex x and vertex\r\ny is equal to\r\noperatorname{max}(p_x, p_y)\r\nbmod\r\noperatorname{min}(p_x, p_y).Find the smallest total weight of a set of\r\nn - 1 edges that connect all n vertices in this graph.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dsu",
        "graphs",
        "greedy",
        "math",
        "number theory",
        "sortings",
        "trees"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. MST in Modulo Graph.json",
    "hint": [
        "Hint There are only edges that are truly useful in the whole graph."
    ]
}