{"link": "https://codeforces.com//contest/786/problem/A", "problemId": "99627", "problem_idx": "A", "shortId": "786A", "contest_number": "786", "problem_submissions": {"E": [25753975, 25749618, 25751063, 25750167, 25750928, 25751180, 26105577, 25800132], "D": [25746644, 25778480], "C": [25742197, 25745538, 25743345, 25745842, 25739155, 25745929, 25742960, 25745796, 25744579, 25746028, 25746972, 25743401, 25747247, 25747535, 25746531, 25744441, 25746633, 25742165, 25747374, 25744720], "B": [25740468, 25741179, 25741185, 25743380, 25745478, 25745982, 25742716, 25741370, 25741364, 25742235, 25746446, 25742809, 25743016, 25744432, 25748452, 25743844, 25745002, 25744286, 25740598], "A": [25737862, 25737692, 25737872, 25738672, 25742192, 25738355, 25739309, 25738230, 25737832, 25738120, 25738474, 25738969, 25738916, 25738225, 25737834, 25738628, 25738638, 25747228, 25739393, 25749219]}, "name": "A. Berzerk", "statement": "Rick and Morty are playing their own version of Berzerk (which has\r\nnothing in common with the famous Berzerk game). This game needs a huge\r\nspace, so they play it with a computer.In this game there are objects\r\nnumbered from to arranged in a circle (in clockwise order). Object\r\nnumber is a black hole and the others are planets. There\u2019s a monster in\r\none of the planet. Rick and Morty don\u2019t know on which one yet, only that\r\nhe\u2019s not initially in the black hole, but Unity will inform them before\r\nthe game starts. But for now, they want to be prepared for every\r\npossible scenario. Each one of them has a set of numbers between and\r\n(inclusive). Rick\u2019s set is with elements and Morty\u2019s is with elements.\r\nOne of them goes first and the player changes alternatively. In each\r\nplayer\u2019s turn, he should choose an arbitrary number like from his set\r\nand the monster will move to his -th next object from its current\r\nposition (clockwise). If after his move the monster gets to the black\r\nhole he wins.Your task is that for each of monster\u2019s initial positions\r\nand who plays first determine if the starter wins, loses, or the game\r\nwill stuck in an infinite loop. In case when player can lose or make\r\ngame infinity, it more profitable to choose infinity game.\r\n", "solutions": ["#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <cassert>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\nconst int N=7010;\nint k[3],a[3][N],dp[3][N],wn[3][N];\nPII q[N*2];\nint n;\nint main() {\n\tscanf(\"%d\",&n);\n\tscanf(\"%d\",&k[0]); rep(i,0,k[0]) scanf(\"%d\",&a[0][i]);\n\tscanf(\"%d\",&k[1]); rep(i,0,k[1]) scanf(\"%d\",&a[1][i]);\n\trep(i,1,n) wn[0][i]=k[0],wn[1][i]=k[1];\n\tmemset(dp,-1,sizeof(dp));\n\tq[0]=mp(0,0);\n\tq[1]=mp(1,0);\n\tint t=2;\n\tdp[0][0]=dp[1][0]=0;\n\trep(i,0,t) {\n\t\tint u=q[i].fi,v=q[i].se;\n//\t\tprintf(\"%d %d %d\\n\",u,v,dp[u][v]);\n\t\tif (dp[u][v]==0) {\n\t\t\trep(j,0,k[u^1]) {\n\t\t\t\tint uu=u^1,vv=(v+n-a[uu][j])%n;\n\t\t\t\tif (dp[uu][vv]==-1) {\n\t\t\t\t\tdp[uu][vv]=1;\n\t\t\t\t\tq[t++]=mp(uu,vv);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\trep(j,0,k[u^1]) {\n\t\t\t\tint uu=u^1,vv=(v+n-a[uu][j])%n;\n\t\t\t\t--wn[uu][vv];\n\t\t\t\tif (dp[uu][vv]==-1&&wn[uu][vv]==0) {\n\t\t\t\t\tdp[uu][vv]=0;\n\t\t\t\t\tq[t++]=mp(uu,vv);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\trep(j,0,2) {\n\t\trep(i,1,n) {\n\t\t\tif (dp[j][i]==-1) printf(\"Loop \"); else if (dp[j][i]==0) printf(\"Lose \"); else printf(\"Win \");\n\t\t}\n\t\tputs(\"\");\n\t}\n}\n"], "input": "", "output": "", "tags": ["dfs and similar", "dp", "games"], "dificulty": "2000", "interactive": false}