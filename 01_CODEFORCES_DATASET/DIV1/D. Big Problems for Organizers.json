{"link": "https://codeforces.com//contest/418/problem/D", "problemId": "8553", "problem_idx": "D", "shortId": "418D", "contest_number": "418", "problem_submissions": {"D": [6394549, 6390597, 6393422, 6452946, 6395793], "C": [6387160, 6388719, 6391450, 6395992, 6388957, 6393584, 6389213, 6389069, 6390380, 6390081, 6390308, 6391447, 6393284, 6391833], "B": [6386136, 6387276, 6386703, 6387216, 6390504, 6387795, 6392656, 6386870, 6387421, 6390739, 6387737, 6388222, 6388434, 6387453, 6389931, 6386999], "A": [6385669, 6397608, 6397606, 6385690, 6385811, 6385631, 6385706, 6385677, 6385655, 6385954, 6388328, 6385939, 6385795, 6386073, 6385780, 6385770]}, "name": "D. Big Problems for Organizers", "statement": "The Finals of the \"Russian Code Cup\" 2214 will be held in hotels. Two\r\nhotels (let\u2019s assume that they are the main hotels), will host all sorts\r\nof events, and the remaining hotels will accommodate the participants.\r\nThe hotels are connected by roads, you can get from any hotel to any\r\nother one.The organizers wonder what is the minimum time all the\r\nparticipants need to get to the main hotels, if each participant goes to\r\nthe main hotel that is nearest to him and moving between two hotels\r\nconnected by a road takes one unit of time.The hosts consider various\r\noptions for the location of the main hotels. For each option help the\r\norganizers to find minimal time.\r\n", "solutions": ["#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <set>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <memory.h>\n#include <string>\n#include <cstring>\n#include <sstream>\n#include <cstdlib>\n#include <ctime>\n#include <cassert>\n\nusing namespace std;\n\nconst int N = 200010;\n\nvector <int> g[N];\nint T, tin[N], tout[N];\nbool was[N];\nint pv[N], pr[N][20];\nint de[N], md[N];\n\nvoid dfs(int v) {\n  was[v] = true;\n  tin[v] = ++T;\n  md[v] = 0;\n  int sz = g[v].size();\n  for (int j = 0; j < sz; j++) {\n    int u = g[v][j];\n    if (!was[u]) {\n      pv[u] = v;\n      de[u] = de[v] + 1;\n      dfs(u);\n      if (md[u] + 1 > md[v]) {\n        md[v] = md[u] + 1;\n      }\n    }\n  }\n  tout[v] = ++T;\n} \n\nbool anc(int x, int y) {\n  return (tin[x] <= tin[y] && tout[y] <= tout[x]);\n}\n\nint lca(int x, int y) {\n  if (anc(x, y)) return x;\n  for (int j = 19; j >= 0; j--)\n    if (!anc(pr[x][j], y)) x = pr[x][j];\n  return pv[x];\n}\n\nint mx1[N], mx2[N], mx3[N];\nint km1[N], km2[N], km3[N];\n\nint diff[N], sum[N];\nint pdiff[N][20], psum[N][20];\n\nint ans;\n\ninline void update(int &a, int b) {\n  if (a < b) a = b;\n}\n\nint get_up(int v, int h, int add2 = 0) {\n  int add = de[v] + add2;\n  int mx = -123456789;\n  for (int j = 19; j >= 0; j--)\n    if (h & (1 << j)) {\n      if (pdiff[v][j] > mx) {\n        mx = pdiff[v][j];\n      }\n      v = pr[v][j];\n    }\n  update(ans, mx + add);\n  return v;\n}\n\nint get_up_weird(int v, int h, int add) {\n  int mx = -123456789;\n  for (int j = 19; j >= 0; j--)\n    if (h & (1 << j)) {\n      if (psum[v][j] > mx) {\n        mx = psum[v][j];\n      }\n      v = pr[v][j];\n    }\n  update(ans, mx + add);\n  return v;\n}\n\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  for (int i = 1; i <= n; i++) g[i].clear();\n  for (int i = 1; i <= n - 1; i++) {\n    int foo, bar;\n    scanf(\"%d %d\", &foo, &bar);\n    g[foo].push_back(bar);\n    g[bar].push_back(foo);\n  }\n  for (int i = 1; i <= n; i++) was[i] = false;\n  pv[1] = 1;\n  de[1] = 1;\n  T = 0;\n  dfs(1);\n  for (int v = 1; v <= n; v++) {\n    int sz = g[v].size();\n    mx1[v] = 0; km1[v] = 0;\n    mx2[v] = 0; km2[v] = 0;\n    mx3[v] = 0; km3[v] = 0;\n    for (int j = 0; j < sz; j++) {\n      int u = g[v][j];\n      if (pv[u] == v) {\n        int cur = md[u] + 1;\n        if (cur > mx1[v]) {\n          mx3[v] = mx2[v]; km3[v] = km2[v];\n          mx2[v] = mx1[v]; km2[v] = km1[v];\n          mx1[v] = cur; km1[v] = u;\n          continue;\n        }\n        if (cur > mx2[v]) {\n          mx3[v] = mx2[v]; km3[v] = km2[v];\n          mx2[v] = cur; km2[v] = u;\n          continue;\n        }\n        if (cur > mx3[v]) {\n          mx3[v] = cur; km3[v] = u;\n          continue;\n        }\n      }\n    }\n  }\n  diff[1] = sum[1] = -123456789;\n  for (int i = 2; i <= n; i++) {\n    if (km1[pv[i]] == i) {\n      diff[i] = mx2[pv[i]] - de[pv[i]];\n    } else {\n      diff[i] = mx1[pv[i]] - de[pv[i]];\n    }\n    sum[i] = diff[i] + 2 * de[pv[i]];\n  }\n  for (int i = 1; i <= n; i++) {\n    pr[i][0] = pv[i];\n    pdiff[i][0] = diff[i];\n    psum[i][0] = sum[i];\n  }\n  for (int j = 1; j < 20; j++)\n    for (int i = 1; i <= n; i++) {\n      pr[i][j] = pr[pr[i][j - 1]][j - 1];\n      pdiff[i][j] = pdiff[pr[i][j - 1]][j - 1];\n      if (pdiff[i][j - 1] > pdiff[i][j]) pdiff[i][j] = pdiff[i][j - 1];\n      psum[i][j] = psum[pr[i][j - 1]][j - 1];\n      if (psum[i][j - 1] > psum[i][j]) psum[i][j] = psum[i][j - 1];\n    }\n  int tt;\n  scanf(\"%d\", &tt);\n  while (tt--) {\n    int x, y;\n    scanf(\"%d %d\", &x, &y);\n    if (de[x] > de[y]) swap(x, y);\n    int z = lca(x, y);\n    int dx = de[x] - de[z];\n    int dy = de[y] - de[z];\n    ans = md[y];\n    if (x != z) {\n      if (md[x] > ans) ans = md[x];\n    }\n    int yy = get_up(y, (dy + dx - 1) / 2);\n    if (de[yy] - de[z] >= 2) {\n      get_up_weird(yy, de[yy] - de[z] - 1, de[x] - 2 * de[z]);\n    }\n    if (de[x] - de[z] >= 2) {\n      get_up(x, de[x] - de[z] - 1);\n    }\n    if (km1[z] != -1 && !anc(km1[z], x) && !anc(km1[z], y)) {\n      update(ans, mx1[z] + de[x] - de[z]);\n    }\n    if (km2[z] != -1 && !anc(km2[z], x) && !anc(km2[z], y)) {\n      update(ans, mx2[z] + de[x] - de[z]);\n    }\n    if (km3[z] != -1 && !anc(km3[z], x) && !anc(km3[z], y)) {\n      update(ans, mx3[z] + de[x] - de[z]);\n    }\n    get_up(z, de[z] - 1, de[x] - de[z]);\n    printf(\"%d\\n\", ans);\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "graphs", "trees"], "dificulty": "2800", "interactive": false}