{
    "link": "https://codeforces.com//contest/1446/problem/D1",
    "problemId": "797258",
    "problem_idx": "D1",
    "shortId": "1446D1",
    "contest_number": "1446",
    "problem_submissions": {
        "D2": [
            98488179,
            98479602,
            98464320,
            98467493,
            98464495,
            98464291,
            98477056,
            98482171,
            98496133,
            98469225,
            98470769,
            98488185,
            98481918,
            98482926,
            98479038
        ],
        "F": [
            98482236,
            98470414,
            98500090,
            98497700,
            98476856,
            98476210,
            98484136,
            98489678,
            98481827,
            98491554,
            98484171,
            98504348,
            98502497,
            98493379,
            98482100,
            98486768,
            98492674,
            98490163,
            98501084
        ],
        "E": [
            98475344,
            98498258,
            98500804,
            98495217,
            115705388,
            106404746
        ],
        "D1": [
            98457158,
            98460382,
            98456556,
            98456978,
            98464440,
            98464426,
            98466567,
            98470196,
            98464176,
            98472990,
            98478320,
            98479479,
            98482287,
            98493368,
            98460232,
            98466662,
            98460275,
            98466691,
            98472979,
            98478998
        ],
        "C": [
            98450996,
            98452840,
            98450218,
            98453943,
            98450946,
            98452214,
            98452223,
            98455447,
            98455497,
            98455239,
            98461758,
            98461392,
            98466665,
            98466780,
            98453580,
            98454283,
            98455611,
            98457408,
            98454698,
            98458074
        ],
        "B": [
            98446682,
            98448334,
            98447974,
            98447142,
            98452896,
            98448193,
            98448567,
            98451491,
            98449697,
            98450934,
            98454616,
            98452183,
            98446811,
            98455267,
            98447295,
            98450250,
            98449344,
            98450158,
            98450376,
            98449480
        ],
        "A": [
            98444992,
            98445944,
            98444925,
            98445065,
            98445347,
            98445666,
            98444771,
            98446535,
            98446420,
            98447534,
            98447441,
            98445935,
            98450208,
            98461593,
            98445099,
            98445257,
            98445487,
            98446333,
            98447509,
            98445254
        ]
    },
    "name": "D1. Frequency Problem  Easy Version ",
    "statement": "You are given an array [a_1, a_2,\r\ndots, a_n]. Your goal is to find the length of the longest subarray of\r\nthis array such that the most frequent value in it is unique. In other\r\nwords, you are looking for a subarray such that if the most frequent\r\nvalue occurs f times in this subarray, then at least 2 different values\r\nshould occur exactly f times.An array c is a subarray of an array d if c\r\ncan be obtained from d by deletion of several (possibly, zero or all)\r\nelements from the beginning and several (possibly, zero or all) elements\r\nfrom the end.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__);fflush(stderr);\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int N = 200200;\nconst int M = 101;\nint a[N];\nint d[N];\nint n;\nint cnt[N];\nint ans = 0;\n\nvoid solve(int b, int c) {\n\tfor (int i = 0; i <= n; i++)\n\t\td[i] = -1;\n\tint bal = cnt[b];\n\td[bal] = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (a[i] == b)\n\t\t\tbal--;\n\t\telse if (a[i] == c) bal++;\n\t\tif (d[bal] == -1) {\n\t\t\td[bal] = i + 1;\n\t\t} else {\n\t\t\tans = max(ans, i + 1 - d[bal]);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%d\", &a[i]);\n\t\tcnt[a[i]]++;\n\t}\n\tint b = 0;\n\tfor (int i = 0; i < M; i++) {\n\t\tif (cnt[i] > cnt[b])\n\t\t\tb = i;\n\t}\n\tfor (int i = 0; i < M; i++) {\n\t\tif (i == b) continue;\n\t\tsolve(b, i);\n\t}\n\tprintf(\"%d\\n\", ans);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D1. Frequency Problem  Easy Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/82067",
    "editorial": "For the easy version, it's sufficient to consider all pairs (D\n, V\n) in linear time, by using the standard algorithm which computes the longest interval with sum 0\n. Thus, we get a solution with complexity O(100?n\n)."
}