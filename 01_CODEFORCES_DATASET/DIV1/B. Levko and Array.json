{
    "link": "https://codeforces.com//contest/360/problem/B",
    "problemId": "3929",
    "problem_idx": "B",
    "shortId": "360B",
    "contest_number": "360",
    "problem_submissions": {
        "E": [
            5052621,
            5051976,
            5053848,
            5054838
        ],
        "C": [
            5051326,
            5048345,
            5049493,
            5049490,
            5050865,
            5049536,
            5050632,
            5051192,
            5051833,
            5051566,
            5051768,
            5048366,
            5049736
        ],
        "D": [
            5050607,
            5051524,
            5050936,
            5051425,
            5048585,
            5050472,
            5056022,
            5052000
        ],
        "B": [
            5045795,
            5044973,
            5048544,
            5051998,
            5045747,
            5046168,
            5051455,
            5046964,
            5045609,
            5046677,
            5046979,
            5047362,
            5047061,
            5045936,
            5047748,
            5047100,
            5046972,
            5046544
        ],
        "A": [
            5044762,
            5051854,
            5044798,
            5045200,
            5044446,
            5044824,
            5045696,
            5044827,
            5045266,
            5045205,
            5044960,
            5045344,
            5047058,
            5045224,
            5045590,
            5054975
        ]
    },
    "name": "B. Levko and Array",
    "statement": "Levko has an array that consists of integers: . But he doesn t like this\r\narray at all.Levko thinks that the beauty of the array directly depends\r\non value , which can be calculated by the formula: The less value is,\r\nthe more beautiful the array is.It s time to change the world and Levko\r\nis going to change his array for the better. To be exact, Levko wants to\r\nchange the values of at most array elements (it is allowed to replace\r\nthe values by any integers). Of course, the changes should make the\r\narray as beautiful as possible.Help Levko and calculate what minimum\r\nnumber he can reach.\r\n",
    "solutions": [
        "//#include <iostream>\n#include <fstream>\n#include <vector>\n#include <set>\n#include <map>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <cassert>\n#include <ctime>\n#include <algorithm>\n#include <sstream>\n#include <list>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <cstdlib>\n#include <cstdio>\n#include <iterator>\n#include <functional>\n#include <bitset>\n#define mp make_pair\n#define pb push_back\n\n#ifdef LOCAL\n#define eprintf(...) fprintf(stderr,__VA_ARGS__)\n#else\n#define eprintf(...)\n#endif\n\n#define TIMESTAMP(x) eprintf(\"[\"#x\"] Time : %.3lf s.\\n\", clock()*1.0/CLOCKS_PER_SEC)\n#define TIMESTAMPf(x,...) eprintf(\"[\" x \"] Time : %.3lf s.\\n\", __VA_ARGS__, clock()*1.0/CLOCKS_PER_SEC)\n\n#if ( _WIN32 || __WIN32__ )\n    #define LLD \"%I64d\"\n#else\n    #define LLD \"%lld\"\n#endif\n\nusing namespace std;\n\n#define TASKNAME \"B\"\n\n#ifdef LOCAL\nstatic struct __timestamper {\n    ~__timestamper(){\n        TIMESTAMP(end);\n    }\n} __TIMESTAMPER;\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\n\n\nconst int MAXN = 2100;\n\nint a[MAXN];\nint dp[MAXN];\nint n,k;\n\nint check(int maxv){\n    for (int i = 0; i < n; i++){\n        dp[i] = i;\n        for (int j = 0; j < i; j++)\n            if (abs(a[j] - a[i]) <= maxv * 1LL* (i - j))\n                dp[i] = min(dp[i], dp[j] + i - j - 1);\n//      eprintf(\"%d\\n\", dp[i]);\n    }\n\n    for (int i = 0; i < n; i++)\n        if (dp[i] + (n - i - 1) <= k)\n            return true;\n    return false;\n}\n\nint main(){\n  #ifdef LOCAL\n    freopen(TASKNAME\".in\",\"r\",stdin);\n    freopen(TASKNAME\".out\",\"w\",stdout);\n  #endif\n\n    scanf(\"%d%d\",&n,&k);\n\n    int cur = 0;\n\n    for (int i = 0; i < n; i++){\n        scanf(\"%d\",&a[i]);\n        if (i) cur = max(cur, abs(a[i] - a[i-1]));\n    }\n\n//    check(1);\n//    return 0;\n\n    int l = -1;\n    int r = cur;\n\n\n    while (r - l > 1){\n        int mid = l + (r - l) / 2;\n        if (check(mid))\n            r = mid;\n        else\n            l = mid;\n    }\n\n    printf(\"%d\\n\", r);      \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Levko and Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/9529",
    "editorial": "Letâs solve this problem using binary search. We need to check whether\r\nwe can achieve an array, when will be at most . Lets make dp. means\r\nminimal number of elements with indeces less than , which we need to\r\nchange, but we donât change -th element. Letâs iterate next element ,\r\nwhich we donât change. Then we know that we can change all elements\r\nbetween and . It is equivalent to such condition Difference between\r\nneighboring elements can be at most . The maximal possible difference\r\nincreases by exactly times between elements and , so this inequality is\r\ncorrect.\r\n",
    "hint": []
}