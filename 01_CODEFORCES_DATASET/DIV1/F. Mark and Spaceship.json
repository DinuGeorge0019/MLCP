{
    "link": "https://codeforces.com//contest/1854/problem/F",
    "problemId": "2119352",
    "problem_idx": "F",
    "shortId": "1854F",
    "contest_number": "1854",
    "problem_submissions": {
        "F": [
            216373971,
            217354172,
            217397292
        ],
        "D": [
            216310150,
            216289199,
            216321960,
            216339370,
            216308614,
            216330486,
            216327260,
            216330943,
            216339614,
            216349670,
            216345647,
            216345106,
            224815766,
            216547574,
            216366587
        ],
        "E": [
            216288237,
            216300028,
            216302036,
            216268441,
            216334493,
            216313354,
            216348664,
            216267007,
            216336955,
            216296297,
            216300153,
            216312130,
            216307051,
            216317337,
            216275749,
            216320776,
            216324267,
            216319909,
            216313856
        ],
        "C": [
            216273942,
            216261365,
            216266654,
            216275371,
            216264423,
            216276518,
            216281959,
            216283401,
            216256269,
            216270575,
            216274010,
            216274561,
            216269163,
            216301579,
            216282188,
            216295268,
            216271804,
            216301995
        ],
        "A2": [
            216264333,
            216379126,
            216379111,
            216318393,
            216275667,
            216295850,
            216251357,
            216257398,
            216276514,
            216268588,
            216307226,
            216280080,
            216286828,
            216278270,
            216337810,
            216308708,
            216280874,
            216295056,
            216275828
        ],
        "A1": [
            216258579,
            216252405,
            216255683,
            216241030,
            216251535,
            216248642,
            216276758,
            216268768,
            216282006,
            216259868,
            216249337,
            216287041,
            216244661,
            216249684,
            216243548,
            216258618,
            216238489,
            216275974
        ],
        "B": [
            216248516,
            216256912,
            216241500,
            216256089,
            216258617,
            216267337,
            216293058,
            216272552,
            216268356,
            216253180,
            216258044,
            216262545,
            216263544,
            216287092,
            216255748,
            216251265,
            216280599,
            216287965
        ]
    },
    "name": "F. Mark and Spaceship",
    "statement": "Mark loves to move fast. So he made a spaceship that works in\r\n4-dimensional space. He wants to use the spaceship to complete missions\r\nas fast as possible. In each mission, the spaceship starts at (0, 0, 0,\r\n0) and needs to end up at (a, b, c, d). To do this, he instructs the\r\nspaceship’s computer to execute a series of moves, where each move is a\r\nunit step in one of the eight cardinal directions: (\r\npm 1, 0, 0, 0), (0,\r\npm 1, 0, 0), (0, 0,\r\npm 1, 0), (0, 0, 0,\r\npm 1).Unfortunately, he also moved fast when building the spaceship, so\r\nthere is a bug in the spaceship’s code. The first move will be executed\r\nonce, the second move will be executed twice, the third move will be\r\nexecuted thrice, and so on. In general, the i-th move will be executed i\r\ntimes.For any four integers a, b, c, d, let f(a, b, c, d) be the minimum\r\nnumber of moves of a mission that ends up at (a, b, c, d). Compute the\r\nsum of f(a, b, c, d) over all points (with integer coordinates) such\r\nthat -A\r\nle a\r\nle A, -B\r\nle b\r\nle B, -C\r\nle c\r\nle C, -D\r\nle d\r\nle D.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC target (\"avx2\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=4007;\n\nint tab[10];\n\nll dp[5][4][4][nax];\n\nll wyn;\n\nvi normalize(vi wek)\n{\n\tfor (int &i : wek)\n\t\ti=abs(i);\n\tsort(wek.begin(), wek.end());\n\treturn wek;\n}\n\nvoid normalizuj(vi &wek)\n{\n\tfor (int &i : wek)\n\t\ti=abs(i);\n\tsort(wek.begin(), wek.end());\n}\n\nset<int> sumki;\n\nconst int k1=15;\nconst int k2=100;\n\nconst int dd=50;\nbitset<1217> moge[dd+1][k1][k1][k1];\n\nint spam[k1][k1][k1][1117];\n\nvoid brutuj()\n{\n\tfor (int i=0; i<=100; i++)\n\t\tsumki.insert(i*(i+1)/2);\n\t\n\tmoge[0][0][0][0][k2]=1;\n\tfor (int i=1; i<=dd; i++)\n\t{\n\t\tfor (int a=0; a<k1; a++)\n\t\t{\n\t\t\tfor (int b=0; b<k1; b++)\n\t\t\t{\n\t\t\t\tfor (int c=0; c<k1; c++)\n\t\t\t\t{\n\t\t\t\t\tfor (int p=0; p<3; p++)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (int w=-1; w<=1; w+=2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint na=a;\n\t\t\t\t\t\t\tint nb=b;\n\t\t\t\t\t\t\tint nc=c;\n\t\t\t\t\t\t\tif (p==0)\n\t\t\t\t\t\t\t\tna+=i*w;\n\t\t\t\t\t\t\tif (p==1)\n\t\t\t\t\t\t\t\tnb+=i*w;\n\t\t\t\t\t\t\tif (p==2)\n\t\t\t\t\t\t\t\tnc+=i*w;\n\t\t\t\t\t\t\tna=abs(na);\n\t\t\t\t\t\t\tnb=abs(nb);\n\t\t\t\t\t\t\tnc=abs(nc);\n\t\t\t\t\t\t\tif (na>=k1 || nb>=k1 || nc>=k1)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tmoge[i][na][nb][nc]|=moge[i-1][a][b][c];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmoge[i][a][b][c]|=(moge[i-1][a][b][c]<<i);\n\t\t\t\t\tmoge[i][a][b][c]|=(moge[i-1][a][b][c]>>i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint glupiefast[nax][4][4];\n\nint glupie(int chce, int a, int b)\n{\n\tint ochce=chce;\n\tif (glupiefast[ochce][a][b])\n\t\treturn glupiefast[ochce][a][b]-1;\n\tif (a==1 && b==1)\n\t{\n\t\tchce+=4;\n\t}\n\tif (a==1 && b==2)\n\t{\n\t\tif (!sumki.count(chce))\n\t\t\tchce+=4;\n\t}\n\tif (a==2 && b==2)\n\t{\n\t\tchce+=2;\n\t\tif (!sumki.count(chce))\n\t\t\tchce+=4;\n\t}\n\tint ret=0;\n\tint sum=0;\n\twhile(sum<chce || (sum&1)!=(chce&1))\n\t{\n\t\tret++;\n\t\tsum+=ret;\n\t}\n\tglupiefast[ochce][a][b]=ret+1;\n\treturn ret;\n}\n\nint pyt(int a, int b, int c, int d)\n{\n\tif (spam[a][b][c][d])\n\t\treturn spam[a][b][c][d]-1;\n\tfor (int i=0; i<=dd; i++)\n\t{\n\t\tif (moge[i][a][b][c][d+k2])\n\t\t{\n\t\t\tspam[a][b][c][d]=i+1;\n\t\t\treturn i;\n\t\t}\n\t}\n\tassert(0);\n}\n\nint main()\n{\n\tbrutuj();\n\tfor (int i=0; i<4; i++)\n\t\tscanf(\"%d\", &tab[i]);\n\tdp[0][3][3][0]=1;\n\tfor (int i=0; i<4; i++)\n\t{\n\t\tfor (int j=0; j<nax; j++)\n\t\t{\n\t\t\tfor (int a=0; a<4; a++)\n\t\t\t{\n\t\t\t\tfor (int b=a; b<4; b++)\n\t\t\t\t{\n\t\t\t\t\tif (!dp[i][a][b][j])\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int l=-tab[i]; l<=tab[i]; l++)\n\t\t\t\t\t{\n\t\t\t\t\t\tint na=a;\n\t\t\t\t\t\tint nb=b;\n\t\t\t\t\t\tint nc=min(abs(l), 3);\n\t\t\t\t\t\tif (nc<nb)\n\t\t\t\t\t\t\tswap(nc, nb);\n\t\t\t\t\t\tif (nb<na)\n\t\t\t\t\t\t\tswap(nb, na);\n\t\t\t\t\t\tdp[i+1][na][nb][j+abs(l)]+=dp[i][a][b][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i=0; i<nax; i++)\n\t\tfor (int a=0; a<4; a++)\n\t\t\tfor (int b=a; b<4; b++)\n\t\t\t\tif (dp[4][a][b][i])\n\t\t\t\t\twyn+=dp[4][a][b][i]*glupie(i, a, b);\n\t\n\tint ii=tab[0];\n\tfor (int i=0; i<=ii; i++)\n\t{\n\t\tint jj=tab[1];\n\t\tif (abs(i)>=k1)\n\t\t\tjj=min(jj, k1-1);\n\t\tfor (int j=0; j<=jj; j++)\n\t\t{\n\t\t\tint lll=tab[2];\n\t\t\tif (abs(i)>=k1 || abs(j)>=k1)\n\t\t\t\tlll=min(lll, k1-1);\n\t\t\tfor (int l=0; l<=lll; l++)\n\t\t\t{\n\t\t\t\tint kk=tab[3];\n\t\t\t\tif (abs(i)>=k1 || abs(j)>=k1 || abs(l)>=k1)\n\t\t\t\t\tkk=min(kk, k1-1);\n\t\t\t\tfor (int k=0; k<=kk; k++)\n\t\t\t\t{\n\t\t\t\t\tint mno=(1+(i>0))*(1+(j>0))*(1+(l>0))*(1+(k>0));\n\t\t\t\t\tvi wek={i, j, l, k};\n\t\t\t\t\tnormalizuj(wek);\n\t\t\t\t\tint s=0;\n\t\t\t\t\tfor (int p : wek)\n\t\t\t\t\t\ts+=p;\n\t\t\t\t\twyn-=mno*glupie(s, min(wek[0], 3), min(wek[1], 3));\n\t\t\t\t\twyn+=mno*pyt(wek[0], wek[1], wek[2], wek[3]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprintf(\"%lld\\n\", wyn);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\F. Mark and Spaceship.json",
    "editorial_link": "https://codeforces.com//blog/entry/118540",
    "editorial": "SolutionThe -dimensional case.Let us begin by cpnsidering the\r\n-dimensional version of the problem. The solution to this simpler\r\nversion provides the idea of the approach for the -dimensional\r\nversion.We want to reach . Can we do it with exactly moves? Two simple\r\nnecessary conditions are: , and shall have the same parity. It turns out\r\nthat this two conditions are also sufficient! One can prove it by\r\ninduction on as follows. If or or the statement is simple, thus we may\r\nassume .Without loss of generality we may assume . If , then the\r\nstatement follows by inductive hypothesis. Assume by contradiction that\r\nsuch inequality is false. If then we have a contradiction because .\r\nOtherwise and the contradiction is .Hence, we have shown:Lemma 1: The\r\npoint is reachable with exactly moves if and only if and has the same\r\nparity of .The -dimensional case.One may expect statement analogous to\r\nthe one of Lemma 1 to hold also when there are coordinates. It does not,\r\nbut it almost does and this is the crucial idea of the solution. More\r\nprecisely, the number of counter examples to such statement is rather\r\nsmall and we can find all of them. This is the intuition behind the\r\nfollowing definition.Definition: For , let be the set of points such\r\nthat and has the same parity of but is not reachable with exactly\r\nmoves.As an immediate consequence of the definition, we haveObservation:\r\nThe point is reachable with exactly moves if and only if and has the\r\nsame parity of and .Thanks to this observation, if one is able to\r\nefficiently find for all interesting values of , then solving the\r\nproblem is (comparatively) easy. The following lemma is our main tool\r\nfor this purpose.Lemma 2: Assume that with . Then, either or .Proof: The\r\nstrategy is the same adopted to show Lemma 1. In some sense, we are\r\nsaying that the inductive step works also in dimension , but the base\r\ncases donât.If , then it must be because if were reachable with moves\r\nthen were reachable with and we know that this is not true.Assume by\r\ncontradiction that . If then we reach the contradiction . Otherwise, and\r\nthus we reach the contradiction (for ).We can now describe the solution.\r\nAssume that we know . First of all, notice that it is then possible to\r\ndetermine in whether a point belongs to or not. To generate a list of\r\ncandidate elements for we proceed as follows: If , we simply iterate\r\nover all points with . Otherwise, we iterate over the points in and we\r\nconsider as candidate elements for the points that can be obtained by\r\nchanging the value of one coordinate by . Thanks to Lemma 2, we know\r\nthat this process finds all the elements in . Once are known, the\r\nproblem boils down to a (relatively) simple counting argument that we\r\nskip.One can verify that to handle correctly all points with coordinates\r\nup to it is necessary to compute for .One additional cheap trick is\r\nrequired to make sufficiently small and get a sufficiently fast\r\nsolution. Given , the instance of the problem is equivalent if we change\r\nthe signs of the coordinates or we change the order of the coordinates.\r\nHence we shall always ânormalizeâ the point so that . If we do this\r\nconsistently everywhere in the process, the solution becomes an order of\r\nmagnitude faster. In particular, this trick guarantees for all .Bonus\r\nquestion: Find an explicit closed form for the elements in for any . (in\r\nthis way one can solve the problem also with larger constraints on ; but\r\nit is tedious)\r\n",
    "hint": [
        "Hint 1 Solve the 2d version first.",
        "Hint 2 The 4d version is not too different from the 2d one.",
        "Hint 3 Find all the points such that the expected number of necessary moves is wrong.",
        "Hint 1 Suppose we limit the number line to m(Cannot move beyond it). What is the condition for block X to disappear? (Note that block X doesn't correspond to the number X, just some block that moves to the right)",
        "Hint 2 The trick is to notice one block X touches block X+1 (i.e block X correspond to some number k, and block X+1 is k+1, and we try to remove block X). This is equivalent to block X just disappearing. This is why having a static block at M+1 in hint 1 makes it easier to reason about. But what if block X+1 \"disappears\" first?",
        "Hint 3 Notice, this doesn't matter. When block X+1 \"disappears\", it must have touched block >= X+2, from the perspective of block X however, we can view it as the block >= X+2 disappearing and block X+1 just moving right."
    ]
}