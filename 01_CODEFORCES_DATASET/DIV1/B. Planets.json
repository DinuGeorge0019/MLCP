{"link": "https://codeforces.com//contest/229/problem/B", "problemId": "1891", "problem_idx": "B", "shortId": "229B", "contest_number": "229", "problem_submissions": {"E": [2282826, 2281727, 2285054, 2283563, 2285346, 2285087, 2285039, 2284707, 2406707, 2284567, 2285340, 2286716], "D": [2279442, 2279718, 2280046, 2280344, 2282950, 2281962, 2282776, 2282602, 2281974, 2283282, 2282070, 2283551, 2282480, 2282427, 2282188, 2281610, 2283171], "B": [2276814, 2277758, 2276080, 2280606, 2279078, 2281037, 2280028, 2279270, 2278615, 2280162, 2280493, 2279459, 2280601, 2279970, 2281238], "C": [2274858, 2273646, 2277243, 2277231, 2276597, 2280255, 2276975, 2277162, 2279947, 2277171, 2276063, 2277931, 2277827, 2275487, 2283199, 2278070], "A": [2274032, 2286414, 2274348, 2275349, 2275192, 2274716, 2276132, 2302218, 2286476, 2274187, 2274224, 2275364, 2275231, 2276851, 2274395, 2275579]}, "name": "B. Planets", "statement": "Goa\u2019uld Apophis captured Jack O\u2019Neill\u2019s team again! Jack himself was\r\nable to escape, but by that time Apophis\u2019s ship had already jumped to\r\nhyperspace. But Jack knows on what planet will Apophis land. In order to\r\nsave his friends, Jack must repeatedly go through stargates to get to\r\nthis planet.Overall the galaxy has planets, indexed with numbers from 1\r\nto . Jack is on the planet with index 1, and Apophis will land on the\r\nplanet with index . Jack can move between some pairs of planets through\r\nstargates (he can move in both directions); the transfer takes a\r\npositive, and, perhaps, for different pairs of planets unequal number of\r\nseconds. Jack begins his journey at time 0.It can be that other\r\ntravellers are arriving to the planet where Jack is currently located.\r\nIn this case, Jack has to wait for exactly 1 second before he can use\r\nthe stargate. That is, if at time another traveller arrives to the\r\nplanet, Jack can only pass through the stargate at time , unless there\r\nare more travellers arriving at time to the same planet.Knowing the\r\ninformation about travel times between the planets, and the times when\r\nJack would not be able to use the stargate on particular planets,\r\ndetermine the minimum time in which he can get to the planet with index\r\n.\r\n", "solutions": ["/*\n * b.cpp\n *\n *  Created on: 2012-10-1\n *      Author: mac\n */\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n#include <climits>\n#include <numeric>\n#include <vector>\n#include <queue>\n#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)\n#define REP(i,n) for(int i=0;i<n;++i)\nusing namespace std;\n\nconst int MAX_N = int(1e5) + 10;\nint n, m;\nstruct Edge {\n\tint t, c;\n\tEdge(int _t, int _c) :\n\t\t\tt(_t), c(_c) {\n\t}\n};\nvector<Edge> E[MAX_N];\nint d[MAX_N];\nbool used[MAX_N];\nvector<int> bad[MAX_N];\nconst int INF = ~0U >> 1;\n\nint main() {\n\tcin >> n >> m;\n\tfor (int i = 0; i < m; ++i) {\n\t\tint a, b, c;\n\t\tscanf(\"%d%d%d\", &a, &b, &c);\n\t\t--a, --b;\n\t\tE[a].push_back(Edge(b, c));\n\t\tE[b].push_back(Edge(a, c));\n\t}\n\tfor (int i = 0; i < n; ++i) {\n\t\tint k;\n\t\tscanf(\"%d\", &k);\n\t\tfor (int j = 0; j < k; ++j) {\n\t\t\tint t;\n\t\t\tscanf(\"%d\", &t);\n\t\t\tbad[i].push_back(t);\n\t\t}\n\t}\n\tfill(d, d + n, INF);\n\td[0] = 0;\n\tpriority_queue<pair<int, int> > que;\n\tque.push(make_pair(-d[0], 0));\n\twhile (!que.empty()) {\n\t\tint u = que.top().second; //arrive time\n\t\tque.pop();\n\t\tif (used[u])\n\t\t\tcontinue;\n\t\tused[u] = true;\n\t\tvector<int>&my = bad[u];\n\t\tint go = d[u];\n\t\tif (!my.empty()) {\n\t\t\twhile (binary_search(my.begin(), my.end(), go)) {\n\t\t\t\t++go;\n\t\t\t}\n\t\t}\n\t\tfor (vector<Edge>::iterator e = E[u].begin(); e != E[u].end(); ++e) {\n\t\t\tif (go + e->c < d[e->t]) {\n\t\t\t\td[e->t] = go + e->c;\n\t\t\t\tque.push(make_pair(-d[e->t], e->t));\n\t\t\t}\n\t\t}\n\t}\n\tif (d[n - 1] == INF)\n\t\tputs(\"-1\");\n\telse\n\t\tcout << d[n - 1] << endl;\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "data structures", "graphs", "shortest paths"], "dificulty": "1700", "interactive": false}