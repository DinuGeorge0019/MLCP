{"link": "https://codeforces.com//contest/1239/problem/C", "problemId": "445271", "problem_idx": "C", "shortId": "1239C", "contest_number": "1239", "problem_submissions": {"E": [63001388, 63007812, 63001212, 62998603, 62990662, 63117343, 63007827, 63012207, 63007702, 63021047, 63020870, 63040886], "D": [62993444, 63002135, 62996508, 63001623, 62995711, 62993045, 63000352, 62994034, 62999922, 62999498, 63002761, 62998053, 63001594, 63004252, 63000233, 63002463, 63005010, 63003977, 62998357], "B": [62989194, 62990960, 62989442, 62985984, 62996888, 63004499, 62991996, 62990441, 62993848, 62995834, 62994077, 62994574, 62993602, 63006960, 62992838, 62991953, 62991668, 63005078], "A": [62977858, 62978636, 62977879, 62980136, 62977536, 62989410, 62977583, 62981078, 62979832, 62980911, 62979401, 62984325, 62979180, 62979930, 62979559, 62978773, 62979723, 62981340, 62977762, 62982272], "F": [63121011, 63120329, 63015127, 63015060, 63092303, 63016718, 63113841, 63051142], "C": [62999891, 62991092, 62996408, 62989929, 62996641, 62997220, 62997894, 63001762, 62998162, 62999500, 63034189, 62998511, 62992701, 62998753, 62995987, 62998509, 62994268]}, "name": "C. Queue in the Train", "statement": "There are n seats in the train\u2019s car and there is exactly one passenger\r\noccupying every seat. The seats are numbered from 1 to n from left to\r\nright. The trip is long, so each passenger will become hungry at some\r\nmoment of time and will go to take boiled water for his noodles. The\r\nperson at seat i (1\r\nleq i\r\nleq n) will decide to go for boiled water at minute t_i.Tank with a\r\nboiled water is located to the left of the 1-st seat. In case too many\r\npassengers will go for boiled water simultaneously, they will form a\r\nqueue, since there can be only one passenger using the tank at each\r\nparticular moment of time. Each passenger uses the tank for exactly p\r\nminutes. We assume that the time it takes passengers to go from their\r\nseat to the tank is negligibly small. Nobody likes to stand in a queue.\r\nSo when the passenger occupying the i-th seat wants to go for a boiled\r\nwater, he will first take a look on all seats from 1 to i - 1. In case\r\nat least one of those seats is empty, he assumes that those people are\r\nstanding in a queue right now, so he would be better seating for the\r\ntime being. However, at the very first moment he observes that all seats\r\nwith numbers smaller than i are busy, he will go to the tank.There is an\r\nunspoken rule, that in case at some moment several people can go to the\r\ntank, than only the leftmost of them (that is, seating on the seat with\r\nsmallest number) will go to the tank, while all others will wait for the\r\nnext moment.Your goal is to find for each passenger, when he will\r\nreceive the boiled water for his noodles.\r\n", "solutions": ["#include <stdio.h>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <queue>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <map>\n#include <set>\n#include <complex>\n\n#define sz(v) ((int)((v).size()))\n#define all(v) (v).begin(), (v).end()\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> pii;\n\nconst int INF = 0x3c3c3c3c;\nconst ll LINF = 1ll*INF*INF*2;\n\nconst int N = 1000001;\nint n,m;\n\nvector<pii> v;\npriority_queue<int, vector<int>, greater<int>> Q;\nqueue<int> q;\nll ans[N];\nint main(void){\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i=0; i<n; i++) {\n\t\tint t;\n\t\tscanf(\"%d\", &t);\n\t\tv.push_back({t,i});\n\t}\n\tsort(all(v));\n\n\tll cur=-1;\n\tint idx=0;\n\tint cnt=0;\n\twhile(cnt<n) {\n\t\tif(q.empty() && Q.empty()) cur=v[idx].first;\n\t\t\n\t\twhile(idx<n && v[idx].first<=cur+m) {\n\t\t\tif(q.empty() || q.back()>v[idx].second) q.push(v[idx++].second);\n\t\t\telse Q.push(v[idx++].second);\n\t\t}\n\t\t\n\t\tcur+=m;\n\t\tans[q.front()]=cur; q.pop();\n\t\tcnt++;\n\n\t\tif(q.empty() && !Q.empty()) {\n\t\t\tq.push(Q.top()); Q.pop();\n\t\t}\n\t}\n\tfor(int i=0; i<n; i++) printf(\"%lld \", ans[i]);\n}\n"], "input": "", "output": "", "tags": ["data structures", "greedy", "implementation"], "dificulty": "2300", "interactive": false}