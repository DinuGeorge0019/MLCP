{
    "link": "https://codeforces.com//contest/150/problem/C",
    "problemId": "931",
    "problem_idx": "C",
    "shortId": "150C",
    "contest_number": "150",
    "problem_submissions": {
        "D": [
            1194790,
            1195710,
            1196410,
            1196643,
            1195734,
            1193495,
            1197438,
            1194800,
            1193784,
            1198921
        ],
        "C": [
            1192372,
            1192889,
            1193569,
            1192214,
            1192135,
            1196040,
            1193366,
            1195697,
            1197378,
            1191883,
            1193918,
            1192472,
            1192349
        ],
        "B": [
            1188186,
            2541924,
            1188277,
            1188125,
            1187707,
            1188412,
            1188356,
            1188767,
            1186964,
            1188247,
            1188294,
            1188405,
            1188647,
            1194611,
            1188404,
            1188925
        ],
        "A": [
            1187447,
            1187836,
            1187271,
            1187190,
            1197743,
            1187054,
            1187897,
            1187519,
            1187187,
            1187884,
            1187266,
            1187565,
            1187877,
            1187293,
            1188217
        ],
        "E": [
            1201858,
            1204781
        ]
    },
    "name": "C. Smart Cheater",
    "statement": "I guess there\u2019s not much point in reminding you that Nvodsk winters\r\naren\u2019t exactly hot. That increased the popularity of the public\r\ntransport dramatically. The route of bus has exactly stops (stop goes\r\nfirst on its way and stop goes last). The stops are positioned on a\r\nstraight line and their coordinates are . Each day exactly people use\r\nbus . For each person we know the number of the stop where he gets on\r\nthe bus and the number of the stop where he gets off the bus. A ticket\r\nfrom stop to stop () costs rubles. However, the conductor can choose no\r\nmore than one segment NOT TO SELL a ticket for. We mean that conductor\r\nshould choose C and D ( <= D) and sell a ticket for the segments [, ]\r\nand [, ], or not sell the ticket at all. The conductor and the passenger\r\ndivide the saved money between themselves equally. The conductor\u2019s\r\n\"untaxed income\" is sometimes interrupted by inspections that take place\r\nas the bus drives on some segment of the route located between two\r\nconsecutive stops. The inspector fines the conductor by rubles for each\r\npassenger who doesn\u2019t have the ticket for this route\u2019s segment.You know\r\nthe coordinated of all stops ; the numbers of stops where the -th\r\npassenger gets on and off, and (); the fine ; and also the probability\r\nof inspection on segment between the -th and the -th stop. The conductor\r\nasked you to help him make a plan of selling tickets that maximizes the\r\nmathematical expectation of his profit.\r\n",
    "solutions": [
        "#pragma comment (linker, \"/STACK:200000000\")\n#define _SECURE_SCL 0\n#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <ctime>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <deque>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <string>\n#include <stack>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long int64;\nconst int INF = (int) 1E9;\nconst int64 INF64 = (int64) 1E18;\nconst double EPS = 1E-9;\nconst double PI = acos((double)0) * 2;\n\n#define forn(i,n)  for (int i=0; i<int(n); ++i)\n#define ford(i,n)  for (int i=int(n)-1; i>=0; --i)\n#define fore(i,l,n)  for (int i=int(l); i<int(n); ++i)\n#define all(a)  a.begin(), a.end()\n#define fs  first\n#define sc  second\n#define pb  push_back\n#define mp  make_pair\n\n\nconst int MAXN = 310000;\n\n\nint n, m, c, x[MAXN], a[MAXN], b[MAXN], p[MAXN];\n\n\nbool read() {\n\tif (! (cin >> n >> m >> c))\n\t\treturn false;\n\tforn(i,n)\n\t\tscanf (\"%d\", &x[i]);\n\tforn(i,n-1)\n\t\tscanf (\"%d\", &p[i]);\n\tforn(i,m) {\n\t\tscanf (\"%d%d\", &a[i], &b[i]);\n\t\t--a[i], --b[i];\n\t}\n\treturn true;\n}\n\n\nstruct val {\n\tdouble sum, pref, suff, ans;\n\n\tval() { }\n\tval (double x) {\n\t\tsum = x;\n\t\tpref = suff = ans = max (0.0, x);\n\t}\n};\n\ndouble tval[MAXN];\nval t[4*MAXN];\n \nval unite (val l, val r) {\n\tval res;\n\tres.sum = l.sum + r.sum;\n\tres.pref = max (l.pref, l.sum + r.pref);\n\tres.suff = max (r.suff, r.sum + l.suff);\n\tres.ans = max (max (l.ans, r.ans), l.suff + r.pref);\n\treturn res;\n}\n \nvoid build (int v, int tl, int tr) {\n\tif (tl == tr)\n\t\tt[v] = val (tval[tl]);\n\telse {\n\t\tint tm = (tl + tr) / 2;\n\t\tbuild (v*2, tl, tm);\n\t\tbuild (v*2+1, tm+1, tr);\n\t\tt[v] = unite (t[v*2], t[v*2+1]);\n\t}\n}\n \nval get (int v, int tl, int tr, int l, int r) {\n\tif (l == tl && tr == r)\n\t\treturn t[v];\n\tint tm = (tl + tr) / 2;\n\tif (r <= tm)\n\t\treturn get (v*2, tl, tm, l, r);\n\tif (l > tm)\n\t\treturn get (v*2+1, tm+1, tr, l, r);\n\treturn unite (\n\t\tget (v*2, tl, tm, l, tm),\n\t\tget (v*2+1, tm+1, tr, tm+1, r)\n\t);\n}\n\n\nvoid solve() {\n\tforn(i,n-1)\n\t\ttval[i] = (x[i+1] - x[i]) / 2.0 - c * (p[i] / 100.0);\n\tbuild (1, 0, n-2);\n\n\tdouble ans = 0;\n\tforn(i,m) {\n\t\tdouble cbest = get (1, 0, n-2, a[i], b[i]-1) .ans;\n\t\tif (cbest < -EPS)\n\t\t\tthrow;\n\t\tans += cbest;\n\t}\n\tprintf (\"%.20lf\\n\", ans);\n}\n\n\nint main() {\n#ifdef SU2_PROJ\n\tfreopen (\"input.txt\", \"rt\", stdin);\n\tfreopen (\"output.txt\", \"wt\", stdout);\n\twhile (read())\n\t\tsolve();\n#else\n\tif (!read())  throw;\n\tsolve();\n#endif\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "math",
        "probabilities"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Smart Cheater.json",
    "editorial_link": "https://codeforces.com/blog/entry/3905?locale=en",
    "editorial": "First lets use the linearity of expected value and solve task\r\nindependently for each passanger. For each path segment (route between\r\nneighboring stations) we calculate expected value of profit in case we\r\ndo not sell a ticket for this segment. In case we sell it the\r\nexpectation of profit is 0. Now we only need to find the subsegment of\r\nsegment [a, b] of maximal sum for each passanger. That\u00e2\u0080\u0099s easy to do by\r\nthe segment tree, we only need to calc four values for each node: best\r\nthe maximal sum of elements on some subsegment max_left the maximal sum\r\non prefix max_right the maximal sum on suffix sum the sum of all\r\nelements\r\n"
}