{
    "link": "https://codeforces.com//contest/871/problem/B",
    "problemId": "128427",
    "problem_idx": "B",
    "shortId": "871B",
    "contest_number": "871",
    "problem_submissions": {
        "D": [
            31355895,
            31362333,
            31356242,
            31355369,
            31353137,
            31356572,
            31350479,
            31349876,
            31357261,
            31360056,
            31358528,
            31351384,
            31359864,
            31356104,
            31350689,
            31354294,
            31357470
        ],
        "C": [
            31344782,
            31345046,
            31354747,
            31341122,
            31347757,
            31339514,
            31345476,
            31343571,
            31352939,
            31343640,
            31347078,
            31353076,
            31354366,
            31357931,
            31352546,
            31348044,
            31356324,
            31348388,
            31344111,
            31340976
        ],
        "B": [
            31340037,
            31339973,
            31340246,
            31344130,
            31345296,
            31350867,
            31351902,
            31348642,
            31355117,
            31356940,
            31344400,
            31347404,
            31350125,
            31355555,
            31345128,
            31496128,
            31350503
        ],
        "A": [
            31334951,
            31334542,
            31334472,
            31334988,
            31334223,
            31337899,
            42189225,
            37478044,
            37460318,
            31335310,
            31335726,
            31334028,
            31336751,
            31333319,
            31341866,
            31334833,
            31352270,
            31340759,
            31335206,
            31350845,
            31354568,
            31333534,
            31334865
        ],
        "E": [
            31356130,
            31349981,
            31355349,
            31497224
        ]
    },
    "name": "B. Something with XOR Queries",
    "statement": "Jury has hidden a permutation of integers from to . You know only the\r\nlength . Remind that in permutation all integers are distinct.Let be the\r\ninverse permutation for , i.e. for all . The only thing you can do is to\r\nask of elements and , printing two indices and (not necessarily\r\ndistinct). As a result of the query with indices and youâ€™ll get the\r\nvalue , where denotes the operation. You can find the description of\r\noperation in notes.Note that some permutations can remain\r\nindistinguishable from the hidden one, even if you make all possible\r\nqueries. You have to compute the number of permutations\r\nindistinguishable from the hidden one, and print one of such\r\npermutations, making no more than queries.The hidden permutation does\r\nnot depend on your queries.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx\")\nusing namespace std;\n\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\n\n#define forn(i, a, n) for (int i = (int)(a); i < (int)(n); ++i)\n#define ford(i, a, n) for (int i = (int)(n - 1); i >= (int)(a); --i)\n#define fore(i, a, n) for (int i = (int)(a); i <= (int)(n); ++i)\n#define all(a) (a).begin(), (a).end()\n#define fs first\n#define sn second\n#define trace(a)\\\n    for (auto i : a) cerr << i << ' ';\\\n    cerr << '\\n'\n#define eb emplace_back\n\n#ifndef M_PI\nconst ld M_PI = acos(-1.0);\n#endif\n\ntemplate<typename T>\ninline void setmax(T& a, T b) {\n    if (a < b) a = b;\n}\n\ntemplate<typename T>\ninline void setmin(T& a, T b) {\n    if (a > b) a = b;\n}\n\nconst ld eps = 1e-9;\nconst int INF = 2000000000;\nconst ll LINF = 1ll * INF * INF;\nconst ll MOD = 1000000007;\n\nint get(int i, int j) {\n    cout << \"? \" << i << ' ' << j << endl;\n    int x;\n    cin >> x;\n    return x;\n}\n\nbool is_perm(vector<int> a) {\n    int n = a.size();\n    vector<int> cnt(n);\n    for (int x : a) {\n        if (x < 0 || x >= n)\n            return false;\n        if (cnt[x]) return false;\n        ++cnt[x];\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> a(n), b(n);\n    forn(i, 0, n) a[i] = get(0, i);\n    b[0] = a[0];\n    forn(i, 1, n) b[i] = get(i, 0);\n    vector<int> ans;\n    int cnt = 0;\n    forn(x, 0, n) {\n        vector<int> p1(n), p2(n);\n        forn(i, 0, n)\n            p2[i] = x ^ a[i];\n        forn(i, 0, n)\n            p1[i] = p2[0] ^ b[i];\n        bool ok = is_perm(p1) && is_perm(p2);\n        for (int i = 0; i < n && ok; ++i)\n            if (p1[p2[i]] != i) ok = false;\n        if (ok) {\n            ++cnt;\n            ans = p1;\n        }\n    }\n    cout << \"!\\n\";\n    cout << cnt << '\\n';\n    forn(i, 0, n) cout << ans[i] << ' ';\n    cout << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "interactive"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Something with XOR Queries.json",
    "editorial_link": "https://codeforces.com//blog/entry/55200",
    "editorial": "The statement: those and only those permutations whose answers to the queries (0,?i) and (i,?0) for all i coincide with the answers given to the program, are suitable for all possible queries.\n\nThe proof: , which means that with the answers to the queries (0,?i) and (i,?0) you can restore the answers to all other queries.\n\nIf we fix the value b0, then we can restore the whole permutation, since we know the answers to the queries (i,?0), and .\n\nYou can iterate through the value b0, restore the whole permutation, and if there were no contradictions in it (that is, every number from 0 to n?-?1 occurs 1 time) and for all i values  and  coincide with the answers given to the program, then this permutation is indistinguishable from the hidden permutation.\n\nThe answer is the number of such permutations, and one of such permutations.",
    "hint": []
}