{
    "link": "https://codeforces.com//contest/283/problem/A",
    "problemId": "2740",
    "problem_idx": "A",
    "shortId": "283A",
    "contest_number": "283",
    "problem_submissions": {
        "E": [
            3343251,
            3348070,
            3348555,
            3348542,
            3348428,
            3342667,
            3340580,
            3359842,
            3361070,
            3400988,
            3346304,
            3342157,
            3353623,
            9563319
        ],
        "D": [
            3341005,
            3335239,
            3338431,
            3338289,
            3339479,
            3336539,
            3339584,
            3338822,
            3341445,
            3341195,
            3339832,
            3341374,
            3340310,
            3343222,
            3352115,
            3341622,
            3342150,
            3335280
        ],
        "C": [
            3338427,
            3332232,
            3337306,
            3335630,
            3335688,
            3336408,
            3338282,
            3337561,
            3334033,
            3335068,
            3338901,
            3342456,
            3339089,
            3338935,
            3340473,
            3349673,
            3339598,
            3338693,
            3342436
        ],
        "A": [
            3335284,
            3336793,
            3332280,
            3331160,
            3331458,
            3331188,
            3331189,
            3331454,
            3337247,
            3331656,
            3332125,
            3331880,
            3333900,
            3331832,
            3331503,
            3331273,
            3331495,
            3332366,
            3339906
        ],
        "B": [
            3334513,
            3338857,
            3338541,
            3333624,
            3334182,
            3337249,
            3334768,
            3336364,
            3339602,
            3335198,
            3336023,
            3336506,
            3337264,
            3334508,
            3334275,
            3339765,
            3343648,
            3343572
        ]
    },
    "name": "A. Cows and Sequence",
    "statement": "Bessie and the cows are playing with sequences and need your help. They\r\nstart with a sequence, initially containing just the number 0, and\r\nperform operations. Each operation is one of the following: Add the\r\ninteger to the first elements of the sequence. Append an integer to the\r\nend of the sequence. (And hence the size of the sequence increases by 1)\r\nRemove the last element of the sequence. So, the size of the sequence\r\ndecreases by one. Note, that this operation can only be done if there\r\nare at least two elements in the sequence. After each operation, the\r\ncows would like to know the average of all the numbers in the sequence.\r\nHelp them!\r\n",
    "solutions": [
        "#pragma comment(linker, \"/STACK:512000000\")\n#define _CRT_SECURE_NO_DEPRECATE\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cassert>\n#include <climits>\n#include <ctime>\n#include <numeric>\n#include <vector>\n#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <cstring>\n#include <iomanip>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <list>\n#include <map>\n#include <string>\n#include <sstream>\n#include <set>\n#include <stack>\n#include <queue>\nusing namespace std;\ntemplate<class T> inline T sqr(T x) { return x * x; }\ntemplate<class T> inline string tostr(const T & x) { stringstream ss; ss << x; return ss.str(); }\ntypedef long long lng;\ntypedef unsigned long long ulng;\ntypedef unsigned int uint;\ntypedef unsigned char uchar;\ntypedef long double ld;\ntypedef pair<int, int> PII;\ntypedef pair<PII, int> PIII;\ntypedef pair<lng, lng> PLL;\ntypedef pair<lng, int> PLI;\ntypedef pair<ld, ld> PDD;\n#define left asdleft\n#define right asdright\n#define link asdlink\n#define unlink asdunlink\n#define next asdnext\n#define prev asdprev\n#define y0 asdy0\n#define y1 asdy1\n#define mp make_pair\n#define pb push_back\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define clr(ar,val) memset(ar, val, sizeof(ar))\n#define istr stringstream\n#define forn(i,n) for(int i=0;i<(n);++i)\n#define forv(i,v) forn(i,sz(v))\n#define X first\n#define Y second\nconst double EPS = 1e-6;\nconst int INF = 1000*1000*1000;\nconst char CINF = 102;\nconst lng LINF = INF * 1ll * INF;\nconst ld PI = 3.1415926535897932384626433832795;\n\nlng val[210000];\nlng add[210000];\nlng sum;\nint n;\n\nint main() {\n#ifdef __ASD__\n\tfreopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n#endif\n\n\tn=1;\n\t\n\tint tc;\n\tcin>>tc;\n\tforn(qqq,tc){\n\t\tint t;\n\t\tscanf(\"%d\",&t);\n\t\tif(t==1){\n\t\t\tint a,x;\n\t\t\tscanf(\"%d%d\",&a,&x);\n\t\t\t--a;\n\t\t\tadd[a]+=x;\n\t\t\tsum+=(a+1LL)*x;\n\t\t}else if(t==2){\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tval[n]=x;\n\t\t\tadd[n]=0;\n\t\t\tsum+=x;\n\t\t\t++n;\n\t\t}else if(t==3){\n\t\t\t--n;\n\t\t\tsum-=val[n]+add[n];\n\t\t\tadd[n-1]+=add[n];\n\t\t}else exit(12);\n\t\tprintf(\"%.15lf\\n\",1.*sum/n);\n\t}\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "implementation"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Cows and Sequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/7037",
    "editorial": "If you know some math, you can actually solve this problem in  (!!!) You can show that the answer is ? (p?-?1) where ? (n) is the number of positive integers i less than to n with gcd(i,?n)?=?1. To prove this we first show that there is always at least one primitive root  for all primes p. (This is a fairly well known result so I won\u0092t prove it here, but you can find many proofs online) So now assume g is a primitive root  Then, the set {g,?g2,?... gp?-?1} is congruent to the set {1,?2,?... ,?p?-?1}. Furthermore, its not hard to show that gi is a primitive root if and only if gcd(i,?p?-?1)?=?1,? (try it!) hence our formula ? (p?-?1). ? (n) can be computed by getting the prime factors of n,? since  so this gives us our  algorithm. :)"
}