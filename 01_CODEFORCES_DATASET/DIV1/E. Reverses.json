{
    "link": "https://codeforces.com//contest/906/problem/E",
    "problemId": "140848",
    "problem_idx": "E",
    "shortId": "906E",
    "contest_number": "906",
    "problem_submissions": {
        "D": [
            149029866,
            33557818,
            33559276,
            33563941,
            33561236,
            33558964,
            33560338,
            33552737,
            33564592,
            33555169,
            33563596,
            33557368,
            33574046,
            33570274,
            33569097,
            33952208,
            33561210,
            33554741,
            33558804,
            33566104,
            33558203,
            33550675
        ],
        "E": [
            33563788,
            51774603,
            33570251,
            42678760,
            33642683,
            33642639,
            57252155,
            33595209
        ],
        "A": [
            33559632,
            33542429,
            33541419,
            33540284,
            33543709,
            33540394,
            33541815,
            33539940,
            33541391,
            33544813,
            33540734,
            33541098,
            33542736,
            33541277,
            33565456,
            33540685,
            33540110,
            33569386
        ],
        "C": [
            33554104,
            33555026,
            33556927,
            33558399,
            33566145,
            33563804,
            33559596,
            33558825,
            33566746,
            33569757,
            33570264,
            33560203,
            33561015,
            33582668,
            33568743,
            33550511,
            33571601,
            33568875,
            33565260
        ],
        "B": [
            33543854,
            33551699,
            33549379,
            33555394,
            33548541,
            33552331,
            33565116,
            33549927,
            33571875,
            33555675,
            33564877,
            33554448,
            33562774,
            33555252,
            33583579,
            33583372,
            33554912,
            33572090
        ]
    },
    "name": "E. Reverses",
    "statement": "Hurricane came to Berland and to suburbs Stringsvill. You are going to\r\nit to check if it’s all right with you favorite string. Hurrinace broke\r\nit a bit by reversing some of its non-intersecting substrings. You have\r\na photo of this string before hurricane and you want to restore it to\r\noriginal state using reversing minimum possible number of its substrings\r\nand find out which substrings you should reverse.You are given a string\r\noriginal state of your string and string state of the string after\r\nhurricane. You should select non-intersecting substrings of in such a\r\nway that after reverse of these substrings string will be equal and is\r\nminimum possible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nconst int N=1001000,inf=1<<30;\nPII dp[N],pd[N];\nint n;\nchar s[N],p[N],q[N];\nstruct seg {\n\tint a,k,sz;\n};\nvector<seg> G;\nvoid upd(PII &a,PII b) { a.fi=min(a.fi,b.fi); a.se=min(a.se,b.se);}\nint main() {\n\tscanf(\"%s\",p+1);\n\tscanf(\"%s\",q+1);\n\tint m=strlen(p+1);\n\trep(i,1,2*m+1) if (i%2==1) s[i]=p[i/2+1]; else s[i]=q[i/2];\n\tn=2*m;\n\tdp[0]=mp(0,0);\n\trep(j,1,n+1) {\n\t\tvector<seg> G1,G2;\n\t\tfor (auto p:G) {\n\t\t\tif (p.a>1&&s[p.a-1]==s[j]) G1.pb((seg){p.a-1,p.k,p.sz});\n\t\t}\n\t\tint r=-j;\n\t\tfor (auto p:G1) {\n\t\t\tif (p.a-r!=p.k) {\n\t\t\t\tG2.pb((seg){p.a,p.a-r,1});\n\t\t\t\tif (p.sz>1) G2.pb((seg){p.a+p.k,p.k,p.sz-1});\n\t\t\t} else G2.pb(p);\n\t\t\tr=p.a+(p.sz-1)*p.k;\n\t\t}\n\t\tif(j>1&&s[j-1]==s[j]) G2.pb((seg){j-1,j-1-r,1}),r=j-1;\n\t\tG2.pb((seg){j,j-r,1});\n\t\tG.clear();\n\t\tseg ss=G2[0]; G2.erase(G2.begin());\n\t\tfor (auto p:G2) {\n\t\t\tif (p.k==ss.k) ss.sz+=p.sz;\n\t\t\telse G.pb(ss),ss=p;\n\t\t}\n\t\tG.pb(ss);\n\t\tbool val=1;\n\t\tdp[j]=mp(inf,0);\n\t\tif (j%2==1) val=0;\n\t\tif (s[j]==s[j-1]) dp[j]=mp(dp[j-2].fi,j-2);\n\t\tfor (auto p:G) {\n\t\t\tr=p.a+(p.sz-1)*p.k;\n\t\t\tPII c=mp(dp[r-1].fi+1,r-1);\n\t\t\tif (p.sz>1) c=min(c,pd[p.a-p.k]);\n\t\t\tif (p.k<=p.a) pd[p.a-p.k]=c;\n\t\t\tif (val) dp[j]=min(dp[j],c);\n\t\t}\n\t}\n\tif (dp[n].fi>m) puts(\"-1\");\n\telse {\n\t\tprintf(\"%d\\n\",dp[n].fi);\n\t\tint u=n;\n\t\twhile (u) {\n\t\t\tint v=dp[u].se;\n\t\t\tif (v<u-2) {\n\t\t\t\tprintf(\"%d %d\\n\",v/2+1,u/2);\n\t\t\t}\n\t\t\tu=v;\n\t\t}\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "string suffix structures",
        "strings"
    ],
    "dificulty": "3300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Reverses.json",
    "editorial_link": "https://codeforces.com//blog/entry/56601",
    "editorial": "After inverses we have transform . Consider operator for strings of\r\nequal lengths. Under such operator string will turn into where is string\r\nwhich has all characters doubled and is arbitrary palindrome of even\r\nlength. Letâs move through letters from left to right and keep minimum\r\nnumber on which we can split current prefix. Last letter will either be\r\nin some palindrome or is doubled. For doubled letters we consider . As\r\nfor palindromes of even length, one can fit standard algorithm of\r\nsplitting string into the minimum number of palindromes in such way that\r\nit will consider only splittings on even palindromes. For example, one\r\ncan consider only such spits that every palindrome in the split end up\r\nin even index.\r\n",
    "hint": []
}