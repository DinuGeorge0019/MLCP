{"link": "https://codeforces.com//contest/1815/problem/B", "problemId": "1871719", "problem_idx": "B", "shortId": "1815B", "contest_number": "1815", "problem_submissions": {"F": [201555670, 201558612, 201561386, 201567730, 201566757, 202046482, 201726445, 201935453, 201585873], "E": [201530172, 201528832, 201551207, 201544435, 201543833, 201554402, 201555894, 201557703, 201554929, 201556101, 201557247, 201555003, 201557950, 201556139, 201563294, 201546853, 201542261, 201546492, 201570815], "D": [201513083, 201506968, 201521370, 201517487, 201522017, 201533871, 201533067, 201531357, 201527346, 201537489, 201539887, 201539975, 201543678, 201546232, 201566677, 201568923, 201534451], "C": [201497483, 201499771, 201506268, 201502220, 201510933, 201510356, 201506402, 201517502, 201515562, 201517401, 201523915, 201524806, 201533994, 201523878, 201503778, 201512320, 201510486, 201513744], "B": [201489690, 201490417, 201495395, 201494655, 201496814, 201493671, 201494756, 201502664, 201501592, 201503253, 201515920, 201510149, 201510749, 201492437, 201503376, 201496616, 201500693], "A": [201483243, 201480897, 201480866, 201480768, 201483195, 201480859, 201480836, 201481081, 201480782, 201481965, 201483607, 201482857, 201481459, 201480707, 201481969, 201481110, 201483462]}, "name": "B. Sum Graph", "statement": "There is a hidden permutation p_1, p_2,\r\ndots, p_n. Consider an undirected graph with n nodes only with no edges.\r\nYou can make two types of queries: Specify an integer x satisfying 2\r\nle x\r\nle 2n. For all integers i (1\r\nle i\r\nle n) such that 1\r\nle x-i\r\nle n, an edge between node i and node x-i will be added. Query the\r\nnumber of in the shortest path between node p_i and node p_j. As the\r\nanswer to this question you will get the number of edges in the shortest\r\npath if such a path exists, or -1 if there is no such path. Note that\r\nyou can make both types of queries in order.Within 2n queries (including\r\ntype 1 and type 2), guess two possible permutations, at least one of\r\nwhich is p_1, p_2,\r\ndots, p_n. You get accepted if at least one of the permutations is\r\ncorrect. You are allowed to guess the same permutation twice.A\r\npermutation of length n is an array consisting of n distinct integers\r\nfrom 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray), and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray).\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 09.04.2023 10:53:08       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n;\n    cin >> n;\n    cout << \"+ \" << n << endl;\n    int foo;\n    cin >> foo;\n    cout << \"+ \" << n + 1 << endl;\n    cin >> foo;\n    auto Ask = [&](int x, int y) {\n      cout << \"? \" << x + 1 << \" \" << y + 1 << endl;\n      int ret;\n      cin >> ret;\n      return ret;\n    };\n    int who = 0;\n    int dist = 0;\n    for (int i = 1; i < n; i++) {\n      int d = Ask(0, i);\n      if (d > dist) {\n        dist = d;\n        who = i;\n      }\n    }\n    vector<pair<int, int>> a(n);\n    for (int i = 0; i < n; i++) {\n      a[i].first = (i == who ? 0 : Ask(i, who));\n      a[i].second = i;\n    }\n    sort(a.begin(), a.end());\n    vector<int> seq(n);\n    int L = 0, R = n - 1;\n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        seq[i] = R--;\n      } else {\n        seq[i] = L++;\n      }\n    }\n    vector<int> p1(n);\n    vector<int> p2(n);\n    for (int i = 0; i < n; i++) {\n      p1[a[i].second] = seq[i];\n      p2[a[i].second] = seq[n - 1 - i];\n    }\n    cout << \"!\";\n    for (int i = 0; i < n; i++) {\n      cout << \" \" << p1[i] + 1;\n    }\n    for (int i = 0; i < n; i++) {\n      cout << \" \" << p2[i] + 1;\n    }\n    cout << endl;\n    cin >> foo;\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "constructive algorithms", "graphs", "implementation", "interactive", "shortest paths", "trees"], "dificulty": "2000", "interactive": false}