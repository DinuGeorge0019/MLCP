{
    "link": "https://codeforces.com//contest/878/problem/E",
    "problemId": "130661",
    "problem_idx": "E",
    "shortId": "878E",
    "contest_number": "878",
    "problem_submissions": {
        "E": [
            31763989,
            31766344,
            32084568
        ],
        "D": [
            31756901,
            31762689,
            31754129,
            31756452,
            31772004,
            31761487,
            31761339,
            31761633,
            31767096,
            31789313,
            31769411,
            31767240,
            31764633,
            31929002,
            31911110,
            31754793
        ],
        "C": [
            31752735,
            31757112,
            31751479,
            31747354,
            31752922,
            31752815,
            31757860,
            31761336,
            31759682,
            31761695,
            31751021,
            31760902,
            31758288,
            31764916,
            31764825,
            31755837
        ],
        "B": [
            31745139,
            31746290,
            31753553,
            31777437,
            31754012,
            31756298,
            31752132,
            31754987,
            31751846,
            31753351,
            31760932,
            31770059,
            31750086,
            31755233,
            31753552,
            31762144
        ],
        "A": [
            31741277,
            31741357,
            31741777,
            31741474,
            31742096,
            31741956,
            31741731,
            31741469,
            31743565,
            31743908,
            31741393,
            31741983,
            31741174,
            31745067,
            31741499,
            31745657,
            31745328,
            31741742,
            31742765
        ]
    },
    "name": "E. Numbers on the blackboard",
    "statement": "A sequence of integers is written on a blackboard. Soon Sasha will come\r\nto the blackboard and start the following actions: let and be two\r\nadjacent numbers ( before ), then he can remove them and write instead\r\nof them. He will perform these operations until one number is left.\r\nSasha likes big numbers and will get the biggest possible number.Nikita\r\nwants to get to the blackboard before Sasha and erase some of the\r\nnumbers. He has options, in the option he erases all numbers to the left\r\nof the -th number and all numbers to the right of -th number, i. e. all\r\nnumbers between the -th and the -th, inclusive, remain on the\r\nblackboard. For each of the options he wants to know how big Sasha’s\r\nfinal number is going to be. This number can be very big, so output it\r\nmodulo .\r\n",
    "solutions": [
        "#include <stdio.h>  \n#include <algorithm>  \n#include <assert.h>\n#include <bitset>\n#include <cmath>  \n#include <complex>  \n#include <deque>  \n#include <functional>  \n#include <iostream>  \n#include <limits.h>  \n#include <map>  \n#include <math.h>  \n#include <queue>  \n#include <set>  \n#include <stdlib.h>  \n#include <string.h>  \n#include <string>  \n#include <time.h>  \n#include <unordered_map>  \n#include <unordered_set>  \n#include <vector>  \n\n#pragma warning(disable:4996)  \n#pragma comment(linker, \"/STACK:336777216\")  \nusing namespace std;\n\n#define mp make_pair  \n#define all(x) (x).begin(), (x).end()  \n#define ldb ldouble\n\ntypedef tuple<int, int, int> t3;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\n\nint IT_MAX = 1 << 17;\nconst ll MOD = 1000000007;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 0x3f3f3f3f3f3f3f3f;\nconst db PI = acos(-1);\nconst db ERR = 1e-8;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<n;i++)\n\nll mul_inv(ll a, ll b = MOD) {\n\tll t1 = a, t2 = b, t3;\n\tll v1 = 1, v2 = 0, v3;\n\twhile (t2 != 1) {\n\t\tll x = t1 / t2;\n\t\tt3 = t1 - x*t2;\n\t\tv3 = v1 - x*v2;\n\t\tt1 = t2, t2 = t3;\n\t\tv1 = v2, v2 = v3;\n\t}\n\treturn (v2 + b) % b;\n}\n\nll in[100050];\nll sum[100050];\nll po2[100050];\nll getsum(int p1, int p2) {\n\tll rv = sum[p2] - sum[p1 - 1];\n\trv = (rv + MOD) % MOD;\n\trv = rv * mul_inv(po2[p1 - 1]) % MOD;\n\treturn rv;\n}\n\nll nxt[100050][2];\n\nll par[20][100050][2];\nint main() {\n\tint N, Q, i, j;\n\tscanf(\"%d %d\", &N, &Q);\n\n\tpo2[0] = 1;\n\tfor (i = 1; i <= N; i++) po2[i] = po2[i - 1] * 2 % MOD;\n\tfor (i = 1; i <= N; i++) {\n\t\tscanf(\"%lld\", &in[i]);\n\t\tsum[i] = sum[i - 1] + in[i] * po2[i];\n\t\tsum[i] %= MOD;\n\t\tsum[i] += MOD;\n\t\tsum[i] %= MOD;\n\t}\n\tfor (i = 1; i <= N; i++) {\n\t\tll s = 0;\n\t\tfor (j = i; j >= 1; j--) {\n\t\t\ts = 2 * s + in[j];\n\t\t\tif (s <= 0) {\n\t\t\t\tnxt[i][0] = j - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (s >= 1000000000) break;\n\t\t}\n\t\tnxt[i][1] = getsum(nxt[i][0] + 1, i);\n\t}\n\n\tfor (i = 0; i <= N; i++) par[0][i][0] = nxt[i][0], par[0][i][1] = nxt[i][1];\n\tfor (i = 1; i < 20; i++) {\n\t\tfor (j = 1; j <= N; j++) {\n\t\t\tint np = par[i - 1][j][0];\n\t\t\tpar[i][j][0] = par[i - 1][np][0];\n\t\t\tpar[i][j][1] = (par[i - 1][j][1] + par[i - 1][np][1]) % MOD;\n\t\t}\n\t}\n\n\twhile (Q--) {\n\t\tint l, r;\n\t\tscanf(\"%d %d\", &l, &r);\n\t\tif (l == r) {\n\t\t\tprintf(\"%lld\\n\", (in[l] + 2 * MOD) % MOD);\n\t\t\tcontinue;\n\t\t}\n\n\t\tll ans = (in[l] + MOD) % MOD;\n\t\tl++;\n\t\n\t\tfor (i = 19; i >= 0; i--) {\n\t\t\tint p = par[i][r][0];\n\t\t\tif (p >= l) {\n\t\t\t\tans = (ans + par[i][r][1]) % MOD;\n\t\t\t\tr = p;\n\t\t\t}\n\t\t}\n\t\tans += getsum(l, r);\n\t\tprintf(\"%lld\\n\", ans % MOD);\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp"
    ],
    "dificulty": "3300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Numbers on the blackboard.json",
    "editorial_link": "https://codeforces.com//blog/entry/55435",
    "editorial": "Letâs find a strategy for Sasha. His result can be represented in the\r\nform , where , for .For all satisfying these conditions he can obtain\r\nsuch result. We prove this by induction. For isât obvious. Let . Find\r\nthe greatest such that . It always exists cause . By the induction\r\nhypothesis we can get and . Do this and merge them with the last\r\nmove.Now we describe the strategy. Let the last number be negative. Then\r\nSasha wants to minimize . He always can use . If tha last number is\r\nnon-negative, he can use . In this case, Sasha first merges the last two\r\nnumbers. Thus, the sequence consists of several blocks, in each of which\r\n, and each of the blocks except the first begins with 1.Now we need to\r\nanswer queries. We will do it offline. On the step add the number and\r\nand answer all queries with . We will support the blocks for the query\r\n.What happens when we add a number? If itâs negative, it simply forms a\r\nseparate block. Otherwise it becomes the end of some block. It is easy\r\nto see that the new block is the union of several old blocks.How to\r\nanswer queries? is the union of some blocks and a suffix of another\r\nblock. We can see that this is the partition into blocks for our\r\nquery.How to do it fast? We will store the boundaries of blocks to do\r\nbinary search on them and find the block in which the lies. We need to\r\nstore the results for each block and prefix sums of these results. Also\r\nwe need to find sums to find out results for suffixes.Each step is\r\nprocessed in except for merging blocks. But we create at most one block\r\non each step, so amortized time of each step is .Also in this problem we\r\nneed to be careful with overflows. Although we need to find the result\r\nmodulo some prime, in some places the sign is important. We can use that\r\nif is more than maximum , then is also big and have the same sign.BONUS:\r\nsolve this problem online. : solve it in .\r\n",
    "hint": []
}