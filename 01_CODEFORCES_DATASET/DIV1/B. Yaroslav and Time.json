{"link": "https://codeforces.com//contest/301/problem/B", "problemId": "2970", "problem_idx": "B", "shortId": "301B", "contest_number": "301", "problem_submissions": {"E": [3682464, 3681114, 4247515], "D": [3677749, 3677901, 3677912, 3678115, 3677526, 3679062, 3677723, 3677856, 3679979, 3679661, 3680028, 3677527, 3675796, 3683550, 3682695, 3682463, 3677874, 3677050, 3678347, 3678222, 3680032], "B": [3675021, 3674605, 3676912, 3676771, 3675890, 3677633, 3681284, 3684667, 3684661, 3684653, 3684635, 3678354, 3678161, 3680771, 3678425, 3681027, 3676146, 3677734, 3676031, 3675130], "A": [3674025, 3673473, 3675526, 3674656, 3679541, 3673757, 3674334, 3676412, 3677059, 3674545, 3673945, 3673341, 3675089, 3673194, 3673129, 3673585, 3673171, 3675681], "C": [3679265, 3679801, 3681253, 3680718, 3680819, 3680781, 3681151, 3681956, 3682034, 3680652, 3688897, 3683565, 3679128, 3680822]}, "name": "B. Yaroslav and Time", "statement": "Yaroslav is playing a game called \"Time\". The game has a timer showing\r\nthe lifespan he\u2019s got left. As soon as the timer shows 0, Yaroslav\u2019s\r\ncharacter dies and the game ends. Also, the game has clock stations,\r\nstation number is at point of the plane. As the player visits station\r\nnumber , he increases the current time on his timer by . The stations\r\nare for one-time use only, so if the player visits some station another\r\ntime, the time on his timer won\u2019t grow.A player spends time units to\r\nmove between stations, where is the distance the player has covered and\r\nis some constant. The distance between stations and is determined as\r\n.Initially, the player is at station number , and the player has\r\nstrictly more than zero and strictly less than one units of time. At\r\nstation number one unit of money can increase the time on the timer by\r\none time unit (you can buy only integer number of time units).Now\r\nYaroslav is wondering, how much money he needs to get to station . Help\r\nYaroslav. Consider the time to buy and to increase the timer value\r\nnegligibly small.\r\n", "solutions": ["#define _CRT_SECURE_NO_DEPRECATE\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <vector>\n#include <queue>\n#include <iostream>\n#include <iterator>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <sstream>\n#include <fstream>\n#include <ctime>\n#include <cstring>\n#include <functional>\n#include <bitset>\n#pragma comment(linker, \"/STACK:66777216\")\nusing namespace std;\n#define pb push_back\n#define ppb pop_back\n#define pi 3.1415926535897932384626433832795028841971\n#define mp make_pair\n#define x first\n#define y second\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define INF 1000000000\n#define FOR(i,a,b) for (int _n(b), i(a); i <= _n; i++)\n#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--)\n#define all(c) (c).begin(), (c).end()\n#define SORT(c) sort(all(c))\n#define rep(i,n) FOR(i,1,(n))\n#define rept(i,n) FOR(i,0,(n)-1)\n#define L(s) (int)((s).size())\n#define C(a) memset((a),0,sizeof(a))\n#define VI vector <int>\n#define ll long long\n\nint a,b,c,d,n,m,k;\npii mas[102];\nint can[102], best[102];\ninline bool check(int xx) {\n\tmemset(best, -1, sizeof(best));\n\tbest[0] = xx;\n\tqueue<int> q;\n\tq.push(0);\n\twhile (!q.empty()) {\n\t\tint v = q.front();\n\t\tq.pop();\n\t\trept(i, n) {\n\t\t\tif (i == v) continue;\n\t\t\tif (i == 0) continue;\n\t\t\tint need = d * (abs(mas[i].x - mas[v].x) + abs(mas[i].y - mas[v].y));\n\t\t\tif (need > best[v]) continue;\n\t\t\tint cur = best[v] - need + can[i];\n\t\t\tif (cur > best[i]) {\n\t\t\t\tbest[i] = cur;\n\t\t\t\tq.push(i);\n\t\t\t}\n\t\t}\n\t}\n\treturn best[n - 1] != -1;\n}\nint main() {\n\t//freopen(\"input.txt\",\"r\",stdin);\n\t//freopen(\"output.txt\",\"w\",stdout);\n\tscanf(\"%d%d\", &n, &d);\n\tFOR(i, 1, n - 2) {\n\t\tscanf(\"%d\", &can[i]);\n\t}\n\trept(i, n) {\n\t\tscanf(\"%d%d\", &mas[i].x, &mas[i].y);\n\t}\n\n\tint l = -1, r = INF;\n\twhile (r - l > 1) {\n\t\tint xx = (r + l) / 2;\n\t\tif (check(xx)) r = xx; else\n\t\tl = xx;\n\t}\n\tprintf(\"%d\\n\", r);\n}\n"], "input": "", "output": "", "tags": ["binary search", "graphs", "shortest paths"], "dificulty": "2100", "interactive": false}