{
    "link": "https://codeforces.com//contest/2089/problem/E",
    "problemId": "3285047",
    "problem_idx": "E",
    "shortId": "2089E",
    "contest_number": "2089",
    "problem_submissions": {
        "E": [
            312117803,
            312117703,
            312026130,
            312177107,
            312173295,
            312027793,
            312310993,
            313591454
        ],
        "D": [
            312005425,
            312035983,
            312012646,
            312019023,
            312056542,
            312030790,
            312054855,
            312180193,
            312030778
        ],
        "B1": [
            311991638,
            311974074,
            311977257,
            311972783,
            311983703,
            311976653,
            311974663,
            311979567,
            311977867,
            311972876,
            311991596,
            311992114,
            311995537,
            312002724,
            311975692,
            311984582
        ],
        "B2": [
            311991504,
            311976057,
            311977008,
            311974724,
            311983600,
            311985419,
            311992609,
            311979419,
            311994591,
            311992227,
            311991999,
            311996351,
            312002610,
            311983804
        ],
        "C2": [
            311986572,
            311996842,
            311993140,
            311998124,
            312010341,
            312018999,
            312025560,
            312024295,
            312015915,
            312001206,
            312022380,
            312015982,
            312024268,
            312015714,
            312022629
        ],
        "C1": [
            311971941,
            311984058,
            311983107,
            311982200,
            311999669,
            311989579,
            311981776,
            311986834,
            312000911,
            311982471,
            311996193,
            312013435,
            312002171,
            311994068,
            311985200,
            311999126
        ],
        "A": [
            311962756,
            311967378,
            311963536,
            311963013,
            311973819,
            311962523,
            311964171,
            311965578,
            311966948,
            311963646,
            311964125,
            311965567,
            311963107,
            311964180,
            311964607,
            311967685
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/141053",
    "editorial": "SolutionFirstly, consider a classical dp to calculate as the number of\r\ndelete vertices in subtree without considering deleting vertex everyday.\r\nThis is trivial.Then, due to the existence of an automatic deletion\r\nprocess, we cannot view the selected points within the subtree of as\r\noperations with only relative order, because they may be illegal.\r\nHowever, we consider the final operation sequence, putting the vertex\r\nchosen on the th day in the position . That is, if we firstly choose ,\r\nthen , then , it will be . Then, one vertex must be put in position or\r\nlater.Then, we find that for the subtree of vertex with DFS order\r\ninterval , all vertices can’t be put in position before , and it is\r\nalways legal to put in position after if parent-child relations are\r\nsatisfied.So we consider a dp which represents that the subtree of\r\nleaves position for ancestors (which means nothing can be placed at\r\nposition or before, and if , then nothing is left for ancestors), there\r\nare empty spaces (not including the one left for ancestors), and\r\nvertices need to be put into positions after the subtree of . In the\r\ncase, we merge subtrees, and the subtree with smaller DFS order can put\r\nsome backward operations into the space of the subtree with bigger DFS\r\norder.Specifically, consider the sons of enumerated in reverse order of\r\nDFS, and the son is . Then enumerate as how many backward operations of\r\nwill fill in space of . The transition is . That is, after putting\r\noperations from backward operations of into spaces of , we merge the\r\nspaces of and , then the backward operations of and .For , it won’t\r\ninterfere with the transition with its following siblings. And for ,any\r\noperations from can’t put into the subtree of and , so we only need to\r\nmerge backward operations of and .After finishing the transition of\r\nsubtrees, we consider where to put . If we don’t put , there will be one\r\nmore space, and we can consider whether to leave it for ancestors if\r\n.That is . We put into the position left for ancestors, that is . And we\r\ncan leave another position for ancestors of , that is . We put into\r\nposition , in that case, we can’t leave position for ancestors of , that\r\nis . We put backward, then we can’t put anything in the subtree of , but\r\nwe can leave position for ancestors of , that is . The answer for\r\noperations is just we leave position for , and there are spaces\r\n(therefore the spaces are before ) and no backward operations.The time\r\ncomplexity is .\r\n",
    "name": "E. Black Cat Collapse",
    "statement": "The world of the black cat is collapsing. In this world, which can be\r\nrepresented as a rooted tree with root at node 1, Liki and Sasami need\r\nto uncover the truth about the world. Each day, they can explore a node\r\nu that has not yet collapsed. After this exploration, the black cat\r\ncauses u and all nodes in its subtree to collapse. Additionally, at the\r\nend of the i th day, if it exists, the number n-i+1 node will also\r\ncollapse. For each i from 1 to n, determine the number of exploration\r\nschemes where Liki and Sasami explore exactly i days (i.e., they perform\r\nexactly i operations), with the last exploration being at node 1. The\r\nresult should be computed modulo 998\r\n,244\r\n,353. It is guaranteed that nodes 1 to n can form a \"DFS\" order of the\r\ntree, meaning there exists a depth-first search traversal where the i th\r\nvisited node is i.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Black Cat Collapse.json",
    "hint": []
}