{"link": "https://codeforces.com//contest/446/problem/D", "problemId": "11402", "problem_idx": "D", "shortId": "446D", "contest_number": "446", "problem_submissions": {"D": [7086133, 7088502, 7303572, 7094524, 7087369, 7108964, 7108953, 7108945, 7108928, 7108912, 7089186, 7086153, 7256786, 7256781, 7111708], "B": [7082083, 7079232, 7078714, 7083465, 7077013, 7081087, 7303292, 7079381, 7081269, 7080767, 7080268, 7085675, 7089437, 7079048, 7081011, 7082061, 7081382, 7083005, 7082149], "C": [7079856, 7085393, 7084759, 7079794, 7695226, 7082368, 7303421, 7094356, 7085833, 7086068, 7088271, 7087032, 7088166, 7086187, 7087998, 7087654, 7091193, 7088707], "A": [7075913, 7076352, 7074747, 7080779, 7084765, 7075635, 7303252, 7075476, 7075873, 7075184, 7076974, 7078214, 7075141, 7075542, 7077127, 7075653, 7075563, 7076924, 7075972], "E": [7093796, 7093681]}, "name": "D. DZY Loves Games", "statement": "Today DZY begins to play an old game. In this game, he is in a big maze\r\nwith rooms connected by corridors (each corridor allows to move in both\r\ndirections). You can assume that all the rooms are connected with\r\ncorridors directly or indirectly.DZY has got lost in the maze. Currently\r\nhe is in the first room and has lives. He will act like the follows:\r\nFirstly he will randomly pick one of the corridors going from his\r\ncurrent room. Each outgoing corridor has the same probability to be\r\npicked. Then he will go through the corridor and then the process\r\nrepeats. There are some rooms which have traps in them. The first room\r\ndefinitely has no trap, the -th room definitely has a trap. Each time\r\nDZY enters one of these rooms, he will lost one life. Now, DZY knows\r\nthat if he enters the -th room with exactly 2 lives, firstly he will\r\nlost one live, but then he will open a bonus round. He wants to know the\r\nprobability for him to open the bonus round. Please, help him.\r\n", "solutions": ["#include <cstdio>\n#include <numeric>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cstring>\n#include <string>\n#include <map>\n#include <cmath>\n#include <ctime>\n#include <algorithm>\n#include <bitset>\n#include <queue>\n#include <sstream>\n#include <deque>\n#include <cassert>\n\nusing namespace std;\n\n#define mp make_pair\n#define pb push_back\n#define rep(i,n) for(int i = 0; i < (n); i++)\n#define re return\n#define fi first\n#define se second\n#define sz(x) ((int) (x).size())\n#define all(x) (x).begin(), (x).end()\n#define sqr(x) ((x) * (x))\n#define sqrt(x) sqrt(abs(x))\n#define y0 y3487465\n#define y1 y8687969\n#define fill(x,y) memset(x,y,sizeof(x))\n#define prev PREV\n#define j0 j1347829\n#define j1 j234892\n                         \ntypedef vector<int> vi;\ntypedef long long ll;\ntypedef long double ld;\ntypedef double D;\ntypedef pair<int, int> ii;\ntypedef vector<ii> vii;\ntypedef vector<string> vs;\ntypedef vector<vi> vvi;\n\ntemplate<class T> T abs(T x) { re x > 0 ? x : -x; }\n\nint n;\nint m;\ndouble g[500][1000];\nvi w, v[500];\nint trap[500];\nint len;\nint o;\ndouble p[500];\ndouble u[500][500];\ndouble e[500][500];\ndouble res[500];\ndouble h[500];\n\nint main () {\n    scanf (\"%d%d%d\", &n, &m, &len);\n    for (int i = 0; i < n; i++) {\n        scanf (\"%d\", &trap[i]);\n        if (trap[i]) w.pb (i);\n    }   \n    o = sz (w);\n    for (int i = 0; i < m; i++) {\n        int a, b;\n        scanf (\"%d%d\", &a, &b); a--; b--;\n        v[a].pb (b);\n        v[b].pb (a);\n    }\n\n    for (int i = 0; i < n; i++) {\n        g[i][i] = 1;\n        g[i][n + i] = 1;\n        if (!trap[i])\n            for (int j = 0; j < sz (v[i]); j++)\n                g[i][v[i][j]] -= 1.0 / sz (v[i]);\n    }\n    for (int i = 0; i < n; i++) {\n        int k = i;\n        for (int j = i; j < n; j++)\n            if (abs (g[j][i]) > abs (g[k][i]))\n                k = j;\n        for (int j = 0; j < 2 * n; j++) swap (g[i][j], g[k][j]);\n        double tmp = g[i][i];\n        for (int j = 0; j < 2 * n; j++)\n            g[i][j] /= tmp;\n        for (int j = i + 1; j < n; j++) {\n            tmp = g[j][i];\n            for (int k = 0; k < 2 * n; k++)\n                g[j][k] -= g[i][k] * tmp;\n        }   \n    }\n    for (int i = n - 1; i >= 0; i--)\n        for (int j = i - 1; j >= 0; j--) {\n            double tmp = g[j][i];\n            for (int k = 0; k < 2 * n; k++)\n                g[j][k] -= g[i][k] * tmp;\n        }\n    for (int i = 0; i < o; i++) {\n        for (int j = 0; j < n; j++) {\n            double tmp = 0;\n            for (int k = 0; k < n; k++) {\n                tmp += g[j][k + n] * int (k == w[i]);\n            }   \n            p[j] = tmp;\n        }\n        res[i] = p[0];\n        for (int j = 0; j < o; j++) {\n            double tmp = 0;\n            for (int k = 0; k < sz (v[w[j]]); k++)\n                tmp += p[v[w[j]][k]] / sz (v[w[j]]);\n            u[j][i] = tmp;\n        }\n    }\n    len -= 2;\n    while (len) {\n        if (len & 1) {\n            for (int i = 0; i < o; i++) {\n                h[i] = 0;\n                for (int j = 0; j < o; j++)\n                    h[i] += res[j] * u[j][i];\n            }\n            for (int i = 0; i < o; i++) res[i] = h[i];\n        }\n        len /= 2;\n        for (int i = 0; i < o; i++)\n            for (int j = 0; j < o; j++) {\n                e[i][j] = 0;\n                for (int k = 0; k < o; k++)\n                    e[i][j] += u[i][k] * u[k][j];\n            }\n        for (int i = 0; i < o; i++)\n            for (int j = 0; j < o; j++)\n                u[i][j] = e[i][j];  \n    }\n    printf (\"%.10f\\n\", res[o - 1]);\n    return 0;\n}"], "input": "", "output": "", "tags": ["math", "matrices", "probabilities"], "dificulty": "2800", "interactive": false}