{
    "link": "https://codeforces.com//contest/815/problem/B",
    "problemId": "110360",
    "problem_idx": "B",
    "shortId": "815B",
    "contest_number": "815",
    "problem_submissions": {
        "B": [
            27864858,
            27859364,
            27903526,
            27860492,
            27852460,
            27855418,
            27859767,
            27852085,
            27859930,
            27859903,
            27854384,
            27858144,
            27855716,
            27857016,
            27852895,
            27853886
        ],
        "E": [
            27862063,
            27864392,
            27859827,
            27862681,
            27864496,
            27861206,
            27867128,
            27865357,
            27880319,
            27880161
        ],
        "D": [
            27858987,
            27856145,
            27857852,
            27860187,
            27858848,
            27861659,
            27861479,
            27862104,
            27862042,
            27861841,
            27863258,
            27862833,
            27864478,
            27862444,
            27863816,
            27862729
        ],
        "C": [
            27854913,
            27853891,
            27854000,
            27853599,
            27853527,
            27856985,
            27855683,
            27858430,
            27852703,
            27859114,
            27854140,
            27852346,
            27858894,
            27853926,
            27859017,
            27859597,
            27856510,
            27857717
        ],
        "A": [
            27848955,
            27860238,
            27848568,
            27848584,
            27855106,
            27849560,
            27848196,
            27849865,
            27848239,
            27854177,
            27850649,
            27854333,
            27856456,
            27849527,
            27857857
        ]
    },
    "name": "B. Karen and Test",
    "statement": "Karen has just arrived at school, and she has a math test today! The\r\ntest is about basic addition and subtraction. Unfortunately, the\r\nteachers were too busy writing tasks for Codeforces rounds, and had no\r\ntime to make an actual test. So, they just put one question in the test\r\nthat is worth all the points.There are integers written on a row. Karen\r\nmust alternately add and subtract each pair of adjacent integers, and\r\nwrite down the sums or differences on the next row. She must repeat this\r\nprocess on the values on the next row, and so on, until only one integer\r\nremains. The first operation should be addition.Note that, if she ended\r\nthe previous row by adding the integers, she should start the next row\r\nby subtracting, and vice versa.The teachers will simply look at the last\r\ninteger, and then if it is correct, Karen gets a perfect score,\r\notherwise, she gets a zero for the test.Karen has studied well for this\r\ntest, but she is scared that she might make a mistake somewhere and it\r\nwill cause her final answer to be wrong. If the process is followed,\r\nwhat number can she expect to be written on the last row?Since this\r\nnumber can be quite large, output only the non-negative remainder after\r\ndividing it by .\r\n",
    "solutions": [
        "//PRZEMYSL ASSERTY\n\n//SPRAWDZ CORNER CASE'Y, MINIMALNE I MAKSYMALNE WEJŚCIE I WYJŚCIE\n\n//MODULO = 1\n\n//while (clock()<=69*CLOCKS_PER_SEC)\n\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nconst int nax=200*1007;\nconst long long mod=1000*1000*1000+7;\n\nint n;\n\nlong long tab[nax];\n\nlong long sil[nax];\nlong long osil[nax];\n\nlong long wyn;\n\nlong long dziel(long long a, long long b)\n{\n\ta%=mod;\n\tb%=mod;\n\tlong long wyk=mod-2;\n\twhile(wyk)\n\t{\n\t\tif (wyk&1)\n\t\t{\n\t\t\ta*=b;\n\t\t\ta%=mod;\n\t\t}\n\t\tb*=b;\n\t\tb%=mod;\n\t\twyk>>=1;\n\t}\n\treturn a;\n}\n\nlong long kom(long long a, long long b)\n{\n\treturn (sil[a]*((osil[b]*osil[a-b])%mod))%mod;\n}\n\nint main()\n{\n\tsil[0]=1;\n\tfor (int i=1; i<nax; i++)\n\t\tsil[i]=(sil[i-1]*i)%mod;\n\tosil[nax-1]=dziel(1, sil[nax-1]);\n\tfor (int i=nax-2; i>=0; i--)\n\t\tosil[i]=(osil[i+1]*(i+1))%mod;\n\t\n\t\n\tscanf(\"%d\", &n);\n\tfor (int i=1; i<=n; i++)\n\t\tscanf(\"%lld\", &tab[i]);\n\twhile(1)\n\t{\n\t\tif (n==1)\n\t\t{\n\t\t\tprintf(\"%lld\\n\", tab[1]);\n\t\t\tbreak;\n\t\t}\n\t\tif (n&1)\n\t\t{\n\t\t\tfor (int i=1; i<n; i++)\n\t\t\t{\n\t\t\t\tif (i&1)\n\t\t\t\t\ttab[i]=(tab[i]+tab[i+1])%mod;\n\t\t\t\telse\n\t\t\t\t\ttab[i]=(tab[i]-tab[i+1]+mod)%mod;\n\t\t\t}\n\t\t\tn--;\n\t\t\tcontinue;\n\t\t}\n\t\tif ((n%4)==2)\n\t\t{\n\t\t\tfor (int i=1; i<=n; i++)\n\t\t\t{\n\t\t\t\twyn+=tab[i]*kom(n/2-1, (i-1)/2);\n\t\t\t\twyn%=mod;\n\t\t\t}\n\t\t\twyn%=mod;\n\t\t\twyn+=mod;\n\t\t\twyn%=mod;\n\t\t\tprintf(\"%lld\\n\", wyn);\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (int i=1; i<=n; i++)\n\t\t\t{\n\t\t\t\tif (i&1)\n\t\t\t\t\twyn+=tab[i]*kom(n/2-1, (i-1)/2);\n\t\t\t\telse\n\t\t\t\t\twyn-=tab[i]*kom(n/2-1, (i-1)/2);\n\t\t\t\twyn%=mod;\n\t\t\t}\n\t\t\twyn%=mod;\n\t\t\twyn+=mod;\n\t\t\twyn%=mod;\n\t\t\tprintf(\"%lld\\n\", wyn);\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "constructive algorithms",
        "math"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Karen and Test.json",
    "editorial_link": "https://codeforces.com//blog/entry/52742",
    "editorial": "There are a couple of ways to solve this problem.The easiest way is to\r\ncalculate the coefficients, or \"contributions\", of each number to the\r\nfinal sequence. In fact, the contribution of any number is determined by\r\nits position as well as the .To do this, using brute force, we can\r\ncompute the contribution of each element by just running a brute-force\r\non for all positions and then trying to observe patterns. In any case,\r\none should eventually realize that the pattern depends on :When , the\r\npattern is: When , the pattern is: When , the pattern is: When , the\r\npattern is: This is perhaps what most contestants did in the contest. We\r\nwill not prove that this is correct; instead, a more elegant solution\r\nwill be suggested.First, simplify the problem so that only addition ever\r\nhappens. In fact, this version is much easier: the contribution of the\r\nelement when there are elements is precisely .Now, letâs go back to the\r\noriginal task. We will repeatedly perform the operation until the number\r\nof elements is even, and the first operation is addition, to reduce the\r\nnumber of cases we have to handle. It can be observed that, regardless\r\nof our starting , this will happen somewhere within the first two rows.\r\nWe can therefore just brute force it.Observe the following picture:\r\nConsider the blue elements only. Am I the only one whose mind is on the\r\nverge of exploding? Notice that they are doing precisely the simpler\r\nversion of the task! In other words, if we consider only , we are\r\nbasically solving the simple version of the task!In fact, the same can\r\nbe said of .Why is this true? Well, look at the picture. Notice that, if\r\nwe have an even number of elements with the first element being\r\naddition, then, after rows, it will again be even and the first element\r\nwill also be addition, so the pattern simply continues!We can hence\r\ncompute the final two values on the second to last row, and then add or\r\nsubtract them, depending on what the final operation should be. In fact,\r\nthis also explains the patterns we observed for and !To compute quickly,\r\nwe can use the formula . We can just preprocess all relevant factorials\r\nin , and also their modular multiplicative inverses modulo in order to\r\nperform the division. This runs in or just if you are willing to\r\nconsider the a constant.\r\n",
    "hint": []
}