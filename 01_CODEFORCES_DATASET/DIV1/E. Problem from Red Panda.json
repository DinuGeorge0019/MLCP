{
    "link": "https://codeforces.com//contest/1188/problem/E",
    "problemId": "366824",
    "problem_idx": "E",
    "shortId": "1188E",
    "contest_number": "1188",
    "problem_submissions": {
        "A2": [
            56584964,
            56567602,
            56566524,
            56572382,
            56589644,
            56583972,
            56579938,
            56582233,
            56570590,
            56576661,
            56589231,
            56587448,
            56570901,
            56587024,
            56574198,
            56581669,
            56571222
        ],
        "E": [
            56582671,
            56589474,
            56589239,
            141774833,
            57345099,
            56596996,
            56642394
        ],
        "D": [
            56576903,
            56585842,
            56583846,
            56589764,
            56584452,
            56586331,
            56584084,
            56596587,
            56577947,
            56602284
        ],
        "C": [
            56571735,
            56576008,
            56572799,
            56580329,
            56577305,
            56572037,
            56574271,
            56570306,
            56577496,
            56576142,
            56583479,
            56585009,
            56584467,
            56575353,
            56583067,
            56585221,
            56572902,
            56587295,
            56575946,
            56586708
        ],
        "B": [
            56568214,
            56570555,
            56562488,
            56571471,
            56575984,
            56607436,
            56565158,
            56574148,
            56570733,
            56572983,
            56567704,
            56568743,
            56568263,
            56575440,
            56583939,
            56576017,
            56588907,
            56575865
        ],
        "A1": [
            56561659,
            56562944,
            56561298,
            56564728,
            56563727,
            56577205,
            56564216,
            56561247,
            56563294,
            56561568,
            56563293,
            56566261,
            56569194,
            56564914,
            56561283,
            56572778,
            56565086,
            56564073,
            56561536,
            56563748
        ]
    },
    "name": "E. Problem from Red Panda",
    "statement": "At Moscow Workshops ICPC team gets a balloon for each problem they\r\nsolved first. Team MSU Red Panda got so many balloons that they didn\u2019t\r\nknow how to spend them. So they came up with a problem with them.There\r\nare several balloons, not more than 10^6 in total, each one is colored\r\nin one of k colors. We can perform the following operation: choose k-1\r\nballoons such that they are of k-1 different colors, and recolor them\r\nall into remaining color. We can perform this operation any finite\r\nnumber of times (for example, we can only perform the operation if there\r\nare at least k-1 different colors among current balls).How many\r\ndifferent balloon configurations can we get? Only number of balloons of\r\neach color matters, configurations differing only by the order of\r\nballoons are counted as equal. As this number can be very large, output\r\nit modulo 998244353.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <queue>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, int> pli;\ntypedef pair<ll, ll> pll;\ntypedef long double ld;\n#define mp make_pair\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\nconst ll MOD = 998244353;\nll add(ll x, ll y) {\n\tx += y;\n\tif (x >= MOD) return x - MOD;\n\treturn x;\n}\nll sub(ll x, ll y) {\n\tx -= y;\n\tif (x < 0) return x + MOD;\n\treturn x;\n}\nll mult(ll x, ll y) {\n\treturn (x * y) % MOD;\n}\nll bin_pow(ll x, ll p) {\n\tif (p == 0) return 1;\n\tif (p & 1) return mult(x, bin_pow(x, p - 1));\n\treturn bin_pow(mult(x, x), p / 2);\n}\nll rev(ll x) {\n\treturn bin_pow(x, MOD - 2);\n}\n\nconst int N = (int)2e6 + 3;\nint k;\nll f[N], rf[N];\n\nll getC(int n, int m) {\n\tif (m < 0 || m > n) return 0;\n\treturn mult(f[n], mult(rf[m], rf[n - m]));\n}\n\nint a[N], b[N];\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tf[0] = 1;\n\tfor (int i = 1; i < N; i++)\n\t\tf[i] = mult(f[i - 1], i);\n\trf[N - 1] = rev(f[N - 1]);\n\tfor (int i = N - 1; i > 0; i--)\n\t\trf[i - 1] = mult(rf[i], i);\n\n\tscanf(\"%d\", &k);\n\tfor (int i = 0; i < k; i++) {\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\ta[x]++;\n\t}\n\tint m = k;\n\tll ans = 1;\n\tint sum = 0;\n\tfor (int i = 0;; i++) {\n\t\tm -= a[i];\n\t\tsum += a[i] + b[i];\n\t\tb[i + k] += a[i] + b[i];\n\t\tif (sum > i + 1) break;\n\t\tif (m == 0) break;\n\t\tint S = i + 1 - sum;\n\t\tans = add(ans, sub(getC(S + k - 1, S), getC(S - m + k - 1, S - m)));\n\t}\n\tprintf(\"%lld\\n\", ans);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics"
    ],
    "dificulty": "3300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Problem from Red Panda.json",
    "editorial_link": "https://codeforces.com//blog/entry/68079",
    "editorial": "We'll suppose(as in 3 tasks before), that the array is sorted. Our operation is equivalent to choosing some 1?i?k\n and increasing ai\n by k?1\n, ?nd decreasing remaining ai\n by one. To solve the task, we need to make some claims:\n\nClaim 1\n\nDifference ai?aj\n mod\n k\n doesn't change for any i,j\n. Moreover, in one move ai\n shifts by 1\n mod\n k\n.\n\nClaim 2\n\nIf we've made two sequences of moves of length i\n and j\n, where i<k\n, j<k\n, then obtained configurations coincide iff i=j\n and chosen colors coincide as multisets(orders can be different, but number of times we've chosen each color needs to be equal).\n\nProof\n\nBecause in one side claim is obvious, we will suppose, that obtained configurations are equal and we'll show that multisets of colors are also equal. Let's define number of baloons, which we've got using first sequence, as bt\n and ct\n for the second. Because bt?bt?i\n mod\n k\n, ct?at?j\n mod\n k\n, ?? i=j\n. Let's note that bt=at?i+k?addB[t]\n, where addB[t]\n \u0097 number of times we've chosen color t\n. So, we get that addB[t]=addC[t]\n for each 1?t?k\n.\n\nClaim 3\n\nIf there is i\n, such that ai+1<i\n, then we'll not make more than i?1\n moves.\n\nProof\n\nOn each move we choose exactly one color, so after i\n moves there will be at least one color among first i+1\n that we didn't choose. But then, the number of balloons of this color will be less than i?i=0\n, which is not allowed.\n\nLet's call minimum index i\n from Claim 3(if it exists) critical.\n\nClaim 4\n\nSuppose critical index is equal to i\n. Assume, that we decided to make j<k\n moves and we've fixed number of choices of each color \u0097 add[t]\n. It's clear, that add[t]?0,add[1]+add[2]+\u0085add[k]=j\n. Then, there exist correct sequence of moves with this number of choices iff:\n\nj<i\n\nIf at<j\n, then add[t]>0\n.\n\nNot so long proof\nUsing these claims, we can solve the problem if the critical index exists and is equal to i\n:\n\nLet's iterate through all possible number of moves between 0\n and i?1\n, suppose it's equal to x\n. Then, by Claim 4 we know that, if ap<x\n, then add[p]>0\n, else there are no restrictions (except obvious add[p]?0\n). So, we have arrived to the following problem:\n\nCount the number of nonnegative solutions add[1]+\u0085+add[k]=x\n, where fixed num\n numbers should be positive. By Claims 2 and 4 the solutions of this equation correspond to some final configuration, and this is exactly what we need to count.\n\nThis is well known task(stars and bars), answer is given by Cx?num+k?1k?1\n\nSo, the answer is given by the sum of these values over all x\n.\n\nLet's call configuration critical\n, if it has critical element (in other words, if there is index i\n such that i<k?1\n and at least i+2\n elements of configuration do not exceed i\n).\n\nTo solve the problem when there is no critical index we need:\n\nClaim 5\n\nIf configuration is not critical, then configuration bi\n is reachable iff ai?bi?aj?bj\n mod\n k\n and bi?0\n, a1+\u0085ak=b1+\u0085bk\n.\n\nLong proof\nNow, it only remains to show how to count the number of such b\n from Claim 5.\n\nb1,b2,\u0085,bk\n should give remainders (a1+t)modk,(a2+t)modk,\u0085,(ak+t)modk\n for some t\n. We ?an calculate configurations with such remainders by the following way: remaining a1+a2+\u0085+ak?(a1+t)modk?(a2+t)modk?\u0085?(ak+t)modk\n are splitted in groups by k\n and are distributed in k\n elements in any way. So, that's why, for given t\n number of configurations(by stars and bars) is given by Ca1+a2+\u0085+ak?(a1+t)modk?(a2+t)modk?\u0085?(ak+t)modkk+k?1k?1\n. Sum a1+a2+\u0085+ak?(a1+t)modk?(a2+t)modk?\u0085?(ak+t)modk\n can be calculated for t=0,1,\u0085,k?1\n in O(1)\n, if we precalculate number of each remainder among a1,a2,\u0085,ak\n."
}