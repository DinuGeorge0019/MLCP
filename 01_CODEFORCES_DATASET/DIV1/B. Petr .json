{"link": "https://codeforces.com//contest/113/problem/B", "problemId": "593", "problem_idx": "B", "shortId": "113B", "contest_number": "113", "problem_submissions": {"E": [680388, 685905, 681683], "A": [677908, 674619, 675479, 675233, 675507, 675322, 676300, 675702, 674929, 678313, 683346, 682046, 676172, 676056], "B": [676745, 676166, 676692, 677267, 676920, 677563, 678285, 678205, 675093, 677719, 677894, 677545, 677448, 686002, 685992], "C": [676712, 678207, 677682, 678634, 679430, 680369, 680061, 678147, 687235, 682210, 681538, 681511, 680322, 680720, 681415, 681728, 685898, 685870], "D": [681282, 682967, 682949, 681414, 728339, 728337]}, "name": "B. Petr ", "statement": "Long ago, when Petya was a schoolboy, he was very much interested in the\r\nPetr# language grammar. During one lesson Petya got interested in the\r\nfollowing question: how many different continuous substrings starting\r\nwith the and ending with the (it is possible ), the given string has.\r\nSubstrings are different if and only if their contents aren\u2019t equal,\r\ntheir positions of occurence don\u2019t matter. Petya wasn\u2019t quite good at\r\nmath, that\u2019s why he couldn\u2019t count this number. Help him!\r\n", "solutions": ["//  Codeforces Beta Round #86\n\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n\nusing namespace std;\n\ntypedef unsigned uint;\ntypedef long long Int;\ntypedef vector<int> vint;\ntypedef pair<int,int> pint;\n#define mp make_pair\n\ntemplate<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << \" \"; cout << endl; }\ntemplate<class T> void pvp(T a, T b) { for (T i = a; i != b; ++i) cout << \"(\" << i->first << \", \" << i->second << \") \"; cout << endl; }\ntemplate<class T> void chmin(T &t, T f) { if (t > f) t = f; }\ntemplate<class T> void chmax(T &t, T f) { if (t < f) t = f; }\nint in_c() { int c; for (; (c = getchar()) <= ' '; ) { if (!~c) throw ~0; } return c; }\nint in() { int x = 0, c; for (; (uint)((c = getchar()) - '0') >= 10; ) { if (c == '-') return -in(); if (!~c) throw ~0; } do { x = (x << 3) + (x << 1) + (c - '0'); } while ((uint)((c = getchar()) - '0') < 10); return x; }\nInt In() { Int x = 0, c; for (; (uint)((c = getchar()) - '0') >= 10; ) { if (c == '-') return -In(); if (!~c) throw ~0; } do { x = (x << 3) + (x << 1) + (c - '0'); } while ((uint)((c = getchar()) - '0') < 10); return x; }\n\nnamespace SA {\n    #define MAXN 2010\n    int n;\n    char t[MAXN];\n    int ki[MAXN], ik[MAXN], is[MAXN], hh;\n    bool cmp(const int &a, const int &b) {\n        return (a == b) ? 0 : (ik[a] != ik[b]) ? (ik[a] < ik[b]) : (ik[a + hh] < ik[b + hh]);\n    }\n    void makesa() {\n        n = strlen(t);\n        int i;\n        for (i = 0; i <= n; ++i) ik[ki[i] = i] = t[i];\n        is[0] = is[n] = hh = 0;\n        sort(ki, ki + n + 1, cmp);\n        for (hh = 1; is[n] != n; hh <<= 1) {\n            sort(ki, ki + n + 1, cmp);\n            for (i = 0; i < n; ++i) is[i + 1] = is[i] + (cmp(ki[i], ki[i + 1]) ? 1 : 0);\n            for (i = 0; i <= n; ++i) ik[ki[i]] = is[i];\n        }\n    }\n    int lcp[MAXN];\n    void makeha() {\n        int h = 0, i, j;\n        for (i = 0; i < n; ++i) {\n            for (j = ki[ik[i] - 1]; t[j + h] == t[i + h]; ++h);\n            lcp[ik[i] - 1] = h;\n            if (h) --h;\n        }\n    }\n}\n\nint L, M, N;\nchar A[2010], B[2010], C[2010];\nint isB[2010], isC[2010];\n\nint solve() {\n    int i, j, x, y;\n    int ret = 0;\n    \n    strcpy(SA::t, A);\n    SA::makesa();\n    SA::makeha();\n    for (x = 1; x <= L; ++x) {\n        y = SA::lcp[x - 1];\n        i = SA::ki[x];\n        for (j = i; j <= L; ++j) if (j - i > y) {\n            if (j - i >= M && j - i >= N) {\n                if (isB[i] && isC[j - N]) {\n                    ++ret;\n                }\n            }\n        }\n    }\n    \n    return ret;\n}\n\nint main() {\n    int i;\n    \n    for (; ~scanf(\"%s%s%s\", A, B, C); ) {\n        L = strlen(A);\n        M = strlen(B);\n        N = strlen(C);\n        memset(isB, 0, sizeof(isB));\n        memset(isC, 0, sizeof(isC));\n        for (i = 0; i + M <= L; ++i) {\n            if (!strncmp(A + i, B, M)) isB[i] = 1;\n        }\n        for (i = 0; i + N <= L; ++i) {\n            if (!strncmp(A + i, C, N)) isC[i] = 1;\n        }\n        int res = solve();\n        printf(\"%d\\n\", res);\n    }\n    \n    return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "data structures", "hashing", "strings"], "dificulty": "2000", "interactive": false}