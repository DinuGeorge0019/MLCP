{"link": "https://codeforces.com//contest/516/problem/B", "problemId": "22478", "problem_idx": "B", "shortId": "516B", "contest_number": "516", "problem_submissions": {"D": [9897778, 9901317, 9902316, 9902257, 9902926, 9899362, 9901747, 9900577, 9901753, 9900598, 9902022, 9902250, 9908234, 9907894, 9901637, 10134694], "C": [9894077, 9894988, 9894528, 9894592, 9890787, 9892570, 9894045, 9897863, 9902115, 9893633, 9897304, 9906453, 9890308, 9915358, 9897994, 9896924, 9895656, 9894595, 9895218], "A": [9891009, 9888069, 9891404, 9888532, 9886301, 9886680, 9886736, 9887016, 9887312, 9885451, 9885346, 9886088, 9885688, 9885877, 9886467], "B": [9888215, 9890996, 9889129, 9891841, 9894454, 9896886, 9901312, 9890721, 9898664, 9916236, 9895068, 9891776, 9889048, 9930005, 9890589, 9889796, 9891061, 9898651], "E": [9897098, 9919136]}, "name": "B. Drazil and Tiles", "statement": "Drazil created a following problem about putting tiles into an\r\ngrid:\"There is a grid with some cells that are empty and some cells that\r\nare occupied. You should use tiles to cover all empty cells and no two\r\ntiles should cover each other. And you should print a solution about how\r\nto do it.\"But Drazil doesn\u2019t like to write special checking program for\r\nthis task. His friend, Varda advised him: \"how about asking contestant\r\nonly to print the solution ? Otherwise contestant may print \u201d \".Drazil\r\nfound that the constraints for this task may be much larger than for the\r\noriginal task!Can you solve this new problem?Note that you should print\r\n\u201d either when there exists no solution or when there exists several\r\ndifferent solutions for the original task.\r\n", "solutions": ["#include <iostream>\nusing namespace std;\nconst int MAX = 2005;\npair<int, int> q[MAX * MAX];\nchar a[MAX][MAX];\nint dx[4] = {-1, 0, 1, 0};\nint dy[4] = {0, 1, 0, -1};\nchar tt[4] = {'v', '<', '^', '>'};\nint n, m;\nbool isav(int x, int y)\n{\n\treturn (0 <= x && x < n && 0 <= y && y < m && a[x][y] == '.');\n}\nint deg(int x, int y)\n{\n\tint ans = 0;\n\tfor (int i = 0; i < 4; i++)\n\t{\n\t\tint nx = x + dx[i];\n\t\tint ny = y + dy[i];\n\t\tif (isav(nx, ny))\n\t\t\tans++;\n\t}\n\treturn ans;\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin >> n >> m;\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tcin >> a[i][j];\n\tint h = 0, t = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tif (isav(i, j) && deg(i, j) == 1)\n\t\t\t\tq[t++] = make_pair(i, j);\n\twhile (h < t)\n\t{\n\t\tint x = q[h].first, y = q[h].second;\n\t\th++;\n\t\tfor (int i = 0; i < 4; i++)\n\t\t{\n\t\t\tint nx = x + dx[i];\n\t\t\tint ny = y + dy[i];\n\t\t\tif (isav(nx, ny))\n\t\t\t{\n\t\t\t\ta[x][y] = tt[i];\n\t\t\t\ta[nx][ny] = tt[i ^ 2];\n\t\t\t\tfor (int j = 0; j < 4; j++)\n\t\t\t\t{\n\t\t\t\t\tint nnx = nx + dx[j];\n\t\t\t\t\tint nny = ny + dy[j];\n\t\t\t\t\tif (isav(nnx, nny) && deg(nnx, nny) == 1)\n\t\t\t\t\t\tq[t++] = make_pair(nnx, nny);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tif (a[i][j] == '.')\n\t\t\t{\n\t\t\t\tcout << \"Not unique\" << endl;\n\t\t\t\treturn 0;\n\t\t\t}\n\tfor (int i = 0; i < n; i++, cout << endl)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tcout << a[i][j];\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "graph matchings", "greedy", "implementation"], "dificulty": "2000", "interactive": false}