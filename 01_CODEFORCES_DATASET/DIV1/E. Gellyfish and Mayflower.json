{
    "link": "https://codeforces.com//contest/2115/problem/E",
    "problemId": "3415147",
    "problem_idx": "E",
    "shortId": "2115E",
    "contest_number": "2115",
    "problem_submissions": {
        "A": [
            322373149,
            322373057,
            322191671,
            322196906,
            322191306,
            322207089,
            322339019,
            322205731,
            322191602,
            322193299,
            322321188,
            322320656,
            322193684,
            322193937,
            322193846,
            322195728,
            322193849,
            322208657,
            322196496,
            322194770,
            322195138,
            322193397,
            322277408,
            322205364,
            322201021
        ],
        "E": [
            322277481,
            322279542,
            322287881,
            322287269,
            322268790,
            322276073,
            322479322,
            322316002,
            322463290,
            322674274,
            322484220
        ],
        "D": [
            322247280,
            322249604,
            322253666,
            322244252,
            322244159,
            322252360,
            322259840,
            322274633,
            322274421,
            322243918,
            322262198,
            322264257,
            322258885,
            322256903,
            322256375,
            322270049,
            322285061,
            322255261,
            322270426,
            322274051
        ],
        "C": [
            322226886,
            322242092,
            322247023,
            322262817,
            322237987,
            322228189,
            322234047,
            322256038,
            322250633,
            322253986,
            322247586,
            322244155,
            322267167,
            322253884,
            322236170,
            322239045,
            322256498,
            322247239
        ],
        "B": [
            322199788,
            322207830,
            322209032,
            322228331,
            322214165,
            322204435,
            322203425,
            322201226,
            322209167,
            322226797,
            322225099,
            322216043,
            322219704,
            322219745,
            322213225,
            322218856,
            322205348,
            322216288,
            322222101,
            322216208
        ],
        "F2": [
            322365448
        ],
        "F1": [
            322365418
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143418",
    "editorial": "SolutionLet be any path from vertex to vertex , the vertices that pass\r\nthrough in turn are .Let be the vertex in with the largest , and\r\nC = c_(z), W = w_(z) .Let’s call your cards you don’t get from vertex as\r\nspecial cards.Lemma1. There exists an optimal solution such that the\r\nnumber of special cards does not exceed .Proof. Let be the cost of the\r\nspecial cards, and . If there exists , we will get that . Then we can\r\nreplaces these cards with cards from vertex , the answer won’t be worse.\r\nSince there are only values of for all non-negative integers , there are\r\nno more than special cards.So it’s not hard to find the total cost of\r\nspecial cards won’t exceed .Now we can use dynamic programming to solve\r\nthis problem: means we are current at vertex , the vertex on the path\r\nwith the largest is , the total cost of the cards is , we have reached\r\nthe vertex or not, the maximum sum of the power of the cards. Since the\r\nremainder will be filled by cards from , We just need to find the value\r\nof that satisfies .But unfortunately, the time complexity of the\r\nalgorithm is . It’s not fast enough.At this point you’ll find that\r\nsolving the problem directly becomes incredibly tricky, so we’ll try to\r\nsplit it into two problems.We first consider the following problem:\r\nwhether there is a better solution when is sufficiently large?We need to\r\nbroaden the problem, so we try to be able to buy a negative number of\r\ncards with the largest .Doing so would make the answer larger, but when\r\nis large enough, the answer won’t change. Because according to Lemma1,\r\nif the total cost of special cards exceed , there will be a solution\r\nthat’s at least not worse.Thus when , that’s the answer of the problem.\r\nAnd we can use another dynamic programming to solve this problem: means\r\nwe are current at vertex , the vertex on the path with the largest is ,\r\nthe total cost of the cards is , we have reached the vertex or not, the\r\nmaximum sum of the power of the cards. But unlike the original, when is\r\nequal to or greater than , we remove several cards from vertex to make\r\n.The time complexity becomes , now it’s fast enough.For each query, we\r\ncan just enumerate in time complexity.As for ? It’s an easy problem:\r\nmeans we are current at vertex , the total cost of the cards is , the\r\nmaximum sum of the power of the cards. The time complexity is .For each\r\nquery, we can get the answer directly from in time complexity.Over all,\r\nwe have solved the problem.Time complexity: Memory complexity:\r\n",
    "name": "E. Gellyfish and Mayflower",
    "statement": "Mayflower by PlumMay, Gellyfish’s friend, loves playing a game called\r\n\"Inscryption\" which is played on a directed acyclic graph with n\r\nvertices and m edges. All edges a\r\nrightarrow b satisfy a<b.You start in vertex 1 with some coins. You need\r\nto move from vertex 1 to the vertex where the boss is located along the\r\ndirected edges, and then fight with the final boss.Each of the n\r\nvertices of the graph contains a Trader who will sell you a card with\r\npower w_i for c_i coins. You can buy as many cards as you want from each\r\nTrader. However, you can only trade with the trader on the i-th vertex\r\nif you are currently on the i-th vertex.In order to defeat the boss, you\r\nwant the sum of the power of your cards to be as large as possible.You\r\nwill have to answer the following q queries: Given integers p and r. If\r\nthe final boss is located at vertex p, and you have r coins in the\r\nbeginning, what is the maximum sum of the power of your cards when you\r\nfight the final boss? Note that you are allowed to trade cards on vertex\r\np.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "graphs"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Gellyfish and Mayflower.json",
    "hint": [
        "Hint 1 There is an easy way to solve the problem in time complexity. Thus for cases with small , we can easily solve them, but what about cases with large ?",
        "Hint 2 There is a classic but mistaken greed where we only take the item with the largest . This is obviously wrong, but Hint 1 lets us rule out the case where r is small; is there an efficient algorithm that can fix this greed for larger ?"
    ]
}