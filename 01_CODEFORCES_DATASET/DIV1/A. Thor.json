{
    "link": "https://codeforces.com//contest/704/problem/A",
    "problemId": "67577",
    "problem_idx": "A",
    "shortId": "704A",
    "contest_number": "704",
    "problem_submissions": {
        "D": [
            40927696,
            40927622,
            40927587,
            40927467,
            40927396,
            19704142,
            19710237,
            19708323,
            19774513,
            19774457,
            19774399,
            19764110,
            19708427,
            19756062,
            26821434,
            22052930
        ],
        "C": [
            19708702,
            23913352,
            19710963,
            19714551,
            19717256,
            19728619,
            19710982,
            19720592,
            22049772,
            19704534
        ],
        "B": [
            19698622,
            19822826,
            19698078,
            19696251,
            19698272,
            19697250,
            19698738,
            19697542,
            19699793,
            19700128,
            19700526,
            19700174,
            19702386,
            19697314,
            19708684,
            19700116
        ],
        "A": [
            19690324,
            19692784,
            19688619,
            19690302,
            19690344,
            19691492,
            19691120,
            19689897,
            19691217,
            19692269,
            19690729,
            19691407,
            19691187,
            19689858,
            19690147,
            19691829,
            19694517,
            19693111,
            19701512,
            19690489
        ],
        "E": [
            27277354,
            20669015,
            22073776,
            22073733
        ]
    },
    "name": "A. Thor",
    "statement": "Thor is getting used to the Earth. As a gift Loki gave him a smartphone.\r\nThere are applications on this phone. Thor is fascinated by this phone.\r\nHe has only one minor issue: he can’t count the number of unread\r\nnotifications generated by those applications (maybe Loki put a curse on\r\nit so he can’t). events are about to happen (in chronological order).\r\nThey are of three types: Application generates a notification (this new\r\nnotification is unread). Thor reads all notifications generated so far\r\nby application (he may re-read some notifications). Thor reads the first\r\nnotifications generated by phone applications (notifications generated\r\nin first events of the first type). It’s guaranteed that there were at\r\nleast events of the first type before this event. Please note that he\r\ndoesn’t read first unread notifications, he just reads the very first\r\nnotifications generated on his phone and he may re-read some of them in\r\nthis operation. Please help Thor and tell him the number of unread\r\nnotifications after each event. You may assume that initially there are\r\nno notifications in the phone.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <string>\n#include <cstring>\n#include <cstdint>\n#include <climits>\n#include <numeric>\n#include <functional>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n\nusing namespace std;\n\nint main() {\n  int n, q;\n  scanf(\"%d%d\", &n, &q);\n  vector<bool> read;\n  int total_read = 0;\n  map<int, vector<int>> app2no;\n  int lt = 0;\n  for (int i = 0; i < q; i++) {\n    int a, b;\n    scanf(\"%d%d\", &a, &b);\n    if (a == 1) {\n      app2no[b].push_back(read.size());\n      read.push_back(false);\n    }\n    else if (a == 2) {\n      for (auto c : app2no[b]) {\n        if (!read[c])\n          total_read++;\n        read[c] = true;\n      }\n      app2no[b].clear();\n    }\n    else if (a == 3) {\n      for (int j = lt; j < b; j++) {\n        if (!read[j])\n          total_read++;\n        read[j] = true;\n      }\n      lt = max(lt, b);\n    }\n    int ans = read.size() - total_read;\n    printf(\"%d\\n\", ans);\n  }\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "implementation"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Thor.json",
    "editorial_link": "https://codeforces.com//blog/entry/46450",
    "editorial": "Consider a queue e for every application and also a queue Q for the notification bar. When an event of the first type happens, increase the number of unread notifications by 1 and push pair (i,?x) to Q where i is the index of this event among events of the first type, and also push number i to queue e[x].\n\nWhen a second type event happens, mark all numbers in queue e[x] and clear this queue (also decreese the number of unread notifications by the number of elements in this queue before clearing).",
    "hint": []
}