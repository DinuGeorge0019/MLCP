{
    "link": "https://codeforces.com//contest/1967/problem/C",
    "problemId": "2620322",
    "problem_idx": "C",
    "shortId": "1967C",
    "contest_number": "1967",
    "problem_submissions": {
        "E2": [
            258916135,
            258921598,
            280919018,
            283055351,
            258925888,
            258925224,
            258926598,
            259116859,
            258926070,
            258925546,
            259722295,
            258957419
        ],
        "E1": [
            258904834,
            258921659,
            258894575,
            258912226,
            258903044,
            258906344,
            258912831,
            258915891,
            258918877,
            258922310,
            259006535,
            258965622,
            258951459,
            258945783,
            258913874,
            258917530,
            258919711,
            258921338,
            258917617,
            258919765,
            259722116,
            258915462,
            258933640,
            258908305,
            258913393,
            258909598
        ],
        "D": [
            258893511,
            258891796,
            258909116,
            258896081,
            258913757,
            258931804,
            258897887,
            258899842,
            258900877,
            258900605,
            258900883,
            258903500,
            258906692,
            258903262,
            258903546,
            258905322,
            258906645,
            259721880,
            258919184,
            258918997,
            258920966,
            258894127
        ],
        "C": [
            258884312,
            258885547,
            258878790,
            258885577,
            258886778,
            258891500,
            258888513,
            258894435,
            258891427,
            258888089,
            258895759,
            258890296,
            258893524,
            258896216,
            258896443,
            258888021,
            258883737,
            258891226,
            258889628,
            258879732
        ],
        "B2": [
            258880311,
            258879319,
            258874379,
            258880426,
            258874860,
            258887764,
            258882431,
            258886567,
            258994245,
            258885903,
            258878827,
            258889665,
            258882193,
            258884237,
            258880372,
            258891352,
            258877071,
            258876977,
            258886917,
            258884212
        ],
        "B1": [
            258869431,
            258871590,
            258870854,
            258865105,
            258869777,
            258876404,
            258873073,
            258874727,
            258869407,
            258874121,
            258875290,
            258873932,
            258869896,
            258873122,
            258871143,
            258871635,
            258872574,
            258874952,
            258869924,
            258867671
        ],
        "A": [
            258865187,
            258866636,
            258865467,
            258874287,
            258866222,
            258865534,
            258866742,
            258868436,
            258867130,
            258868014,
            258872371,
            258870129,
            258865415,
            258868641,
            258868839,
            258866810,
            258868141,
            258871863,
            258867322,
            258865436
        ],
        "F": [
            283293514,
            273029197
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129027",
    "editorial": "Itâs well-known that Fenwick Tree is the data structure shown in the\r\nimage below, and the sum of each subtree is stored at each vertex (i.e.\r\nand ).Denote the depth of a vertex as . Assume that . Consider a vertex\r\nand one of its ancestors . Let . It can be easily proved (by using the\r\nstars and bars method or generating functions) that the coefficient of\r\nin is .Obviously, is satisfied for each leaf . Enumerate each vertex\r\nwhose value is already known (just in the increasing order is fine), and\r\nall its ancestors , remove the part from , and we can calculate the\r\nvalue of each vertex.Time complexity is because the height of a Fenwick\r\nTree is .\r\n",
    "name": "C. Fenwick Tree",
    "statement": "Let\r\noperatorname{lowbit}(x) denote the value of the lowest binary bit of x,\r\ne.g.\r\noperatorname{lowbit}(12)=4,\r\noperatorname{lowbit}(8)=8.For an array a of length n, if an array s of\r\nlength n satisfies s_k=\r\nleft(\r\nsum\r\nlimits_{i=k-\r\noperatorname{lowbit}(k)+1}^{k}a_i\r\nright)\r\nbmod 998\r\n,244\r\n,353 for all k, then s is called the of a. Let’s denote it as s=f(a).For\r\na positive integer k and an array a, f^k(a) is defined as follows:\r\nf^k(a)=\r\nbegin{cases} f(a)&\r\ntextrm{if }k=1\r\nf(f^{k-1}(a))&\r\ntextrm{otherwise.}\r\nend{cases} You are given an array b of length n and a positive integer\r\nk. Find an array a that satisfies 0\r\nle a_i < 998\r\n,244\r\n,353 and f^k(a)=b. It can be proved that an answer always exists. If\r\nthere are multiple possible answers, you may print any of them.\r\n",
    "solutions": [
        "/** *    author:  tourist *    created: 30.04.2024 11:03:36**/#include <bits/stdc++.h> using namespace std; #ifdef LOCAL#include \"algo/debug.h\"#else#define debug(...) 42#endif template <typename T>T inverse(T a, T m) {  T u = 0, v = 1;  while (a != 0) {    T t = m / a;    m -= t * a; swap(a, m);    u -= t * v; swap(u, v);  }  assert(m == 1);  return u;} template <typename T>class Modular { public:  using Type = typename decay<decltype(T::value)>::type;   constexpr Modular() : value() {}  template <typename U>  Modular(const U& x) {    value = normalize(x);  }   template <typename U>  static Type normalize(const U& x) {    Type v;    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);    else v = static_cast<Type>(x % mod());    if (v < 0) v += mod();    return v;  }   const Type& operator()() const { return value; }  template <typename U>  explicit operator U() const { return static_cast<U>(value); }  constexpr static Type mod() { return T::value; }   Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }  Modular& operator++() { return *this += 1; }  Modular& operator--() { return *this -= 1; }  Modular operator++(int) { Modular result(*this); *this += 1; return result; }  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }  Modular operator-() const { return Modular(-value); }   template <typename U = T>  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));    return *this;  }  template <typename U = T>  typename enable_if<is_same<typename Modular<U>::Type, long long>::value, Modular>::type& operator*=(const Modular& rhs) {    long long q = static_cast<long long>(static_cast<long double>(value) * rhs.value / mod());    value = normalize(value * rhs.value - q * mod());    return *this;  }  template <typename U = T>  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {    value = normalize(value * rhs.value);    return *this;  }   Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }   friend const Type& abs(const Modular& x) { return x.value; }   template <typename U>  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);   template <typename U>  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);   template <typename V, typename U>  friend V& operator>>(V& stream, Modular<U>& number);  private:  Type value;}; template <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }template <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }template <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; } template <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }template <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }template <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); } template <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; } template <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }template <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }template <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; } template <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }template <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }template <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; } template <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }template <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }template <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; } template <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }template <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }template <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; } template<typename T, typename U>Modular<T> power(const Modular<T>& a, const U& b) {  assert(b >= 0);  Modular<T> x = a, res = 1;  U p = b;  while (p > 0) {    if (p & 1) res *= x;    x *= x;    p >>= 1;  }  return res;} template <typename T>bool IsZero(const Modular<T>& number) {  return number() == 0;} template <typename T>string to_string(const Modular<T>& number) {  return to_string(number());} // U == std::ostream? but done this way because of fastoutputtemplate <typename U, typename T>U& operator<<(U& stream, const Modular<T>& number) {  return stream << number();} // U == std::istream? but done this way because of fastinputtemplate <typename U, typename T>U& operator>>(U& stream, Modular<T>& number) {  typename common_type<typename Modular<T>::Type, long long>::type x;  stream >> x;  number.value = Modular<T>::normalize(x);  return stream;} /*using ModType = int; struct VarMod { static ModType value; };ModType VarMod::value;ModType& md = VarMod::value;using Mint = Modular<VarMod>;*/ constexpr int md = 998244353;using Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>; vector<Mint> fact(1, 1);vector<Mint> inv_fact(1, 1); Mint C(int n, int k) {  if (k < 0 || k > n) {    return 0;  }  k = min(k, n - k);  while ((int) fact.size() < k + 1) {    fact.push_back(fact.back() * (int) fact.size());    inv_fact.push_back(1 / fact.back());  }  Mint ret = inv_fact[k];  for (int i = 1; i <= k; i++) {    ret *= n - i + 1;  }  return ret;} int main() {  ios::sync_with_stdio(false);  cin.tie(0);  int tt;  cin >> tt;  while (tt--) {    int n, k;    cin >> n >> k;    vector<Mint> b(n);    for (int i = 0; i < n; i++) {      cin >> b[i];    }    vector<Mint> a(n);    for (int i = 0; i < n; i++) {      int j = 0;      while (i & (1 << j)) {        j += 1;      }      for (int t = 0; t < (1 << j) - 1; t++) {        int who = i - (1 << j) + 1 + t;        int vals = j - __builtin_popcount(t);        b[i] -= a[who] * C(vals + k - 1, k - 1);      }      a[i] = b[i];    }    for (int i = 0; i < n; i++) {      cout << a[i] << \" \\n\"[i == n - 1];    }  }  return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "combinatorics",
        "data structures",
        "dp",
        "math",
        "trees"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Fenwick Tree.json",
    "hint": [
        "Hint 1 The height of a Fenwick Tree is , so operations like enumerating ancestors of each vertex will be acceptable.",
        "Hint 2 What's the coefficient of in each value of its ancestors?"
    ]
}