{"link": "https://codeforces.com//contest/256/problem/B", "problemId": "2401", "problem_idx": "B", "shortId": "256B", "contest_number": "256", "problem_submissions": {"B": [2781429, 2776681, 2779641, 2777927, 2779004, 2777545, 2777829, 2778651, 2777720, 2778451, 2776552, 2782245, 2781330, 2777533], "D": [2779473, 2779904, 2777535, 2782686, 2789193, 2781305], "E": [2777253, 2781852, 2779020, 2775034, 2779843, 2779937, 2778999, 2781729, 2780947, 2779725, 2804945, 2804943, 2781663, 2781905, 2777856, 2780182, 2777426, 2780269], "C": [2776456, 2777569, 2783097, 2779210, 2776586, 2776922, 2776660, 2779042, 2777560, 2782221, 2778280, 2780113, 2780104, 2777296], "A": [2774012, 2782979, 2775596, 2779786, 2774535, 2774925, 2776089, 2773923, 2775590, 2774961, 2782829, 2781660, 2781773, 2774247]}, "name": "B. Mr. Bender and Square", "statement": "Mr. Bender has a digital table of size , each cell can be switched on or\r\noff. He wants the field to have at least switched on squares. When this\r\ncondition is fulfilled, Mr Bender will be happy.We\u2019ll consider the table\r\nrows numbered from top to bottom from 1 to , and the columns numbered\r\nfrom left to right from 1 to . Initially there is exactly one switched\r\non cell with coordinates ( is the row number, is the column number), and\r\nall other cells are switched off. Then each second we switch on the\r\ncells that are off but have the side-adjacent cells that are on.For a\r\ncell with coordinates the side-adjacent cells are cells with coordinates\r\n, , , .In how many seconds will Mr. Bender get happy?\r\n", "solutions": ["#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n#include <climits>\n#include <numeric>\n#include <vector>\nusing namespace std;\ntypedef long long int64;\nint64 n, x, y, c;\n\n//1,5,13,\nbool check(int64 T) {\n\tint64 ans = T * T + (T + 1) * (T + 1);\n\tif (x + T >= n) {\n\t\tans -= (T - (n - 1 - x)) * (T - (n - 1 - x));\n\t}\n\tif (x - T < 0) {\n\t\tans -= (T - x) * (T - x);\n\t}\n\tif (y + T >= n) {\n\t\tans -= (T - (n - 1 - y)) * (T - (n - 1 - y));\n\t}\n\tif (y - T < 0) {\n\t\tans -= (T - y) * (T - y);\n\t}\n\tif (n - x + n - y <= T) {\n\t\tint64 t = T - (n - x + n - y) + 1;\n\t\tans += t * (t + 1) / 2;\n\t}\n\tif (n - x + y + 1 <= T) {\n\t\tint64 t = T - (n - x + y + 1) + 1;\n\t\tans += t * (t + 1) / 2;\n\t}\n\tif (x + 1 + n - y <= T) {\n\t\tint64 t = T - (x + 1 + n - y) + 1;\n\t\tans += t * (t + 1) / 2;\n\t}\n\tif (x + 1 + y + 1 <= T) {\n\t\tint64 t = T - (x + 1 + y + 1) + 1;\n\t\tans += t * (t + 1) / 2;\n\t}\n//\tcout << T << \":\" << ans << endl;\n\treturn ans >= c;\n}\n\nint main() {\n\tcin >> n >> x >> y >> c;\n\t--x, --y;\n\tint64 L = -1, R = n * 3;\n\twhile (L + 1 < R) {\n\t\tint64 M = (L + R) / 2;\n\t\tif (check(M))\n\t\t\tR = M;\n\t\telse\n\t\t\tL = M;\n\t}\n\tcout << R << endl;\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "brute force", "math"], "dificulty": "1800", "interactive": false}