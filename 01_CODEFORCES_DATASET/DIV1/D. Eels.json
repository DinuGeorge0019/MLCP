{
    "link": "https://codeforces.com//contest/1098/problem/D",
    "problemId": "278463",
    "problem_idx": "D",
    "shortId": "1098D",
    "contest_number": "1098",
    "problem_submissions": {
        "E": [
            51775559,
            48006690,
            48011091,
            47996318,
            48015799,
            48015745,
            48015679,
            48016465
        ],
        "D": [
            47994331,
            47991784,
            48004915,
            47986667,
            47997263,
            47997207,
            47997823,
            48003406,
            48012772,
            48000542,
            48002246,
            47998686,
            48003172,
            48003847,
            48013739,
            48013700,
            48013652,
            48012961,
            48012955,
            48007481,
            48004946,
            47998449,
            48006927,
            47993907
        ],
        "C": [
            47990851,
            47988182,
            48002088,
            47984104,
            47990986,
            47992891,
            47990373,
            47996864,
            47993728,
            47992046,
            48002685,
            47997828,
            47997416,
            47983441,
            47996246,
            48004923,
            47992474,
            48000276
        ],
        "B": [
            47984141,
            47982505,
            48010238,
            47997345,
            47983353,
            47986135,
            47985242,
            47985258,
            47997818,
            47982827,
            47991394,
            47990410,
            47990108,
            47991143,
            47984918,
            47988149,
            47999187,
            48005571
        ],
        "A": [
            47975157,
            47974213,
            48009223,
            47974115,
            47975580,
            47975415,
            47977674,
            47976551,
            47976714,
            47995866,
            47975779,
            47977103,
            47975994,
            47986982,
            47978302,
            47975716,
            47976034,
            47978693
        ],
        "F": [
            54648301
        ]
    },
    "name": "D. Eels",
    "statement": "Vasya is a big fish lover, and his parents gave him an aquarium for the\r\nNew Year. Vasya does not have a degree in ichthyology, so he thinks that\r\nfilling a new aquarium with eels is a good idea. Unfortunately, eels are\r\npredators, so Vasya decided to find out how dangerous this idea\r\nwas.Getting into one aquarium, eels fight each other until exactly one\r\nfish remains. When two eels fight, the big one eats the smaller one (if\r\ntheir weights are equal, then one of them will still eat the other).\r\nNamely, let n eels be initially in an aquarium, and the i-th of them\r\nhave a weight of x_i. Then n-1 battles will occur between them, as a\r\nresult of which, only one eel will survive. In a battle of two eels with\r\nweights a and b, where a\r\nle b, eel of weight a will be eaten and disappear from the aquarium, and\r\neel of weight b will increase its weight to a+b.A battle between two\r\neels with weights a and b, where a\r\nle b, is considered if b\r\nle 2 a. For a given set of eels, is defined as the maximum number of\r\ndangerous battles that can occur among these eels if they are placed in\r\none aquarium.Now Vasya is planning, which eels he wants to put into an\r\naquarium. He has some set of eels (initially empty). He makes a series\r\nof operations with this set. With each operation, he either adds one eel\r\nin the set, or removes one eel from the set. Vasya asks you to calculate\r\nthe danger of the current set of eels after each operation.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=1000*1007;\nconst int d=30;\n\nint q;\n\nll ile[d];\n\nmultiset <ll> setel;\n\nvoid wrzu(ll v)\n{\n\tfor (int i=0; i<d; i++)\n\t\tif ((1LL<<i)>v)\n\t\t\tile[i]+=v;\n\tsetel.insert(v);\n}\n\nvoid usu(ll v)\n{\n\tfor (int i=0; i<d; i++)\n\t\tif ((1LL<<i)>v)\n\t\t\tile[i]-=v;\n\tsetel.erase(setel.find(v));\n}\n\nvoid solve()\n{\n\tll naj=0;\n\tint wyn=setel.size();\n\tif (!setel.empty())\n\t{\n\t\tauto it=setel.end();\n\t\tit--;\n\t\tnaj=(*it);\n\t}\n\tll ost=-1;\n\tfor (int i=0; i<d && (1LL<<i)<=naj; i++)\n\t{\n\t\tll x=(*setel.lower_bound(1LL<<i));\n\t\tif (x==ost)\n\t\t\tcontinue;\n\t\tif (x>2*ile[i])\n\t\t\twyn--;\n\t\tost=x;\n\t}\n\tprintf(\"%d\\n\", wyn);\n}\n\nint main()\n{\n\tscanf(\"%d\", &q);\n\twhile(q--)\n\t{\n\t\tchar a;\n\t\tll b;\n\t\tscanf(\" %c%lld\", &a, &b);\n\t\tif (a=='+')\n\t\t\twrzu(b);\n\t\telse\n\t\t\tusu(b);\n\t\tsolve();\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Eels.json",
    "editorial_link": "https://codeforces.com/blog/entry/64331",
    "editorial": "Let\u00e2\u0080\u0099s consider a set of fishes of size and sort it in non-decreasing\r\norder: . Let\u00e2\u0080\u0099s call a fish if its weight is greater than twice the sum\r\nof all fishes with smaller indices: fish is fat iff . Let be the total\r\nnumber of fat fishes. We\u00e2\u0080\u0099ll prove that in this case the set of fishes\r\nhas danger . A fat fish can\u00e2\u0080\u0099t dangerously eat a fish with smaller\r\nweight. Indeed, even if all the smaller fishes eat each other, the\r\nresulting fish would be too small. We can conclude that the danger is\r\nnot greater . Let\u00e2\u0080\u0099s use the following strategy: at every moment fishes\r\nwith two smallest weights fight with each other. If a battle between\r\nfishes with masses and is not dangerous, it\u00e2\u0080\u0099s clear that fish has not\r\neaten any other fish yet otherwise this fish is a sum of two smaller\r\nfishes , where , but in this case , hence according to the strategy\r\nthere must have been a fight between two fishes and before. This\r\nindicates that fish has not eaten any other fish yet, and fish is a\r\nresult of battles between all smaller fishes. In this case is a fat fish\r\nby definition, which completes the proof that this strategy guarantees\r\nexactly dangerous battles. Clearly now we need a data structure that\r\nallows us to perform three types of operations: add element remove\r\nelement find all elements that are greater than the sum of all smaller\r\nelements Let\u00e2\u0080\u0099s split the allowed values range into half-intervals , , ,\r\n..., . Every half-interval contains at most 1 fat fish, and if there is\r\none, it\u00e2\u0080\u0099s the on with the minimum value. Indeed, every single\r\nhalf-interval does not contain two values and where .Now for each\r\nhalf-interval we can maintain the sum of all fishes in this\r\nhalf-interval, the sum of weights of fishes in this half-interval, and\r\nthe minimum fish in the half-interval (one could use / or a similar data\r\nstructure). In this case we can determine the count of fat fishes simply\r\nby iterating over all half-intervals. The resulting complexity is per\r\nquery.\r\n"
}