{"link": "https://codeforces.com//contest/198/problem/B", "problemId": "1446", "problem_idx": "B", "shortId": "198B", "contest_number": "198", "problem_submissions": {"E": [1817442, 1818751, 1818461, 1820730, 1819267, 1821471, 1819987, 1819731, 1818122, 1819919, 1819588, 1819229, 1819125, 1819917, 2420309, 1817542, 1817874, 1820376, 1835182, 1819847, 1819258], "A": [1819310, 1813993, 1814854, 1820599, 1815833, 1816813, 1813956, 1814317, 1814982, 1815662, 1815174, 1814496, 1814482, 1814086, 1815782, 1816889], "C": [1817120, 1818867, 1817644, 1821444, 1817692, 1819000, 1822292, 1816526, 1821976], "B": [1815258, 1814636, 1815561, 1815178, 1815418, 1816320, 1814734, 1814896, 1816104, 1816217, 1816891, 1816230, 1815769, 1815481, 1815083, 1816661, 1816543], "D": [1819062]}, "name": "B. Jumping on Walls", "statement": "Vasya plays a computer game with ninjas. At this stage Vasya\u2019s ninja\r\nshould get out of a deep canyon.The canyon consists of two vertical\r\nparallel walls, their height is meters. Let\u2019s imagine that we split\r\nthese walls into meter-long areas and number them with positive integers\r\nfrom to from bottom to top. Some areas are safe and the ninja can climb\r\nthem. Others are spiky and ninja can\u2019t be there. Let\u2019s call such areas\r\n.Initially the ninja is on the lower area of the left wall. He can use\r\neach second to perform one of the following actions: climb one area up;\r\nclimb one area down; jump to the opposite wall. That gets the ninja to\r\nthe area that is exactly meters higher than the area he jumped from.\r\nMore formally, if before the jump the ninja is located at area of one\r\nwall, then after the jump he is located at area of the other wall. If at\r\nsome point of time the ninja tries to get to an area with a number\r\nlarger than , then we can assume that the ninja got out of the\r\ncanyon.The canyon gets flooded and each second the water level raises\r\none meter. Initially the water level is at the lower border of the first\r\narea. Ninja cannot be on the area covered by water. We can assume that\r\nthe ninja and the water \"move in turns\" first the ninja performs some\r\naction, then the water raises for one meter, then the ninja performs one\r\nmore action and so on.The level is considered completed if the ninja\r\nmanages to get out of the canyon.After several failed attempts Vasya\r\nstarted to doubt whether it is possible to complete the level at all.\r\nHelp him answer the question.\r\n", "solutions": ["#pragma comment(linker, \"/STACK:60000000\")\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <ctime>\n#include <cstring>\n#include <cassert>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <queue>\n#include <functional>\n\nusing namespace std;\n\n#define forn(i, n) for(int i = 0; i < (int)(n); i++)\n#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)\n#define pb push_back\n#define mp make_pair\n#define fs first\n#define sc second\n#define last(a) int(a.size() - 1)\n#define all(a) a.begin(), a.end()\n#define seta(a,x) memset (a, x, sizeof (a))\n#define I (int)\n#define next NEXTHUI\n#define prev PREVHUI\n#define y1 Y1HUI\n\ntypedef long long int64;\ntypedef pair <int, int> pii;\ntypedef long double ldb;\n\nconst long double eps = 1e-9;\nconst int inf = (1 << 30) - 1;\nconst int64 inf64 = ((int64)1 << 62) - 1;\nconst long double pi = 3.1415926535897932384626433832795;\n\ntemplate <class T> T sqr (T x) {return x * x;}\n\nchar a[2][200500];\nint n, k;\nint d[2][200500];\nset <pair <int, pii> > S;\n\nvoid update (pii v, int d1) {\n\tif (v.sc <= d1)\n\t\treturn;\n\tif (v.sc <= n && a[v.fs][v.sc-1] == 'X')\n\t\treturn;\n\tif (d[v.fs][v.sc] > d1) {\n\t\tS.erase (mp (d[v.fs][v.sc], v));\n\t\td[v.fs][v.sc] = d1;\n\t\tS.insert (mp (d[v.fs][v.sc], v));\n\t}\n}\n\nint main ()\n{\n//\tfreopen (\"input.txt\", \"r\", stdin);\n//\tfreopen (\"output.txt\", \"w\", stdout);\n\tcin >> n >> k;\n\tforn (i, 2)\n\t\tscanf (\"%s\", a[i]);\n\tforn (i, 2)\n\t\tforn (j, 200500)\n\t\t\td[i][j] = inf;\t\n\td[0][1] = 0;\n\tS.insert (mp (0, mp (0, 1)));\n\twhile (S.size() > 0) {\n\t\tpii v = S.begin()->sc;\n\t\tS.erase (S.begin());\n\t\tif (v.sc > n) {\n\t\t\tcout << \"YES\\n\";\n\t\t\treturn 0;\n\t\t}\n\t\tpii w = mp (v.fs, v.sc + 1);\n\t\tupdate (w, d[v.fs][v.sc] + 1);\n\t        w = mp (v.fs, v.sc - 1);\n\t\tupdate (w, d[v.fs][v.sc] + 1);\n\t\tw = mp (v.fs^1, v.sc+k);\n\t\tupdate (w, d[v.fs][v.sc] + 1);\n\t}\t\n\tcout << \"NO\" << endl;\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["shortest paths"], "dificulty": "1400", "interactive": false}