{
    "link": "https://codeforces.com//contest/356/problem/B",
    "problemId": "3677",
    "problem_idx": "B",
    "shortId": "356B",
    "contest_number": "356",
    "problem_submissions": {
        "D": [
            4794974,
            4796940,
            4801750,
            4797879,
            4794633,
            4794914,
            4800192,
            4799081,
            4798608,
            4796033,
            4796373,
            5586844,
            4848850,
            4848737
        ],
        "C": [
            4792387,
            4791833,
            4794313,
            4794230,
            4792849,
            4796109,
            4790890,
            4794074,
            4792572,
            4798707,
            4793084,
            4793173,
            4792457,
            4794510,
            4793687,
            4793583
        ],
        "A": [
            4790471,
            4798737,
            4789838,
            4789461,
            4789429,
            4789788,
            4789491,
            4792712,
            4789440,
            4789650,
            4790200,
            4790207,
            4789553,
            4789481,
            4790643,
            4790114,
            4791900,
            4790345
        ],
        "B": [
            4789769,
            4790832,
            4793129,
            4799391,
            4791122,
            4791172,
            4791264,
            4792100,
            4790127,
            4791066,
            4791524,
            4791678,
            4791801,
            4791270,
            4793238,
            4792003,
            4791083,
            4792077
        ],
        "E": [
            4808374,
            4805352
        ]
    },
    "name": "B. Xenia and Hamming",
    "statement": "Xenia is an amateur programmer. Today on the IT lesson she learned about\r\nthe Hamming distance.The Hamming distance between two strings and of\r\nequal length is value . Record is the Iverson notation and represents\r\nthe following: if , it is one, otherwise zero.Now Xenia wants to\r\ncalculate the Hamming distance between two long strings and . The first\r\nstring is the concatenation of copies of string , that is, . The second\r\nstring is the concatenation of copies of string . Help Xenia, calculate\r\nthe required Hamming distance, given .\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <stdio.h>\n#include <set>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <memory.h>\n#include <string>\n#include <sstream>\n#include <cstdlib>\n#include <ctime>\n#include <cassert>\n\nusing namespace std;\n\nconst int N = 1000010;\n\nint ca[N][26], cb[N][26];\nchar x[N], y[N];\n\nint gcd(int a, int b) {\n  while (a > 0 && b > 0)\n    if (a > b) a %= b;\n    else b %= a;\n  return a + b;\n}\n\nint main() {\n  long long n, m;\n  cin >> n >> m;\n  scanf(\"%s\", x);\n  scanf(\"%s\", y);\n  int a = strlen(x);\n  int b = strlen(y);\n  int g = gcd(a, b);\n  for (int i = 0; i < g; i++)\n    for (int j = 0; j < 26; j++) ca[i][j] = cb[i][j] = 0;\n  for (int i = 0; i < a; i++) ca[i % g][x[i] - 'a']++;\n  for (int i = 0; i < b; i++) cb[i % g][y[i] - 'a']++;\n  long long matches = 0;\n  for (int i = 0; i < g; i++)\n    for (int j = 0; j < 26; j++) matches += (long long)ca[i][j] * cb[i][j];\n  long long total = n * a;\n  matches *= (n / (b / g));\n  cout << (total - matches) << endl;\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Xenia and Hamming.json",
    "editorial_link": "https://codeforces.com/blog/entry/9210",
    "editorial": "Let\u00e2\u0080\u0099s denote the length of the first string as , the length of the\r\nsecond string as . Let . It\u00e2\u0080\u0099s obvious that is a period of the long\r\nstrings and , so we can find the distance of its\u00e2\u0080\u0099 prefixes of length and\r\nmultiply the answer by . Let\u00e2\u0080\u0099s fix the position in the string and think\r\nabout all characters from the second string it will be compared with. It\r\nit easy to conclude that it will be compared with such that , where .\r\nFor each possible remainder of division by and for each character we can\r\ncalculate the number of characters that appear in in such positions that\r\n. When calculating the Hamming distance, the character will be compared\r\nwith exactly characters from that are equal to it, all other comparisons\r\nwill add one to the distance.\r\n"
}