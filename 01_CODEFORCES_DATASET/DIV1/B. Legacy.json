{
    "link": "https://codeforces.com//contest/786/problem/B",
    "problemId": "99628",
    "problem_idx": "B",
    "shortId": "786B",
    "contest_number": "786",
    "problem_submissions": {
        "E": [
            25753975,
            25749618,
            25751063,
            25750167,
            25750928,
            25751180,
            26105577,
            25800132
        ],
        "D": [
            25746644,
            25778480
        ],
        "C": [
            25742197,
            25745538,
            25743345,
            25745842,
            25739155,
            25745929,
            25742960,
            25745796,
            25744579,
            25746028,
            25746972,
            25743401,
            25747247,
            25747535,
            25746531,
            25744441,
            25746633,
            25742165,
            25747374,
            25744720
        ],
        "B": [
            25740468,
            25741179,
            25741185,
            25743380,
            25745478,
            25745982,
            25742716,
            25741370,
            25741364,
            25742235,
            25746446,
            25742809,
            25743016,
            25744432,
            25748452,
            25743844,
            25745002,
            25744286,
            25740598
        ],
        "A": [
            25737862,
            25737692,
            25737872,
            25738672,
            25742192,
            25738355,
            25739309,
            25738230,
            25737832,
            25738120,
            25738474,
            25738969,
            25738916,
            25738225,
            25737834,
            25738628,
            25738638,
            25747228,
            25739393,
            25749219
        ]
    },
    "name": "B. Legacy",
    "statement": "Rick and his co-workers have made a new radioactive formula and a lot of\r\nbad guys are after them. So Rick wants to give his legacy to Morty\r\nbefore bad guys catch them. There are planets in their universe numbered\r\nfrom to . Rick is in planet number (the earth) and he doesn’t know where\r\nMorty is. As we all know, Rick owns a portal gun. With this gun he can\r\nopen one-way portal from a planet he is in to any other planet\r\n(including that planet). But there are limits on this gun because he’s\r\nstill using its free trial. By default he can not open any portal by\r\nthis gun. There are plans in the website that sells these guns. Every\r\ntime you purchase a plan you can only use it once but you can purchase\r\nit again if you want to use it more.Plans on the website have three\r\ntypes: With a plan of this type you can open a portal from planet to\r\nplanet . With a plan of this type you can open a portal from planet to\r\nany planet with index in range . With a plan of this type you can open a\r\nportal from any planet with index in range to planet . Rick doesn’t\r\nknown where Morty is, but Unity is going to inform him and he wants to\r\nbe prepared for when he finds and start his journey immediately. So for\r\neach planet (including earth itself) he wants to know the minimum amount\r\nof money he needs to get from earth to that planet.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <cassert>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\nconst int N=901000;\nvector<PII> e[N];\nVI ve;\nll dis[N];\nint vis[N],tot;\nset<pair<ll,int> > hs;\nint nd[2][N],n,q,s,ty,u,v,w,l,r;\nvoid add(int u,int v,int w) {\n\te[u].pb(mp(v,w));\n//\tprintf(\"%d %d %d\\n\",u,v,w);\n}\nvoid dijkstra(int S,int n) {\n\trep(i,1,n+1) dis[i]=1ll<<60,vis[i]=0;\n\tdis[S]=0;\n\trep(i,1,n+1) hs.insert(mp(dis[i],i));\n\trep(i,1,n+1) {\n\t\tint u=hs.begin()->se; hs.erase(hs.begin());\n\t\tvis[u]=1;\n\t\trep(j,0,SZ(e[u])) {\n\t\t\tint v=e[u][j].fi;\n\t\t\tif (dis[v]>dis[u]+e[u][j].se) {\n\t\t\t\ths.erase(mp(dis[v],v));\n\t\t\t\tdis[v]=dis[u]+e[u][j].se;\n\t\t\t\ths.insert(mp(dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nvoid build(int p,int l,int r,int ty) {\n\tnd[ty][p]=++tot;\n\tif (l==r) {\n\t\tif (ty==0) add(nd[0][p],l,0);\n\t\tif (ty==1) add(l,nd[1][p],0);\n\t\treturn;\n\t}\n\tint md=(l+r)>>1;\n\tbuild(p+p,l,md,ty);\n\tbuild(p+p+1,md+1,r,ty);\n\tif (ty==0) {\n\t\tadd(nd[0][p],nd[0][p+p],0);\n\t\tadd(nd[0][p],nd[0][p+p+1],0);\n\t} else {\n\t\tadd(nd[1][p+p],nd[1][p],0);\n\t\tadd(nd[1][p+p+1],nd[1][p],0);\n\t}\n}\nvoid modify(int p,int l,int r,int tl,int tr,int ty) {\n\tif (tl==l&&tr==r) ve.pb(nd[ty][p]);\n\telse {\n\t\tint md=(l+r)>>1;\n\t\tif (tr<=md) modify(p+p,l,md,tl,tr,ty);\n\t\telse if (tl>md) modify(p+p+1,md+1,r,tl,tr,ty);\n\t\telse modify(p+p,l,md,tl,md,ty),modify(p+p+1,md+1,r,md+1,tr,ty);\n\t}\n}\nint main() {\n\tscanf(\"%d%d%d\",&n,&q,&s);\n\ttot=n+1;\n\tbuild(1,1,n,0);\n\tbuild(1,1,n,1);\n\trep(i,1,q+1) {\n\t\tscanf(\"%d%d\",&ty,&v);\n\t\tif (ty==1) {\n\t\t\tscanf(\"%d%d\",&u,&w);\n\t\t\tadd(v,u,w);\n\t\t} else {\n\t\t\tscanf(\"%d%d%d\",&l,&r,&w);\n\t\t\tve.clear();\n\t\t\tmodify(1,1,n,l,r,ty-2);\n\t\t\tif (ty==2) {\n\t\t\t\tfor (auto u:ve) add(v,u,w);\n\t\t\t} else {\n\t\t\t\tfor (auto u:ve) add(u,v,w);\n\t\t\t}\n\t\t}\n\t}\n\tdijkstra(s,tot-1);\n\trep(i,1,n+1) {\n\t\tif (dis[i]>=(1ll<<50)) dis[i]=-1;\n\t\tprintf(\"%lld \",dis[i]);\n\t}\n\tputs(\"\");\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "graphs",
        "shortest paths"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Legacy.json",
    "editorial_link": "https://codeforces.com//blog/entry/51163",
    "editorial": "Consider a weighted directed graph (initially it has vertices and no\r\nedges). We will construct a segment tree to handle queries of second\r\ntype (and one for the third type but with similar approach).Build a\r\nsegment tree on number . For each node of segment tree consider a vertex\r\nin the graph. For each leaf in this tree (like one with interval ), add\r\nan edge with weight equal to from vertex corresponding to this node to\r\nvertex in the original graph. And for each non-leaf node, add an edge\r\nwith weight equal to from vertex corresponding to this node to the\r\nvertex corresponding to node of each of its children.So weâre adding\r\nabout vertices and edges to the graph. For each query of second type, we\r\nwill add an edge from to each maximal node of segment tree that contains\r\n( nodes for each query) with weight equal to . And construct a segment\r\ntree in the same way for queries of third type. Finally run Dijkstraâs\r\nalgorithm on this graph. Time complexity:\r\n",
    "hint": []
}