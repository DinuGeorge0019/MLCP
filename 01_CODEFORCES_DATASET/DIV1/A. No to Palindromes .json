{
    "link": "https://codeforces.com//contest/464/problem/A",
    "problemId": "13524",
    "problem_idx": "A",
    "shortId": "464A",
    "contest_number": "464",
    "problem_submissions": {
        "D": [
            7709708,
            7703672,
            7707768,
            7709029,
            7710992,
            7714718,
            7711118,
            7710774,
            7711609,
            7712288,
            7712591,
            7712787,
            7710684,
            7706753
        ],
        "B": [
            7707364,
            7708530,
            7705479,
            7704768,
            7708864,
            7707171,
            7708559,
            7708825,
            7709917,
            7707346,
            7709741,
            7707538,
            8183505,
            7706050,
            7707819,
            7709775
        ],
        "C": [
            7704070,
            7705447,
            7708594,
            7706019,
            7703932,
            7708284,
            7708480,
            7706511,
            7704666,
            7709574,
            7707010,
            7705245,
            7706182,
            7708374,
            7703721,
            7711028,
            7703271
        ],
        "A": [
            7701335,
            7709425,
            7702860,
            7710099,
            7708555,
            7702605,
            7703010,
            7704248,
            7702307,
            7705030,
            7704432,
            7701212,
            7711093,
            7707511,
            7702270,
            7703295,
            7705744
        ]
    },
    "name": "A. No to Palindromes ",
    "statement": "Paul palindromes. He assumes that string is if each its character is one\r\nof the first letters of the English alphabet and doesn’t contain any\r\npalindrome contiguous substring of length 2 or more.Paul has found a\r\ntolerable string of length . Help him find the lexicographically next\r\ntolerable string of the same length or else state that such string does\r\nnot exist.\r\n",
    "solutions": [
        "#include <cstring>\n#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <memory.h>\n#include <cassert>\n\nusing namespace std;\n\nchar s[1234567];\n\nint main() {\n  int n, p;\n  scanf(\"%d %d\", &n, &p);\n  scanf(\"%s\", s);\n  for (int i = n - 1; i >= 0; i--) {\n    for (char c = s[i] + 1; c < 'a' + p; c++) {\n      if (i - 1 >= 0 && s[i - 1] == c) {\n        continue;\n      }\n      if (i - 2 >= 0 && s[i - 2] == c) {\n        continue;\n      }\n      if (p == 2 && n > 2) {\n        continue;\n      }\n      if (p == 1 && n > 1) {\n        continue;\n      }\n      for (int j = 0; j < n; j++) {\n        if (j < i) {\n          putchar(s[j]);\n          continue;\n        }\n        if (j == i) {\n          s[i] = c;\n          putchar(s[i]);\n          continue;\n        }\n        for (char c = 'a'; c < 'a' + p; c++) {\n          if (j - 1 >= 0 && s[j - 1] == c) {\n            continue;\n          }\n          if (j - 2 >= 0 && s[j - 2] == c) {\n            continue;\n          }\n          s[j] = c;\n          break;\n        }\n        putchar(s[j]);\n      }\n      printf(\"\\n\");\n      return 0;\n    }\n  }\n  puts(\"NO\");\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "strings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. No to Palindromes .json",
    "editorial_link": "https://codeforces.com//blog/entry/13694",
    "editorial": "If string contains a non-trivial palindromic substring , then it must\r\ncontain palindromic substring of length 2 or 3 (for instance, center of\r\n). Therefore the string is tolerable iff no adjacent symbols or symbols\r\nat distance 1 are equal. Now for the lexicographically next tolerable\r\nstring . is greater than , so they have common prefix of some size\r\n(maybe zero) and the next symbol is greater in than in . This symbol\r\nshould be as right as possible to obtain minimal possible . For some\r\nposition we can try to increment and ensure itâs not equal to or . If we\r\nfind some way to do this, the suffix can always be filled correctly if\r\nonly , as at most two symbols are forbidden at every moment. Every\r\nsymbol from suffix should be as small as possible not to make conflicts.\r\nSo, a greedy procedure or some kind of clever brute-force can be\r\nimplemented to solve the problem in . Cases or are easy, as only strings\r\nof length at most 1, and at most 2 respectively fit. This is an\r\napplication on general approach to generate next lexicographical\r\nsomething: try to increment rightmost position so that suffix can be\r\nfilled up in some way, then fill the suffix in least possible way.\r\n",
    "hint": []
}