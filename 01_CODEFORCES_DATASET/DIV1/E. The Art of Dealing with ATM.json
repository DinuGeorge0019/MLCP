{"link": "https://codeforces.com//contest/529/problem/E", "problemId": "25014", "problem_idx": "E", "shortId": "529E", "contest_number": "529", "problem_submissions": {"A": [10386870, 10387083, 10387317, 10387235, 10387134, 10386419, 10387369, 10386078, 10389580, 10388216, 10387712, 10386357, 10387632, 10386965, 10387734, 10385828], "C": [10386311, 10385455, 10386427, 10385364, 10406538, 10385834, 10386051, 10386918, 10386327, 10386510, 10385417, 10385724, 10386116, 10409781, 10386107, 10386201, 10386650, 10404350, 10386786, 10387225], "D": [10385805, 10386369, 10385736, 10386160, 10387079, 10385785, 10386933, 10385679, 10386619, 10386454, 10386390, 10387127, 10386675, 10386195, 10385799, 10388002], "E": [10385000, 10384871, 10384905, 10385848, 10385056, 10385201, 10385198, 10387352, 10385145, 10385184, 10385731, 10384843, 10385458, 10387221, 10385405, 10384991, 10385094], "B": [10384855, 10385831, 10385265, 10386319, 10385276, 10385001, 10385225, 10386328, 10385038, 10384881, 10385688, 10386077, 10385299, 10385149, 10385037, 10385267, 10384933, 10388225]}, "name": "E. The Art of Dealing with ATM", "statement": "ATMs of a well-known bank of a small country are arranged so that they\r\ncan not give any amount of money requested by the user. Due to the\r\nlimited size of the bill dispenser (the device that is directly giving\r\nmoney from an ATM) and some peculiarities of the ATM structure, you can\r\nget at most bills from it, and the bills may be of at most two distinct\r\ndenominations.For example, if a country uses bills with denominations ,\r\n, , , and burles, then at such ATM can give sums burles and burles, but\r\nit cannot give sums and burles.Let\u2019s suppose that the country uses bills\r\nof distinct denominations, and the ATM that you are using has an\r\nunlimited number of bills of each type. You know that during the day you\r\nwill need to withdraw a certain amount of cash times. You know that when\r\nthe ATM has multiple ways to give money, it chooses the one which\r\nrequires the minimum number of bills, or displays an error message if it\r\ncannot be done. Determine the result of each of the of requests for cash\r\nwithdrawal.\r\n", "solutions": ["#include <algorithm>\n#include <cassert>\n#include <cstring>\n#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define TRACE(x) cout << #x << \" = \" << x << endl\n#define _ << \" _ \" <<\n\ntypedef long long llint;\n\nconst int MAX = 1e7 + 100;\nconst int MAXN = 5050;\n\nint a[MAXN];\nbool ima[MAX];\n\nint main(void) {\n  int n, k;\n  scanf(\"%d %d\", &n, &k);\n  REP(i, n) {\n    scanf(\"%d\", &a[i]);\n    ima[a[i]] = true;\n  }\n\n  int q;\n  scanf(\"%d\", &q);\n  while (q--) {\n    int v;\n    scanf(\"%d\",  &v);\n    \n    int ans = k+1;\n    REP(i, n) REP(x, k+1) {\n      int rem = v - x * a[i];\n      if (rem < 0) break;\n      \n      if (rem == 0) {\n        ans = min(ans, x);\n        continue;\n      }\n\n      FOR(y, 1, k+1-x)\n        if (rem % y == 0 && rem/y < MAX && ima[rem / y]) {\n          ans = min(ans, x + y);\n          break;\n        }\n    }\n\n    if (ans > k) ans = -1;\n    printf(\"%d\\n\", ans);\n  }\n\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force"], "dificulty": "1900", "interactive": false}