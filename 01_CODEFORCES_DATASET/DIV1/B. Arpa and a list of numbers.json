{
    "link": "https://codeforces.com//contest/850/problem/B",
    "problemId": "120876",
    "problem_idx": "B",
    "shortId": "850B",
    "contest_number": "850",
    "problem_submissions": {
        "E": [
            30079147,
            30079321,
            30076520,
            30070445,
            30072131,
            30067095,
            30068181,
            30093004,
            30078840,
            30069238,
            30121826,
            30081582,
            30080429,
            30062854,
            30075459,
            30063501
        ],
        "C": [
            30074039,
            30065285,
            30068848,
            30063413,
            30062879,
            30062229,
            30071925,
            30062969,
            30065613,
            30065926,
            30075756,
            30070129,
            30073758,
            30065190,
            30073153,
            30074735,
            30076259,
            30065744,
            30070888
        ],
        "A": [
            30069678,
            30056916,
            30058041,
            30057755,
            30055909,
            30056498,
            30059213,
            30058881,
            30065583,
            30059587,
            30062587,
            30059533,
            30059618,
            30080413,
            30064068,
            30056411,
            30066966,
            30056135,
            30056956,
            30066903
        ],
        "B": [
            30068250,
            30061127,
            30081762,
            30072437,
            30058838,
            30066243,
            30062293,
            30085846,
            30070994,
            30120525,
            30071520,
            30064497,
            30064013,
            30059633,
            30059864,
            30081342,
            30120546,
            30077952,
            30076711
        ],
        "F": [
            30064851,
            30071271,
            30075755,
            30077357,
            30079821,
            30089510,
            30071025
        ],
        "D": [
            30071702,
            30081255,
            30092254,
            30077349,
            30092387,
            30073378,
            30075318,
            30101681,
            30076176,
            30093362,
            30082776,
            30070573
        ]
    },
    "name": "B. Arpa and a list of numbers",
    "statement": "Arpa has found a list containing numbers. He calls a list bad if and\r\nonly if it is not empty and (see notes section for more information) of\r\nnumbers in the list is .Arpa can perform two types of operations: Choose\r\na number and delete it with cost . Choose a number and increase it by\r\nwith cost . Arpa can apply these operations to as many numbers as he\r\nwishes, and he is allowed to apply the second operation arbitrarily many\r\ntimes on the same number.Help Arpa to find the minimum possible cost to\r\nmake the list good.\r\n",
    "solutions": [
        "#include<map>\n#include<set>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\ntypedef long long LL;\nconst int N = 2000000 + 10;\n\nint n;\nlong long x, y;\nlong long cnt[N];\nlong long pre[N];\n\nvoid solve()\n{\n    cin >> n >> x >> y;\n    for(int i = 0; i < n; ++ i) {\n        int t;\n        scanf(\"%d\", &t);\n        cnt[t] ++;\n        pre[t] += t;\n    }\n    long long ans = x * n;\n    long long c = x / y;\n\n    for(int i = 1; i < N; ++ i) {\n        cnt[i] += cnt[i - 1];\n        pre[i] += pre[i - 1];\n    }\n\n    for(int d = 2; d <= 1000000; ++ d) {\n        long long tmp_ans = 0;\n        for(int i = 0; i + d < N; i += d) {\n            if (i + d - c > i + 1) {\n                tmp_ans += (cnt[i + d - c - 1] - cnt[i]) * x;\n            }\n            int st = max(i + d - c, i + 1ll);\n            tmp_ans += ((cnt[i + d - 1] - cnt[st - 1]) * (i + d) - (pre[i + d - 1] - pre[st - 1])) * y;\n        }\n        ans = min(ans, tmp_ans);\n    }\n    cout << ans << endl;\n\n}\n\nint main()\n{\n\tsolve();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "number theory"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Arpa and a list of numbers.json",
    "editorial_link": "https://codeforces.com//blog/entry/54317",
    "editorial": "Letâs define the cost if we want gcd of the array becomes . The answer\r\nis for . Now, letâs see how to calculate . For each number like , we can\r\ndelete it with cost or we can add it till divides it. So, we must pay .\r\nLetâs iterate on possible values for .Before entering the main part of\r\nthe solution, letâs define two helper functions: : this function returns\r\nthe number of âs such that . : this function returns . To implement this\r\nfunction, define an array , such that keeps the sum of values less than\r\nor equal to . Then .Now for each multiple of like , letâs find the cost\r\nof numbers in the range , and sum up these values. We must find the best\r\nand divide the range into two segments and and delete the numbers in the\r\nfirst range and add the numbers in second range till they become . Now\r\nto find the best value for , .So, the total cost for this range is .Time\r\ncomplexity: .\r\n",
    "hint": []
}