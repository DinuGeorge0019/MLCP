{
    "link": "https://codeforces.com//contest/1190/problem/A",
    "problemId": "371220",
    "problem_idx": "A",
    "shortId": "1190A",
    "contest_number": "1190",
    "problem_submissions": {
        "F": [
            56941738,
            56942014,
            56928138,
            56942516,
            56950887,
            58195417,
            58195396
        ],
        "E": [
            56917008,
            56916854,
            56935244,
            57349641,
            56979679,
            56978421,
            56932359,
            56972779,
            56934145,
            56955262,
            56955204,
            56941608,
            56941586,
            56935542,
            56933188,
            57068903,
            57330846,
            57330794,
            56942010
        ],
        "D": [
            56905170,
            56903117,
            56915954,
            56905847,
            56909818,
            56908766,
            56917699,
            56902041,
            56905886,
            56904524,
            56906795,
            56906965,
            56900483,
            56909139,
            56909403,
            56908905,
            56906330,
            56905643,
            56915882,
            56909382
        ],
        "C": [
            56900650,
            56922677,
            56907961,
            56915160,
            56918774,
            56933389,
            56914144,
            56911238,
            56911841,
            56914833,
            56915809,
            56917468,
            56907600,
            56903345,
            56902197,
            56904463,
            56924310,
            56918439,
            56903054,
            56913026
        ],
        "B": [
            56894838,
            56897380,
            56899896,
            56900500,
            56902295,
            56898363,
            56894711,
            56934531,
            56896361,
            56900397,
            56898856,
            56894889,
            56895625,
            56895683,
            56897433,
            56894846,
            56898447,
            56897871,
            56896691,
            56899788
        ],
        "A": [
            56890891,
            56891248,
            56896475,
            56892165,
            56893900,
            56891144,
            56890604,
            56893098,
            56892007,
            56891978,
            56894387,
            56896707,
            56892771,
            56890233,
            56891624,
            56891412,
            56893655,
            56892212,
            56892634,
            56891452
        ]
    },
    "name": "A. Tokitsukaze and Discard Items",
    "statement": "Recently, Tokitsukaze found an interesting game. Tokitsukaze had n items\r\nat the beginning of this game. However, she thought there were too many\r\nitems, so now she wants to discard m (1\r\nle m\r\nle n) special items of them.These n items are marked with indices from 1\r\nto n. In the beginning, the item with index i is placed on the i-th\r\nposition. Items are divided into several pages orderly, such that each\r\npage contains exactly k positions and the last positions on the last\r\npage may be left empty.Tokitsukaze would do the following operation:\r\nfocus on the first special page that contains at least one special item,\r\nand at one time, Tokitsukaze would discard all special items on this\r\npage. After an item is discarded or moved, its old position would be\r\nempty, and then the item below it, if exists, would move up to this\r\nempty position. The movement may bring many items forward and even into\r\nprevious pages, so Tokitsukaze would keep waiting until all the items\r\nstop moving, and then do the operation (i.e. check the special page and\r\ndiscard the special items) repeatedly until there is no item need to be\r\ndiscarded. Tokitsukaze wants to know the number of operations she would\r\ndo in total.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <queue>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, int> pli;\ntypedef pair<ll, ll> pll;\ntypedef long double ld;\n#define mp make_pair\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\nconst int N = 100100;\nll n, k;\nll a[N];\nint m;\n\nint main()\n{\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%lld%d%lld\", &n, &m, &k);\n\tfor (int i = 0; i < m; i++) {\n\t\tscanf(\"%lld\", &a[i]);\n\t\ta[i] -= i + 1;\n\t}\n\tint pos = 0;\n\tint ans = 0;\n\twhile(pos < m) {\n\t\tint r = pos + 1;\n\t\twhile(r < m && (a[r] + r - pos) / k == a[pos] / k) r++;\n\t\tans++;\n\t\tpos = r;\n\t}\n\tprintf(\"%d\\n\", ans);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "two pointers"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Tokitsukaze and Discard Items.json",
    "editorial_link": "https://codeforces.com/blog/entry/68314",
    "editorial": "The order of discarding is given, so we can simulate the process\nof discarding.In each time, we can calculate the page that contains the\nfirst special item that has not been discarded, and then locate all the\nspecial items that need to be discarded at one time. Repeat this process\nuntil all special items are discarded.Each time at least one item would\nbe discarded, so the time complexity is .\n"
}