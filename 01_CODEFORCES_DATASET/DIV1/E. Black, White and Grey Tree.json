{
    "link": "https://codeforces.com//contest/1442/problem/E",
    "problemId": "782910",
    "problem_idx": "E",
    "shortId": "1442E",
    "contest_number": "1442",
    "problem_submissions": {
        "F": [
            97498578,
            135803098
        ],
        "E": [
            97475216,
            97479604,
            97479996,
            97476389,
            97475771,
            97482490,
            97482122,
            97486462,
            97481313,
            97514122,
            97491110,
            97570605,
            97570447,
            97483367,
            97482486,
            97530901,
            97530677,
            97490693,
            97491170,
            97483183,
            97744761,
            97465807,
            97518516,
            97525092
        ],
        "D": [
            97466130,
            97467957,
            97470622,
            97481203,
            97465568,
            97454688,
            97470507,
            97479495,
            97471531,
            97513997,
            97513923,
            97474497,
            97524422,
            97524418,
            97524414,
            97523769,
            97523651,
            97523580,
            97514880,
            97514861,
            97470422,
            97454149,
            97469561,
            97480908,
            97475630,
            97456546,
            97494847,
            97472947,
            97473292
        ],
        "C": [
            97461787,
            97460269,
            97457703,
            97453909,
            97462173,
            97474564,
            97455050,
            97455856,
            97466820,
            97514136,
            97458387,
            97515471,
            97514818,
            97514812,
            97514752,
            97514717,
            97462625,
            97478118,
            97463398,
            97456934,
            97468590,
            97472482,
            97456397,
            97465702,
            97461718
        ],
        "B": [
            97444657,
            97444364,
            97444049,
            97441804,
            97446454,
            97444215,
            97443077,
            97445131,
            97444667,
            97514148,
            97444728,
            97447073,
            97465519,
            97447003,
            97445633,
            97445150,
            97448727,
            97454658,
            97448347,
            97442585
        ],
        "A": [
            97436722,
            97436568,
            97436299,
            97438819,
            97440488,
            97436328,
            97437458,
            97436707,
            97440205,
            97514153,
            97437001,
            97448738,
            97444789,
            97436058,
            97438579,
            97436174,
            97437755,
            97436528,
            97438505,
            97439502
        ]
    },
    "name": "E. Black, White and Grey Tree",
    "statement": "You are given a tree with each vertex coloured white, black or grey. You\r\ncan remove elements from the tree by selecting a subset of vertices in a\r\nsingle connected component and removing them and their adjacent edges\r\nfrom the graph. The only restriction is that you are not allowed to\r\nselect a subset containing a white and a black vertex at once.What is\r\nthe minimum number of removals necessary to remove all vertices from the\r\ntree?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n \nusing ll = long long;\nusing ld = long double;\nusing db = double; \nusing str = string; // yay python!\n\nusing pi = pair<int,int>;\nusing pl = pair<ll,ll>;\nusing pd = pair<db,db>;\n\nusing vi = vector<int>;\nusing vb = vector<bool>;\nusing vl = vector<ll>;\nusing vd = vector<db>; \nusing vs = vector<str>;\nusing vpi = vector<pi>;\nusing vpl = vector<pl>; \nusing vpd = vector<pd>;\n\n#define tcT template<class T\n#define tcTU tcT, class U\n// ^ lol this makes everything look weird but I'll try it\ntcT> using V = vector<T>; \ntcT, size_t SZ> using AR = array<T,SZ>; \ntcT> using PR = pair<T,T>;\n\n// pairs\n#define mp make_pair\n#define f first\n#define s second\n\n// vectors\n#define sz(x) (int)(x).size()\n#define all(x) begin(x), end(x)\n#define rall(x) (x).rbegin(), (x).rend() \n#define sor(x) sort(all(x)) \n#define rsz resize\n#define ins insert \n#define ft front() \n#define bk back()\n#define pf push_front \n#define pb push_back\n#define eb emplace_back \n#define lb lower_bound \n#define ub upper_bound \n\n// loops\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\n#define F0R(i,a) FOR(i,0,a)\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\n#define R0F(i,a) ROF(i,0,a)\n#define trav(a,x) for (auto& a: x)\n\nconst int MOD = 1e9+7; // 998244353;\nconst int MX = 2e5+5;\nconst ll INF = 1e18; // not too close to LLONG_MAX\nconst ld PI = acos((ld)-1);\nconst int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1}; // for every grid problem!!\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count()); \ntemplate<class T> using pqg = priority_queue<T,vector<T>,greater<T>>;\n\n// helper funcs\nconstexpr int pct(int x) { return __builtin_popcount(x); } // # of bits set\nconstexpr int bits(int x) { return 31-__builtin_clz(x); } // floor(log2(x)) \nll cdiv(ll a, ll b) { return a/b+((a^b)>0&&a%b); } // divide a by b rounded up\nll fdiv(ll a, ll b) { return a/b-((a^b)<0&&a%b); } // divide a by b rounded down\n\ntcT> bool ckmin(T& a, const T& b) {\n\treturn b < a ? a = b, 1 : 0; } // set a = min(a,b)\ntcT> bool ckmax(T& a, const T& b) {\n\treturn a < b ? a = b, 1 : 0; }\n\ntcTU> T fstTrue(T lo, T hi, U f) {\n\thi ++; assert(lo <= hi); // assuming f is increasing\n\twhile (lo < hi) { // find first index such that f is true \n\t\tT mid = lo+(hi-lo)/2;\n\t\tf(mid) ? hi = mid : lo = mid+1; \n\t} \n\treturn lo;\n}\ntcTU> T lstTrue(T lo, T hi, U f) {\n\tlo --; assert(lo <= hi); // assuming f is decreasing\n\twhile (lo < hi) { // find first index such that f is true \n\t\tT mid = lo+(hi-lo+1)/2;\n\t\tf(mid) ? lo = mid : hi = mid-1;\n\t} \n\treturn lo;\n}\ntcT> void remDup(vector<T>& v) { // sort and remove duplicates\n\tsort(all(v)); v.erase(unique(all(v)),end(v)); }\ntcTU> void erase(T& t, const U& u) { // don't erase\n\tauto it = t.find(u); assert(it != end(t));\n\tt.erase(u); } // element that doesn't exist from (multi)set\n\n// INPUT\n#define tcTUU tcT, class ...U\ntcT> void re(complex<T>& c);\ntcTU> void re(pair<T,U>& p);\ntcT> void re(vector<T>& v);\ntcT, size_t SZ> void re(AR<T,SZ>& a);\n\ntcT> void re(T& x) { cin >> x; }\nvoid re(db& d) { str t; re(t); d = stod(t); }\nvoid re(ld& d) { str t; re(t); d = stold(t); }\ntcTUU> void re(T& t, U&... u) { re(t); re(u...); }\n\ntcT> void re(complex<T>& c) { T a,b; re(a,b); c = {a,b}; }\ntcTU> void re(pair<T,U>& p) { re(p.f,p.s); }\ntcT> void re(vector<T>& x) { trav(a,x) re(a); }\ntcT, size_t SZ> void re(AR<T,SZ>& x) { trav(a,x) re(a); }\ntcT> void rv(int& n, vector<T>& x) { re(n); x.rsz(n); trav(a,x) re(a); }\n\n// TO_STRING\n#define ts to_string\nstr ts(char c) { return str(1,c); }\nstr ts(const char* s) { return (str)s; }\nstr ts(str s) { return s; }\nstr ts(bool b) { \n\t#ifdef LOCAL\n\t\treturn b ? \"true\" : \"false\"; \n\t#else \n\t\treturn ts((int)b);\n\t#endif\n}\ntcT> str ts(complex<T> c) { \n\tstringstream ss; ss << c; return ss.str(); }\nstr ts(vector<bool> v) {\n\tstr res = \"{\"; F0R(i,sz(v)) res += char('0'+v[i]);\n\tres += \"}\"; return res; }\ntemplate<size_t SZ> str ts(bitset<SZ> b) {\n\tstr res = \"\"; F0R(i,SZ) res += char('0'+b[i]);\n\treturn res; }\ntcTU> str ts(pair<T,U> p);\ntcT> str ts(T v) { // containers with begin(), end()\n\t#ifdef LOCAL\n\t\tbool fst = 1; str res = \"{\";\n\t\tfor (const auto& x: v) {\n\t\t\tif (!fst) res += \", \";\n\t\t\tfst = 0; res += ts(x);\n\t\t}\n\t\tres += \"}\"; return res;\n\t#else\n\t\tbool fst = 1; str res = \"\";\n\t\tfor (const auto& x: v) {\n\t\t\tif (!fst) res += \" \";\n\t\t\tfst = 0; res += ts(x);\n\t\t}\n\t\treturn res;\n\n\t#endif\n}\ntcTU> str ts(pair<T,U> p) {\n\t#ifdef LOCAL\n\t\treturn \"(\"+ts(p.f)+\", \"+ts(p.s)+\")\"; \n\t#else\n\t\treturn ts(p.f)+\" \"+ts(p.s);\n\t#endif\n}\n\n// OUTPUT\ntcT> void pr(T x) { cout << ts(x); }\ntcTUU> void pr(const T& t, const U&... u) { \n\tpr(t); pr(u...); }\nvoid ps() { pr(\"\\n\"); } // print w/ spaces\ntcTUU> void ps(const T& t, const U&... u) { \n\tpr(t); if (sizeof...(u)) pr(\" \"); ps(u...); }\n\n// DEBUG\nvoid DBG() { cerr << \"]\" << endl; }\ntcTUU> void DBG(const T& t, const U&... u) {\n\tcerr << ts(t); if (sizeof...(u)) cerr << \", \";\n\tDBG(u...); }\n#ifdef LOCAL // compile with -DLOCAL, chk -> fake assert\n\t#define dbg(...) cerr << \"Line(\" << __LINE__ << \") -> [\" << #__VA_ARGS__ << \"]: [\", DBG(__VA_ARGS__)\n\t#define chk(...) if (!(__VA_ARGS__)) cerr << \"Line(\" << __LINE__ << \") -> function(\" \\\n\t\t << __FUNCTION__  << \") -> CHK FAILED: (\" << #__VA_ARGS__ << \")\" << \"\\n\", exit(0);\n#else\n\t#define dbg(...) 0\n\t#define chk(...) 0\n#endif\n\n// FILE I/O\nvoid setIn(str s) { freopen(s.c_str(),\"r\",stdin); }\nvoid setOut(str s) { freopen(s.c_str(),\"w\",stdout); }\nvoid unsyncIO() { cin.tie(0)->sync_with_stdio(0); }\nvoid setIO(str s = \"\") {\n\tunsyncIO();\n\t// cin.exceptions(cin.failbit); \n\t// throws exception when do smth illegal\n\t// ex. try to read letter into int\n\tif (sz(s)) { setIn(s+\".in\"), setOut(s+\".out\"); } // for USACO\n}\n\n// make sure to intialize ALL GLOBAL VARS between tcs!\n\nint N;\nvi A;\nV<vi> adj;\n// V<AR<int,3>> dp;\n\n// AR<int,3> operator+(AR<int,3> a, AR<int,3> b) {\n// \tAR<int,3> res{MOD,MOD,MOD};\n// \tF0R(x,3) F0R(y,3) {\n// \t\tint z = x|y;\n// \t\tif (z < 3) ckmin(res[z],a[x]+b[y]);\n// \t}\n// \treturn res;\n// }\n\n// AR<int,3> dfs(int x, int y) {\n// \tAR<int,3> res{};\n// \tif (A[x]) {\n// \t\tF0R(i,3) res[i] = MOD;\n// \t\tres[A[x]] = 0;\n// \t}\n// \ttrav(t,adj[x]) if (t != y) {\n// \t\tauto tmp = dfs(t,x);\n// \t\tres = res+tmp;\n// \t} \n// \tFOR(j,1,3) ckmin(res[0],res[j]+1);\n// \treturn res;\n// }\n\nint go(int x) {\n\tvi leaf[3];\n\tvi deg(N+1);\n\tFOR(i,1,N+1) {\n\t\tdeg[i] = sz(adj[i]);\n\t\tif (deg[i] == 1) leaf[A[i]].pb(i);\n\t}\n\tint cnt = 0;\n\twhile (1) {\n\t\tcnt ++;\n\t\twhile (sz(leaf[x]) || sz(leaf[0])) {\n\t\t\tint ind = sz(leaf[x])?x:0;\n\t\t\tint q = leaf[ind].bk; leaf[ind].pop_back();\n\t\t\ttrav(t,adj[q]) {\n\t\t\t\tdeg[t] --;\n\t\t\t\tif (deg[t] == 1) leaf[A[t]].pb(t);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tif (sz(leaf[x^3]) == 0) return cnt;\n\t\tx ^= 3;\n\t}\n}\n\nvoid solve(int tc) {\n\tre(N);\n\tA = vi(N+1);\n\tadj = V<vi>(N+1);\n\t// dp = V<AR<int,3>>(N+1);\n\tFOR(i,1,N+1) re(A[i]);\n\tF0R(i,N-1) {\n\t\tint u,v; re(u,v);\n\t\tadj[u].pb(v), adj[v].pb(u);\n\t}\n\t// dbg(\"READ\",N);\n\t// if (N == 1) {\n\t// \tps(1);\n\t// \treturn;\n\t// }\n\tint a = go(1);\n\tint b = go(2);\n\tps(min(a,b));\n\t// auto huh = dfs(1,0);\n\t// ps(min(min(huh[0],huh[1]),huh[2])+1);\n}\n\nint main() {\n\t// if all grey -> print 1\n\tsetIO();\n\tint TC; re(TC);\n\tFOR(i,1,TC+1) solve(i);\n}\n\n/* stuff you should look for\n\t* int overflow, array bounds\n\t* special cases (n=1?)\n\t* do smth instead of nothing and stay organized\n\t* WRITE STUFF DOWN\n\t* DON'T GET STUCK ON ONE APPROACH\n*/\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "dfs and similar",
        "dp",
        "greedy",
        "trees"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Black, White and Grey Tree.json",
    "editorial_link": "https://codeforces.com//blog/entry/84298",
    "editorial": "Letâs solve the task step by step: Suppose that tree is a bamboo without\r\nthe grey vertices. Such a tree can be viewed as an array of colors and .\r\nWe can see that if there are two adjacent vertices of equal color, we\r\ncan always delete them together in one operation. We can merge adjacent\r\nvertices of the same color, and get an array of colors , such that .\r\nSuch an array can be defined by two numbers .We can see that such an\r\narray of length can not be deleted in less than removals. It can be\r\nproved by induction. Also, you can delete all elements in this number of\r\nremovals by deleting opposite leaves (after the first removal opposite\r\nleaves will have the same color). Letâs solve the task for a general\r\ntree without grey vertices. Letâs assign the edge with weight if , and\r\notherwise. Letâs find the longest path (diameter) in this weighted tree,\r\nand let it be the vertices . We can see this path as bamboo from the\r\nprevious paragraph, and find the corresponding value for this path (it\r\nis equal to diameter + 1). It is obvious that we canât delete the tree\r\nin less than removals (otherwise we would be able to delete the bamboo\r\nin a smaller number of removals). Turns out that we can delete all\r\nvertices in this number of removals. We can do the same algorithm letâs\r\ndelete the opposite leaves of diameter, and also letâs delete all leaves\r\nin the tree that have the same color (why not). After one such removal,\r\nour path will still be a diameter (if another path becomes the diameter,\r\nthen one of its leaves should have the same color, and was going to be\r\ndeleted).We can find the diameter in such a 0/1 tree in linear time, or\r\nwe can solve the task even simpler. We can see that we alternate the\r\nremoval of black and white vertices, and we delete all the leaves with\r\nthe same color. So, we can choose the first operation (delete black or\r\nwhite), and at each iteration just delete all corresponding leaves. It\r\nworks in linear time. Letâs solve the task without additional\r\nconstraints. Now there are the grey vertices. How do they change the\r\nsolution? Letâs see at the last removal suppose we deleted vertex ,\r\nwhich was not grey. Then we can imagine that we make the root of the\r\ntree, and paint all the grey vertices in the color of their parents.\r\nThen we have a tree without grey vertices, which we can solve.\r\nObviously, the answer for such a colored tree is not less than the\r\nanswer for the initial tree (because we can make the same removals as in\r\na colored tree). But we can see that we canât get the smaller answer, as\r\nby coloring grey vertices we effectively removed them from the tree, and\r\nthe value (over subsequences of black and white vertices) hasnât\r\nchanged.So, overall, the solution is to choose the first removal (1 or\r\n2), and alternate removals of black and white vertices. For removal of\r\nwe delete all the leaves with color or . Also, we can note that the tree\r\nremains connected in this process.\r\n",
    "hint": []
}