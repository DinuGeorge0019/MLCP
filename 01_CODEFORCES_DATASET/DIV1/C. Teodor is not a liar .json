{
    "link": "https://codeforces.com//contest/930/problem/C",
    "problemId": "162260",
    "problem_idx": "C",
    "shortId": "930C",
    "contest_number": "930",
    "problem_submissions": {
        "E": [
            35937874,
            35940246,
            35942003,
            35941857,
            35942922,
            35943711,
            35940428,
            35939130,
            35941409,
            35945119,
            35945455,
            35938266,
            35942264,
            35942725
        ],
        "D": [
            35934631,
            35937311,
            35938039,
            35939179,
            35937578,
            35934166,
            35942235,
            35945157,
            35944906,
            35941913,
            35941573,
            35937960,
            35938844,
            35940488,
            35939332,
            35939670
        ],
        "C": [
            35931048,
            35931464,
            35931854,
            35931257,
            35932262,
            35938659,
            35933325,
            35930949,
            35933516,
            35933919,
            35936875,
            35931415,
            35932526,
            35933702,
            35934204,
            35934502,
            35932728,
            35934206,
            35934527
        ],
        "B": [
            35928663,
            35929193,
            35929409,
            35928730,
            35929849,
            35928584,
            35929521,
            35928824,
            35930726,
            35930401,
            35933251,
            35929420,
            35929927,
            35930360,
            35932014,
            35931682,
            35930124,
            35931864,
            35931720
        ],
        "A": [
            35926805,
            35926962,
            35927064,
            35926854,
            35927078,
            35929726,
            35930445,
            35926856,
            35927823,
            35927432,
            35928757,
            35926924,
            35926883,
            35927329,
            35927301,
            35927988,
            35927191,
            35927741,
            35928171
        ]
    },
    "name": "C. Teodor is not a liar ",
    "statement": "Young Teodor enjoys drawing. His favourite hobby is drawing segments\r\nwith integer borders inside his huge segment. One day Teodor noticed\r\nthat picture he just drawn has one interesting feature: there doesn\u2019t\r\nexist an integer point, that belongs each of segments in the picture.\r\nHaving discovered this fact, Teodor decided to share it with Sasha.Sasha\r\nknows that Teodor likes to show off so he never trusts him. Teodor wants\r\nto prove that he can be trusted sometimes, so he decided to convince\r\nSasha that there is no such integer point in his picture, which belongs\r\nto each segment. However Teodor is lazy person and neither wills to tell\r\nSasha all coordinates of segments\u2019 ends nor wills to tell him their\r\namount, so he suggested Sasha to ask him series of questions \u2019Given the\r\ninteger point , how many segments in Fedya\u2019s picture contain that\r\npoint?\u2019, promising to tell correct answers for this questions.Both boys\r\nare very busy studying and don\u2019t have much time, so they ask you to find\r\nout how many questions can Sasha ask Teodor, that having only answers on\r\nhis questions, Sasha can\u2019t be sure that Teodor isn\u2019t lying to him. Note\r\nthat Sasha doesn\u2019t know amount of segments in Teodor\u2019s picture. Sure,\r\nSasha is smart person and never asks about same point twice.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing ll = long long;\nusing ld = long double;\nusing ull = unsigned long long;\nusing namespace std;\n\nconst int MAXN = 100001;\n\nint fen[MAXN];\nint fl[MAXN];\nint fr[MAXN];\nint c[MAXN];\n\nvoid init() {\n    memset(fen, 0, sizeof(fen));\n}\n\nint n, m;\n\nvoid upd(int x, int y) {\n    for (int i = x; i <= n; i |= (i + 1)) {\n        fen[i] = max(fen[i], y);\n    }\n}\n\nint gt(int x) {\n    int ans = 0;\n    for (int i = x; i >= 0; i = (i & (i + 1)) - 1) {\n        ans = max(ans, fen[i]);\n    }\n\n    return ans;\n}\n\nint main() {\n#ifdef BZ\n    freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n#endif\n    ios_base::sync_with_stdio(false); cout.setf(ios::fixed); cout.precision(20); cout.tie(nullptr); cin.tie(nullptr);\n\n    cin >> n >> m;\n    for (int i = 0; i < n; ++i) {\n        int a, b;\n        cin >> a >> b;\n        ++c[a];\n        --c[b + 1];\n    }\n\n    for (int i = 2; i <= m; ++i) {\n        c[i] += c[i - 1];\n    }\n\n    init();\n    for (int i = 1; i <= m; ++i) {\n        upd(c[i], fl[i] = (gt(c[i]) + 1));\n    }\n\n    init();\n    int ans = 0;\n    for (int i = m; i >= 1; --i) {\n        upd(c[i], fr[i] = (gt(c[i]) + 1));\n        ans = max(ans, fl[i] + fr[i] - 1);\n    }\n\n\n    cout << ans << \"\\n\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Teodor is not a liar .json",
    "editorial_link": "https://codeforces.com//blog/entry/58177",
    "editorial": "Solution. Firstly let's calculate cnt(xi) for each integer point in [1;m]. One way to do this is scanning line, which asymptotics is O(m?+?n). Other approach uses segment tree supporting segment addition queries. In this case asymptotics is O(n\u00b7log(m)) .\n\nNow we only need to find longest sequence satisfying this property. Let's consider all possible xi in previous inequation(element that has peak cnt(xi)). Now the answer is length of longest nondecreasing sequence ending in xi?+? length of longest nonincreasing sequence, starting in xi?-?1. Both lengths can be found in O(1) if one precalculates this lengths for each 1???i???m, using dynamic programming. Note that you should use O(m\u00b7log(m)) algorithm for calculating this dp, not O(m2), otherwise you will end up with TL verdict.\n\nTotal asymptotics of this solution is O(m\u00b7log(m)) for solution using scanning line or O((n?+?m)\u00b7log(m)) for solution using segment tree."
}