{
    "link": "https://codeforces.com//contest/135/problem/B",
    "problemId": "717",
    "problem_idx": "B",
    "shortId": "135B",
    "contest_number": "135",
    "problem_submissions": {
        "C": [
            944684,
            941895,
            941745,
            941532,
            944650,
            945527,
            942928,
            943119,
            942454,
            943300,
            943389,
            941561,
            941623,
            940913,
            942350,
            941874,
            942533
        ],
        "D": [
            941660,
            943291,
            945020,
            944509,
            943932,
            944955,
            945060,
            946515,
            946811,
            946183,
            947267,
            1202616,
            943338,
            947399,
            947531,
            948318
        ],
        "B": [
            938992,
            939256,
            939578,
            939872,
            939430,
            940532,
            941115,
            940491,
            940317,
            940731,
            941548,
            939927,
            939245,
            939945,
            939103,
            940367,
            940260,
            939461
        ],
        "A": [
            937548,
            938377,
            938253,
            937895,
            937980,
            938055,
            938264,
            938797,
            937811,
            937813,
            938237,
            937770,
            937935,
            938511,
            937731,
            937759,
            937846,
            937880
        ],
        "E": [
            949929,
            947660,
            945720,
            950498,
            947878,
            947674
        ]
    },
    "name": "B. Rectangle and Square",
    "statement": "Little Petya very much likes rectangles and especially squares. Recently\r\nhe has received 8 points on the plane as a gift from his mother. The\r\npoints are pairwise distinct. Petya decided to split them into two sets\r\neach containing 4 points so that the points from the first set lay at\r\nthe vertexes of some square and the points from the second set lay at\r\nthe vertexes of a rectangle. Each point of initial 8 should belong to\r\nexactly one set. It is acceptable for a rectangle from the second set\r\nwas also a square. If there are several partitions, Petya will be\r\nsatisfied by any of them. Help him find such partition. Note that the\r\nrectangle and the square from the partition should have non-zero areas.\r\nThe sides of the figures to be parallel to the coordinate axes, though\r\nit might be the case.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <memory.h>\n#include <cstring>\n#include <ctime>\n#include <cmath>\n#include <set>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\n#define forn( i,n ) for ( int i=0; i<(int)(n); i++ )\n#define foreach( it, a ) for ( __typeof((a).begin()) it = (a).begin(); it != (a).end(); it++ )\n#define pb push_back\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int,int> pii;\n\n#define sqr(x) (x)*(x)\n\nint x[10], y[10], p[10];\n\nint dist( int i, int j ) {\n  return sqr(x[i]-x[j]) + sqr(y[i]-y[j]);\n}\n\nbool right(int i, int j, int k) {\n  return (y[k]-y[j]) * (y[j]-y[i] ) == (x[k]-x[j]) * (x[i]-x[j]);\n}\n\nint main()\n{\n  forn( i, 8 ) {\n    scanf( \"%d %d\", &x[i], &y[i] );\n    p[i] = i;\n  }\n  do {\n    bool ok = true;\n    ok &= right( p[0], p[1], p[2] );\n    ok &= right( p[1], p[2], p[3] );\n    ok &= right( p[2], p[3], p[0] );\n    ok &= right( p[3], p[0], p[1] );\n\n    ok &= right( p[4+0], p[4+1], p[4+2] );\n    ok &= right( p[4+1], p[4+2], p[4+3] );\n    ok &= right( p[4+2], p[4+3], p[4+0] );\n    ok &= right( p[4+3], p[4+0], p[4+1] );\n\n    if ( !ok ) continue;\n\n    ok &= dist( p[0], p[1] ) == dist( p[1], p[2] ) && dist( p[1], p[2] ) == dist( p[3], p[2] ) && dist( p[1], p[2] ) == dist( p[0], p[3] );\n    ok &= dist( p[5], p[6] ) == dist( p[4], p[7] ) && dist( p[4], p[5] ) == dist( p[6], p[7] );\n\n    if ( ok ) {\n      printf( \"YES\\n\" );\n      forn( i, 4 ) {\n        if ( i ) printf( \" \" );\n        printf( \"%d\", p[i]+1 );\n      }\n      printf( \"\\n\" );\n      forn( i, 4 ) {\n        if ( i ) printf( \" \" );\n        printf( \"%d\", p[i+4]+1 );\n      }\n\n      return 0;\n    }\n\n  } while ( next_permutation( p, p+8 ) );\n\n  printf( \"NO\\n\" );\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "geometry",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Rectangle and Square.json",
    "editorial_link": "https://codeforces.com//blog/entry/3353",
    "editorial": "Let's iterate over all partitions of our set of 8 points into two sets of 4 points. We want to check whether the first set forms a square and the second set forms a rectangle.\n\nTo check if 4 points lay at the vertexes of a rectangle one can iterate over all permutations of the last 3 points. Then one need to ensure that every two consecutive sides intersect at a 90 degrees angle. That can be done using the fact that the scalar product of two vectors is equal to 0 iff they intersect at a 90 degrees angle.\n\nTo check if 4 points lay at the vertexes of a square one can check whether they lay at the vertexes of a rectangle and ensure that two consecutive sides have equal length. "
}