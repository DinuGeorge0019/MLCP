{
    "link": "https://codeforces.com//contest/449/problem/C",
    "problemId": "11567",
    "problem_idx": "C",
    "shortId": "449C",
    "contest_number": "449",
    "problem_submissions": {
        "E": [
            7172419,
            7172014,
            7174895,
            7169365,
            7240994,
            7177576,
            9954696,
            9954686
        ],
        "A": [
            7167638,
            7162064,
            7159189,
            7170577,
            7159566,
            7171912,
            7174755,
            7177754,
            7174429,
            7180997,
            7161684,
            7182849,
            7192923,
            7180517,
            7168378,
            7168819,
            7159358
        ],
        "C": [
            7166638,
            7168442,
            7168589,
            7167422,
            7169338,
            7166871,
            7167683,
            7167793,
            7161177,
            7181293,
            7173309,
            7170890,
            7173119,
            7170721,
            7171917,
            7171483,
            7167450,
            7178771,
            7171038
        ],
        "D": [
            7161895,
            7168837,
            7161219,
            7163790,
            7163207,
            7165070,
            7164972,
            7165472,
            7166314,
            7182041,
            7171873,
            7166502,
            7159887,
            7192953,
            7166535,
            7169239,
            7169537,
            7165449,
            7159363,
            7166505
        ],
        "B": [
            7159593,
            7164450,
            7164390,
            7162671,
            7166735,
            7162159,
            7160515,
            7161879,
            7168809,
            7176245,
            7164684,
            7165872,
            7161265,
            7163102,
            7161569,
            7175028,
            7162358,
            7183380
        ]
    },
    "name": "C. Jzzhu and Apples",
    "statement": "Jzzhu has picked apples from his big apple tree. All the apples are\r\nnumbered from to . Now he wants to sell them to an apple store. Jzzhu\r\nwill pack his apples into groups and then sell them. Each group must\r\ncontain two apples, and the greatest common divisor of numbers of the\r\napples in each group must be greater than 1. Of course, each apple can\r\nbe part of at most one group.Jzzhu wonders how to get the maximum\r\npossible number of groups. Can you help him?\r\n",
    "solutions": [
        "#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <string>\n#include <cmath>\n#include <cstring>\nusing namespace std;\n#define MOD 1000000009\n#define ADD(X, Y) ((X) = ((X) + (Y)) % MOD)\n\nint N;\nint minp[100100];\n\nint cnt[100100];\nint rob[100100];\nvector<int> cands[100100];\n\nint main()\n{\n\tscanf(\"%d\", &N);\n\n\tfor(int i=0;i<=N;i++) {\n\t\tminp[i] = -1;\n\t\tcnt[i] = 0;\n\t\trob[i] = -1;\n\t}\n\n\tfor(int i=2;i<=N;i++) if(minp[i] == -1) {\n\t\tminp[i] = i;\n\t\tfor(int j=i;j<=N;j+=i) if(minp[j] == -1) minp[j] = i;\n\t}\n\n\tfor(int i=2;i<=N;i++) {\n\t\tcnt[minp[i]]++;\n\t}\n\tfor(int i=3;i<=N/2;i++) if(i == minp[i]) { //is prime\n\t\tif(cnt[i] % 2 == 1) {\n\t\t\trob[2*i] = i;\n\t\t\tcnt[2]--;\n\t\t}\n\t}\n\t//puts(\"aaa\");\n\tfor(int i=2;i<=N;i++) {\n\t\tif(rob[i] == -1) cands[minp[i]].push_back(i);\n\t\telse cands[rob[i]].push_back(i);\n\t}\n\tvector<pair<int, int> > ret;\n\tfor(int i=2;i<=N;i++) {\n\t\tfor(int j=0;j<(int)cands[i].size()-1;j+=2) ret.push_back(make_pair(cands[i][j], cands[i][j+1]));\n\t}\n\t\n\tprintf(\"%d\\n\", ret.size());\n\tfor(int i=0;i<ret.size();i++) printf(\"%d %d\\n\", ret[i].first, ret[i].second);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "number theory"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Jzzhu and Apples.json",
    "editorial_link": "https://codeforces.com//blog/entry/13112",
    "editorial": "Firstly, we should notice that and the primes larger than can not be\r\nmatched anyway, so we ignore these numbers. Letâs consider each prime\r\nwhere . For each prime , we find all of the numbers which are unmatched\r\nand have a divisor . Let be the count of those numbers we found. If is\r\neven, then we can match those numbers perfectly. Otherwise, we throw the\r\nnumber and the remaining numbers can be matched perfectly. Finally, only\r\neven numbers may be unmatched and we can match them in any way.\r\n",
    "hint": []
}