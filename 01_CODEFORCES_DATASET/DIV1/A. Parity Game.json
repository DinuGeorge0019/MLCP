{
    "link": "https://codeforces.com//contest/297/problem/A",
    "problemId": "2859",
    "problem_idx": "A",
    "shortId": "297A",
    "contest_number": "297",
    "problem_submissions": {
        "E": [
            3573577,
            3572177,
            3599204,
            3789658,
            3600333
        ],
        "C": [
            3572198,
            3569026,
            3567778,
            3569809,
            3574619,
            3568949,
            3571082,
            3571182,
            3571915,
            3572417,
            3571389,
            3576338,
            3581124
        ],
        "D": [
            3571285,
            3568393,
            3572434,
            3572411,
            3572809,
            3569746,
            3574175,
            3574132,
            3574196,
            3574904,
            3574825,
            3575155,
            3572689,
            3572000,
            3569044,
            3569682,
            3569691,
            3570483,
            3570423
        ],
        "B": [
            3565273,
            3565232,
            3566085,
            3565337,
            3567367,
            3565921,
            3564958,
            3565122,
            3565530,
            3566819,
            3566006,
            3566209,
            3567427,
            3565310,
            3565669,
            3565428,
            3567419,
            3567159,
            3565321
        ],
        "A": [
            3564985,
            3564892,
            3565047,
            3564918,
            3565603,
            3565210,
            3574423,
            3565848,
            3568320,
            3564943,
            3565186,
            3565376,
            3565311,
            3564926,
            3564908,
            3564901,
            3566394,
            3565891,
            3566461
        ]
    },
    "name": "A. Parity Game",
    "statement": "You are fishing with polar bears Alice and Bob. While waiting for the\r\nfish to bite, the polar bears get bored. They come up with a game. First\r\nAlice and Bob each writes a 01-string (strings that only contain\r\ncharacter \"\" and \"\") and . Then you try to turn into using two types of\r\noperations: Write to the end of . For example, . Remove the first\r\ncharacter of . For example, . You cannot perform this operation if is\r\nempty. You can use as many operations as you want. The problem is, is it\r\npossible to turn into ?The of a 01-string is if there is an odd number\r\nof \"\"s in the string, and otherwise.\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <stdio.h>\n#include <set>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <memory.h>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint main() {\n  string a, b;\n  cin >> a >> b;\n  int n = a.length(), m = b.length();\n  int x = 0, y = 0;\n  for (int i=0;i<n;i++)\n    if (a[i] == '1') x++;\n  for (int i=0;i<m;i++)\n    if (b[i] == '1') y++;\n  if (x & 1) x++;\n  if (x >= y) cout << \"YES\" << endl;\n  else cout << \"NO\" << endl;\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Parity Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/7437",
    "editorial": "Obv 1: If has odd parity, we can apply operation 1 to increase its\r\nnumber of 1s by . Obv 2: If has even parity, its number of 1s cannot\r\nincrease anymore. Claim: If the number of 1s in is not fewer than those\r\nin , we can always turn to The idea is to make a copy of at the right of\r\n. Lets assume starts with even parity. If we need a , simply apply\r\noperation 1. If we need a , keep remove from the head until we removed\r\nan 1. Notice that we never remove digits from \u00e2\u0080\u0099new part\u00e2\u0080\u0099 of . Now the\r\nparity of will be odd and we can apply operation 1. After that, the\r\nparity of becomes even again, the number of in the \u00e2\u0080\u0099old part\u00e2\u0080\u0099 of\r\ndecrease by and we handle a in . Finally, remove the remaining old part\r\nof and we get . Combine all those facts, we can conclude that we can\r\nturn into if and only if\r\n"
}