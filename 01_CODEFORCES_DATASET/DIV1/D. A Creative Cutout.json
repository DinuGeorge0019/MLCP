{
    "link": "https://codeforces.com//contest/933/problem/D",
    "problemId": "156721",
    "problem_idx": "D",
    "shortId": "933D",
    "contest_number": "933",
    "problem_submissions": {
        "E": [
            35263883,
            35251948,
            35268367,
            35268343,
            35258532,
            35265034,
            35258504,
            35265045
        ],
        "D": [
            35253928,
            35258185,
            35262993,
            35255562,
            35257209,
            35258119,
            35266124,
            35259046,
            35259628,
            35259700,
            35265335,
            35260449
        ],
        "B": [
            35233893,
            35242633,
            35232112,
            35233002,
            35238615,
            35243022,
            35243572,
            35238260,
            35247862,
            35234313,
            35245448,
            35242161,
            35237846,
            35238319,
            35230597,
            35242429,
            35250941,
            35238138,
            35236021
        ],
        "C": [
            35231166,
            35245330,
            35230279,
            35242029,
            49040337,
            35232953,
            35241307,
            35235433,
            36073540,
            35240997,
            35235741,
            35461289,
            35244755
        ],
        "A": [
            35230392,
            35232143,
            35233996,
            35230183,
            35230822,
            35233720,
            35235277,
            35231518,
            35235425,
            35231181,
            35231151,
            35232842,
            35231443,
            35233064,
            35232632,
            35243872,
            35232580,
            35231791,
            35232474,
            35231989
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/57763",
    "editorial": "For the sake of explanation, let\u00e2\u0080\u0099s use to represent the binomial\r\ncoefficient and construct a coordinate system such that each coordinate\r\naxis parallels to one of the lattice edges, the origin is the center of\r\nconcentric circles and each unit of length in this system is as long as\r\nthe length of a lattice edge. For , we could figure out the contribution\r\nof each lattice point is Defining as , we could conclude for the answer\r\nthe contribution of each lattice point is which is a small-degree\r\npolynomial of . Tips: prove with mathematical induction or others.By\r\nusing , we could form the answer as where is the coefficient calculated\r\nfrom the original polynomial.The remaining part to solve this problem is\r\njust to enumerate all the possible integers and then calculate , in\r\nconstant time. The total complexity is .By the way, the standard\r\nsolution has hardcoded some closed forms to calculate the partial sum of\r\nsmall powers fast, but you can precalculate and then enumerate .Please\r\nbe careful with 64-bit integer overflow, for example, . Although there\r\nis a pretest in case of to reject brute force and some solutions with\r\nobvious overflow, it is highly probable to fail in the case of large\r\ninput such as . The probability of failure is increasing when the number\r\nincreases. Take care. Solve the problem with .\r\n",
    "name": "D. A Creative Cutout",
    "statement": "Big Banban has got a piece of paper with endless lattice points, where\r\nlattice points form squares with the same area. His most favorite closed\r\nshape is the circle because of its beauty and simplicity. Once he had\r\nobtained this piece of paper, he prepares it for paper-cutting. He drew\r\nconcentric circles on it and numbered these circles from to such that\r\nthe center of each circle is the same lattice point and the radius of\r\nthe -th circle is times the length of a lattice edge.Define the degree\r\nof beauty of a lattice point as the summation of the of circles such\r\nthat this lattice point is inside them, or on their bounds. Banban\r\nwanted to ask you the total degree of beauty of all the lattice points,\r\nbut changed his mind.Defining the total degree of beauty of all the\r\nlattice points on a piece of paper with circles as , you are asked to\r\nfigure out .\r\n",
    "solutions": [
        "#include <iostream>#include <cstdio>#include <cstdlib>#include <algorithm>#include <cmath>#include <vector>#include <set>#include <map>#include <unordered_set>#include <unordered_map>#include <queue>#include <ctime>#include <cassert>#include <complex>#include <string>#include <cstring>using namespace std;\u00a0#ifdef LOCAL\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)#else\t#define eprintf(...) 42#endif\u00a0typedef long long ll;typedef pair<int, int> pii;#define mp make_pair\u00a0const ll MOD = (ll)1e9 + 7;ll add(ll x, ll y) {\tx = (x + y) % MOD;\tif (x < 0) x += MOD;\treturn x;}ll sub(ll x, ll y) {\tx = (x - y) % MOD;\tif (x < 0) x += MOD;\treturn x;}ll mult(ll x, ll y) {\treturn ((x % MOD) * (y % MOD)) % MOD;}\u00a0ll ANS = 0;\u00a0const int N = 100;ll rev[N];ll M;\u00a0ll get1(ll s) {\tll res = s - 1;\tres = mult(res, s);\tres = mult(res, 3 * M - 2 * s + 4);\treturn mult(res, rev[6]);}\u00a0ll getC0(ll A) {\tll res = (A * A - 1) % MOD;\tres = mult(res, A * A);\tres = mult(res, 3 * M - 2 * A * A + 4);\treturn res;}ll getC1(ll A) {\tll res = 0;\tres = add(res, mult(A * A, 3 * M - 2 * A * A + 4));\tres = add(res, mult(A * A - 1, 3 * M - 2 * A * A + 4));\tres = sub(res, mult(2 * A * A, A * A - 1));\treturn res;}ll getC2(ll A) {\tll res = 3 * M - 2 * A * A + 4 - 2 * A * A - 2 * (A * A - 1);\treturn (res % MOD + MOD) % MOD;}\u00a0ll getSum2(ll L) {\tll res = L;\tres = mult(res, L + 1);\tres = mult(res, 2 * L + 1);\treturn mult(rev[6], res);}ll getSum4(ll L) {\tll res = L;\tres = mult(res, L + 1);\tres = mult(res, 2 * L + 1);\tres = mult(res, 3 * mult(L, L) + 3 * L - 1);\treturn mult(rev[30], res);}ll getSum6(ll L) {\tll res = 1;\tres = sub(res, 3 * L);\tres = add(res, 6 * mult(L, L) * L);\tres = add(res, 3 * mult(mult(L, L), mult(L, L)));\tres = mult(res, L);\tres = mult(res, L + 1);\tres = mult(res, 2 * L + 1);\treturn mult(rev[42], res);}\u00a0int main(){//\tfreopen(\"input.txt\", \"r\", stdin);//\tfreopen(\"output.txt\", \"w\", stdout);\u00a0\trev[1] = 1;\tfor (ll x = 2; x < N; x++) {\t\trev[x] = (MOD - rev[MOD % x] * (MOD / x) % MOD) % MOD;\t}\u00a0\tscanf(\"%lld\", &M);\tll L = 0;\tfor (ll A = (ll)1e6 + 3; A > 0; A--) {\t\tif (A * A > M) continue;\t\tANS = add(ANS, mult(4, sub(get1(M + 1), get1(A * A))));\t\twhile(A * A + (L + 1) * (L + 1) <= M) L++;\t\t//cerr << A << \" \" << L << endl;\t\t//for (ll x = 1; A * A + x * x <= M; x++)\t\t//\tANS = add(ANS, mult(4, sub(get1(M + 1), get1(A * A + x * x))));\t\t\t\tll cur = mult(L, get1(M + 1));\t\tll C0 = getC0(A), C1 = getC1(A), C2 = getC2(A);\t\tcur = sub(cur, mult(rev[6], mult(C0, L)));\t\tcur = sub(cur, mult(rev[6], mult(C1, getSum2(L))));\t\tcur = sub(cur, mult(rev[6], mult(C2, getSum4(L))));\t\tcur = add(cur, mult(rev[3], getSum6(L)));\t\tANS = add(ANS, mult(4, cur));\t\t\t}\tANS = add(ANS, get1(M + 1));\tprintf(\"%lld\\n\", ANS);\u00a0\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "math"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. A Creative Cutout.json"
}