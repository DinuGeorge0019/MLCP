{
    "link": "https://codeforces.com//contest/1240/problem/B",
    "problemId": "432407",
    "problem_idx": "B",
    "shortId": "1240B",
    "contest_number": "1240",
    "problem_submissions": {
        "E": [
            62021022,
            62035875,
            62035850,
            62028210,
            62027934,
            62027922,
            62020968,
            62019492,
            62018107,
            62027376,
            62027344,
            62027323,
            62027283,
            62027247,
            62024590,
            62019193,
            62026365,
            62033510,
            66614259
        ],
        "F": [
            62015871,
            62023134,
            62022377,
            62098107,
            62038718,
            62038624,
            62038494,
            62038407,
            62038292,
            74689890,
            62022214
        ],
        "C": [
            62011492,
            62004160,
            62005302,
            62005113,
            62008834,
            61997769,
            62007006,
            62008153,
            62005139,
            62004806,
            62004551,
            62010900,
            62006495,
            62006440,
            62005717,
            62009451,
            62008088,
            62007344,
            62007020,
            62010351
        ],
        "D": [
            62009147,
            62009402,
            62014575,
            62037666,
            62037540,
            62037485,
            62037237,
            62030534,
            62030405,
            62030387,
            62030368,
            62030266,
            62027938,
            62013459,
            62012657,
            62006383,
            62007439,
            62012558,
            62014620,
            62005092,
            62013564,
            62012342,
            62013093,
            62013916,
            62013931,
            62014362,
            62014894
        ],
        "B": [
            61999051,
            61998153,
            62000446,
            61993443,
            62005202,
            62003856,
            62003729,
            61994391,
            61998951,
            61998615,
            61999693,
            62002895,
            62001444,
            62001486,
            61999611,
            62004268,
            62001331,
            62002370,
            62000744,
            61994760
        ],
        "A": [
            61993335,
            61995494,
            62011119,
            61998900,
            61995613,
            62001949,
            61995342,
            62005037,
            61996323,
            61994369,
            61994535,
            62007707,
            61995405,
            61994877,
            61995746,
            61997040,
            61995992,
            61997766,
            61995459,
            62004034
        ]
    },
    "name": "B. Sequence Sorting",
    "statement": "You are given a sequence a_1, a_2,\r\ndots, a_n, consisting of integers.You can apply the following operation\r\nto this sequence: choose some integer x and move elements equal to x\r\neither to the beginning, or to the end of a. Note that you have to move\r\nall these elements in direction in operation.For example, if a = [2, 1,\r\n3, 1, 1, 3, 2], you can get the following sequences in one operation\r\n(for convenience, denote elements equal to x as x-elements): [1, 1, 1,\r\n2, 3, 3, 2] if you move all 1-elements to the beginning; [2, 3, 3, 2, 1,\r\n1, 1] if you move all 1-elements to the end; [2, 2, 1, 3, 1, 1, 3] if\r\nyou move all 2-elements to the beginning; [1, 3, 1, 1, 3, 2, 2] if you\r\nmove all 2-elements to the end; [3, 3, 2, 1, 1, 1, 2] if you move all\r\n3-elements to the beginning; [2, 1, 1, 1, 2, 3, 3] if you move all\r\n3-elements to the end; You have to determine the minimum number of such\r\noperations so that the sequence a becomes sorted in non-descending\r\norder. Non-descending order means that for all i from 2 to n, the\r\ncondition a_{i-1}\r\nle a_i is satisfied.Note that you have to answer q independent queries.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nmt19937 mrand(random_device{}()); \nconst ll mod=1000000007;\nint rnd(int x) { return mrand() % x;}\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nconst int N=301000;\nint n,l[N],r[N],a[N],c[N],_;\n\nint query(int x) {\n\tint s=0;\n\tfor (;x;x-=x&-x) s=max(s,c[x]);\n\treturn s;\n}\nvoid modify(int x,int s) {\n\tfor (;x<=n;x+=x&-x) c[x]=max(c[x],s);\n}\n\nvoid solve() {\n\tscanf(\"%d\",&n);\n\trep(i,1,n+1) l[i]=n+1,r[i]=-1;\n\trep(i,1,n+1) {\n\t\tscanf(\"%d\",a+i);\n\t\tl[a[i]]=min(l[a[i]],i);\n\t\tr[a[i]]=max(r[a[i]],i);\n\t}\n\tvector<PII> zz;\n\trep(i,1,n+1) {\n\t\tif (l[i]>r[i]) continue;\n\t\tzz.pb(mp(l[i],r[i]));\n\t}\n\tint ans2=0;\n\tint cc=0;\n\trep(i,0,SZ(zz)) {\n\t\tif (i==0||zz[i].fi<zz[i-1].se) cc=1;\n\t\telse cc++;\n\t\tans2=max(ans2,cc);\n\t}\n\tprintf(\"%d\\n\",SZ(zz)-ans2);\n}\n\nint main() {\n\tfor (scanf(\"%d\",&_);_;_--) {\n\t\tsolve();\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "two pointers"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Sequence Sorting.json",
    "editorial_link": "https://codeforces.com/blog/entry/70358",
    "editorial": "Let's consider two sequences of integers m1<m2<?<mk\n and d1<d2<?<dl\n. Sequence m\n contains integers which were used in some operation in the optimal answer. Sequence d\n contains integers which were not used.\n\nFor example, if a=[2,1,3,5,4]\n, then optimal answer is move all 1\n-elements to the beginning and then move all 5\n-elements to the end, so m=[1,5]\n and d=[2,3,4]\n.\n\nTwo important conditions are held for these sequences:\n\nmaxInd(di?1)<minInd(di)\n for every i\n from 2\n to l\n. minInd(x)\n is the minimum index i\n such that ai=x\n, and maxInd(x)\n is the maximum index i\n such that ai=x\n;\nfor each i\n from 2\n to l\n there is no such integer x\n, that di<x<di+1\n and sequence m\n contains this integer x\n.\nSince the answer is equal to |m|=k\n, we want to minimize this value. So we want to maximize the length of sequence d\n.\n\nFor each integer l\n we want to find the maximum integer dpl=len\n such that we can sort sequence a\n without moving elements in range l\u0085l+len?1\n. We can do it with dynamic programming.\n\nLet's consider all integers occurring in sequence a\n in descending order s1,s2,\u0085,st\n (si?1>si\n for each i\n from 2\n to t\n). If maxInd(si)<minInd(si+1)\n then dpi=dpi+1+1\n, otherwise dpi=1\n.\n\nThe answer is equal to t?maxi=1\u0085tdpi\n, there t\n is the number of distinct integers in sequence a\n."
}