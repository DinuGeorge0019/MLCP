{
    "link": "https://codeforces.com//contest/860/problem/B",
    "problemId": "122865",
    "problem_idx": "B",
    "shortId": "860B",
    "contest_number": "860",
    "problem_submissions": {
        "E": [
            30442338,
            30439610,
            30443019,
            30443046,
            30440508,
            30432483,
            30439294,
            30445411,
            30436063,
            30437142,
            30437221,
            30481068,
            30480696,
            30454225,
            30453851,
            30453830,
            30453714,
            30453688,
            30451950,
            30438289,
            30430653,
            30450525
        ],
        "C": [
            30436281,
            30442840,
            30434064,
            30433549,
            30444395,
            30448672,
            30433775,
            30432045,
            30440377,
            30451948,
            30455922,
            30438248,
            30440061,
            30440352,
            30434684,
            30440440,
            30440439,
            30441823
        ],
        "D": [
            30433124,
            30431343,
            30438212,
            30436898,
            30431927,
            30428404,
            30445018,
            30435042,
            30427155,
            30430494,
            30439252,
            30433856,
            31966531,
            30430878,
            30431992,
            30442376,
            30442582,
            30437824,
            30433265,
            30433563,
            30431407
        ],
        "B": [
            30425955,
            30423718,
            30424479,
            30425464,
            30424782,
            30426033,
            30423375,
            30424915,
            30427560,
            30426303,
            30423664,
            30424888,
            30426149,
            30428815,
            30436103,
            30426185,
            30427070,
            30426587,
            30424713
        ],
        "A": [
            30423599,
            30422216,
            30422379,
            30422507,
            30422342,
            30423247,
            30422321,
            30422663,
            30422437,
            30424719,
            30423379,
            30422275,
            30422538,
            30422660,
            30423270,
            30433600,
            30422460,
            30423290,
            30423757,
            30422708
        ]
    },
    "name": "B. Polycarp s phone book",
    "statement": "There are phone numbers in Polycarp\u2019s contacts on his phone. Each number\r\nis a 9-digit integer, starting with a digit different from . All the\r\nnumbers are distinct.There is the latest version of Berdroid OS\r\ninstalled on Polycarp\u2019s phone. If some number is entered, is shows up\r\nall the numbers in the contacts for which there is a substring equal to\r\nthe entered sequence of digits. For example, is there are three phone\r\nnumbers in Polycarp\u2019s contacts: , and , then: if he enters two numbers\r\nwill show up: and , if he enters two numbers will show up and , if he\r\nenters there will be only one number . For each of the phone numbers in\r\nPolycarp\u2019s contacts, find the minimum in length sequence of digits such\r\nthat if Polycarp enters this sequence, Berdroid shows this only phone\r\nnumber.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef signed long long ll;\n\n#undef _P\n#define _P(...) (void)printf(__VA_ARGS__)\n#define FOR(x,to) for(x=0;x<(to);x++)\n#define FORR(x,arr) for(auto& x:arr)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define ALL(a) (a.begin()),(a.end())\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\n//-------------------------------------------------------\n\nint N;\nstring S[70707];\nint num[70707][10][10];\nmap<int,int> M[10];\n\nvoid solve() {\n\tint i,j,k,l,r,x,y; string s;\n\t\n\tcin>>N;\n\tFOR(i,N) {\n\t\tcin>>S[i];\n\t\tfor(int l=1;l<=9;l++) {\n\t\t\tfor(x=0;x+l<=9;x++) {\n\t\t\t\tnum[i][x][l]=stoi(S[i].substr(x,l).c_str());\n\t\t\t\tM[l][num[i][x][l]]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tFOR(i,N) {\n\t\tfor(int l=1;l<=9;l++) {\n\t\t\tint ret=-1;\n\t\t\tfor(x=0;x+l<=9;x++) if(--M[l][num[i][x][l]]==0) ret=x;\n\t\t\tfor(x=0;x+l<=9;x++) ++M[l][num[i][x][l]];\n\t\t\t\n\t\t\tif(ret>=0) {\n\t\t\t\tcout<<S[i].substr(ret,l)<<endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nint main(int argc,char** argv){\n\tstring s;int i;\n\tif(argc==1) ios::sync_with_stdio(false), cin.tie(0);\n\tFOR(i,argc-1) s+=argv[i+1],s+='\\n'; FOR(i,s.size()) ungetc(s[s.size()-1-i],stdin);\n\tcout.tie(0); solve(); return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "hashing",
        "implementation",
        "strings"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Polycarp s phone book.json",
    "editorial_link": "https://codeforces.com//blog/entry/54604",
    "editorial": "Find the shortest substring of each string such that it doesn't appear in any other string as a substring. For each substring let's store the index of the string which contains this substring or ?-?1 if there are more than one such string. Iterate over all substrings which have values that are not ?-?1 and update the answer for the corresponding string."
}