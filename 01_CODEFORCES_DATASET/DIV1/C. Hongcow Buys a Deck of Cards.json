{
    "link": "https://codeforces.com//contest/744/problem/C",
    "problemId": "85241",
    "problem_idx": "C",
    "shortId": "744C",
    "contest_number": "744",
    "problem_submissions": {
        "D": [
            23172550,
            23101161,
            23068735,
            23073667,
            23132587,
            23132570,
            23072938
        ],
        "B": [
            23071347,
            23055547,
            23056640,
            23057482,
            23055511,
            23066941,
            23058988,
            23055885,
            23055635,
            23056110,
            23057772,
            23056735,
            23057617,
            23056511,
            23062111,
            23062274,
            23057681,
            23057651,
            23056286
        ],
        "C": [
            23071345,
            23057499,
            23060727,
            23060442,
            23060420,
            23066137,
            23056758,
            23059869,
            23060628,
            23060184,
            23060124,
            23061291,
            23060827,
            23061807,
            23057367,
            23057447,
            23062076,
            23060867,
            23062926
        ],
        "E": [
            23071342,
            23063797,
            23070592,
            23069714,
            23064327
        ],
        "A": [
            23071326,
            23052903,
            23053379,
            23054137,
            23053853,
            23053406,
            23053000,
            23053710,
            23053750,
            23054145,
            23053643,
            23053798,
            23058381,
            23059184,
            23053344,
            23054382,
            23053476
        ]
    },
    "name": "C. Hongcow Buys a Deck of Cards",
    "statement": "One day, Hongcow goes to the store and sees a brand new deck of special\r\ncards. Each individual card is either red or blue. He decides he wants\r\nto buy them immediately. To do this, he needs to play a game with the\r\nowner of the store.This game takes some number of turns to complete. On\r\na turn, Hongcow may do one of two things: Collect tokens. Hongcow\r\ncollects red token blue token by choosing this option (thus, tokens in\r\ntotal per one operation). Buy a card. Hongcow chooses some card and\r\nspends tokens to purchase it as specified below. The -th card requires\r\nred resources and blue resources. Suppose Hongcow currently has red\r\ncards and blue cards. Then, the -th card will require Hongcow to spend\r\nred tokens, and blue tokens. Note, only tokens disappear, but the cards\r\nstay with Hongcow forever. Each card can be bought only once.Given a\r\ndescription of the cards and their costs determine the minimum number of\r\nturns Hongcow needs to purchase all cards.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 77777;\nconst int MAX = 300;\n\nint f[N][MAX];\nint cR[N], cB[N];\nint r[N], b[N];\nbool type[N];\n\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  for (int i = 0; i < n; i++) {\n    char ch = getchar();\n    while (ch != 'R' && ch != 'B') {\n      ch = getchar();\n    }\n    type[i] = (ch == 'R');\n    scanf(\"%d %d\", r + i, b + i);\n  }\n  for (int t = 0; t < (1 << n); t++) {\n    cR[t] = cB[t] = 0;\n    for (int i = 0; i < n; i++) {\n      if (t & (1 << i)) {\n        cR[t] += (type[i] == true);\n        cB[t] += (type[i] == false);\n      }\n    }\n  }\n  for (int t = 0; t < (1 << n); t++) {\n    for (int ar = 0; ar < MAX; ar++) {\n      f[t][ar] = -1;\n    }\n  }\n  f[0][0] = 0;\n  for (int t = 0; t < (1 << n); t++) {\n    for (int ar = 0; ar < MAX; ar++) {\n      int ft = f[t][ar];\n      if (ft == -1) {\n        continue;\n      }\n      for (int i = 0; i < n; i++) {\n        if (t & (1 << i)) {\n          continue;\n        }\n        int new_ar = ar + min(r[i], cR[t]);\n        int new_ab = ft + min(b[i], cB[t]);\n        if (new_ab > f[t + (1 << i)][new_ar]) {\n          f[t + (1 << i)][new_ar] = new_ab;\n        }\n      }\n    }\n  }\n  int allR = 0, allB = 0;\n  for (int i = 0; i < n; i++) {\n    allR += r[i];\n    allB += b[i];\n  }\n  int ans = max(allR, allB);\n  for (int ar = 0; ar < MAX; ar++) {\n    int ab = f[(1 << n) - 1][ar];\n    if (ab == -1) {\n      continue;\n    }\n    ans = min(ans, max(allR - ar, allB - ab));\n  }\n  printf(\"%d\\n\", ans + n);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "dp"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Hongcow Buys a Deck of Cards.json",
    "editorial_link": "https://codeforces.com//blog/entry/49126",
    "editorial": "Also note that if r_i or b_i >= n, we need to collect tokens no matter\r\nwhat since those costs can\u00e2\u0080\u0099t be offset. So, we can assume that r_i, b_i\r\n<= n. Let\u00e2\u0080\u0099s only buy tokens when we need them. Note that after buying a\r\ncard, you will have either 0 red tokens or 0 blue tokens, so our dp\r\nstate can be described by [mask][which one is zero][how many of the\r\nother] The dimensions of this dp table are 2^n * 2 * (n^2) (n^2 because\r\nthe costs to buy cards is at most n). See the code for more details on\r\nhow to update this dp. code\r\n"
}