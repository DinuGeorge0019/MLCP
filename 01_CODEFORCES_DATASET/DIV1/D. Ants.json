{
    "link": "https://codeforces.com//contest/1007/problem/D",
    "problemId": "197250",
    "problem_idx": "D",
    "shortId": "1007D",
    "contest_number": "1007",
    "problem_submissions": {
        "C": [
            40289014,
            40311007,
            40303376,
            40289853,
            40282836,
            40298460,
            40292416,
            40291392,
            40315809,
            40295182,
            43029830
        ],
        "B": [
            40273384,
            40274250,
            40291551,
            40287008,
            40280350,
            40301243,
            40277597,
            40277856,
            40278440,
            40276236,
            40280080,
            40280290,
            40278003,
            40280632,
            40280737,
            40278002
        ],
        "A": [
            40264928,
            40264790,
            40264714,
            40264612,
            40266456,
            40265453,
            40267936,
            40264621,
            40264617,
            40264727,
            40264905,
            40264738,
            40265555,
            40264686,
            40264608,
            40264865,
            40264835,
            40265293
        ],
        "D": [
            40284510,
            40287759,
            40291268,
            62534541,
            40294556,
            40301360
        ],
        "E": [
            54819990,
            54819956,
            47314793
        ]
    },
    "name": "D. Ants",
    "statement": "There is a tree with n vertices. There are also m ants living on it.\r\nEach ant has its own color. The i-th ant has two favorite pairs of\r\nvertices: (a_i, b_i) and (c_i, d_i). You need to tell if it is possible\r\nto paint the edges of the tree in m colors so that every ant will be\r\nable to walk between vertices from one of its favorite pairs using only\r\nedges of his color; if it is possible, you need to print which pair\r\nevery ant should use.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\n\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define trav(a, x) for(auto& a : x)\n#define all(x) x.begin(), x.end()\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntypedef vector<pii> vpi;\n\nstruct Tree {\n\ttypedef int T;\n\tconst T LOW = -1234567890;\n\tT f(T a, T b) { return max(a, b); }\n\n\tint n;\n\tvi s;\n\tvector<vector<int> > stuff;\n\tTree() {}\n\tTree(int m, T def=0) { init(m, def); }\n\tvoid init(int m, T def) {\n\t\tn = 1; while (n < m) n *= 2;\n\t\ts.assign(n + m, def);\n\t\ts.resize(2 * n, LOW);\n\t\tstuff.resize(2 * n);\n\t\tfor (int i = n; i --> 1; )\n\t\t\ts[i] = f(s[i * 2], s[i*2 + 1]);\n\t}\n\tvoid update(int pos, T val) {\n\t\tpos += n;\n\t\ts[pos] = val;\n\t\tfor (pos /= 2; pos >= 1; pos /= 2)\n\t\t\ts[pos] = f(s[pos * 2], s[pos * 2 + 1]);\n\t}\n\tT query(int l, int r, int id) {\n\t\treturn que(1, l, r, 0, n, id);\n\t}\n\tT que(int pos, int l, int r, int lo, int hi, int id) {\n\t\tif (r <= lo || hi <= l) return LOW;\n\t\tif (l <= lo && hi <= r){\n\t\t\tstuff[pos].push_back(id);\n\t\t\treturn s[pos];\n\t\t}\n\t\tint m = (lo + hi) / 2;\n\t\treturn f(que(2 * pos, l, r, lo, m, id),\n\t\t\t\tque(2 * pos + 1, l, r, m, hi, id));\n\t}\n};\n\nstruct Node {\n\tint d, par, val, chain = -1, pos = -1;\n\tvector<int> stuff;\n};\n\nstruct Chain {\n\tint par, val;\n\tvector<int> nodes;\n\tTree tree;\n};\n\nstruct HLD {\n\ttypedef int T;\n\tconst T LOW = -(1<<29);\n\tvoid f(T& a, T b) { a = max(a, b); }\n\n\tvector<Node> V;\n\tvector<Chain> C;\n\n\tHLD(vector<vpi>& g) : V(sz(g)) {\n\t\tdfs(0, -1, g, 0);\n\t\ttrav(c, C){\n\t\t\tc.tree.init(sz(c.nodes), 0);\n\t\t\tfor (int ni : c.nodes)\n\t\t\t\tc.tree.update(V[ni].pos, V[ni].val);\n\t\t}\n\t}\n\n\tvoid update(int node, T val) {\n\t\tNode& n = V[node]; n.val = val;\n\t\tif (n.chain != -1) C[n.chain].tree.update(n.pos, val);\n\t}\n\n\tint pard(Node& nod) {\n\t\tif (nod.par == -1) return -1;\n\t\treturn V[nod.chain == -1 ? nod.par : C[nod.chain].par].d;\n\t}\n\n\t// query all *edges* between n1, n2\n\tpair<T, int> query(int i1, int i2, int id) {\n\t\tT ans = LOW;\n\t\twhile(i1 != i2) {\n\t\t\tNode n1 = V[i1], n2 = V[i2];\n\t\t\tif (n1.chain != -1 && n1.chain == n2.chain) {\n\t\t\t\tint lo = n1.pos, hi = n2.pos;\n\t\t\t\tif (lo > hi) swap(lo, hi);\n\t\t\t\tf(ans, C[n1.chain].tree.query(lo, hi, id));\n\t\t\t\ti1 = i2 = C[n1.chain].nodes[hi];\n\t\t\t} else {\n\t\t\t\tif (pard(n1) < pard(n2))\n\t\t\t\t\tn1 = n2, swap(i1, i2);\n\t\t\t\tif (n1.chain == -1){\n\t\t\t\t\tf(ans, n1.val);\n\t\t\t\t\tV[i1].stuff.push_back(id);\n\t\t\t\t\ti1 = n1.par;\n\t\t\t\t} else {\n\t\t\t\t\tChain& c = C[n1.chain];\n\t\t\t\t\tif(n1.pos){\n\t\t\t\t\t\tf(ans, c.tree.query(n1.pos, sz(c.nodes), id));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tf(ans, c.tree.s[1]);\n\t\t\t\t\t\tc.tree.stuff[1].push_back(id);\n\t\t\t\t\t}\n\t\t\t\t\ti1 = c.par;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn make_pair(ans, i1);\n\t}\n\n\tpii dfs(int at, int par, vector<vpi>& g, int d) {\n\t\tV[at].d = d; V[at].par = par;\n\t\tint sum = 1, ch, nod, sz;\n\t\ttuple<int,int,int> mx(-1,-1,-1);\n\t\ttrav(e, g[at]){\n\t\t\tif (e.first == par) continue;\n\t\t\ttie(sz, ch) = dfs(e.first, at, g, d+1);\n\t\t\tV[e.first].val = e.second;\n\t\t\tsum += sz;\n\t\t\tmx = max(mx, make_tuple(sz, e.first, ch));\n\t\t}\n\t\ttie(sz, nod, ch) = mx;\n\t\tif (2*sz < sum) return pii(sum, -1);\n\t\tif (ch == -1) { ch = sz(C); C.emplace_back(); }\n\t\tV[nod].pos = sz(C[ch].nodes);\n\t\tV[nod].chain = ch;\n\t\tC[ch].par = at;\n\t\tC[ch].nodes.push_back(nod);\n\t\treturn pii(sum, ch);\n\t}\n};\n\nstruct TwoSat {\n\tint N;\n\tvector<vi> gr;\n\tvi values; // 0 = false, 1 = true\n\n\tTwoSat(int n = 0) : N(n), gr(2*n) {}\n\n\tint add_var() { // (optional)\n\t\tgr.emplace_back();\n\t\tgr.emplace_back();\n\t\treturn N++;\n\t}\n\n\tvoid either(int f, int j) {\n\t\tf = max(2*f, -1-2*f);\n\t\tj = max(2*j, -1-2*j);\n\t\tgr[f^1].push_back(j);\n\t\tgr[j^1].push_back(f);\n\t}\n\tvoid set_value(int x) { either(x, x); }\n\n\tvoid at_most_one(const vi& li) { // (optional)\n\t\tif (sz(li) <= 1) return;\n\t\tint cur = ~li[0];\n\t\trep(i,2,sz(li)) {\n\t\t\tint next = add_var();\n\t\t\teither(cur, ~li[i]);\n\t\t\teither(cur, next);\n\t\t\teither(~li[i], next);\n\t\t\tcur = ~next;\n\t\t}\n\t\teither(cur, ~li[1]);\n\t}\n\n\tvi val, comp, z; int time = 0;\n\tint dfs(int i) {\n\t\tint low = val[i] = ++time, x; z.push_back(i);\n\t\ttrav(e, gr[i]) if (!comp[e])\n\t\t\tlow = min(low, val[e] ?: dfs(e));\n\t\t++time;\n\t\tif (low == val[i]) do {\n\t\t\tx = z.back(); z.pop_back();\n\t\t\tcomp[x] = time;\n\t\t\tif (values[x>>1] == -1)\n\t\t\t\tvalues[x>>1] = !(x&1);\n\t\t} while (x != i);\n\t\treturn val[i] = low;\n\t}\n\n\tbool solve() {\n\t\tvalues.assign(N, -1);\n\t\tval.assign(2*N, 0); comp = val;\n\t\trep(i,0,2*N) if (!comp[i]) dfs(i);\n\t\trep(i,0,N) if (comp[2*i] == comp[2*i+1]) return 0;\n\t\treturn 1;\n\t}\n};\n\n// variable number\nint dostuff(TwoSat& ts, Tree& t, int id){\n\tint z = ts.add_var();\n\tif(id >= t.s.size()){\n\t\treturn z;\n\t} else {\n\t\tts.at_most_one(t.stuff[id]);\n\t\tint uses = ts.add_var();\n\t\tfor(int q : t.stuff[id]){\n\t\t\tts.either(~q, uses);\n\t\t}\n\t\tint lz = dostuff(ts, t, 2 * id);\n\t\tint rz = dostuff(ts, t, 2 * id + 1);\n\t\tts.either(~uses, ~lz);\n\t\tts.either(~uses, ~rz);\n\t\tts.either(~uses, z);\n\t\tts.either(~lz, z);\n\t\tts.either(~rz, z);\n\t\treturn z;\n\t}\n}\n\nint main(){\n\tcin.sync_with_stdio(0); cin.tie(0);\n\tint n;\n\tcin >> n;\n\n\tvector<vpi> graph(n);\n\tfor(int i = 0; i < n-1; i++){\n\t\tint a, b;\n\t\tcin >> a >> b;\n\t\ta--; b--;\n\t\tgraph[a].push_back({b,0});\n\t\tgraph[b].push_back({a,0});\n\t}\n\tint m;\n\tcin >> m;\n\tHLD hld(graph);\n\tfor(int i = 0; i < m; i++){\n\t\tint a, b, c, d;\n\t\tcin >> a >> b >> c >> d;\n\t\ta--; b--; c--; d--;\n\t\thld.query(a, b, i);\n\t\thld.query(c, d, ~i);\n\t}\n\tTwoSat ts(m);\n\tfor(Node& v : hld.V){\n\t\tts.at_most_one(v.stuff);\n\t}\n\tfor(Chain& c : hld.C){\n\t\tdostuff(ts, c.tree, 1);\n\t}\n\tif(ts.solve()){\n\t\tcout << \"YES\" << '\\n';\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tint r = 2 - ts.values[i];\n\t\t\tcout << r << '\\n';\n\t\t}\n\t} else {\n\t\tcout << \"NO\" << '\\n';\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "2-sat",
        "data structures",
        "trees"
    ],
    "dificulty": "3200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Ants.json",
    "editorial_link": "https://codeforces.com//blog/entry/60572",
    "editorial": "We need to choose one of two paths for each ant so that they will not\r\ncontain a common edge. Letâs make a 2-SAT, and for each ant, we will\r\ncreate two contrary vertices: one will denote that we take the first\r\npath, and another will denote that we take the second path. Then for\r\nevery two paths which share an edge, we add a condition that they canât\r\nbe taken together. Now we just need to check that the 2-SAT has a\r\nsolution.The complexity is .Letâs build a binary tree with leaves for\r\neach edge. Each vertex of the tree will be associated with some vertex\r\nof the 2-SAT. The vertex of the tree which covers leaves from to will be\r\nassociated with a vertex of the 2-SAT which says if the edge should be\r\npainted with a color from to . To build a vertex which is associated\r\nwith a leaf we just need to add for every path of the ant which covers\r\nthe current edge a condition which tells that if we take this path, then\r\nthis vertex is true. And for every non-leaf vertex of the tree we need\r\nto add three conditions. First and second: if any of the vertices\r\nassociated with the two sons is true, then the vertex associated with\r\nthe current vertex is also true (, ). And third: both vertices\r\nassociated with the two sons canât be true ().The trees will be\r\npersistent, which means that if the vertex we want already exists, we\r\nwill reuse it.Now we will build such trees recursively. First for the\r\nchildren, and then for the current edge. To build a tree for a new edge\r\nwe first take an empty tree, then for each child, we recursively merge\r\nits tree with the current. If during the merge one of the vertices is\r\nempty, we return the second vertex. Then we add the paths which end in\r\nthe current vertex.You have to be careful not to add the edges which\r\nwill not be present in the final tree. For example, you can first build\r\na tree, and then go through the new vertices one more time and add the\r\nedges.Then as in the previous solution, we check if there is a solution\r\nof this 2-SAT.It can be shown that for a vertex of the binary tree which\r\ncovers leaves there will be created no more than instances of this\r\nvertex, because there are at most ends of the paths connected with these\r\nleaves and at most vertices which are the LCA of some set of these\r\nvertices. Now if we summarize it over all the vertices of the binary\r\ntree, we get approximately . So the total complexity is Let be the\r\nnumber of bits in a machine word.Letâs calculate a matrix of ones and\r\nzeros, where cell is filled with iff the paths and have a common edge.\r\nWe will store this matrix as an array of bitsets.Letâs run a DFS which\r\nfor every edge will return a set of paths that cover it. We will store\r\nsuch sets in a map from number of block to a bitmask of length . We\r\nrecursively calculate the sets for the children. Also for every path\r\nwhich starts in the vertex, we make a set containing only this path.\r\nThen if some sets share the same path, we remove it from both. Then we\r\nmerge them by always adding the smaller map to the larger. While doing\r\nso we iterate over the elements of the smaller map and over the blocks\r\nof the larger map and add a block of edges to the matrix. For now, it is\r\nenough to add each edge to the matrix only in one direction. It can be\r\nshown that it works in .Now we want to transpose the matrix and add it\r\nto itself to make it complete. To do it we divide it into blocks , and\r\ntranspose them one by one, then swap the blocks. Here is how we\r\ntranspose a block.Assume . We will make iterations. On the iteration we\r\nwill divide the block into subblocks and in each block, we will swap the\r\ntop right quarter and the bottom left quarter. Each iteration can be\r\nperformed in . We can prove by induction that after iterations each\r\nsubblock will be transposed.This step works in .It is easy to get a\r\nbitset of straight edges and a bitset of reversed edges of the 2-SAT for\r\nevery vertex using this matrix. Now if we store the visited vertices in\r\na bitset, we can implement the 2-SAT algorithm in .The total complexity\r\nis .\r\n",
    "hint": []
}