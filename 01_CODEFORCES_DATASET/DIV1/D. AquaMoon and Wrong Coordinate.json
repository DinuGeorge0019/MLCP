{
    "link": "https://codeforces.com//contest/1545/problem/D",
    "problemId": "1042720",
    "problem_idx": "D",
    "shortId": "1545D",
    "contest_number": "1545",
    "problem_submissions": {
        "D": [
            122107122,
            122101318,
            122112155,
            122104020,
            122109653,
            122107428,
            122115750,
            122116493,
            122121641,
            122123526,
            122112699,
            122120695,
            122128586,
            122117389,
            122107326,
            122130554,
            122090817,
            122093272,
            122093535
        ],
        "C": [
            122095530,
            122110873,
            122098409,
            122112986,
            122088985,
            122122234,
            122107021,
            122110115,
            122100227,
            122102454,
            122124600,
            122110793,
            122110757,
            122109117,
            122128432,
            122119096,
            122155152,
            122213467
        ],
        "A": [
            122082186,
            122076078,
            122075671,
            122076509,
            122122714,
            122075627,
            122075591,
            122075678,
            122076215,
            122076949,
            122075854,
            122076317,
            122085649,
            122075796,
            122075639,
            122080513,
            122075936,
            122075621,
            122078770
        ],
        "B": [
            122079612,
            122088170,
            122082472,
            122119780,
            122079771,
            122077496,
            122090297,
            122081981,
            122082032,
            122084749,
            122098370,
            122095139,
            122093255,
            122128209,
            122084402,
            122088184,
            122078878,
            122077599,
            122119388
        ],
        "F": [
            122258728,
            122258683,
            122258676,
            122258661,
            122258513,
            122258288,
            122147603,
            122158393,
            122158209
        ],
        "E2": [
            122155943,
            122135135
        ],
        "E1": [
            122155936,
            122155364,
            122153713,
            122135243
        ]
    },
    "name": "D. AquaMoon and Wrong Coordinate",
    "statement": "Cirno gives AquaMoon a problem. There are m people numbered from 0 to\r\nm - 1. They are standing on a coordinate axis in points with positive\r\ninteger coordinates. They are facing right (i.e. in the direction of the\r\ncoordinate increase). At this moment everyone will start running with\r\nthe constant speed in the direction of coordinate increasing. The\r\ninitial coordinate of the i-th person on the line is x_i, and the speed\r\nof the i-th person is v_i. So the coordinate of the i-th person at the\r\nmoment t will be x_i + t\r\ncdot v_i.Cirno captured the coordinates of m people in k consecutive\r\ninteger moments from 0 to k - 1. In every moment, the coordinates of m\r\npeople were recorded in .To make the problem more funny, Cirno modified\r\none coordinate at the moment y (0 < y < k-1) to a integer.AquaMoon wants\r\nto find the moment y and the original coordinate p before the\r\nmodification. Actually, she is not a programmer at all. So she wasn\u2019t\r\nable to solve it. Can you help her?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define F first\n#define S second\n#define pb push_back\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int>pi;\ntypedef vector<int>vi;\nconst int maxn=1111;\nconst int M=998244353;\nint n,k,p;\nll s[maxn],s2[maxn],a[maxn][maxn],vr,S,S2;\nll solve(ll x,ll y,ll z){\n    return 3*z+x-3*y;\n}\nll sqr(ll x){return x*x;}\nint main(){\n    scanf(\"%d%d\",&n,&k); k--;\n    for (int i=0;i<=k;i++){\n        for (int j=1;j<=n;j++){\n            scanf(\"%d\",&a[i][j]);\n            s[i]+=a[i][j];\n            s2[i]+=sqr(a[i][j]);\n        }\n    }\n    vr=(s[k]-s[0])/k;\n    for (int i=1;i<k;i++) if (s[i]!=s[0]+vr*i) {p=i;break;}\n    assert(p);\n    S=s[0]+vr*p;\n    if (p>=3) S2=solve(s2[p-3],s2[p-2],s2[p-1]); else S2=solve(s2[p+3],s2[p+2],s2[p+1]);\n    for (int i=1;i<=n;i++){\n        ll tmp=s2[p];\n        tmp-=sqr(a[p][i]);\n        tmp+=sqr(a[p][i]+(S-s[p]));\n        if (tmp==S2){\n            printf(\"%d %lld\\n\",p,a[p][i]+(S-s[p]));\n            break;\n        }\n    }\n    fflush(stdout);\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "interactive",
        "math"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. AquaMoon and Wrong Coordinate.json",
    "editorial_link": "https://codeforces.com//blog/entry/92739",
    "editorial": "Let's denote for sum[t]\n the sum of all coordinates at the moment t\n, and for sum2[t]\n the sum of all squared coordinates at the moment t\n.\n\nIf there is no error, the sum of the coordinates of all moments will be an arithmetic series, and the difference is ?mi=1vi\n. It's easy to find the moment that contains the modified coordinate.\n\nAssuming that the moment that contains the modified coordinate is found, first use three consecutive moments without the modified coordinate. Suppose it is t\n, t+1\n, t+2\n. Sum of squared coordinates of moment t\n is sum2[t]=?mi=1(xi+t?vi)2\n. Sum of squared coordinates of moment t+1\n is sum2[t+1]=?mi=1(xi+(t+1)?vi)2\n. Sum of squared coordinates of moment t+2\n is sum2[t+2]=?ni=1(xi+(t+2)?vi)2\n. We could easy to get sum2[t]+sum2[t+2]?2\u00d7sum2[t+1]=2\u00d7?mi=1v2i\n. In this way, we can know the value of 2\u00d7?mi=1v2i\n.\n\nThen we can enumerate which integer was modified at the moment y\n. We could try to update the integer back to the original coordinate, so that it can meet both sum[y?1]+sum[y+1]=2\u00d7sum[y]\n and sum2[y?1]+sum2[y+1]?2\u00d7sum2[y]=2\u00d7?mi=1v2i\n. It would be easy to get the original coordinate."
}