{
    "link": "https://codeforces.com//contest/1083/problem/D",
    "problemId": "268424",
    "problem_idx": "D",
    "shortId": "1083D",
    "contest_number": "1083",
    "problem_submissions": {
        "F": [
            46915087,
            46876311,
            46868384,
            46877366,
            46879128,
            46934792,
            46934770,
            46934758,
            46934487,
            46934473,
            46934346,
            46934338,
            46934202,
            46933927,
            46928101,
            46927984,
            46927894,
            46927871,
            46927855,
            46927824,
            46927737,
            46927669,
            46927614,
            46881270
        ],
        "E": [
            46869370,
            46871694,
            46869499,
            46863810,
            46865492,
            46873246,
            46870302,
            46870225,
            46877380,
            73537754,
            46882329,
            46878807,
            46866936,
            46868963,
            46871231,
            46872499,
            46871547,
            46871489,
            46871036,
            46871727,
            46869495,
            50322936,
            50315966,
            49844673,
            49844653,
            46872514
        ],
        "C": [
            46867095,
            46877292,
            47334658,
            46890375,
            46870788,
            46950972,
            46950940,
            46950838,
            46877308,
            46877619,
            46875434,
            46987974,
            46883043,
            46874242,
            46882744,
            46942133
        ],
        "B": [
            46861840,
            46872617,
            46861528,
            46859342,
            46860406,
            46863456,
            46865386,
            46864693,
            46865545,
            46861409,
            46863762,
            46864513,
            46863287,
            46861669,
            46861388,
            46863642,
            46862875,
            46865443,
            46861004,
            46867808
        ],
        "A": [
            46860516,
            46860277,
            46860154,
            46866668,
            46859314,
            46876109,
            46860042,
            46861931,
            46860073,
            46859289,
            46859440,
            46860646,
            46859325,
            46859654,
            46859377,
            46861868,
            46860315,
            46863438,
            46865470,
            46859724
        ],
        "D": [
            46882403,
            46994123
        ]
    },
    "name": "D. The Fair Nut s getting crazy",
    "statement": "The Fair Nut has found an array a of n integers. We call subarray l\r\nldots r a sequence of consecutive elements of an array with indexes from\r\nl to r, i.e. a_l, a_{l+1}, a_{l+2},\r\nldots, a_{r-1}, a_{r}. No one knows the reason, but he calls a pair of\r\nsubsegments good if and only if the following conditions are satisfied:\r\nThese subsegments should not be nested. That is, each of the subsegments\r\nshould contain an element (as an index) that does not belong to another\r\nsubsegment. Subsegments intersect and each element that belongs to the\r\nintersection belongs each of segments only once.For example a=[1, 2, 3,\r\n5, 5]. Pairs (1\r\nldots 3; 2\r\nldots 5) and (1\r\nldots 2; 2\r\nldots 3)) are good, but (1\r\ndots 3; 2\r\nldots 3) and (3\r\nldots 4; 4\r\nldots 5) are not (subsegment 1\r\nldots 3 contains subsegment 2\r\nldots 3, integer 5 belongs both segments, but occurs twice in subsegment\r\n4\r\nldots 5).Help the Fair Nut to find out the number of pairs of good\r\nsubsegments! The answer can be rather big so print it modulo 10^9+7.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nusing i64 = long long;\n\nconst int maxN = 1234567;\nconst i64 mod = 1000000007;\n\nstruct atom {\n\ti64 s0, sa, sb, sab;\n\ti64 taga, tagb;\n} t[maxN << 2];\n\nmap<int, int> num;\nstack<pair<int, int>> seg, sega;\nint n, m;\nint ocr[maxN], pos[maxN], a[maxN];\ni64 s0, s1, ans;\n\nvoid pushup(int p) {\n\tt[p].sa = (t[p + p].sa + t[p + p + 1].sa) % mod;\n\tt[p].sb = (t[p + p].sb + t[p + p + 1].sb) % mod;\n\tt[p].sab = (t[p + p].sab + t[p + p + 1].sab) % mod;\n}\n\nvoid apply(int p, i64 taga, i64 tagb) {\n\tt[p].taga = (t[p].taga + taga) % mod;\n\tt[p].tagb = (t[p].tagb + tagb) % mod;\n\tt[p].sab = (t[p].sab + taga * t[p].sb + tagb * t[p].sa + taga * tagb * t[p].s0) % mod;\n\tt[p].sa = (t[p].sa + taga * t[p].s0) % mod;\n\tt[p].sb = (t[p].sb + tagb * t[p].s0) % mod;\n}\nvoid build(int p, int l, int r) {\n\tt[p].s0 = r - l + 1;\n\tif (l == r) {\n\t\tt[p]. sa = l - 1;\n\t} else {\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(p + p, l, mid);\n\t\tbuild(p + p + 1, mid + 1, r);\n\t\tpushup(p);\n\t}\n}\n\nvoid pushdown(int p) {\n\tif (t[p].taga || t[p].tagb) {\n\t\tapply(p + p, t[p].taga, t[p].tagb);\n\t\tapply(p + p + 1, t[p].taga, t[p].tagb);\n\t\tt[p].taga = 0;\n\t\tt[p].tagb = 0;\n\t}\n}\n\ni64 query(int p, int l, int r, int segl, int segr) {\n\tif (segl > segr) return 0;\n\tif (segl == l && segr == r) {\n\t\treturn t[p].sab;\n\t} else {\n\t\tpushdown(p);\n\t\tint mid = (l + r) >> 1;\n\t\treturn (query(p + p, l, mid, segl, min(mid, segr)) +\n\t\t        query(p + p + 1, mid + 1, r, max(mid + 1, segl), segr)) % mod;\n\t}\n}\nvoid modify(int p, int l, int r, int segl, int segr, int taga, int tagb) {\n\tif (segl == l && segr == r) {\n\t\tapply(p, taga, tagb);\n\t} else {\n\t\tpushdown(p);\n\t\tint mid = (l + r) >> 1;\n\t\tif (segl <= mid) modify(p + p, l, mid, segl, min(mid, segr), taga, tagb);\n\t\tif (segr > mid) modify(p + p + 1, mid + 1, r, max(mid + 1, segl), segr, taga, tagb);\n\t\tpushup(p);\n\t}\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++) {\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\tif (!num.count(x)) {\n\t\t\tnum[x] = ++m;\n\t\t}\n\t\ta[i] = num[x];\n\t}\n\tfor (int i = 1; i <= m; i++) ocr[i] = n + 1;\n\tfor (int i = n; i >= 1; i--) {\n\t\tpos[i] = ocr[a[i]];\n\t\tocr[a[i]] = i;\n\t}\n\tbuild(1, 1, n);\n\tfor (int i = 1; i <= m; i++) ocr[i] = 0;\n\tint posl = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t\tint posr = ocr[a[i]];\n\t\tposl = max(posl, ocr[a[i]]);\n\t\tocr[a[i]] = i;\n\t\tint p = i;\n\t\twhile (!seg.empty() && seg.top().second > pos[i]) {\n\t\t\tmodify(1, 1, n, seg.top().first, p - 1, 0, -seg.top().second);\n\t\t\tp = seg.top().first;\n\t\t\tseg.pop();\n\t\t}\n\t\tmodify(1, 1, n, p, i, 0, pos[i]);\n\t\tseg.push(make_pair(p, pos[i]));\n\t\tp = i;\n\t\twhile (!sega.empty() && sega.top().second < posr) {\n\t\t\tmodify(1, 1, n, sega.top().first, p - 1, sega.top().second, 0);\n\t\t\tp = sega.top().first;\n\t\t\tsega.pop();\n\t\t}\n\t\tmodify(1, 1, n, p, i, -posr, 0);\n\t\tsega.push(make_pair(p, posr));\n\t\tmodify(1, 1, n, posl + 1, i, 0, -i - 1);\n\t\tans = (ans + query(1, 1, n, posl + 1, i)) % mod;\n\t\tmodify(1, 1, n, posl + 1, i, 0, i + 1);\n\t}\n\tif (ans < 0) ans += mod;\n\tprintf(\"%lld\\n\", ans);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. The Fair Nut s getting crazy.json",
    "editorial_link": "https://codeforces.com/blog/entry/63753?locale=en",
    "editorial": "Consider O() solution: Fix intersection of this segments . We will call\r\nright barrier those integer , that right border of right segment can be\r\nfrom . Also Left barrier is integer, that left border of left segment\r\ncan be from . If we precalculate for each element the furthest left and\r\nright elements equal to our (): and . Add to answer ()*() for all\r\nsegment intersections. Faster solution: Let\u00e2\u0080\u0099s go i= and keep two arrays\r\nLeft and Right in any data structure, =Left barrier for segment , =Right\r\nbarrier for segment . We need to add sum of ()*() for all from to .\r\nLet\u00e2\u0080\u0099s do it using clever Segment Tree.Imagine we are in position i and\r\nwe want to recalculate arrays Left and Right after increasing by .\r\nElement has furthest left equal . We need to do on prefix in array Left.\r\nWith Right everything is similar. We can note, that Left and Right are\r\nmonotonous, so we can just do equation on some segment.Now we want to\r\nupdate the answer. We are in position i, amount of good pairs of\r\nsegments are ()*()=*-()*()+*()-*(). *() we can keep in separate Segment\r\nTree. Calculating -()*()-*() is easy too. To get * we need segment tree,\r\nwhich can do update on first array segment, update on second array\r\nsegment, get sum of pair products. It can be done keeping sum of Left\u00e2\u0080\u0099s,\r\nsum of Right\u00e2\u0080\u0099s, and sum of * , and some modificators. We can do it using\r\npush\u00e2\u0080\u0099s. To see details you can see the code.\r\n"
}