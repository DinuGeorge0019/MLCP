{"link": "https://codeforces.com//contest/1852/problem/C", "problemId": "2099134", "problem_idx": "C", "shortId": "1852C", "contest_number": "1852", "problem_submissions": {"F": [215258181, 215285692, 217509901, 217509714], "E": [215240027, 215239122, 215243644, 215243658, 215248799, 215245960, 215237098, 215240727, 215296441, 215327365, 215336328, 217901271, 215247415], "D": [215222100, 215222081, 215222261, 215225730, 215218775, 215382147, 215226776, 215250750, 215250174, 215230611, 215232642, 215226731, 215232589, 215240152, 215237043, 215236182, 215239579, 215241752, 215242725], "C": [215209363, 215208759, 215214250, 215220833, 215208505, 215217394, 215219756, 215218376, 215205472, 215208510, 215213920, 215221691, 215216406, 215223920, 215226652, 215216927, 215221642, 215210662, 215212429], "B": [215201282, 215200579, 215202726, 215199335, 215200474, 215207713, 215208166, 215202505, 215214027, 215200003, 215206319, 215205331, 215204344, 215212727, 215206313, 215209315, 215209426, 215199777, 215204560], "A": [215201184, 215192031, 215194261, 215194419, 215219859, 215194029, 215260286, 215197669, 215196351, 215192202, 215192228, 215192416, 215194163, 215196399, 215195136, 215198712, 215191998, 215201193, 215192233, 215195682]}, "name": "C. Ina of the Mountain", "statement": "There are n octopuses on a single-file trail on Ina\u2019s mountain, numbered\r\n1, 2,\r\nldots, n. The i-th octopus has a certain initial health value a_i, where\r\n1\r\nleq a_i\r\nleq k.Each boulder crushes consecutive octopuses with indexes l, l+1,\r\nldots, r, where 1\r\nleq l\r\nleq r\r\nleq n. You can choose the numbers l and r arbitrarily for each\r\nboulder.For each boulder, the health value of each octopus the boulder\r\ncrushes is reduced by 1. However, as octopuses are immortal, once they\r\nreach a health value of 0, they will immediately regenerate to a health\r\nvalue of k. Given the octopuses\u2019 initial health values, find the number\r\nof boulders that need to be thrown to make the health of all octopuses\r\nequal to k.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n, k;\n    std::cin >> n >> k;\n    \n    std::vector<int> a(n + 2);\n    std::priority_queue<i64, std::vector<i64>, std::greater<i64>> q;\n    i64 add = 0;\n    for (int i = 1; i <= n; i++) {\n        std::cin >> a[i];\n        if (a[i] == k) {\n            a[i] = 0;\n        }\n    }\n    \n    i64 ans = 0;\n    int p = 0;\n    for (int i = 1; i <= n + 1; i++) {\n        if (a[i] >= a[i - 1]) {\n            q.push(a[i] - a[i - 1]);\n        } else {\n            q.push(0);\n            q.push(k + a[i] - a[i - 1]);\n        }\n        ans += q.top();\n        q.pop();\n    }\n    \n    std::cout << ans << \"\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "dp", "greedy", "math"], "dificulty": "2400", "interactive": false}