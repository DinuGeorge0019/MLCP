{
    "link": "https://codeforces.com//contest/2097/problem/E",
    "problemId": "3353169",
    "problem_idx": "E",
    "shortId": "2097E",
    "contest_number": "2097",
    "problem_submissions": {
        "F": [
            317307318,
            317309525,
            317309102,
            317312383,
            317316279,
            317325883,
            317416247,
            317580233,
            317579495,
            317578954,
            317578471,
            317578170,
            317576401,
            317575526,
            317574565,
            317326012
        ],
        "C": [
            317301103,
            317292740,
            317292086,
            317292797,
            317292557,
            317300448,
            317293184,
            317293569,
            317295891,
            317295305,
            317293328,
            317304181,
            317299563,
            317305951,
            317296495,
            317302226,
            317306136,
            317302946
        ],
        "E": [
            317299854,
            317301108,
            317299586,
            317304189,
            317304951,
            317308313,
            317313597,
            317305664,
            317317246,
            317322289,
            317316806,
            317319809,
            317318900,
            317321182,
            317406068,
            317321088,
            317322736,
            317322644
        ],
        "D": [
            317296567,
            317296050,
            317297072,
            317301213,
            317322631,
            317315490,
            317304532,
            317321371,
            317306823,
            317303050,
            317304957,
            317310591,
            317315906,
            317313581,
            317306990,
            317307372,
            317315011,
            317317721
        ],
        "B": [
            317283633,
            317287516,
            317287207,
            317285769,
            317289590,
            317285943,
            317288249,
            317285819,
            317286523,
            317288061,
            317290152,
            317289644,
            317297031,
            317288240,
            317297080,
            317298214,
            317294941
        ],
        "A": [
            317279828,
            317283931,
            317284029,
            317281512,
            317283570,
            317281675,
            317282711,
            317280805,
            317280621,
            317281741,
            317281827,
            317282878,
            317285451,
            317282463,
            317280852,
            317282823,
            317324194
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142316",
    "editorial": "We will assign to each operation the maximum on the segment of that\r\noperation. Consider some order of operations that zeroes out the entire\r\narray. If there are two adjacent operations in which the maximum on the\r\nsegment of the earlier operation is smaller, then we can swap these two\r\noperations without changing anything (we leave this simple case analysis\r\nas an exercise for the reader). Thus, from any sequence, we can obtain a\r\nsequence of operations of the same length where the assigned maximums on\r\nthe segments of the operations do not increase during the process.Now\r\nlet denote the maximum element in the array. Then one of the optimal\r\nsequences of operations will first decrease by one all numbers equal to\r\n, then all numbers equal to , and so on. How can we calculate the\r\nminimum number of operations needed to decrease all numbers equal to the\r\ncurrent maximum in the array by one? We will look at the positions of\r\nthese maximums (let’s denote this set of positions as ); they need to be\r\ncovered by the minimum number of segments of length no more than . This\r\nis a standard problem that can be solved using a greedy algorithm: Take\r\nthe leftmost uncovered point , place a segment , Remove all points from\r\n, Repeat until is empty. Now we can solve the problem in , but that is\r\nslow. Let’s denote the sorted set of numbers in the array as . We will\r\nalso introduce . While we are decreasing the maximums from to , the set\r\ndoes not change, meaning the greedy process is the same and always\r\nselects the same number of segments. Thus, it is sufficient to run the\r\ngreedy process once. We obtain a solution in .Now let’s optimize this\r\nsolution. We only need to find the number of segments in the greedy\r\nprocess for the sets . Let’s simulate this process simultaneously from\r\nleft to right. Consider . Let . Then for all sets numbered from to , a\r\nsegment of length starts at this element. Let’s remember this and say\r\nthat these sets will return to consideration when we reach the\r\nprocessing of , because up to that point the elements are covered by the\r\nsegment. We will continue doing this. We take all sets with numbers less\r\nthan or equal to (where the current element of the array is equal to ),\r\nfor which the segments have already ended, update the answer, and say\r\nthat these sets will finish their segment after processed elements in\r\nthe scanline. These are some operations with sets that can be maintained\r\nin a segment tree, which essentially stores the indices of the sets\r\nincluded in the segment tree, meaning only the paths to the leaves\r\ncorresponding to the numbers of these sets are stored (somewhat similar\r\nto an implicit segment tree). The asymptotic complexity of the solution\r\nis . Similar operations can be maintained in a Cartesian tree, but that\r\nwould lead to a larger constant and , which should not pass the time\r\nlimits. For more details, you can read the author’s solution.There is\r\nalso a solution using link-cut trees, which is simpler to understand but\r\nrequires knowledge of this structure, so it was not intended as the\r\nauthor’s solution.\r\n",
    "name": "E. Clearing the Snowdrift",
    "statement": "Boy Vasya loves to travel very much. In particular, flying in airplanes\r\nbrings him extraordinary pleasure. He was about to fly to another city,\r\nbut the runway was heavily covered with snow and needed to be\r\ncleared.The runway can be represented as n consecutive sections numbered\r\nfrom 1 to n. The snowstorm was quite strong, but it has already stopped,\r\nso Vasya managed to calculate that the i-th section is covered with a_i\r\nmeters of snow. For such situations, the airport has a snowplow that\r\nworks in a rather unusual way. In one minute, the snowplow can do the\r\nfollowing: Choose a consecutive segment of length no more than d and\r\nremove one meter of snow from the most snow-covered sections.Formally,\r\none can choose 1\r\nle l\r\nle r\r\nle n (r - l + 1\r\nle d). After that, c =\r\nmax\r\n{ a_l, a_{l + 1},\r\nldots , a_r\r\n} is calculated, and if c > 0, then for all i\r\ncolon l\r\nle i\r\nle r such that a_i = c, the value of a_i is decreased by one. Vasya has\r\nbeen preparing for the flight for a long time and wants to understand\r\nhow much time he has left to wait until all sections are completely\r\ncleared of snow. In other words, it is required to calculate the minimum\r\nnumber of minutes that the snowplow will need to achieve a_i = 0 for all\r\ni from 1 to n.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dfs and similar",
        "dp",
        "greedy"
    ],
    "dificulty": "3100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Clearing the Snowdrift.json",
    "hint": []
}