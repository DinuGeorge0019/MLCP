{
    "link": "https://codeforces.com//contest/790/problem/B",
    "problemId": "98950",
    "problem_idx": "B",
    "shortId": "790B",
    "contest_number": "790",
    "problem_submissions": {
        "D": [
            25675131,
            25621791,
            25620770,
            25622633,
            25623312,
            25623816,
            25680670,
            25648868
        ],
        "E": [
            25623895,
            26123540,
            26123499,
            26123493,
            26123456,
            26123432,
            26123251,
            25617517
        ],
        "C": [
            25613244,
            25614979,
            25616936,
            25615762,
            25617856,
            25618954,
            25661266,
            25614888,
            25615074,
            25614005,
            25609588,
            25614426,
            25615773,
            25615586,
            25615794,
            25615992,
            25615935,
            25616033
        ],
        "B": [
            25609297,
            25610960,
            25614995,
            25612479,
            25611945,
            25614279,
            25608753,
            25610247,
            25611326,
            25609739,
            25611787,
            25609929,
            25612272,
            25613816,
            25610322,
            25610272,
            25611239,
            25970156,
            25970140,
            25970114,
            25970098,
            25969741,
            25969717,
            25967914,
            25967797,
            25967715,
            25967642,
            25967579,
            25967531,
            25967441,
            25967437,
            25967418,
            25967341,
            25628594,
            25611848
        ],
        "A": [
            25606141,
            25607710,
            25610915,
            25606934,
            25606698,
            25609653,
            25606498,
            25607278,
            25607609,
            25607400,
            25613182,
            25606914,
            25607776,
            25606578,
            25607601,
            25607434,
            25608027,
            25628141,
            25608400
        ]
    },
    "name": "B. Bear and Tree Jumps",
    "statement": "A tree is an undirected connected graph without cycles. The distance\r\nbetween two vertices is the number of edges in a simple path between\r\nthem.Limak is a little polar bear. He lives in a tree that consists of\r\nvertices, numbered through .Limak recently learned how to jump. He can\r\njump from a vertex to any vertex within distance at most .For a pair of\r\nvertices we define as the minimum number of jumps Limak needs to get\r\nfrom to . Your task is to find the sum of over all pairs of vertices\r\nsuch that .\r\n",
    "solutions": [
        "#ifdef DEBUG\n#define _GLIBCXX_DEBUG\n#endif\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nmt19937 mrand(random_device{} ()); \n\nint rnd(int x) {\n  return mrand() % x;\n}\n\ntypedef long double ld;\ntypedef long long ll;\n\n#ifdef DEBUG\n#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)\n#else\n#define eprintf(...) ;\n#endif\n\n#define pb push_back\n#define mp make_pair\n#define sz(x) ((int) (x).size())\n#define TASK \"text\"\n\nconst int inf = (int) 1.01e9;\nconst ld eps = 1e-9;\nconst ld pi = acos((ld) -1.0);\n\nconst int mod = (int) 1e9 + 7;\n\nvoid add(int &x, int y) {\n  if ((x += y) >= mod) {\n    x -= mod;\n  }\n}\n\nint mult(int x, int y) {\n  return (long long) x * y % mod;\n}\n\nint myPower(int x, int pw) {\n  int res = 1;\n  for (; pw; pw >>= 1) {\n    if (pw & 1) {\n      res = mult(res, x);\n    }\n    x = mult(x, x);\n  }\n  return res;\n}\n\nvoid precalc() {\n}\n\n\nconst int maxn = (int) 2e5 + 10;\nvector<vector<int> > es;\nint n, k;\n\nint read() {\n  if (scanf(\"%d%d\", &n, &k) < 2) {\n    return 0;\n  }\n  es = vector<vector<int> >(n);\n  for (int i = 0; i < n - 1; ++i) {\n    int s, t;\n    scanf(\"%d%d\", &s, &t);\n    --s, --t;\n    es[s].pb(t), es[t].pb(s);\n  }\n  return 1;\n}\n\nlong long res = 0;\n\nvector<int> dfs(int v, int p = -1) {\n  vector<int> ans(k, 0);\n  ans[0] = 1;\n  int sum = 1;\n\n  for (int u : es[v]) {\n    if (u == p) {\n      continue;\n    }\n    auto got = dfs(u, v);\n    rotate(got.begin(), got.begin() + k - 1, got.end());\n    int cnt = accumulate(got.begin(), got.end(), 0);\n    sum += cnt;\n\n    for (int i = 0; i < k; ++i) {\n      int r = i;\n      for (int j = 0; j < k; ++j) {\n        if (r) {\n          res += (long long) ans[i] * got[j] * (k - r);\n        }\n        if (++r == k) {\n          r = 0;\n        }\n      }\n    }\n\n    for (int i = 0; i < k; ++i) {\n      ans[i] += got[i];\n    }\n  }\n\n  res += (long long) sum * (n - sum);\n  return ans;\n}\n\nvoid solve() {\n  res = 0;\n  dfs(0);\n  assert(!(res % k));\n  res /= k;\n  printf(\"%lld\\n\", res);\n}\n\nint main() {\n  precalc();\n#ifdef LOCAL\n  freopen(TASK \".out\", \"w\", stdout);\n  assert(freopen(TASK \".in\", \"r\", stdin));\n#endif\n\n  while (1) {\n    if (!read()) {\n      break;\n    }\n    solve();\n#ifdef DEBUG\n    eprintf(\"Time %.2f\\n\", (double) clock() / CLOCKS_PER_SEC);\n#endif\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "divide and conquer",
        "dp",
        "trees"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Bear and Tree Jumps.json",
    "editorial_link": "https://codeforces.com//blog/entry/51068",
    "editorial": "It's a known problem to count the sum of distances for all pairs of vertices. For each edge, we should add to the answer the number of times this edge appears in a path between some two vertices. If sv denotes the size of the subtree of the vertex v (we can first root the tree in 1), we should add sv·(n?-?sv) to the sum.\n\nIn this problem, the answer is around , where S is the answer for the known problem described above. But for each path with length L, we should add  to the answer, where f(L,?k) says how much we must add to L to get a number divisible by k (f(10,?3)?=?2,?f(11,?3)?=?1,?f(12,?3)?=?0). We know the sum of  because it's  in total. What remains is to compute the sum of f(L,?k). To achieve that, for each remainder modulo k, we want to know the number of paths with length that has this remainder. For example, if k?=?3 and there are 200 paths with remainder 1, they all have f(L,?k)?=?2, so we should add 200·2 to the answer.\n\nLet's root the tree in any vertex and do bottom-up dp. For each subtree we compute the k values: for each remainder modulo k how many paths (starting from the root of this subtree) have this remainder. We can merge two subtrees in O(k2), so the total complexity is O(n·k2). See my code for details.",
    "hint": []
}