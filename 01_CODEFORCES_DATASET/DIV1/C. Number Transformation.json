{
    "link": "https://codeforces.com//contest/251/problem/C",
    "problemId": "2347",
    "problem_idx": "C",
    "shortId": "251C",
    "contest_number": "251",
    "problem_submissions": {
        "C": [
            2708116,
            2703586,
            2704109,
            2703232,
            2706506,
            2702257,
            2703703,
            2703280,
            2704115,
            2703686,
            2705486,
            2704984,
            2704534,
            2705165,
            2704884,
            2705233
        ],
        "D": [
            2706516,
            2706940,
            2707149,
            2704789,
            2714168,
            2709244,
            2963073
        ],
        "B": [
            2702885,
            2710707,
            2702748,
            2702944,
            2703852,
            2706610,
            2702523,
            2702863,
            2704268,
            2703034,
            2702681,
            2702420,
            2702396,
            2702786,
            2702560
        ],
        "A": [
            2700911,
            2700969,
            2701184,
            2701021,
            2701182,
            2704236,
            2701557,
            2700957,
            2701183,
            2703855,
            2701084,
            2701446,
            2701163,
            2701237,
            2701243,
            2701186
        ]
    },
    "name": "C. Number Transformation",
    "statement": "Little Petya likes positive integers a lot. Recently his mom has\r\npresented him a positive integer . There\u2019s only one thing Petya likes\r\nmore than numbers: playing with little Masha. It turned out that Masha\r\nalready has a positive integer . Petya decided to turn his number into\r\nthe number consecutively performing the operations of the following two\r\ntypes: Subtract 1 from his number. Choose any integer from to ,\r\ninclusive. Then subtract number from his number . Operation means taking\r\nthe remainder from division of number by number . Petya performs one\r\noperation per second. Each time he chooses an operation to perform\r\nduring the current move, no matter what kind of operations he has\r\nperformed by that moment. In particular, this implies that he can\r\nperform the same operation any number of times in a row.Now he wonders\r\nin what minimum number of seconds he could transform his number into\r\nnumber . Please note that numbers in the operations of the second type\r\nare selected anew each time, independently of each other.\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <stdio.h>\n#include <set>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <memory.h>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nconst int m = 360360;\n\nint k;\nint f[m+10];\n\nint go(int from, int to) {\n  int i, j;\n  for (i=0;i<m;i++) f[i] = 42424242;\n  f[from] = 0;\n  for (i=m-1;i>=1;i--)\n    if (f[i] < 42424242) {\n      if (f[i]+1 < f[i-1]) f[i-1] = f[i]+1;\n      for (j=2;j<=k;j++) {\n        int z = i-(i % j);\n        if (f[i]+1 < f[z]) f[z] = f[i]+1;\n      }\n    }\n  return f[to];\n}\n\nint main() {\n//  freopen(\"in\", \"r\", stdin);\n//  freopen(\"out\", \"w\", stdout);\n  long long a, b;\n  cin >> a >> b >> k;\n  long long ans = 0;\n  if (a/m == b/m) {\n    ans = go(a % m, b % m);\n  } else {\n    ans = go(a % m, 0);\n    ans += 1+go(m-1, b % m);\n    ans += (long long)(1+go(m-1, 0))*(a/m - b/m - 1);\n  }\n  cout << ans << endl;\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "number theory"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Number Transformation.json",
    "editorial_link": "https://codeforces.com//blog/entry/6054",
    "editorial": "Let be the least common multiple of all numbers from 2 to , inclusive.\r\nNote that if is divisible by , then we can\u00e2\u0080\u0099t decrease it with applying\r\nan operation of the second type. It means that any optimal sequence of\r\ntransformations will contain all numbers divisible by which are located\r\nbetween and . Let\u00e2\u0080\u0099s split our interval from to into several intervals\r\nbetween the numbers divisible by . It may happen that the first and the\r\nlast intervals will have length less than . Now we can solve the problem\r\nfor the first interval, the last interval and for any interval between\r\nthem. After that we need to multiply the last result by the total number\r\nof intervals excluding the first and the last ones. The only thing left\r\nis to add up obtained 3 values. In order to solve the problem for one\r\ninterval one can simply use bfs. Be careful in the cases when we have\r\nonly 1 or 2 intervals. The complexity of described solution is .\r\n"
}