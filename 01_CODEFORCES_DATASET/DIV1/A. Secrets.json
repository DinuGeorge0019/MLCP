{
    "link": "https://codeforces.com//contest/333/problem/A",
    "problemId": "3369",
    "problem_idx": "A",
    "shortId": "333A",
    "contest_number": "333",
    "problem_submissions": {
        "C": [
            4188846,
            4188839,
            4181075,
            4185234,
            4185523,
            4181601,
            4984551
        ],
        "E": [
            4188775,
            4188772,
            4188763,
            4188761,
            4188751,
            4184852,
            4183356,
            4182849,
            4183109,
            4181299,
            4179516,
            4184372,
            4183323,
            4184498,
            4184601,
            4184967,
            4188899,
            4183262,
            4185857,
            4189453,
            4189430,
            4189422,
            4189074,
            4186245,
            4185068,
            4181537
        ],
        "D": [
            4177757,
            4180517,
            4180333,
            4180428,
            4180206,
            4183380,
            4180154,
            4179998,
            4182482,
            4188785,
            4180480,
            4189492,
            4189489,
            4189487,
            4182551,
            4183041,
            4185442,
            4183297,
            4181604,
            4185194,
            4187366,
            4187266
        ],
        "B": [
            4175966,
            4176598,
            4177213,
            4176845,
            4177457,
            4177188,
            4200825,
            4200823,
            4177391,
            4183089,
            4178821,
            4177992,
            4179001,
            4180178,
            4179860,
            4176566,
            4178918,
            4176886,
            4177236
        ],
        "A": [
            4174903,
            4175083,
            4175574,
            4175820,
            4175080,
            4175668,
            4176548,
            4175429,
            4175639,
            4175919,
            4177018,
            4175803,
            4175480,
            4175531,
            4175684,
            4175917
        ]
    },
    "name": "A. Secrets",
    "statement": "Gerald has been selling state secrets at leisure. All the secrets cost\r\nthe same: marks. The state which secrets Gerald is selling, has no paper\r\nmoney, only coins. But there are coins of all positive integer\r\ndenominations that are powers of three: 1 mark, 3 marks, 9 marks, 27\r\nmarks and so on. There are no coins of other denominations. Of course,\r\nGerald likes it when he gets money without the change. And all buyers\r\nrespect him and try to give the desired sum without change, if possible.\r\nBut this does not always happen.One day an unlucky buyer came. He did\r\nnot have the desired sum without change. Then he took out all his coins\r\nand tried to give Gerald a larger than necessary sum with as few coins\r\nas possible. What is the maximum number of coins he could get? we\r\nconsider all the possible combinations of coins for which the buyer can\r\nnot give Gerald the sum of marks without change. For each such\r\ncombination calculate the minimum number of coins that can bring the\r\nbuyer at least marks. Among all combinations choose the maximum of the\r\nminimum number of coins. This is the number we want.\r\n",
    "solutions": [
        "#define _CRT_SECURE_NO_DEPRECATE\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <vector>\n#include <queue>\n#include <iostream>\n#include <iterator>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <sstream>\n#include <fstream>\n#include <ctime>\n#include <cstring>\n#include <functional>\n#include <bitset>\n#pragma comment(linker, \"/STACK:66777216\")\nusing namespace std;\n#define pb push_back\n#define ppb pop_back\n#define pi 3.1415926535897932384626433832795028841971\n#define mp make_pair\n#define x first\n#define y second\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define INF 1000000000\n#define FOR(i,a,b) for (int _n(b), i(a); i <= _n; i++)\n#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--)\n#define all(c) (c).begin(), (c).end()\n#define SORT(c) sort(all(c))\n#define rep(i,n) FOR(i,1,(n))\n#define rept(i,n) FOR(i,0,(n)-1)\n#define L(s) (int)((s).size())\n#define C(a) memset((a),0,sizeof(a))\n#define VI vector <int>\n#define ll long long\n\nint a,b,c,d,n,m,k;\nint main() {\n\t//freopen(\"input.txt\",\"r\",stdin);\n\t//freopen(\"output.txt\",\"w\",stdout);\n\tll n;\n\tcin >> n;\n\twhile (n % 3 == 0) n /= 3;\n\tcout << (n / 3) + 1 << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Secrets.json",
    "editorial_link": "https://codeforces.com//blog/entry/8418",
    "editorial": "Actually we are looking for longest sequence of natural number , so that\r\nevery number in it sequence is the power of three, sum of all numbers is\r\nmore then and if we remove any number sum will be less then . To be\r\nprecise we are looking for length of this sequence. Consider minimal\r\nnumber in the sequence. All this numbers are divides to since them all\r\nare powers of 3. And then, sum of all this number is divides to too.\r\nSuppose that is divide to too. Then, since , then . And then if we\r\nremove from sequence, sum of other number not less then contradist with\r\nsecond condition. Well, we now that is not divide to none element in\r\nsequence. Now lets find minimal so that , and answer is .\r\n"
}