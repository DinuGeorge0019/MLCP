{"link": "https://codeforces.com//contest/512/problem/B", "problemId": "21643", "problem_idx": "B", "shortId": "512B", "contest_number": "512", "problem_submissions": {"E": [9689055, 9689637, 9689329, 9688006, 9687653, 9689489, 9689150, 9686860, 9690989, 9687876], "D": [9687125, 9687387, 9685060, 9686450, 9688310, 9687526, 9848172, 9687098, 9689725], "C": [9684294, 9683675, 9686457, 9682885, 9681860, 9683241, 9686129, 9685822, 9688905, 9683891, 9686124, 9685967, 9682813, 9687765, 9684696, 9686605, 9690364, 9690022], "B": [9681311, 9680720, 9682911, 9680295, 9679957, 9680851, 9679895, 9681573, 9681772, 9685086, 9682711, 9681029, 9681643, 9680950, 9691594, 9680058], "A": [9679078, 9679241, 9683617, 9678600, 9678498, 9679465, 9682231, 9681794, 9679166, 9679612, 9683011, 9689408, 9679816, 9678578, 9678585, 9679972, 9678357]}, "name": "B. Fox And Jumping", "statement": "Fox Ciel is playing a game. In this game there is an infinite long tape\r\nwith cells indexed by integers (positive, negative and zero). At the\r\nbeginning she is standing at the cell 0.There are also cards, each card\r\nhas 2 attributes: length and cost . If she pays dollars then she can\r\napply -th card. After applying -th card she becomes able to make jumps\r\nof length , i. e. from cell to cell or cell .She wants to be able to\r\njump to any cell on the tape (possibly, visiting some intermediate\r\ncells). For achieving this goal, she wants to buy some cards, paying as\r\nlittle money as possible. If this is possible, calculate the minimal\r\ncost.\r\n", "solutions": ["#include <iostream>\n#include <vector>\n#include <cmath>\n#include <ctime>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <fstream>\n#include <cstdlib>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <numeric>\n\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#define forn(i, n) for (int i = 0; i < (int)(n); ++i)\n#define for1(i, n) for (int i = 1; i <= (int)(n); ++i)\n#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)\n#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)\n\nusing namespace std;\n\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef long long i64;\ntypedef vector<i64> vi64;\ntypedef vector<vi64> vvi64;\n\ntemplate<class T>\nbool uin(T &a, T b) {\n    if (a > b) {\n        a = b;\n        return true;\n    }\n    return false;\n}\n\ntemplate<class T>\nbool uax(T &a, T b) {\n    if (a < b) {\n        a = b;\n        return true;\n    }\n    return false;\n}\n\nmap<int, int> dp[301];\n\nint gcd(int a, int b) {\n    return b ? gcd(b, a % b) : a;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.precision(10);\n    cout << fixed;\n#ifdef LOCAL_DEFINE\n    freopen(\"input.txt\", \"rt\", stdin);\n#endif\n\n    int N;\n    cin >> N;\n    vi a(N), c(N);\n    forn(i, N) cin >> a[i];\n    forn(i, N) cin >> c[i];\n    dp[0][0] = 0;\n    forn(i, N) {\n//        cerr << dp[i].size() << '\\n';\n        for (pii p: dp[i]) {\n            int g = p.fi, w = p.se;\n            if (!dp[i + 1].count(g) || dp[i + 1][g] > w) dp[i + 1][g] = w;\n            int gg = gcd(g, a[i]);\n            if (!dp[i + 1].count(gg) || dp[i + 1][gg] > w + c[i]) dp[i + 1][gg] = w + c[i];\n        }\n    }\n    if (dp[N].count(1)) cout << dp[N][1] << '\\n';\n    else cout << -1 << '\\n';\n\n#ifdef LOCAL_DEFINE\n    cerr << \"Time elapsed: \" << 1.0 * clock() / CLOCKS_PER_SEC << \" s.\\n\";\n#endif\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "dp", "math", "number theory", "shortest paths"], "dificulty": "1900", "interactive": false}