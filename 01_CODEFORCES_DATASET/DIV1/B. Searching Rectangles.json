{
    "link": "https://codeforces.com//contest/713/problem/B",
    "problemId": "71346",
    "problem_idx": "B",
    "shortId": "713B",
    "contest_number": "713",
    "problem_submissions": {
        "C": [
            26460974,
            20575910,
            20583094,
            20581559,
            20581733,
            20583408,
            20579455,
            20582507,
            20580790,
            20585663,
            37183524,
            20586646,
            20578141,
            20587141,
            20583393,
            20576023,
            20577632,
            20581746,
            20588485,
            80008205,
            79474335,
            20583081,
            20586247,
            20589607
        ],
        "D": [
            20589016,
            20588044,
            20589791,
            20590045,
            20590281,
            20591597,
            20591896,
            20601734,
            20601720,
            20594132,
            20593560,
            20593079,
            20596440,
            20593442,
            20596199,
            20584415,
            20594603,
            20595698,
            20593723,
            20595881,
            24960690,
            20593574
        ],
        "B": [
            20583151,
            20580004,
            20578178,
            20578836,
            20578366,
            20585770,
            20579555,
            20576646,
            20583230,
            20581847,
            20589836,
            20583553,
            20579782,
            20588723,
            20589144,
            20578568,
            20589488,
            20583796,
            20583317
        ],
        "A": [
            20572754,
            20572042,
            20571909,
            20572204,
            20571875,
            20571504,
            20584123,
            20571416,
            20574058,
            20587954,
            20571916,
            20573302,
            20574693,
            20573904,
            20589571,
            20575437,
            20571888,
            20573337,
            20572118,
            20572133
        ],
        "E": [
            20940861,
            20595260
        ]
    },
    "name": "B. Searching Rectangles",
    "statement": "Filya just learned new geometry object rectangle. He is given a field\r\nconsisting of unit cells. Rows are numbered from bottom to top with\r\ninteger from to . Columns are numbered from left to right with integers\r\nfrom to . Cell, located at the intersection of the row and column is\r\ndenoted as . Filya has painted two rectangles, such that their sides are\r\nparallel to coordinate axes and each cell lies fully inside or fully\r\noutside each of them. Moreover, no cell lies in both rectangles.Later,\r\nhedgehog Filya became interested in the location of his rectangles but\r\nwas unable to find the sheet of paper they were painted on. They were\r\ntaken by Sonya and now she wants to play a little game with Filya. He\r\ntells her a query rectangle and she replies with the number of initial\r\nrectangles that lie the given query rectangle. The query rectangle\r\nshould match the same conditions as initial rectangles. Rectangle lies\r\nfully inside the query if each o its cells lies inside the query.Filya\r\nknows Sonya really well, so is sure that if he asks more than questions\r\nshe will stop to reply.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint N, a1, b1, a2, b2, c1, d1, c2, d2;\n\nint A1, B1, A2, B2, C1, D1, C2, D2, Steps = 0;\nbool do_deb = 0;\n\nint qry (int a1, int b1, int a2, int b2)\n{\n    printf (\"? %d %d %d %d\\n\", a1, b1, a2, b2), Steps ++;\n    fflush (stdout);\n    int ans;\n    if (!do_deb)\n    {\n        scanf (\"%d\", &ans);\n        fflush (stdout);\n        return ans;\n    }\n    else\n    {\n        ans = 0;\n        if (a1 <= A1 && A2 <= a2 && b1 <= B1 && B2 <= b2) ans ++;\n        if (a1 <= C1 && C2 <= a2 && b1 <= D1 && D2 <= b2) ans ++;\n        return ans;\n    }\n}\n\nvoid get_bounding_box (int a1, int b1, int a2, int b2, int &X, int &Y, int &X2, int &Y2, int val)\n{\n    X = a1, Y = b1, X2 = a2, Y2 = b2;\n    int p, u, mij;\n    //if (bit1)\n    //{\n        p = a1, u = a2;\n        while (p <= u)\n        {\n            mij = (p + u) >> 1;\n            if (qry (a1, b1, mij, b2) == val) X2 = mij, u = mij - 1;\n            else p = mij + 1;\n        }\n    //}\n    //if (bit2)\n   // {\n        p = a1, u = a2;\n        while (p <= u)\n        {\n            mij = (p + u) >> 1;\n            if (qry (mij, b1, a2, b2) == val) X = mij, p = mij + 1;\n            else u = mij - 1;\n        }\n    //}\n    //if (bit3)\n    //{\n        p = b1, u = b2;\n        while (p <= u)\n        {\n            mij = (p + u) >> 1;\n            if (qry (a1, b1, a2, mij) == val) Y2 = mij, u = mij - 1;\n            else p = mij + 1;\n        }\n    //}\n    //if (bit4)\n   // {\n        p = b1, u = b2;\n        while (p <= u)\n        {\n            mij = (p + u) >> 1;\n            if (qry (a1, mij, a2, b2) == val) Y = mij, p = mij + 1;\n            else u = mij - 1;\n        }\n    //}\n}\n\nvoid Deb ()\n{\n    scanf (\"%d %d %d %d\", &A1, &B1, &A2, &B2);\n    scanf (\"%d %d %d %d\", &C1, &D1, &C2, &D2), do_deb = 1;\n}\n\nint main ()\n{\n//freopen (\"input\", \"r\", stdin);\n//freopen (\"output\", \"w\", stdout);\n\nscanf (\"%d\", &N);\n//Deb ();\nfflush (stdout);\nint p = 1, u = N, mij, ras;\nwhile (p <= u)\n{\n    mij = (p + u) >> 1;\n    if (qry (1, 1, mij, N) >= 1) ras = mij, u = mij - 1;\n    else p = mij + 1;\n}\nif (ras < N && qry (ras + 1, 1, N, N) == 1)\n{\n    get_bounding_box (1, 1, ras, N, a1, b1, a2, b2, 1);\n    get_bounding_box (ras + 1, 1, N, N, c1, d1, c2, d2, 1);\n}\nelse\n{\n    p = 1, u = N;\n    while (p <= u)\n    {\n        mij = (p + u) >> 1;\n        if (qry (1, 1, N, mij) >= 1) ras = mij, u = mij - 1;\n        else p = mij + 1;\n    }\n    get_bounding_box (1, 1, N, ras, a1, b1, a2, b2, 1);\n    get_bounding_box (1, ras + 1, N, N, c1, d1, c2, d2, 1);\n}\nprintf (\"! %d %d %d %d %d %d %d %d\\n\", a1, b1, a2, b2, c1, d1, c2, d2);\nif (do_deb) printf (\"! %d %d %d %d %d %d %d %d     %d\\n\", A1, B1, A2, B2, C1, D1, C2, D2, Steps);\nreturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "interactive"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Searching Rectangles.json",
    "editorial_link": "https://codeforces.com//blog/entry/47094",
    "editorial": "Assume we have just one rectangle. First we can find its right side. In\r\nbinary search we check is out rectangle to the left of some line using\r\nfunction (,,,). As soon as we found right coordinate we can \u00e2\u0080\u0099cut\u00e2\u0080\u0099\r\neverything to the right of the line, because there is nothing to look.\r\nIn the same way we will find all sides. ():Main idea is to find a line\r\nwhich will split space in the way that rectangles will lie in different\r\nparts, as rectangles are not intersected it is always possible. We can\r\nassume that intersected line is parallel to y coordinate and use binary\r\nsearch by . On each step of search we will count amount of rectangles on\r\neach side. If we have pair (, ) then line is found. If we have pair (, )\r\nthen intersected line is parallel to coordinate. Otherwise we should\r\nsearch in the half where we have some rectangles. In worst case we will\r\nhave searches each will take () time, also we have () time to find\r\nseparated rectangle. In total we () + ()().():We can find first\r\nrectangle assuming that here is just one rectangle. In each of four of\r\nour search we will assume that rectangle is present if get will return\r\nor .When we have one rectangle we can search second assuming that we can\r\nmodify get function to , which will assume coordinates of first\r\nrectangle and decrease original value if it is required.\r\n"
}