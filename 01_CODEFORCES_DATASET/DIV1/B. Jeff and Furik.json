{
    "link": "https://codeforces.com//contest/351/problem/B",
    "problemId": "3593",
    "problem_idx": "B",
    "shortId": "351B",
    "contest_number": "351",
    "problem_submissions": {
        "D": [
            4670145,
            4670249,
            4674550,
            4670754,
            4674929,
            4684601,
            4669199,
            4669889,
            4672385,
            4680204
        ],
        "C": [
            4665748,
            4664661,
            4663479,
            4665815,
            4667455,
            4687038,
            4686935,
            4686917,
            4668439,
            4666789,
            4670720,
            4671735,
            4670649,
            4671154,
            4668837,
            4669283
        ],
        "B": [
            4661574,
            4660489,
            4662188,
            4663391,
            4665392,
            4662692,
            4661437,
            4662916,
            4663186,
            4668058,
            4662366,
            4666797,
            4662458,
            4659236,
            4659832,
            4665176,
            4659225
        ],
        "A": [
            4661298,
            4659082,
            4658665,
            4661628,
            4664159,
            4659520,
            4666420,
            4665346,
            4659838,
            4662463,
            4658356,
            4660908,
            4660765
        ],
        "E": [
            4658359,
            4666363,
            4665274,
            4666984,
            4664316,
            4666715,
            4668432,
            4666380,
            4665428,
            4663383,
            4671601,
            4671635,
            4660529,
            4661696,
            4664447,
            4673681,
            4671913,
            4664654
        ]
    },
    "name": "B. Jeff and Furik",
    "statement": "Jeff has become friends with Furik. Now these two are going to play one\r\nquite amusing game.At the beginning of the game Jeff takes a piece of\r\npaper and writes down a permutation consisting of numbers: , , , . Then\r\nthe guys take turns to make moves, Jeff moves first. During his move,\r\nJeff chooses two adjacent permutation elements and then the boy swaps\r\nthem. During his move, Furic tosses a coin and if the coin shows \"heads\"\r\nhe chooses a random pair of adjacent elements with indexes and , for\r\nwhich an inequality holds, and swaps them. But if the coin shows\r\n\"tails\", Furik chooses a random pair of adjacent elements with indexes\r\nand , for which the inequality holds, and swaps them. If the coin shows\r\n\"heads\" or \"tails\" and Furik has multiple ways of adjacent pairs to\r\ntake, then he uniformly takes one of the pairs. If Furik doesn\u2019t have\r\nany pair to take, he tosses a coin one more time. The game ends when the\r\npermutation is sorted in the increasing order.Jeff wants the game to\r\nfinish as quickly as possible (that is, he wants both players to make as\r\nfew moves as possible). Help Jeff find the minimum mathematical\r\nexpectation of the number of moves in the game if he moves optimally\r\nwell.You can consider that the coin shows the heads (or tails) with the\r\nprobability of percent.\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <bitset>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\nint p[3010];\n\nint main(void){\n    int N,i,j;\n    \n    cin >> N;\n    REP(i,N) cin >> p[i];\n    \n    int cnt = 0;\n    REP(i,N) for(j=i+1;j<N;j++) if(p[i] > p[j]) cnt++;\n    \n    int ans = cnt * 2;\n    if(cnt % 2 == 1) ans--;\n    cout << ans << endl;\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "probabilities"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Jeff and Furik.json",
    "editorial_link": "https://codeforces.com//blog/entry/9070",
    "editorial": "ote that after each step, the number of inversions in the permutation is\r\nchanged by 1. Let us turn to the inversions of the permutation let them\r\nbe pcs. It is clear that when we have one inversion, then the answer .\r\nNow we will see how to use it further:1. it is clear that after a Jeff\u00e2\u0080\u0099s\r\nstep inversions will become lower by 2. it is clear that after a Furik\u00e2\u0080\u0099s\r\nstep inversions will be on lowerwith porbability of , and on greater\r\nwith probability of .3. we have the formula for an answer 4. after\r\ntransformation we have .\r\n"
}