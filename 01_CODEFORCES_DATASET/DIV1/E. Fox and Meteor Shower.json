{"link": "https://codeforces.com//contest/388/problem/E", "problemId": "6409", "problem_idx": "E", "shortId": "388E", "contest_number": "388", "problem_submissions": {"D": [5881221, 5882916, 5884765, 5884166, 5884772, 5886438, 5886379, 5879628, 5881889, 5883814, 9006539], "A": [5878499, 5875213, 5874956, 5875207, 5875079, 5874857, 5875135, 5882241, 5886169, 5874693, 5875783, 5874826, 5874879, 5875011], "C": [5878094, 5879257, 5880482, 5882050, 5881780, 5878419, 5880247, 5886441, 5883025, 5884549, 5885115, 5881042, 5884063, 5878671], "B": [5877357, 5878081, 5878393, 5877933, 5879631, 5877363, 5877984, 5881618, 5885395, 5877991, 5880604, 5879253, 5880664, 5877570], "E": [5952727, 5888469]}, "name": "E. Fox and Meteor Shower", "statement": "There is a meteor shower on the sky and there are meteors. The sky can\r\nbe viewed as a 2D Euclid Plane and the meteor is point on this plane.\r\nFox Ciel looks at the sky. She finds out that the orbit of each meteor\r\nis a straight line, and each meteor has a constant velocity. Now Ciel\r\nwants to know: what is the maximum number of such that any pair met at\r\nthe same position at a certain time? Note that the time is not limited\r\nand can be also negative. The meteors will never collide when they\r\nappear at the same position at the same time.\r\n", "solutions": ["#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <string>\n#include <set>\n#include <map>\n#include <cassert>\n#include <ctime>\n\n\nusing namespace std;\n\n#ifdef WIN32\n    #define LLD \"%I64d\"\n#else\n    #define LLD \"%lld\"\n#endif\n\ntypedef pair<int, int> pii;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<ll> vll;\ntypedef vector<vll> vvll;\n\nll rdtsc() {\n    ll tmp;\n    asm(\"rdtsc\" : \"=A\"(tmp));\n    return tmp;\n}\n\ninline int myrand() {\n\treturn abs((rand() << 15) ^ rand());\n}\n\ninline int rnd(int x) {\n\treturn myrand() % x;\n}\n\n#define TASKNAME \"text\"\n#define pb push_back\n#define mp make_pair\n#define EPS (1e-9)\n#define INF ((int)1e9)\n#define sqr(x) ((x) * (x))         \n#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#define sz(x) ((int)(x).size())\n\nlong long gcd(long long a, long long b) {\n\tfor (; b != 0; a %= b, swap(a, b)) ;\n\treturn a;\n}\n\nstruct Ratio {\n\tlong long a, b;\n\n\tRatio() {}\n\tRatio(long long _x) : a(_x), b(1) {update();}\n\tRatio(long long _a, long long _b) : a(_a), b(_b) {update();}\n\n\tvoid update() {\n\t\tlong long d = gcd(a, b);\n\t\ta /= d, b /= d;\n\t\tif (b < 0)\n\t\t\tb = -b, a = -a;\n\t}\n\n\tinline Ratio operator * (const Ratio &r) const {\n\t\tlong long d1 = gcd(a, r.b), d2 = gcd(b, r.a);\n\t\treturn Ratio((a / d1) * (r.a / d2), (b / d2) * (r.b / d1));\n\t}\n\n\tinline Ratio operator / (const Ratio &r) const {\n\t\tlong long d1 = gcd(a, r.a), d2 = gcd(b, r.b);\n\t\treturn Ratio((a / d1) * (r.b / d2), (b / d2) * (r.a / d1));\n\t}\n\n\tinline Ratio operator + (const Ratio &r) const {\n\t\tlong long d = gcd(b, r.b); \n\t\treturn Ratio(a * (r.b / d) + (b / d) * r.a, (b / d) * r.b);\n\t}\n\t\n\tinline Ratio operator - (const Ratio &r) const {\n\t\tlong long d = gcd(b, r.b); \n\t\treturn Ratio(a * (r.b / d) - (b / d) * r.a, (b / d) * r.b);\n\t}\n\n\tinline bool operator == (const Ratio &r) const {\n\t\treturn a == r.a && b == r.b;\n\t}\n\n\tinline bool operator != (const Ratio &r) const {\n\t\treturn a != r.a || b != r.b;\n\t}\n\t\n\tinline bool operator < (const Ratio &r) const {\n\t\tif (a != r.a)\n\t\t\treturn a < r.a;\n\t\treturn b < r.b;\n\t}\n\n\tinline double toDouble() const {\n\t\treturn (double)a / b;\n\t}\n};\n\nstruct Point {\n\tRatio x, y, z;\n\n\tPoint() {}\n\tPoint(Ratio _x, Ratio _y, Ratio _z) : x(_x), y(_y), z(_z) {}\n\n\tPoint operator * (const Ratio &r) const {\n\t\treturn Point(x * r, y * r, z * r);\n\t}\n\n\tPoint operator ^ (const Point &p) const {\n\t\treturn Point(y * p.z - z * p.y,\n\t\t\t\t\t z * p.x - x * p.z,\n\t\t\t\t\t x * p.y - y * p.x);\n\t}\n\tinline bool operator == (const Point &p) const {\n\t\treturn x == p.x && y == p.y && z == p.z;\n\t}\n\n\tinline bool operator < (const Point &p) const {\n\t\tif (x != p.x)\n\t\t\treturn x < p.x;\n\t\tif (y != p.y)\n\t\t\treturn y < p.y;\n\t\tif (z != p.z)\n\t\t\treturn z < p.z;\n\t\treturn false;\n\t}\n};\n\nstruct Line {\n\tRatio x, y;\n\tRatio dx, dy;\n\n\tint read() {\n\t\tint x1, x2, y1, y2, t1, t2;\n\t\tif (scanf(\"%d%d%d%d%d%d\", &t1, &x1, &y1, &t2, &x2, &y2) < 6)\n\t\t\treturn 0;\n    \tdx = Ratio(x2 - x1, t2 - t1);\n    \tdy = Ratio(y2 - y1, t2 - t1);\n    \tx = Ratio(x1, 1) - Ratio(t1, 1) * dx;\n    \ty = Ratio(y1, 1) - Ratio(t1, 1) * dy;\n    \treturn 1;\n    }\n\n    inline void println() const {\n    \teprintf(\"(%.3lf %.3lf)    d = (%.3lf %.3lf)\\n\", x.toDouble(), y.toDouble(), dx.toDouble(), dy.toDouble());\n    }\n};\n\nbool intersect(const Line &l1, const Line &l2, Point &res) {\n\tif (l1.dx == l2.dx && l1.dy == l2.dy) {\n\t\tassert(l1.x != l2.x || l1.y != l2.y);\n\t\treturn false;\n\t}\n\n\tRatio z;\n\tif (l2.dx != l1.dx) {\n\t\tz = (l1.x - l2.x) / (l2.dx - l1.dx);\n\t\tif (l2.dy != l1.dy) {\n\t\t\tRatio z1 = (l1.y - l2.y) / (l2.dy - l1.dy);\n\t\t\tif (z != z1)\n\t\t\t\treturn false;\n\t\t} else if (l1.y != l2.y)\n\t\t\treturn false;\n\t\t\t\n\t} else {\n\t\tif (l1.x != l2.x)\n\t\t\treturn false;\n\t\tz = (l1.y - l2.y) / (l2.dy - l1.dy);\n\t}\t\n\tres = Point(l1.dx * z + l1.x, l1.dy * z + l1.y, z);\n\treturn true;\n}\n\nconst int maxn = 1000;\nLine ls[maxn];\n\nconst int maxi = maxn * (maxn - 1) / 2;\nPoint inters[maxi];\n\n\nPoint current[maxn];\npair<Point, int> pairs[maxn];\n\nbool solve() {\n\tint n;\n\tif (scanf(\"%d\", &n) < 1)\n\t\treturn 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tassert(ls[i].read());\n\t\t//ls[i].println();\n\t}\n\n\tfor (int i = 0; i < n; ++i)\n\t\tfor (int j = i + 1; j < n; ++j)\n\t\t\tif (ls[i].dx == ls[j].dx && ls[i].dy == ls[j].dy && ls[i].x == ls[j].x && ls[i].y == ls[j].y) {\n\t\t\t\tassert(0);\n\t\t\t}\n\t\t\t\n\tint cnti = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tfor (int j = i + 1; j < n; ++j) {\n\t\t\tPoint cur;\n\t\t\t//eprintf(\"i = %d, j = %d\\n\", i, j);\n\t\t\tif (intersect(ls[i], ls[j], cur)) {\n\t\t\t\tassert(cnti < maxi);\n\t\t\t\tinters[cnti++] = cur;\n\t\t\t\t//eprintf(\"intersect %d %d\\n\", i, j);\n\t\t\t\t//eprintf(\"%.3lf %.3lf %.3lf\\n\", cur.x.toDouble(), cur.y.toDouble(), cur.z.toDouble());\n\t\t\t}\n        }\n\t}\n\n\tsort(inters, inters + cnti);\n\n\tint maxs = 0;\n\tfor (int i = 0; i < cnti;) {\n\t\tint i0 = i;\n\t\twhile (i < cnti && inters[i] == inters[i0])\n\t\t\t++i;\n\t\tmaxs = max(maxs, i - i0);\n\t}\n\tmaxs *= 2;\n\tint ans = 0;\n\n\twhile (ans * (ans - 1) < maxs)\n\t\t++ans;\n\tassert(ans * (ans - 1) == maxs);\n\t//eprintf(\"in one %d\\n\", ans);\n\tans = max(ans, 1);\n\n\tfor (int i = 0; i < n; ++i) {\n\t\tint cnt = 0;\n\t\tfor (int j = i + 1; j < n; ++j) {\n\t\t\tPoint cur;\n\t\t\tif (!intersect(ls[i], ls[j], cur))\n\t\t\t\tcontinue;\n        \tPoint dir = Point(ls[i].dx, ls[i].dy, 1) ^ Point(ls[j].dx, ls[j].dy, 1);\n        \tlong long d = gcd(gcd(dir.x.a, dir.y.a), dir.z.a);\n        \tdir = dir * (Ratio(1) / d);\n        \tdir = dir * dir.x.b;\n        \tdir = dir * dir.y.b;\n\t\t\tdir = dir * dir.z.b;\n\t\t\tif (dir.x * 1013 + dir.y * 8952 + dir.z * 12347 < 0)\n\t\t\t\tdir = dir * -1;\n\t\t\t//eprintf(\"dir[%d, %d] = %.3lf %.3lf %.3lf\\n\", i, j, dir.x.toDouble(), dir.y.toDouble(), dir.z.toDouble());\n        \tassert(dir.x.b == 1 && dir.y.b == 1 && dir.z.b == 1);\n        \tpairs[cnt++] = mp(dir, j);\n        }\n\n        sort(pairs, pairs + cnt);\n\n        for (int j = 0; j < cnt;) {\n        \tint j0 = j;\n        \twhile (j < cnt && pairs[j].first == pairs[j0].first)\n        \t\t++j;\n        \tfor (int k = j0; k < j; ++k) {\n        \t\tLine &l = ls[pairs[k].second];\n        \t\tcurrent[k - j0] = Point(l.dx, l.dy, 1);\n        \t}\n\n        \tsort(current, current + j - j0);\n        \tint cnt = unique(current, current + j - j0) - current;\n        \tans = max(ans, cnt + 1);\n        }\n\t}\n\n\tprintf(\"%d\\n\", ans);\n\treturn 1;\n}\n\nint main() {\n\tsrand(rdtsc());\n#ifdef DEBUG\n\tfreopen(TASKNAME\".in\", \"r\", stdin);\n\tfreopen(TASKNAME\".out\", \"w\", stdout);\n#endif\n\t\n\twhile (1) {\n\t\tif (!solve())\n\t\t\tbreak;\n\t\t#ifdef DEBUG\n\t\t\teprintf(\"%.18lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n\t\t#endif\n\t}\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["geometry"], "dificulty": "3100", "interactive": false}