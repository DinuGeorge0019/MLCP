{"link": "https://codeforces.com//contest/1599/problem/H", "problemId": "1136887", "problem_idx": "H", "shortId": "1599H", "contest_number": "1599", "problem_submissions": {"J": [131341071], "I": [131324833], "F": [131321008], "H": [131309947], "C": [131304492], "A": [131303141], "B": [], "D": [], "E": [], "G": []}, "name": "H. Hidden Fortress", "statement": "As part of your contribution in the Great Bubble War, you have been\r\ntasked with finding the newly built enemy fortress. The world you live\r\nin is a giant 10^9\r\ntimes 10^9 grid, with squares having both coordinates between 1 and\r\n10^9. You know that the enemy base has the shape of a rectangle, with\r\nthe sides parallel to the sides of the grid. The people of your world\r\nare extremely scared of being at the edge of the world, so you know that\r\nthe base doesn\u2019t contain any of the squares on the edges of the grid\r\n(the x or y coordinate being 1 or 10^9). To help you locate the base,\r\nyou have been given a device that you can place in any square of the\r\ngrid, and it will tell you the manhattan distance to the closest square\r\nof the base. The manhattan distance from square (a, b) to square (p, q)\r\nis calculated as |a p|+|b q|. If you try to place the device inside the\r\nenemy base, you will be captured by the enemy. Because of this, .\r\nUnfortunately, the device is powered by a battery and you can\u2019t recharge\r\nit. This means that you can use the device at most 40 times.\r\n", "solutions": ["#include<bits/stdc++.h>\n#define L(i, j, k) for (int i = (j); i <= (k); ++i) \n#define R(i, j, k) for (int i = (j); i >= (k); --i)  \n#define ll long long\n#define vi vector < int > \n#define sz(a) ((int) (a).size())\nusing namespace std;\nconst int N = 2e5 + 7, mod = 1e9 + 7;\nint get (int x, int y) {\n\tcout << \"? \" << x << ' ' << y << endl;\n\tint w;\n\tcin >> w;\n\treturn w;\n}\nint main () {\n\tios::sync_with_stdio(false);\n\tcin.tie(0); cout.tie(0); \n\tint Len = get (1, 1);\n\tint l = 1, r = 1e9, ns = 1;\n\twhile (l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif(get(1, mid) + (mid - 1) == Len) ns = mid, l = mid + 1;\n\t\telse r = mid - 1; \n\t}\n\tint sx = Len + 2 - ns, sy = ns;\n\tint ex = 1e9 - get(1e9, sy), ey = 1e9 - get(sx, 1e9);\n\tcout << \"! \" << sx << ' ' << sy << ' ' << ex << ' ' << ey << endl;\n\treturn 0;\n} "], "input": "", "output": "", "tags": ["interactive", "math"], "dificulty": "2100", "interactive": false}