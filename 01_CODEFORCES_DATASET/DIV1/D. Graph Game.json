{
    "link": "https://codeforces.com//contest/235/problem/D",
    "problemId": "2002",
    "problem_idx": "D",
    "shortId": "235D",
    "contest_number": "235",
    "problem_submissions": {
        "D": [
            3042109
        ],
        "C": [
            2417778,
            2401429,
            2402641
        ],
        "E": [
            2402112,
            2401617,
            2400848,
            2421152,
            2421132,
            120142495,
            120140982,
            2406375
        ],
        "A": [
            2397139,
            2395807,
            2396602,
            2395919,
            2397439,
            2396282,
            2397676,
            2397630,
            2396710,
            2396092,
            2396146,
            2396812,
            2396212,
            2397021,
            2396581
        ],
        "B": [
            2395952,
            2396750,
            2397121,
            2396950,
            2397083,
            2398248,
            2396164,
            2401830,
            2396720,
            2397471,
            2402358,
            2399645,
            2400107,
            2397813
        ]
    },
    "name": "D. Graph Game",
    "statement": "In computer science, there is a method called \"Divide And Conquer By\r\nNode\" to solve some hard problems about paths on a tree. Let’s desribe\r\nhow this method works by function: ( is a tree): Chose a node (it’s\r\ncommon to chose weight-center) in tree . Let’s call this step \"Line A\".\r\nDeal with all paths that pass . Then delete from tree . After that\r\nbecomes some subtrees. Apply on each subtree. This ends when has only\r\none node because after deleting it, there’s nothing. Now, WJMZBMR has\r\nmistakenly believed that it’s ok to chose any node in \"Line A\". So he’ll\r\nchose a node at random. To make the situation worse, he thinks a \"tree\"\r\nshould have the same number of edges and nodes! So this procedure\r\nbecomes like that.Let’s define the variable . Initially the value of\r\nequal to . So, (now is a graph): . The operation \"\" means assignment.\r\nmeans the number of nodes in . Choose a node in graph at random\r\n(uniformly among all nodes of ). Then delete from graph . After that\r\nbecomes some connected components. Apply on each component. He’ll apply\r\non a connected graph with nodes and edges. He thinks it will work\r\nquickly, but it’s very slow. So he wants to know the expectation of of\r\nthis procedure. Can you help him?\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\n#define INF (1<<29)\n\n#define MAXV 3010\n\nint p[MAXV],rank[MAXV];\n\nvoid init(int n){\n    int i;\n    REP(i,n) {p[i] = i; rank[i] = 1;}\n}\n\nint root2(int x){\n    if(p[x] != x) p[x] = root2(p[x]);\n    return p[x];\n}\n\nvoid connect(int x, int y){\n    int rx=root2(x),ry=root2(y);\n    if(rx == ry) return;\n    if(rank[rx] > rank[ry]) {p[ry] = rx; rank[rx] += rank[ry];}\n    if(rank[rx] <= rank[ry]) {p[rx] = ry; rank[ry] += rank[rx];}\n}\n\nint N;\nvector <int> graph[3010];\nint parent[3010];\nint C;\nint root[3010], depth[3010];\nint dist[3010][3010];\n\ndouble func(int x, int y){\n    if(x == y) return 1.0;\n    int rx = root[x], ry = root[y];\n    if(rx == ry) return 1.0 / (dist[x][y] + 1.0);\n    int a = depth[x], b = abs(rx-ry), c = C - b, d = depth[y];\n    return 1.0 / (a + b + d + 1.0) + 1.0 / (a + c + d + 1.0) - 1.0 / (a + d + C);\n}\n\nvoid dfs1(int p, int x){\n    int i;\n    parent[x] = p;\n    REP(i,graph[x].size()){\n        int y = graph[x][i];\n        if(y != p) dfs1(x, y);\n    }\n}\n\nvoid dfs2(int p, int x, int r, int d){\n    int i;\n    if(root[x] != -1){\n        r = root[x];\n        d = 0;\n    }\n    root[x] = r; depth[x] = d;\n    REP(i,graph[x].size()){\n        int y = graph[x][i];\n        if(y != p) dfs2(x, y, r, d+1);\n    }\n}\n\nqueue <int> q;\n\nvoid bfs(int x){\n    int i;\n    \n    REP(i,N) dist[x][i] = INF;\n    dist[x][x] = 0;\n    q.push(x);\n    \n    while(!q.empty()){\n        int y = q.front(); q.pop();\n        REP(i,graph[y].size()){\n            int z = graph[y][i];\n            if(dist[x][z] != INF) continue;\n            dist[x][z] = dist[x][y] + 1;\n            q.push(z);\n        }\n    }\n}\n\nint main(void){\n    int i,j;\n    \n    cin >> N;\n    init(N);\n    \n    int s,t;\n    REP(i,N){\n        int a,b;\n        cin >> a >> b;\n        if(root2(a) == root2(b)){\n            s = a; t = b;\n        } else {\n            connect(a, b);\n            graph[a].push_back(b);\n            graph[b].push_back(a);\n        }\n    }\n    \n    dfs1(-1, s);\n    \n    REP(i,N) root[i] = -1;\n    int x = t;\n    while(1){\n        root[x] = C; C++;\n        if(x == s) break;\n        x = parent[x];\n    }\n    \n    dfs2(-1, s, -1, 0);\n    \n    graph[s].push_back(t);\n    graph[t].push_back(s);\n    \n    REP(i,N) bfs(i);\n    \n    double ans = 0.0;\n    REP(i,N) REP(j,N) ans += func(i, j);\n    printf(\"%.9f\\n\", ans);\n    \n//  cout << C << endl;\n//  REP(i,N) cout << i << ' ' << root[i] << ' ' << depth[i] << endl;\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Graph Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/5592",
    "editorial": "First of all, let us consider the simpler case of trees. Let us use\r\nEvent(A,B) to denote the following event \"when we select A as the\r\ndeleting point, B is connected to A\". Clearly, if Event(A,B) happens, it\r\nwould add 1 to . So we can just simply calculate the probability of\r\nevery Event(A,B), and add them up. Let us consider how to calculate the\r\nprobability of Event(A,B). Assume there are n vertices in the path\r\nbetween A and B, we claim that the probability is simply . Let us try to\r\nprove it using induction. First let us assume thereâs a connected\r\nsub-graph of the tree containing both A and B, if the sub-graph only has\r\nn vertices, then the event happens only if we select vertex A, so the\r\nprobability is . Otherwise, assume it has x vertices there is two cases:\r\nwhether the selected vertex is on the path between A and B or not. In\r\nthe first case, the probability of Event(A,B) happen is because if we\r\ndonât select A, Event(A,B) will never happen. In the second case, the\r\nsub-graph containing A,B has become smaller, so the probability is . So\r\nadd them up we can prove this statement. Then we can solve the tree case\r\nby simply add up the inverse of every pathâs length in the tree. And for\r\nthe original case, thereâs at most 2 paths between A and B. If thereâs\r\nonly one path, then everything is the same with the tree case.\r\nOtherwise, the path between A and B should pass the cycle in the graph.\r\nLet us examine this case, you can see that there 2 types of vertex:\r\nVertex on the path of A to cycle or B to cycle, they should not be\r\nselected before A because once theyâre selected, A and B lost\r\nconnectivity, let us call them X. Vertex on the cycle, the two paths\r\nfrom A to B, each path contains a path in the cycle, let us call them Y\r\nand Z. So there are two possibilities: X and Y are free when A is\r\nselected, X and Z are free when A is selected. And we should subtract\r\nthe case that X and Y, Z are all free when A is selected because it\r\ndouble-counts before. So the probability is . Check etr âs solution for\r\nthe details: 2401228 And my C++ implementation: 2403938\r\n",
    "hint": []
}