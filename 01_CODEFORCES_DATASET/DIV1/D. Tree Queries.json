{
    "link": "https://codeforces.com//contest/1254/problem/D",
    "problemId": "475573",
    "problem_idx": "D",
    "shortId": "1254D",
    "contest_number": "1254",
    "problem_submissions": {
        "E": [
            65385076,
            65389059,
            65387406,
            65386461,
            65391860,
            65388358,
            65363435,
            65898589,
            65898484,
            65394164,
            65399861,
            66201727,
            65511222,
            65387985,
            65459118,
            65393939,
            65393500,
            65393329
        ],
        "D": [
            65367776,
            65371157,
            65363228,
            65371547,
            65376523,
            65913436,
            65376504,
            65392793,
            65392745,
            65392458,
            65378396,
            65374788,
            65374479,
            65375973,
            72224123,
            72224118,
            72222073,
            66201641,
            66201609,
            65765881,
            65505837,
            65498656,
            65498523,
            65498350,
            65448275,
            65421529,
            65421428,
            65420506,
            65420496,
            65420340,
            65420220,
            65419939,
            65419809,
            65419466,
            65419306,
            65410495,
            65410139,
            65394253,
            65394071,
            65393989,
            65393862,
            65393694,
            65393607,
            65393012,
            65391960,
            65391551,
            65372156,
            65379236,
            65379295,
            65458244,
            65380498,
            65379619,
            65398630,
            65392892,
            65392821,
            65392515,
            65379510,
            65376362,
            65378466,
            65385723
        ],
        "C": [
            65362906,
            65363606,
            65372750,
            65364742,
            65368283,
            65376926,
            65364286,
            65368353,
            65366513,
            65367352,
            65362577,
            65365184,
            65369353,
            65366181,
            65364840,
            65369974,
            65366318,
            65369506
        ],
        "B1": [
            65358065,
            65358880,
            65365540,
            65357743,
            65359033,
            65368715,
            65359200,
            65362593,
            65360678,
            65362903,
            65376471,
            65360693,
            65359085,
            65359111,
            65357280,
            65361721,
            65360645,
            65360620,
            65355048
        ],
        "B2": [
            65357919,
            65358760,
            65365394,
            65357802,
            65363382,
            65368676,
            65359261,
            65362680,
            65360774,
            65362731,
            65376512,
            65360901,
            65359018,
            65358907,
            65360708,
            65398529,
            65398522,
            65398389,
            65398370,
            65398329,
            65398291,
            65398212,
            65361653,
            65360607,
            65360509,
            65354503
        ],
        "A": [
            65355800,
            65355044,
            65354936,
            65355999,
            65356253,
            65372457,
            65355826,
            65357065,
            65357334,
            65359043,
            65356279,
            65357553,
            65355832,
            65355374,
            65354099,
            65354766,
            65367155,
            65356549,
            65357393
        ]
    },
    "name": "D. Tree Queries",
    "statement": "Hanh is a famous biologist. He loves growing trees and doing experiments\r\non his own garden.One day, he got a tree consisting of n vertices.\r\nVertices are numbered from 1 to n. A tree with n vertices is an\r\nundirected connected graph with n-1 edges. Initially, Hanh sets the\r\nvalue of every vertex to 0.Now, Hanh performs q operations, each is\r\neither of the following types: Type 1: Hanh selects a vertex v and an\r\ninteger d. Then he chooses some vertex r , lists all vertices u such\r\nthat the path from r to u passes through v. Hanh then increases the\r\nvalue of all such vertices u by d. Type 2: Hanh selects a vertex v and\r\ncalculates the expected value of v. Since Hanh is good at biology but\r\nnot math, he needs your help on these operations.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n \nusing namespace __gnu_pbds;\nusing namespace std;\n \ntemplate <typename T>\nusing ordered_set =\n\ttree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n \n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n\t*this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n \n#define shandom_ruffle random_shuffle\n \nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=1000*1007;\nconst ll inf=1e18;\nconst ll mod=998244353;\n\nint n, q;\n\nvi graf[nax];\nint pre[nax];\nint post[nax];\nint czas;\n\nint roz[nax];\n\nvector <pair<int,pii> > waz[nax];\n\nll dziel(ll a, ll b)\n{\n\ta%=mod;\n\tb%=mod;\n\tll wyk=mod-2;\n\twhile(wyk)\n\t{\n\t\tif (wyk&1)\n\t\t\ta=(a*b)%mod;\n\t\tb=(b*b)%mod;\n\t\twyk>>=1;\n\t}\n\treturn a;\n}\n\nll drz[nax];\n\nvoid dod(int a, int b, ll w)\n{\n\tw%=mod;\n\tfor (int i=a; i<=n; i+=(i&(-i)))\n\t\tdrz[i]+=w;\n\tfor (int i=b+1; i<=n; i+=(i&(-i)))\n\t\tdrz[i]-=w;\n}\n\nll czyt(int v)\n{\n\tll ret=0;\n\tfor (int i=v; i; i-=(i&(-i)))\n\t\tret+=drz[i];\n\tret%=mod;\n\tif (ret<0)\n\t\tret+=mod;\n\treturn ret;\n}\n\nvoid dfs1(int v, int oj)\n{\n\troz[v]=1;\n\tfor (int i : graf[v])\n\t{\n\t\tif (i==oj)\n\t\t\tcontinue;\n\t\tdfs1(i, v);\n\t\troz[v]+=roz[i];\n\t}\n}\n\nbool mniej(int a, int b)\n{\n\treturn roz[a]<roz[b];\n}\n\nvoid dfs2(int v, int oj)\n{\n\tsort(graf[v].begin(), graf[v].end(), mniej);\n\tif (!graf[v].empty() && graf[v].back()==oj)\n\t\tgraf[v].pop_back();\n\tczas++;\n\tpre[v]=czas;\n\tfor (int i : graf[v])\n\t\tdfs2(i, v);\n\tpost[v]=czas;\n\t\n\tif (v!=1)\n\t{\n\t\twaz[v].push_back({n-roz[v], {1, pre[v]-1}});\n\t\twaz[v].push_back({n-roz[v], {post[v]+1, n}});\n\t}\n\tint g;\n\tfor (int i=0; i<(int)graf[v].size(); i=g)\n\t{\n\t\tg=i;\n\t\twhile(g<(int)graf[v].size() && roz[graf[v][i]]==roz[graf[v][g]])\n\t\t\tg++;\n\t\twaz[v].push_back({roz[graf[v][i]], {pre[graf[v][i]], post[graf[v][g-1]]}});\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &q);\n\tfor (int i=1; i<n; i++)\n\t{\n\t\tint a, b;\n\t\tscanf(\"%d%d\", &a, &b);\n\t\tgraf[a].push_back(b);\n\t\tgraf[b].push_back(a);\n\t}\n\tdfs1(1, 0);\n\tdfs2(1, 0);\n\t//~ for (int i=1; i<=n; i++)\n\t\t//~ debug() << pre[i] << \" \" << waz[i];\n\tll dzn=dziel(1, n);\n\twhile(q--)\n\t{\n\t\tint typ;\n\t\tscanf(\"%d\", &typ);\n\t\tif (typ==1)\n\t\t{\n\t\t\tint v;\n\t\t\tll d;\n\t\t\tscanf(\"%d%lld\", &v, &d);\n\t\t\tdod(1, n, n*d);\n\t\t\tfor (const auto i : waz[v])\n\t\t\t\tdod(i.second.first, i.second.second, -i.first*d);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint v;\n\t\t\tscanf(\"%d\", &v);\n\t\t\tll x=czyt(pre[v]);\n\t\t\tx%=mod;\n\t\t\tx+=mod;\n\t\t\tx%=mod;\n\t\t\tprintf(\"%lld\\n\", (x*dzn)%mod);\n\t\t}\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "probabilities",
        "trees"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Tree Queries.json",
    "editorial_link": "https://codeforces.com//blog/entry/71594",
    "editorial": "Our other authors and testers have found better solutions; our best\r\ncomplexity is . However, since this solution is the theoretically worst\r\ncomplexity that we intended to accept, I decided to write about it. Feel\r\nfree to share your better solution in the comment section :)Consider two\r\ndistinct vertices , , the number of vertices such that the path from to\r\npasses through is , where is the subtree we get by cutting the first\r\nedge on the path from to , then keep the part with vertex . If then this\r\nvalue will be . By linearity of expectation, we can see that adding to\r\nwill add to the expected value of an amount equal to . Note that this\r\nvalue is the same for all that lies on the same \"subtree branch\" of . To\r\nupdate it efficiently, we can split the vertices into groups: those\r\nwhich has degree greater than (there are no more than of them), and\r\nthose which does not. When we update a \"light\" vertex , we iterate over\r\nthe neighbors of and update the subtrees accordingly. When we get the\r\nvalue of a vertex , we already have the sum of contributions from all\r\n\"light\" vertices to , hence we can iterate over all \"heavy\" vertices and\r\ncalculate the contribution from each of them to . If we use range-update\r\npoint-query data structures such as Fenwick Trees then the complexity\r\nwill be if we choose .\r\n",
    "hint": []
}