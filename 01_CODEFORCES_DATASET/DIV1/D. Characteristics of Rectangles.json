{
    "link": "https://codeforces.com//contest/333/problem/D",
    "problemId": "3372",
    "problem_idx": "D",
    "shortId": "333D",
    "contest_number": "333",
    "problem_submissions": {
        "C": [
            4188846,
            4188839,
            4181075,
            4185234,
            4185523,
            4181601,
            4984551
        ],
        "E": [
            4188775,
            4188772,
            4188763,
            4188761,
            4188751,
            4184852,
            4183356,
            4182849,
            4183109,
            4181299,
            4179516,
            4184372,
            4183323,
            4184498,
            4184601,
            4184967,
            4188899,
            4183262,
            4185857,
            4189453,
            4189430,
            4189422,
            4189074,
            4186245,
            4185068,
            4181537
        ],
        "D": [
            4177757,
            4180517,
            4180333,
            4180428,
            4180206,
            4183380,
            4180154,
            4179998,
            4182482,
            4188785,
            4180480,
            4189492,
            4189489,
            4189487,
            4182551,
            4183041,
            4185442,
            4183297,
            4181604,
            4185194,
            4187366,
            4187266
        ],
        "B": [
            4175966,
            4176598,
            4177213,
            4176845,
            4177457,
            4177188,
            4200825,
            4200823,
            4177391,
            4183089,
            4178821,
            4177992,
            4179001,
            4180178,
            4179860,
            4176566,
            4178918,
            4176886,
            4177236
        ],
        "A": [
            4174903,
            4175083,
            4175574,
            4175820,
            4175080,
            4175668,
            4176548,
            4175429,
            4175639,
            4175919,
            4177018,
            4175803,
            4175480,
            4175531,
            4175684,
            4175917
        ]
    },
    "name": "D. Characteristics of Rectangles",
    "statement": "Gerald found a table consisting of rows and columns. As a prominent\r\nexpert on rectangular tables, he immediately counted the table\u2019s\r\nproperties, that is, the minimum of the numbers in the corners of the\r\ntable (minimum of four numbers). However, he did not like the final\r\nvalue it seemed to be too small. And to make this value larger, he\r\ndecided to crop the table a little: delete some columns on the left and\r\nsome on the right, as well as some rows from the top and some from the\r\nbottom. Find what the maximum property of the table can be after such\r\ncropping. Note that the table should have at least two rows and at least\r\ntwo columns left in the end. The number of cropped rows or columns from\r\neach of the four sides can be zero.\r\n",
    "solutions": [
        "#define _CRT_SECURE_NO_DEPRECATE\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <vector>\n#include <queue>\n#include <iostream>\n#include <iterator>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <sstream>\n#include <fstream>\n#include <ctime>\n#include <cstring>\n#include <functional>\n#include <bitset>\n#pragma comment(linker, \"/STACK:66777216\")\nusing namespace std;\n#define pb push_back\n#define ppb pop_back\n#define pi 3.1415926535897932384626433832795028841971\n#define mp make_pair\n#define x first\n#define y second\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define INF 1000000000\n#define FOR(i,a,b) for (int _n(b), i(a); i <= _n; i++)\n#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--)\n#define all(c) (c).begin(), (c).end()\n#define SORT(c) sort(all(c))\n#define rep(i,n) FOR(i,1,(n))\n#define rept(i,n) FOR(i,0,(n)-1)\n#define L(s) (int)((s).size())\n#define C(a) memset((a),0,sizeof(a))\n#define VI vector <int>\n#define ll long long\n\nint a,b,c,d,n,m,k;\nunsigned q[1001][32];\nint mas[1002][1002];\ninline bool check(int xx) {\n\trept(i, n) memset(q[i], 0, sizeof(q[i]));\n\trept(i, n) {\n\t\trept(j, m) {\n\t\t\tif (mas[i][j] >= xx) {\n\t\t\t\tq[i][j >> 5] |= 1u << (j & 31);\n\t\t\t}\n\t\t}\n\t}\n\n\tint lim = (m + 31) / 32;\n\trept(i, n) {\n\t\tFOR(j, i + 1, n - 1) {\n\t\t\tbool ok = 0;\n\t\t\trept(z, lim) {\n\t\t\t\tint t = q[i][z] & q[j][z];\n\t\t\t\tif (t) {\n\t\t\t\t\tif (t & (t - 1)) return 1;\n\t\t\t\t\tif (ok) return 1;\n\t\t\t\t\tok = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nchar buf[65537], *ch = buf;\ninline char get_char()\n{\n       if (*ch==0)\n       {\n            ch=buf;\n            fread(buf,sizeof(char),65536,stdin);\n       }\n       return *(ch++);\n}\n\n\ninline void next_int(int &ans)\n{\n       char ch;\n       while ((ch=get_char())<'0' || ch>'9');\n       do\n       {\n               ans=ans*10+ch-'0';\n       }\n       while ((ch=get_char())>='0' && ch<='9');\n}\n\nint main() {\n\t//freopen(\"input.txt\",\"r\",stdin);\n\t//freopen(\"output.txt\",\"w\",stdout);\n\t\n\n\tnext_int(n); next_int(m);\n\trept(i, n) {\n\t\trept(j, m) {\n\t\t\tnext_int(mas[i][j]);\n\t\t}\n\t}\n\n\tint l = -1, r = INF + 1;\n\twhile (r - l > 1) {\n\t\tint xx = (r + l) / 2;\n\t\tif (!check(xx)) r = xx; else\n\t\tl = xx;\n\t}\n\tprintf(\"%d\\n\", l);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "bitmasks",
        "brute force",
        "implementation",
        "sortings"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Characteristics of Rectangles.json",
    "editorial_link": "https://codeforces.com//blog/entry/8418",
    "editorial": "In this problem we must to find maximal value of minimum of values on\r\nfour intersections of two rows and two columns of table. In another\r\nwords, we are looking for maximum value of for all such that , , , .\r\nLets us binary search of the answer. For us it we must can define is\r\nthere two rows and two colums with ones on all four its intersections;\r\nin other words, integers so that . Lets consider all pair of natural\r\nnumbers so that there exist nutural number so that . Existence of two\r\nequals such pairs is equals to existence of above four numbers. But it\r\nis can be only such pairs. Therefore we can make the array where we will\r\nmark pair who were meets. Lets iterate all pairs in any order until we\r\nmeet repeated pair or pairs are ends. So we have solution of time .\r\n"
}