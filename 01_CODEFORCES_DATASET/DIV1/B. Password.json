{
    "link": "https://codeforces.com//contest/126/problem/B",
    "problemId": "663",
    "problem_idx": "B",
    "shortId": "126B",
    "contest_number": "126",
    "problem_submissions": {
        "E": [
            854113,
            853528,
            853478
        ],
        "D": [
            848548,
            848806,
            851249,
            849307,
            848628,
            849555,
            849207,
            847738,
            847195,
            849847,
            847564,
            850037,
            851976,
            851517
        ],
        "C": [
            845968,
            846820,
            845605,
            845826,
            846897,
            846767,
            847633,
            846234,
            847958,
            848103,
            849052,
            847621,
            847480,
            852294,
            848150
        ],
        "B": [
            845264,
            845888,
            844695,
            845238,
            845702,
            845923,
            846711,
            844555,
            845924,
            846945,
            845744,
            846359,
            845914,
            845709
        ],
        "A": [
            844313,
            845180,
            853880,
            880738,
            852290,
            845616,
            850019,
            845773,
            850503,
            845064,
            844238
        ]
    },
    "name": "B. Password",
    "statement": "Asterix, Obelix and their temporary buddies Suffix and Prefix has\r\nfinally found the Harmony temple. However, its doors were firmly locked\r\nand even Obelix had no luck opening them.A little later they found a\r\nstring , carved on a rock below the temple\u2019s gates. Asterix supposed\r\nthat that\u2019s the password that opens the temple and read the string\r\naloud. However, nothing happened. Then Asterix supposed that a password\r\nis some substring of the string .Prefix supposed that the substring is\r\nthe beginning of the string ; Suffix supposed that the substring should\r\nbe the end of the string ; and Obelix supposed that should be located\r\nsomewhere inside the string , that is, is neither its beginning, nor its\r\nend.Asterix chose the substring so as to please all his companions.\r\nBesides, from all acceptable variants Asterix chose the longest one (as\r\nAsterix loves long strings). When Asterix read the substring aloud, the\r\ntemple doors opened. You know the string . Find the substring or\r\ndetermine that such substring does not exist and all that\u2019s been written\r\nabove is just a nice legend.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define P 1000000007\n#define N 1000010\nchar s[N];int p[N],a[N],n,S=0;\ninline int hh(int x,int y)\n{\n\treturn a[y]-a[x-1]*p[y-x+1];\n}\nint ff(int x)\n{\n\tint L=1,R=n-x;\n\twhile(L<=R)\n\t{\n\t\tint M=(L+R)/2;\n\t\tif(hh(1,M)==hh(x,x+M-1))L=M+1;else R=M-1;\n\t}\n\treturn R;\n}\nint main()\n{\n\tscanf(\"%s\",s+1);n=strlen(s+1);\n\tp[0]=1;for(int i=1;i<n+5;i++)p[i]=p[i-1]*P;\n\tfor(int i=1;i<=n;i++)a[i]=a[i-1]*P+s[i];\n\tfor(int i=2;i<=n;i++)S=max(S,ff(i));\n\tfor(int i=S;i>=1;i--)if(hh(1,i)==hh(n-i+1,n))\n\t\t{for(int j=1;j<=i;j++)putchar(s[j]);puts(\"\");return 0;}\n\tputs(\"Just a legend\");\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp",
        "hashing",
        "string suffix structures",
        "strings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Password.json",
    "editorial_link": "https://codeforces.com/blog/entry/3140",
    "editorial": "Let us calculate a prefix-function for all prefices of string. Prefix-function p[i] is maximal length of prefix that also is suffix of substring [1...i]. More about prefix function you can see in a description of Knuth-Morris-Pratt algorithm (KMP).\n\nThe first of possible answers is prefix of length p[n]. If p[n]?=?0, there is no solution. For checking the first possible answer you should iterate over p[i]. If at least one of them equal to p[n] (but not n-th, of course) - you found the answer. The second possible answer is prefix of length p[p[n]]. If p[p[n]]?=?0, you also have no solution. Otherwise you can be sure that the answer already found. This substring is a prefix and a suffix of our string. Also it is suffix of prefix with length p[n] that places inside of all string. This solution works in O(n).\n\nAlso this problem can be solved using hashing. You can find hash of every substring in O(1) and compare substrings by comparing thier hashes. Well, let's check for every prefix that it is a suffix of our string and store thier lengths into some array in the increasing order. Then, using binary search over the array, you can find maximal length of prefix that lie inside of string. Check of every prefix you can do in O(n). So, you have some  solution.\n\nIn point of fact, the array of prefix lengths in the previous solution is list { p[n], p[p[n]], ... }, that written if reversed order. From the first solution you know that the answer is prefix of length either p[n], or p[p[n]] (if it exists, of course). Therefore some naive solution without binary search can fits in the limits if you will stupidly check all prefices in the order of decrease thier lengths:) This solution works in O(n).\n\nAlso this problem can be solved using z-function."
}