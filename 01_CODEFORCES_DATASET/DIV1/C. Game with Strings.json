{
    "link": "https://codeforces.com//contest/482/problem/C",
    "problemId": "15990",
    "problem_idx": "C",
    "shortId": "482C",
    "contest_number": "482",
    "problem_submissions": {
        "E": [
            8395492,
            8395487,
            8395485,
            8395484,
            8395481
        ],
        "D": [
            8386071,
            8389539,
            8389292,
            8390634,
            8390063,
            8388875,
            8388934,
            8389261,
            8389687,
            8445804,
            8390689,
            8390772,
            9364523,
            8390299,
            8389829
        ],
        "C": [
            8384458,
            8395228,
            8386818,
            8387122,
            8391988,
            8393481,
            8394742,
            8391508,
            8393489,
            8387159,
            8387776
        ],
        "B": [
            8382609,
            8381668,
            8382625,
            8383076,
            8381676,
            8382713,
            8382593,
            8383732,
            8383882,
            8385352,
            8383031,
            8383352,
            8382682,
            8381439,
            8383046,
            8382782
        ],
        "A": [
            8380309,
            8380134,
            8380145,
            8380792,
            8380181,
            8383494,
            8380551,
            8380832,
            8382370,
            8381220,
            8380876,
            8380679,
            8381208,
            8382400,
            8381109,
            8380183
        ]
    },
    "name": "C. Game with Strings",
    "statement": "You play the game with your friend. The description of this game is\r\nlisted below. Your friend creates distinct strings of the same length\r\nand tells you all the strings. Then he randomly chooses one of them. He\r\nchooses strings equiprobably, i.e. the probability of choosing each of\r\nthe strings equals . You want to guess which string was chosen by your\r\nfriend. In order to guess what string your friend has chosen, you are\r\nallowed to ask him questions. Each question has the following form: What\r\ncharacter stands on position in the string you have chosen? A string is\r\nconsidered guessed when the answers to the given questions uniquely\r\nidentify the string. After the string is guessed, you stop asking\r\nquestions. You do not have a particular strategy, so as each question\r\nyou equiprobably ask about a position that hasn’t been yet mentioned.\r\nYour task is to determine the expected number of questions needed to\r\nguess the string chosen by your friend.\r\n",
    "solutions": [
        "#include <cstring>\n#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <memory.h>\n#include <cassert>\n\nusing namespace std;\n\nconst int BITS = 17;\nconst int MAX = (1 << BITS) - 1;\n\nint kb[1 << BITS];\n\nconst int N = (1 << 21) + 10;\n\nlong long bad[N];\ndouble f[N];\nchar word[777][777];\n\nint main() {\n  int cnt;\n  scanf(\"%d\", &cnt);\n  for (int i = 0; i < cnt; i++) {\n    scanf(\"%s\", word[i]);\n  }\n  int n = strlen(word[0]);\n  for (int t = 0; t < (1 << n); t++) {\n    bad[t] = 0;\n  }\n  for (int i = 0; i < cnt; i++) {\n    for (int j = i + 1; j < cnt; j++) {\n      int diff = 0;\n      for (int k = 0; k < n; k++) {\n        if (word[i][k] == word[j][k]) {\n          diff |= (1 << k);\n        }\n      }\n      bad[diff] |= (1LL << i);\n      bad[diff] |= (1LL << j);\n    }\n  }\n  kb[0] = 0;\n  for (int i = 1; i < (1 << BITS); i++) {\n    kb[i] = kb[i & (i - 1)] + 1;\n  }\n  for (int t = (1 << n) - 1; t >= 0; t--) {\n    for (int i = 0; i < n; i++) {\n      if (t & (1 << i)) {\n        bad[t ^ (1 << i)] |= bad[t];\n      }\n    }\n    int p = 0;\n    f[t] = 0.0;\n    for (int i = 0; i < n; i++) {\n      if (!(t & (1 << i))) {\n        f[t] += f[t ^ (1 << i)];\n        p++;\n      }\n    }\n    if (p > 0) {\n      f[t] /= p;\n    }\n    f[t] += (kb[bad[t] & MAX] + kb[(bad[t] >> BITS) & MAX] + kb[(bad[t] >> (2 * BITS))]) * 1.0 / cnt;\n  }\n  printf(\"%.17lf\\n\", f[0]);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "dp",
        "probabilities"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Game with Strings.json",
    "editorial_link": "https://codeforces.com//blog/entry/14417",
    "editorial": "Letâs handle all string pairs and calculate\nthe mask, which will have 1-bits only in positions in which that strings\nhave the same characters. In other words, we could not distinguish these\nstrings using positions with submask of mask , then we must add in\n1-bits in positions . This way in we store mask of strings, which we\ncould not distinguish using only positions given in mask . Using\ninformation described above, we can easily calculate this dynamics. Now,\nwhen we have array calculated, it is not hard to calculate the answer.\nLetâs handle some mask . Now we should try to make one more question in\nposition , which is equal to adding one more 1-bit in in position .\nAfter that we may guess some strings, they are 1-bits in mask s =\nd[mask] ^ d[mask | (1 << pos)]. Then you have to calculate number of\nbits in quickly and update the answer. Juryâs solution: 8394918\n",
    "hint": []
}