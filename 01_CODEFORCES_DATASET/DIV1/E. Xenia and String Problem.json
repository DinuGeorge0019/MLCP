{
    "link": "https://codeforces.com//contest/356/problem/E",
    "problemId": "3680",
    "problem_idx": "E",
    "shortId": "356E",
    "contest_number": "356",
    "problem_submissions": {
        "D": [
            4794974,
            4796940,
            4801750,
            4797879,
            4794633,
            4794914,
            4800192,
            4799081,
            4798608,
            4796033,
            4796373,
            5586844,
            4848850,
            4848737
        ],
        "C": [
            4792387,
            4791833,
            4794313,
            4794230,
            4792849,
            4796109,
            4790890,
            4794074,
            4792572,
            4798707,
            4793084,
            4793173,
            4792457,
            4794510,
            4793687,
            4793583
        ],
        "A": [
            4790471,
            4798737,
            4789838,
            4789461,
            4789429,
            4789788,
            4789491,
            4792712,
            4789440,
            4789650,
            4790200,
            4790207,
            4789553,
            4789481,
            4790643,
            4790114,
            4791900,
            4790345
        ],
        "B": [
            4789769,
            4790832,
            4793129,
            4799391,
            4791122,
            4791172,
            4791264,
            4792100,
            4790127,
            4791066,
            4791524,
            4791678,
            4791801,
            4791270,
            4793238,
            4792003,
            4791083,
            4792077
        ],
        "E": [
            4808374,
            4805352
        ]
    },
    "name": "E. Xenia and String Problem",
    "statement": "Xenia the coder went to The Olympiad of Informatics and got a string\r\nproblem. Unfortunately, Xenia isn\u2019t fabulous in string algorithms. Help\r\nher solve the problem. is a sequence of characters , where record shows\r\nthe length of the string. of string is string .String is a string, if it\r\nmeets the conditions: the length of string is odd; character occurs\r\nexactly once in the string; either , or substrings and are the same and\r\nare Gray strings. For example, strings \"\", \"\", \"\" are Gray strings and\r\nstrings \"\", \"\", \"\" are not.The of string is the sum of the squares of\r\nthe lengths of all substrings of string that are Gray strings. In other\r\nwords, consider all pairs of values . If substring is a Gray string, you\r\nshould add to the beauty.Xenia has got string consisting of lowercase\r\nEnglish letters. She is allowed to replace at most one letter of the\r\nstring by any other English letter. The task is to get a string of\r\nmaximum beauty.\r\n",
    "solutions": [
        "// WRONG ANSWER\n\n#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <cstddef>\n#include <algorithm>\n#include <utility>\n#include <iterator>\n#include <numeric>\n#include <list>\n#include <complex>\n#include <cstdio>\n#include <climits>\n#include <iostream>\n#include <fstream>\n#include <tuple>\n\n/*** TEMPLATE CODE STARTS HERE ***/\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef long long ll;\ntypedef complex<double> pnt;\ntypedef pair<int, int> pii;\n\n#define RA(x) (x).begin(), (x).end()\n#define FE(i, x) for (auto i = begin(x); i != end(x); ++i)\n#define SZ(x) ((int) (x).size())\n\ntemplate<class T>\nvoid splitstr(const string &s, vector<T> &out)\n{\n    istringstream in(s);\n    out.clear();\n    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));\n}\n\ntemplate<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }\n\nstatic void redirect(int argc, const char **argv)\n{\n    if (argc > 1)\n    {\n        static filebuf f;\n        f.open(argv[1], ios::in);\n        cin.rdbuf(&f);\n        if (!cin)\n        {\n            cerr << \"Failed to open '\" << argv[1] << \"'\" << endl;\n            exit(1);\n        }\n    }\n\n    if (argc > 2)\n    {\n        static filebuf f;\n        f.open(argv[2], ios::out | ios::trunc);\n        cout.rdbuf(&f);\n        if (!cout)\n        {\n            cerr << \"Failed to open '\" << argv[2] << \"'\" << endl;\n        }\n    }\n}\n\n/*** TEMPLATE CODE ENDS HERE */\n\ntypedef pair<int, char> change;\n\nstatic char get(\n    const vector<vector<char> > &gray,\n    const vector<vector<map<change, char> > > &changes,\n    int level, int pos, change ch)\n{\n    int side = (1 << level) - 1;\n    int left = pos - side;\n    int right = pos + side;\n    if (ch.first < left || ch.first > right)\n        return gray[level][pos];\n    else\n    {\n        auto p = changes[level][pos].find(ch);\n        if (p == changes[level][pos].end())\n            return 0;\n        else\n            return p->second;\n    }\n}\n\nint main(int argc, const char **argv)\n{\n    redirect(argc, argv);\n\n    string str;\n    int L;\n    cin >> str;\n    L = str.size();\n    int N = 0;\n    while ((1 << (N + 1)) - 1 <= L)\n        N++;\n\n    vector<ll> value(N);\n    for (int i = 0; i < N; i++)\n    {\n        ll len = (1 << (i + 1)) - 1;\n        value[i] = len * len;\n    }\n\n    vector<vector<char> > gray(N, vector<char>(L, '\\0'));\n    vector<vector<map<change, char> > > changes(N, vector<map<change, char> >(L));\n    for (int i = 0; i < L; i++)\n    {\n        gray[0][i] = str[i];\n        for (int j = 0; j < 26; j++)\n            if ('a' + j != str[i])\n                changes[0][i].insert(make_pair(change(i, 'a' + j), 'a' + j));\n    }\n\n    ll score = L;\n    vector<ll> lose(L);\n    vector<vector<ll> > gain(26, vector<ll>(L));\n    for (int i = 1; i < N; i++)\n    {\n        const int side = (1 << i) - 1;\n        const int step = 1 << (i - 1);\n        for (int j = side; j < L - side; j++)\n        {\n            char left = gray[i - 1][j - step];\n            char right = gray[i - 1][j + step];\n            char mid = gray[i - 1][j];\n            gray[i][j] = (left && mid && right\n                && left == right && left != mid) ? str[j] : 0;\n            for (int jump = -step; jump <= step; jump += step)\n            {\n                for (auto cx : changes[i - 1][j + jump])\n                {\n                    const change c = cx.first;\n                    char l2 = get(gray, changes, i - 1, j - step, c);\n                    char m2 = get(gray, changes, i - 1, j, c);\n                    char r2 = get(gray, changes, i - 1, j + step, c);\n                    if (l2 && m2 && r2 && l2 == r2 && l2 != m2)\n                        changes[i][j].insert(make_pair(c, m2));\n                }\n            }\n            if (gray[i][j])\n            {\n                score += value[i];\n                for (int k = j - side; k <= j + side; k++)\n                    lose[k] += value[i];\n            }\n            for (auto cx : changes[i][j])\n                gain[cx.first.second - 'a'][cx.first.first] += value[i];\n        }\n    }\n\n    ll ans = score;\n    for (int i = 0; i < 26; i++)\n        for (int j = 0; j < L; j++)\n        {\n            ll cur = score - lose[j] + gain[i][j];\n            ans = max(ans, cur);\n        }\n\n    cout << ans << '\\n';\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "hashing",
        "implementation",
        "string suffix structures",
        "strings"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Xenia and String Problem.json",
    "editorial_link": "https://codeforces.com/blog/entry/9210",
    "editorial": "During the contest most of participants write the solutions that are\r\nvery similar to the author\u00e2\u0080\u0099s one. One of the author\u00e2\u0080\u0099s solution uses\r\nhashes (but there exist solution without it), you can see short\r\ndescription of the solution below: For each position calculate with\r\nhashes the maximal value of , such that substring is Gray string. Also,\r\ncalculate the maximal value , that substring differs from some Gray\r\nstring in at most one position. You can see that . If , also remember\r\nposition and letter in the position, that differs Gray string and the\r\nsubstring. You can see, that if we don\u00e2\u0080\u0099t need to change letters, then\r\nthe answer for the problem is , where . So, calculate an answer without\r\nchanges. Next, iterate through all positions and letters in it. What is\r\nthe new answer for the problem? Look at all Gray strings that occurs in\r\nour string and touches our fixed position. After we change this position\r\nthe string will not be Gray string anymore (so we should subtract the\r\nsquired length of the string from our answer). Look at all Gray strings\r\nthat differs in exactly fixed position from some substring of the\r\nstring. If we change the letter in the position to the fixed letter, all\r\nsuch strings will be added to the answer (and we should add their\r\nsquired lengths). Summary, with and we need to calculate for each\r\nposition and letter, how the answer differs if we change the letter in\r\nthe position to the fixed one. For that reason we should use offline\r\nupdate (+=) on the segment. After the values will be calculated we can\r\nupdate our answer with all possible values.\r\n"
}