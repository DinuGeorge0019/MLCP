{
    "link": "https://codeforces.com//contest/383/problem/B",
    "problemId": "5723",
    "problem_idx": "B",
    "shortId": "383B",
    "contest_number": "383",
    "problem_submissions": {
        "B": [
            5756409,
            5751225,
            5757744,
            5753341,
            5808519,
            5808489,
            5808447,
            5758844,
            5759238,
            5752874,
            5755308,
            5752676,
            5753907,
            5753281,
            5756832,
            5755532
        ],
        "E": [
            5754649,
            5757705,
            5753388,
            5758136,
            5808454,
            5755553,
            5754159,
            5755881,
            5756030,
            5755626,
            5754883,
            5757327,
            5758405,
            5757943
        ],
        "D": [
            5753594,
            5752449,
            5752307,
            5754262,
            5808453,
            5751984,
            5752563,
            5753410,
            5753070,
            5753481,
            5755159,
            5755983,
            5755452,
            5753533,
            5756037,
            5756133,
            5757148,
            5756616,
            5755389,
            5756824
        ],
        "C": [
            5750456,
            5751886,
            5754923,
            5749119,
            5751328,
            5751146,
            5750311,
            5750868,
            5752299,
            5751003,
            5750201,
            5751936,
            5751653,
            5754669,
            5750989,
            5754841,
            5751430,
            5750434
        ],
        "A": [
            5747280,
            5747986,
            5747387,
            5747246,
            5808450,
            5747221,
            5747445,
            5747936,
            5747254,
            5748686,
            5747361,
            5747734,
            5747935,
            5748612,
            5748223,
            5747638,
            5747622,
            5749616,
            5757219
        ]
    },
    "name": "B. Volcanoes",
    "statement": "Iahub got lost in a very big desert. The desert can be represented as a\r\nsquare matrix, where each cell is a zone of the desert. The cell\r\nrepresents the cell at row and column . Iahub can go from one cell only\r\ndown or right, that is to cells or . Also, there are cells that are\r\noccupied by volcanoes, which Iahub cannot enter. Iahub is initially at\r\ncell and he needs to travel to cell . Knowing that Iahub needs second to\r\ntravel from one cell to another, find the minimum time in which he can\r\narrive in cell .\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n#include <ctime>\n#include <algorithm>\n#include <numeric>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <list>\n#include <map>\n#include <set>\n\nusing namespace std;\n\n#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#define pb push_back\n#define mp make_pair\n#define sz(x) ((int)(x).size())\n\ntypedef long long ll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<int, int> pii;\ntypedef pair<ll, int> pli;\ntypedef pair<int, ll> pil;\ntypedef pair<ll, ll> pll;\n\nbool cmp2(const pii &a, const pii &b) {\n  return a.second == b.second ? a.first < b.first : a.second < b.second;\n}\n\nint main() {\n  #ifdef DEBUG\n  freopen(\".in\", \"r\", stdin);\n  freopen(\".out\", \"w\", stdout);\n  #endif\n\n  int h, m;\n  while (scanf(\"%d%d\", &h, &m) >= 1) {\n    int w = h;\n\n    vector<pii> pts(m);\n    for (int i = 0; i < m; i++)\n      scanf(\"%d%d\", &pts[i].first, &pts[i].second);\n    sort(pts.begin(), pts.end(), cmp2);\n\n    vi ys;\n    ys.pb(1);\n    ys.pb(2);\n    ys.pb(h - 1);\n    ys.pb(h);\n    for (int i = 0; i < m; i++)\n    for (int k = -1; k <= 1; k++)\n      ys.pb(pts[i].second + k);\n    {\n      int ptr = 0;\n      for (int i = 0; i < sz(ys); i++)\n        if (1 <= ys[i] && ys[i] <= h)\n          ys[ptr++] = ys[i];\n      ys.resize(ptr);\n    }\n    sort(ys.begin(), ys.end());\n    ys.erase(unique(ys.begin(), ys.end()), ys.end());\n\n    assert(sz(ys) >= 1);\n    assert(ys[0] == 1);\n    assert(ys.back() == h);\n\n    set<pii> cur;\n    cur.insert(mp(1, 1));\n\n    int pptr = 0;\n    for (int cyid = 0; cyid < sz(ys); cyid++) {\n      int cy = ys[cyid];\n//      eprintf(\"y=%d\\n\", cy);\n      vi curs;\n      while (pptr < m && pts[pptr].second == cy) {\n        curs.pb(pts[pptr++].first);\n      }\n      curs.pb(w + 1);\n\n      int bord = 0;\n      for (int i = 0; i < sz(curs); i++) {\n        int minx = curs[i];\n//        eprintf(\"  process %d\\n\", minx);\n        for (;;) {\n          set<pii>::iterator it = cur.lower_bound(mp(bord + 1, -1));\n          if (it == cur.end()) break;\n          if (it->first > curs[i]) break;\n          minx = min(minx, it->first);\n//          eprintf(\"    remove %d..%d\\n\", it->first, it->second);\n          if (it->second > curs[i]) {\n//            eprintf(\"      add %d..%d\\n\", curs[i] + 1, it->second);\n            cur.insert(mp(curs[i] + 1, it->second));\n          }\n          cur.erase(it);\n        }\n        assert(minx > bord);\n        if (minx < curs[i]) {\n//          eprintf(\"    new %d..%d\\n\", minx, curs[i] - 1);\n          cur.insert(mp(minx, curs[i] - 1));\n        }\n        bord = minx;\n      }\n      assert(sz(cur) <= sz(curs) + 3);\n\n/*      eprintf(\"  nya:\\n\");\n      for (set<pii>::iterator it = cur.begin(); it != cur.end(); it++)\n        eprintf(\"    %d..%d\\n\", it->first, it->second);*/\n    }\n\n    if (!cur.empty() && cur.rbegin()->second >= w)\n      printf(\"%d\\n\", h + w - 2);\n    else\n      printf(\"-1\\n\");\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation",
        "sortings",
        "two pointers"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Volcanoes.json",
    "editorial_link": "https://codeforces.com/blog/entry/10476",
    "editorial": "Our first observation is that if there is a path from (1, 1) to (N, N), then the length of path is 2 * N \u0096 2. Since all paths have length 2 * N \u0096 2, it follows that if there is at least one path, the answer is 2 * N \u0096 2 and if there isn\u0092t, the answer is -1. How to prove it? Every path from (1, 1) to (N, N) has exactly N \u0096 1 down directions and exactly N \u0096 1 right directions. So, total length for each path is N \u0096 1 + N \u0096 1 = 2 * N \u0096 2.\n\nSo we reduced our problem to determine if there is at least one path from (1, 1) to (N, N). This is the challenging part of this task, considering that N <= 10 ^ 9. How would you do it for a decently small N, let\u0092s say N <= 10^3 . One possible approach would be, for each row, keep a set of reachable columns. We could easily solve this one by doing this: if (i, j) denotes element from ith row and jth column, then (i, j) is (is not) reachable if:\n\nif (i, j) contains a volcano, then (i, j) is not reachable. Otherwise, if at least one of (i \u0096 1, j) and (i, j \u0096 1) is reachable, then (i, j) is reachable. Otherwise, (i, j) is not reachable.\n\nWhat\u0092s the main problem of this approach? It needs to keep track of 10^9 lines and in worst case, each of those lines can have 10^9 reachable elements. So, worst case we need 10^9 * 10^9 = 10^18 operations and memory.\n\nCan we optimize it? We can note for beginning that we don\u0092t need to keep track of 10^9 lines, only m lines are really necessarily. We need only lines containing at least one obstacle (in worst case when each line contains only one obstacle, we need m lines). How to solve it this way? Suppose line number x contains some obstacles and lines x + 1, x + 2, x + 3 do not contain any obstacle. Suppose we calculated set S = {y | cell (x, y) is reachable}. How would look S1, S2, S3 corresponding to lines x + 1, x + 2, x + 3? For S1, we can reach cell (x + 1, ymin), where ymin is minimal value from set S. Then, we can also reach {ymin + 1, ymin + 2, ..., N}, by moving right from (x + 1, ymin). So S1 = {ymin, ymin + 1, ..., N}. How do S2 and S3 look? It\u0092s easy to see that they\u0092ll be as well {ymin, ymin + 1, ..., N}. So we get following optimization: suppose set of lines containing at least one obstacle is {L1, L2, ..., Lk}. We need to run algorithm only for lines L1, L1 + 1, L2, L2 + 1, L3, L3 + 1, ..., Lk, Lk + 1.\n\nIt looks like we didn\u0092t make anything with this optimization. Even if we calculate for m lines, each line can still have 10^9 reachable positions. So worst case we perform 10^14 operations. We need something better for managing information from a line. You can note that for a given line y, there are a lot of positions having consecutive values. There are a lot of positions (x, y) and (x, y + 1) both reachable. This should give us following idea: what if instead of keeping reachable positions, we keep reachable ranges? That is, for each line x we keep a set of ranges S = {(a, b) | all cells (x, k) with a <= k <= b are reachable}.\n\nHow many ranges can it be for a line? If the line contains m obstacles, there are m + 1 ranges. Suppose for line x all cells are reachable, but for line x + 1 cells (x + 1, 3) (x + 1, 5) (x + 1, N \u0096 1) are blocked. Then, the ranges of reachable cells are [1, 2] [4, 4], [6, N \u0096 2] and [N, N]. By now, we get worst case m lines and worst case each line having m elements, so in worst case we\u0092d have to handle m * m = 10 ^ 10 events. This may still look too much, but happily this bound is over estimated. If a line has o obstacles, there can be at most o + 1 ranges. If lines L1, L2, ..., Lk have {o1, o2, ..., ok} obstacles, there\u0092ll be at most o1 + o2 + ... + ok + k ranges. But o1 + o2 + ... + ok = m and also k is at most m (proved above why we\u0092re interested in at most m lines), so in worst case we get m + m = 2 * m ranges. Yaay, finally a decent number of states for this problem :)\n\nSo, we iterate each line we\u0092re interested in. Let\u0092s find set of ranges for this line, thinking that all cells from line above are reachable. This is easy to do. After we get our ranges like all cells from above can be visited, let\u0092s think how having obstacles above can influence current ranges. After adding ranges from above, current ranges can\u0092t increase (obviously), they can only decrease, remain the same or some of them can become empty. So, let\u0092s take each range [a, b] from current line and see how it will transform after adding ranges from previous line.\n\nGiven range [a, b], it can transform only in [a\u0092 , b] with a\u0092 >= a. If a\u0092 > b, then obviously range is empty. Why second number of range keeps constant? Let a\u0092 smallest reachable column from current line which is in range [a, b]. It\u0092s enough to check a\u0092 >= a, as if a\u0092 > b, range will be empty. It\u0092s obviously why we need to keep a\u0092 smallest value possible >= a: we\u0092re interested to keep range as big as possible and as less as we cut from left, as big it is. Once we\u0092ve found a\u0092 in range [a, b] (or a\u0092 > b if range is empty) all cells {a\u0092 + 1, a\u0092 + 2, ..., b} are reachable as well by going right from a\u0092, so if interval is not empty, then second number defining it remains b.\n\nNext question is how to find a\u0092 fast enough. In order a point a\u0092 to be reachable on current range, it also needs to exist a range on previous line containing it. If the range from previous line is [pa, pb] then a\u0092 needs to follow 3 conditions:\n\na\u0092 minimal such as\n\npa <= a\u0092 <= pb\n\na\u0092 >= a\n\nWhat if instead of finding a\u0092 we find [pa, pb]? Then a\u0092 is max(pa, a). In order a\u0092 to be as small as possible, since a is constant, pa needs to be as small as possible. So we reduced it to:\n\npa minimal pb >= a\u0092 >= a <=> pb >= a\n\nIntervals from previous line are disjoint, no 2 intervals cross each other. It means that if pb is minimal, than pa is minimal too (if we increase pb, then pa will increase too, so it won\u0092t be minimal). Hence, you need to find an interval [pa, pb] such as pb is minimal and pb >= a. Then, a\u0092 is max(a, pa). This is easy to do if we sort all intervals from previous line increasing by second value (pb), then we binary search for value a.\n\nFinally, after running algorithm for all lines, last range from last line has second number N (assuming ranges are sorted increasing by second value), then there exist a path, otherwise there does not exist. This algorithm should run O(m * logm) worst case, good enough to pass."
}