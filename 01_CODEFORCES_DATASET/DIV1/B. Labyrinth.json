{
    "link": "https://codeforces.com//contest/1063/problem/B",
    "problemId": "236986",
    "problem_idx": "B",
    "shortId": "1063B",
    "contest_number": "1063",
    "problem_submissions": {
        "F": [
            44321779,
            44310989,
            44539942,
            44524512,
            44473039,
            44472562,
            50480317,
            51150998,
            44317621,
            44317615,
            44312825,
            44373124
        ],
        "D": [
            44311197,
            44305997,
            44303323,
            44313702,
            44361765,
            44361136,
            44376357,
            44376258,
            44307498,
            44337552,
            44311559,
            44305058,
            44311516,
            44304459,
            44311498,
            44312697,
            44315110
        ],
        "E": [
            44305503,
            44313651,
            44315069,
            44307031,
            44313364,
            44308262,
            44337210,
            44313717,
            44317640,
            44314472,
            44311650
        ],
        "C": [
            44298733,
            44296257,
            44305349,
            44298667,
            44298705,
            44299697,
            44299069,
            44300205,
            44299465,
            44299657,
            44301626,
            44302301,
            44304486,
            44306960,
            44302436,
            44309287,
            44301972,
            44304513,
            44301966
        ],
        "A": [
            44295781,
            44291759,
            44291627,
            44296582,
            44291453,
            44291198,
            44292770,
            44291128,
            44296111,
            44296432,
            44292644,
            44293693,
            44292723,
            44296227,
            44292099,
            44305135,
            44297417,
            44292247,
            44291472
        ],
        "B": [
            44295123,
            44298986,
            44296043,
            44295205,
            44297251,
            44302092,
            44296710,
            44297936,
            44295873,
            44297588,
            44298080,
            44299136,
            44294684,
            44297166,
            44295722,
            44296834,
            44296659,
            44296927
        ]
    },
    "name": "B. Labyrinth",
    "statement": "You are playing some computer game. One of its levels puts you in a maze\r\nconsisting of lines, each of which contains cells. Each cell either is\r\nfree or is occupied by an obstacle. The starting cell is in the row and\r\ncolumn . In one step you can move one square up, left, down or right, if\r\nthe target cell is not occupied by an obstacle. You can\u2019t move beyond\r\nthe boundaries of the labyrinth.Unfortunately, your keyboard is about to\r\nbreak, so you can move left no more than times and move right no more\r\nthan times. There are no restrictions on the number of moves up and down\r\nsince the keys used to move up and down are in perfect condition.Now you\r\nwould like to determine for each cell whether there exists a sequence of\r\nmoves that will put you from the starting cell to this particular one.\r\nHow many cells of the board have this property?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\n#define PB push_back\n#define MP make_pair\n#define LL long long\n#define int LL\n#define FOR(i,a,b) for(int i = (a); i <= (b); i++)\n#define RE(i,n) FOR(i,1,n)\n#define REP(i,n) FOR(i,0,(int)(n)-1)\n#define R(i,n) REP(i,n)\n#define VI vector<int>\n#define PII pair<int,int>\n#define LD long double\n#define FI first\n#define SE second\n#define st FI\n#define nd SE\n#define ALL(x) (x).begin(), (x).end()\n#define SZ(x) ((int)(x).size())\n\n#define unordered_map __fast_unordered_map\ntemplate<class Key, class Value, class Hash = std::hash<Key>>\nusing unordered_map = __gnu_pbds::gp_hash_table<Key, Value, Hash>;\n\ntemplate<class C> void mini(C &a4, C b4) { a4 = min(a4, b4); }\ntemplate<class C> void maxi(C &a4, C b4) { a4 = max(a4, b4); }\n\ntemplate<class TH> void _dbg(const char *sdbg, TH h){ cerr<<sdbg<<'='<<h<<endl; }\ntemplate<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a) {\n  while(*sdbg!=',')cerr<<*sdbg++;\n  cerr<<'='<<h<<','; _dbg(sdbg+1, a...);\n}\n\ntemplate<class T> ostream &operator<<(ostream& os, vector<T> V) {\n  os << \"[\"; for (auto vv : V) os << vv << \",\"; return os << \"]\";\n}\ntemplate<class L, class R> ostream &operator<<(ostream &os, pair<L,R> P) {\n  return os << \"(\" << P.st << \",\" << P.nd << \")\";\n}\n\n#ifdef LOCAL\n#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)\n#else\n#define debug(...) (__VA_ARGS__)\n#define cerr if(0)cout\n#endif\n\nconst int kRows[4] = {0, -1, 0, 1};\nconst int kCols[4] = {-1, 0, 1, 0};\nconst int kCost[4] = {1, 0, 0, 0};\n\nconst int MaxN = 2048;\n\nint dist[MaxN][MaxN];\ndeque<pair<int, int>> Q;\n\nint N, M;\nint r0, c0;\nint x, y;\nchar board[MaxN][MaxN];\nbool visited[MaxN][MaxN];\n\n\nint32_t main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(11);\n  cerr << fixed << setprecision(6);\n\n  cin >> N >> M >> r0 >> c0 >> x >> y;\n  --r0; --c0;\n  for (int i = 0; i < N; ++i)\n    cin >> board[i];\n\n  Q.push_back(make_pair(r0, c0));\n\n  for (int i = 0; i < N; ++i)\n    for (int j = 0; j < M; ++j)\n      dist[i][j] = 1e9;\n  dist[r0][c0] = 0;\n  \n  while (!Q.empty()) {\n    auto [r, c] = Q.front();\n    Q.pop_front();\n\n    if (visited[r][c]) { continue; }\n    visited[r][c] = true;\n    debug(r, c, dist[r][c]);\n\n    for (int d = 0; d < 4; ++d) {\n      const int nr = r + kRows[d];\n      const int nc = c + kCols[d];\n      const int ncost = kCost[d];\n      if (nr < 0 || nr >= N) { continue; }\n      if (nc < 0 || nc >= M) { continue; }\n      if (board[nr][nc] == '*') { continue; }\n      if (dist[nr][nc] > dist[r][c] + ncost) {\n        dist[nr][nc] = dist[r][c] + ncost;\n        if (ncost)\n          Q.push_back(make_pair(nr, nc));\n        else\n          Q.push_front(make_pair(nr, nc));\n      }\n    }\n  }\n\n  int answer = 0;\n\n  for (int i = 0; i < N; ++i)\n    for (int j = 0; j < M; ++j) {\n      const int left = dist[i][j];\n      if (left > 1e8) { continue; }\n      debug(i, j, left);\n      const int right = j - (c0 - left);\n      answer += (left <= x && right <= y);\n    }\n\n  cout << answer << \"\\n\";\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "shortest paths"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Labyrinth.json",
    "editorial_link": "https://codeforces.com/blog/entry/62455",
    "editorial": "Suppose we started in cell and examining whether we can reach cell\r\n.Let\u00e2\u0080\u0099s denote the number of taken moves to the right as and number of\r\nmoves to the left as Clearly, That is, . Or, put otherwise , where only\r\ndepends on the starting cell and the target cell.So in fact we just need\r\nto minimize of the left or right moves the other one will be optimal as\r\nwell.To calculate the minimum possible number of L-moves to reach some\r\ncell we can use 0-1 bfs.Solution is .\r\n"
}