{
    "link": "https://codeforces.com//contest/229/problem/A",
    "problemId": "1890",
    "problem_idx": "A",
    "shortId": "229A",
    "contest_number": "229",
    "problem_submissions": {
        "E": [
            2282826,
            2281727,
            2285054,
            2283563,
            2285346,
            2285087,
            2285039,
            2284707,
            2406707,
            2284567,
            2285340,
            2286716
        ],
        "D": [
            2279442,
            2279718,
            2280046,
            2280344,
            2282950,
            2281962,
            2282776,
            2282602,
            2281974,
            2283282,
            2282070,
            2283551,
            2282480,
            2282427,
            2282188,
            2281610,
            2283171
        ],
        "B": [
            2276814,
            2277758,
            2276080,
            2280606,
            2279078,
            2281037,
            2280028,
            2279270,
            2278615,
            2280162,
            2280493,
            2279459,
            2280601,
            2279970,
            2281238
        ],
        "C": [
            2274858,
            2273646,
            2277243,
            2277231,
            2276597,
            2280255,
            2276975,
            2277162,
            2279947,
            2277171,
            2276063,
            2277931,
            2277827,
            2275487,
            2283199,
            2278070
        ],
        "A": [
            2274032,
            2286414,
            2274348,
            2275349,
            2275192,
            2274716,
            2276132,
            2302218,
            2286476,
            2274187,
            2274224,
            2275364,
            2275231,
            2276851,
            2274395,
            2275579
        ]
    },
    "name": "A. Shifts",
    "statement": "You are given a table consisting of rows and columns. Each cell of the\r\ntable contains a number, 0 or 1. In one move we can choose some row of\r\nthe table and cyclically shift its values either one cell to the left,\r\nor one cell to the right.To a table row one cell to the right means to\r\nmove the value of each cell, except for the last one, to the right\r\nneighboring cell, and to move the value of the last cell to the first\r\ncell. A cyclical shift of a row to the left is performed similarly, but\r\nin the other direction. For example, if we cyclically shift a row \"\" one\r\ncell to the right, we get a row \"\", but if we shift a row \"\" one cell to\r\nthe left, we get a row \"\".Determine the minimum number of moves needed\r\nto make some table column consist only of numbers 1.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n#include <climits>\n#include <numeric>\n#include <vector>\nusing namespace std;\nconst int MAX_N = 100 + 1;\nconst int MAX_M = 10000 + 1;\nchar map[MAX_N][MAX_M];\nint n, m;\nconst int INF = ~0U >> 2;\n\nvoid doit(char a[], int d[], int m) {\n\tstatic int que[MAX_M], qh, qt;\n\tqh = qt = 0;\n\tfor (int i = 0; i < m; ++i) {\n\t\td[i] = a[i] == '1' ? 0 : INF;\n\t\tif (d[i] == 0) {\n\t\t\tque[qt++] = i;\n\t\t}\n\t}\n\twhile (qh < qt) {\n\t\tint u = que[qh++];\n\t\tint v = (u + 1) % m;\n\t\tif (d[v] == INF) {\n\t\t\td[v] = d[u] + 1;\n\t\t\tque[qt++] = v;\n\t\t}\n\t\tv = (u + m - 1) % m;\n\t\tif (d[v] == INF) {\n\t\t\td[v] = d[u] + 1;\n\t\t\tque[qt++] = v;\n\t\t}\n\t}\n}\n\nint d[MAX_M];\nint cst[MAX_M];\n\nint main() {\n\tcin >> n >> m;\n\tfor (int r = 0; r < n; ++r) {\n\t\tscanf(\"%s\", map[r]);\n\t}\n\tfor (int r = 0; r < n; ++r) {\n\t\tdoit(map[r], d, m);\n\t\tfor (int c = 0; c < m; ++c) {\n\t\t\tif (d[c] == INF || cst[c] == INF) {\n\t\t\t\tcst[c] = INF;\n\t\t\t} else {\n\t\t\t\tcst[c] += d[c];\n\t\t\t}\n\t\t}\n\t}\n\tint ans = *min_element(cst, cst + m);\n\tif (ans == INF)\n\t\tcout << -1 << endl;\n\telse\n\t\tcout << ans << endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "two pointers"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Shifts.json",
    "editorial_link": "https://codeforces.com//blog/entry/5437",
    "editorial": "Let\u00e2\u0080\u0099s compute the minimum number of operations needed to get all 1s in\r\neach of the columns. For this, traverse each row twice one time to the\r\nleft and one time to the right, recording the index of the nearest cell\r\nwith 1 (in corresponding direction) for each column in this row. Then\r\nthe number of operations for any particular column is the sum of the\r\ncomputed values over all rows. In turn, the answer to the problem is the\r\nminimal value of these sums. The complexity of the solution is . Sample\r\nsolution: http://pastie.org/4897169 (archived copy)\r\n"
}