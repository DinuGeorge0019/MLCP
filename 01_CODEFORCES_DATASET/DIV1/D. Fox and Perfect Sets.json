{
    "link": "https://codeforces.com//contest/388/problem/D",
    "problemId": "6408",
    "problem_idx": "D",
    "shortId": "388D",
    "contest_number": "388",
    "problem_submissions": {
        "D": [
            5881221,
            5882916,
            5884765,
            5884166,
            5884772,
            5886438,
            5886379,
            5879628,
            5881889,
            5883814,
            9006539
        ],
        "A": [
            5878499,
            5875213,
            5874956,
            5875207,
            5875079,
            5874857,
            5875135,
            5882241,
            5886169,
            5874693,
            5875783,
            5874826,
            5874879,
            5875011
        ],
        "C": [
            5878094,
            5879257,
            5880482,
            5882050,
            5881780,
            5878419,
            5880247,
            5886441,
            5883025,
            5884549,
            5885115,
            5881042,
            5884063,
            5878671
        ],
        "B": [
            5877357,
            5878081,
            5878393,
            5877933,
            5879631,
            5877363,
            5877984,
            5881618,
            5885395,
            5877991,
            5880604,
            5879253,
            5880664,
            5877570
        ],
        "E": [
            5952727,
            5888469
        ]
    },
    "name": "D. Fox and Perfect Sets",
    "statement": "Fox Ciel studies number theory.She thinks a non-empty set contains\r\nnon-negative integers is if and only if for any ( can be equal to ), .\r\nWhere operation means exclusive or operation ().Please calculate the\r\nnumber of perfect sets consisting of integers not greater than . The\r\nanswer can be very large, so print it modulo .\r\n",
    "solutions": [
        "#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <memory.h>\n\nusing namespace std;\n\nconst int md = 1000000007;\n\ninline void add(int &a, int b) {\n  a += b;\n  if (a >= md) a -= md;\n}\n\ninline int mul(int a, int b) {\n  return 1LL * a * b % md;\n}\n\nconst int N = 222;\n\nint c[N][N];\n\nint f[N][N][2];\n\nint d[N];\n\nint main() {\n  for (int i = 0; i < N; i++)\n    for (int j = 0; j < N; j++)\n      if (j == 0) c[i][j] = 1; else\n      if (i < j) c[i][j] = 0; else {\n        c[i][j] = c[i - 1][j] + c[i - 1][j - 1];\n        if (c[i][j] >= md) c[i][j] -= md;\n      }\n  int k;\n  scanf(\"%d\", &k);\n  for (int j = 0; j < 30; j++)\n    if (k & (1 << j)) d[j] = 1;\n    else d[j] = 0;\n  memset(f, 0, sizeof(f));\n  f[30][0][1] = 1;\n  for (int j = 30; j > 0; j--)\n    for (int open = 0; open <= 30 - j; open++)\n      for (int eq = 0; eq <= 1; eq++) {\n        int ft = f[j][open][eq];\n        if (ft == 0) {\n          continue;\n        }\n        if (eq == 0 || d[j - 1] == 1) {\n          add(f[j - 1][open + 1][eq], ft);\n        }\n        for (int u = 0; u <= open; u++)\n          if (u & 1) {\n            if (eq == 0 || d[j - 1] == 1) {\n              add(f[j - 1][open][eq], mul(ft, c[open][u]));\n            }\n          } else {\n            int neq = eq;\n            if (d[j - 1] == 1) neq = 0;\n            add(f[j - 1][open][neq], mul(ft, c[open][u]));\n          }\n      }\n  int ans = 0;\n  for (int open = 0; open <= 30; open++)\n    for (int eq = 0; eq <= 1; eq++)\n      add(ans, f[0][open][eq]);\n  printf(\"%d\\n\", ans);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Fox and Perfect Sets.json",
    "editorial_link": "https://codeforces.com//blog/entry/10629",
    "editorial": "A perfect set correspond to a linear space, so we can use base to\r\nrepresent it. We do the Gauss Jordan elimination of vectors in that set,\r\nand can get an unique base. (Note that we need to to the all process of\r\nGauss Jordan elimination, including the elimination after it reached\r\nupper triangular) And we can construct the bases bit by bit from higher\r\nbit to lower, for a bit: We can add a vector to the base such that the\r\nbit is the highest bit of that vector. And at this time, all other\r\nvector will have 0 in this bit. Otherwise we need to assign this bit of\r\neach vector already in the base. If now we have k vector, then we have\r\n2^k choices. And when we do this, we need to know whatâs the maximal\r\nvector in this space. Itâs not hard: If we add a vector, then in the\r\nmaximal vector, this bit will be 1. Otherwise, if we donât have any\r\nvector in base yet, then this bit will be 0. Otherwise there will be\r\n2^(k-1) choices results in this bit of maximal vector will be 0, and\r\n2^(k-1) choices results in 1. So we can solve this task by DP bit by\r\nbit.\r\n",
    "hint": []
}