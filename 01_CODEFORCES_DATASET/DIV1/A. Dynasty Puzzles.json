{"link": "https://codeforces.com//contest/191/problem/A", "problemId": "1350", "problem_idx": "A", "shortId": "191A", "contest_number": "191", "problem_submissions": {"D": [1730940, 1730058, 1732061, 1732109, 1732464], "E": [1728781, 1730615, 1727981, 1728842, 1729175, 1728797, 1729393, 1729602, 1729222, 1729975, 1730220, 1730326, 1729991, 1730136, 1729526, 1730229, 1730018, 1730441, 1730472], "C": [1727557, 1727971, 1727279, 1727922, 1728193, 1726763, 1727330, 1728312, 1727749, 1728454, 1728335, 1728217, 1728234, 1728828, 1727958, 1728318, 1727470, 1728758, 1727987], "B": [1726383, 1726744, 1729343, 1727040, 1726927, 1730397, 1728304, 1726935, 1728912, 1727207, 1727504, 1727317, 1729119, 1727295, 1728990, 1727070, 1729275, 1727129, 1729072], "A": [1725547, 1725524, 1725641, 1725909, 1725741, 1725703, 1725714, 1725752, 1725615, 1725779, 1725777, 1725532, 1726185, 1725907, 1725443, 1725690, 1725534, 1725596, 1727248]}, "name": "A. Dynasty Puzzles", "statement": "The ancient Berlanders believed that the longer the name, the more\r\nimportant its bearer is. Thus, Berland kings were famous for their long\r\nnames. But long names are somewhat inconvenient, so the Berlanders\r\nstarted to abbreviate the names of their kings. They called every king\r\nby the first letters of its name. Thus, the king, whose name was\r\nVictorious Vasily Pupkin, was always called by the berlanders VVP.In\r\nBerland over its long history many dynasties of kings replaced each\r\nother, but they were all united by common traditions. Thus, according to\r\none Berland traditions, to maintain stability in the country, the first\r\nname of the heir should be the same as the last name his predecessor\r\n(hence, the first letter of the abbreviated name of the heir coincides\r\nwith the last letter of the abbreviated name of the predecessor).\r\nBerlanders appreciate stability, so this tradition has never been\r\nbroken. Also Berlanders like perfection, so another tradition requires\r\nthat the first name of the first king in the dynasty coincides with the\r\nlast name of the last king in this dynasty (hence, the first letter of\r\nthe abbreviated name of the first king coincides with the last letter of\r\nthe abbreviated name of the last king). This tradition, of course, has\r\nalso been always observed.The name of a dynasty is formed by very simple\r\nrules: we take all the short names of the kings in the order in which\r\nthey ruled, and write them in one line. Thus, a dynasty of kings \"ab\"\r\nand \"ba\" is called \"abba\", and the dynasty, which had only the king\r\n\"abca\", is called \"abca\".Vasya, a historian, has recently found a list\r\nof abbreviated names of all Berland kings and their relatives. Help\r\nVasya to find the maximally long name of the dynasty that could have\r\nexisted in Berland.Note that in his list all the names are ordered by\r\nthe time, that is, if name is earlier in the list than , then if and\r\nwere kings, then king ruled before king .\r\n", "solutions": ["#include <cstdio>\n#include <cstdlib>\n#include <cassert>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\n#define pb push_back\n#define mp make_pair\n#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#define sz(x) ((int)(x).size())\n#define TASKNAME \"std\"\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<int, int> pii;\n\nconst int MAXL = 12;\nconst int MAXN = 5e5 + 1e3;\nconst int INF = 1e9;\n\nstruct Edge {\n  int a, b, w;\n};\n\nEdge es[MAXN];\nchar buf[MAXL + 1];\n\nint main() {\n  #ifdef DEBUG\n  freopen(TASKNAME \".in\", \"r\", stdin);\n  freopen(TASKNAME \".out\", \"w\", stdout);\n  #endif\n  \n  int n;\n  while (scanf(\"%d\", &n) >= 1) {\n    for (int i = 0; i < n; i++) {\n      scanf(\"%s\", buf);\n      int l = strlen(buf);\n      es[i].a = buf[0] - 'a';\n      es[i].b = buf[l - 1] - 'a';\n      es[i].w = l;\n    }\n    \n    int ans = 0;\n    for (int st = 0; st < 26; st++) {\n      vi cls(26, -INF);\n      cls[st] = 0;\n      for (int i = 0; i < n; i++) {\n        int a = es[i].a, b = es[i].b, w = es[i].w;\n        if (cls[a] >= 0) cls[b] = max(cls[b], cls[a] + w);\n      }\n      ans = max(ans, cls[st]);\n    }\n    printf(\"%d\\n\", ans);\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["dp"], "dificulty": "1500", "interactive": false}