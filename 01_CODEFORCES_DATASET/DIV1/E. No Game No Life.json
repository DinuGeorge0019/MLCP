{
    "link": "https://codeforces.com//contest/1464/problem/E",
    "problemId": "839214",
    "problem_idx": "E",
    "shortId": "1464E",
    "contest_number": "1464",
    "problem_submissions": {
        "D": [
            101893944,
            101884165,
            101894987,
            101897288,
            101893426,
            101899167,
            101898742,
            101897221,
            101904879,
            101902404,
            101904041,
            101898196,
            101901056,
            101893113,
            101900043,
            101901977,
            101879521,
            101891500
        ],
        "E": [
            101884958,
            101888698,
            101880762,
            101885481,
            101895459,
            101874392,
            101918343,
            101889791,
            101890948,
            101887375,
            142038158,
            102279161,
            102087511,
            101887630,
            101883023,
            101908666,
            101908552,
            101908506,
            101893369,
            101884575,
            101899034,
            101888272,
            101881773,
            101903223,
            101903745,
            101882555
        ],
        "C": [
            101877309,
            101876849,
            101885303,
            101878303,
            101875140,
            101886810,
            101875737,
            101878040,
            101880124,
            101880970,
            101877103,
            101881975,
            101878148,
            101882821,
            101880363,
            101877971,
            101885296,
            101877773,
            101876637
        ],
        "B": [
            101870508,
            101872024,
            101876423,
            101872980,
            101870882,
            101883179,
            101870101,
            101869654,
            101875498,
            101874908,
            101869353,
            101877667,
            101902344,
            101877756,
            101876619,
            101904584,
            101891390,
            101873346,
            101870962
        ],
        "A": [
            101862412,
            101862840,
            101865321,
            101865985,
            101861233,
            101876553,
            101861535,
            101873147,
            101867432,
            101867877,
            101872819,
            101866189,
            101865464,
            101863366,
            101870449,
            101865209,
            101894436,
            101867001,
            101859824
        ],
        "F": [
            101921592,
            101921489,
            101921368,
            101920713,
            113148352,
            197483789,
            101923610,
            101916398,
            101915019,
            107239743,
            103939202
        ]
    },
    "name": "E. No Game No Life",
    "statement": "Letâ€™s consider the following game of Alice and Bob on a directed acyclic\r\ngraph. Each vertex may contain an arbitrary number of chips. Alice and\r\nBob make turns alternating. Alice goes first. In one turn player can\r\nmove exactly one chip along any edge outgoing from the vertex that\r\ncontains this chip to the end of this edge. The one who cannot make a\r\nturn loses. Both players play optimally.Consider the following process\r\nthat takes place every second on a given graph with n vertices: An\r\ninteger v is chosen equiprobably from [1, n + 1]. If v\r\nleq n, we add a chip to the v-th vertex and go back to step 1. If v =\r\nn + 1, Alice and Bob play the game with the current arrangement of chips\r\nand the winner is determined. After that, the process is terminated.\r\nFind the probability that Alice will win the game. It can be shown that\r\nthe answer can be represented as\r\nfrac{P}{Q}, where P and Q are coprime integers and Q\r\nnot\r\nequiv 0\r\npmod{998\r\n,244\r\n,353}. Print the value of P\r\ncdot Q^{-1}\r\nbmod 998\r\n,244\r\n,353.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN = 100005;\nconst ll MOD = 998244353;\nconst ll Inv2 = (MOD + 1) / 2;\n\nint n,m,N;\nint SG[MAXN];\n\nll p[MAXN << 2];\nll q[MAXN << 2];\n\nvector<int> e[MAXN];\n\nll power(ll a,ll b)\n{\n\tll res = 1;\n\twhile (b)\n\t{\n\t\tif (b & 1)\n\t\t\t(res *= a) %= MOD;\n\t\t(a *= a) %= MOD;\n\t\tb >>= 1;\n\t}\n\treturn res;\n}\n\nvoid dfs(int u)\n{\n\tif (~SG[u])\n\t\treturn;\n\tvector<int> nxt;\n\tfor (int i = 0;i < e[u].size();i++)\n\t{\n\t\tdfs(e[u][i]);\n\t\tnxt.push_back(SG[e[u][i]]);\n\t}\n\tsort(nxt.begin(),nxt.end());\n\tint i = 0;\n\tfor (int j = 0;j < nxt.size();j++)\n\t\tif (i == nxt[j])\n\t\t\ti++;\n\tSG[u] = i;\n}\n\nvoid FWT(ll *a,bool inv)\n{\n\tfor (int i = 1;i < N;i <<= 1)\n\t\tfor (int j = 0;j < N;j += i << 1)\n\t\t\tfor (int k = 0;k < i;k++)\n\t\t\t{\n\t\t\t\tll x = a[j + k],y = a[j + k + i];\n\t\t\t\ta[j + k] = (inv ? (x + y) * Inv2 % MOD : (x + y) % MOD);\n\t\t\t\ta[j + k + i] = (inv ? (x - y) * Inv2 % MOD : (x - y) % MOD);\n\t\t\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tN = 1;\n\twhile (N - 1 < n)\n\t\tN <<= 1;\n\tfor (int u,v,i = 1;i <= m;i++)\n\t{\n\t\tscanf(\"%d%d\",&u,&v);\n\t\te[u].push_back(v);\n\t}\n\tmemset(SG,-1,sizeof(SG));\n\tfor (int i = 1;i <= n;i++)\n\t{\n\t\tdfs(i);\n\t\tp[SG[i]]++;\n\t}\n\tll Inv = power(n + 1,MOD - 2);\n\tfor (int i = 0;i < N;i++)\n\t\t(p[i] *= Inv) %= MOD;\n\tp[0]--;\n\tq[0] = -Inv;\n\tFWT(p,0);\n\tFWT(q,0);\n\tfor (int i = 0;i < N;i++)\n\t\tq[i] = q[i] * power(p[i],MOD - 2) % MOD;\n\tFWT(q,1);\n\tprintf(\"%lld\\n\",(MOD + 1 - q[0]) % MOD);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "dp",
        "games",
        "math",
        "matrices",
        "probabilities"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. No Game No Life.json",
    "editorial_link": "https://codeforces.com//blog/entry/85792",
    "editorial": "The winner of the game is determined by xor of Grundy values for all chips' vertices. Notice that every Grundy value ?m???\n so xor doesn't exceed 512. Let Pv\n be a probability of Alice's victory if the current xor is v\n.\n\nPv=?Pto?prob(v?to)+[v?0]?1n+1\n\nIn the second term, we got n+1\n and the process ended. It is clear that prob(v?to)=cnt[v?to]n+1\n, where cnt[x]\n is the number of vertices with the Grundy value equal to x\n. Now we have a system of 512 linear equations with variables Pv\n. We can solve it using the Gauss method. The answer is in P0\n. The proof that Gauss won't break along the way is left to the reader as an exercise.\n\nThere is also a solution using the Hadamard transform.",
    "hint": []
}