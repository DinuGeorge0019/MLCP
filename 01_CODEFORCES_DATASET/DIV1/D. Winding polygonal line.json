{
    "link": "https://codeforces.com//contest/1158/problem/D",
    "problemId": "343489",
    "problem_idx": "D",
    "shortId": "1158D",
    "contest_number": "1158",
    "problem_submissions": {
        "E": [
            54043697,
            54045364,
            54049022
        ],
        "D": [
            54034270,
            54037737,
            54037081,
            54029996,
            54039126,
            54036378,
            54039507,
            54040185,
            54038993,
            54040201,
            54038641,
            54040565,
            54035763,
            54041644,
            54031772,
            54033510,
            54035224
        ],
        "C": [
            54032525,
            54035029,
            54036135,
            54034332,
            54036498,
            54034178,
            54037957,
            54038859,
            54034328,
            54037431,
            54037039,
            54036368,
            54038382,
            54039919,
            54034772,
            54037883,
            54036347,
            54039155
        ],
        "B": [
            54031111,
            54032629,
            54034184,
            54032709,
            54033881,
            54040878,
            54036260,
            54033097,
            54031744,
            54033322,
            54032381,
            54039897,
            54035074,
            54040745,
            54038527,
            54041411,
            68070838,
            54045735,
            54041323
        ],
        "A": [
            54029723,
            54029634,
            54031071,
            54030974,
            54029203,
            54030224,
            54030247,
            54030013,
            54029682,
            54030151,
            54031232,
            54030952,
            54031158,
            54031859,
            54031283,
            54032676,
            54031617,
            54030225
        ],
        "F": [
            54045740,
            54049931,
            74200730,
            74200612,
            73657677,
            73657539,
            73657494,
            73657445,
            73007148,
            68077713,
            68077566,
            68077199,
            68077121,
            68076937
        ]
    },
    "name": "D. Winding polygonal line",
    "statement": "Vasya has n different points A_1, A_2,\r\nldots A_n on the plane. No three of them lie on the same line He wants\r\nto place them in some order A_{p_1}, A_{p_2},\r\nldots, A_{p_n}, where p_1, p_2,\r\nldots, p_n some permutation of integers from 1 to n.After doing so, he\r\nwill draw oriented polygonal line on these points, drawing oriented\r\nsegments from each point to the next in the chosen order. So, for all 1\r\nleq i\r\nleq n-1 he will draw oriented segment from point A_{p_i} to point\r\nA_{p_{i+1}}. He wants to make this polygonal line satisfying 2\r\nconditions: it will be non-self-intersecting, so any 2 segments which\r\nare not neighbors don\u2019t have common points. it will be . Vasya has a\r\nstring s, consisting of (n-2) symbols \"\" or \"\". Let\u2019s call an oriented\r\npolygonal line , if its i-th turn left, if s_i = \"\" and right, if s_i =\r\n\"\". More formally: i-th turn will be in point A_{p_{i+1}}, where\r\noriented segment from point A_{p_i} to point A_{p_{i+1}} changes to\r\noriented segment from point A_{p_{i+1}} to point A_{p_{i+2}}. Let\u2019s\r\ndefine vectors\r\noverrightarrow{v_1} =\r\noverrightarrow{A_{p_i} A_{p_{i+1}}} and\r\noverrightarrow{v_2} =\r\noverrightarrow{A_{p_{i+1}} A_{p_{i+2}}}. Then if in order to rotate the\r\nvector\r\noverrightarrow{v_1} by the smallest possible angle, so that its\r\ndirection coincides with the direction of the vector\r\noverrightarrow{v_2} we need to make a turn counterclockwise, then we say\r\nthat i-th turn is to the left, and otherwise to the right. For better\r\nunderstanding look at this pictures with some examples of turns: You are\r\ngiven coordinates of the points A_1, A_2,\r\nldots A_n on the plane and string s. Find a permutation p_1, p_2,\r\nldots, p_n of the integers from 1 to n, such that the polygonal line,\r\ndrawn by Vasya satisfy two necessary conditions.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\n#define PB push_back\n#define MP make_pair\n#define LL long long\n#define int LL\n#define FOR(i,a,b) for(int i = (a); i <= (b); i++)\n#define RE(i,n) FOR(i,1,n)\n#define REP(i,n) FOR(i,0,(int)(n)-1)\n#define R(i,n) REP(i,n)\n#define VI vector<int>\n#define PII pair<int,int>\n#define LD long double\n#define FI first\n#define SE second\n#define st FI\n#define nd SE\n#define ALL(x) (x).begin(), (x).end()\n#define SZ(x) ((int)(x).size())\n\n#define unordered_map __fast_unordered_map\ntemplate<class Key, class Value, class Hash = std::hash<Key>>\nusing unordered_map = __gnu_pbds::gp_hash_table<Key, Value, Hash>;\n\ntemplate<class C> void mini(C &a4, C b4) { a4 = min(a4, b4); }\ntemplate<class C> void maxi(C &a4, C b4) { a4 = max(a4, b4); }\n\ntemplate<class TH> void _dbg(const char *sdbg, TH h){ cerr<<sdbg<<'='<<h<<endl; }\ntemplate<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a) {\n  while(*sdbg!=',')cerr<<*sdbg++;\n  cerr<<'='<<h<<','; _dbg(sdbg+1, a...);\n}\n\ntemplate<class T> ostream &operator<<(ostream& os, vector<T> V) {\n  os << \"[\"; for (auto vv : V) os << vv << \",\"; return os << \"]\";\n}\ntemplate<class L, class R> ostream &operator<<(ostream &os, pair<L,R> P) {\n  return os << \"(\" << P.st << \",\" << P.nd << \")\";\n}\n\n#ifdef LOCAL\n#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)\n#else\n#define debug(...) (__VA_ARGS__)\n#define cerr if(0)cout\n#endif\n\nstruct Point {\n  int x, y;\n\n  Point operator-(const Point &P) const { return {x-P.x, y-P.y}; }\n  LL CrossProd(const Point &P) const {\n    return (LL)x * P.y - (LL)y * P.x;\n  }\n};\n\nint32_t main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(11);\n  cerr << fixed << setprecision(6);\n\n  string s;\n  int N;\n  cin >> N;\n  vector<Point> pts(N);\n  for (Point &pt : pts) { cin >> pt.x >> pt.y; }\n  cin >> s;\n\n  vector<bool> avail(N, true);\n  int fst = 0;\n  for (int i = 0; i < N; ++i) {\n    if (pts[i].x < pts[fst].x) { fst = i; }\n  }\n\n  VI order{fst};\n  avail[fst] = false;\n\n  for (int step = 0; step < N - 2; ++step) {\n    const bool is_right = s[step] == 'R';\n    const int last = order.back();\n\n    int cand = 0;\n    while (!avail[cand]) { ++cand; }\n\n    for (int i = cand + 1; i < N; ++i) {\n      if (!avail[i]) { continue; }\n      const bool right = (pts[cand] - pts[last]).CrossProd(pts[i] - pts[last]) > 0;\n      if (is_right == right) {\n        cand = i;\n      }\n    }\n\n    order.PB(cand);\n    avail[cand] = false;\n  }\n\n  int lst = 0;\n  while (!avail[lst]) { ++lst; }\n  order.PB(lst);\n\n  for (int x : order) { cout << x + 1 << \" \"; }\n  cout << \"\\n\";\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "geometry",
        "greedy",
        "math"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Winding polygonal line.json",
    "editorial_link": "https://codeforces.com/blog/entry/66993?locale=en",
    "editorial": "Let's define the value a=n?k2\n. We know, that (kmod2)=(nmod2)\n so a\n is integer number. Let's construct this string s\n: a\n symbols \"0\", 1\n symbol \"1\", a\n symbols \"0\", 1\n symbol \"1\", \u0085\n Let's prove, that this string satisfy the conditions. Let's note, that it's period is equal to (a+1)\n.\n\nLet the substring t\n be unique. Let's look at the only l\n for this substring. But if l>a+1\n, then l?(a+1)\n satisfy (as the left border of the string t\n occurrence), if l?n?(a+|t|)\n then l+(a+1)\n satisfy (because the period of s\n is equal to (a+1)\n, so shift on (a+1)\n don't change anything). So l?a+1\n and n?(a+|t|)<l\n, because in other case l\n can't be the only. So n?(a+|t|)<l?a+1\n so n?(a+|t|)<a+1\n so n?(a+|t|)?a\n so n?2?a?|t|\n so k?|t|\n.\n\nAs the example of the unique substring of length k\n we can take t=sa+1\u0085sn?a\n."
}