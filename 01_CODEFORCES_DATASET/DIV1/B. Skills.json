{
    "link": "https://codeforces.com//contest/613/problem/B",
    "problemId": "45532",
    "problem_idx": "B",
    "shortId": "613B",
    "contest_number": "613",
    "problem_submissions": {
        "D": [
            15370174,
            15369060,
            15371636,
            15370471,
            15379384,
            15362600,
            15363979,
            15354167,
            15368389,
            15426084,
            15425641,
            15365392,
            15373098,
            18779257,
            15368296,
            15377483,
            15371351
        ],
        "C": [
            15363274,
            15363231,
            15359913,
            15359671,
            15371545,
            15371994,
            15368974,
            15427099,
            15373779,
            15500484,
            15359086,
            15366208,
            15362711,
            15361056,
            15365561,
            15365370
        ],
        "B": [
            15355133,
            15358358,
            15354489,
            15354211,
            15353308,
            15367695,
            15366228,
            15357588,
            15366815,
            15355551,
            15352746,
            15361105,
            15353369,
            15358156,
            15356015,
            15356798
        ],
        "A": [
            15349386,
            15350249,
            15349384,
            15362764,
            15355920,
            15349371,
            15350969,
            15352662,
            15350106,
            15372771,
            15354161,
            15348878,
            15349502,
            15352202,
            15349256,
            15352650
        ],
        "E": [
            15391423,
            16723541,
            16067912,
            16067870
        ]
    },
    "name": "B. Skills",
    "statement": "Lesha plays the recently published new version of the legendary game\r\nhacknet. In this version character skill mechanism was introduced. Now,\r\neach player character has exactly skills. Each skill is represented by a\r\nnon-negative integer the current skill level. All skills have the same\r\nmaximum level .Along with the skills, global ranking of all players was\r\nadded. Players are ranked according to the so-called Force. The of a\r\nplayer is the sum of the following values: The number of skills that a\r\ncharacter has perfected (i.e., such that ), multiplied by coefficient .\r\nThe minimum skill level among all skills (), multiplied by coefficient .\r\nNow Lesha has hacknetian currency units, which he is willing to spend.\r\nEach currency unit can increase the current level of any skill by (if\r\nitâ€™s not equal to yet). Help him spend his money in order to achieve the\r\nmaximum possible value of the Force.\r\n",
    "solutions": [
        "#include<cassert>\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nconst int N = 100005;\n\nint n, A, cf, cm;\n\nlong long m;\n\nint a[N], b[N], ord[N];\n\nlong long sum[N];\n\nbool byA(const int &i, const int &j) {\n    return a[i] < a[j];\n}\n\nint main() {\n    scanf(\"%d%d%d%d\", &n, &A, &cf, &cm);\n    cin >> m;\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%d\", a + i);\n        b[i] = a[i];\n        ord[i] = i;\n    }\n    sort(ord, ord + n, byA);\n    sort(a, a + n);\n    for (int i = 0; i < n; ++i) {\n        sum[i + 1] = sum[i] + a[i];\n    }\n    long long ans = -1, ansi = -1, ansm = -1;\n    for (int i = 0, j = 0; i <= n; ++i) {\n        //i to n - 1 shall be all perfect then maxmize the minimum among 0 to i - 1\n        long long cost = 0, tmp = 0;\n        cost = (long long)A * (n - i) - (sum[n] - sum[i]);\n        if (cost > m) {\n            continue;\n        }\n        tmp += (n - i) * cf;\n        long long left = m - cost;\n        while (j < i && (long long)j * a[j] - sum[j] <= left) {\n            ++j;\n        }\n        int mins = 0;\n        if (j) {\n            mins = min((long long)A, (left + sum[j]) / j);\n        } else {\n            mins = A;\n        }\n        tmp += (long long)mins * cm;\n        if (tmp > ans) {\n            ans = tmp;\n            ansi = i;\n            ansm = mins;\n        }\n    }\n    cout << ans << endl;\n    long long cost = 0, mins = A, maxs = 0;\n    for (int i = 0; i < n; ++i) {\n        int delta = 0, u = b[ord[i]];\n        if (i >= ansi) {\n            delta = A - u;\n        } else {\n            delta = max(0ll, ansm - u);\n        }\n        b[ord[i]] += delta;\n        cost += delta;\n        mins = min(mins, (long long)b[ord[i]]);\n        maxs += b[ord[i]] == A;\n    }\n    for (int i = 0; i < n; ++i) {\n        printf(\"%d%c\", b[i], i == n - 1 ? '\\n' : ' ');\n    }\n    assert(cost <= m && mins * cm + maxs * cf == ans);\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "dp",
        "greedy",
        "sortings",
        "two pointers"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Skills.json",
    "editorial_link": "https://codeforces.com//blog/entry/22832",
    "editorial": "Let's save the original positions of skills and then sort the skills in non-increasing order (almost decreasing) by current level. We can always restore original order after.\n\nImagine that we have decided that we want to use the minimum level X and now we're choosing which skills we should bring to the maximum.\n\nAt first, let's rise all skills below X to level X, this will set some tail of array to X. But the original array was sorted, and this new change will not break the sort! So our array is still sorted.\n\nObviously, the skills we want to take to the maximum are the ones with highest current level. They are in the prefix of array. It is easy to show that any other selection is no better than this greedy one.\n\nNow we have shown that the optimal strategy is to max out the skills in some prefix. Now let's solve the problem.\n\nLet's iterate over prefix to max out, now on each iteration we need to know the highest minimum we can achieve, let's store the index of the first element outside the prefix such that it is possible to reach the minimum level ???arrindex.\n\nIt is easy to recalc this index, it slightly moves forward each turn and, after precalcing the sum of all array's tails, you can update it easily (just move it forward until the invariant above holds). And knowing this index is enough to calc the current highest possible minimum level (min(A,?arrindex?+?? sparemoney?/?(n?-?index)?).\n\nHow to restore the answer? Actually, all you need to know is the count of maximums to take and minimum level to reach.",
    "hint": []
}