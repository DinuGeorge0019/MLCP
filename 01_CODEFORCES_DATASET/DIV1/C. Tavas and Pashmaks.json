{
    "link": "https://codeforces.com//contest/536/problem/C",
    "problemId": "26044",
    "problem_idx": "C",
    "shortId": "536C",
    "contest_number": "536",
    "problem_submissions": {
        "A": [
            10719921,
            10706737,
            10707689,
            10711529,
            10709676,
            10707375,
            10709573,
            10707885,
            10708720,
            10706564,
            10708318,
            10709355,
            10713459,
            10725217,
            10725216,
            10725186,
            10708292,
            10706905,
            10741377,
            10713738
        ],
        "B": [
            10718101,
            10710644,
            10709758,
            10712675,
            10707296,
            10709351,
            10713281,
            10710208,
            10710709,
            10710095,
            10711429,
            10711411,
            10707838,
            10710289,
            10713790,
            10709325,
            10709558
        ],
        "E": [
            10716637,
            10733077,
            10733033,
            10731562,
            10741189
        ],
        "C": [
            10709726,
            10713480,
            10715583,
            10715941,
            10717945,
            10721487,
            10717235,
            10716651,
            10717759,
            10716150,
            10716761,
            10720841,
            10718866
        ],
        "D": [
            10717797,
            10717420,
            10719832,
            10715603,
            10716972,
            10718818,
            10719396,
            10719946,
            10724775,
            10717671
        ]
    },
    "name": "C. Tavas and Pashmaks",
    "statement": "This competition consists of two part: swimming and then running. People\r\nwill immediately start running meters after they finished swimming\r\nexactly meters. A winner is a such person that nobody else finishes\r\nrunning before him/her (there may be more than one winner).Before the\r\nmatch starts, Tavas knows that there are competitors registered for the\r\nmatch. Also, he knows that -th person’s swimming speed is meters per\r\nsecond and his/her running speed is meters per second. Unfortunately, he\r\ndoesn’t know the values of and , but he knows that they are real numbers\r\ngreater than .As a cheerleader, Tavas wants to know who to cheer up. So,\r\nhe wants to know all people that might win. We consider a competitor\r\nmight win if and only if there are some values of and such that with\r\nthese values, (s)he will be a winner.Tavas isn’t really familiar with\r\nprogramming, so he asked you to help him.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<iostream>\n#include<cstdlib>\n#include<vector>\n#include<string>\n#include<queue>\n#include<map>\ntypedef long long ll;\n#define mo 1000000007\nvoid gn(int &x){\n    char c;while((c=getchar())<'0'||c>'9');x=c-'0';\n    while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';\n}\nint qp(int a,ll b){\n    int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;\n}\nusing namespace std;\nint n;\nstruct ren{\n    int id,k,b;\n}a[222222];\nint cmp(const ren &x,const ren&y){\n    if(x.k==y.k)return x.b>y.b;\n    return x.k<y.k;\n}\nint ok[222222]={0};\nint stk[222222],top;\n\n\n#define b1 (a[stk[top-1]].b)\n#define b2 (a[stk[top]].b)\n#define b3 (a[i].b)\n#define k1 (a[stk[top-1]].k)\n#define k2 (a[stk[top]].k)\n#define k3 (a[i].k)\nint main()\n{\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++)scanf(\"%d%d\",&a[i].k,&a[i].b),a[i].id=i;\n    sort(a+1,a+1+n,cmp);\n    top=0;\n    for (int i=1;i<=n;i++){\n        if(i>1 && a[i].k==a[i-1].k)continue;\n        while(top>=2 && 1ll*(b1*b2-b1*b3)*(k2*k3-k1*k3)<1ll*(b1*b3-b2*b3)*(k1*k3-k1*k2))top--;\n        stk[++top]=i;\n    }\n    for (int i=1;i<=top;i++)ok[a[stk[i]].id]=1;\n    for (int i=1;i<top;i++){\n        if(a[stk[i]].b<=a[stk[i+1]].b)ok[a[stk[i]].id]=0;\n        else break;\n    }\n    for (int i=2;i<=n;i++){\n        if(a[i].k==a[i-1].k && a[i].b==a[i-1].b && ok[a[i-1].id])ok[a[i].id]=1;\n    }\n    for (int i=1;i<=n;i++){\n        if(ok[i])printf(\"%d \",i);\n    }\n    putchar('\\n');\n    return 0;\n}\n\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "math"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Tavas and Pashmaks.json",
    "editorial_link": "https://codeforces.com//blog/entry/17401",
    "editorial": "For each competitor put the point in the Cartesian plane. So, the time a\r\ncompetitor finishes the match is . Determine their convex hull(with\r\nmaximum number of points. i.e it doesn t matter to have radians angle).\r\nLet be the leftmost point on this convex hull (if there are more than\r\none, choose the one with minimum component). Similarly, let be the point\r\nwith minimum component on this convex hull (if there are more than one,\r\nconsider the leftmost). Proof: is the scalar product that is smaller if\r\nthe point is farther in the direction of . Itâs obvious that the\r\nfarthest points in some direction among the given set lie on a convex\r\nhull. can get any value that is vector in first quadrant. So we need the\r\npoints on the convex hull that we actually calculate (also we know that\r\nthe points on the right or top of the convex hull, are not in the\r\nanswer, because theyâre always losers). It s easy to see that the answer\r\nis the points on the path from to on the convex hull (bottom-left arc).\r\ni.e the bottom-left part of the convex hull. Time complexity: In this\r\nproblem, we recommend you to use integers. How ? Look at the code below\r\nCode by PrinceOfPersia In this code, function CROSS returns (itâs from\r\norder of , so there wonât be any overflows.) In double version, you\r\nshould have a very small epsilon. Code of double version by\r\nPrinceOfPersia Another Code With Lower Envelope of Lines by Haghani Java\r\nCode by Zlobober\r\n",
    "hint": []
}