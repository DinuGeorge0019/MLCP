{
    "link": "https://codeforces.com//contest/856/problem/E",
    "problemId": "121787",
    "problem_idx": "E",
    "shortId": "856E",
    "contest_number": "856",
    "problem_submissions": {
        "D": [
            30250286,
            30248673,
            30250147,
            30250541,
            30249770,
            30271191
        ],
        "C": [
            30249129,
            30248932,
            30248929,
            30249736,
            30251499,
            30249147,
            30250069,
            30249822
        ],
        "B": [
            30247472,
            30247324,
            30247880,
            30249381,
            30248057,
            30247570,
            30247709,
            30248446
        ],
        "A": [
            30246548,
            30246864,
            30247263,
            30246924,
            30246957,
            30246458,
            30246947,
            30246849
        ],
        "E": [
            30265847,
            30259642
        ]
    },
    "name": "E. Satellites",
    "statement": "Real Cosmic Communications is the largest telecommunication company on a\r\nfar far away planet, located at the very edge of the universe. RCC\r\nlaunches communication satellites.The planet is at the very edge of the\r\nuniverse, so its form is half of a circle. Its radius is , the ends of\r\nits diameter are points and . The line is the edge of the universe, so\r\none of the half-planes contains nothing, neither the planet, nor RCC\r\nsatellites, nor anything else. Let us introduce coordinates in the\r\nfollowing way: the origin is at the center of segment, axis coincides\r\nwith line , the planet is completely in half-plane.The satellite can be\r\nin any point of the universe, except the planet points. Satellites are\r\nnever located beyond the edge of the universe, nor on the edge itself\r\nthat is, they have coordinate . Satellite antennas are directed in such\r\nway that they cover the angle with the vertex in the satellite, and\r\nedges directed to points and . Let us call this area the satellite . The\r\npicture below shows coordinate system and coverage area of a satellite.\r\nWhen RCC was founded there were no satellites around the planet. Since\r\nthen there have been several events of one of the following types:\r\nlaunch the new satellite and put it to the point . Satellites never move\r\nand stay at the point they were launched. Let us assign the number to\r\nthe -th satellite in order of launching, starting from one. remove\r\nsatellite number . make an attempt to create a communication channel\r\nbetween satellites and . To create a communication channel a repeater is\r\nrequired. It must not be located inside the planet, but can be located\r\nat its half-circle border, or above it. Repeater must be in coverage\r\narea of both satellites and . To avoid signal interference, it must not\r\nbe located in coverage area of any other satellite. Of course, the\r\nrepeater must be within the universe, it must have a coordinate . For\r\neach attempt to create a communication channel you must find out whether\r\nit is possible.Sample test has the following satellites locations:\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nconst int N = 1 << 19;\n\nstruct pt {\n    int x, y;\n\n    pt() {}\n    pt(int _x, int _y) : x(_x), y(_y) {}\n\n    pt operator- (const pt &p) const {\n        return pt(x - p.x, y - p.y);\n    }\n\n    ll operator* (const pt &p) const {\n        return 1LL * x * p.y - 1LL * y * p.x;\n    }\n\n    ll operator% (const pt &p) const {\n        return 1LL * x * p.x + 1LL * y * p.y;\n    }\n\n    bool operator< (const pt &p) const {\n        if (x != p.x) return x < p.x;\n        return y < p.y;\n    }\n\n    bool operator== (const pt &p) const {\n        return x == p.x && y == p.y;\n    }\n};\n\nvoid print(vector<string> a) {\n    for (string s : a) {\n        printf(\"%s\\n\", s.c_str());\n    }\n}\n\nstruct segtree {\n    int N;\n    vector<int> t;\n\n    segtree(int n) {\n        N = 1;\n        while (N < n) N <<= 1;\n        t.assign(2 * N, -1);\n    }\n\n    void upd(int x, int y) {\n        x += N;\n        t[x] = y;\n        while (x > 1) {\n            x >>= 1;\n            t[x] = max(t[x * 2], t[x * 2 + 1]);\n        }\n    }\n\n    int get(int l, int r) {\n        int res = -1;\n        l += N;\n        r += N;\n        while (l <= r) {\n            if (l & 1) res = max(res, t[l]);\n            if (!(r & 1)) res = max(res, t[r]);\n            l = (l + 1) >> 1;\n            r = (r - 1) >> 1;\n        }\n        return res;\n    }\n};\n\nvector<string> solve(vector<pair<int, pair<int, int> > > a, int r) {\n    vector<pt> pts;\n    for (int i = 0; i < (int)a.size(); i++) {\n        if (a[i].first == 1) {\n            pts.push_back(pt(a[i].second.first, a[i].second.second));\n        }\n    }\n    sort(pts.begin(), pts.end());\n    pts.resize(unique(pts.begin(), pts.end()) - pts.begin());\n\n    vector<pt> p(2);\n    vector<vector<pt> > b(2);\n    vector<function<bool(const pt&, const pt&)> > cmp(2), cmpe(2);\n    p[0] = pt(-r, 0);\n    p[1] = pt(+r, 0);\n\n\n    cmp[0] = [&](const pt &x, const pt &y) {\n        return ((x - p[0]) * (y - p[0])) > 0;\n    };\n    cmp[1] = [&](const pt &x, const pt &y) {\n        return ((x - p[1]) * (y - p[1])) < 0;\n    };\n    for (int i = 0; i < 2; i++) {\n        b[i] = pts;\n        cmpe[i] = [&](const pt &x, const pt &y) {\n            return ((x - p[i]) * (y - p[i])) == 0;\n        };\n        sort(b[i].begin(), b[i].end(), cmp[i]);\n        b[i].resize(unique(b[i].begin(), b[i].end(), cmpe[i]) - b[i].begin());\n\n    }\n    int m = pts.size();\n    vector<pair<int, int> > c(m);\n    for (int i = 0; i < m; i++) {\n        c[i].first = lower_bound(b[0].begin(), b[0].end(), pts[i], cmp[0]) - b[0].begin();\n        c[i].second = lower_bound(b[1].begin(), b[1].end(), pts[i], cmp[1]) - b[1].begin();\n    }\n\n    vector<pair<pair<int, int>, int> > vv;\n    for (int i = 0; i < m; i++) {\n        vv.push_back({c[i], i});\n    }\n    sort(vv.begin(), vv.end());\n    vector<int> o(m);\n    for (int i = 0; i < m; i++) o[vv[i].second] = i;\n\n    segtree t(m);\n    vector<char> alive(m);\n    auto toggle = [&](int id) {\n        if (alive[id]) t.upd(o[id], -1);\n        else t.upd(o[id], c[id].second);\n        alive[id] ^= 1;\n    };\n    vector<int> id(1, -1);\n    vector<string> ans;\n    for (auto o : a) {\n        if (o.first == 1) {\n            pt cur = pt(o.second.first, o.second.second);\n            int cid = lower_bound(pts.begin(), pts.end(), cur) - pts.begin();\n            assert(pts[cid] == cur);\n            id.push_back(cid);\n            toggle(cid);\n        }\n        if (o.first == 2) {\n            int q = o.second.first;\n            assert(alive[id[q]]);\n            toggle(id[q]);\n        }\n        if (o.first == 3) {\n            int u = id[o.second.first];\n            int v = id[o.second.second];\n            assert(u != v && alive[u] && alive[v]);\n            toggle(u);\n            toggle(v);\n            pair<int, int> qq = {min(c[u].first, c[v].first), min(c[u].second, c[v].second)};\n            int fr = lower_bound(vv.begin(), vv.end(), make_pair(make_pair(qq.first, -1), -1)) - vv.begin();\n            bool ok = t.get(fr, m - 1) < qq.second && ((pts[u] - p[0]) % (pts[v] - p[1])) >= 0 && ((pts[u] - p[1]) % (pts[v] - p[0])) >= 0;\n            ans.push_back(ok ? \"YES\" : \"NO\");\n            toggle(u);\n            toggle(v);\n        }\n    }\n    return ans;\n}\n\nint main() {\n#ifdef HOME\n    freopen(\"in\", \"r\", stdin);\n#endif\n    int r, n;\n    scanf(\"%d%d\", &r, &n);\n    vector<pair<int, pair<int, int> > > a(n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d%d\", &a[i].first, &a[i].second.first);\n        if (a[i].first != 2) scanf(\"%d\", &a[i].second.second);\n    }\n    print(solve(a, r));\n}"
    ],
    "input": "",
    "output": "",
    "tags": [],
    "dificulty": "3100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Satellites.json",
    "editorial_link": "https://codeforces.com//blog/entry/54452",
    "editorial": null
}