{
    "link": "https://codeforces.com//contest/843/problem/C",
    "problemId": "119863",
    "problem_idx": "C",
    "shortId": "843C",
    "contest_number": "843",
    "problem_submissions": {
        "D": [
            86210957,
            86210473,
            29756854,
            34937670,
            29781848,
            29781833,
            29781501,
            29855864,
            30128230,
            42158478,
            42158439,
            30022222,
            29772717
        ],
        "C": [
            29753044,
            29759187,
            29746479,
            29758195,
            29749173,
            29747919,
            29747700,
            29750057,
            29750292,
            29751827,
            29751575,
            29754184,
            29754916,
            29751833,
            29755015,
            29755103,
            29756089,
            29752710
        ],
        "E": [
            29748360,
            29749250,
            29756319,
            29752227,
            29761679,
            29956114,
            29762394,
            35205556,
            29781472,
            29754090,
            29761229,
            29762324,
            42187009
        ],
        "A": [
            29740862,
            29750546,
            29737212,
            29736679,
            29736752,
            29736447,
            29736902,
            29737823,
            29737375,
            29738506,
            29737473,
            29738082,
            29739251,
            29737566,
            29736802,
            29738724,
            29737891,
            29739246,
            29738315
        ],
        "B": [
            29755133,
            29757158,
            29758427,
            29740669,
            29739815,
            29741358,
            29743424,
            29741532,
            29745306,
            29741855,
            29742825,
            29744139,
            29742831,
            29742430,
            29744161,
            29746567,
            29746080,
            29746122
        ]
    },
    "name": "C. Upgrading Tree",
    "statement": "You are given a tree with vertices and you are allowed to perform\r\ntransformations on it. Transformation is defined by three vertices and\r\nconsists of deleting edge and adding edge . Transformation could be\r\nperformed if all the following conditions are satisfied: There is an\r\nedge in the current tree. After the transformation the graph remains a\r\ntree. After the deletion of edge the tree would consist of two connected\r\ncomponents. Let\u2019s denote the set of nodes in the component containing\r\nvertex by , and the set of nodes in the component containing vertex by .\r\nThen condition should be satisfied, i.e. the size of the component with\r\nshould be strictly larger than the size of the component with . You\r\nshould the sum of squared distances between all pairs of vertices in a\r\ntree, which you could get after no more than transformations and output\r\nany sequence of transformations leading initial tree to such state.Note\r\nthat you don\u2019t need to minimize the number of operations. It is\r\nnecessary to minimize only the sum of the squared distances.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#ifndef LOCAL\n#define cerr dolor_sit_amet\n#endif\n\n#define mp make_pair\n#define sz(x) ((int)((x).size()))\n#define X first\n#define Y second\n\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\ntypedef pair < int , int > ipair;\ntypedef pair < ll , ll > lpair;\nconst int IINF = 0x3f3f3f3f;\nconst ll LINF = 0x3f3f3f3f3f3f3f3fll;\nconst double DINF = numeric_limits<double>::infinity();\nconst int MOD = 1000000007;\nconst double EPS = 1e-9;\nconst int DX[] = { 1,  0, -1,  0,  1, -1,  1, -1};\nconst int DY[] = { 0,  1,  0, -1,  1, -1, -1,  1};\nll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }\nll sqr(ll x) { return x*x; } ll sqr(int x) { return (ll)x*x; }\ndouble sqr(double x) { return x*x; } ld sqr(ld x) { return x*x; }\nmt19937 mmtw(960172);\nll rnd(ll x, ll y) { static uniform_int_distribution<ll> d; return d(mmtw) % (y - x + 1) + x; }\n\n// ========================================================================= //\n\nconst int N = 200179;\n\nint n;\nvector < int > e[N];\nstruct Tree {\n    int root;\n    int curRoot;\n    int par;\n    vector < ipair > vs;\n};\nvector < Tree > trees;\n\nstruct Triple {\n    int x, y, z;\n};\nvector < Triple > ans;\n\nint c1 = -1, c2 = -1;\n\nint dfs1(int v, int p = -1) {\n    int s = 1;\n    for (int nv : e[v])\n        if (nv != p)\n            s += dfs1(nv, v);\n    if (c1 == -1 && s*2 >= n) {\n        c1 = v;\n        if (s * 2 == n)\n            c2 = p;\n        else\n            c2 = -1;\n    }\n    return s;\n}\n\nvoid dfs2(int v, int p) {\n    for (int nv : e[v])\n        if (nv != p)\n            dfs2(nv, v);\n    trees.back().vs.push_back({v, p});\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n - 1; ++i) {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        --x;\n        --y;\n        e[x].push_back(y);\n        e[y].push_back(x);\n    }\n    if (n <= 3) {\n        cout << \"0\\n\";\n        return 0;\n    }\n\n    dfs1(0);\n    for (int nv : e[c1]) {\n        if (nv == c2)\n            continue;\n        trees.emplace_back();\n        trees.back().root = nv;\n        trees.back().curRoot = nv;\n        trees.back().par = c1;\n        dfs2(nv, c1);\n    }\n    if (c2 != -1) {\n        for (int nv : e[c2]) {\n            if (nv == c1)\n                continue;\n            trees.emplace_back();\n            trees.back().root = nv;\n            trees.back().curRoot = nv;\n            trees.back().par = c2;\n            dfs2(nv, c2);\n        }\n    }\n\n    for (Tree &tree : trees) {\n        for (ipair pp : tree.vs) {\n            int v = pp.X, p = pp.Y;\n            if (v == tree.root)\n                break;\n            ans.push_back({tree.par, tree.curRoot, v});\n            tree.curRoot = v;\n            ans.push_back({v, p, tree.root});\n        }\n        ans.push_back({tree.par, tree.curRoot, tree.root});\n    }\n\n    cout << sz(ans) << \"\\n\";\n    for (Triple t : ans)\n        cout << t.x+1 << \" \" << t.y+1 << \" \" << t.z+1 << \"\\n\";\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "math",
        "trees"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Upgrading Tree.json",
    "editorial_link": "https://codeforces.com//blog/entry/54029",
    "editorial": "A centroid-vertex remains a centroid during such process. If we have two\r\ncentroids in a tree, the edge between them couldn\u00e2\u0080\u0099t change.The\r\ncomponents that are attached to the centroid can not change centroid\r\nthey attached to or separate to several components. Using the size of\r\nthe component operations, one could turn it into a bamboo, then using\r\nthe size of the component operations one could turn it into a hedgehog\r\nsuspended from its centroid. The proof that the sum of squares of\r\ndistances couldn\u00e2\u0080\u0099t be less is an additional exercise.Complexity of\r\nsolution is\r\n"
}