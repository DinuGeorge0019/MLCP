{
    "link": "https://codeforces.com//contest/372/problem/C",
    "problemId": "4184",
    "problem_idx": "C",
    "shortId": "372C",
    "contest_number": "372",
    "problem_submissions": {
        "D": [
            5426977,
            5430216,
            5428682,
            5430119,
            5427511,
            5430570,
            5430674,
            5430157,
            5432457,
            5430283,
            5428509,
            5431356,
            5431746,
            5438335,
            5439009,
            5430897,
            5431697,
            5427479,
            5431615,
            5437474
        ],
        "C": [
            5425620,
            5423917,
            5425367,
            5426752,
            5429971,
            5426458,
            5425626,
            5427101,
            5430049,
            5423463,
            5427437,
            5427041,
            5428996,
            5429237,
            5430350,
            5429420,
            5425660,
            5426153
        ],
        "B": [
            5423489,
            5421838,
            5424137,
            5424220,
            5424353,
            5423172,
            5423669,
            5423082,
            5424372,
            5425505,
            5428480,
            5425133,
            5425580,
            5425422,
            5424402,
            5431761,
            5424978,
            5423136,
            5424295
        ],
        "A": [
            5421957,
            5420847,
            5421730,
            5421129,
            5421031,
            5420888,
            5422498,
            5422219,
            5421566,
            5422639,
            5425833,
            5421459,
            5427633,
            5423077,
            5420877,
            5428458,
            5422847,
            5420856,
            5421782
        ],
        "E": [
            5430957
        ]
    },
    "name": "C. Watching Fireworks is Fun",
    "statement": "A festival will be held in a town’s main street. There are sections in\r\nthe main street. The sections are numbered through from left to right.\r\nThe distance between each adjacent sections is .In the festival\r\nfireworks will be launched. The -th () launching is on time at section .\r\nIf you are at section () at the time of -th launching, you’ll gain\r\nhappiness value (note that the happiness value might be a negative\r\nvalue).You can move up to length units in a unit time interval, but it’s\r\nprohibited to go out of the main street. Also you can be in an arbitrary\r\nsection at initial time moment (time equals to ), and want to maximize\r\nthe sum of happiness that can be gained from watching fireworks. Find\r\nthe maximum total happiness.Note that two or more fireworks can be\r\nlaunched at the same time.\r\n",
    "solutions": [
        "#include <cstdlib>\n#include <cctype>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n//#include <iostream>\n#include <sstream>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <fstream>\n#include <numeric>\n#include <iomanip>\n#include <bitset>\n#include <list>\n#include <stdexcept>\n#include <functional>\n#include <utility>\n#include <ctime>\n#include <cassert>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<(int)n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\n#define ACCU accumulate\ntypedef vector<int> VI;\ntypedef vector<string> VS;\ntypedef vector<double> VD;\ntypedef long long ll;\ntypedef pair<int,int> PII;\ntypedef pair<ll,ll> PLL;\ntypedef vector<ll> VL;\nconst ll mod=1000000007,inf=(1ll<<60);\nconst double eps=1e-9;\nconst double pi=acos(0)*2;\nll powmod(ll a,ll b) {ll res=1;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll powmod(ll a,ll b,ll mod) {ll res=1;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n\nconst int N=150100;\nll dp[N],pd[N],ans;\nint q[N],n,m,d,prt,a[567],b[567],t[567];\n\nvoid transfer(int leg,int a,int b) {\n\tint h=1,t=0;\n\tmemset(q,0,sizeof(q));\n\trep(i,0,leg) {\n\t\twhile (h<=t&&dp[i]>dp[q[t]]) --t;\n\t\tq[++t]=i;\n\t}\n\trep(i,0,n) {\n\t\tif (i+leg<n) {\n\t\t\twhile (h<=t&&dp[i+leg]>dp[q[t]]) --t;\n\t\t\tq[++t]=i+leg;\n\t\t}\n\t\twhile (h<=t&&i-q[h]>leg) h++;\n\t\tpd[i]=dp[q[h]];\n\t}\n\trep(i,0,n) pd[i]+=b-abs(a-i);\n}\nint main() {\n\tscanf(\"%d%d%d\",&n,&m,&d);\n\tprt=1;\n\trep(i,0,m) {\n\t\trep(j,0,n) pd[j]=-inf;\n\t\tscanf(\"%d%d%d\",a+i,b+i,t+i);--a[i];\n\t\ttransfer(min(1ll*(t[i]-prt)*d,1ll*n),a[i],b[i]);\n\t\trep(j,0,n) dp[j]=pd[j];prt=t[i];\n\t}\n\tans=-inf;\n\trep(i,0,n) ans=max(ans,pd[i]);\n\tprintf(\"%I64d\\n\",ans);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "math"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Watching Fireworks is Fun.json",
    "editorial_link": "https://codeforces.com/blog/entry/9944",
    "editorial": "I think most of the participants came up with simple DP algorithm :\r\ndp[i][j] := the maximum happiness value that you can gain when youâre on\r\npoisition j at i th launching. Each value in table can be calculated by\r\nthis formula : where . If you look up for all k, since the tableâs size\r\nis O(mn), the overall complexity will be O(mn^2), and its too slow to\r\nsolve the problem. Now, Weâre going to make this algorithm faster. Since\r\nthe second term in the DP formula doesnât depend on k, you have to find\r\nmaximum value of dp[i 1][j + k] faster. Using segment tree or sparse\r\ntable can fasten finding from O(n) to O(log n), but the overall\r\ncomplexity is still O(mn log n), and the solution will get time limit\r\nexceeded. Intended solution uses sliding window maximum (see this page\r\nhttp://people.cs.uct.ac.za/Â ksmith/articles/sliding_window_minimum.html)\r\nfor some information), since the interval is independent for all the\r\nfireworks. It can be implemented by simple array or deque. This will\r\nspeed up to calculate formula, and overall complexity will be O(mn).\r\nkcm1700 has submitted faster solution than our intended one during\r\ncontest! Itâs complexity is O(m^2). Please read his comment\r\n(http://codeforces.com/blog/entry/9907comment-153963) for further\r\ninformation. My solution : http://ideone.com/Unrfaa kcm1700âs solution :\r\nhttp://codeforces.com/contest/372/submission/5431649\r\n",
    "hint": []
}