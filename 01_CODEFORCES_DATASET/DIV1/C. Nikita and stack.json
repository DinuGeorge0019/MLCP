{
    "link": "https://codeforces.com//contest/759/problem/C",
    "problemId": "89812",
    "problem_idx": "C",
    "shortId": "759C",
    "contest_number": "759",
    "problem_submissions": {
        "D": [
            24042663,
            24044352,
            24045382,
            24043506,
            24045238,
            24043490,
            24042979,
            24045976,
            24046805,
            24046489,
            24045414,
            24046878,
            24045586,
            24044218,
            24046750,
            24048837,
            24048930,
            24045107,
            24049310,
            24047941
        ],
        "C": [
            24039992,
            24041637,
            24042097,
            24039244,
            24042431,
            24038977,
            24045787,
            24042805,
            24042270,
            24042690,
            24043790,
            24042556,
            24043437,
            24048532,
            24043622,
            24043222,
            24044113,
            29763466,
            29763430,
            24060556,
            24048425,
            24043154,
            24044032
        ],
        "B": [
            24037454,
            24038457,
            24039020,
            24040925,
            24038375,
            24044395,
            24038784,
            24039274,
            24038903,
            24039124,
            24039288,
            24039629,
            24040886,
            24038009,
            24039848,
            24039613,
            24036880,
            24038463,
            24040006,
            24040241
        ],
        "A": [
            24036272,
            24036509,
            24037538,
            24045297,
            24036223,
            24045401,
            24036423,
            24037461,
            24037032,
            24036975,
            24036471,
            24037688,
            24038305,
            24036140,
            24037910,
            24037165,
            24039125,
            24036572,
            24037614,
            24038031
        ],
        "E": [
            24052445,
            24051804,
            24055034
        ]
    },
    "name": "C. Nikita and stack",
    "statement": "Nikita has a stack. A stack in this problem is a data structure that\r\nsupports two operations. Operation puts an integer on the top of the\r\nstack, and operation deletes the top integer from the stack, i. e. the\r\nlast added. If the stack is empty, then the operation does\r\nnothing.Nikita made operations with the stack but forgot them. Now\r\nNikita wants to remember them. He remembers them one by one, on the -th\r\nstep he remembers an operation he made -th. In other words, he remembers\r\nthe operations in order of some permutation . After each step Nikita\r\nwants to know what is the integer on the top of the stack after\r\nperforming the operations he have already remembered, in the\r\ncorresponding order. Help him!\r\n",
    "solutions": [
        "#include <cstdio>\n#include <algorithm>\n\nconst int o = 1 << 17;\n\nusing namespace std;\n\nstruct node {\n\tint sum, min;\n} IT[1 << 18];\nint a[100001];\n\nint main() {\n\tint i, j, k, l, n, t;\n\tscanf(\"%d\", &n);\n\twhile (n--) {\n\t\tscanf(\"%d%d\", &i, &j);\n\t\tif (j) {\n\t\t\tscanf(\"%d\", &k);\n\t\t\ta[i] = k;\n\t\t\tl = i + o;\n\t\t\tIT[l].sum = 1;\n\t\t\twhile (l >>= 1) {\n\t\t\t\tIT[l].sum = IT[l << 1].sum + IT[l << 1 | 1].sum;\n\t\t\t\tIT[l].min = min(IT[l << 1].min, IT[l << 1].sum + IT[l << 1 | 1].min);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tl = i + o;\n\t\t\tIT[l].sum = -1;\n\t\t\twhile (l >>= 1) {\n\t\t\t\tIT[l].sum = IT[l << 1].sum + IT[l << 1 | 1].sum;\n\t\t\t\tIT[l].min = min(IT[l << 1].min, IT[l << 1].sum + IT[l << 1 | 1].min);\n\t\t\t}\n\t\t}\n\t\tl = 1;\n\t\tt = IT[1].sum - 1;\n\t\tif (IT[1].min > t) {\n\t\t\tputs(\"-1\");\n\t\t\tcontinue;\n\t\t}\n\t\twhile (l < o) {\n\t\t\tif (IT[l << 1].sum + IT[l << 1 | 1].min > t) l = l << 1;\n\t\t\telse {\n\t\t\t\tt -= IT[l << 1].sum;\n\t\t\t\tl = l << 1 | 1;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\", a[l - o]);\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Nikita and stack.json",
    "editorial_link": "https://codeforces.com//blog/entry/49946",
    "editorial": "Hint 1: look at the operations in the reverse order. Let's count the balance for each prefix, i.e. the difference between the number of push(x) operations and the number of pop() operations.\n\nHint 2: Now we have to find the first operation that makes balance positive. This can be done using segment tree.\n\nSolution: Let's reverse the order of operations. Now we can see that on the top of the stack will be the first integer added with push(x) such that the number of pop() operations and the number of push(x) operations before this operation is equal, if there is one. Let's keep for each position a value called balance: the number of push(x) operations minus the number of pop() operations before and including this position. To find the answer, we should find the first position with posivive balance. When we add an operation, we should add -1 or 1 to all posisions starting with the position of the operation, depending on the type of the operation.\n\nTo cope with the operations quickly, we can store the balance in a segment tree. The addition is done with lazy propogation, finding the first position with positive balance can be done in two ways. First way is to perform binary search on the answer and then query the segment tree for maximim on some prefix. The compexity is  per query then. The other way is to walk down the tree always moving to the leftmost son with positive maximum. When we reach the leaf, the position of this leaf is the answer. The complexity is  per query."
}