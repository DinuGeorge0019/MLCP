{
    "link": "https://codeforces.com//contest/269/problem/D",
    "problemId": "2580",
    "problem_idx": "D",
    "shortId": "269D",
    "contest_number": "269",
    "problem_submissions": {
        "D": [
            3053877,
            3055065,
            3054931,
            3054689,
            3056716,
            3055520,
            3053752,
            3054402,
            3055502,
            3054293,
            3057110,
            3057596,
            3056040,
            3056997,
            3057208,
            3053865,
            3055067,
            3057592
        ],
        "C": [
            3050826,
            3048752,
            3050407,
            3050153,
            3051253,
            3053071,
            3055637,
            3051073,
            3052131,
            3049037,
            3051392,
            3054561,
            3051427,
            3053470,
            3051843,
            3058738,
            3051490
        ],
        "B": [
            3048348,
            3051384,
            3045845,
            3048240,
            3048947,
            3047226,
            3049184,
            3049029,
            3049342,
            3056628,
            3048885,
            3048750,
            3050057,
            3054096,
            3048888,
            3049991,
            3050429
        ],
        "A": [
            3047341,
            3050569,
            3047430,
            3046474,
            3046278,
            3047911,
            3047245,
            3055271,
            3046848,
            3055425,
            3047549,
            3047676,
            3051951,
            3048080,
            3058340,
            3045802,
            3047292,
            3046740
        ]
    },
    "name": "D. Maximum Waterfall",
    "statement": "Emuskald was hired to design an artificial waterfall according to the\r\nlatest trends in landscape architecture. A modern artificial waterfall\r\nconsists of multiple horizontal panels affixed to a wide flat wall. The\r\nwater flows down the top of the wall from panel to panel until it\r\nreaches the bottom of the wall.The wall has height and has panels on the\r\nwall. Each panel is a horizontal segment at height which begins at and\r\nends at . The -th panel connects the points and of the plane. The top of\r\nthe wall can be considered a panel connecting the points and .\r\nSimilarly, the bottom of the wall can be considered a panel connecting\r\nthe points and . No two panels share a common point.Emuskald knows that\r\nfor the waterfall to be aesthetically pleasing, it can flow from panel\r\nto panel () only if the following conditions hold: (horizontal\r\nprojections of the panels overlap); (panel is below panel ); there is no\r\nsuch panel that the first two conditions hold for the pairs and . Then\r\nthe for is equal to , the length of their horizontal projection\r\noverlap.Emuskald has decided that in his waterfall the water will flow\r\nin a single path from top to bottom. If water flows to a panel (except\r\nthe bottom of the wall), the water will fall further to lower panel. The\r\ntotal amount of water flow in the waterfall is then defined as the\r\nminimum horizontal projection overlap between two consecutive panels in\r\nthe path of the waterfall. Formally: the waterfall consists of a single\r\npath of panels ; the flow of the waterfall is the minimum flow in the\r\npath . To make a truly great waterfall Emuskald must maximize this water\r\nflow, but there are too many panels and he is having a hard time\r\nplanning his creation. Below is an example of a waterfall Emuskald\r\nwants: Help Emuskald maintain his reputation and find the value of the\r\nmaximum possible water flow.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <set>\n#include <map>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <cassert>\n#include <ctime>\n#include <algorithm>\n#include <list>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <cstdlib>\n#include <cstdio>\n#include <iterator>\n#include <functional>\n#include <bitset>\n#define mp make_pair\n#define pb push_back\n\n#if ( _WIN32 || __WIN32__ )\n    #define LLD \"%I64d\"\n#else\n    #define LLD \"%lld\"\n#endif\n\nusing namespace std;\n\n#define TASKNAME \"D\"\n\ntypedef long long ll;\ntypedef long double ld;\n\nconst int INF = 2100000000;\n\nconst int MAXN = 210000;\n\nvector<int> g[MAXN];\nvector<int> c[MAXN];\n\nstruct event{\n    int y;\n    int x;\n    bool type;\n    int id;\n    event(){}\n    event(int y,int x,bool type,int id):y(y),x(x),type(type),id(id){};\n    bool operator<(const event& a) const{\n        if (x != a.x) return x < a.x;\n        if (type != a.type) return type < a.type;\n        return id < a.id;\n    }\n};\n\nvector<event> ev;\n\nint l[MAXN];\nint r[MAXN];\nint n;\n\nint get(int a,int b){\n    return min(r[a],r[b]) - max(l[a],l[b]);\n}\n\nint ans[MAXN];\n\nint dfs(int v){\n    if (ans[v] != -1)\n        return ans[v];\n    if (v == 1)\n        return INF;\n    int& ans = ::ans[v];\n    ans = 0;\n    for (int i = 0; i < (int)g[v].size(); i++)\n        ans = max(ans, min(c[v][i],dfs(g[v][i])));\n    return ans;\n}\n\n\nint main(){\n  #ifdef LOCAL\n    freopen(TASKNAME\".in\",\"r\",stdin);\n    freopen(TASKNAME\".out\",\"w\",stdout);\n  #endif\n\n  int t;\n  scanf(\"%d %d\",&n,&t);\n\n\n\n  n += 2;\n\n  l[0] = l[1] = -(1<<30);\n  r[0] = r[1] = (1<<30);\n\n  for (int i = 2; i < n; i++){\n    int h;\n    scanf(\"%d %d %d\",&h,&l[i],&r[i]);\n    ev.pb(event(h,l[i],1,i));\n    ev.pb(event(h,r[i],0,i));\n  }\n\n  sort(ev.begin(),ev.end());\n\n  set<pair<int,int> > s;\n  s.insert(mp(t,0));\n  s.insert(mp(0,1));\n\n  for (int i = 0; i < (int)ev.size(); i++){\n    if (ev[i].type == 0){\n        s.erase(mp(ev[i].y,ev[i].id));\n    } else {\n        set<pair<int,int> >::iterator iter = s.insert(mp(ev[i].y,ev[i].id)).first;\n        int down = (--iter)->second;\n        ++iter;\n        int up = (++iter)->second;\n        if (g[up].size() && g[up].back() == down){\n//              cerr <<\"- \"<<up <<\" \"<<down << endl;\n            g[up].pop_back();\n            c[up].pop_back();\n        }\n//          cerr <<\"+ \"<<up <<\" \"<<ev[i].id <<\" \"<<get(ev[i].id,up)<<endl;\n        g[up].pb(ev[i].id);\n        c[up].pb(get(ev[i].id,up));\n//          cerr <<\"+ \"<<ev[i].id <<\" \"<<down <<\" \"<<get(ev[i].id,up)<<endl;\n\n        g[ev[i].id].pb(down);\n        c[ev[i].id].pb(get(ev[i].id,down));\n    }\n  }\n\n  memset(ans,-1,sizeof(ans));\n  \n  cout << dfs(0) << endl;      \n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "graphs",
        "sortings"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Maximum Waterfall.json",
    "editorial_link": "https://codeforces.com//blog/entry/6596",
    "editorial": "We will use a sweepline algorithm to solve this task. This horizontal sweepline runs from bottom to top, and holds the parts of the segments that are visible from the line this sweepline is currently at. Each part also holds the reference to its original segment. The sweepline itself is implemented with a binary search tree.\n\nThe events of the sweep are the segments. When a new segment is found, we want to find all the lower segments that we can direct the flow onto from this segment. These can be only the original segments of the parts currently in the sweepline whose projections overlap with this segment. Then we iterate over all such parts p (finding the first such part is an  operation). How do we know that we can direct the flow onto p? Observe that if there is some segment that prevents this, there should be also a part q in the sweepline that also can be seen from the current segment. And since the projections of all three segments overlap, this part can only be directly to the left or to the right of p in the binary search tree. So we just check whether the original segments of the two parts next to p prevent the flow from the current segment to the original segment of p.\n\nAfterwards, we remove all such parts from the sweepline, and insert a new part corresponding to the new segment. If the new segment only partially covered an existing part, we reinsert the remaining portion of that part. There are at most two such portions Â— one on each side of the segment. Thus each segment inserts at most 3 new parts and the size of the sweepline is O(n). Each part is handled just once before removal, so the total time of such operations is .\n\nOnce we know we can direct the flow through  we can immediately update the maximum downwards flow of a:\n\nfa?=?max(fa,?min(fb,?min(ra,?rb)?-?max(la,?lb)))\nWhen we reach the top, ftop will be the answer.",
    "hint": []
}