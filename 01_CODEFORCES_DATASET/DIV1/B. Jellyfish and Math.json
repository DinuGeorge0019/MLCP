{
    "link": "https://codeforces.com//contest/1874/problem/B",
    "problemId": "2236837",
    "problem_idx": "B",
    "shortId": "1874B",
    "contest_number": "1874",
    "problem_submissions": {
        "F": [
            226041334,
            226055202,
            226083158,
            226054781,
            226061315,
            226045179,
            226057161,
            226024417,
            226094016,
            226151126,
            226979730,
            226372437,
            226704730,
            226099033,
            226098861,
            226001871
        ],
        "B": [
            225998357,
            225944596,
            225961498,
            226022662,
            225970503,
            226048661,
            225965106,
            225956535,
            225974109,
            226024200,
            226979960,
            226057337,
            225972372,
            225968693,
            225962068,
            226040739,
            225981051,
            226047279,
            226046003,
            225948785
        ],
        "D": [
            225989950,
            226004287,
            225983656,
            225994935,
            225998958,
            226008015,
            225977564,
            226002115,
            225985427,
            226003081,
            225989658,
            226979804,
            225989175,
            226003010,
            226023529,
            226002830,
            226078484,
            226078353,
            226002716,
            226024255,
            226018418,
            226137164,
            225986804
        ],
        "E": [
            225973607,
            225981897,
            226000134,
            225978662,
            226074388,
            226073614,
            226073223,
            226072631,
            226071563,
            226069387,
            226068777,
            226021358,
            225958738,
            226070894,
            225983588,
            226039851,
            226021998,
            226007010,
            226979776,
            226006499,
            226036184,
            226038920,
            226053631,
            226068817,
            226063126,
            226059742,
            226057237
        ],
        "C": [
            225967620,
            225968755,
            225972644,
            225961410,
            225983858,
            225989707,
            225987635,
            225970993,
            225986658,
            225975231,
            226979908,
            225973609,
            225986638,
            225980254,
            225971024,
            227431342,
            225959672,
            225996237,
            225972869,
            226057682,
            225972171
        ],
        "A": [
            225936409,
            225922035,
            225921764,
            225934682,
            225931922,
            225937474,
            225923760,
            225922674,
            225923828,
            225922214,
            226979999,
            225944454,
            225937163,
            225922982,
            225921695,
            226083093,
            226083061,
            225937017,
            225941961,
            225925562,
            226022851,
            225923156
        ],
        "G": [
            226095099,
            226164597,
            226979660,
            226967841,
            230907178
        ]
    },
    "name": "B. Jellyfish and Math",
    "statement": "Jellyfish is given the non-negative integers a, b, c, d and m. Initially\r\n(x,y)=(a,b). Jellyfish wants to do several operations so that\r\n(x,y)=(c,d).For each operation, she can do one of the following: x := x\r\n,\r\n&\r\n,y, x := x\r\n,|\r\n,y, y := x\r\noplus y, y := y\r\noplus m. Here\r\n& denotes the bitwise AND operation, | denotes the bitwise OR operation\r\nand\r\noplus denotes the bitwise XOR operation.Now Jellyfish asks you for the\r\nminimum number of operations such that (x,y)=(c,d).\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define L(i, j, k) for(int i = (j); i <= (k); ++i)\n#define R(i, j, k) for(int i = (j); i >= (k); --i)\n#define ll long long \n#define vi vector < int > \n#define sz(a) ((int) (a).size())\n#define ll long long \n#define ull unsigned long long\n#define me(a, x) memset(a, x, sizeof(a)) \nusing namespace std;\nconst int N = 1e5 + 7;\nint a, b, c, d, m;\nint vis[1 << 16]; \nint dis[N];\nvi go[1 << 16];\nint state[N], P[N], val[N][8], all;\nvoid init() {\n\tL(sub, 0, (1 << 16) - 1) {\n\t\tL(type, 0, 3) {\n\t\tint win = 0;\n\t\tL(p, 0, 7) {\n\t\t\tint m = p & 1;\n\t\t\tint a = sub >> (p * 2) & 1;\n\t\t\tint b = sub >> (p * 2 + 1) & 1;\n\t\t\tif(type == 0) {\n\t\t\t\ta &= b;\n\t\t\t} else if(type == 1) {\n\t\t\t\ta |= b;\n\t\t\t} else if(type == 2) {\n\t\t\t\tb ^= a;\n\t\t\t} else if(type == 3) {\n\t\t\t\tb ^= m;\n\t\t\t}\n\t\t\twin |= a << (p * 2);\n\t\t\twin |= b << (p * 2 + 1);\n\t\t}\n\t\tgo[sub].emplace_back(win);\n\t\t}\n\t}\n\tint s = 0;\n\tL(p, 0, 7) {\n\t\tint a = p >> 2 & 1;\n\t\tint b = p >> 1 & 1;\n\t\tint m = p & 1;\n\t\ts |= a << (p * 2);\n\t\ts |= b << (p * 2 + 1);\n\t}\n\tL(i, 0, (1 << 16) - 1) \n\t\tdis[i] = 1e9; \n\t\n\tqueue < int > q;\n\tq.push(s);\n\tdis[s] = 0;\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\t\n\t\t++all;\n\t\tP[all] = dis[u];\n\t\tL(j, 0, 7) \n\t\t\tval[all][j] = (u >> (j * 2) & 1) + (u >> (j * 2 + 1) & 1) * 2;\n\t\t\n\t\tfor(auto&v : go[u]) \n\t\t\tif(!vis[v]) dis[v] = dis[u] + 1, vis[v] = 1, q.push(v);\n\t}\n}\n\nint cur[8];\nvoid Main() {\n\tcin >> a >> b >> c >> d >> m;\n\tme(cur, -1);\n\tL(i, 0, 30) {\n\t\tint pos = 0;\n\t\tpos += (a >> i & 1) * 4;\n\t\tpos += (b >> i & 1) * 2;\n\t\tpos += (m >> i & 1);\n\t\tint v = (c >> i & 1) + (d >> i & 1) * 2;\n\t\tif(cur[pos] != -1 && cur[pos] != v) {\n\t\t\tcout << -1 << '\\n';\n\t\t\treturn ;\n\t\t}\n\t\tcur[pos] = v;\n\t}\n//\tL(i, 0, 7) \n//\t\tcout << cur[i] << ' ';\n//\tcout << '\\n';\n\tL(j, 1, all) {\n\t\tint ok = 1;\n\t\tL(i, 0, 7) {\n\t\t\tif(cur[i] != -1 && cur[i] != val[j][i]) {\n\t\t\t\tok = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(ok) {\n\t\t\tcout << P[j] << '\\n';\n\t\t\treturn ;\n\t\t} \n\t}\n\tcout << -1 << '\\n';\n}\nint main() {\n\tios :: sync_with_stdio(false); cin.tie(0); cout.tie(0);\n\tinit();\n\tint t; cin >> t; while(t--) Main();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "dfs and similar",
        "dp",
        "graphs",
        "shortest paths"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Jellyfish and Math.json",
    "editorial_link": "https://codeforces.com//blog/entry/120943",
    "editorial": "TutorialFirst of all, since are all bitwise operations, each bit is\r\nindependent of the other.We define as the -th bit of , as the -th bit of\r\n, as the -th bit of , as the -th bit of , as the -th bit of , as the -th\r\nbit of , as the -th bit of . (in binary)Lemma. For all , if and , the\r\ngoal cannot be achieved.Proof. Because after every operation we will\r\nhave , so we can\u00e2\u0080\u0099t achieve he goal.Since has only cases, and has only\r\ncases, and there are some that do not appear in , so there are only\r\ncases in this problem. We can use BFS(breadth-first search) for\r\npreprocessing.Time complexity: for preprocessing and per test\r\ncase.Memory complexity: for preprocessing and per test case.\r\n"
}