{
    "link": "https://codeforces.com//contest/232/problem/A",
    "problemId": "1944",
    "problem_idx": "A",
    "shortId": "232A",
    "contest_number": "232",
    "problem_submissions": {
        "D": [
            2346447,
            2453840,
            2673464,
            2351686,
            2351635,
            2361185,
            2356801,
            2386026
        ],
        "A": [
            2343160,
            2344433,
            2341097,
            2341781,
            2340598,
            2342868,
            2342498,
            2340984,
            2340712,
            2356088,
            2341364,
            2341135,
            2343044,
            2341523,
            2341326,
            2341345,
            2341452
        ],
        "B": [
            2340867,
            2340703,
            2342538,
            2341256,
            2342019,
            2341112,
            2341451,
            2342353,
            2341669,
            2342315,
            2342610,
            2342080,
            2342975,
            2343085,
            2343108,
            2343200
        ],
        "E": [
            2564230,
            3726445,
            2360898,
            2389163,
            2349135,
            2349124
        ],
        "C": [
            2348750,
            2348392,
            2352824,
            2348892
        ]
    },
    "name": "A. Cycles",
    "statement": "John Doe started thinking about graphs. After some thought he decided\r\nthat he wants to paint an undirected graph, containing exactly cycles of\r\nlength . A cycle of length is an unordered group of three distinct graph\r\nvertices , and , such that each pair of them is connected by a graph\r\nedge. John has been painting for long, but he has not been a success.\r\nHelp him find such graph. Note that the number of vertices there\r\nshouldn\u2019t exceed , or else John will have problems painting it.\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <stdio.h>\n#include <set>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <algorithm>\n#include <memory.h>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint n, i, j, k;\nint a[111][111];\n\nint main() {\n  scanf(\"%d\",&n);\n  memset(a,0,sizeof(a));\n  int m = 0;\n  while (n > 0)\n    for (i=100;i>=3;i--)\n      if (i*(i-1)*(i-2)/6 <= n) {\n        m += i;\n        for (j=m-i;j<m;j++)\n          for (k=m-i;k<m;k++) a[j][k] = (j != k);\n        n -= i*(i-1)*(i-2)/6;\n        for (int z=i;z>=2;z--)\n          if (z*(z-1)/2 <= n) {\n            m++;\n            for (j=m-z-1;j<m-1;j++) a[j][m-1] = a[m-1][j] = 1;\n            n -= z*(z-1)/2;\n            for (int y=z+1;y>=2;y--)\n              if (y*(y-1)/2 <= n) {\n                m++;\n                for (j=m-y-1;j<m-1;j++) a[j][m-1] = a[m-1][j] = 1;\n                n -= y*(y-1)/2;\n                break;\n              }\n            break;\n          }\n        break;\n      }\n  printf(\"%d\\n\",m);\n  for (i=0;i<m;i++) {\n    for (j=0;j<m;j++) printf(\"%d\",a[i][j]);\n    printf(\"\\n\");\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "graphs",
        "greedy"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Cycles.json",
    "editorial_link": "https://codeforces.com//blog/entry/5514",
    "editorial": "Let's add edge in order of increasing a and for equal b in order of increasing b (here a and b \u0097 the least and the greatest vertices of the edge). If the new edge adds too much 3-cycles, we won't add it. We can count the number of new 3-cycles in O(n) complexity (they all contain the new edge, so it's enough to check all variants of the third vertex). Obviously we will obtain some proper graph, because we can always add a vertex and two edges to make a new triangle. So, there is always an answer. The complexity of this solution is O(n3).\n\nLet's proof that 100 vertices are always enough for the given restrictions on n.\n\nFor some p after first p iterations we will have a complete graph of p vertices.\nNow we have exactly C(p,?3) triangles. Consider p such that C(p,?3)???k and C(p,?3) is maximal.\nFor the given restrictions p???85.\nFrom this moment, if we add u from some vertex, we increase the total number of 3-cycles on C(u,?2).\nSo we have to present a small number that is less than C(85,?3) as sum of C(i,?2).\nThe first number we subtruct will differ C(85,?1) on some value not greater than C(85,?1)?=?85, because C(n,?k)?-?C(n?-?1,?k)?=?C(n?-?1,?k?-?1).\nThe second number we subtruct will differ the number we have on some value not greater than C(14,?1)?=?14.\nand so on.\nFor every k it's enough to use not more that 90 vertices."
}