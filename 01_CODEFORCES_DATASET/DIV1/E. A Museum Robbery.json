{
    "link": "https://codeforces.com//contest/601/problem/E",
    "problemId": "41473",
    "problem_idx": "E",
    "shortId": "601E",
    "contest_number": "601",
    "problem_submissions": {
        "A": [
            14454470,
            14443143,
            14447063,
            14443587,
            14445964,
            14443595,
            14444045,
            14444989,
            14446125,
            14443550,
            14443259,
            14443909,
            14445577,
            14444080,
            14443457,
            14446585,
            14444039,
            14443354
        ],
        "B": [
            14453038,
            14449287,
            14452241,
            14450261,
            14447679,
            14448966,
            14446447,
            14447283,
            14448908,
            14445351,
            14446449,
            14446110,
            14446584,
            14449868,
            14447883,
            14445592,
            14448674,
            14450206,
            14448949
        ],
        "C": [
            14451829,
            14446840,
            14444491,
            14448343,
            14449987,
            14446641,
            14447562,
            14449169,
            14451065,
            14449654,
            14454388,
            14453682,
            14454128,
            14447981,
            14450444,
            14450228,
            14453413,
            14447154,
            14447182
        ],
        "D": [
            14449920,
            14451694,
            14450636,
            14452396,
            14452299,
            14456203,
            14456286,
            14457609,
            14452835,
            14451843,
            14450703,
            14452065,
            14453099,
            14453143,
            14453767,
            14451161,
            14453943,
            14454530
        ],
        "E": [
            14447206,
            14455203,
            14456257,
            14455227,
            14455660,
            14455476,
            14454130,
            14452692,
            14454008,
            14577340,
            14553610
        ]
    },
    "name": "E. A Museum Robbery",
    "statement": "There’s a famous museum in the city where Kleof lives. In the museum,\r\nexhibits (numbered through ) had been displayed for a long time; the -th\r\nof those exhibits has value and mass . Then, the museum was bought by a\r\nlarge financial group and started to vary the exhibits. At about the\r\nsame time, Kleof ... gained interest in the museum, so to say.You should\r\nprocess events of three types: type the museum displays an exhibit with\r\nvalue and mass ; the exhibit displayed in the -th event of this type is\r\nnumbered (see sample explanation for more details) type the museum\r\nremoves the exhibit with number and stores it safely in its vault type\r\nKleof visits the museum and wonders (for no important reason at all, of\r\ncourse): if there was a robbery and exhibits with total mass at most\r\nwere stolen, what would their maximum possible total value be?For each\r\nevent of type 3, let be the maximum possible total value of stolen\r\nexhibits with total mass .Formally, let be the set of numbers of all\r\nexhibits that are currently displayed (so initially = {1, ..., n}). Let\r\nbe the set of all subsets of and let Then, is defined as Compute for\r\neach . Note that the output follows a special format.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <cassert>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007,P=10000000+19;\nll powmod(ll a,ll b) {ll res=1;a%=mod;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\nconst int N=30100;\nint dp[30][N];\nint n,k,st[N],ed[N],ty,it,qur[N],q;\nPII p[N];\nVI ps;\nvoid query(int d,int l,int r,VI item) {\n\trep(i,0,k+1) dp[d][i]=dp[d-1][i];\n//\tprintf(\"L R %d %d\\n\",l,r);\n//\trep(j,0,SZ(item)) printf(\"%d \",item[j]); puts(\"\");\n\trep(j,0,SZ(item)) if (st[item[j]]<=l&&ed[item[j]]>=r) {\n//\t\tprintf(\"Add %d\\n\",item[j]);\n\t\tint v=p[item[j]].fi,w=p[item[j]].se;\n\t\tper(i,0,k+1) {\n\t\t\tif (i>=w) dp[d][i]=max(dp[d][i],dp[d][i-w]+v);\n\t\t}\n\t}\n\tif (l==r) {\n\t\tll ret=0;\n\t//\trep(i,1,k+1) printf(\"%d \",dp[d][i]); puts(\"\");\n\t\tper(i,1,k+1) ret=(ret*P+dp[d][i])%mod;\n\t\trep(j,0,qur[l]) printf(\"%d\\n\",(int)ret);\n\t} else {\n\t\tint md=(l+r)>>1;\n\t\tVI lt,rt;\n\t\trep(j,0,SZ(item)) {\n\t\t\tif (st[item[j]]<=l&&ed[item[j]]>=r) continue;\n\t\t\tif (ed[item[j]]<=md) lt.pb(item[j]);//,printf(\"LL %d\\n\",item[j]);\n\t\t\telse if (st[item[j]]>md) rt.pb(item[j]);//,printf(\"RR %d\\n\",item[j]);\n\t\t\telse lt.pb(item[j]),rt.pb(item[j]);//,printf(\"LR %d\\n\",item[j]);\n\t\t}\n\t\tquery(d+1,l,md,lt);\n\t\tquery(d+1,md+1,r,rt);\n\t}\n}\nint main() {\n//\tfreopen(\"in\",\"r\",stdin);\n\tscanf(\"%d%d\",&n,&k);\n\trep(i,1,n+1) scanf(\"%d%d\",&p[i].fi,&p[i].se),st[i]=1;\n\tscanf(\"%d\",&q);\n\tint cur=1,im=n;\n\trep(i,0,q) {\n\t\tscanf(\"%d\",&ty);\n\t\tif (ty==3) {\n\t\t\tqur[cur]++;\n\t\t} else if (ty==2) {\n\t\t\tscanf(\"%d\",&it);\n\t\t\ted[it]=cur++;\n\t\t} else {\n\t\t\tim++;\n\t\t\tscanf(\"%d%d\",&p[im].fi,&p[im].se);\n\t\t\tst[im]=++cur;\n\t\t}\n\t}\n\trep(i,1,im+1) ps.pb(i);\n\trep(i,1,im+1) if (ed[i]==0) ed[i]=cur;\n//\trep(i,1,im+1) printf(\"%d %d %d\\n\",i,st[i],ed[i]);\n\tquery(1,1,cur,ps);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. A Museum Robbery.json",
    "editorial_link": "https://codeforces.com//blog/entry/21755",
    "editorial": "Can you solve the problem without events of type 1 or 2? Also, how about solving it offline  as queries on subsets.",
    "hint": []
}