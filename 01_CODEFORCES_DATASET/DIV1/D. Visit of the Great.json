{
    "link": "https://codeforces.com//contest/185/problem/D",
    "problemId": "1298",
    "problem_idx": "D",
    "shortId": "185D",
    "contest_number": "185",
    "problem_submissions": {
        "D": [
            1656258,
            1657906,
            1659029,
            1659582,
            1660143,
            1660140,
            1660650,
            1660397,
            1660794,
            1660341,
            1662000,
            1661960,
            1662031
        ],
        "B": [
            1654760,
            1653010,
            1654904,
            1655366,
            1655062,
            1655668,
            1653656,
            1655096,
            1656068,
            1655208,
            1655477,
            1655121,
            1654374,
            1656299,
            1655431,
            1655895
        ],
        "A": [
            1652795,
            1653595,
            1652830,
            1652854,
            1654056,
            1653415,
            1652909,
            1653006,
            1653418,
            1653729,
            1653004,
            1653330,
            1652743,
            1653797,
            1652848,
            1652763
        ],
        "E": [
            1660675,
            140398754
        ],
        "C": []
    },
    "name": "D. Visit of the Great",
    "statement": "The Great Mushroom King descended to the dwarves, but not everyone\r\nmanaged to see him. Only the few chosen ones could see the King.We know\r\nthat only dwarves can see the Great Mushroom King. Numbers , , are\r\nchosen by the Great Mushroom King himself in some complicated manner\r\nwhich is unclear to common dwarves. The dwarven historians decided to\r\ndocument all visits of the Great Mushroom King. For each visit the\r\ndwarven historians know three integers , , , chosen by the Great\r\nMushroom King for this visit. They also know a prime number . Help them\r\nto count the remainder of dividing the number of dwarves who can see the\r\nKing, by number , for each visit.\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\ntypedef long long ll;\n\nll power(ll x, ll n, ll p){\n    if(n == 0) return 1;\n    ll y = power(x, n/2, p);\n    y = y * y % p;\n    if(n % 2 == 1) y = y * x % p;\n    return y;\n}\n\nll power2(ll x, ll n, ll p){ // (x ^ (2 ^ n)) mod p\n    if(x % p == 0) return 0;\n    ll tmp = power(2, n, p-1);\n    return power(x, tmp, p);\n}\n\nll func(ll x, ll l, ll r, ll p){\n    int i;\n    \n    if(p == 2){\n        if(x%2 == 0) return 1;\n        return 0;\n    }\n    \n    ll y = power2(x, l, p);\n    \n    ll z;\n    if(y == 1){\n        z = power(2, r+1-l, p);\n    } else {\n        ll a = power2(x, r+1, p);\n        a = (a + p - 1) % p;\n        ll b = y;\n        b = (b + p - 1) % p;\n        z = a * power(b, p-2, p) % p;\n    }\n    \n    if(x % 2 == 0) return z;\n    \n    ll ord_sum = r - l + 1;\n    ll max_ord = 1;\n    \n    if(l == 0){\n        ll tmp = x + 1;\n        max_ord = 0;\n        while(tmp % 2 == 0){\n            tmp /= 2;\n            max_ord++;\n        }\n        ord_sum += max_ord - 1;\n    }\n    \n    ord_sum -= max_ord;\n    ll two = power(2, ord_sum, p);\n    z = z * power(two, p-2, p) % p;\n    \n    return z;\n}\n\nint main(void){\n    int T,t;\n    ll x,l,r,p;\n    \n    cin >> T;\n    REP(t,T){\n        cin >> x >> l >> r >> p;\n        ll ans = func(x, l, r, p);\n        cout << ans << endl;\n    }\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "number theory"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Visit of the Great.json",
    "editorial_link": "https://codeforces.com/blog/entry/4488",
    "editorial": "This is number theory problem.\n\nI'm trying to explain it step by step:\n\n1) Let's prove, that LCD is maximum 2.\n\nLet . Squaring both sides we get , but we want to . This means, that d can be only 2.\n\n2) Let's make this lenghty product simplier.\n\n.\n\nWe can count this by modulo p fast, and divide it by 2r?-?l, if k is odd.\n\n3) There is many interesting things in this solution.\n\nFirstly, it doesn't work, when p?=?2 \u0097 but it can easily done by you.\n\nThe other problem is harder, what if , this means that for each i???l : , and this mean,\nthat for each i???l : k2i?+?1???p2. And the product by modulo p is equal to 2r?-?l?+?1."
}