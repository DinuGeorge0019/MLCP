{"link": "https://codeforces.com//contest/341/problem/E", "problemId": "3426", "problem_idx": "E", "shortId": "341E", "contest_number": "341", "problem_submissions": {"D": [4376750, 4378780, 4376395, 4376720, 4378230, 4379371, 4379846, 4378978, 4379778, 4378578, 4381466, 4381249, 4379639, 4434623, 4381692, 4380681, 4380927, 4380941, 4449185, 4374777], "C": [4375168, 4374068, 4379294, 4375659, 4375652, 4375871, 4375036, 4378006, 4374746, 4375347, 4374858, 4376054, 4375611, 4377642, 4376535, 4378502, 4380054, 4385371], "B": [4372755, 4372469, 4374229, 4375035, 4374390, 4374268, 4379570, 4373332, 4379590, 4372609, 4373078, 4372906, 4373853, 4373520, 4374372, 4374299, 4376277, 4376672], "A": [4372149, 4371769, 4372926, 4372916, 4383777, 4373604, 4372813, 4371963, 4372756, 4380996, 4371671, 4372384, 4372154, 4458518, 4372373, 4372183, 4373535, 4372955, 4378126, 4376128], "E": [4404432, 4383929, 4395989, 4381763]}, "name": "E. Candies Game", "statement": "Iahub is playing an uncommon game. Initially, he has boxes, numbered 1,\r\n2, 3, , . Each box has some number of candies in it, described by a\r\nsequence , , , . The number represents the number of candies in box .\r\nThe goal of the game is to move all candies into two boxes. The rest of\r\nboxes must contain candies. Iahub is allowed to do several (possible\r\nzero) moves. At each move he chooses two different boxes and , such that\r\n. Then, Iahub moves from box to box exactly candies. Obviously, when two\r\nboxes have equal number of candies, box number becomes empty.Your task\r\nis to give him a set of moves such as Iahub to archive the goal of the\r\ngame. If Iahub can\u2019t win the game for the given configuration of boxes,\r\noutput -1. Please note that in case there exist a solution, you don\u2019t\r\nneed to print the solution using minimal number of moves.\r\n", "solutions": ["#include <bits/stdc++.h>\n\n#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)\n#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)\n#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)\n\n#define DEBUG(x) cout << #x << \" = \"; cout << x << endl;\n#define PR(a,n) cout << #a << \" = \"; FOR(_,1,n) cout << a[_] << ' '; cout << endl;\n#define PR0(a,n) cout << #a << \" = \"; REP(_,n) cout << a[_] << ' '; cout << endl;\nusing namespace std;\n\n//Buffer reading\nint INP,AM,REACHEOF;\nconst int BUFSIZE = (1<<12) + 17;\nchar BUF[BUFSIZE+1], *inp=BUF;\n#define GETCHAR(INP) { \\\n    if(!*inp && !REACHEOF) { \\\n        memset(BUF,0,sizeof BUF);\\\n        int inpzzz = fread(BUF,1,BUFSIZE,stdin);\\\n        if (inpzzz != BUFSIZE) REACHEOF = true;\\\n        inp=BUF; \\\n    } \\\n    INP=*inp++; \\\n}\n#define DIG(a) (((a)>='0')&&((a)<='9'))\n#define GN(j) { \\\n    AM=0;\\\n    GETCHAR(INP); while(!DIG(INP) && INP!='-') GETCHAR(INP);\\\n    if (INP=='-') {AM=1;GETCHAR(INP);} \\\n    j=INP-'0'; GETCHAR(INP); \\\n    while(DIG(INP)){j=10*j+(INP-'0');GETCHAR(INP);} \\\n    if (AM) j=-j;\\\n}\n//End of buffer reading\n\nconst int MN = 1011;\nint a[MN], n, x[11];\nvector< pair<int,int> > res;\n\nvoid solve(int x, int y, int z) {\n    if (a[y] < a[x]) swap(x, y);\n    if (a[z] < a[x]) swap(x, z);\n    if (a[z] < a[y]) swap(y, z);\n\n    if (a[x] == 0) return ;\n\n    int mv = a[y] / a[x];\n    REP(bit,30) {\n        if ((1<<bit) > mv) break;\n        if (mv & (1<<bit)) {\n            res.push_back(make_pair(x, y));\n            a[y] -= a[x];\n            a[x] += a[x];\n        }\n        else {\n            res.push_back(make_pair(x, z));\n            a[z] -= a[x];\n            a[x] += a[x];\n        }\n    }\n}\n\nint main() {\n    ios :: sync_with_stdio(false);\n    while (cin >> n) {\n        res.clear();\n        FOR(i,1,n) cin >> a[i];\n\n        int cnt = 0;\n        FOR(i,1,n) if (a[i]) {\n            ++cnt;\n            x[cnt] = i;\n            if (cnt == 3) break;\n        }\n        if (cnt < 2) {\n            puts(\"-1\\n\");\n            continue;\n        }\n        while (cnt == 3) {\n            solve(x[1], x[2], x[3]);\n            cnt = 0;\n            FOR(i,1,n) if (a[i]) {\n                ++cnt;\n                x[cnt] = i;\n                if (cnt == 3) break;\n            }\n        }\n\n        printf(\"%d\\n\", res.size());\n        REP(i,res.size()) printf(\"%d %d\\n\", res[i].first, res[i].second);\n        puts(\"\");\n    }\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy"], "dificulty": "3000", "interactive": false}