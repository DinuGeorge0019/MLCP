{
    "link": "https://codeforces.com//contest/235/problem/E",
    "problemId": "2003",
    "problem_idx": "E",
    "shortId": "235E",
    "contest_number": "235",
    "problem_submissions": {
        "D": [
            3042109
        ],
        "C": [
            2417778,
            2401429,
            2402641
        ],
        "E": [
            2402112,
            2401617,
            2400848,
            2421152,
            2421132,
            120142495,
            120140982,
            2406375
        ],
        "A": [
            2397139,
            2395807,
            2396602,
            2395919,
            2397439,
            2396282,
            2397676,
            2397630,
            2396710,
            2396092,
            2396146,
            2396812,
            2396212,
            2397021,
            2396581
        ],
        "B": [
            2395952,
            2396750,
            2397121,
            2396950,
            2397083,
            2398248,
            2396164,
            2401830,
            2396720,
            2397471,
            2402358,
            2399645,
            2400107,
            2397813
        ]
    },
    "name": "E. Number Challenge",
    "statement": "Let\u2019s denote as the number of divisors of a positive integer . You are\r\ngiven three integers , and . Your task is to calculate the following\r\nsum:Find the sum modulo .\r\n",
    "solutions": [
        "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\ntypedef long long ll;\n\nint gcd(int x, int y){\n    return x ? gcd(y%x,x) : y;\n}\n\nbool sqf(int x){\n    int i;\n    for(i=2;i*i<=x;i++) if(x % (i*i) == 0) return false;\n    return true;\n}\n\nint sgn(int x){\n    int i;\n    \n    int ans = 1;\n    for(i=2;i*i<=x;i++) if(x%i == 0){\n        ans = -ans;\n        x /= i;\n    }\n    if(x > 1) ans = -ans;\n    \n    return ans;\n}\n\nint func(int x, int M){\n    int ans=0,i;\n    for(i=1;i<=M;i++) if(gcd(x,i) == 1) ans += M/i;\n    return ans;\n}\n\nint main(void){\n    int A,B,C,s,x;\n    \n    cin >> A >> B >> C;\n    \n    ll ans = 0;\n    \n    for(s=1;s<=2000;s++) if(sqf(s)){\n        int coef = sgn(s);\n        for(x=1;x<=A;x++) if(gcd(x,s) == 1) ans += (ll)(A/x) * (ll)coef * (ll)func(x,B/s) * (ll)func(x,C/s);\n    }\n    \n    cout << ans % (1<<30) << endl;\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "implementation",
        "math",
        "number theory"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Number Challenge.json",
    "editorial_link": "https://codeforces.com//blog/entry/5592",
    "editorial": "Let us consider each prime in one step, the upper limit for is recorded.\r\nSo if we fixed the power of 2 in each like , then their upper limit\r\nbecomes , and the power of 2 in their multiplication is just x+y+z. Let\r\nus denote for the answer to the original problem that \u00e2\u0080\u0099s upper limit is\r\n. And their can only use the prime factors which are not less than . Let\r\nthe next prime to be , so we can try to fix the power of in and get the\r\nnew upper limit. So we can do transform like this: = sum of Check my\r\ncode here: 2404223 Also you can check rng_58 solution here:\r\nhttp://codeforces.com/blog/entry/5600 If you have any problems, you can\r\nask here :)\r\n"
}