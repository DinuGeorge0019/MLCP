{"link": "https://codeforces.com//contest/319/problem/B", "problemId": "3256", "problem_idx": "B", "shortId": "319B", "contest_number": "319", "problem_submissions": {"D": [3948106, 3949160, 3951651, 3949707, 3949637, 3949775, 3962727, 3950884, 4081627, 3951853], "C": [3946594, 3947263, 3948244, 3948613, 3948176, 3945420, 3945758, 3945713, 3946296, 3946346, 3946524, 3946613, 3946482, 3945816, 3947039, 3946470], "B": [3944659, 3943682, 3946080, 3946044, 3946423, 3943572, 3944269, 3944276, 3944495, 3944694, 3944617, 3944629, 3943999, 3945031, 3943612, 3945716], "A": [3942928, 3944735, 3943181, 3943824, 3943092, 3942620, 3942968, 3942994, 3942953, 3943439, 3942852, 3943177, 3942732, 3944034, 3944966, 3944250], "E": [4934160]}, "name": "B. Psychos in a Line", "statement": "There are psychos standing in a line. Each psycho is assigned a unique\r\ninteger from to . At each step every psycho who has an id greater than\r\nthe psycho to his right (if exists) kills his right neighbor in the\r\nline. Note that a psycho might kill and get killed at the same step.\r\nYou\u2019re given the initial arrangement of the psychos in the line.\r\nCalculate how many steps are needed to the moment of time such, that\r\nnobody kills his neighbor after that moment. Look notes to understand\r\nthe statement more precise.\r\n", "solutions": ["#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cassert>\n#include <ctime>\n#include <cstring>\n#include <string>\n#include <set>\n#include <map>\n#include <vector>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define fs first\n#define sc second\nconst double pi = acos(-1.0);\nconst int size = 200 * 1000 + 100;\nconst int rms = (1 << 18) - 1;\nconst int hrms = rms / 2;\nconst int inf = 1000 * 1000 * 1000;\n\nint rmq[rms + 1];\n\nint rss(int v, int i, int j, int lb, int rb) {\n\tif (lb > j || rb < i)\n\t\treturn -inf;\n\tif (lb >= i && rb <= j)\n\t\treturn rmq[v];\n\treturn max(rss(v * 2, i, j, lb, (lb + rb) / 2), rss(v * 2 + 1, i, j, (lb + rb) / 2 + 1, rb));\n}\n\nvoid change(int ps, int val) {\n\tps += hrms + 1;\n\trmq[ps] = val;\n\twhile (ps > 1) {\n\t\tps /= 2;\n\t\trmq[ps] = max(rmq[ps * 2], rmq[ps * 2 + 1]);\n\t}\n}\n\nint val[size];\nint from[size];\n\nint main() {\n\tint n;\n\n\t//freopen(\"problem_b.in\", \"r\", stdin);\n\t//freopen(\"problem_b.out\", \"w\", stdout);\n\t\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%d\", &val[i]);\n\tfor (int i = 0; i < n; i++) {\n\t\tfrom[i] = rss(1, val[i], n, 1, hrms + 1);\n\t\tchange(val[i] - 1, i + 1);\n\t\tfrom[i]--;\n\t}\n\tfor (int i = 0; i <= rms; i++)\n\t\trmq[i] = 0;\n\tint glans = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tif (from[i] != -1) {\n\t\t\tint d = rss(1, from[i] + 2, i + 1, 1, hrms + 1) + 1;\n\t\t\tglans = max(glans, d);\n\t\t\tchange(i, d);\n\t\t}\n\tcout << glans << endl;\n\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures", "implementation"], "dificulty": "1900", "interactive": false}