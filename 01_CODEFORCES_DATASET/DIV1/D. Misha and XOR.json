{
    "link": "https://codeforces.com//contest/504/problem/D",
    "problemId": "20650",
    "problem_idx": "D",
    "shortId": "504D",
    "contest_number": "504",
    "problem_submissions": {
        "D": [
            9413857,
            9415317,
            9414618,
            9414335,
            9414712,
            9421240,
            9415227,
            9413052,
            9413088,
            9412895
        ],
        "C": [
            9411735,
            9413692,
            9412956,
            9412560,
            9412053,
            9410886,
            9412226,
            9412435,
            9412519,
            9412154,
            9424712
        ],
        "B": [
            9410465,
            9409352,
            9409933,
            9410329,
            9408364,
            9410523,
            9413452,
            9410100,
            9409772,
            9409410,
            9413230,
            9409855,
            9410114,
            9410231,
            9410054
        ],
        "A": [
            9407864,
            9408933,
            9408565,
            9408075,
            9409262,
            9408270,
            9407763,
            9408138,
            9407931,
            9407399,
            9408250,
            9407650,
            9407865,
            9407661,
            9408743
        ],
        "E": [
            9443621,
            9411256,
            9413318,
            9421624,
            9456035,
            9420369,
            9420367
        ]
    },
    "name": "D. Misha and XOR",
    "statement": "After Misha\u2019s birthday he had many large numbers left, scattered across\r\nthe room. Now it\u2019s time to clean up and Misha needs to put them in a\r\nbasket. He ordered this task to his pet robot that agreed to complete\r\nthe task at certain conditions. Before the robot puts a number to the\r\nbasket, Misha should answer the question: is it possible to choose one\r\nor multiple numbers that already are in the basket, such that their XOR\r\nsum equals ? If the answer is positive, you also need to give the\r\nindexes of these numbers. If there are multiple options of choosing\r\nnumbers, you are allowed to choose any correct option. After Misha\u2019s\r\nanswer the robot puts the number to the basket.Initially the basket is\r\nempty. Each integer you put in the basket takes some number. The first\r\ninteger you put into the basket take number , the second integer takes\r\nnumber and so on.Misha needs to clean up the place as soon as possible\r\nbut unfortunately, he isn\u2019t that good at mathematics. He asks you to\r\nhelp him.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <algorithm>\n#include <cstdlib>\n#include <ctime>\n#include <set>\n#include <map>\n#include <vector>\n#include <iomanip>\n#include <cstring>\nusing namespace std;\n\nint n, ans, ss[2100][70], x[2100], to[2100], bb[2100][70];\nlong long a[2100];\nchar S[2100];\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int T = 1; T <= n; T++) {\n\t\tscanf(\"%s\", S);\n\t\tint l = strlen(S);\n\t\tfor (int j = 0; j <= 600; j++)\n\t\t\ta[j] = 0;\n\t\tfor (int j = 0; j < l; j++)\n\t\t\ta[l - j] = S[j] - '0';\n\t\tfor (int i = 0; i < 70; i++) {\n\t\t\tfor (int j = l; j; j--) {\n\t\t\t\ta[j - 1] += (a[j] & ((1 << 31) - 1)) * 10;\n\t\t\t\ta[j] >>= 31;\n\t\t\t}\n\t\t\tss[T][i] = a[0] / 10;\n\t\t\ta[0] = 0;\n\t\t}\n\t\tl = 2000;\n\t\tans = 0;\n\t\twhile (true) {\n\t\t\twhile (l >= 0 && !(ss[T][l / 31] & (1 << (l % 31))))\n\t\t\t\tl--;\n\t\t\t// printf(\"?? %d %d\\n\", l, to[l]);\n\t\t\tif (l < 0 || !to[l])\tbreak;\n\t\t\tint p = to[l];\n\t\t\tx[++ans] = p;\n\t\t\tfor (int i = 0; i < 70; i++)\n\t\t\t\tss[T][i] ^= ss[p][i];\n\t\t}\n\t\tfor (int i = 0; i < 70; i++)\n\t\t\t\tbb[T][i] = 0;\n\t\tfor (int i = 1; i <= ans; i++) {\n\t\t\tint p = x[i];\n\t\t\tfor (int j = 0; j < 70; j++)\n\t\t\t\tbb[T][j] ^= bb[p][j];\n\t\t}\n\t\tif (l < 0) {\n\t\t\tint l = 0;\n\t\t\tfor (int i = 0; i < 2000; i++)\n\t\t\t\tif (bb[T][i / 31] & (1 << (i % 31)))\n\t\t\t\t\tl++;\n\t\t\tprintf(\"%d \", l);\n\t\t\tfor (int i = 0; i < 2000; i++)\n\t\t\t\tif (bb[T][i / 31] & (1 << (i % 31))) {\n\t\t\t\t\tl--;\n\t\t\t\t\tprintf(\"%d\", i - 1);\n\t\t\t\t\tif (l) printf(\" \");\n\t\t\t\t\telse printf(\"\\n\");\n\t\t\t\t}\n\t\t}else {\n\t\t\tto[l] = T;\n\t\t\tbb[T][T / 31] |= (1 << (T % 31));\n\t\t\tprintf(\"0\\n\");\n\t\t}\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Misha and XOR.json",
    "editorial_link": "https://codeforces.com//blog/entry/15743",
    "editorial": "Firstly, we convert each number into a binary system: it can be done in\r\n, where with rather small constant(we store number in system with big\r\nradix). To solve the problem we need to modify Gauss elimination\r\nalgorithm. For each row we should store set of row\u00e2\u0080\u0099s indices which we\r\nalready XORed this row to get row echelon form (we can store it in\r\nbitset), also for each bit we store index of row, which lowest set bit\r\nis in row echelon form. Maintaining the query we try to reset bits from\r\nlowest to highest using array and save information, which rows were\r\nXORed with current number. If we can reset whole number, the answer is\r\npositive and we know indices of answer. We update array , otherwise.\r\nTime complexity: with small constant due to bit compression.\r\n"
}