{
    "link": "https://codeforces.com//contest/113/problem/C",
    "problemId": "594",
    "problem_idx": "C",
    "shortId": "113C",
    "contest_number": "113",
    "problem_submissions": {
        "E": [
            680388,
            685905,
            681683
        ],
        "A": [
            677908,
            674619,
            675479,
            675233,
            675507,
            675322,
            676300,
            675702,
            674929,
            678313,
            683346,
            682046,
            676172,
            676056
        ],
        "B": [
            676745,
            676166,
            676692,
            677267,
            676920,
            677563,
            678285,
            678205,
            675093,
            677719,
            677894,
            677545,
            677448,
            686002,
            685992
        ],
        "C": [
            676712,
            678207,
            677682,
            678634,
            679430,
            680369,
            680061,
            678147,
            687235,
            682210,
            681538,
            681511,
            680322,
            680720,
            681415,
            681728,
            685898,
            685870
        ],
        "D": [
            681282,
            682967,
            682949,
            681414,
            728339,
            728337
        ]
    },
    "name": "C. Double Happiness",
    "statement": "On the math lesson a teacher asked each pupil to come up with his own\r\nlucky numbers. As a fan of number theory Peter chose prime numbers. Bob\r\nwas more original. He said that number is his lucky number, if it can be\r\nrepresented as: where are arbitrary positive integers.Now, the boys\r\ndecided to find out how many days of the interval () are suitable for\r\npair programming. They decided that the day () is suitable for pair\r\nprogramming if and only if the number is lucky for Peter and lucky for\r\nBob at the same time. Help the boys to find the number of such days.\r\n",
    "solutions": [
        "//  Codeforces Beta Round #86\n\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n\nusing namespace std;\n\ntypedef unsigned uint;\ntypedef long long Int;\ntypedef vector<int> vint;\ntypedef pair<int,int> pint;\n#define mp make_pair\n\ntemplate<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << \" \"; cout << endl; }\ntemplate<class T> void pvp(T a, T b) { for (T i = a; i != b; ++i) cout << \"(\" << i->first << \", \" << i->second << \") \"; cout << endl; }\ntemplate<class T> void chmin(T &t, T f) { if (t > f) t = f; }\ntemplate<class T> void chmax(T &t, T f) { if (t < f) t = f; }\nint in_c() { int c; for (; (c = getchar()) <= ' '; ) { if (!~c) throw ~0; } return c; }\nint in() { int x = 0, c; for (; (uint)((c = getchar()) - '0') >= 10; ) { if (c == '-') return -in(); if (!~c) throw ~0; } do { x = (x << 3) + (x << 1) + (c - '0'); } while ((uint)((c = getchar()) - '0') < 10); return x; }\nInt In() { Int x = 0, c; for (; (uint)((c = getchar()) - '0') >= 10; ) { if (c == '-') return -In(); if (!~c) throw ~0; } do { x = (x << 3) + (x << 1) + (c - '0'); } while ((uint)((c = getchar()) - '0') < 10); return x; }\n\nconst int LIM = 20000;\nint isnp[20010];\nint psLen, ps[20010];\n\nconst int LIM2 = 300000000;\nconst int K = 1000000;\nint cnt[310];\n\nvoid prpr() {\n    int i, j;\n    for (i = 2; i * i < LIM; ++i) if (!isnp[i]) {\n        for (j = i * i; j < LIM; j += i) isnp[j] = 1;\n    }\n    for (i = 2; i < LIM; ++i) if (!isnp[i]) {\n        ps[psLen++] = i;\n    }\n}\nbool isLucky(int n) {\n    if (n < 2) return 0;\n    if (n != 2 && n % 4 != 1) return 0;\n    int i;\n    for (i = 0; i < psLen && ps[i] < n; ++i) if (n % ps[i] == 0) return 0;\n    return 1;\n}\n\n/*\nint main() {\n    int i;\n    \n    prpr();\n    \n    ++cnt[0];\n    for (i = 5; i < LIM2; i += 4) {\n        if (isLucky(i)) {\n            ++cnt[i / K];\n        }\n    }\n    for (i = 0; i < LIM2 / K; ++i) {\n        printf(\"%d,\", cnt[i]);\n    }\n    puts(\"\");\n    \n    return 0;\n}\n//*/\n\n//*\nint prec[] = { \n39176,35241,33867,33219,32691,32139,31928,31499,31341,31080,30899,30913,30576,30405,30301,30139,30087,30002,29854,29814,29600,29719,29406,29422,29436,29274,29336,29150,29172,29094,29091,28875,28873,28902,28653,28729,28749,28687,28754,28595,28584,28417,28392,28489,28355,28315,28386,28313,28256,28258,28169,28080,28070,28052,28033,28035,27971,28017,27892,27899,27976,27713,27847,27868,27831,27821,27783,27794,27716,27699,27611,27660,27723,27534,27588,27680,27510,27458,27448,27443,27498,27578,27454,27448,27327,27347,27304,27472,27326,27266,27219,27227,27345,27189,27308,27228,27199,27167,27086,27143,27101,27097,27178,27021,27107,27013,26975,27086,27143,27133,26917,27074,26976,26792,26905,26928,26827,26892,26881,26925,26796,26823,26879,26934,26831,26788,26788,26857,26912,26781,26706,26816,26714,26709,26784,26590,26671,26605,26625,26836,26539,26668,26606,26717,26639,26632,26642,26559,26499,26563,26417,26555,26338,26617,26477,26456,26642,26415,26339,26483,26470,26399,26468,26593,26352,26354,26345,26398,26378,26469,26346,26372,26390,26434,26306,26359,26331,26390,26348,26469,26168,26342,26128,26258,26390,26251,26268,26241,26223,26395,25941,26110,26293,26226,26247,26183,26099,26034,26139,26190,26168,26268,26107,26223,26137,26001,26145,26052,25999,26168,26038,26225,26168,26057,26095,26173,26094,25948,25966,25999,25994,26045,26114,25971,26158,25913,26090,25813,25930,25903,25956,26020,26001,25825,25939,25950,26045,25925,26008,25808,26013,25938,25712,25883,25989,25900,25794,25760,25943,25783,25953,25667,25756,25915,25963,25824,25858,25833,25905,25729,25951,25770,25971,25767,25859,25928,25627,25767,25863,25623,25772,25706,25657,25806,25819,25724,25712,25735,25587,25726,25606,25780,25597,25743,25704,25615,25592,25770,25735,25588,25755,25680,25519,25692,25737,25552,25616,25639,25521,25530,\n};\n\nint A, B;\n\nint main() {\n    int i;\n    \n    prpr();\n    \n    for (; ~scanf(\"%d%d\", &A, &B); ) {\n        int a = A, b = B;\n        int ans = 0;\n        for (; a <= b && a % K != 0; ++a) {\n            if (isLucky(a)) {\n                ++ans;\n            }\n        }\n        for (; a <= b && (b + 1) % K != 0; --b) {\n            if (isLucky(b)) {\n                ++ans;\n            }\n        }\n        if (a <= b) {\n            for (i = a / K; i <= b / K; ++i) {\n                ans += prec[i];\n            }\n        }\n        printf(\"%d\\n\", ans);\n    }\n    \n    return 0;\n}\n//*/\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math",
        "number theory"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Double Happiness.json",
    "editorial_link": "https://codeforces.com//blog/entry/2627",
    "editorial": "In this task one have to find quantity of prime numbers that can be reproduced as sum of two perfect squares. Obviously, that 4k?+?3 prime numbers are not suitable as sum of two perfect squares can not be equal to 3 (of course, modulo 4). So, we can prove or use the well-known fact ( also known as Fermat theorem), that every odd 4k?+?1 prime number is a sum of two perfect squares. Also, we have not to forget about 2, as 2?=?12?+?12. \nNow, how can we get this task accepted? Simply using the sieve will exceed memory limit, but we can use block sieve, that works in the same time (), but uses  of memory. Also, we can use precalc for intervals of length equal to 100000. Also, Romka used the fact, that using bitset compress memory up to 8 times, and it will enough to suite the ML. Also, it would be nice to count only odd numbers while buliding the sieve.",
    "hint": []
}