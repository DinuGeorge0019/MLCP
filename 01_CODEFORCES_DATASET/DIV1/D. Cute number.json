{
    "link": "https://codeforces.com//contest/1687/problem/D",
    "problemId": "1419368",
    "problem_idx": "D",
    "shortId": "1687D",
    "contest_number": "1687",
    "problem_submissions": {
        "E": [
            159400142,
            159409445,
            159415903
        ],
        "D": [
            159385709,
            159382982,
            159386487,
            159387507,
            159397573,
            159399320,
            159391569,
            159397786,
            159396436,
            159395456,
            159398210,
            159399180,
            159407593,
            159403303,
            159404538,
            159409257,
            180746841,
            159402849,
            159401651,
            159407966,
            160388189,
            159436063,
            159436040,
            159435984,
            159419781,
            159403828
        ],
        "C": [
            159372815,
            159372262,
            159366644,
            159367127,
            159364840,
            159377203,
            159381172,
            159372251,
            159382727,
            159384371,
            159375023,
            159388232,
            159376434,
            159382167,
            159380993,
            159376872,
            159376695,
            159388502,
            159386180,
            159388678
        ],
        "B": [
            159359094,
            159359944,
            159359502,
            159356648,
            159356713,
            159358784,
            159359353,
            159359146,
            159369441,
            159357746,
            159365304,
            159359951,
            159364501,
            159359761,
            159371294,
            159365665,
            159363760,
            159364175,
            159366158,
            159367949
        ],
        "A": [
            159352673,
            159354526,
            159354098,
            159352807,
            159352456,
            159352554,
            159353893,
            159353089,
            159361438,
            159353196,
            159354069,
            159353562,
            159353431,
            159353777,
            159361194,
            159354902,
            159354475,
            159353974,
            159355709,
            159356539
        ]
    },
    "name": "D. Cute number",
    "statement": "Ran is especially skilled in computation and mathematics. It is said\r\nthat she can do unimaginable calculation work in an instant. Ran Yakumo\r\nis a cute girl who loves creating cute Maths problems.Let f(x) be the\r\nminimal square number greater than x, and g(x) be the maximal square\r\nnumber less than or equal to x. For example, f(1)=f(2)=g(4)=g(8)=4.A\r\npositive integer x is if x-g(x)<f(x)-x. For example, 1,5,11 are cute\r\nintegers, while 3,8,15 are not. Ran gives you an array a of length n.\r\nShe wants you to find the smallest non-negative integer k such that\r\na_i + k is a cute number for any element of a.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n#include <array>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) {fprintf(stderr, __VA_ARGS__);fflush(stderr);}\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int N = (int)1e6 + 7;\nint a[N];\nint n;\nint jmp[N];\n\nint myJump(int v, int x) {\n\tif (jmp[v] != v) return jmp[v] = myJump(jmp[v], x);\n\tif (v == n - 1 || a[v + 1] - a[v] > x) return v;\n\treturn jmp[v] = myJump(v + 1, x);\n}\n\nll mySqrt(ll x) {\n\tll y = (ll)sqrt(x);\n\twhile(y * y < x) y++;\n\twhile(y * y > x) y--;\n\treturn y;\n}\nvoid solve(ll x, ll y, ll &L, ll &R) {\n\tll z = x + L;\n\tll k = mySqrt(z);\n\tif (k * k + k < z) k++;\n\tL = max(L, k * k - x);\n\tR = min(R, k * k + k - y);\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%d\", &a[i]);\n\t\tjmp[i] = i;\n\t}\n\tfor (ll k = 1;; k++) {\n\t\tll L = k * k - a[0], R = k * k + k - a[0];\n\t\tif (R < 0) continue;\n\t\tif (L < 0) L = 0;\n\t\tint v = 0;\n\t\twhile(L <= R && v < n) {\n\t\t\tint u = myJump(v, k);\n\t\t\tsolve(a[v], a[u], L, R);\n\t\t\tv = u + 1;\n\t\t}\n\t\tif (L <= R) {\n\t\t\tprintf(\"%lld\\n\", L);\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "data structures",
        "dsu",
        "implementation",
        "math"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Cute number.json",
    "editorial_link": "https://codeforces.com//blog/entry/103493",
    "editorial": "Solution For any integer , iff we can find satisfying , we have , which\nmeans is beautiful. Define .It is easy to find that , and there are only\nuseful because . Enumerate (), and calculate the range of in order. It\ncan be shown that the range is an interval for all . So we can solve\nthis problem in .We call a jump if . Assuming , there is no more than\njumps. We only need to enumerate jumps to calculate the ranges. We can\nuse linked list or set in C++ to maintain it.The time complexity is .\n"
}