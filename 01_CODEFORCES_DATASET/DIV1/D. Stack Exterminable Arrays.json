{
    "link": "https://codeforces.com//contest/1240/problem/D",
    "problemId": "432409",
    "problem_idx": "D",
    "shortId": "1240D",
    "contest_number": "1240",
    "problem_submissions": {
        "E": [
            62021022,
            62035875,
            62035850,
            62028210,
            62027934,
            62027922,
            62020968,
            62019492,
            62018107,
            62027376,
            62027344,
            62027323,
            62027283,
            62027247,
            62024590,
            62019193,
            62026365,
            62033510,
            66614259
        ],
        "F": [
            62015871,
            62023134,
            62022377,
            62098107,
            62038718,
            62038624,
            62038494,
            62038407,
            62038292,
            74689890,
            62022214
        ],
        "C": [
            62011492,
            62004160,
            62005302,
            62005113,
            62008834,
            61997769,
            62007006,
            62008153,
            62005139,
            62004806,
            62004551,
            62010900,
            62006495,
            62006440,
            62005717,
            62009451,
            62008088,
            62007344,
            62007020,
            62010351
        ],
        "D": [
            62009147,
            62009402,
            62014575,
            62037666,
            62037540,
            62037485,
            62037237,
            62030534,
            62030405,
            62030387,
            62030368,
            62030266,
            62027938,
            62013459,
            62012657,
            62006383,
            62007439,
            62012558,
            62014620,
            62005092,
            62013564,
            62012342,
            62013093,
            62013916,
            62013931,
            62014362,
            62014894
        ],
        "B": [
            61999051,
            61998153,
            62000446,
            61993443,
            62005202,
            62003856,
            62003729,
            61994391,
            61998951,
            61998615,
            61999693,
            62002895,
            62001444,
            62001486,
            61999611,
            62004268,
            62001331,
            62002370,
            62000744,
            61994760
        ],
        "A": [
            61993335,
            61995494,
            62011119,
            61998900,
            61995613,
            62001949,
            61995342,
            62005037,
            61996323,
            61994369,
            61994535,
            62007707,
            61995405,
            61994877,
            61995746,
            61997040,
            61995992,
            61997766,
            61995459,
            62004034
        ]
    },
    "name": "D. Stack Exterminable Arrays",
    "statement": "Let’s look at the following process: initially you have an empty stack\r\nand an array s of the length l. You are trying to push array elements to\r\nthe stack in the order s_1, s_2, s_3,\r\ndots s_{l}. Moreover, if the stack is empty or the element at the top of\r\nthis stack is not equal to the current element, then you just push the\r\ncurrent element to the top of the stack. Otherwise, you don’t push the\r\ncurrent element to the stack and, moreover, pop the top element of the\r\nstack. If after this process the stack remains empty, the array s is\r\nconsidered .There are samples of stack exterminable arrays: [1, 1]; [2,\r\n1, 1, 2]; [1, 1, 2, 2]; [1, 3, 3, 1, 2, 2]; [3, 1, 3, 3, 1, 3]; [3, 3,\r\n3, 3, 3, 3]; [5, 1, 2, 2, 1, 4, 4, 5]; Let’s consider the changing of\r\nstack more details if s = [5, 1, 2, 2, 1, 4, 4, 5] (the top of stack is\r\nhighlighted). after pushing s_1 = 5 the stack turn into [\r\ntextbf{5}]; after pushing s_2 = 1 the stack turn into [5,\r\ntextbf{1}]; after pushing s_3 = 2 the stack turn into [5, 1,\r\ntextbf{2}]; after pushing s_4 = 2 the stack turn into [5,\r\ntextbf{1}]; after pushing s_5 = 1 the stack turn into [\r\ntextbf{5}]; after pushing s_6 = 4 the stack turn into [5,\r\ntextbf{4}]; after pushing s_7 = 4 the stack turn into [\r\ntextbf{5}]; after pushing s_8 = 5 the stack is empty. You are given an\r\narray a_1, a_2,\r\nldots, a_n. You have to calculate the number of its subarrays which are\r\nstack exterminable.Note, that you have to answer q independent queries.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nmt19937 mrand(random_device{}()); \nconst ll mod=1000000007;\nint rnd(int x) { return mrand() % x;}\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nconst int N=301000;\n\nstruct node {\n\tmap<int,node*> go;\n\tint cnt;\n\tnode *p;\n}pool[N],*cur,*rt;\nint top,s[N],x,n,_;\nll ans;\n\nnode *newnode(node *f) {\n\tnode *q=cur++;\n\tq->go.clear(); q->cnt=0; q->p=f;\n\treturn q;\n}\n\nvoid solve() {\n\tscanf(\"%d\",&n);\n\tcur=pool;\n\trt=newnode(0);\n\ttop=0;\n\tnode *p=rt;\n\tp->cnt++;\n\tans=0;\n\trep(i,1,n+1) {\n\t\tscanf(\"%d\",&x);\n\t\tif (top==0||s[top-1]!=x) {\n\t\t\ts[top++]=x;\n\t\t\tif (!p->go.count(x)) p->go[x]=newnode(p);\n\t\t\tp=p->go[x];\n\t\t\tans+=p->cnt;\n\t\t\tp->cnt++;\n\t\t} else {\n\t\t\t--top;\n\t\t\tp=p->p;\n\t\t\tans+=p->cnt;\n\t\t\tp->cnt++;\n\t\t}\n//\t\tprintf(\"%d %d %d\\n\",i,ans,p-pool);\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\n\nint main() {\n\tfor (scanf(\"%d\",&_);_;_--) {\n\t\tsolve();\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "divide and conquer",
        "dp",
        "hashing"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Stack Exterminable Arrays.json",
    "editorial_link": "https://codeforces.com/blog/entry/70358",
    "editorial": "Let's understand how calculate the array nxt\n, such that nxtl\n is equal to the minimum index r>l\n such that subarray alr\n is stack exterminable. If there is no such index, then nxtl=?1\n.\n\nIf we calculate this array then we solve this task by simple dynamic programming.\n\nLet's calculate it in order nxtn,nxtn?1,,nxt1\n by dynamic programming. At first consider simple case. If ai=ai+1\n, then nxti=i+1\n. Otherwise we have to \"add\" the block ai+1anxti+1\n (of course, nxti+1\n should be not equal to ?1\n) and check that ai=a1+nxti+1\n. If this (ai=a1+nxti+1\n) also is not true, then you have to add a new block a1+nxti+1anxt1+nxti+1\n and check the condition ai=a1+nxt1+nxti+1\n. If this condition also is not try, then you have to add a new block and so on.\n\nIt is correct solution, but it can be too slowly. Let's understand, that we add blocks to ai\n until condition ai=a1+nxt\n is holds. Let's assume, that we have an array nxtX\n (this array contains a hashMaps, for example you can use map in C++), such that nxtXi,x\n is is equal to the minimum index r>l\n such that subarray alr\n is stack exterminable and x=ar+1\n. Then we can easily calculate the value nxti=nxtXi+1,ai+1\n. Remains to understand, how to calculate nxtXi\n. For this we just can make an assignment nxtXi=nxtXnxti+1\n. And then update nxtXi,anxti+1=nxti+1\n.\n\nBut I deceived you a little. We can't make an assignment nxtXi=nxtXnxti+1\n because it is to slow. Instead that you need to swap elements nxtXi\n and nxtXnxti+1\n, this can be done using the function swap\n in C++ or Java (time complexity of swap\n if O(1)\n).",
    "hint": []
}