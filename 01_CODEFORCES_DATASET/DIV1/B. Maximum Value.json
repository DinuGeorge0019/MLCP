{
    "link": "https://codeforces.com//contest/484/problem/B",
    "problemId": "16629",
    "problem_idx": "B",
    "shortId": "484B",
    "contest_number": "484",
    "problem_submissions": {
        "C": [
            8575684,
            8569482,
            8574840,
            8573079,
            8568696,
            8568968,
            8568953,
            8573362,
            8573344,
            8575027,
            8567400,
            8571965,
            8576498,
            8577415
        ],
        "D": [
            8571455,
            8567671,
            8570841,
            8566590,
            8573430,
            8573737,
            8570084,
            8567140,
            8569185,
            8572829,
            8569478,
            8568570,
            8570839,
            8567603,
            8570405,
            8575447,
            8576600,
            8570465
        ],
        "E": [
            8569351,
            8573776,
            8571793,
            8588317,
            8599514,
            8573714,
            8570287,
            8574072,
            8576131,
            8573638,
            8564834,
            8574687
        ],
        "B": [
            8564067,
            8565086,
            8563436,
            8564295,
            8563987,
            8571069,
            8564862,
            8565541,
            8565694,
            8569521,
            8562876,
            8561100,
            8562368,
            8567973,
            8567211,
            8562295,
            8570348,
            8565013
        ],
        "A": [
            8560332,
            8562129,
            8565876,
            8560720,
            8562390,
            8561095,
            8562048,
            8560946,
            8561471,
            8562609,
            8565347,
            8560391,
            8562975,
            8560379,
            8563409,
            8565195,
            8567495,
            8562118
        ]
    },
    "name": "B. Maximum Value",
    "statement": "You are given a sequence consisting of integers. Find the maximum\r\npossible value of (integer remainder of divided by ), where and .\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <ctime>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <fstream>\n#include <cstdlib>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <numeric>\n\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#define forn(i, n) for (int i = 0; i < (int)(n); ++i)\n#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)\n#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)\n\nusing namespace std;\n\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef long long i64;\ntypedef vector<i64> vi64;\ntypedef vector<vi64> vvi64;\n\nint a[2000011];\nint prv[2000011];\n\nint main() {\n    ios::sync_with_stdio(false);\n    cout.precision(10);\n    cout << fixed;\n#ifdef LOCAL_DEFINE\n    freopen(\"input.txt\", \"rt\", stdin);\n#endif\n\n    int N;\n    cin >> N;\n    forn(i, N) {\n        int x;\n        cin >> x;\n        a[x] = 1;\n    }\n\n    prv[1] = 0;\n    for (int i = 2; i <= 2000000; ++i) {\n        if (a[i - 1]) prv[i] = i - 1;\n        else prv[i] = prv[i - 1];\n    }\n    int ans = 0;\n    for (int i = 1; i <= 1000000; ++i) {\n        if (!a[i]) continue;\n//        cerr << i << '\\n';\n        for (int k = 2; i * k <= 2000000; ++k) {\n//            cerr << prv[i * k] << '\\n';\n            ans = max(ans, prv[i * k] % i);\n        }\n    }\n    cout << ans << '\\n';\n\n#ifdef LOCAL_DEFINE\n    cerr << \"Time elapsed: \" << 1.0 * clock() / CLOCKS_PER_SEC << \" s.\\n\";\n#endif\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "math",
        "sortings",
        "two pointers"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Maximum Value.json",
    "editorial_link": "https://codeforces.com//blog/entry/14592",
    "editorial": "Let us iterate over all different . Since we need to maximize , then\r\niterate all integer (such divisible by ) in range from to , where\r\ndoubled maximum value of the sequence. For each such we need to find\r\nmaximum , such . Limits for numbers allow to do this in time with an\r\narray. After that, update answer by value . Total time complexity is .\r\n"
}