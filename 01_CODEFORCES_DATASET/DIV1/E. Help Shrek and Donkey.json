{"link": "https://codeforces.com//contest/98/problem/E", "problemId": "516", "problem_idx": "E", "shortId": "98E", "contest_number": "98", "problem_submissions": {"D": [559046, 560437, 558160, 558952, 559593, 560171, 559775, 560524, 560585], "C": [557680, 558912, 558966, 558795, 564197, 559465, 559563, 560488, 559529], "A": [555563, 555550, 556122, 555809, 555571, 555798, 555472, 555675, 557529, 556303, 555989, 556333, 557311, 555713, 556337, 560215], "E": [566997], "B": []}, "name": "E. Help Shrek and Donkey", "statement": "Shrek and the Donkey (as you can guess, they also live in the far away\r\nkingdom) decided to play a card game called YAGame. The rules are very\r\nsimple: initially Shrek holds cards and the Donkey holds cards (the\r\nplayers do not see each other\u2019s cards), and one more card lies on the\r\ntable face down so that both players cannot see it as well. Thus, at the\r\nbeginning of the game there are overall cards. Besides, the players know\r\nwhich cards the pack of cards consists of and their own cards (but they\r\ndo not know which card lies on the table and which ones the other player\r\nhas). The players move in turn and Shrek starts. During a move a player\r\ncan: Try to guess which card is lying on the table. If he guesses\r\ncorrectly, the game ends and he wins. If his guess is wrong, the game\r\nalso ends but this time the other player wins. Name any card from the\r\npack. If the other player has such card, he must show it and put it\r\naside (so that this card is no longer used in the game). If the other\r\nplayer doesn\u2019t have such card, he says about that. Recently Donkey\r\nstarted taking some yellow pills and winning over Shrek. Now Shrek wants\r\nto evaluate his chances to win if he too starts taking the pills.Help\r\nShrek assuming the pills are good in quality and that both players using\r\nthem start playing in the optimal manner.\r\n", "solutions": ["#include <cstdio>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\ndouble pd[2200][2200];\n\nint main(){\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    \n    int N = max(n,m);\n    \n    pd[0][0] = 1;\n    for(int i = 1; i <= N; i++){\n        pd[i][0] = 1;\n    }\n    for(int j = 1; j <= N; j++){\n        pd[0][j] = 1.0/(j+1);\n    }\n    \n    for(int sum = 2; sum <= 2*N; sum++){\n        for(int i = 1; i <= N; i++){\n            int j = sum-i;\n            if(j < 1 || j > N)continue;\n            pd[i][j] = 1.0/(j+1);\n            double a = 1;\n            double b = 1.0 - pd[j][i-1];\n            double c = j*(1.0-pd[j-1][i])/(j+1);\n            double d = c + 1.0/(j+1);\n            double p,q;\n            if(fabs(a-b-c+d) < 1E-8){\n                p = 1;\n                q = 1;\n            }else{\n                p = (d-c)/(a-b-c+d);\n                q = (d-b)/(a-b-c+d);\n            }\n            pd[i][j] = max(pd[i][j], p*q*a + p*(1.0-q)*b + (1.0-p)*q*c + (1.0-p)*(1.0-q)*d);\n        }\n    }\n    printf(\"%.10lf %.10lf\\n\", pd[n][m], 1.0-pd[n][m]);\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["dp", "games", "math", "probabilities"], "dificulty": "2700", "interactive": false}