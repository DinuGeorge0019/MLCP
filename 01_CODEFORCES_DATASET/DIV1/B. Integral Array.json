{
    "link": "https://codeforces.com//contest/1648/problem/B",
    "problemId": "1318590",
    "problem_idx": "B",
    "shortId": "1648B",
    "contest_number": "1648",
    "problem_submissions": {
        "E": [
            148585486,
            148584955,
            148581597,
            148589473,
            148591135,
            148593463,
            148593416,
            148597505,
            148594995,
            148595032,
            148597135,
            148605923,
            148598836,
            148596396,
            148600942,
            148602000,
            148600796,
            148581620,
            148583646,
            148661874,
            148661844,
            148587369
        ],
        "D": [
            148564585,
            148566578,
            148571497,
            148568116,
            148573822,
            148573519,
            148574211,
            148573964,
            148574945,
            148580191,
            148578139,
            148578497,
            148607894,
            148582725,
            148577475,
            148577301,
            148585962,
            148619534,
            148575997,
            148608357
        ],
        "C": [
            148552509,
            148552464,
            148553813,
            148558198,
            148558432,
            148554501,
            148557954,
            148555117,
            148558520,
            148556243,
            148554082,
            148553770,
            148555702,
            148554883,
            148560099,
            148557117,
            148552206,
            148558570,
            148554233,
            148559666
        ],
        "B": [
            148545010,
            148546110,
            148555976,
            148548495,
            148550449,
            148545480,
            148551044,
            148549564,
            148551420,
            148544796,
            148546968,
            148558793,
            148547056,
            148545781,
            148549549,
            148547973,
            148544722,
            148548048,
            148546238,
            148550231
        ],
        "A": [
            148541636,
            148541670,
            148541532,
            148543210,
            148543257,
            148541615,
            148546248,
            148544655,
            148547990,
            148541584,
            148542460,
            148542006,
            148542056,
            148542119,
            148542975,
            148543237,
            148541644,
            148542337,
            148541655,
            148542140
        ],
        "F": [
            148613542,
            151414821,
            211208832,
            211208769,
            211208727,
            211208586
        ]
    },
    "name": "B. Integral Array",
    "statement": "You are given an array a of n positive integers numbered from 1 to n.\r\nLet\u2019s call an array if for any two, not necessarily different, numbers x\r\nand y from this array, x\r\nge y, the number\r\nleft\r\nlfloor\r\nfrac{x}{y}\r\nright\r\nrfloor (x divided by y with rounding down) is also in this array.You are\r\nguaranteed that all numbers in a do not exceed c. Your task is to check\r\nwhether this array is integral.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n, c;\n    std::cin >> n >> c;\n    \n    std::vector<int> cnt(c + 1), sum(c + 1);\n    for (int i = 0; i < n; i++) {\n        int x;\n        std::cin >> x;\n        cnt[x]++;\n    }\n    for (int i = 1; i <= c; i++) {\n        sum[i] = sum[i - 1] + cnt[i];\n    }\n    \n    for (int y = 1; y <= c; y++) {\n        if (!cnt[y]) {\n            continue;\n        }\n        \n        for (int i = 1; i * y <= c; i++) {\n            int r = std::min(c, i * y + y - 1);\n            if (sum[r] - sum[i * y - 1] > 0) {\n                if (cnt[i] == 0) {\n                    std::cout << \"No\\n\";\n                    return;\n                }\n            }\n        }\n    }\n    \n    std::cout << \"Yes\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "data structures",
        "math"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Integral Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/100592",
    "editorial": "Let\u00e2\u0080\u0099s consider and . If then , but is not in , so the answer is \"No\".\r\nLet\u00e2\u0080\u0099s suggest that and are already given. We can check if there exists\r\nsuch from the mentioned segment in . It is done by considering array the\r\namount of occurrences of in , and prefix sums for that array. Now we\r\nonly need to run this check for each and . To do that we can iterate\r\nthrough all and in increasing order. If then there is definitely no such\r\nso we can consider the next . This optimization speeds up the process\r\nand makes the whole solution work in .\r\n"
}