{"link": "https://codeforces.com//contest/243/problem/C", "problemId": "2198", "problem_idx": "C", "shortId": "243C", "contest_number": "243", "problem_submissions": {"C": [2572717, 2570554, 2571267, 2570319, 2570545, 2570743, 2570904, 2572447, 2569802, 2571867, 2571670, 2571547, 2572458, 2572351, 2572725, 2572445, 2571597], "B": [2571032, 2569391, 2569867, 2569039, 2577625, 2577586, 2570199, 2569750, 2570050, 2570000, 2574723, 2570092, 2570360, 2570412, 2570400, 2569098, 2570322, 2570512, 2570546], "A": [2567965, 2567859, 2571004, 2567919, 2568141, 2568865, 2568305, 2568196, 2567807, 2568129, 2568622, 2567937, 2568123, 2567849, 2568409, 2569040, 2568458], "D": [2572629, 2572978, 2574124]}, "name": "C. Colorado Potato Beetle", "statement": "Old MacDonald has a farm and a large potato field, square meters in\r\nsize. The field is divided into square garden beds, each bed takes up\r\none square meter.Old McDonald knows that the Colorado potato beetle is\r\nabout to invade his farm and can destroy the entire harvest. To fight\r\nthe insects, Old McDonald wants to spray some beds with insecticides.So\r\nOld McDonald went to the field, stood at the center of the central field\r\nbed and sprayed this bed with insecticides. Now he\u2019s going to make a\r\nseries of movements and spray a few more beds. During each movement Old\r\nMcDonald moves left, right, up or down the field some integer number of\r\nmeters. As Old McDonald moves, he sprays all the beds he steps on. In\r\nother words, the beds that have any intersection at all with Old\r\nMcDonald\u2019s trajectory, are sprayed with insecticides.When Old McDonald\r\nfinished spraying, he wrote out all his movements on a piece of paper.\r\nNow he wants to know how many beds won\u2019t be infected after the invasion\r\nof the Colorado beetles.It is known that the invasion of the Colorado\r\nbeetles goes as follows. First some bed on the field border gets\r\ninfected. Than any bed that hasn\u2019t been infected, hasn\u2019t been sprayed\r\nwith insecticides and has a common side with an infected bed, gets\r\ninfected as well. Help Old McDonald and determine the number of beds\r\nthat won\u2019t be infected by the Colorado potato beetle.\r\n", "solutions": ["#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <ctime>\n#include <cstdlib>\n#include <map>\n#include <set>\n#include <algorithm>\n#include <queue>\n#include <deque>\n#include <bitset>\n#include <string>\n#include <vector>\n#include <sstream>\n#define zero(a) (abs(a)<eps)\n#define lowbit(a) ((a)&(-(a)))\n#define abs(a) ((a)>0?(a):(-(a)))\n#define dj(x1,y1,x2,y2) ((x1)*(x2)+(y1)*(y2))\n#define cj(x1,y1,x2,y2) ((x1)*(y2)-(x2)*(y1))\n#define dis(x1,y1,x2,y2) (((x2)-(x1))*((x2)-(x1))+((y2)-(y1))*((y2)-(y1)))\nconst double eps = 1e-9;\nconst double pi = acos(-1);\nconst int oo = 1000000000;\nconst int mod = 1000000009;\nconst double E = 2.7182818284590452353602874713527;\nusing namespace std;\n\nstruct case1\n{\n   bool flag;\n   int x,y1,y2;\n}rec[3001];\nbool mark[3005][3005];\nint rx[3005],ry[3005],l[4][2]={{1,0},{-1,0},{0,1},{0,-1}};\nint ox=1,oy=1;\nlong long ans=2000000010LL*2000000010LL;\n   \nvoid dfs(int x,int y)\n{\n   mark[x][y]=1;\n   ans-=1LL*(rx[x+1]-rx[x])*(ry[y+1]-ry[y]);\n   for (int i=0;i<4;i++)\n   {\n      int xx=x+l[i][0],yy=y+l[i][1];\n      if (xx&&yy&&xx<ox&&yy<oy&&!mark[xx][yy])\n         dfs(xx,yy);\n   }\n}\n\nint main()\n{\n   int n,o=0,x=1000000005,y=1000000005;\n   cin>>n;\n   rx[++ox]=2000000010;\n   ry[++oy]=2000000010;\n   for (int i=1;i<=n;i++)\n   {\n      char c,t[5];\n      int l;\n      scanf(\"%s%d\",t,&l);\n      c=t[0];\n      if (c=='L')\n      {\n         rec[++o]=(case1){0,y,x-l,x+1};\n         rx[++ox]=x-l;\n         rx[++ox]=x+1;\n         ry[++oy]=y;\n         ry[++oy]=y+1;\n         x-=l;\n      }\n      else if (c=='R')\n      {\n         rec[++o]=(case1){0,y,x,x+l+1};\n         rx[++ox]=x+l+1;\n         rx[++ox]=x;\n         ry[++oy]=y;\n         ry[++oy]=y+1;\n         x+=l;\n      }\n      else if (c=='D')\n      {\n         rec[++o]=(case1){1,x,y-l,y+1};\n         rx[++ox]=x;\n         rx[++ox]=x+1;\n         ry[++oy]=y-l;\n         ry[++oy]=y+1;\n         y-=l;\n      }\n      else\n      {\n         rec[++o]=(case1){1,x,y,y+l+1};\n         rx[++ox]=x;\n         rx[++ox]=x+1;\n         ry[++oy]=y+l+1;\n         ry[++oy]=y;\n         y+=l;\n      }\n   }\n   sort(rx+1,rx+ox+1);\n   ox=unique(rx+1,rx+ox+1)-rx-1;\n   sort(ry+1,ry+oy+1);\n   oy=unique(ry+1,ry+oy+1)-ry-1;\n   for (int i=1;i<=o;i++)\n      if (rec[i].flag==0)\n      {\n         int y;\n         for (y=1;ry[y]<rec[i].x;y++);\n         for (int j=1;j<ox;j++)\n            if (rx[j]>=rec[i].y1&&rx[j+1]<=rec[i].y2)\n               mark[j][y]=1;\n      }\n      else\n      {\n         int x;\n         for (x=1;rx[x]<rec[i].x;x++);\n         for (int j=1;j<oy;j++)\n            if (ry[j]>=rec[i].y1&&ry[j+1]<=rec[i].y2)\n               mark[x][j]=1;\n      }\n   for (int i=1;i<ox;i++)\n   {\n      if (!mark[i][1])\n         dfs(i,1);\n      if (!mark[i][oy-1])\n         dfs(i,oy-1);\n   }\n   for (int i=1;i<oy;i++)\n   {\n      if (!mark[1][i])\n         dfs(1,i);\n      if (!mark[ox-1][i])\n         dfs(ox-1,i);\n   }\n   cout<<ans<<endl;\n   return 0;\n}\n"], "input": "", "output": "", "tags": ["dfs and similar", "implementation"], "dificulty": "2200", "interactive": false}