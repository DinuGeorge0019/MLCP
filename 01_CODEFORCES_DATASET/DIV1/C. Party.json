{
    "link": "https://codeforces.com//contest/906/problem/C",
    "problemId": "140846",
    "problem_idx": "C",
    "shortId": "906C",
    "contest_number": "906",
    "problem_submissions": {
        "D": [
            149029866,
            33557818,
            33559276,
            33563941,
            33561236,
            33558964,
            33560338,
            33552737,
            33564592,
            33555169,
            33563596,
            33557368,
            33574046,
            33570274,
            33569097,
            33952208,
            33561210,
            33554741,
            33558804,
            33566104,
            33558203,
            33550675
        ],
        "E": [
            33563788,
            51774603,
            33570251,
            42678760,
            33642683,
            33642639,
            57252155,
            33595209
        ],
        "A": [
            33559632,
            33542429,
            33541419,
            33540284,
            33543709,
            33540394,
            33541815,
            33539940,
            33541391,
            33544813,
            33540734,
            33541098,
            33542736,
            33541277,
            33565456,
            33540685,
            33540110,
            33569386
        ],
        "C": [
            33554104,
            33555026,
            33556927,
            33558399,
            33566145,
            33563804,
            33559596,
            33558825,
            33566746,
            33569757,
            33570264,
            33560203,
            33561015,
            33582668,
            33568743,
            33550511,
            33571601,
            33568875,
            33565260
        ],
        "B": [
            33543854,
            33551699,
            33549379,
            33555394,
            33548541,
            33552331,
            33565116,
            33549927,
            33571875,
            33555675,
            33564877,
            33554448,
            33562774,
            33555252,
            33583579,
            33583372,
            33554912,
            33572090
        ]
    },
    "name": "C. Party",
    "statement": "Arseny likes to organize parties and invite people to it. However, not\r\nonly friends come to his parties, but friends of his friends, friends of\r\nfriends of his friends and so on. That’s why some of Arseny’s guests can\r\nbe unknown to him. He decided to fix this issue using the following\r\nprocedure.At each step he selects one of his guests , who pairwise\r\nintroduces all of his friends to each other. After this action any two\r\nfriends of become friends. This process is run until all pairs of guests\r\nare friends.Arseny doesn’t want to spend much time doing it, so he wants\r\nto finish this process using the minimum number of steps. Help Arseny to\r\ndo it.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nint t,n,m,u,v,g[30],ret,rew,mark[30],f[30],pa[30][30];\nint find(int x) { return f[x]==x?x:f[x]=find(f[x]); }\nvoid dfs(int S,int u,int v) {\n\tif (v>=ret) return;\n\tif (u==n) {\n\t\tbool suc=1;\n\t\tint ff=-1;\n\t\trep(i,0,n) if (S&(1<<i)) {\n\t\t\tif (ff==-1) ff=find(i); else {\n\t\t\t\tif (find(i)!=ff) {\n\t\t\t\t\tsuc=0; break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ((g[i]&S)==0) { suc=0; break; }\n\t\t}\n\t\tif (suc) {\n\t\t\tret=v,rew=S;\n\t\t}\n\t} else {\n\t\trep(i,0,n) pa[u][i]=f[i];\n\t\tint su=find(u);\n\t\trep(i,0,n) if (g[u]&S&(1<<i)) f[find(i)]=su;\n\t\tdfs(S|(1<<u),u+1,v+1);\n\t\trep(i,0,n) f[i]=pa[u][i];\n\t\tdfs(S,u+1,v);\n\t}\n}\nvoid dfs(int u) {\n\tmark[u]=0;\n\trep(v,0,n) if ((g[u]&(1<<v))&&mark[v]) dfs(v);\n\tprintf(\"%d \",u+1);\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\trep(i,0,m) {\n\t\tscanf(\"%d%d\",&u,&v);\n\t\t--u; --v;\n\t\tg[u]|=(1<<v); g[v]|=(1<<u);\n\t}\n\tif (m==n*(n-1)/2) {\n\t\tputs(\"0\");\n\t\treturn 0;\n\t}\n\tret=n+1;\n\trep(i,0,n) g[i]|=(1<<i),f[i]=i;\n\tdfs(0,0,0);\n\tprintf(\"%d\\n\",ret);\n\trep(i,0,n) if (rew&(1<<i)) {\n\t\tmark[i]=1;\n\t}\n\trep(i,0,n) if (mark[i]) {\n\t\tdfs(i);\n\t\treturn 0;\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "dp",
        "graphs"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Party.json",
    "editorial_link": "https://codeforces.com//blog/entry/56601",
    "editorial": "Let s formulate and prove several facts.1. If we change an call order,\r\nthe result doesn t change. Let s consider two vertices which are called\r\nconsecutively. If they are not connected by edge, then regardless of the\r\norder, we get that at the end, neighbours of each vertex form a\r\nclique.If they are connected, then independently on the order, we get\r\nclique from 2 vertices and all neighbours of them.2. If graph is a tree,\r\nit s sufficient to take as an answer all its vertices except leaves.\r\nIndeed, if we consider any 2 tree vertices, we get that all vertices on\r\nthe way between them are in the answer. Each vertex reduces on 1 the\r\ndistance between those 2, it means that the distance between them is\r\n1.3. Let s select from source graph spanning tree, that has the largest\r\nnumber of leaves. One can say that we can use all vertices except leaves\r\nas an answer.Obviously from point 2, that after all our operations with\r\nsuch set graph will become complete. Let s show that it is minimal\r\nnumber of vertices.Let we selected some set of vertices, that is the\r\nanswer. Then subgraph of given graph, built on the selected set of\r\nvertices, should be connected (otherwise between connected component can\r\nt appear the edge and graph can t be complete. Also, each of vertices,\r\nthat isn t in an answer should have at least one of neighbours selected\r\n(otherwise it is impossible to add new edge to it). Now let s select a\r\nspanning tree in selected set (it s possible because our set is\r\nconnected) and add non-selected vertices into the tree as leafs. Then we\r\nsee that our selected can be represented as spanning tree in the initial\r\ngraph, in which all selected vertices are all non-leaf vertices and\r\npossibly, some leafs; but leafs can be obviously removed from the\r\nselected set by proved above. So, one of optimal answers can be\r\ndescribed as set of non-leaf vertices of spanning tree with minimal\r\npossible number of non-leaves and, as a consequence, with maximal\r\npossible number of leaves, QED.4. Implementation. It is necessary to\r\nimplement an algorithm that should work for or faster or with worse\r\nasymptotic but with non-asymptotical optimization. One of possible\r\nsolutions is following. Let contain any subset of vertices as a -bit\r\nmask; for example, mask of a subset containing vertices will be equal to\r\n. Then, for subset with mask , vertex is in set iff is not equal to 0;\r\nhere is a bitwise AND.Let for each vertex , be a mask of subset of\r\nvertices containing vertex and itâs neighbours. Array can be calculated\r\neasily. Then, let be 1 for some mask iff subset coded by is connected.\r\nArray can be calculated in by the following algorithm: for all vertices\r\n(let vertices be enumerated in 0-indexation), is assigned to 1; for all\r\nother masks, should be equal to 0; then, go through all masks in\r\nincreasing order by a simple cycle; let be current mask in the cycle; if\r\n, then go to the next iteration of cycle; otherwise, let be vertices of\r\nsubset coded by . Then, mask for | as bitwise OR is a mask coding a\r\nsubset of vertices containing vertices of mask and their neighbours.\r\nThen, for each vertex in subset of mask we assign to be 1. The described\r\nalgorithm works in ; it can be proved by induction that at the end, for\r\nmask iff is a code of connected subset of vertices.But how to find an\r\nanswer? Notice that mask is a code of good (for our purposes) subset iff\r\nand . For each mask , we can check if itâs good in time having an array\r\ncalculated; the answer is a good mask with minimal possible number of\r\nelements in the corresponding set.\r\n",
    "hint": []
}