{
    "link": "https://codeforces.com//contest/91/problem/A",
    "problemId": "468",
    "problem_idx": "A",
    "shortId": "91A",
    "contest_number": "91",
    "problem_submissions": {
        "E": [
            503728,
            502526,
            502324,
            502390,
            507083,
            507754,
            507742,
            507704,
            503634,
            502642,
            504726,
            503639,
            504548,
            503486,
            503083
        ],
        "D": [
            502276,
            503817,
            503388,
            504083,
            503790,
            503692,
            503693,
            502719,
            503528
        ],
        "C": [
            500481,
            501267,
            503127,
            500359,
            500890,
            501727,
            501793,
            501879,
            501823,
            691241,
            500724
        ],
        "B": [
            500029,
            500306,
            499798,
            499713,
            500770,
            500316,
            500169,
            500955,
            501299,
            500855,
            500308,
            500853,
            500345,
            500259,
            501038,
            510135,
            501272,
            500210
        ],
        "A": [
            499372,
            499587,
            499153,
            501187,
            499642,
            499614,
            500028,
            500088,
            499525,
            499582,
            499555,
            499393,
            499483,
            499408,
            510127,
            499780,
            499366
        ]
    },
    "name": "A. Newspaper Headline",
    "statement": "A newspaper is published in Walrusland. Its heading is , it consists of\r\nlowercase Latin letters. Fangy the little walrus wants to buy several\r\nsuch newspapers, cut out their headings, glue them one to another in\r\norder to get one big string. After that walrus erase several letters\r\nfrom this string in order to get a new word . It is considered that when\r\nFangy erases some letter, thereâ€™s no whitespace formed instead of the\r\nletter. That is, the string remains unbroken and it still only consists\r\nof lowercase Latin letters.For example, the heading is \"\". If we take\r\ntwo such headings and glue them one to the other one, we get \"\". If we\r\nerase the letters on positions and , we get a word \"\".Which least number\r\nof newspaper headings will Fangy need to glue them, erase several\r\nletters and get word ?\r\n",
    "solutions": [
        "#pragma comment(linker, \"/STACK:60000000\")\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <ctime>\n#include <cstring>\n#include <cassert>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <queue>\n#include <functional>\n\nusing namespace std;\n\n#define forn(i, n) for(int i = 0; i < (int)(n); i++)\n#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)\n#define pb push_back\n#define mp make_pair\n#define fs first\n#define sc second\n#define last(a) int(a.size() - 1)\n#define all(a) a.begin(), a.end()\n#define seta(a,x) memset (a, x, sizeof (a))\n#define I (int)\n\ntypedef long long int64;\ntypedef pair <int, int> pii;\ntypedef long double ldb;\n\nconst long double eps = 1e-9;\nconst int inf = (1 << 30) - 1;\nconst int64 inf64 = ((int64)1 << 62) - 1;\nconst long double pi = 3.1415926535897932384626433832795;\n\ntemplate <class T> T sqr (T x) {return x * x;}\n\nstring s1, s2;\nchar buf[2000000];\nint next[10000][26];\n\nint main ()\n{\n//\tfreopen (\"input.txt\", \"r\", stdin);\n//\tfreopen (\"output.txt\", \"w\", stdout);\n\tscanf (\"%s\", buf);\n\ts1 = buf;\n\tscanf (\"%s\", buf);\n\ts2 = buf;\n\tint n = s1.length();\n\tseta (next, 255);\n\tforn (j, 26) \n\t\tif (s1.find ('a' + j) != -1) {\n\t\t\tint p = 0;\n\t\t\tchar c = j + 'a';\n\t\t\tforn (i, n) {\n\t\t\t\tif (i == p) \n\t\t\t\t\tp = (p + 1) % n;\n\t\t\t\twhile (s1[p] != c) \n\t\t\t\t\tp = (p + 1) % n;\n\t\t\t\tnext[i][j] = p;\n\t\t\t}\n\t\t}\n\tint res = 0;\n\tint p = n-1;\n\tforn (i, s2.length()) {\n\t\tchar c = s2[i] - 'a';\n\t\tif (next[p][c] == -1) {\n\t\t\tcout << -1 << endl;\n\t\t\treturn 0;\n\t\t}\n\t\tif (next[p][c] <= p)\n\t\t\tres ++;\n\t\tp = next[p][c];\n\t}\n\tcout << res << endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "strings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Newspaper Headline.json",
    "editorial_link": "https://codeforces.com//blog/entry/2182",
    "editorial": "In this problem letters from s1 should be taken greedily: take the left letter from the right of the last used letter, if there is no necessary letter from the right of the right used letter the the search should be started from the beginning of string s1 and the answer should be increased by one. But the brute solution get TL and have complexity O(Ans?*?|s1|). \n\nThis solution can be optimized using the following way. For every position in s1 let's precalculate positions of the closest letters from the right of it from the alphabet. It can be done by moving from the right to the left ins s1 and remembering the last position of every type of symbol. This solution have complexity O(|s1|?*?K?+?|s2|), where K is a size of alphabet.",
    "hint": []
}