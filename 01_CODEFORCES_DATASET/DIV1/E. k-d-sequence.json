{"link": "https://codeforces.com//contest/407/problem/E", "problemId": "7735", "problem_idx": "E", "shortId": "407E", "contest_number": "407", "problem_submissions": {"D": [6186438, 6183272, 6186415, 6188995, 6186843], "C": [6183229, 6184237, 6184448, 6181726, 6183048, 6186206, 6183334, 6183650, 6187229, 6183606, 6183728, 6181678, 6184812, 6186103, 6186307, 6184286, 6185997], "A": [6179819, 6185054, 6178519, 6178154, 6178508, 6178273, 6178388, 6178848, 6178615, 6178776, 6179374, 6178369, 6179907, 6178927, 6178200, 6187273, 6182603, 6178438], "B": [6178779, 6180059, 6180299, 6179261, 6180911, 6179733, 6180104, 6180969, 6180700, 6180320, 6180917, 6186380, 6181105, 6180890, 6180916, 6181007, 6182073, 6187181], "E": [6198010, 6190656]}, "name": "E. k-d-sequence", "statement": "We\u2019ll call a sequence of integers a good - sequence if we can add to it\r\nat most numbers in such a way that after the sorting the sequence will\r\nbe an arithmetic progression with difference .You got hold of some\r\nsequence , consisting of integers. Your task is to find its longest\r\ncontiguous subsegment, such that it is a good - sequence.\r\n", "solutions": ["/*\n * temp.cpp\n *\n *  Created on: 2012-7-18\n *      Author: BSBandme\n */\n//#pragma comment(linker, \"/STACK:1024000000,1024000000\")\n#include <iostream>\n#include <fstream>\n#include <string.h>\n#include <cstdio>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <cassert>\n#include <list>\n#include <iomanip>\n#include <math.h>\n#include <deque>\n#include <utility>\n#include <map>\n#include <set>\n#include <bitset>\n#include <numeric>\n#include <climits>\n#include <cctype>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <functional>\n#include <sstream>\n\nusing namespace std;\n\n#define mpr make_pair\ntypedef unsigned int ui;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <double, double> pdd;\ntypedef vector <int> vi;\ntypedef vector <ll> vll;\ntypedef vector <double> vd;\ntypedef vector <string> vs;\ntypedef map <string, int> mpsi;\ntypedef map <double, int> mpdi;\ntypedef map <int, int> mpii;\n\nconst double pi = acos(0.0) * 2.0;\nconst double eps = 1e-12;\nconst int step[8][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};\n\ntemplate <class T> inline T abs1(T a) {return a < 0 ? -a : a;}\n\ntemplate <class T> inline T max1(T a, T b) { return a > b ? a : b; }\ntemplate <class T> inline T max1(T a, T b, T c) { return max1(max1(a, b), c); }\ntemplate <class T> inline T max1(T a, T b, T c, T d) { return max1(max1(a, b, c), d); }\ntemplate <class T> inline T max1(T a, T b, T c, T d, T e) { return max1(max1(a, b, c, d), e); }\ntemplate <class T> inline T min1(T a, T b) { return a < b ? a : b; }\ntemplate <class T> inline T min1(T a, T b, T c) { return min1(min1(a, b), c); }\ntemplate <class T> inline T min1(T a, T b, T c, T d) { return min1(min1(a, b, c), d); }\ntemplate <class T> inline T min1(T a, T b, T c, T d, T e) { return min1(min1(a, b, c, d), e); }\n\ninline int jud(double a, double b){\n\tif(abs(a) < eps && abs(b) < eps) return 0;\n\telse if(abs1(a - b) / abs1(a) < eps) return 0;\n\tif(a < b) return -1;\n\treturn 1;\n}\ntemplate <typename t> inline int jud(t a, t b){\n\tif(a < b) return -1;\n\tif(a == b) return 0;\n\treturn 1;\n}\n\n// f_lb == 1\ufffd\ufffd?\ufffd\ufffd\ufffd\ufffd\u036c\ufffd\ufffd\u04bb\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u07fd\u78ecf_small == 1\ufffd\ufffd?\ufffd\ufffd\ufffd\ufffd\ufffd\u00fb\ufffd\ufffd\u0470\ufffd\u04b5\ufffd\u05b5\ufffd\ufffd\ufffd\ufffd\u0421\ufffd\ufffd\ufffd\ufffd\ntemplate <typename it, typename t1>\ninline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){\n\tint be = 0, en = na - 1;\n\tif(*a <= *(a + na - 1)){\n\t\tif(f_lb == 0) while(be < en){\n\t\t\tint mid = (be + en + 1) / 2;\n\t\t\tif(jud(*(a + mid), val) != 1) be = mid;\n\t\t\telse en = mid - 1;\n\t\t}else while(be < en){\n\t\t\tint mid = (be + en) / 2;\n\t\t\tif(jud(*(a + mid), val) != -1) en = mid;\n\t\t\telse be = mid + 1;\n\t\t}\n\t\tif(f_small && jud(*(a + be), val) == 1) be--;\n\t\tif(!f_small && jud(*(a + be), val) == -1) be++;\n\t} else {\n\t\tif(f_lb) while(be < en){\n\t\t\tint mid = (be + en + 1) / 2;\n\t\t\tif(jud(*(a + mid), val) != -1) be = mid;\n\t\t\telse en = mid - 1;\n\t\t}else while(be < en){\n\t\t\tint mid = (be + en) / 2;\n\t\t\tif(jud(*(a + mid), val) != 1) en = mid;\n\t\t\telse be = mid + 1;\n\t\t}\n\t\tif(!f_small && jud(*(a + be), val) == -1) be--;\n\t\tif(f_small && jud(*(a + be), val) == 1) be++;\n\t}\n\treturn be;\n}\n\n\n\ntemplate <class T> inline T lowb(T num) {return num & (-num); }\ninline int bitnum(ui nValue) { return __builtin_popcount(nValue); }\ninline int bitnum(int nValue) { return __builtin_popcount(nValue); }\ninline int bitnum(ull nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }\ninline int bitnum(ll nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }\ninline int bitmaxl(ui a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }\ninline int bitmaxl(int a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }\ninline int bitmaxl(ull a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }\ninline int bitmaxl(ll a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }\n\nlong long pow(long long n, long long m, long long mod = 0){\n\tif(m < 0) return 0;\n\tlong long ans = 1;\n\tlong long k = n;\n\twhile(m){\n\t\tif(m & 1) {\n\t\t\tans *= k;\n\t\t\tif(mod) ans %= mod;\n\t\t}\n\t\tk *= k;\n\t\tif(mod) k %= mod;\n\t\tm >>= 1;\n\t}\n\treturn ans;\n}\n\n//#define debug\n//.........................\ufffd\ufffd.......\ufffd\ufffd.......\ufffd\ufffd.......\ufffd\ufffd.......\ufffd\ufffd.......\u05b9.......hack...............................................\n\n#ifndef N\n#define N 400100\n#endif\ntemplate <class t> struct segment_node{\n\tint be, en;\n\tt minv, add, sum;\n};\ntemplate <class t> struct segment_tree{\n\tint l;\n\tsegment_node <t> tree[N * 4];\n\n\tinline int gleft(int no) {return no << 1;}\n\tinline int gright(int no) {return (no << 1) + 1;}\n\tinline int gfa(int no) {return no >> 1;}\n\tinline segment_tree(){ l = 0; }\n\n\tvoid build(int no, int l, int r, t orig = 0, t *a = NULL){\n\t\tif(l > r) r = l;\n\t\tif(l == r){\n\t\t\ttree[no].be = tree[no].en = l;\n\t\t\ttree[no].add = 0;\n\t\t\tif(a == NULL) tree[no].minv = orig;\n\t\t\telse tree[no].minv = a[l];\n\t\t\ttree[no].add = 0;\n\t\t\ttree[no].sum = tree[no].minv;\n\t\t\treturn;\n\t\t}\n\t\ttree[no].be = l; tree[no].en = r;\n\t\tint mid = (l + r) / 2;\n\t\tbuild(gleft(no), l, mid, orig, a);\n\t\tbuild(gright(no), mid + 1, r, orig, a);\n\t\ttree[no].sum = tree[gleft(no)].sum + tree[gright(no)].sum;\n\t\ttree[no].add = 0;\n\t\ttree[no].minv = min1(tree[gleft(no)].minv, tree[gright(no)].minv);\n\t}\n\tinline void relax(int no) {\n\t\ttree[gleft(no)].add += tree[no].add;\n\t\ttree[gleft(no)].sum += tree[no].add * (tree[gleft(no)].en - tree[gleft(no)].be + 1);\n\t\ttree[gleft(no)].minv += tree[no].add;\n\t\ttree[gright(no)].add += tree[no].add;\n\t\ttree[gright(no)].sum += tree[no].add * (tree[gright(no)].en - tree[gright(no)].be + 1);\n\t\ttree[gright(no)].minv += tree[no].add;\n\t\ttree[no].add = 0;\n\t}\n\tvoid down(int l, int r, int no, t ranadd){\n\t\tif(l > r) return;\n\t\tif(l <= tree[no].be && r >= tree[no].en){\n\t\t\ttree[no].add += ranadd;\n\t\t\ttree[no].sum += ranadd * (tree[no].en - tree[no].be + 1);\n\t\t\ttree[no].minv += ranadd;\n\t\t\treturn;\n\t\t}\n\t\tif(tree[no].add && tree[no].be != tree[no].en) relax(no);\n\t\tint mid = (tree[no].be + tree[no].en) / 2;\n\t\tif(r >= tree[no].be && l <= mid) down(l, r, gleft(no), ranadd);\n\t\tif(r >= mid + 1 && l <= tree[no].en) down(l, r, gright(no), ranadd);\n\t\ttree[no].sum = tree[gleft(no)].sum + tree[gright(no)].sum;\n\t\ttree[no].minv = min1(tree[gleft(no)].minv, tree[gright(no)].minv);\n\t}\n\tt getno(int maxk, int no){\n\t\tif(tree[no].be== tree[no].en)\n\t\t\treturn tree[no].en;\n\t\tif(tree[no].add && tree[no].be != tree[no].en) relax(no);\n\t\tif(tree[gleft(no)].minv <= maxk)\n\t\t\treturn getno(maxk, gleft(no));\n\t\treturn getno(maxk, gright(no));\n\t}\n\tt getsum(int l, int r, int no){\n\t\tif(l > r) return 0;\n\t\tif(l <= tree[no].be && r >= tree[no].en)\n\t\t\treturn tree[no].sum;\n\t\tif(tree[no].add && tree[no].be != tree[no].en) relax(no);\n\t\tt ans = 0;\n\t\tint mid = (tree[no].be + tree[no].en) / 2;\n\t\tif(r >= tree[no].be && l <= mid) ans += getsum(max1(l, tree[no].be), min1(r, mid), gleft(no));\n\t\tif(r >= mid + 1 && l <= tree[no].en) ans += getsum(max1(l, mid + 1), min1(r, tree[no].en), gright(no));\n\t\treturn ans;\n\t}\n};\n\nsegment_tree <ll> sgt;\n\nconst ll inf = 10000000001ll;\nconst int maxn = 400100;\nint n, k, d;\nint arr[maxn];\nmpii cnt;\nint duo, rmod[maxn];\nint qhi[maxn], lqhi, rqhi, qlo[maxn], lqlo, rqlo, maxdelta;\nint biao[maxn], biao1[maxn];\n\nint main(){\n    ios_base::sync_with_stdio(0);\n\t#ifdef debug //......................................................................................................\n\tfreopen(\"input.txt\", \"r\", stdin);\n\t#endif //...........................................................................................................\n\tscanf(\"%d%d%d\", &n, &k, &d);\n\tfor(int i = 0; i < n; i++) scanf(\"%d\", arr + i);\n\tif(d == 0) {\n\t\tint ansl = 0, ansr = 0;\n\t\tfor(int i = 1, link = 0; i < n; i++) {\n\t\t\tif(arr[i] != arr[link]) link = i;\n\t\t\tif(i - link > ansr - ansl) {\n\t\t\t\tansl = link;\n\t\t\t\tansr = i;\n\t\t\t}\n\t\t}\n\t\tcout << ansl + 1 << ' ' << ansr + 1 << endl;\n\t\treturn 0;\n\t}\n\tint ansl = 0, ansr = 0;\n\tfor(int i = 0; i < n; i++) {\n\t\trmod[i] = arr[i] % d;\n\t\tif(rmod[i] < 0) rmod[i] += d;\n\t}\n\tcnt[arr[0]] = 1;\n\tsgt.build(1, 0, n - 1);\n\tsgt.down(0, 0, 1, -1);\n\tlqhi = lqlo = 0;\n\trqhi = rqlo = 0;\n\tfor(int i = 1, link = 0; i < n; i++) {\n\t\tif(rmod[i] != rmod[i - 1]) {\n\t\t\tcnt.clear();\n\t\t\tlink = i;\n\t\t\tduo = 0;\n\t\t}\n\t\tcnt[arr[i]]++;\n\t\tif(cnt[arr[i]] == 2\t) duo++;\n\t\tfor(; duo; link++){\n\t\t\tcnt[arr[link]]--;\n\t\t\tif(cnt[arr[link]] == 0) cnt.erase(arr[link]);\n\t\t\tif(arr[link] == arr[i]) duo--;\n\t\t}\n\t\twhile(rqhi >= lqhi && arr[qhi[rqhi]] <= arr[i]) {\n\t\t\tsgt.down(qhi[rqhi] + 1, n, 1, biao[qhi[rqhi]]);\n\t\t\trqhi--;\n\t\t}\n\t\tif(lqhi <= rqhi) {\n\t\t\tsgt.down(qhi[rqhi] + 1, n, 1, biao[qhi[rqhi]]);\n\t\t\tbiao[qhi[rqhi]] = (arr[qhi[rqhi]] - arr[i]) / d;\n\t\t\tsgt.down(qhi[rqhi] + 1, n, 1, -biao[qhi[rqhi]]);\n\t\t}\n\t\trqhi++;\n\t\tqhi[rqhi] = i;\n\t\twhile(rqlo >= lqlo && arr[qlo[rqlo]] >= arr[i]) {\n\t\t\tsgt.down(qlo[rqlo] + 1, n, 1, biao1[qlo[rqlo]]);\n\t\t\trqlo--;\n\t\t}\n\t\tif(lqlo <= rqlo) {\n\t\t\tsgt.down(qlo[rqlo] + 1, n, 1, biao1[qlo[rqlo]]);\n\t\t\tbiao1[qlo[rqlo]] = -(arr[qlo[rqlo]] - arr[i]) / d;\n\t\t\tsgt.down(qlo[rqlo] + 1, n, 1, -biao1[qlo[rqlo]]);\n\t\t}\n\t\trqlo++;\n\t\tqlo[rqlo] = i;\n\t\twhile(qhi[lqhi] < link) {\n\t\t\tsgt.down(qhi[lqhi] + 1, n, 1, biao[qhi[lqhi]]);\n\t\t\tlqhi++;\n\t\t}\n\t\twhile(qlo[lqlo] < link) {\n\t\t\tsgt.down(qlo[lqlo] + 1, n, 1, biao1[qlo[lqlo]]);\n\t\t\tlqlo++;\n\t\t}\n\t\tsgt.down(0, i, 1, -1);\n\t\tsgt.down(0, link - 1, 1, inf);\n\t\tsgt.down(0, n, 1, -maxdelta);\n\t\tmaxdelta = (arr[qhi[lqhi]] - arr[qlo[lqlo]]) / d + 1;\n\t\tsgt.down(0, n, 1, maxdelta);\n\t\tint rno = sgt.getno(k, 1);\n//\t\tcerr << rno << endl;\n//\t\tfor(int j = 0; j < n; j++)\n//\t\t\tcerr << sgt.getsum(j, j, 1) << ' ';\n//\t\tcerr << endl;\n\t\tif(ansr - ansl < i - rno){\n\t\t\tansr = i;\n\t\t\tansl = rno;\n\t\t}\n\t}\n\tcout << ansl + 1 << ' ' << ansr + 1 << endl;\n\n    return 0;\n}\n\n\n\n"], "input": "", "output": "", "tags": ["data structures"], "dificulty": "3100", "interactive": false}