{
    "link": "https://codeforces.com//contest/261/problem/B",
    "problemId": "2512",
    "problem_idx": "B",
    "shortId": "261B",
    "contest_number": "261",
    "problem_submissions": {
        "E": [
            2920000,
            2919867,
            2920093,
            2921784
        ],
        "D": [
            2918755,
            2917824,
            2919624,
            2920041,
            2920164,
            2923335,
            2921126,
            2921013,
            2920536,
            2920705,
            2919641,
            2925478,
            2920426,
            2921207,
            2921666
        ],
        "C": [
            2917546,
            2917887,
            2919188,
            2919828,
            2917463,
            2918109,
            2917854,
            2919507,
            2918011,
            2925470,
            2918182,
            2917265,
            2917678,
            2914481,
            2917995
        ],
        "B": [
            2913743,
            2914942,
            2915180,
            2915778,
            2915691,
            2915592,
            2915955,
            2917070,
            2921240,
            2925461,
            2921213,
            2914639,
            2914202,
            2916720,
            2914335
        ],
        "A": [
            2912104,
            2912172,
            2912286,
            2913678,
            2911982,
            2912228,
            2912646,
            2912866,
            2912845,
            2925453,
            2912722,
            2912028,
            2912201,
            2917202,
            2912517
        ]
    },
    "name": "B. Maxim and Restaurant",
    "statement": "Maxim has opened his own restaurant! The restaurant has got a huge\r\ntable, the table’s length is meters.Maxim has got a dinner party\r\ntonight, guests will come to him. Let’s index the guests of Maxim’s\r\nrestaurant from 1 to . Maxim knows the sizes of all guests that are\r\ngoing to come to him. The -th guest’s size () represents the number of\r\nmeters the guest is going to take up if he sits at the restaurant\r\ntable.Long before the dinner, the guests line up in a queue in front of\r\nthe restaurant in some order. Then Maxim lets the guests in, one by one.\r\nMaxim stops letting the guests in when there is no place at the\r\nrestaurant table for another guest in the queue. There is no place at\r\nthe restaurant table for another guest in the queue, if the sum of sizes\r\nof all guests in the restaurant plus the size of this guest from the\r\nqueue is larger than . In this case, not to offend the guest who has no\r\nplace at the table, Maxim doesn’t let any other guest in the restaurant,\r\neven if one of the following guests in the queue would have fit in at\r\nthe table.Maxim is now wondering, what is the average number of visitors\r\nwho have come to the restaurant for all possible orders of guests in the\r\nqueue. Help Maxim, calculate this number.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <set>\n#include <map>\n#include <string>\n#include <cmath>\n#include <cassert>\n#include <ctime>\n#include <algorithm>\n#include <queue>\n#include <memory.h>\n#include <stack>\n#define mp make_pair\n#define pb push_back                     \n#define setval(a,v) memset(a,v,sizeof(a))\n\n#if ( _WIN32 || __WIN32__ )\n    #define LLD \"%I64d\"\n#else\n    #define LLD \"%lld\"\n#endif\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n\nll dp[55][55];\nll dp2[55][55];\nll c[55][55];\n\nint n;\n\n\nint main(){\n  #ifdef LOCAL\n    freopen(\"input.txt\",\"r\",stdin);\n    freopen(\"output.txt\",\"w\",stdout);\n  #endif\n\n    dp[0][0] = 1;\n    scanf(\"%d\",&n);\n\n    c[0][0] = 1;\n    for (int i = 0; i <= 50; i++)\n\t    for (int j = 0; j <= 50; j++){\n\t    \tif (i) c[i][j] += c[i-1][j];\n\t    \tif (i && j) c[i][j] += c[i-1][j-1];\n\t    }\n\n\n    for (int i = 0; i < n; i++){\n    \tint x;\n    \tscanf(\"%d\",&x);\n    \tfor (int j = 0; j <= 50; j++)\n\t    \tfor (int k = 0; k <= 50; k++){\n\t    \t\tif (k + x <= 50)\n\t    \t\t\tdp2[j+1][k+x] += dp[j][k];\n\t    \t\tdp2[j][k] += dp[j][k];\n\t    \t}\n\t    memcpy(dp,dp2,sizeof(dp));\n\t    memset(dp2,0,sizeof(dp2));\n    }\n\n    for (int i = 0; i <= 50; i++)\n    \tfor (int j = 1; j <= 50; j++)\n    \t\tdp[i][j] += dp[i][j-1];\n\n\tint p;\n\tscanf(\"%d\",&p);\n\n\tdouble ans = 0;\n\n\tfor (int i = 1; i <= n; i++){\n\t\t\n\t\tans += dp[i][p] * 1.0 / c[n][i];\n\t}\n\n\tcout.precision(15);\n\tcout << fixed << ans << endl;\n      \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "math",
        "probabilities"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Maxim and Restaurant.json",
    "editorial_link": "https://codeforces.com//blog/entry/6398",
    "editorial": "If all people can come, we will return answer as n.\nIf it is impossible, there will be finded some person that will be the last to come. We will brtueforce this value. Then we will detrminate dp[i,j,s] in how many ways j persons from the first i with total length s can be in the resturant. It is easy to calculate.\nThen we will add to the answer values dp[n][i][s]*i!*(n-1-i)! for all i,s such that s+p[h]>P. Where P  total length of the table, p[h]  length of the fixed person.",
    "hint": []
}