{
    "link": "https://codeforces.com//contest/261/problem/D",
    "problemId": "2514",
    "problem_idx": "D",
    "shortId": "261D",
    "contest_number": "261",
    "problem_submissions": {
        "E": [
            2920000,
            2919867,
            2920093,
            2921784
        ],
        "D": [
            2918755,
            2917824,
            2919624,
            2920041,
            2920164,
            2923335,
            2921126,
            2921013,
            2920536,
            2920705,
            2919641,
            2925478,
            2920426,
            2921207,
            2921666
        ],
        "C": [
            2917546,
            2917887,
            2919188,
            2919828,
            2917463,
            2918109,
            2917854,
            2919507,
            2918011,
            2925470,
            2918182,
            2917265,
            2917678,
            2914481,
            2917995
        ],
        "B": [
            2913743,
            2914942,
            2915180,
            2915778,
            2915691,
            2915592,
            2915955,
            2917070,
            2921240,
            2925461,
            2921213,
            2914639,
            2914202,
            2916720,
            2914335
        ],
        "A": [
            2912104,
            2912172,
            2912286,
            2913678,
            2911982,
            2912228,
            2912646,
            2912866,
            2912845,
            2925453,
            2912722,
            2912028,
            2912201,
            2917202,
            2912517
        ]
    },
    "name": "D. Maxim and Increasing Subsequence",
    "statement": "Maxim loves sequences, especially those that strictly increase. He is\r\nwondering, what is the length of the longest increasing subsequence of\r\nthe given sequence ?Sequence is given as follows: the length of the\r\nsequence equals ; , where operation means taking the remainder after\r\ndividing number by number . Sequence of length is a of sequence , if\r\nthere is such increasing sequence of indexes , that . In other words,\r\nthe subsequence can be obtained from the sequence by crossing out some\r\nelements.Sequence is , if the following inequality holds: .Maxim have\r\nvariants of the sequence . Help Maxim to determine for each sequence the\r\nlength of the longest increasing subsequence.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <set>\n#include <map>\n#include <string>\n#include <cmath>\n#include <cassert>\n#include <ctime>\n#include <algorithm>\n#include <queue>\n#include <memory.h>\n#include <stack>\n#define mp make_pair\n#define pb push_back                     \n#define setval(a,v) memset(a,v,sizeof(a))\n\n#if ( _WIN32 || __WIN32__ )\n    #define LLD \"%I64d\"\n#else\n    #define LLD \"%lld\"\n#endif\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n\nconst int MAXN = 110000;\n\nint n,t;\n\nint b[MAXN];\npair<int,int> _b[MAXN];\n\nint ans[MAXN];\nint ptr[MAXN];\n\n\nvoid solve(){\n\tfor (int i = 0; i < n; i++){\n\t\tscanf(\"%d\",&_b[i].first);\n\t\t_b[i].second = i;\n\t}\n\tsort(_b,_b+n);\n\tint maxc = 0;\n\tfor (int i = 0; i < n; i++){\n\t\tif (i && _b[i].first != _b[i-1].first) maxc++;\n\t\tb[_b[i].second] = maxc;\n\t}\n\tmaxc++;\n\n\tmemset(ans,0x3f,sizeof(ans));\n\tmemset(ptr,0,sizeof(ptr));\n\n\tint tmp;\n\tfor (int i = 0; i < t && i < maxc; i++){\n\t\tfor (int j = 0; j < n; j++){\n\t\t\ttmp = b[j];\n\t\t\twhile (ans[ptr[tmp]] < tmp)\n\t\t\t\tptr[tmp]++;\n\t\t\tans[ptr[tmp]] = tmp;\n\t\t}\n\t}\n\n\tcout << *max_element(ptr,ptr+maxc) + 1 << endl;\n}\n\n\nint main(){\n  #ifdef LOCAL\n    freopen(\"input.txt\",\"r\",stdin);\n    freopen(\"output.txt\",\"w\",stdout);\n  #endif\n\n  int tests;\n  scanf(\"%d %d %*d %d\",&tests,&n,&t);\n\n  for (int i = 0; i < tests; i++)\n  \tsolve();\n  \t      \n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Maxim and Increasing Subsequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/6398",
    "editorial": "This problem can be done using dp[i,j] where we can end our increasing\r\nsequence with length i and last number j. Its not hard to understand\r\nthat number of states will be n*b. To make a tranfer we need to know\r\narray first[j] first position of the number j in the sequence b,\r\nnext[i][j] first position of the number j in the sequence b after\r\nposition i. Now its easy to calculate all values.\r\n",
    "hint": []
}