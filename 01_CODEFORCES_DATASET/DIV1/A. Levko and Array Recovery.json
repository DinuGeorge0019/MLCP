{
    "link": "https://codeforces.com//contest/360/problem/A",
    "problemId": "3928",
    "problem_idx": "A",
    "shortId": "360A",
    "contest_number": "360",
    "problem_submissions": {
        "E": [
            5052621,
            5051976,
            5053848,
            5054838
        ],
        "C": [
            5051326,
            5048345,
            5049493,
            5049490,
            5050865,
            5049536,
            5050632,
            5051192,
            5051833,
            5051566,
            5051768,
            5048366,
            5049736
        ],
        "D": [
            5050607,
            5051524,
            5050936,
            5051425,
            5048585,
            5050472,
            5056022,
            5052000
        ],
        "B": [
            5045795,
            5044973,
            5048544,
            5051998,
            5045747,
            5046168,
            5051455,
            5046964,
            5045609,
            5046677,
            5046979,
            5047362,
            5047061,
            5045936,
            5047748,
            5047100,
            5046972,
            5046544
        ],
        "A": [
            5044762,
            5051854,
            5044798,
            5045200,
            5044446,
            5044824,
            5045696,
            5044827,
            5045266,
            5045205,
            5044960,
            5045344,
            5047058,
            5045224,
            5045590,
            5054975
        ]
    },
    "name": "A. Levko and Array Recovery",
    "statement": "Levko loves array , consisting of integers, very much. That is why Levko\r\nis playing with array , performing all sorts of operations with it. Each\r\noperation Levko performs is of one of two types: Increase all elements\r\nfrom to by . In other words, perform assignments for all that meet the\r\ninequation . Find the maximum of elements from to . That is, calculate\r\nthe value . Sadly, Levko has recently lost his array. Fortunately, Levko\r\nhas records of all operations he has performed on array . Help Levko,\r\ngiven the operation records, find at least one suitable array. The\r\nresults of all operations for the given array must coincide with the\r\nrecord results. Levko clearly remembers that all numbers in his array\r\ndidn’t exceed in their absolute value, so he asks you to find such an\r\narray.\r\n",
    "solutions": [
        "//#include <iostream>\n#include <fstream>\n#include <vector>\n#include <set>\n#include <map>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <cassert>\n#include <ctime>\n#include <algorithm>\n#include <sstream>\n#include <list>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <cstdlib>\n#include <cstdio>\n#include <iterator>\n#include <functional>\n#include <bitset>\n#define mp make_pair\n#define pb push_back\n\n#ifdef LOCAL\n#define eprintf(...) fprintf(stderr,__VA_ARGS__)\n#else\n#define eprintf(...)\n#endif\n\n#define TIMESTAMP(x) eprintf(\"[\"#x\"] Time : %.3lf s.\\n\", clock()*1.0/CLOCKS_PER_SEC)\n#define TIMESTAMPf(x,...) eprintf(\"[\" x \"] Time : %.3lf s.\\n\", __VA_ARGS__, clock()*1.0/CLOCKS_PER_SEC)\n\n#if ( _WIN32 || __WIN32__ )\n    #define LLD \"%I64d\"\n#else\n    #define LLD \"%lld\"\n#endif\n\nusing namespace std;\n\n#define TASKNAME \"A\"\n\n#ifdef LOCAL\nstatic struct __timestamper {\n    ~__timestamper(){\n        TIMESTAMP(end);\n    }\n} __TIMESTAMPER;\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\n\n\nconst int MAXN = 5000;\n\nint a[MAXN];\nint b[MAXN];\nint add[MAXN];\n\nint t[MAXN], l[MAXN], r[MAXN], d[MAXN];\n\n\nint main(){\n  #ifdef LOCAL\n    freopen(TASKNAME\".in\",\"r\",stdin);\n    freopen(TASKNAME\".out\",\"w\",stdout);\n  #endif\n\n  \n    int n,m;\n    scanf(\"%d %d\",&n,&m);\n\n    for (int i = 0; i < n; i++)\n        a[i] = 1e9, add[i] = 0; \n\n    for (int i = 0; i < m; i++){\n        scanf(\"%d%d%d%d\",&t[i],&l[i],&r[i],&d[i]);\n        --l[i], --r[i];\n        if (t[i] == 1){\n            for (int j = l[i]; j <= r[i]; j++)\n                add[j] += d[i];\n        } else {\n            for (int j = l[i]; j <= r[i]; j++)\n                a[j] = min(a[j], d[i] - add[j]);\n        }\n    }\n\n    memcpy(b, a, sizeof(b));\n\n//    for (int i = 0; i < n; i++)\n//      eprintf(\"%d%c\", b[i], \" \\n\"[i==n-1]);\n\n\n    for (int i = 0; i < m; i++){\n        if (t[i] == 1){\n            for (int j = l[i]; j <= r[i]; j++)\n                a[j] += d[i];\n        } else {\n            if (*max_element(a + l[i], a + r[i] + 1) != d[i]){\n                printf(\"NO\\n\");\n                return 0;\n            }\n        }\n    }\n\n    printf(\"YES\\n\");\n    for (int i = 0; i < n; i++)\n        printf(\"%d%c\", b[i], \" \\n\"[i==n-1]);\n\n      \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Levko and Array Recovery.json",
    "editorial_link": "https://codeforces.com//blog/entry/9529",
    "editorial": "Letâs find such value that for all indeces . Letâs simulate all\r\noperations and will be the difference between current value of -th\r\nelement and its initial value. If we have operation of first type, we\r\nchange values of . If we have operation of second type, we know that ,\r\nso . We will get array when we union all this inequalities. Letâs prove\r\nthat either satisfied all conditions or there is no such array. It can\r\nbe two cases, why does not suit: itâs impossible due to construction of\r\narray . is a maximal possible value of , so canât be bigger.\r\n",
    "hint": []
}