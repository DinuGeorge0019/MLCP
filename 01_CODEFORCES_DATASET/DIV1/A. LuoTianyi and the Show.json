{
    "link": "https://codeforces.com//contest/1824/problem/A",
    "problemId": "1909037",
    "problem_idx": "A",
    "shortId": "1824A",
    "contest_number": "1824",
    "problem_submissions": {
        "E": [
            205128571,
            205139739,
            205144104,
            205137280,
            205130495,
            205118718,
            205194940,
            205235861,
            205235298,
            205232550,
            205700234,
            205699976
        ],
        "D": [
            205099783,
            205099421,
            205104253,
            205142283,
            205135430,
            205107363,
            205103358,
            205109375,
            205130576,
            205106777,
            205111380,
            205108131,
            205113889,
            205109692,
            205110237,
            205111676,
            205111818,
            205116723,
            205113358,
            205116564,
            205115264,
            205122150
        ],
        "C": [
            205092605,
            205093858,
            205095306,
            205093905,
            205096370,
            205095737,
            205137755,
            205100625,
            205100857,
            205099284,
            205101290,
            205097496,
            205098177,
            205101207,
            205099752,
            205104989,
            205095505,
            205095555,
            205103206,
            205102161,
            205098628
        ],
        "B2": [
            205086508,
            205087676,
            205086929,
            205087663,
            205088713,
            205084760,
            205087488,
            205094809,
            205089113,
            205089568,
            205090318,
            205089714,
            205087793,
            205096844,
            205101610,
            205090439,
            205094629,
            205091373,
            205087601
        ],
        "B1": [
            205086422,
            205087787,
            205086792,
            205087589,
            205088569,
            205084970,
            205085855,
            205089877,
            205088994,
            205089640,
            205089081,
            205087696,
            205087867,
            205095794,
            205087977,
            205088492,
            205094450,
            205090371,
            205087429
        ],
        "A": [
            205083763,
            205085457,
            205082241,
            205082782,
            205083768,
            205088956,
            205081132,
            205083777,
            205081787,
            205082991,
            205086125,
            205082070,
            205083612,
            205083399,
            205081591,
            205083847,
            205088554,
            205081833,
            205083848
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/116328",
    "editorial": "First we can notice that, if someone with a specific favourite seat(i.e. not ?1\n nor ?2\n) has got his seat taken by a ?1\n guy or a ?2\n guy, it's better to let the first man go first, and the ?1\n or ?2\n one go after him.\n\nNow, we know it's better to make those with a favourite seat go in first. After they have seated, now we consider filling the space between them with ?1\n and ?2\n. It's easy to notice that we can find two non-overlapping prefix and suffix, and fill the blank seats in the prefix with ?1\n, and the blanks in the suffix with ?2\n. We now only need to find the answer greedily for each division point between the prefix and the suffix.",
    "name": "A. LuoTianyi and the Show",
    "statement": "There are n people taking part in a show about VOCALOID. They will sit\r\nin the row of seats, numbered 1 to m from left to right.The n people\r\ncome and sit in order. Each person occupies a seat in one of three ways:\r\nSit in the seat next to the left of the leftmost person who is already\r\nsitting, or if seat 1 is taken, then leave the show. If there is no one\r\ncurrently sitting, sit in seat m. Sit in the seat next to the right of\r\nthe rightmost person who is already sitting, or if seat m is taken, then\r\nleave the show. If there is no one currently sitting, sit in seat 1. Sit\r\nin the seat numbered x_i. If this seat is taken, then leave the show.\r\nNow you want to know what is the maximum number of people that can take\r\na seat, if you can let people into the show in any order?\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using i64 = long long; void solve() {    int n, m;    std::cin >> m >> n;        int cnt1 = 0, cnt2 = 0;    std::vector<int> a;    for (int i = 0; i < m; i++) {        int x;        std::cin >> x;        if (x == -1) {            cnt1++;        } else if (x == -2) {            cnt2++;        } else {            a.push_back(x);        }    }    std::sort(a.begin(), a.end());    a.erase(std::unique(a.begin(), a.end()), a.end());        int ans = 0;    ans = std::max(ans, cnt1 + int(a.size()));    ans = std::max(ans, cnt2 + int(a.size()));    ans = std::min(ans, n);        for (int i = 0; i < a.size(); i++) {        int l = std::min(a[i] - 1, i + cnt1);        int r = std::min(n - a[i], int(a.size()) - 1 - i + cnt2);        ans = std::max(ans, l + 1 + r);    }    std::cout << ans << \"\\n\";} int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. LuoTianyi and the Show.json",
    "hint": []
}