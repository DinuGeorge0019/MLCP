{"link": "https://codeforces.com//contest/1718/problem/B", "problemId": "1509965", "problem_idx": "B", "shortId": "1718B", "contest_number": "1718", "problem_submissions": {"F": [168597010, 168624668, 173812548, 173812098, 168599096], "D": [168565469, 168586026, 168571061, 168581216, 168578771, 168572736, 168587794, 168591318, 168592506, 168597359, 168590948, 168600506, 168597231, 168582453, 168687986], "C": [168541281, 168543939, 168544627, 168545043, 168549826, 168553177, 168540235, 168546151, 168543268, 168562740, 168541559, 168562194, 168567397, 168609760, 168609209, 168608717, 168567701, 168606687, 168620286, 168547337, 168546667, 168553348, 168556898, 168552397], "B": [168533942, 168529866, 168534830, 168535200, 168537223, 168547085, 168528202, 168537852, 168530917, 168805783, 168550097, 168530349, 168548672, 168547336, 168549427, 168545357, 168535673, 168532763, 168537259, 168542957, 168536570], "A2": [168516853, 168520403, 168525192, 168517279, 168521825, 168526171, 168517695, 168521659, 168518863, 168529215, 168520755, 168523804, 168536216, 168521669, 168523926, 168522044, 168518219, 168525244, 168524582, 168517935], "A1": [168516745, 168520669, 168524305, 168517111, 168521468, 168525366, 168517892, 168521859, 168518553, 168529389, 168520943, 168523566, 168536034, 168521371, 168523798, 168521699, 168516764, 168524985, 168524317, 168517770], "E": [168650929, 168598643, 168610266, 173790812]}, "name": "B. Fibonacci Strings", "statement": "In all schools in Buryatia, in the 1 class, everyone is told the theory\r\nof Fibonacci strings.\"A is a subsegment of a string where all the\r\nletters are the same and are bounded on the left and right by the ends\r\nof the string or by letters other than the letters in the block. A\r\nstring is called a string if, when it is divided into blocks, their\r\nlengths in the order they appear in the string form the Fibonacci\r\nsequence (f_0 = f_1 = 1, f_i = f_{i-2} + f_{i-1}), starting from the\r\nzeroth member of this sequence. A string is called if it possible to\r\nreorder its letters to get a string.\"Burenka decided to enter the Buryat\r\nState University, but at the entrance exam she was given a difficult\r\ntask. She was given a string consisting of the letters of the Buryat\r\nalphabet (which contains exactly k letters), and was asked if the given\r\nstring is . The string can be very long, so instead of the string, she\r\nwas given the number of appearances of each letter (c_i for the i-th\r\nletter) in that string. Unfortunately, Burenka no longer remembers the\r\ntheory of Fibonacci strings, so without your help she will not pass the\r\nexam.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 16.08.2022 17:39:54       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  vector<long long> f = {1, 1};\n  while (f.back() < (int) 1e9) {\n    auto nxt = f.back() + f[f.size() - 2];\n    f.push_back(nxt);\n  }\n  int sz = (int) f.size();\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n;\n    cin >> n;\n    vector<long long> a(n);\n    long long sum = 0;\n    for (int i = 0; i < n; i++) {\n      cin >> a[i];\n      sum += a[i];\n    }\n    long long pref = 0;\n    int len = -1;\n    for (int i = 0; i < sz; i++) {\n      pref += f[i];\n      if (pref == sum) {\n        len = i + 1;\n        break;\n      }\n    }\n    if (len == -1) {\n      cout << \"NO\" << '\\n';\n      continue;\n    }\n    int last = -1;\n    bool ok = true;\n    for (int i = len - 1; i >= 0; i--) {\n      long long mx = *max_element(a.begin(), a.end());\n      if (mx < f[i]) {\n        ok = false;\n        break;\n      }\n      int nxt = -1;\n      for (int j = 0; j < n; j++) {\n        if (a[j] == mx && j != last) {\n          nxt = j;\n          break;\n        }\n      }\n      if (nxt == -1) {\n        ok = false;\n        break;\n      }\n      a[nxt] -= f[i];\n      last = nxt;\n    }\n    cout << (ok ? \"YES\" : \"NO\") << '\\n';\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["greedy", "implementation", "math", "number theory"], "dificulty": "2000", "interactive": false}