{
    "link": "https://codeforces.com//contest/2097/problem/D",
    "problemId": "3353168",
    "problem_idx": "D",
    "shortId": "2097D",
    "contest_number": "2097",
    "problem_submissions": {
        "F": [
            317307318,
            317309525,
            317309102,
            317312383,
            317316279,
            317325883,
            317416247,
            317580233,
            317579495,
            317578954,
            317578471,
            317578170,
            317576401,
            317575526,
            317574565,
            317326012
        ],
        "C": [
            317301103,
            317292740,
            317292086,
            317292797,
            317292557,
            317300448,
            317293184,
            317293569,
            317295891,
            317295305,
            317293328,
            317304181,
            317299563,
            317305951,
            317296495,
            317302226,
            317306136,
            317302946
        ],
        "E": [
            317299854,
            317301108,
            317299586,
            317304189,
            317304951,
            317308313,
            317313597,
            317305664,
            317317246,
            317322289,
            317316806,
            317319809,
            317318900,
            317321182,
            317406068,
            317321088,
            317322736,
            317322644
        ],
        "D": [
            317296567,
            317296050,
            317297072,
            317301213,
            317322631,
            317315490,
            317304532,
            317321371,
            317306823,
            317303050,
            317304957,
            317310591,
            317315906,
            317313581,
            317306990,
            317307372,
            317315011,
            317317721
        ],
        "B": [
            317283633,
            317287516,
            317287207,
            317285769,
            317289590,
            317285943,
            317288249,
            317285819,
            317286523,
            317288061,
            317290152,
            317289644,
            317297031,
            317288240,
            317297080,
            317298214,
            317294941
        ],
        "A": [
            317279828,
            317283931,
            317284029,
            317281512,
            317283570,
            317281675,
            317282711,
            317280805,
            317280621,
            317281741,
            317281827,
            317282878,
            317285451,
            317282463,
            317280852,
            317282823,
            317324194
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142316",
    "editorial": "Suspecting that not all participants are familiar with the basics of\r\nlinear algebra, we will try to explain each step in detail.Let , where\r\nis an odd number, and is a power of two. Any binary string of length can\r\nbe represented as a matrix :It is easy to prove that any operation (one\r\nmove, several moves, or none) that transforms string into string can be\r\nexpressed as , where is a matrix in . Indeed: If , the only possible\r\noperation does nothing, and (the identity matrix). If the operation adds\r\nthe second half of to the first half, then can be written in block form:\r\nIf the operation adds the first half to the second half, then can also\r\nbe written in block form. If independently changes the left and right\r\nhalves of using operations and , then has the form: If is a combination\r\nof operations , then . For any invertible matrix , there exists an\r\noperation such that . The case is trivial; for , we can explicitly\r\nprovide expressions for elementary transformations. Adding one row to\r\nanother is trivial, and swapping them can be done as follows: Yes, this\r\nis the implementation of using the XOR operation.Now consider the case .\r\nBy the induction hypothesis, we can apply any invertible transformation\r\nto the halves of string at any moment. Let be the first rows of the\r\nmatrix , and be the second half of the rows. We will show that we can\r\nadd row to row using the specified operations:Then, to add any row from\r\nthe second half to the first, we should shuffle the rows in the first\r\nand second halves so that the required rows are at the top, perform the\r\nspecified sequence of actions, and then restore the original order of\r\nthe rows. Similarly, a row from the first half can be added to the\r\nsecond half.Thus, any row can be added to any other. And since swapping\r\ntwo rows is realized through this operation, and considering that\r\nmatrices live in , this means that any elementary operation can be\r\nrepresented in terms of the operations described. Since any invertible\r\nmatrix can be represented as a composition of elementary operations, it\r\ncan be represented as a composition of some operations .To summarize,\r\nthis proof turned out to be a bit more unpleasant than we expected. A\r\ngood concept here would be to the idea of this proof instead of getting\r\nbogged down in every technical transition.To check whether string can be\r\ntransformed into string , based on the above proof, it is sufficient to\r\ncheck whether there exists an invertible matrix such that . We apply the\r\nGaussian elimination algorithm to and , which uses row operations to\r\nbring and to and , respectively.Then the answer to the problem is \"Yes\"\r\nif and only if , which follows from the uniqueness of the reduced row\r\nechelon form of a matrix.The Gaussian elimination algorithm for a matrix\r\nof size runs in time:Since we are working with bit matrices, using , the\r\nalgorithm can be improved to run in time ; however, the solution without\r\nbitsets also runs in an acceptable time despite the large constraints in\r\nthe problem.\r\n",
    "name": "D. Homework",
    "statement": "Some teachers work at the educational center \"Sirius\" while\r\nsimultaneously studying at the university. In this case, the trip does\r\nnot exempt them from completing their homework, so they do their\r\nhomework right on the plane. Artem is one of those teachers, and he was\r\nassigned the following homework at the university.With an arbitrary\r\nstring a of length m, he can perform the following operation. Artem\r\nsplits the string a into two halves x and y of equal length, after which\r\nhe performs of three actions: For each i\r\nin\r\nleft\r\n{ 1, 2,\r\nldots,\r\nfrac{m}{2}\r\nright\r\n} assign x_i = (x_i + y_i)\r\nbmod 2; For each i\r\nin\r\nleft\r\n{ 1, 2,\r\nldots,\r\nfrac{m}{2}\r\nright\r\n} assign y_i = (x_i + y_i)\r\nbmod 2; Perform an arbitrary number of operations (the same operations\r\ndefined above, applied recursively) on the strings x and y,\r\nindependently of each other. Note that in this case, the strings x and y\r\nmust be of even length. After that, the string a is replaced by the\r\nstrings x and y, concatenated in the same order.Unfortunately, Artem\r\nfell asleep on the plane, so you will have to complete his homework.\r\nArtem has two binary strings s and t of length n, each consisting of n\r\ncharacters or . Determine whether it is possible to make string s equal\r\nto string t with number of operations.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "math",
        "matrices"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Homework.json",
    "hint": []
}