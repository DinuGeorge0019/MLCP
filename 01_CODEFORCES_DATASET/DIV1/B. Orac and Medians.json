{"link": "https://codeforces.com//contest/1349/problem/B", "problemId": "619060", "problem_idx": "B", "shortId": "1349B", "contest_number": "1349", "problem_submissions": {"D": [79861873, 79861806, 79948658, 79858494, 79903166, 131108532, 79877857, 79879188, 79879019, 79872081, 80757765, 79874857, 79891331], "C": [79835117, 79843720, 79834387, 79845607, 79830281, 79843236, 79849443, 79848794, 79845617, 79852466, 79831253, 79854349, 79853472, 79844058, 79856498, 79879255, 79856862, 79848324, 79861537], "B": [79827155, 79837122, 79822255, 79821907, 79838530, 79834646, 79835497, 79841171, 79842066, 79829421, 79839013, 79841661, 79841348, 79839739, 79833357, 79841018, 79840476, 79842544, 79837256, 79834808], "A": [79817454, 79821533, 79816750, 79834360, 79820968, 90907998, 90906860, 90496887, 79817368, 94393615, 79825623, 79828847, 79817688, 79819374, 79828023, 79820779, 79831851, 79831246, 79823300, 79821494, 79829816, 79823411, 79929306, 79822107], "E": [85193181, 79886501, 80023736], "F2": [81605329, 85716790, 84837609, 84835671, 80416603, 80415302, 80161085], "F1": [79982046, 79890867, 79859528, 80154258, 79886462, 79874667, 79884418, 79878453, 79892295, 79881330, 79892657, 79875367, 79882448, 79932700]}, "name": "B. Orac and Medians", "statement": "Slime has a sequence of positive integers a_1, a_2,\r\nldots, a_n.In one operation Orac can choose an arbitrary subsegment [l\r\nldots r] of this sequence and replace all values a_l, a_{l + 1},\r\nldots, a_r to the value of median of\r\n{a_l, a_{l + 1},\r\nldots, a_r\r\n}.In this problem, for the integer multiset s, the median of s is equal\r\nto the\r\nlfloor\r\nfrac{|s|+1}{2}\r\nrfloor-th smallest number in it. For example, the median of\r\n{1,4,4,6,5\r\n} is 4, and the median of\r\n{1,7,5,8\r\n} is 5.Slime wants Orac to make a_1 = a_2 =\r\nldots = a_n = k using these operations.Orac thinks that it is\r\nimpossible, and he does not want to waste his time, so he decided to ask\r\nyou if it is possible to satisfy the Slime\u2019s requirement, he may ask you\r\nthese questions several times.\r\n", "solutions": ["#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__);fflush(stderr);\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int N = 100100;\nint n, k;\nint a[N];\n\nint sgn(int x) {\n\tif (x > 0) return 1;\n\tif (x == 0) return 0;\n\treturn -1;\n}\n\nbool solve() {\n\tscanf(\"%d%d\", &n, &k);\n\tbool hv = false;\n\tbool bad = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\tx -= k;\n\t\thv |= (x == 0);\n\t\tx = sgn(x);\n\t\tbad |= x == -1;\n\t\tif (x == 0) x = 1;\n\t\ta[i + 1] = x;\n\t}\n\tif (!hv) return false;\n\tif (!bad) return true;\n\ta[0] = 0;\n\tfor (int i = 0; i < n; i++)\n\t\ta[i + 1] += a[i];\n\tint minBal = n + 3;\n\tfor (int i = 3; i <= n; i++) {\n\t\tminBal = min(minBal, a[i - 3]);\n\t\tif (a[i] > minBal)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--)\n\t\tif (solve())\n\t\t\tprintf(\"yes\\n\");\n\t\telse\n\t\t\tprintf(\"no\\n\");\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy", "math"], "dificulty": "2000", "interactive": false}