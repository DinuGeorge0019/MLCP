{
    "link": "https://codeforces.com//contest/425/problem/D",
    "problemId": "8920",
    "problem_idx": "D",
    "shortId": "425D",
    "contest_number": "425",
    "problem_submissions": {
        "B": [
            6493816,
            6490109,
            6487858,
            6492945,
            6493447,
            6494871,
            6503981,
            6490064,
            6487024,
            6487873,
            6488901,
            6490848,
            6487215,
            6488740,
            6491398,
            6488181,
            6494124
        ],
        "E": [
            6490795,
            6493696,
            6491349,
            6492041,
            6492843,
            6491006,
            6493942,
            6492765,
            6494748,
            6494561,
            6492813,
            6495319,
            6492515
        ],
        "D": [
            6489455,
            6489243,
            6493425,
            6488979,
            6491658,
            6492358,
            6492448,
            6491514,
            6489861,
            6490799,
            6495344,
            6495192,
            6489703,
            6494515,
            6492875,
            6489743,
            6494196,
            6487259
        ],
        "C": [
            6487948,
            6491220,
            6490395,
            6494547,
            6494500,
            6494191,
            6490274,
            6489790,
            6489399,
            6488464,
            6495052,
            6490305,
            6492770,
            6492019,
            6492713,
            6491433,
            6490329,
            6492999,
            6490722
        ],
        "A": [
            6485874,
            6485358,
            6485796,
            6485600,
            6486055,
            6486577,
            6485984,
            6486210,
            6485602,
            6485840,
            6487099,
            6485836,
            6485353,
            6486318,
            6486057,
            6485564,
            6493037
        ]
    },
    "name": "D. Sereja and Squares",
    "statement": "Sereja has painted distinct points on the plane. The coordinates of each\r\npoint are integers. Now he is wondering: how many squares are there with\r\nsides parallel to the coordinate axes and with points painted in all its\r\nfour vertexes? Help him, calculate this number.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <ctime>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <fstream>\n#include <cstdlib>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <numeric>\n\n#define mp make_pair\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#define forn(i, n) for (int i = 0; i < (int)(n); ++i)\n#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)\n\nusing namespace std;\n\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef long long i64;\ntypedef vector<i64> vi64;\ntypedef vector<vi64> vvi64;\n\nconst int maxq = 100001;\nconst int bord = 500;\n\nvi xs[maxq];\n\nbool exists(int x, int y) {\n    if (x >= maxq) return false;\n    return binary_search(all(xs[x]), y);\n}\n\nint main() {\n#ifdef LOCAL_DEFINE\n    freopen(\"input.txt\", \"rt\", stdin);\n    freopen(\"output.txt\", \"wt\", stdout);\n#endif\n\n    int N;\n    scanf(\"%d\", &N);\n    forn(i, N) {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        xs[x].pb(y);\n    }\n    forn(i, maxq) {\n        sort(all(xs[i]));\n    }\n\n    i64 ans = 0;\n    forn(x, maxq) {\n        if (xs[x].size() < bord) {\n            forn(i, xs[x].size()) {\n                for (int j = i + 1; j < xs[x].size(); ++j) {\n                    int d = xs[x][j] - xs[x][i];\n                    if (exists(x + d, xs[x][i]) && exists(x + d, xs[x][j])) {\n                        ++ans;\n                    }\n                }\n            }\n        } else {\n            for (int xx = x + 1; xx < maxq; ++xx) {\n                forn(i, xs[xx].size()) {\n                    int yy = xs[xx][i];\n                    int d = xx - x;\n                    if (exists(x, yy) && exists(x, yy + d) && exists(xx, yy + d)) {\n                        ++ans;\n                    }\n                }\n            }\n        }\n    }\n    cout << ans << '\\n';\n\n#ifdef LOCAL_DEFINE\n    cerr << \"Time elapsed: \" << 1.0 * clock() / CLOCKS_PER_SEC << \" s.\\n\";\n#endif\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "hashing"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Sereja and Squares.json",
    "editorial_link": "https://codeforces.com//blog/entry/11998",
    "editorial": "Lets line contain not more then points. Then for each pair of points on\r\nthis line (lets it be and ) check: is there squere that contain them as\r\nvertexes. So we should check: is there(in input) pair of points and , or\r\npair and . Lets delete all watched points, and reverse points about line\r\n. Then each line will contain not more then points. Will solve problem\r\nin the same way. Now we should learn: how to check is some pair of\r\npoints(on one vertical line) in input. Lets write all of this pairs in\r\nvectors. Each vector(for every line) will contain pairs that we should\r\ncheck on it. Suppose, that we check it for line number . Lets mark in\r\nsome array for all points with x-coordinate equal to . Now to check is\r\nour pair with y-coordinates on line we can simply check following\r\ncondition: .\r\n"
}