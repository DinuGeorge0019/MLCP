{"link": "https://codeforces.com//contest/986/problem/E", "problemId": "186085", "problem_idx": "E", "shortId": "986E", "contest_number": "986", "problem_submissions": {"D": [42104811, 42104792, 42104740, 42104337, 42103931, 42103877, 42103819, 42103728, 42103430, 42103363, 42090622, 42090614, 42090469, 42090439, 42090421, 42090403, 42090387, 38733857, 38748243, 38741625, 38744949, 38732535, 38776124, 38775923, 73829906, 48935186, 46682125, 38947315, 38947302, 38947285, 38946968, 38946777, 38946767, 38946516, 38946375, 38946181, 38944862, 38944853, 38944843, 38944833, 38944826, 38944784, 38944707, 38944667, 38944627, 38903696, 38903692, 38903690, 38903603, 38903544, 38903533, 38903435, 38903221, 38903111, 38903010, 38902730, 38902722, 38902698, 38868689, 38868687, 38868625, 38868606, 38868604, 38868564, 38868475, 38868474, 38868436, 38868410, 38868378, 38868342, 38868314, 38868268, 38868265, 38868261, 38868236, 38868233, 38868218, 38868215, 38868193, 38868187, 38868182, 38868177, 38868174, 38868170, 38868106, 38868104, 38868091, 38868070, 38868066, 38868064, 38868060, 38868052, 38868048, 38868019, 38868012, 38868008, 38868002, 38783809, 38783797, 38783781, 38783746, 38783741, 38783462, 38783445, 38780380, 38776796, 38776020, 38776009, 38775996, 38775983, 38775959, 38774927, 38774159, 38774142, 38774133, 38774083, 38772484, 38772455, 38772446, 38772398, 38772056, 38771982, 38771852, 38771749, 38771473, 38770302, 38770261, 38758325, 38743969, 38775097, 38775073, 38775025, 38774686, 38769151], "E": [38747055, 38738177, 38746661, 38745236, 38748676, 38751753, 38745180, 38747262, 38746823, 38745830, 38751939, 38740507, 38750013, 38749870, 38752411, 38979399, 38747190, 38753936, 38746328, 42589039, 38781799, 38781783, 38752251, 38750400, 38738811, 38743630], "F": [38743952, 38741619, 38749997, 38752035, 38759153, 38766951, 38747287, 38803173, 38802767], "C": [38736843, 38745069, 38732331, 38733537, 38731636, 38741009, 38735527, 38733610, 38737347, 38735879, 38747912, 38735093, 38731137, 38747956, 38732967, 38749305, 38742224, 38742550, 38745758, 38746063], "B": [38727078, 38726856, 38726789, 38729993, 38726090, 38734230, 38728365, 38728016, 38727081, 38728548, 38726100, 38728328, 38735514, 38726544, 38737280, 38727906, 38727500, 38748980, 38769342], "A": [38722963, 38723690, 38723235, 38724127, 38723622, 38736390, 38723609, 38724267, 38724018, 38725327, 38724685, 38725264, 38723597, 38724159, 38722907, 38723625, 38725178, 38724347, 38741266, 38724867]}, "name": "E. Prince s Problem", "statement": "Let the main characters of this problem be personages from some recent\r\nmovie. New Avengers seem to make a lot of buzz. I didn\u2019t watch any part\r\nof the franchise and don\u2019t know its heroes well, but it won\u2019t stop me\r\nfrom using them in this problem statement. So, Thanos and Dr. Strange\r\nare doing their superhero and supervillain stuff, but then suddenly they\r\nstumble across a regular competitive programming problem.You are given a\r\ntree with n vertices.In each vertex v there is positive integer\r\na_{v}.You have to answer q queries.Each query has a from u v x.You have\r\nto calculate\r\nprod_{w\r\nin P} gcd(x, a_{w})\r\nmod (10^{9} + 7), where P is a set of vertices on path from u to v. In\r\nother words, you are to calculate the product of gcd(x, a_{w}) for all\r\nvertices w on the path from u to v. As it might be large, compute it\r\nmodulo 10^9+7. Here gcd(s, t) denotes the greatest common divisor of s\r\nand t.Note that the numbers in vertices change after queries.I suppose\r\nthat you are more interested in superhero business of Thanos and Dr.\r\nStrange than in them solving the problem. So you are invited to solve\r\nthis problem instead of them.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 29.05.2018 19:57:11       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstring to_string(string s) {\n  return '\"' + s + '\"';\n}\n\nstring to_string(const char* s) {\n  return to_string((string) s);\n}\n\nstring to_string(bool b) {\n  return (b ? \"true\" : \"false\");\n}\n\ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p) {\n  return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\";\n}\n\ntemplate <typename A>\nstring to_string(A v) {\n  bool first = true;\n  string res = \"{\";\n  for (const auto &x : v) {\n    if (!first) {\n      res += \", \";\n    }\n    first = false;\n    res += to_string(x);\n  }\n  res += \"}\";\n  return res;\n}\n\nvoid debug_out() { cerr << endl; }\n\ntemplate <typename Head, typename... Tail>\nvoid debug_out(Head H, Tail... T) {\n  cerr << \" \" << to_string(H);\n  debug_out(T...);\n}\n\n#ifdef LOCAL\n#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n#else\n#define debug(...) 42\n#endif\n\nconst int md = (int) 1e9 + 7;\n\ninline void add(int &a, int b) {\n  a += b;\n  if (a >= md) a -= md;\n}\n\ninline void sub(int &a, int b) {\n  a -= b;\n  if (a < 0) a += md;\n}\n\ninline int mul(int a, int b) {\n#if !defined(_WIN32) || defined(_WIN64)\n  return (int) ((long long) a * b % md);\n#endif\n  unsigned long long x = (long long) a * b;\n  unsigned xh = (unsigned) (x >> 32), xl = (unsigned) x, d, m;\n  asm(\n    \"divl %4; \\n\\t\"\n    : \"=a\" (d), \"=d\" (m)\n    : \"d\" (xh), \"a\" (xl), \"r\" (md)\n  );\n  return m;\n}\n\ninline int power(int a, long long b) {\n  int res = 1;\n  while (b > 0) {\n    if (b & 1) {\n      res = mul(res, a);\n    }\n    a = mul(a, a);\n    b >>= 1;\n  }\n  return res;\n}\n\ninline int inv(int a) {\n  a %= md;\n  if (a < 0) a += md;\n  int b = md, u = 0, v = 1;\n  while (a) {\n    int t = b / a;\n    b -= t * a; swap(a, b);\n    u -= t * v; swap(u, v);\n  }\n  assert(b == 1);\n  if (u < 0) u += md;\n  return u;\n}\n\ntemplate <typename T>\nclass graph {\n  public:\n  struct edge {\n    int from;\n    int to;\n    T cost;\n  };\n\n  vector<edge> edges;\n  vector< vector<int> > g;\n  int n;\n\n  function<bool(int)> ignore;\n\n  graph(int _n) : n(_n) {\n    g.resize(n);\n    ignore = nullptr;\n  }\n\n  virtual int add(int from, int to, T cost) = 0;\n\n  virtual void set_ignore_edge_rule(const function<bool(int)> &f) {\n    ignore = f;\n  }\n\n  virtual void reset_ignore_edge_rule() {\n    ignore = nullptr;\n  }\n};\n\ntemplate <typename T>\nclass forest : public graph<T> {\n  public:\n  using graph<T>::edges;\n  using graph<T>::g;\n  using graph<T>::n;\n\n  forest(int _n) : graph<T>(_n) {\n  }\n\n  int add(int from, int to, T cost = 1) {\n    assert(0 <= from && from < n && 0 <= to && to < n);\n    int id = (int) edges.size();\n    assert(id < n - 1);\n    g[from].push_back(id);\n    g[to].push_back(id);\n    edges.push_back({from, to, cost});\n    return id;\n  }\n};\n\ntemplate <typename T>\nclass dfs_forest : public forest<T> {\n  public:\n  using forest<T>::edges;\n  using forest<T>::g;\n  using forest<T>::n;\n  using forest<T>::ignore;\n\n  vector<int> pv;\n  vector<int> pe;\n  vector<int> order;\n  vector<int> pos;\n  vector<int> end;\n  vector<int> sz;\n  vector<int> root;\n  vector<int> depth;\n  vector<T> dist;\n\n  dfs_forest(int _n) : forest<T>(_n) {\n  }\n\n  void init() {\n    pv = vector<int>(n, -1);\n    pe = vector<int>(n, -1);\n    order.clear();\n    pos = vector<int>(n, -1);\n    end = vector<int>(n, -1);\n    sz = vector<int>(n, 0);\n    root = vector<int>(n, -1);\n    depth = vector<int>(n, -1);\n    dist = vector<T>(n);\n  }\n\n  void clear() {\n    pv.clear();\n    pe.clear();\n    order.clear();\n    pos.clear();\n    end.clear();\n    sz.clear();\n    root.clear();\n    depth.clear();\n    dist.clear();\n  }\n\n  private:\n  void do_dfs(int v) {\n    pos[v] = (int) order.size();\n    order.push_back(v);\n    sz[v] = 1;\n    for (int id : g[v]) {\n      if (id == pe[v] || (ignore != nullptr && ignore(id))) {\n        continue;\n      }\n      auto &e = edges[id];\n      int to = e.from ^ e.to ^ v;\n      depth[to] = depth[v] + 1;\n      dist[to] = dist[v] + e.cost;\n      pv[to] = v;\n      pe[to] = id;\n      root[to] = (root[v] != -1 ? root[v] : to);\n      do_dfs(to);\n      sz[v] += sz[to];\n    }\n    end[v] = (int) order.size() - 1;\n  }\n\n  void do_dfs_from(int v) {\n    depth[v] = 0;\n    dist[v] = T{};\n    root[v] = v;\n    pv[v] = pe[v] = -1;\n    do_dfs(v);\n  }\n\n  public:\n  void dfs(int v, bool clear_order = true) {\n    if (pv.empty()) {\n      init();\n    } else {\n      if (clear_order) {\n        order.clear();\n      }\n    }\n    do_dfs_from(v);\n  }\n\n  void dfs_all() {\n    init();\n    for (int v = 0; v < n; v++) {\n      if (depth[v] == -1) {\n        do_dfs_from(v);\n      }\n    }\n    assert((int) order.size() == n);\n  }\n};\n\ntemplate <typename T>\nclass lca_forest : public dfs_forest<T> {\n  public:\n  using dfs_forest<T>::edges;\n  using dfs_forest<T>::g;\n  using dfs_forest<T>::n;\n  using dfs_forest<T>::pv;\n  using dfs_forest<T>::pos;\n  using dfs_forest<T>::end;\n  using dfs_forest<T>::depth;\n\n  int h;\n  vector< vector<int> > pr;\n\n  lca_forest(int _n) : dfs_forest<T>(_n) {\n  }\n\n  inline void build_lca() {\n    assert(!pv.empty());\n    int max_depth = 0;\n    for (int i = 0; i < n; i++) {\n      max_depth = max(max_depth, depth[i]);\n    }\n    h = 1;\n    while ((1 << h) <= max_depth) {\n      h++;\n    }\n    pr.resize(n);\n    for (int i = 0; i < n; i++) {\n      pr[i].resize(h);\n      pr[i][0] = pv[i];\n    }\n    for (int j = 1; j < h; j++) {\n      for (int i = 0; i < n; i++) {\n        pr[i][j] = (pr[i][j - 1] == -1 ? -1 : pr[pr[i][j - 1]][j - 1]);\n      }\n    }\n  }\n\n  inline bool anc(int x, int y) {\n    return (pos[x] <= pos[y] && end[y] <= end[x]);\n  }\n\n  inline int lca(int x, int y) {\n    // maybe optimize?\n    // if depth[x] > depth[y], swap\n    // then go from j = log(depth[x])?\n    assert(!pr.empty());\n    if (anc(x, y)) {\n      return x;\n    }\n    if (anc(y, x)) {\n      return y;\n    }\n    for (int j = h - 1; j >= 0; j--) {\n      if (pr[x][j] != -1 && !anc(pr[x][j], y)) {\n        x = pr[x][j];\n      }\n    }\n    return pr[x][0];\n  }\n};\n\ntemplate <typename T>\nclass fenwick {\n  public:\n  vector<T> fenw;\n  int n;\n\n  fenwick(int _n) : n(_n) {\n    fenw.resize(n);\n  }\n\n  void modify(int x, T v) {\n    while (x < n) {\n      fenw[x] += v;\n      x |= (x + 1);\n    }\n  }\n\n  T get(int x) {\n    T v{};\n    while (x >= 0) {\n      v += fenw[x];\n      x = (x & (x + 1)) - 1;\n    }\n    return v;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  const int MAX = (int) 1e7 + 10;\n  vector<int> prime_div(MAX);\n  for (int i = 0; i < MAX; i++) {\n    prime_div[i] = i;\n  }\n  for (int i = 2; i * i < MAX; i++) {\n    if (prime_div[i] == i) {\n      for (int j = i * i; j < MAX; j += i) {\n        if (prime_div[j] == j) {\n          prime_div[j] = i;\n        }\n      }\n    }\n  }\n  vector<int> pos(MAX);\n  vector<int> primes;\n  for (int i = 2; i < MAX; i++) {\n    if (prime_div[i] == i) {\n      pos[i] = (int) primes.size();\n      primes.push_back(i);\n    }\n  }\n  vector<vector<pair<int,int>>> at(primes.size());\n  int n;\n  cin >> n;\n  lca_forest<int> g(n);\n  for (int i = 0; i < n - 1; i++) {\n    int x, y;\n    cin >> x >> y;\n    x--; y--;\n    g.add(x, y);\n  }\n  g.dfs(0);\n  g.build_lca();\n  for (int i = 0; i < n; i++) {\n    int foo;\n    cin >> foo;\n    while (foo > 1) {\n      int d = prime_div[foo];\n      int cc = 0;\n      while (foo % d == 0) {\n        foo /= d;\n        cc++;\n      }\n      at[pos[d]].emplace_back(cc, i);\n    }\n  }\n  int tt;\n  cin >> tt;\n  vector<int> u(tt), v(tt), lca(tt);\n  vector<int> res(tt, 1);\n  for (int i = 0; i < tt; i++) {\n    int foo;\n    cin >> u[i] >> v[i] >> foo;\n    u[i]--; v[i]--;\n    lca[i] = g.lca(u[i], v[i]);\n    while (foo > 1) {\n      int d = prime_div[foo];\n      int cc = 0;\n      while (foo % d == 0) {\n        foo /= d;\n        cc++;\n      }\n      for (int j = 1; j <= cc; j++) {\n        at[pos[d]].emplace_back(j, ~i);\n      }\n    }\n  }\n  fenwick<int> fenw(n);\n  for (int it = 0; it < (int) primes.size(); it++) {\n    if (at[it].empty()) {\n      continue;\n    }\n    sort(at[it].rbegin(), at[it].rend());\n    for (auto &p : at[it]) {\n      int id = p.second;\n      if (id >= 0) {\n        fenw.modify(g.pos[id], 1);\n        fenw.modify(g.end[id] + 1, -1);\n      } else {\n        id = ~id;\n        int cnt = fenw.get(g.pos[u[id]]) + fenw.get(g.pos[v[id]]) - fenw.get(g.pos[lca[id]]);\n        if (lca[id] != 0) {\n          cnt -= fenw.get(g.pos[g.pv[lca[id]]]);\n        }\n        res[id] = mul(res[id], power(primes[it], cnt));\n      }\n    }\n    for (auto &p : at[it]) {\n      int id = p.second;\n      if (id >= 0) {\n        fenw.modify(g.pos[id], -1);\n        fenw.modify(g.end[id] + 1, +1);\n      }\n    }\n  }\n  for (int i = 0; i < tt; i++) {\n    cout << res[i] << '\\n';\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "data structures", "math", "number theory", "trees"], "dificulty": "2800", "interactive": false}