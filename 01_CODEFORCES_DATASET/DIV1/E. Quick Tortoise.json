{"link": "https://codeforces.com//contest/232/problem/E", "problemId": "1948", "problem_idx": "E", "shortId": "232E", "contest_number": "232", "problem_submissions": {"D": [2346447, 2453840, 2673464, 2351686, 2351635, 2361185, 2356801, 2386026], "A": [2343160, 2344433, 2341097, 2341781, 2340598, 2342868, 2342498, 2340984, 2340712, 2356088, 2341364, 2341135, 2343044, 2341523, 2341326, 2341345, 2341452], "B": [2340867, 2340703, 2342538, 2341256, 2342019, 2341112, 2341451, 2342353, 2341669, 2342315, 2342610, 2342080, 2342975, 2343085, 2343108, 2343200], "E": [2564230, 3726445, 2360898, 2389163, 2349135, 2349124], "C": [2348750, 2348392, 2352824, 2348892]}, "name": "E. Quick Tortoise", "statement": "John Doe has a field, which is a rectangular table of size . We assume\r\nthat the field rows are numbered from 1 to from top to bottom, and the\r\nfield columns are numbered from 1 to from left to right. Then the cell\r\nof the field at the intersection of the -th row and the -th column has\r\ncoordinates (; ).We know that some cells of John\u2019s field are painted\r\nwhite, and some are painted black. Also, John has a tortoise, which can\r\nmove along the white cells of the field. The tortoise can get from a\r\nwhite cell with coordinates (; ) into cell (; ) or (; ), if the\r\ncorresponding cell is painted white. In other words, the turtle can move\r\nonly along the white cells of the field to the right or down. The turtle\r\ncan not go out of the bounds of the field.In addition, John has queries,\r\neach of them is characterized by four numbers (, ). For each query John\r\nwants to know whether the tortoise can start from the point with\r\ncoordinates (; ), and reach the point with coordinates (; ), moving only\r\nalong the white squares of the field.\r\n", "solutions": ["#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <functional>\n#include <utility>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n#include <bitset>\n\nusing namespace std;\n\n#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)\n#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\nint X,Y;\nchar board[510][510];\nint x3[600010],y3[600010],x2[600010],y2[600010];\nbool ans[600010];\n\nbitset <510> dp1[510][510], dp2[510][510];\n\nvoid dfs(int L, int R, vector <int> q){\n    int i,j;\n    int M = (L + R) / 2;\n    \n    for(i=L;i<=M;i++) REP(j,Y) dp1[i][j].reset();\n    for(i=M;i<=R;i++) REP(j,Y) dp2[i][j].reset();\n    \n    for(i=M;i>=L;i--) for(j=Y-1;j>=0;j--) if(board[i][j] == '.'){\n        if(i == M) dp1[i][j].set(j);\n        if(i+1 <= M) dp1[i][j] |= dp1[i+1][j];\n        if(j+1 < Y) dp1[i][j] |= dp1[i][j+1]; \n    }\n    \n    for(i=M;i<=R;i++) REP(j,Y) if(board[i][j] == '.'){\n        if(i == M) dp2[i][j].set(j);\n        if(i-1 >= M) dp2[i][j] |= dp2[i-1][j];\n        if(j-1 >= 0) dp2[i][j] |= dp2[i][j-1];\n    }\n    \n    REP(i,q.size()){\n        int id = q[i];\n        if(x3[id] <= M && x2[id] >= M && (dp1[x3[id]][y3[id]] & dp2[x2[id]][y2[id]]).any()) ans[id] = true;\n    }\n    \n    if(L < M){\n        vector <int> q2;\n        REP(i,q.size()) if(x2[q[i]] < M) q2.push_back(q[i]);\n        dfs(L, M, q2);\n    }\n    \n    if(M+1 < R){\n        vector <int> q2;\n        REP(i,q.size()) if(x3[q[i]] > M) q2.push_back(q[i]);\n        dfs(M+1, R, q2);\n    }\n}\n\nint main(void){\n    int Q,i;\n    \n    scanf(\"%d%d\", &X, &Y);\n    REP(i,X) scanf(\"%s\", board[i]);\n    scanf(\"%d\", &Q);\n    REP(i,Q) scanf(\"%d%d%d%d\", &x3[i], &y3[i], &x2[i], &y2[i]);\n    REP(i,Q) {x3[i]--; y3[i]--; x2[i]--; y2[i]--;}\n    \n    vector <int> q;\n    REP(i,Q) q.push_back(i);\n    dfs(0, X, q);\n    \n    REP(i,Q) if(ans[i]) printf(\"Yes\\n\"); else printf(\"No\\n\");\n    \n    return 0;\n}\n"], "input": "", "output": "", "tags": ["bitmasks", "divide and conquer", "dp"], "dificulty": "3000", "interactive": false}