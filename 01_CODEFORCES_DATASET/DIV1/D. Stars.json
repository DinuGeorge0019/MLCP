{
    "link": "https://codeforces.com//contest/213/problem/D",
    "problemId": "1590",
    "problem_idx": "D",
    "shortId": "213D",
    "contest_number": "213",
    "problem_submissions": {
        "E": [
            1958173,
            1969539,
            1959873,
            1958351,
            1966588
        ],
        "C": [
            1956984,
            1956310,
            1956134,
            1954719,
            1956966,
            1955946,
            1956887,
            1958032,
            1956545,
            1956052,
            1957958,
            1958035,
            1956906,
            1958230,
            1958332
        ],
        "A": [
            1955875,
            1954301,
            1955345,
            1958002,
            1955539,
            1958852,
            1959099,
            1957250,
            1954723,
            1954879,
            1954628,
            1955388,
            1957376,
            1958738
        ],
        "B": [
            1955158,
            1954754,
            1954497,
            1957206,
            1954491,
            1954655,
            1955055,
            1956017,
            1960091,
            1954587,
            1956726,
            1956267,
            1958376,
            1954707,
            1954701
        ],
        "D": [
            1958270,
            1958148,
            1956444,
            1958920,
            1958358,
            1958527,
            1958577,
            1959892,
            1960192,
            1959820,
            1960125,
            1960223
        ]
    },
    "name": "D. Stars",
    "statement": "Furik loves painting stars. A star is a shape that results if we take a\r\nregular pentagon and paint all diagonals in it. Recently he decided to\r\nteach Rubik to paint stars. After many years of training Rubik could\r\npaint stars easily. But now Furik decided to test Rubik and complicated\r\nthe task. Rubik must paint stars, observing the following rules: all\r\nstars must be painted in a single move (i.e. it is forbidden to take the\r\npen away from the paper); it is forbidden to paint the same segment of\r\nnon-zero length more than once; the stars can intersect only in their\r\nvertexes; the length of a side of the regular pentagon, in which Rubik\r\npaints each star, must equal 10. Help Rubik to cope with this hard task.\r\n",
    "solutions": [
        "#define _CRT_SECURE_NO_DEPRECATE\n#define _SECURE_SCL 0\n\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#include <map>\n#include <set>\n#include <string>\n#include <utility>\n#include <vector>\n#include <iostream>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <list>\n#include <cctype>\n#include <sstream>\n#include <cassert>\n#include <bitset>\n#include <memory.h>\n\nusing namespace std;\n\n#pragma comment(linker, \"/STACK:200000000\")\n\ntypedef long long int64;\n\n#define forn(i, n) for(int i = 0; i < (int)(n); i++)\n#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)\n#define fore(i, a, n) for(int i = (int)(a); i < (int)(n); i++)\n#define pb push_back\n#define mp make_pair\n#define fs first\n#define sc second\n#define last(a) (int(a.size()) - 1)\n#define all(a) a.begin(), a.end()\n\nconst double EPS = 1E-9;\nconst int INF = 1000000000;\nconst int64 INF64 = (int64) 1E18;\nconst double PI = 3.1415926535897932384626433832795;\n\nconst double P[5][2] = {\n  {3.830127018922193, 3.366025403784439},\n  {-3.601321235851749, 10.057331467373021},\n  {0.466045194906253, 19.192786043799030},\n  {10.411264148588986, 18.147501411122495},\n  {12.490381056766580, 8.366025403784439}\n};\n\nstruct pt {\n  double x, y;\n\n  pt() {}\n  pt(double x, double y): x(x), y(y) {}\n};\n\nint m, e;\npt p[110000];\nvector<pair<int, int> > g[110000];\nvector<int> ans;\nbool used[110000];\n\nvoid add(int v1, int v2) {\n  g[v1].pb(mp(v2, e));\n  g[v2].pb(mp(v1, e));\n  e++;\n}\n\nvoid rec(int v) {\n  while (!g[v].empty()) {\n    if (used[g[v].back().sc]) {\n      g[v].pop_back();\n      continue;\n    }\n\n    used[g[v].back().sc] = true;\n    rec(g[v].back().fs);\n  }\n  ans.pb(v);\n}\n\nint sym(pt p, pt q, pt h) {\n  double a = p.y - q.y;\n  double b = q.x - p.x;\n  double c = -a * p.x - b * p.y;\n  pt res;\n  res.x = h.x - 2 * a * (a * h.x + b * h.y + c) / (a * a + b * b);\n  res.y = h.y - 2 * b * (a * h.x + b * h.y + c) / (a * a + b * b);\n  ::p[m] = res;\n  return m++;\n}\n\nint main() {\n#ifdef RADs_project\n  freopen(\"input.txt\", \"rt\", stdin);\n  freopen(\"output.txt\", \"wt\", stdout);\n#endif\n\t\n\tint n;\n  cin >> n;\n\n  vector<vector<int> > a(1, vector<int> (5));\n  forn(i, 5) {\n    p[i] = pt(P[i][0], P[i][1]);\n    a[0][i] = i;\n  }\n  m = 5;\n\n  forn(i, n - 1) {\n    int cur = 2;\n    if (i & 1)\n      cur = 1;\n\n    vector<int> b;\n    b.pb(a[i][cur]);\n\n    for (int j = 4; j >= 2; j--)\n      b.pb(sym(p[a[i][cur]], p[a[i][cur + 1]], p[a[i][(cur + j) % 5]]));\n\n    b.pb(a[i][cur + 1]);\n\n    a.pb(b);\n  }\n\n  forn(i, n)\n    forn(j, 5) {\n      if (j + 2 < 5)\n        add(a[i][j], a[i][j + 2]);\n      if (j + 3 < 5)\n        add(a[i][j], a[i][j + 3]);\n    }\n\n  cout << m << endl;\n  forn(i, m)\n    printf(\"%.20lf %.20lf\\n\", p[i].x, p[i].y);\n\n  forn(i, n) {\n    forn(j, 5)\n      printf(j ? \" %d\" : \"%d\", a[i][j] + 1);\n    puts(\"\");\n  }\n\n  rec(0);\n  forn(i, ans.size())\n    printf(i ? \" %d\" : \"%d\", ans[i] + 1);\n  puts(\"\");\n\t\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "geometry"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Stars.json",
    "editorial_link": "https://codeforces.com//blog/entry/4982",
    "editorial": "I present solution as few\r\npictures:https://get.google.com/albumarchive/pwa/115317317397602031319/Solutions131\r\nImplementation.We have only one difficult moment how to count\r\ncoordinates? We can calculate them from regular pentagon, all that you\r\nneed, you can read there.\r\n",
    "hint": []
}