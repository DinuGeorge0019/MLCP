{"link": "https://codeforces.com//contest/420/problem/D", "problemId": "8701", "problem_idx": "D", "shortId": "420D", "contest_number": "420", "problem_submissions": {"D": [6447019, 6443008, 6912685, 6445957, 6445329, 6443168, 6444131, 6443396, 6445355, 6451593, 6451581, 6451576, 6445477, 6445823, 6445771, 6446204, 6445678, 6446109, 6446112, 6453468, 6446223, 6446441], "E": [6445798, 6444814, 6444979, 6445922, 97601411, 6445707, 6451168, 6446265, 6453470, 6452703], "B": [6443597, 6444025, 6443126, 6443737, 6443495, 6442572, 6444279, 6445309, 6444923, 6442844, 6443551, 6443899, 6443352, 6444309, 6444403, 6443539, 6442859, 6444609, 6443627], "C": [6442567, 6449379, 6444178, 6442191, 6444286, 6443894, 6442929, 6444396, 6449718, 6444138, 6442459, 6444175, 6443120, 6442842, 6444661, 6443838, 6443047, 6444348], "A": [6440359, 6440343, 6443435, 6440637, 6440896, 6440723, 6443481, 6440285, 6440476, 6440399, 6440452, 6440422, 6440497, 6442028, 6443134, 6440669, 6440645, 6440656, 6441090]}, "name": "D. Cup Trick", "statement": "The employees of the F company have lots of ways to entertain\r\nthemselves. Today they invited a famous magician who shows a trick with\r\nplastic cups and a marble.The point is to trick the spectator\u2019s\r\nattention. Initially, the spectator stands in front of a line of plastic\r\ncups. Then the magician places a small marble under one cup and shuffles\r\nthe cups. Then the spectator should guess which cup hides the marble.But\r\nthe head coder of the F company isn\u2019t easy to trick. When he saw the\r\nperformance, he noticed several important facts: each cup contains a\r\nmark a number from to ; all marks on the cups are distinct; the magician\r\nshuffles the cups in operations, each operation looks like that: take a\r\ncup marked , sitting at position in the row of cups (the positions are\r\nnumbered from left to right, starting from 1) and shift it to the very\r\nbeginning of the cup row (on the first position). When the head coder\r\ncame home after work he wanted to re-do the trick. Unfortunately, he\r\ndidn\u2019t remember the starting or the final position of the cups. He only\r\nremembered which operations the magician performed. Help the coder:\r\ngiven the operations in the order they were made find at least one\r\ninitial permutation of the cups that can go through the described\r\noperations in the given order. Otherwise, state that such permutation\r\ndoesn\u2019t exist.\r\n", "solutions": ["#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define FOR(i,s,e) for (int i=(s); i<(e); i++)\n#define FOE(i,s,e) for (int i=(s); i<=(e); i++)\n#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)\n#define CLR(a,x) memset(a, x, sizeof(a))\n#define EXP(i,l) for (int i=(l); i; i=qn[i])\n#define N 1000005\nusing namespace std;\n\nstruct node{\n\tint k, p, l, r, s;\n};\n\nint n, m, rt, cnt;\nnode T[N];\n\nvoid rotate(int x, int d){\n\tswap(T[x].l, T[x].r);\n\tint t = d ? T[x].r : T[x].l;\n\tswap(T[x].k, T[t].k);\n\tif (!d) swap(T[x].r, T[t].r);\n\telse swap(T[x].l, T[t].l);\n\tT[d ? T[x].l : T[x].r].p = x;\n\tT[d ? T[t].l : T[t].r].p = t;\n\tswap(T[t].l, T[t].r);\n\tT[t].s = T[T[t].l].s + T[T[t].r].s + 1;\n}\n\nvoid splay(int rt, int x){\n\tint p, g, c;\n\twhile (x != rt){\n\t\tp = T[x].p;\n\t\tg = T[p].p;\n\t\tif (p == rt){\n\t\t\trotate(p, x == T[p].l);\n\t\t\tx = p;\n\t\t}\n\t\telse{\n\t\t\tc = (x == T[p].l);\n\t\t\tif (c == (p == T[g].l)) rotate(g, c), rotate(T[x].p, c);\n\t\t\telse rotate(p, c), rotate(g, !c);\n\t\t\tx = g;\n\t\t}\n\t}\n}\n\nint insert(int p, int x, int k){\n\tif (!x){\n\t\tT[++cnt].k = k;\n\t\tT[cnt].p = p;\n\t\tT[cnt].s = 1;\n\t\tT[cnt].l = T[cnt].r = 0;\n\t\treturn cnt;\n\t}\n\tif (k < T[x].k) T[x].l = insert(x, T[x].l, k);\n\telse T[x].r = insert(x, T[x].r, k);\n\t++T[x].s;\n\treturn x;\n}\n\nvoid insert(int &rt, int k){\n\trt = insert(0, rt, k);\n\tsplay(rt, cnt);\n}\n\nvoid splayRank(int rt, int r){\n\tint t, x = rt;\n\twhile (1){\n\t\tt = T[T[x].l].s;\n\t\tif (t == r) break;\n\t\tif (r > t) r -= t + 1, x = T[x].r;\n\t\telse x = T[x].l;\n\t}\n\tsplay(rt, x);\n}\n\nvoid splayKey(int rt, int k){\n\tint x = rt;\n\twhile (x && T[x].k != k){\n\t\tif (k > T[x].k) x = T[x].r;\n\t\telse x = T[x].l;\n\t}\n\tsplay(rt, x);\n}\n\nint rankCut(int rt, int lo, int hi){\n\tsplayRank(rt, lo - 1);\n\tint t = T[rt].r, r;\n\tsplayRank(t, hi - lo + 1);\n\tT[r = T[t].l].p = 0;\n\tT[t].s -= T[r].s;\n\tT[t].l = 0;\n\treturn r;\n}\n\nvoid link(int rt, int x, int d){\n\tif (!d) T[rt].l = x;\n\telse T[rt].r = x;\n\tT[rt].s += T[x].s;\n\tT[x].p = rt;\n}\n\n\nint cup, pos, map[N], rmap[N];\n\nint main(){\n\tscanf(\"%d%d\", &n, &m);\n\tinsert(rt, -1);\n\tFOE(i,0,n) insert(rt, i);\n\tCLR(map, -1);\n\tCLR(rmap, -1);\n\tFOR(i,0,m){\n\t\tscanf(\"%d%d\", &cup, &pos);\n\t\tint t = rankCut(rt, pos, pos);\n\t\tif (map[T[t].k] != -1 && map[T[t].k] != cup){\n\t\t\tputs(\"-1\");\n\t\t\treturn 0;\n\t\t}\n\t\tif (rmap[cup] != -1 && rmap[cup] != T[t].k){\n\t\t\tputs(\"-1\");\n\t\t\treturn 0;\n\t\t}\n\t\tmap[T[t].k] = cup;\n\t\trmap[cup] = T[t].k;\n\t\tsplayRank(rt, 0);\n\t\tsplayRank(T[rt].r, 0);\n\t\tlink(T[rt].r, t, 0);\n\t}\n\n\tint t = 1;\n\tFOR(i,0,n){\n\t\tif (map[i] == -1){\n\t\t\twhile (rmap[t] != -1) ++t;\n\t\t\tmap[i] = t;\n\t\t\trmap[t] = i;\n\t\t}\n\t\tprintf(\"%d \", map[i]);\n\t}\n\t\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["data structures"], "dificulty": "2200", "interactive": false}