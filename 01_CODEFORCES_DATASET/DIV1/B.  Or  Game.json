{
    "link": "https://codeforces.com//contest/578/problem/B",
    "problemId": "35417",
    "problem_idx": "B",
    "shortId": "578B",
    "contest_number": "578",
    "problem_submissions": {
        "D": [
            13043018,
            13035846,
            13036528,
            13038587,
            13044167,
            13041175,
            13037259,
            13038897,
            13041869,
            13037673,
            13043371,
            13037414,
            13050779,
            13036416,
            13040134,
            13038396,
            13039211
        ],
        "E": [
            13038901,
            13041994,
            13043511,
            13044723,
            13047038,
            13049049,
            13049923,
            13047637,
            13049042,
            13047937,
            13049450,
            13060851,
            13041499,
            13046763
        ],
        "B": [
            13033269,
            13029103,
            13030026,
            13030734,
            13032310,
            13031712,
            13030424,
            13048740,
            13029417,
            13030120,
            13034104,
            13030544,
            13032556,
            13030378,
            13030241,
            13028648,
            13031292,
            13033423
        ],
        "C": [
            13032149,
            13030512,
            13032354,
            13033188,
            13037469,
            13037436,
            13032059,
            13034534,
            13040875,
            13051722,
            13037824,
            13032969,
            13057631,
            13032320,
            13033127,
            13034805,
            13035383,
            13037049
        ],
        "A": [
            13028273,
            13027990,
            13028573,
            13030087,
            13030676,
            13029354,
            13030453,
            13032789,
            13027838,
            13031000,
            13029241,
            13029752,
            13028730,
            13028651,
            13043323,
            13029257,
            13031415
        ],
        "F": [
            13054189,
            16905284,
            13299937
        ]
    },
    "name": "B.  Or  Game",
    "statement": "You are given numbers . You can perform at most operations. For each\r\noperation you can multiply one of the numbers by . We want to make as\r\nlarge as possible, where denotes the bitwise OR. Find the maximum\r\npossible value of after performing at most operations optimally.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\ntypedef long long ll;\n\nconst int N = 200100;\nll a[N];\nll b[N];\nll c[N];\nll x;\nint k;\nint n;\n\nint main()\n{\n    scanf(\"%d%d%lld\", &n, &k, &x);\n    ll y = 1;\n    for (int i = 0; i < k; i++)\n        y *= x;\n    for (int i = 0; i < n; i++)\n        scanf(\"%lld\", &a[i]);\n    b[0] = 0;\n    for (int i = 0; i < n; i++)\n        b[i + 1] = b[i] | a[i];\n    c[n] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        c[i] = c[i + 1] | a[i];\n    ll ans = 0;\n    for (int i = 0; i < n; i++)\n    {\n        ans = max(ans, b[i] | c[i + 1] | (a[i] * y));\n    }\n    printf(\"%lld\\n\", ans);\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B.  Or  Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/20368",
    "editorial": "We can describe a strategy as multiplying ai by x ti times so ai will become bi?=?ai?*?xti and sum of all ti will be equals to k. The fact is there must be a ti equal to k and all other ti equals to 0. If not, we can choose the largest number bj in sequence b, and change the strategy so that tj?=?k and all other tj?=?0. The change will make the highest bit 1 of bj become higher so the or-ed result would be higher.\n\nAfter knowing the fact, We can iterator all number in sequence a and multiply it by xk and find the maximum value of our target between them. There are several method to do it in lower time complexity. You can check the sample code we provide.(I believe you can understand it quickly.)"
}