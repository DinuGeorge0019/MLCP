{
    "link": "https://codeforces.com//contest/1302/problem/C",
    "problemId": "530373",
    "problem_idx": "C",
    "shortId": "1302C",
    "contest_number": "1302",
    "problem_submissions": {
        "G": [
            70178308,
            70181430
        ],
        "F": [
            70174410,
            70180942
        ],
        "B": [
            70169462,
            70166865
        ],
        "C": [
            70167717,
            70168002
        ],
        "A": [
            70167198,
            70167522
        ],
        "J": [
            70183433
        ],
        "D": [
            70170852
        ],
        "H": [],
        "E": []
    },
    "editorial_link": "https://codeforces.com//blog/entry/73599",
    "editorial": "Well, the problem itself is a standard segment tree/fenwick tree\r\nexercise. So where could one mess up here?We expected participants to\r\nnotice that this is the only problem with several test cases here, so\r\nthe common bug used here is not clearing the global data structure\r\nbetween tests. One can see that both Fenwick tree and Segment tree\r\nwithout clearing produce same answers.\r\n",
    "name": "C. Segment tree or Fenwick ",
    "statement": "You are given an array A of length n, initially filled with zeros. You\r\nneed to process q queries to the array, each of one of the following\r\ntypes: : you need to assign A_x=y; : you need to print\r\nsum\r\nlimits_{i=l}^r A_i. Furthermore, there are T independent tests you need\r\nto process.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using i64 = long long; int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int n;    std::cin >> n;        std::vector<int> a(n);    for (int i = 0; i < n; i++) {        std::cin >> a[i];    }        std::vector<std::vector<int>> adj(n);        for (int i = 1; i < n; i++) {        int u, v;        std::cin >> u >> v;        u--, v--;        adj[u].push_back(v);        adj[v].push_back(u);    }        std::vector<int> dp(n), t(n);    std::vector<std::set<int>> s(n);    std::function<void(int, int)> dfs = [&](int x, int p) {        std::map<int, int> cnt;        if (adj[x].size() == 1 && x) {            s[x].insert(0);            dp[x] = 1;        }        for (auto y : adj[x]) {            if (y == p) {                continue;            }            dfs(y, x);            dp[x] += dp[y] + 1;            if (s[x].size() < s[y].size()) {                std::swap(s[x], s[y]);                std::swap(t[x], t[y]);            }            for (auto z : s[y]) {                z ^= t[x] ^ t[y];                if (s[x].count(z)) {                    cnt[z ^ t[x]]++;                } else {                    s[x].insert(z);                }            }        }        if (!cnt.empty()) {            int mx = 0;            for (auto [_, v] : cnt) {                mx = std::max(mx, v);            }            dp[x] -= mx + 1;            s[x].clear();            t[x] = a[x];            for (auto [z, v] : cnt) {                if (v == mx) {                    s[x].insert(z);                }            }        } else {            dp[x] -= 1;            t[x] ^= a[x];        }    };    dfs(0, -1);        int ans = dp[0] + !s[0].count(t[0]);    std::cout << ans << \"\\n\";        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Segment tree or Fenwick .json"
}