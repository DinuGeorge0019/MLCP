{
    "link": "https://codeforces.com//contest/1528/problem/B",
    "problemId": "994163",
    "problem_idx": "B",
    "shortId": "1528B",
    "contest_number": "1528",
    "problem_submissions": {
        "F": [
            117241784,
            117237625,
            117249711,
            117251014,
            117237719,
            117247531,
            117250487,
            117296792,
            117362083
        ],
        "C": [
            117229826,
            117199788,
            117206577,
            117201851,
            117204674,
            117206245,
            117218212,
            117196904,
            117210131,
            117210736,
            117206890,
            117212730,
            117208145,
            117211669,
            117203428,
            117211467,
            117203007,
            117206081,
            117210746,
            117210824
        ],
        "E": [
            117212844,
            117230561,
            117222959,
            117226469,
            117224989,
            117238353,
            117239558,
            117216115,
            117234224,
            117239827,
            117237600,
            117238423,
            117244129,
            117238121,
            117240390,
            117239904,
            117240349,
            117240625,
            117238487,
            117240173
        ],
        "D": [
            117201259,
            117208270,
            117212623,
            117211738,
            117242708,
            117216479,
            117225362,
            117203170,
            117222650,
            117216984,
            117223735,
            117223429,
            117215498,
            117223732,
            117224661,
            117222534,
            117223454,
            117224387,
            117255573,
            117255349,
            117255220,
            117226605,
            117221662
        ],
        "B": [
            117190972,
            117190286,
            117191599,
            117193984,
            117197139,
            117198582,
            117200082,
            117188842,
            117200429,
            117191737,
            117195913,
            117196829,
            117195712,
            117199801,
            117193006,
            117201359,
            117211353,
            117194542,
            117198721,
            117194778
        ],
        "A": [
            117185385,
            117182301,
            117183363,
            117182330,
            117185042,
            117182254,
            117192623,
            117181878,
            117188021,
            117186007,
            117186714,
            117183913,
            117183194,
            117189883,
            117184967,
            117183486,
            117187212,
            117183227,
            117187339,
            117198905
        ]
    },
    "name": "B. Kavi on Pairing Duty",
    "statement": "Kavi has 2n points lying on the OX axis, i-th of which is located at x =\r\ni.Kavi considers all ways to split these 2n points into n pairs. Among\r\nthose, he is interested in pairings, which are defined as\r\nfollows:Consider n segments with ends at the points in correspondent\r\npairs. The pairing is called good, if for every 2 different segments A\r\nand B among those, at least one of the following holds: One of the\r\nsegments A and B lies completely inside the other. A and B have the same\r\nlength. Consider the following example: A is a good pairing since the\r\nred segment lies completely inside the blue segment.B is a good pairing\r\nsince the red and the blue segment have the same length.C is not a good\r\npairing since none of the red or blue segments lies inside the other,\r\nneither do they have the same size.Kavi is interested in the number of\r\ngood pairings, so he wants you to find it for him. As the result can be\r\nlarge, find this number modulo 998244353.Two pairings are called\r\ndifferent, if some two points are in one pair in some pairing and in\r\ndifferent pairs in another.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <int MOD_> struct modnum {\n\tstatic constexpr int MOD = MOD_;\n\tstatic_assert(MOD_ > 0, \"MOD must be positive\");\n\nprivate:\n\tusing ll = long long;\n\n\tint v;\n\n\tstatic int minv(int a, int m) {\n\t\ta %= m;\n\t\tassert(a);\n\t\treturn a == 1 ? 1 : int(m - ll(minv(m, a)) * ll(m) / a);\n\t}\n\npublic:\n\n\tmodnum() : v(0) {}\n\tmodnum(ll v_) : v(int(v_ % MOD)) { if (v < 0) v += MOD; }\n\texplicit operator int() const { return v; }\n\tfriend std::ostream& operator << (std::ostream& out, const modnum& n) { return out << int(n); }\n\tfriend std::istream& operator >> (std::istream& in, modnum& n) { ll v_; in >> v_; n = modnum(v_); return in; }\n\n\tfriend bool operator == (const modnum& a, const modnum& b) { return a.v == b.v; }\n\tfriend bool operator != (const modnum& a, const modnum& b) { return a.v != b.v; }\n\n\tmodnum inv() const {\n\t\tmodnum res;\n\t\tres.v = minv(v, MOD);\n\t\treturn res;\n\t}\n\tfriend modnum inv(const modnum& m) { return m.inv(); }\n\tmodnum neg() const {\n\t\tmodnum res;\n\t\tres.v = v ? MOD-v : 0;\n\t\treturn res;\n\t}\n\tfriend modnum neg(const modnum& m) { return m.neg(); }\n\n\tmodnum operator- () const {\n\t\treturn neg();\n\t}\n\tmodnum operator+ () const {\n\t\treturn modnum(*this);\n\t}\n\n\tmodnum& operator ++ () {\n\t\tv ++;\n\t\tif (v == MOD) v = 0;\n\t\treturn *this;\n\t}\n\tmodnum& operator -- () {\n\t\tif (v == 0) v = MOD;\n\t\tv --;\n\t\treturn *this;\n\t}\n\tmodnum& operator += (const modnum& o) {\n\t\tv += o.v;\n\t\tif (v >= MOD) v -= MOD;\n\t\treturn *this;\n\t}\n\tmodnum& operator -= (const modnum& o) {\n\t\tv -= o.v;\n\t\tif (v < 0) v += MOD;\n\t\treturn *this;\n\t}\n\tmodnum& operator *= (const modnum& o) {\n\t\tv = int(ll(v) * ll(o.v) % MOD);\n\t\treturn *this;\n\t}\n\tmodnum& operator /= (const modnum& o) {\n\t\treturn *this *= o.inv();\n\t}\n\n\tfriend modnum operator ++ (modnum& a, int) { modnum r = a; ++a; return r; }\n\tfriend modnum operator -- (modnum& a, int) { modnum r = a; --a; return r; }\n\tfriend modnum operator + (const modnum& a, const modnum& b) { return modnum(a) += b; }\n\tfriend modnum operator - (const modnum& a, const modnum& b) { return modnum(a) -= b; }\n\tfriend modnum operator * (const modnum& a, const modnum& b) { return modnum(a) *= b; }\n\tfriend modnum operator / (const modnum& a, const modnum& b) { return modnum(a) /= b; }\n};\n\ntemplate <typename T> T pow(T a, long long b) {\n\tassert(b >= 0);\n\tT r = 1; while (b) { if (b & 1) r *= a; b >>= 1; a *= a; } return r;\n}\n\nusing num = modnum<998244353>;\n\nvector<num> fact, ifact;\n\nvoid init(){\n\tint N = 1100000;\n\tfact = {1};\n\tfor(int i = 1; i < N; i++) fact.push_back(i * fact[i-1]);\n\tifact.resize(N);\n\tifact.back() = 1 / fact.back();\n\tfor(int i = N - 1; i > 0; i--) ifact[i-1] = i * ifact[i];\n}\n\nnum ncr(int n, int k){\n\tif(k < 0 || k > n) return 0;\n\treturn fact[n] * ifact[k] * ifact[n-k];\n}\n\nint main(){\n\tios_base::sync_with_stdio(false), cin.tie(nullptr);\n\tinit();\n\tint n;\n\tcin >> n;\n\tvector<num> dp(n+1, 0);\n\tdp[0] = 1;\n\tnum psum = 0;\n\tfor(int i = 1; i <= n; i++){\n\t\tfor(int j = i; j <= n; j += i){\n\t\t\tdp[j]++;\n\t\t}\n\t}\n\tfor(int i = 1; i <= n; i++){\n\t\tdp[i] += psum;\n\t\tpsum += dp[i];\n\t}\n\tcout << dp[n] << '\\n';\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Kavi on Pairing Duty.json",
    "editorial_link": "https://codeforces.com//blog/entry/91058",
    "editorial": "Let be the number of good pairings of points.Clearly, the answer is\r\n.Lemma: Denote as the point matched with the point . Notice that each\r\npoint belongs to a segment with length equal to \u00e2\u0080\u0099s length.Proof: Assume\r\nsome point is paired with a point , since doesn\u00e2\u0080\u0099t lie inside then their\r\nsize must be the equal for the pairing to be good.To compute , consider\r\nthe following cases: : Similar to lemma mentioned above, it can be\r\nproved that each point is paired with the point , the remaining unpaired\r\npoints form a continuous subarray which lies inside each of the current\r\npairs, thus they can be paired in ways. : In this case, due to the lemma\r\nmentioned above all the segments must have the same length, thus their\r\nlength must be a divisor of , in this case they can be paired in ways;\r\nwhere is the number of divisors of .So = . Note that .complexity:\r\n"
}