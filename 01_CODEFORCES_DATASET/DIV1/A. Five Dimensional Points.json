{
    "link": "https://codeforces.com//contest/850/problem/A",
    "problemId": "120875",
    "problem_idx": "A",
    "shortId": "850A",
    "contest_number": "850",
    "problem_submissions": {
        "E": [
            30079147,
            30079321,
            30076520,
            30070445,
            30072131,
            30067095,
            30068181,
            30093004,
            30078840,
            30069238,
            30121826,
            30081582,
            30080429,
            30062854,
            30075459,
            30063501
        ],
        "C": [
            30074039,
            30065285,
            30068848,
            30063413,
            30062879,
            30062229,
            30071925,
            30062969,
            30065613,
            30065926,
            30075756,
            30070129,
            30073758,
            30065190,
            30073153,
            30074735,
            30076259,
            30065744,
            30070888
        ],
        "A": [
            30069678,
            30056916,
            30058041,
            30057755,
            30055909,
            30056498,
            30059213,
            30058881,
            30065583,
            30059587,
            30062587,
            30059533,
            30059618,
            30080413,
            30064068,
            30056411,
            30066966,
            30056135,
            30056956,
            30066903
        ],
        "B": [
            30068250,
            30061127,
            30081762,
            30072437,
            30058838,
            30066243,
            30062293,
            30085846,
            30070994,
            30120525,
            30071520,
            30064497,
            30064013,
            30059633,
            30059864,
            30081342,
            30120546,
            30077952,
            30076711
        ],
        "F": [
            30064851,
            30071271,
            30075755,
            30077357,
            30079821,
            30089510,
            30071025
        ],
        "D": [
            30071702,
            30081255,
            30092254,
            30077349,
            30092387,
            30073378,
            30075318,
            30101681,
            30076176,
            30093362,
            30082776,
            30070573
        ]
    },
    "name": "A. Five Dimensional Points",
    "statement": "You are given set of points in 5-dimensional space. The points are\r\nlabeled from to . No two points coincide.We will call point if there are\r\ndifferent points and , not equal to , from the given set such that angle\r\nbetween vectors and is acute (i.e. strictly less than ). Otherwise, the\r\npoint is called .The angle between vectors and in 5-dimensional space is\r\ndefined as , where is the scalar product and is length of .Given the\r\nlist of points, print the indices of the good points in ascending order.\r\n",
    "solutions": [
        "#include<map>\n#include<set>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\ntypedef long long LL;\nconst int N = 1000000 + 10;\n\nint n;\nint x[N][5];\n\nvoid solve()\n{\n    cin >> n;\n    if (n > 100) {\n        cout << 0 << endl;\n        return;\n    }\n    for(int i = 0; i < n; ++ i) {\n        for(int j = 0; j < 5; ++ j) {\n            scanf(\"%d\", &x[i][j]);\n        }\n    }\n    vector<int> vec;\n    for(int i = 0; i < n; ++ i) {\n        int flag = true;\n        for(int j = 0; j < n; ++ j) {\n            if (j == i) continue;\n            for(int k = j + 1; k < n; ++ k) {\n                if (k == i) continue;\n                long long sum = 0;\n                for(int w = 0; w < 5; ++ w) {\n                    sum += (x[j][w] - x[i][w]) * (x[k][w] - x[i][w]);\n                }\n                if (sum > 0) {\n                    flag = false;\n                }\n            }\n        }\n        if (flag) vec.push_back(i + 1);\n    }\n    cout << vec.size() << endl;\n    for(auto e: vec) {\n        cout << e << endl;\n    }\n}\n\nint main()\n{\n\tsolve();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "geometry",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Five Dimensional Points.json",
    "editorial_link": "https://codeforces.com//blog/entry/54317",
    "editorial": "Itâs easier to visualize this in 2D first. Fix a point . If all other\r\npoints form angles that are 90 degrees or greater, they must all be in\r\ndifferent quadrants, so there can be at most 4 such points. In k\r\ndimension, this generalizes to 2*k such points, so for five dimensions,\r\nthere can only be at most 10 other points. Thus, we can run the naive\r\nsolution for small n and print 0 otherwise.\r\n",
    "hint": []
}