{
    "link": "https://codeforces.com//contest/2077/problem/F",
    "problemId": "3258035",
    "problem_idx": "F",
    "shortId": "2077F",
    "contest_number": "2077",
    "problem_submissions": {
        "G": [
            309832760,
            309860088,
            309851540,
            309848221,
            311207472,
            310643380,
            309915851,
            309944262
        ],
        "F": [
            309823042,
            309848959,
            309836201,
            309847924,
            309850803,
            309857022,
            309854713,
            309842987,
            309854239,
            310235363,
            310235052,
            309864534,
            311561393,
            309848336,
            309865507,
            309848201,
            309920332
        ],
        "E": [
            309814547,
            309822026,
            309803897,
            309812180,
            309819977,
            309821234,
            309826906,
            309814658,
            309814285,
            309826850,
            309828976,
            309810457,
            309817172,
            309822795,
            309821505,
            309823930,
            309833684,
            309841497
        ],
        "D": [
            309810661,
            309841330,
            309817779,
            309828860,
            309864595,
            309838978,
            309831379,
            309838725,
            309833102,
            309844316,
            309857259,
            309845857,
            309834684,
            309837147,
            309839781,
            309843697,
            309834330
        ],
        "C": [
            309796305,
            309810106,
            309790482,
            309800177,
            309798892,
            309797717,
            309811288,
            309792650,
            309808525,
            309807618,
            309801148,
            309800770,
            309804252,
            309798025,
            309803813,
            309813707,
            309813039
        ],
        "B": [
            309784641,
            309781213,
            309781563,
            309787242,
            309783611,
            309775002,
            309793111,
            309779586,
            309794861,
            309797121,
            309792810,
            309785991,
            309784888,
            309781524,
            309791774,
            309797996,
            309797135
        ],
        "A": [
            309769674,
            309774026,
            309772451,
            309770706,
            309770901,
            309768685,
            309779277,
            309769944,
            309780319,
            309777428,
            309775104,
            309774863,
            309769470,
            309769900,
            309773872,
            309773155,
            309785608
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/140505",
    "editorial": "Solution is a good pair only if at least one of these two conditions\r\nhold There exist two distinct indices , such that is a submask of .\r\nProofIf , then you need to do at least one operation to . In the last\r\noperation, if you choose , , , then is a submask of and is a submask of\r\n. So in the final array, there must be at least one pair of submask and\r\nsupermask.Next, we will show that this is sufficient. For every index\r\nother than and , you can do this. Perform operation with , , Perform\r\noperation with , , Then Perform operation with , , Perform operation\r\nwith , , Perform operation with , , Perform operation with , , We need\r\nto check the two cases.In the first case, the minimum cost will be .In\r\nthe second case, we want the minimum cost to create a submask-supermask\r\npair in .Solution 1For explanation simplicity, consider the graph with\r\nvertices, representing the numbers from to . In this graph, thereâ€™s an\r\nunweighted edge from vertex to vertex , and from vertex to all submask\r\nvertices. Color all vertices in which its value appears in . The answer\r\nis the shortest path between all pairs of distinct colored vertices.The\r\nimplementation itself (see below), uses dynamic programming consisting\r\nof three phases. The dynamic programming tracks the first and second\r\nclosest vertex to each vertex, because the first closest vertex would be\r\nitself. Propagate each colored vertices up (from to ). Propagate to the\r\nsubmasks (from to its submasks). Propagate down (from to ). Time\r\ncomplexity: per test case. The factor is from the implementation which\r\nchecks for duplicates in by sorting.Submission: 310298215Solution\r\n2Explanation will be added later.Submission: 310317931\r\n",
    "name": "F. AND x OR",
    "statement": "Suppose you have two arrays c and d, each of length k. The pair (c, d)\r\nis called if c can be changed to d by performing the following operation\r\nany number of times. Select two distinct indices i and j (1\r\nleq i, j\r\nleq k, i\r\nneq j) and a nonnegative integer x (0\r\nleq x < 2^{30}). Then, apply the following transformations: c_i := c_i\r\nmathbin{\r\n&} x, where\r\n& denotes the bitwise AND operation. c_j := c_j\r\nmathbin{|} x, where | denotes the bitwise OR operation. You are given\r\ntwo arrays a and b, both of length n, containing nonnegative integers\r\nnot exceeding m. You can perform two types of moves on these arrays any\r\nnumber of times: Select an index i (1\r\nleq i\r\nleq n) and set a_i := a_i + 1. Select an index i (1\r\nleq i\r\nleq n) and set b_i := b_i + 1. Note that the elements of a and b may\r\nexceed m at some point while performing the moves.Find the minimum\r\nnumber of moves required to make the pair (a, b) good.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "dp"
    ],
    "dificulty": "3300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\F. AND x OR.json",
    "hint": [
        "Hint 1 Characterize the property of a good pair of arrays.",
        "Hint 2 Think about the last operation that turns a good pair of arrays into the same array."
    ]
}