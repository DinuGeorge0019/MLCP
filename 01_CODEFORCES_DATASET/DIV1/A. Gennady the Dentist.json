{
    "link": "https://codeforces.com//contest/585/problem/A",
    "problemId": "37964",
    "problem_idx": "A",
    "shortId": "585A",
    "contest_number": "585",
    "problem_submissions": {
        "E": [
            13568408,
            13565539,
            13570428,
            13569433,
            13562876,
            13568414,
            13569561,
            13572183,
            16851653,
            13569075,
            13575618,
            14433103,
            14433079,
            13586801,
            14994906
        ],
        "D": [
            13563803,
            13560460,
            13565708,
            13598452,
            13575351,
            13570446,
            13565845,
            13564574,
            13569714,
            13567701,
            13566576,
            13567580,
            13566498,
            13559261,
            13566963,
            13566457,
            13569728,
            13568576
        ],
        "C": [
            13561640,
            13569007,
            13569377,
            13560848,
            13567147,
            13570951,
            13564734,
            13564195,
            13562727,
            13563205,
            13570079,
            13563945,
            13564180,
            13570698,
            13565134,
            13564377
        ],
        "B": [
            13558808,
            13566721,
            13560966,
            13559388,
            13575429,
            13561963,
            13558427,
            13563703,
            16850949,
            13561366,
            13561440,
            13558802,
            13567542,
            13562248,
            13560363,
            13561318,
            13562539
        ],
        "A": [
            13556266,
            13558452,
            13556785,
            13558546,
            13586871,
            13556142,
            16850921,
            13556990,
            13562212,
            13561943,
            13585791,
            13560017,
            13556037,
            13558619,
            13558552
        ],
        "F": [
            13587655,
            13575255,
            13575217,
            16850828,
            24552744,
            14433355
        ]
    },
    "name": "A. Gennady the Dentist",
    "statement": "Gennady is one of the best child dentists in Berland. Today children got\r\nan appointment with him, they lined up in front of his office.All\r\nchildren love to cry loudly at the reception at the dentist. We\r\nenumerate the children with integers from to in the order they go in the\r\nline. Every child is associated with the value of his . The children\r\ntake turns one after another to come into the office; each time the\r\nchild that is the first in the line goes to the doctor.While Gennady\r\ntreats the teeth of the -th child, the child is crying with the volume\r\nof . At that the of the first child in the line is reduced by the amount\r\nof , the second one by value , and so on. The children in the queue\r\nafter the -th child almost do not hear the crying, so their remains\r\nunchanged.If at any point in time the of the -th child is less than\r\nzero, he begins to cry with the volume of and leaves the line, running\r\ntowards the exit, without going to the doctor\u2019s office. At this the of\r\nall the children after the -th one in the line is reduced by the amount\r\nof .All these events occur immediately one after the other in some\r\norder. Some cries may lead to other cries, causing a chain reaction.\r\nOnce in the hallway it is quiet, the child, who is first in the line,\r\ngoes into the doctor\u2019s office.Help Gennady the Dentist to determine the\r\nnumbers of kids, whose teeth he will cure. Print their numbers in the\r\nchronological order.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\n\nconst int N = 4040;\nint n;\nint m;\nint v[N], d[N], p[N];\nint ans[N];\nbool used[N];\nint q[N];\nint topQ;\n\nint main()\n{\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++)\n        scanf(\"%d%d%d\", &v[i], &d[i], &p[i]);\n    int k = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (used[i]) continue;\n        ans[m++] = i + 1;\n        int r = v[i];\n        for (int j = i + 1; j < n && r > 0; j++)\n        {\n            if (used[j]) continue;\n            p[j] -= r;\n            if (p[j] < 0)\n            {\n                used[j] = 1;\n                q[topQ++] = j;\n            }\n            r--;\n        }\n        while(k < topQ)\n        {\n            int v = q[k++];\n            for (int j = v + 1; j < n; j++)\n            {\n                if (used[j]) continue;\n                p[j] -= d[v];\n                if (p[j] < 0)\n                {\n                    used[j] = 1;\n                    q[topQ++] = j;\n                }\n            }\n        }\n    }\n    printf(\"%d\\n\", m);\n    for (int i = 0; i < m; i++)\n        printf(\"%d \", ans[i]);\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Gennady the Dentist.json",
    "editorial_link": "https://codeforces.com//blog/entry/20898",
    "editorial": " Let\u00e2\u0080\u0099s store for each child his\ncurrent confidence value and a boolean indicating whether child had left\nthe queue (or visited the dentist office) or not. Then one could easily\nprocess children one by one, considering only children who still are in\nthe queue (using boolean array), and changing stored values. Such\nsolution has complexity and requires author\u00e2\u0080\u0099s attention much, especially\nthe case with possible confidence value overflowing. Of course there are\nmuch faster solutions not required in our case.\n"
}