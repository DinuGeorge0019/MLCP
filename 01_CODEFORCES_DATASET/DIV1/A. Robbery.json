{"link": "https://codeforces.com//contest/89/problem/A", "problemId": "469", "problem_idx": "A", "shortId": "89A", "contest_number": "89", "problem_submissions": {"D": [492261, 492054, 491644, 492548, 491919, 491966, 492524, 492023, 492270, 493211], "C": [491274, 491590, 494170, 491155, 494716, 494714, 493157, 493915, 493856, 491944, 492125, 491378, 493230, 494090, 494024, 492438], "B": [490604, 490688, 493051, 493381, 493248, 493828, 491678, 490992, 493466, 493681, 491186, 492876, 492435, 494470, 494439, 493776], "A": [489185, 489155, 490046, 490404, 490021, 489082, 490779, 489569, 490295, 489887, 489342, 493955, 489473, 496907]}, "name": "A. Robbery", "statement": "It is nighttime and Joe the Elusive got into the country\u2019s main bank\u2019s\r\nsafe. The safe has cells positioned in a row, each of them contains some\r\namount of diamonds. Let\u2019s make the problem more comfortable to work with\r\nand mark the cells with positive numbers from to from the left to the\r\nright.Unfortunately, Joe didn\u2019t switch the last security system off. On\r\nthe plus side, he knows the way it works.Every minute the security\r\nsystem calculates the total amount of diamonds for each two adjacent\r\ncells (for the cells between whose numbers difference equals ). As a\r\nresult of this check we get an sums. If at least one of the sums differs\r\nfrom the corresponding sum received during the previous check, then the\r\nsecurity system is triggered.Joe can move the diamonds from one cell to\r\nanother between the security system\u2019s checks. He manages to move them no\r\nmore than times between two checks. One of the three following\r\noperations is regarded as moving a diamond: moving a diamond from any\r\ncell to any other one, moving a diamond from any cell to Joe\u2019s pocket,\r\nmoving a diamond from Joe\u2019s pocket to any cell. Initially Joe\u2019s pocket\r\nis empty, and it can carry an unlimited amount of diamonds. It is\r\nconsidered that before all Joe\u2019s actions the system performs at least\r\none check.In the morning the bank employees will come, which is why Joe\r\nhas to leave the bank before that moment. Joe has only minutes left\r\nbefore morning, and on each of these minutes he can perform no more than\r\noperations. All that remains in Joe\u2019s pocket, is considered his\r\nloot.Calculate the largest amount of diamonds Joe can carry with him.\r\nDon\u2019t forget that the security system shouldn\u2019t be triggered (even after\r\nJoe leaves the bank) and Joe should leave before morning.\r\n", "solutions": ["#include<stdio.h>\n#include<string.h>\n#include<algorithm>\nusing namespace std;\nint in[10010];\nint main(){\n    int n,m,k,i;\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(i=0;i<n;i++)scanf(\"%d\",&in[i]);\n    if(n%2==0)puts(\"0\");\n    else{\n\tm/=(n+1)/2;\n\tif(m==0)puts(\"0\");\n\telse{\n\t    int ans=1000000000;\n\t    for(i=0;i<n;i+=2)ans=min(ans,in[i]);\n\t    printf(\"%d\\n\",(int)min((long long)m*k,(long long)ans));\n\t}\n    }\n}\n"], "input": "", "output": "", "tags": ["greedy"], "dificulty": "1800", "interactive": false}