{"link": "https://codeforces.com//contest/484/problem/D", "problemId": "16631", "problem_idx": "D", "shortId": "484D", "contest_number": "484", "problem_submissions": {"C": [8575684, 8569482, 8574840, 8573079, 8568696, 8568968, 8568953, 8573362, 8573344, 8575027, 8567400, 8571965, 8576498, 8577415], "D": [8571455, 8567671, 8570841, 8566590, 8573430, 8573737, 8570084, 8567140, 8569185, 8572829, 8569478, 8568570, 8570839, 8567603, 8570405, 8575447, 8576600, 8570465], "E": [8569351, 8573776, 8571793, 8588317, 8599514, 8573714, 8570287, 8574072, 8576131, 8573638, 8564834, 8574687], "B": [8564067, 8565086, 8563436, 8564295, 8563987, 8571069, 8564862, 8565541, 8565694, 8569521, 8562876, 8561100, 8562368, 8567973, 8567211, 8562295, 8570348, 8565013], "A": [8560332, 8562129, 8565876, 8560720, 8562390, 8561095, 8562048, 8560946, 8561471, 8562609, 8565347, 8560391, 8562975, 8560379, 8563409, 8565195, 8567495, 8562118]}, "name": "D. Kindergarten", "statement": "In a kindergarten, the children are being divided into groups. The\r\nteacher put the children in a line and associated each child with his or\r\nher integer charisma value. Each child should go to exactly one group.\r\nEach group should be a nonempty segment of consecutive children of a\r\nline. A group\u2019s is the maximum difference of charisma of two children in\r\nthe group (in particular, if the group consists of one child, its\r\nsociability equals a zero). The teacher wants to divide the children\r\ninto some number of groups in such way that the total of the groups is\r\nmaximum. Help him find this value.\r\n", "solutions": ["#include <iostream>\n#include <vector>\n#include <cmath>\n#include <ctime>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <map>\n#include <fstream>\n#include <cstdlib>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <numeric>\n\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#define forn(i, n) for (int i = 0; i < (int)(n); ++i)\n#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)\n#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)\n\nusing namespace std;\n\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef long long i64;\ntypedef vector<i64> vi64;\ntypedef vector<vi64> vvi64;\n\nconst int MAXN = 1000010;\nint a[MAXN];\ni64 dp[MAXN];\n\nint main() {\n    ios::sync_with_stdio(false);\n    cout.precision(10);\n    cout << fixed;\n#ifdef LOCAL_DEFINE\n    freopen(\"input.txt\", \"rt\", stdin);\n#endif\n\n    int N;\n    scanf(\"%d\", &N);\n    forn(i, N) scanf(\"%d\", &a[i]);\n    dp[0] = dp[1] = 0;\n    int extr = 0;\n    bool ismin = true, ismax = true;\n    for (int i = 1; i < N; ++i) {\n        if (a[i] == a[i - 1]) {\n            extr = i - 1;\n            ismin = ismax = true;\n        }\n        if (a[i] < a[i - 1] && ismin) {\n            extr = i - 1;\n            ismax = true;\n            ismin = false;\n        }\n        if (a[i] > a[i - 1] && ismax) {\n            extr = i - 1;\n            ismin = true;\n            ismax = false;\n        }\n        dp[i + 1] = abs(a[i] - a[extr]) + dp[extr];\n        dp[i + 1] = max(dp[i + 1], abs(a[i] - a[extr + 1]) + dp[extr + 1]);\n    }\n    cout << dp[N] << '\\n';\n\n#ifdef LOCAL_DEFINE\n    cerr << \"Time elapsed: \" << 1.0 * clock() / CLOCKS_PER_SEC << \" s.\\n\";\n#endif\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "dp", "greedy"], "dificulty": "2400", "interactive": false}