{
    "link": "https://codeforces.com//contest/1887/problem/E",
    "problemId": "2279001",
    "problem_idx": "E",
    "shortId": "1887E",
    "contest_number": "1887",
    "problem_submissions": {
        "F": [
            229268085,
            229284035,
            229267071,
            229288213,
            229337643,
            229337387,
            229279061,
            229293399,
            229278730,
            229369273
        ],
        "E": [
            229253684,
            229249394,
            229294341,
            229258494,
            229338891,
            229258700,
            229275116,
            229278155,
            229250811,
            229297774,
            229297309,
            229282242,
            229283031,
            229282090,
            229282378,
            229286467,
            229267304,
            229286116,
            229271763,
            229270583,
            229329580,
            229283920
        ],
        "D": [
            229234655,
            229233555,
            229233641,
            229232712,
            229245990,
            229235831,
            229244954,
            229260058,
            229227922,
            229264964,
            229263601,
            229262619,
            229264376,
            229257713,
            229260427,
            229286289,
            229259421,
            229255789,
            229242200
        ],
        "C": [
            229225852,
            229226994,
            229224941,
            229350172,
            229237731,
            229225395,
            229233603,
            229237191,
            229279756,
            229270695,
            229241111,
            229246450,
            229246617,
            229251201,
            229242629,
            229237936,
            229246963,
            229224946,
            229244776,
            229494537,
            229293735
        ],
        "B": [
            229219341,
            229218026,
            229215277,
            229224722,
            229339363,
            229339262,
            229339141,
            229221501,
            229217084,
            229218884,
            229227598,
            229211736,
            229227850,
            229229211,
            229230972,
            229210296,
            229231115,
            229228032,
            229227594,
            229234703,
            229369549,
            229231109,
            229226253
        ],
        "A2": [
            229211901,
            229206611,
            229205624,
            229212250,
            229211246,
            229243386,
            229208241,
            229214123,
            229256240,
            229230513,
            229220464,
            229213039,
            229223811,
            229217374,
            229212405,
            229212960,
            229215200,
            229212576,
            229215764,
            229211258
        ],
        "A1": [
            229207683,
            229206848,
            229205786,
            229207920,
            229207504,
            229243262,
            229206160,
            229214648,
            229256343,
            229206102,
            229220609,
            229213336,
            229217825,
            229217804,
            229210022,
            229205186,
            229215529,
            229207309,
            229215990,
            229206166
        ]
    },
    "name": "E. Good Colorings",
    "statement": "Alice suggested Bob to play a game. Bob didn’t like this idea, but he\r\ncouldn’t refuse Alice, so he asked you to write a program that would\r\nplay instead of him.The game starts with Alice taking out a grid sheet\r\nof size n\r\ntimes n, the cells of which are . After that she colors some 2n cells\r\nwith colors 1,2,\r\nldots, 2n, respectively, and informs Bob about these cells.In one move,\r\nBob can point to a cell that has not been colored yet and ask Alice to\r\ncolor that cell. Alice colors that cell with one of the 2n colors of her\r\nchoice, informing Bob of the chosen color. Bob can make no more than 10\r\nmoves, after which he needs to find a set of four cells.A set of four\r\ncells is considered good if the following conditions are met: All the\r\ncells in the set are colored; No two cells in the set are colored with\r\nthe same color; The centers of the cells form a rectangle with sides\r\nparallel to the grid lines.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n;\n    std::cin >> n;\n    \n    std::vector<std::vector<std::pair<int, int>>> adj(2 * n);\n    for (int i = 0; i < 2 * n; i++) {\n        int x, y;\n        std::cin >> x >> y;\n        x--, y--;\n        y += n;\n        adj[x].emplace_back(y, i);\n        adj[y].emplace_back(x, i);\n    }\n    \n    std::vector<bool> vis(2 * n);\n    std::vector<int> par(2 * n), dep(2 * n), parc(2 * n);\n    std::vector<int> cyc;\n    std::vector<int> col;\n    auto dfs = [&](auto self, int x) -> void {\n        vis[x] = true;\n        for (auto [y, c] : adj[x]) {\n            if (!vis[y]) {\n                par[y] = x;\n                parc[y] = c;\n                dep[y] = dep[x] + 1;\n                self(self, y);\n            } else if (dep[y] > dep[x] && cyc.empty()) {\n                for (int i = y; i != x; i = par[i]) {\n                    cyc.push_back(i);\n                    col.push_back(parc[i]);\n                }\n                cyc.push_back(x);\n                col.push_back(c);\n            }\n        }\n    };\n    for (int i = 0; i < 2 * n; i++) {\n        if (!vis[i] && cyc.empty()) {\n            dfs(dfs, i);\n        }\n    }\n    \n    assert(!cyc.empty());\n    \n    if (cyc[0] >= n) {\n        std::rotate(cyc.begin(), cyc.begin() + 1, cyc.end());\n        std::rotate(col.begin(), col.begin() + 1, col.end());\n    }\n    \n    while (cyc.size() > 4) {\n        int m = (cyc.size() + 3) / 4 * 2;\n        std::cout << \"? \" << cyc[0] + 1 << \" \" << cyc[m - 1] - n + 1 << std::endl;\n        \n        int res;\n        std::cin >> res;\n        res--;\n        \n        if (std::find(col.begin(), col.begin() + m - 1, res) == col.begin() + m - 1) {\n            cyc.erase(cyc.begin() + m, cyc.end());\n            col.erase(col.begin() + m, col.end());\n            col.back() = res;\n        } else {\n            cyc.erase(cyc.begin() + 1, cyc.begin() + m - 1);\n            col.erase(col.begin() + 1, col.begin() + m - 1);\n            col[0] = res;\n        }\n    }\n    \n    std::cout << \"! \" << cyc[0] + 1 << \" \" << cyc[2] + 1 << \" \" << cyc[1] - n + 1 << \" \" << cyc[3] - n + 1 << std::endl;\n    \n    std::string s;\n    std::cin >> s;\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "graphs",
        "interactive"
    ],
    "dificulty": "3100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\E. Good Colorings.json",
    "editorial_link": "https://codeforces.com//blog/entry/121621",
    "editorial": "Letâs consider a bipartite graph with rows and columns. The cells will\r\ncorrespond to the edges. According to the problem statement, we need to\r\nfind a pair of rows and a pair of columns such that cells have different\r\ncolors. Notice that in graph terms, this means that we need to find a\r\ncycle of length with different colors.According to the problem\r\nstatement, we have edges with pairwise distinct colors in a graph with\r\nvertices. This means that there must exist a cycle of length with\r\ndifferent colors. Let this cycle be . Mentally construct the edges .\r\nThese edges divide our cycle into cycles of length and are part of the\r\ncomplete bipartite graph. It is claimed that one of these cycles will\r\ndefinitely have different colors. To find it, we apply the binary search\r\ntechnique.Ask for the color of the edge that divides this cycle\r\napproximately in half. Its color will either not match any of the edges\r\nfrom the left half or all of the edges from the right half. In each of\r\nthese cases, we managed to find a cycle with half the length. After\r\nqueries, we will find a cycle of length with different colors, and\r\ntherefore the desired set of four cells.\r\n",
    "hint": []
}