{
    "link": "https://codeforces.com//contest/720/problem/B",
    "problemId": "71821",
    "problem_idx": "B",
    "shortId": "720B",
    "contest_number": "720",
    "problem_submissions": {
        "B": [
            20732895,
            20733800,
            20733490,
            20734883,
            20733806,
            20735016,
            20734473,
            20736053,
            20735203,
            20733945,
            20734910,
            20734765,
            20735023,
            20736385,
            20736333,
            20736307,
            20746163
        ],
        "A": [
            20732151,
            20732346,
            20732312,
            20732893,
            20731988,
            20732883,
            20733527,
            20732353,
            20739206,
            20739180,
            20736161,
            20734380,
            20733685,
            20732779,
            20733015,
            20731953,
            20732084,
            20732115,
            20732391,
            20732589,
            20732757,
            20732925
        ],
        "D": [
            20735659,
            21258097
        ]
    },
    "name": "B. Cactusophobia",
    "statement": "Tree is a connected undirected graph that has no cycles. Edge cactus is\r\na connected undirected graph without loops and parallel edges, such that\r\neach edge belongs to at most one cycle.Vasya has an edge cactus, each\r\nedge of this graph has some color.Vasya would like to remove the minimal\r\nnumber of edges in such way that his cactus turned to a tree. Vasya\r\nwants to make it in such a way that there were edges of as many\r\ndifferent colors in the resulting tree, as possible. Help him to find\r\nhow many different colors can the resulting tree have.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define SZ(X) ((int)(X).size())\n#define ALL(X) (X).begin(), (X).end()\n#define REP(I, N) for (int I = 0; I < (N); ++I)\n#define REPP(I, A, B) for (int I = (A); I < (B); ++I)\n#define RI(X) scanf(\"%d\", &(X))\n#define RII(X, Y) scanf(\"%d%d\", &(X), &(Y))\n#define RIII(X, Y, Z) scanf(\"%d%d%d\", &(X), &(Y), &(Z))\n#define DRI(X) int (X); scanf(\"%d\", &X)\n#define DRII(X, Y) int X, Y; scanf(\"%d%d\", &X, &Y)\n#define DRIII(X, Y, Z) int X, Y, Z; scanf(\"%d%d%d\", &X, &Y, &Z)\n#define RS(X) scanf(\"%s\", (X))\n#define CASET int ___T, case_n = 1; scanf(\"%d \", &___T); while (___T-- > 0)\n#define MP make_pair\n#define PB push_back\n#define MS0(X) memset((X), 0, sizeof((X)))\n#define MS1(X) memset((X), -1, sizeof((X)))\n#define LEN(X) strlen(X)\n#define PII pair<int,int>\n#define VI vector<int>\n#define VPII vector<pair<int,int> >\n#define PLL pair<long long,long long>\n#define VPLL vector<pair<long long,long long> >\n#define F first\n#define S second\ntypedef long long LL;\nusing namespace std;\nconst int MOD = 1e9+7;\nconst int SIZE = 1e6+10;\n#define FN 500010\n#define FM 4200010\n#define INF 1034567890\n#define FOR(it,c) for ( __typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++ )\nusing namespace std;\ntypedef long long LL;\nstruct E {\n    int k,c;\n    E(){}\n    E( int _k, int _c ):k(_k),c(_c){}\n} es[FM];\n\nstruct Flow {\n    int n,m,dis[FN];\n    int qq[FN],qr,ql;\n    vector<int> e[FN];\n    void init( int _n ) {\n        n=_n; m=0;\n        for ( int i=0; i<n; i++ ) e[i]=vector<int>();\n    }\n    void add_edge( int a, int b, int c ) {\n        e[a].push_back(m); es[m]=E(b,c); m++;\n        e[b].push_back(m); es[m]=E(a,0); m++;\n    }\n    bool BFS() {\n        memset(dis,-1,n*sizeof(int));\n        ql=qr=0;\n        qq[qr++]=0;\n        dis[0]=0;\n        while ( ql!=qr && dis[n-1]==-1 ) {\n            int p=qq[ql++];\n            FOR(it,e[p]) {\n                E ee=es[*it];\n                if ( ee.c==0 || dis[ee.k]!=-1 ) continue;\n                dis[ee.k]=dis[p]+1;\n                qq[qr++]=ee.k;\n            }\n        }\n        return dis[n-1]!=-1;\n    }\n    LL go( int p, LL c ) {\n        if ( p==n-1 ) return c;\n        LL ret=0,tmp;\n        FOR(it,e[p]) {\n            E &ee=es[*it];\n            if ( ee.c==0 || dis[p]+1!=dis[ee.k] ) continue;\n            tmp=go(ee.k,min(c-ret,(LL)ee.c));\n            ret+=tmp; ee.c-=tmp; es[(*it)^1].c+=tmp;\n            if ( ret==c ) break;\n        }\n        if ( ret==0 ) dis[p]=-1;\n        return ret;\n    }\n    LL maxflow() {\n        LL ret=0;\n        while ( BFS() ) ret+=go(0,1LL<<60);\n        return ret;\n    }\n} flow;\nVPII e[SIZE];\nint cc[SIZE];\nint lat[SIZE],id[SIZE];\nbool in[SIZE],used[SIZE],edge_used[SIZE];\nint M;\nvoid dfs(int x,int lt){\n    in[x]=1;\n    used[x]=1;\n    REP(i,SZ(e[x])){\n        int y=e[x][i].F;\n        if(y==lt)continue;\n        if(in[y]){\n            int me=x,cnt=0;\n            flow.add_edge(M+e[x][i].S,M*2+e[x][i].S,1);\n            edge_used[e[x][i].S]=1;\n            do{\n                cnt++;\n                flow.add_edge(M+id[me],M*2+e[x][i].S,1);\n                edge_used[id[me]]=1;\n                me=lat[me];\n            }while(me!=y);\n            flow.add_edge(M*2+e[x][i].S,M*3+1,cnt);\n        }\n        else if(!used[y]){\n            id[y]=e[x][i].S;\n            lat[y]=x;\n            dfs(y,x);\n        }\n    }\n    in[x]=0;\n}\nint main(){\n    DRII(n,m);\n    M=m;\n    flow.init(m+m+m+2);\n    REPP(i,1,m+1){\n        DRIII(x,y,v);\n        cc[i]=v;\n        e[x].PB(MP(y,i));\n        e[y].PB(MP(x,i));\n        flow.add_edge(0,i,1);\n        flow.add_edge(v,m+i,1);\n    }\n    dfs(1,1);\n    REPP(i,1,m+1){\n        if(!edge_used[i]){\n            flow.add_edge(m+i,3*m+1,1);\n        }\n    }\n    printf(\"%d\\n\",flow.maxflow());\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "flows"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\B. Cactusophobia.json",
    "editorial_link": "https://codeforces.com//blog/entry/47183",
    "editorial": "Let us divide the graph to biconnected blocks. Each block is either a bridge, or a cycle. Our goal is to remove one edge from each cycle, so that the number of remaining colors were maximum possible.\n\nLet us build a bipartite graph, one part would be blocks, another one would be colors. For each block put an edge of capacity 1 for each color of an edge in this block (make multiple edges, or bigger capacity if there are several edges of some color). Add two vertices: source and sink, add edges from source to blocks, if the block is a cycle of length l, set its capacity to l?-?1, if it is a bridge, set its capacity to 1. Add edges from color vertices to the sink of capacity 1.\n\nIt is quite clear that size of the maximum flow in this graph is indeed the answer to the problem.\n\nAs a final note, the judges know the solution that runs in O(n) and requires no maximum flow algorithms, challenge yourself to come up with it!",
    "hint": []
}