{
    "link": "https://codeforces.com//contest/193/problem/C",
    "problemId": "1406",
    "problem_idx": "C",
    "shortId": "193C",
    "contest_number": "193",
    "problem_submissions": {
        "E": [
            1760964,
            1761121,
            1761512
        ],
        "D": [
            1760240,
            1762133
        ],
        "C": [
            1758660,
            1761664,
            1756861,
            1760385,
            1757547,
            1757786,
            1758601,
            1759415,
            1759294,
            1758335,
            1759388,
            1758973,
            1758915,
            1759895,
            1758129,
            1758643
        ],
        "B": [
            1755241,
            1755126,
            1757246,
            1755771,
            1756101,
            1755179,
            1755123,
            1755569,
            1759901,
            1755152,
            1756669,
            1756100,
            1755910,
            1760390,
            1760344
        ],
        "A": [
            1754055,
            1754254,
            1754686,
            1754344,
            1754275,
            1758932,
            1756481,
            1757287,
            1754744,
            1756492,
            1755198,
            1754933,
            1754369,
            1755466
        ]
    },
    "name": "C. Hamming Distance",
    "statement": "between strings and of equal length (denoted by ) is equal to the number\r\nof distinct integers , such that , where is the -th symbol of string ,\r\nis the -th symbol of string . For example, the Hamming distance between\r\nstrings \"\" and \"\" equals , they have different first symbols. For\r\nstrings \"\" and \"\" the Hamming distance equals .John Doe had a paper on\r\nwhich four strings of equal length , , and were written. Each string\r\nconsisted only of lowercase letters \"\" and \"\". John found the Hamming\r\ndistances between all pairs of strings he had. Then he lost the paper\r\nwith the strings but he didn\u2019t lose the Hamming distances between all\r\npairs.Help John restore the strings; find some four strings , , of equal\r\nlength that consist only of lowercase letters \"\" and \"\", such that the\r\npairwise Hamming distances between them are the same as between John\u2019s\r\nstrings. More formally, set must satisfy the condition . To make the\r\nstrings easier to put down on a piece of paper, you should choose among\r\nall suitable sets of strings the one that has strings of .\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n#include <algorithm>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\n#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#define pb push_back\n#define mp make_pair\n#define sz(x) ((int)(x).size())\n\ntypedef long long ll;\ntypedef vector<ll> vll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\n\nconst int MAXL = 1e6;\n\npdd operator*(const pdd &a, int b) { return mp(a.first * b, a.second * b); }\npdd operator+(const pdd &a, const pdd &b) { return mp(a.first + b.first, a.second + b.second); }\n\nint divide(int a, int b) {\n  if (b < 0) { a = -a; b = -b; }\n  if (a < 0) return 0;\n  // x >= a / b\n  int c = a / b;\n  if (c * b < a) c++;\n  return c;\n}\n\nbool check(const vvi &m, int x, vi &vals) {\n  vals = vi(8);\n  vals[7] = 1;\n  vals[6] = x;\n  for (int y = 5; y >= 0; y--) {\n    int cv = 0;\n    for (int x = y + 1; x < sz(m[y]); x++)\n      cv -= m[y][x] * vals[x];\n    assert(m[y][y]);\n    if (cv % m[y][y]) return false;\n    vals[y] = cv / m[y][y];\n  }\n  for (int i = 0; i <= 7; i++)\n    if (vals[i] < 0) return false;\n  return true;\n}\n\nint main() {\n  #ifdef DEBUG\n  freopen(\"std.in\", \"r\", stdin);\n  freopen(\"std.out\", \"w\", stdout);\n  #endif\n\n  int hs[4][4];\n  while (scanf(\"%d\", &hs[0][1]) >= 1) {\n    int ids[4][4];\n    memset(ids, -1, sizeof ids);\n\n    vvi m(7, vi(8, 0));\n    int cid = 0;\n\n    for (int a = 0; a < 4; a++)\n    for (int b = a + 1; b < 4; b++) {\n      if (a != 0 || b != 1)\n        scanf(\"%d\", &hs[a][b]);\n      ids[a][b] = cid;\n      m[cid][7] = -hs[a][b];\n      cid++;\n    }\n\n    for (int msk = 1; msk < 8; msk++) {\n      int ss[4] = { 0 };\n      for (int i = 0; i < 3; i++) ss[i + 1] = !!(msk & (1 << i));\n\n      for (int a = 0; a < 4; a++)\n      for (int b = a + 1; b < 4; b++) if (ss[a] != ss[b]) {\n        m[ids[a][b]][msk - 1] = 1;\n      }\n    }\n/*    for (int y = 0; y < 7; y++)\n    for (int x = 0; x < 8; x++)\n      eprintf(\"%2d%c\", m[y][x], \"\\n \"[x < 7]);\n    eprintf(\"\\n\");*/\n    for (int y = 0; y < 7; y++) {\n      for (int y2 = y; y2 < 7; y2++) if (m[y2][y]) {\n        if (y != y2)\n          m[y].swap(m[y2]);\n        break;\n      }\n      if (!m[y][y]) continue;\n      for (int y2 = y + 1; y2 < 7; y2++) if (m[y2][y]) {\n        assert(-m[y2][y] % m[y][y] == 0);\n        int k = -m[y2][y] / m[y][y];\n        for (int x = 0; x < sz(m[y2]); x++)\n          m[y2][x] += k * m[y][x];\n      }\n    }\n/*    for (int y = 0; y < 7; y++)\n    for (int x = 0; x < 8; x++)\n      eprintf(\"%2d%c\", m[y][x], \"\\n \"[x < 7]);*/\n\n    vector<pdd> ks(8);\n    ks[6] = mp(1, 0);\n    ks[7] = mp(0, 1);\n\n    for (int y = 5; y >= 0; y--) {\n      pdd cur(0, 0);\n      for (int x = y + 1; x < sz(m[y]); x++)\n        cur = cur + (ks[x] * -m[y][x]);\n\n      int ck = m[y][y];\n      ks[y] = mp(cur.first / ck, cur.second / ck);\n    }\n\n    double minx = 0;\n    for (int i = 0; i < 7; i++) {\n      assert(fabs(ks[i].first) > 1e-8);\n      if (ks[i].first > 0) {\n        minx = max(minx, -ks[i].second / ks[i].first);\n      }\n    }\n\n    eprintf(\"minx=%.2lf\\n\", minx);\n    int x = max(0, (int)minx - 100);\n    for (int i = 0; i < 200; i++, x++) {\n      vi vals;\n      if (check(m, x, vals)) {\n        string s[4] = { \"\" };\n\n        for (int m = 1; m < 8; m++) {\n          int cnt = vals[m - 1];\n          for (int i = 0; i < cnt; i++) {\n            s[0] += \"a\";\n            for (int i2 = 0; i2 < 3; i2++)\n              s[i2 + 1] += string(1, 'a' + !!(m & (1 << i2)));\n          }\n        }\n        printf(\"%d\\n\", s[0].length());\n        for (int i = 0; i < 4; i++)\n          printf(\"%s\\n\", s[i].c_str());\n        goto end;\n      } else\n        eprintf(\"skip\\n\");\n    }\n    printf(\"-1\\n\");\n    end:;\n  }\n  return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math",
        "matrices"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\C. Hamming Distance.json",
    "editorial_link": "https://codeforces.com//blog/entry/4673",
    "editorial": "Main idea: reduction to system of linear equations and solving it using Gauss algorithm.\n\nLet's notice that order of columns in answer doesn't matter. That's why there is only one important thing \u0097 quantity of every type of column. There is only 24?=?16 different columns.\n\nLet's represent Hamming distance between every pair of strings as sum of quantities of types of columns. It's possible because every column adds to every distance between pairs 0 or 1.\n\nNow we have system of 6 linear equations with 16 variables. It's not good, let's decrease number of variables. First, some columns adds same values to every Hamming distance. For example strings \"abbb\" and \"baaa\". For every column q we can replace all letters \"a\" by letters \"b\" and all letters \"b\" by letters \"a\" and reach column that adds same values to every distance. We reduced number of variables to 8. We also can notice that columns \"aaaa\" and \"bbbb\" is useless and reduce number of variables to 7.\n\nThis system can be solved using Gauss algorithm. One variable steel be free. Let's fix it. It's value can't be more than maximum of h(si,?sj) because column adds positive value to one or more Hamming distance. For every fixed value we should check if all variables take non-negative integer value and choose the best answer.\n\nWe can solve system of equations in integers because coefficients of equation is little.\n\nComplexity of this solution if O(max(h(si,?sj))). If we solve it in rational numbers complexity will change to"
}