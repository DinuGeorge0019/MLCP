{
    "link": "https://codeforces.com//contest/573/problem/A",
    "problemId": "34310",
    "problem_idx": "A",
    "shortId": "573A",
    "contest_number": "573",
    "problem_submissions": {
        "E": [
            12759251,
            12766903,
            12766685,
            12854212
        ],
        "C": [
            12753961,
            12751834,
            12752631,
            12751871,
            12753878,
            12754621,
            12753383,
            12752808,
            12753460,
            12750581,
            12750687,
            12754051,
            12757263,
            12753734,
            12752897,
            12751281,
            12753745,
            12753332
        ],
        "B": [
            12746992,
            12747515,
            12746798,
            12748316,
            12747498,
            12747954,
            12747704,
            12747330,
            12747866,
            12747572,
            12747495,
            12748230,
            12747423,
            12748530,
            12748216,
            12747086,
            12747056,
            12748571
        ],
        "A": [
            12746189,
            12746077,
            12746084,
            12746660,
            12746402,
            12746165,
            12746157,
            12746206,
            12746195,
            12746103,
            12746141,
            12746264,
            12746158,
            12746252,
            12746081,
            12746225,
            12746120,
            12746512
        ],
        "D": [
            12760293,
            12767357,
            12767345,
            12767321,
            12767302,
            12767261,
            12766285,
            12766274,
            12759069,
            12759185,
            12761792,
            12787796,
            12787738,
            12787732,
            12762112,
            12766448,
            12762456,
            12761429,
            12791178,
            12769647,
            12769635
        ]
    },
    "name": "A. Bear and Poker",
    "statement": "Limak is an old brown bear. He often plays poker with his friends. Today\r\nthey went to a casino. There are players (including Limak himself) and\r\nright now all of them have bids on the table. -th of them has bid with\r\nsize dollars.Each player can double his bid any number of times and\r\ntriple his bid any number of times. The casino has a great jackpot for\r\nmaking all bids equal. Is it possible that Limak and his friends will\r\nwin a jackpot?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair<int,int> PI;\ntypedef long long LL;\ntypedef double D;\n#define FI first\n#define SE second\n#define MP make_pair\n#define PB push_back\n#define R(I,N) for(int I=0;I<N;I++)\n#define F(I,A,B) for(int I=A;I<B;I++)\n#define FD(I,N) for(int I=N-1;I>=0;I--)\n#define make(A) scanf(\"%d\",&A)\n#define make2(A,B) scanf(\"%d%d\",&A,&B)\n#define ALL(x) (x).begin(), (x).end()\n#define SZ(x) ((int)(x).size())\n#define db if(1)printf\ntemplate<typename C> void MA(C& a,C b){if(a<b)a=b;}\ntemplate<typename C> void MI(C& a,C b){if(a>b)a=b;}\nint n;\nint wyn;\nmain(){\n  make(n);\n  R(i,n){\n    int pom;make(pom);\n    while(pom%2 == 0)pom/=2;\n    while(pom%3 == 0)pom/=3;\n    if(i == 0)wyn = pom;\n    else{\n      if(wyn!=pom){\n        puts(\"No\");\n        return 0;\n      }\n    }\n  }\n  puts(\"Yes\");\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math",
        "number theory"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Bear and Poker.json",
    "editorial_link": "https://codeforces.com//blog/entry/20040",
    "editorial": "Any positive integer number can be factorized and written as 2a路3b路5c路7d路....\n\nWe can multiply given numbers by 2 and 3 so we can increase a and b for them. So we can make all a and b equal by increasing them to the same big value (e.g. 100). But we can't change powers of other prime numbers so they must be equal from the beginning. We can check it by diving all numbers from input by two and by three as many times as possible. Then all of them must be equal.\n\nAlternative solution is to calculate GCD of given numbers. Answer is \"YES\" iff we can get each number by multiplying GCD by 2 and 3. Otherwise, some number had different power of prime number other than 2 and 3. ",
    "hint": []
}