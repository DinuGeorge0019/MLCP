{
    "link": "https://codeforces.com//contest/983/problem/D",
    "problemId": "183242",
    "problem_idx": "D",
    "shortId": "983D",
    "contest_number": "983",
    "problem_submissions": {
        "E": [
            38286454,
            38283020,
            38289482,
            38292735,
            38289453,
            38293779,
            38302472,
            38293561,
            38300012,
            38293577,
            38302643,
            38302639,
            38302635,
            38302629,
            38300139,
            38300133,
            38300000,
            38293677,
            38332361,
            38290750,
            38296688,
            38287165,
            38281146,
            38282245,
            38289240,
            38294540,
            38292692
        ],
        "C": [
            38282068,
            38290172,
            38281090,
            38284331,
            38284560,
            38280127,
            38285062,
            38284712,
            38287114,
            38296797,
            38287523,
            38296777,
            38305865,
            38421418,
            38281072,
            38282940
        ],
        "B": [
            38275765,
            38281040,
            38275649,
            38277253,
            38280013,
            38275961,
            38274648,
            38276342,
            38282348,
            38281288,
            38277599,
            38291629,
            38284850,
            38285475,
            38285545,
            38278223,
            38284828,
            38274818,
            38274252
        ],
        "A": [
            38273115,
            38279677,
            38273911,
            38271977,
            38277206,
            38393404,
            38274395,
            38272239,
            38278413,
            38325576,
            38319214,
            38319178,
            38319075,
            38319020,
            38318977,
            38318949,
            38318775,
            38311499,
            38311463,
            38311378,
            38273182,
            38332311,
            38276058,
            38279900,
            38288950,
            38281038,
            38282952,
            38280788,
            38276091,
            38275298,
            38271513,
            38271658
        ],
        "D": [
            38430702,
            38334183,
            38527958
        ]
    },
    "name": "D. Arkady and Rectangles",
    "statement": "Arkady has got an infinite plane painted in color 0. Then he draws n\r\nrectangles filled with paint with sides parallel to the Cartesian\r\ncoordinate axes, one after another. The color of the i-th rectangle is i\r\n(rectangles are enumerated from 1 to n in the order he draws them). It\r\nis possible that new rectangles cover some of the previous ones\r\ncompletely or partially.Count the number of different colors on the\r\nplane after Arkady draws all the rectangles.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100005;\nconst int M=525000;\nint a[N],b[N],c[N],d[N];\nint n,ans,qx[N*2],qy[N*2];\nint vis[N*2],mx[M],mn[M];\nvector<pair<int,int> > v[N*2];\nset<int> s[M];\nvoid pushup(int k,int l,int r){\n\tif (l!=r){\n\t\tmx[k]=max(mx[k*2],mx[k*2+1]);\n\t\tmn[k]=min(mn[k*2],mn[k*2+1]);\n\t}\n\telse\n\t\tmx[k]=mn[k]=0;\n\tif (s[k].size()){\n\t\tif (vis[*s[k].rbegin()])\n\t\t\tmn[k]=max(mn[k],*s[k].rbegin());\n\t\telse mx[k]=max(mx[k],*s[k].rbegin());\n\t}\n\tif (mx[k]<mn[k])\n\t\tmx[k]=0;\n}\nvoid insert(int k,int l,int r,int x,int y,int v){\n\t//printf(\"%d %d %d %d\\n\",l,r,x,y);\n\tif (l==x&&r==y){\n\t\tif (v){\n\t\t\tif (v>0) s[k].insert(v);\n\t\t\telse s[k].erase(-v); \n\t\t}\n\t\tpushup(k,l,r);\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tif (y<=mid) insert(k*2,l,mid,x,y,v);\n\telse if (x>mid) insert(k*2+1,mid+1,r,x,y,v);\n\telse insert(k*2,l,mid,x,mid,v),\n\t\t insert(k*2+1,mid+1,r,mid+1,y,v);\n\tpushup(k,l,r);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++){\n\t\tscanf(\"%d%d%d%d\",&a[i],&b[i],&c[i],&d[i]);\n\t\tqx[++*qx]=a[i]; qx[++*qx]=c[i];\n\t\tqy[++*qy]=b[i]; qy[++*qy]=d[i];\n\t}\n\tsort(qx+1,qx+*qx+1);\n\tsort(qy+1,qy+*qy+1);\n\t*qx=unique(qx+1,qx+*qx+1)-qx-1;\n\t*qy=unique(qy+1,qy+*qy+1)-qy-1;\n\tfor (int i=1;i<=n;i++){\n\t\ta[i]=lower_bound(qx+1,qx+*qx+1,a[i])-qx;\n\t\tc[i]=lower_bound(qx+1,qx+*qx+1,c[i])-qx;\n\t\tb[i]=lower_bound(qy+1,qy+*qy+1,b[i])-qy;\n\t\td[i]=lower_bound(qy+1,qy+*qy+1,d[i])-qy-1;\n\t\tv[a[i]].push_back(make_pair(i,i));\n\t\tv[c[i]].push_back(make_pair(i,-i));\n\t}\n\tfor (int i=1;i<=*qx;i++){\n\t\tfor (int j=0;j<v[i].size();j++)\n\t\t\tinsert(1,1,*qy,b[v[i][j].first],d[v[i][j].first],v[i][j].second);\n\t\tfor (;mx[1];){\n\t\t\tvis[mx[1]]=1; ans++;\n\t\t\tinsert(1,1,*qy,b[mx[1]],d[mx[1]],0);\n\t\t}\n\t}\n\tprintf(\"%d\",ans+1);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures"
    ],
    "dificulty": "3300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Arkady and Rectangles.json",
    "editorial_link": "https://codeforces.com//blog/entry/59484",
    "editorial": "First let\u00e2\u0080\u0099s compress the coordinates. Now all the coordinates are in\r\n.Now we do scanline on coordinate with segment tree on coordinate. Let\u00e2\u0080\u0099s\r\ntalk about segment tree structute. In each vertex we store: Set of\r\ncolors which cover the whole segment. If color covers a segment, we\r\ndon\u00e2\u0080\u0099t push it to it childs () Maximal visible color in subtree which\r\nisn\u00e2\u0080\u0099t in the answer () Minimal visible color in subtree () For the\r\nvertex and can be calculated as: If isn\u00e2\u0080\u0099t empty and max value in is more\r\nthan max in children: If it\u00e2\u0080\u0099s already in the answer or it\u00e2\u0080\u0099s less than\r\nmin in children, . Otherwise Otherwise If isn\u00e2\u0080\u0099t empty Otherwise Now in\r\nscanline we: Add all the segments, starting at this point Remove all the\r\nsegments, ending at this point While isn\u00e2\u0080\u0099t we put it into and\r\nrecalculate everything by readding this segment to tree. At the end we\r\nknow all visible colors and print the number of them.Asymptotics is\r\nSolution\r\n"
}