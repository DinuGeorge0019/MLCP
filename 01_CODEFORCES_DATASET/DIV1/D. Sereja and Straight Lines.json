{
    "link": "https://codeforces.com//contest/314/problem/D",
    "problemId": "3141",
    "problem_idx": "D",
    "shortId": "314D",
    "contest_number": "314",
    "problem_submissions": {
        "E": [
            30724544,
            3841662,
            3843754,
            3843819,
            3841502,
            3860384,
            3934694,
            3845808
        ],
        "D": [
            3838247,
            3837490,
            3833649,
            3839672,
            3836920,
            3843899,
            3843892,
            3843887,
            3839403,
            3837634,
            3841257,
            3841298,
            3842000,
            3842070,
            3840998,
            3841422,
            3840708,
            3840797,
            3839070,
            3842300,
            3841251
        ],
        "C": [
            3835839,
            3835172,
            3835831,
            3837510,
            3837765,
            3834791,
            3833737,
            3838762,
            3839170,
            3839102,
            3834408,
            3840072,
            3836332,
            3840999,
            3838170,
            3838751,
            3836736,
            3840325,
            3839207,
            3832923
        ],
        "B": [
            3832474,
            3833450,
            3837630,
            3835590,
            3835615,
            3836583,
            3840262,
            3835730,
            3832871,
            3835097,
            3839185,
            3834451,
            3840037,
            3832621,
            3841872,
            3837653,
            3838448,
            3841898,
            3834701
        ],
        "A": [
            3832264,
            3841936,
            3833100,
            3832334,
            3832542,
            3835485,
            3832690,
            3839877,
            3833260,
            3832812,
            3838983,
            3836728,
            3832398,
            3833247,
            3833000,
            3833823,
            3833650,
            3835970
        ]
    },
    "name": "D. Sereja and Straight Lines",
    "statement": "Sereja placed points on a plane. Now Sereja wants to place on the plane\r\ntwo straight lines, intersecting at a right angle, so that one of the\r\nstraight lines intersect the axis at an angle of degrees and the maximum\r\ndistance from the points to the straight lines were minimum. In this\r\nproblem we consider the distance between points and equal . The distance\r\nbetween the point and the straight lines is the minimum distance from\r\nthe point to some point belonging to one of the lines.Help Sereja, find\r\nthe maximum distance from the points to the optimally located straight\r\nlines.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <list>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <vector>\n#include <cmath>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <complex>\n#include <sstream>\nusing namespace std;\n \ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef long double LD;\ntypedef vector<int> VI;\ntypedef pair<int,int> PII;\n \n#define REP(i,n) for(int i=0;i<(n);++i)\n#define SIZE(c) ((int)((c).size()))\n#define FOR(i,a,b) for (int i=(a); i<(b); ++i)\n#define FOREACH(i,x) for (__typeof((x).begin()) i=(x).begin(); i!=(x).end(); ++i)\n#define FORD(i,a,b) for (int i=(a)-1; i>=(b); --i)\n#define ALL(v) (v).begin(), (v).end()\n \n#define pb push_back\n#define mp make_pair\n#define st first\n#define nd second\n\nconst int MAXN = 1<<18;\n\npair<LL,LL> pts[MAXN];\nLL minYL[MAXN],maxYL[MAXN],minYR[MAXN],maxYR[MAXN];\n\nconst LL INF = 2000000002;\nint main() {\n    int N;\n    scanf(\"%d\",&N);\n    REP(i,N) {\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        pts[i].st = a - b;\n        pts[i].nd = a + b;\n    }\n\n    sort(pts, pts+N);\n    \n    minYL[0] = maxYL[0] = pts[0].nd;\n    FOR(i,1,N) {\n        minYL[i] = min(minYL[i-1], pts[i].nd);\n        maxYL[i] = max(maxYL[i-1], pts[i].nd);        \n    }\n\n    minYR[N-1] = maxYR[N-1] = pts[N-1].nd;\n    FORD(i,N-1,0) {\n        minYR[i] = min(minYR[i+1], pts[i].nd);\n        maxYR[i] = max(maxYR[i+1], pts[i].nd);        \n    }    \n    \n    LL L = 0, R = 4 * INF;\n    while (L < R) {\n        LL S = (L + R) / 2;\n        \n        bool can = false;\n        \n        int j = 0;\n        REP(i,N) {\n            while (j < N - 1 && pts[j+1].st - pts[i].st <= S) ++j;\n            if (i == 0 && j == N-1) can = true;\n            \n            LL minY = INF, maxY = -INF;\n            if (i > 0) {\n                minY = min(minY, minYL[i-1]);\n                maxY = max(maxY, maxYL[i-1]);\n            }\n            if (j < N - 1) {\n                minY = min(minY, minYR[j+1]);\n                maxY = max(maxY, maxYR[j+1]);\n            }\n            if (maxY - minY <= S) can = true;\n            \n            if (can) break;\n        }    \n        \n        if (can) R = S;\n        else L = S + 1;\n    }\n    \n    double result = L * 0.5;\n    printf(\"%0.8lf\\n\", result);\n}    "
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "geometry",
        "sortings",
        "two pointers"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\D. Sereja and Straight Lines.json",
    "editorial_link": "https://codeforces.com//blog/entry/7905",
    "editorial": "Roll all at 45 degrees using the transformation: (x, y) -> (x ', y'): x '= x + y, y' = x-y. Next you need to place two lines parallel to the coordinate axes. Sort the points by the first coordinate. Next, we use a binary search for the answer. May we have fixed a number, you now need to check whether it is enough or not. Note that now we need to put two strips of width 2 * fixed amount that they would have to cover all the points. Suppose that some point should be close to the left side of the vertical strip, then for all points that do not belong to the strip we find the minimum and maximum second coordinate. If the difference between the found coordinates no more then 2 * fixed quantity, the strip can be placed, otherwise Â— no.",
    "hint": []
}