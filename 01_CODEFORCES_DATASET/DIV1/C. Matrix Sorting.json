{"link": "https://codeforces.com//contest/1500/problem/C", "problemId": "922994", "problem_idx": "C", "shortId": "1500C", "contest_number": "1500", "problem_submissions": {"F": [109882523, 156894272, 156888570, 109926929, 109926191, 109893056, 109892507, 110407942], "E": [109869658, 109880186, 109882627, 109869772, 109883572, 110177251, 112227681, 112227008, 112226855], "C": [109851937, 109858563, 109855424, 109847448, 109897897, 109858583, 109868120, 109862817, 109862820, 109847704, 109864051, 109866901, 109862545, 109862473, 109864278, 109866655, 109866161, 109873497, 109866235, 109876064], "A": [109847522, 109845877, 109846878, 109889115, 109845620, 109845386, 109845664, 109845260, 109853758, 109847140, 109849368, 109845237, 109845429, 109846259, 109846562, 109868273, 109864425, 109846842, 109854328], "B": [109845439, 109853012, 109858233, 109878921, 109849145, 109848615, 109856685, 109852114, 109880910, 109854120, 109859099, 109849597, 109849728, 109854205, 109854819, 109853965, 109859327, 109857020, 109863440], "D": [109866969, 109867253, 109854472, 109863287, 109861346, 109868138, 109875304, 109871552, 109879597, 109878283, 109877726, 109880816, 109873581, 109879840, 109875506, 109884990, 109881921, 109883609]}, "name": "C. Matrix Sorting", "statement": "You are given two tables A and B of size n\r\ntimes m. We define a as the following: we choose a column and reorder\r\nthe rows of the table by the value in this column, from the rows with\r\nthe smallest value to the rows with the largest. In case there are two\r\nor more rows with equal value in this column, their relative order does\r\nnot change (such sorting algorithms are called ).You can find this\r\nbehavior of sorting by column in many office software for managing\r\nspreadsheets. Petya works in one, and he has a table A opened right now.\r\nHe wants to perform zero of more sortings by column to transform this\r\ntable to table B.Determine if it is possible to do so, and if yes, find\r\na sequence of columns to sort by. Note that you to minimize the number\r\nof sortings.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 13.03.2021 12:23:56       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int h, w;\n  cin >> h >> w;\n  vector<vector<int>> a(h, vector<int>(w));\n  for (int i = 0; i < h; i++) {\n    for (int j = 0; j < w; j++) {\n      cin >> a[i][j];\n    }\n  }\n  vector<vector<int>> b(h, vector<int>(w));\n  for (int i = 0; i < h; i++) {\n    for (int j = 0; j < w; j++) {\n      cin >> b[i][j];\n    }\n  }\n  if (a == b) {\n    cout << 0 << '\\n';\n    return 0;\n  }\n  vector<int> seq;\n  vector<int> deg(w);\n  for (int i = 0; i < h - 1; i++) {\n    for (int j = 0; j < w; j++) {\n      if (b[i][j] > b[i + 1][j]) {\n        deg[j] += 1;\n      }\n    }\n  }\n  vector<bool> used(h, false);\n  vector<int> que;\n  auto Use = [&](int i) {\n    used[i] = true;\n    for (int j = 0; j < w; j++) {\n      if (b[i][j] > b[i + 1][j]) {\n        deg[j] -= 1;\n        if (deg[j] == 0) {\n          que.push_back(j);\n        }\n      }\n    }\n  };\n  for (int j = 0; j < w; j++) {\n    if (deg[j] == 0) {\n      que.push_back(j);\n    }\n  }\n  for (int bb = 0; bb < (int) que.size(); bb++) {\n    int j = que[bb];\n    for (int i = 0; i < h - 1; i++) {\n      if (!used[i] && b[i][j] != b[i + 1][j]) {\n        Use(i);\n      }\n    }\n  }\n  vector<int> order(h);\n  iota(order.begin(), order.end(), 0);\n  reverse(que.begin(), que.end());\n  for (int col : que) {\n    stable_sort(order.begin(), order.end(), [&](int i, int j) {\n      return a[i][col] < a[j][col];\n    });\n  }\n  for (int i = 0; i < h; i++) {\n    for (int j = 0; j < w; j++) {\n      if (a[order[i]][j] != b[i][j]) {\n        cout << -1 << '\\n';\n        return 0;\n      }\n    }\n  }\n  cout << que.size() << '\\n';\n  for (int i = 0; i < (int) que.size(); i++) {\n    if (i > 0) {\n      cout << \" \";\n    }\n    cout << que[i] + 1;\n  }\n  cout << '\\n';\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["bitmasks", "brute force", "constructive algorithms", "greedy", "two pointers"], "dificulty": "2600", "interactive": false}