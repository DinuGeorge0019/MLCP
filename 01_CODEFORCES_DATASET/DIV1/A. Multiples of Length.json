{
    "link": "https://codeforces.com//contest/1396/problem/A",
    "problemId": "712374",
    "problem_idx": "A",
    "shortId": "1396A",
    "contest_number": "1396",
    "problem_submissions": {
        "E": [
            91420325,
            91433351,
            91395963,
            91403549,
            91401123,
            91402411,
            91409596,
            91414724,
            91398509,
            91431034,
            98258243,
            91413242,
            91418927,
            91416810,
            100070579,
            100069379,
            91404326
        ],
        "D": [
            91388366,
            91423836,
            91402660,
            91943822,
            91410504,
            91407249,
            91405665,
            91404955,
            92387331,
            91409139,
            91420254
        ],
        "C": [
            91373061,
            91380961,
            91375173,
            91383628,
            91383246,
            91370624,
            91378488,
            91375423,
            91372747,
            91401459,
            91603982,
            91437619,
            91381246,
            91378361,
            91395543,
            91392372,
            91380457,
            91391062,
            91392240,
            91390152,
            91380894
        ],
        "B": [
            91358979,
            91360664,
            91363530,
            91358594,
            91358724,
            91359119,
            91363085,
            91359172,
            91358745,
            91363826,
            91362155,
            91366158,
            91362751,
            91365359,
            91360322,
            91364106,
            91365992,
            91378262,
            91361724,
            91365744
        ],
        "A": [
            91354401,
            91357111,
            91359227,
            91352552,
            91352349,
            91355053,
            91358883,
            91356416,
            91355726,
            91357237,
            91356536,
            91360026,
            91358794,
            91362354,
            91356173,
            91360020,
            91356069,
            91361174,
            91357755,
            91354128
        ]
    },
    "name": "A. Multiples of Length",
    "statement": "You are given an array a of n integers.You want to make all elements of\r\na equal to zero by doing the following operation times: Select a\r\nsegment, for each number in this segment we can add a multiple of len to\r\nit, where len is the length of this segment (added integers can be\r\ndifferent). It can be proven that it is always possible to make all\r\nelements of a equal to zero.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 30.08.2020 17:34:53       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n;\n  cin >> n;\n  vector<long long> a(n);\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n  }\n  if (n == 1) {\n    cout << 1 << \" \" << 1 << '\\n';\n    cout << 0 << '\\n';\n    cout << 1 << \" \" << 1 << '\\n';\n    cout << 0 << '\\n';\n    cout << 1 << \" \" << 1 << '\\n';\n    cout << -a[0] << '\\n';\n    return 0;\n  }\n  cout << 1 << \" \" << 1 << '\\n';\n  cout << -a[0] << '\\n';\n  a[0] = 0;\n  cout << 2 << \" \" << n << '\\n';\n  for (int i = 2; i <= n; i++) {\n    if (i > 2) {\n      cout << \" \";\n    }\n    long long add = (long long) (a[i - 1] % n) * (n - 1);\n    cout << add;\n    a[i - 1] += add;\n  }\n  cout << '\\n';\n  cout << 1 << \" \" << n << '\\n';\n  for (int i = 1; i <= n; i++) {\n    if (i > 1) {\n      cout << \" \";\n    }\n    assert(a[i - 1] % n == 0);\n    cout << -a[i - 1];\n  }\n  cout << '\\n';\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "number theory"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1\\A. Multiples of Length.json",
    "editorial_link": "https://codeforces.com//blog/entry/82142",
    "editorial": "Let denote a rectangle with opposite corners and . For convenience,\r\nassume and .Letâs try solving the problem if coordinates are in range .\r\nWe could easily do this by coordinates compression.First, letâs look at\r\nthe problem with fixed. We define to be the smallest integer such that\r\nand is a rectangle (If there is no such integer, let ). It can be proven\r\nthat is non-decreasing, i.e. if , then .Now, letâs see how changes when\r\nwe iterate over a fixed . It is hard to add points to the set, so we\r\nwill try to support deleting points operation. For point , we have the\r\nfollowing definitions:Let set . Let with the largest .Let set . Let with\r\nthe smallest .(Note that or might represent empty set).With these two\r\nfunctions, we could see how changes after we delete point . It looks\r\nsomething like this: For every such that ;We could support this\r\noperation using segment tree with lazy propagation. The total time\r\ncomplexity is .\r\n",
    "hint": []
}