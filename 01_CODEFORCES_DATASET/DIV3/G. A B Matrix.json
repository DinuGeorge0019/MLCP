{
    "link": "https://codeforces.com//contest/1360/problem/G",
    "problemId": "629827",
    "problem_idx": "G",
    "shortId": "1360G",
    "contest_number": "1360",
    "problem_submissions": {
        "H": [
            81251920,
            81290028,
            81293330,
            81291112,
            81294740,
            81299062,
            81297186,
            81294484,
            81304607,
            81300361,
            81303070,
            81250599,
            81295409,
            81298287,
            81304237,
            81231948
        ],
        "G": [
            81250908,
            81261609,
            81276322,
            81265591,
            81276387,
            81264433,
            81272613,
            81280948,
            81267380,
            81269754,
            81289390,
            81293762,
            81279290,
            81296348,
            81288695,
            81287798
        ],
        "F": [
            81230412,
            81252303,
            81257057,
            81259404,
            81265576,
            81254763,
            81259977,
            81264927,
            81254624,
            81249372,
            81271302,
            81279300,
            81267710,
            81275581,
            81282413,
            81255521
        ],
        "E": [
            81216064,
            81240455,
            81234957,
            81246045,
            81233772,
            81233068,
            81236233,
            81262156,
            81246598,
            81264349,
            81235887,
            81262591,
            81252163,
            81263497,
            81254477,
            81259978
        ],
        "B": [
            81215775,
            81207436,
            81205722,
            81209946,
            81206365,
            81207859,
            81208440,
            81216311,
            81225212,
            81217601,
            81209275,
            81216781,
            81209546,
            81211074,
            81219408,
            81270897
        ],
        "A": [
            81211901,
            81203807,
            81203057,
            81203650,
            81203478,
            81204406,
            81203639,
            81224692,
            81237119,
            81214495,
            81204306,
            81209285,
            81203552,
            81206909,
            81211432,
            81273150
        ],
        "C": [
            81206744,
            81215880,
            81216577,
            81223025,
            81214552,
            81214398,
            81216644,
            81210331,
            81222555,
            81225820,
            81221447,
            81224269,
            81240900,
            81218199,
            81226927,
            81268532
        ],
        "D": [
            81205489,
            81225350,
            81222950,
            81235831,
            81222076,
            81219822,
            81226333,
            81233523,
            81233797,
            81230395,
            81227841,
            81245779,
            81245445,
            81255431,
            81237048,
            81264054
        ]
    },
    "name": "G. A B Matrix",
    "statement": "You are given four positive integers n, m, a, b (1\r\nle b\r\nle n\r\nle 50; 1\r\nle a\r\nle m\r\nle 50). Find any such rectangular matrix of size n\r\ntimes m that satisfies all of the following conditions: each row of the\r\nmatrix contains exactly a ones; each column of the matrix contains\r\nexactly b ones; all other elements are zeros. If the desired matrix does\r\nnot exist, indicate this.For example, for n=3, m=6, a=2, b=1, there\r\nexists a matrix satisfying the conditions above:\r\nbegin{vmatrix} 0 & 1 & 0 & 0 & 0 & 1\r\n1 & 0 & 0 & 1 & 0 & 0\r\n0 & 0 & 1 & 0 & 1 & 0\r\nend{vmatrix}\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std ;\n#define drep( i, s, t ) for( register int i = (t); i >= (s); -- i )\n#define rep( i, s, t ) for( register int i = (s); i <= (t); ++ i )\n#define Next( i, x ) for( register int i = head[x]; i; i = e[i].next )\n#define re register\nint gi() {\n\tchar cc = getchar() ; int cn = 0, flus = 1 ;\n\twhile( cc < '0' || cc > '9' ) {  if( cc == '-' ) flus = - flus ; cc = getchar() ; }\n\twhile( cc >= '0' && cc <= '9' )  cn = cn * 10 + cc - '0', cc = getchar() ;\n\treturn cn * flus ;\n}\n#define maxn 205\nint n , m , a, b ; \nsigned main() {\n\tint T = gi() ;\n\twhile( T -- ) {\n\t\tn = gi(), m = gi(), a = gi(), b = gi() ;\n\t\tif( n * a != m * b ) {\n\t\t\tputs(\"NO\") ;\n\t\t\tcontinue ;\n\t\t}\n\t\tputs(\"YES\") ;\n\t\tint last = 0 ;\n\t\trep( i, 1, n ) {\n\t\t\tint l = last + 1, r = ( last + a ) % m;\n\t\t\tif( l == 0) {\n\t\t\t\trep( j, 1, r ) printf(\"1\") ;\n\t\t\t\trep( j, r + 1, l - 1 ) printf(\"0\");\n\t\t\t\tprintf(\"1\");\n\t\t\t\tlast = ( last + a ) % m ;\n\t\t\t\tputs(\"\");\n\t\t\t}\n\t\t\telse if(r == 0 ) {\n\t\t\t\trep( j, r + 1, l - 1 ) printf(\"0\");\n\t\t\t\trep( j, l, m ) printf(\"1\");\n\t\t\t\tlast = ( last + a ) % m ;\n\t\t\t\tputs(\"\");\n\t\t\t}\n\t\t\telse if( l <= r ) {\n\t\t\t\trep( j, 1, last ) printf(\"0\") ;\n\t\t\t\trep( j, last + 1, last + a ) printf(\"1\");\n\t\t\t\trep( j, last + a + 1, m ) printf(\"0\");\n\t\t\t\tlast = ( last + a ) % m ;\n\t\t\t\tputs(\"\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\trep( j, 1, r ) printf(\"1\") ;\n\t\t\t\trep( j, r + 1, l - 1 ) printf(\"0\");\n\t\t\t\trep( j, l, m ) printf(\"1\");\n\t\t\t\tlast = ( last + a ) % m ;\n\t\t\t\tputs(\"\");\n\t\t\t}\n\t\t}\n\t}\n\treturn 0 ;\n} "
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\G. A B Matrix.json",
    "editorial_link": "https://codeforces.com//blog/entry/77846",
    "editorial": "Let\u00e2\u0080\u0099s see how the desired matrix looks like. Since each row should have\r\nexactly ones, and each column should have exactly ones, the number of\r\nones in all rows should be equal to the number of ones in all columns .\r\nThus, the desired matrix exists iff or .Let\u00e2\u0080\u0099s show how to construct the\r\ndesired matrix if it exists. Let\u00e2\u0080\u0099s find any number such that , where is\r\nthe remainder of dividing by . In the first row of the desired matrix,\r\nwe put the ones at the positions , and in the -th row we put the ones,\r\nas in the row, but cyclically shifted by to the right.\r\n"
}