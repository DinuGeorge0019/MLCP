{
    "link": "https://codeforces.com//contest/1077/problem/A",
    "problemId": "256060",
    "problem_idx": "A",
    "shortId": "1077A",
    "contest_number": "1077",
    "problem_submissions": {
        "F2": [
            45821914,
            45824097,
            45827727,
            45823038,
            45823838,
            45831345,
            45823658,
            45828538,
            45826654,
            45843367,
            45837244,
            45831421,
            45827068,
            75760321,
            46030227,
            46029209,
            46029112,
            45866424
        ],
        "F1": [
            45820450,
            45824142,
            45824461,
            45823167,
            76966420,
            45824019,
            45831648,
            45823900,
            45828343,
            45824802,
            45841509,
            45837306,
            45831567,
            45823097,
            45829985,
            45827347,
            75757082,
            45830229,
            45831957,
            45830358,
            45833935,
            45833332,
            45828687
        ],
        "E": [
            45816542,
            52239741,
            45818548,
            45816950,
            45819025,
            45815405,
            45821116,
            45817502,
            45823078,
            45808470,
            45827222,
            45833695,
            45822673,
            45820795,
            45823659,
            45825654,
            45825672,
            45828447,
            45825663,
            45830728
        ],
        "D": [
            45811969,
            52239759,
            45814314,
            45814285,
            45816755,
            45819154,
            45813076,
            45811883,
            45822278,
            45831158,
            45821016,
            45816579,
            45818656,
            45997108,
            45818703,
            45817324,
            45818247,
            45816683,
            45819278,
            45822009
        ],
        "C": [
            45807748,
            45809528,
            45808767,
            45809925,
            45807121,
            45806385,
            45818022,
            45810371,
            45804988,
            45857981,
            45852142,
            45840511,
            45811255,
            45820919,
            45810760,
            45809427,
            45810396,
            45809829,
            45812965,
            45808768,
            45810632,
            45815038,
            45809663
        ],
        "B": [
            45805407,
            45806822,
            45804781,
            45807614,
            45805828,
            45804425,
            45810429,
            45806291,
            45806153,
            45852010,
            45812539,
            45824293,
            45806882,
            45806701,
            45807779,
            45807759,
            45805186,
            45806900,
            45808256,
            45805906
        ],
        "A": [
            45803595,
            45803585,
            45803761,
            45803589,
            45806737,
            45803510,
            45815244,
            45803641,
            45804397,
            45851969,
            45805595,
            45822873,
            45804956,
            45804923,
            45805008,
            45804110,
            45803730,
            45804318,
            45804436,
            45803752
        ]
    },
    "name": "A. Frog Jumping",
    "statement": "A frog is currently at the point 0 on a coordinate axis Ox. It jumps by\r\nthe following algorithm: the first jump is a units to the right, the\r\nsecond jump is b units to the left, the third jump is a units to the\r\nright, the fourth jump is b units to the left, and so on.Formally: if\r\nthe frog has jumped an even number of times (before the current jump),\r\nit jumps from its current position x to position x+a; otherwise it jumps\r\nfrom its current position x to position x-b. Your task is to calculate\r\nthe position of the frog after k jumps.But... One more thing. You are\r\nwatching t different frogs so you have to answer t independent queries.\r\n",
    "solutions": [
        "#include<iostream> \n#include<cstdio>\n#include<cmath>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define ll long long\nchar getc(){char c=getchar();while ((c<'A'||c>'Z')&&(c<'a'||c>'z')&&(c<'0'||c>'9')) c=getchar();return c;}\nint gcd(int n,int m){return m==0?n:gcd(m,n%m);}\nint read()\n{\n\tint x=0,f=1;char c=getchar();\n\twhile (c<'0'||c>'9') {if (c=='-') f=-1;c=getchar();}\n\twhile (c>='0'&&c<='9') x=(x<<1)+(x<<3)+(c^48),c=getchar();\n\treturn x*f;\n}\nint T;\nint main()\n{\n\tT=read();\n\twhile (T--)\n\t{\n\t\tint a=read(),b=read(),k=read();\n\t\tif (k&1) cout<<1ll*(a-b)*(k>>1)+a<<endl;\n\t\telse cout<<1ll*(a-b)*(k>>1)<<endl;\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Frog Jumping.json",
    "editorial_link": "https://codeforces.com//blog/entry/63274",
    "editorial": "With each pair of jumps of kind \"to the right to the left\" the frog\r\njumps . So the answer is almost . Almost because there can be one more\r\njump to the right. So if is odd then we have to add to the answer.\r\n",
    "hint": []
}