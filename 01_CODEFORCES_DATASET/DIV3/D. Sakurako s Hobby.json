{
    "link": "https://codeforces.com//contest/2008/problem/D",
    "problemId": "2850009",
    "problem_idx": "D",
    "shortId": "2008D",
    "contest_number": "2008",
    "problem_submissions": {
        "H": [
            279136956,
            279175231,
            279161763,
            279179363,
            279181586,
            279168976,
            279216022,
            279614299,
            279182476,
            279209636,
            279208468,
            279207341,
            279210332,
            279350027,
            279217913,
            279220559,
            279216550,
            279220895,
            279220924,
            279302743
        ],
        "G": [
            279119447,
            279152222,
            279151084,
            279131568,
            279192199,
            279163482,
            279207144,
            279160784,
            279362880,
            279111562,
            279178333,
            279161657,
            279296750,
            279200995,
            279191409,
            279192959,
            279209224,
            279173816,
            279190595,
            279189666,
            279155886,
            279187798
        ],
        "F": [
            279104606,
            279131689,
            279118881,
            279127227,
            279115943,
            279103916,
            279131962,
            279356689,
            279077044,
            279134534,
            279099699,
            279292527,
            279106499,
            279150166,
            279167659,
            279130886,
            279186290,
            279121299,
            279117301,
            279134844
        ],
        "E": [
            279097264,
            279123319,
            279112502,
            279113482,
            279140821,
            279152927,
            279147312,
            279181553,
            279142676,
            279163125,
            279188714,
            279161254,
            279138336,
            279154142,
            279156092,
            279140491,
            279154770,
            279110096,
            279153681,
            279116556
        ],
        "D": [
            279079188,
            279103941,
            279108267,
            279089266,
            279105270,
            279092186,
            279119277,
            279128075,
            279092080,
            279120640,
            279166364,
            279126815,
            279110851,
            279134432,
            279119823,
            279121959,
            279088289,
            279095604,
            279098547
        ],
        "C": [
            279075309,
            279090563,
            279107974,
            279084125,
            279095019,
            279080293,
            279095460,
            279192216,
            279081252,
            279108974,
            279132485,
            279093671,
            279089579,
            279098258,
            279105761,
            279109828,
            279083132,
            279080197,
            279089704
        ],
        "B": [
            279070569,
            279078207,
            279107778,
            279079153,
            279085265,
            279120271,
            279088210,
            279097026,
            279076070,
            279110876,
            279124102,
            279123495,
            279082667,
            279084060,
            279083489,
            279098074,
            279099366,
            279076888,
            279076970,
            279080147
        ],
        "A": [
            279068125,
            279068165,
            279106509,
            279068333,
            279073493,
            279112154,
            279077178,
            279083226,
            279068010,
            279081658,
            279079540,
            279073175,
            279071802,
            279068979,
            279070906,
            279069965,
            279068711,
            279069909,
            279068403
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/133509",
    "editorial": "Any permutation can be divided into some number of cycles, so is equal\r\nto the number of black colored elements in the cycle where is. So, we\r\ncan write out all cycles in and memorize for each the number of black\r\ncolored elements in the cycle where it is.\r\n",
    "name": "D. Sakurako s Hobby",
    "statement": "For a certain permutation p^{\r\ntext{ }} Sakurako calls an integer j reachable from an integer i if it\r\nis possible to make i equal to j by assigning i=p_i a certain number of\r\ntimes.If p=[3,5,6,1,2,4], then, for example, 4 is reachable from 1,\r\nbecause: i=1\r\nrightarrow i=p_1=3\r\nrightarrow i=p_3=6\r\nrightarrow i=p_6=4. Now i=4, so 4 is reachable from 1.Each number in the\r\npermutation is colored either black or white.Sakurako defines the\r\nfunction F(i) as the number of black integers that are reachable from\r\ni.Sakurako is interested in F(i) for each 1\r\nle i\r\nle n, but calculating all values becomes very difficult, so she asks\r\nyou, as her good friend, to compute this.^{\r\ntext{ }}A permutation of length n is an array consisting of n distinct\r\nintegers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (the number 2 appears\r\ntwice in the array), and [1,3,4] is also not a permutation (n=3, but the\r\narray contains 4).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;\u00a0namespace std {\u00a0template <int D, typename T>struct Vec : public vector<Vec<D - 1, T>> {    static_assert(D >= 1);    template <typename... Args>    Vec(int n = 0, Args... args) : vector<Vec<D - 1, T>>(n, Vec<D - 1, T>(args...)) {}};\u00a0template <typename T>struct Vec<1, T> : public vector<T> {    Vec(int n = 0, T val = T()) : std::vector<T>(n, val) {}};\u00a0template <class Fun>class y_combinator_result {    Fun fun_;\u00a0   public:    template <class T>    explicit y_combinator_result(T &&fun) : fun_(std::forward<T>(fun)) {}\u00a0    template <class... Args>    decltype(auto) operator()(Args &&...args) {        return fun_(std::ref(*this), std::forward<Args>(args)...);    }};\u00a0template <class Fun>decltype(auto) y_combinator(Fun &&fun) {    return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));}\u00a0}  // namespace std\u00a0class DSU {   public:    DSU(int n) {        prt.resize(n + 1, -1);    }\u00a0    int SZ(int u) {        return -prt[root(u)];    }\u00a0    int root(int u) {        return (prt[u] < 0 ? u : (prt[u] = root(prt[u])));    }\u00a0    bool connected(int u, int v) {        return ((u = root(u)) == (v = root(v)));    }\u00a0    bool unite(int u, int v) {        if ((u = root(u)) == (v = root(v))) {            return 0;        }\u00a0        if (prt[u] > prt[v]) {            u ^= v ^= u ^= v;        }\u00a0        prt[u] += prt[v];        prt[v] = u;        return 1;    }\u00a0   private:    vector<int> prt;};\u00a0int32_t main() {    ios_base::sync_with_stdio(0);    cin.tie(0);\u00a0    int t;    cin >> t;    while (t--) {        int n;        cin >> n;\u00a0        vector<int> a(n);        for (int i = 0; i < n; i++) cin >> a[i], a[i]--;        string s;        cin >> s;\u00a0        DSU dsu(n);        for (int i = 0; i < n; i++) dsu.unite(i, a[i]);        vector<int> sum(n);        for (int i = 0; i < n; i++) {            sum[dsu.root(i)] += s[i] == '0';        }        for (int i = 0; i < n; i++) {            cout << sum[dsu.root(i)] << ' ';        }        cout << '\\n';    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "dsu",
        "graphs",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Sakurako s Hobby.json"
}