{
    "link": "https://codeforces.com//contest/1462/problem/C",
    "problemId": "833571",
    "problem_idx": "C",
    "shortId": "1462C",
    "contest_number": "1462",
    "problem_submissions": {
        "F": [
            101312311,
            101295944,
            101308624,
            101308817,
            101304111,
            101280435,
            101305797,
            101310367,
            101305342,
            101311228,
            101404636,
            101403975,
            101311880,
            101300846,
            101321777,
            101323660,
            101322804,
            101312196,
            101317325,
            101337936,
            101324335,
            101318324
        ],
        "E2": [
            101285396,
            101295162,
            101287717,
            101294090,
            101294721,
            101302415,
            101297486,
            101291336,
            101285191,
            101301715,
            101403947,
            101297838,
            101320202,
            101301546,
            101293087,
            101297518,
            101302712,
            101306390,
            101284328,
            101307237,
            101300711
        ],
        "E1": [
            101282369,
            101288225,
            101284658,
            101287780,
            101297537,
            101304897,
            101298622,
            101296342,
            101290668,
            101295792,
            101403926,
            101300370,
            101291439,
            101292410,
            101297049,
            101300114,
            101296216,
            101298222,
            101280004,
            101327539,
            101299484,
            101303183
        ],
        "D": [
            101276901,
            101274657,
            101273346,
            101282814,
            101282205,
            101287581,
            101290967,
            101279699,
            101299600,
            101289409,
            101403847,
            101286604,
            101293181,
            101285967,
            101285140,
            101285937,
            101287608,
            101292000,
            101304911,
            101416082,
            101283715,
            101288370
        ],
        "C": [
            101268521,
            101264616,
            101269281,
            101273876,
            101272004,
            101269250,
            101272117,
            101267115,
            101271243,
            101273829,
            101403759,
            101275279,
            101269069,
            101275015,
            101277128,
            101275423,
            101281795,
            101279889,
            101270679,
            101277574,
            101275915
        ],
        "B": [
            101264269,
            101265842,
            101265325,
            101264865,
            101264553,
            101265746,
            101267507,
            101270770,
            101264118,
            101266219,
            101403739,
            101270231,
            101266677,
            101264816,
            101274093,
            101269885,
            101269868,
            101266304,
            101266579,
            101415580,
            101272178,
            101266529
        ],
        "A": [
            101259376,
            101261449,
            101259287,
            101259205,
            101260758,
            101260150,
            101263911,
            101273333,
            101279124,
            101260299,
            101403717,
            101261323,
            101259580,
            101259586,
            101264162,
            101263539,
            101264411,
            101259503,
            101259664,
            101259533,
            101260523
        ]
    },
    "name": "C. Unique Number",
    "statement": "You are given a positive number x. Find the smallest positive integer\r\nnumber that has the sum of digits equal to x and all digits are\r\n(unique).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define pb push_back\n#define ll long long\n#define mp make_pair\n#define si short int\n#define speed ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)\n#define pill pair<ll,ll>\n#define f first\n#define s second\n#define pilc pair<ll,char>\n#define all(a) (a).begin(),(a).end()\n#define rep(s,e,step) for(int i = (s); i < (e) ; i += step)\n#define vrep(s,e,step) for(int j = (s); j < (e) ; j += step)\n#define ex exit(0) \n#define sz(a) (a).size()\n#define triple pair<pill, ll>\n#define pinode pair<node*, node*>\n#define quadra pair<pill, pill>\n#define ld long double\nusing namespace std;\n \nconst ll N = 2e5 + 10;\nconst ll M = 2e5 + 1;\nconst ll big = 1e18;\nconst ll hsh2 = 1964325029 ;\nconst long long mod = 1e9 + 7;\nconst long double EPS = 1e-14;\nconst ll block = 1e7;\nconst ll shift = 2e3;\nmt19937_64 rofl(chrono::steady_clock::now().time_since_epoch().count());\n\nll t, x;\nll ans, sub;\nll F[10] = {0};\n\nvoid rec(ll sum) {\n\tif(sum > x)\n\t\treturn;\n\tif(sum == x) {\n\t\tans = min(sub, ans);\n\t\treturn;\n\t}\n\tfor(int j = 1;j < 10; j++) {\n\t\tif(!F[j]) {\n\t\t    F[j] = 1;\n\t\t    sub = sub * 10 + j;\n\t\t\trec(sum + j);\n\t\t\tsub /= 10;\n\t\t\tF[j] = 0;\n\t\t}\n\t}\n}\n\nvoid solve() {\n    ans = big;\n \tcin >> x;\n \trec(0);\n \tcout << (ans == big ? -1 : ans)<< '\\n';\n}\n\nint main() {\n\tspeed;\n\tcin >> t;\n\twhile(t--)solve(); \t\n}              \n/*\nqiwwqdesw\n1\nd\n \n*/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Unique Number.json",
    "editorial_link": "https://codeforces.com//blog/entry/85594",
    "editorial": "First of all, let\u00e2\u0080\u0099s understand that the answer to the problem should not\r\ncontain zeros (leading zeros are useless, while others increase the\r\nnumber, but do not change the sum). It is also clear that the number we\r\nfound should have the minimum possible length (since the longer the\r\nnumbers without leading zeros, the larger they are). Numbers of the same\r\nlength are compared lexicographically, that is, first by the first\r\ndigit, then by the second, and so on. This means that the digits in the\r\nnumber must go in sorted order (the order of the digits does not affect\r\nthe sum, but does affect the value).Let\u00e2\u0080\u0099s minimize the length of the\r\nnumber first. We need to get the specified sum in as few digits as\r\npossible. So we should use as large digits as possible. Then let\u00e2\u0080\u0099s start\r\nwith the number and add the digits from to to the beginning of the\r\nnumber in turn, until the sum of the digits exceeds the specified sum.\r\nObviously, you can\u00e2\u0080\u0099t get an answer for fewer digits.Now we minimize the\r\nnumber itself. First, we must minimize the first digit. The first digit\r\nis uniquely determined as the difference between the sum of the\r\nremaining digits and the required sum. So you need to maximize the sum\r\nof all digits except the first one (which has already been done in the\r\nprevious paragraph). It only remains to correct the first digit and\r\nprint the answer.\r\n"
}