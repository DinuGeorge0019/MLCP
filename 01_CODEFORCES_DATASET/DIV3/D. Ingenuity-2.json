{
    "link": "https://codeforces.com//contest/1974/problem/D",
    "problemId": "2657206",
    "problem_idx": "D",
    "shortId": "1974D",
    "contest_number": "1974",
    "problem_submissions": {
        "G": [
            261890876,
            261895242,
            261892104,
            261815844,
            261901397,
            261882110,
            261902942,
            261897196,
            261890302,
            261906925,
            261906633,
            261902994,
            261909128,
            262172085,
            261998366,
            261998046,
            261912311
        ],
        "F": [
            261873832,
            261860163,
            261871347,
            261886083,
            261890598,
            261905275,
            261893342,
            261893849,
            261885670,
            261888292,
            261884408,
            261903255,
            261856931,
            261866178,
            261998302,
            261867572,
            261874550,
            261881230,
            261896095,
            261891848
        ],
        "E": [
            261843511,
            261898684,
            261874046,
            261856295,
            261872971,
            261858650,
            261864336,
            261872189,
            261875499,
            261861733,
            261866981,
            261850233,
            261886170,
            261845363,
            261845593,
            261998691,
            261848135,
            261863399,
            261863179,
            261861452,
            261854564
        ],
        "D": [
            261828744,
            261833579,
            261844887,
            261858347,
            261848070,
            261834943,
            261843848,
            261843125,
            261893971,
            261854059,
            261850835,
            261836444,
            261865680,
            261830266,
            261832171,
            261998550,
            261835226,
            261844678,
            261837286,
            261829368,
            261844070
        ],
        "C": [
            261809458,
            261818269,
            261821670,
            261838680,
            261824893,
            261817516,
            261818307,
            261822342,
            261872865,
            261902570,
            261836543,
            261891689,
            261812999,
            261811999,
            261811344,
            261998621,
            261807237,
            261810379,
            261809093,
            261808251,
            261815953
        ],
        "B": [
            261801251,
            261803139,
            261801216,
            261828779,
            261802058,
            261805873,
            261803693,
            261800515,
            261806010,
            261808108,
            261800732,
            261800673,
            261801484,
            261801347,
            261998221,
            261798953,
            261798594,
            261800683,
            261798231,
            261800035
        ],
        "A": [
            261797694,
            261795610,
            261795288,
            261822724,
            261797136,
            261796736,
            262453696,
            261795629,
            261796165,
            261795943,
            261800077,
            261795571,
            261795380,
            261796034,
            261796954,
            261998187,
            261795311,
            261795243,
            261796139,
            261795603,
            261796608
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129686",
    "editorial": "For the string , calculate the 2D-coordinates of the point obtained as a\r\nresult of sequentially executing all instructions (for example,\r\ndecreases by 1, increases by 1, increases by 1, decreases by 1).\r\nConsider the following cases: or . Obviously, a solution does not exist.\r\n. This is one of the strings , , , . Again, in this case, it is\r\nimpossible to construct a solution, as both the rover and the helicopter\r\nmust execute at least 1 instruction. . A solution exists: assign the\r\nfirst instruction to the helicopter, as well as one of its complements,\r\nwhich exists. Assign all the remaining positive number of instructions\r\nto the rover. Both will obviously end up at . All other cases: a\r\nsolution exists. Assign and instructions moving in the direction of the\r\nsign of and respectively which definitely exist to the helicopter, and\r\nthe rest to the rover. Both subsets of instructions will be non-empty.\r\n",
    "name": "D. Ingenuity-2",
    "statement": "Letâ€™s imagine the surface of Mars as an infinite coordinate plane.\r\nInitially, the rover Perseverance-2 and the helicopter Ingenuity-2 are\r\nlocated at the point with coordinates (0, 0). A set of instructions s\r\nconsisting of n instructions of the following types was specially\r\ndeveloped for them: : move one meter north (from point (x, y) to (x, y +\r\n1)); : move one meter south (from point (x, y) to (x, y - 1)); : move\r\none meter east (from point (x, y) to (x + 1, y)); : move one meter west\r\n(from point (x, y) to (x - 1, y)). Each instruction must be executed\r\neither by the rover or by the helicopter. Moreover, each device must\r\nexecute instruction. Your task is to distribute the instructions in such\r\na way that after executing all n instructions, the helicopter and the\r\nrover end up at the same point, or determine that this is impossible.\r\n",
    "solutions": [
        "#include <iostream>#include <cmath>#include <algorithm>#include <vector>#include <chrono>#include <random>#include <map>#include <set>using namespace std;typedef long long ll;const int N = 2e5 + 10;int a[N];int ans[N];void solve() {\tint n;\tcin >> n;\tstring s;\tcin >> s;\tint x = 0, y = 0;\tvector <int> N, S, E, W;\tfor (int i = 0; i < n; i++) {\t\tif (s[i] == 'N') N.push_back(i), y++;\t\telse if (s[i] == 'S') S.push_back(i), y--;\t\telse if (s[i] == 'E') E.push_back(i), x++;\t\telse W.push_back(i), x--;\t}\tif (abs(x) % 2 == 1 || abs(y) % 2 == 1) {\t\tcout << \"NO\\n\";\t\treturn;\t}\tif ((int)N.size() % 2 == 0) {\t\tfor (int i = 0; i < (int)N.size(); i++) {\t\t\tif (i % 2 == 0) ans[N[i]] = 1;\t\t\telse ans[N[i]] = 2;\t\t}\t\tfor (int i = 0; i < (int)S.size(); i++) {\t\t\tif (i % 2 == 0) ans[S[i]] = 1;\t\t\telse ans[S[i]] = 2;\t\t}\t}\telse {\t\tans[N.back()] = 1;\t\tans[S.back()] = 1;\t\tN.pop_back();\t\tS.pop_back();\t\tfor (int i = 0; i < (int)N.size(); i++) {\t\t\tif (i % 2 == 0) ans[N[i]] = 1;\t\t\telse ans[N[i]] = 2;\t\t}\t\tfor (int i = 0; i < (int)S.size(); i++) {\t\t\tif (i % 2 == 0) ans[S[i]] = 1;\t\t\telse ans[S[i]] = 2;\t\t}\t}\tif ((int)E.size() % 2 == 0) {\t\tfor (int i = 0; i < (int)E.size(); i++) {\t\t\tif (i % 2 == 0) ans[E[i]] = 1;\t\t\telse ans[E[i]] = 2;\t\t}\t\tfor (int i = 0; i < (int)W.size(); i++) {\t\t\tif (i % 2 == 0) ans[W[i]] = 1;\t\t\telse ans[W[i]] = 2;\t\t}\t}\telse {\t\tans[E.back()] = 2;\t\tans[W.back()] = 2;\t\tW.pop_back();\t\tE.pop_back();\t\tfor (int i = 0; i < (int)E.size(); i++) {\t\t\tif (i % 2 == 0) ans[E[i]] = 1;\t\t\telse ans[E[i]] = 2;\t\t}\t\tfor (int i = 0; i < (int)W.size(); i++) {\t\t\tif (i % 2 == 0) ans[W[i]] = 1;\t\t\telse ans[W[i]] = 2;\t\t}\t}\tbool ch_1 = false, ch_2 = false;\tfor (int i = 0; i < n; i++) {\t\tif (ans[i] == 1) ch_1 = true;\t\telse ch_2 = true;\t} \tif (!ch_1 || !ch_2) {\t\tcout << \"NO\\n\";\t\treturn;\t}\tfor (int i = 0; i < n; i++) {\t\tif (ans[i] == 1) cout << \"R\";\t\telse cout << \"H\";\t}\tcout << \"\\n\";} int main() {\tint t;\tcin >> t;\twhile (t--) {\t\tsolve();\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Ingenuity-2.json",
    "hint": []
}