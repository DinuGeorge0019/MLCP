{
    "link": "https://codeforces.com//contest/1862/problem/D",
    "problemId": "2177631",
    "problem_idx": "D",
    "shortId": "1862D",
    "contest_number": "1862",
    "problem_submissions": {
        "G": [
            220245102,
            220236543,
            220240013,
            220263299,
            220256468,
            220270554,
            220407258,
            220261631,
            220276606,
            220277103,
            220277190,
            220265753,
            220272660,
            220272436,
            220276900,
            220270769,
            220279446,
            220270577,
            231887590,
            231887524,
            220377896,
            220376221,
            220375779,
            220287433,
            220285498,
            220284820,
            220274652,
            220267069,
            220285570,
            220280519
        ],
        "F": [
            220215510,
            220216380,
            220236628,
            220232754,
            220218803,
            220240895,
            220413869,
            220185778,
            220211559,
            220227122,
            220238991,
            220245238,
            220240906,
            220232310,
            220229370,
            220239430,
            220225756,
            220376173,
            220375742,
            220254210,
            220257832,
            220278068,
            220235150,
            220248305
        ],
        "E": [
            220203349,
            220208394,
            220220906,
            220202478,
            220220225,
            220336313,
            220335362,
            220227807,
            220202526,
            220238570,
            220214495,
            220229819,
            220221341,
            220220787,
            220218825,
            220224809,
            220217905,
            220376137,
            220375723,
            220232333,
            220250361,
            220231462,
            220220168,
            220236903
        ],
        "D": [
            220195280,
            220198509,
            220201838,
            220231248,
            220200432,
            220241039,
            220234728,
            220202010,
            220203000,
            220194405,
            220199267,
            220204119,
            220204397,
            220206486,
            220195334,
            220376096,
            220375678,
            220208148,
            220202416,
            220211386,
            220246850,
            220227240
        ],
        "C": [
            220183784,
            220178645,
            220194540,
            220223628,
            220184508,
            220217723,
            220185864,
            220183520,
            220194697,
            220216625,
            220191457,
            220187641,
            220185690,
            220198120,
            220201973,
            220376069,
            220375636,
            220182400,
            220182197,
            220187829,
            220185247,
            220218838
        ],
        "B": [
            220167869,
            220167779,
            220178691,
            220167799,
            220173120,
            220182282,
            220173679,
            220176676,
            220171769,
            220166010,
            220172585,
            220173029,
            220174605,
            220188618,
            220177089,
            220376035,
            220375602,
            220169392,
            220168222,
            220172418,
            220166374,
            220169270
        ],
        "A": [
            220162754,
            220162873,
            220166418,
            220162920,
            220167317,
            220165780,
            220168509,
            220165279,
            220163854,
            220162403,
            220163593,
            220166211,
            220165725,
            220172465,
            220175478,
            220376004,
            220375492,
            220163511,
            220162520,
            220166452,
            220197468,
            220163355
        ]
    },
    "name": "D. Ice Cream Balls",
    "statement": "Tema decided to improve his ice cream making skills. He has already\r\nlearned how to make ice cream in a cone balls.Before his ice cream\r\nobsession, Tema was interested in mathematics. Therefore, he is curious\r\nabout the number of balls he needs to have in order to make n types of\r\nice cream.There are plenty possible ice cream flavours: 1, 2, 3,\r\ndots. Tema can make two-balls ice cream with any flavours (probably the\r\nsame).Two ice creams are considered different if their sets of ball\r\nflavours are different. For example,\r\n{1, 2\r\n} =\r\n{2, 1\r\n}, but\r\n{1, 1\r\n}\r\nneq\r\n{1, 2\r\n}.For example, having the following ice cream balls:\r\n{1, 1, 2\r\n}, Tema can make only two types of ice cream:\r\n{1, 1\r\n} and\r\n{1, 2\r\n}..Help Tema answer this question. It can be shown that answer always\r\nexist.\r\n",
    "solutions": [
        "/*  \n  hmz is cute!\n--------------------------------------------\n  You've got to have faith\n  Don't let them cut you down cut you down once more\n*/\n#include<bits/stdc++.h>\nusing namespace std;\n#define TY long long\n#define IL inline\n#define pb push_back\n#define mod (TY)(1e9+7)\n#define MAXN 200005\n#define MAXM 200005\n#define MAXK 27\n#define INF (TY)(1e9)\n#define block 300\n#define For(i,a,b) for(TY i=(a);i<=(b);++i)\n#define FOR(i,a,b) for(TY i=(a);i<(b);++i)\n#define Rof(i,a,b) for(TY i=(a);i>=(b);--i)\n#define ROF(i,a,b) for(TY i=(a);i>(b);--i)\nIL TY qr(){\n\tTY x=0,f=1;char op=getchar();\n\tfor(;op<'0'||op>'9';op=getchar())if(op=='-')f=-1;\n\tfor(;op>='0'&&op<='9';op=getchar())x=x*10+(op^48);\n\treturn x*f;\n}IL bool ischar(char op){\n\tif(op>='a'&&op<='z')return true;\n\tif(op>='A'&&op<='Z')return true;\n\treturn false;\n}IL char getc(){\n\tchar op=getchar();\n\twhile(!ischar(op))op=getchar();\n\treturn op;\n}IL string qs(){\n\tstring op=\"\";char u=getchar();\n\twhile(!ischar(u))u=getchar();\n\twhile(ischar(u))op+=u,u=getchar();\n\treturn op;\n}IL void qw(TY x){\n\tif(!x){putchar('0');return;}\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>=10)qw(x/10);putchar(x%10+'0');\n}IL void qw(TY x,char op){qw(x),putchar(op);}\nIL void ws(string s){FOR(i,0,s.size())putchar(s[i]);}\nIL TY Ceil(TY a,TY b){return a/b+(a%b!=0);}\nIL TY Mod(TY a){return (a>=mod?a-mod:a);}\nIL TY Abs(TY a,TY b){return a>b?a-b:b-a;}\nIL TY Pow(TY a,TY b){\n\tTY ans=1,base=a;\n\twhile(b){\n\t\tif(b&1)ans=ans*base%mod;\n\t\tbase=base*base%mod;b>>=1;\n\t}return ans;\n}TY T,n;\nIL TY solve(TY now){\n\tTY l=1,r=3e9,ans=0;\n\twhile(l<=r){\n\t\tTY mid=(l+r)>>1;\n\t\tif(mid*(mid-1)/2<=now)ans=mid,l=mid+1;\n\t\telse r=mid-1;\n\t}return ans+now-ans*(ans-1)/2;\n}\nint main(){\n    //freopen(\".in\",\"r\",stdin);\n    //freopen(\".out\",\"w\",stdout);\n\n    /* init */\n\tT=qr();while(T--){\n\t\tn=qr();\n\t\tqw(solve(n),'\\n');\n\t}\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics",
        "constructive algorithms",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Ice Cream Balls.json",
    "editorial_link": "https://codeforces.com//blog/entry/119715",
    "editorial": "First, letâs note that having more than two balls of the same type is\r\nmeaningless.Letâs denote as the number of flavours of balls represented\r\nby two instances of each ball. Let denote the number of flavours\r\nrepresented by a single instance.Letâs calculate the number of different\r\nways to make an ice cream from these balls: we can make ice creams from\r\nballs of the same flavour and ice creams from balls of different\r\nflavours. In the problem, we are asked to select balls in such a way\r\nthat .Note that for a fixed sum of , we can uniquely determine and\r\ntherefore (or determine that there is no solution for that sum).Letâs\r\nassume we have found an answer with a sum of . This means . Moreover, if\r\nwe find an answer with a sum of , then . From this, we can see that this\r\nis only possible when . It is also evident that there are no answers\r\nwith a sum greater than .Now, all we need to do is perform a binary\r\nsearch on the sum of and then determine and . And donât forget to\r\nconsider the case when two sums of may be suitable, in order to choose\r\nthe one with the fewest number of balls.\r\n",
    "hint": []
}