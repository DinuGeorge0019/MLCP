{
    "link": "https://codeforces.com//contest/2060/problem/B",
    "problemId": "3147467",
    "problem_idx": "B",
    "shortId": "2060B",
    "contest_number": "2060",
    "problem_submissions": {
        "G": [
            301873530,
            301859046,
            301852803,
            301886996,
            301829945,
            301884074,
            301865362,
            301944483,
            301877663
        ],
        "F": [
            301809977,
            301827952,
            301788384,
            301831904,
            301878286,
            301872767,
            301850953,
            301874252,
            301811774,
            301816800,
            301831940,
            301815743,
            301889712,
            301854030,
            301836262,
            301832755,
            301848647,
            301843962,
            301841616,
            301902407
        ],
        "E": [
            301780977,
            301790293,
            301841004,
            301786821,
            301854824,
            301815095,
            301816295,
            301758990,
            301799665,
            301795284,
            301801086,
            301920235,
            301889573,
            301794741,
            301799175,
            301804483,
            301807413,
            301794652,
            301768541
        ],
        "D": [
            301771562,
            301772155,
            301822748,
            301775745,
            301785461,
            301801939,
            301852011,
            301776457,
            301782878,
            301769755,
            301787487,
            301917787,
            301889434,
            301776569,
            301786371,
            301790878,
            301764610,
            301773754,
            301756989
        ],
        "C": [
            301748633,
            301761322,
            301773736,
            301772188,
            301769620,
            301776760,
            301770890,
            301782439,
            301749719,
            301754417,
            301759048,
            301774305,
            301916945,
            301889316,
            301755362,
            301775118,
            301772704,
            301748352,
            301760800,
            301753236
        ],
        "B": [
            301746021,
            301755202,
            301761527,
            301755925,
            301795537,
            301759408,
            301745641,
            301745397,
            301750029,
            301750098,
            301915984,
            301888995,
            301750358,
            301751304,
            301755984,
            301781169,
            301750274,
            301748735
        ],
        "A": [
            301739564,
            301739279,
            301761253,
            301738865,
            301749974,
            301743163,
            301743222,
            301739250,
            301739375,
            301743095,
            301739024,
            301915381,
            301888689,
            301739666,
            301739726,
            301746215,
            301745343,
            301738637,
            301738767
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/138580",
    "editorial": "Video\r\n",
    "name": "B. Farmer John s Card Game",
    "statement": "Farmer John’s n cows are playing a card game! Farmer John has a deck of\r\nn\r\ncdot m cards numbered from 0 to n\r\ncdot m-1. He distributes m cards to each of his n cows.Farmer John wants\r\nthe game to be fair, so each cow should only be able to play 1 card per\r\nround. He decides to determine a , determined by a permutation^{\r\ntext{ }} p of length n, such that the p_i’th cow will be the i’th cow to\r\nplace a card on top of the center pile in a round.In other words, the\r\nfollowing events happen in order in each round: The p_1’th cow places\r\nany card from their deck on top of the center pile. The p_2’th cow\r\nplaces any card from their deck on top of the center pile. ... The\r\np_n’th cow places any card from their deck on top of the center pile.\r\nThere is a catch. Initially, the center pile contains a card numbered\r\n-1. In order to place a card, the number of the card must be greater\r\nthan the number of the card on top of the center pile. Then, the newly\r\nplaced card becomes the top card of the center pile. If a cow cannot\r\nplace any card in their deck, the game is considered to be lost.Farmer\r\nJohn wonders: does there exist p such that it is possible for all of his\r\ncows to empty their deck after playing all m rounds of the game? If so,\r\noutput any valid p. Otherwise, output -1.^{\r\ntext{ }}A permutation of length n contains each integer from 1 to n\r\nexactly once\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std; int main(){\tios::sync_with_stdio(false);\tcin.tie(nullptr); \tint t; \tcin >> t;  // number of test cases \twhile(t--){\t\tint n, m;\t\tcin >> n >> m;\t\tvector<vector<int>> cowCards(n, vector<int>(m));\t\tvector<int> allCards;\t\tallCards.reserve(n*m); \t\tfor(int i=0; i<n; i++){\t\t\tfor(int j=0; j<m; j++){\t\t\t\tcin >> cowCards[i][j];\t\t\t\tallCards.push_back(cowCards[i][j]);\t\t\t}\t\t} \t\tfor(int i=0; i<n; i++){\t\t\tsort(cowCards[i].begin(), cowCards[i].end());\t\t}\t\tmap<vector<int>, int> deckToCow;\t\tfor(int i=0; i<n; i++){\t\t\tdeckToCow[cowCards[i]] = i;\t\t}\t\tsort(allCards.begin(), allCards.end());\t\tbool possible = true;\t\tvector<int> p(n, -1);\t\tvector<bool> usedCow(n, false); \t\tfor(int j=0; j<n; j++){\t\t\tvector<int> colSet(m);\t\t\tfor(int row=0; row<m; row++){\t\t\t\tcolSet[row] = allCards[row*n + j];\t\t\t}\t\t\tauto it = deckToCow.find(colSet);\t\t\tif(it == deckToCow.end()){\t\t\t\tpossible = false;\t\t\t\tbreak;\t\t\t}\t\t\tint cowIndex = it->second;\t\t\tif(usedCow[cowIndex]){\t\t\t\tpossible = false;\t\t\t\tbreak;\t\t\t}\t\t\tusedCow[cowIndex] = true;\t\t\tp[j] = cowIndex;\t\t} \t\tif(!possible){\t\t\tcout << -1 << \"\\n\";\t\t\tcontinue;\t\t}\t\tfor(int j=0; j<n; j++){\t\t\tcout << p[j] + 1 << (j+1 < n ? ' ' : '\\n');\t\t}\t} \treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Farmer John s Card Game.json"
}