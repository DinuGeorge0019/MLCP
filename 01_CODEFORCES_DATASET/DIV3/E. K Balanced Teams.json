{
    "link": "https://codeforces.com//contest/1133/problem/E",
    "problemId": "308948",
    "problem_idx": "E",
    "shortId": "1133E",
    "contest_number": "1133",
    "problem_submissions": {
        "D": [
            50977706,
            50947355,
            100723482,
            50948843,
            50965152,
            50935620,
            50935134,
            50952860,
            50961383,
            50959922,
            50946976,
            50948619,
            50947073,
            50956907,
            50943195,
            50949460,
            50954635,
            50944647,
            50949611,
            50956624,
            50946681
        ],
        "F2": [
            50968854,
            50972022,
            50971221,
            50968366,
            50974597,
            50974087,
            50943311,
            50962568,
            51093176,
            50963051,
            50977549,
            50968954,
            51769081,
            50977124
        ],
        "F1": [
            50959078,
            50955230,
            50953315,
            50941907,
            50960168,
            50965272,
            50946141,
            50954816,
            50951285,
            50952154,
            50957023,
            50955812,
            50957050,
            50952531,
            50960906,
            50958622,
            50953869,
            50954476
        ],
        "E": [
            50952051,
            50961583,
            50962693,
            50951706,
            50964620,
            50954025,
            50954150,
            51032280,
            50963022,
            50950927,
            50972774,
            50964124,
            50963306,
            50964161,
            50960490,
            50966174
        ],
        "C": [
            50941353,
            50944201,
            50940430,
            50966196,
            50945464,
            50942925,
            50961788,
            50941100,
            50944821,
            50937379,
            50934514,
            50937910,
            50939090,
            50938244,
            50940255,
            50945217,
            50944371,
            50941409
        ],
        "B": [
            50938985,
            50941949,
            50938577,
            50961461,
            50942033,
            50940896,
            50965475,
            50936621,
            50942180,
            50948476,
            50938680,
            50936870,
            50936790,
            50935051,
            50937755,
            50941216,
            50940158,
            50939408
        ],
        "A": [
            50935306,
            50937849,
            50935030,
            50945613,
            51260785,
            50935398,
            50937671,
            50967123,
            50933770,
            50933763,
            50935392,
            50934515,
            50935161,
            50934233,
            50933760,
            50935141,
            50934723,
            50937065,
            50936471
        ]
    },
    "name": "E. K Balanced Teams",
    "statement": "You are a coach at your local university. There are n students under\r\nyour supervision, the programming skill of the i-th student is a_i.You\r\nhave to form k teams for yet another new programming competition. As you\r\nknow, the more students are involved in competition the more probable\r\nthe victory of your university is! So you have to form no more than k\r\n(and at least one) teams so that the number of students in them is\r\nmaximized. But you also know that team should be . It means that the\r\nprogramming skill of each pair of students in team should differ by no\r\nmore than 5. Teams are independent from one another (it means that the\r\ndifference between programming skills of two students from two different\r\nteams does not matter).It is possible that some students not be included\r\nin any team at all.Your task is to report the maximum possible number of\r\nstudents in no more than k (and at least one) teams.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n#define INF 9223372036854775807\n#define M_PI 3.14159265358979323846\n\nint mod = INF;\n\nint fastPow(int b, int e){int r = 1;while(e){if(e%2 == 1){r*=b;r%=mod;}b*=b;b%=mod;e/=2;}return r;}\nint pgcd(int a, int b){ if(a%b == 0) return b; else return pgcd(b, a%b);}\nint sign(int a){if(a < 0){ return -1;}if(a == 0) {return 0;}return 1;}\nbool isPrime(int a){if(a == 1) {return false;}int f = sqrt(a);for(int i = 2; i<=f; i++){if(a%i == 0){return false;}}return true;}\nint toInt(string s){int tot = 0;for(int i = s.size()-1; i >= 0; i--){tot+=((s[i]-'0')%mod)*fastPow(10,i);tot%=mod;}return tot;}\nstring toString(int a){string s = \"\";while(a){s = (char)('0'+a%10) + s;a/=10;}return s;}\n\nint memo[5009][5009];\n\nint n, k;\n\nvector<int> v(5009);\n\nint dp(int index, int left){\n    if(index >= n){\n        return 0;\n    }\n    if(memo[index][left] != -1) return memo[index][left];\n    if(left){\n        int nextPossible = upper_bound(v.begin(), v.end(),v[index]+5)-v.begin();\n        memo[index][left] = max(dp(index+1, left), dp(nextPossible,left-1)+nextPossible-index);\n    }else{\n        memo[index][left] = dp(index+1, left);\n    }\n    return memo[index][left];\n}\n\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\n    cin >> n >> k;\n    v.resize(n);\n    for(int i = 0; i < n; i++){\n        cin >> v[i];\n    }\n    sort(v.begin(), v.end());\n    for(int i = 0; i < 5009; i++){\n        for(int j = 0; j <  5009; j++){\n            memo[i][j] = -1;\n        }\n    }\n    cout << dp(0,k);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "sortings",
        "two pointers"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. K Balanced Teams.json",
    "editorial_link": "https://codeforces.com//blog/entry/65807",
    "editorial": "Firstly, letâs sort all students in order of non-decreasing their\r\nprogramming skill.Then letâs calculate the following dynamic\r\nprogramming: is the maximum number of students in at most non-empty\r\nteams if we consider first students.How to do transitions from ? The\r\nfirst transition is pretty intuitive: just skip the -th (-indexed)\r\nstudent. Then we can set .The second possible transition is to take some\r\nteam starting from the -th student.The only assumption we need to do it\r\nis the following: take the maximum by number of students team starting\r\nfrom the -th student is always optimally. Why it is so?If we consider\r\nthe student with the maximum programming skill in the team, we can take\r\nhim to this team instad of forming the new team with this student\r\nbecause this is always not worse.So the second transition is the\r\nfollowing: let be the number of students in a team if the -th student is\r\nthe first in it. We can calculate this part in naively or in using two\r\npointers.We can set .Time complexity: .\r\n",
    "hint": []
}