{"link": "https://codeforces.com//contest/1551/problem/D2", "problemId": "1055224", "problem_idx": "D2", "shortId": "1551D2", "contest_number": "1551", "problem_submissions": {"D2": [123504570, 123491119, 123485402, 123508709, 123487387, 123490299, 123498497, 123519517, 123503570, 123507308, 123506328, 123496338, 123525324, 123509854, 123500000, 123499688, 123500681, 123520243, 123521810, 123560543, 123489816], "D1": [123496540, 123479404, 123460900, 123501007, 123476769, 123477339, 123486676, 123509110, 123490131, 123493249, 123493173, 123482125, 123490880, 123500902, 123489510, 123491442, 123487788, 123505201, 123513198, 123560527, 123477927], "E": [123487760, 123503517, 123508061, 123512161, 123512376, 123522062, 123512340, 123494473, 123520187, 123519199, 123522642, 123508385, 123509676, 123525566, 123522562, 123529567, 123525043, 123524224, 123527690, 123529206], "F": [123483346, 123518773, 123505149, 123522554, 123530029, 123525813, 123677834], "C": [123463062, 123471764, 123465961, 123494616, 123466015, 123470689, 123479667, 123473982, 123478387, 123473235, 123485341, 123504214, 123476344, 123474463, 123482794, 123487070, 123509871, 123495332, 123505971, 123560511, 123471519], "B1": [123458055, 123450157, 123447323, 123480992, 123471662, 123459271, 123448891, 123453516, 123457018, 123473105, 123465306, 123457521, 123473064, 123450150, 123457907, 123454507, 123450845, 123454392, 123459478, 123486711, 123560483, 123451550], "B2": [123455203, 123463888, 123460727, 123523874, 123456743, 123463349, 123471479, 123467608, 123467523, 123462292, 123471295, 123468067, 123463785, 123466840, 123469959, 123475307, 123473651, 123478743, 123500344, 123560494, 123462370], "A": [123443367, 123443254, 123447159, 123446121, 123445546, 123443509, 123444177, 123443572, 123444116, 123444163, 123445991, 123474697, 123444077, 123443229, 123447862, 123443364, 123443226, 123449045, 123446138, 123560465, 123443541]}, "name": "D2. Domino  hard version ", "statement": "There\u2019s a table of n\r\ntimes m cells (n rows and m columns). The value of n\r\ncdot m is even.A domino is a figure that consists of two cells having a\r\ncommon side. It may be horizontal (one of the cells is to the right of\r\nthe other) or vertical (one of the cells is above the other).You need to\r\nplace\r\nfrac{nm}{2} dominoes on the table so that exactly k of them are\r\nhorizontal and all the other dominoes are vertical. The dominoes cannot\r\noverlap and must fill the whole table.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std ;\n\n#define ll              long long \n#define pb              push_back\n#define all(v)          v.begin(),v.end()\n#define sz(a)           (ll)a.size()\n#define F               first\n#define S               second\n#define INF             2000000000000000000\n#define popcount(x)     __builtin_popcountll(x)\n#define pll             pair<ll,ll>\n#define pii             pair<int,int>\n#define ld              long double\n\nconst int M = 1000000007;\nconst int MM = 998244353;\n\ntemplate<typename T, typename U> static inline void amin(T &x, U y){ if(y<x) x=y; }\ntemplate<typename T, typename U> static inline void amax(T &x, U y){ if(x<y) x=y; }\n\n#ifdef LOCAL\n#define debug(...) debug_out(#__VA_ARGS__, __VA_ARGS__)\n#else\n#define debug(...) 2351\n#endif\n\n\nconst int N = 105;\n\nvector<int> dx = {1,-1,0,0},dy = {0,0,1,-1};\n\nint can[N][N][26];\n\nint _runtimeTerror_()\n{\n    int n,m,k;\n    cin >> n >> m >> k;\n    vector<vector<char>> ans(n,vector<char>(m));\n    for(int i=0;i<n;++i)\n        for(int j=0;j<m;++j)\n            for(int k=0;k<26;++k)\n                can[i][j][k] = 0;\n\n    auto assign = [&](int x,int y,int c)\n    {\n        ans[x][y] = char(c + 'a');\n        for(int i=0;i<4;++i)\n        {\n            int u = x + dx[i],v = y + dy[i];\n            if(u >= 0 && u < n && v >= 0 && v < m)\n                can[u][v][c] = 1;\n        }\n    };\n    auto get = [&](vector<pair<pii,pii>> &a)\n    {\n        for(auto &[u,v]:a)\n        {\n            vector<int> cant(26,0);\n            auto [x,y] = u;\n            auto [xx,yy] = v;\n            for(int i=0;i<26;++i)\n                cant[i] = can[x][y][i] || can[xx][yy][i];\n            for(int i=0;i<26;++i)\n            {\n                if(cant[i] == 0)\n                {\n                    assign(x,y,i);\n                    assign(xx,yy,i);\n                    break;\n                }\n            }\n        }\n    };\n    vector<pair<pii,pii>> a;\n    if(n % 2 == 0 && m % 2 == 0)\n    {\n        if(k % 2 == 0)\n        {\n            cout << \"YES\\n\";\n            for(int i=0;i<n;i+=2)\n            {\n                for(int j=0;j<m;j+=2)\n                {\n                    if(k == 0)\n                    {\n                        a.push_back({{i,j},{i+1,j}});\n                        a.push_back({{i,j+1},{i+1,j+1}});\n                    }\n                    else\n                    {\n                        k -= 2;\n                        a.push_back({{i,j},{i,j+1}});\n                        a.push_back({{i+1,j},{i+1,j+1}});\n                    }\n                }\n            }\n        }\n        else\n        {\n            cout << \"NO\\n\";\n            return 0;\n        }\n    }\n    else if(n % 2 == 1 && m % 2 == 0)\n    {\n        k -= m/2;\n        if(k >= 0 && k % 2 == 0)\n        {\n            for(int j=0;j<m;j+=2)\n            {\n                a.push_back({{n-1,j},{n-1,j+1}});\n            }\n            for(int i=0;i<n-1;i+=2)\n            {\n                for(int j=0;j<m;j+=2)\n                {\n                    if(k == 0)\n                    {\n                        a.push_back({{i,j},{i+1,j}});\n                        a.push_back({{i,j+1},{i+1,j+1}});\n                    }\n                    else\n                    {\n                        k -= 2;\n                        a.push_back({{i,j},{i,j+1}});\n                        a.push_back({{i+1,j},{i+1,j+1}});\n                    }\n                }\n            }\n            cout << \"YES\\n\";\n        }\n        else\n        {\n            cout << \"NO\\n\";\n            return 0;\n        }\n    }\n    else if(n % 2 == 0 && m % 2 == 1)\n    {\n        if(k % 2 == 0 && k <= n * m / 2 - n / 2)\n        {\n            cout << \"YES\\n\";\n            for(int i=0;i<n;i+=2)\n                a.push_back({{i,m-1},{i+1,m-1}});\n            for(int i=0;i<n;i+=2)\n            {\n                for(int j=0;j<m-1;j+=2)\n                {\n                    if(k == 0)\n                    {\n                        a.push_back({{i,j},{i+1,j}});\n                        a.push_back({{i,j+1},{i+1,j+1}});\n                    }\n                    else\n                    {\n                        k -= 2;\n                        a.push_back({{i,j},{i,j+1}});\n                        a.push_back({{i+1,j},{i+1,j+1}});\n                    }\n                }\n            }\n        }\n        else\n        {\n            cout << \"NO\\n\";\n            return 0;\n        }\n    }\n    get(a);\n    for(int i=0;i<n;++i)\n    {\n        for(int j=0;j<m;++j)\n            cout << ans[i][j];\n        cout << \"\\n\";\n    }\n    return 0;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n    #ifdef runSieve\n        sieve();\n    #endif\n    #ifdef NCR\n        initialize();\n    #endif\n    int TESTS=1;\n    cin>>TESTS;\n    while(TESTS--)\n        _runtimeTerror_();\n    return 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "implementation", "math"], "dificulty": "2100", "interactive": false}