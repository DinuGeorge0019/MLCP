{
    "link": "https://codeforces.com//contest/1843/problem/B",
    "problemId": "1972491",
    "problem_idx": "B",
    "shortId": "1843B",
    "contest_number": "1843",
    "problem_submissions": {
        "A": [
            210513115,
            210358669,
            210356867,
            210356606,
            210356554,
            210357901,
            210357194,
            210356864,
            210358095,
            210357837,
            210357098,
            210356516,
            210357328,
            210356501,
            210359161,
            210356847,
            210356427,
            210357415,
            210358119,
            210357120,
            210364703
        ],
        "F2": [
            210451991,
            210457207,
            210618819,
            210495074,
            210494100,
            210540752,
            210540669
        ],
        "F1": [
            210414403,
            210417478,
            210396846,
            210409917,
            210412496,
            210409842,
            210422089,
            210412238,
            210413002,
            210417779,
            210416655,
            210416375,
            210514291,
            210424999,
            210427270,
            210422907,
            210427091,
            210425631,
            210535488,
            210532084,
            210419095,
            210422275,
            210416513
        ],
        "E": [
            210391764,
            210391814,
            210384445,
            210387069,
            210389387,
            210395623,
            210390859,
            210397426,
            210401897,
            210395689,
            210473862,
            210401991,
            210402273,
            210403725,
            210394172,
            210401396,
            210403436,
            210400251,
            210398852,
            210406208,
            210398263
        ],
        "D": [
            210377103,
            210378604,
            210375920,
            210374828,
            210376525,
            210379717,
            210379591,
            210382067,
            210379942,
            210382515,
            210378874,
            210376209,
            210374876,
            210386844,
            210381700,
            210376444,
            210371551,
            210381744,
            210386605,
            210381316
        ],
        "C": [
            210369061,
            210367738,
            210368361,
            210366823,
            210368080,
            210359312,
            210366442,
            210374049,
            210371348,
            210364184,
            210365780,
            210367512,
            210366187,
            210360428,
            210370272,
            210365171,
            210363817,
            210370422,
            210368258,
            210373372
        ],
        "B": [
            210363239,
            210368717,
            210361290,
            210360953,
            210362948,
            210369749,
            210362940,
            210364525,
            210363196,
            210375176,
            210362328,
            210363841,
            210361045,
            210364327,
            210364107,
            210360838,
            210360957,
            210367115,
            210363394,
            210370393
        ]
    },
    "name": "B. Long Long",
    "statement": "Today Alex was brought array a_1, a_2,\r\ndots, a_n of length n. He can apply as many operations as he wants\r\n(including zero operations) to change the array elements.In 1 operation\r\nAlex can choose any l and r such that 1\r\nleq l\r\nleq r\r\nleq n, and multiply all elements of the array from l to r inclusive by\r\n-1. In other words, Alex can replace the subarray [a_l, a_{l + 1},\r\ndots, a_r] by [-a_l, -a_{l + 1},\r\ndots, -a_r] in 1 operation.For example, let n = 5, the array is [1, -2,\r\n0, 3, -1], l = 2 and r = 4, then after the operation the array will be\r\n[1, 2, 0, -3, -1].Alex is late for school, so you should help him find\r\nthe maximum possible sum of numbers in the array, which can be obtained\r\nby making any number of operations, as well as the minimum number of\r\noperations that must be done for this.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define ls u<<1\n#define rs u<<1|1\n#define mm(x) memset(x,0,sizeof(x))\nusing namespace std;\nint read()\n{\n    int a=0;int f=0;char p=getchar();\n    while(!isdigit(p)){f|=p=='-';p=getchar();}\n    while(isdigit(p)){a=(a<<3)+(a<<1)+(p^48);p=getchar();}\n    return f?-a:a;\n}\nvoid YES(bool flag=true)\n{\n    if(flag)    puts(\"YES\");\n    else    puts(\"NO\");\n}\nconst int INF=998244353;\nconst int P=998244353;\nconst int N=1e6+5;\nconst int MX=1e6;\nint fac[N];\nint inv[N];\nint ksm(int u,int v)\n{\n    int res=1;\n    while(v)\n    {\n        if(v&1) res=(ll)res*u%P;\n        v>>=1;  u=(ll)u*u%P;\n    }\n    return res;\n}\nint C(int n,int m)\n{\n    if(m<0) return 0;\n    if(n<0) return 0;\n    return (ll)fac[n]*inv[m]%P*inv[n-m]%P;\n}\nvoid init_C()\n{\n    fac[0]=1;\n    for(int i=1;i<=MX;++i)  fac[i]=(ll)fac[i-1]*i%P;\n    inv[MX]=ksm(fac[MX],P-2);\n    for(int i=MX;i>=1;--i)  inv[i-1]=(ll)inv[i]*i%P;\n}\nint T;\nint n,m;\nint a[N];\nvoid solve()\n{\n\tn=read();\tll ans=0;\tll tot=0;\n\tfor(int i=1;i<=n;++i)\ta[i]=read();\n\tbool flag=false;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tans+=abs(a[i]);\n\t\tif(a[i]>0)\tflag=false;\n\t\tif(a[i]<0)\n\t\t{\n\t\t\tif(!flag)\tflag=true,++tot;\n\t\t}\n\t}\n\tprintf(\"%lld %lld\\n\",ans,tot);\n}\nint main()\n{\n\tint T=read();\n\twhile(T--)\tsolve();\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "two pointers"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Long Long.json",
    "editorial_link": "https://codeforces.com//blog/entry/117468",
    "editorial": "We can delete all zeros from the array, and it won\u00e2\u0080\u0099t affect on\r\nanswer.Maximum sum is . Minimum number of operations we should do number\r\nof continuous subsequences with negative values of elements.Total\r\ncomplexity:\r\n"
}