{
    "link": "https://codeforces.com//contest/2036/problem/C",
    "problemId": "2997670",
    "problem_idx": "C",
    "shortId": "2036C",
    "contest_number": "2036",
    "problem_submissions": {
        "G": [
            289568495,
            289592157,
            289591763,
            289595974,
            289727611,
            290290543
        ],
        "F": [
            289537821,
            289522926,
            289537324,
            289559326,
            289512509,
            289515984,
            289510795,
            289521272,
            289526918,
            289534575,
            289534164,
            289556542,
            289531934,
            289514943,
            289521852,
            289521308,
            289566779,
            289543749,
            289533352
        ],
        "E": [
            289519379,
            289513483,
            289516754,
            289537406,
            289502565,
            289497006,
            289514977,
            289504007,
            289502653,
            289492035,
            289506214,
            289517949,
            289508708,
            289505547,
            289524899,
            289498786,
            289538409,
            289511145,
            289522074,
            289542250
        ],
        "D": [
            289494755,
            289496973,
            289502561,
            289508569,
            289485075,
            289486449,
            289493423,
            289495061,
            289486975,
            289488146,
            289499112,
            289494333,
            289489388,
            289496285,
            289527032,
            289505896,
            289497283,
            289504013,
            289505465
        ],
        "C": [
            289479986,
            289485425,
            289473871,
            289486850,
            289474317,
            289472689,
            289477260,
            289486030,
            289480295,
            289481264,
            289478991,
            289479671,
            289477258,
            289477016,
            289506161,
            289489963,
            289490617,
            289481449,
            289485496
        ],
        "B": [
            289473268,
            289473263,
            289467611,
            289472113,
            289470722,
            289468547,
            289468418,
            289478505,
            289474994,
            289471830,
            289469932,
            289465642,
            289466472,
            289469818,
            289476408,
            289471072,
            289468104,
            289473322,
            289472255
        ],
        "A": [
            289464981,
            289463574,
            289462739,
            289463265,
            289465451,
            289464109,
            289462932,
            289467937,
            289463249,
            289464614,
            289463267,
            289462869,
            289462845,
            289463088,
            289467021,
            289463344,
            289462625,
            289465258,
            289463000
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135849",
    "editorial": "TutorialFirst, in a naive way, letâs count the number of times 1100\r\noccurs in .Then for each of queries we will update : consider the\r\nsubstring before changing and find the number of times that 1100 occurs\r\nin it. Then update and similarly find the number of times that 1100\r\noccurs in after applying the query.Thus, by doing , we get the number of\r\ntimes that 1100 occurs in after the query is applied. If , the answer to\r\nthe query is YES , otherwise it is NO .Complexity:\r\n",
    "name": "C. Anya and 1100",
    "statement": "While rummaging through things in a distant drawer, Anya found a\r\nbeautiful string s consisting only of zeros and ones.Now she wants to\r\nmake it even more beautiful by performing q operations on it.Each\r\noperation is described by two integers i (1\r\nle i\r\nle |s|) and v (v\r\nin\r\n{0, 1\r\n}) and means that the i-th character of the string is assigned the value\r\nv (that is, the assignment s_i = v is performed).But Anya loves the\r\nnumber 1100, so after each query, she asks you to tell her whether the\r\nsubstring \"\" is present in her string (i.e. there exist such 1\r\nle i\r\nle |s| - 3 that s_{i}s_{i + 1}s_{i + 2}s_{i + 3} =\r\ntexttt{1100}).\r\n",
    "solutions": [
        "#include <iostream>#include <cmath>#include <vector>#include <algorithm>#include <map>#include <set>#include <bitset>#include <queue>#define ff first#define ss secondtypedef long long ll;using namespace std;const int N = 3e5 + 10;void solve() {\tstring s;\tcin >> s;\tint n = (int)s.size();\ts = \"#\" + s;\tint x = 0;\tfor (int i = 1; i <= n - 3; i++) {\t\tif (s[i] == '1' && s[i + 1] == '1' && s[i + 2] == '0' && s[i + 3] == '0') x++;\t}\tint q;\tcin >> q;\twhile (q--) {\t\tint pos;\t\tchar e;\t\tcin >> pos >> e;\t\tfor (int i = max(pos - 3, 1); i <= min(pos, n - 3); i++) {\t\t\tif (s[i] == '1' && s[i + 1] == '1' && s[i + 2] == '0' && s[i + 3] == '0') x--;\t\t}\t\ts[pos] = e;\t\tfor (int i = max(pos - 3, 1); i <= min(pos, n - 3); i++) {\t\t\tif (s[i] == '1' && s[i + 1] == '1' && s[i + 2] == '0' && s[i + 3] == '0') x++;\t\t}\t\tif (x) cout << \"YES\\n\";\t\telse cout << \"NO\\n\";\t}}int main() {\tint t;\tcin >> t;\twhile (t--) {\t\tsolve();\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Anya and 1100.json",
    "hint": [
        "Hint With each query, to track the change in the presence of “1100” in a row, you don't have to go through the entire row — you can check just a few neighboring cells."
    ]
}