{
    "link": "https://codeforces.com//contest/1183/problem/D",
    "problemId": "363544",
    "problem_idx": "D",
    "shortId": "1183D",
    "contest_number": "1183",
    "problem_submissions": {
        "F": [
            56110414,
            56117769,
            56118798,
            66995010,
            56101090,
            56148730,
            138937022,
            56112000
        ],
        "E": [
            56097887,
            56113357,
            56105226,
            56104643,
            56101888,
            56093414,
            56111233,
            56103293,
            56103078,
            56104487,
            56109659,
            56103780,
            56109510,
            56105711,
            56106565
        ],
        "H": [
            56097697,
            56113570,
            56105740,
            66667587,
            56101720,
            56109616,
            56111456,
            56108240,
            56103716,
            56105330,
            56106283,
            56109916,
            56106467
        ],
        "G": [
            56092005,
            56104084,
            56123883,
            56112098,
            56110719,
            56101673,
            56117506,
            56115328,
            59651445,
            56098320,
            138935815
        ],
        "D": [
            56088183,
            56091373,
            56093338,
            56090767,
            56087401,
            56085787,
            56095559,
            56092469,
            56089592,
            56093522,
            56092856,
            56094699,
            56091582,
            56093930,
            56090315,
            56096981,
            56094561
        ],
        "C": [
            56084972,
            56088064,
            56089777,
            56097980,
            56081517,
            56107044,
            56091000,
            56085493,
            56085540,
            56091330,
            56090250,
            56088370,
            56086037,
            56089714,
            56086123
        ],
        "B": [
            56081558,
            56084832,
            56083510,
            59085942,
            56083305,
            56103674,
            56097880,
            56086061,
            56083097,
            56081660,
            56086915,
            56086136,
            56085025,
            56087421,
            56081700,
            56084942,
            56082678
        ],
        "A": [
            56080149,
            56079717,
            56079676,
            57264074,
            56080781,
            56088646,
            56082120,
            56081323,
            56079728,
            56079791,
            56082274,
            56082965,
            56079889,
            56079932,
            56079796
        ]
    },
    "name": "D. Candy Box  easy version ",
    "statement": "There are n candies in a candy box. The type of the i-th candy is a_i (1\r\nle a_i\r\nle n).You have to prepare a gift using some of these candies with the\r\nfollowing restriction: the numbers of candies of each type presented in\r\na gift should be all distinct (i. e. for example, a gift having two\r\ncandies of type 1 and two candies of type 2 is bad). . It is also\r\npossible that of some types will be taken to a gift.Your task is to find\r\nout the possible size of the single gift you can prepare using the\r\ncandies you have.You have to answer q independent queries.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\ntypedef long long ll;\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\nusing namespace std;\nll t,n,i,a[202020],d[202020],e[202020],has,sisa,z[202020];\nint main()\n{\n\tios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n\tcin>>t;\n\twhile(t--)\n\t{\n\t\tvector<ll> isi;\n\t\tcin>>n;\n\t\tfor(i=1;i<=n;i++)\n\t\t{\n\t\t\tcin>>a[i];\n\t\t\td[a[i]]++;\n\t\t\te[a[i]]++;\n\t\t}\n\t\tfor(i=1;i<=n;i++)\n\t\t{\n\t\t\td[a[i]]--;\n\t\t\tif(d[a[i]]==0)\n\t\t\t\tz[e[a[i]]]++;\n\t\t}\n\t\thas=0;\n\t\tsort(isi.begin(),isi.end());\n\t\treverse(isi.begin(),isi.end());\n\t\tsisa=0;\n\t\tfor(i=n;i>=1;i--)\n\t\t{\n\t\t\tz[i]+=sisa;\n\t\t\tif(z[i])\n\t\t\t{\n\t\t\t\thas+=i;\n\t\t\t\tsisa=z[i]-1;\n\t\t\t}\n\t\t\telse\n\t\t\t\tsisa=0;\n\t\t}\n\t\tcout<<has<<\"\\n\";\n\t\tfor(i=1;i<=n;i++)\n\t\t{\n\t\t\td[a[i]]=0;\n\t\t\te[a[i]]=0;\n\t\t\tz[i]=0;\n\t\t}\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Candy Box  easy version .json",
    "editorial_link": "https://codeforces.com//blog/entry/68003",
    "editorial": "Let\u00e2\u0080\u0099s calculate the array where is the number of candies of the -th\r\ntype. Let\u00e2\u0080\u0099s sort it in non-ascending order.Obviously, now we can take\r\nbecause this is the maximum number of candies of some type in the array.\r\nLet be the last number of candies we take. Initially it equals (and the\r\nanswer is initially the same number). Then let\u00e2\u0080\u0099s iterate over all values\r\nof in order from left to right. If the current number is greater than or\r\nequal to the last taken number of candies then we cannot take more\r\ncandies than (because we iterating over values of in non-ascending\r\norder), so let\u00e2\u0080\u0099s increase answer by and set . Otherwise and we can take\r\nall candies of this type, increase the answer by and set .\r\n"
}