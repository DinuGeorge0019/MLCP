{
    "link": "https://codeforces.com//contest/1593/problem/D2",
    "problemId": "1142165",
    "problem_idx": "D2",
    "shortId": "1593D2",
    "contest_number": "1593",
    "problem_submissions": {
        "G": [
            131796315,
            131809860,
            131836830,
            131839082,
            131841650,
            131846524,
            131852907,
            131782296,
            148479901,
            131828563
        ],
        "D2": [
            131785134,
            131788443,
            131789598,
            131915775,
            131805880,
            131823322,
            131831578,
            131821525,
            131793982,
            131849437,
            131784594,
            131791388,
            131828383,
            131836476,
            131831664,
            131825743,
            131905244,
            131794334
        ],
        "F": [
            131781426,
            131837226,
            131815253,
            131811669,
            131876285,
            131849937,
            131847427,
            131845860,
            131816994,
            131855037,
            131787838,
            131800685,
            131891194
        ],
        "E": [
            131774861,
            131775908,
            131796997,
            131786728,
            131876206,
            131792098,
            131797221,
            131825650,
            131807172,
            131832634,
            131793728,
            131840729,
            131794124,
            131808830,
            131787792,
            131786397,
            131783883,
            131789053,
            223850329,
            131905293,
            131805482
        ],
        "B": [
            131755249,
            131755158,
            131757455,
            131754198,
            131760377,
            131758125,
            131761538,
            131761685,
            131807386,
            131800607,
            131823956,
            131758842,
            131777000,
            131762147,
            131758359,
            131757156,
            131752418,
            131759279,
            131754084,
            131765706
        ],
        "C": [
            131755086,
            131765317,
            131761314,
            131762977,
            131768274,
            131765107,
            131772896,
            131769864,
            131760280,
            131765951,
            131827956,
            131767746,
            131761402,
            131771022,
            131806450,
            131797380,
            131767699,
            131763033,
            131759309,
            131766132,
            131759703,
            131774485
        ],
        "D1": [
            131754873,
            131770215,
            131766394,
            131756595,
            131776207,
            131772281,
            131769846,
            131778601,
            131766158,
            131773159,
            131795293,
            131772976,
            131778104,
            131776921,
            131775662,
            131772715,
            131771125,
            131769653,
            131765142,
            131779945
        ],
        "A": [
            131752757,
            131748062,
            131750155,
            131748058,
            131749835,
            131748696,
            131748309,
            131753208,
            131799940,
            131756190,
            131825544,
            131751230,
            131754683,
            131752419,
            131750607,
            131749631,
            131748206,
            131752432,
            131748594,
            131755250
        ]
    },
    "name": "D2. Half of Same",
    "statement": "Polycarp has an array of n (n is even) integers a_1, a_2,\r\ndots, a_n. Polycarp conceived of a positive integer k. After that,\r\nPolycarp began performing the following operations on the array: take an\r\nindex i (1\r\nle i\r\nle n) and reduce the number a_i by k.After Polycarp performed some\r\n(possibly zero) number of such operations, it turned out that of the\r\nnumbers in the array became the same. Find the maximum k at which such a\r\nsituation is possible, or print -1 if such a number can be arbitrarily\r\nlarge.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 44;\n\nint a[N];\n\nint main() {\n\tios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\tint test;\n\n\tcin >> test;\n\twhile(test --) {\n\t\tint n;\n\t\tcin >> n;\n\t\tint min_a = 1e9;\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tcin >> a[i];\n\t\t}\n\t\tint res = 0;\n\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tvector<int> v;\n\t\t\tv.push_back(0);\n\t\t\tfor(int j = 0; j < n; j ++) {\n\t\t\t\tif(a[j] >= a[i] && j != i) v.push_back(a[j] - a[i]);\n\t\t\t}\n\t\t\tif(v.size() + 1 < n / 2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tset<int> s;\n\t\t\tint cnt_0 = 0;\n\t\t\tfor(int j : v) {\n\t\t\t\tif(!j) {\n\t\t\t\t\tcnt_0 ++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor(int k = 1; k * k <= j; k ++) {\n\t\t\t\t\tif(j % k == 0) {\n\t\t\t\t\t\ts.insert(k);\n\t\t\t\t\t\ts.insert(j / k);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cnt_0 >= n / 2) {\n\t\t\t\tres = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor(auto it = s.rbegin(); it != s.rend(); it ++) {\n\t\t\t\tint d = *it;\n\t\t\t\tint tmp = 0;\n\t\t\t\tfor(int j : v) {\n\t\t\t\t\tif(j % d == 0) {\n\t\t\t\t\t\ttmp ++;\n\t\t\t\t\t\tif(tmp == n / 2) break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(tmp == n / 2) {\n\t\t\t\t\tres = max(res, d);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t\tcout << res << '\\n';\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math",
        "number theory"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D2. Half of Same.json",
    "editorial_link": "https://codeforces.com//blog/entry/96034",
    "editorial": "can be arbitrarily large if and only if at least half of the numbers in\r\nthe array are the same. In this case, we can choose any number and\r\nsubtract it from all numbers, for example, exactly once.Letâs iterate\r\nover the element , it will be the minimum among the numbers that we want\r\nto make the same. Letâs calculate the number of numbers in the array\r\nthat are equal to this element. If this number is at least , then the\r\nanswer is . Otherwise, we will iterate over numbers which are strictly\r\ngreater than the selected minimum, and, for each number, we will iterate\r\nover the divisors of the number . For each of the found divisors, letâs\r\ncalculate the number of for which this divisor was found. Among all such\r\ndivisors for which the sum of the found number and the number of numbers\r\nequal to is greater than or equal to , we will choose the maximum one.\r\nThe greatest found divisor will be the desired . This solution works in\r\n(where is the absolute value of the maximum on the array).\r\n",
    "hint": []
}