{
    "link": "https://codeforces.com//contest/1157/problem/C2",
    "problemId": "336206",
    "problem_idx": "C2",
    "shortId": "1157C2",
    "contest_number": "1157",
    "problem_submissions": {
        "G": [
            53354096,
            53391965,
            53390867
        ],
        "F": [
            53343664,
            53360675,
            53361624,
            53364566,
            53357704,
            53359903,
            53361988,
            53361938,
            53362589
        ],
        "D": [
            53340379,
            53350471,
            53354170,
            53343980,
            53350301,
            53365956,
            53362535,
            53355323,
            53360133,
            53358327,
            53360447,
            53351641,
            53363339,
            53362459,
            53373877,
            53363141,
            53362698,
            53354329,
            53341889,
            53357655
        ],
        "E": [
            53335726,
            53354513,
            53342966,
            53357089,
            53326973,
            53337039,
            53343435,
            53334056,
            53346417,
            53344822,
            53341358,
            53352604,
            53344787,
            53355380,
            53351750,
            53373916,
            53343916,
            53337525,
            53354885,
            53347360
        ],
        "C2": [
            53332882,
            53338253,
            53340523,
            53360290,
            53337905,
            53344895,
            53348129,
            53339890,
            53350634,
            53347512,
            53397823,
            53341730,
            53345378,
            53373863,
            53335877,
            53380825,
            53366273,
            53365566,
            53365157,
            53364677,
            53340346
        ],
        "C1": [
            53329688,
            53331267,
            53335293,
            53360618,
            53332134,
            53331740,
            53332999,
            53331325,
            53335930,
            53335387,
            53334852,
            53338537,
            53337135,
            53345489,
            53379146,
            53336165,
            53333762,
            53348248,
            53334974
        ],
        "B": [
            53326629,
            53325954,
            53329930,
            53342495,
            53324816,
            53325500,
            53426742,
            53328079,
            53325908,
            53330675,
            53327539,
            53330292,
            53325880,
            53330636,
            53328572,
            53373831,
            53329602,
            53328749,
            53327714
        ],
        "A": [
            53324361,
            53324269,
            53324359,
            53326455,
            53324227,
            53324256,
            53426571,
            53324495,
            53324422,
            53326078,
            53325046,
            53327429,
            53324265,
            53327238,
            53324911,
            53373799,
            53324760,
            53341107,
            53324803,
            53324767
        ]
    },
    "name": "C2. Increasing Subsequence  hard version ",
    "statement": ".You are given a sequence a consisting of n integers.You are making a\r\nsequence of moves. During each move you must take either the leftmost\r\nelement of the sequence or the rightmost element of the sequence, write\r\nit down and remove it from the sequence. Your task is to write down a\r\nincreasing sequence, and among all such sequences you should take the\r\nlongest (the length of the sequence is the number of elements in it).For\r\nexample, for the sequence [1, 2, 4, 3, 2] the answer is 4 (you take 1\r\nand the sequence becomes [2, 4, 3, 2], then you take the rightmost\r\nelement 2 and the sequence becomes [2, 4, 3], then you take 3 and the\r\nsequence becomes [2, 4] and then you take 4 and the sequence becomes\r\n[2], the obtained increasing sequence is [1, 2, 3, 4]).\r\n",
    "solutions": [
        "#include <unordered_map>\n#include <unordered_set>\n#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <climits>\n#include <iomanip>\n#include <bitset>\n#include <vector>\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <ctime>\n#include <set>\n#include <map>\nusing namespace std;\n#define il inline\n#define elif else if\n\n// Type\n#define ld double\n#define ll long long\n#define ull unsigned ll\n\n// Vector\n#define vc vector\n#define Pb push_back\n#define Pf push_front\n#define All(x) x.begin(),x.end()\n\n// Memory\n#define Ms(_data) memset(_data,0,sizeof(_data))\n#define Msn(_data,_num) memset(_data,_num,sizeof(_data))\n\n// Template\n#define _cl class\n#define _tp template\n#define _tyn typename\n\n// Pair\n#define Mp make_pair\n#define F first\n#define S second\n#define pii pair<int,int>\n#define pli pair<ll,int>\n#define pil pair<int,ll>\n#define pll pair<ll,ll>\n\n// Read\nstruct InputReader{\n\t#define bs 1000001\n\tchar buf[bs]; int p;\n\til InputReader(){ p = bs; }\n\til void Flush(){ p = 0; fread(buf,1,bs,stdin); }\n\til char C(){ if(p >= bs) Flush(); return buf[p++]; }\n\til char Readnum(){ char ch = C(); while( !isdigit(ch) && ch != '-' ) ch = C(); return ch; }\n\til void Readalpha( char &c ){ c = C(); while( !isalpha(c) ) c = C(); }\n\tint operator() (){\n\t\tint ans = 0, fu = 1; char ch = Readnum();\n\t\tif( ch == '-' ) fu = -1, ch = C();\n\t\twhile( ch >= '0' && ch <= '9' ){\n\t\t\tans = ans*10 + ch-'0';\n\t\t\tch = C();\n\t\t}\n\t\treturn ans * fu;\n\t}\n\tll Readll(){\n\t\tll ans = 0LL, fu = 1LL; char ch = Readnum();\n\t\tif( ch == '-' ) fu = -1LL, ch = C();\n\t\twhile( ch >= '0' && ch <= '9' ){\n\t\t\tans = ans*10LL + ch-'0';\n\t\t\tch = C();\n\t\t}\n\t\treturn ans * fu;\n\t}\n\til void Readstring( string &x ){\n\t\tx.clear(); char ch = C();\n\t\twhile( !isdigit(ch)  &&  !isalpha(ch)  &&  ch != '#'  &&  ch != '.' ) ch = C();\n\t\twhile( isdigit(ch)  ||  isalpha(ch)  ||  ch == '#'  ||  ch == '.' ){\n\t\t\tx += ch;\n\t\t\tch = C();\n\t\t}\n\t}\n\til void Readchstring( char s[] ){\n\t\tint len = 0; char ch = C();\n\t\twhile( !isdigit(ch)  &&  !isalpha(ch)  /*&&  ch != '*'  &&  ch != '?'*/ ) ch = C();\n\t\twhile( isdigit(ch)  ||  isalpha(ch)  /*||  ch == '*'  ||  ch == '?'*/ ){\n\t\t\ts[len++] = ch;\n\t\t\tch = C();\n\t\t}\n\t\ts[len] = '\\0';\n\t}\n\til void Specialread( char &c ){\n\t\tc = C();\n\t\twhile( !isdigit(c) && !isalpha(c) && c != '#'  &&  c != '.'  &&  c != '='  &&  c != 'B' ) c = C();\n\t}\n\t#undef bs\n}In;\nil void Read( int &x ){ x = In(); }\nil void Read( int &x, int &y ){ x = In(); y = In(); }\nil void Read( int &x1 , int &x2 , int &x3 ){ x1 = In(); x2 = In(); x3 = In(); }\nil void Read( int &x1 , int &x2 , int &x3 , int &x4 ){ x1 = In(); x2 = In(); x3 = In(); x4 = In(); }\nil void Read( ll &x ){ x = In.Readll(); }\nil void Read( ll &x, ll &y ){ x = In.Readll(); y = In.Readll(); }\nil void Read( ll &x1 , ll &x2 , ll &x3 ){ x1 = In.Readll(); x2 = In.Readll(); x3 = In.Readll(); }\nil void Read( ll &x1 , ll &x2 , ll &x3 , ll &x4 ){ x1 = In.Readll(); x2 = In.Readll(); x3 = In.Readll(); x4 = In.Readll(); }\n#define iRead(k) int k; Read(k);\n#define iRead2(a,b) iRead(a); iRead(b);\n#define iRead3(a,b,c) iRead2(a,b); iRead(c);\n#define iRead4(a,b,c,d) iRead2(a,b); iRead2(c,d);\n#define lRead(k) ll k; Read(k);\n#define lRead2(a,b) lRead(a); lRead(b);\n#define lRead3(a,b,c) lRead2(a,b); lRead(c);\n#define lRead4(a,b,c,d) lRead2(a,b); lRead2(c,d);\n\n// File\n#define Fin(a) freopen(a,\"r\",stdin)\n#define Fout(a) freopen(a,\"w\",stdout)\nil void FILEIO(){\n\t#ifdef intLSY\n\t\tFin(\"in.in\");\n\t#endif\n}\nil void FILEIO( string pname ){\n\tFin((pname+\".in\").c_str());\n\t#ifndef intLSY\n\t\tFout((pname+\".out\").c_str());\n\t#endif\n}\nvoid Printtime(){\n\t#ifdef intLSY\n\t\tdouble _timeuse = clock()* 1000.0 / CLOCKS_PER_SEC;\n\t\tprintf(\"\\n\\nTime usage:\\n%.0lf ms\\n\",_timeuse);\n\t#endif\n}\nvoid END(){ Printtime(); exit(0); }\n_tp<_tyn T>void END( T mes ){ cout << mes << endl; END(); }\n\n\n// Loop\n#define For(i,j) for( int (i) = 1 ; (i) <= (j) ; ++(i) )\n#define For0(i,j) for( int (i) = 0 ; (i) < (j) ; ++(i) )\n#define Forx(i,j,k) for( int (i) = (j) ; (i) <= (k) ; ++(i) )\n#define Forstep(i,j,k,st) for( int (i) = (j) ; (i) <= (k) ; (i) += (st) )\n#define fOR(i,j) for( int (i) = (j) ; (i) >= 1 ; --(i) )\n#define fOR0(i,j) for( int (i) = (j)-1 ; (i) >= 0 ; --(i) )\n#define fORx(i,j,k) for( int (i) = (k) ; (i) >= (j) ; --(i) )\n\n\n// Debug\n#define B cerr << \"BreakPoint\" << endl;\n#define O(x) cerr << #x << \" \" << x << endl;\n#define O_(x) cerr << #x << \" \" << x << \"  \";\n#define ERR(x) cerr << \"ERR! #\" << x << endl;\n#define Msz(x) cerr << \"Sizeof \" << #x << \" \" << sizeof(x)/1024/1024 << \" MB\" << endl;\n_tp<_tyn T>void Print( T a[] , int s , int t , char sp = ' ' , char ed = '\\n' ){\n\tif( s > t ) return;\n\tfor( int i = s ; i < t ; i++ )\n\t\tcout << a[i] << sp;\n\tcout << a[t] << ed;\n\tcout.flush();\n}\n_tp<_tyn T>void Print( T a , int s = 0 , int t = -1 , char sp = ' ' , char ed = '\\n' ){\n\tif( t == -1 ) t = a.size()-1;\n\tfor( int i = s ; i <= t ; i++ )\n\t\tcout << a[i] << sp;\n\tcout << ed;\n\tcout.flush();\n}\n\n\n// Optimize\n#define abs(a) ((a)<0?(~(a)+1):(a))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\n//#define swap(a,b) {a=a^b;b=a^b;a=a^b;}\n#define Mymax(a,b) (a) = max((a),(b))\n#define Mymin(a,b) (a) = min((a),(b))\n#define INF (0x3f3f3f3f)\n#define LINF ((long long)(0x3f3f3f3f3f3f3f3f))\n#define MOD 998244353\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n#define MAXN 262144\n\nint n;\nint a[MAXN];\nint tol[MAXN], tor[MAXN];\n\nint main(){\n\tFILEIO();\n\n\tRead(n);\n\tFor(i,n) Read(a[i]);\n\n\tfOR(i,n) tol[i] = a[i] < a[i+1] ? tol[i+1]+1 : 1;\n\tFor(i,n) tor[i] = a[i] < a[i-1] ? tor[i-1]+1 : 1;\n\n\tint l = 1, r = n;\n\tstring ans = \"\";\n\tint last = -INF;\n\tFor(i,n){\n\t\tbool use_r = 0;\n\t\tif( max(a[l],a[r]) <= last ) break;\n\t\tif( a[l] == a[r] ){\n\t\t\tif( tol[l] > tor[r] ){\n\t\t\t\twhile( ans.length() != n and a[l] > last ){\n\t\t\t\t\tlast = a[l];\n\t\t\t\t\t++l;\n\t\t\t\t\tans += 'L';\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\twhile( ans.length() != n and a[r] > last ){\n\t\t\t\t\tlast = a[r];\n\t\t\t\t\t--r;\n\t\t\t\t\tans += 'R';\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif( a[l] < a[r] ){\n\t\t\tif( a[l] <= last ) use_r = 1;\n\t\t}else{\n\t\t\tif( a[r] > last ) use_r = 1;\n\t\t}\n\t\tif(use_r){\n\t\t\tlast = a[r];\n\t\t\t--r;\n\t\t\tans += 'R';\n\t\t}else{\n\t\t\tlast = a[l];\n\t\t\t++l;\n\t\t\tans += 'L';\n\t\t}\n\t}\n\tcout << ans.length() << endl;\n\tcout << ans << endl;\n\n\tEND();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C2. Increasing Subsequence  hard version .json",
    "editorial_link": "https://codeforces.com/blog/entry/66737",
    "editorial": "The solution of the previous problem works for this problem also. Almost\r\nworks. What if the leftmost element is equal the rightmost element?\r\nWhich one should we choose? Let\u00e2\u0080\u0099s analyze it. If we take the leftmost\r\nelement then we will take any other element from the right, and vice\r\nversa. So we can\u00e2\u0080\u0099t meet this case more than once because after meeting\r\nit once we can take only leftmost elements or only rightmost elements.\r\nThe only thing we should understand is which of these two cases is\r\nbetter (take the leftmost element or take the rightmost element). To do\r\nit we can just iterate from left to right and calculate the number of\r\nelements we can take if we will take the leftmost element each time. If\r\nwe cannot take the current element then just stop the cycle. And do the\r\nsame thing for the rightmost element and take the best case.\r\n"
}