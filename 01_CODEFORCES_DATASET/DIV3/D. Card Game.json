{
    "link": "https://codeforces.com//contest/1932/problem/D",
    "problemId": "2483351",
    "problem_idx": "D",
    "shortId": "1932D",
    "contest_number": "1932",
    "problem_submissions": {
        "F": [
            247041710,
            247046104,
            247061921,
            247064848,
            247065969,
            247067691,
            247069162,
            247061542,
            247047981,
            247066270,
            247064434,
            247030399,
            247061453,
            247062334,
            247071817,
            247074345,
            247065688,
            247070314,
            247059158
        ],
        "E": [
            247027158,
            247035724,
            247041508,
            247047392,
            247034566,
            247041281,
            247042901,
            247046269,
            247024107,
            247043959,
            247047309,
            247065699,
            247024211,
            247033451,
            247040047,
            247039052,
            247047772,
            247051378,
            247048000
        ],
        "D": [
            247025048,
            247024422,
            247027652,
            247025385,
            247027600,
            247026819,
            247026306,
            247030155,
            247057812,
            247034591,
            247024028,
            247050558,
            247039827,
            247050562,
            247026148,
            247035436,
            247033238,
            247031618,
            247035376
        ],
        "C": [
            247015841,
            247009093,
            247007805,
            247004912,
            247003665,
            247007946,
            247004168,
            247011243,
            247008047,
            247006061,
            247009525,
            247006826,
            247014290,
            247003444,
            247011933,
            247011062,
            247018803,
            247012040,
            247018641
        ],
        "B": [
            247001265,
            246998420,
            246995287,
            246992797,
            246996723,
            246996283,
            246995886,
            247000182,
            247000282,
            246995830,
            246996405,
            246997168,
            246998810,
            246995354,
            247001435,
            246999756,
            247001109,
            246996459,
            247006888
        ],
        "A": [
            246992414,
            246989927,
            246990007,
            246989302,
            246989500,
            246989572,
            246991281,
            246989684,
            246995787,
            246990634,
            246991174,
            246992575,
            246993925,
            246989365,
            246994593,
            246993034,
            246991641,
            246989247,
            246991878
        ],
        "G": [
            247104441,
            247824611,
            247147433,
            247796255
        ]
    },
    "name": "D. Card Game",
    "statement": "Two players are playing an online card game. The game is played using a\r\n32-card deck. Each card has a suit and a rank. There are four suits:\r\nclubs, diamonds, hearts, and spades. We will encode them with characters\r\n\u201d, \u201d, \u201d, and \u201d, respectively. And there are 8 ranks, in increasing\r\norder: \u201d, \u201d, \u201d, \u201d, \u201d, \u201d, \u201d, \u201d.Each card is denoted by two letters: its\r\nrank and its suit. For example, the 8 of Hearts is denoted as .At the\r\nbeginning of the game, one suit is chosen as the .In each round, players\r\nmake moves like this: the first player places one of his cards on the\r\ntable, and the second player must beat this card with one of their\r\ncards. After that, both cards are moved to the discard pile.A card can\r\nbeat another card if both cards have the same suit and the first card\r\nhas a higher rank than the second. For example, can beat . Additionally,\r\na trump card can beat any non-trump card, regardless of the rank of the\r\ncards, for example, if the trump suit is clubs (\u201d), then can beat . Note\r\nthat trump cards can be beaten only by the trump cards of higher\r\nrank.There were n rounds played in the game, so the discard pile now\r\ncontains 2n cards. You want to reconstruct the rounds played in the\r\ngame, but the cards in the discard pile are shuffled. Find any possible\r\nsequence of n rounds that might have been played in the game.\r\n",
    "solutions": [
        "//Be Name KHODA\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n#define pb push_back\n#define pp pop_back\n#define lb lower_bound\n#define ub upper_bound\n#define cl clear\n#define bg begin\n#define arr(x) array<int , x>\n#define endl '\\n'\n\nint t , n , hk;\nvector<arr(2)> a;\nvector<int> sts[4];\nvector<arr(4)> o;\n\nint main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    cin >> t;\n    for(int ii = 0 ; ii < t ; ii++){\n        char d;\n        cin >> n >> d;\n        if(d == 'C') hk = 0;\n        else if(d == 'D') hk = 1;\n        else if(d == 'H') hk = 2;\n        else hk = 3;\n        a.cl() , o.cl() , sts[0].cl() , sts[1].cl() , sts[2].cl() , sts[3].cl();\n        for(int i = 0 ; i < n + n ; i++){\n            int d1;\n            char d2;\n            cin >> d1 >> d2;\n            int dd = 3;\n            if(d2 == 'C') dd = 0;\n            else if(d2 == 'D') dd = 1;\n            else if(d2 == 'H') dd = 2;\n            a.pb({d1 , dd});\n        }\n        vector<int> odd;\n        for(auto el : a) sts[el[1]].pb(el[0]);\n        for(int i = 0 ; i < 4 ; i++){\n            sort(sts[i].bg() , sts[i].end());\n            if(i == hk) continue;\n            if((((int)sts[i].size()) & 1)) odd.pb(i);\n            for(int j = 0 ; j < (int)sts[i].size() - 1 ; j += 2){\n                o.pb({i , sts[i][j] , i , sts[i][j + 1]});\n            }\n        }\n        bool flg = 1;\n        if((int)odd.size() > (int)sts[hk].size()) flg = 0;\n        else{\n            int inx = 0;\n            for(auto el : odd) o.pb({el , sts[el].back() , hk , sts[hk][inx++]});\n            // cout << inx << \"!\\n\";\n            for(int i = inx ; i < (int)sts[hk].size() - 1 ; i += 2) o.pb({hk , sts[hk][i] , hk , sts[hk][i + 1]});\n        }\n        // cout << hk << \"::\\n\";\n        if(!flg) cout << \"IMPOSSIBLE\\n\";\n        else{\n            for(auto el : o){\n                cout << el[1];\n                if(el[0] == 0) cout << \"C \";\n                else if(el[0] == 1) cout << \"D \";\n                else if(el[0] == 2) cout << \"H \";\n                else cout << \"S \";\n                cout << el[3];\n                if(el[2] == 0) cout << \"C\\n\";\n                else if(el[2] == 1) cout << \"D\\n\";\n                else if(el[2] == 2) cout << \"H\\n\";\n                else cout << \"S\\n\";\n            }\n        }\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Card Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/126196",
    "editorial": "Let\u00e2\u0080\u0099s start by solving the problem separately for each suit, except for\r\nthe trump suit. To do this, we will form the maximum possible number of\r\npairs, after which there will be no more than one card of this suit\r\nwithout a pair. Thus, we will need the minimum number of trump cards to\r\nbeat the non-trump cards.Now we will beat each of the remaining cards\r\nwith a trump. If there are not enough trump cards, there is no\r\nsolution.All that remains is to solve the problem for the remaining\r\ntrumps, just as at the beginning of the solution. Note that since the\r\ntotal number of cards is even, and the rest of cards are paired, there\r\nwill be no extra trump card left.\r\n"
}