{"link": "https://codeforces.com//contest/977/problem/E", "problemId": "181256", "problem_idx": "E", "shortId": "977E", "contest_number": "977", "problem_submissions": {"F": [37953040, 37954853, 37956923, 37956444, 37956668, 37955836, 37936561, 37948514, 37950875, 37954682, 37954155, 37963825, 37947599, 37954392, 37949871, 37951784, 37954414, 37960538, 37955846, 37949841], "E": [37949370, 37951257, 37951081, 37951485, 37948712, 37951230, 37942528, 37944878, 37947562, 38096112, 37946372, 37950654, 37948745, 37952883, 37949399, 37959345, 37958962, 37949557, 38007916, 37947057, 37944768, 37952160, 37971056, 37970300, 37954498], "D": [37945678, 37944291, 37945496, 37944981, 37944238, 37945846, 37945470, 37942551, 37956640, 37950668, 37945626, 37943157, 37942510, 37940098, 37964266, 37963856, 37963743, 37943936, 37943935, 37953517, 37949143, 37938125], "C": [37939418, 37938533, 37938833, 37938453, 37937230, 37937332, 37943206, 37937093, 37939874, 37940598, 37939826, 37936805, 37937760, 37936881, 37937722, 37945760, 37936821, 37939453, 37939008, 37934533], "B": [37934918, 37934879, 37935006, 37934743, 37934120, 37933912, 37939150, 37934910, 37935223, 37935851, 37937416, 37932759, 37932271, 37935451, 37935231, 37937590, 37933409, 37934080, 37933977, 37934387], "A": [37931506, 37934128, 37931332, 37932430, 37932516, 37931234, 37933447, 37932411, 37934760, 37932666, 37934427, 37931097, 37932757, 37931225, 37931938, 37935268, 37931464, 37934315, 37931090, 37931415]}, "name": "E. Cyclic Components", "statement": "You are given an undirected graph consisting of n vertices and m edges.\r\nYour task is to find the number of connected components which are\r\ncycles.Here are some definitions of graph theory.An undirected graph\r\nconsists of two sets: set of nodes (called vertices) and set of edges.\r\nEach edge connects a pair of vertices. All edges are bidirectional (i.e.\r\nif a vertex a is connected with a vertex b, a vertex b is also connected\r\nwith a vertex a). An edge can\u2019t connect vertex with itself, there is at\r\nmost one edge between a pair of vertices.Two vertices u and v belong to\r\nthe same connected component if and only if there is at least one path\r\nalong edges connecting u and v.A connected component is a cycle if and\r\nonly if its vertices can be reordered in such a way that: the first\r\nvertex is connected with the second vertex by an edge, the second vertex\r\nis connected with the third vertex by an edge, ... the last vertex is\r\nconnected with the first vertex by an edge, all the described edges of a\r\ncycle are distinct. A cycle doesn\u2019t contain any other edges except\r\ndescribed above. By definition any cycle contains three or more\r\nvertices.\r\n", "solutions": ["/*input\n17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n\n\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define db(a) cerr<<#a<<\" = \"<<a<<'\\n'\nusing namespace std;\n\nconst int maxn = 2e5 + 1000;\nvector<int> adj[maxn];\nbool vis[maxn];\nint n, m, ans;\n\nbool g = 1;\nvoid dfs(int v){\n\tvis[v] = 1;\n\tif(adj[v].size() != 2) g = 0;\n\tfor(auto u : adj[v]){\n\t\tif(vis[u]) continue;\n\t\tdfs(u);\n\t}\n}\nint main(){\n\tcin >> n >> m;\n\tfor(int i=0; i<m; i++){\n\t\tint a, b;\n\t\tcin >> a >> b;\n\t\tadj[a-1].push_back(b-1);\n\t\tadj[b-1].push_back(a-1);\n\t}\n\n\tfor(int i=0; i<n; i++){\n\t\tif(!vis[i]){\n\t\t\tg = 1;\n\t\t\tdfs(i);\n\t\t\tans += g;\n\t\t}\n\t}\n\tcout << ans << endl;\n\n}\n\t"], "input": "", "output": "", "tags": ["dfs and similar", "dsu", "graphs"], "dificulty": "1500", "interactive": false}