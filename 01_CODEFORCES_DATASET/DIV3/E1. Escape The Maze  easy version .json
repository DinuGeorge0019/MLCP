{"link": "https://codeforces.com//contest/1611/problem/E1", "problemId": "1202188", "problem_idx": "E1", "shortId": "1611E1", "contest_number": "1611", "problem_submissions": {"G": [136919698, 136924345, 136928058, 137125236], "D": [136909432, 136888068, 136869096, 136875871, 136873458, 136872703, 136892897, 136874114, 136878310, 136876576, 136982847, 136873530, 136877831, 136975464, 136882777, 136872332, 136878705, 136879548, 136882637, 136884556, 136875995, 136885445], "C": [136904645, 136879235, 136858847, 136855243, 136861532, 136858913, 136876501, 136863657, 136864973, 136856130, 136982821, 136863847, 136868283, 136968820, 136869195, 136914947, 136862897, 136869863, 136862192, 136866525, 136860324, 136867113], "F": [136894434, 136926092, 136925788, 136894423, 136887654, 136898905, 136890793, 136892527, 136897622, 136914432, 136920232, 136982943, 136925360, 136906595, 136919174, 136903703, 136921493, 136918298, 136922728, 136905212, 136914690, 136921349], "E2": [136882323, 136916663, 136883396, 136897153, 136890210, 136911911, 136900593, 136909227, 136895787, 136903952, 136982885, 136896820, 136917983, 136900669, 136888044, 136899257, 136899662, 136904447, 136915639, 136920739, 136912069], "E1": [136879967, 136917077, 136876615, 136879938, 136883345, 136903050, 136866650, 136906813, 136891861, 136885925, 136982868, 136892962, 136889119, 136896344, 136885342, 136893182, 136895321, 136895279, 136895954, 136895593, 136897796], "B": [136853549, 136850019, 136845917, 136846742, 136848311, 136849660, 136855952, 136851245, 136847523, 136844081, 136855128, 136851469, 136843577, 136850258, 136848183, 136852060, 136853372, 136855929, 136847562, 136850988], "A": [136844450, 136846022, 136842097, 136842084, 136843783, 136847130, 136842440, 136842943, 136843633, 136841984, 136846854, 136846415, 136848083, 136843263, 136843590, 136843624, 136845033, 136842923, 136842870, 136846917]}, "name": "E1. Escape The Maze  easy version ", "statement": ".Vlad built a maze out of n rooms and n-1 bidirectional corridors. From\r\nany room u any other room v can be reached through a sequence of\r\ncorridors. Thus, the room system forms an undirected tree.Vlad invited k\r\nfriends to play a game with them.Vlad starts the game in the room 1 and\r\nwins if he reaches a room other than 1, into which exactly one corridor\r\nleads.Friends are placed in the maze: the friend with number i is in the\r\nroom x_i, and no two friends are in the same room (that is, x_i\r\nneq x_j for all i\r\nneq j). Friends win if one of them meets Vlad in any room or corridor\r\nbefore he wins.For one unit of time, each participant of the game can go\r\nthrough one corridor. All participants move at the same time.\r\nParticipants may not move. Each room can fit all participants at the\r\nsame time. Friends know the plan of a maze and intend to win. Vlad is a\r\nbit afraid of their ardor. Determine if he can guarantee victory (i.e.\r\ncan he win in any way friends play).In other words, determine if there\r\nis such a sequence of Vlad\u2019s moves that lets Vlad win in any way friends\r\nplay.\r\n", "solutions": ["#include <bits/stdc++.h>\ntypedef std::pair<int,int> pii;\nint main()\n{\n    int t;\n    std::cin>>t;\n    for(int __=0;__!=t;++__){\n        int N,K;\n        std::cin>>N>>K;\n        std::vector<int> con[N];\n        std::queue<pii> niveis;\n        int tol[N]={};\n        bool visitou[N]={};\n        for(int i=0;i!=K;++i){\n            int x;\n            std::cin>>x;--x;\n            niveis.push({x,0});\n        }\n        for(int i=1;i!=N;++i){\n            int a,b;\n            std::cin>>a>>b;\n            --a;--b;\n            con[a].push_back(b);\n            con[b].push_back(a);\n        }\n        while(niveis.size()){\n            auto _ = niveis.front();\n            niveis.pop();\n            if(visitou[_.first])continue;\n            visitou[_.first]=true;\n            tol[_.first]=_.second;\n            for(auto&x:con[_.first]){\n                niveis.push({x,_.second+1});\n            }\n        }\n        std::queue<pii> bfs2;\n        bfs2.push({0,0});\n        bool vis[N]={};\n        while(bfs2.size()){\n            auto _ = bfs2.front();\n            bfs2.pop();\n            if(tol[_.first]<=_.second)continue;\n            if(vis[_.first])continue;\n            vis[_.first]=true;\n            if(con[_.first].size()==1&&_.first){\n                printf(\"YES\\n\");\n                goto prox;\n            }\n            for(auto&x:con[_.first])bfs2.push({x,_.second+1});\n        }\n        printf(\"NO\\n\");\n        prox:{}\n    }\n}\n"], "input": "", "output": "", "tags": ["dfs and similar", "greedy", "shortest paths", "trees", "two pointers"], "dificulty": "1700", "interactive": false}