{"link": "https://codeforces.com//contest/1945/problem/H", "problemId": "2540243", "problem_idx": "H", "shortId": "1945H", "contest_number": "1945", "problem_submissions": {"G": [252240841, 252250866, 252420396, 252278722, 252525005, 252548158, 252390608, 252567317, 252552741], "E": [252219497, 252219260, 252213387, 252225102, 252223337, 252221318, 252228596, 252237032, 252235746, 252231786, 252228604, 252232973, 252223877, 252227459, 252232102, 252227652, 252224399, 252228708, 252219208, 252234028, 252232706, 252237279, 252235482], "F": [252212698, 252234280, 252233067, 252234341, 252240611, 252234408, 252239611, 252243237, 252244691, 252376596, 252238557, 252239689, 252241751, 252248456, 252244763, 252248686, 252238419, 252251638, 252253337, 252249409, 252253972, 252250630], "C": [252206245, 252207712, 252202451, 252208700, 252207454, 252210649, 252206365, 252207126, 252207020, 252209180, 252213309, 252203687, 252209170, 252214626, 252209187, 252244934, 252208556, 252217228, 252213088, 252217154], "D": [252198864, 252212223, 252207311, 252216917, 252210946, 252214851, 252215523, 252213673, 252211331, 252213241, 252218189, 252208559, 252214624, 252218088, 252216560, 252210697, 252213737, 252221839, 252218355, 252222523], "B": [252195700, 252203456, 252197691, 252195312, 252198069, 252200483, 252199692, 252199256, 252205068, 252202776, 252197737, 252197316, 252200847, 252199778, 252199654, 252195229, 252204485, 252203677, 252200862], "A": [252193249, 252196517, 252194020, 252193609, 252194534, 252195163, 252195841, 252195267, 252193567, 252198736, 252193769, 252193858, 252193912, 252195503, 252195367, 252193377, 252195907, 252194634, 252196929], "H": [252530309, 252556908]}, "name": "H. GCD is Greater", "statement": "In the evenings during the hike, Kirill and Anton decided to take out an\r\narray of integers a of length n from their backpack and play a game with\r\nit. The rules are as follows: Kirill chooses from 2 to (n-2) numbers and\r\nencircles them in red. Anton encircles all the remaining numbers in\r\nblue. Kirill calculates the (GCD) of all the red numbers. Anton\r\ncalculates the of all the blue numbers and adds the number x to the\r\nresult. If the GCD of all the red numbers is strictly greater than the\r\nsum of the bitwise AND of all the blue numbers and the number x, then\r\nKirill wins; otherwise, Anton wins.Help Kirill to beat Anton or tell if\r\nit\u2019s impossible.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nconst int maxn = 4e5, maxa = 4e5, maxlg = 18;\n\nstd::array<int, maxn + 1> a, pre, suf;\nstd::array<int, maxa + 1> c;\nstd::array<bool, maxn + 1> flg;\nstd::array<std::vector<int>, maxlg + 1> vp;\n\nvoid slv() {\n  int n, x;\n  std::cin >> n >> x;\n\n  std::fill_n(vp.data(), maxlg + 1, std::vector<int>());\n  for (int i = 1; i <= n; ++i) {\n    std::cin >> a[i];\n    pre[i] = (i - 1 >= 1 ? pre[i - 1] : std::numeric_limits<int>::max()) & a[i];\n    for (int lg = 0; lg <= maxlg; ++lg) {\n      if (!((a[i] >> lg) & 1)) {\n        vp[lg].push_back(i);\n      }\n    }\n  }\n  for (int i = n; i >= 1; --i) {\n    suf[i] = (i + 1 <= n ? suf[i + 1] : std::numeric_limits<int>::max()) & a[i];\n  }\n\n  int sand = 0;\n  auto out = [&](int p, int q) {\n    std::cout << \"Yes\\n2 \" << a[p] << ' ' << a[q] << '\\n' << n - 2 << ' ';\n    for (int i = 1; i <= n; ++i) {\n      if (i != p && i != q) {\n        std::cout << a[i] << ' ';\n      }\n    }\n    std::cout << '\\n';\n  };\n  std::fill_n(flg.data() + 1, n, false);\n  for (int lg = 0; lg <= maxlg; ++lg) {\n    switch (vp[lg].size()) {\n      case 0: {\n        sand |= 1 << lg;\n        break;\n      }\n\n      case 1: case 2: {\n        for (int p : vp[lg]) {\n          flg[p] = true;\n          int cur = std::numeric_limits<int>::max();\n          for (int i = p - 1; i >= 1; --i) {\n            if (std::__gcd(a[i], a[p]) > ((i - 1 >= 1 ? pre[i - 1] : std::numeric_limits<int>::max()) & cur & (p + 1 <= n ? suf[p + 1] : std::numeric_limits<int>::max())) + x) {\n              out(i, p);\n              return;\n            }\n            cur &= a[i];\n          }\n          cur = std::numeric_limits<int>::max();\n          for (int i = p + 1; i <= n; ++i) {\n            if (std::__gcd(a[p], a[i]) > ((p - 1 >= 1 ? pre[p - 1] : std::numeric_limits<int>::max()) & cur & (i + 1 <= n ? suf[i + 1] : std::numeric_limits<int>::max())) + x) {\n              out(p, i);\n              return;\n            }\n            cur &= a[i];\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  int maxa = *std::max_element(a.data() + 1, a.data() + n + 1);\n  std::fill_n(c.data() + 1, maxa, 0);\n  for (int i = 1; i <= n; ++i) {\n    if (!flg[i]) {\n      ++c[a[i]];\n    }\n  }\n  for (int i = 1; i <= maxa; ++i) {\n    for (int j = i + i; j <= maxa; j += i) {\n      c[i] += c[j];\n    }\n  }\n  for (int i = sand + x + 1; i <= maxa; ++i) {\n    if (c[i] >= 2) {\n      int p = 0;\n      for (int j = 1; j <= n; ++j) {\n        if (!flg[j] && a[j] % i == 0) {\n          p = j;\n          break;\n        }\n      }\n      int q = 0;\n      for (int j = p + 1; j <= n; ++j) {\n        if (!flg[j] && a[j] % i == 0) {\n          q = j;\n          break;\n        }\n      }\n      out(p, q);\n      return;\n    }\n  }\n\n  std::cout << \"No\\n\";\n}\n\nint main() {\n  #ifndef ONLINE_JUDGE\n    std::freopen(\"H.in\", \"r\", stdin);\n    std::freopen(\"H.out\", \"w\", stdout);\n  #endif\n  std::cin.tie(nullptr)->sync_with_stdio(false);\n  \n  int t;\n  std::cin >> t;\n  for (int i = 0; i < t; ++i) {\n    slv();\n  }\n  return 0;\n}"], "input": "", "output": "", "tags": ["brute force", "data structures", "math", "number theory"], "dificulty": "2600", "interactive": false}