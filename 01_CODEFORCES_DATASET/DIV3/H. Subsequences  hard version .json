{
    "link": "https://codeforces.com//contest/1183/problem/H",
    "problemId": "363548",
    "problem_idx": "H",
    "shortId": "1183H",
    "contest_number": "1183",
    "problem_submissions": {
        "F": [
            56110414,
            56117769,
            56118798,
            66995010,
            56101090,
            56148730,
            138937022,
            56112000
        ],
        "E": [
            56097887,
            56113357,
            56105226,
            56104643,
            56101888,
            56093414,
            56111233,
            56103293,
            56103078,
            56104487,
            56109659,
            56103780,
            56109510,
            56105711,
            56106565
        ],
        "H": [
            56097697,
            56113570,
            56105740,
            66667587,
            56101720,
            56109616,
            56111456,
            56108240,
            56103716,
            56105330,
            56106283,
            56109916,
            56106467
        ],
        "G": [
            56092005,
            56104084,
            56123883,
            56112098,
            56110719,
            56101673,
            56117506,
            56115328,
            59651445,
            56098320,
            138935815
        ],
        "D": [
            56088183,
            56091373,
            56093338,
            56090767,
            56087401,
            56085787,
            56095559,
            56092469,
            56089592,
            56093522,
            56092856,
            56094699,
            56091582,
            56093930,
            56090315,
            56096981,
            56094561
        ],
        "C": [
            56084972,
            56088064,
            56089777,
            56097980,
            56081517,
            56107044,
            56091000,
            56085493,
            56085540,
            56091330,
            56090250,
            56088370,
            56086037,
            56089714,
            56086123
        ],
        "B": [
            56081558,
            56084832,
            56083510,
            59085942,
            56083305,
            56103674,
            56097880,
            56086061,
            56083097,
            56081660,
            56086915,
            56086136,
            56085025,
            56087421,
            56081700,
            56084942,
            56082678
        ],
        "A": [
            56080149,
            56079717,
            56079676,
            57264074,
            56080781,
            56088646,
            56082120,
            56081323,
            56079728,
            56079791,
            56082274,
            56082965,
            56079889,
            56079932,
            56079796
        ]
    },
    "name": "H. Subsequences  hard version ",
    "statement": ".A subsequence is a string that can be derived from another string by\r\ndeleting some or no symbols without changing the order of the remaining\r\nsymbols. Characters to be deleted are not required to go successively,\r\nthere can be any gaps between them. For example, for the string \"\" the\r\nfollowing strings are subsequences: \"\", \"\", \"\", \"\" and \"\" (empty\r\nstring). But the following strings are not subsequences: \"\", \"\" and\r\n\"\".You are given a string s consisting of n lowercase Latin letters.In\r\none move you can take subsequence t of the given string and add it to\r\nthe set S. The set S can’t contain duplicates. This move costs n - |t|,\r\nwhere |t| is the length of the added subsequence (i.e. the price equals\r\nto the number of the deleted characters).Your task is to find out the\r\nminimum possible total cost to obtain a set S of size k or report that\r\nit is impossible to do so.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\ntypedef long long ll;\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\nusing namespace std;\nll n,k,las[1010],ls[1010],d[1010][1010],i,has;\nchar a[1010];\nll depe(ll aa,ll bb)\n{\n\tif(bb==0)return 1;\n\tif(d[aa][bb]==-1)\n\t{\n\t\td[aa][bb]=0;\n\t\tll ii;\n\t\tfor(ii=aa+1;ii<=n;ii++)\n\t\t{\n\t\t\tif(las[ii]<=aa)\n\t\t\t{\n\t\t\t\td[aa][bb]+=depe(ii,bb-1);\n\t\t\t\td[aa][bb]=min(d[aa][bb],k);\n\t\t\t}\n\t\t}\n\t}\n\treturn d[aa][bb];\n}\nint main()\n{\n\tios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n\tcin>>n>>k;\n\tmemset(d,-1,sizeof(d));\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t\tlas[i]=ls[a[i]];\n\t\tls[a[i]]=i;\n\t}\n\tmemset(d,-1,sizeof(d));\n\tfor(i=n;i>=0;i--)\n\t{\n\t\tif(k<=depe(0,i))\n\t\t{\n\t\t\thas+=k*(n-i);\n\t\t\tcout<<has<<\"\\n\";\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thas+=depe(0,i)*(n-i);\n\t\t\tk-=depe(0,i);\n\t\t}\n\t}\n\tcout<<-1<<\"\\n\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "strings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\H. Subsequences  hard version .json",
    "editorial_link": "https://codeforces.com//blog/entry/68003",
    "editorial": "Firstly, letâs calculate the following auxiliary matrix: means the\r\nmaximum position that is less than or equal to , and the character (in\r\norder from to , â = , â = , and so on). It can be calculated naively or\r\nwith some easy dynamic programming (initially all are and then for each\r\nfrom to all values are equal to except which is ).After calculating this\r\nmatrix we can solve the problem by the following dynamic programming:\r\nlet be the number of subsequences of length that ends exactly in the\r\nposition . Initially all values are zeros except for each from to .How\r\ndo we perform transitionss? Letâs iterate over all lengths from to ,\r\nthen letâs iterate over all positions from to in a nested loop, and for\r\nthe current state we can calculate it as . If then we donât need to add\r\nthis state of the dynamic programming to the current state. Donât forget\r\nto take the minimum with after each transition!This transition means\r\nthat we take all subsequences that end with each possible character of\r\nthe alphabet and try to add the current character to each of them. You\r\ncan understand that there are no overlapping subsequences in this\r\ndynamic programming.After that letâs iterate over all possible lengths\r\nfrom to and calculate the number of subsequences of the current length .\r\nIt equals to . The same, if then we donât need to add this state of the\r\ndynamic programming to . Donât forget to take the minimum with ! If then\r\nletâs add to the answer and break the cycle. Otherwise letâs add to the\r\nanswer and decrease by .If after all iterations is greater than zero\r\nthen letâs try to add the empty string to the answer (we didnât take it\r\ninto account earlier). Increase the answer by and decrease by one. If\r\nafter this is still greater than zero then the answer is , otherwise the\r\nanswer is the calculated sum.Time complexity: .\r\n",
    "hint": []
}