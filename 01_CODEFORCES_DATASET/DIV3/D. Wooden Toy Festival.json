{
    "link": "https://codeforces.com//contest/1840/problem/D",
    "problemId": "1953889",
    "problem_idx": "D",
    "shortId": "1840D",
    "contest_number": "1840",
    "problem_submissions": {
        "F": [
            208833790,
            208800411,
            208738760,
            209755935,
            209049385,
            208856014,
            209001807,
            208972286,
            208793724,
            208849975,
            208903598,
            208797579
        ],
        "G1": [
            208785771,
            208798432,
            208798357,
            208759195,
            208773439,
            208768889,
            208784002,
            208782335,
            208787497,
            208757942,
            208778755,
            208795357,
            208767231,
            208800566,
            208774728,
            208784989
        ],
        "E": [
            208753398,
            208785836,
            208748100,
            208765491,
            208750014,
            208755889,
            208765809,
            208754982,
            208762975,
            208781811,
            208772087,
            208761782,
            208769368,
            208753067,
            208766710,
            208788699,
            208769932,
            208783505
        ],
        "D": [
            208744126,
            208768462,
            208780675,
            208742981,
            208738438,
            208740573,
            208744384,
            208743731,
            208753081,
            208742587,
            208741121,
            208744633,
            208752378,
            208785200,
            208747160,
            208737487,
            208749117,
            208750811
        ],
        "C": [
            208735712,
            208748530,
            208760247,
            208732224,
            208732082,
            208735505,
            208732760,
            208736708,
            208736616,
            208732221,
            208734089,
            208735409,
            208731496,
            208735170,
            208735073,
            208732504,
            208740037,
            208734211
        ],
        "B": [
            208731964,
            208736585,
            208755855,
            208723242,
            208728019,
            208731061,
            208728033,
            208728670,
            208729598,
            208727581,
            208727427,
            208728541,
            208726241,
            208724120,
            208726831,
            208725953,
            208755806,
            208732737,
            208735050
        ],
        "A": [
            208722150,
            208725086,
            208751995,
            208724436,
            208720280,
            208721134,
            208721012,
            208722594,
            208721192,
            208720913,
            208720713,
            208722663,
            208720260,
            208738330,
            208720865,
            208721050,
            208723621,
            208721860
        ],
        "G2": [
            208799121,
            208804613,
            209755710,
            211933185,
            208984229,
            208984015,
            208982917,
            208981704,
            208903638
        ]
    },
    "name": "D. Wooden Toy Festival",
    "statement": "In a small town, there is a workshop specializing in woodwork. Since the\r\ntown is small, only carvers work there.Soon, a wooden toy festival is\r\nplanned in the town. The workshop employees want to prepare for it.They\r\nknow that n people will come to the workshop with a request to make a\r\nwooden toy. People are different and may want different toys. For\r\nsimplicity, let\u2019s denote the pattern of the toy that the i-th person\r\nwants as a_i (1\r\nle a_i\r\nle 10^9).Each of the carvers can choose an integer pattern x (1\r\nle x\r\nle 10^9) in advance, . x is the integer. During the preparation for the\r\nfestival, the carvers will perfectly work out the technique of making\r\nthe toy of the chosen pattern, which will allow them to cut it out of\r\nwood instantly. To make a toy of pattern y for a carver who has chosen\r\npattern x, it will take |x - y| time, because the more the toy resembles\r\nthe one he can make instantly, the faster the carver will cope with the\r\nwork.On the day of the festival, when the next person comes to the\r\nworkshop with a request to make a wooden toy, the carvers can choose who\r\nwill take on the job. At the same time, the carvers are very skilled\r\npeople and can work on orders for different people .Since people don\u2019t\r\nlike to wait, the carvers want to choose patterns for preparation in\r\nsuch a way that the waiting time over all people is as as\r\npossible.Output the maximum waiting time that the carvers can achieve.\r\n",
    "solutions": [
        "#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint a[200000], n;\ninline bool check(long long x) {\n\tlong long pre = a[0] + x;\n\tint cnt = 1;\n\tfor (int i = 0; i ^ n; ++i) {\n\t\tif (abs(a[i] - pre) > x) {\n\t\t\t++cnt;\n\t\t\tpre = a[i] + x;\n\t\t}\n\t}\n\treturn cnt <= 3;\n}\nint main() {\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0), cout.tie(0);\n\tint t;\n\tcin >> t;\n\tfor (; t--;) {\n\t\tcin >> n;\n\t\tfor (int i = 0; i ^ n; ++i)\n\t\t\tcin >> a[i];\n\t\tsort(a, a + n);\n\t\tlong long l = 0, r = 1000000000, mid;\n\t\tfor (; l < r;) {\n\t\t\tmid = l + r >> 1;\n\t\t\tif (check(mid))\n\t\t\t\tr = mid;\n\t\t\telse\n\t\t\t\tl = mid + 1;\n\t\t}\n\t\tcout << l << '\\n';\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "sortings"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Wooden Toy Festival.json",
    "editorial_link": "https://codeforces.com//blog/entry/117060",
    "editorial": "Let the carvers choose patterns , , for preparation. For definiteness,\r\nlet us assume that , otherwise we will renumber the carvers.When a\r\nperson comes to the workshop with a request to make a toy of pattern ,\r\nthe best solution is to give his order to the carver for whom is\r\nminimal.It follows that the first cutter will take orders for toys with\r\npatterns from to , the second - for toys with patterns from to , the\r\nthird - for toys with patterns from to . Therefore, if you look at the\r\nsorted array of patterns , the first carver will make some prefix of\r\ntoys, the third will make some suffix, and the remaining toys will be\r\nmade by the second carver.Then the answer can be found by binary search.\r\nTo check if the time is suitable, you need to give the maximum prefix of\r\ntoys to the first carver and the maximum suffix of toys to the third\r\ncarver, and then check that the patterns of the remaining toys are\r\nwithin a segment of length . The maximum prefix and maximum suffix can\r\nbe found with a pass through the array .\r\n"
}