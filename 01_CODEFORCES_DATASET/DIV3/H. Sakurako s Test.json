{
    "link": "https://codeforces.com//contest/2008/problem/H",
    "problemId": "2850013",
    "problem_idx": "H",
    "shortId": "2008H",
    "contest_number": "2008",
    "problem_submissions": {
        "H": [
            279136956,
            279175231,
            279161763,
            279179363,
            279181586,
            279168976,
            279216022,
            279614299,
            279182476,
            279209636,
            279208468,
            279207341,
            279210332,
            279350027,
            279217913,
            279220559,
            279216550,
            279220895,
            279220924,
            279302743
        ],
        "G": [
            279119447,
            279152222,
            279151084,
            279131568,
            279192199,
            279163482,
            279207144,
            279160784,
            279362880,
            279111562,
            279178333,
            279161657,
            279296750,
            279200995,
            279191409,
            279192959,
            279209224,
            279173816,
            279190595,
            279189666,
            279155886,
            279187798
        ],
        "F": [
            279104606,
            279131689,
            279118881,
            279127227,
            279115943,
            279103916,
            279131962,
            279356689,
            279077044,
            279134534,
            279099699,
            279292527,
            279106499,
            279150166,
            279167659,
            279130886,
            279186290,
            279121299,
            279117301,
            279134844
        ],
        "E": [
            279097264,
            279123319,
            279112502,
            279113482,
            279140821,
            279152927,
            279147312,
            279181553,
            279142676,
            279163125,
            279188714,
            279161254,
            279138336,
            279154142,
            279156092,
            279140491,
            279154770,
            279110096,
            279153681,
            279116556
        ],
        "D": [
            279079188,
            279103941,
            279108267,
            279089266,
            279105270,
            279092186,
            279119277,
            279128075,
            279092080,
            279120640,
            279166364,
            279126815,
            279110851,
            279134432,
            279119823,
            279121959,
            279088289,
            279095604,
            279098547
        ],
        "C": [
            279075309,
            279090563,
            279107974,
            279084125,
            279095019,
            279080293,
            279095460,
            279192216,
            279081252,
            279108974,
            279132485,
            279093671,
            279089579,
            279098258,
            279105761,
            279109828,
            279083132,
            279080197,
            279089704
        ],
        "B": [
            279070569,
            279078207,
            279107778,
            279079153,
            279085265,
            279120271,
            279088210,
            279097026,
            279076070,
            279110876,
            279124102,
            279123495,
            279082667,
            279084060,
            279083489,
            279098074,
            279099366,
            279076888,
            279076970,
            279080147
        ],
        "A": [
            279068125,
            279068165,
            279106509,
            279068333,
            279073493,
            279112154,
            279077178,
            279083226,
            279068010,
            279081658,
            279079540,
            279073175,
            279071802,
            279068979,
            279070906,
            279069965,
            279068711,
            279069909,
            279068403
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/133509",
    "editorial": "Letâs fix one and try to solve this task for it. As we know, in indexed\r\narray median is where is number of elements in the array, so to find\r\nmedian, we need to find the smallest element which has at least elements\r\nin the array that is less or equal to it. Also, it is obvious, that we\r\nneed to decrease all elements till we can, since the least element, the\r\nleast median of the array is. So, after all operation, we change to .How\r\nto find number of that for some . In fact, we can try to find number of\r\nelements in range for all , since all this elements will be less then if\r\nwe take it by modulo . To find number of elements in such range, we can\r\nnotice that , so we can make prefix sum of counting array (letâs call it\r\nnumber of elements less or equal ) and then number of elements in tange\r\nwill be . Also, since , will be less then , so for fixed our solution\r\nwill work in . Letâs precompute it for all in range . Then, it will work\r\nin time . This transition is true because of is harmonic series. It\r\nmeans, .\r\n",
    "name": "H. Sakurako s Test",
    "statement": "Sakurako will soon take a test. The test can be described as an array of\r\nintegers n and a task on it:Given an integer x, Sakurako can perform the\r\nfollowing operation any number of times: Choose an integer i (1\r\nle i\r\nle n) such that a_i\r\nge x; Change the value of a_i to a_i-x. Using this operation any number\r\nof times, she must find the minimum possible median^{\r\ntext{ }} of the array a.Sakurako knows the array but does not know the\r\ninteger x. Someone let it slip that one of the q values of x will be in\r\nthe next test, so Sakurako is asking you what the answer is for each\r\nsuch x.^{\r\ntext{ }}The median of an array of length n is the element that stands in\r\nthe middle of the sorted array (at the\r\nfrac{n+2}{2}-th position for even n, and at the\r\nfrac{n+1}{2}-th for odd)\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std; namespace std { template <int D, typename T>struct Vec : public vector<Vec<D - 1, T>> {    static_assert(D >= 1);    template <typename... Args>    Vec(int n = 0, Args... args) : vector<Vec<D - 1, T>>(n, Vec<D - 1, T>(args...)) {}}; template <typename T>struct Vec<1, T> : public vector<T> {    Vec(int n = 0, T val = T()) : std::vector<T>(n, val) {}}; template <class Fun>class y_combinator_result {    Fun fun_;    public:    template <class T>    explicit y_combinator_result(T &&fun) : fun_(std::forward<T>(fun)) {}     template <class... Args>    decltype(auto) operator()(Args &&...args) {        return fun_(std::ref(*this), std::forward<Args>(args)...);    }}; template <class Fun>decltype(auto) y_combinator(Fun &&fun) {    return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));} }  // namespace std const int N = 1e5 + 10; int a[N], b[N]; int cnt[N]; int ans[N]; int pos[N]; void solve() {    int n, q;    cin >> n >> q;     for (int i = 1; i <= n; i++) cin >> a[i];     sort(a + 1, a + n + 1);     int T = (int)sqrt(n * (int)log2(n));     for (int x = 1; x <= T; x++) {        for (int i = 0; i < x; i++) cnt[i] = 0;        for (int i = 1; i <= n; i++) {            cnt[a[i] % x]++;        }        for (int i = 0, sum = 0; i < x; i++) {            sum += cnt[i];            if (sum > n / 2) {                ans[x] = i;                break;            }        }    }     for (int i = 0; i <= n + 1; i++) pos[i] = 1e9;    for (int i = n; i >= 1; i--) pos[a[i]] = i;    for (int i = n; i >= 0; i--) pos[i] = min(pos[i], pos[i + 1]);     while (q--) {        int x;        cin >> x;         if (x <= T) {            cout << ans[x] << \" \";            continue;        }         int l = 0, r = x - 1, res = -1;         while (l <= r) {            int mid = l + r >> 1;            int cnt = 0;             for (int val = 0; val <= n; val += x) {                int from = pos[val];                // int to = min(n, pos[min(n + 1, val + x)] - 1);                int to = min(n, pos[min(n + 1, val + mid + 1)] - 1);                // cout << from << \" \" << to << \" \" << val << endl;                if (from <= n) cnt += to - from + 1;            }            // cout << cnt << endl;            if (cnt > n / 2) {                res = mid;                r = mid - 1;            } else                l = mid + 1;        }         cout << res << \" \";    }} int32_t main() {    ios_base::sync_with_stdio(0);    cin.tie(0);     int t;    cin >> t;     while (t--) {        solve();        cout << \"\\n\";    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\H. Sakurako s Test.json",
    "hint": []
}