{
    "link": "https://codeforces.com//contest/1118/problem/E",
    "problemId": "300360",
    "problem_idx": "E",
    "shortId": "1118E",
    "contest_number": "1118",
    "problem_submissions": {
        "E": [
            50187972,
            50178585,
            50177854,
            50187885,
            50190255,
            50191148,
            50185548,
            50187581,
            50187155,
            50189680,
            50192489,
            50176894,
            50191143,
            50188012,
            50189444,
            50186952,
            50192839,
            50194191,
            50192878,
            50194811,
            50194112
        ],
        "F1": [
            50184628,
            50182187,
            50182069,
            50185126,
            50186144,
            50175246,
            50268639,
            50268627,
            50268547,
            50268534,
            50268507,
            50268495,
            50268478,
            50177703,
            50177673,
            50189880,
            50187751,
            50178618,
            50180765,
            50182959,
            50195988,
            50179367,
            50193234,
            50188527,
            50175539,
            50191073,
            50183885,
            50182277
        ],
        "C": [
            50180516,
            50189313,
            50189314,
            50174569,
            50182199,
            50186326,
            50196284,
            50176517,
            50179801,
            50190327,
            50186281,
            50179237,
            50179193,
            50195343,
            50178816,
            50179289,
            50198041,
            50178779,
            50215543,
            50180475,
            50179046
        ],
        "D1": [
            50173332,
            50175414,
            50179356,
            50180631,
            50185124,
            50180428,
            50182811,
            50183080,
            50182930,
            50182441,
            50190772,
            50187897,
            50183718,
            50184678,
            50183560,
            50184764,
            50183014,
            50185852,
            50188218,
            50190752
        ],
        "D2": [
            50173254,
            50175301,
            50179259,
            50186552,
            50187970,
            50180477,
            50182733,
            50182917,
            50182838,
            50182532,
            50190661,
            50187874,
            50183954,
            50184600,
            50183758,
            50184505,
            50183208,
            50185955,
            50185683,
            50189545,
            50190850
        ],
        "B": [
            50171883,
            50174314,
            50178899,
            50169507,
            50171162,
            50173488,
            50172475,
            50172202,
            50172480,
            50172037,
            50171388,
            50171487,
            50171892,
            50174620,
            50175080,
            50173570,
            50171467,
            50173112,
            50174638,
            50174514
        ],
        "A": [
            50167992,
            50168657,
            50171109,
            50166868,
            50167018,
            50167896,
            50168002,
            50167192,
            50167986,
            50168375,
            50170469,
            50167469,
            50167941,
            50167556,
            50168146,
            50168540,
            50168781,
            50167258,
            50168367,
            50169680
        ]
    },
    "name": "E. Yet Another Ball Problem",
    "statement": "The king of Berland organizes a ball! n pair are invited to the ball,\r\nthey are numbered from 1 to n. Each pair consists of one man and one\r\nwoman. Each dancer (either man or woman) has a monochrome costume. The\r\ncolor of each costume is represented by an integer from 1 to k,\r\ninclusive.Let b_i be the color of the man\u2019s costume and g_i be the color\r\nof the woman\u2019s costume in the i-th pair. You have to choose a color for\r\neach dancer\u2019s costume (i.e. values b_1, b_2,\r\ndots, b_n and g_1, g_2,\r\ndots g_n) in such a way that: for every i: b_i and g_i are integers\r\nbetween 1 and k, inclusive; there are no two completely identical pairs,\r\ni.e. no two indices i, j (i\r\nne j) such that b_i = b_j and g_i = g_j at the same time; there is no\r\npair such that the color of the man\u2019s costume is the same as the color\r\nof the woman\u2019s costume in this pair, i.e. b_i\r\nne g_i for every i; for each two consecutive (adjacent) pairs both man\u2019s\r\ncostume colors and woman\u2019s costume colors differ, i.e. for every i from\r\n1 to n-1 the conditions b_i\r\nne b_{i + 1} and g_i\r\nne g_{i + 1} hold. Let\u2019s take a look at the examples of bad and good\r\ncolor choosing (for n=4 and k=3, man is the first in a pair and woman is\r\nthe second):Bad color choosing: (1, 2), (2, 3), (3, 2), (1, 2)\r\ncontradiction with the second rule (there are equal pairs); (2, 3), (1,\r\n1), (3, 2), (1, 3) contradiction with the third rule (there is a pair\r\nwith costumes of the same color); (1, 2), (2, 3), (1, 3), (2, 1)\r\ncontradiction with the fourth rule (there are two consecutive pairs such\r\nthat colors of costumes of men/women are the same). Good color choosing:\r\n(1, 2), (2, 1), (1, 3), (3, 1); (1, 2), (3, 1), (2, 3), (3, 2); (3, 1),\r\n(1, 2), (2, 3), (3, 2). You have to find suitable color choosing or say\r\nthat no suitable choosing exists.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n// #include <ext/pb_ds/assoc_container.hpp>\n// #include <ext/pb_ds/tree_policy.hpp>\n// using namespace __gnu_pbds;\nusing namespace std;\n\n// #define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>\n#define ll long long int\n#define ld long double\n#define pb push_back\n#define mp make_pair\n\nvector <pair<ll,ll> > v;\n\nll d[200005];\n\nll fep(ll x, ll y, ll mod)\n{ll res=1;while(y>0){if(y&1)res=(res*x)%mod;\n    y=y>>1;x=(x*x)%mod;}return res%mod;}\n    \nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0);cout.tie(0);\n\n\tll n,i=1,k,j=2,t;\n\tcin >> n >> t;\n\tfor(k=0;k<n;k+=2)\n\t{\n\t\tif(i==j)\n\t\t\tj++;\n\t\tif(j==t+1)\n\t\t\ti++,j=d[i]+1;\t\n\t\tif(i==t+1 || j==t+1)\n\t\t\tbreak;\n\t\tv.pb(mp(i,j));\n\t\td[i]=max(d[i],j);\n\t\tif(k!=n-1)\n\t\t\tv.pb(mp(j,i)),\n\t\t\td[j]=max(d[j],i);\n\t\tj++;\n\t\tif(j==t+1)\n\t\t\ti++,j=d[i]+1;\n\t\tif(i==t+1 || j==t+1)\n\t\t\tbreak;\t\t\n\t}\n\tif(k<n)\n\t\tcout << \"No\";\n\telse\n\t{\n\t\tcout << \"Yes\" << endl;\n\t\tfor(i=0;i<n;i++)\n\t\t\tcout << v[i].first << \" \" << v[i].second << endl;\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Yet Another Ball Problem.json",
    "editorial_link": "https://codeforces.com/blog/entry/65396",
    "editorial": "The first observation: we cannot construct more than pairs at all due to\r\nsecond and third rules.The second observation: we always can construct\r\nan answer which will contain all pairs (and get some prefix of this\r\nanswer if we need less than pairs). Ho do we do that?Let man\u00e2\u0080\u0099s costumes\r\ncolors be in the following order: and so on. Now we have to set some\r\ncolors to woman\u00e2\u0080\u0099s costumes. The first thing comes to mind is to use some\r\ncyclic shift of . And it is the best thing we can do! So let women\u00e2\u0080\u0099s\r\ncostumes colors be in the following order: ans so on. So we use each\r\ncyclic shift of in order from second to last. The maximum number of\r\npairs can be obtained when and the number of such pairs is .So now we\r\nhave to prove that second, third and fourth rules are satisfied (or\r\nwrite a stress test, it is not so hard to do it). The easiest way to\r\nprove all rules are satisfied is the following: if some element in the\r\nleft part has position (let\u00e2\u0080\u0099s consider all positions modulo ) then each\r\nelement in the right part will have all positions expect in order (you\r\ncan see it from our placement). Now we can see that all rules are\r\nsatisfied because of such a placement.\r\n"
}