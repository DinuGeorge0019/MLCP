{
    "link": "https://codeforces.com//contest/1660/problem/B",
    "problemId": "1349756",
    "problem_idx": "B",
    "shortId": "1660B",
    "contest_number": "1660",
    "problem_submissions": {
        "F1": [
            151547102,
            151550004,
            151556961,
            151561107,
            152978236,
            151550675,
            151561323,
            151596179,
            151595243,
            151575027,
            151566711,
            151559623,
            151557836,
            151517033,
            151568295,
            151559969,
            151568720,
            151557907,
            151582251,
            151579930,
            151557285,
            151574893,
            151574565,
            151562629
        ],
        "F2": [
            151547014,
            151546872,
            151557177,
            151562642,
            151572516,
            151564512,
            151576252,
            151573626,
            151582683,
            151534999,
            151575687,
            151571693,
            151586409,
            151576536,
            151582511,
            151579993,
            151572690,
            151574663,
            151588223,
            151592536,
            151592473
        ],
        "D": [
            151536977,
            151531465,
            151548742,
            151544876,
            151565576,
            151552307,
            151540121,
            151546219,
            151566389,
            151546387,
            151551910,
            151560561,
            151552594,
            151547123,
            151585775,
            151548480,
            151568426,
            151565752,
            151535411
        ],
        "E": [
            151525872,
            151545578,
            151554108,
            151554403,
            151545248,
            151556608,
            151552575,
            151530576,
            151571474,
            151558277,
            151578411,
            151541773,
            151585933,
            151577061,
            151547981,
            151551718,
            151578968,
            151569807,
            151537268
        ],
        "C": [
            151521399,
            151518644,
            151534007,
            151531901,
            152978204,
            151528259,
            151524137,
            151544564,
            151553145,
            151553027,
            151553923,
            151606337,
            151534920,
            151528160,
            151532624,
            151527489,
            151538904,
            151547071,
            151543618,
            151548209,
            151522441
        ],
        "B": [
            151518226,
            151511243,
            151513483,
            151524120,
            151516768,
            151514262,
            151517162,
            151521061,
            151542405,
            151521485,
            151521685,
            151517284,
            151514144,
            151516159,
            151521136,
            151521193,
            151528983,
            151527060,
            151511556
        ],
        "A": [
            151508580,
            151507746,
            151508237,
            151517215,
            151507971,
            151508603,
            152300737,
            151508040,
            151508134,
            151537652,
            151507999,
            151510953,
            151511142,
            151509365,
            151510995,
            151509112,
            151523384,
            151509588,
            151513758,
            151515112
        ]
    },
    "name": "B. Vlad and Candies",
    "statement": "Not so long ago, Vlad had a birthday, for which he was presented with a\r\npackage of candies. There were n types of candies, there are a_i candies\r\nof the type i (1\r\nle i\r\nle n).Vlad decided to eat exactly one candy every time, choosing any of\r\nthe candies of a type that is currently the most frequent (if there are\r\nseveral such types, he can choose of them). To get the maximum pleasure\r\nfrom eating, Vlad to eat two candies of the same type in a row.Help him\r\nfigure out if he can eat all the candies without eating two identical\r\ncandies in a row.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n\n#define pb push_back\n#define int long long\n#define all(x) x.begin(), (x).end()\n#define rall(x) x.rbegin(), (x).rend()\n#define ld long double\nusing namespace std;\n\nvoid solve() {\n  int n;\n  cin >> n;\n  vector<int> A(n);\n  for (int i = 0; i < n; i++) {\n    cin >> A[i];\n  }\n  A.pb(0);\n  sort(all(A));\n  if (A[n] - A[n - 1] > 1) {\n    cout << \"NO\\n\";\n  } else {\n    cout << \"YES\\n\";\n  }\n}\n\n\nsigned main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Vlad and Candies.json",
    "editorial_link": "https://codeforces.com//blog/entry/101526",
    "editorial": "There will be three cases in total, let\u00e2\u0080\u0099s consider them on two types of\r\ncandies: , then we will eat candies in this order , then we will eat a\r\ncandy of the type , and then we will eat in this order (almost as in the\r\ncase above) , then we will eat a candy of the type , but there will\r\nstill be more of them than candies of the type and we will have to eat a\r\ncandy of the type again. So the answer is \"\".Now we prove that it is\r\nenough to check these conditions on two maximums of the array . If the\r\nthird condition is true, the answer is obvious \"\". Otherwise, we will by\r\nturns eat candies of the two maximum types until their number is equal\r\nto the third maximum, after which we will by turns eat candies of these\r\nthree types and so on.\r\n"
}