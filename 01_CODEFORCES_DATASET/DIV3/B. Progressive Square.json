{
    "link": "https://codeforces.com//contest/1955/problem/B",
    "problemId": "2579454",
    "problem_idx": "B",
    "shortId": "1955B",
    "contest_number": "1955",
    "problem_submissions": {
        "G": [
            255700432,
            255685371,
            255700202,
            255694984,
            255713116,
            255710945,
            255815483,
            255720205,
            255712913,
            255719635,
            255740112,
            255735779,
            255734648,
            255728080,
            255811582,
            255740083,
            255712654,
            255816753,
            255730101,
            255733676,
            255729429,
            255749883
        ],
        "F": [
            255690836,
            255730118,
            255712738,
            255723348,
            255696813,
            255721239,
            255711672,
            255703746,
            255701885,
            255718873,
            255724659,
            255733290,
            255718852,
            255723723,
            255725364,
            255717728,
            255710197,
            255736254,
            255712457
        ],
        "E": [
            255679602,
            255678850,
            255660817,
            255677164,
            255677495,
            255695083,
            255692381,
            255695668,
            255688219,
            255691378,
            255687451,
            255688784,
            255697004,
            255707937,
            255738844,
            255740248,
            255706468,
            255704684,
            255707886
        ],
        "D": [
            255663451,
            255667353,
            255685203,
            255671122,
            255669296,
            255675907,
            255680787,
            255676580,
            255675808,
            255675309,
            255677471,
            255667366,
            255685779,
            255681400,
            255682629,
            255685354,
            255677101,
            255696157,
            255690888
        ],
        "C": [
            255657238,
            255660807,
            255678901,
            255663623,
            255662171,
            255657175,
            255664052,
            255666604,
            255666050,
            255656375,
            255666921,
            255652774,
            255678671,
            255660970,
            255664282,
            255661069,
            255666029,
            255658918,
            255678375
        ],
        "B": [
            255642714,
            255647145,
            255662403,
            255652531,
            255651120,
            255650530,
            255651554,
            255653536,
            255651004,
            255648291,
            255648566,
            255643999,
            255648718,
            255649499,
            255650291,
            255653938,
            255647027,
            255650471,
            255659271
        ],
        "A": [
            255635163,
            255633427,
            255637795,
            255633451,
            255634276,
            255634783,
            255634704,
            255650196,
            255634135,
            255635088,
            255633579,
            255633389,
            255637393,
            255636215,
            255633812,
            255642645,
            255634779,
            255634460,
            255639283
        ],
        "H": [
            255690981,
            255842703,
            255840768
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/128243",
    "editorial": "Since and , the elements of the square increase starting from the top\r\nleft corner. Thus, is the minimum element in the square, and\r\nconsequently in the found elements.Given , , , and the found , we will\r\nreconstruct the square. It remains to check that the given numbers in\r\nthe input form the same square. The easiest way is to sort both arrays\r\nof numbers and check for equality. The complexity of the solution is .\r\n",
    "name": "B. Progressive Square",
    "statement": "A of size n is an n\r\ntimes n matrix. Maxim chooses three integers a_{1,1}, c, and d and\r\nconstructs a according to the following rules:a_{i+1,j} = a_{i,j} +\r\nca_{i,j+1} = a_{i,j} + dFor example, if n = 3, a_{1,1} = 1, c=2, and\r\nd=3, then the looks as follows:\r\nbegin{pmatrix} 1 & 4 & 7\r\n3 & 6 & 9\r\n5 & 8 & 11\r\nend{pmatrix} Last month Maxim constructed a and remembered the values of\r\nn, c, and d. Recently, he found an array b of n^2 integers in random\r\norder and wants to make sure that these elements are the elements of\r\nsquare.It can be shown that for any values of n, a_{1,1}, c, and d,\r\nthere exists exactly one that satisfies all the rules.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define int long longusing namespace std;class Segment_Tree{public:\tstruct tree{\t\tint l,r,sum,maxx,minx,flag;\t}tr[800005];\tvoid pushup(int u){\t\ttr[u].sum=tr[u<<1].sum+tr[u<<1|1].sum;\t\ttr[u].maxx=max(tr[u<<1].maxx,tr[u<<1|1].maxx);\t\ttr[u].minx=min(tr[u<<1].minx,tr[u<<1|1].minx);\t}\tvoid pushdown(int u){\t\tif(tr[u].flag){\t\t\ttr[u<<1].sum+=tr[u].flag*(tr[u<<1].r-tr[u<<1].l+1),tr[u<<1].maxx+=tr[u].flag,tr[u<<1].minx+=tr[u].flag,tr[u<<1].flag+=tr[u].flag;\t\t\ttr[u<<1|1].sum+=tr[u].flag*(tr[u<<1|1].r-tr[u<<1|1].l+1),tr[u<<1|1].maxx+=tr[u].flag,tr[u<<1|1].minx+=tr[u].flag,tr[u<<1|1].flag+=tr[u].flag;\t\t\ttr[u].flag=0;\t\t}\t}\tvoid build(int u,int l,int r){\t\tif(l==r){\t\t\ttr[u]={l,r,0,0,0,0};\t\t\treturn;\t\t}\t\ttr[u]={l,r};\t\tint mid=l+r>>1;\t\tbuild(u<<1,l,mid),build(u<<1|1,mid+1,r);\t\tpushup(u);\t}\tvoid change(int u,int l,int r,int k){\t\tif(l>r)return;\t\tif(tr[u].l>=l&&tr[u].r<=r){\t\t\ttr[u].sum+=k*(tr[u].r-tr[u].l+1);\t\t\ttr[u].maxx+=k,tr[u].minx+=k;\t\t\ttr[u].flag+=k;\t\t\treturn;\t\t}\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1;\t\tif(l<=mid)change(u<<1,l,r,k);\t\tif(r>mid)change(u<<1|1,l,r,k);\t\tpushup(u);\t}\tint query_sum(int u,int l,int r){\t\tif(tr[u].l>=l&&tr[u].r<=r)return tr[u].sum;\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1,res=0;\t\tif(l<=mid)res+=query_sum(u<<1,l,r);\t\tif(r>mid)res+=query_sum(u<<1|1,l,r);\t\treturn res;\t}\tint query_max(int u,int l,int r){\t\tif(tr[u].l>=l&&tr[u].r<=r)return tr[u].maxx;\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1,res=-1e18;\t\tif(l<=mid)res=max(res,query_max(u<<1,l,r));\t\tif(r>mid)res=max(res,query_max(u<<1|1,l,r));\t\treturn res;\t}\tint query_min(int u,int l,int r){\t\tif(tr[u].l>=l&&tr[u].r<=r)return tr[u].minx;;\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1,res=1e18;\t\tif(l<=mid)res=min(res,query_min(u<<1,l,r));\t\tif(r>mid)res=min(res,query_min(u<<1|1,l,r));\t\treturn res;\t}}sgt;int t,n,c,d,a[250005],b[250005];signed main(){\tcin>>t;\twhile(t--){\t\tcin>>n>>c>>d;\t\tfor(int i=1;i<=n*n;i++)cin>>a[i];\t\tsort(a+1,a+n*n+1),b[1]=a[1];\t\tfor(int i=2;i<=n*n;i++){\t\t\tif(i%n==1)b[i]=b[i-n]+c;\t\t\telse b[i]=b[i-1]+d;\t\t}\t\tsort(b+1,b+n*n+1);\t\tint flag=1;\t\tfor(int i=1;i<=n*n;i++)flag&=(b[i]==a[i]);\t\tcout<<((flag)?\"YES\\n\":\"NO\\n\");\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "implementation",
        "sortings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Progressive Square.json"
}