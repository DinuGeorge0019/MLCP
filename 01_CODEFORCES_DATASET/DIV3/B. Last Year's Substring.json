{
    "link": "https://codeforces.com//contest/1462/problem/B",
    "problemId": "833570",
    "problem_idx": "B",
    "shortId": "1462B",
    "contest_number": "1462",
    "problem_submissions": {
        "F": [
            101312311,
            101295944,
            101308624,
            101308817,
            101304111,
            101280435,
            101305797,
            101310367,
            101305342,
            101311228,
            101404636,
            101403975,
            101311880,
            101300846,
            101321777,
            101323660,
            101322804,
            101312196,
            101317325,
            101337936,
            101324335,
            101318324
        ],
        "E2": [
            101285396,
            101295162,
            101287717,
            101294090,
            101294721,
            101302415,
            101297486,
            101291336,
            101285191,
            101301715,
            101403947,
            101297838,
            101320202,
            101301546,
            101293087,
            101297518,
            101302712,
            101306390,
            101284328,
            101307237,
            101300711
        ],
        "E1": [
            101282369,
            101288225,
            101284658,
            101287780,
            101297537,
            101304897,
            101298622,
            101296342,
            101290668,
            101295792,
            101403926,
            101300370,
            101291439,
            101292410,
            101297049,
            101300114,
            101296216,
            101298222,
            101280004,
            101327539,
            101299484,
            101303183
        ],
        "D": [
            101276901,
            101274657,
            101273346,
            101282814,
            101282205,
            101287581,
            101290967,
            101279699,
            101299600,
            101289409,
            101403847,
            101286604,
            101293181,
            101285967,
            101285140,
            101285937,
            101287608,
            101292000,
            101304911,
            101416082,
            101283715,
            101288370
        ],
        "C": [
            101268521,
            101264616,
            101269281,
            101273876,
            101272004,
            101269250,
            101272117,
            101267115,
            101271243,
            101273829,
            101403759,
            101275279,
            101269069,
            101275015,
            101277128,
            101275423,
            101281795,
            101279889,
            101270679,
            101277574,
            101275915
        ],
        "B": [
            101264269,
            101265842,
            101265325,
            101264865,
            101264553,
            101265746,
            101267507,
            101270770,
            101264118,
            101266219,
            101403739,
            101270231,
            101266677,
            101264816,
            101274093,
            101269885,
            101269868,
            101266304,
            101266579,
            101415580,
            101272178,
            101266529
        ],
        "A": [
            101259376,
            101261449,
            101259287,
            101259205,
            101260758,
            101260150,
            101263911,
            101273333,
            101279124,
            101260299,
            101403717,
            101261323,
            101259580,
            101259586,
            101264162,
            101263539,
            101264411,
            101259503,
            101259664,
            101259533,
            101260523
        ]
    },
    "name": "B. Last Year's Substring",
    "statement": "Polycarp has a string s[1\r\ndots n] of length n consisting of decimal digits. Polycarp performs the\r\nfollowing operation with the string s (i.e. he can perform operation 0\r\nor 1 time): Polycarp selects two numbers i and j (1\r\nleq i\r\nleq j\r\nleq n) and removes characters from the s string at the positions i, i+1,\r\ni+2,\r\nldots, j (i.e. removes substring s[i\r\ndots j]). More formally, Polycarp turns the string s into the string s_1\r\ns_2\r\nldots s_{i-1} s_{j+1} s_{j+2}\r\nldots s_{n}. For example, the string s = \"\" Polycarp can turn into\r\nstrings: \"\" (in this case (i, j)=(3, 6) or (i, j)=(1, 4)); \"\" (in this\r\ncase (i, j)=(6, 6)); \"\" (in this case (i, j)=(1, 5)); other operations\r\nare also possible, only a few of them are listed above. Polycarp likes\r\nthe string \"\" very much, so he is wondering if it is possible to turn\r\nthe string s into a string \"\" in no more than one operation? Note that\r\nyou can perform zero operations.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define pb push_back\n#define ll long long\n#define mp make_pair\n#define si short int\n#define speed ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)\n#define pill pair<ll,ll>\n#define f first\n#define s second\n#define pilc pair<ll,char>\n#define all(a) (a).begin(),(a).end()\n#define rep(s,e,step) for(int i = (s); i < (e) ; i += step)\n#define vrep(s,e,step) for(int j = (s); j < (e) ; j += step)\n#define ex exit(0) \n#define sz(a) (a).size()\n#define triple pair<pill, ll>\n#define pinode pair<node*, node*>\n#define quadra pair<pill, pill>\n#define ld long double\nusing namespace std;\n \nconst ll N = 2e5 + 10;\nconst ll M = 2e5 + 1;\nconst ll big = 1e18;\nconst ll hsh2 = 1964325029 ;\nconst long long mod = 1e9 + 7;\nconst long double EPS = 1e-14;\nconst ll block = 1e7;\nconst ll shift = 2e3;\nmt19937_64 rofl(chrono::steady_clock::now().time_since_epoch().count());\n\nll t;\n\nvoid solve() {\n\tll n;\n\tstring a;\n\tcin >> n >> a;\n\tll L = 0, R = 0;\n\tstring x, y, p = \"2020\";\n\tfor(int j = 0; j < 4; j++) {\n\t\tx += a[j];  \t        \n\t\tif(x == p.substr(0, j + 1))\n\t\t\tL = j + 1;\n\t}\n\tfor(int j = n - 1; j >= n - 4; j--) {\n\t\ty = a[j] + y;\n\t\tif(y == p.substr(4 - (n - j), (n - j)))\n\t\t\tR = n - j;\n\t}\n\tif(L + R >= 4)\n\t\tcout << \"yEs\\n\";\n\telse\n\t\tcout << \"nO\\n\";\n}\n\nint main() {\n\tspeed;\n\tcin >> t;\n\twhile(t--)solve(); \t\n}              \n/*\nqiwwqdesw\n1\nd\n \n*/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Last Year's Substring.json",
    "editorial_link": "https://codeforces.com//blog/entry/85594",
    "editorial": "Letâs see how the deleted substring should look so that after deleting\r\nit, the string turns into the string \"\". The length of the string must\r\nbe . Then we can iterate over all substrings of the string of length\r\n(there are no more than five such substrings) and look at the string\r\nobtained after deleting the substring. That is, we need to check that\r\none of the following character sequence matches the : ; ; ; ; ;\r\n",
    "hint": []
}