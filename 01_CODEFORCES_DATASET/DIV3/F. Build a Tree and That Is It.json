{"link": "https://codeforces.com//contest/1714/problem/F", "problemId": "1490432", "problem_idx": "F", "shortId": "1714F", "contest_number": "1714", "problem_submissions": {"F": [166579305, 166565691, 166580443, 166573014, 166573474, 166592525, 166595105, 166548029, 166593205, 166686575, 166579941, 166590847, 166638992, 167603752], "D": [166555174, 166529424, 166533941, 166553024, 166532466, 166537534, 166569263, 166563818, 166546107, 166686361, 166550012, 166577360, 166525263, 166545147, 166538583, 166541251, 166536599, 166539458, 166766162, 166567140, 166550628, 166541107], "G": [166545336, 166572008, 166558804, 166581190, 166549499, 166568428, 166563357, 166570492, 166570829, 166686732, 166586648, 166587656, 166562027, 166554683, 166566856, 166569305, 166581306, 166572830, 166766125, 166554830, 166567931, 166573074], "E": [166529226, 166550151, 166552214, 166540138, 166557091, 166551342, 166540892, 166583808, 166558113, 166686473, 166559850, 203226761, 166572711, 166543154, 166563505, 166554394, 166558430, 166551333, 166551809, 166536566, 166532529, 166559461], "C": [166508236, 166513547, 166511820, 166514654, 166516790, 166512293, 166728853, 166510608, 166524319, 166522144, 166686237, 166521175, 166545986, 166510036, 166508148, 166522114, 166515443, 166510078, 166516228, 166524460, 166519794, 166509906], "B": [166507200, 166510494, 166509013, 166507825, 166510367, 166509254, 166728113, 166507901, 166516960, 166518989, 166685849, 166514261, 166539890, 166507950, 166506803, 166510018, 166509016, 166508114, 166511943, 166508752, 166512719, 166508756], "A": [166506659, 166508343, 166507357, 166506909, 166560580, 166507658, 166727935, 166506862, 166512344, 166510563, 166511944, 166685755, 166510846, 166535694, 166506790, 166510397, 166508153, 166507023, 166506968, 166508973, 166507229, 166507722, 166506864]}, "name": "F. Build a Tree and That Is It", "statement": "A tree is a connected undirected graph without cycles. Note that in this\r\nproblem, we are talking about not rooted trees.You are given four\r\npositive integers n, d_{12}, d_{23} and d_{31}. Construct a tree such\r\nthat: it contains n vertices numbered from 1 to n, the distance (length\r\nof the shortest path) from vertex 1 to vertex 2 is d_{12}, distance from\r\nvertex 2 to vertex 3 is d_{23}, the distance from vertex 3 to vertex 1\r\nis d_{31}. Output any tree that satisfies all the requirements above, or\r\ndetermine that no such tree exists.\r\n", "solutions": ["/*\nDiv 3, I literally don't care edition\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define rep(i,m,n) for (ll i=m;i<=n;i++)\n#define reb(i,m,n) for (ll i=m;i>=n;i--)\n#define rv(i,vt) for (auto i:vt)\n#define ii pair<ll,ll>\n#define vi vector<ll>\n#define F first\n#define S second\n#define pb push_back\nusing namespace std;\nconst ll N=2e5+5,mod=1e9+7;\nstring s[11],t;\nll n,d1,d2,d3;\nvoid solo()\n{\n   cin>>n>>d1>>d2>>d3;\n   if (d1>d2+d3 || d2>d3+d1 || d3>d1+d2){\n       cout<<\"NO\";\n       return;\n   }\n   if (d2+d3==d1){\n       cout<<\"YES\\n\";\n       ll l=4;\n       if (d3>1) \n       {\n        cout<<3<<\" \"<<l<<\"\\n\",l++,d3--;\n       while (d3>1){\n           cout<<l-1<<\" \"<<l<<\"\\n\",l++,d3--;\n       }\n       cout<<l-1<<\" \"<<1<<\"\\n\";\n       }\n       else cout<<3<<\" \"<<1<<\"\\n\";\n       if (d2>1) \n       {\n       cout<<3<<\" \"<<l<<\"\\n\",l++,d2--;\n       while (d2>1){\n           cout<<l-1<<\" \"<<l<<\"\\n\",l++,d2--;\n       }\n       cout<<l-1<<\" \"<<2<<\"\\n\";\n       }\n       else cout<<3<<\" \"<<2<<\"\\n\";\n       rep(i,l,n) cout<<1<<\" \"<<i<<\"\\n\";\n       return;\n   }\n   if (d1+d2==d3){\n       cout<<\"YES\\n\";\n       ll l=4;\n       if (d1>1) \n       {\n        cout<<2<<\" \"<<l<<\"\\n\",l++,d1--;\n       while (d1>1){\n           cout<<l-1<<\" \"<<l<<\"\\n\",l++,d1--;\n       }\n       cout<<l-1<<\" \"<<1<<\"\\n\";\n       }\n       else cout<<2<<\" \"<<1<<\"\\n\";\n       if (d2>1) \n       {\n        cout<<2<<\" \"<<l<<\"\\n\",l++,d2--;\n       while (d2>1){\n           cout<<l-1<<\" \"<<l<<\"\\n\",l++,d2--;\n       }\n       cout<<l-1<<\" \"<<3<<\"\\n\";\n       }\n       else cout<<2<<\" \"<<3<<\"\\n\";\n       rep(i,l,n) cout<<1<<\" \"<<i<<\"\\n\";\n       return;\n   }\n   if (d3+d1==d2){\n       cout<<\"YES\\n\";\n       ll l=4;\n       if (d3>1) \n       {\n        cout<<1<<\" \"<<l<<\"\\n\",l++,d3--;\n       while (d3>1){\n           cout<<l-1<<\" \"<<l<<\"\\n\",l++,d3--;\n       }\n       cout<<l-1<<\" \"<<3<<\"\\n\";\n       }\n       else cout<<1<<\" \"<<3<<\"\\n\";\n       if (d1>1) \n       {\n        cout<<1<<\" \"<<l<<\"\\n\",l++,d1--;\n       while (d1>1){\n           cout<<l-1<<\" \"<<l<<\"\\n\",l++,d1--;\n       }\n       cout<<l-1<<\" \"<<2<<\"\\n\";\n       }\n       else cout<<1<<\" \"<<2<<\"\\n\";\n       rep(i,l,n) cout<<1<<\" \"<<i<<\"\\n\";\n       return;\n   }\n   rep(i,1,d1-1){\n       ll sl=i,sr=d1-i;\n       if (d3-sl==d2-sr && d3-sl>0 && (d1+1+d3-sl)<=n){\n           cout<<\"YES\\n\";\n           ll l=4,pre=1;\n           rep(j,1,sl) cout<<pre<<\" \"<<l<<\"\\n\",pre=l,l++;\n           rep(j,1,sl) d1--,d3--;\n           ll pos=pre;\n           rep(i,1,d3-1) cout<<pre<<\" \"<<l<<\"\\n\",pre=l,l++;\n           cout<<pre<<\" \"<<3<<\"\\n\";\n           pre=pos;\n           rep(i,1,d1-1) cout<<pre<<\" \"<<l<<\"\\n\",pre=l,l++;\n           cout<<pre<<\" \"<<2<<\"\\n\";\n           rep(i,l,n) cout<<1<<\" \"<<i<<\"\\n\";\n           return;\n       }\n   }\n   cout<<\"NO\";\n}\nint main()\n{\n   ios_base::sync_with_stdio(0);\n   cin.tie(0);\n   cout.tie(0);\n   ll ts=1;\n   cin>>ts;\n   while (ts--){\n       solo();\n       cout<<endl;\n   }\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "implementation", "trees"], "dificulty": "1900", "interactive": false}