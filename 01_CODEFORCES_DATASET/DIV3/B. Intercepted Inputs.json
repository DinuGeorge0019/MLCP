{
    "link": "https://codeforces.com//contest/2037/problem/B",
    "problemId": "3030270",
    "problem_idx": "B",
    "shortId": "2037B",
    "contest_number": "2037",
    "problem_submissions": {
        "E": [
            292047075,
            292001485,
            292009292,
            291996476,
            292062011,
            292051813,
            292265678,
            292262203,
            292192703,
            292071302,
            292070663,
            291999780,
            292064784,
            292052672,
            292050626,
            292052922,
            292071828,
            291992209,
            292000170,
            291988756,
            292008406,
            292007324
        ],
        "F": [
            292022218,
            292017907,
            292024969,
            292058791,
            292012459,
            292558370,
            292027964,
            292322779,
            292083202,
            292025710,
            292058305,
            292053924,
            292057524,
            292098039,
            292062013,
            292058405,
            292072247,
            292041262,
            291975958,
            292082628,
            292078164,
            292082635,
            292046600
        ],
        "G": [
            291996486,
            292046822,
            292051239,
            292033736,
            292022807,
            292088543,
            292046321,
            292046301,
            292015442,
            292027681,
            292033325,
            292031649,
            292030485,
            292058022,
            292068187,
            292049914,
            292058005,
            292018113,
            291981788,
            292025943,
            292032506,
            292023447,
            292184893
        ],
        "D": [
            291973736,
            291988212,
            291992996,
            291979703,
            291998834,
            291983903,
            292002713,
            292029295,
            291999646,
            291984954,
            292024081,
            292031106,
            291991931,
            291978485,
            292010279,
            291980815,
            291970955,
            291981313,
            291985613
        ],
        "C": [
            291961505,
            291975167,
            291974207,
            291964672,
            291977153,
            291965604,
            291972603,
            291985859,
            291958605,
            291975659,
            291971736,
            292051709,
            291965196,
            293681954,
            291964838,
            291966108,
            291957366,
            291965128,
            291970402
        ],
        "B": [
            291956714,
            291952988,
            291957798,
            291954795,
            291952360,
            291952928,
            291957139,
            291960930,
            291959780,
            291972890,
            291956311,
            291964398,
            291952930,
            291955364,
            291953325,
            291955467,
            291951893,
            291958231,
            291957803
        ],
        "A": [
            291948750,
            291945793,
            291946764,
            291946202,
            291945511,
            291946198,
            291946444,
            291950431,
            291945465,
            291953437,
            291945736,
            291948815,
            291947311,
            291946698,
            291949011,
            291949226,
            291946064,
            291945840,
            291951387
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136334",
    "editorial": "You must check if you can find two integers n\n and m\n, such that n?m+2=k\n. You can either use a counter, or use two pointers. Do note that n2+2=k\n is an edge case that must be separated if you use a counter to implement it. This edge case does not appear in the two pointers approach. Time complexity is O(nlogn)\n (assuming you are wise enough to not use a hash table).",
    "name": "B. Intercepted Inputs",
    "statement": "To help you prepare for your upcoming Codeforces contest, Citlali set a\r\ngrid problem and is trying to give you a n by m grid through your input\r\nstream. Specifically, your input stream should contain the following:\r\nThe first line contains two integers n and m the dimensions of the grid.\r\nThe following n lines contain m integers each the values of the grid.\r\nHowever, someone has intercepted your input stream, shuffled all given\r\nintegers, and put them all on one line! Now, there are k integers all on\r\none line, and you don\u2019t know where each integer originally belongs.\r\nInstead of asking Citlali to resend the input, you decide to determine\r\nthe values of n and m yourself.Output any possible value of n and m that\r\nCitlali could have provided.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\u00a0#define int long long#define fi first#define se second\u00a0const int N = 2e5 + 5;const int K = 1e2 + 5;const int mod = 1e9 + 7;const int inf = 1e18 + 7;\u00a0#define all(v) (v).begin(), (v).end()#define pii pair<int, int> \u00a0using namespace std;\u00a0mt19937 rd(chrono::steady_clock::now().time_since_epoch().count());\u00a0int t, n;int a[N];map<int, int> cnt;\u00a0void check() {\tfor(int i = 1; i <= n; i++) if((n - 2) % a[i] == 0) {\t\tif((n - 2) / a[i] == a[i] && cnt[a[i]] > 1) {\t\t\tcout << a[i] << ' ' << a[i] << '\\n';\t\t\treturn;\t\t}\t\telse if((n - 2) / a[i] != a[i] && cnt[(n - 2) / a[i]] > 0) {\t\t\tcout << a[i] << ' ' << (n - 2) / a[i] << '\\n';\t\t\treturn;\t\t}\t}}\u00a0signed main() {    ios_base::sync_with_stdio(0);    cin.tie(0);        if(ifstream(\"file.inp\")){    \tfreopen(\"file.inp\", \"r\", stdin);    \tfreopen(\"file.out\", \"w\", stdout);    }        cin >> t;    while(t--) {    \tcin >> n;    \tfor(int i = 1; i <= n; i++) {    \t\tcin >> a[i];    \t\tcnt[a[i]]++;    \t}    \tcheck();    \tcnt.clear();    }        return 0;}\u00a0// tuntun"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Intercepted Inputs.json"
}