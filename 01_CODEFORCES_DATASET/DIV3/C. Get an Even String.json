{
    "link": "https://codeforces.com//contest/1660/problem/C",
    "problemId": "1349757",
    "problem_idx": "C",
    "shortId": "1660C",
    "contest_number": "1660",
    "problem_submissions": {
        "F1": [
            151547102,
            151550004,
            151556961,
            151561107,
            152978236,
            151550675,
            151561323,
            151596179,
            151595243,
            151575027,
            151566711,
            151559623,
            151557836,
            151517033,
            151568295,
            151559969,
            151568720,
            151557907,
            151582251,
            151579930,
            151557285,
            151574893,
            151574565,
            151562629
        ],
        "F2": [
            151547014,
            151546872,
            151557177,
            151562642,
            151572516,
            151564512,
            151576252,
            151573626,
            151582683,
            151534999,
            151575687,
            151571693,
            151586409,
            151576536,
            151582511,
            151579993,
            151572690,
            151574663,
            151588223,
            151592536,
            151592473
        ],
        "D": [
            151536977,
            151531465,
            151548742,
            151544876,
            151565576,
            151552307,
            151540121,
            151546219,
            151566389,
            151546387,
            151551910,
            151560561,
            151552594,
            151547123,
            151585775,
            151548480,
            151568426,
            151565752,
            151535411
        ],
        "E": [
            151525872,
            151545578,
            151554108,
            151554403,
            151545248,
            151556608,
            151552575,
            151530576,
            151571474,
            151558277,
            151578411,
            151541773,
            151585933,
            151577061,
            151547981,
            151551718,
            151578968,
            151569807,
            151537268
        ],
        "C": [
            151521399,
            151518644,
            151534007,
            151531901,
            152978204,
            151528259,
            151524137,
            151544564,
            151553145,
            151553027,
            151553923,
            151606337,
            151534920,
            151528160,
            151532624,
            151527489,
            151538904,
            151547071,
            151543618,
            151548209,
            151522441
        ],
        "B": [
            151518226,
            151511243,
            151513483,
            151524120,
            151516768,
            151514262,
            151517162,
            151521061,
            151542405,
            151521485,
            151521685,
            151517284,
            151514144,
            151516159,
            151521136,
            151521193,
            151528983,
            151527060,
            151511556
        ],
        "A": [
            151508580,
            151507746,
            151508237,
            151517215,
            151507971,
            151508603,
            152300737,
            151508040,
            151508134,
            151537652,
            151507999,
            151510953,
            151511142,
            151509365,
            151510995,
            151509112,
            151523384,
            151509588,
            151513758,
            151515112
        ]
    },
    "name": "C. Get an Even String",
    "statement": "A string a=a_1a_2\r\ndots a_n is called if it consists of a concatenation (joining) of\r\nstrings of length 2 consisting of the same characters. In other words, a\r\nstring a is even if two conditions are satisfied : its length n is even;\r\nfor all odd i (1\r\nle i\r\nle n - 1), a_i = a_{i+1} is satisfied. For example, the following\r\nstrings are even: \"\" (empty string), \"\", \"\", \"\", and \"\". The following\r\nstrings are not even: \"\", \"\" and \"\".Given a string s consisting of\r\nlowercase Latin letters. Find the minimum number of characters to remove\r\nfrom the string s to make it even. The deleted characters do not have to\r\nbe consecutive.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n\n#define pb push_back\n#define int long long\n#define all(x) x.begin(), (x).end()\n#define rall(x) x.rbegin(), (x).rend()\n#define ld long double\nusing namespace std;\n\nvoid solve() {\n  string s;\n  cin >> s;\n  vector<bool> used(26, false);\n  int ln = 0;\n  for (auto c : s) {\n    if (used[c - 'a']) {\n      ln++;\n      used.assign(26, false);\n    } else {\n      used[c - 'a'] = true;\n    }\n  }\n  cout << (int) s.size() - 2 * ln << '\\n';\n}\n\n\nsigned main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "strings"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Get an Even String.json",
    "editorial_link": "https://codeforces.com//blog/entry/101526",
    "editorial": "We will act greedily: we will make an array consisting of elements, in\r\nwhich we will mark if the letter is already encountered in the string,\r\nand otherwise. In the variable we will store the length of the even\r\nstring that can be obtained from . We will go through the string by\r\nexecuting the following algorithm: if , mark . if , then we already have\r\na pair of repeating characters to add to an even string add to the\r\nnumber and clear the array . Clearing is necessary because both\r\ncharacters that will make up the next pair must be in the string after\r\nthe current character. In other words, if the last character in the\r\ncurrent pair was , then the first character in the new pair can be ,\r\nwhere .Then we calculate the answer as .\r\n"
}