{
    "link": "https://codeforces.com//contest/1992/problem/G",
    "problemId": "2748269",
    "problem_idx": "G",
    "shortId": "1992G",
    "contest_number": "1992",
    "problem_submissions": {
        "G": [
            270004158,
            270000712,
            270020186,
            270006424,
            270010291,
            270026135,
            270032635,
            270035721,
            270033149,
            270036718,
            270041253,
            270830404,
            270035615,
            270034895,
            270041739,
            270045150,
            269953500,
            270015289,
            269950486
        ],
        "F": [
            269972577,
            270018896,
            269993465,
            269987867,
            269991929,
            270003873,
            269994703,
            270009199,
            270016540,
            270005935,
            270127981,
            270013136,
            270020087,
            270019936,
            270018379,
            269963694,
            270043761,
            270005597,
            269985278
        ],
        "D": [
            269954705,
            269930808,
            269933166,
            269942867,
            269936957,
            269946925,
            269942518,
            269941050,
            269944797,
            269962503,
            269960047,
            269956728,
            269964646,
            270000105,
            269992943,
            269953387,
            270024549,
            269937412
        ],
        "E": [
            269950946,
            269964630,
            269972651,
            269967159,
            269979484,
            269986612,
            269986054,
            269986867,
            269983914,
            269989311,
            269990694,
            269983845,
            269996015,
            269971543,
            269983529,
            270000206,
            270015715,
            269961487
        ],
        "C": [
            269920653,
            269918264,
            269915470,
            269928750,
            269924685,
            269919119,
            269916880,
            269924258,
            269918590,
            269936939,
            269921649,
            269929196,
            269923650,
            269913996,
            269998285,
            269933575,
            270027835,
            269914944
        ],
        "B": [
            269901952,
            269907735,
            269910847,
            269907929,
            269906378,
            269906593,
            269906048,
            269911414,
            269907898,
            269912483,
            269907733,
            269916021,
            269911764,
            269906789,
            270003910,
            269961585,
            270031623,
            269906408
        ],
        "A": [
            269898839,
            269900621,
            269899306,
            269900117,
            269900634,
            269898982,
            269898946,
            269899343,
            269899743,
            269900745,
            269900678,
            269900839,
            269903685,
            269898938,
            270007186,
            269957657,
            270033185,
            269900065
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131461",
    "editorial": "TutorialWe will iterate over the size of the set and its , . If , then\r\nthe set will fill all the remaining numbers up to , and there may still\r\nbe some larger than in it, so the of all such sets will be , and there\r\nwill be a total of such sets for each . If , lies in the interval from\r\nto . Notice that there can be exactly numbers before , and\r\ncorrespondingly numbers to the right of , so the answer needs to be\r\nadded with .Asymptotic complexity of the solution: .\r\n",
    "name": "G. Ultra-Meow",
    "statement": "K1o0n gave you an array a of length n, consisting of numbers 1, 2,\r\nldots, n. Accept it? Of course! But what to do with it? Of course,\r\ncalculate\r\ntext{MEOW}(a).Let\r\ntext{MEX}(S, k) be the k-th (strictly greater than zero) integer in\r\nascending order that is not present in the set S. Denote\r\ntext{MEOW}(a) as the sum of\r\ntext{MEX}(b, |b| + 1), over all subsets b of the array a.Examples of\r\ntext{MEX}(S, k) values for sets:\r\ntext{MEX}(\r\n{3,2\r\n}, 1) = 1, because 1 is the first positive integer not present in the\r\nset;\r\ntext{MEX}(\r\n{4,2,1\r\n}, 2) = 5, because the first two positive integers not present in the\r\nset are 3 and 5;\r\ntext{MEX}(\r\n{\r\n}, 4) = 4, because there are no numbers in the empty set, so the first 4\r\npositive integers not present in it are 1, 2, 3, 4.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using namespace std; #define int long long#define inf 0x3F3F3F3F3F3F3F3F const int MXN = 2e5 + 5;const int mod = 1e9 + 7; mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); int f[MXN], invf[MXN]; int pw(int a, int b){\ta %= mod;\tint res = 1;\twhile (b)\t{\t\tif (b & 1) res = (res * a) % mod;\t\ta = (a * a) % mod;\t\tb >>= 1;\t}\treturn res;}int nck(int n, int k){\tn = max(n, 0LL);\tif (min(n, k) < 0 || k > n) return 0;\treturn (f[n] * ((invf[k] * invf[n - k]) % mod)) % mod;} void _(){\tint n, res = 0;\tcin >> n;\tfor (int i = 1; i <= 2 * n + 1; i++)\t{\t\tfor (int b1 = 1; b1 <= min(n + 1, i); b1++)\t\t{\t\t\tif (i > n)\t\t\t{\t\t\t\tint x = (b1 - 1) - (i - n - 1);\t\t\t\tif (x < 0) continue;\t\t\t\tint y = n - x;\t\t\t\tif (y != b1 - 1) continue;\t\t\t\tres = (res + (nck(n, x) * i)) % mod;\t\t\t\tcontinue;\t\t\t}\t\t\tint x = b1 - 1, y = (i - 1) - (b1 - 1);\t\t\tif (y > (b1 - 1)) continue;\t\t\ty = (b1 - 1) - y;\t\t\tres = (res + (((nck(i - 1, x) * nck(n - i, y)) % mod) * i) % mod) % mod;\t\t}\t}\tcout << res << '\\n';} signed main(){\tios_base::sync_with_stdio(0);\tcin.tie(0);\tf[0] = 1;\tfor (int i = 1; i < MXN; i++) f[i] = (f[i - 1] * i) % mod;\tfor (int i = 0; i < MXN; i++) invf[i] = pw(f[i], mod - 2);\tint t;\tcin >> t;\twhile (t--)\t{\t\t_();\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\G. Ultra-Meow.json",
    "hint": []
}