{
    "link": "https://codeforces.com//contest/1029/problem/B",
    "problemId": "211257",
    "problem_idx": "B",
    "shortId": "1029B",
    "contest_number": "1029",
    "problem_submissions": {
        "F": [
            42047829,
            42034824,
            42039218,
            42045140,
            42050850,
            42057641,
            42355180,
            42049291,
            42049170,
            42057320,
            42157687,
            42044089,
            42546658,
            42048831,
            42049225,
            42048355,
            42061045,
            42061015
        ],
        "E": [
            42043766,
            42041583,
            42051097,
            42052718,
            42057627,
            42056052,
            42145593,
            42070440,
            42053184,
            42057293
        ],
        "D": [
            42037124,
            55325923,
            42076677,
            42050558,
            42365691,
            42365676,
            42365497,
            42365477,
            42365258,
            42365242,
            42365230,
            42365081,
            42364971,
            42364957,
            42364791,
            42356686,
            42356662,
            42356121,
            42356098,
            42356090,
            42356074,
            42355955,
            42355933,
            42355895,
            42355839,
            42355815,
            42355732,
            42355678,
            42042982,
            42045076,
            42143765,
            42043950,
            42072305,
            42083814,
            42075124,
            42052333,
            42052607,
            42052955
        ],
        "B": [
            42031994,
            42043199,
            42035507,
            42029721,
            42032248,
            42032998,
            42057919,
            42057314,
            42036457,
            42033868,
            42032775,
            42032090,
            42031079,
            42035681,
            42032483,
            42034211,
            53975070,
            42033101,
            42031960,
            42034275,
            42035033,
            42032988
        ],
        "A": [
            42030943,
            42032428,
            42030337,
            42031598,
            42030794,
            42031593,
            42030225,
            42057135,
            42032959,
            42032163,
            42030490,
            42030591,
            42029747,
            42032386,
            42029916,
            42032324,
            42075267,
            42030907,
            42030283,
            42032164,
            42032054,
            42031161
        ],
        "C": [
            42049735,
            42046367,
            42031881,
            42035737,
            42041787,
            42040163,
            42049039,
            42037198,
            42037422,
            42033541,
            42040258,
            42044533,
            42039967,
            42042410,
            42036447,
            42044633,
            42041967,
            42040799
        ]
    },
    "name": "B. Creating the Contest",
    "statement": "You are given a problemset consisting of n problems. The difficulty of\r\nthe i-th problem is a_i. It is guaranteed that all difficulties are\r\ndistinct and are given in the increasing order.You have to assemble the\r\ncontest which consists of some problems of the given problemset. In\r\nother words, . There is only one condition that should be satisfied: for\r\neach problem but the hardest one (the problem with the maximum\r\ndifficulty) there should be a problem with the difficulty greater than\r\nthe difficulty of this problem but not greater than twice the difficulty\r\nof this problem. In other words, let a_{i_1}, a_{i_2},\r\ndots, a_{i_p} be the difficulties of the selected problems in increasing\r\norder. Then for each j from 1 to p-1 a_{i_{j + 1}}\r\nle a_{i_j}\r\ncdot 2 should hold. Among all contests satisfying the condition above\r\nyou have to assemble one with the maximum number of problems. Your task\r\nis to find this number of problems.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define pb push_back\n#define INF 1000000005\n#define LINF 1000000000000000005\n#define MAXN 100005\n#define pi pair<int,int>\n#define pl pair<ll,ll>\n\nint n,a[200005],mx,cur;\n\nint32_t main(){\n    ios_base :: sync_with_stdio(0);\n    cin >> n;\n    for(int i=1;i<=n;i++) cin >> a[i];\n    mx=cur=1;\n    for(int i=2;i<=n;i++){\n        if(a[i]>2*a[i-1]) cur=1;\n        else cur++;\n        mx=max(mx,cur);\n    }\n    cout << mx;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "math"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Creating the Contest.json",
    "editorial_link": "https://codeforces.com/blog/entry/61439",
    "editorial": "The answer is always a segment of the initial array. The authors\r\nsolution uses two pointers technique: let\u00e2\u0080\u0099s iterate over all left bounds\r\nof the correct contests and try to search maximum by inclusion correct\r\ncontest. Let\u00e2\u0080\u0099s iterate over all from to and let the current left bound\r\nbe . Let be the maximum right bound of the correct contest starting from\r\nthe position . Initially . Now while and let\u00e2\u0080\u0099s increase . Try to update\r\nthe answer with the value . It is obvious that all positions from to\r\ncannot be left bounds of the maximum by inclusion correct contests, so\r\nlet\u00e2\u0080\u0099s set and go on. Because each element will be processed once, time\r\ncomplexity is .\r\n"
}