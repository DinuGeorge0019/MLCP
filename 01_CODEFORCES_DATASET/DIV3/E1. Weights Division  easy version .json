{
    "link": "https://codeforces.com//contest/1399/problem/E1",
    "problemId": "691720",
    "problem_idx": "E1",
    "shortId": "1399E1",
    "contest_number": "1399",
    "problem_submissions": {
        "F": [
            89035173,
            89029933
        ],
        "E2": [
            89011999,
            89030510,
            89080621,
            89039473,
            89040534,
            89201926,
            89050383,
            89034156,
            89084070,
            89049259,
            89035111,
            89052507,
            89050541,
            89057093,
            89080141
        ],
        "E1": [
            88996046,
            89009546,
            89080613,
            89010335,
            89023941,
            89019900,
            89014538,
            89084044,
            89031455,
            89027397,
            89021735,
            89030142,
            89008436,
            89007483,
            89015010,
            89097316,
            89017545,
            89018333,
            89016025,
            89019887,
            89020808
        ],
        "D": [
            88983986,
            88986050,
            89080684,
            89080600,
            88990615,
            88995867,
            88990140,
            88981358,
            89083571,
            89083120,
            88982379,
            89003434,
            89001587,
            89002958,
            88987435,
            88992856,
            88978240,
            88981220,
            89097279,
            88987544,
            88985548,
            88986877,
            88997105
        ],
        "C": [
            88974580,
            88974518,
            89080589,
            88982402,
            88985705,
            88979354,
            88966362,
            89082893,
            88973387,
            88994104,
            88993313,
            88993807,
            88971087,
            88979014,
            88975937,
            88963847,
            89097258,
            88972661,
            88974247,
            88977241,
            88976735,
            88981249
        ],
        "B": [
            88964383,
            88965521,
            89080579,
            88970001,
            88977862,
            88967937,
            88959373,
            89082724,
            88963456,
            88986912,
            88979078,
            88973586,
            88969906,
            88966168,
            88957629,
            88964497,
            89097240,
            88962105,
            88966474,
            88966506,
            88969861
        ],
        "A": [
            88956237,
            88956430,
            89080574,
            88960295,
            88969663,
            88957655,
            88955164,
            89082748,
            88955338,
            88967328,
            88967166,
            88962494,
            88973926,
            88959306,
            88955102,
            88955579,
            89097191,
            88955839,
            88955943,
            88956625,
            88962720
        ]
    },
    "name": "E1. Weights Division  easy version ",
    "statement": ".You are given a weighted rooted tree, vertex 1 is the root of this\r\ntree.A tree is a connected graph without cycles. A rooted tree has a\r\nspecial vertex called the root. A parent of a vertex v is the last\r\ndifferent from v vertex on the path from the root to the vertex v.\r\nChildren of vertex v are all vertices for which v is the parent. A\r\nvertex is a leaf if it has no children. The weighted tree is such a tree\r\nthat each edge of this tree has some weight.The weight of the path is\r\nthe sum of edges weights on this path. The weight of the path from the\r\nvertex to itself is 0.You can make a sequence of zero or more moves. On\r\neach move, you select an edge and divide its weight by 2 rounding down.\r\nMore formally, during one move, you choose some edge i and divide its\r\nweight by 2 rounding down (w_i :=\r\nleft\r\nlfloor\r\nfrac{w_i}{2}\r\nright\r\nrfloor).Your task is to find the minimum number of required to make the\r\nfrom the root to each leaf at most S. In other words, if w(i, j) is the\r\nweight of the path from the vertex i to the vertex j, then you have to\r\nmake\r\nsum\r\nlimits_{v\r\nin leaves} w(root, v)\r\nle S, where leaves is the list of all leaves.You have to answer t\r\nindependent test cases.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <climits>\n#include <cstdlib>\n#include <cstdio>\n#include <bitset>\n#include <vector>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n\n#define fi first\n#define se second\n#define db double\n#define U unsigned\n#define P std::pair<int,int>\n#define LL long long\n#define pb push_back\n#define MP std::make_pair\n#define all(x) x.begin(),x.end()\n#define CLR(i,a) memset(i,a,sizeof(i))\n#define FOR(i,a,b) for(int i = a;i <= b;++i)\n#define ROF(i,a,b) for(int i = a;i >= b;--i)\n#define DEBUG(x) std::cerr << #x << '=' << x << std::endl\n\nconst int MAXN = 1e5 + 5;\n\nint n;\nLL S;\n\nstruct Edge{\n    int to,w,nxt;\n}e[MAXN<<1];\nint head[MAXN],cnt;\n\ninline void add(int u,int v,int w){\n    e[++cnt] = (Edge){v,w,head[u]};head[u] = cnt;\n    e[++cnt] = (Edge){u,w,head[v]};head[v] = cnt;\n}\n\nint sz[MAXN],fe[MAXN];\n\ninline void dfs(int v,int fa=0){\n    bool flag = 1;\n    for(int i = head[v];i;i = e[i].nxt){\n        if(e[i].to == fa) continue;\n        fe[e[i].to] = e[i].w;\n        dfs(e[i].to,v);flag = 0;\n        sz[v] += sz[e[i].to];\n    }\n    if(flag) sz[v] = 1;\n}\n\ninline void Solve(){\n    scanf(\"%d%lld\",&n,&S);cnt = 0;FOR(i,1,n) head[i] = sz[i] = fe[i] = 0;\n    FOR(i,2,n){\n        int u,v,w;scanf(\"%d%d%d\",&u,&v,&w);add(u,v,w);\n    }\n    dfs(1);\n    LL now = 0;\n//    FOR(i,1,n) DEBUG(sz[i]);\n    FOR(i,2,n) now += 1ll*fe[i]*sz[i];\n    int res = 0;std::priority_queue<std::pair<LL,int> > q;\n    FOR(i,2,n) q.push(MP(1ll*sz[i]*(fe[i]-fe[i]/2),i));\n    while(now > S){\n        auto v = q.top();q.pop();\n        res++;\n        now -= v.fi;\n        fe[v.se] /= 2;\n        q.push(MP(1ll*sz[v.se]*(fe[v.se]-fe[v.se]/2),v.se));\n    }\n    printf(\"%d\\n\",res);\n}\n\nint main(){\n    int T;scanf(\"%d\",&T);\n    while(T--) Solve();\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dfs and similar",
        "greedy",
        "trees"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E1. Weights Division  easy version .json",
    "editorial_link": "https://codeforces.com//blog/entry/81082",
    "editorial": "Letâs define as the number of leaves in the subtree of the -th edge (of\r\ncourse, in terms of vertices, in the subtree of the lower vertex of this\r\nedge). Values of can be calculated with pretty standard and simple dfs\r\nand dynamic programming.Then we can notice that our edges are\r\nindependent and we can consider the initial answer (sum of weights of\r\npaths) as . Let be the difference between the current impact of the -th\r\nedge and the impact of the -th edge if we divide its weight by . . This\r\nvalue means how the sum of weights decreases if we divide the weight of\r\nthe -th edge by .Create ordered set which contains pairs . Then the\r\nfollowing greedy solution works: letâs take the edge with maximum and\r\ndivide its weight by . Then re-add it into the set with new value . When\r\nthe sum becomes less than or equal to , just stop and print the number\r\nof divisions we made.The maximum number of operations can reach so the\r\nsolution complexity is (each operation takes time because the size of\r\nthe set is ).\r\n",
    "hint": []
}