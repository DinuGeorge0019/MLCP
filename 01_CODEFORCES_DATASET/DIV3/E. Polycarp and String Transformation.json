{
    "link": "https://codeforces.com//contest/1560/problem/E",
    "problemId": "1082100",
    "problem_idx": "E",
    "shortId": "1560E",
    "contest_number": "1560",
    "problem_submissions": {
        "F2": [
            126333818,
            126306855,
            126317964,
            126343969,
            126329373,
            126329484,
            126318670,
            126324734,
            126340312,
            126380679,
            126324751,
            126323492,
            126392331,
            126323366,
            126338259,
            181389292,
            126327293,
            126341450,
            126335878,
            126346280,
            126343998,
            126334938,
            126331523,
            126358791
        ],
        "E": [
            126314275,
            126322204,
            126332108,
            126337635,
            126318617,
            126338757,
            126331477,
            126341239,
            126380625,
            126338931,
            126345881,
            126392319,
            126339127,
            126324096,
            126341795,
            126324358,
            126350364,
            126334805,
            126335135,
            126362201,
            126365972,
            126318677
        ],
        "F1": [
            126309457,
            126306646,
            126317821,
            126307775,
            126330038,
            126318533,
            126324378,
            126310262,
            126324870,
            126323614,
            126392323,
            126323290,
            126338176,
            126327481,
            126351876,
            126335480,
            126346365,
            126344093,
            126335132,
            126331374,
            126336670
        ],
        "D": [
            126298074,
            126431766,
            126302775,
            126302608,
            126296584,
            126295532,
            126300302,
            126303789,
            126294528,
            126389287,
            126379378,
            126374780,
            126312331,
            126313764,
            126392312,
            126309627,
            126305716,
            126307963,
            126306718,
            126303322,
            126315291,
            126312680,
            126316841,
            126311452,
            126300681
        ],
        "C": [
            126288623,
            126433600,
            126292103,
            126291590,
            126288757,
            126288046,
            126289111,
            126288025,
            126294392,
            126290860,
            126380656,
            126297916,
            126292682,
            126392309,
            126304707,
            126294000,
            126293843,
            126290516,
            126295186,
            126293202,
            126294960,
            126303302,
            126297335,
            126292511
        ],
        "B": [
            126283242,
            126282856,
            126282667,
            126281542,
            126281182,
            126284410,
            126281360,
            126280185,
            126288262,
            126283351,
            126501327,
            126501253,
            126392300,
            126294064,
            126288477,
            126286554,
            126285105,
            126283253,
            126285740,
            126288591,
            126286357,
            126288697,
            126284546
        ],
        "A": [
            126276779,
            126276302,
            126276753,
            126276379,
            126276291,
            126277704,
            126276617,
            126277755,
            126279450,
            126276413,
            126392288,
            126284958,
            126277758,
            126277313,
            126277718,
            126276817,
            126277182,
            126278392,
            126279481,
            126277037,
            126282057
        ]
    },
    "name": "E. Polycarp and String Transformation",
    "statement": "Polycarp has a string s. Polycarp performs the following actions until\r\nthe string s is empty (t is initially an empty string): he adds to the\r\nright to the string t the string s, i.e. he does t = t + s, where t + s\r\nis a concatenation of the strings t and s; he selects an arbitrary\r\nletter of s and removes from s all its occurrences (). Polycarp performs\r\nthis sequence of actions in this order.Note that after Polycarp finishes\r\nthe actions, the string s will be empty and the string t will be equal\r\nto some value (that is undefined and depends on the order of\r\nremoving).E.g. consider s=\"\" so the actions may be performed as follows:\r\nt=\"\", the letter \u201d is selected, then s=\"\"; t=\"\", the letter \u201d is\r\nselected, then s=\"\"; t=\"\", the letter \u201d is selected, then s=\"\" (the\r\nempty string). You need to restore the initial value of the string s\r\nusing only the final value of t and find the order of removing letters\r\nfrom s.\r\n",
    "solutions": [
        "/*#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"avx,avx2,fma\")*/\n// only when really needed\n\n/* GNU G++17 7.3.0: No long long for faster code\n   GNU G++17 9.2.0 (64 bit, msys 2): Long long only for faster code */\n\n#include <bits/stdc++.h>\n\n#define for1(i,a,b) for (int i = a; i <= b; i++)\n#define for2(i,a,b) for (int i = a; i >= b; i--)\n#define int long long\n\n#define sz(a) (int)a.size()\n#define pii pair<int,int>\n\n/*\n__builtin_popcountll(x) : Number of 1-bit\n__builtin_ctzll(x) : Number of trailing 0\n*/\n\n#define PI 3.1415926535897932384626433832795\n#define INF 1000000000000000000\n#define MOD 1000000007\n#define MOD2 1000000009\n#define EPS 1e-6\n#define fi first\n#define se second\n#define pb push_back\n#define endof cout << -1 << \"\\n\"; goto dumb;\n\nusing namespace std;\n\nstring s;\nint n, m;\n\nint ls[27];\nint rs[27];\n\nsigned main() {\n    // freopen(\".inp\", \"r\", stdin);\n    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n\n    // freopen(\"cf.inp\", \"r\", stdin);\n    // freopen(\"cf.out\", \"w\", stdout);\n\n    int t;\n    cin >> t;\n\n    while (t--) {\n        cin >> s;\n        vector<char> v1;\n        memset(ls, 1, sizeof(ls));\n        memset(rs, 0, sizeof(rs));\n        n = s.size(); s = \"?\" + s;\n        map<char, int> mp;\n        map<int, char> rev;\n        for1(i, 1, n){\n             mp[s[i]] = i;\n        }\n        for(auto cc : mp){\n            rev[cc.se] = cc.fi;\n        }\n        m = mp.size();\n        vector<char> stk;\n        vector<char> inher;\n        for(auto cc : rev) stk.pb(cc.se);\n        inher = stk;\n        while(!stk.empty()){\n            int bulkk;\n            char mn = stk.back();\n            int rang = stk.size(); stk.pop_back();\n            vector<int> f2;\n            for1(i, 1, n){\n                if(s[i] == mn) f2.pb(i);\n            }\n            if((int)f2.size() % rang){\n                endof;\n            }\n            bulkk = (int)f2.size() / rang;\n            for1(i, 1, rang){\n                ls[i] = min(ls[i], f2[i * bulkk - bulkk]);\n                rs[i] = max(rs[i], f2[i * bulkk - 1]);\n            }\n        }\n        for1(i, 2, m){\n            if(ls[i] != rs[i - 1] + 1){\n                endof;\n            }\n        }\n        if(ls[1] != 1 || rs[m] != n){\n            endof;\n        }\n        for1(i, ls[1], rs[1]) v1.pb(s[i]);\n        for1(i, 2, m){\n            char c = inher[i - 2];\n            vector<char> v2;\n            for(char du : v1){\n                if(du != c) v2.pb(du);\n            }\n            v1 = v2;\n            for1(j, 0, v1.size() - 1){\n                if(v1[j] != s[j + ls[i]]){\n                    endof;\n                }\n            }\n        }\n        for1(i, 1, rs[1]) cout << s[i];\n        cout << \" \";\n        for(char c : inher) cout << c;\n        cout << \"\\n\";\n        dumb:;\n    }\n\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation",
        "sortings",
        "strings"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Polycarp and String Transformation.json",
    "editorial_link": "https://codeforces.com//blog/entry/94009",
    "editorial": "Suppose it\u00e2\u0080\u0099s given a string for which the answer exists. Consider the\r\nlast non-empty value of . Only letter occurs in the value and the letter\r\nis the last removed letter. At the same time, the value of is a suffix\r\nof so the last character of is the last removed letter. Consider the\r\nsecond-last non-empty value of . It contains exactly distinct letters so\r\nthat one of them is the last removed letter and the other is the\r\nsecond-last removed letter. The concatenation of the second-last and the\r\nlast values of is a suffix of consisting only of the letters. Therefore,\r\nthe letter which occurrence is the last of the occurrences of all\r\nletters except the last removed one is the second-last removed letter.\r\nConsidering so other values, we are proving that the order of removing\r\nthe letters is the order occurrences of the letters occur in the string\r\n.Suppose is the number of the step in which some letter was removed, is\r\nthe number of occurrences of the letter in the value of . The letter\r\noccurs in exactly different values of . In each of them, the letter\r\noccurs exactly times. So the letter occurs in exactly times. Therefore,\r\nusing the number of the step () in which the letter was removed and the\r\nnumber of the letter\u00e2\u0080\u0099s occurrences in (), let\u00e2\u0080\u0099s calculate the number of\r\nthe letter\u00e2\u0080\u0099s occurrences in the string : . If isn\u00e2\u0080\u0099t completely divisible\r\nby , there\u00e2\u0080\u0099s no solution.The sum of all of all letters occurring in is\r\nthe length of the initial value of . Since the initial value is a prefix\r\nof , the possible answer is the prefix of having the length equal to the\r\nsum of all .Before outputting the prefix, check that you can get from\r\nthe supposed value of the string the string . Checking it, you may use\r\nthe algorithm from the statement. If the resulting string is equal to ,\r\nthe answer is correct and must be outputted, otherwise, there\u00e2\u0080\u0099s no\r\nsolution.\r\n"
}