{
    "link": "https://codeforces.com//contest/1914/problem/E2",
    "problemId": "2388664",
    "problem_idx": "E2",
    "shortId": "1914E2",
    "contest_number": "1914",
    "problem_submissions": {
        "G1": [
            238018438,
            238000852,
            238043791,
            238031142,
            238036163,
            238022582,
            238087384,
            238021948,
            238036052,
            238042057,
            238044748,
            238044591,
            238050871,
            238049279,
            238041985,
            238041747,
            238051023,
            238045930,
            238048344,
            238046536
        ],
        "G2": [
            238018282,
            238029024,
            238043678,
            238093831,
            238412098,
            238148947,
            238064785,
            238049222,
            238126038,
            238092486,
            238087948,
            238046581
        ],
        "F": [
            237987101,
            237981616,
            238101450,
            238044891,
            238001429,
            238000631,
            238087366,
            238087349,
            237994511,
            237993999,
            238008838,
            238002775,
            238029366,
            238028703,
            238047984,
            238031007,
            238059042,
            238016608,
            238042673,
            238020683,
            238033160,
            238082942,
            238008762,
            238014024
        ],
        "E1": [
            237976613,
            237967906,
            237968713,
            237979764,
            237992475,
            238087307,
            237986420,
            237997495,
            237988975,
            237985077,
            238029878,
            238002145,
            237999975,
            237992524,
            237984395,
            237997791,
            237997737,
            237990723,
            237990559,
            238004571,
            238010992,
            238032680,
            237982405,
            237983507
        ],
        "E2": [
            237970390,
            237967235,
            237968505,
            237975110,
            237992780,
            238087324,
            238087318,
            237984061,
            238010057,
            237989036,
            237983616,
            238029826,
            238001371,
            237999445,
            237992650,
            237985208,
            237997942,
            237998156,
            237990939,
            238005322,
            238011620,
            238032636,
            237982481,
            237984584
        ],
        "D": [
            237961065,
            237957916,
            238104889,
            237961793,
            237958795,
            237961367,
            238087292,
            238087270,
            237986240,
            237957524,
            237975283,
            237962518,
            238030156,
            237976418,
            237969884,
            237965519,
            237971483,
            237975166,
            237976975,
            237983490,
            237986064,
            237975702,
            237967060,
            237966732
        ],
        "C": [
            237951819,
            237950855,
            237956944,
            237969583,
            237951814,
            238087237,
            237972501,
            237951530,
            237961828,
            237952459,
            238030394,
            237963594,
            237963444,
            237965677,
            237960539,
            237979704,
            237972502,
            237967766,
            237971691,
            237960187,
            237954042,
            237957084
        ],
        "B": [
            237947357,
            237946623,
            237951415,
            237946292,
            237950077,
            238087224,
            237953989,
            237947273,
            237953071,
            237947198,
            237948581,
            237951930,
            237944853,
            237953412,
            237972118,
            237952004,
            237972737,
            237961138,
            237948416,
            237947616,
            237950073
        ],
        "A": [
            237944355,
            237943313,
            237944942,
            237948071,
            237945058,
            238087212,
            237948311,
            237944114,
            237946737,
            237943516,
            237943664,
            237945100,
            237964491,
            237948297,
            237965985,
            237946077,
            237945584,
            237949431,
            237943847,
            237944147,
            237943327
        ]
    },
    "name": "E2. Game with Marbles  Hard Version ",
    "statement": "Recently, Alice and Bob were given marbles of n different colors by\r\ntheir parents. Alice has received a_1 marbles of color 1, a_2 marbles of\r\ncolor 2,..., a_n marbles of color n. Bob has received b_1 marbles of\r\ncolor 1, b_2 marbles of color 2, ..., b_n marbles of color n. All a_i\r\nand b_i are between 1 and 10^9.After some discussion, Alice and Bob came\r\nup with the following game: players take turns, starting with Alice. On\r\ntheir turn, a player chooses a color i such that players have at least\r\none marble of that color. The player then discards of color i, and their\r\nopponent discards of color i. The game ends when there is no color i\r\nsuch that both players have at least one marble of that color.The score\r\nin the game is the difference between the number of remaining marbles\r\nthat Alice has and the number of remaining marbles that Bob has at the\r\nend of the game. In other words, the score in the game is equal to\r\n(A-B), where A is the number of marbles Alice has and B is the number of\r\nmarbles Bob has at the end of the game. Alice wants to maximize the\r\nscore, while Bob wants to minimize it.Calculate the score at the end of\r\nthe game if both players play optimally.\r\n",
    "solutions": [
        "//haachama cooking\n#include <bits/stdc++.h>\n \nusing namespace std;\n#define ll long long\n#define rep(i,m,n) for (ll i=m;i<=n;i++)\n#define reb(i,m,n) for (ll i=m;i>=n;i--)\n#define rv(i,vt) for (auto i:vt)\n#define pb push_back\n#define ii pair<ll,ll>\n#define F first\n#define S second\n#define sz(v) (int)v.size()\n#define iii tuple<ll,ll,ll>\nconst ll N=2e5+5,mod=1e9+7;\nll n,k;\nii a[N];\nvoid prep(){\n}\nbool cmp (ii a, ii b){\n    return ((a.F+a.S)>(b.F+b.S));\n}\nvoid solve()\n{\n    cin>>n;\n    rep(i,1,n) cin>>a[i].F;\n    rep(i,1,n) cin>>a[i].S;\n    sort(a+1,a+n+1,cmp);\n    ll res=0;\n    rep(i,1,n) if (i%2==1) res+=a[i].F-1;\n    else res-=a[i].S-1;\n    cout<<res;\n}\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    ll tests=1;\n    cin>>tests;\n    prep();\n    while (tests--){\n        solve();\n        cout<<endl;\n    }\n    cerr << \"\\n\" << (double)clock() / CLOCKS_PER_SEC * 1000 << \" ms\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "greedy",
        "sortings"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E2. Game with Marbles  Hard Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/123530",
    "editorial": "Letâs change the game in the following way: Firstly, weâll let Bob make\r\nall moves. It means that for each color Bob discarded one marble, while\r\nAlice discarded all her marbles. So the score will be equal to . Alice\r\nmakes the first move by choosing some color and \"takes back color \". In\r\nmeans that we cancel Bobâs move on color and Alice makes that move\r\ninstead. How score will change? Initially, we had contribution to the\r\nscore, but now contribution becomes . In other words, choosing color\r\ngives score . Note that, the greater the greater becomes. Bob makes the\r\nsecond move by \"saving some color \", i. e. he forbids Alice to choose\r\ncolor . It doesnât change score but now Alice canât choose color on her\r\nturns. Alice and Bob continue playing, by \"taking\" and \"saving\" colors,\r\nuntil Alice will take all non-forbidden colors. The result of the game\r\nis score . Note that this game is equivalent to the initial game, but\r\nAlice and Bob strategies much more obvious: each turn Alice should\r\n\"take\" non-prohibited color with maximum . And each turn Bob should\r\n\"save\" non-prohibited color with maximum , otherwise Alice will \"take\"\r\nit.As a result, we showed that optimum strategy in the initial game is\r\nthe same: sort colors by in decreasing order. Alice chooses -st, -rd,\r\n-th and so on colors, while Bob chooses -nd, -th, -th and so on\r\ncolors.The resulting complexity is .\r\n",
    "hint": []
}