{
    "link": "https://codeforces.com//contest/1702/problem/F",
    "problemId": "1456431",
    "problem_idx": "F",
    "shortId": "1702F",
    "contest_number": "1702",
    "problem_submissions": {
        "F": [
            163542113,
            163514028,
            163524616,
            163733546,
            163545296,
            163524924,
            163529358,
            163536513,
            163519866,
            163525233,
            163564879,
            163534380,
            163538783,
            163561947,
            163540969,
            163535655,
            163561064,
            163562404,
            163544085,
            163519016
        ],
        "G2": [
            163534991,
            163559407,
            163548172,
            163549996,
            163554176,
            163540379,
            163557182,
            163571429,
            163575000,
            163545502,
            163571447,
            163565952,
            163549470,
            163566226,
            163577860,
            163531079,
            163555250,
            163574346,
            163573572
        ],
        "G1": [
            163534865,
            163559321,
            163548387,
            163550273,
            163555106,
            163540096,
            163557483,
            163571026,
            163549886,
            163545065,
            163540644,
            163566213,
            163549672,
            163557387,
            163546571,
            163531433,
            163554999,
            163574214,
            163573379
        ],
        "E": [
            163505777,
            163504465,
            163513283,
            163513644,
            163510195,
            163546834,
            163520208,
            163505881,
            163516258,
            163517435,
            163526737,
            163516735,
            163506369,
            163532804,
            163528744,
            163567339,
            163567093,
            163519899,
            163524058,
            163508144
        ],
        "D": [
            163487820,
            163493027,
            163495875,
            163501404,
            163498661,
            163506170,
            163499925,
            163492796,
            163488953,
            163500375,
            163495848,
            163492570,
            163483263,
            163496253,
            163491216,
            163495136,
            163508155,
            163491736,
            163485984
        ],
        "C": [
            163479124,
            163482190,
            163488652,
            163621464,
            163492523,
            163493122,
            163498422,
            163492339,
            163483795,
            163482325,
            165952921,
            163494102,
            163486863,
            163484454,
            163478228,
            163483131,
            163484825,
            163489721,
            163494820,
            163481705,
            163480845
        ],
        "B": [
            163471434,
            163474194,
            163479257,
            163481288,
            163480379,
            163488341,
            163485489,
            163475757,
            163474641,
            163485384,
            163491538,
            163474852,
            163473580,
            163475855,
            163477521,
            163484846,
            163484562,
            163474319,
            163475121
        ],
        "A": [
            163468217,
            163469784,
            163473310,
            163468633,
            163472585,
            163470981,
            163470350,
            163469302,
            163470110,
            163473679,
            163468658,
            163468889,
            163468241,
            163490145,
            163470656,
            163480525,
            163486237,
            163468246,
            163469702
        ]
    },
    "name": "F. Equate Multisets",
    "statement": "is a set of numbers in which there can be equal elements, and the order\r\nof the numbers does not matter. Two multisets are equal when each value\r\noccurs the same number of times. For example, the multisets\r\n{2,2,4\r\n} and\r\n{2,4,2\r\n} are equal, but the multisets\r\n{1,2,2\r\n} and\r\n{1,1,2\r\n} are not.You are given two multisets a and b, each consisting of n\r\nintegers.In a single operation, any element of the b multiset can be\r\ndoubled or halved (rounded down). In other words, you have one of the\r\nfollowing operations available for an element x of the b multiset:\r\nreplace x with x\r\ncdot 2, or replace x with\r\nlfloor\r\nfrac{x}{2}\r\nrfloor (round down). Note that you cannot change the elements of the a\r\nmultiset.See if you can make the multiset b become equal to the multiset\r\na in an arbitrary number of operations (maybe 0).For example, if n = 4,\r\na =\r\n{4, 24, 5, 2\r\n}, b =\r\n{4, 1, 6, 11\r\n}, then the answer is yes. We can proceed as follows: Replace 1 with 1\r\ncdot 2 = 2. We get b =\r\n{4, 2, 6, 11\r\n}. Replace 11 with\r\nlfloor\r\nfrac{11}{2}\r\nrfloor = 5. We get b =\r\n{4, 2, 6, 5\r\n}. Replace 6 with 6\r\ncdot 2 = 12. We get b =\r\n{4, 2, 12, 5\r\n}. Replace 12 with 12\r\ncdot 2 = 24. We get b =\r\n{4, 2, 24, 5\r\n}. Got equal multisets a =\r\n{4, 24, 5, 2\r\n} and b =\r\n{4, 2, 24, 5\r\n}.\r\n",
    "solutions": [
        "/*\nPlaying Div.3, easy edition\n*/\n#include <bits/stdc++.h>\n#define ll int\n#define rep(i,m,n) for (auto i=m;i<=n;i++)\n#define reb(i,m,n) for (auto i=m;i>=n;i--)\n#define rv(i,vt) for (auto i:vt)\n#define ii pair<ll,ll>\n#define vi vector<ll>\n#define F first\n#define S second\n#define pb push_back\nusing namespace std;\nconst ll N=1e6+5,mod=1e9+7;\nll n,a[N],b[N];\nmap<ll,ll> deg,d;\nvoid solo()\n{\n    cin>>n;\n    deg.clear();\n    d.clear();\n    rep(i,1,n){\n        cin>>a[i];\n        while (a[i]%2==0) a[i]/=2;\n        d[a[i]]++;\n    }\n    rep(i,1,n) \n    {\n        cin>>b[i];\n        while (b[i]%2==0) b[i]/=2;\n        if (d[b[i]]>0) deg[b[i]]++;\n        ll f=b[i];\n        while (f>1){\n            f/=2;\n            if (d[f]>0) deg[f]++;\n        }\n    }\n    rep(i,1,n){\n        ll k=1e18,pos=0,f=b[i];\n        f*=2;\n        while (f>1){\n            f/=2;\n            if (d[f]>0 && deg[f]>0 && k>deg[f]) k=deg[f],pos=f;\n        }\n        if (k<1e18){\n            d[pos]--;\n            f=b[i];\n            f*=2;\n            while (f>1){\n            f/=2;\n            deg[f]--;\n        }\n    }\n    }\n    rep(i,1,n) if (d[a[i]]){\n        cout<<\"NO\";\n        return;\n    }\n    cout<<\"YES\";\n}\nint main()\n{\n   ios_base::sync_with_stdio(0);\n   cin.tie(0);\n   cout.tie(0);\n   ll ts=1;\n   cin>>ts;\n   while (ts--){\n       solo();\n       cout<<endl;\n   }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Equate Multisets.json",
    "editorial_link": "https://codeforces.com//blog/entry/104763",
    "editorial": "We divide each number from the multiset by as long as it is divisible\r\nwithout a remainder. Because if we can get a new number from the\r\nmultiset , we can also increase it to the original number by\r\nmultiplication by . Now notice that it does not make sense to use the\r\nfirst operation (multiplication by ), because we get an even number, and\r\nonly odd numbers remain in the multiset . Then we take the largest\r\nnumber from and if it is in , we remove this number from both multisets.\r\nOtherwise, we use the second operation, if the number is greater than .\r\nIf it is equal to , then it is impossible to equalize the multisets and\r\n.\r\n"
}