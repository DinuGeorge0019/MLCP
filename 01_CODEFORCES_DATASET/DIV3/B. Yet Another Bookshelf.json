{
    "link": "https://codeforces.com//contest/1433/problem/B",
    "problemId": "766657",
    "problem_idx": "B",
    "shortId": "1433B",
    "contest_number": "1433",
    "problem_submissions": {
        "E": [
            96118292,
            96100384,
            96144411,
            96131531,
            96126171,
            96116171,
            96143430,
            96124657,
            96110938,
            96142211,
            96123301,
            96164122,
            96137865,
            96137248,
            96139372,
            96151324,
            96105901,
            96108332,
            96119162
        ],
        "D": [
            96108021,
            96096525,
            96105972,
            96112718,
            96099052,
            96105757,
            96102154,
            96119014,
            96106156,
            96111319,
            96110517,
            96107146,
            96106344,
            96110999,
            96119720,
            96108556,
            96096494,
            96100784,
            96104899
        ],
        "F": [
            96105759,
            96110506,
            96119004,
            96125972,
            96132730,
            96142830,
            96120574,
            96135431,
            96163807,
            96138553,
            96152985,
            96127650,
            96151526,
            96153346,
            96158052,
            96144943,
            96148733,
            96135208
        ],
        "C": [
            96102081,
            96092029,
            96090502,
            96100255,
            96092651,
            96097485,
            96096234,
            96096200,
            96099117,
            96101166,
            96102838,
            96101507,
            96097647,
            96094575,
            96113560,
            96103107,
            96090286,
            96093702,
            96099170
        ],
        "G": [
            96094218,
            96125410,
            96128032,
            96141154,
            96154260,
            96149033,
            96156333,
            96142357,
            96139797,
            96146497,
            96163476,
            96140362,
            96161234,
            96163894,
            96152235,
            96163050,
            96123944,
            96205637
        ],
        "B": [
            96092183,
            96084902,
            96085565,
            96094926,
            96088334,
            96090362,
            96089755,
            96089494,
            96088669,
            96093848,
            96088026,
            96089177,
            96087731,
            96090077,
            96098934,
            96093459,
            96086464,
            96086371,
            96090772
        ],
        "A": [
            96084957,
            96082729,
            96082939,
            96083168,
            96082835,
            96084005,
            96082966,
            96083516,
            96083887,
            96086611,
            96083211,
            96084639,
            96083406,
            96083239,
            96092645,
            96083081,
            96082670,
            96083000,
            96085692
        ]
    },
    "name": "B. Yet Another Bookshelf",
    "statement": "There is a bookshelf which can fit n books. The i-th position of\r\nbookshelf is a_i = 1 if there is a book on this position and a_i = 0\r\notherwise. It is guaranteed that there is on the bookshelf.In one move,\r\nyou can choose some contiguous segment [l; r] consisting of books (i.e.\r\nfor each i from l to r the condition a_i = 1 holds) and: Shift it to the\r\nright by 1: move the book at index i to i + 1 for all l\r\nle i\r\nle r. This move can be done only if r+1\r\nle n and there is no book at the position r+1. Shift it to the left by\r\n1: move the book at index i to i-1 for all l\r\nle i\r\nle r. This move can be done only if l-1\r\nge 1 and there is no book at the position l-1. Your task is to find the\r\nnumber of moves required to collect all the books on the shelf as a\r\n(consecutive) segment (i.e. the segment without any gaps).For example,\r\nfor a = [0, 0, 1, 0, 1] there is a gap between books (a_4 = 0 when a_3 =\r\n1 and a_5 = 1), for a = [1, 1, 0] there are no gaps between books and\r\nfor a = [0, 0,0] there are also no gaps between books.You have to answer\r\nt independent test cases.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define forinc(i,a,b) for(int i=a;i<=b;++i)\n#define fordec(i,a,b) for(int i=a;i>=b;--i)\n#define forv(i,x) for(auto &i:x)\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nint rnd(int l,int r)\n{\n    return l+rng()%(r-l+1);\n}\n#define in ({int x=0;int c=getchar(),n=0;for(;!isdigit(c);c=getchar()) n=(c=='-');for(;isdigit(c);c=getchar()) x=x*10+c-'0';n?-x:x;})\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define batbit(i,x) (x|(1ll<<i))\n#define getbit(i,x) ((x>>i)&1)\n\nint a[500],s[500];\n\nmain()\n{\n    int t;\n    cin >> t;\n    while(t--)\n    {\n        int n;\n        cin >> n;\n        int tmp=0,kq=0,mi=1e9,ma=0;\n        forinc(i,1,n)\n        {\n            cin >> a[i];\n            if(a[i]==0) s[i]=s[i-1]+1;\n            else s[i]=s[i-1];\n        }\n        forinc(i,1,n) if(a[i])\n        {\n            mi=min(mi,i);\n            ma=max(ma,i);\n        }\n        cout << s[ma]-s[mi-1] << \"\\n\";\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Yet Another Bookshelf.json",
    "editorial_link": "https://codeforces.com//blog/entry/83903",
    "editorial": "We can notice that the answer is the number of zeros between the\r\nleftmost occurrence of and the rightmost occurrence of . Why is it true?\r\nLet\u00e2\u0080\u0099s take the leftmost maximum by inclusion segment of and just shift\r\nit right. We can see that using this algorithm we will do exactly\r\ndescribed amount of moves and there is no way improve the answer.\r\n"
}