{
    "link": "https://codeforces.com//contest/2114/problem/F",
    "problemId": "3405990",
    "problem_idx": "F",
    "shortId": "2114F",
    "contest_number": "2114",
    "problem_submissions": {
        "G": [
            321491820,
            321510895,
            321522705,
            321536205,
            321704142,
            321493544,
            321539010
        ],
        "D": [
            321453109,
            321433567,
            321464732,
            321435389,
            321418906,
            321422419,
            321426564,
            321427705,
            321433853,
            321447085,
            321448245,
            321448177,
            321438602,
            321430809,
            321444460,
            321433422,
            321441969,
            321447455
        ],
        "F": [
            321437069,
            321471653,
            321400560,
            321452634,
            321458136,
            321471530,
            321457608,
            321478622,
            321469763,
            321468286,
            321467066,
            321488259,
            321482829,
            321485396,
            321504556,
            321482048,
            321513883,
            321499978,
            321518132
        ],
        "E": [
            321425663,
            321448629,
            321447346,
            321419017,
            321427993,
            321438291,
            321439608,
            321441935,
            321448509,
            321455125,
            321437156,
            321464203,
            321462222,
            321450510,
            321461412,
            321455167,
            321460727,
            321424098
        ],
        "C": [
            321406317,
            321410944,
            321421134,
            321404932,
            321410584,
            321406511,
            321405596,
            321411420,
            321413167,
            321412908,
            321422303,
            321404419,
            321413740,
            321414690,
            321426901,
            321412443,
            321424589,
            321401692
        ],
        "B": [
            321397200,
            321399911,
            321415073,
            321397245,
            321403501,
            321400846,
            321423069,
            321401151,
            321406842,
            321401907,
            321401468,
            321410144,
            321404248,
            321407958,
            321413444,
            321402900,
            321412452,
            321392901
        ],
        "A": [
            321389400,
            321390323,
            321390935,
            321389192,
            321396857,
            321391523,
            321392082,
            321388740,
            321389560,
            321392729,
            321389834,
            321394641,
            321393501,
            321388215,
            321392515,
            321389988,
            321388815,
            321388090
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143268",
    "editorial": "It is not difficult to guess that first we need to use operations of the\r\nsecond type to make equal to , and only then use operations of the first\r\ntype to make it equal to . That is, now we need to decompose the numbers\r\nand into the minimum number of factors not exceeding .We will learn to\r\nfind this quantity for an arbitrary number . We will use dynamic\r\nprogramming, let be the minimum number of factors not exceeding into\r\nwhich we can decompose the number . To find this quantity for , we will\r\niterate over the number , such that is divisible by and , and we will\r\nupdate the value . It is easy to notice that this approach works in ,\r\nwhich is too slow.To make our dynamic programming faster, we note that\r\nvalues of that are not divisors of are not needed. We will find all\r\ndivisors of , and their count is denoted as . For supercomposite\r\nnumbers, it can be estimated as , so by using only the divisors as\r\nstates, we will achieve an asymptotic complexity of .\r\n",
    "name": "F. Small Operations",
    "statement": "Given an integer x and an integer k. In one operation, you can perform\r\none of two actions: choose an integer 1\r\nle a\r\nle k and assign x = x\r\ncdot a; choose an integer 1\r\nle a\r\nle k and assign x =\r\nfrac{x}{a}, where the value of\r\nfrac{x}{a} must be an integer. Find the minimum number of operations\r\nrequired to make the number x equal to y, or determine that it is\r\nimpossible.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "dfs and similar",
        "dp",
        "math",
        "number theory",
        "sortings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Small Operations.json",
    "hint": []
}