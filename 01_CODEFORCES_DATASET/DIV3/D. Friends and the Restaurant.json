{
    "link": "https://codeforces.com//contest/1729/problem/D",
    "problemId": "1538785",
    "problem_idx": "D",
    "shortId": "1729D",
    "contest_number": "1729",
    "problem_submissions": {
        "G": [
            171909059,
            171928158,
            171929650,
            171937957,
            171943890,
            171891847,
            177449161,
            177445327,
            172241447,
            172480345
        ],
        "F": [
            171894944,
            171892697,
            171881447,
            171902682,
            171920680,
            171910535,
            171878146,
            171906331,
            171923271,
            171910232,
            171914792,
            171908912,
            171906528,
            171914845,
            171906947,
            171906893,
            171920671,
            171915782,
            171919661
        ],
        "E": [
            171877179,
            171875756,
            171902704,
            171910299,
            171904162,
            171875139,
            171920658,
            171889898,
            171889626,
            171887188,
            171887680,
            171887875,
            171890844,
            171886351,
            171876648,
            171892405,
            171885680
        ],
        "D": [
            171861022,
            171860553,
            171863068,
            171871491,
            171878349,
            171858368,
            171848378,
            171874244,
            171864332,
            171876318,
            171869512,
            171878854,
            171871746,
            171875870,
            171867532,
            171863495,
            171872346,
            171873328
        ],
        "C": [
            171852852,
            171855742,
            171858347,
            171863945,
            171872549,
            171852373,
            171871529,
            171858052,
            171858976,
            171859379,
            171861408,
            171866242,
            171860889,
            171865107,
            171859758,
            171855447,
            171858502,
            171863966
        ],
        "B": [
            171845132,
            171847312,
            171845642,
            171852489,
            171856806,
            171841700,
            171849120,
            171848235,
            171844034,
            171844485,
            171847383,
            171849511,
            171849845,
            171851995,
            171846552,
            171848340,
            171844748,
            171850134
        ],
        "A": [
            171834897,
            171837470,
            171836390,
            171836406,
            171845837,
            171834988,
            171835540,
            171837958,
            171836211,
            171834933,
            171836834,
            171836016,
            171838691,
            171835898,
            171835047,
            171838527,
            171834668,
            171838404
        ]
    },
    "name": "D. Friends and the Restaurant",
    "statement": "A group of n friends decide to go to a restaurant. Each of the friends\r\nplans to order meals for x_i burles and has a total of y_i burles (1\r\nle i\r\nle n). The friends decide to split their visit to the restaurant into\r\nseveral days. Each day, some group of friends goes to the restaurant.\r\nEach of the friends visits the restaurant no more than once (that is,\r\nthese groups do not intersect). These groups must satisfy the condition\r\nthat the total budget of each group must be than the amount of burles\r\nthat the friends in the group are going to spend at the restaurant. In\r\nother words, the sum of all x_i values in the group must not exceed the\r\nsum of y_i values in the group.What is the maximum number of days\r\nfriends can visit the restaurant?For example, let there be n = 6 friends\r\nfor whom x = [8, 3, 9, 2, 4, 5] and y = [5, 3, 1, 4, 5, 10]. Then: first\r\nand sixth friends can go to the restaurant on the first day. They will\r\nspend 8+5=13 burles at the restaurant, and their total budget is 5+10=15\r\nburles. Since 15\r\nge 13, they can actually form a group. friends with indices 2, 4, 5 can\r\nform a second group. They will spend 3+2+4=9 burles at the restaurant,\r\nand their total budget will be 3+4+5=12 burles (12\r\nge 9). It can be shown that they will not be able to form more groups so\r\nthat each group has at least two friends and each group can pay the\r\nbill.So, the maximum number of groups the friends can split into is 2.\r\nFriends will visit the restaurant for a maximum of two days. Note that\r\nthe 3-rd friend will not visit the restaurant at all.Output the maximum\r\nnumber of days the friends can visit the restaurant for given n, x and\r\ny.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\ntemplate <typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\ntemplate <typename T> using ordered_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>; \n\n#define endl '\\n'\n#define pb push_back\n#define ub upper_bound\n#define lb lower_bound\n#define fi first\n#define se second\n#define int long long\ntypedef long long ll;\ntypedef long double ld;\n#define pii pair<int,int>\n#define sz(x) ((ll)x.size())\n#define fr(a,b,c) for(int a=b; a<=c; a++)\n#define frev(a,b,c) for(int a=c; a>=b; a--)\n#define rep(a,b,c) for(int a=b; a<c; a++)\n#define trav(a,x) for(auto &a:x)\n#define all(con) con.begin(),con.end()\n#define done(x) {cout << x << endl;return;}\n#define mini(x,y) x = min(x,y)\n#define maxi(x,y) x = max(x,y)\nconst ll infl = 0x3f3f3f3f3f3f3f3fLL;\nconst int infi = 0x3f3f3f3f;\nmt19937_64 mt(chrono::steady_clock::now().time_since_epoch().count());\n//const int mod = 998244353;\nconst int mod = 1e9 + 7;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef vector<vector<int>> vvi;\ntypedef vector<pair<int, int>> vpii;\ntypedef map<int, int> mii;\ntypedef set<int> si;\ntypedef set<pair<int,int>> spii;\ntypedef queue<int> qi;\nuniform_int_distribution<int> rng(0, 1e9);\n\n// DEBUG FUNCTIONS START\nvoid __print(int x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(long double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\ntemplate<typename T, typename V> void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\ntemplate<typename T> void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\nvoid deb() {cerr << \"\\n\";}\ntemplate <typename T, typename... V> void deb(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; deb(v...);}\n// DEBUG FUNCTIONS END\n\n\nconst int N = 2e5 + 5;\n\n\nvoid solve()\n{\n    \n    int n;\n    cin >> n;\n\n    vi x(n), y(n);\n\n    rep(i,0,n)\n    {\n        cin >> x[i];\n    }\n\n    rep(i,0,n)\n    {\n        cin >> y[i];\n        y[i] -= x[i];\n    }\n\n\n    sort(all(y), greater<>());\n\n    int ans = 0;\n\n    int j = n - 1;\n\n\n    rep(i,0,n)\n    {\n        while(j > i && y[j] + y[i] < 0)\n        {\n            j--;\n        }\n\n        if(j <= i)\n            break;\n\n        ans++;\n        j--;\n    }\n\n    cout << ans << endl;\n    \n    \n\n\n\n}\n\n\n\n\nsigned main(){\n    \n    ios_base::sync_with_stdio(0), cin.tie(0);\n    cout << fixed << setprecision(15);\n    int t = 1;\n    cin >> t;\n\n    while(t--)\n        solve();\n    return 0;\n}\n\nint powm(int a, int b){\n    int res = 1;\n    while (b) {\n        if (b & 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        b >>= 1;\n    }\n    return res;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings",
        "two pointers"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Friends and the Restaurant.json",
    "editorial_link": "https://codeforces.com//blog/entry/106916",
    "editorial": "First, we sort the friends in descending order of . Now for each friend\r\nwe know the amount of money he lacks, or vice versa, which he has in\r\nexcess.In order to maximize the number of days, it is most advantageous\r\nfor friends to break into pairs. It is the number of groups that\r\nmatters, not the number of people in the group, so adding a third person\r\nto the pair won\u00e2\u0080\u0099t improve the answer in any way.Let\u00e2\u0080\u0099s solve the problem\r\nusing two pointers: for the richest friend, find the first friend from\r\nthe end such that the sum of their values exceeds the sum of their\r\nvalues . Then repeat this for all subsequent friends until the pointers\r\nmeet.If no pair could be formed, or none of the friends has a value\r\ngreater than , then the answer is .Otherwise, print the number of pairs\r\nformed.\r\n"
}