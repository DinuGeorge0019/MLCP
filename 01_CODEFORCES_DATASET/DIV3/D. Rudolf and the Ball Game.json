{
    "link": "https://codeforces.com//contest/1941/problem/D",
    "problemId": "2523370",
    "problem_idx": "D",
    "shortId": "1941D",
    "contest_number": "1941",
    "problem_submissions": {
        "G": [
            250763025,
            250781286,
            250779945,
            250787489,
            250800958,
            250794874,
            250801570,
            250797693,
            250776624,
            250793138,
            250784955,
            250769475,
            250695343,
            250808638,
            250806485,
            250793977,
            250708131
        ],
        "F": [
            250740820,
            250744438,
            250753388,
            250758018,
            250759651,
            250771923,
            250771468,
            250735055,
            250753949,
            250769805,
            250766080,
            250789658,
            250717637,
            250786906,
            250776029,
            250768573,
            250744006
        ],
        "E": [
            250723876,
            250724169,
            250717230,
            250735746,
            250736815,
            250736521,
            250739262,
            250774240,
            250729758,
            250726588,
            250755686,
            250741893,
            250738588,
            250765034,
            250731744,
            250805659,
            250779683
        ],
        "D": [
            250690549,
            250702231,
            250695593,
            250704272,
            250717031,
            250703063,
            250703013,
            250692270,
            250695895,
            250691168,
            250734836,
            250707874,
            250759962,
            250722745,
            250703516,
            250708254,
            250785215
        ],
        "C": [
            250674251,
            250679685,
            250671012,
            250679783,
            250680400,
            250684218,
            250682169,
            250667218,
            250675740,
            250676966,
            250670249,
            250691797,
            250745426,
            250686871,
            250672532,
            250677895,
            250750876
        ],
        "B": [
            250664239,
            250668411,
            250660791,
            250663325,
            250694386,
            250668961,
            250666921,
            250657383,
            250663605,
            250664885,
            250657026,
            250681860,
            250751771,
            250667298,
            250743798,
            250661438,
            250747374
        ],
        "A": [
            250649602,
            250652993,
            250650152,
            250651488,
            250656171,
            250653697,
            250656300,
            250649271,
            250654624,
            250658642,
            250648031,
            250654646,
            250754293,
            250652956,
            250649094,
            250648520,
            250712266
        ]
    },
    "name": "D. Rudolf and the Ball Game",
    "statement": "Rudolf and Bernard decided to play a game with their friends. n people\r\nstand in a circle and start throwing a ball to each other. They are\r\nnumbered from 1 to n in the clockwise order.Let\u2019s call a transition a\r\nmovement of the ball from one player to his neighbor. The transition can\r\nbe made clockwise or counterclockwise.Let\u2019s call the clockwise\r\n(counterclockwise) distance from player y_1 to player y_2 the number of\r\ntransitions clockwise (counterclockwise) that need to be made to move\r\nfrom player y_1 to player y_2. For example, if n=7 then the clockwise\r\ndistance from 2 to 5 is 3, and the counterclockwise distance from 2 to 5\r\nis 4.Initially, the ball is with the player number x (players are\r\nnumbered clockwise). On the i-th move the person with the ball throws it\r\nat a distance of r_i (1\r\nle r_i\r\nle n - 1) clockwise or counterclockwise. For example, if there are 7\r\nplayers, and the 2nd player, after receiving the ball, throws it a\r\ndistance of 5, then the ball will be caught by either the 7th player\r\n(throwing clockwise) or the 4th player (throwing counterclockwise). An\r\nillustration of this example is shown below. The game was interrupted\r\nafter m throws due to unexpected rain. When the rain stopped, the guys\r\ngathered again to continue. However, no one could remember who had the\r\nball. As it turned out, Bernard remembered the distances for each of the\r\nthrows and the direction for of the throws (clockwise or\r\ncounterclockwise).Rudolf asks you to help him and based on the\r\ninformation from Bernard, calculate the numbers of the players who could\r\nhave the ball after m throws.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/rope>\n#define int long long\n#define pb push_back\n#define s second\n#define f first\n#define pf push_front\n#define inf 100000000000000000\n#define bitebi __builtin_popcountll\n#define FOR( i , n ) for( int i = 0 ; i < n ; i ++ )\n#define YES cout <<\"YES\\n\"\n#define NO cout << \"NO\\n\"\n#define debug cout << \"Here Fine\" << endl ;\n#define pr pair < int , int >\n#define fbo find_by_order // returns iterator\n#define ook order_of_key // returns strictly less numbers than key\nusing namespace std ;\n//#pragma GCC optimize(\"Ofast\")\n//#pragma GCC target(\"avx,avx2,fma\")\nusing namespace __gnu_pbds;\nusing namespace __gnu_cxx;\ntemplate<class T> using ordered_set =tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update> ;\nconst double Pi=acos(-1.0);\nconst double EPS=1E-8;\nconst int mod =  1000000007 ;\nconst int mod1 = 998244353 ;\nconst int N = 2e5 + 10 ;\nmt19937 R(time(0));\nmap < int , int > ma , ma1 ;\n\n\nint dp[ 2015 ] , nx_dp[ 1015 ] ;\n\nvoid solve(){\n    int n , m , x ;\n    cin >> n >> m >> x ;\n\tFOR( i , 1015 ) dp[ i ] = -1 ;  \n    dp[ x ] = 1 ;\n    while( m -- ){\n    \tint r ; \n    \tchar c ; \n    \tcin >> r >> c ;\n    \tFOR( i , n ){\n    \t\tnx_dp[ i + 1 ] = -1 ; \n\t\t}\n    \tFOR( i , n ){\n    \t\tint j = i + 1 ; \n    \t\tif( dp[ j ] == -1 ) continue ;\n    \t\tif( c == '0' ){\n    \t\t   j = j + r ; \n\t\t\t   j = j % n ;\n\t\t\t   if( j == 0 ) j = n ;\n\t\t\t   nx_dp[ j ] = 1 ; \t\n\t\t\t} \n\t\t\tif( c == '1' ){\n\t\t\t   j = j - r ;\n\t\t\t   j = j + n ;\n\t\t\t   j %= n ;\n\t\t\t   if( j == 0 ) j = n ; \n\t\t\t   nx_dp[ j ] = 1 ; \n\t\t\t}\n\t\t\tif( c == '?' ){\n\n\t\t\t   int j1 = j - r ;\n\t\t\t   j1 = j1 + n ;\n\t\t\t   j1 %= n ;\n\t\t\t   if( j1 == 0 ) j1 = n ; \n\t\t\t   nx_dp[ j1 ] = 1 ;\n\t\t\t   \n    \t\t   j = j + r ; \n\t\t\t   j = j % n ;\n\t\t\t   if( j == 0 ) j = n ;\n\t\t\t   nx_dp[ j ] = 1 ; \t\t\t    \n\t\t\t}\n\t\t}\n\t\tFOR( i , n ){\n\t\t\tdp[ i + 1 ] = nx_dp[ i + 1 ] ;\n\t\t}\n\t}\n\tint ans = 0 ;\n\tFOR( i , n ) if( dp[ i + 1 ] == 1 ) ans ++ ;\n\tcout << ans << \"\\n\" ; \n\tFOR( i , n ){\n\t\tif( dp[ i + 1 ] == 1 ) cout << i + 1 << \" \" ;\n\t}\n\tcout << \"\\n\" ;\n}\nsigned main() {\n   ios_base::sync_with_stdio(0),cin.tie(NULL),cout.tie(NULL);\n   int t = 1 ; cin >> t ;\n   while( t -- ){\n   \t solve() ;\n   }\n\n}\n\n\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Rudolf and the Ball Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/127018",
    "editorial": "Let\u00e2\u0080\u0099s introduce a set of unique elements , initially containing a single\r\nelement the index of the first player who started the game. For each\r\nfrom to , we will update in such a way as to maintain the set of players\r\nwho could have the ball after the -th throw. For each element of the set\r\n, we will remove from , and also: if \"\" or \"\", add to the element the\r\nindex of the player who will receive the ball in case of a clockwise\r\nthrow; if \"\" or \"\", add to the element the index of the player who will\r\nreceive the ball in case of a counterclockwise throw. The term before\r\nthe operation is necessary to obtain a positive argument of this\r\noperation. Otherwise, in some programming languages, the function will\r\nreturn a negative result, which does not correspond to the semantics of\r\nthe problem. The operation denotes the remainder of the division of by .\r\nIt should be noted that it is not needed to store duplicates in one\r\nindex of the thrower is sufficient for the correct calculation of the\r\nplayers who could have received their throw.After the -th iteration of\r\nthe described cyclic process, the set will contain the desired indices\r\nof all players who could have the ball at the end of the game.At each\r\niteration of the loop, the power of does not exceed , and a total of\r\nexactly iterations will be performed. Thus, the asymptotic complexity of\r\nthe algorithm is of the order .\r\n"
}