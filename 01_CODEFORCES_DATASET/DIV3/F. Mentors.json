{
    "link": "https://codeforces.com//contest/978/problem/F",
    "problemId": "182881",
    "problem_idx": "F",
    "shortId": "978F",
    "contest_number": "978",
    "problem_submissions": {
        "G": [
            38172491,
            38169204,
            38172434,
            38174884,
            38174212,
            38202570,
            38174356,
            38174504,
            38170439,
            38179076,
            38174120,
            38175016,
            38177179,
            38173974,
            38173883,
            38177077,
            38179217,
            38177915,
            38175210
        ],
        "F": [
            38167756,
            38167382,
            38169838,
            38171846,
            38171022,
            38202583,
            38171851,
            38172094,
            38166947,
            38172200,
            38170297,
            38172407,
            38173744,
            38170844,
            38171837,
            38173600,
            38173445,
            38173729,
            38171096,
            38172672
        ],
        "E": [
            38166000,
            38165982,
            38167458,
            38167818,
            38167975,
            38202586,
            38169135,
            38168502,
            38165451,
            38168025,
            38168912,
            38170344,
            38169652,
            38168636,
            38170345,
            38170564,
            38171323,
            38171232,
            38166984
        ],
        "D": [
            38164294,
            38164281,
            38166043,
            38165411,
            38166520,
            38202587,
            38166943,
            38167185,
            38174671,
            38184115,
            38165897,
            38167133,
            38167961,
            38167926,
            38167171,
            38168834,
            38168604,
            38168704,
            38168070,
            38165126
        ],
        "C": [
            38162269,
            38159839,
            38162952,
            38162443,
            38163682,
            38202588,
            38163454,
            38163549,
            38164049,
            38162683,
            38163806,
            38164073,
            38165403,
            38165313,
            38165695,
            38165203,
            38164723,
            38162539,
            38162894
        ],
        "B": [
            38160472,
            38157775,
            38159643,
            38159599,
            38161723,
            38159684,
            38162382,
            38159493,
            38159452,
            38160053,
            38159583,
            38160909,
            38164410,
            38160958,
            38160311,
            38159735,
            38160488
        ],
        "A": [
            38158198,
            38157375,
            38157656,
            38157773,
            38158120,
            38202594,
            38157741,
            38157702,
            38160301,
            38157750,
            38158544,
            38157695,
            38157893,
            38159292,
            38163521,
            38158147,
            38158142,
            38157847,
            38158925
        ]
    },
    "name": "F. Mentors",
    "statement": "In BerSoft n programmers work, the programmer i is characterized by a\r\nskill r_i.A programmer a can be a mentor of a programmer b if and only\r\nif the skill of the programmer a is strictly greater than the skill of\r\nthe programmer b (r_a > r_b) and programmers a and b are not in a\r\nquarrel.You are given the skills of each programmers and a list of k\r\npairs of the programmers, which are in a quarrel (pairs are unordered).\r\nFor each programmer i, find the number of programmers, for which the\r\nprogrammer i can be a mentor.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define DIM 200007\nusing namespace std;\n\nlong long n,k,r[DIM];\nvector<long long> a[DIM],rt;\n\n\nint main()\n{\n    cin>>n>>k;\n\n    for(int i = 1; i <= n; ++i)\n        {\n            cin>>r[i];\n            rt.push_back(r[i]);\n        }\n\n    for(int i = 1; i <= k; ++i)\n    {\n        int v1,v2;\n        cin>>v1>>v2;\n        a[v1].push_back(r[v2]);\n        a[v2].push_back(r[v1]);\n    }\n\n    sort(rt.begin(),rt.end());\n    for(int i = 1; i<=n;++i)\n        sort(a[i].begin(),a[i].end());\n\n    for(int i = 1; i<=n;++i)\n    {\n        long long res = lower_bound(rt.begin(),rt.end(),r[i]) - rt.begin();\n        res -= lower_bound(a[i].begin(),a[i].end(),r[i]) - a[i].begin();\n        cout<<res<<' ';\n    }\n\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Mentors.json",
    "editorial_link": "https://codeforces.com/blog/entry/59430",
    "editorial": "Firstly we should sort all programmers in non-decreasing order of their\r\nskills. Also we need to store initially numbers of the programmers (we\r\ncan user array of pairs skill and initial number of the programmer).We\r\nwill iterate through the programmers from the left to the right. The\r\ncurrent programmer can be a mentor of all programmers to the left of him\r\nafter sort and with who he are not in a quarrel. Let the number of\r\nprogrammers to the left is . Subtract from the number of already\r\nconsidered programmers, who skill equals to the skill of the current\r\nprogrammer (it can be done, for example, with help of ). Also lets brute\r\nall programmers with who the current programmer in a quarrel (we can\r\ninitially save for each programmer the vector of programmers with who he\r\nin a quarell; by analogy with the stoe of graphs) and if the skill of\r\nthe current programmer more than the skill of a programmers, with which\r\nhe in a quarrel, we should decrease on one, because this programmer is\r\nto the left of the current after sort and has been counted in .We should\r\nstore by a number of the current programmer the value as answer for him.\r\n",
    "hint": []
}