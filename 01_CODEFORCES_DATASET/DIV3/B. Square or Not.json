{
    "link": "https://codeforces.com//contest/2008/problem/B",
    "problemId": "2850007",
    "problem_idx": "B",
    "shortId": "2008B",
    "contest_number": "2008",
    "problem_submissions": {
        "H": [
            279136956,
            279175231,
            279161763,
            279179363,
            279181586,
            279168976,
            279216022,
            279614299,
            279182476,
            279209636,
            279208468,
            279207341,
            279210332,
            279350027,
            279217913,
            279220559,
            279216550,
            279220895,
            279220924,
            279302743
        ],
        "G": [
            279119447,
            279152222,
            279151084,
            279131568,
            279192199,
            279163482,
            279207144,
            279160784,
            279362880,
            279111562,
            279178333,
            279161657,
            279296750,
            279200995,
            279191409,
            279192959,
            279209224,
            279173816,
            279190595,
            279189666,
            279155886,
            279187798
        ],
        "F": [
            279104606,
            279131689,
            279118881,
            279127227,
            279115943,
            279103916,
            279131962,
            279356689,
            279077044,
            279134534,
            279099699,
            279292527,
            279106499,
            279150166,
            279167659,
            279130886,
            279186290,
            279121299,
            279117301,
            279134844
        ],
        "E": [
            279097264,
            279123319,
            279112502,
            279113482,
            279140821,
            279152927,
            279147312,
            279181553,
            279142676,
            279163125,
            279188714,
            279161254,
            279138336,
            279154142,
            279156092,
            279140491,
            279154770,
            279110096,
            279153681,
            279116556
        ],
        "D": [
            279079188,
            279103941,
            279108267,
            279089266,
            279105270,
            279092186,
            279119277,
            279128075,
            279092080,
            279120640,
            279166364,
            279126815,
            279110851,
            279134432,
            279119823,
            279121959,
            279088289,
            279095604,
            279098547
        ],
        "C": [
            279075309,
            279090563,
            279107974,
            279084125,
            279095019,
            279080293,
            279095460,
            279192216,
            279081252,
            279108974,
            279132485,
            279093671,
            279089579,
            279098258,
            279105761,
            279109828,
            279083132,
            279080197,
            279089704
        ],
        "B": [
            279070569,
            279078207,
            279107778,
            279079153,
            279085265,
            279120271,
            279088210,
            279097026,
            279076070,
            279110876,
            279124102,
            279123495,
            279082667,
            279084060,
            279083489,
            279098074,
            279099366,
            279076888,
            279076970,
            279080147
        ],
        "A": [
            279068125,
            279068165,
            279106509,
            279068333,
            279073493,
            279112154,
            279077178,
            279083226,
            279068010,
            279081658,
            279079540,
            279073175,
            279071802,
            279068979,
            279070906,
            279069965,
            279068711,
            279069909,
            279068403
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/133509",
    "editorial": "Assume that string was created from the beautiful binary matrix with\r\nsize .If or , then the whole matrix consists of \u00e2\u0080\u00991\u00e2\u0080\u0099. This means that the\r\nstring will have only one character and this is the only case such\r\nhappening. So, if the whole string is constructed out of \u00e2\u0080\u00991\u00e2\u0080\u0099, we print\r\n\"Yes\" only if the size of the string is 4, since only is a good matrix\r\nfor us.Otherwise, we have at least one \u00e2\u0080\u00990\u00e2\u0080\u0099 in the string. Let\u00e2\u0080\u0099s look at\r\nwhat is the index of the first \u00e2\u0080\u00990\u00e2\u0080\u0099. If it has index , since the whole\r\nfirst line and the first character of the first line equal to \u00e2\u0080\u00991\u00e2\u0080\u0099, so\r\nnow, we have a fixed value of (index of the first \u00e2\u0080\u00990\u00e2\u0080\u0099 minus 1) and the\r\nanswer is \"Yes\" only if is the square root of .\r\n",
    "name": "B. Square or Not",
    "statement": "A beautiful binary matrix is a matrix that has ones on its edges and\r\nzeros inside. Today, Sakurako was playing with a beautiful binary matrix\r\nof size r\r\ntimes c and created a binary string s by writing down all the rows of\r\nthe matrix, starting from the first and ending with the r-th. More\r\nformally, the element from the matrix in the i-th row and j-th column\r\ncorresponds to the ((i-1)*c+j)-th element of the string.You need to\r\ncheck whether the beautiful matrix from which the string s was obtained\r\ncould be . In other words, you need to check whether the string s could\r\nhave been build from a beautiful binary matrix (i.e., one where r=c).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;\u00a0namespace std {\u00a0template <int D, typename T>struct Vec : public vector<Vec<D - 1, T>> {    static_assert(D >= 1);    template <typename... Args>    Vec(int n = 0, Args... args) : vector<Vec<D - 1, T>>(n, Vec<D - 1, T>(args...)) {}};\u00a0template <typename T>struct Vec<1, T> : public vector<T> {    Vec(int n = 0, T val = T()) : std::vector<T>(n, val) {}};\u00a0template <class Fun>class y_combinator_result {    Fun fun_;\u00a0   public:    template <class T>    explicit y_combinator_result(T &&fun) : fun_(std::forward<T>(fun)) {}\u00a0    template <class... Args>    decltype(auto) operator()(Args &&...args) {        return fun_(std::ref(*this), std::forward<Args>(args)...);    }};\u00a0template <class Fun>decltype(auto) y_combinator(Fun &&fun) {    return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));}\u00a0}  // namespace std\u00a0int32_t main() {    ios_base::sync_with_stdio(0);    cin.tie(0);\u00a0    int t;    cin >> t;    while (t--) {        int n;        string s;        cin >> n >> s;        int x = sqrt(n);        if (x * x != n) {            cout << \"NO\\n\";        } else {            bool ok = 1;            for (int i = 0; i < x; i++) {                for (int j = 0; j < x; j++) {                    if (i == 0 || j == 0 || i == x - 1 || j == x - 1) {                        if (s[i * x + j] == '0') ok = 0;                    } else {                        if (s[i * x + j] == '1') ok = 0;                    }                }            }            cout << (ok ? \"YES\\n\" : \"NO\\n\");        }    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Square or Not.json"
}