{
    "link": "https://codeforces.com//contest/1674/problem/C",
    "problemId": "1387199",
    "problem_idx": "C",
    "shortId": "1674C",
    "contest_number": "1674",
    "problem_submissions": {
        "G": [
            155646371,
            155678319,
            155682648,
            155674622,
            155685706,
            155652398,
            155774505,
            155758418,
            155756941,
            155756549,
            155813512,
            155812905,
            155812142,
            155668112,
            155672472,
            155679227
        ],
        "E": [
            155631011,
            155634103,
            155643152,
            155675920,
            155631080,
            155651713,
            155617544,
            155694232,
            155715039,
            155714839,
            155714791,
            155637067,
            155642168,
            155638571,
            155649103,
            155635417,
            155641093,
            155646304,
            155721408,
            155721277,
            155636472,
            155697116,
            155650091,
            155644616
        ],
        "D": [
            155618739,
            155613748,
            155616684,
            155656367,
            155626968,
            155608446,
            155610953,
            155612083,
            155611734,
            155659957,
            155623954,
            155619138,
            155624149,
            155621266,
            155624757,
            155627320,
            155618076,
            155634919,
            155611685,
            155616988
        ],
        "F": [
            155617525,
            155657845,
            155669742,
            155653200,
            155666820,
            155638184,
            155625715,
            155652009,
            155672980,
            155630184,
            155664338,
            155667869,
            155668832,
            155674578,
            155651745,
            155669165,
            155649876,
            155663032,
            155653319,
            155665427
        ],
        "C": [
            155604778,
            155603079,
            155604115,
            155615008,
            155611152,
            155601227,
            155598610,
            155598459,
            155599303,
            155601929,
            155605133,
            155602572,
            155609155,
            155606549,
            155606406,
            155613995,
            155599916,
            155616867,
            155601683,
            155604335
        ],
        "B": [
            155596261,
            155597272,
            155595696,
            155604402,
            155605300,
            155597345,
            155593808,
            155599168,
            155593898,
            155596784,
            155597719,
            155597183,
            155602563,
            155597000,
            155600384,
            155600158,
            155595285,
            155605630,
            155596236,
            155595482
        ],
        "A": [
            155592021,
            155592145,
            155591844,
            155602088,
            155598548,
            155592326,
            155591501,
            155592241,
            155591537,
            155593757,
            155591678,
            155592049,
            155596267,
            155592804,
            155593311,
            155594974,
            155592005,
            155594331,
            155593247,
            155592088
        ]
    },
    "name": "C. Infinite Replacement",
    "statement": "You are given a string s, consisting only of Latin letters \u2019a\u2019, and a\r\nstring t, consisting of lowercase Latin letters.In one move, you can\r\nreplace any letter \u2019a\u2019 in the string s with a string t. Note that after\r\nthe replacement string s might contain letters other than \u2019a\u2019.You can\r\nperform an arbitrary number of moves (including zero). How many\r\ndifferent strings can you obtain? Print the number, or report that it is\r\ninfinitely large.Two strings are considered different if they have\r\ndifferent length, or they differ at some index.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\nusing ll = long long;\nconst ll inf = 1e9;\nconst int md1 = 1e9+7;\n\n#define all(v)                      v.begin(), v.end()\n#define rall(v)                     v.rbegin(), v.rend()\n#define sz(v)                       ((int)v.size())\n\n#define forn(i,n)                   for(int i = 0; i < n; ++i)\n#define forbe(i,b,e)                for(int i = b; i < e; ++i)\n\n#define pb                          push_back\n\n#define pry                         puts(\"YES\")\n#define prn                         puts(\"NO\")\n#define endl                        '\\n'\n\n#define fst                         first\n#define scn                         second\n\nvoid solve(){\n    string s;\n    cin >> s;\n    string t;\n    cin >> t;\n\n    if (sz(t) == 1 && t[0] == 'a'){\n        cout << 1 << endl;\n        return;\n    }\n\n    for (auto u : t){\n        if (u == 'a'){\n            cout << \"-1\\n\";\n            return;\n        }\n    }\n\n    ll ans = 1;\n\n    for(int i = 0; i < sz(s); ++i){\n        ans = (ans << 1);\n    }\n\n    cout << ans << endl;\n}\n\nint32_t main(){\n    #ifndef ONPC\n        ios_base::sync_with_stdio(0);cin.tie(0);\n    #else\n        freopen(\"in\", \"r\", stdin);\n    #endif\n    int t = 1;\n    cin >> t;\n    while(t--)\n        solve();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "implementation",
        "strings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Infinite Replacement.json",
    "editorial_link": "https://codeforces.com//blog/entry/102482",
    "editorial": "Let\u00e2\u0080\u0099s consider some cases.If there are letters \u00e2\u0080\u0099a\u00e2\u0080\u0099 in string , then the\r\nmoves can be performed endlessly. If itself is equal to \"a\", then the\r\nstring won\u00e2\u0080\u0099t change, so the answer is . Otherwise, the length of is\r\nleast , so string will be increasing in length after each move, and the\r\nanswer is .If there are no letters \u00e2\u0080\u0099a\u00e2\u0080\u0099 in string , then the resulting\r\nstring is only determined by whichever letters \u00e2\u0080\u0099a\u00e2\u0080\u0099 we chose to replace\r\nwith . That\u00e2\u0080\u0099s because once we replace a letter \u00e2\u0080\u0099a\u00e2\u0080\u0099 with string , we can\r\ndo nothing with the new letters anymore.We can actually imagine that is\r\nequal to \"b\", and the answer won\u00e2\u0080\u0099t change. Now it\u00e2\u0080\u0099s easy to see that the\r\nanswer is equal to the number of strings of length , consisting only of\r\nletters \u00e2\u0080\u0099a\u00e2\u0080\u0099 and \u00e2\u0080\u0099b\u00e2\u0080\u0099. There are two options for each position, and there\r\nare positions, so the answer is .Overall complexity: per testcase.\r\n"
}