{"link": "https://codeforces.com//contest/1714/problem/B", "problemId": "1490428", "problem_idx": "B", "shortId": "1714B", "contest_number": "1714", "problem_submissions": {"F": [166579305, 166565691, 166580443, 166573014, 166573474, 166592525, 166595105, 166548029, 166593205, 166686575, 166579941, 166590847, 166638992, 167603752], "D": [166555174, 166529424, 166533941, 166553024, 166532466, 166537534, 166569263, 166563818, 166546107, 166686361, 166550012, 166577360, 166525263, 166545147, 166538583, 166541251, 166536599, 166539458, 166766162, 166567140, 166550628, 166541107], "G": [166545336, 166572008, 166558804, 166581190, 166549499, 166568428, 166563357, 166570492, 166570829, 166686732, 166586648, 166587656, 166562027, 166554683, 166566856, 166569305, 166581306, 166572830, 166766125, 166554830, 166567931, 166573074], "E": [166529226, 166550151, 166552214, 166540138, 166557091, 166551342, 166540892, 166583808, 166558113, 166686473, 166559850, 203226761, 166572711, 166543154, 166563505, 166554394, 166558430, 166551333, 166551809, 166536566, 166532529, 166559461], "C": [166508236, 166513547, 166511820, 166514654, 166516790, 166512293, 166728853, 166510608, 166524319, 166522144, 166686237, 166521175, 166545986, 166510036, 166508148, 166522114, 166515443, 166510078, 166516228, 166524460, 166519794, 166509906], "B": [166507200, 166510494, 166509013, 166507825, 166510367, 166509254, 166728113, 166507901, 166516960, 166518989, 166685849, 166514261, 166539890, 166507950, 166506803, 166510018, 166509016, 166508114, 166511943, 166508752, 166512719, 166508756], "A": [166506659, 166508343, 166507357, 166506909, 166560580, 166507658, 166727935, 166506862, 166512344, 166510563, 166511944, 166685755, 166510846, 166535694, 166506790, 166510397, 166508153, 166507023, 166506968, 166508973, 166507229, 166507722, 166506864]}, "name": "B. Remove Prefix", "statement": "Polycarp was presented with some sequence of integers a of length n (1\r\nle a_i\r\nle n). A sequence can make Polycarp happy only if it consists of numbers\r\n(i.e. distinct numbers).In order to make his sequence like this,\r\nPolycarp is going to make some (possibly zero) number of moves.In one\r\nmove, he can: remove the first (leftmost) element of the sequence. For\r\nexample, in one move, the sequence [3, 1, 4, 3] will produce the\r\nsequence [1, 4, 3], which consists of different numbers.Determine the\r\nminimum number of moves he needs to make so that in the remaining\r\nsequence all elements are different. In other words, find the length of\r\nthe smallest prefix of the given sequence a, after removing which all\r\nvalues in the sequence will be unique.\r\n", "solutions": ["/*\nDiv 3, I literally don't care edition\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define rep(i,m,n) for (ll i=m;i<=n;i++)\n#define reb(i,m,n) for (ll i=m;i>=n;i--)\n#define rv(i,vt) for (auto i:vt)\n#define ii pair<ll,ll>\n#define vi vector<ll>\n#define F first\n#define S second\n#define pb push_back\nusing namespace std;\nconst ll N=1e6+5,mod=1e9+7;\nll n,a[N],d[N];\nvoid solo()\n{\n   cin>>n;\n   rep(i,1,n) cin>>a[i],d[a[i]]=0;\n   reb(i,n,1) if (d[a[i]]==0) d[a[i]]=1;\n   else{\n       cout<<i;\n       return;\n   }\n   cout<<0;\n}\nint main()\n{\n   ios_base::sync_with_stdio(0);\n   cin.tie(0);\n   cout.tie(0);\n   ll ts=1;\n   cin>>ts;\n   while (ts--){\n       solo();\n       cout<<endl;\n   }\n}"], "input": "", "output": "", "tags": ["data structures", "greedy", "implementation"], "dificulty": "800", "interactive": false}