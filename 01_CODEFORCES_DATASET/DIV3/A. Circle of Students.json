{
    "link": "https://codeforces.com//contest/1203/problem/A",
    "problemId": "388102",
    "problem_idx": "A",
    "shortId": "1203A",
    "contest_number": "1203",
    "problem_submissions": {
        "A": [
            58744193,
            58717652,
            58743556,
            58718250,
            58744628,
            58720766,
            58718623,
            58719826,
            58719026,
            58719223,
            58720907,
            58718806,
            58718313,
            58731049,
            58724059,
            58717997,
            58717665,
            58717946
        ],
        "B": [
            58741838,
            58722288,
            58747764,
            58720873,
            58719714,
            58728242,
            58723125,
            58722876,
            58865722,
            58741989,
            58719552,
            58723345,
            58738132,
            58725543,
            58726008,
            58742758,
            58718353,
            58720068,
            58720276
        ],
        "C": [
            58738864,
            58722717,
            58723287,
            58726641,
            58723731,
            58747526,
            58725554,
            58728497,
            58720084,
            58730777,
            58722069,
            58725768,
            58733799,
            58727591,
            58734639,
            58733064,
            58793949,
            58719804,
            58718232,
            58722089
        ],
        "D1": [
            58737392,
            58740598,
            58737907,
            58751996,
            58752736,
            58722723,
            58735762,
            58744374,
            58731531,
            58736531,
            58746441,
            58753046,
            58727783,
            58754349,
            58747632,
            58763319,
            58722454,
            58723392,
            58724890
        ],
        "E": [
            58737277,
            58725591,
            58727402,
            58730046,
            58728565,
            58717897,
            58745296,
            58733445,
            58726761,
            58739529,
            58754025,
            58729672,
            58719104,
            58747836,
            58757692,
            58749403,
            58794584,
            58725337,
            58726752,
            58739914
        ],
        "F1": [
            58734163,
            58754154,
            58748943,
            58753166,
            58758119,
            58747862,
            58740845,
            58761872,
            58770577,
            58756509,
            58762270,
            58761662,
            58765489,
            58764589,
            58758207,
            58770681,
            58768272,
            58774089
        ],
        "D2": [
            58733429,
            58736615,
            58737493,
            58747587,
            58752636,
            58721716,
            58732204,
            58743923,
            58747785,
            58752110,
            58747809,
            58752550,
            58726134,
            58749055,
            58750977,
            58763703,
            58725996,
            58733867,
            58733265
        ],
        "F2": [
            58728336,
            58758593,
            58745831,
            58764824,
            58759012,
            58758260,
            58825408,
            58785361,
            58812387,
            58768141,
            59394735,
            58845496,
            58845431
        ]
    },
    "name": "A. Circle of Students",
    "statement": "There are n students standing in a circle in some order. The index of\r\nthe i-th student is p_i. It is guaranteed that all indices of students\r\nare distinct integers from 1 to n (i. e. they form a\r\npermutation).Students want to start a round dance. A round dance can be\r\nstarted if the student 2 comes right after the student 1 in clockwise\r\norder (there are no students between them), the student 3 comes right\r\nafter the student 2 in clockwise order, and so on, and the student n\r\ncomes right after the student n - 1 in clockwise order. A round dance is\r\nalmost the same thing the only difference is that the student i should\r\nbe right after the student i - 1 in counterclockwise order (this\r\ncondition should be met for every i from 2 to n). For example, if the\r\nindices of students listed in clockwise order are [2, 3, 4, 5, 1], then\r\nthey can start a clockwise round dance. If the students have indices [3,\r\n2, 1, 4] in clockwise order, then they can start a counterclockwise\r\nround dance.Your task is to determine whether it is possible to start a\r\nround dance. Note that the students cannot change their positions before\r\nstarting the dance; they cannot swap or leave the circle, and no other\r\nstudent can enter the circle. You have to answer q independent queries.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nbool ok(const vector<int> &a) {\n    for (int i = 0; i < a.size(); ++i) if (a[i] == 1) {\n        for (int j = i, v = 1; v <= a.size(); ++v, j = (j + 1) % a.size()) {\n            if (a[j] != v) {\n                return false;\n            }\n        }\n        break;\n    }\n    return true;\n}\n\nint main() {\n    int q; cin >> q;\n    while (q--) {\n        int n; cin >> n;\n        vector<int> a(n);\n        for (int i = 0; i < n; ++i) cin >> a[i];\n        bool yes = ok(a);\n        reverse(begin(a), end(a));\n        yes |= ok(a);\n        cout << (yes ? \"YES\" : \"NO\") << endl;\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Circle of Students.json",
    "editorial_link": "https://codeforces.com//blog/entry/69108",
    "editorial": "We just need to find the position of the in the array and then check if\r\nthe sequence is going counterclockwise or clockwise from the position or\r\ncorrespondingly. We can do this by two cycles.Total complexity: .\r\n"
}