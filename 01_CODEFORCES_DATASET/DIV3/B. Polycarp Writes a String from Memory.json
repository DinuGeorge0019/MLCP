{
    "link": "https://codeforces.com//contest/1702/problem/B",
    "problemId": "1456427",
    "problem_idx": "B",
    "shortId": "1702B",
    "contest_number": "1702",
    "problem_submissions": {
        "F": [
            163542113,
            163514028,
            163524616,
            163733546,
            163545296,
            163524924,
            163529358,
            163536513,
            163519866,
            163525233,
            163564879,
            163534380,
            163538783,
            163561947,
            163540969,
            163535655,
            163561064,
            163562404,
            163544085,
            163519016
        ],
        "G2": [
            163534991,
            163559407,
            163548172,
            163549996,
            163554176,
            163540379,
            163557182,
            163571429,
            163575000,
            163545502,
            163571447,
            163565952,
            163549470,
            163566226,
            163577860,
            163531079,
            163555250,
            163574346,
            163573572
        ],
        "G1": [
            163534865,
            163559321,
            163548387,
            163550273,
            163555106,
            163540096,
            163557483,
            163571026,
            163549886,
            163545065,
            163540644,
            163566213,
            163549672,
            163557387,
            163546571,
            163531433,
            163554999,
            163574214,
            163573379
        ],
        "E": [
            163505777,
            163504465,
            163513283,
            163513644,
            163510195,
            163546834,
            163520208,
            163505881,
            163516258,
            163517435,
            163526737,
            163516735,
            163506369,
            163532804,
            163528744,
            163567339,
            163567093,
            163519899,
            163524058,
            163508144
        ],
        "D": [
            163487820,
            163493027,
            163495875,
            163501404,
            163498661,
            163506170,
            163499925,
            163492796,
            163488953,
            163500375,
            163495848,
            163492570,
            163483263,
            163496253,
            163491216,
            163495136,
            163508155,
            163491736,
            163485984
        ],
        "C": [
            163479124,
            163482190,
            163488652,
            163621464,
            163492523,
            163493122,
            163498422,
            163492339,
            163483795,
            163482325,
            165952921,
            163494102,
            163486863,
            163484454,
            163478228,
            163483131,
            163484825,
            163489721,
            163494820,
            163481705,
            163480845
        ],
        "B": [
            163471434,
            163474194,
            163479257,
            163481288,
            163480379,
            163488341,
            163485489,
            163475757,
            163474641,
            163485384,
            163491538,
            163474852,
            163473580,
            163475855,
            163477521,
            163484846,
            163484562,
            163474319,
            163475121
        ],
        "A": [
            163468217,
            163469784,
            163473310,
            163468633,
            163472585,
            163470981,
            163470350,
            163469302,
            163470110,
            163473679,
            163468658,
            163468889,
            163468241,
            163490145,
            163470656,
            163480525,
            163486237,
            163468246,
            163469702
        ]
    },
    "name": "B. Polycarp Writes a String from Memory",
    "statement": "Polycarp has a poor memory. Each day he can remember no more than 3 of\r\ndifferent letters. Polycarp wants to write a non-empty string of s\r\nconsisting of lowercase Latin letters, taking number of days. In how\r\nmany days will he be able to do it?Polycarp initially has an empty\r\nstring and can only add characters to the end of that string.For\r\nexample, if Polycarp wants to write the string , he will do it in 2\r\ndays: on the first day Polycarp will memorize the letters , , and write\r\n; On the second day Polycarp will remember the letters , , , add to the\r\nresulting line and get the line . If Polycarp wants to write the string\r\n, he will do it in 4 days: in the first day will be written part ; on\r\nday two will be written part ; on the third day, part of will be\r\nwritten; on the fourth day, part of will be written. For a given string\r\ns, print the minimum number of days it will take Polycarp to write it.\r\n",
    "solutions": [
        "/*\nPlaying Div.3, easy edition\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define rep(i,m,n) for (auto i=m;i<=n;i++)\n#define reb(i,m,n) for (auto i=m;i>=n;i--)\n#define rv(i,vt) for (auto i:vt)\n#define ii pair<ll,ll>\n#define vi vector<ll>\n#define F first\n#define S second\n#define pb push_back\nusing namespace std;\nconst ll N=1e6+5,mod=1e9+7;\nll n,k,c,a[N],d[N];\nvoid solo()\n{\n    string s;\n    cin>>s;\n    rep(i,97,138) d[i]=0;\n    k=0;\n    c=0;\n    rep(i,0,s.size()-1){\n        if (d[s[i]]==0){\n            c++;\n            if (c>3){\n                rep(j,97,138) d[j]=0;\n                k++;\n                c=1;\n            }\n            d[s[i]]++;\n        }\n    }\n    cout<<k+1;\n}\nint main()\n{\n   ios_base::sync_with_stdio(0);\n   cin.tie(0);\n   cout.tie(0);\n   ll ts=1;\n   cin>>ts;\n   while (ts--){\n       solo();\n       cout<<endl;\n   }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Polycarp Writes a String from Memory.json",
    "editorial_link": "https://codeforces.com//blog/entry/104763",
    "editorial": "Let us simulate the process. We store a set consisting of letters that\r\nPolycarp memorizes on one day. Gradually dial the set . If the size of\r\nexceeds , we add to the day counter and clear .\r\n"
}