{
    "link": "https://codeforces.com//contest/2000/problem/B",
    "problemId": "2814028",
    "problem_idx": "B",
    "shortId": "2000B",
    "contest_number": "2000",
    "problem_submissions": {
        "H": [
            276260761,
            276254307,
            276338511,
            276338125,
            276287387,
            276274340,
            276297740,
            276283267,
            276239793
        ],
        "G": [
            276214295,
            276274205,
            276334839,
            276268681,
            276267752,
            276333913,
            276264214,
            276282487,
            276272917,
            276276698,
            276277916,
            276283043,
            276274434,
            276291075,
            276278976,
            276290903,
            276279110,
            276279777
        ],
        "F": [
            276187296,
            276292316,
            276241660,
            276217578,
            276210913,
            276233999,
            276287795,
            276243858,
            276234274,
            276242694,
            276256602,
            276245569,
            276246137,
            276247924,
            276245207,
            276252538,
            276247124,
            276252754
        ],
        "E": [
            276164357,
            276333842,
            276186649,
            276185811,
            276179141,
            276203373,
            276182533,
            276188814,
            276185638,
            276210532,
            276225686,
            276198909,
            276209550,
            276178261,
            276202986,
            276227179,
            276202989,
            276229818,
            276227160
        ],
        "D": [
            276136722,
            276189642,
            276169653,
            276164982,
            276157636,
            276177807,
            276157222,
            276166197,
            276153213,
            276123696,
            276151555,
            276167672,
            276198896,
            276149967,
            276172892,
            276184459,
            276158053,
            276189336,
            276175071,
            276189558
        ],
        "C": [
            276127716,
            276172717,
            276135515,
            276132005,
            276139984,
            276155253,
            276134367,
            276142615,
            276142046,
            276180920,
            276133384,
            276141737,
            276151150,
            276139308,
            276147822,
            276167768,
            276145316,
            276158457,
            276159660,
            276137717
        ],
        "B": [
            276113898,
            276143388,
            276119169,
            276116606,
            276127808,
            276130717,
            276117856,
            276125745,
            276187672,
            276126451,
            276118391,
            276127646,
            276126167,
            276125801,
            276113780,
            276142176,
            276122501,
            276133620,
            276118200,
            276121342
        ],
        "A": [
            276110192,
            276136464,
            276111783,
            276110916,
            276119966,
            276120191,
            276111146,
            276116630,
            276117760,
            276111077,
            276112237,
            276116291,
            276115237,
            276115760,
            276110510,
            276123000,
            276110417,
            276117261,
            276112340,
            276130762
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132689",
    "editorial": "To solve the problem, it is enough to use an array of size (maximal\r\nvalue ) consisting of boolean variables. When a passenger gets on the\r\nbus to seat , we will replace the value of with true. Then, for all\r\npassengers, starting from the second one, we should check that at least\r\none of the existing elements or has the value true. If this condition is\r\nnot satisfied, the answer to the problem is \"\". If at least occupied\r\nneighbouring seat always existed for all passengers at the moment they\r\ntook their seat the answer is \"\".\r\n",
    "name": "B. Seating in a Bus",
    "statement": "In Berland, a bus consists of a row of n seats numbered from 1 to n.\r\nPassengers are advised to always board the bus following these rules: If\r\nthere are no occupied seats in the bus, a passenger can sit in any free\r\nseat; Otherwise, a passenger should sit in any free seat that has at\r\nleast one occupied neighboring seat. In other words, a passenger can sit\r\nin a seat with index i (1\r\nle i\r\nle n) only if at least one of the seats with indices i-1 or i+1 is\r\noccupied. Today, n passengers boarded the bus. The array a\r\nchronologically records the seat numbers they occupied. That is, a_1\r\ncontains the seat number where the first passenger sat, a_2 the seat\r\nnumber where the second passenger sat, and so on.You know the contents\r\nof the array a. Determine whether all passengers followed the\r\nrecommendations.For example, if n = 5, and a = [5, 4, 2, 1, 3], then the\r\nrecommendations were not followed, as the 3-rd passenger sat in seat\r\nnumber 2, while the neighboring seats with numbers 1 and 3 were free.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#include<array>using namespace std;#define ll long long#define int long long#define y1 idfsu#define PII pair<int, int>#define fi first#define se second#define endl \"\\n\"const int MAX = 1e9;const int MAXN = 1e6 + 10;const int mod = 1e9 + 7;const int N = 200010;int aa[200010];void solve(){    int n;    cin >> n;    int z = 1;    for (int i = 1; i <= n; i++)        aa[i] = 0;    aa[n + 1] = 0;    int a;    cin >> a;    aa[a] = 1;    for (int i = 2; i <= n; i++)    {        int a;        cin >> a;        if (!aa[a - 1] && !aa[a + 1])            z = 0;        aa[a] = 1;    }    if (z)        cout << \"YES\\n\";    else        cout << \"NO\\n\";}signed main(){    ios::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);    int T = 1;    cin >> T;    while (T--)        solve();    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "two pointers"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Seating in a Bus.json"
}