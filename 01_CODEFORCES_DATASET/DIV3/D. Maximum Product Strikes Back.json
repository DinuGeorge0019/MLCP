{
    "link": "https://codeforces.com//contest/1660/problem/D",
    "problemId": "1349758",
    "problem_idx": "D",
    "shortId": "1660D",
    "contest_number": "1660",
    "problem_submissions": {
        "F1": [
            151547102,
            151550004,
            151556961,
            151561107,
            152978236,
            151550675,
            151561323,
            151596179,
            151595243,
            151575027,
            151566711,
            151559623,
            151557836,
            151517033,
            151568295,
            151559969,
            151568720,
            151557907,
            151582251,
            151579930,
            151557285,
            151574893,
            151574565,
            151562629
        ],
        "F2": [
            151547014,
            151546872,
            151557177,
            151562642,
            151572516,
            151564512,
            151576252,
            151573626,
            151582683,
            151534999,
            151575687,
            151571693,
            151586409,
            151576536,
            151582511,
            151579993,
            151572690,
            151574663,
            151588223,
            151592536,
            151592473
        ],
        "D": [
            151536977,
            151531465,
            151548742,
            151544876,
            151565576,
            151552307,
            151540121,
            151546219,
            151566389,
            151546387,
            151551910,
            151560561,
            151552594,
            151547123,
            151585775,
            151548480,
            151568426,
            151565752,
            151535411
        ],
        "E": [
            151525872,
            151545578,
            151554108,
            151554403,
            151545248,
            151556608,
            151552575,
            151530576,
            151571474,
            151558277,
            151578411,
            151541773,
            151585933,
            151577061,
            151547981,
            151551718,
            151578968,
            151569807,
            151537268
        ],
        "C": [
            151521399,
            151518644,
            151534007,
            151531901,
            152978204,
            151528259,
            151524137,
            151544564,
            151553145,
            151553027,
            151553923,
            151606337,
            151534920,
            151528160,
            151532624,
            151527489,
            151538904,
            151547071,
            151543618,
            151548209,
            151522441
        ],
        "B": [
            151518226,
            151511243,
            151513483,
            151524120,
            151516768,
            151514262,
            151517162,
            151521061,
            151542405,
            151521485,
            151521685,
            151517284,
            151514144,
            151516159,
            151521136,
            151521193,
            151528983,
            151527060,
            151511556
        ],
        "A": [
            151508580,
            151507746,
            151508237,
            151517215,
            151507971,
            151508603,
            152300737,
            151508040,
            151508134,
            151537652,
            151507999,
            151510953,
            151511142,
            151509365,
            151510995,
            151509112,
            151523384,
            151509588,
            151513758,
            151515112
        ]
    },
    "name": "D. Maximum Product Strikes Back",
    "statement": "You are given an array a consisting of n integers. For each i (1\r\nle i\r\nle n) the following inequality is true: -2\r\nle a_i\r\nle 2.You can remove any number (possibly 0) of elements from the\r\nbeginning of the array and any number (possibly 0) of elements from the\r\nend of the array. You are allowed to delete the whole array.You need to\r\nanswer the question: how many elements should be removed from the\r\nbeginning of the array, and how many elements should be removed from the\r\nend of the array, so that the result will be an array whose product\r\n(multiplication) of elements is . If there is more than one way to get\r\nan array with the maximum product of elements on it, you are allowed to\r\noutput of them. The product of elements of an array (array of length 0)\r\nshould be assumed to be 1.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n\n#define pb push_back\n#define int long long\n#define all(x) x.begin(), (x).end()\n#define rall(x) x.rbegin(), (x).rend()\n#define ld long double\nusing namespace std;\n\nvoid solve() {\n  int n;\n  cin >> n;\n  vector<int> a(n);\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n  }\n  vector<int> lf, rf;\n  int cnt = 0;\n  for (int i = 0; i < n; i++) {\n    int x = a[i];\n    if (x) {\n      cnt++;\n    } else {\n      rf.pb(i - 1);\n      lf.pb(i - cnt);\n      cnt = 0;\n    }\n  }\n  rf.pb(n - 1);\n  lf.pb(n - cnt);\n  int m = (int) lf.size();\n  int ans = 0;\n  int x = n, y = 0;\n  for (int j = 0; j < m; j++) {\n\n    int ng = 0, c2 = 0, fng = -1, lng = -1;\n    for (int i = lf[j]; i <= rf[j]; i++) {\n      ng += (a[i] < 0);\n      c2 += (abs(a[i]) == 2);\n      if (a[i] < 0) {\n        if (fng == -1) {\n          fng = i;\n        }\n        lng = i;\n      }\n    }\n\n    if (ng % 2 == 0) {\n      if (c2 > ans) {\n        ans = c2;\n        x = lf[j];\n        y = n - 1 - rf[j];\n      }\n    } else {\n      c2 = 0;\n      for (int i = fng + 1; i <= rf[j]; i++) {\n        c2 += ((abs(a[i]) == 2));\n      }\n      if (c2 > ans) {\n        ans = c2;\n        x = fng + 1;\n        y = n - 1 - rf[j];\n      }\n      c2 = 0;\n      for (int i = lf[j]; i <= lng - 1; i++) {\n        c2 += ((abs(a[i]) == 2));\n      }\n      if (c2 > ans) {\n        ans = c2;\n        x = lf[j];\n        y = n - 1 - (lng - 1);\n      }\n    }\n  }\n\n  cout << x << ' ' << y << '\\n';\n}\n\n\nsigned main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math",
        "two pointers"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Maximum Product Strikes Back.json",
    "editorial_link": "https://codeforces.com//blog/entry/101526",
    "editorial": "First, we can always get a product value equal to if we remove all\r\nelements of the array. Then we need to know what maximal value of the\r\nproduct we can get. Consequently, the remaining array (after removing\r\nthe corresponding prefix and suffix) should have no elements. We can\r\nfind maxima in all sections between zeros. Now we are left with a set of\r\nnonzero numbers. If the value of the product on the current segment is\r\npositive, it makes no sense to remove any more elements. Otherwise, the\r\nproduct is negative, then we must remove one negative number from the\r\nproduct (either to the left or to the right). Compare the values of the\r\nproduct on the prefix and suffix to the nearest negative value, and\r\nremove either the suffix or the prefix, respectively.\r\n"
}