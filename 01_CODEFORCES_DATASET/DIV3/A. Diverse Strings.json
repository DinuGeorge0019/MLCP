{
    "link": "https://codeforces.com//contest/1144/problem/A",
    "problemId": "322482",
    "problem_idx": "A",
    "shortId": "1144A",
    "contest_number": "1144",
    "problem_submissions": {
        "G": [
            52105008,
            52115875,
            52124809,
            52311146,
            52118351,
            52313030
        ],
        "E": [
            52101381,
            52103848,
            52100390,
            52103649,
            52104862,
            52109101,
            52102842,
            52107540,
            52111264,
            52112468,
            52260664,
            52109742,
            52111378,
            52113457,
            52114606,
            52105560,
            52108689,
            52119398,
            52111986,
            52114107
        ],
        "F": [
            52095886,
            52109100,
            52110494,
            52107320,
            52107378,
            52103623,
            52111392,
            52111875,
            52109029,
            52108638,
            52103543,
            52103345,
            52106901,
            52107210,
            52106754,
            52111935,
            52119339,
            52102752,
            52105488,
            52108153
        ],
        "D": [
            52090019,
            52100588,
            52092311,
            52097671,
            52099406,
            52099269,
            52097110,
            52097725,
            52096933,
            52100380,
            52097140,
            52098645,
            52102773,
            52099192,
            52099366,
            52100428,
            52099939,
            52097949,
            52102364,
            52100814
        ],
        "C": [
            52089034,
            52096181,
            52089279,
            52094055,
            52091090,
            52091960,
            52092409,
            52092424,
            52092267,
            52092714,
            52092539,
            52093040,
            52092790,
            52093635,
            52092887,
            52094789,
            52090226,
            52092962,
            52093892,
            52094692
        ],
        "B": [
            52086626,
            52090793,
            52086733,
            52090174,
            52089416,
            52088582,
            52089163,
            52088931,
            52089378,
            52087490,
            52088380,
            52094345,
            52089645,
            52089638,
            52089793,
            52091232,
            52087215,
            52089217,
            52090678,
            52090945
        ],
        "A": [
            52085844,
            52087003,
            52085711,
            52087471,
            52085997,
            52086503,
            52085607,
            52086179,
            52086274,
            52085411,
            52085724,
            52085963,
            52086646,
            52086484,
            52086097,
            52087942,
            52085314,
            52086675,
            52088201,
            52086796
        ]
    },
    "name": "A. Diverse Strings",
    "statement": "A string is called if it contains consecutive (adjacent) letters of the\r\nLatin alphabet and each letter occurs exactly once. For example, the\r\nfollowing strings are diverse: \"\", \"\", \"\" and \"\". The following string\r\nare diverse: \"\", \"\", \"\" and \"\". Note that the letters \u201d and \u201d are not\r\nadjacent.Formally, consider positions of all letters in the string in\r\nthe alphabet. These positions should form contiguous segment, i.e. they\r\nshould come one by one without any gaps. And all letters in the string\r\nshould be distinct (duplicates are not allowed).You are given a sequence\r\nof strings. For each string, if it is diverse, print \"\". Otherwise,\r\nprint \"\".\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 100000 + 10;\ntypedef long long ll;\nint a[30];\nint main(){\n    int n; cin>>n;\n    while(n--){\n        string s; cin>>s;\n        memset(a,0,sizeof(a));\n        for(int i=0;i<s.size();i++) a[s[i]-'a'+1]++;\n        int cnt = 0;\n        for(int i=1;i<30;i++){\n            if(a[i]&&a[i-1]==0) cnt++;\n            if(a[i]>1) cnt = 10;\n        }\n        if(cnt==1){\n            cout<<\"Yes\"<<endl;\n        }\n        else{\n            cout<<\"No\"<<endl;\n        }\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Diverse Strings.json",
    "editorial_link": "https://codeforces.com/blog/entry/66307",
    "editorial": "The string is diverse if it is a permutation of some substring of the\r\nLatin alphabet (\"\").In other words, the string is diverse if all letters\r\nin it are distinct (we can check it using some structure like or array\r\nof used elements) and if the number of letters between the letter with\r\nthe maximum alphabet position and the letter with the minimum alphabet\r\nposition plus one is exactly the length of the string. For example, the\r\nposition in alphabet of letter \u00e2\u0080\u009d is one, the position of letter \u00e2\u0080\u009d is six\r\nand so on.\r\n"
}