{
    "link": "https://codeforces.com//contest/1986/problem/E",
    "problemId": "2714657",
    "problem_idx": "E",
    "shortId": "1986E",
    "contest_number": "1986",
    "problem_submissions": {
        "G2": [
            267051586,
            267098517,
            267207124,
            267227692
        ],
        "G1": [
            267050167,
            267075101,
            267042149,
            267064735,
            267062041,
            267072094,
            267189212,
            267907699,
            267227655
        ],
        "F": [
            267036897,
            267006951,
            267211888,
            267210735,
            267209305,
            267209191,
            267142479,
            267067023,
            267046217,
            267049909,
            267055692,
            267026922,
            267034254,
            267024454,
            267035130,
            267043900,
            267043428,
            267046638,
            267048369,
            267046109,
            267054071,
            267044101,
            267051585,
            267055127
        ],
        "E": [
            267031182,
            267035399,
            267025961,
            267037775,
            267044980,
            267032730,
            267010850,
            267025710,
            267050692,
            267025261,
            267026751,
            267028762,
            267028451,
            267027196,
            267036783,
            267025470,
            267030110,
            267036403,
            267037341
        ],
        "D": [
            267019160,
            267019752,
            267011405,
            267021594,
            267023740,
            267014893,
            267011680,
            267009591,
            267007109,
            267005474,
            267006461,
            267009567,
            267009731,
            267006448,
            267009653,
            267006959,
            267018496,
            267008934,
            267008176
        ],
        "C": [
            266989125,
            266982272,
            266994840,
            267002991,
            266993066,
            267005030,
            266983150,
            266989202,
            266983682,
            267008636,
            266990051,
            266988914,
            266994220,
            266992535,
            266990847,
            266994508,
            266995474,
            266989895,
            266985787
        ],
        "B": [
            266980718,
            266971385,
            266985030,
            266993111,
            266976413,
            266985138,
            266977306,
            266981373,
            266976133,
            266979778,
            266979273,
            266982265,
            266980709,
            266977455,
            266980695,
            266983193,
            266981883,
            266982561,
            266978536
        ],
        "A": [
            266966090,
            266964678,
            266968415,
            266974624,
            270989331,
            266965521,
            266965134,
            266964884,
            266966168,
            266965003,
            266971429,
            266979885,
            266965867,
            266964795,
            266965926,
            266967291,
            266966370,
            266967270,
            266967228,
            266965380
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/130783",
    "editorial": "Notice that we actually want to pair the elements (in the odd case, exactly one element will not have a pair). If numbers x?y\n fall into the same pair, then:\n\nThese two numbers should have the same remainder when divided by k\n. This is necessary in order to obtain one from the other.\nTo make them equal, we will need y?xk=yk?xk\n operations.\nConsider all numbers from the array a\n with the same remainder when divided by k\n. Also, immediately divide them by the number k\n. Let these numbers be b1?b2??bm\n. There are two possible cases:\n\nIf m\n is even, we need to pair all the numbers. It is best to pair b1\n and b2\n, b3\n and b4\n, and so on. Consequently, we will need b2?b1+b4?b3++bn?bn?1\n operations.\nIf m\n is odd, one element will remain unpaired. It can be tried and then an even number of elements will remain, and we can apply the idea for the even case. Notice that it is advantageous to remove the element with an odd index (denote it as i\n). Then, if we leave the i\n-th element unpaired, we will need b2?b1+b4?b3++bi?1?bi?2+bi+2?bi+1+bn?bn?1\n operations. To quickly calculate this sum, you can use prefix/suffix sums.\nAlso, note that if there are two different remainders for which m\n is odd, the answer is ?1\n.",
    "name": "E. Beautiful Array",
    "statement": "You are given an array of integers a_1, a_2,\r\nldots, a_n and an integer k. You need to make it beautiful with the\r\nleast amount of operations.Before applying operations, you can shuffle\r\nthe array elements as you like. For one operation, you can do the\r\nfollowing: Choose an index 1\r\nleq i\r\nleq n, Make a_i = a_i + k.The array b_1, b_2,\r\nldots, b_n is beautiful if b_i = b_{n - i + 1} for all 1\r\nleq i\r\nleq n.Find the minimum number of operations needed to make the array\r\nbeautiful, or report that it is impossible.\r\n",
    "solutions": [
        "#include<bits/stdc++.h> #define int long long#define pb push_back#define fi first#define se secondusing namespace std;using ll = long long;using ld = long double;using ull = unsigned long long;mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());const int maxN = 1e6 + 5;const int mod = 1e9 + 7;const ll oo = 1e18;int n, k;int a[maxN];void ReadInput(){    cin >> n >> k;    for(int i=1; i<=n; i++)        cin >> a[i];}void Solve(){    map<int, vector<int>> mp;    for(int i=1; i<=n; i++)        mp[a[i] % k].pb(a[i]);    int res = 0;    int cnt = 0;    for(auto v : mp)    {        vector<int> vc = v.se;        sort(vc.begin(), vc.end());        if(vc.size() & 1)        {            cnt++;            int val = oo;            int s = 0;            map<int, int> f1, f2;            for(int i=0; i<vc.size()-1; i+=2)            {                s += (vc[i + 1] - vc[i]) / k;                f1[i + 1] = s;            }            val = s;            s = 0;            for(int i=vc.size()-1; i>=1; i-=2)            {                s += (vc[i] - vc[i - 1]) / k;                f2[i - 1] = s;            }            for(int i=2; i<vc.size()-1; i+=2)                val = min(val, f1[i - 1] + f2[i + 1]);            val = min(val, s);            if(v.fi == 1)            {               // cout << f2[3];return;            }            res += val;        }        else        {            for(int i=0; i<vc.size(); i+=2)                res += (vc[i + 1] - vc[i]) / k;        }     }    if(cnt > 1)    {        cout << -1 << '\\n';        return;    }    cout << res << '\\n';}#define taskname \"sol\"int32_t main(){    if (fopen(taskname \".inp\", \"r\"))    {        freopen(taskname \".inp\", \"r\", stdin);        // freopen(taskname \".out\", \"w\", stdout);    }    ios_base::sync_with_stdio(false);    cin.tie(nullptr);    int T = 1;    cin >> T;    for(int itest=1; itest<=T; itest++)    {        ReadInput();        Solve();    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "number theory",
        "sortings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Beautiful Array.json",
    "hint": []
}