{"link": "https://codeforces.com//contest/1851/problem/B", "problemId": "2115024", "problem_idx": "B", "shortId": "1851B", "contest_number": "1851", "problem_submissions": {"F": [215583047, 215569492, 215579077, 215566307, 215574419, 215578454, 215575870, 215577530, 215600568, 215575641, 215585936, 215588041, 215589152, 215586581, 215589298, 215588709, 215587486, 216018365, 215590568, 215575574], "G": [215575283, 215598343, 215593159, 215608828, 215590713, 215597061, 215596537, 215602648, 215584695, 215594862, 215612719, 215611638, 215605638, 215614880, 215606881, 215615959, 215606526, 216018381, 215609478, 215603760], "E": [215554147, 215554902, 215554482, 215549142, 215560459, 215554036, 215562257, 215556727, 215561636, 215565663, 215559271, 215553466, 215557917, 215563847, 215562734, 215562948, 215560103, 216018352, 215576817, 215612963], "D": [215533409, 215535460, 215534208, 215534687, 215544754, 215542789, 215542369, 215538307, 215549445, 215557571, 215540094, 215538955, 215546789, 215540331, 215545020, 215541882, 215571406, 216018332, 215565562, 215552208], "C": [215518745, 215521123, 215523873, 215521189, 215525356, 215529106, 215527649, 215544242, 215522653, 215536104, 215522716, 215526033, 215531440, 215519368, 215532583, 215551484, 215548134, 216018314, 215549325, 215536690], "B": [215513234, 215513521, 215514166, 215512941, 215516397, 215517695, 215518324, 215516319, 215512960, 215513498, 215512779, 215518016, 215520983, 215513367, 215522456, 215515383, 215523869, 216018292, 215522857, 215529428], "A": [215510383, 215510586, 215509986, 215743464, 215510085, 215510245, 215511678, 215512593, 215510630, 215510455, 215509888, 215510070, 215513854, 215516572, 215510721, 215514161, 215521066, 215511827, 216018280, 215514844, 215514533]}, "name": "B. Parity Sort", "statement": "You have an array of integers a of length n. You can apply the following\r\noperation to the given array: Swap two elements a_i and a_j such that i\r\nneq j, a_i and a_j are either even or odd. Determine whether it is\r\npossible to sort the array in non-decreasing order by performing the\r\noperation any number of times (possibly zero).For example, let a = [7,\r\n10, 1, 3, 2]. Then we can perform 3 operations to sort the array: Swap\r\na_3 = 1 and a_1 = 7, since 1 and 7 are odd. We get a = [1, 10, 7, 3, 2];\r\nSwap a_2 = 10 and a_5 = 2, since 10 and 2 are even. We get a = [1, 2, 7,\r\n3, 10]; Swap a_4 = 3 and a_3 = 7, since 3 and 7 are odd. We get a = [1,\r\n2, 3, 7, 10].\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(\"Ofast\",\"inline\",\"-ffast-math\")\n#pragma GCC target(\"avx,sse2,sse3,sse4,mmx\")\n\n#define int long long\nint n,a[200001];\nconst int MOD=998244353;\nvoid Delta() {\n   vector<int> oddi,eveni,odd,even;\n   cin >> n;\n   for(int i=1;i<=n;++i) {\n      cin >> a[i];\n      if(a[i]%2==0) {\n         oddi.push_back(i);\n         odd.push_back(a[i]);\n      } else {\n         eveni.push_back(i);\n         even.push_back(a[i]);\n      }\n   }\n   sort(odd.begin(),odd.end());\n   sort(even.begin(),even.end());\n   for(int i=0;i<(int)oddi.size();++i)\n      a[oddi[i]]=odd[i];\n   for(int i=0;i<(int)eveni.size();++i)\n      a[eveni[i]]=even[i];\n   cout << (is_sorted(a+1,a+1+n)?\"YES\":\"NO\") << endl;\n}\nsigned main() {\n   ios_base::sync_with_stdio(0);\n   cin.tie(0);cout.tie(0);\n   int T;cin >> T;\n   while(T--) Delta();\n}"], "input": "", "output": "", "tags": ["greedy", "sortings", "two pointers"], "dificulty": "800", "interactive": false}