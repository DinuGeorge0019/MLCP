{
    "link": "https://codeforces.com//contest/1328/problem/F",
    "problemId": "573972",
    "problem_idx": "F",
    "shortId": "1328F",
    "contest_number": "1328",
    "problem_submissions": {
        "F": [
            74521514,
            74458947,
            74467934,
            74459743,
            74477945,
            74479296,
            74477976,
            74460067,
            74479401,
            74451936,
            74481411,
            74517274,
            74469162,
            74751835,
            74484053,
            74570676,
            75069905
        ],
        "E": [
            74521498,
            74425897,
            74448868,
            74469722,
            74453344,
            74450430,
            74451583,
            74481242,
            74461079,
            74480712,
            74461492,
            74440509,
            74433950,
            74453485,
            74450187,
            74455849,
            74458845,
            74470218,
            74462427,
            74456809
        ],
        "D": [
            74521470,
            74418087,
            74432049,
            74443528,
            74433824,
            74440013,
            74434934,
            74442956,
            74448606,
            74468894,
            74434326,
            74418253,
            74446884,
            74422378,
            74433135,
            74445359,
            74444092,
            74446810,
            74436674,
            74439681,
            74436955
        ],
        "C": [
            74521449,
            74427519,
            74417294,
            74412670,
            74418245,
            74414924,
            74418343,
            74430971,
            74433882,
            74427388,
            74419673,
            74411543,
            74408681,
            74418088,
            74421292,
            74418723,
            74414986,
            74421425,
            74419827,
            74417279,
            74426221
        ],
        "B": [
            74521428,
            74410739,
            74410669,
            74414505,
            74408929,
            74424040,
            74412257,
            74445705,
            74430405,
            74422019,
            74402783,
            74408301,
            74420620,
            74406341,
            74415300,
            74411825,
            74407115,
            74413788,
            74409526,
            74409821,
            74428748
        ],
        "A": [
            74521413,
            74399723,
            74400111,
            74400161,
            74407479,
            74400948,
            74397437,
            74397606,
            74401496,
            74400048,
            74407625,
            74397552,
            74398246,
            74403424,
            74403420,
            74398403,
            74402962,
            74402324,
            74397768,
            74400852,
            74397419,
            74399350,
            74399074
        ]
    },
    "name": "F. Make k Equal",
    "statement": "You are given the array a consisting of n elements and the integer k\r\nle n.You want to obtain k equal elements in the array a. In one move,\r\nyou can make one of the following two operations: Take of the minimum\r\nelements of the array and increase its value by one (more formally, if\r\nthe minimum value of a is mn then you choose such index i that a_i = mn\r\nand set a_i := a_i + 1); take of the maximum elements of the array and\r\ndecrease its value by one (more formally, if the maximum value of a is\r\nmx then you choose such index i that a_i = mx and set a_i := a_i - 1).\r\nYour task is to calculate the minimum number of moves required to obtain\r\nk equal elements in the array.\r\n",
    "solutions": [
        "// clang-format off\n// powered by c++11\n// by Isaunoya\n#include<bits/stdc++.h>\n#define rep(i,x,y) for(register int i=(x);i<=(y);++i)\n#define Rep(i,x,y) for(register int i=(x);i>=(y);--i)\nusing namespace std;using db=double;using ll=long long;\nusing uint=unsigned int;using ull=unsigned long long;\nusing pii=pair<int,int>;\n#define Tp template\n#define fir first\n#define sec second\nTp<class T>void cmax(T&x,const T&y){if(x<y)x=y;}Tp<class T>void cmin(T&x,const T&y){if(x>y)x=y;}\n#define all(v) v.begin(),v.end()\n#define sz(v) ((int)v.size())\n#define pb emplace_back\nTp<class T>void sort(vector<T>&v){sort(all(v));}Tp<class T>void reverse(vector<T>&v){reverse(all(v));}\nTp<class T>void unique(vector<T>&v){sort(all(v)),v.erase(unique(all(v)),v.end());}inline void reverse(string&s){reverse(s.begin(),s.end());}\nconst int SZ=1<<23|233;\nstruct FILEIN{char qwq[SZ],*S=qwq,*T=qwq,ch;\n#ifdef __WIN64\n#define GETC getchar\n#else\ninline char GETC(){return(S==T)&&(T=(S=qwq)+fread(qwq,1,SZ,stdin),S==T)?EOF:*S++;}\n#endif\ninline FILEIN&operator>>(char&c){while(isspace(c=GETC()));return*this;}inline FILEIN&operator>>(string&s){s.clear();while(isspace(ch=GETC()));if(!~ch)return*this;s=ch;while(!isspace(ch=GETC())&&~ch)s+=ch;return*this;}\ninline FILEIN&operator>>(char*str){char*cur=str;while(*cur)*cur++=0;cur=str;while(isspace(ch=GETC()));if(!~ch)return*this;*cur=ch;while(!isspace(ch=GETC())&&~ch)*++cur=ch;*++cur=0;return*this;}\nTp<class T>inline void read(T&x){bool f=0;while((ch=GETC())<48&&~ch)f^=(ch==45);x=~ch?(ch^48):0;while((ch=GETC())>47)x=x*10+(ch^48);x=f?-x:x;}\ninline FILEIN&operator>>(int&x){return read(x),*this;}inline FILEIN&operator>>(ll&x){return read(x),*this;}inline FILEIN&operator>>(uint&x){return read(x),*this;}inline FILEIN&operator>>(ull&x){return read(x),*this;}\ninline FILEIN&operator>>(double&x){read(x);bool f=x<0;x=f?-x:x;if(ch^'.')return*this;double d=0.1;while((ch=GETC())>47)x+=d*(ch^48),d*=.1;return x=f?-x:x,*this;}\n}in;\nstruct FILEOUT{const static int LIMIT=1<<22;char quq[SZ],ST[233];int sz,O,pw[233];\nFILEOUT(){set(7);rep(i,pw[0]=1,9)pw[i]=pw[i-1]*10;}~FILEOUT(){flush();}\ninline void flush(){fwrite(quq,1,O,stdout),fflush(stdout),O=0;}\ninline FILEOUT&operator<<(char c){return quq[O++]=c,*this;}inline FILEOUT&operator<<(string str){if(O>LIMIT)flush();for(char c:str)quq[O++]=c;return*this;}\ninline FILEOUT&operator<<(char*str){if(O>LIMIT)flush();char*cur=str;while(*cur)quq[O++]=(*cur++);return*this;}\nTp<class T>void write(T x){if(O>LIMIT)flush();if(x<0){quq[O++]=45;x=-x;}do{ST[++sz]=x%10^48;x/=10;}while(x);while(sz)quq[O++]=ST[sz--];}\ninline FILEOUT&operator<<(int x){return write(x),*this;}inline FILEOUT&operator<<(ll x){return write(x),*this;}inline FILEOUT&operator<<(uint x){return write(x),*this;}inline FILEOUT&operator<<(ull x){return write(x),*this;}\nint len,lft,rig;void set(int l){len=l;}inline FILEOUT&operator<<(double x){bool f=x<0;x=f?-x:x,lft=x,rig=1.*(x-lft)*pw[len];return write(f?-lft:lft),quq[O++]='.',write(rig),*this;}\n}out;\n#define int long long\nstruct Math{\nvector<int>fac,inv;int mod;\nvoid set(int n,int Mod){fac.resize(n+1),inv.resize(n+1),mod=Mod;rep(i,fac[0]=1,n)fac[i]=fac[i-1]*i%mod;inv[n]=qpow(fac[n],mod-2);Rep(i,n-1,0)inv[i]=inv[i+1]*(i+1)%mod;}\nint qpow(int x,int y){int ans=1;for(;y;y>>=1,x=x*x%mod)if(y&1)ans=ans*x%mod;return ans;}int C(int n,int m){if(n<0||m<0||n<m)return 0;return fac[n]*inv[m]%mod*inv[n-m]%mod;}\nint gcd(int x,int y){return!y?x:gcd(y,x%y);}int lcm(int x,int y){return x*y/gcd(x,y);}\n}math;\n// clang-format on\n\nconst int maxn = 4e5 + 54;\nint a[maxn];\nint sum = 0;\nint n , k;\nint ans = 1e18;\n\n\nstruct bit {\n\tint c[maxn];\n\tint low(int x) {\n\t\treturn x & -x;\n\t}\n\t\n\tvoid add(int x , int y) {\n\t\tfor( ; x < maxn ; x += low(x))\n\t\t\tc[x] += y; \n\t}\n\t\n\tint qry(int x) {\n\t\tint ans = 0 ;\n\t\tfor( ; x ; x ^= low(x))\n\t\t\tans += c[x];\n\t\treturn ans;\n\t}\n} bit;\n\nint b[maxn];\nint rev[maxn];\nint t[maxn];\nsigned main(){\n\t//code begin.\n\t\n\tauto init = [&]() {\n\t\tin >> n >> k;\n\t\trep(i , 1 , n) in >> a[i];\n\t\trep(i , 1 , n) sum += a[i];\n\t\tsort(a + 1 , a + n + 1);\n\t\trep(i , 1 , n) b[i] = a[i];\n\t\tint len = unique(b + 1 , b + n + 1) - b - 1;\n\t\trep(i , 1 , n) {\n\t\t\ta[i] = lower_bound(b + 1 , b + len + 1 , a[i]) - b ;\n\t\t\tif(a[i] != a[i - 1]) rev[a[i]] = i;\n\t\t}\n\t\trep(i , 1 , n) t[a[i]] ++;\n\t\trep(i , 1 , n) bit.add(a[i], b[a[i]]);\n\t\trev[len + 1] = n + 1;\n\t} ;\n\tinit();\n\tauto solve = [&](int x) {\n\t\tint qwq = rev[a[x]] - 1;\n\t\tint qwq2 = n - rev[a[x] + 1] + 1;\n\t\tint sum1 = qwq * (b[a[x]] - 1) - bit.qry(a[x] - 1);\n\t\tint sum2 = sum - bit.qry(a[x]) - qwq2 * (b[a[x]] + 1);\n\t\tif(t[a[x]] >= k) {\n\t\t\tcmin(ans , 0ll);\n\t\t\tout << ans << '\\n';\n\t\t\texit(0);\n\t\t}\n\t\tbool flag = 1;\n\t\tif(t[a[x]] + qwq >= k) {\n\t\t\tcmin(ans, sum1 + k - t[a[x]]);\n\t\t\tflag = 0;\n\t\t}\n\t\tif(t[a[x]] + qwq2 >= k) {\n\t\t\tcmin(ans, sum2 + k - t[a[x]]);\n\t\t\tflag = 0;\n\t\t}\n\t\tif(flag) cmin(ans, sum1 + sum2 + k - t[a[x]]);\n\t} ;\n\trep(i , 1 , n) {\n\t\tif(a[i] == a[i - 1]) continue;\n\t\tsolve(i);\n\t}\n\tout << ans << '\\n';\n\treturn 0;\n\t//code end.\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Make k Equal.json",
    "editorial_link": "https://codeforces.com//blog/entry/75246",
    "editorial": "This problem is just all about the implementation. Firstly, let\u00e2\u0080\u0099s sort\r\nthe initial values and compress them to pairs , where is the number of\r\nelements . The first observation is pretty standard and easy: some equal\r\nelements will remain unchanged. So let\u00e2\u0080\u0099s iterate over all elements in\r\nsome order and suppose that all elements will remain unchanged. Firstly,\r\nwe need elements which we should obtain by some moves. The second\r\nobservation is that we first need to take elements from one end (only\r\nless or only greater) and only then from the other (if needed).Consider\r\nthe case when we first take less elements. The other case is almost\r\nsymmetric.Let be the number of less than which we need to increase to .\r\nIf then skip the following step. Otherwise, let be the number of\r\nelements less than or equal to , be the sum of all elements less than or\r\nequal to and be the previous value (the maximum value less than ). Then\r\nwe need to increase all elements less than or equal to at least to the\r\nvalue . It costs moves. And then we need moves to increase elements to\r\n.And let be the number of elements greater than which we need to\r\ndecrease to if we increased elements already. If then skip the following\r\nstep. Otherwise, let be the number of elements greater than or equal to\r\n, be the sum of all elements greater than or equal to and be the next\r\nvalue (the minimum value greater than ). Then we need to decrease all\r\nelements greater than or equal to at least to the value . It costs\r\nmoves. And then we need moves to decrease elements to .So we can update\r\nthe answer with the sum of values described above and proceed to the\r\nnext value. Arrays are just simple prefix and suffix sums which can be\r\ncalculated in using very standard and easy dynamic programming. Don\u00e2\u0080\u0099t\r\nforget about the overflow.Total time complexity: because of sorting.\r\n"
}