{
    "link": "https://codeforces.com//contest/1955/problem/G",
    "problemId": "2579459",
    "problem_idx": "G",
    "shortId": "1955G",
    "contest_number": "1955",
    "problem_submissions": {
        "G": [
            255700432,
            255685371,
            255700202,
            255694984,
            255713116,
            255710945,
            255815483,
            255720205,
            255712913,
            255719635,
            255740112,
            255735779,
            255734648,
            255728080,
            255811582,
            255740083,
            255712654,
            255816753,
            255730101,
            255733676,
            255729429,
            255749883
        ],
        "F": [
            255690836,
            255730118,
            255712738,
            255723348,
            255696813,
            255721239,
            255711672,
            255703746,
            255701885,
            255718873,
            255724659,
            255733290,
            255718852,
            255723723,
            255725364,
            255717728,
            255710197,
            255736254,
            255712457
        ],
        "E": [
            255679602,
            255678850,
            255660817,
            255677164,
            255677495,
            255695083,
            255692381,
            255695668,
            255688219,
            255691378,
            255687451,
            255688784,
            255697004,
            255707937,
            255738844,
            255740248,
            255706468,
            255704684,
            255707886
        ],
        "D": [
            255663451,
            255667353,
            255685203,
            255671122,
            255669296,
            255675907,
            255680787,
            255676580,
            255675808,
            255675309,
            255677471,
            255667366,
            255685779,
            255681400,
            255682629,
            255685354,
            255677101,
            255696157,
            255690888
        ],
        "C": [
            255657238,
            255660807,
            255678901,
            255663623,
            255662171,
            255657175,
            255664052,
            255666604,
            255666050,
            255656375,
            255666921,
            255652774,
            255678671,
            255660970,
            255664282,
            255661069,
            255666029,
            255658918,
            255678375
        ],
        "B": [
            255642714,
            255647145,
            255662403,
            255652531,
            255651120,
            255650530,
            255651554,
            255653536,
            255651004,
            255648291,
            255648566,
            255643999,
            255648718,
            255649499,
            255650291,
            255653938,
            255647027,
            255650471,
            255659271
        ],
        "A": [
            255635163,
            255633427,
            255637795,
            255633451,
            255634276,
            255634783,
            255634704,
            255650196,
            255634135,
            255635088,
            255633579,
            255633389,
            255637393,
            255636215,
            255633812,
            255642645,
            255634779,
            255634460,
            255639283
        ],
        "H": [
            255690981,
            255842703,
            255840768
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/128243",
    "editorial": "First, let\u00e2\u0080\u0099s learn how to check for a fixed if there exists a path from\r\nto with a GCD of . It is necessary for all numbers along the path to be\r\ndivisible by . Let\u00e2\u0080\u0099s define a grid of size by , where if is divisible by\r\n, and otherwise. If there exists a path of ones in , then there exists a\r\npath in with a GCD of .To check if there exists a path consisting\r\nentirely of ones, dynamic programming can be used. Let denote whether it\r\nis possible to reach from . Then the transitions are , with the base\r\ncase of the dynamic programming being .Since the path will definitely\r\npass through the cells and , we iterate through all divisors of the\r\nnumber , check for each one if there exists a path with that GCD, and\r\ntake the maximum such divisor. The complexity of the solution is , where\r\n.\r\n",
    "name": "G. GCD on a grid",
    "statement": "Not long ago, Egor learned about the Euclidean algorithm for finding the\r\ngreatest common divisor of two numbers. The greatest common divisor of\r\ntwo numbers a and b is the largest number that divides both a and b\r\nwithout leaving a remainder. With this knowledge, Egor can solve a\r\nproblem that he once couldn\u2019t.Vasily has a grid with n rows and m\r\ncolumns, and the integer {a_i}_j is located at the intersection of the\r\ni-th row and the j-th column. Egor wants to go from the top left corner\r\n(at the intersection of the first row and the first column) to the\r\nbottom right corner (at the intersection of the last row and the last\r\ncolumn) and find the greatest common divisor of all the numbers along\r\nthe path. He is only allowed to move down and to the right. Egor has\r\nwritten down several paths and obtained different GCD values. He became\r\ninterested in finding the maximum possible GCD.Unfortunately, Egor is\r\ntired of calculating GCDs, so he asks for your help in finding the\r\nmaximum GCD of the integers along the path from the top left corner to\r\nthe bottom right corner of the grid.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define int long longusing namespace std;class Segment_Tree{public:\tstruct tree{\t\tint l,r,sum,maxx,minx,flag;\t}tr[800005];\tvoid pushup(int u){\t\ttr[u].sum=tr[u<<1].sum+tr[u<<1|1].sum;\t\ttr[u].maxx=max(tr[u<<1].maxx,tr[u<<1|1].maxx);\t\ttr[u].minx=min(tr[u<<1].minx,tr[u<<1|1].minx);\t}\tvoid pushdown(int u){\t\tif(tr[u].flag){\t\t\ttr[u<<1].sum+=tr[u].flag*(tr[u<<1].r-tr[u<<1].l+1),tr[u<<1].maxx+=tr[u].flag,tr[u<<1].minx+=tr[u].flag,tr[u<<1].flag+=tr[u].flag;\t\t\ttr[u<<1|1].sum+=tr[u].flag*(tr[u<<1|1].r-tr[u<<1|1].l+1),tr[u<<1|1].maxx+=tr[u].flag,tr[u<<1|1].minx+=tr[u].flag,tr[u<<1|1].flag+=tr[u].flag;\t\t\ttr[u].flag=0;\t\t}\t}\tvoid build(int u,int l,int r){\t\tif(l==r){\t\t\ttr[u]={l,r,0,0,0,0};\t\t\treturn;\t\t}\t\ttr[u]={l,r};\t\tint mid=l+r>>1;\t\tbuild(u<<1,l,mid),build(u<<1|1,mid+1,r);\t\tpushup(u);\t}\tvoid change(int u,int l,int r,int k){\t\tif(l>r)return;\t\tif(tr[u].l>=l&&tr[u].r<=r){\t\t\ttr[u].sum+=k*(tr[u].r-tr[u].l+1);\t\t\ttr[u].maxx+=k,tr[u].minx+=k;\t\t\ttr[u].flag+=k;\t\t\treturn;\t\t}\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1;\t\tif(l<=mid)change(u<<1,l,r,k);\t\tif(r>mid)change(u<<1|1,l,r,k);\t\tpushup(u);\t}\tint query_sum(int u,int l,int r){\t\tif(tr[u].l>=l&&tr[u].r<=r)return tr[u].sum;\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1,res=0;\t\tif(l<=mid)res+=query_sum(u<<1,l,r);\t\tif(r>mid)res+=query_sum(u<<1|1,l,r);\t\treturn res;\t}\tint query_max(int u,int l,int r){\t\tif(tr[u].l>=l&&tr[u].r<=r)return tr[u].maxx;\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1,res=-1e18;\t\tif(l<=mid)res=max(res,query_max(u<<1,l,r));\t\tif(r>mid)res=max(res,query_max(u<<1|1,l,r));\t\treturn res;\t}\tint query_min(int u,int l,int r){\t\tif(tr[u].l>=l&&tr[u].r<=r)return tr[u].minx;;\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1,res=1e18;\t\tif(l<=mid)res=min(res,query_min(u<<1,l,r));\t\tif(r>mid)res=min(res,query_min(u<<1|1,l,r));\t\treturn res;\t}}sgt;int t,n,m,a[105][105],dp[105][105];bool check(int nw){\tfor(int i=1;i<=n;i++)for(int j=1;j<=m;j++)dp[i][j]=0;\tdp[1][1]=1;\tfor(int i=1;i<=n;i++)for(int j=1;j<=m;j++){\t\tif(i==1&&j==1)continue;\t\tif(a[i][j]%nw!=0)continue;\t\tif(i>1)dp[i][j]|=dp[i-1][j];\t\tif(j>1)dp[i][j]|=dp[i][j-1];\t}\treturn dp[n][m];}signed main(){\tios::sync_with_stdio(0),cin.tie(0),cout.tie(0);\tcin>>t;\twhile(t--){\t\tcin>>n>>m;\t\tfor(int i=1;i<=n;i++)for(int j=1;j<=m;j++)cin>>a[i][j];\t\tint pp=__gcd(a[1][1],a[n][m]),ans=0;\t\tfor(int i=1;i*i<=pp;i++){\t\t\tif(pp%i==0){\t\t\t\tif(check(i))ans=max(ans,i);\t\t\t\tif(check(pp/i))ans=max(ans,pp/i);\t\t\t}\t\t}\t\tcout<<ans<<\"\\n\";\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dfs and similar",
        "dp",
        "implementation",
        "math",
        "number theory"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\G. GCD on a grid.json"
}