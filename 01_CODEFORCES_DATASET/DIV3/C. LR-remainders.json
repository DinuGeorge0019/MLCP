{
    "link": "https://codeforces.com//contest/1932/problem/C",
    "problemId": "2483350",
    "problem_idx": "C",
    "shortId": "1932C",
    "contest_number": "1932",
    "problem_submissions": {
        "F": [
            247041710,
            247046104,
            247061921,
            247064848,
            247065969,
            247067691,
            247069162,
            247061542,
            247047981,
            247066270,
            247064434,
            247030399,
            247061453,
            247062334,
            247071817,
            247074345,
            247065688,
            247070314,
            247059158
        ],
        "E": [
            247027158,
            247035724,
            247041508,
            247047392,
            247034566,
            247041281,
            247042901,
            247046269,
            247024107,
            247043959,
            247047309,
            247065699,
            247024211,
            247033451,
            247040047,
            247039052,
            247047772,
            247051378,
            247048000
        ],
        "D": [
            247025048,
            247024422,
            247027652,
            247025385,
            247027600,
            247026819,
            247026306,
            247030155,
            247057812,
            247034591,
            247024028,
            247050558,
            247039827,
            247050562,
            247026148,
            247035436,
            247033238,
            247031618,
            247035376
        ],
        "C": [
            247015841,
            247009093,
            247007805,
            247004912,
            247003665,
            247007946,
            247004168,
            247011243,
            247008047,
            247006061,
            247009525,
            247006826,
            247014290,
            247003444,
            247011933,
            247011062,
            247018803,
            247012040,
            247018641
        ],
        "B": [
            247001265,
            246998420,
            246995287,
            246992797,
            246996723,
            246996283,
            246995886,
            247000182,
            247000282,
            246995830,
            246996405,
            246997168,
            246998810,
            246995354,
            247001435,
            246999756,
            247001109,
            246996459,
            247006888
        ],
        "A": [
            246992414,
            246989927,
            246990007,
            246989302,
            246989500,
            246989572,
            246991281,
            246989684,
            246995787,
            246990634,
            246991174,
            246992575,
            246993925,
            246989365,
            246994593,
            246993034,
            246991641,
            246989247,
            246991878
        ],
        "G": [
            247104441,
            247824611,
            247147433,
            247796255
        ]
    },
    "name": "C. LR-remainders",
    "statement": "You are given an array a of length n, a positive integer m, and a string\r\nof commands of length n. Each command is either the character \u201d or the\r\ncharacter \u201d.Process all n commands in the order they are written in the\r\nstring s. Processing a command is done as follows: First, output the\r\nremainder of the product of all elements of the array a when divided by\r\nm. Then, if the command is \u201d, remove the leftmost element from the array\r\na, if the command is \u201d, remove the rightmost element from the array a.\r\nNote that after each move, the length of the array a decreases by 1, and\r\nafter processing all commands, it will be empty.Write a program that\r\nwill process all commands in the order they are written in the string s\r\n(from left to right).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define ll long long\n#define ld long double\n#define pb push_back //emplace_back\n#define pp pop_back\n#define pii pair<ll, ll> //pair<int, int>\n#define all(x) (x).begin(),(x).end()\n#define mp(a,b) make_pair(a , b)\n#define lb lower_bound\n#define ub upper_bound\n#define sz(x) (ll)(x).size()\n#define F first\n#define S second x) (x).begin()\n#define For(x, n) for(int (x) = 0 ; (x) < (n) ; (x)++)\n#define debug(x) cout << #x << \" : \" << x << endl << flush\n#define endl '\\n'\n#define arr(x) array<ll , (x)>\n#define yes cout << \"YES\\n\"\n#define no cout << \"NO\\n\"\n#define FAST ios_base::sync_with_stdio(0);cin.tie(0);\nll MOD;\nll Sum(ll a , ll b , ll MOD)\n{\n a %= MOD;\n b %= MOD;\n a += b;\n return a % MOD;\n}\n\nll Mul(ll a , ll b)\n{\n a %= MOD;\n b %= MOD;\n a *= b;\n return a % MOD;\n}\n\nll Pow(ll a , ll b , ll MOD)\n{\n   ll res = 1;\n   while(b)\n   {\n        if((b & 1))res = Mul(res , a);\n     a = Mul(a , a );\n     b >>= 1;\n   }\n   return res;\n}\n\nll Min(ll a , ll b)\n{\n   if(a > b)return b;\n   return a;\n}\n\nll Max(ll a , ll b)\n{\n   if(a > b)return a;\n   return b;\n}\n\nll Ceil(ll a , ll b)\n{\n if(b < 0)\n  a *= -1, b *= -1;\n\n if(a < 0)return a/b;\n\n return(a + (b-1))/b;\n}\n\n/////////////////////\n//VALS\n\n/////////////////////\n//FUNS\n\n/////////////////////\n//SOLVE\nvoid solve()\n{\n\tll n;\n\tcin >> n >> MOD;\n\t\n\tll a[n];\n\tFor(i,n)cin >> a[i];\n\t\n\tstring s;\n\tcin >> s;\n\tll l = 0;\n\tll r = n-1;\n\tFor(i,n-1)\n\tif(s[i] == 'R')\n\t\tr--;\n\telse \n\t\tl++;\n\t\t\n\tll ans[n];\n\tans[n-1] = a[r] % MOD;\n\tfor(int i = n-2; i >= 0; i--)\n\t{\n\t\tif(s[i] == 'R')\n\t\t\tans[i] = Mul(ans[i+1], a[++r]);\n\t\telse \n\t\t\tans[i] = Mul(ans[i+1], a[--l]);\n\t}\n\t\n\tFor(i,n)\n\t\tcout << ans[i] << \" \";\n\t\t\n\t\tcout<< endl;\n\t\n\t\n}\n/////////////////////\n//MAIN\nint main()\n{\n    FAST;\n    ll t = 1;\n    cin >> t;\n    while(t--)\n    {\n        solve();\n    }\n}\n/////////////////////\n/*\nZZZZZZZ     A        M     M     IIIIIII  N     N\n     Z     A A      M M   M M       I     NN    N\n    Z     A   A    M   M M   M      I     N N   N\n   Z     AAAAAAA  M     M     M     I     N  N  N\n  Z      A     A  M           M     I     N   N N\n Z       A     A  M           M     I     N    NN\nZZZZZZZ  A     A  M           M  IIIIIII  N     N  TREE\n*/\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "implementation",
        "math",
        "two pointers"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. LR-remainders.json",
    "editorial_link": "https://codeforces.com//blog/entry/126196",
    "editorial": "If we perform all deletions except the last one, only one element will\r\nremain. Let\u00e2\u0080\u0099s find its index in the array.Now we will perform the\r\noperations in reverse order, then the deletion operations will become\r\nadditions, which are much easier to maintain. We will store the\r\nremainder of the division of the product of the current segment by and\r\nmultiply by the new elements when extending the segment. We will output\r\nall the obtained numbers in reverse order.\r\n"
}