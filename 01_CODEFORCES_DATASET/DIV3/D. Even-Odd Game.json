{
    "link": "https://codeforces.com//contest/1472/problem/D",
    "problemId": "854354",
    "problem_idx": "D",
    "shortId": "1472D",
    "contest_number": "1472",
    "problem_submissions": {
        "F": [
            103262561,
            103276963,
            103283145,
            103236120,
            103299603,
            103280037,
            103283982,
            103299636,
            103262171,
            103266435,
            103266707,
            103276432,
            103305724,
            103305561,
            103312140,
            103296820,
            103289516
        ],
        "G": [
            103247133,
            103238309,
            103265834,
            103256471,
            103273915,
            103293538,
            103298242,
            103268903,
            103231487,
            103253031,
            103265141,
            103262744,
            103269566,
            103284052,
            103274415
        ],
        "E": [
            103232102,
            103223895,
            103237385,
            103272807,
            103242184,
            103256098,
            103261560,
            103284295,
            103272410,
            103347793,
            103285217,
            103237054,
            103246827,
            103233098,
            103239873,
            103242625,
            103245603,
            103246214,
            103227701,
            103253419
        ],
        "D": [
            103207950,
            103207957,
            103217168,
            103202671,
            103216674,
            103217143,
            103225940,
            103215649,
            103278518,
            103287434,
            103203579,
            103227081,
            103193660,
            103216373,
            103212463,
            103198886,
            103214065,
            103204468,
            103205436
        ],
        "C": [
            103194323,
            103193866,
            103191356,
            103198459,
            103198975,
            103205574,
            103191182,
            103243332,
            103280810,
            103289310,
            103198851,
            103199943,
            103206511,
            103207377,
            103204240,
            103192503,
            103203543,
            103196542,
            103198696
        ],
        "B": [
            103191009,
            103189264,
            103188527,
            103213801,
            103193697,
            103201611,
            103200035,
            103198875,
            103286479,
            103291761,
            103193834,
            103194538,
            103187178,
            103193610,
            103194731,
            103188054,
            103194899,
            103190639,
            103190538
        ],
        "A": [
            103186521,
            103187194,
            103186563,
            103201739,
            103187144,
            103188906,
            103207506,
            103187635,
            103246273,
            103293364,
            103186560,
            103189197,
            103194552,
            103186844,
            103187875,
            103186517,
            103187671,
            103186808,
            103186538
        ]
    },
    "name": "D. Even-Odd Game",
    "statement": "During their New Year holidays, Alice and Bob play the following game\r\nusing an array a of n integers: Players take turns, Alice moves first.\r\nEach turn a player chooses any element and removes it from the array. If\r\nAlice chooses , then she adds it to her score. If the chosen value is\r\nodd, Alice’s score does not change. Similarly, if Bob chooses , then he\r\nadds it to his score. If the chosen value is even, then Bob’s score does\r\nnot change. If there are no numbers left in the array, then the game\r\nends. The player with the highest score wins. If the scores of the\r\nplayers are equal, then a draw is declared.For example, if n = 4 and a =\r\n[5, 2, 7, 3], then the game could go as follows (there are other\r\noptions): On the first move, Alice chooses 2 and get two points. Her\r\nscore is now 2. The array a is now [5, 7, 3]. On the second move, Bob\r\nchooses 5 and get five points. His score is now 5. The array a is now\r\n[7, 3]. On the third move, Alice chooses 7 and get no points. Her score\r\nis now 2. The array a is now [3]. On the last move, Bob chooses 3 and\r\nget three points. His score is now 8. The array a is empty now. Since\r\nBob has more points at the end of the game, he is the winner. You want\r\nto find out who will win if both players play optimally. .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst int N_MAX = 200002;\n\nint t;\n\nint n;\n\nint a[N_MAX];\n\nvector <int> x, y;\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin >> t;\n    while(t--)\n    {\n        cin >> n;\n        for(int i = 1; i <= n; i++)\n            cin >> a[i];\n        x.clear();\n        y.clear();\n        for(int i = 1; i <= n; i++)\n        {\n            x.push_back(0);\n            y.push_back(0);\n        }\n        for(int i = 1; i <= n; i++)\n        {\n            if(a[i] & 1)\n                y.push_back(a[i]);\n            else\n                x.push_back(a[i]);\n        }\n        sort(x.begin(), x.end());\n        sort(y.begin(), y.end());\n        ll s1 = 0, s2 = 0;\n        bool turn = 0;\n        while(n--)\n        {\n            if(turn == 0)\n            {\n                if((int)x.back() > (int)y.back())\n                {\n                    s1 += x.back();\n                    x.pop_back();\n                }\n                else\n                    y.pop_back();\n            }\n            else\n            {\n                if((int)y.back() > (int)x.back())\n                {\n                    s2 += y.back();\n                    y.pop_back();\n                }\n                else\n                    x.pop_back();\n            }\n            turn = !turn;\n        }\n        if(s1 < s2)\n            cout << \"Bob\\n\";\n        else if(s1 == s2)\n            cout << \"Tie\\n\";\n        else\n            cout << \"Alice\\n\";\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "games",
        "greedy",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Even-Odd Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/86406",
    "editorial": "Letâs look at an analogy for this game. If Alice takes an even number ,\r\nshe adds points to the global result, otherwise ; If Bob takes an odd\r\nnumber , he adds points to the global result, otherwise ; Alice wants to\r\nmaximize the global result and Bob wants to minimize it. Obviously, this\r\ngame is completely equivalent to the conditional game.Suppose now itâs\r\nAliceâs move. Letâs look at some number in the array. If this number is\r\neven, then taking it will add points, and giving it to Bob will add\r\npoints. If this number is odd, then taking it will add points, and\r\ngiving it to Bob will add points. So taking the number by points is more\r\nprofitable than not taking it (regardless of the parity). To maximize\r\nthe result, Alice should always take the maximum number in the\r\narray.Similar reasoning can be done for Bob. In the task, it was\r\nnecessary to sort the array and simulate the game.\r\n",
    "hint": []
}