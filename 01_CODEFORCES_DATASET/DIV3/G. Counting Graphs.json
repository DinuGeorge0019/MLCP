{
    "link": "https://codeforces.com//contest/1857/problem/G",
    "problemId": "2150548",
    "problem_idx": "G",
    "shortId": "1857G",
    "contest_number": "1857",
    "problem_submissions": {
        "G": [
            217667474,
            217665550,
            217689340,
            217662818,
            217685310,
            217676468,
            217687922,
            217701057,
            217700197,
            217807896,
            217807827,
            217712091,
            217684113,
            217720675,
            217807627,
            217677400,
            217731532,
            217711676,
            217719652,
            217714022,
            217712604,
            217718357,
            217710888
        ],
        "F": [
            217659021,
            217648989,
            217664891,
            217627744,
            217669247,
            217691937,
            217689514,
            217664113,
            217674769,
            217680535,
            217666261,
            217699208,
            217671748,
            217807538,
            217701131,
            217674808,
            217679890,
            217683947,
            217696220,
            217689116,
            217681500,
            217688375
        ],
        "B": [
            217642867,
            217642809,
            217629703,
            217685667,
            217635907,
            217630271,
            217642640,
            217631148,
            217634501,
            217636716,
            217631884,
            217632923,
            217807034,
            217775927,
            217633962,
            217640699,
            217644829,
            217637634,
            217632935,
            217633927,
            217650168,
            217644229
        ],
        "D": [
            217638870,
            217638947,
            217636496,
            217634474,
            217647504,
            217644974,
            217647862,
            217645462,
            217646166,
            217647061,
            217646308,
            217648033,
            217807098,
            217775952,
            217684716,
            217643681,
            217658546,
            217653658,
            217651018,
            217652036,
            217655292,
            217662419
        ],
        "E": [
            217634664,
            217632006,
            217641596,
            217642974,
            217661622,
            217655519,
            217656154,
            217657341,
            217663115,
            217656176,
            217655704,
            217660327,
            217807112,
            217775966,
            217649059,
            217656810,
            217665253,
            217663579,
            217661514,
            217671790,
            217665209,
            217669853
        ],
        "C": [
            217623043,
            217660653,
            217633113,
            217671603,
            217641405,
            217641348,
            217633280,
            217640705,
            217639467,
            217642154,
            217639690,
            217640983,
            217807070,
            217775937,
            217639411,
            217632787,
            217649913,
            217647923,
            217645015,
            217643972,
            217637879,
            217653046
        ],
        "A": [
            217621356,
            217622367,
            217617259,
            217636401,
            217628184,
            217620735,
            217618278,
            217621503,
            217622297,
            217628772,
            217620627,
            217617547,
            217806999,
            217775914,
            217772364,
            217772351,
            217620412,
            217618442,
            217617205,
            217621216,
            217619220,
            217624745,
            217618215,
            217619189
        ]
    },
    "name": "G. Counting Graphs",
    "statement": "Given a tree consisting of n vertices. A tree is a connected undirected\r\ngraph without cycles. Each edge of the tree has its weight, w_i.Your\r\ntask is to count the number of different graphs that satisfy all four\r\nconditions: The graph does not have self-loops and multiple edges. The\r\nweights on the edges of the graph are integers and do not exceed S. The\r\ngraph has minimum spanning tree. The minimum spanning tree of the graph\r\nis the given tree. Two graphs are considered different if their sets of\r\nedges are different, taking into account the weights of the edges.The\r\nanswer can be large, output it modulo 998244353.\r\n",
    "solutions": [
        "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<numeric>\n#include<cmath>\n#include<fstream>\n#include<random>\n#include<set>\n#include<unordered_set>\n#include<string>\n#include<map>\n#include<unordered_map>\n#include<queue>\n#include<stack>\n#include<fstream>\n#include<time.h>\n\nusing namespace std;\n\n#define all(a) a.begin(), a.end()\n#define Max(a) *max_element(all(a))\n#define Min(a) *min_element(all(a))\n\nusing ll = long long;\nusing ld = long double;\n\nconst int MOD = 998244353;\n\n#define int long long\n\nstruct dsu {\n    vector<int> p, s;\n    dsu(int n) {\n        p.resize(n);\n        iota(all(p), 0);\n        s.assign(n, 1);\n    }\n    int get(int v) {\n        if (v == p[v]) return v;\n        p[v] = get(p[v]);\n        return p[v];\n    }\n    int unite(int u, int v) {\n        u = get(u), v = get(v);\n        if (u == v) return 0;\n        if (s[u] < s[v]) swap(u, v);\n        int res = 0;\n        res -= s[u] * (s[u] - 1) / 2;\n        res -= s[v] * (s[v] - 1) / 2;\n        s[u] += s[v];\n        p[v] = u;\n        res += s[u] * (s[u] - 1) / 2;\n        res--;\n        return res;\n    }\n};\n\nint mpow(int x, int e) {\n    int c = x, r = 1;\n    while (e) {\n        if (e & 1) r = r * c % MOD;\n        c = c * c % MOD;\n        e >>= 1;\n    }\n    return r;\n}\n\nvoid solve() {\n    int n, S;\n    cin >> n >> S;\n    vector <array <int, 3>> edg;\n    for (int i = 0; i < n - 1; ++i) {\n        int u, v, w;\n        cin >> u >> v >> w;\n        --u, --v;\n        edg.push_back({w, u, v});\n    }\n    sort(all(edg));\n    int ans = 1;\n    dsu z(n);\n    for (int i = 0; i < n - 1; ++i) {\n        int add = z.unite(edg[i][1], edg[i][2]);\n        ans = ans * mpow(S - edg[i][0] + 1, add) % MOD;\n    }\n    cout << ans << '\\n';\n}\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cout.precision(40);\n\n    int t = 1;\n    cin >> t;\n    while (t--) {\n        solve();\n    }\n\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "divide and conquer",
        "dsu",
        "graphs",
        "greedy",
        "sortings",
        "trees"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\G. Counting Graphs.json",
    "editorial_link": "https://codeforces.com//blog/entry/119134",
    "editorial": "The first observation is that the graphs will consist of vertices\r\nbecause the MST is fixed. Hence, the graphs will look like the given\r\ntree with some new vertices connected.The next step is to determine the\r\npossible weights of a new edge between vertices and . Let be the maximum\r\nweight on the simple path from to . I assume that we can add a new edge\r\nbetween vertices and with any weight in the range . This becomes clear\r\nwhen we consider some examples. If the edge has a weight less or equal\r\nthan , the MST will change by taking the new edge instead of the edge\r\nwith the maximal weight on the path.Notice that if we add a new edge,\r\nand it doesn\u00e2\u0080\u0099t affect the MST, we can add one more edge independently\r\nfrom the previous.So now the task is to calculate , because for each\r\npair of vertices, we can assign a new weight from the range, which gives\r\nus cases, or we can choose not to add any edge, which is one more\r\ncase.Now, let\u00e2\u0080\u0099s discuss how to calculate the formula efficiently: Sort\r\nthe given edges in ascending order according to their weights: . We\u00e2\u0080\u0099ll\r\nbegin from the graph without edges, and add new ones step by step.\r\nSuppose, we already added all the edges up to . Now, we want to add the\r\n-th one. Notice that is greater than any of the weights before, and and\r\nare from different components. After adding the edge, we need to\r\ncalculate the number of paths that go through this edge. If we know the\r\nsizes of the components containing and , denoted as and respectively,\r\nthen there exist paths through edge without including the path formed by\r\nthese two vertices. We know the number of paths, and on each of these\r\npaths, we can determine the weight we can put on the edge. Thus, we need\r\nto multiply answer by , using binary exponentiation. To add edges and\r\nfind the sizes of the components efficiently, you can use DSU (Disjoint\r\nSet Union).The complexity of this approach is .\r\n"
}