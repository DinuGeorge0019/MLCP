{
    "link": "https://codeforces.com//contest/1490/problem/D",
    "problemId": "898526",
    "problem_idx": "D",
    "shortId": "1490D",
    "contest_number": "1490",
    "problem_submissions": {
        "G": [
            107575670,
            107570582,
            107580395,
            107578386,
            107578722,
            107587817,
            107582372,
            107587644,
            107590224,
            107587234,
            107581021,
            107587494,
            107591578,
            107587278,
            107594584,
            107580527,
            107594840,
            107604479,
            107585353
        ],
        "F": [
            107567259,
            107563218,
            107559121,
            107563180,
            107570162,
            107559715,
            107565176,
            107569965,
            107573956,
            107565331,
            107557975,
            107565094,
            107575477,
            107563453,
            107578839,
            107563945,
            107577436,
            107545806,
            107574260
        ],
        "E": [
            107556406,
            107555209,
            107554466,
            107554504,
            107563766,
            107548069,
            107557392,
            107558375,
            107560045,
            107556903,
            107568704,
            107559054,
            107564526,
            107568622,
            107566562,
            107557990,
            107565929,
            107550803,
            107568788
        ],
        "D": [
            107547185,
            107546416,
            107549582,
            107548987,
            107555867,
            107556006,
            107548279,
            107551082,
            107551588,
            107551655,
            107551977,
            107552563,
            107556439,
            107553824,
            107619966,
            107554583,
            107548604,
            107553073,
            107559705,
            107559541
        ],
        "C": [
            107543774,
            107582544,
            107542780,
            107545198,
            107545514,
            107545604,
            107541435,
            107544848,
            107546219,
            107546179,
            107546602,
            107549060,
            107548247,
            107550636,
            107543227,
            107548011,
            107545321,
            107547310,
            107550641,
            107555122
        ],
        "B": [
            107541208,
            107540999,
            107543105,
            107543215,
            107543363,
            107548411,
            107542386,
            107543350,
            107543787,
            107544607,
            107545190,
            107541258,
            107543035,
            107541260,
            107543659,
            107551661,
            107545377,
            107544997,
            107550231
        ],
        "A": [
            107538772,
            107538836,
            107539535,
            107539200,
            107538915,
            107539471,
            107539499,
            107538905,
            107539830,
            107541268,
            107539601,
            107539113,
            107538995,
            107538895,
            107540166,
            107538768,
            107540499,
            107538751,
            107538933
        ]
    },
    "name": "D. Permutation Transformation",
    "statement": "A permutation is a sequence of length n integers from 1 to n, in which\r\nall the numbers occur exactly once. For example, [1], [3, 5, 2, 1, 4],\r\n[1, 3, 2] permutations, and [2, 3, 2], [4, 3, 1], [0] no.Polycarp was\r\nrecently gifted a permutation a[1\r\ndots n] of length n. Polycarp likes trees more than permutations, so he\r\nwants to transform permutation a into a rooted binary tree. He\r\ntransforms an array of different integers into a tree as follows: the\r\nmaximum element of the array becomes the root of the tree; all elements\r\nto the left of the maximum form a left subtree (which is built according\r\nto the same rules but applied to the left part of the array), but if\r\nthere are no elements to the left of the maximum, then the root has no\r\nleft child; all elements to the right of the maximum form a right\r\nsubtree (which is built according to the same rules but applied to the\r\nright side of the array), but if there are no elements to the right of\r\nthe maximum, then the root has no right child. For example, if he builds\r\na tree by permutation a=[3, 5, 2, 1, 4], then the root will be the\r\nelement a_2=5, and the left subtree will be the tree that will be built\r\nfor the subarray a[1\r\ndots 1] = [3], and the right one for the subarray a[3\r\ndots 5] = [2, 1, 4]. As a result, the following tree will be built:\r\nAnother example: let the permutation be a=[1, 3, 2, 7, 5, 6, 4]. In this\r\ncase, the tree looks like this: Let us denote by d_v the depth of the\r\nvertex a_v, that is, the number of edges on the path from the root to\r\nthe vertex numbered a_v. Note that the root depth is zero. Given the\r\npermutation a, for each vertex, find the value of d_v.\r\n",
    "solutions": [
        "#include<iostream>\n#include<string>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<set>\n#include<map>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n\nint n;\nint arr[110];\nint ans[110];\n\nvoid recur(int s, int e, int depth)\n{\n\tint i;\n\tint mx;\n\tint idx;\n\n\tif (s > e) return;\n\n\tmx = -1;\n\tfor (i = s; i <= e; i++)\n\t{\n\t\tif (mx < arr[i])\n\t\t{\n\t\t\tmx = arr[i];\n\t\t\tidx = i;\n\t\t}\n\t}\n\n\tans[idx] = depth;\n\trecur(s, idx - 1, depth + 1);\n\trecur(idx + 1, e, depth + 1);\n}\n\nint main()\n{\n\tint t;\n\tint i;\n\n\tcin >> t;\n\twhile (t--)\n\t{\n\t\tcin >> n;\n\t\tfor (i = 0; i < n; i++)\n\t\t{\n\t\t\tcin >> arr[i];\n\t\t}\n\n\t\trecur(0, n - 1, 0);\n\n\t\tfor (i = 0; i < n; i++)\n\t\t{\n\t\t\tcout << ans[i] << ' ';\n\t\t}\n\t\tcout << '\\n';\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "divide and conquer",
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Permutation Transformation.json",
    "editorial_link": "https://codeforces.com//blog/entry/87874",
    "editorial": "We will construct the required tree recursively. Let us describe the\r\nstate of tree construction by three values , where is the segment of the\r\npermutation, and is the current depth. Then the following transitions\r\ncan be described: find the position of the maximum element on the\r\nsegment , that is, ; the depth of the vertex is equal to ; if , then\r\nmake the transition to the state ; if , then make the transition to the\r\nstate ; Then, in order to construct the required tree, it is necessary\r\nto take as the initial state.\r\n",
    "hint": []
}