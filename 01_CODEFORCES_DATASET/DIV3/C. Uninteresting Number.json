{
    "link": "https://codeforces.com//contest/2050/problem/C",
    "problemId": "3070028",
    "problem_idx": "C",
    "shortId": "2050C",
    "contest_number": "2050",
    "problem_submissions": {
        "G": [
            295020039,
            295012969,
            295024810,
            295026123,
            295231485,
            295230757,
            295027068,
            295011107,
            295020886,
            295043604,
            295023074,
            295040334,
            295040501,
            295044199,
            295042105,
            295035503,
            295046172,
            295069369,
            295055294,
            295058073
        ],
        "D": [
            295023542,
            295007735,
            295022150,
            295015640,
            295022096,
            295027211,
            295005995,
            295007532,
            295010040,
            295008211,
            295013052,
            295007075,
            295014360,
            295012052,
            295012580,
            295012327,
            295010790
        ],
        "F": [
            295009915,
            295016605,
            295015909,
            295021788,
            295023146,
            295035635,
            295031460,
            295012371,
            295027547,
            295033629,
            295028476,
            295029305,
            295012244,
            295027355,
            299441454,
            295024166,
            295024859,
            295021290
        ],
        "E": [
            295006159,
            295012248,
            295006655,
            295358340,
            294991246,
            295015587,
            295010009,
            295016041,
            295017979,
            295016907,
            295021107,
            295017866,
            295008404,
            295002349,
            295018392,
            295017130,
            295019301,
            295028396
        ],
        "C": [
            295000545,
            295002243,
            294997256,
            295011626,
            295006375,
            295000328,
            295001562,
            295020525,
            295004225,
            295001544,
            295003470,
            294999298,
            295008085,
            295003035,
            295005025,
            295008622,
            295001249
        ],
        "B": [
            294992701,
            294994611,
            294990329,
            295007113,
            294997489,
            294992969,
            294992993,
            295002206,
            294997468,
            294994758,
            294991989,
            294994433,
            294994702,
            294998118,
            294998487,
            295000433,
            294997971
        ],
        "A": [
            294987570,
            294988254,
            294987535,
            294987637,
            294990076,
            294987812,
            294987751,
            294999699,
            294989420,
            294988260,
            294987843,
            294987612,
            294989111,
            294989647,
            294989965,
            294992026,
            294994133
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137018",
    "editorial": "The requirement that a digit must remain a digit imposes the following\r\nrestrictions on transformations: we can transform into , into , into ,\r\nand into . Any other digit squared will exceed 9, therefore, it cannot\r\nbe transformed. Transformations involving and are useless, leaving us\r\nwith two possible actions: squaring the digit or the digit .We will use\r\nthe divisibility rule for . It states that a number is divisible by if\r\nand only if the sum of its digits is divisible by . Let\u00e2\u0080\u0099s see how the\r\nsum of the digits will change with the possible transformations. If we\r\nsquare , the sum of the digits increases by , and if we square , the sum\r\nof the digits increases by .We will count the number of digits in the\r\nnumber and the number of digits in the number. We can choose how many of\r\nthe available digits and we will transform. Transforming more than 8\r\ntwos and more than 8 threes is pointless because remainders modulo their\r\ntransformation adds to the sum will repeat.Thus, the final solution\r\nlooks like this: we calculate the sum of the digits in the number, count\r\nthe number of digits and . We will iterate over how many digits we\r\nchange (possibly 0, but no more than 8), and how many digits we change\r\n(possibly 0, but also no more than 8). Let\u00e2\u0080\u0099s say we changed digits and\r\ndigits , then the sum of the digits in the number increased by . If new\r\nsum is divisible by , the answer is \"YES\". If such a situation was never\r\nreached during the iteration, then the answer is \"NO\".\r\n",
    "name": "C. Uninteresting Number",
    "statement": "You are given a number n with a length of no more than 10^5.You can\r\nperform the following operation any number of times: choose one of its\r\ndigits, square it, and replace the original digit with the result. The\r\nresult must be a digit (that is, if you choose the digit x, then the\r\nvalue of x^2 must be less than 10).Is it possible to obtain a number\r\nthat is divisible by 9 through these operations?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;\u00a0typedef long long ll;\u00a0int main(){    ios::sync_with_stdio(false);    cin.tie(0);        int t;    cin >> t;        while(t--){        string n;        cin >> n;                ll S_initial = 0;        int count_2 =0, count_3=0;                for(char c : n){            int digit = c - '0';            S_initial += digit;            if(digit ==2) count_2++;            if(digit ==3) count_3++;        }                ll target = (9 - (S_initial %9))%9;                if(target ==0){            cout << \"YES\\n\";            continue;        }                ll k = count_2;        ll m = count_3;                bool possible = false;                for(int y_res=0; y_res<=2; y_res++){            if(y_res > m) continue;                        ll req_x_mod9;            if(y_res ==0){                req_x_mod9 = (5 * target) %9;            }            else if(y_res ==1){                req_x_mod9 = (5 * (target +3))%9;            }            else{                req_x_mod9 = (5 * (target +6))%9;            }                        if(req_x_mod9 <=k){                possible = true;                break;            }        }                if(possible){            cout << \"YES\\n\";        }        else{            cout << \"NO\\n\";        }    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "math"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Uninteresting Number.json"
}