{
    "link": "https://codeforces.com//contest/1914/problem/D",
    "problemId": "2388662",
    "problem_idx": "D",
    "shortId": "1914D",
    "contest_number": "1914",
    "problem_submissions": {
        "G1": [
            238018438,
            238000852,
            238043791,
            238031142,
            238036163,
            238022582,
            238087384,
            238021948,
            238036052,
            238042057,
            238044748,
            238044591,
            238050871,
            238049279,
            238041985,
            238041747,
            238051023,
            238045930,
            238048344,
            238046536
        ],
        "G2": [
            238018282,
            238029024,
            238043678,
            238093831,
            238412098,
            238148947,
            238064785,
            238049222,
            238126038,
            238092486,
            238087948,
            238046581
        ],
        "F": [
            237987101,
            237981616,
            238101450,
            238044891,
            238001429,
            238000631,
            238087366,
            238087349,
            237994511,
            237993999,
            238008838,
            238002775,
            238029366,
            238028703,
            238047984,
            238031007,
            238059042,
            238016608,
            238042673,
            238020683,
            238033160,
            238082942,
            238008762,
            238014024
        ],
        "E1": [
            237976613,
            237967906,
            237968713,
            237979764,
            237992475,
            238087307,
            237986420,
            237997495,
            237988975,
            237985077,
            238029878,
            238002145,
            237999975,
            237992524,
            237984395,
            237997791,
            237997737,
            237990723,
            237990559,
            238004571,
            238010992,
            238032680,
            237982405,
            237983507
        ],
        "E2": [
            237970390,
            237967235,
            237968505,
            237975110,
            237992780,
            238087324,
            238087318,
            237984061,
            238010057,
            237989036,
            237983616,
            238029826,
            238001371,
            237999445,
            237992650,
            237985208,
            237997942,
            237998156,
            237990939,
            238005322,
            238011620,
            238032636,
            237982481,
            237984584
        ],
        "D": [
            237961065,
            237957916,
            238104889,
            237961793,
            237958795,
            237961367,
            238087292,
            238087270,
            237986240,
            237957524,
            237975283,
            237962518,
            238030156,
            237976418,
            237969884,
            237965519,
            237971483,
            237975166,
            237976975,
            237983490,
            237986064,
            237975702,
            237967060,
            237966732
        ],
        "C": [
            237951819,
            237950855,
            237956944,
            237969583,
            237951814,
            238087237,
            237972501,
            237951530,
            237961828,
            237952459,
            238030394,
            237963594,
            237963444,
            237965677,
            237960539,
            237979704,
            237972502,
            237967766,
            237971691,
            237960187,
            237954042,
            237957084
        ],
        "B": [
            237947357,
            237946623,
            237951415,
            237946292,
            237950077,
            238087224,
            237953989,
            237947273,
            237953071,
            237947198,
            237948581,
            237951930,
            237944853,
            237953412,
            237972118,
            237952004,
            237972737,
            237961138,
            237948416,
            237947616,
            237950073
        ],
        "A": [
            237944355,
            237943313,
            237944942,
            237948071,
            237945058,
            238087212,
            237948311,
            237944114,
            237946737,
            237943516,
            237943664,
            237945100,
            237964491,
            237948297,
            237965985,
            237946077,
            237945584,
            237949431,
            237943847,
            237944147,
            237943327
        ]
    },
    "name": "D. Three Activities",
    "statement": "Winter holidays are coming up. They are going to last for n days.During\r\nthe holidays, Monocarp wants to try all of these activities with his\r\nfriends: go skiing; watch a movie in a cinema; play board games.\r\nMonocarp knows that, on the i-th day, exactly a_i friends will join him\r\nfor skiing, b_i friends will join him for a movie and c_i friends will\r\njoin him for board games.Monocarp also knows that he can’t try more than\r\none activity in a single day.Thus, he asks you to help him choose three\r\ndays x, y, z in such a way that the total number of friends to join him\r\nfor the activities (a_x + b_y + c_z) is maximized.\r\n",
    "solutions": [
        "//haachama cooking\n#include <bits/stdc++.h>\n \nusing namespace std;\n#define ll long long\n#define rep(i,m,n) for (ll i=m;i<=n;i++)\n#define reb(i,m,n) for (ll i=m;i>=n;i--)\n#define rv(i,vt) for (auto i:vt)\n#define pb push_back\n#define ii pair<ll,ll>\n#define F first\n#define S second\n#define sz(v) (int)v.size()\n#define iii tuple<ll,ll,ll>\nconst ll N=1e5+5,mod=1e9+7;\nll n,k,a[3][N],dp[8];\nvoid prep(){\n}\nvoid solve()\n{\n    cin>>n;\n    rep(i,0,2)\n    rep(j,1,n) cin>>a[i][j];\n    rep(i,1,7) dp[i]=-1e18;\n    dp[0]=0;\n    rep(i,1,n)\n    {\n    reb(j,7,0)\n    rep(l,0,2) if ((j&(1<<l))!=0) \n    {\n        dp[j]=max(dp[j],dp[j^(1<<l)]+a[l][i]);\n    }\n    //rep(j,0,7) cout<<dp[j]<<\" \";\n    //cout<<\"\\n\";\n    }\n    cout<<dp[7];\n}\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    ll tests=1;\n    cin>>tests;\n    prep();\n    while (tests--){\n        solve();\n        cout<<endl;\n    }\n    cerr << \"\\n\" << (double)clock() / CLOCKS_PER_SEC * 1000 << \" ms\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Three Activities.json",
    "editorial_link": "https://codeforces.com//blog/entry/123530",
    "editorial": "The main idea of the problem is that almost always you can take the\r\nmaximum in each array. And when you canât, you donât need to look at a\r\nlot of smaller numbers. In particular, it is enough to consider the\r\nthree largest numbers from each array.Letâs show the correctness of this\r\nfor the first array. There always exists an optimal answer in which one\r\nof the three largest numbers is taken from array . Letâs fix some taken\r\nelements in arrays and . Then at least one of the three positions of the\r\nlargest elements in is different from both fixed position.The argument\r\nis generalized to all three arrays similarly.Thus, the solution looks as\r\nfollows. Find the positions of the three maximums in each array and\r\niterate over the answer in . Finding three maximums can be done using\r\nsorting or in one linear time pass over the array.\r\n",
    "hint": []
}