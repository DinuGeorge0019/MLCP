{
    "link": "https://codeforces.com//contest/1256/problem/E",
    "problemId": "459828",
    "problem_idx": "E",
    "shortId": "1256E",
    "contest_number": "1256",
    "problem_submissions": {
        "C": [
            64235233,
            64227620,
            64227351,
            64236152,
            64252052,
            64225352,
            64226667,
            64237109,
            64249877,
            64222625,
            64278670,
            64233886,
            64252797,
            64233119,
            64246491,
            64253891
        ],
        "F": [
            64233031,
            64241980,
            64252827,
            64253934,
            64245116,
            64253899,
            64232381,
            64237354,
            64239968,
            64313496,
            64235709,
            64249337
        ],
        "E": [
            64221946,
            64223976,
            64247117,
            64244704,
            64224516,
            64249242,
            64227415,
            64227683,
            64231825,
            64236214,
            64243137,
            64237104,
            64247426,
            64247032,
            64250549,
            64247147,
            64241890,
            64239099,
            64237754
        ],
        "B": [
            64221631,
            64212047,
            64218399,
            64317159,
            64218926,
            64240089,
            64228311,
            64210409,
            64218403,
            64212202,
            64219328,
            64218836,
            64219933,
            64225452,
            64221378,
            64217229,
            64214632,
            64216240,
            64215942
        ],
        "D": [
            64215172,
            64216393,
            64233882,
            64227241,
            64227346,
            64251438,
            64216967,
            64223705,
            64223794,
            64230378,
            64223867,
            64223333,
            64232043,
            64229490,
            64228441,
            64222986,
            64234141,
            64223821,
            64223652
        ],
        "A": [
            64212957,
            64209179,
            64210635,
            64210231,
            64209282,
            64209523,
            64209181,
            64209149,
            64208937,
            64208806,
            64214758,
            64212460,
            64209582,
            64215325,
            64209661,
            64209581,
            64209733,
            64208776,
            64209184,
            64209129
        ]
    },
    "name": "E. Yet Another Division Into Teams",
    "statement": "There are n students at your university. The programming skill of the\r\ni-th student is a_i. As a coach, you want to divide them into teams to\r\nprepare them for the upcoming ICPC finals. Just imagine how good this\r\nuniversity is if it has 2\r\ncdot 10^5 students ready for the finals!Each team should consist of .\r\nEach student should belong to . The of a team is the difference between\r\nthe programming skill of some student that belongs to this team and the\r\nprogramming skill of some student that belongs to this team (in other\r\nwords, if the team consists of k students with programming skills\r\na[i_1], a[i_2],\r\ndots, a[i_k], then the of this team is\r\nmax\r\nlimits_{j=1}^{k} a[i_j] -\r\nmin\r\nlimits_{j=1}^{k} a[i_j]).The total is the sum of of all teams\r\nformed.Your task is to minimize the total of the division of students\r\nand find the optimal way to divide the students.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXA=3e5;\nint n,N,b[MAXA],c[MAXA];\nlong long f[MAXA],a[MAXA];\nint mysort(int x,int y){\n    return a[x]<a[y];\n}\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) scanf(\"%lld\",&a[i]),c[i]=i;\n    sort(c+1,c+n+1,mysort);\n    for(int i=1;i<=n;i++){\n\tf[i]=1e18;\n\tfor(int j=3;j<=min(6,i);j++){\n\t    f[i]=min(f[i],f[i-j]+a[c[i]]-a[c[i-j+1]]);\n\t}\n    }\n    for(int i=n;i;){\n\tfor(int j=3;j<=min(6,i);j++)\n\t    if(f[i]==f[i-j]+a[c[i]]-a[c[i-j+1]]){\n\t\t++N;\n\t\tfor(int k=1;k<=j;k++) b[c[i-k+1]]=N;\n\t\ti=i-j;\n\t\tbreak;\n\t    }\n    }\n    printf(\"%lld %d\\n\",f[n],N);\n    for(int i=1;i<=n;i++) printf(\"%d \",b[i]);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "sortings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Yet Another Division Into Teams.json",
    "editorial_link": "https://codeforces.com//blog/entry/71184",
    "editorial": "Let\u00e2\u0080\u0099s sort all students by their programming skills but save the initial\r\nindices to restore the answer.Now we can understand that we don\u00e2\u0080\u0099t need\r\nto compose the team of size greater than because in this case we can\r\nsplit it into more teams with fewer participants and obtain the same or\r\neven less answer.Now we can do the standard dynamic programming the\r\nminimum total diversity of the division if we divided the first students\r\n(in sorted order). Initially, , all other values of are . Because of the\r\nfact above, we can do only three transitions (-indexed): ; ; . The\r\nanswer is and we can restore it by standard carrying parent values (as a\r\nparent of the state we can use, for example, the number of participants\r\nin the team).\r\n"
}