{
    "link": "https://codeforces.com//contest/1203/problem/D1",
    "problemId": "388105",
    "problem_idx": "D1",
    "shortId": "1203D1",
    "contest_number": "1203",
    "problem_submissions": {
        "A": [
            58744193,
            58717652,
            58743556,
            58718250,
            58744628,
            58720766,
            58718623,
            58719826,
            58719026,
            58719223,
            58720907,
            58718806,
            58718313,
            58731049,
            58724059,
            58717997,
            58717665,
            58717946
        ],
        "B": [
            58741838,
            58722288,
            58747764,
            58720873,
            58719714,
            58728242,
            58723125,
            58722876,
            58865722,
            58741989,
            58719552,
            58723345,
            58738132,
            58725543,
            58726008,
            58742758,
            58718353,
            58720068,
            58720276
        ],
        "C": [
            58738864,
            58722717,
            58723287,
            58726641,
            58723731,
            58747526,
            58725554,
            58728497,
            58720084,
            58730777,
            58722069,
            58725768,
            58733799,
            58727591,
            58734639,
            58733064,
            58793949,
            58719804,
            58718232,
            58722089
        ],
        "D1": [
            58737392,
            58740598,
            58737907,
            58751996,
            58752736,
            58722723,
            58735762,
            58744374,
            58731531,
            58736531,
            58746441,
            58753046,
            58727783,
            58754349,
            58747632,
            58763319,
            58722454,
            58723392,
            58724890
        ],
        "E": [
            58737277,
            58725591,
            58727402,
            58730046,
            58728565,
            58717897,
            58745296,
            58733445,
            58726761,
            58739529,
            58754025,
            58729672,
            58719104,
            58747836,
            58757692,
            58749403,
            58794584,
            58725337,
            58726752,
            58739914
        ],
        "F1": [
            58734163,
            58754154,
            58748943,
            58753166,
            58758119,
            58747862,
            58740845,
            58761872,
            58770577,
            58756509,
            58762270,
            58761662,
            58765489,
            58764589,
            58758207,
            58770681,
            58768272,
            58774089
        ],
        "D2": [
            58733429,
            58736615,
            58737493,
            58747587,
            58752636,
            58721716,
            58732204,
            58743923,
            58747785,
            58752110,
            58747809,
            58752550,
            58726134,
            58749055,
            58750977,
            58763703,
            58725996,
            58733867,
            58733265
        ],
        "F2": [
            58728336,
            58758593,
            58745831,
            58764824,
            58759012,
            58758260,
            58825408,
            58785361,
            58812387,
            58768141,
            59394735,
            58845496,
            58845431
        ]
    },
    "name": "D1. Remove the Substring  easy version ",
    "statement": ".You are given a string s and a string t, both consisting only of\r\nlowercase Latin letters. It is guaranteed that t can be obtained from s\r\nby removing some (possibly, zero) number of characters (not necessary\r\ncontiguous) from s without changing order of remaining characters (in\r\nother words, it is guaranteed that t is a subsequence of s).For example,\r\nthe strings \"\", \"\", \"\", \"\" and \"\" are subsequences of the string \"\". But\r\nthe strings \"\", \"\", \"\" are not subsequences of the string \"\".You want to\r\nremove some substring (contiguous subsequence) from s of such that after\r\nremoving this substring t will remain a subsequence of s.If you want to\r\nremove the substring s[l;r] then the string s will be transformed to s_1\r\ns_2\r\ndots s_{l-1} s_{r+1} s_{r+2}\r\ndots s_{|s|-1} s_{|s|} (where |s| is the length of s).Your task is to\r\nfind the maximum possible length of the substring you can remove so that\r\nt is still a subsequence of s.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n\tstring s, t;\n\tcin >> s >> t;\n\tint j = 0;\n\tvector<int> f(t.size() + 1, s.size());\n\tf[0] = -1;\n\tfor (int i = 0; i < s.size(); ++i) {\n\t\tif (j < t.size() && s[i] == t[j]) {\n\t\t\tf[++j] = i;\n\t\t}\n\t}\n\tj = 0;\n\tint ans = 0;\n\tfor (int i = s.size() - 1; i >= 0; --i) {\n\t\tans = max(ans, i - f[t.size() - j]);\n\t\tif (j < t.size() && s[i] == t[t.size() - j - 1]) ++j;\n\t}\n\tcout << ans << endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D1. Remove the Substring  easy version .json",
    "editorial_link": "https://codeforces.com//blog/entry/69108",
    "editorial": "In this problem we can just iterate over all possible substrings and try\r\nto remove each of them. After removing the substring we can check if\r\nremains the subsequence of in linear time.Let we remove the substring .\r\nLetâs maintain a pointer (the initial value of the pointer is ) and\r\niterate over all possible from to . If and letâs increase by one. If\r\nafter all iterations then letâs update the answer with the length of the\r\ncurrent substring.\r\n",
    "hint": []
}