{
    "link": "https://codeforces.com//contest/1066/problem/E",
    "problemId": "235863",
    "problem_idx": "E",
    "shortId": "1066E",
    "contest_number": "1066",
    "problem_submissions": {
        "F": [
            44205429,
            44212106,
            44214312,
            44211772,
            44215735,
            44216480,
            44217948,
            44226593
        ],
        "A": [
            44198897,
            44190264,
            44190996,
            44190521,
            44194374,
            44191748,
            44192884,
            44190114,
            44190457,
            44190392,
            44190295,
            44232541,
            44190105,
            44190131,
            44190364,
            44190102,
            44190147,
            44190161,
            44189962,
            44194814,
            44190476
        ],
        "B": [
            44197927,
            44195073,
            44192967,
            44193419,
            44192423,
            44197883,
            44195893,
            44197752,
            44191223,
            44190844,
            44195475,
            44193709,
            44258187,
            44195185,
            44192726,
            44197021,
            44193282,
            44199995,
            44192974,
            44197693,
            44198781,
            44196227
        ],
        "E": [
            44194302,
            44198044,
            44197688,
            44200186,
            44206112,
            44204683,
            44211808,
            44198204,
            44195532,
            44205080,
            44203248,
            44258229,
            44204157,
            44207684,
            44206425,
            44203537,
            44205955,
            44206848,
            44208459,
            44207862,
            44206046
        ],
        "D": [
            44192050,
            44200143,
            44200943,
            44204312,
            44203052,
            44199330,
            44205029,
            44195917,
            44202796,
            44193485,
            44198842,
            44258212,
            44199756,
            44199261,
            44202172,
            44206141,
            44203730,
            44203685,
            44199896,
            44193449,
            44202596
        ],
        "C": [
            44190191,
            44192207,
            44196592,
            44195653,
            44199921,
            44207097,
            44202048,
            44193208,
            44195430,
            44199895,
            44196374,
            44258203,
            44196767,
            44197574,
            44194617,
            44197700,
            44192395,
            44195734,
            44195568,
            44200428,
            44198081
        ]
    },
    "name": "E. Binary Numbers AND Sum",
    "statement": "You are given two huge binary integer numbers a and b of lengths n and m\r\nrespectively. You will repeat the following process: if b > 0, then add\r\nto the answer the value a \r\n&  b and divide b by 2 rounding down (i.e. remove the last digit of b),\r\nand repeat the process again, otherwise stop the process.The value a \r\n&  b means bitwise of a and b. Your task is to calculate the answer\r\nmodulo 998244353.Note that you should add the value a \r\n&  b to the answer in decimal notation, not in binary. So your task is\r\nto calculate the answer in decimal notation. For example, if a = 1010_2 \r\n(10_{10}) and b = 1000_2  (8_{10}), then the value a \r\n&  b will be equal to 8, not to 1000.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define FOR(i, a, b) for (int i = (a); i <= (b); ++i)\n#define FORD(i, a, b) for (int i = (a); i >= (b); --i)\n#define REP(i, a) for (int i = 0; i < (a); ++i)\n#define DEBUG(x) { cerr << #x << '=' << x << endl; }\n#define Arr(a, l, r) { cerr << #a << \" = {\"; FOR(_, l, r) cerr << ' ' << a[_]; cerr << \"}\\n\"; }\n#define N 1010100\n#define pp pair<int, int>\n#define endl '\\n'\n#define IO ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)\n#define taskname \"\"\n#define bit(S, i) (((S) >> (i)) & 1)\n#define all(s) s.begin(), s.end()\nusing namespace std;\n\nconst long long MOD = 998244353;\nint main() {\n    #ifdef NERO\n    freopen(\"test.inp\",\"r\",stdin);\n    freopen(\"test.out\",\"w\",stdout);\n    double stime = clock();\n    #else \n        //freopen(taskname\".inp\",\"r\",stdin);\n        //freopen(taskname\".out\",\"w\",stdout);\n    #endif //NERO\n    IO;\n    int n, m;\n    string a, b;\n    cin >> n >> m;\n    cin >> a >> b;\n    reverse(all(a));\n    reverse(all(b));\n    FOR(i, n + 1, max(n, m)) a.push_back('0');\n    FOR(i, m + 1, max(n, m)) b.push_back('0');\n    reverse(all(a));\n    reverse(all(b));\n    a = '~' + a;\n    b = '~' + b;\n    n = a.size() - 1;\n    long long sum = 0, ans = 0;\n    long long POW = 1;\n    FORD(i, n, 1) {\n        if (a[i] == '1') sum = (sum + POW) % MOD;\n        POW = (POW * 2) % MOD;\n        if (b[i] == '1') ans = (ans + sum) % MOD;\n    }\n    cout << ans;\n    #ifdef NERO\n    double etime = clock();\n    cerr << \"Execution time: \" << (etime - stime) / CLOCKS_PER_SEC * 1000 << \" ms.\\n\";\n    #endif // NERO\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Binary Numbers AND Sum.json",
    "editorial_link": "https://codeforces.com//blog/entry/62419",
    "editorial": "To solve this problem letâs take a look which powers of in will be\r\naffected by powers of in . Firstly, letâs reverse numbers. Letâs carry\r\nthe current power of (let it be ), the current sum of powers of in from\r\nthe position to the current position inclusive (let it be ) and the\r\nanswer is . Initially, , and . Letâs iterate over all bits of from to .\r\nLet the current bit in have the number . Firstly, if and then set (in\r\nother words, we add to the sum of powers of in the current power of ).\r\nIf then this bit will add to the answer all the powers of in from to\r\ninclusive (in other words, ), so if it is, then set . And after all we\r\ncan set and go on to . And donât forget to take all values modulo to\r\navoid overflow.\r\n",
    "hint": []
}