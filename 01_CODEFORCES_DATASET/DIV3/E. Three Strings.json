{
    "link": "https://codeforces.com//contest/2050/problem/E",
    "problemId": "3070030",
    "problem_idx": "E",
    "shortId": "2050E",
    "contest_number": "2050",
    "problem_submissions": {
        "G": [
            295020039,
            295012969,
            295024810,
            295026123,
            295231485,
            295230757,
            295027068,
            295011107,
            295020886,
            295043604,
            295023074,
            295040334,
            295040501,
            295044199,
            295042105,
            295035503,
            295046172,
            295069369,
            295055294,
            295058073
        ],
        "D": [
            295023542,
            295007735,
            295022150,
            295015640,
            295022096,
            295027211,
            295005995,
            295007532,
            295010040,
            295008211,
            295013052,
            295007075,
            295014360,
            295012052,
            295012580,
            295012327,
            295010790
        ],
        "F": [
            295009915,
            295016605,
            295015909,
            295021788,
            295023146,
            295035635,
            295031460,
            295012371,
            295027547,
            295033629,
            295028476,
            295029305,
            295012244,
            295027355,
            299441454,
            295024166,
            295024859,
            295021290
        ],
        "E": [
            295006159,
            295012248,
            295006655,
            295358340,
            294991246,
            295015587,
            295010009,
            295016041,
            295017979,
            295016907,
            295021107,
            295017866,
            295008404,
            295002349,
            295018392,
            295017130,
            295019301,
            295028396
        ],
        "C": [
            295000545,
            295002243,
            294997256,
            295011626,
            295006375,
            295000328,
            295001562,
            295020525,
            295004225,
            295001544,
            295003470,
            294999298,
            295008085,
            295003035,
            295005025,
            295008622,
            295001249
        ],
        "B": [
            294992701,
            294994611,
            294990329,
            295007113,
            294997489,
            294992969,
            294992993,
            295002206,
            294997468,
            294994758,
            294991989,
            294994433,
            294994702,
            294998118,
            294998487,
            295000433,
            294997971
        ],
        "A": [
            294987570,
            294988254,
            294987535,
            294987637,
            294990076,
            294987812,
            294987751,
            294999699,
            294989420,
            294988260,
            294987843,
            294987612,
            294989111,
            294989647,
            294989965,
            294992026,
            294994133
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137018",
    "editorial": "Let\u00e2\u0080\u0099s use the idea of dynamic programming. Let be the answer to the\r\nproblem when considering string as its own prefix of length , string as\r\nits own prefix of length , and string as its own prefix of length .Then\r\nthe dynamic programming recurrence is easy: we need to iterate over\r\nwhere we took the next (()-th) character of string .If the character is\r\ntaken from string , the answer is: , if , otherwise (since we need to\r\nreplace character with ). If it is taken from string , the answer is\r\ncalculated similarly: , if , otherwise. Thus, to obtain the minimum\r\nvalue of the current dynamic programming state, we need to take the\r\nminimum of the two obtained values.To get the answer, we need to take\r\nthe value of the dynamic programming table at , where is the length of\r\nstring and is the length of string .The final time complexity of the\r\nsolution is per test case.\r\n",
    "name": "E. Three Strings",
    "statement": "You are given three strings: a, b, and c, consisting of lowercase Latin\r\nletters. The string c was obtained in the following way: At each step,\r\neither string a or string b was randomly chosen, and the first character\r\nof the chosen string was removed from it and appended to the end of\r\nstring c, until one of the strings ran out. After that, the remaining\r\ncharacters of the non-empty string were added to the end of c. Then, a\r\ncertain number of characters in string c were randomly changed. For\r\nexample, from the strings a=\r\ncolor{red}{\r\ntext{abra}} and b=\r\ncolor{blue}{\r\ntext{cada}}, without character replacements, the strings\r\ncolor{blue}{\r\ntext{ca}}\r\ncolor{red}{\r\ntext{ab}}\r\ncolor{blue}{\r\ntext{d}}\r\ncolor{red}{\r\ntext{ra}}\r\ncolor{blue}{\r\ntext{a}},\r\ncolor{red}{\r\ntext{abra}}\r\ncolor{blue}{\r\ntext{cada}},\r\ncolor{red}{\r\ntext{a}}\r\ncolor{blue}{\r\ntext{cada}}\r\ncolor{red}{\r\ntext{bra}} could be obtained.Find the minimum number of characters that\r\ncould have been changed in string c.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;\u00a0int main(){    ios::sync_with_stdio(false);    cin.tie(0);    int t;    cin >> t;    while(t--){        string a, b, c;        cin >> a >> b >> c;        int n = a.size();        int m = b.size();        const int INF = 1e9;        vector<vector<int>> dp(n+1, vector<int>(m+1, INF));        dp[0][0] = 0;        for(int i=0; i<=n; i++){            for(int j=0; j<=m; j++){                if(i < n){                    int pos = i + j;                    if(pos < c.size()){                        int cost = dp[i][j] + (a[i] != c[pos] ? 1 : 0);                        if(cost < dp[i+1][j]){                            dp[i+1][j] = cost;                        }                    }                }                if(j < m){                    int pos = i + j;                    if(pos < c.size()){                        int cost = dp[i][j] + (b[j] != c[pos] ? 1 : 0);                        if(cost < dp[i][j+1]){                            dp[i][j+1] = cost;                        }                    }                }            }        }        cout << dp[n][m] << \"\\n\";    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "implementation",
        "strings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Three Strings.json"
}