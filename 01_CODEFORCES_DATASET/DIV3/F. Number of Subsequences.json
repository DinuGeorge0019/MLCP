{
    "link": "https://codeforces.com//contest/1426/problem/F",
    "problemId": "741035",
    "problem_idx": "F",
    "shortId": "1426F",
    "contest_number": "1426",
    "problem_submissions": {
        "F": [
            94089387,
            94092918,
            94090403,
            94095742,
            94088134,
            94102934,
            94096551,
            94090044,
            94100502,
            94103680,
            218894732,
            131689129,
            94100223,
            94101665,
            94085023,
            94099275,
            94107717,
            94108168
        ],
        "E": [
            94079004,
            94083320,
            94085257,
            94085446,
            94092844,
            94090813,
            94089559,
            94099737,
            94089791,
            94097053,
            94092910,
            94097010,
            94098462,
            94085593,
            94101850,
            94089304
        ],
        "D": [
            94071411,
            94077723,
            94078265,
            94077474,
            94069955,
            94078150,
            94084721,
            94071027,
            94084864,
            94076625,
            94083571,
            94075395,
            94086923,
            94082098,
            94077297,
            94085021
        ],
        "C": [
            94067630,
            94073367,
            94069883,
            94073399,
            94089927,
            94071160,
            94078615,
            94067330,
            94079325,
            94073107,
            94073949,
            94069099,
            94077626,
            94066598,
            94072495,
            94075528
        ],
        "A": [
            94065015,
            94061620,
            94061516,
            94063683,
            94064521,
            94061955,
            94064781,
            94061581,
            94061323,
            94061123,
            94062843,
            94062137,
            94062437,
            94068632,
            94061414,
            94062568
        ],
        "B": [
            94063517,
            94066888,
            94067224,
            94068533,
            94065544,
            94066401,
            94071303,
            94080232,
            94070524,
            94065932,
            94070012,
            94081030,
            94072459,
            94087907,
            94066918,
            94069482
        ]
    },
    "name": "F. Number of Subsequences",
    "statement": "You are given a string s consisting of lowercase Latin letters \"\", \"\"\r\nand \"\" and question marks \"\".Let the number of question marks in the\r\nstring s be k. Let\u2019s replace each question mark with one of the letters\r\n\"\", \"\" and \"\". Here we can obtain all 3^{k} possible strings consisting\r\nonly of letters \"\", \"\" and \"\". For example, if s = \"\" then we can obtain\r\nthe following strings: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"].Your task is\r\nto count the total number of subsequences \"\" in all resulting strings.\r\nSince the answer can be very large, print it modulo 10^{9} + 7.A\r\nsubsequence of the string t is such a sequence that can be derived from\r\nthe string t after removing some (possibly, zero) number of letters\r\nwithout changing the order of remaining letters. For example, the string\r\n\"\" contains two subsequences \"\" a subsequence consisting of letters at\r\npositions (2, 5, 6) and a subsequence consisting of letters at positions\r\n(3, 5, 6).\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std ;\n\n#define ll long long \n#define pb push_back\n#define mem0(a) memset(a,0,sizeof(a))\n#define mem1(a) memset(a,-1,sizeof(a))\n#define memf(a) memset(a,false,sizeof(a))\n#define all(v) v.begin(),v.end()\n#define sz(a) (ll)a.size()\n#define F first\n#define S second\n#define INF 2000000000000000000\n#define endl \"\\n\"\n#define _time_ 1.0 * clock() / CLOCKS_PER_SEC\n#define popcount(x) __builtin_popcountll(x)\n#define pll pair<ll,ll> \n#define ld long double\n\nconst int M=1000000007;\nconst int MM=998244353;\nconst long double PI = acos(-1);\n\nll power(ll b,ll e,ll m)\n{\n    if(e==0) return 1;\n    if(e&1) return b*power(b*b%m,e/2,m)%m;\n    return power(b*b%m,e/2,m);\n}\nll power( ll b, ll e)\n{\n    if(e==0) return 1;\n    if(e&1) return b*power(b*b,e/2);\n    return power(b*b,e/2);\n}\ntemplate<typename T, typename U> static inline void amin(T &x, U y){ if(y<x) x=y; }\ntemplate<typename T, typename U> static inline void amax(T &x, U y){ if(x<y) x=y; }\ntemplate<typename T, typename U> ostream& operator<<(ostream &os, const pair<T, U> &p)\n{ \n    return os<<'('<<p.F<< \",\"<<p.S<<')'; \n}\n\n    \nconst int MOD=1000000007;\nstruct Mint {\n    int val;\n \n    Mint(long long v = 0) {\n        if (v < 0)\n            v = v % MOD + MOD;\n        if (v >= MOD)\n            v %= MOD;\n        val = v;\n    }\n \n    static int mod_inv(int a, int m = MOD) {\n        int g = m, r = a, x = 0, y = 1;\n        while (r != 0) {\n            int q = g / r;\n            g %= r; swap(g, r);\n            x -= q * y; swap(x, y);\n        } \n        return x < 0 ? x + m : x;\n    } \n    explicit operator int() const {\n        return val;\n    }\n    Mint& operator+=(const Mint &other) {\n        val += other.val;\n        if (val >= MOD) val -= MOD;\n        return *this;\n    }\n    Mint& operator-=(const Mint &other) {\n        val -= other.val;\n        if (val < 0) val += MOD;\n        return *this;\n    }\n    static unsigned fast_mod(uint64_t x, unsigned m = MOD) {\n           #if !defined(_WIN32) || defined(_WIN64)\n                return x % m;\n           #endif\n           unsigned x_high = x >> 32, x_low = (unsigned) x;\n           unsigned quot, rem;\n           asm(\"divl %4\\n\"\n            : \"=a\" (quot), \"=d\" (rem)\n            : \"d\" (x_high), \"a\" (x_low), \"r\" (m));\n           return rem;\n    }\n    Mint& operator*=(const Mint &other) {\n        val = fast_mod((uint64_t) val * other.val);\n        return *this;\n    }\n    Mint& operator/=(const Mint &other) {\n        return *this *= other.inv();\n    }\n    friend Mint operator+(const Mint &a, const Mint &b) { return Mint(a) += b; }\n    friend Mint operator-(const Mint &a, const Mint &b) { return Mint(a) -= b; }\n    friend Mint operator*(const Mint &a, const Mint &b) { return Mint(a) *= b; }\n    friend Mint operator/(const Mint &a, const Mint &b) { return Mint(a) /= b; }\n    Mint& operator++() {\n        val = val == MOD - 1 ? 0 : val + 1;\n        return *this;\n    }\n    Mint& operator--() {\n        val = val == 0 ? MOD - 1 : val - 1;\n        return *this;\n    }\n    Mint operator++(int32_t) { Mint before = *this; ++*this; return before; }\n    Mint operator--(int32_t) { Mint before = *this; --*this; return before; }\n    Mint operator-() const {\n        return val == 0 ? 0 : MOD - val;\n    }\n    bool operator==(const Mint &other) const { return val == other.val; }\n    bool operator!=(const Mint &other) const { return val != other.val; }\n    Mint inv() const {\n        return mod_inv(val);\n    }\n    Mint power(long long p) const {\n        assert(p >= 0);\n        Mint a = *this, result = 1;\n        while (p > 0) {\n            if (p & 1)\n                result *= a;\n \n            a *= a;\n            p >>= 1;\n        }\n        return result;\n    }\n    friend ostream& operator << (ostream &stream, const Mint &m) {\n        return stream << m.val;\n    }\n    friend istream& operator >> (istream &stream, Mint &m) {\n        return stream>>m.val;   \n    }\n};\n\n\nconst int N = 200005;\nstring s;\nint n;\n\nMint dp[N][3];\n\nint _runtimeTerror_()\n{\n    cin>>n>>s;\n    int cnt = 0;\n    for(int i=1;i<=n;++i)\n    {\n        dp[i][0] = dp[i-1][0];\n        dp[i][1] = dp[i-1][1];\n        dp[i][2] = dp[i-1][2];\n        char c = s[i-1];\n        if(s[i-1] != '?')\n        {\n            if(c=='a')\n                dp[i][0] += Mint(3).power(cnt);\n            else if(c=='b')\n                dp[i][1] += dp[i-1][0];\n            else if(c=='c')\n                dp[i][2] += dp[i-1][1];\n        }\n        else\n        {\n            dp[i][0] += Mint(3).power(cnt)+ 2*dp[i-1][0];\n            dp[i][1] += dp[i-1][0] + 2*dp[i-1][1];\n            dp[i][2] += dp[i-1][1] + 2*dp[i-1][2];\n        }\n        if(s[i-1]=='?')\n            ++cnt;\n    }\n    // for(int i=1;i<=n;++i)\n    // {\n    //     for(int j=0;j<3;++j)\n    //         cout<<dp[i][j]<<\" \";\n    //     cout<<\"\\n\";\n    // }\n    cout<<dp[n][2]<<\"\\n\";\n    return 0;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n    #ifdef runSieve\n        sieve();\n    #endif\n    #ifdef NCR\n        initialize();\n    #endif\n    int TESTS=1;\n    //cin>>TESTS;\n    while(TESTS--)\n        _runtimeTerror_();\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "strings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Number of Subsequences.json",
    "editorial_link": "https://codeforces.com//blog/entry/83120",
    "editorial": "There are several more or less complicated combinatorial solutions to\r\nthis problem, but I will describe a dynamic programming one which, I\r\nthink, is way easier to understand and to implement.Suppose we have\r\nfixed the positions of , and that compose the subsequence (let these\r\npositions be , and ). How many strings contain the required subsequence\r\non these positions? Obviously, if some of these characters is already\r\nnot a question mark and does not match the expected character on that\r\nposition, the number of strings containing the subsequence on that\r\nposition is . Otherwise, since we have fixed three characters, all\r\nquestion marks on other positions can be anything we want so the number\r\nof such strings is , where is the number of question marks on positions\r\nother than , and . It allows us to write an solution by iterating on ,\r\nand , and for every such triple, calculating the number of strings\r\ncontaining the required subsequence on those positions.But that\u00e2\u0080\u0099s too\r\nslow. Let\u00e2\u0080\u0099s notice that, for every such subsequence, the number of\r\nstrings containing it is , where is the number of positions from that\r\ncontain a question mark. So, for each integer from to , let\u00e2\u0080\u0099s calculate\r\nthe number of subsequences matching that contain exactly question marks\r\nand that will allow us to solve the problem faster.How can we calculate\r\nthe required number of subsequences for every ? In my opinion, the\r\nsimplest way is dynamic programming: let be the number of subsequences\r\nof that end up in position , match first characters of and contain\r\nquestion marks. The transitions in this dynamic programming are\r\nquadratic (since we have to iterate on the next/previous position from\r\nthe subsequence), but can be sped up to linear if we rewrite as the\r\nnumber of subsequences of that end up in position , match first\r\ncharacters of and contain question marks. Each transition is either to\r\ntake the current character or to skip it, so they can be modeled in ,\r\nand overall this dynamic programming solution works in .\r\n"
}