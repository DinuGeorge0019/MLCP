{
    "link": "https://codeforces.com//contest/1462/problem/A",
    "problemId": "833569",
    "problem_idx": "A",
    "shortId": "1462A",
    "contest_number": "1462",
    "problem_submissions": {
        "F": [
            101312311,
            101295944,
            101308624,
            101308817,
            101304111,
            101280435,
            101305797,
            101310367,
            101305342,
            101311228,
            101404636,
            101403975,
            101311880,
            101300846,
            101321777,
            101323660,
            101322804,
            101312196,
            101317325,
            101337936,
            101324335,
            101318324
        ],
        "E2": [
            101285396,
            101295162,
            101287717,
            101294090,
            101294721,
            101302415,
            101297486,
            101291336,
            101285191,
            101301715,
            101403947,
            101297838,
            101320202,
            101301546,
            101293087,
            101297518,
            101302712,
            101306390,
            101284328,
            101307237,
            101300711
        ],
        "E1": [
            101282369,
            101288225,
            101284658,
            101287780,
            101297537,
            101304897,
            101298622,
            101296342,
            101290668,
            101295792,
            101403926,
            101300370,
            101291439,
            101292410,
            101297049,
            101300114,
            101296216,
            101298222,
            101280004,
            101327539,
            101299484,
            101303183
        ],
        "D": [
            101276901,
            101274657,
            101273346,
            101282814,
            101282205,
            101287581,
            101290967,
            101279699,
            101299600,
            101289409,
            101403847,
            101286604,
            101293181,
            101285967,
            101285140,
            101285937,
            101287608,
            101292000,
            101304911,
            101416082,
            101283715,
            101288370
        ],
        "C": [
            101268521,
            101264616,
            101269281,
            101273876,
            101272004,
            101269250,
            101272117,
            101267115,
            101271243,
            101273829,
            101403759,
            101275279,
            101269069,
            101275015,
            101277128,
            101275423,
            101281795,
            101279889,
            101270679,
            101277574,
            101275915
        ],
        "B": [
            101264269,
            101265842,
            101265325,
            101264865,
            101264553,
            101265746,
            101267507,
            101270770,
            101264118,
            101266219,
            101403739,
            101270231,
            101266677,
            101264816,
            101274093,
            101269885,
            101269868,
            101266304,
            101266579,
            101415580,
            101272178,
            101266529
        ],
        "A": [
            101259376,
            101261449,
            101259287,
            101259205,
            101260758,
            101260150,
            101263911,
            101273333,
            101279124,
            101260299,
            101403717,
            101261323,
            101259580,
            101259586,
            101264162,
            101263539,
            101264411,
            101259503,
            101259664,
            101259533,
            101260523
        ]
    },
    "name": "A. Favorite Sequence",
    "statement": "Polycarp has a favorite sequence a[1\r\ndots n] consisting of n integers. He wrote it out on the whiteboard as\r\nfollows: he wrote the number a_1 to the left side (at the beginning of\r\nthe whiteboard); he wrote the number a_2 to the right side (at the end\r\nof the whiteboard); then as far to the left as possible (but to the\r\nright from a_1), he wrote the number a_3; then as far to the right as\r\npossible (but to the left from a_2), he wrote the number a_4; Polycarp\r\ncontinued to act as well, until he wrote out the entire sequence on the\r\nwhiteboard. For example, if n=7 and a=[3, 1, 4, 1, 5, 9, 2], then\r\nPolycarp will write a sequence on the whiteboard [3, 4, 5, 2, 9, 1,\r\n1].You saw the sequence written on the whiteboard and now you want to\r\nrestore Polycarp’s favorite sequence.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define pb push_back\n#define ll long long\n#define mp make_pair\n#define si short int\n#define speed ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)\n#define pill pair<ll,ll>\n#define f first\n#define s second\n#define pilc pair<ll,char>\n#define all(a) (a).begin(),(a).end()\n#define rep(s,e,step) for(int i = (s); i < (e) ; i += step)\n#define vrep(s,e,step) for(int j = (s); j < (e) ; j += step)\n#define ex exit(0) \n#define sz(a) (a).size()\n#define triple pair<pill, ll>\n#define pinode pair<node*, node*>\n#define quadra pair<pill, pill>\n#define ld long double\nusing namespace std;\n \nconst ll N = 2e5 + 10;\nconst ll M = 2e5 + 1;\nconst ll big = 1e18;\nconst ll hsh2 = 1964325029 ;\nconst long long mod = 1e9 + 7;\nconst long double EPS = 1e-14;\nconst ll block = 1e7;\nconst ll shift = 2e3;\nmt19937_64 rofl(chrono::steady_clock::now().time_since_epoch().count());\n\nll t;\n\nvoid solve() {\n\tll n;\n\tcin >> n;\n\tdeque<ll> z;\n\tfor(int i = 1, b; i <= n; i++)\n\t\tcin >> b, z.pb(b);\n\tfor(int j = 1; j <= n; j++) {\n\t\tif(j % 2)\n\t\t\tcout << z.front() << \" \", z.pop_front();\n\t\telse\n\t\t\tcout << z.back() << \" \", z.pop_back();\n\t}\n\tcout << '\\n';\n}\n\nint main() {\n\tspeed;\n\tcin >> t;\n\twhile(t--)solve(); \t\n}              \n/*\nqiwwqdesw\n1\nd\n \n*/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "two pointers"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Favorite Sequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/85594",
    "editorial": "In this problem, you can implement an algorithm opposite to that given\r\nin the condition. Letâs maintain two pointers to the left-most and\r\nright-most unhandled element. Then, restoring the original array, you:\r\nput the left-most unhandled item in the first position put the\r\nright-most unhandled item in the second position put the left-most\r\nunhandled item in the third position put the right-most unhandled item\r\nin the fourth position ... That is, in general, you put the leftmost\r\nelements on all odd positions, and the rightmost ones on all even\r\npositions. After processing each element, you either move the left\r\npointer forward by one, or the right one backward by one.\r\n",
    "hint": []
}