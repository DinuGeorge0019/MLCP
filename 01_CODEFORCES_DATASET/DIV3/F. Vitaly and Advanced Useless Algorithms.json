{
    "link": "https://codeforces.com//contest/1650/problem/F",
    "problemId": "1321165",
    "problem_idx": "F",
    "shortId": "1650F",
    "contest_number": "1650",
    "problem_submissions": {
        "F": [
            148879513,
            148986538,
            148986467,
            148954476,
            148898287,
            148901435,
            148899333,
            148905510,
            148917052,
            148904349,
            148961796
        ],
        "E": [
            148849636,
            148864683,
            148963130,
            148875756,
            148872079,
            148878903,
            148875510,
            148901218,
            148892416,
            148888540,
            148898231,
            148888980,
            148883282,
            148898577,
            148883163,
            148907542,
            148907274,
            148906672,
            148906320,
            148893084,
            148887495,
            148892756,
            148872442,
            148863112
        ],
        "D": [
            148826882,
            148840222,
            148845807,
            148854912,
            148854752,
            148856728,
            148840985,
            148865410,
            148852435,
            148848691,
            148844798,
            148864773,
            148844781,
            148864322,
            148875613,
            148870696,
            148859219,
            148920116,
            148876044,
            148839258,
            148838584
        ],
        "C": [
            148820093,
            148831170,
            148831813,
            148836720,
            148830087,
            148836086,
            148827090,
            148852471,
            148837137,
            148831426,
            148825553,
            148845906,
            148830527,
            148848884,
            148845635,
            148848540,
            148844404,
            148859460,
            148825220,
            148833443
        ],
        "B": [
            148812353,
            148815870,
            148817423,
            148824929,
            148816344,
            148818724,
            148809035,
            148821547,
            148823462,
            148821683,
            148815397,
            148837950,
            148818597,
            148837067,
            163337223,
            148830901,
            148832514,
            148848552,
            148825246,
            148813545,
            148824771
        ],
        "A": [
            148807991,
            148808027,
            148809803,
            148809976,
            148810949,
            148808067,
            148809583,
            148816565,
            148811698,
            148808085,
            148807871,
            148819883,
            148808075,
            148829522,
            148809900,
            148814537,
            148809886,
            148812702,
            148807945,
            148820895
        ],
        "G": [
            148891310,
            148885828,
            148904919,
            148896469,
            148883806,
            148899609,
            148903599,
            148896840,
            148894409,
            148919593,
            148886999,
            148901688,
            148905478
        ]
    },
    "name": "F. Vitaly and Advanced Useless Algorithms",
    "statement": "Vitaly enrolled in the course Advanced Useless Algorithms. The course\r\nconsists of n tasks. Vitaly calculated that he has a_i hours to do the\r\ntask i from the day he enrolled in the course. That is, the deadline\r\nbefore the i-th task is a_i hours. The array a is sorted in ascending\r\norder, in other words, the job numbers correspond to the order in which\r\nthe assignments are turned in.Vitaly does everything conscientiously, so\r\nhe wants to complete task by 100 percent, . Initially, his completion\r\nrate for each task is 0 percent.Vitaly has m training options, each\r\noption can be used once. The ith option is characterized by three\r\nintegers: e_i, t_i and p_i. If Vitaly uses the ith option, then after\r\nt_i hours (from the current moment) he will increase the progress of the\r\ntask e_i by p_i percent. For example, let Vitaly have 3 of tasks to\r\ncomplete. Let the array a have the form: a = [5, 7, 8]. Suppose Vitaly\r\nhas 5 of options: [e_1=1, t_1=1, p_1=30], [e_2=2, t_2=3, p_2=50],\r\n[e_3=2, t_3=3, p_3=100], [e_4=1, t_4=1, p_4=80], [e_5=3, t_5=3,\r\np_5=100]. Then, if Vitaly prepares in the following way, he will be able\r\nto complete everything in time: Vitaly chooses the 4-th option. Then in\r\n1 hour, he will complete the 1-st task at 80 percent. He still has 4\r\nhours left before the deadline for the 1-st task. Vitaly chooses the\r\n3-rd option. Then in 3 hours, he will complete the 2-nd task in its\r\nentirety. He has another 1 hour left before the deadline for the 1-st\r\ntask and 4 hours left before the deadline for the 3-rd task. Vitaly\r\nchooses the 1-st option. Then after 1 hour, he will complete the 1-st\r\ntask for 110 percent, which means that he will complete the 1-st task\r\njust in time for the deadline. Vitaly chooses the 5-th option. He will\r\ncomplete the 3-rd task for 2 hours, and after another 1 hour, Vitaly\r\nwill complete the 3-rd task in its entirety. Thus, Vitaly has managed to\r\ncomplete the course completely and on time, using the 4 options.Help\r\nVitaly print the options for Vitaly to complete the tasks in the correct\r\norder. Please note: each option can be used once. If there are several\r\npossible answers, it is allowed to output any of them.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> pi;\nint n,m;\nll arr[100005];\nll cost[100005];\nstruct task{\n\tll t,p,id;\n};\nvector<task>V[100005];\nvector<int>ans[100005];\nconst ll INF = INT64_MAX/1000000;\nll dp[100005][205];\nint pre[100005][205];\n\nll f(int cur){\n\tfor(int i=0; i<V[cur].size(); i++){\n\t\tfor(int j=0; j<=200; j++) dp[i][j] = INF;\n\t\tfor(int j=0; j<=200; j++) pre[i][j] = 0;\n\t}\n\tdp[0][0] = 0;\n\tfor(int i=1; i<V[cur].size(); i++){\n\t\tll t = V[cur][i].t;\n\t\tll p = V[cur][i].p;\n\t\tfor(int j=200; j>=p; j--){\n\t\t\tdp[i][j] = dp[i-1][j]; \n\t\t\tpre[i][j] = j;\n\t\t\tif(dp[i-1][j-p]+t<dp[i][j]){\n\t\t\t\tdp[i][j] = dp[i-1][j-p]+t;\n\t\t\t\tpre[i][j] = j-p;\n\t\t\t}\n\t\t}\n\t\tfor(int j=p-1; j>=0; j--){\n\t\t\tdp[i][j] = dp[i-1][j];\n\t\t\tpre[i][j] = j;\n\t\t}\n\t}\n\tint p = 200;\n\tfor(int i=200; i>=100; i--){\n\t\tif(dp[V[cur].size()-1][p]>dp[V[cur].size()-1][i]){\n\t\t\tp = i;\n\t\t}\n\t}\n\tll ret = dp[V[cur].size()-1][p];\n\tfor(int i=V[cur].size()-1; i>=1; i--){\n\t\tif(pre[i][p]==p) continue;\n\t\tans[cur].emplace_back(V[cur][i].id);\n\t\tp = pre[i][p];\n\t}\n\treturn ret;\n}\nvoid solve(){\n\tcin>>n>>m;\n\tfor(int i=1; i<=n; i++){\n\t\tV[i].clear(); ans[i].clear();\n\t\tV[i].emplace_back((task){0,0,0});\n\t}\n\tfor(int i=1; i<=n; i++) cin>>arr[i];\n\tfor(int i=1; i<=m; i++){\n\t\tint e,t,p; cin>>e>>t>>p;\n\t\tV[e].emplace_back((task){t,p,i});\n\t}\n\tfor(int i=1; i<=n; i++) cost[i] = f(i);\n\tfor(int i=1; i<=n; i++) cost[i]+=cost[i-1];\n\tfor(int i=1; i<=n; i++){\n\t\tif(cost[i]>arr[i]){\n\t\t\tcout<<-1<<'\\n';\n\t\t\treturn;\n\t\t}\n\t}\n\tint tot = 0;\n\tfor(int i=1; i<=n; i++) tot+=ans[i].size();\n\tcout<<tot<<'\\n';\n\tfor(int i=1; i<=n; i++){\n\t\tfor(int x : ans[i]) cout<<x<<\" \";\n\t}\n\tcout<<'\\n';\n}\nint main(){\n\tios_base::sync_with_stdio(false); cin.tie(NULL);\n\tint t = 1;\n\tcin >> t;\n\twhile(t--) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "implementation"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Vitaly and Advanced Useless Algorithms.json",
    "editorial_link": "https://codeforces.com//blog/entry/100712",
    "editorial": "Note that it is always advantageous for us to complete the task that has\r\nan earlier deadline first. Only then will we proceed to the next task.\r\nThen we can solve each problem independently for each exam. Then it\r\nremains to score percent on the task on the available options. This is a\r\ntypical knapsack problem with an answer recovery.\r\n",
    "hint": []
}