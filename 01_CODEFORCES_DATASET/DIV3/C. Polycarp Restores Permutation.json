{
    "link": "https://codeforces.com//contest/1141/problem/C",
    "problemId": "316173",
    "problem_idx": "C",
    "shortId": "1141C",
    "contest_number": "1141",
    "problem_submissions": {
        "G": [
            52739588,
            51536187,
            51534299,
            51525036,
            55748640,
            98770872,
            51606575,
            51605903,
            51550288,
            51562985
        ],
        "E": [
            51521056,
            51509494,
            51514700,
            51509864,
            51515343,
            51512067,
            51514136,
            51516742,
            51515279,
            51513645,
            51514418,
            51515657,
            51529830,
            51518938,
            51520757,
            51514193,
            51518496,
            51519253
        ],
        "F2": [
            51512804,
            51520813,
            51519468,
            51520462,
            51524714,
            51522819,
            51524615,
            51526867,
            51526388,
            51528287,
            51528610,
            51526942,
            51526833,
            51528921,
            51567579,
            51529733,
            51520266,
            51530585,
            51528159
        ],
        "F1": [
            51512586,
            51519520,
            51520037,
            51530962,
            51520861,
            51524235,
            51522340,
            51524194,
            51526191,
            51525945,
            51527775,
            51528063,
            51527052,
            51527343,
            51520158,
            51528384,
            51528375,
            51520780,
            51530653,
            51527810
        ],
        "D": [
            51504077,
            51500288,
            51507602,
            51497021,
            51498993,
            51505660,
            51501736,
            51504542,
            51504450,
            51505517,
            51507648,
            51506380,
            51507813,
            51509739,
            51507965,
            51506483,
            51503583,
            51507577,
            51514228
        ],
        "C": [
            51496498,
            51493212,
            51499078,
            51492880,
            51502608,
            51499584,
            51495627,
            51495976,
            51499494,
            51500075,
            51499041,
            51503297,
            51499022,
            51497246,
            51497075,
            51529270,
            51499224,
            51506668
        ],
        "B": [
            51489707,
            51490678,
            51493680,
            51489601,
            51492373,
            51494463,
            51492484,
            51490578,
            51491799,
            51494772,
            51492508,
            51496543,
            51490227,
            51491876,
            51492884,
            51490276,
            51493813,
            51493209
        ],
        "A": [
            51488460,
            51488637,
            51489458,
            51488560,
            51490651,
            51489465,
            51489640,
            51488837,
            51490105,
            51489577,
            51489271,
            51494436,
            51488528,
            51488619,
            51489959,
            51488566,
            51490539
        ]
    },
    "name": "C. Polycarp Restores Permutation",
    "statement": "An array of integers p_1, p_2,\r\ndots, p_n is called a if it contains each number from 1 to n exactly\r\nonce. For example, the following arrays are permutations: [3, 1, 2],\r\n[1], [1, 2, 3, 4, 5] and [4, 3, 1, 2]. The following arrays are\r\npermutations: [2], [1, 1], [2, 3, 4].Polycarp invented a really cool\r\npermutation p_1, p_2,\r\ndots, p_n of length n. It is very disappointing, but he forgot this\r\npermutation. He only remembers the array q_1, q_2,\r\ndots, q_{n-1} of length n-1, where q_i=p_{i+1}-p_i.Given n and q=q_1,\r\nq_2,\r\ndots, q_{n-1}, help Polycarp restore the invented permutation.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define ll long long\n#define pb push_back\n\nusing namespace std;\n\nll n, a[200100], b[200100], used[200100];\n\nint main()\n{\n    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n    cin >> n;\n    for(int i = 1; i < n; ++i){\n        cin >> a[i];\n    }\n\n    b[0] = 1;\n    ll mn = 200100;\n    for(int i = 1; i < n; ++i){\n        b[i] = b[i-1] + a[i];\n        mn = min(mn, b[i]);\n    }\n\n    if(mn <= 0){\n        for(int i = 0; i < n; ++i){\n            b[i] += abs(mn) + 1;\n        }\n    }\n    for(int i = 0; i < n; ++i){\n        if(b[i] <= n && used[b[i]] == 0){\n                used[b[i]] = 1;\n            }\n            else{\n                cout << -1;\n                return 0;\n            }\n    }\n    for(int i = 0; i < n; ++i){\n        cout << b[i] << ' ';\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Polycarp Restores Permutation.json",
    "editorial_link": "https://codeforces.com//blog/entry/66062",
    "editorial": "Let\u00e2\u0080\u0099s . Thus, =, =, ..., =.It means that the sequence of partial sums is\r\nthe required permutation if we do to each element. The value of is\r\nunknown yet.Find such that is minimum. Thus, . Exactly this value will\r\nchange to be after you add . So, add to each element of and check that\r\nnow it is a permutation.Probably, you need to use to avoid possible\r\ninteger overflows.\r\n"
}