{
    "link": "https://codeforces.com//contest/988/problem/D",
    "problemId": "186729",
    "problem_idx": "D",
    "shortId": "988D",
    "contest_number": "988",
    "problem_submissions": {
        "F": [
            38850795,
            38857750,
            38858170,
            38851497,
            38853401,
            38851133,
            38851544,
            38859838,
            38848093,
            38907880,
            38907831
        ],
        "E": [
            38844731,
            38844693,
            38848592,
            38858719,
            45955063,
            38853668,
            38847637,
            38853437,
            38839299,
            38861890,
            38864917,
            38858969,
            38857001,
            38858857,
            38858182,
            38859392,
            38864208,
            38855992,
            38859515
        ],
        "D": [
            38840392,
            38848969,
            38851772,
            38843233,
            38946024,
            38842418,
            38844498,
            38868323,
            38844694,
            44031526,
            44031416,
            38848128,
            38864951,
            38847308,
            38850578,
            38849097,
            38853027,
            38857525,
            38900563,
            38852549,
            38852551,
            38854050
        ],
        "C": [
            38837549,
            38839564,
            38842456,
            38840172,
            38945961,
            38836792,
            38841053,
            38844962,
            38841756,
            38846652,
            38845827,
            38864928,
            38839933,
            38843822,
            38844819,
            38846434,
            38850120,
            38847359,
            38847106,
            38847820,
            38842193
        ],
        "B": [
            38835102,
            38835826,
            38836723,
            38836527,
            38945931,
            38930097,
            38834357,
            38837106,
            38835693,
            38837985,
            38835772,
            38840393,
            38864939,
            38841754,
            38836363,
            38841437,
            38840823,
            38838916,
            38847752,
            38851402,
            38836768
        ],
        "A": [
            38833122,
            38833181,
            38833533,
            38833575,
            38945641,
            38945626,
            38929615,
            38833067,
            38833623,
            38833881,
            38833289,
            38833348,
            38834787,
            38833528,
            38833829,
            38833852,
            38833420,
            38836476,
            38849551,
            38833125,
            38833682
        ]
    },
    "name": "D. Points and Powers of Two",
    "statement": "There are n distinct points on a coordinate line, the coordinate of i-th\r\npoint equals to x_i. Choose a subset of the given set of points such\r\nthat the distance between each pair of points in a subset is an integral\r\npower of two. It is necessary to consider each pair of points, not only\r\nadjacent. Note that any subset containing one element satisfies the\r\ncondition above. Among all these subsets, choose a subset with maximum\r\npossible size.In other words, you have to choose the maximum possible\r\nnumber of points x_{i_1}, x_{i_2},\r\ndots, x_{i_m} such that for each pair x_{i_j}, x_{i_k} it is true that\r\n|x_{i_j} - x_{i_k}| = 2^d where d is some non-negative integer number\r\n(not necessarily the same for each pair of points).\r\n",
    "solutions": [
        "/// In The Name Of God\n\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n\n#include <bits/stdc++.h>\n\n#define f first\n#define s second\n\n#define pb push_back\n#define pp pop_back\n#define mp make_pair\n\n#define sz(x) (int)x.size()\n#define sqr(x) ((x) * 1ll * (x))\n#define all(x) x.begin(), x.end()\n\n#define rep(i, l, r) for (int i = (l); i <= (r); i++)\n#define per(i, l, r) for (int i = (l); i >= (r); i--)\n\n#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n#define nl '\\n'\n#define ioi exit(0);\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\nconst int N = (int)5e5 + 7;\nconst int inf = (int)1e9 + 7;\nconst int mod = (int)1e9 + 7;\nconst ll linf = (ll)1e18 + 7;\n\nconst int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1};\nconst int dy[] = {0, 1, 0, -1, 1, -1, 1, -1};\n\nusing namespace std;\n\nint n;\nll a[N];\nint main() {\n\t#ifdef IOI2018\n\t\tfreopen (\"in.txt\", \"r\", stdin);\n\t#endif\n\tKazakhstan\n\tcin >> n;\n\tset <ll> st;\n\trep(i, 1, n) {\n\t\tint x;\n\t\tcin >> x;\n\t\tst.insert(x);\n\t}\n\tn = 0;\n\tfor (auto it : st) a[++n] = it;\n\trep(i, 1, n) {\n\t\tll x = 1;\n\t\trep(d, 0, 30) {\n\t\t\tif (st.count(a[i] + x) && st.count(a[i] + x + x)) cout << 3 << nl << a[i] << ' ' << a[i] + x << ' ' << a[i] + x + x, ioi\n\t\t\tx *= 2;\n\t\t}\n\t}\n\trep(i, 1, n) {\n\t\tll x = 1;\n\t\trep(d, 0, 30) {\n\t\t\tif (st.count(a[i] + x)) cout << 2 << nl << a[i] << ' ' << a[i] + x, ioi\n\t\t\tx *= 2;\n\t\t}\n\t}\n\tcout << 1 << nl << a[1];\n\tioi\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Points and Powers of Two.json",
    "editorial_link": "https://codeforces.com/blog/entry/59810",
    "editorial": "Firstly, letâs prove that the size of the answer is not greater than .\r\nSuppose that the answer equals to . Let be coordinates of the points in\r\nthe answer (and ). Let and . Then (because of the condition). It means\r\nthat . Conditions must hold for a triple too. Now it is easy to see that\r\nif then that is not a power of two. So the size of the answer is not\r\ngreater than .Firstly, letâs check if the answer is . Iterate over all\r\nmiddle elements of the answer and over all powers of two from to\r\ninclusively. Let be the middle element of the answer and the current\r\npower of two. Then if there are elements and in the array then the\r\nanswer is . Now check if the answer is . Do the same as in the previous\r\nsolution, but now we have left point and right point .If we did not find\r\nanswer of lengths or then print any element of the array.The solution\r\nabove have time complexity (because of we can check if the element is in\r\nthe array with some data structure in ).\r\n",
    "hint": []
}