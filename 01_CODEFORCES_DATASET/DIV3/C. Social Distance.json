{
    "link": "https://codeforces.com//contest/1367/problem/C",
    "problemId": "650995",
    "problem_idx": "C",
    "shortId": "1367C",
    "contest_number": "1367",
    "problem_submissions": {
        "F2": [
            84046399,
            84094199,
            84130636
        ],
        "F1": [
            83980407,
            83997753,
            83993348,
            83994650,
            83999567,
            84010715,
            83998236,
            84003996,
            84009140,
            84019849,
            84274779,
            84017193,
            84019354,
            84000999,
            84010593,
            84016471,
            84014906,
            84016930,
            84014876,
            84014935,
            84017986
        ],
        "D": [
            83971043,
            83961145,
            83985812,
            83980115,
            83973000,
            83974852,
            83986130,
            83981366,
            83974367,
            83994623,
            83977600,
            83983323,
            83996104,
            83995930,
            83983801,
            83992346,
            83994322,
            83998169,
            84019878,
            83994750
        ],
        "E": [
            83960157,
            83975668,
            83972713,
            83967919,
            83987024,
            83979496,
            83979914,
            83997028,
            83998395,
            83978103,
            83986303,
            83992757,
            84009544,
            83998141,
            84003322,
            84000422,
            84009434,
            84005956,
            84009927
        ],
        "C": [
            83944345,
            83953190,
            83946330,
            83950349,
            83947422,
            83950879,
            83948329,
            83963053,
            83957928,
            83954873,
            83961995,
            83964648,
            83957400,
            83955873,
            83978101,
            83977835,
            83962124,
            83950317,
            83977481
        ],
        "B": [
            83935714,
            83939461,
            83936897,
            83955137,
            83937279,
            83939068,
            83931855,
            83950510,
            83942524,
            83939871,
            83953252,
            83938559,
            83937149,
            83961120,
            83949153,
            83945426,
            83942777,
            83939545,
            83950410
        ],
        "A": [
            83931489,
            83931768,
            83931529,
            83932839,
            83931493,
            83933565,
            83935945,
            83942834,
            83934889,
            83933081,
            83935891,
            83931997,
            83932187,
            83932611,
            83934727,
            83936848,
            83932660,
            83932129,
            83932693
        ]
    },
    "name": "C. Social Distance",
    "statement": "Polycarp and his friends want to visit a new restaurant. The restaurant\r\nhas n tables arranged along a straight line. People are already sitting\r\nat some tables. The tables are numbered from 1 to n in the order from\r\nleft to right. The state of the restaurant is described by a string of\r\nlength n which contains characters \"\" (the table is occupied) and \"\"\r\n(the table is empty).Restaurant rules prohibit people to sit at a\r\ndistance of k or less from each other. That is, if a person sits at the\r\ntable number i, then all tables with numbers from i-k to i+k (except for\r\nthe i-th) should be free. In other words, the absolute difference of the\r\nnumbers of any two occupied tables must be strictly greater than k.For\r\nexample, if n=8 and k=2, then: strings \"\", \"\", \"\", \"\" satisfy the rules\r\nof the restaurant; strings \"\", \"\", \"\" do not satisfy to the rules of the\r\nrestaurant, since each of them has a pair of \"\" with a distance less\r\nthan or equal to k=2. In particular, if the state of the restaurant is\r\ndescribed by a string without \"\" or a string with one \"\", then the\r\nrequirement of the restaurant is satisfied.You are given a binary string\r\ns that describes the current state of the restaurant. It is guaranteed\r\nthat the rules of the restaurant are satisfied for the string s.Find the\r\nmaximum number of free tables that you can occupy so as not to violate\r\nthe rules of the restaurant. Formally, what is the maximum number of \"\"\r\nthat can be replaced by \"\" such that the requirement will still be\r\nsatisfied?For example, if n=6, k=1, s= \"\", then the answer to the\r\nproblem will be 1, since only the table at position 3 can be occupied\r\nsuch that the rules are still satisfied.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> \nusing namespace std;\n#define fl(i,a,b) for(int i=a;i<b;i++)\n#define ff first\n#define ss second\n#define endl '\\n'\n#define pb push_back\n#define khushi ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);\ntypedef long long ll;\nconst int  mod  = 1000000007;\n#define int long long\nconst int mx = 200005;\nvoid f()\n{\n\tint n,k;\n\tcin >> n >> k;\n\tstring s;\n\tcin >> s; \n\tint nxt[n + 1];\n\tnxt[n] = 1e9;\n\tfor(int i = s.size() - 1; i >=0 ; i--)\n\t{\n\t\tif(s[i] == '1')\n\t\t{\n\t\t\tnxt[i] = i;\n\t\t}\n\t\telse nxt[i] = nxt[i + 1];\n\t}\n\tint pre = -1e9;\n\tint ans = 0;\n\tfl(i,0,n)\n\t{\n\t\tif(s[i] == '1')\n\t\t{\n\t\t\tpre = i;\n\t\t}\n\t\tif(pre < i - k && nxt[i] > i + k)\n\t\t{\n\t\t\tans++;\n\t\t\tpre = i;\n\t\t}\n\t}\n\tcout << ans << endl;\n}\nmain()\n{\n\tkhushi;\n\tint t = 1;\n\tcin >> t;\n\twhile(t--)\n\t{\n\t\tf();\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Social Distance.json",
    "editorial_link": "https://codeforces.com//blog/entry/78864",
    "editorial": "Letâs split a given string into blocks of consecutive zeros. Then in\r\neach such block, you can independently put the maximum number of people\r\nwho fit in it. But there are three cases to consider. If the current\r\nblock is not the first and not the last, then there are ones at the\r\nborder and this means that the first tables of the current block and the\r\nlast are prohibited. Therefore, remove these zeroes from the string. If\r\nthe current block is the first, then the one is at the end and you need\r\nto delete the last zeros. If the current block is the last, then in the\r\nbeginning there is one and you need to delete the first zeros. Also, as\r\na separate case, you need to consider a string consisting only of zeros.\r\nThen there is exactly one block from which you do not need to remove\r\nzeros.Now all the tables in each block are free, then in each block we\r\ncan put . Sum these values over all blocks.\r\n",
    "hint": []
}