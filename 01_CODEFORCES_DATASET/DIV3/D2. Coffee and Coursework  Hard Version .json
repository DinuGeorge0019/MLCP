{
    "link": "https://codeforces.com//contest/1118/problem/D2",
    "problemId": "300359",
    "problem_idx": "D2",
    "shortId": "1118D2",
    "contest_number": "1118",
    "problem_submissions": {
        "E": [
            50187972,
            50178585,
            50177854,
            50187885,
            50190255,
            50191148,
            50185548,
            50187581,
            50187155,
            50189680,
            50192489,
            50176894,
            50191143,
            50188012,
            50189444,
            50186952,
            50192839,
            50194191,
            50192878,
            50194811,
            50194112
        ],
        "F1": [
            50184628,
            50182187,
            50182069,
            50185126,
            50186144,
            50175246,
            50268639,
            50268627,
            50268547,
            50268534,
            50268507,
            50268495,
            50268478,
            50177703,
            50177673,
            50189880,
            50187751,
            50178618,
            50180765,
            50182959,
            50195988,
            50179367,
            50193234,
            50188527,
            50175539,
            50191073,
            50183885,
            50182277
        ],
        "C": [
            50180516,
            50189313,
            50189314,
            50174569,
            50182199,
            50186326,
            50196284,
            50176517,
            50179801,
            50190327,
            50186281,
            50179237,
            50179193,
            50195343,
            50178816,
            50179289,
            50198041,
            50178779,
            50215543,
            50180475,
            50179046
        ],
        "D1": [
            50173332,
            50175414,
            50179356,
            50180631,
            50185124,
            50180428,
            50182811,
            50183080,
            50182930,
            50182441,
            50190772,
            50187897,
            50183718,
            50184678,
            50183560,
            50184764,
            50183014,
            50185852,
            50188218,
            50190752
        ],
        "D2": [
            50173254,
            50175301,
            50179259,
            50186552,
            50187970,
            50180477,
            50182733,
            50182917,
            50182838,
            50182532,
            50190661,
            50187874,
            50183954,
            50184600,
            50183758,
            50184505,
            50183208,
            50185955,
            50185683,
            50189545,
            50190850
        ],
        "B": [
            50171883,
            50174314,
            50178899,
            50169507,
            50171162,
            50173488,
            50172475,
            50172202,
            50172480,
            50172037,
            50171388,
            50171487,
            50171892,
            50174620,
            50175080,
            50173570,
            50171467,
            50173112,
            50174638,
            50174514
        ],
        "A": [
            50167992,
            50168657,
            50171109,
            50166868,
            50167018,
            50167896,
            50168002,
            50167192,
            50167986,
            50168375,
            50170469,
            50167469,
            50167941,
            50167556,
            50168146,
            50168540,
            50168781,
            50167258,
            50168367,
            50169680
        ]
    },
    "name": "D2. Coffee and Coursework  Hard Version ",
    "statement": ".Polycarp has to write a coursework. The coursework consists of m\r\npages.Polycarp also has n cups of coffee. The coffee in the i-th cup\r\nPolycarp has a_i caffeine in it. Polycarp can drink some cups of coffee\r\n(each one no more than once). He can drink cups in . Polycarp drinks\r\neach cup and (i.e. he cannot split any cup into several days).Surely,\r\ncourseworks are not being written in a single day (in a perfect world of\r\nBerland, at least).Let’s consider some day of Polycarp’s work. Consider\r\nPolycarp drinks k cups of coffee during this day and caffeine dosages of\r\ncups Polycarp drink during this day are a_{i_1}, a_{i_2},\r\ndots, a_{i_k}. Then the first cup he drinks gives him energy to write\r\na_{i_1} pages of coursework, the second cup gives him energy to write\r\nmax(0, a_{i_2} - 1) pages, the third cup gives him energy to write\r\nmax(0, a_{i_3} - 2) pages, ..., the k-th cup gives him energy to write\r\nmax(0, a_{i_k} - k + 1) pages.If Polycarp doesn’t drink coffee during\r\nsome day, he cannot write coursework at all that day.Polycarp has to\r\nfinish his coursework as soon as possible (spend the minimum number of\r\ndays to do it). Your task is to find out this number of days or say that\r\nit is impossible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#include <ext/pb_ds/assoc_container.hpp> \n#include <ext/pb_ds/tree_policy.hpp> \nusing namespace __gnu_pbds;   \n#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> \n#define ll long long int\n#define ld double\n#define ff first\n#define ss second\n#define pb push_back\n#define mp make_pair\n#define all(a) a.begin(),a.end()\n#define sz(a) (ll)(a.size())\nconst ll M=2e5+5;\nll a[M];\nint main()\n{\n\tios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n\tll n,m;\n\tcin>>n>>m;\n\tll s=0;\n\tfor(ll i=1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t\ts=s+a[i];\n\t}\n\tsort(a+1,a+1+n);\n\tif(s<m)\n\t{\n\t\tcout<<\"-1\\n\";\n\t\treturn 0;\n\t}\n\tll l=1,r=n,p=-1;\n\twhile(l<r)\n\t{\n\t\tll mid=(l+r)/2;\n\t\tif(mid==p)\n\t\t\tmid++;\n\t\tp=mid;\n\t\tll s=0;\n\t\tll curr=0;\n\t\tll x=0;\n\t\tfor(ll i=n;i>=1;i--)\n\t\t{\n\t\t\tif(curr==mid)\n\t\t\t{\n\t\t\t\tcurr=0;\n\t\t\t\tx++;\n\t\t\t}\n\t\t\ts=s+max(a[i]-x,(ll)0);\n\t\t\tcurr++;\n\t\t}\n\t\tif(s>=m)\n\t\t\tr=mid;\n\t\telse\n\t\t\tl=mid+1;\n\t}\n\tcout<<r<<\"\\n\";\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D2. Coffee and Coursework  Hard Version .json",
    "editorial_link": "https://codeforces.com/blog/entry/65396",
    "editorial": "Well, the main idea is described in the previous (D1) problem editorial.\r\nRead it firstly.So, now we have to improve our solution somehow. How can\r\nwe do it? Wait... What is it? We iterate over all numbers of days... And\r\nthe number of pages Polycarp can write when we consider days instead of\r\nis strictly increases... (because we always can drink any cup even with\r\nthe minimum value of as a first during the new day, and the number of\r\npages will increase). So, what is it? Oh, this is binary search!So all\r\nwe need is to replace linear search to binary search, submit the written\r\ncode and get AC.\r\n",
    "hint": []
}