{
    "link": "https://codeforces.com//contest/1551/problem/C",
    "problemId": "1055222",
    "problem_idx": "C",
    "shortId": "1551C",
    "contest_number": "1551",
    "problem_submissions": {
        "D2": [
            123504570,
            123491119,
            123485402,
            123508709,
            123487387,
            123490299,
            123498497,
            123519517,
            123503570,
            123507308,
            123506328,
            123496338,
            123525324,
            123509854,
            123500000,
            123499688,
            123500681,
            123520243,
            123521810,
            123560543,
            123489816
        ],
        "D1": [
            123496540,
            123479404,
            123460900,
            123501007,
            123476769,
            123477339,
            123486676,
            123509110,
            123490131,
            123493249,
            123493173,
            123482125,
            123490880,
            123500902,
            123489510,
            123491442,
            123487788,
            123505201,
            123513198,
            123560527,
            123477927
        ],
        "E": [
            123487760,
            123503517,
            123508061,
            123512161,
            123512376,
            123522062,
            123512340,
            123494473,
            123520187,
            123519199,
            123522642,
            123508385,
            123509676,
            123525566,
            123522562,
            123529567,
            123525043,
            123524224,
            123527690,
            123529206
        ],
        "F": [
            123483346,
            123518773,
            123505149,
            123522554,
            123530029,
            123525813,
            123677834
        ],
        "C": [
            123463062,
            123471764,
            123465961,
            123494616,
            123466015,
            123470689,
            123479667,
            123473982,
            123478387,
            123473235,
            123485341,
            123504214,
            123476344,
            123474463,
            123482794,
            123487070,
            123509871,
            123495332,
            123505971,
            123560511,
            123471519
        ],
        "B1": [
            123458055,
            123450157,
            123447323,
            123480992,
            123471662,
            123459271,
            123448891,
            123453516,
            123457018,
            123473105,
            123465306,
            123457521,
            123473064,
            123450150,
            123457907,
            123454507,
            123450845,
            123454392,
            123459478,
            123486711,
            123560483,
            123451550
        ],
        "B2": [
            123455203,
            123463888,
            123460727,
            123523874,
            123456743,
            123463349,
            123471479,
            123467608,
            123467523,
            123462292,
            123471295,
            123468067,
            123463785,
            123466840,
            123469959,
            123475307,
            123473651,
            123478743,
            123500344,
            123560494,
            123462370
        ],
        "A": [
            123443367,
            123443254,
            123447159,
            123446121,
            123445546,
            123443509,
            123444177,
            123443572,
            123444116,
            123444163,
            123445991,
            123474697,
            123444077,
            123443229,
            123447862,
            123443364,
            123443226,
            123449045,
            123446138,
            123560465,
            123443541
        ]
    },
    "name": "C. Interesting Story",
    "statement": "Stephen Queen wants to write a story. He is a very unusual writer, he\r\nuses only letters ”, ”, ”, ” and ”!To compose a story, Stephen wrote out\r\nn words consisting of the first 5 lowercase letters of the Latin\r\nalphabet. He wants to select the number of to make an story.Let a story\r\nbe a sequence of words that are not necessarily different. A story is\r\ncalled if there exists a letter which occurs among all words of the\r\nstory more times than all other letters together.For example, the story\r\nconsisting of three words \"\", \"\", \"\" is interesting (the letter ” occurs\r\n5 times, all other letters occur 4 times in total). But the story\r\nconsisting of two words \"\", \"\" is not (no such letter that it occurs\r\nmore than all other letters in total).You are given a sequence of n\r\nwords consisting of letters ”, ”, ”, ” and ”. Your task is to choose the\r\nmaximum number of them to make an interesting story. If there’s no way\r\nto make a non-empty story, output 0.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std ;\n\n#define ll              long long \n#define pb              push_back\n#define all(v)          v.begin(),v.end()\n#define sz(a)           (ll)a.size()\n#define F               first\n#define S               second\n#define INF             2000000000000000000\n#define popcount(x)     __builtin_popcountll(x)\n#define pll             pair<ll,ll>\n#define pii             pair<int,int>\n#define ld              long double\n\nconst int M = 1000000007;\nconst int MM = 998244353;\n\ntemplate<typename T, typename U> static inline void amin(T &x, U y){ if(y<x) x=y; }\ntemplate<typename T, typename U> static inline void amax(T &x, U y){ if(x<y) x=y; }\n\n#ifdef LOCAL\n#define debug(...) debug_out(#__VA_ARGS__, __VA_ARGS__)\n#else\n#define debug(...) 2351\n#endif\n\n\nint _runtimeTerror_()\n{\n    int n;\n    cin >> n;\n    int ans = 0;\n    vector<string> a(n);\n    vector<vector<int>> cnt(n,vector<int>(5,0));\n    for(int i=0;i<n;++i)\n    {\n        cin >> a[i];\n        for(auto &j:a[i])\n            ++cnt[i][j - 'a'];\n    }\n    for(int i=0;i<5;++i)\n    {\n        vector<ll> x;\n        for(int j=0;j<n;++j)\n            x.push_back(cnt[j][i] - (sz(a[j]) - cnt[j][i]));\n        sort(all(x),greater<ll>());\n        ll cur = 0;\n        for(int j=0;j<n;++j)\n        {\n            cur += x[j];\n            if(cur > 0)\n                amax(ans,j+1);\n        }\n    }\n    cout << ans << \"\\n\";\n    return 0;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n    #ifdef runSieve\n        sieve();\n    #endif\n    #ifdef NCR\n        initialize();\n    #endif\n    int TESTS=1;\n    cin>>TESTS;\n    while(TESTS--)\n        _runtimeTerror_();\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings",
        "strings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Interesting Story.json",
    "editorial_link": "https://codeforces.com//blog/entry/93149",
    "editorial": "Let be the number of the occurrences of the letter in the word minus the\r\nnumber of the occurrences of all other letters in total. Since for each\r\ntwo words and the number of the occurrences of a letter in the word is\r\nthe sum of the numbers of its occurrences in and , the equality is true\r\n( means the concatenation of and ).Consider a sequence of words . A\r\nstory consisting of words is interesting if and only if thereâs a letter\r\nsuch that it exactly means that thereâs a letter which occurs more times\r\nthan all other in total. So we are interested in searching for a letter\r\nsuch that exists a positive integer a maximal number of words such that\r\n.Suppose we have a set of words that form an interesting story and where\r\nis the letter having more occurrences than all other letters in total.\r\nSuppose we can add to it one of few words. We had better add a word such\r\nthat is maximal to be able to add more words in the future.So the\r\nproblem has the following solution: for each letter of the Latin\r\nalphabet and for each word letâs calculate . Then letâs iterate over all\r\nletters , take a sequence and sort it in descending order. Letâs\r\ninitialize an interesting story by a set of a single word corresponding\r\nto the first element of the sequence. If thereâs no word such that ,\r\nthen thereâs no non-empty interesting story containing some words of the\r\ngiven set. Otherwise, letâs take the next elements of the sequence\r\nsequentially until the sum of over all taken words is greater than zero.\r\nLetâs select a letter such that the corresponding taken set is maximal\r\nover all letters. Finally, we should print the setâs size.The solution\r\nconsists of two phases: the calculation of all (works in where is the\r\nalphabetâs size, is the lengths of a string ) and building a maximal\r\ninteresting story for each letter (sorting and a greedy algorithm ).\r\n",
    "hint": []
}