{
    "link": "https://codeforces.com//contest/1881/problem/E",
    "problemId": "2259906",
    "problem_idx": "E",
    "shortId": "1881E",
    "contest_number": "1881",
    "problem_submissions": {
        "G": [
            227881682,
            227890897,
            227853197,
            227853881,
            227975243,
            227899786,
            227901394,
            227911349,
            227907618,
            227893303,
            227897169,
            227918994,
            227917936,
            227914137,
            227899980,
            227912585,
            227907908,
            227897166,
            227915427,
            230763040,
            227916848,
            227913341,
            227920356,
            227867452,
            228095818,
            227915038
        ],
        "F": [
            227862562,
            227861356,
            227870757,
            227856965,
            227974789,
            227875295,
            227869909,
            227878015,
            227879864,
            227885516,
            227883744,
            227872766,
            227871133,
            227860506,
            227889327,
            230763024,
            227881722,
            227900442,
            227886326,
            227835034,
            228095806,
            227892673
        ],
        "E": [
            227850824,
            227843540,
            227942027,
            227858077,
            227874342,
            227854004,
            227852561,
            227851500,
            227864039,
            227865490,
            227859415,
            227863643,
            227846602,
            227918283,
            227845118,
            227881868,
            230762984,
            227865398,
            227875008,
            227858082,
            227872189,
            228095799,
            227883249
        ],
        "D": [
            227844854,
            227839094,
            227848716,
            227843412,
            227838899,
            227847809,
            227840878,
            227858992,
            227854380,
            227853013,
            227858090,
            227884786,
            227839966,
            227871576,
            230762965,
            227859752,
            227867911,
            227861846,
            227874828,
            228095791,
            227866894
        ],
        "C": [
            227838508,
            227835537,
            227842531,
            227866399,
            228637953,
            227849689,
            227840361,
            227848329,
            227855215,
            227848107,
            227840529,
            227850980,
            227881582,
            227837426,
            227868576,
            230762944,
            227849495,
            227862177,
            227853530,
            227898622,
            228095784,
            227862705
        ],
        "B": [
            227831568,
            227831942,
            227835393,
            227838918,
            227835692,
            227835105,
            227836643,
            227839535,
            227838170,
            227834145,
            227842440,
            227842178,
            227832528,
            227844145,
            230762918,
            227842892,
            227850062,
            227840218,
            227885672,
            228095774,
            227845241
        ],
        "A": [
            227829772,
            227829881,
            227830670,
            227836999,
            227830954,
            227830777,
            227830578,
            227833236,
            227838249,
            227829831,
            227837181,
            227833271,
            227908499,
            227830499,
            230762881,
            227836954,
            227841775,
            227831030,
            227889886,
            228095766,
            227839571
        ]
    },
    "name": "E. Block Sequence",
    "statement": "Given a sequence of integers a of length n.A sequence is called if it\r\nhas the form of a series of blocks, each starting with its length, i.e.,\r\nfirst comes the length of the block, and then its elements. For example,\r\nthe sequences [\r\ncolor{red}{3},\r\ncolor{red}{3},\r\ncolor{red}{4},\r\ncolor{red}{5},\r\ncolor{green}{2},\r\ncolor{green}{6},\r\ncolor{green}{1}] and [\r\ncolor{red}{1},\r\ncolor{red}{8},\r\ncolor{green}{4},\r\ncolor{green}{5},\r\ncolor{green}{2},\r\ncolor{green}{6},\r\ncolor{green}{1}] are (different blocks are colored differently), while\r\n[1], [1,\r\n4,\r\n3], [3,\r\n2,\r\n1] are not.In one operation, you can remove any element from the\r\nsequence. What is the minimum number of operations required to make the\r\ngiven sequence ?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n \nusing namespace std;\n#define ll long long\n#define rep(i,m,n) for (ll i=m;i<=n;i++)\n#define reb(i,m,n) for (ll i=m;i>=n;i--)\n#define rv(i,vt) for (auto i:vt)\n#define pb push_back\n#define ii pair<ll,ll>\n#define F first\n#define S second\n#define sz(v) (int)v.size()\n#define iii tuple<ll,ll,ll>\n#define dd pair<double,double>\nconst ll N=1e6+5,mod=1e9+7;\nll n,a[N];\nll d[N],dp[N];\nll cnt;\nvoid prep(){\n\n}\nvoid solve()\n{\n    cin>>n;\n    rep(i,1,n) cin>>a[i];\n    rep(i,1,n+1) dp[i]=n+1;\n    dp[0]=0;\n    rep(i,0,n-1){\n        dp[i+1]=min(dp[i+1],dp[i]+1);\n        if (a[i+1]+i+1<=n) dp[a[i+1]+i+1]=min(dp[a[i+1]+i+1],dp[i]);\n    }\n    cout<<dp[n];\n}\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    ll tests=1;\n    cin>>tests;\n    prep();\n    while (tests--){\n        solve();\n        cout<<endl;\n}\n    cerr << \"\\n\" << (double)clock() / CLOCKS_PER_SEC * 1000 << \" ms\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Block Sequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/121327",
    "editorial": "Letâs use the dynamic programming approach: let be the number of\r\noperations required to make the segment from to beautiful. There are two\r\npossible ways to achieve this: Remove the element at position and make\r\nthe segment from to beautiful, then ; Make the segment from to\r\nbeautiful, then (cases where need to be handled separately).\r\n",
    "hint": []
}