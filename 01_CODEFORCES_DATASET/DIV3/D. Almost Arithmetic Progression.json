{
    "link": "https://codeforces.com//contest/978/problem/D",
    "problemId": "182879",
    "problem_idx": "D",
    "shortId": "978D",
    "contest_number": "978",
    "problem_submissions": {
        "G": [
            38172491,
            38169204,
            38172434,
            38174884,
            38174212,
            38202570,
            38174356,
            38174504,
            38170439,
            38179076,
            38174120,
            38175016,
            38177179,
            38173974,
            38173883,
            38177077,
            38179217,
            38177915,
            38175210
        ],
        "F": [
            38167756,
            38167382,
            38169838,
            38171846,
            38171022,
            38202583,
            38171851,
            38172094,
            38166947,
            38172200,
            38170297,
            38172407,
            38173744,
            38170844,
            38171837,
            38173600,
            38173445,
            38173729,
            38171096,
            38172672
        ],
        "E": [
            38166000,
            38165982,
            38167458,
            38167818,
            38167975,
            38202586,
            38169135,
            38168502,
            38165451,
            38168025,
            38168912,
            38170344,
            38169652,
            38168636,
            38170345,
            38170564,
            38171323,
            38171232,
            38166984
        ],
        "D": [
            38164294,
            38164281,
            38166043,
            38165411,
            38166520,
            38202587,
            38166943,
            38167185,
            38174671,
            38184115,
            38165897,
            38167133,
            38167961,
            38167926,
            38167171,
            38168834,
            38168604,
            38168704,
            38168070,
            38165126
        ],
        "C": [
            38162269,
            38159839,
            38162952,
            38162443,
            38163682,
            38202588,
            38163454,
            38163549,
            38164049,
            38162683,
            38163806,
            38164073,
            38165403,
            38165313,
            38165695,
            38165203,
            38164723,
            38162539,
            38162894
        ],
        "B": [
            38160472,
            38157775,
            38159643,
            38159599,
            38161723,
            38159684,
            38162382,
            38159493,
            38159452,
            38160053,
            38159583,
            38160909,
            38164410,
            38160958,
            38160311,
            38159735,
            38160488
        ],
        "A": [
            38158198,
            38157375,
            38157656,
            38157773,
            38158120,
            38202594,
            38157741,
            38157702,
            38160301,
            38157750,
            38158544,
            38157695,
            38157893,
            38159292,
            38163521,
            38158147,
            38158142,
            38157847,
            38158925
        ]
    },
    "name": "D. Almost Arithmetic Progression",
    "statement": "Polycarp likes arithmetic progressions. A sequence [a_1, a_2,\r\ndots, a_n] is called an arithmetic progression if for each i (1\r\nle i < n) the value a_{i+1} - a_i is the same. For example, the\r\nsequences [42], [5, 5, 5], [2, 11, 20, 29] and [3, 2, 1, 0] are\r\narithmetic progressions, but [1, 0, 1], [1, 3, 9] and [2, 3, 1] are\r\nnot.It follows from the definition that any sequence of length one or\r\ntwo is an arithmetic progression.Polycarp found some sequence of\r\npositive integers [b_1, b_2,\r\ndots, b_n]. He agrees to change each element by at most one. In the\r\nother words, for each element there are exactly three options: an\r\nelement can be decreased by 1, an element can be increased by 1, an\r\nelement can be left unchanged.Determine a minimum possible number of\r\nelements in b which can be changed (by exactly one), so that the\r\nsequence b becomes an arithmetic progression, or report that it is\r\nimpossible.It is possible that the resulting sequence contains element\r\nequals 0.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define DIM 100007\n#define INF 1000000007\nusing namespace std;\n\nlong long n,b[DIM];\nint main()\n{\n    cin>>n;\n    for(int i = 1;i<=n;++i)\n        cin>>b[i];\n\n    long long res = INF;\n\n    for(int k1 = -1; k1<=1;++k1)\n        for(int k2 = -1;k2<=1;++k2)\n    {\n        long long d = b[2]+k2 - b[1] - k1,last = b[2] +k2,curr = 0;\n        if(k1!=0) curr++;\n        if(k2!=0) curr++;\n\n        for(int i = 3;i<=n;++i)\n        {\n            long long need = last + d;\n            if(abs(need - b[i])>1)\n            {\n                curr = INF;\n                break;\n            }\n            if(need != b[i])\n                curr++;\n\n            last = need;\n        }\n\n        res = min(res,curr);\n    }\n\n    if(res == INF) cout<<-1;\n    else cout<<res;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Almost Arithmetic Progression.json",
    "editorial_link": "https://codeforces.com/blog/entry/59430",
    "editorial": "If we can print , because each such sequence is an arithmetic\r\nprogression.Note, that an arithmetic progression is uniquely determined\r\nby the first two terms. So we should brute from to the change of the\r\nfirst element of the given sequence, and from to the change of the\r\nsecond element of the given sequence. Then and . Also we will store the\r\nnumber of changed elements in the sequence. Initially . Now we need to\r\niterate through the sequence from the third element to -th. Let current\r\nelement in the position . It should be equals to . If , then such\r\narithmetic progression is unreachable. Else, if we should increase on\r\none. After we considered all elements we should update the answer with\r\nthe value of , if for all it was true that .\r\n",
    "hint": []
}