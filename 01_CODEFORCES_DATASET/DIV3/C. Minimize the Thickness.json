{
    "link": "https://codeforces.com//contest/1741/problem/C",
    "problemId": "1580859",
    "problem_idx": "C",
    "shortId": "1741C",
    "contest_number": "1741",
    "problem_submissions": {
        "G": [
            175658655,
            175776548,
            175778289,
            175654398,
            175880793,
            175656924,
            175637609,
            175729544,
            176113562
        ],
        "F": [
            175634710,
            175634330,
            175639332,
            175634963,
            175641391,
            175642288,
            175651066,
            175638700,
            175650758,
            175650474,
            175650413,
            175696195,
            175630855,
            175641068,
            175713558,
            175713496,
            175713405,
            175713348,
            175712166,
            175712032,
            175710248,
            175653725,
            188881508,
            175657954,
            175660445,
            175647171
        ],
        "E": [
            175612842,
            175607012,
            175602583,
            175610869,
            175597285,
            175603137,
            175605173,
            175613578,
            175612154,
            175602225,
            175611227,
            175622904,
            175609226,
            175636862,
            175596615,
            175626249,
            175618084,
            175609955,
            175614301,
            175619312
        ],
        "D": [
            175600792,
            175598753,
            175587861,
            175602078,
            175590264,
            175593902,
            175593998,
            175614050,
            175599808,
            175588551,
            175598698,
            175602136,
            175595713,
            175593039,
            175644398,
            175600557,
            175714317,
            175605116,
            175598500,
            175596629,
            175607880
        ],
        "C": [
            175590194,
            175585809,
            175713811,
            175588824,
            175588091,
            175585251,
            175586131,
            175579401,
            175581660,
            175576056,
            175582459,
            175579198,
            175578713,
            175576074,
            175578615,
            175581737,
            175586416,
            175584583,
            175585714,
            175593866
        ],
        "B": [
            175579146,
            175570687,
            175567044,
            175573608,
            175578477,
            175570022,
            175570101,
            175572940,
            175567692,
            175571900,
            175569281,
            175569338,
            175568386,
            175570488,
            175571800,
            175575494,
            175567609,
            175569238,
            175585403
        ],
        "A": [
            175563566,
            175564993,
            175563738,
            175564174,
            175564333,
            175564490,
            175563949,
            175567859,
            175563695,
            175565037,
            175565795,
            175565035,
            175564013,
            175564907,
            175683101,
            175567126,
            175709307,
            175566606,
            175563970,
            175564612,
            175568510
        ]
    },
    "name": "C. Minimize the Thickness",
    "statement": "You are given a sequence a=[a_1,a_2,\r\ndots,a_n] consisting of n integers.Let\u2019s call a group of consecutive\r\nelements a . Each is characterized by two indices: the index of its left\r\nend and the index of its right end. Denote by a[l,r] a of the sequence a\r\nwith the left end in l and the right end in r, i.e. a[l,r]=[a_l,\r\na_{l+1},\r\ndots, a_r].For example, if a=[31,4,15,92,6,5], then a[2,5]=[4,15,92,6],\r\na[5,5]=[6], a[1,6]=[31,4,15,92,6,5] are .We split the given sequence a\r\ninto so that: each element is in one ; the sums of elements for all are\r\n. For example, if a = [55,45,30,30,40,100], then such a sequence can be\r\nsplit into three : a[1,2]=[55,45], a[3,5]=[30, 30, 40], a[6,6]=[100].\r\nEach element belongs to exactly , the sum of the elements of each is\r\n100.Let\u2019s define of split as the length of the longest . For example,\r\nthe thickness of the split from the example above is 3.Find the minimum\r\nthickness among all possible splits of the given sequence of a into in\r\nthe required way.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define dprintf(...) printf(__VA_ARGS__)\nusing namespace std;\ntypedef long long LL;\n\nint N, A[2010];\n\nbool check(int max_len) {\n  int sum = 0;\n  for (int i = 0; i < N && i < max_len; i++) {\n    sum += A[i];\n\n    int j = i+1, js = 0, jn = 0;\n    bool good = true;\n    while (j < N) {\n      js += A[j++];\n      jn += 1;\n      if (js > sum || jn > max_len) { good = false; break; }\n      if (js == sum) {\n        js = 0;\n        jn = 0;\n      }\n    }\n    if (good && js == 0 && jn == 0) return true;\n  }\n\n  return false;\n}\n\nvoid solve() {\n  cin >> N;\n  for (int i = 0; i < N; i++) cin >> A[i];\n\n  // (l, r]\n  int l = 0, r = N;\n  while (r - l > 1) {\n    int m = (l + r) / 2;\n    if (check(m)) {\n      r = m;\n    } else {\n      l = m;\n    }\n  }\n\n  printf(\"%d\\n\", r);\n}\n\nint main() {\n  ios::sync_with_stdio(false); cin.tie(0);\n\n  int T; cin >> T;\n  for (int cs = 1; cs <= T; cs++) {\n    solve();\n  }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "math",
        "two pointers"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Minimize the Thickness.json",
    "editorial_link": "https://codeforces.com//blog/entry/107908",
    "editorial": "Let\u00e2\u0080\u0099s iterate over the length of the first segment of the split. Having\r\nfixed it, we actually fixed the sum that needs to be collected on all\r\nother segments. Since each element must belong to exactly one segment,\r\nwe can build other segments greedily. If we have found a solution, we\r\nwill remember the length of the longest segment in it and try to update\r\nthe answer. We have possible lengths of the first segment, for each of\r\nwhich we greedily built the answer for . Thus, the asymptotics of the\r\nsolution will be .\r\n"
}