{
    "link": "https://codeforces.com//contest/1374/problem/A",
    "problemId": "659584",
    "problem_idx": "A",
    "shortId": "1374A",
    "contest_number": "1374",
    "problem_submissions": {
        "E2": [
            85382072,
            85375189,
            85438625
        ],
        "F": [
            85353642,
            85415306,
            85383843,
            85383492,
            85387797
        ],
        "E1": [
            85326034,
            85415299,
            85334989,
            85321477,
            85339121,
            85319474,
            85320204,
            85328246,
            85336700,
            85339703,
            85337792,
            85338081,
            85335206,
            85337433,
            85338605,
            85342001,
            85329936,
            85333348,
            85346311
        ],
        "D": [
            85316338,
            85415714,
            85415293,
            85323106,
            85325598,
            85328229,
            85311173,
            85312812,
            85313089,
            85319125,
            85325499,
            85321861,
            85326849,
            85319951,
            85325883,
            85322528,
            85325568,
            85334734,
            85327646,
            85314511
        ],
        "C": [
            85307188,
            85415289,
            85310607,
            85296173,
            85316864,
            85302975,
            85301461,
            85301463,
            85305237,
            85304971,
            85309343,
            85306153,
            85311376,
            85308864,
            85309628,
            85308295,
            85307625,
            85311312,
            85303960
        ],
        "B": [
            85299874,
            85415460,
            85415277,
            85305586,
            85300354,
            85311254,
            85298580,
            85298918,
            85297647,
            85301049,
            85300227,
            85301912,
            85300264,
            85307719,
            85302644,
            85305750,
            85299884,
            85297473,
            85305618,
            85299402
        ],
        "A": [
            85296254,
            85418749,
            85415919,
            85415268,
            85300037,
            85296089,
            85298024,
            85296518,
            245635316,
            85296385,
            85295981,
            85296977,
            85296136,
            85296861,
            85296508,
            85298422,
            85298833,
            85299917,
            85296648,
            85305648,
            85300594,
            85296295
        ]
    },
    "name": "A. Required Remainder",
    "statement": "You are given three integers x, y and n. Your task is to find the\r\ninteger k such that 0\r\nle k\r\nle n that k\r\nbmod x = y, where\r\nbmod is modulo operation. Many programming languages use percent\r\noperator to implement it.In other words, with given x, y and n you need\r\nto find the maximum possible integer from 0 to n that has the remainder\r\ny modulo x.You have to answer t independent test cases. It is guaranteed\r\nthat such k exists for each test case.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define IO_OP std::ios::sync_with_stdio(0); std::cin.tie(0);\n#define F first\n#define S second\n#define V vector\n#define PB push_back\n#define MP make_pair\n#define EB emplace_back\n#define ALL(v) (v).begin(), (v).end()\n#define debug(x) cerr << #x << \" is \" << x << endl\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pi;\ntypedef V<int> vi;\n\nconst int INF = 1e9 + 7;\n\nsigned main()\n{\n\tIO_OP;\n\t\n\tint t;\n\tcin >> t;\n\twhile(t--) {\n\t\tint x, y, n;\n\t\tcin >> x >> y >> n;\n\t\tcout << (n - y) / x * x + y << endl;\n\t}\n\t\n}\n\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Required Remainder.json",
    "editorial_link": "https://codeforces.com//blog/entry/79517",
    "editorial": "There are two cases in this problem. If we try to maximize the answer,\r\nwe need to consider only two integers: and . Of course, the first one is\r\nbetter (we get rid of the existing remainder and trying to add to this\r\nnumber). If it\u00e2\u0080\u0099s too big, then we can and need to take the second one\r\n(this number is just the first one but decreased by ). The answer can be\r\nalways found between these numbers.Time complexity: .\r\n"
}