{"link": "https://codeforces.com//contest/1118/problem/F1", "problemId": "300361", "problem_idx": "F1", "shortId": "1118F1", "contest_number": "1118", "problem_submissions": {"E": [50187972, 50178585, 50177854, 50187885, 50190255, 50191148, 50185548, 50187581, 50187155, 50189680, 50192489, 50176894, 50191143, 50188012, 50189444, 50186952, 50192839, 50194191, 50192878, 50194811, 50194112], "F1": [50184628, 50182187, 50182069, 50185126, 50186144, 50175246, 50268639, 50268627, 50268547, 50268534, 50268507, 50268495, 50268478, 50177703, 50177673, 50189880, 50187751, 50178618, 50180765, 50182959, 50195988, 50179367, 50193234, 50188527, 50175539, 50191073, 50183885, 50182277], "C": [50180516, 50189313, 50189314, 50174569, 50182199, 50186326, 50196284, 50176517, 50179801, 50190327, 50186281, 50179237, 50179193, 50195343, 50178816, 50179289, 50198041, 50178779, 50215543, 50180475, 50179046], "D1": [50173332, 50175414, 50179356, 50180631, 50185124, 50180428, 50182811, 50183080, 50182930, 50182441, 50190772, 50187897, 50183718, 50184678, 50183560, 50184764, 50183014, 50185852, 50188218, 50190752], "D2": [50173254, 50175301, 50179259, 50186552, 50187970, 50180477, 50182733, 50182917, 50182838, 50182532, 50190661, 50187874, 50183954, 50184600, 50183758, 50184505, 50183208, 50185955, 50185683, 50189545, 50190850], "B": [50171883, 50174314, 50178899, 50169507, 50171162, 50173488, 50172475, 50172202, 50172480, 50172037, 50171388, 50171487, 50171892, 50174620, 50175080, 50173570, 50171467, 50173112, 50174638, 50174514], "A": [50167992, 50168657, 50171109, 50166868, 50167018, 50167896, 50168002, 50167192, 50167986, 50168375, 50170469, 50167469, 50167941, 50167556, 50168146, 50168540, 50168781, 50167258, 50168367, 50169680]}, "name": "F1. Tree Cutting  Easy Version ", "statement": "You are given an undirected tree of n vertices. Some vertices are\r\ncolored blue, some are colored red and some are uncolored. It is\r\nguaranteed that the tree contains at least one red vertex and at least\r\none blue vertex.You choose an edge and remove it from the tree. Tree\r\nfalls apart into two connected components. Let\u2019s call an edge if neither\r\nof the resulting components contain vertices of both red and blue\r\ncolors.How many edges are there in the given tree?\r\n", "solutions": ["#include<bits/stdc++.h>\n// #include <ext/pb_ds/assoc_container.hpp>\n// #include <ext/pb_ds/tree_policy.hpp>\n// using namespace __gnu_pbds;\nusing namespace std;\n\n// #define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>\n#define ll long long int\n#define ld long double\n#define pb push_back\n#define mp make_pair\n\nvector <ll> adj[300005];\nll col[300005],pr[300005],r[300005],b[300005];\n//vector <pair<ll,ll> > v;\n\nll fep(ll x, ll y, ll mod)\n{ll res=1;while(y>0){if(y&1)res=(res*x)%mod;\n    y=y>>1;x=(x*x)%mod;}return res%mod;}\n    \nvoid dfs(ll node)\n{\n\tll c=0;\n\tpr[node]=1;\n\tfor(int i=0;i<adj[node].size();i++)\n\t\tif(pr[adj[node][i]]==0)\n\t\t{\n\t\t\tdfs(adj[node][i]);\n\t\t\tr[node]+=r[adj[node][i]];\n\t\t\tb[node]+=b[adj[node][i]];\n\t\t}\n\tif(col[node]==1)\n\t\tr[node]++;\n\telse if(col[node]==2)\n\t\tb[node]++;\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0);cout.tie(0);\n\n\tll n,i,j,x,y,req=0,k,cnt=0;\n\tstring s;\n\t\n\tcin >> n;\n\t\n\tfor(i=1;i<=n;i++)\n\t\tcin >> col[i];\n\t\n\tfor(i=0;i<n-1;i++)\n\t{\n\t\tcin >> x >> y;\n//\t\tv.pb(mp(x,y));\n\t\tadj[x].pb(y);\n\t\tadj[y].pb(x);\n\t}\n\tdfs(1);\n//\tfor(i=1;i<=n;i++)\n//\t\tcout << r[i] << \" \" << b[i] << endl;\n\tfor(i=2;i<=n;i++)\n\t{\n\t\tif(b[1]==0)\n\t\t{\n\t\t\tcnt++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(r[1]==0)\n\t\t\t\tcnt++;\n\t\t\telse if((b[i]==0 && r[i]==r[1]) || (r[i]==0 && b[i]==b[1]))\n\t\t\t\tcnt++;\n\t\t}\n\t}\n\tcout << cnt;\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["dfs and similar", "trees"], "dificulty": "1800", "interactive": false}