{
    "link": "https://codeforces.com//contest/1141/problem/E",
    "problemId": "316174",
    "problem_idx": "E",
    "shortId": "1141E",
    "contest_number": "1141",
    "problem_submissions": {
        "G": [
            52739588,
            51536187,
            51534299,
            51525036,
            55748640,
            98770872,
            51606575,
            51605903,
            51550288,
            51562985
        ],
        "E": [
            51521056,
            51509494,
            51514700,
            51509864,
            51515343,
            51512067,
            51514136,
            51516742,
            51515279,
            51513645,
            51514418,
            51515657,
            51529830,
            51518938,
            51520757,
            51514193,
            51518496,
            51519253
        ],
        "F2": [
            51512804,
            51520813,
            51519468,
            51520462,
            51524714,
            51522819,
            51524615,
            51526867,
            51526388,
            51528287,
            51528610,
            51526942,
            51526833,
            51528921,
            51567579,
            51529733,
            51520266,
            51530585,
            51528159
        ],
        "F1": [
            51512586,
            51519520,
            51520037,
            51530962,
            51520861,
            51524235,
            51522340,
            51524194,
            51526191,
            51525945,
            51527775,
            51528063,
            51527052,
            51527343,
            51520158,
            51528384,
            51528375,
            51520780,
            51530653,
            51527810
        ],
        "D": [
            51504077,
            51500288,
            51507602,
            51497021,
            51498993,
            51505660,
            51501736,
            51504542,
            51504450,
            51505517,
            51507648,
            51506380,
            51507813,
            51509739,
            51507965,
            51506483,
            51503583,
            51507577,
            51514228
        ],
        "C": [
            51496498,
            51493212,
            51499078,
            51492880,
            51502608,
            51499584,
            51495627,
            51495976,
            51499494,
            51500075,
            51499041,
            51503297,
            51499022,
            51497246,
            51497075,
            51529270,
            51499224,
            51506668
        ],
        "B": [
            51489707,
            51490678,
            51493680,
            51489601,
            51492373,
            51494463,
            51492484,
            51490578,
            51491799,
            51494772,
            51492508,
            51496543,
            51490227,
            51491876,
            51492884,
            51490276,
            51493813,
            51493209
        ],
        "A": [
            51488460,
            51488637,
            51489458,
            51488560,
            51490651,
            51489465,
            51489640,
            51488837,
            51490105,
            51489577,
            51489271,
            51494436,
            51488528,
            51488619,
            51489959,
            51488566,
            51490539
        ]
    },
    "name": "E. Superhero Battle",
    "statement": "A superhero fights with a monster. The battle consists of rounds, each\r\nof which lasts exactly n minutes. After a round ends, the next round\r\nstarts immediately. This is repeated over and over again.Each round has\r\nthe same scenario. It is described by a sequence of n numbers: d_1, d_2,\r\ndots, d_n (-10^6\r\nle d_i\r\nle 10^6). The i-th element means that monster\u2019s hp (hit points) changes\r\nby the value d_i during the i-th minute of each round. Formally, if\r\nbefore the i-th minute of a round the monster\u2019s hp is h, then after the\r\ni-th minute it changes to h := h + d_i.The monster\u2019s initial hp is H. It\r\nmeans that before the battle the monster has H hit points. Print the\r\nfirst minute after which the monster dies. The monster dies if its hp is\r\nless than or equal to 0. Print if the battle continues infinitely.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define ll long long\n#define pb push_back\n\nusing namespace std;\n\nll d[200100], pr[200100];\n\nconst ll INF = 1e18;\n\nint main()\n{\n    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n    ll H, n;\n    cin >> H >> n;\n    ll H1 = H, mx = INF;\n    vector<ll> v;\n    for(int i = 1; i <= n; ++i){\n        cin >> d[i];\n        pr[i] = pr[i-1] + d[i];\n        v.pb(pr[i]);\n        H += d[i];\n        if(H <= 0){\n            cout << i;\n            return 0;\n        }\n        mx = min(mx, pr[i]);\n    }\n\n    if(pr[n] < 0){\n        H = H1 + mx;\n        ll ans = ceil((1.0*H / abs(pr[n])));\n        H = H1;\n        H += ans * pr[n];\n        ans *= n;\n        for(int i = 1; i <= n; ++i){\n            ans++;\n            H += d[i];\n            if(H <= 0){\n                break;\n            }\n        }\n        cout << ans << '\\n';\n    }\n    else{\n        cout << -1;\n    }\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Superhero Battle.json",
    "editorial_link": "https://codeforces.com//blog/entry/66062",
    "editorial": "In general the answer looks like: some number of complete (full) round\r\ncycles plus some prefix the the round.Check corner case that there are\r\nno complete (full) rounds at all (just check the first round in naive\r\nway). If no solution found, the answer has at least one complete (full)\r\ncycle and some prefix.If total sum in one round is not negative, then a\r\ncomplete (full) cycle doesn\u00e2\u0080\u0099t help and it is again the no solution\r\ncase.Let\u00e2\u0080\u0099s find number of complete (full) cycles. We need such number of\r\ncycles that if your multiple by total sum and add some prefix, the\r\nresult (with negative sign, because it is not a damage) will be greater\r\nor equal than . So, to find just add with the minimal prefix partial sum\r\nand divide the result by minus total sum. Now you know the number of\r\ncomplete (full) cycles, just iterate over the last round in naive way to\r\nfind the answer.\r\n"
}