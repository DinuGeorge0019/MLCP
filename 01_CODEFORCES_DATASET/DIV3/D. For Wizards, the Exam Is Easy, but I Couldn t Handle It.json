{
    "link": "https://codeforces.com//contest/2072/problem/D",
    "problemId": "3229204",
    "problem_idx": "D",
    "shortId": "2072D",
    "contest_number": "2072",
    "problem_submissions": {
        "G": [
            307772799,
            307809764,
            307806065,
            307762195,
            307779871,
            307763203,
            307766386,
            307783503,
            307763532,
            307809258,
            307781857,
            307765659,
            307790235,
            307801659,
            307804804,
            307808915
        ],
        "E": [
            307738148,
            307793779,
            307720955,
            307722173,
            307745982,
            307742826,
            307772373,
            307804075,
            307797947,
            307755611,
            307733707,
            307750678,
            307744711,
            307750875,
            307747403,
            307780646
        ],
        "F": [
            307709265,
            307729312,
            307741557,
            307750671,
            307739658,
            307728662,
            307743591,
            307755446,
            307755521,
            307749224,
            307762390,
            307760668,
            307742033,
            307738045
        ],
        "C": [
            307702044,
            307816497,
            307690473,
            307695294,
            307719576,
            307717536,
            307734794,
            307693326,
            307736083,
            307701008,
            307725201,
            307716632,
            307730546,
            307730790
        ],
        "D": [
            307695401,
            307711290,
            311797424,
            307708412,
            307736484,
            307727429,
            307713271,
            307715079,
            307799116,
            307741157,
            307716291,
            307735858,
            307739179,
            307721453,
            307729454,
            307723246,
            307701801
        ],
        "B": [
            307681270,
            307681028,
            307686105,
            307687363,
            307698668,
            307681141,
            307679525,
            307691744,
            307684681,
            307686428,
            307683951,
            307688277,
            307700407,
            307681812
        ],
        "A": [
            307677487,
            307815815,
            307676613,
            307676730,
            307676749,
            307677896,
            307676041,
            307676794,
            307679028,
            307678185,
            307677448,
            307676382,
            307680004,
            307690212,
            307676345
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/140039",
    "editorial": "In fact, a cyclic shift of the subarray to the left by is the same as\r\nremoving the element from the array and then inserting it after the -th\r\nelement. This means that we can move the number to any position .Let’s\r\nsee how the number of inversions in the array changes with the operation\r\non the segment . Inversions with indices from and will remain in the\r\narray, and any pair that forms an inversion will stay in the same\r\nrelative order as in the original array.Thus, we are interested in the\r\ninversions with indices from the segment . Since only the position of\r\nthe number changes, we can remove inversions of the form , where (let’s\r\ncall these first-type inversions), and add inversions of the form ,\r\nwhere (let’s call these second-type inversions). The number of\r\nfirst-type inversions is equal to the number of such that and , let’s\r\ndenote this count as . Similarly, the number of second-type inversions\r\nis equal to the number of such that and , let’s denote this count as .\r\nThen the new number of inversions in the array will change by .It\r\nremains to find a subarray of with the minimal difference , which can be\r\ndone using prefix sums for the count of each from to or by simply\r\niterating over the left boundary and traversing the suffix (see the\r\nauthor’s solution).Asymptotic complexity: .\r\n",
    "name": "D. For Wizards, the Exam Is Easy, but I Couldn t Handle It",
    "statement": "Akito got tired of being a simple locksmith at a bank, so he decided to\r\nenroll in the Magical Academy and become the best wizard in the world!\r\nHowever, to enroll, he needed to solve a single problem on the exam,\r\nwhich the ambitious hero could not manage.In the problem, he was given\r\nan array a of length n. He needed to minimize the number of inversions^{\r\ntext{ }} in the array after applying the spell . The spell was simple;\r\nto apply it, Akito had to choose two numbers l and r such that 1\r\nle l\r\nle r\r\nle n and perform a cyclic shift of the subarray from l to r one position\r\nto the left.More formally, Akito selects the subarray [l, r] and\r\nmodifies the array as follows: From the original array [a_1, a_2,\r\nldots, a_{l - 1},\r\nmathbf{ a_l },\r\nmathbf{ a_{l + 1} } ,\r\nmathbf{\r\nldots },\r\nmathbf{ a_{r - 1} },\r\nmathbf{ a_r }, a_{r + 1},\r\nldots, a_{n - 1}, a_n], he obtains the array [a_1, a_2,\r\nldots, a_{l - 1},\r\nmathbf{ a_{l + 1} },\r\nmathbf{ a_{l + 2} },\r\nmathbf{\r\nldots },\r\nmathbf{ a_{r - 1} },\r\nmathbf{ a_{r} },\r\nmathbf{ a_{l} }, a_{r + 1},\r\nldots, a_{n - 1}, a_{n}]. Akito is eager to start his studies, but he\r\nstill hasn’t passed the exam. Help him enroll and solve the problem!^{\r\ntext{ }}An inversion in an array b of length m is defined as a pair of\r\nindices (i, j) such that 1\r\nle i < j\r\nle m and b_i > b_j. For example, in the array b = [3, 1, 4, 1, 5], the\r\ninversions are the pairs of indices (1, 2), (1, 4), (3, 4).\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. For Wizards, the Exam Is Easy, but I Couldn t Handle It.json",
    "hint": []
}