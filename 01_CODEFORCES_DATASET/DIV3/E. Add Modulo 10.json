{
    "link": "https://codeforces.com//contest/1714/problem/E",
    "problemId": "1490431",
    "problem_idx": "E",
    "shortId": "1714E",
    "contest_number": "1714",
    "problem_submissions": {
        "F": [
            166579305,
            166565691,
            166580443,
            166573014,
            166573474,
            166592525,
            166595105,
            166548029,
            166593205,
            166686575,
            166579941,
            166590847,
            166638992,
            167603752
        ],
        "D": [
            166555174,
            166529424,
            166533941,
            166553024,
            166532466,
            166537534,
            166569263,
            166563818,
            166546107,
            166686361,
            166550012,
            166577360,
            166525263,
            166545147,
            166538583,
            166541251,
            166536599,
            166539458,
            166766162,
            166567140,
            166550628,
            166541107
        ],
        "G": [
            166545336,
            166572008,
            166558804,
            166581190,
            166549499,
            166568428,
            166563357,
            166570492,
            166570829,
            166686732,
            166586648,
            166587656,
            166562027,
            166554683,
            166566856,
            166569305,
            166581306,
            166572830,
            166766125,
            166554830,
            166567931,
            166573074
        ],
        "E": [
            166529226,
            166550151,
            166552214,
            166540138,
            166557091,
            166551342,
            166540892,
            166583808,
            166558113,
            166686473,
            166559850,
            203226761,
            166572711,
            166543154,
            166563505,
            166554394,
            166558430,
            166551333,
            166551809,
            166536566,
            166532529,
            166559461
        ],
        "C": [
            166508236,
            166513547,
            166511820,
            166514654,
            166516790,
            166512293,
            166728853,
            166510608,
            166524319,
            166522144,
            166686237,
            166521175,
            166545986,
            166510036,
            166508148,
            166522114,
            166515443,
            166510078,
            166516228,
            166524460,
            166519794,
            166509906
        ],
        "B": [
            166507200,
            166510494,
            166509013,
            166507825,
            166510367,
            166509254,
            166728113,
            166507901,
            166516960,
            166518989,
            166685849,
            166514261,
            166539890,
            166507950,
            166506803,
            166510018,
            166509016,
            166508114,
            166511943,
            166508752,
            166512719,
            166508756
        ],
        "A": [
            166506659,
            166508343,
            166507357,
            166506909,
            166560580,
            166507658,
            166727935,
            166506862,
            166512344,
            166510563,
            166511944,
            166685755,
            166510846,
            166535694,
            166506790,
            166510397,
            166508153,
            166507023,
            166506968,
            166508973,
            166507229,
            166507722,
            166506864
        ]
    },
    "name": "E. Add Modulo 10",
    "statement": "You are given an array of n integers a_1, a_2,\r\ndots, a_nYou can apply the following operation an arbitrary number of\r\ntimes: select an index i (1\r\nle i\r\nle n) and replace the value of the element a_i with the value a_i + (a_i\r\nbmod 10), where a_i\r\nbmod 10 is the remainder of the integer dividing a_i by 10. For a single\r\nindex (value i), this operation can be applied multiple times. If the\r\noperation is applied repeatedly to the same index, then the current\r\nvalue of a_i is taken into account each time. For example, if a_i=47\r\nthen after the first operation we get a_i=47+7=54, and after the second\r\noperation we get a_i=54+4=58.Check if it is possible to make array\r\nelements equal by applying multiple (possibly zero) operations.For\r\nexample, you have an array [6, 11]. Let’s apply this operation to the\r\nfirst element of the array. Let’s replace a_1 = 6 with a_1 + (a_1\r\nbmod 10) = 6 + (6\r\nbmod 10) = 6 + 6 = 12. We get the array [12, 11]. Then apply this\r\noperation to the second element of the array. Let’s replace a_2 = 11\r\nwith a_2 + (a_2\r\nbmod 10) = 11 + (11\r\nbmod 10) = 11 + 1 = 12. We get the array [12, 12]. Thus, by applying 2\r\noperations, you can make all elements of an array equal.\r\n",
    "solutions": [
        "/*\nDiv 3, I literally don't care edition\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define rep(i,m,n) for (ll i=m;i<=n;i++)\n#define reb(i,m,n) for (ll i=m;i>=n;i--)\n#define rv(i,vt) for (auto i:vt)\n#define ii pair<ll,ll>\n#define vi vector<ll>\n#define F first\n#define S second\n#define pb push_back\nusing namespace std;\nconst ll N=1e6+5,mod=1e9+7;\nll n,c,k,a[N];\nvoid solo()\n{\n   cin>>n;\n   c=k=0;\n   rep(i,1,n) cin>>a[i];\n   rep(i,1,n) if (a[i]%5==0) c++;\n   else k++;\n   if (c*k>0){\n       cout<<\"No\";\n       return;\n   }\n   if (c>0){\n       rep(i,1,n) if (a[i]%10==5) a[i]+=5;\n       rep(i,1,n-1) if (a[i]!=a[i+1]){\n           cout<<\"No\";\n           return;\n       }\n       cout<<\"Yes\";\n       return;\n   }\n   rep(i,1,n) if (a[i]%2) a[i]+=a[i]%10;\n   rep(i,1,n) while (a[i]%10!=a[n]%10) a[i]+=a[i]%10;\n   rep(i,1,n) a[i]/=10;\n   rep(i,2,n) if (a[i]%2!=a[i-1]%2){\n       cout<<\"No\";\n       return;\n   }\n   cout<<\"Yes\";\n}\nint main()\n{\n   ios_base::sync_with_stdio(0);\n   cin.tie(0);\n   cout.tie(0);\n   ll ts=1;\n   cin>>ts;\n   while (ts--){\n       solo();\n       cout<<endl;\n   }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math",
        "number theory"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Add Modulo 10.json",
    "editorial_link": "https://codeforces.com//blog/entry/105549",
    "editorial": "Letâs see which remainders modulo change into which ones.If the array\r\ncontains a number divisible by , then it cannot be changed. If there is\r\na number that has a remainder of modulo , then it can only be replaced\r\nonce.Thus, if the array contains a number divisible by , then we apply\r\nthis operation to all elements of the array once and check that all its\r\nelements are equal.The remaining odd balances () immediately turn into\r\neven ones. The even remainders () change in a cycle, while the array\r\nelement increases by in operations. Thus, we will apply the operation to\r\neach element of the array until its remainder modulo becomes, for\r\nexample, , and then check that the array does not contain both\r\nremainders and modulo .\r\n",
    "hint": []
}