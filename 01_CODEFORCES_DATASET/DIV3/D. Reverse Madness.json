{
    "link": "https://codeforces.com//contest/1878/problem/D",
    "problemId": "2229485",
    "problem_idx": "D",
    "shortId": "1878D",
    "contest_number": "1878",
    "problem_submissions": {
        "G": [
            225357770,
            225356148,
            225378677,
            225396088,
            225913288,
            225913201,
            225920084,
            225806168
        ],
        "E": [
            225342729,
            225298379,
            225344738,
            225348985,
            225318623,
            225299675,
            225329860,
            225336305,
            225327357,
            225306213,
            225322089,
            225309942,
            225339644,
            225341224,
            225341243,
            225343329,
            225344211,
            225338004,
            225316088
        ],
        "D": [
            225335832,
            225341527,
            225309051,
            225331018,
            225323094,
            225338405,
            225319972,
            225330316,
            225308377,
            225329843,
            225347560,
            225344567,
            225325782,
            225334610,
            225324123,
            225325861,
            225322057,
            225328040,
            225346585
        ],
        "C": [
            225318388,
            225345357,
            225316589,
            225296717,
            225295479,
            225291873,
            225287260,
            225292130,
            225288945,
            225292627,
            225291194,
            225293331,
            225301422,
            225296957,
            225301805,
            225302804,
            225306798,
            225304842,
            225306017
        ],
        "F": [
            225309193,
            225371590,
            225359110,
            225363020,
            225336771,
            225356090,
            225361957,
            225350800,
            225360150,
            225370320,
            225377951,
            225387862,
            225369402,
            225367044,
            225368506,
            225373551,
            225374797,
            225379464,
            225370893
        ],
        "B": [
            225289378,
            225311939,
            225302167,
            225288412,
            225283039,
            225282551,
            225280252,
            225288368,
            225281781,
            225285957,
            225281577,
            225284558,
            225292958,
            225290446,
            225282910,
            225296220,
            225284347,
            225295270,
            225303310
        ],
        "A": [
            225283036,
            225276287,
            225280098,
            225277273,
            225274431,
            225277937,
            225274529,
            225279212,
            225276095,
            225274228,
            225275085,
            225274508,
            225280174,
            225280595,
            225275774,
            225283697,
            225275093,
            225278575,
            225275576
        ]
    },
    "name": "D. Reverse Madness",
    "statement": "You are given a string s of length n, containing lowercase Latin\r\nletters. Next you will be given a positive integer k and two arrays, l\r\nand r of length k.It is guaranteed that the following conditions hold\r\nfor these 2 arrays: l_1 = 1; r_k = n; l_i\r\nle r_i, for each positive integer i such that 1\r\nle i\r\nle k; l_i = r_{i-1}+1, for each positive integer i such that 2\r\nle i\r\nle k; Now you will be given a positive integer q which represents the\r\nnumber of modifications you need to do on s.Each modification is defined\r\nwith one positive integer x: Find an index i such that l_i\r\nle x\r\nle r_i (notice that such i is unique). Let a=\r\nmin(x, r_i+l_i-x) and let b=\r\nmax(x, r_i+l_i-x). Reverse the substring of s from index a to index b.\r\nReversing the substring [a, b] of a string s means to make s equal to\r\ns_1, s_2,\r\ndots, s_{a-1},\r\ns_b, s_{b-1},\r\ndots, s_{a+1}, s_a,\r\ns_{b+1}, s_{b+2},\r\ndots, s_{n-1}, s_n.Print s after the last modification is finished.\r\n",
    "solutions": [
        "#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint a[200000], b[200000], d[200001];\nint main() {\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0), cout.tie(0);\n\tint t;\n\tcin >> t;\n\tfor (; t--;) {\n\t\tint n, k, q;\n\t\tstring s;\n\t\tcin >> n >> k >> s;\n\t\tfor (int i = 0; i ^ k; ++i)\n\t\t\tcin >> a[i], --a[i];\n\t\tfor (int i = 0; i ^ k; ++i)\n\t\t\tcin >> b[i], --b[i];\n\t\tfor (int i = 0; i ^ n; ++i)\n\t\t\td[i] = 0;\n\t\tcin >> q;\n\t\tfor (; q--;) {\n\t\t\tint x;\n\t\t\tcin >> x;\n\t\t\t--x;\n\t\t\tint p = upper_bound(a, a + k, x) - a - 1;\n\t\t\tint l = min(x, a[p] + b[p] - x);\n\t\t\tint r = max(x, a[p] + b[p] - x);\n\t\t\t++d[l], --d[r + 1];\n\t\t}\n\t\tint p = 0, cur = 0;\n\t\tfor (int i = 0; i ^ n; ++i) {\n\t\t\tcur += d[i];\n\t\t\tif (p < k && i > b[p])\n\t\t\t\t++p;\n\t\t\tif (cur & 1)\n\t\t\t\tcout << s[a[p] + b[p] - i];\n\t\t\telse\n\t\t\t\tcout << s[i];\n\t\t}\n\t\tcout << '\\n';\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Reverse Madness.json",
    "editorial_link": "https://codeforces.com//blog/entry/120813",
    "editorial": "Observation 1: if we look at [] as subsegments for each , notice that\r\nthey are disjoint, and that two modifications do not interfere with each\r\nother if they are from different subsegments. Because of this\r\nobservation we can basically treat subsegments as separate test\r\ncases.Now, without loss of generality, because of the first observation,\r\nwe can consider the same problem but with and .It is easy to see that\r\nthe modifications and are equivalent, because the first one will reverse\r\nthe subsegment [], and the second one will do the same thing. Using this\r\nwe can consider without loss of generality for all modifications the\r\nfollowing holds true: .Now try visualizing the modifications: if then we\r\nreverse the whole string.if then we reverse the whole string except the\r\nfirst and the last element.if then we reverse the whole string except\r\nthe first two and last two elements.We can logically conclude that the\r\nmodifications are symmetrical with respect to the middle of the\r\nstring.From this symmetry, we can conclude that if a modification\r\n\"touches\" index it also touches index , and also because of the\r\nsymmetry, will always be swapped with , and no other index.This means\r\nthat the order of modifications doesn\u00e2\u0080\u0099t matter, because for each index\r\nit only matters how many modifications affect it.Another thing to note\r\nis that for a given index , all modifications such that affect this\r\nindex. This gives us the following solution:Let\u00e2\u0080\u0099s store the number of\r\nmodifications for each index in an array, and if then store it as . Next\r\nwe just iterate over the array while maintaining the sum of the number\r\nof operations, and if it\u00e2\u0080\u0099s odd we swap elements and , else we just\r\ncontinue iterating.\r\n"
}