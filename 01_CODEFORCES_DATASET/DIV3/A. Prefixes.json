{
    "link": "https://codeforces.com//contest/1216/problem/A",
    "problemId": "416600",
    "problem_idx": "A",
    "shortId": "1216A",
    "contest_number": "1216",
    "problem_submissions": {
        "E2": [
            60986734,
            60981170,
            60997115,
            60985637,
            60997177,
            60997976,
            60992623,
            69195725,
            60998670,
            61247650,
            60997442,
            60997640
        ],
        "E1": [
            60986701,
            60981381,
            60991296,
            60984645,
            60985839,
            60989738,
            60990832,
            60978683,
            60998375,
            60989797,
            60998466,
            60993985,
            60980914,
            60997704,
            60988736,
            60984723,
            60990990,
            60986601
        ],
        "C": [
            60981669,
            60990425,
            60975750,
            60975663,
            61086862,
            60983090,
            60984718,
            61533112,
            60981907,
            60982789,
            60976823,
            60986723,
            61054057,
            60989611,
            60976831,
            60974484,
            60977137,
            60972899,
            60979313
        ],
        "F": [
            60975517,
            60986121,
            60989454,
            61044084,
            60994589,
            60996911,
            60992052,
            60996768,
            60996199,
            60997941,
            61058200,
            60986086,
            60984536
        ],
        "D": [
            60970305,
            60969422,
            60979167,
            60973557,
            60979158,
            60977757,
            60974574,
            60971427,
            60975880,
            60986777,
            60980642,
            60979989,
            60972197,
            60998997,
            60971823,
            60978440,
            60977872,
            60980072,
            60979415,
            60982329
        ],
        "B": [
            60968540,
            60973425,
            60969453,
            60969948,
            60968651,
            60970421,
            60969221,
            60967329,
            60973241,
            60969188,
            60971106,
            60972717,
            61055106,
            60990306,
            60977585,
            60967750,
            60969441,
            60969185,
            60970105,
            60969050
        ],
        "A": [
            60966562,
            60966712,
            60966606,
            60967078,
            60966914,
            60966840,
            60966749,
            60973994,
            60967597,
            60966646,
            60968186,
            60966855,
            61054672,
            60987474,
            60967039,
            60966387,
            60966654,
            60966714,
            60966479,
            60966739
        ]
    },
    "name": "A. Prefixes",
    "statement": "Nikolay got a string s of length n, which consists only of lowercase\r\nLatin letters \u201d and \u201d. Its positions are numbered from 1 to n.He wants\r\nto modify his string so that every its prefix of length has an equal\r\namount of letters \u201d and \u201d. To achieve that, Nikolay can perform the\r\nfollowing operation arbitrary number of times (possibly, zero): choose\r\nsome position in his string and replace the letter on this position with\r\nthe other letter (i.e. replace \u201d with \u201d or replace \u201d with \u201d). Nikolay\r\ncan use no letters except \u201d and \u201d.The prefix of string s of length l (1\r\nle l\r\nle n) is a string s[1..l].For example, for the string s=\"abba\" there are\r\ntwo prefixes of the even length. The first is s[1\r\ndots2]=\"ab\" and the second s[1\r\ndots4]=\"abba\". Both of them have the same number of \u201d and \u201d.Your task is\r\nto calculate the minimum number of operations Nikolay has to perform\r\nwith the string s to modify it so that every its prefix of length has an\r\nequal amount of letters \u201d and \u201d.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 10;\nchar lx[N];\n\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  scanf(\"%s\", lx + 1);\n  int pos = 0, res = 0;\n  for(int i = 1; i <= n; ++i) {\n    if(lx[i] == 'a') pos--;\n    if(lx[i] == 'b') pos++;\n    if(i % 2 == 0 && pos > 0) {\n      lx[i] = 'a';\n      pos -= 2;\n      res++;\n    } else if(i % 2 == 0 && pos < 0) {\n      lx[i] = 'b';\n      pos += 2;\n      res++;\n    }\n  }\n  printf(\"%d\\n\", res);\n  for(int i = 1; i <= n; ++i) {\n    printf(\"%c\", lx[i]);\n  }\n  puts(\"\");\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Prefixes.json",
    "editorial_link": "https://codeforces.com//blog/entry/69954",
    "editorial": "The problem can be solved like this: firstly let\u00e2\u0080\u0099s iterate over all from\r\nto . If characters and are the same then we obviously need to replace\r\none of them with the other character. We can see that such replacements\r\nare enough to make the string suitable.\r\n"
}