{
    "link": "https://codeforces.com//contest/1986/problem/C",
    "problemId": "2714655",
    "problem_idx": "C",
    "shortId": "1986C",
    "contest_number": "1986",
    "problem_submissions": {
        "G2": [
            267051586,
            267098517,
            267207124,
            267227692
        ],
        "G1": [
            267050167,
            267075101,
            267042149,
            267064735,
            267062041,
            267072094,
            267189212,
            267907699,
            267227655
        ],
        "F": [
            267036897,
            267006951,
            267211888,
            267210735,
            267209305,
            267209191,
            267142479,
            267067023,
            267046217,
            267049909,
            267055692,
            267026922,
            267034254,
            267024454,
            267035130,
            267043900,
            267043428,
            267046638,
            267048369,
            267046109,
            267054071,
            267044101,
            267051585,
            267055127
        ],
        "E": [
            267031182,
            267035399,
            267025961,
            267037775,
            267044980,
            267032730,
            267010850,
            267025710,
            267050692,
            267025261,
            267026751,
            267028762,
            267028451,
            267027196,
            267036783,
            267025470,
            267030110,
            267036403,
            267037341
        ],
        "D": [
            267019160,
            267019752,
            267011405,
            267021594,
            267023740,
            267014893,
            267011680,
            267009591,
            267007109,
            267005474,
            267006461,
            267009567,
            267009731,
            267006448,
            267009653,
            267006959,
            267018496,
            267008934,
            267008176
        ],
        "C": [
            266989125,
            266982272,
            266994840,
            267002991,
            266993066,
            267005030,
            266983150,
            266989202,
            266983682,
            267008636,
            266990051,
            266988914,
            266994220,
            266992535,
            266990847,
            266994508,
            266995474,
            266989895,
            266985787
        ],
        "B": [
            266980718,
            266971385,
            266985030,
            266993111,
            266976413,
            266985138,
            266977306,
            266981373,
            266976133,
            266979778,
            266979273,
            266982265,
            266980709,
            266977455,
            266980695,
            266983193,
            266981883,
            266982561,
            266978536
        ],
        "A": [
            266966090,
            266964678,
            266968415,
            266974624,
            270989331,
            266965521,
            266965134,
            266964884,
            266966168,
            266965003,
            266971429,
            266979885,
            266965867,
            266964795,
            266965926,
            266967291,
            266966370,
            266967270,
            266967228,
            266965380
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/130783",
    "editorial": "\nLet i1<i2<\u0085<ik\n be the set of indices of the array ind\n. Note that the indices of the string s\n that are not in this set will simply not change their value.\n\nThen we want to place the smallest character of the string c\n at position i1\n, the next smallest at position i2\n, and so on. To achieve this, we can sort all the characters in the string c\n. This approach to obtaining the answer is possible because all other operations, except those described above, can be performed first and will not affect the answer.",
    "name": "C. Update Queries",
    "statement": "Let\u2019s consider the following simple problem. You are given a string s of\r\nlength n, consisting of lowercase Latin letters, as well as an array of\r\nindices ind of length m (1\r\nleq ind_i\r\nleq n) and a string c of length m, consisting of lowercase Latin\r\nletters. Then, in order, you perform the update operations, namely,\r\nduring the i-th operation, you set s_{ind_i} = c_i. Note that you\r\nperform all m operations from the first to the last.Of course, if you\r\nchange the order of indices in the array ind and/or the order of letters\r\nin the string c, you can get different results. Find the\r\nlexicographically smallest string s that can be obtained after m update\r\noperations, if you can rearrange the indices in the array ind and the\r\nletters in the string c as you like.A string a is lexicographically less\r\nthan a string b if and only if one of the following conditions is met: a\r\nis a prefix of b, but a\r\nneq b; in the first position where a and b differ, the symbol in string\r\na is earlier in the alphabet than the corresponding symbol in string b.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\u00a0#define int long long#define pb push_back#define fi first#define se secondusing namespace std;using ll = long long;using ld = long double;using ull = unsigned long long;mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());const int maxN = 1e6 + 5;const int mod = 1e9 + 7;const ll oo = 1e18;int n, m;int a[maxN];string s, c;void ReadInput(){    cin >> n >> m;    cin >> s;    s = ' ' + s;    for(int i=1; i<=m; i++)        cin >> a[i];    cin >> c;    sort(c.begin(), c.end());    c = ' ' + c;}void Solve(){    sort(a + 1, a + m + 1);    int j = 1;    for(int i=1; i<=m; i++)    {        if(a[i] == a[i - 1]) continue;        s[a[i]] = c[j++];    }    cout << s.substr(1, n) << '\\n';}#define taskname \"sol\"int32_t main(){    if (fopen(taskname \".inp\", \"r\"))    {        freopen(taskname \".inp\", \"r\", stdin);        //freopen(taskname \".out\", \"w\", stdout);    }    ios_base::sync_with_stdio(false);    cin.tie(nullptr);    int T = 1;    cin >> T;    for(int itest=1; itest<=T; itest++)    {        ReadInput();        Solve();    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "sortings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Update Queries.json"
}