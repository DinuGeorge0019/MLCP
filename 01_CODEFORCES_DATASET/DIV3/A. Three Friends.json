{
    "link": "https://codeforces.com//contest/1272/problem/A",
    "problemId": "494353",
    "problem_idx": "A",
    "shortId": "1272A",
    "contest_number": "1272",
    "problem_submissions": {
        "E": [
            66703677,
            66698934,
            66711392,
            66720411,
            66715254,
            66696959,
            66695532,
            66698121,
            66701928,
            66701435,
            66706283,
            66705342,
            66707569,
            66707090,
            66777425,
            66705785,
            66709630,
            66710595,
            66706360,
            66711695
        ],
        "F": [
            66702563,
            66716210,
            66716034,
            66713486,
            66720407,
            66730946,
            66745196,
            66899419,
            66710448,
            69815932
        ],
        "B": [
            66692863,
            66686159,
            66691774,
            66706884,
            66714297,
            66683965,
            66685196,
            66684562,
            66686916,
            66692480,
            66696683,
            66688751,
            66692889,
            66696315,
            66685266,
            66695654,
            66691545,
            66689056,
            66687119,
            66686340
        ],
        "C": [
            66687313,
            66688012,
            66695426,
            66689433,
            66689685,
            66685389,
            66686891,
            66686385,
            66687940,
            66685597,
            66690881,
            66692609,
            66686241,
            66688395,
            66686850,
            66686864,
            66686923,
            66691687,
            66689532,
            66689140
        ],
        "D": [
            66683330,
            66692291,
            66701690,
            66697025,
            66695475,
            66689729,
            66689439,
            66688995,
            66691097,
            66696361,
            66685375,
            66696190,
            66695912,
            66691534,
            66688277,
            66700728,
            66696238,
            66694893,
            66695943,
            66703253
        ],
        "A": [
            66683267,
            66683040,
            66685123,
            66683649,
            66682741,
            66682439,
            66682629,
            66682714,
            66683716,
            66683148,
            66683049,
            66683308,
            66683216,
            66682971,
            66682692,
            66683012,
            66683163,
            66683636,
            66683990,
            66682789
        ]
    },
    "name": "A. Three Friends",
    "statement": "Three friends are going to meet each other. Initially, the first friend\r\nstays at the position x = a, the second friend stays at the position x =\r\nb and the third friend stays at the position x = c on the coordinate\r\naxis Ox.In one minute from other friends can change the position x by 1\r\nto the left or by 1 to the right (i.e. set x := x - 1 or x := x + 1) or\r\neven don\u2019t change it.Let\u2019s introduce the total pairwise distance the sum\r\nof distances between each pair of friends. Let a\u2019, b\u2019 and c\u2019 be the\r\nfinal positions of the first, the second and the third friend,\r\ncorrespondingly. Then the total pairwise distance is |a\u2019 - b\u2019| + |a\u2019 -\r\nc\u2019| + |b\u2019 - c\u2019|, where |x| is the absolute value of x.Friends are\r\ninterested in the minimum total pairwise distance they can reach if they\r\nwill move optimally. . So, more formally, they want to know the minimum\r\ntotal pairwise distance they can reach after one minute.You have to\r\nanswer q independent test cases.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    #ifdef LOCAL\n    freopen(\"input.txt\", \"r\", stdin);\n    #endif // LOCAL\n    int TC; cin >> TC;\n    while (TC--) {\n        int a[4];\n        cin >> a[0] >> a[1] >> a[2];\n        sort(a, a + 3);\n        //int n = unique(a, a + 3) - a;\n        int ans = 2 * (a[2] - a[0]);\n        ans = max(0, ans - 4);\n        cout << ans << endl;\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Three Friends.json",
    "editorial_link": "https://codeforces.com//blog/entry/72132",
    "editorial": "This problem can be solved with simple simulation. Let be the new\r\nposition of the first friend, and are new positions of the second and\r\nthe third friends correspondingly. For the fixed positions you can\r\nupdate the answer with the value . And iterating over three positions\r\ncan be implemented with nested loops.Time complexity: per test case.\r\n"
}