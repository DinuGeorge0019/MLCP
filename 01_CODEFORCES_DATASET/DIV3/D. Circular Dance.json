{
    "link": "https://codeforces.com//contest/1095/problem/D",
    "problemId": "275104",
    "problem_idx": "D",
    "shortId": "1095D",
    "contest_number": "1095",
    "problem_submissions": {
        "E": [
            47572493,
            47577391,
            47577601,
            47571130,
            47573480,
            47573851,
            47579488,
            47579243,
            47583313,
            47572977,
            47576569,
            47582897,
            47574546,
            47577946,
            47581685,
            47573841,
            47582231,
            47584199,
            47573945,
            47583101
        ],
        "F": [
            47566370,
            47573294,
            47562701,
            47573988,
            47579057,
            47581403,
            47572438,
            47566223,
            47578405,
            47576558,
            47583994,
            47577257,
            47570463,
            47582128,
            47586705,
            47807775,
            47807743,
            47807736,
            47807702,
            47586605,
            47608877,
            47573085,
            47580349,
            47588876,
            47585818
        ],
        "D": [
            47563209,
            47614712,
            47567371,
            47571011,
            47564325,
            47567777,
            47568284,
            47567860,
            47577158,
            47566286,
            47577441,
            47568324,
            47562890,
            47577182,
            47571848,
            47568920,
            47581067,
            47574935,
            47575170,
            47568243,
            47568626
        ],
        "C": [
            47559007,
            47560130,
            47566278,
            47559870,
            47560866,
            47562972,
            47564210,
            47560920,
            47562511,
            47560682,
            47563534,
            47559786,
            51809567,
            47573250,
            47561981,
            47566916,
            47564246,
            47565270,
            47562848,
            47563772,
            47565179
        ],
        "B": [
            47555392,
            47555193,
            47564009,
            47556364,
            47556516,
            47555175,
            47555868,
            47555467,
            47557131,
            47554642,
            47557601,
            47555771,
            47557598,
            47556456,
            47555954,
            47558351,
            47557404,
            47558162,
            47559339,
            47556593
        ],
        "A": [
            47554038,
            47554188,
            47553996,
            47553824,
            47555088,
            47553896,
            47554204,
            47554208,
            47554977,
            47553891,
            47554134,
            47554837,
            47554623,
            47554538,
            47554565,
            47555784,
            47555600,
            47554171,
            47557808,
            47555100
        ]
    },
    "name": "D. Circular Dance",
    "statement": "There are n kids, numbered from 1 to n, dancing in a circle around the\r\nChristmas tree. Let’s enumerate them in a clockwise direction as p_1,\r\np_2, ..., p_n (all these numbers are from 1 to n and are distinct, so p\r\nis a permutation). Let the next kid for a kid p_i be kid p_{i + 1} if i\r\n< n and p_1 otherwise. After the dance, each kid remembered two kids:\r\nthe next kid (let’s call him x) and the next kid for x. Each kid told\r\nyou which kids he/she remembered: the kid i remembered kids a_{i, 1} and\r\na_{i, 2}. However, the order of a_{i, 1} and a_{i, 2} can differ from\r\ntheir order in the circle. You have to restore the order of the kids in\r\nthe circle using this information. If there are several answers, you may\r\nprint any. It is guaranteed that at least one solution exists.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define disp(x) cout<<x<<\" \";\ntypedef long long ll;\n#define fo(i,a,b) for(int i=a;i<=b;i++)\n#define endl '\\n'\n#define show(x) cout<<x<<endl;\n#define rf(i,a,b) for(int i=a;i>=b;i--) \n#define pret(x) cout<<x<<endl; return 0;\n#define fast_io ios_base::sync_with_stdio(0);\n#define let(x,y) cout<<x<<\" \"<<y<<endl;\ntypedef vector<int> vi;\nll MOD=1e9+7;\nll MAX=9223372036854775807;\n\nint main(){\n\tfast_io;\n\tint n;\n\tcin>>n;\n\tint a[n+2][2];\n\tfo(i,1,n){\n\t\tcin>>a[i][0]>>a[i][1];\n\t}\n\tvi ans;\n\tans.push_back(1);\n\tbool temp=1;\n\t\tint x=a[1][0];\n\t\tint y=a[1][1];\n\t\tif(a[x][0]==y or a[x][1]==y) temp=0;\n\tif(!temp){\n\t\tans.push_back(x);\n\t\tans.push_back(y);\n\t}\n\telse{\n\t\tans.push_back(y);\n\t\tans.push_back(x);\n\t\tswap(x,y);\n\t}\n\twhile((int)ans.size()<n){\n\t\tint curr=a[x][0];\n\t\tif(curr==y) curr=a[x][1];\n\t\tans.push_back(curr);\n\t\tx=y;\n\t\ty=curr;\n\t}\n\tfor(auto i:ans){\n\t\tdisp(i);\n\t}\n\tcout<<endl;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Circular Dance.json",
    "editorial_link": "https://codeforces.com//blog/entry/64130",
    "editorial": "Letâs write a function which will try to restore the circle if kid with\r\nnumber comes right after kid with number . If comes right after then we\r\ncan determine the number of kid who is next to kid . So now we have:\r\ncomes right after , comes right after . Letâs determine kid who is next\r\nto kid .If we repeat this operation times then we can \"\" the answer if\r\ncomes right after . But it can be wrong so we have to check that our\r\nanswer corresponds to the input.So if we have this function, we can\r\napply it two times to determine the correct answer. Just call and .\r\n",
    "hint": []
}