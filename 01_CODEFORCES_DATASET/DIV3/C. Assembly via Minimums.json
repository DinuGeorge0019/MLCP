{
    "link": "https://codeforces.com//contest/1857/problem/C",
    "problemId": "2150544",
    "problem_idx": "C",
    "shortId": "1857C",
    "contest_number": "1857",
    "problem_submissions": {
        "G": [
            217667474,
            217665550,
            217689340,
            217662818,
            217685310,
            217676468,
            217687922,
            217701057,
            217700197,
            217807896,
            217807827,
            217712091,
            217684113,
            217720675,
            217807627,
            217677400,
            217731532,
            217711676,
            217719652,
            217714022,
            217712604,
            217718357,
            217710888
        ],
        "F": [
            217659021,
            217648989,
            217664891,
            217627744,
            217669247,
            217691937,
            217689514,
            217664113,
            217674769,
            217680535,
            217666261,
            217699208,
            217671748,
            217807538,
            217701131,
            217674808,
            217679890,
            217683947,
            217696220,
            217689116,
            217681500,
            217688375
        ],
        "B": [
            217642867,
            217642809,
            217629703,
            217685667,
            217635907,
            217630271,
            217642640,
            217631148,
            217634501,
            217636716,
            217631884,
            217632923,
            217807034,
            217775927,
            217633962,
            217640699,
            217644829,
            217637634,
            217632935,
            217633927,
            217650168,
            217644229
        ],
        "D": [
            217638870,
            217638947,
            217636496,
            217634474,
            217647504,
            217644974,
            217647862,
            217645462,
            217646166,
            217647061,
            217646308,
            217648033,
            217807098,
            217775952,
            217684716,
            217643681,
            217658546,
            217653658,
            217651018,
            217652036,
            217655292,
            217662419
        ],
        "E": [
            217634664,
            217632006,
            217641596,
            217642974,
            217661622,
            217655519,
            217656154,
            217657341,
            217663115,
            217656176,
            217655704,
            217660327,
            217807112,
            217775966,
            217649059,
            217656810,
            217665253,
            217663579,
            217661514,
            217671790,
            217665209,
            217669853
        ],
        "C": [
            217623043,
            217660653,
            217633113,
            217671603,
            217641405,
            217641348,
            217633280,
            217640705,
            217639467,
            217642154,
            217639690,
            217640983,
            217807070,
            217775937,
            217639411,
            217632787,
            217649913,
            217647923,
            217645015,
            217643972,
            217637879,
            217653046
        ],
        "A": [
            217621356,
            217622367,
            217617259,
            217636401,
            217628184,
            217620735,
            217618278,
            217621503,
            217622297,
            217628772,
            217620627,
            217617547,
            217806999,
            217775914,
            217772364,
            217772351,
            217620412,
            217618442,
            217617205,
            217621216,
            217619220,
            217624745,
            217618215,
            217619189
        ]
    },
    "name": "C. Assembly via Minimums",
    "statement": "Sasha has an array a of n integers. He got bored and for all i, j (i <\r\nj), he wrote down the minimum value of a_i and a_j. He obtained a new\r\narray b of size\r\nfrac{n\r\ncdot (n-1)}{2}.For example, if a= [2,3,5,1], he would write [\r\nmin(2, 3),\r\nmin(2, 5),\r\nmin(2, 1),\r\nmin(3, 5),\r\nmin(3, 1), min(5, 1)] = [2, 2, 1, 3, 1, 1].Then, he randomly all the\r\nelements of the array b.Unfortunately, he forgot the array a, and your\r\ntask is to restore any possible array a from which the array b could\r\nhave been obtained..\r\n",
    "solutions": [
        "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<numeric>\n#include<cmath>\n#include<fstream>\n#include<random>\n#include<set>\n#include<unordered_set>\n#include<string>\n#include<map>\n#include<unordered_map>\n#include<queue>\n#include<stack>\n#include<fstream>\n#include<time.h>\n\nusing namespace std;\n\n#define all(a) a.begin(), a.end()\n#define Max(a) *max_element(all(a))\n#define Min(a) *min_element(all(a))\n\nusing ll = long long;\nusing ld = long double;\n\nvoid solve() {\n    int n;\n    cin >> n;\n    int s = n * (n - 1) / 2;\n    vector<int> a(s);\n    for (int i = 0; i < s; ++i) {\n        cin >> a[i];\n    }\n    sort(a.begin(), a.end());\n    vector<int> b(n);\n    int p = 0;\n    for (int i = n - 1; i > 0; --i) {\n        b[n - 1 - i] = a[p];\n        p += i;\n    }\n    b[n - 1] = 1000000000;\n    for (int i = 0; i < n; ++i) cout << b[i] << ' ';\n    cout << endl;\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cout.precision(40);\n\n    int t = 1;\n    cin >> t;\n    while (t--) {\n        solve();\n    }\n\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Assembly via Minimums.json",
    "editorial_link": "https://codeforces.com//blog/entry/119134",
    "editorial": "Suppose we have an array that we want to construct, with elements . To\r\nsimplify the process, let\u00e2\u0080\u0099s assume that the elements of are sorted in\r\nnon-decreasing order, meaning .Let\u00e2\u0080\u0099s start with . Since the elements of\r\nare sorted, the pairs will have as the smallest element in each pair.\r\nTherefore, the number of occurrences of in array will be .Moving on to ,\r\nwe already know that appears times in . Since the elements of are\r\nsorted, all pairs involving will have as the second smallest element.\r\nThis means will appear times in array .We continue this process for each\r\nelement in . The number of occurrences of in array will be .We can\u00e2\u0080\u0099t\r\ndetermine the exact value of , because it won\u00e2\u0080\u0099t be written to array b.\r\nTherefore, for we can choose any number in the range . In case there are\r\nmultiple elements in array that satisfy the condition for a particular ,\r\nwe choose the smallest . This greedy approach works, because we are\r\nconstructing in non-decreasing order.The complexity is .\r\n"
}