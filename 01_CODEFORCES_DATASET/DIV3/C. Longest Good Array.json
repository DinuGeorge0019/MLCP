{
    "link": "https://codeforces.com//contest/2008/problem/C",
    "problemId": "2850008",
    "problem_idx": "C",
    "shortId": "2008C",
    "contest_number": "2008",
    "problem_submissions": {
        "H": [
            279136956,
            279175231,
            279161763,
            279179363,
            279181586,
            279168976,
            279216022,
            279614299,
            279182476,
            279209636,
            279208468,
            279207341,
            279210332,
            279350027,
            279217913,
            279220559,
            279216550,
            279220895,
            279220924,
            279302743
        ],
        "G": [
            279119447,
            279152222,
            279151084,
            279131568,
            279192199,
            279163482,
            279207144,
            279160784,
            279362880,
            279111562,
            279178333,
            279161657,
            279296750,
            279200995,
            279191409,
            279192959,
            279209224,
            279173816,
            279190595,
            279189666,
            279155886,
            279187798
        ],
        "F": [
            279104606,
            279131689,
            279118881,
            279127227,
            279115943,
            279103916,
            279131962,
            279356689,
            279077044,
            279134534,
            279099699,
            279292527,
            279106499,
            279150166,
            279167659,
            279130886,
            279186290,
            279121299,
            279117301,
            279134844
        ],
        "E": [
            279097264,
            279123319,
            279112502,
            279113482,
            279140821,
            279152927,
            279147312,
            279181553,
            279142676,
            279163125,
            279188714,
            279161254,
            279138336,
            279154142,
            279156092,
            279140491,
            279154770,
            279110096,
            279153681,
            279116556
        ],
        "D": [
            279079188,
            279103941,
            279108267,
            279089266,
            279105270,
            279092186,
            279119277,
            279128075,
            279092080,
            279120640,
            279166364,
            279126815,
            279110851,
            279134432,
            279119823,
            279121959,
            279088289,
            279095604,
            279098547
        ],
        "C": [
            279075309,
            279090563,
            279107974,
            279084125,
            279095019,
            279080293,
            279095460,
            279192216,
            279081252,
            279108974,
            279132485,
            279093671,
            279089579,
            279098258,
            279105761,
            279109828,
            279083132,
            279080197,
            279089704
        ],
        "B": [
            279070569,
            279078207,
            279107778,
            279079153,
            279085265,
            279120271,
            279088210,
            279097026,
            279076070,
            279110876,
            279124102,
            279123495,
            279082667,
            279084060,
            279083489,
            279098074,
            279099366,
            279076888,
            279076970,
            279080147
        ],
        "A": [
            279068125,
            279068165,
            279106509,
            279068333,
            279073493,
            279112154,
            279077178,
            279083226,
            279068010,
            279081658,
            279079540,
            279073175,
            279071802,
            279068979,
            279070906,
            279069965,
            279068711,
            279069909,
            279068403
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/133509",
    "editorial": "We can solve this problem greedily. Letâs choose the first element equal\r\nto . Then, the second element should be . The third , and so on. In\r\ngeneral, the th element is equal to .Proof of this solution:Assume that\r\narray is the array made by our algorithm and is the array with a better\r\nanswer. This means that . By the construction of , there exists an\r\ninteger such that for all , and , because we choose as the smallest\r\npossible element. WLOG assume that . Then . So, we can append to the\r\narray , which leads to a contradiction.Now, the task is to find the\r\nbiggest such that . In fact, it can be found by binary search, the\r\nformula of discriminant, or just by brute force.\r\n",
    "name": "C. Longest Good Array",
    "statement": "Today, Sakurako was studying arrays. An array a of length n is\r\nconsidered good if and only if: the array a is increasing, meaning\r\na_{i - 1} < a_i for all 2\r\nle i\r\nle n; the differences between adjacent elements are increasing, meaning\r\na_i - a_{i-1} < a_{i+1} - a_i for all 2\r\nle i < n. Sakurako has come up with boundaries l and r and wants to\r\nconstruct a good array of maximum length, where l\r\nle a_i\r\nle r for all a_i.Help Sakurako find the maximum length of a good array\r\nfor the given l and r.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std; namespace std { template <int D, typename T>struct Vec : public vector<Vec<D - 1, T>> {    static_assert(D >= 1);    template <typename... Args>    Vec(int n = 0, Args... args) : vector<Vec<D - 1, T>>(n, Vec<D - 1, T>(args...)) {}}; template <typename T>struct Vec<1, T> : public vector<T> {    Vec(int n = 0, T val = T()) : std::vector<T>(n, val) {}}; template <class Fun>class y_combinator_result {    Fun fun_;    public:    template <class T>    explicit y_combinator_result(T &&fun) : fun_(std::forward<T>(fun)) {}     template <class... Args>    decltype(auto) operator()(Args &&...args) {        return fun_(std::ref(*this), std::forward<Args>(args)...);    }}; template <class Fun>decltype(auto) y_combinator(Fun &&fun) {    return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));} }  // namespace std int32_t main() {    ios_base::sync_with_stdio(0);    cin.tie(0);     int t;    cin >> t;    while (t--) {        int l, r;        cin >> l >> r;        int n = r - l;        int x = sqrt(n * 2);        while (x * (x - 1) / 2 <= n) x++;        while (x * (x - 1) / 2 > n) x--;        cout << x << '\\n';    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Longest Good Array.json",
    "hint": []
}