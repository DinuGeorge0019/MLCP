{
    "link": "https://codeforces.com//contest/1744/problem/D",
    "problemId": "1588809",
    "problem_idx": "D",
    "shortId": "1744D",
    "contest_number": "1744",
    "problem_submissions": {
        "F": [
            176553227,
            176553544,
            176566357,
            176560159,
            176546102,
            176578517,
            176584245,
            176547600,
            176565814,
            176583243,
            176570293,
            176568891,
            176580658,
            176549125,
            176552417
        ],
        "E2": [
            176537039,
            176543155,
            176544098,
            176552866,
            176557487,
            176561438,
            176571338,
            176588976,
            176584430,
            176552304,
            176570770,
            176580914,
            176566759,
            176538612,
            176549104,
            176542275,
            176597567,
            176547159
        ],
        "E1": [
            176523424,
            176527685,
            176528090,
            176524133,
            176549768,
            176542439,
            176540904,
            176551294,
            176537989,
            176588085,
            176549982,
            176562357,
            176580820,
            176565848,
            176529066,
            176530377,
            176532213,
            176534352,
            176532004,
            176541146
        ],
        "D": [
            176517006,
            176523243,
            176521839,
            176520437,
            176527121,
            176527329,
            176532848,
            176530724,
            176509817,
            176532455,
            176530899,
            176528083,
            176525625,
            176540526,
            176519966,
            176526382,
            176517877,
            176524396,
            176521192,
            176681646,
            176520869
        ],
        "C": [
            176513410,
            176510113,
            176517214,
            176516278,
            176522404,
            176518415,
            176520721,
            176522857,
            176528070,
            176508309,
            176517716,
            176518546,
            176530395,
            176509852,
            176512457,
            176513429,
            176518278,
            176517008,
            176516387
        ],
        "B": [
            176508945,
            176505988,
            176509682,
            176510843,
            176515767,
            176510929,
            176512338,
            176516029,
            176510777,
            176510381,
            176514031,
            176513353,
            176516140,
            176505686,
            176508808,
            176509484,
            176509527,
            176511738,
            176510683
        ],
        "A": [
            176504550,
            176503461,
            176503689,
            176506263,
            176508578,
            176504919,
            176506102,
            176511212,
            176505675,
            176504917,
            176508718,
            176507229,
            176505489,
            176503181,
            176503369,
            176503975,
            176503284,
            176505909,
            176504558
        ]
    },
    "name": "D. Divisibility by 2 n",
    "statement": "You are given an array of positive integers a_1, a_2,\r\nldots, a_n.Make the product of all the numbers in the array (that is,\r\na_1\r\ncdot a_2\r\ncdot\r\nldots\r\ncdot a_n) divisible by 2^n.You can perform the following operation as\r\nmany times as you like: select an arbitrary index i (1\r\nleq i\r\nleq n) and replace the value a_i with a_i=a_i\r\ncdot i. You cannot apply the operation repeatedly to a single index. In\r\nother words, all selected values of i must be different.Find the\r\nsmallest number of operations you need to perform to make the product of\r\nall the elements in the array divisible by 2^n. Note that such a set of\r\noperations does not always exist.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nint t,n,cnt,s,ans;\nint a[200007];\nint br[200007];\n\nint main(){\n\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n\n    cin>>t;\n    for(int i=1;i<=t;i++){\n        cin>>n;\n        for(int f=1;f<=n;f++)br[f]=0;\n        cnt=ans=0;\n\n        for(int f=1;f<=n;f++){\n            cin>>a[f];\n            while(a[f]%2==0){\n                a[f]/=2; cnt++;\n            }\n            s=f;\n            while(s%2==0){\n                s/=2; br[f]++;\n            }\n        }\n\n        sort(br+1,br+n+1);\n        for(int f=n;f>=1;f--){\n            if(cnt>=n)break;\n            cnt+=br[f]; ans++;\n        }\n\n        if(cnt>=n)cout<<ans<<\"\\n\";\n        else cout<<\"-1\\n\";\n    }\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Divisibility by 2 n.json",
    "editorial_link": "https://codeforces.com//blog/entry/108101",
    "editorial": "Letâs notice that if we multiply the numbers , then the power of two of\r\nthe product is equal to the sum of the powers of two in each of the\r\nnumbers.Letâs calculate the initial sum of the powers of twos in the\r\nproduct. This can be done as follows: letâs take the element and divide\r\nit by as long as we can, while remembering to increase our counter by\r\nthe number of occurrences of a power of two.Now letâs move on to\r\noperations and note that choosing the index will increase the degree of\r\noccurrence of two by a fixed number (that is, it does not matter when to\r\napply this operation). Choosing an index will increment the counter by a\r\nnumber such that is divisible by but not by you can find this , again ,\r\nby dividing by while we can.Since we want to minimize the number of\r\noperations used, at each moment of time we will try to use an index that\r\nincreases the counter by the largest number. To do this, it is enough to\r\nsort the indices by this index of increase and take them greedily from\r\nthe largest increase to the smallest.We get the solution in .\r\n",
    "hint": []
}