{
    "link": "https://codeforces.com//contest/1311/problem/C",
    "problemId": "547478",
    "problem_idx": "C",
    "shortId": "1311C",
    "contest_number": "1311",
    "problem_submissions": {
        "E": [
            71808916,
            71808599,
            93123368,
            71844658,
            71866557,
            71838628,
            71799873
        ],
        "F": [
            71796868,
            71806217,
            71793472,
            71796876,
            71799840,
            71794628,
            71797683,
            71798778,
            71801869,
            71798514,
            71800897,
            71799483,
            71790429,
            71801970,
            71792412,
            71808363,
            71786195,
            71809262,
            71804250,
            71795148,
            71802574
        ],
        "D": [
            71789526,
            71792384,
            71787369,
            71788637,
            71807660,
            71784383,
            71788643,
            71785457,
            71791043,
            71788249,
            71788689,
            71786913,
            71784594,
            71790030,
            71782423,
            71790272,
            71801279,
            71813581,
            71789490,
            71790803,
            71785471,
            71796175
        ],
        "C": [
            71780601,
            71787244,
            71778720,
            71777956,
            71779055,
            71778652,
            71779823,
            71780370,
            71778687,
            71783497,
            71778399,
            71780701,
            71778150,
            71779429,
            71783732,
            71786917,
            71780561,
            71786514,
            71779237,
            71783097
        ],
        "B": [
            71777211,
            71782922,
            71775982,
            71774247,
            71774556,
            71775523,
            71776728,
            71774631,
            71774172,
            71777830,
            71773973,
            71777033,
            71796675,
            71772169,
            71780446,
            71783294,
            71775698,
            71782264,
            71797768,
            71775685
        ],
        "A": [
            71772411,
            71773163,
            71770634,
            71770076,
            71770517,
            71771510,
            71769980,
            71769842,
            71770112,
            71771016,
            71769997,
            71771281,
            71773789,
            71770312,
            71772059,
            71777686,
            71771553,
            71771635,
            71774048,
            71770666
        ]
    },
    "name": "C. Perform the Combo",
    "statement": "You want to perform the combo on your opponent in one popular fighting\r\ngame. The combo is the string s consisting of n lowercase Latin letters.\r\nTo perform the combo, you have to press all buttons in the order they\r\nappear in s. I.e. if s=\"\" then you have to press ”, then ”, ” and ”\r\nagain.You know that you will spend m wrong tries to perform the combo\r\nand during the i-th try you will make a mistake right after p_i-th\r\nbutton (1\r\nle p_i < n) (i.e. you will press first p_i buttons right and start\r\nperforming the combo from the beginning). It is guaranteed that during\r\nthe m+1-th try you press all buttons right and finally perform the\r\ncombo.I.e. if s=\"\", m=2 and p = [1, 3] then the sequence of pressed\r\nbuttons will be ” ( you’re making a mistake and start performing the\r\ncombo from the beginning), ”, ”, ”, ( you’re making a mistake and start\r\nperforming the combo from the beginning), ” (), ”, ”, ”.Your task is to\r\ncalculate for each button (letter) the number of times you’ll press\r\nit.You have to answer t independent test cases.\r\n",
    "solutions": [
        "#include <cstdio>\nchar s[200005];\nlong long d[200005];\nlong long ans[26];\nint main()\n{\n    int t,n,m,p;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        scanf(\"%d%d\",&n,&m);\n        scanf(\"%s\",s+1);\n        for(int i=0;i<m;i++)\n        {\n            scanf(\"%d\",&p);\n            d[1]++;\n            d[p+1]--;\n        }\n        for(int i=1;i<=n;i++)\n            d[i]+=d[i-1];\n        for(int i=1;i<=n;i++)\n            ans[s[i]-'a']+=d[i];\n        for(int i=1;i<=n;i++)\n            ans[s[i]-'a']++;\n        for(int i=0;i<26;i++)\n            if(i!=25)\n                printf(\"%lld \",ans[i]);\n            else printf(\"%lld\\n\",ans[i]);\n        for(int i=1;i<=n+1;i++)\n            d[i]=0;\n        for(int i=0;i<26;i++)\n            ans[i]=0;\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Perform the Combo.json",
    "editorial_link": "https://codeforces.com//blog/entry/74224",
    "editorial": "We can consider all tries independently. During the -th try we press\r\nfirst buttons, so it makes on the prefix of length . So the -th\r\ncharacter of the string will be pressed (the number of plus ) times. We\r\ncan use sorting and some kind of binary search to find this number for\r\neach character but we also can build suffix sums to find all required\r\nnumbers. We can build suffix sums using the following code:vector<int>\r\ncnt(n);for (int i = 0; i < m; ++i) { ++cnt[p[i]];}for (int i = n - 1;\r\ni > 0; âi) { cnt[i - 1] += cnt[i];}So as you can see, the -th element of\r\nwill add in each position from to . So we got what we need. After that\r\nwe can calculate the answer for each character in the following\r\nway:vector<int> ans(26);for (int i = 0; i < n; ++i) { ans[s[i] - âaâ] +=\r\ncnt[i] + 1;}Time complexity: or .\r\n",
    "hint": []
}