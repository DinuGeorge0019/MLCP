{
    "link": "https://codeforces.com//contest/1992/problem/D",
    "problemId": "2748266",
    "problem_idx": "D",
    "shortId": "1992D",
    "contest_number": "1992",
    "problem_submissions": {
        "G": [
            270004158,
            270000712,
            270020186,
            270006424,
            270010291,
            270026135,
            270032635,
            270035721,
            270033149,
            270036718,
            270041253,
            270830404,
            270035615,
            270034895,
            270041739,
            270045150,
            269953500,
            270015289,
            269950486
        ],
        "F": [
            269972577,
            270018896,
            269993465,
            269987867,
            269991929,
            270003873,
            269994703,
            270009199,
            270016540,
            270005935,
            270127981,
            270013136,
            270020087,
            270019936,
            270018379,
            269963694,
            270043761,
            270005597,
            269985278
        ],
        "D": [
            269954705,
            269930808,
            269933166,
            269942867,
            269936957,
            269946925,
            269942518,
            269941050,
            269944797,
            269962503,
            269960047,
            269956728,
            269964646,
            270000105,
            269992943,
            269953387,
            270024549,
            269937412
        ],
        "E": [
            269950946,
            269964630,
            269972651,
            269967159,
            269979484,
            269986612,
            269986054,
            269986867,
            269983914,
            269989311,
            269990694,
            269983845,
            269996015,
            269971543,
            269983529,
            270000206,
            270015715,
            269961487
        ],
        "C": [
            269920653,
            269918264,
            269915470,
            269928750,
            269924685,
            269919119,
            269916880,
            269924258,
            269918590,
            269936939,
            269921649,
            269929196,
            269923650,
            269913996,
            269998285,
            269933575,
            270027835,
            269914944
        ],
        "B": [
            269901952,
            269907735,
            269910847,
            269907929,
            269906378,
            269906593,
            269906048,
            269911414,
            269907898,
            269912483,
            269907733,
            269916021,
            269911764,
            269906789,
            270003910,
            269961585,
            270031623,
            269906408
        ],
        "A": [
            269898839,
            269900621,
            269899306,
            269900117,
            269900634,
            269898982,
            269898946,
            269899343,
            269899743,
            269900745,
            269900678,
            269900839,
            269903685,
            269898938,
            270007186,
            269957657,
            270033185,
            269900065
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131461",
    "editorial": "TutorialIn this problem, there are two main solutions: dynamic\r\nprogramming and greedy algorithm.Dynamic programming solution: the\r\nminimum number of meters that need to be swum to reach the -th cell. The\r\nbase case of the dynamic programming is . Then, the update rule is:\r\nSolution complexity: .Greedy algorithm solution: If we can jump, we want\r\nto jump to the shore if possible. If we can\u00e2\u0080\u0099t, we want to jump to any\r\nlog ahead to jump from it later. If we can\u00e2\u0080\u0099t, we jump as far as possible\r\nto avoid crocodiles and swim as little as possible.Solution complexity:\r\n.\r\n",
    "name": "D. Test of Love",
    "statement": "ErnKor is ready to do anything for Julen, even to swim through\r\ncrocodile-infested swamps. We decided to test this love. ErnKor will\r\nhave to swim across a river with a width of 1 meter and a length of n\r\nmeters.The river is very cold. Therefore, (that is, throughout the\r\nentire swim from 0 to n+1) ErnKor can swim in the water for no more than\r\nk meters. For the sake of humanity, we have added not only crocodiles to\r\nthe river, but also logs on which he can jump. Our test is as\r\nfollows:Initially, ErnKor is on the left bank and needs to reach the\r\nright bank. They are located at the 0 and n+1 meters respectively. The\r\nriver can be represented as n , each with a length of 1 meter. Each\r\ncontains either a log , a crocodile , or just water . ErnKor can move as\r\nfollows: If he is on the surface (i.e., on the bank or on a log), he can\r\njump forward for no more than m (1\r\nle m\r\nle 10) meters (he can jump on the bank, on a log, or in the water). If\r\nhe is in the water, he can only swim to the next river (or to the bank\r\nif he is at the n-th meter). ErnKor cannot land in a with a crocodile in\r\nany way. Determine if ErnKor can reach the right bank.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\u00a0using namespace std;\u00a0#define int long long#define inf 0x3F3F3F3F3F3F3F3F\u00a0const int MXN = 2e5 + 5;\u00a0mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\u00a0void _(){\tint n, m, k;\tcin >> n >> m >> k;\tvector<int> dp(n + 2, inf);\tstring s;\tcin >> s;\ts = \"L\" + s + \"L\";\tdp[0] = 0;\tfor (int i = 1; i <= n + 1; i++)\t{\t\tif (s[i] == 'C') dp[i] = inf;\t\telse \t\t{\t\t\tif (s[i - 1] == 'W') dp[i] = dp[i - 1] + (s[i] == 'W');\t\t\tfor (int j = i - 1; j >= max(0LL, i - m); j--)\t\t\t{\t\t\t\tif (s[j] == 'L') dp[i] = min(dp[i], dp[j] + (s[i] == 'W'));\t\t\t}\t\t}\t}\tcout << (dp[n + 1] <= k ? \"YES\\n\" : \"NO\\n\");}\u00a0signed main(){\tios_base::sync_with_stdio(0);\tcin.tie(0);\tint t;\tcin >> t;\twhile (t--)\t{\t\t_();\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Test of Love.json"
}