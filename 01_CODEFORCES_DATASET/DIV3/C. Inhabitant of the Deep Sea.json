{
    "link": "https://codeforces.com//contest/1955/problem/C",
    "problemId": "2579455",
    "problem_idx": "C",
    "shortId": "1955C",
    "contest_number": "1955",
    "problem_submissions": {
        "G": [
            255700432,
            255685371,
            255700202,
            255694984,
            255713116,
            255710945,
            255815483,
            255720205,
            255712913,
            255719635,
            255740112,
            255735779,
            255734648,
            255728080,
            255811582,
            255740083,
            255712654,
            255816753,
            255730101,
            255733676,
            255729429,
            255749883
        ],
        "F": [
            255690836,
            255730118,
            255712738,
            255723348,
            255696813,
            255721239,
            255711672,
            255703746,
            255701885,
            255718873,
            255724659,
            255733290,
            255718852,
            255723723,
            255725364,
            255717728,
            255710197,
            255736254,
            255712457
        ],
        "E": [
            255679602,
            255678850,
            255660817,
            255677164,
            255677495,
            255695083,
            255692381,
            255695668,
            255688219,
            255691378,
            255687451,
            255688784,
            255697004,
            255707937,
            255738844,
            255740248,
            255706468,
            255704684,
            255707886
        ],
        "D": [
            255663451,
            255667353,
            255685203,
            255671122,
            255669296,
            255675907,
            255680787,
            255676580,
            255675808,
            255675309,
            255677471,
            255667366,
            255685779,
            255681400,
            255682629,
            255685354,
            255677101,
            255696157,
            255690888
        ],
        "C": [
            255657238,
            255660807,
            255678901,
            255663623,
            255662171,
            255657175,
            255664052,
            255666604,
            255666050,
            255656375,
            255666921,
            255652774,
            255678671,
            255660970,
            255664282,
            255661069,
            255666029,
            255658918,
            255678375
        ],
        "B": [
            255642714,
            255647145,
            255662403,
            255652531,
            255651120,
            255650530,
            255651554,
            255653536,
            255651004,
            255648291,
            255648566,
            255643999,
            255648718,
            255649499,
            255650291,
            255653938,
            255647027,
            255650471,
            255659271
        ],
        "A": [
            255635163,
            255633427,
            255637795,
            255633451,
            255634276,
            255634783,
            255634704,
            255650196,
            255634135,
            255635088,
            255633579,
            255633389,
            255637393,
            255636215,
            255633812,
            255642645,
            255634779,
            255634460,
            255639283
        ],
        "H": [
            255690981,
            255842703,
            255840768
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/128243",
    "editorial": "To solve the problem, letâs model the behavior of the Kraken. Suppose\r\ninitially there are two or more ships in the sea, we will consider the\r\nfirst and last ship, denote their durabilities as and , and also let ,\r\ninitially setting and .After two attacks, the durability of both ships\r\nwill decrease by . If , then we need to subtract from the durabilities\r\nof both ships, and also reduce the remaining attacks of the Kraken by .\r\nIf , then the Kraken will inflict damage to the -th ship. In this case,\r\nif is odd, the -th ship will receive damage, otherwise damage.After\r\nthese attacks, some ships may have sunk. If , we increase by , if , we\r\ndecrease by , and move on to considering the next pair of ships that\r\nwill be under attack by the Kraken. If at some point , it means that\r\nthere is only one ship left in the sea, and the Kraken can sink it if .A\r\ndeque is perfect for this problem, allowing us to not think about and\r\nand simply look at the first and last elements in the queue. At each\r\nstep of considering a pair of ships, either the Krakenâs attacks end, or\r\nat least one ship sinks. The final complexity of the solution is .\r\n",
    "name": "C. Inhabitant of the Deep Sea",
    "statement": "n ships set out to explore the depths of the ocean. The ships are\r\nnumbered from 1 to n and follow each other in ascending order; the i-th\r\nship has a durability of a_i.The Kraken attacked the ships k times in a\r\nspecific order. First, it attacks the first of the ships, then the last,\r\nthen the first again, and so on.Each attack by the Kraken reduces the\r\ndurability of the ship by 1. When the durability of the ship drops to 0,\r\nit sinks and is no longer subjected to attacks (thus the ship ceases to\r\nbe the first or last, and the Kraken only attacks the ships that have\r\nnot yet sunk). If all the ships have sunk, the Kraken has nothing to\r\nattack and it swims away.For example, if n=4, k=5, and a=[1, 2, 4, 3],\r\nthe following will happen: The Kraken attacks the first ship, its\r\ndurability becomes zero and now a = [2, 4, 3]; The Kraken attacks the\r\nlast ship, now a = [2, 4, 2]; The Kraken attacks the first ship, now a =\r\n[1, 4, 2]; The Kraken attacks the last ship, now a = [1, 4, 1]; The\r\nKraken attacks the first ship, its durability becomes zero and now a =\r\n[4, 1]. How many ships were sunk after the Kraken’s attack?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define int long longusing namespace std;class Segment_Tree{public:\tstruct tree{\t\tint l,r,sum,maxx,minx,flag;\t}tr[800005];\tvoid pushup(int u){\t\ttr[u].sum=tr[u<<1].sum+tr[u<<1|1].sum;\t\ttr[u].maxx=max(tr[u<<1].maxx,tr[u<<1|1].maxx);\t\ttr[u].minx=min(tr[u<<1].minx,tr[u<<1|1].minx);\t}\tvoid pushdown(int u){\t\tif(tr[u].flag){\t\t\ttr[u<<1].sum+=tr[u].flag*(tr[u<<1].r-tr[u<<1].l+1),tr[u<<1].maxx+=tr[u].flag,tr[u<<1].minx+=tr[u].flag,tr[u<<1].flag+=tr[u].flag;\t\t\ttr[u<<1|1].sum+=tr[u].flag*(tr[u<<1|1].r-tr[u<<1|1].l+1),tr[u<<1|1].maxx+=tr[u].flag,tr[u<<1|1].minx+=tr[u].flag,tr[u<<1|1].flag+=tr[u].flag;\t\t\ttr[u].flag=0;\t\t}\t}\tvoid build(int u,int l,int r){\t\tif(l==r){\t\t\ttr[u]={l,r,0,0,0,0};\t\t\treturn;\t\t}\t\ttr[u]={l,r};\t\tint mid=l+r>>1;\t\tbuild(u<<1,l,mid),build(u<<1|1,mid+1,r);\t\tpushup(u);\t}\tvoid change(int u,int l,int r,int k){\t\tif(l>r)return;\t\tif(tr[u].l>=l&&tr[u].r<=r){\t\t\ttr[u].sum+=k*(tr[u].r-tr[u].l+1);\t\t\ttr[u].maxx+=k,tr[u].minx+=k;\t\t\ttr[u].flag+=k;\t\t\treturn;\t\t}\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1;\t\tif(l<=mid)change(u<<1,l,r,k);\t\tif(r>mid)change(u<<1|1,l,r,k);\t\tpushup(u);\t}\tint query_sum(int u,int l,int r){\t\tif(tr[u].l>=l&&tr[u].r<=r)return tr[u].sum;\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1,res=0;\t\tif(l<=mid)res+=query_sum(u<<1,l,r);\t\tif(r>mid)res+=query_sum(u<<1|1,l,r);\t\treturn res;\t}\tint query_max(int u,int l,int r){\t\tif(tr[u].l>=l&&tr[u].r<=r)return tr[u].maxx;\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1,res=-1e18;\t\tif(l<=mid)res=max(res,query_max(u<<1,l,r));\t\tif(r>mid)res=max(res,query_max(u<<1|1,l,r));\t\treturn res;\t}\tint query_min(int u,int l,int r){\t\tif(tr[u].l>=l&&tr[u].r<=r)return tr[u].minx;;\t\tpushdown(u);\t\tint mid=tr[u].l+tr[u].r>>1,res=1e18;\t\tif(l<=mid)res=min(res,query_min(u<<1,l,r));\t\tif(r>mid)res=min(res,query_min(u<<1|1,l,r));\t\treturn res;\t}}sgt;int t,n,k,a[200005];signed main(){\tcin>>t;\twhile(t--){\t\tcin>>n>>k;\t\tfor(int i=1;i<=n;i++)cin>>a[i];\t\tint l=1,r=n,cnt=0;\t\twhile(k>0&&l<r){\t\t\tint aa=min(a[l],a[r]);\t\t\tif(a[l]==aa&&2*aa==k+1)cnt++,k=0;\t\t\telse if(2*aa>k)k=0;\t\t\telse{\t\t\t\tif(a[l]==aa&&a[r]==aa)cnt+=2,l++,r--;\t\t\t\telse if(a[l]==aa)cnt++,l++,a[r]-=aa;\t\t\t\telse cnt++,r--,a[l]-=aa;\t\t\t\tk-=2*aa;\t\t\t}\t\t}\t\tif(l==r&&k>=0){\t\t\tif(a[l]<=k)cnt++;\t\t}\t\tcout<<cnt<<\"\\n\";\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Inhabitant of the Deep Sea.json",
    "hint": []
}