{
    "link": "https://codeforces.com//contest/2050/problem/B",
    "problemId": "3070027",
    "problem_idx": "B",
    "shortId": "2050B",
    "contest_number": "2050",
    "problem_submissions": {
        "G": [
            295020039,
            295012969,
            295024810,
            295026123,
            295231485,
            295230757,
            295027068,
            295011107,
            295020886,
            295043604,
            295023074,
            295040334,
            295040501,
            295044199,
            295042105,
            295035503,
            295046172,
            295069369,
            295055294,
            295058073
        ],
        "D": [
            295023542,
            295007735,
            295022150,
            295015640,
            295022096,
            295027211,
            295005995,
            295007532,
            295010040,
            295008211,
            295013052,
            295007075,
            295014360,
            295012052,
            295012580,
            295012327,
            295010790
        ],
        "F": [
            295009915,
            295016605,
            295015909,
            295021788,
            295023146,
            295035635,
            295031460,
            295012371,
            295027547,
            295033629,
            295028476,
            295029305,
            295012244,
            295027355,
            299441454,
            295024166,
            295024859,
            295021290
        ],
        "E": [
            295006159,
            295012248,
            295006655,
            295358340,
            294991246,
            295015587,
            295010009,
            295016041,
            295017979,
            295016907,
            295021107,
            295017866,
            295008404,
            295002349,
            295018392,
            295017130,
            295019301,
            295028396
        ],
        "C": [
            295000545,
            295002243,
            294997256,
            295011626,
            295006375,
            295000328,
            295001562,
            295020525,
            295004225,
            295001544,
            295003470,
            294999298,
            295008085,
            295003035,
            295005025,
            295008622,
            295001249
        ],
        "B": [
            294992701,
            294994611,
            294990329,
            295007113,
            294997489,
            294992969,
            294992993,
            295002206,
            294997468,
            294994758,
            294991989,
            294994433,
            294994702,
            294998118,
            294998487,
            295000433,
            294997971
        ],
        "A": [
            294987570,
            294988254,
            294987535,
            294987637,
            294990076,
            294987812,
            294987751,
            294999699,
            294989420,
            294988260,
            294987843,
            294987612,
            294989111,
            294989647,
            294989965,
            294992026,
            294994133
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137018",
    "editorial": "The main idea of this problem is that these operations only change\r\nelements on the positions with the same parity. So, we can solve for\r\nelements on odd and even positions independently.Let\u00e2\u0080\u0099s make two arrays\r\nand the first one will consist of all the elements on the odd positions,\r\nand the second one will consist of all the elements on the even\r\npositions. Now we can rewrite given operations as: pick any array or ,\r\nafter that pick any two adjacent elements and subtract from one of these\r\nelements and add to another. In order to make all the elements in array\r\nequal, the sum of all elements in must be divisible by , and also the\r\nsum of all the elements in must be divisible by , where is the length of\r\narray . And also to make all the elements of the initial array equal,\r\nmust be satisfied. If all these conditions are satisfied, the answer is\r\n\"YES\", otherwise \"NO\".\r\n",
    "name": "B. Transfusion",
    "statement": "You are given an array a of length n. In one operation, you can pick an\r\nindex i from 2 to n-1 inclusive, and do one of the following actions:\r\nDecrease a_{i-1} by 1, then increase a_{i+1} by 1. Decrease a_{i+1} by\r\n1, then increase a_{i-1} by 1. After each operation, all the values must\r\nbe non-negative. Can you make all the elements equal after any number of\r\noperations?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;\u00a0typedef long long ll;\u00a0int main(){    ios::sync_with_stdio(false);    cin.tie(0);    int t;    cin >> t;    while(t--){        int n;        cin >> n;        vector<ll> a(n);        ll total =0;        for(int i=0;i<n;i++){            cin >> a[i];            total += a[i];        }        if(total % n !=0){            cout << \"NO\\n\";            continue;        }        ll target = total /n;        ll sum_odd=0;        for(int i=0;i<n;i+=2){            sum_odd += a[i];        }        ll ceil_n_half = (n +1)/2;        if(sum_odd == ceil_n_half * target){            cout << \"YES\\n\";        }        else{            cout << \"NO\\n\";        }    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Transfusion.json"
}