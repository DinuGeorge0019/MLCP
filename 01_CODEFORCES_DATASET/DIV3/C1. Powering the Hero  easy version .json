{
    "link": "https://codeforces.com//contest/1800/problem/C1",
    "problemId": "1805844",
    "problem_idx": "C1",
    "shortId": "1800C1",
    "contest_number": "1800",
    "problem_submissions": {
        "G": [
            195662820,
            195690940,
            195777313,
            195690603,
            196524855,
            196524658,
            196522076,
            195943836
        ],
        "F": [
            195638235,
            195668644,
            195626028,
            195643554,
            195664067,
            195653332,
            195675061,
            195673007,
            195816880,
            195814809,
            195671424,
            195665257,
            195659551,
            195670175,
            195698092,
            195680883,
            195680676,
            195689427,
            195669351,
            195693466
        ],
        "E2": [
            195612538,
            195639973,
            195612785,
            195633454,
            195608323,
            195629403,
            195623425,
            195629463,
            195626230,
            195629563,
            195651082,
            195630357,
            195636943,
            195619592,
            195639486,
            195641374,
            195638209,
            195651098,
            195639224
        ],
        "E1": [
            195609573,
            195639721,
            195612247,
            195613343,
            195609699,
            195630410,
            195623568,
            195625383,
            195625931,
            195618740,
            195651326,
            195630926,
            195636711,
            195618856,
            195639041,
            195641167,
            195628893,
            195650180,
            195639842
        ],
        "D": [
            195596585,
            195625770,
            195604693,
            195600193,
            195602000,
            195612110,
            195610320,
            195609709,
            195602062,
            195607762,
            195620848,
            195616904,
            195612803,
            195606522,
            195616372,
            195614847,
            195609456,
            195614238,
            195614684
        ],
        "C1": [
            195590954,
            195626345,
            195594910,
            195589947,
            195592829,
            195604029,
            195596848,
            195599696,
            195593933,
            195600094,
            195594609,
            195604030,
            195599932,
            195600191,
            195602733,
            195597615,
            195601757,
            195596127,
            195599897
        ],
        "C2": [
            195590683,
            195596363,
            195594725,
            195589578,
            195592485,
            195603666,
            195596587,
            195600171,
            195594252,
            195601050,
            195594186,
            195603461,
            195599812,
            195600859,
            195603073,
            195597061,
            195601904,
            195595910,
            195599331
        ],
        "A": [
            195587296,
            195585153,
            195582408,
            195584101,
            195582608,
            195583278,
            195583402,
            195582928,
            195582330,
            195583356,
            195582358,
            195587162,
            195585218,
            195584435,
            195584152,
            195585315,
            195585448,
            195583944,
            195583542
        ],
        "B": [
            195584191,
            195590087,
            195587727,
            195584989,
            195586915,
            195590416,
            195592972,
            195589242,
            195592390,
            195586361,
            195594730,
            195594317,
            195594021,
            195589463,
            195590127,
            195591494,
            195591394,
            195590938
        ]
    },
    "name": "C1. Powering the Hero  easy version ",
    "statement": ".There is a deck of n cards, each of which is characterized by its\r\npower. There are two types of cards: a hero card, the power of such a\r\ncard is always equal to 0; a bonus card, the power of such a card is\r\nalways positive. You can do the following with the deck: take a card\r\nfrom the top of the deck; if this card is a bonus card, you can put it\r\nof your bonus deck or discard; if this card is a hero card, then the\r\npower of card from your bonus deck is added to his power (if it is not\r\nempty), after that the hero is added to your army, and the used bonus\r\ndiscards. Your task is to use such actions to gather an army with the\r\nmaximum possible total power.\r\n",
    "solutions": [
        "#pragma GCC optimize (\"O3\")\n#pragma GCC target (\"sse4\")\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long lo; \ntypedef pair< lo,lo > PII;\n\n#define fi first\n#define se second\n#define mp make_pair\n#define endl \"\\n\"\n#define pb push_back\n#define int long long\n#define fio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\n#define FOR for(int i=1;i<=n;i++)\n#define mid ((start+end)/2)\n#define ort ((bas+son)/2)\n\nconst lo inf = 1000000000000000000;\nconst lo KOK = 100000;\nconst lo LOG = 30;\nconst lo li = 500005;\nconst lo mod = 1000000007;\n\nint n,m,b[li],a[li],k,flag,t;\nint cev;\nstring s;\nvector<int> v;\n\ninline int in(){\n    int x;\n    scanf(\"%lld\",&x);\n    return x;\n}\n\nint32_t main(void){\n    t=in();\n    while(t--){\n        n=in();\n        FOR a[i]=in();\n        priority_queue<int> pq;\n        cev=0;\n        FOR{\n\t\t\tif(a[i])pq.push(a[i]);\n\t\t\telse{\n\t\t\t\tif(pq.size()){cev+=pq.top();pq.pop();}\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\",cev);\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C1. Powering the Hero  easy version .json",
    "editorial_link": "https://codeforces.com//blog/entry/113477",
    "editorial": "To solve it, it should be noted that despite the way the deck with\r\nbonuses works, the order in which they will be applied is not important.\r\nThen, when we meet the hero card, we just need to add to the answer the\r\nmaximum of the available bonuses.Constraints allow you to sort the\r\ncurrent array with bonus values each time and remove the maximum\r\nelement.\r\n",
    "hint": []
}