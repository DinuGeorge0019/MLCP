{
    "link": "https://codeforces.com//contest/1840/problem/G1",
    "problemId": "1953892",
    "problem_idx": "G1",
    "shortId": "1840G1",
    "contest_number": "1840",
    "problem_submissions": {
        "F": [
            208833790,
            208800411,
            208738760,
            209755935,
            209049385,
            208856014,
            209001807,
            208972286,
            208793724,
            208849975,
            208903598,
            208797579
        ],
        "G1": [
            208785771,
            208798432,
            208798357,
            208759195,
            208773439,
            208768889,
            208784002,
            208782335,
            208787497,
            208757942,
            208778755,
            208795357,
            208767231,
            208800566,
            208774728,
            208784989
        ],
        "E": [
            208753398,
            208785836,
            208748100,
            208765491,
            208750014,
            208755889,
            208765809,
            208754982,
            208762975,
            208781811,
            208772087,
            208761782,
            208769368,
            208753067,
            208766710,
            208788699,
            208769932,
            208783505
        ],
        "D": [
            208744126,
            208768462,
            208780675,
            208742981,
            208738438,
            208740573,
            208744384,
            208743731,
            208753081,
            208742587,
            208741121,
            208744633,
            208752378,
            208785200,
            208747160,
            208737487,
            208749117,
            208750811
        ],
        "C": [
            208735712,
            208748530,
            208760247,
            208732224,
            208732082,
            208735505,
            208732760,
            208736708,
            208736616,
            208732221,
            208734089,
            208735409,
            208731496,
            208735170,
            208735073,
            208732504,
            208740037,
            208734211
        ],
        "B": [
            208731964,
            208736585,
            208755855,
            208723242,
            208728019,
            208731061,
            208728033,
            208728670,
            208729598,
            208727581,
            208727427,
            208728541,
            208726241,
            208724120,
            208726831,
            208725953,
            208755806,
            208732737,
            208735050
        ],
        "A": [
            208722150,
            208725086,
            208751995,
            208724436,
            208720280,
            208721134,
            208721012,
            208722594,
            208721192,
            208720913,
            208720713,
            208722663,
            208720260,
            208738330,
            208720865,
            208721050,
            208723621,
            208721860
        ],
        "G2": [
            208799121,
            208804613,
            209755710,
            211933185,
            208984229,
            208984015,
            208982917,
            208981704,
            208903638
        ]
    },
    "name": "G1. In Search of Truth  Easy Version ",
    "statement": "You are playing a game. The circle is divided into n sectors, sectors\r\nare numbered from 1 to n in some order. You are in the adjacent room and\r\ndo not know either the number of sectors or their numbers. There is also\r\nan arrow that initially points to some sector. Initially, the host tells\r\nyou the number of the sector to which the arrow points. After that, you\r\ncan ask the host to move the arrow k sectors counterclockwise or\r\nclockwise at most 2023 times. And each time you are told the number of\r\nthe sector to which the arrow points.Your task is to determine the\r\ninteger n the number of sectors in at most 2023 queries.It is guaranteed\r\nthat 1\r\nle n\r\nle 10^6.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ull unsigned long long\n#define ll long long\n#define ls u<<1\n#define rs u<<1|1\n#define mm(x) memset(x,0,sizeof(x))\nusing namespace std;\nint read()\n{\n    int a=0;int f=0;char p=getchar();\n    while(!isdigit(p)){f|=p=='-';p=getchar();}\n    while(isdigit(p)){a=(a<<3)+(a<<1)+(p^48);p=getchar();}\n    return f?-a:a;\n}\nvoid YES(bool flag=true)\n{\n    if(flag)    puts(\"YES\");\n    else    puts(\"NO\");\n}\nconst int INF=998244353;\nconst int P=998244353;\nconst int N=1e6+5;\nint T;\nint n;\nint tot=1;\nint rnd()\n{\n\ttot++;\n\tif(tot<=1000)\treturn 1;\n\treturn 1000;\n}\nint now=1;\nint query(int x)\n{\n\t//now=(now+x-1)%5+1;\n\t//return now;\n\tcout<<\"+ \"<<x<<endl;\n\tint p=read();\n\treturn p;\n}\nmap<int ,ll >tag;\nint main()\n{\n\tn=read();\ttag[n]=1;\n\tint tot=1;\n\tint ans;\n\tint pp;\n\twhile(true)\n\t{\n\t\tint len=rnd();\ttot+=len;\tint x=query(len);\n\t\tif(tag[x])\n\t\t{\n\t\t\tans=tot-tag[x];\n\t\t\tpp=x;\n\t\t\tbreak;\n\t\t}\n\t\telse\ttag[x]=tot;\n\t}\n\tprintf(\"! %d\",ans);\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "interactive",
        "math",
        "meet-in-the-middle",
        "probabilities"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\G1. In Search of Truth  Easy Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/117060",
    "editorial": "Let be the numbers of the sectors in clockwise order, and let the arrow\r\ninitially point to the sector with number .First, letâs make queries of\r\n\"+ 1\", then we will know the numbers of consecutive sectors. If , then\r\nthe number of the first query that gives the answer is the desired .If\r\nwe did not find , this means that . Letâs save . Now we will make\r\nqueries of \"+ 1000\" until we get one of the numbers as the answer. Note\r\nthat we will need no more than queries of this type, after which it is\r\neasy to determine the number .Thus, we can determine the number in no\r\nmore than queries.\r\n",
    "hint": []
}