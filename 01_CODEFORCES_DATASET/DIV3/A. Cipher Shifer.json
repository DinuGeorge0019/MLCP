{
    "link": "https://codeforces.com//contest/1840/problem/A",
    "problemId": "1953886",
    "problem_idx": "A",
    "shortId": "1840A",
    "contest_number": "1840",
    "problem_submissions": {
        "F": [
            208833790,
            208800411,
            208738760,
            209755935,
            209049385,
            208856014,
            209001807,
            208972286,
            208793724,
            208849975,
            208903598,
            208797579
        ],
        "G1": [
            208785771,
            208798432,
            208798357,
            208759195,
            208773439,
            208768889,
            208784002,
            208782335,
            208787497,
            208757942,
            208778755,
            208795357,
            208767231,
            208800566,
            208774728,
            208784989
        ],
        "E": [
            208753398,
            208785836,
            208748100,
            208765491,
            208750014,
            208755889,
            208765809,
            208754982,
            208762975,
            208781811,
            208772087,
            208761782,
            208769368,
            208753067,
            208766710,
            208788699,
            208769932,
            208783505
        ],
        "D": [
            208744126,
            208768462,
            208780675,
            208742981,
            208738438,
            208740573,
            208744384,
            208743731,
            208753081,
            208742587,
            208741121,
            208744633,
            208752378,
            208785200,
            208747160,
            208737487,
            208749117,
            208750811
        ],
        "C": [
            208735712,
            208748530,
            208760247,
            208732224,
            208732082,
            208735505,
            208732760,
            208736708,
            208736616,
            208732221,
            208734089,
            208735409,
            208731496,
            208735170,
            208735073,
            208732504,
            208740037,
            208734211
        ],
        "B": [
            208731964,
            208736585,
            208755855,
            208723242,
            208728019,
            208731061,
            208728033,
            208728670,
            208729598,
            208727581,
            208727427,
            208728541,
            208726241,
            208724120,
            208726831,
            208725953,
            208755806,
            208732737,
            208735050
        ],
        "A": [
            208722150,
            208725086,
            208751995,
            208724436,
            208720280,
            208721134,
            208721012,
            208722594,
            208721192,
            208720913,
            208720713,
            208722663,
            208720260,
            208738330,
            208720865,
            208721050,
            208723621,
            208721860
        ],
        "G2": [
            208799121,
            208804613,
            209755710,
            211933185,
            208984229,
            208984015,
            208982917,
            208981704,
            208903638
        ]
    },
    "name": "A. Cipher Shifer",
    "statement": "There is a string a (unknown to you), consisting of lowercase Latin\r\nletters, encrypted according to the following rule into string s: after\r\neach character of string a, an arbitrary (possibly zero) number of any\r\nlowercase Latin letters, different from the character itself, is added;\r\nafter each such addition, the character that we supplemented is added.\r\nYou are given string s, and you need to output the initial string a. In\r\nother words, you need to decrypt string s.Note that each string\r\nencrypted in this way is decrypted .\r\n",
    "solutions": [
        "#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint main() {\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0), cout.tie(0);\n\tint t;\n\tcin >> t;\n\tfor (; t--;) {\n\t\tint n;\n\t\tstring s;\n\t\tcin >> n >> s;\n\t\tstring ans;\n\t\tint x = 0;\n\t\tfor (int i = 1; i < n; ++i) {\n\t\t\tif (s[i] == s[x])\n\t\t\t\tans += s[x], x = i + 1, ++i;\n\t\t}\n\t\tcout << ans << '\\n';\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings",
        "two pointers"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Cipher Shifer.json",
    "editorial_link": "https://codeforces.com//blog/entry/117060",
    "editorial": "Note that during encryption, only characters different from are added\r\nafter the character . However, when the character is with different\r\ncharacters, another character is added to the string.This means that for\r\ndecryption, we only need to read the characters of the string after\r\nuntil we find the first character equal to . It signals the end of the\r\nblock of characters that will be converted to the character during\r\ndecryption.To decrypt the entire string, we decrypt the first character\r\n. Let the next occurrence of the character be at position . Then the\r\nnext character of the original string is . We apply the same algorithm\r\nto find the next paired character and so on.\r\n",
    "hint": []
}