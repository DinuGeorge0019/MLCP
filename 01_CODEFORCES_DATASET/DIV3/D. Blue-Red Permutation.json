{
    "link": "https://codeforces.com//contest/1607/problem/D",
    "problemId": "1168761",
    "problem_idx": "D",
    "shortId": "1607D",
    "contest_number": "1607",
    "problem_submissions": {
        "H": [
            134109261,
            134122573,
            134127039,
            134129159,
            134120326,
            134124082,
            134115613,
            134086394,
            222081291
        ],
        "G": [
            134100516,
            134111114,
            134120315,
            134119987,
            134103409,
            134125077,
            134090777,
            134124686,
            134161401,
            134108011,
            134124515,
            134135421,
            134120363,
            134127386,
            134118374
        ],
        "F": [
            134088119,
            134094606,
            134109434,
            134113674,
            134106214,
            134130777,
            134116309,
            134123514,
            134126664,
            134098669,
            134116441,
            138590174,
            134109926,
            134122503,
            134115728,
            134132308
        ],
        "E": [
            134075767,
            134075550,
            134083203,
            134090648,
            134082456,
            134081369,
            134087482,
            134106728,
            134090817,
            134098958,
            134102790,
            134115817,
            134085769,
            134078748,
            138590168,
            134089452,
            134089115,
            134093726,
            134096883,
            134087185,
            134095967,
            134093434
        ],
        "D": [
            134073147,
            134079470,
            134081268,
            134078614,
            134077065,
            134080878,
            134074693,
            134077504,
            134095837,
            134113769,
            134103320,
            134076699,
            134075433,
            138590165,
            134084570,
            134083055,
            134085492,
            134086301,
            134077797,
            134088883,
            134092149
        ],
        "C": [
            134069725,
            134073680,
            134076697,
            134075904,
            134072982,
            134074821,
            134078550,
            134074603,
            134077620,
            134094573,
            134099873,
            134073307,
            134072872,
            138590159,
            134078305,
            134075739,
            134077550,
            134078439,
            134072306,
            134082344,
            134079268
        ],
        "B": [
            134067338,
            134069577,
            134073071,
            134074024,
            134071494,
            134070714,
            134072150,
            134072633,
            134073059,
            134091344,
            134097562,
            134068544,
            134068492,
            138590150,
            134072771,
            134079913,
            134074563,
            134075669,
            134092880,
            134071701,
            134074168
        ],
        "A": [
            134063636,
            134063717,
            134066145,
            134063736,
            134063629,
            134070558,
            134064987,
            134064160,
            134064799,
            134089110,
            134068267,
            134064265,
            134063696,
            138590140,
            134064218,
            134065711,
            134066701,
            134063772,
            134064096,
            134065356,
            134065091
        ]
    },
    "name": "D. Blue-Red Permutation",
    "statement": "You are given an array of integers a of length n. The elements of the\r\narray can be either different or the same. Each element of the array is\r\ncolored either blue or red. There are no unpainted elements in the\r\narray. One of the two operations described below can be applied to an\r\narray in a single step: either you can select any blue element and\r\ndecrease its value by 1; or you can select any red element and increase\r\nits value by 1. Situations in which there are no elements of some color\r\nat all are also possible. For example, if the whole array is colored\r\nblue or red, one of the operations becomes unavailable.Determine whether\r\nit is possible to make 0 or more steps such that the resulting array is\r\na permutation of numbers from 1 to n?In other words, check whether there\r\nexists a sequence of steps (possibly empty) such that after applying it,\r\nthe array a contains in some order all numbers from 1 to n (inclusive),\r\neach exactly once.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nvector <int> v;\nint a[1000005];\nsigned main(int argc, char** argv) {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint T;\n\tcin >> T;\n\twhile(T--)\n\t{\n\t\tint n;\n\t\tcin >> n;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tcin >> a[i];\n\t\tstring s;\n\t\tv.clear();\n\t\tcin >> s;\n\t\ts=' '+s;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(s[i]=='B') v.push_back(a[i]);\n\t\t}\n\t\tsort(v.begin(),v.end());\n\t\tint flag=1;\n\t\tfor(int i=0;i<v.size();i++)\n\t\t\tif(v[i]<=i) flag=0;\n\t\tv.clear();\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(s[i]=='R') v.push_back(a[i]);\n\t\t}\n\t\tsort(v.begin(),v.end());\n\t\tint now=n;\n\t\tfor(int i=(int)v.size()-1;i>=0;i--)\n\t\t{\n\t\t\tif(v[i]>now) flag=0;\n\t\t\t--now;\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tcout << \"YES\\n\";\n\t\t}\n\t\telse cout << \"NO\\n\";\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Blue-Red Permutation.json",
    "editorial_link": "https://codeforces.com//blog/entry/96604",
    "editorial": "Note the following fact: if a number in a permutation was obtained from\r\na blue number and a number in a permutation was obtained from a red\r\nnumber, and , then by decreasing the blue number and increasing the red\r\nnumber exactly times each, we will obtain the same permutation in which\r\nthe two numbers have swapped places. Thus, if a permutation can be\r\nobtained at all, some permutation can be obtained by making all the red\r\nnumbers equal to , and the blue ones equal to , where is the total count\r\nof red numbers.Now consider separately two red numbers and such that .\r\nIf is produced by increasing and is produced by increasing , and in the\r\nsame time then , and the following is also true: and . So we just showed\r\nthat if an answer exists, it also exists if greater numbers are produced\r\nby greater values from the input. The same holds for the blue\r\nnumbers.Let us sort all elements by the key , where the color of -th\r\nelement (and blue comes before red). It remains to check that for any\r\nfrom to we can get the number from the -th element of the obtained\r\nsorted array. To do this, we iterate through it and check that either \u00e2\u0080\u009d\r\nand so it can be reduced to , or, symmetrically, \u00e2\u0080\u009d and .\r\n"
}