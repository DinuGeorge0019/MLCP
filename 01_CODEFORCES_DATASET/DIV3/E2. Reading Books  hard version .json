{"link": "https://codeforces.com//contest/1374/problem/E2", "problemId": "659589", "problem_idx": "E2", "shortId": "1374E2", "contest_number": "1374", "problem_submissions": {"E2": [85382072, 85375189, 85438625], "F": [85353642, 85415306, 85383843, 85383492, 85387797], "E1": [85326034, 85415299, 85334989, 85321477, 85339121, 85319474, 85320204, 85328246, 85336700, 85339703, 85337792, 85338081, 85335206, 85337433, 85338605, 85342001, 85329936, 85333348, 85346311], "D": [85316338, 85415714, 85415293, 85323106, 85325598, 85328229, 85311173, 85312812, 85313089, 85319125, 85325499, 85321861, 85326849, 85319951, 85325883, 85322528, 85325568, 85334734, 85327646, 85314511], "C": [85307188, 85415289, 85310607, 85296173, 85316864, 85302975, 85301461, 85301463, 85305237, 85304971, 85309343, 85306153, 85311376, 85308864, 85309628, 85308295, 85307625, 85311312, 85303960], "B": [85299874, 85415460, 85415277, 85305586, 85300354, 85311254, 85298580, 85298918, 85297647, 85301049, 85300227, 85301912, 85300264, 85307719, 85302644, 85305750, 85299884, 85297473, 85305618, 85299402], "A": [85296254, 85418749, 85415919, 85415268, 85300037, 85296089, 85298024, 85296518, 245635316, 85296385, 85295981, 85296977, 85296136, 85296861, 85296508, 85298422, 85298833, 85299917, 85296648, 85305648, 85300594, 85296295]}, "name": "E2. Reading Books  hard version ", "statement": ".Summer vacation has started so Alice and Bob want to play and joy,\r\nbut... Their mom doesn\u2019t think so. She says that they have to read m\r\nbooks before all entertainments. Alice and Bob will read each book to\r\nend this exercise faster.There are n books in the family library. The\r\ni-th book is described by three integers: t_i the amount of time Alice\r\nand Bob need to spend to read it, a_i (equals 1 if Alice likes the i-th\r\nbook and 0 if not), and b_i (equals 1 if Bob likes the i-th book and 0\r\nif not).So they need to choose m books from the given n books in such a\r\nway that: Alice likes k books from the chosen set and Bob likes k books\r\nfrom the chosen set; the total reading time of these m books is (they\r\nare children and want to play and joy as soon a possible). The set they\r\nchoose is for both Alice an Bob (it\u2019s shared between them) and they read\r\nall books , so the total reading time is the sum of t_i over all books\r\nthat are in the chosen set.Your task is to help them and find any\r\nsuitable set of books or determine that it is impossible to find such a\r\nset.\r\n", "solutions": ["#include <bits/stdc++.h>\n#define IO_OP std::ios::sync_with_stdio(0); std::cin.tie(0);\n#define F first\n#define S second\n#define V vector\n#define PB push_back\n#define MP make_pair\n#define EB emplace_back\n#define ALL(v) (v).begin(), (v).end()\n#define debug(x) cerr << #x << \" is \" << x << endl\n#define int ll\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pi;\ntypedef V<int> vi;\n\nconst int INF = 1e9 + 7, C = 2e5 + 7;\n\nstruct BIT{\n\tint bit[C];\n\tint lowbit(int x) {\n\t\treturn x & -x;\n\t}\n\n\tvoid add(int i, int d) {\n\t\twhile(i < C) {\n\t\t\tbit[i] += d;\n\t\t\ti += lowbit(i);\n\t\t}\n\t}\n\tint qry(int i) {\n\t\ti = min(i, C - 1);\n\t\tint res = 0;\n\t\twhile(i) {\n\t\t\tres += bit[i];\n\t\t\ti -= lowbit(i);\n\t\t}\n\t\treturn res;\n\t}\n} cnt, sum;\n\nint qry(int need) {\n\tif(need == 0) return 0;\n\tint cur_cnt = 0, pos = 0;\n\tfor(int j = 14; j >= 0; j--) {\n\t\tif(cur_cnt + cnt.bit[pos | (1 << j)] < need) {\n\t\t\tcur_cnt += cnt.bit[pos | (1 << j)];\n\t\t\tpos |= 1 << j;\n\t\t}\n\t}\n\tpos++;\n\tint real_cnt = cnt.qry(pos);\n\tif(real_cnt < need) return INT_MAX;\n\tint ans = sum.qry(pos) - (real_cnt - need) * pos;\n\treturn ans;\n}\n\nsigned main()\n{\n\tIO_OP;\n\t\n\tint n, m, k;\n\tcin >> n >> m >> k;\n\tvi x, y, z, tt;\n\tV<pi> px, py, pz, pt;\n\tfor(int i = 0; i < n; i++) {\n\t\tint t, a, b;\n\t\tcin >> t >> a >> b;\n\t\tif(a == 0 && b == 0) tt.PB(t), pt.EB(t, i);\n\t\telse if(a == 1 && b == 1) z.PB(t), pz.EB(t, i);\n\t\telse if(a == 1) x.PB(t), px.EB(t, i);\n\t\telse y.PB(t), py.EB(t, i);\n\t}\n\tsort(ALL(x)), sort(ALL(y)), sort(ALL(z));\n\tsort(ALL(px)), sort(ALL(py)), sort(ALL(pz));\n\tvi xx = x, yy = y;\n\tfor(int i:xx) {\n\t\tcnt.add(i, 1);\n\t\tsum.add(i, i);\n\t}\n\tfor(int i:yy) {\n\t\tcnt.add(i, 1);\n\t\tsum.add(i, i);\n\t}\n\tfor(int i:tt) {\n\t\tcnt.add(i, 1);\n\t\tsum.add(i, i);\n\t}\n\tfor(int i = 1; i < x.size(); i++) x[i] += x[i - 1];\n\tfor(int i = 1; i < y.size(); i++) y[i] += y[i - 1];\n\tfor(int i = 1; i < z.size(); i++) z[i] += z[i - 1];\n\tint ans = INT_MAX;\n\tint ptr = 0;\n\tint mxi = 0;\n\tfor(int i = z.size(); i >= 0; i--) {\n\t\tint cur = 0;\n\t\tif(i) cur += z[i - 1];\n\t\tint rem = k - i;\n\t\trem--;\n\t\tif(rem >= (int) x.size() || rem >= (int)y.size()) continue;\n\t\tif(rem < 0) rem = -1;\n\t\tif(rem >= 0) cur += x[rem] + y[rem];\n\t\tint so_far = i + (rem + 1) * 2;\n\t\tif(so_far > m) continue;\n\t\tint need = m - so_far;\n\t\tif((int)x.size() - (rem + 1) + (int)y.size() - (rem + 1) + tt.size() < need) continue;\n\t\twhile(ptr <= rem){\n\t\t\tcnt.add(xx[ptr], -1);\n\t\t\tcnt.add(yy[ptr], -1);\n\t\t\tsum.add(xx[ptr], -xx[ptr]);\n\t\t\tsum.add(yy[ptr], -yy[ptr]);\n\t\t\tptr++;\n\t\t}\n\t\tcur += qry(need);\n\t\tif(cur < ans) {\n\t\t\tans = cur;\n\t\t\tmxi = i;\n\t\t}\n\t}\n\tif(ans == INT_MAX) {\n\t\tcout << -1 << endl;\n\t\treturn 0;\n\t}\n\tcout << ans << endl;\n\n\tvi an;\n\t{\n\t\tint i = mxi;\n\t\tfor(int j = 0; j < i; j++) an.PB(pz[j].S);\n\t\tint rem = k - i;\n\t\trem--;\n\t\tif(rem < 0) rem = -1;\n\t\tfor(int j = 0; j <= rem; j++) {\n\t\t\tan.PB(px[j].S);\n\t\t\tan.PB(py[j].S);\n\t\t}\n\t\tint so_far = i + (rem + 1) * 2;\n\t\tint need = m - so_far;\n\t\tV<pi> ch;\n\t\tfor(int j = rem + 1; j < px.size(); j++) ch.PB(px[j]);\n\t\tfor(int j = rem + 1; j < py.size(); j++) ch.PB(py[j]);\n\t\tfor(pi j:pt) ch.PB(j);\n\t\tsort(ALL(ch));\n\t\tfor(int j = 0; j < need; j++) an.PB(ch[j].S);\n\t}\n\tassert(an.size() == m);\n\tsort(ALL(an));\n\tfor(int i:an) cout << i + 1 << \" \";\n\tcout << endl;\n}\n\n\n\n"], "input": "", "output": "", "tags": ["data structures", "greedy", "implementation", "sortings", "ternary search", "two pointers"], "dificulty": "2500", "interactive": false}