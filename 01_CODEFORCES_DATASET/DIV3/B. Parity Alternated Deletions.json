{
    "link": "https://codeforces.com//contest/1144/problem/B",
    "problemId": "322483",
    "problem_idx": "B",
    "shortId": "1144B",
    "contest_number": "1144",
    "problem_submissions": {
        "G": [
            52105008,
            52115875,
            52124809,
            52311146,
            52118351,
            52313030
        ],
        "E": [
            52101381,
            52103848,
            52100390,
            52103649,
            52104862,
            52109101,
            52102842,
            52107540,
            52111264,
            52112468,
            52260664,
            52109742,
            52111378,
            52113457,
            52114606,
            52105560,
            52108689,
            52119398,
            52111986,
            52114107
        ],
        "F": [
            52095886,
            52109100,
            52110494,
            52107320,
            52107378,
            52103623,
            52111392,
            52111875,
            52109029,
            52108638,
            52103543,
            52103345,
            52106901,
            52107210,
            52106754,
            52111935,
            52119339,
            52102752,
            52105488,
            52108153
        ],
        "D": [
            52090019,
            52100588,
            52092311,
            52097671,
            52099406,
            52099269,
            52097110,
            52097725,
            52096933,
            52100380,
            52097140,
            52098645,
            52102773,
            52099192,
            52099366,
            52100428,
            52099939,
            52097949,
            52102364,
            52100814
        ],
        "C": [
            52089034,
            52096181,
            52089279,
            52094055,
            52091090,
            52091960,
            52092409,
            52092424,
            52092267,
            52092714,
            52092539,
            52093040,
            52092790,
            52093635,
            52092887,
            52094789,
            52090226,
            52092962,
            52093892,
            52094692
        ],
        "B": [
            52086626,
            52090793,
            52086733,
            52090174,
            52089416,
            52088582,
            52089163,
            52088931,
            52089378,
            52087490,
            52088380,
            52094345,
            52089645,
            52089638,
            52089793,
            52091232,
            52087215,
            52089217,
            52090678,
            52090945
        ],
        "A": [
            52085844,
            52087003,
            52085711,
            52087471,
            52085997,
            52086503,
            52085607,
            52086179,
            52086274,
            52085411,
            52085724,
            52085963,
            52086646,
            52086484,
            52086097,
            52087942,
            52085314,
            52086675,
            52088201,
            52086796
        ]
    },
    "name": "B. Parity Alternated Deletions",
    "statement": "Polycarp has an array a consisting of n integers.He wants to play a game\r\nwith this array. The game consists of several moves. On the first move\r\nhe chooses any element and deletes it (after the first move the array\r\ncontains n-1 elements). For each of the next moves he chooses any\r\nelement with the only restriction: its parity should differ from the\r\nparity of the element deleted on the previous move. In other words, he\r\nalternates parities (even-odd-even-odd-... or odd-even-odd-even-...) of\r\nthe removed elements. Polycarp stops if he can\u2019t make a move.Formally:\r\nIf it is the first move, he chooses any element and deletes it; If it is\r\nthe second or any next move: if the last deleted element was , Polycarp\r\nchooses any element and deletes it; if the last deleted element was ,\r\nPolycarp chooses any element and deletes it. If after some move Polycarp\r\ncannot make a move, the game ends. Polycarp\u2019s goal is to the sum of\r\nelements of the array after end of the game. If Polycarp can delete the\r\nwhole array, then the sum of elements is zero.Help Polycarp find this\r\nvalue.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nint n;\npriority_queue<int,vector<int> ,greater<int> >q,p;\nint main(){\n\tint odd = 0,even = 0,k;\n\tscanf(\"%d\",&n);\n\tfor (int i = 0; i < n; ++i){\n\t\tscanf(\"%d\",&k);\n\t\tif (k & 1) q.push(k),odd++; else\n\t\tp.push(k),even++;\n\t}\n\tlong long ans = 0;\n\tif (odd < even){\n\t\teven -= odd;\n\t\tif (even) even--;\n\t\twhile(even){\n\t\t\tans += p.top(); \n\t\t\tp.pop(); \n\t\t\teven--;\n\t\t}\n\t} else{\n\t\todd -= even;\n\t\tif (odd) odd--;\n\t\twhile(odd){\n\t\t\tans += q.top();\n\t\t\tq.pop(); \n\t\t\todd--;\n\t\t}\n\t}\n\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Parity Alternated Deletions.json",
    "editorial_link": "https://codeforces.com/blog/entry/66307",
    "editorial": "Let\u00e2\u0080\u0099s calculate the sum of the whole array and then divide all its\r\nelements into two arrays and by their parity ( for odd, for even). Sort\r\nboth of them in non-increasing order. Then what can we see? We always\r\ncan delete first elements from both arrays (where is the size of ). So\r\nlet\u00e2\u0080\u0099s decrease by the sum of first elements of the array and the same\r\nfor the array . If one the arrays has more than elements (both arrays\r\ncannot have more than elements because if it is so then should be\r\ngreater) then let\u00e2\u0080\u0099s decrease by the -th element of this array (because\r\nthis is the maximum possible element we can remove). Now is the answer\r\nfor the problem.\r\n"
}