{
    "link": "https://codeforces.com//contest/1551/problem/D1",
    "problemId": "1055223",
    "problem_idx": "D1",
    "shortId": "1551D1",
    "contest_number": "1551",
    "problem_submissions": {
        "D2": [
            123504570,
            123491119,
            123485402,
            123508709,
            123487387,
            123490299,
            123498497,
            123519517,
            123503570,
            123507308,
            123506328,
            123496338,
            123525324,
            123509854,
            123500000,
            123499688,
            123500681,
            123520243,
            123521810,
            123560543,
            123489816
        ],
        "D1": [
            123496540,
            123479404,
            123460900,
            123501007,
            123476769,
            123477339,
            123486676,
            123509110,
            123490131,
            123493249,
            123493173,
            123482125,
            123490880,
            123500902,
            123489510,
            123491442,
            123487788,
            123505201,
            123513198,
            123560527,
            123477927
        ],
        "E": [
            123487760,
            123503517,
            123508061,
            123512161,
            123512376,
            123522062,
            123512340,
            123494473,
            123520187,
            123519199,
            123522642,
            123508385,
            123509676,
            123525566,
            123522562,
            123529567,
            123525043,
            123524224,
            123527690,
            123529206
        ],
        "F": [
            123483346,
            123518773,
            123505149,
            123522554,
            123530029,
            123525813,
            123677834
        ],
        "C": [
            123463062,
            123471764,
            123465961,
            123494616,
            123466015,
            123470689,
            123479667,
            123473982,
            123478387,
            123473235,
            123485341,
            123504214,
            123476344,
            123474463,
            123482794,
            123487070,
            123509871,
            123495332,
            123505971,
            123560511,
            123471519
        ],
        "B1": [
            123458055,
            123450157,
            123447323,
            123480992,
            123471662,
            123459271,
            123448891,
            123453516,
            123457018,
            123473105,
            123465306,
            123457521,
            123473064,
            123450150,
            123457907,
            123454507,
            123450845,
            123454392,
            123459478,
            123486711,
            123560483,
            123451550
        ],
        "B2": [
            123455203,
            123463888,
            123460727,
            123523874,
            123456743,
            123463349,
            123471479,
            123467608,
            123467523,
            123462292,
            123471295,
            123468067,
            123463785,
            123466840,
            123469959,
            123475307,
            123473651,
            123478743,
            123500344,
            123560494,
            123462370
        ],
        "A": [
            123443367,
            123443254,
            123447159,
            123446121,
            123445546,
            123443509,
            123444177,
            123443572,
            123444116,
            123444163,
            123445991,
            123474697,
            123444077,
            123443229,
            123447862,
            123443364,
            123443226,
            123449045,
            123446138,
            123560465,
            123443541
        ]
    },
    "name": "D1. Domino  easy version ",
    "statement": "There’s a table of n\r\ntimes m cells (n rows and m columns). The value of n\r\ncdot m is even.A domino is a figure that consists of two cells having a\r\ncommon side. It may be horizontal (one of the cells is to the right of\r\nthe other) or vertical (one of the cells is above the other).You need to\r\nfind out whether it is possible to place\r\nfrac{nm}{2} dominoes on the table so that exactly k of them are\r\nhorizontal and all the other dominoes are vertical. The dominoes cannot\r\noverlap and must fill the whole table.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std ;\n\n#define ll              long long \n#define pb              push_back\n#define all(v)          v.begin(),v.end()\n#define sz(a)           (ll)a.size()\n#define F               first\n#define S               second\n#define INF             2000000000000000000\n#define popcount(x)     __builtin_popcountll(x)\n#define pll             pair<ll,ll>\n#define pii             pair<int,int>\n#define ld              long double\n\nconst int M = 1000000007;\nconst int MM = 998244353;\n\ntemplate<typename T, typename U> static inline void amin(T &x, U y){ if(y<x) x=y; }\ntemplate<typename T, typename U> static inline void amax(T &x, U y){ if(x<y) x=y; }\n\n#ifdef LOCAL\n#define debug(...) debug_out(#__VA_ARGS__, __VA_ARGS__)\n#else\n#define debug(...) 2351\n#endif\n\n\nint _runtimeTerror_()\n{\n    int n,m,k;\n    cin >> n >> m >> k;\n    if(n % 2 == 0 && m % 2 == 0)\n    {\n        if(k % 2 == 0)\n            cout << \"YES\\n\";\n        else\n            cout << \"NO\\n\";\n    }\n    else if(n % 2 == 1 && m % 2 == 0)\n    {\n        k -= m/2;\n        if(k >= 0 && k % 2 == 0)\n            cout << \"YES\\n\";\n        else\n            cout << \"NO\\n\";\n    }\n    else if(n % 2 == 0 && m % 2 == 1)\n    {\n        if(k % 2 == 0 && k <= n * m / 2 - n / 2)\n            cout << \"YES\\n\";\n        else\n            cout << \"NO\\n\";\n    }\n    return 0;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n    #ifdef runSieve\n        sieve();\n    #endif\n    #ifdef NCR\n        initialize();\n    #endif\n    int TESTS=1;\n    cin>>TESTS;\n    while(TESTS--)\n        _runtimeTerror_();\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D1. Domino  easy version .json",
    "editorial_link": "https://codeforces.com//blog/entry/93149",
    "editorial": "Suppose n\n and m\n are even. A necessary and sufficient condition of existence of the answer is that k\n is even.\n\nLet's prove the sufficient condition. If the count of the horizontal dominoes is even, then we can combine them and vertical dominoes to blocks of size 2×2\n (the number of the vertical dominoes is even, too, if k\n is even). If n\n and m\n are even, we can fill the table with these blocks. The description of the locations of the dominoes may be printed as follows: consider the table is a chessboard where a cell is a block of two dominoes. Consider the leftmost topmost cell of the board is black. If a cell of the board is black, let's mark one of the dominoes of the block with the letter \"a\" and the other one with the letter \"b\". If a cell of the board is white, let's mark one of the dominoes of the block with the letter \"c\" and the other one with the letter \"d\". There will be no situation that some two cells of the table are marked with one letter but belong to different dominoes.\n\nLet's prove the necessary condition. The number of cells in a column (n\n) is even, so the number of cells that belong to vertical dominoes is even because cells of each vertical domino may be either belong to the column or not belong at the same time. So the number of cells that belong to horizontal dominoes is even. Let's cross out all cells that belong to vertical dominoes and let's find the leftmost column having cells that haven't been crossed out. It's the leftmost column with such cells so the pairwise cells of the non-crossed out cells belong to the column to the right of the found one. The number of such cells in the right column is equal to the number of found cells so it's even and the number of found horizontal dominoes is even, too. Let's cross out the found cells and the pairwise cells. The number of non-crossed out cells in the right column will be even. The number of crossed-out horizontal dominoes will be even, too. Let's repeat this procedure until all the dominoes will be crossed out. In every step, we have crossed out the even number of horizontal dominoes, hence the total count of horizontal dominoes is even.\n\nSuppose n\n is odd, hence m\n is even. In this case, every column contains an odd number of cells, whereas the number of cells that belong to vertical dominoes is even. So the number of cells that belong to horizontal dominoes is odd. Consider the leftmost column and find a cell of it that belongs to a horizontal domino (it must be found because the number of such cells is odd so it isn't equal to 0\n). Let's find the pairwise cell and cross out both cells. Currently, the two columns will have an even number of non-crossed-out cells. Let's repeat the procedure until all columns will have even non-crossed-out cells. We will cross out m\n cells and m2\n dominoes. So the necessary condition is that the number of horizontal dominoes (k\n) is at least m2\n.\n\nLet's extend the necessary condition with the following condition: the value of k?m2\n is even. Consider the table that we've become after the previous procedure where each column has exactly one crossed-out cell. Let's start the procedure we've done in the case of even both n\n and m\n. The procedure can be started on our table because each column of the table has an even number of non-crossed-out cells. As a result of the procedure, we will cross out an even count of horizontal dominoes, so the value of k?m2\n is even.\n\nLet's build an answer if the conditions k?m2\n and k?m2\n is even are met. Let's place in the topmost row m2\n horizontal dominoes and mark their cells as follows: the first domino will be marked with \"x\", the second one  with \"y\", the third one  with \"x\", and so on. As the result, the region of n?1\n rows and m\n columns will be unfilled. Both values are even, and the value of k?m2\n is even, too. So let's fill the region as if it's a separate table having even numbers of rows and columns. As it was proved above, it's possible to do. The set of letters used for the region and set of the letters used for the topmost row don't have common elements, so there will be no cells that are marked with one letter but belong to different dominoes.\n\nThe case of odd m\n (hence, n\n is even) is similar to the previous one  let's transpose the table (it will have m\n rows and n\n columns), swap the values of k\n and nm2?k\n, solve the case above and transpose the table back to have n\n rows and m\n columns.",
    "hint": []
}