{
    "link": "https://codeforces.com//contest/2114/problem/C",
    "problemId": "3405987",
    "problem_idx": "C",
    "shortId": "2114C",
    "contest_number": "2114",
    "problem_submissions": {
        "G": [
            321491820,
            321510895,
            321522705,
            321536205,
            321704142,
            321493544,
            321539010
        ],
        "D": [
            321453109,
            321433567,
            321464732,
            321435389,
            321418906,
            321422419,
            321426564,
            321427705,
            321433853,
            321447085,
            321448245,
            321448177,
            321438602,
            321430809,
            321444460,
            321433422,
            321441969,
            321447455
        ],
        "F": [
            321437069,
            321471653,
            321400560,
            321452634,
            321458136,
            321471530,
            321457608,
            321478622,
            321469763,
            321468286,
            321467066,
            321488259,
            321482829,
            321485396,
            321504556,
            321482048,
            321513883,
            321499978,
            321518132
        ],
        "E": [
            321425663,
            321448629,
            321447346,
            321419017,
            321427993,
            321438291,
            321439608,
            321441935,
            321448509,
            321455125,
            321437156,
            321464203,
            321462222,
            321450510,
            321461412,
            321455167,
            321460727,
            321424098
        ],
        "C": [
            321406317,
            321410944,
            321421134,
            321404932,
            321410584,
            321406511,
            321405596,
            321411420,
            321413167,
            321412908,
            321422303,
            321404419,
            321413740,
            321414690,
            321426901,
            321412443,
            321424589,
            321401692
        ],
        "B": [
            321397200,
            321399911,
            321415073,
            321397245,
            321403501,
            321400846,
            321423069,
            321401151,
            321406842,
            321401907,
            321401468,
            321410144,
            321404248,
            321407958,
            321413444,
            321402900,
            321412452,
            321392901
        ],
        "A": [
            321389400,
            321390323,
            321390935,
            321389192,
            321396857,
            321391523,
            321392082,
            321388740,
            321389560,
            321392729,
            321389834,
            321394641,
            321393501,
            321388215,
            321392515,
            321389988,
            321388815,
            321388090
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143268",
    "editorial": "We will be selecting elements from left to right, skipping some of them.\r\nIf a new element is supposed to go into the same array as the last one\r\nwe took, then skipping it will not make things worse. This is true\r\nbecause if we took an element equal to , then skipping an element equal\r\nto will allow an element equal to to go into a new array instead of the\r\nprevious elements. Similarly, it is always beneficial to take the first\r\nelement of the array first, as the second element may be larger and the\r\nanswer may worsen.\r\n",
    "name": "C. Need More Arrays",
    "statement": "Given an array a and n integers. It is sorted in non-decreasing order,\r\nthat is, a_i\r\nle a_{i + 1} for all 1\r\nle i < n.You can remove any number of elements from the array (including\r\nthe option of not removing any at all) without changing the order of the\r\nremaining elements. After the removals, the following will occur: a_1 is\r\nwritten to a new array; if a_1 + 1 < a_2, then a_2 is written to a new\r\narray; otherwise, a_2 is written to the same array as a_1; if a_2 + 1 <\r\na_3, then a_3 is written to a new array; otherwise, a_3 is written to\r\nthe same array as a_2;\r\ncdots For example, if a=[1, 2, 4, 6], then: a_1 = 1 is written to the\r\nnew array, resulting in arrays: [1]; a_1 + 1 = 2, so a_2 = 2 is added to\r\nthe existing array, resulting in arrays: [1, 2]; a_2 + 1 = 3, so a_3 = 4\r\nis written to a new array, resulting in arrays: [1, 2] and [4]; a_3 + 1\r\n= 5, so a_4 = 6 is written to a new array, resulting in arrays: [1, 2],\r\n[4], and [6]. Your task is to remove elements in such a way that the\r\ndescribed algorithm creates as many arrays as possible. If you remove\r\nall elements from the array, no new arrays will be created.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Need More Arrays.json"
}