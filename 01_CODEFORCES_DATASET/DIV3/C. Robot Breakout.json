{
    "link": "https://codeforces.com//contest/1196/problem/C",
    "problemId": "377792",
    "problem_idx": "C",
    "shortId": "1196C",
    "contest_number": "1196",
    "problem_submissions": {
        "F": [
            57681700,
            57688661,
            57693585,
            57690559,
            57665659,
            57695119,
            57781679,
            83242061,
            57916383,
            68726830,
            82270831
        ],
        "B": [
            57673541,
            57649544,
            57652269,
            57654230,
            57679335,
            57653669,
            57651478,
            57654275,
            57652865,
            57652183,
            103121358,
            59232415,
            57652308,
            57652960,
            57653412,
            57655574,
            58261889,
            57653528,
            57654061,
            57651928,
            57655085,
            57658491,
            57652103
        ],
        "A": [
            57662145,
            57646582,
            57648135,
            57648211,
            57648294,
            57649147,
            57647064,
            57648725,
            57646690,
            57646929,
            57647619,
            57646915,
            57649771,
            57648481,
            58261863,
            57647513,
            57649572,
            57646786,
            57647851,
            57652602,
            57647144
        ],
        "E": [
            57660066,
            57677485,
            57675366,
            57677436,
            57681282,
            57677830,
            57673842,
            57672850,
            57676048,
            57682764,
            57679085,
            57680414,
            57680019,
            57677517,
            58261965,
            57678819,
            57684523,
            57681696,
            57679722,
            57677290,
            57678640
        ],
        "C": [
            57658492,
            57654354,
            57658481,
            57657615,
            57689981,
            57659504,
            57656630,
            57658570,
            57658429,
            57659478,
            57661824,
            57660864,
            57657934,
            57660478,
            58261906,
            57662669,
            57660523,
            57674035,
            57662185,
            57663396,
            57666540
        ],
        "D1": [
            57651996,
            57658879,
            57661770,
            57666118,
            57654079,
            57666561,
            57662530,
            57664730,
            57663635,
            57664913,
            57668860,
            57664436,
            57664910,
            57666776,
            58261921,
            57667464,
            57664679,
            57661598,
            57670813,
            57668128,
            57657381
        ],
        "D2": [
            57650929,
            57658567,
            57664847,
            57665451,
            57654443,
            57666008,
            57663080,
            57665252,
            57667224,
            57664331,
            57668491,
            57667512,
            57669290,
            57667407,
            58261939,
            57671667,
            57668510,
            57661989,
            57670493,
            57667835,
            57657749
        ]
    },
    "name": "C. Robot Breakout",
    "statement": "n robots have escaped from your laboratory! You have to find them as\r\nsoon as possible, because these robots are experimental, and their\r\nbehavior is not tested yet, so they may be really dangerous!Fortunately,\r\neven though your robots have escaped, you still have some control over\r\nthem. First of all, you know the location of each robot: the world you\r\nlive in can be modeled as an infinite coordinate plane, and the i-th\r\nrobot is currently located at the point having coordinates (x_i, y_i).\r\nFurthermore, you may send exactly one command to all of the robots. The\r\ncommand should contain two integer numbers X and Y, and when each robot\r\nreceives this command, it starts moving towards the point having\r\ncoordinates (X, Y). The robot stops its movement in two cases: either it\r\nreaches (X, Y); or it cannot get any closer to (X, Y). Normally, all\r\nrobots should be able to get from any point of the coordinate plane to\r\nany other point. Each robot usually can perform four actions to move.\r\nLet\u2019s denote the current coordinates of the robot as (x_c, y_c). Then\r\nthe movement system allows it to move to any of the four adjacent\r\npoints: the first action allows it to move from (x_c, y_c) to (x_c - 1,\r\ny_c); the second action allows it to move from (x_c, y_c) to (x_c, y_c +\r\n1); the third action allows it to move from (x_c, y_c) to (x_c + 1,\r\ny_c); the fourth action allows it to move from (x_c, y_c) to (x_c, y_c -\r\n1). Unfortunately, it seems that some movement systems of some robots\r\nare malfunctioning. For each robot you know which actions it can\r\nperform, and which it cannot perform.You want to send a command so all\r\nrobots gather at the same point. To do so, you have to choose a pair of\r\ninteger numbers X and Y so that each robot can reach the point (X, Y).\r\nIs it possible to find such a point?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int n, q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        scanf(\"%d\", &n);\n        int X[2] = {-100000, 100000}, Y[2] = {-100000, 100000};\n        for (int i = 1; i <= n; i++) {\n            int x, y, f[4];\n            scanf(\"%d%d%d%d%d%d\", &x, &y, &f[0], &f[1], &f[2], &f[3]);\n            if (f[0] == 0) X[0] = max(X[0], x);\n            if (f[1] == 0) Y[1] = min(Y[1], y);\n            if (f[2] == 0) X[1] = min(X[1], x);\n            if (f[3] == 0) Y[0] = max(Y[0], y);\n        }\n        if (X[0] > X[1] || Y[0] > Y[1]) puts(\"0\");\n        else printf(\"1 %d %d\\n\", X[0], Y[0]);\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Robot Breakout.json",
    "editorial_link": "https://codeforces.com//blog/entry/68655",
    "editorial": "In fact, we have some restrictions on axis and axis (for example, if\r\nsome robot stays at the position and cannot move to the left, then the\r\nanswer point should have ).So we can take the minimum among all\r\n-coordinates of robots that cannot go up and save it into , maximum\r\namong all -coordinates of robots that cannot go down and save it into ,\r\nminimum among all -coordinates of robots that cannot go right and save\r\nit into and maximum among all -coordinates of robots that cannot go\r\nright and save it into . Initially .So these restrictions are describe\r\nsome rectangle (possibly incorrect, with or ). Let be the bottom-left\r\npoint of this rectangle and be the top-right point of this rectangle.In\r\ncase if this rectangle have or , the answer is \"\". Otherwise this\r\nrectangle describes all integer points which can be reachable all robots\r\nand you can print any of them.\r\n"
}