{"link": "https://codeforces.com//contest/1945/problem/E", "problemId": "2540240", "problem_idx": "E", "shortId": "1945E", "contest_number": "1945", "problem_submissions": {"G": [252240841, 252250866, 252420396, 252278722, 252525005, 252548158, 252390608, 252567317, 252552741], "E": [252219497, 252219260, 252213387, 252225102, 252223337, 252221318, 252228596, 252237032, 252235746, 252231786, 252228604, 252232973, 252223877, 252227459, 252232102, 252227652, 252224399, 252228708, 252219208, 252234028, 252232706, 252237279, 252235482], "F": [252212698, 252234280, 252233067, 252234341, 252240611, 252234408, 252239611, 252243237, 252244691, 252376596, 252238557, 252239689, 252241751, 252248456, 252244763, 252248686, 252238419, 252251638, 252253337, 252249409, 252253972, 252250630], "C": [252206245, 252207712, 252202451, 252208700, 252207454, 252210649, 252206365, 252207126, 252207020, 252209180, 252213309, 252203687, 252209170, 252214626, 252209187, 252244934, 252208556, 252217228, 252213088, 252217154], "D": [252198864, 252212223, 252207311, 252216917, 252210946, 252214851, 252215523, 252213673, 252211331, 252213241, 252218189, 252208559, 252214624, 252218088, 252216560, 252210697, 252213737, 252221839, 252218355, 252222523], "B": [252195700, 252203456, 252197691, 252195312, 252198069, 252200483, 252199692, 252199256, 252205068, 252202776, 252197737, 252197316, 252200847, 252199778, 252199654, 252195229, 252204485, 252203677, 252200862], "A": [252193249, 252196517, 252194020, 252193609, 252194534, 252195163, 252195841, 252195267, 252193567, 252198736, 252193769, 252193858, 252193912, 252195503, 252195367, 252193377, 252195907, 252194634, 252196929], "H": [252530309, 252556908]}, "name": "E. Binary Search", "statement": "Anton got bored during the hike and wanted to solve something. He asked\r\nKirill if he had any new problems, and of course, Kirill had one.You are\r\ngiven a permutation p of size n, and a number x that needs to be found.\r\nA permutation of length n is an array consisting of n distinct integers\r\nfrom 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray), and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray).You decided that you are a cool programmer, so you will use an\r\nadvanced algorithm for the search binary search. However, you forgot\r\nthat for binary search, the array must be sorted.You did not give up and\r\ndecided to apply this algorithm anyway, and in order to get the correct\r\nanswer, you can perform the following operation 2 times before running\r\nthe algorithm: choose the indices i, j (1\r\nle i, j\r\nle n) and swap the elements at positions i and j.After that, the binary\r\nsearch is performed. At the beginning of the algorithm, two variables l\r\n= 1 and r = n + 1 are declared. Then the following loop is executed: If\r\nr - l = 1, end the loop m =\r\nlfloor\r\nfrac{r + l}{2}\r\nrfloor If p_m\r\nle x, assign l = m, otherwise r = m. The goal is to rearrange the\r\nnumbers in the permutation before the algorithm so that after the\r\nalgorithm is executed, p_l is equal to x. It can be shown that 2\r\noperations are always sufficient.\r\n", "solutions": ["#ifdef LOCAL\n#define _GLIBCXX_DEBUG\n#endif\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ld = long double;\nconst ll INF = LLONG_MAX, MOD = 1e9 + 7, P = 239;\nconst ld PI = 3.1415926535897938462643383279502, EPS = 1e-7;\n\ntemplate <typename T>\ninline ll sz(const T &a) {\n    return a.size();\n}\n\ntemplate <typename T, typename C>\nistream &operator >> (istream &in, pair<T, C> &a) {\n    return in >> a.first >> a.second;\n}\n\ntemplate <typename T, typename C>\nostream &operator << (ostream &out, pair<T, C> a) {\n    return out << a.first << ' ' << a.second;\n}\n\ntemplate <typename T>\nistream & operator >> (istream &in, vector<T> &a) {\n    for (auto &i : a) {\n        in >> i;\n    }\n    return in;\n}\n\ntemplate <typename T>\nostream &operator << (ostream &out, vector<T> a) {\n    for (auto i : a) {\n        out << i << ' ';\n    }\n    return out;\n}\n\ntemplate <typename T>\nvoid print(vector<T> a, string c = \"\\n\") {\n    for (T i : a) {\n        cout << i << c;\n    }\n}\n\nvoid solve() {\n    ll n, x;\n    cin >> n >> x;\n    vector<ll> p(n + 1);\n    for (int i = 1; i <= n; ++i) {\n        cin >> p[i];\n    }\n    ll pos = -1;\n    for (int i = 1; i <= n; ++i) {\n        if (p[i] == x) {\n            pos = i;\n        }\n    }\n    ll l = 1, r = n + 1;\n    vector<bool> change(n + 1), tryed(n + 1);\n//    while (r - l > 1) {\n//        ll m = (r + l) / 2;\n//        tryed[m] = true;\n//        if (p[m] <= x) {\n//            l = m;\n//            if (pos < m) {\n//                change[m] = true;\n//                r = m;\n//            }\n//        } else {\n//            r = m;\n//            if (pos >= m) {\n//                change[m] = true;\n//                l = m;\n//            }\n//        }\n//    }\n//    vector<ll> nc;\n//    for (int i = 1; i <= n; ++i) {\n//        if (change[i]) {\n//            nc.push_back(i);\n//        }\n//    }\n    while (r - l > 1) {\n        ll m = (r + l) / 2;\n        tryed[m] = true;\n        if (p[m] <= x) {\n            l = m;\n        } else {\n            r = m;\n        }\n    }\n    ll last = l;\n    if (last == pos) {\n        return void(cout << 0);\n    }\n    vector<pair<int, int>> ans;\n    ans.push_back({pos, l});\n    if (tryed[pos]) {\n        for (int i = 1; i <= n; ++i) {\n            if (p[i] <= x && !tryed[i]) {\n                ans.push_back({i, pos});\n                break;\n            }\n        }\n    }\n    cout << sz(ans) << '\\n';\n    print(ans);\n}\n\nsigned main() {\n#ifdef LOCAL\n    freopen(\"inp.txt\", \"r\", stdin);\n    freopen(\"out.txt\", \"w\", stdout);\n    freopen(\"err.txt\", \"w\", stderr);\n\n    auto start_time = clock();\n#endif\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int times = 1;\n    cin >> times;\n    while (times--)\n        solve(), cout << '\\n';\n\n#ifdef LOCAL\n    auto end_time = clock();\n    cerr << setprecision(3) << fixed << \"Execution time: \" << (end_time - start_time) * (int) 1e3 / CLOCKS_PER_SEC << \" ms\\n\";\n#endif\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "constructive algorithms", "greedy"], "dificulty": "1700", "interactive": false}