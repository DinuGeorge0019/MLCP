{"link": "https://codeforces.com//contest/1933/problem/B", "problemId": "2499498", "problem_idx": "B", "shortId": "1933B", "contest_number": "1933", "problem_submissions": {"F": [248591555, 248583197, 248612069, 248598539, 248597755, 248643416, 248594242, 248617583, 248616936, 248585168, 248614930, 248616674, 248602103, 248594258, 248595945, 248611877, 248611178, 248616575, 248616309, 248622503, 248617674], "E": [248548292, 248552431, 248546385, 248561374, 248556960, 248652019, 248551455, 248552418, 248555156, 248564471, 248563614, 248548908, 248551471, 248562111, 248581222, 248571134, 248569128, 248568252, 248572929, 248557480, 248572070], "D": [248528452, 248534682, 248520947, 248525201, 248536025, 248654461, 248561233, 248528372, 248531274, 248536504, 248531753, 248522180, 248521565, 248548476, 248549982, 248534397, 248534785, 248540283, 248533460, 248533936, 248522543], "C": [248516161, 248524318, 248516570, 248527729, 248522314, 248522710, 248519907, 248542337, 248516141, 248527195, 248558597, 248543262, 248520926, 248522993, 248519350, 248521925, 248526364, 248527609, 248534164], "B": [248505336, 248503901, 248517888, 248511472, 248507016, 248507736, 248508836, 248511885, 248506077, 248516238, 248525805, 248512121, 248503633, 248509962, 248507053, 248512665, 248511061, 248506937, 248515209], "A": [248494249, 248494304, 248494559, 248496663, 248496909, 248500497, 248494197, 248494587, 248497967, 248494007, 248495080, 248494500, 248498090, 248639683, 248493804, 248494937, 248495858, 248498778, 248497100, 248494989, 248499649], "G": [248742272, 248790545, 248713826, 248773615, 248759515]}, "name": "B. Turtle Math  Fast Three Task", "statement": "You are given an array a_1, a_2,\r\nldots, a_n.In one move, you can perform either of the following two\r\noperations: Choose an element from the array and remove it from the\r\narray. As a result, the length of the array decreases by 1; Choose an\r\nelement from the array and increase its value by 1. You can perform any\r\nnumber of moves. If the current array becomes empty, then no more moves\r\ncan be made.Your task is to find the number of moves required to make\r\nthe sum of the elements of the array a divisible by 3. It is possible\r\nthat you may need 0 moves.Note that the sum of the elements of an empty\r\narray (an array of length 0) is equal to 0.\r\n", "solutions": ["/// My implementation sucks\n#include <bits/stdc++.h>\n#define ll long long\n#define f first\n#define s second\n#define ii pair<int,int>\n#define sz(x) (int) (x).size()\n#define pb push_back\n#define all(x) (x).begin(),(x).end()\nusing namespace std;\ntemplate<class T1,class T2> bool maximize(T1 &a,T2 b) {return(a<b ? a=b,1:0);};\ntemplate<class T1,class T2> bool minimize(T1 &a,T2 b) {return(a>b ? a=b,1:0);};\n\nconst int N=1e5+10;\nint n,a[N];\nvoid leeminhduc2()\n{\n    cin >> n;\n    int s=0;\n    for (int i=1;i<=n;i++) \n    {\n        cin >> a[i];\n        s=(s+a[i])%3;\n    }\n    if (s%3)\n    {\n        if (s%3==2) cout << \"1\\n\";\n        else\n        {\n            bool ok=0;\n            for (int i=1;i<=n;i++) if (a[i]%3==1) ok=1;\n            cout << 2-ok << \"\\n\";\n        }\n    }\n    else cout << \"0\\n\";\n\n\n}\nsigned main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    int tc=1;\n    cin >> tc;\n    while (tc--)\n    leeminhduc2();\n}\n\n"], "input": "", "output": "", "tags": ["implementation", "math", "number theory"], "dificulty": "800", "interactive": false}