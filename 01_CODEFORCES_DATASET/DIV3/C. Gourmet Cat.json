{
    "link": "https://codeforces.com//contest/1154/problem/C",
    "problemId": "331479",
    "problem_idx": "C",
    "shortId": "1154C",
    "contest_number": "1154",
    "problem_submissions": {
        "G": [
            52855762,
            52851693,
            52883699,
            52890510,
            52889410,
            52873345,
            64071464,
            52852198,
            52889617,
            52938027,
            52899099,
            52883451,
            52933277
        ],
        "F": [
            52847525,
            52855540,
            52853802,
            52856499,
            52854684,
            52859289,
            52859188,
            52856934,
            52861411,
            52860421,
            52864456,
            52865823,
            52865674,
            52862756,
            52863204,
            52898461,
            52885308,
            52867718
        ],
        "E": [
            52844409,
            52843854,
            52845875,
            52851030,
            52848418,
            52851394,
            52850626,
            52850695,
            52853071,
            52854108,
            52854816,
            52860104,
            52857303,
            52865759,
            52865330,
            52848827,
            52846804,
            52847297,
            52851755
        ],
        "D": [
            52838256,
            52840530,
            52838159,
            52842046,
            52844146,
            52843431,
            52844055,
            52843180,
            52844776,
            52845105,
            52843951,
            52855282,
            52849507,
            52844126,
            52848629,
            52839874,
            52840662,
            52843194,
            52840788
        ],
        "C": [
            52833823,
            52836291,
            52835397,
            52837673,
            52839569,
            52838593,
            52840124,
            52839273,
            52840405,
            52841087,
            52841150,
            52840622,
            52844765,
            52838877,
            52843127,
            52835631,
            52837394,
            52838050,
            52836957
        ],
        "B": [
            52831026,
            52830367,
            52830898,
            52831597,
            52835486,
            52833452,
            52832490,
            52835076,
            52832847,
            52835796,
            52836031,
            52832592,
            52835180,
            52833364,
            52837330,
            52831701,
            52832070,
            52833675,
            52832455
        ],
        "A": [
            52828088,
            52827996,
            52828695,
            52828356,
            52829673,
            52830380,
            52828666,
            52830260,
            52828393,
            52830384,
            52829496,
            52829394,
            52828592,
            52828708,
            52833449,
            52828168,
            52828298,
            52828150,
            52828517
        ]
    },
    "name": "C. Gourmet Cat",
    "statement": "Polycarp has a cat and his cat is a real gourmet! Dependent on a day of\r\nthe week he eats certain type of food: on Mondays, Thursdays and Sundays\r\nhe eats ; on Tuesdays and Saturdays he eats ; on other days of week he\r\neats . Polycarp plans to go on a trip and already packed his backpack.\r\nHis backpack contains: a daily rations of ; b daily rations of ; c daily\r\nrations of . Polycarp has to choose such day of the week to start his\r\ntrip that his cat can eat without additional food purchases as long as\r\npossible. Print the maximum number of days the cat can eat in a trip\r\nwithout additional food purchases, if Polycarp chooses the day of the\r\nweek to start his trip optimally.\r\n",
    "solutions": [
        "// And in the end, the love you take is equal to the love you make.\n//                      Paul McCartney (the Beatles). The End. Abbey Road.\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing LL = long long;\n\nnamespace _buff {\n\nconst size_t BUFF = 1 << 19;\nchar buff[BUFF], *begin = buff, *end = buff;\nchar getc() {\n  if (begin == end) {\n    begin = buff;\n    end = buff + fread(buff, 1, BUFF, stdin);\n  }\n  return begin == end ? -1 : *begin++;\n}\n\n}\n\nLL read() {\n  using namespace _buff;\n  LL ret = 0;\n  bool pos = true;\n  char c = getc();\n  for (; (c < '0' || c > '9') && c != '-'; c = getc()) {\n    assert(~c);\n  }\n  if (c == '-') {\n    pos = false;\n    c = getc();\n  }\n  for (; c >= '0' && c <= '9'; c = getc()) {\n    ret = (ret << 3) + (ret << 1) + (c ^ 48);\n  }\n  return pos ? ret : -ret;\n}\n\nint main() {\n  vector<int> cnt(3);\n  generate_n(cnt.begin(), 3, read);\n  const vector<int> eat = {0, 1, 2, 0, 2, 1, 0};\n  int ans = 0;\n  for (int i = 0; i < 7; ++i) {\n    vector<int> cur = cnt;\n    int days = 0;\n    for (int j = i; j < 7; ++j) {\n      if (!cur[eat[j]]) break;\n      --cur[eat[j]]; ++days;\n    }\n    int week = min(cur[0] / 3, min(cur[1] / 2, cur[2] / 2));\n    cur[0] -= week * 3;\n    cur[1] -= week * 2;\n    cur[2] -= week * 2;\n    days += week * 7;\n    for (int j = 0; j < 7; ++j) {\n      if (!cur[eat[j]]) break;\n      --cur[eat[j]]; ++days;\n    }\n    ans = max(ans, days);\n  }\n  cout << ans << '\\n';\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Gourmet Cat.json",
    "editorial_link": "https://codeforces.com//blog/entry/66586",
    "editorial": "Let the number of rations of fish food be , the number of rations of\r\nrabbit stew be and the number of rations of chicken stakes be (so we\r\nhave an array consisting of elements).Let be the maximum number of full\r\nweeks cat can eat if the starting day of the trip can be any day of the\r\nweek. The value of is .Letâs subtract the value from , and from and . We\r\ncan see that we cannot feed the cat at least one more full week. So the\r\nfinal answer is , where .Now itâs time for some good implementation! Of\r\ncourse, you can try to analyze all cases and handle them using ifs or\r\nsomething similar, but I will try to suggest you a good enough way to\r\nimplement the remaining part of the problem:Letâs create an array of\r\nlength , where means the type of the food cat eats during the -th day of\r\nthe week ( for fish food, for rabbit stew and for chicken stake). It\r\nwill be .Now letâs iterate over the day we will start our trip. Let it\r\nbe . For the current starting day let be the number of rations cat has\r\neaten already (initially it is zero), be the current day of the trip\r\n(initially it is ) and the array be the copy of the array . Then letâs\r\ndo the following sequence of the operations, while is greater than zero:\r\ndecrease by one, increase by one and set (take it modulo and add one).\r\nAfter this cycle we can update the answer with the value of .\r\n",
    "hint": []
}