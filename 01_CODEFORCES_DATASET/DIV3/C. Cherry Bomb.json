{
    "link": "https://codeforces.com//contest/2106/problem/C",
    "problemId": "3350608",
    "problem_idx": "C",
    "shortId": "2106C",
    "contest_number": "2106",
    "problem_submissions": {
        "G1": [
            317037524,
            317062262,
            317061590,
            317052941,
            317066213,
            317065911
        ],
        "F": [
            317035761,
            317047729,
            317029292,
            317067306,
            317073415,
            317070219,
            317022800,
            317030307,
            317028689,
            317050113,
            317855906,
            317044171,
            317050574,
            317045837,
            317043135,
            317044827,
            317050773,
            317041440
        ],
        "E": [
            317020313,
            317010744,
            317046134,
            317035937,
            317029339,
            317046150,
            317010414,
            317018526,
            317021744,
            317013609,
            317950136,
            317028070,
            317036331,
            317032678,
            317025857,
            317036190,
            317040887
        ],
        "D": [
            316999946,
            317027974,
            317011069,
            317020862,
            317037534,
            317031860,
            316984555,
            317007925,
            317005998,
            317006604,
            317007086,
            317010692,
            317015300,
            317015795,
            317017807,
            317018294,
            316999673
        ],
        "C": [
            316988591,
            316986472,
            316999853,
            317026133,
            316999286,
            317002344,
            316991443,
            316988219,
            317000196,
            316978313,
            316994740,
            316996215,
            317004560,
            317006037,
            317004240,
            317004181,
            316991883
        ],
        "B": [
            316981000,
            316979542,
            316988448,
            316988900,
            316993570,
            316993687,
            317000718,
            316983017,
            316992142,
            316991120,
            316981211,
            316985408,
            316994310,
            316999518,
            316991380,
            316984785,
            316983692
        ],
        "A": [
            316977086,
            316978937,
            316978575,
            316978826,
            316982345,
            316979125,
            316997396,
            316978412,
            316977215,
            316981299,
            316977127,
            316977164,
            316982363,
            316981149,
            316979807,
            316979304,
            316977212
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142254",
    "editorial": "(Author & Analysis: SpyrosAliv) SolutionSuppose that the two arrays and\r\nof size are called -complementary if and only if for all .Observation 1:\r\nIf we know every element of , and we know , we can uniquely determine\r\nthe elements of .We split the problem into two cases.The first case is\r\nif there exists at least one element in that is not missing. Then we\r\nknow the required sum for every . For every index , we know . If doesnâ€™t\r\nhold for some index, the answer is , since it is impossible for the two\r\narrays to be complementary while . Otherwise, the answer is from\r\nObservation 1.The second case is if every element of is\r\nmissing:Observation 2: if and are -complementary, then the maximum\r\nelement of is positioned at the index where the minimum element of is\r\npositioned at. That is because in order for to hold when is minimum,\r\nmust be maximized.Observation 3: The maximum element of must be at least\r\n, i.e. the difference between the maximum and minimum elements of .\r\nProofSuppose that the maximum of is positioned at index , and . From\r\nObservation 2, , since the position of the maximum element of is the\r\nposition of the minimum element of . Then , and (since ), so (since ).\r\nHowever, cannot hold (since elements of cannot be negative), therefore\r\nthis is a contradiciton.From Observation 3 and 1, we can set the maximum\r\nelement of to , which results to different solutions.\r\n",
    "name": "C. Cherry Bomb",
    "statement": "Two integer arrays a and b of size n are if there exists an integer x\r\nsuch that a_i + b_i = x over all 1\r\nle i\r\nle n. For example, the arrays a = [2, 1, 4] and b = [3, 4, 1] are\r\ncomplementary, since a_i + b_i = 5 over all 1\r\nle i\r\nle 3. However, the arrays a = [1, 3] and b = [2, 1] are not\r\ncomplementary.Cow the Nerd thinks everybody is interested in math, so he\r\ngave Cherry Bomb two integer arrays a and b. It is known that a and b\r\nboth contain n integers not greater than k. Unfortunately, Cherry Bomb\r\nhas lost some elements in b. Lost elements in b are denoted with -1.\r\nHelp Cherry Bomb count the number of possible arrays b such that: a and\r\nb are . All lost elements are replaced with non-negative integers no\r\nmore than k.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Cherry Bomb.json",
    "hint": []
}