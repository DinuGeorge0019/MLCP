{
    "link": "https://codeforces.com//contest/1702/problem/D",
    "problemId": "1456429",
    "problem_idx": "D",
    "shortId": "1702D",
    "contest_number": "1702",
    "problem_submissions": {
        "F": [
            163542113,
            163514028,
            163524616,
            163733546,
            163545296,
            163524924,
            163529358,
            163536513,
            163519866,
            163525233,
            163564879,
            163534380,
            163538783,
            163561947,
            163540969,
            163535655,
            163561064,
            163562404,
            163544085,
            163519016
        ],
        "G2": [
            163534991,
            163559407,
            163548172,
            163549996,
            163554176,
            163540379,
            163557182,
            163571429,
            163575000,
            163545502,
            163571447,
            163565952,
            163549470,
            163566226,
            163577860,
            163531079,
            163555250,
            163574346,
            163573572
        ],
        "G1": [
            163534865,
            163559321,
            163548387,
            163550273,
            163555106,
            163540096,
            163557483,
            163571026,
            163549886,
            163545065,
            163540644,
            163566213,
            163549672,
            163557387,
            163546571,
            163531433,
            163554999,
            163574214,
            163573379
        ],
        "E": [
            163505777,
            163504465,
            163513283,
            163513644,
            163510195,
            163546834,
            163520208,
            163505881,
            163516258,
            163517435,
            163526737,
            163516735,
            163506369,
            163532804,
            163528744,
            163567339,
            163567093,
            163519899,
            163524058,
            163508144
        ],
        "D": [
            163487820,
            163493027,
            163495875,
            163501404,
            163498661,
            163506170,
            163499925,
            163492796,
            163488953,
            163500375,
            163495848,
            163492570,
            163483263,
            163496253,
            163491216,
            163495136,
            163508155,
            163491736,
            163485984
        ],
        "C": [
            163479124,
            163482190,
            163488652,
            163621464,
            163492523,
            163493122,
            163498422,
            163492339,
            163483795,
            163482325,
            165952921,
            163494102,
            163486863,
            163484454,
            163478228,
            163483131,
            163484825,
            163489721,
            163494820,
            163481705,
            163480845
        ],
        "B": [
            163471434,
            163474194,
            163479257,
            163481288,
            163480379,
            163488341,
            163485489,
            163475757,
            163474641,
            163485384,
            163491538,
            163474852,
            163473580,
            163475855,
            163477521,
            163484846,
            163484562,
            163474319,
            163475121
        ],
        "A": [
            163468217,
            163469784,
            163473310,
            163468633,
            163472585,
            163470981,
            163470350,
            163469302,
            163470110,
            163473679,
            163468658,
            163468889,
            163468241,
            163490145,
            163470656,
            163480525,
            163486237,
            163468246,
            163469702
        ]
    },
    "name": "D. Not a Cheap String",
    "statement": "Let s be a string of lowercase Latin letters. Its price is the sum of\r\nthe indices of letters (an integer between 1 and 26) that are included\r\nin it. For example, the price of the string is 1+2+3+1=7.The string w\r\nand the integer p are given. Remove the minimal number of letters from w\r\nso that its price becomes less than or equal to p and print the\r\nresulting string. Note that the resulting string may be empty. You can\r\ndelete arbitrary letters, they do not have to go in a row. If the price\r\nof a given string w is less than or equal to p, then nothing needs to be\r\ndeleted and w must be output.Note that when you delete a letter from w,\r\nthe order of the remaining letters is preserved. For example, if you\r\ndelete the letter from the string , you get .\r\n",
    "solutions": [
        "/*\nPlaying Div.3, easy edition\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define rep(i,m,n) for (auto i=m;i<=n;i++)\n#define reb(i,m,n) for (auto i=m;i>=n;i--)\n#define rv(i,vt) for (auto i:vt)\n#define ii pair<ll,ll>\n#define vi vector<ll>\n#define F first\n#define S second\n#define pb push_back\nusing namespace std;\nconst ll N=1e6+5,mod=1e9+7;\nll n,k,c,a[N],vis[N];\nii p[N];\nstring s;\nvoid solo()\n{\n    cin>>s>>k;\n    s=\".\"+s;\n    n=s.size()-1;\n    rep(i,1,n) p[i]={int(s[i]-96),i},vis[i]=0;\n    sort(p+1,p+n+1);\n    c=0;\n    rep(i,1,n) c+=int(s[i]-96);\n    reb(i,n,1) if (c>k) c-=p[i].F,vis[p[i].S]=1;\n    rep(i,1,n) if (vis[i]==0) cout<<s[i];\n}\nint main()\n{\n   ios_base::sync_with_stdio(0);\n   cin.tie(0);\n   cout.tie(0);\n   ll ts=1;\n   cin>>ts;\n   while (ts--){\n       solo();\n       cout<<endl;\n   }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Not a Cheap String.json",
    "editorial_link": "https://codeforces.com//blog/entry/104763",
    "editorial": "The main idea is that it is always better to remove the most expensive\r\nsymbol. To do this quickly, we will count all the symbols and remove\r\nthem from the most expensive to the cheapest, counting how many times we\r\nhave removed each. During the output, we will skip the characters the\r\nnumber of times that we deleted.\r\n"
}