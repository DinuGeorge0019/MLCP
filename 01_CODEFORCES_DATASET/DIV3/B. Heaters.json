{
    "link": "https://codeforces.com//contest/1066/problem/B",
    "problemId": "235860",
    "problem_idx": "B",
    "shortId": "1066B",
    "contest_number": "1066",
    "problem_submissions": {
        "F": [
            44205429,
            44212106,
            44214312,
            44211772,
            44215735,
            44216480,
            44217948,
            44226593
        ],
        "A": [
            44198897,
            44190264,
            44190996,
            44190521,
            44194374,
            44191748,
            44192884,
            44190114,
            44190457,
            44190392,
            44190295,
            44232541,
            44190105,
            44190131,
            44190364,
            44190102,
            44190147,
            44190161,
            44189962,
            44194814,
            44190476
        ],
        "B": [
            44197927,
            44195073,
            44192967,
            44193419,
            44192423,
            44197883,
            44195893,
            44197752,
            44191223,
            44190844,
            44195475,
            44193709,
            44258187,
            44195185,
            44192726,
            44197021,
            44193282,
            44199995,
            44192974,
            44197693,
            44198781,
            44196227
        ],
        "E": [
            44194302,
            44198044,
            44197688,
            44200186,
            44206112,
            44204683,
            44211808,
            44198204,
            44195532,
            44205080,
            44203248,
            44258229,
            44204157,
            44207684,
            44206425,
            44203537,
            44205955,
            44206848,
            44208459,
            44207862,
            44206046
        ],
        "D": [
            44192050,
            44200143,
            44200943,
            44204312,
            44203052,
            44199330,
            44205029,
            44195917,
            44202796,
            44193485,
            44198842,
            44258212,
            44199756,
            44199261,
            44202172,
            44206141,
            44203730,
            44203685,
            44199896,
            44193449,
            44202596
        ],
        "C": [
            44190191,
            44192207,
            44196592,
            44195653,
            44199921,
            44207097,
            44202048,
            44193208,
            44195430,
            44199895,
            44196374,
            44258203,
            44196767,
            44197574,
            44194617,
            44197700,
            44192395,
            44195734,
            44195568,
            44200428,
            44198081
        ]
    },
    "name": "B. Heaters",
    "statement": "Vova\u2019s house is an array consisting of n elements (yeah, this is the\r\nfirst problem, I think, where someone in the array). There are heaters\r\nin some positions of the array. The i-th element of the array is 1 if\r\nthere is a heater in the position i, otherwise the i-th element of the\r\narray is 0.Each heater has a value r (r is the same for all heaters).\r\nThis value means that the heater at the position pos can warm up all the\r\nelements in range [pos - r + 1; pos + r - 1].Vova likes to walk through\r\nhis house while he thinks, and he hates cold positions of his house.\r\nVova wants to switch some of his heaters on in such a way that each\r\nelement of his house will be warmed up by at least one heater. Vova\u2019s\r\ntarget is to warm up the whole house (all the elements of the array),\r\ni.e. if n = 6, r = 2 and heaters are at positions 2 and 5, then Vova can\r\nwarm up the whole house if he switches all the heaters in the house on\r\n(then the first 3 elements will be warmed up by the first heater and the\r\nlast 3 elements will be warmed up by the second heater).Initially, all\r\nthe heaters are off.But from the other hand, Vova didn\u2019t like to pay\r\nmuch for the electricity. So he wants to switch the number of heaters on\r\nin such a way that each element of his house is warmed up by at least\r\none heater.Your task is to find this number of heaters or say that it is\r\nimpossible to warm up the whole house.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define FOR(i, a, b) for (int i = (a); i <= (b); ++i)\n#define FORD(i, a, b) for (int i = (a); i >= (b); --i)\n#define REP(i, a) for (int i = 0; i < (a); ++i)\n#define DEBUG(x) { cerr << #x << '=' << x << endl; }\n#define Arr(a, l, r) { cerr << #a << \" = {\"; FOR(_, l, r) cerr << ' ' << a[_]; cerr << \"}\\n\"; }\n#define N 1010100\n#define pp pair<int, int>\n#define endl '\\n'\n#define IO ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)\n#define taskname \"\"\n#define bit(S, i) (((S) >> (i)) & 1)\n#define all(s) s.begin(), s.end()\nusing namespace std;\n\nint a[N], dp[N];\nint main() {\n    #ifdef NERO\n    freopen(\"test.inp\",\"r\",stdin);\n    freopen(\"test.out\",\"w\",stdout);\n    double stime = clock();\n    #else \n        //freopen(taskname\".inp\",\"r\",stdin);\n        //freopen(taskname\".out\",\"w\",stdout);\n    #endif //NERO\n    IO;\n    int n, r;\n    cin >> n >> r;\n    FOR(i, 1, n) cin >> a[i];\n    FOR(i, 1, n) dp[i] = 1e9;\n    dp[0] = 0;\n    FOR(i, 1, n) if (a[i]) {\n        int MIN = 1e9;\n        FOR(j, i - r, i - 1) if (j >= 0) MIN = min(MIN, dp[j]);\n        FOR(j, i, i + r - 1) dp[j] = min(dp[j], MIN + 1);\n    }\n    if (dp[n] == 1e9) dp[n] = -1;   \n    cout << dp[n];\n    #ifdef NERO\n    double etime = clock();\n    cerr << \"Execution time: \" << (etime - stime) / CLOCKS_PER_SEC * 1000 << \" ms.\\n\";\n    #endif // NERO\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "two pointers"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Heaters.json",
    "editorial_link": "https://codeforces.com//blog/entry/62419",
    "editorial": "Let\u00e2\u0080\u0099s solve this problem greedily. Let be the last position from the\r\nleft covered by at least one heater. Initially, equals . While , lets\r\nrepeat the following process: firstly, we have to find the rightmost\r\nheater in range . It can be done in time because of given constrains or\r\nin using precalculated prefix values for each in range . If there is no\r\nsuch heater then the answer is , otherwise let\u00e2\u0080\u0099s set , increase the\r\nanswer by and repeat the process if .There is another one solution to\r\nthis problem. Assume that the initial answer equals to the total number\r\nof heaters. Let\u00e2\u0080\u0099s calculate an array of length , where means the number\r\nof heaters covering the -th element. It can be done in . This array will\r\nmean that we are switch all the heaters on and we know for each element\r\nthe number of heaters covers this element. Now if for at least holds\r\nthen the answer is . Otherwise let\u00e2\u0080\u0099s switch useless heaters off. Let\u00e2\u0080\u0099s\r\niterate over all heaters from left to right. Let the current heater have\r\nposition . We need to check if it is useless or not. Let\u00e2\u0080\u0099s iterate in\r\nrange and check if there is at least one element in this segment such\r\nthat . If there is then the current heater is not useless and we cannot\r\nswitch it off. Otherwise we can decrease the answer by , switch this\r\nheater off (decrease for all in range ) and continue the process.\r\n"
}