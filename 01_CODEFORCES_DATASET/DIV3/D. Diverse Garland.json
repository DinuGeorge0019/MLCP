{
    "link": "https://codeforces.com//contest/1108/problem/D",
    "problemId": "286770",
    "problem_idx": "D",
    "shortId": "1108D",
    "contest_number": "1108",
    "problem_submissions": {
        "F": [
            48844825,
            48862163,
            48848324,
            48848130,
            48852294,
            48850212,
            48838457,
            48838256,
            48836252,
            48909101,
            48845595,
            48850104,
            48843426,
            48844816,
            48883602
        ],
        "E1": [
            48835917,
            48840618,
            48808903,
            48835183,
            48832250,
            48823205,
            48832522,
            48828568,
            48833167,
            48832156,
            48841738,
            48836232,
            48828690,
            48847940,
            48835833,
            48836036,
            48834638,
            48838866,
            48844104
        ],
        "E2": [
            48835709,
            48844109,
            48822818,
            48835022,
            48838613,
            48845982,
            48955072,
            48856736,
            48884776,
            48838175,
            48842079,
            48839961,
            48846288,
            48846487,
            48844520,
            48843523
        ],
        "D": [
            48819956,
            48826572,
            48809346,
            48824842,
            48817280,
            48817540,
            48824822,
            48819948,
            48824552,
            48909120,
            48824055,
            48812013,
            48824784,
            48817759,
            48822110,
            48828365,
            48827975,
            48821821,
            48832316,
            48824776
        ],
        "C": [
            48816726,
            48823616,
            48805698,
            48816182,
            48814495,
            48812589,
            48819587,
            48815831,
            48817913,
            48909136,
            48819613,
            48817733,
            48820640,
            48837755,
            48816702,
            48811230,
            48820437,
            48818121,
            48821557,
            48818894
        ],
        "B": [
            48812488,
            48806606,
            48811060,
            48806723,
            48809336,
            48805383,
            48812792,
            48811800,
            48810047,
            48909150,
            48813994,
            48807942,
            48810147,
            48809048,
            48810769,
            48806352,
            48811586,
            48811107,
            48808604,
            48810570
        ],
        "A": [
            48804415,
            48868180,
            48868032,
            48808820,
            48801772,
            48803106,
            48804293,
            48801670,
            48804786,
            48802995,
            48802478,
            48909143,
            48804883,
            48801594,
            48807139,
            48804067,
            48807170,
            48802448,
            48806432,
            48806874,
            48802749,
            48804777
        ]
    },
    "name": "D. Diverse Garland",
    "statement": "You have a garland consisting of n lamps. Each lamp is colored red,\r\ngreen or blue. The color of the i-th lamp is s_i (”, ” and ” colors of\r\nlamps in the garland).You have to recolor some lamps in this garland\r\n(recoloring a lamp means changing its initial color to another) in such\r\na way that the obtained garland is .A garland is called if any two\r\nadjacent (consecutive) lamps (i. e. such lamps that the distance between\r\ntheir positions is 1) have distinct colors.In other words, if the\r\nobtained garland is t then for each i from 1 to n-1 the condition t_i\r\nne t_{i + 1} should be satisfied.Among all ways to recolor the initial\r\ngarland to make it you have to choose one with the number of recolored\r\nlamps. If there are multiple optimal solutions, print of them.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define fn \"test\"\n#define fn1 \"\"\n\nusing namespace std;\n\nconst int mn = 1 * (int)(1e5) + 10;\nconst int mod = 1 * (int)(1e9) + 7;\nconst int mm = 1 * (int)(1e3) + 10;\nconst int base = 1 * (int)(1e9);\nconst bool aNs = 0;\n\nint tt, ntest = 1;\n\nvoid docfile()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    if (ifstream(fn\".inp\"))\n    {\n        freopen(fn\".inp\", \"r\", stdin);\n        if (!aNs) freopen(fn\".out\", \"w\", stdout);\n\t\telse freopen (fn\".ans\", \"w\", stdout);\n    }else if (ifstream(fn1\".inp\"))\n    {\n        freopen(fn1\".inp\", \"r\", stdin);\n        freopen(fn1\".out\", \"w\", stdout);\n    }\n}\n\ntemplate <typename T>\nvoid read(T& x)\n{\n    x = 0; T f = 1;\n    char ch = getchar();\n    while (!isdigit(ch)) f = ch == '-' ? - f : f, ch = getchar();\n    while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n    x *= f;\n}\n\ntemplate <typename T>\nvoid write (T a)\n{\n    if (a < 0)\n    {\n        putchar ('-');\n        write (-a);\n        return;\n    }\n    if (a < 10)\n    {\n        putchar ('0' + a);\n        return;\n    }\n    write (a / 10);\n    putchar ((char)('0' + (a % 10)));\n}\n\nint a[40];\n\nvoid enter()\n{\n    int n;\n    string s;\n    cin >> n >> s;\n    string s1 = \"RGB\";\n    int sol = 0;\n    a['R' - 'A'] = 0;\n    a['G' - 'A'] = 1;\n    a['B' - 'A'] = 2;\n    for (int i = 1; i < n; ++ i)\n    if (s[i] == s[i - 1])\n    {\n        ++ sol;\n        if (i == n - 1 || s[i] == s[i + 1])\n        {\n            s[i] = (s1[(a[s[i] - 'A'] + 1) % 3]);\n        }\n        else\n        {\n            s[i] = (s1[3 - a[s[i] - 'A'] - a[s[i + 1] - 'A']]);\n        }\n    }\n    cout << sol << \"\\n\";\n    cout << s;\n}\n\nvoid solve()\n{\n\n}\n\nvoid print_result()\n{\n\n}\n\nint main()\n{\n    docfile();\n    //cin>>ntest;\n    for (tt = 1; tt <= ntest; ++ tt)\n    {\n        enter();\n        solve();\n        print_result();\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dp",
        "greedy"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Diverse Garland.json",
    "editorial_link": "https://codeforces.com//blog/entry/64751",
    "editorial": "Letâs divide the initial string into blocks of consecutive equal\r\nletters. For example, if we have the string \"\" then have blocks: the\r\nfirst block is two letters â, the second one is three letters â, the\r\nthird one is two letters â and the last one is four letters â.Letâs see\r\nat the current block (let it has the length ) and consider two cases.The\r\nfirst case is when this block has odd length. Then it seems like \"\". So,\r\nwhat is the minimum number of recolors we need to make this block\r\ncorrect? It is . Why can we always make this block correct for such\r\nnumber of recolors? Because we can recolor all â at even positions to\r\nany â which differs from â. So our block will be look like \"\".The second\r\ncase is when this block has even length. Then it seems like \"\" where â\r\nis the next block letter (if the next block exists, because the last\r\nblock doesnât have the next one). What is the minimum number of recolors\r\nin this case? It is . How can we recolor this block to make it correct?\r\nLetâs recolor all â at even positions (again) to any â which differs\r\nfrom â and differs from â. So our block will be look like \"\".So all we\r\nhave to do is to iterate over all blocks from left to right and apply\r\nthe algorithm above to recolor them.\r\n",
    "hint": []
}