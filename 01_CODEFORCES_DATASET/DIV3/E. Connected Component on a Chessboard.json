{
    "link": "https://codeforces.com//contest/1196/problem/E",
    "problemId": "377795",
    "problem_idx": "E",
    "shortId": "1196E",
    "contest_number": "1196",
    "problem_submissions": {
        "F": [
            57681700,
            57688661,
            57693585,
            57690559,
            57665659,
            57695119,
            57781679,
            83242061,
            57916383,
            68726830,
            82270831
        ],
        "B": [
            57673541,
            57649544,
            57652269,
            57654230,
            57679335,
            57653669,
            57651478,
            57654275,
            57652865,
            57652183,
            103121358,
            59232415,
            57652308,
            57652960,
            57653412,
            57655574,
            58261889,
            57653528,
            57654061,
            57651928,
            57655085,
            57658491,
            57652103
        ],
        "A": [
            57662145,
            57646582,
            57648135,
            57648211,
            57648294,
            57649147,
            57647064,
            57648725,
            57646690,
            57646929,
            57647619,
            57646915,
            57649771,
            57648481,
            58261863,
            57647513,
            57649572,
            57646786,
            57647851,
            57652602,
            57647144
        ],
        "E": [
            57660066,
            57677485,
            57675366,
            57677436,
            57681282,
            57677830,
            57673842,
            57672850,
            57676048,
            57682764,
            57679085,
            57680414,
            57680019,
            57677517,
            58261965,
            57678819,
            57684523,
            57681696,
            57679722,
            57677290,
            57678640
        ],
        "C": [
            57658492,
            57654354,
            57658481,
            57657615,
            57689981,
            57659504,
            57656630,
            57658570,
            57658429,
            57659478,
            57661824,
            57660864,
            57657934,
            57660478,
            58261906,
            57662669,
            57660523,
            57674035,
            57662185,
            57663396,
            57666540
        ],
        "D1": [
            57651996,
            57658879,
            57661770,
            57666118,
            57654079,
            57666561,
            57662530,
            57664730,
            57663635,
            57664913,
            57668860,
            57664436,
            57664910,
            57666776,
            58261921,
            57667464,
            57664679,
            57661598,
            57670813,
            57668128,
            57657381
        ],
        "D2": [
            57650929,
            57658567,
            57664847,
            57665451,
            57654443,
            57666008,
            57663080,
            57665252,
            57667224,
            57664331,
            57668491,
            57667512,
            57669290,
            57667407,
            58261939,
            57671667,
            57668510,
            57661989,
            57670493,
            57667835,
            57657749
        ]
    },
    "name": "E. Connected Component on a Chessboard",
    "statement": "You are given two integers b and w. You have a chessboard of size 10^9\r\ntimes 10^9 with the top left cell at (1; 1), the cell (1; 1) is painted\r\n.Your task is to find a connected component on this chessboard that\r\ncontains exactly b black cells and exactly w white cells. Two cells are\r\ncalled connected if they share a side (i.e. for the cell (x, y) there\r\nare at most four connected cells: (x - 1, y), (x + 1, y), (x, y - 1),\r\n(x, y + 1)). A set of cells is called a connected component if for every\r\npair of cells C_1 and C_2 from this set, there exists a sequence of\r\ncells c_1, c_2, ..., c_k such that c_1 = C_1, c_k = C_2, all c_i from 1\r\nto k are belong to this set of cells and for every i\r\nin [1, k - 1], cells c_i and c_{i + 1} are connected.Obviously, it can\r\nbe impossible to find such component. In this case print \"\". Otherwise,\r\nprint \"\" and suitable connected component.You have to answer q\r\nindependent queries.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define pa pair<int,int>\nusing namespace std;\ntypedef long long ll;\ninline void work()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    if (n>3*m+1||m>3*n+1)\n    {\n        puts(\"NO\");\n        return;\n    }\n    int x=2,y=2;\n    if (n<m){x=3;y=2;swap(n,m);}//n>=m\n    puts(\"YES\");\n    printf(\"%d %d\\n\",x,y);m--;\n    stack<pa>s;\n    s.push({x-1,y});\n    s.push({x+1,y});\n    s.push({x,y-1});\n    s.push({x,y+1});\n    for (int i=1;i<=m;i++)\n    {\n        s.pop();\n        y++;\n        printf(\"%d %d\\n\",x,y);\n        n--;\n        y++;\n        printf(\"%d %d\\n\",x,y);\n        s.push({x+1,y});\n        s.push({x-1,y});\n        s.push({x,y+1});\n    }\n    for (int i=1;i<=n;i++)\n    {\n        printf(\"%d %d\\n\",s.top().first,s.top().second);\n        s.pop();\n    }\n}\nint main()\n{\n    int T;scanf(\"%d\",&T);\n    while (T--)work();\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Connected Component on a Chessboard.json",
    "editorial_link": "https://codeforces.com//blog/entry/68655",
    "editorial": "Iâll consider the case when , the other case is symmetric and the answer\r\nI construct is the same but shifted by to the right.Consider the given\r\nfield as a matrix where is the number of row and is the number of\r\ncolumn. Firstly, letâs build the line of length from the cell to the\r\ncell . Then will decrease by and will () become .Then we have two black\r\ncells to the left and to the right ( and ) and black cells to the up\r\n(all cells () for all from to ) and black cells to the down (all cells\r\n() for all from to ). Letâs add the required number of cells to the\r\nanswer.If even after adding all these cells still be greater than then\r\nthe answer is \"\" (maybe there will be a proof why it is so but you can\r\nread it already from other participants). Otherwise the answer is \"\" and\r\nwe constructed the required component.\r\n",
    "hint": []
}