{
    "link": "https://codeforces.com//contest/1256/problem/F",
    "problemId": "459829",
    "problem_idx": "F",
    "shortId": "1256F",
    "contest_number": "1256",
    "problem_submissions": {
        "C": [
            64235233,
            64227620,
            64227351,
            64236152,
            64252052,
            64225352,
            64226667,
            64237109,
            64249877,
            64222625,
            64278670,
            64233886,
            64252797,
            64233119,
            64246491,
            64253891
        ],
        "F": [
            64233031,
            64241980,
            64252827,
            64253934,
            64245116,
            64253899,
            64232381,
            64237354,
            64239968,
            64313496,
            64235709,
            64249337
        ],
        "E": [
            64221946,
            64223976,
            64247117,
            64244704,
            64224516,
            64249242,
            64227415,
            64227683,
            64231825,
            64236214,
            64243137,
            64237104,
            64247426,
            64247032,
            64250549,
            64247147,
            64241890,
            64239099,
            64237754
        ],
        "B": [
            64221631,
            64212047,
            64218399,
            64317159,
            64218926,
            64240089,
            64228311,
            64210409,
            64218403,
            64212202,
            64219328,
            64218836,
            64219933,
            64225452,
            64221378,
            64217229,
            64214632,
            64216240,
            64215942
        ],
        "D": [
            64215172,
            64216393,
            64233882,
            64227241,
            64227346,
            64251438,
            64216967,
            64223705,
            64223794,
            64230378,
            64223867,
            64223333,
            64232043,
            64229490,
            64228441,
            64222986,
            64234141,
            64223821,
            64223652
        ],
        "A": [
            64212957,
            64209179,
            64210635,
            64210231,
            64209282,
            64209523,
            64209181,
            64209149,
            64208937,
            64208806,
            64214758,
            64212460,
            64209582,
            64215325,
            64209661,
            64209581,
            64209733,
            64208776,
            64209184,
            64209129
        ]
    },
    "name": "F. Equalizing Two Strings",
    "statement": "You are given two strings s and t both of length n and both consisting\r\nof lowercase Latin letters.In one move, you can choose any length len\r\nfrom 1 to n and perform the following operation: Choose any contiguous\r\nsubstring of the string s of length len and reverse it; choose any\r\ncontiguous substring of the string t of length len and reverse it as\r\nwell. Note that during one move you reverse substring of the string s\r\nand substring of the string t.Also note that borders of substrings you\r\nreverse in s and in t , the only restriction is that you reverse the\r\nsubstrings of equal length. For example, if len=3 and n=5, you can\r\nreverse s[1\r\ndots 3] and t[3\r\ndots 5], s[2\r\ndots 4] and t[2\r\ndots 4], but not s[1\r\ndots 3] and t[1\r\ndots 2].Your task is to say if it is possible to make strings s and t\r\nequal after some (possibly, empty) sequence of moves.You have to answer\r\nq independent test cases.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXA=4e5;\nint n,a[MAXA],b[MAXA],tmp,j;\nchar s1[MAXA],s2[MAXA];\nint solve(){\n    scanf(\"%d\",&n);\n    scanf(\"%s\",s1+1);\n    scanf(\"%s\",s2+1);\n    for(int i=0;i<26;i++) a[i]=b[i]=0;\n    for(int i=1;i<=n;i++){\n\ta[s1[i]-'a']++;\n\tb[s2[i]-'a']++;\n    }\n    for(int i=0;i<26;i++)\n\tif(a[i]!=b[i]) return printf(\"NO\\n\"),0;\n    for(int i=0;i<26;i++)\n\tif(a[i]>1||b[i]>1) return printf(\"YES\\n\"),0;\n    if(n==1) return printf(\"YES\\n\"),0;\n    for(int i=1;i<=n-2;i++){\n\tif(s1[i]==s2[i]) continue;\n\tfor(j=i+1;j<=n;j++)\n\t    if(s1[i]==s2[j]) break;\n\tif((j-i)&1) swap(s1[i+1],s1[i+2]);\n\ttmp=s2[j];\n\tfor(;j>i;j--)\n\t    s2[j]=s2[j-1];\n\ts2[i]=tmp;\n    }\n    if(s1[n]==s2[n]) printf(\"YES\\n\");\n    else printf(\"NO\\n\");\n    return 0;\n}\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "sortings",
        "strings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Equalizing Two Strings.json",
    "editorial_link": "https://codeforces.com//blog/entry/71184",
    "editorial": "The necessary condition to make strings equal is that the number of\r\noccurrences of each character should be the same in both strings. Letâs\r\nshow that if some character appears more than once, we always can make\r\nstrings equal. How? Letâs sort the first string by swapping adjacent\r\ncharacters (and it does not matter what do we do in the second string).\r\nThen letâs sort the second string also by swapping adjacent characters\r\nbut choose the pair of adjacent equal characters in the first string (it\r\nalways exists because the first string is already sorted).Otherwise, all\r\ncharacters in both strings are distinct and they lengths are at most .\r\nThen the answer is if the parity of the number of inversions (the number\r\ninversions in the array is the number of such pairs of indices that but\r\n) are the same. It can be proven in the following way: every swap of two\r\nadjacent elements changes the parity of the number of inversions.Time\r\ncomplexity: .\r\n",
    "hint": []
}