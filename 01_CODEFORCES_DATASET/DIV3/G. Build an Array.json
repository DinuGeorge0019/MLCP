{
    "link": "https://codeforces.com//contest/2114/problem/G",
    "problemId": "3405991",
    "problem_idx": "G",
    "shortId": "2114G",
    "contest_number": "2114",
    "problem_submissions": {
        "G": [
            321491820,
            321510895,
            321522705,
            321536205,
            321704142,
            321493544,
            321539010
        ],
        "D": [
            321453109,
            321433567,
            321464732,
            321435389,
            321418906,
            321422419,
            321426564,
            321427705,
            321433853,
            321447085,
            321448245,
            321448177,
            321438602,
            321430809,
            321444460,
            321433422,
            321441969,
            321447455
        ],
        "F": [
            321437069,
            321471653,
            321400560,
            321452634,
            321458136,
            321471530,
            321457608,
            321478622,
            321469763,
            321468286,
            321467066,
            321488259,
            321482829,
            321485396,
            321504556,
            321482048,
            321513883,
            321499978,
            321518132
        ],
        "E": [
            321425663,
            321448629,
            321447346,
            321419017,
            321427993,
            321438291,
            321439608,
            321441935,
            321448509,
            321455125,
            321437156,
            321464203,
            321462222,
            321450510,
            321461412,
            321455167,
            321460727,
            321424098
        ],
        "C": [
            321406317,
            321410944,
            321421134,
            321404932,
            321410584,
            321406511,
            321405596,
            321411420,
            321413167,
            321412908,
            321422303,
            321404419,
            321413740,
            321414690,
            321426901,
            321412443,
            321424589,
            321401692
        ],
        "B": [
            321397200,
            321399911,
            321415073,
            321397245,
            321403501,
            321400846,
            321423069,
            321401151,
            321406842,
            321401907,
            321401468,
            321410144,
            321404248,
            321407958,
            321413444,
            321402900,
            321412452,
            321392901
        ],
        "A": [
            321389400,
            321390323,
            321390935,
            321389192,
            321396857,
            321391523,
            321392082,
            321388740,
            321389560,
            321392729,
            321389834,
            321394641,
            321393501,
            321388215,
            321392515,
            321389988,
            321388815,
            321388090
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143268",
    "editorial": "Let’s start with a slow solution: we will iterate through the element\r\nthat we will add first for as many operations as possible and will add\r\nthe other elements to the left and right, using as many operations as\r\npossible. When adding a new number, we will also look at the number that\r\nwas added before it from the same side.Let’s denote the previous number\r\nas and the current number as . We can add by adding for some , and we\r\nwill find the maximum value of for which is divisible by . However, if\r\nwe only add the values , they may merge with if is a power of two. In\r\nthat case, in order to add without merging with , we must first add ,\r\nand only then as many elements as possible.After calculating all these\r\nvalues, we know the maximum possible number of operations to construct\r\nthe array for a fixed starting element. Now, note that if two elements\r\nmerged into one after an operation, they could have been added in one\r\noperation, meaning the number of operations can always be reduced by .\r\nThus, if the maximum is greater than , it is also possible to construct\r\nthe array in operations. In fact, the values for some starting elements\r\nmay not be entirely accurate, since more operations can be performed\r\nwhen adding the first two elements, but they will be counted correctly\r\nwhen we process the larger of the two neighboring elements as the\r\nstarting one.Now, to make our solution work in instead of , we note that\r\nwe are calculating the sums of additions for the same , multiple times,\r\nso we can simply precompute these values on the prefix and suffix and\r\nfind answers for fixed starting elements in .\r\n",
    "name": "G. Build an Array",
    "statement": "Yesterday, Dima found an empty array and decided to add some integers to\r\nit. He can perform the following operation an unlimited number of times:\r\nadd any integer to the left or right end of the array. then, as long as\r\nthere is a pair of identical adjacent elements in the array, they will\r\nbe replaced by their sum. It can be shown that there can be at most one\r\nsuch pair in the array at the same time.For example, if the array is [3,\r\n6, 4] and we add the number 3 to the left, the array will first become\r\n[3, 3, 6, 4], then the first two elements will be replaced by 6, and the\r\narray will become [6, 6, 4], and then [12, 4].After performing the\r\noperation k times, he thinks he has obtained an array a of length n, but\r\nhe does not remember which operations he applied. Determine if there\r\nexists a sequence of k operations that could result in the given array a\r\nfrom an empty array, or determine that it is impossible.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "dp",
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\G. Build an Array.json",
    "hint": []
}