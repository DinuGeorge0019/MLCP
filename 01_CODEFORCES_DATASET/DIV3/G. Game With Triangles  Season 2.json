{
    "link": "https://codeforces.com//contest/2074/problem/G",
    "problemId": "3258846",
    "problem_idx": "G",
    "shortId": "2074G",
    "contest_number": "2074",
    "problem_submissions": {
        "G": [
            310132242,
            310132793,
            310111376,
            310125781,
            310197618,
            310146608,
            312938343,
            310315994,
            310128989
        ],
        "F": [
            310098470,
            310107235,
            310132603,
            310144290,
            310142350,
            310095240,
            310088922,
            310104486,
            310111882,
            310114360,
            310055545,
            310114532,
            310087064,
            310071130,
            310070363,
            310121029,
            310125190,
            310260930
        ],
        "E": [
            310064080,
            310090608,
            310082677,
            310187214,
            310134023,
            310030414,
            310069610,
            310080288,
            310088548,
            310077001,
            310137549,
            310085816,
            310080720,
            310101939,
            310119390,
            310098102,
            310080639,
            310067165
        ],
        "D": [
            310047067,
            310080743,
            310088823,
            310333806,
            310109105,
            310020176,
            322969380,
            310038637,
            310047803,
            310058834,
            310047053,
            310029205,
            310058830,
            316604351,
            316604194,
            310015658,
            310029425,
            310034360,
            310056377,
            310044018,
            310037025
        ],
        "C": [
            310035807,
            310055765,
            310043440,
            310186815,
            310075269,
            310008768,
            310020745,
            310018683,
            310030298,
            310025444,
            310031238,
            310017984,
            310032803,
            316602404,
            310098070,
            310093063,
            310019759,
            310037963,
            310019264,
            310027779,
            310011693
        ],
        "B": [
            309999438,
            310009990,
            310009090,
            310185181,
            310027758,
            309994239,
            309999685,
            310010932,
            309995321,
            310001699,
            310004547,
            310000352,
            316602154,
            309997891,
            310006026,
            309998747,
            310004146,
            309998590,
            310001033
        ],
        "A": [
            309992369,
            309993663,
            310000316,
            309993456,
            309989823,
            309991387,
            309991527,
            309990219,
            309997446,
            309999713,
            309990178,
            316601575,
            309993103,
            309994717,
            309990137,
            309990642,
            309990073,
            309992095
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/140540",
    "editorial": "If we cut a single edge and consider the regular polygon as a polyline\r\nof points, then we can think of using some form of Range DP to solve\r\nthis problem. This is correct when you simply take the maximum value\r\nover all possible edges you can cut. It is not hard to see that doing\r\nthis should not change the overall time complexity (unless you did\r\nrecalculate the same state multiple times). However, it is hard to\r\nimmediately think of a transition that is both correct and\r\nefficient.Let’s find a trivially correct but slow solution and reduce\r\nthe complexity. A correct DP which is (arguably) easy to find is as\r\nfollows.It is not too hard to prove the correctness of this transition,\r\nas it follows from the conditions such that two triangles will not\r\ncoincide anywhere. It is only tricky for us to improve the\r\ncomplexity.First, we can find that will also be found with and later in\r\nsome smaller subproblem. Then, our transition changes.This is a correct\r\nDP which cuts a lot of useless transitions from the . But it is, in\r\nfact, still redundant. It can be reduced further.We only wanted to split\r\nour range into three disjoint ones. But even by just splitting the range\r\ninto two, it later splits into two other disjoint ones in our\r\nsubproblem. Now we don’t need to split into three, only two is\r\nnecessary. So it is as follows.Now this computes the correct answer in ,\r\nwhich is the complexity we needed.It is important to note that even\r\nthough it might be easy to see the similarity to Triangulation DP\r\nproblems (such as the Matrix Chain Product problem), it is not an\r\nimmediate transformation from such problems. That is, it is not easy to\r\nlead to a correct transition by modifying the transition starting from\r\nTriangulation DP, and likely there will be quite an excessive amount of\r\nstates that you need to compute even if you did.\r\n",
    "name": "G. Game With Triangles  Season 2",
    "statement": "There is a regular polygon with n sides (n\r\nge 3). The vertices are indexed as 1,2,\r\nldots,n in clockwise order. On each vertex i, the pink soldiers have\r\nwritten a positive integer a_i. With this regular polygon, you will play\r\na game defined as follows.Initially, your score is 0. Then, you perform\r\nthe following operation any number of times to increase your score.\r\nSelect 3 different vertices i, j, k that you before, and draw the\r\ntriangle formed by the three vertices. Then, your score increases by a_i\r\ncdot a_j\r\ncdot a_k. However, you if the triangle shares a positive common area\r\nwith any of the triangles drawn previously. Your objective is to\r\nmaximize the score. Please find the maximum score you can get from this\r\ngame.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "geometry"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\G. Game With Triangles  Season 2.json",
    "hint": []
}