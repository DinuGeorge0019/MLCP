{
    "link": "https://codeforces.com//contest/1702/problem/C",
    "problemId": "1456428",
    "problem_idx": "C",
    "shortId": "1702C",
    "contest_number": "1702",
    "problem_submissions": {
        "F": [
            163542113,
            163514028,
            163524616,
            163733546,
            163545296,
            163524924,
            163529358,
            163536513,
            163519866,
            163525233,
            163564879,
            163534380,
            163538783,
            163561947,
            163540969,
            163535655,
            163561064,
            163562404,
            163544085,
            163519016
        ],
        "G2": [
            163534991,
            163559407,
            163548172,
            163549996,
            163554176,
            163540379,
            163557182,
            163571429,
            163575000,
            163545502,
            163571447,
            163565952,
            163549470,
            163566226,
            163577860,
            163531079,
            163555250,
            163574346,
            163573572
        ],
        "G1": [
            163534865,
            163559321,
            163548387,
            163550273,
            163555106,
            163540096,
            163557483,
            163571026,
            163549886,
            163545065,
            163540644,
            163566213,
            163549672,
            163557387,
            163546571,
            163531433,
            163554999,
            163574214,
            163573379
        ],
        "E": [
            163505777,
            163504465,
            163513283,
            163513644,
            163510195,
            163546834,
            163520208,
            163505881,
            163516258,
            163517435,
            163526737,
            163516735,
            163506369,
            163532804,
            163528744,
            163567339,
            163567093,
            163519899,
            163524058,
            163508144
        ],
        "D": [
            163487820,
            163493027,
            163495875,
            163501404,
            163498661,
            163506170,
            163499925,
            163492796,
            163488953,
            163500375,
            163495848,
            163492570,
            163483263,
            163496253,
            163491216,
            163495136,
            163508155,
            163491736,
            163485984
        ],
        "C": [
            163479124,
            163482190,
            163488652,
            163621464,
            163492523,
            163493122,
            163498422,
            163492339,
            163483795,
            163482325,
            165952921,
            163494102,
            163486863,
            163484454,
            163478228,
            163483131,
            163484825,
            163489721,
            163494820,
            163481705,
            163480845
        ],
        "B": [
            163471434,
            163474194,
            163479257,
            163481288,
            163480379,
            163488341,
            163485489,
            163475757,
            163474641,
            163485384,
            163491538,
            163474852,
            163473580,
            163475855,
            163477521,
            163484846,
            163484562,
            163474319,
            163475121
        ],
        "A": [
            163468217,
            163469784,
            163473310,
            163468633,
            163472585,
            163470981,
            163470350,
            163469302,
            163470110,
            163473679,
            163468658,
            163468889,
            163468241,
            163490145,
            163470656,
            163480525,
            163486237,
            163468246,
            163469702
        ]
    },
    "name": "C. Train and Queries",
    "statement": "Along the railroad there are stations indexed from 1 to 10^9. An express\r\ntrain always travels along a route consisting of n stations with indices\r\nu_1, u_2,\r\ndots, u_n, where (1\r\nle u_i\r\nle 10^9). The train travels along the route from left to right. It\r\nstarts at station u_1, then stops at station u_2, then at u_3, and so\r\non. Station u_n the terminus.It is possible that the train will visit\r\nthe same station more than once. That is, there may be duplicates among\r\nthe values u_1, u_2,\r\ndots, u_n.You are given k queries, each containing two different\r\nintegers a_j and b_j (1\r\nle a_j, b_j\r\nle 10^9). For each query, determine whether it is possible to travel by\r\ntrain from the station with index a_j to the station with index b_j.For\r\nexample, let the train route consist of 6 of stations with indices [3,\r\n7, 1, 5, 1, 4] and give 3 of the following queries: a_1 = 3, b_1 = 5It\r\nis possible to travel from station 3 to station 5 by taking a section of\r\nthe route consisting of stations [3, 7, 1, 5]. Answer: . a_2 = 1, b_2 =\r\n7You cannot travel from station 1 to station 7 because the train cannot\r\ntravel in the opposite direction. Answer: . a_3 = 3, b_3 = 10It is not\r\npossible to travel from station 3 to station 10 because station 10 is\r\nnot part of the trainâ€™s route. Answer: .\r\n",
    "solutions": [
        "/*\nPlaying Div.3, easy edition\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define rep(i,m,n) for (auto i=m;i<=n;i++)\n#define reb(i,m,n) for (auto i=m;i>=n;i--)\n#define rv(i,vt) for (auto i:vt)\n#define ii pair<ll,ll>\n#define vi vector<ll>\n#define F first\n#define S second\n#define pb push_back\nusing namespace std;\nconst ll N=1e6+5,mod=1e9+7;\nll n,k,c,a[N];\nmap<ll,ll> mi,ma;\nvoid solo()\n{\n    cin>>n>>k;\n    mi.clear();\n    ma.clear();\n    rep(i,1,n) \n    {\n        cin>>a[i];\n        if (mi[a[i]]==0) mi[a[i]]=i;\n        ma[a[i]]=i;\n    }\n    while (k--){\n        ll l,r;\n        cin>>l>>r;\n        ll x=ma[r],y=mi[l];\n        if (x && y && y<x){\n            cout<<\"YES\";\n        }\n        else cout<<\"NO\";\n        cout<<\"\\n\";\n    }\n}\nint main()\n{\n   ios_base::sync_with_stdio(0);\n   cin.tie(0);\n   cout.tie(0);\n   ll ts=1;\n   cin>>ts;\n   while (ts--){\n       solo();\n       cout<<endl;\n   }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Train and Queries.json",
    "editorial_link": "https://codeforces.com//blog/entry/104763",
    "editorial": "To solve the problem, we will use the dictionary. Each station will be\r\nmatched with a pair of integers the indices of its first and last\r\nentries in the route. Then we will sequentially process queries. If at\r\nleast one of the stations or is missing in the dictionary the answer is\r\n. Otherwise, check: If the index of the first entry of station in the\r\nroute is strictly less than the index of the last entry of station in\r\nthe route the answer is . Otherwise, the answer is .\r\n",
    "hint": []
}