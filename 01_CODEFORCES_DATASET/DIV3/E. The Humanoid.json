{
    "link": "https://codeforces.com//contest/1759/problem/E",
    "problemId": "1648493",
    "problem_idx": "E",
    "shortId": "1759E",
    "contest_number": "1759",
    "problem_submissions": {
        "F": [
            181486431,
            181479495,
            181489489,
            181466769,
            181483185,
            181500440,
            181479543,
            181508353,
            181496922,
            181508604,
            181502097,
            181497795,
            181503761,
            181501121,
            181501100,
            182192682,
            181496069,
            181511199,
            181495619,
            181501990,
            181512733
        ],
        "G": [
            181470898,
            181483472,
            181480216,
            181488242,
            181502797,
            181484371,
            181507280,
            181493093,
            181484604,
            181488245,
            181490344,
            181510187,
            181485442,
            181512835,
            182192660,
            181500575,
            181492430,
            181509509,
            181504672,
            181446586,
            181490393
        ],
        "E": [
            181450176,
            181453080,
            181473014,
            181457235,
            181548790,
            181548755,
            181473778,
            181464085,
            181473138,
            181449179,
            181478384,
            181476879,
            181463313,
            181471764,
            181473740,
            181474544,
            181476651,
            182192601,
            181478540,
            181483700,
            181477015,
            181481741,
            181472562
        ],
        "D": [
            181443496,
            181444277,
            181441833,
            181437034,
            181457789,
            181451248,
            181439090,
            181453349,
            181472631,
            181466901,
            181447966,
            181451433,
            181466503,
            181456985,
            182192572,
            181463756,
            181472096,
            181464200,
            181477006,
            181465670
        ],
        "C": [
            181435248,
            181438210,
            181438160,
            181482829,
            181440135,
            181444414,
            181434276,
            181441512,
            181453016,
            181445968,
            181476131,
            181438815,
            181451647,
            181444648,
            182192589,
            181451437,
            181447044,
            181435084,
            181471203,
            181450921
        ],
        "B": [
            181429291,
            181432153,
            181430076,
            181428597,
            181432762,
            181432848,
            181428082,
            181432814,
            181439780,
            181430739,
            181437168,
            181430902,
            181432277,
            181435548,
            182192550,
            181441779,
            181435486,
            181429956,
            181463543,
            181435148
        ],
        "A": [
            181427407,
            181427808,
            181427983,
            181427097,
            181427278,
            181428509,
            181430809,
            181428221,
            181434045,
            181429427,
            181427311,
            181428005,
            181429365,
            182192516,
            181435730,
            181429174,
            181427774,
            181455253,
            181429200
        ]
    },
    "name": "E. The Humanoid",
    "statement": "There are n astronauts working on some space station. An astronaut with\r\nthe number i (1\r\nle i\r\nle n) has a_i.An evil humanoid has made his way to this space station.\r\nof this humanoid is equal to h. Also, the humanoid took with him serums\r\nand serum.In one second , a humanoid can do any of three actions: to\r\nabsorb an astronaut with ; to use serum, if there is still one left; to\r\nuse serum, if there is still one left. When an astronaut with a_i is\r\nabsorbed, this astronaut disappears, and of the humanoid increases by\r\nlfloor\r\nfrac{a_i}{2}\r\nrfloor, that is, an integer part of\r\nfrac{a_i}{2}. For example, if a humanoid absorbs an astronaut with 4,\r\nits increases by 2, and if a humanoid absorbs an astronaut with 7, its\r\nincreases by 3.After using the serum, this serum disappears, and the of\r\nthe humanoid doubles, so it increases by 2 times.After using the serum,\r\nthis serum disappears, and the of the humanoid triples, so it increases\r\nby 3 times.The humanoid is wondering what the maximum number of\r\nastronauts he will be able to absorb if he acts optimally.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n#include <array>\n\nusing namespace std;\n\ntemplate<class T> void ckmin(T &a, T b) { a = min(a, b); }\ntemplate<class T> void ckmax(T &a, T b) { a = max(a, b); }\n\n#define pb push_back\n#define mp make_pair\n#define cotu cout\n#define itn int\n#define Red ios_base::sync_with_stdio(0);cin.tie(0)\n#define F first\n#define S second\n#define sz(x) (int)x.size()\n#define all(x) (x).begin(), (x).end()\n#define rep(i, n) for(int i = 0; i < n; i++)\n#define repr(i,n) for(int i = n - 1; i >= 0; --i)\n#define Rep(i, a, n) for(int i = (a); i <=(n); ++i)\n#define repst(i, n) for(auto it = n.begin(); it != n.end(); ++it)\n#define Repr(i, a, n) for(int i = (n); i >= (a); --i)\n#define setp(x) fixed << setprecision(x)\n\ntypedef long long ll;\ntypedef pair<ll, ll> pll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<vector<int> > vvi;\n\nconst int inf = int(1e9);\nconst ll INF = ll(1e17);\nconst ll mod = 998244353;\nconst double PI = acos(-1.0);\n\nll bp(ll a, ll n, ll md = mod){\n    ll r = 1;\n    while(n){\n        if(n & 1) r = r * a % md;\n        a = a * a % md;\n        n >>= 1;\n    }\n    return r;\n}\ntemplate<typename T_vector> // neal\nvoid output_vector(const T_vector &v, bool add_one = false, int start = -1, int end = -1) {\n    if (start < 0) start = 0;\n    if (end < 0) end =  int(v.size());\n\n    for (int i = start; i < end; i++)\n        cout << v[i] + (add_one ? 1 : 0) << (i < end - 1 ? ' ' : '\\n');\n}\n\nint cnt(ll x) {\n    int c = 0;\n    while(x % 10 == 0) {\n        x /= 10, ++c;\n    }\n    return c;\n}\n\nvoid solve(){\n    vector<int> d = {0, 1, 2};\n    int n, h;\n    cin >> n >> h;\n    int a[n];\n    for(int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    int mx = 0;\n    sort(a, a + n);\n    do {\n        ll curH = h;\n        int b = 0;\n        int sum = 0;\n        for(int i = 0; i < n; ++i) {\n            if (a[i] < curH) {\n                curH += a[i] / 2;\n                sum++;\n            } else {\n                if(b == 3) break;\n                else {\n                    if(d[b] <= 1) curH *= 2;\n                    else curH *= 3;\n                    i--;\n                    b++;\n                }\n            }\n            mx = max(mx, sum);\n        }\n    } while(next_permutation(begin(d), end(d)));\n    cout << mx << endl;\n}\n\nint main()\n{\n    // freopen(\"input.txt\", \"r\", stdin);\n    // freopen(\"output.txt\", \"w\", stdout);\n    Red;\n    int T;\n    T = 1;\n    cin >> T;\n    for(int i = 1; i <= T; ++i){\n        // cout << \"Case #\" << i << \": \";\n        solve();\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "sortings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. The Humanoid.json",
    "editorial_link": "https://codeforces.com//blog/entry/109254",
    "editorial": "Letâs make two obvious remarks: If we can absorb two astronauts with ,\r\nthen we can always first absorb an astronaut with , and then an\r\nastronaut with ; If we can absorb some astronaut, it is effective for us\r\nto do it right now. Letâs sort the astronauts in increasing order.Now\r\nletâs lock the sequence of serums we use. There are only three of them:\r\nserum can be the first, second or third.Letâs absorb the astronauts in\r\nincreasing order of their , and if we canât, then use the next serum in\r\na locked sequence or stop.This solution works for .\r\n",
    "hint": []
}