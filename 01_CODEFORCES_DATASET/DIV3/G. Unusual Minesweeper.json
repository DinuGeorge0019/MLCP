{
    "link": "https://codeforces.com//contest/1619/problem/G",
    "problemId": "1234628",
    "problem_idx": "G",
    "shortId": "1619G",
    "contest_number": "1619",
    "problem_submissions": {
        "G": [
            140078255,
            140073592,
            140089436,
            140078390,
            140089746,
            140079476,
            145924145,
            151265654,
            141670945,
            140147260
        ],
        "F": [
            140065181,
            140063048,
            140076024,
            140070362,
            140081694,
            140073270,
            140077189,
            140077988,
            140079343,
            140077681,
            140080239,
            140066442,
            140086181,
            140083843,
            140081135,
            140087882,
            140074406,
            140085836
        ],
        "E": [
            140056688,
            140034731,
            140064173,
            140064735,
            140063371,
            140067175,
            140068525,
            140064758,
            140060381,
            140065082,
            140053212,
            140051892,
            140072728,
            140067484,
            140070209,
            140073990,
            140083979,
            140064170
        ],
        "D": [
            140049695,
            140056611,
            140052445,
            140059443,
            140054727,
            140062375,
            140050362,
            140046453,
            140049546,
            140054923,
            140069697,
            140074223,
            140057739,
            140070163,
            140060824,
            140054342,
            140053714,
            140047137
        ],
        "C": [
            140041270,
            140047619,
            140037577,
            140053359,
            140066154,
            140055677,
            140034474,
            140041067,
            140041491,
            140044199,
            140042854,
            140041981,
            140038481,
            140037319,
            140043801,
            140042895,
            140046624,
            140037654
        ],
        "B": [
            140028867,
            140058223,
            140027097,
            140049372,
            140023898,
            140046113,
            140024005,
            140028515,
            140025918,
            140030098,
            140028524,
            140024247,
            140024021,
            140025866,
            140024580,
            140024963,
            140030726,
            140023456
        ],
        "A": [
            140018513,
            140037253,
            140018425,
            140048050,
            140017040,
            140043315,
            140017477,
            140024037,
            140017841,
            140019535,
            140020013,
            143793925,
            140020824,
            140018421,
            140017149,
            140018606,
            140017171,
            140021392,
            140017164
        ],
        "H": [
            140381628,
            140278376
        ]
    },
    "name": "G. Unusual Minesweeper",
    "statement": "Polycarp is very fond of playing the game Minesweeper. Recently he found\r\na similar game and there are such rules.There are mines on the field,\r\nfor each the coordinates of its location are known (x_i, y_i). Each mine\r\nhas a lifetime in seconds, after which it will explode. After the\r\nexplosion, the mine also detonates all mines vertically and horizontally\r\nat a distance of k (two perpendicular lines). As a result, we get an\r\nexplosion on the field in the form of a \"plus\" symbol (”). Thus, one\r\nexplosion can cause new explosions, and so on.Also, Polycarp can\r\ndetonate anyone mine every second, starting from zero seconds. After\r\nthat, a chain reaction of explosions also takes place. Mines explode and\r\nalso detonate other mines according to the rules described\r\nabove.Polycarp wants to set a new record and asks you to help him\r\ncalculate in what minimum number of seconds all mines can be detonated.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nifstream fin(\"AAtest.in.txt\");\nstruct miin{\n    ll ul,x,y,all,aeg;\n};\nll t,n,k;\nmiin v[200005];\nvector<ll> p,u;\n\nbool boo(ll e,ll p){\n    if(v[e].x!=v[p].x) return v[e].x<v[p].x;\n    return v[e].y<v[p].y;\n}\n\nvoid uhenda(ll l,ll r){\n    while(v[l].ul!=l) l=v[l].ul;\n    while(v[r].ul!=r) r=v[r].ul;\n    if(l!=r) if(v[l].all<v[r].all) v[l].ul=r,v[r].aeg=min(v[r].aeg,v[l].aeg);\n    else v[r].ul=l,v[l].all=max(v[l].all,v[r].all+1),v[l].aeg=min(v[l].aeg,v[r].aeg);\n}\n\nvoid tee(){\n    sort(p.begin(),p.end(),boo);\n    ll l,r;\n    l=0; r=0;\n    while(l<p.size()){\n        while(r<p.size() && v[p[r]].x==v[p[l]].x && v[p[r]].y<=v[p[l]].y+k){\n            uhenda(p[l],p[r]);\n            r++;\n        }\n        l++;\n    }\n}\n\nint main(){\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); cerr.tie(0);\n    cin>>t;\n    while(t--){\n        cin>>n>>k;\n        p.resize(0);\n        for(int i=0; i<n; i++) cin>>v[i].x>>v[i].y>>v[i].aeg,v[i].ul=i,p.push_back(i),v[i].all=0;\n        tee();\n        for(int i=0; i<n; i++) swap(v[i].x,v[i].y);\n        tee();\n        u.resize(0);\n        for(int i=0; i<n; i++) if(v[i].ul==i) u.push_back(v[i].aeg);\n        sort(u.begin(),u.end());\n        ll z=0,se=0;\n        while(z<u.size()){\n            u.pop_back();\n            while(z<u.size() && u[z]<=se) z++;\n            se++;\n        }\n        cout<<se-1<<\"\\n\";\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dfs and similar",
        "dsu",
        "greedy",
        "sortings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\G. Unusual Minesweeper.json",
    "editorial_link": "https://codeforces.com//blog/entry/98159",
    "editorial": "Our first task is to separate mines into components. We will store in\r\nthe hashmap at the coordinate all the coordinates where there is a mine.\r\nLetâs do the same with the hashmap. Thus, going through the available\r\narrays in and , we connect adjacent elements into one component, if ,\r\nalso with .As a result, we have components, where if you detonate one\r\nmine in the âs component, then all the mines belonging to this component\r\nwill also explode.Further, we find a mine with a minimum timer in each\r\ncomponent. Finding the minimum for each component, we store it\r\nconditionally in the array . Now we know at what minimum time some\r\ncomponent will explode if it is left unaffected.To answer, it remains to\r\nfind in the sorted array such a minimum index that is min.And the\r\ngeneral asymptotic behavior is .\r\n",
    "hint": []
}