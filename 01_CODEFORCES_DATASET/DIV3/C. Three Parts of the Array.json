{
    "link": "https://codeforces.com//contest/1006/problem/C",
    "problemId": "198027",
    "problem_idx": "C",
    "shortId": "1006C",
    "contest_number": "1006",
    "problem_submissions": {
        "F": [
            40441400,
            40440824,
            40440718,
            40440827,
            40424217,
            40442318,
            40444967,
            40447621,
            40447392,
            40445275,
            40438703,
            40428895,
            40523944,
            40456300,
            40469784
        ],
        "D": [
            40431223,
            40427415,
            40429428,
            40427666,
            40435691,
            40430513,
            40434142,
            40438290,
            40431310,
            40440098,
            40429630,
            40428380,
            40426509,
            40433251,
            40426493,
            40678651,
            40428666,
            40431857,
            40429891,
            40428151,
            40428405
        ],
        "E": [
            40425946,
            40430996,
            40428189,
            40432790,
            40428480,
            40435411,
            40438586,
            40437117,
            40432836,
            40443168,
            40425115,
            40431041,
            40430321,
            40417607,
            40432842,
            40431866,
            40426721,
            40428657,
            40431622,
            40432669
        ],
        "C": [
            40421659,
            40420878,
            40419334,
            40423831,
            40424033,
            40424261,
            40424821,
            40426724,
            40426733,
            40435459,
            40420478,
            40420692,
            40423322,
            40419164,
            40418012,
            40511067,
            40419053,
            40423337,
            40419944,
            40423295,
            40422046
        ],
        "B": [
            40419978,
            40418807,
            40418159,
            40421590,
            40425339,
            40421610,
            40421499,
            40421847,
            40440870,
            40433565,
            40419011,
            40419302,
            40420307,
            40421856,
            40421084,
            40507243,
            40417820,
            40421010,
            40421030,
            40420039,
            40420598
        ],
        "A": [
            40417368,
            40415298,
            40415306,
            40418538,
            40416510,
            40415729,
            40416251,
            40417776,
            40416833,
            40484358,
            40430262,
            40415381,
            40416664,
            40417319,
            40423001,
            40419643,
            40482910,
            40415406,
            40415414,
            40420065,
            40415817,
            40415886
        ]
    },
    "name": "C. Three Parts of the Array",
    "statement": "You are given an array d_1, d_2,\r\ndots, d_n consisting of n integer numbers.Your task is to split this\r\narray into three parts (some of which may be empty) in such a way that\r\neach element of the array belongs to exactly one of the three parts, and\r\neach of the parts forms a consecutive contiguous subsegment (possibly,\r\nempty) of the original array. Let the sum of elements of the first part\r\nbe sum_1, the sum of elements of the second part be sum_2 and the sum of\r\nelements of the third part be sum_3. Among all possible ways to split\r\nthe array you have to choose a way such that sum_1 = sum_3 and sum_1 is\r\nmaximum possible.More formally, if the first part of the array contains\r\na elements, the second part of the array contains b elements and the\r\nthird part contains c elements, then:sum_1 =\r\nsum\r\nlimits_{1\r\nle i\r\nle a}d_i, sum_2 =\r\nsum\r\nlimits_{a + 1\r\nle i\r\nle a + b}d_i, sum_3 =\r\nsum\r\nlimits_{a + b + 1\r\nle i\r\nle a + b + c}d_i.The sum of an empty array is 0.Your task is to find a\r\nway to split the array such that sum_1 = sum_3 and sum_1 is maximum\r\npossible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAX_N = 2e5;\n\nint n;\nint a[MAX_N + 1];\nlong long pref[MAX_N + 1], suff[MAX_N + 1];\n\nint main() {\n\t//freopen(\"input.inp\", \"r\", stdin);\n\tios_base::sync_with_stdio(0); cin.tie(0);\n\tcin >> n;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tcin >> a[i];\n\t\tpref[i] = pref[i - 1] + a[i];\n\t}\n\tfor (int i = n; i >= 1; --i) {\n\t\tsuff[i] = suff[i + 1] + a[i];\n\t}\n\tlong long ans = 0;\n\t//for (int i = 1; i <= n; ++i) {\n\t//\tfor (int j = i + 1; j <= n; ++j) {\n\t//\t\tif (suff[j] == pref[i]) {\n\t//\t\t\tans = max(ans, pref[i]);\n\t//\t\t\tbreak;\n\t//\t\t}\n\t//\t}\n\t//}\n\tmap<long long, int> hs;\n\tfor (int i = n; i >= 1; --i) {\n\t\tif (hs.count(pref[i])) {\n\t\t\tans = pref[i];\n\t\t\tbreak;\n\t\t}\n\t\ths[suff[i]]++;\n\t}\n\tcout << ans;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "two pointers"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Three Parts of the Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/60672",
    "editorial": "Since the given array consists of positive integers, for each value of ,\r\nthere can be at most one value of such that . We can use binary search\r\non the array of prefix sums of to find the correct value of , given that\r\nit exists. If it does exist and , this is a candidate solution so we\r\nstore it. Alternatively, we can use the two pointers trick when\r\nincreases, cannot decrease. Be careful to use 64 bit integers to store\r\nsums.Overall complexity is or .\r\n",
    "hint": []
}