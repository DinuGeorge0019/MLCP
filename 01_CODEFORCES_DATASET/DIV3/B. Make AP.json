{
    "link": "https://codeforces.com//contest/1624/problem/B",
    "problemId": "1256438",
    "problem_idx": "B",
    "shortId": "1624B",
    "contest_number": "1624",
    "problem_submissions": {
        "G": [
            142264977,
            142276263,
            142255328,
            142255380,
            142278979,
            142222438,
            142247481,
            142272907,
            142266089,
            142251678,
            142253083,
            142252160,
            142248179,
            142250137,
            142248523,
            142250039,
            142416148,
            142259210
        ],
        "F": [
            142255179,
            142272384,
            142268450,
            142243695,
            142285199,
            142258439,
            142236940,
            142264135,
            142393598,
            142331291,
            142248865,
            142296070,
            142276188,
            142284965,
            142276430,
            142260372
        ],
        "E": [
            142241464,
            142238534,
            142272316,
            142277777,
            142260025,
            142286074,
            142269495,
            142256319,
            142287785,
            142271217,
            142263215,
            142270151,
            142270566,
            142278137,
            142274750,
            142273040,
            142294098,
            142253958,
            142282423
        ],
        "D": [
            142225549,
            142220300,
            142226787,
            142230709,
            142223377,
            142265701,
            142282535,
            142273740,
            142234006,
            142223224,
            142236057,
            142230240,
            142221633,
            142230396,
            142243861,
            142238174,
            142223929,
            142233332,
            142233395,
            142227832
        ],
        "C": [
            142213147,
            142208364,
            142214903,
            142219856,
            142212618,
            142318538,
            142204231,
            142234937,
            142218849,
            142237305,
            142214526,
            142460843,
            142215423,
            142217168,
            142221355,
            142216799,
            142211503,
            142211985,
            142216819,
            142218405,
            142219857,
            142213500
        ],
        "B": [
            142197546,
            142199713,
            142206530,
            142215517,
            142199960,
            142202251,
            142206682,
            142220881,
            142202886,
            142198089,
            142210906,
            142196708,
            142210091,
            142205820,
            142205637,
            142211178,
            142207927,
            142211494,
            142209546
        ],
        "A": [
            142188870,
            142188452,
            142198531,
            142195180,
            142189107,
            142194205,
            142188426,
            142189618,
            142189485,
            142189892,
            142201064,
            142189063,
            142189404,
            142192459,
            142193156,
            142190543,
            142204194,
            142190164
        ]
    },
    "name": "B. Make AP",
    "statement": "Polycarp has 3 positive integers a, b and c. He can perform the\r\nfollowing operation . Choose a integer m and multiply of the integers a,\r\nb or c by m. Can Polycarp make it so that after performing the\r\noperation, the sequence of three numbers a, b, c () forms an arithmetic\r\nprogression? Note that you the order of a, b and c.Formally, a sequence\r\nx_1, x_2,\r\ndots, x_n is called an arithmetic progression (AP) if there exists a\r\nnumber d (called \"common difference\") such that x_{i+1}=x_i+d for all i\r\nfrom 1 to n-1. In this problem, n=3.For example, the following sequences\r\nare AP: [5, 10, 15], [3, 2, 1], [1, 1, 1], and [13, 10, 7]. The\r\nfollowing sequences are not AP: [1, 2, 4], [0, 1, 0] and [1, 3, 2].You\r\nneed to answer t independent test cases.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class...Args>\nvoid debug(Args... args) {\n    auto tmp = {(cout << args << ' ', 0)...};\n    cout << endl;\n}\nusing ll = long long;\nusing ull = unsigned long long;\nconst int N = 5e5 + 10;\nconst int mod = 998244353;\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    int T;\n    cin >> T;\n    while (T--) {\n        ll a, b, c;\n        cin >> a >> b >> c;\n        ll d = b - (c - b);\n        if (d > 0 && d % a == 0) {\n            cout << \"YES\" << '\\n';\n            continue;\n        }\n        if ((a + c) % 2 == 0) {\n            d = (a + c) / 2;\n            if (d > 0 && d % b == 0) {\n                cout << \"YES\" << '\\n';\n                continue;\n            }\n        }\n        d = b + (b - a);\n        if (d > 0 && d % c == 0) {\n            cout << \"YES\" << '\\n';\n            continue;\n        }\n        cout << \"NO\" << '\\n';\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Make AP.json",
    "editorial_link": "https://codeforces.com//blog/entry/98942",
    "editorial": "Letâs iterate over the number that we want to multiply by .How can we\r\ncheck that we can multiply the current number so that an AP is\r\nformed?Note that those numbers that we do not touch should form an AP\r\nthemselves. For instance, let at the current operation we want somehow\r\nmultiply the number . Then , and .Note that . Thus, we know what is.\r\nAlso we know that . Letâs check if is divisible by . If yes, then we\r\nhave found the answer, if not, then move on to the next number.We do the\r\nsame for and .Be careful with non positive numbers, integer divisions\r\nand other edge cases.\r\n",
    "hint": []
}