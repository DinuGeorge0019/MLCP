{
    "link": "https://codeforces.com//contest/1980/problem/C",
    "problemId": "2679075",
    "problem_idx": "C",
    "shortId": "1980C",
    "contest_number": "1980",
    "problem_submissions": {
        "F2": [
            264034665,
            264025304,
            264247676,
            264019993,
            264024427,
            264029852,
            264023188,
            264027216,
            297729485,
            297729442,
            297728361,
            297728328
        ],
        "G": [
            264011385,
            263992122,
            268025366,
            264215525,
            264011872,
            264084430,
            264264232,
            264263765,
            264069123,
            264079559,
            264078668
        ],
        "F1": [
            263976190,
            263977123,
            263986480,
            263993424,
            264008757,
            263990594,
            264002101,
            263997926,
            264028649,
            263987133,
            263983649,
            263982394,
            264008279,
            263992416,
            264001050,
            263982241,
            263973003,
            297724971,
            263994302,
            263989092,
            263991078
        ],
        "E": [
            263949022,
            263952956,
            263961437,
            263972191,
            263952206,
            263972111,
            263965559,
            263972356,
            263979958,
            263960816,
            263958713,
            263958124,
            263952216,
            263968394,
            263952644,
            263960173,
            263957033,
            263960055,
            263959465,
            263968735
        ],
        "D": [
            263937338,
            263941014,
            263940806,
            263951978,
            263959721,
            263955612,
            263952654,
            263955258,
            263970236,
            263929153,
            263938177,
            263937870,
            263931692,
            263943850,
            263942483,
            263952145,
            263949853,
            263944438,
            263947463,
            263956473
        ],
        "C": [
            263918738,
            263918609,
            263924884,
            263925019,
            263927010,
            263934895,
            263950793,
            263933470,
            263946468,
            263911344,
            263918263,
            263919725,
            263911878,
            263921063,
            263925590,
            263921654,
            263927275,
            263926350,
            263931913,
            263931664
        ],
        "B": [
            263905986,
            263904943,
            263911595,
            263912040,
            263903286,
            263919041,
            263916463,
            263913479,
            263919564,
            263901644,
            263907263,
            263909074,
            263903306,
            263904343,
            263907275,
            263910981,
            263913905,
            263915385,
            263916132,
            263900094
        ],
        "A": [
            263898827,
            263896737,
            263896710,
            263899946,
            263896564,
            263900183,
            263902852,
            263902771,
            263905894,
            263896600,
            263896618,
            263897271,
            263897395,
            263896553,
            263899202,
            263896419,
            263897066,
            263897350,
            263900369,
            263899316,
            263897377
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/130135",
    "editorial": "First, in the array , the number must be present. Second, if , we will\r\nnot apply any operations to . All extra operations can be applied to ,\r\nwhere , they will be overwritten by the operation . For all other () we\r\nmust apply the operation , so it remains to check that the multiset of\r\nsuch is included in the multiset .This solution can be implemented using\r\nsorting and two pointers or , resulting in a time complexity of . If you\r\nused or , you were most likely hacked. Check out this post.\r\n",
    "name": "C. Sofia and the Lost Operations",
    "statement": "Sofia had an array of n integers a_1, a_2,\r\nldots, a_n. One day she got bored with it, so she decided to apply m\r\nmodification operations to it.Each modification operation is described\r\nby a pair of numbers\r\nlangle c_j, d_j\r\nrangle and means that the element of the array with index c_j should be\r\nassigned the value d_j, i.e., perform the assignment a_{c_j} = d_j.\r\nAfter applying modification operations , Sofia discarded the resulting\r\narray.Recently, you found an array of n integers b_1, b_2,\r\nldots, b_n. You are interested in whether this array is Sofia’s array.\r\nYou know the values of the original array, as well as the values d_1,\r\nd_2,\r\nldots, d_m. The values c_1, c_2,\r\nldots, c_m turned out to be lost.Is there a sequence c_1, c_2,\r\nldots, c_m such that the application of modification operations\r\nlangle c_1, d_1,\r\nrangle,\r\nlangle c_2, d_2,\r\nrangle,\r\nldots,\r\nlangle c_m, d_m\r\nrangle to the array a_1, a_2,\r\nldots, a_n transforms it into the array b_1, b_2,\r\nldots, b_n?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std; int main() {    ios::sync_with_stdio(false);    cin.tie(nullptr);    int t; cin >> t;    while (t--) {        int n; cin >> n;        vector<int> a(n), b(n);        set<int> bs;        for (int &x: a) cin >> x;        for (int &x: b) cin >> x, bs.insert(x);        int m; cin >> m;        map<int, int> d;        int ls = -1;        for (int i = 0; i < m; i++) {            int x; cin >> x;            ls = x;            d[x]++;        }        bool ans = bs.count(ls);        for (int i = 0; i < n; i++) {            if (b[i] != a[i]) {                if (!d[b[i]]) ans = false;                d[b[i]]--;            }        }        cout << (ans ? \"YES\" : \"NO\") << \"\\n\";    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Sofia and the Lost Operations.json",
    "hint": []
}