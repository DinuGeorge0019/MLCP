{
    "link": "https://codeforces.com//contest/1921/problem/B",
    "problemId": "2427792",
    "problem_idx": "B",
    "shortId": "1921B",
    "contest_number": "1921",
    "problem_submissions": {
        "G": [
            241831050,
            241827837,
            241810477,
            242123235,
            241856864,
            241856757,
            241846360,
            241844808,
            241871322
        ],
        "F": [
            241783186,
            241781250,
            241816532,
            241785583,
            241791384,
            241804903,
            241794317,
            241794393,
            241798773,
            241768039,
            241794044,
            241853387,
            241797954,
            241801360,
            241966488,
            241966437,
            241795377,
            241807485,
            241804479,
            241771769,
            241809604
        ],
        "E": [
            241757922,
            241820604,
            241803155,
            241764773,
            241760055,
            241766238,
            241761128,
            241758418,
            241762380,
            241791042,
            241765829,
            241852718,
            241852234,
            241772377,
            241777235,
            241766546,
            241773883,
            241777362,
            241799105,
            241776065
        ],
        "C": [
            241743872,
            241738511,
            241782285,
            241713771,
            241731802,
            241722543,
            241723479,
            241721384,
            241731073,
            241731927,
            241733665,
            241724987,
            241731027,
            241724748,
            241725203,
            241727491,
            241738163,
            241730878
        ],
        "D": [
            241740026,
            241755677,
            241822282,
            241733413,
            241740126,
            241836675,
            241730048,
            241743437,
            241739467,
            241740332,
            241741717,
            241747196,
            241850173,
            241850099,
            241755029,
            241745422,
            241752838,
            241742872,
            241743137,
            241722134,
            241753020
        ],
        "B": [
            241716338,
            241724504,
            241779126,
            241723511,
            241712900,
            241714033,
            241714226,
            241710825,
            241717515,
            241711138,
            241719732,
            241714246,
            241713725,
            241711911,
            241715371,
            241717975,
            241730046,
            241720842
        ],
        "A": [
            241704520,
            241709611,
            241777552,
            241704978,
            241704766,
            241705020,
            241706153,
            241705013,
            241708070,
            241704538,
            241706951,
            241707445,
            241704678,
            241705172,
            241707810,
            241705881,
            241707544,
            241704527
        ]
    },
    "name": "B. Arranging Cats",
    "statement": "Scientists have n boxes in which cats may or may not sit. Let the\r\ncurrent state of the boxes be denoted by the sequence b_1,\r\ndots, b_n: b_i = 1 if there is a cat in box number i, and b_i = 0\r\notherwise. Fortunately, the unlimited production of cats has already\r\nbeen established, so in one day, the scientists can perform one of the\r\nfollowing operations: Take a new cat and place it in a box (for some i\r\nsuch that b_i = 0, assign b_i = 1). Remove a cat from a box and send it\r\ninto retirement (for some i such that b_i = 1, assign b_i = 0). Move a\r\ncat from one box to another (for some i, j such that b_i = 1, b_j = 0,\r\nassign b_i = 0, b_j = 1). It has also been found that some boxes were\r\nimmediately filled with cats. Therefore, the scientists know the initial\r\nposition of the cats in the boxes s_1,\r\ndots, s_n and the desired position f_1,\r\ndots, f_n.Due to the large amount of paperwork, the scientists do not\r\nhave time to solve this problem. Help them for the sake of science and\r\nindicate the minimum number of days required to test the hypothesis.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define pb push_back\n#define pf push_front\n#define F first\n#define S second\n#define ff first\n#define ss second\n#define ll long long\n#define ull unsigned long long\n#define ld long double\n#define pll pair<ll,ll>\n#define plll pair<pll,ll>\n#define pllll pair<pll,pll>\n#define vl vector<ll>\n#define vll vector<pll>\n#define vlll vector<plll>\n#define vllll vector<pllll>\n#define vb vector<bool>\n#define sz size()\n#define fr front()\n#define all(x) (x).begin(), (x).end()\n#define rall(x) (x).rbegin(), (x).rend()\n#define bk back();\nusing namespace std;\nconst ld pi=3.14159265359;\nconst ll e5=1e5;\nconst ll e6=1e6;\nconst ll e9=1e9;\nconst ll inf=1e18;\nconst ll mod=1e9+7;\nconst ll mod2=998244353;\nconst ll N=1e5+5;\nll bpm(ll x,ll y,ll m){if(y==0)return 1%m;if(y==1)return x%m;ll p=bpm(x,y/2,m);\nif(y%2==0)return p*p%m;else return p*p%m*x%m;}\nll bp(ll x,ll y){if(y==0)return 1;if(y==1)return x;ll p=bp(x,y/2);\nif(y%2==0)return p*p;else return p*p*x;}\nvoid solve(/**/){\n    ll n,x=0,y=0,z=0;\n    cin>>n;\n    string a,b;\n    cin>>a>>b;\n    for(ll i=0;i<n;i++){\n        if(a[i]=='1') x++;\n        if(b[i]=='1') y++;\n        if(a[i]=='1'&&b[i]=='1') z++;\n    }\n    if(x>=y) cout<<x-z;\n    else cout<<y-z;\n    return;\n}\nint main(/*Aldk*/){\n    ios_base::sync_with_stdio(false);cin.tie(NULL);\n    //freopen(\".in\", \"r\", stdin);\n    //freopen(\".out\", \"w\", stdout);    \n    //cout<<setprecision(6)<<fixed;\n    ll T=1;\n    cin>>T;\n    for(ll i=1;i<=T;i++){\n        //cout<<\"Case #\"<<i<<\": \";\n        solve();\n        cout<<'\\n';\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Arranging Cats.json",
    "editorial_link": "https://codeforces.com//blog/entry/124757",
    "editorial": "Denote the amount of indices such that and as . Since it is impossible\r\nto change 0 to 1 at two different positions in one turn, the answer is\r\nnot less than . Analogously, if is amount of indices such that and , the\r\nanswer is not less than .It turns out that the answer is actually equal\r\nto . We can simply apply move operation from the index with to with\r\nwhile there are both of these types of indices (that will be operations)\r\nand then add or remove the rest of unsatisfied indices (that is exactly\r\noperations).\r\n"
}