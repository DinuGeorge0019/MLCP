{
    "link": "https://codeforces.com//contest/1986/problem/D",
    "problemId": "2714656",
    "problem_idx": "D",
    "shortId": "1986D",
    "contest_number": "1986",
    "problem_submissions": {
        "G2": [
            267051586,
            267098517,
            267207124,
            267227692
        ],
        "G1": [
            267050167,
            267075101,
            267042149,
            267064735,
            267062041,
            267072094,
            267189212,
            267907699,
            267227655
        ],
        "F": [
            267036897,
            267006951,
            267211888,
            267210735,
            267209305,
            267209191,
            267142479,
            267067023,
            267046217,
            267049909,
            267055692,
            267026922,
            267034254,
            267024454,
            267035130,
            267043900,
            267043428,
            267046638,
            267048369,
            267046109,
            267054071,
            267044101,
            267051585,
            267055127
        ],
        "E": [
            267031182,
            267035399,
            267025961,
            267037775,
            267044980,
            267032730,
            267010850,
            267025710,
            267050692,
            267025261,
            267026751,
            267028762,
            267028451,
            267027196,
            267036783,
            267025470,
            267030110,
            267036403,
            267037341
        ],
        "D": [
            267019160,
            267019752,
            267011405,
            267021594,
            267023740,
            267014893,
            267011680,
            267009591,
            267007109,
            267005474,
            267006461,
            267009567,
            267009731,
            267006448,
            267009653,
            267006959,
            267018496,
            267008934,
            267008176
        ],
        "C": [
            266989125,
            266982272,
            266994840,
            267002991,
            266993066,
            267005030,
            266983150,
            266989202,
            266983682,
            267008636,
            266990051,
            266988914,
            266994220,
            266992535,
            266990847,
            266994508,
            266995474,
            266989895,
            266985787
        ],
        "B": [
            266980718,
            266971385,
            266985030,
            266993111,
            266976413,
            266985138,
            266977306,
            266981373,
            266976133,
            266979778,
            266979273,
            266982265,
            266980709,
            266977455,
            266980695,
            266983193,
            266981883,
            266982561,
            266978536
        ],
        "A": [
            266966090,
            266964678,
            266968415,
            266974624,
            270989331,
            266965521,
            266965134,
            266964884,
            266966168,
            266965003,
            266971429,
            266979885,
            266965867,
            266964795,
            266965926,
            266967291,
            266966370,
            266967270,
            266967228,
            266965380
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/130783",
    "editorial": "First, let's iterate through the position i\n, such that we do not place a mathematical sign between the i\n-th and (i+1)\n-th elements.\n\nNext, we have the following task \u0097 we have n?1\n numbers and we need to place a +\n or \u00d7\n sign between each pair of neighboring numbers to minimize the result. There are three possible cases:\n\nIf there is at least one 0\n, the answer is 0\n. We can simply place all signs as \u00d7\n.\nIf all numbers are 1\n, the answer is 1\n. We can simply place all signs as \u00d7\n.\nOtherwise, the answer is the sum of numbers not equal to 1\n. It is not advantageous to multiply numbers greater than one with each other, and all ones can simply be multiplied by any of the neighbors.",
    "name": "D. Mathematical Problem",
    "statement": "You are given a string s of length n > 1, consisting of digits from 0 to\r\n9. You must insert exactly n - 2 symbols + (addition) or\r\ntimes (multiplication) into this string to form a valid arithmetic\r\nexpression.In this problem, the symbols cannot be placed before the\r\nfirst or after the last character of the string s, and two symbols\r\ncannot be written consecutively. Also, note that the order of the digits\r\nin the string cannot be changed. Let\u2019s consider s = 987009: From this\r\nstring, the following arithmetic expressions can be obtained: 9\r\ntimes 8 + 70\r\ntimes 0 + 9 = 81, 98\r\ntimes 7\r\ntimes 0 + 0\r\ntimes 9 = 0, 9 + 8 + 7 + 0 + 09 = 9 + 8 + 7 + 0 + 9 = 33. Note that the\r\nnumber 09 is considered valid and is simply transformed into 9. From\r\nthis string, the following arithmetic expressions cannot be obtained: +9\r\ntimes 8\r\ntimes 70 + 09 (symbols should only be placed between digits), 98\r\ntimes 70 + 0 + 9 (since there are 6 digits, there must be exactly 4\r\nsymbols).The result of the arithmetic expression is calculated according\r\nto the rules of mathematics first all multiplication operations are\r\nperformed, then addition. You need to find the minimum result that can\r\nbe obtained by inserting exactly n - 2 addition or multiplication\r\nsymbols into the given string s.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\u00a0#define int long long#define pb push_back#define fi first#define se secondusing namespace std;using ll = long long;using ld = long double;using ull = unsigned long long;mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());const int maxN = 1e6 + 5;const int mod = 1e9 + 7;const ll oo = 1e18;int n;string s;void ReadInput(){    cin >> n >> s;    s = '0' + s;}int get(string s){    int res = 0;    for(char c : s)        res = res * 10 + c - '0';    return res;}void Solve(){    if(n == 2)    {        cout << get(s) << '\\n';        return;    }    if(n <= 3)    {        cout << min({(s[1] - '0') + get(s.substr(2, 2)), (s[1] - '0') * get(s.substr(2, 2)), (s[3] - '0') * get(s.substr(1, 2)), (s[3] - '0') + get(s.substr(1, 2))}) << '\\n';        return;    }    int res = oo;    for(int i=1; i<=n; i++)    {        if(s[i] == '0')        {            cout << 0 << '\\n';            return;        }    }    for(int i=1; i<n; i++)    {        vector<int> vc;        for(int j=1; j<=n; j++)        {            if(j == i)            {                vc.pb(get(s.substr(j, 2)));                j++;                continue;            }            vc.pb(s[j] - '0');        }        for(int j=0; j<vc.size(); j++)        {            int sum = 0;            if(j) sum += vc[j] * vc[j - 1];            else sum += vc[0];            for(int k=0; k<vc.size(); k++)            {                if(k == j) continue;                if(vc[k] == 1) continue;                if(k - 1 == j) sum += vc[k];                else sum += vc[k];            }            res = min(res, sum);        }    }    cout << res << '\\n';}#define taskname \"sol\"int32_t main(){    if (fopen(taskname \".inp\", \"r\"))    {        freopen(taskname \".inp\", \"r\", stdin);        //freopen(taskname \".out\", \"w\", stdout);    }    ios_base::sync_with_stdio(false);    cin.tie(nullptr);    int T = 1;    cin >> T;    for(int itest=1; itest<=T; itest++)    {        ReadInput();        Solve();    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "greedy",
        "implementation",
        "math",
        "two pointers"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Mathematical Problem.json"
}