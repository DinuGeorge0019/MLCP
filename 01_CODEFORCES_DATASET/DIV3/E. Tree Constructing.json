{"link": "https://codeforces.com//contest/1003/problem/E", "problemId": "194985", "problem_idx": "E", "shortId": "1003E", "contest_number": "1003", "problem_submissions": {"E": [39924193, 39917808, 39923474, 39917540, 39932885, 39926804, 39919143, 39925938, 39924942, 39926556, 39916485, 39925183, 39923509, 39920705, 39924767, 39925403, 39927398, 39926899], "F": [39919506, 39935298, 39943902, 40106973, 40297506, 39953456, 39925614, 39922839], "C": [39912024, 39905824, 39904178, 39906213, 39904627, 42751959, 39907680, 39905143, 39911684, 39902878, 39905375, 39904334, 39906247, 39910129, 39910619, 39907113, 39906670, 39906706, 39905022, 39908497], "B": [39905186, 39902197, 39901483, 39902052, 39901889, 39904203, 39903228, 39903078, 39906991, 39902754, 39902358, 39904660, 39907858, 39906542, 39904875, 39903839, 39904869, 39907658, 39906314], "D": [39904096, 39911298, 39910719, 39910712, 39908080, 42751939, 39912030, 39914322, 39908951, 39910733, 39921416, 39908636, 39908754, 39914171, 39914980, 39914769, 39914559, 39912864, 39917039, 39913107], "A": [39900356, 39897220, 39898269, 39897962, 39896936, 39904258, 39898551, 39897613, 39900244, 39896869, 39897844, 39899297, 39896960, 39897545, 39899825, 39897411, 39897414, 39897064, 39897008]}, "name": "E. Tree Constructing", "statement": "You are given three integers n, d and k.Your task is to construct an\r\nundirected tree on n vertices with diameter d and degree of each vertex\r\nat most k, or say that it is impossible.An undirected tree is a\r\nconnected undirected graph with n - 1 edges.Diameter of a tree is the\r\nmaximum length of a simple path (a path in which each vertex appears at\r\nmost once) between all pairs of vertices of this tree.Degree of a vertex\r\nis the number of edges incident to this vertex (i.e. for a vertex u it\r\nis the number of edges (u, v) that belong to the tree, where v is any\r\nother vertex of a tree).\r\n", "solutions": ["#include \"bits/stdc++.h\"\n#define MAXN 400009\n#define INF 1000000007\n#define mp(x,y) make_pair(x,y)\n#define all(v) v.begin(),v.end()\n#define pb(x) push_back(x)\n#define wr cout<<\"----------------\"<<endl;\n#define ppb() pop_back()\n#define tr(ii,c) for(__typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)\n#define ff first\n#define ss second\n#define my_little_dodge 46\n#define debug(x)  cerr<< #x <<\" = \"<< x<<endl;\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> PII;\ntemplate<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}\ntemplate<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}\nint deg[MAXN];\nvoid fail(){\n\tputs(\"NO\");\n\texit(0);\n}\nint main(){\n    //~ freopen(\"file.in\", \"r\", stdin);\n    int n,d,k;\n    scanf(\"%d%d%d\",&n,&d,&k);\n    if(n-1<d)\n\t\tfail();\n\tvector<PII>ans;\n\tqueue<PII>q;\n\tfor(int i=1;i<=d;i++){\n\t\tans.pb(mp(i,i+1));\n\t\tdeg[i]++;\n\t\tdeg[i+1]++;\n\t}\n\tfor(int i=1;i<=d+1;i++){\n\t\tint depth=min(i,d+2-i)-1;\n\t\tif(depth)\n\t\t\tq.push(mp(depth,i));\n\t}\n\tint node=d+1;\n\twhile(!q.empty()){\n\t\tPII nd=q.front();q.pop();\n\t\t//~ cout<<nd.ff<<\" \"<<nd.ss<<\" \"<<deg[nd.ss]<<\" \"<<k<<\" \"<<ans.size()<<endl;\n\t\tif((int)ans.size()<n-1){\n\t\t\twhile((int)ans.size()<n-1 and deg[nd.ss]<k){\n\t\t\t\t++node;\n\t\t\t\tdeg[nd.ss]++;deg[node]++;\n\t\t\t\t//~ cout<<nd.ss<<\" \"<<node<<endl;\n\t\t\t\tans.pb(mp(nd.ss,node));\n\t\t\t\tif(nd.ff>1)\n\t\t\t\t\tq.push(mp(nd.ff-1,node));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tbreak;\n\t}\n\tif((int)ans.size()<n-1)\n\t\tfail();\n\tfor(int i=1;i<=n;i++)\n\t\tif(deg[i]>k)\n\t\t\tfail();\n\t\t\n\tputs(\"YES\");\n\ttr(it,ans)\n\t\tprintf(\"%d %d\\n\",it->ff,it->ss);\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "graphs"], "dificulty": "2100", "interactive": false}