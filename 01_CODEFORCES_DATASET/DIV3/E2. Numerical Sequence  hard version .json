{
    "link": "https://codeforces.com//contest/1216/problem/E2",
    "problemId": "416605",
    "problem_idx": "E2",
    "shortId": "1216E2",
    "contest_number": "1216",
    "problem_submissions": {
        "E2": [
            60986734,
            60981170,
            60997115,
            60985637,
            60997177,
            60997976,
            60992623,
            69195725,
            60998670,
            61247650,
            60997442,
            60997640
        ],
        "E1": [
            60986701,
            60981381,
            60991296,
            60984645,
            60985839,
            60989738,
            60990832,
            60978683,
            60998375,
            60989797,
            60998466,
            60993985,
            60980914,
            60997704,
            60988736,
            60984723,
            60990990,
            60986601
        ],
        "C": [
            60981669,
            60990425,
            60975750,
            60975663,
            61086862,
            60983090,
            60984718,
            61533112,
            60981907,
            60982789,
            60976823,
            60986723,
            61054057,
            60989611,
            60976831,
            60974484,
            60977137,
            60972899,
            60979313
        ],
        "F": [
            60975517,
            60986121,
            60989454,
            61044084,
            60994589,
            60996911,
            60992052,
            60996768,
            60996199,
            60997941,
            61058200,
            60986086,
            60984536
        ],
        "D": [
            60970305,
            60969422,
            60979167,
            60973557,
            60979158,
            60977757,
            60974574,
            60971427,
            60975880,
            60986777,
            60980642,
            60979989,
            60972197,
            60998997,
            60971823,
            60978440,
            60977872,
            60980072,
            60979415,
            60982329
        ],
        "B": [
            60968540,
            60973425,
            60969453,
            60969948,
            60968651,
            60970421,
            60969221,
            60967329,
            60973241,
            60969188,
            60971106,
            60972717,
            61055106,
            60990306,
            60977585,
            60967750,
            60969441,
            60969185,
            60970105,
            60969050
        ],
        "A": [
            60966562,
            60966712,
            60966606,
            60967078,
            60966914,
            60966840,
            60966749,
            60973994,
            60967597,
            60966646,
            60968186,
            60966855,
            61054672,
            60987474,
            60967039,
            60966387,
            60966654,
            60966714,
            60966479,
            60966739
        ]
    },
    "name": "E2. Numerical Sequence  hard version ",
    "statement": ".You are given an sequence of form \"\" which consist of blocks of all\r\nconsecutive positive integers written one after another. The first block\r\nconsists of all numbers from 1 to 1, the second one from 1 to 2, the\r\nthird one from 1 to 3,\r\ndots, the i-th block consists of all numbers from 1 to i. So the first\r\n56 elements of the sequence are \"\". Elements of the sequence are\r\nnumbered from one. For example, the 1-st element of the sequence is 1,\r\nthe 3-rd element of the sequence is 2, the 20-th element of the sequence\r\nis 5, the 38-th element is 2, the 56-th element of the sequence is\r\n0.Your task is to answer q independent queries. In the i-th query you\r\nare given one integer k_i. Calculate the digit at the position k_i of\r\nthe sequence.\r\n",
    "solutions": [
        "//#pragma GCC optimize(2)\n//#pragma GCC optimize(3)\n#include<bits/stdc++.h>\n#define LL long long\n#define re register\n#define fr(i,x,y) for(int i=(x);i<=(y);i++)\n#define rf(i,x,y) for(int i=(x);i>=(y);i--)\n#define frl(i,x,y) for(int i=(x);i<(y);i++)\n#define lson (node<<1)\n#define rson (node<<1|1)\nusing namespace std;\nconst int N=400004;\nconst int p=998244353;\n\nvoid read(int &x){\n\tchar ch=getchar();x=0;\n\tfor(;ch<'0'||ch>'9';ch=getchar());\n\tfor(;ch>='0'&&ch<='9';ch=getchar()) x=(x<<3)+(x<<1)+ch-'0';\n}\n\nvoid read(LL &x){\n\tchar ch=getchar();x=0;\n\tfor(;ch<'0'||ch>'9';ch=getchar());\n\tfor(;ch>='0'&&ch<='9';ch=getchar()) x=(x<<3)+(x<<1)+ch-'0';\n}\n\nLL cal(LL x,LL y){\n\tif (x>y) return 0;\n\treturn (x+y)*(y-x+1)/2;\n}\n\nLL check(LL n){\n\tif (n==0) return 0;\n\tLL x=10,s=1,ans=0;\n\twhile(x-1<=n){\n\t\tans+=s*cal(n+1-(x-1),n+1-(x/10));\n\t\tx*=10;s++;\n\t}\n\tans+=s*cal(n+1-n,n+1-(x/10));\n\treturn ans;\n}\n\nLL check2(LL n){\n\tif (n==0) return 0;\n\tLL x=10,s=1,ans=0;\n\twhile(x-1<=n){\n\t\tans+=s*(x-x/10);\n\t\tx*=10;s++;\n\t}\n\tans+=s*(n-x/10+1);\n\treturn ans;\n}\n\nint s[N],len;\nvoid prt(LL n,int w){\n\tlen=0;\n\twhile(n) s[++len]=n%10,n/=10;\n\tprintf(\"%d\\n\",s[len-w+1]);\n}\n\nvoid solve(LL n){\n\tLL L=0,r=1e9;\n\twhile(L<r){\n\t\tLL mid=(L+r+1)>>1;\n\t\tif (check(mid)<n) L=mid;\n\t\t else r=mid-1;\n\t}\n\tn-=check(L);\n\t//cout<<check(L)<<endl;\n\tr=L+1,L=0;\n\twhile(L<r){\n\t\tLL mid=(L+r+1)>>1;\n\t\tif (check2(mid)<n) L=mid;\n\t\t else r=mid-1;\n\t}\n\tn-=check2(L);\n\tprt(L+1,n);\n}\n\nint main(){\n\tint T;LL n;\n\t//cout<<check(1)<<endl;\n\t//cout<<check(2)<<endl;\n\t//cout<<check(10)<<endl;\n\tread(T);\n\twhile(T--){\n\t\tread(n);\n\t\tsolve(n);\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "math"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E2. Numerical Sequence  hard version .json",
    "editorial_link": "https://codeforces.com//blog/entry/69954",
    "editorial": "This problem idea is not very hard. Now can be up to so we need to find\r\nthe number of block faster. Letâs do binary search on it! Now using some\r\npretty formulas we can determine if the total sum of lengths of blocks\r\nfrom to is greater than or equal to or not.And more about these\r\nformulas: letâs iterate over all possible length of numbers from to and\r\ncarry the sum of lengths of numbers with length less than the current\r\nlength . We know that the number of numbers (he-he) of length is exactly\r\n( for ). Letâs add to the total sum of lengths and increase by .What\r\ndoes means? This formula means that we have exactly blocks ending with\r\nnumbers of length and we need to add sum of lengths of all numbers with\r\nlength less than exactly times. And what does means? It is the sum sums\r\nof lengths of all numbers of length (i.e. previously we added sum of\r\nlengths of numbers with length less than and now we add sum of sums of\r\nlengths of numbers with length ).When we found the number of block ,\r\nletâs decrease by the total length of all blocks from to and continue\r\nsolving the problem. This part was pretty hard to understand. And the\r\neasiest part: when we determined the number of block we can easily\r\ndetermine the number from to such that our answer lies in the number .\r\nLetâs iterate over all lengths from to (here we go again) and for the\r\ncurrent length let ( for ). And now all we need is to increase the sum\r\nof lengths by .After determining decrease by sum of lengths of numbers\r\nfrom to and print .Time complexity: .\r\n",
    "hint": []
}