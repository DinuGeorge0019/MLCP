{
    "link": "https://codeforces.com//contest/1133/problem/C",
    "problemId": "308946",
    "problem_idx": "C",
    "shortId": "1133C",
    "contest_number": "1133",
    "problem_submissions": {
        "D": [
            50977706,
            50947355,
            100723482,
            50948843,
            50965152,
            50935620,
            50935134,
            50952860,
            50961383,
            50959922,
            50946976,
            50948619,
            50947073,
            50956907,
            50943195,
            50949460,
            50954635,
            50944647,
            50949611,
            50956624,
            50946681
        ],
        "F2": [
            50968854,
            50972022,
            50971221,
            50968366,
            50974597,
            50974087,
            50943311,
            50962568,
            51093176,
            50963051,
            50977549,
            50968954,
            51769081,
            50977124
        ],
        "F1": [
            50959078,
            50955230,
            50953315,
            50941907,
            50960168,
            50965272,
            50946141,
            50954816,
            50951285,
            50952154,
            50957023,
            50955812,
            50957050,
            50952531,
            50960906,
            50958622,
            50953869,
            50954476
        ],
        "E": [
            50952051,
            50961583,
            50962693,
            50951706,
            50964620,
            50954025,
            50954150,
            51032280,
            50963022,
            50950927,
            50972774,
            50964124,
            50963306,
            50964161,
            50960490,
            50966174
        ],
        "C": [
            50941353,
            50944201,
            50940430,
            50966196,
            50945464,
            50942925,
            50961788,
            50941100,
            50944821,
            50937379,
            50934514,
            50937910,
            50939090,
            50938244,
            50940255,
            50945217,
            50944371,
            50941409
        ],
        "B": [
            50938985,
            50941949,
            50938577,
            50961461,
            50942033,
            50940896,
            50965475,
            50936621,
            50942180,
            50948476,
            50938680,
            50936870,
            50936790,
            50935051,
            50937755,
            50941216,
            50940158,
            50939408
        ],
        "A": [
            50935306,
            50937849,
            50935030,
            50945613,
            51260785,
            50935398,
            50937671,
            50967123,
            50933770,
            50933763,
            50935392,
            50934515,
            50935161,
            50934233,
            50933760,
            50935141,
            50934723,
            50937065,
            50936471
        ]
    },
    "name": "C. Balanced Team",
    "statement": "You are a coach at your local university. There are n students under\r\nyour supervision, the programming skill of the i-th student is a_i.You\r\nhave to create a team for a new programming competition. As you know,\r\nthe more students some team has the more probable its victory is! So you\r\nhave to create a team with the maximum number of students. But you also\r\nknow that a team should be . It means that the programming skill of each\r\npair of students in a created team should differ by no more than 5.Your\r\ntask is to report the maximum possible number of students in a team.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n#define INF 9223372036854775807\n#define M_PI 3.14159265358979323846\n\nint mod = INF;\n\nint fastPow(int b, int e){int r = 1;while(e){if(e%2 == 1){r*=b;r%=mod;}b*=b;b%=mod;e/=2;}return r;}\nint pgcd(int a, int b){ if(a%b == 0) return b; else return pgcd(b, a%b);}\nint sign(int a){if(a < 0){ return -1;}if(a == 0) {return 0;}return 1;}\nbool isPrime(int a){if(a == 1) {return false;}int f = sqrt(a);for(int i = 2; i<=f; i++){if(a%i == 0){return false;}}return true;}\nint toInt(string s){int tot = 0;for(int i = s.size()-1; i >= 0; i--){tot+=((s[i]-'0')%mod)*fastPow(10,i);tot%=mod;}return tot;}\nstring toString(int a){string s = \"\";while(a){s = (char)('0'+a%10) + s;a/=10;}return s;}\n\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int n;\n    cin >> n;\n    vector<int> v(n);\n    for(int i = 0; i < n; i++){\n        cin >> v[i];\n    }\n    sort(v.begin(), v.end());\n    int ans = 1;\n\n    for(int i = 0; i < n; i++){\n        int l = lower_bound(v.begin(), v.end(), v[i]-5)-v.begin();\n        int r = i;\n        if(l > r) continue;\n        ans = max(ans, r-l+1);\n    }\n\n    cout << ans << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "sortings",
        "two pointers"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Balanced Team.json",
    "editorial_link": "https://codeforces.com//blog/entry/65807",
    "editorial": "Let\u00e2\u0080\u0099s sort all values in non-decreasing order. Then we can use two\r\npointers to calculate for each student the maximum number of students\r\nsuch that (). This is pretty standard approach. We also can use binary\r\nsearch to do it (or we can store for each programming skill the number\r\nof students with this skill and just iterate from some skill to and sum\r\nup all numbers of students).\r\n"
}