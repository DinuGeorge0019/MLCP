{
    "link": "https://codeforces.com//contest/1234/problem/A",
    "problemId": "426510",
    "problem_idx": "A",
    "shortId": "1234A",
    "contest_number": "1234",
    "problem_submissions": {
        "F": [
            61647149,
            61645384,
            61650555,
            61651870,
            61667991,
            62194838,
            61712119,
            61666405,
            61729878,
            61729799,
            61664234,
            68329269,
            61680222,
            61752962
        ],
        "E": [
            61637715,
            61643598,
            61648539,
            61642595,
            61643656,
            61651547,
            61650480,
            61652692,
            61641203,
            61649142,
            61659878,
            61650257,
            61653772,
            61654963,
            61657548,
            61649045,
            61654746,
            61657468,
            61654998,
            61655416
        ],
        "C": [
            61632575,
            61627606,
            61654578,
            61628592,
            61630466,
            61624366,
            61638436,
            61629236,
            61652967,
            61631133,
            61636961,
            61642219,
            61643521,
            61637365,
            61636499,
            61632963,
            61634943,
            61633612,
            61629926,
            61640840
        ],
        "B1": [
            61622243,
            61619256,
            61623667,
            61618942,
            61620065,
            61620401,
            61621233,
            61618288,
            61620321,
            61625306,
            61621149,
            61623370,
            61622245,
            61622135,
            61620954,
            61622191,
            61621982,
            61619236,
            61622554,
            61619031
        ],
        "B2": [
            61622177,
            61619354,
            61626675,
            61618859,
            61617735,
            61620174,
            61619049,
            61620082,
            61618293,
            61625056,
            61620210,
            61624129,
            61619541,
            61622218,
            61620837,
            61628084,
            61621947,
            61619088,
            61624726,
            61619187
        ],
        "D": [
            61620922,
            61632151,
            61634663,
            61631934,
            61627516,
            61628612,
            61627461,
            61639106,
            61624471,
            61635660,
            61628357,
            61634636,
            61632191,
            61627962,
            61627805,
            61636954,
            61642587,
            61638100,
            61640694,
            61630321
        ],
        "A": [
            61612861,
            61620182,
            61616933,
            61612804,
            61614828,
            61613376,
            61613863,
            61613458,
            61613474,
            61619474,
            61614252,
            61614656,
            61613262,
            61614503,
            61613228,
            61614047,
            61614323,
            61618981,
            61616841,
            61613092
        ]
    },
    "name": "A. Equalize Prices Again",
    "statement": "You are both a shop keeper and a shop assistant at a small nearby shop.\r\nYou have n goods, the i-th good costs a_i coins.You got tired of\r\nremembering the price of each product when customers ask for it, thus\r\nyou decided to simplify your life. More precisely you decided to set the\r\nsame price for all n goods you have.However, you don’t want to lose any\r\nmoney so you want to choose the price in such a way that the sum of new\r\nprices is not less than the sum of the initial prices. It means that if\r\nyou sell all n goods for the new price, you will receive at least the\r\nsame (or greater) amount of money as if you sell them for their initial\r\nprices.On the other hand, you don’t want to lose customers because of\r\nbig prices so among all prices you can choose you need to choose the\r\nminimum one.So you need to find the minimum possible equal price of all\r\nn goods so if you sell them for this price, you will receive at least\r\nthe same (or greater) amount of money as if you sell them for their\r\ninitial prices.You have to answer q independent queries.\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <random>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <numeric>\n#include <cstdlib>\n#include <cstring>\n#include <deque>\n#include <sstream>\n#include <bitset>\n#include <cassert>\n#include <fstream>\n#include <queue>\n\n#define len(X) ((int)(X).size())\n\n#ifdef __LOCAL\n\t#define DBG(X) cout << #X << \"=\" << (X) << endl;\n#else\n\t#define DBG(X)\n#endif\n\nusing std::cin;\nusing std::cout;\nusing std::vector;\nusing std::string;\nusing std::pair;\nusing std::swap;\nusing std::sort;\nusing std::lower_bound;\nusing std::unique;\n\nusing int64 = long long int;\nusing pii   = pair<int, int>;\nusing pii64 = pair<int64, int64>;\n\nconst int NIL = -1;\n\nvoid init_IO() {\n\tstd::ios_base::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\tcout.tie(nullptr);\n}\n\nvoid solve() {\n\tint64 sum = 0, cnt;\n\tcin >> cnt;\n\n\tfor(int i = 0; i < cnt; ++i) {\n\t\tint64 val;\n\t\tcin >> val;\n\n\t\tsum += val;\n\t}\n\n\tcout << (sum + cnt - 1) / cnt << '\\n';\n}\n\nint main() {\n\tinit_IO();\n\n\tint T;\n\tcin >> T;\n\n\twhile(T--)\n\t\tsolve();\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Equalize Prices Again.json",
    "editorial_link": "https://codeforces.com//blog/entry/70233",
    "editorial": "In this problem, we need to find the minimum possible such that , where\r\nis the sum of all . equals to , where is divided by rounded up.\r\n",
    "hint": []
}