{
    "link": "https://codeforces.com//contest/1846/problem/C",
    "problemId": "1999903",
    "problem_idx": "C",
    "shortId": "1846C",
    "contest_number": "1846",
    "problem_submissions": {
        "D": [
            212644561,
            212601869,
            212627940,
            212630796,
            212612008,
            212605457,
            212607036,
            212611321,
            212621249,
            212734960,
            212616654,
            212623428,
            212686759,
            212608967,
            212593345,
            212608113,
            212605022,
            212603622
        ],
        "C": [
            212643708,
            212590754,
            212597786,
            212637806,
            212599623,
            214976381,
            212594269,
            212592027,
            212594549,
            212623071,
            212602417,
            212609037,
            212589627,
            212599996,
            212584839,
            212597114,
            212594978,
            212592915
        ],
        "F": [
            212622545,
            212665462,
            212682260,
            212609400,
            212686828,
            212691684,
            212693145,
            212679766,
            212685268,
            212694899,
            212676430,
            212667305,
            212656670,
            212666460,
            212775385,
            212774487,
            212649190
        ],
        "G": [
            212619112,
            212649833,
            212653628,
            212587343,
            212666847,
            214992050,
            214991957,
            212665653,
            212663992,
            212653649,
            212664491,
            212735006,
            212682268,
            212688232,
            212639324,
            212635867,
            212663045,
            212661853,
            212662659,
            212670086
        ],
        "A": [
            212587490,
            212568900,
            212577930,
            212641869,
            212568823,
            212569846,
            212572480,
            212573171,
            212568754,
            212577603,
            212569523,
            212568240,
            212573791,
            212568987,
            212573789,
            212575418,
            212569442,
            212569804
        ],
        "E1": [
            212583884,
            212617316,
            212606448,
            212623115,
            212627434,
            212613908,
            212631957,
            212634362,
            212632579,
            212639238,
            212631656,
            212682549,
            212619469,
            212609399,
            212621056,
            212617657,
            212621413
        ],
        "E2": [
            212583611,
            212631229,
            212641088,
            212622205,
            212627031,
            212628097,
            212631648,
            212664333,
            212642292,
            212649427,
            213132515,
            212656109,
            212682093,
            212633331,
            212637787,
            212646679,
            213982829
        ],
        "B": [
            212579517,
            212579760,
            212584363,
            212640990,
            212582929,
            212579034,
            212579312,
            212580015,
            212584049,
            212590622,
            212582483,
            212573350,
            212580771,
            212574075,
            212585567,
            212583374,
            212575067,
            212577471
        ]
    },
    "name": "C. Rudolf and the Another Competition",
    "statement": "Rudolf has registered for a programming competition that will follow the\r\nrules of ICPC. The rules imply that for each solved problem, a\r\nparticipant gets 1 point, and also incurs a penalty equal to the number\r\nof minutes passed from the beginning of the competition to the moment of\r\nsolving the problem. In the final table, the participant with the most\r\npoints is ranked higher, and in case of a tie in points, the participant\r\nwith the lower penalty is ranked higher.In total, n participants have\r\nregistered for the competition. Rudolf is a participant with index 1. It\r\nis known that m problems will be proposed. And the competition will last\r\nh minutes.A powerful artificial intelligence has predicted the values\r\nt_{i, j}, which represent the number of minutes it will take for the\r\ni-th participant to solve the j-th problem.Rudolf realized that the\r\norder of solving problems will affect the final result. For example, if\r\nh = 120, and the times to solve problems are [20, 15, 110], then if\r\nRudolf solves the problems in the order: {3, 1, 2}, then he will only\r\nsolve the third problem and get 1 point and 110 penalty. {1, 2, 3}, then\r\nhe will solve the first problem after 20 minutes from the start, the\r\nsecond one after 20+15=35 minutes, and he will not have time to solve\r\nthe third one. Thus, he will get 2 points and 20+35=55 penalty. {2, 1,\r\n3}, then he will solve the second problem after 15 minutes from the\r\nstart, the first one after 15+20=35 minutes, and he will not have time\r\nto solve the third one. Thus, he will get 2 points and 15+35=50 penalty.\r\nRudolf became interested in what place he will take in the competition\r\nif each participant solves problems in the optimal order based on the\r\npredictions of the artificial intelligence. It will be assumed that in\r\ncase of a tie in points and penalty, Rudolf will take the best place.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\n\n\nvoid solve()\n{\n   int n, m, h;\n\tcin >> n >> m >> h;\n\tvector<long long> p(n), pen(n);\n\tint position = 1;\n\tfor (int i=0;i<n;++i) {\n\t\tvector<int> t(m);\n\t\tfor (int &j: t)\n            cin >> j;\n\t\tsort(t.begin(), t.end());\n\t\tint s = 0;\n\t\tfor (int j: t) {\n\t\t\tif (s + j > h) \n\t\t\tbreak;\n\t\t\ts += j;\n\t\t\tp[i]++;\n\t\t\tpen[i] += s;\n\t\t}\n\t\tif (p[i] > p[0] || (p[i] == p[0] && pen[i] < pen[0])) \n            position++;\n\t}\n\tcout << position << \"\\n\";\n\n}\n\nint main()\n{\n    int t;\n    cin>>t;\n    while(t--)\n    {\n        solve();\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "dp",
        "greedy",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Rudolf and the Another Competition.json",
    "editorial_link": "https://codeforces.com//blog/entry/118044",
    "editorial": "First of all, it is necessary to determine the optimal order of solving\r\nproblems for each participant. It is claimed that it is most optimal to\r\nsolve problems in ascending order of their solution time. Letâs prove\r\nthis: Firstly, it is obvious that this strategy will allow solving the\r\nmaximum number of problems. Secondly, this strategy will also result in\r\nthe minimum total penalty time. Letâs assume that the participant solves\r\na total of problems. The solution time of the first problem will be\r\nadded to the penalty time for all problems, the solution time of the\r\nsecond problem will be added to the penalty time for problems, and so\r\non. Therefore, it is advantageous for the longest time to be added to\r\nthe fewest number of problems. In other words, the problem with the\r\nlongest solution time should be solved last. Then, the same reasoning is\r\nrepeated for the remaining problems. Next, it is necessary to calculate\r\nthe number of solved problems and the penalty time for each participant,\r\nbased on the described strategy. To do this, sort the solution times of\r\nthe problems for each participant and simulate the solving process.\r\nFinally, count the number of participants who outperform Rudolph in the\r\nresults table. The overall time complexity is .\r\n",
    "hint": [
        "Hint 1 What is the optimal order of task solving?",
        "Hint 2 t 1 ≤ t 2 ≤ t 3 ≤ ... ≤ t m"
    ]
}