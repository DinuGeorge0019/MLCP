{
    "link": "https://codeforces.com//contest/1811/problem/E",
    "problemId": "1864327",
    "problem_idx": "E",
    "shortId": "1811E",
    "contest_number": "1811",
    "problem_submissions": {
        "D": [
            200754699,
            200776097,
            200739331,
            200726520,
            200726373,
            200739709,
            200727620,
            200738822,
            200747547,
            200759872,
            200759241,
            200755197,
            200743077,
            200739694,
            200732035,
            200829329,
            200737167,
            200752747,
            201109379,
            200751007,
            200768259,
            200755335
        ],
        "C": [
            200736628,
            200766081,
            200730565,
            200712627,
            200719542,
            200722259,
            200709529,
            200720517,
            200728620,
            200721825,
            200720940,
            200720985,
            200725767,
            200879176,
            200829313,
            200722588,
            200730813,
            201109333,
            200731130,
            200718431,
            200716271
        ],
        "E": [
            200723606,
            200703078,
            200750795,
            200749843,
            200716143,
            200712796,
            200731621,
            200716868,
            200723986,
            200707830,
            200710920,
            200730415,
            200743490,
            200719631,
            200829343,
            200754433,
            200735492,
            201109566,
            200738090,
            200759827,
            200722483
        ],
        "A": [
            200719784,
            200697693,
            200709735,
            200697878,
            200695570,
            200704142,
            200696911,
            200699911,
            200693442,
            200693354,
            200694979,
            200699076,
            200694846,
            200829295,
            200700499,
            200698275,
            201109090,
            200699672,
            200700596,
            200701647
        ],
        "G2": [
            200717686,
            200742559,
            200770344,
            200958696,
            201374187,
            200831218,
            200831193
        ],
        "G1": [
            200709506,
            200742442,
            200769728,
            200763697,
            200744953,
            200746011,
            200720480,
            200748735,
            200760247,
            200772203,
            200771883,
            200769679,
            200758537,
            200829373,
            200780627,
            200774881,
            201171573,
            200757032
        ],
        "B": [
            200708366,
            200716585,
            200706793,
            200704223,
            200701078,
            200703012,
            200714270,
            200697883,
            200700006,
            200701394,
            200706383,
            200878903,
            200709089,
            200704797,
            200829301,
            200712812,
            200723595,
            201109130,
            200726473,
            200716074,
            200734848
        ],
        "F": [
            200764192,
            200777349,
            200768176,
            201109661,
            200843383,
            200769121,
            201693689,
            201686646,
            200776061
        ]
    },
    "name": "E. Living Sequence",
    "statement": "In Japan, the number 4 reads like death, so Bob decided to build a . a\r\ncontains all natural numbers that do not contain the digit 4. a = [1, 2,\r\n3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16,\r\nldots].For example, the number 1235 is part of the sequence a, but the\r\nnumbers 4321, 443 are not part of the sequence a.Bob realized that he\r\ndoes not know how to quickly search for a particular number by the\r\nposition k in the sequence, so he asks for your help.For example, if Bob\r\nwants to find the number at position k = 4 (indexing from 1), you need\r\nto answer a_k = 5.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint64_t dp[19];\nint a[19];\n\nint64_t f(int i, bool smaller, bool pos) {\n  if (i < 0) {\n    return pos;\n  }\n  if (smaller && pos && dp[i] != -1) {\n    return dp[i];\n  }\n  int64_t ans = 0;\n  int lim = smaller ? 9 : a[i];\n  for (int d = 0; d <= lim; d++) {\n    if (d != 4) ans += f(i - 1, smaller || d < lim, pos || d > 0);\n  }\n  return smaller && pos ? dp[i] = ans : ans;\n}\n\nint64_t solve(int64_t x) {\n  int n = 0;\n  do {\n    a[n++] = x % 10;\n    x /= 10;\n  } while (x > 0);\n  return f(n - 1, 0, 0);\n}\n\nvoid solve() {\n  int64_t k;\n  cin >> k;\n  int64_t lo = 1, hi = 1e18;\n  int64_t ans = -1;\n  while (lo <= hi) {\n    int64_t mid = (lo + hi) / 2;\n//    cerr << mid << endl;\n    if (solve(mid) >= k) {\n      ans = mid;\n      hi = mid - 1;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  cout << ans << \"\\n\";\n}\n\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0); cout.tie(0);\n  memset(dp, -1, sizeof(dp));\n  int tt; cin >> tt;\n  while (tt--) {\n    solve();\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp",
        "math",
        "number theory"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Living Sequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/114788",
    "editorial": "Note that any number in the sequence can be made up of possible digits\r\n(all digits except ). Then letâs find the first digit of the answer,\r\nnotice that it is just or , where (where the length of the number weâre\r\nlooking for) and the maximum. Note that simply corresponds to a digit in\r\nthe base- numeral system. Why is this so? Because without the first\r\ndigit we can assemble any numbers with possible digits, and we can put\r\nthe digits except in the first place. Thus, in the answer, the first\r\ndigit will be if and if .Note that once the first digit is determined,\r\nthe rest can be found the same way, since the prefix does not affect\r\nanything.\r\n",
    "hint": []
}