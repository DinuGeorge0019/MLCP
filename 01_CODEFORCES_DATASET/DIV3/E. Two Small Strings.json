{
    "link": "https://codeforces.com//contest/1213/problem/E",
    "problemId": "399404",
    "problem_idx": "E",
    "shortId": "1213E",
    "contest_number": "1213",
    "problem_submissions": {
        "F": [
            59744893,
            59749834,
            59752078,
            59758038,
            59760843,
            59749304,
            59755658,
            59753555,
            59746277,
            59750645,
            61343687,
            61343661,
            61343648,
            61343618,
            61343520,
            61343278,
            60634386,
            59775323,
            59750244,
            61204533,
            59752892,
            59797507
        ],
        "E": [
            59737696,
            59743919,
            59747577,
            59744833,
            59735288,
            59758317,
            59737942,
            59763722,
            59753071,
            59747085,
            60634367,
            59747957,
            59750137,
            59754792,
            59753767,
            59755311
        ],
        "G": [
            59727157,
            59735316,
            59735384,
            59743644,
            59742824,
            59749657,
            59742214,
            59747653,
            59735778,
            59738294,
            59735722,
            59736569,
            59754233,
            60634412,
            59737158,
            59744394,
            59749114,
            59742323,
            59744002,
            59732055,
            59770392,
            59747210
        ],
        "D1": [
            59722102,
            59719494,
            59727128,
            59722171,
            59736098,
            59727619,
            59727732,
            59725611,
            59727388,
            59733062,
            59729604,
            59727297,
            59726052,
            60634351,
            59721705,
            59730365,
            59732883,
            59727664,
            59731108,
            59737247,
            59732784
        ],
        "D2": [
            59721760,
            59722747,
            59727674,
            59722359,
            59721508,
            59736468,
            59731787,
            59743643,
            59725289,
            59727512,
            59732689,
            59729260,
            59727002,
            59732076,
            60634360,
            59721352,
            59736832,
            59737287,
            59732145,
            59730871,
            59737130,
            59732397
        ],
        "C": [
            59718793,
            59715437,
            59720057,
            59718496,
            59726783,
            59722688,
            59718368,
            59722836,
            59719661,
            59725890,
            59722169,
            59721614,
            60634346,
            59736818,
            59724098,
            59724288,
            59727369,
            59723746,
            59726630,
            59726972
        ],
        "B": [
            59712460,
            59711849,
            59713537,
            59713547,
            59714412,
            59717212,
            59714229,
            59714299,
            59715293,
            59714606,
            59715624,
            59714068,
            60634341,
            59718378,
            59714795,
            59717101,
            59713372,
            59717314,
            59722177,
            59715750
        ],
        "A": [
            59710837,
            59710763,
            59711301,
            59711479,
            59712215,
            59715335,
            59710947,
            59711797,
            59711527,
            59711289,
            59711355,
            59710892,
            60635322,
            59713486,
            59711520,
            59711772,
            59719126,
            59712741,
            59713602,
            59712425
        ]
    },
    "name": "E. Two Small Strings",
    "statement": "You are given two strings s and t and both consisting only of characters\r\n\u201d, \u201d and \u201d.Possible examples of strings s and t: \"\", \"\", \"\".You have to\r\nfind a string res consisting of 3n characters, n characters should be \u201d,\r\nn characters should be \u201d and n characters should be \u201d and s and t should\r\nnot occur in res as substrings.A substring of a string is a contiguous\r\nsubsequence of that string. So, the strings \"\", \"\" and \"\" are substrings\r\nof the string \"\", but the strings \"\", \"\" and \"\" are not substrings of\r\nthe string \"\".If there are multiple answers, you can print any of them.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\nusing namespace std;\n#define int long long\n#define pb push_back\n#define fi first\n#define se second\n#define FF first\n#define SS second\n#define mp make_pair\n#define pii pair<int,int>\n#define sd(x) scanf(\"%d\",&x)\n#define slld(x) scanf(\"%lld\",&x)\n#define pd(x) printf(\"%d\\n\",x)\n#define plld(x) printf(\"%lld\\n\",x)\n#define endl '\\n'\n#define fr(i, a, b) for(int i = a; i <= b; i++)\n#define sz(x) (int)x.size()\n#define all(x) x.begin(), x.end()\n\ntypedef long long ll;\ntypedef long double f80;\n\nconst int mod = 1e9 + 7;\n\nll pwr(ll a, ll b) {\n    a %= mod;\n    ll ans = 1;\n    while(b) {\n        if(b & 1) ans = (ans * a) % mod;\n        a = (a * a) % mod;\n        b >>= 1;\n    }\n    return ans;\n}\n\n\n\nsigned main()\n{\n    #ifdef LOCAL\n        freopen(\"inp.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif\n    ios_base::sync_with_stdio(0);\n    cin.tie(NULL);\n    cout.tie(NULL);\n    string per = \"abc\";\n    int n;\n    cin >> n;\n    string a, b;\n    cin >> a >> b;\n    fr(p, 1, 6) {\n        next_permutation(all(per));\n        string lol = per + per;\n        bool pos = 1;\n        fr(i, 0, 2) {\n            if(lol.substr(i, 2) == a || lol.substr(i, 2) == b) pos = 0;\n        }\n        if(pos) {\n            cout << \"YES\" << endl;\n            fr(i, 1, n) {\n                cout << per;\n            }\n            return 0;\n        }\n    }\n    string c = b;\n    reverse(all(c));\n    if(a == c) {\n        cout << \"YES\" << endl;\n        fr(i, 1, n) {\n            cout << a[0];\n        }\n        fr(j, 0, 2) {\n            if((char)('a' + j) == a[0] || (char)('a' + j) == b[0]) continue;\n            fr(i, 1, n)\n                cout << (char)('a' + j);\n            break;\n        }\n        fr(i, 1, n) {\n            cout << a[1];\n        }\n        return 0;\n    }\n    if(a[1] == b[1]) {\n        cout << \"YES\" << endl;\n        fr(i, 1, n) {\n            cout << a[1];\n        }\n        fr(j, 0, 2) {\n            if((char)('a' + j) == a[1]) continue;\n            fr(i, 1, n)\n                cout << (char)('a' + j);\n        }\n        return 0;\n    }\n    else if(a[0] == b[0]) {\n        cout << \"YES\" << endl;\n        fr(j, 0, 2) {\n            if((char)('a' + j) == a[0]) continue;\n            fr(i, 1, n)\n                cout << (char)('a' + j);\n        }\n        fr(i, 1, n) {\n            cout << a[0];\n        }\n        return 0;\n    }\n    cout << \"NO\";\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Two Small Strings.json",
    "editorial_link": "https://codeforces.com//blog/entry/69464",
    "editorial": "We can check the following solution by stress-testing (or maybe prove it\r\nsomehow): let\u00e2\u0080\u0099s iterate over all possible permutations of the string \"\".\r\nLet the first character of the current permutation be , the second one\r\nbe and the third one be . Then let\u00e2\u0080\u0099s add the following two candidates to\r\nthe answer: \"\" (the string consisting of copies of \"\") and \"\" (exactly\r\ncopies of then exactly copies of and exactly copies of ). Then the\r\nanswer will be among these strings and we can check each of them\r\nnaively.\r\n"
}