{
    "link": "https://codeforces.com//contest/1846/problem/F",
    "problemId": "1999907",
    "problem_idx": "F",
    "shortId": "1846F",
    "contest_number": "1846",
    "problem_submissions": {
        "D": [
            212644561,
            212601869,
            212627940,
            212630796,
            212612008,
            212605457,
            212607036,
            212611321,
            212621249,
            212734960,
            212616654,
            212623428,
            212686759,
            212608967,
            212593345,
            212608113,
            212605022,
            212603622
        ],
        "C": [
            212643708,
            212590754,
            212597786,
            212637806,
            212599623,
            214976381,
            212594269,
            212592027,
            212594549,
            212623071,
            212602417,
            212609037,
            212589627,
            212599996,
            212584839,
            212597114,
            212594978,
            212592915
        ],
        "F": [
            212622545,
            212665462,
            212682260,
            212609400,
            212686828,
            212691684,
            212693145,
            212679766,
            212685268,
            212694899,
            212676430,
            212667305,
            212656670,
            212666460,
            212775385,
            212774487,
            212649190
        ],
        "G": [
            212619112,
            212649833,
            212653628,
            212587343,
            212666847,
            214992050,
            214991957,
            212665653,
            212663992,
            212653649,
            212664491,
            212735006,
            212682268,
            212688232,
            212639324,
            212635867,
            212663045,
            212661853,
            212662659,
            212670086
        ],
        "A": [
            212587490,
            212568900,
            212577930,
            212641869,
            212568823,
            212569846,
            212572480,
            212573171,
            212568754,
            212577603,
            212569523,
            212568240,
            212573791,
            212568987,
            212573789,
            212575418,
            212569442,
            212569804
        ],
        "E1": [
            212583884,
            212617316,
            212606448,
            212623115,
            212627434,
            212613908,
            212631957,
            212634362,
            212632579,
            212639238,
            212631656,
            212682549,
            212619469,
            212609399,
            212621056,
            212617657,
            212621413
        ],
        "E2": [
            212583611,
            212631229,
            212641088,
            212622205,
            212627031,
            212628097,
            212631648,
            212664333,
            212642292,
            212649427,
            213132515,
            212656109,
            212682093,
            212633331,
            212637787,
            212646679,
            213982829
        ],
        "B": [
            212579517,
            212579760,
            212584363,
            212640990,
            212582929,
            212579034,
            212579312,
            212580015,
            212584049,
            212590622,
            212582483,
            212573350,
            212580771,
            212574075,
            212585567,
            212583374,
            212575067,
            212577471
        ]
    },
    "name": "F. Rudolph and Mimic",
    "statement": "Rudolph is a scientist who studies alien life forms. There is a room in\r\nfront of Rudolph with n different objects scattered around. Among the\r\nobjects there is amazing creature a mimic that can turn into any object.\r\nHe has already disguised himself in this room and Rudolph needs to find\r\nhim by experiment.The experiment takes place in several stages. At each\r\nstage, the following happens: Rudolf looks at all the objects in the\r\nroom and writes down their types. The type of each object is indicated\r\nby a number; there can be several objects of the same type. After\r\ninspecting, Rudolph can point to an object that he thinks is a mimic.\r\nAfter that, the experiment ends. Rudolph only has one try, so if he is\r\nunsure of the mimic\u2019s position, he does the next step instead. Rudolf\r\ncan remove any number of objects from the room (possibly zero). Then\r\nRudolf leaves the room and at this time all objects, including the\r\nmimic, with each other, their order is changed, and the into any other\r\nobject (even one that is not in the room). After this, Rudolf returns to\r\nthe room and repeats the stage. The , but it can not remain a same\r\nobject for more than two stages in a row.Rudolf\u2019s task is to detect\r\nmimic in no more than stages.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\n\nvoid solve()\n{\n\n    int n;\n\tcin >> n;\n\tvector<int> a(n);\n\tfor (int &i: a) \n    cin >> i;\n\tmap<int, int> mpa, mpb;\n\tfor (int i: a)\n\t mpa[i]++;\n\tcout << \"- 0\" << \"\\n\";\n\tfflush(stdout);\n\tvector<int> b(n), c;\n\tfor (int &i: b) \n\tcin >> i;\n\tc = b;\n\tfor (int i: b) \n\tmpb[i]++;\n\tif (mpa == mpb) \n\t{\n\t\tcout << \"- 0\" << \"\\n\";\n\t\tfflush(stdout);\n\t\tfor (int &i: b) \n\t\tcin >> i;\n\t\tc = b;\n\t\tmpb.clear();\n\t\tfor (int i: b) \n\t\tmpb[i]++;\n\t}\n\tint t = -1;\n\tfor (auto &pr: mpb) \n\t{\n\t\tif (pr.second > mpa[pr.first]) \n\t\t{\n\t\t    t = pr.first;\n    break;\n    }\n\t}\n\tvector<int> rem;\n\ta = c;\n\tfor (int i=0;i<n;    ++i)\n        {\n\t\tif (a[i] != t) \n\t\t{\n\t\t\trem.push_back(i + 1);\n\t\t}\n\t}\n\tcout << \"- \" << rem.size();\n\tfor (int i: rem) \n\tcout << \" \" << i;\n\tcout << \"\\n\";\n\tfflush(stdout);\n\tb = vector<int>(n - (int)rem.size());\n\tfor (int &i: b) \n\tcin >> i;\n\tfor (int i=0;     i<b.size();      ++i)\n\t{\n\t\tif (b[i] != t) \n\t\t{\n\t\t\tcout << \"! \" << i + 1 << \"\\n\";\n\t\t\tfflush(stdout);\n\t\t\treturn;\n\t\t}\n\t}\n\tcout << \"- 0\" << \"\\n\";\n\tfflush(stdout);\n\tfor (int &i: b) cin >> i;\n\tfor (int i=0;i<b.size();++i) {\n\t\tif (b[i] != t) {\n\t\t\tcout << \"! \" << i + 1 << \"\\n\";\n\t\t\tfflush(stdout);\n\t\t\treturn;\n\t\t}\n\t}\n\tcout << \"- 0\" << \"\\n\";\n\tfflush(stdout);\n\tfor (int &i: b) \n\tcin >> i;\n\tfor (int i=0; i<b.size(); ++i) {\n\t\tif (b[i] != t) {\n\t\t\tcout << \"! \" << i + 1 << \"\\n\";\n\t\t\tfflush(stdout);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nint main()\n{\n    int t;\n    cin>>t;\n    while(t--)\n    {\n        solve();\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation",
        "interactive"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Rudolph and Mimic.json",
    "editorial_link": "https://codeforces.com//blog/entry/118044",
    "editorial": "The strategy is to keep track of the number of objects of each type.\r\nWhen the number of objects of a certain type increases, that means the\r\nmimic has turned into an object of that type. Then you can delete all\r\nother objects. After the first such removal, all objects will become\r\nequal. Then, after maximum two stages, the mimic will be forced to turn\r\ninto something else and it will be possible to unambiguously identify\r\nit.Let\u00e2\u0080\u0099s consider the worst case, where the mimic does not change its\r\nappearance between the first and second stages. Then we do not remove\r\nany element with the first two requests. Between the second and third\r\nsteps, the mimic will be forced to transform, and then we can remove all\r\nobjects except for those that have the same type as the mimic. The mimic\r\nmay not change between the third and fourth stages, but will be forced\r\nto transform between the fourth and fifth. Then we will be able to\r\nunambiguously determine the mimic, since before the transformation all\r\nobjects were the same.\r\n"
}