{"link": "https://codeforces.com//contest/1907/problem/D", "problemId": "2365626", "problem_idx": "D", "shortId": "1907D", "contest_number": "1907", "problem_submissions": {"E": [235922096, 235913995, 235900143, 235903340, 235921667, 235901704, 235905781, 236028309, 235900905, 235914797, 235900953, 235904410, 235901939, 235904392, 235896353, 235889597, 235895501, 235901631, 235906746, 235904536], "G": [235905776, 235944172, 240754131, 236224108, 239539892], "D": [235889060, 235907893, 235885826, 235889907, 235880968, 235891188, 235887305, 235888897, 235891138, 235883950, 235891896, 235891023, 235886777, 235889881, 237694958, 235867800, 235908732, 235892927, 235897779, 235896975], "F": [235888366, 235927475, 235911089, 235918673, 235897756, 235921167, 235919938, 235923351, 235911206, 235921824, 235923367, 235927696, 235932260, 235934792, 235914612, 235925488, 235926925, 235918432, 235922859], "C": [235881778, 235895243, 235879309, 235877991, 235891348, 235879417, 235877691, 235876696, 235876979, 235890394, 235881961, 235879314, 235876924, 235882981, 236028314, 235898937, 235877137, 235881599, 235886820, 235888590], "B": [235864949, 235883426, 235872876, 235865746, 235868017, 235866431, 235870498, 236028285, 235870319, 235871004, 235871121, 235872127, 235871434, 235867930, 235865841, 235901960, 235870212, 235875746, 235875948, 235874656], "A": [235860107, 235867323, 235860491, 235859890, 235861006, 235859799, 235860028, 235860311, 235859823, 235863201, 235863210, 235860674, 236211486, 235860837, 235860015, 235864893, 235860651, 235867283, 235865532, 235861983]}, "name": "D. Jumping Through Segments", "statement": "Polycarp is designing a level for a game. The level consists of n\r\nsegments on the number line, where the i-th segment starts at the point\r\nwith coordinate l_i and ends at the point with coordinate r_i.The player\r\nstarts the level at the point with coordinate 0. In one move, they can\r\nmove to any point that is within a distance of no more than k. After\r\ntheir i-th move, the player must land within the i-th segment, that is,\r\nat a coordinate x such that l_i\r\nle x\r\nle r_i. This means: After the first move, they must be inside the first\r\nsegment (from l_1 to r_1); After the second move, they must be inside\r\nthe second segment (from l_2 to r_2); ... After the n-th move, they must\r\nbe inside the n-th segment (from l_n to r_n). The level is considered\r\ncompleted if the player reaches the n-th segment, following the rules\r\ndescribed above. After some thought, Polycarp realized that it is\r\nimpossible to complete the level with some values of k.Polycarp does not\r\nwant the level to be too easy, so he asks you to determine the minimum\r\ninteger k with which it is possible to complete the level.\r\n", "solutions": ["#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<map>\n#include<array>\n#include<set>\n#include<map>\n#include<queue>\n#include<iomanip>\n#include<numeric>\nusing namespace std;\nint n;\nlong long L[200000], R[200000];\ninline bool check(int x) {\n\tlong long cl = 0, cr = 0;\n\tfor (int i = 0; i ^ n; ++i) {\n\t\tif (cl - x > R[i] || cr + x < L[i])\n\t\t\treturn 0;\n\t\tcl = max(cl - x, L[i]);\n\t\tcr = min(cr + x, R[i]);\n\t}\n\treturn 1;\n}\nint main() {\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0), cout.tie(0);\n\tint t;\n\tcin >> t;\n\tfor (; t--;) {\n\t\tcin >> n;\n\t\tfor (int i = 0; i ^ n; ++i)\n\t\t\tcin >> L[i] >> R[i];\n\t\tint l = 0, r = 1000000000, mid;\n\t\tfor (; l < r;) {\n\t\t\tmid = l + r >> 1;\n\t\t\tif (check(mid))\n\t\t\t\tr = mid;\n\t\t\telse\n\t\t\t\tl = mid + 1;\n\t\t}\n\t\tcout << l << '\\n';\n\t}\n}"], "input": "", "output": "", "tags": ["binary search", "constructive algorithms"], "dificulty": "1400", "interactive": false}