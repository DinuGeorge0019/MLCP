{
    "link": "https://codeforces.com//contest/1840/problem/F",
    "problemId": "1953891",
    "problem_idx": "F",
    "shortId": "1840F",
    "contest_number": "1840",
    "problem_submissions": {
        "F": [
            208833790,
            208800411,
            208738760,
            209755935,
            209049385,
            208856014,
            209001807,
            208972286,
            208793724,
            208849975,
            208903598,
            208797579
        ],
        "G1": [
            208785771,
            208798432,
            208798357,
            208759195,
            208773439,
            208768889,
            208784002,
            208782335,
            208787497,
            208757942,
            208778755,
            208795357,
            208767231,
            208800566,
            208774728,
            208784989
        ],
        "E": [
            208753398,
            208785836,
            208748100,
            208765491,
            208750014,
            208755889,
            208765809,
            208754982,
            208762975,
            208781811,
            208772087,
            208761782,
            208769368,
            208753067,
            208766710,
            208788699,
            208769932,
            208783505
        ],
        "D": [
            208744126,
            208768462,
            208780675,
            208742981,
            208738438,
            208740573,
            208744384,
            208743731,
            208753081,
            208742587,
            208741121,
            208744633,
            208752378,
            208785200,
            208747160,
            208737487,
            208749117,
            208750811
        ],
        "C": [
            208735712,
            208748530,
            208760247,
            208732224,
            208732082,
            208735505,
            208732760,
            208736708,
            208736616,
            208732221,
            208734089,
            208735409,
            208731496,
            208735170,
            208735073,
            208732504,
            208740037,
            208734211
        ],
        "B": [
            208731964,
            208736585,
            208755855,
            208723242,
            208728019,
            208731061,
            208728033,
            208728670,
            208729598,
            208727581,
            208727427,
            208728541,
            208726241,
            208724120,
            208726831,
            208725953,
            208755806,
            208732737,
            208735050
        ],
        "A": [
            208722150,
            208725086,
            208751995,
            208724436,
            208720280,
            208721134,
            208721012,
            208722594,
            208721192,
            208720913,
            208720713,
            208722663,
            208720260,
            208738330,
            208720865,
            208721050,
            208723621,
            208721860
        ],
        "G2": [
            208799121,
            208804613,
            209755710,
            211933185,
            208984229,
            208984015,
            208982917,
            208981704,
            208903638
        ]
    },
    "name": "F. Railguns",
    "statement": "Tema is playing a very interesting computer game.During the next\r\nmission, Tema’s character found himself on an unfamiliar planet. Unlike\r\nEarth, this planet is flat and can be represented as an n\r\ntimes m rectangle.Tema’s character is located at the point with\r\ncoordinates (0, 0). In order to successfully complete the mission, he\r\nneeds to reach the point with coordinates (n, m) alive.Let the character\r\nof the computer game be located at the coordinate (i, j). Every second,\r\n, Tema can: either use vertical hyperjump technology, after which his\r\ncharacter will end up at coordinate (i + 1, j) at the end of the second;\r\nor use horizontal hyperjump technology, after which his character will\r\nend up at coordinate (i, j + 1) at the end of the second; or Tema can\r\nchoose not to make a hyperjump, in which case his character will not\r\nmove during this second; The aliens that inhabit this planet are very\r\ndangerous and hostile. Therefore, they will shoot from their railguns r\r\ntimes.Each shot completely penetrates one coordinate vertically or\r\nhorizontally. If the character is in the line of its impact at the time\r\nof the shot , he dies.Since Tema looked at the game’s source code, he\r\nknows complete information about each shot the time, the penetrated\r\ncoordinate, and the direction of the shot.What is the time for the\r\ncharacter to reach the desired point? If he is doomed to die and cannot\r\nreach the point with coordinates (n, m), output -1.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    int t;\n    cin >> t;\n    while(t--){\n        int n,m;\n        cin >> n >> m;\n        n += 1;\n        m += 1;\n        int r;\n        cin >> r;\n        bool l[n][m];\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                l[i][j] = 0;\n            }\n        }\n        l[0][0] = 1;\n        int query[r][3];\n        for(int i=0;i<r;i++){\n            cin >> query[i][0] >> query[i][1] >> query[i][2];\n        }\n        int i=1;\n        for(i=1;i<n+m+r+4;i++){\n            for(int z=n-1;z>=0;z--){\n                for(int k=m-1;k>=0;k--){\n                    if(l[z][k]==1){\n                        if(z+1<n){\n                            l[z+1][k] = 1;\n                        }\n                        if(k+1<m){\n                            l[z][k+1] = 1;\n                        }\n                    }\n                }\n            }\n            for(int j=0;j<r;j++){\n                if(query[j][0]==i){\n                    int d = query[j][1];\n                    int c = query[j][2];\n                    if(d==2){\n                        for(int z=0;z<n;z++){\n                            l[z][c] = 0;\n                        }\n                    }\n                    else{\n                        for(int z=0;z<m;z++){\n                            l[c][z] = 0;\n                        }\n                    }\n                }\n            }\n            if(l[n-1][m-1]){\n                break;\n            }\n        }\n        if(i==n+m+r+4){\n            cout << -1 << \"\\n\";\n        }\n        else{\n            cout << i << \"\\n\";\n        }\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dfs and similar",
        "dp",
        "graphs"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Railguns.json",
    "editorial_link": "https://codeforces.com//blog/entry/117060",
    "editorial": "Letâs first solve it in .This can be done using dynamic programming. if\r\nthe character can be at coordinates at time , otherwise . Such dynamics\r\ncan be easily recalculated: . If the cell is shot by one of the railguns\r\nat time , then .Now letâs notice that if the character can reach the\r\nfinal point , then he will have to stand still no more than times. To\r\nprove this, we can prove another statement: if the character can reach\r\nthe final point along some trajectory, then for any such trajectory the\r\ncharacter can stand still no more than times. And this statement can\r\nalready be proven by mathematical induction.Thus, instead of the\r\ndynamics, we can calculate the dynamics, where the third parameter is\r\nthe number of times the character stood still. The transitions here are\r\nmade similarly.\r\n",
    "hint": []
}