{
    "link": "https://codeforces.com//contest/1931/problem/F",
    "problemId": "2475294",
    "problem_idx": "F",
    "shortId": "1931F",
    "contest_number": "1931",
    "problem_submissions": {
        "F": [
            246296614,
            246179146,
            246170709,
            246427101,
            246168970,
            246184751,
            246142511,
            246197019,
            246158218,
            246183570,
            246192932,
            246194240,
            246199021,
            246174982,
            246201540,
            246206249,
            246216038,
            246222369,
            246240052,
            246211567,
            246197899,
            246223747
        ],
        "G": [
            246224407,
            246211674,
            246427115,
            246216950,
            246178382,
            246228243,
            246242246,
            246253076,
            246240374,
            246248007,
            246244943,
            246744089,
            246744073,
            246239134,
            246236944,
            246245770,
            246244778,
            246254011,
            246234171,
            246248699,
            246240032,
            246253831
        ],
        "E": [
            246145017,
            246150097,
            246427087,
            246155582,
            246195821,
            246176212,
            246149318,
            246169708,
            246178779,
            246172407,
            246188216,
            246161369,
            246185423,
            246181694,
            246183495,
            246193379,
            246171079,
            246199408,
            246183302,
            246209824
        ],
        "D": [
            246131952,
            246140825,
            246427074,
            246138649,
            246151523,
            246177165,
            246158520,
            246213160,
            246149697,
            246155814,
            246156229,
            246153154,
            246212032,
            246171283,
            246159489,
            246157679,
            246169805,
            246152904,
            246183153,
            246222515,
            246168860
        ],
        "C": [
            246118618,
            246131841,
            246427065,
            246129262,
            246123759,
            246146869,
            246133651,
            246123342,
            246138388,
            246137410,
            246146418,
            246146559,
            246141259,
            246136926,
            246145784,
            246141739,
            246129334,
            246133557,
            246144848,
            246141577,
            246142975
        ],
        "B": [
            246116325,
            246124823,
            246427047,
            246120211,
            246135267,
            246122553,
            246118446,
            246120092,
            246126650,
            246128147,
            246123393,
            246121355,
            246123132,
            246132595,
            246128338,
            246121578,
            246122252,
            246127915,
            246132875,
            246130521
        ],
        "A": [
            246114920,
            246119306,
            246427041,
            246116261,
            246126876,
            246117989,
            246115257,
            246116831,
            246118165,
            246120823,
            246116864,
            246121057,
            246117063,
            246121282,
            246122222,
            246117088,
            246116504,
            246117727,
            246121061,
            246119450
        ]
    },
    "name": "F. Chat Screenshots",
    "statement": "There are n people in the programming contest chat. Chat participants\r\nare ordered by activity, but each person sees himself at the top of the\r\nlist.For example, there are 4 participants in the chat, and their order\r\nis [2, 3, 1, 4]. Then 1-st user sees the order [1, 2, 3, 4]. 2-nd user\r\nsees the order [2, 3, 1, 4]. 3-rd user sees the order [3, 2, 1, 4]. 4-th\r\nuser sees the order [4, 2, 3, 1]. k people posted screenshots in the\r\nchat, which show the order of participants shown to this user. The\r\nscreenshots were taken within a short period of time, and the order of\r\nparticipants has not changed. Your task is to determine whether there is\r\na certain order that all screenshots correspond to.\r\n",
    "solutions": [
        "// Problem: F. Chat Screenshots\n// Contest: Codeforces - Codeforces Round 925 (Div. 3)\n// URL: https://codeforces.com/contest/1931/problem/F\n// Memory Limit: 256 MB\n// Time Limit: 2000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\n#define all(s) s.begin(), s.end()\nusing namespace std;\nusing ll = long long;\nusing ull = unsigned long long;\n\nconst int _N = 1e5 + 5;\n\nint T;\n\nvoid solve() {\n\tint n, k; cin >> n >> k;\n\tvector<vector<int>> a(k + 1, vector<int>(n + 1));\n\tfor (int i = 1; i <= k; i++) {\n\t\tfor (int j = 1; j <= n; j++) cin >> a[i][j];\n\t}\n\tvector<vector<int>> ch(n + 1, vector<int>(2));\n\tvector<int> deg(n + 1);\n\tfor (int i = 1; i <= k; i++) {\n\t\tfor (int l = 2; l < n; l++) {\n\t\t\tif (ch[a[i][l]][0]) {\n\t\t\t\tif (ch[a[i][l]][0] != a[i][l + 1]) {\n\t\t\t\t\tif (ch[a[i][l]][1] != 0) {\n\t\t\t\t\t\tif (ch[a[i][l]][1] != a[i][l + 1]) {\n\t\t\t\t\t\t\tcout << \"NO\" << '\\n';\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else ch[a[i][l]][1] = a[i][l + 1], deg[a[i][l + 1]]++;\n\t\t\t\t}\n\t\t\t} else ch[a[i][l]][0] = a[i][l + 1], deg[a[i][l + 1]]++;\n\t\t}\n\t}\n\tqueue<int> q;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!deg[i]) q.push(i);\n\t}\n\tint cnt = n;\n\twhile (!q.empty()) {\n\t\tint u = q.front(); q.pop();\n\t\tcnt--;\n\t\tfor (int i = 0; i <= 1; i++) {\n\t\t\tif (ch[u][i]) {\n\t\t\t\tdeg[ch[u][i]]--;\n\t\t\t\tif (deg[ch[u][i]] == 0) q.push(ch[u][i]);\n\t\t\t}\n\t\t}\n\t}\n\tcout << (cnt ? \"NO\" : \"YES\") << '\\n';\n\treturn;\n}\n\nint main() {\n\tios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n\tcin >> T;\n\twhile (T--) {\n\t\tsolve();\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dfs and similar",
        "graphs"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Chat Screenshots.json",
    "editorial_link": "https://codeforces.com//blog/entry/125878",
    "editorial": "The author of the screenshot is always in the first position, so based\r\non his screenshot, nothing can be said about his first position. The\r\nrest of the chat participants are ordered based on the real order. Letâs\r\nbuild a graph of vertices. For each screenshot, add edges. For all , add\r\nan edge between the vertices and , where is the number of the current\r\nscreenshot.If there is an order that satisfies all screenshots, then\r\ntopological sorting will exist in this graph, which means there will be\r\nno cycles in it. So our goal is to check the graph for acyclicity.\r\n",
    "hint": []
}