{
    "link": "https://codeforces.com//contest/1619/problem/E",
    "problemId": "1234626",
    "problem_idx": "E",
    "shortId": "1619E",
    "contest_number": "1619",
    "problem_submissions": {
        "G": [
            140078255,
            140073592,
            140089436,
            140078390,
            140089746,
            140079476,
            145924145,
            151265654,
            141670945,
            140147260
        ],
        "F": [
            140065181,
            140063048,
            140076024,
            140070362,
            140081694,
            140073270,
            140077189,
            140077988,
            140079343,
            140077681,
            140080239,
            140066442,
            140086181,
            140083843,
            140081135,
            140087882,
            140074406,
            140085836
        ],
        "E": [
            140056688,
            140034731,
            140064173,
            140064735,
            140063371,
            140067175,
            140068525,
            140064758,
            140060381,
            140065082,
            140053212,
            140051892,
            140072728,
            140067484,
            140070209,
            140073990,
            140083979,
            140064170
        ],
        "D": [
            140049695,
            140056611,
            140052445,
            140059443,
            140054727,
            140062375,
            140050362,
            140046453,
            140049546,
            140054923,
            140069697,
            140074223,
            140057739,
            140070163,
            140060824,
            140054342,
            140053714,
            140047137
        ],
        "C": [
            140041270,
            140047619,
            140037577,
            140053359,
            140066154,
            140055677,
            140034474,
            140041067,
            140041491,
            140044199,
            140042854,
            140041981,
            140038481,
            140037319,
            140043801,
            140042895,
            140046624,
            140037654
        ],
        "B": [
            140028867,
            140058223,
            140027097,
            140049372,
            140023898,
            140046113,
            140024005,
            140028515,
            140025918,
            140030098,
            140028524,
            140024247,
            140024021,
            140025866,
            140024580,
            140024963,
            140030726,
            140023456
        ],
        "A": [
            140018513,
            140037253,
            140018425,
            140048050,
            140017040,
            140043315,
            140017477,
            140024037,
            140017841,
            140019535,
            140020013,
            143793925,
            140020824,
            140018421,
            140017149,
            140018606,
            140017171,
            140021392,
            140017164
        ],
        "H": [
            140381628,
            140278376
        ]
    },
    "name": "E. MEX and Increments",
    "statement": "Dmitry has an array of n non-negative integers a_1, a_2,\r\ndots, a_n.In one operation, Dmitry can choose any index j (1\r\nle j\r\nle n) and increase the value of the element a_j by 1. He can choose the\r\nsame index j multiple times.For each i from 0 to n, determine whether\r\nDmitry can make the\r\nmathrm{MEX} of the array equal to exactly i. If it is possible, then\r\ndetermine the minimum number of operations to do it.The\r\nmathrm{MEX} of the array is equal to the minimum non-negative integer\r\nthat is not in the array. For example, the\r\nmathrm{MEX} of the array [3, 1, 0] is equal to 2, and the array [3, 3,\r\n1, 4] is equal to 0.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nifstream fin(\"AAtest.in.txt\");\nll t,n,a[200005],l,palju,k,eel;\nvector<ll> v;\n\nint main(){\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); cerr.tie(0);\n    cin>>t;\n    while(t--){\n        cin>>n;\n        v.resize(0);\n        for(int i=0; i<n; i++) cin>>a[i];\n        sort(a,a+n);\n        l=0; k=0; palju=0;\n        eel=0;\n        for(int i=0; i<=n; i++){\n            if(eel!=-1) if(i!=0){\n                if(v.size()) eel+=i-1-v[v.size()-1],v.pop_back();\n                else eel=-1;\n            }\n            else eel=0;\n            while(k<n && a[k]==i) palju++,k++,v.push_back(i);\n            if(eel==-1) cout<<eel<<\" \";\n            else cout<<eel+palju<<\" \";\n            palju=0;\n        }\n        cout<<\"\\n\";\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "dp",
        "greedy",
        "implementation",
        "math",
        "sortings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. MEX and Increments.json",
    "editorial_link": "https://codeforces.com//blog/entry/98159",
    "editorial": "First, let\u00e2\u0080\u0099s sort the array. Then we will consider its elements in\r\nnon-decreasing order. To make MEX equal to , you need to increase all\r\nzeros. To make MEX at least , you first need to make MEX at least , and\r\nthen, if the number is missing in the array, you need to get it. If\r\nthere are no extra values less than , then this and all subsequent MEX\r\nvalues cannot be obtained. Otherwise, you can use the maximum of the\r\nextra array values. To do this, you can use a data structure such as a\r\nstack. If an element occurs more than once in the array, put its extra\r\noccurrences on the stack.\r\n"
}