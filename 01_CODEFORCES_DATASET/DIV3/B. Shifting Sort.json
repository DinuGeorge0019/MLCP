{
    "link": "https://codeforces.com//contest/1579/problem/B",
    "problemId": "1123867",
    "problem_idx": "B",
    "shortId": "1579B",
    "contest_number": "1579",
    "problem_submissions": {
        "G": [
            130137274,
            130120638,
            130155046,
            130156225,
            130163836,
            130179545,
            130168337,
            130158927,
            130165156,
            130198303,
            130191623,
            130244137,
            130192656
        ],
        "E2": [
            130129123,
            130137578,
            130134268,
            130135000,
            130132286,
            130127123,
            130146290,
            130145108,
            130149289,
            130140257,
            130139480,
            130140744,
            130135527,
            130143398,
            130123582,
            130147751,
            130139094,
            130145725,
            130136545,
            130146933
        ],
        "F": [
            130125518,
            130115413,
            130143625,
            130141220,
            130143971,
            130167063,
            130157787,
            130168199,
            130155796,
            130152120,
            130146742,
            130149015,
            130150286,
            130148427,
            130153717,
            130166412,
            130156991,
            130153655,
            130149578,
            130134036
        ],
        "E1": [
            130117970,
            130121669,
            130119905,
            130127812,
            130120295,
            130128369,
            130136696,
            130129561,
            130139968,
            130118319,
            130116344,
            130126763,
            130130246,
            130132247,
            130119799,
            130120223,
            130117670,
            130134770,
            130118389,
            130133123
        ],
        "D": [
            130114825,
            130131006,
            130115575,
            130122918,
            130116396,
            130116584,
            130127769,
            130136071,
            130142472,
            130116682,
            130121234,
            130122150,
            130126027,
            130120420,
            130116268,
            130113854,
            130122134,
            130132072,
            130125736,
            130128217
        ],
        "C": [
            130111875,
            130134780,
            130127605,
            130118045,
            130126486,
            130136003,
            130133755,
            130153746,
            130136597,
            130126873,
            130133654,
            130133053,
            130123204,
            130126284,
            130128738,
            130132948,
            130148452,
            130128270,
            130158049,
            130155693
        ],
        "B": [
            130106161,
            130116908,
            130108929,
            130112526,
            130111768,
            130114142,
            130116092,
            130125486,
            130125850,
            130111350,
            130113414,
            130109874,
            130116163,
            130111654,
            130112328,
            130107695,
            130114784,
            130116681,
            130114568,
            130117978
        ],
        "A": [
            130098440,
            130100824,
            130100944,
            130103654,
            130098460,
            130102451,
            130102139,
            130101021,
            130117992,
            130105259,
            130098578,
            130098425,
            130098461,
            130105623,
            130098680,
            130098458,
            130101628,
            130099346,
            130098971,
            130099307
        ]
    },
    "name": "B. Shifting Sort",
    "statement": "The new generation external memory contains an array of integers a[1\r\nldots n] = [a_1, a_2,\r\nldots, a_n].This type of memory does not support changing the value of\r\nan arbitrary element. Instead, it allows you to cut out any segment of\r\nthe given array, (rotate) it by any offset and insert it back into the\r\nsame place.Technically, each cyclic shift consists of two consecutive\r\nactions: You may select arbitrary indices l and r (1\r\nle l < r\r\nle n) as the boundaries of the segment. Then you replace the segment a[l\r\nldots r] with it’s to the by an arbitrary offset d. The concept of a can\r\nbe also explained by following relations: the sequence [1, 4, 1, 3] is a\r\ncyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1\r\nand the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1,\r\n4, 1] to the left by the offset 2. For example, if a = [1,\r\ncolor{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a\r\nsegment a[2\r\nldots 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2\r\nto the , and you get a segment [8, 3, 2] which then takes the place of\r\nof the original elements of the segment. In the end you get a = [1,\r\ncolor{blue}{8, 3, 2}, 5].Sort the given array a using no more than n\r\ncyclic shifts of any of its segments. Note that you don’t need to\r\nminimize the number of cyclic shifts. Any method that requires n or less\r\ncyclic shifts will be accepted.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define x first\n#define y second\n#define pb push_back\n#define mp make_pair\n#define all(v) v.begin(),v.end()\n#pragma gcc optimize(\"O3\")\n#pragma gcc optimize(\"Ofast\")\n#pragma gcc optimize(\"unroll-loops\")\nusing namespace std;\nconst int INF = 1e9;\nconst int TMX = 1 << 18;\nconst long long llINF = 2e18+5;\nconst long long mod = 1e9+7;\nconst long long hashmod = 100003;\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int,int> pi;\ntypedef pair <ll,ll> pl;\ntypedef vector <int> vec;\ntypedef vector <pi> vecpi;\ntypedef long long ll;\ntypedef unsigned long long ull;\nint a[55];\nint n;\n\nint main() {\n    ios_base::sync_with_stdio(false); cin.tie(0);\n    int T; cin >> T;\n    while(T--) {\n        cin >> n;\n        for(int i = 1;i <= n;i++) cin >> a[i];\n        vector <pi> ans;\n        for(int i = 1;i <= n;i++) {\n            int idx = i;\n            for(int j = i+1;j <= n;j++) {\n                if(a[j] < a[idx]) idx = j;\n            }\n            if(idx == i) continue;\n            ans.pb({i,idx});\n            for(int j = idx-1;j >= i;j--) a[j+1] = a[j];\n        }\n        cout << ans.size() << '\\n';\n        for(auto i : ans) {\n            cout << i.x << ' ' << i.y << ' ' << i.y-i.x << '\\n';\n        }\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "sortings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Shifting Sort.json",
    "editorial_link": "https://codeforces.com//blog/entry/95447",
    "editorial": "In this problem, it was enough to implement an analogue of standard or .\r\nHere is an example of a solution based on selection sort.Letâs find the\r\nminimum element in the array by simply iterating over it. Letâs denote\r\nits index in the array by . If we apply a shift \"\" to it, the following\r\nhappens: Once again, please note that all shifts are made in the left\r\ndirection, so shifting by to the left will put the element that was\r\npreviously at index in the first place.Let us perform a similar shift\r\nfor the second-largest element of the array, putting it in second place,\r\nfor the third-largest element of the array, putting it in third place,\r\nand so on. More formally, letâs describe the -th iteration as follows:\r\nAt the beginning of the -th iteration, the first elements of the array\r\nare its minimal elements, already in their correct places in sorted\r\norder. During the -th iteration, the -th largest element of the array is\r\nplaced in the -th place in the array. Since the first minimal elements\r\nare already in their places, the -th largest element of the array is\r\nsimply the smallest element among . Letâs find it by iterating over\r\nthese elements and denote its index in the array by . Make a shift \"\".\r\nThe first elements will not change, and the element from the -th place\r\nin the array will move to the -th: It is worth noting that the output\r\nformat forbids shifting segments with . Regarding this case, we should\r\ncheck the equality separately. If these two indexes coincide, then the\r\n-th element is already in its place, and no shift should be done on this\r\niteration. Let us repeat this algorithm for , , ..., . At each\r\niteration, the new element will be shifted into its place in sorted\r\norder, and each iteration performs no more than one shift operation.\r\nThus, in strictly less than shifts, the array will be completely\r\nsorted.The time complexity is .\r\n",
    "hint": []
}