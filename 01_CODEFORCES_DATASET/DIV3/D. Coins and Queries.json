{
    "link": "https://codeforces.com//contest/1003/problem/D",
    "problemId": "194984",
    "problem_idx": "D",
    "shortId": "1003D",
    "contest_number": "1003",
    "problem_submissions": {
        "E": [
            39924193,
            39917808,
            39923474,
            39917540,
            39932885,
            39926804,
            39919143,
            39925938,
            39924942,
            39926556,
            39916485,
            39925183,
            39923509,
            39920705,
            39924767,
            39925403,
            39927398,
            39926899
        ],
        "F": [
            39919506,
            39935298,
            39943902,
            40106973,
            40297506,
            39953456,
            39925614,
            39922839
        ],
        "C": [
            39912024,
            39905824,
            39904178,
            39906213,
            39904627,
            42751959,
            39907680,
            39905143,
            39911684,
            39902878,
            39905375,
            39904334,
            39906247,
            39910129,
            39910619,
            39907113,
            39906670,
            39906706,
            39905022,
            39908497
        ],
        "B": [
            39905186,
            39902197,
            39901483,
            39902052,
            39901889,
            39904203,
            39903228,
            39903078,
            39906991,
            39902754,
            39902358,
            39904660,
            39907858,
            39906542,
            39904875,
            39903839,
            39904869,
            39907658,
            39906314
        ],
        "D": [
            39904096,
            39911298,
            39910719,
            39910712,
            39908080,
            42751939,
            39912030,
            39914322,
            39908951,
            39910733,
            39921416,
            39908636,
            39908754,
            39914171,
            39914980,
            39914769,
            39914559,
            39912864,
            39917039,
            39913107
        ],
        "A": [
            39900356,
            39897220,
            39898269,
            39897962,
            39896936,
            39904258,
            39898551,
            39897613,
            39900244,
            39896869,
            39897844,
            39899297,
            39896960,
            39897545,
            39899825,
            39897411,
            39897414,
            39897064,
            39897008
        ]
    },
    "name": "D. Coins and Queries",
    "statement": "Polycarp has n coins, the value of the i-th coin is a_i. It is\r\nguaranteed that all the values are integer powers of 2 (i.e. a_i = 2^d\r\nfor some integer number d).Polycarp wants to know answers on q queries.\r\nThe j-th query is described as integer number b_j. The answer to the\r\nquery is the minimum number of coins that is necessary to obtain the\r\nvalue b_j using some subset of coins (Polycarp can use only coins he\r\nhas). If Polycarp can\u2019t obtain the value b_j, the answer to the j-th\r\nquery is .The queries are independent (the answer on the query doesn\u2019t\r\naffect Polycarp\u2019s coins).\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\n#define MAXN 100009\n#define INF 1000000007\n#define mp(x,y) make_pair(x,y)\n#define all(v) v.begin(),v.end()\n#define pb(x) push_back(x)\n#define wr cout<<\"----------------\"<<endl;\n#define ppb() pop_back()\n#define tr(ii,c) for(__typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)\n#define ff first\n#define ss second\n#define my_little_dodge 46\n#define debug(x)  cerr<< #x <<\" = \"<< x<<endl;\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> PII;\ntemplate<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}\ntemplate<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}\nint cnt[33];\nint main(){\n    //~ freopen(\"file.in\", \"r\", stdin);\n    int n,q;\n    scanf(\"%d%d\",&n,&q);\n    while(n--){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tcnt[int(log2(x))]++;\n\t}\n\twhile(q--){\n\t\tint x,ans=0;\n\t\tscanf(\"%d\",&x);\n\t\tfor(int i=30;i>=0;i--){\n\t\t\tint need=min(cnt[i],x/(1<<i));\n\t\t\tx-=need*(1<<i);\n\t\t\tans+=need;\n\t\t}\n\t\tif(x)\n\t\t\tans=-1;\n\t\tprintf(\"%d\\n\",ans);\t\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Coins and Queries.json",
    "editorial_link": "https://codeforces.com/blog/entry/60417",
    "editorial": "We can solve the problem by the following way: firstly, for each power\r\nof let\u00e2\u0080\u0099s calculate the number of coins with the value equals this\r\ndegree. Let\u00e2\u0080\u0099s call it .It is obvious that we can obtain the value\r\ngreedily (because all less values of coins are divisors of all greater\r\nvalues of coins).Now let\u00e2\u0080\u0099s iterate over all powers of from to . Let\u00e2\u0080\u0099s be\r\nthe current degree. We can take coins with the value equals . Let it be\r\n. Add to the answer and subtract from .If after iterating over all\r\npowers still be non-zero, print . Otherwise print the answer.Overall\r\ncomplexity: .\r\n"
}