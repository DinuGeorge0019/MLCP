{"link": "https://codeforces.com//contest/1619/problem/F", "problemId": "1234627", "problem_idx": "F", "shortId": "1619F", "contest_number": "1619", "problem_submissions": {"G": [140078255, 140073592, 140089436, 140078390, 140089746, 140079476, 145924145, 151265654, 141670945, 140147260], "F": [140065181, 140063048, 140076024, 140070362, 140081694, 140073270, 140077189, 140077988, 140079343, 140077681, 140080239, 140066442, 140086181, 140083843, 140081135, 140087882, 140074406, 140085836], "E": [140056688, 140034731, 140064173, 140064735, 140063371, 140067175, 140068525, 140064758, 140060381, 140065082, 140053212, 140051892, 140072728, 140067484, 140070209, 140073990, 140083979, 140064170], "D": [140049695, 140056611, 140052445, 140059443, 140054727, 140062375, 140050362, 140046453, 140049546, 140054923, 140069697, 140074223, 140057739, 140070163, 140060824, 140054342, 140053714, 140047137], "C": [140041270, 140047619, 140037577, 140053359, 140066154, 140055677, 140034474, 140041067, 140041491, 140044199, 140042854, 140041981, 140038481, 140037319, 140043801, 140042895, 140046624, 140037654], "B": [140028867, 140058223, 140027097, 140049372, 140023898, 140046113, 140024005, 140028515, 140025918, 140030098, 140028524, 140024247, 140024021, 140025866, 140024580, 140024963, 140030726, 140023456], "A": [140018513, 140037253, 140018425, 140048050, 140017040, 140043315, 140017477, 140024037, 140017841, 140019535, 140020013, 143793925, 140020824, 140018421, 140017149, 140018606, 140017171, 140021392, 140017164], "H": [140381628, 140278376]}, "name": "F. Let's Play the Hat ", "statement": "n people gathered in a room with m tables (n\r\nge 2m). They want to play the Hat k times. Thus, k games will be played\r\nat each table. Each player will play in k games.To do this, they are\r\ndistributed among the tables for each game. During each game, one player\r\nplays at exactly one table. A player can play at different\r\ntables.Players want to have the most \"fair\" schedule of games. For this\r\nreason, they are looking for a schedule (table distribution for each\r\ngame) such that: At any table in each game there are either\r\nlfloor\r\nfrac{n}{m}\r\nrfloor people or\r\nlceil\r\nfrac{n}{m}\r\nrceil people (that is, either n/m rounded down, or n/m rounded up).\r\nDifferent numbers of people can play different games at the same table.\r\nLet\u2019s calculate for each player the value b_i the number of times the\r\ni-th player played at a table with\r\nlceil\r\nfrac{n}{m}\r\nrceil persons (n/m rounded up). Any two values of b_imust differ by no\r\nmore than 1. In other words, for any two players i and j, it must be\r\ntrue |b_i - b_j|\r\nle 1. For example, if n=5, m=2 and k=2, then at the request of the first\r\nitem either two players or three players should play at each table.\r\nConsider the following schedules: First game: 1, 2, 3 are played at the\r\nfirst table, and 4, 5 at the second one. The second game: at the first\r\ntable they play 5, 1, and at the second 2, 3, 4. This schedule is since\r\nb_2=2 (the second player played twice at a big table) and b_5=0 (the\r\nfifth player did not play at a big table). First game: 1, 2, 3 are\r\nplayed at the first table, and 4, 5 at the second one. The second game:\r\nat the first table they play 4, 5, 2, and at the second one 1, 3. This\r\nschedule is : b=[1,2,1,1,1] (any two values of b_i differ by no more\r\nthan 1). Find any \"fair\" game schedule for n people if they play on the\r\nm tables of k games.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nifstream fin(\"AAtest.in.txt\");\nll t,n,m,k,pik,arv,su,ms,va,mv,x,l;\n\nint main(){\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); cerr.tie(0);\n    cin>>t;\n    while(t--){\n        cin>>n>>m>>k;\n        va=n/m; su=(n+m-1)/m;\n        if(va==su) mv=m;\n        else ms=n-m*va,mv=m-ms;\n        arv=min(ms*su,mv*va);\n        x=0;\n        for(int i=0; i<k; i++){\n            l=x;\n            l%=n;\n            for(int j=0; j<m; j++) if(j<ms){\n                cout<<su<<\" \";\n                for(int u=0; u<su; u++){\n                    cout<<l+1<<\" \";\n                    l++;\n                    l%=n;\n                }\n                cout<<\"\\n\";\n            }\n            else{\n                cout<<va<<\" \";\n                for(int u=0; u<va; u++){\n                    cout<<l+1<<\" \";\n                    l++;\n                    l%=n;\n                }\n                cout<<\"\\n\";\n            }\n            x+=arv;\n        }\n    }\n}\n"], "input": "", "output": "", "tags": ["brute force", "constructive algorithms", "greedy", "math"], "dificulty": "2000", "interactive": false}