{
    "link": "https://codeforces.com//contest/1506/problem/D",
    "problemId": "935562",
    "problem_idx": "D",
    "shortId": "1506D",
    "contest_number": "1506",
    "problem_submissions": {
        "F": [
            111021020,
            111023335,
            111043050,
            111045078,
            111042675,
            111022888,
            111045702,
            111030029,
            111059327,
            111056314,
            111054328,
            111053665,
            111049676,
            111057223,
            111055499,
            111051574,
            111018539
        ],
        "G": [
            111011051,
            111044191,
            111025676,
            111021333,
            111015838,
            111047466,
            111027389,
            111038444,
            111062619,
            111035705,
            111033084,
            111031458,
            111027898,
            111059943,
            111039951,
            111044272,
            111042579,
            110997057,
            111024212,
            111035025
        ],
        "E": [
            110998219,
            111002639,
            111005993,
            111004597,
            111005673,
            111003655,
            111009629,
            110993653,
            111011522,
            111018659,
            111024774,
            111017525,
            111015924,
            111022569,
            111022716,
            111033942,
            111001920,
            111012071,
            111010852
        ],
        "D": [
            110994014,
            110997858,
            111000907,
            110997329,
            111020775,
            111109278,
            110995630,
            111003898,
            110987445,
            111005061,
            111007314,
            111017748,
            111012182,
            111006395,
            111026211,
            111014600,
            111017473,
            111014918,
            111042008,
            110987093,
            111004976
        ],
        "C": [
            110991700,
            110993760,
            110994821,
            110991557,
            110994969,
            110992631,
            110998527,
            110995536,
            111000015,
            111001144,
            111003685,
            111008122,
            111006904,
            111001766,
            110999236,
            111006625,
            111008840,
            111033710,
            110991249,
            110998250
        ],
        "B": [
            110987614,
            110990504,
            110992033,
            110988684,
            110991376,
            110988565,
            110994317,
            111002159,
            110989417,
            110997996,
            110993594,
            111002185,
            110994767,
            111009342,
            111001911,
            111024800,
            111045128,
            110999737,
            110993374
        ],
        "A": [
            110986181,
            110985860,
            110985761,
            110986354,
            110986698,
            110986290,
            110988038,
            110996610,
            110986006,
            110986393,
            110986025,
            110986629,
            110986586,
            110988619,
            110989257,
            110990207,
            111021247,
            111003988,
            110987775
        ]
    },
    "name": "D. Epic Transformation",
    "statement": "You are given an array a of length n consisting of integers. You can\r\napply the following operation, consisting of several steps, on the array\r\na or more times: you select two numbers in the array a_i and a_j; you\r\nremove i-th and j-th elements from the array. For example, if n=6 and\r\na=[1, 6, 1, 1, 4, 4], then you can perform the following sequence of\r\noperations: select i=1, j=5. The array a becomes equal to [6, 1, 1, 4];\r\nselect i=1, j=2. The array a becomes equal to [1, 4]. What can be the\r\nminimum size of the array after applying some sequence of operations to\r\nit?\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <cstring>\n#include <algorithm>\n#include <map>\nusing namespace std;\nmap <int,int> mp;\nint main(int argc, char** argv) {\n\tint T;\n\tcin >> T;\n\twhile(T--)\n\t{\n\t\tint n,mx=0;\n\t\tscanf(\"%d\",&n);\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tmx=max(mx,++mp[x]);\n\t\t}\n\t\tprintf(\"%d\\n\",max(mx*2-n,n%2));\n\t\tmp.clear();\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Epic Transformation.json",
    "editorial_link": "https://codeforces.com//blog/entry/89007",
    "editorial": "Letâs replace each character with the number of its occurrences in the\r\nstring. Then each operation take two non-zero numbers and subtract one\r\nfrom them. In the end, we will have only one non-zero number left, and\r\nwe want to minimize it. We can say that we want to minimize the maximum\r\nnumber after applying all the operations, which means we want to\r\nminimize the maximum number at each step.We get the following greedy\r\nsolution each time we take two characters with maximal occurrences\r\nnumber and delete them.\r\n",
    "hint": []
}