{
    "link": "https://codeforces.com//contest/2000/problem/C",
    "problemId": "2814029",
    "problem_idx": "C",
    "shortId": "2000C",
    "contest_number": "2000",
    "problem_submissions": {
        "H": [
            276260761,
            276254307,
            276338511,
            276338125,
            276287387,
            276274340,
            276297740,
            276283267,
            276239793
        ],
        "G": [
            276214295,
            276274205,
            276334839,
            276268681,
            276267752,
            276333913,
            276264214,
            276282487,
            276272917,
            276276698,
            276277916,
            276283043,
            276274434,
            276291075,
            276278976,
            276290903,
            276279110,
            276279777
        ],
        "F": [
            276187296,
            276292316,
            276241660,
            276217578,
            276210913,
            276233999,
            276287795,
            276243858,
            276234274,
            276242694,
            276256602,
            276245569,
            276246137,
            276247924,
            276245207,
            276252538,
            276247124,
            276252754
        ],
        "E": [
            276164357,
            276333842,
            276186649,
            276185811,
            276179141,
            276203373,
            276182533,
            276188814,
            276185638,
            276210532,
            276225686,
            276198909,
            276209550,
            276178261,
            276202986,
            276227179,
            276202989,
            276229818,
            276227160
        ],
        "D": [
            276136722,
            276189642,
            276169653,
            276164982,
            276157636,
            276177807,
            276157222,
            276166197,
            276153213,
            276123696,
            276151555,
            276167672,
            276198896,
            276149967,
            276172892,
            276184459,
            276158053,
            276189336,
            276175071,
            276189558
        ],
        "C": [
            276127716,
            276172717,
            276135515,
            276132005,
            276139984,
            276155253,
            276134367,
            276142615,
            276142046,
            276180920,
            276133384,
            276141737,
            276151150,
            276139308,
            276147822,
            276167768,
            276145316,
            276158457,
            276159660,
            276137717
        ],
        "B": [
            276113898,
            276143388,
            276119169,
            276116606,
            276127808,
            276130717,
            276117856,
            276125745,
            276187672,
            276126451,
            276118391,
            276127646,
            276126167,
            276125801,
            276113780,
            276142176,
            276122501,
            276133620,
            276118200,
            276121342
        ],
        "A": [
            276110192,
            276136464,
            276111783,
            276110916,
            276119966,
            276120191,
            276111146,
            276116630,
            276117760,
            276111077,
            276112237,
            276116291,
            276115237,
            276115760,
            276110510,
            276123000,
            276110417,
            276117261,
            276112340,
            276130762
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132689",
    "editorial": "To solve the problem, we can use two dictionaries (map): match the\r\ncharacters of the string to the numbers of the array in the map and the\r\nnumbers of the array to the characters of the string in the map .First,\r\nwe check the length of the string to see if it is equal to the number .\r\nIf the string is longer or shorter, the answer is \"\".Otherwise, we will\r\nloop through the characters of the string and check the following\r\nconditions: The map does not contain the character as a key, and the map\r\ndoes not contain the number as a key. Then letâs perform the assignments\r\nand . One of the maps contains the current array element or string\r\ncharacter as a key, but its value does not match the character or number\r\nin the current position. Then the answer to the problem is \"\", you can\r\nbreak the loop. If the loop reaches the end of the line, the answer to\r\nthe problem is \"\".\r\n",
    "name": "C. Numeric String Template",
    "statement": "Kristina has an array a, called a , consisting of n integers. She also\r\nhas m strings, each consisting only of lowercase Latin letters. The\r\nstrings are numbered from 1 to m. She wants to check which strings match\r\nthe template.A string s is considered to match the template if all of\r\nthe following conditions are simultaneously satisfied: The length of the\r\nstring s is equal to the number of elements in the array a. The same\r\nnumbers from a correspond to the same symbols from s. So, if a_i = a_j,\r\nthen s_i = s_j for (1\r\nle i, j\r\nle n). The same symbols from s correspond to the same numbers from a.\r\nSo, if s_i = s_j, then a_i = a_j for (1\r\nle i, j\r\nle n). In other words, there must be a one-to-one correspondence between\r\nthe characters of the string and the elements of the array.For example,\r\nif a = [3, 5, 2, 1, 3], then the string \"\" matches the template, while\r\nthe string \"\" does not, since the character \"\" corresponds to both\r\nnumbers 1 and 5.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#include<array>using namespace std;#define ll long long#define int long long#define y1 idfsu#define PII pair<int, int>#define fi first#define se second#define endl \"\\n\"const int MAX = 1e9;const int MAXN = 1e6 + 10;const int mod = 1e9 + 7;const int N = 200010;int aa[200010];void solve(){    int n;    cin >> n;    for (int i = 1; i <= n; i++)        cin >> aa[i];    int m;    cin >> m;    while (m--)    {        string a;        cin >> a;        if (a.size() != n)            cout << \"NO\\n\";        else        {            map<char, int>o;            map<int, char>k;            int z = 1;            for (int i = 1; i <= n; i++)            {                if (!o.count(a[i - 1]))                    o[a[i - 1]] = aa[i];                else if (aa[i] != o[a[i - 1]])                {                    z = 0;                    break;                }                if (!k.count(aa[i]))                    k[aa[i]] = a[i - 1];                else if (a[i - 1] != k[aa[i]])                {                    z = 0;                    break;                }            }            if (z)                cout << \"YES\\n\";            else                cout << \"NO\\n\";        }    }}signed main(){    ios::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);    int T = 1;    cin >> T;    while (T--)        solve();    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "strings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Numeric String Template.json",
    "hint": []
}