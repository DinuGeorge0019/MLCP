{
    "link": "https://codeforces.com//contest/1862/problem/A",
    "problemId": "2177628",
    "problem_idx": "A",
    "shortId": "1862A",
    "contest_number": "1862",
    "problem_submissions": {
        "G": [
            220245102,
            220236543,
            220240013,
            220263299,
            220256468,
            220270554,
            220407258,
            220261631,
            220276606,
            220277103,
            220277190,
            220265753,
            220272660,
            220272436,
            220276900,
            220270769,
            220279446,
            220270577,
            231887590,
            231887524,
            220377896,
            220376221,
            220375779,
            220287433,
            220285498,
            220284820,
            220274652,
            220267069,
            220285570,
            220280519
        ],
        "F": [
            220215510,
            220216380,
            220236628,
            220232754,
            220218803,
            220240895,
            220413869,
            220185778,
            220211559,
            220227122,
            220238991,
            220245238,
            220240906,
            220232310,
            220229370,
            220239430,
            220225756,
            220376173,
            220375742,
            220254210,
            220257832,
            220278068,
            220235150,
            220248305
        ],
        "E": [
            220203349,
            220208394,
            220220906,
            220202478,
            220220225,
            220336313,
            220335362,
            220227807,
            220202526,
            220238570,
            220214495,
            220229819,
            220221341,
            220220787,
            220218825,
            220224809,
            220217905,
            220376137,
            220375723,
            220232333,
            220250361,
            220231462,
            220220168,
            220236903
        ],
        "D": [
            220195280,
            220198509,
            220201838,
            220231248,
            220200432,
            220241039,
            220234728,
            220202010,
            220203000,
            220194405,
            220199267,
            220204119,
            220204397,
            220206486,
            220195334,
            220376096,
            220375678,
            220208148,
            220202416,
            220211386,
            220246850,
            220227240
        ],
        "C": [
            220183784,
            220178645,
            220194540,
            220223628,
            220184508,
            220217723,
            220185864,
            220183520,
            220194697,
            220216625,
            220191457,
            220187641,
            220185690,
            220198120,
            220201973,
            220376069,
            220375636,
            220182400,
            220182197,
            220187829,
            220185247,
            220218838
        ],
        "B": [
            220167869,
            220167779,
            220178691,
            220167799,
            220173120,
            220182282,
            220173679,
            220176676,
            220171769,
            220166010,
            220172585,
            220173029,
            220174605,
            220188618,
            220177089,
            220376035,
            220375602,
            220169392,
            220168222,
            220172418,
            220166374,
            220169270
        ],
        "A": [
            220162754,
            220162873,
            220166418,
            220162920,
            220167317,
            220165780,
            220168509,
            220165279,
            220163854,
            220162403,
            220163593,
            220166211,
            220165725,
            220172465,
            220175478,
            220376004,
            220375492,
            220163511,
            220162520,
            220166452,
            220197468,
            220163355
        ]
    },
    "name": "A. Gift Carpet",
    "statement": "Recently, Tema and Vika celebrated Family Day. Their friend Arina gave\r\nthem a carpet, which can be represented as an n\r\ncdot m table of lowercase Latin letters.Vika hasn\u2019t seen the gift yet,\r\nbut Tema knows what kind of carpets she likes. Vika will like the carpet\r\nif she can read her name on. She reads column by column from left to\r\nright and chooses one or zero letters from current column.Formally, the\r\ngirl will like the carpet if it is possible to select four distinct\r\ncolumns in order from left to right such that the first column contains\r\n\"v\", the second one contains \"i\", the third one contains \"k\", and the\r\nfourth one contains \"a\".Help Tema understand in advance whether Vika\r\nwill like Arina\u2019s gift.\r\n",
    "solutions": [
        "/*  \n  hmz is cute!\n--------------------------------------------\n  You've got to have faith\n  Don't let them cut you down cut you down once more\n*/\n#include<bits/stdc++.h>\nusing namespace std;\n#define TY int\n#define IL inline\n#define pb push_back\n#define mod (TY)(1e9+7)\n#define MAXN 200005\n#define MAXM 200005\n#define MAXK 27\n#define INF (TY)(1e9)\n#define block 300\n#define For(i,a,b) for(TY i=(a);i<=(b);++i)\n#define FOR(i,a,b) for(TY i=(a);i<(b);++i)\n#define Rof(i,a,b) for(TY i=(a);i>=(b);--i)\n#define ROF(i,a,b) for(TY i=(a);i>(b);--i)\nIL TY qr(){\n\tTY x=0,f=1;char op=getchar();\n\tfor(;op<'0'||op>'9';op=getchar())if(op=='-')f=-1;\n\tfor(;op>='0'&&op<='9';op=getchar())x=x*10+(op^48);\n\treturn x*f;\n}IL bool ischar(char op){\n\tif(op>='a'&&op<='z')return true;\n\tif(op>='A'&&op<='Z')return true;\n\treturn false;\n}IL char getc(){\n\tchar op=getchar();\n\twhile(!ischar(op))op=getchar();\n\treturn op;\n}IL string qs(){\n\tstring op=\"\";char u=getchar();\n\twhile(!ischar(u))u=getchar();\n\twhile(ischar(u))op+=u,u=getchar();\n\treturn op;\n}IL void qw(TY x){\n\tif(!x){putchar('0');return;}\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>=10)qw(x/10);putchar(x%10+'0');\n}IL void qw(TY x,char op){qw(x),putchar(op);}\nIL void ws(string s){FOR(i,0,s.size())putchar(s[i]);}\nIL TY Ceil(TY a,TY b){return a/b+(a%b!=0);}\nIL TY Mod(TY a){return (a>=mod?a-mod:a);}\nIL TY Abs(TY a,TY b){return a>b?a-b:b-a;}\nIL TY Pow(TY a,TY b){\n\tTY ans=1,base=a;\n\twhile(b){\n\t\tif(b&1)ans=ans*base%mod;\n\t\tbase=base*base%mod;b>>=1;\n\t}return ans;\n}TY T,n,m;char mp[21][21],num[]={'v','i','k','a'};\nint main(){\n    //freopen(\".in\",\"r\",stdin);\n    //freopen(\".out\",\"w\",stdout);\n\n    /* init */\n\tT=qr();while(T--){\n\t\tn=qr();m=qr();\n\t\tTY id=0;\n\t\tFor(i,1,n)For(j,1,m)mp[i][j]=getc();\n\t\tFor(j,1,m){\n\t\t\tbool vis=0;\n\t\t\tFor(i,1,n)vis|=(mp[i][j]==num[id]);\n\t\t\tif(vis)++id;\n\t\t\tif(id==4)break;\n\t\t}ws(id==4?\"Yes\\n\":\"No\\n\");\n\t}\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Gift Carpet.json",
    "editorial_link": "https://codeforces.com//blog/entry/119715",
    "editorial": "Note that if the answer is , then there exists a reading of the word in\r\nwhich the leftmost letter is included. Among such readings, we can also\r\nconsider the one in which the leftmost letter is included, which is\r\nlocated to the right of the first occurrence of . Similarly, we can do\r\nthe same for the remaining letters. Therefore, it is sufficient to\r\ngreedily search for the characters in order.Let\u00e2\u0080\u0099s store the input data\r\nin a 2D array and process it by going through the columns from left to\r\nright. First, we will search for the character by iterating through all\r\nthe characters in each processed column. Once we find the character , we\r\nwill similarly search for the character and so on.\r\n"
}