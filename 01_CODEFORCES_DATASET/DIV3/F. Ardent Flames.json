{
    "link": "https://codeforces.com//contest/2037/problem/F",
    "problemId": "3030274",
    "problem_idx": "F",
    "shortId": "2037F",
    "contest_number": "2037",
    "problem_submissions": {
        "E": [
            292047075,
            292001485,
            292009292,
            291996476,
            292062011,
            292051813,
            292265678,
            292262203,
            292192703,
            292071302,
            292070663,
            291999780,
            292064784,
            292052672,
            292050626,
            292052922,
            292071828,
            291992209,
            292000170,
            291988756,
            292008406,
            292007324
        ],
        "F": [
            292022218,
            292017907,
            292024969,
            292058791,
            292012459,
            292558370,
            292027964,
            292322779,
            292083202,
            292025710,
            292058305,
            292053924,
            292057524,
            292098039,
            292062013,
            292058405,
            292072247,
            292041262,
            291975958,
            292082628,
            292078164,
            292082635,
            292046600
        ],
        "G": [
            291996486,
            292046822,
            292051239,
            292033736,
            292022807,
            292088543,
            292046321,
            292046301,
            292015442,
            292027681,
            292033325,
            292031649,
            292030485,
            292058022,
            292068187,
            292049914,
            292058005,
            292018113,
            291981788,
            292025943,
            292032506,
            292023447,
            292184893
        ],
        "D": [
            291973736,
            291988212,
            291992996,
            291979703,
            291998834,
            291983903,
            292002713,
            292029295,
            291999646,
            291984954,
            292024081,
            292031106,
            291991931,
            291978485,
            292010279,
            291980815,
            291970955,
            291981313,
            291985613
        ],
        "C": [
            291961505,
            291975167,
            291974207,
            291964672,
            291977153,
            291965604,
            291972603,
            291985859,
            291958605,
            291975659,
            291971736,
            292051709,
            291965196,
            293681954,
            291964838,
            291966108,
            291957366,
            291965128,
            291970402
        ],
        "B": [
            291956714,
            291952988,
            291957798,
            291954795,
            291952360,
            291952928,
            291957139,
            291960930,
            291959780,
            291972890,
            291956311,
            291964398,
            291952930,
            291955364,
            291953325,
            291955467,
            291951893,
            291958231,
            291957803
        ],
        "A": [
            291948750,
            291945793,
            291946764,
            291946202,
            291945511,
            291946198,
            291946444,
            291950431,
            291945465,
            291953437,
            291945736,
            291948815,
            291947311,
            291946698,
            291949011,
            291949226,
            291946064,
            291945840,
            291951387
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136334",
    "editorial": "Let's perform binary search on the minimum number of hits to kill at least k\n enemies. How do we check if a specific answer is possible?\n\nLet's consider a single enemy for now. If its health is hi\n and we need to kill it in at most q\n attacks, then we need to be doing at least ?hiq?\n damage per attack to this enemy. If this number is greater than m\n, then obviously we cannot kill this enemy in at most q\n attacks as the maximum damage Xilonen can do is m\n damage per hit. Otherwise, we can model the enemy as a valid interval where we can place Xilonen. Specifically, the inequality m?|p?x|??hiq?\n must be satisfied.\n\nNow that we have modeled each enemy as an interval, the problem is reduced to finding whether or not there exists a point on at least k\n intervals. This is a classic problem that can be approached by a sweep-line algorithm, sorting the events of intervals starting and ending by time and adding 1\n to your counter when an interval starts and subtracting 1\n to your counter when an interval ends.\n\nNote that the maximum possible answer to any setup with a solution is max(hi)=109\n, so if we cannot kill at least k\n enemies in 109\n attacks then we can just output ?1\n as our answer.\n\nThe total time complexity is O(nlog(n)log(max(hi))\n.",
    "name": "F. Ardent Flames",
    "statement": "There are n enemies in a line. The i\u2019th enemy from the left has health\r\nh_i and is currently at position x_i. Xilonen has an attack damage of m,\r\nand you are ready to defeat the enemies with her.Xilonen has a powerful\r\n\"ground stomp\" attack. , you select an integer p and position Xilonen\r\nthere (p can be any integer position, including a position with an enemy\r\ncurrently). Afterwards, for each attack, she deals m damage to an enemy\r\nat position p (if there are any), m-1 damage to enemies at positions p-1\r\nand p+1, m-2 damage to enemies at positions p-2 and p+2, and so on.\r\nEnemies that are at least a distance of m away from Xilonen take no\r\ndamage from attacks.Formally, if there is an enemy at position x, she\r\nwill deal\r\nmax(0,m - |p - x|) damage to that enemy each hit. Over all possible p,\r\noutput the minimum number of attacks Xilonen must perform to defeat at\r\nleast k enemies. If it is impossible to find a p such that eventually at\r\nleast k enemies will be defeated, output -1 instead. Note that an enemy\r\nis considered to be defeated if its health reaches 0 or below.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\u00a0#define int long long#define fi first#define se second\u00a0const int N = 1e6 + 5;const int K = 1e2 + 5;const int mod = 998244353;\u00a0#define all(v) (v).begin(), (v).end()#define pii pair<int, int> \u00a0using namespace std;\u00a0mt19937 rd(chrono::steady_clock::now().time_since_epoch().count());\u00a0int t, n, m, k, h[N], x[N];priority_queue<int, vector<int>, greater<int>> q;\u00a0signed main() {    ios_base::sync_with_stdio(0);    cin.tie(0);        if(ifstream(\"file.inp\")){    \tfreopen(\"file.inp\", \"r\", stdin);    \tfreopen(\"file.out\", \"w\", stdout);    }        cin >> t;    while(t--) {    \tcin >> n >> m >> k;    \tfor(int i = 1; i <= n; i++) cin >> h[i];    \tfor(int i = 1; i <= n; i++) cin >> x[i];    \tint l = 1, r = 1e18, mid, res = -1;    \twhile(l <= r) {    \t\tmid = l + r >> 1;    \t\tvector<pii> s;    \t\tfor(int i = 1; i <= n; i++) {    \t\t\tint c = m - (h[i] / mid + (h[i] % mid != 0));    \t\t\ts.push_back({max(x[i] - c, x[i] - m), min(x[i] + c, x[i] + m)});    \t\t}    \t\tsort(all(s));    \t\t// if(mid == 1) for(auto &x : s) cout << x.fi << ' ' << x.se << '\\n';    \t\twhile(q.size()) q.pop();    \t\tbool check = 0;    \t\tfor(int i = 0; i < n; i++) {    \t\t\tq.push(s[i].se);    \t\t\tif(q.size() > k) q.pop();    \t\t\tif(s[i].fi <= q.top() && q.size() == k) {    \t\t\t\tcheck = 1;    \t\t\t\tbreak;    \t\t\t}    \t\t}    \t\tif(!check) {    \t\t\tl = mid + 1;    \t\t}    \t\telse {    \t\t\tr = mid - 1;    \t\t\tres = mid;    \t\t}    \t}    \tcout << res << '\\n';    }        return 0;}\u00a0// tuntun"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "math",
        "sortings",
        "two pointers"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Ardent Flames.json"
}