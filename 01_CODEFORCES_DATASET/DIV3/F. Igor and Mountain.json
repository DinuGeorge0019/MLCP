{
    "link": "https://codeforces.com//contest/2091/problem/F",
    "problemId": "3289247",
    "problem_idx": "F",
    "shortId": "2091F",
    "contest_number": "2091",
    "problem_submissions": {
        "G": [
            312443740,
            312440964,
            312449961,
            312463242,
            312461876,
            312468559,
            312443596,
            312511383
        ],
        "F": [
            312388330,
            312412408,
            312430981,
            312418730,
            312432603,
            312362472,
            312401868,
            312388116,
            312384163,
            312385210,
            312393774,
            312407683,
            312403588,
            312409243,
            312397198,
            312421669,
            312449852,
            312416513
        ],
        "E": [
            312364224,
            312379570,
            312394687,
            312386750,
            312378910,
            312384287,
            312360471,
            312357459,
            312346051,
            312367500,
            312375652,
            312366419,
            312377485,
            312369213,
            312377446,
            312364255,
            312346485,
            312374845
        ],
        "D": [
            312353666,
            312365895,
            312355563,
            312369505,
            312366914,
            312413286,
            312349339,
            312363994,
            312361301,
            312362180,
            312358189,
            312363978,
            312355693,
            312364358,
            312351943,
            312340247,
            312363493
        ],
        "C": [
            312346511,
            312354545,
            312356602,
            312361282,
            312358087,
            312401227,
            312341205,
            312349482,
            312355403,
            312348089,
            312347345,
            312347202,
            312348084,
            312349677,
            312348353,
            312345589,
            312336376,
            312348785
        ],
        "B": [
            312338347,
            312349733,
            312341539,
            312347023,
            312339969,
            312398814,
            312336638,
            312337475,
            312341231,
            312340093,
            312340366,
            312337779,
            312341589,
            312345952,
            312339689,
            312336957,
            312335616,
            312341894
        ],
        "A": [
            312335159,
            312336162,
            312340416,
            312341479,
            312335895,
            312395413,
            312335001,
            312335418,
            312337197,
            312336076,
            312336210,
            312335026,
            312334941,
            312337205,
            312335107,
            312334877,
            312334813,
            312335610
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/141047",
    "editorial": "Let’s use the dynamic programming method : row number. column number.\r\nmeans that exactly one hold has already been selected in the current\r\nrow, and a second one can still be added (since there are a maximum of\r\ntwo holds per level). means that two holds have already been used in\r\nthis level. the number of ways to construct a correct route starting\r\nwith a hold in cell , given that holds are already used in row . For a\r\ncell with a hold (i.e. ’X’): At the lower level, i.e. , this hold can\r\nserve as the start of the route, so all such . If one hold is already\r\nselected at the current level, then you can take the second hold at the\r\nsame level at a distance of no more than , i.e. (let’s not forget to\r\nexclude the point from the sum, so as not to count it twice). The\r\ntransition to the next level (if possible) in takes a vertical distance\r\nequal to . So the range of for the transition will be , where This\r\nsolution recalculates each state in , to make it more efficient you need\r\nto use prefix sums..\r\n",
    "name": "F. Igor and Mountain",
    "statement": "The visitors of the IT Campus \"NEIMARK\" are not only strong programmers\r\nbut also physically robust individuals! Some practice swimming, some\r\nrowing, and some rock climbing!Master Igor is a prominent figure in the\r\nlocal rock climbing community. One day, he went on a mountain hike to\r\nascend one of the peaks. As an experienced climber, Igor decided not to\r\nfollow the established trails but to use his skills to climb strictly\r\nvertically.Igor found a rectangular vertical section of the mountain and\r\nmentally divided it into n horizontal levels. He then split each level\r\ninto m segments using vertical partitions. Upon inspecting these\r\nsegments, Igor discovered convenient protrusions that can be grasped\r\n(hereafter referred to as ). Thus, the selected part of the mountain can\r\nbe represented as an n\r\ntimes m rectangle, with some cells containing holds.Being an experienced\r\nprogrammer, Igor decided to count the number of valid . A route is\r\ndefined as a sequence of holds. A route is considered valid if the\r\nfollowing conditions are satisfied: The first hold in the route is\r\nlocated on the very bottom level (row n); The last hold in the route is\r\nlocated on the very top level (row 1); Each subsequent hold is not lower\r\nthan the previous one; At least one hold is used on each level (i.e., in\r\nevery row of the rectangle); At most two holds are used on each level\r\n(since Igor has only two hands); Igor can reach from the current hold to\r\nthe next one if the distance between the centers of the corresponding\r\nsections does not exceed Igor’s arm span. Igor’s arm span is d, which\r\nmeans he can move from one hold to another if the between the centers of\r\nthe corresponding segments does not exceed d. The distance between\r\nsections (i_1, j_1) and (i_2, j_2) is given by\r\nsqrt{(i_1 - i_2) ^ 2 + (j_1 - j_2) ^ 2}.Calculate the number of\r\ndifferent valid routes. Two routes are considered different if they\r\ndiffer in the list of holds used or in the order in which these holds\r\nare visited.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "dp"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Igor and Mountain.json",
    "hint": []
}