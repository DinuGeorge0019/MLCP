{
    "link": "https://codeforces.com//contest/1144/problem/C",
    "problemId": "322484",
    "problem_idx": "C",
    "shortId": "1144C",
    "contest_number": "1144",
    "problem_submissions": {
        "G": [
            52105008,
            52115875,
            52124809,
            52311146,
            52118351,
            52313030
        ],
        "E": [
            52101381,
            52103848,
            52100390,
            52103649,
            52104862,
            52109101,
            52102842,
            52107540,
            52111264,
            52112468,
            52260664,
            52109742,
            52111378,
            52113457,
            52114606,
            52105560,
            52108689,
            52119398,
            52111986,
            52114107
        ],
        "F": [
            52095886,
            52109100,
            52110494,
            52107320,
            52107378,
            52103623,
            52111392,
            52111875,
            52109029,
            52108638,
            52103543,
            52103345,
            52106901,
            52107210,
            52106754,
            52111935,
            52119339,
            52102752,
            52105488,
            52108153
        ],
        "D": [
            52090019,
            52100588,
            52092311,
            52097671,
            52099406,
            52099269,
            52097110,
            52097725,
            52096933,
            52100380,
            52097140,
            52098645,
            52102773,
            52099192,
            52099366,
            52100428,
            52099939,
            52097949,
            52102364,
            52100814
        ],
        "C": [
            52089034,
            52096181,
            52089279,
            52094055,
            52091090,
            52091960,
            52092409,
            52092424,
            52092267,
            52092714,
            52092539,
            52093040,
            52092790,
            52093635,
            52092887,
            52094789,
            52090226,
            52092962,
            52093892,
            52094692
        ],
        "B": [
            52086626,
            52090793,
            52086733,
            52090174,
            52089416,
            52088582,
            52089163,
            52088931,
            52089378,
            52087490,
            52088380,
            52094345,
            52089645,
            52089638,
            52089793,
            52091232,
            52087215,
            52089217,
            52090678,
            52090945
        ],
        "A": [
            52085844,
            52087003,
            52085711,
            52087471,
            52085997,
            52086503,
            52085607,
            52086179,
            52086274,
            52085411,
            52085724,
            52085963,
            52086646,
            52086484,
            52086097,
            52087942,
            52085314,
            52086675,
            52088201,
            52086796
        ]
    },
    "name": "C. Two Shuffled Sequences",
    "statement": "Two integer sequences existed initially one of them was increasing, and\r\nthe other one decreasing.Strictly increasing sequence is a sequence of\r\nintegers [x_1 < x_2 <\r\ndots < x_k]. And strictly decreasing sequence is a sequence of integers\r\n[y_1 > y_2 >\r\ndots > y_l]. Note that the empty sequence and the sequence consisting of\r\none element can be considered as increasing or decreasing.They were\r\nmerged into one sequence a. After that sequence a got shuffled. For\r\nexample, some of the possible resulting sequences a for an increasing\r\nsequence [1, 3, 4] and a decreasing sequence [10, 4, 2] are sequences\r\n[1, 2, 3, 4, 4, 10] or [4, 2, 1, 10, 4, 3].This shuffled sequence a is\r\ngiven in the input.Your task is to find two suitable initial sequences.\r\nOne of them should be increasing and the other one decreasing. Note that\r\nthe empty sequence and the sequence consisting of one element can be\r\nconsidered as increasing or decreasing.If there is a contradiction in\r\nthe input and it is impossible to split the given sequence a to\r\nincreasing and decreasing sequences, print \"\".\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define maxn 200010\nusing namespace std;\nint a[maxn];\nint ans1[maxn],ans2[maxn];\nint cmp(int x,int y){\n    return x>y;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&a[i]);\n    }\n    sort(a+1,a+1+n);\n    int cnt1=0,cnt2=0;\n    for(int i=1;i<n;i++){\n        if(a[i]==a[i+1]){\n            ans2[++cnt2]=a[i];\n        }\n        else{\n            ans1[++cnt1]=a[i];\n        }\n    }\n    ans1[++cnt1]=a[n];\n    sort(ans2+1,ans2+1+cnt2,cmp);\n    int flag=1;\n    for(int i=1;i<cnt2;i++){\n        if(ans2[i]==ans2[i+1]){\n            flag=0;\n            break;\n        }\n    }\n    if(!flag){\n        cout<<\"NO\"<<endl;\n    }\n    else{\n        cout<<\"YES\"<<endl;\n        cout<<cnt1<<endl;\n        for(int i=1;i<=cnt1;i++){\n            cout<<ans1[i]<<\" \";\n        }\n        cout<<endl;\n        cout<<cnt2<<endl;\n        for(int i=1;i<=cnt2;i++){\n            cout<<ans2[i]<<\" \";\n        }\n        cout<<endl;\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "sortings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Two Shuffled Sequences.json",
    "editorial_link": "https://codeforces.com/blog/entry/66307",
    "editorial": "Letâs count the number of occurrences of each element in the . Because\r\nthe maximum possible element is , it can be done without any data\r\nstructures.Then letâs check if is greater than for some from to , and if\r\nit is, then the answer is \"\", because this element should occur at least\r\ntwice in one of the sequences.Now letâs output the increasing sequence.\r\nThe number of elements in it is the number of elements such that . Letâs\r\niterate from left to right, print the suitable elements and decrease\r\ntheir .The number of elements in the decreasing sequence is just the\r\nnumber of elements with non-zero . So letâs iterate from right to left\r\nand just print suitable elements.\r\n",
    "hint": []
}