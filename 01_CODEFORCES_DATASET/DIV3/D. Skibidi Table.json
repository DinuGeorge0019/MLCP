{
    "link": "https://codeforces.com//contest/2093/problem/D",
    "problemId": "3316691",
    "problem_idx": "D",
    "shortId": "2093D",
    "contest_number": "2093",
    "problem_submissions": {
        "G": [
            314598849,
            314606152,
            314587837,
            314603802,
            314617244,
            314636843,
            314627641,
            314600484,
            314594509,
            314620818,
            314635145,
            314608319,
            314614792,
            314625948,
            314636125,
            314647345,
            314643350,
            314696296,
            314695422,
            314626566,
            320943180,
            316430155,
            316118291,
            316109856,
            314647533
        ],
        "F": [
            314558487,
            314577897,
            314625297,
            314618724,
            314550975,
            314613160,
            314640815,
            314612755,
            314576025,
            314580140,
            314620214,
            314601161,
            314634333,
            314617932,
            314620741,
            314641936,
            316430291,
            314618171
        ],
        "E": [
            314544557,
            314535804,
            314564193,
            314584439,
            314601580,
            314571635,
            314566292,
            314573283,
            314566908,
            314569827,
            314594393,
            314592990,
            314569180,
            314598271,
            314602179,
            314604220,
            314574875
        ],
        "D": [
            314536131,
            314548404,
            314559767,
            314561746,
            314588013,
            314559202,
            314556203,
            314580187,
            314554129,
            314551666,
            314587477,
            314585574,
            314553841,
            314581434,
            314576973,
            314582629,
            314601313
        ],
        "C": [
            314526642,
            314521445,
            314518733,
            314537065,
            314535871,
            314531879,
            314535043,
            314525409,
            314542891,
            314542275,
            314543204,
            314552545,
            314540325,
            314550521,
            314542741,
            314550013,
            314552540
        ],
        "B": [
            314515947,
            314513843,
            314512428,
            314541683,
            314519273,
            314519539,
            314519019,
            314557363,
            314534402,
            314538618,
            314524038,
            314544076,
            314523050,
            314523557,
            314528828,
            314536221,
            314527428
        ],
        "A": [
            314508419,
            314505299,
            314504405,
            314507249,
            314505871,
            314511003,
            314506100,
            314506987,
            314535725,
            314508847,
            314505153,
            314508202,
            314508618,
            314506581,
            314510822,
            314519518,
            314513582
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/141434",
    "editorial": "Note that there are possible positions of the cell and the values within\r\nit: ; ; ; . Since all square tables of size are filled recursively, it\r\nis possible to find the corresponding value for the coordinate or the\r\ncorresponding coordinate for the value depending on the query, add the\r\nrequired value to the answer, subtract the necessary value from the\r\nquery, and transition from to . This process can continue to reduce to\r\none to handle the table manually, or to zero to immediately add to the\r\nanswer .This can be implemented either with a recursive function, or by\r\nsubtracting the necessary powers of two, or by integer division of the\r\ncoordinates by and the value by , or by analyzing the bits in the binary\r\nrepresentation of , and , or through a kind of binary search. Each of\r\nthese solutions answers one query in .\r\n",
    "name": "D. Skibidi Table",
    "statement": "Vadim loves filling square tables with integers. But today he came up\r\nwith a way to do it for fun! Let’s take, for example, a table of size 2\r\ntimes 2, with rows numbered from top to bottom and columns numbered from\r\nleft to right. We place 1 in the top left cell, 2 in the bottom right, 3\r\nin the bottom left, and 4 in the top right. That’s all he needs for\r\nfun!Fortunately for Vadim, he has a table of size 2^n\r\ntimes 2^n. He plans to fill it with integers from 1 to 2^{2n} in\r\nascending order. To fill such a large table, Vadim will divide it into 4\r\nequal square tables, filling the top left one first, then the bottom\r\nright one, followed by the bottom left one, and finally the top right\r\none. Each smaller table will be divided into even smaller ones as he\r\nfills them until he reaches tables of size 2\r\ntimes 2, which he will fill in the order described above.Now Vadim is\r\neager to start filling the table, but he has q questions of two types:\r\nwhat number will be in the cell at the x-th row and y-th column; in\r\nwhich cell coordinates will the number d be located. Help answer Vadim’s\r\nquestions.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Skibidi Table.json",
    "hint": [
        "Hint How does the answer change when is decreased?"
    ]
}