{
    "link": "https://codeforces.com//contest/1857/problem/D",
    "problemId": "2150545",
    "problem_idx": "D",
    "shortId": "1857D",
    "contest_number": "1857",
    "problem_submissions": {
        "G": [
            217667474,
            217665550,
            217689340,
            217662818,
            217685310,
            217676468,
            217687922,
            217701057,
            217700197,
            217807896,
            217807827,
            217712091,
            217684113,
            217720675,
            217807627,
            217677400,
            217731532,
            217711676,
            217719652,
            217714022,
            217712604,
            217718357,
            217710888
        ],
        "F": [
            217659021,
            217648989,
            217664891,
            217627744,
            217669247,
            217691937,
            217689514,
            217664113,
            217674769,
            217680535,
            217666261,
            217699208,
            217671748,
            217807538,
            217701131,
            217674808,
            217679890,
            217683947,
            217696220,
            217689116,
            217681500,
            217688375
        ],
        "B": [
            217642867,
            217642809,
            217629703,
            217685667,
            217635907,
            217630271,
            217642640,
            217631148,
            217634501,
            217636716,
            217631884,
            217632923,
            217807034,
            217775927,
            217633962,
            217640699,
            217644829,
            217637634,
            217632935,
            217633927,
            217650168,
            217644229
        ],
        "D": [
            217638870,
            217638947,
            217636496,
            217634474,
            217647504,
            217644974,
            217647862,
            217645462,
            217646166,
            217647061,
            217646308,
            217648033,
            217807098,
            217775952,
            217684716,
            217643681,
            217658546,
            217653658,
            217651018,
            217652036,
            217655292,
            217662419
        ],
        "E": [
            217634664,
            217632006,
            217641596,
            217642974,
            217661622,
            217655519,
            217656154,
            217657341,
            217663115,
            217656176,
            217655704,
            217660327,
            217807112,
            217775966,
            217649059,
            217656810,
            217665253,
            217663579,
            217661514,
            217671790,
            217665209,
            217669853
        ],
        "C": [
            217623043,
            217660653,
            217633113,
            217671603,
            217641405,
            217641348,
            217633280,
            217640705,
            217639467,
            217642154,
            217639690,
            217640983,
            217807070,
            217775937,
            217639411,
            217632787,
            217649913,
            217647923,
            217645015,
            217643972,
            217637879,
            217653046
        ],
        "A": [
            217621356,
            217622367,
            217617259,
            217636401,
            217628184,
            217620735,
            217618278,
            217621503,
            217622297,
            217628772,
            217620627,
            217617547,
            217806999,
            217775914,
            217772364,
            217772351,
            217620412,
            217618442,
            217617205,
            217621216,
            217619220,
            217624745,
            217618215,
            217619189
        ]
    },
    "name": "D. Strong Vertices",
    "statement": "Given two arrays a and b, both of length n. Elements of both arrays\r\nindexed from 1 to n. You are constructing a directed graph, where edge\r\nfrom u to v (u\r\nneq v) exists if a_u-a_v\r\nge b_u-b_v.A vertex V is called strong if there exists a path from V to\r\nall other vertices.A path in a directed graph is a chain of several\r\nvertices, connected by edges, such that moving from the vertex u, along\r\nthe directions of the edges, the vertex v can be reached.Your task is to\r\nfind all strong vertices.For example, if a=[3,1,2,4] and b=[4,3,2,1],\r\nthe graph will look like this:\r\n",
    "solutions": [
        "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<numeric>\n#include<cmath>\n#include<fstream>\n#include<random>\n#include<set>\n#include<unordered_set>\n#include<string>\n#include<map>\n#include<unordered_map>\n#include<queue>\n#include<stack>\n#include<fstream>\n#include<time.h>\n \nusing namespace std;\n \n#define all(a) a.begin(), a.end()\n#define Max(a) *max_element(all(a))\n#define Min(a) *min_element(all(a))\n \nusing ll = long long;\nusing ld = long double;\n\n/*\n a[u] - b[u] >= a[v] - b[v]\n */\n \nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> a(n), b(n), c(n);\n    for (auto& e : a) cin >> e;\n    for (auto& e : b) cin >> e;\n    for (int i = 0; i < n; ++i) c[i] = a[i] - b[i];\n    ll maxAndCount = INTMAX_MIN;\n    vector<int> indexes;\n    for (int i = 0; i < n; ++i) {\n        if (c[i] > maxAndCount) {\n            indexes.clear();\n            maxAndCount = c[i];\n            indexes.push_back(i);\n        } else if (c[i] == maxAndCount) {\n            indexes.push_back(i);\n        }\n    }\n    cout << indexes.size() << endl;\n    for (auto ind : indexes) cout << ind+1 << \" \";\n    cout << endl;\n}\n \nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cout.precision(40);\n    int t = 1;\n    cin >> t;\n    while (t--) {\n        solve();\n    }\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "sortings",
        "trees"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Strong Vertices.json",
    "editorial_link": "https://codeforces.com//blog/entry/119134",
    "editorial": "The first step is to modify the inequality. .We can create a new array ,\r\nwhere and our inequality is transformed to . Suppose the set is the set\r\nof such vertices that is maximum possible. From each there will be a\r\npath to all other vertices, because is not less than any other , so the\r\nset is guaranteed will be in our answer. Now the question is whether\r\nthere are other vertices in our answer?Let\u00e2\u0080\u0099s prove that from any such\r\nvertex , that is not maximum, there is no path to any vertex from . The\r\nfirst observation, that there is no edge between and any . So the path\r\nmust go through other vertices. But even if there exist a path to\r\nanother vertex , will be still less that , so it is impossible to get\r\nany .In such way we proved that the answer will always be the set of\r\nsuch , that is maximized.The complexity is .\r\n"
}