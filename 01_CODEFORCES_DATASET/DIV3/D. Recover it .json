{
    "link": "https://codeforces.com//contest/1176/problem/D",
    "problemId": "356086",
    "problem_idx": "D",
    "shortId": "1176D",
    "contest_number": "1176",
    "problem_submissions": {
        "F": [
            55366536,
            55370553,
            55370076,
            55361482,
            55349957,
            55373782,
            55383169,
            55421204,
            55381361
        ],
        "D": [
            55352843,
            55361188,
            55360704,
            55370696,
            55358745,
            55347526,
            55359651,
            55356479,
            55361066,
            55360096,
            55360897,
            55358553,
            55352085,
            55359124,
            55360813,
            55363517,
            55362204,
            55360723,
            55360975,
            55364720
        ],
        "E": [
            55349152,
            55349756,
            55351649,
            55354804,
            55365594,
            55358360,
            55348657,
            55350850,
            55353780,
            55351477,
            62626593,
            55421378,
            55390144,
            55390011,
            55389979,
            55389924,
            55350785,
            55361448,
            55351241,
            55350527,
            55353065,
            55353378,
            55348945,
            55354346,
            55353391
        ],
        "C": [
            55342677,
            55351695,
            55338466,
            55345985,
            55363580,
            55342563,
            55343971,
            55347250,
            55345645,
            55345777,
            55347227,
            55345382,
            55347101,
            55344713,
            55348024,
            55345956,
            55344452,
            55349792,
            55346750
        ],
        "B": [
            55338190,
            55339928,
            55338713,
            55340244,
            55360985,
            55338545,
            55340194,
            55344577,
            55338952,
            55340812,
            55340557,
            55340932,
            55341245,
            55341745,
            55340147,
            55340311,
            55339019,
            55342585,
            55340210
        ],
        "A": [
            55337291,
            55337321,
            55338350,
            55337635,
            55360313,
            55337458,
            55338052,
            55339410,
            55337348,
            55337956,
            55338200,
            55338309,
            55337308,
            55337677,
            55337569,
            55337795,
            55337752,
            55337587,
            55338006
        ]
    },
    "name": "D. Recover it ",
    "statement": "Authors guessed an array a consisting of n integers; each integer is not\r\nless than 2 and not greater than 2\r\ncdot 10^5. You don’t know the array a, but you know the array b which is\r\nformed from it with the following sequence of operations: Firstly, let\r\nthe array b be equal to the array a; Secondly, for each i from 1 to n:\r\nif a_i is a number, then one integer p_{a_i} is appended to array b,\r\nwhere p is an infinite sequence of prime numbers (2, 3, 5,\r\ndots); otherwise (if a_i is not a number), the greatest divisor of a_i\r\nwhich is not equal to a_i is appended to b; Then the obtained array of\r\nlength 2n is shuffled and given to you in the input. Here p_{a_i} means\r\nthe a_i-th prime number. The first prime p_1 = 2, the second one is p_2\r\n= 3, and so on.Your task is to recover suitable array a that forms the\r\ngiven array b. It is guaranteed that the answer exists (so the array b\r\nis obtained from some suitable array a). If there are multiple answers,\r\nyou can print any.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nconst int Maxn=400005,maxi=2*2750132;\nint prim[Maxn],cnt,bel[maxi+5];\nbool vis[maxi+5];\nvoid init(void)\n{\n\tvis[1]=true;\n\tfor(int i=2;i<=maxi;i++)\n\t{\n\t\tif(!vis[i]) prim[++cnt]=i,bel[i]=cnt;\n\t\tfor(int j=1;j<=cnt&&i*prim[j]<=maxi;j++)\n\t\t{\n\t\t\tvis[i*prim[j]]=true;\n\t\t\tif(i%prim[j]==0) break;\n\t\t}\n\t}\n}\nint n,a[Maxn];\nmultiset <int> Se,D;\nint main()\n{\n\tinit();\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=2*n;i++)\n\t\tscanf(\"%d\",&a[i]),Se.insert(a[i]);\n\tsort(a+1,a+1+2*n);\n\tfor(int i=2*n;i>=1;i--)\n\t{\n\t\tif(D.find(a[i])!=D.end())\n\t\t{\n\t\t\tD.erase(D.find(a[i]));\n\t\t\tcontinue;\n\t\t}\n\t\tif(vis[a[i]])\n\t\t{\n\t\t\tint maxi=sqrt(a[i]);\n\t\t\tfor(int j=2;j<=maxi;j++)\n\t\t\t\tif(a[i]%j==0)\n\t\t\t\t{\n\t\t\t\t\tD.insert(a[i]/j);\n\t\t\t\t\tprintf(\"%d \",a[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tD.insert(bel[a[i]]);\n\t\t\tprintf(\"%d \",bel[a[i]]);\n\t\t}\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs",
        "greedy",
        "number theory",
        "sortings"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Recover it .json",
    "editorial_link": "https://codeforces.com/blog/entry/67598",
    "editorial": "Firstly, letâs generate first primes. It can be done in almost naively\r\n(just check all elements in range ). It also can be done with\r\nEratosthenes sieve in or . We also can calculate for each number in this\r\nrange the maximum its divisor non-equal to it (if this number is not a\r\nprime). And in other case we can calculate the index of this prime.\r\nUsing all this information we can restore the array .Letâs maintain a\r\nmultiset (a set in which multiple copies of the same element are\r\nallowed) of all elements in . While it is not empty, letâs take the\r\nmaximum element from this set . If it is prime (we can check it using\r\nthe information calculated earlier) then it is some . Letâs find the\r\nindex of this prime () using calculated information, remove this element\r\nand , push in and continue. Otherwise this element is not a prime and\r\nthen it is some . Letâs remove it and its maximum divisor non-equal to\r\nit from the multiset, push in and continue.\r\n",
    "hint": []
}