{
    "link": "https://codeforces.com//contest/2036/problem/D",
    "problemId": "2997671",
    "problem_idx": "D",
    "shortId": "2036D",
    "contest_number": "2036",
    "problem_submissions": {
        "G": [
            289568495,
            289592157,
            289591763,
            289595974,
            289727611,
            290290543
        ],
        "F": [
            289537821,
            289522926,
            289537324,
            289559326,
            289512509,
            289515984,
            289510795,
            289521272,
            289526918,
            289534575,
            289534164,
            289556542,
            289531934,
            289514943,
            289521852,
            289521308,
            289566779,
            289543749,
            289533352
        ],
        "E": [
            289519379,
            289513483,
            289516754,
            289537406,
            289502565,
            289497006,
            289514977,
            289504007,
            289502653,
            289492035,
            289506214,
            289517949,
            289508708,
            289505547,
            289524899,
            289498786,
            289538409,
            289511145,
            289522074,
            289542250
        ],
        "D": [
            289494755,
            289496973,
            289502561,
            289508569,
            289485075,
            289486449,
            289493423,
            289495061,
            289486975,
            289488146,
            289499112,
            289494333,
            289489388,
            289496285,
            289527032,
            289505896,
            289497283,
            289504013,
            289505465
        ],
        "C": [
            289479986,
            289485425,
            289473871,
            289486850,
            289474317,
            289472689,
            289477260,
            289486030,
            289480295,
            289481264,
            289478991,
            289479671,
            289477258,
            289477016,
            289506161,
            289489963,
            289490617,
            289481449,
            289485496
        ],
        "B": [
            289473268,
            289473263,
            289467611,
            289472113,
            289470722,
            289468547,
            289468418,
            289478505,
            289474994,
            289471830,
            289469932,
            289465642,
            289466472,
            289469818,
            289476408,
            289471072,
            289468104,
            289473322,
            289472255
        ],
        "A": [
            289464981,
            289463574,
            289462739,
            289463265,
            289465451,
            289464109,
            289462932,
            289467937,
            289463249,
            289464614,
            289463267,
            289462869,
            289462845,
            289463088,
            289467021,
            289463344,
            289462625,
            289465258,
            289463000
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135849",
    "editorial": "TutorialWe will go through all layers of the carpet, adding to the\r\nanswer the number of records encountered on each layer. To do this, we\r\ncan iterate over, for example, the top-left cells of each layer having\r\nthe form for all in the range , and then traverse the layer with a naive\r\nalgorithm, writing the encountered digits into some array. Then traverse\r\nthe array and count the occurrences in that layer. Also, when traversing\r\nthe array, we should take into account the cyclic nature of the layer,\r\nremembering to check for possible occurrences of containing a starting\r\ncell.Complexity:\r\n",
    "name": "D. I Love 1543",
    "statement": "One morning, Polycarp woke up and realized that 1543 is the most\r\nfavorite number in his life.The first thing that Polycarp saw that day\r\nas soon as he opened his eyes was a large wall carpet of size n by m\r\ncells; n and m are even integers. Each cell contains one of the digits\r\nfrom 0 to 9.Polycarp became curious about how many times the number 1543\r\nwould appear in all layers^{\r\ntext{ }} of the carpet when traversed .^{\r\ntext{ }}The first layer of a carpet of size n\r\ntimes m is defined as a closed strip of length 2\r\ncdot (n+m-2) and thickness of 1 element, surrounding its outer part.\r\nEach subsequent layer is defined as the first layer of the carpet\r\nobtained by removing all previous layers from the original carpet.\r\n",
    "solutions": [
        "#include <iostream>#include <cmath>#include <vector>#include <algorithm>#include <map>#include <set>#include <bitset>#include <queue>#define ff first#define ss secondtypedef long long ll;using namespace std;const int N = 1010;char e[N][N];void solve() {\tint n, m;\tcin >> n >> m;\tfor (int i = 1; i <= n; i++) {\t\tfor (int j = 1; j <= m; j++) {\t\t\tcin >> e[i][j];\t\t}\t}\tint ans = 0;\tfor (int x = 1; x <= min(n, m) / 2; x++) {\t\tvector <char> v;\t\tfor (int j = x; j <= m + 1 - x; j++) {\t\t\tv.push_back(e[x][j]);\t\t}\t\tfor (int j = x + 1; j <= n + 1 - x; j++) {\t\t\tv.push_back(e[j][m + 1 - x]);\t\t}\t\tfor (int j = m - x; j >= x; j--) {\t\t\tv.push_back(e[n + 1 - x][j]);\t\t}\t\tfor (int j = n - x; j > x; j--) {\t\t\tv.push_back(e[j][x]);\t\t}\t\tfor (int i = 0; i < (int)v.size(); i++) {\t\t\tvector<int> a(4);\t\t\ta[0] = i;\t\t\tfor (int j = 1; j < 4; j++) {\t\t\t\ta[j] = (a[j - 1] + 1) % (int)v.size();\t\t\t}\t\t\tif (v[a[0]] == '1' && v[a[1]] == '5' &&\t\t\t\tv[a[2]] == '4' && v[a[3]] == '3') {\t\t\t\t\tans++;\t\t\t\t}\t\t}\t}\tcout << ans << \"\\n\";}int main() {\tint t;\tcin >> t;\twhile (t--) {\t\tsolve();\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "matrices"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. I Love 1543.json",
    "hint": []
}