{
    "link": "https://codeforces.com//contest/1907/problem/B",
    "problemId": "2365623",
    "problem_idx": "B",
    "shortId": "1907B",
    "contest_number": "1907",
    "problem_submissions": {
        "E": [
            235922096,
            235913995,
            235900143,
            235903340,
            235921667,
            235901704,
            235905781,
            236028309,
            235900905,
            235914797,
            235900953,
            235904410,
            235901939,
            235904392,
            235896353,
            235889597,
            235895501,
            235901631,
            235906746,
            235904536
        ],
        "G": [
            235905776,
            235944172,
            240754131,
            236224108,
            239539892
        ],
        "D": [
            235889060,
            235907893,
            235885826,
            235889907,
            235880968,
            235891188,
            235887305,
            235888897,
            235891138,
            235883950,
            235891896,
            235891023,
            235886777,
            235889881,
            237694958,
            235867800,
            235908732,
            235892927,
            235897779,
            235896975
        ],
        "F": [
            235888366,
            235927475,
            235911089,
            235918673,
            235897756,
            235921167,
            235919938,
            235923351,
            235911206,
            235921824,
            235923367,
            235927696,
            235932260,
            235934792,
            235914612,
            235925488,
            235926925,
            235918432,
            235922859
        ],
        "C": [
            235881778,
            235895243,
            235879309,
            235877991,
            235891348,
            235879417,
            235877691,
            235876696,
            235876979,
            235890394,
            235881961,
            235879314,
            235876924,
            235882981,
            236028314,
            235898937,
            235877137,
            235881599,
            235886820,
            235888590
        ],
        "B": [
            235864949,
            235883426,
            235872876,
            235865746,
            235868017,
            235866431,
            235870498,
            236028285,
            235870319,
            235871004,
            235871121,
            235872127,
            235871434,
            235867930,
            235865841,
            235901960,
            235870212,
            235875746,
            235875948,
            235874656
        ],
        "A": [
            235860107,
            235867323,
            235860491,
            235859890,
            235861006,
            235859799,
            235860028,
            235860311,
            235859823,
            235863201,
            235863210,
            235860674,
            236211486,
            235860837,
            235860015,
            235864893,
            235860651,
            235867283,
            235865532,
            235861983
        ]
    },
    "name": "B. YetnotherrokenKeoard",
    "statement": "Polycarp has a problem his laptop keyboard is broken.Now, when he\r\npresses the ” key, it acts like an unusual backspace: it deletes the\r\nlast (rightmost) lowercase letter in the typed string. If there are no\r\nlowercase letters in the typed string, then the press is completely\r\nignored.Similarly, when he presses the ” key, it deletes the last\r\n(rightmost) uppercase letter in the typed string. If there are no\r\nuppercase letters in the typed string, then the press is completely\r\nignored.In both cases, the letters ” and ” are not added to the typed\r\nstring when these keys are pressed.Consider an example where the\r\nsequence of key presses was \"\". In this case, the typed string will\r\nchange as follows:\r\nxrightarrow{\r\ntexttt{A}}\r\nxrightarrow{\r\ntexttt{R}}\r\nxrightarrow{\r\ntexttt{a}}\r\nxrightarrow{\r\ntexttt{B}}\r\nxrightarrow{\r\ntexttt{b}}\r\nxrightarrow{\r\ntexttt{b}}\r\nxrightarrow{\r\ntexttt{i}}\r\nxrightarrow{\r\ntexttt{t}}\r\nxrightarrow{\r\ntexttt{B}}\r\nxrightarrow{\r\ntexttt{a}}\r\nxrightarrow{\r\ntexttt{b}}\r\nxrightarrow{\r\ntexttt{y}} .Given a sequence of pressed keys, output the typed string\r\nafter processing all key presses.\r\n",
    "solutions": [
        "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<map>\n#include<array>\n#include<set>\n#include<map>\n#include<queue>\n#include<iomanip>\n#include<numeric>\nusing namespace std;\nint main() {\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0), cout.tie(0);\n\tint t;\n\tcin >> t;\n\tfor (; t--;) {\n\t\tstring x;\n\t\tcin >> x;\n\t\tvector<int>p0, p1;\n\t\tvector<bool>del(x.size(), 0);\n\t\tfor (int i = 0; i ^ x.size(); ++i) {\n\t\t\tchar c = x[i];\n\t\t\tif (c == 'b') {\n\t\t\t\tdel[i] = 1;\n\t\t\t\tif (p0.size())\n\t\t\t\t\tdel[p0.back()] = 1, p0.pop_back();\n\t\t\t}\n\t\t\telse if (c == 'B') {\n\t\t\t\tdel[i] = 1;\n\t\t\t\tif (p1.size())\n\t\t\t\t\tdel[p1.back()] = 1, p1.pop_back();\n\t\t\t}\n\t\t\telse if (c >= 'a' && c <= 'z')\n\t\t\t\tp0.emplace_back(i);\n\t\t\telse\n\t\t\t\tp1.emplace_back(i);\n\t\t}\n\t\tfor (int i = 0; i ^ x.size(); ++i) {\n\t\t\tif (del[i])\n\t\t\t\tcontinue;\n\t\t\tcout << x[i];\n\t\t}\n\t\tcout << '\\n';\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation",
        "strings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. YetnotherrokenKeoard.json",
    "editorial_link": "https://codeforces.com//blog/entry/123012",
    "editorial": "To solve the problem, it was necessary to quickly support deletions. For\r\nthis, one could maintain two stacks: one with the positions of uppercase\r\nletters and one with the positions of lowercase letters. Then, when\r\ndeleting, one needs to somehow mark that the character at this position\r\nshould not be output.Alternatively, one could reverse the original\r\nstring, then instead of deleting characters, they would simply need to\r\nbe skipped.\r\n",
    "hint": []
}