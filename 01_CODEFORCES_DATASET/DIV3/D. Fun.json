{
    "link": "https://codeforces.com//contest/1996/problem/D",
    "problemId": "2778591",
    "problem_idx": "D",
    "shortId": "1996D",
    "contest_number": "1996",
    "problem_submissions": {
        "G": [
            272815559,
            272903634,
            272903592,
            272903418,
            272850378,
            272829160,
            272846769,
            272917148,
            272843968,
            272801966,
            272891447,
            273051360,
            273051300,
            272852709,
            277596550
        ],
        "F": [
            272784299,
            272793161,
            272807689,
            272809360,
            272830969,
            272798046,
            272797379,
            272844703,
            272806635,
            272800919,
            272804361,
            272807242,
            272813027,
            272855036,
            272810332,
            272821433,
            272800404,
            272820587,
            272829162,
            272807664,
            272816226,
            272821599,
            272820591,
            272815918
        ],
        "E": [
            272768761,
            272775513,
            272762810,
            272775844,
            272823416,
            272782075,
            272761261,
            272777167,
            272789153,
            272785690,
            272777083,
            272786909,
            272772099,
            272795998,
            272776949,
            272765827,
            272789445,
            272789546,
            272779861,
            272787485
        ],
        "D": [
            272761438,
            272765354,
            272813661,
            272767517,
            272818911,
            272771177,
            272779573,
            272778986,
            272764786,
            272769566,
            272775352,
            272769622,
            272774700,
            272762959,
            272779115,
            272762141,
            272771898,
            272774147,
            272768381,
            272773685,
            272774940
        ],
        "C": [
            272749300,
            272751224,
            272747619,
            272760085,
            272816579,
            272747209,
            272749428,
            272754671,
            272751382,
            272753279,
            272756574,
            272752694,
            272753758,
            272752271,
            272750229,
            272749232,
            272759739,
            272751545,
            272748871,
            272750894
        ],
        "B": [
            272737073,
            272739985,
            272740771,
            272742756,
            272810526,
            272736341,
            272731072,
            272746867,
            272739153,
            272741965,
            272746544,
            272740783,
            272737062,
            272739328,
            272737959,
            272736354,
            272749397,
            272742081,
            272736698,
            272740417
        ],
        "A": [
            272724627,
            272725221,
            272724958,
            272806237,
            272724506,
            272723181,
            272724288,
            272724605,
            272723501,
            272737370,
            272725890,
            272725751,
            272728152,
            272725138,
            272723459,
            272723672,
            272729720,
            272724250,
            272726300
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131948",
    "editorial": "There are several solutions to this problem, The easiest way is to just fix either a\n, b\n or c\n. Let's fix a\n. Since ab+ac+bc?n\n, we know at the minimum, ab?n\n. Divide on both sides to get b?na\n. When a=1\n, there are n\n choices for b\n. When a=2\n, there are n2\n choices for b\n. So in total, there are n+n2+n3+...+nn\n total choices for b\n. This is just the harmonic series, so over all possible a\n, there are about nlogn\n choices for b\n. Therefore, we can afford to loop through both a\n and b\n.\n\nNow that we have a\n and b\n, all that's left is to solve for c\n. Let's solve for c\n in both equations. In the first equation, we can factor c\n out to obtain ab+c(a+b)?n\n. So, c?n?aba+b\n. In the second equation, c?x?a?b\n. Since we want the c\n to satisfy both inequalities, we must choose the stricter one. So, the number of possible c\n is min(n?aba+b,x?a?b)\n.\n\nThe answer is the sum of number of possible c\n over all possible a\n and b\n.",
    "name": "D. Fun",
    "statement": "satyam343Given two integers n and x, find the number of triplets (a,b,c)\r\nof such that ab + ac + bc\r\nle n and a + b + c\r\nle x. Note that order matters (e.g. (1, 1, 2) and (1, 2, 1) are treated\r\nas different) and a, b, c must be strictly greater than 0.\r\n",
    "solutions": [
        "/**   - dwuy - 　　　　　 ／＞　   フ　　　　　 | 　_　 _|　 　　　 ／`ミ _x ノ　　 　 /　　　 　 |　　　 /　  ヽ　　 ?　／￣|　　 |　|　|　| (￣ヽ＿_ヽ_)_)　＼二つ **/#include <bits/stdc++.h> #define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL)#define file(a) freopen(a\".inp\",\"r\",stdin); freopen(a\".out\", \"w\",stdout)#define fi first#define se second#define endl \"\\n\"#define len(s) (int)((s).size())#define MASK(k)(1LL<<(k))#define TASK \"test\"#define int long long using namespace std; typedef tuple<int, int, int> tpiii;typedef pair<double, double> pdd;typedef pair<int, int> pii;typedef long long ll; const long long OO = 1e18;const int MOD = 1e9 + 7;const int INF = 1e9;const int MX = 300005; int n, m, k, q;string s, t;int a[MX];int b[MX]; void solve(){    cin >> n >> m;    int ans = 0;        for(int i=1; i<=n; i++){        for(int j=i; j*i + i + j <= n && i + j + 1 <= m; j++){            int c = min(m - i - j, (n - i*j)/(i + j));            ans += c + (i != j? c : 0);        }    }    cout << ans << endl;} int32_t main(){    fastIO;    //file(TASK);     int q;    cin >> q;    while(q--){        solve();    }     return 0;}    "
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "combinatorics",
        "math",
        "number theory"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Fun.json",
    "hint": [
        "Hint 1 Bruteforce works, now analyse why it works.",
        "Hint 2 Sum of Harmonic series"
    ]
}