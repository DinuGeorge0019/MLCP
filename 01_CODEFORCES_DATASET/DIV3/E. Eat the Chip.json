{"link": "https://codeforces.com//contest/1921/problem/E", "problemId": "2427795", "problem_idx": "E", "shortId": "1921E", "contest_number": "1921", "problem_submissions": {"G": [241831050, 241827837, 241810477, 242123235, 241856864, 241856757, 241846360, 241844808, 241871322], "F": [241783186, 241781250, 241816532, 241785583, 241791384, 241804903, 241794317, 241794393, 241798773, 241768039, 241794044, 241853387, 241797954, 241801360, 241966488, 241966437, 241795377, 241807485, 241804479, 241771769, 241809604], "E": [241757922, 241820604, 241803155, 241764773, 241760055, 241766238, 241761128, 241758418, 241762380, 241791042, 241765829, 241852718, 241852234, 241772377, 241777235, 241766546, 241773883, 241777362, 241799105, 241776065], "C": [241743872, 241738511, 241782285, 241713771, 241731802, 241722543, 241723479, 241721384, 241731073, 241731927, 241733665, 241724987, 241731027, 241724748, 241725203, 241727491, 241738163, 241730878], "D": [241740026, 241755677, 241822282, 241733413, 241740126, 241836675, 241730048, 241743437, 241739467, 241740332, 241741717, 241747196, 241850173, 241850099, 241755029, 241745422, 241752838, 241742872, 241743137, 241722134, 241753020], "B": [241716338, 241724504, 241779126, 241723511, 241712900, 241714033, 241714226, 241710825, 241717515, 241711138, 241719732, 241714246, 241713725, 241711911, 241715371, 241717975, 241730046, 241720842], "A": [241704520, 241709611, 241777552, 241704978, 241704766, 241705020, 241706153, 241705013, 241708070, 241704538, 241706951, 241707445, 241704678, 241705172, 241707810, 241705881, 241707544, 241704527]}, "name": "E. Eat the Chip", "statement": "Alice and Bob are playing a game on a checkered board. The board has h\r\nrows, numbered from top to bottom, and w columns, numbered from left to\r\nright. Both players have a chip each. Initially, Alice\u2019s chip is located\r\nat the cell with coordinates (x_a, y_a) (row x_a, column y_a), and Bob\u2019s\r\nchip is located at (x_b, y_b). It is guaranteed that the initial\r\npositions of the chips do not coincide. Players take turns making moves,\r\nwith Alice starting.On her turn, Alice can move her chip one cell down\r\nor one cell down-right or down-left (diagonally). Bob, on the other\r\nhand, moves his chip one cell up, up-right, or up-left. It is not\r\nallowed to make moves that go beyond the board boundaries.More formally,\r\nif at the beginning of Alice\u2019s turn she is in the cell with coordinates\r\n(x_a, y_a), then she can move her chip to one of the cells (x_a + 1,\r\ny_a), (x_a + 1, y_a - 1), or (x_a + 1, y_a + 1). Bob, on his turn, from\r\nthe cell (x_b, y_b) can move to (x_b - 1, y_b), (x_b - 1, y_b - 1), or\r\n(x_b - 1, y_b + 1). The new chip coordinates (x\u2019, y\u2019) must satisfy the\r\nconditions 1\r\nle x\u2019\r\nle h and 1\r\nle y\u2019\r\nle w. Example game state. Alice plays with the white chip, Bob with the\r\nblack one. Arrows indicate possible moves. A player immediately wins if\r\nthey place their chip in a cell occupied by the other player\u2019s chip. If\r\neither player cannot make a move (Alice if she is in the last row, i.e.\r\nx_a = h, Bob if he is in the first row, i.e. x_b = 1), the game\r\nimmediately ends in a draw.What will be the outcome of the game if both\r\nopponents play optimally?\r\n", "solutions": ["#include<bits/stdc++.h>\n#define pb push_back\n#define pf push_front\n#define F first\n#define S second\n#define ff first\n#define ss second\n#define ll long long\n#define ull unsigned long long\n#define ld long double\n#define pll pair<ll,ll>\n#define plll pair<pll,ll>\n#define pllll pair<pll,pll>\n#define vl vector<ll>\n#define vll vector<pll>\n#define vlll vector<plll>\n#define vllll vector<pllll>\n#define vb vector<bool>\n#define sz size()\n#define fr front()\n#define all(x) (x).begin(), (x).end()\n#define rall(x) (x).rbegin(), (x).rend()\n#define bk back();\nusing namespace std;\nconst ld pi=3.14159265359;\nconst ll e5=1e5;\nconst ll e6=1e6;\nconst ll e9=1e9;\nconst ll inf=1e18;\nconst ll mod=1e9+7;\nconst ll mod2=998244353;\nconst ll N=1e5+5;\nll bpm(ll x,ll y,ll m){if(y==0)return 1%m;if(y==1)return x%m;ll p=bpm(x,y/2,m);\nif(y%2==0)return p*p%m;else return p*p%m*x%m;}\nll bp(ll x,ll y){if(y==0)return 1;if(y==1)return x;ll p=bp(x,y/2);\nif(y%2==0)return p*p;else return p*p*x;}\nvoid solve(/**/){\n    ll h,w,x1,y1,x2,y2;\n    cin>>h>>w>>x1>>y1>>x2>>y2;\n    if(abs(y1-y2)>x2-x1) cout<<\"Draw\";\n    else if((x2-x1)%2==1){\n        ll s=(x2-x1)/2;\n        if(max(1ll,y2-s)<max(1ll,y1-s-1) || min(w,y2+s)>min(w,y1+s+1)) cout<<\"Draw\";\n        else cout<<\"Alice\";\n    }else{\n        ll s=(x2-x1)/2;\n        if(max(1ll,y1-s)<max(1ll,y2-s) || min(w,y1+s)>min(w,y2+s)) cout<<\"Draw\";\n        else cout<<\"Bob\";\n    }\n    return;\n}\nint main(/*Aldk*/){\n    ios_base::sync_with_stdio(false);cin.tie(NULL);\n    //freopen(\".in\", \"r\", stdin);\n    //freopen(\".out\", \"w\", stdout);    \n    //cout<<setprecision(6)<<fixed;\n    ll T=1;\n    cin>>T;\n    for(ll i=1;i<=T;i++){\n        //cout<<\"Case #\"<<i<<\": \";\n        solve();\n        cout<<'\\n';\n    }\n    return 0;\n}"], "input": "", "output": "", "tags": ["brute force", "games", "greedy", "math"], "dificulty": "1600", "interactive": false}