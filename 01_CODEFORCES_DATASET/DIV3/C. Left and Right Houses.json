{"link": "https://codeforces.com//contest/1945/problem/C", "problemId": "2540238", "problem_idx": "C", "shortId": "1945C", "contest_number": "1945", "problem_submissions": {"G": [252240841, 252250866, 252420396, 252278722, 252525005, 252548158, 252390608, 252567317, 252552741], "E": [252219497, 252219260, 252213387, 252225102, 252223337, 252221318, 252228596, 252237032, 252235746, 252231786, 252228604, 252232973, 252223877, 252227459, 252232102, 252227652, 252224399, 252228708, 252219208, 252234028, 252232706, 252237279, 252235482], "F": [252212698, 252234280, 252233067, 252234341, 252240611, 252234408, 252239611, 252243237, 252244691, 252376596, 252238557, 252239689, 252241751, 252248456, 252244763, 252248686, 252238419, 252251638, 252253337, 252249409, 252253972, 252250630], "C": [252206245, 252207712, 252202451, 252208700, 252207454, 252210649, 252206365, 252207126, 252207020, 252209180, 252213309, 252203687, 252209170, 252214626, 252209187, 252244934, 252208556, 252217228, 252213088, 252217154], "D": [252198864, 252212223, 252207311, 252216917, 252210946, 252214851, 252215523, 252213673, 252211331, 252213241, 252218189, 252208559, 252214624, 252218088, 252216560, 252210697, 252213737, 252221839, 252218355, 252222523], "B": [252195700, 252203456, 252197691, 252195312, 252198069, 252200483, 252199692, 252199256, 252205068, 252202776, 252197737, 252197316, 252200847, 252199778, 252199654, 252195229, 252204485, 252203677, 252200862], "A": [252193249, 252196517, 252194020, 252193609, 252194534, 252195163, 252195841, 252195267, 252193567, 252198736, 252193769, 252193858, 252193912, 252195503, 252195367, 252193377, 252195907, 252194634, 252196929], "H": [252530309, 252556908]}, "name": "C. Left and Right Houses", "statement": "In the village of Letovo, there are n houses. The villagers decided to\r\nbuild a big road that will divide the village into left and right sides.\r\nEach resident wants to live on either the right or the left side of the\r\nstreet, which is described as a sequence a_1, a_2,\r\ndots, a_n, where a_j = 0 if the resident of the j-th house wants to live\r\non the left side of the street; otherwise, a_j = 1.The road will pass\r\nbetween two houses. The houses to the left of it will be declared the\r\nleft-side, and the houses to the right will be declared the right-side.\r\nMore formally, let the road pass between houses i and i+1. Then the\r\nhouses at positions between 1 and i will be on the side of the street,\r\nand at positions between i+1 and n will be on the side. The road also\r\npass before the first and after the last house; in this case, the entire\r\nvillage is declared to be either the right or left side, respectively.To\r\nmake the design fair, it was decided to lay the road so that at least\r\nhalf of the residents on each side of the village are satisfied with the\r\nchoice. That is, among x residents on one side, at least\r\nlceil\r\nfrac{x}{2}\r\nrceil should want to live on that side, where\r\nlceil x\r\nrceil denotes rounding up a real number x. Determine after which house i\r\nthe road should be laid in order to satisfy the described condition and\r\nbe as close to the middle of the village as possible. Formally, among\r\nall suitable positions i, minimize\r\nleft|\r\nfrac{n}{2} - i\r\nright|.If there are multiple suitable positions i with the minimum\r\nleft|\r\nfrac{n}{2} - i\r\nright|, output the smaller one.\r\n", "solutions": ["#ifdef LOCAL\n#define _GLIBCXX_DEBUG\n#endif\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ld = long double;\nconst ll INF = LLONG_MAX, MOD = 1e9 + 7, P = 239;\nconst ld PI = 3.1415926535897938462643383279502, EPS = 1e-7;\n\ntemplate <typename T>\ninline ll sz(const T &a) {\n    return a.size();\n}\n\ntemplate <typename T, typename C>\nistream &operator >> (istream &in, pair<T, C> &a) {\n    return in >> a.first >> a.second;\n}\n\ntemplate <typename T, typename C>\nostream &operator << (ostream &out, pair<T, C> a) {\n    return out << a.first << ' ' << a.second;\n}\n\ntemplate <typename T>\nistream & operator >> (istream &in, vector<T> &a) {\n    for (auto &i : a) {\n        in >> i;\n    }\n    return in;\n}\n\ntemplate <typename T>\nostream &operator << (ostream &out, vector<T> a) {\n    for (auto i : a) {\n        out << i << ' ';\n    }\n    return out;\n}\n\ntemplate <typename T>\nvoid print(vector<T> a, string c = \"\\n\") {\n    for (T i : a) {\n        cout << i << c;\n    }\n}\n\nvoid solve() {\n    ll n;\n    cin >> n;\n    string s;\n    cin >> s;\n    vector<ll> a(n);\n    for (int i = 0; i < n; ++i) {\n        a[i] = s[i] - '0';\n    }\n    vector<ll> pref(n + 1), pref0(n + 1);\n    for (int i = 1; i <= n; ++i) {\n        pref[i] = pref[i - 1] + a[i - 1];\n        pref0[i] = pref0[i - 1] + (a[i - 1] == 0);\n    }\n    vector<ll> ans;\n    for (int i = 0; i <= n; ++i) {\n        ll good_left = pref0[i];\n        ll good_right = pref[n] - pref[i];\n        if (good_left >= (i + 1) / 2 && good_right >= (n - i + 1) / 2) {\n            ans.push_back(i);\n        }\n    }\n    sort(ans.begin(), ans.end(), [&](ll f, ll s) {\n        return abs(n - 2 * f) < abs(n - 2 * s) || (abs(n - 2 * f) == abs(n - 2 * s) && f < s);\n    });\n    cout << ans[0];\n}\n\nsigned main() {\n#ifdef LOCAL\n    freopen(\"inp.txt\", \"r\", stdin);\n    freopen(\"out.txt\", \"w\", stdout);\n    freopen(\"err.txt\", \"w\", stderr);\n\n    auto start_time = clock();\n#endif\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int times = 1;\n    cin >> times;\n    while (times--)\n        solve(), cout << '\\n';\n\n#ifdef LOCAL\n    auto end_time = clock();\n    cerr << setprecision(3) << fixed << \"Execution time: \" << (end_time - start_time) * (int) 1e3 / CLOCKS_PER_SEC << \" ms\\n\";\n#endif\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force"], "dificulty": "1200", "interactive": false}