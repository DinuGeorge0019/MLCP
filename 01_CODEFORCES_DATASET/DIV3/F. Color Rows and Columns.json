{
    "link": "https://codeforces.com//contest/2000/problem/F",
    "problemId": "2814032",
    "problem_idx": "F",
    "shortId": "2000F",
    "contest_number": "2000",
    "problem_submissions": {
        "H": [
            276260761,
            276254307,
            276338511,
            276338125,
            276287387,
            276274340,
            276297740,
            276283267,
            276239793
        ],
        "G": [
            276214295,
            276274205,
            276334839,
            276268681,
            276267752,
            276333913,
            276264214,
            276282487,
            276272917,
            276276698,
            276277916,
            276283043,
            276274434,
            276291075,
            276278976,
            276290903,
            276279110,
            276279777
        ],
        "F": [
            276187296,
            276292316,
            276241660,
            276217578,
            276210913,
            276233999,
            276287795,
            276243858,
            276234274,
            276242694,
            276256602,
            276245569,
            276246137,
            276247924,
            276245207,
            276252538,
            276247124,
            276252754
        ],
        "E": [
            276164357,
            276333842,
            276186649,
            276185811,
            276179141,
            276203373,
            276182533,
            276188814,
            276185638,
            276210532,
            276225686,
            276198909,
            276209550,
            276178261,
            276202986,
            276227179,
            276202989,
            276229818,
            276227160
        ],
        "D": [
            276136722,
            276189642,
            276169653,
            276164982,
            276157636,
            276177807,
            276157222,
            276166197,
            276153213,
            276123696,
            276151555,
            276167672,
            276198896,
            276149967,
            276172892,
            276184459,
            276158053,
            276189336,
            276175071,
            276189558
        ],
        "C": [
            276127716,
            276172717,
            276135515,
            276132005,
            276139984,
            276155253,
            276134367,
            276142615,
            276142046,
            276180920,
            276133384,
            276141737,
            276151150,
            276139308,
            276147822,
            276167768,
            276145316,
            276158457,
            276159660,
            276137717
        ],
        "B": [
            276113898,
            276143388,
            276119169,
            276116606,
            276127808,
            276130717,
            276117856,
            276125745,
            276187672,
            276126451,
            276118391,
            276127646,
            276126167,
            276125801,
            276113780,
            276142176,
            276122501,
            276133620,
            276118200,
            276121342
        ],
        "A": [
            276110192,
            276136464,
            276111783,
            276110916,
            276119966,
            276120191,
            276111146,
            276116630,
            276117760,
            276111077,
            276112237,
            276116291,
            276115237,
            276115760,
            276110510,
            276123000,
            276110417,
            276117261,
            276112340,
            276130762
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132689",
    "editorial": "We will use the idea from the knapsack problem: let be the minimum\r\nnumber of operations required to achieve points using the first\r\nrectangles.To calculate the next value, we will iterate over the number\r\nof points scored in the -th rectangle. To count the number of\r\noperations, we note that it is always better to paint the outer row of\r\nthe smaller side of the unpainted part of the rectangle (which may\r\nchange after painting the row).\r\n",
    "name": "F. Color Rows and Columns",
    "statement": "You have n rectangles, the i-th of which has a width of a_i and a height\r\nof b_i.You can perform the following operation an unlimited number of\r\ntimes: choose a rectangle and a cell in it, and then color it.Each time\r\nyou completely color any row or column, you earn 1 point. Your task is\r\nto score at least k points with as few operations as possible.Suppose\r\nyou have a rectangle with a width of 6 and a height of 3. You can score\r\n4 points by coloring all the cells in any 4 columns, thus performing 12\r\noperations.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#include<array>using namespace std;#define ll long long//#define int long long#define y1 idfsu#define PII pair<int, int>#define fi first#define se second#define endl \"\\n\"const int MAX = 1e9;const int MAXN = 1e6 + 10;const int mod = 1e9 + 7;const int N = 200010;int aa[2][110];void solve(){    int n, k;    cin >> n >> k;    for (int i = 1; i <= k+1; i++)        aa[0][i] = 1e9;    int now = 0, nt = 1;    for (int i = 1; i <= n; i++)    {        for (int j = 1; j <= k+1; j++)            aa[nt][j] = aa[now][j];        int a, b;        cin >> a >> b;        if (a < b)            swap(a, b);        int sum = 0, gs = 0;        while (b)        {            sum += b;            gs++;            a--;            if (a == 0)                gs++;            if (a < b)                swap(a, b);            for (int j = k+1; j >= gs; j--)                aa[nt][j] = min(aa[nt][j], aa[now][j - gs] + sum);        }        now = nt, nt ^= 1;    }    if (aa[now][k] == 1e9&&aa[now][k+1]==1e9)        cout << -1 << endl;    else        cout << min(aa[now][k+1],aa[now][k]) << endl;}signed main(){    ios::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);    int T = 1;    cin >> T;    while (T--)        solve();    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Color Rows and Columns.json",
    "hint": []
}