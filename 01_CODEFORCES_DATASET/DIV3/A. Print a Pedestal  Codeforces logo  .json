{
    "link": "https://codeforces.com//contest/1690/problem/A",
    "problemId": "1423049",
    "problem_idx": "A",
    "shortId": "1690A",
    "contest_number": "1690",
    "problem_submissions": {
        "F": [
            159806986,
            159794535,
            159803560,
            159795356,
            159803611,
            159810003,
            161958741,
            159901379,
            159799120,
            159805990,
            159805447,
            159834670,
            159815479,
            159815758,
            159832304,
            159791660,
            159812232,
            159823656,
            159820324,
            159819489,
            159793231,
            159818514
        ],
        "G": [
            159789082,
            159825164,
            159831504,
            159831419,
            159832391,
            159839709,
            159834673,
            159846076,
            159851606,
            159849999,
            159835741,
            159843351,
            159856244,
            159825213,
            159841650,
            159850090,
            159841330,
            159847201,
            159833351,
            159855753
        ],
        "E": [
            159767819,
            159765301,
            159753624,
            159775193,
            159777984,
            159782869,
            159901400,
            159779470,
            159776567,
            159781160,
            159789988,
            159788967,
            159791938,
            159787307,
            159768121,
            159785541,
            159787298,
            159790761,
            159810098,
            159800474,
            159767523,
            159788062
        ],
        "D": [
            159735426,
            159753255,
            159744844,
            159759311,
            159761856,
            159749129,
            159760845,
            159762141,
            159745073,
            159747365,
            159767078,
            159764956,
            159753841,
            159768103,
            159754604,
            159758954,
            159769246,
            159761854,
            159752872,
            159766823
        ],
        "A": [
            159733481,
            159728723,
            159728980,
            159730869,
            159729579,
            159730292,
            159735804,
            159735374,
            159729478,
            159730047,
            159903613,
            159739525,
            159731331,
            159729145,
            159767995,
            159729359,
            159733585,
            159735989,
            159738194,
            159732884,
            159737457
        ],
        "B": [
            159731273,
            159733842,
            159733916,
            159746458,
            159736988,
            159735973,
            159743542,
            159743382,
            159735141,
            159735777,
            159750550,
            159745379,
            159735239,
            159770854,
            159740998,
            159742110,
            159755056,
            159746312,
            159757832,
            159745537
        ],
        "C": [
            159728882,
            159740086,
            159737931,
            159750746,
            159754739,
            159743933,
            159755874,
            159756762,
            159741517,
            159742259,
            159760507,
            159757905,
            159746715,
            159768067,
            159748475,
            159749851,
            159762561,
            159752246,
            159835353,
            159760474
        ]
    },
    "name": "A. Print a Pedestal  Codeforces logo  ",
    "statement": "Given the integer n the number of available blocks. You must use blocks\r\nto build a . The consists of 3 platforms for 2-nd, 1-st and 3-rd places\r\nrespectively. The platform for the 1-st place must be higher than for\r\nthe 2-nd place, and the platform for the 2-nd place must be higher than\r\nfor the 3-rd place. Also, the height of each platform must be greater\r\nthan zero (that is, each platform must contain at least one block).\r\nAmong all possible pedestals of n blocks, deduce one such that the\r\nplatform height for the 1-st place as possible. If there are several of\r\nthem, output any of them.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int inf = 1'000'000'001;\nconst int infll = (inf - 1) * (inf - 1) + 1;\nconst int mod = inf + 6;\nvoid solve(){\n    int n;\n    cin >> n;\n    int on = n;\n    n -= 3 * ((n - 3) / 3);\n    vector<int> ans = {inf, inf, inf};\n    for (int f = 0; f <= n; f++){\n        for (int s = 0; s <= n; s++){\n            for (int t = 0; t <= n; t++){\n                if (f + s + t != n){\n                    continue;\n                }\n                vector<int> a(3);\n                a[0] = a[1] = a[2] = (on - 3) / 3;\n                a[0] += f, a[1] += s, a[2] += t;\n                if (a[1] > a[0] && a[0] > a[2] && a[1] < ans[1]){\n                    ans = a;\n                }\n            }\n        }\n    }\n    cout << ans[0] << \" \" << ans[1] << \" \" << ans[2] << \"\\n\";\n}\nint32_t main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n    int t = 1;\n    cin >> t;\n    while (t--){\n        solve();\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Print a Pedestal  Codeforces logo  .json",
    "editorial_link": "https://codeforces.com//blog/entry/103658",
    "editorial": "In the constraints, the problem can be solved by brute force: we will go\r\nthrough the value for (the height for the first place), and then select\r\nsuitable values for and . Since , we divide the remaining blocks equally\r\nbetween and . If it turns out that , then we try to decrease by and\r\nincrease by 1. If we get the right answer (), output the heights and\r\nstop the process. We will go through the value of in order of\r\nincreasing.\r\n",
    "hint": []
}