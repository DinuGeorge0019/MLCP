{
    "link": "https://codeforces.com//contest/1385/problem/B",
    "problemId": "675199",
    "problem_idx": "B",
    "shortId": "1385B",
    "contest_number": "1385",
    "problem_submissions": {
        "G": [
            87146925,
            87130516,
            87130073,
            87149307,
            87139436,
            87145109,
            87113469,
            87137001,
            87178119,
            87121112
        ],
        "F": [
            87133863,
            87148212,
            87150419,
            87133069,
            87155521,
            87156261,
            87129136,
            87201006,
            87199143,
            87198211,
            87198141,
            87197991,
            87133163,
            87135084,
            87147650,
            87153475,
            87157087,
            87159161,
            87143942,
            87140750,
            87158980
        ],
        "E": [
            87121743,
            87094311,
            87150777,
            87112227,
            87117131,
            87137692,
            87154530,
            87109484,
            87118031,
            87151551,
            87126695,
            87130754,
            87122234,
            87145112,
            87156780,
            87154434,
            87141435,
            87122925,
            87129785
        ],
        "D": [
            87114357,
            87136398,
            87136307,
            87098537,
            87103655,
            87133732,
            87148068,
            87097110,
            87107447,
            87106449,
            87137139,
            87106363,
            87103887,
            87118780,
            87124754,
            87090612,
            87122982,
            87110063,
            87101408,
            87100549
        ],
        "C": [
            87087119,
            87083714,
            87087183,
            87094082,
            87125584,
            87140844,
            87089726,
            87089545,
            87092040,
            87111442,
            87085820,
            87088762,
            87103769,
            87110798,
            87107696,
            87084280,
            87087235,
            87089175,
            87090633
        ],
        "B": [
            87082211,
            87084609,
            87082372,
            87086099,
            87118271,
            87134332,
            87085669,
            87082094,
            87085708,
            87097473,
            87081944,
            87080519,
            87090484,
            87088911,
            87082077,
            87081415,
            87081680,
            87080910,
            87083097
        ],
        "A": [
            87080978,
            87081308,
            87080529,
            87081521,
            87116439,
            87133004,
            87083295,
            87081194,
            87080773,
            87082296,
            87080859,
            87090051,
            87086698,
            87082297,
            87102822,
            87093275,
            87080753,
            87080503,
            87081225
        ]
    },
    "name": "B. Restore the Permutation by Merger",
    "statement": "A permutation of length n is a sequence of integers from 1 to n of\r\nlength n containing each number exactly once. For example, [1], [4, 3,\r\n5, 1, 2], [3, 2, 1] are permutations, and [1, 1], [0, 1], [2, 2, 1, 4]\r\nare not.There was a permutation p[1\r\ndots n]. It was merged with itself. In other words, let\u2019s take two\r\ninstances of p and insert elements of the second p into the first\r\nmaintaining relative order of elements. The result is a sequence of the\r\nlength 2n.For example, if p=[3, 1, 2] some possible results are: [3, 1,\r\n2, 3, 1, 2], [3, 3, 1, 1, 2, 2], [3, 1, 3, 1, 2, 2]. The following\r\nsequences are not possible results of a merging: [1, 3, 2, 1, 2, 3], [3,\r\n1, 2, 3, 2, 1], [3, 3, 1, 2, 2, 1].For example, if p=[2, 1] the possible\r\nresults are: [2, 2, 1, 1], [2, 1, 2, 1]. The following sequences are not\r\npossible results of a merging: [1, 1, 2, 2], [2, 1, 1, 2], [1, 2, 2,\r\n1].Your task is to restore the permutation p by the given resulting\r\nsequence a. It is guaranteed that the answer .You have to answer t\r\nindependent test cases.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint t, n, a[6969];\nbitset <6969> done;\n\nint main() {\n  cin >> t;\n  while (t--) {\n    cin >> n;\n    for (int i = 1; i <= n + n; ++i) {\n      scanf(\"%d\", a + i);\n    }\n    done.reset();\n    for (int i = 1; i <= n + n; ++i) {\n      if (done[a[i]]) continue;\n      printf(\"%d \", a[i]); done[a[i]] = 1;\n    }\n    puts(\"\");\n  }\n  return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Restore the Permutation by Merger.json",
    "editorial_link": "https://codeforces.com//blog/entry/80257",
    "editorial": "The solution is pretty simple: it\u00e2\u0080\u0099s obvious that the first element of is\r\nthe first element of the permutation . Let\u00e2\u0080\u0099s take it to , remove it and\r\nits its copy from . So we just have the smaller problem and can solve it\r\nin the same way. It can be implemented as \"go from left to right, if the\r\ncurrent element isn\u00e2\u0080\u0099t used, take it and mark it\u00e2\u0080\u0099s used\".\r\n"
}