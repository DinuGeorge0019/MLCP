{
    "link": "https://codeforces.com//contest/1800/problem/B",
    "problemId": "1805843",
    "problem_idx": "B",
    "shortId": "1800B",
    "contest_number": "1800",
    "problem_submissions": {
        "G": [
            195662820,
            195690940,
            195777313,
            195690603,
            196524855,
            196524658,
            196522076,
            195943836
        ],
        "F": [
            195638235,
            195668644,
            195626028,
            195643554,
            195664067,
            195653332,
            195675061,
            195673007,
            195816880,
            195814809,
            195671424,
            195665257,
            195659551,
            195670175,
            195698092,
            195680883,
            195680676,
            195689427,
            195669351,
            195693466
        ],
        "E2": [
            195612538,
            195639973,
            195612785,
            195633454,
            195608323,
            195629403,
            195623425,
            195629463,
            195626230,
            195629563,
            195651082,
            195630357,
            195636943,
            195619592,
            195639486,
            195641374,
            195638209,
            195651098,
            195639224
        ],
        "E1": [
            195609573,
            195639721,
            195612247,
            195613343,
            195609699,
            195630410,
            195623568,
            195625383,
            195625931,
            195618740,
            195651326,
            195630926,
            195636711,
            195618856,
            195639041,
            195641167,
            195628893,
            195650180,
            195639842
        ],
        "D": [
            195596585,
            195625770,
            195604693,
            195600193,
            195602000,
            195612110,
            195610320,
            195609709,
            195602062,
            195607762,
            195620848,
            195616904,
            195612803,
            195606522,
            195616372,
            195614847,
            195609456,
            195614238,
            195614684
        ],
        "C1": [
            195590954,
            195626345,
            195594910,
            195589947,
            195592829,
            195604029,
            195596848,
            195599696,
            195593933,
            195600094,
            195594609,
            195604030,
            195599932,
            195600191,
            195602733,
            195597615,
            195601757,
            195596127,
            195599897
        ],
        "C2": [
            195590683,
            195596363,
            195594725,
            195589578,
            195592485,
            195603666,
            195596587,
            195600171,
            195594252,
            195601050,
            195594186,
            195603461,
            195599812,
            195600859,
            195603073,
            195597061,
            195601904,
            195595910,
            195599331
        ],
        "A": [
            195587296,
            195585153,
            195582408,
            195584101,
            195582608,
            195583278,
            195583402,
            195582928,
            195582330,
            195583356,
            195582358,
            195587162,
            195585218,
            195584435,
            195584152,
            195585315,
            195585448,
            195583944,
            195583542
        ],
        "B": [
            195584191,
            195590087,
            195587727,
            195584989,
            195586915,
            195590416,
            195592972,
            195589242,
            195592390,
            195586361,
            195594730,
            195594317,
            195594021,
            195589463,
            195590127,
            195591494,
            195591394,
            195590938
        ]
    },
    "name": "B. Count the Number of Pairs",
    "statement": "Kristina has a string s of length n, consisting only of lowercase and\r\nuppercase Latin letters. For each pair of lowercase letter and its\r\nmatching uppercase letter, Kristina can get 1 burl. However, pairs of\r\ncharacters cannot overlap, so each character can only be in one pair.For\r\nexample, if she has the string s = \"aAaaBACacbE\", she can get a burl for\r\nthe following character pairs: s_1 = \"a\" and s_2 = \"A\" s_4 = \"a\" and s_6\r\n= \"A\" s_5 = \"B\" and s_{10} = \"b\" s_7= \"C\" and s_9 = \"c\" Kristina wants\r\nto get more burles for her string, so she is going to perform no more\r\nthan k operations on it. In one operation, she can: either select the\r\nlowercase character s_i (1\r\nle i\r\nle n) and make it uppercase. or select uppercase character s_i (1\r\nle i\r\nle n) and make it lowercase. For example, when k = 2 and s =\r\n\"aAaaBACacbE\" it can perform one operation: choose s_3 = \"a\" and make it\r\nuppercase. Then she will get another pair of s_3 = \"A\" and s_8 = \"a\"Find\r\nnumber of burles Kristina can get for her string.\r\n",
    "solutions": [
        "// I am teacher of MakaPakka\n// LOUGI_ID:643723\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(x,y) for(int x=0;x<(y);x++)\ninline int in(){\n  int x;\n  cin >> x;\n  return x;\n}\nint f[2][26];\nvoid solve(){\n  int n=in(),k=in();\n  string s;cin>>s;\n  rep(i,2)rep(j,26)f[i][j]=0;\n  for(char& ch:s){\n    if('a'<=ch&&ch<='z')f[0][ch-'a']++;\n    else f[1][ch-'A']++;\n  }\n  int ans=0;\n  for(int i=0;i<26;i++){\n    int xd=min(f[0][i],f[1][i]);\n    ans+=xd;\n    int extra=f[0][i]+f[1][i]-xd-xd;\n    ans+=min(k,extra/2);\n    k-=min(k,extra/2);\n  }\n  cout<<ans<<\"\\n\";\n}\nint main(){\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int T = 1;\n  cin >> T;\n  while(T--) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "strings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Count the Number of Pairs.json",
    "editorial_link": "https://codeforces.com//blog/entry/113477",
    "editorial": "Count two arrays and , such that contains the number of occurrences of\r\nth letter of the alphabet in the string in upper case, while in lower\r\ncase.Letâs add all existing pairs to the answer, so letâs add to it for\r\neach letter. Subtract this minimum from and to get the number of\r\nunpaired identical letters.Next, we will act greedily: if there is some\r\nset of at least two identical letters in the same case, we can apply the\r\noperation to half of them and get new pairs. Therefore, for each letter\r\nwe will add to the answer and decrease by that amount.\r\n",
    "hint": []
}