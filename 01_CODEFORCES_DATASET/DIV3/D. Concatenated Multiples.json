{
    "link": "https://codeforces.com//contest/1029/problem/D",
    "problemId": "211259",
    "problem_idx": "D",
    "shortId": "1029D",
    "contest_number": "1029",
    "problem_submissions": {
        "F": [
            42047829,
            42034824,
            42039218,
            42045140,
            42050850,
            42057641,
            42355180,
            42049291,
            42049170,
            42057320,
            42157687,
            42044089,
            42546658,
            42048831,
            42049225,
            42048355,
            42061045,
            42061015
        ],
        "E": [
            42043766,
            42041583,
            42051097,
            42052718,
            42057627,
            42056052,
            42145593,
            42070440,
            42053184,
            42057293
        ],
        "D": [
            42037124,
            55325923,
            42076677,
            42050558,
            42365691,
            42365676,
            42365497,
            42365477,
            42365258,
            42365242,
            42365230,
            42365081,
            42364971,
            42364957,
            42364791,
            42356686,
            42356662,
            42356121,
            42356098,
            42356090,
            42356074,
            42355955,
            42355933,
            42355895,
            42355839,
            42355815,
            42355732,
            42355678,
            42042982,
            42045076,
            42143765,
            42043950,
            42072305,
            42083814,
            42075124,
            42052333,
            42052607,
            42052955
        ],
        "B": [
            42031994,
            42043199,
            42035507,
            42029721,
            42032248,
            42032998,
            42057919,
            42057314,
            42036457,
            42033868,
            42032775,
            42032090,
            42031079,
            42035681,
            42032483,
            42034211,
            53975070,
            42033101,
            42031960,
            42034275,
            42035033,
            42032988
        ],
        "A": [
            42030943,
            42032428,
            42030337,
            42031598,
            42030794,
            42031593,
            42030225,
            42057135,
            42032959,
            42032163,
            42030490,
            42030591,
            42029747,
            42032386,
            42029916,
            42032324,
            42075267,
            42030907,
            42030283,
            42032164,
            42032054,
            42031161
        ],
        "C": [
            42049735,
            42046367,
            42031881,
            42035737,
            42041787,
            42040163,
            42049039,
            42037198,
            42037422,
            42033541,
            42040258,
            42044533,
            42039967,
            42042410,
            42036447,
            42044633,
            42041967,
            42040799
        ]
    },
    "name": "D. Concatenated Multiples",
    "statement": "You are given an array a, consisting of n positive integers.Let\u2019s call a\r\nconcatenation of numbers x and y the number that is obtained by writing\r\ndown numbers x and y one right after another without changing the order.\r\nFor example, a concatenation of numbers 12 and 3456 is a number\r\n123456.Count the number of ordered pairs of positions (i, j) (i\r\nneq j) in array a such that the concatenation of a_i and a_j is\r\ndivisible by k.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define pb push_back\n#define INF 1000000005\n#define LINF 1000000000000000005\n#define MAXN 100005\n#define pi pair<int,int>\n#define pl pair<ll,ll>\n#define int ll\n\nint n,a[200005],k,c[200005],ans,b[200005];\n\nint cntc(int x){\n    int ans=0;\n    while(x) ans++,x/=10;\n    return ans;\n}\n\nmap <int,int> m;\n\nint op(int x){\n    x%=k;\n    if(x) return k-x;\n    else return 0;\n}\n\nint32_t main(){\n    ios_base :: sync_with_stdio(0);\n    cin >> n >> k;\n    for(int i=1;i<=n;i++){\n        cin >> a[i]; b[i]=a[i];\n        c[i]=cntc(a[i]);\n    }\n    for(int i=1;i<=10;i++){\n        m.clear();\n        for(int j=1;j<=n;j++) b[j]*=10,b[j]%=k,m[b[j]]++;\n        for(int j=1;j<=n;j++){\n            if(c[j]==i){\n                ans+=m[op(a[j])];\n                if(b[j]==op(a[j])) ans--;\n            }\n        }\n    }\n    cout << ans;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Concatenated Multiples.json",
    "editorial_link": "https://codeforces.com/blog/entry/61439",
    "editorial": "Let\u00e2\u0080\u0099s rewrite concatenation in a more convenient form. , where is the\r\nnumber of digits in . Then this number is divisible by if and only if\r\nthe sum of () and () is either or .Let\u00e2\u0080\u0099s calculate arrays of remainders\r\n. For each adds () to . That\u00e2\u0080\u0099s the first term of the sum.Now iterate\r\nover the second term, for and for you binary search for () in . The\r\nnumber of its occurrences should be added to answer.You also might have\r\ncalculated some pairs , iterate over them and subtract them\r\nnaively.Overall complexity: .\r\n"
}