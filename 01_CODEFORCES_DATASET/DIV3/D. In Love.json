{
    "link": "https://codeforces.com//contest/1883/problem/D",
    "problemId": "2278975",
    "problem_idx": "D",
    "shortId": "1883D",
    "contest_number": "1883",
    "problem_submissions": {
        "E": [
            229254391,
            229228116,
            229229123,
            229229517,
            229233192,
            229225859,
            229230943,
            229238433,
            229232300,
            229233333,
            229233942,
            229263811,
            229236033,
            229236789,
            229237333,
            232949915,
            229218375,
            229241000,
            229246670
        ],
        "F": [
            229246429,
            229232660,
            229238625,
            229233199,
            229237512,
            229241178,
            229249370,
            229237347,
            229246925,
            229236557,
            229248336,
            229241012,
            229242598,
            229250481,
            229269234,
            229251378,
            232949748,
            229222527,
            229246156,
            229254662
        ],
        "G2": [
            229234009,
            229254791,
            229266437,
            229254654,
            229255057,
            229265822,
            229259707,
            229267425,
            229264812,
            229264031,
            229272506,
            229274536,
            229255952,
            229271136,
            229260211,
            229270293,
            232949665,
            229301663,
            229269692,
            229270153
        ],
        "G1": [
            229219524,
            229255068,
            229244230,
            229249885,
            229247413,
            229253349,
            229238825,
            229266363,
            229254833,
            229263379,
            229254509,
            229274732,
            229249349,
            229257348,
            229245372,
            229258069,
            232949701,
            229234873,
            229255834,
            229262816
        ],
        "C": [
            229213933,
            229214044,
            229209127,
            229216055,
            229214618,
            229213072,
            229215254,
            229214649,
            229223998,
            229215021,
            229215102,
            229214748,
            229219318,
            229218539,
            229216356,
            232950046,
            232950017,
            229210060,
            229232319,
            229224513
        ],
        "D": [
            229213159,
            229218603,
            229213694,
            229223552,
            229218966,
            229217944,
            229218306,
            229218892,
            229224727,
            229227006,
            229220642,
            229221160,
            229233957,
            229224237,
            229229032,
            229232139,
            232949956,
            229214096,
            229236853,
            229237124
        ],
        "A": [
            229205950,
            229205653,
            229203982,
            229205587,
            229204174,
            229205183,
            229204022,
            229204395,
            229217540,
            229206219,
            229206377,
            229205661,
            229204875,
            229205824,
            229205309,
            232950152,
            229204753,
            229214596,
            229210814
        ],
        "B": [
            229205861,
            229208946,
            229205494,
            229209640,
            229210752,
            229208113,
            229209050,
            229207130,
            229220907,
            229209362,
            229209632,
            229208425,
            229209627,
            229209608,
            229210310,
            232950093,
            229206777,
            229217319,
            229218711
        ]
    },
    "name": "D. In Love",
    "statement": "Initially, you have an empty multiset of segments. You need to process q\r\noperations of two types: + l r Add the segment (l, r) to the multiset, -\r\nl r Remove one segment (l, r) from the multiset. It is guaranteed that\r\nthis segment exists in the multiset.After each operation, you need to\r\ndetermine if there exists a pair of segments in the multiset that do not\r\nintersect. A pair of segments (l, r) and (a, b) do not intersect if\r\nthere does not exist a point x such that l\r\nleq x\r\nleq r and a\r\nleq x\r\nleq b.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\n\nvoid solve()\n{\n    int n, l, r; cin>>n;\n    char c;\n\n    multiset<int> sts, ends;\n    while(n--)\n    {\n        cin>>c>>l>>r;\n        if(c == '+')sts.insert(l), ends.insert(r);\n        else sts.erase(sts.find(l)), ends.erase(ends.find(r));\n\n        if(ends.size() && *ends.begin() < *sts.rbegin())cout<<\"YES\\n\";\n        else cout<<\"NO\\n\";\n    }\n}\n\nsigned main()\n{\n    int t = 1;\n    while(t--)solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. In Love.json",
    "editorial_link": "https://codeforces.com//blog/entry/121621",
    "editorial": "Let\u00e2\u0080\u0099s learn how to solve the problem for a fixed set. The claim is that\r\nif the answer exists, we can take the segment with the minimum right\r\nboundary and the maximum left boundary (let\u00e2\u0080\u0099s denote these boundaries as\r\nand ). Therefore, if , it is obvious that this pair of segments is\r\nsuitable for us. Otherwise, all pairs of segments intersect because they\r\nhave common points in the range .Now let\u00e2\u0080\u0099s maintain all our operations.\r\nFor this, we can simply store a multiset of left and right boundaries.\r\nWith the help of this multiset, we can find the minimum and maximum\r\nelements of any of these sets in . The addition and removal operations\r\nare also supported by this container.\r\n"
}