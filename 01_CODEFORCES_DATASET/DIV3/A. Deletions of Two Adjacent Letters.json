{
    "link": "https://codeforces.com//contest/1650/problem/A",
    "problemId": "1321160",
    "problem_idx": "A",
    "shortId": "1650A",
    "contest_number": "1650",
    "problem_submissions": {
        "F": [
            148879513,
            148986538,
            148986467,
            148954476,
            148898287,
            148901435,
            148899333,
            148905510,
            148917052,
            148904349,
            148961796
        ],
        "E": [
            148849636,
            148864683,
            148963130,
            148875756,
            148872079,
            148878903,
            148875510,
            148901218,
            148892416,
            148888540,
            148898231,
            148888980,
            148883282,
            148898577,
            148883163,
            148907542,
            148907274,
            148906672,
            148906320,
            148893084,
            148887495,
            148892756,
            148872442,
            148863112
        ],
        "D": [
            148826882,
            148840222,
            148845807,
            148854912,
            148854752,
            148856728,
            148840985,
            148865410,
            148852435,
            148848691,
            148844798,
            148864773,
            148844781,
            148864322,
            148875613,
            148870696,
            148859219,
            148920116,
            148876044,
            148839258,
            148838584
        ],
        "C": [
            148820093,
            148831170,
            148831813,
            148836720,
            148830087,
            148836086,
            148827090,
            148852471,
            148837137,
            148831426,
            148825553,
            148845906,
            148830527,
            148848884,
            148845635,
            148848540,
            148844404,
            148859460,
            148825220,
            148833443
        ],
        "B": [
            148812353,
            148815870,
            148817423,
            148824929,
            148816344,
            148818724,
            148809035,
            148821547,
            148823462,
            148821683,
            148815397,
            148837950,
            148818597,
            148837067,
            163337223,
            148830901,
            148832514,
            148848552,
            148825246,
            148813545,
            148824771
        ],
        "A": [
            148807991,
            148808027,
            148809803,
            148809976,
            148810949,
            148808067,
            148809583,
            148816565,
            148811698,
            148808085,
            148807871,
            148819883,
            148808075,
            148829522,
            148809900,
            148814537,
            148809886,
            148812702,
            148807945,
            148820895
        ],
        "G": [
            148891310,
            148885828,
            148904919,
            148896469,
            148883806,
            148899609,
            148903599,
            148896840,
            148894409,
            148919593,
            148886999,
            148901688,
            148905478
        ]
    },
    "name": "A. Deletions of Two Adjacent Letters",
    "statement": "The string s is given, the string length is number. The string consists\r\nof lowercase letters of the Latin alphabet.As long as the string length\r\nis greater than 1, the following operation can be performed on it:\r\nselect any two adjacent letters in the string s and delete them from the\r\nstring. For example, from the string \"\" in one operation, you can get\r\nany of the four strings: \"\", \"\", \"\" or \"\" In particular, in one\r\noperation, the length of the string reduces by 2.Formally, let the\r\nstring s have the form s=s_1s_2\r\ndots s_n (n>1). During one operation, you choose an arbitrary index i (1\r\nle i < n) and replace s=s_1s_2\r\ndots s_{i-1}s_{i+2}\r\ndots s_n.For the given string s and the letter c, determine whether it\r\nis possible to make such a sequence of operations that in the end the\r\nequality s=c will be true? In other words, is there such a sequence of\r\noperations that the process will end with a string of length 1, which\r\nconsists of the letter c?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> pi;\nvoid solve(){\n\tstring s; cin>>s;\n\tchar ch; cin>>ch;\n\tint sz = s.length();\n\tfor(int i=0; i<sz; i+=2){\n\t\tif(s[i]==ch){\n\t\t\tcout<<\"YES\"<<'\\n';\n\t\t\treturn;\n\t\t}\n\t}\n\tcout<<\"NO\"<<'\\n';\n}\nint main(){\n\tios_base::sync_with_stdio(false); cin.tie(NULL);\n\tint t = 1;\n\tcin >> t;\n\twhile(t--) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Deletions of Two Adjacent Letters.json",
    "editorial_link": "https://codeforces.com//blog/entry/100712",
    "editorial": "There will be one character left in the end, so we have to delete all\r\nthe characters going before and after it. That is, delete some prefix\r\nand suffix. Since we always delete some substring of length , we can\r\nonly delete the prefix and suffix of even length, it means the answer is\r\nin the case when there is an odd position in with the character and\r\notherwise.\r\n",
    "hint": []
}