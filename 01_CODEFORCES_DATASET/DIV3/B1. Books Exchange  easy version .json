{
    "link": "https://codeforces.com//contest/1249/problem/B1",
    "problemId": "447558",
    "problem_idx": "B1",
    "shortId": "1249B1",
    "contest_number": "1249",
    "problem_submissions": {
        "F": [
            63172408,
            63252026,
            63175429,
            63171983,
            63178449,
            63188348,
            63193416,
            63193368,
            63195011,
            69268865
        ],
        "E": [
            63161648,
            63161142,
            63155293,
            63168564,
            63183626,
            63170661,
            63178157,
            63147220,
            63160832,
            63164442,
            63162319,
            63163127,
            63161620,
            63169150,
            63158868,
            63166581,
            63166074,
            63872232,
            63872063,
            63864039,
            63863655,
            63183869,
            63172611
        ],
        "D2": [
            63157164,
            63157031,
            63151986,
            63179972,
            63178191,
            63150473,
            63149837,
            63165541,
            63155673,
            63158427,
            63157157,
            63159529,
            63165621,
            63157444,
            63163488,
            63165452,
            63163182,
            63158691,
            63160450,
            63167522
        ],
        "D1": [
            63157014,
            63157572,
            63148296,
            63180024,
            63178362,
            63150834,
            63150131,
            63159542,
            63156407,
            63158897,
            63156756,
            63159058,
            63165817,
            63157707,
            63163278,
            63165731,
            63163213,
            63159437,
            63160306,
            63162853
        ],
        "C2": [
            63144475,
            63148997,
            63163130,
            63147539,
            63156437,
            63140409,
            63142875,
            63141970,
            63143625,
            63146079,
            63146725,
            63146760,
            63166472,
            63142727,
            63151593,
            63150401,
            63148432,
            63146539,
            63148575
        ],
        "C1": [
            63144104,
            63149133,
            63151950,
            63147674,
            63156193,
            63140555,
            63142796,
            63141766,
            63143828,
            63146316,
            63145140,
            63146724,
            63147005,
            63140832,
            63152061,
            63150521,
            63148664,
            63146426,
            63148088
        ],
        "B2": [
            63138088,
            63140116,
            63145913,
            63136980,
            63145234,
            63136187,
            63136343,
            63136067,
            63136970,
            63136377,
            63140760,
            63137463,
            63136041,
            63138033,
            63138460,
            63138534,
            63142142,
            63140081,
            63199621,
            63137990
        ],
        "B1": [
            63136823,
            63140317,
            63145977,
            63137191,
            63138074,
            63136366,
            63134489,
            63135842,
            63137199,
            63136571,
            63138205,
            63137333,
            63136186,
            63137901,
            63138608,
            63138272,
            63140900,
            63139910,
            63137719
        ],
        "A": [
            63132494,
            63132712,
            63139517,
            63133327,
            63134818,
            63132878,
            63132304,
            63132430,
            63132570,
            63132479,
            63135293,
            63133449,
            63132465,
            63133181,
            63133050,
            63132876,
            63135189,
            63133242,
            63132357
        ]
    },
    "name": "B1. Books Exchange  easy version ",
    "statement": ".There are n kids, each of them is reading a unique book. At the end of\r\nany day, the i-th kid will give his book to the p_i-th kid (in case of i\r\n= p_i the kid will give his book to himself). It is guaranteed that all\r\nvalues of p_i are distinct integers from 1 to n (i.e. p is a\r\npermutation). The sequence p doesnâ€™t change from day to day, it is\r\nfixed.For example, if n=6 and p=[4, 6, 1, 3, 5, 2] then at the end of\r\nthe first day the book of the 1-st kid will belong to the 4-th kid, the\r\n2-nd kid will belong to the 6-th kid and so on. At the end of the second\r\nday the book of the 1-st kid will belong to the 3-th kid, the 2-nd kid\r\nwill belong to the 2-th kid and so on.Your task is to determine the\r\nnumber of the day the book of the i-th child is returned back to him for\r\nthe first time for every i from 1 to n.Consider the following example: p\r\n= [5, 1, 2, 4, 3]. The book of the 1-st kid will be passed to the\r\nfollowing kids: after the 1-st day it will belong to the 5-th kid, after\r\nthe 2-nd day it will belong to the 3-rd kid, after the 3-rd day it will\r\nbelong to the 2-nd kid, after the 4-th day it will belong to the 1-st\r\nkid. So after the fourth day, the book of the first kid will return to\r\nits owner. The book of the fourth kid will return to him for the first\r\ntime after exactly one day.You have to answer q independent queries.\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <bitset>\n#include <vector>\n#include <string>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstring>\nusing namespace std;\ninline int read(){\n\tregister int res=0, c;\n\twhile(c=getchar(), c<'0'||c>'9');\n\tdo{\n\t\tres=(res*10)+(c^48);\n\t} while(c=getchar(), c>='0'&&c<='9');\n\treturn res;\n}\nint s[100010], ans[100010], ans2[100010], Z, vis[100010], cnt;\nvoid dfs(int x){\n\tvis[x]=1;\n\tcnt++;\n\tif(!vis[s[x]])dfs(s[x]);\n\tans[Z]=cnt;\n\tans2[x]=Z;\n}\nint main() {\n\tint T=read();\n\twhile(T--){\n\t\tint N=read();\n\t\tfor(int i=1; i<=N; i++){\n\t\t\ts[i]=read();\n\t\t\tvis[i]=0;\n\t\t\tans[i]=0;\n\t\t\tans2[i]=0;\n\t\t}\n\t\tfor(int i=1; i<=N; i++){\n\t\t\tif(!vis[i]){\n\t\t\t\tZ++;\n\t\t\t\tcnt=0;\n\t\t\t\tdfs(i);\n\t\t\t}\n\t\t}\n\t\t//puts(\"ANS\");\n\t\tfor(int i=1; i<=N; i++){\n\t\t\tprintf(\"%d%c\", ans[ans2[i]], i==N?'\\n':' ');\n\t\t}\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dsu",
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B1. Books Exchange  easy version .json",
    "editorial_link": "https://codeforces.com//blog/entry/70779",
    "editorial": "In this problem you just need to implement what is written in the\r\nproblem statement. For the kid the following pseudocode will calculate\r\nthe answer (indices of the array and its values are -indexed):pos =\r\np[i]ans = 1while pos != i: ans += 1 pos = p[pos]\r\n",
    "hint": []
}