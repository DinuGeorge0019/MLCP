{
    "link": "https://codeforces.com//contest/1927/problem/G",
    "problemId": "2464700",
    "problem_idx": "G",
    "shortId": "1927G",
    "contest_number": "1927",
    "problem_submissions": {
        "C": [
            245774999,
            245774883,
            245105422,
            245122382,
            245158304,
            245133466,
            245112415,
            245098943,
            245111076,
            245091126,
            245103710,
            245107875,
            245104800,
            245109291,
            245088939,
            245786825,
            245116795,
            245107590,
            245112204,
            245122106,
            245110489,
            245107546,
            245111221
        ],
        "D": [
            245774988,
            245774903,
            245126667,
            245124314,
            245152025,
            245153432,
            245150633,
            245112201,
            245122425,
            245118950,
            245114451,
            246093598,
            245128357,
            245112456,
            245133587,
            245114664,
            245786868,
            245131035,
            245123686,
            245138273,
            245112167,
            245122716,
            245116208,
            245129268
        ],
        "A": [
            245774978,
            245774852,
            245082305,
            245083383,
            245165173,
            245112854,
            245083966,
            245081484,
            245092954,
            245080652,
            245090517,
            245085040,
            245080976,
            245084295,
            245096827,
            245786733,
            245088207,
            245083129,
            245083368,
            245082872,
            245085962,
            245085358,
            245084178
        ],
        "G": [
            245774962,
            245189987,
            245223574,
            245121073,
            245211786,
            245227020,
            245179313,
            246085405,
            245611417,
            253341820,
            245766332,
            245766313,
            245521133
        ],
        "F": [
            245774946,
            245160123,
            245189910,
            245140204,
            245189390,
            245194353,
            245162965,
            245152515,
            245174987,
            245164490,
            245179652,
            245164683,
            245184260,
            245786958,
            245173789,
            245197866,
            245172638,
            245186291,
            245182363,
            245204502,
            245180485
        ],
        "E": [
            245774926,
            245132223,
            245142824,
            245171074,
            245104988,
            245171442,
            245119413,
            245133491,
            245140861,
            245144155,
            245140539,
            245143808,
            245144249,
            245155627,
            245786913,
            245146648,
            245137887,
            245152924,
            245140823,
            245144077,
            245125971,
            245156370
        ],
        "B": [
            245774866,
            245091252,
            245094838,
            245162618,
            245122271,
            245095055,
            245090386,
            245100335,
            245081684,
            245089900,
            245095184,
            245093242,
            245093048,
            245106643,
            245786775,
            245103674,
            245094877,
            245096630,
            245091382,
            245098673,
            245107003,
            245100041
        ]
    },
    "name": "G. Paint Charges",
    "statement": "A horizontal grid strip of n cells is given. In the i-th cell, there is\r\na paint charge of size a_i. This charge can be: either used to the left\r\nthen all cells to the left at a distance less than a_i (from\r\nmax(i - a_i + 1, 1) to i inclusive) will be painted, or used to the\r\nright then all cells to the right at a distance less than a_i (from i to\r\nmin(i + a_i - 1, n) inclusive) will be painted, or not used at all. Note\r\nthat a charge can be used no more than once (that is, it be used\r\nsimultaneously to the left and to the right). It is allowed for a cell\r\nto be painted more than once.What is the minimum number of times a\r\ncharge needs to be used to paint all the cells of the strip?\r\n",
    "solutions": [
        "// LUOGU_RID: 146673924\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nint tt;\nint n,a[101];\nint f[2][105][105];\nsigned main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0);\n\tcin>>tt;\n\twhile(tt--){\n\t\tcin>>n;\n\t\tfor(int i=1;i<=n;i++) cin>>a[i];\n\t\tfor(int i=0;i<=n+1;i++){\n\t\t\tfor(int j=0;j<=n+1;j++){\n\t\t\t\tf[0][i][j]=f[1][i][j]=n+1;\n\t\t\t}\n\t\t}\n\t\tf[0][0][1]=0;\n\t\tfor(int p=1;p<=n;p++){\n\t\t\tint S=p&1,S_=S^1;\n\t\t\tfor(int i=0;i<=n;i++){\n\t\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\t\tif(f[S_][i][j]==n+1) continue;\n//\t\t\t\t\tcout<<i<<' '<<j<<' '<<p<<\" \"<<f[i][j]<<':'<<'\\n';\n\t\t\t\t\tint lim=max(p-a[p]+1,1ll);\n\t\t\t\t\tif(j>=lim) f[S][max(i,p)][max(i,p)+1]=min(f[S][max(i,p)][max(i,p)+1],f[S_][i][j]+1);\n//\t\t\t\t\tcout<<f[max(i,p)][p+1]<<' '<<max(i,p)<<' '<<p+1<<'\\n';\n\t\t\t\t\tlim=min(n,p+a[p]-1);\n\t\t\t\t\tint t=max(lim,i);\n\t\t\t\t\tif(j<p){\n\t\t\t\t\t\tf[S][t][j]=min(f[S][t][j],f[S_][i][j]+1);\n//\t\t\t\t\t\tcout<<'*'<<f[t][j]<<' '<<t<<' '<<j<<'\\n';\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tf[S][t][t+1]=min(f[S][t][t+1],f[S_][i][j]+1);\n//\t\t\t\t\t\tcout<<f[t][t+1]<<' '<<t<<' '<<t+1<<'\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<=n;i++){\n\t\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\t\tf[S][i][j]=min(f[S][i][j],f[S_][i][j]);\n\t\t\t\t}\n\t\t\t}\n//\t\t\tif(p==6) cout<<f[S][10][1]<<'\\n';\n\t\t}\n\t\tcout<<min(f[0][n][n+1],f[1][n][n+1])<<'\\n';\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "greedy",
        "math"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\G. Paint Charges.json",
    "editorial_link": "https://codeforces.com//blog/entry/125597",
    "editorial": "Let\u00e2\u0080\u0099s use the method of dynamic programming. Let be the minimum number\r\nof operations required for the distance from to the farthest unpainted\r\ncell on the left to be , and to the nearest unpainted cell on the right\r\nto be (including itself).We will update the values forward, that is, for\r\nall reachable states, we will find the states reachable from it and\r\nupdate the answer for them. In this case, we will move from the current\r\nto , recalculating and depending on the action: not spraying paint from\r\n, spraying paint from to the left, spraying paint from to the right.The\r\nproblem could also have been solved in , however, the constraints did\r\nnot require this.\r\n"
}