{"link": "https://codeforces.com//contest/1933/problem/E", "problemId": "2499501", "problem_idx": "E", "shortId": "1933E", "contest_number": "1933", "problem_submissions": {"F": [248591555, 248583197, 248612069, 248598539, 248597755, 248643416, 248594242, 248617583, 248616936, 248585168, 248614930, 248616674, 248602103, 248594258, 248595945, 248611877, 248611178, 248616575, 248616309, 248622503, 248617674], "E": [248548292, 248552431, 248546385, 248561374, 248556960, 248652019, 248551455, 248552418, 248555156, 248564471, 248563614, 248548908, 248551471, 248562111, 248581222, 248571134, 248569128, 248568252, 248572929, 248557480, 248572070], "D": [248528452, 248534682, 248520947, 248525201, 248536025, 248654461, 248561233, 248528372, 248531274, 248536504, 248531753, 248522180, 248521565, 248548476, 248549982, 248534397, 248534785, 248540283, 248533460, 248533936, 248522543], "C": [248516161, 248524318, 248516570, 248527729, 248522314, 248522710, 248519907, 248542337, 248516141, 248527195, 248558597, 248543262, 248520926, 248522993, 248519350, 248521925, 248526364, 248527609, 248534164], "B": [248505336, 248503901, 248517888, 248511472, 248507016, 248507736, 248508836, 248511885, 248506077, 248516238, 248525805, 248512121, 248503633, 248509962, 248507053, 248512665, 248511061, 248506937, 248515209], "A": [248494249, 248494304, 248494559, 248496663, 248496909, 248500497, 248494197, 248494587, 248497967, 248494007, 248495080, 248494500, 248498090, 248639683, 248493804, 248494937, 248495858, 248498778, 248497100, 248494989, 248499649], "G": [248742272, 248790545, 248713826, 248773615, 248759515]}, "name": "E. Turtle vs. Rabbit Race  Optimal Trainings", "statement": "Isaac begins his training. There are n running tracks available, and the\r\ni-th track (1\r\nle i\r\nle n) consists of a_i equal-length sections. Given an integer u (1\r\nle u\r\nle 10^9), finishing each section can increase Isaac\u2019s ability by a\r\ncertain value, described as follows: Finishing the 1-st section\r\nincreases Isaac\u2019s performance by u. Finishing the 2-nd section increases\r\nIsaac\u2019s performance by u-1. Finishing the 3-rd section increases Isaac\u2019s\r\nperformance by u-2.\r\nldots Finishing the k-th section (k\r\nge 1) increases Isaac\u2019s performance by u+1-k. (The value u+1-k can be\r\nnegative, which means finishing an extra section decreases Isaac\u2019s\r\nperformance.) You are also given an integer l. You must choose an\r\ninteger r such that l\r\nle r\r\nle n and Isaac will finish section of track l, l + 1,\r\ndots, r (that is, a total of\r\nsum_{i=l}^r a_i = a_l + a_{l+1} +\r\nldots + a_r sections).Answer the following question: what is the optimal\r\nr you can choose that the increase in Isaac\u2019s performance is maximum\r\npossible? If there are multiple r that maximize the increase in Isaac\u2019s\r\nperformance, output the r.To increase the difficulty, you need to answer\r\nthe question for q different values of l and u.\r\n", "solutions": ["/// My implementation sucks\n#include <bits/stdc++.h>\n#define ll long long\n#define f first\n#define s second\n#define ii pair<int,int>\n#define sz(x) (int) (x).size()\n#define pb push_back\n#define all(x) (x).begin(),(x).end()\nusing namespace std;\ntemplate<class T1,class T2> bool maximize(T1 &a,T2 b) {return(a<b ? a=b,1:0);};\ntemplate<class T1,class T2> bool minimize(T1 &a,T2 b) {return(a>b ? a=b,1:0);};\n\nconst int N=1e5+10;\nint n,a[N];\nvoid leeminhduc2()\n{\n    cin >> n;\n    for (int i=1;i<=n;i++)\n    {\n        cin >> a[i];\n        a[i]+=a[i-1];\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        int l,u;\n        cin >> l >> u;\n        int lf=l,rg=n;\n        int pos=upper_bound(a+1,a+n+1,a[l-1]+u)-a;\n        if (pos==n+1) cout << n << \" \" ;\n        else if (pos==l) cout << l << \" \";\n        else\n            if (1ll*(u+u-(a[pos-1]-a[l-1])+1)*(a[pos-1]-a[l-1])/2>=1ll*(1+u)*u/2-1ll*(a[pos]-a[l-1]-u)*(a[pos]-a[l-1]-u-1)/2)\n                cout << pos-1 << \" \";\n            else\n                cout << pos << \" \";\n    }\n    cout << \"\\n\";\n}\nsigned main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    int tc=1;\n    cin >> tc;\n    while (tc--)\n    leeminhduc2();\n}\n\n"], "input": "", "output": "", "tags": ["binary search", "implementation", "math", "ternary search"], "dificulty": "1500", "interactive": false}