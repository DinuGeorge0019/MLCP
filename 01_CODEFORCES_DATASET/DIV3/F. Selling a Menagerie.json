{
    "link": "https://codeforces.com//contest/1872/problem/F",
    "problemId": "2198225",
    "problem_idx": "F",
    "shortId": "1872F",
    "contest_number": "1872",
    "problem_submissions": {
        "G": [
            222269305,
            222264289,
            222298879,
            222305481,
            222270629,
            222342415,
            222314228,
            222291632,
            222286722,
            222275567,
            222284367,
            222291047,
            222268166,
            222301101,
            222308831,
            222296849,
            222307124,
            222314609,
            222306727,
            222303618,
            222298039
        ],
        "F": [
            222253211,
            222274310,
            222263563,
            222275177,
            222283950,
            222342119,
            222263399,
            222275335,
            222259168,
            222301153,
            222293375,
            222280986,
            222289895,
            222284461,
            222268231,
            222282384,
            222274185,
            222276754,
            222273355,
            222290954
        ],
        "E": [
            222242579,
            222246400,
            222249497,
            222247597,
            222248802,
            222342265,
            222249154,
            222255647,
            222250780,
            222252960,
            222255367,
            222257063,
            222301644,
            222264271,
            222254606,
            222261852,
            222259585,
            222256505,
            222256891,
            222259676
        ],
        "D": [
            222233540,
            222240242,
            222235638,
            222238483,
            222241578,
            222341675,
            222240111,
            222249058,
            222245456,
            222243309,
            222249106,
            222245814,
            222245292,
            222248919,
            222247848,
            222246403,
            222250509,
            222246737,
            222246669,
            222248764
        ],
        "C": [
            222228280,
            222236162,
            222231841,
            222233925,
            222238951,
            222341397,
            222235622,
            222239086,
            222238021,
            222238244,
            222243551,
            222237799,
            222238155,
            222240804,
            222242295,
            222252499,
            222244345,
            222233052,
            222239640,
            222243679
        ],
        "B": [
            222223320,
            222228834,
            222223279,
            222226962,
            222230878,
            222341232,
            222228304,
            222229555,
            222234022,
            222230767,
            222235368,
            222229693,
            222228951,
            222233130,
            222233112,
            222230666,
            222236695,
            222242522,
            222228111,
            222239768
        ],
        "A": [
            222220034,
            222220138,
            222220149,
            222220934,
            222220877,
            222220135,
            222220624,
            222220385,
            222220004,
            222220348,
            222220097,
            222222211,
            222223046,
            222220972,
            222222909,
            222223854,
            222229902,
            222220171,
            222223172
        ]
    },
    "name": "F. Selling a Menagerie",
    "statement": "You are the owner of a menagerie consisting of n animals numbered from 1\r\nto n. However, maintaining the menagerie is quite expensive, so you have\r\ndecided to sell it!It is known that each animal is afraid of exactly one\r\nother animal. More precisely, animal i is afraid of animal a_i (a_i\r\nneq i). Also, the cost of each animal is known, for animal i it is equal\r\nto c_i.You will sell all your animals in some fixed order. Formally, you\r\nwill need to choose some permutation^\r\ndagger p_1, p_2,\r\nldots, p_n, and sell animal p_1 first, then animal p_2, and so on,\r\nselling animal p_n last.When you sell animal i, there are two possible\r\noutcomes: If animal a_i was sold animal i, you receive c_i money for\r\nselling animal i. If animal a_i was sold animal i, you receive 2\r\ncdot c_i money for selling animal i. (Surprisingly, animals that are\r\ncurrently afraid are more valuable). Your task is to choose the order of\r\nselling the animals in order to maximize the total profit. For example,\r\nif a = [3, 4, 4, 1, 3], c = [3, 4, 5, 6, 7], and the permutation you\r\nchoose is [4, 2, 5, 1, 3], then: The first animal to be sold is animal\r\n4. Animal a_4 = 1 was not sold before, so you receive 2\r\ncdot c_4 = 12 money for selling it. The second animal to be sold is\r\nanimal 2. Animal a_2 = 4 was sold before, so you receive c_2 = 4 money\r\nfor selling it. The third animal to be sold is animal 5. Animal a_5 = 3\r\nwas not sold before, so you receive 2\r\ncdot c_5 = 14 money for selling it. The fourth animal to be sold is\r\nanimal 1. Animal a_1 = 3 was not sold before, so you receive 2\r\ncdot c_1 = 6 money for selling it. The fifth animal to be sold is animal\r\n3. Animal a_3 = 4 was sold before, so you receive c_3 = 5 money for\r\nselling it.Your total profit, with this choice of permutation, is 12 +\r\n4 + 14 + 6 + 5 = 41. Note that 41 is the maximum possible profit in this\r\nexample.^\r\ndagger A permutation of length n is an array consisting of n distinct\r\nintegers from 1 to n in any order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray) and [1,3,4] is also not a permutation (n=3, but 4 is present in\r\nthe array).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define vll vector<ll>\n#define vvll vector<vll>\n\nint main() {\n    int t;\n    cin >> t;\n    while (t--) {\n        ll n;\n        cin >> n;\n        vll a(n);\n        for (ll& x : a) cin >> x, x--;\n        vll c(n);\n        for (ll& x : c) cin >> x;\n        vll deg(n);\n        for (ll x : a) deg[x]++;\n        vll ans;\n        vll vis(n);\n        stack<ll> deg0;\n        for (ll i = 0; i < n; i++) if (!deg[i]) deg0.push(i);\n        while (!deg0.empty()) {\n            ll v = deg0.top(); deg0.pop();\n            vis[v] = 1;\n            ans.push_back(v);\n            if (!--deg[a[v]]) deg0.push(a[v]);\n        }\n        for (ll i = 0; i < n; i++) {\n            if (!vis[i]) {\n                vll cycle;\n                ll mincost = 1e18;\n                ll mincostind = 0;\n                ll j = i;\n                do {\n                    cycle.push_back(j);\n                    if (c[j] < mincost) {\n                        mincost = c[j];\n                        mincostind = cycle.size();\n                    }\n                    vis[j] = 1;\n                    j = a[j];\n                } while (j != i);\n                for (ll k = 0; k < cycle.size(); k++) {\n                    ans.push_back(cycle[mincostind++ % cycle.size()]);\n                }\n            }\n        }\n        for (ll v : ans) cout << v+1 << ' ';\n        cout << '\\n';\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dsu",
        "graphs",
        "implementation",
        "math"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Selling a Menagerie.json",
    "editorial_link": "https://codeforces.com//blog/entry/120165",
    "editorial": "Simple greedy observation: if at some point in time there exists an\r\nanimal such that no one fears it (there is no index ), then it is\r\noptimal to sell that animal first.Let\u00e2\u0080\u0099s iteratively sell such animals as\r\nlong as they exist. After selling animal , we must additionally check if\r\nanimal has become such that no one fears it, and if so, add it to the\r\nlist for sale.What will we get when we sell all such animals? Note that\r\nwhen there are no such animals left, will form a permutation, as each\r\nanimal must be feared by at least one other animal.As it is known, a\r\npermutation consists of cycles of the form .Obviously, for each cycle we\r\nmust solve the problem independently, and then combine the answers in\r\nany order. Note that if we sell animals in the order of the cycle, we\r\nwill only receive a single payment for the last animal sold.At the same\r\ntime, it is not possible to obtain double payment for all animals in any\r\ncase: the last animal sold from the cycle will always be sold for a\r\nsingle payment.Therefore, it is optimal to sell all animals in the order\r\nof the cycle so that the animal with the minimum cost ends up being the\r\nlast in this order.You can see the implementation details in the code.\r\n"
}