{
    "link": "https://codeforces.com//contest/2093/problem/F",
    "problemId": "3316693",
    "problem_idx": "F",
    "shortId": "2093F",
    "contest_number": "2093",
    "problem_submissions": {
        "G": [
            314598849,
            314606152,
            314587837,
            314603802,
            314617244,
            314636843,
            314627641,
            314600484,
            314594509,
            314620818,
            314635145,
            314608319,
            314614792,
            314625948,
            314636125,
            314647345,
            314643350,
            314696296,
            314695422,
            314626566,
            320943180,
            316430155,
            316118291,
            316109856,
            314647533
        ],
        "F": [
            314558487,
            314577897,
            314625297,
            314618724,
            314550975,
            314613160,
            314640815,
            314612755,
            314576025,
            314580140,
            314620214,
            314601161,
            314634333,
            314617932,
            314620741,
            314641936,
            316430291,
            314618171
        ],
        "E": [
            314544557,
            314535804,
            314564193,
            314584439,
            314601580,
            314571635,
            314566292,
            314573283,
            314566908,
            314569827,
            314594393,
            314592990,
            314569180,
            314598271,
            314602179,
            314604220,
            314574875
        ],
        "D": [
            314536131,
            314548404,
            314559767,
            314561746,
            314588013,
            314559202,
            314556203,
            314580187,
            314554129,
            314551666,
            314587477,
            314585574,
            314553841,
            314581434,
            314576973,
            314582629,
            314601313
        ],
        "C": [
            314526642,
            314521445,
            314518733,
            314537065,
            314535871,
            314531879,
            314535043,
            314525409,
            314542891,
            314542275,
            314543204,
            314552545,
            314540325,
            314550521,
            314542741,
            314550013,
            314552540
        ],
        "B": [
            314515947,
            314513843,
            314512428,
            314541683,
            314519273,
            314519539,
            314519019,
            314557363,
            314534402,
            314538618,
            314524038,
            314544076,
            314523050,
            314523557,
            314528828,
            314536221,
            314527428
        ],
        "A": [
            314508419,
            314505299,
            314504405,
            314507249,
            314505871,
            314511003,
            314506100,
            314506987,
            314535725,
            314508847,
            314505153,
            314508202,
            314508618,
            314506581,
            314510822,
            314519518,
            314513582
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/141434",
    "editorial": "Let’s call the operation of the first type a if after it .Let . Notice\r\nthat in any case we will have at least misses. Why?Since the positions\r\nare chosen randomly, and we need to guarantee obtaining the array , we\r\nmust assume the worst case: if there is a possibility to choose a\r\nposition such that , then this will happen. Accordingly, if one neural\r\nnetwork has positions that match the array , it will first choose\r\nnon-matching positions. Therefore, to minimize the number of misses\r\nbefore the first correct word, we need to select the neural network with\r\nthe maximum number of positions matching the array that is, the neural\r\nnetwork on which from the definition above is achieved.Consequently,\r\nwhatever we do, we will end up with extra words that need to be removed.\r\nThis means we have at least operations. It is impossible to obtain the\r\ndesired string in fewer than additional operations after we have removed\r\nextra words, we need to fill them in. Thus, the theoretical minimum\r\nnumber of operations is . We will present an algorithm that achieves\r\nthis and is therefore optimal.Let’s take the neural network where is\r\nachieved; after operations, we will have matching words and non-matching\r\nones. These can be swapped using the second operation: suppose we have a\r\nnon-matching word at the -th position, then we will place a blank there\r\nand refer to the neural network where this word is correct since there\r\nis only one blank, the neural network will guarantee to place exactly\r\nthe word we need. We will do this for all words. This will take us\r\noperations of the second type and another operations of the first type\r\nthus we have just reached our minimal estimate.\r\n",
    "name": "F. Hackers and Neural Networks",
    "statement": "Hackers are once again trying to create entertaining phrases using the\r\noutput of neural networks. This time, they want to obtain an array of\r\nstrings a of length n.Initially, they have an array c of length n,\r\nfilled with blanks, which are denoted by the symbol *. Thus, if n=4,\r\nthen initially c=[*,*,*,*].The hackers have access to m neural networks,\r\neach of which has its own version of the answer to their request an\r\narray of strings b_i of length n.The hackers are trying to obtain the\r\narray a from the array c using the following operations: Choose a neural\r\nnetwork i, which will perform the next operation on the array c: it will\r\nselect a , for example, at position j, and replace c_j with b_{i, j}.For\r\nexample, if the first neural network is chosen and c = [*,\r\ntext{ like }, *], and b_1 = [\r\ntext{ I },\r\ntext{ love },\r\ntext{ apples }], then after the operation with the first neural network,\r\nc may become either [\r\ntext{ I },\r\ntext{ like }, *] or [*,\r\ntext{ like },\r\ntext{ apples }]. Choose position j and replace c_j with a blank.\r\nUnfortunately, because of the way hackers access neural networks, they\r\nwill only be able to see the modified array c after all operations are\r\ncompleted, so they will have to specify the entire sequence of\r\noperations in advance.However, the random behavior of the neural\r\nnetworks may lead to the situation where the desired array is never\r\nobtained, or obtaining it requires an excessive number of operations.\r\nTherefore, the hackers are counting on your help in choosing a sequence\r\nof operations that will guarantee the acquisition of array a in the\r\nminimum number of operations.More formally, if there exists a sequence\r\nof operations that can obtaining array a from array c, then among all\r\nsuch sequences, find the one with the number of operations, and output\r\nthe number of operations in it.If there is no sequence of operations\r\nthat transforms array c into array a, then output -1.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "greedy"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Hackers and Neural Networks.json",
    "hint": [
        "Hint 1 We need to ensure that we construct the array . Therefore, when interacting with the neural network, we should consider the worst-case scenario.",
        "Hint 2 Read the previous hint. How many operations of the first type applied to the -th neural network do we need to obtain at least one correct word (i.e., one such that )? Answer If we have obtained at least one correct word from the neural network, then, since we are considering the worst-case scenario, it has already placed all incorrect words in the array .",
        "Hint 3 Read the previous hint and its answer. Which neural network is optimal to start with? How many blanks will there be in the array after interacting with this neural network? Answer It is optimal to start with the neural network that has the most correct words. There will be no blanks in the array .",
        "Hint 4 There are currently no blanks in the array , but there are incorrect words in some positions. How many operations are needed to replace one incorrect word with a correct one?"
    ]
}