{
    "link": "https://codeforces.com//contest/1095/problem/C",
    "problemId": "275103",
    "problem_idx": "C",
    "shortId": "1095C",
    "contest_number": "1095",
    "problem_submissions": {
        "E": [
            47572493,
            47577391,
            47577601,
            47571130,
            47573480,
            47573851,
            47579488,
            47579243,
            47583313,
            47572977,
            47576569,
            47582897,
            47574546,
            47577946,
            47581685,
            47573841,
            47582231,
            47584199,
            47573945,
            47583101
        ],
        "F": [
            47566370,
            47573294,
            47562701,
            47573988,
            47579057,
            47581403,
            47572438,
            47566223,
            47578405,
            47576558,
            47583994,
            47577257,
            47570463,
            47582128,
            47586705,
            47807775,
            47807743,
            47807736,
            47807702,
            47586605,
            47608877,
            47573085,
            47580349,
            47588876,
            47585818
        ],
        "D": [
            47563209,
            47614712,
            47567371,
            47571011,
            47564325,
            47567777,
            47568284,
            47567860,
            47577158,
            47566286,
            47577441,
            47568324,
            47562890,
            47577182,
            47571848,
            47568920,
            47581067,
            47574935,
            47575170,
            47568243,
            47568626
        ],
        "C": [
            47559007,
            47560130,
            47566278,
            47559870,
            47560866,
            47562972,
            47564210,
            47560920,
            47562511,
            47560682,
            47563534,
            47559786,
            51809567,
            47573250,
            47561981,
            47566916,
            47564246,
            47565270,
            47562848,
            47563772,
            47565179
        ],
        "B": [
            47555392,
            47555193,
            47564009,
            47556364,
            47556516,
            47555175,
            47555868,
            47555467,
            47557131,
            47554642,
            47557601,
            47555771,
            47557598,
            47556456,
            47555954,
            47558351,
            47557404,
            47558162,
            47559339,
            47556593
        ],
        "A": [
            47554038,
            47554188,
            47553996,
            47553824,
            47555088,
            47553896,
            47554204,
            47554208,
            47554977,
            47553891,
            47554134,
            47554837,
            47554623,
            47554538,
            47554565,
            47555784,
            47555600,
            47554171,
            47557808,
            47555100
        ]
    },
    "name": "C. Powers Of Two",
    "statement": "A positive integer x is called a if it can be represented as x = 2^y,\r\nwhere y is a non-negative integer. So, the are 1, 2, 4, 8, 16,\r\ndots.You are given two positive integers n and k. Your task is to\r\nrepresent n as the of k .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define disp(x) cout<<x<<\" \";\ntypedef long long ll;\n#define fo(i,a,b) for(int i=a;i<=b;i++)\n#define endl '\\n'\n#define show(x) cout<<x<<endl;\n#define rf(i,a,b) for(int i=a;i>=b;i--) \n#define pret(x) cout<<x<<endl; return 0;\n#define fast_io ios_base::sync_with_stdio(0);\n#define let(x,y) cout<<x<<\" \"<<y<<endl;\ntypedef vector<int> vi;\nll MOD=1e9+7;\nll MAX=9223372036854775807;\n\nint main(){\n\tfast_io;\n\tint n,k;\n\tcin>>n>>k;\n\tif(n<k){\n\t\tpret(\"NO\");\n\t}\n\tint curr=0;\n\tmultiset<int>s;\n\tfor (int i = 0; i < 32; ++i)\n\t{\n\t\tif((n&(1<<i))) {\n\t\t\ts.insert(1<<i);\n\t\t\tcurr++;\n\t\t}\n\t}\n\tif(curr>k){\n\t\tpret(\"NO\");\n\t}\n\twhile(curr<k){\n\t\tauto it=s.end();\n\t\tit--;\n\t\tif(*it == 1){\n\t\t\tpret(\"NO\");\n\t\t}\n\t\tint temp=(*it);\n\t\ts.erase(it);\n\t\ts.insert(temp/2);\n\t\ts.insert(temp/2);\n\t\tcurr++;\n\t}\n\tshow(\"YES\");\n\tfor(auto i:s){\n\t\tdisp(i);\n\t}\n\tcout<<endl;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "greedy"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Powers Of Two.json",
    "editorial_link": "https://codeforces.com//blog/entry/64130",
    "editorial": "First of all, letâs analyze how can we calculate the minimum number of\r\npowers of two needed to get as the sum. We can use binary representation\r\nof : each bit in it, which is equal to , becomes a summand in the\r\nanswer.Firstly, if the number of summands is greater than then the\r\nanswer is . Okay, what if we donât have enough summands? Every summand\r\ncan be broken down into two summands equal to . Letâs maintain all\r\nsummands greater than somewhere (stack, array, queue, multiset, anything\r\nyou want), and pick an arbitrary summand and break it into two until we\r\nhave exactly summands. If , then this process will terminate since we\r\nwill have some summand to pick until all of them are equal to .\r\n",
    "hint": []
}