{
    "link": "https://codeforces.com//contest/1015/problem/C",
    "problemId": "203548",
    "problem_idx": "C",
    "shortId": "1015C",
    "contest_number": "1015",
    "problem_submissions": {
        "F": [
            41046686,
            41089036,
            41088828,
            41088337,
            41096109,
            41155137
        ],
        "E2": [
            41044021,
            41044614,
            41045819,
            41046151,
            41041339,
            41120563,
            41047819,
            41049335,
            41046653,
            41047315,
            41056482,
            41049017,
            41046489,
            41053390,
            41052850,
            41051286,
            41054981,
            41057931,
            41047714,
            41052649,
            41063809,
            41051282
        ],
        "E1": [
            41043653,
            41042567,
            41045757,
            41045539,
            41040702,
            41045081,
            41043696,
            41046746,
            41047236,
            41044065,
            41048961,
            41046210,
            41043883,
            41050998,
            41051221,
            41044932,
            41048477,
            41047379,
            41051531,
            41047009
        ],
        "D": [
            41031342,
            41034646,
            41036110,
            41039331,
            41043349,
            41037861,
            41039026,
            41038448,
            41038110,
            41038683,
            41037715,
            41040743,
            41035875,
            41037945,
            41039903,
            41039757,
            41039527,
            41041117,
            41039970,
            41063782,
            41038156
        ],
        "B": [
            41028759,
            41027947,
            41029953,
            41029847,
            41027873,
            41030296,
            41030110,
            41028724,
            41031028,
            41029894,
            41029543,
            41031067,
            41030593,
            41029154,
            41029321,
            41029551,
            41029148,
            41033439,
            41031881,
            41028034
        ],
        "C": [
            41027720,
            41029992,
            41031722,
            41032867,
            41029608,
            41033310,
            41032299,
            41030539,
            41033426,
            41032047,
            41032615,
            41033736,
            41032226,
            41030814,
            41031207,
            41031359,
            41030973,
            41035988,
            41034551,
            41029776
        ],
        "A": [
            41025375,
            41025426,
            41026820,
            41025657,
            41025347,
            41026304,
            41026166,
            41025506,
            41029303,
            41025595,
            41025554,
            41027421,
            41025393,
            41025748,
            41025855,
            41025912,
            41025550,
            41026111,
            41026923,
            41025435
        ]
    },
    "name": "C. Songs Compression",
    "statement": "Ivan has n songs on his phone. The size of the i-th song is a_i bytes.\r\nIvan also has a flash drive which can hold at most m bytes in total.\r\nInitially, his flash drive is empty.Ivan wants to copy all n songs to\r\nthe flash drive. He can compress the songs. If he compresses the i-th\r\nsong, the size of the i-th song reduces from a_i to b_i bytes (b_i <\r\na_i).Ivan can compress any subset of the songs (possibly empty) and copy\r\nall the songs to his flash drive if the sum of their sizes is at most m.\r\nHe can compress subset of the songs (not necessarily contiguous).Ivan\r\nwants to find the minimum number of songs he needs to compress in such a\r\nway that all his songs fit on the drive (i.e. the sum of their sizes is\r\nless than or equal to m).If it is impossible to copy all the songs (even\r\nif Ivan compresses all the songs), print \"\". Otherwise print the minimum\r\nnumber of songs Ivan needs to compress.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define fi first\n#define se second\n#define p_b push_back\n#define pll pair<ll,ll>\n#define endl \"\\n\"\n#define m_p make_pair\n#define all(x) x.begin(),x.end()\n#define ld long double\n\nusing namespace std;\ntypedef long long ll;\nconst ll MAXN = 1123456;\n\ntemplate <typename T>\nT sqr(T x){\n    return x * x;\n}\n\ntemplate <typename T>\nvoid vout(T s){\n    cout << s << endl;\n    exit(0);\n}\n\nll bp(ll a,ll n){\n    ll res = 1;\n    while(n){\n        if(n % 2)res *= a;\n        a *= a;\n        n >>= 1;\n    }\n    return res;\n}\n\nint main(){\n    ios_base :: sync_with_stdio(0);\n    cin.tie(0);\n    //freopen(\"input.txt\",\"r\",stdin);\n    //freopen(\"output.txt\",\"w\",stdout);\n    ll n, m;\n    cin >> n >> m;\n    vector < pair<ll, pll> > a(n);\n    ll s = 0;\n    for(int i = 0; i < n; i++){\n        cin >> a[i].se.fi >> a[i].se.se;\n        s += a[i].se.fi;\n        a[i].fi = a[i].se.fi - a[i].se.se;\n    }\n    sort(all(a));\n    reverse(all(a));\n    for(int i = 0; i < n; i++){\n        if(s <= m)vout(i);\n        s -= a[i].fi;\n    }\n    if(s <= m)vout(n);\n    vout(-1);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "sortings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Songs Compression.json",
    "editorial_link": "https://codeforces.com/blog/entry/60949",
    "editorial": "If we will no compress songs, the sum of the sizes will be equal . Let\r\nit be . Now, if we will compress the -th song, how do will change? It\r\nwill decrease by . This suggests that the optimal way to compress the\r\nsongs is the compress it in non-increasing order of . Letâs create the\r\narray of size , where . Letâs sort it in non-increasing order, and then\r\niterate over all from to . If at the current step , we print and\r\nterminate the program. Otherwise we set . After all we have to check\r\nagain if then print otherwise print \"\".Time complexity is because of\r\nsorting.\r\n",
    "hint": []
}