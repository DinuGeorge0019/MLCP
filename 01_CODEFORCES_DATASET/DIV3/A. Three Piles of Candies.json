{
    "link": "https://codeforces.com//contest/1196/problem/A",
    "problemId": "377790",
    "problem_idx": "A",
    "shortId": "1196A",
    "contest_number": "1196",
    "problem_submissions": {
        "F": [
            57681700,
            57688661,
            57693585,
            57690559,
            57665659,
            57695119,
            57781679,
            83242061,
            57916383,
            68726830,
            82270831
        ],
        "B": [
            57673541,
            57649544,
            57652269,
            57654230,
            57679335,
            57653669,
            57651478,
            57654275,
            57652865,
            57652183,
            103121358,
            59232415,
            57652308,
            57652960,
            57653412,
            57655574,
            58261889,
            57653528,
            57654061,
            57651928,
            57655085,
            57658491,
            57652103
        ],
        "A": [
            57662145,
            57646582,
            57648135,
            57648211,
            57648294,
            57649147,
            57647064,
            57648725,
            57646690,
            57646929,
            57647619,
            57646915,
            57649771,
            57648481,
            58261863,
            57647513,
            57649572,
            57646786,
            57647851,
            57652602,
            57647144
        ],
        "E": [
            57660066,
            57677485,
            57675366,
            57677436,
            57681282,
            57677830,
            57673842,
            57672850,
            57676048,
            57682764,
            57679085,
            57680414,
            57680019,
            57677517,
            58261965,
            57678819,
            57684523,
            57681696,
            57679722,
            57677290,
            57678640
        ],
        "C": [
            57658492,
            57654354,
            57658481,
            57657615,
            57689981,
            57659504,
            57656630,
            57658570,
            57658429,
            57659478,
            57661824,
            57660864,
            57657934,
            57660478,
            58261906,
            57662669,
            57660523,
            57674035,
            57662185,
            57663396,
            57666540
        ],
        "D1": [
            57651996,
            57658879,
            57661770,
            57666118,
            57654079,
            57666561,
            57662530,
            57664730,
            57663635,
            57664913,
            57668860,
            57664436,
            57664910,
            57666776,
            58261921,
            57667464,
            57664679,
            57661598,
            57670813,
            57668128,
            57657381
        ],
        "D2": [
            57650929,
            57658567,
            57664847,
            57665451,
            57654443,
            57666008,
            57663080,
            57665252,
            57667224,
            57664331,
            57668491,
            57667512,
            57669290,
            57667407,
            58261939,
            57671667,
            57668510,
            57661989,
            57670493,
            57667835,
            57657749
        ]
    },
    "name": "A. Three Piles of Candies",
    "statement": "Alice and Bob have received three big piles of candies as a gift. Now\r\nthey want to divide these candies as fair as possible. To do this, Alice\r\ntakes one pile of candies, then Bob takes one of the other two piles.\r\nThe last pile is split between Alice and Bob as they want: for example,\r\nit is possible that Alice takes the whole pile, and Bob gets nothing\r\nfrom it.After taking the candies from the piles, if Alice has more\r\ncandies than Bob, she discards some candies so that the number of\r\ncandies she has is equal to the number of candies Bob has. Of course,\r\nBob does the same if he has more candies.Alice and Bob want to have as\r\nmany candies as possible, and they plan the process of dividing candies\r\naccordingly. Please calculate the maximum number of candies Alice can\r\nhave after this division process (of course, Bob will have the same\r\nnumber of candies).You have to answer q independent queries.Let\u2019s see\r\nthe following example: [1, 3, 4]. Then Alice can choose the third pile,\r\nBob can take the second pile, and then the only candy from the first\r\npile goes to Bob then Alice has 4 candies, and Bob has 4 candies.Another\r\nexample is [1, 10, 100]. Then Alice can choose the second pile, Bob can\r\nchoose the first pile, and candies from the third pile can be divided in\r\nsuch a way that Bob takes 54 candies, and Alice takes 46 candies. Now\r\nBob has 55 candies, and Alice has 56 candies, so she has to discard one\r\ncandy and after that, she has 55 candies too.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        long long a, b, c;\n        scanf(\"%lld%lld%lld\", &a, &b, &c);\n        printf(\"%lld\\n\", 1LL * (a + b + c) / 2);\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Three Piles of Candies.json",
    "editorial_link": "https://codeforces.com//blog/entry/68655",
    "editorial": "The answer is always . Let\u00e2\u0080\u0099s understand why it is so. Let . Then let Bob\r\ntake the pile with candies and Alice take the pile with candies. Then\r\nbecause of we can see that Bob\u00e2\u0080\u0099s pile always can reach size of Alice\u00e2\u0080\u0099s\r\npile (and remaining candies can be divided between them fairly except\r\none candy if is odd).\r\n"
}