{
    "link": "https://codeforces.com//contest/1367/problem/B",
    "problemId": "650994",
    "problem_idx": "B",
    "shortId": "1367B",
    "contest_number": "1367",
    "problem_submissions": {
        "F2": [
            84046399,
            84094199,
            84130636
        ],
        "F1": [
            83980407,
            83997753,
            83993348,
            83994650,
            83999567,
            84010715,
            83998236,
            84003996,
            84009140,
            84019849,
            84274779,
            84017193,
            84019354,
            84000999,
            84010593,
            84016471,
            84014906,
            84016930,
            84014876,
            84014935,
            84017986
        ],
        "D": [
            83971043,
            83961145,
            83985812,
            83980115,
            83973000,
            83974852,
            83986130,
            83981366,
            83974367,
            83994623,
            83977600,
            83983323,
            83996104,
            83995930,
            83983801,
            83992346,
            83994322,
            83998169,
            84019878,
            83994750
        ],
        "E": [
            83960157,
            83975668,
            83972713,
            83967919,
            83987024,
            83979496,
            83979914,
            83997028,
            83998395,
            83978103,
            83986303,
            83992757,
            84009544,
            83998141,
            84003322,
            84000422,
            84009434,
            84005956,
            84009927
        ],
        "C": [
            83944345,
            83953190,
            83946330,
            83950349,
            83947422,
            83950879,
            83948329,
            83963053,
            83957928,
            83954873,
            83961995,
            83964648,
            83957400,
            83955873,
            83978101,
            83977835,
            83962124,
            83950317,
            83977481
        ],
        "B": [
            83935714,
            83939461,
            83936897,
            83955137,
            83937279,
            83939068,
            83931855,
            83950510,
            83942524,
            83939871,
            83953252,
            83938559,
            83937149,
            83961120,
            83949153,
            83945426,
            83942777,
            83939545,
            83950410
        ],
        "A": [
            83931489,
            83931768,
            83931529,
            83932839,
            83931493,
            83933565,
            83935945,
            83942834,
            83934889,
            83933081,
            83935891,
            83931997,
            83932187,
            83932611,
            83934727,
            83936848,
            83932660,
            83932129,
            83932693
        ]
    },
    "name": "B. Even Array",
    "statement": "You are given an array a[0\r\nldots n-1] of length n which consists of non-negative integers. An array\r\nis called if the parity of each index matches the parity of the element\r\nat that index. More formally, an array is good if for all i (0\r\nle i\r\nle n - 1) the equality i\r\nbmod 2 = a[i]\r\nbmod 2 holds, where x\r\nbmod 2 is the remainder of dividing x by 2.For example, the arrays [0,\r\n5, 2, 1] and [0, 17, 0, 3] are good, and the array [2, 4, 6, 7] is bad,\r\nbecause for i=1, the parities of i and a[i] are different: i\r\nbmod 2 = 1\r\nbmod 2 = 1, but a[i]\r\nbmod 2 = 4\r\nbmod 2 = 0.In one move, you can take two elements of the array and swap\r\nthem (these elements are not necessarily adjacent).Find the minimum\r\nnumber of moves in which you can make the array a good, or say that this\r\nis not possible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> \nusing namespace std;\n#define fl(i,a,b) for(int i=a;i<b;i++)\n#define ff first\n#define ss second\n#define endl '\\n'\n#define pb push_back\n#define khushi ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);\ntypedef long long ll;\nconst int  mod  = 1000000007;\n#define int long long\nconst int mx = 200005;\nvoid f()\n{\n\tint n;\n\tcin >> n;\n\tint cnt = 0, tot = 0;\n\tint arr[n];\n\tfl(i,0,n)\n\t{\n\t\tcin >> arr[i];\n\t\tif(arr[i] & 1)\n\t\t\tcnt++;\n\t\tif(arr[i] % 2 != i % 2)\n\t\t\ttot++;\n\t}\n\tif(cnt != n / 2)\n\t{\n\t\tcout << -1 << endl;\n\t\treturn ;\n\t}\n\tcout << tot / 2 << endl;\n}\nmain()\n{\n\tkhushi;\n\tint t = 1;\n\tcin >> t;\n\twhile(t--)\n\t{\n\t\tf();\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Even Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/78864",
    "editorial": "We split all the positions in which the parity of the index does not\r\nmatch with the parity of the element into two arrays. If there is an odd\r\nnumber in the even index, add this index to the array. Otherwise, if\r\nthere is an even number in the odd index, add this index to the array.\r\nNote that if the sizes of the and arrays are not equal, then there is no\r\nanswer. Otherwise, the array can be made by doing exactly operations by\r\nsimply swapping all the elements in the and arrays.\r\n",
    "hint": []
}