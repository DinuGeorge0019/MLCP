{
    "link": "https://codeforces.com//contest/1272/problem/D",
    "problemId": "494356",
    "problem_idx": "D",
    "shortId": "1272D",
    "contest_number": "1272",
    "problem_submissions": {
        "E": [
            66703677,
            66698934,
            66711392,
            66720411,
            66715254,
            66696959,
            66695532,
            66698121,
            66701928,
            66701435,
            66706283,
            66705342,
            66707569,
            66707090,
            66777425,
            66705785,
            66709630,
            66710595,
            66706360,
            66711695
        ],
        "F": [
            66702563,
            66716210,
            66716034,
            66713486,
            66720407,
            66730946,
            66745196,
            66899419,
            66710448,
            69815932
        ],
        "B": [
            66692863,
            66686159,
            66691774,
            66706884,
            66714297,
            66683965,
            66685196,
            66684562,
            66686916,
            66692480,
            66696683,
            66688751,
            66692889,
            66696315,
            66685266,
            66695654,
            66691545,
            66689056,
            66687119,
            66686340
        ],
        "C": [
            66687313,
            66688012,
            66695426,
            66689433,
            66689685,
            66685389,
            66686891,
            66686385,
            66687940,
            66685597,
            66690881,
            66692609,
            66686241,
            66688395,
            66686850,
            66686864,
            66686923,
            66691687,
            66689532,
            66689140
        ],
        "D": [
            66683330,
            66692291,
            66701690,
            66697025,
            66695475,
            66689729,
            66689439,
            66688995,
            66691097,
            66696361,
            66685375,
            66696190,
            66695912,
            66691534,
            66688277,
            66700728,
            66696238,
            66694893,
            66695943,
            66703253
        ],
        "A": [
            66683267,
            66683040,
            66685123,
            66683649,
            66682741,
            66682439,
            66682629,
            66682714,
            66683716,
            66683148,
            66683049,
            66683308,
            66683216,
            66682971,
            66682692,
            66683012,
            66683163,
            66683636,
            66683990,
            66682789
        ]
    },
    "name": "D. Remove One Element",
    "statement": "You are given an array a consisting of n integers.You can remove element\r\nfrom this array. Thus, the final length of the array is n-1 or n.Your\r\ntask is to calculate the maximum possible length of the contiguous\r\nsubarray of the remaining array.Recall that the contiguous subarray a\r\nwith indices from l to r is a[l\r\ndots r] = a_l, a_{l + 1},\r\ndots, a_r. The subarray a[l\r\ndots r] is called strictly increasing if a_l < a_{l+1} <\r\ndots < a_r.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 2e5 + 10;\n\nint n;\nint a[N], l[N], r[N];\n\nint main() {\n    cin >> n;\n    for (int i = 1; i <= n; i++)\n        cin >> a[i];\n    for (int i = 1; i <= n; i++)\n        l[i] = (a[i] > a[i - 1] ? l[i - 1] + 1 : 1);\n    for (int i = n; i >= 1; i--)\n        r[i] = (a[i] < a[i + 1] ? r[i + 1] + 1 : 1);\n    int res = 0;\n    for (int i = 1; i <= n; i++)\n        res = max(res, max(l[i], r[i]));\n    for (int i = 2; i < n; i++)\n        if (a[i - 1] < a[i + 1])\n            res = max(res, l[i - 1] + r[i + 1]);\n    cout << res;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Remove One Element.json",
    "editorial_link": "https://codeforces.com//blog/entry/72132",
    "editorial": "Firstly, let\u00e2\u0080\u0099s calculate for each from to two following values: and .\r\nmeans the maximum length of the increasing sequence starting in the\r\nposition , and means the maximum length of the increasing sequence\r\nending in the position . Initially, all values are (the element\r\nitself).The array can be calculated in order from right to left with the\r\nfollowing condition: if then , otherwise it still remain . The same with\r\nthe array , but we have to calculate its values in order from left to\r\nright, and if then , otherwise it still remain .Having these arrays we\r\ncan calculate the answer. The initial answer (if we don\u00e2\u0080\u0099t remove any\r\nelement) is the maximum value of the array . And if we remove the -th\r\nelement (where ), then we can update the answer with the value if .Time\r\ncomplexity: .\r\n"
}