{
    "link": "https://codeforces.com//contest/1360/problem/F",
    "problemId": "629826",
    "problem_idx": "F",
    "shortId": "1360F",
    "contest_number": "1360",
    "problem_submissions": {
        "H": [
            81251920,
            81290028,
            81293330,
            81291112,
            81294740,
            81299062,
            81297186,
            81294484,
            81304607,
            81300361,
            81303070,
            81250599,
            81295409,
            81298287,
            81304237,
            81231948
        ],
        "G": [
            81250908,
            81261609,
            81276322,
            81265591,
            81276387,
            81264433,
            81272613,
            81280948,
            81267380,
            81269754,
            81289390,
            81293762,
            81279290,
            81296348,
            81288695,
            81287798
        ],
        "F": [
            81230412,
            81252303,
            81257057,
            81259404,
            81265576,
            81254763,
            81259977,
            81264927,
            81254624,
            81249372,
            81271302,
            81279300,
            81267710,
            81275581,
            81282413,
            81255521
        ],
        "E": [
            81216064,
            81240455,
            81234957,
            81246045,
            81233772,
            81233068,
            81236233,
            81262156,
            81246598,
            81264349,
            81235887,
            81262591,
            81252163,
            81263497,
            81254477,
            81259978
        ],
        "B": [
            81215775,
            81207436,
            81205722,
            81209946,
            81206365,
            81207859,
            81208440,
            81216311,
            81225212,
            81217601,
            81209275,
            81216781,
            81209546,
            81211074,
            81219408,
            81270897
        ],
        "A": [
            81211901,
            81203807,
            81203057,
            81203650,
            81203478,
            81204406,
            81203639,
            81224692,
            81237119,
            81214495,
            81204306,
            81209285,
            81203552,
            81206909,
            81211432,
            81273150
        ],
        "C": [
            81206744,
            81215880,
            81216577,
            81223025,
            81214552,
            81214398,
            81216644,
            81210331,
            81222555,
            81225820,
            81221447,
            81224269,
            81240900,
            81218199,
            81226927,
            81268532
        ],
        "D": [
            81205489,
            81225350,
            81222950,
            81235831,
            81222076,
            81219822,
            81226333,
            81233523,
            81233797,
            81230395,
            81227841,
            81245779,
            81245445,
            81255431,
            81237048,
            81264054
        ]
    },
    "name": "F. Spy-string",
    "statement": "You are given n strings a_1, a_2,\r\nldots, a_n: all of them have the same length m. The strings consist of\r\nlowercase English letters.Find any string s of length m such that each\r\nof the given n strings differs from s in at most one position. Formally,\r\nfor each given string a_i, there is no more than one position j such\r\nthat a_i[j]\r\nne s[j].Note that the desired string s may be equal to one of the given\r\nstrings a_i, or it may differ from all the given strings.For example, if\r\nyou have the strings and , then the answer to the problem might be the\r\nstring , which differs from the first only by the last character, and\r\nfrom the second only by the first.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std ;\n#define drep( i, s, t ) for( register int i = (t); i >= (s); -- i )\n#define rep( i, s, t ) for( register int i = (s); i <= (t); ++ i )\n#define Next( i, x ) for( register int i = head[x]; i; i = e[i].next )\n#define re register\nint gi() {\n\tchar cc = getchar() ; int cn = 0, flus = 1 ;\n\twhile( cc < '0' || cc > '9' ) {  if( cc == '-' ) flus = - flus ; cc = getchar() ; }\n\twhile( cc >= '0' && cc <= '9' )  cn = cn * 10 + cc - '0', cc = getchar() ;\n\treturn cn * flus ;\n}\n#define maxn 205\nint n, a[maxn] , m ; \nchar c[maxn][maxn] ;\nint check( int i ) {\n\tchar now = c[1][i];\n\trep( x, 1, 26) {\n\t\tc[1][i] = x + 'a' - 1 ;\n\t\tint f = 0 ;\n\t\trep( j, 2, n) {\n\t\t\tint pax = 0;\n\t\t\trep( k, 1, m ) {\n\t\t\t\tif( c[1][k] != c[j][k] ) ++ pax;\n\t\t\t}\n\t\t\tif(pax >= 2) { f = 1; break; }\n\t\t}\n\t\tif(f == 0) {\n\t\t\trep(j, 1, i - 1) printf( \"%c\", c[1][j] ) ;\n\t\t\tprintf(\"%c\", x + 'a' - 1);\n\t\t\trep(j, i + 1, m) printf(\"%c\", c[1][j] ) ;\n\t\t\tputs(\"\") ;\n\t\t\tc[1][i] = now;\n\t\t\treturn 1;\n\t\t}\n\t} \n\tc[1][i] = now;\n\treturn 0;\n} \nvoid solve() {\n\tn = gi(), m = gi() ;\n\trep( i, 1, n ) scanf( \"%s\", c[i] + 1 );\n\trep( i, 1, m ) {\n\t\tif( check(i) ) return;\n\t}\n\tputs(\"-1\");\n}\nsigned main() {\n\tint T = gi() ;\n\twhile( T -- ) {\n\t\tsolve() ;\n\t}\n\treturn 0 ;\n} "
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "constructive algorithms",
        "dp",
        "hashing",
        "strings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Spy-string.json",
    "editorial_link": "https://codeforces.com//blog/entry/77846",
    "editorial": "Consider all strings that differ from the first one in no more than one\r\nposition (this is either the first string or the first string with one\r\ncharacter changed). We will go through all such strings and see if they\r\ncan be the answer. To do this, go through all the strings and calculate\r\nthe number of positions where they differ.\r\n",
    "hint": []
}