{
    "link": "https://codeforces.com//contest/1690/problem/C",
    "problemId": "1423051",
    "problem_idx": "C",
    "shortId": "1690C",
    "contest_number": "1690",
    "problem_submissions": {
        "F": [
            159806986,
            159794535,
            159803560,
            159795356,
            159803611,
            159810003,
            161958741,
            159901379,
            159799120,
            159805990,
            159805447,
            159834670,
            159815479,
            159815758,
            159832304,
            159791660,
            159812232,
            159823656,
            159820324,
            159819489,
            159793231,
            159818514
        ],
        "G": [
            159789082,
            159825164,
            159831504,
            159831419,
            159832391,
            159839709,
            159834673,
            159846076,
            159851606,
            159849999,
            159835741,
            159843351,
            159856244,
            159825213,
            159841650,
            159850090,
            159841330,
            159847201,
            159833351,
            159855753
        ],
        "E": [
            159767819,
            159765301,
            159753624,
            159775193,
            159777984,
            159782869,
            159901400,
            159779470,
            159776567,
            159781160,
            159789988,
            159788967,
            159791938,
            159787307,
            159768121,
            159785541,
            159787298,
            159790761,
            159810098,
            159800474,
            159767523,
            159788062
        ],
        "D": [
            159735426,
            159753255,
            159744844,
            159759311,
            159761856,
            159749129,
            159760845,
            159762141,
            159745073,
            159747365,
            159767078,
            159764956,
            159753841,
            159768103,
            159754604,
            159758954,
            159769246,
            159761854,
            159752872,
            159766823
        ],
        "A": [
            159733481,
            159728723,
            159728980,
            159730869,
            159729579,
            159730292,
            159735804,
            159735374,
            159729478,
            159730047,
            159903613,
            159739525,
            159731331,
            159729145,
            159767995,
            159729359,
            159733585,
            159735989,
            159738194,
            159732884,
            159737457
        ],
        "B": [
            159731273,
            159733842,
            159733916,
            159746458,
            159736988,
            159735973,
            159743542,
            159743382,
            159735141,
            159735777,
            159750550,
            159745379,
            159735239,
            159770854,
            159740998,
            159742110,
            159755056,
            159746312,
            159757832,
            159745537
        ],
        "C": [
            159728882,
            159740086,
            159737931,
            159750746,
            159754739,
            159743933,
            159755874,
            159756762,
            159741517,
            159742259,
            159760507,
            159757905,
            159746715,
            159768067,
            159748475,
            159749851,
            159762561,
            159752246,
            159835353,
            159760474
        ]
    },
    "name": "C. Restoring the Duration of Tasks",
    "statement": "Recently, Polycarp completed n successive tasks.For each completed task,\r\nthe time s_i is known when it was given, no two tasks were given at the\r\nsame time. Also given is the time f_i when the task was completed. For\r\neach task, there is an unknown value d_i (d_i>0) .It is known that the\r\ntasks were completed in the order in which they came. Polycarp performed\r\nthe tasks as follows: As soon as the very first task came, Polycarp\r\nimmediately began to carry it out. If a new task arrived before Polycarp\r\nfinished the previous one, he put the new task at the end of the queue.\r\nWhen Polycarp finished executing the next task and the queue was not\r\nempty, he took a new task from the head of the queue (if the queue is\r\nempty he just waited for the next task). Find d_i (duration) of each\r\ntask.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int inf = 1'000'000'001;\nconst int infll = (inf - 1) * (inf - 1) + 1;\nconst int mod = inf + 6;\nvoid solve(){\n    int n;\n    cin >> n;\n    vector <int> s(n), f(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> s[i];\n    }\n    for (int i = 0; i < n; ++i) {\n        cin >> f[i];\n    }\n    cout << f[0] - s[0] << ' ';\n    for (int i = 1; i < n; ++i) {\n        int x = max(s[i], f[i - 1]);\n        cout << f[i] - x << ' ';\n    }\n    cout << '\\n';\n}\nint32_t main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n    int t = 1;\n    cin >> t;\n    while (t--){\n        solve();\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Restoring the Duration of Tasks.json",
    "editorial_link": "https://codeforces.com//blog/entry/103658",
    "editorial": "Accordingly, as it was said in the task, we put all tasks into the queue\r\nin the order of their arrival, then we fix the time at the beginning as\r\n. So, while there is a task in the queue, we proceed as follows: Take\r\nthe task from the queue. Take as time the maximum from the current and\r\nfrom the arrival time of the task (). We subtract the current time from\r\nthe time when the task was done (). Replace the current time with the\r\ntime the task was done () If there is a task in the queue, go to item .\r\n"
}