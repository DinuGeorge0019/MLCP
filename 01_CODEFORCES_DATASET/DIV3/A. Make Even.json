{
    "link": "https://codeforces.com//contest/1611/problem/A",
    "problemId": "1202184",
    "problem_idx": "A",
    "shortId": "1611A",
    "contest_number": "1611",
    "problem_submissions": {
        "G": [
            136919698,
            136924345,
            136928058,
            137125236
        ],
        "D": [
            136909432,
            136888068,
            136869096,
            136875871,
            136873458,
            136872703,
            136892897,
            136874114,
            136878310,
            136876576,
            136982847,
            136873530,
            136877831,
            136975464,
            136882777,
            136872332,
            136878705,
            136879548,
            136882637,
            136884556,
            136875995,
            136885445
        ],
        "C": [
            136904645,
            136879235,
            136858847,
            136855243,
            136861532,
            136858913,
            136876501,
            136863657,
            136864973,
            136856130,
            136982821,
            136863847,
            136868283,
            136968820,
            136869195,
            136914947,
            136862897,
            136869863,
            136862192,
            136866525,
            136860324,
            136867113
        ],
        "F": [
            136894434,
            136926092,
            136925788,
            136894423,
            136887654,
            136898905,
            136890793,
            136892527,
            136897622,
            136914432,
            136920232,
            136982943,
            136925360,
            136906595,
            136919174,
            136903703,
            136921493,
            136918298,
            136922728,
            136905212,
            136914690,
            136921349
        ],
        "E2": [
            136882323,
            136916663,
            136883396,
            136897153,
            136890210,
            136911911,
            136900593,
            136909227,
            136895787,
            136903952,
            136982885,
            136896820,
            136917983,
            136900669,
            136888044,
            136899257,
            136899662,
            136904447,
            136915639,
            136920739,
            136912069
        ],
        "E1": [
            136879967,
            136917077,
            136876615,
            136879938,
            136883345,
            136903050,
            136866650,
            136906813,
            136891861,
            136885925,
            136982868,
            136892962,
            136889119,
            136896344,
            136885342,
            136893182,
            136895321,
            136895279,
            136895954,
            136895593,
            136897796
        ],
        "B": [
            136853549,
            136850019,
            136845917,
            136846742,
            136848311,
            136849660,
            136855952,
            136851245,
            136847523,
            136844081,
            136855128,
            136851469,
            136843577,
            136850258,
            136848183,
            136852060,
            136853372,
            136855929,
            136847562,
            136850988
        ],
        "A": [
            136844450,
            136846022,
            136842097,
            136842084,
            136843783,
            136847130,
            136842440,
            136842943,
            136843633,
            136841984,
            136846854,
            136846415,
            136848083,
            136843263,
            136843590,
            136843624,
            136845033,
            136842923,
            136842870,
            136846917
        ]
    },
    "name": "A. Make Even",
    "statement": "Polycarp has an integer n that doesn’t contain the digit . He can do the\r\nfollowing operation with his number several (possibly zero) times:\r\nReverse the prefix of length l (in other words, l leftmost digits) of n.\r\nSo, the leftmost digit is swapped with the l-th digit from the left, the\r\nsecond digit from the left swapped with (l-1)-th left, etc. For example,\r\nif n=123456789 and l=5, then the new value of n will be 543216789.Note\r\nthat for different operations, the values of l can be different. The\r\nnumber l can be equal to the length of the number n in this case, the\r\nwhole number n is reversed.Polycarp loves even numbers. Therefore, he\r\nwants to make his number even. At the same time, Polycarp is very\r\nimpatient. He wants to do as few operations as possible.Help Polycarp.\r\nDetermine the minimum number of operations he needs to perform with the\r\nnumber n to make it even or determine that this is impossible.You need\r\nto answer t independent test cases.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n//Make Even\nint main()\n{\n    int t;\n    std::cin>>t;\n    for(int __=0;__!=t;++__){\n        std::string x;\n        std::cin>>x;\n        if(!(x[x.size()-1]&1)){\n            printf(\"0\\n\");\n        }else{\n            if(!(x[0]&1)){\n                printf(\"1\\n\");\n            }else {\n                for(auto&z:x){\n                    if(!(z&1)){\n                        printf(\"2\\n\");\n                        goto prox;\n                    }\n                }\n                printf(\"-1\\n\");\n            }\n        }\n        prox:{}\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Make Even.json",
    "editorial_link": "https://codeforces.com//blog/entry/97288",
    "editorial": "If the number is already even, then nothing needs to be done, so the\r\nanswer in this case is .Now letâs recall the divisibility by : a number\r\nis divisible by if and only if its last digit is divisible by .It\r\nfollows that if there are no even digits in our number, then the answer\r\nis .Letâs take a look at our operation. What is going on? The first\r\ndigit always changes with the digit numbered . In particular, when we\r\nreverse the entire number, the first digit is swapped with the last.\r\nNote that no other digit, except for the first one at the current\r\nmoment, canât be the last.Therefore, you can do this: if the first digit\r\nof a number is divisible by , then we reverse the whole number. The\r\nfirst digit will become the last, and the number will become even.\r\nTherefore, you only need to do one operation.Now, what if the first\r\ndigit of a number is odd? In this case, we can find the first even digit\r\nin the number (let it be at position ), and reverse the prefix of length\r\n(in one operation). Now the first digit of our number has become even,\r\nand we can use the previous case (one more operation). Thus, we will do\r\nonly operations.\r\n",
    "hint": []
}