{
    "link": "https://codeforces.com//contest/1933/problem/C",
    "problemId": "2499499",
    "problem_idx": "C",
    "shortId": "1933C",
    "contest_number": "1933",
    "problem_submissions": {
        "F": [
            248591555,
            248583197,
            248612069,
            248598539,
            248597755,
            248643416,
            248594242,
            248617583,
            248616936,
            248585168,
            248614930,
            248616674,
            248602103,
            248594258,
            248595945,
            248611877,
            248611178,
            248616575,
            248616309,
            248622503,
            248617674
        ],
        "E": [
            248548292,
            248552431,
            248546385,
            248561374,
            248556960,
            248652019,
            248551455,
            248552418,
            248555156,
            248564471,
            248563614,
            248548908,
            248551471,
            248562111,
            248581222,
            248571134,
            248569128,
            248568252,
            248572929,
            248557480,
            248572070
        ],
        "D": [
            248528452,
            248534682,
            248520947,
            248525201,
            248536025,
            248654461,
            248561233,
            248528372,
            248531274,
            248536504,
            248531753,
            248522180,
            248521565,
            248548476,
            248549982,
            248534397,
            248534785,
            248540283,
            248533460,
            248533936,
            248522543
        ],
        "C": [
            248516161,
            248524318,
            248516570,
            248527729,
            248522314,
            248522710,
            248519907,
            248542337,
            248516141,
            248527195,
            248558597,
            248543262,
            248520926,
            248522993,
            248519350,
            248521925,
            248526364,
            248527609,
            248534164
        ],
        "B": [
            248505336,
            248503901,
            248517888,
            248511472,
            248507016,
            248507736,
            248508836,
            248511885,
            248506077,
            248516238,
            248525805,
            248512121,
            248503633,
            248509962,
            248507053,
            248512665,
            248511061,
            248506937,
            248515209
        ],
        "A": [
            248494249,
            248494304,
            248494559,
            248496663,
            248496909,
            248500497,
            248494197,
            248494587,
            248497967,
            248494007,
            248495080,
            248494500,
            248498090,
            248639683,
            248493804,
            248494937,
            248495858,
            248498778,
            248497100,
            248494989,
            248499649
        ],
        "G": [
            248742272,
            248790545,
            248713826,
            248773615,
            248759515
        ]
    },
    "name": "C. Turtle Fingers  Count the Values of k",
    "statement": "You are given three integers a, b and l (a,b,l>0). It can be shown that\r\nthere always exists a way to choose (i.e.\r\nge 0) integers k, x, and y such that l = k\r\ncdot a^x\r\ncdot b^y. Your task is to find the number of distinct possible values of\r\nk across all such ways.\r\n",
    "solutions": [
        "/// My implementation sucks\n#include <bits/stdc++.h>\n#define ll long long\n#define f first\n#define s second\n#define ii pair<int,int>\n#define sz(x) (int) (x).size()\n#define pb push_back\n#define all(x) (x).begin(),(x).end()\nusing namespace std;\ntemplate<class T1,class T2> bool maximize(T1 &a,T2 b) {return(a<b ? a=b,1:0);};\ntemplate<class T1,class T2> bool minimize(T1 &a,T2 b) {return(a>b ? a=b,1:0);};\n\nvoid leeminhduc2()\n{\n    vector <int> k;\n    int a,b,l;\n    cin >> a >>b >> l;\n    for (int cur=1;cur<=l;cur*=a)\n            if (l%cur==0)\n        for (int cur2=1;cur2<=l/cur;cur2*=b)\n            if ((l/cur)%cur2==0) k.pb((l/cur)/cur2);\n    sort(k.begin(),k.end());\n    k.resize(unique(k.begin(),k.end())-k.begin());\n    cout << sz(k) << \"\\n\";\n}\nsigned main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    int tc=1;\n    cin >> tc;\n    while (tc--)\n    leeminhduc2();\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math",
        "number theory"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Turtle Fingers  Count the Values of k.json",
    "editorial_link": "https://codeforces.com//blog/entry/126560",
    "editorial": "Notice that there are not so many suitable values of and (since and ).\r\nThis allows us to iterate through all suitable pairs of and and thus\r\nfind all different suitable .\r\n"
}