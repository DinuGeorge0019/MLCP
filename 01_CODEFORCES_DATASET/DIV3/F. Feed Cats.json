{
    "link": "https://codeforces.com//contest/1932/problem/F",
    "problemId": "2483353",
    "problem_idx": "F",
    "shortId": "1932F",
    "contest_number": "1932",
    "problem_submissions": {
        "F": [
            247041710,
            247046104,
            247061921,
            247064848,
            247065969,
            247067691,
            247069162,
            247061542,
            247047981,
            247066270,
            247064434,
            247030399,
            247061453,
            247062334,
            247071817,
            247074345,
            247065688,
            247070314,
            247059158
        ],
        "E": [
            247027158,
            247035724,
            247041508,
            247047392,
            247034566,
            247041281,
            247042901,
            247046269,
            247024107,
            247043959,
            247047309,
            247065699,
            247024211,
            247033451,
            247040047,
            247039052,
            247047772,
            247051378,
            247048000
        ],
        "D": [
            247025048,
            247024422,
            247027652,
            247025385,
            247027600,
            247026819,
            247026306,
            247030155,
            247057812,
            247034591,
            247024028,
            247050558,
            247039827,
            247050562,
            247026148,
            247035436,
            247033238,
            247031618,
            247035376
        ],
        "C": [
            247015841,
            247009093,
            247007805,
            247004912,
            247003665,
            247007946,
            247004168,
            247011243,
            247008047,
            247006061,
            247009525,
            247006826,
            247014290,
            247003444,
            247011933,
            247011062,
            247018803,
            247012040,
            247018641
        ],
        "B": [
            247001265,
            246998420,
            246995287,
            246992797,
            246996723,
            246996283,
            246995886,
            247000182,
            247000282,
            246995830,
            246996405,
            246997168,
            246998810,
            246995354,
            247001435,
            246999756,
            247001109,
            246996459,
            247006888
        ],
        "A": [
            246992414,
            246989927,
            246990007,
            246989302,
            246989500,
            246989572,
            246991281,
            246989684,
            246995787,
            246990634,
            246991174,
            246992575,
            246993925,
            246989365,
            246994593,
            246993034,
            246991641,
            246989247,
            246991878
        ],
        "G": [
            247104441,
            247824611,
            247147433,
            247796255
        ]
    },
    "name": "F. Feed Cats",
    "statement": "There is a fun game where you need to feed cats that come and go. The\r\nlevel of the game consists of n steps. There are m cats; the cat i is\r\npresent in steps from l_i to r_i, inclusive. In each step, you can feed\r\nall the cats that are currently present or do nothing. If you feed the\r\nsame cat more than once, it will overeat, and you will immediately lose\r\nthe game. Your goal is to feed as many cats as possible without causing\r\nany cat to overeat. Find the maximum number of cats you can\r\nfeed.Formally, you need to select several integer points from the\r\nsegment from 1 to n in such a way that among given segments, none covers\r\ntwo or more of the selected points, and as many segments as possible\r\ncover one of the selected points.\r\n",
    "solutions": [
        "//Be Name KHODA\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n#define pb push_back\n#define pp pop_back\n#define lb lower_bound\n#define ub upper_bound\n#define cl clear\n#define bg begin\n#define arr(x) array<int , x>\n#define endl '\\n'\n\nint t , n , m;\nvector<int> sgsr[1000001] , sgsl[1000001];\nmultiset<int> ls;\nll dp[1000001];\n\nint main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    cin >> t;\n    for(int ii = 0 ; ii < t ; ii++){\n        cin >> n >> m;\n        for(int i = 1 ; i <= n ; i++) sgsr[i].cl() , sgsl[i].cl();\n        fill(&dp[0] , &dp[n + 1] , 0) , ls.cl();\n        for(int i = 0 ; i < m ; i++){\n            int l , r;\n            cin >> l >> r;\n            sgsr[r].pb(l) , sgsl[l].pb(r);\n        }\n        dp[0] = 0;\n        for(int i = 1 ; i <= n ; i++){\n            for(int l : sgsr[i - 1]) ls.erase(ls.find(l));\n            for(int r : sgsl[i]) ls.insert(i);\n            if(ls.empty()) dp[i] = dp[i - 1];\n            else{\n                ll dd = dp[*(ls.bg()) - 1] + (1ll * (int)ls.size());\n                dp[i] = max(dd , dp[i - 1]);\n            }\n        }\n        ll o = 0;\n        for(int i = 0 ; i <= n ; i++) o = max(o , dp[i]);\n        cout << o << endl;\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "sortings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Feed Cats.json",
    "editorial_link": "https://codeforces.com//blog/entry/126196",
    "editorial": "Let\u00e2\u0080\u0099s use dynamic programming. Let be the answer for the first moves ().\r\nThen there are two possible cases: we fed the cats on step or not.If we\r\ndid not feed the cats on step , then , because this is the best result\r\nfor the first moves, and nothing has changed on this move.If we fed the\r\ncats on step , then we could not have fed the cats later than when the\r\nfirst of the present cats arrived, because then it would overeat. Using\r\nthe structure, we will find the step at which it arrived. In this case,\r\nwe will feed all the present cats and can choose the best way to feed\r\nthe cats for the first moves.At each of the moves, we will choose the\r\nbest of the two options.To maintain the with the moments of the cats\u00e2\u0080\u0099\r\narrivals, we will add them at these moments in time and remove them at\r\nthe departure moments (for each , we can store all that will leave at\r\nthat moment).\r\n"
}