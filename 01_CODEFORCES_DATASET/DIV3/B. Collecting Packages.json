{
    "link": "https://codeforces.com//contest/1294/problem/B",
    "problemId": "521708",
    "problem_idx": "B",
    "shortId": "1294B",
    "contest_number": "1294",
    "problem_submissions": {
        "F": [
            69345723,
            69341742,
            69353873,
            69354168,
            69362489,
            69359650,
            69346353,
            69348606,
            69346845,
            69359883,
            69366706,
            69362024,
            69366917,
            69346932,
            69357467,
            69365166,
            69348414,
            69365647,
            69364629
        ],
        "E": [
            69338805,
            69351779,
            69339037,
            69344007,
            69344151,
            69343043,
            69361056,
            69360226,
            69364740,
            69351017,
            69346873,
            69323356,
            69353170,
            69364089,
            69360143,
            69354125,
            69351861,
            69359421,
            69360122,
            69354120
        ],
        "D": [
            69326821,
            69327425,
            69329129,
            69327902,
            69327595,
            69331659,
            69323447,
            69329706,
            69328760,
            69337985,
            69335298,
            69329000,
            69425046,
            69424930,
            69331368,
            69329469,
            69336157,
            69331418,
            69331535,
            69332903,
            69334125
        ],
        "C": [
            69316704,
            69318571,
            69324078,
            69319609,
            69320098,
            69321493,
            69318537,
            69320636,
            69318004,
            69321999,
            69327286,
            69331832,
            69318703,
            69317985,
            69329221,
            69324244,
            69332444,
            69322784,
            69323291
        ],
        "B": [
            69312164,
            69313583,
            69315904,
            69322215,
            69312293,
            69313735,
            69314120,
            69311768,
            69311366,
            69316184,
            69310957,
            69317833,
            69313722,
            69313259,
            69323626,
            69316316,
            69314611,
            69315633,
            69316963
        ],
        "A": [
            69304908,
            69306368,
            69307420,
            69304625,
            69304112,
            69305282,
            69304786,
            69304157,
            69304143,
            69307552,
            69304615,
            69309994,
            69304636,
            69303953,
            69304661,
            69308930,
            69306713,
            69306352,
            69305710
        ]
    },
    "name": "B. Collecting Packages",
    "statement": "There is a robot in a warehouse and n packages he wants to collect. The\r\nwarehouse can be represented as a coordinate grid. Initially, the robot\r\nstays at the point (0, 0). The i-th package is at the point (x_i, y_i).\r\nIt is guaranteed that there are no two packages at the same point. It is\r\nalso guaranteed that the point (0, 0) doesn\u2019t contain a package.The\r\nrobot is semi-broken and only can move up (\u201d) and right (\u201d). In other\r\nwords, in one move the robot can go from the point (x, y) to the point\r\n(x + 1, y) or to the point (x, y + 1).As we say above, the robot wants\r\nto collect all n packages (). He wants to do it with the minimum\r\npossible number of moves. If there are several possible traversals, the\r\nrobot wants to choose the lexicographically smallest path.The string s\r\nof length n is lexicographically less than the string t of length n if\r\nthere is some index 1\r\nle j\r\nle n that for all i from 1 to j-1 s_i = t_i and s_j < t_j. It is the\r\nstandard comparison of string, like in a dictionary. Most programming\r\nlanguages compare strings in this way.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define PB push_back\n#define LL long long\n#define PII pair<int,int>\n#define FI first\n#define SE second\nconst int INF=0x3f3f3f3f;\nconst int N=1e6+7,mod=1e9+7;\nint n,m;\nstruct node{\n    int x,y;\n    bool operator<(const node &t)const{\n        if(x==t.x)return y<t.y;\n        return x<t.x;\n    }\n}a[N];\nint main()\n{\n    int t;\n    cin>>t;\n    while(t--){\n        scanf(\"%d\",&n);\n        for(int i=1;i<=n;i++){\n            scanf(\"%d%d\",&a[i].x,&a[i].y);\n        }\n        sort(a+1,a+1+n);\n        a[0].x=a[0].y=0;\n        int flag=1;\n        for(int i=1;i<=n;i++){\n            if(a[i].y<a[i-1].y){\n                flag=0;break;\n            }\n        }\n        if(flag==0){\n            printf(\"NO\\n\");\n            continue;\n        }\n        puts(\"YES\");\n        for(int i=0;i<n;i++){\n            while(a[i].x<a[i+1].x){\n                a[i].x++;\n                printf(\"R\");\n            }\n            while(a[i].y<a[i+1].y){\n                a[i].y++;\n                printf(\"U\");\n            }\n        }printf(\"\\n\");\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Collecting Packages.json",
    "editorial_link": "https://codeforces.com//blog/entry/73274",
    "editorial": "It is obvious that if there is a pair of points and such that and then\r\nthe answer is \"\". It means that if the answer is \"\" then there is some\r\nordering of points such that and because we can only move right or up.\r\nBut what is this ordering? it is just sorted order of points (firstly by\r\nthen by ).So we can sort all points, check if this ordering is valid and\r\ntraverse among all these points. For each from to firstly do moves to\r\nthe right then do moves to the up (because this order minimizing the\r\nanswer lexicographically).Time complexity: or .\r\n"
}