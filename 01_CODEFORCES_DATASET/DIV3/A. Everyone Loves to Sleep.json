{
    "link": "https://codeforces.com//contest/1714/problem/A",
    "problemId": "1490427",
    "problem_idx": "A",
    "shortId": "1714A",
    "contest_number": "1714",
    "problem_submissions": {
        "F": [
            166579305,
            166565691,
            166580443,
            166573014,
            166573474,
            166592525,
            166595105,
            166548029,
            166593205,
            166686575,
            166579941,
            166590847,
            166638992,
            167603752
        ],
        "D": [
            166555174,
            166529424,
            166533941,
            166553024,
            166532466,
            166537534,
            166569263,
            166563818,
            166546107,
            166686361,
            166550012,
            166577360,
            166525263,
            166545147,
            166538583,
            166541251,
            166536599,
            166539458,
            166766162,
            166567140,
            166550628,
            166541107
        ],
        "G": [
            166545336,
            166572008,
            166558804,
            166581190,
            166549499,
            166568428,
            166563357,
            166570492,
            166570829,
            166686732,
            166586648,
            166587656,
            166562027,
            166554683,
            166566856,
            166569305,
            166581306,
            166572830,
            166766125,
            166554830,
            166567931,
            166573074
        ],
        "E": [
            166529226,
            166550151,
            166552214,
            166540138,
            166557091,
            166551342,
            166540892,
            166583808,
            166558113,
            166686473,
            166559850,
            203226761,
            166572711,
            166543154,
            166563505,
            166554394,
            166558430,
            166551333,
            166551809,
            166536566,
            166532529,
            166559461
        ],
        "C": [
            166508236,
            166513547,
            166511820,
            166514654,
            166516790,
            166512293,
            166728853,
            166510608,
            166524319,
            166522144,
            166686237,
            166521175,
            166545986,
            166510036,
            166508148,
            166522114,
            166515443,
            166510078,
            166516228,
            166524460,
            166519794,
            166509906
        ],
        "B": [
            166507200,
            166510494,
            166509013,
            166507825,
            166510367,
            166509254,
            166728113,
            166507901,
            166516960,
            166518989,
            166685849,
            166514261,
            166539890,
            166507950,
            166506803,
            166510018,
            166509016,
            166508114,
            166511943,
            166508752,
            166512719,
            166508756
        ],
        "A": [
            166506659,
            166508343,
            166507357,
            166506909,
            166560580,
            166507658,
            166727935,
            166506862,
            166512344,
            166510563,
            166511944,
            166685755,
            166510846,
            166535694,
            166506790,
            166510397,
            166508153,
            166507023,
            166506968,
            166508973,
            166507229,
            166507722,
            166506864
        ]
    },
    "name": "A. Everyone Loves to Sleep",
    "statement": "Vlad, like everyone else, loves to sleep very much.Every day Vlad has to\r\ndo n things, each at a certain time. For each of these things, he has an\r\nalarm clock set, the i-th of them is triggered on h_i hours m_i minutes\r\nevery day (0\r\nle h_i < 24, 0\r\nle m_i < 60). Vlad uses the 24-hour time format, so after h=12, m=59\r\ncomes h=13, m=0 and after h=23, m=59 comes h=0, m=0.This time Vlad went\r\nto bed at H hours M minutes (0\r\nle H < 24, 0\r\nle M < 60) and asks you to answer: how much he will be able to sleep\r\nuntil the next alarm clock.If any alarm clock rings at the time when he\r\nwent to bed, then he will sleep for a period of time of length 0.\r\n",
    "solutions": [
        "/*\nDiv 3, I literally don't care edition\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define rep(i,m,n) for (ll i=m;i<=n;i++)\n#define reb(i,m,n) for (ll i=m;i>=n;i--)\n#define rv(i,vt) for (auto i:vt)\n#define ii pair<ll,ll>\n#define vi vector<ll>\n#define F first\n#define S second\n#define pb push_back\nusing namespace std;\nconst ll N=1e6+5,mod=1e9+7;\nii x,a[N],res;\nll n;\nvoid solo()\n{\n    res={24,0};\n    cin>>n>>x.F>>x.S;\n    rep(i,1,n){\n        cin>>a[i].F>>a[i].S;\n        if (a[i].S<x.S) a[i].S+=60,a[i].F--;\n        if (a[i].F<x.F) a[i].F+=24;\n        res=min(res,{a[i].F-x.F,a[i].S-x.S});\n    }\n    cout<<res.F<<\" \"<<res.S;\n}\nint main()\n{\n   ios_base::sync_with_stdio(0);\n   cin.tie(0);\n   cout.tie(0);\n   ll ts=1;\n   cin>>ts;\n   while (ts--){\n       solo();\n       cout<<endl;\n   }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Everyone Loves to Sleep.json",
    "editorial_link": "https://codeforces.com//blog/entry/105549",
    "editorial": "To begin with, let\u00e2\u0080\u0099s learn how to determine how much time must pass\r\nbefore the alarm to trigger. If the alarm time is later than the current\r\none, then obviously minutes should pass. Otherwise, this value will be\r\nnegative and then it should pass since a full day must pass, not\r\nincluding the time from the alarm to the current time. We just need to\r\nfind the minimum number of minutes among all the alarm clocks.Due to\r\nsmall constrains, the problem can also be solved by stimulating the\r\nsleep process: increase the answer by and check whether any alarm will\r\nwork after this time.\r\n"
}