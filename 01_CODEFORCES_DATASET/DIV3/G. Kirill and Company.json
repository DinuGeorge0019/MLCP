{
    "link": "https://codeforces.com//contest/1741/problem/G",
    "problemId": "1580863",
    "problem_idx": "G",
    "shortId": "1741G",
    "contest_number": "1741",
    "problem_submissions": {
        "G": [
            175658655,
            175776548,
            175778289,
            175654398,
            175880793,
            175656924,
            175637609,
            175729544,
            176113562
        ],
        "F": [
            175634710,
            175634330,
            175639332,
            175634963,
            175641391,
            175642288,
            175651066,
            175638700,
            175650758,
            175650474,
            175650413,
            175696195,
            175630855,
            175641068,
            175713558,
            175713496,
            175713405,
            175713348,
            175712166,
            175712032,
            175710248,
            175653725,
            188881508,
            175657954,
            175660445,
            175647171
        ],
        "E": [
            175612842,
            175607012,
            175602583,
            175610869,
            175597285,
            175603137,
            175605173,
            175613578,
            175612154,
            175602225,
            175611227,
            175622904,
            175609226,
            175636862,
            175596615,
            175626249,
            175618084,
            175609955,
            175614301,
            175619312
        ],
        "D": [
            175600792,
            175598753,
            175587861,
            175602078,
            175590264,
            175593902,
            175593998,
            175614050,
            175599808,
            175588551,
            175598698,
            175602136,
            175595713,
            175593039,
            175644398,
            175600557,
            175714317,
            175605116,
            175598500,
            175596629,
            175607880
        ],
        "C": [
            175590194,
            175585809,
            175713811,
            175588824,
            175588091,
            175585251,
            175586131,
            175579401,
            175581660,
            175576056,
            175582459,
            175579198,
            175578713,
            175576074,
            175578615,
            175581737,
            175586416,
            175584583,
            175585714,
            175593866
        ],
        "B": [
            175579146,
            175570687,
            175567044,
            175573608,
            175578477,
            175570022,
            175570101,
            175572940,
            175567692,
            175571900,
            175569281,
            175569338,
            175568386,
            175570488,
            175571800,
            175575494,
            175567609,
            175569238,
            175585403
        ],
        "A": [
            175563566,
            175564993,
            175563738,
            175564174,
            175564333,
            175564490,
            175563949,
            175567859,
            175563695,
            175565037,
            175565795,
            175565035,
            175564013,
            175564907,
            175683101,
            175567126,
            175709307,
            175566606,
            175563970,
            175564612,
            175568510
        ]
    },
    "name": "G. Kirill and Company",
    "statement": "Kirill lives on a connected undirected graph of n vertices and m edges\r\nat vertex 1. One fine evening he gathered f friends, the i-th friend\r\nlives at the vertex h_i. So all friends are now in the vertex 1, the\r\ni-th friend must get to his home to the vertex h_i.The evening is about\r\nto end and it is time to leave. It turned out that k (k\r\nle 6) of his friends have no cars, and they would have to walk if no one\r\ngives them a ride. One friend with a car can give a ride to number of\r\nfriends without cars, but only if he can give them a ride by driving\r\nalong one of the paths to his house.For example, in the graph below, a\r\nfriend from vertex h_i=5 can give a ride to friends from the following\r\nsets of vertices: [2, 3], [2, 4], [2], [3], [4], but can’t give a ride\r\nto friend from vertex 6 or a set [3, 4]. Kirill wants as few friends as\r\npossible to have to walk. Help him find the possible number.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define dprintf(...) //printf(__VA_ARGS__)\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\n\nstruct Solver {\n  int n, nped, ncar;\n  vector<vector<int>> adj;\n  vector<int> dist;\n  vector<int> pedmask;  // [u] => 1 << p | ...\n  vector<int> u_car, u_ped;\n  vector<vector<int>> u2cars;\n  vector<vector<int>> car2masks;\n\n  void solve() {\n    read();\n\n    {\n      dist.assign(n, INT_MAX);\n      dist[0] = 0;\n\n      queue<int> Q;\n      Q.push(0);\n      while (!Q.empty()) {\n        int u = Q.front(); Q.pop();\n        for (int v : adj[u]) {\n          if (dist[u] + 1 < dist[v]) {\n            dist[v] = dist[u] + 1;\n            Q.push(v);\n          }\n        }\n      }\n    }\n\n    ncar = u_car.size();\n    car2masks.assign(ncar, vector<int>());\n    {\n      // (u, mask)\n      map<PII, int> dist2;\n      queue<PII> Q;\n      Q.push(PII(0, 0));\n      dist2[PII(0, 0)] = 0;\n\n      while (!Q.empty()) {\n        PII p = Q.front(); Q.pop();\n        int u = p.first;\n        int mask = p.second;\n        //dprintf(\"(u=%d,mask=%d):%d\\n\", u, mask, dist2[p]);\n        for (int car_idx : u2cars[u]) {\n          car2masks[car_idx].push_back(mask);\n        }\n\n        for (int v : adj[u]) {\n          if (dist[v] != dist[u] + 1) continue;\n          PII q(v, mask | pedmask[v]);\n          if (dist2.count(q) == 0 || dist2[p] + 1 < dist2[q]) {\n            dist2[q] = dist2[p] + 1;\n            Q.push(q);\n          }\n        }\n      }\n    }\n\n    for (auto& cm : car2masks) {\n      sort(cm.begin(), cm.end());\n      cm.erase(unique(cm.begin(), cm.end()), cm.end());\n    }\n\n    /*\n    {dprintf(\"i:    \"); for (int i = 0; i < n; i++) dprintf(\" %d\", i); dprintf(\"\\n\");}\n    {dprintf(\"dist: \"); for (auto d:dist) dprintf(\" %d\", d); dprintf(\"\\n\");}\n    {dprintf(\"pedms:\"); for (int i = 0; i < n; i++) dprintf(\" %d\", pedmask[i]); dprintf(\"\\n\");}\n    {dprintf(\"u_car:\"); for (auto u:u_car) dprintf(\" %d\", u); dprintf(\"\\n\");}\n    {dprintf(\"u_ped:\"); for (auto u:u_ped) dprintf(\" %d\", u); dprintf(\"\\n\");}\n    {dprintf(\"carms:\"); \n     for (auto v:car2masks) {\n        dprintf(\" [\");\n        for(auto m:v) {\n          for (int i = 0; i < nped; i++) if (m & (1 << i)) dprintf(\"%d+\", i);\n          dprintf(\" \");\n        }\n        dprintf(\"]\");\n     }\n     dprintf(\"\\n\");\n    }\n    dprintf(\"nped=%d\\n\", nped);\n    printf(\"\\n\\n\");*/\n\n    // [caridx][mask];\n    vector<vector<int>> dp(ncar+1, vector<int>(1<<nped, 0));\n    for (int car_idx = ncar; car_idx >= 0; car_idx--) {\n      for (int mask = 0; mask < (1 << nped); mask++) {\n        int& res = dp[car_idx][mask];\n        if (car_idx == ncar) {\n          res = 0;\n          for (int i = 0; i < nped; i++) {\n            if ((mask & (1 << i)) == 0) res++;\n          }\n        } else {\n          res = nped;\n          for (int m : car2masks[car_idx]) {\n            res = min(res, dp[car_idx+1][mask|m]);\n          }\n        }\n      }\n    }\n\n    printf(\"%d\\n\", dp[0][0]);\n  }\n\n  void read() {\n    int m;\n    cin >> n >> m;\n    adj.assign(n, vector<int>());\n\n    for (int i = 0; i < m; i++) {\n      int u, v;\n      cin >> u >> v; --u; --v;\n      adj[u].push_back(v);\n      adj[v].push_back(u);\n    }\n\n    vector<int> houses, ped;\n    {\n      int f; cin >> f;\n      houses.resize(f);\n      for (int i = 0; i < f; i++) { cin >> houses[i]; --houses[i]; }\n    }\n    {\n      cin >> nped;\n      ped.resize(nped);\n      for (int i = 0; i < nped; i++) { cin >> ped[i]; --ped[i]; }\n    }\n\n    pedmask.assign(n, 0);\n    u2cars.assign(n, vector<int>());\n\n    for (int i = 0; i < houses.size(); i++) {\n      int u = houses[i];\n      int p = -1;\n      for (int j = 0; j < ped.size(); j++) {\n        if (ped[j] == i) p = j;\n      }\n\n      if (p >= 0) {\n        u_ped.push_back(u);\n        pedmask[u] |= 1 << p;\n      } else {\n        int car_idx = u_car.size();\n        u_car.push_back(u);\n        u2cars[u].push_back(car_idx);\n      }\n    }\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false); cin.tie(0);\n\n  int T; cin >> T;\n  for (int cs = 1; cs <= T; cs++) {\n    Solver solver;\n    solver.solve();\n  }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "dfs and similar",
        "dp",
        "flows",
        "graphs",
        "shortest paths"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\G. Kirill and Company.json",
    "editorial_link": "https://codeforces.com//blog/entry/107908",
    "editorial": "To begin with, letâs learn how to find possible sets of friends for the\r\nvertex, whom he can give a ride, in the form of masks. Letâs use a\r\nbreadth first search, every time we find the shortest path to the vertex\r\nwith the previous vertex , we will add the masks of the vertex to the\r\nmasks of the vertex , updating them with friends living in .Now,\r\naccording to the resulting sets, you need to get the best combination of\r\nthem. We will find it using the knapsack problem, we will use masks as\r\nweights, and the total weight will be the bitwise of the selected set.\r\n",
    "hint": []
}