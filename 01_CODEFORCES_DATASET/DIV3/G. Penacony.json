{
    "link": "https://codeforces.com//contest/1996/problem/G",
    "problemId": "2778594",
    "problem_idx": "G",
    "shortId": "1996G",
    "contest_number": "1996",
    "problem_submissions": {
        "G": [
            272815559,
            272903634,
            272903592,
            272903418,
            272850378,
            272829160,
            272846769,
            272917148,
            272843968,
            272801966,
            272891447,
            273051360,
            273051300,
            272852709,
            277596550
        ],
        "F": [
            272784299,
            272793161,
            272807689,
            272809360,
            272830969,
            272798046,
            272797379,
            272844703,
            272806635,
            272800919,
            272804361,
            272807242,
            272813027,
            272855036,
            272810332,
            272821433,
            272800404,
            272820587,
            272829162,
            272807664,
            272816226,
            272821599,
            272820591,
            272815918
        ],
        "E": [
            272768761,
            272775513,
            272762810,
            272775844,
            272823416,
            272782075,
            272761261,
            272777167,
            272789153,
            272785690,
            272777083,
            272786909,
            272772099,
            272795998,
            272776949,
            272765827,
            272789445,
            272789546,
            272779861,
            272787485
        ],
        "D": [
            272761438,
            272765354,
            272813661,
            272767517,
            272818911,
            272771177,
            272779573,
            272778986,
            272764786,
            272769566,
            272775352,
            272769622,
            272774700,
            272762959,
            272779115,
            272762141,
            272771898,
            272774147,
            272768381,
            272773685,
            272774940
        ],
        "C": [
            272749300,
            272751224,
            272747619,
            272760085,
            272816579,
            272747209,
            272749428,
            272754671,
            272751382,
            272753279,
            272756574,
            272752694,
            272753758,
            272752271,
            272750229,
            272749232,
            272759739,
            272751545,
            272748871,
            272750894
        ],
        "B": [
            272737073,
            272739985,
            272740771,
            272742756,
            272810526,
            272736341,
            272731072,
            272746867,
            272739153,
            272741965,
            272746544,
            272740783,
            272737062,
            272739328,
            272737959,
            272736354,
            272749397,
            272742081,
            272736698,
            272740417
        ],
        "A": [
            272724627,
            272725221,
            272724958,
            272806237,
            272724506,
            272723181,
            272724288,
            272724605,
            272723501,
            272737370,
            272725890,
            272725751,
            272728152,
            272725138,
            272723459,
            272723672,
            272729720,
            272724250,
            272726300
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131948",
    "editorial": "There are two configurations to satisfy every friendship (a,b)\n: activate all the roads from a?a+1???b\n or b???n?1???a\n. Let's fix a road we deactivate. Say it goes from i?i+1\n. Observe that the configuration for all friendships is fixed to one of the two cases. For example, if a?i<b\n, then we must use the second configuration.\n\nWe can try fixing every road and taking the minimum of number of roads. This can be done with sweep line. Once we reach i=a\n for any friendship, we toggle to the second configuration. Once we reach b\n, we toggle back to the first. We can track maintained roads by performing a range addition on a lazy propagated segment tree for each point covered by the current configuration. The number of roads required is n\n minus the number of occurrences of zeroes in the segment tree, which can be tracked with Counting Minimums in a Segment Tree.",
    "name": "G. Penacony",
    "statement": "On , there exists n houses and n roads. There exists a road between\r\nhouse i and i+1 for all 1\r\nleq i\r\nleq n-1 and a road between house n and house 1. All roads are\r\nbidirectional. However, due to the crisis on Penacony, the overseeing\r\nfamily has gone into debt and may not be able to maintain all\r\nroads.There are m pairs of friendships between the residents of\r\nPenacony. If the resident living in house a is friends with the resident\r\nliving in house b, there must be a path between houses a and b through\r\nmaintained roads. What is the minimum number of roads that must be\r\nmaintained?\r\n",
    "solutions": [
        "/**   - dwuy - 　　　　　 ／＞　   フ　　　　　 | 　_　 _|　 　　　 ／`ミ _x ノ　　 　 /　　　 　 |　　　 /　  ヽ　　 ?　／￣|　　 |　|　|　| (￣ヽ＿_ヽ_)_)　＼二つ **/#include <bits/stdc++.h> #define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL)#define file(a) freopen(a\".inp\",\"r\",stdin); freopen(a\".out\", \"w\",stdout)#define fi first#define se second#define endl \"\\n\"#define len(s) (int)((s).size())#define MASK(k)(1LL<<(k))#define TASK \"test\"#define int long long using namespace std; typedef tuple<int, int, int> tpiii;typedef pair<double, double> pdd;typedef pair<int, int> pii;typedef long long ll; const long long OO = 1e18;const int MOD = 1e9 + 7;const int INF = 1e9;const int MX = 500005; struct Node{    int val;    int sum;     Node(int _val=0, int _sum=0){        val=_val;        sum=_sum;    }}; struct SMT{ /// just a SegMent Tree    int n;    vector<Node> tree;     SMT(int _n=0): n(_n) {        tree.assign(n*4+5, Node());    }     void update(int l, int r, int id, int u, int v, int val){        if (l>v || r<u) return;        if (l>=u && r<=v){            int _id= id<<1;            tree[id].val+=val;            if (tree[id].val==0){                if (l!=r) tree[id].sum = tree[_id].sum + tree[_id|1].sum;                else tree[id].sum=0;            }            else tree[id].sum = r-l+1;            return;        }        int mid = (l+r)>>1;        int _id = id<<1;        update(l, mid, _id, u, v, val);        update(mid+1, r, _id|1, u, v, val);        if (tree[id].val==0) tree[id].sum = tree[_id].sum+tree[_id|1].sum;    }     void update(int u, int v, int val){        update(1, n, 1, u, v, val);    }}; int n, m, k, q;string s, t;int a[MX];int b[MX];vector<int> G[MX];vector<int> rG[MX]; void solve(){    cin >> n >> m;    for(int i=1; i<=n + n; i++) G[i].clear(), rG[i].clear();    for(int i=1; i<=m; i++){        int u, v;        cin >> u >> v;        G[u].push_back(v);        G[v].push_back(u);    }        int ans = n;    int cur = 0;    SMT smt(n + n + 5);    for(int u=1; u<=n; u++){        for(int v: G[u]) if(v > u) smt.update(u, v - 1, 1), rG[u].push_back(v);    }    ans = min(ans, smt.tree[1].sum);    // cout << smt.tree[1].sum << endl;    for(int i=n+1; i<=n+n; i++){        int u = i - n;        for(int v: rG[u]){            smt.update(u, v - 1, -1);            // cout << \" + \" << u << ' ' << v << endl;        }         // cout << smt.tree[1].sum << endl;        for(int v: G[u]) if(v >= u? v : v + n < i){            smt.update(v >= u? v : v + n, i - 1, 1);            // cout << (v >= u? v : v + n) << ' ' << i - 1 << \" - \" << 1 << endl;            rG[v >= u? v : v + n].push_back(i);        }        ans = min(ans, smt.tree[1].sum);        // cout << \" \" << i << ' ' << u << \"   \" << smt.tree[1].sum << endl;    }    cout << ans << endl;} int32_t main(){    fastIO;    //file(TASK);     int q;    cin >> q;    while(q--){        solve();    }     return 0;}   "
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "graphs",
        "greedy",
        "hashing"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\G. Penacony.json",
    "hint": [
        "Hint 1 Delete one road, now path between any pair of friends is unique. Try to count paths which do not lie between any pair of friends.",
        "Hint 2 Given an array A, and multiple queries and . Can you find the minimum value in this range, and how many times it appears?"
    ]
}