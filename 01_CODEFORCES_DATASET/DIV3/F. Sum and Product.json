{"link": "https://codeforces.com//contest/1857/problem/F", "problemId": "2150547", "problem_idx": "F", "shortId": "1857F", "contest_number": "1857", "problem_submissions": {"G": [217667474, 217665550, 217689340, 217662818, 217685310, 217676468, 217687922, 217701057, 217700197, 217807896, 217807827, 217712091, 217684113, 217720675, 217807627, 217677400, 217731532, 217711676, 217719652, 217714022, 217712604, 217718357, 217710888], "F": [217659021, 217648989, 217664891, 217627744, 217669247, 217691937, 217689514, 217664113, 217674769, 217680535, 217666261, 217699208, 217671748, 217807538, 217701131, 217674808, 217679890, 217683947, 217696220, 217689116, 217681500, 217688375], "B": [217642867, 217642809, 217629703, 217685667, 217635907, 217630271, 217642640, 217631148, 217634501, 217636716, 217631884, 217632923, 217807034, 217775927, 217633962, 217640699, 217644829, 217637634, 217632935, 217633927, 217650168, 217644229], "D": [217638870, 217638947, 217636496, 217634474, 217647504, 217644974, 217647862, 217645462, 217646166, 217647061, 217646308, 217648033, 217807098, 217775952, 217684716, 217643681, 217658546, 217653658, 217651018, 217652036, 217655292, 217662419], "E": [217634664, 217632006, 217641596, 217642974, 217661622, 217655519, 217656154, 217657341, 217663115, 217656176, 217655704, 217660327, 217807112, 217775966, 217649059, 217656810, 217665253, 217663579, 217661514, 217671790, 217665209, 217669853], "C": [217623043, 217660653, 217633113, 217671603, 217641405, 217641348, 217633280, 217640705, 217639467, 217642154, 217639690, 217640983, 217807070, 217775937, 217639411, 217632787, 217649913, 217647923, 217645015, 217643972, 217637879, 217653046], "A": [217621356, 217622367, 217617259, 217636401, 217628184, 217620735, 217618278, 217621503, 217622297, 217628772, 217620627, 217617547, 217806999, 217775914, 217772364, 217772351, 217620412, 217618442, 217617205, 217621216, 217619220, 217624745, 217618215, 217619189]}, "name": "F. Sum and Product", "statement": "You have an array a of length n.Your task is to answer q queries: given\r\nx,y, find the number of pairs i and j (1\r\nle i < j\r\nle n) that both a_i + a_j = x and a_i\r\ncdot a_j = y.That is, for the array [1,3,2] and asking for x=3,y=2 the\r\nanswer is 1: i=1 and j=2 fail because 1 + 3 = 4 and not 3, also 1\r\ncdot 3=3 and not 2; i=1 and j=3 satisfies both conditions; i=2 and j=3\r\nfail because 3 + 2 = 5 and not 3, also 3\r\ncdot 2=6 and not 2;\r\n", "solutions": ["#define _USE_MATH_DEFINES\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<numeric>\n#include<cmath>\n#include<fstream>\n#include<random>\n#include<set>\n#include<unordered_set>\n#include<string>\n#include<map>\n#include<unordered_map>\n#include<queue>\n#include<stack>\n#include<fstream>\n#include<time.h>\n\nusing namespace std;\n#define int long long\n#define all(a) a.begin(), a.end()\n#define Max(a) *max_element(all(a))\n#define Min(a) *min_element(all(a))\n#ifndef ONLINE_JUDGE\n#define debug(x) cerr << (#x) << \": \" << x << endl;\n#else\n#define debug(x)\n#endif\nint max(int a, int b) {\n    if (a > b) return a;\n    return b;\n}\nint min(int a, int b) {\n    if (a < b) return a;\n    return b;\n}\nusing ll = long long;\nusing ld = long double;\n\nint bs_sqrt(int x) {\n    int l = 0, r = 3e9;\n    while (r - l > 1) {\n        int m = (r + l) / 2;\n        if (m * m <= x) {\n            l = m;\n        }\n        else {\n            r = m;\n        }\n    }\n    return l;\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) cin >> a[i];\n    map<int, int> cnt;\n    for (auto c : a) cnt[c]++;\n    int q;\n    cin >> q;\n    vector<int> all_ans;\n    for (int it = 0; it < q; it++) {\n        int x, y;\n        cin >> x >> y;\n        int D = x * x - 4 * y;\n        int must_sg = bs_sqrt(D);\n        int ans = 0;\n        if (must_sg * must_sg == D) {\n            int sum_1 = x + must_sg;\n            if (abs(sum_1) % 2 == 1) continue;\n            int must = sum_1 / 2;\n            int must_1 = x - must;\n            if (must != must_1) ans += cnt[must] * cnt[must_1];\n            if (must == must_1) {\n                int add = (cnt[must] * (cnt[must] - 1)) / 2;\n                ans += add;\n            }\n            int must_2 = (x - must_sg) / 2;\n            int must_3 = x - must_2;\n            if (must > must_1) swap(must_1, must);\n            if (must_2 > must_3) swap(must_2, must_3);\n            int fl = 1;\n            if (must_2 == must || must_3 == must) fl = 0;\n            if (fl) {\n                must = must_2;\n                must_1 = must_3;\n                if (must != must_1) ans += cnt[must] * cnt[must_1];\n                if (must == must_1) {\n                    int add = (cnt[must] * (cnt[must] - 1)) / 2;\n                    ans += add;\n                }\n            }\n        }\n        all_ans.push_back(ans);\n    }\n    for (auto c : all_ans) cout << c << \" \";\n    cout << endl;\n}\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    ll t = 1;\n    cin >> t;\n    srand(time(NULL));\n    while (t--) {\n        solve();\n    }\n}"], "input": "", "output": "", "tags": ["binary search", "data structures", "math"], "dificulty": "1600", "interactive": false}