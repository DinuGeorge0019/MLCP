{
    "link": "https://codeforces.com//contest/1367/problem/D",
    "problemId": "650996",
    "problem_idx": "D",
    "shortId": "1367D",
    "contest_number": "1367",
    "problem_submissions": {
        "F2": [
            84046399,
            84094199,
            84130636
        ],
        "F1": [
            83980407,
            83997753,
            83993348,
            83994650,
            83999567,
            84010715,
            83998236,
            84003996,
            84009140,
            84019849,
            84274779,
            84017193,
            84019354,
            84000999,
            84010593,
            84016471,
            84014906,
            84016930,
            84014876,
            84014935,
            84017986
        ],
        "D": [
            83971043,
            83961145,
            83985812,
            83980115,
            83973000,
            83974852,
            83986130,
            83981366,
            83974367,
            83994623,
            83977600,
            83983323,
            83996104,
            83995930,
            83983801,
            83992346,
            83994322,
            83998169,
            84019878,
            83994750
        ],
        "E": [
            83960157,
            83975668,
            83972713,
            83967919,
            83987024,
            83979496,
            83979914,
            83997028,
            83998395,
            83978103,
            83986303,
            83992757,
            84009544,
            83998141,
            84003322,
            84000422,
            84009434,
            84005956,
            84009927
        ],
        "C": [
            83944345,
            83953190,
            83946330,
            83950349,
            83947422,
            83950879,
            83948329,
            83963053,
            83957928,
            83954873,
            83961995,
            83964648,
            83957400,
            83955873,
            83978101,
            83977835,
            83962124,
            83950317,
            83977481
        ],
        "B": [
            83935714,
            83939461,
            83936897,
            83955137,
            83937279,
            83939068,
            83931855,
            83950510,
            83942524,
            83939871,
            83953252,
            83938559,
            83937149,
            83961120,
            83949153,
            83945426,
            83942777,
            83939545,
            83950410
        ],
        "A": [
            83931489,
            83931768,
            83931529,
            83932839,
            83931493,
            83933565,
            83935945,
            83942834,
            83934889,
            83933081,
            83935891,
            83931997,
            83932187,
            83932611,
            83934727,
            83936848,
            83932660,
            83932129,
            83932693
        ]
    },
    "name": "D. Task On The Board",
    "statement": "Polycarp wrote on the board a string s containing only lowercase Latin\r\nletters (”-”). This string is known for you and given in the input.After\r\nthat, he erased some letters from the string s, and he rewrote the\r\nremaining letters in order. As a result, he got some new string t. You\r\nhave to find it with some additional information.Suppose that the string\r\nt has length m and the characters are numbered from left to right from 1\r\nto m. You are given a sequence of m integers: b_1, b_2,\r\nldots, b_m, where b_i is the sum of the distances |i-j| from the index i\r\nto all such indices j that t_j > t_i (consider that ”<”<...<”). In other\r\nwords, to calculate b_i, Polycarp finds all such indices j that the\r\nindex j contains a letter that is later in the alphabet than t_i and\r\nsums all the values |i-j|.For example, if t = \"\", then: since t_1=”, all\r\nother indices contain letters which are later in the alphabet, that is:\r\nb_1=|1-2|+|1-3|+|1-4|=1+2+3=6; since t_2=”, only the index j=3 contains\r\nthe letter, which is later in the alphabet, that is: b_2=|2-3|=1; since\r\nt_3=”, then there are no indexes j such that t_j>t_i, thus b_3=0; since\r\nt_4=”, only the index j=3 contains the letter, which is later in the\r\nalphabet, that is: b_4=|4-3|=1. Thus, if t = \"\", then b=[6,1,0,1].Given\r\nthe string s and the array b, find any possible string t for which the\r\nfollowing two requirements are fulfilled simultaneously: t is obtained\r\nfrom s by erasing some letters (possibly zero) and then writing the rest\r\nin order; the array, constructed from the string t according to the\r\nrules above, equals to the array b specified in the input data.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> \nusing namespace std;\n#define fl(i,a,b) for(int i=a;i<b;i++)\n#define ff first\n#define ss second\n#define endl '\\n'\n#define pb push_back\n#define khushi ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);\ntypedef long long ll;\nconst int  mod  = 1000000007;\n#define int long long\nconst int mx = 200005;\nint h[26];\nchar findmin(int val)\n{\n\tfor(int i = 26; i >= 0; i--)\n\t{\n\t\tif(h[i] >= val)\n\t\t{\n\t\t\th[i] = 0;\n\t\t\treturn char(i + 'a');\n\t\t}\n\t\th[i] = 0;\n\t}\n}\nvoid f()\n{\n\tstring s;\n\tcin >> s;\n\tfl(i,0,26)\n\t{\n\t\th[i] = 0;\n\t}\n\tfl(i,0,s.size())\n\t{\n\t\th[s[i] - 'a']++;\n\t}\n\tint m;\n\tcin >> m;\n\tint arr[m];\n\tint ans[m] = {0};\n\tchar res[m];\n\tint vis[m] = {0};\n\tfl(i,0,m)\n\t{\n\t\tcin >> arr[i];\n\t}\n\tint cnt = 0;\n\twhile(1)\n\t{\n\t\tcnt++;\n\t\t\n\t\tbool f = 1;\n\t\tint val = 0;\n\t\tfl(i,0,m)\n\t\t{\n\t\t\tif(vis[i] == 0 && arr[i] == 0)\n\t\t\t{\n\t\t\t\tval++;\n\t\t\t}\n\t\t}\n\t\tchar c = findmin(val);\n\t\tfl(i,0,m)\n\t\t{\n\t\t\tif(vis[i] == 0 && arr[i] == 0)\n\t\t\t{\n\t\t\t\tf = 0;\n\t\t\t\tvis[i] = cnt;\n\t\t\t\tres[i] = c;\n\t\t\t}\n\t\t}\n\t\tfl(i,0,m)\n\t\t{\n\t\t\tfl(j,0,m)\n\t\t\t{\n\t\t\t\tif(vis[i] == 0 && vis[j] == cnt)\n\t\t\t\t{\n\t\t\t\t\tarr[i] -= abs(i - j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(f)\n\t\t\tbreak;\n\t}\n\tfl(i,0,m)\n\t{\n\t\tcout << res[i];\n\t}\n\tcout << endl;\n}\nmain()\n{\n\tkhushi;\n\tint t = 1;\n\tcin >> t;\n\twhile(t--)\n\t{\n\t\tf();\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Task On The Board.json",
    "editorial_link": "https://codeforces.com//blog/entry/78864",
    "editorial": "We will construct the string , starting with the largest letters. Note\r\nthat if , then the -th letter of the string is maximal, so we know that\r\nthe -th letter affect all . While the string is not completely\r\nconstructed, we will do the following: Find all such that and the -th\r\ncharacter of string is not placed; Put on all these positions in the\r\nstring the maximum letter not used in the string (there should be a\r\nsufficient number of letters in the string ); Subtract from all .\r\n",
    "hint": []
}