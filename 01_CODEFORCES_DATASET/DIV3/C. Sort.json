{
    "link": "https://codeforces.com//contest/1996/problem/C",
    "problemId": "2778590",
    "problem_idx": "C",
    "shortId": "1996C",
    "contest_number": "1996",
    "problem_submissions": {
        "G": [
            272815559,
            272903634,
            272903592,
            272903418,
            272850378,
            272829160,
            272846769,
            272917148,
            272843968,
            272801966,
            272891447,
            273051360,
            273051300,
            272852709,
            277596550
        ],
        "F": [
            272784299,
            272793161,
            272807689,
            272809360,
            272830969,
            272798046,
            272797379,
            272844703,
            272806635,
            272800919,
            272804361,
            272807242,
            272813027,
            272855036,
            272810332,
            272821433,
            272800404,
            272820587,
            272829162,
            272807664,
            272816226,
            272821599,
            272820591,
            272815918
        ],
        "E": [
            272768761,
            272775513,
            272762810,
            272775844,
            272823416,
            272782075,
            272761261,
            272777167,
            272789153,
            272785690,
            272777083,
            272786909,
            272772099,
            272795998,
            272776949,
            272765827,
            272789445,
            272789546,
            272779861,
            272787485
        ],
        "D": [
            272761438,
            272765354,
            272813661,
            272767517,
            272818911,
            272771177,
            272779573,
            272778986,
            272764786,
            272769566,
            272775352,
            272769622,
            272774700,
            272762959,
            272779115,
            272762141,
            272771898,
            272774147,
            272768381,
            272773685,
            272774940
        ],
        "C": [
            272749300,
            272751224,
            272747619,
            272760085,
            272816579,
            272747209,
            272749428,
            272754671,
            272751382,
            272753279,
            272756574,
            272752694,
            272753758,
            272752271,
            272750229,
            272749232,
            272759739,
            272751545,
            272748871,
            272750894
        ],
        "B": [
            272737073,
            272739985,
            272740771,
            272742756,
            272810526,
            272736341,
            272731072,
            272746867,
            272739153,
            272741965,
            272746544,
            272740783,
            272737062,
            272739328,
            272737959,
            272736354,
            272749397,
            272742081,
            272736698,
            272740417
        ],
        "A": [
            272724627,
            272725221,
            272724958,
            272806237,
            272724506,
            272723181,
            272724288,
            272724605,
            272723501,
            272737370,
            272725890,
            272725751,
            272728152,
            272725138,
            272723459,
            272723672,
            272729720,
            272724250,
            272726300
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131948",
    "editorial": "For two strings to be the same after sorting, they must have the same occurrences of every possible lowercase letter. To answer the query for a range [l,r]\n, we must ensure that after the operations, cntc=cnt2c\n must where cntc\n is the number of times character c\n occurs in the range for a\n and cnt2c\n is defined similarly for b\n. Both cntc\n and cnt2c\n can be obtained by doing prefix sums for character c\n specifically. Note that since there are only 26\n possible c\n, you can afford to create 26\n length n\n prefix sum arrays.\n\nIn one operation, you can replace one occurrence of a character c\n with another character c2\n. Essentially, you are subtracting one from cntc\n and adding one to cntc2\n. Obviously, you must choose c\n and c2\n such that cntc>cnt2c\n and cntc2<cnt2c2\n. So, we only have to focus on c\n or c2\n since one decreasing will automatically lead to the other increase. The answer is just the sum of cntc?cnt2c\n if cntc>cnt2c\n over all possible lowercase characters c\n.",
    "name": "C. Sort",
    "statement": "You are given two strings a and b of length n. Then, you are (forced\r\nagainst your will) to answer q queries.For each query, you are given a\r\nrange bounded by l and r. In one operation, you can choose an integer i\r\n(l\r\nleq i\r\nleq r) and set a_i = x where x is any character you desire. Output the\r\nminimum number of operations you must perform such that\r\ntexttt{sorted(a[l..r])} =\r\ntexttt{sorted(b[l..r])}. For an arbitrary string c,\r\ntexttt{sorted(c[l..r])} denotes the substring consisting of characters\r\nc_l, c_{l+1}, ... , c_r sorted in lexicographical order.\r\n",
    "solutions": [
        "/**   - dwuy -\u00a0\u3000\u3000\u3000\u3000\u3000 \uff0f\uff1e\u3000   \u30d5\u3000\u3000\u3000\u3000\u3000 | \u3000_\u3000 _|\u3000 \u3000\u3000\u3000 \uff0f`\u30df _x \u30ce\u3000\u3000 \u3000 /\u3000\u3000\u3000 \u3000 |\u3000\u3000\u3000 /\u3000  \u30fd\u3000\u3000 ?\u3000\uff0f\uffe3|\u3000\u3000 |\u3000|\u3000|\u3000| (\uffe3\u30fd\uff3f_\u30fd_)_)\u3000\uff3c\u4e8c\u3064\u00a0**/#include <bits/stdc++.h>\u00a0#define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL)#define file(a) freopen(a\".inp\",\"r\",stdin); freopen(a\".out\", \"w\",stdout)#define fi first#define se second#define endl \"\\n\"#define len(s) (int)((s).size())#define MASK(k)(1LL<<(k))#define TASK \"test\"#define int long long\u00a0using namespace std;\u00a0typedef tuple<int, int, int> tpiii;typedef pair<double, double> pdd;typedef pair<int, int> pii;typedef long long ll;\u00a0const long long OO = 1e18;const int MOD = 1e9 + 7;const int INF = 1e9;const int MX = 200005;\u00a0int n, m, k, q;string s, t;int a[MX];int b[MX];int f1[MX][26];int f2[MX][26];\u00a0void solve(){    cin >> n >> q;    cin >> s;    cin >> t;    s = ' ' + s;    t = ' ' + t;    for(int i=1; i<=n; i++){        for(int j=0; j<26; j++){            f1[i][j] = f1[i-1][j];            f2[i][j] = f2[i-1][j];        }        f1[i][s[i] - 'a']++;        f2[i][t[i] - 'a']++;    }    while(q--){        int l, r;        cin >> l >> r;        int ans = 0;        for(int i=0; i<26; i++){            int d1 = f1[r][i] - f1[l-1][i];            int d2 = f2[r][i] - f2[l-1][i];            ans += abs(d1 - d2);        }        cout << ans/2 << endl;    }}\u00a0int32_t main(){    fastIO;    //file(TASK);\u00a0    int q;    cin >> q;    while(q--){        solve();    }\u00a0    return 0;}\u00a0\u00a0\u00a0\u00a0"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "sortings",
        "strings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\C. Sort.json"
}