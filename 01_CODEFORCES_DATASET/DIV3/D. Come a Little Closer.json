{
    "link": "https://codeforces.com//contest/2114/problem/D",
    "problemId": "3405988",
    "problem_idx": "D",
    "shortId": "2114D",
    "contest_number": "2114",
    "problem_submissions": {
        "G": [
            321491820,
            321510895,
            321522705,
            321536205,
            321704142,
            321493544,
            321539010
        ],
        "D": [
            321453109,
            321433567,
            321464732,
            321435389,
            321418906,
            321422419,
            321426564,
            321427705,
            321433853,
            321447085,
            321448245,
            321448177,
            321438602,
            321430809,
            321444460,
            321433422,
            321441969,
            321447455
        ],
        "F": [
            321437069,
            321471653,
            321400560,
            321452634,
            321458136,
            321471530,
            321457608,
            321478622,
            321469763,
            321468286,
            321467066,
            321488259,
            321482829,
            321485396,
            321504556,
            321482048,
            321513883,
            321499978,
            321518132
        ],
        "E": [
            321425663,
            321448629,
            321447346,
            321419017,
            321427993,
            321438291,
            321439608,
            321441935,
            321448509,
            321455125,
            321437156,
            321464203,
            321462222,
            321450510,
            321461412,
            321455167,
            321460727,
            321424098
        ],
        "C": [
            321406317,
            321410944,
            321421134,
            321404932,
            321410584,
            321406511,
            321405596,
            321411420,
            321413167,
            321412908,
            321422303,
            321404419,
            321413740,
            321414690,
            321426901,
            321412443,
            321424589,
            321401692
        ],
        "B": [
            321397200,
            321399911,
            321415073,
            321397245,
            321403501,
            321400846,
            321423069,
            321401151,
            321406842,
            321401907,
            321401468,
            321410144,
            321404248,
            321407958,
            321413444,
            321402900,
            321412452,
            321392901
        ],
        "A": [
            321389400,
            321390323,
            321390935,
            321389192,
            321396857,
            321391523,
            321392082,
            321388740,
            321389560,
            321392729,
            321389834,
            321394641,
            321393501,
            321388215,
            321392515,
            321389988,
            321388815,
            321388090
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143268",
    "editorial": "The minimum rectangle that we can choose must have sides of length and ,\r\nmeaning that the maximum and minimum values along both axes are\r\nimportant.Letâ€™s consider the movement of a certain monster; we will not\r\nchoose a new position but will simply examine the rectangle needed to\r\ncover the remaining ones. To find the new maximums and minimums, we can\r\nuse a or a similar ordered data structure. The code below will utilize a\r\nsimple fact: if we remove a point with the maximum coordinate along some\r\naxis, the new maximum will become the second maximum (similarly for\r\nminimums). Thus, for each axis, we can store two minimums and two\r\nmaximums.Now that we know how to find the minimum rectangle for all\r\nmonsters except the current one, we just need to determine if it can fit\r\ninside this rectangle. If the area of the rectangle is equal to , then\r\nall the spaces inside it are already occupied, and one of the sides must\r\nbe increased; otherwise, the monster can be placed inside it.\r\n",
    "name": "D. Come a Little Closer",
    "statement": "The game field is a matrix of size 10^9\r\ntimes 10^9, with a cell at the intersection of the a-th row and the b-th\r\ncolumn denoted as (a, b).There are n monsters on the game field, with\r\nthe i-th monster located in the cell (x_i, y_i), while the other cells\r\nare empty. No more than one monster can occupy a single cell.You can\r\nmove one monster to any cell on the field that is not occupied by\r\nanother monster .After that, you must select rectangle on the field; all\r\nmonsters within the selected rectangle will be destroyed. You must pay 1\r\ncoin for each cell in the selected rectangle.Your task is to find the\r\nminimum number of coins required to destroy all the monsters.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Come a Little Closer.json",
    "hint": []
}