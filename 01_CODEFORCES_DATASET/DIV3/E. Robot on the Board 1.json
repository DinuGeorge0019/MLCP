{
    "link": "https://codeforces.com//contest/1607/problem/E",
    "problemId": "1168762",
    "problem_idx": "E",
    "shortId": "1607E",
    "contest_number": "1607",
    "problem_submissions": {
        "H": [
            134109261,
            134122573,
            134127039,
            134129159,
            134120326,
            134124082,
            134115613,
            134086394,
            222081291
        ],
        "G": [
            134100516,
            134111114,
            134120315,
            134119987,
            134103409,
            134125077,
            134090777,
            134124686,
            134161401,
            134108011,
            134124515,
            134135421,
            134120363,
            134127386,
            134118374
        ],
        "F": [
            134088119,
            134094606,
            134109434,
            134113674,
            134106214,
            134130777,
            134116309,
            134123514,
            134126664,
            134098669,
            134116441,
            138590174,
            134109926,
            134122503,
            134115728,
            134132308
        ],
        "E": [
            134075767,
            134075550,
            134083203,
            134090648,
            134082456,
            134081369,
            134087482,
            134106728,
            134090817,
            134098958,
            134102790,
            134115817,
            134085769,
            134078748,
            138590168,
            134089452,
            134089115,
            134093726,
            134096883,
            134087185,
            134095967,
            134093434
        ],
        "D": [
            134073147,
            134079470,
            134081268,
            134078614,
            134077065,
            134080878,
            134074693,
            134077504,
            134095837,
            134113769,
            134103320,
            134076699,
            134075433,
            138590165,
            134084570,
            134083055,
            134085492,
            134086301,
            134077797,
            134088883,
            134092149
        ],
        "C": [
            134069725,
            134073680,
            134076697,
            134075904,
            134072982,
            134074821,
            134078550,
            134074603,
            134077620,
            134094573,
            134099873,
            134073307,
            134072872,
            138590159,
            134078305,
            134075739,
            134077550,
            134078439,
            134072306,
            134082344,
            134079268
        ],
        "B": [
            134067338,
            134069577,
            134073071,
            134074024,
            134071494,
            134070714,
            134072150,
            134072633,
            134073059,
            134091344,
            134097562,
            134068544,
            134068492,
            138590150,
            134072771,
            134079913,
            134074563,
            134075669,
            134092880,
            134071701,
            134074168
        ],
        "A": [
            134063636,
            134063717,
            134066145,
            134063736,
            134063629,
            134070558,
            134064987,
            134064160,
            134064799,
            134089110,
            134068267,
            134064265,
            134063696,
            138590140,
            134064218,
            134065711,
            134066701,
            134063772,
            134064096,
            134065356,
            134065091
        ]
    },
    "name": "E. Robot on the Board 1",
    "statement": "The robot is located on a checkered rectangular board of size n\r\ntimes m (n rows, m columns). The rows in the board are numbered from 1\r\nto n from top to bottom, and the columns from 1 to m from left to\r\nright.The robot is able to move from the current cell to one of the four\r\ncells adjacent by side.The sequence of commands s executed by the robot\r\nis given. Each command is denoted by one of the symbols \u201d, \u201d, \u201d or \u201d,\r\nand triggers the movement to left, right, down or up, respectively.The\r\nrobot can start its movement in cell. The robot executes the commands\r\nstarting from the first one, strictly in the order in which they are\r\nlisted in s. If the robot moves beyond the edge of the board, it falls\r\nand breaks. A command that causes the robot to break is successfully\r\nexecuted.The robot\u2019s task is to execute as many commands as possible\r\nwithout falling off the board. For example, on board 3\r\ntimes 3, if the robot starts a sequence of actions s=\"\" (\"right\",\r\n\"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot\r\nwill perform one command, then the next command will force him to cross\r\nthe edge. If the robot starts moving from the cell (2, 1) (second row,\r\nfirst column) then all commands will be executed successfully and the\r\nrobot will stop at the cell (1, 2) (first row, second column). Determine\r\nthe cell from which the robot should start its movement in order to\r\nexecute as many commands as possible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nsigned main(int argc, char** argv) {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint T;\n\tcin >> T;\n\twhile(T--)\n\t{\n\t\tint n,m;\n\t\tstring s;\n\t\tcin >> n >> m >> s;\n\t\tint mnx=0,mxx=0,mny=0,mxy=0,x=0,y=0;\n\t\ts+='*'; \n\t\tfor(auto t:s)\n\t\t{\n\t\t\tint l1=mxx,l2=mnx,l3=mxy,l4=mny;\n\t\t\tif(t=='L') --y;\n\t\t\telse if(t=='R') ++y;\n\t\t\telse if(t=='U') --x;\n\t\t\telse if(t=='D') ++x;\n\t\t\telse x=1e9;\n\t\t\tmnx=min(mnx,x); \n\t\t\tmny=min(mny,y); \n\t\t\tmxx=max(mxx,x);\n\t\t\tmxy=max(mxy,y);\n\t\t\tif(mxx-mnx+1>n||mxy-mny+1>m)\n\t\t\t{//\n\t\t\t\tmxx=l1,mnx=l2,mxy=l3,mny=l4;\n\t\t\t\tcout << 1-mnx << \" \" << 1-mny << \"\\n\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Robot on the Board 1.json",
    "editorial_link": "https://codeforces.com//blog/entry/96604",
    "editorial": "Let\u00e2\u0080\u0099s look at the answer . Let\u00e2\u0080\u0099s see how many commands the robot can\r\nexecute. Since the robot breaks goes outside the field, if any command\r\ncauses it to break, it either leads to its total shift relative to of\r\nexactly to the left or exactly to the right, or, similarly, of exactly\r\nup or exactly down.Denote by and the sum of the maximum positive (right,\r\ndown) and maximum negative (left, up) shifts in the corresponding\r\ndirection. By adding up the above constraints, we get the fact that the\r\nrobot will not fall off the board only if and .Note that the reverse is\r\nalso true: if both these conditions are satisfied, then starting from\r\nthe point where is the maximum shift along the direction , the robot\r\nwill not pass any of the board\u00e2\u0080\u0099s edges. Thus, it is sufficient to find\r\nthe number of commands which, when executed, hold the following\r\ninvariant: The horizontal shift can be calculated as the difference\r\nbetween the number of letters \u00e2\u0080\u009d and the number of letters \u00e2\u0080\u009d encountered.\r\nSimilarly, the vertical shift as the difference of the numbers of \u00e2\u0080\u009d and\r\n\u00e2\u0080\u009d. Let\u00e2\u0080\u0099s iterate over the sequence of commands, maintaining relevant\r\nvalues of for all . After executing each command, if the robot goes\r\nfarther in some direction than ever before, we update the corresponding\r\n.Either we reach the end of , or we meet a command after which either\r\nbecomes equal to , or becomes equal to and the robot breaks, so the\r\nprevious command was the last one successfully executed. The possible\r\nanswer is , where the values are calculated one command before the robot\r\nbroke.\r\n"
}