{"link": "https://codeforces.com//contest/1650/problem/E", "problemId": "1321164", "problem_idx": "E", "shortId": "1650E", "contest_number": "1650", "problem_submissions": {"F": [148879513, 148986538, 148986467, 148954476, 148898287, 148901435, 148899333, 148905510, 148917052, 148904349, 148961796], "E": [148849636, 148864683, 148963130, 148875756, 148872079, 148878903, 148875510, 148901218, 148892416, 148888540, 148898231, 148888980, 148883282, 148898577, 148883163, 148907542, 148907274, 148906672, 148906320, 148893084, 148887495, 148892756, 148872442, 148863112], "D": [148826882, 148840222, 148845807, 148854912, 148854752, 148856728, 148840985, 148865410, 148852435, 148848691, 148844798, 148864773, 148844781, 148864322, 148875613, 148870696, 148859219, 148920116, 148876044, 148839258, 148838584], "C": [148820093, 148831170, 148831813, 148836720, 148830087, 148836086, 148827090, 148852471, 148837137, 148831426, 148825553, 148845906, 148830527, 148848884, 148845635, 148848540, 148844404, 148859460, 148825220, 148833443], "B": [148812353, 148815870, 148817423, 148824929, 148816344, 148818724, 148809035, 148821547, 148823462, 148821683, 148815397, 148837950, 148818597, 148837067, 163337223, 148830901, 148832514, 148848552, 148825246, 148813545, 148824771], "A": [148807991, 148808027, 148809803, 148809976, 148810949, 148808067, 148809583, 148816565, 148811698, 148808085, 148807871, 148819883, 148808075, 148829522, 148809900, 148814537, 148809886, 148812702, 148807945, 148820895], "G": [148891310, 148885828, 148904919, 148896469, 148883806, 148899609, 148903599, 148896840, 148894409, 148919593, 148886999, 148901688, 148905478]}, "name": "E. Rescheduling the Exam", "statement": "Now Dmitry has a session, and he has to pass n exams. The session starts\r\non day 1 and lasts d days. The ith exam will take place on the day of\r\na_i (1\r\nle a_i\r\nle d), all a_i are different. For the session schedule, Dmitry considers\r\na special value\r\nmu the smallest of the rest times before the exam for all exams. For\r\nexample, for the image above,\r\nmu=1. In other words, for the schedule, he counts exactly n numbers how\r\nmany days he rests between the exam i-1 and i (for i=0 between the start\r\nof the session and the exam i). Then it finds\r\nmu the minimum among these n numbers.Dmitry believes that he can improve\r\nthe schedule of the session. He may ask to change the date of one exam\r\n(change one arbitrary value of a_i). Help him change the date so that\r\nall a_i remain different, and the value of\r\nmu is as large as possible.For example, for the schedule above, it is\r\nmost advantageous for Dmitry to move the second exam to the very end of\r\nthe session. The new schedule will take the form: Dmitry can leave the\r\nproposed schedule unchanged (if there is no way to move one exam so that\r\nit will lead to an improvement in the situation).\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> pi;\ntypedef vector<ll> V;\nint n,d;\nint arr[200005];\nvoid solve(){\n\tcin>>n>>d;\n\tfor(int i=1; i<=n; i++) cin>>arr[i];\n\tsort(arr+1,arr+n+1);\n\tarr[n+1] = d+1;\n\tmultiset<int>st;\n\tfor(int i=1; i<=n; i++) st.insert(arr[i]-1-arr[i-1]);\n\tint ans = *st.begin();\n\tfor(int i=1; i<n; i++){\n\t\tint a = arr[i]-1-arr[i-1];\n\t\tint b = arr[i+1]-1-arr[i];\n\t\tst.erase(st.find(a));\n\t\tst.erase(st.find(b));\n\t\tst.insert(arr[i+1]-1-arr[i-1]);\n\t\t\n\t\tint mx = *st.rbegin();\n\t\tint half = mx/2; if(mx%2==0) half--;\n\t\tst.erase(st.find(mx)); st.insert(half);\n\t\tans = max(ans,*st.begin());\n\t\t\n\t\tst.erase(st.find(half)); st.insert(mx);\n\t\tif(d-arr[n]){\n\t\t\tst.insert(d-1-arr[n]);\n\t\t\tans = max(ans,*st.begin());\n\t\t\tst.erase(st.find(d-1-arr[n]));\n\t\t}\n\t\tst.erase(st.find(arr[i+1]-1-arr[i-1]));\n\t\tst.insert(a); st.insert(b);\n\t}\n\tint diff = arr[n]-1-arr[n-1];\n\tst.erase(st.find(diff));\n\tst.insert(d-1-arr[n-1]); \n\tans = max(ans,*st.begin()); st.erase(st.find(d-1-arr[n-1]));\n\t\n\tint mx = *st.rbegin();\n\tint half = mx/2; if(mx%2==0) half--;\n\tst.erase(st.find(mx)); st.insert(half);\n\tans = max(ans,*st.begin());\n\tcout<<ans<<'\\n';\n}\nint main(){\n\tios_base::sync_with_stdio(false); cin.tie(NULL);\n\tint t = 1;\n\tcin >> t;\n\twhile(t--) solve();\n}"], "input": "", "output": "", "tags": ["binary search", "data structures", "greedy", "implementation", "math", "sortings"], "dificulty": "1900", "interactive": false}