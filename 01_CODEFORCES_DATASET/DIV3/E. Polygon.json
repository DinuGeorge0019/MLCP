{"link": "https://codeforces.com//contest/1360/problem/E", "problemId": "629825", "problem_idx": "E", "shortId": "1360E", "contest_number": "1360", "problem_submissions": {"H": [81251920, 81290028, 81293330, 81291112, 81294740, 81299062, 81297186, 81294484, 81304607, 81300361, 81303070, 81250599, 81295409, 81298287, 81304237, 81231948], "G": [81250908, 81261609, 81276322, 81265591, 81276387, 81264433, 81272613, 81280948, 81267380, 81269754, 81289390, 81293762, 81279290, 81296348, 81288695, 81287798], "F": [81230412, 81252303, 81257057, 81259404, 81265576, 81254763, 81259977, 81264927, 81254624, 81249372, 81271302, 81279300, 81267710, 81275581, 81282413, 81255521], "E": [81216064, 81240455, 81234957, 81246045, 81233772, 81233068, 81236233, 81262156, 81246598, 81264349, 81235887, 81262591, 81252163, 81263497, 81254477, 81259978], "B": [81215775, 81207436, 81205722, 81209946, 81206365, 81207859, 81208440, 81216311, 81225212, 81217601, 81209275, 81216781, 81209546, 81211074, 81219408, 81270897], "A": [81211901, 81203807, 81203057, 81203650, 81203478, 81204406, 81203639, 81224692, 81237119, 81214495, 81204306, 81209285, 81203552, 81206909, 81211432, 81273150], "C": [81206744, 81215880, 81216577, 81223025, 81214552, 81214398, 81216644, 81210331, 81222555, 81225820, 81221447, 81224269, 81240900, 81218199, 81226927, 81268532], "D": [81205489, 81225350, 81222950, 81235831, 81222076, 81219822, 81226333, 81233523, 81233797, 81230395, 81227841, 81245779, 81245445, 81255431, 81237048, 81264054]}, "name": "E. Polygon", "statement": "Polygon is not only the best platform for developing problems but also a\r\nsquare matrix with side n, initially filled with the character .On the\r\npolygon, military training was held. The soldiers placed a cannon above\r\neach cell in the first row and a cannon to the left of each cell in the\r\nfirst column. Thus, exactly 2n cannons were placed. Cannons shoot\r\ncharacter . At any moment of time, no more than one cannon is shooting.\r\nWhen a flies out of a cannon, it flies forward (in the direction of the\r\nshot) until it collides with a polygon border or another . After that,\r\nit takes the cell in which it was before the collision and remains\r\nthere. Take a look at the examples for better understanding.More\r\nformally: if a cannon stands in the row i, to the left of the first\r\ncolumn, and shoots with a , then the starts its flight from the cell\r\n(i, 1) and ends in some cell (i, j); if a cannon stands in the column j,\r\nabove the first row, and shoots with a , then the starts its flight from\r\nthe cell (1, j) and ends in some cell (i, j). For example, consider the\r\nfollowing sequence of shots: You have a report from the military\r\ntraining on your desk. This report is a square matrix with side length n\r\nconsisting of and . You wonder if the training actually happened. In\r\nother words, is there a sequence of shots such that, after the training,\r\nyou get the given matrix?Each cannon can make an arbitrary number of\r\nshots. Before the training, each cell of the polygon contains .\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std ;\n#define rep( i, s, t ) for( register int i = s; i <= t; ++ i )\n#define re register\nint gi() {\n\tchar cc = getchar() ; int cn = 0, flus = 1 ;\n\twhile( cc < '0' || cc > '9' ) {  if( cc == '-' ) flus = - flus ; cc = getchar() ; }\n\twhile( cc >= '0' && cc <= '9' )  cn = cn * 10 + cc - '0', cc = getchar() ;\n\treturn cn * flus ;\n}\nconst int N = 100 + 5 ; \nint n, a[N][N] ; \nchar s[N][N] ; \nsigned main()\n{\n\tint T = gi() ; \n\twhile( T-- ) {\n\t\tn = gi() ; \n\t\trep( i, 1, n ) scanf(\"%s\", s[i] + 1 ) ;\n\t\trep( i, 1, n ) rep( j, 1, n ) a[i][j] = s[i][j] - '0' ; \n\t\tint flag = 1 ; \n\t\trep( i, 1, n ) rep( j, 1, n ) {\n\t\t\tif( a[i][j] == 1 ) {\n\t\t\t\tif( i == n || j == n ) continue ; \n\t\t\t\tif( a[i + 1][j] == 0 && a[i][j + 1] == 0 ) flag = 0 ;\n\t\t\t}\n\t\t}\n\t\tif( flag ) puts(\"YES\") ; \n\t\telse puts(\"NO\") ; \n\t}\n\treturn 0 ;\n}\n"], "input": "", "output": "", "tags": ["dp", "graphs", "implementation", "shortest paths"], "dificulty": "1300", "interactive": false}