{
    "link": "https://codeforces.com//contest/2000/problem/A",
    "problemId": "2814027",
    "problem_idx": "A",
    "shortId": "2000A",
    "contest_number": "2000",
    "problem_submissions": {
        "H": [
            276260761,
            276254307,
            276338511,
            276338125,
            276287387,
            276274340,
            276297740,
            276283267,
            276239793
        ],
        "G": [
            276214295,
            276274205,
            276334839,
            276268681,
            276267752,
            276333913,
            276264214,
            276282487,
            276272917,
            276276698,
            276277916,
            276283043,
            276274434,
            276291075,
            276278976,
            276290903,
            276279110,
            276279777
        ],
        "F": [
            276187296,
            276292316,
            276241660,
            276217578,
            276210913,
            276233999,
            276287795,
            276243858,
            276234274,
            276242694,
            276256602,
            276245569,
            276246137,
            276247924,
            276245207,
            276252538,
            276247124,
            276252754
        ],
        "E": [
            276164357,
            276333842,
            276186649,
            276185811,
            276179141,
            276203373,
            276182533,
            276188814,
            276185638,
            276210532,
            276225686,
            276198909,
            276209550,
            276178261,
            276202986,
            276227179,
            276202989,
            276229818,
            276227160
        ],
        "D": [
            276136722,
            276189642,
            276169653,
            276164982,
            276157636,
            276177807,
            276157222,
            276166197,
            276153213,
            276123696,
            276151555,
            276167672,
            276198896,
            276149967,
            276172892,
            276184459,
            276158053,
            276189336,
            276175071,
            276189558
        ],
        "C": [
            276127716,
            276172717,
            276135515,
            276132005,
            276139984,
            276155253,
            276134367,
            276142615,
            276142046,
            276180920,
            276133384,
            276141737,
            276151150,
            276139308,
            276147822,
            276167768,
            276145316,
            276158457,
            276159660,
            276137717
        ],
        "B": [
            276113898,
            276143388,
            276119169,
            276116606,
            276127808,
            276130717,
            276117856,
            276125745,
            276187672,
            276126451,
            276118391,
            276127646,
            276126167,
            276125801,
            276113780,
            276142176,
            276122501,
            276133620,
            276118200,
            276121342
        ],
        "A": [
            276110192,
            276136464,
            276111783,
            276110916,
            276119966,
            276120191,
            276111146,
            276116630,
            276117760,
            276111077,
            276112237,
            276116291,
            276115237,
            276115760,
            276110510,
            276123000,
            276110417,
            276117261,
            276112340,
            276130762
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132689",
    "editorial": "You need to check that the number has the form \u00e2\u0080\u009d, where is an integer\r\nwithout leading zeros. This means it must start with \u00e2\u0080\u009d; if the length of\r\nthe number is , then the third digit must be at least ; if the length is\r\ngreater, then the third digit must be at least (all such numbers are at\r\nleast ).Additionally, under these constraints, you can simply check that\r\nfor the given number , either or holds true.\r\n",
    "name": "A. Primary Task",
    "statement": "Dmitry wrote down t integers on the board, and that is good. He is sure\r\nthat he lost an integer n among them, and that is bad.The integer n had\r\nthe form\r\ntext{10^x} (x\r\nge 2), where the symbol \u2019\r\ntext{^}\u2019 denotes exponentiation.. Something went wrong, and Dmitry\r\nmissed the symbol \u2019\r\ntext{^}\u2019 when writing the integer. For example, instead of the integer\r\n10^5, he would have written 105, and instead of 10^{19}, he would have\r\nwritten 1019.Dmitry wants to understand which of the integers on the\r\nboard could have been the integer and which could not.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#include<array>using namespace std;#define ll long long#define int long long#define y1 idfsu#define PII pair<int, int>#define fi first#define se second#define endl \"\\n\"const int MAX = 1e9;const int MAXN = 1e6 + 10;const int mod = 1e9 + 7;const int N = 200010;\u00a0void solve(){    string a;    cin >> a;    if (a.size() <= 2)        cout << \"NO\\n\";    else    {        if (a[0] != '1' || a[1] != '0' || a[2] == '0' || a.size() == 3 && a[2] == '1')            cout << \"NO\\n\";        else            cout << \"YES\\n\";    }}signed main(){    ios::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);    int T = 1;    cin >> T;    while (T--)        solve();    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Primary Task.json"
}