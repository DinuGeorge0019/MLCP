{"link": "https://codeforces.com//contest/1931/problem/G", "problemId": "2475295", "problem_idx": "G", "shortId": "1931G", "contest_number": "1931", "problem_submissions": {"F": [246296614, 246179146, 246170709, 246427101, 246168970, 246184751, 246142511, 246197019, 246158218, 246183570, 246192932, 246194240, 246199021, 246174982, 246201540, 246206249, 246216038, 246222369, 246240052, 246211567, 246197899, 246223747], "G": [246224407, 246211674, 246427115, 246216950, 246178382, 246228243, 246242246, 246253076, 246240374, 246248007, 246244943, 246744089, 246744073, 246239134, 246236944, 246245770, 246244778, 246254011, 246234171, 246248699, 246240032, 246253831], "E": [246145017, 246150097, 246427087, 246155582, 246195821, 246176212, 246149318, 246169708, 246178779, 246172407, 246188216, 246161369, 246185423, 246181694, 246183495, 246193379, 246171079, 246199408, 246183302, 246209824], "D": [246131952, 246140825, 246427074, 246138649, 246151523, 246177165, 246158520, 246213160, 246149697, 246155814, 246156229, 246153154, 246212032, 246171283, 246159489, 246157679, 246169805, 246152904, 246183153, 246222515, 246168860], "C": [246118618, 246131841, 246427065, 246129262, 246123759, 246146869, 246133651, 246123342, 246138388, 246137410, 246146418, 246146559, 246141259, 246136926, 246145784, 246141739, 246129334, 246133557, 246144848, 246141577, 246142975], "B": [246116325, 246124823, 246427047, 246120211, 246135267, 246122553, 246118446, 246120092, 246126650, 246128147, 246123393, 246121355, 246123132, 246132595, 246128338, 246121578, 246122252, 246127915, 246132875, 246130521], "A": [246114920, 246119306, 246427041, 246116261, 246126876, 246117989, 246115257, 246116831, 246118165, 246120823, 246116864, 246121057, 246117063, 246121282, 246122222, 246117088, 246116504, 246117727, 246121061, 246119450]}, "name": "G. One-Dimensional Puzzle", "statement": "You have a one-dimensional puzzle, all the elements of which need to be\r\nput in one row, connecting with each other. All the puzzle elements are\r\ncompletely white and distinguishable from each other only if they have\r\ndifferent shapes. Each element has straight borders at the top and\r\nbottom, and on the left and right it has connections, each of which can\r\nbe a protrusion or a recess. You rotate the elements.You can see that\r\nthere are exactly 4 types of elements. Two elements can be connected if\r\nthe right connection of the left element is opposite to the left\r\nconnection of the right element. All possible types of elements. The\r\npuzzle contains c_1, c_2, c_3, c_4 elements of each type. The puzzle is\r\nconsidered complete if you have managed to combine elements into one\r\nlong chain. You want to know how many ways this can be done.\r\n", "solutions": ["// Problem: G. One-Dimensional Puzzle\n// Contest: Codeforces - Codeforces Round 925 (Div. 3)\n// URL: https://codeforces.com/contest/1931/problem/G\n// Memory Limit: 256 MB\n// Time Limit: 4000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\n#define all(s) s.begin(), s.end()\nusing namespace std;\nusing ll = long long;\nusing ull = unsigned long long;\n\nconst int _N = 1e5 + 5;\nconst int MOD = 998244353;\n\nint T;\n\nll qpow(ll a, ll p) {\n\tll res = 1;\n\twhile (p) {\n\t\tif (p & 1) res = res * a % MOD;\n\t\ta = a * a % MOD;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n\nvoid solve() {\n\tint c1, c2, c3, c4; cin >> c1 >> c2 >> c3 >> c4;\n\tint n = 2 * (c1 + c2 + c3 + c4 + 10);\n\tvector<ll> fac(n + 1), inv(n + 1);\n\tfac[0] = 1;\n\tfor (int i = 1; i <= n; i++) fac[i] = fac[i - 1] * i % MOD;\n\tinv[n] = qpow(fac[n], MOD - 2);\n\tfor (int i = n - 1; i >= 0; i--) inv[i] = inv[i + 1] * (i + 1) % MOD;\n\tauto C = [&](int n, int m) {\n\t\tif (n < m || n < 0 || m < 0) return 0ll;\n\t\treturn fac[n] * inv[m] % MOD * inv[n - m] % MOD;\n\t};\n\tif (c2 == c1) {\n\t\tif (c1 == 0) {\n\t\t\tif (c3 == 0 || c4 == 0) cout << 1 << '\\n';\n\t\t\telse cout << 0 << '\\n';\n\t\t\treturn;\n\t\t}\n\t\tll ans1 = C(c2 + c4, c4) * C(c2 + c3 - 1, c3) % MOD;\n\t\tll ans2 = C(c2 + c4 - 1, c4) * C(c2 + c3, c3) % MOD;\n\t\tcout << (ans1 + ans2) % MOD << '\\n';\n\t} else if (c2 == c1 - 1) {\n\t\tcout << C(c1 + c4 - 1, c4) * C(c1 + c3 - 1, c3) % MOD << '\\n';\n\t} else if (c2 == c1 + 1) {\n\t\tcout << C(c2 + c4 - 1, c4) * C(c2 + c3 - 1, c3) % MOD << '\\n';\n\t} else cout << 0 << '\\n';\n\treturn;\n}\n\nint main() {\n\tios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n\tcin >> T;\n\twhile (T--) {\n\t\tsolve();\n\t}\n}"], "input": "", "output": "", "tags": ["combinatorics", "math", "number theory"], "dificulty": "2000", "interactive": false}