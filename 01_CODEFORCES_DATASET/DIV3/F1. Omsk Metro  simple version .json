{
    "link": "https://codeforces.com//contest/1843/problem/F1",
    "problemId": "1972496",
    "problem_idx": "F1",
    "shortId": "1843F1",
    "contest_number": "1843",
    "problem_submissions": {
        "A": [
            210513115,
            210358669,
            210356867,
            210356606,
            210356554,
            210357901,
            210357194,
            210356864,
            210358095,
            210357837,
            210357098,
            210356516,
            210357328,
            210356501,
            210359161,
            210356847,
            210356427,
            210357415,
            210358119,
            210357120,
            210364703
        ],
        "F2": [
            210451991,
            210457207,
            210618819,
            210495074,
            210494100,
            210540752,
            210540669
        ],
        "F1": [
            210414403,
            210417478,
            210396846,
            210409917,
            210412496,
            210409842,
            210422089,
            210412238,
            210413002,
            210417779,
            210416655,
            210416375,
            210514291,
            210424999,
            210427270,
            210422907,
            210427091,
            210425631,
            210535488,
            210532084,
            210419095,
            210422275,
            210416513
        ],
        "E": [
            210391764,
            210391814,
            210384445,
            210387069,
            210389387,
            210395623,
            210390859,
            210397426,
            210401897,
            210395689,
            210473862,
            210401991,
            210402273,
            210403725,
            210394172,
            210401396,
            210403436,
            210400251,
            210398852,
            210406208,
            210398263
        ],
        "D": [
            210377103,
            210378604,
            210375920,
            210374828,
            210376525,
            210379717,
            210379591,
            210382067,
            210379942,
            210382515,
            210378874,
            210376209,
            210374876,
            210386844,
            210381700,
            210376444,
            210371551,
            210381744,
            210386605,
            210381316
        ],
        "C": [
            210369061,
            210367738,
            210368361,
            210366823,
            210368080,
            210359312,
            210366442,
            210374049,
            210371348,
            210364184,
            210365780,
            210367512,
            210366187,
            210360428,
            210370272,
            210365171,
            210363817,
            210370422,
            210368258,
            210373372
        ],
        "B": [
            210363239,
            210368717,
            210361290,
            210360953,
            210362948,
            210369749,
            210362940,
            210364525,
            210363196,
            210375176,
            210362328,
            210363841,
            210361045,
            210364327,
            210364107,
            210360838,
            210360957,
            210367115,
            210363394,
            210370393
        ]
    },
    "name": "F1. Omsk Metro  simple version ",
    "statement": "As is known, Omsk is the capital of Berland. Like any capital, Omsk has\r\na well-developed metro system. The Omsk metro consists of a certain\r\nnumber of stations connected by tunnels, and between any two stations\r\nthere is exactly one path that passes through each of the tunnels no\r\nmore than once. In other words, the metro is a tree.To develop the metro\r\nand attract residents, the following system is used in Omsk. Each\r\nstation has its own weight x\r\nin\r\n{-1, 1\r\n}. If the station has a weight of -1, then when the station is visited\r\nby an Omsk resident, a fee of 1 burle is charged. If the weight of the\r\nstation is 1, then the Omsk resident is rewarded with 1 burle.Omsk Metro\r\ncurrently has only one station with number 1 and weight x = 1. Every\r\nday, one of the following events occurs: You are a friend of Alex, so\r\nyour task is to answer Alex\u2019s questions.\r\ndaggerSubsegment continuous sequence of elements.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define ls u<<1\n#define rs u<<1|1\n#define mm(x) memset(x,0,sizeof(x))\nusing namespace std;\nint read()\n{\n    int a=0;int f=0;char p=getchar();\n    while(!isdigit(p)){f|=p=='-';p=getchar();}\n    while(isdigit(p)){a=(a<<3)+(a<<1)+(p^48);p=getchar();}\n    return f?-a:a;\n}\nvoid YES(bool flag=true)\n{\n    if(flag)    puts(\"YES\");\n    else    puts(\"NO\");\n}\nconst int INF=998244353;\nconst int P=998244353;\nconst int N=1e6+5;\nconst int MX=1e6;\nint fac[N];\nint inv[N];\nint ksm(int u,int v)\n{\n    int res=1;\n    while(v)\n    {\n        if(v&1) res=(ll)res*u%P;\n        v>>=1;  u=(ll)u*u%P;\n    }\n    return res;\n}\nint C(int n,int m)\n{\n    if(m<0) return 0;\n    if(n<0) return 0;\n    return (ll)fac[n]*inv[m]%P*inv[n-m]%P;\n}\nvoid init_C()\n{\n    fac[0]=1;\n    for(int i=1;i<=MX;++i)  fac[i]=(ll)fac[i-1]*i%P;\n    inv[MX]=ksm(fac[MX],P-2);\n    for(int i=MX;i>=1;--i)  inv[i-1]=(ll)inv[i]*i%P;\n}\nint T;\nint n,m,q;\nint dmx[N],dmn[N];\nint emx[N],emn[N];\nint val[N];\nvoid solve()\n{\n\tn=read();\tint cnt=1;\n\temn[1]=0;\temx[1]=1;\n\tdmn[1]=0;\tdmx[1]=1;\n\tval[1]=1;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tchar opt;\n\t\tcin>>opt;\n\t\tif(opt=='+')\n\t\t{\n\t\t\tint x=read();\tint y=++cnt;\tint z=read();\n\t\t\tval[y]=val[x]+z;\n\t\t\tdmn[y]=min(dmn[x],val[y]);\n\t\t\tdmx[y]=max(dmx[x],val[y]);\n\t\t\t\n\t\t\temn[y]=min(emn[x],val[y]-dmx[y]);\n\t\t\temx[y]=max(emx[x],val[y]-dmn[y]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint x=read();\tint y=read();\tint z=read();\n\t\t\tif(emn[y]<=z&&z<=emx[y])\tputs(\"YES\");\n\t\t\telse\tputs(\"NO\"); \n\t\t}\n\t}\n}\nint main()\n{\n\tint T=read();\n\twhile(T--)\tsolve();\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dfs and similar",
        "dp",
        "graphs",
        "greedy",
        "math",
        "trees"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F1. Omsk Metro  simple version .json",
    "editorial_link": "https://codeforces.com//blog/entry/117468",
    "editorial": "Let be the maximal sum on the path subsegment, the minimal sum on the\r\npath subsegment. Then it is said that a subsegment with sum exists if\r\nand only if .Proof: Let us fix the subsegment with the minimum sum and\r\nthe subsegment with the maximum sum. Now, we want to go from the first\r\nsegment to the second one by consecutively removing or adding elements\r\nfrom the ends of the segment. Note that, due to the fact that , for each\r\nsuch action, the sum on the segment will change by exactly . In other\r\nwords, no matter how we go from one segment to another, the sum will\r\nremain a discretely continuous value. Then, since this function takes\r\nvalues of the minimum and maximum sum, it also takes all values from the\r\nsegment between them (by the intermediate value theorem). Thus, the set\r\nof all possible sums on the subsegments is the interval of integers\r\nbetween the minimum and maximum sum, from which the original assumption\r\nfollows.Now, we have turned the problem down to finding the subsegment\r\nwith the minimum and maximum sum on the path in the tree. Let be the\r\nmaximum sum on the subsegment on the path from to , the maximum sum on\r\nthe suffix of the path from to , the ancestor of vertex , its weight.\r\nThen , . Thus, we have learned to calculate the necessary values for a\r\nvertex immediately at the moment of its addition, which allows us to\r\nsolve the problem online (but it is not required in the problem itself).\r\nThe values for the minimum are counted in the same way.Total complexity:\r\n.\r\n"
}