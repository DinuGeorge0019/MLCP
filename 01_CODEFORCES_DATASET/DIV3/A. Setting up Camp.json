{
    "link": "https://codeforces.com//contest/1945/problem/A",
    "problemId": "2540236",
    "problem_idx": "A",
    "shortId": "1945A",
    "contest_number": "1945",
    "problem_submissions": {
        "G": [
            252240841,
            252250866,
            252420396,
            252278722,
            252525005,
            252548158,
            252390608,
            252567317,
            252552741
        ],
        "E": [
            252219497,
            252219260,
            252213387,
            252225102,
            252223337,
            252221318,
            252228596,
            252237032,
            252235746,
            252231786,
            252228604,
            252232973,
            252223877,
            252227459,
            252232102,
            252227652,
            252224399,
            252228708,
            252219208,
            252234028,
            252232706,
            252237279,
            252235482
        ],
        "F": [
            252212698,
            252234280,
            252233067,
            252234341,
            252240611,
            252234408,
            252239611,
            252243237,
            252244691,
            252376596,
            252238557,
            252239689,
            252241751,
            252248456,
            252244763,
            252248686,
            252238419,
            252251638,
            252253337,
            252249409,
            252253972,
            252250630
        ],
        "C": [
            252206245,
            252207712,
            252202451,
            252208700,
            252207454,
            252210649,
            252206365,
            252207126,
            252207020,
            252209180,
            252213309,
            252203687,
            252209170,
            252214626,
            252209187,
            252244934,
            252208556,
            252217228,
            252213088,
            252217154
        ],
        "D": [
            252198864,
            252212223,
            252207311,
            252216917,
            252210946,
            252214851,
            252215523,
            252213673,
            252211331,
            252213241,
            252218189,
            252208559,
            252214624,
            252218088,
            252216560,
            252210697,
            252213737,
            252221839,
            252218355,
            252222523
        ],
        "B": [
            252195700,
            252203456,
            252197691,
            252195312,
            252198069,
            252200483,
            252199692,
            252199256,
            252205068,
            252202776,
            252197737,
            252197316,
            252200847,
            252199778,
            252199654,
            252195229,
            252204485,
            252203677,
            252200862
        ],
        "A": [
            252193249,
            252196517,
            252194020,
            252193609,
            252194534,
            252195163,
            252195841,
            252195267,
            252193567,
            252198736,
            252193769,
            252193858,
            252193912,
            252195503,
            252195367,
            252193377,
            252195907,
            252194634,
            252196929
        ],
        "H": [
            252530309,
            252556908
        ]
    },
    "name": "A. Setting up Camp",
    "statement": "The organizing committee plans to take the participants of the Olympiad\r\non a hike after the tour. Currently, the number of tents needed to be\r\ntaken is being calculated. It is known that each tent can accommodate up\r\nto 3 people.Among the participants, there are a introverts, b\r\nextroverts, and c universals: Each introvert wants to live in a tent\r\nalone. Thus, a tent with an introvert must contain exactly one person\r\nonly the introvert himself. Each extrovert wants to live in a tent with\r\ntwo others. Thus, the tent with an extrovert must contain exactly three\r\npeople. Each universal is fine with any option (living alone, with one\r\nother person, or with two others). The organizing committee respects the\r\nwishes of each participant very much, so they want to fulfill all of\r\nthem.Tell us the minimum number of tents needed to be taken so that all\r\nparticipants can be accommodated according to their preferences. If it\r\nis impossible to accommodate the participants in a way that fulfills all\r\nthe wishes, output -1.\r\n",
    "solutions": [
        "#ifdef LOCAL\n#define _GLIBCXX_DEBUG\n#endif\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ld = long double;\nconst ll INF = LLONG_MAX, MOD = 1e9 + 7, P = 239;\nconst ld PI = 3.1415926535897938462643383279502, EPS = 1e-7;\n\ntemplate <typename T>\ninline ll sz(const T &a) {\n    return a.size();\n}\n\ntemplate <typename T, typename C>\nistream &operator >> (istream &in, pair<T, C> &a) {\n    return in >> a.first >> a.second;\n}\n\ntemplate <typename T, typename C>\nostream &operator << (ostream &out, pair<T, C> a) {\n    return out << a.first << ' ' << a.second;\n}\n\ntemplate <typename T>\nistream & operator >> (istream &in, vector<T> &a) {\n    for (auto &i : a) {\n        in >> i;\n    }\n    return in;\n}\n\ntemplate <typename T>\nostream &operator << (ostream &out, vector<T> a) {\n    for (auto i : a) {\n        out << i << ' ';\n    }\n    return out;\n}\n\ntemplate <typename T>\nvoid print(vector<T> a, string c = \"\\n\") {\n    for (T i : a) {\n        cout << i << c;\n    }\n}\n\nvoid solve() {\n    ll a, b, c;\n    cin >> a >> b >> c;\n    if (c < (3 - b % 3) % 3) {\n        return void(cout << -1);\n    }\n    cout << a + (b + c + 2) / 3;\n}\n\nsigned main() {\n#ifdef LOCAL\n    freopen(\"inp.txt\", \"r\", stdin);\n    freopen(\"out.txt\", \"w\", stdout);\n    freopen(\"err.txt\", \"w\", stderr);\n\n    auto start_time = clock();\n#endif\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int times = 1;\n    cin >> times;\n    while (times--)\n        solve(), cout << '\\n';\n\n#ifdef LOCAL\n    auto end_time = clock();\n    cerr << setprecision(3) << fixed << \"Execution time: \" << (end_time - start_time) * (int) 1e3 / CLOCKS_PER_SEC << \" ms\\n\";\n#endif\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\A. Setting up Camp.json",
    "editorial_link": "https://codeforces.com//blog/entry/127377",
    "editorial": "First, letâs consider introverts. Since each of them needs exactly one\r\ntent, we simply add to the answer. Then letâs consider extroverts. If\r\ntheir number is divisible by 3, we add to the answer. Otherwise, we\r\ncalculate , where denotes the remainder from dividing by . If , then\r\nthere is no answer, as it is not possible to accommodate the extroverts\r\nin the tents. Otherwise, we subtract from and add to the answer.The\r\ngeneral formula when there is an answer: .Complexity: .\r\n",
    "hint": []
}