{
    "link": "https://codeforces.com//contest/1674/problem/D",
    "problemId": "1387200",
    "problem_idx": "D",
    "shortId": "1674D",
    "contest_number": "1674",
    "problem_submissions": {
        "G": [
            155646371,
            155678319,
            155682648,
            155674622,
            155685706,
            155652398,
            155774505,
            155758418,
            155756941,
            155756549,
            155813512,
            155812905,
            155812142,
            155668112,
            155672472,
            155679227
        ],
        "E": [
            155631011,
            155634103,
            155643152,
            155675920,
            155631080,
            155651713,
            155617544,
            155694232,
            155715039,
            155714839,
            155714791,
            155637067,
            155642168,
            155638571,
            155649103,
            155635417,
            155641093,
            155646304,
            155721408,
            155721277,
            155636472,
            155697116,
            155650091,
            155644616
        ],
        "D": [
            155618739,
            155613748,
            155616684,
            155656367,
            155626968,
            155608446,
            155610953,
            155612083,
            155611734,
            155659957,
            155623954,
            155619138,
            155624149,
            155621266,
            155624757,
            155627320,
            155618076,
            155634919,
            155611685,
            155616988
        ],
        "F": [
            155617525,
            155657845,
            155669742,
            155653200,
            155666820,
            155638184,
            155625715,
            155652009,
            155672980,
            155630184,
            155664338,
            155667869,
            155668832,
            155674578,
            155651745,
            155669165,
            155649876,
            155663032,
            155653319,
            155665427
        ],
        "C": [
            155604778,
            155603079,
            155604115,
            155615008,
            155611152,
            155601227,
            155598610,
            155598459,
            155599303,
            155601929,
            155605133,
            155602572,
            155609155,
            155606549,
            155606406,
            155613995,
            155599916,
            155616867,
            155601683,
            155604335
        ],
        "B": [
            155596261,
            155597272,
            155595696,
            155604402,
            155605300,
            155597345,
            155593808,
            155599168,
            155593898,
            155596784,
            155597719,
            155597183,
            155602563,
            155597000,
            155600384,
            155600158,
            155595285,
            155605630,
            155596236,
            155595482
        ],
        "A": [
            155592021,
            155592145,
            155591844,
            155602088,
            155598548,
            155592326,
            155591501,
            155592241,
            155591537,
            155593757,
            155591678,
            155592049,
            155596267,
            155592804,
            155593311,
            155594974,
            155592005,
            155594331,
            155593247,
            155592088
        ]
    },
    "name": "D. A-B-C Sort",
    "statement": "You are given three arrays a, b and c. Initially, array a consists of n\r\nelements, arrays b and c are empty.You are performing the following\r\nalgorithm that consists of two steps: Step 1: while a is not empty, you\r\ntake from a and move it of array b. If b currently has odd length, you\r\ncan choose: place the element from a to the left or to the right of the\r\nmiddle element of b. As a result, a becomes empty and b consists of n\r\nelements. Step 2: while b is not empty, you take from b and move it of\r\narray c. If b currently has even length, you can choose which of two\r\nmiddle elements to take. As a result, b becomes empty and c now consists\r\nof n elements. Refer to the Note section for examples.Can you make array\r\nc sorted in non-decreasing order?\r\n",
    "solutions": [
        "    #include \"bits/stdc++.h\"\n     \n    using namespace std;\n     \n    using ll = long long;\n    const ll inf = 1e9;\n    const int md1 = 1e9+7;\n     \n    #define all(v)                      v.begin(), v.end()\n    #define rall(v)                     v.rbegin(), v.rend()\n    #define sz(v)                       ((int)v.size())\n     \n    #define forn(i,n)                   for(int i = 0; i < n; ++i)\n    #define forbe(i,b,e)                for(int i = b; i < e; ++i)\n     \n    #define pb                          push_back\n     \n    #define pry                         puts(\"YES\")\n    #define prn                         puts(\"NO\")\n    #define endl                        '\\n'\n     \n    #define fst                         first\n    #define scn                         second\n     \n    void solve(){\n        int n;\n        cin >> n;\n     \n        vector<int> a(n);\n     \n        for(int i = 0; i < n; ++i)\n            cin >> a[i];\n     \n        for(int i = 0; i < n-1; ++i){\n            if (((n - i) & 1) == 0 && a[i+1] < a[i])\n                swap(a[i], a[i+1]);\n        }\n     \n        for(int i = 0; i + 1 < n; ++i){\n            if (a[i+1] < a[i]){\n                cout << \"NO\\n\";\n                return;\n            }\n        }\n        /* cout << endl; */\n        cout << \"YES\\n\";\n    }\n     \n    int32_t main(){\n        #ifndef ONPC\n            ios_base::sync_with_stdio(0);cin.tie(0);\n        #else\n            freopen(\"in\", \"r\", stdin);\n        #endif\n        int t = 1;\n        cin >> t;\n        while(t--)\n            solve();\n    }"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. A-B-C Sort.json",
    "editorial_link": "https://codeforces.com//blog/entry/102482",
    "editorial": "Letâs look at elements and . After the first step, they will always move\r\nto positions and (itâs up to you to choose: and or vice versa) because\r\nall remaining for will be placed between and .After the second step,\r\nelements and will always be placed at positions and (itâs also up to you\r\nto decide the exact order) because itâs easy to see that you first take\r\nall for and only after that and .In other words, elements and are moved\r\nto positions and . We can analogically prove that each pair is moved to\r\na pair of positions : you first take all elements for and place them at\r\npositions and ; then you move and ; finally you move all remaining\r\nelements from between and . Step just does everything in \"reverse\" order\r\nto step .It means that array is basically array , but you can swap\r\nelements in pairs for . And to make () sorted, we can try to sort each\r\npair and check is it enough to sort the whole array or not.\r\n",
    "hint": []
}