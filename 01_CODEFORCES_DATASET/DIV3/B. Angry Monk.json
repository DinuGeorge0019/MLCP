{
    "link": "https://codeforces.com//contest/1992/problem/B",
    "problemId": "2748264",
    "problem_idx": "B",
    "shortId": "1992B",
    "contest_number": "1992",
    "problem_submissions": {
        "G": [
            270004158,
            270000712,
            270020186,
            270006424,
            270010291,
            270026135,
            270032635,
            270035721,
            270033149,
            270036718,
            270041253,
            270830404,
            270035615,
            270034895,
            270041739,
            270045150,
            269953500,
            270015289,
            269950486
        ],
        "F": [
            269972577,
            270018896,
            269993465,
            269987867,
            269991929,
            270003873,
            269994703,
            270009199,
            270016540,
            270005935,
            270127981,
            270013136,
            270020087,
            270019936,
            270018379,
            269963694,
            270043761,
            270005597,
            269985278
        ],
        "D": [
            269954705,
            269930808,
            269933166,
            269942867,
            269936957,
            269946925,
            269942518,
            269941050,
            269944797,
            269962503,
            269960047,
            269956728,
            269964646,
            270000105,
            269992943,
            269953387,
            270024549,
            269937412
        ],
        "E": [
            269950946,
            269964630,
            269972651,
            269967159,
            269979484,
            269986612,
            269986054,
            269986867,
            269983914,
            269989311,
            269990694,
            269983845,
            269996015,
            269971543,
            269983529,
            270000206,
            270015715,
            269961487
        ],
        "C": [
            269920653,
            269918264,
            269915470,
            269928750,
            269924685,
            269919119,
            269916880,
            269924258,
            269918590,
            269936939,
            269921649,
            269929196,
            269923650,
            269913996,
            269998285,
            269933575,
            270027835,
            269914944
        ],
        "B": [
            269901952,
            269907735,
            269910847,
            269907929,
            269906378,
            269906593,
            269906048,
            269911414,
            269907898,
            269912483,
            269907733,
            269916021,
            269911764,
            269906789,
            270003910,
            269961585,
            270031623,
            269906408
        ],
        "A": [
            269898839,
            269900621,
            269899306,
            269900117,
            269900634,
            269898982,
            269898946,
            269899343,
            269899743,
            269900745,
            269900678,
            269900839,
            269903685,
            269898938,
            270007186,
            269957657,
            270033185,
            269900065
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131461",
    "editorial": "TutorialLet\u00e2\u0080\u0099s say we want to connect two casseroles with lengths and .\r\nWe can disassemble one of them into pieces of length and then attach\r\nthem to the casserole of size . In total, we will perform operations.\r\nSince we want to connect pieces, at least of them will have to be\r\ndisassembled and then attached to something. If we attach something to a\r\npiece, there is no point in disassembling it, because to disassemble it,\r\nwe will need to remove these pieces as well. Therefore, we want to\r\nchoose a piece to which we will attach all the others. It will be\r\noptimal to choose a piece with the maximum size and attach everything to\r\nit. Thus, the answer is , where the length of the maximum piece.Solution\r\ncomplexity: .\r\n",
    "name": "B. Angry Monk",
    "statement": "To celebrate his recovery, k1o0n has baked an enormous n metres long\r\npotato casserole.Turns out, Noobish_Monk just can\u2019t stand potatoes, so\r\nhe decided to ruin k1o0n\u2019s meal. He has cut it into k pieces, of lengths\r\na_1, a_2,\r\ndots, a_k meters.k1o0n wasn\u2019t keen on that. Luckily, everything can be\r\nfixed. In order to do that, k1o0n can do one of the following\r\noperations: Pick a piece with length a_i\r\nge 2 and divide it into two pieces with lengths 1 and a_i - 1. As a\r\nresult, the number of pieces will increase by 1; Pick a slice a_i and\r\nanother slice with length a_j=1 (i\r\nne j) and merge them into one piece with length a_i+1. As a result, the\r\nnumber of pieces will decrease by 1. Help k1o0n to find the minimum\r\nnumber of operations he needs to do in order to merge the casserole into\r\none piece with length n.For example, if n=5, k=2 and a = [3, 2], it is\r\noptimal to do the following: Divide the piece with length 2 into two\r\npieces with lengths 2-1=1 and 1, as a result a = [3, 1, 1]. Merge the\r\npiece with length 3 and the piece with length 1, as a result a = [4, 1].\r\nMerge the piece with length 4 and the piece with length 1, as a result a\r\n= [5].\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using namespace std;\u00a0#define int long long#define inf 0x3F3F3F3F3F3F3F3F\u00a0const int MXN = 2e5 + 5;\u00a0mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\u00a0void _(){\tint n, k;\tcin >> n >> k;\tint a[k];\tfor (int &i : a) cin >> i;\tsort(a, a + k, greater<int> ());\tint res = 0;\tfor (int i = 1; i < k; i++) res += a[i] - 1 + a[i];\tcout << res << '\\n';}\u00a0signed main(){\tios_base::sync_with_stdio(0);\tcin.tie(0);\tint t;\tcin >> t;\twhile (t--)\t{\t\t_();\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\B. Angry Monk.json"
}