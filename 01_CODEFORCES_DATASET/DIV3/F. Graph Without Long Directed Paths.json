{
    "link": "https://codeforces.com//contest/1144/problem/F",
    "problemId": "322487",
    "problem_idx": "F",
    "shortId": "1144F",
    "contest_number": "1144",
    "problem_submissions": {
        "G": [
            52105008,
            52115875,
            52124809,
            52311146,
            52118351,
            52313030
        ],
        "E": [
            52101381,
            52103848,
            52100390,
            52103649,
            52104862,
            52109101,
            52102842,
            52107540,
            52111264,
            52112468,
            52260664,
            52109742,
            52111378,
            52113457,
            52114606,
            52105560,
            52108689,
            52119398,
            52111986,
            52114107
        ],
        "F": [
            52095886,
            52109100,
            52110494,
            52107320,
            52107378,
            52103623,
            52111392,
            52111875,
            52109029,
            52108638,
            52103543,
            52103345,
            52106901,
            52107210,
            52106754,
            52111935,
            52119339,
            52102752,
            52105488,
            52108153
        ],
        "D": [
            52090019,
            52100588,
            52092311,
            52097671,
            52099406,
            52099269,
            52097110,
            52097725,
            52096933,
            52100380,
            52097140,
            52098645,
            52102773,
            52099192,
            52099366,
            52100428,
            52099939,
            52097949,
            52102364,
            52100814
        ],
        "C": [
            52089034,
            52096181,
            52089279,
            52094055,
            52091090,
            52091960,
            52092409,
            52092424,
            52092267,
            52092714,
            52092539,
            52093040,
            52092790,
            52093635,
            52092887,
            52094789,
            52090226,
            52092962,
            52093892,
            52094692
        ],
        "B": [
            52086626,
            52090793,
            52086733,
            52090174,
            52089416,
            52088582,
            52089163,
            52088931,
            52089378,
            52087490,
            52088380,
            52094345,
            52089645,
            52089638,
            52089793,
            52091232,
            52087215,
            52089217,
            52090678,
            52090945
        ],
        "A": [
            52085844,
            52087003,
            52085711,
            52087471,
            52085997,
            52086503,
            52085607,
            52086179,
            52086274,
            52085411,
            52085724,
            52085963,
            52086646,
            52086484,
            52086097,
            52087942,
            52085314,
            52086675,
            52088201,
            52086796
        ]
    },
    "name": "F. Graph Without Long Directed Paths",
    "statement": "You are given a connected undirected graph consisting of n vertices and\r\nm edges. There are no self-loops or multiple edges in the given\r\ngraph.You have to direct its edges in such a way that the obtained\r\ndirected graph does not contain any paths of length two or greater\r\n(where the length of path is denoted as the number of traversed edges).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define mem(u, v) memset(u, v, sizeof(u))\n#define INF 0x3f3f3f3f\n#define pii pair<int, int >\n#define LL long long\n#define mid (l + r) / 2\n#define lowbit(x) x & -x\nusing namespace std;\nconst int N = 1e6 + 7;\n\nbool flag = true;\nvector<int > p[N];\nint vis[N], u[N], v[N];\n\nvoid dfs(int x, int r, int fa){\n\tint len = p[x].size();\n\tvis[x] = r;\n\tfor (int i = 0; i < len; i++){\n\t\tif (p[x][i] == fa) continue;\n\t\tif (vis[p[x][i]] == -1){\n\t\t\tdfs(p[x][i], r ^ 1, x);\n\t\t} else if (vis[p[x][i]] == r){\n\t\t\tflag = false;\n\t\t}\n\t}\n}\n\nint main(){\n\tint n, m;\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= m; i++){\n\t\tscanf(\"%d%d\", &u[i], &v[i]);\n\t\tp[u[i]].push_back(v[i]);\n\t\tp[v[i]].push_back(u[i]);\n\t} \n\tmem(vis, -1);\n\tdfs(1, 0, 0);\n\tif (!flag) printf(\"NO\");\n\telse {\n\t\tprintf(\"YES\\n\");\n\t\tfor (int i = 1; i <= m; i++) printf(\"%d\", vis[u[i]] > vis[v[i]]);\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Graph Without Long Directed Paths.json",
    "editorial_link": "https://codeforces.com/blog/entry/66307",
    "editorial": "What if the given graph will contain a cycle of odd length? It will mean\r\nthat some two consecutive edges of this cycle will be oriented in the\r\nsame way and will form a path of length two.What if there is no cycles\r\nof odd length in this graph? Then it is bipartite. Letâs color it and\r\nsee what we got. We got some vertices in the left part, some vertices in\r\nthe right part and all edges connecting vertices from different parts.\r\nLetâs orient all edges such that them will go from the left part to the\r\nright part. Thatâs it.\r\n",
    "hint": []
}