{
    "link": "https://codeforces.com//contest/1980/problem/E",
    "problemId": "2679077",
    "problem_idx": "E",
    "shortId": "1980E",
    "contest_number": "1980",
    "problem_submissions": {
        "F2": [
            264034665,
            264025304,
            264247676,
            264019993,
            264024427,
            264029852,
            264023188,
            264027216,
            297729485,
            297729442,
            297728361,
            297728328
        ],
        "G": [
            264011385,
            263992122,
            268025366,
            264215525,
            264011872,
            264084430,
            264264232,
            264263765,
            264069123,
            264079559,
            264078668
        ],
        "F1": [
            263976190,
            263977123,
            263986480,
            263993424,
            264008757,
            263990594,
            264002101,
            263997926,
            264028649,
            263987133,
            263983649,
            263982394,
            264008279,
            263992416,
            264001050,
            263982241,
            263973003,
            297724971,
            263994302,
            263989092,
            263991078
        ],
        "E": [
            263949022,
            263952956,
            263961437,
            263972191,
            263952206,
            263972111,
            263965559,
            263972356,
            263979958,
            263960816,
            263958713,
            263958124,
            263952216,
            263968394,
            263952644,
            263960173,
            263957033,
            263960055,
            263959465,
            263968735
        ],
        "D": [
            263937338,
            263941014,
            263940806,
            263951978,
            263959721,
            263955612,
            263952654,
            263955258,
            263970236,
            263929153,
            263938177,
            263937870,
            263931692,
            263943850,
            263942483,
            263952145,
            263949853,
            263944438,
            263947463,
            263956473
        ],
        "C": [
            263918738,
            263918609,
            263924884,
            263925019,
            263927010,
            263934895,
            263950793,
            263933470,
            263946468,
            263911344,
            263918263,
            263919725,
            263911878,
            263921063,
            263925590,
            263921654,
            263927275,
            263926350,
            263931913,
            263931664
        ],
        "B": [
            263905986,
            263904943,
            263911595,
            263912040,
            263903286,
            263919041,
            263916463,
            263913479,
            263919564,
            263901644,
            263907263,
            263909074,
            263903306,
            263904343,
            263907275,
            263910981,
            263913905,
            263915385,
            263916132,
            263900094
        ],
        "A": [
            263898827,
            263896737,
            263896710,
            263899946,
            263896564,
            263900183,
            263902852,
            263902771,
            263905894,
            263896600,
            263896618,
            263897271,
            263897395,
            263896553,
            263899202,
            263896419,
            263897066,
            263897350,
            263900369,
            263899316,
            263897377
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/130135",
    "editorial": "For each element, you can calculate its positions in both matrices. You\r\ncan see that the rearrangement of rows does not affect the column\r\npositions of the elements being rearranged. Similarly, column\r\nrearrangement does not affect row positions. Since the permutation of\r\nrows affects the entire rows, for all elements that have the same\r\nposition row in the original matrix, the position row in the resulting\r\nmatrix must also match. Similarly, the columns must match.In order to\r\ncheck the coincidence of rows and columns, letâs count 4 arrays the\r\npositions of rows and columns in the original and received matrices.\r\nThen you need to check that for all with the same row value in the\r\noriginal matrix, the row values in the resulting matrix are the same.\r\nSimilarly, the values of the columns should be the same.\r\n",
    "name": "E. Permutation of Rows and Columns",
    "statement": "You have been given a matrix a of size n by m, containing a permutation\r\nof integers from 1 to n\r\ncdot m.A permutation of n integers is an array containing all numbers\r\nfrom 1 to n exactly once. For example, the arrays [1], [2, 1, 3], [5, 4,\r\n3, 2, 1] are permutations, while the arrays [1, 1], [100], [1, 2, 4, 5]\r\nare not.A matrix contains a permutation if, when all its elements are\r\nwritten out, the resulting array is a permutation. Matrices [[1, 2], [3,\r\n4]], [[1]], [[1, 5, 3], [2, 6, 4]] contain permutations, while matrices\r\n[[2]], [[1, 1], [2, 2]], [[1, 2], [100, 200]] do not.You can perform one\r\nof the following two actions in one operation: choose columns c and d (1\r\nle c, d\r\nle m, c\r\nne d) and swap these columns; choose rows c and d (1\r\nle c, d\r\nle n, c\r\nne d) and swap these rows. You can perform any number of operations.You\r\nare given the original matrix a and the matrix b. Your task is to\r\ndetermine whether it is possible to transform matrix a into matrix b\r\nusing the given operations.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std; int main() {    ios::sync_with_stdio(false);    cin.tie(nullptr);    int t; cin >> t;    while (t--) {        int n, m; cin >> n >> m;        vector a(n, vector<int>(m)), b(n, vector<int>(m));        for (auto &v: a) for (int &x: v) cin >> x;        for (auto &v: b) for (int &x: v) cin >> x;        map<int, int> ai, aj;        map<int, vector<int>> imp, jmp;        for (int i = 0; i < n; i++) {            for (int j = 0; j < m; j++) {                int x = a[i][j];                ai[x] = i, aj[x] = j;            }        }        for (int i = 0; i < n; i++) {            for (int j = 0; j < m; j++) {                int x = b[i][j];                imp[ai[x]].push_back(i), jmp[aj[x]].push_back(j);            }        }        bool ans = true;        for (auto [_, v]: imp) {            sort(v.begin(), v.end());            ans &= (v.front() == v.back());        }        for (auto [_, v]: jmp) {            sort(v.begin(), v.end());            ans &= (v.front() == v.back());        }        cout << (ans ? \"YES\" : \"NO\") << \"\\n\";    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "hashing",
        "implementation",
        "math",
        "matrices",
        "sortings"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\E. Permutation of Rows and Columns.json",
    "hint": []
}