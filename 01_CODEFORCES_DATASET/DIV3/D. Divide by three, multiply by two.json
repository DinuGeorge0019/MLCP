{
    "link": "https://codeforces.com//contest/977/problem/D",
    "problemId": "181255",
    "problem_idx": "D",
    "shortId": "977D",
    "contest_number": "977",
    "problem_submissions": {
        "F": [
            37953040,
            37954853,
            37956923,
            37956444,
            37956668,
            37955836,
            37936561,
            37948514,
            37950875,
            37954682,
            37954155,
            37963825,
            37947599,
            37954392,
            37949871,
            37951784,
            37954414,
            37960538,
            37955846,
            37949841
        ],
        "E": [
            37949370,
            37951257,
            37951081,
            37951485,
            37948712,
            37951230,
            37942528,
            37944878,
            37947562,
            38096112,
            37946372,
            37950654,
            37948745,
            37952883,
            37949399,
            37959345,
            37958962,
            37949557,
            38007916,
            37947057,
            37944768,
            37952160,
            37971056,
            37970300,
            37954498
        ],
        "D": [
            37945678,
            37944291,
            37945496,
            37944981,
            37944238,
            37945846,
            37945470,
            37942551,
            37956640,
            37950668,
            37945626,
            37943157,
            37942510,
            37940098,
            37964266,
            37963856,
            37963743,
            37943936,
            37943935,
            37953517,
            37949143,
            37938125
        ],
        "C": [
            37939418,
            37938533,
            37938833,
            37938453,
            37937230,
            37937332,
            37943206,
            37937093,
            37939874,
            37940598,
            37939826,
            37936805,
            37937760,
            37936881,
            37937722,
            37945760,
            37936821,
            37939453,
            37939008,
            37934533
        ],
        "B": [
            37934918,
            37934879,
            37935006,
            37934743,
            37934120,
            37933912,
            37939150,
            37934910,
            37935223,
            37935851,
            37937416,
            37932759,
            37932271,
            37935451,
            37935231,
            37937590,
            37933409,
            37934080,
            37933977,
            37934387
        ],
        "A": [
            37931506,
            37934128,
            37931332,
            37932430,
            37932516,
            37931234,
            37933447,
            37932411,
            37934760,
            37932666,
            37934427,
            37931097,
            37932757,
            37931225,
            37931938,
            37935268,
            37931464,
            37934315,
            37931090,
            37931415
        ]
    },
    "name": "D. Divide by three, multiply by two",
    "statement": "Polycarp likes to play with numbers. He takes some integer number x,\r\nwrites it down on the board, and then performs with it n - 1 operations\r\nof the two kinds: divide the number x by 3 (x must be divisible by 3);\r\nmultiply the number x by 2. After each operation, Polycarp writes down\r\nthe result on the board and replaces x by the result. So there will be n\r\nnumbers on the board after all.You are given a sequence of length n the\r\nnumbers that Polycarp wrote down. This sequence is given in arbitrary\r\norder, i.e. the order of the sequence can mismatch the order of the\r\nnumbers written on the board.Your problem is to rearrange (reorder)\r\nelements of this sequence in such a way that it can match possible\r\nPolycarp\u2019s game in the order of the numbers written on the board. I.e.\r\neach next number will be exactly two times of the previous number or\r\nexactly one third of previous number.It is guaranteed that the answer\r\nexists.\r\n",
    "solutions": [
        "/*input\n2\n1000000000000000000 3000000000000000000\n\n\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define db(a) cerr<<#a<<\" = \"<<a<<'\\n'\nusing namespace std;\n\nint main(){\n\tint n;\n\tcin >> n;\n\n\tvector<ll> a(n);\n\t\n\t\n\n\tvector<pair<pair<int, int>, ll> > p(n);\n\tfor(int i=0; i<n; i++){\n\t\tll t;\n\t\tcin >> t;\n\t\tp[i].second = t;\n\n\t\twhile(t % 2 == 0){\n\t\t\tp[i].first.first++;\n\t\t\tt /= 2;\n\t\t}\n\n\t\tt = p[i].second;\n\t\twhile(t % 3 == 0){\n\t\t\tp[i].first.second++;\n\t\t\tt /= 3;\n\t\t}\n\t}\n\n\tsort(p.begin(), p.end(), [](pair<pair<int, int>, ll> a, pair<pair<int, int>, ll> b){\n\t\tpair<int, int> aa = {-a.first.second, a.first.first};\n\t\tpair<int, int> bb = {-b.first.second, b.first.first};\n\t\treturn aa < bb;\n\t});\n\n\tfor(int i=0; i<n; i++){\n\t\tcout << p[i].second << \" \";\n\t}\n\n}\n\t"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "math",
        "sortings"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\D. Divide by three, multiply by two.json",
    "editorial_link": "https://codeforces.com//blog/entry/59281",
    "editorial": "Let be the maximum integer such that ( is divisible by ).Our problem is\r\nto rearrange the given array in such a way that (easy to see it if we\r\nlook at our operations) if it looks like , then for each the next\r\ninequality will be satisfied: . And if then numbers must be placed in\r\nincreasing order (because of our operations). So we can store an array\r\nof pairs , when , , . Then if we sort it in lexicographical order we can\r\njust print the second elements of the sorted array .\r\n"
}