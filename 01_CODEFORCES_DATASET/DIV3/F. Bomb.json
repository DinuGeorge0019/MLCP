{
    "link": "https://codeforces.com//contest/1996/problem/F",
    "problemId": "2778593",
    "problem_idx": "F",
    "shortId": "1996F",
    "contest_number": "1996",
    "problem_submissions": {
        "G": [
            272815559,
            272903634,
            272903592,
            272903418,
            272850378,
            272829160,
            272846769,
            272917148,
            272843968,
            272801966,
            272891447,
            273051360,
            273051300,
            272852709,
            277596550
        ],
        "F": [
            272784299,
            272793161,
            272807689,
            272809360,
            272830969,
            272798046,
            272797379,
            272844703,
            272806635,
            272800919,
            272804361,
            272807242,
            272813027,
            272855036,
            272810332,
            272821433,
            272800404,
            272820587,
            272829162,
            272807664,
            272816226,
            272821599,
            272820591,
            272815918
        ],
        "E": [
            272768761,
            272775513,
            272762810,
            272775844,
            272823416,
            272782075,
            272761261,
            272777167,
            272789153,
            272785690,
            272777083,
            272786909,
            272772099,
            272795998,
            272776949,
            272765827,
            272789445,
            272789546,
            272779861,
            272787485
        ],
        "D": [
            272761438,
            272765354,
            272813661,
            272767517,
            272818911,
            272771177,
            272779573,
            272778986,
            272764786,
            272769566,
            272775352,
            272769622,
            272774700,
            272762959,
            272779115,
            272762141,
            272771898,
            272774147,
            272768381,
            272773685,
            272774940
        ],
        "C": [
            272749300,
            272751224,
            272747619,
            272760085,
            272816579,
            272747209,
            272749428,
            272754671,
            272751382,
            272753279,
            272756574,
            272752694,
            272753758,
            272752271,
            272750229,
            272749232,
            272759739,
            272751545,
            272748871,
            272750894
        ],
        "B": [
            272737073,
            272739985,
            272740771,
            272742756,
            272810526,
            272736341,
            272731072,
            272746867,
            272739153,
            272741965,
            272746544,
            272740783,
            272737062,
            272739328,
            272737959,
            272736354,
            272749397,
            272742081,
            272736698,
            272740417
        ],
        "A": [
            272724627,
            272725221,
            272724958,
            272806237,
            272724506,
            272723181,
            272724288,
            272724605,
            272723501,
            272737370,
            272725890,
            272725751,
            272728152,
            272725138,
            272723459,
            272723672,
            272729720,
            272724250,
            272726300
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131948",
    "editorial": "Let's first solve the problem in O(k)\n. One possible solution is to loop through each operation and take the largest ai\n each time, and set ai=max(0,ai?bi)\n. This can be done with a set or a priority queue.\n\nWith that in mind, let's binary search for the largest x\n such that every value we add to our score has been greater or equal to x\n for all k\n operations. Define f(x)\n as the number of operations required for every ai\n to be less than x\n. Specifically, f(x)=?ni=1?ai?xbi?\n. We are searching for the smallest x\n such that f(x)?k\n. Once we've found x\n, we can subtract f(x)\n from k\n. Note that now, k\n must be less than to n\n (otherwise we can another operation on all ai\n). So, it suffices to run the slow solution for these remaining operations (as long as ai>0\n). Alternatively, we can notice that the remaining operations will all add x?1\n to our answer (assuming x>0\n).\n\nTo obtain the sum of all ai\n we collected when calculating f(x)\n, we can use the arithmetic sequence sum formula. For each i\n, the number of terms in the sequence is t=?ai?xbi?\n. The first term of the sequence is f=ai?bi?(t?1)\n. The last term is ai\n. Using the formula, we can add t2(f+ai)\n to the answer.",
    "name": "F. Bomb",
    "statement": "Sparkle gives you two arrays a and b of length n. Initially, your score\r\nis 0. In one operation, you can choose an integer i and add a_i to your\r\nscore. Then, you must set a_i =\r\nmax(0, a_i - b_i).You only have time to perform k operations before\r\nSparkle sets off a nuclear bomb! What is the maximum score you can\r\nacquire after k operations?\r\n",
    "solutions": [
        "/**   - dwuy -\u00a0\u3000\u3000\u3000\u3000\u3000 \uff0f\uff1e\u3000   \u30d5\u3000\u3000\u3000\u3000\u3000 | \u3000_\u3000 _|\u3000 \u3000\u3000\u3000 \uff0f`\u30df _x \u30ce\u3000\u3000 \u3000 /\u3000\u3000\u3000 \u3000 |\u3000\u3000\u3000 /\u3000  \u30fd\u3000\u3000 ?\u3000\uff0f\uffe3|\u3000\u3000 |\u3000|\u3000|\u3000| (\uffe3\u30fd\uff3f_\u30fd_)_)\u3000\uff3c\u4e8c\u3064\u00a0**/#include <bits/stdc++.h>\u00a0#define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL)#define file(a) freopen(a\".inp\",\"r\",stdin); freopen(a\".out\", \"w\",stdout)#define fi first#define se second#define endl \"\\n\"#define len(s) (int)((s).size())#define MASK(k)(1LL<<(k))#define TASK \"test\"#define int long long\u00a0using namespace std;\u00a0typedef tuple<int, int, int> tpiii;typedef pair<double, double> pdd;typedef pair<int, int> pii;typedef long long ll;\u00a0const long long OO = 1e18;const int MOD = 1e9 + 7;const int INF = 1e9;const int MX = 300005;\u00a0int n, m, k, q;string s, t;int a[MX];int b[MX];\u00a0int calc(int l, int r, int k){    return (l + r)*((r - l)/k + 1)/2;}\u00a0void solve(){    cin >> n >> k;    for(int i=1; i<=n; i++) cin >> a[i];    for(int i=1; i<=n; i++) cin >> b[i];\u00a0    int res = 0;    for(int lo=0, hi=1e9; lo<=hi;){        int mid = (lo + hi)>>1;        int cnt = 0;        for(int i=1; i<=n; i++) if(a[i] >= mid){            cnt += (a[i] - mid)/b[i] + 1;        }        if(cnt >= k) res = mid, lo = mid + 1;        else hi = mid - 1;    }    int ans = 0;    vector<int> tmp;    for(int i=1; i<=n; i++) if(a[i] >= res){        if((a[i] - res)/b[i]) ans += calc(a[i] - b[i]*((a[i] - res)/b[i] - 1), a[i], b[i]);        tmp.push_back(a[i] - b[i]*((a[i] - res)/b[i]));        k -= (a[i] - res)/b[i];    }        sort(tmp.begin(), tmp.end(), greater<int>());    for(int x: tmp){        if(k == 0) break;        ans += x;        k--;    }    cout << ans << endl;}\u00a0int32_t main(){    fastIO;    //file(TASK);\u00a0    int q;    cin >> q;    while(q--){        solve();    }\u00a0    // cout << calc(5, 17, 4);\u00a0    return 0;}\u00a0\u00a0\u00a0"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV3\\F. Bomb.json"
}