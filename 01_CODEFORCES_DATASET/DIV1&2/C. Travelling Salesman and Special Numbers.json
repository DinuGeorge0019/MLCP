{
    "link": "https://codeforces.com//contest/914/problem/C",
    "problemId": "148488",
    "problem_idx": "C",
    "shortId": "914C",
    "contest_number": "914",
    "problem_submissions": {
        "E": [
            34383567,
            34380688,
            34384037,
            34379971,
            34385853,
            34381341,
            34377061,
            34385471,
            34377068,
            34383097,
            34381216,
            34377930,
            34393845,
            34378590,
            34386380,
            34381164
        ],
        "C": [
            34382803,
            34382793,
            34364057,
            34365651,
            34386486,
            34396063,
            34363721,
            34365741,
            34364774,
            34366702,
            34391506,
            34365007,
            34367351,
            34382826,
            34374119,
            34384464,
            34372151,
            34370073
        ],
        "G": [
            34376415,
            34377275,
            34377412,
            34382707,
            34380896,
            34376017,
            34382091,
            34379406,
            34377065,
            34381510,
            34378767,
            34384171,
            34382760,
            34380461,
            34386445,
            34380566,
            34388276,
            34376347,
            34387872,
            34388821
        ],
        "F": [
            34372924,
            34364964,
            34388114,
            34388527,
            34377465,
            34383969,
            34384849,
            34382075,
            34408585,
            34427444,
            34427415,
            34427411,
            34427369,
            34426234,
            34426219,
            34426204,
            34426181,
            34395428,
            34395305,
            34393742,
            34393096,
            34392685,
            34377829,
            34381405,
            34389663,
            34384026
        ],
        "D": [
            34370762,
            34371655,
            34369773,
            34368591,
            34374188,
            34367037,
            34369044,
            34372797,
            34370541,
            34371781,
            34370647,
            34370823,
            34372317,
            34370221,
            34393812,
            34371853,
            34371865,
            34370930,
            34372046,
            34375276,
            34374115
        ],
        "B": [
            34360667,
            34360722,
            34374939,
            34362210,
            34374843,
            34362983,
            34377719,
            34363222,
            34359679,
            34359608,
            34366166,
            34384598,
            34360320,
            34360372,
            34361647,
            34362020,
            34368128,
            34362137,
            34362752,
            34361533
        ],
        "A": [
            34357760,
            34358042,
            34374626,
            34357833,
            34358764,
            34358376,
            34358219,
            34358285,
            34357836,
            34357713,
            34358130,
            34358072,
            34357931,
            34391604,
            34358333,
            34358022,
            34358632,
            34358260,
            34359117,
            34357845
        ],
        "H": [
            34391572,
            34389095
        ]
    },
    "name": "C. Travelling Salesman and Special Numbers",
    "statement": "The Travelling Salesman spends a lot of time travelling so he tends to\r\nget bored. To pass time, he likes to perform operations on numbers. One\r\nsuch operation is to take a positive integer and reduce it to the number\r\nof bits set to in the binary representation of . For example for number\r\nitâ€™s true that , so it has bits set and will be reduced to in one\r\noperation.He calls a number if the minimum number of operations to\r\nreduce it to is .He wants to find out how many special numbers exist\r\nwhich are not greater than . Please help the Travelling Salesman, as he\r\nis about to reach his destination!Since the answer can be large, output\r\nit modulo .\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<set>\n#include<cmath>\n#include<iostream>\n#include<assert.h>\n#include<queue>\n#include<string>\n#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)\n#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\nusing namespace std;\ntypedef long long LL;\nconst int N=1005;\nconst int P=1000000007;\ninline int Pow(int a,int b){\n\tint c=1;\n\tfor(;b;b>>=1,a=a*1ll*a%P)if(b&1)c=c*1ll*a%P;\n\treturn c;\n}\nint cnt[N];\nint n,k;\nchar a[N];\nint num[N];\nint f[N][N][2];\nint main(){\n\trep(i,1,1000)cnt[i]=cnt[i>>1]+(i&1);\t\n\tscanf(\"%s\",a+1);\n\tn=strlen(a+1);\n\tscanf(\"%d\",&k);\n\tif(k==0){\n\t\tprintf(\"1\\n\");\n\t\treturn 0;\n\t}\n\t--k;\n\trep(i,2,n){\n\t\tnum[i]=num[cnt[i]]+1;\n\t}\n\tf[1][0][1]=1;\n\trep(i,1,n)rep(j,0,n)rep(d,0,1){\n\t\trep(c,0,1){\n\t\t\tif((c>(a[i]-'0'))&&d)continue;\n\t\t\tf[i+1][j+c][d&(c==(a[i]-'0'))]=(f[i+1][j+c][d&(c==(a[i]-'0'))]+f[i][j][d])%P;\n\t\t}\n\t}\n\tint ans=0;\n\trep(i,1,n)rep(d,0,1)if(num[i]==k)ans=(ans+f[n+1][i][d])%P;\n\tif(!k){\n\t\tans=(ans+P-1)%P;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n\n\n\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "dp"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Travelling Salesman and Special Numbers.json",
    "editorial_link": "https://codeforces.com//blog/entry/57250",
    "editorial": "Let us denote the minimum number of steps it takes to reduce a number to\r\nas the order of that number.Since the number of set bits in numbers\r\nsmaller than is less than , any number smaller than would reduce to a\r\nnumber less than in one step. We can precompute the order of the first\r\nnumbers.For each () such that has order , we need to compute the number\r\nof numbers less than or equal to that have set bits. Let be the number\r\nof digits in the binary representation of . Every number satisfies the\r\nproperty that, for some (), the first digits of are the same as that of\r\n, the digit of is , and the -th digit of is . We can iterate through all\r\npossible and compute the answer using binomial coefficients, that can be\r\ncomputed in where is the length of binary representation of n.Time\r\nComplexity: where is the length of binary representation of n.\r\n",
    "hint": []
}