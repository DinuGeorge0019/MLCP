{
    "link": "https://codeforces.com//contest/1209/problem/C",
    "problemId": "411979",
    "problem_idx": "C",
    "shortId": "1209C",
    "contest_number": "1209",
    "problem_submissions": {
        "H": [
            60570135,
            60593253,
            60571964,
            60573026,
            60725224,
            60568078
        ],
        "G1": [
            60556287,
            60555918,
            60560660,
            60545193,
            60554924,
            60565714,
            60564847,
            60552798,
            60544388,
            60543295,
            60556776,
            60547912,
            60548472,
            60548343,
            60554445,
            60552013,
            60553528,
            60550140
        ],
        "F": [
            60551951,
            60559474,
            60551041,
            60555531,
            60550649,
            60550897,
            60556467,
            60559990,
            60548723,
            60548870,
            60575790,
            60552616,
            60555309,
            60557639,
            60553869,
            60548929,
            60549043,
            60560725
        ],
        "E1": [
            60550756,
            60549748,
            60556687,
            60542418,
            60544279,
            60546177,
            60548542,
            60550504,
            60541823,
            60540929,
            60549430,
            60545745,
            60545737,
            60545738,
            60546288,
            60556058,
            60558038,
            60546083
        ],
        "E2": [
            60550484,
            60549405,
            60556943,
            60542599,
            60544405,
            60546112,
            60548494,
            60550663,
            60542010,
            60541156,
            60549544,
            60546078,
            60546087,
            60546121,
            60546350,
            60556107,
            60589552,
            60589526,
            60589450,
            60589386,
            60588908,
            60588877,
            60579849,
            60579734,
            60579573,
            60558088,
            60546300
        ],
        "D": [
            60539597,
            60542953,
            60544285,
            60538671,
            60541008,
            60541094,
            60543213,
            60542943,
            60537333,
            60538028,
            60540579,
            60538998,
            60541063,
            60539296,
            60540559,
            60539902,
            60539449,
            60540533
        ],
        "C": [
            60538071,
            60541013,
            60542624,
            60537384,
            60538008,
            60539883,
            60540890,
            60540668,
            60537787,
            60537103,
            60538560,
            60537646,
            60538820,
            60541917,
            60538555,
            60538406,
            60537838,
            60538612
        ],
        "B": [
            60534755,
            60535450,
            60536787,
            60534226,
            60534529,
            60537069,
            60535685,
            60535878,
            60534260,
            60533467,
            60534967,
            60535176,
            60536131,
            60536594,
            60535887,
            60533931,
            60532807,
            60535219
        ],
        "A": [
            60532612,
            60532698,
            60532910,
            60532511,
            60532605,
            60536220,
            60532574,
            60532833,
            60532652,
            60532527,
            60532568,
            60532602,
            60532828,
            60533109,
            60532549,
            60532535,
            60534221,
            60532564
        ],
        "G2": [
            60566672,
            60567960,
            60565628,
            60564728,
            60572926,
            60607969,
            60701078,
            60577013,
            60576902,
            60576886
        ]
    },
    "name": "C. Paint the Digits",
    "statement": "You are given a sequence of n digits d_1d_2\r\ndots d_{n}. You need to paint all the digits in two colors so that: each\r\ndigit is painted either in the color 1 or in the color 2; if you write\r\nin a row from left to right all the digits painted in the color 1, and\r\nthen after them all the digits painted in the color 2, then the\r\nresulting sequence of n digits will be non-decreasing (that is, each\r\nnext digit will be greater than or equal to the previous digit). For\r\nexample, for the sequence d=914 the only valid coloring is 211 (paint in\r\nthe color 1 two last digits, paint in the color 2 the first digit). But\r\n122 is not a valid coloring (9 concatenated with 14 is not a\r\nnon-decreasing sequence).It is allowed that either of the two colors is\r\nnot used at all. Digits painted in the same color are not required to\r\nhave consecutive positions.Find any of the valid ways to paint the given\r\nsequence of digits or determine that it is impossible to do.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nmt19937 mrand(random_device{}()); \nconst ll mod=1000000007;\nint rnd(int x) { return mrand() % x;}\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nconst int N=201000;\nint _,n,a[N],bit[N];\nchar s[N];\nint main() {\n\tfor (scanf(\"%d\",&_);_;_--) {\n\t\tscanf(\"%d\",&n);\n\t\tscanf(\"%s\",s);\n\t\trep(i,0,n) a[i]=s[i]-'0';\n\t\tauto solve=[&]() {\n\t\t\trep(md,0,10) {\n\t\t\t\trep(i,0,n) {\n\t\t\t\t\tif (a[i]==md) bit[i]=3;\n\t\t\t\t\telse if (a[i]<md) bit[i]=1;\n\t\t\t\t\telse bit[i]=2;\n\t\t\t\t}\n\t\t\t\tbool v2=0;\n\t\t\t\trep(i,0,n) {\n\t\t\t\t\tif (bit[i]==2) v2=1;\n\t\t\t\t\tif (bit[i]==3) { if (!v2) bit[i]=2; else bit[i]=1; }\n\t\t\t\t}\n\t\t\t\tVI v;\n\t\t\t\trep(i,0,n) if (bit[i]==1) v.pb(a[i]);\n\t\t\t\trep(i,0,n) if (bit[i]==2) v.pb(a[i]);\n\t\t\t\tbool f=1;\n\t\t\t\trep(i,1,n) if (v[i]<v[i-1]) f=0;\n\t\t\t\tif (f) {\n\t\t\t\t\trep(i,0,n) printf(\"%d\",bit[i]);\n\t\t\t\t\tputs(\"\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\t\tif (!solve()) puts(\"-\");\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Paint the Digits.json",
    "editorial_link": "https://codeforces.com/blog/entry/69791",
    "editorial": "The sequence must split into two non-decreasing where the end of the first ?\n start of the second.\n\nLet's bruteforce the value x\n, so that all elements <x\n go to the color 1\n, all elements >x\n go to the color 2\n, and for =x\n we are not sure.\n\nActually, we can say that all elements equal to x\n, which go before the first element >x\n ?an safely go to the color 2\n, while the rest can only go to the color 1\n.\n\nSo we colored our sequence and we now only need to check whether this coloring is fine.\n\nComplexity is 10?n\n."
}