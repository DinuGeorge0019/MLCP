{
    "link": "https://codeforces.com//contest/1656/problem/C",
    "problemId": "1341206",
    "problem_idx": "C",
    "shortId": "1656C",
    "contest_number": "1656",
    "problem_submissions": {
        "H": [
            150787257,
            150834092,
            150833898,
            150779624,
            150791810,
            150792367,
            150793746,
            150802821,
            150793244,
            150784328,
            150836239,
            150786830,
            150787392,
            150775313,
            150792322,
            150812291,
            150837917,
            150835814,
            150835788,
            150835748,
            150835735,
            150835565,
            150835404,
            150835313,
            150835295,
            150835202,
            150835140,
            150813121
        ],
        "G": [
            150769137,
            150790740,
            150776335,
            150781798,
            150778878,
            150781350,
            150783120,
            150789415,
            150791824,
            150790309,
            150773559,
            150791984,
            150793946,
            150800739,
            150800780
        ],
        "F": [
            150759585,
            150758819,
            150757088,
            150759741,
            150768307,
            150764851,
            150771817,
            150759499,
            150756577,
            150773688,
            150782772,
            150774145,
            150769570,
            150765258,
            150764625,
            150756214,
            150776414,
            150776503,
            150774655,
            150777047
        ],
        "E": [
            150751361,
            150745742,
            150744206,
            150750256,
            150757531,
            150753091,
            150760157,
            150764520,
            150764445,
            150756529,
            150749400,
            150762413,
            150747229,
            150753617,
            150756813,
            150745115,
            150752324,
            150758442,
            150759352,
            150761061
        ],
        "D": [
            150742723,
            150736825,
            150739691,
            150737309,
            150752373,
            150748905,
            150751158,
            150737577,
            150743318,
            150744109,
            150743943,
            150742795,
            150742345,
            150737178,
            150746671,
            150740470,
            150742866,
            150748659,
            150752013,
            150752792
        ],
        "C": [
            150733096,
            150732015,
            150737243,
            150731632,
            150734197,
            150741651,
            150741487,
            150729270,
            150734650,
            150732482,
            150734630,
            150733212,
            150733482,
            150730538,
            150732987,
            150735181,
            150734697,
            150735222,
            150738885,
            150734495
        ],
        "B": [
            150727707,
            150727564,
            150729524,
            150727729,
            150727957,
            150730109,
            150730045,
            150725120,
            150728043,
            150726472,
            150725778,
            150727111,
            150726454,
            150727018,
            150729221,
            150817665,
            150730058,
            150728199,
            150728859,
            150727704
        ],
        "A": [
            150725204,
            150724798,
            150724946,
            150724479,
            150724835,
            150724855,
            150724694,
            150724426,
            150724692,
            150724405,
            150724424,
            150724740,
            150724465,
            150724564,
            150725589,
            150725242,
            150725512,
            150724576,
            150724789,
            150724666
        ],
        "I": [
            150839781,
            150825396
        ]
    },
    "name": "C. Make Equal With Mod",
    "statement": "You are given an array of n non-negative integers a_1, a_2,\r\nldots, a_n. You can make the following operation: choose an integer x\r\ngeq 2 and replace each number of the array by the remainder when\r\ndividing that number by x, that is, for all 1\r\nleq i\r\nleq n set a_i to a_i\r\nbmod x.Determine if it is possible to make all the elements of the array\r\nequal by applying the operation zero or more times.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n;\n    std::cin >> n;\n    \n    std::vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> a[i];\n    }\n    \n    std::sort(a.begin(), a.end());\n    bool bad = false;\n    for (int i = 0; i < n - 1; i++) {\n        if (a[i] + 1 == a[i + 1]) {\n            bad = true;\n        }\n    }\n    \n    if (std::count(a.begin(), a.end(), 1) && bad) {\n        std::cout << \"NO\\n\";\n    } else {\n        std::cout << \"YES\\n\";\n    }\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math",
        "number theory",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Make Equal With Mod.json",
    "editorial_link": "https://codeforces.com//blog/entry/101211",
    "editorial": "Note that, if is not present in the array, we can always make all\r\nelements equal to by repeatedly applying the operation with until all\r\nelements become , as this operation will set the elements equal to the\r\nmaximum to , while maintaining the others intact. So the answer is\r\nYES.If is present and there are no two consecutive numbers in the array,\r\nwe can similarly apply repeatedly the operation with until all elements\r\nbecome , as this operation will set the elements equal to the maximum to\r\n, while maintaining the others intact. So the answer is again YES.If is\r\npresent in the array, and there are two consecutive numbers in the\r\narray, the answer is NO. Note that if we have a and a in the array, we\r\nwon\u00e2\u0080\u0099t be able to make them equal after any number of operations, and so\r\nwe cannot have any operation with an that divides one of the \u00e2\u0080\u0099s. The\r\nrest of operations will cause that remain consecutive (and thus\r\ndifferent), meaning that it is impossible to make all the array equal.\r\n"
}