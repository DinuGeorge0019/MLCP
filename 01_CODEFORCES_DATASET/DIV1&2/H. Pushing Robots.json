{
    "link": "https://codeforces.com//contest/1609/problem/H",
    "problemId": "1205816",
    "problem_idx": "H",
    "shortId": "1609H",
    "contest_number": "1609",
    "problem_submissions": {
        "H": [
            137263072,
            140966657,
            137541381,
            137373776,
            137353707,
            137353217
        ],
        "G": [
            137246775,
            137257898,
            137258174,
            137261032,
            137258429,
            137256905,
            137250571,
            137257690,
            137251480,
            137263274,
            137259638,
            137276051,
            137269427,
            137261135,
            137260806,
            137259792,
            137262185,
            137263614,
            137264862,
            137254900,
            137261420,
            137264154
        ],
        "F": [
            137240106,
            137246731,
            137244466,
            137246785,
            137246316,
            137246745,
            137260178,
            137270360,
            137247766,
            137257633,
            137249504,
            137249777,
            137249032,
            137252722,
            137252015,
            137251624,
            137252333,
            137250283,
            137261839,
            137252294,
            137249612
        ],
        "E": [
            137234780,
            137235959,
            137233979,
            137232935,
            137235656,
            137237935,
            137233267,
            137237781,
            137236310,
            137235301,
            137237711,
            137241732,
            137237330,
            137241596,
            137235797,
            137236926,
            137239464,
            137239281,
            137241206,
            137238999
        ],
        "D": [
            137226570,
            137230215,
            137231182,
            137228712,
            137232181,
            137231416,
            137229857,
            137231314,
            137233347,
            137230846,
            137231581,
            137229849,
            137233415,
            137234328,
            137231105,
            137231235,
            137232699,
            137231119,
            137233860,
            137235117
        ],
        "C": [
            137224003,
            137226381,
            137228113,
            137226088,
            137228622,
            137227880,
            137227092,
            137227813,
            137229692,
            137227035,
            137228022,
            137226433,
            137228702,
            137230474,
            137231768,
            137227164,
            137229482,
            137228456,
            137229353,
            137230487
        ],
        "B": [
            137222196,
            137223090,
            137224802,
            137223100,
            137224371,
            137223720,
            137223346,
            137224383,
            137222999,
            137223539,
            137224162,
            137223482,
            137224120,
            137224040,
            137223954,
            137223074,
            137224144,
            137224291,
            137224533,
            137224451
        ],
        "A": [
            137221600,
            137221784,
            137221681,
            137221800,
            137221985,
            137221740,
            137221875,
            137222467,
            137221786,
            137221979,
            137222676,
            137221642,
            137222045,
            137222137,
            137226851,
            137224172,
            137221659,
            137222130,
            137222631,
            137222150
        ]
    },
    "name": "H. Pushing Robots",
    "statement": "There’re n robots placed on a number line. Initially, i-th of them\r\noccupies unit segment [x_i, x_i + 1]. Each robot has a program,\r\nconsisting of k instructions numbered from 1 to k. The robot performs\r\ninstructions in a cycle. Each instruction is described by an integer\r\nnumber. Let’s denote the number corresponding to the j-th instruction of\r\nthe i-th robot as f_{i, j}.Initial placement of robots corresponds to\r\nthe moment of time 0. During one second from moment of time t (0\r\nle t) until t + 1 the following process occurs: Each robot performs (t\r\nbmod k + 1)-th instruction from its list of instructions. Robot number i\r\ntakes number F = f_{i, (t\r\nbmod k + 1)}. If this number is negative (less than zero), the robot is\r\ntrying to move to the left with force |F|. If the number is positive\r\n(more than zero), the robot is trying to move to the right with force F.\r\nOtherwise, the robot does nothing. Let’s imaginary divide robots into\r\ngroups of consecutive, using the following algorithm: Initially, each\r\nrobot belongs to its own group. Let’s sum up numbers corresponding to\r\nthe instructions of the robots from one group. Note that we are summing\r\nnumbers without taking them by absolute value. Denote this sum as S. We\r\nsay that the whole group moves together, and does it with force S by the\r\nsame rules as a single robot. That is if S is negative, the group is\r\ntrying to move to the left with force |S|. If S is positive, the group\r\nis trying to move to the right with force S. Otherwise, the group does\r\nnothing. If one group is trying to move, and in the direction of\r\nmovement touches another group, let’s unite them. One group is touching\r\nanother if their outermost robots occupy adjacent unit segments.\r\nContinue this process until groups stop uniting. Each robot moves by 1\r\nin the direction of movement of its group or stays in place if its group\r\nisn’t moving. But there’s one exception. The exception is if there’re\r\ntwo groups of robots, divided by exactly one unit segment, such that the\r\nleft group is trying to move to the right and the right group is trying\r\nto move to the left. Let’s denote sum in the left group as S_l and sum\r\nin the right group as S_r. If |S_l|\r\nle |S_r| only the right group will move. Otherwise, only the left group\r\nwill move. Note that robots from one group don’t glue together. They may\r\nseparate in the future. The division into groups is imaginary and is\r\nneeded only to understand how robots will move during one second [t, t +\r\n1]. An illustration of the process happening during one second:\r\nRectangles represent robots. Numbers inside rectangles correspond to\r\ninstructions of robots. The final division into groups is marked with\r\narcs. Below are the positions of the robots after moving. Only the left\r\nof the two rightmost groups moved. That’s because these two groups tried\r\nto move towards each other, and were separated by exactly one unit\r\nsegment.Look at the examples for a better understanding of the\r\nprocess.You need to answer several questions. What is the position of\r\na_i-th robot at the moment of time t_i?\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 28.11.2021 19:20:06       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p);\n\ntemplate <typename A, typename B, typename C>\nstring to_string(tuple<A, B, C> p);\n\ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p);\n\nstring to_string(const string& s) {\n  return '\"' + s + '\"';\n}\n\nstring to_string(const char* s) {\n  return to_string((string) s);\n}\n\nstring to_string(bool b) {\n  return (b ? \"true\" : \"false\");\n}\n\nstring to_string(vector<bool> v) {\n  bool first = true;\n  string res = \"{\";\n  for (int i = 0; i < static_cast<int>(v.size()); i++) {\n    if (!first) {\n      res += \", \";\n    }\n    first = false;\n    res += to_string(v[i]);\n  }\n  res += \"}\";\n  return res;\n}\n\ntemplate <size_t N>\nstring to_string(bitset<N> v) {\n  string res = \"\";\n  for (size_t i = 0; i < N; i++) {\n    res += static_cast<char>('0' + v[i]);\n  }\n  return res;\n}\n\ntemplate <typename A>\nstring to_string(A v) {\n  bool first = true;\n  string res = \"{\";\n  for (const auto &x : v) {\n    if (!first) {\n      res += \", \";\n    }\n    first = false;\n    res += to_string(x);\n  }\n  res += \"}\";\n  return res;\n}\n\ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p) {\n  return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\";\n}\n\ntemplate <typename A, typename B, typename C>\nstring to_string(tuple<A, B, C> p) {\n  return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \")\";\n}\n\ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p) {\n  return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \", \" + to_string(get<3>(p)) + \")\";\n}\n\nvoid debug_out() { cerr << endl; }\n\ntemplate <typename Head, typename... Tail>\nvoid debug_out(Head H, Tail... T) {\n  cerr << \" \" << to_string(H);\n  debug_out(T...);\n}\n\n#ifdef LOCAL\n#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n#else\n#define debug(...) 42\n#endif\n\nstruct hash61 {\n  static const uint64_t md = (1LL << 61) - 1;\n  static uint64_t step;\n  static vector<uint64_t> pw;\n \n  uint64_t addmod(uint64_t a, uint64_t b) const {\n    a += b;\n    if (a >= md) a -= md;\n    return a;\n  }\n \n  uint64_t submod(uint64_t a, uint64_t b) const {\n    a += md - b;\n    if (a >= md) a -= md;\n    return a;\n  }\n \n  uint64_t mulmod(uint64_t a, uint64_t b) const {\n    uint64_t l1 = (uint32_t) a, h1 = a >> 32, l2 = (uint32_t) b, h2 = b >> 32;\n    uint64_t l = l1 * l2, m = l1 * h2 + l2 * h1, h = h1 * h2;\n    uint64_t ret = (l & md) + (l >> 61) + (h << 3) + (m >> 29) + (m << 35 >> 3) + 1;\n    ret = (ret & md) + (ret >> 61);\n    ret = (ret & md) + (ret >> 61);\n    return ret - 1;\n  }\n \n  void ensure_pw(int sz) {\n    int cur = (int) pw.size();\n    if (cur < sz) {\n      pw.resize(sz);\n      for (int i = cur; i < sz; i++) {\n        pw[i] = mulmod(pw[i - 1], step);\n      }\n    }\n  }\n \n  vector<uint64_t> pref;\n  int n;\n \n  template<typename T>\n  hash61(const T& s) {\n    n = (int) s.size();\n    ensure_pw(n + 1);\n    pref.resize(n + 1);\n    pref[0] = 1;\n    for (int i = 0; i < n; i++) {\n      pref[i + 1] = addmod(mulmod(pref[i], step), s[i]);\n    }\n  }\n \n  inline uint64_t operator()(const int from, const int to) const {\n    assert(0 <= from && from <= to && to <= n - 1);\n    return submod(pref[to + 1], mulmod(pref[from], pw[to - from + 1]));\n  }\n};\n \nmt19937 rng((unsigned int) chrono::steady_clock::now().time_since_epoch().count());\n\nuint64_t hash61::step = (md >> 2) + rng() % (md >> 1);\nvector<uint64_t> hash61::pw = vector<uint64_t>(1, 1);\n\nhash61 hasher((string) \"a\");\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n, k;\n  cin >> n >> k;\n  vector<long long> init_x(n);\n  for (int i = 0; i < n; i++) {\n    cin >> init_x[i];\n  }\n  vector<vector<int>> f(n, vector<int>(k));\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < k; j++) {\n      cin >> f[i][j];\n    }\n  }\n  const long long inf = (long long) 1.01e18;\n  vector<vector<long long>> x(1, init_x);\n  vector<long long> t(1, 0);\n  vector<int> link(1, -1);\n  map<uint64_t, int> mp;\n  while (t.back() < inf) {\n    int j = (int) (t.back() % k);\n    if (j == 0) {\n      uint64_t h = 0;\n      for (int i = 0; i < n - 1; i++) {\n        long long diff = x.back()[i + 1] - x.back()[i];\n        h = hasher.addmod(hasher.mulmod(h, hash61::step), min(diff, 2LL * k) + 42);\n      }\n      auto it = mp.find(h);\n      if (it != mp.end()) {\n        int from = it->second;\n        int span = ((int) t.size() - 1) - from;\n        assert(span % k == 0);\n        long long reps = inf;\n        for (int i = 0; i < n - 1; i++) {\n          long long diff_old = x[from][i + 1] - x[from][i];\n          long long diff_new = x.back()[i + 1] - x.back()[i];\n          if (diff_new < diff_old) {\n            long long decay = diff_old - diff_new;\n            long long mn = inf;\n            for (int z = from; z < (int) t.size() - 1; z++) {\n              mn = min(mn, x[z][i + 1] - x[z][i]);\n            }\n            reps = min(reps, (mn - 2) / decay - 1);\n          }\n        }\n        if (reps > 0) {\n          link.push_back(from);\n          if (reps >= inf / span) {\n            break;\n          }\n          t.push_back(t.back() + reps * span);\n          x.push_back(x.back());\n          for (int i = 0; i < n; i++) {\n            x.back()[i] += reps * (x[x.size() - 2][i] - x[from][i]);\n          }\n          mp.clear();\n          continue;\n        }\n      }\n      mp[h] = (int) t.size() - 1;\n    }\n    t.push_back(t.back() + 1);\n    x.push_back(x.back());\n    link.push_back(-1);\n    vector<tuple<int, int, int>> st;\n    for (int i = 0; i < n; i++) {\n      st.emplace_back(i, i, f[i][j]);\n      while (st.size() >= 2) {\n        if ((get<2>(st.back()) < 0 || get<2>(st[st.size() - 2]) > 0) && x.back()[get<1>(st[st.size() - 2])] + 1 == x.back()[get<0>(st.back())]) {\n          get<1>(st[st.size() - 2]) = get<1>(st.back());\n          get<2>(st[st.size() - 2]) += get<2>(st.back());\n          st.pop_back();\n        } else {\n          break;\n        }\n      }\n    }\n    for (int i = 0; i < (int) st.size(); i++) {\n      int dir = (get<2>(st[i]) > 0 ? 1 : (get<2>(st[i]) < 0 ? -1 : 0));\n      if (dir == 1 && i + 1 < (int) st.size() && x[x.size() - 2][get<0>(st[i + 1])] - x[x.size() - 2][get<1>(st[i])] == 2 && get<2>(st[i + 1]) < 0 && abs(get<2>(st[i])) <= abs(get<2>(st[i + 1]))) {\n        dir = 0;\n      }\n      if (dir == -1 && i - 1 >= 0 && x[x.size() - 2][get<0>(st[i])] - x[x.size() - 2][get<1>(st[i - 1])] == 2 && get<2>(st[i - 1]) > 0 && abs(get<2>(st[i])) < abs(get<2>(st[i - 1]))) {\n        dir = 0;\n      }\n      for (int z = get<0>(st[i]); z <= get<1>(st[i]); z++) {\n        x.back()[z] += dir;\n      }\n    }\n  }\n  int q;\n  cin >> q;\n  while (q--) {\n    int rid;\n    long long T;\n    cin >> rid >> T;\n    --rid;\n    auto it = lower_bound(t.begin(), t.end(), T);\n    if (it != t.end() && *it == T) {\n      int id = (int) (it - t.begin());\n      cout << x[id][rid] << '\\n';\n      continue;\n    }\n    assert(it != t.begin());\n    --it;\n    int id = (int) (it - t.begin());\n    assert(link[id + 1] != -1);\n    long long span = id - link[id + 1];\n    assert(span % k == 0);\n    long long reps = (T - t[id]) / span + 1;\n    long long rm = (T - t[id]) % span;\n    long long ans = x[link[id + 1] + rm][rid];\n    ans += (x[id][rid] - x[link[id + 1]][rid]) * reps;\n    cout << ans << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\H. Pushing Robots.json",
    "editorial_link": "https://codeforces.com//blog/entry/97350",
    "editorial": "First of all, it should be noted, that one iteration of the described\r\nalgorithm of robots’ movements can be implemented in time. For example,\r\nusing stack.Let’s consider moments of time that are multiple of . And\r\nsegments of time between such two consecutive moments of time. Consider\r\ntwo adjacent robots. It can be proved that if these two robots touched\r\neach other during a segment of time (), then they will touch each other\r\nduring any succeeding segment of time (). One thing that may change in\r\nthe future is that the left robot will be blocked from moving to the\r\nleft, or the right robot will be blocked from moving to the right.\r\nRobots just will become closer to each other after such a change. It’s\r\nalso possible that the left robot will be blocked from moving to the\r\nright, or the right robot from moving to the left. But then they are\r\ntouching.Similarly, if after seconds distance between two robots\r\ndecreases, then it will continue decreasing until they touch during some\r\nsegment of time. And if two robots touch during a segment of time, then\r\nthe distance between them after this segment of time will be less than\r\nor equal to the distance between them before this segment.Let’s simulate\r\nthe first seconds, and then another seconds. Let’s look at pairs of\r\nadjacent robots. If the distance between two robots increased or didn’t\r\nchange, skip this pair. If the distance between two robots decreased. If\r\nthe distance is , then robots may touch during the next segment. So,\r\nlet’s simulate the next seconds again. Otherwise, let distance be and it\r\ndecreased by during the last segment of time. Then, during the next\r\nsegments of time it will continue decreasing with the same speed ( units\r\nper seconds). So we can skip these segments of time, and simulate the\r\nnext after them. Let’s choose the minimum segment of time that should be\r\nsimulated. Let’s skip all till this segment of time, and simulate it.\r\nThen again choose the minimum segment of time till which we can skip\r\nsimulation.It can be proved that there will be simulated segments of\r\ntime overall. This is due to the fact that there’re no more than\r\ndecreases of the distance between two adjacent robots, after which we\r\nwill do the simulation.In order to answer questions, let’s also simulate\r\nsegments of time that contain moments of time of questions.Total time\r\ncomplexity is .\r\n"
}