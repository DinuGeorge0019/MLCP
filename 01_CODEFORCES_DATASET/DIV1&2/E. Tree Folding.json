{"link": "https://codeforces.com//contest/765/problem/E", "problemId": "93901", "problem_idx": "E", "shortId": "765E", "contest_number": "765", "problem_submissions": {"F": [24663045, 24662127, 24676770, 24660358, 24667152, 24667397, 24662544, 24672838, 24672753, 24667598, 31935479, 24716746, 24682448, 24679841, 24679801, 24670904, 24670698, 24670489], "E": [24655066, 24654207, 24663627, 24664513, 24664094, 24658430, 24660515, 24666458, 24658142, 24662259, 24662493, 24655583, 24656953, 24655759, 24661672, 24653196, 24657812, 24658375, 24656880], "D": [24651389, 24649417, 24662180, 24649659, 24650176, 24654581, 24653214, 24651939, 24652955, 24653924, 24658681, 24649453, 24651451, 24650652, 24650490, 24649885, 24654333, 24652778, 24651423], "C": [24648852, 24646235, 24650994, 24645410, 24646069, 24647071, 24647842, 24648558, 24647605, 24648623, 24647741, 24647343, 24648346, 24646116, 24646007, 24646516, 24646082, 24647004, 24651850], "B": [24646782, 24644999, 24653327, 24644551, 24644873, 24645624, 24645777, 24646431, 24646046, 24646603, 24645747, 24645801, 24644851, 24645211, 24644761, 24644995, 24644787, 24645473, 24645892], "A": [24645504, 24644450, 24647516, 24644412, 24644455, 24644858, 24644550, 24644940, 24644763, 24644751, 24644918, 24644439, 24644463, 24644604, 24644437, 24644462, 24644460, 24644469, 24645016], "G": [24665280, 24660267]}, "name": "E. Tree Folding", "statement": "Vanya wants to minimize a tree. He can perform the following operation\r\nmultiple times: choose a vertex , and two disjoint (except for ) paths\r\nof equal length , , ..., , and , , ..., . Additionally, vertices , ...,\r\n, , ..., must not have any neighbours in the tree other than adjacent\r\nvertices of corresponding paths. After that, one of the paths may be\r\nmerged into the other, that is, the vertices , ..., can be effectively\r\nerased: Help Vanya determine if it possible to make the tree into a path\r\nvia a sequence of described operations, and if the answer is positive,\r\nalso determine the shortest length of such path.\r\n", "solutions": ["#include <iostream>\n#include <vector>\n#include <cstdio>\n#include <algorithm>\n#include <set>\n#include <map>\n#include <cassert>\n#include <numeric>\n#include <string>\n#include <cstring>\n#include <cmath>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#else\n\t#define eprintf(...) 42\n#endif\n\ntypedef long long int int64;\n\nconst int N = (int) 2e5 + 100;\nvector <int> g[N];\n\n\nvoid dfs(int v, int par, int cd, int d[] )\n{\n\td[v] = cd;\n\tfor (int to : g[v] )\n\t{\n\t\tif (to == par) continue;\n\t\tdfs(to, v, cd + 1, d);\n\t}\n}\n\nint dfsCheck(int v, int par)\n{\n\tvector <int> ds;\n\tfor (int to : g[v] )\n\t{\n\t\tif (to == par) continue;\n\t\tds.push_back(dfsCheck(to, v) );\t\n\t}\n\tsort(ds.begin(), ds.end() );\n\tds.resize(unique(ds.begin(), ds.end() ) - ds.begin() );\n\tif (v != par)\n\t{\n//\t\teprintf(\"v = %d, par = %d, ds.size() = %d\\n\", v, par, (int) ds.size() );\n\t\tif ( (int) ds.size() > 1)\n\t\t{\n\t\t\tprintf(\"-1\\n\");\n\t\t\texit(0);\n\t\t}\n\t\tif (ds.empty() ) return 1;\n\t\treturn ds[0] + 1;\n\t}\n\tif (ds.empty() ) return 0;\n\tif ( (int) ds.size() > 2) return -1;\n\treturn ds[0] + ds.back();\n}\n\nint d0[N];\nint da[N];\nint db[N];\n\nint main(int,  char **)\n{\n#ifdef LOCAL\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n - 1; i++)\n\t{\n\t\tint a, b;\n\t\tscanf(\"%d%d\", &a, &b);\n\t\ta--;\n\t\tb--;\n\t\tg[a].push_back(b);\n\t\tg[b].push_back(a);\n\t}\n\tdfs(0, 0, 0, d0);\n\tint a = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tif (d0[i] > d0[a] )\n\t\t\ta = i;\n\tdfs(a, a, 0, da);\n\tint b = a;\n\tfor (int i = 0; i < n; i++)\n\t\tif (da[i] > da[b] )\n\t\t\tb = i;\n\tdfs(b, b, 0, db);\n\tint c = b;\n\tfor (int i = 0; i < n; i++)\n\t\tif (db[i] + da[i] == db[a] && min(db[i], da[i] ) > min(db[c], da[c] ) )\n\t\t\tc = i;\n//\teprintf(\"a = %d, b = %d, c = %d\\n\", a, b, c);\n\t\n\tint ans = dfsCheck(c, c);\n\twhile (ans % 2 == 0 && ans > 0)\n\t\tans /= 2;\n\tprintf(\"%d\\n\", ans);\n\n\treturn 0;\n}\n\n\n"], "input": "", "output": "", "tags": ["dfs and similar", "dp", "greedy", "implementation", "trees"], "dificulty": "2200", "interactive": false}