{
    "link": "https://codeforces.com//contest/1704/problem/F",
    "problemId": "1489129",
    "problem_idx": "F",
    "shortId": "1704F",
    "contest_number": "1704",
    "problem_submissions": {
        "G": [
            166399832,
            166392509,
            166397270,
            166638387,
            166637822,
            166637785,
            166398104,
            166405958,
            166752775
        ],
        "H1": [
            166382413,
            166388635,
            166396747,
            166390624,
            166393948,
            166394968,
            166395394,
            166395219,
            166399131,
            166395533,
            167610683,
            166399678,
            166398389,
            166393517,
            166397144,
            166394482,
            166410457,
            166410434,
            166410387,
            166397758,
            166388826
        ],
        "F": [
            166375942,
            166373341,
            166380920,
            166379078,
            166375083,
            166374406,
            166381370,
            166374889,
            166379414,
            166377998,
            166381484,
            166382056,
            166383687,
            167610801,
            167610658,
            166377446,
            166386899,
            166386972,
            166382080,
            166385431,
            166386767,
            166397839
        ],
        "E": [
            166364243,
            166366722,
            166377362,
            166370668,
            166369471,
            166363533,
            166365063,
            166369098,
            166371591,
            166372062,
            166371621,
            166363068,
            166369922,
            167610979,
            166372272,
            166368343,
            166370920,
            166372137,
            166377343,
            166374205,
            166366243
        ],
        "D": [
            166356732,
            166359032,
            166354225,
            166361715,
            166364424,
            166358723,
            166360532,
            166363384,
            166359682,
            166359426,
            166360174,
            166357237,
            166358099,
            167610772,
            167610622,
            166360647,
            166358359,
            166360520,
            166363303,
            166368469,
            166361316,
            166360453
        ],
        "C": [
            166354884,
            166355766,
            166368189,
            166358588,
            166361497,
            166354947,
            166356916,
            166357737,
            166356376,
            166355591,
            166357410,
            166354410,
            166354789,
            167610761,
            167610600,
            166356402,
            166355566,
            166357431,
            166360930,
            166363594,
            166359066,
            166357566
        ],
        "B": [
            166350601,
            166350801,
            166351510,
            166352475,
            166352194,
            166351471,
            166350940,
            166351732,
            166351784,
            166352133,
            166351498,
            166351569,
            166351237,
            167610589,
            166351144,
            166351469,
            166352214,
            166353113,
            166355462,
            166352514,
            166351316
        ],
        "A": [
            166350367,
            166350415,
            166350414,
            166351113,
            166350822,
            166350510,
            166350405,
            166350518,
            166350539,
            166350824,
            166350499,
            166350452,
            166350409,
            167610545,
            166350456,
            166350502,
            166350981,
            166354346,
            166351283,
            166350461,
            166350432
        ],
        "H2": [
            166808527
        ]
    },
    "name": "F. Colouring Game",
    "statement": "Alice and Bob are playing a game. There are n cells in a row. Initially\r\neach cell is either red or blue. Alice goes first.On each turn, Alice\r\nchooses two neighbouring cells which contain at least one red cell, and\r\npaints that two cells white. Then, Bob chooses two neighbouring cells\r\nwhich contain at least one blue cell, and paints that two cells white.\r\nThe player who cannot make a move loses.Find the winner if both Alice\r\nand Bob play optimally.Note that a chosen cell can be white, as long as\r\nthe other cell satisfies the constraints.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 31.07.2022 17:33:18       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  const int N = 200;\n  vector<int> g(N);\n  g[0] = 0;\n  for (int i = 1; i < N; i++) {\n    set<int> s;\n    for (int j = 1; j < i; j++) {\n      int x = g[j - 1];\n      int y = g[i - j - 1];\n      s.insert(x ^ y);\n    }\n    while (s.find(g[i]) != s.end()) {\n      g[i] += 1;\n    }\n  }\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n    int nr = 0, nb = 0;\n    for (char c : s) {\n      if (c == 'R') {\n        nr += 1;\n      } else {\n        nb += 1;\n      }\n    }\n    if (nr > nb) {\n      cout << \"Alice\" << '\\n';\n      continue;\n    }\n    if (nr < nb) {\n      cout << \"Bob\" << '\\n';\n      continue;\n    }\n    int x = 0;\n    int beg = 0;\n    while (beg < n) {\n      int end = beg;\n      while (end + 1 < n && s[end + 1] != s[end]) {\n        end += 1;\n      }\n      int len = end - beg + 1;\n      while (len >= N) {\n        len -= 34;\n      }\n      x ^= g[len];\n      beg = end + 1;\n    }\n    cout << (x == 0 ? \"Bob\" : \"Alice\") << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dp",
        "games"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\F. Colouring Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/105464",
    "editorial": "First, when the number red cells and blue cells are not equal, the\r\nplayer who owns a larger numberof his/her corresponding cells will win\r\n(Alice owns red and Bob owns blue). His/Her strategy can be: each time\r\npaint one segment of or white until there is none. This operation\r\ndoesn\u00e2\u0080\u0099t change the difference between the number of and and will\r\ndecrease the number of the color of his/her opponent. Then Alice will\r\nonly paint and , while Bob will only paint or . This operation will only\r\ndecreace his/her own number of color, so the player who owns more cells\r\nof color will certainly win.When the number of red cells and blue cells\r\nare the same, Alice and Bob will play games first on red-and-blue\r\nsegments, until there is no or , and the player who faces this situation\r\nwill lose.Playing games on red-and-blue segments can be described as the\r\nfollowing game: each player can take two neighbouring cells which has\r\nnot be taken yet in his/her turn. As a result, this game becomes equal,\r\nthen we can use SG function to forecast the result.This SG function has\r\nthe following calculating method: . In order to speed up, we can observe\r\nthat has a cyclic section of length except for the first few elements.\r\nIt can also be proved by verifying the first elements has this cyclic\r\nsection, and this demonstrates that for all kinds of xor combination of\r\nthe cyclic section leads to this cycle. Use Mathematical Induction and\r\nwe can know this combination will be the the same (just add some\r\nrepeated numbers to the calculation of as the previous -th number) for\r\nthe subsequent elements. The total time complexity can be reduced to in\r\ncalculating the SG function.\r\n"
}