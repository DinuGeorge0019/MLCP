{
    "link": "https://codeforces.com//contest/1704/problem/C",
    "problemId": "1489126",
    "problem_idx": "C",
    "shortId": "1704C",
    "contest_number": "1704",
    "problem_submissions": {
        "G": [
            166399832,
            166392509,
            166397270,
            166638387,
            166637822,
            166637785,
            166398104,
            166405958,
            166752775
        ],
        "H1": [
            166382413,
            166388635,
            166396747,
            166390624,
            166393948,
            166394968,
            166395394,
            166395219,
            166399131,
            166395533,
            167610683,
            166399678,
            166398389,
            166393517,
            166397144,
            166394482,
            166410457,
            166410434,
            166410387,
            166397758,
            166388826
        ],
        "F": [
            166375942,
            166373341,
            166380920,
            166379078,
            166375083,
            166374406,
            166381370,
            166374889,
            166379414,
            166377998,
            166381484,
            166382056,
            166383687,
            167610801,
            167610658,
            166377446,
            166386899,
            166386972,
            166382080,
            166385431,
            166386767,
            166397839
        ],
        "E": [
            166364243,
            166366722,
            166377362,
            166370668,
            166369471,
            166363533,
            166365063,
            166369098,
            166371591,
            166372062,
            166371621,
            166363068,
            166369922,
            167610979,
            166372272,
            166368343,
            166370920,
            166372137,
            166377343,
            166374205,
            166366243
        ],
        "D": [
            166356732,
            166359032,
            166354225,
            166361715,
            166364424,
            166358723,
            166360532,
            166363384,
            166359682,
            166359426,
            166360174,
            166357237,
            166358099,
            167610772,
            167610622,
            166360647,
            166358359,
            166360520,
            166363303,
            166368469,
            166361316,
            166360453
        ],
        "C": [
            166354884,
            166355766,
            166368189,
            166358588,
            166361497,
            166354947,
            166356916,
            166357737,
            166356376,
            166355591,
            166357410,
            166354410,
            166354789,
            167610761,
            167610600,
            166356402,
            166355566,
            166357431,
            166360930,
            166363594,
            166359066,
            166357566
        ],
        "B": [
            166350601,
            166350801,
            166351510,
            166352475,
            166352194,
            166351471,
            166350940,
            166351732,
            166351784,
            166352133,
            166351498,
            166351569,
            166351237,
            167610589,
            166351144,
            166351469,
            166352214,
            166353113,
            166355462,
            166352514,
            166351316
        ],
        "A": [
            166350367,
            166350415,
            166350414,
            166351113,
            166350822,
            166350510,
            166350405,
            166350518,
            166350539,
            166350824,
            166350499,
            166350452,
            166350409,
            167610545,
            166350456,
            166350502,
            166350981,
            166354346,
            166351283,
            166350461,
            166350432
        ],
        "H2": [
            166808527
        ]
    },
    "name": "C. Virus",
    "statement": "There are n houses numbered from 1 to n on a circle. For each 1\r\nleq i\r\nleq n - 1, house i and house i + 1 are neighbours; additionally, house n\r\nand house 1 are also neighbours.Initially, m of these n houses are\r\ninfected by a deadly virus. Each , Cirno can choose a house which is\r\nuninfected and protect the house from being infected permanently.Every\r\nday, the following things happen in order: Cirno chooses an uninfected\r\nhouse, and protect it permanently. All uninfected, unprotected houses\r\nwhich have at least one neighbor become infected. Cirno wants to stop\r\nthe virus from spreading. Find the minimum number of houses that will be\r\ninfected in the end, if she optimally choose the houses to protect.Note\r\nthat every day Cirno always chooses a house to protect the virus\r\nspreads. Also, a protected house will not be infected forever.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 31.07.2022 17:11:44       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n, m;\n    cin >> m >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n      cin >> a[i];\n      --a[i];\n    }\n    sort(a.begin(), a.end());\n    vector<int> b;\n    for (int i = 0; i < n; i++) {\n      int diff = a[(i + 1) % n] - a[i];\n      if (diff <= 0) {\n        diff += m;\n      }\n      b.push_back(diff - 1);\n    }\n    sort(b.rbegin(), b.rend());\n    debug(b);\n    int safe = 0;\n    for (int i = 0; i < n; i++) {\n      int num = b[i] - 4 * i;\n      if (num >= 1) {\n        safe += max(1, num - 1);\n      }\n    }\n    cout << m - safe << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Virus.json",
    "editorial_link": "https://codeforces.com//blog/entry/105464",
    "editorial": "First, considering it is easier to calculate the number of houses which\r\nare not infected, so we focus on it firstly.Conspicuously, if between\r\nand there are houses (Array has been sorted.), and the infection will\r\nlast days, there will remain houses on the end. Simultaneously, every\r\nday we can protect at least one house permanently, which indicates that\r\nfor every distance between and , if , we have an opportunity to get one\r\nhouse protected. Moreover, the longer uninfected segments have\r\npriorities, because we can set two houses to stop the spread of\r\ninflection and the loss per day will be prevented. By contrast, for\r\nshorter segments, when all the houses in this segment are infected, then\r\nthere won\u00e2\u0080\u0099t be any loss afterwards. In other words, the loss of longer\r\nsegments will last for longer time if we do not take actions in time. As\r\na result, if we operate the longer segments as early as possible, we can\r\nprotect more houses. In conclusion, our final strategy can be decribed\r\nas following: Sort the uninfected segments of houses according to their\r\nlength, then the longer the segment is, the earlier we will deal with\r\nthe houses lying on the side of the segment.\r\n"
}