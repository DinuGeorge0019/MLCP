{
    "link": "https://codeforces.com//contest/1656/problem/D",
    "problemId": "1341207",
    "problem_idx": "D",
    "shortId": "1656D",
    "contest_number": "1656",
    "problem_submissions": {
        "H": [
            150787257,
            150834092,
            150833898,
            150779624,
            150791810,
            150792367,
            150793746,
            150802821,
            150793244,
            150784328,
            150836239,
            150786830,
            150787392,
            150775313,
            150792322,
            150812291,
            150837917,
            150835814,
            150835788,
            150835748,
            150835735,
            150835565,
            150835404,
            150835313,
            150835295,
            150835202,
            150835140,
            150813121
        ],
        "G": [
            150769137,
            150790740,
            150776335,
            150781798,
            150778878,
            150781350,
            150783120,
            150789415,
            150791824,
            150790309,
            150773559,
            150791984,
            150793946,
            150800739,
            150800780
        ],
        "F": [
            150759585,
            150758819,
            150757088,
            150759741,
            150768307,
            150764851,
            150771817,
            150759499,
            150756577,
            150773688,
            150782772,
            150774145,
            150769570,
            150765258,
            150764625,
            150756214,
            150776414,
            150776503,
            150774655,
            150777047
        ],
        "E": [
            150751361,
            150745742,
            150744206,
            150750256,
            150757531,
            150753091,
            150760157,
            150764520,
            150764445,
            150756529,
            150749400,
            150762413,
            150747229,
            150753617,
            150756813,
            150745115,
            150752324,
            150758442,
            150759352,
            150761061
        ],
        "D": [
            150742723,
            150736825,
            150739691,
            150737309,
            150752373,
            150748905,
            150751158,
            150737577,
            150743318,
            150744109,
            150743943,
            150742795,
            150742345,
            150737178,
            150746671,
            150740470,
            150742866,
            150748659,
            150752013,
            150752792
        ],
        "C": [
            150733096,
            150732015,
            150737243,
            150731632,
            150734197,
            150741651,
            150741487,
            150729270,
            150734650,
            150732482,
            150734630,
            150733212,
            150733482,
            150730538,
            150732987,
            150735181,
            150734697,
            150735222,
            150738885,
            150734495
        ],
        "B": [
            150727707,
            150727564,
            150729524,
            150727729,
            150727957,
            150730109,
            150730045,
            150725120,
            150728043,
            150726472,
            150725778,
            150727111,
            150726454,
            150727018,
            150729221,
            150817665,
            150730058,
            150728199,
            150728859,
            150727704
        ],
        "A": [
            150725204,
            150724798,
            150724946,
            150724479,
            150724835,
            150724855,
            150724694,
            150724426,
            150724692,
            150724405,
            150724424,
            150724740,
            150724465,
            150724564,
            150725589,
            150725242,
            150725512,
            150724576,
            150724789,
            150724666
        ],
        "I": [
            150839781,
            150825396
        ]
    },
    "name": "D. K-good",
    "statement": "We say that a positive integer n is k-good for some positive integer k\r\nif n can be expressed as a sum of k positive integers which give k\r\ndistinct remainders when divided by k.Given a positive integer n, find\r\nsome k\r\ngeq 2 so that n is k-good or tell that such a k does not exist.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    i64 n;\n    std::cin >> n;\n    \n    i64 k = 1;\n    while (n % 2 == 0) {\n        n /= 2;\n        k *= 2;\n    }\n    \n    if (n == 1) {\n        std::cout << \"-1\\n\";\n    } else {\n        std::cout << std::min(n, 2 * k) << \"\\n\";\n    }\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\D. K-good.json",
    "editorial_link": "https://codeforces.com//blog/entry/101211",
    "editorial": "is -good if and only if . . It is clear that both conditions are\r\nnecessary, and it turns out theyâre sufficient too since is attainable\r\nfor any integer by repeatedly adding to one of the terms in the sum\r\n.Note that, if is even, the second condition is , which is true if and\r\nonly if is a multiple of but is not a multiple of . So all which divide\r\nbut do not divide satisfy the second condition, and we want the smallest\r\nof them in order to have the best chance of satisfying the first\r\ncondition. The smallest of such is , i. e. the smallest power of that\r\ndoes not divide . We can compute in (or in with some\r\narchitecture-specific functions) and check if it satisfies the first\r\ncondition.If it doesnât, consider . Note that is odd, and therefore the\r\nsecond condition is satisfied since is a divisor of . Since did not\r\nsatisfy the condition, we have (since is odd), so:So satisfies the first\r\ncondition.Note that is only a valid answer if . If , then we have that\r\nis a power of , and in this case there is no answer since all odd\r\ncandidates of must be odd divisors of , of which there is only , and the\r\nsmallest even candidate for was , which does not work. So we have to\r\nanswer .\r\n",
    "hint": []
}