{
    "link": "https://codeforces.com//contest/618/problem/B",
    "problemId": "46785",
    "problem_idx": "B",
    "shortId": "618B",
    "contest_number": "618",
    "problem_submissions": {
        "E": [
            15660896,
            15660810,
            25267684,
            15661349,
            15660954,
            15669573,
            15669552,
            15657805,
            15659540,
            15660389,
            15659859,
            15661631,
            15661128,
            15659694,
            15662154,
            15661797,
            15661848,
            15663282,
            15660127,
            15662115
        ],
        "D": [
            15656948,
            15655133,
            15655445,
            15667159,
            15665258,
            15655421,
            15655925,
            15656563,
            15656409,
            15655319,
            15659360,
            39354565,
            15656312,
            15656752,
            15657964,
            15663170,
            15658748
        ],
        "C": [
            15652141,
            15652363,
            15652477,
            15652597,
            15653006,
            15652229,
            15653352,
            15654441,
            15653369,
            15652636,
            15663125,
            15652085,
            15653674,
            15653050,
            15652997,
            15652103,
            15653430
        ],
        "A": [
            15650445,
            15649636,
            15649663,
            15649788,
            15649765,
            15649822,
            15650160,
            15649790,
            15649745,
            15649679,
            15649632,
            15649853,
            15649674,
            15649848,
            15649720,
            15649691,
            15650068
        ],
        "B": [
            15649885,
            15650154,
            15650770,
            15651204,
            15650301,
            15650651,
            15651598,
            15651581,
            15651312,
            15651165,
            15649859,
            15650851,
            15650978,
            15651073,
            15650933,
            15650396,
            15651924
        ],
        "F": [
            15662761,
            15674016,
            15665529,
            15670689
        ]
    },
    "name": "B. Guess the Permutation",
    "statement": "Bob has a permutation of integers from to . Denote this permutation as .\r\nThe -th element of will be denoted as . For all pairs of distinct\r\nintegers between and , he wrote the number . He writes for all integer\r\nfrom to .Bob gave you all the values of that he wrote down. Your job is\r\nto reconstruct any permutation that could have generated these values.\r\nThe input will be formed so that it is guaranteed that there is at least\r\none solution that is consistent with the information given.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\n\nconst int N = 60;\nint n;\nint a[N];\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\", &x);\n\t\t\ta[i] = max(a[i], x);\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++)\n\t\tif (a[i] == n - 1)\n\t\t{\n\t\t\ta[i] = n;\n\t\t\tbreak;\n\t\t}\n\tfor (int i = 0; i < n; i++)\n\t\tprintf(\"%d \", a[i]);\n\tprintf(\"\\n\");\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\B. Guess the Permutation.json",
    "editorial_link": "https://codeforces.com//blog/entry/23142",
    "editorial": "One solution is to look for the column/row that contains only 1s and 0s.\r\nWe know that this index must be the index for the element 1. Then, we\r\ncan repeat this for 2 through n. See the example code for more details.\r\nThe runtime of this solution is O(n^3). However, there is an easier\r\nsolution. One answer is to just take the max of each row, which gives us\r\na permutation. Of course, the element n-1 will appear twice, but we can\r\nreplace either occurrence with n and be done. See the other code for\r\ndetails Example code (for first):\r\nhttp://codeforces.com/contest/618/submission/15669492 Example code (for\r\nsecond): http://codeforces.com/contest/618/submission/15669483 Comment:\r\nOriginally, I wanted to set it so it wasnât guaranteed that there was a\r\nsolution. But this seemed a bit tedious to me, so I didnât include this\r\ncase.\r\n",
    "hint": []
}