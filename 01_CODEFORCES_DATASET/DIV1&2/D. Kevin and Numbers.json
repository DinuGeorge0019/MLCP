{
    "link": "https://codeforces.com//contest/2061/problem/D",
    "problemId": "3155957",
    "problem_idx": "D",
    "shortId": "2061D",
    "contest_number": "2061",
    "problem_submissions": {
        "F2": [
            302127475,
            302092403,
            302114656,
            302114350,
            302118052,
            302128136,
            302099327,
            302127501,
            302105569,
            302158287,
            302158231,
            302158981,
            302158740,
            302158593,
            302155955
        ],
        "H1": [
            302102508,
            302123846,
            302123275,
            302120307,
            302128240,
            302113263,
            302214973,
            302214838,
            302492170,
            302128311,
            302150853
        ],
        "G": [
            302087277,
            302104836,
            302092310,
            302101290,
            302098614,
            302099751,
            302090244,
            302079497,
            302107342,
            302102846,
            302118471,
            302119832,
            302088828,
            302085801,
            302097252,
            302107147,
            302100360,
            302104471
        ],
        "F1": [
            302070705,
            302068249,
            302076903,
            302139304,
            302085853,
            302085964,
            302087951,
            302076823,
            302099111,
            302088499,
            302088697,
            302106078,
            302076066,
            302095307,
            302083979,
            302077009,
            302082649,
            302158914,
            302081283
        ],
        "E": [
            302060766,
            302059898,
            302064375,
            302146780,
            302146561,
            302146204,
            302145996,
            302145832,
            302145821,
            302145812,
            302060519,
            302071650,
            302062756,
            302067337,
            302066558,
            302071373,
            302078018,
            302075359,
            302069841,
            302067118,
            302063628,
            302073608,
            302071649,
            302075889,
            302072748
        ],
        "D": [
            302057147,
            302056206,
            302056876,
            302056600,
            302064486,
            302056648,
            302061458,
            302060302,
            302063595,
            302065433,
            302068805,
            302064352,
            302061742,
            302059104,
            302069059,
            302065232,
            302069194,
            302062940
        ],
        "C": [
            302053893,
            302052972,
            302060290,
            302053477,
            302058781,
            302053556,
            302058513,
            302056661,
            302060439,
            302057971,
            302066087,
            302059912,
            302059144,
            302055184,
            302066070,
            302060621,
            302062953,
            302059461
        ],
        "B": [
            302048946,
            302050832,
            302052328,
            302049723,
            302053638,
            302049221,
            302054664,
            302052475,
            302055824,
            302052997,
            302059041,
            302057352,
            302051579,
            302051983,
            302056196,
            302056129,
            302055478,
            302054565
        ],
        "A": [
            302047037,
            302049009,
            302047309,
            302047023,
            302047283,
            302047053,
            302047177,
            302047108,
            302047316,
            302047521,
            302047571,
            302047610,
            302047369,
            302048738,
            302047337,
            302048364,
            302049028,
            302047123
        ],
        "H2": [
            302541217
        ],
        "I": [
            302144176,
            302142123,
            302142064,
            302141919,
            302124920,
            302518298,
            302518173,
            302517883
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/138620",
    "editorial": "It can be challenging to determine how to merge small numbers into a\r\nlarger number directly. Therefore, we approach the problem in\r\nreverse.Instead of merging numbers, we consider transforming the number\r\nback into . For each number , it can only be formed by merging and .\r\nThus, the reversed operation is as follows: Select an integer from and\r\nsplit it into and . We can perform this splitting operation on the\r\nnumbers in exactly times. If the largest number in also appears in , we\r\ncan remove it from both and simultaneously. Otherwise, the largest\r\nnumber in must be split into two smaller numbers.To efficiently manage\r\nthe numbers in and , we can use a priority queue or a multiset.The time\r\ncomplexity of this approach is .\r\n",
    "name": "D. Kevin and Numbers",
    "statement": "Kevin wrote an integer sequence a of length n on the blackboard.Kevin\r\ncan perform the following operation any number of times: Select two\r\nintegers x, y on the blackboard such that |x - y|\r\nleq 1, erase them, and then write down an integer x + y instead. Kevin\r\nwants to know if it is possible to transform these integers into an\r\ninteger sequence b of length m through some sequence of operations.Two\r\nsequences a and b are considered the same if and only if their multisets\r\nare identical. In other words, for any number x, the number of times it\r\nappears in a must be equal to the number of times it appears in b.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using i64 = long long;using u64 = unsigned long long;using u32 = unsigned;using u128 = unsigned __int128; void solve() {    int n, m;    std::cin >> n >> m;        std::priority_queue<int> a, b;    for (int i = 0; i < n; i++) {        int x;        std::cin >> x;        a.push(x);    }    for (int i = 0; i < m; i++) {        int x;        std::cin >> x;        b.push(x);    }        while (!a.empty()) {        if (b.empty() || b.size() > a.size()) {            std::cout << \"No\\n\";            return;        }        int x = b.top();        b.pop();                if (x < a.top()) {            std::cout << \"No\\n\";            return;        }        if (x == a.top()) {            a.pop();        } else {            b.push(x / 2);            b.push((x + 1) / 2);        }    }        if (!b.empty()) {        std::cout << \"No\\n\";        return;    }        std::cout << \"Yes\\n\";} int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "2-sat",
        "binary search",
        "bitmasks",
        "brute force",
        "chinese remainder theorem",
        "combinatorics",
        "constructive algorithms",
        "data structures",
        "dfs and similar",
        "divide and conquer",
        "dp",
        "dsu",
        "expression parsing",
        "fft",
        "flows",
        "games",
        "geometry",
        "graph matchings",
        "graphs",
        "greedy",
        "hashing",
        "implementation",
        "interactive",
        "math",
        "matrices",
        "meet-in-the-middle",
        "number theory",
        "probabilities",
        "schedules",
        "shortest paths",
        "sortings",
        "string suffix structures",
        "strings",
        "ternary search",
        "trees",
        "two pointers"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\D. Kevin and Numbers.json",
    "hint": [
        "Hint 1 Thinking outside the box.",
        "Hint 2 How is a number merged from?",
        "Hint 3 Approach the problem in reverse."
    ]
}