{"link": "https://codeforces.com//contest/1704/problem/A", "problemId": "1489124", "problem_idx": "A", "shortId": "1704A", "contest_number": "1704", "problem_submissions": {"G": [166399832, 166392509, 166397270, 166638387, 166637822, 166637785, 166398104, 166405958, 166752775], "H1": [166382413, 166388635, 166396747, 166390624, 166393948, 166394968, 166395394, 166395219, 166399131, 166395533, 167610683, 166399678, 166398389, 166393517, 166397144, 166394482, 166410457, 166410434, 166410387, 166397758, 166388826], "F": [166375942, 166373341, 166380920, 166379078, 166375083, 166374406, 166381370, 166374889, 166379414, 166377998, 166381484, 166382056, 166383687, 167610801, 167610658, 166377446, 166386899, 166386972, 166382080, 166385431, 166386767, 166397839], "E": [166364243, 166366722, 166377362, 166370668, 166369471, 166363533, 166365063, 166369098, 166371591, 166372062, 166371621, 166363068, 166369922, 167610979, 166372272, 166368343, 166370920, 166372137, 166377343, 166374205, 166366243], "D": [166356732, 166359032, 166354225, 166361715, 166364424, 166358723, 166360532, 166363384, 166359682, 166359426, 166360174, 166357237, 166358099, 167610772, 167610622, 166360647, 166358359, 166360520, 166363303, 166368469, 166361316, 166360453], "C": [166354884, 166355766, 166368189, 166358588, 166361497, 166354947, 166356916, 166357737, 166356376, 166355591, 166357410, 166354410, 166354789, 167610761, 167610600, 166356402, 166355566, 166357431, 166360930, 166363594, 166359066, 166357566], "B": [166350601, 166350801, 166351510, 166352475, 166352194, 166351471, 166350940, 166351732, 166351784, 166352133, 166351498, 166351569, 166351237, 167610589, 166351144, 166351469, 166352214, 166353113, 166355462, 166352514, 166351316], "A": [166350367, 166350415, 166350414, 166351113, 166350822, 166350510, 166350405, 166350518, 166350539, 166350824, 166350499, 166350452, 166350409, 167610545, 166350456, 166350502, 166350981, 166354346, 166351283, 166350461, 166350432], "H2": [166808527]}, "name": "A. Two 0-1 Sequences", "statement": "AquaMoon has two binary sequences a and b, which contain only 0 and 1.\r\nAquaMoon can perform the following two operations any number of times\r\n(a_1 is the first element of a, a_2 is the second element of a, and so\r\non): : if a contains at least two elements, change a_2 to\r\noperatorname{min}(a_1,a_2), and remove the first element of a. : if a\r\ncontains at least two elements, change a_2 to\r\noperatorname{max}(a_1,a_2), and remove the first element of a.Note that\r\nafter a removal of the first element of a, the former a_2 becomes the\r\nfirst element of a, the former a_3 becomes the second element of a and\r\nso on, and the length of a reduces by one.Determine if AquaMoon can make\r\na equal to b by using these operations.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 31.07.2022 17:04:37       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n, m;\n    cin >> n >> m;\n    string a, b;\n    cin >> a >> b;\n    bool ok = true;\n    for (int i = 0; i < m - 1; i++) {\n      if (b.back() != a.back()) {\n        ok = false;\n        break;\n      }\n      b.pop_back();\n      a.pop_back();\n    }\n    if (!ok) {\n      cout << \"NO\" << '\\n';\n      continue;\n    }\n    if (b == \"0\" && a == string(n - m + 1, '1')) {\n      cout << \"NO\" << '\\n';\n      continue;\n    }\n    if (b == \"1\" && a == string(n - m + 1, '0')) {\n      cout << \"NO\" << '\\n';\n      continue;\n    }\n    cout << \"YES\" << '\\n';\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy"], "dificulty": "800", "interactive": false}