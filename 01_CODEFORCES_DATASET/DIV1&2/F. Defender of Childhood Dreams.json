{
    "link": "https://codeforces.com//contest/1586/problem/F",
    "problemId": "1147386",
    "problem_idx": "F",
    "shortId": "1586F",
    "contest_number": "1586",
    "problem_submissions": {
        "I": [
            132349267,
            132252923,
            132320064,
            132673395,
            132289506,
            132263256
        ],
        "H": [
            132247560,
            132253721,
            134930470,
            132350321,
            132254025,
            132660661,
            132275048,
            132253966,
            132270155
        ],
        "G": [
            132239647,
            132244340,
            132241119,
            135794866,
            135794713,
            132234650,
            132248115,
            132244256,
            132257761,
            132255193,
            132256199,
            132255919,
            132258648,
            132257515,
            132250742,
            132255333,
            132257553,
            132255311
        ],
        "F": [
            132231955,
            132236161,
            132234366,
            132240633,
            132243967,
            132235859,
            132234337,
            132237395,
            132239493,
            132241376,
            132248866,
            132245654,
            132241416,
            132246161,
            132245018,
            132259456,
            132244979,
            132249686,
            132260019,
            132238761
        ],
        "E": [
            132228491,
            132224206,
            132228693,
            132232413,
            132231532,
            132229745,
            132230672,
            132232315,
            132218494,
            132235319,
            132232020,
            132237413,
            132239524,
            132237023,
            132236410,
            132236319,
            132238669,
            132240928,
            132230421,
            132229492
        ],
        "D": [
            132225001,
            132227375,
            132224444,
            132226879,
            132227724,
            132226231,
            132226626,
            132227371,
            132224235,
            132227654,
            132224635,
            132229641,
            132234990,
            132231067,
            132230536,
            132228432,
            132234258,
            132232998,
            132241147,
            132223955
        ],
        "C": [
            132221243,
            132218519,
            132219460,
            132219748,
            132219799,
            132222571,
            132220819,
            132219850,
            132232802,
            132223481,
            132218757,
            132219927,
            132230956,
            132218216,
            132224263,
            132222192,
            132227273,
            132228072,
            132226595,
            132220025
        ],
        "B": [
            132214722,
            132213701,
            132215490,
            132214516,
            132214317,
            132214601,
            132215162,
            132222197,
            132229955,
            132216968,
            132214347,
            132216468,
            132226751,
            132220812,
            132216772,
            132216742,
            132216324,
            132213579,
            132217316,
            132213929
        ],
        "A": [
            132213139,
            132213078,
            132214020,
            132213141,
            132213243,
            132213267,
            132213377,
            132220659,
            132228179,
            132218691,
            132213234,
            132214356,
            132213033,
            132224973,
            132214120,
            132214349,
            132213337,
            132213011,
            132242338,
            132213128
        ]
    },
    "name": "F. Defender of Childhood Dreams",
    "statement": "You find yourself playing with Teucer again in the city of Liyue. As you\r\ntake the eccentric little kid around, you notice something interesting\r\nabout the structure of the city.Liyue can be represented as a directed\r\ngraph containing n nodes. Nodes are labeled from 1 to n. There is a\r\ndirected edge from node a to node b if and only if a < b.A path between\r\nnodes a and b is defined as a sequence of edges such that you can start\r\nat a, travel along all of these edges in the corresponding direction,\r\nand end at b. The length of a path is defined by the number of edges. A\r\nrainbow path of length x is defined as a path in the graph such that\r\nthere exists at least 2 distinct colors among the set of x\r\nedges.Teucer’s favorite number is k. You are curious about the following\r\nscenario: If you were to label each edge with a color, what is the\r\nminimum number of colors needed to ensure that all paths of length k or\r\nlonger are rainbow paths?Teucer wants to surprise his older brother with\r\na map of Liyue. He also wants to know a valid coloring of edges that\r\nuses the minimum number of colors. Please help him with this task!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define rep(i, n) for(int i = 0; i < (int)(n); i ++)\n#define rep1(i, n) for(int i = 1; i <= (int)(n); i ++)\n#define MP make_pair\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nconst int MOD = 998244353;\n\nint n, k, ret;\nint ans[1005][1005];\n\nvoid solve(int l, int r, int dep)\n{\n\tif(l >= r) return;\n\tret = max(ret, dep);\n\tint tmp = (r - l + 1) / k, tn = (r - l + 1) % k;\n\tint cp = l;\n\trep(i, k) {\n\t\tint cl = i < tn ? tmp + 1 : tmp;\n\t\tsolve(cp, cp + cl - 1, dep + 1);\n\t\tcp += cl;\n\t}\n\tfor(int i = l; i <= r; i ++) for(int j = i + 1; j <= r; j ++) if(ans[i][j] == 0) ans[i][j] = dep;\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &k);\n\tsolve(0, n - 1, 1);\n\tprintf(\"%d\\n\", ret);\n\trep(i, n) for(int j = i + 1; j < n; j ++) printf(\"%d \", ans[i][j]);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "divide and conquer",
        "graphs",
        "greedy",
        "math"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\F. Defender of Childhood Dreams.json",
    "editorial_link": "https://codeforces.com//blog/entry/96072",
    "editorial": "The minimum number of colors that you need is .To achieve this, you can\r\ndivide the nodes into contiguous subsegments of equal size (or as close\r\nas possible). Any edge between nodes in different subsegments, you color\r\nwith for example. Then you recursively solve those subsegments excluding\r\nthe color that you used.Any path of the same color is between same size\r\nsubsegments inside a single bigger subsegment (or the whole array).\r\nSince there would be only such subsegments, the path could only have\r\nlength at most .The highest recursion depth is , so this is the number\r\nof colors used as desired.We will now prove that colors are necessary.\r\nWe will do this by equivalently proving that if you have a valid\r\ncoloring using colors, then is at most . This, in turn, we will prove by\r\ninduction on .The base case is . If you have no colors, then you canât\r\ncolor any edges, so must be at most .For the inductive step, we assume\r\nthat any valid coloring using at most colors can have at most nodes, and\r\nwe desire to show that any valid coloring using at most colors can have\r\nat most nodes. To do this, we will choose an arbitrary color, then\r\npartition all our nodes into at most groups such that inside each group,\r\nthere are no edges of that color. It follows that each group is colored\r\nusing at most colors and so can have at most nodes, so overall we can\r\nhave at most nodes.The partition is defined as follows: we will\r\npartition the nodes into the sets where contains all nodes such that the\r\nlength of the longest path ending in using only edges of our chosen\r\ncolor is exactly . This length is at most since our coloring canât have\r\npaths of length of a single color. Furthermore, there canât be edges of\r\nour chosen color inside a set , because otherwise the endpoint of such\r\nan edge would be the end of the longest path to the start point of the\r\nedge plus the edge itself, which would be of length .Therefore, any\r\nvalid coloring using colors can have at most nodes, and so we must use\r\nat least colors in our construction, which we have already seen how to\r\ndo.\r\n",
    "hint": []
}