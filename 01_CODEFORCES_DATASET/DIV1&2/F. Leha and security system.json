{"link": "https://codeforces.com//contest/794/problem/F", "problemId": "106235", "problem_idx": "F", "shortId": "794F", "contest_number": "794", "problem_submissions": {"F": [27081873, 27083526, 27083046, 27085017, 27081983, 27082510, 27086006, 27083949, 27080179, 27086715, 27082966, 27079645, 27084337, 27084766, 27081869, 27081966, 27084662], "E": [27079377, 27080585, 27080375, 27082137, 27084820, 27086075, 27082614, 27085336, 27086070, 27082160, 27085721, 27085903, 27085376, 27087205, 27084980, 27082950, 27083172, 27085134], "D": [27077745, 27078665, 27078681, 27079267, 27079635, 27079737, 27080740, 27079081, 27083788, 27079987, 27082339, 27082247, 27082529, 27080107, 27094240, 27094236, 27094226, 27094219, 27094212, 27094182, 27094168, 27094131, 27094066, 27080763, 27081677, 27089971, 27089903, 27087542, 27080778], "C": [27075178, 27076116, 27076013, 27076437, 27076459, 27075605, 27076203, 27075986, 27076793, 27077625, 27078065, 27084041, 27076700, 27077790, 27078769, 27077244, 27075390, 27082931, 27077078], "B": [27072873, 27073613, 27072949, 27073965, 27073074, 27073568, 27073477, 27073304, 27073689, 27073228, 27073014, 27073894, 27072703, 27074273, 27072442, 27074226, 27073723, 27073830, 27073779], "A": [27072392, 27072471, 27072465, 27072459, 27072555, 27072760, 27072661, 27072604, 27072817, 27072481, 27072447, 27072409, 27072476, 27072463, 27072773, 27072976, 27072422, 27074544, 27072598], "G": [27216394, 27227867]}, "name": "F. Leha and security system", "statement": "Bankopolis, the city you already know, finally got a new bank opened!\r\nUnfortunately, its security system is not yet working fine... Meanwhile\r\nhacker Leha arrived in Bankopolis and decided to test the system!Bank\r\nhas cells for clients\u2019 money. A sequence from numbers describes the\r\namount of money each client has. Leha wants to make requests to the\r\ndatabase of the bank, finding out the total amount of money on some\r\nsubsegments of the sequence and changing values of the sequence on some\r\nsubsegments. Using a bug in the system, Leha can requests two types of\r\nqueries to the database: denoting that Leha changes each digit to digit\r\nin each element of sequence , for which is holds. For example, if we\r\nchange in number digit to , we get . It\u2019s worth noting that Leha, in\r\norder to stay in the shadow, never changes digits in the database to ,\r\ni.e. . denoting that Leha asks to calculate and print the sum of such\r\nelements of sequence , for which holds. As Leha is a white-hat hacker,\r\nhe don\u2019t want to test this vulnerability on a real database. You are to\r\nwrite a similar database for Leha to test.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing ll = long long;\nusing ld = long double;\nusing namespace std;\n\nconst int MAXN = 100001;\n\nstruct Perm {\n\tint a[10];\n\n\tPerm() {\n\t\tfor (int i = 0; i < 10; i++)\n\t\t\ta[i] = i;\n\t}\n\n\tfriend Perm operator * (const Perm& b, const Perm& c) {\n\t\tPerm ans;\n\t\tfor (int i = 0; i < 10; i++)\n\t\t\tans.a[i] = c.a[b.a[i]];\n\t\treturn ans;\n\t}\n\n\tPerm(int fr, int t) {\n\t\tfor (int i = 0; i < 10; i++)\n\t\t\ta[i] = i;\n\t\ta[fr] = t;\n\t}\n\n};\n\nstruct Value {\n\tll a[10];\n\n\tValue(int x = 0) {\n\t\tfor (int i = 0; i < 10; i++) a[i] = 0;\n\t\tll cur = 1;\n\t\twhile (x > 0) {\n\t\t\ta[x % 10] += cur;\n\t\t\tcur *= 10;\n\t\t\tx /= 10;\n\t\t}\n\t}\n\n\tValue(const Value& b, const Value& c) {\n\t\tfor (int i = 0; i < 10; i++)\n\t\t\ta[i] = b.a[i] + c.a[i];\n\t}\n\n\tfriend Value operator * (const Value& c, const Perm& b) {\n\t\tValue ans;\n\t\tfor (int i = 0; i < 10; i++)\n\t\t\tans.a[i] = 0;\n\t\tfor (int i = 0; i < 10; i++)\n\t\t\tans.a[b.a[i]] += c.a[i];\n\t\treturn ans;\n\t}\n\n};\n\nconst int RMN = 300000;\nValue rmq[RMN];\nPerm mdf[RMN];\n\nint arr[MAXN];\nint n;\n\n\nvoid Upd(int v) {\n\trmq[v] = Value(rmq[v * 2 + 1], rmq[v * 2 + 2]);\n}\n\nvoid UpdV(int v, const Perm& perm) {\n\tmdf[v] = mdf[v] * perm;\n\trmq[v] = rmq[v] * perm;\n}\n\nvoid Push(int v) {\n\tUpdV(v * 2 + 1, mdf[v]);\n\tUpdV(v * 2 + 2, mdf[v]);\n\tmdf[v] = Perm();\n}\n\nvoid Build(int v = 0, int l = 1, int r = n) {\n\tif (l == r) {\n\t\trmq[v] = Value(arr[l]);\n\t} else {\n\t\tBuild(v * 2 + 1, l, (l + r) / 2);\n\t\tBuild(v * 2 + 2, (l + r) / 2 + 1, r);\n\t\tUpd(v);\n\t}\n}\n\nint lv, rv;\nPerm vl;\n\nvoid Modify(int v = 0, int l = 1, int r = n) {\n\tif ((lv > r) || (l > rv)) return;\n\tif ((lv <= l) && (r <= rv)) {\n\t\tUpdV(v, vl);\n\t\treturn;\n\t}\n\tPush(v);\n\tModify(v * 2 + 1, l, (l + r) / 2);\n\tModify(v * 2 + 2, (l + r) / 2 + 1, r);\n\tUpd(v);\n}\n\nValue Get(int v = 0, int l = 1, int r = n) {\n\tif ((lv > r) || (l > rv)) return Value();\n\tif ((lv <= l) && (r <= rv)) {\n\t\treturn rmq[v];\n\t}\n\tPush(v);\n\treturn Value(Get(v * 2 + 1, l, (l + r) / 2), Get(v * 2 + 2, (l + r) / 2 + 1, r));\n}\n\n\nint main() {\n\t//freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n\tios_base::sync_with_stdio(false); cout.setf(ios::fixed); cout.precision(20);\n\tint q;\n\tscanf(\"%d%d\", &n, &q);\n\tfor (int i = 1; i <= n; i++) scanf(\"%d\", arr + i);\n\tBuild();\n\tfor (int i = 0; i < q; i++) {\n\t\tint tp, x, y;\n\t\tscanf(\"%d%d%d\", &tp, &lv, &rv);\n\t\tif (tp == 1) {\n\t\t\tscanf(\"%d%d\", &x, &y);\n\t\t\tvl = Perm(x, y);\n\t\t\tModify();\n\t\t} else {\n\t\t\tauto ans = Get();\n\t\t\tll av = 0;\n\t\t\tfor (int j = 1; j <= 9; j++) {\n\t\t\t\tav += ans.a[j] * j;\n\t\t\t}\n\t\t\tcout << av << \"\\n\";\n\t\t}\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures"], "dificulty": "2800", "interactive": false}