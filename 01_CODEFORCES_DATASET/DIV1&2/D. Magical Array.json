{
    "link": "https://codeforces.com//contest/1704/problem/D",
    "problemId": "1489127",
    "problem_idx": "D",
    "shortId": "1704D",
    "contest_number": "1704",
    "problem_submissions": {
        "G": [
            166399832,
            166392509,
            166397270,
            166638387,
            166637822,
            166637785,
            166398104,
            166405958,
            166752775
        ],
        "H1": [
            166382413,
            166388635,
            166396747,
            166390624,
            166393948,
            166394968,
            166395394,
            166395219,
            166399131,
            166395533,
            167610683,
            166399678,
            166398389,
            166393517,
            166397144,
            166394482,
            166410457,
            166410434,
            166410387,
            166397758,
            166388826
        ],
        "F": [
            166375942,
            166373341,
            166380920,
            166379078,
            166375083,
            166374406,
            166381370,
            166374889,
            166379414,
            166377998,
            166381484,
            166382056,
            166383687,
            167610801,
            167610658,
            166377446,
            166386899,
            166386972,
            166382080,
            166385431,
            166386767,
            166397839
        ],
        "E": [
            166364243,
            166366722,
            166377362,
            166370668,
            166369471,
            166363533,
            166365063,
            166369098,
            166371591,
            166372062,
            166371621,
            166363068,
            166369922,
            167610979,
            166372272,
            166368343,
            166370920,
            166372137,
            166377343,
            166374205,
            166366243
        ],
        "D": [
            166356732,
            166359032,
            166354225,
            166361715,
            166364424,
            166358723,
            166360532,
            166363384,
            166359682,
            166359426,
            166360174,
            166357237,
            166358099,
            167610772,
            167610622,
            166360647,
            166358359,
            166360520,
            166363303,
            166368469,
            166361316,
            166360453
        ],
        "C": [
            166354884,
            166355766,
            166368189,
            166358588,
            166361497,
            166354947,
            166356916,
            166357737,
            166356376,
            166355591,
            166357410,
            166354410,
            166354789,
            167610761,
            167610600,
            166356402,
            166355566,
            166357431,
            166360930,
            166363594,
            166359066,
            166357566
        ],
        "B": [
            166350601,
            166350801,
            166351510,
            166352475,
            166352194,
            166351471,
            166350940,
            166351732,
            166351784,
            166352133,
            166351498,
            166351569,
            166351237,
            167610589,
            166351144,
            166351469,
            166352214,
            166353113,
            166355462,
            166352514,
            166351316
        ],
        "A": [
            166350367,
            166350415,
            166350414,
            166351113,
            166350822,
            166350510,
            166350405,
            166350518,
            166350539,
            166350824,
            166350499,
            166350452,
            166350409,
            167610545,
            166350456,
            166350502,
            166350981,
            166354346,
            166351283,
            166350461,
            166350432
        ],
        "H2": [
            166808527
        ]
    },
    "name": "D. Magical Array",
    "statement": "Eric has an array b of length m, then he generates n additional arrays\r\nc_1, c_2,\r\ndots, c_n, each of length m, from the array b, by the following\r\nway:Initially, c_i = b for every 1\r\nle i\r\nle n. Eric secretly chooses an integer k (1\r\nle k\r\nle n) and chooses c_k to be the special array.There are two operations\r\nthat Eric can perform on an array c_t: : Choose two integers i and j (2\r\nleq i < j\r\nleq m-1), subtract 1 from both c_t[i] and c_t[j], and add 1 to both\r\nc_t[i-1] and c_t[j+1]. ; : Choose two integers i and j (2\r\nleq i < j\r\nleq m-2), subtract 1 from both c_t[i] and c_t[j], and add 1 to both\r\nc_t[i-1] and c_t[j+2]. Now, Eric does the following: For every array c_i\r\n(i\r\nneq k), Eric uses on it . For the array c_k, Eric uses on it .Lastly,\r\nEric discards the array b.For given arrays c_1, c_2,\r\ndots, c_n, your task is to find out the special array, i.e. the value k.\r\nAlso, you need to find the number of times of operation 2 was used on\r\nit.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 31.07.2022 17:16:43       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n, m;\n    cin >> n >> m;\n    vector<long long> a(n);\n    for (int i = 0; i < n; i++) {\n      long long sum = 0;\n      for (int j = 0; j < m; j++) {\n        long long x;\n        cin >> x;\n        sum += x * j;\n      }\n      a[i] = sum;\n    }\n    int id = (int) (max_element(a.begin(), a.end()) - a.begin());\n    cout << id + 1 << \" \" << a[id] - a[(id + 1) % n] << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "hashing",
        "implementation",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\D. Magical Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/105464",
    "editorial": "First, let\u00e2\u0080\u0099s focus on and do some calculations:1. 2. See what? Yes, even\r\nif you give lots of to array , the sum of remains. Thus, you can easily\r\nfind . And how to find the number of ? Let\u00e2\u0080\u0099s do some calculations\r\nagain:1. 2. This operation will add to the result of .Just minus the\r\ninitial and you will get the number of operations applied.\r\n"
}