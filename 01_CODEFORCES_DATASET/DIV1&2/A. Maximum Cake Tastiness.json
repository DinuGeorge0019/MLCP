{"link": "https://codeforces.com//contest/1654/problem/A", "problemId": "1336998", "problem_idx": "A", "shortId": "1654A", "contest_number": "1654", "problem_submissions": {"G": [150299206, 150291434, 150262682, 150264693, 150279932, 150262802, 150264575, 150265515, 150270995, 150269889, 150268570, 150658744, 150262050, 150410744], "F": [150251411, 150252834, 150256351, 150258591, 150257352, 150258765, 150260950, 150260548, 150253390, 155820292, 150253676, 150260302, 150259236, 150258476, 150253068, 150258272, 150260151, 150258857, 150253870], "E": [150249388, 150250832, 150247329, 150252856, 150255337, 150250196, 150255012, 150258473, 150245581, 150250984, 150250253, 150246690, 150250591, 150243463, 150281667, 150281018, 150257789, 150252457, 150252381, 150254404, 150260615], "D": [150242905, 150248369, 150245387, 150248435, 150250315, 150245874, 150249516, 150253299, 150250969, 150245477, 150245136, 150243688, 150246539, 150254801, 150249615, 150245204, 150245282, 150246887, 150243365], "C": [150236387, 150236280, 150236050, 150237265, 150241937, 150237951, 150242839, 150238439, 150239664, 150239447, 150236298, 150237311, 150240477, 150246874, 150236567, 150236644, 150238032, 150240021, 150238619], "B": [150233906, 150232250, 150249236, 150233827, 150235226, 150232832, 150239572, 150233210, 150235633, 150231291, 150231026, 150232476, 150233263, 150235368, 150231705, 150232694, 150231566, 150233122, 150232190], "A": [150228234, 150228426, 150228045, 150228869, 150232031, 150228616, 150230908, 150228192, 150232849, 150228032, 150227955, 150228792, 150228208, 150229654, 223450681, 150228295, 150228644, 150228162, 150228813, 150228169], "H": [150278254, 150276173, 150276315, 150560549]}, "name": "A. Maximum Cake Tastiness", "statement": "There are n pieces of cake on a line. The i-th piece of cake has weight\r\na_i (1\r\nleq i\r\nleq n).The tastiness of the cake is the maximum total weight of two\r\nadjacent pieces of cake (i. e.,\r\nmax(a_1+a_2,\r\n, a_2+a_3,\r\n,\r\nldots,\r\n, a_{n-1} + a_{n})).You want to maximize the tastiness of the cake. You\r\nare allowed to do the following operation at most once (doing more\r\noperations would ruin the cake): Choose a contiguous subsegment a[l, r]\r\nof pieces of cake (1\r\nleq l\r\nleq r\r\nleq n), and reverse it. The subsegment a[l, r] of the array a is the\r\nsequence a_l, a_{l+1},\r\ndots, a_r.If you reverse it, the array will become a_1, a_2,\r\ndots, a_{l-2}, a_{l-1},\r\nunderline{a_r},\r\nunderline{a_{r-1}},\r\nunderline{\r\ndots},\r\nunderline{a_{l+1}},\r\nunderline{a_l}, a_{r+1}, a_{r+2},\r\ndots, a_{n-1}, a_n.For example, if the weights are initially [5, 2, 1,\r\n4, 7, 3], you can reverse the subsegment a[2, 5], getting [5,\r\nunderline{7},\r\nunderline{4},\r\nunderline{1},\r\nunderline{2}, 3]. The tastiness of the cake is now 5 + 7 = 12 (while\r\nbefore the operation the tastiness was 4+7=11).Find the maximum\r\ntastiness of the cake after doing the operation at most once.\r\n", "solutions": ["#include <bits/stdc++.h>\n\n#define itn int\n#define all(x) (x).begin(), (x).end()\n#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())\n\nusing namespace std;\n\ninline int nxt() {\n\tint x;\n\tscanf(\"%d\", &x);\n\treturn x;\n}\n\nvoid solve() {\n\tint n = nxt();\n\tvector<int> a(n);\n\tgenerate(all(a), nxt);\n\tsort(all(a));\n\tcout << a[n - 1] + a[n - 2] << \"\\n\";\n}\n\nint main() {\n\tint t = nxt();\n\twhile (t--) {\n\t\tsolve();\n\t}\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "greedy", "implementation", "sortings"], "dificulty": "800", "interactive": false}