{"link": "https://codeforces.com//contest/1787/problem/F", "problemId": "1756749", "problem_idx": "F", "shortId": "1787F", "contest_number": "1787", "problem_submissions": {"I": [197474547, 191162667, 191147076, 191159474, 191182912, 191180384, 191173195, 191158380, 191159985, 191279548, 191153893, 191147979, 191219667, 191170332], "G": [191152988, 191152586, 191141714, 191145745, 191143792, 191147352, 191147519, 191158898, 191159891, 191160943, 191153438, 191155040, 191144883, 191170407, 191170114, 191152547], "F": [191146155, 191132842, 191134802, 191136901, 191128020, 191139771, 191139131, 191147114, 191152778, 191144574, 191147232, 191145790, 191135060, 191146379, 191144901, 191136231, 191134824, 191143478, 191143747, 191145614], "E": [191137894, 191126319, 191169100, 191131011, 191146734, 191132024, 191134009, 191128652, 191130752, 191135324, 191128162, 191137413, 191115850, 191140133, 191140025, 191121022, 191131209, 191138279, 191133339, 191131279], "D": [191132976, 191120161, 191124203, 191123443, 191137713, 191128946, 191128273, 191122289, 191126977, 191131112, 191124722, 191125562, 191128102, 191135389, 191135592, 191131056, 191123065, 191127620, 191126290, 191127861], "C": [191125268, 191113889, 191117948, 191115059, 191116269, 191118107, 191120001, 191140669, 191115010, 191125411, 191117705, 191118998, 191121343, 191121072, 191117056, 191128472, 191115952, 191117237, 191118951, 191120349], "B": [191121944, 191109607, 191111770, 191108995, 191110155, 191109908, 191113645, 191109634, 191109874, 191121868, 191110598, 191110575, 191117560, 191109576, 191110819, 191112301, 191110138, 191111938, 191108264, 191111930], "A": [191118000, 191106352, 191108603, 191106770, 191106814, 191106284, 191107425, 191105859, 191106157, 191118169, 191107747, 191106297, 191105730, 191106101, 191107070, 191108687, 191105956, 191107701, 191105869, 191106761], "H": [191116884, 191151161, 191155682, 191157247, 191138915, 191146913, 191162451, 191161022, 191128443, 191126961, 191251422, 191150263, 191149572, 191156328]}, "name": "F. Inverse Transformation", "statement": "A permutation scientist is studying a self-transforming permutation a\r\nconsisting of n elements a_1,a_2,\r\nldots,a_n.A permutation is a sequence of integers from 1 to n of length\r\nn containing each number exactly once. For example, [1], [4, 3, 5, 1, 2]\r\nare permutations, while [1, 1], [4, 3, 1] are not.The permutation\r\ntransforms day by day. On each day, each element x becomes a_x, that is,\r\na_x becomes a_{a_x}. Specifically: on the first day, the permutation\r\nbecomes b, where b_x = a_{a_x}; on the second day, the permutation\r\nbecomes c, where c_x = b_{b_x};\r\nldots For example, consider permutation a = [2,3,1]. On the first day,\r\nit becomes [3,1,2]. On the second day, it becomes [2,3,1].You\u2019re given\r\nthe permutation a\u2019 on the k-th day.Define\r\nsigma(x) = a_x, and define f(x) as the minimal positive integer m such\r\nthat\r\nsigma^m(x) = x, where\r\nsigma^m(x) denotes\r\nunderbrace{\r\nsigma(\r\nsigma(\r\nldots\r\nsigma}_{m\r\ntext{ times}}(x)\r\nldots)).For example, if a = [2,3,1], then\r\nsigma(1) = 2,\r\nsigma^2(1) =\r\nsigma(\r\nsigma(1)) =\r\nsigma(2) = 3,\r\nsigma^3(1) =\r\nsigma(\r\nsigma(\r\nsigma(1))) =\r\nsigma(3) = 1, so f(1) = 3. And if a=[4,2,1,3],\r\nsigma(2) = 2 so f(2) = 1;\r\nsigma(3) = 1,\r\nsigma^2(3) = 4,\r\nsigma^3(3) = 3 so f(3) = 3.Find the initial permutation a such that\r\nsum\r\nlimits^n_{i=1}\r\ndfrac{1}{f(i)} is .\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long;\nusing pi = array<lint, 2>;\n#define sz(v) ((int)(v).size())\n#define all(v) (v).begin(), (v).end()\nconst int MAXN = 200005;\n\nlint ipow(lint x, lint p, lint m) {\n\tlint ret = 1, piv = x;\n\twhile (p) {\n\t\tif (p & 1)\n\t\t\tret = ret * piv % m;\n\t\tpiv = piv * piv % m;\n\t\tp >>= 1;\n\t}\n\treturn ret % m;\n}\n\nint main() {\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\tcout.tie(0);\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n, k;\n\t\tcin >> n >> k;\n\t\tvector<int> a(n);\n\t\tfor (auto &z : a)\n\t\t\tcin >> z, z--;\n\t\tvector<vector<vector<int>>> bySize(n + 1);\n\t\tvector<int> vis(n);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (vis[i])\n\t\t\t\tcontinue;\n\t\t\tvector<int> v;\n\t\t\tfor (int j = i; !vis[j]; j = a[j]) {\n\t\t\t\tv.push_back(j);\n\t\t\t\tvis[j] = 1;\n\t\t\t}\n\t\t\tbySize[sz(v)].push_back(v);\n\t\t}\n\t\tvector<int> ans(n);\n\t\tbool fail = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (sz(bySize[i]) == 0)\n\t\t\t\tcontinue;\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tint q = sz(bySize[i]);\n\t\t\t\tif (q & ((1 << min(k, 30)) - 1)) {\n\t\t\t\t\tfail = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tint w = (1 << k);\n\t\t\t\tfor (int a = 0; a < q; a += w) {\n\t\t\t\t\tvector<int> pos;\n\t\t\t\t\tfor (int z = 0; z < i; z++) {\n\t\t\t\t\t\tfor (int b = a; b < a + w; b++) {\n\t\t\t\t\t\t\tpos.push_back(bySize[i][b][z]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (int z = 0; z < sz(pos); z++)\n\t\t\t\t\t\tans[pos[z]] = pos[(z + 1) % sz(pos)];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i % 2 == 1) {\n\t\t\t\tint q = sz(bySize[i]);\n\t\t\t\tint ptr = min(k, 30);\n\t\t\t\tfor (int a = 0; a < q;) {\n\t\t\t\t\twhile ((1 << ptr) > q - a)\n\t\t\t\t\t\tptr--;\n\t\t\t\t\tint w = (1 << ptr);\n\t\t\t\t\tfor (int b = a; b < a + w; b++) {\n\t\t\t\t\t\tvector<int> v;\n\t\t\t\t\t\tint nxt = ipow((i + 1) / 2, k - ptr, i);\n\t\t\t\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\t\t\t\tv.push_back(bySize[i][b][1ll * j * nxt % i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbySize[i][b] = v;\n\t\t\t\t\t}\n\t\t\t\t\tvector<int> pos;\n\t\t\t\t\tfor (int z = 0; z < i; z++) {\n\t\t\t\t\t\tfor (int b = a; b < a + w; b++) {\n\t\t\t\t\t\t\tpos.push_back(bySize[i][b][z]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (int z = 0; z < sz(pos); z++)\n\t\t\t\t\t\tans[pos[z]] = pos[(z + 1) % sz(pos)];\n\t\t\t\t\ta += w;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (fail) {\n\t\t\tcout << \"NO\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tcout << \"YES\\n\";\n\t\tfor (auto &z : ans)\n\t\t\tcout << z + 1 << \" \";\n\t\tcout << \"\\n\";\n\t}\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "implementation", "math"], "dificulty": "2500", "interactive": false}