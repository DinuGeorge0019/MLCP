{"link": "https://codeforces.com//contest/1028/problem/H", "problemId": "212306", "problem_idx": "H", "shortId": "1028H", "contest_number": "1028", "problem_submissions": {"F": [42179553, 42173574, 42172126, 42183823, 42179375, 42177929, 42176646, 42176739, 42168545, 42174904, 42175563, 42187810, 42177441, 42180538, 42178358, 42178178], "H": [42177022, 42177937, 42197383, 42174346, 42178267, 42180853, 42180364, 42179125, 42178613, 42177685, 42188074], "G": [42174235, 42180921, 42179342, 42179278, 42183838, 42181415, 42188299, 42175088, 42183699, 42177809, 42199769, 42180709], "E": [42168417, 42169350, 42169465, 42168142, 42175311, 42172346, 42172643, 42173588, 42169997, 42170922, 42170783, 42169728, 42172341, 42172392, 42174203, 42173993, 42169247], "D": [42165714, 42166524, 42166821, 42171266, 42167648, 42168290, 42168039, 42170991, 42171075, 42166522, 42165185, 42167753, 42167327, 42166990, 42167859, 42166718, 42169672, 42169316, 42172369], "C": [42162420, 42161280, 42164158, 42159623, 42162254, 42163150, 42163507, 42162131, 42163347, 42161576, 42161023, 42164637, 42163616, 42161801, 42163884, 42163193, 42164354, 42165199, 42162360], "B": [42159958, 42159146, 42159962, 42160148, 42160038, 42161126, 42160845, 42163792, 42159144, 42162163, 42159196, 42160477, 42160541, 42159094, 42160870, 42160007, 42160216, 42160794, 42159231], "A": [42158947, 42158816, 42158953, 42161141, 42158802, 42159721, 42159618, 42163119, 42158831, 42163007, 42158820, 42158811, 42158901, 42158777, 42159186, 42158929, 42158806, 42159328, 42158825]}, "name": "H. Make Square", "statement": "We call an array b_1, b_2,\r\nldots, b_m good, if there exist two indices i < j such that b_i\r\ncdot b_j is a perfect square.Given an array b_1, b_2,\r\nldots, b_m, in one action you can perform one of the following: multiply\r\nany element b_i by any prime p; divide any element b_i by prime p, if\r\nb_i is divisible by p. Let f(b_1, b_2,\r\nldots, b_m) be the minimum number of actions needed to make the array b\r\ngood.You are given an array of n integers a_1, a_2,\r\nldots, a_n and q queries of the form l_i, r_i. For each query output\r\nf(a_{l_i}, a_{l_i + 1},\r\nldots, a_{r_i}).\r\n", "solutions": ["#ifndef BZ\n#pragma GCC optimize \"-O3\"\n#endif\n#include <bits/stdc++.h>\n\n#define FASTIO\n#define ALL(v) (v).begin(), (v).end()\n#define rep(i, l, r) for (int i = (l); i < (r); ++i)\n\n#ifdef FASTIO\n#define scanf abacaba\n#define printf abacaba\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\nusing namespace std;\n\n\n/*\nll pw(ll a, ll b) {\n\tll ans = 1; while (b) {\n\t\twhile (!(b & 1)) b >>= 1, a = (a * a) % MOD;\n\t\tans = (ans * a) % MOD, --b;\n\t} return ans;\n}\n*/\n\nconst int MX = 5032107 + 5;\n\nint go[MX][8];\n\nint gl[20];\nint bb[MX];\nvector<int> primes;\nint ans[1200000];\n\nvector<int> vv;\nint gst = 0;\nint n, q;\nint a[200000];\nvector<pair<int, int>> gg[200000];\n\nvoid run(int x, int cur, int cnt) {\n\tif (x == vv.size()) {\n\t\tfor (int i = 0; i < 8; ++i)\n\t\t\tgl[i + cnt] = max(gl[i + cnt], go[cur][i]);\n\t\tgo[cur][cnt] = gst;\n\t\treturn;\n\t}\n\trun(x + 1, cur, cnt + 1);\n\trun(x + 1, cur * vv[x], cnt);\n}\n\nint main() {\n#ifdef FASTIO\n\tios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n#endif\n\tfor (int i = 1; i < MX; ++i)\n\t\tbb[i] = i;\n\tfor (int i = 2; i < MX; ++i) {\n\t\tif (bb[i] == i)\n\t\t\tprimes.push_back(i);\n\t\tfor (int j: primes) {\n\t\t\tif (i * j >= MX || bb[i] < j)\n\t\t\t\tbreak;\n\t\t\tbb[i * j] = j;\n\t\t}\n\t}\n\tcin >> n >> q;\n\tfor (int i = 1; i <= n; ++i)\n\t\tcin >> a[i];\n\tfor (int i = 0; i < q; ++i) {\n\t\tint l, r;\n\t\tcin >> l >> r;\n\t\tgg[r].emplace_back(l, i);\n\t}\n\tfor (int i = 1; i <= n; ++i) {\n\t\tgst = i;\n\t\tint now = a[i];\n\t\tvv.clear();\n\t\twhile (now != 1) {\n\t\t\tint x = bb[now];\n\t\t\tint fl = 0;\n\t\t\twhile (now % x == 0)\n\t\t\t\tnow /= x, fl ^= 1;\n\t\t\tif (fl)\n\t\t\t\tvv.push_back(x);\n\t\t}\n\t\trun(0, 1, 0);\n\t\tfor (auto qq: gg[i]) {\n\t\t\tint ns = 20;\n\t\t\tfor (int j = 0; j < 20; ++j)\n\t\t\t\tif (gl[j] >= qq.first) {\n\t\t\t\t\tns = min(ns, j);\n\t\t\t\t}\n\t\t\tans[qq.second] = ns;\n\t\t}\n\t}\n\tfor (int i = 0; i < q; ++i)\n\t\tcout << ans[i] << \"\\n\";\n\treturn 0;\n}\n\n\n"], "input": "", "output": "", "tags": ["math"], "dificulty": "2900", "interactive": false}