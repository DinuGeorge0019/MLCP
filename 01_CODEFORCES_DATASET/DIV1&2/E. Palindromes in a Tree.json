{
    "link": "https://codeforces.com//contest/914/problem/E",
    "problemId": "148490",
    "problem_idx": "E",
    "shortId": "914E",
    "contest_number": "914",
    "problem_submissions": {
        "E": [
            34383567,
            34380688,
            34384037,
            34379971,
            34385853,
            34381341,
            34377061,
            34385471,
            34377068,
            34383097,
            34381216,
            34377930,
            34393845,
            34378590,
            34386380,
            34381164
        ],
        "C": [
            34382803,
            34382793,
            34364057,
            34365651,
            34386486,
            34396063,
            34363721,
            34365741,
            34364774,
            34366702,
            34391506,
            34365007,
            34367351,
            34382826,
            34374119,
            34384464,
            34372151,
            34370073
        ],
        "G": [
            34376415,
            34377275,
            34377412,
            34382707,
            34380896,
            34376017,
            34382091,
            34379406,
            34377065,
            34381510,
            34378767,
            34384171,
            34382760,
            34380461,
            34386445,
            34380566,
            34388276,
            34376347,
            34387872,
            34388821
        ],
        "F": [
            34372924,
            34364964,
            34388114,
            34388527,
            34377465,
            34383969,
            34384849,
            34382075,
            34408585,
            34427444,
            34427415,
            34427411,
            34427369,
            34426234,
            34426219,
            34426204,
            34426181,
            34395428,
            34395305,
            34393742,
            34393096,
            34392685,
            34377829,
            34381405,
            34389663,
            34384026
        ],
        "D": [
            34370762,
            34371655,
            34369773,
            34368591,
            34374188,
            34367037,
            34369044,
            34372797,
            34370541,
            34371781,
            34370647,
            34370823,
            34372317,
            34370221,
            34393812,
            34371853,
            34371865,
            34370930,
            34372046,
            34375276,
            34374115
        ],
        "B": [
            34360667,
            34360722,
            34374939,
            34362210,
            34374843,
            34362983,
            34377719,
            34363222,
            34359679,
            34359608,
            34366166,
            34384598,
            34360320,
            34360372,
            34361647,
            34362020,
            34368128,
            34362137,
            34362752,
            34361533
        ],
        "A": [
            34357760,
            34358042,
            34374626,
            34357833,
            34358764,
            34358376,
            34358219,
            34358285,
            34357836,
            34357713,
            34358130,
            34358072,
            34357931,
            34391604,
            34358333,
            34358022,
            34358632,
            34358260,
            34359117,
            34357845
        ],
        "H": [
            34391572,
            34389095
        ]
    },
    "name": "E. Palindromes in a Tree",
    "statement": "You are given a tree (a connected acyclic undirected graph) of vertices.\r\nVertices are numbered from to and each vertex is assigned a character\r\nfrom to .A path in the tree is said to be palindromic if at least one\r\npermutation of the labels in the path is a palindrome.For each vertex,\r\noutput the number of palindromic paths passing through it. The path from\r\nvertex to vertex is considered to be the same as the path from vertex to\r\nvertex , and this path will be counted only once for each of the\r\nvertices it passes through.\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<set>\n#include<cmath>\n#include<iostream>\n#include<assert.h>\n#include<queue>\n#include<string>\n#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)\n#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\nusing namespace std;\ntypedef long long LL;\nconst int N=210000;\nint head[N],np[N<<1],p[N<<1],tot;\nint n;\nchar _str[N];\nint col[N];\nint fa[N],size[N];\nbool vis[N],inq[N];\nint q[N];\nLL ans[N];\nint getRoot(int ss){\n\tq[q[0]=1]=ss;\n\tinq[ss]=1;\n\trep(i,1,q[0]){\n\t\tint x=q[i];\n\t\tfor(int u=head[x];u;u=np[u])if(!vis[p[u]])if(!inq[p[u]]){\n\t\t\tfa[p[u]]=x;\n\t\t\tq[++q[0]]=p[u];\n\t\t\tinq[p[u]]=1;\n\t\t}\n\t}\n\tint mi=1000000;\n\tint rp=0;\n\tper(i,q[0],1){\n\t\tint x=q[i];\n\t\tint ma=-1;\n\t\tsize[x]=1;\n\t\tfor(int u=head[x];u;u=np[u])if(!vis[p[u]])if(inq[p[u]])if(fa[p[u]]==x){\n\t\t\tsize[x]+=size[p[u]];\n\t\t\tma=max(ma,size[p[u]]);\n\t\t}\n\t\tma=max(ma,q[0]-size[x]);\n\t\tif(ma<mi){\n\t\t\tmi=ma;\n\t\t\trp=x;\n\t\t}\n\t}\n\trep(i,1,q[0]){\n\t\tint x=q[i];\n\t\tsize[x]=fa[x];inq[x]=0;\n\t}\n\tq[0]=0;\n\treturn rp;\n}\nint val[N];\nvoid bfs1(int rt){\n\tq[q[0]=1]=rt;\n\tinq[rt]=1;\n\tval[rt]=(1<<col[rt]);\n\n\trep(i,1,q[0]){\n\t\tint x=q[i];\n\t\tfor(int u=head[x];u;u=np[u])if(!inq[p[u]])if(!vis[p[u]]){\n\t\t\tfa[p[u]]=x;\n\t\t\tinq[p[u]]=1;\n\t\t\tval[p[u]]=val[x]^(1<<col[p[u]]);\n\t\t\tq[++q[0]]=p[u];\n\t\t}\n\t}\n}\nint pp[1<<20];\nint ti[1<<20];\nint cnt[1<<20];\nint nowt;\nint meask(int t){\n\tif(ti[t]!=nowt){\n\t\tpp[t]=0;\n\t\tti[t]=nowt;\n\t}\n\treturn pp[t];\n}\nvoid meadd(int t,int v){\n\tif(ti[t]!=nowt){\n\t\tpp[t]=0;\n\t\tti[t]=nowt;\n\t}\n\tpp[t]+=v;\n}\nLL res=0;\nLL sb[N];\nvoid dfs1(int x,int ff){\n\tsb[x]=0;\n\tif(cnt[val[x]]<=1)++sb[x];\n\t//if(ff==2&&x==6)printf(\"____________%d\\n\",sb[x]);\n\tfor(int u=head[x];u;u=np[u])if(p[u]!=ff)if(inq[p[u]])if(fa[p[u]]==x)if(!vis[p[u]]){\n\t\tdfs1(p[u],x);\n\t\tsb[x]+=sb[p[u]];\n\t}\n\tans[x]+=sb[x];\n}\nint nowcol;\nvoid calc1(int x,int ff=-1){\n\tsb[x]=meask(val[x]^(1<<nowcol));\n\trep(i,0,19){\n\t\tint ot=(val[x]^(1<<nowcol));\n\t\tot^=(1<<i);\n\t\tsb[x]+=meask(ot);\n\t}\n\tfor(int u=head[x];u;u=np[u])if(p[u]!=ff)if(inq[p[u]])if(fa[p[u]]==x)if(!vis[p[u]]){\n\t\tcalc1(p[u],x);\n\t\tsb[x]+=sb[p[u]];\n\t}\n\tans[x]+=sb[x];\n}\nvoid add1(int x,int ff=-1){\n\tmeadd(val[x],1);\n\tfor(int u=head[x];u;u=np[u])if(p[u]!=ff)if(inq[p[u]])if(fa[p[u]]==x)if(!vis[p[u]]){\n\t\tadd1(p[u],x);\n\t}\n}\nint xp[N];\nvoid work(int ss){\n\tint rt=getRoot(ss);\n\tvis[rt]=1;\n\tbfs1(rt);\n\tnowt=rt;\n\tnowcol=col[rt];\n\t//root to it\n\tres=0;\n\tdfs1(rt,-1);\n\txp[0]=0;\n\t//rep(i,1,n)printf(\".%d:%lld\\n\",i,ans[i]);\n\tfor(int u=head[rt];u;u=np[u])if(!vis[p[u]])if(inq[p[u]]){\n\t\tcalc1(p[u]);\n\t\tadd1(p[u]);\n\t\txp[++xp[0]]=p[u];\n\t\tans[rt]+=sb[p[u]];\n\t}\n\tnowt=n+rt;\n\tper(i,xp[0],1){\n\t\tint x=xp[i];\n\t\tcalc1(x);\n\t\tadd1(x);\n\t}\n\t//rep(i,1,n)printf(\"%d:%lld\\n\",i,ans[i]);\n\t//rep(i,1,n)printf(\"_%d:%d\\n\",i,val[i]);\n\trep(i,1,q[0]){\n\t\tint x=q[i];\n\t\tfa[x]=0;\n\t\tinq[x]=0;\n\t\tval[x]=0;\n\t\tsize[x]=0;\n\t}\n\tq[0]=0;\n\tfor(int u=head[rt];u;u=np[u])if(!vis[p[u]])work(p[u]);\n}\nint main(){\n\trep(i,1,(1<<20)-1)cnt[i]=cnt[i>>1]+(i&1);\n\tscanf(\"%d\",&n);\n\trep(i,1,n-1){\n\t\tint a,b;scanf(\"%d%d\",&a,&b);\n\t\t++tot;p[tot]=b;np[tot]=head[a];head[a]=tot;\n\t\t++tot;p[tot]=a;np[tot]=head[b];head[b]=tot;\n\t}\n\tscanf(\"%s\",_str+1);\n\trep(i,1,n)col[i]=_str[i]-'a';\n\n\twork(1);\n\trep(i,1,n)printf(\"%lld%c\",ans[i],i==n?'\\n':' ');\n\treturn 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "data structures",
        "divide and conquer",
        "trees"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\E. Palindromes in a Tree.json",
    "editorial_link": "https://codeforces.com//blog/entry/57250",
    "editorial": "The problem can be solved by centroid decomposition. A path will be\r\npalindromic at most one letter appears odd number of times in the path.\r\nWe maintain a bitmask for each node, where -th bit is if the -th\r\ncharacter occurs odd number of times, otherwise . The path from to is\r\nvalid if mask[] ^ mask[] has at most one bit set to . Consider a part as\r\nthe subtree of the immediate children of the root of the the centroid\r\ntree. For a node, we need to consider the paths that go from its subtree\r\nto any other part. We add the contribution of nodes in the subtree of a\r\nnode using a simple dfs and propagating the values above and add the\r\ncorresponding contribution to the answer of the node currently in\r\nconsideration(dfs). Complexity is n*log(n)*20\r\n",
    "hint": []
}