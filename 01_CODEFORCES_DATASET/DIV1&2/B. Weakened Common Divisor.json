{
    "link": "https://codeforces.com//contest/1025/problem/B",
    "problemId": "209737",
    "problem_idx": "B",
    "shortId": "1025B",
    "contest_number": "1025",
    "problem_submissions": {
        "E": [
            41858738,
            41856429,
            41850768,
            41855385,
            41852484,
            41858727,
            41848268,
            41855122,
            41883001,
            41858915,
            41855225,
            41852858,
            41868516,
            41860862,
            41856872,
            41860887,
            41851802
        ],
        "F": [
            41848629,
            41847210,
            41861209,
            41860806,
            41863443,
            41862402,
            41853998,
            41862178,
            41845081,
            41877837,
            41887505,
            41887279,
            41887255,
            41878485,
            41856047,
            41861957,
            41858912,
            41906629,
            41858319,
            41868413
        ],
        "D": [
            41845183,
            41851596,
            41961545,
            41841784,
            41841903,
            41840812,
            41849010,
            41840988,
            41846701,
            41841230,
            41874808,
            41841578,
            41847099,
            41842212,
            41945631,
            41911317,
            41911277,
            41878022,
            41877990,
            41877935,
            41874708,
            41874699,
            41874650,
            41873983,
            41873792,
            41873701,
            41873477,
            41849952,
            41843783,
            41842954,
            41842230,
            41844472,
            41848949,
            41844612
        ],
        "C": [
            41839685,
            41838607,
            41835815,
            41834650,
            41838762,
            41837233,
            41866845,
            41840107,
            41835687,
            41833279,
            41836241,
            41835918,
            41839785,
            41834860,
            41839690,
            41836558,
            41837913,
            41843576,
            41837629
        ],
        "A": [
            41835541,
            41829219,
            41829281,
            41828966,
            41829689,
            41834202,
            41835387,
            41829112,
            41829095,
            41842587,
            41837894,
            41829018,
            41830134,
            41829065,
            41830329,
            41829109,
            41829662,
            41832973,
            41831018
        ],
        "B": [
            41832044,
            41834103,
            41852766,
            41831349,
            41836588,
            41831557,
            41837237,
            41833957,
            41833253,
            41830677,
            41832816,
            41833177,
            41836737,
            41831907,
            41867411,
            41832885,
            41833414,
            41837270,
            41834779
        ],
        "G": [
            41866839,
            41868176,
            42077886,
            41877542,
            41872667,
            41951029,
            41921003
        ]
    },
    "name": "B. Weakened Common Divisor",
    "statement": "During the research on properties of the greatest common divisor () of a\r\nset of numbers, Ildar, a famous mathematician, introduced a brand new\r\nconcept of the weakened common divisor () of a list of pairs of\r\nintegers.For a given list of pairs of integers (a_1, b_1), (a_2, b_2),\r\n..., (a_n, b_n) their is arbitrary integer greater than 1, such that it\r\ndivides at least one element in each pair. WCD may not exist for some\r\nlists.For example, if the list looks like [(12, 15), (25, 18), (10,\r\n24)], then their WCD can be equal to 2, 3, 5 or 6 (each of these numbers\r\nis strictly greater than 1 and divides at least one number in each\r\npair).You’re currently pursuing your PhD degree under Ildar’s\r\nmentorship, and that’s why this problem was delegated to you. Your task\r\nis to calculate efficiently.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define MP make_pair\n#define PB push_back\n#define int long long\n#define st first\n#define nd second\n#define rd third\n#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)\n#define RE(i, n) FOR(i, 1, n)\n#define FORD(i, a, b) for(int i = (a); i >= (b); --i)\n#define REP(i, n) for(int i = 0;i <(n); ++i)\n#define VAR(v, i) __typeof(i) v=(i)\n#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)\n#define ALL(x) (x).begin(), (x).end()\n#define SZ(x) ((int)(x).size())\nusing namespace std;\ntemplate<typename TH> void _dbg(const char* sdbg, TH h) { cerr<<sdbg<<\"=\"<<h<<\"\\n\"; }\ntemplate<typename TH, typename... TA> void _dbg(const char* sdbg, TH h, TA... t) {\n  while(*sdbg != ',')cerr<<*sdbg++; cerr<<\"=\"<<h<<\",\"; _dbg(sdbg+1, t...);\n}\n#ifdef LOCAL\n#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)\n#define debugv(x) {{cerr <<#x <<\" = \"; FORE(itt, (x)) cerr <<*itt <<\", \"; cerr <<\"\\n\"; }}\n#else\n#define debug(...) (__VA_ARGS__)\n#define debugv(x)\n#define cerr if(0)cout\n#endif\n#define next ____next\n#define prev ____prev\n#define left ____left\n#define hash ____hash\ntypedef long long ll;\ntypedef long double LD;\ntypedef pair<int, int> PII;\ntypedef pair<ll, ll> PLL;\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<ll> VLL;\ntypedef vector<pair<int, int> > VPII;\ntypedef vector<pair<ll, ll> > VPLL;\n\ntemplate<class C> void mini(C&a4, C b4){a4=min(a4, b4); }\ntemplate<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }\ntemplate<class T1, class T2>\nostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << \"(\" << pair.first << \", \" << pair.second << \")\";}\ntemplate<class A, class B, class C> struct Triple { A first; B second; C third;\n  bool operator<(const Triple& t) const { if (st != t.st) return st < t.st; if (nd != t.nd) return nd < t.nd; return rd < t.rd; } };\ntemplate<class T> void ResizeVec(T&, vector<int>) {}\ntemplate<class T> void ResizeVec(vector<T>& vec, vector<int> sz) {\n  vec.resize(sz[0]); sz.erase(sz.begin()); if (sz.empty()) { return; }\n  for (T& v : vec) { ResizeVec(v, sz); }\n}\ntypedef Triple<int, int, int> TIII;\ntemplate<class A, class B, class C>\nostream& operator<< (ostream &out, Triple<A, B, C> t) { return out << \"(\" << t.st << \", \" << t.nd << \", \" << t.rd << \")\"; }\ntemplate<class T> ostream& operator<<(ostream& out, vector<T> vec) { out<<\"(\"; for (auto& v: vec) out<<v<<\", \"; return out<<\")\"; }\ntemplate<class T> ostream& operator<<(ostream& out, set<T> vec) { out<<\"(\"; for (auto& v: vec) out<<v<<\", \"; return out<<\")\"; }\ntemplate<class L, class R> ostream& operator<<(ostream& out, map<L, R> vec) { out<<\"(\"; for (auto& v: vec) out<<v<<\", \"; return out<<\")\"; }\n\nconst int N = 1e6 + 5;\nint a[N], b[N];\nint32_t main() {\n\n  ios_base::sync_with_stdio(0);\n  cout << fixed << setprecision(10);\n  cerr << fixed << setprecision(10);\n  cin.tie(0);\n  //double beg_clock = 1.0 * clock() / CLOCKS_PER_SEC;\n  \n  int n;\n  cin>>n;\n  int g = 0;\n  RE (i, n) {\n    cin>>a[i]>>b[i];\n    g = __gcd(g, a[i] * b[i]);\n  }\n  if (g == 1) {\n    cout<<\"-1\\n\";\n    return 0;\n  }\n  RE (i, n) {\n    int cand = __gcd(g, a[i]);\n    if (cand > 1) {\n      g = cand;\n    }\n    cand = __gcd(g, b[i]);\n    if (cand > 1) {\n      g = cand;\n    }\n  }\n  cout<<g<<endl;\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "number theory"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\B. Weakened Common Divisor.json",
    "editorial_link": "https://codeforces.com//blog/entry/61323",
    "editorial": "The obvious solution of finding all divisors of all numbers in\r\ndefinitely wonât pass, so we have to come up with a slight\r\noptimization.One may notice that isâs sufficient to take a prime\r\n(because if some value is an answer, it can be factorized without losing\r\nthe answer property). To decrease the number of primes to check, letâs\r\nget rid of the redundant ones. Take an arbitrary pair of elements (, )\r\nand take the union of their prime factorizations. Itâs easy to see at\r\nthis point that the cardinality of this union doesnât exceed . The rest\r\nis to check whether there exists such prime that divides at least one\r\nelement in each pair in time.\r\n",
    "hint": []
}