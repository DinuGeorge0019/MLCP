{
    "link": "https://codeforces.com//contest/2084/problem/E",
    "problemId": "3311133",
    "problem_idx": "E",
    "shortId": "2084E",
    "contest_number": "2084",
    "problem_submissions": {
        "H": [
            314145269,
            314152641,
            314144885,
            314182408,
            314161253,
            314160492,
            314159109,
            314336819,
            315779937
        ],
        "G2": [
            314127203,
            314160979,
            314119099,
            314173756,
            314142893,
            314147799,
            314151130,
            314224010
        ],
        "G1": [
            314118414,
            314131726,
            314153985,
            314109590,
            314130088,
            314137970,
            314137514,
            314122753,
            314126112,
            314121248,
            314130892,
            314132033,
            314119541,
            314121030,
            314132824,
            314120399,
            314110237,
            314140572,
            314142526,
            314121707
        ],
        "F": [
            314111540,
            314121924,
            314125756,
            314134963,
            314116023,
            314127619,
            314126955,
            314113301,
            314113508,
            314112491,
            314118412,
            314115812,
            314130696,
            314134248,
            314124898,
            314139906,
            314148255,
            314122476,
            314118124,
            314136680
        ],
        "E": [
            314096933,
            314100998,
            314106034,
            314097464,
            314098060,
            314098397,
            314100089,
            314096655,
            314098774,
            314103821,
            314098080,
            314100694,
            314097651,
            314097020,
            314098501,
            314106285,
            314091026,
            314103056,
            314104301,
            314104189
        ],
        "D": [
            314089308,
            314084108,
            314093835,
            314087875,
            314090629,
            314088628,
            314087990,
            314086450,
            314087578,
            314093466,
            314087381,
            314087993,
            314088809,
            314087808,
            314089647,
            314085680,
            314097166,
            314093234,
            314095090,
            314092873
        ],
        "C": [
            314088884,
            314079194,
            314084706,
            314078405,
            314080677,
            314082894,
            314084690,
            314079232,
            314080138,
            314078936,
            314078924,
            314080521,
            314081145,
            314083479,
            314082189,
            314078479,
            314078402,
            314080517,
            314081011,
            314085360
        ],
        "B": [
            314071844,
            314073131,
            314077666,
            314072689,
            314074212,
            314075241,
            314071920,
            314070221,
            314072945,
            314073818,
            314072825,
            314073490,
            314072379,
            314074081,
            314073148,
            314071408,
            314071968,
            314072681,
            314074070,
            314073432
        ],
        "A": [
            314070266,
            314070800,
            314074592,
            314070792,
            314070309,
            314073560,
            314069924,
            314069578,
            314070160,
            314071820,
            314069982,
            314069845,
            314070406,
            314070963,
            314070638,
            314069585,
            314069908,
            314069724,
            314069695,
            314070813
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/141155",
    "editorial": "We transform into .Let there be occurrences of in . Since needs to be a\r\npermutation, for each number from to , if it has appeared in , it must\r\nappear in . For such a group , let contain s, and the number of elements\r\nin that have not appeared in be . The contribution is:As for the\r\noptimization, consider enumerating and . We need to quickly find how\r\nmany intervals satisfy: There are exactly s in ; For every number from\r\nto , if it appears in , its position must lie within . Let be the number\r\nof intervals satisfying these conditions for and . We enumerate each\r\ninterval , and let be the number of s in , and be the minimum number of\r\nnumbers that appeared in but whose positions do not lie in (if no such\r\nnumber exists, then ). The contribution of this interval to is that are\r\nall added by .: per test case.\r\n",
    "name": "E. Blossom",
    "statement": "You are given a permutation a of length n^{\r\ntext{ }} where some elements are missing and represented by -1.Define\r\nthe value of a permutation as the sum of the MEX^{\r\ntext{ }} of all its non-empty subsegments^{\r\ntext{ }}.Find the sum of the value of all possible valid permutations\r\nthat can be formed by filling in the missing elements of a modulo 10^9 +\r\n7.^{\r\ntext{ }} A permutation of length n is an array consisting of n distinct\r\nintegers in arbitrary order. For example, [1,2,0,4,3] is a permutation,\r\nbut [0,1,1] is not a permutation (1 appears twice in the array), and\r\n[0,2,3] is also not a permutation (n=3 but there is 3 in the array). ^{\r\ntext{ }}The minimum excluded (MEX) of a collection of integers c_1, c_2,\r\nldots, c_k is defined as the smallest non-negative integer x which does\r\nnot occur in the collection c. ^{\r\ntext{ }}A sequence a is a subsegment of a sequence b if a can be\r\nobtained from b by the deletion of several (possibly, zero or all)\r\nelements from the beginning and several (possibly, zero or all) elements\r\nfrom the end.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics",
        "dp",
        "implementation",
        "math",
        "two pointers"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\E. Blossom.json",
    "hint": [
        "Hint 1 Transform the calculation method of .",
        "Hint 2 Try to come up with an approach and then optimize it to ."
    ]
}