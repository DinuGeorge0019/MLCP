{
    "link": "https://codeforces.com//contest/932/problem/B",
    "problemId": "156994",
    "problem_idx": "B",
    "shortId": "932B",
    "contest_number": "932",
    "problem_submissions": {
        "G": [
            51774341,
            35308371,
            35309948,
            35309510,
            35328593,
            35312755,
            35340195,
            35324025,
            38386676,
            35314606
        ],
        "F": [
            35314668,
            35310572,
            35468380,
            35310269,
            35309416,
            35312292,
            35310748,
            35546358,
            35310551,
            35314451,
            35994490,
            35310830,
            35314597,
            35313005,
            35315153,
            35311414,
            35314861
        ],
        "E": [
            35305602,
            35300676,
            35303983,
            35302322,
            35304627,
            35307360,
            35305500,
            35300979,
            35304741,
            35308375,
            35305972,
            35304083,
            35308467,
            35308589,
            35308504,
            35313014,
            35308160,
            35300247
        ],
        "D": [
            35304182,
            35304652,
            35301520,
            35312731,
            35302822,
            35304942,
            35303273,
            35308561,
            35309596,
            35306303,
            35302532,
            35308788,
            35304471,
            35304933,
            35304868,
            35308529,
            35306123,
            35312012
        ],
        "C": [
            35298412,
            35298036,
            35296739,
            35298645,
            35298179,
            35298553,
            35299152,
            35297891,
            35299526,
            35299903,
            35298326,
            35305061,
            35298463,
            35300385,
            35298472,
            35299312,
            35300289,
            35313442
        ],
        "B": [
            35297094,
            35297006,
            35297939,
            35296994,
            35296930,
            35296422,
            35297855,
            35301880,
            35297864,
            35297983,
            35297247,
            35296879,
            35297467,
            35297739,
            35296808,
            35297547,
            35298510,
            35302031
        ],
        "A": [
            35295015,
            35294909,
            35298217,
            35294978,
            35294827,
            35294828,
            35295219,
            35296140,
            35296578,
            35294771,
            35294859,
            35294967,
            35294941,
            35294775,
            35295820,
            35295673,
            35300844
        ]
    },
    "name": "B. Recursive Queries",
    "statement": "Let us define two functions and on positive integer numbers. You need to\r\nprocess queries. In each query, you will be given three integers , and .\r\nYou need to print the number of integers between and inclusive, such\r\nthat .\r\n",
    "solutions": [
        "//while (clock()<=69*CLOCKS_PER_SEC)\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nconst int nax=1000*1007;\n\nint dp[nax];\n\nint sum[nax][10];\n\nint f(int v)\n{\n\tint ret=1;\n\twhile(v)\n\t{\n\t\tif (v%10)\n\t\t\tret*=(v%10);\n\t\tv/=10;\n\t}\n\treturn ret;\n}\n\nint main()\n{\n\tfor (int i=1; i<nax; i++)\n\t{\n\t\tif (i<10)\n\t\t\tdp[i]=i;\n\t\telse\n\t\t\tdp[i]=dp[f(i)];\n\t\tfor (int j=0; j<10; j++)\n\t\t\tsum[i][j]=sum[i-1][j];\n\t\tsum[i][dp[i]]++;\n\t}\n\tint q;\n\tscanf(\"%d\", &q);\n\twhile(q--)\n\t{\n\t\tint a, b, c;\n\t\tscanf(\"%d%d%d\", &a, &b, &c);\n\t\tprintf(\"%d\\n\", sum[b][c]-sum[a-1][c]);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "dfs and similar"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\B. Recursive Queries.json",
    "editorial_link": "https://codeforces.com//blog/entry/57796",
    "editorial": "If we can show that for all integers , we have then we can use bottom up\r\ndp for calculating for all the integers in . And as , using partial sum\r\narrays for each possible value of , we can answer the queries in .For\r\nthe proof that for all integers , we have , let us assume an integer of\r\nlength which can be represented as where for all . We have assumed that\r\n, as even if any of the , it will neither affect nor in our proof given\r\nbelow. Given, and .As , and .So, and hence we can use bottom up dp for\r\ncalculating for all values of . Also, we can observe that the integer\r\nreduces pretty much quickly to a single digit while calculating , so we\r\ncan directly calculate for all without using dp as well.\r\n",
    "hint": []
}