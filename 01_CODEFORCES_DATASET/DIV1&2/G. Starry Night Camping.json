{
    "link": "https://codeforces.com//contest/1517/problem/G",
    "problemId": "965877",
    "problem_idx": "G",
    "shortId": "1517G",
    "contest_number": "1517",
    "problem_submissions": {
        "H": [
            114124079
        ],
        "G": [
            114025193,
            114025453,
            114036917,
            114041033,
            120816591,
            114039616,
            114040728,
            114039927,
            114032359,
            114070041,
            114035064,
            114033289,
            114027246,
            114034514,
            114039178
        ],
        "F": [
            114020736,
            114030530,
            114031555,
            114030260,
            114028344,
            114033849,
            114034020,
            114018937,
            114029544,
            114031878,
            114032269,
            114081756,
            114032270,
            114064223,
            114063627,
            114035709,
            114033913,
            114011444
        ],
        "E": [
            114008455,
            114016598,
            114020187,
            114012041,
            114018819,
            114010909,
            114015500,
            114005326,
            114018769,
            114013314,
            114020062,
            114017004,
            114020744,
            114019236,
            114016487,
            114039583,
            114022320,
            114026617,
            114029372,
            114033166
        ],
        "D": [
            113994855,
            114002285,
            113999931,
            113998145,
            114001241,
            113997280,
            114006046,
            113995707,
            114045880,
            114001753,
            113998952,
            113996449,
            114003893,
            113997337,
            114003553,
            113997528,
            114023776,
            114004856,
            114002724,
            114015602
        ],
        "C": [
            113990530,
            113993399,
            113992809,
            113995080,
            113997177,
            113991979,
            113994818,
            113991013,
            113995164,
            113995388,
            114003260,
            113990649,
            113998059,
            113993447,
            113997532,
            113994037,
            113993505,
            113998635,
            113997064,
            114020381
        ],
        "B": [
            113987399,
            113989246,
            113990561,
            113990842,
            113994206,
            113989103,
            113990699,
            113988130,
            113992221,
            113990490,
            113991945,
            113987962,
            113992832,
            113988946,
            113993066,
            113990201,
            113991322,
            113993920,
            113991184,
            114017898
        ],
        "A": [
            113984711,
            113984860,
            113985166,
            113986320,
            113989984,
            113984723,
            113984834,
            113984709,
            113984737,
            113984977,
            113984884,
            113984721,
            113985551,
            113984722,
            113984905,
            113985815,
            113985646,
            113989342,
            113986198,
            114012398
        ]
    },
    "name": "G. Starry Night Camping",
    "statement": "At the foot of Liyushan Mountain, n tents will be carefully arranged to\r\nprovide accommodation for those who are willing to experience the joy of\r\napproaching nature, the tranquility of the night, and the bright starry\r\nsky.The i-th tent is located at the point of (x_i, y_i) and has a weight\r\nof w_i. A tent is if and only if both x_i and y_i are even. You need to\r\nremove some tents such that for each remaining important tent (x, y),\r\nthere do not exist 3 other tents (x\u2019_1, y\u2019_1), (x\u2019_2, y\u2019_2) and (x\u2019_3,\r\ny\u2019_3) such that both conditions are true: |x\u2019_j-x|, |y\u2019_j - y|\r\nleq 1 for all j\r\nin\r\n{1, 2, 3\r\n}, and these four tents form a parallelogram (or a rectangle) and one of\r\nits sides is . Please maximize the sum of the weights of the tents that\r\nare removed. Print the maximum value.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n \nusing ll = long long;\nusing db = long double; // or double, if TL is tight\nusing str = string; // yay python!\n\nusing pi = pair<int,int>;\nusing pl = pair<ll,ll>;\nusing pd = pair<db,db>;\n\nusing vi = vector<int>;\nusing vb = vector<bool>;\nusing vl = vector<ll>;\nusing vd = vector<db>; \nusing vs = vector<str>;\nusing vpi = vector<pi>;\nusing vpl = vector<pl>; \nusing vpd = vector<pd>;\n\n#define tcT template<class T\n#define tcTU tcT, class U\n// ^ lol this makes everything look weird but I'll try it\ntcT> using V = vector<T>; \ntcT, size_t SZ> using AR = array<T,SZ>; \ntcT> using PR = pair<T,T>;\n\n// pairs\n#define mp make_pair\n#define f first\n#define s second\n\n// vectors\n// oops size(x), rbegin(x), rend(x) need C++17\n#define sz(x) int((x).size())\n#define bg(x) begin(x)\n#define all(x) bg(x), end(x)\n#define rall(x) x.rbegin(), x.rend() \n#define sor(x) sort(all(x)) \n#define rsz resize\n#define ins insert \n#define ft front()\n#define bk back()\n#define pb push_back\n#define eb emplace_back \n#define pf push_front\n#define rtn return\n\n#define lb lower_bound\n#define ub upper_bound \ntcT> int lwb(V<T>& a, const T& b) { return int(lb(all(a),b)-bg(a)); }\n\n// loops\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\n#define F0R(i,a) FOR(i,0,a)\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\n#define R0F(i,a) ROF(i,0,a)\n#define rep(a) F0R(_,a)\n#define each(a,x) for (auto& a: x)\n\nconst int MOD = 1e9+7; // 998244353;\nconst int MX = 2e5+5;\nconst ll INF = 1e18; // not too close to LLONG_MAX\nconst db PI = acos((db)-1);\nconst int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1}; // for every grid problem!!\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count()); \ntemplate<class T> using pqg = priority_queue<T,vector<T>,greater<T>>;\n\n// bitwise ops\n// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\nconstexpr int pct(int x) { return __builtin_popcount(x); } // # of bits set\nconstexpr int bits(int x) { // assert(x >= 0); // make C++11 compatible until USACO updates ...\n\treturn x == 0 ? 0 : 31-__builtin_clz(x); } // floor(log2(x)) \nconstexpr int p2(int x) { return 1<<x; }\nconstexpr int msk2(int x) { return p2(x)-1; }\n\nll cdiv(ll a, ll b) { return a/b+((a^b)>0&&a%b); } // divide a by b rounded up\nll fdiv(ll a, ll b) { return a/b-((a^b)<0&&a%b); } // divide a by b rounded down\n\ntcT> bool ckmin(T& a, const T& b) {\n\treturn b < a ? a = b, 1 : 0; } // set a = min(a,b)\ntcT> bool ckmax(T& a, const T& b) {\n\treturn a < b ? a = b, 1 : 0; }\n\ntcTU> T fstTrue(T lo, T hi, U f) {\n\thi ++; assert(lo <= hi); // assuming f is increasing\n\twhile (lo < hi) { // find first index such that f is true \n\t\tT mid = lo+(hi-lo)/2;\n\t\tf(mid) ? hi = mid : lo = mid+1; \n\t} \n\treturn lo;\n}\ntcTU> T lstTrue(T lo, T hi, U f) {\n\tlo --; assert(lo <= hi); // assuming f is decreasing\n\twhile (lo < hi) { // find first index such that f is true \n\t\tT mid = lo+(hi-lo+1)/2;\n\t\tf(mid) ? lo = mid : hi = mid-1;\n\t} \n\treturn lo;\n}\ntcT> void remDup(vector<T>& v) { // sort and remove duplicates\n\tsort(all(v)); v.erase(unique(all(v)),end(v)); }\ntcTU> void erase(T& t, const U& u) { // don't erase\n\tauto it = t.find(u); assert(it != end(t));\n\tt.erase(it); } // element that doesn't exist from (multi)set\n\n#define tcTUU tcT, class ...U\n\ninline namespace Helpers {\n\t//////////// is_iterable\n\t// https://stackoverflow.com/questions/13830158/check-if-a-variable-type-is-iterable\n\t// this gets used only when we can call begin() and end() on that type\n\ttcT, class = void> struct is_iterable : false_type {};\n\ttcT> struct is_iterable<T, void_t<decltype(begin(declval<T>())),\n\t                                  decltype(end(declval<T>()))\n\t                                 >\n\t                       > : true_type {};\n\ttcT> constexpr bool is_iterable_v = is_iterable<T>::value;\n\n\t//////////// is_readable\n\ttcT, class = void> struct is_readable : false_type {};\n\ttcT> struct is_readable<T,\n\t        typename std::enable_if_t<\n\t            is_same_v<decltype(cin >> declval<T&>()), istream&>\n\t        >\n\t    > : true_type {};\n\ttcT> constexpr bool is_readable_v = is_readable<T>::value;\n\n\t//////////// is_printable\n\t// // https://nafe.es/posts/2020-02-29-is-printable/\n\ttcT, class = void> struct is_printable : false_type {};\n\ttcT> struct is_printable<T,\n\t        typename std::enable_if_t<\n\t            is_same_v<decltype(cout << declval<T>()), ostream&>\n\t        >\n\t    > : true_type {};\n\ttcT> constexpr bool is_printable_v = is_printable<T>::value;\n}\n\ninline namespace Input {\n\ttcT> constexpr bool needs_input_v = !is_readable_v<T> && is_iterable_v<T>;\n\ttcTUU> void re(T& t, U&... u);\n\ttcTU> void re(pair<T,U>& p); // pairs\n\n\t// re: read\n\ttcT> typename enable_if<is_readable_v<T>,void>::type re(T& x) { cin >> x; } // default\n\ttcT> void re(complex<T>& c) { T a,b; re(a,b); c = {a,b}; } // complex\n\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i); // ex. vectors, arrays\n\ttcTU> void re(pair<T,U>& p) { re(p.f,p.s); }\n\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i) {\n\t\teach(x,i) re(x); }\n\ttcTUU> void re(T& t, U&... u) { re(t); re(u...); } // read multiple\n\n\t// rv: resize and read vectors\n\tvoid rv(size_t) {}\n\ttcTUU> void rv(size_t N, V<T>& t, U&... u);\n\ttemplate<class...U> void rv(size_t, size_t N2, U&... u);\n\ttcTUU> void rv(size_t N, V<T>& t, U&... u) {\n\t\tt.rsz(N); re(t);\n\t\trv(N,u...); }\n\ttemplate<class...U> void rv(size_t, size_t N2, U&... u) {\n\t\trv(N2,u...); }\n\n\t// dumb shortcuts to read in ints\n\tvoid decrement() {} // subtract one from each\n\ttcTUU> void decrement(T& t, U&... u) { --t; decrement(u...); }\n\t#define ints(...) int __VA_ARGS__; re(__VA_ARGS__);\n\t#define int1(...) ints(__VA_ARGS__); decrement(__VA_ARGS__);\n}\n\ninline namespace ToString {\n\ttcT> constexpr bool needs_output_v = !is_printable_v<T> && is_iterable_v<T>;\n\n\t// ts: string representation to print\n\ttcT> typename enable_if<is_printable_v<T>,str>::type ts(T v) {\n\t\tstringstream ss; ss << fixed << setprecision(15) << v;\n\t\treturn ss.str(); } // default\n\ttcT> str bit_vec(T t) { // bit vector to string\n\t\tstr res = \"{\"; F0R(i,sz(t)) res += ts(t[i]);\n\t\tres += \"}\"; return res; }\n\tstr ts(V<bool> v) { return bit_vec(v); }\n\ttemplate<size_t SZ> str ts(bitset<SZ> b) { return bit_vec(b); } // bit vector\n\ttcTU> str ts(pair<T,U> p); // pairs\n\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v); // vectors, arrays\n\ttcTU> str ts(pair<T,U> p) { return \"(\"+ts(p.f)+\", \"+ts(p.s)+\")\"; }\n\ttcT> typename enable_if<is_iterable_v<T>,str>::type ts_sep(T v, str sep) {\n\t\t// convert container to string w/ separator sep\n\t\tbool fst = 1; str res = \"\";\n\t\tfor (const auto& x: v) {\n\t\t\tif (!fst) res += sep;\n\t\t\tfst = 0; res += ts(x);\n\t\t}\n\t\treturn res;\n\t}\n\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v) {\n\t\treturn \"{\"+ts_sep(v,\", \")+\"}\"; }\n\n\t// for nested DS\n\ttemplate<int, class T> typename enable_if<!needs_output_v<T>,vs>::type \n\t  ts_lev(const T& v) { return {ts(v)}; }\n\ttemplate<int lev, class T> typename enable_if<needs_output_v<T>,vs>::type \n\t  ts_lev(const T& v) {\n\t\tif (lev == 0 || !sz(v)) return {ts(v)};\n\t\tvs res;\n\t\tfor (const auto& t: v) {\n\t\t\tif (sz(res)) res.bk += \",\";\n\t\t\tvs tmp = ts_lev<lev-1>(t);\n\t\t\tres.ins(end(res),all(tmp));\n\t\t}\n\t\tF0R(i,sz(res)) {\n\t\t\tstr bef = \" \"; if (i == 0) bef = \"{\";\n\t\t\tres[i] = bef+res[i];\n\t\t}\n\t\tres.bk += \"}\";\n\t\treturn res;\n\t}\n}\n\ninline namespace Output {\n\ttemplate<class T> void pr_sep(ostream& os, str, const T& t) { os << ts(t); }\n\ttemplate<class T, class... U> void pr_sep(ostream& os, str sep, const T& t, const U&... u) {\n\t\tpr_sep(os,sep,t); os << sep; pr_sep(os,sep,u...); }\n\t// print w/ no spaces\n\ttemplate<class ...T> void pr(const T&... t) { pr_sep(cout,\"\",t...); } \n\t// print w/ spaces, end with newline\n\tvoid ps() { cout << \"\\n\"; }\n\ttemplate<class ...T> void ps(const T&... t) { pr_sep(cout,\" \",t...); ps(); } \n\t// debug to cerr\n\ttemplate<class ...T> void dbg_out(const T&... t) {\n\t\tpr_sep(cerr,\" | \",t...); cerr << endl; }\n\tvoid loc_info(int line, str names) {\n\t\tcerr << \"Line(\" << line << \") -> [\" << names << \"]: \"; }\n\ttemplate<int lev, class T> void dbgl_out(const T& t) {\n\t\tcerr << \"\\n\\n\" << ts_sep(ts_lev<lev>(t),\"\\n\") << \"\\n\" << endl; }\n\t#ifdef LOCAL\n\t\t#define dbg(...) loc_info(__LINE__,#__VA_ARGS__), dbg_out(__VA_ARGS__)\n\t\t#define dbgl(lev,x) loc_info(__LINE__,#x), dbgl_out<lev>(x)\n\t#else // don't actually submit with this\n\t\t#define dbg(...) 0\n\t\t#define dbgl(lev,x) 0\n\t#endif\n}\n\ninline namespace FileIO {\n\tvoid setIn(str s)  { freopen(s.c_str(),\"r\",stdin); }\n\tvoid setOut(str s) { freopen(s.c_str(),\"w\",stdout); }\n\tvoid setIO(str s = \"\") {\n\t\tcin.tie(0)->sync_with_stdio(0); // unsync C / C++ I/O streams\n\t\t// cin.exceptions(cin.failbit);\n\t\t// throws exception when do smth illegal\n\t\t// ex. try to read letter into int\n\t\tif (sz(s)) setIn(s+\".in\"), setOut(s+\".out\"); // for old USACO\n\t}\n}\n\n/**\n * Description: Fast flow. After computing flow, edges ${u,v}$ such that \n\t* $lev[u] \\neq 0,$ $lev[v] = 0$ are part of min cut.\n\t* Use \\texttt{reset} and \\texttt{rcap} for Gomory-Hu.\n * Time: $O(N^2M)$ flow, $O(M\\sqrt N)$ bipartite matching\n * Source: GeeksForGeeks, Chilli\n \t* https://codeforces.com/contest/1416/submission/94013395\n * Verification: RMI 2017 Day 1 Fashion\n\t* https://pastebin.com/VJxTvEg1\n */\n\nstruct Dinic {\n\tusing F = ll; // flow type\n\tstruct Edge { int to, rev; F flo, cap; };\n\tint N; V<V<Edge>> adj;\n\tvoid init(int _N) { N = _N; adj.rsz(N); }\n\t/// void reset() { F0R(i,N) each(e,adj[i]) e.flo = 0; }\n\tvoid ae(int a, int b, F cap, F rcap = 0) { assert(min(cap,rcap) >= 0); \n\t\tadj[a].pb({b,sz(adj[b]),0,cap});\n\t\tadj[b].pb({a,sz(adj[a])-1,0,rcap});\n\t}\n\tvi lev, ptr;\n\tbool bfs(int s, int t) { // level = shortest distance from source\n\t\tlev = ptr = vi(N);\n\t\tlev[s] = 1; queue<int> q({s});\n\t\twhile (sz(q)) { int u = q.ft; q.pop();\n\t\t\teach(e,adj[u]) if (e.flo < e.cap && !lev[e.to])\n\t\t\t\tq.push(e.to), lev[e.to] = lev[u]+1;\n\t\t}\n\t\treturn lev[t];\n\t}\n\tF dfs(int v, int t, F flo) {\n\t\tif (v == t) return flo;\n\t\tfor (int& i = ptr[v]; i < sz(adj[v]); i++) {\n\t\t\tEdge& e = adj[v][i]; F dif = e.cap-e.flo;\n\t\t\tif (lev[e.to]!=lev[v]+1||!dif) continue;\n\t\t\tif (F df = dfs(e.to,t,min(flo,dif))) { \n\t\t\t\te.flo += df; adj[e.to][e.rev].flo -= df;\n\t\t\t\treturn df; } // saturated >=1 one edge\n\t\t}\n\t\treturn 0;\n\t}\n\tF maxFlow(int s, int t) {\n\t\tF tot = 0; while (bfs(s,t)) while (F df = \n\t\t\tdfs(s,t,numeric_limits<F>::max())) tot += df;\n\t\treturn tot;\n\t}\n};\n\nDinic D;\n\nint N;\nmap<pi,int> m;\n\nvoid ae(pi a, pi b) {\n\tif (m.count(a) && m.count(b)) {\n\t\tD.ae(2*m[a]+1,2*m[b],INF);\n\t}\n}\n\nint main() {\n\tsetIO(); re(N);\n\tD.init(2*N+2);\n\tV<pair<pi,int>> tents(N); re(tents);\n\tll sum_w = 0;\n\tF0R(i,N) {\n\t\tpi p = tents[i].f;\n\t\tm[p] = i;\n\t\tD.ae(2*i,2*i+1,tents[i].s);\n\t\tsum_w += tents[i].s;\n\t}\n\tF0R(i,N) {\n\t\tpi p = tents[i].f;\n\t\tif (p.f&1) {\n\t\t\tif (p.s&1) { // oo -> eo\n\t\t\t\tD.ae(2*N,2*i,INF);\n\t\t\t\tae(p,{p.f-1,p.s});\n\t\t\t\tae(p,{p.f+1,p.s});\n\t\t\t} else {\n\t\t\t\tD.ae(2*i+1,2*N+1,INF);\n\t\t\t}\n\t\t} else {\n\t\t\tif (p.s&1) { // eo -> ee\n\t\t\t\tae(p,{p.f,p.s-1});\n\t\t\t\tae(p,{p.f,p.s+1});\n\t\t\t} else {\n\t\t\t\tae(p,{p.f-1,p.s});\n\t\t\t\tae(p,{p.f+1,p.s});\n\t\t\t}\n\t\t}\n\t}\n\t// dbg(\"CALC FLOW\");\n\tps(sum_w-D.maxFlow(2*N,2*N+1));\n\t// you should actually read the stuff at the bottom\n}\n\n/* stuff you should look for\n\t* int overflow, array bounds\n\t* special cases (n=1?)\n\t* do smth instead of nothing and stay organized\n\t* WRITE STUFF DOWN\n\t* DON'T GET STUCK ON ONE APPROACH\n*/\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "flows",
        "graphs"
    ],
    "dificulty": "3300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\G. Starry Night Camping.json",
    "editorial_link": "https://codeforces.com//blog/entry/89968",
    "editorial": "We can label all the integer points in the plane as\r\nfollow:...2323......1010......2323......1010...Where all the good points\r\nare labeled with 1. If we draw an edge between every adjacent points,\r\nall the forbidden patterns form all paths of length 4 with label\r\n0-1-2-3. So we transform the problem to another problem: delete some\r\npoints with smallest sum of value such that the remaining points doesn\u00e2\u0080\u0099t\r\ncontain a 0-1-2-3 path. It can be solved with a simple min-cut\r\nalgorithm.\r\n"
}