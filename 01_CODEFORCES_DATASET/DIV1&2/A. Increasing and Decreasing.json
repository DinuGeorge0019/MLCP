{
    "link": "https://codeforces.com//contest/1864/problem/A",
    "problemId": "2181264",
    "problem_idx": "A",
    "shortId": "1864A",
    "contest_number": "1864",
    "problem_submissions": {
        "I": [
            220596748,
            220625703,
            220625365,
            220625093
        ],
        "H": [
            220568821,
            220567695,
            220569504,
            220765807,
            220735033,
            220733694,
            220582422,
            220590968,
            220584872,
            220585832,
            220586273,
            220588653,
            220869529,
            220592706,
            220587781,
            220596085,
            222139412,
            220596294
        ],
        "G": [
            220562227,
            220575493,
            220588511,
            220576272,
            220574639,
            220576772,
            220595506,
            220568659,
            220611309,
            221223033,
            220575904,
            220585515,
            220590419,
            220591092,
            220590354,
            220590686
        ],
        "F": [
            220551620,
            220555802,
            220557675,
            220718976,
            220558576,
            220553574,
            220558951,
            220567707,
            220555900,
            220612295,
            220564492,
            220564273,
            220565836,
            220560759,
            220571802,
            220564441,
            220571627,
            220556155,
            220556855,
            220560337,
            220568919,
            220567748
        ],
        "E": [
            220545674,
            220547229,
            220549551,
            220553761,
            220544098,
            220550014,
            220550285,
            220550294,
            220555536,
            220557391,
            220559164,
            220553118,
            220556990,
            220555427,
            220553548,
            220549618,
            220563369,
            220552727,
            220558630,
            220553863
        ],
        "D": [
            220537006,
            220537255,
            220535722,
            220536129,
            220534069,
            220542850,
            220539341,
            220538198,
            220541287,
            220542463,
            220545447,
            220548373,
            220544205,
            220540271,
            220536187,
            220541552,
            220541368,
            220545083,
            220544975
        ],
        "C": [
            220533606,
            220528455,
            220528101,
            220528155,
            220527489,
            220537748,
            220525134,
            220530359,
            220532079,
            220533694,
            220541070,
            220542060,
            220535618,
            220533106,
            220530771,
            220535184,
            220536493,
            220534865,
            220537384
        ],
        "B": [
            220524699,
            220524727,
            220525716,
            220524082,
            220524572,
            220524039,
            220522756,
            220522640,
            220528173,
            220525137,
            220528062,
            220531552,
            220524275,
            220526451,
            220524531,
            220529349,
            220526226,
            220525961,
            220525118
        ],
        "A": [
            220521618,
            220521580,
            220521747,
            220521485,
            220521753,
            220521570,
            220521442,
            220521465,
            220524365,
            220521707,
            220524695,
            220522808,
            220521703,
            220522789,
            220521679,
            220521789,
            220521663,
            220522116,
            220521966
        ]
    },
    "name": "A. Increasing and Decreasing",
    "statement": "You are given three integers x, y, and n.Your task is to construct an\r\narray a consisting of n integers which satisfies the following\r\nconditions: a_1=x, a_n=y; a is increasing (i.e. a_1 < a_2 <\r\nldots < a_n); if we denote b_i=a_{i+1}-a_{i} for 1\r\nleq i\r\nleq n-1, then b is decreasing (i.e. b_1 > b_2 >\r\nldots > b_{n-1}). If there is no such array a, print a single integer\r\n-1.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC target (\"avx2\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=1000*1007;\n\nvoid nope()\n{\n\tprintf(\"-1\\n\");\n}\n\nint tab[nax];\n\nvoid test()\n{\n\tint x, y, n;\n\tscanf(\"%d%d%d\", &x, &y, &n);\n\tif (y<=x)\n\t{\n\t\tnope();\n\t\treturn;\n\t}\n\ttab[n]=y;\n\tfor (int i=n-1; i; i--)\n\t{\n\t\ttab[i]=tab[i+1]-(n-i);\n\t}\n\tif (tab[1]<x)\n\t{\n\t\tnope();\n\t\treturn;\n\t}\n\ttab[1]=x;\n\tfor (int i=1; i<=n; i++)\n\t\tprintf(\"%d \", tab[i]);\n\tprintf(\"\\n\");\n}\n\nint main()\n{\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--)\n\t\ttest();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\A. Increasing and Decreasing.json",
    "editorial_link": "https://codeforces.com//blog/entry/119772",
    "editorial": "TutorialWe use the following greedy construction:For all (), set . If ,\r\nwe\u00e2\u0080\u0099ve found a solution, otherwise there is no solution.Proof. Assume\r\nthere\u00e2\u0080\u0099s a solution which includes an index () such that . We can make\r\nfor all (), where . After several processes like this, we get a solution\r\nthe same as greedy construction gives. This leads to a contradiction.\r\n"
}