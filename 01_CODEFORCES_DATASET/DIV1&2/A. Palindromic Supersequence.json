{"link": "https://codeforces.com//contest/932/problem/A", "problemId": "156992", "problem_idx": "A", "shortId": "932A", "contest_number": "932", "problem_submissions": {"G": [51774341, 35308371, 35309948, 35309510, 35328593, 35312755, 35340195, 35324025, 38386676, 35314606], "F": [35314668, 35310572, 35468380, 35310269, 35309416, 35312292, 35310748, 35546358, 35310551, 35314451, 35994490, 35310830, 35314597, 35313005, 35315153, 35311414, 35314861], "E": [35305602, 35300676, 35303983, 35302322, 35304627, 35307360, 35305500, 35300979, 35304741, 35308375, 35305972, 35304083, 35308467, 35308589, 35308504, 35313014, 35308160, 35300247], "D": [35304182, 35304652, 35301520, 35312731, 35302822, 35304942, 35303273, 35308561, 35309596, 35306303, 35302532, 35308788, 35304471, 35304933, 35304868, 35308529, 35306123, 35312012], "C": [35298412, 35298036, 35296739, 35298645, 35298179, 35298553, 35299152, 35297891, 35299526, 35299903, 35298326, 35305061, 35298463, 35300385, 35298472, 35299312, 35300289, 35313442], "B": [35297094, 35297006, 35297939, 35296994, 35296930, 35296422, 35297855, 35301880, 35297864, 35297983, 35297247, 35296879, 35297467, 35297739, 35296808, 35297547, 35298510, 35302031], "A": [35295015, 35294909, 35298217, 35294978, 35294827, 35294828, 35295219, 35296140, 35296578, 35294771, 35294859, 35294967, 35294941, 35294775, 35295820, 35295673, 35300844]}, "name": "A. Palindromic Supersequence", "statement": "You are given a string . Find a string , where is a palindrome and is a\r\nsubsequence of .A subsequence of a string is a string that can be\r\nderived from it by deleting some (not necessarily consecutive)\r\ncharacters without changing the order of the remaining characters. For\r\nexample, \"\" is a subsequence of \"\".A palindrome is a string that reads\r\nthe same forward or backward.The length of string should be at most . It\r\nis guaranteed that there always exists such string.You do not need to\r\nfind the shortest answer, the only restriction is that the length of\r\nstring should not exceed .\r\n", "solutions": ["//while (clock()<=69*CLOCKS_PER_SEC)\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nint main()\n{\n\tstring s;\n\tcin >> s;\n\tstring p=s;\n\treverse(p.begin(), p.end());\n\tcout << s << p << endl;\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms"], "dificulty": "800", "interactive": false}