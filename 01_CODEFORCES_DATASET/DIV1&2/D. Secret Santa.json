{"link": "https://codeforces.com//contest/1530/problem/D", "problemId": "1049171", "problem_idx": "D", "shortId": "1530D", "contest_number": "1530", "problem_submissions": {"H": [122851665, 122838743, 122844195, 122849012, 122871696, 122848567, 122889728], "G": [122840209, 122852256, 122900209, 122846129, 122844934, 122847648, 122853646, 122874899, 122880351, 122921209], "F": [122810446, 122819713, 122812617, 122825773, 122868869, 122809297, 122821188, 122827035, 122824965, 122821818, 122829815, 122826847, 122822005, 122826789, 122826175, 122826918, 122836373, 122830797, 122814894, 122838442, 122834199], "E": [122803663, 122805810, 122805166, 122812311, 122817063, 122814296, 122807127, 122808379, 122800583, 122808253, 122808203, 122811232, 122807495, 122807208, 122811521, 122828022, 122805125, 122810921], "D": [122791676, 122796247, 122793005, 122795921, 122795213, 122793368, 122796651, 122796980, 122803859, 122791210, 122799331, 122796501, 122797048, 122796533, 122791355, 122798720, 122801973, 122792843, 122800740], "C": [122785861, 122787673, 122786660, 122785034, 122784856, 122787839, 122786985, 122784250, 122795439, 122782668, 122786465, 122789088, 122786999, 122788656, 122784366, 122787966, 122789017, 122785054, 122790340], "B": [122781549, 122782427, 122782526, 122782097, 122782078, 122780831, 122781690, 122789087, 122786285, 122785455, 122781801, 122781479, 122782615, 122783296, 122794583, 122783767, 122783971, 122780469, 122782275], "A": [122775440, 122775417, 122775273, 122775738, 122775580, 122775190, 122775752, 122790605, 122781313, 122775806, 122775746, 122775311, 122776001, 122775468, 122776055, 122775938, 122777214, 122775025, 122775038]}, "name": "D. Secret Santa", "statement": "Every December, VK traditionally holds an event for its employees named\r\n\"Secret Santa\". Here\u2019s how it happens.n employees numbered from 1 to n\r\ntake part in the event. Each employee i is assigned a different employee\r\nb_i, to which employee i has to make a new year gift. Each employee is\r\nassigned to exactly one other employee, and nobody is assigned to\r\nthemselves (but two employees may be assigned to each other). Formally,\r\nall b_i must be distinct integers between 1 and n, and for any i, b_i\r\nne i must hold.The assignment is usually generated randomly. This year,\r\nas an experiment, all event participants have been asked who they wish\r\nto make a gift to. Each employee i has said that they wish to make a\r\ngift to employee a_i.Find a valid assignment b that maximizes the number\r\nof fulfilled wishes of the employees.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    while (t--) {\n        int n;\n        std::cin >> n;\n        \n        int ans = 0;\n        std::vector<int> a(n), b(n, -1), c(n, -1);\n        for (int i = 0; i < n; i++) {\n            std::cin >> a[i];\n            a[i]--;\n            if (c[a[i]] < 0) {\n                b[i] = a[i];\n                c[a[i]] = i;\n                ans++;\n            }\n        }\n        \n        std::vector<int> u, v;\n        for (int i = 0; i < n; i++) {\n            if (c[i] >= 0) {\n                continue;\n            }\n            int j = i;\n            while (b[j] >= 0) {\n                j = b[j];\n            }\n            u.push_back(i);\n            v.push_back(j);\n        }\n        \n        if (!u.empty()) {\n            if (u.size() > 1 || u[0] != v[0]) {\n                for (int i = 0; i < int(u.size()); i++) {\n                    b[v[i]] = u[(i + 1) % u.size()];\n                }\n            } else {\n                int x = u[0];\n                int y = a[x];\n                b[x] = y;\n                b[c[y]] = x;\n            }\n        }\n        \n        std::cout << ans << \"\\n\";\n        for (int i = 0; i < n; i++) {\n            std::cout << b[i] + 1 << \" \\n\"[i == n - 1];\n        }\n    }\n    \n    return 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "flows", "graphs", "greedy", "math"], "dificulty": "1600", "interactive": false}