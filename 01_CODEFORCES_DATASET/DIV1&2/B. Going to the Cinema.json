{
    "link": "https://codeforces.com//contest/1782/problem/B",
    "problemId": "1738308",
    "problem_idx": "B",
    "shortId": "1782B",
    "contest_number": "1782",
    "problem_submissions": {
        "G": [
            189352903,
            189354160,
            189342529,
            189347964,
            189346429,
            189415258,
            189347317,
            189738607,
            189347232,
            189347696,
            189403021,
            189438204,
            189354810,
            189338967,
            189344949
        ],
        "H1": [
            189341567,
            189339761,
            189349634,
            189355935,
            189355012,
            189341367,
            189348685,
            189366896,
            189384259,
            189345985,
            189353203,
            189354256,
            189356712
        ],
        "F": [
            189325657,
            189363621,
            189331442,
            189327188,
            189334558,
            189331825,
            189332228,
            189332897,
            189335481,
            189328585,
            189328764,
            189334100,
            189338796,
            189342861,
            189333278,
            189345646,
            189348301,
            189336716,
            189329952,
            189336813
        ],
        "E": [
            189322203,
            189324476,
            189336013,
            189324984,
            189327367,
            189324941,
            189325259,
            189324742,
            189325043,
            189324750,
            189330839,
            189330033,
            189340117,
            189340110,
            189356727,
            189364874,
            189338107,
            189329882
        ],
        "D": [
            189315553,
            189316553,
            189320757,
            189315522,
            189321240,
            189315774,
            189315356,
            189317449,
            189316444,
            189318717,
            189318855,
            189319485,
            189321217,
            189322258,
            189322561,
            189316855,
            189317394,
            189318806,
            189319611
        ],
        "C": [
            189312571,
            189313515,
            189317007,
            189313044,
            189315685,
            189312570,
            189312443,
            189313938,
            189314521,
            189313780,
            189316398,
            189315035,
            189318312,
            189317410,
            189321818,
            189314789,
            189315093,
            189314367
        ],
        "B": [
            189309405,
            189309603,
            189311019,
            189308821,
            189310918,
            189309246,
            189308942,
            189310194,
            189308126,
            189309056,
            189311263,
            189310085,
            189312839,
            189309172,
            189329674,
            189309853,
            189310568,
            189309470
        ],
        "A": [
            189307515,
            189306919,
            189307198,
            189307124,
            189307391,
            189307301,
            189307111,
            189307534,
            189306943,
            189307353,
            189307056,
            189307424,
            189308244,
            189319051,
            189308061,
            189307499,
            189307060,
            189307053
        ],
        "H2": [
            189361277,
            189352155,
            189886586,
            189749780,
            189366917,
            189362146
        ]
    },
    "name": "B. Going to the Cinema",
    "statement": "A company of n people is planning a visit to the cinema. Every person\r\ncan either go to the cinema or not. That depends on how many other\r\npeople will go. Specifically, every person i said: \"I want to go to the\r\ncinema if and only if at least a_i other people will go, \". That means\r\nthat person i will become sad if: they go to the cinema, and strictly\r\nless than a_i other people go; or they don’t go to the cinema, and at\r\nleast a_i other people go. In how many ways can a set of people going to\r\nthe cinema be chosen so that nobody becomes sad?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define L(i, j, k) for(int i = (j); i <= (k); ++i)\n#define R(i, j, k) for(int i = (j); i >= (k); --i)\n#define ll long long\n#define sz(a) ((int) (a).size())\n#define vi vector < int > \n#define me(a, x) memset(a, x, sizeof(a))\n#define ull unsigned long long\n#define ld __float128\nusing namespace std;\nconst int N = 1e6 + 7;\nint n, a[N];\nvoid Main() {\n\tcin >> n;\n\tL(i, 1, n) \n\t\tcin >> a[i];\n\tsort(a + 1, a + n + 1);\n\tint ns = 0;\n\tL(i, 0, n) {\n\t\tint ok = 1;\n\t\tint cnt = i - 1;\n\t\tif(i) ok &= a[i] <= cnt;\n\t\tif(i < n) ok &= a[i + 1] > cnt + 1;\n\t\tns += ok;\n\t}\n\tcout << ns << '\\n';\n}\nint main() {\n\tios :: sync_with_stdio(false);\n\tcin.tie(0); cout.tie(0);\n\tint t;\n\tcin >> t;\n\twhile(t--) Main();\n\treturn 0;\n} "
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "sortings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\B. Going to the Cinema.json",
    "editorial_link": "https://codeforces.com//blog/entry/111783",
    "editorial": "Letâs fix the number of people going to the cinema and try to choose a\r\nset of this exact size. What happens to people with different ? If ,\r\nperson definitely wants to go. If , person definitely does not want to\r\ngo. If , there is actually no good outcome for person . If person goes\r\nto the cinema, there are only people going, so person will be sad (since\r\n). If person does not go, there are people going, so person will be sad\r\ntoo (since ). Thus, for a set of size to exist, there must be no people\r\nwith , and the number of people with must be exactly . We can easily\r\ncheck these conditions if we use an auxiliary array such that is equal\r\nto the number of people with .:Notice that if a set of people can go to\r\nthe cinema, it must always be a set of people with the smallest . Thus,\r\nwe can start with sorting the array in non-decreasing order.Then, for\r\neach length of a prefix of this array, we can check whether the first\r\nelements are all smaller than , and the remaining elements are all\r\ngreater than .However, since the array is sorted, it is enough to check\r\nthat the -th element is smaller than , and the -th element is greater\r\nthan .\r\n",
    "hint": []
}