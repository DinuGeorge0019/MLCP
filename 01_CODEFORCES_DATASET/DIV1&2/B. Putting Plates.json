{"link": "https://codeforces.com//contest/1530/problem/B", "problemId": "1049169", "problem_idx": "B", "shortId": "1530B", "contest_number": "1530", "problem_submissions": {"H": [122851665, 122838743, 122844195, 122849012, 122871696, 122848567, 122889728], "G": [122840209, 122852256, 122900209, 122846129, 122844934, 122847648, 122853646, 122874899, 122880351, 122921209], "F": [122810446, 122819713, 122812617, 122825773, 122868869, 122809297, 122821188, 122827035, 122824965, 122821818, 122829815, 122826847, 122822005, 122826789, 122826175, 122826918, 122836373, 122830797, 122814894, 122838442, 122834199], "E": [122803663, 122805810, 122805166, 122812311, 122817063, 122814296, 122807127, 122808379, 122800583, 122808253, 122808203, 122811232, 122807495, 122807208, 122811521, 122828022, 122805125, 122810921], "D": [122791676, 122796247, 122793005, 122795921, 122795213, 122793368, 122796651, 122796980, 122803859, 122791210, 122799331, 122796501, 122797048, 122796533, 122791355, 122798720, 122801973, 122792843, 122800740], "C": [122785861, 122787673, 122786660, 122785034, 122784856, 122787839, 122786985, 122784250, 122795439, 122782668, 122786465, 122789088, 122786999, 122788656, 122784366, 122787966, 122789017, 122785054, 122790340], "B": [122781549, 122782427, 122782526, 122782097, 122782078, 122780831, 122781690, 122789087, 122786285, 122785455, 122781801, 122781479, 122782615, 122783296, 122794583, 122783767, 122783971, 122780469, 122782275], "A": [122775440, 122775417, 122775273, 122775738, 122775580, 122775190, 122775752, 122790605, 122781313, 122775806, 122775746, 122775311, 122776001, 122775468, 122776055, 122775938, 122777214, 122775025, 122775038]}, "name": "B. Putting Plates", "statement": "To celebrate your birthday you have prepared a festive table! Now you\r\nwant to seat as many guests as possible.The table can be represented as\r\na rectangle with height h and width w, divided into h\r\ntimes w cells. Let (i, j) denote the cell in the i-th row and the j-th\r\ncolumn of the rectangle (1\r\nle i\r\nle h; 1\r\nle j\r\nle w).Into each cell of the table you can either put a plate or keep it\r\nempty.As each guest has to be seated next to their plate, you can only\r\nput plates on the edge of the table into the first or the last row of\r\nthe rectangle, or into the first or the last column. Formally, for each\r\ncell (i, j) you put a plate into, at least one of the following\r\nconditions must be satisfied: i = 1, i = h, j = 1, j = w.To make the\r\nguests comfortable, no two plates must be put into cells that have a\r\ncommon side or corner. In other words, if cell (i, j) contains a plate,\r\nyou can\u2019t put plates into cells (i - 1, j), (i, j - 1), (i + 1, j), (i,\r\nj + 1), (i - 1, j - 1), (i - 1, j + 1), (i + 1, j - 1), (i + 1, j +\r\n1).Put as many plates on the table as possible without violating the\r\nrules above.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    while (t--) {\n        int n, m;\n        std::cin >> n >> m;\n        \n        std::vector<std::string> s(n, std::string(m, '0'));\n        for (int i = 0; i < m; i += 2) {\n            s[0][i] = '1';\n        }\n        for (int i = 1; i < n; i++) {\n            if (s[i - 1][m - 1] != '1' && s[i - 1][m - 2] != '1') {\n                s[i][m - 1] = '1';\n            }\n        }\n        for (int i = m - 2; i >= 0; i--) {\n            if (s[n - 1][i + 1] != '1' && s[n - 2][i + 1] != '1') {\n                s[n - 1][i] = '1';\n            }\n        }\n        for (int i = n - 2; i > 1; i--) {\n            if (s[i + 1][0] != '1' && s[i + 1][1] != '1') {\n                s[i][0] = '1';\n            }\n        }\n        \n        for (int i = 0; i < n; i++) {\n            std::cout << s[i] << \"\\n\";\n        }\n    }\n    \n    return 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "implementation"], "dificulty": "800", "interactive": false}