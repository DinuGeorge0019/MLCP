{
    "link": "https://codeforces.com//contest/1804/problem/B",
    "problemId": "1824141",
    "problem_idx": "B",
    "shortId": "1804B",
    "contest_number": "1804",
    "problem_submissions": {
        "H": [
            197133699,
            197211600
        ],
        "G": [
            197106837,
            197116479,
            197124948,
            197127592,
            197122958,
            197137640,
            197134544,
            197138362
        ],
        "F": [
            197093293,
            197105349,
            197095528,
            197104786,
            197106624,
            197098643,
            197101524,
            197103930,
            197102162,
            197105107,
            197108552,
            197108666,
            197107628,
            197142671,
            197140184,
            197139967,
            197139883,
            197139641,
            197111482,
            197111626,
            197113675,
            197111909,
            197110044,
            197110987,
            197113933
        ],
        "E": [
            197089405,
            197085286,
            197090524,
            197097633,
            197097337,
            197091345,
            197092803,
            197096473,
            197096893,
            197095376,
            197096756,
            197096855,
            197096490,
            197096936,
            197101267,
            197098474,
            197101399,
            197096360,
            197103528,
            197097046
        ],
        "D": [
            197081706,
            197080440,
            197082836,
            197086161,
            197088893,
            197081349,
            197083999,
            197084952,
            197086950,
            197076993,
            197086858,
            197086874,
            197084897,
            197084889,
            197084721,
            197084970,
            197089163,
            197084662,
            197086535,
            197082927
        ],
        "C": [
            197078079,
            197076920,
            197078785,
            197081523,
            197083238,
            197076107,
            197077574,
            197078670,
            197077463,
            197082879,
            197080775,
            197081089,
            197078608,
            197079622,
            197080414,
            197078487,
            197079270,
            197080239,
            197080507,
            197079932
        ],
        "B": [
            197075523,
            197075248,
            197075383,
            197077168,
            197080868,
            197074547,
            197074457,
            197076648,
            197075635,
            197080800,
            197077487,
            197076188,
            197075795,
            197076995,
            197076635,
            197075839,
            197076655,
            197076988,
            197077650,
            197075789
        ],
        "A": [
            197073420,
            197073942,
            197073446,
            197073814,
            197078430,
            197073370,
            197073351,
            197073646,
            197073456,
            197078319,
            197074505,
            197073977,
            197073328,
            197073488,
            197073501,
            197073461,
            197073950,
            197074331,
            197075653,
            197073687
        ]
    },
    "name": "B. Vaccination",
    "statement": "Ethan runs a vaccination station to help people combat the seasonal flu.\r\nHe analyses the historical data in order to develop an optimal strategy\r\nfor vaccine usage.Consider there are n patients coming to the station on\r\na particular day. The i-th patient comes at the moment t_i. We know that\r\neach of these patients can be asked to wait for no more than w time\r\nmoments. That means the i-th patient can get vaccine at moments t_i,\r\nt_i + 1,\r\nldots, t_i + w.Vaccines come in packs, each pack consists of k doses.\r\nEach patient needs exactly one dose. Packs are stored in a special\r\nfridge. After a pack is taken out of the fridge and opened, it can no\r\nlonger be put back. The lifetime of the vaccine outside the fridge is d\r\nmoments of time. Thus, if the pack was taken out of the fridge and\r\nopened at moment x, its doses can be used to vaccinate patients at\r\nmoments x, x + 1,\r\nldots, x + d. At moment x + d + 1 all the remaining unused doses of this\r\npack are thrown away.Assume that the vaccination station has enough\r\nstaff to conduct an arbitrary number of operations at every moment of\r\ntime. What is the minimum number of vaccine packs required to vaccinate\r\nall n patients?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n, k, d, w;\n    std::cin >> n >> k >> d >> w;\n    \n    std::vector<int> t(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> t[i];\n    }\n    \n    int ans = 0;\n    for (int i = 0; i < n; ) {\n        ans += 1;\n        int j = i;\n        while (j < n && t[j] - t[i] <= d + w && j - i < k) {\n            j++;\n        }\n        i = j;\n    }\n    std::cout << ans << \"\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\B. Vaccination.json",
    "editorial_link": "https://codeforces.com//blog/entry/113830",
    "editorial": "Observation 1. There exists an optimal answer where each pack of vaccine\r\nis used for a consecutive segment of patients. Indeed, if there are\r\nthree patients a < b < c such that a and c are vaccinated using the dose\r\nfrom one pack and b is vaccinated using the dose from the other pack we\r\ncan swap the packs used for b and c and the answer will still be\r\nvalid.Observation 2. It always makes sense to ask new patients to wait\r\nas long as possible before opening a new pack.From these two\r\nobservations we derive a very easy strategy. Consider patients one by\r\none in order of non-decreasing t_i. If we consider some patient i and\r\nthere is an open pack that still valid and still has some doses\r\nremaining, use it immediately. If there is no valid open pack of\r\nvaccines and there is no one waiting, ask patient i to wait till t_i + w\r\nmoment of time. If there is no valid pack of vaccines, but there is\r\nsomeone already waiting for moment x, ask patient i to wait for moment x\r\nas well.As a courtesy to our participants the values of d and w are\r\nlimited by 10^6 to avoid a potential overflow of a signed 32-bit integer\r\ntype.\r\n",
    "hint": []
}