{
    "link": "https://codeforces.com//contest/2084/problem/G2",
    "problemId": "3311136",
    "problem_idx": "G2",
    "shortId": "2084G2",
    "contest_number": "2084",
    "problem_submissions": {
        "H": [
            314145269,
            314152641,
            314144885,
            314182408,
            314161253,
            314160492,
            314159109,
            314336819,
            315779937
        ],
        "G2": [
            314127203,
            314160979,
            314119099,
            314173756,
            314142893,
            314147799,
            314151130,
            314224010
        ],
        "G1": [
            314118414,
            314131726,
            314153985,
            314109590,
            314130088,
            314137970,
            314137514,
            314122753,
            314126112,
            314121248,
            314130892,
            314132033,
            314119541,
            314121030,
            314132824,
            314120399,
            314110237,
            314140572,
            314142526,
            314121707
        ],
        "F": [
            314111540,
            314121924,
            314125756,
            314134963,
            314116023,
            314127619,
            314126955,
            314113301,
            314113508,
            314112491,
            314118412,
            314115812,
            314130696,
            314134248,
            314124898,
            314139906,
            314148255,
            314122476,
            314118124,
            314136680
        ],
        "E": [
            314096933,
            314100998,
            314106034,
            314097464,
            314098060,
            314098397,
            314100089,
            314096655,
            314098774,
            314103821,
            314098080,
            314100694,
            314097651,
            314097020,
            314098501,
            314106285,
            314091026,
            314103056,
            314104301,
            314104189
        ],
        "D": [
            314089308,
            314084108,
            314093835,
            314087875,
            314090629,
            314088628,
            314087990,
            314086450,
            314087578,
            314093466,
            314087381,
            314087993,
            314088809,
            314087808,
            314089647,
            314085680,
            314097166,
            314093234,
            314095090,
            314092873
        ],
        "C": [
            314088884,
            314079194,
            314084706,
            314078405,
            314080677,
            314082894,
            314084690,
            314079232,
            314080138,
            314078936,
            314078924,
            314080521,
            314081145,
            314083479,
            314082189,
            314078479,
            314078402,
            314080517,
            314081011,
            314085360
        ],
        "B": [
            314071844,
            314073131,
            314077666,
            314072689,
            314074212,
            314075241,
            314071920,
            314070221,
            314072945,
            314073818,
            314072825,
            314073490,
            314072379,
            314074081,
            314073148,
            314071408,
            314071968,
            314072681,
            314074070,
            314073432
        ],
        "A": [
            314070266,
            314070800,
            314074592,
            314070792,
            314070309,
            314073560,
            314069924,
            314069578,
            314070160,
            314071820,
            314069982,
            314069845,
            314070406,
            314070963,
            314070638,
            314069585,
            314069908,
            314069724,
            314069695,
            314070813
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/141155",
    "editorial": "Please read the solution for G1 first.Now, consider the operations we\r\nneed to perform on the DP array at each step: For all , update by adding\r\n, which is a quadratic function of ; Perform the transition ; Perform\r\nthe transition . We can inductively prove that is convex downward,\r\nmeaning the difference array of is non-decreasing. Instead of\r\nmaintaining directly, consider maintaining its difference array .Then,\r\nthe operations transform into: For all , add a linear function of to ;\r\nShift one position to the right; Insert a zero into while keeping it\r\nsorted. To efficiently maintain , we use a Treap. Each node in the Treap\r\nstores the value of along with its index , so all operations can be\r\nrewritten as linear transformations of , which can be efficiently\r\nhandled using vectors and matrices.: per test case.\r\n",
    "name": "G2. Wish Upon a Satellite  Hard Version ",
    "statement": "For a non-empty sequence c of length k, define f(c) as follows: Turtle\r\nand Piggy are playing a game on a sequence. They are given the sequence\r\nc_1, c_2,\r\nldots, c_k, and Turtle goes first. Turtle and Piggy alternate in turns\r\n(so, Turtle does the first turn, Piggy does the second, Turtle does the\r\nthird, etc.). The game goes as follows: Let the current length of the\r\nsequence be m. If m = 1, the game ends. If the game does not end and\r\nit’s Turtle’s turn, then Turtle must choose an integer i such that 1\r\nle i\r\nle m - 1, set c_i to\r\nmin(c_i, c_{i + 1}), and remove c_{i + 1}. If the game does not end and\r\nit’s Piggy’s turn, then Piggy must choose an integer i such that 1\r\nle i\r\nle m - 1, set c_i to\r\nmax(c_i, c_{i + 1}), and remove c_{i + 1}. Turtle wants to the value of\r\nc_1 in the end, while Piggy wants to the value of c_1 in the end. f(c)\r\nis the value of c_1 in the end if both players play optimally. For a\r\npermutation p of length n^{\r\ntext{ }}, Turtle defines the of the permutation as\r\nsum\r\nlimits_{i = 1}^n\r\nsum\r\nlimits_{j = i}^n f([p_i, p_{i + 1},\r\nldots, p_j]) (i.e., the sum of f(c) where c is a non-empty subsegment^{\r\ntext{ }} of p).Piggy gives Turtle a permutation a of length n where some\r\nelements are missing and represented by 0.Turtle asks you to determine a\r\npermutation b of length n such that: b can be formed by filling in the\r\nmissing elements of a (i.e., for all 1\r\nle i\r\nle n, if a_i\r\nne 0, then b_i = a_i). The beauty of the permutation b is . For\r\nconvenience, you only need to find the maximum beauty of such\r\npermutation b.^{\r\ntext{ }}A permutation of length n is an array consisting of n distinct\r\nintegers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray), and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray). ^{\r\ntext{ }}A sequence a is a subsegment of a sequence b if a can be\r\nobtained from b by the deletion of several (possibly, zero or all)\r\nelements from the beginning and several (possibly, zero or all) elements\r\nfrom the end.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\G2. Wish Upon a Satellite  Hard Version .json",
    "hint": [
        "Hint 1 Optimize the DP in G1."
    ]
}