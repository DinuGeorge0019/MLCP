{
    "link": "https://codeforces.com//contest/1810/problem/D",
    "problemId": "1858189",
    "problem_idx": "D",
    "shortId": "1810D",
    "contest_number": "1810",
    "problem_submissions": {
        "H": [
            200016390,
            200313241,
            200015282,
            200812601,
            200812580
        ],
        "G": [
            199990963,
            200002014,
            199996533,
            200001110,
            200003038,
            200004181,
            200005432,
            199993820,
            200004120,
            200568360,
            200010476,
            200003987,
            200009790,
            200084069,
            200013246,
            200017198,
            200016482,
            200017082
        ],
        "F": [
            199985968,
            199984766,
            199989455,
            199989236,
            199990364,
            199996618,
            199996912,
            199994977,
            200012837,
            199994874,
            200568272,
            200001624,
            200000551,
            200004906,
            200000508,
            200003276,
            200003731,
            200007640,
            199989234,
            200033060,
            200032756,
            200032417,
            199995728
        ],
        "E": [
            199973604,
            199973630,
            199978803,
            199976534,
            199977412,
            199980989,
            199981737,
            199978795,
            199980030,
            199987523,
            200568220,
            199981333,
            199992052,
            199984164,
            199985692,
            199981426,
            199983733,
            199981446,
            199972392,
            199985691
        ],
        "D": [
            199968387,
            199968634,
            199971474,
            199971965,
            199971391,
            199974445,
            199974261,
            199971649,
            199972646,
            199975130,
            200568168,
            199974978,
            199975450,
            199972122,
            199977461,
            199974856,
            199972685,
            199972896,
            199981843,
            199971530
        ],
        "C": [
            199963369,
            199964848,
            199966060,
            199965953,
            199966410,
            199967396,
            199960693,
            199966704,
            199968525,
            199967275,
            200567509,
            199968793,
            199967659,
            199965932,
            199965761,
            199966489,
            199966901,
            199965471,
            199965927,
            199965128
        ],
        "B": [
            199960187,
            199959404,
            199963381,
            199961597,
            199960246,
            199963356,
            199965608,
            199963400,
            199964087,
            199961201,
            200567461,
            199963792,
            199967959,
            199962648,
            199961478,
            199962690,
            199964055,
            199962786,
            199961957,
            199961076
        ],
        "A": [
            199957585,
            199957600,
            199957721,
            199957828,
            199957624,
            199957823,
            199967044,
            199957994,
            199959433,
            199957593,
            200567421,
            199957914,
            199957630,
            199957622,
            199957736,
            199957568,
            199959457,
            199957708,
            199957575,
            199957879
        ]
    },
    "name": "D. Climbing the Tree",
    "statement": "The snails are climbing a tree. The tree height is h meters, and snails\r\nstart at position 0.Each snail has two attributes a and b (a > b).\r\nStarting from the 1-st day, one snail climbs the tree like this: during\r\nthe daylight hours of the day, he climbs up a meters; during the night,\r\nthe snail rests, and he slides down b meters. If on the n-th day, the\r\nsnail reaches position h for the first time (that is, the top of the\r\ntree), he will finish climbing, and we say that the snail spends n days\r\nclimbing the tree. Note that on the last day of climbing, the snail\r\ndoesn’t necessarily climb up a meters, in case his distance to the top\r\nis smaller than a.Unfortunately, you don’t know the exact tree height h\r\nat first, but you know that h is a positive integer. There are q events\r\nof two kinds. Event of type 1: a snail with attributes a, b comes and\r\nclaims that he spent n days climbing the tree. If this message\r\ncontradicts previously adopted information (i. e. there is no tree for\r\nwhich all previously adopted statements and this one are true), ignore\r\nit. Otherwise, adopt it. Event of type 2: a snail with attributes a, b\r\ncomes and asks you how many days he will spend if he climbs the tree.\r\nYou can only give the answer based on the information you have adopted\r\nso far. If you cannot determine the answer precisely, report that. You\r\nneed to deal with all the events in order.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int q;\n    std::cin >> q;\n    \n    i64 lo = 1, hi = 1E18;\n    \n    while (q--) {\n        int t;\n        std::cin >> t;\n        \n        if (t == 1) {\n            int a, b, n;\n            std::cin >> a >> b >> n;\n            \n            i64 x, y;\n            if (n == 1) {\n                x = 1;\n                y = a;\n            } else {\n                x = 1LL * a * (n - 1) - 1LL * b * (n - 2) + 1;\n                y = 1LL * a * n - 1LL * b * (n - 1);\n            }\n            if (x <= hi && lo <= y) {\n                lo = std::max(lo, x);\n                hi = std::min(hi, y);\n                std::cout << 1 << \" \";\n            } else {\n                std::cout << 0 << \" \";\n            }\n        } else {\n            int a, b;\n            std::cin >> a >> b;\n            \n            i64 t1 = lo <= a ? 1LL : (lo - b + a - b - 1) / (a - b);\n            i64 t2 = hi <= a ? 1LL : (hi - b + a - b - 1) / (a - b);\n            \n            if (t1 == t2) {\n                std::cout << t1 << \" \";\n            } else {\n                std::cout << -1 << \" \";\n            }\n        }\n    }\n    std::cout << \"\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\D. Climbing the Tree.json",
    "editorial_link": "https://codeforces.com//blog/entry/114521",
    "editorial": "TutorialThe main idea is to that for each , the possible is a interval .\r\nWe will show how to calculate that.In the first days, the snail will\r\nclimb meters. And in the daytime of the -th day, the snail will climb\r\nmeters. So after days, the snail climbs at most meters, which means .\r\nAlso, the snail can not reach before days, which means . So . is a\r\nspecial case, where .Now after each operation , we can maintain a\r\npossible interval . When a snail comes, we let the new be , where is the\r\npossible interval for the new snail. If the new interval is empty, we\r\nignore this information, otherwise adopt it.Now letâs focus on another\r\nproblem: for a fixed , how to calculate the number of days the snail\r\nneeds to climb? We can solve the equation , and get , which means equals\r\nto . Still, special judge for , where in this case.Then, for each query\r\nof type , we just calculate the number of days we need for and . If they\r\nare the same, output that number. Otherwise output .\r\n",
    "hint": []
}