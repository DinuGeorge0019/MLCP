{
    "link": "https://codeforces.com//contest/1060/problem/A",
    "problemId": "230446",
    "problem_idx": "A",
    "shortId": "1060A",
    "contest_number": "1060",
    "problem_submissions": {
        "H": [
            43777582,
            43775787,
            43778301,
            43775359,
            43805399,
            43782088,
            43777602,
            44116240,
            43850241,
            43778906,
            43778773
        ],
        "F": [
            43769322,
            43774726,
            43772403,
            43778102,
            43769241,
            43772326,
            43773423,
            43775493,
            43777323,
            43776810,
            44345662,
            43998198,
            43776461,
            43777805,
            43885359,
            43777579,
            43776355,
            43779796,
            43779608,
            43780204
        ],
        "E": [
            43762417,
            43764663,
            43763746,
            43764167,
            43763212,
            43766061,
            43765524,
            43768205,
            43766236,
            43763603,
            43766034,
            43766754,
            43768368,
            43766310,
            43767829,
            43764919,
            43769766,
            43765300,
            43766971,
            43767710
        ],
        "B": [
            43761076,
            43759115,
            43759168,
            43759290,
            43758265,
            43759025,
            43759632,
            43759678,
            43759571,
            43759528,
            43758792,
            43759203,
            43760228,
            43760411,
            43761202,
            43772055,
            43761410,
            43759136,
            43761174,
            43759666
        ],
        "C": [
            43760028,
            43761053,
            43760979,
            43760607,
            43760834,
            43761267,
            43761559,
            43762200,
            43761558,
            43761781,
            43761097,
            43763023,
            43762854,
            43762864,
            43763097,
            43761814,
            43765269,
            43760939,
            43763385,
            43762549
        ],
        "D": [
            43758517,
            43762752,
            43762719,
            43762340,
            43759631,
            43763257,
            43762507,
            43764164,
            43763131,
            43760435,
            43762978,
            43764580,
            43764519,
            43765425,
            43764660,
            43762881,
            43766760,
            43767791,
            43764938,
            43764650
        ],
        "A": [
            43757554,
            43758213,
            43757544,
            43758262,
            43757552,
            43757711,
            43757958,
            43758105,
            43757983,
            43757586,
            43757752,
            43757708,
            43758583,
            43757806,
            43757592,
            43757955,
            43759122,
            43757641,
            43757856,
            43757849
        ],
        "G": [
            44020164,
            44543288
        ]
    },
    "name": "A. Phone Numbers",
    "statement": "Let’s call a string if it has length 11 and fits the pattern \"\", where\r\neach \"\" is replaced by a digit.For example, \"\" and \"\" are phone numbers,\r\nwhile \"\" and \"\" are not.You have n cards with digits, and you want to\r\nuse them to make as many phone numbers as possible. Each card must be\r\nused in at most one phone number, and you don’t have to use all cards.\r\nThe phone numbers do not necessarily have to be distinct.\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <map>\n#include <vector>\n#include <string>\n#include <set>\n#include <cmath>\n\nusing namespace std;\ntypedef long long ll;\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(NULL);\n    int N; cin >> N;\n    string s;\n    cin >> s;\n    int M = 0;\n    for (int i = 0; i < s.length(); i++)\n        if (s[i] == '8')\n            M++;\n\n    cout << min (M, N / 11) << \"\\n\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\A. Phone Numbers.json",
    "editorial_link": "https://codeforces.com//blog/entry/113725",
    "editorial": "Let the number of \n8\n8-s given to us be \nm\nm. We can not make more than \n?\nn\n/\n11\n?\n?n/11? phone numbers, because every phone number has \n11\n11 digits, and the number of phone numbers cant be more than \nm\nm. So an upper bound on the number of phone numbers is \nmin\n?\n(\nm\n,\n?\nn\n/\n11\n?\n)\nmin(m,?n/11?).\n\nWe claim that this is indeed achievable. Indeed, we make the following two cases:\n\nm\n?\nn\n/\n11\nm?n/11: this means \nn\n?\n11\nm\n?\nn\n?\n10\nm\n?\nm\nn?11m?n?10m?m. So we have sufficient cards to assign \n10\n10 cards (without an \n8\n8 on them) to each card with an \n8\n8 on it, and this leads to \nm\nm phone numbers.\n\nm\n>\nn\n/\n11\nm>n/11: this means that we can pick \n?\nn\n/\n11\n?\n?n/11? cards with \n8\n8 on each of them, and assign \n10\n?\nn\n/\n11\n?\n10?n/11? cards out of the rest to them in order to construct \n?\nn\n/\n11\n?\n?n/11? phone numbers. This is possible since the total number of cards used is \n?\nn\n/\n11\n?\n+\n10\n?\nn\n/\n11\n?\n=\n11\n?\nn\n/\n11\n?\n?\nn\n?n/11?+10?n/11?=11?n/11??n, the last of which is true since \nn\nn is non-negative.\n\nThe time complexity is \nO\n(\nn\n)\nO(n).",
    "hint": []
}