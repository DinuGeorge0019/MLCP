{
    "link": "https://codeforces.com//contest/1863/problem/G",
    "problemId": "2186458",
    "problem_idx": "G",
    "shortId": "1863G",
    "contest_number": "1863",
    "problem_submissions": {
        "G": [
            221136551,
            221139848,
            221147121,
            221150406,
            221156272,
            221151276,
            221147870,
            221157045,
            221150654,
            221158033,
            221156995,
            221150405,
            221155989,
            221155038,
            221160627,
            221149999,
            221166719,
            221155326,
            221159641,
            221165396
        ],
        "F": [
            221121590,
            221127771,
            221128307,
            221138108,
            221130805,
            221136021,
            221136737,
            221129060,
            221140638,
            221137056,
            221128211,
            221139417,
            221137699,
            221127026,
            221139802,
            221154849,
            221135761,
            221144061,
            221150102,
            221217304,
            221142638
        ],
        "E": [
            221110018,
            221117203,
            221116712,
            221116632,
            221114627,
            221123945,
            221125852,
            221119344,
            221123994,
            221117191,
            221120648,
            221126771,
            221126517,
            221139461,
            221119939,
            221121938,
            221123387,
            221126376,
            221121543,
            221217383,
            221127296
        ],
        "D": [
            221102414,
            221109581,
            221105244,
            221107918,
            221106665,
            221103992,
            221113320,
            221110649,
            221111108,
            221103919,
            221112047,
            221112174,
            221110753,
            221112715,
            221104010,
            221113678,
            221110048,
            221113375,
            221110273,
            221109100
        ],
        "C": [
            221098267,
            221102354,
            221100311,
            221098509,
            221100896,
            221098602,
            221107809,
            221105183,
            221098239,
            221098225,
            221102929,
            221105006,
            221102283,
            221103582,
            221098969,
            221099286,
            221102760,
            221106477,
            221099714,
            221101657
        ],
        "A": [
            221096643,
            221096074,
            221096129,
            221096043,
            221095975,
            221096016,
            221096907,
            221096642,
            221101230,
            221095943,
            221096347,
            221097350,
            221096423,
            221097791,
            221095953,
            221096058,
            221096941,
            221096889,
            221096069,
            221097073
        ],
        "B": [
            221096498,
            221097225,
            221097260,
            221096607,
            221096286,
            221096471,
            221098534,
            221098779,
            221102915,
            221096280,
            221097328,
            221098778,
            221097955,
            221099465,
            221096389,
            221096664,
            221099499,
            221099302,
            221096756,
            221098284
        ],
        "I": [
            221276607,
            221276430,
            221275617,
            221825420,
            221197104
        ],
        "H": [
            221188380,
            221214363,
            221182970,
            221376731,
            221376708,
            221376397,
            221187887
        ]
    },
    "name": "G. Swaps",
    "statement": "You are given an array of integers a_1, a_2,\r\ndots, a_n (1\r\nle a_i\r\nle n). You can perform the following operation several (possibly, zero)\r\ntimes: pick an arbitrary i and perform (a_i, a_{a_i}). How many distinct\r\narrays is it possible to attain? Output the answer modulo (10^9 + 7).\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 30.08.2023 11:27:09       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\ntemplate <typename T>\nT inverse(T a, T m) {\n  T u = 0, v = 1;\n  while (a != 0) {\n    T t = m / a;\n    m -= t * a; swap(a, m);\n    u -= t * v; swap(u, v);\n  }\n  assert(m == 1);\n  return u;\n}\n\ntemplate <typename T>\nclass Modular {\n public:\n  using Type = typename decay<decltype(T::value)>::type;\n\n  constexpr Modular() : value() {}\n  template <typename U>\n  Modular(const U& x) {\n    value = normalize(x);\n  }\n\n  template <typename U>\n  static Type normalize(const U& x) {\n    Type v;\n    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);\n    else v = static_cast<Type>(x % mod());\n    if (v < 0) v += mod();\n    return v;\n  }\n\n  const Type& operator()() const { return value; }\n  template <typename U>\n  explicit operator U() const { return static_cast<U>(value); }\n  constexpr static Type mod() { return T::value; }\n\n  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }\n  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }\n  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }\n  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }\n  Modular& operator++() { return *this += 1; }\n  Modular& operator--() { return *this -= 1; }\n  Modular operator++(int) { Modular result(*this); *this += 1; return result; }\n  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }\n  Modular operator-() const { return Modular(-value); }\n\n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {\n#ifdef _WIN32\n    uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);\n    uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;\n    asm(\n      \"divl %4; \\n\\t\"\n      : \"=a\" (d), \"=d\" (m)\n      : \"d\" (xh), \"a\" (xl), \"r\" (mod())\n    );\n    value = m;\n#else\n    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));\n#endif\n    return *this;\n  }\n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, long long>::value, Modular>::type& operator*=(const Modular& rhs) {\n    long long q = static_cast<long long>(static_cast<long double>(value) * rhs.value / mod());\n    value = normalize(value * rhs.value - q * mod());\n    return *this;\n  }\n  template <typename U = T>\n  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {\n    value = normalize(value * rhs.value);\n    return *this;\n  }\n\n  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }\n\n  friend const Type& abs(const Modular& x) { return x.value; }\n\n  template <typename U>\n  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);\n\n  template <typename U>\n  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);\n\n  template <typename V, typename U>\n  friend V& operator>>(V& stream, Modular<U>& number);\n\n private:\n  Type value;\n};\n\ntemplate <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }\ntemplate <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }\ntemplate <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }\n\ntemplate <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\n\ntemplate <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }\n\ntemplate <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\n\ntemplate <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\n\ntemplate <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\n\ntemplate <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\n\ntemplate<typename T, typename U>\nModular<T> power(const Modular<T>& a, const U& b) {\n  assert(b >= 0);\n  Modular<T> x = a, res = 1;\n  U p = b;\n  while (p > 0) {\n    if (p & 1) res *= x;\n    x *= x;\n    p >>= 1;\n  }\n  return res;\n}\n\ntemplate <typename T>\nbool IsZero(const Modular<T>& number) {\n  return number() == 0;\n}\n\ntemplate <typename T>\nstring to_string(const Modular<T>& number) {\n  return to_string(number());\n}\n\n// U == std::ostream? but done this way because of fastoutput\ntemplate <typename U, typename T>\nU& operator<<(U& stream, const Modular<T>& number) {\n  return stream << number();\n}\n\n// U == std::istream? but done this way because of fastinput\ntemplate <typename U, typename T>\nU& operator>>(U& stream, Modular<T>& number) {\n  typename common_type<typename Modular<T>::Type, long long>::type x;\n  stream >> x;\n  number.value = Modular<T>::normalize(x);\n  return stream;\n}\n\n/*\nusing ModType = int;\n\nstruct VarMod { static ModType value; };\nModType VarMod::value;\nModType& md = VarMod::value;\nusing Mint = Modular<VarMod>;\n*/\n\nconstexpr int md = (int) 1e9 + 7;\nusing Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;\n\n/*vector<Mint> fact(1, 1);\nvector<Mint> inv_fact(1, 1);\n\nMint C(int n, int k) {\n  if (k < 0 || k > n) {\n    return 0;\n  }\n  while ((int) fact.size() < n + 1) {\n    fact.push_back(fact.back() * (int) fact.size());\n    inv_fact.push_back(1 / fact.back());\n  }\n  return fact[n] * inv_fact[k] * inv_fact[n - k];\n}*/\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n;\n  cin >> n;\n  vector<int> x(n);\n  vector<vector<int>> g(n);\n  for (int i = 0; i < n; i++) {\n    cin >> x[i];\n    --x[i];\n    g[x[i]].push_back(i);\n  }\n  vector<int> deg(n);\n  for (int i = 0; i < n; i++) {\n    deg[x[i]] += 1;\n  }\n  vector<bool> was(n, false);\n  vector<int> que;\n  for (int i = 0; i < n; i++) {\n    if (deg[i] == 0) {\n      que.push_back(i);\n      was[i] = true;\n    }\n  }\n  for (int b = 0; b < (int) que.size(); b++) {\n    int to = x[que[b]];\n    if (--deg[to] == 0) {\n      que.push_back(to);\n      was[to] = true;\n    }\n  }\n  fill(deg.begin(), deg.end(), 0);\n  for (int i = 0; i < n; i++) {\n    deg[x[i]] += 1;\n  }\n  auto backup = was;\n  Mint ans = 1;\n  for (int i = 0; i < n; i++) {\n    if (was[i]) {\n      continue;\n    }\n    vector<int> seq;\n    int p = i;\n    while (!was[p]) {\n      seq.push_back(p);\n      was[p] = true;\n      p = x[p];\n    }\n    int sz = (int) seq.size();\n    int sum = 0;\n    for (int j : seq) {\n      sum += deg[j];\n    }\n    for (int b = 0; b < (int) seq.size(); b++) {\n      for (int j : g[seq[b]]) {\n        if (backup[j]) {\n          seq.push_back(j);\n        }\n      }\n    }\n    Mint cur = 1;\n    for (int j = 0; j < sz; j++) {\n      cur *= deg[seq[j]] + 1;\n    }\n    cur -= sum;\n    for (int j = sz; j < (int) seq.size(); j++) {\n      cur *= deg[seq[j]] + 1;\n    }\n    ans *= cur;\n  }\n  cout << ans << '\\n';\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "graphs",
        "math"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\G. Swaps.json",
    "editorial_link": "https://codeforces.com//blog/entry/119902",
    "editorial": "Consider a directed graph with vertices, where for each vertex there is\r\nan edge . This is a functional graph, that is, every vertex has exactly\r\none edge outgoing from it. Let\u00e2\u0080\u0099s see how our operations affect the\r\ngraph.We will write to illustrate the fact that . Call the operation\r\nvertex . We can assume that we never picked such that the operation\r\ndidn\u00e2\u0080\u0099t change the permutation, that is, .We will mark some edges in the\r\ngraph as . Initially no edge is bold. When we pick vertex , one of the\r\nfollowing can happen: If no bold edges pass into , go along the bold\r\nedges until we can. Let\u00e2\u0080\u0099s say the vertex we reached is . Then mark the\r\nedge from bold. If has an incoming bold edge, do nothing. At every\r\nmoment of time, the graph corresponds to the permutation in the\r\nfollowing way: if has an incoming bold edge then , otherwise, if is the\r\nvertex we reach by going from along the bold edges, and , then . Also,\r\none can see that according to the algorithm of making edges bold no\r\nvertex ever has more than one incoming bold edge.It is clear that each\r\nvalid subset of bold edges corresponds to a unique permutation. However,\r\none can see that the same permutation can correspond to multiple\r\nsubsets. In particular, for a component of the graph, if for all\r\nvertices of the cycle in this component, then the boldness of all edges\r\noutside the cycle is uniquely determined, but for the edges of the cycle\r\nany subset of these edges that doesn\u00e2\u0080\u0099t include exactly one of them\r\ncorresponds to this permutation. To avoid this uncertainty, we say that\r\nthis permutation will correspond to the subset of bold edges where all\r\nthe edges from the cycle are bold (this is an invalid subset, because\r\nthere is no sequence of operations that would mark it bold).Now we want\r\nto calculate the number of possible subsets of bold edges. Each vertex\r\ncan have either no incoming bold edges (there is way to do this) or any\r\none of them can be bold ( ways to do this for vertex ). So the answer\r\ncould be just . However, since some of the configurations are invalid,\r\nwe need to modify the answer.In particular, consider any cycle . All\r\nexcluded subsets of edges correspond to exactly one of having either no\r\nbold edge incoming, or any edge except . Therefore, the number of ways\r\nto choose the bold edges among the ones incoming to this cycle isThus,\r\nthe final answer is\r\n"
}