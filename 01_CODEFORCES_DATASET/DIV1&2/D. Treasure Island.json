{
    "link": "https://codeforces.com//contest/1214/problem/D",
    "problemId": "403807",
    "problem_idx": "D",
    "shortId": "1214D",
    "contest_number": "1214",
    "problem_submissions": {
        "G": [
            60015427,
            60116387,
            60017546,
            60017495,
            60020107,
            60006609,
            60352777,
            60002997,
            60009463,
            60011243
        ],
        "H": [
            60007228,
            60007997,
            60003236,
            60009685,
            60010066,
            60011259,
            60011282,
            60010896,
            60009334,
            60014724,
            60008843,
            60014112,
            60047947,
            60007110,
            60062101,
            60075338
        ],
        "F": [
            59997972,
            59999955,
            60011529,
            60001435,
            59997615,
            60004519,
            60003172,
            60003385,
            60014786,
            60014588,
            60009696,
            60014299,
            60009888,
            60047758,
            60003766,
            59999966,
            60002829,
            60000810
        ],
        "E": [
            59991588,
            59992896,
            59995584,
            59992549,
            59995811,
            59995619,
            59997178,
            59995808,
            59993809,
            59992236,
            59997269,
            59997999,
            59997711,
            59993230,
            59995040,
            59995208,
            59994715,
            59993710,
            59996947,
            59988545
        ],
        "D": [
            59988102,
            59989658,
            59989675,
            59986719,
            59990868,
            59992865,
            59990765,
            59991828,
            59988538,
            59989605,
            59989462,
            59992741,
            59999498,
            59988876,
            60017942,
            59989391,
            59991386,
            59989567,
            59990626,
            60046854,
            59985851
        ],
        "C": [
            59984445,
            59985337,
            59984895,
            59983957,
            59985031,
            59985481,
            59984019,
            59986980,
            59984427,
            59984066,
            59984382,
            59987002,
            59982712,
            59984754,
            59984720,
            59985711,
            59985097,
            59984496,
            59982839,
            59983656
        ],
        "B": [
            59983717,
            59984061,
            59983687,
            59983257,
            59983195,
            59983710,
            59983075,
            59985335,
            59983154,
            59983158,
            59983522,
            59985251,
            59983191,
            59983505,
            59982763,
            59984237,
            59983907,
            59983359,
            59984573,
            59982988
        ],
        "A": [
            59982834,
            59982716,
            59982610,
            59982747,
            59982737,
            59982711,
            59982633,
            59982961,
            59982657,
            59982623,
            59982788,
            59982811,
            59983962,
            59982673,
            59985703,
            59982891,
            59983099,
            59982727,
            59985651,
            59982701
        ]
    },
    "name": "D. Treasure Island",
    "statement": "All of us love treasures, right? That\u2019s why young Vasya is heading for a\r\nTreasure Island.Treasure Island may be represented as a rectangular\r\ntable n\r\ntimes m which is surrounded by the ocean. Let us number rows of the\r\nfield with consecutive integers from 1 to n from top to bottom and\r\ncolumns with consecutive integers from 1 to m from left to right. Denote\r\nthe cell in r-th row and c-th column as (r, c). Some of the island cells\r\ncontain impassable forests, and some cells are free and passable.\r\nTreasure is hidden in cell (n, m).Vasya got off the ship in cell (1, 1).\r\nNow he wants to reach the treasure. He is hurrying up, so he can move\r\nonly from cell to the cell in next row (downwards) or next column\r\n(rightwards), i.e. from cell (x, y) he can move only to cells (x+1, y)\r\nand (x, y+1). Of course Vasya can\u2019t move through cells with impassable\r\nforests.Evil Witch is aware of Vasya\u2019s journey and she is going to\r\nprevent him from reaching the treasure. Before Vasya\u2019s first move she is\r\nable to grow using her evil magic impassable forests in previously free\r\ncells. Witch is able to grow a forest in any number of any free cells\r\nexcept cells (1, 1) where Vasya got off his ship and (n, m) where the\r\ntreasure is hidden.Help Evil Witch by finding out the minimum number of\r\ncells she has to turn into impassable forests so that Vasya is no longer\r\nable to reach the treasure.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nmt19937 mrand(chrono::high_resolution_clock::now().time_since_epoch().count());\nconst ll mod=1000000007;\nint rnd(int x) { return mrand() % x;}\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nconst int N=1010000;\nint n,m;\nll dp[N],pd[N],pp;\nchar s[N];\nbool p[N];\ntypedef pair<ll,ll> PLL;\nnamespace Factor {\n\tconst int N=1010000;\n\tll C,fac[10010],n,mut,a[1001000];\n\tint T,cnt,i,l,prime[N],p[N],psize,_cnt;\n\tll _e[100],_pr[100];\n\tvector<ll> d;\n\tinline ll mul(ll a,ll b,ll p) {\n\t\tif (p<=1000000000) return a*b%p;\n\t\telse if (p<=1000000000000ll) return (((a*(b>>20)%p)<<20)+(a*(b&((1<<20)-1))))%p;\n\t\telse {\n\t\t\tll d=(ll)floor(a*(long double)b/p+0.5);\n\t\t\tll ret=(a*b-d*p)%p;\n\t\t\tif (ret<0) ret+=p;\n\t\t\treturn ret;\n\t\t}\n\t}\n\tvoid prime_table(){\n\t\tint i,j,tot,t1;\n\t\tfor (i=1;i<=psize;i++) p[i]=i;\n\t\tfor (i=2,tot=0;i<=psize;i++){\n\t\t\tif (p[i]==i) prime[++tot]=i;\n\t\t\tfor (j=1;j<=tot && (t1=prime[j]*i)<=psize;j++){\n\t\t\t\tp[t1]=prime[j];\n\t\t\t\tif (i%prime[j]==0) break;\n\t\t\t}\n\t\t}\n\t}\n\tvoid init(int ps) {\n\t\tpsize=ps;\n\t\tprime_table();\n\t}\n\tll powl(ll a,ll n,ll p) {\n\t\tll ans=1;\n\t\tfor (;n;n>>=1) {\n\t\t\tif (n&1) ans=mul(ans,a,p);\n\t\t\ta=mul(a,a,p);\n\t\t}\n\t\treturn ans;\n\t}\n\tbool witness(ll a,ll n) {\n\t\tint t=0;\n\t\tll u=n-1;\n\t\tfor (;~u&1;u>>=1) t++;\n\t\tll x=powl(a,u,n),_x=0;\n\t\tfor (;t;t--) {\n\t\t\t_x=mul(x,x,n);\n\t\t\tif (_x==1 && x!=1 && x!=n-1) return 1;\n\t\t\tx=_x;\n\t\t}\n\t\treturn _x!=1;\n\t}\n\tbool miller(ll n) {\n\t\tif (n<2) return 0;\n\t\tif (n<=psize) return p[n]==n;\n\t\tif (~n&1) return 0;\n\t\tfor (int j=0;j<=7;j++) if (witness(rand()%(n-1)+1,n)) return 0;\n\t\treturn 1;\n\t}\n\tll gcd(ll a,ll b) {\n\t\tll ret=1;\n\t\twhile (a!=0) {\n\t\t\tif ((~a&1) && (~b&1)) ret<<=1,a>>=1,b>>=1;\n\t\t\telse if (~a&1) a>>=1; else if (~b&1) b>>=1;\n\t\t\telse {\n\t\t\t\tif (a<b) swap(a,b);\n\t\t\t\ta-=b;\n\t\t\t}\n\t\t}\n\t\treturn ret*b;\n\t}\n\tll rho(ll n) {\n\t\tfor (;;) {\n\t\t\tll X=rand()%n,Y,Z,T=1,*lY=a,*lX=lY;\n\t\t\tint tmp=20;\n\t\t\tC=rand()%10+3;\n\t\t\tX=mul(X,X,n)+C;*(lY++)=X;lX++;\n\t\t\tY=mul(X,X,n)+C;*(lY++)=Y;\n\t\t\tfor(;X!=Y;) {\n\t\t\t\tll t=X-Y+n;\n\t\t\t\tZ=mul(T,t,n);\n\t\t\t\tif(Z==0) return gcd(T,n);\n\t\t\t\ttmp--;\n\t\t\t\tif (tmp==0) {\n\t\t\t\t\ttmp=20;\n\t\t\t\t\tZ=gcd(Z,n);\n\t\t\t\t\tif (Z!=1 && Z!=n) return Z;\n\t\t\t\t}\n\t\t\t\tT=Z;\n\t\t\t\tY=*(lY++)=mul(Y,Y,n)+C;\n\t\t\t\tY=*(lY++)=mul(Y,Y,n)+C;\n\t\t\t\tX=*(lX++);\n\t\t\t}\n\t\t}\n\t}\n\tvoid _factor(ll n) {\n\t\tfor (int i=0;i<cnt;i++) {\n\t\t\tif (n%fac[i]==0) n/=fac[i],fac[cnt++]=fac[i];}\n\t\tif (n<=psize) {\n\t\t\tfor (;n!=1;n/=p[n]) fac[cnt++]=p[n];\n\t\t\treturn;\n\t\t}\n\t\tif (miller(n)) fac[cnt++]=n;\n\t\telse {\n\t\t\tll x=rho(n);\n\t\t\t_factor(x);_factor(n/x);\n\t\t}\n\t}\n\tvoid dfs(ll x,int dep) {\n\t\tif (dep==_cnt) d.pb(x);\n\t\telse {\n\t\t\tdfs(x,dep+1);\n\t\t\tfor (int i=1;i<=_e[dep];i++) dfs(x*=_pr[dep],dep+1);\n\t\t}\n\t}\n\tvoid norm() {\n\t\tsort(fac,fac+cnt);\n\t\t_cnt=0;\n\t\trep(i,0,cnt) if (i==0||fac[i]!=fac[i-1]) _pr[_cnt]=fac[i],_e[_cnt++]=1;\n\t\t\telse _e[_cnt-1]++;\n\t}\n\tvector<ll> getd() {\n\t\td.clear();\n\t\tdfs(1,0);\n\t\treturn d;\n\t}\n\tvector<ll> factor(ll n) {\n\t\tcnt=0;\n\t\t_factor(n);\n\t\tnorm();\n\t\treturn getd();\n\t}\n\tvector<PLL> factorG(ll n) {\n\t\tcnt=0;\n\t\t_factor(n);\n\t\tnorm();\n\t\tvector<PLL> d;\n\t\trep(i,0,_cnt) d.pb(mp(_pr[i],_e[i]));\n\t\treturn d;\n\t}\n\tbool is_primitive(ll a,ll p) {\n\t\tassert(miller(p));\n\t\tvector<PLL> D=factorG(p-1);\n\t\trep(i,0,SZ(D)) if (powl(a,(p-1)/D[i].fi,p)==1) return 0;\n\t\treturn 1;\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tFactor::init(100000);\n\twhile (1) {\n\t\tpp=1000000000+rnd(1000000000);\n\t\tif (Factor::miller(pp)) break;\n\t}\n\trep(i,0,n) {\n\t\tscanf(\"%s\",s);\n\t\trep(j,0,m) p[i*m+j]=s[j]=='#';\n\t}\n\tdp[0]=1;\n\trep(i,0,n) rep(j,0,m) {\n\t\tint id=i*m+j;\n\t\tif (p[id]) continue;\n\t\tif (i>0) dp[id]=(dp[id]+dp[id-m])%pp;\n\t\tif (j>0) dp[id]=(dp[id]+dp[id-1])%pp;\n\t}\n\tif (dp[n*m-1]==0) {\n\t\tputs(\"0\"); return 0;\n\t}\n\tpd[n*m-1]=1;\n\tper(i,0,n) per(j,0,m) {\n\t\tint id=i*m+j;\n\t\tif (p[id]) continue;\n\t\tif (i+1<n) pd[id]=(pd[id]+pd[id+m])%pp;\n\t\tif (j+1<m) pd[id]=(pd[id]+pd[id+1])%pp;\n\t}\n\trep(k,1,n*m-1) {\n\t\tif (p[k]) continue;\n\t\tif ((ll)dp[k]*pd[k]%pp==dp[n*m-1]) {\n\t\t\tputs(\"1\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tputs(\"2\");\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "flows",
        "hashing"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\D. Treasure Island.json",
    "editorial_link": "https://codeforces.com/blog/entry/69563",
    "editorial": "The answer is no more than two as we can block and . If there is no way\r\nfrom to , the answer is zero. The only thing to do is to distinguish and\r\n.If answer is one, there must exist such cell that each path from to\r\ngoes through that cell. Also we can notice that in each path the cell\r\ngoes on the place.Let\u00e2\u0080\u0099s run to obtain the set of cells which are\r\naccessible from and backwards to obtain the set on cells such that is\r\naccessible from them. Let\u00e2\u0080\u0099s intersect these sets and group cells by the\r\ndistance from . If some group has a single cell, that would be the cell\r\nto block and the answer is one. If each group has more than one cell,\r\nthe answer is two.\r\n"
}