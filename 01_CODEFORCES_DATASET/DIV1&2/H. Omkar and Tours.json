{"link": "https://codeforces.com//contest/1586/problem/H", "problemId": "1147388", "problem_idx": "H", "shortId": "1586H", "contest_number": "1586", "problem_submissions": {"I": [132349267, 132252923, 132320064, 132673395, 132289506, 132263256], "H": [132247560, 132253721, 134930470, 132350321, 132254025, 132660661, 132275048, 132253966, 132270155], "G": [132239647, 132244340, 132241119, 135794866, 135794713, 132234650, 132248115, 132244256, 132257761, 132255193, 132256199, 132255919, 132258648, 132257515, 132250742, 132255333, 132257553, 132255311], "F": [132231955, 132236161, 132234366, 132240633, 132243967, 132235859, 132234337, 132237395, 132239493, 132241376, 132248866, 132245654, 132241416, 132246161, 132245018, 132259456, 132244979, 132249686, 132260019, 132238761], "E": [132228491, 132224206, 132228693, 132232413, 132231532, 132229745, 132230672, 132232315, 132218494, 132235319, 132232020, 132237413, 132239524, 132237023, 132236410, 132236319, 132238669, 132240928, 132230421, 132229492], "D": [132225001, 132227375, 132224444, 132226879, 132227724, 132226231, 132226626, 132227371, 132224235, 132227654, 132224635, 132229641, 132234990, 132231067, 132230536, 132228432, 132234258, 132232998, 132241147, 132223955], "C": [132221243, 132218519, 132219460, 132219748, 132219799, 132222571, 132220819, 132219850, 132232802, 132223481, 132218757, 132219927, 132230956, 132218216, 132224263, 132222192, 132227273, 132228072, 132226595, 132220025], "B": [132214722, 132213701, 132215490, 132214516, 132214317, 132214601, 132215162, 132222197, 132229955, 132216968, 132214347, 132216468, 132226751, 132220812, 132216772, 132216742, 132216324, 132213579, 132217316, 132213929], "A": [132213139, 132213078, 132214020, 132213141, 132213243, 132213267, 132213377, 132220659, 132228179, 132218691, 132213234, 132214356, 132213033, 132224973, 132214120, 132214349, 132213337, 132213011, 132242338, 132213128]}, "name": "H. Omkar and Tours", "statement": "Omkar is hosting tours of his country, Omkarland! There are n cities in\r\nOmkarland, and, rather curiously, there are exactly n-1 bidirectional\r\nroads connecting the cities to each other. It is guaranteed that you can\r\nreach any city from any other city through the road network.Every city\r\nhas an enjoyment value e. Each road has a capacity c, denoting the\r\nmaximum number of vehicles that can be on it, and an associated toll t.\r\nHowever, the toll system in Omkarland has an interesting quirk: if a\r\nvehicle travels on multiple roads on a single journey, they pay only the\r\nhighest toll of any single road on which they traveled. (In other words,\r\nthey pay\r\nmax t over all the roads on which they traveled.) If a vehicle traverses\r\nno roads, they pay 0 toll.Omkar has decided to host q tour groups. Each\r\ntour group consists of v vehicles starting at city x. (Keep in mind that\r\na tour group with v vehicles can travel only on roads with capacity\r\ngeq v.) Being the tour organizer, Omkar wants his groups to have as much\r\nfun as they possibly can, but also must reimburse his groups for the\r\ntolls that they have to pay. Thus, for each tour group, Omkar wants to\r\nknow two things: first, what is the enjoyment value of the city y with\r\nmaximum enjoyment value that the tour group can reach from their\r\nstarting city, and second, how much per vehicle will Omkar have to pay\r\nto reimburse the entire group for their trip from x to y? (This trip\r\nfrom x to y will always be on the shortest path from x to y.)In the case\r\nthat there are multiple reachable cities with the maximum enjoyment\r\nvalue, Omkar will let his tour group choose which one they want to go\r\nto. Therefore, to prepare for all possible scenarios, he wants to know\r\nthe amount of money per vehicle that he needs to guarantee that he can\r\nreimburse the group regardless of which city they choose.\r\n", "solutions": ["#include <bits/stdc++.h>\n#define rep(i, n) for(int i = 0; i < (int)(n); i ++)\n#define rep1(i, n) for(int i = 1; i <= (int)(n); i ++)\n#define MP make_pair\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nconst int MOD = 998244353;\n\nint n, q, e[200005], a[200005], b[200005], c[200005], t[2000005];\nint perm[200005], pre[400005];\nint root(int x)\n{\n\treturn pre[x] == x ? x : pre[x] = root(pre[x]);\n}\nbool cmp0(int i, int j)\n{\n\treturn c[i] > c[j];\n}\nbool cmp1(int i, int j)\n{\n\treturn t[i] < t[j];\n}\nint w0[400005], w1[400005], par0[400005][19], par1[400005][19], dfn1[400005], dep1[400005], seq1[400005], tot;\nvector<int> T0[400005], T1[400005];\nvoid dfs1(int v)\n{\n\tseq1[tot] = v; dfn1[v] = tot ++;\n\trep(i, T1[v].size()) {\n\t\tdep1[T1[v][i]] = dep1[v] + 1; dfs1(T1[v][i]);\n\t}\n}\nint findp0(int v, int w)\n{\n\tfor(int i = 18; i >= 0; i --) if(w0[par0[v][i]] >= w) v = par0[v][i];\n\treturn v;\n}\nint lca1(int u, int v)\n{\n\tif(dep1[u] < dep1[v]) swap(u, v);\n\tfor(int i = 18; i >= 0; i --) if((dep1[u] - dep1[v]) >> i) u = par1[u][i];\n\tif(u == v) return u;\n\tfor(int i = 18; i >= 0; i --) if(par1[u][i] != par1[v][i]) {\n\t\tu = par1[u][i]; v = par1[v][i];\n\t}\n\treturn par1[u][0];\n}\n\npair<int, PII> dp[400005];\npair<int, PII> unite(pair<int, PII> A, pair<int, PII> B)\n{\n\tif(A.first > B.first) swap(A, B);\n\tif(A.first == B.first) return MP(A.first, MP(min(A.second.first, B.second.first), max(A.second.second, B.second.second)));\n\telse return B;\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &q);\n\trep1(i, n) scanf(\"%d\", &e[i]);\n\trep(i, n - 1) scanf(\"%d%d%d%d\", &a[i], &b[i], &c[i], &t[i]);\n\t\n\trep1(i, n) pre[i] = i;\n\trep(i, n - 1) perm[i] = i;\n\tsort(perm, perm + n - 1, cmp0);\n\trep(i, n - 1) {\n\t\tint ce = perm[i], u = root(a[ce]), v = root(b[ce]); w0[n + i + 1] = c[ce];\n\t\tpar0[u][0] = par0[v][0] = pre[u] = pre[v] = pre[n + i + 1] = n + i + 1;\n\t}\n\tfor(int i = 2 * n - 1; i >= 1; i --) rep1(j, 18) par0[i][j] = par0[par0[i][j - 1]][j - 1];\n\trep1(i, 2 * n - 2) T0[par0[i][0]].push_back(i);\n\t\n\trep1(i, n) pre[i] = i;\n\trep(i, n - 1) perm[i] = i;\n\tsort(perm, perm + n - 1, cmp1);\n\trep(i, n - 1) {\n\t\tint ce = perm[i], u = root(a[ce]), v = root(b[ce]); w1[n + i + 1] = t[ce];\n\t\tpar1[u][0] = par1[v][0] = pre[u] = pre[v] = pre[n + i + 1] = n + i + 1;\n\t}\n\tfor(int i = 2 * n - 1; i >= 1; i --) rep1(j, 18) par1[i][j] = par1[par1[i][j - 1]][j - 1];\n\trep1(i, 2 * n - 2) T1[par1[i][0]].push_back(i);\n\tdfs1(2 * n - 1);\n\t\n\trep1(i, 2 * n - 1) if(i <= n) dp[i] = MP(e[i], MP(dfn1[i], dfn1[i]));\n\telse dp[i] = unite(dp[T0[i][0]], dp[T0[i][1]]);\n\t\n\trep(i, q) {\n\t\tint v, w;\n\t\tscanf(\"%d%d\", &w, &v);\n\t\tw = findp0(v, w);\n\t\tprintf(\"%d %d\\n\", dp[w].first, w1[lca1(lca1(seq1[dp[w].second.first], seq1[dp[w].second.second]), v)]);\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures", "dsu", "sortings", "trees"], "dificulty": "3300", "interactive": false}