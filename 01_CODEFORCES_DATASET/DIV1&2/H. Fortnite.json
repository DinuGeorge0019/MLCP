{
    "link": "https://codeforces.com//contest/1994/problem/H",
    "problemId": "2760788",
    "problem_idx": "H",
    "shortId": "1994H",
    "contest_number": "1994",
    "problem_submissions": {
        "H": [
            271268810,
            271261236,
            271268610,
            271257398,
            271256333,
            271267520,
            271313433,
            271274176,
            271248306,
            271287210,
            271283377,
            271283359,
            271282520
        ],
        "G": [
            271229872,
            271233816,
            271238208,
            271227356,
            271235437,
            271226550,
            271234367,
            271234742,
            271238779,
            271238270,
            271225091,
            271234935,
            271238841,
            271240257,
            271243721,
            271243649,
            271233908,
            271244521,
            271244063
        ],
        "F": [
            271214789,
            271228871,
            271233459,
            271220149,
            271228791,
            271236762,
            271228615,
            271226473,
            271231018,
            271229788,
            271213472,
            271228121,
            271232218,
            271232892,
            271232972,
            271231186,
            271267486,
            271243051,
            271234735,
            271231874
        ],
        "E": [
            271208462,
            271218792,
            271225076,
            271214384,
            271214472,
            271215377,
            271220481,
            271220501,
            271217729,
            271220075,
            271230923,
            271220200,
            271221333,
            271221570,
            271219993,
            271222653,
            271267440,
            271226341,
            271222083,
            271220365
        ],
        "D": [
            271202405,
            271212139,
            271218875,
            271208005,
            271207650,
            271208685,
            271211312,
            271203391,
            271211524,
            271212286,
            271234069,
            271211646,
            271213596,
            271214194,
            271209598,
            271213200,
            271211604,
            271209945,
            271214556
        ],
        "C": [
            271199233,
            271206203,
            271213680,
            271202592,
            271203860,
            271204743,
            271205070,
            271213462,
            271205158,
            271207577,
            271204749,
            271209599,
            271203078,
            271203590,
            271209662,
            271268293,
            271268187,
            271204900,
            271203748,
            271208451
        ],
        "B": [
            271196298,
            271197883,
            271199651,
            271199362,
            271196300,
            271198662,
            271198429,
            271197282,
            271197595,
            271196709,
            271198001,
            271201728,
            271198447,
            271198638,
            271200600,
            271198424,
            271197818,
            271196402
        ],
        "A": [
            271195365,
            271195316,
            271196075,
            271196307,
            271195291,
            271195470,
            271195498,
            271195546,
            271195401,
            271195293,
            271195685,
            271195898,
            271195396,
            271195975,
            271195344,
            271195348,
            271195380,
            271195303
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131666",
    "editorial": "The first query is , it can be used to find out . The second query is ,\r\nlet\u00e2\u0080\u0099s calculate its hash without modulus, denote h_1, hash with modulus\r\ndenote a1. Suppose we get a string with hash without modulus from to ,\r\nthen if we query it, we can easily find out the modulus. Let\u00e2\u0080\u0099s find such\r\na string. To do this, let\u00e2\u0080\u0099s write in -ary number system, we get , and\r\nalso write in -ary notation. Subtract the second one from the first one\r\nwithout transfers, take the leftmost position, where we get , and put\r\nthere and in all the left , as long as the number on the left is , put\r\nin it and stand in it, when the number on the left is not , we just\r\nsubtract 1 from it. After that we translate it all back into a string.\r\nIt is claimed that this string fits, let\u00e2\u0080\u0099s prove it. Its hash without\r\nmodulus is obviously not greater than . Let\u00e2\u0080\u0099s consider digits, the one\r\nin which we made and to the left, let the number of the left digit ,\r\nthen , and we subtracted less than , less because either in that digit\r\nwas , or was somewhere to the left, so there could be no equality, by\r\nconvention, => we subtracted less than => not more than => less than m.\r\nLet\u00e2\u0080\u0099s denote what we subtracted by , then our hash is . => => , which is\r\nwhat we needed to prove.\r\n",
    "name": "H. Fortnite",
    "statement": "Timofey is writing a competition called Capture the Flag (or CTF for\r\nshort). He has one task left, which involves hacking a security system.\r\nThe entire system is based on polynomial hashes^{\r\ntext{ }}.Timofey can input a string consisting of lowercase Latin\r\nletters into the system, and the system will return its polynomial hash.\r\nTo hack the system, Timofey needs to find the polynomial hash parameters\r\n(p and m) that the system uses.Timofey doesn\u2019t have much time left, so\r\nhe will only be able to make 3 queries. Help him solve the task.^{\r\ntext{ }} The polynomial hash of a string s, consisting of lowercase\r\nLatin letters of length n, based on p and modulo m is (\r\nmathrm{ord}(s_1)\r\ncdot p ^ 0 +\r\nmathrm{ord}(s_2)\r\ncdot p ^ 1 +\r\nmathrm{ord}(s_3)\r\ncdot p ^ 2 +\r\nldots +\r\nmathrm{ord}(s_n)\r\ncdot p ^ {n - 1})\r\nbmod m. Where s_i denotes the i-th character of the string s,\r\nmathrm{ord}(\r\nmathrm{chr}) denotes the ordinal number of the character\r\nmathrm{chr} in the English alphabet, and x\r\nbmod m is the remainder of x when divided by m.\r\n",
    "solutions": [
        "/** *    author:  tourist *    created: 19.07.2024 00:24:49**/#undef _GLIBCXX_DEBUG\u00a0#include <bits/stdc++.h>\u00a0using namespace std;\u00a0#ifdef LOCAL#include \"algo/debug.h\"#else#define debug(...) 42#endif\u00a0int main() {  ios::sync_with_stdio(false);  cin.tie(0);  int tt;  cin >> tt;  long double max_r = -1;  int max_Q = -1;  int fails = 0;  // mt19937_64 rng((unsigned int) chrono::steady_clock::now().time_since_epoch().count());  for (int qq = 0; qq < tt; qq++) {    // mt19937 rng(58);    #ifdef LOCAL      int64_t real_p, real_m;      cin >> real_p >> real_m;    #endif    auto GetHash = [&](const vector<int64_t>& s, int64_t rp, int64_t rm) -> int64_t {      int64_t ret = 0;      for (int64_t i = int64_t(s.size()) - 1; i >= 0; i--) {        ret = (ret * rp + s[i]) % rm;      }      return ret;    };    auto Ask = [&](const vector<int64_t>& s) -> int64_t {      assert(1 <= s.size() && s.size() <= 50);      for (int64_t x : s) {        assert(1 <= x && x <= 26);      }      string f = \"\";      for (int64_t i = 0; i < int64_t(s.size()); i++) {        f += char(s[i] - 1 + 'a');      }      cout << \"? \" << f << endl;      #ifdef LOCAL        return GetHash(s, real_p, real_m);      #else        int64_t got;        cin >> got;        return got;      #endif    };    auto got = Ask({1, 1});    assert(got > 0);    auto p = got - 1;    const int64_t MAX = int64_t(4e9 + 10);    vector<int64_t> pw(1, 1);    while (pw.back() < MAX) {      auto nxt = pw.back() * p;      pw.push_back(nxt);    }    vector<int64_t> a(pw.size());    for (int i = 0; i < int(a.size()); i++) {      a[i] = 26; // rng() % 26 + 1;    }    auto a_init = a;    int64_t sum = GetHash(a, p, int64_t(1e15));    auto got_init = Ask(a);    auto goal = sum - got_init;    assert(goal > 0);    auto cur = goal - 1;    int64_t sub = 1;    if (goal % p == 0) {      int digs = 0;      auto tmp = goal;      while (tmp % p == 0) {        tmp /= p;        digs += 1;      }      while (true) {        tmp = cur;        bool fail = false;        int64_t coeff = 1;        for (int i = 0; i < digs; i++) {          if (tmp % p < 1 || tmp % p > 26) {            fail = true;            break;          }          tmp /= p;          coeff *= p;        }        if (fail) {          cur -= coeff;          sub += coeff;        } else {          break;        }      }    }    int Q = 0;    while (true) {      Q += 1;      a.clear();      auto tmp = cur;      while (tmp > 0) {        a.push_back(tmp % p);        tmp /= p;      }      while (pw.size() < a.size()) {        auto nxt = pw.back() * p;        pw.push_back(nxt);      }      // debug(goal, cur, p, real_p, real_m, a);      bool fail = false;      int64_t num = 0;      for (int64_t i = int64_t(a.size()) - 1; i >= 0; i--) {        num = num * p + a[i];        if (a[i] < 1 || a[i] > 26) {          auto shift = (a[i] == 0 ? 1 : (p + 1) - a[i]);          auto bound = (num + shift) * pw[i];          assert(cur < bound);          auto times = (bound - 1 - cur) / goal + 1;          cur += times * goal;          fail = true;          break;        }      }      if (!fail) {        break;      }    }    auto got_final = Ask(a);    auto m = got_final + sub;    {      vector<int64_t> divs;      for (int64_t x = 1; x * x <= m; x++) {        if (m % x == 0) {          divs.push_back(x);          if (x * x < m) {            divs.push_back(m / x);          }        }      }      sort(divs.begin(), divs.end());      vector<int64_t> new_divs;      for (auto x : divs) {        if (x > p + 1 && x <= int64_t(2e9) && GetHash(a_init, p, x) == got_init && GetHash(a, p, x) == got_final) {          new_divs.push_back(x);        }      }      assert(new_divs.size() > 0);      // debug(new_divs);      m = new_divs[0];    }    cout << \"! \" << p << \" \" << m << endl;    if (Q > 10000) debug(p, m, Q);    #ifdef LOCAL      if (m != real_m) {        debug(p, m, real_p, real_m, goal, sub);      }      assert(p == real_p);      assert(m == real_m);      auto ratio = (long double) cur / 1e18;      max_r = max(max_r, ratio);      max_Q = max(max_Q, Q);      if (qq % 10000 == 0)        debug(qq, tt, fails, ratio, Q, max_r, max_Q);    #endif  }  return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "constructive algorithms",
        "games",
        "greedy",
        "hashing",
        "interactive",
        "math",
        "number theory",
        "strings"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\H. Fortnite.json"
}