{
    "link": "https://codeforces.com//contest/932/problem/C",
    "problemId": "156996",
    "problem_idx": "C",
    "shortId": "932C",
    "contest_number": "932",
    "problem_submissions": {
        "G": [
            51774341,
            35308371,
            35309948,
            35309510,
            35328593,
            35312755,
            35340195,
            35324025,
            38386676,
            35314606
        ],
        "F": [
            35314668,
            35310572,
            35468380,
            35310269,
            35309416,
            35312292,
            35310748,
            35546358,
            35310551,
            35314451,
            35994490,
            35310830,
            35314597,
            35313005,
            35315153,
            35311414,
            35314861
        ],
        "E": [
            35305602,
            35300676,
            35303983,
            35302322,
            35304627,
            35307360,
            35305500,
            35300979,
            35304741,
            35308375,
            35305972,
            35304083,
            35308467,
            35308589,
            35308504,
            35313014,
            35308160,
            35300247
        ],
        "D": [
            35304182,
            35304652,
            35301520,
            35312731,
            35302822,
            35304942,
            35303273,
            35308561,
            35309596,
            35306303,
            35302532,
            35308788,
            35304471,
            35304933,
            35304868,
            35308529,
            35306123,
            35312012
        ],
        "C": [
            35298412,
            35298036,
            35296739,
            35298645,
            35298179,
            35298553,
            35299152,
            35297891,
            35299526,
            35299903,
            35298326,
            35305061,
            35298463,
            35300385,
            35298472,
            35299312,
            35300289,
            35313442
        ],
        "B": [
            35297094,
            35297006,
            35297939,
            35296994,
            35296930,
            35296422,
            35297855,
            35301880,
            35297864,
            35297983,
            35297247,
            35296879,
            35297467,
            35297739,
            35296808,
            35297547,
            35298510,
            35302031
        ],
        "A": [
            35295015,
            35294909,
            35298217,
            35294978,
            35294827,
            35294828,
            35295219,
            35296140,
            35296578,
            35294771,
            35294859,
            35294967,
            35294941,
            35294775,
            35295820,
            35295673,
            35300844
        ]
    },
    "name": "C. Permutation Cycle",
    "statement": "For a permutation of integers from to , function is defined as follows:\r\nLet be the minimum positive integer such that . We can show such always\r\nexists.For given , find a permutation of integers from to such that for\r\n, equals either or .\r\n",
    "solutions": [
        "//while (clock()<=69*CLOCKS_PER_SEC)\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nconst int nax=1000*1007;\n\nint n, a, b;\n\nint s;\n\nvoid zrob(int v)\n{\n\tfor (int i=1; i<v; i++)\n\t\tprintf(\"%d \", s+i+1);\n\tprintf(\"%d \", s+1);\n\ts+=v;\n}\n\nvoid rob(int x, int y)\n{\n\tfor (int i=1; i<=x; i++)\n\t\tzrob(a);\n\tfor (int i=1; i<=y; i++)\n\t\tzrob(b);\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\", &n, &a, &b);\n\tfor (int i=0; i*a<=n; i++)\n\t{\n\t\tif (!((n-i*a)%b))\n\t\t{\n\t\t\trob(i, (n-i*a)/b);\n\t\t\tprintf(\"\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"-1\\n\");\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Permutation Cycle.json",
    "editorial_link": "https://codeforces.com//blog/entry/57796",
    "editorial": "For and , there must exist a cycle of length beginning from index and\r\nending at the same index of permutation . While generating a permutation\r\n, we are constrained to generate cycles of length either or as for all\r\nmust be equal to either of them.Let us try to generate a cycle of length\r\nfor indices till using only the integers till , each once. If and for\r\nall , we in turn get a cycle of length for each of the indices till ,\r\nthat is for all .So, if there exists a solution where and , for , we can\r\nin turn generate a permutation satisfying our needs. Otherwise, no such\r\npermutation is possible.So, now for any one of the solution , generate\r\ncycles of length , beginning from indices , , ... and then beginning\r\nfrom indices , , ... , generate cycles of length .\r\n"
}