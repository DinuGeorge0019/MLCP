{
    "link": "https://codeforces.com//contest/1523/problem/E",
    "problemId": "1000215",
    "problem_idx": "E",
    "shortId": "1523E",
    "contest_number": "1523",
    "problem_submissions": {
        "F": [
            117916146,
            117914065,
            117905350,
            117900425,
            117909780,
            117912951,
            117923029,
            117905457,
            117920531,
            117920496,
            117911483,
            117908634,
            117907048,
            117936734,
            117936707,
            117936638,
            117936633,
            117936625,
            117936608,
            117905940,
            117911622,
            117911227,
            117910828,
            117920430,
            117916378,
            117911950,
            117912347,
            117936103,
            117935723
        ],
        "G": [
            117899863,
            117912955,
            117908386,
            117915802,
            117906341,
            117903204,
            117907803,
            117932659,
            117932628,
            117911801,
            118597582,
            117989759,
            117915684,
            117936837,
            117918793,
            117916945,
            117917431
        ],
        "D": [
            117881477,
            117886244,
            117886334,
            117887661,
            118167966,
            117918101,
            117929591,
            117890786,
            117890676,
            117893739,
            118119250,
            117887458,
            117887290,
            117893940,
            117890382,
            118081143,
            117890914,
            117883607,
            117887959,
            117895275,
            117888883,
            117902109,
            117889374
        ],
        "E": [
            117878219,
            117881962,
            117910641,
            117881787,
            117884807,
            117893823,
            117886171,
            117885405,
            117882043,
            117890552,
            117888754,
            117897027,
            117898439,
            117887443,
            117893294,
            117903524,
            117892701,
            117896279,
            117896129
        ],
        "C": [
            117876664,
            117878149,
            117877887,
            117879093,
            117889641,
            117882853,
            117877348,
            117879069,
            117877404,
            117877723,
            117880898,
            117876222,
            117880296,
            117876946,
            117880601,
            117879874,
            117879926,
            117880242,
            117902829
        ],
        "B": [
            117875490,
            117875567,
            117880589,
            117875816,
            117876680,
            117877360,
            117875700,
            117876723,
            117878349,
            117876280,
            117877999,
            117880072,
            117876899,
            117875787,
            117877756,
            117876654,
            117875833,
            117878179,
            117879465
        ],
        "A": [
            117874746,
            117874821,
            117882081,
            117874974,
            117874835,
            117874828,
            117874778,
            117874933,
            117874911,
            117874900,
            117876005,
            117883186,
            117874918,
            117874908,
            117875902,
            117874738,
            117874753,
            117874913,
            117876371
        ],
        "H": [
            117981868,
            117981132,
            118023855,
            118349130,
            117933591,
            118312467,
            118312428,
            119224810
        ]
    },
    "name": "E. Crypto Lights",
    "statement": "To monitor cryptocurrency exchange rates trader William invented a\r\nwonderful device consisting of n lights arranged in a row. The device\r\nfunctions in the following way:Initially, all lights on William\u2019s device\r\nare turned off. At the beginning of a new iteration the device randomly,\r\nwith a uniform distribution, picks a light that is turned off and turns\r\nit on, telling William which cryptocurrency he should invest in. After\r\nthis iteration if any k consecutive lights contain more than one turned\r\non light, then the device finishes working.William doesn\u2019t like\r\nuncertainty, so he wants you to calculate the expected value of the\r\nnumber of lights that are turned on in the device after it finishes\r\nworking.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 30.05.2021 17:47:03       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <typename T>\nT inverse(T a, T m) {\n  T u = 0, v = 1;\n  while (a != 0) {\n    T t = m / a;\n    m -= t * a; swap(a, m);\n    u -= t * v; swap(u, v);\n  }\n  assert(m == 1);\n  return u;\n}\n\ntemplate <typename T>\nclass Modular {\n public:\n  using Type = typename decay<decltype(T::value)>::type;\n\n  constexpr Modular() : value() {}\n  template <typename U>\n  Modular(const U& x) {\n    value = normalize(x);\n  }\n\n  template <typename U>\n  static Type normalize(const U& x) {\n    Type v;\n    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);\n    else v = static_cast<Type>(x % mod());\n    if (v < 0) v += mod();\n    return v;\n  }\n\n  const Type& operator()() const { return value; }\n  template <typename U>\n  explicit operator U() const { return static_cast<U>(value); }\n  constexpr static Type mod() { return T::value; }\n\n  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }\n  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }\n  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }\n  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }\n  Modular& operator++() { return *this += 1; }\n  Modular& operator--() { return *this -= 1; }\n  Modular operator++(int) { Modular result(*this); *this += 1; return result; }\n  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }\n  Modular operator-() const { return Modular(-value); }\n\n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {\n#ifdef _WIN32\n    uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);\n    uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;\n    asm(\n      \"divl %4; \\n\\t\"\n      : \"=a\" (d), \"=d\" (m)\n      : \"d\" (xh), \"a\" (xl), \"r\" (mod())\n    );\n    value = m;\n#else\n    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));\n#endif\n    return *this;\n  }\n  template <typename U = T>\n  typename enable_if<is_same<typename Modular<U>::Type, long long>::value, Modular>::type& operator*=(const Modular& rhs) {\n    long long q = static_cast<long long>(static_cast<long double>(value) * rhs.value / mod());\n    value = normalize(value * rhs.value - q * mod());\n    return *this;\n  }\n  template <typename U = T>\n  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {\n    value = normalize(value * rhs.value);\n    return *this;\n  }\n\n  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }\n\n  friend const Type& abs(const Modular& x) { return x.value; }\n\n  template <typename U>\n  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);\n\n  template <typename U>\n  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);\n\n  template <typename V, typename U>\n  friend V& operator>>(V& stream, Modular<U>& number);\n\n private:\n  Type value;\n};\n\ntemplate <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }\ntemplate <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }\ntemplate <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }\n\ntemplate <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }\ntemplate <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\n\ntemplate <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }\n\ntemplate <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }\ntemplate <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\n\ntemplate <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }\ntemplate <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\n\ntemplate <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }\ntemplate <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\n\ntemplate <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }\ntemplate <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\n\ntemplate<typename T, typename U>\nModular<T> power(const Modular<T>& a, const U& b) {\n  assert(b >= 0);\n  Modular<T> x = a, res = 1;\n  U p = b;\n  while (p > 0) {\n    if (p & 1) res *= x;\n    x *= x;\n    p >>= 1;\n  }\n  return res;\n}\n\ntemplate <typename T>\nbool IsZero(const Modular<T>& number) {\n  return number() == 0;\n}\n\ntemplate <typename T>\nstring to_string(const Modular<T>& number) {\n  return to_string(number());\n}\n\n// U == std::ostream? but done this way because of fastoutput\ntemplate <typename U, typename T>\nU& operator<<(U& stream, const Modular<T>& number) {\n  return stream << number();\n}\n\n// U == std::istream? but done this way because of fastinput\ntemplate <typename U, typename T>\nU& operator>>(U& stream, Modular<T>& number) {\n  typename common_type<typename Modular<T>::Type, long long>::type x;\n  stream >> x;\n  number.value = Modular<T>::normalize(x);\n  return stream;\n}\n\n/*\nusing ModType = int;\n\nstruct VarMod { static ModType value; };\nModType VarMod::value;\nModType& md = VarMod::value;\nusing Mint = Modular<VarMod>;\n*/\n\nconstexpr int md = (int) 1e9 + 7;\nusing Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;\n\nvector<Mint> fact(1, 1);\nvector<Mint> inv_fact(1, 1);\n\nMint C(int n, int k) {\n  if (k < 0 || k > n) {\n    return 0;\n  }\n  while ((int) fact.size() < n + 1) {\n    fact.push_back(fact.back() * (int) fact.size());\n    inv_fact.push_back(1 / fact.back());\n  }\n  return fact[n] * inv_fact[k] * inv_fact[n - k];\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n, k;\n    cin >> n >> k;\n    Mint ans = 1;\n    for (int x = 1; n - (k - 1) * (x - 1) >= x; x++) {\n      ans += C(n - (k - 1) * (x - 1), x) / C(n, x);\n    }\n    cout << ans << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math",
        "probabilities"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\E. Crypto Lights.json",
    "editorial_link": "https://codeforces.com//blog/entry/91271",
    "editorial": "Let\u00e2\u0080\u0099s consider all states of the device where lights are turned on, and\r\nwhen at the current moment the algorithm has not yet finished working.\r\nWe will be checking all values for from 1 to .Notice that for a state\r\nwhere lights are turned on the probability of getting to that state is .\r\nNow for a new value of we need to calculate the number of fitting\r\nstates. Without the condition about having a distance of between the\r\nlights this number would be equal to the number of ways to split the\r\nlights into groups, which is .Next we can notice that each group must\r\nalso contain elements to provide the necessary distance. Then the number\r\nof \"free\" cells necessary to select an arrangement of groups will be .\r\nThen the final quantity of arrangements will be . The final sum of these\r\nquantities, multiplied by the probability of getting each one will be\r\nthe answer.\r\n"
}