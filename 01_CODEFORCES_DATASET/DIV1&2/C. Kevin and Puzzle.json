{
    "link": "https://codeforces.com//contest/2061/problem/C",
    "problemId": "3155956",
    "problem_idx": "C",
    "shortId": "2061C",
    "contest_number": "2061",
    "problem_submissions": {
        "F2": [
            302127475,
            302092403,
            302114656,
            302114350,
            302118052,
            302128136,
            302099327,
            302127501,
            302105569,
            302158287,
            302158231,
            302158981,
            302158740,
            302158593,
            302155955
        ],
        "H1": [
            302102508,
            302123846,
            302123275,
            302120307,
            302128240,
            302113263,
            302214973,
            302214838,
            302492170,
            302128311,
            302150853
        ],
        "G": [
            302087277,
            302104836,
            302092310,
            302101290,
            302098614,
            302099751,
            302090244,
            302079497,
            302107342,
            302102846,
            302118471,
            302119832,
            302088828,
            302085801,
            302097252,
            302107147,
            302100360,
            302104471
        ],
        "F1": [
            302070705,
            302068249,
            302076903,
            302139304,
            302085853,
            302085964,
            302087951,
            302076823,
            302099111,
            302088499,
            302088697,
            302106078,
            302076066,
            302095307,
            302083979,
            302077009,
            302082649,
            302158914,
            302081283
        ],
        "E": [
            302060766,
            302059898,
            302064375,
            302146780,
            302146561,
            302146204,
            302145996,
            302145832,
            302145821,
            302145812,
            302060519,
            302071650,
            302062756,
            302067337,
            302066558,
            302071373,
            302078018,
            302075359,
            302069841,
            302067118,
            302063628,
            302073608,
            302071649,
            302075889,
            302072748
        ],
        "D": [
            302057147,
            302056206,
            302056876,
            302056600,
            302064486,
            302056648,
            302061458,
            302060302,
            302063595,
            302065433,
            302068805,
            302064352,
            302061742,
            302059104,
            302069059,
            302065232,
            302069194,
            302062940
        ],
        "C": [
            302053893,
            302052972,
            302060290,
            302053477,
            302058781,
            302053556,
            302058513,
            302056661,
            302060439,
            302057971,
            302066087,
            302059912,
            302059144,
            302055184,
            302066070,
            302060621,
            302062953,
            302059461
        ],
        "B": [
            302048946,
            302050832,
            302052328,
            302049723,
            302053638,
            302049221,
            302054664,
            302052475,
            302055824,
            302052997,
            302059041,
            302057352,
            302051579,
            302051983,
            302056196,
            302056129,
            302055478,
            302054565
        ],
        "A": [
            302047037,
            302049009,
            302047309,
            302047023,
            302047283,
            302047053,
            302047177,
            302047108,
            302047316,
            302047521,
            302047571,
            302047610,
            302047369,
            302048738,
            302047337,
            302048364,
            302049028,
            302047123
        ],
        "H2": [
            302541217
        ],
        "I": [
            302144176,
            302142123,
            302142064,
            302141919,
            302124920,
            302518298,
            302518173,
            302517883
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/138620",
    "editorial": "For the -th person, there are at most two possible cases: If they are\r\nhonest, there are exactly liars to their left. If they are a liar, since\r\ntwo liars cannot stand next to each other, the -th person must be\r\nhonest. In this case, there are liars to their left. Let represent the\r\nnumber of possible game configurations for the first people, where the\r\n-th person is honest. The transitions are as follows: If the -th person\r\nis honest, check if . If true, add to . If the -th person is a liar,\r\ncheck if . If true, add to . The final answer is given by .Time\r\ncomplexity: .\r\n",
    "name": "C. Kevin and Puzzle",
    "statement": "Kevin enjoys logic puzzles.He played a game with n classmates who stand\r\nin a line. The i-th person from the left says that there are a_i liars\r\nto their left (not including themselves).Each classmate is either honest\r\nor a liar, with the restriction that . Honest classmates always say the\r\ntruth. , meaning their statements are considered unreliable.Kevin wants\r\nto determine the number of distinct possible game configurations modulo\r\n998\r\n,244\r\n,353. Two configurations are considered different if at least one\r\nclassmate is honest in one configuration and a liar in the other.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using i64 = long long;using u64 = unsigned long long;using u32 = unsigned;using u128 = unsigned __int128; template<class T>constexpr T power(T a, u64 b, T res = 1) {    for (; b != 0; b /= 2, a *= a) {        if (b & 1) {            res *= a;        }    }    return res;} template<u32 P>constexpr u32 mulMod(u32 a, u32 b) {    return u64(a) * b % P;} template<u64 P>constexpr u64 mulMod(u64 a, u64 b) {    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;    res %= P;    return res;} constexpr i64 safeMod(i64 x, i64 m) {    x %= m;    if (x < 0) {        x += m;    }    return x;} constexpr std::pair<i64, i64> invGcd(i64 a, i64 b) {    a = safeMod(a, b);    if (a == 0) {        return {b, 0};    }        i64 s = b, t = a;    i64 m0 = 0, m1 = 1;     while (t) {        i64 u = s / t;        s -= t * u;        m0 -= m1 * u;                std::swap(s, t);        std::swap(m0, m1);    }        if (m0 < 0) {        m0 += b / s;    }        return {s, m0};} template<std::unsigned_integral U, U P>struct ModIntBase {public:    constexpr ModIntBase() : x(0) {}    template<std::unsigned_integral T>    constexpr ModIntBase(T x_) : x(x_ % mod()) {}    template<std::signed_integral T>    constexpr ModIntBase(T x_) {        using S = std::make_signed_t<U>;        S v = x_ % S(mod());        if (v < 0) {            v += mod();        }        x = v;    }        constexpr static U mod() {        return P;    }        constexpr U val() const {        return x;    }        constexpr ModIntBase operator-() const {        ModIntBase res;        res.x = (x == 0 ? 0 : mod() - x);        return res;    }        constexpr ModIntBase inv() const {        return power(*this, mod() - 2);    }        constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {        x = mulMod<mod()>(x, rhs.val());        return *this;    }    constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {        x += rhs.val();        if (x >= mod()) {            x -= mod();        }        return *this;    }    constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {        x -= rhs.val();        if (x >= mod()) {            x += mod();        }        return *this;    }    constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {        return *this *= rhs.inv();    }        friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {        lhs *= rhs;        return lhs;    }    friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {        lhs += rhs;        return lhs;    }    friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {        lhs -= rhs;        return lhs;    }    friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {        lhs /= rhs;        return lhs;    }        friend constexpr std::istream &operator>>(std::istream &is, ModIntBase &a) {        i64 i;        is >> i;        a = i;        return is;    }    friend constexpr std::ostream &operator<<(std::ostream &os, const ModIntBase &a) {        return os << a.val();    }        friend constexpr bool operator==(const ModIntBase &lhs, const ModIntBase &rhs) {        return lhs.val() == rhs.val();    }    friend constexpr std::strong_ordering operator<=>(const ModIntBase &lhs, const ModIntBase &rhs) {        return lhs.val() <=> rhs.val();    }    private:    U x;}; template<u32 P>using ModInt = ModIntBase<u32, P>;template<u64 P>using ModInt64 = ModIntBase<u64, P>; struct Barrett {public:    Barrett(u32 m_) : m(m_), im((u64)(-1) / m_ + 1) {}     constexpr u32 mod() const {        return m;    }     constexpr u32 mul(u32 a, u32 b) const {        u64 z = a;        z *= b;                u64 x = u64((u128(z) * im) >> 64);                u32 v = u32(z - x * m);        if (m <= v) {            v += m;        }        return v;    } private:    u32 m;    u64 im;}; template<u32 Id>struct DynModInt {public:    constexpr DynModInt() : x(0) {}    template<std::unsigned_integral T>    constexpr DynModInt(T x_) : x(x_ % mod()) {}    template<std::signed_integral T>    constexpr DynModInt(T x_) {        int v = x_ % int(mod());        if (v < 0) {            v += mod();        }        x = v;    }        constexpr static void setMod(u32 m) {        bt = m;    }        static u32 mod() {        return bt.mod();    }        constexpr u32 val() const {        return x;    }        constexpr DynModInt operator-() const {        DynModInt res;        res.x = (x == 0 ? 0 : mod() - x);        return res;    }        constexpr DynModInt inv() const {        auto v = invGcd(x, mod());        assert(v.first == 1);        return v.second;    }        constexpr DynModInt &operator*=(const DynModInt &rhs) & {        x = bt.mul(x, rhs.val());        return *this;    }    constexpr DynModInt &operator+=(const DynModInt &rhs) & {        x += rhs.val();        if (x >= mod()) {            x -= mod();        }        return *this;    }    constexpr DynModInt &operator-=(const DynModInt &rhs) & {        x -= rhs.val();        if (x >= mod()) {            x += mod();        }        return *this;    }    constexpr DynModInt &operator/=(const DynModInt &rhs) & {        return *this *= rhs.inv();    }        friend constexpr DynModInt operator*(DynModInt lhs, const DynModInt &rhs) {        lhs *= rhs;        return lhs;    }    friend constexpr DynModInt operator+(DynModInt lhs, const DynModInt &rhs) {        lhs += rhs;        return lhs;    }    friend constexpr DynModInt operator-(DynModInt lhs, const DynModInt &rhs) {        lhs -= rhs;        return lhs;    }    friend constexpr DynModInt operator/(DynModInt lhs, const DynModInt &rhs) {        lhs /= rhs;        return lhs;    }        friend constexpr std::istream &operator>>(std::istream &is, DynModInt &a) {        i64 i;        is >> i;        a = i;        return is;    }    friend constexpr std::ostream &operator<<(std::ostream &os, const DynModInt &a) {        return os << a.val();    }        friend constexpr bool operator==(const DynModInt &lhs, const DynModInt &rhs) {        return lhs.val() == rhs.val();    }    friend constexpr std::strong_ordering operator<=>(const DynModInt &lhs, const DynModInt &rhs) {        return lhs.val() <=> rhs.val();    }    private:    u32 x;    static Barrett bt;}; template<u32 Id>Barrett DynModInt<Id>::bt = 998244353; using Z = ModInt<998244353>; void solve() {    int n;    std::cin >> n;        std::vector<int> a(n);    for (int i = 0; i < n; i++) {        std::cin >> a[i];    }        std::array<Z, 2> dp {};    dp[0] = 1;        for (int i = 0; i < n; i++) {        std::array<Z, 2> ndp {};        for (int x = 0; x < 2; x++) {            int l;            if (i == 0) {                l = 0;            } else if (x == 0) {                l = a[i - 1];            } else if (i == 1) {                l = 1;            } else {                l = a[i - 2] + 1;            }            for (int y = 0; y < 2; y++) {                if (y == 0 && a[i] != l) {                    continue;                }                if (x == 1 && y == 1) {                    continue;                }                ndp[y] += dp[x];            }        }        dp = ndp;    }        Z ans = dp[0] + dp[1];    std::cout << ans << \"\\n\";} int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "2-sat",
        "binary search",
        "bitmasks",
        "brute force",
        "combinatorics",
        "constructive algorithms",
        "data structures",
        "dfs and similar",
        "divide and conquer",
        "dp",
        "dsu",
        "flows",
        "games",
        "geometry",
        "graph matchings",
        "graphs",
        "greedy",
        "hashing",
        "implementation",
        "interactive",
        "math",
        "matrices",
        "meet-in-the-middle",
        "number theory",
        "probabilities",
        "schedules",
        "shortest paths",
        "sortings",
        "string suffix structures",
        "strings",
        "ternary search",
        "trees",
        "two pointers"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Kevin and Puzzle.json",
    "hint": [
        "Hint 1 How can you solve the problem in ?",
        "Hint 2 No two liars can stand next to each other is important."
    ]
}