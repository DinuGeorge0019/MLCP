{
    "link": "https://codeforces.com//contest/1842/problem/F",
    "problemId": "1978970",
    "problem_idx": "F",
    "shortId": "1842F",
    "contest_number": "1842",
    "problem_submissions": {
        "H": [
            210909272,
            210915649,
            210920105,
            210920155,
            210922877,
            210917228,
            210922837,
            210930795,
            210943236,
            210937664,
            210940497,
            210923705,
            210946319,
            210934622,
            210945105,
            210899880,
            210946698,
            210939780,
            210945932
        ],
        "F": [
            210904139,
            210906080,
            210912565,
            210912372,
            210898025,
            210899929,
            210907320,
            210916813,
            210914105,
            210920055,
            210921458,
            210913885,
            210930158,
            210926455,
            210915591,
            210926376,
            210920616,
            210915480,
            210926627
        ],
        "E": [
            210900474,
            210894310,
            210898608,
            210904065,
            210915135,
            210928274,
            210898671,
            210908613,
            210902774,
            210908660,
            210907798,
            210940198,
            210905531,
            210907005,
            210910569,
            210945488,
            210908738,
            210905745,
            210907496
        ],
        "D": [
            210896488,
            210888362,
            210895704,
            210886302,
            210889254,
            210887549,
            210895428,
            210893212,
            210903157,
            210896694,
            210890657,
            210891182,
            210892762,
            210896576,
            210915222,
            210891979,
            210892349,
            210897573
        ],
        "G": [
            210891898,
            210900879,
            210908657,
            210918356,
            210923373,
            210939093,
            210921066,
            210918175,
            210911260,
            210924814,
            210932494,
            210913130,
            210941401,
            210927457,
            210933616,
            210927314,
            210931000,
            210936010
        ],
        "C": [
            210877958,
            210881836,
            210878997,
            210877037,
            210879744,
            210878770,
            210882382,
            210884108,
            210887371,
            210884900,
            210892630,
            210896219,
            210883482,
            210884636,
            210910637,
            210882729,
            210933971,
            210885406
        ],
        "A": [
            210875095,
            210875812,
            210874424,
            210888796,
            210874470,
            210876122,
            210874664,
            210877287,
            210875659,
            210882217,
            210874539,
            210875197,
            210874805,
            210874426,
            210902716,
            210874934,
            210945780,
            210885821
        ],
        "B": [
            210874375,
            210878347,
            210876059,
            210890061,
            210876166,
            210875757,
            210877955,
            210879984,
            210877325,
            210880724,
            210876899,
            210877184,
            210877441,
            210885377,
            210916237,
            210877578,
            210940672,
            210885692
        ],
        "I": [
            210953525,
            211184344,
            211107115
        ]
    },
    "name": "F. Tenzing and Tree",
    "statement": "Tenzing has an undirected tree of n vertices.Define the of a tree with\r\nblack and white vertices in the following way. The of an edge is the\r\nabsolute difference between the number of black nodes in the two\r\ncomponents of the tree after deleting the edge. The value of the tree is\r\nthe sum of values over all edges.For all k such that 0\r\nleq k\r\nleq n, Tenzing wants to know the maximum value of the tree when k\r\nvertices are painted black and n-k vertices are painted white.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 24.06.2023 10:46:56       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n;\n  cin >> n;\n  vector<vector<int>> g(n);\n  for (int i = 0; i < n - 1; i++) {\n    int x, y;\n    cin >> x >> y;\n    --x; --y;\n    g[x].push_back(y);\n    g[y].push_back(x);\n  }\n  vector<int> ans(n + 1, 0);\n  for (int ver = 0; ver < n; ver++) {\n    vector<int> dist(n, -1);\n    dist[ver] = 0;\n    vector<int> que(1, ver);\n    for (int b = 0; b < (int) que.size(); b++) {\n      for (int to : g[que[b]]) {\n        if (dist[to] == -1) {\n          que.push_back(to);\n          dist[to] = dist[que[b]] + 1;\n        }\n      }\n    }\n    vector<int> cnt(n, 0);\n    for (int i = 0; i < n; i++) {\n      cnt[dist[i]] += 1;\n    }\n    int sum = 0;\n    int cc = 0;\n    for (int d = 0; d < n; d++) {\n      for (int rep = 0; rep < cnt[d]; rep++) {\n        sum += d;\n        cc += 1;\n        ans[cc] = max(ans[cc], cc * (n - 1) - 2 * sum);\n      }\n    }\n  }\n  for (int i = 0; i <= n; i++) {\n    cout << ans[i] << \" \\n\"[i == n];\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "greedy",
        "shortest paths",
        "sortings",
        "trees"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\F. Tenzing and Tree.json",
    "editorial_link": "https://codeforces.com//blog/entry/117606",
    "editorial": "TutorialLet be the centroid of all black vertices and be the number of\r\nblack vertices in the subtree of node .Then the value is .Consider\r\npainting node black, the total contributio to all of its ancestors is ,\r\nwhere is the distance from to .Since we want to maximize the value, we\r\ncan greedily select the node with the smallest .But how do we ensure\r\nthat is the centroid after selecting other black vertices? We can simply\r\ntake the maximum of all possible because if a node is not the centroid,\r\nsome edges will have a negative weight, making it worse than the optimal\r\nanswer.Enumerate all possible and use BFS to add vertices based on their\r\ndistance to . The complexity is .\r\n",
    "hint": []
}