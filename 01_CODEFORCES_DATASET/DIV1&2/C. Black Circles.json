{
    "link": "https://codeforces.com//contest/2002/problem/C",
    "problemId": "2809239",
    "problem_idx": "C",
    "shortId": "2002C",
    "contest_number": "2002",
    "problem_submissions": {
        "H": [
            275883821,
            276030000,
            276029533,
            276718944,
            276718931,
            276716412,
            276716121,
            276379907
        ],
        "G": [
            275814532,
            275831532,
            275862936,
            275862868,
            275857045,
            275856914,
            275852957,
            275835244,
            275830497,
            275836895,
            275844798,
            275836685,
            275839620,
            275876408,
            275835680,
            276384839,
            275855186,
            275854807,
            275854377,
            275854233,
            275853273,
            275853001,
            277160193,
            275873413
        ],
        "F2": [
            275803261,
            275805293,
            275815511,
            275803726,
            275821855,
            275826602,
            275804715,
            275817099,
            275812698,
            275821433,
            275820135,
            275822519,
            275814615,
            275832819,
            275821881,
            275820944,
            275827250
        ],
        "F1": [
            275803106,
            275797405,
            275810054,
            275805934,
            275822144,
            275821908,
            275808780,
            275842679,
            275842498,
            275804501,
            275809897,
            275810999,
            275804801,
            275820307,
            275807320,
            275814303,
            275818257,
            275821104,
            275812786,
            275819730
        ],
        "E": [
            275776266,
            275785744,
            275852219,
            275788914,
            275771707,
            275802566,
            275795962,
            275769983,
            275789286,
            275807515,
            275787919,
            275785680,
            275785359,
            275786354,
            275779961,
            275794439,
            275802251,
            275789750,
            275800998,
            275803752,
            275804830
        ],
        "D2": [
            275767991,
            275777830,
            275771186,
            275817652,
            275793116,
            275788319,
            275778566,
            275781543,
            275797706,
            275776037,
            275778290,
            275777713,
            275779770,
            275786761,
            275779192,
            275790952,
            275773357,
            275786731,
            275789591,
            275775563
        ],
        "D1": [
            275767248,
            275777327,
            275771493,
            275817851,
            275793580,
            275790111,
            275778728,
            275771118,
            275797900,
            275776414,
            275778256,
            275777934,
            275780036,
            275787162,
            275779917,
            275791115,
            275772837,
            275787063,
            275789991,
            275776578
        ],
        "C": [
            275759851,
            275761703,
            275759373,
            275759241,
            275760994,
            275777407,
            275759928,
            275758928,
            275788566,
            275759503,
            275761991,
            275762069,
            275758442,
            275761405,
            275763148,
            275760323,
            275761934,
            275768403,
            275764562,
            275765401
        ],
        "B": [
            275757139,
            275757734,
            275756638,
            275756387,
            275757424,
            275758576,
            275756620,
            275756121,
            275770304,
            275762131,
            275757965,
            275758270,
            275756051,
            275757393,
            275759268,
            275756663,
            275757687,
            275761514,
            275758840,
            275756832
        ],
        "A": [
            275755167,
            275755315,
            275754910,
            275755027,
            275755132,
            275755590,
            275754949,
            275754911,
            275767431,
            275754975,
            275755752,
            275755110,
            275754896,
            275755382,
            275755090,
            275755155,
            275754903,
            275755222,
            275756059,
            275754981
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132569",
    "editorial": "We consider a simple strategy:\nwalk towards the goal in a straight line.If some circle reaches the goal\nfirst, it is obvious that we have no chance of succeeding, no matter\nwhat path we take.Otherwise, it can be proven that we will not pass any\ncircles on our way to the goal.Suppose we start at , our goal is , and\nwe got intercepted by some circle at the point . It follows that .\nAccording to the triangle inequality, should hold. Thus, we have , which\nmeans , proof by contradiction.Time complexity: .\n",
    "name": "C. Black Circles",
    "statement": "There are n circles on a two-dimensional plane. The i-th circle is\r\ncentered at (x_i,y_i). Initially, all circles have a radius of 0.The\r\ncircles\u2019 radii increase at a rate of 1 unit per second.You are currently\r\nat (x_s,y_s); your goal is to reach (x_t,y_t) without touching the\r\ncircumference of any circle (). You can move in any direction you want.\r\nHowever, your speed is limited to 1 unit per second.Please determine\r\nwhether this is possible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\u00a0using u32 = unsigned;using i64 = long long;using u64 = unsigned long long;\u00a0void solve() {    int n;    std::cin >> n;        std::vector<int> x(n), y(n);    for (int i = 0; i < n; i++) {        std::cin >> x[i] >> y[i];    }        int xs, ys, xt, yt;    std::cin >> xs >> ys >> xt >> yt;        i64 dis = 1LL * (xs - xt) * (xs - xt) + 1LL * (ys - yt) * (ys - yt);        bool ok = true;    for (int i = 0; i < n; i++) {        i64 res = 1LL * (x[i] - xt) * (x[i] - xt) + 1LL * (y[i] - yt) * (y[i] - yt);        if (res <= dis) {            ok = false;            break;        }    }        if (ok) {        std::cout << \"YES\\n\";    } else {        std::cout << \"NO\\n\";    }}\u00a0int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "geometry",
        "greedy",
        "math"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Black Circles.json"
}