{
    "link": "https://codeforces.com//contest/1025/problem/F",
    "problemId": "209741",
    "problem_idx": "F",
    "shortId": "1025F",
    "contest_number": "1025",
    "problem_submissions": {
        "E": [
            41858738,
            41856429,
            41850768,
            41855385,
            41852484,
            41858727,
            41848268,
            41855122,
            41883001,
            41858915,
            41855225,
            41852858,
            41868516,
            41860862,
            41856872,
            41860887,
            41851802
        ],
        "F": [
            41848629,
            41847210,
            41861209,
            41860806,
            41863443,
            41862402,
            41853998,
            41862178,
            41845081,
            41877837,
            41887505,
            41887279,
            41887255,
            41878485,
            41856047,
            41861957,
            41858912,
            41906629,
            41858319,
            41868413
        ],
        "D": [
            41845183,
            41851596,
            41961545,
            41841784,
            41841903,
            41840812,
            41849010,
            41840988,
            41846701,
            41841230,
            41874808,
            41841578,
            41847099,
            41842212,
            41945631,
            41911317,
            41911277,
            41878022,
            41877990,
            41877935,
            41874708,
            41874699,
            41874650,
            41873983,
            41873792,
            41873701,
            41873477,
            41849952,
            41843783,
            41842954,
            41842230,
            41844472,
            41848949,
            41844612
        ],
        "C": [
            41839685,
            41838607,
            41835815,
            41834650,
            41838762,
            41837233,
            41866845,
            41840107,
            41835687,
            41833279,
            41836241,
            41835918,
            41839785,
            41834860,
            41839690,
            41836558,
            41837913,
            41843576,
            41837629
        ],
        "A": [
            41835541,
            41829219,
            41829281,
            41828966,
            41829689,
            41834202,
            41835387,
            41829112,
            41829095,
            41842587,
            41837894,
            41829018,
            41830134,
            41829065,
            41830329,
            41829109,
            41829662,
            41832973,
            41831018
        ],
        "B": [
            41832044,
            41834103,
            41852766,
            41831349,
            41836588,
            41831557,
            41837237,
            41833957,
            41833253,
            41830677,
            41832816,
            41833177,
            41836737,
            41831907,
            41867411,
            41832885,
            41833414,
            41837270,
            41834779
        ],
        "G": [
            41866839,
            41868176,
            42077886,
            41877542,
            41872667,
            41951029,
            41921003
        ]
    },
    "name": "F. Disjoint Triangles",
    "statement": "A point to a triangle if it lies inside the triangle or on one of its\r\nsides. Two triangles are if there is no point on the plane that belongs\r\nto both triangles.You are given n points on the plane. No two points\r\ncoincide and no three points are collinear.Find the number of different\r\nways to choose two disjoint triangles with vertices in the given points.\r\nTwo ways which differ only in order of triangles or in order of vertices\r\ninside triangles are considered equal.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define MP make_pair\n#define PB push_back\n#define int long long\n#define st first\n#define nd second\n#define rd third\n#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)\n#define RE(i, n) FOR(i, 1, n)\n#define FORD(i, a, b) for(int i = (a); i >= (b); --i)\n#define REP(i, n) for(int i = 0;i <(n); ++i)\n#define VAR(v, i) __typeof(i) v=(i)\n#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)\n#define ALL(x) (x).begin(), (x).end()\n#define SZ(x) ((int)(x).size())\nusing namespace std;\ntemplate<typename TH> void _dbg(const char* sdbg, TH h) { cerr<<sdbg<<\"=\"<<h<<\"\\n\"; }\ntemplate<typename TH, typename... TA> void _dbg(const char* sdbg, TH h, TA... t) {\n  while(*sdbg != ',')cerr<<*sdbg++; cerr<<\"=\"<<h<<\",\"; _dbg(sdbg+1, t...);\n}\n#ifdef LOCAL\n#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)\n#define debugv(x) {{cerr <<#x <<\" = \"; FORE(itt, (x)) cerr <<*itt <<\", \"; cerr <<\"\\n\"; }}\n#else\n#define debug(...) (__VA_ARGS__)\n#define debugv(x)\n#define cerr if(0)cout\n#endif\n#define next ____next\n#define prev ____prev\n#define left ____left\n#define hash ____hash\ntypedef long long ll;\ntypedef long double LD;\ntypedef pair<int, int> PII;\ntypedef pair<ll, ll> PLL;\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<ll> VLL;\ntypedef vector<pair<int, int> > VPII;\ntypedef vector<pair<ll, ll> > VPLL;\n\ntemplate<class C> void mini(C&a4, C b4){a4=min(a4, b4); }\ntemplate<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }\ntemplate<class T1, class T2>\nostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << \"(\" << pair.first << \", \" << pair.second << \")\";}\ntemplate<class A, class B, class C> struct Triple { A first; B second; C third;\n  bool operator<(const Triple& t) const { if (st != t.st) return st < t.st; if (nd != t.nd) return nd < t.nd; return rd < t.rd; } };\ntemplate<class T> void ResizeVec(T&, vector<int>) {}\ntemplate<class T> void ResizeVec(vector<T>& vec, vector<int> sz) {\n  vec.resize(sz[0]); sz.erase(sz.begin()); if (sz.empty()) { return; }\n  for (T& v : vec) { ResizeVec(v, sz); }\n}\ntypedef Triple<int, int, int> TIII;\ntemplate<class A, class B, class C>\nostream& operator<< (ostream &out, Triple<A, B, C> t) { return out << \"(\" << t.st << \", \" << t.nd << \", \" << t.rd << \")\"; }\ntemplate<class T> ostream& operator<<(ostream& out, vector<T> vec) { out<<\"(\"; for (auto& v: vec) out<<v<<\", \"; return out<<\")\"; }\ntemplate<class T> ostream& operator<<(ostream& out, set<T> vec) { out<<\"(\"; for (auto& v: vec) out<<v<<\", \"; return out<<\")\"; }\ntemplate<class L, class R> ostream& operator<<(ostream& out, map<L, R> vec) { out<<\"(\"; for (auto& v: vec) out<<v<<\", \"; return out<<\")\"; }\n\nstruct Point {\n  int x, y;\n  Point operator-(Point p) { return {x - p.x, y - p.y}; }\n};\nconst int N = 2222;\nPoint pt[N];\nbool InUpper(Point p) {\n  return p.y > 0 || (p.y == 0 && p.x > 0);\n}\nint CrossProd(Point A, Point B) {\n  return A.x * B.y - A.y * B.x;\n}\nint C2(int x) {\n  return x * (x - 1) / 2;\n}\nint32_t main() {\n\n  ios_base::sync_with_stdio(0);\n  cout << fixed << setprecision(10);\n  cerr << fixed << setprecision(10);\n  cin.tie(0);\n  //double beg_clock = 1.0 * clock() / CLOCKS_PER_SEC;\n  \n  int n;\n  cin>>n;\n  RE (i, n) {\n    int x, y;\n    cin>>x>>y;\n    pt[i] = {x, y};\n  }\n  int res = 0;\n  Point orig{0, 0};\n  RE (i, n) {\n    Point cp = pt[i];\n    vector<pair<Point, int>> evs;\n    int cnt_upper = 0;\n    RE (j, n) {\n      pt[j] = pt[j] - cp;\n      cnt_upper += InUpper(pt[j]);\n      if (i != j) {\n        evs.PB({pt[j], 1});\n        evs.PB({orig - pt[j], -1});\n      }\n    }\n    sort(ALL(evs), [&](pair<Point, int>& A, pair<Point, int>& B) {\n      int au = InUpper(A.st);\n      int bu = InUpper(B.st);\n      if (au != bu) {\n        return au > bu;\n      }\n      return CrossProd(A.st, B.st) > 0;\n    });\n    int res_here = 0;\n    for (auto ev : evs) {\n      if (ev.nd == 1) {\n        int lower = n - 1 - cnt_upper;\n        int add = C2(cnt_upper - 1) * C2(lower);\n        res += add;\n        res_here += add;\n        cnt_upper--;\n      } else {\n        cnt_upper++;\n      }\n    }\n    debug(i, res_here);\n  }\n  debug(res);\n  assert(res % 2 == 0);\n  cout<<res / 2<<endl;\n    \n    \n    \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\F. Disjoint Triangles.json",
    "editorial_link": "https://codeforces.com//blog/entry/61323",
    "editorial": "The most challenging part of the problem is to think of the way how to\r\ncount each pair of triangles exactly once.It turns out, that this can be\r\ndone in a nice and geometrical way.Each pair of triangles has exactly\r\ntwo inner tangents between them. Moreover, exactly one of them (if we\r\ndirect tangent from point of the first polygon to the point of the\r\nsecond polygon) leaves the first rectangle on the right side and the\r\nother tangent leaves it on the left side.So let\u00e2\u0080\u0099s brute-force the inner\r\ntangent. If we continue the tangent to draw the line and count the\r\nnumber of points on the left and on the right of it, say and\r\nrespectively, then we simply need to add to our answer, since if we\r\nselect arbitrary pair of vertices on each halfplanes, together with\r\ntangent points we will form a pair of triangles with such a tangent.The\r\nquestion is how to count and for each tangent efficiently. If the points\r\nwould be sorted by direction, perpendicular to the tangent, we could\r\nhave answered this query with binary search (since points of one\r\nhalfplane form a prefix of the sorted array and the other\r\nsuffix).However, if we wrote down all the interesting directions, sort\r\nthem by angle, and make a scanline on it, we could maintain the points\r\nin sorted order.Basically, points and change their order in the sorted\r\narray at the direction , and, since there are no three points on one\r\nline, these points are neighbours in the sorted array at the moment of\r\nthe swap.The complexity is since we need to sort all directions and for\r\neach direction make a binary search on the sorted array.\r\n"
}