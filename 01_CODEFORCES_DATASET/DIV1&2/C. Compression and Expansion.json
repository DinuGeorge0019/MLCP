{"link": "https://codeforces.com//contest/1523/problem/C", "problemId": "1000213", "problem_idx": "C", "shortId": "1523C", "contest_number": "1523", "problem_submissions": {"F": [117916146, 117914065, 117905350, 117900425, 117909780, 117912951, 117923029, 117905457, 117920531, 117920496, 117911483, 117908634, 117907048, 117936734, 117936707, 117936638, 117936633, 117936625, 117936608, 117905940, 117911622, 117911227, 117910828, 117920430, 117916378, 117911950, 117912347, 117936103, 117935723], "G": [117899863, 117912955, 117908386, 117915802, 117906341, 117903204, 117907803, 117932659, 117932628, 117911801, 118597582, 117989759, 117915684, 117936837, 117918793, 117916945, 117917431], "D": [117881477, 117886244, 117886334, 117887661, 118167966, 117918101, 117929591, 117890786, 117890676, 117893739, 118119250, 117887458, 117887290, 117893940, 117890382, 118081143, 117890914, 117883607, 117887959, 117895275, 117888883, 117902109, 117889374], "E": [117878219, 117881962, 117910641, 117881787, 117884807, 117893823, 117886171, 117885405, 117882043, 117890552, 117888754, 117897027, 117898439, 117887443, 117893294, 117903524, 117892701, 117896279, 117896129], "C": [117876664, 117878149, 117877887, 117879093, 117889641, 117882853, 117877348, 117879069, 117877404, 117877723, 117880898, 117876222, 117880296, 117876946, 117880601, 117879874, 117879926, 117880242, 117902829], "B": [117875490, 117875567, 117880589, 117875816, 117876680, 117877360, 117875700, 117876723, 117878349, 117876280, 117877999, 117880072, 117876899, 117875787, 117877756, 117876654, 117875833, 117878179, 117879465], "A": [117874746, 117874821, 117882081, 117874974, 117874835, 117874828, 117874778, 117874933, 117874911, 117874900, 117876005, 117883186, 117874918, 117874908, 117875902, 117874738, 117874753, 117874913, 117876371], "H": [117981868, 117981132, 118023855, 118349130, 117933591, 118312467, 118312428, 119224810]}, "name": "C. Compression and Expansion", "statement": "William is a huge fan of planning ahead. That is why he starts his\r\nmorning routine by creating a nested list of upcoming errands.A valid\r\nnested list is any list which can be created from a list with one item\r\n\"\" by applying some operations. Each operation inserts a new item into\r\nthe list, , just after one of existing items a_1\r\n,.\r\n, a_2\r\n,.\r\n, a_3\r\n,.\r\n,\r\n,\r\ncdots\r\n,\r\n,.\r\n,a_k and can be one of two types: Add an item a_1\r\n,.\r\n, a_2\r\n,.\r\n, a_3\r\n,.\r\n,\r\ncdots\r\n,.\r\n, a_k\r\n,.\r\n, 1 (starting a list of a deeper level), or Add an item a_1\r\n,.\r\n, a_2\r\n,.\r\n, a_3\r\n,.\r\n,\r\ncdots\r\n,.\r\n, (a_k + 1) (continuing the current level). Operation can only be\r\napplied if the list does not contain two identical items afterwards. And\r\nalso, if we consider every item as a sequence of numbers, then the\r\nsequence of items should always remain increasing in lexicographical\r\norder. Examples of valid and invalid lists that are shown in the picture\r\ncan found in the \"\" section.When William decided to save a Word document\r\nwith the list of his errands he accidentally hit a completely different\r\nkeyboard shortcut from the \"\" he wanted to hit. It\u2019s not known exactly\r\nwhat shortcut he pressed but after triggering it all items in the list\r\nwere replaced by a single number: the last number originally written in\r\nthe item number.William wants you to help him restore a fitting original\r\nnested list.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 30.05.2021 17:42:20       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n;\n    cin >> n;\n    vector<int> a;\n    for (int it = 0; it < n; it++) {\n      int x;\n      cin >> x;\n      if (x > 1) {\n        while (!a.empty() && a.back() + 1 != x) {\n          a.pop_back();\n        }\n        assert(!a.empty());\n        a.pop_back();\n      }\n      a.push_back(x);\n      for (int j = 0; j < (int) a.size(); j++) {\n        if (j > 0) {\n          cout << \".\";\n        }\n        cout << a[j];\n      }\n      cout << '\\n';\n    }\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "data structures", "greedy", "implementation", "trees"], "dificulty": "1600", "interactive": false}