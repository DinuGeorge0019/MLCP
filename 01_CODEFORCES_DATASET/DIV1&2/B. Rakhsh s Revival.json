{
    "link": "https://codeforces.com//contest/2034/problem/B",
    "problemId": "3057436",
    "problem_idx": "B",
    "shortId": "2034B",
    "contest_number": "2034",
    "problem_submissions": {
        "G2": [
            294090902,
            294102835,
            294091710
        ],
        "H": [
            294074360,
            294061476,
            294070650,
            294080097,
            294083247,
            294085834,
            294087678,
            294090336,
            294084822,
            294087654,
            294090587,
            294104472,
            294104397,
            294104185,
            294103049,
            294058057,
            294072183,
            294081941,
            294086147,
            294091448
        ],
        "G1": [
            294068700,
            294089598,
            294090555,
            294512628,
            294279844,
            294078743,
            294092614,
            294083324,
            294137051,
            298736856
        ],
        "F2": [
            294044355,
            294048880,
            294057967,
            294058547,
            294044212,
            294052710,
            294062635,
            294059190,
            294064262,
            294068869,
            294068913,
            294056682,
            294087439,
            294054148,
            294055470,
            294067548,
            294048518,
            294098694,
            297729208
        ],
        "F1": [
            294044201,
            294045676,
            294057746,
            294058488,
            294044581,
            294052242,
            294063014,
            294059348,
            294064621,
            294068676,
            294069032,
            294056298,
            294079209,
            294055715,
            294050068,
            294055587,
            294059717,
            294048439,
            294065367,
            294063971
        ],
        "E": [
            294039732,
            294035256,
            294043120,
            294044445,
            294061596,
            294042263,
            294051208,
            294051638,
            294059206,
            294057047,
            294047623,
            294072917,
            294043657,
            294040686,
            294046402,
            294070560,
            294044216,
            294048932,
            294047270
        ],
        "D": [
            294029209,
            294029423,
            294031077,
            294032177,
            294053262,
            294029511,
            294040505,
            294041118,
            294048071,
            294036073,
            294034324,
            294064606,
            294034084,
            294023836,
            294028591,
            294031360,
            294038809,
            294039055
        ],
        "C": [
            294019511,
            294017117,
            294018450,
            294020877,
            294023563,
            294033582,
            294025662,
            294021753,
            294020563,
            294027112,
            294020897,
            294016537,
            294062723,
            294021341,
            294029864,
            294018381,
            294021917,
            294017733,
            294050791,
            294028560
        ],
        "B": [
            294013321,
            294006563,
            294009984,
            294010387,
            294010473,
            294013337,
            294026398,
            294010402,
            294011621,
            294010156,
            294007642,
            294050334,
            294011602,
            294008120,
            294012362,
            294012172,
            294084096,
            294006809,
            294008731
        ],
        "A": [
            294004839,
            294004703,
            294005425,
            294005031,
            294006081,
            294004631,
            294006317,
            294005105,
            294006032,
            294005086,
            294004777,
            294047604,
            294005991,
            294004926,
            294006968,
            294005489,
            294006094,
            294004648,
            294005025
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136579",
    "editorial": "SolutionWe will solve the problem using the following approach: Start\r\nfrom the leftmost spot and move rightwards. Whenever a consecutive\r\nsegment of weak spots (i.e., âs) is found, apply Timar to a segment of\r\nlength , starting from the last index of the weak segment. Repeat this\r\nprocess until no segment of consecutive weak spots remains. The key idea\r\nbehind this solution is that whenever we encounter a block of\r\nconsecutive âs, we need to strengthen it. Since we can apply Timar to a\r\nsegment of length , the optimal strategy is always to apply Timar\r\nstarting at the last index of the block of consecutive âs.Correctness\r\nProof: For any block of consecutive âs, we must apply Timar to at least\r\none index within this block. Hence, the strengthened segment of length\r\nmust overlap with the block of weak spots. Suppose an optimal solution\r\nexists where Timar is applied to a segment starting leftward within the\r\nblock. Suppose we shift this segment one step to the right (closer to\r\nthe end of the block). In that case, the solution remains valid and\r\noptimal since it covers all weak spots in the block while reducing\r\nunnecessary overlap with already-strengthened areas. By always starting\r\nfrom the last index of a block of consecutive âs, this greedy strategy\r\nensures that Timar is used in the minimum number of applications, making\r\nit correct and efficient.\r\n",
    "name": "B. Rakhsh s Revival",
    "statement": "Rostam’s loyal horse, Rakhsh, has seen better days. Once powerful and\r\nfast, Rakhsh has grown weaker over time, struggling to even move. Rostam\r\nworries that if too many parts of Rakhsh’s body lose strength at once,\r\nRakhsh might stop entirely. To keep his companion going, Rostam decides\r\nto strengthen Rakhsh, bit by bit, so no part of his body is too frail\r\nfor too long. Imagine Rakhsh’s body as a line of spots represented by a\r\nbinary string s of length n, where each 0 means a weak spot and each 1\r\nmeans a strong one. Rostam’s goal is to make sure that no interval of m\r\nconsecutive spots is entirely weak (all 0s).Luckily, Rostam has a\r\nspecial ability called Timar, inherited from his mother Rudabeh at\r\nbirth. With Timar, he can select any segment of length k and instantly\r\nstrengthen all of it (changing every character in that segment to 1).\r\nThe challenge is to figure out the minimum number of times Rostam needs\r\nto use Timar to keep Rakhsh moving, ensuring there are no consecutive\r\nentirely weak spots of length m.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define L(i, j, k) for(int i = (j); i <= (k); ++i)#define R(i, j, k) for(int i = (j); i >= (k); --i)#define ll long long #define sz(a) ((int) (a).size())#define pb emplace_back#define me(a, x) memset(a, x, sizeof(a))#define vi vector<int>#define ull unsigned long long#define i128 __int128using namespace std;const int N = 1e6 + 7;int n, m, k;string s;void Main() {\tcin >> n >> m >> k;\tcin >> s;\tvi tmp;\tint cnt = 0, ans = 0;\tL(i, 0, sz(s) - 1) {\t\tif(s[i] == '0') {\t\t\t++cnt;\t\t\tif(cnt >= m) {\t\t\t\tL(j, i, i + k - 1) if(j < sz(s)) {\t\t\t\t\ts[j] = '1';\t\t\t\t}\t\t\t\tcnt = 0;\t\t\t\t++ans;\t\t\t}\t\t} else {\t\t\tcnt = 0;\t\t}\t}\tcout << ans << '\\n';}int main() {\tios :: sync_with_stdio(false);\tcin.tie(0); cout.tie(0);\tint t; cin >> t; while(t--) Main();\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "implementation",
        "two pointers"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\B. Rakhsh s Revival.json",
    "hint": []
}