{
    "link": "https://codeforces.com//contest/1774/problem/B",
    "problemId": "1697942",
    "problem_idx": "B",
    "shortId": "1774B",
    "contest_number": "1774",
    "problem_submissions": {
        "G": [
            185692788,
            185688701,
            185709786,
            185704068,
            185700930,
            185701804,
            185702434,
            185710209,
            185706872,
            185904256,
            185795210,
            185793397,
            185819250
        ],
        "F2": [
            185676745,
            185670281,
            185675729,
            185668671,
            185681524,
            185686567,
            185677180,
            185669013,
            185668157,
            185689966,
            185688723,
            185695825,
            185693474,
            185692885,
            185688234,
            185691854,
            185681271,
            185694474,
            185685579
        ],
        "F1": [
            185676593,
            185670463,
            185663684,
            185668833,
            185681601,
            185716882,
            185686479,
            185674297,
            185669194,
            185668049,
            185679440,
            185670075,
            185683714,
            185693266,
            185692482,
            185683082,
            185681999,
            185681061,
            185687683,
            185683570
        ],
        "E": [
            185655499,
            185660825,
            185651479,
            185656124,
            185655058,
            185662458,
            185662357,
            185652494,
            185657012,
            185662649,
            185653972,
            185662778,
            185664782,
            185668838,
            185669645,
            185656956,
            185667038,
            185672369,
            185663098
        ],
        "D": [
            185649610,
            185653248,
            185643125,
            185650993,
            185649142,
            185653531,
            185657439,
            185657348,
            185650869,
            185657200,
            185661330,
            185657425,
            185655644,
            185661084,
            185663734,
            185649769,
            185662028,
            185662351,
            185658693
        ],
        "A": [
            185644231,
            185636102,
            185635462,
            185635619,
            185635678,
            185635790,
            185637888,
            185635854,
            185636970,
            185636959,
            185635664,
            185635988,
            185635613,
            185637777,
            185636615,
            185635469,
            185636037,
            185640093,
            185635898
        ],
        "B": [
            185642990,
            185641490,
            185645977,
            185640363,
            185639666,
            185641314,
            185642797,
            185639691,
            185640833,
            185692584,
            185643672,
            185638403,
            185645169,
            185646911,
            185640445,
            185643451,
            185646071,
            185642995
        ],
        "C": [
            185639008,
            185648162,
            185647183,
            185644645,
            185643844,
            185645738,
            185648229,
            185644184,
            185645698,
            185650776,
            185648822,
            185648683,
            185646713,
            185653638,
            185655962,
            185643940,
            185653656,
            185654108,
            185651616
        ]
    },
    "name": "B. Coloring",
    "statement": "Cirno_9baka has a paper tape with n cells in a row on it. As he thinks\r\nthat the blank paper tape is too dull, he wants to paint these cells\r\nwith m kinds of colors. For some aesthetic reasons, he thinks that the\r\ni-th color must be used exactly a_i times, and for every k consecutive\r\ncells, their colors have to be distinct. Help Cirno_9baka to figure out\r\nif there is such a way to paint the cells.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n#include <array>\nusing namespace std;\n\n#ifdef LOCAL\n\t#define eprintf(...) {fprintf(stderr, __VA_ARGS__);fflush(stderr);}\n#else\n\t#define eprintf(...) 42\n#endif\n\nusing ll = long long;\nusing ld = long double;\nusing uint = unsigned int;\nusing ull = unsigned long long;\ntemplate<typename T>\nusing pair2 = pair<T, T>;\nusing pii = pair<int, int>;\nusing pli = pair<ll, int>;\nusing pll = pair<ll, ll>;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll myRand(ll B) {\n\treturn (ull)rng() % B;\n}\n\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nclock_t startTime;\ndouble getCurrentTime() {\n\treturn (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\nconst int N = 500500;\nint n, m, k;\nint a[N];\n\nvoid solve() {\n\tscanf(\"%d%d%d\", &m, &n, &k);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%d\", &a[i]);\n\tsort(a, a + n);\n\treverse(a, a + n);\n\tbool ok = k <= n;\n\tfor (int i = 0; i < n; i++) {\n\t\tint w = m / k;\n\t\tif (i < m % k) w++;\n\t\tif (w < a[i]) {\n\t\t\tok = false;\n\t\t}\n\t}\n\tif (ok)\n\t\tprintf(\"Yes\\n\");\n\telse\n\t\tprintf(\"No\\n\");\n}\n\nint main()\n{\n\tstartTime = clock();\n//\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) solve();\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\B. Coloring.json",
    "editorial_link": "https://codeforces.com//blog/entry/110184",
    "editorial": "SolutionFirst, We can divide cells into segments that except the last\r\nsegment, all segments have length . Then in each segment, the colors in\r\nit are pairwise different. Itâs easy to find any should be smaller than\r\nor equal to .Then we can count the number of which is equal to . This\r\nnumber must be smaller than or equal to , which is the length of the\r\nlast segment.All that satisfies the conditions above is valid. We can\r\nconstruct a coloring using the method below:First, we pick out all\r\ncolors that , then we use color to color the -th cell in each\r\nsegment.Then we pick out all colors that and use these colors to color\r\nthe rest of cells with cyclic order(i.e. color -th cell of the first\r\nsegment, of second the segment ... of the segment, and let . when one\r\ncolor is used up, we begin to use the next color)At last, we pick out\r\nall colors that , and color them with the cyclic order.This method will\r\nalways give a valid construction.\r\n",
    "hint": []
}