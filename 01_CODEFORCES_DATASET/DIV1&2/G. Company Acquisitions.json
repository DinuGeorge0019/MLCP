{
    "link": "https://codeforces.com//contest/1025/problem/G",
    "problemId": "209742",
    "problem_idx": "G",
    "shortId": "1025G",
    "contest_number": "1025",
    "problem_submissions": {
        "E": [
            41858738,
            41856429,
            41850768,
            41855385,
            41852484,
            41858727,
            41848268,
            41855122,
            41883001,
            41858915,
            41855225,
            41852858,
            41868516,
            41860862,
            41856872,
            41860887,
            41851802
        ],
        "F": [
            41848629,
            41847210,
            41861209,
            41860806,
            41863443,
            41862402,
            41853998,
            41862178,
            41845081,
            41877837,
            41887505,
            41887279,
            41887255,
            41878485,
            41856047,
            41861957,
            41858912,
            41906629,
            41858319,
            41868413
        ],
        "D": [
            41845183,
            41851596,
            41961545,
            41841784,
            41841903,
            41840812,
            41849010,
            41840988,
            41846701,
            41841230,
            41874808,
            41841578,
            41847099,
            41842212,
            41945631,
            41911317,
            41911277,
            41878022,
            41877990,
            41877935,
            41874708,
            41874699,
            41874650,
            41873983,
            41873792,
            41873701,
            41873477,
            41849952,
            41843783,
            41842954,
            41842230,
            41844472,
            41848949,
            41844612
        ],
        "C": [
            41839685,
            41838607,
            41835815,
            41834650,
            41838762,
            41837233,
            41866845,
            41840107,
            41835687,
            41833279,
            41836241,
            41835918,
            41839785,
            41834860,
            41839690,
            41836558,
            41837913,
            41843576,
            41837629
        ],
        "A": [
            41835541,
            41829219,
            41829281,
            41828966,
            41829689,
            41834202,
            41835387,
            41829112,
            41829095,
            41842587,
            41837894,
            41829018,
            41830134,
            41829065,
            41830329,
            41829109,
            41829662,
            41832973,
            41831018
        ],
        "B": [
            41832044,
            41834103,
            41852766,
            41831349,
            41836588,
            41831557,
            41837237,
            41833957,
            41833253,
            41830677,
            41832816,
            41833177,
            41836737,
            41831907,
            41867411,
            41832885,
            41833414,
            41837270,
            41834779
        ],
        "G": [
            41866839,
            41868176,
            42077886,
            41877542,
            41872667,
            41951029,
            41921003
        ]
    },
    "name": "G. Company Acquisitions",
    "statement": "There are n startups. Startups can be or . If a startup is , then that\r\nmeans it has exactly one startup that it is following. An active startup\r\ncan have arbitrarily many acquired startups that are following it. An\r\nactive startup cannot follow any other startup.The following steps\r\nhappen until there is exactly one active startup. The following sequence\r\nof steps takes exactly 1 day. Two distinct active startups A, B, are\r\nchosen uniformly at random. A fair coin is flipped, and with equal\r\nprobability, A acquires B or B acquires A (i.e. if A acquires B, then\r\nthat means B\u2019s state changes from active to acquired, and its starts\r\nfollowing A). When a startup changes from active to acquired, all of its\r\npreviously acquired startups become active. For example, the following\r\nscenario can happen: Let\u2019s say A, B are active startups. C, D, E are\r\nacquired startups under A, and F, G are acquired startups under B: If A\r\nacquires B, then the state will be A, F, G are active startups. C, D, E,\r\nB are acquired startups under A. F and G have no acquired startups: If\r\ninstead, B acquires A, then the state will be B, C, D, E are active\r\nstartups. F, G, A are acquired startups under B. C, D, E have no\r\nacquired startups: You are given the initial state of the startups. For\r\neach startup, you are told if it is either acquired or active. If it is\r\nacquired, you are also given the index of the active startup that it is\r\nfollowing.You\u2019re now wondering, what is the expected number of days\r\nneeded for this process to finish with exactly one active startup at the\r\nend.It can be shown the expected number of days can be written as a\r\nrational number P/Q, where P and Q are co-prime integers, and Q\r\nnot= 0\r\npmod{10^9+7}. Return the value of P\r\ncdot Q^{-1} modulo 10^9+7.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst ll mod = 1000000007;\nconst ll inv2 = (mod + 1) / 2;\n\nll qpow(ll a, ll n) {\n\tll r = 1;\n\tfor (; n; n >>= 1) {\n\t\tif (n & 1) r = r * a % mod;\n\t\ta = a * a % mod;\n\t}\n\treturn r;\n}\n\nconst int N = 510;\nll a[N][N];\nint p[N], cnt[N];\nint n;\n\nvoid solve() {\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j <= n; j++)\n\t\t\tif (a[i][j] < 0) a[i][j] += mod;\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = i; j < n; j++) if (a[j][i]) {\n\t\t\t\tfor (int k = 0; k <= n; k++) {\n\t\t\t\t\tswap(a[i][k], a[j][k]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\tint inv = qpow(a[i][i], mod - 2);\n\t\tfor (int k = 0; k <= n; k++) a[i][k] = a[i][k] * inv % mod;\n\t\tfor (int j = i + 1; j < n; j++) if (a[j][i]) {\n\t\t\t\tint r = a[j][i];\n\t\t\t\tfor (int k = 0; k <= n; k++) {\n\t\t\t\t\ta[j][k] = (a[j][k] - r * a[i][k]) % mod;\n\t\t\t\t\tif (a[j][k] < 0) a[j][k] += mod;\n\t\t\t\t}\n\t\t\t}\n\t}\n\tfor (int i = n - 1; i >= 0; i--) {\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\ta[j][n] = (a[j][n] - a[j][i] * a[i][n]) % mod;\n\t\t\tif (a[j][n] < 0) a[j][n] += mod;\n\t\t}\n\t}\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\ta[i][i] = 1;\n\t\tif (i != n - 1) {\n\t\t\ta[i][i + 1] = (a[i][i + 1] - inv2) % mod;\n\t\t\ta[i][0] = (a[i][0] - i * inv2) % mod;\n\t\t\ta[i][n] = inv2;\n\t\t}\n\t}\n\tsolve();\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%d\", p + i);\n\t\tif (p[i] != -1) cnt[p[i] - 1]++;\n\t}\n\tll ans = 0;\n\tfor (int i = 0; i < n; i++) if (p[i] == -1)\n\t\t\tans = (ans + a[cnt[i]][n]) % mod;\n\tprintf(\"%lld\\n\", ans);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "dificulty": "3200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\G. Company Acquisitions.json",
    "editorial_link": "https://codeforces.com//blog/entry/61323",
    "editorial": "You can solve this most likely by brute forcing small cases and looking\r\nfor a pattern.Here\u00e2\u0080\u0099s a proof of the pattern. Let\u00e2\u0080\u0099s define a potential of\r\na startup with followers to be equal to . For example, an active startup\r\nwith zero followers has potential zero.Now, in one day, if we choose a\r\nstartup with followers, and a startup with followers, the expected\r\nchange in sum of potentials is equal to , regardless of the values of\r\nand .The potential of the final state is , and we can compute the\r\ncurrent potential in linear time, so the expected number of turns is the\r\ndifference between them.To prove this more rigorously, we can use show\r\nthat this process is a martingale, so we can use\r\nhttps://en.wikipedia.org/wiki/Optional_stopping_theorem to show that the\r\nexpected number of days is exactly equal to this difference.\r\n"
}