{
    "link": "https://codeforces.com//contest/1804/problem/A",
    "problemId": "1824140",
    "problem_idx": "A",
    "shortId": "1804A",
    "contest_number": "1804",
    "problem_submissions": {
        "H": [
            197133699,
            197211600
        ],
        "G": [
            197106837,
            197116479,
            197124948,
            197127592,
            197122958,
            197137640,
            197134544,
            197138362
        ],
        "F": [
            197093293,
            197105349,
            197095528,
            197104786,
            197106624,
            197098643,
            197101524,
            197103930,
            197102162,
            197105107,
            197108552,
            197108666,
            197107628,
            197142671,
            197140184,
            197139967,
            197139883,
            197139641,
            197111482,
            197111626,
            197113675,
            197111909,
            197110044,
            197110987,
            197113933
        ],
        "E": [
            197089405,
            197085286,
            197090524,
            197097633,
            197097337,
            197091345,
            197092803,
            197096473,
            197096893,
            197095376,
            197096756,
            197096855,
            197096490,
            197096936,
            197101267,
            197098474,
            197101399,
            197096360,
            197103528,
            197097046
        ],
        "D": [
            197081706,
            197080440,
            197082836,
            197086161,
            197088893,
            197081349,
            197083999,
            197084952,
            197086950,
            197076993,
            197086858,
            197086874,
            197084897,
            197084889,
            197084721,
            197084970,
            197089163,
            197084662,
            197086535,
            197082927
        ],
        "C": [
            197078079,
            197076920,
            197078785,
            197081523,
            197083238,
            197076107,
            197077574,
            197078670,
            197077463,
            197082879,
            197080775,
            197081089,
            197078608,
            197079622,
            197080414,
            197078487,
            197079270,
            197080239,
            197080507,
            197079932
        ],
        "B": [
            197075523,
            197075248,
            197075383,
            197077168,
            197080868,
            197074547,
            197074457,
            197076648,
            197075635,
            197080800,
            197077487,
            197076188,
            197075795,
            197076995,
            197076635,
            197075839,
            197076655,
            197076988,
            197077650,
            197075789
        ],
        "A": [
            197073420,
            197073942,
            197073446,
            197073814,
            197078430,
            197073370,
            197073351,
            197073646,
            197073456,
            197078319,
            197074505,
            197073977,
            197073328,
            197073488,
            197073501,
            197073461,
            197073950,
            197074331,
            197075653,
            197073687
        ]
    },
    "name": "A. Lame King",
    "statement": "You are given a checkerboard of size 201\r\ntimes 201, i. e. it has 201 rows and 201 columns. The rows of this\r\ncheckerboard are numbered from -100 to 100 from bottom to top. The\r\ncolumns of this checkerboard are numbered from -100 to 100 from left to\r\nright. The notation (r, c) denotes the cell located in the r-th row and\r\nthe c-th column.There is a king piece at position (0, 0) and it wants to\r\nget to position (a, b) as soon as possible. In this problem our king is\r\nlame. Each second, the king makes exactly one of the following five\r\nmoves. Skip move. King\u2019s position remains unchanged. Go up. If the\r\ncurrent position of the king is (r, c) he goes to position (r + 1, c).\r\nGo down. Position changes from (r, c) to (r - 1, c). Go right. Position\r\nchanges from (r, c) to (r, c + 1). Go left. Position changes from (r, c)\r\nto (r, c - 1). King is to make moves that put him outside of the board.\r\nThe important consequence of the king being lame is that he is to make\r\nthe same move during two consecutive seconds. For example, if the king\r\ngoes right, the next second he can only skip, go up, down, or left.What\r\nis the minimum number of seconds the lame king needs to reach position\r\n(a, b)?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int a, b;\n    std::cin >> a >> b;\n    \n    a = std::abs(a);\n    b = std::abs(b);\n    if (a < b) {\n        std::swap(a, b);\n    }\n    int ans = a + b + std::max(0, a - b - 1);\n    std::cout << ans << \"\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\A. Lame King.json",
    "editorial_link": "https://codeforces.com//blog/entry/113830",
    "editorial": "Observation 1. Let |a| = |b|. The king can reach (a, b) in 2\r\ncdot |a| moves by alternating moves along rows and moves along\r\ncolumns.Observation 2. Let |a|\r\nne |b|, in particular a > b\r\ngeq 0 (without loss of generality due to the board symmetry). The king\r\ncan reach (a, b) in 2a - 1 moves. He moves towards a on turns 1, 3, 5,\r\nldots, 2a - 1. The remaining a - 1 moves are enough to reach b. Finally,\r\nthe remaining slots can be filled with \"skip\" moves.Thus, the answer is\r\n|a| + |b| if |a| = |b| and 2\r\ncdot\r\nmax(|a|, |b|) - 1 otherwise.\r\n"
}