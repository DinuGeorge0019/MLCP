{
    "link": "https://codeforces.com//contest/2096/problem/C",
    "problemId": "3340247",
    "problem_idx": "C",
    "shortId": "2096C",
    "contest_number": "2096",
    "problem_submissions": {
        "G": [
            316282702,
            316284895,
            316262027,
            316272006,
            316277752,
            316279192,
            316281051,
            316278962,
            316288631,
            316286941,
            316281423,
            316285489
        ],
        "H": [
            316270847,
            316275626,
            316275749,
            316259798,
            316291783,
            316275154,
            316294187,
            316318441,
            316280378,
            316273398,
            316272387,
            316264455,
            316268497
        ],
        "F": [
            316260466,
            316272229,
            316301054,
            316261161,
            316293906,
            316262764,
            316270685,
            316270410,
            316276972,
            316268796,
            316271292,
            316272567,
            316270406,
            316288539,
            316420860
        ],
        "E": [
            316252685,
            316254528,
            316246634,
            316245551,
            316253683,
            316248237,
            316253871,
            316253467,
            316286029,
            316259336,
            316258807,
            316257597,
            316262285,
            316279990,
            316248771,
            316261220,
            316264600
        ],
        "D": [
            316249272,
            316248561,
            316238770,
            316241076,
            316247323,
            316244879,
            316247444,
            316253040,
            316244467,
            316252321,
            316251224,
            316250728,
            316247929,
            316262413,
            316244616,
            316248632,
            316249579
        ],
        "B": [
            316246564,
            316237445,
            316236137,
            316235278,
            316239997,
            316236170,
            316236360,
            316239677,
            316237672,
            316238226,
            316238848,
            316239973,
            316237530,
            316246361,
            316237890,
            316237351,
            316237544
        ],
        "C": [
            316244558,
            316245713,
            316242364,
            316239186,
            316245292,
            316242382,
            316244813,
            316248620,
            316240708,
            316244245,
            316245964,
            316243380,
            316243470,
            316251718,
            316241648,
            316242574,
            316244356
        ],
        "A": [
            316234703,
            316234789,
            316234688,
            316234623,
            316235661,
            316234613,
            316234706,
            316234661,
            316235315,
            316235129,
            316234677,
            316235246,
            316234969,
            316235161,
            316235908,
            316234860,
            316235003
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142070",
    "editorial": "Step 1We are given an matrix of positive integers. There are two types\r\nof operations we can perform: When we hire worker from company A, let’s\r\ncall it row operation . When we hire worker from company B, let’s call\r\nit column operation . Each row and column operation can be performed at\r\nmost once.After performing the operations, the matrix must satisfy the\r\nfollowing: Horizontal Condition: No two horizontally adjacent elements\r\nare the same. Vertical Condition: No two vertically adjacent elements\r\nare the same. Suppose the matrix does not satisfy the Horizontal\r\nCondition, so there is a position such that .What operations can we\r\nperform to fix this? Don’t worry about other positions for now. We just\r\nwant .\r\n",
    "name": "C. Wonderful City",
    "statement": "You are the proud leader of a city in Ancient Berland. There are n^2\r\nbuildings arranged in a grid of n rows and n columns. The height of the\r\nbuilding in row i and column j is h_{i, j}.The city is if no two\r\nadjacent by side buildings have the same height. In other words, it must\r\nsatisfy the following: There exist a position (i, j) (1\r\nleq i\r\nleq n, 1\r\nleq j\r\nleq n - 1) such that h_{i, j} = h_{i, j + 1}. There exist a position (i,\r\nj) (1\r\nleq i\r\nleq n - 1, 1\r\nleq j\r\nleq n) such that h_{i, j} = h_{i + 1, j}. There are n workers at company\r\nA, and n workers at company B. Each worker can be hired .It costs a_i\r\ncoins to hire worker i at company A. After hiring, worker i will:\r\nIncrease the heights of all buildings in row i by 1. In other words,\r\nincrease h_{i, 1}, h_{i, 2},\r\nldots, h_{i, n} by 1. It costs b_j coins to hire worker j at company B.\r\nAfter hiring, worker j will: Increase the heights of all buildings in\r\ncolumn j by 1. In other words, increase h_{1, j}, h_{2, j},\r\nldots, h_{n, j} by 1. Find the minimum number of coins needed to make\r\nthe city beautiful, or report that it is impossible.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Wonderful City.json",
    "hint": []
}