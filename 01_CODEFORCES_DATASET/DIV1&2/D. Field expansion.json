{"link": "https://codeforces.com//contest/799/problem/D", "problemId": "105986", "problem_idx": "D", "shortId": "799D", "contest_number": "799", "problem_submissions": {"E": [27057040, 27057010, 27056967, 27026697, 27023753, 27025405, 27024865, 27030424, 27025641, 27029307, 27027415, 27027135, 27026445, 27030147, 27029255, 27030374, 27031127, 27029721, 27029453, 27032096], "G": [27036616], "F": [27030563, 27037422, 27034476, 27039260, 27041363, 27040801, 27291324], "D": [27022631, 27022286, 27020681, 27021344, 27021554, 27023148, 27022862, 27020910, 27023070, 27022767, 27023676, 27022207, 27023905, 27022671, 27022391, 27023340, 27022748, 27022866], "B": [27019416, 27017594, 27035489, 27019723, 27017243, 27017666, 27017468, 27016992, 27017464, 27018383, 27017219, 27017196, 27017940, 27020412, 27017770, 27018390, 27017823, 27017563], "C": [27018858, 27019675, 27018439, 27017585, 27019861, 27019164, 27019715, 27019543, 27019587, 27021111, 27021089, 27019694, 27020343, 27018899, 27020067, 27020926, 27019896, 27020090], "A": [27018375, 27016569, 27037894, 27018311, 27016502, 27016795, 27016557, 27016497, 27016519, 27016617, 27016531, 27016564, 27016580, 27016596, 27016533, 27016606, 27016598, 27016653]}, "name": "D. Field expansion", "statement": "In one of the games Arkady is fond of the game process happens on a\r\nrectangular field. In the game process Arkady can buy extensions for his\r\nfield, each extension enlarges one of the field sizes in a particular\r\nnumber of times. Formally, there are extensions, the -th of them\r\nmultiplies the width or the length (by Arkady\u2019s choice) by . Each\r\nextension can\u2019t be used more than once, the extensions can be used in\r\nany order.Now Arkady\u2019s field has size . He wants to enlarge it so that\r\nit is possible to place a rectangle of size on it (along the width or\r\nalong the length, with sides parallel to the field sides). Find the\r\nminimum number of extensions needed to reach Arkady\u2019s goal.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int inf = (int) 1e9;\n\nconst int N = 1234567;\n\nint x, y;\nint z[N];\n\nbool check(int pos, long long cx, long long cy, int last, int type) {\n  if (pos == -1) {\n    if (cx >= x && cy >= y) {\n      return true;\n    }\n    return false;\n  }\n  if (z[pos] != last || type != 1) {\n    if (check(pos - 1, min(cx * z[pos], x * 1LL), cy, z[pos], 0)) {\n      return true;\n    }\n  }\n  return check(pos - 1, cx, min(cy * z[pos], y * 1LL), z[pos], 1);\n}\n\nint main() {\n  int a, b, h, w, n;\n  scanf(\"%d %d %d %d %d\", &a, &b, &h, &w, &n);\n  for (int i = 0; i < n; i++) {\n    scanf(\"%d\", z + i);\n  }\n  sort(z, z + n);\n  reverse(z, z + n);\n  int ans = inf;\n  for (int rot = 0; rot < 2; rot++) {\n    x = (a + h - 1) / h;\n    y = (b + w - 1) / w;\n    if (x == 1 && y == 1) {\n      ans = 0;\n      break;\n    }\n    long long prod = 1;\n    bool flag = false;\n    for (int i = 0; i < n; i++) {\n      prod *= z[i];\n      if (prod >= x * y) {\n        flag = true;\n      }\n      if (flag) {\n        if (check(i, 1, 1, -1, -1)) {\n          ans = min(ans, i + 1);\n          break;\n        }\n      }\n    }\n    swap(h, w);\n  }\n  printf(\"%d\\n\", ans == inf ? -1 : ans);\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "dp", "meet-in-the-middle"], "dificulty": "2100", "interactive": false}