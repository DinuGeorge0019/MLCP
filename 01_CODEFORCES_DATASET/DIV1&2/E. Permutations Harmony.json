{
    "link": "https://codeforces.com//contest/2034/problem/E",
    "problemId": "3057439",
    "problem_idx": "E",
    "shortId": "2034E",
    "contest_number": "2034",
    "problem_submissions": {
        "G2": [
            294090902,
            294102835,
            294091710
        ],
        "H": [
            294074360,
            294061476,
            294070650,
            294080097,
            294083247,
            294085834,
            294087678,
            294090336,
            294084822,
            294087654,
            294090587,
            294104472,
            294104397,
            294104185,
            294103049,
            294058057,
            294072183,
            294081941,
            294086147,
            294091448
        ],
        "G1": [
            294068700,
            294089598,
            294090555,
            294512628,
            294279844,
            294078743,
            294092614,
            294083324,
            294137051,
            298736856
        ],
        "F2": [
            294044355,
            294048880,
            294057967,
            294058547,
            294044212,
            294052710,
            294062635,
            294059190,
            294064262,
            294068869,
            294068913,
            294056682,
            294087439,
            294054148,
            294055470,
            294067548,
            294048518,
            294098694,
            297729208
        ],
        "F1": [
            294044201,
            294045676,
            294057746,
            294058488,
            294044581,
            294052242,
            294063014,
            294059348,
            294064621,
            294068676,
            294069032,
            294056298,
            294079209,
            294055715,
            294050068,
            294055587,
            294059717,
            294048439,
            294065367,
            294063971
        ],
        "E": [
            294039732,
            294035256,
            294043120,
            294044445,
            294061596,
            294042263,
            294051208,
            294051638,
            294059206,
            294057047,
            294047623,
            294072917,
            294043657,
            294040686,
            294046402,
            294070560,
            294044216,
            294048932,
            294047270
        ],
        "D": [
            294029209,
            294029423,
            294031077,
            294032177,
            294053262,
            294029511,
            294040505,
            294041118,
            294048071,
            294036073,
            294034324,
            294064606,
            294034084,
            294023836,
            294028591,
            294031360,
            294038809,
            294039055
        ],
        "C": [
            294019511,
            294017117,
            294018450,
            294020877,
            294023563,
            294033582,
            294025662,
            294021753,
            294020563,
            294027112,
            294020897,
            294016537,
            294062723,
            294021341,
            294029864,
            294018381,
            294021917,
            294017733,
            294050791,
            294028560
        ],
        "B": [
            294013321,
            294006563,
            294009984,
            294010387,
            294010473,
            294013337,
            294026398,
            294010402,
            294011621,
            294010156,
            294007642,
            294050334,
            294011602,
            294008120,
            294012362,
            294012172,
            294084096,
            294006809,
            294008731
        ],
        "A": [
            294004839,
            294004703,
            294005425,
            294005031,
            294006081,
            294004631,
            294006317,
            294005105,
            294006032,
            294005086,
            294004777,
            294047604,
            294005991,
            294004926,
            294006968,
            294005489,
            294006094,
            294004648,
            294005025
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136579",
    "editorial": "Solution Step 1: There are positions that must be equal, and their sum\r\nis . Hence, each position must be . Additionally, there must be distinct\r\npermutations, so . Step 2: For even , we can group permutations into\r\ndouble handles, where each group corresponds to a solution for . Then,\r\npick handles. The match for permutation is . Step 3: For , must be .\r\nSymmetrically, cannot be . Solutions for other odd will now be provided.\r\nStep 4: To construct an answer for and , consider the following derived\r\nusing a greedy approach: 1 2 3 4 5 2 1 1 Step 5: Now, combine the\r\nsolution for even and the solution by selecting the 3 permutations and\r\nother handles.\r\n",
    "name": "E. Permutations Harmony",
    "statement": "Rayan wants to present a gift to Reyhaneh to win her heart. However,\r\nReyhaneh is particular and will only accept a .We define a as a set of k\r\npermutations p_1, p_2,\r\nldots, p_k of size n such that for every pair of indices i and j (where\r\n1\r\nleq i, j\r\nleq n), the following condition holds: p_1[i] + p_2[i] +\r\nldots + p_k[i] = p_1[j] + p_2[j] +\r\nldots + p_k[j] Your task is to help Rayan by either providing a valid\r\nfor given values of n and k or by determining that such a set does not\r\nexist.We call a sequence of length n a permutation if it contains every\r\ninteger from 1 to n exactly once.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define L(i, j, k) for(int i = (j); i <= (k); ++i)#define R(i, j, k) for(int i = (j); i >= (k); --i)#define ll long long #define sz(a) ((int) (a).size())#define pb emplace_back#define me(a, x) memset(a, x, sizeof(a))#define vi vector<int>#define ull unsigned long long#define i128 __int128using namespace std;const int N = 1e6 + 7;int n, k;int p[N];set<vi>st;void Main() {\tst.clear();\tcin >> n >> k;\tif(n == 1) {\t\tif(k == 1) {\t\t\tcout << \"YES\\n1\\n\";\t\t\treturn;\t\t}\t\tcout<<\"NO\\n\";\t\treturn;\t}\tvi p(n);\tiota(p.begin(), p.end(), 1);\tif(k % 2 == 1) {\t\tif(n % 2 == 0) {\t\t\tcout << \"NO\\n\";\t\t\treturn;\t\t}\t\tvi A(n);\t\tvi B(n);\t\tvi C(n);\t\tL(i, 0, n - 1) A[i] = i + 1;\t\tL(i, 0, n / 2 - 1) B[i] = i + n / 2 + 2;\t\tL(i, 0, n / 2) B[i + n / 2] = i + 1;\t\tL(i, 0, n - 1) C[i] = 3 * (n + 1) / 2 - A[i] - B[i];\t\t// L(i, 0, n - 1) cout << A[i] << ' ' << B[i] << ' ' << C[i] << endl;\t\tst.insert(A);\t\tst.insert(B);\t\tst.insert(C);\t}\t// cout << k  << ' ' << sz(st) << endl;\tdo {\t\t// cout << k << ' ' << sz(st) << endl;\t\t// for(auto u : p) {\t\t// \tcout << u << ' ';\t\t// }\t\t// cout <<endl;\t\tvi iv(n);\t\tL(i, 0, n - 1) iv[i] = n - p[i] + 1;\t\tif(st.count(p) || st.count(iv)) {\t\t\tcontinue;\t\t}\t\tst.insert(p);\t\tst.insert(iv);\t} while(k > sz(st) && next_permutation(p.begin(), p.end()));\tif(k == sz(st)) {\t\tcout << \"YES\\n\";\t\tfor(auto u : st) {\t\t\tfor(auto v : u) cout << v << ' ';\t\t\tcout << '\\n';\t\t}\t} else {\t\tcout << \"NO\\n\";\t}}int main() {\tios :: sync_with_stdio(false);\tcin.tie(0); cout.tie(0);\tint t; cin >> t; while(t--) Main();\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "constructive algorithms",
        "greedy",
        "hashing",
        "math"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\E. Permutations Harmony.json"
}