{"link": "https://codeforces.com//contest/1037/problem/E", "problemId": "214574", "problem_idx": "E", "shortId": "1037E", "contest_number": "1037", "problem_submissions": {"G": [42400284, 42399505, 42393700, 42391956, 42395688, 49109531, 42416815, 42416802, 42408231, 42478375, 42723385, 42723256], "H": [42390789, 42393047, 42400959, 42399660, 42398441, 42399087, 42414998, 42453023, 42876495, 42876025, 42875988, 42875931], "E": [42383633, 42376516, 42374024, 42375460, 42374374, 42376325, 42382856, 42374364, 42376990, 42377973, 42378251, 42378271, 42378643, 42380819, 42380647, 42383308, 42382412, 42381355], "F": [42381395, 42382506, 42383872, 42380708, 42386216, 42379786, 42391156, 42378290, 42387714, 42379959, 42384150, 42386649, 42388704, 42386435, 42387614, 42390065, 42389970, 42390483], "D": [42369087, 42370798, 42380041, 42371136, 42379827, 42374961, 42370290, 42370315, 42380263, 42370259, 42374008, 42373176, 42374905, 42371349, 42379998, 42373150, 42374030], "C": [42367060, 42368485, 42368461, 42367940, 42368563, 42368341, 42378567, 42367842, 42367459, 42369272, 42375102, 42369783, 42370363, 42370761, 42367752, 42376902, 42370198, 42370636], "B": [42366092, 42367373, 42367083, 42366507, 42366793, 42366735, 42367983, 42366366, 42366278, 42367057, 42372146, 42367428, 42368851, 42367360, 42366696, 42366630, 42368278, 42367696], "A": [42365839, 42365922, 42366199, 42365850, 42365879, 42366070, 42366134, 42365823, 42365810, 42366029, 42366879, 43951943, 42366275, 42367664, 42365933, 42365869, 42365891, 42366540, 42366060]}, "name": "E. Trips", "statement": "There are n persons who initially don\u2019t know each other. On each\r\nmorning, two of them, who were not friends before, become friends.We\r\nwant to plan a trip for every evening of m days. On each trip, you have\r\nto select a group of people that will go on the trip. For every person,\r\none of the following should hold: Either this person does not go on the\r\ntrip, Or at least k of his friends also go on the trip. Note that the\r\nfriendship is not transitive. That is, if a and b are friends and b and\r\nc are friends, it does not necessarily imply that a and c are\r\nfriends.For each day, find the maximum number of people that can go on\r\nthe trip on that day.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 02.09.2018 18:15:55       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n, m, k;\n  cin >> n >> m >> k;\n  vector<vector<pair<int,int>>> g(n);\n  vector<int> from(m), to(m);\n  for (int i = 0; i < m; i++) {\n    cin >> from[i] >> to[i];\n    from[i]--; to[i]--;\n    g[from[i]].emplace_back(to[i], i);\n    g[to[i]].emplace_back(from[i], i);\n  }\n  vector<int> alive(m, 1);\n  vector<int> deg(n);\n  vector<int> que;\n  for (int i = 0; i < n; i++) {\n    deg[i] = (int) g[i].size();\n    if (deg[i] < k) {\n      que.push_back(i);\n    }\n  }\n  int b = 0;\n  vector<int> res(m);\n  for (int step = m - 1; step >= 0; step--) {\n    while (b < (int) que.size()) {\n      int i = que[b];\n      for (auto &p : g[i]) {\n        if (!alive[p.second]) {\n          continue;\n        }\n        alive[p.second] = 0;\n        if (deg[p.first] == k) {\n          que.push_back(p.first);\n        }\n        deg[p.first]--;\n        deg[i]--;\n      }\n      b++;\n    }\n    res[step] = n - (int) que.size();\n    if (alive[step]) {\n      if (deg[from[step]] == k) {\n        que.push_back(from[step]);\n      }\n      if (deg[to[step]] == k) {\n        que.push_back(to[step]);\n      }\n      deg[from[step]]--;\n      deg[to[step]]--;\n      alive[step] = 0;\n    }\n  }\n  for (int i = 0; i < m; i++) {\n    cout << res[i] << '\\n';\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["graphs"], "dificulty": "2200", "interactive": false}