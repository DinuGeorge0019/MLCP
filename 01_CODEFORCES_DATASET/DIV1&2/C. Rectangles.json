{
    "link": "https://codeforces.com//contest/1028/problem/C",
    "problemId": "212301",
    "problem_idx": "C",
    "shortId": "1028C",
    "contest_number": "1028",
    "problem_submissions": {
        "F": [
            42179553,
            42173574,
            42172126,
            42183823,
            42179375,
            42177929,
            42176646,
            42176739,
            42168545,
            42174904,
            42175563,
            42187810,
            42177441,
            42180538,
            42178358,
            42178178
        ],
        "H": [
            42177022,
            42177937,
            42197383,
            42174346,
            42178267,
            42180853,
            42180364,
            42179125,
            42178613,
            42177685,
            42188074
        ],
        "G": [
            42174235,
            42180921,
            42179342,
            42179278,
            42183838,
            42181415,
            42188299,
            42175088,
            42183699,
            42177809,
            42199769,
            42180709
        ],
        "E": [
            42168417,
            42169350,
            42169465,
            42168142,
            42175311,
            42172346,
            42172643,
            42173588,
            42169997,
            42170922,
            42170783,
            42169728,
            42172341,
            42172392,
            42174203,
            42173993,
            42169247
        ],
        "D": [
            42165714,
            42166524,
            42166821,
            42171266,
            42167648,
            42168290,
            42168039,
            42170991,
            42171075,
            42166522,
            42165185,
            42167753,
            42167327,
            42166990,
            42167859,
            42166718,
            42169672,
            42169316,
            42172369
        ],
        "C": [
            42162420,
            42161280,
            42164158,
            42159623,
            42162254,
            42163150,
            42163507,
            42162131,
            42163347,
            42161576,
            42161023,
            42164637,
            42163616,
            42161801,
            42163884,
            42163193,
            42164354,
            42165199,
            42162360
        ],
        "B": [
            42159958,
            42159146,
            42159962,
            42160148,
            42160038,
            42161126,
            42160845,
            42163792,
            42159144,
            42162163,
            42159196,
            42160477,
            42160541,
            42159094,
            42160870,
            42160007,
            42160216,
            42160794,
            42159231
        ],
        "A": [
            42158947,
            42158816,
            42158953,
            42161141,
            42158802,
            42159721,
            42159618,
            42163119,
            42158831,
            42163007,
            42158820,
            42158811,
            42158901,
            42158777,
            42159186,
            42158929,
            42158806,
            42159328,
            42158825
        ]
    },
    "name": "C. Rectangles",
    "statement": "You are given n rectangles on a plane with coordinates of their bottom\r\nleft and upper right points. Some (n-1) of the given n rectangles have\r\nsome common point. A point belongs to a rectangle if this point is\r\nstrictly inside the rectangle or belongs to its boundary.Find any point\r\nwith integer coordinates that belongs to at least (n-1) given\r\nrectangles.\r\n",
    "solutions": [
        "#ifndef BZ\n#pragma GCC optimize \"-O3\"\n#endif\n#include <bits/stdc++.h>\n\n#define FASTIO\n#define ALL(v) (v).begin(), (v).end()\n#define rep(i, l, r) for (int i = (l); i < (r); ++i)\n\n#ifdef FASTIO\n#define scanf abacaba\n#define printf abacaba\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\nusing namespace std;\n\n\n/*\nll pw(ll a, ll b) {\n\tll ans = 1; while (b) {\n\t\twhile (!(b & 1)) b >>= 1, a = (a * a) % MOD;\n\t\tans = (ans * a) % MOD, --b;\n\t} return ans;\n}\n*/\n\nstruct rect {\n\tint x1, y1, x2, y2;\n};\n\nrect cross(rect a, rect b) {\n\trect ans;\n\tans.x1 = max(a.x1, b.x1);\n\tans.x2 = min(a.x2, b.x2);\n\tans.y1 = max(a.y1, b.y1);\n\tans.y2 = min(a.y2, b.y2);\n\treturn ans;\n}\n\nbool cor(rect a) {\n\tif (a.x1 <= a.x2 && a.y1 <= a.y2)\n\t\treturn 1;\n\treturn 0;\n}\n\nint n;\nrect a[200000];\nrect b[200000];\n\nint main() {\n#ifdef FASTIO\n\tios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n#endif\n\tcin >> n;\n\tfor (int i = 0; i < n; ++i)\n\t\tcin >> a[i].x1 >> a[i].y1 >> a[i].x2 >> a[i].y2;\n\trect cur = a[0];\n\tfor (int i = 0; i < n - 1; ++i) {\n\t\tcur = cross(cur, a[i]);\n\t}\n\tif (cor(cur)) {\n\t\tcout << cur.x1 << \" \" << cur.y1 << \"\\n\";\n\t\treturn 0;\n\t}\n\tcur = a[1];\n\tfor (int i = 1; i < n; ++i)\n\t\tcur = cross(cur, a[i]);\n\tif (cor(cur)) {\n\t\tcout << cur.x1 << \" \" << cur.y1 << \"\\n\";\n\t\treturn 0;\n\t}\n\tb[n - 1] = a[n - 1];\n\tfor (int i = n - 2; i >= 0; --i) {\n\t\tb[i] = cross(b[i + 1], a[i]);\n\t}\n\tcur = a[0];\n\tfor (int i = 0; i + 2 < n; ++i) {\n\t\tcur = cross(cur, a[i]);\n\t\tif (cor(cross(cur, b[i + 2]))) {\n\t\t\tcur = cross(cur, b[i + 2]);\n\t\t\tcout << cur.x1 << \" \" << cur.y1 << \"\\n\";\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "implementation",
        "sortings"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Rectangles.json",
    "editorial_link": "https://codeforces.com/blog/entry/61493",
    "editorial": "Note that intersection of any number of rectangles is a rectangle too\r\n(possibly, empty).Calculate intersection of rectangles with numbers ,\r\nand intersection of rectangles with numbers . If is the index of the\r\nrectangle not included in the answer, then intersection of and must be\r\nnon-empty. So, for some this condition is held, and we can print any\r\ninteger point inside this rectangle.\r\n",
    "hint": []
}