{"link": "https://codeforces.com//contest/1523/problem/F", "problemId": "1000216", "problem_idx": "F", "shortId": "1523F", "contest_number": "1523", "problem_submissions": {"F": [117916146, 117914065, 117905350, 117900425, 117909780, 117912951, 117923029, 117905457, 117920531, 117920496, 117911483, 117908634, 117907048, 117936734, 117936707, 117936638, 117936633, 117936625, 117936608, 117905940, 117911622, 117911227, 117910828, 117920430, 117916378, 117911950, 117912347, 117936103, 117935723], "G": [117899863, 117912955, 117908386, 117915802, 117906341, 117903204, 117907803, 117932659, 117932628, 117911801, 118597582, 117989759, 117915684, 117936837, 117918793, 117916945, 117917431], "D": [117881477, 117886244, 117886334, 117887661, 118167966, 117918101, 117929591, 117890786, 117890676, 117893739, 118119250, 117887458, 117887290, 117893940, 117890382, 118081143, 117890914, 117883607, 117887959, 117895275, 117888883, 117902109, 117889374], "E": [117878219, 117881962, 117910641, 117881787, 117884807, 117893823, 117886171, 117885405, 117882043, 117890552, 117888754, 117897027, 117898439, 117887443, 117893294, 117903524, 117892701, 117896279, 117896129], "C": [117876664, 117878149, 117877887, 117879093, 117889641, 117882853, 117877348, 117879069, 117877404, 117877723, 117880898, 117876222, 117880296, 117876946, 117880601, 117879874, 117879926, 117880242, 117902829], "B": [117875490, 117875567, 117880589, 117875816, 117876680, 117877360, 117875700, 117876723, 117878349, 117876280, 117877999, 117880072, 117876899, 117875787, 117877756, 117876654, 117875833, 117878179, 117879465], "A": [117874746, 117874821, 117882081, 117874974, 117874835, 117874828, 117874778, 117874933, 117874911, 117874900, 117876005, 117883186, 117874918, 117874908, 117875902, 117874738, 117874753, 117874913, 117876371], "H": [117981868, 117981132, 118023855, 118349130, 117933591, 118312467, 118312428, 119224810]}, "name": "F. Favorite Game", "statement": "After William is done with work for the day, he enjoys playing his\r\nfavorite video game.The game happens in a 2D world, starting at turn 0.\r\nWilliam can pick any cell in the game world and spawn in it. Then, each\r\nturn, William may remain at his current location or move from the\r\ncurrent location (x, y) to one of the following locations: (x + 1, y),\r\n(x - 1, y), (x, y + 1), (x, y - 1).To accelerate movement the game has n\r\nfast travel towers. i-th tower is located at location (xa_i, ya_i). To\r\nbe able to instantly travel to the tower from any location in the game\r\nworld it must first be activated. Activation of tower i happens at the\r\nmoment when the player is in cell (xa_i, ya_i) after this the tower\r\nremains active throughout the entire game.William also knows that the\r\ngame has m quests. i-th quest can be completed instantly by being at\r\nlocation (xb_i, yb_i) on turn t_i.William wants to find out the maximal\r\nnumber of quests he will be able to complete by optimally traversing the\r\ngame world.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 30.05.2021 18:50:34       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst __int128 one = 1;\n\nconst int inf = (int) 1.01e9;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n, m;\n  cin >> n >> m;\n  vector<int> xa(n), ya(n);\n  for (int i = 0; i < n; i++) {\n    cin >> xa[i] >> ya[i];\n  }\n  vector<int> xb(m), yb(m), tb(m);\n  for (int i = 0; i < m; i++) {\n    cin >> xb[i] >> yb[i] >> tb[i];\n  }\n  for (int i = 0; i < m; i++) {\n    for (int j = i + 1; j < m; j++) {\n      if (tb[i] > tb[j]) {\n        swap(xb[i], xb[j]);\n        swap(yb[i], yb[j]);\n        swap(tb[i], tb[j]);\n      }\n    }\n  }\n  vector<int> at_mask(1 << n, inf);\n  for (int t = 0; t < (1 << n); t++) {\n    if (__builtin_popcount(t) == 1) {\n      at_mask[t] = 0;\n    }\n  }\n  vector<vector<int>> mask_dist_a(1 << n, vector<int>(n));\n  for (int t = 0; t < (1 << n); t++) {\n    for (int i = 0; i < n; i++) {\n      mask_dist_a[t][i] = inf;\n      for (int j = 0; j < n; j++) {\n        if (t & (1 << j)) {\n          mask_dist_a[t][i] = min(mask_dist_a[t][i], abs(xa[i] - xa[j]) + abs(ya[i] - ya[j]));\n        }\n      }\n    }\n  }\n  vector<vector<int>> mask_dist_b(1 << n, vector<int>(m));\n  for (int t = 0; t < (1 << n); t++) {\n    for (int i = 0; i < m; i++) {\n      mask_dist_b[t][i] = inf;\n      for (int j = 0; j < n; j++) {\n        if (t & (1 << j)) {\n          mask_dist_b[t][i] = min(mask_dist_b[t][i], abs(xb[i] - xa[j]) + abs(yb[i] - ya[j]));\n        }\n      }\n    }\n  }\n  vector<__int128> go_qq(m);\n  for (int i = 0; i < m; i++) {\n    for (int j = 0; j < m; j++) {\n      if (i != j && tb[i] + abs(xb[i] - xb[j]) + abs(yb[i] - yb[j]) <= tb[j]) {\n        go_qq[j] |= (one << i);\n      }\n    }\n  }\n  vector<vector<int>> val(n, vector<int>(m));\n  vector<vector<int>> seq(n, vector<int>(m));\n  vector<vector<__int128>> pref(n, vector<__int128>(m));\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      val[i][j] = tb[j] + abs(xb[j] - xa[i]) + abs(yb[j] - ya[i]);\n      seq[i][j] = j;\n    }\n    sort(seq[i].begin(), seq[i].end(), [&](int x, int y) {\n      return val[i][x] < val[i][y];\n    });\n    for (int j = 0; j < m; j++) {\n      pref[i][j] = (one << seq[i][j]);\n      if (j > 0) {\n        pref[i][j] |= pref[i][j - 1];\n      }\n    }\n  }\n  vector<__int128> can(1 << n);\n  for (int ans = 0; ; ans++) {\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> s;\n    for (int t = 0; t < (1 << n); t++) {\n      if (at_mask[t] < inf) {\n        s.emplace(at_mask[t], t);\n      }\n    }\n    while (!s.empty()) {\n      int expected = s.top().first;\n      int t = s.top().second;\n      s.pop();\n      if (at_mask[t] != expected) {\n        continue;\n      }\n      for (int i = 0; i < n; i++) {\n        if (!(t & (1 << i))) {\n          int to = t + (1 << i);\n          int cost = at_mask[t] + mask_dist_a[t][i];\n          if (cost < at_mask[to]) {\n            at_mask[to] = cost;\n            s.emplace(at_mask[to], to);\n          }\n        }\n      }\n    }\n    vector<int> new_at_mask(1 << n, inf);\n    vector<__int128> new_can(1 << n);\n    bool any = false;\n    for (int t = 0; t < (1 << n); t++) {\n      for (int i = ans; i < m; i++) {\n        if ((t == 0 && ans == 0) || (t > 0 && at_mask[t] + mask_dist_b[t][i] <= tb[i]) || (go_qq[i] & can[t])) {\n          new_can[t] |= (one << i);\n          new_at_mask[t] = min(new_at_mask[t], tb[i]);\n        }\n      }\n      if (new_can[t]) {\n        any = true;\n        for (int j = 0; j < n; j++) {\n          if (!(t & (1 << j))) {\n            int low = 0;\n            int high = m - 1;\n            while (low < high) {\n              int mid = (low + high) >> 1;\n              if (pref[j][mid] & new_can[t]) {\n                high = mid;\n              } else {\n                low = mid + 1;\n              }\n            }\n            new_at_mask[t | (1 << j)] = min(new_at_mask[t | (1 << j)], val[j][seq[j][low]]);\n          }\n        }\n      }\n    }\n    if (!any) {\n      cout << ans << '\\n';\n      break;\n    }\n    swap(can, new_can);\n    swap(at_mask, new_at_mask);\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["bitmasks", "dp"], "dificulty": "3300", "interactive": false}