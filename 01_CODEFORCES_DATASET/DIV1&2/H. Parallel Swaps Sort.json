{
    "link": "https://codeforces.com//contest/1909/problem/H",
    "problemId": "2393929",
    "problem_idx": "H",
    "shortId": "1909H",
    "contest_number": "1909",
    "problem_submissions": {
        "I": [
            238594787,
            238734499,
            238612798,
            238982716
        ],
        "H": [
            238580264,
            238589602,
            238607786
        ],
        "G": [
            238560293,
            238550526,
            238559517,
            238558313,
            238557833,
            238566652,
            238564686,
            239556259,
            239556209,
            238565636,
            238574025,
            238573859,
            238568809,
            238573884,
            238566593,
            238571787,
            238574691,
            238625821,
            238572617,
            238570324,
            238573276,
            238570764
        ],
        "F2": [
            238542796,
            238534294,
            238538777,
            238545730,
            238548819,
            238528922,
            238534725,
            239556236,
            238553039,
            238545071,
            238550570,
            238542799,
            238606902,
            238606875,
            238606473,
            238542884,
            238576806,
            238557484,
            238548076,
            238559797,
            238553161,
            238552651,
            238578812
        ],
        "F1": [
            238533850,
            238534241,
            238512806,
            238545552,
            238548346,
            238522831,
            238522246,
            238532074,
            238540188,
            238535569,
            238526516,
            238529202,
            238537091,
            238538307,
            238535161,
            238536954,
            238545258,
            238549880
        ],
        "E": [
            238530140,
            238527503,
            238531786,
            238531780,
            238539031,
            238540384,
            238546944,
            238541376,
            238626199,
            238528618,
            238544549,
            238554302,
            238543453,
            238607205,
            238546967,
            238534529,
            238544188,
            238547677,
            238537800,
            238539073
        ],
        "D": [
            238516247,
            238515473,
            238516693,
            238517435,
            238518596,
            238517877,
            238511801,
            238522012,
            238519439,
            238520615,
            238515978,
            238520501,
            238524874,
            238519711,
            238522426,
            238527869,
            238523778,
            238525554
        ],
        "C": [
            238510258,
            238508905,
            238507888,
            238511857,
            238511447,
            238510244,
            238508948,
            238513299,
            238512833,
            238512815,
            238510300,
            238510166,
            238511071,
            238510194,
            238514731,
            238515535,
            238515115,
            238514740
        ],
        "B": [
            238506344,
            238505616,
            238505050,
            238507671,
            238507930,
            238506022,
            238507400,
            238508743,
            238507281,
            238507154,
            238506618,
            238505579,
            238506319,
            238511922,
            238508811,
            238507261,
            238508313,
            238507211
        ],
        "A": [
            238504593,
            238504553,
            238504448,
            238504666,
            238505213,
            238504543,
            238504461,
            238504436,
            238504858,
            238504739,
            238504679,
            238504538,
            238504584,
            238504729,
            238504462,
            238505151,
            238506675,
            238504829
        ]
    },
    "name": "H. Parallel Swaps Sort",
    "statement": "You are given a permutation p_1, p_2,\r\ndots, p_n of [1, 2,\r\ndots, n]. You can perform the following operation some (possibly 0)\r\ntimes: choose a subarray [l, r] of even length; swap a_l, a_{l+1}; swap\r\na_{l+2}, a_{l+3} (if l+3\r\nleq r);\r\ndots swap a_{r-1}, a_r. Sort the permutation in at most 10^6 operations.\r\nYou do not need to minimize the number of operations.\r\n",
    "solutions": [
        "#ifndef LOCAL\n#pragma GCC optimize (\"Ofast\")\n#pragma GCC optimize (\"unroll-loops\")\n#endif\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing ll=long long;\n#define int ll\n\n#define rng(i,a,b) for(int i=int(a);i<int(b);i++)\n#define rep(i,b) rng(i,0,b)\n#define gnr(i,a,b) for(int i=int(b)-1;i>=int(a);i--)\n#define per(i,b) gnr(i,0,b)\n#define pb push_back\n#define eb emplace_back\n#define a first\n#define b second\n#define bg begin()\n#define ed end()\n#define all(x) x.bg,x.ed\n#define si(x) int(x.size())\n#ifdef LOCAL\n#define dmp(x) cerr<<__LINE__<<\" \"<<#x<<\" \"<<x<<endl\n#else\n#define dmp(x) void(0)\n#endif\n\ntemplate<class t,class u> bool chmax(t&a,u b){if(a<b){a=b;return true;}else return false;}\ntemplate<class t,class u> bool chmin(t&a,u b){if(b<a){a=b;return true;}else return false;}\n\ntemplate<class t> using vc=vector<t>;\ntemplate<class t> using vvc=vc<vc<t>>;\n\nusing pi=pair<int,int>;\nusing vi=vc<int>;\n\ntemplate<class t,class u>\nostream& operator<<(ostream& os,const pair<t,u>& p){\n\treturn os<<\"{\"<<p.a<<\",\"<<p.b<<\"}\";\n}\n\ntemplate<class t> ostream& operator<<(ostream& os,const vc<t>& v){\n\tos<<\"{\";\n\tfor(auto e:v)os<<e<<\",\";\n\treturn os<<\"}\";\n}\n\n#define mp make_pair\n#define mt make_tuple\n#define one(x) memset(x,-1,sizeof(x))\n#define zero(x) memset(x,0,sizeof(x))\n#ifdef LOCAL\nvoid dmpr(ostream&os){os<<endl;}\ntemplate<class T,class... Args>\nvoid dmpr(ostream&os,const T&t,const Args&... args){\n\tos<<t<<\" \";\n\tdmpr(os,args...);\n}\n#define dmp2(...) dmpr(cerr,__LINE__,##__VA_ARGS__)\n#else\n#define dmp2(...) void(0)\n#endif\n\nusing uint=unsigned;\nusing ull=unsigned long long;\n\ntemplate<class t,size_t n>\nostream& operator<<(ostream&os,const array<t,n>&a){\n\treturn os<<vc<t>(all(a));\n}\n\ntemplate<int i,class T>\nvoid print_tuple(ostream&,const T&){\n}\n\ntemplate<int i,class T,class H,class ...Args>\nvoid print_tuple(ostream&os,const T&t){\n\tif(i)os<<\",\";\n\tos<<get<i>(t);\n\tprint_tuple<i+1,T,Args...>(os,t);\n}\n\ntemplate<class ...Args>\nostream& operator<<(ostream&os,const tuple<Args...>&t){\n\tos<<\"{\";\n\tprint_tuple<0,tuple<Args...>,Args...>(os,t);\n\treturn os<<\"}\";\n}\n\nll read(){\n\tll i;\n\tcin>>i;\n\treturn i;\n}\n\nvi readvi(int n,int off=0){\n\tvi v(n);\n\trep(i,n)v[i]=read()+off;\n\treturn v;\n}\n\npi readpi(int off=0){\n\tint a,b;cin>>a>>b;\n\treturn pi(a+off,b+off);\n}\n\ntemplate<class t>\nvoid print_single(t x,int suc=1){\n\tcout<<x;\n\tif(suc==1)\n\t\tcout<<\"\\n\";\n\tif(suc==2)\n\t\tcout<<\" \";\n}\n\ntemplate<class t,class u>\nvoid print_single(const pair<t,u>&p,int suc=1){\n\tprint_single(p.a,2);\n\tprint_single(p.b,suc);\n}\n\ntemplate<class T>\nvoid print_single(const vector<T>&v,int suc=1){\n\trep(i,v.size())\n\t\tprint_single(v[i],i==int(v.size())-1?suc:2);\n}\n\ntemplate<class T>\nvoid print_offset(const vector<T>&v,ll off,int suc=1){\n\trep(i,v.size())\n\t\tprint_single(v[i]+off,i==int(v.size())-1?suc:2);\n}\n\ntemplate<class T,size_t N>\nvoid print_single(const array<T,N>&v,int suc=1){\n\trep(i,N)\n\t\tprint_single(v[i],i==int(N)-1?suc:2);\n}\n\ntemplate<class T>\nvoid print(const T&t){\n\tprint_single(t);\n}\n\ntemplate<class T,class ...Args>\nvoid print(const T&t,const Args&...args){\n\tprint_single(t,2);\n\tprint(args...);\n}\n\nstring readString(){\n\tstring s;\n\tcin>>s;\n\treturn s;\n}\n\ntemplate<class T>\nT sq(const T& t){\n\treturn t*t;\n}\n\nvoid YES(bool ex=true){\n\tcout<<\"YES\\n\";\n\tif(ex)exit(0);\n\t#ifdef LOCAL\n\tcout.flush();\n\t#endif\n}\nvoid NO(bool ex=true){\n\tcout<<\"NO\\n\";\n\tif(ex)exit(0);\n\t#ifdef LOCAL\n\tcout.flush();\n\t#endif\n}\nvoid Yes(bool ex=true){\n\tcout<<\"Yes\\n\";\n\tif(ex)exit(0);\n\t#ifdef LOCAL\n\tcout.flush();\n\t#endif\n}\nvoid No(bool ex=true){\n\tcout<<\"No\\n\";\n\tif(ex)exit(0);\n\t#ifdef LOCAL\n\tcout.flush();\n\t#endif\n}\n//#define CAPITAL\n/*\nvoid yes(bool ex=true){\n\t#ifdef CAPITAL\n\tcout<<\"YES\"<<\"\\n\";\n\t#else\n\tcout<<\"Yes\"<<\"\\n\";\n\t#endif\n\tif(ex)exit(0);\n\t#ifdef LOCAL\n\tcout.flush();\n\t#endif\n}\nvoid no(bool ex=true){\n\t#ifdef CAPITAL\n\tcout<<\"NO\"<<\"\\n\";\n\t#else\n\tcout<<\"No\"<<\"\\n\";\n\t#endif\n\tif(ex)exit(0);\n\t#ifdef LOCAL\n\tcout.flush();\n\t#endif\n}*/\nvoid possible(bool ex=true){\n\t#ifdef CAPITAL\n\tcout<<\"POSSIBLE\"<<\"\\n\";\n\t#else\n\tcout<<\"Possible\"<<\"\\n\";\n\t#endif\n\tif(ex)exit(0);\n\t#ifdef LOCAL\n\tcout.flush();\n\t#endif\n}\nvoid impossible(bool ex=true){\n\t#ifdef CAPITAL\n\tcout<<\"IMPOSSIBLE\"<<\"\\n\";\n\t#else\n\tcout<<\"Impossible\"<<\"\\n\";\n\t#endif\n\tif(ex)exit(0);\n\t#ifdef LOCAL\n\tcout.flush();\n\t#endif\n}\n\nconstexpr ll ten(int n){\n\treturn n==0?1:ten(n-1)*10;\n}\n\nconst ll infLL=LLONG_MAX/3;\n\n#ifdef int\nconst int inf=infLL;\n#else\nconst int inf=INT_MAX/2-100;\n#endif\n\nint topbit(signed t){\n\treturn t==0?-1:31-__builtin_clz(t);\n}\nint topbit(ll t){\n\treturn t==0?-1:63-__builtin_clzll(t);\n}\nint topbit(ull t){\n\treturn t==0?-1:63-__builtin_clzll(t);\n}\nint botbit(signed a){\n\treturn a==0?32:__builtin_ctz(a);\n}\nint botbit(ll a){\n\treturn a==0?64:__builtin_ctzll(a);\n}\nint botbit(ull a){\n\treturn a==0?64:__builtin_ctzll(a);\n}\nint popcount(signed t){\n\treturn __builtin_popcount(t);\n}\nint popcount(ll t){\n\treturn __builtin_popcountll(t);\n}\nint popcount(ull t){\n\treturn __builtin_popcountll(t);\n}\nint bitparity(ll t){\n\treturn __builtin_parityll(t);\n}\nbool ispow2(int i){\n\treturn i&&(i&-i)==i;\n}\nll mask(int i){\n\treturn (ll(1)<<i)-1;\n}\null umask(int i){\n\treturn (ull(1)<<i)-1;\n}\nll minp2(ll n){\n\tif(n<=1)return 1;\n\telse return ll(1)<<(topbit(n-1)+1);\n}\n\nbool inc(int a,int b,int c){\n\treturn a<=b&&b<=c;\n}\n\ntemplate<class t> void mkuni(vc<t>&v){\n\tsort(all(v));\n\tv.erase(unique(all(v)),v.ed);\n}\n\nll rand_int(ll l, ll r) { //[l, r]\n\t//#ifdef LOCAL\n\tstatic mt19937_64 gen;\n\t/*#else\n\tstatic mt19937_64 gen(chrono::steady_clock::now().time_since_epoch().count());\n\t#endif*/\n\treturn uniform_int_distribution<ll>(l, r)(gen);\n}\n\nll rand_int(ll k){ //[0,k)\n\treturn rand_int(0,k-1);\n}\n\ntemplate<class t>\nvoid myshuffle(vc<t>&a){\n\trep(i,si(a))swap(a[i],a[rand_int(0,i)]);\n}\n\ntemplate<class t,class u>\nint lwb(const vc<t>&v,const u&a){\n\treturn lower_bound(all(v),a)-v.bg;\n}\ntemplate<class t,class u>\nbool bis(const vc<t>&v,const u&a){\n\treturn binary_search(all(v),a);\n}\n\nvvc<int> readGraph(int n,int m){\n\tvvc<int> g(n);\n\trep(i,m){\n\t\tint a,b;\n\t\tcin>>a>>b;\n\t\t//sc.read(a,b);\n\t\ta--;b--;\n\t\tg[a].pb(b);\n\t\tg[b].pb(a);\n\t}\n\treturn g;\n}\n\nvvc<int> readTree(int n){\n\treturn readGraph(n,n-1);\n}\n\ntemplate<class t>\nvc<t> presum(const vc<t>&a){\n\tvc<t> s(si(a)+1);\n\trep(i,si(a))s[i+1]=s[i]+a[i];\n\treturn s;\n}\nvc<ll> presum(const vi&a){\n\tvc<ll> s(si(a)+1);\n\trep(i,si(a))s[i+1]=s[i]+a[i];\n\treturn s;\n}\n//BIT で数列を管理するときに使う (CF850C)\ntemplate<class t>\nvc<t> predif(vc<t> a){\n\tgnr(i,1,si(a))a[i]-=a[i-1];\n\treturn a;\n}\ntemplate<class t>\nvvc<ll> imos(const vvc<t>&a){\n\tint n=si(a),m=si(a[0]);\n\tvvc<ll> b(n+1,vc<ll>(m+1));\n\trep(i,n)rep(j,m)\n\t\tb[i+1][j+1]=b[i+1][j]+b[i][j+1]-b[i][j]+a[i][j];\n\treturn b;\n}\n\n//verify してないや\nvoid transvvc(int&n,int&m){\n\tswap(n,m);\n}\ntemplate<class t,class... Args>\nvoid transvvc(int&n,int&m,vvc<t>&a,Args&...args){\n\tassert(si(a)==n);\n\tvvc<t> b(m,vi(n));\n\trep(i,n){\n\t\tassert(si(a[i])==m);\n\t\trep(j,m)b[j][i]=a[i][j];\n\t}\n\ta.swap(b);\n\ttransvvc(n,m,args...);\n}\n//CF854E\nvoid rotvvc(int&n,int&m){\n\tswap(n,m);\n}\ntemplate<class t,class... Args>\nvoid rotvvc(int&n,int&m,vvc<t>&a,Args&...args){\n\tassert(si(a)==n);\n\tvvc<t> b(m,vi(n));\n\trep(i,n){\n\t\tassert(si(a[i])==m);\n\t\trep(j,m)b[m-1-j][i]=a[i][j];\n\t}\n\ta.swap(b);\n\trotvvc(n,m,args...);\n}\n\n//ソートして i 番目が idx[i]\n//CF850C\ntemplate<class t>\nvi sortidx(const vc<t>&a){\n\tint n=si(a);\n\tvi idx(n);iota(all(idx),0);\n\tsort(all(idx),[&](int i,int j){return a[i]<a[j];});\n\treturn idx;\n}\n//vs[i]=a[idx[i]]\n//例えば sortidx で得た idx を使えば単にソート列になって返ってくる\n//CF850C\ntemplate<class t>\nvc<t> a_idx(const vc<t>&a,const vi&idx){\n\tint n=si(a);\n\tassert(si(idx)==n);\n\tvc<t> vs(n);\n\trep(i,n)vs[i]=a[idx[i]];\n\treturn vs;\n}\n//CF850C\nvi invperm(const vi&p){\n\tint n=si(p);\n\tvi q(n);\n\trep(i,n)q[p[i]]=i;\n\treturn q;\n}\n\ntemplate<class t,class s=t>\ns SUM(const vc<t>&a){\n\treturn accumulate(all(a),s(0));\n}\ntemplate<class t,size_t K,class s=t>\ns SUM(const array<t,K>&a){\n\treturn accumulate(all(a),s(0));\n}\n\ntemplate<class t>\nt MAX(const vc<t>&a){\n\treturn *max_element(all(a));\n}\n\ntemplate<class t>\npair<t,int> MAXi(const vc<t>&a){\n\tauto itr=max_element(all(a));\n\treturn mp(*itr,itr-a.bg);\n}\n\ntemplate<class A>\nauto MIN(const A&a){\n\treturn *min_element(all(a));\n}\n\ntemplate<class t>\npair<t,int> MINi(const vc<t>&a){\n\tauto itr=min_element(all(a));\n\treturn mp(*itr,itr-a.bg);\n}\n\nvi vid(int n){\n\tvi res(n);iota(all(res),0);\n\treturn res;\n}\n\ntemplate<class S>\nvoid soin(S&s){\n\tsort(all(s));\n}\n\ntemplate<class S,class F>\nvoid soin(S&s,F&&f){\n\tsort(all(s),forward<F>(f));\n}\n\ntemplate<class S>\nS soout(S s){\n\tsoin(s);\n\treturn s;\n}\n\ntemplate<class S>\nvoid rein(S&s){\n\treverse(all(s));\n}\n\ntemplate<class S>\nS reout(S s){\n\trein(s);\n\treturn s;\n}\n\ntemplate<class t,class u>\npair<t,u>&operator+=(pair<t,u>&a,pair<t,u> b){\n\ta.a+=b.a;a.b+=b.b;return a;}\ntemplate<class t,class u>\npair<t,u>&operator-=(pair<t,u>&a,pair<t,u> b){\n\ta.a-=b.a;a.b-=b.b;return a;}\ntemplate<class t,class u>\npair<t,u> operator+(pair<t,u> a,pair<t,u> b){return mp(a.a+b.a,a.b+b.b);}\ntemplate<class t,class u>\npair<t,u> operator-(pair<t,u> a,pair<t,u> b){return mp(a.a-b.a,a.b-b.b);}\n\ntemplate<class t>\nt gpp(vc<t>&vs){\n\tassert(si(vs));\n\tt res=move(vs.back());\n\tvs.pop_back();\n\treturn res;\n}\n\ntemplate<class t,class u>\nvoid pb(vc<t>&a,const vc<u>&b){\n\ta.insert(a.ed,all(b));\n}\n\ntemplate<class t,class...Args>\nvc<t> cat(vc<t> a,Args&&...b){\n\t(pb(a,forward<Args>(b)),...);\n\treturn a;\n}\n\ntemplate<class t,class u>\nvc<t>& operator+=(vc<t>&a,u x){\n\tfor(auto&v:a)v+=x;\n\treturn a;\n}\n\ntemplate<class t,class u>\nvc<t> operator+(vc<t> a,u x){\n\treturn a+=x;\n}\n\ntemplate<class t>\nvc<t> operator+(const vc<t>&a,const vc<t>&b){\n\tvc<t> c(max(si(a),si(b)));\n\trep(i,si(a))c[i]+=a[i];\n\trep(i,si(b))c[i]+=b[i];\n\treturn c;\n}\n\ntemplate<class t,class u>\nvc<t>& operator-=(vc<t>&a,u x){\n\tfor(auto&v:a)v-=x;\n\treturn a;\n}\n\ntemplate<class t,class u>\nvc<t>& operator-(vc<t> a,u x){\n\treturn a-=x;\n}\n\ntemplate<class t,class u>\nvoid remval(vc<t>&a,const u&v){\n\ta.erase(remove(all(a),v),a.ed);\n}\n\ntemplate<class VS,class u>\nvoid fila(VS&vs,const u&a){\n\tfill(all(vs),a);\n}\n\ntemplate<class t,class u>\nint findid(const vc<t>&vs,const u&a){\n\tauto itr=find(all(vs),a);\n\tif(itr==vs.ed)return -1;\n\telse return itr-vs.bg;\n}\n\ntemplate<class t>\nvoid rtt(vc<t>&vs,int i){\n\trotate(vs.bg,vs.bg+i,vs.ed);\n}\n\nbool dbg=false;\n\npair<vc<pi>,vc<pi>> getswaps(vi p){\n\tint n=si(p);\n\tvc<pi> x,y;\n\tvc<bool> used(n);\n\trep(root,n)if(!used[root]){\n\t\tvi ls;\n\t\tfor(int i=root;!used[i];i=p[i]){\n\t\t\tused[i]=true;\n\t\t\tls.pb(i);\n\t\t}\n\t\tint s=si(ls);\n\t\trep(i,s/2){\n\t\t\tx.eb(ls[i],ls[s-1-i]);\n\t\t}\n\t\trep(i,(s-1)/2){\n\t\t\ty.eb(ls[i+1],ls[s-1-i]);\n\t\t}\n\t}\n\treturn mp(x,y);\n}\n\nvc<pi> fast(vi p,bool chk){\n\tint n=si(p);\n\t\n\tvc<pi> ans;\n\tauto work=[&](int l,int r){\n\t\tassert((r-l)%2==0);\n\t\tif(l==r)return;\n\t\tans.eb(l,r);\n\t\tif(chk){\n\t\t\tfor(int i=l;i<r;i+=2){\n\t\t\t\tswap(p[i],p[i+1]);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tvc<pi> flip;\n\tif(n%2==0){\n\t\trep(i,n){\n\t\t\tif(i%2==0){\n\t\t\t\tflip.eb(0,n);\n\t\t\t}else{\n\t\t\t\tflip.eb(1,n-1);\n\t\t\t}\n\t\t}\n\t}else{\n\t\trep(i,n){\n\t\t\tif(i%2==0){\n\t\t\t\tflip.eb(0,n-1);\n\t\t\t}else{\n\t\t\t\tflip.eb(1,n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tauto adv=[&](int&a,int d){\n\t\tif(a%2==0){\n\t\t\ta+=d;\n\t\t\tif(a>=n){\n\t\t\t\ta=n-1-(a-n);\n\t\t\t}\n\t\t}else{\n\t\t\ta-=d;\n\t\t\tif(a<0){\n\t\t\t\ta=-1-a;\n\t\t\t}\n\t\t}\n\t};\n\t\n\tauto getadj=[&](int a,int b)->pi{\n\t\tassert(a!=b);\n\t\tif(a>b)swap(a,b);\n\t\t//dmp2(a,b);\n\t\tint need=0;\n\t\tif(a%2==1)chmax(need,a+1);\n\t\tif(b%2==0)chmax(need,n-b);\n\t\t//dmp(need);\n\t\tadv(a,need);\n\t\tadv(b,need);\n\t\t//dmp2(a,b);\n\t\tassert((a+need)%2==0);\n\t\tassert((b+need)%2==1);\n\t\tint d=(b-a)/2;\n\t\tassert(a+d+1==b-d);\n\t\treturn pi(need+d,a+d);\n\t};\n\t\n\tauto [x,y]=getswaps(p);\n\t//dmp(p);\n\t//dmp(x);\n\t//dmp(y);\n\tvvc<pi> buf(2*n);\n\t\n\tfor(auto [a,b]:x){\n\t\tauto [t,i]=getadj(a,b);\n\t\tdmp2(t,i,i+2);\n\t\tbuf[t].eb(i,i+2);\n\t}\n\tfor(auto [a,b]:y){\n\t\tauto [t,i]=getadj(n-1-a,n-1-b);\n\t\tbuf[n+t].eb(i,i+2);\n\t}\n\t\n\trep(i,2*n){\n\t\tfor(auto [l,r]:buf[i])work(l,r);\n\t\tauto [l,r]=flip[i%n];\n\t\twork(l,r);\n\t}\n\t\n\tif(chk){\n\t\tassert(p==vid(n));\n\t}\n\t\n\treturn ans;\n}\n\nvoid slv(){\n\tint n;cin>>n;\n\t\n\tvi p=readvi(n,-1);\n\t\n\tauto ans=fast(p,false);\n\t\n\tprint(si(ans));\n\tfor(auto [l,r]:ans){\n\t\tprint(l+1,r);\n\t}\n}\n\ntemplate<class F> void permrep(int n,F f){\n\tvi p(n);iota(all(p),0);\n\tdo{\n\t\tf(p);\n\t}while(next_permutation(all(p)));\n};\n\nsigned main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(0);\n\tcout<<fixed<<setprecision(20);\n\t\n\tif(0){\n\t\trng(n,2,8+1){\n\t\t\tpermrep(n,[&](vi p){\n\t\t\t\tfast(p,true);\n\t\t\t});\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tif(dbg){\n\t\twhile(1)slv();\n\t}else{\n\t\t//int t;cin>>t;rep(_,t)\n\t\tslv();\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\H. Parallel Swaps Sort.json",
    "editorial_link": "https://codeforces.com//blog/entry/123584",
    "editorial": "SolutionLetâs only perform operations such that all swapped pairs have .\r\nLetâs call such subarrays \"swappable\". First, for each from left to\r\nright, do the operation on , where is the minimum index such that is\r\nswappable (letâs call it \"operation \"). Then, for each from right to\r\nleft, do the operation on , where is the minimum index such that is\r\nswappable (letâs call it \"operation \"). After these operations, the\r\narray is sorted. Letâs prove it.Assign to the indices such that and to\r\nthe other indices. After operation , only assign letters in the prefix\r\nand ignore the other elements. During the operations , assign letters to\r\nall the elements.Most of the following proofs are by induction. After\r\nthe operation (supposing the properties were true after the operation ):\r\nAn element of type will always remain of type . Proof: the only elements\r\nof type whose previous element changes are the ones in the subarray ,\r\nwhich are swapped with a smaller element of type . There are no two\r\nconsecutive elements of type . Proof: if you swap , (if it exists) must\r\nbe of type (otherwise is swappable). The elements of type are\r\nincreasing. Proof: itâs true if no become , and itâs also true if some\r\nbecome because any of them is adjacent to two . After the operation :\r\nThe three properties above are still true. The suffix contains the\r\nvalues in in order. Proof: is an , so it must be the largest in , which\r\nis . Now letâs understand how we can implement the algorithm. Example\r\nimplementation: We maintain a segment tree. The -th position of the\r\nsegment tree contains information about the element which was initially\r\n. Note that the relative position of never changes: for example, if you\r\nwant information about the last in the current permutation, and you\r\nsearch them in the segment tree, you will find exactly the last , even\r\nthough their indices will not correspond to the current indices. We have\r\nto find the longest swappable subarray ending at . It means we need the\r\ncurrent positions of the . For each maintain the current position, and\r\nassume the position of all the is . Also maintain, for each element, if\r\nit is a or not. Note that the that are affected by each operation can be\r\nfound in a suffix of the segment tree. In this way, finding the longest\r\nswappable subarray can be done with a binary search on the segment tree:\r\nsince cannot be consecutive, you have to find the longest suffix such\r\nthat the sum of the positions of the is the maximum possible (i.e., if\r\nthere are and the last of them is in position , the sum of their\r\npositions must be ). After finding the longest subarray in the segment\r\ntree, you have to perform the operation on it, i.e., subtract from all\r\nthe nonzero positions. Some may become . How to detect them? Since never\r\nbecome , a becomes after it is swapped with all the elements greater\r\nthan it on its left. So you can precompute the number of swaps that\r\nevery needs to become , and put it in the segment tree as well. Again,\r\nthe operation is \"subtract from a range\". Detecting means detecting\r\nelements which need swaps to become . You can find them after each\r\noperation by traversing the segment tree (which must support \"range min\"\r\non the number of swaps needed), and set their position to and the number\r\nof swaps needed to . Complexity: moves, time.\r\n",
    "hint": [
        "Hint 1 Find a strategy which is as simple and \"easy to handle\" as possible.",
        "Hint 2 Only perform operations such that all swapped pairs have . Let's call such subarrays \"swappable\".",
        "Hint 3 First, for each from left to right, do the operation on , where is the minimum index such that is swappable.",
        "Hint 4 Repeat the same algorithm from right to left.",
        "Hint 5 After Hints 3 and 4, the array is sorted. Prove it (it will be useful).",
        "Hint 6 Assign to the indices such that and to the other indices. During the process in Hint 3, after the operation on index , which properties do , have in the prefix ?",
        "Hint 7 Answer to Hint 6: the values of type are increasing; there are no two consecutive elements of type .",
        "Hint 8 The rest of the proof (i.e., what happens during the process in Hint 4) is relatively easy. Now let's find an efficient implementation. We have to use the properties in Hint 7.",
        "Hint 9 You have to find the longest ending in position , and perform the operation on it. What happens during the operation?",
        "Hint 10 will always remain . For each , you have to detect when it becomes .",
        "Hint 11 For each , you can precompute the number of moves needed to make it .",
        "Hint 12 For example, you can use a segment tree with the following information: the type of each element, the positions of the elements of type , and the number of moves required for each to become ."
    ]
}