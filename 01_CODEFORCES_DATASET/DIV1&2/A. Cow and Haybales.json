{
    "link": "https://codeforces.com//contest/1307/problem/A",
    "problemId": "542677",
    "problem_idx": "A",
    "shortId": "1307A",
    "contest_number": "1307",
    "problem_submissions": {
        "D": [
            71334675,
            71329379,
            71297375,
            71300630,
            71300597,
            71296525,
            71299736,
            71299787,
            71299649,
            71294218,
            71299266,
            71353437,
            71301135,
            71298819,
            71297533,
            71302173,
            71301113,
            71306340,
            71311289,
            71303681,
            71296481
        ],
        "F": [
            71318320,
            71328004,
            71328410,
            71313540,
            71342732,
            71342701,
            71342679,
            71342641,
            71378556,
            71386768,
            71330817,
            71353605,
            71341156,
            71340667,
            71331133,
            71325872,
            71974189
        ],
        "E": [
            71311504,
            71318452,
            71321704,
            71329781,
            71312470,
            71310373,
            71310234,
            71311741,
            71326064,
            71325657,
            71312968,
            71315289,
            71309289,
            71345858,
            71345831,
            71345723,
            71345591,
            71345520,
            71345206,
            71344772,
            71344661,
            71308214,
            71331493,
            71309218,
            71315974,
            71328300,
            71317669,
            71329605
        ],
        "G": [
            71303096,
            71336439,
            71307493,
            71308346,
            71320475,
            71303320,
            71313925,
            71322572,
            71322223,
            71309226,
            71311369,
            71356337,
            71319400,
            71321748,
            71313979,
            71354003,
            71316843,
            71327328,
            71316390,
            71329594,
            71321365
        ],
        "C": [
            71291268,
            71289526,
            71293976,
            71293545,
            71288006,
            71294250,
            71293163,
            71291197,
            71300886,
            71294829,
            71291105,
            71294718,
            71292675,
            71291425,
            71296070,
            71290915,
            71292479,
            71297176,
            71298646,
            71291499
        ],
        "B": [
            71289205,
            71287726,
            71290885,
            71290721,
            71289353,
            71290602,
            71289374,
            71288121,
            71299427,
            71291607,
            71289046,
            71290292,
            71334215,
            71288723,
            71290619,
            71288909,
            71289266,
            71289248,
            71288946,
            71288924
        ],
        "A": [
            71287300,
            71287160,
            71287363,
            71290273,
            71290150,
            71287273,
            71287420,
            71292915,
            71295372,
            71287966,
            71287342,
            71287721,
            71287194,
            71287212,
            71288221,
            71287271,
            71287331,
            71287368,
            71290172,
            71287362
        ]
    },
    "name": "A. Cow and Haybales",
    "statement": "The USA Construction Operation (USACO) recently ordered Farmer John to\r\narrange of n haybale piles on the farm. The i-th pile contains a_i\r\nhaybales. However, Farmer John has just left for vacation, leaving\r\nBessie all on her own. Every day, Bessie the naughty cow can choose to\r\nmove one haybale in any pile to an adjacent pile. Formally, in one day\r\nshe can choose any two indices i and j (1\r\nle i, j\r\nle n) such that |i-j|=1 and a_i>0 and apply a_i = a_i - 1, a_j =\r\na_j + 1. She may also decide to not do anything on some days because she\r\nis lazy.Bessie wants to maximize the number of haybales in pile 1 (i.e.\r\nto maximize a_1), and she only has d days to do so before Farmer John\r\nreturns. Help her find the maximum number of haybales that may be in\r\npile 1 if she acts optimally!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\ntypedef double db;\nmt19937 mrand(random_device{}()); \nconst ll mod=1000000007;\nint rnd(int x) { return mrand() % x;}\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nconst int N=110;\nint n,d,a[N],_;\n\nvoid solve() {\n\tscanf(\"%d%d\",&n,&d);\n\trep(i,1,n+1) scanf(\"%d\",a+i);\n\trep(i,2,n+1) {\n\t\twhile (a[i]>0&&d>=i-1) {\n\t\t\ta[1]++; a[i]--;\n\t\t\td-=i-1;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",a[1]);\n}\n\nint main() {\n\tfor (scanf(\"%d\",&_);_;_--) {\n\t\tsolve();\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\A. Cow and Haybales.json",
    "editorial_link": "https://codeforces.com//blog/entry/73953",
    "editorial": "At any point, it is optimal to move a haybale in the closest pile from\r\npile to the left. So, for every day, we can loop through the piles from\r\nleft to right and move the first haybale we see closer. If all the\r\nhaybales are in pile at some point, we can stop early.Time Complexity:\r\n",
    "hint": []
}