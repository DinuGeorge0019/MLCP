{
    "link": "https://codeforces.com//contest/2084/problem/B",
    "problemId": "3311130",
    "problem_idx": "B",
    "shortId": "2084B",
    "contest_number": "2084",
    "problem_submissions": {
        "H": [
            314145269,
            314152641,
            314144885,
            314182408,
            314161253,
            314160492,
            314159109,
            314336819,
            315779937
        ],
        "G2": [
            314127203,
            314160979,
            314119099,
            314173756,
            314142893,
            314147799,
            314151130,
            314224010
        ],
        "G1": [
            314118414,
            314131726,
            314153985,
            314109590,
            314130088,
            314137970,
            314137514,
            314122753,
            314126112,
            314121248,
            314130892,
            314132033,
            314119541,
            314121030,
            314132824,
            314120399,
            314110237,
            314140572,
            314142526,
            314121707
        ],
        "F": [
            314111540,
            314121924,
            314125756,
            314134963,
            314116023,
            314127619,
            314126955,
            314113301,
            314113508,
            314112491,
            314118412,
            314115812,
            314130696,
            314134248,
            314124898,
            314139906,
            314148255,
            314122476,
            314118124,
            314136680
        ],
        "E": [
            314096933,
            314100998,
            314106034,
            314097464,
            314098060,
            314098397,
            314100089,
            314096655,
            314098774,
            314103821,
            314098080,
            314100694,
            314097651,
            314097020,
            314098501,
            314106285,
            314091026,
            314103056,
            314104301,
            314104189
        ],
        "D": [
            314089308,
            314084108,
            314093835,
            314087875,
            314090629,
            314088628,
            314087990,
            314086450,
            314087578,
            314093466,
            314087381,
            314087993,
            314088809,
            314087808,
            314089647,
            314085680,
            314097166,
            314093234,
            314095090,
            314092873
        ],
        "C": [
            314088884,
            314079194,
            314084706,
            314078405,
            314080677,
            314082894,
            314084690,
            314079232,
            314080138,
            314078936,
            314078924,
            314080521,
            314081145,
            314083479,
            314082189,
            314078479,
            314078402,
            314080517,
            314081011,
            314085360
        ],
        "B": [
            314071844,
            314073131,
            314077666,
            314072689,
            314074212,
            314075241,
            314071920,
            314070221,
            314072945,
            314073818,
            314072825,
            314073490,
            314072379,
            314074081,
            314073148,
            314071408,
            314071968,
            314072681,
            314074070,
            314073432
        ],
        "A": [
            314070266,
            314070800,
            314074592,
            314070792,
            314070309,
            314073560,
            314069924,
            314069578,
            314070160,
            314071820,
            314069982,
            314069845,
            314070406,
            314070963,
            314070638,
            314069585,
            314069908,
            314069724,
            314069695,
            314070813
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/141155",
    "editorial": "For any positive integer sequence , we always have . Let , then must be\r\nplaced on the side. Thus, we can conclude that:Now, we need to select\r\nsome numbers, excluding one occurrence of , to be placed on the side,\r\nensuring that .A greedy strategy is to place all multiples of on the\r\nside after removing one occurrence of . This minimizes while ensuring it\r\nremains a multiple of .Thus, we only need to check whether the of the\r\nremaining multiples of (after removing one occurrence of ) is still\r\nequal to .: or (depending on which implementation you use) per test\r\ncase.\r\n",
    "name": "B. MIN = GCD",
    "statement": "You are given a positive integer sequence a of length n. Determine if it\r\nis possible to rearrange a such that there exists an integer i (1\r\nle i<n) satisfying\r\nmin([a_1,a_2,\r\nldots,a_i])=\r\ngcd([a_{i+1},a_{i+2},\r\nldots,a_n]). Here\r\ngcd(c) denotes the greatest common divisor of c, which is the maximum\r\npositive integer that divides all integers in c.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\B. MIN = GCD.json",
    "hint": [
        "Hint 1 Consider the position of the minimum value after rearranging the sequence.",
        "Hint 2 What kind of numbers should be placed on the side, and what kind should be placed on the side?"
    ]
}