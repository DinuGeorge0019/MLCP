{
    "link": "https://codeforces.com//contest/2034/problem/F1",
    "problemId": "3057440",
    "problem_idx": "F1",
    "shortId": "2034F1",
    "contest_number": "2034",
    "problem_submissions": {
        "G2": [
            294090902,
            294102835,
            294091710
        ],
        "H": [
            294074360,
            294061476,
            294070650,
            294080097,
            294083247,
            294085834,
            294087678,
            294090336,
            294084822,
            294087654,
            294090587,
            294104472,
            294104397,
            294104185,
            294103049,
            294058057,
            294072183,
            294081941,
            294086147,
            294091448
        ],
        "G1": [
            294068700,
            294089598,
            294090555,
            294512628,
            294279844,
            294078743,
            294092614,
            294083324,
            294137051,
            298736856
        ],
        "F2": [
            294044355,
            294048880,
            294057967,
            294058547,
            294044212,
            294052710,
            294062635,
            294059190,
            294064262,
            294068869,
            294068913,
            294056682,
            294087439,
            294054148,
            294055470,
            294067548,
            294048518,
            294098694,
            297729208
        ],
        "F1": [
            294044201,
            294045676,
            294057746,
            294058488,
            294044581,
            294052242,
            294063014,
            294059348,
            294064621,
            294068676,
            294069032,
            294056298,
            294079209,
            294055715,
            294050068,
            294055587,
            294059717,
            294048439,
            294065367,
            294063971
        ],
        "E": [
            294039732,
            294035256,
            294043120,
            294044445,
            294061596,
            294042263,
            294051208,
            294051638,
            294059206,
            294057047,
            294047623,
            294072917,
            294043657,
            294040686,
            294046402,
            294070560,
            294044216,
            294048932,
            294047270
        ],
        "D": [
            294029209,
            294029423,
            294031077,
            294032177,
            294053262,
            294029511,
            294040505,
            294041118,
            294048071,
            294036073,
            294034324,
            294064606,
            294034084,
            294023836,
            294028591,
            294031360,
            294038809,
            294039055
        ],
        "C": [
            294019511,
            294017117,
            294018450,
            294020877,
            294023563,
            294033582,
            294025662,
            294021753,
            294020563,
            294027112,
            294020897,
            294016537,
            294062723,
            294021341,
            294029864,
            294018381,
            294021917,
            294017733,
            294050791,
            294028560
        ],
        "B": [
            294013321,
            294006563,
            294009984,
            294010387,
            294010473,
            294013337,
            294026398,
            294010402,
            294011621,
            294010156,
            294007642,
            294050334,
            294011602,
            294008120,
            294012362,
            294012172,
            294084096,
            294006809,
            294008731
        ],
        "A": [
            294004839,
            294004703,
            294005425,
            294005031,
            294006081,
            294004631,
            294006317,
            294005105,
            294006032,
            294005086,
            294004777,
            294047604,
            294005991,
            294004926,
            294006968,
            294005489,
            294006094,
            294004648,
            294005025
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136579",
    "editorial": "Step 1: For simplicity,\nredefine the special conditions for the number of rubies and sapphires\nin your satchel (not chest). Add two dummy states, and for convenience\n(the first one indexed as and the second one indexed as ). Note that\nthese dummy states won t involve doubling the value. Step 2: Order the\nredefined conditions in increasing order based on the value of . Step 3:\nDefine as the number of ways to move from state to state without passing\nthrough any other special condition. This can be computed using\ninclusion-exclusion in . Step 4: Define , the increase in value for\nmoving directly from state to state without intermediate doubling, as:\nStep 5: Define as the total sum of the value of your satchel across all\nways to reach the state defined by the -th condition. This can be\ncomputed recursively as: Step 6: Compute the final answer as the value\nof divided by the total number of ways to move from to , which is .\n",
    "name": "F1. Khayyam s Royal Decree  Easy Version ",
    "statement": "In ancient Persia, Khayyam, a clever merchant and mathematician, is\r\nplaying a game with his prized treasure chest containing n red rubies\r\nworth 2 dinars each and m blue sapphires worth 1 dinar each. He also has\r\na satchel, which starts empty, and k scrolls with pairs (r_1, b_1),\r\n(r_2, b_2),\r\nldots, (r_k, b_k) that describe special conditions. The game proceeds\r\nfor n + m turns as follows: Khayyam draws a gem uniformly at random from\r\nthe chest. He removes the gem from the chest and places it in his\r\nsatchel. If there exists a scroll i (1\r\nleq i\r\nleq k) such that the chest contains exactly r_i red rubies and b_i blue\r\nsapphires, Khayyam receives a royal decree that doubles the value of all\r\nthe gems in his satchel as a reward for achieving a special\r\nconfiguration. Note that the value of some gems might be affected by\r\nmultiple decrees, and in that case the gems\u2019 value is doubled multiple\r\ntimes.Determine the expected value of Khayyam\u2019s satchel at the end of\r\nthe game, modulo 998,244,353.Formally, let M = 998,244,353. It can be\r\nshown that the exact answer can be expressed as an irreducible fraction\r\nfrac{p}{q}, where p and q are integers and q\r\nnot\r\nequiv 0\r\npmod{M}. Output the integer equal to p\r\ncdot q^{-1}\r\nbmod M. In other words, output such an integer x that 0\r\nle x < M and x\r\ncdot q\r\nequiv p\r\npmod{M}.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define L(i, j, k) for(int i = (j); i <= (k); ++i)#define R(i, j, k) for(int i = (j); i >= (k); --i)#define ll long long #define sz(a) ((int) (a).size())#define pb emplace_back#define me(a, x) memset(a, x, sizeof(a))#define vi vector<int>#define ull unsigned long long#define i128 __int128using namespace std;const int N = 1e6 + 7, mod = 998244353;struct mint {\tint x;\tinline mint(int o = 0) { x = o; }\tinline mint & operator = (int o) { return x = o, *this; }\tinline mint & operator += (mint o) { return (x += o.x) >= mod && (x -= mod), *this; }\tinline mint & operator -= (mint o) { return (x -= o.x) < 0 && (x += mod), *this; }\tinline mint & operator *= (mint o) { return x = (ll) x * o.x % mod, *this; }\tinline mint & operator ^= (int b) {\t\tmint w = *this;\t\tmint ret(1);\t\tfor(; b; b >>= 1, w *= w) if(b & 1) ret *= w;\t\treturn x = ret.x, *this;\t}\tinline mint & operator /= (mint o) { return *this *= (o ^= (mod - 2)); }\tfriend inline mint operator + (mint a, mint b) { return a += b; }\tfriend inline mint operator - (mint a, mint b) { return a -= b; }\tfriend inline mint operator * (mint a, mint b) { return a *= b; }\tfriend inline mint operator / (mint a, mint b) { return a /= b; }\tfriend inline mint operator ^ (mint a, int b) { return a ^= b; }};inline mint qpow(mint x, int y = mod - 2) { return x ^ y; }mint fac[N], ifac[N], inv[N];void init(int x) {\tfac[0] = ifac[0] = inv[1] = 1;\tL(i, 2, x) inv[i] = (mod - mod / i) * inv[mod % i];\tL(i, 1, x) fac[i] = fac[i - 1] * i, ifac[i] = ifac[i - 1] * inv[i];} mint C(int x, int y) {\treturn x < y || y < 0 ? 0 : fac[x] * ifac[y] * ifac[x - y];}inline mint sgn(int x) {\treturn (x & 1) ? mod - 1 : 1;}int n, m, k;pair<int,int>pr[N];int r[N], b[N];mint ans;mint dp[N];void Main() {\tcin >> n >> m >> k;\tL(i, 1, k) {\t\tcin >> pr[i].first >> pr[i].second;\t\tpr[i].first = n - pr[i].first;\t\tpr[i].second = m - pr[i].second;\t}\tsort(pr + 1, pr + k + 1);\tans = n * 2 + m;\tL(i, 1, k) {\t\tr[i] = pr[i].first;\t\tb[i] = pr[i].second;\t}\tL(i, 0, k) dp[i] = 0;\tL(i, 1, k) {\t\tdp[i] = C(r[i] + b[i], b[i]) * (r[i] * 2 + b[i]);\t\tL(j, 1, i - 1) {\t\t\tdp[i] += dp[j] * C(r[i] - r[j] + b[i] - b[j], b[i] - b[j]);\t\t}\t\t// cout << dp[i].x << endl;\t\tans += dp[i] * C(n - r[i] + m - b[i], m - b[i]) * qpow(C(n + m, n));\t}\tcout << ans.x << '\\n';}int main() {\tios :: sync_with_stdio(false);\tcin.tie(0); cout.tie(0);\tinit(1e6);\tint t; cin >> t; while(t--) Main();\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math",
        "sortings"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\F1. Khayyam s Royal Decree  Easy Version .json"
}