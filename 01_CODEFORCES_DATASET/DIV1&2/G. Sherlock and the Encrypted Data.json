{
    "link": "https://codeforces.com//contest/776/problem/G",
    "problemId": "95211",
    "problem_idx": "G",
    "shortId": "776G",
    "contest_number": "776",
    "problem_submissions": {
        "G": [
            24939347,
            24933167,
            24937192,
            24938688,
            24939300,
            24936369,
            24933254,
            24936389,
            24938260,
            50496579,
            24939610,
            24974394,
            24937125,
            24938166,
            24937440
        ],
        "F": [
            24931137,
            24940601,
            24934717,
            24935180,
            24936216,
            24930744,
            24935991,
            24934536,
            24933196,
            24934631,
            25009829,
            24934356,
            24935407,
            25145968,
            24938938
        ],
        "E": [
            24926469,
            24922427,
            24928701,
            24929827,
            24927281,
            24926330,
            24922998,
            24928645,
            24928568,
            24927117,
            24927967,
            24932026,
            24926259,
            24928494,
            24925814,
            24933222,
            24929687,
            24929132
        ],
        "D": [
            24923588,
            24926240,
            24925398,
            24926362,
            24924696,
            24942987,
            24926743,
            24925181,
            24923636,
            24922793,
            24927891,
            24924422,
            24923885,
            24928078,
            25388280,
            24929601,
            24924674,
            24952921,
            24926279
        ],
        "A": [
            24920848,
            24918716,
            24917411,
            24917501,
            24928258,
            24917338,
            24918133,
            24917381,
            24917351,
            24917379,
            24917385,
            24917553,
            24917364,
            24918205,
            24917450,
            24917668,
            24918624
        ],
        "C": [
            24919677,
            24924230,
            24922174,
            24922015,
            24918784,
            24920506,
            24921334,
            24921898,
            24920669,
            24950107,
            24929487,
            24921634,
            24921526,
            24921083,
            24921835,
            25114288,
            24921821,
            24922186,
            24923226
        ],
        "B": [
            24917670,
            24919248,
            24918919,
            24919261,
            24920428,
            24918897,
            24919671,
            24919894,
            24918987,
            24918567,
            24918525,
            24922327,
            24918984,
            24918395,
            24919865,
            24919010,
            24920231,
            24920427
        ]
    },
    "name": "G. Sherlock and the Encrypted Data",
    "statement": "Sherlock found a piece of encrypted data which he thinks will be useful\r\nto catch Moriarty. The encrypted data consists of two integer and . He\r\nnoticed that these integers were in hexadecimal form.He takes each of\r\nthe integers from to , and performs the following operations: He lists\r\nthe distinct digits present in the given number. For example: for , he\r\nlists the digits as . Then he sums respective powers of two for each\r\ndigit listed in the step above. Like in the above example . He changes\r\nthe initial number by applying bitwise of the initial number and the\r\nsum. Example: . Note that is done in binary notation. One more example:\r\nfor integer the sum is . Letters , , , , , denote hexadecimal digits , ,\r\n, , , , respertively.Sherlock wants to count the numbers in the range\r\nfrom to (both inclusive) which decrease on application of the above four\r\nsteps. He wants you to answer his queries for different and .\r\n",
    "solutions": [
        "#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint w[20], n;\nlong long po[20];\nlong long Get(int a, int b){ // biggest : a, 2^b : 1\n    if(a==0)return 0;\n    if(4*n<=b)return 0;\n    int i, j, pp = 1 << (b%4), ccc = 0, ck = 0;\n    po[0] = 1;\n    for(i=1;i<n;i++){\n        po[i]=po[i-1] * (a+1);\n    }\n    for(i=0;i<=a;i++){\n        if(i&pp)ccc++;\n    }\n    long long res = 0;\n    for(i=n-1;i>=0;i--){\n        int ppp = 0;\n        if(i*4 <= b && b < (i+1)*4){\n            ppp = 1 << (b-i*4);\n            ck = 1;\n        }\n        for(j=0;j<=a;j++){\n            if(j >= w[i])continue;\n            if(ck==0){\n                res += po[i-1] * ccc;\n            }\n            if(ck==1){\n                if((j&ppp)!=ppp)continue;\n            }\n            if(ck){\n                res += po[i];\n            }\n        }\n        if(w[i] > a)break;\n        if(ck == 1 && (w[i] & ppp)!=ppp)break;\n        if(ck)ck = 2;\n    }\n    return res;\n}\nlong long Calc(long long a){\n    if(a < 1)a = 1;\n    n = 0;\n    while(a){\n        w[n++] = a%16;\n        a/=16;\n    }\n    long long s = 0;\n    int i;\n    for(i=1;i<=15;i++){\n        s += Get(i, i) - Get(i-1, i);\n    }\n    return s;\n}\nint main(){\n    int Q;\n    long long L, R;\n    scanf(\"%d\",&Q);\n    while(Q--){\n        scanf(\"%llx%llx\",&L,&R);\n        printf(\"%lld\\n\",Calc(R+1) - Calc(L));\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "combinatorics",
        "dp"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\G. Sherlock and the Encrypted Data.json",
    "editorial_link": "https://codeforces.com//blog/entry/50622",
    "editorial": ": This problem can be solved using dynamic programming approach by\r\nmaintain dp for mask of digits appearing in the number() along with\r\nposition in the number() and mask of last bits() of the number formed\r\nupto .: Observe that only the most significant bit of the is required to\r\ncheck if the number will decrease or not. So, form a .\r\n"
}