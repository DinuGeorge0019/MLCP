{
    "link": "https://codeforces.com//contest/1656/problem/F",
    "problemId": "1341209",
    "problem_idx": "F",
    "shortId": "1656F",
    "contest_number": "1656",
    "problem_submissions": {
        "H": [
            150787257,
            150834092,
            150833898,
            150779624,
            150791810,
            150792367,
            150793746,
            150802821,
            150793244,
            150784328,
            150836239,
            150786830,
            150787392,
            150775313,
            150792322,
            150812291,
            150837917,
            150835814,
            150835788,
            150835748,
            150835735,
            150835565,
            150835404,
            150835313,
            150835295,
            150835202,
            150835140,
            150813121
        ],
        "G": [
            150769137,
            150790740,
            150776335,
            150781798,
            150778878,
            150781350,
            150783120,
            150789415,
            150791824,
            150790309,
            150773559,
            150791984,
            150793946,
            150800739,
            150800780
        ],
        "F": [
            150759585,
            150758819,
            150757088,
            150759741,
            150768307,
            150764851,
            150771817,
            150759499,
            150756577,
            150773688,
            150782772,
            150774145,
            150769570,
            150765258,
            150764625,
            150756214,
            150776414,
            150776503,
            150774655,
            150777047
        ],
        "E": [
            150751361,
            150745742,
            150744206,
            150750256,
            150757531,
            150753091,
            150760157,
            150764520,
            150764445,
            150756529,
            150749400,
            150762413,
            150747229,
            150753617,
            150756813,
            150745115,
            150752324,
            150758442,
            150759352,
            150761061
        ],
        "D": [
            150742723,
            150736825,
            150739691,
            150737309,
            150752373,
            150748905,
            150751158,
            150737577,
            150743318,
            150744109,
            150743943,
            150742795,
            150742345,
            150737178,
            150746671,
            150740470,
            150742866,
            150748659,
            150752013,
            150752792
        ],
        "C": [
            150733096,
            150732015,
            150737243,
            150731632,
            150734197,
            150741651,
            150741487,
            150729270,
            150734650,
            150732482,
            150734630,
            150733212,
            150733482,
            150730538,
            150732987,
            150735181,
            150734697,
            150735222,
            150738885,
            150734495
        ],
        "B": [
            150727707,
            150727564,
            150729524,
            150727729,
            150727957,
            150730109,
            150730045,
            150725120,
            150728043,
            150726472,
            150725778,
            150727111,
            150726454,
            150727018,
            150729221,
            150817665,
            150730058,
            150728199,
            150728859,
            150727704
        ],
        "A": [
            150725204,
            150724798,
            150724946,
            150724479,
            150724835,
            150724855,
            150724694,
            150724426,
            150724692,
            150724405,
            150724424,
            150724740,
            150724465,
            150724564,
            150725589,
            150725242,
            150725512,
            150724576,
            150724789,
            150724666
        ],
        "I": [
            150839781,
            150825396
        ]
    },
    "name": "F. Parametric MST",
    "statement": "You are given n integers a_1, a_2,\r\nldots, a_n. For any real number t, consider the complete weighted graph\r\non n vertices K_n(t) with weight of the edge between vertices i and j\r\nequal to w_{ij}(t) = a_i\r\ncdot a_j + t\r\ncdot (a_i + a_j). Let f(t) be the cost of the minimum spanning tree of\r\nK_n(t). Determine whether f(t) is bounded above and, if so, output the\r\nmaximum value it attains.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    i64 n;\n    std::cin >> n;\n    \n    std::vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> a[i];\n    }\n    \n    std::sort(a.begin(), a.end());\n    \n    i64 mn = 0, mx = 0;\n    for (int i = 0; i < n; i++) {\n        mn += a[i];\n        mx += a[i];\n    }\n    mn += 1LL * (n - 2) * a[0];\n    mx += 1LL * (n - 2) * a[n - 1];\n    if (mn > 0 || mx < 0) {\n        std::cout << \"INF\\n\";\n        return;\n    }\n    \n    i64 ans = -1E18;\n    i64 coef = 0, cons = 0;\n    for (int i = 1; i < n; i++) {\n        coef += a[0] + a[i];\n        cons += 1LL * a[0] * a[i];\n    }\n    for (int i = 1; i < n; i++) {\n        i64 l = -a[i], r = -a[i - 1];\n        ans = std::max({ans, coef * l + cons, coef * r + cons});\n        coef -= a[0];\n        coef += a[n - 1];\n        cons += 1LL * a[i] * (a[n - 1] - a[0]);\n    }\n    std::cout << ans << \"\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "graphs",
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\F. Parametric MST.json",
    "editorial_link": "https://codeforces.com//blog/entry/101211",
    "editorial": "Assume . We will try to connect each node to the neighbour that\r\nminimizes the cost function . If by doing this we obtain a tree which is\r\nconnected, it will clearly be an MST.Let . We can rewrite as . So, if we\r\nfix and , this value will be minimized if when or when .We have three\r\ncases: If there are positive and negative values of , connect all with\r\nto , and connect the rest to . We see that we are adding edges (since we\r\nare counting the edge twice), and that the resulting graph is connected\r\nsince every node is connected to either or .If all are positive, connect\r\nall to ; and if all are negative, connect all to .Now it is immediate to\r\nsee that the MST will only change when some changes its sign, that is,\r\nwhen for some , and that the total cost function will be piecewise\r\naffine. Furthermore, updating the total cost at each can be done in time\r\nif we process nodes from to and we mantain some cumulative sums.We are\r\nleft with checking whether the MST total cost function goes to when ,\r\nwhich can be done by computing the slope of the MST total cost function\r\nat the limiting values and (which can be computed by adding the slopes\r\nof the cost functions of the edges, the construction of which we have\r\npreviously mentioned).\r\n",
    "hint": []
}