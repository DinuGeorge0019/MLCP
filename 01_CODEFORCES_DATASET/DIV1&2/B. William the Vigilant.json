{
    "link": "https://codeforces.com//contest/1609/problem/B",
    "problemId": "1205810",
    "problem_idx": "B",
    "shortId": "1609B",
    "contest_number": "1609",
    "problem_submissions": {
        "H": [
            137263072,
            140966657,
            137541381,
            137373776,
            137353707,
            137353217
        ],
        "G": [
            137246775,
            137257898,
            137258174,
            137261032,
            137258429,
            137256905,
            137250571,
            137257690,
            137251480,
            137263274,
            137259638,
            137276051,
            137269427,
            137261135,
            137260806,
            137259792,
            137262185,
            137263614,
            137264862,
            137254900,
            137261420,
            137264154
        ],
        "F": [
            137240106,
            137246731,
            137244466,
            137246785,
            137246316,
            137246745,
            137260178,
            137270360,
            137247766,
            137257633,
            137249504,
            137249777,
            137249032,
            137252722,
            137252015,
            137251624,
            137252333,
            137250283,
            137261839,
            137252294,
            137249612
        ],
        "E": [
            137234780,
            137235959,
            137233979,
            137232935,
            137235656,
            137237935,
            137233267,
            137237781,
            137236310,
            137235301,
            137237711,
            137241732,
            137237330,
            137241596,
            137235797,
            137236926,
            137239464,
            137239281,
            137241206,
            137238999
        ],
        "D": [
            137226570,
            137230215,
            137231182,
            137228712,
            137232181,
            137231416,
            137229857,
            137231314,
            137233347,
            137230846,
            137231581,
            137229849,
            137233415,
            137234328,
            137231105,
            137231235,
            137232699,
            137231119,
            137233860,
            137235117
        ],
        "C": [
            137224003,
            137226381,
            137228113,
            137226088,
            137228622,
            137227880,
            137227092,
            137227813,
            137229692,
            137227035,
            137228022,
            137226433,
            137228702,
            137230474,
            137231768,
            137227164,
            137229482,
            137228456,
            137229353,
            137230487
        ],
        "B": [
            137222196,
            137223090,
            137224802,
            137223100,
            137224371,
            137223720,
            137223346,
            137224383,
            137222999,
            137223539,
            137224162,
            137223482,
            137224120,
            137224040,
            137223954,
            137223074,
            137224144,
            137224291,
            137224533,
            137224451
        ],
        "A": [
            137221600,
            137221784,
            137221681,
            137221800,
            137221985,
            137221740,
            137221875,
            137222467,
            137221786,
            137221979,
            137222676,
            137221642,
            137222045,
            137222137,
            137226851,
            137224172,
            137221659,
            137222130,
            137222631,
            137222150
        ]
    },
    "name": "B. William the Vigilant",
    "statement": "Before becoming a successful trader William got a university degree.\r\nDuring his education an interesting situation happened, after which\r\nWilliam started to listen to homework assignments much more attentively.\r\nWhat follows is the correct formal description of the homework\r\nassignment:You are given a string s of length n only consisting of\r\ncharacters \"\", \"\" and \"\". There are q queries of format (pos, c),\r\nmeaning replacing the element of string s at position pos with character\r\nc. After each query you must output the minimal number of characters in\r\nthe string, which have to be replaced, so that the string doesn\u2019t\r\ncontain string \"\" as a . A valid replacement of a character is replacing\r\nit with \"\", \"\" or \"\".A string x is a substring of a string y if x can be\r\nobtained from y by deletion of several (possibly, zero or all)\r\ncharacters from the beginning and several (possibly, zero or all)\r\ncharacters from the end.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 28.11.2021 17:36:59       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n, q;\n  cin >> n >> q;\n  string s;\n  cin >> s;\n  auto Is = [&](int i) {\n    return (0 <= i && i + 2 < n && s[i] == 'a' && s[i + 1] == 'b' && s[i + 2] == 'c');\n  };\n  int cnt = 0;\n  for (int i = 0; i < n - 2; i++) {\n    cnt += Is(i);\n  }\n  while (q--) {\n    int pos;\n    char c;\n    cin >> pos >> c;\n    --pos;\n    cnt -= Is(pos - 2);\n    cnt -= Is(pos - 1);\n    cnt -= Is(pos);\n    s[pos] = c;\n    cnt += Is(pos - 2);\n    cnt += Is(pos - 1);\n    cnt += Is(pos);\n    cout << cnt << '\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\B. William the Vigilant.json",
    "editorial_link": "https://codeforces.com//blog/entry/97350",
    "editorial": "Notice that the answer to this problem is the number of substrings\r\n\"\"Before starting to process queries let\u00e2\u0080\u0099s count the number of\r\nsubstrings \"\" in the initial string. Next, notice that changing a\r\ncharacter on position can only remove one substring \"\" and add only one\r\nsubstring \"\". To check if either of those changes occurred we only need\r\nto look at characters no more than two positions away from and see if\r\nsubstring \"\" appeared (or disappeared) there.\r\n"
}