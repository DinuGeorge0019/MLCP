{
    "link": "https://codeforces.com//contest/1987/problem/H",
    "problemId": "2726569",
    "problem_idx": "H",
    "shortId": "1987H",
    "contest_number": "1987",
    "problem_submissions": {
        "E": [
            268229906,
            268158602,
            268423905,
            268422817,
            268157857,
            268152628,
            268233241,
            268233207,
            268156681,
            268158666,
            268162964,
            268158456,
            268163362,
            268156782,
            268165522,
            268170420,
            268158686,
            268162341,
            268233753,
            268228306,
            268160955,
            268160065,
            268161194,
            268164320,
            268163376,
            268166928,
            268264962,
            268164535
        ],
        "H": [
            268205560,
            268243575,
            268242763,
            268242753,
            268226875,
            268226200,
            286117872,
            286117361,
            268621342,
            270559507
        ],
        "G2": [
            268199327,
            268183184,
            268209905,
            268197988,
            268210865,
            268209119,
            268201265,
            268217291,
            268203603,
            268206936,
            268211532,
            268216966,
            268392569
        ],
        "G1": [
            268197008,
            268183589,
            268183559,
            268192970,
            268191020,
            268190335,
            268201091,
            268194194,
            268192954,
            268200485,
            268201459,
            268210583,
            268191184,
            268204488,
            268195197,
            268205593,
            268203056,
            268392539,
            268196879,
            268201576,
            268201255
        ],
        "F2": [
            268174418,
            268166457,
            268162505,
            268182920,
            268168846,
            268174436,
            268185759,
            268178301,
            268181565,
            268191599,
            268193415,
            268177500,
            268170902,
            268180818,
            268174520,
            268182719,
            268178817,
            268190336,
            268190071
        ],
        "F1": [
            268173831,
            268166694,
            268162641,
            268178377,
            268169399,
            268174193,
            268185332,
            268177979,
            268170897,
            268181978,
            268191481,
            268193293,
            268177600,
            268169616,
            268180668,
            268173797,
            268182414,
            268176479,
            268181249,
            268189979
        ],
        "D": [
            268149772,
            268151878,
            268147683,
            268147422,
            268149471,
            268152924,
            268151963,
            268155962,
            268148798,
            268153037,
            268153285,
            268152472,
            268152498,
            268151784,
            268149550,
            268150424,
            268156633,
            268151156,
            268159183,
            268155639
        ],
        "C": [
            268144323,
            268147501,
            268383290,
            268143974,
            268142997,
            268142336,
            268156117,
            268145345,
            268149662,
            268144034,
            268146014,
            268146306,
            268146500,
            268154494,
            268145000,
            268144648,
            268146061,
            268146320,
            268145299,
            268148183,
            268146033
        ],
        "B": [
            268142097,
            268138793,
            268136942,
            268137419,
            268137014,
            268140558,
            268141012,
            268143732,
            268140016,
            268142374,
            268143256,
            268141729,
            268142582,
            268139760,
            268140776,
            268140696,
            268140576,
            268139314,
            268141992,
            268141951
        ],
        "A": [
            268135899,
            268135441,
            268135342,
            268135356,
            268135339,
            268135852,
            268135895,
            268139203,
            268135363,
            268137561,
            268136567,
            268135744,
            268136590,
            268135768,
            268135350,
            268135764,
            268135555,
            268135575,
            268136024,
            268138028
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131053",
    "editorial": "In this solution, we will assume that there is no matrix and the\r\ninteractor just returns some number between , where and .Let\u00e2\u0080\u0099s first\r\nsolve for . Let the hidden cell be . Let and . On each iteration, we\r\nwill query the cell , let the result be . If , we are done. Else, we\r\nknow that . Transforming, we get . So, on each iteration, we at least\r\nhalf the length of , so we use at most queries. This allows us to solve\r\nthe problem in queries, if for each row we assume that the hidden cell\r\nis in it and then run the algorithm above.We will solve the problem\r\nrecursively, ensuring . If (we will choose later), we can solve the\r\nproblem for the remaining rows in queries. Else, our objective is to\r\neither decrease by a lot, or decrease by a bit and recurse further. To\r\ndo that, we will query the three cells (choose integer coordinates +\r\nthings should be pretty symmetrical). This ensures that for large enough\r\n, if we get a large query result ( is around ), we will know that must\r\nhold, and so we will recurse with and . If not, we will recurse to (\r\nsince we query on the edge of the matrix).For the model solution below,\r\nwe take at most queries to get to , so we solve the problem in at most\r\nqueries. You can get a slightly better constant factor with this\r\nsolution, or you can even reduce by a rate of quicker than per\r\nquery.Complexity:\r\n",
    "name": "H. Fumo Temple",
    "statement": "BadelineYou are given two positive integers n and m (\r\nbf{n\r\nle m}).The jury has hidden from you a rectangular matrix a with n rows\r\nand m columns, where a_{i,j}\r\nin\r\n{ -1, 0, 1\r\n} for all 1\r\nle i\r\nle n and 1\r\nle j\r\nle m. The jury has also selected a cell (i_0, j_0). Your goal is to find\r\n(i_0,j_0).In one query, you give a cell (i, j), then the jury will reply\r\nwith an integer. If (i, j) = (i_0, j_0), the jury will reply with 0.\r\nElse, let S be the sum of a_{x,y} over all x and y such that\r\nmin(i, i_0)\r\nle x\r\nle\r\nmax(i, i_0) and\r\nmin(j, j_0)\r\nle y\r\nle\r\nmax(j, j_0). Then, the jury will reply with |i - i_0| + |j - j_0| + |S|.\r\nFind (i_0, j_0) by making at most n + 225 queries.: a and (i_0,j_0) are\r\nfixed before any queries are made.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)//~ #pragma comment(linker, \"/stack:200000000\")#pragma GCC optimize(\"O3\")//~ #pragma GCC target (\"avx2\")//~ #pragma GCC optimize(\"Ofast\")//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")//~ #pragma GCC optimize(\"unroll-loops\")#include <bits/stdc++.h>#include <ext/pb_ds/assoc_container.hpp>#include <ext/pb_ds/tree_policy.hpp>\u00a0using namespace __gnu_pbds;using namespace std;\u00a0template <typename T>using ordered_set =    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\u00a0#define sim template < class c#define ris return * this#define dor > debug & operator <<#define eni(x) sim > typename \\  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {sim > struct rge { c b, e; };sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }sim > auto dud(c* x) -> decltype(cerr << *x, 0);sim > char dud(...);struct debug {#ifdef LOCAL~debug() { cerr << endl; }eni(!=) cerr << boolalpha << i; ris; }eni(==) ris << range(begin(i), end(i)); }sim, class b dor(pair < b, c > d) {  ris << \"(\" << d.first << \", \" << d.second << \")\";}sim dor(rge<c> d) {  *this << \"[\";  for (auto it = d.b; it != d.e; ++it)    *this << \", \" + 2 * (it == d.b) << *it;  ris << \"]\";}#elsesim dor(const c&) { ris; }#endif};#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\u00a0#define shandom_ruffle random_shuffle\u00a0using ll=long long;using pii=pair<int,int>;using pll=pair<ll,ll>;using vi=vector<int>;using vll=vector<ll>;const int nax=5007;\u00a0mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\u00a0int n, m;\u00a0void ff(){\tfflush(stdout);}\u00a0void wypierdol(){\twhile(1);}\u00a0int quelimit;\u00a0int pyt(int a, int b){\tquelimit--;\tif (quelimit<0)\t\twypierdol();\tprintf(\"? %d %d\\n\", a, b);\tff();\tint ret;\tscanf(\"%d\", &ret);\tif (ret==-1)\t\twypierdol();\treturn ret;}\u00a0void ans(int a, int b){\tprintf(\"! %d %d\\n\", a, b);\tff();}\u00a0int moze(int a, int b, int w){\ta=abs(a);\tb=abs(b);\tint dol=a+b;\tint gor=a+b+(a+1)*(b+1);\treturn w>=dol && w<=gor;}\u00a0void test(){\tscanf(\"%d%d\", &n, &m);\tquelimit=n+225;\tvector<pii> zyw;\tfor (int i=1; i<=n; i++)\t\tfor (int j=1; j<=m; j++)\t\t\tzyw.push_back({i, j});\twhile(1)\t{\t\tassert(!zyw.empty());\t\tint x=rng()%zyw.size();\t\tswap(zyw[x], zyw.back());\t\tpii p=zyw.back();\t\tzyw.pop_back();\t\t\t\tint wez=pyt(p.first, p.second);\t\tif (!wez)\t\t{\t\t\tans(p.first, p.second);\t\t\tbreak;\t\t}\t\tfor (int i=(int)zyw.size()-1; i>=0; i--)\t\t{\t\t\tif (!moze(zyw[i].first-p.first, zyw[i].second-p.second, wez))\t\t\t{\t\t\t\tswap(zyw[i], zyw.back());\t\t\t\tzyw.pop_back();\t\t\t}\t\t}\t}}\u00a0int main(){\tint t;\tscanf(\"%d\", &t);\twhile(t--)\t\ttest();\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "interactive"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\H. Fumo Temple.json"
}