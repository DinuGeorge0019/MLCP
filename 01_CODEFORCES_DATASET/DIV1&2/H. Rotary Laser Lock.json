{
    "link": "https://codeforces.com//contest/1428/problem/H",
    "problemId": "762871",
    "problem_idx": "H",
    "shortId": "1428H",
    "contest_number": "1428",
    "problem_submissions": {
        "H": [
            95798388,
            96079889,
            95822989,
            95819273
        ],
        "G2": [
            95777265,
            95779066,
            95783656,
            95782002,
            95792200,
            95787701,
            95792987,
            95787809,
            95792595,
            95788941,
            95788283,
            95789699,
            95792016,
            95786243,
            95795577,
            95795657,
            95796576,
            95798040,
            95805912,
            95794416
        ],
        "G1": [
            95777192,
            95778996,
            95783550,
            95782076,
            95787327,
            95787607,
            95787264,
            95787896,
            95792632,
            95789001,
            95788384,
            95789621,
            95791835,
            95786301,
            95795432,
            95795591,
            95796478,
            95795620,
            95794276,
            95794356
        ],
        "F": [
            95765157,
            95765965,
            95771166,
            95767388,
            95768274,
            95768695,
            95770215,
            95759208,
            95832501,
            95832498,
            95832480,
            95831607,
            95831604,
            95831342,
            95763101,
            95777757,
            95779436,
            95770353,
            95771012,
            95772923,
            95779700,
            95776557,
            95778129,
            95776549,
            95775700,
            95779883
        ],
        "E": [
            95758700,
            95760055,
            95763026,
            95762658,
            95754707,
            95762381,
            95764564,
            95752105,
            95754040,
            95762344,
            95751508,
            95766331,
            95750653,
            95764708,
            95767437,
            95759986,
            95764850,
            95764733,
            95758532,
            95759950
        ],
        "D": [
            95754864,
            95756381,
            95758710,
            95758367,
            95764528,
            95758021,
            95759449,
            95765541,
            95774991,
            95758395,
            95775675,
            95762065,
            95777703,
            95760640,
            95762966,
            95770799,
            95762173,
            95759561,
            95760180,
            95767247
        ],
        "B": [
            95745661,
            95741583,
            95746087,
            95741923,
            95743557,
            95741471,
            95742126,
            95742079,
            95743874,
            95742788,
            95744560,
            95742620,
            95745128,
            95748044,
            95745202,
            95746759,
            95741532,
            95741702,
            95742488,
            95749798
        ],
        "C": [
            95742981,
            95744852,
            95748437,
            95744808,
            95746831,
            95743810,
            95745097,
            95745356,
            95741031,
            95745159,
            95747546,
            95747612,
            95742323,
            95747442,
            95747895,
            95749106,
            95744992,
            95747455,
            95745170,
            95751867
        ],
        "A": [
            95740482,
            95739860,
            95740501,
            95739845,
            95741896,
            95739795,
            95739865,
            95739838,
            95739950,
            95739997,
            95739893,
            95739847,
            95740138,
            95852510,
            95844045,
            95839237,
            95838793,
            95838769,
            95838754,
            95838446,
            95824867,
            95812004,
            95742639,
            95740471,
            95741183,
            95739807,
            95739826,
            95740061,
            95740497
        ]
    },
    "name": "H. Rotary Laser Lock",
    "statement": "To prevent the mischievous rabbits from freely roaming around the zoo,\r\nZookeeper has set up a special lock for the rabbit enclosure. This lock\r\nis called the Rotary Laser Lock. The lock consists of n concentric rings\r\nnumbered from 0 to n-1. The innermost ring is ring 0 and the outermost\r\nring is ring n-1. All rings are split equally into nm sections each.\r\nEach of those rings contains a single metal arc that covers exactly m\r\ncontiguous sections. At the center of the ring is a core and surrounding\r\nthe entire lock are nm receivers aligned to the nm sections. The core\r\nhas nm lasers that shine outward from the center, one for each section.\r\nThe lasers can be blocked by any of the arcs. A display on the outside\r\nof the lock shows how many lasers hit the outer receivers. In the\r\nexample above, there are n=3 rings, each covering m=4 sections. The arcs\r\nare colored in green (ring 0), purple (ring 1), and blue (ring 2) while\r\nthe lasers beams are shown in red. There are nm=12 sections and 3 of the\r\nlasers are not blocked by any arc, thus the display will show 3 in this\r\ncase. Wabbit is trying to open the lock to free the rabbits, but the\r\nlock is completely opaque, and he cannot see where any of the arcs are.\r\nGiven the of the arcs, Wabbit can open the lock on his own. To be\r\nprecise, Wabbit needs n-1 integers p_1,p_2,\r\nldots,p_{n-1} satisfying 0\r\nleq p_i < nm such that for each i (1\r\nleq i < n), Wabbit can rotate ring 0 clockwise exactly p_i times such\r\nthat the sections that ring 0 covers perfectly aligns with the sections\r\nthat ring i covers. In the example above, the relative positions are p_1\r\n= 1 and p_2 = 7. To operate the lock, he can pick any of the n rings and\r\nrotate them by 1 section either clockwise or anti-clockwise. You will\r\nsee the number on the display after every rotation.Because his paws are\r\nsmall, Wabbit has asked you to help him to find the of the arcs . You\r\nmay perform up to 15000 rotations before Wabbit gets impatient.\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC target (\"avx2\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=3007;\n\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\nvoid ff()\n{\n\tfflush(stdout);\n}\n\nint n, m;\n\nint pole;\n\nint poz[nax];\n\nint zapy;\n\nint policz()\n{\n\tint ret=0;\n\tfor (int i=0; i<n*m; i++)\n\t{\n\t\tint czy=1;\n\t\tfor (int j=0; j<n; j++)\n\t\t{\n\t\t\tint x=i-poz[j];\n\t\t\tx%=(n*m);\n\t\t\tx+=(n*m);\n\t\t\tx%=(n*m);\n\t\t\tif (x<m)\n\t\t\t\tczy=0;\n\t\t}\n\t\tret+=czy;\n\t}\n\treturn ret;\n}\n\nvoid zrob(int v, int kier)\n{\n\tzapy++;\n\tassert(zapy<=15000);\n\tprintf(\"? %d %d\\n\", v, kier);\n\tff();\n\tscanf(\"%d\", &pole);\n\t\n\t//~ poz[v]=(poz[v]+kier+n*m)%(n*m);\n\t//~ pole=policz();\n}\n\nint los(int a, int b)\n{\n\treturn a+rng()%(b-a+1);\n}\n\nint k;\nvi gru[nax];\n\nvector<pii> graf[nax];\n\nvoid kra(int a, int b, int prz)\n{\n\tprz%=(n*m);\n\tprz+=(n*m);\n\tprz%=(n*m);\n\tgraf[a].push_back({b, prz});\n\tgraf[b].push_back({a, (n*m-prz)%(n*m)});\n}\n\nint malew[nax];\n\nint wyn[nax];\nint bylo[nax];\n\nvoid dfs(int v)\n{\n\tbylo[v]=1;\n\tfor (pii i : graf[v])\n\t{\n\t\tif (!bylo[i.first])\n\t\t{\n\t\t\twyn[i.first]=(wyn[v]+i.second)%(n*m);\n\t\t\tdfs(i.first);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\t//~ for (int i=0; i<n; i++)\n\t\t//~ poz[i]=los(0, n*m-1);\n\t\t//~ poz[i]=i*m;\n\t//~ debug() << range(poz, poz+n);\n\tfor (int i=0; i<n; i++)\n\t{\n\t\tint x=los(-20, 20);\n\t\twhile(x)\n\t\t{\n\t\t\tzrob(i, x/abs(x));\n\t\t\tx-=x/abs(x);\n\t\t}\n\t}\n\tvi kol(n);\n\tiota(kol.begin(), kol.end(), 0);\n\tshuffle(kol.begin(), kol.end(), rng);\n\tfor (int i : kol)\n\t{\n\t\tint pam=pole;\n\t\twhile(1)\n\t\t{\n\t\t\tzrob(i, 1);\n\t\t\tif (pole<pam)\n\t\t\t{\n\t\t\t\tzrob(i, -1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpam=pole;\n\t\t}\n\t}\n\t//~ debug() << range(poz, poz+n);\n\t//~ debug() << imie(zapy);\n\t\n\tshuffle(kol.begin(), kol.end(), rng);\n\tfor (int i : kol)\n\t{\n\t\tint mam=0;\n\t\tzrob(i, 1);\n\t\tint pam=pole;\n\t\tfor (int j=0; j<k && !mam; j++)\n\t\t{\n\t\t\tint x=gru[j].back();\n\t\t\tzrob(x, 1);\n\t\t\tif (pole>=pam)\n\t\t\t{\n\t\t\t\tgru[j].push_back(i);\n\t\t\t\tmam=1;\n\t\t\t}\n\t\t\tzrob(x, -1);\n\t\t}\n\t\tzrob(i, -1);\n\t\tif (!mam)\n\t\t{\n\t\t\tgru[k].push_back(i);\n\t\t\tk++;\n\t\t}\n\t}\n\t//~ debug() << imie(k);\n\t//~ for (int i=0; i<k; i++)\n\t\t//~ debug() << gru[i];\n\tfor (int i=0; i<k; i++)\n\t\tfor (int j=1; j<(int)gru[i].size(); j++)\n\t\t\tkra(gru[i][0], gru[i][j], 0);\n\t//~ debug() << imie(zapy);\n\tfor (int i=0; i+1<k; i++)\n\t{\n\t\tint x=gru[i].back();\n\t\tint ruchy=0;\n\t\twhile(1)\n\t\t{\n\t\t\truchy++;\n\t\t\tint pam=pole;\n\t\t\tint oczek=pam;\n\t\t\tif (ruchy<=m)\n\t\t\t\toczek--;\n\t\t\tzrob(x, 1);\n\t\t\tif (pole==oczek)\n\t\t\t\tcontinue;\n\t\t\truchy--;\n\t\t\tzrob(x, -1);\n\t\t\tint znaj=0;\n\t\t\tfor (int j=0; j<k && !znaj; j++)\n\t\t\t{\n\t\t\t\tif (malew[j] || j==i)\n\t\t\t\t\tcontinue;\n\t\t\t\tpam=pole;\n\t\t\t\tint y=gru[j].back();\n\t\t\t\tzrob(y, -1);\n\t\t\t\tint nowe=pole;\n\t\t\t\tzrob(y, 1);\n\t\t\t\tif (nowe>=pam)\n\t\t\t\t{\n\t\t\t\t\tkra(x, y, ruchy+m);\n\t\t\t\t\tmalew[j]=1;\n\t\t\t\t\tznaj=1;\n\t\t\t\t\t//~ debug() << \"od \" << i << \" do \" << j << \"   \" << x << \" \" << y << \" \" << imie(ruchy) << imie(poz[x]) << imie(poz[y]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tassert(znaj);\n\t\t\twhile(ruchy--)\n\t\t\t\tzrob(x, -1);\n\t\t\tbreak;\n\t\t}\n\t}\n\tdfs(0);\n\t//~ for (int i=0; i<n; i++)\n\t\t//~ debug() << i << \" \" << graf[i];\n\t//~ debug() << range(poz, poz+n);\n\tprintf(\"!\");\n\tfor (int i=1; i<n; i++)\n\t\tprintf(\" %d\", wyn[i]);\n\tprintf(\"\\n\");\n\tff();\n\t//~ for (int i=1; i<n; i++)\n\t\t//~ assert(wyn[i]==((poz[i]-poz[0]+n*m)%(n*m)));\n\t//~ debug() << imie(zapy);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "interactive"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\H. Rotary Laser Lock.json",
    "editorial_link": "https://codeforces.com//blog/entry/83771",
    "editorial": "Algorithm\nAnalysisFlatten the circle such that it becomes rows of length with\nvertical sections numbered from to that loops on the end. We say that\nthe position of an arc is if the left endpoint of the arc is at section\n. Indices are taken modulo at all times. Moving arcs right is equivalent\nto rotating them clockwise, and moving arcs left is equivalent to\nrotating them counter-clockwise.Notice that if we shift arc 0 right and\nthe display increases, then the leftmost section of arc 0 had no other\narcs in the same section. Thus, if we shift arc 0 right again and the\ndisplay does not increase, we are certain that there was another arc at\nthat position, so we shift arc 0 left. We now enter the detection stage\nto find any arc that coincides with arc 0 (of which there exists at\nleast 1) at this position. Let\u00e2\u0080\u0099s note down this positions as .Let be the\nset of arcs that we do not know the positions of yet (this set initially\ncontains all arcs from 1 to ) and and be an empty sets. will be the set\nof all candidate arcs (those that may coincide here) and will contain\nall arcs that we have shifted leftwards. Take all elements in and put\nthem in , and pick half of the elements in and add them to the set . We\nnow shift all elements in left. We move arc 0 left to check if any arc\nis at position . If there is, then we know that an arc that initially\ncoincided at lies in . In this case, we set to (elements of that are in\n), pick half of the elements in to move right and remove those from . If\nno arc is at position , then the arc we are looking for lies in\n(elements in that are not in ). We set to be and pick half of to move\nleft and add those to . We then shift arc 0 right and recurse.When we\nhave narrowed to exactly 1 arc, we know where exactly that arc is now.\nWe shift that arc left such that its right endpoint is at so that it\ndoes not cover position , which we may still need for future tests. Now\nwe remove the arc found from and leave the detection stage and continue\nsearching for the other arcs.Once we have found all other arcs, we find\nthe relative position to arc 0 and print them as the final output.Query\nAnalysisWhenever we shift arc 0 right and are not in the detection\nstage, we use 1 shift. This occurs at most times because it takes up to\nshifts right to find the first position where arc 0 coincides, and\nanother to traverse the entire circle again to find all of the\narcs.Whenever we enter the detection stage, we find one arc and use\nshifts initially when we move arc 0 right then left, yielding a total of\nsuch shifts. Each binary search requires shifts of arc 0 (left and\nright), so across the detection stages this is at most when summed\nacross all stages.The way we perform the binary search is quite\nimportant here. Performing it in a naive manner (e.g. shifting half\nleft, test and shifting them back) can use up to queries. Instead, we\nset the number of elements that move in / out of at each iteration of\nthe binary search to be the smaller half. This way we can guarantee that\nthe number of shifts done by the candidate arcs is at most the total\nnumber of candidate arcs in the first place. This becomes since we start\nwith candidate arcs and reduce that number by 1 after each detection\nstage.When we shift each of the arcs left by or (depending on whether\nthey were in when we narrowed it down to 1 arc), we use at most\nshifts.Thus in total, we use at most shifts. For , this is less than ,\nwhich is much lower than the query limit of .Other CommentsThe limit was\nset higher than the provable bound to allow for other possible\nsolutions. At least tester found a different solution that used around\nqueries.Some other optimizations that empirically improve the number of\nqueries: Instead of using arc as the detector, we can randomly pick one\nof the arcs as the detector arcs. At the very beginning, we perform some\nconstant number of random shifts of the arcs (e.g. to random shifts).\nThis helps to break up long groups of arcs that overlap, which speeds up\nthe initial search. The official solution, augmented with these\noptimizations uses well below queries and is very consistent for\nnon-handcrafted test cases.\n"
}