{
    "link": "https://codeforces.com//contest/1863/problem/D",
    "problemId": "2186455",
    "problem_idx": "D",
    "shortId": "1863D",
    "contest_number": "1863",
    "problem_submissions": {
        "G": [
            221136551,
            221139848,
            221147121,
            221150406,
            221156272,
            221151276,
            221147870,
            221157045,
            221150654,
            221158033,
            221156995,
            221150405,
            221155989,
            221155038,
            221160627,
            221149999,
            221166719,
            221155326,
            221159641,
            221165396
        ],
        "F": [
            221121590,
            221127771,
            221128307,
            221138108,
            221130805,
            221136021,
            221136737,
            221129060,
            221140638,
            221137056,
            221128211,
            221139417,
            221137699,
            221127026,
            221139802,
            221154849,
            221135761,
            221144061,
            221150102,
            221217304,
            221142638
        ],
        "E": [
            221110018,
            221117203,
            221116712,
            221116632,
            221114627,
            221123945,
            221125852,
            221119344,
            221123994,
            221117191,
            221120648,
            221126771,
            221126517,
            221139461,
            221119939,
            221121938,
            221123387,
            221126376,
            221121543,
            221217383,
            221127296
        ],
        "D": [
            221102414,
            221109581,
            221105244,
            221107918,
            221106665,
            221103992,
            221113320,
            221110649,
            221111108,
            221103919,
            221112047,
            221112174,
            221110753,
            221112715,
            221104010,
            221113678,
            221110048,
            221113375,
            221110273,
            221109100
        ],
        "C": [
            221098267,
            221102354,
            221100311,
            221098509,
            221100896,
            221098602,
            221107809,
            221105183,
            221098239,
            221098225,
            221102929,
            221105006,
            221102283,
            221103582,
            221098969,
            221099286,
            221102760,
            221106477,
            221099714,
            221101657
        ],
        "A": [
            221096643,
            221096074,
            221096129,
            221096043,
            221095975,
            221096016,
            221096907,
            221096642,
            221101230,
            221095943,
            221096347,
            221097350,
            221096423,
            221097791,
            221095953,
            221096058,
            221096941,
            221096889,
            221096069,
            221097073
        ],
        "B": [
            221096498,
            221097225,
            221097260,
            221096607,
            221096286,
            221096471,
            221098534,
            221098779,
            221102915,
            221096280,
            221097328,
            221098778,
            221097955,
            221099465,
            221096389,
            221096664,
            221099499,
            221099302,
            221096756,
            221098284
        ],
        "I": [
            221276607,
            221276430,
            221275617,
            221825420,
            221197104
        ],
        "H": [
            221188380,
            221214363,
            221182970,
            221376731,
            221376708,
            221376397,
            221187887
        ]
    },
    "name": "D. Two-Colored Dominoes",
    "statement": "There is an n\r\ntimes m board divided into cells. There are also some dominoes on this\r\nboard. Each domino covers two adjacent cells (that is, two cells that\r\nshare a side), and no two dominoes overlap.Piet thinks that this board\r\nis too boring and it needs to be painted. He will paint the cells of the\r\ndominoes black and white. He calls the painting if all of the following\r\nconditions hold: for each domino, one of its cells is painted white and\r\nthe other is painted black; for each row, the number of black cells in\r\nthis row equals the number of white cells in this row; for each column,\r\nthe number of black cells in this column equals the number of white\r\ncells in this column. Note that the cells that are not covered by\r\ndominoes are not painted at all, they are counted as neither black nor\r\nwhite.Help Piet produce a beautiful painting or tell that it is\r\nimpossible.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 30.08.2023 10:41:24       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    int n, m;\n    cin >> n >> m;\n    vector<string> s(n);\n    for (int i = 0; i < n; i++) {\n      cin >> s[i];\n    }\n    bool fail = false;\n    for (int i = 0; i < n - 1; i++) {\n      vector<int> pos;\n      for (int j = 0; j < m; j++) {\n        if (s[i][j] == 'U') {\n          pos.push_back(j);\n        }\n      }\n      if (pos.size() % 2 == 1) {\n        fail = true;\n        break;\n      }\n      for (int id = 0; id < (int) pos.size(); id++) {\n        int j = pos[id];\n        if (id % 2 == 0) {\n          s[i][j] = 'W';\n          s[i + 1][j] = 'B';\n        } else {\n          s[i][j] = 'B';\n          s[i + 1][j] = 'W';\n        }\n      }\n    }\n    for (int j = 0; j < m - 1; j++) {\n      vector<int> pos;\n      for (int i = 0; i < n; i++) {\n        if (s[i][j] == 'L') {\n          pos.push_back(i);\n        }\n      }\n      if (pos.size() % 2 == 1) {\n        fail = true;\n        break;\n      }\n      for (int id = 0; id < (int) pos.size(); id++) {\n        int i = pos[id];\n        if (id % 2 == 0) {\n          s[i][j] = 'W';\n          s[i][j + 1] = 'B';\n        } else {\n          s[i][j] = 'B';\n          s[i][j + 1] = 'W';\n        }\n      }\n    }\n    if (fail) {\n      cout << -1 << '\\n';\n    } else {\n      for (int i = 0; i < n; i++) {\n        cout << s[i] << '\\n';\n      }\n    }\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\D. Two-Colored Dominoes.json",
    "editorial_link": "https://codeforces.com//blog/entry/119902",
    "editorial": "Letâs consider the requirement on the rows. Clearly, all horizontal\r\ndominoes (since each of them has black and white cell) do not influence\r\nthe black-white balance for the rows. Thus, we are only interested in\r\nvertical dominoes.Consider the first row and the vertical dominoes that\r\nintersect this row. Their number has to be even, otherwise, the first\r\nrow has an odd number of cells covered by dominoes and the solution is\r\nclearly impossible. But if there is an even number of such dominoes, we\r\nhave to paint half of them black-white, and half of them white-black.\r\nWhatâs more, it doesnât actually matter the exact order we paint them\r\nin, because vertical dominoes do not affect the columnsâ balance and we\r\nwill not influence the balance of the second row anyway. So we can\r\nfreely paint them however we like. The same logic applies for rows .Now\r\nwe turn to horizontal dominoes. In the first row, there once again has\r\nto be an even number of dominoes which intersect this column. And we can\r\npaint half them black-white, and half of them white-black, and it\r\ndoesnât matter which exact way we choose. Do the same for columns .\r\n",
    "hint": []
}