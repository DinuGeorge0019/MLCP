{
    "link": "https://codeforces.com//contest/1782/problem/C",
    "problemId": "1738309",
    "problem_idx": "C",
    "shortId": "1782C",
    "contest_number": "1782",
    "problem_submissions": {
        "G": [
            189352903,
            189354160,
            189342529,
            189347964,
            189346429,
            189415258,
            189347317,
            189738607,
            189347232,
            189347696,
            189403021,
            189438204,
            189354810,
            189338967,
            189344949
        ],
        "H1": [
            189341567,
            189339761,
            189349634,
            189355935,
            189355012,
            189341367,
            189348685,
            189366896,
            189384259,
            189345985,
            189353203,
            189354256,
            189356712
        ],
        "F": [
            189325657,
            189363621,
            189331442,
            189327188,
            189334558,
            189331825,
            189332228,
            189332897,
            189335481,
            189328585,
            189328764,
            189334100,
            189338796,
            189342861,
            189333278,
            189345646,
            189348301,
            189336716,
            189329952,
            189336813
        ],
        "E": [
            189322203,
            189324476,
            189336013,
            189324984,
            189327367,
            189324941,
            189325259,
            189324742,
            189325043,
            189324750,
            189330839,
            189330033,
            189340117,
            189340110,
            189356727,
            189364874,
            189338107,
            189329882
        ],
        "D": [
            189315553,
            189316553,
            189320757,
            189315522,
            189321240,
            189315774,
            189315356,
            189317449,
            189316444,
            189318717,
            189318855,
            189319485,
            189321217,
            189322258,
            189322561,
            189316855,
            189317394,
            189318806,
            189319611
        ],
        "C": [
            189312571,
            189313515,
            189317007,
            189313044,
            189315685,
            189312570,
            189312443,
            189313938,
            189314521,
            189313780,
            189316398,
            189315035,
            189318312,
            189317410,
            189321818,
            189314789,
            189315093,
            189314367
        ],
        "B": [
            189309405,
            189309603,
            189311019,
            189308821,
            189310918,
            189309246,
            189308942,
            189310194,
            189308126,
            189309056,
            189311263,
            189310085,
            189312839,
            189309172,
            189329674,
            189309853,
            189310568,
            189309470
        ],
        "A": [
            189307515,
            189306919,
            189307198,
            189307124,
            189307391,
            189307301,
            189307111,
            189307534,
            189306943,
            189307353,
            189307056,
            189307424,
            189308244,
            189319051,
            189308061,
            189307499,
            189307060,
            189307053
        ],
        "H2": [
            189361277,
            189352155,
            189886586,
            189749780,
            189366917,
            189362146
        ]
    },
    "name": "C. Equal Frequencies",
    "statement": "Let\u2019s call a string if all characters that are present in it appear the\r\nsame number of times. For example, \"\", \"\", and \"\" are balanced, while \"\"\r\nand \"\" are not.You are given a string s of length n consisting of\r\nlowercase English letters. Find a balanced string t of the same length n\r\nconsisting of lowercase English letters that is different from the\r\nstring s in as few positions as possible. In other words, the number of\r\nindices i such that s_i\r\nne t_i should be as small as possible.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define L(i, j, k) for(int i = (j); i <= (k); ++i)\n#define R(i, j, k) for(int i = (j); i >= (k); --i)\n#define ll long long\n#define sz(a) ((int) (a).size())\n#define vi vector < int > \n#define me(a, x) memset(a, x, sizeof(a))\n#define ull unsigned long long\n#define ld __float128\nusing namespace std;\nconst int N = 1e6 + 7;\nint n, a[N];\nstring s;\nint ord[N], cnt[27], aim[27];\nvoid Main() {\n\tcin >> n;\n\tme(cnt, 0);\n\tcin >> s;\n\tL(i, 0, n - 1) \n\t\tcnt[s[i] - 'a'] += 1;\n\tL(i, 0, 25) ord[i] = i;\n\tsort(ord, ord + 26, [&] (int x, int y) {\n\t\treturn cnt[x] > cnt[y];\n\t});\n\tint ns = 1e9, pos = 0;\n\tL(d, 1, 26) if(n % d == 0) {\n\t\tint w = n / d, val = 0;\n\t\tL(i, 0, d - 1) \n\t\t\tif(cnt[ord[i]] < w) \n\t\t\t\tval += w - cnt[ord[i]];\n\t\tif(val < ns) ns = val, pos = d;\n\t}\n\tint d = pos;\n\tme(aim, 0);\n\tL(i, 0, d - 1) \n\t\taim[ord[i]] = n / d;\n\tfor(auto &u : s) {\n\t\tif(cnt[u - 'a'] > aim[u - 'a']) {\n\t\t\tL(i, 0, 25) \n\t\t\t\tif(cnt[i] < aim[i]) {\n\t\t\t\t\t--cnt[u - 'a'];\n\t\t\t\t\tu = i + 'a';\n\t\t\t\t\t++cnt[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n\t}\n\tcout << ns << '\\n' << s << '\\n';\n}\nint main() {\n\tios :: sync_with_stdio(false);\n\tcin.tie(0); cout.tie(0);\n\tint t;\n\tcin >> t;\n\twhile(t--) Main();\n\treturn 0;\n} "
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "implementation",
        "sortings",
        "strings"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Equal Frequencies.json",
    "editorial_link": "https://codeforces.com//blog/entry/111783",
    "editorial": "Instead of \"finding that differs from in as few positions as possible\",\r\nlet\u00e2\u0080\u0099s formulate it as \"finding that matches in as many positions as\r\npossible\", which is obviously the same.First of all, let\u00e2\u0080\u0099s fix , the\r\nnumber of distinct characters string will have. Since the string must\r\nconsist of lowercase English letters, we have , and since the string\r\nmust be balanced, we have . For each that satisfies these conditions, we\r\nwill construct a balanced string that matches in as many positions as\r\npossible. In the end, out of all strings we will have constructed, we\r\nwill print the one with the maximum number of matches.From now on, we\r\nare assuming is fixed. Suppose we choose some character to be present in\r\nstring . We need to choose exactly positions in to put character .Let be\r\nthe number of occurrences of in .Then, in how many positions can we make\r\nand match using character ? The answer is: in positions.Now, since we\r\nwant to maximize the total number of matches, we should choose\r\ncharacters with the largest values of . This is also equivalent to\r\nchoosing characters with the largest values of .How to construct the\r\ndesired string? For each chosen character , pick any of its occurrences\r\nin and put in the corresponding positions in . Then, if , save the\r\ninformation about unused characters ; otherwise, if , save the\r\ninformation about empty positions in . In the end, match the unused\r\ncharacters with the empty positions arbitrarily.\r\n"
}