{
    "link": "https://codeforces.com//contest/960/problem/G",
    "problemId": "172424",
    "problem_idx": "G",
    "shortId": "960G",
    "contest_number": "960",
    "problem_submissions": {
        "H": [
            37076939,
            37076112,
            37074469,
            37077049
        ],
        "G": [
            37071263,
            57709834,
            57709811,
            37070456,
            37070524,
            37070914,
            37073469,
            37074485,
            37075164,
            37076234,
            37075338,
            37079339,
            37075175,
            37074093,
            37077545
        ],
        "E": [
            37066041,
            37079944,
            37063783,
            37066048,
            37064488,
            37061915,
            37065298,
            37064523,
            37070733,
            37072090,
            37076676,
            37064464,
            37069828,
            37067545,
            37067744,
            37066196,
            37072966
        ],
        "D": [
            37064105,
            37063850,
            37067264,
            37066015,
            37064335,
            37059946,
            37066190,
            37067902,
            37062007,
            37066676,
            37068757,
            37066067,
            37061947,
            37066618,
            37070708,
            37069032,
            37065961
        ],
        "F": [
            37061228,
            37060911,
            37058043,
            37061179,
            37057703,
            37061709,
            37063433,
            37060626,
            37066935,
            37063565,
            37062126,
            37065836,
            37069620,
            37066690,
            37061224,
            37061530,
            37061194,
            37061393,
            37069132
        ],
        "C": [
            37059020,
            37058186,
            37073747,
            37057785,
            37060772,
            37057801,
            37056055,
            37058782,
            37058698,
            37060994,
            37061675,
            37062340,
            37067775,
            37058977,
            37058993,
            37058400,
            37058570,
            37060826
        ],
        "B": [
            37057197,
            37056331,
            37056347,
            37056532,
            37059595,
            37056085,
            37057341,
            37056165,
            37056262,
            37056554,
            37057292,
            37058927,
            37056440,
            37056660,
            37057273,
            37056784,
            37056702,
            37058078
        ],
        "A": [
            37055508,
            37055332,
            37055423,
            37055343,
            37058650,
            37055377,
            37058231,
            37055321,
            37055350,
            37055370,
            37055431,
            37055718,
            37055347,
            37055410,
            37055539,
            37055383,
            37055552
        ]
    },
    "name": "G. Bandit Blues",
    "statement": "Japate, while traveling through the forest of Mala, saw bags of gold\r\nlying in a row. Each bag has some weight of gold between to . Japate can\r\ncarry only one bag of gold with him, so he uses the following strategy\r\nto choose a bag.Initially, he starts with an empty bag (zero weight). He\r\nconsiders the bags in some order. If the current bag has a higher weight\r\nthan the bag in his hand, he picks the current bag.Japate put the bags\r\nin some order. Japate realizes that he will pick bags, if he starts\r\npicking bags from the front, and will pick bags, if he starts picking\r\nbags from the back. By picking we mean replacing the bag in his hand\r\nwith the current one.Now he wonders how many permutations of bags are\r\npossible, in which he picks bags from the front and bags from back using\r\nthe above strategy.Since the answer can be very large, output it modulo\r\n.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=998244353;\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\n\n// FFT_MAXN = 2^k\n// fft_init() to precalc FFT_MAXN-th roots\n\nconst int N=301000;\n\ntypedef double db;\nconst int FFT_MAXN=262144;\nconst db pi=acos(-1.);\nstruct cp{\n\tdb a,b;\n\tcp() {}\n\tcp(db a,db b):a(a), b(b) {}\n\tcp operator+(const cp&y)const{return cp(a+y.a,b+y.b);}\n\tcp operator-(const cp&y)const{return cp(a-y.a,b-y.b);}\n\tcp operator*(const cp&y)const{return cp(a*y.a-b*y.b,a*y.b+b*y.a);}\n\tcp operator!()const{return cp(a,-b);};\n}nw[FFT_MAXN+1];int bitrev[FFT_MAXN];\nvoid dft(cp*a,int n,int flag=1){\n\tint d=0;while((1<<d)*n!=FFT_MAXN)d++;\n\trep(i,0,n)if(i<(bitrev[i]>>d))swap(a[i],a[bitrev[i]>>d]);\n\tfor (int l=2;l<=n;l<<=1){\n\t\tint del=FFT_MAXN/l*flag;\n\t\tfor (int i=0;i<n;i+=l){\n\t\t\tcp *le=a+i,*ri=a+i+(l>>1),*w=flag==1?nw:nw+FFT_MAXN;\n\t\t\trep(k,0,l>>1){\n\t\t\t\tcp ne=*ri**w;\n\t\t\t\t*ri=*le-ne,*le=*le+ne;\n\t\t\t\tle++,ri++,w+=del;\n\t\t\t}\n\t\t}\n\t}\n\tif(flag!=1)rep(i,0,n)a[i].a/=n,a[i].b/=n;\n}\nvoid fft_init(){\n\tint L=0;while((1<<L)!=FFT_MAXN)L++;\n\tbitrev[0]=0;rep(i,1,FFT_MAXN)bitrev[i]=bitrev[i>>1]>>1|((i&1)<<(L-1));\n\tnw[0]=nw[FFT_MAXN]=(cp){1,0};\n//\trep(i,1,(FFT_MAXN>>1)+1)nw[i]=nw[i-1]*ste;\n//\trep(i,(FFT_MAXN>>1)+1,FFT_MAXN)nw[i]=!nw[FFT_MAXN-i];\n\trep(i,0,FFT_MAXN+1)nw[i]=(cp){cos(2*pi/FFT_MAXN*i),sin(2*pi/FFT_MAXN*i)};\t//very slow\n}\n\nvoid convo(db*a,int n,db*b,int m,db*c){\n\tstatic cp f[FFT_MAXN>>1],g[FFT_MAXN>>1],t[FFT_MAXN>>1];\n\tint N=2;while(N<=n+m)N<<=1;\n\trep(i,0,N)\n\t\tif(i&1){\n\t\t\tf[i>>1].b=(i<=n)?a[i]:0.0;\n\t\t\tg[i>>1].b=(i<=m)?b[i]:0.0;\n\t\t}else{\n\t\t\tf[i>>1].a=(i<=n)?a[i]:0.0;\n\t\t\tg[i>>1].a=(i<=m)?b[i]:0.0;\n\t\t}\n\tdft(f,N>>1);dft(g,N>>1);\n\tint del=FFT_MAXN/(N>>1);\n\tcp qua=(cp){0,0.25},one=(cp){1,0},four=(cp){4,0},*w=nw;\n\trep(i,0,N>>1){\n\t\tint j=i?(N>>1)-i:0;\n\t\tt[i]=(four*!(f[j]*g[j])-(!f[j]-f[i])*(!g[j]-g[i])*(one+*w))*qua;\n\t\tw+=del;\n\t}\n\tdft(t,N>>1,-1);\n\trep(i,0,n+m+1)c[i]=(i&1)?t[i>>1].a:t[i>>1].b;\n}\n\nconst ll mo=mod;\nvoid mul(int *a,int *b,int n){// n<=N, 0<=a[i],b[i]<mo\n\tstatic cp f[N],g[N],t[N],r[N];\n\tint nn=2;while(nn<=n+n)nn<<=1;\n\trep(i,0,nn){\n\t\tf[i]=(i<=n)?cp(a[i]>>15,a[i]&32767):cp(0,0);\n\t\tg[i]=(i<=n)?cp(b[i]>>15,b[i]&32767):cp(0,0);\n\t}\n\tswap(n,nn);\n\tdft(f,n,1);dft(g,n,1);\n\trep(i,0,n){\n\t\tint j=i?n-i:0;\n\t\tt[i]=( (f[i]+!f[j])*(!g[j]-g[i]) + (!f[j]-f[i])*(g[i]+!g[j]) )*(cp){0,0.25};\n\t\tr[i]=(!f[j]-f[i])*(!g[j]-g[i])*(cp){-0.25,0} + (cp){0,0.25}*(f[i]+!f[j])*(g[i]+!g[j]);\n\t}\n\tdft(t,n,-1); dft(r,n,-1);\n\trep(i,0,n)a[i]=( (ll(t[i].a+0.5)%mo<<15) + ll(r[i].a+0.5) + (ll(r[i].b+0.5)%mo<<30) )%mo;\n}\n\nint n,a,b;\nint p[N],q[N],u[N],v[N];\nll pw[N],fac[N],fnv[N];\nvoid solve(int n) {\n\tif (n==1) {\n\t\tp[1]=1;\n\t} else if (n%2==1) {\n\t\tsolve(n-1);\n\t\tper(i,1,n+1) p[i]=(p[i-1]+(ll)(n-1)*p[i])%mod;\n\t} else {\n\t\tsolve(n/2);\n\t\tll c=n/2;\n\t\tpw[0]=1;\n\t\trep(i,1,n/2+1) pw[i]=(ll)pw[i-1]*c%mod;\n\t\trep(i,0,n/2+1) u[i]=(ll)p[i]*fac[i]%mod;\n\t\trep(i,0,n/2+1) v[i]=(ll)pw[i]*fnv[i]%mod;\n\t\treverse(v,v+n/2+1);\n\t\tmul(u,v,n/2+1);\n\t\trep(i,0,n/2+1) q[i]=(ll)u[i+n/2]*fnv[i]%mod;\n\t\tmul(p,q,n/2+1);\n\t}\n}\nint main() {\n\tscanf(\"%d%d%d\",&n,&a,&b);\n\tif (a==0||b==0) {\n\t\tputs(\"0\");\n\t\treturn 0;\n\t}\n\tif (a+b>n+1) {\n\t\tputs(\"0\");\n\t\treturn 0;\n\t}\n\tif (n==1) {\n\t\tputs(\"1\");\n\t\treturn 0;\n\t}\n\tfac[0]=fnv[0]=1;\n\trep(i,1,n+1) fac[i]=fac[i-1]*i%mod, fnv[i]=powmod(fac[i],mod-2);\n\tfft_init();\n\tsolve(n-1);\n\tll ret=(ll)p[a+b-2]*fac[a+b-2]%mod*fnv[a-1]%mod*fnv[b-1]%mod;\n\tprintf(\"%lld\\n\",ret);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "fft",
        "math"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\G. Bandit Blues.json",
    "editorial_link": "https://codeforces.com//blog/entry/58802",
    "editorial": "The problem can be seen as to count the number of permutations such that\r\nthe number of records from the front is A and the number of records from\r\nthe back is B, where a record is an element greater than all\r\nprevious.let be the number of permutations such that for elements\r\nexactly records are present from front. Then can be calculated as Let\u00e2\u0080\u0099s\r\nconsider the smallest element if we have it as a record then we can\r\nplace it on front and have the remaining records in ways or we don\u00e2\u0080\u0099t\r\nhave it as a record than we can have the remaining records in ways and\r\nplace this smallest element at any of the remaining positions.let be the\r\nnumber of permutations such that the number of records from the front is\r\nand the number of records from the back is . elements are chosen and\r\nplaced before the largest record such that exactly records are present\r\nin them in ways and the remaining after the largest record such that\r\nrecords are present in ways.We choose the elements in ways. Now we claim\r\nthat Proof Consider permutations of length with records of which are\r\ncolored blue and are colored green.Note Coloring a record means coloring\r\nthe record and every element between this record and previous record.We\r\ncan choose permutations of with records ,then choose of these records to\r\nbe blue in ways.Also for any between and we choose elements to be in\r\nblue then make permutations in these elements with records and make\r\npermutations with exactly records on remaining elements, thus we have in\r\ntotal ways.Hence both are equivalent. Therefore calculating gives our\r\nanswer. forms stirling number of first kind which can be calculated by\r\ncoefficent of in using FFT.\r\n"
}