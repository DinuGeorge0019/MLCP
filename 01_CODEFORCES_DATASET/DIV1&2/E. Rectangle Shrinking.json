{"link": "https://codeforces.com//contest/1782/problem/E", "problemId": "1738311", "problem_idx": "E", "shortId": "1782E", "contest_number": "1782", "problem_submissions": {"G": [189352903, 189354160, 189342529, 189347964, 189346429, 189415258, 189347317, 189738607, 189347232, 189347696, 189403021, 189438204, 189354810, 189338967, 189344949], "H1": [189341567, 189339761, 189349634, 189355935, 189355012, 189341367, 189348685, 189366896, 189384259, 189345985, 189353203, 189354256, 189356712], "F": [189325657, 189363621, 189331442, 189327188, 189334558, 189331825, 189332228, 189332897, 189335481, 189328585, 189328764, 189334100, 189338796, 189342861, 189333278, 189345646, 189348301, 189336716, 189329952, 189336813], "E": [189322203, 189324476, 189336013, 189324984, 189327367, 189324941, 189325259, 189324742, 189325043, 189324750, 189330839, 189330033, 189340117, 189340110, 189356727, 189364874, 189338107, 189329882], "D": [189315553, 189316553, 189320757, 189315522, 189321240, 189315774, 189315356, 189317449, 189316444, 189318717, 189318855, 189319485, 189321217, 189322258, 189322561, 189316855, 189317394, 189318806, 189319611], "C": [189312571, 189313515, 189317007, 189313044, 189315685, 189312570, 189312443, 189313938, 189314521, 189313780, 189316398, 189315035, 189318312, 189317410, 189321818, 189314789, 189315093, 189314367], "B": [189309405, 189309603, 189311019, 189308821, 189310918, 189309246, 189308942, 189310194, 189308126, 189309056, 189311263, 189310085, 189312839, 189309172, 189329674, 189309853, 189310568, 189309470], "A": [189307515, 189306919, 189307198, 189307124, 189307391, 189307301, 189307111, 189307534, 189306943, 189307353, 189307056, 189307424, 189308244, 189319051, 189308061, 189307499, 189307060, 189307053], "H2": [189361277, 189352155, 189886586, 189749780, 189366917, 189362146]}, "name": "E. Rectangle Shrinking", "statement": "You have a rectangular grid of height 2 and width 10^9 consisting of\r\nunit cells. There are n rectangles placed on this grid, and the borders\r\nof these rectangles pass along cell borders. The i-th rectangle covers\r\nall cells in rows from u_i to d_i inclusive and columns from l_i to r_i\r\ninclusive (1\r\nle u_i\r\nle d_i\r\nle 2; 1\r\nle l_i\r\nle r_i\r\nle 10^9). The initial rectangles can intersect, be nested, and coincide\r\narbitrarily.You should either remove each rectangle, or replace it with\r\nany of its non-empty subrectangles. In the latter case, the new\r\nsubrectangle must lie inside the initial rectangle, and its borders must\r\nstill pass along cell borders. In particular, it is allowed for the\r\nsubrectangle to be equal to the initial rectangle.After that\r\nreplacement, no two (non-removed) rectangles are allowed to have common\r\ncells, and the total area covered with the new rectangles must be as\r\nlarge as possible.\r\n", "solutions": ["#include<bits/stdc++.h>\n#define L(i, j, k) for(int i = (j); i <= (k); ++i)\n#define R(i, j, k) for(int i = (j); i >= (k); --i)\n#define ll long long\n#define sz(a) ((int) (a).size())\n#define vi vector < int > \n#define me(a, x) memset(a, x, sizeof(a))\n#define ull unsigned long long\n#define ld __float128\nusing namespace std;\nconst int N = 1e6 + 7;\nint n, u[N], d[N], l[N], r[N]; \nbool vis[N];\nvector < int > S[3];\nvoid solve(vi &a, int rp = -1) {\n\tsort(a.begin(), a.end(), [&] (int x, int y) {\n\t\treturn r[x] == r[y] ? l[x] > l[y] : r[x] < r[y];\n\t});\n\tvi b;\n\tfor(auto x : a) {\n\t\twhile(sz(b) && l[b.back()] >= l[x]) {\n\t\t\tif(rp == -1) vis[b.back()] = false;\n\t\t\telse if(rp == 0) ++u[b.back()];\n\t\t\telse assert(rp == 1), --d[b.back()];\n\t\t\tb.pop_back();\n\t\t} \n\t\tif(sz(b) && r[b.back()] >= l[x]) {\n\t\t\tint y = b.back();\n\t\t\tint lenx = d[x] - u[x] + 1;\n\t\t\tint leny = d[y] - u[y] + 1;\n\t\t\tif(leny <= lenx) r[y] = l[x] - 1;\n\t\t\telse l[x] = r[y] + 1;\n\t\t}\n\t\tb.emplace_back(x); \n\t}\n\ta = b;\n}\nvoid Main() {\n\tcin >> n;\n\tS[0].clear();\n\tS[1].clear();\n\tS[2].clear();\n\tL(i, 1, n) {\n\t\tcin >> u[i] >> l[i] >> d[i] >> r[i];\n\t\tvis[i] = true;\n\t\tint op = -1;\n\t\tif(u[i] == 1 && d[i] == 1) op = 0;\n\t\tif(u[i] == 2 && d[i] == 2) op = 1;\n\t\tif(u[i] == 1 && d[i] == 2) op = 2;\n\t\tassert(op != -1);\n\t\tS[op].emplace_back(i);\n\t} \n\tL(i, 0, 2) solve(S[i]);\n\tfor(auto u : S[2]) L(i, 0, 1) S[i].emplace_back(u);\n\tL(i, 0, 1) solve(S[i], i);\n\t\n\tint sumsz = 0;\n\tL(i, 1, n) if(vis[i]) {\n\t\tint siz = (d[i] - u[i] + 1) * (r[i] - l[i] + 1);\n\t\tif(siz < 0) {\n\t\t\tcout << \"jingya\\n\";\n\t\t\tassert(false);\n\t\t}\n\t\tif(!siz) vis[i] = false;\n\t\tsumsz += siz;\n\t}\n\tcout << sumsz << '\\n';\n\tL(i, 1, n) \n\t\tif(vis[i]) cout << u[i] << ' ' << l[i] << ' ' << d[i] << ' ' << r[i] << '\\n';\n\t\telse cout << 0 << ' ' << 0 << ' ' << 0 << ' ' << 0 << '\\n';\n}\nint main() {\n\tios :: sync_with_stdio(false);\n\tcin.tie(0); cout.tie(0);\n\tint t;\n\tcin >> t;\n\twhile(t--) Main();\n\treturn 0;\n} "], "input": "", "output": "", "tags": ["brute force", "data structures", "greedy", "implementation", "sortings"], "dificulty": "2300", "interactive": false}