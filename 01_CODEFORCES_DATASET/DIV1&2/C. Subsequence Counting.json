{
    "link": "https://codeforces.com//contest/960/problem/C",
    "problemId": "172420",
    "problem_idx": "C",
    "shortId": "960C",
    "contest_number": "960",
    "problem_submissions": {
        "H": [
            37076939,
            37076112,
            37074469,
            37077049
        ],
        "G": [
            37071263,
            57709834,
            57709811,
            37070456,
            37070524,
            37070914,
            37073469,
            37074485,
            37075164,
            37076234,
            37075338,
            37079339,
            37075175,
            37074093,
            37077545
        ],
        "E": [
            37066041,
            37079944,
            37063783,
            37066048,
            37064488,
            37061915,
            37065298,
            37064523,
            37070733,
            37072090,
            37076676,
            37064464,
            37069828,
            37067545,
            37067744,
            37066196,
            37072966
        ],
        "D": [
            37064105,
            37063850,
            37067264,
            37066015,
            37064335,
            37059946,
            37066190,
            37067902,
            37062007,
            37066676,
            37068757,
            37066067,
            37061947,
            37066618,
            37070708,
            37069032,
            37065961
        ],
        "F": [
            37061228,
            37060911,
            37058043,
            37061179,
            37057703,
            37061709,
            37063433,
            37060626,
            37066935,
            37063565,
            37062126,
            37065836,
            37069620,
            37066690,
            37061224,
            37061530,
            37061194,
            37061393,
            37069132
        ],
        "C": [
            37059020,
            37058186,
            37073747,
            37057785,
            37060772,
            37057801,
            37056055,
            37058782,
            37058698,
            37060994,
            37061675,
            37062340,
            37067775,
            37058977,
            37058993,
            37058400,
            37058570,
            37060826
        ],
        "B": [
            37057197,
            37056331,
            37056347,
            37056532,
            37059595,
            37056085,
            37057341,
            37056165,
            37056262,
            37056554,
            37057292,
            37058927,
            37056440,
            37056660,
            37057273,
            37056784,
            37056702,
            37058078
        ],
        "A": [
            37055508,
            37055332,
            37055423,
            37055343,
            37058650,
            37055377,
            37058231,
            37055321,
            37055350,
            37055370,
            37055431,
            37055718,
            37055347,
            37055410,
            37055539,
            37055383,
            37055552
        ]
    },
    "name": "C. Subsequence Counting",
    "statement": "Pikachu had an array with him. He wrote down all the non-empty\r\nsubsequences of the array on paper. Note that an array of size has\r\nnon-empty subsequences in it. Pikachu being mischievous as he always is,\r\nremoved all the subsequences in which Pikachu was finally left with\r\nsubsequences. However, he lost the initial array he had, and now is in\r\nserious trouble. He still remembers the numbers and . He now wants you\r\nto construct any such array which will satisfy the above conditions. All\r\nthe numbers in the final array should be positive integers less than .\r\nNote the number of elements in the output array should not be more than\r\n. If no answer is possible, print .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nint X,d;\nll cur;\nvector<ll> ret;\nint main() {\n\tscanf(\"%d%d\",&X,&d);\n\tcur=1;\n\twhile (X) {\n\t\tper(i,0,30) {\n\t\t\tif (X>=(1<<i)-1) {\n\t\t\t\trep(j,0,i) ret.pb(cur);\n\t\t\t\tX-=(1<<i)-1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcur+=d+1;\n\t}\n\tprintf(\"%d\\n\",SZ(ret));\n\tfor (auto p:ret) printf(\"%lld \",p); puts(\"\");\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Subsequence Counting.json",
    "editorial_link": "https://codeforces.com//blog/entry/58802",
    "editorial": "Letâs call a subsequence valid if the difference of maximum element and\r\nminimum element is less than d.For an array of size with all the\r\nelements equal, there are non-empty subsequences and all of them are\r\nvalid. This is because for any subsequence, the difference of maximum\r\nelement and minimum element is always zero. We will use this observation\r\nin constructing the answer. Letâs look at the binary representation of .\r\nIf the bit is set in X, we will add equal elements (letâs say ) in our\r\nfinal array. However this would give us non-empty valid subsequences. To\r\ncorrect this, we will add a separate element in the final array so that\r\nthe final contribution of bit becomes . We will carry out the same\r\nprocess for all the bits, keeping a counter of the previous In this way,\r\nthe length of the final array will never exceed 600 elements. Expected\r\nComplexity : O(logX * logX)\r\n",
    "hint": []
}