{
    "link": "https://codeforces.com//contest/2061/problem/B",
    "problemId": "3155955",
    "problem_idx": "B",
    "shortId": "2061B",
    "contest_number": "2061",
    "problem_submissions": {
        "F2": [
            302127475,
            302092403,
            302114656,
            302114350,
            302118052,
            302128136,
            302099327,
            302127501,
            302105569,
            302158287,
            302158231,
            302158981,
            302158740,
            302158593,
            302155955
        ],
        "H1": [
            302102508,
            302123846,
            302123275,
            302120307,
            302128240,
            302113263,
            302214973,
            302214838,
            302492170,
            302128311,
            302150853
        ],
        "G": [
            302087277,
            302104836,
            302092310,
            302101290,
            302098614,
            302099751,
            302090244,
            302079497,
            302107342,
            302102846,
            302118471,
            302119832,
            302088828,
            302085801,
            302097252,
            302107147,
            302100360,
            302104471
        ],
        "F1": [
            302070705,
            302068249,
            302076903,
            302139304,
            302085853,
            302085964,
            302087951,
            302076823,
            302099111,
            302088499,
            302088697,
            302106078,
            302076066,
            302095307,
            302083979,
            302077009,
            302082649,
            302158914,
            302081283
        ],
        "E": [
            302060766,
            302059898,
            302064375,
            302146780,
            302146561,
            302146204,
            302145996,
            302145832,
            302145821,
            302145812,
            302060519,
            302071650,
            302062756,
            302067337,
            302066558,
            302071373,
            302078018,
            302075359,
            302069841,
            302067118,
            302063628,
            302073608,
            302071649,
            302075889,
            302072748
        ],
        "D": [
            302057147,
            302056206,
            302056876,
            302056600,
            302064486,
            302056648,
            302061458,
            302060302,
            302063595,
            302065433,
            302068805,
            302064352,
            302061742,
            302059104,
            302069059,
            302065232,
            302069194,
            302062940
        ],
        "C": [
            302053893,
            302052972,
            302060290,
            302053477,
            302058781,
            302053556,
            302058513,
            302056661,
            302060439,
            302057971,
            302066087,
            302059912,
            302059144,
            302055184,
            302066070,
            302060621,
            302062953,
            302059461
        ],
        "B": [
            302048946,
            302050832,
            302052328,
            302049723,
            302053638,
            302049221,
            302054664,
            302052475,
            302055824,
            302052997,
            302059041,
            302057352,
            302051579,
            302051983,
            302056196,
            302056129,
            302055478,
            302054565
        ],
        "A": [
            302047037,
            302049009,
            302047309,
            302047023,
            302047283,
            302047053,
            302047177,
            302047108,
            302047316,
            302047521,
            302047571,
            302047610,
            302047369,
            302048738,
            302047337,
            302048364,
            302049028,
            302047123
        ],
        "H2": [
            302541217
        ],
        "I": [
            302144176,
            302142123,
            302142064,
            302141919,
            302124920,
            302518298,
            302518173,
            302517883
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/138620",
    "editorial": "Let and be the lengths of the two bases, and let be the length of the\r\ntwo legs. A necessary and sufficient condition for forming an isosceles\r\ntrapezoid with a positive area is , as the longest edge must be shorter\r\nthan the sum of the other three edges.To determine whether an isosceles\r\ntrapezoid can be formed, consider the following cases: If there are two\r\ndistinct pairs of identical numbers that do not overlap, these pairs can\r\nalways form an isosceles trapezoid. If there are no pairs of identical\r\nnumbers, it is impossible to form an isosceles trapezoid. If there is\r\nexactly one pair of identical numbers, denoted by , we will use them as\r\nthe legs. Remove this pair and check whether there exist two other\r\nnumbers whose difference is less than . This can be efficiently done by\r\nsorting the remaining numbers and checking adjacent pairs. The time\r\ncomplexity of this approach is .\r\n",
    "name": "B. Kevin and Geometry",
    "statement": "Kevin has n sticks with length a_1,a_2,\r\nldots,a_n.Kevin wants to select 4 sticks from these to form an isosceles\r\ntrapezoid^{\r\ntext{ }} with a positive area. Note that rectangles and squares are also\r\nconsidered isosceles trapezoids. Help Kevin find a solution. If no\r\nsolution exists, output -1.^{\r\ntext{ }}An isosceles trapezoid is a convex quadrilateral with a line of\r\nsymmetry bisecting one pair of opposite sides. In any isosceles\r\ntrapezoid, two opposite sides (the bases) are parallel, and the two\r\nother sides (the legs) are of equal length.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using i64 = long long;using u64 = unsigned long long;using u32 = unsigned;using u128 = unsigned __int128; void solve() {    int n;    std::cin >> n;        std::vector<int> a(n);    for (int i = 0; i < n; i++) {        std::cin >> a[i];    }        std::sort(a.begin(), a.end());        int k = -1;    for (int i = 1; i < n; i++) {        if (a[i] == a[i - 1]) {            k = i;        }    }    if (k == -1) {        std::cout << -1 << \"\\n\";        return;    }        int x = a[k];    a.erase(a.begin() + k);    a.erase(a.begin() + k - 1);        for (int i = 1; i < a.size(); i++) {        if (a[i] < a[i - 1] + 2 * x) {            std::cout << x << \" \" << x << \" \" << a[i - 1] << \" \" << a[i] << \"\\n\";            return;        }    }    std::cout << -1 << \"\\n\";} int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "geometry",
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\B. Kevin and Geometry.json"
}