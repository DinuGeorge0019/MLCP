{
    "link": "https://codeforces.com//contest/1975/problem/A",
    "problemId": "2665472",
    "problem_idx": "A",
    "shortId": "1975A",
    "contest_number": "1975",
    "problem_submissions": {
        "H": [
            262631844,
            262612241,
            262600659,
            262612635,
            263096548
        ],
        "G": [
            262620370,
            262584629,
            262630306,
            262578664,
            262622745,
            262588918,
            262593694,
            262594206,
            262595918,
            262599422,
            262708940,
            262706456,
            262598241,
            262653444,
            262620831,
            262602673,
            262607334,
            262630272,
            262607273,
            262706071,
            262602704,
            262606536,
            262606903,
            262607812,
            263091775,
            263089587,
            263088604,
            263088409,
            263086834,
            263086045,
            262606154,
            264861303,
            262776553,
            262774627,
            262774590,
            262661298,
            262661024,
            262660704,
            262660316,
            262660273,
            262649420,
            262647737,
            262637294,
            262637274,
            262636778,
            262636749,
            262636610,
            262628729,
            262609429
        ],
        "E": [
            262558741,
            262555523,
            262542791,
            262569978,
            262560342,
            262572286,
            262561563,
            262558869,
            262555295,
            262569100,
            262560726,
            262553867,
            262556464,
            262558648,
            262561133,
            262565554,
            262576529,
            262575502,
            262635435,
            262635401,
            262635086,
            262635019,
            262630627,
            262630590,
            262570080
        ],
        "F": [
            262544594,
            262562050,
            262557811,
            262552279,
            262571108,
            262585701,
            262572669,
            262581085,
            262582375,
            262578636,
            262570215,
            262564737,
            262572783,
            262580057,
            262586122,
            262583527,
            262590488,
            262590492,
            262629974,
            262593633
        ],
        "D": [
            262526751,
            262533906,
            262549799,
            262548001,
            262535765,
            262555432,
            262532809,
            262542647,
            262536556,
            262547635,
            262538823,
            262574019,
            262544846,
            262547400,
            262544181,
            262539052,
            262538393,
            262538893,
            262629935,
            262543856
        ],
        "A": [
            262522755,
            262521103,
            262521181,
            262521345,
            262530553,
            262521158,
            262521224,
            262521209,
            262523388,
            262521604,
            262521957,
            262521117,
            262521171,
            262521739,
            262524060,
            262521821,
            262521219,
            262521958
        ],
        "C": [
            262522159,
            262524942,
            262525029,
            262526905,
            262542130,
            262526806,
            262529464,
            262528086,
            262531414,
            262526373,
            262530226,
            262525393,
            262531728,
            262530061,
            262528640,
            262528306,
            262542306,
            262526711
        ],
        "B": [
            262521205,
            262521505,
            262522451,
            262522658,
            262534024,
            262523709,
            262523854,
            262522613,
            262526293,
            262523579,
            262524186,
            262521924,
            262522192,
            262523093,
            262522741,
            262523954,
            262521898,
            262521340
        ],
        "I": []
    },
    "editorial_link": "https://codeforces.com//blog/entry/129801",
    "editorial": "SolutionRead the hints.If is non-decreasing initially, the answer is\r\nyes.If isn\u00e2\u0080\u0099t non-decreasing initially, we can find the smallest such\r\nthat . Then we choose and . If the array is non-decreasing, the answer\r\nis yes. Otherwise, the answer is no.\r\n",
    "name": "A. Bazoka and Mocha s Array",
    "statement": "Mocha likes arrays, so before her departure, Bazoka gave her an array a\r\nconsisting of n positive integers as a gift.Now Mocha wants to know\r\nwhether array a could become sorted in non-decreasing order after\r\nperforming the following operation some (possibly, zero) times: Split\r\nthe array into two parts a prefix and a suffix, then swap these two\r\nparts. In other words, let a=x+y. Then, we can set a:= y+x. Here +\r\ndenotes the array concatenation operation. For example, if\r\na=[3,1,4,1,5], we can choose x=[3,1] and y=[4,1,5], satisfying a=x+y.\r\nThen, we can set a:= y + x = [4,1,5,3,1]. We can also choose\r\nx=[3,1,4,1,5] and y=[\r\n,], satisfying a=x+y. Then, we can set a := y+x = [3,1,4,1,5]. Note that\r\nwe are not allowed to choose x=[3,1,1] and y=[4,5], neither are we\r\nallowed to choose x=[1,3] and y=[5,1,4], as both these choices do not\r\nsatisfy a=x+y.\r\n",
    "solutions": [
        "/** *    author:  tourist *    created: 25.05.2024 10:02:14**/#include <bits/stdc++.h>\u00a0using namespace std;\u00a0#ifdef LOCAL#include \"algo/debug.h\"#else#define debug(...) 42#endif\u00a0int main() {  ios::sync_with_stdio(false);  cin.tie(0);  int tt;  cin >> tt;  while (tt--) {    int n;    cin >> n;    vector<int> a(n);    for (int i = 0; i < n; i++) {      cin >> a[i];    }    bool ok = false;    for (int it = 0; it < n; it++) {      ok |= is_sorted(a.begin(), a.end());      rotate(a.begin(), a.begin() + 1, a.end());    }    cout << (ok ? \"YES\" : \"NO\") << '\\n';  }  return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\A. Bazoka and Mocha s Array.json"
}