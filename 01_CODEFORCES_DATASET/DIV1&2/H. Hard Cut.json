{
    "link": "https://codeforces.com//contest/1684/problem/H",
    "problemId": "1404378",
    "problem_idx": "H",
    "shortId": "1684H",
    "contest_number": "1684",
    "problem_submissions": {
        "H": [
            157720671,
            157721062,
            157737875,
            157719283,
            157728267,
            157723148,
            157726010,
            157736069,
            157792151,
            157760208,
            157735749,
            157733310,
            157739555,
            157762123,
            157758402,
            157757414
        ],
        "G": [
            157708800,
            157705200,
            157707312,
            157718616,
            157706754,
            157714488,
            157707640,
            157712978,
            157718288,
            157710983,
            157717212,
            157716133,
            157711996,
            157713632,
            157715613,
            157714692,
            157708417,
            157712457,
            157717126
        ],
        "F": [
            157703000,
            157698430,
            157700853,
            157708707,
            157699813,
            157705688,
            157700819,
            157704615,
            157713662,
            157705196,
            157701872,
            157704273,
            157706345,
            157707380,
            157707253,
            157706734,
            157720973,
            157723693,
            157711135
        ],
        "E": [
            157687824,
            157689230,
            157686803,
            157694670,
            157693301,
            157693626,
            157692297,
            157688860,
            157691406,
            157698450,
            157692770,
            157697303,
            157697857,
            157695549,
            157699844,
            157698604,
            157694457,
            157697019,
            157700499
        ],
        "D": [
            157681158,
            157683410,
            157690778,
            157683407,
            157688074,
            157688564,
            157683855,
            157682485,
            157678956,
            157684552,
            157688505,
            157689349,
            157690936,
            157696580,
            157687171,
            157693792,
            157688577,
            157691760,
            157692016
        ],
        "C": [
            157676125,
            157679761,
            157680827,
            157678864,
            157733908,
            157680852,
            157679175,
            157675870,
            157680982,
            157722992,
            157680866,
            157688681,
            157680491,
            157680374,
            157689989,
            157710336,
            157680413,
            157683798
        ],
        "B": [
            157669712,
            157671031,
            157673644,
            157673851,
            157673406,
            157672145,
            157673363,
            157673187,
            157671551,
            157673379,
            157675976,
            157675416,
            157675741,
            157672916,
            157673228,
            157675698,
            157678091,
            157671319,
            157673490
        ],
        "A": [
            157669088,
            157669275,
            157669176,
            157669141,
            157669362,
            157669203,
            157669522,
            157669224,
            157669098,
            157669297,
            157671508,
            157669642,
            157676097,
            157669933,
            157669278,
            157670146,
            157669180,
            157669153,
            157669255
        ]
    },
    "name": "H. Hard Cut",
    "statement": "You are given a binary string s. You have to cut it into any number of\r\nnon-intersecting substrings, so that the sum of binary integers denoted\r\nby these substrings is a power of 2. Each element of s should be in\r\nexactly one substring.\r\n",
    "solutions": [
        "/**\n *    author:  tourist\n *    created: 19.05.2022 20:11:05       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int tt;\n  cin >> tt;\n  while (tt--) {\n    string s;\n    cin >> s;\n    int len = (int) s.size();\n    int bc = 0;\n    for (char c : s) {\n      bc += (c == '1');\n    }\n    if (bc == 0) {\n      cout << -1 << '\\n';\n      continue;\n    }\n    int goal = 1;\n    while (goal < bc) {\n      goal <<= 1;\n    }\n    int add = goal - bc;\n    vector<int> coeff(len, 0);\n    int until = len;\n    int ptr = len - 2;\n    while (ptr >= 0) {\n      if (s[ptr] == '0') {\n        ptr -= 1;\n        continue;\n      }\n      int x = ptr;\n      while (x > 0 && s[x - 1] == '1') {\n        x -= 1;\n      }\n      int v = 1;\n      if (ptr + 2 < len && coeff[ptr + 2] == 0) {\n        if (add == 2) {\n          for (int j = ptr + 2; j < until; j++) {\n            if (coeff[j] == 1 && coeff[j - 1] == 0) {\n              coeff[j] = 0;\n              add += 1;\n              break;\n            }\n          }\n          until = ptr + 2;\n        }\n        if (add >= 3) {\n          v = 3;\n        }\n      }\n      for (int i = ptr; i >= x; i--) {\n        if (v == 0) {\n          coeff[i] = 0;\n          v = 1;\n          continue;\n        }\n        if (v == 1) {\n          if (add >= 1) {\n            add -= 1;\n            coeff[i] = 1;\n            v = 3;\n          } else {\n            coeff[i] = 0;\n            v = 1;\n          }\n          continue;\n        }\n        if (v == 3) {\n          if (add == 2) {\n            for (int j = ptr + 2; j < until; j++) {\n              if (coeff[j] == 1 && coeff[j - 1] == 0) {\n                coeff[j] = 0;\n                add += 1;\n                break;\n              }\n            }\n            until = ptr + 2;\n          }\n          if (add >= 3) {\n            add -= 3;\n            coeff[i] = 3;\n            v = 0;\n          } else {\n            coeff[i] = 0;\n            v = 1;\n          }\n          continue;\n        }\n        assert(false);\n      }\n      ptr = x - 1;\n    }\n    if (add > 0) {\n      assert(len >= 5);\n      coeff.assign(len, 0);\n      coeff[len - 4] = 7;\n    }\n    vector<pair<int, int>> seq;\n    int sum = 0;\n    ptr = 0;\n    while (ptr < len) {\n      int take = (coeff[ptr] == 7 ? 4 : (coeff[ptr] == 3 ? 3 : (coeff[ptr] == 1 ? 2 : 1)));\n      assert(ptr + take <= len);\n      seq.emplace_back(ptr, ptr + take - 1);\n      int num = 0;\n      for (int i = ptr; i < ptr + take; i++) {\n        num = num * 2 + (int) (s[i] - '0');\n      }\n      sum += num;\n      ptr += take;\n    }\n    cout << seq.size() << '\\n';\n    for (auto& p : seq) {\n      cout << p.first + 1 << \" \" << p.second + 1 << '\\n';\n    }\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "divide and conquer",
        "math"
    ],
    "dificulty": "3400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\H. Hard Cut.json",
    "editorial_link": "https://codeforces.com//blog/entry/102995",
    "editorial": "Letâs say that there are ones in the given string.We will build the\r\nanswer for all . is the only case when the answer does not exist., , cut\r\ninto single digits. described later.Letâs consider :If all ones are in a\r\nrow, then we should cut them into .Else there will be either or and the\r\nother part of the string may be cut into single digits so the sum will\r\nbe .Now letâs consider (here we will also consider ):Letâs describe the\r\nfunction for cutting the susbtring from to with ones to get the sum .\r\nLetâs use the \"divide and conquer\" technique: we have a string with ones\r\nand we want to get the sum , and for big enough we can just cut the\r\nwhole string into two substrings with almost equal number of ones, run\r\nthe algorithm for them and get the sum . Now letâs show how to make such\r\ncut for all strings that have from to ones and after that for all we\r\nwill be able to run the method decribed above. Just cut into single\r\ndigits. Letâs consider the first two ones. If they are consequent then\r\nwe will cut them into a single substring. It costs us only two ones but\r\nit increases the sum by . If these two ones are not consequent then we\r\nwill cut out the segments and . This way we spend two ones again and the\r\nsum increases by as well. Also it is always possible to cut off a single\r\ndigit so it is easy to see that we can get any sum from to . This way we\r\ngot the answer for . Now we only need to show how to make the cut for .\r\nLetâs consider a substring of length that starts in the leftmost one,\r\nthere are possible cases: , then we need to use ones to get the sum ,\r\nwhich we know how to do. , then we need to use ones to get the sum , we\r\nwill show it in the end. , then we need to use ones to get the sum ,\r\nwhich we know how to do. , then we need to use ones to get the sum ,\r\nwhich we know how to do. To do that letâs cut a substring with ones from\r\nthe left and get the sum and a remaining substring with ones and get the\r\nsum . We already know how to get the second sum so now there is only and\r\nleft. Letâs consider the last two cases for full solution::Letâs do the\r\nsame thing as we did for , cut off a substring of length that starts\r\nfrom the leftmost one. Then we have two substrings and for both of them\r\nwe know how to cut them properly.:Letâs cut off the first four ones and\r\nuse the previous technique we will get the sum . The remaining three\r\nones we will use to get the sum .This shows how to cut the string for\r\nany .\r\n",
    "hint": []
}