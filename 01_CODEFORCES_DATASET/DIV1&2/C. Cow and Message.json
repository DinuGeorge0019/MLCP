{
    "link": "https://codeforces.com//contest/1307/problem/C",
    "problemId": "542679",
    "problem_idx": "C",
    "shortId": "1307C",
    "contest_number": "1307",
    "problem_submissions": {
        "D": [
            71334675,
            71329379,
            71297375,
            71300630,
            71300597,
            71296525,
            71299736,
            71299787,
            71299649,
            71294218,
            71299266,
            71353437,
            71301135,
            71298819,
            71297533,
            71302173,
            71301113,
            71306340,
            71311289,
            71303681,
            71296481
        ],
        "F": [
            71318320,
            71328004,
            71328410,
            71313540,
            71342732,
            71342701,
            71342679,
            71342641,
            71378556,
            71386768,
            71330817,
            71353605,
            71341156,
            71340667,
            71331133,
            71325872,
            71974189
        ],
        "E": [
            71311504,
            71318452,
            71321704,
            71329781,
            71312470,
            71310373,
            71310234,
            71311741,
            71326064,
            71325657,
            71312968,
            71315289,
            71309289,
            71345858,
            71345831,
            71345723,
            71345591,
            71345520,
            71345206,
            71344772,
            71344661,
            71308214,
            71331493,
            71309218,
            71315974,
            71328300,
            71317669,
            71329605
        ],
        "G": [
            71303096,
            71336439,
            71307493,
            71308346,
            71320475,
            71303320,
            71313925,
            71322572,
            71322223,
            71309226,
            71311369,
            71356337,
            71319400,
            71321748,
            71313979,
            71354003,
            71316843,
            71327328,
            71316390,
            71329594,
            71321365
        ],
        "C": [
            71291268,
            71289526,
            71293976,
            71293545,
            71288006,
            71294250,
            71293163,
            71291197,
            71300886,
            71294829,
            71291105,
            71294718,
            71292675,
            71291425,
            71296070,
            71290915,
            71292479,
            71297176,
            71298646,
            71291499
        ],
        "B": [
            71289205,
            71287726,
            71290885,
            71290721,
            71289353,
            71290602,
            71289374,
            71288121,
            71299427,
            71291607,
            71289046,
            71290292,
            71334215,
            71288723,
            71290619,
            71288909,
            71289266,
            71289248,
            71288946,
            71288924
        ],
        "A": [
            71287300,
            71287160,
            71287363,
            71290273,
            71290150,
            71287273,
            71287420,
            71292915,
            71295372,
            71287966,
            71287342,
            71287721,
            71287194,
            71287212,
            71288221,
            71287271,
            71287331,
            71287368,
            71290172,
            71287362
        ]
    },
    "name": "C. Cow and Message",
    "statement": "Bessie the cow has just intercepted a text that Farmer John sent to\r\nBurger Queen! However, Bessie is sure that there is a secret message\r\nhidden inside.The text is a string s of lowercase Latin letters. She\r\nconsiders a string t as hidden in string s if t exists as a subsequence\r\nof s whose indices form an arithmetic progression. For example, the\r\nstring is hidden in string because it occurs at indices 1, 3, and 5,\r\nwhich form an arithmetic progression with a common difference of 2.\r\nBessie thinks that any hidden string that occurs the most times is the\r\nsecret message. Two occurrences of a subsequence of S are distinct if\r\nthe sets of indices are different. Help her find the number of\r\noccurrences of the secret message!For example, in the string , is hidden\r\n3 times, is hidden 2 times, is hidden 6 times, is hidden 3 times, is\r\nhidden 1 time, is hidden 2 times, is hidden 1 time, is hidden 1 time, is\r\nhidden 1 time, is hidden 1 time, and is hidden 1 time. The number of\r\noccurrences of the secret message is 6.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\ntypedef double db;\nmt19937 mrand(random_device{}()); \nconst ll mod=1000000007;\nint rnd(int x) { return mrand() % x;}\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nconst int N=101000;\nchar s[N];\nll cnt[40][40],cc[40],ans;\nint main() {\n\tscanf(\"%s\",s);\n\tint n=strlen(s);\n\trep(i,0,n) {\n\t\tint w=s[i]-'a';\n\t\trep(j,0,26) cnt[w][j]+=cc[j];\n\t\tcc[w]++;\n\t}\n\trep(i,0,26) rep(j,0,26) ans=max(ans,cnt[i][j]);\n\trep(i,0,26) ans=max(ans,cc[i]);\n\tprintf(\"%lld\\n\",ans);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "math",
        "strings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Cow and Message.json",
    "editorial_link": "https://codeforces.com//blog/entry/73953",
    "editorial": "We observe that if the hidden string that occurs the most times has\r\nlength longer than , then there must exist one that occurs just as many\r\ntimes of length exactly . This is true because we can always just take\r\nthe first letters; there can\u00e2\u0080\u0099t be any collisions. Therefore, we only\r\nneed to check strings of lengths and . Checking strings of length is\r\neasy. To check strings of length , we can iterate across from left to\r\nright and update the number of times we have seen each string of length\r\nand using DP.Time Complexity: (c is length of alphabet)\r\n"
}