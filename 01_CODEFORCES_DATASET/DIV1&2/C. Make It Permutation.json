{
    "link": "https://codeforces.com//contest/1810/problem/C",
    "problemId": "1858188",
    "problem_idx": "C",
    "shortId": "1810C",
    "contest_number": "1810",
    "problem_submissions": {
        "H": [
            200016390,
            200313241,
            200015282,
            200812601,
            200812580
        ],
        "G": [
            199990963,
            200002014,
            199996533,
            200001110,
            200003038,
            200004181,
            200005432,
            199993820,
            200004120,
            200568360,
            200010476,
            200003987,
            200009790,
            200084069,
            200013246,
            200017198,
            200016482,
            200017082
        ],
        "F": [
            199985968,
            199984766,
            199989455,
            199989236,
            199990364,
            199996618,
            199996912,
            199994977,
            200012837,
            199994874,
            200568272,
            200001624,
            200000551,
            200004906,
            200000508,
            200003276,
            200003731,
            200007640,
            199989234,
            200033060,
            200032756,
            200032417,
            199995728
        ],
        "E": [
            199973604,
            199973630,
            199978803,
            199976534,
            199977412,
            199980989,
            199981737,
            199978795,
            199980030,
            199987523,
            200568220,
            199981333,
            199992052,
            199984164,
            199985692,
            199981426,
            199983733,
            199981446,
            199972392,
            199985691
        ],
        "D": [
            199968387,
            199968634,
            199971474,
            199971965,
            199971391,
            199974445,
            199974261,
            199971649,
            199972646,
            199975130,
            200568168,
            199974978,
            199975450,
            199972122,
            199977461,
            199974856,
            199972685,
            199972896,
            199981843,
            199971530
        ],
        "C": [
            199963369,
            199964848,
            199966060,
            199965953,
            199966410,
            199967396,
            199960693,
            199966704,
            199968525,
            199967275,
            200567509,
            199968793,
            199967659,
            199965932,
            199965761,
            199966489,
            199966901,
            199965471,
            199965927,
            199965128
        ],
        "B": [
            199960187,
            199959404,
            199963381,
            199961597,
            199960246,
            199963356,
            199965608,
            199963400,
            199964087,
            199961201,
            200567461,
            199963792,
            199967959,
            199962648,
            199961478,
            199962690,
            199964055,
            199962786,
            199961957,
            199961076
        ],
        "A": [
            199957585,
            199957600,
            199957721,
            199957828,
            199957624,
            199957823,
            199967044,
            199957994,
            199959433,
            199957593,
            200567421,
            199957914,
            199957630,
            199957622,
            199957736,
            199957568,
            199959457,
            199957708,
            199957575,
            199957879
        ]
    },
    "name": "C. Make It Permutation",
    "statement": "You have an integer array a of length n. There are two kinds of\r\noperations you can make. Remove an integer from a. This operation costs\r\nc. Insert an arbitrary positive integer x to any position of a (to the\r\nfront, to the back, or between any two consecutive elements). This\r\noperation costs d.You want to make the final array a permutation of\r\npositive length. Please output the minimum cost of doing that. Note that\r\nyou can make the array empty during the operations, but the final array\r\nmust contain at least one integer.A permutation of length n is an array\r\nconsisting of n distinct integers from 1 to n in arbitrary order. For\r\nexample, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation\r\n(2 appears twice in the array), and [1,3,4] is also not a permutation\r\n(n=3 but there is 4 in the array).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n, c, d;\n    std::cin >> n >> c >> d;\n    \n    std::vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> a[i];\n    }\n    \n    std::sort(a.begin(), a.end());\n    i64 ans = 1LL * c * n + d;\n    \n    int t = 0;\n    for (int i = 0; i < n; i++) {\n        if (i == 0 || a[i] != a[i - 1]) {\n            t += 1;\n        }\n        ans = std::min(ans, 1LL * c * n + 1LL * d * a[i] - 1LL * (c + d) * t);\n    }\n    std::cout << ans << \"\\n\";\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    \n    while (t--) {\n        solve();\n    }\n    \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "sortings"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Make It Permutation.json",
    "editorial_link": "https://codeforces.com//blog/entry/114521",
    "editorial": "TutorialFirstly, we need to remove numbers such that each number appears\r\nat most once, this part of cost is unavoidable. Then, letâs sort the\r\narray ().Secondly, assume we enumerate the length of the permutation .\r\nWe need to remove all the greater than , and insert some numbers () but\r\ndoes not appear in the array . We can find some such that , the cost\r\nhere is simply . Here, is the length of array , after removing the\r\nrepeated numbers.However, can up to and can not be enumerated. But for\r\nall the , the smaller has a smaller cost. (see that do not change, and\r\ndecreases). Thus, the possible can only be some , and we can caculate\r\nthe cost in in total.Donât forget the special case: remove all the\r\nnumbers and add a .\r\n",
    "hint": []
}