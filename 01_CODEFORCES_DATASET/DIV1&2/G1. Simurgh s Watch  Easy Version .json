{
    "link": "https://codeforces.com//contest/2034/problem/G1",
    "problemId": "3057442",
    "problem_idx": "G1",
    "shortId": "2034G1",
    "contest_number": "2034",
    "problem_submissions": {
        "G2": [
            294090902,
            294102835,
            294091710
        ],
        "H": [
            294074360,
            294061476,
            294070650,
            294080097,
            294083247,
            294085834,
            294087678,
            294090336,
            294084822,
            294087654,
            294090587,
            294104472,
            294104397,
            294104185,
            294103049,
            294058057,
            294072183,
            294081941,
            294086147,
            294091448
        ],
        "G1": [
            294068700,
            294089598,
            294090555,
            294512628,
            294279844,
            294078743,
            294092614,
            294083324,
            294137051,
            298736856
        ],
        "F2": [
            294044355,
            294048880,
            294057967,
            294058547,
            294044212,
            294052710,
            294062635,
            294059190,
            294064262,
            294068869,
            294068913,
            294056682,
            294087439,
            294054148,
            294055470,
            294067548,
            294048518,
            294098694,
            297729208
        ],
        "F1": [
            294044201,
            294045676,
            294057746,
            294058488,
            294044581,
            294052242,
            294063014,
            294059348,
            294064621,
            294068676,
            294069032,
            294056298,
            294079209,
            294055715,
            294050068,
            294055587,
            294059717,
            294048439,
            294065367,
            294063971
        ],
        "E": [
            294039732,
            294035256,
            294043120,
            294044445,
            294061596,
            294042263,
            294051208,
            294051638,
            294059206,
            294057047,
            294047623,
            294072917,
            294043657,
            294040686,
            294046402,
            294070560,
            294044216,
            294048932,
            294047270
        ],
        "D": [
            294029209,
            294029423,
            294031077,
            294032177,
            294053262,
            294029511,
            294040505,
            294041118,
            294048071,
            294036073,
            294034324,
            294064606,
            294034084,
            294023836,
            294028591,
            294031360,
            294038809,
            294039055
        ],
        "C": [
            294019511,
            294017117,
            294018450,
            294020877,
            294023563,
            294033582,
            294025662,
            294021753,
            294020563,
            294027112,
            294020897,
            294016537,
            294062723,
            294021341,
            294029864,
            294018381,
            294021917,
            294017733,
            294050791,
            294028560
        ],
        "B": [
            294013321,
            294006563,
            294009984,
            294010387,
            294010473,
            294013337,
            294026398,
            294010402,
            294011621,
            294010156,
            294007642,
            294050334,
            294011602,
            294008120,
            294012362,
            294012172,
            294084096,
            294006809,
            294008731
        ],
        "A": [
            294004839,
            294004703,
            294005425,
            294005031,
            294006081,
            294004631,
            294006317,
            294005105,
            294006032,
            294005086,
            294004777,
            294047604,
            294005991,
            294004926,
            294006968,
            294005489,
            294006094,
            294004648,
            294005025
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136579",
    "editorial": "Solution It is easy to check if the solution can be achieved with only\r\none color. For any time point , there must be at most one interval\r\ncontaining , since if multiple intervals contain , they must be colored\r\ndifferently. A simple strategy is to solve the problem using three\r\ncolors. First, we color some intervals with colors 1 and 2, then color\r\nothers with color 3. For each step, we find the leftmost point that has\r\nnot been colored yet and color the segment that contains this point. We\r\nalways choose the interval with the largest endpoint that contains the\r\ncurrent point. By coloring the intervals alternately with colors 1 and\r\n2, we ensure that all points are covered by exactly one of these colors.\r\nNow, we check if we can color the intervals with just two colors using a\r\ngreedy algorithm: We iterate over the intervals sorted by start\r\n(increasingly) and then by end (decreasingly). At each point, we keep\r\ntrack of the number of colors used in previous intervals that are not\r\nyet closed. Let this number be , and suppose we are currently at\r\ninterval . We color the current interval based on the value of : If ,\r\ncolor interval with color 1. If , color interval with the opposite color\r\nof the current used color. If , color interval with the opposite color\r\nof the interval with the greatest endpoint among the currently open\r\nintervals. If it is impossible to assign a unique color between\r\noverlapping intervals at any point, it can be shown that coloring the\r\nintervals using only 2 colors is impossible. Solving G1 using G2: It s\r\nsufficient to check the integer points and half-points (e.g., 1.5, 2.5,\r\n) to verify whether the coloring is valid (Why?). To handle this, we can\r\nmultiply all the given points by two, effectively converting the problem\r\ninto one in which only integer points exist. After this transformation,\r\nwe solve the problem in the integer system of G2, where the intervals\r\nand coloring rules are defined using integer boundaries! Note: A brief\r\nexplanation of why this greedy algorithm works can be found here.\r\n",
    "name": "G1. Simurgh s Watch  Easy Version ",
    "statement": "The legendary Simurgh, a mythical bird, is responsible for keeping watch\r\nover vast lands, and for this purpose, she has enlisted n vigilant\r\nwarriors. Each warrior is alert during a specific time segment [l_i,\r\nr_i], where l_i is the start time (included) and r_i is the end time\r\n(included), both positive integers. One of Simurgh’s trusted advisors,\r\nZal, is concerned that if multiple warriors are stationed at the same\r\ntime and all wear the same color, the distinction between them might be\r\nlost, causing confusion in the watch. To prevent this, whenever multiple\r\nwarriors are on guard at the same moment (), there must be at least one\r\ncolor which is worn by exactly one warrior.So the task is to determine\r\nthe minimum number of colors required and assign a color c_i to each\r\nwarrior’s segment [l_i, r_i] such that, for every (real) time t\r\ncontained in at least one segment, there exists one color which belongs\r\nto exactly one segment containing t.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define L(i, j, k) for(int i = (j); i <= (k); ++i)#define R(i, j, k) for(int i = (j); i >= (k); --i)#define ll long long #define sz(a) ((int) (a).size())#define pb emplace_back#define me(a, x) memset(a, x, sizeof(a))#define vi vector<int>#define ull unsigned long long#define i128 __int128using namespace std;const int N = 1e6 + 7, mod = 998244353;struct mint {\tint x;\tinline mint(int o = 0) { x = o; }\tinline mint & operator = (int o) { return x = o, *this; }\tinline mint & operator += (mint o) { return (x += o.x) >= mod && (x -= mod), *this; }\tinline mint & operator -= (mint o) { return (x -= o.x) < 0 && (x += mod), *this; }\tinline mint & operator *= (mint o) { return x = (ll) x * o.x % mod, *this; }\tinline mint & operator ^= (int b) {\t\tmint w = *this;\t\tmint ret(1);\t\tfor(; b; b >>= 1, w *= w) if(b & 1) ret *= w;\t\treturn x = ret.x, *this;\t}\tinline mint & operator /= (mint o) { return *this *= (o ^= (mod - 2)); }\tfriend inline mint operator + (mint a, mint b) { return a += b; }\tfriend inline mint operator - (mint a, mint b) { return a -= b; }\tfriend inline mint operator * (mint a, mint b) { return a *= b; }\tfriend inline mint operator / (mint a, mint b) { return a /= b; }\tfriend inline mint operator ^ (mint a, int b) { return a ^= b; }};inline mint qpow(mint x, int y = mod - 2) { return x ^ y; }mint fac[N], ifac[N], inv[N];void init(int x) {\tfac[0] = ifac[0] = inv[1] = 1;\tL(i, 2, x) inv[i] = (mod - mod / i) * inv[mod % i];\tL(i, 1, x) fac[i] = fac[i - 1] * i, ifac[i] = ifac[i - 1] * inv[i];} mint C(int x, int y) {\treturn x < y || y < 0 ? 0 : fac[x] * ifac[y] * ifac[x - y];}inline mint sgn(int x) {\treturn (x & 1) ? mod - 1 : 1;}int n;struct inter {\tint l, r, id;\tinter() { \t}} it[N];int l[N], r[N];int ans[N];int tak[N];int arr[N], atot;vi to[N], bak[N];int cov[N];int ncov[N];bool check_1() {\tL(i, 1, atot) ncov[i] = 0;\tL(i, 1, n) {\t\t++ncov[l[i]];\t\t--ncov[r[i] + 1];\t}\tL(i, 1, atot) ncov[i] += ncov[i - 1];\tL(i, 1, atot) if(ncov[i] > 1) return 0;\tcout << \"1\\n\";\tL(i, 1, n) cout << 1 << ' ';\tcout << '\\n';\treturn 1;}int p1[N], p2[N];bool check_2() {\tint vl[2] = {0, 0}, vr[2] = {0, 0}, cur = 0;\tL(i, 1, atot) {\t\tsort(to[i].begin(), to[i].end(), [&] (int x, int y) {\t\t\treturn r[x] > r[y];\t\t});\t\tfor(auto j : to[i]) {\t\t\t// cout << j << \" : \" << l[i] << \" \" << r[i] << \", \" << vl[0] << ' ' << vr[0] << \", \" << vl[1] << ' ' << vr[1] << endl;\t\t\tint winl = vl[0] < i;\t\t\tint winr = vl[1] < i;\t\t\tif(vr[0] < i) {\t\t\t\tans[j] = 0;\t\t\t} else if(vr[1] < i) {\t\t\t\tans[j] = 1;\t\t\t} else if(winl && winr) {\t\t\t\tif(vr[0] < vr[1]) {\t\t\t\t\tans[j] = 0;\t\t\t\t} else {\t\t\t\t\tans[j] = 1;\t\t\t\t}\t\t\t} else if(winl) {\t\t\t\tans[j] = 1;\t\t\t} else {\t\t\t\tans[j] = 0;\t\t\t}\t\t\tvl[ans[j]] = max(vl[ans[j]], min(vr[ans[j]], r[j]));\t\t\tvr[ans[j]] = max(vr[ans[j]], r[j]);\t\t}\t}\tL(i, 0, atot + 1) p1[i] = p2[i] = 0;\tL(o, 0, 1) {\t\tL(i, 1, atot) ncov[i] = 0;\t\tL(i, 1, n) if(ans[i] == o) ncov[l[i]] += 1, ncov[r[i] + 1] -= 1;\t\tL(i, 1, atot) ncov[i] += ncov[i - 1];\t\tL(i, 1, atot) if(ncov[i] == 1) p1[i] = 1; \t\tL(i, 1, atot) ncov[i] = 0;\t\tL(i, 1, n) if(ans[i] == o) ncov[l[i]] += 1, ncov[r[i]] -= 1;\t\tL(i, 1, atot) ncov[i] += ncov[i - 1];\t\tL(i, 1, atot) if(ncov[i] == 1) p2[i] = 1;\t}\tL(i, 1, atot) if(!p1[i]) return 0;\tL(i, 1, atot - 1) if(!p2[i] && cov[i]) return 0; \tcout << \"2\\n\";\tL(i, 1, n) cout << ans[i] + 1 << ' ';\tcout << '\\n';\treturn 1;}mt19937 rng;int rad(int l, int r) {\treturn rng() % (r - l + 1) + l;}void Main() {\t// n = 10;\t// L(i, 1, n) {\t// \tit[i].l = rng() % 10 + 1;\t// \tit[i].r = rng() % 10 + 1;\t// \tif(it[i].l > it[i].r) {\t// \t\tswap(it[i].l, it[i].r);\t// \t}\t// }\tcin >> n;\tL(i, 1, n) cin >> it[i].l >> it[i].r;\t\tatot = 0;\tL(i, 1, n) it[i].id = i;\tL(i, 1, n) arr[++atot] = it[i].l, arr[++atot] = it[i].r;\tsort(arr + 1, arr + atot + 1);\tatot = unique(arr + 1, arr + atot + 1) - arr - 1;\tL(i, 1, n) \t\tit[i].l = lower_bound(arr + 1, arr + atot + 1, it[i].l) - arr, \t\tit[i].r = lower_bound(arr + 1, arr + atot + 1, it[i].r) - arr;\tL(i, 0, atot + 1) cov[i] = 0, to[i].clear(), bak[i].clear();\tL(i, 1, n)\t\tl[i] = it[i].l, r[i] = it[i].r, to[l[i]].pb(i), bak[r[i]].pb(i);\tL(i, 1, n) cov[l[i]] += 1, cov[r[i]] -= 1;\tL(i, 1, atot) cov[i] += cov[i - 1];\tif(check_1()) {\t\treturn;\t}\tif(check_2()) {\t\treturn;\t}\tcout << \"3\\n\";\tvi vp;\tL(i, 1, atot) {\t\tsort(to[i].begin(), to[i].end(), [&] (int x, int y) {\t\t\treturn r[x] > r[y];\t\t});\t\tfor(auto j : to[i]) {\t\t\tif(!sz(vp) || r[j] > r[vp.back()]) {\t\t\t\twhile(sz(vp) > 1 && r[vp[sz(vp) - 2]] >= l[j]) {\t\t\t\t\tvp.pop_back();\t\t\t\t}\t\t\t\tvp.pb(j);\t\t\t}\t\t}\t}\t// cout<<\"SZ=\"<<sz(vp)<<endl;\tL(i, 1, n) ans[i] = 3;\tL(i, 0, sz(vp) - 1) {\t\tans[vp[i]] = 1 + (i & 1);\t}\tL(i, 1, n) cout << ans[i] << ' ';\tcout << '\\n';\tL(o, 1, 3) {\t\tL(i, 1, atot) ncov[i] = 0;\t\tL(i, 1, n) if(ans[i] == o) ncov[l[i]] += 1, ncov[r[i] + 1] -= 1;\t\tL(i, 1, atot) ncov[i] += ncov[i - 1];\t\tL(i, 1, atot) if(ncov[i] == 1) p1[i] = 1; \t\tL(i, 1, atot) ncov[i] = 0;\t\tL(i, 1, n) if(ans[i] == o) ncov[l[i]] += 1, ncov[r[i]] -= 1;\t\tL(i, 1, atot) ncov[i] += ncov[i - 1];\t\tL(i, 1, atot) if(ncov[i] == 1) p2[i] = 1;\t}\t// for(auto u : vp) {\t// \tcout << l[u] << ' ' << r[u] << endl;\t// }\tL(i, 1, atot) if(!p1[i]) assert(false);\tL(i, 1, atot - 1) if(!p2[i] && cov[i]) assert(false);}int main() {\tios :: sync_with_stdio(false);\tcin.tie(0); cout.tie(0);\tinit(1e6);\tint t; cin >> t; while(t--) Main();\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\G1. Simurgh s Watch  Easy Version .json",
    "hint": []
}