{"link": "https://codeforces.com//contest/1220/problem/G", "problemId": "415039", "problem_idx": "G", "shortId": "1220G", "contest_number": "1220", "problem_submissions": {"F": [60794655, 60795420, 60798012, 60796211, 60799458, 60799042, 60800694, 60802837, 60802344, 60801389, 60840886, 60840780, 60840626, 60840499, 60816071, 60802432, 60804302, 60803333, 60805888, 60807155, 60806082, 60806528, 60805639, 60807120, 60805696], "E": [60790215, 60792421, 60792651, 60792239, 60793143, 60792840, 60795721, 60794580, 60796658, 60794976, 60796781, 60798760, 60797350, 60797489, 60796246, 60798051, 60800665, 60797651, 60800039, 60800893], "D": [60786802, 60786831, 60788316, 60786890, 60789386, 60786761, 60791950, 60790977, 60790845, 60791802, 60790799, 60791826, 60794564, 60792553, 60792010, 60792977, 60788272, 60792327, 60792666, 60788893], "C": [60784461, 60784654, 60786011, 60784793, 60786790, 60784487, 60788242, 60786432, 60786611, 60789040, 60786867, 60788037, 60788357, 60788969, 60787866, 60789945, 60786608, 60789677, 60787852, 60786166], "B": [60781859, 60783053, 60783409, 60782430, 60783345, 60782386, 60782468, 60784465, 60785209, 60786375, 60784225, 60785909, 60785762, 60785740, 60785272, 60786460, 60783349, 60784859, 60785464, 60782087], "A": [60780482, 60780507, 60780481, 60782646, 62687701, 60784803, 60780490, 60784397, 60781094, 60781294, 60786801, 60780787, 60780645, 60785632, 60782015, 60781702, 60780484, 60780455, 60781879, 60780860, 60783535], "G": [76800366]}, "name": "G. Geolocation", "statement": "You are working for the Gryzzl company, headquartered in Pawnee,\r\nIndiana.The new national park has been opened near Pawnee recently and\r\nyou are to implement a geolocation system, so people won\u2019t get lost. The\r\nconcept you developed is innovative and minimalistic. There will be n\r\nantennas located somewhere in the park. When someone would like to know\r\ntheir current location, their Gryzzl hologram phone will communicate\r\nwith antennas and obtain distances from a user\u2019s current location to all\r\nantennas.Knowing those distances and antennas locations it should be\r\neasy to recover a user\u2019s location... Right? Well, almost. The only issue\r\nis that there is no way to distinguish antennas, so you don\u2019t know,\r\nwhich distance corresponds to each antenna. Your task is to find a\r\nuser\u2019s location given as little as all antennas location and an\r\nunordered multiset of distances.\r\n", "solutions": ["#ifdef DEBUG\n#define _GLIBCXX_DEBUG\n#endif\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long double ld;\n\n#ifdef DEBUG\n#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)\n#else\n#define eprintf(...) ;\n#endif\n\n#define sz(x) ((int) (x).size())\n#define TASK \"text\"\n\nconst int inf = (int) 1.01e9;\nconst long long infll = (long long) 1.01e18;\nconst ld eps = 1e-9;\nconst ld pi = acos((ld) -1);\n\n#ifdef DEBUG\nmt19937 mrand(300); \n#else\nmt19937 mrand(chrono::steady_clock::now().time_since_epoch().count()); \n#endif\n\nint rnd(int x) {\n  return mrand() % x;\n}\n\nvoid precalc() {\n}\n\nstruct point {\n  long long x, y;\n\n  point(): x(0), y(0) {}\n\n  point(long long xx, long long yy): x(xx), y(yy) {}\n\n  bool read() {\n    return scanf(\"%lld%lld\", &x, &y) == 2;\n  }\n\n  point operator + (const point &p) const {\n    return point(x + p.x, y + p.y);\n  }\n\n  point operator - (const point &p) const {\n    return point(x - p.x, y - p.y);\n  }\n\n  point operator * (long long k) const {\n    return point(x * k, y * k);\n  }\n\n  point operator / (long long k) const {\n    return point(x / k, y / k);\n  }\n\n  __int128 operator ^ (const point &p) const {\n    return (__int128) x * p.y - (__int128) y * p.x;\n  }\n\n  __int128 operator * (const point &p) const {\n    return (__int128) x * p.x + (__int128) y * p.y;\n  }\n\n  __int128 slen() const {\n    return *this * *this;\n  }\n\n  bool operator == (const point &p) const {\n    return x == p.x && y == p.y;\n  }\n\n  bool operator < (const point &p) const {\n    return x < p.x || (x == p.x && y < p.y);\n  }\n};\n\nvoid intersect(point p0, __int128 rr0, point p1, __int128 rr1, vector<point> &ans) {\n  if (rr0 < rr1) {\n    swap(p0, p1);\n    swap(rr0, rr1);\n  }\n  __int128 dd = (p1 - p0).slen();\n  ld r0 = sqrt((ld) rr0), r1 = sqrt((ld) rr1);\n  ld d = sqrt((ld) dd);\n  if (r0 + r1 < d - eps) {\n    return;\n  }\n  if (r1 + d < r0 - eps) {\n    return;\n  }\n  ld cosa = (rr0 + dd - rr1) / (2 * r0 * d);\n  ld sina = sqrt(max((ld) 0, 1 - cosa * cosa));\n  ld vx = (p1 - p0).x / d * r0;\n  ld vy = (p1 - p0).y / d * r0;\n  ld ux = -vy, uy = vx;\n  vx *= cosa;\n  vy *= cosa;\n  ux *= sina;\n  uy *= sina;\n  for (int dir = -1; dir <= 1; dir += 2) {\n    ld x = p0.x + vx + dir * ux;\n    ld y = p0.y + vy + dir * uy;\n    point cur((long long) round(x), (long long) round(y));\n    if ((cur - p0).slen() == rr0 && (cur - p1).slen() == rr1) {\n      ans.push_back(cur);\n    }\n  }\n}\n\nconst int maxn = (int) 1e5 + 5;\nint n;\npoint ps[maxn];\n\nbool read() {\n  if (scanf(\"%d\", &n) < 1) {\n    return false;\n  }\n  for (int i = 0; i < n; i++) {\n    ps[i].read();\n    ps[i] = ps[i] * n;\n  }\n  return true;\n}\n\npoint c;\n__int128 s;\n__int128 d[maxn];\nmap<__int128, int> cnt, cnt1;\nvector<point> ans;\n\nbool check(const point &p) {\n  if (p.x % n || p.y % n) {\n    return false;\n  }\n  cnt1.clear();\n  for (int i = 0; i < n; i++) {\n    __int128 dd = (ps[i] - p).slen();\n    auto &cur = cnt1[dd];\n    cur++;\n    if (cur > cnt[dd]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nvoid solve1() {\n  __int128 dc = 0;\n  cnt.clear();\n  for (int i = 0; i < n; i++) {\n    long long dd;\n    scanf(\"%lld\", &dd);\n    d[i] = dd;\n    d[i] *= (__int128) n * n;\n    dc += d[i];\n    cnt[d[i]]++;\n  }\n  dc /= n;\n  dc -= s;\n  dc += c.slen();\n  ans.clear();\n  for (auto it = cnt.begin(); it != cnt.end(); it++) {\n    intersect(ps[0], it->first, c, dc, ans);\n  }\n  sort(ans.begin(), ans.end());\n  ans.erase(unique(ans.begin(), ans.end()), ans.end());\n  int k = 0;\n  for (int i = 0; i < sz(ans); i++) {\n    if (check(ans[i])) {\n      ans[k++] = ans[i] / n;\n    }\n  }\n  ans.resize(k);\n  printf(\"%d \", k);\n  for (int i = 0; i < k; i++) {\n    printf(\"%lld %lld \", ans[i].x, ans[i].y);\n  }\n  printf(\"\\n\");\n}\n\nvoid solve() {\n  shuffle(ps, ps + n, mrand);\n  c = point();\n  s = 0;\n  for (int i = 0; i < n; i++) {\n    c = c + ps[i];\n    s += ps[i].slen();\n  }\n  c = c / n;\n  s /= n;\n  if (ps[0] == c) {\n    swap(ps[0], ps[1]);\n  }\n  assert(!(ps[0] == c));\n  int q;\n  scanf(\"%d\", &q);\n  for (int qq = 0; qq < q; qq++) {\n    solve1();\n  }\n}\n\nint main() {\n  precalc();\n#ifdef DEBUG\n  assert(freopen(TASK \".in\", \"r\", stdin));\n  assert(freopen(TASK \".out\", \"w\", stdout));\n#endif\n  while (read()) {\n    solve();\n#ifdef DEBUG\n    eprintf(\"Time %.2f\\n\", (double) clock() / CLOCKS_PER_SEC);\n#endif\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["geometry"], "dificulty": "3400", "interactive": false}