{
    "link": "https://codeforces.com//contest/1726/problem/H",
    "problemId": "1532140",
    "problem_idx": "H",
    "shortId": "1726H",
    "contest_number": "1726",
    "problem_submissions": {
        "H": [
            171166152,
            173790631,
            203781522
        ],
        "G": [
            171127286,
            171123945,
            171187552,
            171141010,
            171140722,
            171664786,
            171144226,
            171145348,
            171099465,
            171201134,
            171130848,
            171158116,
            171157860,
            171157000,
            171126442,
            171148861,
            171157096,
            171154938,
            171734872,
            171170680,
            171137702,
            171157236,
            171205955
        ],
        "F": [
            171108903,
            171111157,
            171113439,
            171121881,
            171130813,
            171124755,
            171146710,
            171185756,
            171127747,
            171154469,
            171132548,
            171129760,
            171128679,
            171131869,
            171129630,
            171127886,
            171131493,
            171128356
        ],
        "E": [
            171094108,
            171082776,
            171092673,
            171103228,
            171099685,
            171107510,
            171130522,
            171086219,
            171098373,
            171093064,
            171087566,
            171101329,
            171097980,
            171106309,
            171103049,
            171115448,
            171104715,
            171104412,
            171103731,
            171103976
        ],
        "D": [
            171086407,
            171094193,
            171085018,
            171163183,
            171095551,
            171089125,
            171099036,
            171122521,
            171096908,
            171110181,
            171221601,
            171081072,
            171080401,
            171083405,
            171092300,
            171088283,
            171088398,
            171090938,
            171088918,
            171097824,
            171093263,
            171092066
        ],
        "C": [
            171077821,
            171073174,
            171072071,
            171078629,
            171077517,
            171086726,
            171108612,
            171075141,
            171072509,
            171072364,
            171070939,
            171070414,
            171078452,
            171075783,
            171074035,
            171078333,
            171078838,
            171087703,
            171078897,
            171079488
        ],
        "B": [
            171071571,
            171066055,
            171068756,
            171072172,
            171073247,
            171082438,
            171105681,
            171070428,
            171069384,
            171068782,
            171068043,
            171068503,
            171068633,
            171073450,
            171069653,
            171069194,
            171074033,
            171074318,
            171074355,
            171074835
        ],
        "A": [
            171065811,
            171064612,
            171065880,
            171065721,
            171066103,
            171072016,
            171102188,
            171066260,
            171065726,
            171065055,
            171065128,
            171065050,
            171064937,
            171065648,
            171066070,
            171065533,
            171067186,
            171069008,
            171074050,
            171065687
        ]
    },
    "name": "H. Mainak and the Bleeding Polygon",
    "statement": "Mainak has a convex polygon\r\nmathcal P with n vertices labelled as A_1, A_2,\r\nldots, A_n in a counter-clockwise fashion. The coordinates of the i-th\r\npoint A_i are given by (x_i, y_i), where x_i and y_i are both\r\nintegers.Further, it is known that the interior angle at A_i is either a\r\nright angle or a proper obtuse angle. Formally it is known that: 90 ^\r\ncirc\r\nle\r\nangle A_{i - 1}A_{i}A_{i + 1} < 180 ^\r\ncirc,\r\nforall i\r\nin\r\n{1, 2,\r\nldots, n\r\n} where we conventionally consider A_0 = A_n and A_{n + 1} = A_1.\r\nMainak\u2019s friend insisted that all points Q such that there exists a\r\nchord of the polygon\r\nmathcal P passing through Q with length 1, must be coloured\r\ncolor{red}{\r\ntext{red}}. Mainak wants you to find the area of the coloured region\r\nformed by the\r\ncolor{red}{\r\ntext{red}} points.Formally, determine the area of the region\r\nmathcal S =\r\n{Q\r\nin\r\nmathcal{P} | Q\r\ntext{ is coloured }\r\ncolor{red}{\r\ntext{red}}\r\n}.Recall that a chord of a polygon is a line segment between two points\r\nlying on the boundary ( vertices or points on edges) of the polygon.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <chrono>\n#include <cmath>\n#include <complex>\n#include <cstring>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <vector>\nusing namespace std;\n \nusing ll = long long;\nusing db = double; // or double, if TL is tight\nusing str = string; // yay python! \n\n// pairs\nusing pi = pair<int,int>;\nusing pl = pair<ll,ll>;\nusing pd = pair<db,db>;\n#define mp make_pair\n#define f first\n#define s second\n\n#define tcT template<class T\n#define tcTU tcT, class U\n// ^ lol this makes everything look weird but I'll try it\ntcT> using V = vector<T>; \ntcT, size_t SZ> using AR = array<T,SZ>; \nusing vi = V<int>;\nusing vb = V<bool>;\nusing vl = V<ll>;\nusing vd = V<db>;\nusing vs = V<str>;\nusing vpi = V<pi>;\nusing vpl = V<pl>;\nusing vpd = V<pd>;\n\n// vectors\n// oops size(x), rbegin(x), rend(x) need C++17\n#define sz(x) int((x).size())\n#define bg(x) begin(x)\n#define all(x) bg(x), end(x)\n#define rall(x) x.rbegin(), x.rend() \n#define sor(x) sort(all(x)) \n#define rsz resize\n#define ins insert \n#define pb push_back\n#define eb emplace_back\n#define ft front()\n#define bk back()\n\n#define lb lower_bound\n#define ub upper_bound\ntcT> int lwb(V<T>& a, const T& b) { return int(lb(all(a),b)-bg(a)); }\ntcT> int upb(V<T>& a, const T& b) { return int(ub(all(a),b)-bg(a)); }\n\n// loops\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\n#define F0R(i,a) FOR(i,0,a)\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\n#define R0F(i,a) ROF(i,0,a)\n#define rep(a) F0R(_,a)\n#define each(a,x) for (auto& a: x)\n\nconst int MOD = (int)1e9+7; // 998244353;\nconst int MX = (int)2e5+5;\nconst ll BIG = 1e18; // not too close to LLONG_MAX\nconst db PI = acos((db)-1);\nconst int dx[4]{1,0,-1,0}, dy[4]{0,1,0,-1}; // for every grid problem!!\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count()); \ntemplate<class T> using pqg = priority_queue<T,vector<T>,greater<T>>;\n\n// bitwise ops\n// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\nconstexpr int pct(int x) { return __builtin_popcount(x); } // # of bits set\nconstexpr int bits(int x) { // assert(x >= 0); // make C++11 compatible until USACO updates ...\n\treturn x == 0 ? 0 : 31-__builtin_clz(x); } // floor(log2(x)) \nconstexpr int p2(int x) { return 1<<x; }\nconstexpr int msk2(int x) { return p2(x)-1; }\n\nll cdiv(ll a, ll b) { return a/b+((a^b)>0&&a%b); } // divide a by b rounded up\nll fdiv(ll a, ll b) { return a/b-((a^b)<0&&a%b); } // divide a by b rounded down\n\ntcT> bool ckmin(T& a, const T& b) {\n\treturn b < a ? a = b, 1 : 0; } // set a = min(a,b)\ntcT> bool ckmax(T& a, const T& b) {\n\treturn a < b ? a = b, 1 : 0; } // set a = max(a,b)\n\ntcTU> T fstTrue(T lo, T hi, U f) {\n\t++hi; assert(lo <= hi); // assuming f is increasing\n\twhile (lo < hi) { // find first index such that f is true \n\t\tT mid = lo+(hi-lo)/2;\n\t\tf(mid) ? hi = mid : lo = mid+1; \n\t} \n\treturn lo;\n}\ntcTU> T lstTrue(T lo, T hi, U f) {\n\t--lo; assert(lo <= hi); // assuming f is decreasing\n\twhile (lo < hi) { // find first index such that f is true \n\t\tT mid = lo+(hi-lo+1)/2;\n\t\tf(mid) ? lo = mid : hi = mid-1;\n\t} \n\treturn lo;\n}\ntcT> void remDup(vector<T>& v) { // sort and remove duplicates\n\tsort(all(v)); v.erase(unique(all(v)),end(v)); }\ntcTU> void erase(T& t, const U& u) { // don't erase\n\tauto it = t.find(u); assert(it != end(t));\n\tt.erase(it); } // element that doesn't exist from (multi)set\n\n#define tcTUU tcT, class ...U\n\ninline namespace Helpers {\n\t//////////// is_iterable\n\t// https://stackoverflow.com/questions/13830158/check-if-a-variable-type-is-iterable\n\t// this gets used only when we can call begin() and end() on that type\n\ttcT, class = void> struct is_iterable : false_type {};\n\ttcT> struct is_iterable<T, void_t<decltype(begin(declval<T>())),\n\t                                  decltype(end(declval<T>()))\n\t                                 >\n\t                       > : true_type {};\n\ttcT> constexpr bool is_iterable_v = is_iterable<T>::value;\n\n\t//////////// is_readable\n\ttcT, class = void> struct is_readable : false_type {};\n\ttcT> struct is_readable<T,\n\t        typename std::enable_if_t<\n\t            is_same_v<decltype(cin >> declval<T&>()), istream&>\n\t        >\n\t    > : true_type {};\n\ttcT> constexpr bool is_readable_v = is_readable<T>::value;\n\n\t//////////// is_printable\n\t// // https://nafe.es/posts/2020-02-29-is-printable/\n\ttcT, class = void> struct is_printable : false_type {};\n\ttcT> struct is_printable<T,\n\t        typename std::enable_if_t<\n\t            is_same_v<decltype(cout << declval<T>()), ostream&>\n\t        >\n\t    > : true_type {};\n\ttcT> constexpr bool is_printable_v = is_printable<T>::value;\n}\n\ninline namespace Input {\n\ttcT> constexpr bool needs_input_v = !is_readable_v<T> && is_iterable_v<T>;\n\ttcTUU> void re(T& t, U&... u);\n\ttcTU> void re(pair<T,U>& p); // pairs\n\n\t// re: read\n\ttcT> typename enable_if<is_readable_v<T>,void>::type re(T& x) { cin >> x; } // default\n\ttcT> void re(complex<T>& c) { T a,b; re(a,b); c = {a,b}; } // complex\n\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i); // ex. vectors, arrays\n\ttcTU> void re(pair<T,U>& p) { re(p.f,p.s); }\n\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i) {\n\t\teach(x,i) re(x); }\n\ttcTUU> void re(T& t, U&... u) { re(t); re(u...); } // read multiple\n\n\t// rv: resize and read vectors\n\tvoid rv(size_t) {}\n\ttcTUU> void rv(size_t N, V<T>& t, U&... u);\n\ttemplate<class...U> void rv(size_t, size_t N2, U&... u);\n\ttcTUU> void rv(size_t N, V<T>& t, U&... u) {\n\t\tt.rsz(N); re(t);\n\t\trv(N,u...); }\n\ttemplate<class...U> void rv(size_t, size_t N2, U&... u) {\n\t\trv(N2,u...); }\n\n\t// dumb shortcuts to read in ints\n\tvoid decrement() {} // subtract one from each\n\ttcTUU> void decrement(T& t, U&... u) { --t; decrement(u...); }\n\t#define ints(...) int __VA_ARGS__; re(__VA_ARGS__);\n\t#define int1(...) ints(__VA_ARGS__); decrement(__VA_ARGS__);\n}\n\ninline namespace ToString {\n\ttcT> constexpr bool needs_output_v = !is_printable_v<T> && is_iterable_v<T>;\n\n\t// ts: string representation to print\n\ttcT> typename enable_if<is_printable_v<T>,str>::type ts(T v) {\n\t\tstringstream ss; ss << fixed << setprecision(15) << v;\n\t\treturn ss.str(); } // default\n\ttcT> str bit_vec(T t) { // bit vector to string\n\t\tstr res = \"{\"; F0R(i,sz(t)) res += ts(t[i]);\n\t\tres += \"}\"; return res; }\n\tstr ts(V<bool> v) { return bit_vec(v); }\n\ttemplate<size_t SZ> str ts(bitset<SZ> b) { return bit_vec(b); } // bit vector\n\ttcTU> str ts(pair<T,U> p); // pairs\n\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v); // vectors, arrays\n\ttcTU> str ts(pair<T,U> p) { return \"(\"+ts(p.f)+\", \"+ts(p.s)+\")\"; }\n\ttcT> typename enable_if<is_iterable_v<T>,str>::type ts_sep(T v, str sep) {\n\t\t// convert container to string w/ separator sep\n\t\tbool fst = 1; str res = \"\";\n\t\tfor (const auto& x: v) {\n\t\t\tif (!fst) res += sep;\n\t\t\tfst = 0; res += ts(x);\n\t\t}\n\t\treturn res;\n\t}\n\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v) {\n\t\treturn \"{\"+ts_sep(v,\", \")+\"}\"; }\n\n\t// for nested DS\n\ttemplate<int, class T> typename enable_if<!needs_output_v<T>,vs>::type \n\t  ts_lev(const T& v) { return {ts(v)}; }\n\ttemplate<int lev, class T> typename enable_if<needs_output_v<T>,vs>::type \n\t  ts_lev(const T& v) {\n\t\tif (lev == 0 || !sz(v)) return {ts(v)};\n\t\tvs res;\n\t\tfor (const auto& t: v) {\n\t\t\tif (sz(res)) res.bk += \",\";\n\t\t\tvs tmp = ts_lev<lev-1>(t);\n\t\t\tres.ins(end(res),all(tmp));\n\t\t}\n\t\tF0R(i,sz(res)) {\n\t\t\tstr bef = \" \"; if (i == 0) bef = \"{\";\n\t\t\tres[i] = bef+res[i];\n\t\t}\n\t\tres.bk += \"}\";\n\t\treturn res;\n\t}\n}\n\ninline namespace Output {\n\ttemplate<class T> void pr_sep(ostream& os, str, const T& t) { os << ts(t); }\n\ttemplate<class T, class... U> void pr_sep(ostream& os, str sep, const T& t, const U&... u) {\n\t\tpr_sep(os,sep,t); os << sep; pr_sep(os,sep,u...); }\n\t// print w/ no spaces\n\ttemplate<class ...T> void pr(const T&... t) { pr_sep(cout,\"\",t...); } \n\t// print w/ spaces, end with newline\n\tvoid ps() { cout << \"\\n\"; }\n\ttemplate<class ...T> void ps(const T&... t) { pr_sep(cout,\" \",t...); ps(); } \n\t// debug to cerr\n\ttemplate<class ...T> void dbg_out(const T&... t) {\n\t\tpr_sep(cerr,\" | \",t...); cerr << endl; }\n\tvoid loc_info(int line, str names) {\n\t\tcerr << \"Line(\" << line << \") -> [\" << names << \"]: \"; }\n\ttemplate<int lev, class T> void dbgl_out(const T& t) {\n\t\tcerr << \"\\n\\n\" << ts_sep(ts_lev<lev>(t),\"\\n\") << \"\\n\" << endl; }\n\t#ifdef LOCAL\n\t\t#define dbg(...) loc_info(__LINE__,#__VA_ARGS__), dbg_out(__VA_ARGS__)\n\t\t#define dbgl(lev,x) loc_info(__LINE__,#x), dbgl_out<lev>(x)\n\t#else // don't actually submit with this\n\t\t#define dbg(...) 0\n\t\t#define dbgl(lev,x) 0\n\t#endif\n\n\tconst clock_t beg = clock();\n\t#define dbg_time() dbg((db)(clock()-beg)/CLOCKS_PER_SEC)\n}\n\ninline namespace FileIO {\n\tvoid setIn(str s)  { freopen(s.c_str(),\"r\",stdin); }\n\tvoid setOut(str s) { freopen(s.c_str(),\"w\",stdout); }\n\tvoid setIO(str s = \"\") {\n\t\tcin.tie(0)->sync_with_stdio(0); // unsync C / C++ I/O streams\n\t\t// cin.exceptions(cin.failbit);\n\t\t// throws exception when do smth illegal\n\t\t// ex. try to read letter into int\n\t\tif (sz(s)) setIn(s+\".in\"), setOut(s+\".out\"); // for old USACO\n\t}\n}\n\n/**\n * Description: Use in place of \\texttt{complex<T>}.\n * Source: http://codeforces.com/blog/entry/22175, KACTL\n * Verification: various\n */\n\nusing T = db; // or ll\nconst T EPS = 1e-9; // adjust as needed\nusing P = pair<T,T>; using vP = V<P>; using Line = pair<P,P>;\nint sgn(T a) { return (a>EPS)-(a<-EPS); }\nT sq(T a) { return a*a; }\n\nbool close(const P& a, const P& b) { \n\treturn sgn(a.f-b.f) == 0 && sgn(a.s-b.s) == 0; } \nT norm(const P& p) { return sq(p.f)+sq(p.s); }\nT abs(const P& p) { return sqrt(norm(p)); }\nT arg(const P& p) { return atan2(p.s,p.f); }\nP conj(const P& p) { return P(p.f,-p.s); }\nP perp(const P& p) { return P(-p.s,p.f); }\nP dir(T ang) { return P(cos(ang),sin(ang)); }\n\nP operator-(const P& l) { return P(-l.f,-l.s); }\nP operator+(const P& l, const P& r) { \n\treturn P(l.f+r.f,l.s+r.s); }\nP operator-(const P& l, const P& r) { \n\treturn P(l.f-r.f,l.s-r.s); }\nP operator*(const P& l, const T& r) { \n\treturn P(l.f*r,l.s*r); }\nP operator*(const T& l, const P& r) { return r*l; }\nP operator/(const P& l, const T& r) { \n\treturn P(l.f/r,l.s/r); }\nP operator*(const P& l, const P& r) { \n\treturn P(l.f*r.f-l.s*r.s,l.s*r.f+l.f*r.s); }\nP operator/(const P& l, const P& r) { \n\treturn l*conj(r)/norm(r); }\nP& operator+=(P& l, const P& r) { return l = l+r; }\nP& operator-=(P& l, const P& r) { return l = l-r; }\nP& operator*=(P& l, const T& r) { return l = l*r; }\nP& operator/=(P& l, const T& r) { return l = l/r; }\nP& operator*=(P& l, const P& r) { return l = l*r; }\nP& operator/=(P& l, const P& r) { return l = l/r; }\n\nP unit(const P& p) { return p/abs(p); }\nT dot(const P& a, const P& b) { return a.f*b.f+a.s*b.s; }\nT dot(const P& p, const P& a, const P& b) { return dot(a-p,b-p); }\nT cross(const P& a, const P& b) { return a.f*b.s-a.s*b.f; }\nT cross(const P& p, const P& a, const P& b) {\n\treturn cross(a-p,b-p); }\nP reflect(const P& p, const Line& l) {\n\tP a = l.f, d = l.s-l.f;\n\treturn a+conj((p-a)/d)*d; }\nP foot(const P& p, const Line& l) {\n\treturn (p+reflect(p,l))/(T)2; }\nbool onSeg(const P& p, const Line& l) {\n\treturn sgn(cross(l.f,l.s,p)) == 0 && sgn(dot(p,l.f,l.s)) <= 0; }\n\n/** \n * Description: computes the intersection point(s) of line (segments) $a$ and $b$\n * Source: KACTL\n * Verification: https://open.kattis.com/problems/segmentintersection\n */\n\n// #include \"Point.h\"\n\n// {unique intersection point} if it exists\n// {b.f,b.s} if input lines are the same\n// empty if lines do not intersect\nvP lineIsect(const Line& a, const Line& b) {\n\tT a0 = cross(a.f,a.s,b.f), a1 = cross(a.f,a.s,b.s); \n\tif (a0 == a1) return a0 == 0 ? vP{b.f,b.s} : vP{};\n\treturn {(b.s*a0-b.f*a1)/(a0-a1)};\n}\n\n// point in interior of both segments a and b, if it exists\nvP strictIsect(const Line& a, const Line& b) {\n\tT a0 = cross(a.f,a.s,b.f), a1 = cross(a.f,a.s,b.s); \n\tT b0 = cross(b.f,b.s,a.f), b1 = cross(b.f,b.s,a.s); \n\tif (sgn(a0)*sgn(a1) < 0 && sgn(b0)*sgn(b1) < 0)\n\t\treturn {(b.s*a0-b.f*a1)/(a0-a1)};\n\treturn {};\n}\n\n// intersection of segments, a and b may be degenerate\nvP segIsect(const Line& a, const Line& b) { \n\tvP v = strictIsect(a,b); if (sz(v)) return v;\n\tset<P> s;\n\t#define i(x,y) if (onSeg(x,y)) s.ins(x)\n\ti(a.f,b); i(a.s,b); i(b.f,a); i(b.s,a);\n\treturn {all(s)};\n}\n\nP strictIsectOne(const Line& a, const Line& b) {\n\tT a0 = cross(a.f,a.s,b.f), a1 = cross(a.f,a.s,b.s); \n\t// T b0 = cross(b.f,b.s,a.f), b1 = cross(b.f,b.s,a.s); \n\treturn (b.s*a0-b.f*a1)/(a0-a1);\n}\n\nconst int DIVISIONS = 1000;\n\nvP get_hull(T C) {\n\tif (C <= -1) return {};\n\t// assert(-1 < C && C <= 0);\n\tvP hull;\n\tP last_isect;\n\tLine last_pair;\n\tF0R(i,DIVISIONS+1) {\n\t\tP on_x{(T)i/DIVISIONS,0};\n\t\tP u{C,sqrt(1-sq(C))};\n\t\tP f = foot(on_x,{{0,0},u});\n\t\tP actual = f+u*sqrt(max(1-norm(f-on_x),0.0));\n\t\tLine cur_pair{on_x,actual};\n\t\tif (i == 0) {\n\t\t\tlast_isect = u;\n\t\t} else {\n\t\t\tP nex_isect = strictIsectOne(last_pair, cur_pair);\n\t\t\tlast_isect = nex_isect;\n\t\t}\n\t\tlast_pair = cur_pair;\n\t\thull.pb(last_isect);\n\t}\n\thull.pb({1,0});\n\treturn hull;\n}\n\nT solve1(T C) {\n\tassert(C <= 0);\n\tvP hull = get_hull(C); // left to right\n\tT ans = 0;\n\tF0R(i,sz(hull)-1) ans += cross(hull[i+1],hull[i]);\n\treturn ans/2;\n}\n\nvoid print_all(V<P> v) {\n\teach(t,v) ps(t.f,t.s);\n}\n\nT solve2(T d, T c0, T c1) {\n\tdbg(\"START\", d, c0, c1);\n\tauto h0 = get_hull(c0);\n\tauto h1 = get_hull(c1);\n\teach(t,h1) t = {d-t.f,t.s};\n\th0.pop_back(), h1.pop_back();\n\t// dbg(\"S0\");\n\t// print_all(h0);\n\t// dbg(\"S1\");\n\t// print_all(h1);\n\t// dbg(h1.ft, h1.bk); exit(0);\n\twhile (sz(h0) >= 2 && sz(h1) >= 2) {\n\t\t// exit(0);\n\t\tif (cross(end(h1)[-2], end(h0)[-1], end(h0)[-2]) >= 0) {\n\t\t\th1.pop_back();\n\t\t\tcontinue;\n\t\t}\n\t\tif (cross(end(h0)[-2], end(h1)[-2], end(h1)[-1]) >= 0) {\n\t\t\th0.pop_back();\n\t\t\tcontinue;\n\t\t}\n\t\tbreak;\n\t}\n\tassert(sz(h0) >= 2 && sz(h1) >= 2);\n\t// dbg(\"AFTER REDUCE\", h0.bk, h1.bk);\n\tP p = strictIsectOne({end(h0)[-1], end(h0)[-2]}, {end(h1)[-1], end(h1)[-2]});\n\th0.pop_back(), h1.pop_back();\n\th0.pb(p);\n\treverse(all(h1));\n\th0.ins(end(h0), all(h1));\n\t// dbg(\"E\");\n\t// print_all(h0);\n\t// exit(0);\n\n\t// each(t,h0) dbg(t);\n\t// exit(0);\n\tdbg(\"FINAL\", h0.ft, h0.bk);\n\n\tT ans = cross({d,0},h0.bk);\n\tF0R(i,sz(h0)-1) {\n\t\tans += cross(h0[i+1],h0[i]);\n\t}\n\tdbg(\"GOT\",ans);\n\tdbg(\"UNION\",ans/2);\n\treturn ans/2;\n}\n\nint main() {\n\t// read read read\n\tsetIO();\n\tints(N);\n\tvP A(N); re(A);\n\t// if rect\n\tif (N == 4 && (norm(A[0]-A[1]) <= 1 || norm(A[1]-A[2]) <= 1)) {\n\t\tps(max(abs(A[0]-A[1]), abs(A[1]-A[2])));\n\t\texit(0);\n\t}\n\tV<T> C, sing;\n\tF0R(i,N) {\n\t\tint a = (i+N-1)%N, b = i, c = (i+1)%N;\n\t\tP x = A[a]-A[b], y = A[c]-A[b];\n\t\tdb huh = dot(x,y)/abs(x)/abs(y);\n\t\tif (huh > 0) {\n\t\t\tps(\"A\");\n\t\t\texit(0);\n\t\t}\n\t\tif (huh <= -1) {\n\t\t\tps(\"B\");\n\t\t\texit(0);\n\t\t}\n\t\tC.pb(huh);\n\t\t// S.pb(sqrt(1-sq(C.bk)));\n\t}\n\tT ans = 0;\n\tF0R(i,N) sing.pb(solve1(C[i]));\n\teach(t,sing) ans += t;\n\tF0R(i,N) {\n\t\tint j = (i+1)%N;\n\t\tif (norm(A[i]-A[j]) <= 2) {\n\t\t\tif (min(sing[i],sing[j]) > -1) {\n\t\t\t\tT sol2 = solve2(abs(A[i]-A[j]), C[i], C[j]);\n\t\t\t\tassert(sol2 <= sing[i]+sing[j]);\n\t\t\t\tans += sol2-sing[i]-sing[j];\n\t\t\t}\n\t\t}\n\t}\n\tps(ans);\n\t// you should actually read the stuff at the bottom\n}\n\n/* stuff you should look for\n\t* int overflow, array bounds\n\t* special cases (n=1?)\n\t* do smth instead of nothing and stay organized\n\t* WRITE STUFF DOWN\n\t* DON'T GET STUCK ON ONE APPROACH\n*/\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "geometry",
        "implementation",
        "math"
    ],
    "dificulty": "3500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\H. Mainak and the Bleeding Polygon.json",
    "editorial_link": "https://codeforces.com//blog/entry/106675",
    "editorial": "Clearly, the unsafe area is bounded by the envelope of the curve you get\r\nif you slide a rod of length around the interior of the polygon and\r\npressed against the edges at all times. The length of each side of the\r\npolygon is .This one is obvious. Further, it implies that (almost\r\nalways) we only need to consider unsafe areas formed by adjacent pairs\r\nof edges (there is one exception to this which is a rectangle with a\r\nside of length , in which case the whole rectangle is unsafe). The proof\r\nis left as an exercise to the reader (our proof required some casework\r\nand induction on the angle and number of edges). The unsafe area for the\r\nwhole polygon is the union of the unsafe areas formed by each pair of\r\nadjacent edges.Two adjacent edges can be viewed as a pair of lines and\r\nwhere is the angle between the edges (which is ). As it turns out, the\r\nenvelope of the unsafe area is given by the parametric equationsA sketch\r\nof the area for : Also, the area is given by the formulaWe can easily\r\njust add up these values for each pair of adjacent edges. However, we\r\nare overestimating the area. We need to subtract out the intersecting\r\nparts of the individual unsafe areas. At most individual unsafe areas\r\ncover any given point. If unsafe areas intersect, they are the areas\r\nmade by successive edges.If say, unsafe areas covered a point, then one\r\nof them must be between non-adjacent edges, which is not possible by the\r\nimplications of observation 1. Furthermore, if the intersection of the\r\nunsafe areas is non-empty, the length of the common edge must be ,\r\notherwise it will definitely be empty (this fact should be intuitively\r\nobvious). However, since the polygon has vertices has integer\r\ncoordinates, if the length of an edge is , it must be (it is parallel to\r\none axis) or (it is diagonal). Note that each possibility of edges with\r\nsuch lengths in an oriented fashion can occur at most once. Which gives\r\nus observation 3. The number of sides of length is .What this basically\r\nmeans is that we will have to compute the area of the intersection of\r\ntwo unsafe areas only times.Coming back to the curve, its area can be\r\ngiven by the integralThis indefinite integral evaluates toNow, all we\r\nneed to do is find the bounds of integration by finding the point at\r\nwhich the curves cross.Now, for an edge of length , where is either or ,\r\nwe need to find the area of overlap and subtract it from our\r\noverestimated value. if we place the edge on the -axis starting from\r\norigin, then the adjacent edges which were at an angle and , now are\r\nstraight lines, one at an angle passing from the origin, whereas other\r\nis another straight line at an angle passing through . Clearly, the\r\nparametric equations of the two envelopes would be for and for . , for a\r\nfixed , is a decreasing function of , .This fact can be easily verified\r\nfrom the equation of as is decreasing in the range of i.e. , and is\r\ndecreasing in the range of , i.e. .This means for a given value, , we\r\ncan binary search in , the value of , such that . Once we get , we can\r\nfurther get the -coordinate just by plugging in . Consequently, for both\r\nthe parametric equations, we can evaluate as a function of , in time. If\r\nthe coordinates of the intersection of for and for is , then we can can\r\nbinary search on in function evaluations of as a function of .Observe\r\nthat . Now, for a given guess of the -coordinate of the intersection\r\npoint, let\u00e2\u0080\u0099s say the first parametric function provides an -coordinate\r\nof and the second parametric curve gives . In other words, and are\r\npoints on the first and the second curves respectively. Now, if , then\r\nwe must have , whereas if , we have ; and thus we can find the value of\r\nin evaluations of and using a binary search.Therefore we can find the\r\nintersection point (and therefore the corresponding and values) in time.\r\nOnce we have the and the values, we get the bounds of the indefinite\r\nintegral after which we just plug in the values and to the indefinite\r\nintegral to get the overlap area.Since we are doing this only for edges\r\nof length , by observation 3, the final time complexity is .However, a\r\nsolution doing this for every edge would run in time. For the given\r\nconstraints, this optimization was not necessary to pass.\r\n"
}