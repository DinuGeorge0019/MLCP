{
    "link": "https://codeforces.com//contest/2002/problem/D1",
    "problemId": "2809240",
    "problem_idx": "D1",
    "shortId": "2002D1",
    "contest_number": "2002",
    "problem_submissions": {
        "H": [
            275883821,
            276030000,
            276029533,
            276718944,
            276718931,
            276716412,
            276716121,
            276379907
        ],
        "G": [
            275814532,
            275831532,
            275862936,
            275862868,
            275857045,
            275856914,
            275852957,
            275835244,
            275830497,
            275836895,
            275844798,
            275836685,
            275839620,
            275876408,
            275835680,
            276384839,
            275855186,
            275854807,
            275854377,
            275854233,
            275853273,
            275853001,
            277160193,
            275873413
        ],
        "F2": [
            275803261,
            275805293,
            275815511,
            275803726,
            275821855,
            275826602,
            275804715,
            275817099,
            275812698,
            275821433,
            275820135,
            275822519,
            275814615,
            275832819,
            275821881,
            275820944,
            275827250
        ],
        "F1": [
            275803106,
            275797405,
            275810054,
            275805934,
            275822144,
            275821908,
            275808780,
            275842679,
            275842498,
            275804501,
            275809897,
            275810999,
            275804801,
            275820307,
            275807320,
            275814303,
            275818257,
            275821104,
            275812786,
            275819730
        ],
        "E": [
            275776266,
            275785744,
            275852219,
            275788914,
            275771707,
            275802566,
            275795962,
            275769983,
            275789286,
            275807515,
            275787919,
            275785680,
            275785359,
            275786354,
            275779961,
            275794439,
            275802251,
            275789750,
            275800998,
            275803752,
            275804830
        ],
        "D2": [
            275767991,
            275777830,
            275771186,
            275817652,
            275793116,
            275788319,
            275778566,
            275781543,
            275797706,
            275776037,
            275778290,
            275777713,
            275779770,
            275786761,
            275779192,
            275790952,
            275773357,
            275786731,
            275789591,
            275775563
        ],
        "D1": [
            275767248,
            275777327,
            275771493,
            275817851,
            275793580,
            275790111,
            275778728,
            275771118,
            275797900,
            275776414,
            275778256,
            275777934,
            275780036,
            275787162,
            275779917,
            275791115,
            275772837,
            275787063,
            275789991,
            275776578
        ],
        "C": [
            275759851,
            275761703,
            275759373,
            275759241,
            275760994,
            275777407,
            275759928,
            275758928,
            275788566,
            275759503,
            275761991,
            275762069,
            275758442,
            275761405,
            275763148,
            275760323,
            275761934,
            275768403,
            275764562,
            275765401
        ],
        "B": [
            275757139,
            275757734,
            275756638,
            275756387,
            275757424,
            275758576,
            275756620,
            275756121,
            275770304,
            275762131,
            275757965,
            275758270,
            275756051,
            275757393,
            275759268,
            275756663,
            275757687,
            275761514,
            275758840,
            275756832
        ],
        "A": [
            275755167,
            275755315,
            275754910,
            275755027,
            275755132,
            275755590,
            275754949,
            275754911,
            275767431,
            275754975,
            275755752,
            275755110,
            275754896,
            275755382,
            275755090,
            275755155,
            275754903,
            275755222,
            275756059,
            275754981
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132569",
    "editorial": "The problem revolves around finding a\ncheck for dfs orders thatâs easy to maintain. We have discovered several\nsuch checks, a few checks and their proofs are described below, any one\nof these checks suffices to tell whether a dfs order is valid. Check\n1For every , all of its children satisfies . We can maintain this check\nby keeping track of the number of which violates this condition, and\ncheck for each using sets, when checking, we need only check the child\nwith the minimum and maximum .Proof: We prove by induction. When âs\nchildren only consists of leaves, it is easy to see that this check\nensures is a valid dfs order of the subtree of . Then, we can merge the\nsubtree of into a large node with size , and continue the analysis\nabove. Check 2Check 2: First we check . Then, for each pair of adjacent\nelements , must be an ancestor of , where denotes the father of node .\nWe can maintain this check by keeping track of the number of which\nviolates this condition, and check for each by checking whether is in\nthe subtree of .Proof: For any subtree , we take any such that does not\nbelong in subtree , but does. It follows that , since only the subtree\nof has nodes that does not belong in subtree . From this, we can gather\nthat each subtree will be entered at most once (and form a continuous\ninterval), and that the first visited node will be , which is sufficient\nto say that is a dfs order.Time complexity: .\n",
    "name": "D1. DFS Checker  Easy Version ",
    "statement": "You are given a perfect binary tree^\r\ndagger consisting of n vertices. The vertices are numbered from 1 to n,\r\nand the root is the vertex 1. You are also given a permutation p_1, p_2,\r\nldots, p_n of [1,2,\r\nldots,n].You need to answer q queries. For each query, you are given two\r\nintegers x, y; you need to swap p_x and p_y and determine if p_1, p_2,\r\nldots, p_n is a valid DFS order^\r\nddagger of the given tree.Please note that the swaps are through\r\nqueries.^\r\ndagger A perfect binary tree is a tree with vertex 1 as its root, with\r\nsize n=2^k-1 for a positive integer k, and where the parent of each\r\nvertex i (1<i\r\nle n) is\r\nleft\r\nlfloor\r\nfrac{i}{2}\r\nright\r\nrfloor. Thus, all leaves of this tree are at a distance k - 1 from the\r\nroot.^\r\nddagger A DFS order is found by calling the following\r\ntexttt{dfs} function on the given tree.dfs_order = []function dfs(v):\r\nappend v to the back of dfs_order pick an arbitrary permutation s of\r\nchildren of v for child in s: dfs(child)dfs(1)Note that the DFS order is\r\nnot unique.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using u32 = unsigned;using i64 = long long;using u64 = unsigned long long;struct HLD {    int n;    std::vector<int> siz, top, dep, parent, in, out, seq;    std::vector<std::vector<int>> adj;    int cur;        HLD() {}    HLD(int n) {        init(n);    }    void init(int n) {        this->n = n;        siz.resize(n);        top.resize(n);        dep.resize(n);        parent.resize(n);        in.resize(n);        out.resize(n);        seq.resize(n);        cur = 0;        adj.assign(n, {});    }    void addEdge(int u, int v) {        adj[u].push_back(v);        adj[v].push_back(u);    }    void work(int root = 0) {        top[root] = root;        dep[root] = 0;        parent[root] = -1;        dfs1(root);        dfs2(root);    }    void dfs1(int u) {        if (parent[u] != -1) {            adj[u].erase(std::find(adj[u].begin(), adj[u].end(), parent[u]));        }                siz[u] = 1;        for (auto &v : adj[u]) {            parent[v] = u;            dep[v] = dep[u] + 1;            dfs1(v);            siz[u] += siz[v];            if (siz[v] > siz[adj[u][0]]) {                std::swap(v, adj[u][0]);            }        }    }    void dfs2(int u) {        in[u] = cur++;        seq[in[u]] = u;        for (auto v : adj[u]) {            top[v] = v == adj[u][0] ? top[u] : v;            dfs2(v);        }        out[u] = cur;    }    int lca(int u, int v) {        while (top[u] != top[v]) {            if (dep[top[u]] > dep[top[v]]) {                u = parent[top[u]];            } else {                v = parent[top[v]];            }        }        return dep[u] < dep[v] ? u : v;    }        int dist(int u, int v) {        return dep[u] + dep[v] - 2 * dep[lca(u, v)];    }        int jump(int u, int k) {        if (dep[u] < k) {            return -1;        }                int d = dep[u] - k;                while (dep[top[u]] > d) {            u = parent[top[u]];        }                return seq[in[u] - dep[u] + d];    }        bool isAncester(int u, int v) {        return in[u] <= in[v] && in[v] < out[u];    }        int rootedParent(int u, int v) {        std::swap(u, v);        if (u == v) {            return u;        }        if (!isAncester(u, v)) {            return parent[u];        }        auto it = std::upper_bound(adj[u].begin(), adj[u].end(), v, [&](int x, int y) {            return in[x] < in[y];        }) - 1;        return *it;    }        int rootedSize(int u, int v) {        if (u == v) {            return n;        }        if (!isAncester(v, u)) {            return siz[v];        }        return n - siz[rootedParent(u, v)];    }        int rootedLca(int a, int b, int c) {        return lca(a, b) ^ lca(b, c) ^ lca(c, a);    }}; void solve() {    int n, q;    std::cin >> n >> q;        HLD t(n);    std::vector<int> a(n), p(n);    a[0] = -1;    for (int i = 1; i < n; i++) {        std::cin >> a[i];        a[i]--;        t.addEdge(a[i], i);    }    t.work();        for (int i = 0; i < n; i++) {        std::cin >> p[i];        p[i]--;    }        int cnt = 0;    std::vector<bool> good(n);    auto check = [&](int i) {        if (i < 1 || i >= n) {            return;        }        cnt -= good[i];        good[i] = !t.isAncester(p[i], p[i - 1]) && t.isAncester(a[p[i]], p[i - 1]);        cnt += good[i];    };    for (int i = 1; i < n; i++) {        check(i);    }        for (int i = 0; i < q; i++) {        int x, y;        std::cin >> x >> y;        x--;        y--;        std::swap(p[x], p[y]);        check(x);        check(x + 1);        check(y);        check(y + 1);        if (cnt == n - 1) {            std::cout << \"YES\\n\";        } else {            std::cout << \"NO\\n\";        }    }} int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "dfs and similar",
        "graphs",
        "hashing",
        "trees"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\D1. DFS Checker  Easy Version .json",
    "hint": [
        "Hint Try to find some easy checks that can be maintained."
    ]
}