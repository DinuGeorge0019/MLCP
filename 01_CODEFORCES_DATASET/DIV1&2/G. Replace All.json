{"link": "https://codeforces.com//contest/794/problem/G", "problemId": "106236", "problem_idx": "G", "shortId": "794G", "contest_number": "794", "problem_submissions": {"F": [27081873, 27083526, 27083046, 27085017, 27081983, 27082510, 27086006, 27083949, 27080179, 27086715, 27082966, 27079645, 27084337, 27084766, 27081869, 27081966, 27084662], "E": [27079377, 27080585, 27080375, 27082137, 27084820, 27086075, 27082614, 27085336, 27086070, 27082160, 27085721, 27085903, 27085376, 27087205, 27084980, 27082950, 27083172, 27085134], "D": [27077745, 27078665, 27078681, 27079267, 27079635, 27079737, 27080740, 27079081, 27083788, 27079987, 27082339, 27082247, 27082529, 27080107, 27094240, 27094236, 27094226, 27094219, 27094212, 27094182, 27094168, 27094131, 27094066, 27080763, 27081677, 27089971, 27089903, 27087542, 27080778], "C": [27075178, 27076116, 27076013, 27076437, 27076459, 27075605, 27076203, 27075986, 27076793, 27077625, 27078065, 27084041, 27076700, 27077790, 27078769, 27077244, 27075390, 27082931, 27077078], "B": [27072873, 27073613, 27072949, 27073965, 27073074, 27073568, 27073477, 27073304, 27073689, 27073228, 27073014, 27073894, 27072703, 27074273, 27072442, 27074226, 27073723, 27073830, 27073779], "A": [27072392, 27072471, 27072465, 27072459, 27072555, 27072760, 27072661, 27072604, 27072817, 27072481, 27072447, 27072409, 27072476, 27072463, 27072773, 27072976, 27072422, 27074544, 27072598], "G": [27216394, 27227867]}, "name": "G. Replace All", "statement": "Igor the analyst is at work. He learned about a feature in his text\r\neditor called \"Replace All\". Igor is too bored at work and thus he came\r\nup with the following problem:Given two strings and which consist of the\r\nEnglish letters \u201d and \u201d only, a pair of strings is called if: and\r\nconsist of the characters \u201d and \u201d only. , where denotes the length of\r\nstring , and is a fixed positive integer. If we replace all occurrences\r\nof \u201d in and with the string , and replace all occurrences of \u201d in and\r\nwith the string , then the two obtained from and strings are equal. For\r\nexample, if , and , then (, ) is one of good pairs of strings, because\r\nboth obtained after replacing strings are \"\".The of a pair of strings\r\nand is the number of pairs of good strings . The pairs are ordered, for\r\nexample the pairs , and , are different.You\u2019re given two strings and .\r\nThey consist of characters \u201d, \u201d and \u201d only. Find the sum of\r\nflexibilities of all possible pairs of strings such that and can be\r\nobtained from and respectively by replacing the question marks with\r\neither \u201d or \u201d, modulo .\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i, a, b) for (int i = (a), i##_end_ = (b); i < i##_end_; ++i)\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mp make_pair\n#define x first\n#define y second\n#define pb push_back\n#define SZ(x) (int((x).size()))\n#define ALL(x) (x).begin(), (x).end()\n\ntemplate<typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }\n\ntypedef long long LL;\n\nconst int oo = 0x3f3f3f3f;\n\nint ex_gcd(const int &a, const int &b, int &x, int &y)\n{\n\tif (!b)\n\t{\n\t\tx = 1, y = 0;\n\t\treturn a;\n\t}\n\tint d = ex_gcd(b, a % b, y, x);\n\ty -= a / b * x;\n\treturn d;\n}\n\nconst int Mod = 1e9 + 7;\n\ninline int fpm(LL b, int e, int m)\n{\n\tb %= m;\n\tLL t = 1;\n\tfor ( ; e; e >>= 1, (b *= b) %= m)\n\t\tif (e & 1) (t *= b) %= m;\n\treturn t;\n}\n\nconst int maxn = 600100;\n\nint fac[maxn + 5], ifac[maxn + 5];\n\nint pw2[maxn + 5];\n\nint mu[maxn + 5], phi[maxn + 5];\n\ninline void prepare()\n{\n\tfac[0] = 1;\n\tREP(i, 0, maxn) fac[i + 1] = (LL)fac[i] * (i + 1) % Mod;\n\tifac[maxn] = fpm(fac[maxn], Mod - 2, Mod);\n\tfor (int i = maxn - 1; i >= 0; --i) ifac[i] = (LL)ifac[i + 1] * (i + 1) % Mod;\n\tpw2[0] = 1;\n\tREP(i, 0, maxn) pw2[i + 1] = (pw2[i] << 1) % Mod;\n\tmu[1] = 1;\n\tfor (int i = 1; i <= maxn; ++i)\n\t\tfor (int j = (i << 1); j <= maxn; j += i)\n\t\t\tmu[j] -= mu[i];\n\tfor (int i = 1; i <= maxn; ++i)\n\t\tfor (int j = 1; j * i <= maxn; ++j)\n\t\t\tphi[i * j] += mu[i] * j;\n}\n\ninline int getC(int x, int y)\n{\n\treturn (LL)fac[x] * ifac[y] % Mod * ifac[x - y] % Mod;\n}\n\nint n;\nint aa, ab, ae, ba, bb, be;\nint an, bn;\nchar a[maxn + 5], b[maxn + 5];\n\nint ans;\n\nint main()\n{\n#ifdef matthew99\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tprepare();\n\tscanf(\"%s\", a);\n\tscanf(\"%s\", b);\n\tscanf(\"%d\", &n);\n\tan = strlen(a), bn = strlen(b);\n\tREP(i, 0, an) \n\t\tif (a[i] == 'A') ++aa;\n\t\telse if (a[i] == 'B') ++ab;\n\tREP(i, 0, bn) \n\t\tif (b[i] == 'A') ++ba;\n\t\telse if (b[i] == 'B') ++bb;\n\tae = an - aa - ab;\n\tbe = bn - ba - bb;\n\tint orix = aa - ba;\n\tREP(i, 0, ae + be + 1)\n\t{\n\t\tint tmp = getC(ae + be, i);\n\t\tint delta = i - be;\n\t\tint coex = orix + delta, coey = (an - bn) - coex;\n\t\tint val = 0;\n\t\tif (!coex && !coey) \n\t\t{\n\t\t\tassert(an == bn);\n\t\t\tval = (LL)(pw2[n + 1] - 2) * (pw2[n + 1] - 2) % Mod;\n\t\t\tint ways = 1;\n\t\t\tREP(j, 0, an) \n\t\t\t\tif (a[j] != '?' && b[j] != '?')\n\t\t\t\t{\n\t\t\t\t\tif (a[j] != b[j]) { ways = 0; break; }\n\t\t\t\t}\n\t\t\t\telse if (a[j] == '?' && b[j] == '?') (ways <<= 1) %= Mod;\n\t\t\t(ans += (LL)ways * val % Mod) %= Mod;\n\t\t\tval = 0;\n\t\t\tREP(j, 1, n + 1)\n\t\t\t{\n\t\t\t\tint tmp0 = phi[j];\n\t\t\t\tif (j > 1) (tmp0 <<= 1) %= Mod;\n\t\t\t\t(val += (LL)tmp0 * (pw2[n / j + 1] - 2) % Mod) %= Mod;\n\t\t\t}\n\t\t\t(ans += (LL)(tmp - ways) * val % Mod) %= Mod;\n\t\t}\n\t\telse if (coex && coey)\n\t\t{\n\t\t\tif (coex < 0) coex = -coex;\n\t\t\telse coey = -coey;\n\t\t\tif (coey < 0) continue;\n\t\t\tint d = __gcd(coex, coey);\n\t\t\tcoex /= d, coey /= d;\n\t\t\tval = pw2[n / max(coex, coey) + 1] - 2;\n\t\t\t(ans += (LL)tmp * val % Mod) %= Mod;\n\t\t}\n\t}\n\t(ans += Mod) %= Mod;\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["combinatorics", "dp", "math"], "dificulty": "3400", "interactive": false}