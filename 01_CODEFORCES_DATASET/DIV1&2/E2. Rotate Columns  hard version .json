{
    "link": "https://codeforces.com//contest/1209/problem/E2",
    "problemId": "411982",
    "problem_idx": "E2",
    "shortId": "1209E2",
    "contest_number": "1209",
    "problem_submissions": {
        "H": [
            60570135,
            60593253,
            60571964,
            60573026,
            60725224,
            60568078
        ],
        "G1": [
            60556287,
            60555918,
            60560660,
            60545193,
            60554924,
            60565714,
            60564847,
            60552798,
            60544388,
            60543295,
            60556776,
            60547912,
            60548472,
            60548343,
            60554445,
            60552013,
            60553528,
            60550140
        ],
        "F": [
            60551951,
            60559474,
            60551041,
            60555531,
            60550649,
            60550897,
            60556467,
            60559990,
            60548723,
            60548870,
            60575790,
            60552616,
            60555309,
            60557639,
            60553869,
            60548929,
            60549043,
            60560725
        ],
        "E1": [
            60550756,
            60549748,
            60556687,
            60542418,
            60544279,
            60546177,
            60548542,
            60550504,
            60541823,
            60540929,
            60549430,
            60545745,
            60545737,
            60545738,
            60546288,
            60556058,
            60558038,
            60546083
        ],
        "E2": [
            60550484,
            60549405,
            60556943,
            60542599,
            60544405,
            60546112,
            60548494,
            60550663,
            60542010,
            60541156,
            60549544,
            60546078,
            60546087,
            60546121,
            60546350,
            60556107,
            60589552,
            60589526,
            60589450,
            60589386,
            60588908,
            60588877,
            60579849,
            60579734,
            60579573,
            60558088,
            60546300
        ],
        "D": [
            60539597,
            60542953,
            60544285,
            60538671,
            60541008,
            60541094,
            60543213,
            60542943,
            60537333,
            60538028,
            60540579,
            60538998,
            60541063,
            60539296,
            60540559,
            60539902,
            60539449,
            60540533
        ],
        "C": [
            60538071,
            60541013,
            60542624,
            60537384,
            60538008,
            60539883,
            60540890,
            60540668,
            60537787,
            60537103,
            60538560,
            60537646,
            60538820,
            60541917,
            60538555,
            60538406,
            60537838,
            60538612
        ],
        "B": [
            60534755,
            60535450,
            60536787,
            60534226,
            60534529,
            60537069,
            60535685,
            60535878,
            60534260,
            60533467,
            60534967,
            60535176,
            60536131,
            60536594,
            60535887,
            60533931,
            60532807,
            60535219
        ],
        "A": [
            60532612,
            60532698,
            60532910,
            60532511,
            60532605,
            60536220,
            60532574,
            60532833,
            60532652,
            60532527,
            60532568,
            60532602,
            60532828,
            60533109,
            60532549,
            60532535,
            60534221,
            60532564
        ],
        "G2": [
            60566672,
            60567960,
            60565628,
            60564728,
            60572926,
            60607969,
            60701078,
            60577013,
            60576902,
            60576886
        ]
    },
    "name": "E2. Rotate Columns  hard version ",
    "statement": ".You are given a rectangular n\r\ntimes m matrix a. In one move you can choose any column and cyclically\r\nshift elements in this column. You can perform this operation as many\r\ntimes as you want (possibly zero). You can perform this operation to a\r\ncolumn multiple times.After you are done with cyclical shifts, you\r\ncompute for every row the maximal value in it. Suppose that for i-th row\r\nit is equal r_i. What is the maximal possible value of r_1+r_2+\r\nldots+r_n?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nmt19937 mrand(random_device{}()); \nconst ll mod=1000000007;\nint rnd(int x) { return mrand() % x;}\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\nll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}\n// head\n\nconst int N=5010;\nint n,m,_,p[N];\nPII v[N];\nint a[20][N],dp[N],pd[N],ff[N],gg[N];\n\nint main() {\n\tfor (scanf(\"%d\",&_);_;_--) {\n\t\tscanf(\"%d%d\",&n,&m);\n\t\trep(i,0,n) {\n\t\t\trep(j,0,m) scanf(\"%d\",&a[i][j]);\n\t\t}\n\t\trep(j,0,m) {\n\t\t\tp[j]=0;\n\t\t\trep(i,0,n) p[j]=max(p[j],a[i][j]);\n\t\t\tv[j]=mp(p[j],j);\n\t\t}\n\t\tsort(v,v+m); reverse(v,v+m);\n\t\tm=min(m,n);\n\t\tmemset(dp,0,sizeof(dp));\n\t\trep(i,0,m) {\n\t\t\trep(j,0,(1<<n)) pd[j]=dp[j],dp[j]=0;\n\t\t\tint x=v[i].se;\n\t\t\trep(rot,0,n) {\n\t\t\t\trep(j,0,(1<<n)) ff[j]=pd[j];\n\t\t\t\trep(k,0,n) {\n\t\t\t\t\trep(j,0,(1<<n)) gg[j]=ff[j];\n\t\t\t\t\trep(j,0,(1<<n)) if (j&(1<<k)) ff[j]=max(ff[j],gg[j-(1<<k)]+a[(k+rot)%n][x]);\n\t\t\t\t}\n\t\t\t\trep(j,0,(1<<n)) dp[j]=max(dp[j],ff[j]);\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",dp[(1<<n)-1]);\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "dp",
        "greedy",
        "sortings"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\E2. Rotate Columns  hard version .json",
    "editorial_link": "https://codeforces.com/blog/entry/69791",
    "editorial": "The previous solution is slightly too slow to pass the large\r\nconstraints. Letâs sort columns by the maximum element in them. Observe,\r\nthat it is surely unoptimal to use columns which go after first columns\r\nin sorted order (we couldâve replaced them with some unused column). So\r\nwe can solve the hard version with previous solution in which we\r\nconsider only best columns. Complexity Code\r\n",
    "hint": []
}