{
    "link": "https://codeforces.com//contest/1060/problem/C",
    "problemId": "230448",
    "problem_idx": "C",
    "shortId": "1060C",
    "contest_number": "1060",
    "problem_submissions": {
        "H": [
            43777582,
            43775787,
            43778301,
            43775359,
            43805399,
            43782088,
            43777602,
            44116240,
            43850241,
            43778906,
            43778773
        ],
        "F": [
            43769322,
            43774726,
            43772403,
            43778102,
            43769241,
            43772326,
            43773423,
            43775493,
            43777323,
            43776810,
            44345662,
            43998198,
            43776461,
            43777805,
            43885359,
            43777579,
            43776355,
            43779796,
            43779608,
            43780204
        ],
        "E": [
            43762417,
            43764663,
            43763746,
            43764167,
            43763212,
            43766061,
            43765524,
            43768205,
            43766236,
            43763603,
            43766034,
            43766754,
            43768368,
            43766310,
            43767829,
            43764919,
            43769766,
            43765300,
            43766971,
            43767710
        ],
        "B": [
            43761076,
            43759115,
            43759168,
            43759290,
            43758265,
            43759025,
            43759632,
            43759678,
            43759571,
            43759528,
            43758792,
            43759203,
            43760228,
            43760411,
            43761202,
            43772055,
            43761410,
            43759136,
            43761174,
            43759666
        ],
        "C": [
            43760028,
            43761053,
            43760979,
            43760607,
            43760834,
            43761267,
            43761559,
            43762200,
            43761558,
            43761781,
            43761097,
            43763023,
            43762854,
            43762864,
            43763097,
            43761814,
            43765269,
            43760939,
            43763385,
            43762549
        ],
        "D": [
            43758517,
            43762752,
            43762719,
            43762340,
            43759631,
            43763257,
            43762507,
            43764164,
            43763131,
            43760435,
            43762978,
            43764580,
            43764519,
            43765425,
            43764660,
            43762881,
            43766760,
            43767791,
            43764938,
            43764650
        ],
        "A": [
            43757554,
            43758213,
            43757544,
            43758262,
            43757552,
            43757711,
            43757958,
            43758105,
            43757983,
            43757586,
            43757752,
            43757708,
            43758583,
            43757806,
            43757592,
            43757955,
            43759122,
            43757641,
            43757856,
            43757849
        ],
        "G": [
            44020164,
            44543288
        ]
    },
    "name": "C. Maximum Subrectangle",
    "statement": "You are given two arrays a and b of positive integers, with length n and\r\nm respectively. Let c be an n\r\ntimes m matrix, where c_{i,j} = a_i\r\ncdot b_j. You need to find a subrectangle of the matrix c such that the\r\nsum of its elements is at most x, and its area (the total number of\r\nelements) is the largest possible.Formally, you need to find the largest\r\nnumber s such that it is possible to choose integers x_1, x_2, y_1, y_2\r\nsubject to 1\r\nleq x_1\r\nleq x_2\r\nleq n, 1\r\nleq y_1\r\nleq y_2\r\nleq m, (x_2 - x_1 + 1)\r\ntimes (y_2 - y_1 + 1) = s, and\r\nsum_{i=x_1}^{x_2}{\r\nsum_{j=y_1}^{y_2}{c_{i,j}}}\r\nleq x.\r\n",
    "solutions": [
        "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <map>\n#include <vector>\n#include <string>\n#include <set>\n#include <cmath>\n\nusing namespace std;\ntypedef long long ll;\nconst int MAXN = 2100;\n\nint N, M;\nll a[MAXN], b[MAXN];\nll arange[MAXN], brange[MAXN];\nll x;\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(NULL);\n\n    cin >> N >> M;\n    for (int i = 0; i < N; i++)\n        cin >> a[i];\n    for (int i = 0; i < M; i++)\n        cin >> b[i];\n\n    cin >> x;\n    for (int i = 0; i < MAXN; i++)\n        arange[i] = brange[i] = x + 1;\n\n    for (int i = 0; i < N; i++)\n    {\n        ll csum = 0;\n        for (int j = i; j < N; j++)\n        {\n            csum += a[j];\n            arange[j-i+1] = min (arange[j-i+1], csum);\n        }\n    }\n    for (int i = 0; i < M; i++)\n    {\n        ll csum = 0;\n        for (int j = i; j < M; j++)\n        {\n            csum += b[j];\n            brange[j-i+1] = min (brange[j-i+1], csum);\n        }\n    }\n    \n    int ans = 0;\n    for (int i = 1; i <= N; i++)\n        for (int j = 1; j <= M; j++)\n        {\n            if (arange[i] * brange[j] <= x)\n                ans = max (ans, i * j);\n        }\n    cout << ans << \"\\n\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation",
        "two pointers"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Maximum Subrectangle.json",
    "editorial_link": "https://codeforces.com//blog/entry/113725",
    "editorial": "Note that for a subrectangle corresponding to \nx\n1\n,\ny\n1\n,\nx\n2\n,\ny\n2\nx \n1\n?\n ,y \n1\n?\n ,x \n2\n?\n ,y \n2\n?\n  as in the statement, \nc\ni\n,\nj\nc \ni,j\n?\n  corresponds to the term we get when we multiply \n(\n?\ni\n=\nx\n1\nx\n2\na\ni\n)\n?\n(\n?\nj\n=\ny\n1\ny\n2\nb\nj\n)\n(? \ni=x \n1\n?\n \nx \n2\n?\n \n?\n a \ni\n?\n )?(? \nj=y \n1\n?\n \ny \n2\n?\n \n?\n b \nj\n?\n ). This allows us to decouple the rows and the columns of the matrix.\n\nMore specifically, consider the subarray of \na\na with indices from \nx\n1\nx \n1\n?\n  to \nx\n2\nx \n2\n?\n  (let\u0092s call it \na\n[\nx\n1\n:\nx\n2\n]\na[x \n1\n?\n :x \n2\n?\n ]), and also consider the subarray of \nb\nb with indices from \ny\n1\ny \n1\n?\n  to \ny\n2\ny \n2\n?\n  (let\u0092s call it \nb\n[\ny\n1\n:\ny\n2\n]\nb[y \n1\n?\n :y \n2\n?\n ]). Define the cost of a subarray as the sum of elements in it. Then the sum of the subrectangle equals the cost of \na\n[\nx\n1\n:\nx\n2\n]\na[x \n1\n?\n :x \n2\n?\n ] times the cost of \nb\n[\ny\n1\n:\ny\n2\n]\nb[y \n1\n?\n :y \n2\n?\n ]. So now, we focus on only the one dimensional arrays given to us.\n\nFor a given value \nC\nC of the cost, let\u0092s try to find the maximum length of a subarray of \na\na with cost \nC\nC (let\u0092s call this \n?\n(\nC\n)\n?(C)). Using this, we can compute the maximum length of a subarray that has a cost at most \nC\nC, by finding the prefix maximums of \n?\n?. Let\u0092s also do this for the array \nb\nb.\n\nThe problem now reduces to finding \nmax\n?\nA\ni\n?\nB\nj\nmaxA \ni\n?\n ?B \nj\n?\n  subject to the constraints \ni\n?\nj\n?\nx\ni?j?x, for two monotonically non-decreasing arrays \nA\nA and \nB\nB (the reduction follows by setting \nA\nA to be the array found in the previous paragraph for \na\na, and \nB\nB to be the analogue of \nA\nA for \nb\nb).\n\nNow, this problem can be solved in linear time in the sizes of the arrays using two pointers: let\u0092s iterate over \ni\ni from right to left. Note that the rightmost \nj\nj such that \ni\n?\nj\n?\nx\ni?j?x is in fact \n?\nx\n/\ni\n?\n?x/i?, and this is non-decreasing as \ni\ni decreases. In fact, since \nB\nB is non-decreasing, two pointers are redundant, and we can simply query \nB\n?\nx\n/\ni\n?\nB \n?x/i?\n?\n .\n\nNote that there is one potential catch: the sizes of \nA\nA and \nB\nB might be large. But the constraints on the arrays \na\na and \nb\nb show that the maximum size is \n4\n?\n1\n0\n6\n4?10 \n6\n , and the constraints on \nn\nn show that we can run an \nO\n(\nn\n2\n)\nO(n \n2\n ) loop to compute the arrays \nA\nA and \nB\nB from \na\na and \nb\nb fast enough.\n\nThe time complexity is \nO\n(\nmax\n?\n(\n?\ni\n=\n1\nn\na\ni\n,\n?\ni\n=\n1\nm\nb\ni\n)\n+\nn\n2\n+\nm\n2\n)\nO(max(? \ni=1\nn\n?\n a \ni\n?\n ,? \ni=1\nm\n?\n b \ni\n?\n )+n \n2\n +m \n2\n )."
}