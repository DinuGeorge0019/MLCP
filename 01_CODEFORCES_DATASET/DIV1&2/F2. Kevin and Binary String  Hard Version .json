{
    "link": "https://codeforces.com//contest/2061/problem/F2",
    "problemId": "3155960",
    "problem_idx": "F2",
    "shortId": "2061F2",
    "contest_number": "2061",
    "problem_submissions": {
        "F2": [
            302127475,
            302092403,
            302114656,
            302114350,
            302118052,
            302128136,
            302099327,
            302127501,
            302105569,
            302158287,
            302158231,
            302158981,
            302158740,
            302158593,
            302155955
        ],
        "H1": [
            302102508,
            302123846,
            302123275,
            302120307,
            302128240,
            302113263,
            302214973,
            302214838,
            302492170,
            302128311,
            302150853
        ],
        "G": [
            302087277,
            302104836,
            302092310,
            302101290,
            302098614,
            302099751,
            302090244,
            302079497,
            302107342,
            302102846,
            302118471,
            302119832,
            302088828,
            302085801,
            302097252,
            302107147,
            302100360,
            302104471
        ],
        "F1": [
            302070705,
            302068249,
            302076903,
            302139304,
            302085853,
            302085964,
            302087951,
            302076823,
            302099111,
            302088499,
            302088697,
            302106078,
            302076066,
            302095307,
            302083979,
            302077009,
            302082649,
            302158914,
            302081283
        ],
        "E": [
            302060766,
            302059898,
            302064375,
            302146780,
            302146561,
            302146204,
            302145996,
            302145832,
            302145821,
            302145812,
            302060519,
            302071650,
            302062756,
            302067337,
            302066558,
            302071373,
            302078018,
            302075359,
            302069841,
            302067118,
            302063628,
            302073608,
            302071649,
            302075889,
            302072748
        ],
        "D": [
            302057147,
            302056206,
            302056876,
            302056600,
            302064486,
            302056648,
            302061458,
            302060302,
            302063595,
            302065433,
            302068805,
            302064352,
            302061742,
            302059104,
            302069059,
            302065232,
            302069194,
            302062940
        ],
        "C": [
            302053893,
            302052972,
            302060290,
            302053477,
            302058781,
            302053556,
            302058513,
            302056661,
            302060439,
            302057971,
            302066087,
            302059912,
            302059144,
            302055184,
            302066070,
            302060621,
            302062953,
            302059461
        ],
        "B": [
            302048946,
            302050832,
            302052328,
            302049723,
            302053638,
            302049221,
            302054664,
            302052475,
            302055824,
            302052997,
            302059041,
            302057352,
            302051579,
            302051983,
            302056196,
            302056129,
            302055478,
            302054565
        ],
        "A": [
            302047037,
            302049009,
            302047309,
            302047023,
            302047283,
            302047053,
            302047177,
            302047108,
            302047316,
            302047521,
            302047571,
            302047610,
            302047369,
            302048738,
            302047337,
            302048364,
            302049028,
            302047123
        ],
        "H2": [
            302541217
        ],
        "I": [
            302144176,
            302142123,
            302142064,
            302141919,
            302124920,
            302518298,
            302518173,
            302517883
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/138620",
    "editorial": "First, we divide the string into blocks.Let’s analyze the properties of\r\nthe blocks in that do not move (to simplify corner cases, we can add a\r\nblock with a different number at both ends of ): These blocks must\r\nalternate between and . Between two immovable blocks, the s will shift\r\ntoward the same side as the adjacent block of s, and the s will shift\r\ntoward the same side as the adjacent block of s. For example, will\r\nbecome after the shifting process. This properties can be proven by\r\ninduction. For the easy version, since the target string is known, we\r\ncan greedily determine whether each block in can remain\r\nimmovable.Specifically:For each block and the previous immovable block,\r\ncheck if the corresponding digits are different. Also, ensure that the\r\nnumbers in the interval between the two blocks meet the conditions\r\n(i.e., the s and s in this interval must shift to their respective\r\nsides). This can be solved efficiently using prefix sums.If there are\r\nblocks between two immovable blocks, then moves are required.Time\r\ncomplexity: . For the hard version, we use dynamic programming to\r\ndetermine which blocks can remain immovable.Let represent the minimum\r\ncost for the -th block to remain immovable. We have:Without loss of\r\ngenerality, assume that the -th block is composed of s. Let the distance\r\nbetween the -th block and the nearest preceding -block be . The number\r\nof s between blocks and cannot exceed . There is a restriction:\r\n.Similarly, for , we can derive a symmetric restriction: .We can use a\r\nsegment tree to maintain the values of for all valid . Specifically: For\r\na position , if the current , update the corresponding value to . For\r\neach , query the segment tree over the valid interval to compute the\r\nminimum efficiently. Time complexity: .\r\n",
    "name": "F2. Kevin and Binary String  Hard Version ",
    "statement": "Kevin has a binary string s of length n. Kevin can perform the following\r\noperation: Choose two adjacent blocks of s and swap them. A block is a\r\nmaximal substring^{\r\ntext{ }} of identical characters. Formally, denote s[l,r] as the\r\nsubstring s_l s_{l+1}\r\nldots s_r. A block is s[l,r] satisfying: l=1 or s_l\r\nnot=s_{l-1}. s_l=s_{l+1} =\r\nldots = s_{r}. r=n or s_r\r\nnot=s_{r+1}. Adjacent blocks are two blocks s[l_1,r_1] and s[l_2,r_2]\r\nsatisfying r_1+1=l_2.For example, if s=\r\nmathtt{000}\r\n,\r\nmathbf{11}\r\n,\r\nmathbf{00}\r\n,\r\nmathtt{111}, Kevin can choose the two blocks s[4,5] and s[6,7] and swap\r\nthem, transforming s into\r\nmathtt{000}\r\n,\r\nmathbf{00}\r\n,\r\nmathbf{11}\r\n,\r\nmathtt{111}.Given a string t of length n consisting of ’0’, ’1’ and ’?’,\r\nKevin wants to determine the minimum number of operations required to\r\nperform such that for any index i (1\r\nle i\r\nle n), if t_i\r\nnot= ’?’ then s_i=t_i. If it is impossible, output -1.^{\r\ntext{ }}A string a is a substring of a string b if a can be obtained\r\nfrom b by the deletion of several (possibly, zero or all) characters\r\nfrom the beginning and several (possibly, zero or all) characters from\r\nthe end.\r\n",
    "solutions": [
        "#include <bits/stdc++.h> using i64 = long long;using u64 = unsigned long long;using u32 = unsigned;using u128 = unsigned __int128;template<class Info>struct SegmentTree {    int n;    std::vector<Info> info;    SegmentTree() : n(0) {}    SegmentTree(int n_, Info v_ = Info()) {        init(n_, v_);    }    template<class T>    SegmentTree(std::vector<T> init_) {        init(init_);    }    void init(int n_, Info v_ = Info()) {        init(std::vector(n_, v_));    }    template<class T>    void init(std::vector<T> init_) {        n = init_.size();        info.assign(4 << std::__lg(n), Info());        std::function<void(int, int, int)> build = [&](int p, int l, int r) {            if (r - l == 1) {                info[p] = init_[l];                return;            }            int m = (l + r) / 2;            build(2 * p, l, m);            build(2 * p + 1, m, r);            pull(p);        };        build(1, 0, n);    }    void pull(int p) {        info[p] = info[2 * p] + info[2 * p + 1];    }    void modify(int p, int l, int r, int x, const Info &v) {        if (r - l == 1) {            info[p] = v;            return;        }        int m = (l + r) / 2;        if (x < m) {            modify(2 * p, l, m, x, v);        } else {            modify(2 * p + 1, m, r, x, v);        }        pull(p);    }    void modify(int p, const Info &v) {        modify(1, 0, n, p, v);    }    Info rangeQuery(int p, int l, int r, int x, int y) {        if (l >= y || r <= x) {            return Info();        }        if (l >= x && r <= y) {            return info[p];        }        int m = (l + r) / 2;        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);    }    Info rangeQuery(int l, int r) {        return rangeQuery(1, 0, n, l, r);    }    template<class F>    int findFirst(int p, int l, int r, int x, int y, F &&pred) {        if (l >= y || r <= x) {            return -1;        }        if (l >= x && r <= y && !pred(info[p])) {            return -1;        }        if (r - l == 1) {            return l;        }        int m = (l + r) / 2;        int res = findFirst(2 * p, l, m, x, y, pred);        if (res == -1) {            res = findFirst(2 * p + 1, m, r, x, y, pred);        }        return res;    }    template<class F>    int findFirst(int l, int r, F &&pred) {        return findFirst(1, 0, n, l, r, pred);    }    template<class F>    int findLast(int p, int l, int r, int x, int y, F &&pred) {        if (l >= y || r <= x) {            return -1;        }        if (l >= x && r <= y && !pred(info[p])) {            return -1;        }        if (r - l == 1) {            return l;        }        int m = (l + r) / 2;        int res = findLast(2 * p + 1, m, r, x, y, pred);        if (res == -1) {            res = findLast(2 * p, l, m, x, y, pred);        }        return res;    }    template<class F>    int findLast(int l, int r, F &&pred) {        return findLast(1, 0, n, l, r, pred);    }}; constexpr int inf = 1E9; struct Info {    int x = -inf;}; Info operator+(const Info &a, const Info &b) {    return {std::max(a.x, b.x)};} void solve() {    std::string s, t;    std::cin >> s >> t;        int n = s.size();        if (n == 1) {        if (s == t || t == \"?\") {            std::cout << 0 << \"\\n\";        } else {            std::cout << -1 << \"\\n\";        }        return;    }        int ans = inf;        for (int t0 = 0; t0 < 2; t0++) {        for (int tn = 0; tn < 2; tn++) {            if (t[0] != '?' && t[0] != '0' + t0) {                continue;            }            if (t[n - 1] != '?' && t[n - 1] != '0' + tn) {                continue;            }            auto S = char('0' + t0) + s + char('0' + tn);            auto T = char('0' + t0) + t + char('0' + tn);            T[1] = '0' + t0;            T[n] = '0' + tn;                        // std::cerr << S << \" \" << T << \"\\n\";                        std::vector<int> pre(n + 3);            for (int i = 0; i < n + 2; i++) {                pre[i + 1] = pre[i] + (S[i] - '0');            }                        std::vector<std::array<int, 2>> next(n + 2), prev(n + 2);            for (int i = n + 1; i >= 0; i--) {                for (int x = 0; x < 2; x++) {                    if (T[i] == '0' + x) {                        next[i][x] = i;                    } else if (i < n + 1) {                        next[i][x] = next[i + 1][x];                    } else {                        next[i][x] = i + 1;                    }                }            }            for (int i = 0; i <= n + 1; i++) {                for (int x = 0; x < 2; x++) {                    if (T[i] == '0' + x) {                        prev[i][x] = i;                    } else if (i) {                        prev[i][x] = prev[i - 1][x];                    } else {                        prev[i][x] = i - 1;                    }                }            }                        std::vector<int> dp(n + 2, -inf);            dp[0] = 0;                        std::vector<std::vector<int>> del(n + 2);                        for (int i = 0; i <= n + 1; i++) {                if (T[i] != S[i] && T[i] != '?') {                    continue;                }                int lo = i, hi = n + 1;                while (lo < hi) {                    int j = (lo + hi + 1) / 2;                    int c1 = pre[j + 1] - pre[i];                    int c0 = (j + 1 - i) - c1;                                        if (S[i] == '0' ? i + c0 <= next[i][1] : i + c1 <= next[i][0]) {                        lo = j;                    } else {                        hi = j - 1;                    }                }                                del[lo].push_back(i);            }                        std::vector seg(2, SegmentTree<Info>(n + 2));                        for (int i = 0; i <= n + 1; i++) {                if (T[i] == S[i] || T[i] == '?') {                    if (i) {                        if (T[i - 1] == S[i - 1] || T[i - 1] == '?') {                            dp[i] = std::max(dp[i], dp[i - 1] + (S[i] != S[i - 1]));                        }                        int lo = 0, hi = i;                        while (lo < hi) {                            int j = (lo + hi) / 2;                            int c1 = pre[i + 1] - pre[j];                            int c0 = (i + 1 - j) - c1;                                                        if (S[i] == '1' ? i - c1 >= prev[i][0] : i - c0 >= prev[i][1]) {                                hi = j;                            } else {                                lo = j + 1;                            }                        }                                                dp[i] = std::max(dp[i], seg[(S[i] - '0') ^ 1].rangeQuery(lo, i).x + 1);                    }                    seg[S[i] - '0'].modify(i, {dp[i]});                }                                for (auto j : del[i]) {                    seg[S[j] - '0'].modify(j, {});                }            }                        // for (int i = 0; i <= n + 1; i++) {            //     for (int j = i + 1; j <= n + 1; j++) {            //         if (j == i + 1) {            //             dp[j] = std::max(dp[j], dp[i] + (S[i] != S[j]));            //         }            //         if (S[i] == '0' && S[j] == '1') {            //             int c1 = pre[j + 1] - pre[i];            //             int c0 = (j + 1 - i) - c1;            //             if (i + c0 <= next[i][1] && j - c1 >= prev[j][0]) {            //                 dp[j] = std::max(dp[j], dp[i] + 1);            //             }            //         }            //         if (S[i] == '1' && S[j] == '0') {            //             int c1 = pre[j + 1] - pre[i];            //             int c0 = (j + 1 - i) - c1;            //             if (i + c1 <= next[i][0] && j - c0 >= prev[j][1]) {            //                 dp[j] = std::max(dp[j], dp[i] + 1);            //             }            //         }            //     }            // }                        // std::cerr << dp[n + 1] << \"\\n\";                        // for (int i = 0; i <= n + 1; i++) {            //     std::cerr << dp[i] << \" \\n\"[i == n + 1];            // }                        int res = 0;            for (int i = 1; i <= n + 1; i++) {                if (S[i] != S[i - 1]) {                    res++;                }            }            res -= dp[n + 1];            ans = std::min(ans, res);        }    }        if (ans > inf / 2) {        ans = -1;    } else {        ans /= 2;    }    std::cout << ans << \"\\n\";} int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "dp"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\F2. Kevin and Binary String  Hard Version .json"
}