{
    "link": "https://codeforces.com//contest/618/problem/C",
    "problemId": "46786",
    "problem_idx": "C",
    "shortId": "618C",
    "contest_number": "618",
    "problem_submissions": {
        "E": [
            15660896,
            15660810,
            25267684,
            15661349,
            15660954,
            15669573,
            15669552,
            15657805,
            15659540,
            15660389,
            15659859,
            15661631,
            15661128,
            15659694,
            15662154,
            15661797,
            15661848,
            15663282,
            15660127,
            15662115
        ],
        "D": [
            15656948,
            15655133,
            15655445,
            15667159,
            15665258,
            15655421,
            15655925,
            15656563,
            15656409,
            15655319,
            15659360,
            39354565,
            15656312,
            15656752,
            15657964,
            15663170,
            15658748
        ],
        "C": [
            15652141,
            15652363,
            15652477,
            15652597,
            15653006,
            15652229,
            15653352,
            15654441,
            15653369,
            15652636,
            15663125,
            15652085,
            15653674,
            15653050,
            15652997,
            15652103,
            15653430
        ],
        "A": [
            15650445,
            15649636,
            15649663,
            15649788,
            15649765,
            15649822,
            15650160,
            15649790,
            15649745,
            15649679,
            15649632,
            15649853,
            15649674,
            15649848,
            15649720,
            15649691,
            15650068
        ],
        "B": [
            15649885,
            15650154,
            15650770,
            15651204,
            15650301,
            15650651,
            15651598,
            15651581,
            15651312,
            15651165,
            15649859,
            15650851,
            15650978,
            15651073,
            15650933,
            15650396,
            15651924
        ],
        "F": [
            15662761,
            15674016,
            15665529,
            15670689
        ]
    },
    "name": "C. Constellation",
    "statement": "Cat Noku has obtained a map of the night sky. On this map, he found a\r\nconstellation with stars numbered from to . For each , the -th star is\r\nlocated at coordinates . No two stars are located at the same\r\nposition.In the evening Noku is going to take a look at the night sky.\r\nHe would like to find three distinct stars and form a triangle. The\r\ntriangle must have positive area. In addition, all other stars must lie\r\nstrictly outside of this triangle. He is having trouble finding the\r\nanswer and would like your help. Your job is to find the indices of\r\nthree stars that would form a triangle that satisfies all the\r\nconditions. It is guaranteed that there is no line such that all stars\r\nlie on that line. It can be proven that if the previous condition is\r\nsatisfied, there exists a solution to this problem.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\n\ntypedef long long ll;\n\nstruct Point\n{\n\tll x, y;\n\n\tPoint() : x(), y() {}\n\tPoint (ll _x, ll _y) : x(_x), y(_y) {}\n\n\tPoint operator + (const Point &a) const\n\t{\n\t\treturn Point(x + a.x, y + a.y);\n\t}\n\tPoint operator - (const Point &a) const\n\t{\n\t\treturn Point(x - a.x, y - a.y);\n\t}\n\tll operator % (const Point &a) const\n\t{\n\t\treturn x * a.x + y * a.y;\n\t}\n\tll operator * (const Point &a) const\n\t{\n\t\treturn x * a.y - y * a.x;\n\t}\n\tll sqrLen() const\n\t{\n\t\treturn *this % *this;\n\t}\n\n\tvoid scan()\n\t{\n\t\tscanf(\"%lld%lld\", &x, &y);\n\t}\n};\n\nconst int N = 100100;\nPoint a[N];\nint n;\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++)\n\t\ta[i].scan();\n\tll L = (a[1] - a[0]).sqrLen();\n\tint v = 1;\n\tfor (int i = 2; i < n; i++)\n\t{\n\t\tll d = (a[i] - a[0]).sqrLen();\n\t\tif (d < L)\n\t\t{\n\t\t\tL = d;\n\t\t\tv = i;\n\t\t}\n\t}\n\tll S = -1;\n\tint u = -1;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tll s = (a[i] - a[0]) * (a[i] - a[v]);\n\t\ts = abs(s);\n\t\tif (s == 0) continue;\n\t\tif (S == -1 || s < S)\n\t\t{\n\t\t\tS = s;\n\t\t\tu = i;\n\t\t}\n\t}\n\tprintf(\"%d %d %d\\n\", 1, min(v, u) + 1, max(v, u) + 1);\n\t\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "implementation"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Constellation.json",
    "editorial_link": "https://codeforces.com//blog/entry/23142",
    "editorial": "There are many possible solutions to this problem. The first solution is\r\nto choose any nondegenerate triangle. Then, for each other point, if it\r\nis inside the triangle, we can replace one of our three triangle points\r\nand continue. We only need to make a single pass through the points. We\r\nneed to be a bit careful about collinear points in this case. Another\r\nsolution is as follows. Let\u00e2\u0080\u0099s choose an arbitrary point. Then, sort all\r\nother points by angle about this point. Then, we can just choose any two\r\nother points that have different angles, breaking ties by distance to\r\nthe chosen point. (or breaking ties by two adjacent angles). Example\r\ncode (by breaking up triangles):\r\nhttp://codeforces.com/contest/618/submission/15669502 Example code (by\r\nangles): http://codeforces.com/contest/618/submission/15669511 Comment:\r\nExcept for the second sample, all pretests didn\u00e2\u0080\u0099t have collinear points.\r\nSo many hacking cases are cases with collinear points.\r\n"
}