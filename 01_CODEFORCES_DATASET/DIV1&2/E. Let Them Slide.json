{"link": "https://codeforces.com//contest/1208/problem/E", "problemId": "395880", "problem_idx": "E", "shortId": "1208E", "contest_number": "1208", "problem_submissions": {"H": [59484058, 59502734, 76052313], "G": [59465495, 59473655, 59462360, 59469582, 59476496, 59467194, 59474332, 59471219, 59476758, 59478641, 59474463, 59471571, 59487164, 59486904, 59486576, 59482130, 59477683, 59476449, 59473994, 59479017, 59477708, 59480546], "F": [59463879, 59465198, 59467560, 59476238, 59468730, 59478991, 59464681, 59477905, 59488265, 59473195, 59472737, 59472853, 59477583, 59487223, 59467058, 59472365, 59474724, 59482091, 59473763, 59474219, 59475026], "E": [59458500, 59460001, 59471123, 59460976, 59465221, 59464240, 59471956, 59467792, 59468080, 59468210, 59467089, 59468111, 59463881, 59468884, 59466520, 59466354, 59469354, 59470023, 59470503], "C": [59454101, 59453008, 59450929, 59452783, 59454696, 59455218, 59454973, 59451236, 59458825, 59456015, 59453250, 59456008, 59453716, 59453732, 59453888, 59456639, 59456258, 59457694, 59458473], "D": [59453338, 59455109, 59457439, 59466058, 59460513, 59457371, 59457830, 59458661, 59462381, 59461784, 59460829, 59462458, 59456674, 59462814, 59457263, 59459344, 59458893, 59462907, 59461567], "B": [59451380, 59451457, 59455342, 59451327, 59452833, 59452235, 59452686, 59455049, 59452214, 59453318, 59450989, 59453232, 59451916, 59457683, 59451681, 59453837, 59452400, 59452282, 59455051], "A": [59449116, 59449294, 59449254, 59449364, 59450306, 59449785, 59449160, 59452256, 59449743, 59449309, 59449227, 59449840, 59449173, 59458690, 59449209, 59449159, 59450221, 59449398, 59450162]}, "name": "E. Let Them Slide", "statement": "You are given n arrays that can have different sizes. You also have a\r\ntable with w columns and n rows. The i-th array is placed horizontally\r\nin the i-th row. You can slide each array within its row as long as it\r\noccupies several consecutive cells and lies completely inside the\r\ntable.You need to find the maximum sum of the integers in the j-th\r\ncolumn for each j from 1 to w independently. Note that you can exclude\r\nany array out of a column provided it remains in the window. In this\r\ncase its value is considered to be zero.\r\n", "solutions": ["/**\n *    author:  tourist\n *    created: 25.08.2019 17:46:19       \n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <typename T, class F = function<T(const T&, const T&)>>\nclass SparseTable {\n public:\n  int n;\n  vector<vector<T>> mat;\n  F func;\n\n  SparseTable(const vector<T>& a, const F& f) : func(f) {\n    n = static_cast<int>(a.size());\n    int max_log = 32 - __builtin_clz(n);\n    mat.resize(max_log);\n    mat[0] = a;\n    for (int j = 1; j < max_log; j++) {\n      mat[j].resize(n - (1 << j) + 1);\n      for (int i = 0; i <= n - (1 << j); i++) {\n        mat[j][i] = func(mat[j - 1][i], mat[j - 1][i + (1 << (j - 1))]);\n      }\n    }\n  }\n\n  T get(int from, int to) const {\n    assert(0 <= from && from <= to && to <= n - 1);\n    int lg = 32 - __builtin_clz(to - from + 1) - 1;\n    return func(mat[lg][from], mat[lg][to - (1 << lg) + 1]);\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int cnt, w;\n  cin >> cnt >> w;\n  vector<long long> res(w + 1);\n  while (cnt--) {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n      cin >> a[i];\n    }\n    SparseTable<int> st(a, [&](int i, int j) { return max(i, j); });\n    for (int i = 0; i < w; i++) {\n      int from = max(i - (w - n), 0);\n      int to = min(i, n - 1);\n      int cur = st.get(from, to);\n      if (cur < 0 && (i >= n || i < w - n)) {\n        cur = 0;\n      }\n      res[i] += cur;\n      if (from == 0 && to == n - 1 && i >= n && w >= 2 * n + 1) {\n        i = max(i, w - n - 1);\n      }\n      res[i + 1] -= cur;\n    }\n  }\n  for (int i = 0; i < w; i++) {\n    if (i > 0) {\n      cout << \" \";\n    }\n    cout << res[i];\n    res[i + 1] += res[i];\n  }\n  cout << '\\n';\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "implementation"], "dificulty": "2200", "interactive": false}