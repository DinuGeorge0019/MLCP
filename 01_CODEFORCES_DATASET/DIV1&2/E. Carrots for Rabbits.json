{"link": "https://codeforces.com//contest/1428/problem/E", "problemId": "762867", "problem_idx": "E", "shortId": "1428E", "contest_number": "1428", "problem_submissions": {"H": [95798388, 96079889, 95822989, 95819273], "G2": [95777265, 95779066, 95783656, 95782002, 95792200, 95787701, 95792987, 95787809, 95792595, 95788941, 95788283, 95789699, 95792016, 95786243, 95795577, 95795657, 95796576, 95798040, 95805912, 95794416], "G1": [95777192, 95778996, 95783550, 95782076, 95787327, 95787607, 95787264, 95787896, 95792632, 95789001, 95788384, 95789621, 95791835, 95786301, 95795432, 95795591, 95796478, 95795620, 95794276, 95794356], "F": [95765157, 95765965, 95771166, 95767388, 95768274, 95768695, 95770215, 95759208, 95832501, 95832498, 95832480, 95831607, 95831604, 95831342, 95763101, 95777757, 95779436, 95770353, 95771012, 95772923, 95779700, 95776557, 95778129, 95776549, 95775700, 95779883], "E": [95758700, 95760055, 95763026, 95762658, 95754707, 95762381, 95764564, 95752105, 95754040, 95762344, 95751508, 95766331, 95750653, 95764708, 95767437, 95759986, 95764850, 95764733, 95758532, 95759950], "D": [95754864, 95756381, 95758710, 95758367, 95764528, 95758021, 95759449, 95765541, 95774991, 95758395, 95775675, 95762065, 95777703, 95760640, 95762966, 95770799, 95762173, 95759561, 95760180, 95767247], "B": [95745661, 95741583, 95746087, 95741923, 95743557, 95741471, 95742126, 95742079, 95743874, 95742788, 95744560, 95742620, 95745128, 95748044, 95745202, 95746759, 95741532, 95741702, 95742488, 95749798], "C": [95742981, 95744852, 95748437, 95744808, 95746831, 95743810, 95745097, 95745356, 95741031, 95745159, 95747546, 95747612, 95742323, 95747442, 95747895, 95749106, 95744992, 95747455, 95745170, 95751867], "A": [95740482, 95739860, 95740501, 95739845, 95741896, 95739795, 95739865, 95739838, 95739950, 95739997, 95739893, 95739847, 95740138, 95852510, 95844045, 95839237, 95838793, 95838769, 95838754, 95838446, 95824867, 95812004, 95742639, 95740471, 95741183, 95739807, 95739826, 95740061, 95740497]}, "name": "E. Carrots for Rabbits", "statement": "There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought\r\nn carrots with lengths a_1, a_2, a_3,\r\nldots, a_n. However, rabbits are very fertile and multiply very quickly.\r\nZookeeper now has k rabbits and does not have enough carrots to feed all\r\nof them. To solve this problem, Zookeeper decided to cut the carrots\r\ninto k pieces. For some reason, all resulting carrot lengths must be\r\npositive integers.Big carrots are very difficult for rabbits to handle\r\nand eat, so the time needed to eat a carrot of size x is x^2.Help\r\nZookeeper split his carrots while minimizing the sum of time taken for\r\nrabbits to eat the carrots.\r\n", "solutions": ["//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC target (\"avx2\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=1000*1007;\nconst ll inf=1e18;\n\nint n, k;\n\nll tab[nax];\n\nll kwa(ll v)\n{\n\treturn v*v;\n}\n\nll koszt(int v, ll cz)\n{\n\tif (cz>tab[v])\n\t\treturn inf;\n\tll dz=tab[v]/cz;\n\tll resz=tab[v]%cz;\n\treturn kwa(dz+1)*resz+kwa(dz)*(cz-resz);\n}\n\nll tu[nax];\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &k);\n\tfor (int i=1; i<=n; i++)\n\t{\n\t\ttu[i]=1;\n\t\tscanf(\"%lld\", &tab[i]);\n\t}\n\tpriority_queue<pair<ll,int>>kol;\n\tfor (int i=1; i<=n; i++)\n\t\tkol.push({koszt(i, 1)-koszt(i, 2), i});\n\tfor (int h=n+1; h<=k; h++)\n\t{\n\t\tint v=kol.top().second;\n\t\tkol.pop();\n\t\ttu[v]++;\n\t\tkol.push({koszt(v, tu[v])-koszt(v, tu[v]+1), v});\n\t}\n\tll wyn=0;\n\tfor (int i=1; i<=n; i++)\n\t\twyn+=koszt(i, tu[i]);\n\tprintf(\"%lld\\n\", wyn);\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "data structures", "greedy", "math", "sortings"], "dificulty": "2200", "interactive": false}