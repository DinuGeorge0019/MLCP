{
    "link": "https://codeforces.com//contest/2002/problem/E",
    "problemId": "2809242",
    "problem_idx": "E",
    "shortId": "2002E",
    "contest_number": "2002",
    "problem_submissions": {
        "H": [
            275883821,
            276030000,
            276029533,
            276718944,
            276718931,
            276716412,
            276716121,
            276379907
        ],
        "G": [
            275814532,
            275831532,
            275862936,
            275862868,
            275857045,
            275856914,
            275852957,
            275835244,
            275830497,
            275836895,
            275844798,
            275836685,
            275839620,
            275876408,
            275835680,
            276384839,
            275855186,
            275854807,
            275854377,
            275854233,
            275853273,
            275853001,
            277160193,
            275873413
        ],
        "F2": [
            275803261,
            275805293,
            275815511,
            275803726,
            275821855,
            275826602,
            275804715,
            275817099,
            275812698,
            275821433,
            275820135,
            275822519,
            275814615,
            275832819,
            275821881,
            275820944,
            275827250
        ],
        "F1": [
            275803106,
            275797405,
            275810054,
            275805934,
            275822144,
            275821908,
            275808780,
            275842679,
            275842498,
            275804501,
            275809897,
            275810999,
            275804801,
            275820307,
            275807320,
            275814303,
            275818257,
            275821104,
            275812786,
            275819730
        ],
        "E": [
            275776266,
            275785744,
            275852219,
            275788914,
            275771707,
            275802566,
            275795962,
            275769983,
            275789286,
            275807515,
            275787919,
            275785680,
            275785359,
            275786354,
            275779961,
            275794439,
            275802251,
            275789750,
            275800998,
            275803752,
            275804830
        ],
        "D2": [
            275767991,
            275777830,
            275771186,
            275817652,
            275793116,
            275788319,
            275778566,
            275781543,
            275797706,
            275776037,
            275778290,
            275777713,
            275779770,
            275786761,
            275779192,
            275790952,
            275773357,
            275786731,
            275789591,
            275775563
        ],
        "D1": [
            275767248,
            275777327,
            275771493,
            275817851,
            275793580,
            275790111,
            275778728,
            275771118,
            275797900,
            275776414,
            275778256,
            275777934,
            275780036,
            275787162,
            275779917,
            275791115,
            275772837,
            275787063,
            275789991,
            275776578
        ],
        "C": [
            275759851,
            275761703,
            275759373,
            275759241,
            275760994,
            275777407,
            275759928,
            275758928,
            275788566,
            275759503,
            275761991,
            275762069,
            275758442,
            275761405,
            275763148,
            275760323,
            275761934,
            275768403,
            275764562,
            275765401
        ],
        "B": [
            275757139,
            275757734,
            275756638,
            275756387,
            275757424,
            275758576,
            275756620,
            275756121,
            275770304,
            275762131,
            275757965,
            275758270,
            275756051,
            275757393,
            275759268,
            275756663,
            275757687,
            275761514,
            275758840,
            275756832
        ],
        "A": [
            275755167,
            275755315,
            275754910,
            275755027,
            275755132,
            275755590,
            275754949,
            275754911,
            275767431,
            275754975,
            275755752,
            275755110,
            275754896,
            275755382,
            275755090,
            275755155,
            275754903,
            275755222,
            275756059,
            275754981
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132569",
    "editorial": "The problems asks for the answer\nfor every prefix, which hints at an incremental solution.To add a new\npair to the current prefix, we need to somehow process the new block\nmerging with old ones. Thus, we should use some structure to store the\ninformation on the last block over time.Namely, we use a stack to keep\ntrack of all blocks that became the last. For each block, we keep two\nvalues: its color and its lifetime (the times it takes for the block to\ndisappear).When inserting a new block, we pop all blocks that would be\nshadowed by the current one (i.e. with lifetime shorter than the current\nblock), and merging blocks with the same . When merging two blocks with\nlength and , and the maximum lifetime of blocks between them is , should\nhold, and the new block will have lifetime .For more details, please\nrefer to the solution code.There also exists solutions using ordered\nsets or heaps.Time complexity: .\n",
    "name": "E. Cosmic Rays",
    "statement": "Given an array of integers s_1, s_2,\r\nldots, s_l, every second, cosmic rays will cause all s_i such that i=1\r\nor s_i\r\nneq s_{i-1} to be deleted simultaneously, and the remaining parts will\r\nbe concatenated together in order to form the new array s_1, s_2,\r\nldots, s_{l\u2019}.Define the of an array as the number of seconds it takes\r\nto become empty.You are given an array of integers compressed in the\r\nform of n pairs that describe the array left to right. Each pair\r\n(a_i,b_i) represents a_i copies of b_i, i.e.\r\nunderbrace{b_i,b_i,\r\ncdots,b_i}_{a_i\r\ntextrm{ times}}.For each i=1,2,\r\ndots,n, please find the of the sequence described by the first i pairs.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\u00a0using u32 = unsigned;using i64 = long long;using u64 = unsigned long long;\u00a0void solve() {    int n;    std::cin >> n;        std::vector<std::pair<int, i64>> stk;    i64 ans = 0;    for (int i = 0; i < n; i++) {        int a, b;        std::cin >> a >> b;                i64 len = 0;        while (!stk.empty() && (a > 0 || stk.back().first == b)) {            if (stk.back().first == b) {                len += stk.back().second;                stk.pop_back();            } else {                i64 t = std::min<i64>(a, stk.back().second);                a -= t;                len += t;                stk.back().second -= t;                if (stk.back().second == 0) {                    stk.pop_back();                }            }        }        ans += a;        len += a;        stk.emplace_back(b, len);        std::cout << ans << \" \\n\"[i == n - 1];    }}\u00a0int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(nullptr);        int t;    std::cin >> t;        while (t--) {        solve();    }        return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "dp"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\E. Cosmic Rays.json"
}