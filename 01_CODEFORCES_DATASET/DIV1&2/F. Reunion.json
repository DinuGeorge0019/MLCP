{"link": "https://codeforces.com//contest/1517/problem/F", "problemId": "965876", "problem_idx": "F", "shortId": "1517F", "contest_number": "1517", "problem_submissions": {"H": [114124079], "G": [114025193, 114025453, 114036917, 114041033, 120816591, 114039616, 114040728, 114039927, 114032359, 114070041, 114035064, 114033289, 114027246, 114034514, 114039178], "F": [114020736, 114030530, 114031555, 114030260, 114028344, 114033849, 114034020, 114018937, 114029544, 114031878, 114032269, 114081756, 114032270, 114064223, 114063627, 114035709, 114033913, 114011444], "E": [114008455, 114016598, 114020187, 114012041, 114018819, 114010909, 114015500, 114005326, 114018769, 114013314, 114020062, 114017004, 114020744, 114019236, 114016487, 114039583, 114022320, 114026617, 114029372, 114033166], "D": [113994855, 114002285, 113999931, 113998145, 114001241, 113997280, 114006046, 113995707, 114045880, 114001753, 113998952, 113996449, 114003893, 113997337, 114003553, 113997528, 114023776, 114004856, 114002724, 114015602], "C": [113990530, 113993399, 113992809, 113995080, 113997177, 113991979, 113994818, 113991013, 113995164, 113995388, 114003260, 113990649, 113998059, 113993447, 113997532, 113994037, 113993505, 113998635, 113997064, 114020381], "B": [113987399, 113989246, 113990561, 113990842, 113994206, 113989103, 113990699, 113988130, 113992221, 113990490, 113991945, 113987962, 113992832, 113988946, 113993066, 113990201, 113991322, 113993920, 113991184, 114017898], "A": [113984711, 113984860, 113985166, 113986320, 113989984, 113984723, 113984834, 113984709, 113984737, 113984977, 113984884, 113984721, 113985551, 113984722, 113984905, 113985815, 113985646, 113989342, 113986198, 114012398]}, "name": "F. Reunion", "statement": "It is reported that the 2050 Conference will be held in Yunqi Town in\r\nHangzhou from April 23 to 25, including theme forums, morning jogging,\r\ncamping and so on.The relationship between the n volunteers of the 2050\r\nConference can be represented by a tree (a connected undirected graph\r\nwith n vertices and n-1 edges). The n vertices of the tree corresponds\r\nto the n volunteers and are numbered by 1,2,\r\nldots, n.We define the distance between two volunteers i and j, (i,j) as\r\nthe number of edges on the shortest path from vertex i to vertex j on\r\nthe tree. (i,j)=0 whenever i=j.Some of the volunteers can attend the\r\non-site reunion while others cannot. If for some volunteer x and\r\nnonnegative integer r, all volunteers whose distance to x is no more\r\nthan r can attend the on-site reunion, a forum with radius r can take\r\nplace. The of the on-site reunion is defined as the maximum possible\r\nradius of any forum that can take place.Assume that each volunteer can\r\nattend the on-site reunion with probability\r\nfrac{1}{2} and these events are independent. Output the expected level\r\nof the on-site reunion. When no volunteer can attend, the level is\r\ndefined as -1. When all volunteers can attend, the level is defined as\r\nn.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n \nusing ll = long long;\nusing db = long double; // or double, if TL is tight\nusing str = string; // yay python!\n\nusing pi = pair<int,int>;\nusing pl = pair<ll,ll>;\nusing pd = pair<db,db>;\n\nusing vi = vector<int>;\nusing vb = vector<bool>;\nusing vl = vector<ll>;\nusing vd = vector<db>; \nusing vs = vector<str>;\nusing vpi = vector<pi>;\nusing vpl = vector<pl>; \nusing vpd = vector<pd>;\n\n#define tcT template<class T\n#define tcTU tcT, class U\n// ^ lol this makes everything look weird but I'll try it\ntcT> using V = vector<T>; \ntcT, size_t SZ> using AR = array<T,SZ>; \ntcT> using PR = pair<T,T>;\n\n// pairs\n#define mp make_pair\n#define f first\n#define s second\n\n// vectors\n// oops size(x), rbegin(x), rend(x) need C++17\n#define sz(x) int((x).size())\n#define bg(x) begin(x)\n#define all(x) bg(x), end(x)\n#define rall(x) x.rbegin(), x.rend() \n#define sor(x) sort(all(x)) \n#define rsz resize\n#define ins insert \n#define ft front()\n#define bk back()\n#define pb push_back\n#define eb emplace_back \n#define pf push_front\n#define rtn return\n\n#define lb lower_bound\n#define ub upper_bound \ntcT> int lwb(V<T>& a, const T& b) { return int(lb(all(a),b)-bg(a)); }\n\n// loops\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\n#define F0R(i,a) FOR(i,0,a)\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\n#define R0F(i,a) ROF(i,0,a)\n#define rep(a) F0R(_,a)\n#define each(a,x) for (auto& a: x)\n\nconst int MOD = 998244353;\nconst int MX = 2e5+5;\nconst ll INF = 1e18; // not too close to LLONG_MAX\nconst db PI = acos((db)-1);\nconst int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1}; // for every grid problem!!\nmt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count()); \ntemplate<class T> using pqg = priority_queue<T,vector<T>,greater<T>>;\n\n// bitwise ops\n// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\nconstexpr int pct(int x) { return __builtin_popcount(x); } // # of bits set\nconstexpr int bits(int x) { // assert(x >= 0); // make C++11 compatible until USACO updates ...\n\treturn x == 0 ? 0 : 31-__builtin_clz(x); } // floor(log2(x)) \nconstexpr int p2(int x) { return 1<<x; }\nconstexpr int msk2(int x) { return p2(x)-1; }\n\nll cdiv(ll a, ll b) { return a/b+((a^b)>0&&a%b); } // divide a by b rounded up\nll fdiv(ll a, ll b) { return a/b-((a^b)<0&&a%b); } // divide a by b rounded down\n\ntcT> bool ckmin(T& a, const T& b) {\n\treturn b < a ? a = b, 1 : 0; } // set a = min(a,b)\ntcT> bool ckmax(T& a, const T& b) {\n\treturn a < b ? a = b, 1 : 0; }\n\ntcTU> T fstTrue(T lo, T hi, U f) {\n\thi ++; assert(lo <= hi); // assuming f is increasing\n\twhile (lo < hi) { // find first index such that f is true \n\t\tT mid = lo+(hi-lo)/2;\n\t\tf(mid) ? hi = mid : lo = mid+1; \n\t} \n\treturn lo;\n}\ntcTU> T lstTrue(T lo, T hi, U f) {\n\tlo --; assert(lo <= hi); // assuming f is decreasing\n\twhile (lo < hi) { // find first index such that f is true \n\t\tT mid = lo+(hi-lo+1)/2;\n\t\tf(mid) ? lo = mid : hi = mid-1;\n\t} \n\treturn lo;\n}\ntcT> void remDup(vector<T>& v) { // sort and remove duplicates\n\tsort(all(v)); v.erase(unique(all(v)),end(v)); }\ntcTU> void erase(T& t, const U& u) { // don't erase\n\tauto it = t.find(u); assert(it != end(t));\n\tt.erase(it); } // element that doesn't exist from (multi)set\n\n#define tcTUU tcT, class ...U\n\ninline namespace Helpers {\n\t//////////// is_iterable\n\t// https://stackoverflow.com/questions/13830158/check-if-a-variable-type-is-iterable\n\t// this gets used only when we can call begin() and end() on that type\n\ttcT, class = void> struct is_iterable : false_type {};\n\ttcT> struct is_iterable<T, void_t<decltype(begin(declval<T>())),\n\t                                  decltype(end(declval<T>()))\n\t                                 >\n\t                       > : true_type {};\n\ttcT> constexpr bool is_iterable_v = is_iterable<T>::value;\n\n\t//////////// is_readable\n\ttcT, class = void> struct is_readable : false_type {};\n\ttcT> struct is_readable<T,\n\t        typename std::enable_if_t<\n\t            is_same_v<decltype(cin >> declval<T&>()), istream&>\n\t        >\n\t    > : true_type {};\n\ttcT> constexpr bool is_readable_v = is_readable<T>::value;\n\n\t//////////// is_printable\n\t// // https://nafe.es/posts/2020-02-29-is-printable/\n\ttcT, class = void> struct is_printable : false_type {};\n\ttcT> struct is_printable<T,\n\t        typename std::enable_if_t<\n\t            is_same_v<decltype(cout << declval<T>()), ostream&>\n\t        >\n\t    > : true_type {};\n\ttcT> constexpr bool is_printable_v = is_printable<T>::value;\n}\n\ninline namespace Input {\n\ttcT> constexpr bool needs_input_v = !is_readable_v<T> && is_iterable_v<T>;\n\ttcTUU> void re(T& t, U&... u);\n\ttcTU> void re(pair<T,U>& p); // pairs\n\n\t// re: read\n\ttcT> typename enable_if<is_readable_v<T>,void>::type re(T& x) { cin >> x; } // default\n\ttcT> void re(complex<T>& c) { T a,b; re(a,b); c = {a,b}; } // complex\n\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i); // ex. vectors, arrays\n\ttcTU> void re(pair<T,U>& p) { re(p.f,p.s); }\n\ttcT> typename enable_if<needs_input_v<T>,void>::type re(T& i) {\n\t\teach(x,i) re(x); }\n\ttcTUU> void re(T& t, U&... u) { re(t); re(u...); } // read multiple\n\n\t// rv: resize and read vectors\n\tvoid rv(size_t) {}\n\ttcTUU> void rv(size_t N, V<T>& t, U&... u);\n\ttemplate<class...U> void rv(size_t, size_t N2, U&... u);\n\ttcTUU> void rv(size_t N, V<T>& t, U&... u) {\n\t\tt.rsz(N); re(t);\n\t\trv(N,u...); }\n\ttemplate<class...U> void rv(size_t, size_t N2, U&... u) {\n\t\trv(N2,u...); }\n\n\t// dumb shortcuts to read in ints\n\tvoid decrement() {} // subtract one from each\n\ttcTUU> void decrement(T& t, U&... u) { --t; decrement(u...); }\n\t#define ints(...) int __VA_ARGS__; re(__VA_ARGS__);\n\t#define int1(...) ints(__VA_ARGS__); decrement(__VA_ARGS__);\n}\n\ninline namespace ToString {\n\ttcT> constexpr bool needs_output_v = !is_printable_v<T> && is_iterable_v<T>;\n\n\t// ts: string representation to print\n\ttcT> typename enable_if<is_printable_v<T>,str>::type ts(T v) {\n\t\tstringstream ss; ss << fixed << setprecision(15) << v;\n\t\treturn ss.str(); } // default\n\ttcT> str bit_vec(T t) { // bit vector to string\n\t\tstr res = \"{\"; F0R(i,sz(t)) res += ts(t[i]);\n\t\tres += \"}\"; return res; }\n\tstr ts(V<bool> v) { return bit_vec(v); }\n\ttemplate<size_t SZ> str ts(bitset<SZ> b) { return bit_vec(b); } // bit vector\n\ttcTU> str ts(pair<T,U> p); // pairs\n\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v); // vectors, arrays\n\ttcTU> str ts(pair<T,U> p) { return \"(\"+ts(p.f)+\", \"+ts(p.s)+\")\"; }\n\ttcT> typename enable_if<is_iterable_v<T>,str>::type ts_sep(T v, str sep) {\n\t\t// convert container to string w/ separator sep\n\t\tbool fst = 1; str res = \"\";\n\t\tfor (const auto& x: v) {\n\t\t\tif (!fst) res += sep;\n\t\t\tfst = 0; res += ts(x);\n\t\t}\n\t\treturn res;\n\t}\n\ttcT> typename enable_if<needs_output_v<T>,str>::type ts(T v) {\n\t\treturn \"{\"+ts_sep(v,\", \")+\"}\"; }\n\n\t// for nested DS\n\ttemplate<int, class T> typename enable_if<!needs_output_v<T>,vs>::type \n\t  ts_lev(const T& v) { return {ts(v)}; }\n\ttemplate<int lev, class T> typename enable_if<needs_output_v<T>,vs>::type \n\t  ts_lev(const T& v) {\n\t\tif (lev == 0 || !sz(v)) return {ts(v)};\n\t\tvs res;\n\t\tfor (const auto& t: v) {\n\t\t\tif (sz(res)) res.bk += \",\";\n\t\t\tvs tmp = ts_lev<lev-1>(t);\n\t\t\tres.ins(end(res),all(tmp));\n\t\t}\n\t\tF0R(i,sz(res)) {\n\t\t\tstr bef = \" \"; if (i == 0) bef = \"{\";\n\t\t\tres[i] = bef+res[i];\n\t\t}\n\t\tres.bk += \"}\";\n\t\treturn res;\n\t}\n}\n\ninline namespace Output {\n\ttemplate<class T> void pr_sep(ostream& os, str, const T& t) { os << ts(t); }\n\ttemplate<class T, class... U> void pr_sep(ostream& os, str sep, const T& t, const U&... u) {\n\t\tpr_sep(os,sep,t); os << sep; pr_sep(os,sep,u...); }\n\t// print w/ no spaces\n\ttemplate<class ...T> void pr(const T&... t) { pr_sep(cout,\"\",t...); } \n\t// print w/ spaces, end with newline\n\tvoid ps() { cout << \"\\n\"; }\n\ttemplate<class ...T> void ps(const T&... t) { pr_sep(cout,\" \",t...); ps(); } \n\t// debug to cerr\n\ttemplate<class ...T> void dbg_out(const T&... t) {\n\t\tpr_sep(cerr,\" | \",t...); cerr << endl; }\n\tvoid loc_info(int line, str names) {\n\t\tcerr << \"Line(\" << line << \") -> [\" << names << \"]: \"; }\n\ttemplate<int lev, class T> void dbgl_out(const T& t) {\n\t\tcerr << \"\\n\\n\" << ts_sep(ts_lev<lev>(t),\"\\n\") << \"\\n\" << endl; }\n\t#ifdef LOCAL\n\t\t#define dbg(...) loc_info(__LINE__,#__VA_ARGS__), dbg_out(__VA_ARGS__)\n\t\t#define dbgl(lev,x) loc_info(__LINE__,#x), dbgl_out<lev>(x)\n\t#else // don't actually submit with this\n\t\t#define dbg(...) 0\n\t\t#define dbgl(lev,x) 0\n\t#endif\n}\n\ninline namespace FileIO {\n\tvoid setIn(str s)  { freopen(s.c_str(),\"r\",stdin); }\n\tvoid setOut(str s) { freopen(s.c_str(),\"w\",stdout); }\n\tvoid setIO(str s = \"\") {\n\t\tcin.tie(0)->sync_with_stdio(0); // unsync C / C++ I/O streams\n\t\t// cin.exceptions(cin.failbit);\n\t\t// throws exception when do smth illegal\n\t\t// ex. try to read letter into int\n\t\tif (sz(s)) setIn(s+\".in\"), setOut(s+\".out\"); // for old USACO\n\t}\n}\n\nint N;\nvi adj[305];\n// map<pi,int> dp[305];\n\n/**\n * Description: modular arithmetic operations \n * Source: \n\t* KACTL\n\t* https://codeforces.com/blog/entry/63903\n\t* https://codeforces.com/contest/1261/submission/65632855 (tourist)\n\t* https://codeforces.com/contest/1264/submission/66344993 (ksun)\n\t* also see https://github.com/ecnerwala/cp-book/blob/master/src/modnum.hpp (ecnerwal)\n * Verification: \n\t* https://open.kattis.com/problems/modulararithmetic\n */\n\ntemplate<int MOD, int RT> struct mint {\n\tstatic const int mod = MOD;\n\tstatic constexpr mint rt() { return RT; } // primitive root for FFT\n\tint v; explicit operator int() const { return v; } // explicit -> don't silently convert to int\n\tmint() { v = 0; }\n\tmint(ll _v) { v = int((-MOD < _v && _v < MOD) ? _v : _v % MOD);\n\t\tif (v < 0) v += MOD; }\n\tfriend bool operator==(const mint& a, const mint& b) { \n\t\treturn a.v == b.v; }\n\tfriend bool operator!=(const mint& a, const mint& b) { \n\t\treturn !(a == b); }\n\tfriend bool operator<(const mint& a, const mint& b) { \n\t\treturn a.v < b.v; }\n\tfriend void re(mint& a) { ll x; re(x); a = mint(x); }\n\tfriend str ts(mint a) { return ts(a.v); }\n   \n\tmint& operator+=(const mint& m) { \n\t\tif ((v += m.v) >= MOD) v -= MOD; \n\t\treturn *this; }\n\tmint& operator-=(const mint& m) { \n\t\tif ((v -= m.v) < 0) v += MOD; \n\t\treturn *this; }\n\tmint& operator*=(const mint& m) { \n\t\tv = int((ll)v*m.v%MOD); return *this; }\n\tmint& operator/=(const mint& m) { return (*this) *= inv(m); }\n\tfriend mint pow(mint a, ll p) {\n\t\tmint ans = 1; assert(p >= 0);\n\t\tfor (; p; p /= 2, a *= a) if (p&1) ans *= a;\n\t\treturn ans; }\n\tfriend mint inv(const mint& a) { assert(a.v != 0); \n\t\treturn pow(a,MOD-2); }\n\t\t\n\tmint operator-() const { return mint(-v); }\n\tmint& operator++() { return *this += 1; }\n\tmint& operator--() { return *this -= 1; }\n\tfriend mint operator+(mint a, const mint& b) { return a += b; }\n\tfriend mint operator-(mint a, const mint& b) { return a -= b; }\n\tfriend mint operator*(mint a, const mint& b) { return a *= b; }\n\tfriend mint operator/(mint a, const mint& b) { return a /= b; }\n};\n\ntypedef mint<MOD,5> mi; // 5 is primitive root for both common mods\ntypedef vector<mi> vmi;\ntypedef pair<mi,mi> pmi;\ntypedef vector<pmi> vpmi;\n\nvector<vmi> scmb; // small combinations\nvoid genComb(int SZ) {\n\tscmb.assign(SZ,vmi(SZ)); scmb[0][0] = 1;\n\tFOR(i,1,SZ) F0R(j,i+1) \n\t\tscmb[i][j] = scmb[i-1][j]+(j?scmb[i-1][j-1]:0);\n}\n\nint max_bad;\n\nmap<pi,mi> solve(int x, int y) {\n\tmap<pi,mi> dp;\n\tdp[{MOD,0}] = 1; // >= 0 -> need\n\t// < 0 -> provide\n\teach(c,adj[x]) if (c != y) {\n\t\tauto c_ans = solve(c,x);\n\t\tmap<pi,mi> DP;\n\t\teach(a,dp) each(b,c_ans) {\n\t\t\tint closest = min(a.f.f,b.f.f+1);\n\t\t\tint farthest_bad = max(a.f.s,b.f.s+1);\n\t\t\tif (farthest_bad <= max_bad)\n\t\t\t\tDP[{closest,farthest_bad}] += a.s*b.s;\n\t\t}\n\t\tswap(dp,DP);\n\t}\n\tmap<pi,mi> DP;\n\teach(a,dp) {\n\t\tassert(a.f.s <= max_bad);\n\t\tif (a.f.f+a.f.s <= max_bad) {\n\t\t\tDP[{a.f.f,-1}] += a.s;\n\t\t} else {\n\t\t\tDP[a.f] += a.s;\n\t\t}\n\t\tDP[{0,-1}] += a.s;\n\t}\n\treturn DP;\n}\n\nvoid ad(vmi& v, int ind, mi prod) {\n\twhile (sz(v) <= ind) v.pb(0);\n\tv[ind] += prod;\n}\n\nAR<vmi,2> solve_new(int a, int b) {\n\tAR<vmi,2> dp; // bad, good\n\tdp[0] = {1};\n\t// dp[0] = 1; // >= 0 -> need\n\t// // < 0 -> provide\n\n\teach(c,adj[a]) if (c != b) {\n\t\tauto c_ans = solve_new(c,a);\n\t\tF0R(i,2) c_ans[i].ins(begin(c_ans[i]),0);\n\t\tAR<vmi,2> res;\n\t\tF0R(x,2) F0R(y,2) \n\t\t\tF0R(xx,sz(dp[x])) F0R(yy,sz(c_ans[y])) {\n\t\t\t\tmi prod = dp[x][xx]*c_ans[y][yy];\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tif (y == 0) {\n\t\t\t\t\t\tad(res[0],max(xx,yy),prod);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (xx+yy <= max_bad) {\n\t\t\t\t\t\t\tad(res[1],yy,prod);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tad(res[0],xx,prod);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (y == 0) {\n\t\t\t\t\t\tif (xx+yy <= max_bad) {\n\t\t\t\t\t\t\tad(res[1],xx,prod);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tad(res[0],yy,prod);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tad(res[1],min(xx,yy),prod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tswap(dp,res);\n\t}\n\t// dbg(\"BEF\",dp);\n\tauto DP = dp;\n\tF0R(i,sz(dp[0])) if (i <= max_bad) ad(DP[1],0,dp[0][i]);\n\tF0R(i,sz(dp[1])) ad(DP[1],0,dp[1][i]);\n\t// dbg(\"RESULT\",a,b,dp);\n\treturn DP;\n}\n\nmi all_within(int x) {\n\tauto a = solve_new(1,0);\n\tdbg(\"HA\",a);\n\tmi ans = 0;\n\teach(t,a[1]) ans += t;\n\treturn ans;\n\t// if (x == 0) return 1;\n\t// mi ret = 0;\n\t// auto a = solve(1,0);\n\t// each(t,a) if (t.f.s == -1) ret += t.s;\n\t// return ret;\n}\n\n// dp[vertex][closest][farthest uncovered]\n\n// for each x: find # candidates such that\n\t// exists bad vertex within x of every vertex\n\nint main() {\n\tsetIO(); re(N);\n\trep(N-1) {\n\t\tints(a,b);\n\t\tadj[a].pb(b), adj[b].pb(a);\n\t}\n\tvmi rec(N);\n\tF0R(x,N) {\n\t\tmax_bad = x;\n\t\trec[x] = all_within(x);\n\t}\n\tdbg(rec);\n\tassert(rec.bk == pow(mi(2),N)-1);\n\t// rec[N] = pow(mi(2),N);\n\tmi ans = 0;\n\tF0R(i,N) {\n\t\tans += (rec[i]-(i?rec[i-1]:0))*(i-1);\n\t\t// dbg(\"NUM WITH\",i,(rec[i]-(i?rec[i-1]:0)));\n\t\t// rec[i]-rec[i-1] -> exists bad within i, but not i-1\n\t\t// rec[i]-rec[i-1]*(i-1)\n\t\t// (rec[i]-rec[i-1])*i;\n\t}\n\tans += N;\n\tdbg(ans);\n\tps(ans/pow(mi(2),N));\n\t// dbg(rec);\n\t// you should actually read the stuff at the bottom\n}\n\n/* stuff you should look for\n\t* int overflow, array bounds\n\t* special cases (n=1?)\n\t* do smth instead of nothing and stay organized\n\t* WRITE STUFF DOWN\n\t* DON'T GET STUCK ON ONE APPROACH\n*/\n"], "input": "", "output": "", "tags": ["combinatorics", "dp", "trees"], "dificulty": "3200", "interactive": false}