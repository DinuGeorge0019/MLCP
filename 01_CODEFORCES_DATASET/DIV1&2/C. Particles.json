{
    "link": "https://codeforces.com//contest/1844/problem/C",
    "problemId": "2009573",
    "problem_idx": "C",
    "shortId": "1844C",
    "contest_number": "1844",
    "problem_submissions": {
        "H": [
            213401907,
            214586788,
            213482546,
            213575600
        ],
        "G": [
            213373899,
            213364706,
            213372549,
            213373590,
            213384164,
            213383282,
            213393963,
            213384409,
            213418393,
            213387981,
            213389348,
            213398375,
            213371949,
            213387199,
            213394165,
            213377360,
            213395667,
            213402058,
            213381593,
            213560869
        ],
        "F2": [
            213365751,
            213352374,
            213361750,
            213357168,
            213362030,
            213488425,
            213373147,
            213364872,
            213370323,
            213418391,
            213375744,
            213375673,
            213376380,
            213391972,
            213386286,
            213388069,
            230986552,
            216997553,
            213356538
        ],
        "F1": [
            213360737,
            213346552,
            213355844,
            213353769,
            213356474,
            213367301,
            213365016,
            213370233,
            213418390,
            213370693,
            213375568,
            213369192,
            213377984,
            213354083,
            213383020,
            213393303,
            213372669,
            213376461,
            213401679,
            213346392
        ],
        "E": [
            213337513,
            213326176,
            213327168,
            213328291,
            213335991,
            213344387,
            213331287,
            213347379,
            213418389,
            213352955,
            213345144,
            213334554,
            213382252,
            213336241,
            213360028,
            213342150,
            213401053,
            213350691,
            213367633,
            213327950
        ],
        "D": [
            213318341,
            213311325,
            213318771,
            213314733,
            213318035,
            213321179,
            213319226,
            213340653,
            213317181,
            213324442,
            213316839,
            213340146,
            213326482,
            213318777,
            213944519,
            213330783,
            213332314,
            213324111,
            213326152,
            213309266
        ],
        "C": [
            213311934,
            213315167,
            213312751,
            213311291,
            213312791,
            213313574,
            213311190,
            213319880,
            213418387,
            213328281,
            213316222,
            213310956,
            213328279,
            213320887,
            213311937,
            213944332,
            213316739,
            213317975,
            213317491,
            213320348,
            213316455
        ],
        "B": [
            213305232,
            213307651,
            213304802,
            213304382,
            213303223,
            213306708,
            213313221,
            213310598,
            213305162,
            213310610,
            213305169,
            213311924,
            213315219,
            213307143,
            213944329,
            213309459,
            213321407,
            213309510,
            213312105,
            213303380
        ],
        "A": [
            213298732,
            213301327,
            213298427,
            213298307,
            213298687,
            213299071,
            213298742,
            213299374,
            213298849,
            213300343,
            213298392,
            213301468,
            213298430,
            213298466,
            213944301,
            213301546,
            213298332,
            213298535,
            213305461,
            213298274
        ]
    },
    "name": "C. Particles",
    "statement": "You have discovered n mysterious particles on a line with integer\r\ncharges of c_1,\r\ndots,c_n. You have a device that allows you to perform the following\r\noperation: Choose a particle and remove it from the line. The remaining\r\nparticles will shift to fill in the gap that is created. If there were\r\nparticles with charges x and y directly to the left and right of the\r\nremoved particle, they combine into a single particle of charge x+y. For\r\nexample, if the line of particles had charges of [-3,1,4,-1,5,-9],\r\nperforming the operation on the 4th particle will transform the line\r\ninto [-3,1,9,-9]. If we then use the device on the 1st particle in this\r\nnew line, the line will turn into [1,9,-9]. You will perform operations\r\nuntil there is only one particle left. What is the maximum charge of\r\nthis remaining particle that you can obtain?\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include<cmath>\n#include<cstring>\n#include<cstdio>\n#include<cstdlib>\n#include<vector>\n#include<iomanip>\n#include<ctime>\n#include<set>\n#include<map>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<cassert>\n#define sqr(x) ((x)*(x))\n#define fz1(i,n) for ((i)=1;(i)<=(n);(i)++)\n#define fd1(i,n) for ((i)=(n);(i)>=1;(i)--)\n#define fz0g(i,n) for ((i)=0;(i)<=(n);(i)++)\n#define fd0g(i,n) for ((i)=(n);(i)>=0;(i)--)\n#define fz0k(i,n) for ((i)=0;(i)<(n);(i)++)\n#define fd0k(i,n) for ((i)=(((long long)(n))-1);(i)>=0;(i)--)\n#define fz(i,x,y) for ((i)=(x);(i)<=(y);(i)++)\n#define fd(i,y,x) for ((i)=(y);(i)>=(x);(i)--)\n#define fzin fz1(i,n)\n#define fzim fz1(i,m)\n#define fzjn fz1(j,n)\n#define fzjm fz1(j,m)\n#define ff(c,itr) for (__typeof((c).begin()) itr=(c).begin();itr!=(c).end();++itr)\n#define pb push_back\n#define mk make_pair\n#define rdst(st,len){static char ss[len];scanf(\" %s\",ss);(st)=ss;}\n#define spln(i,n) (i==n?'\\n':' ')\n#define fac_init(n){fac[0]=fac[1]=inv[1]=fi[0]=fi[1]=1;fz(i,2,n){fac[i]=1ll*fac[i-1]*i%mod;inv[i]=1ll*(mod-mod/i)*inv[mod%i]%mod;fi[i]=1ll*fi[i-1]*inv[i]%mod;}}\nusing namespace std;\ntypedef long long i64;\ntypedef long double f80;\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\n//typedef __int128 i128;\n//typedef unsigned __int128 u128;\n#ifndef ONLINE_JUDGE\n\tFILE *___=freopen(\"1.in\",\"r\",stdin);\n#endif\ninline void read(int &x)\n{\n\tchar c;int f=1;\n\twhile(!isdigit(c=getchar()))if(c=='-')f=-1;\n\tx=(c&15);while(isdigit(c=getchar()))x=(x<<1)+(x<<3)+(c&15);\n\tx*=f;\n}\nint n,m,i,j,a[200005];\ni64 ans;\nvoid solve()\n{\n\tread(n);fz1(i,n)read(a[i]);\n\tans=-0x3f3f3f3f3f3f3f3fll;fz1(i,n)ans=max(ans,1ll*a[i]);\n\ti64 sum=0;bool flg=0;\n\tfor(i=1;i<=n;i+=2)if(a[i]>=0){\n\t\tflg=1;sum+=a[i];\n\t}\n\tif(flg) ans=max(ans,sum);\n\tsum=flg=0;\n\tfor(i=2;i<=n;i+=2)if(a[i]>=0){\n\t\tflg=1;sum+=a[i];\n\t}\n\tif(flg) ans=max(ans,sum);\n\tprintf(\"%lld\\n\",ans);\n}\nint main()\n{\n\tint t;read(t);\n\twhile(t--)solve();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\C. Particles.json",
    "editorial_link": "https://codeforces.com//blog/entry/118128",
    "editorial": "Consider the set of even-indexed particles and the set of odd-indexed\r\nparticles. Observe that particles can only ever combine with other\r\nparticles from the same set. It follows that the answer is at most On\r\nthe other hand, this bound is almost always obtainable. We can first\r\nperform the operation on all negatively charged particles in the same\r\nset as the desired final particle, then perform the operation on all the\r\nparticles from the opposite set. There is a corner case where all\r\nparticles are negative, where the answer is just .The time complexity is\r\n.\r\n",
    "hint": [
        "Hint 1 The answer is the sum of some subset of . Think about which subsets are obtainable.",
        "Hint 2 Consider the set of even-indexed particles and the set of odd-indexed particles."
    ]
}