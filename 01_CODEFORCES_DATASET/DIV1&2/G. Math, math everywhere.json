{
    "link": "https://codeforces.com//contest/765/problem/G",
    "problemId": "93903",
    "problem_idx": "G",
    "shortId": "765G",
    "contest_number": "765",
    "problem_submissions": {
        "F": [
            24663045,
            24662127,
            24676770,
            24660358,
            24667152,
            24667397,
            24662544,
            24672838,
            24672753,
            24667598,
            31935479,
            24716746,
            24682448,
            24679841,
            24679801,
            24670904,
            24670698,
            24670489
        ],
        "E": [
            24655066,
            24654207,
            24663627,
            24664513,
            24664094,
            24658430,
            24660515,
            24666458,
            24658142,
            24662259,
            24662493,
            24655583,
            24656953,
            24655759,
            24661672,
            24653196,
            24657812,
            24658375,
            24656880
        ],
        "D": [
            24651389,
            24649417,
            24662180,
            24649659,
            24650176,
            24654581,
            24653214,
            24651939,
            24652955,
            24653924,
            24658681,
            24649453,
            24651451,
            24650652,
            24650490,
            24649885,
            24654333,
            24652778,
            24651423
        ],
        "C": [
            24648852,
            24646235,
            24650994,
            24645410,
            24646069,
            24647071,
            24647842,
            24648558,
            24647605,
            24648623,
            24647741,
            24647343,
            24648346,
            24646116,
            24646007,
            24646516,
            24646082,
            24647004,
            24651850
        ],
        "B": [
            24646782,
            24644999,
            24653327,
            24644551,
            24644873,
            24645624,
            24645777,
            24646431,
            24646046,
            24646603,
            24645747,
            24645801,
            24644851,
            24645211,
            24644761,
            24644995,
            24644787,
            24645473,
            24645892
        ],
        "A": [
            24645504,
            24644450,
            24647516,
            24644412,
            24644455,
            24644858,
            24644550,
            24644940,
            24644763,
            24644751,
            24644918,
            24644439,
            24644463,
            24644604,
            24644437,
            24644462,
            24644460,
            24644469,
            24645016
        ],
        "G": [
            24665280,
            24660267
        ]
    },
    "name": "G. Math, math everywhere",
    "statement": "You are given a binary string and an integer . Find the number of\r\nintegers , , such that for all , , ..., Print the answer modulo .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  for (auto it = d.b; it != d.e; ++it) \n    *this << \", \\0[\" + 3 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n\n#define imie(x) \"[\" << #x \": \" << (x) << \"] \"\n\nconst int nax=500*1007;\nconst long long inf=(long long)1000*1000*1000*1000*1000*1000;\nconst long long mod=1000*1000*1000+7;\nconst long long jed=1;\n\nconst int vax=1007;\nconst int sax=43;\n\nint s;\nchar wcz[nax];\nint n;\n\nint g;\n\nlong long wej;\n\nvector < long long > dos[vax];\n\nlong long kom[vax][vax];\n\npair <long long, long long> tab[nax];\n\nlong long dp[nax][sax];\nlong long wez[sax];\n\nlong long wyn;\n\nlong long potuj(long long a, long long b)\n{\n\tlong long ret=1;\n\twhile(b)\n\t{\n\t\tif (b&1)\n\t\t{\n\t\t\tret*=a;\n\t\t\tret%=mod;\n\t\t}\n\t\ta*=a;\n\t\ta%=mod;\n\t\tb/=2;\n\t}\n\treturn ret;\n}\n\ninline int test(const long long &a, const int &b)\n{\n\treturn (a&(jed<<b))>0;\n}\n\nvoid dodaj(long long &a, long long b)\n{\n\ta+=b;\n\tif (a>=mod)\n\t\ta-=mod;\n\tif (a>=mod)\n\t\ta%=mod;\n}\n\nmap <long long,long long> mapa[sax];\n\nlong long licz(int v, long long mas)\n{\n\tif (v==g)\n\t{\n\t\t//debug() << v << \" \" << mas << \" : \" << dp[v][];\n\t\treturn wez[__builtin_popcountll(mas^wej)];\n\t}\n\tif (mapa[v].count(mas))\n\t\treturn mapa[v][mas];\n\tlong long ret=0;\n\tfor (int i=0; i<dos[v].size(); i++)\n\t\tdodaj(ret, licz(v+1, mas|dos[v][i]));\n\tdebug() << v << \" \" << mas << \" : \" << ret;\n\tmapa[v][mas]=ret;\n\treturn ret;\n}\n\nint main()\n{\n\tfor (int i=0; i<vax; i++)\n\t{\n\t\tkom[i][0]=1;\n\t\tfor (int j=1; j<=i; j++)\n\t\t\tkom[i][j]=(kom[i-1][j]+kom[i-1][j-1])%mod;\n\t}\n\tscanf(\"%s\", wcz);\n\ts=strlen(wcz);\n\tfor (int i=0; i<s; i++)\n\t\tif (wcz[i]=='0')\n\t\t\twej|=(jed<<i);\n\tscanf(\"%d\", &n);\n\tfor (int i=1; i<=n; i++)\n\t\tscanf(\"%lld%lld\", &tab[i].first, &tab[i].second);\n\tsort(tab+1, tab+1+n);\n\tg=n+1;\n\tfor (int i=1; i<=n; i++)\n\t{\n\t\tif (tab[i].first>s)\n\t\t{\n\t\t\tg=min(g, i);\n\t\t\tcontinue;\n\t\t}\n\t\tfor (int j=0; j<tab[i].first; j++)\n\t\t{\n\t\t\tint ok=1;\n\t\t\tlong long daj=0;\n\t\t\tfor (int l=j; l<s; l+=tab[i].first)\n\t\t\t{\n\t\t\t\tif (!test(wej, l))\n\t\t\t\t\tok=0;\n\t\t\t\tdaj|=(jed<<l);\n\t\t\t}\n\t\t\tif (!ok)\n\t\t\t\tcontinue;\n\t\t\tdos[i].push_back(daj);\n\t\t}\n\t}\n\tfor (int i=1; i<=n; i++)\n\t\tdebug() << i << \" \" << dos[i];\n\tdp[n+1][0]=1;\n\tfor (int i=n+1; i>g; i--)\n\t{\n\t\tfor (int j=0; j<=s; j++)\n\t\t{\n\t\t\tdodaj(dp[i-1][j+1], dp[i][j]);\n\t\t\tdodaj(dp[i-1][j], dp[i][j]*(tab[i-1].first-s+j));\n\t\t}\n\t\tdebug() << i << range(dp[i], dp[i]+1+s);\n\t}\n\tdebug() << g << range(dp[g], dp[g]+1+s);\n\t//for (int i=s; i; i--)\n\t//\tdodaj(dp[g][i], dp[g][i-1]);\n\tint og=__builtin_popcountll(wej);\n\tfor (int i=0; i<=og; i++)\n\t{\n\t\tfor (int j=i; j<=og; j++)\n\t\t{\n\t\t\tlong long x=1;\n\t\t\tfor (int l=1; l<=j; l++)\n\t\t\t\tx=(x*l)%mod;\n\t\t\tdodaj(wez[i], ((dp[g][j]*x)%mod)*kom[og-i][j-i]);\n\t\t}\n\t}\n\twyn=licz(1, 0);\n\tfor (int i=1; i<=n; i++)\n\t\twyn=(wyn*potuj(tab[i].first, tab[i].second-1))%mod;\n\tprintf(\"%lld\\n\", wyn);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "math",
        "meet-in-the-middle",
        "number theory"
    ],
    "dificulty": "3200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\G. Math, math everywhere.json",
    "editorial_link": "https://codeforces.com//blog/entry/50456",
    "editorial": "First I\u00e2\u0080\u0099ll describe our original approach to this problem, and then some\r\nissues we encountered after the round finished.Suppose that . If we have\r\n, then the string must look like , that is, all even positions 0, 2, 4,\r\n... will have 0\u00e2\u0080\u0099s (for all others, we can\u00e2\u0080\u0099t say), and if , then looks\r\nlike . Similarly, knowing the remainder of modulo a prime in\r\nfactorization of implies that there are zeros in with positions apart.\r\nIf we fix all remainder modulo , ..., , then the string will be\r\ndetermined unambigiously. Notice that after fixing the modulos, there\r\nare still possible \u00e2\u0080\u0099s between and ; we will simply multiply the answer\r\nby in the end.At this point we have a brute-force solution: try all\r\nvalues for remainders, count how many of the values give the string .\r\nThis is of course too slow, but we can make a few optimizations: Make a\r\nbrute-force into a DP by introducing memoization. We will count the\r\nnumber of ways to obtain each partial string after fixing first\r\nremainders. Of course, we don\u00e2\u0080\u0099t have to store all masks, but just the\r\nreachable ones. Once , each choice of remainder either places a single\r\nzero into a string, or doesn\u00e2\u0080\u0099t change anything. At this point we are not\r\ninterested in the full mask, but rather in the number of \"unsatisfied\"\r\nzeros of initial string . Each transition either satisfies one zero, or\r\ndoesn\u00e2\u0080\u0099t change anything; the number of transitions of each kind is easy\r\nto count.We will do a full memoization DP for , and continue with a\r\ncompressed DP once . The second part can be done in time and memory. The\r\ncomplexity of the first part depends on the total number of states in\r\nthe memoization DP.Turns out this number can be much larger than we\r\nanticipated on certain tests, for instance, primes starting from 5 or 7.\r\nOn these cases, all our model solutions received time out. Such tests\r\ndidn\u00e2\u0080\u0099t appear in the original test set, of course.[user:KAN] and myself\r\ntried to improve the solution. The idea behind our optimization is that\r\nonce , several central bits of the mask behave just like the\r\n\"unsatisfied\" bits in the large-prime part of the original solution: if\r\nwe choose to cover them, it will be the single bit we cover. Thus we can\r\ndo a \"hybrid\" DP that has parameters (number of unsatisfied bits in the\r\nmiddle, mask of all the rest bits). [user:KAN]\u00e2\u0080\u0099s solution used \"naive\"\r\nmask DP for , switched to static array for , and then proceeded to large\r\nprimes as before. I tried to write a self-adaptive solution that handles\r\nall ranges of primes pretty much the same way. [user:KAN] was more\r\nsuccessful: his solution works in seconds on all cases we could\r\ncounstruct; my solution works in seconds and uses a lot of excess\r\nmemory.[user:KAN]\u00e2\u0080\u0099s solution: [submission:24707930], my solution:\r\n[submission:24707929].\r\n"
}