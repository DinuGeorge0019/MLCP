{
    "link": "https://codeforces.com//contest/914/problem/F",
    "problemId": "148491",
    "problem_idx": "F",
    "shortId": "914F",
    "contest_number": "914",
    "problem_submissions": {
        "E": [
            34383567,
            34380688,
            34384037,
            34379971,
            34385853,
            34381341,
            34377061,
            34385471,
            34377068,
            34383097,
            34381216,
            34377930,
            34393845,
            34378590,
            34386380,
            34381164
        ],
        "C": [
            34382803,
            34382793,
            34364057,
            34365651,
            34386486,
            34396063,
            34363721,
            34365741,
            34364774,
            34366702,
            34391506,
            34365007,
            34367351,
            34382826,
            34374119,
            34384464,
            34372151,
            34370073
        ],
        "G": [
            34376415,
            34377275,
            34377412,
            34382707,
            34380896,
            34376017,
            34382091,
            34379406,
            34377065,
            34381510,
            34378767,
            34384171,
            34382760,
            34380461,
            34386445,
            34380566,
            34388276,
            34376347,
            34387872,
            34388821
        ],
        "F": [
            34372924,
            34364964,
            34388114,
            34388527,
            34377465,
            34383969,
            34384849,
            34382075,
            34408585,
            34427444,
            34427415,
            34427411,
            34427369,
            34426234,
            34426219,
            34426204,
            34426181,
            34395428,
            34395305,
            34393742,
            34393096,
            34392685,
            34377829,
            34381405,
            34389663,
            34384026
        ],
        "D": [
            34370762,
            34371655,
            34369773,
            34368591,
            34374188,
            34367037,
            34369044,
            34372797,
            34370541,
            34371781,
            34370647,
            34370823,
            34372317,
            34370221,
            34393812,
            34371853,
            34371865,
            34370930,
            34372046,
            34375276,
            34374115
        ],
        "B": [
            34360667,
            34360722,
            34374939,
            34362210,
            34374843,
            34362983,
            34377719,
            34363222,
            34359679,
            34359608,
            34366166,
            34384598,
            34360320,
            34360372,
            34361647,
            34362020,
            34368128,
            34362137,
            34362752,
            34361533
        ],
        "A": [
            34357760,
            34358042,
            34374626,
            34357833,
            34358764,
            34358376,
            34358219,
            34358285,
            34357836,
            34357713,
            34358130,
            34358072,
            34357931,
            34391604,
            34358333,
            34358022,
            34358632,
            34358260,
            34359117,
            34357845
        ],
        "H": [
            34391572,
            34389095
        ]
    },
    "name": "F. Substrings in a String",
    "statement": "Given a string , process queries, each having one of the following\r\nforms: Change the -th character in the string to . Consider the\r\nsubstring of starting at position and ending at position . Output the\r\nnumber of times occurs as a substring in it.\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<set>\n#include<cmath>\n#include<bitset>\n#include<iostream>\n#include<assert.h>\n#include<queue>\n#include<string>\n#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)\n#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\nusing namespace std;\ntypedef long long LL;\nconst int N=100005;\nchar s[N];\nchar t[N];\nint n,Q;\nbitset<N>f[27];\nint main(){\n\tscanf(\"%s\",s+1);\n\tn=strlen(s+1);\n\trep(i,1,n)f[s[i]-'a'][i]=1;\n\tscanf(\"%d\",&Q);\n\twhile(Q--){\n\t\tint ty;scanf(\"%d\",&ty);\n\t\tif(ty==1){\n\t\t\tint x;char ss[4];scanf(\"%d\",&x);scanf(\"%s\",ss);\n\t\t\tf[s[x]-'a'][x]=0;\n\t\t\ts[x]=ss[0];\n\t\t\tf[s[x]-'a'][x]=1;\n\t\t}\n\t\telse{\n\t\t\tint l,r;scanf(\"%d%d\",&l,&r);\n\t\t\tscanf(\"%s\",t+1);\n\t\t\tint len=strlen(t+1);\n\t\t\tr-=len-1;\n\t\t\tif(r<l){\n\t\t\t\tputs(\"0\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbitset<N> gt;gt.reset();gt=~gt;\n\t\t\trep(i,1,len)gt&=(f[t[i]-'a']>>(i-1));\n\n\t\t\tgt>>=l;\n\t\t\tint ans=gt.count();\n\t\t\tgt>>=(r-l+1);\n\t\t\tans-=gt.count();\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\n\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "data structures",
        "string suffix structures",
        "strings"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\F. Substrings in a String.json",
    "editorial_link": "https://codeforces.com//blog/entry/57250",
    "editorial": "Divide the given string into blocks of size and use any suffix\nstructure for each block. Complexity: .To update a character in the\nstring, rebuild a suffix structure for that block. This takes per\nupdate.We answer queries as follows. Remember that it s given that the\ntotal length of all the query strings is at most .If the size of the\nquery string is greater than , then the number of such strings will be\nat most and hence we can directly use KMP in the string for the given\nrange for all such strings. Overall Complexity: If the size of the query\nstring is less than , we proceed as follows. For the occurrences of\nquery string within a block, we can calculate them using the suffix\nstructures for each block. This can be done in for each block, for the\ngiven range. For the occurrences that lie across two (adjacent) blocks,\nwe only need to consider a string of , we can simply use KMP for finding\nsuch occurrences. We need to choose the string carefully to avoid over\ncounting (for more details, see the author s solution). Its complexity\nwill be . For left and right blocks of the query range, we can again use\nKMP. The complexity would be . The overall complexity for the small\nquery strings is therefore . Hence, complexity over all such string\nwould be . Hence, the overall complexity is . So choose any optimal .\nAny from to will fit in the time limit. Expected Complexity:\n",
    "hint": []
}