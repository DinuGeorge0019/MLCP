{"link": "https://codeforces.com//contest/757/problem/D", "problemId": "88531", "problem_idx": "D", "shortId": "757D", "contest_number": "757", "problem_submissions": {"F": [32228238, 32220657, 32216667, 32216552, 30180757, 24068926, 24068888, 24068798, 24068629, 24068020, 23762892, 23760952, 23776891, 23764568, 23762696, 23763271, 23761197, 23764419, 23761836, 23846483, 23765505, 23762407, 23766587, 23766646, 23767253, 23767207, 23767008, 23767913, 23761400], "G": [23782048, 23772049, 23771661, 23771463], "D": [23749937, 23749579, 23748811, 23749322, 23755716, 23754682, 23757768, 23754805, 23755156, 23752956, 23758947, 23752935, 23758202, 23754949, 23757044, 23760439, 23761231, 23760141, 23748525], "C": [23747486, 23744300, 23743556, 23745034, 23746542, 23748856, 23755316, 23748726, 23749207, 23747491, 23752146, 23747894, 23750245, 23746080, 23751561, 23747227, 23747661, 23744168], "E": [23746626, 23754640, 23751784, 23751547, 23750068, 23759139, 23752714, 23760482, 23759055, 23761627, 23755834, 23761719, 23760932, 23763128, 23759765, 23757483, 23764011, 23741658, 23752894], "B": [23740589, 23741483, 23740480, 23740520, 23742781, 23741337, 23746337, 23742823, 23741509, 23741548, 23745601, 23743745, 23742092, 23740912, 23741886, 23742317, 23743047, 23746203, 23741743], "A": [23740335, 23739759, 23739764, 23739789, 23739801, 23739786, 23739911, 23740392, 23739871, 23740001, 23740128, 23739744, 23740216, 23765002, 23754212, 23766705, 23742440, 23748544, 23739773]}, "name": "D. Felicity's Big Secret Revealed", "statement": "The gym leaders were fascinated by the evolutions which took place at\r\nFelicity camp. So, they were curious to know about the secret behind\r\nevolving Pokemon. The organizers of the camp gave the gym leaders a\r\nPokeBlock, a sequence of ingredients. Each ingredient can be of type or\r\n. Now the organizers told the gym leaders that to evolve a Pokemon of\r\ntype (), they need to make a valid set of cuts on the PokeBlock to get\r\nsmaller blocks.Suppose the given PokeBlock sequence is . You have a\r\nchoice of making cuts at places, i.e., Before , between and , between\r\nand , ..., between and , and after .The choices of making cuts are as\r\nfollows (where a denotes a possible cut):Consider a sequence of cuts.\r\nNow each pair of consecutive cuts will contain a binary string between\r\nthem, formed from the ingredient types. The ingredients before the first\r\ncut and after the last cut are wasted, which is to say they are not\r\nconsidered. So there will be exactly such binary substrings. Every\r\nsubstring can be read as a binary number. Let be the maximum number out\r\nof the obtained numbers. If all the obtained numbers are positive and\r\nthe set of the obtained numbers contains all integers from to , then\r\nthis set of cuts is said to be a valid set of cuts.For example, suppose\r\nthe given PokeBlock sequence is and we made cuts in the following way:So\r\nthe binary substrings obtained are: , , and , which correspond to the\r\nnumbers , , and respectively. Here , as it is the maximum value among\r\nthe obtained numbers. And all the obtained numbers are positive and we\r\nhave obtained all integers from to . Hence this set of cuts is a valid\r\nset of cuts.A Pokemon of type will evolve only if the PokeBlock is cut\r\nusing a valid set of cuts. There can be many valid sets of the same\r\nsize. Two valid sets of cuts are considered different if there is a cut\r\nin one set which is not there in the other set.Let denote the number of\r\nvalid sets of cuts. Find the value of . Since the value of can be very\r\nlarge, output modulo .\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int md = 1000000007;\n\ninline void add(int &a, int b) {\n  a += b;\n  if (a >= md) {\n    a -= md;\n  }\n}\n\nconst int NUM = 20;\nconst int N = (1 << NUM) + 10;\nconst int LEN = 79;\n\nint f[LEN][N];\nchar s[LEN];\n\nint main() {\n  int len;\n  scanf(\"%d\", &len);\n  scanf(\"%s\", s);\n  for (int i = 0; i < len; i++) {\n    f[i][0] = 1;\n    for (int t = 0; t < (1 << NUM); t++) {\n      if (f[i][t] == 0) {\n        continue;\n      }\n      int x = 0;\n      for (int j = i; j < len; j++) {\n        x = x * 2 + s[j] - '0';\n        if (x > NUM) {\n          break;\n        }\n        if (x > 0) {\n          add(f[j + 1][t | (1 << (x - 1))], f[i][t]);\n        }\n      }\n    }\n  }\n  int ans = 0;\n  for (int i = 0; i <= len; i++) {\n    int r = 1;\n    while (r < (1 << NUM)) {\n      add(ans, f[i][r]);\n      r = r * 2 + 1;\n    }\n  }\n  printf(\"%d\\n\", ans);\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["bitmasks", "dp"], "dificulty": "2200", "interactive": false}