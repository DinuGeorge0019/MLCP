{
    "link": "https://codeforces.com//contest/1896/problem/E",
    "problemId": "2346409",
    "problem_idx": "E",
    "shortId": "1896E",
    "contest_number": "1896",
    "problem_submissions": {
        "H2": [
            234305435,
            234294276,
            234316807,
            234293989,
            234307453,
            234313145,
            234308430,
            234674727,
            234674461,
            234674412,
            234348461,
            234317754,
            234317500
        ],
        "H1": [
            234300435,
            234288752,
            234294076,
            234304469,
            234296832,
            234303366,
            234305063,
            234305336,
            234301810,
            234292381
        ],
        "G": [
            234290728,
            234312960,
            234419627,
            234295328,
            234299457,
            234326268,
            234302972,
            234306994,
            234344999,
            234302897,
            234304455,
            234306035,
            234296895,
            234525586
        ],
        "F": [
            234279344,
            234262280,
            234278356,
            234281909,
            234284183,
            234288595,
            234278118,
            234284621,
            234280975,
            234283777,
            234307968,
            234293096,
            234293697,
            234294644,
            234304686,
            234282511,
            234279944,
            234277321
        ],
        "E": [
            234266080,
            234275828,
            234270895,
            234263950,
            234269369,
            234263464,
            234267763,
            234270201,
            234272007,
            234268761,
            234270245,
            234285745,
            234275911,
            234277731,
            234273316,
            234269329,
            234260178,
            234268619,
            234263914
        ],
        "D": [
            234260515,
            234269507,
            234266479,
            234257220,
            234264143,
            234256547,
            234261136,
            234260603,
            234265661,
            234261124,
            234261787,
            234269263,
            234266704,
            234265834,
            234268166,
            234280921,
            234253907,
            234259650,
            234255630
        ],
        "C": [
            234253899,
            234266056,
            234253267,
            234251911,
            234261130,
            234253006,
            234255721,
            234254779,
            234258245,
            234287578,
            234255535,
            234262815,
            234255118,
            234261416,
            234262126,
            234255695,
            234249255,
            234253498,
            234251351
        ],
        "B": [
            234249421,
            234247262,
            234248984,
            234247486,
            234250283,
            234247863,
            234248979,
            234248837,
            234302894,
            234248804,
            234248842,
            234247845,
            234248167,
            234249751,
            234253337,
            234249856,
            234245662,
            234248853,
            234246737
        ],
        "A": [
            234245828,
            234244872,
            234245833,
            234244939,
            234247553,
            234244853,
            234245867,
            234245696,
            234303768,
            234246110,
            234245020,
            234245161,
            234244947,
            234245703,
            234249430,
            234244871,
            234244771,
            234245709,
            234244767
        ]
    },
    "name": "E. Permutation Sorting",
    "statement": "You are given a permutation^\r\ndagger a of size n. We call an index i if a_i=i is satisfied. After each\r\nsecond, we rotate all indices that are not good to the right by one\r\nposition. Formally, Let s_1,s_2,\r\nldots,s_k be the indices of a that are good in increasing order. That\r\nis, s_j < s_{j+1} and if index i is not good, then there exists j such\r\nthat s_j=i. For each i from 1 to k, we assign a_{s_{(i\r\n",
    "solutions": [
        "//~ while (clock()<=69*CLOCKS_PER_SEC)\n//~ #pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"O3\")\n//~ #pragma GCC target (\"avx2\")\n//~ #pragma GCC optimize(\"Ofast\")\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//~ #pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T>\nusing ordered_set =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define sim template < class c\n#define ris return * this\n#define dor > debug & operator <<\n#define eni(x) sim > typename \\\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\nsim > struct rge { c b, e; };\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\nsim > char dud(...);\nstruct debug {\n#ifdef LOCAL\n~debug() { cerr << endl; }\neni(!=) cerr << boolalpha << i; ris; }\neni(==) ris << range(begin(i), end(i)); }\nsim, class b dor(pair < b, c > d) {\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\n}\nsim dor(rge<c> d) {\n  *this << \"[\";\n  for (auto it = d.b; it != d.e; ++it)\n    *this << \", \" + 2 * (it == d.b) << *it;\n  ris << \"]\";\n}\n#else\nsim dor(const c&) { ris; }\n#endif\n};\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\n\n#define shandom_ruffle random_shuffle\n\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing vi=vector<int>;\nusing vll=vector<ll>;\nconst int nax=2000*1007;\n\nint n;\nint tab[nax];\nint gdz[nax];\n\nint wyn[nax];\n\nordered_set<int> setel;\n\nint fix(int v)\n{\n\tif (v>n)\n\t\tv-=n;\n\treturn v;\n}\n\nvoid test()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i=1; i<=n; i++)\n\t{\n\t\tgdz[i]=0;\n\t\tscanf(\"%d\", &tab[i]);\n\t\ttab[n+i]=tab[i];\n\t}\n\tsetel.clear();\n\t\n\tfor (int i=1; i<=2*n; i++)\n\t{\n\t\tif (gdz[tab[i]])\n\t\t\tsetel.erase(gdz[tab[i]]);\n\t\tgdz[tab[i]]=i;\n\t\tif (gdz[fix(i)])\n\t\t{\n\t\t\t//~ debug() << i << \" \" << gdz[fix(i)] << \" \" << setel;\n\t\t\twyn[i]=(i-gdz[fix(i)])-((int)setel.size()-(int)setel.order_of_key(gdz[fix(i)]));\n\t\t\tsetel.insert(gdz[fix(i)]);\n\t\t}\n\t}\n\tfor (int i=1; i<=n; i++)\n\t\tprintf(\"%d \", wyn[n+i]);\n\tprintf(\"\\n\");\n}\n\nint main()\n{\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--)\n\t\ttest();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "sortings"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\E. Permutation Sorting.json",
    "editorial_link": "https://codeforces.com//blog/entry/122172",
    "editorial": "SolutionFor convenience, we will assume that the array is cyclic, so .\r\nThe answer for each index from to is (defined in hint 1) minus the\r\nnumber of indices where and (or to handle cyclic case when ). This is\r\nbecause the value that we are calculating is equal to the number of\r\npositions that will skip during the rotation as the index is already\r\ngood.To calculate the above value, it is convenient to define an array\r\nof size where for all between to , and for all between to to handle\r\ncyclicity. We will loop from to , and do a point increment to position\r\nif , otherwise, do a point increment to position . Then, to get the\r\nanswer for index , we do a range sum query from to . Point increment and\r\nrange sum query can be done using a binary indexed tree in time per\r\nquery/update. Hence, the problem can be solved in time.\r\n"
}