{
    "link": "https://codeforces.com//contest/1787/problem/E",
    "problemId": "1756748",
    "problem_idx": "E",
    "shortId": "1787E",
    "contest_number": "1787",
    "problem_submissions": {
        "I": [
            197474547,
            191162667,
            191147076,
            191159474,
            191182912,
            191180384,
            191173195,
            191158380,
            191159985,
            191279548,
            191153893,
            191147979,
            191219667,
            191170332
        ],
        "G": [
            191152988,
            191152586,
            191141714,
            191145745,
            191143792,
            191147352,
            191147519,
            191158898,
            191159891,
            191160943,
            191153438,
            191155040,
            191144883,
            191170407,
            191170114,
            191152547
        ],
        "F": [
            191146155,
            191132842,
            191134802,
            191136901,
            191128020,
            191139771,
            191139131,
            191147114,
            191152778,
            191144574,
            191147232,
            191145790,
            191135060,
            191146379,
            191144901,
            191136231,
            191134824,
            191143478,
            191143747,
            191145614
        ],
        "E": [
            191137894,
            191126319,
            191169100,
            191131011,
            191146734,
            191132024,
            191134009,
            191128652,
            191130752,
            191135324,
            191128162,
            191137413,
            191115850,
            191140133,
            191140025,
            191121022,
            191131209,
            191138279,
            191133339,
            191131279
        ],
        "D": [
            191132976,
            191120161,
            191124203,
            191123443,
            191137713,
            191128946,
            191128273,
            191122289,
            191126977,
            191131112,
            191124722,
            191125562,
            191128102,
            191135389,
            191135592,
            191131056,
            191123065,
            191127620,
            191126290,
            191127861
        ],
        "C": [
            191125268,
            191113889,
            191117948,
            191115059,
            191116269,
            191118107,
            191120001,
            191140669,
            191115010,
            191125411,
            191117705,
            191118998,
            191121343,
            191121072,
            191117056,
            191128472,
            191115952,
            191117237,
            191118951,
            191120349
        ],
        "B": [
            191121944,
            191109607,
            191111770,
            191108995,
            191110155,
            191109908,
            191113645,
            191109634,
            191109874,
            191121868,
            191110598,
            191110575,
            191117560,
            191109576,
            191110819,
            191112301,
            191110138,
            191111938,
            191108264,
            191111930
        ],
        "A": [
            191118000,
            191106352,
            191108603,
            191106770,
            191106814,
            191106284,
            191107425,
            191105859,
            191106157,
            191118169,
            191107747,
            191106297,
            191105730,
            191106101,
            191107070,
            191108687,
            191105956,
            191107701,
            191105869,
            191106761
        ],
        "H": [
            191116884,
            191151161,
            191155682,
            191157247,
            191138915,
            191146913,
            191162451,
            191161022,
            191128443,
            191126961,
            191251422,
            191150263,
            191149572,
            191156328
        ]
    },
    "name": "E. The Harmonization of XOR",
    "statement": "You are given an array of exactly n numbers [1,2,3,\r\nldots,n] along with integers k and x.Partition the array in exactly k\r\nnon-empty disjoint subsequences such that the bitwise XOR of all numbers\r\nin each subsequence is x, and each number is in exactly one subsequence.\r\nNotice that there are no constraints on the length of each subsequence.A\r\nsequence a is a subsequence of a sequence b if a can be obtained from b\r\nby the deletion of several (possibly, zero or all) elements.For example,\r\nfor n = 15, k = 6, x = 7, the following scheme is valid: [6,10,11], 6\r\noplus 10\r\noplus 11 = 7, [5,12,14], 5\r\noplus 12\r\noplus 14 = 7, [3,9,13], 3\r\noplus 9\r\noplus 13 = 7, [1,2,4], 1\r\noplus 2\r\noplus 4 = 7, [8,15], 8\r\noplus 15 = 7, [7], 7 = 7, where\r\noplus represents the bitwise XOR operation.The following scheme is\r\ninvalid, since 8, 15 do not appear: [6,10,11], 6\r\noplus 10\r\noplus 11 = 7, [5,12,14], 5\r\noplus 12\r\noplus 14 = 7, [3,9,13], 3\r\noplus 9\r\noplus 13 = 7, [1,2,4], 1\r\noplus 2\r\noplus 4 = 7, [7], 7 = 7. The following scheme is invalid, since 3\r\nappears twice, and 1, 2 do not appear: [6,10,11], 6\r\noplus 10\r\noplus 11 = 7, [5,12,14], 5\r\noplus 12\r\noplus 14 = 7, [3,9,13], 3\r\noplus 9\r\noplus 13 = 7, [3,4], 3\r\noplus 4 = 7, [8,15], 8\r\noplus 15 = 7, [7], 7 = 7.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long;\nusing pi = array<lint, 2>;\n#define sz(v) ((int)(v).size())\n#define all(v) (v).begin(), (v).end()\nconst int MAXN = 200005;\n\nint main() {\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\tcout.tie(0);\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n, k, x;\n\t\tcin >> n >> k >> x;\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tsum ^= i;\n\t\tif (sum != (k % 2 == 0 ? 0 : x)) {\n\t\t\tcout << \"NO\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tvector<int> vis(n + 1);\n\t\tvector<vector<int>> grp;\n\t\tif (x <= n)\n\t\t\tgrp.push_back({x}), vis[x] = 1;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (i == x)\n\t\t\t\tcontinue;\n\t\t\tint j = i ^ x;\n\t\t\tif (j < i)\n\t\t\t\tgrp.push_back({i, j}), vis[i] = vis[j] = 1;\n\t\t}\n\t\t{\n\t\t\tvector<int> vect;\n\t\t\tfor (int i = 1; i <= n; i++) {\n\t\t\t\tif (!vis[i])\n\t\t\t\t\tvect.push_back(i);\n\t\t\t}\n\t\t\tif (sz(vect))\n\t\t\t\tgrp.push_back(vect);\n\t\t}\n\t\tif (sz(grp) < k) {\n\t\t\tcout << \"NO\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tcout << \"YES\\n\";\n\t\tfor (int i = k; i < sz(grp); i++) {\n\t\t\tfor (auto &z : grp[i])\n\t\t\t\tgrp[k - 1].push_back(z);\n\t\t}\n\t\tgrp.resize(k);\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tsort(all(grp[i]));\n\t\t\tcout << sz(grp[i]);\n\t\t\tfor (auto &j : grp[i])\n\t\t\t\tcout << \" \" << j;\n\t\t\tcout << \"\\n\";\n\t\t}\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV1&2\\E. The Harmonization of XOR.json",
    "editorial_link": "https://codeforces.com//blog/entry/112009",
    "editorial": "First, we observe that three subsequences can combine into one, so we\r\nonly need to care about the maximum number of subsequences.Make\r\nsubsequences in the form of as much as possible, leave alone if\r\npossible, and the rest becomes a subsequence. This would be\r\noptimal.Proof:Let be the highest bit of , i.e. the -th bit of is on.Let\r\nbe the number of numbers from to satisfying the -th bit is on.Then the\r\nnumber of subsequences must be smaller than or equal to , since thereâs\r\nat least one -th-bit-on number in each subsequence.These -th-bit-on\r\nnumbers XOR must be smaller than themselves, so we can always obtain\r\nsubsequences.\r\n",
    "hint": []
}