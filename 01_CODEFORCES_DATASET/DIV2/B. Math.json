{
    "link": "https://codeforces.com//contest/1062/problem/B",
    "problemId": "254594",
    "problem_idx": "B",
    "shortId": "1062B",
    "contest_number": "1062",
    "problem_submissions": {
        "E": [
            45734560,
            45726248,
            45732249,
            45733619,
            45730195,
            45731475,
            45731239,
            45726325,
            45734429,
            45732687,
            45728510,
            45736860,
            45736172,
            45733982,
            45737130,
            45738771,
            45733014,
            45736808,
            45722467,
            45738588
        ],
        "D": [
            45726634,
            45730736,
            45724741,
            45725065,
            45723696,
            45724136,
            45725257,
            45730810,
            45727060,
            45726669,
            45731523,
            45727302,
            45728487,
            45722718,
            45726364,
            45726645,
            45723445,
            45727784,
            45736639,
            45727419
        ],
        "C": [
            45721626,
            45717978,
            45722013,
            45722920,
            45725107,
            45723347,
            45723217,
            45731817,
            45722296,
            45725538,
            45721997,
            45722995,
            45721715,
            45726048,
            45722887,
            45716980,
            45725662,
            45723495,
            45730894,
            45720161
        ],
        "B": [
            45719368,
            45728287,
            45719414,
            45719514,
            45718037,
            45718991,
            45720410,
            45716157,
            45718932,
            45720927,
            45719221,
            45719468,
            45718546,
            45719917,
            45718393,
            45721972,
            45719490,
            45718006,
            45726769,
            45717530
        ],
        "A": [
            45714856,
            45714050,
            45715684,
            45718665,
            45717504,
            45716696,
            45714768,
            45714213,
            45714103,
            45715993,
            45714126,
            45714813,
            45714920,
            45732371,
            45714819,
            45723775,
            45732706,
            45719793,
            45724251,
            45714073
        ],
        "F": [
            45751027,
            45989276,
            46585917
        ]
    },
    "name": "B. Math",
    "statement": "JATC’s math teacher always gives the class some interesting math\r\nproblems so that they don’t get bored. Today the problem is as follows.\r\nGiven an integer n, you can perform the following operations zero or\r\nmore times: x: multiplies n by x (where x is an arbitrary positive\r\ninteger). : replaces n with\r\nsqrt{n} (to apply this operation,\r\nsqrt{n} must be an integer). You can perform these operations as many\r\ntimes as you like. What is the minimum value of n, that can be achieved\r\nand what is the minimum number of operations, to achieve that minimum\r\nvalue?Apparently, no one in the class knows the answer to this problem,\r\nmaybe you can help them?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint f(int x) {\n\tif (x == 1) return 0;\n\telse if (x%2 == 1) return f(x+1)+1;\n\telse return 1+f(x/2);\n}\n\nint main () {\n\tint n;\n\tcin >> n;\n\tint op=0;\n\tint ans = 1;\n\tset<int> st;\n\tfor (int i=2;i<=n;++i) {\n\t\tint cnt=0;\n\t\twhile (n%i == 0) {\n\t\t\t++cnt;\n\t\t\tn /= i;\n\t\t}\n\t\tif (!cnt) continue;\n\t\tans *= i;\n\t\tst.insert(cnt);\n\t\tcerr << \"i = \" << i << \" , cnt = \" << cnt << endl;\n\t\t//op = max(op,f(cnt));\n\t}\n\tif (st.size() == 0) {\n\t\tcout << ans << ' ' << 0 << endl;\n\t\treturn 0;\n\t}\n\tif (st.size() == 1) {\n\t\tint x = *st.begin();\n\t\tint p=1;\n\t\tint xx=x;\n\t\twhile (x) {\n\t\t\tx>>=1;\n\t\t\tp<<=1;\n\t\t}\n\t\tint pre=1;\n\t\tif (xx == p/2) p = xx,pre=0;\n\t\tcerr << \"p = \" << p << endl;\n\t\tcout << ans << ' ' << f(p)+pre << endl;\n\t\treturn 0;\n\t}\n\tint x = *(--st.end());\n\tint p=1;\n\tint xx=x;\n\twhile (x) {\n\t\tx>>=1;\n\t\tp<<=1;\n\t}\n\tif (xx == p/2) p = xx;\n\tcout << ans << ' ' << f(p)+1 << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Math.json",
    "editorial_link": "https://codeforces.com/blog/entry/63199",
    "editorial": "By factorizing we get ( is the number of prime factors). Because we\r\ncanât get rid of those prime factors then the smallest is . For each ,\r\nlet be the positive integer so that . Let be . Itâs clear that we have\r\nto apply the \"\" operation at least times, since each time we apply it,\r\nis divided by for all . If for all , then the answer is , obviously.\r\nOtherwise, we need to use the operation \"\" time to make all the equal\r\nand by now the answer is .Complexity:\r\n",
    "hint": []
}