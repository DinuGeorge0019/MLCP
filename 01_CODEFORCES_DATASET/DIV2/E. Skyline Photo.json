{
    "link": "https://codeforces.com//contest/1484/problem/E",
    "problemId": "931268",
    "problem_idx": "E",
    "shortId": "1484E",
    "contest_number": "1484",
    "problem_submissions": {
        "F": [
            110657532,
            110661405,
            110668413,
            110665063,
            110667584,
            110693226,
            110689740,
            110699242,
            110689519,
            110729936
        ],
        "E": [
            110652520,
            110652573,
            110656142,
            110659865,
            110659655,
            110638421,
            110657125,
            110656123,
            110656364,
            110659863,
            110649695,
            110648134,
            110661585,
            110638998,
            110667069,
            110662656,
            110665042,
            110662940,
            110667246,
            110664847
        ],
        "D": [
            110648415,
            110645978,
            110649799,
            110651144,
            110649241,
            110642542,
            110646537,
            110651979,
            110643535,
            110649770,
            110657613,
            110654803,
            110657052,
            110642182,
            110653908,
            110653309,
            110651762,
            110658162,
            110653592,
            110654689
        ],
        "C": [
            110640873,
            110642187,
            110633376,
            110636572,
            110644279,
            110636058,
            110637281,
            110637639,
            110639537,
            110639114,
            110634672,
            110661474,
            110641726,
            110639210,
            110640003,
            110642952,
            110644966,
            110648405,
            110643573,
            110647774
        ],
        "B": [
            110632955,
            110638515,
            110644328,
            110642323,
            110639199,
            110633637,
            110635087,
            110632899,
            110632555,
            110636089,
            110632943,
            110635814,
            110637169,
            110730778,
            110636805,
            110637796,
            110637626,
            110638325,
            110638006,
            110641086
        ],
        "A": [
            110627328,
            110628878,
            110637469,
            110632147,
            110630333,
            110627835,
            110626002,
            110626585,
            110625791,
            110627648,
            110626340,
            110627768,
            110629720,
            110626163,
            110628247,
            110631925,
            110627992,
            110627111,
            110625876,
            110626130
        ]
    },
    "name": "E. Skyline Photo",
    "statement": "Alice is visiting New York City. To make the trip fun, Alice will take\r\nphotos of the city skyline and give the set of photos as a present to\r\nBob. However, she wants to find the set of photos with maximum beauty\r\nand she needs your help. There are n buildings in the city, the i-th of\r\nthem has positive height h_i. All n building heights in the city are\r\ndifferent. In addition, each building has a beauty value b_i. Note that\r\nbeauty can be positive or negative, as there are ugly buildings in the\r\ncity too. A set of photos consists of one or more photos of the\r\nbuildings in the skyline. Each photo includes one or more buildings in\r\nthe skyline that form a contiguous segment of indices. Each building\r\nneeds to be in photo. This means that if a building does not appear in\r\nany photo, or if a building appears in more than one photo, the set of\r\npictures is not valid. The beauty of a photo is equivalent to the beauty\r\nb_i of the shortest building in it. The total beauty of a set of photos\r\nis the sum of the beauty of all photos in it. Help Alice to find the\r\nmaximum beauty a valid set of photos can have.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define R register\n#define N 1290201\n#define ll long long\n\nll V[N],b[N],h[N],Z[N];\nint n,stk[N],top;\nll f[N];\nconst ll inf=-1e16;\n//\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7ef4\u62a4f[i]+min(j+1...i)\u7684\u503c\n\ninline void build(){\n\tfor(R int i=1;i<N;++i) V[i]=inf,Z[i]=0;\n} \n\ninline void pushdown(int x){\n\tif(Z[x]){\n\t\tR int ls=x<<1,rs=ls|1;\n\t\tZ[ls]+=Z[x],Z[rs]+=Z[x],V[ls]+=Z[x],V[rs]+=Z[x],Z[x]=0;\n\t}\n}\n\ninline void update(int x,int l,int r,int a,int b,ll c){\n\tif(l>=a&&r<=b){\n\t\tV[x]+=c;\n\t\tZ[x]+=c;\n\t\treturn;\n\t}\n\tR int mid=(l+r)>>1,ls=x<<1,rs=ls|1;\n\tpushdown(x);\n\tif(a<=mid) update(ls,l,mid,a,b,c);\n\tif(b>mid) update(rs,mid+1,r,a,b,c);\n\tV[x]=std::max(V[ls],V[rs]);\n}\n\ninline void Xg(int x,int l,int r,int pos,ll vv){\n\tif(l==r){\n\t\tV[x]=vv;\n\t\treturn;\n\t}\n\tR int mid=(l+r)>>1,ls=x<<1,rs=ls|1;\n\tpushdown(x);\n\tif(pos<=mid) Xg(ls,l,mid,pos,vv);\n\telse Xg(rs,mid+1,r,pos,vv);\n\tV[x]=std::max(V[ls],V[rs]);\n}\n\ninline ll query(int x,int l,int r,int a,int b){\n\tif(l>=a&&r<=b){\n\t\treturn V[x];\n\t}\n\tR int mid=(l+r)>>1,ls=x<<1,rs=ls|1;\n\tpushdown(x);\n\tR ll ans=inf;\n\tif(a<=mid) ans=std::max(ans,query(ls,l,mid,a,b));\n\tif(b>mid) ans=std::max(ans,query(rs,mid+1,r,a,b));\n\treturn ans;\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tbuild();\n\tfor(R int i=1;i<=n;++i) scanf(\"%lld\",&h[i]);\n\tfor(R int i=1;i<=n;++i) scanf(\"%lld\",&b[i]),f[i]=inf;\n\tf[0]=0;\n\tXg(1,0,n,0,0);\n\tfor(R int i=1;i<=n;++i){\n\t\twhile(top&&h[stk[top]]>h[i]){ //h[i]\u4e92\u4e0d\u76f8\u540c\n\t\t\tupdate(1,0,n,stk[top-1],stk[top]-1,-b[stk[top]]);\n\t\t\t--top;\n\t\t}\n\t\tupdate(1,0,n,stk[top],i-1,b[i]);\n\t\tstk[++top]=i;\n\t\tf[i]=query(1,0,n,0,i-1);\n\t\tXg(1,0,n,i,f[i]);\n\t}\n\tstd::cout<<f[n];\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Skyline Photo.json",
    "editorial_link": "https://codeforces.com//blog/entry/88963",
    "editorial": "We can solve this problem with DP. A trivial O(n2)\n algorithm would look like this: Define dpi\n as the maximum beauty that can be achieved if we have a set of photos of buildings from 1\n to i\n. We can check every possible splitting point j?i\n for the rightmost picture of the set, and keep the biggest answer. dpi=maxj?i(dpj?1+bj..i)\n.\n\nNow we just need to optimize this solution. Assume we are calculating dpi\n First important thing we need to realize is that, if we find the position of the closest smaller number to the left of i\n, on position j\n, and we choose to add it in the rightmost photo with building i\n, then the best solution would be on dpj\n, because all numbers after j\n are bigger than hj\n, so they would not change the beauty of the picture (this is assuming that i\n and j\n are on the same photo). Note that we had already calculated the max beauty of dpj\n, so it is not necessary to go back any further, as we have the best answer stored at dpj\n\nHaving this observation, we are just left to check numbers between j\n and i\n as possible splitting points for the rightmost picture (the case where building j\n and building i\n are in different pictures). But we now know that every height from j+1\n to i?1\n is bigger than hi\n ( this is because j\n is the closets smaller height), so the answer will just be dpk?1\n + bi\n for any k\n between j+1\n and i\n. We want to maximize the answer, so we just want to look for the max dpk\n value in this range. To do this, we can keep a max segment tree with dp values, and query it in O(lgn)\n time. After we calculate dpi\n, we insert it to the segment tree. This gives un an O(n?lgn)\n solution, enough to solve the problem.\n\nFor the final implementation, we can iterate from 1 to n\n, keeping a stack with height values, to calculate the closest smaller building for each building. We just pop the stack while the current building is smaller than the top value of the stack, and insert the current building on top of the stack. Actually, by using this trick right, a segment tree is not really necessary. We can calculate the minimum answer for the ranges by updating information as we delete or add numbers in the stack. So it is possible to achieve a linear time solution. However, O(n?lgn)\n is enough to solve the problem, so this optimization is not necessary."
}