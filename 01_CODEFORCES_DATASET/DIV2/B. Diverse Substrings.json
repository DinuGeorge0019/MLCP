{
    "link": "https://codeforces.com//contest/1748/problem/B",
    "problemId": "1632964",
    "problem_idx": "B",
    "shortId": "1748B",
    "contest_number": "1748",
    "problem_submissions": {
        "F": [
            180651535,
            180677196,
            181105630,
            180664800,
            181374019,
            180658674,
            180695681,
            180655443,
            180742899
        ],
        "E": [
            180637637,
            180628826,
            180634324,
            180638179,
            180642534,
            180644596,
            180636672,
            181374010,
            180641599,
            180630018,
            180635790,
            180636019,
            180643172,
            180645795,
            180743214,
            180638578,
            180968480,
            180635598,
            180635749,
            180647581,
            180646430,
            180647569,
            180646469
        ],
        "D": [
            180633726,
            180624258,
            180629104,
            180634928,
            180631821,
            180631702,
            180639756,
            181373997,
            180632286,
            180647106,
            180647136,
            180632247,
            180695817,
            180636057,
            180743200,
            180643463,
            180968348,
            180645591,
            180644512,
            180637600,
            180635174,
            180636597,
            180633591
        ],
        "C": [
            180627069,
            180617304,
            180624008,
            180625748,
            180621980,
            180623459,
            180622660,
            181373988,
            180628239,
            180625933,
            180628451,
            180622380,
            180627739,
            180622385,
            180743249,
            180625569,
            180968325,
            180627789,
            180629833,
            180622612,
            180628495,
            180626202,
            180630095
        ],
        "B": [
            180622705,
            180613102,
            180624297,
            180615500,
            180617761,
            180619392,
            180619994,
            181373974,
            180622730,
            180621189,
            180616618,
            180613628,
            180622929,
            180618545,
            180743160,
            180616164,
            180968311,
            180615958,
            180614803,
            180618593,
            180622095,
            180621136
        ],
        "A": [
            180613831,
            180610319,
            180610882,
            180610734,
            180612490,
            180611586,
            180619768,
            181373957,
            180612666,
            180610632,
            180610694,
            180610429,
            180620047,
            180612131,
            180743129,
            180611466,
            180968275,
            180611045,
            180610310,
            180612188,
            180613830,
            180610743
        ]
    },
    "name": "B. Diverse Substrings",
    "statement": "A non-empty digit string is if the number of occurrences of each\r\ncharacter in it doesn\u2019t exceed the number of distinct characters in\r\nit.For example: string \"\" is diverse because appears in it 1 time and\r\nthe number of distinct characters in it is 1; string \"\" is diverse\r\nbecause appears in it 2 times and the number of distinct characters in\r\nit is 1; string \"\" is diverse because both and appear in it 2 times and\r\nthe number of distinct characters in it is 2; string \"\" is diverse\r\nbecause appears in it 3 times and the number of distinct characters in\r\nit is 2. You are given a string s of length n, consisting of only digits\r\n0 to 9. Find how many of its\r\nfrac{n(n+1)}{2} substrings are diverse.A string a is a substring of a\r\nstring b if a can be obtained from b by deletion of several (possibly,\r\nzero or all) characters from the beginning and several (possibly, zero\r\nor all) characters from the end.Note that if the same diverse string\r\nappears in s multiple times, each occurrence should be counted\r\nindependently. For example, there are two diverse substrings in \"\" both\r\nequal to \"\", so the answer for the string \"\" is 2.\r\n",
    "solutions": [
        "# include <cstdlib>\n# include <algorithm>\n# include <cstdio>\n\nnamespace khin {\n  using namespace std;\n  namespace main {\n    inline namespace source {\n      typedef unsigned long int ulong;\n      typedef unsigned short int ushort;\n      typedef unsigned int uint;\n    }\n    namespace b { void main(); }\n  }\n}\n\nint main() { khin::main::b::main(); }\n\nnamespace khin::main::b {\n  namespace test_case {\n    constexpr uint n_max(100'000);\n    uint n; char s[n_max + 1];\n    void main() {\n      scanf(\"%u\", &n), scanf(\"%s\", s);\n      uint ans(0);\n      for (uint i(0); i < n; ++i) {\n        uint count[10]{}, cnt(0), max(0);\n        for (uint j(i); j < n && j - i + 1 <= 100; ++j) {\n          cnt += !count[s[j] - '0'];\n          max = std::max(max, ++count[s[j] - '0']);\n          ans += max <= cnt;\n        }\n      }\n      printf(\"%u\\n\", ans);\n    }\n  }\n  void main() {\n    ushort t;\n    scanf(\"%hu\", &t);\n    while (test_case::main(), --t);\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "strings"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Diverse Substrings.json",
    "editorial_link": "https://codeforces.com//blog/entry/108319",
    "editorial": "SolutionIn a diverse string, there are at most distinct characters: \u00e2\u0080\u00990\u00e2\u0080\u0099,\r\n\u00e2\u0080\u00991\u00e2\u0080\u0099, , \u00e2\u0080\u00999\u00e2\u0080\u0099. Therefore, each of these characters can appear at most times\r\nin a diverse string.With all this in mind, the maximum possible length\r\nof a diverse string is . To solve this problem, we only need to check\r\nwhether each substring of length is diverse.Time complexity per\r\ntestcase:\r\n"
}