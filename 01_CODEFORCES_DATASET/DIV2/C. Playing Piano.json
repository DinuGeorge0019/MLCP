{
    "link": "https://codeforces.com//contest/1079/problem/C",
    "problemId": "257673",
    "problem_idx": "C",
    "shortId": "1079C",
    "contest_number": "1079",
    "problem_submissions": {
        "E": [
            45934267,
            45936636,
            45941806,
            45937565,
            45939333,
            45937199,
            45940743,
            45942158,
            45941402,
            46104036,
            45963146,
            45940904,
            45946313
        ],
        "D": [
            45931502,
            45929943,
            45928202,
            45933972,
            45932585,
            45928454,
            45926585,
            45928651,
            45928898,
            45928856,
            45930400,
            45930743,
            45929548,
            45929551,
            45931333,
            45929717,
            45931175,
            45930151,
            45933096
        ],
        "C": [
            45927571,
            45925544,
            45925366,
            45932689,
            45926037,
            45924078,
            45924314,
            45925482,
            45926594,
            45925976,
            45921399,
            45924312,
            45926518,
            45925797,
            45924767,
            45926026,
            45925780,
            45927583,
            45925054
        ],
        "B": [
            45922164,
            45922160,
            45923256,
            45930687,
            45951085,
            45921961,
            45921919,
            45922366,
            45922028,
            45923115,
            45924050,
            45922108,
            45922170,
            45923305,
            45921946,
            45922922,
            45922642,
            45922803,
            45922288
        ],
        "A": [
            45920252,
            45920257,
            45923913,
            45925594,
            45920970,
            45920420,
            45920504,
            45920483,
            45920269,
            45921357,
            45926632,
            45920349,
            45920289,
            45920409,
            45920196,
            45920480,
            45920373,
            45920574,
            45920303
        ],
        "F": [
            46007936,
            46007802,
            46007752,
            45995791,
            45995576,
            45995489,
            45995039,
            45994859,
            45992076
        ],
        "G": [
            45942230
        ]
    },
    "name": "C. Playing Piano",
    "statement": "Little Paul wants to learn how to play piano. He already has a melody he\r\nwants to start with. For simplicity he represented this melody as a\r\nsequence a_1, a_2,\r\nldots, a_n of key numbers: the more a number is, the closer it is to the\r\nright end of the piano keyboard.Paul is very clever and knows that the\r\nessential thing is to properly assign fingers to notes he\u2019s going to\r\nplay. If he chooses an inconvenient fingering, he will then waste a lot\r\nof time trying to learn how to play the melody by these fingers and he\r\nwill probably not succeed.Let\u2019s denote the fingers of hand by numbers\r\nfrom 1 to 5. We call a any sequence b_1,\r\nldots, b_n of fingers numbers. A fingering is if for all 1\r\nleq i\r\nleq n - 1 the following holds: if a_i < a_{i+1} then b_i < b_{i+1},\r\nbecause otherwise Paul needs to take his hand off the keyboard to play\r\nthe (i+1)-st note; if a_i > a_{i+1} then b_i > b_{i+1}, because of the\r\nsame; if a_i = a_{i+1} then b_i\r\nneq b_{i+1}, because using the same finger twice in a row is dumb.\r\nPlease provide any convenient fingering or find out that there is none.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nint a[(int)2e5];\nint dp[(int)2e5][6];\nint u[(int)2e5][6];\nint p[(int)2e5][6];\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    int n;\n    cin >> n;\n    for(int i = 1; i <= n; i++)\n    {\n        cin >> a[i];\n    }\n    u[1][1] = 1;\n    u[1][2] = 1;\n    u[1][3] = 1;\n    u[1][4] = 1;\n    u[1][5] = 1;\n    for(int i = 1; i < n; i++)\n    {\n        for(int t = 1; t <= 5; t++)\n        {\n            if(!u[i][t])continue;\n            if(a[i + 1] > a[i])\n            {\n                for(int j = t + 1; j <= 5;j++)\n                {\n                    p[i + 1][j] = t;\n                    u[i + 1][j] = 1;\n                }\n            }\n            if(a[i + 1] < a[i])\n            {\n                for(int j = 1; j < t;j++)\n                {\n                    p[i + 1][j] = t;\n                    u[i +1][j] = 1;\n                }\n            }\n            if(a[i + 1]==a[i])\n            {\n                for(int j = 1; j <= 5;j++)\n                {\n                    if(j == t)\n                        continue;\n                    p[i + 1][j] = t;\n                    u[i +1][j] = 1;\n                }\n            }\n        }\n    }\n    int e = 0;\n    for(int j = 1; j<=5;j++)\n        if(u[n][j])\n            e = j;\n    if(e == 0)\n    {\n        cout << -1;\n        return 0;\n    }\n    vector<int> ans;\n    //return 0;\n    for(int i = n; i >=1;i--)\n    {\n        ans.push_back(e);\n        e = p[i][e];\n    }\n    reverse(ans.begin(),ans.end());\n    for(auto x: ans)\n        cout << x << ' ';\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Playing Piano.json",
    "editorial_link": "https://codeforces.com//blog/entry/63324",
    "editorial": "Let dp[i][j]\n be ?1\n if we cannot play the first i\n notes in such a way that the i\n-th note is played by the j\n-th finger, otherwise let this be the number of the previous finger in any of possible fingerings. This dp\n can be easily calculated for about 5n?5\n operations."
}