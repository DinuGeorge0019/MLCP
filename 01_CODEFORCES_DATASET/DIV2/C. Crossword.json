{"link": "https://codeforces.com//contest/47/problem/C", "problemId": "247", "problem_idx": "C", "shortId": "47C", "contest_number": "47", "problem_submissions": {"D": [214688, 214567, 214462, 214130, 214246, 214591, 214548, 214594, 215160, 214627, 214695, 277771, 214789, 214819, 214988, 214911], "C": [214531, 214800, 214769, 214564, 214632], "B": [214196, 213937, 213787, 213575, 213695, 213642, 213745, 213667, 214199, 213907, 213980, 213392, 213596, 213886, 213586, 214343], "A": [213976, 213112, 213127, 213092, 213168, 213253, 213260, 213161, 213129, 213524, 213232, 213065, 213046, 213145, 213105, 213370], "E": [215233]}, "name": "C. Crossword", "statement": "Vasya trains to compose crossword puzzles. He can only compose\r\ncrosswords of a very simpl type so far. All of them consist of exactly\r\nsix words; the words can be read only from top to bottom vertically and\r\nfrom the left to the right horizontally. The words are arranged in the\r\nform of a rectangular \"eight\" or infinity sign, not necessarily\r\nsymmetrical.The top-left corner of the crossword coincides with the\r\ntop-left corner of the rectangle. The same thing is correct for the\r\nright-bottom corners. The crossword can\u2019t degrade, i.e. it always has\r\nexactly four blank areas, two of which are surrounded by letters. Look\r\ninto the output for the samples for clarification.Help Vasya compose a\r\ncrossword of the described type using the given six words. It is allowed\r\nto use the words in any order.\r\n", "solutions": ["#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <cstdlib>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iomanip>\n#include <cstdio>\n#include <vector>\n#include <bitset>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <cmath>\n#include <ctime>\n#include <list>\n#include <map>\n#include <set>\n\nusing namespace std;\n\n#define VT vector\ntypedef VT<int> VI;\ntypedef VT<VI> VVI;\ntypedef VT<string> VS;\ntypedef VT<double> VD;\ntypedef VT<VD> VVD;\n\n#define REP(i,n) for(int i=0;i<(int)(n);++i)\n#define FOR(i,a,b) for(int i=(int)a;i<=(int)b;++i)\n#define ALL(c) c.begin(),c.end()\n#define PB push_back\n#define MP make_pair\n\nchar back(const std::string& str)\n{\n\treturn str[str.size()-1];\n}\n\nint main(int argc, char* argv[])\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\", \"r\", stdin);\n#endif\n\n\tstring s;\n\tVS vs_old;\n\tVI vi;\n\tREP(i, 6)\n\t{\n\t\tgetline(cin, s);\n\t\tvs_old.push_back(s);\n\t\tvi.push_back(i);\n\t}\n\n\tVS best_vs;\n\n\n\tdo\n\t{\n\n\t\tVS vs;\n\t\tREP(i, 6)\n\t\t{\n\t\t\tvs.push_back(vs_old[vi[i]]);\n\t\t}\n\n\t\tif (!(vs[4].size() + vs[0].size() - 1 == vs[2].size()))\n\t\t\tcontinue;\n\n\t\tif (!(vs[1].size() + vs[5].size() - 1 == vs[3].size()))\n\t\t\tcontinue;\n\n\t\tif (vs[0][0] != vs[1][0])\n\t\t\tcontinue;\n\n\t\tif (back(vs[0]) != vs[3][0])\n\t\t\tcontinue;\n\n\t\tif (back(vs[1]) != vs[2][0])\n\t\t\tcontinue;\n\n\t\tif (back(vs[2]) != vs[5][0])\n\t\t\tcontinue;\n\n\t\tif (back(vs[3]) != vs[4][0])\n\t\t\tcontinue;\n\n\t\tif (back(vs[4]) != back(vs[5]))\n\t\t\tcontinue;\n\n\t\tVS field(vs[3].size(), string(vs[2].size() , '.'));\n\n\t\tREP(i, vs[0].size())\n\t\t{\n\t\t\tfield[0][i] = vs[0][i];\n\t\t}\n\n\t\tREP(i, vs[1].size())\n\t\t{\n\t\t\tfield[i][0] = vs[1][i];\n\t\t}\n\n\n\t\tREP(i, vs[2].size())\n\t\t{\n\t\t\tfield[vs[1].size()-1][i] = vs[2][i];\n\t\t}\n\n\t\tbool can = true;\n\t\tREP(i, vs[3].size())\n\t\t{\n\t\t\tif (field[i][vs[0].size()-1] != '.' && vs[3][i] != field[i][vs[0].size()-1])\n\t\t\t\tcan = false;\n\n\t\t\tfield[i][vs[0].size()-1] = vs[3][i];\n\t\t}\n\n\t\tREP(i, vs[4].size())\n\t\t{\n\t\t\tfield[vs[3].size()-1][vs[0].size()-1 + i] = vs[4][i];\n\t\t}\n\n\t\tREP(i, vs[5].size())\n\t\t{\n\t\t\tfield[vs[1].size()-1+i][vs[2].size()-1] = vs[5][i];\n\t\t}\n\n\n\t\tif (!can)\n\t\t\tcontinue;\n\n\n\t\tif (best_vs.size() == 0 || best_vs > field)\n\t\t\tbest_vs = field;\n\n\n\t}\n\twhile(next_permutation(ALL(vi)));\n\n\n\tif (best_vs.size() == 0)\n\t\tcout << \"Impossible\\n\";\n\telse\n\t{\n\t\tfor(int i = 0; i < best_vs.size(); ++i)\n\t\t\tcout << best_vs[i] << \"\\n\";\n\n\t}\n\n\tint temp;\n\tstd::cin >> temp;\n}\n"], "input": "", "output": "", "tags": ["implementation"], "dificulty": "2000", "interactive": false}