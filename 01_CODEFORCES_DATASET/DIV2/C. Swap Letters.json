{
    "link": "https://codeforces.com//contest/1215/problem/C",
    "problemId": "412393",
    "problem_idx": "C",
    "shortId": "1215C",
    "contest_number": "1215",
    "problem_submissions": {
        "F": [
            60620224,
            60633144,
            60628796,
            62102987,
            60657759
        ],
        "E": [
            60614830,
            60620100,
            60624259,
            60618193,
            60620939,
            60619722,
            60618555,
            60619211,
            60623129,
            60624049,
            60623962,
            60621062,
            60625235,
            60625015,
            60623138,
            60622255,
            60623519,
            60627768,
            60628419,
            60622708
        ],
        "D": [
            60613485,
            60617335,
            60619535,
            60616864,
            60615351,
            60616017,
            60622796,
            60619079,
            60617400,
            60616935,
            60621165,
            60617806,
            60616391,
            60616135,
            60618699,
            60620021,
            60619257,
            60623666,
            60614165,
            60618490
        ],
        "C": [
            60611883,
            60614880,
            60616986,
            60613872,
            60612356,
            60613808,
            60613237,
            60615096,
            60615058,
            60613116,
            60615948,
            60615995,
            60614183,
            60613610,
            60614082,
            60612548,
            60614439,
            60618385,
            60611650,
            60615653
        ],
        "B": [
            60609609,
            60611892,
            60614411,
            60610320,
            60609887,
            60611712,
            60610288,
            60610941,
            60611470,
            60610159,
            60611942,
            60611586,
            60611453,
            60611164,
            60611443,
            60609621,
            60611512,
            60611710,
            60609773,
            60612774
        ],
        "A": [
            60609389,
            60610541,
            60610424,
            60609620,
            60609428,
            60610648,
            60609442,
            60611977,
            60609576,
            60609429,
            60610464,
            60609932,
            60609744,
            60609643,
            60609965,
            60616895,
            60610358,
            60609768,
            60609404,
            60611551
        ]
    },
    "name": "C. Swap Letters",
    "statement": "Monocarp has got two strings s and t having equal length. Both strings\r\nconsist of lowercase Latin letters \"\" and \"\". Monocarp wants to make\r\nthese two strings s and t equal to each other. He can do the following\r\noperation any number of times: choose an index pos_1 in the string s,\r\nchoose an index pos_2 in the string t, and swap s_{pos_1} with\r\nt_{pos_2}.You have to determine the minimum number of operations\r\nMonocarp has to perform to make s and t equal, and print any optimal\r\nsequence of operations or say that it is impossible to make these\r\nstrings equal.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define uint unsigned\n#define ull unsigned ll\n#define pii pair<int,int>\n#define pll pair<ll,ll>\n#define PB push_back\n#define fi first\n#define se second\n#define For(i,j,k) for (int i=(int)(j);i<=(int)(k);i++)\n#define Rep(i,j,k) for (int i=(int)(j);i>=(int)(k);i--)\n#define CLR(a,v) memset(a,v,sizeof(a))\n#define CPY(a,b) memcpy(a,b,sizeof(a))\nusing namespace std;\nchar a[200005],b[200005];\nint n,q1[200005],q2[200005];\nint k,ans1[500005],ans2[500005];\nint main(){\n\tscanf(\"%d%s%s\",&n,a+1,b+1);\n\tFor(i,1,n)\n\t\tif (a[i]=='a'&&b[i]=='b') q1[++*q1]=i;\n\t\telse if (a[i]=='b'&&b[i]=='a') q2[++*q2]=i;\n\tif (((*q1)+(*q2))%2==1) return puts(\"-1\"),0;\n\tfor (;*q1>=2;*q1-=2) ans1[++k]=q1[*q1],ans2[k]=q1[(*q1)-1];\n\tfor (;*q2>=2;*q2-=2) ans1[++k]=q2[*q2],ans2[k]=q2[(*q2)-1];\n\tif (*q1){\n\t\tans1[++k]=q1[1]; ans2[k]=q1[1];\n\t\tans1[++k]=q1[1]; ans2[k]=q2[1];\n\t}\n\tprintf(\"%d\\n\",k);\n\tFor(i,1,k) printf(\"%d %d\\n\",ans1[i],ans2[i]);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Swap Letters.json",
    "editorial_link": "https://codeforces.com//blog/entry/69815",
    "editorial": "Letâs calculate two vectors and . will contain all positions such that .\r\nAnalogically, will contain all positions such that . If the sizes of\r\nthese vectors are not equal modulo , the answer does not exist, because\r\nthe total number of letters \"\" and \"\" should be even.In the other case,\r\nwe should perform operations in a greedy way. In one operation we can\r\nmake equal to and equal to , if both and belong to , or if both these\r\npositions belong .If the sizes of and are even, we need only operation.\r\nIn the other case, there are two positions and such that , , , . We need\r\ntwo operations to make and : at first we perform the operation , and\r\nthen the operation . After that, strings and will be equal to each\r\nother.\r\n",
    "hint": []
}