{
    "link": "https://codeforces.com//contest/2013/problem/D",
    "problemId": "2890589",
    "problem_idx": "D",
    "shortId": "2013D",
    "contest_number": "2013",
    "problem_submissions": {
        "F1": [
            282085508,
            282091649,
            282097681,
            282062964,
            282097010,
            282094496,
            282096102,
            282130493,
            282100468,
            282110907,
            282110226,
            282977558
        ],
        "E": [
            282061833,
            282080813,
            282051849,
            282086247,
            282037391,
            282057195,
            282050812,
            282047875,
            282387310,
            282046660,
            282057981,
            282053861,
            282054405,
            282061649,
            282089310,
            282054594,
            282061765,
            282060270,
            282065503,
            282063375
        ],
        "D": [
            282053393,
            282148584,
            282052109,
            282042335,
            282076655,
            282080799,
            282065676,
            282079143,
            282037385,
            282054240,
            282041005,
            282045620,
            282047474,
            282043487,
            282073249,
            282022525,
            282048467,
            282042436,
            282046096,
            282048201
        ],
        "C": [
            282036735,
            282027206,
            282070402,
            282021424,
            282027464,
            282026938,
            282063555,
            282026144,
            282031663,
            282027005,
            282037319,
            282027256,
            282027279,
            282046717,
            282066980,
            282036015,
            282031256,
            282038898,
            282038980
        ],
        "B": [
            282022099,
            282013728,
            282015453,
            282011770,
            282018552,
            282009811,
            282027915,
            282017479,
            282013009,
            282018195,
            282019086,
            282010905,
            282014462,
            282037982,
            282022835,
            282017402,
            282018955,
            282018976,
            282023313
        ],
        "A": [
            282014277,
            282006421,
            282026971,
            282006385,
            282008034,
            282005836,
            282006296,
            282008704,
            282006066,
            282010046,
            282006523,
            282005614,
            282006702,
            282035715,
            282023370,
            282007442,
            282014269,
            282005794,
            282006570
        ]
    },
    "editorial_link": "https://codeforces.com/blog/entry/134170",
    "editorial": "SolutionFirst statement: if , then it is always beneficial to perform an\r\noperation at position . Therefore, the final array will be\r\nnon-decreasing.Second statement: if the array is non-decreasing, then\r\nperforming operations is not advantageous.We will maintain a stack that\r\nholds a sorted array. Each element in the stack will represent a pair ,\r\nwhere is the value and is the number of its occurrences.When adding to\r\nthe stack, we will keep track of the sum of the removed elements from\r\nthe stack and their count . Initially, and . We will remove the last\r\nelement from the stack while it is greater than . After that, we\r\nrecalculate and . Then we add the pairs and to the stack.The time\r\ncomplexity of the algorithm is , since on each iteration, no more than 2\r\nelements are added to the stack, and each element is removed at most\r\nonce.\r\n",
    "name": "D. Minimize the Difference",
    "statement": "Zhan, tired after the contest, gave the only task that he did not solve\r\nduring the contest to his friend, Sungat. However, he could not solve it\r\neither, so we ask you to try to solve this problem.You are given an\r\narray a_1, a_2,\r\nldots, a_n of length n. We can perform any number (possibly, zero) of\r\noperations on the array.In one operation, we choose a position i (1\r\nleq i\r\nleq n - 1) and perform the following action: a_i := a_i - 1, and a_{i+1}\r\n:= a_{i+1} + 1. Find the minimum possible value of\r\nmax(a_1, a_2,\r\nldots, a_n) -\r\nmin(a_1, a_2,\r\nldots, a_n).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;\u00a0typedef long long ll;using vi = vector<int>;using vvi = vector<vector<int>>;using vll = vector<ll>;using vvll = vector<vector<ll>>;\u00a0#define all(x) x.begin(), x.end()#define ckmin(a,b) a = min(a,b)#define ckmax(a,b) a = max(a,b)\u00a0void solve() {    int N;    cin >> N;    vll A(N);    for (int i=0;i<N;i++) cin >> A[i];\u00a0    vll cum(N+1, 0);    for (int i=0;i<N;i++) cum[i+1] = cum[i] + A[i];\u00a0    ll ans = 0;    ll minmin = A[0];    ll maxmax = A[N-1];    for (int k=1;k<N;k++) {        ll left = cum[k]/k;        ll right = (cum[N] - cum[k] + (N-k-1))/(N-k);        ckmin(minmin, left);        ckmax(maxmax, right);\u00a0        // min <= left, max >= right        ckmax(ans, maxmax - minmin);    }    if (cum[N] % N != 0) ckmax(ans, 1ll);\u00a0    cout << ans << \"\\n\";}\u00a0int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(NULL);\u00a0    int T;    cin >> T;\u00a0    for (int t=0;t<T;t++) solve();\u00a0\u00a0    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Minimize the Difference.json"
}