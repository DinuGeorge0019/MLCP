{
    "link": "https://codeforces.com//contest/1979/problem/C",
    "problemId": "2684281",
    "problem_idx": "C",
    "shortId": "1979C",
    "contest_number": "1979",
    "problem_submissions": {
        "F": [
            264479061,
            264488646,
            264505247,
            264595233,
            264619291
        ],
        "E": [
            264463709,
            264456182,
            264454663,
            264460110,
            264469235,
            264463422,
            264466790,
            264478578,
            264473477,
            264470909,
            264471670,
            264477459,
            264475074,
            264468357,
            264475963,
            264472031,
            264477800,
            264475608,
            264472217
        ],
        "D": [
            264443096,
            264466698,
            264438605,
            264433389,
            264436848,
            264441621,
            264445629,
            264439468,
            264443494,
            264448547,
            264437284,
            264438609,
            264445824,
            264448565,
            264448792,
            264448782,
            264436980,
            264445527,
            264444587
        ],
        "C": [
            264426913,
            264419354,
            264425968,
            264424857,
            264419880,
            264427385,
            264428474,
            264417768,
            264426268,
            264426216,
            264426191,
            264428203,
            264424558,
            264432779,
            264423537,
            264427769,
            264423741,
            264426473,
            264428054
        ],
        "B": [
            264418439,
            264411481,
            264417433,
            264418710,
            264412854,
            264416785,
            264417289,
            264409596,
            264415411,
            264416480,
            264411733,
            264416203,
            264418002,
            264418445,
            264413144,
            264415814,
            264415134,
            264412074,
            264419017
        ],
        "A": [
            264409604,
            264408727,
            264409156,
            264412898,
            264408950,
            264409241,
            264410321,
            264408352,
            264408494,
            264408922,
            264408390,
            264408516,
            264410187,
            264409625,
            264408487,
            264409057,
            264408498,
            264408238,
            264408615
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/130213",
    "editorial": "SolutionLet be the total amount of coins placed on all possible\r\noutcomes. Then, if the coefficient for winning is , we have to place\r\nmore than on this outcome.We can obtain the following inequality:\r\nDividing both sides by , we obtain the necessary and sufficient\r\ncondition for the existence of an answer: This check can be performed by\r\nreducing all fractions to a common denominator. Notice that the\r\nnumerators of the reduced fractions correspond to the required bets on\r\nthe outcomes.\r\n",
    "name": "C. Earning on Bets",
    "statement": "You have been offered to play a game. In this game, there are n possible\r\noutcomes, and for each of them, you must bet a certain amount of coins.\r\nIn the event that the i-th outcome turns out to be winning, you will\r\nreceive back the amount of coins equal to your bet on that outcome,\r\nmultiplied by k_i. Note that of the n outcomes will be winning.Your task\r\nis to determine how to distribute the coins in such a way that you will\r\ncome out ahead in the event of winning outcome. More formally, the total\r\namount of coins you bet on all outcomes must be than the number of coins\r\nreceived back for each possible winning outcome.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>using namespace std;#define ll long long#define MP make_pairmt19937 rnd(time(0));const long double eps=1e-12;int n,a[55];void solve(){\tcin>>n;\tlong double s=0;\tfor(int i=1;i<=n;i++){\t\tcin>>a[i];\t\ts+=1./a[i];\t}\tif(s>=1-eps) cout<<\"-1\\n\";\telse{\t\tint lim=1e9;\t\tfor(int i=1;i<=n;i++) cout<<(lim+a[i]-1)/a[i]<<\" \\n\"[i==n];\t}}int main(){\tios::sync_with_stdio(false);\t// freopen(\"Otomachi_Una.in\",\"r\",stdin);\t// freopen(\"Otomachi_Una.out\",\"w\",stdout);\tint _;cin>>_;\twhile(_--) solve();\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics",
        "constructive algorithms",
        "number theory"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Earning on Bets.json",
    "hint": [
        "Hint Try to come up with a condition for the existence of an answer."
    ]
}