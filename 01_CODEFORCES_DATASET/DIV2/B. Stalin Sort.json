{
    "link": "https://codeforces.com//contest/2027/problem/B",
    "problemId": "2980650",
    "problem_idx": "B",
    "shortId": "2027B",
    "contest_number": "2027",
    "problem_submissions": {
        "E1": [
            288173465
        ],
        "C": [
            288155049,
            288120759,
            288122093,
            288125570,
            288127321,
            288123494,
            288123556,
            288122333,
            288123755,
            288125169,
            288121427,
            288117465,
            288125690,
            288124584,
            288121786,
            288127829,
            288125975,
            288124342
        ],
        "B": [
            288142255,
            288115334,
            288114511,
            288119086,
            288120877,
            288116135,
            288118059,
            288116134,
            288116952,
            288118306,
            288116355,
            288118112,
            288118023,
            288118240,
            288114959,
            288119841,
            288117994,
            288116831
        ],
        "D1": [
            288128564,
            288128933,
            288128524,
            288131968,
            288133129,
            288135744,
            288132103,
            288131863,
            288129253,
            288133201,
            288129398,
            288141909,
            288136583,
            288131627,
            288137428,
            288134171,
            288136755,
            288139102
        ],
        "D2": [
            288128086,
            288140616,
            288241523,
            288145908,
            288142238,
            288141377,
            288147849,
            288144735,
            288148268,
            288155865,
            288150156,
            288152683,
            288141628,
            288150384,
            288157699,
            288150265,
            288151809,
            288152365,
            288146843
        ],
        "A": [
            288116848,
            288110808,
            288111033,
            288112146,
            288115964,
            288110952,
            288112831,
            288111212,
            288110889,
            288110825,
            288111627,
            288112681,
            288110645,
            288110604,
            288114987,
            288112466,
            288110744
        ],
        "E2": []
    },
    "editorial_link": "https://codeforces.com//blog/entry/135558",
    "editorial": "An array is vulnerable if and only if the first element is the largest.\r\nTo prove the forward direction, we can trivially perform a single\r\noperation on the entire range, which will clearly make it\r\nnon-increasing. Now, let\u00e2\u0080\u0099s prove the reverse direction. Consider any\r\narray in which the maximum is not the first element. Note that a Stalin\r\nSort on any subarray will never remove the first element, and also will\r\nnever remove the maximum. So if the first is not the maximum, this will\r\nalways break the non-increasing property.Therefore, we just need to find\r\nthe longest subsequence in which the first element is the largest. This\r\ncan be done easily in consider each index being the first item in the\r\nsubsequence, and count all items to the right of it which are smaller or\r\nequal to it. Find the maximum over all of these, then subtract this from\r\n.Bonus: Solve this task in .\r\n",
    "name": "B. Stalin Sort",
    "statement": "Stalin Sort is a humorous sorting algorithm designed to eliminate\r\nelements which are out of place instead of bothering to sort them\r\nproperly, lending itself to an\r\nmathcal{O}(n) time complexity.It goes as follows: starting from the\r\nsecond element in the array, if it is strictly smaller than the previous\r\nelement (ignoring those which have already been deleted), then delete\r\nit. Continue iterating through the array until it is sorted in\r\nnon-decreasing order. For example, the array [1, 4, 2, 3, 6, 5, 5, 7, 7]\r\nbecomes [1, 4, 6, 7, 7] after a Stalin Sort.We define an array as if you\r\ncan sort it in order by repeatedly applying a Stalin Sort to , as many\r\ntimes as is needed.Given an array a of n integers, determine the minimum\r\nnumber of integers which must be removed from the array to make it .^{\r\ntext{ }}An array a is a subarray of an array b if a can be obtained from\r\nb by the deletion of several (possibly, zero or all) elements from the\r\nbeginning and several (possibly, zero or all) elements from the end.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#ifdef LOCAL#define TASK \"test\"#else#define TASK \"test\"#endifusing namespace std;\u00a0#define int long long\u00a0const int N = 2005;\u00a0int n;int a[N];\u00a0void solve() {    cin >> n;    int res = n;    for (int i = 1; i <= n; ++i) {        cin >> a[i];    }    for (int i = 1; i <= n; ++i) {        int cnt = i - 1;        for (int j = i; j <= n; ++j) {            cnt += (a[i] < a[j]);        }        res = min(res, cnt);    }    cout << res << '\\n';}\u00a0signed main() {    if (fopen(TASK\".inp\", \"r\")) {        freopen(TASK\".inp\", \"r\", stdin);        freopen(TASK\".out\", \"w\", stdout);    }    if (fopen(TASK\".err\", \"r\")) {        freopen(TASK\".err\", \"w\", stderr);    }    ios::sync_with_stdio(false);    cin.tie(nullptr);    int T;    cin >> T;    while (T--) {        solve();    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Stalin Sort.json"
}