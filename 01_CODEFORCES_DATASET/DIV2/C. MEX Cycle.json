{
    "link": "https://codeforces.com//contest/2049/problem/C",
    "problemId": "3095887",
    "problem_idx": "C",
    "shortId": "2049C",
    "contest_number": "2049",
    "problem_submissions": {
        "E": [
            297497545,
            297506248,
            297513363,
            297497215,
            297513754,
            297518565,
            297506722,
            297520708,
            297488887,
            297517677,
            297529325,
            297517116,
            297526566,
            297525983,
            297522466,
            297519909,
            297520752
        ],
        "D": [
            297483631,
            297479906,
            297485869,
            297513484,
            297488988,
            297486425,
            297485532,
            297485220,
            297484984,
            297500489,
            297482945,
            297486674,
            297499534,
            297487140,
            297494415,
            297499648,
            297503839,
            297506419
        ],
        "C": [
            297476672,
            297469506,
            297476237,
            297468134,
            297474308,
            297470523,
            297476380,
            297473582,
            297506923,
            297485541,
            297473126,
            297478801,
            297475763,
            297482532,
            297481819,
            297486746,
            297475914
        ],
        "B": [
            297470859,
            297460761,
            297460293,
            297459118,
            297463641,
            297461216,
            297463086,
            297463837,
            297473641,
            297462725,
            297462885,
            297469778,
            297465587,
            297460737,
            297466206,
            297472797,
            297465768
        ],
        "A": [
            297458727,
            297456975,
            297457057,
            297457132,
            297458401,
            297457465,
            297458903,
            297458352,
            297460231,
            297458345,
            297457970,
            297457220,
            297457772,
            297457523,
            297459233,
            297459057,
            297457136
        ],
        "F": [
            299863982,
            297606792
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137273",
    "editorial": "There are many possible solutions. The simplest one we can find (thanks\r\nto Kaey) is as follows: Why this works: Solution\r\n",
    "name": "C. MEX Cycle",
    "statement": "You are given integers n, x, and y. There are n dragons sitting in a\r\ncircle. The dragons are numbered 1, 2,\r\nldots, n. For each i (1\r\nle i\r\nle n), dragon i is friends with dragon i - 1 and i + 1, where dragon 0\r\nis defined to be dragon n and dragon n + 1 is defined to be dragon 1.\r\nAdditionally, dragons x and y are friends with each other (if they are\r\nalready friends, this changes nothing). Note that all friendships are\r\nmutual.Output n non-negative integers a_1, a_2,\r\nldots, a_n such that for each dragon i (1\r\nle i\r\nle n), the following holds: Let f_1, f_2,\r\nldots, f_k be the friends of dragon i. Then a_i =\r\noperatorname{mex}(a_{f_1}, a_{f_2},\r\nldots, a_{f_k}).^{\r\ntext{ }} ^{\r\ntext{ }}The minimum excluded (MEX) of a collection of integers c_1, c_2,\r\nldots, c_m is defined as the smallest non-negative integer t which does\r\nnot occur in the collection c.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx2,tune=native\")#pragma GCC optimize(\"unroll-loops,fast-math,O3\")using namespace std;const int B = 2e5 + 100;   int main(){    int t;    cin >> t;    while(t--) {        int n,x,y;        cin >> n >> x >> y;        if(n % 2 == 0&&abs(x - y) % 2 == 1) {            for(int i = 1;i <= n;i++) {                cout << i % 2 << \" \";            }            cout << endl;        }        else if(abs(x - y) % 2 == 0&&n % 2 == 0) {            int g = x % 2;            int ans[n + 1] = {};            if(g == 1) {                for(int i = 1;i <= n;i++) {                    ans[i] = i % 2;                }                ans[y] = 2;                for(int i = 1;i <= n;i++) cout << ans[i] << \" \";                cout << endl;            }            else {                for(int i = 1;i <= n;i++) {                    ans[i] = (i + 1) % 2;                }                ans[y] = 2;                for(int i = 1;i <= n;i++) cout << ans[i] << \" \";                cout << endl;            }        }        else if(n % 2 == 1&&abs(x - y) % 2 == 1) {            int ans[n + 1] = {};            for(int i = 1;i <= n;i++) {                ans[i] = i % 2;            }            ans[n] = 2;            for(int i = 1;i <= n;i++) {                cout << ans[i] << \" \";            }            cout << endl;        }        else {            if(x % 2 == 1) {                int ans[n + 1] = {};                for(int i = 1;i <= n;i++) {                    ans[i] = i % 2;                }                ans[n] = 2;                ans[max(x,y)] = 2;                for(int i = 1;i <= n;i++) {                    cout << ans[i] << \" \";                }                cout << endl;            }            else {                int ans[n + 1] = {};                for(int i = 1;i <= n;i++) {                    ans[i] = (i + 1) % 2;                }                ans[n] = 2;                ans[min(x,y)] = 2;                for(int i = 1;i <= n;i++) {                    cout << ans[i] << \" \";                }                cout << endl;            }        }    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. MEX Cycle.json",
    "hint": []
}