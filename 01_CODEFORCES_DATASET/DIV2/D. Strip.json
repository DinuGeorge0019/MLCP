{
    "link": "https://codeforces.com//contest/488/problem/D",
    "problemId": "17756",
    "problem_idx": "D",
    "shortId": "488D",
    "contest_number": "488",
    "problem_submissions": {
        "C": [
            8789721,
            8784968,
            8786503,
            8785444,
            8787030,
            8788326,
            8788622,
            8789526,
            8783088,
            8788042,
            8841638,
            8787428,
            8789969,
            8785172,
            8783549,
            8795032,
            8792817,
            8792769,
            8792766,
            8790912,
            8784523
        ],
        "D": [
            8787031,
            8860157,
            8845738,
            8846448
        ],
        "B": [
            8783651,
            8783456,
            8782128,
            8783172,
            8783387,
            8783484,
            8784283,
            8784001,
            8789951,
            8782906,
            8841826,
            8810063,
            8784023,
            8785144,
            8782367,
            8790893,
            8785527
        ],
        "A": [
            8777414,
            8777482,
            8778085,
            8777878,
            8777654,
            8777074,
            8779752,
            8777889,
            8778928,
            8778120,
            8841586,
            8778590,
            8782174,
            8791718,
            8778710,
            8778067,
            8777724
        ],
        "E": [
            8862060,
            8861159
        ]
    },
    "name": "D. Strip",
    "statement": "Alexandra has a paper strip with numbers on it. Letâ€™s call them from\r\nleft to right.Now Alexandra wants to split it into some pieces (possibly\r\n). For each piece of strip, it must satisfy: Each piece should contain\r\nat least numbers. The difference between the maximal and the minimal\r\nnumber on the piece should be at most .Please help Alexandra to find the\r\nminimal number of pieces meeting the condition above.\r\n",
    "solutions": [
        "#define _CRT_SECURE_NO_WARNINGS\n#if 1\n#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <iomanip>\n#include <sstream>\n#include <numeric>\n#include <string>\n#include <vector>\n#include <bitset>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <cstdlib>\n#include <cassert>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <ctime>\n#include <list>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef long double LD;\ntypedef pair<int, int> pii;\n\nconst LD eps = 1e-9;\nconst LD pi = acos(-1.0);\nconst LL inf = 1e+9;\n\n#define mp make_pair\n#define pb push_back\n#define X first\n#define Y second\n\n#define dbg(x) { cerr << #x << \" = \" << x << endl; }\n\n// extended template\n#pragma comment(linker, \"/STACK:36777216\")\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\n\n#define forn(i, n) for (int i = 0; i < n; ++i)\n#define all(a) (a).begin(), (a).end()\n#define rall(a) (a).rbegin(), (a).rend()\n\ntemplate<typename T> istream & operator >> (istream &, vector<T> &);\ntemplate<typename T> ostream & operator << (ostream &, const vector<T> &);\n\n#define START clock_t _clock = clock();\n#define END cerr << endl << \"time: \" << (clock() - _clock) / LD(CLOCKS_PER_SEC) << endl;\n\n#define NAME \"problem\"\n#define MAXN 100100\n#define oo 2000000000\n\nint n, s, l;\nint a[MAXN];\nint F[4 * MAXN];\npii T[4 * MAXN];\npii tt;\nint dp[MAXN];\nint res = oo;\n\nvoid readin(){\n    /*\n    n = 100000;\n    s = 1000000000; l = 5;\n    for (int i = 1; i <= 100000; i++)\n        a[i] = rand() % oo - 1000000000;\n        */\n    \n    scanf(\"%d%d%d\", &n, &s, &l);\n    for (int i = 1; i <= n; i++)\n        scanf(\"%d\", &a[i]);\n\n}\n\nvoid update(int node, int lo, int hi, int u){\n    if (lo > hi) return;\n    if (u < lo || u > hi) return;\n    if (lo == hi){\n        T[node].first = a[u];\n        T[node].second = a[u];\n        return;\n    }\n\n    int mid = (lo + hi) / 2;\n    update(2 * node, lo, mid, u);\n    update(2 * node + 1, mid + 1, hi, u);\n    T[node].first = max(T[2 * node].first, T[2 * node + 1].first);\n    T[node].second = min(T[2 * node].second, T[2 * node + 1].second);\n}\n\nint getmin(int node, int lo, int hi, int u, int v){\n    if (lo > hi || u > v) return oo;\n    if (u > hi || lo > v) return oo;\n    if (u <= lo && hi <= v) return T[node].second;\n    int mid = (lo + hi) / 2;\n    return min(getmin(2 * node, lo, mid, u, min(v, mid)), getmin(2 * node + 1, mid + 1, hi, max(u, mid + 1), v));\n}\n\nint getmax(int node, int lo, int hi, int u, int v){\n    if (lo > hi || u > v) return -oo;\n    if (u > hi || lo > v) return -oo;\n    if (u <= lo && hi <= v) return T[node].first;\n    int mid = (lo + hi) / 2;\n    return max(getmax(2 * node, lo, mid, u, min(v, mid)), getmax(2 * node + 1, mid + 1, hi, max(u, mid + 1), v));\n}\n\nvoid update_(int node, int lo, int hi, int u){\n    if (lo > hi) return;\n    if (u < lo || u > hi) return;\n    if (lo == hi){\n        F[node] = dp[u];\n        return;\n    }\n\n    int mid = (lo + hi) / 2;\n    update_(2 * node, lo, mid, u);\n    update_(2 * node + 1, mid + 1, hi, u);\n    F[node] = min(F[2 * node], F[2 * node + 1]);\n}\n\nint getmin_(int node, int lo, int hi, int u, int v){\n    if (lo > hi || u > v) return oo;\n    if (u > hi || lo > v) return oo;\n    if (u <= lo && hi <= v) return F[node];\n    int mid = (lo + hi) / 2;\n    return min(getmin_(2 * node, lo, mid, u, min(v, mid)), getmin_(2 * node + 1, mid + 1, hi, max(u, mid + 1), v));\n}\n\n\nvoid init(){\n    for (int i = 0; i < 4 * n; i++){\n        T[i].first = -oo;\n        T[i].second = oo;\n        F[i] = oo;\n    }\n\n    tt = T[0];\n    dp[0] = 0;\n}\n\nvoid process(){\n    res = oo;\n    if (l > n) return;\n    int mi = oo, ma = -oo;\n    for (int i = 1; i <= l; i++){\n        dp[i] = 1;\n        update(1, 1, n, i);\n        update_(1, 1, n, i);\n\n        mi = min(mi, a[i]);\n        ma = max(ma, a[i]);\n\n        if (ma - mi > s) return;\n    }\n\n    if (l == n) res = 1;\n\n    int j = 1;\n\n    for (int i = l + 1; i <= n; i++){\n        update(1, 1, n, i);\n        while (j <= i){\n            mi = getmin(1, 1, n, j, i);\n            ma = getmax(1, 1, n, j, i);\n            if (ma - mi <= s) break;\n            j++;\n        }\n\n        if (i - j + 1 >= l){\n            if (j == 1) dp[i] = 1;\n            else dp[i] = getmin_(1, 1, n, j - 1, i - l) + 1;\n        }\n        else dp[i] = oo;\n        update_(1, 1, n, i);\n    }\n    res = dp[n];\n}\n\nvoid solve(){\n    readin();\n    init();\n    process();\n    if (res >= oo) printf(\"-1\\n\");\n    else printf(\"%d\\n\", res);\n}\n\nint main()\n{\n    // freopen(NAME \".in\", \"r\", stdin); freopen(NAME \".out\", \"w\", stdout);\n    //freopen(\"input.txt\", \"r\", stdin); // freopen(\"output.txt\", \"w\", stdout);\n\n    solve();\n\n    return 0;\n}\n/*******************************************\n*******************************************/\n\ntemplate<typename T> istream & operator >> (istream &is, vector<T> &v)\n{\n    forn(i, v.size())\n        is >> v[i];\n    return is;\n}\ntemplate<typename T> ostream & operator << (ostream &os, const vector<T> &v)\n{\n    forn(i, v.size())\n        os << v[i] << \" \";\n    return os;\n}\n#endif"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "two pointers"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Strip.json",
    "editorial_link": "https://codeforces.com/blog/entry/14832",
    "editorial": "We can use dynamic programming to solve this problem.\n\nLet f[i] denote the minimal number of pieces that the first i numbers can be split into. g[i] denote the maximal length of substrip whose right border is i(included) and it satisfy the condition.\n\nThen f[i]?=?min(f[k])?+?1, where i?-?g[i]???k???i?-?l.\n\nWe can use monotonic queue to calculate g[i] and f[i]. And this can be implemented in O(n)\n\nWe can also use sparse table or segment tree to solve the problem, the time complexity is  or (It should be well-implemented).",
    "hint": []
}