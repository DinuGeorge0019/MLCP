{
    "link": "https://codeforces.com//contest/1388/problem/C",
    "problemId": "686568",
    "problem_idx": "C",
    "shortId": "1388C",
    "contest_number": "1388",
    "problem_submissions": {
        "E": [
            88517531,
            88530891,
            88517600,
            88523055,
            88559408,
            88542097
        ],
        "C": [
            88495900,
            88476175,
            88487310,
            88473716,
            88465503,
            88475038,
            88476262,
            88491274,
            88495411,
            88490211,
            88478175,
            88476725,
            88481845,
            88482918,
            88481225,
            88495504,
            88478995,
            88495759,
            88479604,
            88484795
        ],
        "D": [
            88480866,
            88490926,
            88497401,
            88487086,
            88484181,
            88486444,
            88489488,
            88473157,
            98881770,
            88482199,
            88475588,
            88491188,
            88488173,
            88491949,
            88494949,
            88491042,
            88480887,
            88497356,
            88482729,
            88496957,
            88493773
        ],
        "B": [
            88462054,
            88457078,
            88466301,
            88459212,
            88468622,
            88456432,
            88454997,
            88458888,
            88464610,
            88464365,
            88460797,
            88461431,
            88459743,
            88458713,
            88465245,
            88463298,
            88463309,
            88464312,
            88458653,
            88460565
        ],
        "A": [
            88452967,
            88450708,
            88455876,
            88453483,
            88454243,
            88450256,
            88459790,
            88452559,
            88453995,
            88452985,
            88451474,
            88453407,
            88450218,
            88453612,
            88453949,
            88452546,
            88454306,
            88453052,
            88449709,
            88452291
        ]
    },
    "name": "C. Uncle Bogdan and Country Happiness",
    "statement": "There are n cities and n 1 undirected roads connecting pairs of cities.\r\nCitizens of any city can reach any other city traveling by these roads.\r\nCities are numbered from 1 to n and the city 1 is a capital. In other\r\nwords, the country has a tree structure.There are m citizens living in\r\nthe country. A p_i people live in the i-th city but all of them are\r\nworking in the capital. At evening all citizens return to their home\r\ncities using the shortest paths. Every person has its own mood: somebody\r\nleaves his workplace in good mood but somebody are already in bad mood.\r\nMoreover any person can ruin his mood on the way to the hometown.\r\n.Happiness detectors are installed in each city to monitor the happiness\r\nof person who visits the city. The detector in the i-th city calculates\r\na happiness index h_i as the number of people in good mood minus the\r\nnumber of people in bad mood. Let\u2019s say for the simplicity that\r\n.Happiness detector is still in development, so there is a probability\r\nof a mistake in judging a person\u2019s happiness. One late evening, when all\r\ncitizens successfully returned home, the government asked uncle Bogdan\r\n(the best programmer of the country) to check the correctness of the\r\ncollected happiness indexes.Uncle Bogdan successfully solved the\r\nproblem. Can you do the same?More formally,\r\n",
    "solutions": [
        "#pragma GCC optimize(\"O3\")\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<set>\n#include<map>\nusing namespace std;\n#define MOD 1000000007\n#define f(i,n) for(long long i=0;i<(long long)(n);i++)\n#define N 200000\n\nlong long h[N];\nlong long a[N];\nvector<long long>e[N];\nbool used[N];\nbool v;\n\nlong long dfs(long long k) {\n\tused[k] = true;\n\tlong long re = 0;\n\tlong long s = 0;\n\tlong long sz = e[k].size();\n\tf(i, sz) {\n\t\tif (!used[e[k][i]]) {\n\t\t\tre += dfs(e[k][i]);\n\t\t\ts += h[e[k][i]];\n\t\t}\n\t}\n\tre += a[k];\n    s-=a[k];\n\tif (s > h[k])v = false;\n\telse if (re < h[k])v = false;\n\telse if ((re - h[k]) % 2 != 0)v = false;\n\treturn re;\n}\n\n\nint main() {\n\n\tf(i, N) {\n\t\ta[i] = 0;\n\t\th[i] = 0;\n\t}\n\tlong long n, m,k, t;\n\tlong long x, y, z;\n\tlong long s, ans;\n\tans = 0;\n\tscanf(\"%lld\", &t);\n\tf(tt, t) {\n\t\tscanf(\"%lld %lld\", &n, &m);\n\t\tf(i, n) {\n\t\t\tscanf(\"%lld\", &a[i]);\n\t\t}\n\t\tf(i, n) {\n\t\t\tscanf(\"%lld\", &h[i]);\n\t\t}\n\t\tf(i, n-1) {\n\t\t\tscanf(\"%lld %lld\", &x, &y);\n\t\t\tx--;\n\t\t\ty--;\n\t\t\te[x].push_back(y);\n\t\t\te[y].push_back(x);\n\t\t}\n\t\tv = true;\n\t\tf(i, n)used[i] = false;\n\t\tdfs(0);\n\t\tif (v)printf(\"YES\\n\");\n\t\telse printf(\"NO\\n\");\n\t\tf(i, n)e[i].clear();\n\t}\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "greedy",
        "math",
        "trees"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Uncle Bogdan and Country Happiness.json",
    "editorial_link": "https://codeforces.com//blog/entry/80828",
    "editorial": "For each city count how many people will visit it. Knowing this value\r\nand the value of the level of happiness , we can calculate how many\r\npeople visited the city in a good mood: .We can single out the\r\ncriterions for the correctness of the values of the happiness indices:\r\nis a multiple of . For each , an integer. . In each city the number of\r\nresidents who passed this city in a good mood a non-negative number not\r\nexceeding . where are the cities where the resident can move out of the\r\ncity on the way home. This follows from the fact that the mood of the\r\ninhabitants can be deteriorated and cannot be improved. This is enough,\r\nsince these conditions guarantee the correctness of the happiness\r\nindices by definition, as well as the peculiarities of changes in the\r\nmood of residents.\r\n"
}