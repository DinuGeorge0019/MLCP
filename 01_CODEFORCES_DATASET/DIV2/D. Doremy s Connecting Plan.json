{
    "link": "https://codeforces.com//contest/1890/problem/D",
    "problemId": "2253929",
    "problem_idx": "D",
    "shortId": "1890D",
    "contest_number": "1890",
    "problem_submissions": {
        "E2": [
            230243672,
            230240480,
            230297470,
            230254767,
            230258587,
            230244180,
            230254845,
            230249864,
            230263075,
            230246186
        ],
        "E1": [
            230239375,
            230240649,
            230254904,
            230258446,
            230244551,
            230252707,
            230254758,
            230249708,
            230262781,
            230215711,
            230246708,
            230241675,
            230236999,
            230227194,
            230225604,
            230238862,
            230234772,
            230232052,
            230239219
        ],
        "C": [
            230215281,
            230206393,
            230208934,
            230208092,
            230206406,
            230204020,
            230204003,
            230208271,
            230220692,
            230199138,
            230200556,
            230196035,
            230205630,
            230204581,
            230205712,
            230207645,
            230206074,
            230200943
        ],
        "D": [
            230200794,
            230211914,
            230214420,
            230213956,
            230250838,
            230215130,
            230243357,
            230434274,
            230253613,
            230238740,
            230207739,
            230228283,
            230207522,
            230211617,
            230214234,
            230212438,
            230213769,
            230217205,
            230221587,
            230210557
        ],
        "B": [
            230187228,
            230188639,
            230191975,
            230193314,
            230189140,
            230192487,
            230190081,
            230430791,
            230190255,
            230203446,
            230188113,
            230219697,
            230186542,
            230187036,
            230191039,
            230188308,
            230187745,
            230188740,
            230190731,
            230189120
        ],
        "A": [
            230183445,
            230183838,
            230195995,
            230187748,
            230183292,
            230186367,
            230183250,
            230430735,
            230183529,
            230188990,
            230184115,
            230213790,
            230183853,
            230183272,
            230185989,
            230183632,
            230183856,
            230183304,
            230184663,
            230511197,
            230183134
        ],
        "F": [
            230416243,
            230223460,
            232061512,
            232061382,
            232061156,
            230258558,
            230434262,
            230438215
        ]
    },
    "name": "D. Doremy s Connecting Plan",
    "statement": "Doremy lives in a country consisting of n cities numbered from 1 to n,\r\nwith a_i people living in the i-th city. It can be modeled as an\r\nundirected graph with n nodes.Initially, there are no edges in the\r\ngraph. Now Doremy wants to make the graph . To do this, she can add an\r\nedge between i and j if\r\nsum_{k\r\nin S} a_k\r\nge i\r\ncdot j\r\ncdot c, where S is the set of all the nodes that are currently in the\r\nsame connected component of either i or j, and c is a given constant.Can\r\nDoremy make the graph connected?Two nodes (i, j) are in the same\r\nconnected component if there exists a path from i to j. A graph is\r\nconnected if all its nodes are in the same connected component.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define il inline\nusing namespace std;\nconst int maxn=1000010;\nil ll read(){\n\tll x=0;\n\tchar c=getchar();\n\tfor(;!(c>='0'&&c<='9');c=getchar());\n\tfor(;c>='0'&&c<='9';c=getchar())\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\treturn x;\n}\nstruct node{\n\tll x,id;\n}a[maxn];\nint T,n;\nint C;\nbool cmp(node a,node b){\n\treturn a.id*C-a.x<b.id*C-b.x;\n}\nint main(){\n\tT=read();\n\twhile(T--){\n\t\tn=read(),C=read();\n\t\tfor(int i=1;i<=n;i++)\n\t\t\ta[i].x=read(),a[i].id=i;\n\t\tsort(a+2,a+1+n,cmp);\n\t\tll A=a[1].x; bool fl=1;\n\t\tfor(int i=2;i<=n;i++){\n\t\t\tif(A+a[i].x<a[i].id*C) fl=0;\n\t\t\tA+=a[i].x;\n\t\t}\n\t\tif(fl) printf(\"Yes\\n\");\n\t\telse printf(\"No\\n\");\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Doremy s Connecting Plan.json",
    "editorial_link": "https://codeforces.com//blog/entry/121813",
    "editorial": "First, we can just solve c=1\n. Because letting a?i=aic\n reduces c?1\n to c=1\n.\n\nFor convenience, let si=?aj\n, where j\n is currently connected with i\n.\n\nLet's see if you can add an edge between i\n and j\n (i?1,j?1\n) right now, it means\n\nsi+sj?i?j?i+j\n\nThis actually implies at least one of si?i\n and sj?j\n holds (otherwise si+sj<i+j\n). WLOG, let si?i\n be true. Therefore si+s1?1?i\n, which means you can add an edge between 1\n and i\n.\n\nMoreover, adding a new edge does not cause other edges that can be added to become unable to be added. So it's always good to add the edge between 1\n and i\n. Now we only need to decide the order.\n\nConsider this inequality si+s1?1?i\n. You can see that larger si?i\n is, faster node i\n is able to be linked with 1\n. So we can sort i\n by ai?i\n in descending order, and that is the order we need.\n\nTime complexity O(nlogn)\n.\n\nBonus: Time complexity can be O(n)\n based on this observation: If you link (1,i)\n, then any j<i\n can be linked to 1\n."
}