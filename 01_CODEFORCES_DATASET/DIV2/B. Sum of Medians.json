{
    "link": "https://codeforces.com//contest/1440/problem/B",
    "problemId": "798721",
    "problem_idx": "B",
    "shortId": "1440B",
    "contest_number": "1440",
    "problem_submissions": {
        "E": [
            98728391,
            98730128,
            98724308,
            98735269,
            98730903,
            98733313,
            98735079,
            98720072,
            98721791,
            98776063,
            98776025
        ],
        "B": [
            98718215,
            98690348,
            98694152,
            98694066,
            98717379,
            98694490,
            98698050,
            98691119,
            98694372,
            98737100,
            98701238,
            98693027,
            98692019,
            98693130,
            98694602,
            98691874,
            98694997,
            98690784
        ],
        "D": [
            98713473,
            98716992,
            98721114,
            98895168,
            98737070
        ],
        "C1": [
            98700917,
            98704185,
            98727324,
            98710881,
            98711510,
            98720805,
            98703327,
            98773521,
            98732444,
            98719724,
            98704756,
            98707436,
            98707143,
            98709098,
            98710542,
            98704302,
            98708466
        ],
        "C2": [
            98700859,
            98709321,
            98775076,
            98710936,
            98720737,
            98774165,
            98704870,
            98707384,
            98707212,
            98709164,
            98710454,
            98714510,
            98708395
        ],
        "A": [
            98687569,
            98688718,
            98687545,
            98693499,
            98688756,
            98688775,
            98687763,
            98689068,
            98687766,
            98699186,
            98688328,
            98687540,
            98687537,
            98688127,
            98688428,
            98687491,
            98687961
        ]
    },
    "name": "B. Sum of Medians",
    "statement": "A of an array of integers of length n is the number standing on the\r\nlceil {\r\nfrac{n}{2}}\r\nrceil (rounding up) position in the non-decreasing ordering of its\r\nelements. Positions are numbered starting with 1. For example, a median\r\nof the array [2, 6, 4, 1, 3, 5] is equal to 3. Given two integers n and\r\nk and array of nk integers. Divide all numbers into k arrays of size n,\r\nsuch that each number belongs to one array.You want the sum of medians\r\nof all k arrays to be the maximum possible. Find this maximum possible\r\nsum.\r\n",
    "solutions": [
        "#ifdef DEBUG\n#define _GLIBCXX_DEBUG\n#endif\n//#pragma GCC optimize(\"O3\")\n#include <stdio.h>\nint a[1000005];\nint main() {\n//    freopen(\"input.txt\", \"r\", stdin);\n    int tst;\n    scanf(\"%d\", &tst);\n    while (tst--) {\n        int n, k;\n        scanf(\"%d%d\", &n, &k);\n        for (int i = 0; i < n * k; i++) {\n            scanf(\"%d\", &a[i]);\n        }\n        long long ans = 0;\n        int step = (n + 2) / 2;\n        int from = (n * k) - step;\n        for (int c = 0; c < k; c++) {\n            ans += a[from];\n            from -= step;\n        }\n        printf(\"%I64d\\n\", ans);\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Sum of Medians.json",
    "editorial_link": "https://codeforces.com//blog/entry/84731",
    "editorial": "We will consider a greedy approach. We take the biggest numbers from the\r\nend of the array and the smallest numbers from the beginning. We take\r\nthese elements as one group, erase them from our array and then continue\r\nthe same procedure on the remaining array. This can be done in a loop of\r\n, by taking every th character. We can also prove this claim. Imagine we\r\nhave marked elements to be the medians of these arrays. Each one of\r\nthese elements need at least elements bigger than them and at least\r\nelements smaller than them to form a group in which it they are the\r\nmedian. So we can always push the biggest of these numbers forward until\r\nwe have exactly elements bigger than them, and by pushing forward the\r\nsum of medians either doesnât change or gets larger. So our algorithm\r\nwill always give the biggest possible answer.Time complexity: for each\r\ntestcase\r\n",
    "hint": []
}