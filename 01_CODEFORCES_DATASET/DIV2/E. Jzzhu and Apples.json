{"link": "https://codeforces.com//contest/450/problem/E", "problemId": "11564", "problem_idx": "E", "shortId": "450E", "contest_number": "450", "problem_submissions": {"D": [7172300, 7189969, 7168692, 7168762, 7167893, 7173883, 7186151, 7172954, 7166069, 7167002], "C": [7163293, 7165488, 7162708, 7162772, 7171630, 7164674, 7167537, 7166382, 7164102, 7164882, 7160663, 7166275], "B": [7158888, 7159995, 7159436, 7163539, 7160088, 7159602, 7162497, 7161041, 7159252, 7161370, 7160845, 7161199, 7162311, 7159103, 7162904], "A": [7157648, 7158191, 7157937, 7159395, 7157906, 7158093, 7157984, 7167878, 7158537, 7157963, 7160445, 7158752, 7157827, 7158223, 7157598, 7158189], "E": [7171266, 7172113, 7171025]}, "name": "E. Jzzhu and Apples", "statement": "Jzzhu has picked apples from his big apple tree. All the apples are\r\nnumbered from to . Now he wants to sell them to an apple store. Jzzhu\r\nwill pack his apples into groups and then sell them. Each group must\r\ncontain two apples, and the greatest common divisor of numbers of the\r\napples in each group must be greater than 1. Of course, each apple can\r\nbe part of at most one group.Jzzhu wonders how to get the maximum\r\npossible number of groups. Can you help him?\r\n", "solutions": ["#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#define pb push_back\nusing namespace std;\nvector<int > vv,er;\n#define N 100005\nint a[N];\nbool vis[N],ok[N];\nint ans[N][2];\nint o,an,n;\nvoid pre()\n{   memset(vis,0,sizeof(vis));\n    for (int i=2;i<N;i++)\n        if (!vis[i])\n            for (int j=i+i;j<N;j+=i)\n            vis[j]=1;\n    for (int i=2;i<N;i++)\n        if (!vis[i])a[o++]=i;\n}\nvoid doit()\n{   memset(ok,0,sizeof(ok));\n    an=0;er.clear();\n    for (int i=o-1;i>=1;i--)\n         {  int tmp=0;\n            vv.clear();\n            for (int j=a[i];j<=n;j+=a[i])\n                if (!ok[j])\n                     {\n                         ok[j]=1;\n                         vv.pb(j);\n                         tmp++;\n                     }\n            if (vv.size()<=1)continue;\n            if (vv.size()%2==0)\n                 {   int g=vv.size()/2;\n                     for (int i=0;i<g;i++)\n                        {ans[an][0]=vv[i*2];\n                        ans[an][1]=vv[i*2+1];\n                        an++;}\n                 }\n            else {  er.pb(a[i]*2);\n                    ans[an][0]=vv[0];\n                    ans[an][1]=vv[2];\n                    an++;\n                    int g=vv.size()/2-1;\n                    for (int i=0;i<g;i++)\n                        {ans[an][0]=vv[i*2+3];\n                        ans[an][1]=vv[i*2+4];\n                        an++;}\n                 }\n         }\n    for (int j=2;j<=n;j+=2)\n                if (!ok[j])\n                     {\n                         ok[j]=1;\n                         er.pb(j);\n                     }\n    int g=er.size()/2;\n                         for (int i=0;i<g;i++)\n                        {ans[an][0]=er[i*2];\n                        ans[an][1]=er[i*2+1];\n                        an++;}\n    printf(\"%d\\n\",an);\n    for (int i=0;i<an;i++)\n        printf(\"%d %d\\n\",ans[i][0],ans[i][1]);\n}\nint main()\n{   pre();\n    while (scanf(\"%d\",&n)!=EOF) doit();\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "number theory"], "dificulty": "2500", "interactive": false}