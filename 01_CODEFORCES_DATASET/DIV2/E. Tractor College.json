{
    "link": "https://codeforces.com//contest/200/problem/E",
    "problemId": "1454",
    "problem_idx": "E",
    "shortId": "200E",
    "contest_number": "200",
    "problem_submissions": {
        "B": [
            1825841,
            1826464,
            1826083,
            1826275,
            1826382,
            1825859,
            1826268,
            1825884,
            1825868,
            1825906,
            1826093,
            1825853,
            1826140,
            1826219,
            1826016
        ],
        "D": [
            1827953,
            1827519,
            1828417,
            1827605,
            1827984,
            1827121,
            1828276,
            1828188,
            1828202,
            1828182,
            1828229,
            1828355,
            1828376,
            1828201
        ],
        "C": [
            1827310,
            1827007,
            1827388,
            1827250,
            1827071,
            1827751,
            1827110,
            1827499,
            1827231,
            1827512,
            1827236,
            1827297,
            1827317,
            1827455
        ],
        "E": [
            1831278,
            1831185,
            1829707
        ],
        "A": []
    },
    "name": "E. Tractor College",
    "statement": "While most students still sit their exams, the tractor college has\r\ncompleted the summer exam session. In fact, students study only one\r\nsubject at this college the Art of Operating a Tractor. Therefore, at\r\nthe end of a term a student gets only one mark, a three (satisfactory),\r\na four (good) or a five (excellent). Those who score lower marks are\r\nunfortunately expelled.The college has students, and oddly enough, each\r\nof them can be on scholarship. The size of the scholarships varies each\r\nterm. Since the end-of-the-term exam has just ended, it\u2019s time to\r\ndetermine the size of the scholarship to the end of next term.The\r\nmonthly budget for the scholarships of the Tractor college is rubles. To\r\ndistribute the budget optimally, you must follow these rules: The\r\nstudents who received the same mark for the exam, should receive the\r\nsame scholarship; Let us denote the size of the scholarship (in roubles)\r\nfor students who have received marks , and for the exam, as , and ,\r\nrespectively. The values , and must be integers and satisfy the\r\ninequalities ; Let\u2019s assume that , , show how many students received\r\nmarks , and for the exam, respectively. The budget of the scholarship\r\nshould be fully spent on them, that is, ; Let\u2019s introduce function the\r\nvalue that shows how well the scholarships are distributed between\r\nstudents. In the optimal distribution function takes the possible value.\r\nGiven the results of the exam, and the budget size , you have to find\r\nthe optimal distribution of the scholarship.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <algorithm>\n#include <cstdlib>\n#include <climits>\n#include <cassert>\n#include <utility>\n\nusing namespace std;\n\nint n,s;\nint c3,c4,c5;\nint k4;\nint g;\nint X4;\n\nint gcd(int a, int b) {\n        while(b) {\n                int t = b;\n                b = a % b;\n                a = t;\n        }\n        return a;\n}\n\n#define mp make_pair\n\ntypedef long long LL;\n\npair<LL,LL> find_soln(LL a,LL b) {\n        if(b==0)return mp(1,0);\n        LL q = a / b;\n        LL r = a % b;\n        pair<LL,LL> temp = find_soln(b,r);\n        return mp(temp.second,temp.first-q*temp.second);\n}\n\nLL inf = (1LL<<40);\n\n#define TOO_HIGH (LLONG_MAX-1)\n#define TOO_LOW (LLONG_MAX-2)\n#define INF (LLONG_MAX-3)\n\nLL calc_value(LL k3, LL k5) {\n        if (k3 < 0) return TOO_HIGH;\n        if (k3 > k4 || k4 > k5) return TOO_LOW;\n        LL X3 = c3;\n        X3 *= k3;\n        LL X5 = c5;\n        X5 *= k5;\n        return llabs(X3-X4)+llabs(X4-X5);\n}\n\nint main() {\n        scanf(\"%d %d\",&n,&s);\n        c3=c4=c5=0;\n        for(int i=0;i<n;i++){\n                int mark;\n                scanf(\"%d\",&mark);\n                if (mark == 3)c3++;\n                if (mark == 4)c4++;\n                if (mark == 5)c5++;\n        }\n        g = gcd(c3,c5);\n        pair<pair<LL,int>,pair<int,int> > best;\n        best.first.first = INF;\n        for(k4=X4=0;X4<=s;k4++,X4+=c4) {\n                if ((s-X4)%g == 0) {\n                        pair<LL,LL> soln = find_soln(c3,c5);\n                        soln.first *= (s-X4)/g;\n                        soln.second *= (s-X4)/g;\n\n\n                        int t = c3 / g;\n                        int s = c5 / g;\n                        // solutions are soln.first - y * s, soln.second + y * t\n                        LL y = 0;\n                        LL value = calc_value(soln.first, soln.second);\n                        for (int add = 1<<20; add; add >>= 1) {\n                                while (true) {\n                                        LL newy = y - add;\n                                        LL newvalue;\n                                        newvalue=calc_value(soln.first - newy * s, soln.second + newy * t);\n                                        if (newvalue == TOO_HIGH || newvalue < value) {\n                                                value = min(newvalue, INF);\n                                                y = newy;\n                                        } else break;\n                                }\n                                while (true) {\n                                        LL newy = y + add;\n                                        LL newvalue;\n                                        newvalue=calc_value(soln.first - newy * s, soln.second + newy * t);\n                                        if (newvalue == TOO_LOW || newvalue < value) {\n                                                value = min(newvalue, INF);\n                                                y = newy;\n                                        } else break;\n                                }\n                        }\n                        best = min(best, mp(mp(value,int(soln.first-y*s)),mp(k4,int(soln.second+y*t))));\n                }\n        }\n        if (best.first.first >= INF) {\n                printf(\"-1\\n\");\n        } else {\n                printf(\"%d %d %d\\n\",best.first.second,best.second.first,best.second.second);\n        }\n        return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math",
        "number theory",
        "ternary search"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Tractor College.json",
    "editorial_link": "https://codeforces.com//blog/entry/4769",
    "editorial": "In this problem were given four integer numbers . You had to find such,\r\nthat and is minimal. Firstly, brute-force so, that . Than look at 4\r\ncases, according to the sign of the value in each modulus. Lets see the\r\ncase, when and . Than we have to minimize . Also and . Lets see diofant\r\nequation . It can be that this equation doesn\u00e2\u0080\u0099t have solution. Lets see\r\nthe case, when equation has solution. As , than for minimization we have\r\nto minimize and maximize . All solutions of diofant equation can be\r\ndescribed by using one argument . Than we have to find such segment,\r\nthat for all from it, will fit above constrains, such segment, that for\r\nall from it, will fit above constrains, find intersection of this\r\nsegments and, if intersection isn\u00e2\u0080\u0099t empty, choose such , that is\r\nmaximal. Similar you have to manage remain 3 cases and choose optimal\r\nvalues and for fixed . Also you can note, that in all cases minimized\r\nfunction is linear and in segment it has minimal value in one of its\r\nends. So we can only find such segments, that for all from that segments\r\nwill fit above constrains, and calculate answer in the ends of this\r\nsegments. If for all fixed diofant equation doesn\u00e2\u0080\u0099t have solution, or\r\nintersections of the described segments are empty, than answer is , else\r\nwe should find the best. So the time complexity is brute-force of and\r\nsolving diofant equation for fixed .\r\n"
}