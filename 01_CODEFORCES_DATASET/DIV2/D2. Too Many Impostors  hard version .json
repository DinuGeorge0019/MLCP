{
    "link": "https://codeforces.com//contest/1617/problem/D2",
    "problemId": "1229934",
    "problem_idx": "D2",
    "shortId": "1617D2",
    "contest_number": "1617",
    "problem_submissions": {
        "D2": [
            139528258,
            139511137,
            139522542,
            139519708,
            139520670,
            139523783,
            139518761,
            139530052,
            139554537,
            139536292,
            139522659,
            139517981,
            139512155,
            139519772,
            139538893,
            139543913,
            139531998
        ],
        "E": [
            139517842,
            139538424,
            139497648,
            139535975,
            139534847,
            139545980,
            139543568,
            139544780,
            139542416,
            139541142,
            139546720,
            139613086,
            139612916
        ],
        "D1": [
            139501429,
            139511244,
            139522629,
            139519806,
            139515622,
            139513160,
            139518872,
            139525357,
            139508478,
            139513182,
            139525031,
            139501096,
            139517883,
            139503934,
            139519698,
            139505351,
            139502672,
            139513862
        ],
        "C": [
            139489946,
            139490132,
            139526014,
            139489601,
            139500619,
            139496413,
            139508980,
            139499423,
            139495044,
            139500428,
            139504938,
            139495573,
            139492326,
            139510250,
            139491535,
            139494498,
            139495193,
            139495421
        ],
        "B": [
            139486471,
            139485548,
            139527692,
            139491898,
            139493048,
            139490679,
            139500877,
            139490165,
            139489596,
            139492975,
            139498385,
            139485704,
            139488427,
            139502448,
            139486742,
            139489499,
            139488312,
            139490271
        ],
        "A": [
            139485264,
            139485036,
            139530317,
            139495566,
            139490417,
            139485662,
            139494269,
            139485815,
            139485225,
            139486039,
            139485608,
            139487143,
            139485767,
            139485406,
            139485431,
            139485561,
            139486024,
            139485975
        ]
    },
    "name": "D2. Too Many Impostors  hard version ",
    "statement": "There are n players labelled from 1 to n. Among them, there are k\r\nimpostors and n-k crewmates. The number of impostors, k, is not given to\r\nyou. In each question, you can choose three distinct integers a, b, c (1\r\nle a, b, c\r\nle n) and ask: \"Among the players labelled a, b and c, are there more\r\nimpostors or more crewmates?\" You will be given the integer 0 if there\r\nare more impostors than crewmates, and 1 otherwise.Find the number of\r\nimpostors k and the indices of players that are impostors after asking\r\nat most n+6 questions.The jury is , which means the indices of impostors\r\nmay not be fixed beforehand and can depend on your questions. It is\r\nguaranteed that there is at least one set of impostors which fulfills\r\nthe constraints and the answers to your questions at any time.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nusing LL = long long;\nint query(int a, int b, int c) {\n\tcout << \"? \" << a << \" \" << b << \" \" << c << endl;\n\tint res;\n\tcin >> res;\n\treturn res;\n}\nvoid answer(vector<int>& v) {\n\tcout << \"! \" << v.size();\n\tfor (int x : v) cout << \" \" << x;\n\tcout << endl;\n}\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\tint t;\n\tfor (cin >> t; t; t -= 1) {\n\t\tint n;\n\t\tcin >> n;\n\t\tvector<int> v(n + 1);\n\t\tint x1 = -1, x2 = -1, x3 = -1;\n\t\tint y1 = -1, y2 = -1, y3 = -1;\n\t\tfor (int i = 1; i <= n; i += 3)  {\n\t\t\tv[i] = query(i, i + 1, i + 2);\n\t\t\tif (v[i] == 0)\n\t\t\t\tx1 = i, x2 = i + 1, x3 = i + 2;\n\t\t\tif (v[i] == 1)\n\t\t\t\ty1 = i, y2 = i + 1, y3 = i + 2;\n\t\t}\n\t\tassert(x1 != -1 and y1 != -1);\n\t\tvector<int> w[2];\n\t\tint a = query(x1, x2, y1) or query(x1, x2, y2);\n\t\tint b = query(x2, x3, y1) or query(x2, x3, y2);\n\t\tw[a == 1 and b == 0].push_back(x1);\n\t\tw[a == 1 and b == 1].push_back(x2);\n\t\tw[a == 0 and b == 1].push_back(x3);\n\t\tauto find = [&](int x, int y, int ic) {\n\t\t\tint a = query(y, y + 1, x), b = query(y + 1, y + 2, x);\n\t\t\tw[(a != ic and b == ic) ^ ic].push_back(y);\n\t\t\tw[(a != ic and b != ic) ^ ic].push_back(y + 1);\n\t\t\tw[(a == ic and b != ic) ^ ic].push_back(y + 2);\n\t\t};\n\t\tfind(w[0][0], y1, 1);\n\t\tfor (int i = 1; i <= n; i += 3) if (i != x1 and i != y1)\n\t\t\tfind(w[v[i] ^ 1][0], i, v[i]);\n\t\tanswer(w[0]);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation",
        "interactive",
        "math"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D2. Too Many Impostors  hard version .json",
    "editorial_link": "https://codeforces.com//blog/entry/97920",
    "editorial": "Thanks must be given to arvindf232 and generic_placeholder_name for the\r\nsolution. Solution (Step 1)Firstly query (), (), , (). Due to the\r\nconstraint , among the results of these queries, there must be at least\r\none and one . Now, let\u00e2\u0080\u0099s call a tuple () that returns a -majority tuple,\r\nand vice versa. From the easy version, notice that finding one crewmate\r\nand one impostor is very helpful in determining the roles of the\r\nremaining players. Let\u00e2\u0080\u0099s make use of the above observation, and pick one\r\nadjacent -majority tuple and -majority tuple. Let\u00e2\u0080\u0099s say we picked () and\r\n(). Then, we query () and (). Among the four queries (), (), (), (),\r\nthere must be a pair of adjacent queries with different results. From\r\nthe easy version, we can directly find the index of an impostor and a\r\ncrewmate.In all the above cases, we end up knowing an impostor and a\r\ncrewmate using queries, including the first step.\r\n"
}