{"link": "https://codeforces.com//contest/357/problem/D", "problemId": "3674", "problem_idx": "D", "shortId": "357D", "contest_number": "357", "problem_submissions": {"B": [4793165, 4790671, 4790250, 4790732, 4789966, 4794384, 4790483, 4793777, 4791105, 4794251, 4792633, 4794265, 4797403, 4791961, 4791308, 4792766, 4792762, 4791518, 4791534], "E": [4792740, 4796981, 4794905, 4795563, 8133292, 4797281, 4797117, 4797714, 4818355, 4795453, 4815512], "D": [4791194, 4792398, 4796019, 13876397, 4795091, 4792720, 4795403, 4795251, 4795347, 4800965, 4793015, 4793047, 4795738, 4797292, 4797189, 4796792, 4797421, 4797480], "C": [4790335, 4793550, 4792714, 4792177, 4790608, 4790052, 4791853, 4802081, 4793017, 4791896, 4793793, 4795727, 4790582, 4793993, 4792800, 4792706, 4792267, 4794284, 4793834, 4794365], "A": [4789474, 4789484, 4789445, 4789522, 4789426, 4794710, 4789436, 4789534, 4789500, 4789425, 4790008, 4790549, 4798002, 4790618, 4789465, 10909387, 4789460, 4789552, 4789833]}, "name": "D. Xenia and Hamming", "statement": "Xenia is an amateur programmer. Today on the IT lesson she learned about\r\nthe Hamming distance.The Hamming distance between two strings and of\r\nequal length is value . Record is the Iverson notation and represents\r\nthe following: if , it is one, otherwise zero.Now Xenia wants to\r\ncalculate the Hamming distance between two long strings and . The first\r\nstring is the concatenation of copies of string , that is, . The second\r\nstring is the concatenation of copies of string . Help Xenia, calculate\r\nthe required Hamming distance, given .\r\n", "solutions": ["#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\ntypedef long long LL;\nconst int V=1000100;\nchar s[V],t[V];\nint gcd(int x,int y)\n{\n    if(!y)return x;\n    if(!x)return y;\n    return gcd(y,x%y);\n}\nLL n,m;\nint ct[V][26];\nint main()\n{\n    while(cin>>n>>m)\n    {\n        scanf(\"%s%s\",s,t);\n        int ls=strlen(s);\n        int lt=strlen(t);\n        int gd=gcd(ls,lt);\n        LL cp=n*ls/((LL)ls/gd*lt);\n        memset(ct,0,sizeof(ct));\n        for(int i=0;i<lt;i++)\n        ct[i%gd][t[i]-'a']++;\n        LL ret=(LL)ls/gd*lt;\n        for(int i=0;i<ls;i++)\n        ret-=ct[i%gd][s[i]-'a'];\n        cout<<ret*cp<<endl;\n    }\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["number theory"], "dificulty": "1900", "interactive": false}