{
    "link": "https://codeforces.com//contest/1589/problem/D",
    "problemId": "1186199",
    "problem_idx": "D",
    "shortId": "1589D",
    "contest_number": "1589",
    "problem_submissions": {
        "F": [
            135392401,
            135383659,
            135613163,
            136073664,
            136061292
        ],
        "A": [
            135375124,
            135343090,
            135343827,
            135343075,
            135344151,
            135347290,
            135347165,
            135342903,
            135346750,
            135343453,
            135344492,
            135344059,
            135383305,
            135346270,
            135343510,
            135389951,
            135347174,
            135344135,
            135344697,
            135345131
        ],
        "B": [
            135373165,
            135350018,
            135350022,
            135361256,
            135347559,
            135355629,
            135351622,
            135348865,
            135351792,
            135350073,
            135347389,
            135345202,
            135388137,
            135356455,
            135347142,
            135353182,
            135350595,
            135348956,
            135346782
        ],
        "E": [
            135366850,
            135380426,
            135378894,
            135377065,
            135387081,
            135379118,
            135387473,
            135388354,
            135387609,
            135390750,
            135374822,
            135380067,
            135366481,
            135412322,
            135387828,
            135373661,
            135373029,
            135375843
        ],
        "D": [
            135353894,
            135387455,
            135356345,
            135358960,
            135370454,
            135364511,
            135368677,
            135363277,
            135359493,
            135367483,
            135392033,
            135389301,
            135377180,
            135364477,
            135360697,
            135371907,
            135375411,
            135482600
        ],
        "C": [
            135344934,
            135351797,
            135347327,
            135352110,
            135350833,
            135347466,
            135354024,
            135346228,
            135353727,
            135346489,
            135352889,
            135347193,
            135347207,
            135347187,
            135349483,
            135346265,
            135355770,
            135353671,
            135357934,
            135349393
        ]
    },
    "name": "D. Guess the Permutation",
    "statement": "Jury initially had a sequence a of length n, such that a_i = i.The jury\r\nchose three integers i, j, k, such that 1\r\nleq i < j < k\r\nleq n, j - i > 1. After that, Jury reversed subsegments [i, j - 1] and\r\n[j, k] of the sequence a.Reversing a subsegment [l, r] of the sequence a\r\nmeans reversing the order of elements a_l, a_{l+1},\r\nldots, a_r in the sequence, i. e. a_l is swapped with a_r, a_{l+1} is\r\nswapped with a_{r-1}, etc.You are given the number n and you should find\r\ni, j, k after asking some questions.In one question you can choose two\r\nintegers l and r (1\r\nleq l\r\nleq r\r\nleq n) and ask the number of inversions on the subsegment [l, r] of the\r\nsequence a. You will be given the number of pairs (i, j) such that l\r\nleq i < j\r\nleq r, and a_i > a_j.Find the chosen numbers i, j, k after at most 40\r\nquestions.The numbers i, j, and k are fixed before the start of your\r\nprogram and do not depend on your queries.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nint read() {\n\tint x=0,f=1;char c=getchar();\n\twhile(c>'9'||c<'0') {if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9') {x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nint ask(int l,int r) {\n\tprintf(\"? %d %d\\n\",l,r);fflush(stdout);\n\treturn read();\n}\nvoid work() {\n\tint n=read(),l=2,r=n-3,mid,tot=ask(1,n);\n\twhile(l<=r) {\n\t\tmid=(l+r)>>1;\n\t\tif(ask(mid,n)==tot)l=mid+1;\n\t\telse r=mid-1;\n\t}\n\tint i=r,j=i+tot-ask(r+1,n)+1,k=j+ask(j,n)-ask(j+1,n);\n\tprintf(\"! %d %d %d\\n\",i,j,k);fflush(stdout);\n}\nint main() {\n\tint T=read();\n\twhile(T--)work();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics",
        "interactive",
        "math"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Guess the Permutation.json",
    "editorial_link": "https://codeforces.com//blog/entry/96953",
    "editorial": "Note that the number of inversions on decreasing sequence of length l\n is (l2)\n.\n\nAs we reversed two non-overlaping subsegments, the number of inversions on each subsegment is equal to sum of number of inversions of parts of reversed subsegments, which are decreasing.\n\nFirst of all, let's find A:=(k?j+12)+(j?i2)\n \u0097 total number of inversions in sequence. We use 1 question for that.\n\nNow let's look on the number of inversions on subsegment [x\n, n\n]. If this number is less than A, then not both reversed subsegments fit entirely, so i<x\n, otherwise i?x\n.\n\nNow we can apply binnary search to find i\n. We use log2(n)\n questions here.\n\nNow let's ask the number of inversions on subsegment [i+1\n, n\n], let's call this number B. We use 1\n question here. From the structure of sequence: A?B\n = |{x|x>i,ax<ai}|\n = |[i+1,j?1]|\n = j?i?1\n.\n\nNow we can find j?i\n, j\n and (j?i2)\n, due to the definition of A, we find (k?j+12)\n.\n\nFinaly, we can solve quadratic equation for k?j+1\n and get k\n.\n\nOverall, we used log2(n)+2?32\n questions, but we gave you a bit more, in case your solution uses few more questions on some stage."
}