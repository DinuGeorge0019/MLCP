{"link": "https://codeforces.com//contest/149/problem/D", "problemId": "896", "problem_idx": "D", "shortId": "149D", "contest_number": "149", "problem_submissions": {"E": [1166748, 1167898, 1167706, 1167062, 1168119, 1166122, 1166620, 1180098, 1166477, 1174675, 1168703], "D": [1164419, 1165531, 1165306, 1167884, 1166269, 1165035, 1166389, 1166109, 1170884, 1168057, 1168286, 1168301, 1166381, 1167820, 1166746, 1167254], "C": [1163610, 1164091, 1166729, 1163074, 1164324, 1166838, 1164648, 1163955, 1163257, 1164156, 1165163, 1165364, 1163684, 1164576, 1163848, 1164438, 1163813], "A": [1161525, 1161700, 1161485, 1162080, 1161445, 1161719, 1162271, 1161578, 1161605, 1161624, 1162068, 1161422, 1170499, 1161442, 1161589, 1162328], "B": [1163315, 1165673, 1163493, 1165775, 1163479, 1163666, 1163250, 1164374, 1163398, 1163280, 1164630, 1168461, 1163446, 1163638]}, "name": "D. Coloring Brackets", "statement": "Once Petya read a problem about a bracket sequence. He gave it much\r\nthought but didn\u2019t find a solution. Today you will face it.You are given\r\nstring . It represents a correct bracket sequence. A correct bracket\r\nsequence is the sequence of opening (\"\") and closing (\"\") brackets, such\r\nthat it is possible to obtain a correct mathematical expression from it,\r\ninserting numbers and operators between the brackets. For example, such\r\nsequences as \"\" and \"\" are correct bracket sequences and such sequences\r\nas \"\" and \"\" are not.In a correct bracket sequence each bracket\r\ncorresponds to the matching bracket (an opening bracket corresponds to\r\nthe matching closing bracket and vice versa). For example, in a bracket\r\nsequence shown of the figure below, the third bracket corresponds to the\r\nmatching sixth one and the fifth bracket corresponds to the fourth one.\r\nYou are allowed to color some brackets in the bracket sequence so as all\r\nthree conditions are fulfilled: Each bracket is either not colored any\r\ncolor, or is colored red, or is colored blue. For any pair of matching\r\nbrackets exactly one of them is colored. In other words, for any bracket\r\nthe following is true: either it or the matching bracket that\r\ncorresponds to it is colored. No two neighboring colored brackets have\r\nthe same color. Find the number of different ways to color the bracket\r\nsequence. The ways should meet the above-given conditions. Two ways of\r\ncoloring are considered different if they differ in the color of at\r\nleast one bracket. As the result can be quite large, print it modulo ().\r\n", "solutions": ["#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n#include <cstdlib>\n#include <string>\n#include <queue>\n#include <map>\n#include <set>\n\n#define MAX 768\n#define MOD 1000000007\n\nusing namespace std;\nFILE *in; FILE *out;\n\nint n;\nchar a[MAX];\nlong long dyn[MAX][MAX][3][3];\n\nlong long recurse(int left, int right, int colL, int colR)\n{\n\tif (left > right)\n\t\treturn 1;\n\tif (dyn[left][right][colL][colR] != -1)\n\t\treturn dyn[left][right][colL][colR];\n\t\n\tlong long ans = 0;\n\tint cnt = 1;\n\tint idx = left + 1;\n\twhile (idx <= right)\n\t{\n\t\tif (a[idx] == '(') cnt++;\n\t\telse cnt--;\n\t\tif (cnt == 0) break;\n\t\tidx++;\n\t}\n\t// Color left\n\tif (colL != 1)\n\t\tans += (recurse(left + 1, idx - 1, 1, 0) * recurse(idx + 1, right, 0, colR)) % MOD;\n\tif (colL != 2)\n\t\tans += (recurse(left + 1, idx - 1, 2, 0) * recurse(idx + 1, right, 0, colR)) % MOD;\n\t\n\t// Color right\n\tif (idx == right)\n\t{\n\t\tif (colR != 1)\n\t\t\tans += recurse(left + 1, idx - 1, 0, 1);\n\t\tif (colR != 2)\n\t\t\tans += recurse(left + 1, idx - 1, 0, 2);\n\t}\n\telse\n\t{\n\t\tans += (recurse(left + 1, idx - 1, 0, 1) * recurse(idx + 1, right, 1, colR)) % MOD;\n\t\tans += (recurse(left + 1, idx - 1, 0, 2) * recurse(idx + 1, right, 2, colR)) % MOD;\n\t}\n\treturn dyn[left][right][colL][colR] = ans % MOD;\n}\n\nint main(void)\n{\n\tin = stdin; out = stdout;\n//\tin = fopen(\"D.in\", \"rt\"); out = fopen(\"D.out\", \"wt\");\n\t\n\tfscanf(in, \"%s\", a);\n\tn = (int)strlen(a);\n\tmemset(dyn, -1, sizeof(dyn));\n\tfprintf(out, \"%d\\n\", (int)recurse(0, n - 1, 0, 0));\n\t\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["dp"], "dificulty": "1900", "interactive": false}