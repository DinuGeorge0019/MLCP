{
    "link": "https://codeforces.com//contest/614/problem/C",
    "problemId": "45528",
    "problem_idx": "C",
    "shortId": "614C",
    "contest_number": "614",
    "problem_submissions": {
        "B": [
            15353969,
            15350260,
            15350615,
            15350680,
            15348454,
            15350100,
            15350974,
            15353463,
            15352422,
            15357694,
            15351731,
            15351010,
            15355162,
            15361196,
            15359446,
            15372090,
            15355813
        ],
        "D": [
            15367152,
            15366645,
            15367844,
            15371803,
            15371151,
            15372297,
            15371070,
            15371375,
            15373375,
            15370561
        ],
        "C": [
            15353832,
            15359347,
            15364158,
            15355108,
            15361144,
            15358460,
            15370476,
            15360373,
            15359826,
            15363428,
            15360933,
            15363074,
            15366533
        ],
        "A": [
            15347068,
            15347426,
            15347654,
            15414018,
            15347337,
            15348138,
            15348507,
            15347653,
            15355380,
            15364322,
            15353145,
            15361803,
            15348451
        ],
        "E": [
            15380705
        ]
    },
    "name": "C. Peter and Snow Blower",
    "statement": "Peter got a new snow blower as a New Year present. Of course, Peter\r\ndecided to try it immediately. After reading the instructions he\r\nrealized that it does not work like regular snow blowing machines. In\r\norder to make it work, you need to tie it to some point that it does not\r\ncover, and then switch it on. As a result it will go along a circle\r\naround this point and will remove all the snow from its path.Formally,\r\nwe assume that Peter\u2019s machine is a polygon on a plane. Then, after the\r\nmachine is switched on, it will make a circle around the point to which\r\nPeter tied it (this point lies strictly outside the polygon). That is,\r\neach of the points lying within or on the border of the polygon will\r\nmove along the circular trajectory, with the center of the circle at the\r\npoint to which Peter tied his machine.Peter decided to tie his car to\r\npoint and now he is wondering what is the area of the region that will\r\nbe cleared from snow. Help him.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int,int> PII;\n#define MP make_pair\n#define PB push_back\n#define AA first\n#define BB second\n#define OP begin()\n#define ED end()\n#define SZ size()\n#define cmin(x,y) x=min(x,y)\n#define cmax(x,y) x=max(x,y)\n#define NAME \"\"\n#define UsingFile 0\nconst LL MOD = 1000000007;\nconst double eps = 1e-8;\nconst double PI = acos(-1.);\nint sign( double x ) {return x<-eps?-1:x>eps;}\nstruct point {\n    double x, y;\n    point( double _x=0, double _y=0 ) : x( _x ), y( _y ) {}\n    point operator - ( point p ) {return point( x-p.x,y-p.y );}\n    point operator + ( point p ) {return point( x+p.x,y+p.y );}\n    point operator * ( double d ) {return point( x*d,y*d );}\n    point operator / ( double d ) {return point( x/d,y/d );}\n    bool operator < ( const point &p ) const {\n        return sign( x - p.x ) == 0 ? sign( y - p.y ) <= 0 : sign( x - p.x ) <= 0;\n    }\n    double operator *( point p ) {return x*p.x+y*p.y;}//dot\n    double operator ^( point p ) {return x*p.y-y*p.x;}//det\n    double len() {return sqrt( x*x+y*y );}\n    double arc() {return atan2( y, x );}\n    point normal() {return ( *this ) / this->len();}\n    point rotate() {return point( -y, x );}\n    point rotate( double arc )\n    {return point( x*cos( arc ) - y*sin( arc ),x*sin( arc ) + y*cos( arc ) );}\n    double dis( point p ) {return ( *this - p ).len();}\n    double dis2( point p ) {p = p - ( *this ); return p*p;}\n    void read() {scanf( \"%lf%lf\", &x, &y );}\n    void write( char *s=\"\" ) {printf( \"(%f,%f)%s\",x,y,s );}\n} Orz( 0,0 );\nbool isLL( point p1, point p2, point q1, point q2 ,point &is ) {\n    double m=( q2-q1 )^( p1-q1 ),n=( q2-q1 )^( p2-q1 );\n    if ( sign( n-m )==0 )return 0;\n    is= ( p1*n-p2*m )/( n-m );\n    return 1;\n}\npoint p[100005];\nint main(){\n    if(UsingFile)freopen(NAME\".in\",\"r\",stdin);\n    if(UsingFile)freopen(NAME\".out\",\"w\",stdout);\n    int i,j,k,_T;\n    int n;\n    point O;\n    while(~scanf(\"%d\",&n)){\n    \tO.read();\n    \tfor(i=0;i<n;i++)p[i].read();\n    \tp[n]=p[0];\n    \tdouble le=1e7,re=0;\n    \tfor(i=0;i<n;i++){\n    \t\tpoint A=p[i],B=p[i+1],C;\n    \t\tint flag=isLL(A,B,O,O+(A-B).rotate(),C);\n    \t\tcmin(le,(A-O).len());\n    \t\tcmin(le,(B-O).len());\n    \t\tcmax(re,(A-O).len());\n    \t\tcmax(re,(B-O).len());\n    \t\tif(flag&&((C-A)*(C-B))<0){\n    \t\t\tcmin(le,(C-O).len());\n    \t\t\tcmax(re,(C-O).len());\n    \t\t}\n    \t}\n    \tdouble ans=PI*(re*re-le*le);\n    \tprintf(\"%.16f\\n\",ans);\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Peter and Snow Blower.json",
    "editorial_link": "https://codeforces.com//blog/entry/22832",
    "editorial": "Consider distances between the point P and all points of the polygon. Let R be the largest among all distances, and r be the smallest among all distances. The swept area is then a ring between circles of radii R and r, and the answer is equal to ? (R2?-?r2).\n\nClearly, R is the largest distance between P and vertices of the polygon. However, r can be the distance between P and some point lying on the side of the polygon, therefore, r is the smallest distance between P and all sides of the polygon.\n\nTo find the shortest distance between a point p and a segment s, consider a straight line l containing the segment s. Clearly, the shortest distance between p and l is the length of the perpendicular segment. One should consider two cases: when the end of the perpendicular segment lies on the segment s (then the answer is the length of the perpendicular segment), or when it lies out of s (then the answer is the shortest distance to the ends of s)."
}