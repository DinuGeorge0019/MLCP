{
    "link": "https://codeforces.com//contest/1747/problem/E",
    "problemId": "1620662",
    "problem_idx": "E",
    "shortId": "1747E",
    "contest_number": "1747",
    "problem_submissions": {
        "E": [
            179486870,
            179253920,
            179273440,
            179260537,
            179225386,
            179271971,
            179283076,
            179281826,
            179282297,
            186348217,
            179284673,
            179245931
        ],
        "D": [
            179486860,
            179233757,
            179222054,
            179228487,
            179238738,
            179241063,
            179241183,
            179224057,
            179264449,
            179259728,
            179260831,
            179237890,
            179236308,
            180743238,
            179237732,
            179232676,
            179243502,
            179244572,
            179246464,
            179243020,
            179246798,
            179249877
        ],
        "C": [
            179486839,
            179213479,
            179208855,
            179232874,
            179261125,
            179235210,
            179222140,
            179238001,
            179214781,
            179211570,
            179268241,
            179214460,
            179214791,
            179205118,
            179213034,
            179214071,
            179222975,
            179219181,
            179217125,
            179223792,
            179216359
        ],
        "B": [
            179486831,
            179205385,
            179204232,
            179234016,
            179257195,
            179206841,
            179210631,
            179225692,
            179213313,
            179206192,
            179275964,
            179205986,
            179209442,
            179215191,
            179207056,
            179208301,
            179209222,
            179210943,
            179209630,
            179208432,
            179211946
        ],
        "A": [
            179486823,
            179200411,
            179199751,
            179235050,
            179240090,
            179202014,
            179204980,
            179199923,
            179202535,
            179200360,
            179277442,
            179199925,
            179203286,
            179208363,
            179199780,
            179200477,
            179203571,
            179204793,
            179201814,
            179200654,
            179202827
        ]
    },
    "name": "E. List Generation",
    "statement": "For given integers n and m, let\u2019s call a pair of arrays a and b of\r\nintegers , if they satisfy the following conditions: a and b have the\r\nsame length, let their length be k. k\r\nge 2 and a_1 = 0, a_k = n, b_1 = 0, b_k = m. For each 1 < i\r\nle k the following holds: a_i\r\ngeq a_{i - 1}, b_i\r\ngeq b_{i - 1}, and a_i + b_i\r\nneq a_{i - 1} + b_{i - 1}.Find the sum of |a| over all good pairs of\r\narrays (a,b). Since the answer can be very large, output it modulo\r\n10^9 + 7.\r\n",
    "solutions": [
        "// LUOGU_RID: 93003149\n/*\n\u308f\u3093\u308f\u3093\u2026\u2026\u308f\u3093\u3060\u307b\u30fc\u3044\u3063\u2606\nWonderhoy!\n*/\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef double DB;\nchar buf[1<<21],*p1=buf,*p2=buf;\n#define getchar() (p1==p2 && (p2=(p1=buf)+fread(buf,1,1<<18,stdin),p1==p2)?EOF:*p1++)\nint read()\n{\n\tint x=0;\n\tchar c=getchar();\n\twhile(c<'0' || c>'9')\tc=getchar();\n\twhile(c>='0' && c<='9')\tx=(x<<1)+(x<<3)+(c^'0'),c=getchar();\n\treturn x;\n}\nvoid write(int x)\n{\n\tif(x>9)\twrite(x/10);\n\tputchar(x%10+'0');\n}\nconst int MOD=1e9+7;\ninline int Add(int u,int v){return u+v>=MOD?u+v-MOD:u+v;}\ninline int Sub(int u,int v){return u-v>=0?u-v:u-v+MOD;}\ninline int Mul(int u,int v){return LL(u)*LL(v)%MOD;}\ninline int add(int &u,int v){return u=Add(u,v);}\ninline int sub(int &u,int v){return u=Sub(u,v);}\ninline int mul(int &u,int v){return u=Mul(u,v);}\nint QuickPow(int x,int p=MOD-2)\n{\n\tint ans=1,base=x;\n\twhile(p)\n\t{\n\t\tif(p&1)\tmul(ans,base);\n\t\tmul(base,base);\n\t\tp>>=1;\n\t}\n\treturn ans;\n}\nvoid Solve();\nint pw[10000005];\nint fac[10000005],ifac[10000005];\ninline int C(int n,int m){return n<m || m<0?0:Mul(fac[n],Mul(ifac[m],ifac[n-m]));}\nint main(){\n\tpw[0]=1;\n\tfor(int i=1;i<=10000000;++i)\tpw[i]=Add(pw[i-1],pw[i-1]);\n\tfac[0]=1;\n\tfor(int i=1;i<=10000000;++i)\tfac[i]=Mul(fac[i-1],i);\n\tifac[10000000]=QuickPow(fac[10000000]);\n\tfor(int i=10000000-1;~i;--i)\tifac[i]=Mul(ifac[i+1],i+1);\n\tint T=read();\n\twhile(T-->0)\tSolve();\n\treturn 0;\n}\ninline int F(int x){return x==0?0:Mul(x,pw[x-1]);}\nint n,m;\nvoid Solve()\n{\n\tn=read(),m=read();\n\tif(n>m)\tswap(n,m);\n\tint ans=0;\n\tfor(int i=0;i<=n;++i)\tadd(ans,Mul(Mul(C(n,i),C(m,i)),Add(Mul(pw[n+m-i-1],Add(2,i)),F(n+m-i-1))));\n\twrite(ans),puts(\"\");\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. List Generation.json",
    "editorial_link": "https://codeforces.com//blog/entry/108782",
    "editorial": "Given problem is equivalent to:\n\nYou are currently at cell (0,0)\n. From any cell (x,y)\n you can jump to cell (x?,y?)\n such that x?x??n\n , y?y??m\n and (x,y)?(x?,y?)\n. Find sum of number of visited cells over all paths starting from (0,0)\n and ending at (n,m)\n. Denote the required value by f(n,m)\n.\n\nDirectly thinking in 2\n dimensions is difficult, lets first solve for case when n=0\n or m=0\n. WLOG, assuming m=0\n. We can solve this case using some binomials.\n\nf(n,0)=2n?1?n+32\n, n>0\n.\n\nNow, we can divide all possible paths from (0,0)\n to (n,m)\n into several classes of one dimensional paths.\n\nThese classes are defined by what I call breakpoints. When we passes the breakpoint we turns right. Hence we can group paths by fixing the number of breakpoints.\n\nWLOG, Assuming n?m\n. For k\n breakpoints there are (nk)?(mk)\n ways to select for 0?k?m\n. For a path with k\n breakpoints, n+m?k\n points are optional, that is there will exist 2n+m?k\n paths with k\n breakpoints. It is not difficult to see that sum of number of visited cells over paths with k\n breakpoints turned out to be f(n+m?k,0)+2n+m?k?1?k\n. Hence we can write f(n,m)=?k=0m(nk)?(mk)?(f(n+m?k,0)+2n+m?k?1?k)\n\nTime complexity of the solution would be O(min(n,m))"
}