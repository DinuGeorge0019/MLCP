{
    "link": "https://codeforces.com//contest/1008/problem/D",
    "problemId": "197244",
    "problem_idx": "D",
    "shortId": "1008D",
    "contest_number": "1008",
    "problem_submissions": {
        "D": [
            40283176,
            40304075,
            40285530,
            40289432,
            40287858,
            40290282,
            40291419,
            40292139,
            40289234,
            40292105,
            40291968,
            40292103,
            40289227,
            40287896,
            40292087
        ],
        "C": [
            40272037,
            40267107,
            40273008,
            40273757,
            40269648,
            40274054,
            40271173,
            40277109,
            40273591,
            40270468,
            40272935,
            40267803,
            40275746,
            40278272,
            40272326,
            40272797,
            40275856,
            40277241,
            40267762
        ],
        "B": [
            40266520,
            40265026,
            40265372,
            40272480,
            40271420,
            40270433,
            40267759,
            40271441,
            40271164,
            40267957,
            40266971,
            40265327,
            40266220,
            40270724,
            40267782,
            40268761,
            40268877,
            40267898,
            40277665
        ],
        "A": [
            40264823,
            40272360,
            40264627,
            40271368,
            40267179,
            40267768,
            40265278,
            40266944,
            40268824,
            40265533,
            40264950,
            40264661,
            40267139,
            40267314,
            40265410,
            40275824,
            40265063,
            40276493
        ],
        "E": [
            40301609
        ]
    },
    "name": "D. Pave the Parallelepiped",
    "statement": "You are given a rectangular parallelepiped with sides of positive\r\ninteger lengths A, B and C. Find the number of different groups of three\r\nintegers (a, b, c) such that 1\r\nleq a\r\nleq b\r\nleq c and parallelepiped A\r\ntimes B\r\ntimes C can be paved with parallelepipeds a\r\ntimes b\r\ntimes c. Note, that all small parallelepipeds .For example,\r\nparallelepiped 1\r\ntimes 5\r\ntimes 6 can be divided into parallelepipeds 1\r\ntimes 3\r\ntimes 5, but can not be divided into parallelepipeds 1\r\ntimes 2\r\ntimes 3.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long int uli;\nconst int mx=1e5+10;\nint divs[mx];\nuli cmb[mx][7];\nuli gcd(uli a,uli b){ \n  if(b==0)return a;\n  return gcd(b,a%b);\n}\nint bat(int b,int i){\n  if(b&(1<<i))return true;\n  return false;\n}\nint main(){\n  cmb[0][0]=1;\n  for(int i=1;i<mx;i++){\n    cmb[i][0]=1;\n    if(i<=5)cmb[i][i]=1;\n    for(int j=1;j<i && j<=5;j++){\n      cmb[i][j]=cmb[i-1][j]+cmb[i-1][j-1];\n    }\n  }\n  for(int i=1;i<mx;i++)\n    for(int j=i;j<mx;j+=i)\n      divs[j]++;\n  vector<tuple<int,int,int> >good;\n  int mask[]={1,2,4,3,5,6,7};//magic\n  for(int x=0;x<7;x++)for(int y=x;y<7;y++)for(int z=y;z<7;z++){\n    vector<int>p={mask[x],mask[y],mask[z]};\n    sort(p.begin(),p.end());\n    bool ok=false;\n    do{\n      if(bat(p[0],0)==1 && bat(p[1],1)==1 && bat(p[2],2)==1)ok=true;\n    }while(next_permutation(p.begin(),p.end()));\n    if(ok)good.push_back(make_tuple(x,y,z));\n  }\n  int t;\n  scanf(\"%d\",&t);\n  while(t--){\n    int A,B,C;\n    scanf(\"%d %d %d\",&A,&B,&C);\n    int abc=divs[gcd(gcd(A,B),C)];\n    int ab=divs[gcd(A,B)]-abc;\n    int ac=divs[gcd(A,C)]-abc;\n    int bc=divs[gcd(B,C)]-abc;\n    int a=divs[A]-ab-ac-abc;\n    int b=divs[B]-ab-bc-abc;\n    int c=divs[C]-ac-bc-abc;\n    int all[]={a,b,c,ab,ac,bc,abc};\n    //    for(int i=0;i<7;i++)cout<<all[i]<<\" \";cout<<endl;\n    uli ans=0;\n    for(auto xyz:good){\n      int x,y,z;\n      tie(x,y,z)=xyz;\n      if(all[x]==0 || all[y]==0 || all[z]==0)continue;\n      map<int,int>mp;\n      mp[x]++;\n      mp[y]++;\n      mp[z]++;\n      uli inc=1;\n      for(auto p:mp){\n        int s=p.second;\n        int q=all[p.first];\n        inc*=cmb[s+q-1][s];\n      }\n      //      if(inc>0) cout<<x<<\";\"<<y<<\";\"<<z<<\"=>\"<<inc<<endl;\n      ans+=inc;\n    }\n    cout<<ans<<'\\n';\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "number theory"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Pave the Parallelepiped.json",
    "editorial_link": "https://codeforces.com//blog/entry/60572",
    "editorial": "First, for every natural number up to 105\n we count its number of divisors in O(n???)\n. Also for every unordered set of 3\n masks (m1,m2,m3)\n of length 3\n we check if there is ? way to enumerate them in such a way that 1?m1\n, 2?m2\n and 3?m3\n. We will call such sets acceptable.\n\nNow let's consider two parallelepipeds. For each dimension of the second parallelepiped let's construct a mask of length 3\n which contains the numbers of the dimensions of the first parallelepiped for which the length of the first parallelepiped along this dimension is divisible by the length of the second parallelepiped along the chosen dimension. Now these three masks form an acceptable set iff we can pave the first parallelepiped with the second one.\n\nNow for a given parallelepiped let's calculate for every mask of length 3\n the number of possible lengths of the second parallelepiped which would produce this mask. We can do this by taking the GCD of the lengths of the first parallelepiped along the dimensions whose numbers are in the mask, and subtracting from it the calculated numbers for every submask.\n\nNow let's iterate over acceptable sets of masks. For each different mask from the set which is included into the set k\n times we need to calculate the number of ways to take k\n unordered lengths which produce this mask, and multiply these numbers. The sum of these numbers is the answers to the query.\n\nSo for every query we need O(2m2)\n operations, where m=3\n is the number of dimensions of the parallelepiped.",
    "hint": []
}