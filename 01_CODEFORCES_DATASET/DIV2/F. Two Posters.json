{"link": "https://codeforces.com//contest/1638/problem/F", "problemId": "1297620", "problem_idx": "F", "shortId": "1638F", "contest_number": "1638", "problem_submissions": {"E": [146394309, 146388037, 146392264, 146392799, 146383148, 146391230, 146412303, 146401025, 146403078, 146402136, 179550421, 146406748, 146402980, 146407733, 146480267, 146392395, 146416198, 146408751, 146407567, 146399245, 146416242, 146413814], "D": [146373961, 146380846, 146385038, 146375477, 146392500, 146381733, 146401310, 146378870, 146384454, 146387386, 146387880, 146390053, 146382176, 146480222, 146406431, 146388651, 146388267, 146392625, 146412206, 146374640, 146389515], "C": [146366299, 146372352, 146371729, 146367670, 146366106, 146373666, 146370507, 146365761, 146370642, 146376834, 146376510, 146371594, 146370051, 146480186, 146375503, 146369319, 146374946, 146378437, 146373206, 146367076, 146373277], "B": [146362311, 146363442, 146362707, 146365725, 146364605, 146363885, 146366228, 146383066, 146364746, 146368584, 146368423, 146367380, 146366091, 146480117, 146369102, 146364936, 146367883, 146370547, 146366764, 146364119, 146368017], "A": [146361810, 146361860, 146361937, 146362725, 146362534, 146362379, 146363944, 146381318, 146362119, 146362820, 146362493, 146479991, 146363108, 146363259, 146480100, 146363531, 146362617, 146363968, 146362163, 146363256, 146362105, 146365613], "F": [154464206, 146479912, 146613983, 146474726, 146640126]}, "name": "F. Two Posters", "statement": "You want to advertise your new business, so you are going to place two\r\nposters on a billboard in the city center. The billboard consists of n\r\nvertical panels of width 1 and varying integer heights, held together by\r\na horizontal bar. The i-th of the n panels has height h_i. Initially,\r\nall panels hang down from the bar (their top edges lie on it), but\r\nbefore placing the two posters, you are allowed to move each panel up by\r\nany integer length, as long as it is still connected to the bar (its\r\nbottom edge lies below or on it).After the moves are done, you will\r\nplace two posters: one below the bar and one above it. They are not\r\nallowed to go over the bar and they must be positioned completely inside\r\nof the panels.What is the maximum total area the two posters can cover\r\ntogether if you make the optimal moves?\r\n", "solutions": ["#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define int long long\n#define rep(i, s, e) for (int i = s; i <= e; ++i)\n#define drep(i, s, e) for (int i = s; i >= e; --i)\n#define file(a) freopen(#a\".in\", \"r\", stdin), freopen(#a\".out\", \"w\", stdout)\n#define pv(a) cout << #a << \" = \" << a << endl\n#define pa(a, l, r) cout << #a \" : \"; rep(_, l, r) cout << a[_] << ' '; cout << endl\n\nconst int N = 1e4 + 10;\n\nint read() {\n  int x = 0, f = 1; char c = getchar();\n  for (; c < '0' || c > '9'; c = getchar()) if (c == '-') f = -1;\n  for (; c >= '0' && c <= '9'; c = getchar()) x = x * 10 + c - 48;\n  return x * f;\n}\n\nint n, a[N], L[N], R[N], pre[N], suf[N], st[N], top, ans;\n\nsigned main() {\n  n = read();\n  rep(i, 1, n) a[i] = read();\n  rep(i, 1, n) {\n    while (top && a[st[top]] > a[i]) R[st[top]] = i - 1, -- top;\n    st[++ top] = i;\n  }\n  while (top) R[st[top]] = n, -- top;\n  drep(i, n, 1) {\n    while (top && a[st[top]] > a[i]) L[st[top]] = i + 1, -- top;\n    st[++ top] = i;\n  }\n  while (top) L[st[top]] = 1, -- top;\n  rep(i, 1, n) {\n    rep(j, 1, i) pre[i] = max(pre[i], a[j] * (min(i, R[j]) - L[j] + 1));\n    rep(j, i, n) suf[i] = max(suf[i], a[j] * (R[j] - max(i, L[j]) + 1));\n  }\n  rep(i, 0, n) ans = max(ans, pre[i] + suf[i + 1]);\n  // pa(L, 1, n);\n  // pa(R, 1, n);\n  rep(t, 1, n) {\n    int l = L[t], r = R[t];\n    // cout << \"------- t, l, r = \" << t << ' ' << l << ' ' << r << endl;\n    rep(i, 1, n) {\n      if (l < L[i] || R[i] < r) continue;\n      ans = max(ans, a[i] * (R[i] - L[i] - (r - l)) + a[t] * (r - l + 1));\n    }\n    for (int i = 1, p = r + 1; i <= r; ++ i) {\n      if (l < L[i] || R[i] < r) continue;\n      // cout << \"i, L[i], R[i] = \" << i << ' ' << L[i] << ' ' << R[i] << endl;\n      for (; p <= n && a[i] + a[p] >= a[t]; ++ p) ;\n      ans = max(ans, a[i] * (r - L[i] + 1) + (a[t] - a[i]) * (p - l));\n      // cout << \"2 p, ans = \" << p << ' ' << ans << endl;\n    }\n    for (int i = n, p = l - 1; i >= l; -- i) {\n      if (l < L[i] || R[i] < r) continue;\n      for (; p && a[i] + a[p] >= a[t]; -- p) ;\n      ans = max(ans, a[i] * (R[i] - l + 1) + (a[t] - a[i]) * (r - p));\n      // cout << \"2 p, ans = \" << p << ' ' << ans << endl;\n    }\n    for (int i = r, q = n, mx = 0; i; -- i) {\n      if (l < L[i] || R[i] < r) continue;\n      // cout << \"i, L[i], R[i] = \" << i << ' ' << L[i] << ' ' << R[i] << endl;\n      for (; q > r && (r < L[q] || R[q] < l || a[i] + a[q] <= a[t]); -- q) {\n        if (L[q] <= l && r <= R[q]) mx = max(mx, a[q] * (R[q] - l + 1));\n      }\n      ans = max(ans, a[i] * (r - L[i] + 1) + mx);\n      // cout << \"3 q, mx, ans = \" << q << ' ' << mx << ' ' << ans << endl;\n    }\n  }\n  printf(\"%lld\\n\", ans);\n  return 0;\n}"], "input": "", "output": "", "tags": ["brute force", "data structures", "greedy", "two pointers"], "dificulty": "3200", "interactive": false}