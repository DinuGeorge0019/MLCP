{"link": "https://codeforces.com//contest/1537/problem/F", "problemId": "1020038", "problem_idx": "F", "shortId": "1537F", "contest_number": "1537", "problem_submissions": {"F": [119857657, 119865425, 119870905, 119869709, 119878489, 119841761, 119876881, 119827052, 119888747, 119879106, 119880915, 119859997, 119866305, 119891935, 119902585, 119888207, 119905201], "E2": [119835892, 119833759, 119835378, 119850866, 119864462, 119850270, 119848823, 119846727, 119864146, 119866899, 119862789, 119890309, 119915102, 119899495, 119871715, 119862744, 119873692, 119862189], "E1": [119835645, 119833327, 119834682, 119850640, 119850149, 119850091, 119849196, 119847381, 119863846, 119866683, 119861833, 119862580, 119843723, 119853461, 119862505, 119872582, 119862557], "C": [119829240, 119814686, 119839941, 119823683, 119824487, 119855572, 119826402, 119863416, 119822210, 119816816, 119835116, 119830407, 119824166, 119824127, 119821757, 119820808, 119828361], "D": [119827244, 119843258, 119855094, 119838364, 119835110, 119859731, 119840938, 119859070, 119842821, 119845056, 119849019, 119838171, 119834738, 119848959, 119837547, 119830929, 119842836], "B": [119806043, 119808907, 119822215, 119810718, 119813042, 119826639, 119819938, 119868704, 119815398, 119811429, 119818874, 119840047, 119815192, 119806896, 119810508, 119848797, 119816830], "A": [119804349, 119804485, 119818462, 119804932, 119804259, 119830936, 119816677, 119871286, 119815557, 119804275, 119808687, 119804663, 119806484, 119804635, 119804555, 119843057, 119806262]}, "name": "F. Figure Fixing", "statement": "You have a connected undirected graph made of n nodes and m edges. The\r\ni-th node has a value v_i and a target value t_i.In an operation, you\r\ncan choose an edge (i, j) and add k to both v_i and v_j, where k can be\r\nany . In particular, k can be negative.Your task to determine if it is\r\npossible that by doing some finite number of operations (possibly zero),\r\nyou can achieve for every node i, v_i = t_i.\r\n", "solutions": ["#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <set>\n#include <queue>\n#include <random>\n#include \"map\"\ntypedef double ld;\ntypedef long long ll;\n#define all(x) x.begin(), x.end()\nusing namespace std;\n#define int long long\nvector<int> seen;\nbool gd = 0;\nvector<vector<int>> g;\nvoid dfs(int v, int se) {\n    if (seen[v]) {\n        if (se + seen[v] == 3)\n            gd = 1;\n        return;\n    }\n    seen[v] = se;\n    for (auto i : g[v])\n        dfs(i, 3 - se);\n}\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n    g.assign(n, {});\n    gd = 0;\n    vector<int> a(n);\n    for (auto &i : a) {\n        cin >> i;\n    }\n    int res = 0;\n    for (auto &i : a) {\n        int b;\n        cin >> b;\n        i -= b;\n        res += i % 2;\n    }\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        cin >> u >> v;\n        u--;v--;\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    if (res % 2) {\n        cout << \"NO\\n\";return;\n    }\n    seen.assign(n, 0);\n    dfs(0, 1);\n    if (gd) {\n        cout << \"YES\\n\";return;\n    }\n    int r1 = 0, r2 = 0;\n    for (int i = 0; i < n; ++i) {\n       // cout << i << ' ' << seen[i] << endl;\n        if (seen[i] == 1) {\n            r1 += a[i];\n        } else{\n            r2 += a[i];\n        }\n    }\n    //cout << r1 << ' ' << r2 << endl;\n    if (r1 == r2) {\n        cout << \"YES\\n\";\n    } else {\n        cout << \"NO\\n\";\n    }\n}\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    int q = 1;\n    cin >> q;\n    while (q--) solve();\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "dfs and similar", "dsu", "graphs", "greedy", "math"], "dificulty": "2200", "interactive": false}