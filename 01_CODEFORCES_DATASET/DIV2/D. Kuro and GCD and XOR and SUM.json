{
    "link": "https://codeforces.com//contest/979/problem/D",
    "problemId": "183086",
    "problem_idx": "D",
    "shortId": "979D",
    "contest_number": "979",
    "problem_submissions": {
        "E": [
            38239944,
            38239626,
            38239985,
            38241605
        ],
        "D": [
            38235368,
            38234401,
            38232573,
            38240292,
            38232946,
            38238813,
            38236674,
            38234013,
            38234028,
            38242834,
            38235224,
            38238975,
            38236273,
            38233251,
            38924559,
            38232308,
            38231709
        ],
        "C": [
            38225119,
            38222425,
            38225946,
            38230085,
            38224078,
            38228380,
            38224768,
            38225370,
            38223169,
            38226246,
            38227575,
            38228558,
            38229693,
            38227316,
            38227594,
            38232766,
            38225714,
            38226125
        ],
        "B": [
            38223636,
            38219953,
            38246488,
            38228424,
            38221669,
            38225321,
            38237418,
            38223126,
            38229060,
            38225443,
            38231632,
            38234671,
            38223153,
            38228913,
            38349158,
            38225310
        ],
        "A": [
            38217437,
            38220346,
            38223788,
            38219996,
            38221134,
            38219848,
            38242600,
            38216689,
            38216875,
            38216674,
            38216872,
            38217267,
            38220684,
            38217206,
            38218341,
            38218810,
            38220203,
            38217265
        ]
    },
    "name": "D. Kuro and GCD and XOR and SUM",
    "statement": "Kuro is currently playing an educational game about numbers. The game\r\nfocuses on the greatest common divisor (GCD), the XOR value, and the sum\r\nof two numbers. Kuro loves the game so much that he solves levels by\r\nlevels day by day.Sadly, he\u2019s going on a vacation for a day, and he\r\nisn\u2019t able to continue his solving streak on his own. As Katie is a\r\nreliable person, Kuro kindly asked her to come to his house on this day\r\nto play the game for him.Initally, there is an empty array a. The game\r\nconsists of q tasks of two types. The first type asks Katie to add a\r\nnumber u_i to a. The second type asks Katie to find a number v existing\r\nin a such that k_i\r\nmid GCD(x_i, v), x_i + v\r\nleq s_i, and x_i\r\noplus v is maximized, where\r\noplus denotes the bitwise XOR operation, GCD(c, d) denotes the greatest\r\ncommon divisor of integers c and d, and y\r\nmid x means x is divisible by y, or report if no such numbers are\r\nfound.Since you are a programmer, Katie needs you to automatically and\r\naccurately perform the tasks in the game to satisfy her dear friend\r\nKuro. Let\u2019s help her!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define FOR(i,s,e) for(int i=(s);i<=(e);i++)\n#define FORD(i,s,e) for(int i=(s);i>=(e);i--)\n#define ALL(k) (k).begin(),(k).end()\n#define e1 first\n#define e2 second\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long LLU;\ntypedef long double LD;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\ntypedef vector<int> VI;\nconst bool print=false;\n\nconst int N=1e5+7;\nconst int D=20;\n\nint q;\n\nint test(int v, int w){\n\treturn ((v&(1<<w))>0);\n}\n\nstruct tr{\n\ttr *son[2];\n\tint val=1e9;\n\ttr(){\n\t\tson[0]=son[1]=NULL;\n\t}\n\tvoid ins(int v, int g){\n\t\tval=min(val, v);\n\t\tif (g==-1)\n\t\t\treturn;\n\t\tif (son[test(v, g)]==NULL)\n\t\t\tson[test(v, g)]=new tr();\n\t\tson[test(v, g)]->ins(v, g-1);\n\t}\n\tvoid srch(int s, int x, int g){\n\t\tif (g==-1){\n\t\t\tprintf(\"%d\\n\", val);\n\t\t\treturn;\n\t\t}\n\t\tint res=-1;\n\t\tFOR(i,0,1)\n\t\t\tif(son[i]!=NULL && (son[i]->val)<=s)\n\t\t\t\tres=max(res, x^(son[i]->val));\n\t\tFOR(i,0,1)\n\t\t\tif(son[i]!=NULL && (son[i]->val)<=s && (x^(son[i]->val))==res)\n\t\t\t\tson[i]->srch(s, x, g-1);\n\t}\n};\n\ntr drz[N];\nVI dz[N];\nbitset <N> already;\n\nvoid new_val(){\n\tint v;\n\tscanf(\"%d\", &v);\n\tif (already[v])\n\t\treturn;\n\talready[v]=1;\n\tfor (int i : dz[v])\n\t\tdrz[i].ins(v, D);\n}\n\nvoid query(){\n\tint x, k, s;\n\tscanf(\"%d%d%d\", &x, &k, &s);\n\tif (x%k){\n\t\tprintf(\"-1\\n\");\n\t\treturn;\n\t}\n\ts-=x;\n\tif (drz[k].val>s){\n\t\tprintf(\"-1\\n\");\n\t\treturn;\n\t}\n\tdrz[k].srch(s, x, D);\n}\n\nint main(){\n\t\n\tscanf(\"%d\", &q);\n\tFOR(i,1,N-1)\n\t\tfor (int j=i; j<N; j+=i)\n\t\t\tdz[j].push_back(i);\n\twhile(q--){\n\t\tint t;\n\t\tscanf(\"%d\", &t);\n\t\tif (t==1)\n\t\t\tnew_val();\n\t\telse\n\t\t\tquery();\n\t}\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "bitmasks",
        "brute force",
        "data structures",
        "dp",
        "dsu",
        "greedy",
        "math",
        "number theory",
        "strings",
        "trees"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Kuro and GCD and XOR and SUM.json",
    "editorial_link": "https://codeforces.com//blog/entry/59462",
    "editorial": "We first look at the condition . This condition holds iff both\nand are divisible by . Therefore, if , we return -1 immediately, else we\nonly consider numbers in that are divisible by .Finding the maximum XOR\nof with in the array reminds us of a classic problem, where the data\nstructure trie is used to descend from the higher bit positions to the\nlower bit positions. But since we only consider such that and , we build\ntries, where the trie holds information of numbers in that are divisible\nby , and we only descend to a branch in the trie if the branch is not\nempty and the minimum value in the branch is .Adding a number into is\ntrivial by now: we update every trie where divides the number we need to\nadd into the array. Notice that we only add a number if the number\ndoesn\u00e2\u0080\u0099t exist in the array yet.Time complexity: .\n"
}