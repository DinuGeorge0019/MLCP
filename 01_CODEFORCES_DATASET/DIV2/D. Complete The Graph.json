{
    "link": "https://codeforces.com//contest/716/problem/D",
    "problemId": "71758",
    "problem_idx": "D",
    "shortId": "716D",
    "contest_number": "716",
    "problem_submissions": {
        "D": [
            20744308,
            20715273,
            20712384,
            20698605,
            20701478,
            20703552,
            20702205,
            20704228,
            20701939,
            20707973,
            20706457,
            20707569,
            20706505,
            20706746,
            20706853,
            20708058,
            20712985,
            20706596,
            20702545,
            20706258,
            20710911,
            20710377
        ],
        "E": [
            20707330,
            20706633,
            57471482,
            57471318,
            20786861,
            20925655
        ],
        "C": [
            20688634,
            20691024,
            20700161,
            20694588,
            20693330,
            20695251,
            20692209,
            20693550,
            20695785,
            20697429,
            20695666,
            20696475,
            20696500,
            20694424,
            20694087,
            20699957,
            20710553,
            20698572,
            20699352,
            20704716
        ],
        "B": [
            20685444,
            20688304,
            20686329,
            20686970,
            24007938,
            20689436,
            20687334,
            20687385,
            20688481,
            20689944,
            20688816,
            20691138,
            20689052,
            20691817,
            20689042,
            20688727,
            20687466,
            20689562,
            20689097,
            20691531,
            20693092
        ],
        "A": [
            20683347,
            20683430,
            20683470,
            20683362,
            23991578,
            20684483,
            20684599,
            20683578,
            20683497,
            20684120,
            20684147,
            20685068,
            20683750,
            20684470,
            20685278,
            20683948,
            20683393,
            20683688,
            20684344,
            20683813,
            20686732
        ]
    },
    "name": "D. Complete The Graph",
    "statement": "ZS the Coder has drawn an undirected graph of vertices numbered from to\r\nand edges between them. Each edge of the graph is weighted, each weight\r\nis a .The next day, ZS the Coder realized that some of the weights were\r\nerased! So he wants to reassign weight to each of the edges which\r\nweights were erased, so that the length of the shortest path between\r\nvertices and in the resulting graph is exactly . Can you help him?\r\n",
    "solutions": [
        "/*AMETHYSTS*/\n#pragma comment(linker, \"/STACK:1000000000\")\n#include <cstdio>\n#include <iostream>\n#include <ctime>\n#include <string>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <cstring>\n#include <set>\n#include <map>\n#include <cstdlib>\n#include <ctime>\n#include <cassert>\n#include <bitset>\n#include <deque>\n#include <stack>\n#include <climits>\n#include <string>\n#include <queue>\n#include <memory.h>\n\n#define ll long long\n#define ld double\n#define pii pair <int, int>\n#define forn(i, n) for (int i = 0; i < (ll)n; i++)\n#define mp make_pair\n#define ui unsigned ll\n\nusing namespace std;\n\nconst int maxn = (int)1e5 + 10;\nvector <int> ed[maxn];\nint x[maxn], y[maxn], w[maxn], b[maxn];\nbool used[maxn];\nll dst[maxn];\n\nll ford(int s, int t, int n) {\n\tfor (int i = 0; i <= n; i++) {\n\t\tdst[i] = (ll)1e18;\n\t\tused[i] = false;\n\t}\n\n\tqueue <int> q;\n\n\tdst[s] = 0;\n\tq.push(s);\n\tused[s] = true;\n\n\twhile (!q.empty()) {\n\t\tint v = q.front();\n\t\tused[v] = false;\n\t\tq.pop();\n\n\t\tfor (int i = 0; i < (int)ed[v].size(); i++) {\n\t\t\tint it = ed[v][i];\n\t\t\tint u = x[it];\n\t\t\tif (u == v) {\n\t\t\t\tu = y[it];\n\t\t\t}\n\n\t\t\tint d = w[it];\n\n\t\t\tif (dst[u] > dst[v] + d) {\n\t\t\t\tdst[u] = dst[v] + d;\n\n\t\t\t\tif (!used[u]) {\n\t\t\t\t\tused[u] = true;\n\t\t\t\t\tq.push(u);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dst[t];\n}\n\nint main() {\n\tint cnt = 0;\n\n\tint n, m, f, s, t;\n\n\tcin >> n >> m >> f >> s >> t;\n\n\tfor (int i = 0; i < m; i++) {\n\t\tscanf(\"%d %d %d\", &x[i], &y[i], &w[i]);\n\n\t\ted[x[i]].push_back(i);\n\t\ted[y[i]].push_back(i);\n\n\t\tif (w[i] == 0) {\n\t\t\tcnt++;\n\t\t\tb[i] = 1;\n\t\t}\n\t}\n\n\tll l = -1;\n\tll r = (ll)cnt * f;\n\n\twhile (l != r) {\n\t\tll mm = (l + r + 1) >> 1;\n\n\t\tll sum = mm;\n\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tif (b[i]) {\n\t\t\t\tw[i] = 1 + (int)min(sum, (ll)f);\n\t\t\t\tsum -= min(sum, (ll)f);\n\t\t\t}\n\t\t}\n\n\t\tll now = ford(s, t, n);\n\n\t\tif (now == f) {\n\t\t\tprintf(\"YES\\n\");\n\t\t\tfor (int i = 0; i < m; i++) {\n\t\t\t\tprintf(\"%d %d %d\\n\", x[i], y[i], w[i]);\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (now > f) {\n\t\t\tr = mm - 1;\n\t\t} else {\n\t\t\tl = mm;\n\t\t}\n\t}\n\n\tcout << \"NO\" << endl;\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "shortest paths"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Complete The Graph.json",
    "editorial_link": "https://codeforces.com//blog/entry/47169",
    "editorial": "This problem is actually quite simple if you rule out the impossible conditions. Call the edges that does not have fixed weight variable edges. First, we'll determine when a solution exists.\n\nFirstly, we ignore the variable edges. Now, find the length of the shortest path from s to e. If this length is ?<?L, there is no solution, since even if we replace the 0 weights with any positive weight the shortest path will never exceed this shortest path. Thus, if the length of this shortest path is ?<?L, there is no solution. (If no path exists we treat the length as ?.)\n\nNext, we replace the edges with 0 weight with weight 1. Clearly, among all the possible graphs you can generate by replacing the weights, this graph will give the minimum possible shortest path from s to e, since increasing any weight will not decrease the length of the shortest path. Thus, if the shortest path of this graph is ?>?L, there is no solution, since the shortest path will always be ?>?L. If no path exists we treat the length as ?.\n\nOther than these two conditions, there will always be a way to assign the weights so that the shortest path from s to e is exactly L! How do we prove this? First, consider all paths from s to e that has at least one 0 weight edge, as changing weights won't affect the other paths. Now, we repeat this algorithm. Initially, assign all the weights as 1. Then, sort the paths in increasing order of length. If the length of the shortest path is equal to L, we're done. Otherwise, increase the weight of one of the variable edges on the shortest path by 1. Note that this will increase the lengths of some of the paths by 1. It is not hard to see that by repeating these operations the shortest path will eventually have length L, so an assignment indeed exists.\n\nNow, we still have to find a valid assignment of weights. We can use a similar algorithm as our proof above. Assign 1 to all variable edges first. Next, we first find and keep track of the shortest path from s to e. Note that if this path has no variable edges it must have length exactly L or strictly more than L, so either we're already done or the shortest path contains variable edges and the length is strictly less than L. (otherwise we're done)\n\nFrom now on, whenever we assign weight to a variable edge (after assigning 1 to every variable edge), we call the edge assigned.\n\nNow, mark all variable edges not on the shortest path we found as ? weight. (we can choose any number greater than L as ?) Next, we will find the shortest path from s to e, and replace the weight of an unassigned variable edge such that the length of the path becomes equal to L. Now, we don't touch the assigned edges again. While the shortest path from s to e is still strictly less than L, we repeat the process and replace a variable edge that is not assigned such that the path length is equal to L. Note that this is always possible, since otherwise this would've been the shortest path in one of the previous steps. Eventually, the shortest path from s to e will have length exactly L. It is easy to see that we can repeat this process at most n times because we are only replacing the edges which are on the initial shortest path we found and there are less than n edges to replace (we only touch each edge at most once). Thus, we can find a solution after less than n iterations. So, the complexity becomes . This is sufficient to pass all tests."
}