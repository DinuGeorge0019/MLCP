{
    "link": "https://codeforces.com//contest/479/problem/B",
    "problemId": "15734",
    "problem_idx": "B",
    "shortId": "479B",
    "contest_number": "479",
    "problem_submissions": {
        "A": [
            8309900,
            8302126,
            8303586,
            8301931,
            8301886,
            8303454,
            8302426,
            8303355,
            8302448,
            8301877,
            8303309,
            8302705,
            8301884,
            8303259,
            8303414,
            8319050,
            8314132,
            8301946,
            8520832
        ],
        "E": [
            8309056,
            8311803,
            8312909,
            8313438,
            8316084,
            8316020,
            8313424,
            8327786,
            8315963,
            8317334,
            8309253,
            8316559,
            8315476,
            8316804,
            8316031,
            8315095,
            8316251,
            8315450,
            8317290,
            8312971,
            8313774
        ],
        "D": [
            8307373,
            8309115,
            8309669,
            8309141,
            8311118,
            8310810,
            8314426,
            8309794,
            8310784,
            8315457,
            8313129,
            8315683,
            8314350,
            8316993,
            8315739,
            8312498,
            8311921,
            8333608,
            8316306
        ],
        "C": [
            8305195,
            8306485,
            8306619,
            8305446,
            8306856,
            8306836,
            8308389,
            8306838,
            8306950,
            8305838,
            8307233,
            8304436,
            8308183,
            8305296,
            8304427,
            8304574,
            8306220,
            8306521,
            8306064,
            8305718
        ],
        "B": [
            8304577,
            8305140,
            8304920,
            8353901,
            8304212,
            8303937,
            8306178,
            8306010,
            8306262,
            8305338,
            8304463,
            8306364,
            8309399,
            8307051,
            8303801,
            8309094,
            8310340,
            8304911,
            8313716,
            8303910,
            8520830
        ]
    },
    "name": "B. Towers",
    "statement": "As you know, all the kids in Berland love playing with cubes. Little\r\nPetya has towers consisting of cubes of the same size. Tower with number\r\nconsists of cubes stacked one on top of the other. Petya defines the of\r\na set of towers as a value equal to the difference between the heights\r\nof the highest and the lowest of the towers. For example, if Petya built\r\nfive cube towers with heights (8, 3, 2, 6, 3), the instability of this\r\nset is equal to 6 (the highest tower has height 8, the lowest one has\r\nheight 2). The boy wants the instability of his set of towers to be as\r\nlow as possible. All he can do is to perform the following operation\r\nseveral times: take the top cube from some tower and put it on top of\r\nsome other tower of his set. Please note that Petya would never put the\r\ncube on the same tower from which it was removed because he thinks it\u2019s\r\na waste of time. Before going to school, the boy will have time to\r\nperform no more than such operations. Petya does not want to be late for\r\nclass, so you have to help him accomplish this task.\r\n",
    "solutions": [
        "#include<iostream>\n#include<algorithm>\n#include<cstdlib>\n#include<cstdio>\n#include<set>\n#include<map>\n#include<cstring>\n#define rep(i,a,b) for (int i=a;i<=b;++i)\n#define dep(i,a,b) for (int i=a;i>=b;--i)\n#define For(i,u) for (int i=H[u];i;i=nxt[i])\n#define re(i,x) for (i=x.begin();i!=x.end();++i)\n#define mp make_pair\n#define pb push_back\n#define mod 1000000007\n#define N 100005\nusing namespace std;\ntemplate<class T> inline void read(T&x){bool fu=0;char c;for(c=getchar();c<=32;c=getchar());if(c=='-')fu=1,c=getchar();for(x=0;c>32;c=getchar())x=x*10+c-'0';if(fu)x=-x;};\ntemplate<class T> inline void read(T&x,T&y){read(x);read(y);}\ntemplate<class T> inline void read(T&x,T&y,T&z){read(x);read(y);read(z);}\ntypedef long long ll;\ntypedef pair<int,int> pii;\nstruct S{int x,id;} a[N];\n//head\nint n,k;\nbool cmp(S a,S b) {return a.x<b.x;}\nstruct ass{int x,y;} q[N];int ans[N];\nint main() {\n\tread(n,k);rep(i,1,n)read(a[i].x),a[i].id=i;\n\tsort(a+1,a+n+1,cmp);ans[0]=a[n].x-a[1].x;\n\trep(i,1,k) {\n\t\tsort(a+1,a+n+1,cmp);\n\t\ta[1].x++;a[n].x--;q[i].y=a[1].id;q[i].x=a[n].id;\n\t\tsort(a+1,a+n+1,cmp);\n\t\tans[i]=a[n].x-a[1].x;\n\t}\n\tint pos=0,mx=ans[0];\n\trep(i,1,k) if (ans[i]<mx) mx=ans[i],pos=i;\n\tprintf(\"%d %d\\n\",mx,pos);\n\trep(i,1,pos) printf(\"%d %d\\n\",q[i].x,q[i].y);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Towers.json",
    "editorial_link": "https://codeforces.com//blog/entry/14351",
    "editorial": "The task is solved greedily. In each iteration, move the cube from the\r\ntallest tower to the shortest one. To do this, each time find the\r\nposition of minimum and maximum in the array of heights (in linear\r\ntime).\r\n"
}