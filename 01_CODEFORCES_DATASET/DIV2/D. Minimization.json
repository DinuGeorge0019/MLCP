{
    "link": "https://codeforces.com//contest/572/problem/D",
    "problemId": "33729",
    "problem_idx": "D",
    "shortId": "572D",
    "contest_number": "572",
    "problem_submissions": {
        "D": [
            12661423,
            12662726,
            12657634,
            12658797,
            12659193,
            12661149,
            12682852,
            12660518,
            12661077,
            12661845,
            12661885,
            12662406,
            12660324,
            12661622
        ],
        "C": [
            12656905,
            12657933,
            12657142,
            12652711,
            12663957,
            12658169,
            12660739,
            12660637
        ],
        "B": [
            12651050,
            12651633,
            12649430,
            12653737,
            12651319,
            12649594,
            12648571,
            12655826,
            12650623,
            12651808,
            12652662,
            12653428,
            12652181,
            12648689,
            12652043,
            12659743,
            12651329,
            12655202
        ],
        "A": [
            12646110,
            12645579,
            12647332,
            12646639,
            12645543,
            12645614,
            12645277,
            12645793,
            12646587,
            12648695,
            12647518,
            12646418,
            12649127,
            12645626,
            12646054,
            12646862,
            12646572,
            12646008
        ]
    },
    "name": "D. Minimization",
    "statement": "You’ve got array , consisting of integers and a positive integer . Array\r\nis indexed by integers from to .You need to permute the array elements\r\nso that value became minimal possible. In particular, it is allowed not\r\nto change order of elements at all.\r\n",
    "solutions": [
        "#include <iostream>\nusing namespace std;\n#include <algorithm>\ntypedef long long ll;\nll A[300000];\nll DP[5001][5001];\nll n, k;\nint main()\n{\n    cin >> n >> k;\n    for (int i=0; i<n; i++)\n        cin >> A[i];\n    sort(A, A+n);\n    ll num=n/k;\n    ll extra=n%k;\n    for (ll i=1; i<=k; i++)\n    {\n        for (ll j=0; j<=min(i, extra); j++)\n        {\n            if (j==0) DP[i][j]=DP[i-1][j]+A[i*num-1]-A[(i-1)*num];\n            else if (i==j)\n                DP[i][j]=DP[i-1][j-1]+A[i*num-1+j]-A[(i-1)*num+j-1];\n            else\n                DP[i][j]=min(DP[i-1][j]+A[i*num-1+j]-A[(i-1)*num+j], DP[i-1][j-1]+A[i*num-1+j]-A[(i-1)*num+j-1]);\n        }\n    }\n    cout << DP[k][extra] << endl;\n    //cout << k << \" \" << num << \" \" << extra << \" \" << DP[k][extra] << endl;\n    //cout << DP[1][0] << DP[1][1] << DP[2][0] << DP[2][1] << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "sortings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Minimization.json",
    "editorial_link": "https://codeforces.com//blog/entry/19923",
    "editorial": "We can divide all indices [1;n] into groups by their remainder modulo k. While counting , we can consider each group separately and sum the distances between neighbouring numbers in each group.\n\nConsider one group, corresponding to some remainder i modulo k, i.e. containing aj for . Let's write down its numbers from left to right: b1,?b2,?...,?bm. Then this group adds to the overall sum the value\n\n\nWe can notice that if we sort b1,?...,?bm in non-decreasing order, this sum will not increase. So, in the optimal answer we can consider that numbers in each group don't decrease. Furthermore, in that case this sum is equal to |bm?-?b1|.\n\nNow consider two groups b1,?...,?bm and c1,?c2,?...,?cl, both sorted in non-decreasing order. We claim that either b1???cl or bm???c1, i.e. segments [b1,?bm] and [c1,?cl] can have common points only in their endpoints.\n\nWhy is this true? These groups add |bm?-?b1|?+?|cl?-?c1| to the overall sum. We consider the case c1???b1, the other is symmetric. If c1?<?bm, then swapping c1 and bm will not increase the values these groups add to the answer, since the right border of b group moves to the left, and the left border of c group moves to the right. So, c1???bm in that case, and the assertion is proved.\n\nNow we know that the values in each group should from a continuous segment of the sorted original array. In fact, we have  groups of size  (so called small groups) and  groups of size  (so called large groups). Consider the following dynamic programming: dp[L][S]  the minimal sum of values added to the answer by L large groups and S small groups, if we choose the elements for them from the first  elements of the sorted array A. There are no more than O(k2) states, and each transition can be made in O(1): we choose large or small group to add and obtain the number it adds to the sum by subtracting two elements of the sorted array. The answer for the problem will be in .\n\nThe overall complexity of the solution is . We can note that in pretests  was quite small, and some slower solutions could pass, but they failed on final tests.",
    "hint": []
}