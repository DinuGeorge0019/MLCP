{
    "link": "https://codeforces.com//contest/366/problem/C",
    "problemId": "4074",
    "problem_idx": "C",
    "shortId": "366C",
    "contest_number": "366",
    "problem_submissions": {
        "E": [
            5223414,
            5232960,
            5224601,
            5224400,
            5224222,
            5217176,
            5224737,
            5224278,
            5226537,
            5218732,
            5224501,
            5240243,
            5224536,
            5228081,
            5226578
        ],
        "D": [
            5217035,
            5218139,
            5218798,
            5218839,
            5218268,
            5218550,
            5226120,
            5224735,
            5218888,
            5218628,
            5223995,
            5223329,
            5223776,
            5223645,
            5224564
        ],
        "C": [
            5215635,
            5215143,
            5216612,
            5216695,
            5224015,
            5217024,
            5216364,
            5232085,
            5225511,
            5216977,
            5216046,
            5215965,
            5216961,
            5216956,
            5217291,
            5216898,
            5216929,
            5218407,
            5225537,
            5223478
        ],
        "B": [
            5214230,
            5213966,
            5214711,
            5214981,
            5223546,
            5215334,
            5214481,
            5217130,
            5214153,
            5214206,
            5214371,
            5214882,
            5214468,
            5215543,
            5215465,
            5214916,
            5214805,
            5214477,
            5216227
        ],
        "A": [
            5213681,
            5213698,
            5213944,
            5214040,
            5218937,
            5214367,
            5213790,
            5214070,
            5213688,
            5213707,
            5213756,
            5213768,
            5214087,
            5213881,
            5214073,
            5213855,
            5213865,
            5213727
        ]
    },
    "name": "C. Dima and Salad",
    "statement": "Dima, Inna and Seryozha have gathered in a room. That’s right, someone’s\r\ngot to go. To cheer Seryozha up and inspire him to have a walk, Inna\r\ndecided to cook something. Dima and Seryozha have fruits in the fridge.\r\nEach fruit has two parameters: the taste and the number of calories.\r\nInna decided to make a fruit salad, so she wants to take some fruits\r\nfrom the fridge for it. Inna follows a certain principle as she chooses\r\nthe fruits: the total taste to the total calories ratio of the chosen\r\nfruits must equal . In other words, , where is the taste of the -th\r\nchosen fruit and is its calories.Inna hasn’t chosen the fruits yet, she\r\nis thinking: what is the maximum taste of the chosen fruits if she\r\nstrictly follows her principle? Help Inna solve this culinary problem\r\nnow the happiness of a young couple is in your hands!Inna loves Dima\r\nvery much so she wants to make the salad from at least one fruit.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nconst int N = 120, M = 300000, K = 150000, inf = ~0u >> 2;\n\nint dp[N][M], A[N], B[N], n, k;\n\nint main ()\n{\n\tscanf(\"%d%d\", &n, &k);\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\tscanf(\"%d\", &A[i]);\n\t}\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\tscanf(\"%d\", &B[i]);\n\t\tB[i] = A[i] - k * B[i];\n\t}\n\tint minv = K - 100000, maxv = K + 100000;\n\tfill(dp[0], dp[0] + M, -inf);\n\tdp[0][K] = 0;\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\tfor (int j = minv; j <= maxv; ++j)\n\t\t{\n\t\t\tdp[i][j] = dp[i - 1][j];\n\t\t\tif (j - B[i] >= minv && j - B[i] <= maxv)\n\t\t\t\tdp[i][j] = max(dp[i][j], dp[i - 1][j - B[i]] + A[i]);\n\t\t}\n\t}\n\tprintf(\"%d\\n\", dp[n][K] ? dp[n][K] : -1);\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Dima and Salad.json",
    "editorial_link": "https://codeforces.com//blog/entry/9704",
    "editorial": "Letâs calculate dinamic: where last looked fruit, balance difference\r\nbetween sum of colories and sum of tastes. Letâs multiply each by . The\r\nanswer will be . = maximal possible sum of tastes under conditions.\r\nStep: from we can relax answers: if we donât choose a fruit if we choose\r\na fruit. Balance can be negative, so in programming languages which\r\ndonât support negative indexation, indexes should be shifted by the\r\nbiggest negative number for balance. If we determine the balance as it\r\nwill be the sum of all tastes.\r\n",
    "hint": []
}