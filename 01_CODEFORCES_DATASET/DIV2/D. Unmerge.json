{
    "link": "https://codeforces.com//contest/1382/problem/D",
    "problemId": "672681",
    "problem_idx": "D",
    "shortId": "1382D",
    "contest_number": "1382",
    "problem_submissions": {
        "E": [
            87580740,
            87589411,
            87581646,
            87592012,
            87582927,
            87692528,
            87775376,
            87717136
        ],
        "D": [
            87555489,
            87548847,
            87561646,
            87566268,
            87542684,
            87550389,
            87559938,
            87557650,
            87551427,
            87566193,
            87564529,
            87561452,
            87563995,
            87564259,
            87570645,
            87563751,
            87565987,
            87569150,
            87571590
        ],
        "C2": [
            87546116,
            87555702,
            87548714,
            87552069,
            87538337,
            87550493,
            87568748,
            87548658,
            87549905,
            87553287,
            87550271,
            87552175,
            87546582,
            87555140,
            87546998,
            87548618,
            87546324
        ],
        "C1": [
            87545885,
            87534226,
            87549038,
            87551870,
            87577593,
            87538735,
            87550728,
            87547738,
            87548907,
            87549506,
            87553050,
            87549957,
            87552439,
            87547080,
            87548161,
            87546830,
            87544742,
            87546462
        ],
        "B": [
            87532814,
            87538666,
            87535698,
            87538451,
            87544080,
            87530844,
            87530725,
            87531828,
            87532147,
            87535077,
            87537243,
            87537711,
            87538752,
            87530008,
            87533230,
            87538244,
            87535683,
            87533610
        ],
        "A": [
            87524660,
            87526155,
            87619468,
            87524613,
            87533175,
            87523893,
            87526148,
            87532501,
            87524134,
            87525800,
            87526012,
            87524222,
            87523259,
            87523315,
            87524086,
            87524062,
            87526273,
            87523705
        ]
    },
    "name": "D. Unmerge",
    "statement": "Let a and b be two arrays of lengths n and m, respectively, with no\r\nelements in common. We can define a new array\r\nmathrm{merge}(a,b) of length n+m recursively as follows: If one of the\r\narrays is empty, the result is the other array. That is,\r\nmathrm{merge}(\r\nemptyset,b)=b and\r\nmathrm{merge}(a,\r\nemptyset)=a. In particular,\r\nmathrm{merge}(\r\nemptyset,\r\nemptyset)=\r\nemptyset. If both arrays are non-empty, and a_1<b_1, then\r\nmathrm{merge}(a,b)=[a_1]+\r\nmathrm{merge}([a_2,\r\nldots,a_n],b). That is, we delete the first element a_1 of a, merge the\r\nremaining arrays, then add a_1 to the beginning of the result. If both\r\narrays are non-empty, and a_1>b_1, then\r\nmathrm{merge}(a,b)=[b_1]+\r\nmathrm{merge}(a,[b_2,\r\nldots,b_m]). That is, we delete the first element b_1 of b, merge the\r\nremaining arrays, then add b_1 to the beginning of the result. This\r\nalgorithm has the nice property that if a and b are sorted, then\r\nmathrm{merge}(a,b) will also be sorted. For example, it is used as a\r\nsubroutine in merge-sort. For this problem, however, we will consider\r\nthe same procedure acting on non-sorted arrays as well. For example, if\r\na=[3,1] and b=[2,4], then\r\nmathrm{merge}(a,b)=[2,3,1,4].A permutation is an array consisting of n\r\ndistinct integers from 1 to n in arbitrary order. For example,\r\n[2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2\r\nappears twice in the array) and [1,3,4] is also not a permutation (n=3\r\nbut there is 4 in the array).There is a permutation p of length 2n.\r\nDetermine if there exist two arrays a and b, each of length n and with\r\nno elements in common, so that p=\r\nmathrm{merge}(a,b).\r\n",
    "solutions": [
        "#pragma comment(linker, \"/STACK:10000000000\")\n#pragma GCC optimize(\"O3\")\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdlib.h>\n#include <stdio.h>\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <math.h>\n#include <map>\n#include <chrono>\n#include <set>\n#include <stack>\n#include <vector>\n#include <time.h>\n#include <random>\n#include <algorithm>\n#include <string>\n#include <string.h>\n#include <queue>\n#include <deque>\n#include <functional>\n#include <cctype>\n#include <list>\n#include <unordered_set>\n#include <unordered_map>\n#include <bitset>\n#include <complex>\n#define rt return\n#define mp make_pair\n#define endl '\\n'\n#define sqr(x) ((x) * (x))\n#define all(x) (x).begin(), (x).end()\n#define rep(x) for (int rep_iter = 0; rep_iter < x; ++rep_iter)\n#define fnd(x, y) (x.find(y) != x.end())\n#define fndv(x, y) (find(all(x), y) != end(x))\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<db, db> pdd;\ntypedef unsigned char bt;\ntypedef unsigned int uint;\nconst int MOD = 1000000007;\nconst int INF = 1000000007LL;\nconst ll INF2 = 1LL << 62LL;\nconst long double EPS = 1e-9;\n#ifdef _DEBUG\nconst int SIZE = 120;\n#endif\n#ifndef _DEBUG\nconst int SIZE = 200010; //200010\n#endif\nmt19937 rng(time(0));\nuniform_int_distribution<int> uid(-1000000000, 1000000000);\n\n\n\nint main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n#endif\n\tios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\n\tint tt;\n\tcin >> tt;\n\trep(tt) {\n\t\tint n;\n\t\tcin >> n;\n\t\tn *= 2;\n\t\tvector<int> local_max(n, 0);\n\t\tint maxx = -1, x;\n\t\tfor (auto& i : local_max) {\n\t\t\tcin >> x;\n\t\t\tif (x > maxx) {\n\t\t\t\ti = 1;\n\t\t\t\tmaxx = x;\n\t\t\t}\n\t\t}\n\t\tvector<int> a;\n\t\tint lst = -1;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (local_max[i]) {\n\t\t\t\tif (lst != -1)\n\t\t\t\t\ta.push_back(i - lst);\n\t\t\t\tlst = i;\n\t\t\t}\n\t\t}\n\t\ta.push_back(n - lst);\n\t\tvector<int> u(n + 10);\n\t\tu[0] = 1;\n\t\tfor (auto& i : a) {\n\t\t\tfor (int j = n / 2; j >= 0; --j) {\n\t\t\t\tif (u[j])\n\t\t\t\t\tu[j + i] = 1;\n\t\t\t}\n\t\t}\n\t\tif (u[n / 2])\n\t\t\tcout << \"YES\\n\";\n\t\telse\n\t\t\tcout << \"NO\\n\";\n\t}\n\n\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Unmerge.json",
    "editorial_link": "https://codeforces.com//blog/entry/80427",
    "editorial": "Consider the maximum element of . Assume without loss of generality that\r\nit comes from array . Then the merge algorithm will exhaust array before\r\nit takes the element . Therefore, if appears at index in , the entire\r\nsuffix of beginning at index must be a contiguous block in one of the\r\narrays or .Then if we ignore this suffix of , we should determine if the\r\nprefix of can be the merge of two arrays of certain sizes. We can repeat\r\nthe same argument, as the maximum remaining element also corresponds to\r\na contiguous block.Taking this argument all the way, consider all\r\nindices where is greater than all elements that come before. This gives\r\nus all the lengths of the contiguous blocks, and we should determine if\r\na subset of them add up to . We\u00e2\u0080\u0099ve shown this condition is necessary. It\r\nis also sufficient because if we assign the blocks to and accordingly,\r\nthe merge algorithm works correctly.Now, this is just a subset-sum\r\nproblem. The standard subset-sum DP approach takes time, which is good\r\nenough.It\u00e2\u0080\u0099s also possible to do by using the fact that sum of values is\r\n(as they are the lengths of disjoint blocks), meaning there are only\r\ndistinct values.\r\n"
}