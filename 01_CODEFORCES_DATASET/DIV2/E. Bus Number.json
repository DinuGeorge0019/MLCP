{
    "link": "https://codeforces.com//contest/991/problem/E",
    "problemId": "192854",
    "problem_idx": "E",
    "shortId": "991E",
    "contest_number": "991",
    "problem_submissions": {
        "F": [
            39576800,
            39587349,
            39587290,
            39590781
        ],
        "E": [
            39560920,
            39563177,
            39554918,
            39559780,
            39559264,
            39559562,
            39558267,
            39561151,
            39561555,
            39562575,
            39562535,
            39558347,
            39564264,
            39564956,
            39563328,
            39561476,
            39562779,
            39563469,
            39566393
        ],
        "D": [
            39555573,
            39558828,
            39558568,
            39556690,
            39555594,
            39556894,
            39555092,
            39556834,
            39556593,
            39555383,
            39556152,
            39555415,
            39558075,
            39558604,
            39558390,
            39558262,
            39556471,
            39559559,
            39557003
        ],
        "C": [
            39552143,
            39554582,
            39560997,
            39551727,
            39552807,
            39552053,
            39550273,
            39551314,
            39545924,
            39552118,
            39549887,
            39551605,
            110388396,
            39551266,
            39552996,
            39551353,
            39554425,
            39551429,
            39552969,
            39552631
        ],
        "B": [
            39547610,
            39548679,
            39554562,
            39547503,
            39548120,
            39548048,
            39546472,
            39547257,
            39549325,
            39548599,
            39547328,
            39547986,
            39548474,
            39549006,
            39549960,
            39550453,
            39548096,
            39548463,
            39547961
        ],
        "A": [
            39545591,
            39545651,
            39551664,
            39545432,
            39545677,
            39545592,
            39545183,
            39545239,
            39545475,
            39545255,
            39547682,
            39545791,
            39545926,
            39552806,
            39547513,
            39545857,
            39549213,
            39545940
        ]
    },
    "name": "E. Bus Number",
    "statement": "This night wasn’t easy on Vasya. His favorite team lost, and he didn’t\r\nfind himself victorious either although he played perfectly, his\r\nteammates let him down every time. He had to win at least one more time,\r\nbut the losestreak only grew longer and longer... It’s no wonder he\r\ndidn’t get any sleep this night at all.In the morning, Vasya was waiting\r\nthe bus to the university on the bus stop. Vasya’s thoughts were hazy\r\nand so he couldn’t remember the right bus’ number quite right and got\r\nonto the bus with the number n.In the bus, Vasya thought that he could\r\nget the order of the digits in the number of the bus wrong. Futhermore,\r\nhe could \"see\" some digits several times, but the digits he saw were\r\ndefinitely in the real number of the bus. For example, if Vasya saw the\r\nnumber , it could mean that the real bus number could be , , or just .\r\nHowever, numbers , , definitely couldn’t be the number of the bus. Also,\r\nreal bus number couldn’t start with the digit , this meaning that, for\r\nexample, number couldn’t be the real bus number too.Given n, determine\r\nthe total number of possible bus number variants.\r\n",
    "solutions": [
        "// who's it from?\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define f first\n#define s second\n#define SZ(x) (int)(x).size()\n#define ALL(x) (x).begin(), (x).end()\n\nll n;\nll fac[20];\n\nint32_t main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcin >> n;\n\tll tmp = n;\n\tvector<int> li;\n\tmap<int, int> lol;\n\twhile (tmp) {\n\t\tlol[tmp % 10]++;\n\t\tli.push_back(tmp % 10);\n\t\ttmp /= 10;\n\t}\n\tfac[0] = 1;\n\tfor (int i = 1; i < 20; i++) {\n\t\tfac[i] = fac[i - 1] * i;\n\t}\n\tll ans = 0;\n\tmap<map<int, int>, bool> seen;\n\tfor (int mask = 0; mask < (1 << (SZ(li))); mask++) {\n\t\tmap<int, int> cnt;\n\t\tint d = 0;\n\t\tfor (int i = 0; i < SZ(li); i++) {\n\t\t\tif ((mask >> i) & 1) {\n\t\t\t\tcnt[li[i]]++;\n\t\t\t\td++;\n\t\t\t}\n\t\t}\n\t\tif (SZ(cnt) != SZ(lol) || seen[cnt]) {\n\t\t\tcontinue;\n\t\t}\n\t\tseen[cnt] = true;\n\t\tll res = fac[d];\n\t\tbool haszero = false;\n\t\tfor (map<int, int>::value_type it : cnt) {\n\t\t\tres /= fac[it.s];\n\t\t\tif (it.f == 0) {\n\t\t\t\thaszero = true;\n\t\t\t}\n\t\t}\n\t\tll over = 0;\n\t\tif (haszero) {\n\t\t\tcnt[0]--;\n\t\t\tif (cnt[0] == 0) {\n\t\t\t\tcnt.erase(0);\n\t\t\t}\n\t\t\tover = fac[d - 1];\n\t\t\tfor (map<int ,int>::value_type it : cnt) {\n\t\t\t\tover /= fac[it.s];\n\t\t\t}\n\t\t}\n\t\tans += res - over;\n\t\t//cout << bitset<4>(mask) << ' ' << res << ' ' << over << endl;\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "math"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Bus Number.json",
    "editorial_link": "https://codeforces.com/blog/entry/60181",
    "editorial": "EditorialAccording to the statement, digits of original bus number form\r\na subset of digits of the number seen by Vasya. It is possible to\r\niterate through all the subsets in operations (where is length of ). For\r\neach subset we need to check whether it is correct (contains all\r\nnecessary digits) and transform it to ânormalâ state (sort the digits\r\nfor example), in order to avoid conflicts with another subsets which\r\ndiffer only at the digits order. We have to keep only unique subsets.\r\nNow for each subset of digits we have to calculate amount of\r\ncorresponding correct bus numbers. It can be calculated in operations\r\nusing permutations of multisets formula (see âPermutations of multisetsâ\r\nat the article about permutations and multinomial coefficients), where\r\ntotal number of digits in the subset and number of digits : Now, we have\r\nto subtract amount of bus numbers with leading zeroes from the result\r\nfor this subset if it contains digit . This can be done in the very same\r\nway: if we place digit at the first position of the number, we have to\r\ndecrease by and decrease by 1; the formula described above will\r\ncalculate amount of ways to place remaining digits of the subset and\r\nthis number should be subtract from the answer: In total, even with such\r\nrough evaluation of complexity and naive implementation we get\r\noperations, where amount of digits in . It is easy to check that the\r\nanswer doesnât exceed so the standard 64-bit integer type will be\r\nenough.\r\n",
    "hint": []
}