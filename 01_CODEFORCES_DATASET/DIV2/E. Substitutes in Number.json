{
    "link": "https://codeforces.com//contest/465/problem/E",
    "problemId": "13523",
    "problem_idx": "E",
    "shortId": "465E",
    "contest_number": "465",
    "problem_submissions": {
        "A": [
            7711802,
            7701020,
            7701162,
            7701215,
            7701067,
            7700923,
            7700938,
            7700998,
            7700973,
            7701012,
            7701685,
            7701159,
            7701027,
            7700987,
            7701142,
            7707761
        ],
        "B": [
            7710960,
            7702304,
            7704505,
            7702799,
            7702477,
            7701665,
            7702245,
            7703705,
            7702813,
            7701866,
            7704644,
            7703425,
            7704203,
            7702935,
            7704029,
            7708200
        ],
        "C": [
            7710335,
            7706333,
            7703312,
            7705351,
            7704980,
            7706564,
            7707092,
            7707812,
            7708661,
            7712440,
            7711616,
            7713184,
            7708012,
            7713150,
            7707559,
            7704663,
            7713529
        ],
        "D": [
            7709422,
            7712990,
            7717263,
            7711449,
            7714497,
            7710959,
            7711750,
            7710792,
            7709092,
            7709745,
            7709556,
            7712262,
            7717463,
            7717446,
            7710168,
            7710367
        ],
        "E": [
            7704010,
            7709717,
            7707403,
            7708373,
            7710918,
            7711818,
            9363741,
            7713618,
            7713248
        ]
    },
    "name": "E. Substitutes in Number",
    "statement": "Andrew and Eugene are playing a game. Initially, Andrew has string ,\r\nconsisting of digits. Eugene sends Andrew multiple queries of type \"\",\r\nthat means \"replace all digits in string with substrings equal to \". For\r\nexample, if , then query \"\" transforms to , and query \"\" (\"replace 3 by\r\nan empty string\") transforms it to . After all the queries Eugene asks\r\nAndrew to find the remainder after division of number with decimal\r\nrepresentation equal to by . When you represent as a decimal number,\r\nplease ignore the leading zeroes; also if is an empty string, then it\u2019s\r\nassumed that the number equals to zero.Andrew got tired of processing\r\nEugene\u2019s requests manually and he asked you to write a program for that.\r\nHelp him!\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <iostream>\n\n#define REP(i, a, b) for (int i = (a), _end_ = (b); i != _end_; ++i)\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mp make_pair\n#define x first\n#define y second\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int Mod = 1e9 + 7;\nconst int maxn = 100000;\n\npair<int, int> result[10];\n\nint n;\n\nchar from[maxn + 5];\nstring to[maxn + 5];\nstring s;\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tcin >> s >> n;\n\tREP(i, 0, n)\n\t{\n\t\tcin >> to[i];\n\t\tfrom[i] = to[i][0];\n\t\tto[i] = to[i].substr(3);\n\t}\n\tREP(i, 0, n) cerr << from[i] << ' ' << to[i] << endl;\n\tREP(i, 0, 10) result[i] = mp(i, 10);\n\tfor (int i = n - 1; i >= 0; --i)\n\t{\n\t\tpair<int, int> new_result = mp(0, 1);\n\t\tfor (int j = to[i].size() - 1; j >= 0; --j)\n\t\t{\n\t\t\tnew_result.x = (new_result.x + (LL)result[to[i][j] - '0'].x * new_result.y) % Mod;\n\t\t\tnew_result.y = (LL)new_result.y * result[to[i][j] - '0'].y % Mod;\n\t\t}\n\t\tresult[from[i] - '0'] = new_result;\n\t}\n\tpair<int, int> new_result = mp(0, 1);\n\tfor (int j = s.size() - 1; j >= 0; --j)\n\t{\n\t\tnew_result.x = (new_result.x + (LL)result[s[j] - '0'].x * new_result.y) % Mod;\n\t\tnew_result.y = (LL)new_result.y * result[s[j] - '0'].y % Mod;\n\t}\n\tprintf(\"%d\\n\", new_result.x);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dp"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Substitutes in Number.json",
    "editorial_link": "https://codeforces.com//blog/entry/13694",
    "editorial": "It is quite diffcult to store the whole string after each query as its length grows exponentially and queries may change it dramatically. The good advice is: if you can't come up with a solution for a problem, try solving it from the other end. =)\n\nSuppose we know for some sequence of queries that digit d will turn into string td for every digit. Then string s?=?d1... dn will turn into td1?+?...?+?tdn (+ for concatenation). Denote v(s) numeric value of s. Then v(s) can be expressed as v(tdn)?+?10|dn|(v(tdn?-?1)?+?10|dn?-?1|(...)). So v(s) can be computed if we know md?=?v(td) and sd?=?10|td| for all d. As we need answer modulo P?=?109?+?7 we can store these numbers modulo P.\n\nNow prepend some new query di???ti to given sequence. How will md and sd change? Clearly, for all d???di these numbers won't change, and for di they can be computed according to the rule above. This recounting is done in O(|ti|) time. After adding all queries, find answer for s using the same procedure in O(|s|) time. Finally, our time complexity is . The code for this problem pretty much consists of the above formula, so implementation is as easy as it gets once you grasp the idea. =)\n\nOptimized simple solutions which just replaced substrings could manage to pass pretests. Sorry for that."
}