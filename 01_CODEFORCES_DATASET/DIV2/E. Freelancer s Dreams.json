{"link": "https://codeforces.com//contest/606/problem/E", "problemId": "42716", "problem_idx": "E", "shortId": "606E", "contest_number": "606", "problem_submissions": {"E": [14725950, 14727210, 14727285, 14729262, 14730116, 14751808, 14744112], "D": [14723234, 14720930, 14722869, 14722527, 14721927, 14721746, 14724535, 14726175, 14725267, 14727123, 14723529, 14723141, 14723054, 14723150, 14724111, 14724621, 14724261, 14729733, 14726510, 14723588], "C": [14720687, 14718170, 14720169, 14719390, 14718531, 14725447, 14722596, 14730393, 14718042, 14720969, 14719927, 14719309, 14718761, 14720872, 14720282, 14719898, 14721458, 14724065, 14721907, 14718844], "B": [14719527, 14727489, 14717796, 14718524, 14717743, 14717859, 14719198, 14721650, 14720720, 14718805, 14718705, 14720039, 14720141, 14718565, 14718498, 14718858, 14720719, 14719695, 14729480], "A": [14716101, 14721455, 14715984, 14715809, 14716134, 14715791, 14715975, 14739251, 14715905, 14717499, 14716801, 14716057, 14715921, 14715914, 14715981, 14716162, 14716237, 14717038, 14716311, 14716156]}, "name": "E. Freelancer s Dreams", "statement": "Mikhail the Freelancer dreams of two things: to become a cool programmer\r\nand to buy a flat in Moscow. To become a cool programmer, he needs at\r\nleast experience points, and a desired flat in Moscow costs dollars.\r\nMikhail is determined to follow his dreams and registered at a freelance\r\nsite.He has suggestions to work on distinct projects. Mikhail has\r\nalready evaluated that the participation in the -th project will\r\nincrease his experience by per day and bring dollars per day. As\r\nfreelance work implies flexible working hours, Mikhail is free to stop\r\nworking on one project at any time and start working on another project.\r\nDoing so, he receives the respective share of experience and money.\r\nMikhail is only trying to become a cool programmer, so he is able to\r\nwork only on one project at any moment of time.Find the real value,\r\nequal to the minimum number of days Mikhail needs to make his dream come\r\ntrue.For example, suppose Mikhail is suggested to work on three projects\r\nand , , , , , . Also, and . In order to achieve his aims Mikhail has to\r\nwork for days on both first and third projects. Indeed, and .\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long double DOUBLE;\ntypedef vector<DOUBLE> VD;\ntypedef vector<VD> VVD;\ntypedef vector<int> VI;\n\nconst DOUBLE EPS = 1e-9;\n\nstruct LPSolver {\n  int m, n;\n  VI B, N;\n  VVD D;\n\n  LPSolver(const VVD &A, const VD &b, const VD &c) :\n    m(b.size()), n(c.size()), N(n + 1), B(m), D(m + 2, VD(n + 2)) {\n    for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) D[i][j] = A[i][j];\n    for (int i = 0; i < m; i++) { B[i] = n + i; D[i][n] = -1; D[i][n + 1] = b[i]; }\n    for (int j = 0; j < n; j++) { N[j] = j; D[m][j] = -c[j]; }\n    N[n] = -1; D[m + 1][n] = 1;\n  }\n\n  void Pivot(int r, int s) {\n    for (int i = 0; i < m + 2; i++) if (i != r)\n      for (int j = 0; j < n + 2; j++) if (j != s)\n        D[i][j] -= D[r][j] * D[i][s] / D[r][s];\n    for (int j = 0; j < n + 2; j++) if (j != s) D[r][j] /= D[r][s];\n    for (int i = 0; i < m + 2; i++) if (i != r) D[i][s] /= -D[r][s];\n    D[r][s] = 1.0 / D[r][s];\n    swap(B[r], N[s]);\n  }\n\n  bool Simplex(int phase) {\n    int x = phase == 1 ? m + 1 : m;\n    while (true) {\n      int s = -1;\n      for (int j = 0; j <= n; j++) {\n        if (phase == 2 && N[j] == -1) continue;\n        if (s == -1 || D[x][j] < D[x][s] || D[x][j] == D[x][s] && N[j] < N[s]) s = j;\n      }\n      if (D[x][s] > -EPS) return true;\n      int r = -1;\n      for (int i = 0; i < m; i++) {\n        if (D[i][s] < EPS) continue;\n        if (r == -1 || D[i][n + 1] / D[i][s] < D[r][n + 1] / D[r][s] ||\n          (D[i][n + 1] / D[i][s]) == (D[r][n + 1] / D[r][s]) && B[i] < B[r]) r = i;\n      }\n      if (r == -1) return false;\n      Pivot(r, s);\n    }\n  }\n\n  DOUBLE Solve(VD &x) {\n    int r = 0;\n    for (int i = 1; i < m; i++) if (D[i][n + 1] < D[r][n + 1]) r = i;\n    if (D[r][n + 1] < -EPS) {\n      Pivot(r, n);\n      if (!Simplex(1) || D[m + 1][n + 1] < -EPS) return -numeric_limits<DOUBLE>::infinity();\n      for (int i = 0; i < m; i++) if (B[i] == -1) {\n        int s = -1;\n        for (int j = 0; j <= n; j++)\n          if (s == -1 || D[i][j] < D[i][s] || D[i][j] == D[i][s] && N[j] < N[s]) s = j;\n        Pivot(i, s);\n      }\n    }\n    if (!Simplex(2)) return numeric_limits<DOUBLE>::infinity();\n    x = VD(n);\n    for (int i = 0; i < m; i++) if (B[i] < n) x[B[i]] = D[i][n + 1];\n    return D[m][n + 1];\n  }\n};\n\nvector<int> aaa, bbb;\n\nint main()\n{\n    //freopen(\"E.txt\", \"r\", stdin);\n    ios::sync_with_stdio(false);\n\n    int n;\n    cin >>n;\n    int AA, BB;\n    cin >> AA >> BB;\n\n\n\n    for (int i=0;i<n;i++) {\n        int xx, yy;\n        cin >> xx>>yy;\n        aaa.push_back(xx);\n        bbb.push_back(yy);\n    }\n\n\n\n\n\n    int m = 2;\n  DOUBLE _A[2][n];\n\n  for (int i=0;i<n;i++) {\n    _A[0][i]=-(long double) aaa[i];\n    _A[1][i]=-(long double) bbb[i];\n  }\n\n  DOUBLE _b[2] = { -(long double) AA, -(long double)BB };\n  DOUBLE _c[n];\n  for (int i=0;i<n;i++) _c[i]=-1.0;\n\n  VVD A(m);\n  VD b(_b, _b + m);\n  VD c(_c, _c + n);\n  for (int i = 0; i < m; i++) A[i] = VD(_A[i], _A[i] + n);\n\n  LPSolver solver(A, b, c);\n  VD x;\n  DOUBLE value = solver.Solve(x);\n\n    cout.precision(8);\n  cout<<fixed << (0-value) << endl;\n\n\n    return 0;\n}\n"], "input": "", "output": "", "tags": [], "dificulty": "2400", "interactive": false}