{
    "link": "https://codeforces.com//contest/1189/problem/F",
    "problemId": "366818",
    "problem_idx": "F",
    "shortId": "1189F",
    "contest_number": "1189",
    "problem_submissions": {
        "F": [
            56579282,
            56588782
        ],
        "E": [
            56573729,
            56581060,
            56587807,
            56582721,
            56573316,
            56576668,
            56574574,
            56574253,
            56578675,
            56569961,
            56571979,
            56580045,
            56581830,
            56582305,
            56578680,
            56579770,
            56574900,
            56580107,
            56581322,
            56581737
        ],
        "D2": [
            56570743,
            56583951,
            56590479
        ],
        "D1": [
            56566287,
            56577941,
            56576232,
            56577551,
            56577147,
            56570210,
            56577116,
            56576238,
            56575115,
            56582247,
            56573204,
            56575137,
            56576626,
            56575444,
            56576506,
            56574493,
            56579444,
            56574000,
            56578325,
            56573475
        ],
        "C": [
            56564288,
            56574952,
            56571400,
            56573424,
            56567619,
            56566699,
            56569018,
            56568449,
            56569895,
            56577759,
            56579059,
            56569406,
            56571224,
            56569610,
            56573567,
            56600577,
            56571447,
            56582169,
            56576771,
            56570411,
            56571321
        ],
        "B": [
            56562679,
            56568440,
            56565277,
            56565965,
            56565753,
            56564877,
            56565902,
            56566168,
            56565507,
            56574431,
            56576380,
            56566755,
            56565186,
            56567011,
            56566710,
            56600572,
            56577002,
            56568448,
            56570059,
            56563578,
            56569221
        ],
        "A": [
            56561345,
            56562783,
            56561869,
            56561808,
            56562857,
            56561895,
            56562128,
            56561757,
            56561830,
            56571793,
            56568111,
            56561276,
            56563011,
            56562623,
            56562477,
            56600568,
            56563950,
            56562575,
            56563861,
            56594597,
            56561346,
            56563282
        ]
    },
    "name": "F. Array Beauty",
    "statement": "Let’s call beauty of an array b_1, b_2,\r\nldots, b_n (n > 1)\r\nmin\r\nlimits_{1\r\nleq i < j\r\nleq n} |b_i - b_j|.You’re given an array a_1, a_2,\r\nldots a_n and a number k. Calculate the sum of beauty over all\r\nsubsequences of the array of length exactly k. As this number can be\r\nvery large, output it modulo 998244353.A sequence a is a subsequence of\r\nan array b if a can be obtained from b by deletion of several (possibly,\r\nzero or all) elements.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nconst int mod=998244353;\nint a[1010],d[1010][1010],e[1010][1010];\nint main(){\n\tint n,m;scanf(\"%d%d\",&n,&m);\n\tfor(int i=0;i<n;i++)scanf(\"%d\",a+i);\n\tsort(a,a+n);\n\tint ans=0;\n\tfor(int j=0;j<n;j++)e[1][j]=j;\n\tint X=1;\n\twhile(X*(m-1)<=100000)X++;\n\tfor(int t=1;t<X;t++){\n\t\tfor(int i=2;i<=m;i++){\n\t\t\tfor(int j=0,k=0;j<n;j++){\n\t\t\t\twhile(a[j]-a[k]>=t)k++;\n\t\t\t\td[i][j]=e[i-1][k];\n\t\t\t\te[i][j+1]=e[i][j]+d[i][j];\n\t\t\t\tif(e[i][j+1]>=mod)e[i][j+1]-=mod;\n\t\t\t}\n\t\t}\n\t\tans+=e[m][n];\n\t\tif(ans>=mod)ans-=mod;\n\t}\n\tprintf(\"%d\\n\",ans);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Array Beauty.json",
    "editorial_link": "https://codeforces.com//blog/entry/68079",
    "editorial": "First of all, let's learn how to solve the following subtask:\n\nFor given x\n how many subsequences of length k\n have beauty at least x\n? If we know that the answer for x\n is px\n, than the answer for original task is p1+p2++pmax(a)\n, where max(a)\n is maximum in array a\n. Let's solve subtask.\n\nSuppose, that array is sorted. We should count subsequence p1<p2,<pk\n, iff:\n\nap2?ap1+x,,apk?apk?1+x\n.\n\nWe will solve this task using dp. The slow solution is:\n\ndp[last][cnt]\n  number of subsequences of length cnt\n, which end in alast\n. There are transitions from state with last?<last,cnt?=cnt?1\n, such that alast?alast?+x\n. To optimize it we need to note, that suitable last?\n form some prefix of the array. If we know needed prefixes and prefix sums from the previous layer of dp, then we can make transitions in constant time. We can find needed prefixes using two pointers(because it's obvious, that length of prefixes doesn't decrease). So, we can solve subtask in O(nk)\n time.\n\nAnd, using solution to subtask, we can solve inital task in O(max(a)nk)\n. And here comes magic:\n\nIf x>max(a)k?1\n, than px=0\n. Indeed, ???? ap2?ap1+x,,apk?apk?1+x\n, than:\n\nan?apk?apk?1+x?apk?2+2x?ap1+(k?1)x?(k?1)x\n. It follows: (k?1)x?an?x?ank?1\n.\n\nSo we can run our dp only for x?max(a)k?1\n. In total our solution works in O(max(a)k?1nk)=O(max(a)n)\n time, because kk?1?2\n.",
    "hint": []
}