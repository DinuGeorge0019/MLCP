{
    "link": "https://codeforces.com//contest/114/problem/D",
    "problemId": "600",
    "problem_idx": "D",
    "shortId": "114D",
    "contest_number": "114",
    "problem_submissions": {
        "D": [
            680614,
            677278,
            687034,
            703847,
            688239,
            686718
        ],
        "C": [
            679537,
            677329,
            677420,
            678206,
            678894,
            677340,
            678896,
            678198,
            677942,
            678443,
            677408,
            678308,
            677570,
            677264
        ],
        "B": [
            675892,
            675509,
            675942,
            675643,
            676134,
            676935,
            675118,
            676157,
            675384,
            675637,
            675937,
            676230,
            680438,
            675305,
            675437,
            675487
        ],
        "A": [
            674586,
            674367,
            674130,
            674388,
            674341,
            674633,
            674152,
            674272,
            675893,
            674247,
            674536,
            674866,
            674450,
            674150,
            674236,
            674109
        ],
        "E": [
            703890,
            692770
        ]
    },
    "name": "D. Petr ",
    "statement": "Long ago, when Petya was a schoolboy, he was very much interested in the\r\nPetr language grammar. During one lesson Petya got interested in the\r\nfollowing question: how many different continuous substrings starting\r\nwith the and ending with the (it is possible ), the given string has.\r\nSubstrings are different if and only if their contents aren’t equal,\r\ntheir positions of occurence don’t matter. Petya wasn’t quite good at\r\nmath, that’s why he couldn’t count this number. Help him!\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <string.h>\n#include <algorithm>\nusing namespace std;\n\nconst int K = 4;\nconst int A[] = { 29, 31, 47, 51 };\nconst int N = 2010;\nconst int HASH_SIZE = N * N + 1;\n\nstruct hash_elem {\n  int e;\n  unsigned key[K];\n};\n\nchar s[N], a[N], b[N];\nunsigned ks[K][N], ka[K][N], kb[K][N];\nunsigned keys[K];\nint na, nb, ns;\nunsigned pw[K][N];\nhash_elem hash_elems[HASH_SIZE];\nunsigned key[K];\n\nint insert(unsigned *key) {\n  unsigned t = 0;\n  for (int i = 0; i < K; i++)\n    t ^= key[i];\n  t %= HASH_SIZE;\n  unsigned k = 1;\n\n  while (1) {\n    hash_elem *e = &hash_elems[t];\n    if (e->e) {\n      int flag = 1;\n      for (int i = 0; i < K; i++)\n        if (key[i] != e->key[i]) flag = 0;\n      if (flag) return 0;\n    } else {\n      e->e = 1;\n      memcpy(e->key, key, K * sizeof(unsigned));\n      return 1;\n    }\n\n    k = (k + 2) % HASH_SIZE;\n    t = (t + k) % HASH_SIZE;\n  }\n}\n\nvoid hash(char *s, unsigned (*key)[N]) {\n  int n = strlen(s);\n  for (int k = 0; k < K; k++) {\n    key[k][n] = 0;\n    for (int i = n - 1; i >= 0; i--)\n      key[k][i] = key[k][i + 1] * A[k] + s[i];\n  }\n}\n\nint check_start(int i) {\n  for (int k = 0; k < K; k++)\n    if (ks[k][i] - ks[k][i + na] * pw[k][na] != ka[k][0]) return 0;\n  return 1;\n}\n\nint check_end(int i) {\n  for (int k = 0; k < K; k++)\n    if (ks[k][i] - ks[k][i + nb] * pw[k][nb] != kb[k][0]) return 0;\n  return 1;\n}\n\nint main() {\n  for (int k = 0; k < K; k++) {\n    pw[k][0] = 1;\n    for (int i = 1; i < N; i++)\n      pw[k][i] = pw[k][i - 1] * A[k];\n  }\n\n  scanf(\"%s %s %s\", s, a, b);\n  hash(s, ks);\n  hash(a, ka);\n  hash(b, kb);\n  ns = strlen(s);\n  na = strlen(a);\n  nb = strlen(b);\n\n  int ans = 0;\n  for (int i = 0; i + na <= ns; i++) if (check_start(i)) {\n    for (int j = max(i, i + na - nb); j + nb <= ns; j++) if (check_end(j)) {\n//    printf(\"%d %d\\n\", i, j);\n      int t = j + nb;\n      for (int k = 0; k < K; k++)\n        key[k] = ks[k][i] - ks[k][t] * pw[k][t - i];\n      ans += insert(key);\n    }\n  }\n  printf(\"%d\\n\", ans);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "hashing",
        "string suffix structures",
        "strings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Petr .json",
    "editorial_link": "https://codeforces.com//blog/entry/2627",
    "editorial": " Let's find all occurrences of begin and end. Then we'll map the whole string to number 0. After this we will simply add one symbol per iteration to already seen sub-strings and map new strings to some non-negative integers. One can notice that we will never reach a situation when more then 2000 different strings exist, so we can map them easily. Now, as per we know all the ends and beginnings of strings and different string of equal length are mapped to different numbers ( and equal strings are mapped equally), we can simply count the number of necessary sub-strings of certain length. So, we have time complexity O(N2LogN), since we are making N iterations and each is done in O(NLogN) time. ",
    "hint": []
}