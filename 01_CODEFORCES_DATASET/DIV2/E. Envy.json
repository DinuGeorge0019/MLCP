{"link": "https://codeforces.com//contest/892/problem/E", "problemId": "134549", "problem_idx": "E", "shortId": "892E", "contest_number": "892", "problem_submissions": {"E": [32401257, 32402525, 32403714, 32407695, 32403298, 32403996, 32403230, 32398821, 37995560, 37995389, 37993576], "D": [32393381, 32390643, 32394895, 32394010, 32395766, 32396990, 32393037, 32405855, 32398269, 32394347, 32393182, 32394753, 32402681, 32393197, 32394009, 32403156, 32395546, 32397682, 32393295, 32404484], "C": [32388727, 32387486, 32384440, 32389442, 32388507, 32387418, 32401672, 32393850, 32387266, 32384274, 32388492, 32390363, 32388190, 32389253, 32389396, 32389255, 32394429, 32394083, 32389206, 32390099], "A": [32386328, 32381564, 32386384, 32384312, 32382733, 32382051, 32382255, 32383872, 32381665, 32381622, 32381955, 32384463, 32382373, 32381816, 32382627, 32382865, 32384402, 32381901, 32383649, 32383009], "B": [32385101, 32382881, 32388014, 32385654, 32385899, 32384889, 32385685, 32389825, 32383451, 32387162, 32384975, 32385946, 32385230, 32383512, 32386037, 32385036, 32385861, 32384443, 32385693, 32385619]}, "name": "E. Envy", "statement": "For a connected undirected weighted graph , MST (minimum spanning tree)\r\nis a subgraph of that contains all of \u2019s vertices, is a tree, and sum of\r\nits edges is minimum possible.You are given a graph . If you run a MST\r\nalgorithm on graph it would give you only one MST and it causes other\r\nedges to become jealous. You are given some queries, each query contains\r\na set of edges of graph , and you should determine whether there is a\r\nMST containing all these edges or not.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct edge {\n    int from, to, weight, id;\n    edge() {}\n    edge(int a, int b, int c, int d) { from = a, to = b, weight = c, id = d; }\n};\n\nstruct query {\n    int id;\n    vector <int> vals;\n    query() {}\n    query(int x) { id = x; vals.clear(); }\n};\n\nint n, m, q;\nedge edges[500005];\nvector <int> bucket[500005];\nvector <int> queries[500005];\nvector <query> toAnswer[500005];\nint ans[500005];\n\ninline int get_w(int x) { return edges[x].weight; }\nbool cmp_edge(int a, int b) { return edges[a].weight < edges[b].weight; }\n\nint dad[500005];\nmap <int, int> changed;\n\nint anc(int u) {\n    if (dad[u] == u) return u;\n    if (changed.find(u) == changed.end()) changed[u] = dad[u];\n    dad[u] = anc(dad[u]);\n    return dad[u];\n}\nbool join(int u, int v) {\n    u = anc(u), v = anc(v);\n    if (u == v) return 0;\n    if (changed.find(u) == changed.end()) changed[u] = dad[u];\n    dad[u] = v;\n    return 1;\n}\n\nint main(void) {\n    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n    cin >> n >> m;\n    for (int i = 0; i < m; ++i) {\n        int u, v, w;\n        cin >> u >> v >> w;\n        edges[i] = edge(u, v, w, i);\n        bucket[w].push_back(i);\n    }\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        int sz; cin >> sz;\n        queries[i].assign(sz, 0);\n        for (int j = 0; j < sz; ++j) {\n            cin >> queries[i][j];\n            --queries[i][j];\n        }\n        sort(queries[i].begin(), queries[i].end(), cmp_edge);\n        for (int j = 0; j < sz; ++j) {\n            if (j == 0 || get_w(queries[i][j]) != get_w(queries[i][j-1])) toAnswer[get_w(queries[i][j])].push_back(query(i));\n            toAnswer[get_w(queries[i][j])].back().vals.push_back(queries[i][j]);\n        }\n        ans[i] = 1;\n    }\n\n    for (int i = 1; i <= n; ++i) dad[i] = i;\n    for (int w = 1; w <= 500000; ++w) {\n        for (auto X: toAnswer[w]) if (ans[X.id]) {\n            changed.clear();\n            for (auto e: X.vals) if (!join(edges[e].from, edges[e].to)) {\n                ans[X.id] = 0;\n                break;\n            }\n            for (auto e: changed) dad[e.first] = e.second;\n        }\n        for (auto e: bucket[w]) join(edges[e].from, edges[e].to);\n    }\n    for (int i = 0; i < q; ++i) cout << (ans[i] ? \"YES\" : \"NO\") << '\\n';\n}\n"], "input": "", "output": "", "tags": ["graphs"], "dificulty": "2300", "interactive": false}