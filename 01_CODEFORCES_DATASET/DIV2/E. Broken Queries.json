{
    "link": "https://codeforces.com//contest/2049/problem/E",
    "problemId": "3095889",
    "problem_idx": "E",
    "shortId": "2049E",
    "contest_number": "2049",
    "problem_submissions": {
        "E": [
            297497545,
            297506248,
            297513363,
            297497215,
            297513754,
            297518565,
            297506722,
            297520708,
            297488887,
            297517677,
            297529325,
            297517116,
            297526566,
            297525983,
            297522466,
            297519909,
            297520752
        ],
        "D": [
            297483631,
            297479906,
            297485869,
            297513484,
            297488988,
            297486425,
            297485532,
            297485220,
            297484984,
            297500489,
            297482945,
            297486674,
            297499534,
            297487140,
            297494415,
            297499648,
            297503839,
            297506419
        ],
        "C": [
            297476672,
            297469506,
            297476237,
            297468134,
            297474308,
            297470523,
            297476380,
            297473582,
            297506923,
            297485541,
            297473126,
            297478801,
            297475763,
            297482532,
            297481819,
            297486746,
            297475914
        ],
        "B": [
            297470859,
            297460761,
            297460293,
            297459118,
            297463641,
            297461216,
            297463086,
            297463837,
            297473641,
            297462725,
            297462885,
            297469778,
            297465587,
            297460737,
            297466206,
            297472797,
            297465768
        ],
        "A": [
            297458727,
            297456975,
            297457057,
            297457132,
            297458401,
            297457465,
            297458903,
            297458352,
            297460231,
            297458345,
            297457970,
            297457220,
            297457772,
            297457523,
            297459233,
            297459057,
            297457136
        ],
        "F": [
            299863982,
            297606792
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137273",
    "editorial": "Make 2 queries and . This tells us which half the 1 is in: it is in if\r\nthe query results are different and otherwise. Make 1 query: query if\r\nthe 1 is in it or otherwise. This tells us that if the result is and\r\notherwise. Without loss of generality, assume that the 1 is in . Now we\r\ncan binary search for in or . Let be our guess. In both cases, the\r\nbinary search takes queries. Overall, this takes at most queries. The\r\nlimit of queries (instead of ) is to allow less optimized solutions and\r\nother solutions. For example, one can instead do 3 queries in the\r\nbeginning , , to determine which quarter the 1 is in. Solution\r\n",
    "name": "E. Broken Queries",
    "statement": "There is a hidden binary array a of length n (\r\nmathbf{n} ) and a hidden integer k\r\n(2\r\nle k\r\nle n - 1). The array a contains (and all other elements are 0). For two\r\nintegers l and r (1\r\nle l\r\nle r\r\nle n), define the range sum s(l, r) = a_l + a_{l+1} +\r\ncdots + a_r.You have a magical device that takes ranges and returns\r\nrange sums, but it returns the opposite result when the range has length\r\nat least k. Formally, in one query, you can give it a pair of integers\r\n[l, r] where 1\r\nle l\r\nle r\r\nle n, and it will return either 0 or 1 according to the following rules:\r\nIf r - l + 1 < k, it will return s(l, r). If r - l + 1\r\nge k, it will return 1 - s(l, r). Find k using at most 33 queries.The\r\ndevice is adaptive. It means that the hidden a and k are fixed before\r\nthe interaction and will not change during the interaction.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#define ent '\\n'#define int long long\u00a0typedef long long ll;using namespace std;\u00a0const int mod = 998'244'353;const int maxn = 2e5 + 12;\u00a0int n, m, k;bool fg;\u00a0int ask(int l, int r) {    if(!fg) cout << \"? \" << l << ' ' << r << endl;    else cout << \"? \" << n - r + 1 << ' ' << n - l + 1 << endl;    int x;    cin >> x;    return x;}\u00a0void solve() {    cin >> n;    fg = 0;    if(ask(1, n / 4) != ask(n / 4 + 1, n / 2))  fg = 1;    if(ask(1, n / 2)) {        k = n / 2;        for(int l = 1, r = n / 2 - 1; l <= r;) {            int mid = l + r >> 1;            if(ask(1, mid)) {                k = mid;                r = mid - 1;            }            else l = mid + 1;        }    }    else {        for(int l = n / 2 + 1, r = n; l <= r;) {            int mid = l + r >> 1;            if(!ask(n - mid + 1, n)) {                k = mid;                r = mid - 1;            }            else l = mid + 1;        }    }    cout << \"! \" << k << endl;}\u00a0int32_t main(){    ios_base::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);    int t = 1;\u00a0    cin >> t;    while(t--){        solve();    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "bitmasks",
        "brute force",
        "constructive algorithms",
        "implementation",
        "interactive"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Broken Queries.json"
}