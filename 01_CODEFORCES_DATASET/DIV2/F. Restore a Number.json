{
    "link": "https://codeforces.com//contest/670/problem/F",
    "problemId": "59600",
    "problem_idx": "F",
    "shortId": "670F",
    "contest_number": "670",
    "problem_submissions": {
        "F": [
            17735920,
            17741947,
            17739838,
            17742147,
            17741489,
            17740480,
            17741509,
            17743043,
            17743802,
            17744174,
            17746158,
            17745379,
            17739547,
            17746721,
            17747076,
            17746214,
            17747355
        ],
        "E": [
            17730040,
            17731049,
            17733744,
            17731207,
            17733203,
            17735292,
            17734256,
            17735578,
            17734020,
            17735429,
            17736141,
            17737288,
            17746918,
            17736320,
            17739029,
            17736027,
            17737111
        ],
        "D2": [
            17725965,
            17728400,
            17727768,
            17728149,
            17727724,
            17733032,
            17727187,
            17728319,
            17727989,
            17724612,
            17728413,
            17731488,
            17730289,
            17730390,
            17731393,
            17765595,
            17733213
        ],
        "D1": [
            17725487,
            17728299,
            17727727,
            17728284,
            17727707,
            17732932,
            17727240,
            17728389,
            17728203,
            17724671,
            17728521,
            17731440,
            17730058,
            17729637,
            17731489,
            17727320,
            17732424
        ],
        "C": [
            17723024,
            17725897,
            17729270,
            17725892,
            17727606,
            17730842,
            17728142,
            17726419,
            17724258,
            17726720,
            17725246,
            17726826,
            17726494,
            17725465,
            17727248,
            17724877,
            17734108
        ],
        "B": [
            17721571,
            17724028,
            17723559,
            17722726,
            17722823,
            17729499,
            17722138,
            17722709,
            17722944,
            17727742,
            17722740,
            17724595,
            17723615,
            17722288,
            17723917,
            17722833,
            17723125
        ],
        "A": [
            17720663,
            17721845,
            17721356,
            17721364,
            17721787,
            17728607,
            17720913,
            17721102,
            17720788,
            17729012,
            17721057,
            17721708,
            17721392,
            17721888,
            17720937,
            17721414
        ]
    },
    "name": "F. Restore a Number",
    "statement": "Vasya decided to pass a very large integer to Kate. First, he wrote that\r\nnumber as a string, then he appended to the right integer the number of\r\ndigits in . Magically, all the numbers were shuffled in arbitrary order\r\nwhile this note was passed to Kate. The only thing that Vasya remembers,\r\nis a non-empty substring of (a substring of is a sequence of consecutive\r\ndigits of the number ).Vasya knows that there may be more than one way\r\nto restore the number . Your task is to find the smallest possible\r\ninitial integer . Note that decimal representation of number contained\r\nno leading zeroes, except the case the integer was equal to zero itself\r\n(in this case a single digit was used).\r\n",
    "solutions": [
        "#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <fstream>\n#include <cstdlib>\n#include <numeric>\n#include <iomanip>\n#include <cstdio>\n#include <cstring>\n#include <cassert>\n#include <vector>\n#include <math.h>\n#include <queue>\n#include <stack>\n#include <ctime>\n#include <set>\n#include <map>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n\ntemplate <typename T>\nT nextInt() {\n    T x = 0, p = 1;\n    char ch;\n    do { ch = getchar(); } while(ch <= ' ');\n    if (ch == '-') {\n        p = -1;\n        ch = getchar();\n    }\n    while(ch >= '0' && ch <= '9') {\n        x = x * 10 + (ch - '0');\n        ch = getchar();\n    }\n    return x * p;\n}\n\nconst int maxN = (int)1e6 + 10;\nconst int maxL = 17;\nconst int INF = (int)1e9;\nconst int mod = (int)1e9 + 7;\nconst ll LLINF = (ll)1e18;\n\nvector <int> a(10);\nvector <int> b(10);\nchar s[maxN];\nchar t[maxN];\n\nstring get(const vector<int>&cnt) {\n    string ret = \"\";\n    for (int i = 0; i < 10; ++i) {\n        ret += string(cnt[i], char('0' + i));\n    }\n    return ret;\n}\n\nint main() {\n\n  //  freopen(\"input.txt\", \"r\", stdin);\n   // freopen(\"output.txt\", \"w\", stdout);\n    gets(s);\n    gets(t);\n\n    if (strcmp(s, \"01\") == 0 || strcmp(s, \"10\") == 0) {\n        puts(\"0\");\n        return 0;\n    }\n\n    int n = strlen(s);\n    int m = strlen(t);\n\n    for (int i = 0; i < n; ++i) {\n        a[s[i] - '0']++;\n    }\n    for (int i =0 ; i < m; ++i) {\n        b[t[i] - '0']++;\n    }\n\n    string T = (const char *) t;\n\n    for (int len = 1; ; ++len) {\n        vector <int> cnt = a;\n        int tmp = len;\n        int c = 0;\n        while(tmp > 0) {\n            cnt[tmp % 10]--;\n            tmp /= 10;\n            c++;\n        }\n        bool ok = true;\n        for (int i = 0; i < 10; ++i) {\n            cnt[i] -= b[i];\n            if (cnt[i] < 0) ok = false;\n        }\n        if (ok && (t[0] != '0' || *max_element(cnt.begin() + 1, cnt.end())) > 0 && n - c == len) {\n\n        } else continue;\n        bool have = false;\n        string best = \"\";\n        {\n            string cur = T + get(cnt);\n            if (cur[0] != '0') {\n                if (!have || best > cur) {\n                    best = cur;\n                    have = true;\n                }\n            }\n        }\n        string cur = \"\";\n        for (int i = 1; i < 10; ++i) {\n            if (cnt[i] > 0) {\n                cur += char(i + '0');\n                cnt[i]--;\n                break;\n            }\n        }\n        for (int i = 0; i <= 10; ++i) {\n            string now = cur + T + get(cnt);\n\n            if (now[0] != '0') {\n                if (!have || best > now) {\n                    best = now;\n                    have = true;\n                }\n            }\n            if (i != 10) {\n                cur += string(cnt[i], char(i + '0'));\n                cnt[i] = 0;\n            }\n        }\n        assert(have);\n     //   cout << len << '\\n';\n        puts(best.c_str());\n        exit(0);\n    }\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "strings"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Restore a Number.json",
    "editorial_link": "https://codeforces.com//blog/entry/44715",
    "editorial": "At first let\u00e2\u0080\u0099s find the length of the Vasya\u00e2\u0080\u0099s number. For make this\r\nlet\u00e2\u0080\u0099s brute it. Let the current length equals to . Then if equals to the\r\ndifference between the length of the given string and the number of\r\ndigits in if means that is a length of the Vasya\u00e2\u0080\u0099s number. Then we need\r\nto remove from the given string all digits which appeared in the number\r\n, generate three strings from the remaining digits and choose smaller\r\nstring from them this string will be the answer. Let is a substring\r\nwhich Vasya remembered. Which three strings do we need to generate?\r\nLet\u00e2\u0080\u0099s write the string and after that let\u00e2\u0080\u0099s write all remaining digits\r\nfrom the given string in the ascending order. This string can be build\r\nonly if the string does not begin with the digit 0. Let\u00e2\u0080\u0099s write at first\r\nthe smallest digit from the remaining digits which does not equal to 0.\r\nIf we have no such a digit we can\u00e2\u0080\u0099t build such string. Else we need then\r\nto write all digits with smaller than the first digit in the in the\r\nascending order, then write the string and then write all remaining\r\ndigits in the ascending order. Let\u00e2\u0080\u0099s write at first the smallest digit\r\nfrom the remaining digits which does not equal to 0. If we have no such\r\na digit we can\u00e2\u0080\u0099t build such string. Else we need then to write all\r\ndigits with smaller than or equal to the first digit in the in the\r\nascending order, then write the string and then write all remaining\r\ndigits in the ascending order. Also we need to separately consider the\r\ncase when the Vasya\u00e2\u0080\u0099s number equals to zero.\r\n"
}