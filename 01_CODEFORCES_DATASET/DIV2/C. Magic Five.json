{
    "link": "https://codeforces.com//contest/327/problem/C",
    "problemId": "3285",
    "problem_idx": "C",
    "shortId": "327C",
    "contest_number": "327",
    "problem_submissions": {
        "E": [
            4017313,
            4017507,
            4018772,
            4017910,
            4019268,
            4023331,
            4015900,
            4017838,
            4016759,
            4027441,
            4022024,
            4019276
        ],
        "C": [
            4014970,
            4014797,
            4014725,
            4014945,
            4015808,
            4013334,
            4014670,
            4013527,
            4014594,
            4014368,
            4014192,
            4014033,
            4014334,
            4014505,
            4015890,
            4015156,
            4015704
        ],
        "D": [
            4014693,
            4016265,
            4015556,
            4017918,
            4018611,
            4017193,
            4015911,
            4016489,
            4016642,
            4016033,
            4016317,
            4016734,
            4016607,
            4017683,
            4017510
        ],
        "A": [
            4012718,
            4011428,
            4014213,
            4012212,
            4011845,
            4011264,
            4011546,
            4011299,
            4011577,
            4011527,
            4011323,
            4011508,
            4011858,
            4011904,
            4011582,
            4012111,
            4011772
        ],
        "B": [
            4011621,
            4012593,
            4012805,
            4012674,
            4012463,
            4011873,
            4012480,
            4011682,
            4012186,
            4012474,
            4011938,
            4011986,
            4012535,
            4012626,
            4012279,
            4012988,
            4012431
        ]
    },
    "name": "C. Magic Five",
    "statement": "There is a long plate containing digits. Iahub wants to delete some\r\ndigits (possibly none, but he is not allowed to delete all the digits)\r\nto form his \"magic number\" on the plate, a number that is divisible by .\r\nNote that, the resulting number may contain leading zeros.Now Iahub\r\nwants to count the number of ways he can obtain magic number, modulo ().\r\nTwo ways are different, if the set of deleted positions in differs.Look\r\nat the input part of the statement, is given in a special form.\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<time.h>\n#include<math.h>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=100005;\ntypedef long long ll;//int ll;\nconst ll P=1000000007;\nnamespace Matrix{\n\ttemplate<size_t Size>\n\tstruct matrix{\n\t\tll key[Size][Size];\n\t\tvoid clear(){memset(key,0,sizeof(key));}\n\t\tvoid print()const{\n\t\t\tfor (int i=0;i<Size;++i)\n\t\t\t\tfor (int j=0;j<Size;++j)\n\t\t\t\t\tprintf(\"%d%c\",(int)key[i][j],j+1==Size?'\\n':' ');\n\t\t}\n\t\tll det(){\n\t\t\tif (P==1)return 0;\n\t\t\tfor (int i=0;i<Size;++i)\n\t\t\t\tfor (int j=0;j<Size;++j)key[i][j]%=P;\n\t\t\tll ans=1;\n\t\t\tfor (int i=0;i<Size;++i){\n\t\t\t\tfor (int j=i+1;j<Size;++j)while (key[j][i]){\n\t\t\t\t\tll t=key[i][i]/key[j][i];\n\t\t\t\t\tfor (int k=i;k<Size;++k)\n\t\t\t\t\t\tkey[i][k]=(key[j][k]*-t+key[i][k])%P;\n\t\t\t\t\tfor (int k=i;k<Size;++k)\n\t\t\t\t\t\t{ll tmp=key[i][k];key[i][k]=key[j][k];key[j][k]=tmp;}\n\t\t\t\t\tans=-ans;\n\t\t\t\t}\n\t\t\t\tif (key[i][i]==0)return 0;\n\t\t\t\tans=ans*key[i][i]%P;\n\t\t\t}\n\t\t\treturn (ans+P)%P;\n\t\t}\n\t\tll* operator [](int x){return key[x];}\n\t};\n\ttemplate<size_t Size>\n\tconst matrix<Size>& operator +(const matrix<Size> &a,const matrix<Size> &b){\n\t\tstatic matrix<Size> T;T.clear();\n\t\tfor (int i=0;i<Size;++i)\n\t\t\tfor (int j=0;j<Size;++j)T.key[i][j]=(a.key[i][j]+b.key[i][j])%P;\n\t\treturn T;\n\t}\n\ttemplate<size_t Size>\n\tconst matrix<Size>& operator -(const matrix<Size> &a,const matrix<Size> &b){\n\t\tstatic matrix<Size> T;T.clear();\n\t\tfor (int i=0;i<Size;++i)\n\t\t\tfor (int j=0;j<Size;++j)T.key[i][j]=(a.key[i][j]-b.key[i][j])%P;\n\t\treturn T;\n\t}\n\ttemplate<size_t Size>\n\tconst matrix<Size>& operator *(const matrix<Size> &a,const matrix<Size> &b){  //dangerous\n\t\tstatic matrix<Size> T;T.clear();\n\t\tfor (int k=0;k<Size;++k)\n\t\t\tfor (int i=0;i<Size;++i)\n\t\t\t\tfor (int j=0;j<Size;++j)\n\t\t\t\t\tT.key[i][j]+=a.key[i][k]*b.key[k][j];\n\t\tfor (int i=0;i<Size;++i)\n\t\t\tfor (int j=0;j<Size;++j)T.key[i][j]%=P;\n\t\treturn T;\n\t}\n\ttemplate<size_t Size>\n\tmatrix<Size> pow(const matrix<Size> &x,ll y){\n\t\tstatic matrix<Size> res,tmp;tmp=x;\n\t\tmemset(res.key,0,sizeof(res.key));\n\t\tfor (int i=0;i<Size;++i)res.key[i][i]=1;\n\t\twhile (y){\n\t\t\tif (y&1)res=res*tmp;\n\t\t\ttmp=tmp*tmp;y>>=1;\n\t\t}\n\t\treturn res;\n\t}\n};\nusing Matrix::matrix;\nmatrix<2> a,b;\nchar s[N];int k;\nint main()\n{\n\t//freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"1.out\",\"w\",stdout);\n\tscanf(\"%s%d\",s,&k);int n=strlen(s),sum=0,now=1;\n\tfor (int i=0;i<n;++i){\n\t\tif (s[i]=='0'||s[i]=='5')sum=(sum+now)%P;\n\t\tnow=now*2%P;\n\t}\n\tsum=(sum%P+P)%P;\n\t//printf(\"%d\\n\",sum);\n\tb[0][0]=1;\n\ta[0][0]=now;a[0][1]=1;\n\ta[1][0]=0;a[1][1]=1;\n\tb=b*pow(a,k);\n\tb[0][1]=(b[0][1]*sum%P+P)%P;\n\tprintf(\"%d\\n\",b[0][1]);\n\t//system(\"pause\");for (;;);\n\treturn 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Magic Five.json",
    "editorial_link": "https://codeforces.com//blog/entry/8274",
    "editorial": "Property: A number is divisible by 5 if and only if its last digit is\r\neither 0 or 5. A first solution: Suppose you re given a plate S, not so\r\nbig, so we can iterate all its elements. Can we get the answer? I build\r\na new array sol[]. In explanation, both S and sol will be 1-based.\r\nDenote N = size of S. Also, denote sol[i] = the number of ways to delete\r\ndigits from plate S such as we obtain a magic number which has the last\r\ndigit on position i. The answer is sol[1] + sol[2] + + sol[N]. Let s\r\nfocus now on calculating sol[i]. If S[i] (digit of the plate\r\ncorresponding to ith position) is different than 0 or 5, then sol[i] is\r\n0 (see property ). Otherwise we have to ask ourself: in how many ways I\r\ncan delete digits in left and in right of position i. In the right , we\r\nhave only one way: delete all digits (if one digit from right still\r\nstands, then the number isn t ending at position i). Now in the left :\r\nthere are digits on positions 1, 2, , i 1. We can either delete a digit\r\nor keep it anyhow he d do we still get a magic number. So on position 1\r\nI have 2 ways (delete or keep it), on position 2 I have also 2 ways, ,\r\non position i 1 I have also 2 ways. Next, we apply what mathematics call\r\nrule of product and we get 2 * 2 * 2 * 2 (i 1 times) = 2 ^ (i 1).\r\nApplying rule of product on both left and right I get 2 ^ (i 1) * 1 = 2\r\n^ (i 1). To sum it up: If S[i] is 0 or 5 we add to the answer 2 ^ (i 1).\r\nOtherwise, we add nothing. The only problem remained for this simple\r\nversion is how we calculate A ^ B modulo one number. This is a well\r\nknown problem as well, called Exponentiation by squaring . Coming back\r\nto our problem: So what s different in our problem? It s the fact that\r\nwe can t iterate all elements of plate. However, we can use\r\nconcatenation property. We know that if an element is a position i in\r\nthe first copy, it will also be on positions i + n, i + 2 * n, i + 3 *\r\nn, , i + (k 1) * n (we don t call here about trivial case when k = 1).\r\nWhat if iterate only one copy and calculate for all K copies. If in the\r\nfirst copy, at the position i is either 0 or 5, we have to calculate the\r\nsum 2 ^ i + 2 ^ (i + n) + 2 ^ (i + 2 * n) + + 2 ^ (i + (k 1) * n). By\r\nnow on, in calculus Iâll denote i as i 1 (itâs a simple mathematical\r\nsubstitution). A first idea would be just to iterate each term and\r\ncalculate it with exponentiation by squaring. However, it takes in the\r\nworst case the same complexity as iterating all plate. We need to find\r\nsomething smarter. 2 ^ i + 2 ^ (i + n) + 2 ^ (i + 2 * n) + + 2 ^ (i +\r\n(k 1) * n) = = 2 ^ i * 1 + 2 ^ i * 2 ^ n + 2 ^ i * 2 ^ (2 * n) + + 2 ^\r\ni * 2 ^ ((k 1) * N) = = 2 ^ i * (2 ^ 0 + 2 ^ n + 2 ^ (2 * n) + + 2 ^\r\n((k 1) * n) We reduced the problem to calculate sum S = 2 ^ 0 + 2 ^ n +\r\n2 ^ (2 * n) + + 2 ^ (X * n). What s the value of 2 ^ n * S ? It is 2 ^\r\nn + 2 ^ (2 * n) + 2 ^ (3 * n) + + 2 ^ ((X + 1) * n). And what you get by\r\nmaking 2 ^ n * S S ? 2 ^ n * S S = 2 ^ ((X + 1) * n) 1 S * (2 ^ n 1) = 2\r\n^ ((X + 1) * n) 1 S = (2 ^ ((X + 1) * n) 1) / (2 ^ n 1). We can\r\ncalculate both 2 ^ i and S with exponentiation by squaring and the\r\nproblem is done. For \"/\" operator, we can use multiplicative inverse\r\n(you can read about that and about Fermat Littleâs theorem, taking care\r\nthat 10^9 + 7 is a prime number). The time complexity is O(N * logK).\r\nNote: that kind of reduction of powers is called power series in math.\r\nAlternative solution: For this alternative solution, we donât need to\r\nuse any special properties of 5. In fact, we can replace 5 by any\r\ninteger p and still have the same solution. So for now, I shall write p\r\nin place of 5. This suggests a dynamic programming solution: denote\r\ndp(x,y) be the number of ways of deleting some digits in the first x\r\ndigits to form a number that has remainder y (modulo p). For simplicity,\r\nwe accept empty plate be a number that is divisible by p. Writing the DP\r\nformula is not difficult. We start with dp(0,0) = 1, and suppose we\r\nalready have the value dp(x,y). We shall use dp(x,y) to update for\r\ndp(x + 1,*), which has two possible cases: either keeping the (x + 1)-th\r\ndigit or by deleting it. I wonât go into much detail here. The answer is\r\ntherefore dp(N,0). Clearly, applying this DP directly would time out.\r\nFor a better algorithm, we resort on the periodicity of the actual\r\nplate. The key idea is that, we imagine each digit in the plate as a\r\nlinear transformation from (x0, x1, .., x(p 1)) to (y0, y1, y(p-1)).\r\nObviously, (x0, x1, .., x(p 1)) corresponds to some dp(i, 0), dp(i, 1)\r\n.. dp(i, p 1) and (y0, y1, y(p-1)) corresponds to some (dp(i + 1, 0)),\r\ndp((i + 1), 1), ..., dp(i + 1, p 1) .So we can write X * M(d) = Y, where\r\nX and Y are vectors of length p, and M(d) is the matrix of size p * p\r\nrepresenting digit d (note that M(d) is independent from X and Y). By\r\nmultiplying all |a|.K such matrices together, we obtain a transformation\r\nfrom (1, 0, 0, .., 0) to (T0, T1, .., T(p 1)) where T0 is actually our\r\nanswer (including the empty plate). Whatâs the difference? We can group\r\nthe matrices in groups of length |a|, and lift to the exponent K. That\r\nleads to an algorithm with time complexity O(p^3(|a| + log K)), which\r\ncould be risky. To improve, we should go back to our original DP\r\nfunction and observe that it is actually a linear transformation from\r\n(1, 0, 0, .., 0) to (R0, R1, , R(p 1)), if we restrict ourselves in the\r\nfirst fragment of length |a|. So instead of multiplying |a| matrices\r\ntogether, we can run DP p times with initial conditions (0, 0, .., 0, 1,\r\n0, .., 0) to obtain the matrix transformation. The overall time\r\ncomplexity becomes O(|a| * p^2 + p^3 log K) .\r\n",
    "hint": []
}