{
    "link": "https://codeforces.com//contest/805/problem/B",
    "problemId": "105167",
    "problem_idx": "B",
    "shortId": "805B",
    "contest_number": "805",
    "problem_submissions": {
        "E": [
            26857780,
            26856750,
            26858111,
            26857063,
            26859139,
            26856888,
            26859899,
            26860928,
            26861436,
            26860967,
            26859459,
            26858902,
            26861950,
            26859019,
            26862819,
            26861493
        ],
        "D": [
            26844331,
            26843852,
            26846709,
            26847271,
            26843712,
            26849970,
            26845256,
            26850183,
            26849852,
            26846814,
            26846907,
            26847537,
            26851958,
            26850830,
            26850561,
            26852120,
            26848761,
            26850340,
            26852553,
            26854400
        ],
        "C": [
            26841586,
            26841442,
            26843378,
            26841793,
            26849729,
            26843226,
            26842851,
            26847163,
            26844593,
            26844046,
            26842105,
            26844673,
            26843379,
            26843951,
            26848871,
            26841493,
            26842855,
            26845699,
            26846895,
            26847872
        ],
        "B": [
            26839792,
            26840934,
            26840059,
            26841075,
            26840279,
            26839383,
            26840491,
            26847999,
            26841324,
            26839809,
            26839811,
            26839925,
            26840626,
            26839840,
            26840234,
            26839411,
            26840270,
            26846558,
            26843910,
            26843501
        ],
        "A": [
            26837425,
            26838400,
            26837402,
            26838568,
            26837965,
            26837187,
            26849788,
            26839799,
            26839327,
            26837458,
            26837278,
            26846404,
            26837755,
            26840946,
            26838306,
            26837294,
            26837665,
            26859742,
            26839927,
            26841184
        ],
        "F": [
            26862002,
            26862152,
            27206248,
            35743638,
            26862813,
            26870973,
            26870602
        ]
    },
    "name": "B. 3-palindrome",
    "statement": "In the beginning of the new year Keivan decided to reverse his name. He\r\ndoesn\u2019t like palindromes, so he changed Naviek to Navick.He is too\r\nselfish, so for a given he wants to obtain a string of characters, each\r\nof which is either \u201d, \u201d or \u201d, with no of length appearing in the string\r\nas a substring. For example, the strings \"\" and \"\" suit him, while the\r\nstring \"\" doesn\u2019t. He also want the number of letters \u201d in his string to\r\nbe as little as possible.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <map>\n#include <cstdlib>\n#include <cmath>\n#include <string>\n#include <algorithm>\n#include <set>\n#include <stack>\n#include <queue>\n#include <utility>\n#include <bitset>\n#define fi first\n#define se second\n#define mkp make_pair\n#define pb push_back\n#define rep(i,a,b) for (int i=(a);i<(b);i++)\n#define per(i,b,a) for (int i=(b)-1;i>=(a);i--)\n#define REP(i,a,b) for (int i=(a);i<=(b);i++)\n#define PER(i,b,a) for (int i=(b);i>=(a);i--)\nusing namespace std;\ntypedef long long LL;\n\nconst int INF = 0x3f3f3f3f;\n\nconst int MAXN = 1000005; // 1e6;\nint n;\nint main()\n{\n        cin>>n;\n        rep(i,0,n)\n        {\n                if (i%4==0) cout<<'a';\n                else if (i%4==1) cout<<'a';\n                else if (i%4==2) cout<<'b';\n                else if (i%4==3) cout<<'b';\n//                else cout<<'c';\n        }\n        cout<<endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. 3-palindrome.json",
    "editorial_link": "https://codeforces.com//blog/entry/51846",
    "editorial": "The answer is constructive as follows: It is obvious there is no\r\n-palindrome as substring and the number of characters is minimum\r\npossible equal to zero.\r\n"
}