{
    "link": "https://codeforces.com//contest/1391/problem/C",
    "problemId": "694517",
    "problem_idx": "C",
    "shortId": "1391C",
    "contest_number": "1391",
    "problem_submissions": {
        "E": [
            89439040,
            89441228,
            89441499,
            89447005,
            89455919,
            89448964,
            89450402,
            89450314,
            89451586,
            89450891,
            89451401,
            89477045,
            89456884,
            89551553,
            89455517,
            134448846
        ],
        "D": [
            89432700,
            89481054,
            89433875,
            89429170,
            89437115,
            89436985,
            89437929,
            89442877,
            89440195,
            89442618,
            89441518,
            89427031,
            89429794,
            89432423,
            89430800,
            89431789,
            89433956,
            89433503,
            89434575,
            89434257,
            89434975
        ],
        "C": [
            89426750,
            89420513,
            89434144,
            89429566,
            89425760,
            89427285,
            89429714,
            89432343,
            89427996,
            89426533,
            89417430,
            89420352,
            89419759,
            89418803,
            89424047,
            89424699,
            89425111,
            89422696,
            89425810,
            89422948
        ],
        "B": [
            89410454,
            89413605,
            89410503,
            89414269,
            89414715,
            89415761,
            89415369,
            89418138,
            89419682,
            89414189,
            89411200,
            89409436,
            89412062,
            89413310,
            89415929,
            89412884,
            89413208,
            89414045,
            89413779,
            89419197
        ],
        "A": [
            89406971,
            89407448,
            89407070,
            89407023,
            89410266,
            89408876,
            89408557,
            89413085,
            89412622,
            89407815,
            89407257,
            89406922,
            89406883,
            89407981,
            89408687,
            89407102,
            89407091,
            89409131,
            89415228,
            89408988
        ]
    },
    "name": "C. Cyclic Permutations ",
    "statement": "A permutation of length n is an array consisting of n distinct integers\r\nfrom 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray) and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray).Consider a permutation p of length n, we build a graph of size n\r\nusing it as follows: For every 1\r\nleq i\r\nleq n, find the j such that 1\r\nleq j < i and p_j > p_i, and add an undirected edge between node i and\r\nnode j For every 1\r\nleq i\r\nleq n, find the j such that i < j\r\nleq n and p_j > p_i, and add an undirected edge between node i and node\r\nj In cases where no such j exists, we make no edges. Also, note that we\r\nmake edges between the corresponding indices, not the values at those\r\nindices.For clarity, consider as an example n = 4, and p = [3,1,4,2];\r\nhere, the edges of the graph are (1,3),(2,1),(2,3),(4,3).A permutation p\r\nis if the graph built using p has at least one simple cycle. Given n,\r\nfind the number of cyclic permutations of length n. Since the number may\r\nbe very large, output it modulo 10^9+7.Please refer to the Notes section\r\nfor the formal definition of a simple cycle\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst long long k_Mod = 1e9 + 7;\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    int n;\n    cin >> n;\n\n    long long f = 1, t = 1;\n    for(long long i = 1; i <= n; ++i){\n        f *= i;\n        f %= k_Mod;\n\n        if(i == n) continue;\n        t <<= 1;\n        t %= k_Mod;\n    }\n\n    f -= t;\n    if(f < 0) f += k_Mod;\n\n    cout << f << \"\\n\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "graphs",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Cyclic Permutations .json",
    "editorial_link": "https://codeforces.com//blog/entry/81265",
    "editorial": "The answer is .Consider an arbitrary cyclic permutation for example,\r\n[4,2,3,1,5,6]; it contains many cycles of length : , , . Note that all\r\nthe listed cycles contain nodes obtained from just one choice of . We\r\ncan generalize this to the following. If for any , we make edges on both\r\nsides of it, this will create a simple cycle of length . The proof is\r\nsimple and is an exercise for you. Thus, there has to at most one peak\r\nthat is the element all acyclic permutations increase, then reach , and,\r\nfinally, decrease. These are formally called unimodal permutations, and\r\nit\u00e2\u0080\u0099s easy to see that any unimodal permutation forms a tree, and, thus,\r\ncontains no simple cycle each element, except , has a uniquely defined\r\nparent.We can construct any unimodal permutation by adding the numbers\r\ninto a deque in the same order. For example, can be constructed by first\r\npushing , , to the front, and, finally, at the back. Thus, for every\r\nelement, except , we have the choice of pushing it to the front or the\r\nback, making the total number of ways equal to . Time Complexity:\r\n"
}