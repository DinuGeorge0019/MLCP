{
    "link": "https://codeforces.com//contest/488/problem/E",
    "problemId": "17757",
    "problem_idx": "E",
    "shortId": "488E",
    "contest_number": "488",
    "problem_submissions": {
        "C": [
            8789721,
            8784968,
            8786503,
            8785444,
            8787030,
            8788326,
            8788622,
            8789526,
            8783088,
            8788042,
            8841638,
            8787428,
            8789969,
            8785172,
            8783549,
            8795032,
            8792817,
            8792769,
            8792766,
            8790912,
            8784523
        ],
        "D": [
            8787031,
            8860157,
            8845738,
            8846448
        ],
        "B": [
            8783651,
            8783456,
            8782128,
            8783172,
            8783387,
            8783484,
            8784283,
            8784001,
            8789951,
            8782906,
            8841826,
            8810063,
            8784023,
            8785144,
            8782367,
            8790893,
            8785527
        ],
        "A": [
            8777414,
            8777482,
            8778085,
            8777878,
            8777654,
            8777074,
            8779752,
            8777889,
            8778928,
            8778120,
            8841586,
            8778590,
            8782174,
            8791718,
            8778710,
            8778067,
            8777724
        ],
        "E": [
            8862060,
            8861159
        ]
    },
    "name": "E. Prefix Product Sequence",
    "statement": "Consider a sequence . Define its prefix product sequence .Now given ,\r\nfind a permutation of , such that its prefix product sequence is a\r\npermutation of .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define LL long long\nint pow_mod(int x, int n, int mod){\n    if(n==0) return 1;\n    int ret=pow_mod((LL)x*x%mod,n/2,mod);\n    if(n&1) ret=(LL)ret*x%mod;\n    return ret;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    if(n==1){\n        printf(\"YES\\n1\\n\");\n    }else if(n==4){\n        printf(\"YES\\n\");\n        printf(\"1\\n3\\n2\\n4\\n\");\n    }else{\n        for(int i=2; i<=n/2; ++i){\n            if(n%i==0){\n                printf(\"NO\\n\");\n                return 0;\n            }\n        }\n        printf(\"YES\\n\");\n        puts(\"1\");\n        for(int i=2; i<n; ++i){\n            printf(\"%d\\n\",(LL)i*pow_mod(i-1,n-2,n)%n);\n        }\n        printf(\"%d\\n\",n);\n    }\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Prefix Product Sequence.json",
    "editorial_link": "https://codeforces.com/blog/entry/14832",
    "editorial": "he answer is YES if and only if n is a prime or n?=?1 or n?=?4.\n\nFirst we can find . If n occurs in {a_1,Â…,a_{n-1}} in the prefix product sequence 0 will occur twice which do not satisfy the condition.\n\nSo an must be 0 from which we know a1a2... an?-?1?=?(n?-?1)!. But for any composite number n?>?4 we have (See the proof below). So we can know that for all composite number n?>?4 the answer is NO.\n\nFor n?=?1, 1 is a solution.\n\nFor n?=?4, 1,?3,?2,?4 is a solution.\n\nFor any prime number n, let ai be . If there are two same number ai, aj. Then we get i?/?(i?-?1)???j?/?(j?-?1) which leads to i???j, which is a contradiction. So all n numbers will occur exactly once. And this is a solution.\n\nAlso, we can find a primitive root g of n and $g^{0}, g^{1}, g^{n-3}, g^{3}, g^{n-5}, \\cdots } is also a solution.\n\nProof:\n\nFor a composite number n?>?4 it can either be written as the products of two numbers p,?q?>?1.\n\nIf p???q, then we immediately get pq|(n?-?1)!.\n\nIf p?=?q, note that n?>?4 so 2p?<?n, we have p2|(n?-?1)!\n\nSo n|(n?-?1)! always holds which means ",
    "hint": []
}