{
    "link": "https://codeforces.com//contest/991/problem/D",
    "problemId": "192853",
    "problem_idx": "D",
    "shortId": "991D",
    "contest_number": "991",
    "problem_submissions": {
        "F": [
            39576800,
            39587349,
            39587290,
            39590781
        ],
        "E": [
            39560920,
            39563177,
            39554918,
            39559780,
            39559264,
            39559562,
            39558267,
            39561151,
            39561555,
            39562575,
            39562535,
            39558347,
            39564264,
            39564956,
            39563328,
            39561476,
            39562779,
            39563469,
            39566393
        ],
        "D": [
            39555573,
            39558828,
            39558568,
            39556690,
            39555594,
            39556894,
            39555092,
            39556834,
            39556593,
            39555383,
            39556152,
            39555415,
            39558075,
            39558604,
            39558390,
            39558262,
            39556471,
            39559559,
            39557003
        ],
        "C": [
            39552143,
            39554582,
            39560997,
            39551727,
            39552807,
            39552053,
            39550273,
            39551314,
            39545924,
            39552118,
            39549887,
            39551605,
            110388396,
            39551266,
            39552996,
            39551353,
            39554425,
            39551429,
            39552969,
            39552631
        ],
        "B": [
            39547610,
            39548679,
            39554562,
            39547503,
            39548120,
            39548048,
            39546472,
            39547257,
            39549325,
            39548599,
            39547328,
            39547986,
            39548474,
            39549006,
            39549960,
            39550453,
            39548096,
            39548463,
            39547961
        ],
        "A": [
            39545591,
            39545651,
            39551664,
            39545432,
            39545677,
            39545592,
            39545183,
            39545239,
            39545475,
            39545255,
            39547682,
            39545791,
            39545926,
            39552806,
            39547513,
            39545857,
            39549213,
            39545940
        ]
    },
    "name": "D. Bishwock",
    "statement": "Bishwock is a chess figure that consists of three squares resembling an\r\n\"L-bar\". This figure can be rotated by 90, 180 and 270 degrees so it can\r\nhave four possible states: XX XX .X X.X. .X XX XX Bishwocks don\u2019t attack\r\nany squares and can even occupy on the adjacent squares as long as they\r\ndon\u2019t occupy the same square. Vasya has a board with 2\r\ntimes n squares onto which he wants to put some bishwocks. To his\r\ndismay, several squares on this board are already occupied by pawns and\r\nVasya can\u2019t put bishwocks there. However, pawns also don\u2019t attack\r\nbishwocks and they can occupy adjacent squares peacefully.Knowing the\r\npositions of pawns on the board, help Vasya to determine the maximum\r\namount of bishwocks he can put onto the board so that they wouldn\u2019t\r\noccupy the same squares and wouldn\u2019t occupy squares with pawns.\r\n",
    "solutions": [
        "// who's it from?\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define f first\n#define s second\n#define SZ(x) (int)(x).size()\n#define ALL(x) (x).begin(), (x).end()\n\nbool match(char a, char b, char c, char d) {\n\tint cnt = 0;\n\tif (a == '0') cnt++;\n\tif (b == '0') cnt++;\n\tif (c == '0') cnt++;\n\tif (d == '0') cnt++;\n\treturn cnt >= 3;\n}\n\nbool doublematch(char a, char b, char c, char d, char e, char f) {\n\treturn a == '0' && b == '0' && c == '0' && d == '0' && e == '0' && f == '0';\n}\n\nstring s[2];\nint dp[101];\n\nint32_t main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcin >> s[0] >> s[1];\n\tint n = SZ(s[0]);\n\tfor (int i = 1; i < n; i++) {\n\t\tif (match(s[0][i - 1], s[0][i], s[1][i - 1], s[1][i])) {\n\t\t\tdp[i] = max(dp[i], ((i > 1) ? dp[i - 2] : 0) + 1);\n\t\t}\n\t\tif (i > 1 && doublematch(s[0][i - 2], s[0][i - 1], s[0][i], s[1][i - 2], s[1][i - 1], s[1][i])) {\n\t\t\tdp[i] = max(dp[i], dp[i - 3] + 2);\n\t\t}\n\t\tdp[i] = max(dp[i], dp[i - 1]);\n\t}\n\tcout << dp[n - 1] << endl;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Bishwock.json",
    "editorial_link": "https://codeforces.com/blog/entry/60181",
    "editorial": "EditorialIn this problem we may use the greedy approach. Let\u00e2\u0080\u0099s go\r\nthrough columns from left to right. If we are currently considering\r\ncolumn and we may place a figure occupying only cells at columns and ,\r\nwe have to place this figure. Really if the optimal solution doesn\u00e2\u0080\u0099t\r\ncontain a bishwock at column then column may be occupied by at most one\r\nbishwock. So we can remove this figure and place it at columns and , the\r\nresult will be at least the same. A bit harder question is how exactly\r\nwe should place the figure if all 4 cells of columns and are empty (in\r\nother cases there will be only one way to place a bishwock)? Of course,\r\nwe should occupy both cells of column . Moreover it does not matter\r\nwhich cell we will occupy at column in this case. The cells of may be\r\nused only for placing a bishwock in columns ,. If column has at most one\r\nempty cell we are unable to place such figure and the remaining empty\r\ncells of column are useless at all. If both cells of column are empty we\r\nmay place a bishwock regardless of the position of the remaining empty\r\ncell at column .It means that we don\u00e2\u0080\u0099t have to place the figures\r\nactually we have to calculate and update number of empty cells in\r\ncolumns. According to the described algorithm we may write such code:\r\nMoreover this implementation can be simplified to just two cases:\r\nFormally such algorithm may be considered as the dynamic programming. Of\r\ncourse it is not necessary to have a deep understanding of DP to write\r\nsuch implementation and solve the problem.This problem also can be\r\nsolved by more \u00e2\u0080\u009dobvious\u00e2\u0080\u009d DP approach (for example we may consider index\r\nof current column and state of the cells of the previous column as a\r\nstate of DP). In this case the implementation will be a bit more\r\ncomplicated but it won\u00e2\u0080\u0099t be necessary to prove described solution.\r\n"
}