{
    "link": "https://codeforces.com//contest/1694/problem/A",
    "problemId": "1430894",
    "problem_idx": "A",
    "shortId": "1694A",
    "contest_number": "1694",
    "problem_submissions": {
        "E": [
            160856186,
            160866174,
            160873008,
            160869335,
            160868951,
            160877330,
            160898676,
            160877174,
            160875442,
            160876502,
            160879470,
            160875237,
            160876355,
            160882396,
            160879879,
            160879629,
            160876481,
            160881373,
            160884964,
            160881275
        ],
        "D": [
            160848272,
            160842517,
            160849905,
            160853063,
            160857057,
            160853921,
            160854624,
            160847127,
            160845187,
            160855341,
            160850688,
            160860686,
            160857001,
            160853657,
            160862452,
            160862852,
            160864038,
            160855376,
            160858063
        ],
        "C": [
            160836570,
            160829494,
            160839678,
            160844593,
            160847177,
            160836731,
            160843728,
            160843693,
            160838092,
            160845965,
            160845179,
            160854286,
            160843446,
            160844276,
            160856430,
            160857207,
            160844960,
            160846963,
            160849978
        ],
        "B": [
            160832238,
            160835941,
            160831844,
            160834416,
            160835663,
            160829339,
            160834030,
            160840102,
            160851072,
            160836730,
            160864814,
            160845534,
            160830377,
            160835010,
            160833897,
            160845509,
            160927414,
            160837907,
            160860824,
            160841779
        ],
        "A": [
            160832046,
            160833611,
            160826245,
            160824355,
            160825264,
            160825514,
            160825648,
            160826360,
            160852110,
            160825530,
            160855429,
            160829525,
            160824626,
            160825478,
            160825695,
            160824627,
            160922182,
            160921765,
            160830254,
            160825318,
            160825557
        ],
        "F": [
            160914915
        ]
    },
    "name": "A. Creep",
    "statement": "Define the score of some binary string T as the absolute difference\r\nbetween the number of zeroes and ones in it. (for example, T= contains 4\r\nzeroes and 2 ones, so the score of T is |4-2| = 2).Define the creepiness\r\nof some binary string S as the maximum score among all of its prefixes\r\n(for example, the creepiness of S= is equal to 2 because the score of\r\nthe prefix S[1\r\nldots 4] is 2 and the rest of the prefixes have a score of 2 or\r\nless).Given two integers a and b, construct a binary string consisting\r\nof a zeroes and b ones with the minimum possible creepiness.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <typename Fun>\nstruct y_combinator {\n    const Fun fun;\n\n    explicit y_combinator(const Fun&& fun) : fun(std::forward<const Fun>(fun)) {}\n\n    template <typename... Args>\n    auto operator()(Args&&... args) const {\n        return fun(std::ref(*this), std::forward<Args>(args)...);\n    }\n};\n\nvoid solve() {\n    int a, b;\n    cin >> a >> b;\n    while (a && b) {\n        cout << 10;\n        a--, b--;\n    }\n    while (a) {\n        cout << 0;\n        a--;\n    }\n    while (b) {\n        cout << 1;\n        b--;\n    }\n    cout << '\\n';\n}\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    int t = 1;\n    cin >> t;\n    while (t--) {\n        solve();\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Creep.json",
    "editorial_link": "https://codeforces.com//blog/entry/103952",
    "editorial": "Define the minimum possible creepiness of the string as . We want to\r\nshow that is equal to . Creepiness of is equal to and creepiness of is\r\nequal to so . The way to make a string with creepiness equal to :while\r\nholds, add to the end of the string. After that, add the remaining\r\ncharacter to the end of the string. Now we know . So .complexity:\r\n"
}