{
    "link": "https://codeforces.com//contest/731/problem/E",
    "problemId": "75976",
    "problem_idx": "E",
    "shortId": "731E",
    "contest_number": "731",
    "problem_submissions": {
        "D": [
            21507606,
            21485910,
            21487254,
            21484498,
            21488003,
            21486730,
            21490784,
            21494206,
            21481068,
            21511124,
            21485685,
            21489121,
            21487100,
            21568091,
            21513297,
            21513265,
            21483698
        ],
        "E": [
            21487370,
            21488491,
            21489109,
            21490173,
            21490282,
            21488124,
            21478759,
            21486709,
            21482192,
            21497395,
            21489450,
            21493635,
            21484776,
            21490615,
            21489533,
            21487823,
            21492190,
            21499034,
            21490743
        ],
        "F": [
            21481835,
            21483503,
            21486528,
            21484079,
            21487817,
            21483187,
            21479838,
            21481840,
            21482733,
            21486882,
            21483028,
            21483988,
            21482409,
            21480968,
            21488944,
            21485189,
            21488476,
            21484669,
            21488070,
            21486545
        ],
        "C": [
            21479362,
            21481971,
            21480987,
            21481503,
            21479989,
            21477543,
            21482718,
            21479909,
            21477810,
            21485166,
            21479533,
            21479880,
            21478958,
            21488181,
            21481556,
            21481473,
            21477970,
            21479493,
            21480708,
            21481119
        ],
        "B": [
            21476870,
            21479930,
            21477574,
            21478962,
            21478647,
            21492414,
            21481417,
            21477633,
            21476489,
            21481747,
            21477815,
            21481505,
            21485057,
            21489403,
            67074526,
            21478744,
            21480726,
            21477230,
            21478732,
            21478885
        ],
        "A": [
            21476108,
            21478310,
            21476242,
            21476318,
            21476790,
            21479331,
            21480393,
            21476522,
            21475966,
            21478021,
            21476661,
            21476151,
            21475986,
            21490293,
            21476656,
            21477731,
            21478515,
            21476049,
            21476561,
            21476353
        ]
    },
    "name": "E. Funny Game",
    "statement": "Once upon a time Petya and Gena gathered after another programming\r\ncompetition and decided to play some game. As they consider most modern\r\ngames to be boring, they always try to invent their own games. They have\r\nonly stickers and markers, but that won’t stop them.The game they came\r\nup with has the following rules. Initially, there are stickers on the\r\nwall arranged in a row. Each sticker has some number written on it. Now\r\nthey alternate turn, Petya moves first.One move happens as follows. Lets\r\nsay there are stickers on the wall. The player, who makes the current\r\nmove, picks some integer from to and takes leftmost stickers (removes\r\nthem from the wall). After that he makes the new sticker, puts it to the\r\nleft end of the row, and writes on it the new integer, equal to the sum\r\nof all stickers he took on this move. Game ends when there is only one\r\nsticker left on the wall. The score of the player is equal to the sum of\r\nintegers written on all stickers he took during all his moves. The goal\r\nof each player is to maximize the difference between his score and the\r\nscore of his opponent.Given the integer and the initial sequence of\r\nstickers on the wall, define the result of the game, i.e. the difference\r\nbetween the Petya’s and Gena’s score if both players play optimally.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\nconst double pi=acos(-1.0);\nconst double eps=1e-9;\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define re return\n#define vi vector <int> \n#define pii pair <int,int>\n#define pll pair <long long , long long>\ntypedef long long ll;\n\nconst int N=(int)2e5+5;\nint n,a[N],m,s[N],ans[N];\n\n\nint main()\n{\n\tios:: sync_with_stdio(false);\n\tcin >> n;\n\tfor(int i=0;i<n;i++)\n\t\tcin >> a[i];\n\ts[0]=a[0];\n\tfor(int i=1;i<n;i++)\n\t\ts[i]=s[i-1]+a[i];\n\tans[n-2]=s[n-1];\n\tm=s[n-2]-ans[n-2];\n\tfor(int i=n-3;i>=0;i--)\n\t{\n\t\tif(i==0)ans[i]=max(m,s[n-1]); else ans[i]=max(m,s[n-1]-s[i-1]);\n\t\tm=max(m,s[i]-ans[i]);\n\t}\n\tcout << ans[0];\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "games"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Funny Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/47840",
    "editorial": "First of all, comment on\nsuch type of games. In CS the game where two players are willing to\nmaximize the difference between their own score and the score of their\nopponent is called a \"zero-sum game\". A useful knowledge is that\nproblems for such a kind of games are usually solved using dynamic\nprogramming. Note that at any moment the first sticker contains the sum\nof numbers on some prefix of an original sequence. This means that the\nstate of a game is defined by a single number : the length of an\noriginal sequence prefix that were summed into a single number. Letâs\nmake two observations. First of all, for any state the turn that current\nplayer will perform doesnât depend on scores of both players. Indeed, at\nany moment we may forget about the scores of both players since they add\nthe constant factor to the resulting score difference, so we may\nvirtually discard both players current scores. So, all we need to know\nabout state is what difference there will be between the current player\nscore and his opponent score if the game would have started from the\nstate with zero scores. Second observation is that the turn chosen by a\nplayer from the state and the final difference of scores at the end does\nnot depend from which player is currently making a turn (Petr or\nGennady), i. e. the game is symmetric. Denote as the difference between\nthe first player score and the second player score if the game would\nhave started from the state with zero scores. It is a convenient way to\nthink about this game as if there were no separate scores of two\nplayers, but only a single balance value (difference) between them, and\nthe first player is adding some numbers to the balance at his turn nd\nsecond player subtracts some numbers from the balance. In such\nformulation is a balance change at the end of the game if the current\nplayer is willing to maximize it and he is currently in the state . The\nanswer for a problem will be, as one can see, . Note that if the current\nplayer would be willing to minimize balance, then the final balance\nchange from the state would be because the game is symmetric. Letâs\ncalculate all using dynamic programming. At the end of the game, i. e.\nin the state the value is equal to zero because the players wonât be\nmaking any turns, and so the balance wonât change. Consider some state .\nSuppose current player will take all the stickers up to the -th (here\n-th means the index in the original sequence). In such case he will\nchange balance by (where is the sum of first numbers in an original\nsequence), and game will move to the state . After that his opponent\nwill change the balance by (note that the balance change value is added\nwith an opposite sign since the opponent will be playing from this\nstate). So, the final balance change when making such a turn will be .\nIn the DP definition we play for a player that is willing to maximize\nthe balance, so . Such a formula produces a solution in , but one may\nfind that that itâs enough to keep the maximum value of on suffix ,\nrecalculating it in when moving from to . So, we have the solution that\nworks in . Question: Which data type should be used for (and for the\nanswer, in particular)?\n",
    "hint": []
}