{
    "link": "https://codeforces.com//contest/106/problem/D",
    "problemId": "560",
    "problem_idx": "D",
    "shortId": "106D",
    "contest_number": "106",
    "problem_submissions": {
        "E": [
            624494,
            621382,
            621302,
            1028967
        ],
        "B": [
            2851079,
            616301,
            616392,
            616823,
            616526,
            615744,
            616740,
            616327,
            616298,
            616165,
            616707,
            616308,
            616319,
            616401,
            616575
        ],
        "D": [
            618542,
            618462,
            619420,
            618678,
            618906,
            618952,
            618136,
            618460,
            618603,
            618015,
            618966,
            618832,
            619376,
            618535
        ],
        "C": [
            617158,
            617296,
            617911,
            617244,
            617544,
            617983,
            617181,
            617500,
            617204,
            619254,
            617295,
            617239,
            617595,
            617116
        ],
        "A": [
            615823,
            615814,
            616171,
            615840,
            616585,
            616009,
            615802,
            615745,
            615738,
            615793,
            615640,
            615790,
            615820,
            618361
        ]
    },
    "name": "D. Treasure Island",
    "statement": "Our brave travelers reached an island where pirates had buried treasure.\r\nHowever as the ship was about to moor, the captain found out that some\r\nrat ate a piece of the treasure map.The treasure map can be represented\r\nas a rectangle in size. Each cell stands for an islands\u2019 square (the\r\nsquare\u2019s side length equals to a mile). Some cells stand for the sea and\r\nthey are impenetrable. All other cells are penetrable (i.e. available)\r\nand some of them contain local sights. For example, the large tree on\r\nthe hills or the cave in the rocks.Besides, the map also has a set of\r\ninstructions. Each instruction is in the following form:\"Walk miles in\r\nthe direction\"The possible directions are: north, south, east, and west.\r\nIf you follow these instructions carefully (you should fulfill all of\r\nthem, one by one) then you should reach exactly the place where\r\ntreasures are buried. Unfortunately the captain doesn\u2019t know the place\r\nwhere to start fulfilling the instructions as that very piece of the map\r\nwas lost. But the captain very well remembers that the place contained\r\nsome local sight. Besides, the captain knows that the whole way goes\r\nthrough the island\u2019s penetrable squares.The captain wants to know which\r\nsights are worth checking. He asks you to help him with that.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string.h>\n#include <assert.h>\n#include <string>\n\nusing namespace std;\n\nconst int MAX=1005;\nint N,M,K;\nint board[MAX][MAX];\nint mfor[MAX][MAX][4];\n\nint mx[4]={-1,0,1,0}, my[4]={0,1,0,-1};\n\nint key(char c){\n    if(c=='#') return -1;\n    if(c=='.') return 0;\n    return (c-'A'+1);\n}\n\nint dir(char c){\n    if(c=='N') return 0;\n    if(c=='E') return 1;\n    if(c=='S') return 2;\n    if(c=='W') return 3;\n    assert(false);\n    return -1;\n}\n\nvoid calcmfor(){\n    //checking north;\n    for(int i=0; i<N; i++){\n\tfor(int j=0; j<M; j++){\n\t    if(board[i][j]==-1){\n\t\tmfor[i][j][0]=-1;\n\t    }else{\n\t\tif(i==0){\n\t\t    mfor[i][j][0]=0;\n\t\t}else{\n\t\t    mfor[i][j][0]=1+mfor[i+mx[0]][j+my[0]][0];\n\t\t}\n\t    }\n\t}\n    }\n    for(int i=0; i<N; i++){\n\tfor(int j=M-1; j>=0; j--){\n\t    if(board[i][j]==-1){\n\t\tmfor[i][j][1]=-1;\n\t    }else{\n\t\tif(j==M-1){\n\t\t    mfor[i][j][1]=0;\n\t\t}else{\n\t\t    mfor[i][j][1]=1+mfor[i+mx[1]][j+my[1]][1];\n\t\t}\n\t    }\n\t}\n    }\n    for(int i=N-1; i>=0; i--){\n\tfor(int j=0; j<M; j++){\n\t    if(board[i][j]==-1){\n\t\tmfor[i][j][2]=-1;\n\t    }else{\n\t\tif(i==N-1){\n\t\t    mfor[i][j][2]=0;\n\t\t}else{\n\t\t    mfor[i][j][2]=1+mfor[i+mx[2]][j+my[2]][2];\n\t\t}\n\t    }\n\t}\n    }\n    for(int i=0; i<N; i++){\n\tfor(int j=0; j<M; j++){\n\t    if(board[i][j]==-1){\n\t\tmfor[i][j][3]=-1;\n\t    }else{\n\t\tif(j==0){\n\t\t    mfor[i][j][3]=0;\n\t\t}else{\n\t\t    mfor[i][j][3]=1+mfor[i+mx[3]][j+my[3]][3];\n\t\t}\n\t    }\n\t}\n    }\n\n}\n\nvoid disp_board(){\n    for(int i=0; i<N; i++){\n\tfor(int j=0; j<M; j++){\n\t    cout << board[i][j] << \"\\t\";\n\t}\n\tcout << endl;\n    }\n    cout << endl;\n}\n\nvoid disp_mfor(int a){\n    for(int i=0; i<N; i++){\n\tfor(int j=0; j<M; j++){\n\t    cout <<mfor[i][j][a] << \"\\t\";\n\t}\t\n\tcout << endl;\n    }\n    cout << endl;\n}\n\nvector<int> ans;\nvector<pair<int,int> > instr;\n\nbool test(int x, int y){\n    int cx=x, cy=y;\n    for(int i=0; i<K; i++){\n\tint cdir=instr[i].first, ccnt=instr[i].second;\n\tif(ccnt>mfor[cx][cy][cdir]){\n\t    return false;\n\t}\n\tcx+=mx[cdir]*ccnt;\n\tcy+=my[cdir]*ccnt;\n    }\n    return true;\n}\n\nint main(){\n    cin >> N >> M;\n    //vector<pair<int,int> > check;\n    for(int i=0; i<N; i++){\n\tstring s;\n\tcin >> s; assert(s.length()==M);\n\tfor(int j=0; j<M; j++){\n\t    board[i][j]=key(s[j]);\n\t}\n    }\n    cin >> K;\n    for(int i=0; i<K; i++){\n\tstring a; int b; cin >> a >> b;\n\tinstr.push_back(pair<int,int> (dir(a[0]), b) );\n    }\n    calcmfor();\n    for(int i=0; i<N; i++){\n\tfor(int j=0; j<M; j++){\n\t    if(board[i][j]>0){\n\t\tif(test(i,j)){\n\t\t    ans.push_back(board[i][j]);\n\t\t}\n\t    }\n\t}\n    }\n    if(ans.size()>0){\n\tsort(ans.begin(), ans.end());\n\tfor(int i=0; i<ans.size(); i++){\n\t    cout << (char)(ans[i]+'A'-1);\n\t}\n\tcout << endl;\n    }else{\n\tcout << \"no solution\\n\";\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Treasure Island.json",
    "editorial_link": "https://codeforces.com//blog/entry/2493",
    "editorial": "Solution is simulation of all insrtuctions from all of local sights. But naive solution doesn't fit into time limit. You should speed up this solution and do every instruction in O(1).\n\nYou can use one of following things.\n\n1. For every position and every direction you can precalculate nearest position of sea. Now before than you do an instruction you should check that nearest position of sea further than position whereto you move after doing the instruction.\n\n2. Let sea cells have 1 and all other ones have 0. For every cell (i,j) you can calculate sum of all cells in the rectangle with angles in (1,1) and (i,j). It can be done by the operations like:\nsum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + smth\nwhere smth is 0 or 1 according to type of according cell (i,j). Now you can determine sum of numbers for all rectangles of the map. Before you do instruction you should chech that sum of rectangle on which you will go has sum 0.\n\nSolution has complexity O(nm + kz), where z is number of local sights (this number no more than 26)."
}