{"link": "https://codeforces.com//contest/1623/problem/E", "problemId": "1243269", "problem_idx": "E", "shortId": "1623E", "contest_number": "1623", "problem_submissions": {"E": [140927316, 140928588, 140930913, 140931529, 140930666, 140933308, 140932491, 140927816, 140937929, 140940400, 140934079, 140940202, 140928211, 140936652, 140911137, 140938749, 140941503, 140941228, 140938408, 140940310], "D": [140917013, 140919394, 140925084, 140922860, 140922841, 140918471, 140924963, 140923599, 140924181, 140925202, 140925220, 140928107, 140933937, 140922988, 140926612, 140931586, 140929916, 140930490, 140925401, 140923945], "A": [140906789, 140901830, 140902316, 140901965, 140901890, 140902105, 140901764, 140909860, 140901988, 140902630, 140901845, 140901878, 140902576, 140902335, 140902196, 140902015, 140902189, 140902188, 140903240], "C": [140904718, 140907986, 140909100, 140911556, 140909513, 140908941, 140916100, 140929063, 140914447, 140912787, 140914401, 140913485, 140929704, 140924697, 140932081, 140917741, 140907191, 140910390, 140913379, 140914345], "B": [140902082, 140904432, 140906305, 140905274, 140903910, 140903807, 140906896, 140906851, 140906344, 140908551, 140906181, 140906829, 140906183, 140905516, 140935513, 140912560, 140903639, 140905940, 140907051, 140906596]}, "name": "E. Middle Duplication", "statement": "A binary tree of n nodes is given. Nodes of the tree are numbered from 1\r\nto n and the root is the node 1. Each node can have no child, only one\r\nleft child, only one right child, or both children. For convenience,\r\nlet\u2019s denote l_u and r_u as the left and the right child of the node u\r\nrespectively, l_u = 0 if u does not have the left child, and r_u = 0 if\r\nthe node u does not have the right child.Each node has a string label,\r\ninitially is a single character c_u. Let\u2019s define the string\r\nrepresentation of the binary tree as the concatenation of the labels of\r\nthe nodes in the . Formally, let f(u) be the string representation of\r\nthe tree rooted at the node u. f(u) is defined as follows: f(u) =\r\nbegin{cases}\r\ntexttt{}, &\r\ntext{if }u = 0;\r\nf(l_u) + c_u + f(r_u) &\r\ntext{otherwise},\r\nend{cases} where + denotes the string concatenation operation.This way,\r\nthe string representation of the tree is f(1).For each node, we can its\r\nlabel , that is, assign c_u with c_u + c_u, but only if u is the root of\r\nthe tree, or if its parent also has its label duplicated.You are given\r\nthe tree and an integer k. What is the lexicographically smallest string\r\nrepresentation of the tree, if we can duplicate labels of at most k\r\nnodes?A string a is lexicographically smaller than a string b if and\r\nonly if one of the following holds: a is a prefix of b, but a\r\nne b; in the first position where a and b differ, the string a has a\r\nletter that appears earlier in the alphabet than the corresponding\r\nletter in b.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\nchar c[200005], t[200005];\nint lc[200005], rc[200005], fa[200005], pos[200005], good[200005], f[200005], siz[200005], tr[200005], id[200005], dep[200005], tops[200005];\nint n, k, len, dfn;\n\nint find(int x) { return f[x] == x ? x : f[x] = find(f[x]); }\n\nstruct fenwick {\n\tint f[200005];\n\n\tvoid add(int x, int y) {\n\t\twhile (x <= n) {\n\t\t\tf[x] += y;\n\t\t\tx += (x & -x);\n\t\t}\n\t}\n\n\tint query(int x) {\n\t\tint ans = 0;\n\t\twhile (x) {\n\t\t\tans += f[x];\n\t\t\tx &= (x - 1);\n\t\t}\n\t\treturn ans;\n\t}\n} t1, t2;\n\nvoid dfs(int u) {\n\tif (!u) return;\n\ttops[u] = ++dfn;\n\tif (lc[u]) dep[lc[u]] = dep[u] + 1;\n\tdfs(lc[u]);\n\t++len; t[len] = c[u]; id[len] = u; pos[u] = len;\n\tif (rc[u]) dep[rc[u]] = dep[u] + 1;\n\tdfs(rc[u]);\n\tsiz[u] = siz[lc[u]] + siz[rc[u]] + 1;\n}\n\nint main() {\n\tios::sync_with_stdio(false); cin.tie(0);\n\tcin >> n >> k;\n\tfor (int i = 1; i <= n; i++) cin >> c[i];\n\tfor (int i = 1; i <= n; i++) {\n\t\tcin >> lc[i] >> rc[i];\n\t\tif (lc[i]) fa[lc[i]] = i;\n\t\tif (rc[i]) fa[rc[i]] = i;\n\t}\n\tdep[1] = 1; dfs(1);\n\tchar las = 'a' - 1;\n\tfor (int i = n; i >= 1; i--) {\n\t\tif (i != n && t[i] != t[i + 1]) las = t[i + 1];\n\t\tif (t[i] < las) good[i] = 1;\n\t}\n\tfor (int i = 1; i <= n; i++) f[i] = i;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!good[pos[i]] && rc[i]) {\n\t\t\tt1.add(tops[rc[i]], 1);\n\t\t\tt1.add(tops[rc[i]] + siz[rc[i]], -1);\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tint u = id[i];\n\t\tif (f[u] == u && good[i] && t1.query(tops[u]) == 0 && dep[u] - t2.query(tops[u]) <= k) {\n\t\t\tint now = u;\n\t\t\twhile (now) {\n\t\t\t\tf[now] = find(fa[now]);\n\t\t\t\tif (!good[pos[now]] && rc[now]) {\n\t\t\t\t\tt1.add(tops[rc[now]], -1);\n\t\t\t\t\tt1.add(tops[rc[now]] + siz[rc[now]], 1);\n\t\t\t\t}\n\t\t\t\tt2.add(tops[now], 1);\n\t\t\t\tt2.add(tops[now] + siz[now], -1);\n\t\t\t\t--k;\n\t\t\t\tnow = f[now];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tcout << t[i];\n\t\tif (f[id[i]] != id[i]) cout << t[i];\n\t}\n\tcout << endl;\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures", "dfs and similar", "greedy", "strings", "trees"], "dificulty": "2500", "interactive": false}