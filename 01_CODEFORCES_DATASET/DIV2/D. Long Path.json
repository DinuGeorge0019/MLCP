{
    "link": "https://codeforces.com//contest/408/problem/D",
    "problemId": "7729",
    "problem_idx": "D",
    "shortId": "408D",
    "contest_number": "408",
    "problem_submissions": {
        "D": [
            6182913,
            6184793,
            6183389,
            6183175,
            6183194,
            6183151,
            6183742,
            6183845,
            6184356,
            6183964,
            6182617,
            6183614,
            6183572,
            6184018,
            6184697,
            6185145,
            6185215,
            6184634,
            6185988
        ],
        "C": [
            6180744,
            6181858,
            6181425,
            6181714,
            6181423,
            6180993,
            6181914,
            6182164,
            6182467,
            6181559,
            6179671,
            6182700,
            6181648,
            6185458,
            6183178,
            6182807,
            6182877,
            6183356,
            6182935
        ],
        "B": [
            6179034,
            6179645,
            6179316,
            6180000,
            6179125,
            6179571,
            6179114,
            6180047,
            6179256,
            6179629,
            6184025,
            6179745,
            6179614,
            6179371,
            6180501,
            6180535,
            6180344,
            6180434,
            6179088
        ],
        "A": [
            6178074,
            6178358,
            6178376,
            6178603,
            6178196,
            6178067,
            6178142,
            6178223,
            6178120,
            6178191,
            6183083,
            6178083,
            6178093,
            6178127,
            6178701,
            6178793,
            6179033,
            6178659,
            6178160
        ]
    },
    "name": "D. Long Path",
    "statement": "One day, little Vasya found himself in a maze consisting of rooms,\r\nnumbered from to . Initially, Vasya is at the first room and to get out\r\nof the maze, he needs to get to the -th one.The maze is organized as\r\nfollows. Each room of the maze has two one-way portals. Let’s consider\r\nroom number , someone can use the first portal to move from it to room\r\nnumber , also someone can use the second portal to move from it to room\r\nnumber , where .In order not to get lost, Vasya decided to act as\r\nfollows. Each time Vasya enters some room, he paints a cross on its\r\nceiling. Initially, Vasya paints a cross at the ceiling of room . Let’s\r\nassume that Vasya is in room and has already painted a cross on its\r\nceiling. Then, if the ceiling now contains an odd number of crosses,\r\nVasya uses the second portal (it leads to room ), otherwise Vasya uses\r\nthe first portal. Help Vasya determine the number of times he needs to\r\nuse portals to get to room in the end.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <cmath>\n#include <iomanip>\n#include <unordered_set>\n#include <stdio.h>\n#include <string.h>\n#include <unordered_map>\nusing namespace std;\n\n#define MOD 1000000007\n#define ll long long\n\nll portal[1002];\nll rukseja[1002];\nll ts[1002];\n\nint main(){\n    ll n;\n    cin>>n;\n    for(ll i=1; i<=n; i++)\n        cin>>portal[i];\n\n    ts[1]=2;\n    for(ll i=2;i<=n;i++){\n        ts[i]=1;\n        for(ll e=portal[i];e<i;e++){\n            ts[i]+=ts[e];\n            ts[i]%=MOD;\n        }\n        ts[i]++;\n    }\n    ll v=0;\n    for(ll i=1;i<=n;i++){\n        v+=ts[i];\n        v%=MOD;\n    }\n    cout<<v<<endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Long Path.json",
    "editorial_link": "https://codeforces.com//blog/entry/11333",
    "editorial": "In this problem you had to simulate route of character in graph.\nNote that if you are in vertice i, then edges in all vertices with numbers less than i are turned to pi. It gives us opportunity to see a recurrence formula: let dpi be number of steps, needed to get from vertice 1 to vertice i, if all edges are rotated back, into pi. Then dpi?+?1?=?2dpi?+?2?-?dppi. Answer will be dpn?+?1.",
    "hint": []
}