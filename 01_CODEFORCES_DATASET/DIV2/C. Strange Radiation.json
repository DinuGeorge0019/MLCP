{
    "link": "https://codeforces.com//contest/832/problem/C",
    "problemId": "115519",
    "problem_idx": "C",
    "shortId": "832C",
    "contest_number": "832",
    "problem_submissions": {
        "C": [
            28850414,
            28839556,
            28849218,
            28970707,
            28860425,
            28882532
        ],
        "B": [
            28842559,
            28832195,
            28832637,
            28833745,
            28835678,
            28833935,
            28833416,
            28838017,
            28839620,
            28834185,
            28834397,
            28835866,
            28831820,
            28836424,
            28834235,
            28834452,
            28834561,
            28834258
        ],
        "E": [
            28840011,
            28847209,
            28846202,
            28846322,
            28851079,
            28847674,
            28848843,
            28861574,
            29694590
        ],
        "D": [
            28833290,
            28844072,
            28839533,
            28841064,
            28839461,
            28842570,
            28835402,
            28843358,
            28835918,
            28834140,
            28836636,
            28838484,
            28838783,
            28839031,
            28841097,
            28844392,
            28841838,
            28840397,
            28840613,
            28840691
        ],
        "A": [
            28827596,
            28827231,
            28829917,
            28828126,
            28828610,
            28830168,
            28827850,
            28827000,
            28836168,
            28827377,
            28826850,
            28827715,
            28827016,
            28827260,
            28826966,
            28827167,
            28828034,
            28826934,
            28827600
        ]
    },
    "name": "C. Strange Radiation",
    "statement": "people are standing on a coordinate axis in points with positive integer\r\ncoordinates strictly less than . For each person we know in which\r\ndirection (left or right) he is facing, and his maximum speed.You can\r\nput a bomb in some point with non-negative integer coordinate, and blow\r\nit up. At this moment all people will start running with their maximum\r\nspeed in the direction they are facing. Also, two strange rays will\r\nstart propagating from the bomb with speed : one to the right, and one\r\nto the left. Of course, the speed is strictly greater than people\u2019s\r\nmaximum speed.The rays are strange because if at any moment the position\r\nand the direction of movement of some ray and some person coincide, then\r\nthe speed of the person immediately increases by the speed of the\r\nray.You need to place the bomb is such a point that the minimum time\r\nmoment in which there is a person that has run through point , and there\r\nis a person that has run through point , is as small as possible. In\r\nother words, find the minimum time moment such that there is a point you\r\ncan place the bomb to so that at time moment some person has run through\r\n, and some person has run through point .\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n\nstruct ppl {\n\tint x, v;\n\tbool operator< (const ppl& c) const {\n\t\treturn x < c.x;\n\t}\n} ba[101010];\n\nconst double endp = 1e6;\nint N, S;\n\nint main(){\n\tscanf(\"%d%d\", &N, &S);\n\tfor(int i=0; i<N; i++){\n\t\tint typ;\n\t\tscanf(\"%d%d%d\", &ba[i].x, &ba[i].v, &typ);\n\t\tif(typ == 1) ba[i].v *= -1;\n\t}\n\tsort(ba, ba+N);\n\tdouble mi=1e-7, mx=1e7, md;\n\twhile(mx-mi > 1e-8){\n\t\tmd = (mi+mx)/2.;\n\t\tdouble xmiL=1e6, xmxL=0, xmiR=1e6, xmxR=0;\n\t\tfor(int i=0; i<N; i++){\n\t\t\tdouble tim, rem, v;\n\t\t\tif(ba[i].v < 0) rem = ba[i].x, v = -ba[i].v;\n\t\t\telse rem = endp - ba[i].x, v = ba[i].v;\n\t\t\ttim = rem / v;\n\t\t\tif(tim <= md){\n\t\t\t\tif(ba[i].v < 0) xmiL=0, xmxL=1e6;\n\t\t\t\telse xmiR = 0, xmxR=1e6;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdouble co = (tim-md) * v * (S+v) / S;\n\t\t\tif(rem < co){ continue; }\n\n\t\t\tdouble real = co + (md - co/(S+v)) * S, l, r;\n\t\t\tif(ba[i].v < 0) l = ba[i].x, r = real;\n\t\t\telse l = endp-real, r = ba[i].x;\n\t\t\tif(ba[i].v < 0) xmiL = min(xmiL, l), xmxL = max(xmxL, r);\n\t\t\telse xmiR = min(xmiR, l), xmxR = max(xmxR, r);\n\t\t}\n\t\tdouble xmi = max(xmiL, xmiR), xmx = min(xmxL, xmxR);\n\t\tif(ceil(xmi) <= floor(xmx)) mx = md;\n\t\telse mi = md;\n\t}\n\tprintf(\"%.10lf\\n\", (mi+mx)/2.);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation",
        "math"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Strange Radiation.json",
    "editorial_link": "https://codeforces.com//blog/entry/53461",
    "editorial": "We\u00e2\u0080\u0099ll use binary search by answer. Obviously, that answer is always less\r\nthan and more than . We denote the answer for at current iteration.For\r\neach person, running left, we have to find positions of bomb, at which\r\nhe will have time to reach the point in time . Let be the distance\r\nbetween the person and point and be the distance, which passed the\r\nperson before he caught up with the ray.If , we can place bomb in every\r\npoint.Otherwise, we can place bomb in point , Before the meeting with\r\nthe ray, person ran a distance of at a speed of , after the meeting he\r\nran a distance of at a speed of . We require the total time be no more\r\nthan . We need the person to be caught by rays, so bomb have to have\r\ncoordinate more than person\u00e2\u0080\u0099s initial coordinate. We know that rays and\r\nperson met at the point of at the moment of . Rays moves at the speed of\r\n. It means they started moving at the point of . Note that solutions of\r\nthis system form a segment on the coordinate line.For persons, running\r\nright, the reasoning is similar.We find all the segments for persons,\r\nrunnig left, and persons, running right. If some point with the whole\r\ncoordinate belongs to segment for person, running left and person,\r\nrunning right, we move right border of binary search and left border\r\notherwise.To find this point we can use scanline or prefix sums. Let the\r\nbinary search make iterations. Than final asymptotics is , if we use\r\nscanline, or if we use prefix sums.\r\n"
}