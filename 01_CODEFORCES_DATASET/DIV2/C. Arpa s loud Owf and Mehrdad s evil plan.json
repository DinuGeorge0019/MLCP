{
    "link": "https://codeforces.com//contest/742/problem/C",
    "problemId": "83317",
    "problem_idx": "C",
    "shortId": "742C",
    "contest_number": "742",
    "problem_submissions": {
        "E": [
            22752019,
            22759064,
            22754657,
            22765857,
            22788546,
            23197143,
            22762814
        ],
        "D": [
            22744910,
            22741651,
            22753078,
            22751028,
            22744888,
            22741846,
            22758632,
            22746446,
            22753836,
            22737034,
            22750995,
            22752528,
            22743466,
            22751854,
            22752496,
            22748899,
            22753642,
            22754503,
            22748134,
            22740266
        ],
        "C": [
            22740173,
            22743352,
            22744642,
            22741334,
            22739680,
            22738371,
            22747384,
            22741807,
            22746641,
            22740018,
            22741232,
            22742624,
            22739762,
            22746069,
            22745352,
            22744071,
            22747640,
            22744802,
            22742428,
            22742553
        ],
        "B": [
            22735430,
            22735137,
            22736961,
            22737223,
            22746763,
            22733523,
            22752994,
            22735820,
            22738249,
            22738141,
            197150958,
            22734885,
            22737066,
            22734297,
            22733944,
            22735191,
            22739491,
            22740891,
            22739140,
            22736069,
            22734748
        ],
        "A": [
            22733155,
            22734578,
            22732981,
            22745942,
            22747296,
            22732607,
            22733617,
            22732946,
            22732749,
            22733033,
            197151042,
            22732771,
            22732850,
            22741111,
            22733718,
            22732738,
            22736352,
            22735420,
            22733368,
            22763624
        ]
    },
    "name": "C. Arpa s loud Owf and Mehrdad s evil plan",
    "statement": "People in Arpa\u2019s land are numbered from to . Everyone has exactly one\r\ncrush, -th person\u2019s crush is person with the number . Someday Arpa\r\nshouted loudly from the top of the palace and a funny game started in\r\nArpa\u2019s land. The rules are as follows.The game consists of rounds.\r\nAssume person wants to start a round, he calls and says: \"\" (the letter\r\nis repeated times) and cuts off the phone immediately. If then calls and\r\nsays: \"\" (the letter is repeated times) and cuts off the phone\r\nimmediately. The round continues until some person receives an \"\" ().\r\nThis person is called the of the round. There can\u2019t be two rounds at the\r\nsame time.Mehrdad has an evil plan to make the game more funny, he wants\r\nto find smallest () such that for each person , if starts some round and\r\nbecomes the Joon-Joon of the round, then by starting from , would become\r\nthe Joon-Joon of the round. Find such for Mehrdad if it\u2019s possible.Some\r\nstrange fact in Arpa\u2019s land is that someone can be himself\u2019s crush (i.e.\r\n).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long i64;\nconst int MAX = 1e6 + 10;\nconst int MOD = 1e9 + 7;\n\n//#define acm_local\nint ar[MAX];\nbool seen[MAX];\nint ss[MAX];\nint main()\n{\n\n\n#ifdef acm_local\n    freopen(\"data.in\", \"r\", stdin);\n    return 0;\n#else\n    std::ios::sync_with_stdio(false);\n    cin.tie(0);\n#endif\n\n\n    int n; cin >> n;\n    for(int i = 1; i <= n ; i++){\n        cin>>ar[i];\n    }\n    bool poss = true;\n    for(int i = 1 ;i <= n; i++){\n        int cur = i;\n        if(seen[cur])continue;\n        while(!seen[cur]){\n            seen[cur] = true;\n            cur = ar[cur];\n            ss[i]++;\n        }\n        if(cur != i){\n            poss = false;\n            break;\n        }\n    }\n\n\n    if(!poss){\n        cout << -1 << endl;\n    }\n    else{\n        i64 ans = 1;\n        for(int i = 1; i <= n; i++)\n            if(ss[i] > 0){\n                if(ss[i] % 2 == 0)ss[i] /= 2;\n                ans = ans / __gcd(ans, (i64)ss[i]) * ss[i];\n            }\n        cout << ans << endl;\n    }\n\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Arpa s loud Owf and Mehrdad s evil plan.json",
    "editorial_link": "https://codeforces.com//blog/entry/48871",
    "editorial": "Make a directed graph and put edge from i and crushi. If the graph has vertex such that its in-degree is 0 then obviously answer doesn't exist. Otherwise, the graph consists of some cycles. For each cycle suppose that its length is len. If it has odd length, add len to S, otherwise, add len?/?2.\n\nThe answer is the LCM of numbers in S.\n\nTime complexity: ."
}