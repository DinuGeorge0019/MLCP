{
    "link": "https://codeforces.com//contest/1265/problem/D",
    "problemId": "486711",
    "problem_idx": "D",
    "shortId": "1265D",
    "contest_number": "1265",
    "problem_submissions": {
        "F": [
            66347509,
            66356863,
            66557730,
            66442620,
            66596419
        ],
        "D": [
            66340623,
            66367551,
            66338719,
            66334115,
            66337781,
            66335412,
            66337141,
            66346278,
            66339422,
            66338547,
            66341148,
            66339217,
            66340066,
            66341959,
            66331621,
            66342018,
            66346489,
            66340801,
            66342356,
            66342319,
            66343587
        ],
        "E": [
            66334163,
            66342621,
            66338591,
            66341637,
            66343875,
            66343996,
            66335345,
            66344209,
            66345114,
            66344975,
            66347923,
            66349901,
            66349558,
            66353633,
            66348910,
            66344231,
            66352728,
            66349177,
            66344898,
            66345749
        ],
        "C": [
            66327706,
            66330775,
            66334663,
            66328752,
            66329873,
            66333663,
            66331630,
            66332247,
            66329421,
            66334491,
            66334922,
            66330433,
            66331509,
            66336687,
            66333340,
            66334139,
            66330672,
            66335469,
            66331275,
            66338262
        ],
        "B": [
            66327279,
            66324231,
            66324702,
            66323571,
            66323717,
            66325187,
            66324433,
            66325466,
            66331477,
            66327697,
            66323823,
            66325202,
            66325641,
            66327180,
            66324867,
            66325852,
            66324365,
            66328628,
            66324650,
            66332154
        ],
        "A": [
            66323436,
            66367023,
            66322763,
            66325795,
            66322545,
            66322720,
            66322849,
            66322611,
            66322846,
            66324460,
            66323395,
            66326356,
            66322526,
            66323577,
            66323841,
            66322634,
            66323094,
            66322910,
            66325754,
            66323461,
            66323023
        ]
    },
    "name": "D. Beautiful Sequence",
    "statement": "An integer sequence is called if the difference between any two\r\nconsecutive numbers is equal to 1. More formally, a sequence s_1, s_2,\r\nldots, s_{n} is beautiful if |s_i - s_{i+1}| = 1 for all 1\r\nleq i\r\nleq n - 1.Trans has a numbers 0, b numbers 1, c numbers 2 and d numbers\r\n3. He wants to construct a beautiful sequence using all of these a + b +\r\nc + d numbers.However, it turns out to be a non-trivial task, and Trans\r\nwas not able to do it. Could you please help Trans?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nint a,b,c,d;\nint main(){\n\tcin>>a>>b>>c>>d;\n\t\n\tint cnt=(a>0)+(b>0)+(c>0)+(d>0);\n\tif(cnt==1){\n\t\tif(a>0){\n\t\t\tif(a==1) {printf(\"YES\\n0\");}\n\t\t\telse printf(\"NO\"); \n\t\t}\n\t\tif(b>0){\n\t\t\tif(b==1) {printf(\"YES\\n1\");}\n\t\t\telse printf(\"NO\"); \n\t\t}\n\t\tif(c>0){\n\t\t\tif(c==1) {printf(\"YES\\n2\");}\n\t\t\telse printf(\"NO\"); \n\t\t}\n\t\tif(d>0){\n\t\t\tif(d==1) {printf(\"YES\\n3\");}\n\t\t\telse printf(\"NO\"); \t\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\t\n\t\n\t\n\tif(c==d && c==0 && a==b+1){\n\t\tprintf(\"YES\\n0 \");\n\t\tfor(int i=1;i<=b;i++) printf(\"1 0 \");\n\t\treturn 0;\n\t}\n\tif(a==b && a==0 && d==c+1){\n\t\tprintf(\"YES\\n3 \");\n\t\tfor(int i=1;i<=c;i++) printf(\"2 3 \");\n\t\treturn 0;\n\t}\n\t\n\n\tif(a>b || d>c) {printf(\"NO\");return 0;}\n\tint p=b-a,q=c-d;\n\tif(abs(p-q)>1) {printf(\"NO\");return 0;}\n\n\tputs(\"YES\");\n\tif(p==q){\n\t\tfor(int i=1;i<=a;i++) printf(\"0 1 \");\n\t\tfor(int i=1;i<=p;i++) printf(\"2 1 \");\n\t\tfor(int i=1;i<=d;i++) printf(\"2 3 \"); \n\t}\n\telse if(p<q){\n\t\tfor(int i=1;i<=a;i++) printf(\"0 1 \");\n\t\tfor(int i=1;i<=p;i++) printf(\"2 1 \");\n\t\tfor(int i=1;i<=d;i++) printf(\"2 3 \");printf(\"2\");\n\t}\n\telse {\n\t\tprintf(\"1 \");\n\t\tfor(int i=1;i<=a;i++) printf(\"0 1 \");\n\t\tfor(int i=1;i<=q;i++) printf(\"2 1 \");\n\t\tfor(int i=1;i<=d;i++) printf(\"2 3 \");\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Beautiful Sequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/71995",
    "editorial": "Firstly, let\u00e2\u0080\u0099s arrange even numbers. It is optimal to arrange those\r\nnumbers as . Because we can place number anywhere while number only\r\nbetween two numbers or at the end beside a number . So we need to\r\nmaximize the number of positions where we can place number . The above\r\ngives us an optimal way. The next step is to place the remaining numbers\r\n. Inserting them in internal positions first then at the ends later.Base\r\non the above argument, we can do as following way that eliminates corner\r\ncase issues:Starting from a number (try all possible value ). At any\r\nmoment, if is the last element and there is at least number remains, we\r\nappend otherwise we append or stop if there is no left. If we manage to\r\nuse all numbers then we have a beautiful sequence and answer is \u00e2\u0080\u009d.\r\n"
}