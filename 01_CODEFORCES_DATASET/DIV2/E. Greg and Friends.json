{"link": "https://codeforces.com//contest/296/problem/E", "problemId": "2833", "problem_idx": "E", "shortId": "296E", "contest_number": "296", "problem_submissions": {"E": [3509655, 3530011, 3513398], "D": [3508239, 3510564, 3509853, 3510303, 3509560, 3507344, 3510171, 3510710, 3508453, 3506372, 3508795, 3509129, 3512243, 3511315, 3511375, 3512574, 3511095, 3511937, 3509758, 3511827], "C": [3507268, 3506021, 3506686, 3506618, 3507187, 3504856, 3508052, 3508249, 3506872, 3508268, 3506789, 3507244, 3507018, 3509797, 3509920, 3507422, 3509852, 3509574, 3507123, 3509396], "B": [3505992, 3508492, 3509062, 3509375, 3508183, 3511340, 3506942, 3507117, 3511659, 3511560, 3513039, 3511100, 3509223, 3507976, 3507652, 3509638, 3509043, 3508068, 3512689, 3508226], "A": [3504411, 3504445, 3504488, 3506304, 3511525, 3505538, 3505436, 3504680, 3508725, 3504742, 3504378, 3504972, 3504639, 3513641, 3505229, 3505312, 3505160, 3505517, 3504768]}, "name": "E. Greg and Friends", "statement": "One day Greg and his friends were walking in the forest. Overall there\r\nwere people walking, including Greg. Soon he found himself in front of a\r\nriver. The guys immediately decided to get across the river. Luckily,\r\nthere was a boat by the river bank, just where the guys were standing.\r\nWe know that the boat can hold people with the total weight of at most\r\nkilograms.Greg immediately took a piece of paper and listed there the\r\nweights of all people in his group (including himself). It turned out\r\nthat each person weights either 50 or 100 kilograms. Now Greg wants to\r\nknow what minimum number of times the boat needs to cross the river to\r\ntransport the whole group to the other bank. The boat needs at least one\r\nperson to navigate it from one bank to the other. As the boat crosses\r\nthe river, it can have any non-zero number of passengers as long as\r\ntheir total weight doesn\u2019t exceed .Also Greg is wondering, how many ways\r\nthere are to transport everybody to the other side in the minimum number\r\nof boat rides. Two ways are considered distinct if during some ride they\r\nhave distinct sets of people on the boat.Help Greg with this problem.\r\n", "solutions": ["#include <iostream>\n#include <string>\n#include <cstring>\n#include <cstdio>\n#include <set>\n#include <map>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <complex>\n#include <bitset>\n#include <numeric>\n#pragma comment(linker, \"/STACK:256000000\")\n\nusing namespace std;\n\nint n, k;\nint x, y;\n\nconst int maxN = 55;\nconst int mod = 1000000007;\n\nint dp[3 * maxN][maxN][maxN][2];\nint good[maxN][maxN];\n\nlong long cnk[maxN][maxN];\n\nint main() {\n  //freopen(\"input.txt\", \"r\", stdin);\n  //freopen(\"output.txt\", \"w\", stdout);\n\n  cnk[0][0] = 1;\n  for (int i = 1; i < maxN; ++i) {\n    cnk[i][0] = 1;\n    for (int j = 1; j < maxN; ++j) {\n      cnk[i][j] = (cnk[i - 1][j - 1] + cnk[i - 1][j]) % mod;\n    }\n  }\n  \n  cin >> n >> k;\n  x = y = 0;\n  for (int i = 0; i < n; ++i) {\n    int value;\n    cin >> value;\n    if (value == 50) {\n      ++x;\n    } else {\n      ++y;\n    }\n  }\n\n  for (int i = 0; i <= x; ++i) {\n    for (int j = 0; j <= y; ++j) {\n      good[i][j] = ((i * 50 + j * 100)<= k);\n    }\n  }\n\n  dp[0][x][y][0] = 1;\n\n  for (int i = 0; i + 1 < 3 * maxN; ++i) {\n    if (dp[i][x][y][1] != 0) {\n      cout << i << endl;\n      cout << dp[i][x][y][1] << endl;\n      return 0;\n    }\n    for (int j = 0; j < maxN; ++j) {\n      for (int k = 0; k < maxN; ++k) {\n        for (int flag = 0; flag < 2; ++flag) {\n          if (dp[i][j][k][flag] == 0) {\n            continue;\n          }          \n          for (int tx = 0; tx <= j; ++tx) {\n            for (int ty = 0; ty <= k; ++ty) {\n              if (tx + ty > 0 && good[tx][ty]) {\n                int val1 = cnk[j][tx];\n                int val2 = cnk[k][ty];\n                int val = ((long long)(val1) * (long long)(val2)) % mod;\n                int ntx = (x - j) + tx;\n                int nty = (y - k) + ty;\n                dp[i + 1][ntx][nty][1 - flag] += ((long long)(val) * dp[i][j][k][flag]) % mod;\n                if (dp[i + 1][ntx][nty][1 - flag] >= mod) {\n                  dp[i + 1][ntx][nty][1 - flag] -= mod;\n                }\n              }\n            }\n          }\n        }\n      }\n    }   \n  } \n  cout << -1 << endl;\n  cout << 0 << endl;\n\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["combinatorics", "dfs and similar", "dp"], "dificulty": "2100", "interactive": false}