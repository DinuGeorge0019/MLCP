{
    "link": "https://codeforces.com//contest/922/problem/A",
    "problemId": "154238",
    "problem_idx": "A",
    "shortId": "922A",
    "contest_number": "922",
    "problem_submissions": {
        "F": [
            35024389,
            35030878,
            35066050
        ],
        "E": [
            35021772,
            35023531,
            35025088,
            35031161,
            35025975,
            35029014,
            35026988,
            35021941,
            35026997,
            35064591,
            35064474,
            35026191,
            35037602,
            35037396,
            35027845
        ],
        "A": [
            35014429,
            35006326,
            35014914,
            35006731,
            35022340,
            35006627,
            35016513,
            35027286,
            35015985,
            35019424,
            35007052,
            35007949,
            35037576,
            35006680
        ],
        "C": [
            35013242,
            35014688,
            35008675,
            35009771,
            35021848,
            35009735,
            35022809,
            35015286,
            35020018,
            35017726,
            35013353,
            35014808,
            35011448,
            35018270,
            35015187,
            35037555,
            35037421,
            35021338,
            35014321
        ],
        "D": [
            35011345,
            35017477,
            35010376,
            35021949,
            35015604,
            35013771,
            35027504,
            35020183,
            35031518,
            35015008,
            35019185,
            35023414,
            35018029,
            35028830,
            35018141,
            35037411,
            35026479,
            35021278
        ],
        "B": [
            35007623,
            35008516,
            35007719,
            35008074,
            35008746,
            35007399,
            35009873,
            35009915,
            35012055,
            35007990,
            35009015,
            35007912,
            35008304,
            35009458,
            35010175,
            35037430,
            35007761,
            35008509
        ]
    },
    "name": "A. Cloning Toys",
    "statement": "Imp likes his plush toy a lot. Recently, he found a machine that can\r\nclone plush toys. Imp knows that if he applies the machine to an\r\noriginal toy, he additionally gets one more original toy and one copy,\r\nand if he applies the machine to a copied toy, he gets two additional\r\ncopies.Initially, Imp has only one original toy. He wants to know if it\r\nis possible to use machine to get exactly toys and toys? He can\u2019t throw\r\ntoys away, and he can\u2019t apply the machine to a copy if he doesn\u2019t\r\ncurrently have any copies.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\n#define F first\n#define S second\nvoid shit(){\n    cout << \"No\" << endl;\n    exit(0);\n}\nint main(){\n    int c, o;\n    cin >> c >> o;\n    if(o < 1) shit();\n    if((c + o) % 2 != 1) shit();\n    int tot = (c + o - 1) / 2;\n    int op = o - 1;\n    int lef = tot - op;\n\tif (lef < 0)\n\t\tshit();\n    if(c == lef * 2 + op){\n        if(op == 0 && lef != 0) shit();\n        cout << \"Yes\" << endl;\n    }\n    else shit();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Cloning Toys.json",
    "editorial_link": "https://codeforces.com//blog/entry/57605",
    "editorial": "Consider a few cases: If , the answer is always . If , then the answer\r\nis possible only if ; if , the answer is . We can observe that the\r\noriginal was cloned times to produce the requested amount of originals,\r\nthen the additional copies were created by cloning the copies emerged\r\nfrom cloning the original. As every cloning of a copy results in\r\nadditional two, we need to check whether is divisible by 2. We also need\r\nto take care of the case when is less than zero in this case, the answer\r\nis also . .\r\n"
}