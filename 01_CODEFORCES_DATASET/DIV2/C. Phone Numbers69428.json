{
    "link": "https://codeforces.com//contest/898/problem/C",
    "problemId": "139116",
    "problem_idx": "C",
    "shortId": "898C",
    "contest_number": "898",
    "problem_submissions": {
        "F": [
            33307844,
            33307069,
            33308143,
            33307333,
            33304725,
            33309674,
            33307617,
            33324444,
            33463766,
            33463739
        ],
        "E": [
            33298700,
            33298827,
            33296850,
            33298062,
            33299543,
            33301231,
            33302052,
            33295023,
            33295557,
            33302644,
            33297022,
            33300051,
            33297188,
            33300909,
            33298325,
            33294157,
            33299352
        ],
        "D": [
            33295484,
            33296274,
            33295804,
            33295438,
            33296979,
            33297889,
            33299897,
            33296885,
            33293153,
            33301610,
            33299195,
            33297291,
            33294317,
            33297559,
            33296082,
            33292010,
            33295516
        ],
        "C": [
            33293049,
            33292838,
            33294192,
            33293208,
            33294387,
            33295591,
            36631893,
            33298752,
            33292900,
            33291380,
            33326974,
            33293057,
            33293412,
            33294345,
            33292038,
            33294840,
            33294194,
            33298225,
            33297034
        ],
        "B": [
            33288797,
            33294236,
            33289524,
            33296573,
            33305320,
            33291082,
            33290611,
            33289720,
            33288149,
            33288790,
            33289877,
            33289821,
            33288702,
            33290526,
            33291731,
            33294974,
            33291014
        ],
        "A": [
            33287337,
            33293381,
            33287422,
            33296068,
            33304988,
            33288124,
            33288589,
            33287509,
            33287292,
            33287275,
            33287989,
            33287858,
            33287278,
            33288680,
            33290739,
            33295465,
            33288106
        ]
    },
    "name": "C. Phone Numbers",
    "statement": "Vasya has several phone books, in which he recorded the telephone\r\nnumbers of his friends. Each of his friends can have one or several\r\nphone numbers.Vasya decided to organize information about the phone\r\nnumbers of friends. You will be given strings all entries from Vasya’s\r\nphone books. Each entry starts with a friend’s name. Then follows the\r\nnumber of phone numbers in the current entry, and then the phone numbers\r\nthemselves. It is possible that several identical phones are recorded in\r\nthe same record.Vasya also believes that if the phone number is a suffix\r\nof the phone number (that is, the number ends up with ), and both\r\nnumbers are written by Vasya as the phone numbers of the same person,\r\nthen is recorded without the city code and it should not be taken into\r\naccount.The task is to print organized information about the phone\r\nnumbers of Vasya’s friends. It is possible that two different people\r\nhave the same number. If one person has two numbers and , and is a\r\nsuffix of (that is, ends in ), then you shouldn’t print number . If the\r\nnumber of a friend in the Vasya’s phone books is recorded several times\r\nin the same format, it is necessary to take it into account exactly\r\nonce.Read the examples to understand statement and format of the output\r\nbetter.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define ll long long\n\nusing namespace std;\n\nconst int N = (3e5), mod = (1e9) + 7;\n\nstring  s[N], r[N];\nint n, m;\nint t;\n\nstring name;\n\nmap <string, vector <string> > ma;\n\nbool cmp(string a, string b){\n\treturn (a.size() < b.size());\n}\n\nbool check(string a,string b){\n\tfor(int i = int(a.size()) - 1, j = int(b.size()) - 1;i >= 0; i--,j--){\n\t\tif(a[i] != b[j]) return 0;\n\t}\n\treturn 1;\n}\n\nint main(){\n\tcin >> t;\n\tfor(int j = 1; j <= t; j++){\n\t\tcin >> name >> n;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcin >> s[i];\n\t\t\tma[name].pb(s[i]);\n\t\t}\n\t}\n\tcout << int(ma.size()) << endl;\n\tfor(auto p : ma){\n\t\tcout << p.f << \" \";\n\t\tn = 0;\n\t\tfor(int i = 0; i < ma[p.f].size(); i++){\n\t\t\ts[n++] = ma[p.f][i];\n\t\t}\n\t\tsort(s, s + n, cmp);\n\t\tm = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tbool ok = 1;\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tif(check(s[i],s[j])){\n\t\t\t\t\tok = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ok) r[m++] = s[i];\n\t\t}\n\t\tcout << m;\n\t\tfor(int i = 0; i < m; i++){\n\t\t    cout << \" \" << r[i];\n\t\t}\n\t\tcout << endl;\n\t}\n\t\n \treturn 0;\n}             "
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Phone Numbers69428.json",
    "editorial_link": "https://codeforces.com//blog/entry/56381",
    "editorial": "Letâs use map from string to vector of strings to simplify\r\nimplementation. The map keys is friend names, and the values list of\r\nphone numbers.At first letâs put all input data in map, but if vector\r\nfor a current friend already contains a current number we should not put\r\nthis number in the vector (for example, we can check it with help of\r\nset).After that we need only to remove for each friend the numbers which\r\nare the suffixes of other number of that friend. The time limit allows\r\nto make it in time equals to square of phone number count for a current\r\nfriend.Now we need to iterate through map key set (it will be names of\r\nall Vasyaâs friends) and print all remaining phone numbers for each\r\nfriend.\r\n",
    "hint": []
}