{
    "link": "https://codeforces.com//contest/2067/problem/D",
    "problemId": "3199298",
    "problem_idx": "D",
    "shortId": "2067D",
    "contest_number": "2067",
    "problem_submissions": {
        "F": [
            305685907,
            305692347,
            305698935,
            305692774,
            305676497,
            305698856,
            306077498,
            305705678,
            305756151,
            305704889
        ],
        "E": [
            305658599,
            305672236,
            305683533,
            305683773,
            305656801,
            305645614,
            305696470,
            305667416,
            305664383,
            305673487,
            305670822,
            305677487,
            305670853,
            305673781,
            305671527,
            305669540,
            305677992,
            305669569
        ],
        "D": [
            305649366,
            305681166,
            305653626,
            305674453,
            305643643,
            305729660,
            305688166,
            305650701,
            305653886,
            305650207,
            305654910,
            305651908,
            305655288,
            305746455,
            305655141,
            305660113,
            305659896,
            305656329,
            305714910,
            305658443
        ],
        "C": [
            305636369,
            305648878,
            305666557,
            305665235,
            305625887,
            305647363,
            305654112,
            305631231,
            305632643,
            305629967,
            305634943,
            305636497,
            305638128,
            305637135,
            305643511,
            305643488,
            305640674,
            305635570
        ],
        "B": [
            305619994,
            305628659,
            305625583,
            305654171,
            305618751,
            305619632,
            305656230,
            305622837,
            305619493,
            305623632,
            305626730,
            305624964,
            305625007,
            305622467,
            305622926,
            305630860,
            305620471,
            305624035
        ],
        "A": [
            305614513,
            305615491,
            305614195,
            305613169,
            305612940,
            305612785,
            305651426,
            305615731,
            305613408,
            305616051,
            305615564,
            305614161,
            305613236,
            305614353,
            305613295,
            305614069,
            305612838,
            305613240
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/139415?locale=en",
    "editorial": "Note that if Object is chosen, we can receive the number in response to\r\nsome query, while if Object is chosen, we cannot: since .If the array is\r\na permutation of the numbers from to , then there will be some number\r\nthat is not present in the array . In this case, if Object is chosen,\r\nany query will yield a response of , since there are simply no edges\r\nfrom vertex (here denotes any number from to that is not equal to ). We\r\ncan make such a query, and by checking whether the response is , we can\r\nimmediately determine which object the jury has chosen.However, if the\r\narray is a permutation. Letâ€™s find such and that and , and make the\r\nqueries and . In the case that Object is chosen: we should receive two\r\nidentical numbers, both of which must be , since . It is not hard to see\r\nthat such a situation is impossible if Object is chosen: for , in a\r\ndirected graph with vertices and edges, it cannot be that for some pair\r\nof vertices, the distances from one to the other in both directions are\r\n. Therefore, these two queries are sufficient to uniquely identify the\r\nobjects. If both received numbers are equal and : Object is chosen;\r\notherwise, Object is chosen.\r\n",
    "name": "D. Object Identification",
    "statement": "You are given an array x_1,\r\nldots, x_n of integers from 1 to n. The jury also has a fixed but hidden\r\narray y_1,\r\nldots, y_n of integers from 1 to n. The elements of array y are to you.\r\nAdditionally, it is known that for all i, x_i\r\nneq y_i, and all pairs (x_i, y_i) are distinct.The jury has secretly\r\nthought of one of two objects, and you need to determine which one it\r\nis: : A directed graph with n vertices numbered from 1 to n, and with n\r\nedges of the form x_i\r\nto y_i. : n points on a coordinate plane. The i-th point has coordinates\r\n(x_i, y_i). To guess which object the jury has thought of, you can make\r\nqueries. In one query, you must specify two numbers i, j (1\r\nleq i, j\r\nleq n, i\r\nneq j). In response, you receive one number: If the jury has thought of\r\n, you receive the length of the shortest path (in edges) from vertex i\r\nto vertex j in the graph, or 0 if there is no path. If the jury has\r\nthought of , you receive the Manhattan distance between points i and j,\r\nthat is |x_i -x_j| + |y_i - y_j|.You have 2 queries to determine which\r\nof the objects the jury has thought of.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "graphs",
        "interactive"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Object Identification.json",
    "hint": []
}