{"link": "https://codeforces.com//contest/667/problem/C", "problemId": "57420", "problem_idx": "C", "shortId": "667C", "contest_number": "667", "problem_submissions": {"D": [17578505, 17578570, 17579983, 17579852, 17581346, 17579873, 17581494, 17581266, 17580319, 17581259, 17581685, 17583097, 17581442, 17581402, 17579446, 17581355, 17583002, 17580142], "C": [17573875, 17572689, 17574596, 17575127, 17573397, 17573218, 17573452, 17575098, 17575527, 17575043, 17576597, 17575985, 17576939, 17575629, 17580783, 17576852, 17576973, 17576127], "B": [17571142, 17570505, 17570987, 17571612, 17570711, 17570822, 17569944, 17569925, 17572245, 17570880, 17571749, 17571220, 17573489, 17572815, 17571948, 17572494, 17582197], "A": [17569800, 17569752, 17569862, 17572567, 17569957, 17570123, 17569662, 17569643, 17571389, 17569984, 17569766, 17570035, 17570122, 17570638, 17571301, 17570534, 17583219]}, "name": "C. Reberland Linguistics", "statement": "First-rate specialists graduate from Berland State Institute of Peace\r\nand Friendship. You are one of the most talented students in this\r\nuniversity. The education is not easy because you need to have\r\nfundamental knowledge in different areas, which sometimes are not\r\nrelated to each other. For example, you should know linguistics very\r\nwell. You learn a structure of Reberland language as foreign language.\r\nIn this language words are constructed according to the following rules.\r\nFirst you need to choose the \"root\" of the word some string which has\r\nmore than letters. Then several strings with the length or symbols are\r\nappended to this word. The only restriction . All these strings are\r\nconsidered to be suffixes of the word (this time we use word \"suffix\" to\r\ndescribe a morpheme but not the few last characters of the string as you\r\nmay used to). Here is one exercise that you have found in your task\r\nlist. You are given the word . Find all distinct strings with the length\r\nor , which can be suffixes of this word according to the word\r\nconstructing rules in Reberland language. Two strings are considered\r\ndistinct if they have different length or there is a position in which\r\ncorresponding characters do not match. Let\u2019s look at the example: the\r\nword is given. This word can be obtained in the following ways: , where\r\nthe root of the word is overlined, and suffixes are marked by \"corners\".\r\nThus, the set of possible suffixes for this word is .\r\n", "solutions": ["#define _CRT_SECURE_NO_WARNINGS\n#pragma comment(linker, \"/STACK:256000000\")\n#include <iostream>\n#include <fstream>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <queue>\n#include <deque>\n#include <bitset>\n#include <unordered_map>\n#include <unordered_set>\n#include <cassert>\n\nusing namespace std;\n\ntemplate<class T> bool uin(T &a, T b) { return a > b ? (a = b, true) : false; }\ntemplate<class T> bool uax(T &a, T b) { return a < b ? (a = b, true) : false; }\n\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef vector<int> vi;\n\n#define TASK \"\"\n#define forn(i, n) for (int i = 0; i < (int)n; i++)\n#define for1(i, n) for (int i = 1; i <= (int)n; i++)\n#define forq(i, s, t) for (int i = s; i <= (int)t; i++)\n#define ford(i, s, t) for (int i = s; i >= (int)t; i--)\n#define mk make_pair\n#define pk\tpush_back\n#define all(v) v.begin(), v.end()\n#define TIME clock() * 1.0 / CLOCKS_PER_SEC\n\nconst double EPS = 1e-15;\nconst double PI = acos(-1.0);\nconst int MAXN = (int)1e5 + 7;\nconst int INF = (int)1e9 + 7;\nconst ll LINF = (ll)2e18 + 7;\nconst int MOD = (int)1e9 + 7;\nconst ull P = 239017;\nconst ull MM = (ull)2147482661;\n\t\nint solve();\n\nint main()\n{\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n\tfreopen(\"test.txt\", \"w\", stderr);\n\tdouble tstart = TIME;\n#else\n\t//freopen(TASK\".in\", \"r\", stdin), freopen(TASK\".out\", \"w\", stdout);\n#endif\n\treturn solve();\n}\n\nset<string> v[MAXN];\n\nint solve()\n{\n\tstring s;\n\tcin >> s;\n\tint len = s.length();\n\n\tset<string> sans;\n\tfor (int i = len - 1; i > 4; i--) {\n\t\tstring t = s.substr(i, 1);\n\t\tfor (int j = i - 1; j >= i - 2 && j > 4; j--) {\n\t\t\tt = s[j] + t;\n\t\t\tif (v[i + 1].size() == 1 && !v[i + 1].count(t) || v[i + 1].size() > 1 || i + 1 >= len) {\n\t\t\t\tv[j].insert(t);\n\t\t\t\tsans.insert(t);\n\t\t\t}\n\t\t}\n\t}\n\n\tcout << sans.size() << '\\n';\n\tfor (auto x : sans) {\n\t\tcout << x << '\\n';\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["dp", "strings"], "dificulty": "1800", "interactive": false}