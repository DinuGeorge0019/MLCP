{
    "link": "https://codeforces.com//contest/673/problem/F",
    "problemId": "59811",
    "problem_idx": "F",
    "shortId": "673F",
    "contest_number": "673",
    "problem_submissions": {
        "E": [
            17790544,
            17790298,
            17792643,
            17795142,
            17797198,
            17796072,
            17796678,
            17794290,
            17802948,
            18498821,
            18454059,
            18453934,
            18453804,
            27208468,
            17814502,
            17814492,
            17810486
        ],
        "A": [
            17785371,
            17780028,
            17783006,
            17781229,
            17780841,
            17781392,
            17781436,
            17783310,
            17780077,
            17780098,
            17783943,
            17780241,
            17780697,
            17780142,
            17780713,
            17780906,
            17780033,
            17782963,
            17780095,
            17780488
        ],
        "D": [
            17784968,
            17784163,
            17787638,
            17787311,
            17788261,
            17790516,
            17791783,
            17788147,
            17787202,
            17788591,
            17787856,
            17787228,
            17787665,
            17788331,
            17788505,
            17790808,
            17791801,
            17789992,
            17788978,
            17790173
        ],
        "B": [
            17783887,
            17780728,
            17785147,
            17782968,
            17783327,
            17784516,
            17785052,
            17786520,
            17783375,
            17784877,
            17782865,
            17784125,
            17784706,
            17782517,
            17784194,
            17786784,
            17781561,
            17784108,
            17784745,
            17783935
        ],
        "C": [
            17780670,
            17782033,
            17785575,
            17788307,
            17784829,
            17786955,
            17787316,
            17789788,
            17784945,
            17782021,
            17781157,
            17785332,
            17782835,
            17785106,
            17786557,
            17783986,
            17790134,
            17785539,
            17783083,
            17786914
        ],
        "F": [
            17799743
        ]
    },
    "name": "F. Bearish Fanpages",
    "statement": "There is a social website with fanpages, numbered through . There are\r\nalso companies, and the -th company owns the -th fanpage.Recently, the\r\nwebsite created a feature called following. Each fanpage must choose\r\nexactly one other fanpage to follow.The website doesn t allow a\r\nsituation where follows and at the same time follows . Also, a fanpage\r\ncan’t follow itself.Let s say that fanpage follows some other fanpage .\r\nAlso, let s say that is followed by other fanpages . Then, when people\r\nvisit fanpage they see ads from distinct companies: . Exactly people\r\nsubscribe (like) the -th fanpage, and each of them will click exactly\r\none add. For each of companies , exactly people will click their ad.\r\nRemaining people will click an ad from company (the owner of the\r\nfanpage).The total income of the company is equal to the number of\r\npeople who click ads from this copmany.Limak and Radewoosh ask you for\r\nhelp. Initially, fanpage follows fanpage . Your task is to handle\r\nqueries of three types: fanpage follows fanpage from now. It’s\r\nguaranteed that didn’t follow just before the query. Note an extra\r\nconstraint for the number of queries of this type (below, in the Input\r\nsection). print the total income of the -th company. print two integers:\r\nthe smallest income of one company and the biggest income of one\r\ncompany.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n// yazan ->  VK: KAN, vepifanov\n\nusing namespace std;\n\nusing ll = long long;\nusing ld = long double;\nusing D = double;\nusing uint = unsigned int;\n\n#define LLD \"%I64d\"\n\n#define pb push_back\n#define mp make_pair\n#define all(x) begin(x), end(x)\n#define fi first\n#define se second\n\nconst int maxn = 100005;\n\nll t[maxn], others[maxn], me[maxn];\nint f[maxn];\nvector<int> from[maxn];\nint kv[maxn];\nll ans[maxn];\nint n, m;\nmultiset<ll> global;\nmultiset<ll> cur[maxn];\nbool in[maxn], in2[maxn];\n\nvoid pop(int x)\n{\n\tif (!in[x]) return;\n\tin[x] = false;\n\tif (cur[x].size() > 0)\n\t{\n\t\tglobal.erase(global.find(others[x] + *cur[x].begin()));\n\t\tglobal.erase(global.find(others[x] + *cur[x].rbegin()));\n\t}\n}\n\nvoid push(int x)\n{\n\tif (in[x]) return;\n\tin[x] = true;\n\tif (cur[x].size() > 0)\n\t{\n\t\tglobal.insert(others[x] + *cur[x].begin());\n\t\tglobal.insert(others[x] + *cur[x].rbegin());\n\t}\n}\n\nvoid delfrom(int a, int b)\n{\n\tif (!in2[a]) return;\n\tin2[a] = false;\n\tcur[b].erase(cur[b].find(ans[a]));\n}\n\nvoid addto(int a, int b)\n{\n\tif (in2[a]) return;\n\tin2[a] = true;\n\tcur[b].insert(ans[a]);\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 0; i < n; i++) scanf(\"%lld\", &t[i]);\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tscanf(\"%d\", &f[i]);\n\t\tf[i]--;\n\t\tkv[i]++;\n\t\tkv[f[i]]++;\n\t\tfrom[f[i]].pb(i);\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tothers[i] = t[i] / (kv[i] + 1);\n\t\tme[i] = t[i] - (kv[i] * others[i]);\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tans[i] = me[i];\n\t\tfor (auto z : from[i]) ans[i] += others[z];\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (auto z : from[i])\n\t\t{\n\t\t\tcur[i].insert(ans[z]);\n\t\t}\n\t\tif (cur[i].size() > 0)\n\t\t{\n\t\t\tglobal.insert(others[i] + *cur[i].begin());\n\t\t\tglobal.insert(others[i] + *cur[i].rbegin());\n\t\t}\n\t\tin[i] = true;\n\t\tin2[i] = true;\n\t}\n// \tfor (int j = 0; j < n; j++) printf(\"%lld \", ans[j]);\n// \tprintf(\"\\n\");\n// \tfor (int j = 0; j < n; j++)\n// \t{\n// \t\tprintf(\"cur %d contents:\\n\", j);\n// \t\tfor (auto it : cur[j]) printf(\"%lld \", it);\n// \t\tprintf(\"\\n\");\n// \t}\n// \tprintf(\"global contents:\\n\");\n// \tfor (auto it : global) printf(\"%lld \", it);\n// \tprintf(\"\\n\");\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tint t;\n\t\tscanf(\"%d\", &t);\n\t\tif (t == 1)\n\t\t{\n\t\t\tint a, b;\n\t\t\tscanf(\"%d%d\", &a, &b);\n\t\t\ta--, b--;\n\t\t\tint was = f[a];\n\t\t\tpop(a);\n\t\t\tpop(was);\n\t\t\tpop(f[was]);\n\t\t\tpop(f[f[was]]);\n\t\t\tpop(b);\n\t\t\tpop(f[b]);\n\t\t\tpop(f[f[b]]);\n\t\t\tdelfrom(a, was);\n\t\t\tdelfrom(was, f[was]);\n\t\t\tdelfrom(f[was], f[f[was]]);\n\t\t\tdelfrom(b, f[b]);\n\t\t\tdelfrom(f[b], f[f[b]]);\n\t\t\t\n\t\t\tans[was] -= others[a];\n\t\t\tans[f[was]] -= others[was];\n\t\t\tkv[was]--;\n\t\t\tothers[was] = ::t[was] / (kv[was] + 1);\n\t\t\tans[was] -= me[was];\n\t\t\tme[was] = ::t[was] - (kv[was] * others[was]);\n\t\t\tans[was] += me[was];\n\t\t\tans[f[was]] += others[was];\n\t\t\t\n\t\t\tf[a] = b;\n\t\t\tans[b] += others[a];\n\t\t\tans[f[b]] -= others[b];\n\t\t\tkv[b]++;\n\t\t\tothers[b] = ::t[b] / (kv[b] + 1);\n\t\t\tans[b] -= me[b];\n\t\t\tme[b] = ::t[b] - (kv[b] * others[b]);\n\t\t\tans[b] += me[b];\n\t\t\tans[f[b]] += others[b];\n\n\t\t\taddto(a, b);\n\t\t\taddto(was, f[was]);\n\t\t\taddto(f[was], f[f[was]]);\n\t\t\taddto(b, f[b]);\n\t\t\taddto(f[b], f[f[b]]);\n\t\t\tpush(a);\n\t\t\tpush(was);\n\t\t\tpush(f[was]);\n\t\t\tpush(f[f[was]]);\n\t\t\tpush(b);\n\t\t\tpush(f[b]);\n\t\t\tpush(f[f[b]]);\n\t\t\t\n// \t\t\tfor (int j = 0; j < n; j++) printf(\"%lld \", ans[j]);\n// \t\t\tprintf(\"\\n\");\n// \t\t\tfor (int j = 0; j < n; j++)\n// \t\t\t{\n// \t\t\t\tprintf(\"cur %d contents:\\n\", j);\n// \t\t\t\tfor (auto it : cur[j]) printf(\"%lld \", it);\n// \t\t\t\tprintf(\"\\n\");\n// \t\t\t}\n// \t\t\tprintf(\"global contents:\\n\");\n// \t\t\tfor (auto it : global) printf(\"%lld \", it);\n// \t\t\tprintf(\"\\n\");\n\t\t} else if (t == 2)\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\", &x);\n\t\t\tx--;\n\t\t\tprintf(\"%lld\\n\", ans[x] + others[f[x]]);\n\t\t} else\n\t\t{\n\t\t\tprintf(\"%lld %lld\\n\", *global.begin(), *global.rbegin());\n\t\t}\n\t}\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Bearish Fanpages.json",
    "editorial_link": "https://codeforces.com//blog/entry/44754",
    "editorial": "(invented by Radewoosh) Let’s say that every company has one parent (a\r\ncompany it follows). Also, every copmany has some (maybe empty) set of\r\nchildren. It’s crucial that sets of children are disjoint. For each\r\ncompany let’s keep (and always update) one value, equal to the sum of:\r\nIt turns out that after each query only the above sum changes only for a\r\nfew values. If starts to follows then you should care about . And maybe\r\nand if you want to be sure. You can stop reading now for a moment and\r\nanalyze that indeed other companies will keep the same sum, described\r\nabove. Ok, but so far we don’t count the income coming from parent’s\r\nfanpage. But, for each company we can store all its children in one set.\r\nAll children have the same \"income from parent’s fanpage\" because they\r\nhave the same parent. So, in set you can keep children sorted by the sum\r\ndescribed above. Then, we should always puts the extreme elements from\r\nsets in one global set. In the global set you care about the total\r\nincome, equal to the sum described above and this new \"income from\r\nparent\". Check codes for details. The complexity should be , with big\r\nconstant factor. 18286747 (invented by Errichto) Let denote the\r\nprobability that subtree (if attacked now) would have height at most .\r\nThe first observation is that we don’t care about big because it’s very\r\nunlikely that a path with e.g. 100 edges will survive. Let’s later talk\r\nabout choosing and now let’s say that it’s enough to consider up to .\r\nWhen we should answer a query for subtree then we should sum up to get\r\nthe answer. The other query is harder. Let’s say that a new vertex is\r\nattached to vertex . Then, among only changes (other values stay the\r\nsame). Also, one value changes, and so does and so on. You should\r\niterate over vertices (each time going to parent) and update the\r\ncorresponding value. TODO puts here come formula for updating value. The\r\ncomplexity is . You may think that is enough because is small enough.\r\nUnfortunately, there exist malicious tests. Consider a tree with paths\r\nfrom root, each with length . Now, we talk about the probability of\r\nmagnitude: which is more than for .\r\nhttp://www.wolframalpha.com/input/?i=1+-+(1-(1\r\n"
}