{
    "link": "https://codeforces.com//contest/1698/problem/C",
    "problemId": "1443728",
    "problem_idx": "C",
    "shortId": "1698C",
    "contest_number": "1698",
    "problem_submissions": {
        "F": [
            162124470,
            162134445,
            162141749,
            162152934,
            177654064,
            216084662,
            162196377,
            162139942,
            162355602,
            162159626,
            162690820
        ],
        "E": [
            162087630,
            162097353,
            162109816,
            162103301,
            162126529,
            162103867,
            162097541,
            162101116,
            162109117,
            162107378,
            162110311,
            162151314,
            162112938,
            162118264,
            162120819,
            162122603,
            162129047,
            162116428,
            162113567,
            162115753
        ],
        "D": [
            162072106,
            162078971,
            162084618,
            162091663,
            162091608,
            162080384,
            162079742,
            162083927,
            162089597,
            162090503,
            162089228,
            162119224,
            162090409,
            162087036,
            162090706,
            162084921,
            162084389,
            162101274,
            162089309,
            162089923
        ],
        "C": [
            162065641,
            162067112,
            162066151,
            162070233,
            162081538,
            162071658,
            162069982,
            162072714,
            162074007,
            162068223,
            162076542,
            162110420,
            162075987,
            162073114,
            162072860,
            162074806,
            162073708,
            162075609,
            162078161,
            162072891
        ],
        "B": [
            162059543,
            162058156,
            162059458,
            162060292,
            162065675,
            162061709,
            162057759,
            162058869,
            162063379,
            162060397,
            162060756,
            162115063,
            162060812,
            162061896,
            162062035,
            162068563,
            162064118,
            162063059,
            162062265,
            162061711
        ],
        "A": [
            162055540,
            162055455,
            162055545,
            162055770,
            162057397,
            162055986,
            162055221,
            162055288,
            162058360,
            162055918,
            162055534,
            162055768,
            162055783,
            162057223,
            162056112,
            162055836,
            162057629,
            162055832,
            162056104,
            162055773
        ],
        "G": [
            162150291,
            162713012
        ]
    },
    "name": "C. 3SUM Closure",
    "statement": "You are given an array a of length n. The array is called if for all\r\ndistinct indices i, j, k, the sum a_i + a_j + a_k is an element of the\r\narray. More formally, a is 3SUM-closed if for all integers 1\r\nleq i < j < k\r\nleq n, there exists some integer 1\r\nleq l\r\nleq n such that a_i + a_j + a_k = a_l.Determine if a is 3SUM-closed.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nint T,n,k,tot,fl,j,l,i,a[1000005];\nint main(){\n\tcin>>T;\n\twhile(T--){\n\t\tcin>>n;tot=0;\n\t\tfor(i=1;i<=n;++i){\n\t\t\tcin>>a[i];\n\t\t\tif(a[i]==0){\n\t\t\t\t++tot;\n\t\t\t\tif(tot>1){\n\t\t\t\t\t--i;--n;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(n>10){\n\t\t\tcout<<\"NO\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tfl=0;tot=0;\n\t\t\tfor(i=1;i<=n;++i){\n\t\t\t\tfor(j=i+1;j<=n;++j){\n\t\t\t\t\tfor(k=j+1;k<=n;++k){\n\t\t\t\t\t\tfl=0;\n\t\t\t\t\t\tfor(l=1;l<=n;++l){\n\t\t\t\t\t\t\tif(a[l]==a[i]+a[j]+a[k]){\n\t\t\t\t\t\t\t\tfl=1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(fl==0)++tot;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tot)cout<<\"NO\\n\";\n\t\t\telse cout<<\"YES\\n\";\n\t\t}\n\t}\n} "
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. 3SUM Closure.json",
    "editorial_link": "https://codeforces.com//blog/entry/104310",
    "editorial": "Let\u00e2\u0080\u0099s consider some array which is 3SUM-closed.If the array has at least\r\nthree positive elements, consider the largest three , , and . Notice\r\nthat is strictly larger than , , and , which means that is not an\r\nelement of the array (since , , were the largest elements). Therefore\r\nthe array has positive elements.Similarly, if the array has at least\r\nthree negative elements, consider the smallest three , , and . Notice\r\nthat is strictly smaller than , , and , which means that is not an\r\nelement of the array (since , , were the smallest elements). Therefore\r\nthe array has negative elements.Finally, note that there is no point in\r\nhaving more than zeroes in the array, since any additional zeroes won\u00e2\u0080\u0099t\r\nchange the sums that can be formed. So if there are more than zeroes, we\r\ncan remove them until there are exactly .It follows that the resulting\r\narray has at most elements. This is small, so we can brute force the\r\ncondition in the problem in or time.The time complexity is or ,\r\ndepending on the implementation.\r\n"
}