{
    "link": "https://codeforces.com//contest/1581/problem/B",
    "problemId": "1125259",
    "problem_idx": "B",
    "shortId": "1581B",
    "contest_number": "1581",
    "problem_submissions": {
        "E": [
            130358132,
            130358184,
            130357795,
            130357396,
            130363906,
            130366616,
            130380883,
            130364377,
            130368000,
            130362620,
            130366569,
            130368794,
            130369661,
            130369712,
            130368935,
            130369593
        ],
        "C": [
            130344859,
            130342831,
            130347382,
            130345373,
            130344614,
            130353134,
            130351174,
            130350702,
            130351743,
            130352941,
            130352739,
            130356445,
            130357169,
            130351772,
            130355715,
            130362975,
            130356919,
            130369384,
            130361864
        ],
        "B": [
            130340369,
            130340723,
            130340571,
            130339802,
            130369559,
            130359629,
            130340447,
            130931058,
            130343832,
            130341175,
            130342532,
            130359618,
            130341192,
            130359579,
            130352120,
            130344927,
            130346716,
            130361490
        ],
        "A": [
            130338529,
            130338446,
            130338430,
            130342422,
            130338506,
            130341004,
            130338410,
            130340505,
            130339368,
            130338352,
            130339712,
            130339153,
            130338540,
            130338470,
            130338894,
            130339891,
            130340851,
            130340222,
            130339139
        ],
        "D": [
            130369924,
            130441595,
            130369549,
            130356147
        ],
        "F": [
            130356873,
            130360044,
            130368525,
            130369827,
            130370044
        ]
    },
    "name": "B. Diameter of Graph",
    "statement": "CQXYM wants to create a connected undirected graph with n nodes and m\r\nedges, and the diameter of the graph must be strictly less than k-1.\r\nAlso, CQXYM doesn\u2019t want a graph that contains self-loops or multiple\r\nedges (i.e. each edge connects two different vertices and between each\r\npair of vertices there is at most one edge).The diameter of a graph is\r\nthe maximum distance between any two nodes.The distance between two\r\nnodes is the minimum number of the edges on the path which endpoints are\r\nthe two nodes.CQXYM wonders whether it is possible to create such a\r\ngraph.\r\n",
    "solutions": [
        "#pragma GCC optimize(2)\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<map>\n#include<queue>\n#include<vector>\n#include<algorithm>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\n#define ll long long\n#define ls(_o) (_o<<1)\n#define rs(_o) ((_o<<1)|1)\n#define N 3100\n#define p 1000000007\n#define p1 998244353\n#define p2 1000000007\nusing namespace std;\nnamespace ywy{\n\tinline int get(){\n\t\tint n=0;char c;while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}n=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\t\n\t\t}s:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\t\n\t\t}\n\t}\n\tvoid ywymain(){\n\t\tint T=get(); while(T--){\n\t\t\tint n=get(),m=get(),k=get()-2;\n\t\t\tif(m<n-1||k<0){\n\t\t\t\tprintf(\"NO\\n\"); continue;\t\n\t\t\t}\n\t\t\tif(m>(ll)n*(ll)(n-1)/2){\n\t\t\t\tprintf(\"NO\\n\"); continue;\t\n\t\t\t}\n\t\t\tif(n==1){\n\t\t\t\tprintf(\"YES\\n\"); continue;\t\n\t\t\t}\n\t\t\tif(k==0){\n\t\t\t\tprintf(\"NO\\n\"); continue;\t\n\t\t\t}\n\t\t\t//<=k\n\t\t\tif(m==(ll)n*(ll)(n-1)/2){\n\t\t\t\tprintf(\"YES\\n\"); continue;\t\n\t\t\t}else{\n\t\t\t\tif(k<=1) printf(\"NO\\n\"); else printf(\"YES\\n\");\t\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tywy::ywymain();\t\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "graphs",
        "greedy",
        "math"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Diameter of Graph.json",
    "editorial_link": "https://codeforces.com//blog/entry/95477",
    "editorial": "If , the graph can\u00e2\u0080\u0099t be\nconnected, so the answer should be No. If , the graph must contaion\nmultiedges, so the answer should be No. If , the graph must be a\ncomplete graph. The diameter of the graph is . If the answer is YES,\notherwise the answer is NO. If , the graph has only one node, and its\ndiameter is . If the answer is YES, otherwise the answer is NO. If , the\ngraph must be a tree, the diameter of the tree is at least when it comes\nto each node has an edge with node . If , we can add edges on the\ncurrent tree and the diameter wouldn\u00e2\u0080\u0099t be more than . Since the graph is\nnot complete graph, the diameter is more than , the diameter is just .\nIf the answer is YES, otherwise the answer is NO. The time complexity is\n. solution\n"
}