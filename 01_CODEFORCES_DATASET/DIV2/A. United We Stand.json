{"link": "https://codeforces.com//contest/1859/problem/A", "problemId": "2156541", "problem_idx": "A", "shortId": "1859A", "contest_number": "1859", "problem_submissions": {"F": [218569170, 218581836, 218617250, 218736861, 218605159], "D": [218563678, 218527706, 218524461, 218541850, 218525597, 218533314, 218548787, 218533112, 218538546, 218539655, 218537786, 218535818, 218553386, 218535886, 218533896, 218537893, 218542381, 218547154, 218542928, 218544612], "C": [218525956, 218512705, 218513334, 218516401, 218517178, 218520064, 218534501, 218519799, 218514853, 218522631, 218518290, 218523903, 218538315, 218515860, 218520699, 218536075, 218518723, 218526393, 218525882, 218528439], "B": [218515214, 218505180, 218504011, 218503415, 218502676, 218525570, 218527334, 218505003, 218504876, 218514112, 218504039, 218506274, 218520756, 218506233, 218506628, 218509261, 218509278, 218510852, 218512080, 218508258], "E": [218512348, 218540759, 218543571, 218531440, 218546842, 218542828, 218514089, 218548356, 218551376, 218551561, 218551316, 218556871, 218531000, 218554570, 218561645, 218555675, 218563500, 218560618, 218560551, 218559090], "A": [218503604, 218499919, 218498316, 218498529, 218498173, 218498480, 218520556, 218498189, 218499252, 218502725, 218498470, 218499540, 218499799, 218500335, 218498354, 218508385, 218499358, 218498918, 218499379, 218503053]}, "name": "A. United We Stand", "statement": "Given an array a of length n, containing integers. And there are two\r\ninitially empty arrays b and c. You need to add each element of array a\r\nto of the arrays b or c, in order to satisfy the following conditions:\r\nBoth arrays b and c are non-empty. More formally, let l_b be the length\r\nof array b, and l_c be the length of array c. Then l_b, l_c\r\nge 1. For any two indices i and j (1\r\nle i\r\nle l_b, 1\r\nle j\r\nle l_c), c_j a divisor of b_i. Output the arrays b and c that can be\r\nobtained, or output -1 if they do not exist.\r\n", "solutions": ["#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt\")\n#if defined(LOCAL) or not defined(LUOGU)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast,unroll-loops\")\n#endif\n#include<bits/stdc++.h>\nusing namespace std;\n#ifdef LOCAL\n#include\"dbg.h\"\n#define dbgu(...) dbg(__VA_ARGS__)\n#else\n#define dbg(...) (__VA_ARGS__)\n#define dbgu(...)\n#endif\nnamespace Fread{const int SIZE=1<<16;char buf[SIZE],*S,*T;inline char getchar(){if(S==T){T=(S=buf)+fread(buf,1,SIZE,stdin);if(S==T)return'\\n';}return *S++;}}namespace Fwrite{const int SIZE=1<<16;char buf[SIZE],*S=buf,*T=buf+SIZE;inline void flush(){fwrite(buf,1,S-buf,stdout);S=buf;}inline void putchar(char c){*S++=c;if(S==T)flush();}struct NTR{~NTR(){flush();}}ztr;}\n#define getchar Fread::getchar\n#define putchar Fwrite::putchar\n#define Setprecision 15\n#define between '\\n'\ntemplate<typename T>struct is_char{static constexpr bool value=(std::is_same<T,char>::value||std::is_same<T,signed char>::value||std::is_same<T,unsigned char>::value);};template<typename T>struct is_integral_ex{static constexpr bool value=(std::is_integral<T>::value||std::is_same<T,__int128>::value)&&!is_char<T>::value;};template<typename T>struct is_floating_point_ex{static constexpr bool value=std::is_floating_point<T>::value||std::is_same<T,__float128>::value;};namespace Fastio{struct Reader{template<typename T>typename std::enable_if_t<std::is_class<T>::value,Reader&>operator>>(T&x){for(auto &y:x)*this>>y;return *this;}template<typename T>typename std::enable_if_t<is_integral_ex<T>::value,Reader&>operator>>(T&x){char c=getchar();short f=1;while(c<'0'||c>'9'){if(c=='-')f*=-1;c=getchar();}x=0;while(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+(c^48);c=getchar();}x*=f;return *this;}template<typename T>typename std::enable_if_t<is_floating_point_ex<T>::value,Reader&>operator>>(T&x){char c=getchar();short f=1,s=0;x=0;T t=0;while((c<'0'||c>'9')&&c!='-'&&c!='.'){if(c=='-')f*=-1;c=getchar();}while(c>='0'&&c<='9'&&c!='.')x=x*10+(c^48),c=getchar();if(c=='.')c=getchar();else return x*=f,*this;while(c>='0'&&c<='9')t=t*10+(c^48),s++,c=getchar();while(s--)t/=10.0;x=(x+t)*f;return*this;}template<typename T>typename std::enable_if_t<is_char<T>::value,Reader&>operator>>(T&c){c=getchar();while(c=='\\n'||c==' '||c=='\\r')c=getchar();return *this;}Reader&operator>>(char*str){int len=0;char c=getchar();while(c=='\\n'||c==' '||c=='\\r')c=getchar();while(c!='\\n'&&c!=' '&&c!='\\r')str[len++]=c,c=getchar();str[len]='\\0';return*this;}Reader&operator>>(std::string&str){char c=getchar();while(c=='\\n'||c==' '||c=='\\r')c=getchar();while(c!='\\n'&&c!=' '&&c!='\\r')str.push_back(c),c=getchar();return*this;}Reader(){}}cin;const char endl='\\n';struct Writer{typedef __int128 mxdouble;template<typename T>typename std::enable_if_t<std::is_class<T>::value,Writer&>operator<<(T x){for(auto &y:x)*this<<y<<between;*this<<'\\n';return *this;}template<typename T>typename std::enable_if_t<is_integral_ex<T>::value,Writer&>operator<<(T x){if(x==0)return putchar('0'),*this;if(x<0)putchar('-'),x=-x;static int sta[45];int top=0;while(x)sta[++top]=x%10,x/=10;while(top)putchar(sta[top]+'0'),--top;return*this;}template<typename T>typename std::enable_if_t<is_floating_point_ex<T>::value,Writer&>operator<<(T x){if(x<0)putchar('-'),x=-x;mxdouble _=x;x-=(T)_;static int sta[45];int top=0;while(_)sta[++top]=_%10,_/=10;if(!top)putchar('0');while(top)putchar(sta[top]+'0'),--top;putchar('.');for(int i=0;i<Setprecision;i++)x*=10;_=x;while(_)sta[++top]=_%10,_/=10;for(int i=0;i<Setprecision-top;i++)putchar('0');while(top)putchar(sta[top]+'0'),--top;return*this;}template<typename T>typename std::enable_if_t<is_char<T>::value,Writer&>operator<<(T c){putchar(c);return*this;}Writer&operator<<(char*str){int cur=0;while(str[cur])putchar(str[cur++]);return *this;}Writer&operator<<(const char*str){int cur=0;while(str[cur])putchar(str[cur++]);return*this;}Writer&operator<<(std::string str){int st=0,ed=str.size();while(st<ed)putchar(str[st++]);return*this;}Writer(){}}cout;}\n#define cin Fastio::cin\n#define cout Fastio::cout\n#define endl Fastio::endl\n#define int long long\nmain()\n{\n\tint t;\n\tcin>>t;\n\twhile(t--)\n\t{\n\t\tint n;\n\t\tcin>>n;\n\t\tvector<int>a(n);\n\t\tcin>>a;\n\t\tsort(a.begin(),a.end());\n\t\tif(*a.begin()==*a.rbegin())cout<<-1<<endl;\n\t\telse{\n\t\t\tint cnt=0;\n\t\t\tfor(auto q:a)\n\t\t\t\tif(q!=*a.rbegin())cnt++;\n\t\t\tcout<<cnt<<' '<<n-cnt<<endl;\n\t\t\tfor(auto q:a)\n\t\t\t\tif(q!=*a.rbegin())cout<<q<<' ';cout<<endl;\n\t\t\tfor(auto q:a)\n\t\t\t\tif(q==*a.rbegin())cout<<q<<' ';cout<<endl;\n\t\t}\n\t}\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "math", "number theory"], "dificulty": "800", "interactive": false}