{
    "link": "https://codeforces.com//contest/796/problem/E",
    "problemId": "102476",
    "problem_idx": "E",
    "shortId": "796E",
    "contest_number": "796",
    "problem_submissions": {
        "D": [
            26270676,
            26268879,
            26272464,
            26267846,
            26271244,
            26271502,
            26279976,
            26280757,
            26270905,
            26273570,
            26272084,
            26278210,
            26277165,
            26274914,
            26273555,
            26270674,
            26274828,
            26272225,
            26276256,
            26275870
        ],
        "C": [
            26266928,
            26275839,
            26289710,
            26263867,
            26268031,
            26268145,
            26268959,
            26275805,
            26276716,
            26267202,
            26282722,
            26266268,
            26273046,
            26271604,
            26307139,
            26307124,
            26307117,
            26306972,
            26268576,
            26276501,
            26270809,
            26275985,
            26270211,
            26272901
        ],
        "B": [
            26260444,
            26260714,
            26260928,
            26268179,
            26259754,
            26260202,
            26259813,
            26260983,
            26261840,
            26260679,
            26259761,
            26261074,
            26260940,
            26259972,
            26266557,
            26259771,
            26262157,
            26259891,
            26263590,
            26260396
        ],
        "A": [
            26258377,
            26258938,
            26258411,
            26258195,
            26258231,
            26258560,
            26258094,
            26258499,
            26258460,
            26258203,
            26258087,
            26258420,
            26258693,
            26258275,
            26258381,
            26258161,
            26258669,
            26258379,
            26260347,
            26258265
        ],
        "E": [
            26280397,
            26347598,
            26308967,
            26308953
        ],
        "F": [
            58542353
        ]
    },
    "name": "E. Exam Cheating",
    "statement": "Zane and Zane\u2019s crush have just decided to date! However, the girl is\r\nhaving a problem with her Physics final exam, and needs your help.There\r\nare questions, numbered from to . Question comes before question ().\r\nEach of the questions cannot be guessed on, due to the huge penalty for\r\nwrong answers. The girl luckily sits in the middle of two geniuses, so\r\nshe is going to cheat. However, the geniuses have limitations. Each of\r\nthem may or may not know the answers to some questions. Anyway, it is\r\nsafe to assume that the answers on their answer sheets are absolutely\r\ncorrect.To make sure she will not get caught by the proctor, the girl\r\nwill glance times, each time looking at consecutive questions on one of\r\nthe two geniuses\u2019 answer sheet. When the girl looks at some question on\r\nan answer sheet, she copies the answer to that question if it is on that\r\nanswer sheet, or does nothing otherwise.Help the girl find the maximum\r\nnumber of questions she can get correct.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nint N, P, K, R, S;\nvector<int> a, b, c, as, bs, cs;\n\nvector<vector<vector<vector<int> > > > cc;\n\nint dp(int n, int p, int k, int l) {\n\n    //cout << n << ' ' << p << ' ' << k << ' ' << l << endl;\n\n    if(n == N) return 0;\n    int &ret = cc[n][p][k][l];\n    if(ret != -1) return ret;\n\n    if(k == 0) {\n        ret = dp(n + 1, p, k, l);\n        if(p) {\n            int e = min(N - 1, n + K - 1);\n            ret = max(ret, dp(n, p - 1, e - n + 1, 1));\n            ret = max(ret, dp(n, p - 1, e - n + 1, 0));\n        }\n        return ret;\n    }\n\n    ret = (l? a[n] : b[n]) + dp(n + 1, p, k - 1, l);\n    int e = min(N - 1, n + K - 1);\n    if(p) {\n        ret = max(ret, cs[n + k - 1] - cs[n] + c[n] + dp(n + k, p - 1, e - (n + k) + 1, l^1));\n        if(e - (n + k) == 0) max(ret, cs[n + k - 1] - cs[n] + c[n] + dp(n + k, p - 1, e - (n + k) + 1, l));\n    }\n\n    return ret;\n}\n\nint main() {\n    scanf(\"%d %d %d\", &N, &P, &K);\n\n    scanf(\"%d\", &R);\n    a = vector<int>(N, 0);\n\n    for(int i = 0; i < R; i++) {\n        int t; scanf(\"%d\", &t);\n        a[--t] = 1;\n    }\n\n    scanf(\"%d\", &S);\n    b = vector<int>(N, 0);\n\n    for(int i = 0; i < S; i++) {\n        int t; scanf(\"%d\", &t);\n        b[--t] = 1;\n    }\n\n    c = vector<int>(N, 0);\n\n    for(int i = 0; i < N; i++) {\n        c[i] = a[i] | b[i];\n    }\n\n    as.resize(N);\n    for(int i = 0; i < N; i++) {\n        as[i] = a[i];\n        if(i) as[i] += as[i - 1];\n    }\n    bs.resize(N);\n    for(int i = 0; i < N; i++) {\n        bs[i] = b[i];\n        if(i) bs[i] += bs[i - 1];\n    }\n    cs.resize(N);\n    for(int i = 0; i < N; i++) {\n        cs[i] = c[i];\n        if(i) cs[i] += cs[i - 1];\n    }\n\n    cc = vector<vector<vector<vector<int> > > >(N, vector<vector<vector<int> > >(min(P + 1, 2* (N / K + 1) + 1), vector<vector<int> >(K + 1, vector<int>(2, -1))));\n    printf(\"%d\", dp(0, min(P, 2* (N / K + 1)), 0, 0));\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Exam Cheating.json",
    "editorial_link": "https://codeforces.com/blog/entry/51527",
    "editorial": "This problem can be solved using dynamic programming.First, observe that\r\nit is never suboptimal to look as many consecutive questions as\r\npossible. That is, just look consecutive questions whenever you decide\r\nto glance, unless it exceeds the corner (question ).Let denote the\r\nnumber of questions you can get correct by considering questions to by\r\nglancing exactly times with and being the number of remaining questions\r\nthat can be looked at as a benefit of the previous glances. As stated\r\nbefore, it is optimal to look as many consecutive questions as possible,\r\nso when we decide to look, we share this benefit (of looking) to the\r\nnext questions too, and it are stored in and , which denote how many of\r\nthe next consecutive questions can be looked without paying one more\r\nglance. The answer can be calculated in . (You can see in the code as to\r\nhow.)However, can be up to , so the solution will not fit in the time\r\nlimit of 2 seconds.This can be improved. Observe that if , you can look\r\nat all questions on both geniuses answer sheets, so the answer can be\r\nfound in (or you can just set to and run the dynamic programming). By\r\neliminating this case, the running time for dynamic programming will\r\nbecome = = . This, indeed, will fit in time, as is only .Problem with\r\nmemory limit might still persist, so you will need to optimize the use\r\nof memory. For example, since you need only and when calculating , you\r\ncould remember only the two last rows. The memory use will be much\r\nsmaller. The use of short data type (instead of int) may also\r\nhelp.Please see the commented code for more details.\r\n"
}