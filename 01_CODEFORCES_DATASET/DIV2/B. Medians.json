{
    "link": "https://codeforces.com//contest/2032/problem/B",
    "problemId": "2994605",
    "problem_idx": "B",
    "shortId": "2032B",
    "contest_number": "2032",
    "problem_submissions": {
        "F": [
            289267915,
            289277706,
            289232912,
            289267377,
            291314197,
            289416021
        ],
        "E": [
            289238022,
            289262776,
            289255223,
            289258448,
            289250787,
            289260574,
            289261929,
            289227660,
            289263018,
            289263597,
            289263187,
            289266715,
            289259935,
            289271752,
            289266962,
            289268830,
            289269008,
            289265714
        ],
        "D": [
            289731015,
            289233613,
            289264637,
            289214258,
            289228700,
            289223391,
            289226883,
            289280487,
            289241431,
            289231526,
            289229626,
            289234786,
            289242007,
            289228890,
            289240630,
            289239305,
            289231442,
            289232355
        ],
        "B": [
            289203679,
            289271925,
            289191670,
            289200056,
            289196726,
            289200003,
            289197742,
            289196982,
            289194362,
            289197275,
            289201147,
            289202156,
            289199141,
            289200655,
            289202275,
            289195764
        ],
        "C": [
            289193496,
            289267532,
            289198910,
            289207633,
            289201326,
            289203591,
            289285062,
            289204577,
            289220034,
            289205439,
            289204433,
            289208681,
            289194187,
            289211250,
            289206397,
            289208627,
            289215203
        ],
        "A": [
            289187421,
            289273450,
            289186675,
            289187594,
            289186664,
            289189130,
            289187996,
            289189265,
            289187088,
            289189596,
            289187843,
            289188574,
            289187095,
            289189623,
            289187877,
            289187863
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135622",
    "editorial": "For (and as well), the obvious answer would be not partitioning\r\nanything, i.e., partition with 1 subarray being itself.For , we see that\r\nand cannot yield a satisfactory construction. Proof is as follows: will\r\nyield , which will never be equal to or when . If , considering the case\r\nof , we see that iff , and since the original array is an\r\nincreasingly-sorted permutation, we can conclude that . This is not\r\npossible. Similarly, also doesn\u00e2\u0080\u0099t work with , as it\u00e2\u0080\u0099ll require . Apart\r\nfrom these cases, any other can yield an answer with a prefix subarray ,\r\na middle subarray containing ( will be centered at , of course), and a\r\nsuffix subarray . This way, the answer will be .The length of can be\r\neither or , depending on the parity of (so that and could have odd\r\nlengths). In detail: will have length (i.e., ) if is an even integer,\r\nand length (i.e., ) if is an odd integer.Time complexity: .\r\n",
    "name": "B. Medians",
    "statement": "You are given an array a = [1, 2,\r\nldots, n], where n is , and an integer k.Your task is to choose an\r\npositive integer m and to split a into m subarrays^{\r\ndagger} b_1, b_2,\r\nldots, b_m such that: Each element of the array a belongs to exactly one\r\nsubarray. For all 1\r\nle i\r\nle m, |b_i| is , i.e., the length of each subarray is odd.\r\noperatorname{median}([\r\noperatorname{median}(b_1),\r\noperatorname{median}(b_2),\r\nldots,\r\noperatorname{median}(b_m)]) = k, i.e., the median^{\r\nddagger} of the array of medians of all subarrays must equal k.\r\noperatorname{median}(c) denotes the median of the array c. ^{\r\ndagger}A subarray of the array a of length n is the array [a_l, a_{l +\r\n1},\r\nldots, a_r] for some integers 1\r\nle l\r\nle r\r\nle n.^{\r\nddagger}A median of the array of odd length is the middle element after\r\nthe array is sorted in non-decreasing order. For example:\r\noperatorname{median}([1,2,5,4,3]) = 3,\r\noperatorname{median}([3,2,1]) = 2,\r\noperatorname{median}([2,1,2,1,2,2,2]) = 2.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;// #define int long longtypedef pair<int,int> pii;#define all(x) (x).begin(),(x).end()#define fi first#define se second#define IOS ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)\u00a0void solve(){\tint n,k; cin>>n>>k;\tint l=k-1,r=n-k;\tif(l%2!=r%2) {cout<<-1<<endl; return;}\tif((!l&&r)||(!r&&l)) {cout<<-1<<endl; return;}\tif(n==1)\t{\t\tcout<<1<<endl;\t\tcout<<1<<endl;\t}\telse if(l%2==0&&r%2==0)\t{\t\tcout<<5<<endl;\t\tcout<<1<<\" \"<<k-1<<\" \"<<k<<\" \"<<k+1<<\" \"<<k+2<<endl;\t}\telse if(l%2!=0&&r%2!=0)\t{\t\tcout<<3<<endl;\t\tcout<<1<<\" \"<<k<<\" \"<<k+1<<endl;\t}}\u00a0signed main(){\tIOS;\tint T; cin>>T;\twhile(T--) solve();\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Medians.json"
}