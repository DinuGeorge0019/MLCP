{
    "link": "https://codeforces.com//contest/1625/problem/A",
    "problemId": "1258599",
    "problem_idx": "A",
    "shortId": "1625A",
    "contest_number": "1625",
    "problem_submissions": {
        "E2": [
            142492395,
            142747553,
            142585858,
            142544817,
            142543932,
            142508709,
            142559014,
            142480865
        ],
        "E1": [
            142490853,
            142508148,
            142512533,
            142504881,
            142515152,
            143087068,
            142653128,
            142500567,
            142689991,
            142545810,
            142545797,
            142545556,
            142545467,
            142545326,
            142545262,
            142501419,
            142513368,
            142559018,
            142552380,
            142479633,
            142497816,
            142524491,
            142499880,
            142624103,
            142499824,
            142519909
        ],
        "D": [
            142481572,
            142492922,
            142487953,
            142497240,
            142498374,
            143087164,
            142599139,
            142514228,
            222453996,
            222453785,
            142497243,
            142486623,
            142491954,
            142489551,
            142492232,
            142491133,
            142490435,
            142499368,
            142553310,
            142502090,
            142500746
        ],
        "C": [
            142473156,
            142474854,
            142475386,
            142485242,
            142478481,
            143087271,
            142482654,
            142476782,
            142498111,
            142474938,
            142478501,
            142483591,
            142478318,
            142477275,
            142483517,
            142478815,
            142480894,
            142480450,
            142476700,
            142479689
        ],
        "B": [
            142469531,
            142471088,
            142471096,
            142472842,
            142472506,
            143087319,
            142469913,
            142470866,
            142473066,
            142471519,
            142471936,
            142470735,
            142472744,
            142471752,
            142475933,
            142471863,
            142473722,
            142473268,
            142472289,
            142473807
        ],
        "A": [
            142468922,
            142469220,
            142469548,
            142469271,
            142469703,
            143087364,
            142471996,
            142469051,
            142470684,
            142469214,
            142469265,
            142469095,
            142469247,
            142469618,
            142469909,
            142469285,
            142470575,
            142470471,
            142470036,
            142469919
        ]
    },
    "name": "A. Ancient Civilization",
    "statement": "Martian scientists explore Ganymede, one of Jupiter\u2019s numerous moons.\r\nRecently, they have found ruins of an ancient civilization. The\r\nscientists brought to Mars some tablets with writings in a language\r\nunknown to science.They found out that the inhabitants of Ganymede used\r\nan alphabet consisting of two letters, and each word was exactly\r\nell letters long. So, the scientists decided to write each word of this\r\nlanguage as an integer from 0 to 2^{\r\nell} - 1 inclusively. The first letter of the alphabet corresponds to\r\nzero bit in this integer, and the second letter corresponds to one\r\nbit.The same word may have various forms in this language. Then, you\r\nneed to restore the initial form. The process of doing it is described\r\nbelow.Denote the between two words as the amount of positions, in which\r\nthese words differ. For example, the distance between 1001_2 and 1100_2\r\n(in binary) is equal to two, as these words have different letters in\r\nthe second and the fourth positions, counting from left to right.\r\nFurther, denote the distance between words x and y as d(x, y).Let the\r\nword have n forms, the i-th of which is described with an integer x_i.\r\nAll the x_i are not necessarily different, as two various forms of the\r\nword can be written the same. Consider some word y. Then, of the word y\r\nis equal to the sum of distances to each of the word forms, i. e. the\r\nsum d(x_i, y) over all 1\r\nle i\r\nle n.The initial form is the word y with minimal possible nearness.You\r\nneed to help the scientists and write the program which finds the\r\ninitial form of the word given all its known forms. Note that the\r\ninitial form is equal to any of the n given forms.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define rep(i,n) for (i=1;i<=(n);i++)\nusing namespace std;\nint c[105],n,i,t;\nint main(){\n\tcin>>t;int l;\n\twhile(t--){\n\t\tcin>>n>>l;\n\t\tmemset(c,0,sizeof(c));\n\t\trep(i,n){\n\t\t\tint x;cin>>x;\n\t\t\tfor(int j=0;j<l;j++) c[j]+=((x>>j)&1);\n\t\t}\n\t\tint s=0;\n\t\tfor(int j=0;j<l;j++){\n\t\t\tif(c[j]*2>n) s|=(1<<j);\n\t\t}\n\t\tcout<<s<<endl;\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Ancient Civilization.json",
    "editorial_link": "https://codeforces.com//blog/entry/99031",
    "editorial": "Note that the problem can be solved independently for each bit, as the\r\nbits don\u00e2\u0080\u0099t influence each other. Set the th bit to zero if the numbers\r\nin the array contain more zeros than ones in the th bit. Otherwise, set\r\nit to one.\r\n"
}