{
    "link": "https://codeforces.com//contest/591/problem/D",
    "problemId": "39109",
    "problem_idx": "D",
    "shortId": "591D",
    "contest_number": "591",
    "problem_submissions": {
        "D": [
            13849030,
            13845483,
            13846625,
            13849366,
            13846742,
            13847541,
            13850733,
            13843952,
            14496309,
            13916744,
            13846148,
            13844076,
            13847951,
            13846518,
            13847210
        ],
        "E": [
            13844888,
            13848550,
            13850325,
            13847620,
            13850483,
            13852225,
            13849081,
            13855294,
            13847855,
            13849171,
            14085120,
            13848100,
            13847861,
            13864861,
            13855548,
            13848696,
            13873315
        ],
        "C": [
            13840817,
            13841693,
            13843123,
            13843996,
            13844252,
            13843977,
            13844258,
            13841623,
            13842033,
            13841419,
            13842844,
            13840871,
            13844001,
            13844419,
            13842123,
            13842913,
            13839987,
            13841515
        ],
        "B": [
            13836874,
            13837226,
            13837577,
            13839154,
            13840299,
            13839256,
            13840855,
            13838649,
            13838602,
            13839245,
            13839514,
            13845021,
            13838706,
            13837719,
            13838013,
            13840455,
            13841738,
            13843079
        ],
        "A": [
            13836028,
            13836035,
            13836124,
            13837057,
            13836904,
            13836780,
            13837115,
            13836694,
            13837210,
            13836891,
            13837220,
            13837863,
            13836419,
            13836389,
            13836528,
            13836982,
            13842350,
            13836315
        ]
    },
    "name": "D. Chip  n Dale Rescue Rangers",
    "statement": "A team of furry rescue rangers was sitting idle in their hollow tree\r\nwhen suddenly they received a signal of distress. In a few moments they\r\nwere ready, and the dirigible of the rescue chipmunks hit the road.We\r\nassume that the action takes place on a Cartesian plane. The\r\nheadquarters of the rescuers is located at point , and the distress\r\nsignal came from the point .Due to Gadget’s engineering talent, the\r\nrescuers’ dirigible can instantly change its current velocity and\r\ndirection of movement at any moment and as many times as needed. The\r\nonly limitation is: the speed of the aircraft relative to the air can\r\nnot exceed meters per second.Of course, Gadget is a true rescuer and\r\nwants to reach the destination as soon as possible. The matter is\r\ncomplicated by the fact that the wind is blowing in the air and it\r\naffects the movement of the dirigible. According to the weather\r\nforecast, the wind will be defined by the vector for the nearest\r\nseconds, and then will change to . These vectors give both the direction\r\nand velocity of the wind. Formally, if a dirigible is located at the\r\npoint , while its own velocity relative to the air is equal to zero and\r\nthe wind is blowing, then after seconds the new position of the\r\ndirigible will be .Gadget is busy piloting the aircraft, so she asked\r\nChip to calculate how long will it take them to reach the destination if\r\nthey fly optimally. He coped with the task easily, but Dale is convinced\r\nthat Chip has given the random value, aiming only not to lose the face\r\nin front of Gadget. Dale has asked you to find the right answer.It is\r\nguaranteed that the speed of the wind at any moment of time is strictly\r\nless than the maximum possible speed of the airship relative to the air.\r\n",
    "solutions": [
        "#include <string>\n#include <vector>\n#include <iostream>\n#include <cstdio>\n#include <cstdint>\n#include <algorithm>\n#include <iomanip>\n#include <map>\n#include <queue>\n#include <set>\n\nusing namespace std;                                   \n\n#define PATH \"C:\\\\Users\\\\ValenKof\\\\Desktop\\\\\"\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define forn(i, n) for(int i = 0; i < (n); ++i)\n#define debug(x) std::cerr << \"DEBUG: \" << #x << \" = \" << x << std::endl\n#define mp make_pair\n#define pb push_back\n\ntemplate<typename T> inline int sz(const T& x) { return x.size(); }\ntemplate<typename T> inline void mn(T& x, const T& y) { if (y < x) x = y; }\ntemplate<typename T> inline void mx(T& x, const T& y) { if (x < y) x = y; }\n\nstruct Point {\n  double x;\n  double y;\n  \n  Point negate() const\n  { return {-x, -y}; }\n  \n  double sqr_len() const\n  { return x * x + y * y; }\n  \n  double len() const\n  { return sqrt(x * x + y * y); }\n};\n\nPoint operator-(const Point& a, const Point& b)\n{ return {a.x - b.x, a.y - b.y}; }\n\nPoint operator+(const Point& a, const Point& b)\n{ return {a.x + b.x, a.y + b.y}; }\n\nPoint operator*(const Point& a, double d)\n{ return {a.x * d, a.y * d}; }\n\nistream& operator>>(istream& istr, Point& p)\n{ return istr >> p.x >> p.y; }\n\ndouble dot(const Point& a, const Point& b)\n{ return a.x * b.x + a.y * b.y; }\n\ndouble cos(const Point& a, const Point& b)\n{ return dot(a, b) / a.len() / b.len(); }\n\ndouble sqr(double x)\n{ return x * x; }\n\nint main() {\n  // freopen(\"input.txt\", \"r\", stdin);\n  // freopen(\"output.txt\", \"w\", stdout);\n  // freopen(PATH\"in.txt\", \"r\", stdin);\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  \n  Point start, finish;\n  cin >> start >> finish;\n  double max_speed, wind_time;\n  cin >> max_speed >> wind_time;\n  Point wind1, wind2;\n  cin >> wind1 >> wind2;\n  Point goal = finish - start;\n  \n  if (goal.len() < 1e-6) {\n    cout << 0 << endl;\n    return 0;\n  }\n\n  Point finish1 = finish + wind1.negate() * wind_time;\n  if ((finish1 - start).sqr_len() < sqr(wind_time * max_speed) + 1e-7) {\n    double l = 0;\n    double r = wind_time;\n    forn (iter, 1000) {\n      double m = (l + r) / 2;\n      Point p = finish + wind1.negate() * m;\n      if ((p - start).sqr_len() < sqr(m * max_speed)) {\n        r = m;\n      } else {\n        l = m;\n      }\n    }\n    cout << fixed << setprecision(12) << r << endl;\n    return 0;\n  }\n  double l = 0;\n  double r = (finish1 - start).len() / (max_speed - wind2.len());\n  forn (iter, 100000) {\n    double m = (l + r) / 2;\n    Point p = finish1 + wind2.negate() * m;\n    if ((p - start).sqr_len() < sqr((m + wind_time) * max_speed)) {\n      r = m;\n    } else {\n      l = m;\n    }\n  }\n  cout << fixed << setprecision(12) << r + wind_time << endl;  \n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Chip  n Dale Rescue Rangers.json",
    "editorial_link": "https://codeforces.com//blog/entry/21203",
    "editorial": "If the velocity of the dirigible relative to the air is given by the vector (ax,?ay), while the velocity of the wind is (bx,?by), the resulting velocity of the dirigible relative to the plane is (ax?+?bx,?ay?+?by).\n\nThe main idea here is that the answer function is monotonous. If the dirigible is able to reach to target in  seconds, then it can do so in  seconds, for any x???0. That is an obvious consequence from the fact the maximum self speed of the dirigible is strictly greater then the speed of the wind at any moment of time.\n\nFor any monotonous function we can use binary search. Now we only need to check, if for some given value  it's possible for the dirigible to reach the target in  seconds. Let's separate the movement of the air and the movement of the dirigible in the air. The movement cause by the air is:\n\n(xn,?yn) = , if ;\n(xn,?yn) = , for .\nThe only thing we need to check now is that the distance between the point (xn,?yn) and the target coordinates (x2,?y2) can be covered moving with the speed vmax in  seconds assuming there is no wind.\n\nTime complexity is , where C stands for the maximum coordinate, ?nd ?  desired accuracy.",
    "hint": []
}