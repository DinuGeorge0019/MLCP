{"link": "https://codeforces.com//contest/260/problem/B", "problemId": "2466", "problem_idx": "B", "shortId": "260B", "contest_number": "260", "problem_submissions": {"E": [2841488], "B": [2838739, 2837191, 2837768, 2838150, 2837744, 2838786, 2837047, 2839010, 2837833, 2838337, 2844158, 2838983, 2837520, 2838783, 2837827, 2837919, 2837792], "C": [2837179, 2838563, 2839071, 2839576, 2840298, 2840963, 2838247, 2841633, 2838738, 2839728, 2840997, 2840780, 2840234, 2841680, 2838985, 2837535, 2840027, 2839622, 2839935], "A": [2836127, 2836200, 2836494, 2836347, 2836171, 2836837, 2836322, 2836732, 2836174, 2844801, 2836481, 2836407, 2837519, 2836145, 2836199, 2840135, 2836459, 2836219], "D": [2839564, 2841151, 2841269, 2843347, 2843581, 2843906, 2843880, 2840859, 2843218, 2849694, 2842890, 2847485]}, "name": "B. Ancient Prophesy", "statement": "A recently found Ancient Prophesy is believed to contain the exact\r\nApocalypse date. The prophesy is a string that only consists of digits\r\nand characters \"\".We\u2019ll say that some date is mentioned in the Prophesy\r\nif there is a substring in the Prophesy that is the date\u2019s record in the\r\nformat \"\". We\u2019ll say that the number of the date\u2019s occurrences is the\r\nnumber of such substrings in the Prophesy. For example, the Prophesy \"\"\r\nmentions date twice (first time as \"\", second time as \"\").The date of\r\nthe Apocalypse is such correct date that the number of times it is\r\nmentioned in the Prophesy is strictly larger than that of any other\r\ncorrect date.A date is correct if the year lies in the range from to ,\r\nthe month is from to , and the number of the day is strictly more than a\r\nzero and doesn\u2019t exceed the number of days in the current month. Note\r\nthat a date is written in the format \"\", that means that leading zeroes\r\nmay be added to the numbers of the months or days if needed. In other\r\nwords, date \"\" isn\u2019t recorded in the format \"\", and date \"\" is recorded\r\nin it.Notice, that any year between 2013 and 2015 is not a leap year.\r\n", "solutions": ["//program 260-B\n\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n\nusing namespace std;\n\nint Days(int Month)\n{\n  if(Month==2)\n    return 28;\n  if(Month==4||Month==6||Month==9||Month==11)\n    return 30;\n  return 31;\n}\n\nint Calc(string S)\n{\n  if(S[2]!='-'||S[5]!='-')\n    return -1;\n  for(int i=0;i<10;i++)\n    {\n      if(i==2||i==5)\n        continue;\n      if(S[i]<'0'||S[i]>'9')\n        return -1;\n    }\n  int Day=(S[0]-48)*10+(S[1]-48);\n  int Month=(S[3]-48)*10+(S[4]-48);\n  int Year=(S[6]-48)*1000+(S[7]-48)*100+(S[8]-48)*10+(S[9]-48);\n  if(Year<2013||Year>2015)\n    return -1;\n  if(Month<1||Month>12)\n    return -1;\n  if(Day<1||Day>Days(Month))\n    return -1;\n  return (Year-2013)*10000+Month*100+Day;\n}\n\nvoid Output(int X)\n{\n  putchar(X/10+48);\n  putchar(X%10+48);\n}\n\nint main()\n{\n  string S;\n  cin>>S;\n  static int Count[30000];\n  memset(Count,0,sizeof(Count));\n  for(int i=0;i+10<=S.size();i++)\n    {\n      string T=\"\";\n      for(int j=0;j<10;j++)\n        T+=S[i+j];\n      int Temp=Calc(T);\n      if(Temp!=-1)\n        Count[Temp]++;\n    }\n  int Ans=0;\n  for(int i=1;i<30000;i++)\n    if(Count[i]>Count[Ans])\n      Ans=i;\n  Output(Ans%100);\n  putchar('-');\n  Output(Ans/100%100);\n  putchar('-');\n  printf(\"%d\\n\",Ans/10000+2013);\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "implementation", "strings"], "dificulty": "1600", "interactive": false}