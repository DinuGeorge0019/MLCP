{
    "link": "https://codeforces.com//contest/144/problem/B",
    "problemId": "782",
    "problem_idx": "B",
    "shortId": "144B",
    "contest_number": "144",
    "problem_submissions": {
        "B": [
            1079685,
            1076543,
            1079898,
            1082847,
            1082735,
            1077650,
            1076828,
            1076897,
            1075703,
            1076570,
            1078583,
            1076905,
            1080333,
            1077070,
            1076919,
            1077073,
            1077426,
            1076974,
            1076783,
            1080322
        ],
        "C": [
            1079250,
            1077173,
            1076551,
            1078237,
            1077015,
            1076842,
            1077698,
            1077957,
            1077065,
            1077590,
            1079431,
            1077439,
            1075886,
            1077839,
            1077621,
            1077697,
            1075975,
            1077567,
            1077415,
            1077375
        ],
        "D": [
            1078442,
            1078477,
            1077789,
            1080084,
            1080478,
            1079868,
            1078561,
            1082477,
            1079132,
            1078573,
            1078956,
            1077881,
            1080255,
            1079060,
            1079072,
            1079853,
            1079171,
            1079213,
            1078913
        ],
        "E": [
            1077630,
            1079988,
            1080515,
            1079940,
            1081931,
            1080530,
            1097618,
            1079963,
            1082156,
            1078798,
            1082939,
            1084001,
            1083991,
            1083989
        ],
        "A": [
            1075930,
            1075624,
            1075694,
            1076063,
            1075731,
            1075713,
            1075976,
            1075788,
            1076457,
            1075616,
            1076584,
            1075746,
            1080725,
            1075619,
            1075655,
            1075636,
            1076691,
            1075720,
            1075774,
            1080649
        ]
    },
    "name": "B. Meeting",
    "statement": "The Super Duper Secret Meeting of the Super Duper Secret Military Squad\r\ntakes place in a Super Duper Secret Place. The place is an infinite\r\nplane with introduced Cartesian coordinate system. The meeting table is\r\nrepresented as a rectangle whose sides are parallel to the coordinate\r\naxes and whose vertexes are located at the integer points of the plane.\r\nAt each integer point which belongs to the table perimeter there is a\r\nchair in which a general sits.Some points on the plane contain radiators\r\nfor the generals not to freeze in winter. Each radiator is characterized\r\nby the number the radius of the area this radiator can heat. That is, if\r\nthe distance between some general and the given radiator is less than or\r\nequal to , than the general feels comfortable and warm. Here distance is\r\ndefined as Euclidean distance, so the distance between points and is\r\nEach general who is located outside the radiatorsâ€™ heating area can get\r\nsick. Thus, you should bring him a warm blanket. Your task is to count\r\nthe number of warm blankets you should bring to the Super Duper Secret\r\nPlace.The generals who are already comfortable do not need a blanket.\r\nAlso the generals never overheat, ever if they are located in the\r\nheating area of several radiators. The radiators can be located at any\r\ninteger points on the plane, even inside the rectangle (under the table)\r\nor on the perimeter (directly under some general). Even in this case\r\ntheir radius does not change.\r\n",
    "solutions": [
        "#include <string>\n#include <algorithm>\n#include <utility>\n#include <stdlib.h>\n#include <stdio.h>\n#include <vector>\n#include <iostream>\n#include <sstream>\n#include <set>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <utility>\n#include <time.h>\n#include <string.h>\nusing namespace std;\n\n\nint main( void )\n{\n\tint x0,y0,X,Y;\n\tint n;\n\n\tcin >> x0 >> y0 >> X >> Y;\n\tif( x0 > X ){ int t = x0; x0 = X; X = t; }\n\tif( y0 > Y ){ int t = y0; y0 = Y; Y = t; }\n\tX -= x0;\n\tY -= y0;\n\tcin >> n;\n\tvector<int> Rx(n), Ry(n), Rr(n);\n\tfor( int i = 0; i < n; i ++ ){\n\t\tcin >> Rx[i] >> Ry[i] >> Rr[i];\n\t\tRx[i] -= x0;\n\t\tRy[i] -= y0;\n\t\tRr[i] *= Rr[i];\n\t}\n\tint ans = 0;\n#define CHECK(xx,yy) \\\n{ \\\n\tbool OK = false; \\\n\tfor( int i = 0; i < n; i ++ ){ \\\n\t\tif( (Rx[i] - xx) * (Rx[i] - xx) + (Ry[i] - yy) * (Ry[i] - yy) <= Rr[i] ) { OK = true; break; } \\\n\t} \\\n\tif( !OK ) ++ ans; \\\n}\n\n\tfor( int x = 0; x <= X; x ++ ){\n\t\tCHECK(x,0);\n\t\tCHECK(x,Y);\n\t}\n\tfor( int y = 1; y < Y; y ++ ){\n\t\tCHECK(0,y);\n\t\tCHECK(X,y);\n\t}\n\tcout << ans << endl;\n\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Meeting.json",
    "editorial_link": "https://codeforces.com//blog/entry/3693",
    "editorial": "Let's try to check all integer points of the table perimeter and add to the answer such of them that don't cover by circles of radiators. Let xa?<?xb and ya?<?yb, and if it's not true then swap xa and xb, ya and yb. So generals sit in the next integer points: (xa,?y),?(xb,?y),?(x,?ya),?(x,?yb), where  xa???x???xb ? ya???y???yb. We should be attentive when we count the generals who sits in points: (xa,?ya),?(xa,?yb),?(xb,?ya),?(xb,?yb),  that don't count them twice.",
    "hint": []
}