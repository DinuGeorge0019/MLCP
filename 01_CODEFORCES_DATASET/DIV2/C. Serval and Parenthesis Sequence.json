{"link": "https://codeforces.com//contest/1153/problem/C", "problemId": "329968", "problem_idx": "C", "shortId": "1153C", "contest_number": "1153", "problem_submissions": {"F": [52702167, 52706102, 52706128, 52712612, 52712916, 52713472, 52705273, 53020024], "B": [52696113, 52686055, 52686525, 52695492, 52689812, 52686724, 52686280, 52688127, 52685475, 52701491, 52686741, 52698339, 52691737, 52687040, 52687523, 52688787, 52686777, 52686537, 52688504], "E": [52693078, 52699456, 52700287, 52698093, 52707544, 52707213, 52699436, 52799036, 52699341, 52698614, 52704976, 52690529, 52703713, 52700978, 52703569, 52699263, 52702855, 52704578], "C": [52688281, 52690605, 52689780, 52702384, 52693171, 52696923, 52689825, 52696486, 52688289, 52687066, 52689512, 52696924, 52687069, 52688673, 52691802, 52692527, 52691364, 52690866, 52691574], "D": [52686405, 52692724, 52692621, 52691138, 52695645, 52702315, 52692971, 52694653, 52693169, 52691270, 52695539, 52695198, 52699214, 52692631, 52695518, 52703264, 52696334, 52697661, 52695431], "A": [52684329, 52684726, 52684448, 52687427, 52684995, 52684651, 52684577, 52684221, 52684289, 52684251, 52684828, 52699079, 52689885, 52684309, 52684805, 52684271, 52684301, 52684354, 52684338]}, "name": "C. Serval and Parenthesis Sequence", "statement": "Serval soon said goodbye to Japari kindergarten, and began his life in\r\nJapari Primary School.In his favorite math class, the teacher taught him\r\nthe following interesting definitions.A is a string, containing only\r\ncharacters \"\" and \"\".A is a parenthesis sequence that can be transformed\r\ninto a correct arithmetic expression by inserting characters \"\" and \"\"\r\nbetween the original characters of the sequence. For example,\r\nparenthesis sequences \"\", \"\" are correct (the resulting expressions are:\r\n\"\", \"\"), while \"\" and \"\" are not. Note that the empty string is a\r\ncorrect parenthesis sequence by definition.We define that |s| as the\r\nlength of string s. A s[1\r\ndots l] (1\r\nleq l< |s|) of a string s = s_1s_2\r\ndots s_{|s|} is string s_1s_2\r\ndots s_l. Note that the empty string and the whole string are not strict\r\nprefixes of any string by the definition.Having learned these\r\ndefinitions, he comes up with a new problem. He writes down a string s\r\ncontaining only characters \"\", \"\" and \"\". And what he is going to do, is\r\nto replace each of the \"\" in s independently by one of \"\" and \"\" to make\r\nall strict prefixes of the new sequence not a correct parenthesis\r\nsequence, while the new sequence should be a correct parenthesis\r\nsequence.After all, he is just a primary school student so this problem\r\nis too hard for him to solve. As his best friend, can you help him to\r\nreplace the question marks? If there are many solutions, any of them is\r\nacceptable.\r\n", "solutions": ["//ihdignite\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 3e5;\n\nint n, n1, n2;\nstring s;\n\nvoid fk() {\n\tcout << \":(\";\n\texit(0);\n}\n\nint main() {\n\tios_base::sync_with_stdio(0);\n\tcin.tie(NULL);\n\n\tcin >> n >> s;\n\tif(n%2==1) {\n\t\tfk();\n\t}\n\tfor(char c : s) {\n\t\tif(c=='(')\n\t\t\t++n1;\n\t\telse if(c==')')\n\t\t\t++n2;\n\t}\n\tif(n1>n/2||n2>n/2) {\n\t\tfk();\n\t}\n\tn1=n/2-n1;\n\tfor(char &c : s) {\n\t\tif(c=='?') {\nif(n1) {\n\t--n1;\n\tc='(';\n}else\nc=')';\n\t\t}\n\t}\n\t;\n\n\tint b=0;\n\tfor(int i=0; i+1<n; ++i) {\n\t\tif(s[i]=='(')\n\t\t\t++b;\n\t\telse\n\t\t\t--b;\n\t\tif(b<=0)\n\t\t\tfk();\n\t}\n\ncout << s;\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["greedy", "strings"], "dificulty": "1700", "interactive": false}