{"link": "https://codeforces.com//contest/527/problem/B", "problemId": "24743", "problem_idx": "B", "shortId": "527B", "contest_number": "527", "problem_submissions": {"D": [10320998, 10323329, 10320418, 10316376, 10320868, 10323389, 10322440, 10320232, 10321604, 10323582, 10321959, 10322883, 10324771, 10323891, 10324342, 10325751, 10316899, 10320622], "C": [10319281, 10317608, 10318719, 10321621, 10319197, 10319745, 10320049, 10325822, 10321996, 10320609, 10320450, 10322500, 10322047, 10318021, 10323195, 10322166, 10322519, 10313548], "B": [10316733, 10315414, 10316286, 10320342, 10316974, 10315178, 10316059, 10315345, 10320022, 10315992, 10316397, 10319742, 10317580, 10315069, 10315584, 10318949, 10318891, 10343112, 10316418], "A": [10313000, 10313055, 10313796, 10312916, 10313836, 10313217, 10312846, 10312806, 10313753, 10312901, 10312783, 10313020, 10313144, 10312917, 10312793, 10312900, 10314293, 10313134], "E": [11345011]}, "name": "B. Error Correct System", "statement": "Ford Prefect got a job as a web developer for a small company that makes\r\ntowels. His current work task is to create a search engine for the\r\nwebsite of the company. During the development process, he needs to\r\nwrite a subroutine for comparing strings and of equal length to be\r\n\"similar\". After a brief search on the Internet, he learned about the\r\nbetween two strings and of the same length, which is defined as the\r\nnumber of positions in which and have different characters. For example,\r\nthe Hamming distance between words \"\" and \"\" is two, as these words\r\ndiffer in the fourth and sixth letters.Moreover, as he was searching for\r\ninformation, he also noticed that modern search engines have powerful\r\nmechanisms to correct errors in the request to improve the quality of\r\nsearch. Ford doesn\u2019t know much about human beings, so he assumed that\r\nthe most common mistake in a request is swapping two arbitrary letters\r\nof the string (not necessarily adjacent). Now he wants to write a\r\nfunction that determines which two letters should be swapped in string ,\r\nso that the Hamming distance between a new string and string would be as\r\nsmall as possible, or otherwise, determine that such a replacement\r\ncannot reduce the distance between the strings.Help him do this!\r\n", "solutions": ["#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\nconst int N = 30, L = 2e5 + 5;\nint n, ans;\nchar s[L], t[L];\nbool app[N][N];\nvector<int> pos[N];\n\ninline bool check2() {\n\tint p1, p2;\n\tbool f1 = false, f2 = false;\n\tfor (int i = 0; i <= 25; ++i)\n\t\tfor (int j = 0; j <= 25; ++j)\n\t\t\tif (i != j)\n\t\t\t\tif (app[i][j] && app[j][i]) {\n\t\t\t\t\tans -= 2;\n\t\t\t\t\tfor (int k = 0; k < n; ++k) {\n\t\t\t\t\t\tif (!f1 && s[k] - 'a' == i && t[k] - 'a' == j) {\n\t\t\t\t\t\t\tf1 = true;\n\t\t\t\t\t\t\tp1 = k;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!f2 && s[k] - 'a' == j && t[k] - 'a' == i) {\n\t\t\t\t\t\t\tf2 = true;\n\t\t\t\t\t\t\tp2 = k;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (p1 > p2) swap(p1, p2);\n\t\t\t\t\tprintf(\"%d\\n%d %d\\n\", ans, p1 + 1, p2 + 1);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\treturn false;\n}\n\ninline bool check1() {\n\tfor (int i = 0; i < n; ++i)\n\t\tif (s[i] != t[i]) {\n\t\t\tif (pos[t[i] - 'a'].size() == 0) continue;\n\t\t\tint p1 = i, p2 = pos[t[i] - 'a'][0];\n\t\t\t--ans;\n\t\t\tif (p1 > p2) swap(p1, p2);\n\t\t\tprintf(\"%d\\n%d %d\\n\", ans, p1 + 1, p2 + 1);\n\t\t\treturn true;\n\t\t}\n\treturn false;\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tscanf(\"%s%s\", s, t);\n\tfor (int i = 0; i < n; ++i)\n\t\tif (s[i] != t[i]) {\n\t\t\t++ans;\n\t\t\tapp[t[i] - 'a'][s[i] - 'a'] = true;\n\t\t\tpos[s[i] - 'a'].push_back(i);\n\t\t}\n\tif (check2()) return 0;\n\tif (check1()) return 0;\n\tprintf(\"%d\\n\", ans);\n\tputs(\"-1 -1\");\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["greedy"], "dificulty": "1500", "interactive": false}