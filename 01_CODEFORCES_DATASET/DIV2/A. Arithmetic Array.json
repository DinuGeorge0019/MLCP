{
    "link": "https://codeforces.com//contest/1537/problem/A",
    "problemId": "1020032",
    "problem_idx": "A",
    "shortId": "1537A",
    "contest_number": "1537",
    "problem_submissions": {
        "F": [
            119857657,
            119865425,
            119870905,
            119869709,
            119878489,
            119841761,
            119876881,
            119827052,
            119888747,
            119879106,
            119880915,
            119859997,
            119866305,
            119891935,
            119902585,
            119888207,
            119905201
        ],
        "E2": [
            119835892,
            119833759,
            119835378,
            119850866,
            119864462,
            119850270,
            119848823,
            119846727,
            119864146,
            119866899,
            119862789,
            119890309,
            119915102,
            119899495,
            119871715,
            119862744,
            119873692,
            119862189
        ],
        "E1": [
            119835645,
            119833327,
            119834682,
            119850640,
            119850149,
            119850091,
            119849196,
            119847381,
            119863846,
            119866683,
            119861833,
            119862580,
            119843723,
            119853461,
            119862505,
            119872582,
            119862557
        ],
        "C": [
            119829240,
            119814686,
            119839941,
            119823683,
            119824487,
            119855572,
            119826402,
            119863416,
            119822210,
            119816816,
            119835116,
            119830407,
            119824166,
            119824127,
            119821757,
            119820808,
            119828361
        ],
        "D": [
            119827244,
            119843258,
            119855094,
            119838364,
            119835110,
            119859731,
            119840938,
            119859070,
            119842821,
            119845056,
            119849019,
            119838171,
            119834738,
            119848959,
            119837547,
            119830929,
            119842836
        ],
        "B": [
            119806043,
            119808907,
            119822215,
            119810718,
            119813042,
            119826639,
            119819938,
            119868704,
            119815398,
            119811429,
            119818874,
            119840047,
            119815192,
            119806896,
            119810508,
            119848797,
            119816830
        ],
        "A": [
            119804349,
            119804485,
            119818462,
            119804932,
            119804259,
            119830936,
            119816677,
            119871286,
            119815557,
            119804275,
            119808687,
            119804663,
            119806484,
            119804635,
            119804555,
            119843057,
            119806262
        ]
    },
    "name": "A. Arithmetic Array",
    "statement": "An array b of length k is called good if its arithmetic mean is equal\r\nto 1. More formally, if\r\nfrac{b_1 +\r\ncdots + b_k}{k}=1.Note that the value\r\nfrac{b_1+\r\ncdots+b_k}{k} is not rounded up or down. For example, the array\r\n[1,1,1,2] has an arithmetic mean of 1.25, which is not equal to 1.You\r\nare given an integer array a of length n. In an operation, you can\r\nappend a integer to the end of the array. What’s the minimum number of\r\noperations required to make the array good?We have a proof that it is\r\nalways possible with finitely many operations.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <set>\n#include <queue>\n#include <random>\n#include \"map\"\ntypedef double ld;\ntypedef long long ll;\n#define all(x) x.begin(), x.end()\nusing namespace std;\nvoid solve() {\n    int n;\n    cin >> n;\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        int b;\n        cin >> b;\n        res += b;\n    }\n    res -= n;\n    if (res == 0) {\n        cout << \"0\\n\";\n    } else if (res < 0) {\n        cout << \"1\\n\";\n    } else {\n        cout << res << '\\n';\n    }\n}\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    int q;\n    cin >> q;\n    while (q--) solve();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Arithmetic Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/91381",
    "editorial": "We can notice that the optimal strategy is to put the yoyos in the\r\ncorners of the board. One solution may be checking the best distance for\r\nall pairs of corners. But, if we think a bit more, we can notice that\r\nplacing the yoyos in opposite corners the distance will always be\r\nmaximum possible (the distance always being ). So, one possible answer\r\nis to always place the first yoyo in the top-left cell and the second\r\none in the bottom-right cell. This is always optimal because, for any\r\ninitial position of Anton, the distance will still be the same (), this\r\nbeing the largest possible distance. The distance can not get larger\r\nthan that, because if we move one of the yoyos it will get closer to the\r\nother yoyo and the distance will decrease by or wonât decrease, but itâs\r\nimpossible for it to increase.\r\n",
    "hint": []
}