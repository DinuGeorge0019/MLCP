{
    "link": "https://codeforces.com//contest/2063/problem/D",
    "problemId": "3154905",
    "problem_idx": "D",
    "shortId": "2063D",
    "contest_number": "2063",
    "problem_submissions": {
        "F2": [
            302425610,
            302451940,
            302442929,
            302441504,
            302438014,
            302448830,
            302447651,
            302449239,
            302451441,
            302441520,
            302449441,
            302462040,
            302527079
        ],
        "C": [
            302417331,
            302388966,
            302380666,
            302386796,
            302391515,
            302388488,
            302384390,
            302383854,
            302392461,
            302390039,
            302389493,
            302385787,
            302379767,
            302392628,
            302382228,
            302388334,
            302383676,
            302394839,
            302388632,
            302391072
        ],
        "D": [
            302412152,
            302402949,
            302396428,
            302402633,
            302409161,
            302404535,
            302411549,
            302409325,
            302409501,
            302412675,
            302403620,
            302420625,
            302411254,
            302422339,
            302414704,
            302406132,
            302417532,
            302411171,
            302418058,
            302418384
        ],
        "E": [
            302404720,
            302395352,
            302418668,
            302414791,
            302422680,
            302426848,
            302421742,
            302427528,
            302428407,
            302458083,
            302451720,
            302434097,
            302422758,
            302403323,
            302431883,
            302433354,
            302432981,
            302436125,
            302427678,
            302431985
        ],
        "F1": [
            302388355,
            302424887,
            302442481,
            302433761,
            302438421,
            302445686,
            302447198,
            302443757,
            302450796,
            302427723,
            302449982,
            302451319,
            302436505,
            302455100,
            302448501,
            302454721,
            302454623,
            302448067,
            302454995,
            302448498
        ],
        "B": [
            302385897,
            302389386,
            302371425,
            302391237,
            302379321,
            302378690,
            302373741,
            302377026,
            302378459,
            302385735,
            302370221,
            302376737,
            302372000,
            302386149,
            302374530,
            302374437,
            302376025,
            302383492,
            302381557,
            302378496
        ],
        "A": [
            302374954,
            302366962,
            302363313,
            302365021,
            302366134,
            302366042,
            302365897,
            302366966,
            302363934,
            302362493,
            302362600,
            302366245,
            302365093,
            302367784,
            302363061,
            302365428,
            302365621,
            302368569,
            302369401,
            302377605
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/138593",
    "editorial": "Whenever the operation is performed, your score increases by or , where\r\n, are the indices you choose two points on (WLOG or , but this\r\nassumption is not necessary). For simplicity, we will call an operation\r\nwhere you choose two on \"Operation A\", and those where you choose two on\r\n\"Operation B\".Let us define a function as the maximum score after\r\nperforming \"Operation A\" times and \"Operation B\" times, assuming it is\r\npossible. Then, it is not hard to prove that equates to the following\r\nvalue:Here, and are sorted versions of and . The proof is left as a\r\npractice for the reader; if you want a rigorous proof, an approach using\r\nthe rearrangement inequality might help you.Then, assuming the value is\r\nalways chosen so that the operations can be performed, the value of will\r\nbe as follows.Now we have two questions to ask ourselves: For what\r\nvalues of is it impossible to perform the operations? How do we maximize\r\nthis value? The first is relatively easier. We first return to the\r\ndefinition of , and find specific inequalities from it.Then, exactly\r\nfour inequalities can be found as follows: , because otherwise we will\r\nuse more than points on ; , because otherwise we will use more than\r\npoints on ; , trivially; , also trivially. Assigning and to and for each\r\ninequality, we get the following four inequalities: ; ; ; . Compiling\r\nall four inequalities into one inequality, we get the following.So now\r\nwe can easily judge if the operations can be performed for some value .\r\nAlso, it is easy to see that when the lefthand bound exceeds the\r\nrighthand bound, it is impossible to perform operations. Thus, here we\r\ncan derive . Though it is easy to find a closed form for , it is not\r\nrequired for this problem.Now for the next question. Naively computing\r\nthe values for every in the range for all takes us time. How to do it\r\nfaster?Again, go back to the definition of . Observe that the value\r\ndependent on is a prefix sum of a sequence, and thus is convex.\r\nLikewise, the value dependent on is also convex. So, given that is a sum\r\nof two convex functions of , is just another convex function of . Thus,\r\nas we already know the range of , we can perform a ternary search on the\r\nrange. Note that we are doing ternary search on integers and not on real\r\nvalues, so you might need to take extra care of off-by-one errors.There\r\nare other ways to solve this task (also relying a lot on the convexity),\r\nlike doing binary search instead of ternary search, or performing two\r\npointers for and . Anyways, the time complexity is , bounded below by\r\ntime complexity of sorting.\r\n",
    "name": "D. Game With Triangles",
    "statement": "There are n+m distinct points (a_1,0), (a_2,0),\r\nldots, (a_{n},0), (b_1,2), (b_2,2),\r\nldots, (b_{m},2) on the plane. Initially, your score is 0. To increase\r\nyour score, you can perform the following operation: Choose three\r\ndistinct points which are not collinear; Increase your score by the area\r\nof the triangle formed by these three points; Then, erase the three\r\npoints from the plane. Let k_{\r\nmax} be the maximum number of operations that can be performed. For\r\nexample, if it is impossible to perform any operation, k_\r\nmax is 0. Additionally, define f(k) as the maximum possible score\r\nachievable by performing the operation . Here, f(k) is defined for all\r\nintegers k such that 0\r\nle k\r\nle k_{\r\nmax}.Find the value of k_{\r\nmax}, and find the values of f(x) for all integers x=1,2,\r\nldots,k_{\r\nmax} independently.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define ll long longusing namespace std;long long read(){    long long x=0,f=1;char ch=getchar();    while(!isdigit(ch))    {if(ch=='-') f=-1;ch=getchar();}    while(isdigit(ch)){x=x*10+ch-48;ch=getchar();}    return x*f;}void write(long long x){    if(x<0) putchar('-'),x=-x;    if(x>9) write(x/10);    putchar(x%10+'0');}const int N=2e5+10;int T,n,m;ll a[N],b[N],f[N],g[N],ans[N];int aska(int x){    return a[n-x+1]-a[x];}int askb(int x){    return b[m-x+1]-b[x];}int main(){    //freopen(\".in\",\"r\",stdin);    //freopen(\".out\",\"w\",stdout);    T=read();    while(T--){        n=read();m=read();        for(int i=1;i<=n;i++){            a[i]=read();        }        for(int i=1;i<=m;i++){            b[i]=read();        }        sort(a+1,a+n+1);        sort(b+1,b+m+1);        for(int i=1;i<=n/2;i++){            f[i]=f[i-1]+a[n-i+1]-a[i];        }        for(int i=1;i<=m/2;i++){            g[i]=g[i-1]+b[m-i+1]-b[i];        }        int xa=0,ya=n,xb=0,yb=m;        int mk=0;        for(int i=0;i*2<=n&&i<=m;i++){            mk=max(mk,i+min(n-i*2,(m-i)/2));        }        for(int i=1;i<=mk;i++){            ans[i]=ans[i-1];            if(xa*2+2+xb<=n&&xb*2+xa+1<=m&&xb*2+2+xa<=m&&xa*2+xb+1<=n){                if(aska(xa+1)<askb(xb+1)){                    ans[i]+=askb(xb+1);                    xb++;                }                else{                    ans[i]+=aska(xa+1);                    xa++;                }            }            else if(xa*2+2+xb<=n&&xb*2+xa+1<=m){                ans[i]+=a[n-(xa+1)+1]-a[(xa+1)];                xa++;            }            else if(xb*2+2+xa<=m&&xa*2+xb+1<=n){                ans[i]+=b[m-(xb+1)+1]-b[(xb+1)];                xb++;            }            else if(xa*2+4+xb-1<=n&&xb){                int v1=aska(xa+1)+aska(xa+2)-askb(xb);                int v2=askb(xb+1)+askb(xb+2)-aska(xa);                ans[i]+=v1;xa+=2;xb--;                // printf(\"i=%d %lld,%lld,%lld\\n\",i,aska(xa+1),aska(xa+2),askb(xb));            }            else if(xb*2+4+xa-1<=m&&xa){                int v1=aska(xa+1)+aska(xa+2)-askb(xb);                int v2=askb(xb+1)+askb(xb+2)-aska(xa);                ans[i]+=v2;xb+=2;xa--;                // printf(\"flasei=%d \\n\",i);            }        }        printf(\"%d\\n\",mk);        for(int i=1;i<=mk;i++){            printf(\"%lld \",ans[i]);        }        puts(\"\");    }    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "geometry",
        "greedy",
        "math",
        "ternary search",
        "two pointers"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Game With Triangles.json",
    "hint": [
        "Hint The maximum score after performing times with two points on , and times with two points on , can be easily computed in time. But naively checking all possible number of operations takes time. Is there a property we can abuse so that we can solve for each faster?"
    ]
}