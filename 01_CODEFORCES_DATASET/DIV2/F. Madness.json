{
    "link": "https://codeforces.com//contest/822/problem/F",
    "problemId": "112705",
    "problem_idx": "F",
    "shortId": "822F",
    "contest_number": "822",
    "problem_submissions": {
        "F": [
            28226477,
            28227833,
            28234485,
            121378904,
            28235297,
            28231678,
            28231485,
            28258361
        ],
        "D": [
            28220361,
            28241973,
            28222879,
            28224886,
            28220519,
            28218772,
            28221801,
            28232006,
            28222390,
            28222910,
            28223049,
            28223706,
            28222751,
            28223008,
            28223545,
            28225049,
            30808892,
            30808809,
            30775148,
            30775133,
            28260630,
            28260627,
            28260623,
            28260619,
            28260616,
            28222313,
            28221933,
            28223249,
            28222763
        ],
        "C": [
            28217855,
            28220105,
            28229992,
            28218508,
            28216902,
            28218827,
            28229058,
            28219916,
            28218406,
            28233624,
            28219679,
            28219443,
            28243847,
            28242189,
            28220976,
            28220363,
            28217221,
            28234024,
            28220512,
            28220807
        ],
        "B": [
            28215617,
            28217499,
            28217671,
            28215623,
            28216740,
            28215319,
            28227052,
            28216354,
            28215387,
            28712598,
            28216046,
            28216098,
            28217782,
            28218866,
            28215991,
            28217059,
            28215364,
            28224742,
            28216904,
            28216277
        ],
        "A": [
            28213695,
            28241921,
            28215982,
            28214402,
            28213808,
            28213653,
            28225926,
            28213772,
            28213642,
            28213882,
            28213766,
            28213670,
            28216840,
            28213795,
            28214218,
            28213662,
            28224209,
            28214112,
            28214126
        ],
        "E": [
            28265504,
            28265214,
            28263196,
            28263185,
            28262827,
            28262769,
            28261419,
            28261271,
            28261020,
            28248181,
            28229657,
            28474980,
            28225496,
            104050719,
            28227963,
            28248236,
            28295336,
            28271106
        ]
    },
    "name": "F. Madness",
    "statement": "The second semester starts at the University of Pavlopolis. After\r\nvacation in Vi kopolis Noora needs to return to Pavlopolis and continue\r\nher study.Sometimes (or quite often) there are teachers who do not like\r\nyou. Incidentally Noora also has one such teacher. His name is Yury\r\nDmitrievich and he teaches graph theory. Yury Dmitrievich doesn’t like\r\nNoora, so he always gives the girl the most difficult tasks. So it\r\nhappened this time.The teacher gives Noora a tree with vertices.\r\nVertices are numbered with integers from to . The length of all the\r\nedges of this tree is . Noora chooses a set of simple paths that\r\npairwise don’t intersect in edges. However each vertex should belong to\r\nat least one of the selected path.For each of the selected paths, the\r\nfollowing is done: We choose one edge that belongs to the path. On the\r\nselected edge there is a point at some selected distance from the vertex\r\nand at distance from vertex . But the distance chosen by Noora\r\narbitrarily, i. e. it can be different for different edges. One of the\r\nvertices or is selected. The point will start moving to the selected\r\nvertex. Let us explain how the point moves by example. Suppose that the\r\npath consists of two edges and , the point initially stands on the edge\r\nand begins its movement to the vertex . Then the point will reach , then\r\n\"turn around\", because the end of the path was reached, further it will\r\nmove in another direction to vertex , then to vertex , then \"turn\r\naround\" again, then move to and so on. The speed of the points is edge\r\nper second. For example, for second the point moves to the length of the\r\nhalf of an edge.A stopwatch is placed at each vertex of the tree. The\r\ntime that the stopwatches indicate at start time is seconds. Then at the\r\nstarting moment of time, all points simultaneously start moving from the\r\nselected positions to selected directions along the selected paths, and\r\nstopwatches are simultaneously started. When one of the points reaches\r\nthe vertex , the stopwatch at the vertex is automatically reset, i.e. it\r\nstarts counting the time from zero.Denote by the maximal time that the\r\nstopwatch at the vertex will show if the point movement continues\r\ninfinitely. Noora is asked to select paths and points on them so that is\r\nas minimal as possible. If there are several solutions to do this, it is\r\nnecessary to minimize , then , .Help Noora complete the teacher’s\r\ntask.For the better understanding of the statement, see the explanation\r\nfor the example.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nint N;\nstd::vector <std::pair <int, int>> edge[110];\n\nvoid dfs (int x, int f, double len) {\n\tdouble step = 2. / (edge[x].size ());\n\tdouble cur = len;\n\tfor (int i = 0; i < edge[x].size (); ++i) {\n\t\tif (edge[x][i].first == f) continue;\n\t\tprintf (\"1 %d \", edge[x][i].second + 1);\n\t\tcur += step;\n\t\tif (cur > 1.) cur -= 2.;\n\t\tif (cur >= 0.) {\n\t\t\tprintf (\"%d %d %.10lf\\n\", x, edge[x][i].first, cur);\n\t\t} else {\n\t\t\tprintf (\"%d %d %.10lf\\n\", edge[x][i].first, x, 1 + cur);\n\t\t}\n\t\tdfs (edge[x][i].first, x, cur >= 0. ? cur - 1. : cur + 1.);\n\t}\n}\n\nint main () {\n\tstd::ios::sync_with_stdio (0);\n\tstd::cin >> N;\n\tfor (int i = 0; i < N - 1; ++i) {\n\t\tint u, v;\n\t\tstd::cin >> u >> v;\n\t\tedge[u].push_back (std::make_pair (v, i));\n\t\tedge[v].push_back (std::make_pair (u, i));\n\t}\n\tprintf (\"%d\\n\", N - 1);\n\tdfs (1, -1, 0.0);\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "trees"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Madness.json",
    "editorial_link": "https://codeforces.com//blog/entry/53068?locale=en",
    "editorial": "Firstly letâs notice the fact that in the optimal answer each of the\r\npaths consists of exactly one edge.Letâs choose one particular vertex.\r\nLetâs the degree of this vertex is . The most optimal answer for this\r\nvertex is , because one point make a full loop of the edge in seconds.\r\nVetrex with the degree has exactly adjacent edges. Consequentally\r\ndistinct points will visit this vertex. Therefore in the optimal answer\r\nwe should select all the starting positions and directions in such way\r\nthat they visit the vertex each seconds.Let us show that we are able to\r\nselect starting positions and directions so that the answer for every\r\nvertex is the optimal one.Letâs put points at the moment of time between\r\nand instead of putting somewhere on the edge. The moment of time between\r\nand will correspond to the coordinates from to in the direction from the\r\nvertex and the moment of time between and will correspond to the\r\ncoordinates from to in the direction to the vertex. Letâs select a root\r\namong the tree vertices. Letâs consider a case of the root. If there are\r\nadjacent edges we can put a point at seconds on the first edge, at\r\nseconds on the second edge, at on the third edge, ..., at on the edge\r\nnumber .Run the Depth First Search from the root (or Breadth First\r\nSearch). Letâs consider a case of another vertices. All these vertices\r\nwill have a particular moment of time for the point in the upper edge.\r\ndenotes this moment. So if the vertex degree is then the moments on the\r\nlower edges should be equal to (here if the value exceeds , we calculate\r\nit modulo , i.e. ), where is the number of lower edge. The lower edges\r\nare numbered from to .All in all, we are able to put points on every\r\nedge so that the answers for each vertex are the optimal one.Total\r\ncomplexity is .\r\n",
    "hint": []
}