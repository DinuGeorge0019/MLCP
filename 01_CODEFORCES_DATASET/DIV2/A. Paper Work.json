{
    "link": "https://codeforces.com//contest/250/problem/A",
    "problemId": "2291",
    "problem_idx": "A",
    "shortId": "250A",
    "contest_number": "250",
    "problem_submissions": {
        "D": [
            2661219,
            2661302,
            2661169,
            2662484,
            2661663,
            2661650,
            2663624,
            2661614,
            2662775,
            2662098,
            2661832,
            2662182,
            2662202,
            2662743,
            2662343,
            2662306
        ],
        "E": [
            2660453,
            2662495,
            2662431,
            2662896,
            2662159,
            2663414,
            2662356,
            2666687,
            2663326,
            3224559
        ],
        "C": [
            2659482,
            2660436,
            2660472,
            2658939,
            2660327,
            2660252,
            2659990,
            2660985,
            2659709,
            2660447,
            2660653,
            2678663,
            2660908,
            2661315,
            2660197,
            2661069,
            2661058
        ],
        "B": [
            2659124,
            2659956,
            2659963,
            2660324,
            2659809,
            2659468,
            2659350,
            2660518,
            2660539,
            2659612,
            2660025,
            2660108,
            2659586,
            2659566,
            2660019,
            2659920
        ],
        "A": [
            2658537,
            2658807,
            2658632,
            2658949,
            2658816,
            2658618,
            2658590,
            2658601,
            2658691,
            2658849,
            2658966,
            2659142,
            2658749,
            2658817,
            2659154,
            2658983
        ]
    },
    "name": "A. Paper Work",
    "statement": "Polycarpus has been working in the analytic department of the\r\n\"F.R.A.U.D.\" company for as much as days. Right now his task is to make\r\na series of reports about the company’s performance for the last days.\r\nWe know that the main information in a day report is value , the\r\ncompany’s profit on the -th day. If is negative, then the company\r\nsuffered losses on the -th day.Polycarpus should sort the daily reports\r\ninto folders. Each folder should include data on the company’s\r\nperformance for several consecutive days. Of course, the information on\r\neach of the days should be exactly in one folder. Thus, Polycarpus puts\r\ninformation on the first few days in the first folder. The information\r\non the several following days goes to the second folder, and so on.It is\r\nknown that the boss reads one daily report folder per day. If one folder\r\nhas three or more reports for the days in which the company suffered\r\nlosses , he loses his temper and his wrath is terrible.Therefore,\r\nPolycarpus wants to prepare the folders so that none of them contains\r\ninformation on three or more days with the loss, and the number of\r\nfolders is minimal.Write a program that, given sequence , will print the\r\nminimum number of folders.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cctype>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <map>\n#include <set>\n#include <sstream>\nusing namespace std;\n\n#define PB push_back\n#define MP make_pair\n\n#define FOR(it,a) for (__typeof((a).begin()) it=(a).begin();it!=(a).end();++it)\n#define sqr(x) ((x)*(x))\n#define lowbit(x) ((x)&(-(x)))\n\nconst double pi\t\t=\tacos(-1.0);\nconst double eps\t=\t1e-8;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef pair<int,int> PII;\ntypedef vector<int> VI;\ntypedef vector<string> VS;\n\ninline int sign(double x)\n{\n\tif (x<-eps) return -1;\n\treturn x>eps;\n}\n\nstruct Tpoint\n{\n\tdouble x,y;\n\tTpoint(){}\n\tTpoint(double x,double y):x(x),y(y){}\n\tinline double norm(){return sqrt(x*x+y*y);}\n\tinline void rotate(double ang)\n\t{\n\t\tdouble co=cos(ang),si=sin(ang);\n\t\tdouble tx=x,ty=y;\n\t\tx=tx*co-ty*si;\n\t\ty=tx*si+ty*co;\n\t}\n};\n\ninline Tpoint operator +(const Tpoint &a,const Tpoint &b){return Tpoint(a.x+b.x,a.y+b.y);}\ninline Tpoint operator -(const Tpoint &a,const Tpoint &b){return Tpoint(a.x-b.x,a.y-b.y);}\ninline Tpoint operator *(const Tpoint &a,const double &b){return Tpoint(a.x*b,a.y*b);}\ninline Tpoint operator /(const Tpoint &a,const double &b){return Tpoint(a.x/b,a.y/b);}\ninline double det(const Tpoint &a,const Tpoint &b){return a.x*b.y-a.y*b.x;}\ninline double dot(const Tpoint &a,const Tpoint &b){return a.x*b.x+a.y*b.y;}\n//================================\n\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tint cnt=0;\n\tVI a(1,0);\n\tfor (int i=0;i<n;++i){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tif (x<0){\n\t\t\t ++cnt;\n\t\t}\n\t\tif (cnt<3){\n\t\t\ta.back()++;\n\t\t}else{\n\t\t\ta.push_back(1);\n\t\t\tcnt=1;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",a.size());\n\tFOR (it,a){\n\t\tprintf(\"%d \",*it);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Paper Work.json",
    "editorial_link": "https://codeforces.com//blog/entry/5973",
    "editorial": "For every folder you should take reports as much as possible. In other words, you should stop forming a folder either before the third bad report or in the end of sequence. You can easily prove that this strategy is optimal. This solution works in O(n).",
    "hint": []
}