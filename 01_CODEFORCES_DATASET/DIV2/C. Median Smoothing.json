{
    "link": "https://codeforces.com//contest/591/problem/C",
    "problemId": "39108",
    "problem_idx": "C",
    "shortId": "591C",
    "contest_number": "591",
    "problem_submissions": {
        "D": [
            13849030,
            13845483,
            13846625,
            13849366,
            13846742,
            13847541,
            13850733,
            13843952,
            14496309,
            13916744,
            13846148,
            13844076,
            13847951,
            13846518,
            13847210
        ],
        "E": [
            13844888,
            13848550,
            13850325,
            13847620,
            13850483,
            13852225,
            13849081,
            13855294,
            13847855,
            13849171,
            14085120,
            13848100,
            13847861,
            13864861,
            13855548,
            13848696,
            13873315
        ],
        "C": [
            13840817,
            13841693,
            13843123,
            13843996,
            13844252,
            13843977,
            13844258,
            13841623,
            13842033,
            13841419,
            13842844,
            13840871,
            13844001,
            13844419,
            13842123,
            13842913,
            13839987,
            13841515
        ],
        "B": [
            13836874,
            13837226,
            13837577,
            13839154,
            13840299,
            13839256,
            13840855,
            13838649,
            13838602,
            13839245,
            13839514,
            13845021,
            13838706,
            13837719,
            13838013,
            13840455,
            13841738,
            13843079
        ],
        "A": [
            13836028,
            13836035,
            13836124,
            13837057,
            13836904,
            13836780,
            13837115,
            13836694,
            13837210,
            13836891,
            13837220,
            13837863,
            13836419,
            13836389,
            13836528,
            13836982,
            13842350,
            13836315
        ]
    },
    "name": "C. Median Smoothing",
    "statement": "A schoolboy named Vasya loves reading books on programming and\r\nmathematics. He has recently read an encyclopedia article that described\r\nthe method of (or median filter) and its many applications in science\r\nand engineering. Vasya liked the idea of the method very much, and he\r\ndecided to try it in practice.Applying the simplest variant of median\r\nsmoothing to the sequence of numbers will result a new sequence obtained\r\nby the following algorithm: , , that is, the first and the last number\r\nof the new sequence match the corresponding numbers of the original\r\nsequence. For value is equal to the of three values , and . The of a set\r\nof three numbers is the number that goes on the second place, when these\r\nthree numbers are written in the non-decreasing order. For example, the\r\nmedian of the set 5, 1, 2 is number 2, and the median of set 1, 0, 1 is\r\nequal to 1.In order to make the task easier, Vasya decided to apply the\r\nmethod to sequences consisting of zeros and ones only.Having made the\r\nprocedure once, Vasya looked at the resulting sequence and thought: what\r\nif I apply the algorithm to it once again, and then apply it to the next\r\nresult, and so on? Vasya tried a couple of examples and found out that\r\nafter some number of median smoothing algorithm applications the\r\nsequence can stop changing. We say that the sequence is , if it does not\r\nchange when the median smoothing is applied to it.Now Vasya wonders,\r\nwhether the sequence always eventually becomes stable. He asks you to\r\nwrite a program that, given a sequence of zeros and ones, will determine\r\nwhether it ever becomes stable. Moreover, if it ever becomes stable,\r\nthen you should determine what will it look like and how many times one\r\nneeds to apply the median smoothing algorithm to initial sequence in\r\norder to obtain a stable one.\r\n",
    "solutions": [
        "#include <string>\n#include <vector>\n#include <iostream>\n#include <cstdio>\n#include <cstdint>\n#include <algorithm>\n#include <iomanip>\n#include <map>\n#include <queue>\n#include <set>\n\nusing namespace std;                                   \n\n#define PATH \"C:\\\\Users\\\\ValenKof\\\\Desktop\\\\\"\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define forn(i, n) for(int i = 0; i < (n); ++i)\n#define debug(x) std::cerr << \"DEBUG: \" << #x << \" = \" << x << std::endl\n#define mp make_pair\n#define pb push_back\n\ntemplate<typename T> inline int sz(const T& x) { return x.size(); }\ntemplate<typename T> inline void mn(T& x, const T& y) { if (y < x) x = y; }\ntemplate<typename T> inline void mx(T& x, const T& y) { if (x < y) x = y; }\n\nconst int N = 500000;\n\nint a[N];\n\nint main() {\n  // freopen(\"input.txt\", \"r\", stdin);\n  // freopen(\"output.txt\", \"w\", stdout);\n  // freopen(PATH\"in.txt\", \"r\", stdin);\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  int n;\n  cin >> n;\n  forn (i, n) {\n    cin >> a[i];\n  }\n  vector<int> begins;\n  vector<int> ends;\n  begins.push_back(0);  \n  for (int i = 0; i < n; ) {\n    int j = i;\n    while (j < n && a[i] == a[j]) {\n      j++;\n    }\n    if (j - i >= 2) {\n      ends.pb(i);\n      begins.pb(j - 1);\n    }\n    i = j;\n  }\n  ends.push_back(n - 1);\n  int ans = 0;\n  forn (i, sz(begins)) {\n    int len = ends[i] - begins[i] + 1;\n    if (len >= 2) {\n        mx(ans, (len - 1) /2);\n        int cnt = (len + 1) / 2;\n        int x = a[begins[i]];\n        int y = a[ends[i]];\n        fill(a + begins[i], a + begins[i] + cnt, x);\n        fill(a + ends[i] + 1 - cnt, a + ends[i] + 1, y);\n    }\n  }\n  cout << ans << '\\n';\n  forn (i, n) {\n    cout << a[i] << ' ';\n  }\n  cout << endl;\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Median Smoothing.json",
    "editorial_link": "https://codeforces.com//blog/entry/21203",
    "editorial": "We will call the element of a sequence stable, if it doesn't change after applying the algorithm of median smoothing for any number of times. Both ends are stable by the definition of the median smoothing. Also, it is easy to notice, that two equal consecutive elements are both stable.\n\nNow we should take a look at how do stable elements affect their neighbors. Suppose ai?-?1?=?ai, meaning i?-?1 and i are stable. Additionaly assume, that ai?+?1 is not a stable element, hence ai?+?1???ai and ai?+?1???ai?+?2. Keeping in mind that only 0 and 1 values are possible, we conclude that ai?=?ai?+?2 and applying a median smoothing algorithm to this sequence will result in ai?=?ai?+?1. That means, if there is a stable element in position i, both i?+?1 and i?-?1 are guaranteed to be stable after one application of median smoothing. Now we can conclude, that all sequences will turn to stable at some point.\n\nNote, that if there are two stable elements i and j with no other stable elements located between them, the sequence of elements between them is alternating, i.e. ak?=?(ai?+?k?-?i)mod2, where . One can check, that stable elements may occur only at the ends of the alternating sequence, meaning the sequence will remain alternating until it will be killed by effect spreading from ending stable elements.\n\nThe solution is: calculate max(min(|i?-?sj|)), where sj are the initial stable elements. Time complexity is O(n).",
    "hint": []
}