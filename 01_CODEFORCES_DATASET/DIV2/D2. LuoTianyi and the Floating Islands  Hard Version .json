{
    "link": "https://codeforces.com//contest/1825/problem/D2",
    "problemId": "1909756",
    "problem_idx": "D2",
    "shortId": "1825D2",
    "contest_number": "1825",
    "problem_submissions": {
        "D1": [
            205098688,
            205101217,
            205100501,
            205098085,
            205105358,
            205106691,
            205097320,
            205101458,
            205101211,
            205102125,
            205103728,
            205102249,
            205106340,
            205105928,
            205101924,
            205105249,
            205105719,
            205103742,
            205103072,
            205109754
        ],
        "D2": [
            205098621,
            205101261,
            205100547,
            205107217,
            205105435,
            205173465,
            205106414,
            205109037,
            205107008,
            205108684,
            205105267,
            205107641,
            205106928,
            205108946,
            205109909,
            213433020,
            205105391,
            205107707,
            205184919,
            205108051,
            205106347,
            205107832,
            205114205
        ],
        "C": [
            205096242,
            205095032,
            205091245,
            205092408,
            205094374,
            205094650,
            205092981,
            205094950,
            205095388,
            205097859,
            205092688,
            205095415,
            205092193,
            205097135,
            205097614,
            205099450,
            205098808,
            205088004,
            205106824,
            205095380
        ],
        "B": [
            205093377,
            205085123,
            205089166,
            205085761,
            205087791,
            205086427,
            205087169,
            205088420,
            205087106,
            205087675,
            205085814,
            205086933,
            205087152,
            205089093,
            205086378,
            205083686,
            205091949,
            205097416,
            205089403,
            205087179
        ],
        "A": [
            205081314,
            205078338,
            205079019,
            205079835,
            205080709,
            205079855,
            205080562,
            205080265,
            205078425,
            205081350,
            205081019,
            205079877,
            205079523,
            205078495,
            213433083,
            205079154,
            205079009,
            205079859,
            205091489,
            205080325,
            205079396
        ],
        "E": [
            205276652,
            205175537,
            205175154
        ]
    },
    "name": "D2. LuoTianyi and the Floating Islands  Hard Version ",
    "statement": "LuoTianyi now lives in a world with n floating islands. The floating\r\nislands are connected by n-1 undirected air routes, and any two of them\r\ncan reach each other by passing the routes. That means, the n floating\r\nislands form a tree.One day, LuoTianyi wants to meet her friends:\r\nChtholly, Nephren, William, .... Totally, she wants to meet k people.\r\nShe doesnâ€™t know the exact positions of them, but she knows that they\r\nare in islands. She define an island is if and only if the sum of the\r\ndistances^{\r\ndagger} from it to the islands with k people is the minimal among all\r\nthe n islands.Now, LuoTianyi wants to know that, if the k people are\r\nrandomly set in k distinct of the n islands, then what is the expect\r\nnumber of the good islands? You just need to tell her the expect number\r\nmodulo 10^9+7.^{\r\ndagger}The distance between two islands is the minimum number of air\r\nroutes you need to take to get from one island to the other.\r\n",
    "solutions": [
        "#pragma GCC optimize(\"Ofast,unroll-loops\")\n#pragma GCC target(\"avx,avx2,fma\")\n#include<bits/stdc++.h>\n#define int long long\nconst int N=2e5+5,M=305,mod=1e9+7;\nusing namespace std;\nint n,k,ans,s,siz[N],fac[N],inv[N];\nbasic_string<int>e[N];\nint ksm(int a,int b){int res=1;for(;b;b>>=1,a=a*a%mod)if(b&1)res=res*a%mod;return res;}\nint C(int m,int n){if(n>m)return 0;return fac[m]*inv[n]%mod*inv[m-n]%mod;}\nvoid dfs(int x,int fa)\n{\n\tsiz[x]=1;\n\tfor(auto y:e[x])\n\tif(y!=fa)\n\t{\n\t\tdfs(y,x);\n\t\tsiz[x]+=siz[y];\n\t\ts=(s+C(siz[y],k/2)*C(n-siz[y],k/2)%mod)%mod;\n\t}\n}\nint x,y;\nvoid solve()\n{\n\tcin>>n>>k;\n\tif(k&1){cout<<1<<'\\n';return;}\n\tfor(int i=1;i<n;i++){cin>>x>>y;e[x]+=y;e[y]+=x;}\n\tans=C(n,k);\n\tdfs(1,0);\n\ts=(s+ans)*ksm(ans,mod-2)%mod;\n\tcout<<s<<'\\n';\n}\nint tt;\nsigned main()\n{\n\tios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n\tfac[0]=1;for(int i=1;i<N;i++)fac[i]=fac[i-1]*i%mod;\n\tinv[N-1]=ksm(fac[N-1],mod-2);\n\tfor(int i=N-2;i>=0;i--)inv[i]=inv[i+1]*(i+1)%mod;\n\ttt=1;\n//\tcin>>tt;\n\twhile(tt--)solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dfs and similar",
        "math",
        "trees"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D2. LuoTianyi and the Floating Islands  Hard Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/116328",
    "editorial": "Call a node special if there is a person in it.\n\nWhen k\n is odd, we find that there is only one node satisfying the conditions.\n\nProof.\n Assume distinct node x\n and node y\n are good nodes. Let x\n be the root of the tree. Define si\n as the number of special nodes in subtree i\n. Think about the process we move from x\n to y\n. If we try to move the chosen node from its father to i\n, the variation of cost is k?2si\n. When move from x\n to its son i\n which si\n is maximal, k?2si?0\n is held (Otherwise, x\n isn't a good node). And we can get k?2si>0\n further because k\n is odd and 2si\n is even. Since min1?j?nk?2sj=k?2si\n, we find k?2sj>0\n for all j\n. So y\n can't be good node.\n\nThen think about the situation that k\n is even. Choose a node as root arbitrarily. With the same method, we find that good nodes satisfy 2si=k\n. It's also sufficient. Define pi\n as the possibility that si=k2\n, then the answer is 1+?ni=1pi\n.\n\nDefine Si\n as the size of subtree i\n. When si=k2\n, there are k2\n special nodes in subtree i\n and k2\n in the other part. The number of ways to place special nodes is (nk)\n, and (Sik2)(n?Sik2)\n of them satisfying the condition. So pi=(Sik2)(n?Sik2)(nk)\n.",
    "hint": []
}