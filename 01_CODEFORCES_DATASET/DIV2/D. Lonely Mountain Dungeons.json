{
    "link": "https://codeforces.com//contest/1928/problem/D",
    "problemId": "2471776",
    "problem_idx": "D",
    "shortId": "1928D",
    "contest_number": "1928",
    "problem_submissions": {
        "F": [
            245849503,
            245993896
        ],
        "E": [
            245824555,
            245829499,
            245832784,
            245834485,
            245833902,
            245835921,
            245834370,
            245835347,
            245835219,
            245878440,
            245832600,
            245836538,
            245836332,
            245838032,
            245837628,
            245837711,
            245841209,
            245841102,
            245837376
        ],
        "D": [
            245815421,
            245816606,
            245823987,
            245822097,
            245824145,
            245822460,
            245824462,
            245825936,
            245821079,
            245821563,
            245828692,
            245822407,
            245826293,
            245826843,
            245826081,
            245825495,
            245820103,
            245826303,
            245826059
        ],
        "C": [
            245806250,
            245805820,
            245813391,
            245810753,
            245811757,
            245812438,
            245811596,
            245812971,
            245811199,
            245809118,
            245814024,
            245811562,
            245813546,
            245818219,
            245816512,
            245809891,
            245812032,
            245816988
        ],
        "B": [
            245796420,
            245797249,
            245798962,
            245800253,
            245800069,
            245802494,
            245798634,
            245800445,
            245804185,
            245802239,
            245797030,
            245802272,
            245799479,
            245799473,
            245800524,
            245801423,
            245801226,
            245803227
        ],
        "A": [
            245794304,
            245796660,
            245795167,
            245796391,
            245796735,
            245797061,
            245794273,
            245795174,
            245794810,
            245794175,
            245794231,
            245794283,
            245796446,
            245794415,
            245795633,
            245796529,
            245795529,
            245797383
        ]
    },
    "name": "D. Lonely Mountain Dungeons",
    "statement": "Once, the people, elves, dwarves, and other inhabitants of Middle-earth\r\ngathered to reclaim the treasures stolen from them by Smaug. In the name\r\nof this great goal, they rallied around the powerful elf Timothy and\r\nbegan to plan the overthrow of the ruler of the Lonely Mountain.The army\r\nof Middle-earth inhabitants will consist of several squads. It is known\r\nthat each pair of creatures of , which are in different squads, adds b\r\nunits to the total strength of the army. But since it will be difficult\r\nfor Timothy to lead an army consisting of a large number of squads, the\r\ntotal strength of an army consisting of k squads is reduced by (k - 1)\r\ncdot x units. Note that the army always consists .It is known that there\r\nare n races in Middle-earth, and the number of creatures of the i-th\r\nrace is equal to c_i. Help the inhabitants of Middle-earth determine the\r\nmaximum strength of the army they can assemble.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nint main() {\n        std::cin.tie(nullptr)->sync_with_stdio(false);\n\n        int t;\n        std::cin >> t;\n        while (t--) {\n                int n, b, x;\n                std::cin >> n >> b >> x;\n                std::vector<int> a(n);\n                for (auto& i : a) std::cin >> i;\n                int sm = std::accumulate(a.begin(), a.end(), 0) + 1;\n                std::vector<long long> delt(sm, 0);\n                for (int j = 0; j < n; ++j) {\n                        int c = a[j];\n                        long long cur = 0;\n                        for (int i = 1; i <= c; ++i) {\n                                delt[i] -= cur;\n                                int qq = c % i;\n                                long long cc = 1ll * (i - qq) * (c / i) * (c - c / i) + 1ll * qq * (c / i + 1) * (c - c / i - 1);\n                                // std::cout << j << ' ' << i << ' ' << cc << std::endl;\n                                cc /= 2;\n                                cur = std::max(cur, cc);\n                                delt[i] += cur;\n                        }\n                }\n                for (int i = 1; i < sm; ++i) delt[i] += delt[i - 1];\n                long long ans = 0;\n                for (int i = 1; i < sm; ++i) {\n                        ans = std::max(ans, delt[i] * b - 1ll * (i - 1) * x);\n                }\n                std::cout << ans << '\\n';\n        }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "greedy",
        "math",
        "ternary search"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Lonely Mountain Dungeons.json",
    "editorial_link": "https://codeforces.com//blog/entry/125740",
    "editorial": "Let\u00e2\u0080\u0099s learn how to solve the problem when . Suppose there is\nonly one race and the number of its representatives is . Notice that for\na fixed , it is advantageous for us to divide the representatives of the\nrace almost evenly into squads.If is divisible by , then it is\nadvantageous for us to take exactly beings in each squad. Then the total\nnumber of pairs of beings in different squads is equal to (there are a\ntotal of pairs of squads, and for each pair of squads there are pairs of\nbeings from different squads).In the general case, when may not be\ndivisible by , let\u00e2\u0080\u0099s denote and . Then it is advantageous for us to make\nsquads of size and , where the number of squads of size is equal to (we\nessentially make all squads of size , and then add 1 to some squads from\nthe remaining part). In this case, the total number of pairs of beings\nin different squads is equal to . It remains to notice that it makes no\nsense to have , so we can simply iterate through from to and choose the\noptimal one.When , we can notice that for a fixed , we can solve the\nproblem independently for each race. Let the number of representatives\nof the -th race be . Then we will iterate through from to for it and add\nthe maximum total strength to the value of (the array is common for all\nraces). Also, notice that for , we will get the same total strength as\nfor . Then in the additional array (again, common for all races), we\nwill add the maximum total strength for to .We get the following\nsolution: first, calculate the described arrays and . After that,\niterate through from to the maximum . The maximum total strength of the\nsquads for a fixed will be equal to . From these values, we need to\nchoose the maximum.\n"
}