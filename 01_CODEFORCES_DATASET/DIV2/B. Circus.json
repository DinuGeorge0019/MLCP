{
    "link": "https://codeforces.com//contest/1138/problem/B",
    "problemId": "309124",
    "problem_idx": "B",
    "shortId": "1138B",
    "contest_number": "1138",
    "problem_submissions": {
        "F": [
            51023634,
            51022679,
            51020619,
            51116992,
            51021353,
            51023578,
            51058557,
            51025400,
            51024171,
            51210412
        ],
        "D": [
            51010497,
            51010075,
            51011127,
            51013543,
            51016946,
            51013080,
            51010984,
            51018905,
            51015654,
            51021599,
            51016846,
            51011106,
            51012210,
            51010079,
            51014682,
            51012504,
            51012027,
            51012863,
            51011280,
            51013123
        ],
        "C": [
            51009558,
            51007967,
            51009995,
            51010952,
            51015174,
            51011344,
            51014468,
            51017187,
            51013830,
            51019773,
            51013378,
            51012781,
            51010541,
            51011719,
            51010213,
            51010247,
            51010268,
            51010649,
            51012791,
            51010664
        ],
        "B": [
            51008088,
            51018029,
            51007957,
            51203745,
            51017235,
            51013207,
            51009939,
            51015227,
            51016412,
            51016667,
            51019928,
            51008726,
            51015366,
            51011120,
            51014342,
            51015668,
            51014019,
            51015624,
            51013885
        ],
        "A": [
            51005649,
            51019409,
            51005726,
            51203724,
            51006686,
            51010568,
            51006260,
            51011468,
            51005966,
            51005745,
            51006723,
            51007288,
            51005675,
            51005671,
            51006328,
            51008250,
            51006899,
            51005800,
            51005715,
            51005850,
            51006402
        ],
        "E": [
            51015293,
            51019023,
            51203589,
            51203519,
            51023924,
            51025422,
            51204108
        ]
    },
    "name": "B. Circus",
    "statement": "Polycarp is a head of a circus troupe. There are n an even number\r\nartists in the troupe. It is known whether the i-th artist can perform\r\nas a clown (if yes, then c_i = 1, otherwise c_i = 0), and whether they\r\ncan perform as an acrobat (if yes, then a_i = 1, otherwise a_i =\r\n0).Split the artists into two performances in such a way that: each\r\nartist plays in exactly one performance, the number of artists in the\r\ntwo performances is equal (i.e. equal to\r\nfrac{n}{2}), the number of artists that can perform as clowns in the\r\nfirst performance is the same as the number of artists that can perform\r\nas acrobats in the second performance.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxn = 100000;\nint n;\nchar s[maxn + 10], t[maxn + 10];\nvector<int> a, b, c, d;\n\nint main() {\n\tscanf(\"%d\", &n);\n\tscanf(\"%s%s\", s + 1, t + 1);\n\tfor (int i = 1; i <= n; ++i)\n\t\tif (s[i] == '0' && t[i] == '0') a.push_back(i);\n\t\telse if (s[i] == '1' && t[i] == '0') b.push_back(i);\n\t\telse if (s[i] == '0' && t[i] == '1') c.push_back(i);\n\t\telse if (s[i] == '1' && t[i] == '1') d.push_back(i);\n\tfor (int i = 0; i <= (int)b.size(); ++i)\n\t\tfor (int j = 0; j <= (int)d.size(); ++j) {\n\t\t\tint s = (int)c.size() - i - 2 * j + (int)d.size();\n\t\t\tif (s >= 0 && s <= (int)c.size()) {\n\t\t\t\tint all = i + s + j;\n\t\t\t\tint k = n / 2 - all;\n\t\t\t\tif (k >= 0 && k <= (int)a.size()) {\n\t\t\t\t\tfor (int p = 0; p < k; ++p) printf(\"%d \", a[p]);\n\t\t\t\t\tfor (int p = 0; p < i; ++p) printf(\"%d \", b[p]);\n\t\t\t\t\tfor (int p = 0; p < s; ++p) printf(\"%d \", c[p]);\n\t\t\t\t\tfor (int p = 0; p < j; ++p) printf(\"%d \", d[p]);\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tprintf(\"-1\");\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "math",
        "strings"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Circus.json",
    "editorial_link": "https://codeforces.com//blog/entry/65825",
    "editorial": "Note, that there are only four types of artists: 0; 0 , 0; 1 , 1; 0 , 1;\r\n1 .So the whole problem can be described with four integers the number\r\nof artists of each type. Let\u00e2\u0080\u0099s say, that there are 0; 0 artists, 0; 1\r\nartists, 1; 0 artists, 1, 1 artists.In the same manner, the selection of\r\nartists for the first performance can be described with four integers ,\r\n, , .Note, that we have some restrictions on , , , .In particular, we\r\nneed to select exactly half of the artists: .Also we have a requirement\r\nthat the number of clowns in first performance () must be equal to\r\nnumber of acrobats in the second (): , so we have .This equations are\r\nnecessary and sufficient. So we have 4 unknown variables and 2\r\nequations. We can bruteforce any two variables, calculate using them\r\nother two variables. And if everything went well, print an\r\nanswer.Complexity: ).\r\n"
}