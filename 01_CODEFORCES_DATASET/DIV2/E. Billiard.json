{
    "link": "https://codeforces.com//contest/982/problem/E",
    "problemId": "183675",
    "problem_idx": "E",
    "shortId": "982E",
    "contest_number": "982",
    "problem_submissions": {
        "D": [
            38375535,
            38368851,
            38373726,
            38377162,
            38371395,
            38370646,
            38371994,
            38375134,
            38373026,
            38372327,
            38378250,
            38374514,
            38364939,
            38373007,
            38369726,
            38368852,
            38367484,
            38371092,
            38368305
        ],
        "C": [
            38369557,
            38365950,
            38368727,
            38373748,
            38365636,
            38362990,
            38360353,
            38357935,
            38366403,
            38365707,
            38366242,
            38368203,
            38360426,
            38360914,
            38358247,
            38360443,
            38360473,
            38363231,
            38362845
        ],
        "B": [
            38368596,
            38365056,
            38363500,
            38360346,
            38360284,
            38359729,
            38364781,
            38362446,
            38362143,
            38359325,
            38360710,
            38365274,
            38357153,
            38595002,
            38358897,
            38360993,
            38362869,
            38358240,
            38360536,
            38357974
        ],
        "A": [
            38367216,
            38364962,
            38356449,
            38356432,
            38356314,
            38356331,
            38367453,
            38355628,
            38357632,
            38356537,
            38357572,
            38363973,
            38355536,
            38355838,
            38356345,
            38364483,
            38355616,
            38357300,
            38355573
        ],
        "F": [
            38365213,
            38386318,
            38386309,
            38375562,
            38372484,
            38551586
        ],
        "E": [
            38373371,
            38376699,
            38377910,
            38376666,
            38377583,
            38377503,
            38378506,
            38374036,
            38378687,
            40182999
        ]
    },
    "name": "E. Billiard",
    "statement": "Consider a billiard table of rectangular size n\r\ntimes m with four pockets. Letâ€™s introduce a coordinate system with the\r\norigin at the lower left corner (see the picture). There is one ball at\r\nthe point (x, y) currently. Max comes to the table and strikes the ball.\r\nThe ball starts moving along a line that is parallel to one of the axes\r\nor that makes a 45^{\r\ncirc} angle with them. We will assume that: the angles between the\r\ndirections of the ball before and after a collision with a side are\r\nequal, the ball moves indefinitely long, it only stops when it falls\r\ninto a pocket, the ball can be considered as a point, it falls into a\r\npocket if and only if its coordinates coincide with one of the pockets,\r\ninitially the ball is not in a pocket. Note that the ball can move along\r\nsome side, in this case the ball will just fall into the pocket at the\r\nend of the side.Your task is to determine whether the ball will fall\r\ninto a pocket eventually, and if yes, which of the four pockets it will\r\nbe.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nvoid ext_gcd(int a,int b,long long &x,long long &y, int c) {\n\tif(b==0){x=c,y=0;return;}\n\text_gcd(b,a%b,y,x,c),y-=a/b*x;\n}\n\nint gcd(int a, int b) {\n\tif (!a)\n\t\treturn b;\n\telse\n\t\treturn gcd(b % a, a);\n}\n\nint main() {\n\tint n, m, x, y, vx, vy;\n\tscanf(\"%d%d%d%d%d%d\", &n, &m, &x, &y, &vx, &vy);\n\tif (vx == 0) {\n\t\tif (vy > 0) {\n\t\t\tif (x == 0) {\n\t\t\t\tprintf(\"%d %d\\n\", 0, m);\n\t\t\t}else if (x == n) {\n\t\t\t\tprintf(\"%d %d\\n\", n, m);\n\t\t\t}else {\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t}\n\t\t}\n\t\tif (vy < 0) {\n\t\t\tif (x == 0) {\n\t\t\t\tprintf(\"%d %d\\n\", 0, 0);\n\t\t\t}else if (x == n) {\n\t\t\t\tprintf(\"%d %d\\n\", n, 0);\n\t\t\t}else {\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tif (vy == 0) {\n\t\tif (vx > 0) {\n\t\t\tif (y == 0) {\n\t\t\t\tprintf(\"%d %d\\n\", n, 0);\n\t\t\t}else if (y == m) {\n\t\t\t\tprintf(\"%d %d\\n\", n, m);\n\t\t\t}else {\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t}\n\t\t}\n\t\tif (vx < 0) {\n\t\t\tif (y == 0) {\n\t\t\t\tprintf(\"%d %d\\n\", 0, 0);\n\t\t\t}else if (y == m) {\n\t\t\t\tprintf(\"%d %d\\n\", 0, m);\n\t\t\t}else {\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tint k1, k2;\n\tif (vx == 1) {\n\t\tk1 = (n - x) % n;\n\t}else {\n\t\tk1 = x % n;\n\t}\n\n\tif (vy == 1) {\n\t\tk2 = (m - y) % m;\n\t}else {\n\t\tk2 = y % m;\n\t}\n\n\tint g = gcd(n, m);\n\tif ((k1 - k2) % g != 0) {\n\t\tprintf(\"-1\\n\");\n\t\treturn 0;\n\t}\n\n\tlong long xx, yy;\n\text_gcd(n, m, xx, yy, (k2 - k1) / g);\n\t// printf(\"%I64d\\n\", xx);\n\txx %= (m / g);\n\tlong long S = xx * n + k1;\n\tlong long lcm = 1LL * n * m / g;\n\tS = (S % lcm + lcm) % lcm;\n\txx = x + S * vx;\n\tyy = y + S * vy;\n\n\tprintf(\"%I64d %I64d\\n\", (xx % (2 * n) + 2 * n) % (2 * n), (yy % (2 * m) + 2 * m) % (2 * m));\n\t\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "number theory"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Billiard.json",
    "editorial_link": "https://codeforces.com//blog/entry/59551",
    "editorial": "If you symmetrically reflect a rectangle on the plane relative to its\r\nsides, the new trajectory of the ball will be much easier. Linear\r\ntrajectory if be correct. One possible solution is:\r\n",
    "hint": []
}