{
    "link": "https://codeforces.com//contest/1981/problem/D",
    "problemId": "2672992",
    "problem_idx": "D",
    "shortId": "1981D",
    "contest_number": "1981",
    "problem_submissions": {
        "F": [
            263497142,
            263559226
        ],
        "E": [
            263476287,
            263464534,
            263479972,
            263479996,
            263481278,
            263484948,
            263487311,
            263488586,
            263490466,
            263488413,
            263485273,
            263486361,
            263491158,
            263492494,
            263487751,
            263490431,
            263594935,
            263475669,
            263731983
        ],
        "D": [
            263469280,
            263482604,
            263470136,
            263467974,
            263476735,
            263476815,
            263475122,
            263473573,
            263468370,
            263465514,
            263477018,
            263481941,
            263480436,
            263478668,
            263478475,
            263485875,
            263469409,
            263472129,
            263470882
        ],
        "C": [
            263456919,
            263468416,
            263459011,
            263454953,
            263461770,
            263457891,
            263464609,
            263463038,
            263456449,
            263472358,
            263463129,
            263464204,
            263463482,
            263460745,
            263470157,
            263458930,
            263460066,
            263458494,
            263461448
        ],
        "B": [
            263449078,
            263456587,
            263450957,
            263448611,
            263450566,
            263450086,
            263449888,
            263451971,
            263448293,
            263451226,
            263454153,
            263455701,
            263455723,
            263449188,
            263455405,
            263451294,
            263451169,
            263449953,
            263456283
        ],
        "A": [
            263445832,
            263446092,
            263445924,
            263445701,
            263447399,
            263445953,
            263446026,
            263448629,
            263445764,
            263445931,
            263446308,
            263445723,
            263447638,
            263446507,
            263449757,
            263445656,
            263446328,
            263445901,
            263446447
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129848",
    "editorial": "The necessary condition for is that the unordered pairs and are\r\nidentical. In fact, if are all prime numbers, then this necessary\r\ncondition becomes sufficient.If we consider as an edge, then the problem\r\ncan be transformed into finding the undirected complete graph with the\r\nfewest nodes (where each node also has a self-loop) such that this\r\ncomplete graph contains a path of edges without repeating any edge.Next,\r\nwe consider how to calculate the length of the longest path in a\r\ncomplete graph with a given number of vertices that does not repeat any\r\nedges.Let the number of vertices in the complete graph be . If is odd,\r\nthen the degree of each node is even, so this graph contains an Eulerian\r\npath, and the path length is equal to the number of edges, which is . If\r\nis even, then the degree of each node is odd, and we need to remove some\r\nedges to make this graph contain an Eulerian path. It is easy to see\r\nthat each edge removed can reduce the number of vertices with odd\r\ndegrees by at most , so we need to remove at least edges. Removing the\r\nedges will suffice, and the path length will be .When , the smallest is\r\n, and the -th smallest prime number is , which satisfies .We can use\r\nbinary search to find the smallest and use Hierholzerâs algorithm to\r\nfind an Eulerian path in an undirected graph.Time complexity: per test\r\ncase.\r\n",
    "name": "D. Turtle and Multiplication",
    "statement": "Turtle just learned how to multiply two integers in his math class, and\r\nhe was very excited.Then Piggy gave him an integer n, and asked him to\r\nconstruct a sequence a_1, a_2,\r\nldots, a_n consisting of integers which satisfied the following\r\nconditions: For all 1\r\nle i\r\nle n, 1\r\nle a_i\r\nle 3\r\ncdot 10^5. For all 1\r\nle i < j\r\nle n - 1, a_i\r\ncdot a_{i + 1}\r\nne a_j\r\ncdot a_{j + 1}. Of all such sequences, Piggy asked Turtle to find the\r\none with the number of elements.Turtle definitely could not solve the\r\nproblem, so please help him!\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define LL long long#define LLL __int128#define uint unsigned#define ldb long double#define uLL unsigned long longusing namespace std;const int N=3e5+5,M=3e3+5;int n,tim;vector<int>pr,a;bool vp[N];int G[M][M];inline void seive(const int&n){\tfor(int i=2;i<=n;++i)if(!vp[i]){\t\tpr.emplace_back(i);\t\tfor(int j=i+i;j<=n;j+=i)vp[j]=1;\t}}inline void dfs(int x){\tfor(int i=0;i<n;++i)if(G[x][i]!=tim&&G[i][x]!=tim)\t\tG[x][i]=G[i][x]=tim,dfs(i),a.emplace_back(pr[i]);}inline void solve(int _n,int m){\twhile(1){\t\tn=_n,++tim;\t\tint e=n*(n+1ll)/2;\t\tfor(int i=0;i<n;++i)for(int j=0;j<n;++j)G[i][j]=0;\t\tif(n%2==0)for(int i=2;i<n;i+=2)G[i][i+1]=G[i+1][i]=tim,--e;\t\tif(e+1>=m)break;\t\t++_n;\t}\ta.clear(),dfs(0),a.emplace_back(pr[0]);}inline void MAIN(){\tint n;\tcin>>n;\tmap<LL,bool>vs;\tint m=sqrtl(2*n)-1;\tsolve(m,n);\ta.resize(n);\tfor(auto i:a)cout<<i<<' ';cout<<'\\n';}signed main(){    cin.tie(0)->sync_with_stdio(0);\tseive(300000);\tint t=1;cin>>t;while(t--)MAIN();    return 0;}/**/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "number theory"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Turtle and Multiplication.json",
    "hint": [
        "Hint 1 should take different primes.",
        "Hint 2 Transform it into a graph problem."
    ]
}