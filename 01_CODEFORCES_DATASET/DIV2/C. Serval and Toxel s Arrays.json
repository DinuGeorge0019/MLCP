{
    "link": "https://codeforces.com//contest/1789/problem/C",
    "problemId": "1798639",
    "problem_idx": "C",
    "shortId": "1789C",
    "contest_number": "1789",
    "problem_submissions": {
        "F": [
            194969357,
            195749340,
            195084999,
            195084860,
            195102578,
            194979229,
            194979047,
            194978962,
            194975838,
            194975550,
            194975302,
            194975124,
            194974900,
            194974650,
            194974382
        ],
        "D": [
            194964382,
            194946537,
            194952763,
            194935429,
            194953178,
            194957319,
            194960327,
            194955667,
            194955471,
            194960858,
            194960296,
            194949046,
            194949101,
            194950239,
            194953216,
            194952742,
            194952699,
            194953612
        ],
        "E": [
            194946702,
            194955457,
            194962685,
            194950894,
            194964730,
            194965836,
            229633905,
            194969144,
            194969007,
            194970553,
            194969010,
            194970681,
            194953500,
            194973828,
            198576217,
            194953882
        ],
        "C": [
            194930840,
            194935056,
            194937930,
            194962744,
            194937423,
            194944977,
            194941284,
            194940844,
            194947791,
            194945071,
            194938899,
            194933727,
            194937235,
            194936393,
            194947382,
            194937385,
            194938714,
            194934789,
            194942194,
            194939314
        ],
        "B": [
            194927201,
            194928996,
            194933855,
            194950809,
            194928726,
            194933032,
            194930991,
            194927953,
            194937472,
            194934025,
            194928695,
            194928070,
            194927782,
            194930745,
            194932397,
            194929156,
            194930083,
            194929116,
            194929527,
            194930695
        ],
        "A": [
            194926083,
            194926207,
            194930860,
            194952002,
            194926224,
            194926968,
            194926650,
            194926242,
            194934078,
            194927544,
            194926614,
            194926667,
            194926050,
            194926065,
            194927300,
            194926584,
            194927455,
            194927037,
            194926659,
            194927083
        ]
    },
    "name": "C. Serval and Toxel s Arrays",
    "statement": "Toxel likes arrays. Before traveling to the Paldea region, Serval gave\r\nhim an array a as a gift. This array has n elements.In order to get more\r\narrays, Toxel performed m operations with the initial array. In the i-th\r\noperation, he modified the p_{i}-th element of the (i-1)-th array to\r\nv_{i}, resulting in the i-th array (the initial array a is numbered as\r\n0). During modifications, Toxel guaranteed that the elements of each\r\narray are still after each operation.Finally, Toxel got m+1 arrays and\r\ndenoted them as A_{0}=a, A_{1},\r\nldots,A_{m}. For each pair (i,j) (0\r\nle i<j\r\nle m), Toxel defines its value as the number of distinct elements of the\r\nconcatenation of A_{i} and A_{j}. Now Toxel wonders, what is the sum of\r\nthe values of all pairs? Please help him to calculate the answer.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\nusing ll = long long;\n\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n    vector<int> last(n, -1);\n    vector<int> a(n);\n    vector<int> cnt(n + m + 1, 0);\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n        last[i] = 0;\n    }\n    for (int i = 1; i <= m; ++i) {\n        int p, v;\n        cin >> p >> v;\n        p--;\n        cnt[a[p]] += i - last[p];\n        a[p] = v;\n        last[p] = i;\n    }\n    for (int i = 0; i < n; ++i) {\n        cnt[a[i]] += m + 1 - last[i];\n    }\n    ll ans = 1ll * (m + 1) * m * n;\n    for(int i = 1; i <= n + m; ++i) {\n        ans -= 1ll * cnt[i] * (cnt[i] - 1) / 2;\n    }\n    cout << ans << '\\n';\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n\n    int t = 1;\n    cin >> t;\n\n    while (t--) {\n        solve();\n    }\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "implementation",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Serval and Toxel s Arrays.json",
    "editorial_link": "https://codeforces.com//blog/entry/113246",
    "editorial": "Consider the contribution of each\nvalue. We only need to count the number of concatenated arrays each\nvalue appears in, and sum all those counts up. The answer to this\nproblem only depends on the number of appearances of this value. Notice\nthat the appearance of each value forms some intervals. Each interval\nstarts when it modifies another element (or in the initial array), and\nends when it is modified (or in the -th array). As there are no\nduplicate elements, the intervals do not intersect, so we can simply sum\ntheir lengths up.Letâs use an array to track the appearance of each\nvalue. We first set the appearance of the initial elements to , and\nother elements to , which means the value does not appear. Then, in the\n-th modification, suppose we modified some elements from to , then we\nshould add to , and set to . We should also set to . After all\noperations, for all , add to if is not .Value appears in concatenated\narrays.Time complexity: .\n",
    "hint": []
}