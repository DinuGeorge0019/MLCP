{
    "link": "https://codeforces.com//contest/1345/problem/C",
    "problemId": "600709",
    "problem_idx": "C",
    "shortId": "1345C",
    "contest_number": "1345",
    "problem_submissions": {
        "E": [
            79194179,
            79196032,
            79220297,
            79200684,
            79201329,
            79219340,
            79391989,
            79268362,
            79267373,
            79247234,
            79230319,
            79193699
        ],
        "D": [
            79182685,
            79185329,
            79189475,
            79188511,
            79179864,
            79171870,
            79173915,
            79165263,
            79173257,
            79175980,
            79176898,
            79242598,
            79180486,
            79183462,
            79179438,
            79180644,
            79181066,
            79182336
        ],
        "C": [
            79166678,
            79171676,
            79174223,
            79183005,
            79155393,
            79157900,
            79170332,
            79162910,
            79161162,
            79163028,
            79162951,
            79164149,
            79160726,
            79164483,
            79165533,
            79167519,
            79166191
        ],
        "B": [
            79161444,
            79162895,
            79158056,
            79159769,
            79152511,
            79154234,
            79151562,
            79156943,
            79155510,
            79156024,
            79158727,
            79152661,
            79151997,
            79158730,
            79160284,
            79158238,
            79157754
        ],
        "A": [
            79149423,
            79162373,
            79160953,
            79149853,
            79149101,
            79148773,
            79149875,
            79150362,
            79149364,
            79149646,
            79148884,
            79148772,
            79158375,
            79151373,
            79149772,
            79149372
        ],
        "F": [
            79200676,
            79276017
        ]
    },
    "name": "C. Hilbert s Hotel",
    "statement": "Hilbert\u2019s Hotel is a very unusual hotel since the number of rooms is\r\ninfinite! In fact, there is exactly one room for every integer, . Even\r\nstranger, the hotel is currently at full capacity, meaning there is\r\nexactly one guest in every room. The hotel\u2019s manager, David Hilbert\r\nhimself, decides he wants to shuffle the guests around because he thinks\r\nthis will create a vacancy (a room without a guest).For any integer k\r\nand positive integer n, let k\r\nbmod n denote the remainder when k is divided by n. More formally, r=k\r\nbmod n is the smallest non-negative integer such that k-r is divisible\r\nby n. It always holds that 0\r\nle k\r\nbmod n\r\nle n-1. For example, 100\r\nbmod 12=4 and (-1337)\r\nbmod 3=1.Then the shuffling works as follows. There is an array of n\r\nintegers a_0,a_1,\r\nldots,a_{n-1}. Then for each integer k, the guest in room k is moved to\r\nroom number k+a_{k\r\nbmod n}.After this shuffling process, determine if there is still\r\nexactly one guest assigned to each room. That is, there are no vacancies\r\nor rooms with multiple guests.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define int long long\n\nsigned main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n\n  int t; cin >> t;\n  for (int j = 0; j < t; j++) {\n    int n; cin >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n      cin >> a[i];\n    }\n\n    vector<bool> used(n, false);\n\n    for (int i = 0; i < n; i++) {\n      used[(i + a[i] + 1000000000) % n] = true;\n    }\n\n    bool allUsed = true;\n\n    for (bool b : used) {\n      allUsed &= b;\n    }\n    cout << (allUsed ? \"YES\\n\" : \"NO\\n\");\n  }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "sortings"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Hilbert s Hotel.json",
    "editorial_link": "https://codeforces.com//blog/entry/76819",
    "editorial": "Suppose that for some . Then for some integer , so the guest in room is\r\nassigned the same room as guest .Similarly, suppose that two different\r\nguests and are assigned the same room. Then we have for and .This proves\r\nthere is a collision if and only if all are not distinct . That is, .\r\nThis is simply checked with a boolean array to make sure each number\r\nfrom to is included.Note that there are also no vacancies if this\r\ncondition holds: Let be some room. Then must appear in the array, so\r\nthere is some with . Then there is an integer with , meaning guest is\r\nmoved to room .Complexity is .\r\n"
}