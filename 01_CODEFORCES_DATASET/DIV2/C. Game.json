{
    "link": "https://codeforces.com//contest/214/problem/C",
    "problemId": "1584",
    "problem_idx": "C",
    "shortId": "214C",
    "contest_number": "214",
    "problem_submissions": {
        "E": [
            1956903,
            1959345,
            1957680,
            1957463,
            1959834,
            1959308,
            1959253,
            1957749,
            1958161,
            1956289,
            1958278
        ],
        "C": [
            1955209,
            1956435,
            1959107,
            1956342,
            1957218,
            1958467,
            1961649,
            1957400,
            1955688,
            1956389,
            1957879
        ],
        "B": [
            1954378,
            1954778,
            1958510,
            1955446,
            1959760,
            1961278,
            1961629,
            1960691,
            1956885,
            1957774,
            1955065,
            1957623,
            1954405
        ],
        "A": [
            1953390,
            1953632,
            1953871,
            1953304,
            1953314,
            1953971,
            1953533,
            1953542,
            1953580,
            1953288,
            1953626,
            1958517,
            1953552,
            1953593,
            1953324
        ],
        "D": [
            1959758,
            1957255,
            1957018,
            1959688
        ]
    },
    "name": "C. Game",
    "statement": "Furik and Rubik love playing computer games. Furik has recently found a\r\nnew game that greatly interested Rubik. The game consists of parts and\r\nto complete each part a player may probably need to complete some other\r\nones. We know that the game can be fully completed, that is, its parts\r\ndo not form cyclic dependencies. Rubik has computers, on which he can\r\nplay this game. All computers are located in different houses. Besides,\r\nit has turned out that each part of the game can be completed only on\r\none of these computers. Let’s number the computers with integers from to\r\n. Rubik can perform the following actions: Complete some part of the\r\ngame on some computer. Rubik spends exactly hour on completing any part\r\non any computer. Move from the 1-st computer to the 2-nd one. Rubik\r\nspends exactly hour on that. Move from the 1-st computer to the 3-rd\r\none. Rubik spends exactly hours on that. Move from the 2-nd computer to\r\nthe 1-st one. Rubik spends exactly hours on that. Move from the 2-nd\r\ncomputer to the 3-rd one. Rubik spends exactly hour on that. Move from\r\nthe 3-rd computer to the 1-st one. Rubik spends exactly hour on that.\r\nMove from the 3-rd computer to the 2-nd one. Rubik spends exactly hours\r\non that. Help Rubik to find the minimum number of hours he will need to\r\ncomplete all parts of the game. Initially Rubik can be located at the\r\ncomputer he considers necessary.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <string>\n#include <cassert>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\nusing namespace std;\n\nint N, C[200];\nbool P[200][200]; // i->j if j must come before i\n\nbool Q[200][200];\nint id[200];\nbool done[200];\nint main() {\n  cin >> N;\n  for (int i = 0; i < N; i++) {cin >> C[i]; C[i]--;}\n\n  int K;\n  for (int i = 0; i < N; i++) {\n    cin >> K;\n    int a;\n    for (int j = 0; j < K; j++) {\n      cin >> a;\n      P[i][a-1] = 1;\n    }\n  }\n\n  int best = 1000000;\n  for (int q = 0; q < 3; q++) {\n    int at = q, cost = 0;\n    for (int i = 0; i < N; i++) id[i] = 0, done[i] = 0;\n    for (int i = 0; i < N; i++) {\n      for (int j = 0; j < N; j++) {\n\tQ[j][i] = P[i][j];\n\tif (Q[j][i]) id[i]++;\n      }\n    }\n\n    int left = N;\n    while (left > 0) {\n      bool anyhere = 0;\n      for (int i = 0; i < N; i++) {\n\tif (!done[i] && id[i] == 0 && C[i] == at) {\n\t  anyhere = 1;\n\t  for (int j = 0; j < N; j++) if (Q[i][j]) id[j]--;\n\t  left--; cost++;\n\t  done[i] = 1;\n\t}\n      }\n\n      if (!anyhere) {\n\tcost++;\n\tat = (at+1)%3;\n      }\n    }\n    best = min(best, cost);\n  }\n  cout << best << \"\\n\";\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/4982",
    "editorial": "Solution  Greedy.\nLets our computers settled on circle, and moves (1->2, 2->3, 3->1) will be steps \"forward\", and moves (1->3,3->2,2->1) will steps \"back\".\n\nNote that \"back\" moves is not optimal, as we can make two moves \"forward\" that is identical in time. We will look over all starts. Further, we will go by circle while we not complited all game. For every level we will remember number ne[i]  count of another level that \"direct\" need for it. We will complited levels with ne[i]=0 and update all ne[i] that we must. It can be implemented with O(n^3) time.",
    "hint": []
}