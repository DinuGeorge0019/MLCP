{"link": "https://codeforces.com//contest/510/problem/C", "problemId": "21649", "problem_idx": "C", "shortId": "510C", "contest_number": "510", "problem_submissions": {"D": [9684147, 9684396, 9684806, 9688259, 9688872, 9688202, 9688369, 9688723, 9687291, 9689191, 9687900, 9689279, 9689405, 9687159, 9684719, 9685186, 9686736], "C": [9682253, 9688210, 9686978, 9685682, 9685139, 9685614, 10161234, 9700673, 9685738, 66447569, 66445904, 9686328, 9689041, 9687111, 9690400, 9689647, 9688140, 9688179, 9685456, 16269182, 9682965, 9696689, 9680263], "B": [9680110, 9680943, 9682904, 9681822, 9681781, 9681477, 9683346, 9682052, 9683360, 9681047, 9680759, 9682507, 9684457, 9685737, 9682120, 9681028, 9680313, 9681991, 9684236], "A": [9678764, 9678175, 9681007, 9678673, 9678650, 9678967, 9679803, 9682761, 9680657, 9678328, 9678305, 9680461, 9680750, 9679631, 9678188, 9678264, 20834368, 9678330, 9678840]}, "name": "C. Fox And Names", "statement": "Fox Ciel is going to publish a paper on FOCS (Foxes Operated Computer\r\nSystems, pronounce: \"Fox\"). She heard a rumor: the authors list on the\r\npaper is always sorted in the order. After checking some examples, she\r\nfound out that sometimes it wasn\u2019t true. On some papers authors\u2019 names\r\nweren\u2019t sorted in order in normal sense. But it was always true that\r\nafter some modification of the order of letters in alphabet, the order\r\nof authors becomes !She wants to know, if there exists an order of\r\nletters in Latin alphabet such that the names on the paper she is\r\nsubmitting are following in the order. If so, you should find out any\r\nsuch order. order is defined in following way. When we compare and ,\r\nfirst we find the leftmost position with differing characters: . If\r\nthere is no such position (i. e. is a prefix of or vice versa) the\r\nshortest string is less. Otherwise, we compare characters and according\r\nto their order in alphabet.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\nint const N = 101000;\nint const M = 1001000;\nint n;\nstruct edges{ int u, next; } e[M];\nint p[N], deg[N], idx;\nvoid addedge(int u, int v) {\n\te[idx].u = v, e[idx].next = p[u], p[u] = idx++;\n\t++deg[v];\n}\nvoid init() { idx = 0; memset(p, 0xff, sizeof p); }\n\nchar s[111][111];\nchar ans[111];\nint cnt;\nint st[111], top;\n\nint main() {\n  scanf(\"%d\", &n);\n\tfor (int i = 0; i < n; ++i) {\n\t\tscanf(\" %s\", s[i]);\n\t}\n\tinit();\n\tfor (int i = 0; i < n - 1; ++i) {\n\t\tint len = strlen(s[i]);\n\t\tint nLen = strlen(s[i + 1]);\n\t\tbool found = 0;\n\t\tfor (int j = 0; j < len && j < nLen; ++j) {\n    \tif (s[i][j] != s[i + 1][j]) {\n\t\t\t\tfound = 1;\n\t\t\t\taddedge(s[i][j] - 'a', s[i + 1][j] - 'a');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!found && len > nLen) {\n\t\t\tputs(\"Impossible\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor (int i = 0; i < 26; ++i) {\n     if (deg[i] == 0) {\n       st[++top] = i;\n\t\t\t deg[i] = -1;\n\t\t }\n\t}\n\twhile (top > 0) {\n\t\tint u = st[top--];\n\t\tans[cnt++] = 'a' + u;\n\t\tfor (int i = p[u]; ~i; i = e[i].next) {\n\t\t\tint v = e[i].u;\n\t\t\t--deg[v];\n\t\t\tif (deg[v] == 0) {\n\t\t\t\tdeg[v] = -1;\n\t\t\t\tst[++top] = v;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < 26; ++i) {\n\t\tif (deg[i] >= 0) {\n\t\t\tputs(\"Impossible\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tans[cnt] = 0;\n\tputs(ans);\n\treturn 0;\n}\n\n"], "input": "", "output": "", "tags": ["dfs and similar", "graphs", "sortings"], "dificulty": "1600", "interactive": false}