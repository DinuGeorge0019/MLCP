{
    "link": "https://codeforces.com//contest/1627/problem/D",
    "problemId": "1262393",
    "problem_idx": "D",
    "shortId": "1627D",
    "contest_number": "1627",
    "problem_submissions": {
        "A": [
            142856858,
            142829078,
            142831063,
            142828619,
            142829282,
            142829501,
            142828956,
            142828768,
            142829546,
            142828636,
            142829064,
            142830437,
            142829297,
            142829030,
            142829071,
            142830213,
            142829290,
            142834401,
            142829511,
            142828971
        ],
        "B": [
            142855615,
            142836231,
            143077575,
            142843639,
            142833513,
            142834057,
            142834633,
            142836507,
            142832659,
            142835053,
            142835365,
            142833153,
            142834936,
            142836596,
            142833128,
            142834428,
            142837068,
            142835176,
            142841259,
            142840070,
            142832942
        ],
        "C": [
            142853368,
            142841436,
            142848282,
            142837534,
            142840619,
            142840854,
            142841599,
            142841065,
            142841353,
            142842344,
            142840078,
            142839450,
            142843531,
            142839772,
            142838837,
            142843623,
            142841636,
            142846207,
            142840529,
            142843637
        ],
        "D": [
            142850438,
            142848536,
            143170284,
            142854619,
            142844350,
            142843215,
            142846147,
            142845730,
            142844598,
            142844258,
            142848096,
            142845506,
            142844896,
            142848460,
            142849869,
            142841967,
            142847523,
            142848652,
            142849056,
            142845741,
            142849286
        ],
        "E": [
            142848975,
            142862261,
            142856441,
            142857018,
            142861778,
            142861405,
            142859738,
            142864236,
            142861113,
            142866137,
            142865452,
            142865639,
            142862871,
            142864756,
            142864934,
            142867450,
            142864191,
            142861812,
            142865000
        ],
        "F": [
            142838000,
            142875000,
            142859934,
            142890898,
            147974497
        ]
    },
    "name": "D. Not Adding",
    "statement": "You have an array a_1, a_2,\r\ndots, a_n consisting of n integers. You are allowed to perform the\r\nfollowing operation on it: Choose two elements from the array a_i and\r\na_j (i\r\nne j) such that\r\ngcd(a_i, a_j) is not present in the array, and add\r\ngcd(a_i, a_j) to the end of the array. Here\r\ngcd(x, y) denotes greatest common divisor (GCD) of integers x and y.\r\nNote that the array changes after each operation, and the subsequent\r\noperations are performed on the new array.What is the number of times\r\nyou can perform the operation on the array?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define pb push_back\n#define eb emplace_back\n#define SZ(x) ((int)(x).size())\n#define each(x,v) for(auto&x:v)\n#define rep(i,a,b) for(int i=(a);i<=(b);++i)\n#define per(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int N=1000005;\nint n,a[N],b[N];\nint main(){\n\tscanf(\"%d\",&n);\n\trep(i,1,n)scanf(\"%d\",&a[i]),++b[a[i]];\n\tint ans=0;\n\trep(i,1,1000000)if(!b[i]){\n\t\tint g=0;\n\t\tfor(int j=i,k=1;j<=1000000;j+=i,++k){\n\t\t\tif(b[j])g=__gcd(g,k);\n\t\t}\n\t\tif(g==1){\n\t\t\t++ans;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "math",
        "number theory"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Not Adding.json",
    "editorial_link": "https://codeforces.com//blog/entry/99067",
    "editorial": "Note that the of two numbers cannot exceed their maximum. Let the\r\nmaximum element of the array be . So for every number from to , we try\r\nto check whether that element can be included in the array after\r\nperforming some operations or not.How to check for a particular number\r\n?For to be in the final array, either: It already exists in the initial\r\narray. Or, the of all multiples of present in the initial array equals .\r\nFor to be added after some operations, there must be some of the array\r\nwhich has a equal to . We can perform the operations by taking the\r\ncurrent gcd and one element from the subset at a time and at the end we\r\nwill obtain . Note that such a subset can only contain multiples of . So\r\nit is enough to check that the of all multiples is equal to .Thus, the\r\noverall solution takes .\r\n"
}