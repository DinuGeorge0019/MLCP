{"link": "https://codeforces.com//contest/1492/problem/E", "problemId": "905860", "problem_idx": "E", "shortId": "1492E", "contest_number": "1492", "problem_submissions": {"E": [108275392, 108337957, 108337929, 108337897, 108337869, 108337530, 108336584, 108280929, 108279892, 108283262, 108283717, 108289278, 108287786, 108268660, 108390482, 108288687, 108282322, 108287306, 108280347, 108291576, 108288062, 108373037, 108293277, 129805186, 108287644, 108300980, 108299703, 108393370], "D": [108260382, 108258893, 108270014, 108263349, 108264609, 108252892, 108264793, 108287598, 108390440, 108271913, 108257825, 108266386, 108268610, 108279786, 108409580, 108293329, 108289857, 108251059, 108267145, 108268232, 108256122, 108256138], "C": [108249862, 108249847, 108251625, 108254267, 108251919, 108258077, 108250178, 108246037, 108390405, 108300472, 108250750, 108280684, 108253606, 108267184, 108256872, 108409648, 108265283, 108263373, 108244223, 108254346, 108334110, 108246220, 108249150], "B": [108245129, 108245447, 108247395, 108247985, 108246834, 108246031, 108256869, 108242298, 108390120, 108243502, 108256163, 108245585, 108255038, 108249056, 108252947, 108246277, 108240957, 108244517, 108243521, 108242960, 108244326], "A": [108239344, 108239466, 108239941, 108241103, 108239731, 108245369, 108243343, 108239512, 108390047, 108239332, 108245439, 108239555, 108241591, 108245013, 108409613, 108242749, 108239786, 108239373, 108240879, 108239525, 108239590, 108239428]}, "name": "E. Almost Fault-Tolerant Database", "statement": "You are storing an integer array of length m in a database. To maintain\r\ninternal integrity and protect data, the database stores n copies of\r\nthis array.Unfortunately, the recent incident may have altered the\r\nstored information in every copy in the database.It\u2019s believed, that the\r\nincident altered at most two elements in every copy. You need to recover\r\nthe original array based on the current state of the database.In case\r\nthere are multiple ways to restore the array, report any. If there is no\r\narray that differs from every copy in no more than two positions, report\r\nthat as well.\r\n", "solutions": ["#include <bits/stdc++.h>\ntypedef long long ll;\n\nusing namespace std;\n\nll MOD = (ll)1000000007;\nvector<vector<int>> nums;\nvector<int> test;\nvector<map<int, int>> ct;\nvector<vector<pair<int, int>>> ctsort;\n\nbool check() {\n    // cout << \"Checking \";\n    // for(int i = 0; i < test.size(); i++) cout << test[i] << ' ';\n    for(int i = 0; i < nums.size(); i++) {\n        int x = 0;\n        for(int j = 0; j < test.size(); j++) {\n            if(test[j] != nums[i][j]) x++;\n        }\n        if(x > 2) return false;\n    }\n    // cout << \"...good!\\n\";\n    return true;\n}\n\nbool rec(int i, int s) {\n    if(s < 0) return false;\n    if(i == -1) {\n        return check();\n    }\n    for(int j = 0; j < ctsort[i].size(); j++) {\n        test[i] = ctsort[i][j].second;\n        if(rec(i-1, s-ctsort[i][j].first)) return true;\n    }\n    return false;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int t, m, n;\n    ll k, ans = 0;\n    string s1, s2;\n    bool sad = false;\n    cin >> m >> n;\n    nums.resize(m);\n    ct.resize(n);\n    ctsort.resize(n);\n    test.resize(n);\n    for(int i = 0; i < m; i++) {\n        nums[i].resize(n);\n        for(int j = 0; j < n; j++) {\n            cin >> nums[i][j];\n            ct[j][nums[i][j]]++;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        for(pair<int, int> p : ct[i]) {\n            ctsort[i].push_back({m - p.second, p.first});\n        }\n        sort(ctsort[i].begin(), ctsort[i].end());\n    }\n    // for(int i = 0; i < n; i++) {\n    //     for(int j = 0; j < ctsort[i].size(); j++) {\n    //         cout << ctsort[i][j].second << ' ' << ctsort[i][j].first << \" | \";\n    //     }\n    //     cout << '\\n';\n    // }\n    if(rec(n-1, 2*m)) {\n        cout << \"Yes\\n\";\n        for(int i = 0; i < n; i++) cout << test[i] << ' ';\n    }\n    else cout << \"No\\n\";\n}"], "input": "", "output": "", "tags": ["brute force", "constructive algorithms", "dfs and similar", "greedy", "implementation"], "dificulty": "2500", "interactive": false}