{"link": "https://codeforces.com//contest/599/problem/C", "problemId": "41190", "problem_idx": "C", "shortId": "599C", "contest_number": "599", "problem_submissions": {"D": [14373739, 14373664, 14394221, 14375180, 14375137, 14375830, 14374794, 14372514, 14378293, 14374356, 14380491, 14376576, 14377604, 14379482, 14375007, 14373832, 14379192, 14384201, 14378143, 14374835, 14375909], "C": [14369474, 14370302, 14371990, 14366448, 14371734, 14369913, 14369228, 14371288, 14371880, 14370952, 14370316, 14371725, 14372878, 14369085, 14371250, 14372876, 14369840, 14370142, 14369299, 14369577], "B": [14367721, 14365689, 14367534, 14376988, 14368981, 14368542, 14366919, 14366011, 14371510, 14368972, 14367928, 14368335, 14367992, 14366870, 14370057, 14371458, 14366298, 14368075, 14367504], "A": [14363461, 14367023, 14364757, 14369525, 14385293, 14364759, 14363593, 14363286, 14364018, 14364707, 14365621, 14364489, 14364779, 14363557, 14367419, 14365247, 14363341, 14364093, 14364413, 14363223], "E": [14379749, 14385538]}, "name": "C. Day at the Beach", "statement": "One day Squidward, Spongebob and Patrick decided to go to the beach.\r\nUnfortunately, the weather was bad, so the friends were unable to ride\r\nwaves. However, they decided to spent their time building sand\r\ncastles.At the end of the day there were castles built by friends.\r\nCastles are numbered from to , and the height of the -th castle is equal\r\nto . When friends were about to leave, Squidward noticed, that castles\r\nare not ordered by their height, and this looks ugly. Now friends are\r\ngoing to reorder the castles in a way to obtain that condition holds for\r\nall from to .Squidward suggested the following process of sorting\r\ncastles: Castles are split into groups of castles. Therefore the block\r\nfrom to will include castles . A block may consist of a single castle.\r\nThe partitioning is chosen in such a way that every castle is a part of\r\none block. Each block is sorted independently from other blocks, that is\r\nthe sequence becomes sorted. The partitioning should satisfy the\r\ncondition that after each block is sorted, the sequence becomes sorted\r\ntoo. This may always be achieved by saying that the whole sequence is a\r\nsingle block. Even Patrick understands that increasing the number of\r\nblocks in partitioning will ease the sorting process. Now friends ask\r\nyou to count the maximum possible number of blocks in a partitioning\r\nthat satisfies all the above requirements.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nint a[100005], lmax[100005], rmin[100005];\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  for (int i = 1; i <= n; i++) {\n    scanf(\"%d\", &a[i]);\n  }\n  \n  for (int i = 1; i <= n; i++) {\n    lmax[i] = max(lmax[i - 1], a[i]);\n  }\n  rmin[n + 1] = 1111111111;\n  for (int i = n; i >= 1; i--) {\n    rmin[i] = min(rmin[i + 1], a[i]);\n  }\n  int ans = 0;\n  for (int i = 1; i < n; i++) {\n    if (lmax[i] <= rmin[i + 1]) {\n      ans++;\n    }\n  }\n  printf(\"%d\\n\", ans + 1);\n  return 0;\n}\n\n"], "input": "", "output": "", "tags": ["sortings"], "dificulty": "1600", "interactive": false}