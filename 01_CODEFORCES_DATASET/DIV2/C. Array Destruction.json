{
    "link": "https://codeforces.com//contest/1474/problem/C",
    "problemId": "870482",
    "problem_idx": "C",
    "shortId": "1474C",
    "contest_number": "1474",
    "problem_submissions": {
        "E": [
            104828368,
            104825250,
            104827801,
            104822469,
            104822968,
            104825131,
            104832974,
            104811012,
            104834815,
            104836057,
            104786622,
            104834179,
            104835602,
            104835107,
            104819950,
            104895130,
            104882601,
            104882491,
            104822858
        ],
        "D": [
            104803255,
            104806609,
            104803024,
            104811001,
            104809350,
            104807802,
            104813937,
            104829181,
            104824996,
            104821358,
            104809387,
            104820702,
            104821421,
            104825040,
            104833883,
            104796190,
            104794553,
            104806036,
            104805452,
            104811623
        ],
        "C": [
            104789142,
            104791190,
            104786189,
            104802722,
            104796149,
            104800127,
            104797483,
            104805966,
            104792346,
            104794052,
            104822570,
            104797300,
            104791406,
            104805588,
            104813805,
            104788832,
            104801037,
            104795624,
            104794599,
            104838458
        ],
        "B": [
            104775373,
            104776212,
            104776559,
            104780629,
            104776012,
            104787737,
            104785829,
            104784413,
            104779863,
            104778330,
            104827451,
            104777621,
            104780062,
            104783179,
            104774681,
            104778495,
            104779543,
            104781042,
            104777052,
            104790738
        ],
        "A": [
            104773322,
            104773959,
            104773453,
            104773717,
            104779601,
            104775931,
            104776918,
            104778778,
            104773943,
            104773918,
            104829555,
            104773504,
            104773695,
            104774435,
            104774622,
            104773540,
            104774168,
            104774408,
            104773478,
            104781204
        ]
    },
    "name": "C. Array Destruction",
    "statement": "You found a useless array a of 2n positive integers. You have realized\r\nthat you actually don’t need this array, so you decided to throw out all\r\nelements of a.It could have been an easy task, but it turned out that\r\nyou should follow some rules: In the beginning, you select any positive\r\ninteger x. Then you do the following operation n times: select two\r\nelements of array with sum equals x; remove them from a and replace x\r\nwith maximum of that two numbers. For example, if initially a = [3, 5,\r\n1, 2], you can select x = 6. Then you can select the second and the\r\nthird elements of a with sum 5 + 1 = 6 and throw them out. After this\r\noperation, x equals 5 and there are two elements in array: 3 and 2. You\r\ncan throw them out on the next operation.Note, that you choose x before\r\nthe start and can’t change it as you want between the\r\noperations.Determine how should you behave to throw out all elements of\r\na.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nstruct item{\n\tlong long a,b;\n};\nvoid solve(){\n\tlong long n,i,j=-1,k,mxm=-1;\n\tcin>>n;\n\tn*=2;\n\tlong long a[n];\n\tfor(i=0;i<n;i++){\n\t\tcin>>a[i];\n\t}\n\tfor(i=0;i<n;i++){\n\t\tif(mxm<a[i]){\n\t\t\tmxm=a[i];\n\t\t\tj=i;\n\t\t}\n\t}\n\tfor(i=0;i<n;i++){\n\t\tif(j==i){\n\t\t\tcontinue;\n\t\t}\n\t\tvector<item> bucket;\n\t\tmultiset<long long> ms;\n\t\tfor(k=0;k<n;k++){\n\t\t\tms.insert(a[k]);\n\t\t}\n\t\tlong long x=mxm+a[i],f=1;\n\t\twhile(ms.empty()==false){\n\t\t\tlong long mx=*ms.rbegin();\n\t\t\tms.erase(ms.find(mx));\n\t\t\tif(ms.find(x-mx)==ms.end()){\n\t\t\t\tf=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tms.erase(ms.find(x-mx));\n\t\t\titem it;\n\t\t\tit.a=mx,it.b=x-mx;\n\t\t\tbucket.emplace_back(it);\n\t\t\tswap(x,mx);\n\t\t}\n\t\tif(f){\n\t\t\tcout<<\"YES\"<<endl;\n\t\t\tcout<<mxm+a[i]<<endl;\n\t\t\tfor(item it:bucket)\n\t\t\t\tcout<<it.a<<' '<<it.b<<endl;\n\t\t\treturn;\n\t\t}\n\t}\n\tcout<<\"NO\"<<endl;\n}\nint main(){\n\tios_base::sync_with_stdio(0);\n\tcin.tie(NULL);\n\tcout.tie(NULL);\n\tlong long t=1;\n\tcin>>t;\n\twhile(t--){\n\t\tsolve();\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "data structures",
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Array Destruction.json",
    "editorial_link": "https://codeforces.com//blog/entry/86933",
    "editorial": "Hint : How does changes after each operation?Hint : Suppose, that you\r\nknow . What pairs of elements can you throw out now?Hint : Suppose, that\r\nyou did some operations. Note, that if you have integer that is greater\r\nor equal to and is still in array , you canât remove from , thus you\r\ncanât throw out all elements of .Hint : You donât know only before the\r\nfirst operation and .Solution:Since all integers are positive, , thus\r\ndecreaces after each operation.Suppose that we have integers in our\r\narray. If we throw out , becomes equal and we canât throw out any time\r\nlater. So, we should throw out the biggest element of array on each\r\noperation.If we know and the biggest element of array, we can easily\r\ndetermine the second element we throw out on this operation. We can try\r\nall possibilities of the second element of array we throw out on the\r\nfirst operation. will become equal the biggest element of initial array.\r\nAfter that we put all other elements in multiset and just simulate\r\nopertations by taking from and (if it doesnât exists, we canât throw out\r\nall elements) and replacing with .Total time complexity: .There is also\r\na solution without set, that runs in .\r\n",
    "hint": [
        "Hint 1 Hint : How does changes after each operation?",
        "Hint 2 Hint : Suppose, that you know . What pairs of elements can you throw out now?",
        "Hint 3 Hint : Suppose, that you did some operations. Note, that if you have integer that is greater or equal to and is still in array , you can't remove from , thus you can't throw out all elements of .",
        "Hint 4 Hint : You don't know only before the first operation and ."
    ]
}