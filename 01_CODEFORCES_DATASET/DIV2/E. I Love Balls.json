{
    "link": "https://codeforces.com//contest/1983/problem/E",
    "problemId": "2739880",
    "problem_idx": "E",
    "shortId": "1983E",
    "contest_number": "1983",
    "problem_submissions": {
        "A": [
            269278635,
            269224195,
            269223849,
            269226514,
            269225288,
            269224120,
            269223887,
            269227486,
            269224712,
            269226231,
            269238169,
            269260779,
            269225102,
            269240926,
            269224023,
            269229049,
            269229008,
            269229437,
            269227958,
            269225179
        ],
        "B": [
            269278056,
            269230788,
            269229550,
            269238075,
            269239775,
            269233840,
            269232426,
            269237259,
            269236179,
            269236169,
            269241163,
            269259016,
            269240024,
            269241196,
            269235107,
            269248703,
            269237529,
            269237369,
            269239496,
            269241230
        ],
        "C": [
            269275559,
            269239407,
            269240124,
            269245784,
            269247404,
            269241159,
            269249194,
            269246484,
            269242664,
            269245963,
            269247870,
            269238276,
            269244413,
            269249774,
            269246281,
            269260121,
            269247344,
            269247358,
            269248698,
            269249698
        ],
        "D": [
            269272884,
            269243672,
            269246000,
            269251406,
            269251795,
            269246010,
            269251878,
            269256401,
            269252027,
            269252217,
            269233789,
            269246546,
            269246776,
            269243749,
            269249916,
            269266016,
            269254304,
            269252415,
            269266726,
            269258898
        ],
        "E": [
            269270622,
            269249510,
            269250892,
            269257523,
            269260300,
            269262071,
            269262617,
            269264482,
            269265164,
            269262684,
            269292411,
            269254378,
            269261706,
            269275920,
            269289749,
            269263092,
            269288046,
            269277163,
            269273777,
            269273251
        ],
        "F": [
            269262701,
            269255388,
            269260448,
            269269019,
            269272052,
            269277444,
            269269564,
            269275950,
            269279316,
            269281347,
            269264892,
            269293501,
            269287451,
            269340337,
            269340202,
            269285676,
            269275010,
            269281603,
            269272906,
            269290579,
            269289233,
            269284840
        ],
        "G": [
            269252950,
            269304269,
            269304164,
            269349906
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131268",
    "editorial": "When there are no special balls, Alice and Bob alternately pick balls\r\nstarting with Alice. This means Alice picks balls if is odd or if is\r\neven. The total value of all balls is . On average, Aliceâs score is\r\n.With special balls, the picking order can be interrupted, allowing the\r\nsame player to pick again. We need to distribute special balls into\r\npossible positions (gaps). The expected number of special balls picked\r\nby Alice can be derived as the expected number of gaps encountered by\r\nAlice () times the expected number of special balls per gap(). The\r\nformula is .Expected value without special balls: . Expected special\r\nballs for Alice: . Expected normal balls for Alice when there are\r\nnon-zero special balls: Therefore, expected score of Alice: Similarly,\r\nexpected score of Bob:\r\n",
    "name": "E. I Love Balls",
    "statement": "Alice and Bob are playing a game. There are n balls, out of which k are\r\nspecial. Each ball has a value associated with it. The players play turn\r\nby turn. In each turn, the player randomly picks a ball and adds the\r\nvalue of the ball to their score, which is 0 at the beginning of the\r\ngame. The selected ball is removed from the game. If the ball was\r\nspecial, the same player takes the next turn if at least one ball is\r\nremaining. If the ball picked was not special, the next player plays\r\ntheir turn.They play this game until no balls are remaining in the game.\r\nAlice plays first.Find the expected score that both the players have at\r\nthe end of the game modulo 10^9+7. Formally, let M = 10^9+7. It can be\r\nshown that the answer can be expressed as an irreducible fraction\r\nfrac{p}{q}, where p and q are integers and q\r\nnot\r\nequiv 0\r\npmod{M}. Output the integer equal to p\r\ncdot q^{-1}\r\nbmod M. In other words, output such an integer x that 0\r\nle x < M and x\r\ncdot q\r\nequiv p\r\npmod{M}.\r\n",
    "solutions": [
        "// Problem: E. I Love Balls// Contest: Codeforces - Codeforces Round #956 (Div. 2) and ByteRace 2024// URL: https://mirror.codeforces.com/contest/1983/problem/E// Memory Limit: 256 MB// Time Limit: 2000 ms// // Powered by CP Editor (https://cpeditor.org) // Author: EnucAI#include <bits/stdc++.h> #ifdef LOCAL#include \"debug.h\"#else#define D(...) ((void)0)#endif using ll = long long;using ull = unsigned long long;using ld = long double;using vi = std::vector<int>;using pii = std::pair<int, int>; constexpr int inf = std::numeric_limits<int>::max() / 2;constexpr ll infll = std::numeric_limits<ll>::max() / 2;constexpr ld eps = 1e-8l; #define all(x) (x).begin(), (x).end()#define sz(x) ((int)((x).size()))#define rep(i, j, k) for (int i = (j); i <= (k); i++)#define per(i, j, k) for (int i = (j); i >= (k); i--)#define fi first#define se second#define mp std::make_pair#define pb push_back#define ppb pop_back#define eb emplace_back template <class X, class Y> void chkmax(X &x, const Y &y) { if (x < y) x = y; }template <class X, class Y> void chkmin(X &x, const Y &y) { if (x > y) x = y; } template <int P>class mod_int {  using Z = mod_int; private:  static int mo(int x) { return x < 0 ? x + P : x; } public:  int x;  int val() const { return x; }  mod_int() : x(0) {}  template <class T>  mod_int(const T &x_) : x(x_ >= 0 && x_ < P ? static_cast<int>(x_) : mo(static_cast<int>(x_ % P))) {}  bool operator==(const Z &rhs) const { return x == rhs.x; }  bool operator!=(const Z &rhs) const { return x != rhs.x; }  Z operator-() const { return Z(x ? P - x : 0); }  Z pow(ll k) const {    Z res = 1, t = *this;    while (k) {      if (k & 1) res *= t;      if (k >>= 1) t *= t;    }    return res;  }  Z &operator++() {    x < P - 1 ? ++x : x = 0;    return *this;  }  Z &operator--() {    x ? --x : x = P - 1;    return *this;  }  Z operator++(int) {    Z ret = x;    x < P - 1 ? ++x : x = 0;    return ret;  }  Z operator--(int) {    Z ret = x;    x ? --x : x = P - 1;    return ret;  }  Z inv() const { return pow(P - 2); }  Z &operator+=(const Z &rhs) {    (x += rhs.x) >= P && (x -= P);    return *this;  }  Z &operator-=(const Z &rhs) {    (x -= rhs.x) < 0 && (x += P);    return *this;  }  Z &operator*=(const Z &rhs) {    x = 1ULL * x * rhs.x % P;    return *this;  }  Z &operator/=(const Z &rhs) { return *this *= rhs.inv(); }#define setO(T, o)                                 \\  friend T operator o(const Z &lhs, const Z &rhs) {\\    Z res = lhs;                                   \\    return res o## = rhs;                          \\  }  setO(Z, +) setO(Z, -) setO(Z, *) setO(Z, /)#undef setO};constexpr int P = 1e9 + 7;using Z = mod_int<P>; constexpr int maxn = 4e5 + 5; int n, k, a[maxn]; Z fac[maxn], invfac[maxn];Z c(int n, int m) { return fac[n] * invfac[m] * invfac[n - m]; }Z calc(int n, int m) { return m ? c(n + m - 1, m - 1) : !n; } void work() {  std::cin >> n >> k;  rep(i, 1, n) std::cin >> a[i];  Z sa = 0, sb = 0;  rep(i, 1, k) sa += a[i];  rep(i, k + 1, n) sb += a[i];  Z ans = sb * ((n - k + 1) / 2) / (n - k);  int m = n - k + 1, cnt = (m + 1) / 2;  fac[0] = 1;  rep(i, 1, n) fac[i] = fac[i - 1] * i;  invfac[n] = fac[n].inv();  per(i, n, 1) invfac[i - 1] = invfac[i] * i;  Z ways = calc(k, m);  rep(i, 0, k) {    Z val = sa * i / k;    ans += calc(i, cnt) * calc(k - i, m - cnt) / ways * val;  }  std::cout << ans.val() << ' ' << (sa + sb - ans).val() << '\\n';} int main() {  std::cin.tie(nullptr)->sync_with_stdio(false);  int t;  std::cin >> t;  while (t--) work();}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math",
        "probabilities"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. I Love Balls.json",
    "hint": []
}