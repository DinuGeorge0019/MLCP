{"link": "https://codeforces.com//contest/1635/problem/E", "problemId": "1304251", "problem_idx": "E", "shortId": "1635E", "contest_number": "1635", "problem_submissions": {"F": [147074799, 147095752, 147102178, 147104275], "E": [147062187, 147069534, 147070601, 147071820, 147072661, 147071018, 147073981, 147068936, 147074142, 147080760, 147076462, 147075385, 147083209, 147071491, 147078900, 147071624, 147081688, 147079690, 147084319], "D": [147053217, 147052386, 147056630, 147057231, 147060557, 147060631, 147061935, 147063792, 147060134, 147103502, 147102937, 147062678, 147065535, 147062609, 147060941, 147064885, 147067705, 147078835, 147068792, 147065392, 147061320], "C": [147045170, 147044912, 147046365, 147045126, 147049650, 147049621, 147048160, 147047404, 147047609, 147047366, 147047254, 147054268, 147048212, 147053384, 147048532, 147046997, 147047963, 147049441, 147044930], "B": [147039520, 147040113, 147040251, 147041870, 147044628, 147040558, 147042641, 147039735, 147042175, 147042000, 147041459, 147043659, 147041936, 147043726, 147040154, 147042155, 147041291, 147040938, 147041038], "A": [147036699, 147037179, 147036802, 147037015, 147036879, 147036847, 147037144, 147036925, 147036758, 147037118, 147036774, 147037869, 147036975, 147036790, 147036876, 147036819, 147036907, 147037053, 147036783]}, "name": "E. Cars ", "statement": "There are n cars on a coordinate axis OX. Each car is located at an\r\ninteger point initially and no two cars are located at the same point.\r\nAlso, each car is oriented either left or right, and they can move at\r\nany constant positive speed in that direction at any moment.More\r\nformally, we can describe the i-th car with a letter and an integer: its\r\norientation ori_i and its location x_i. If ori_i = L, then x_i is\r\ndecreasing at a constant rate with respect to time. Similarly, if ori_i\r\n= R, then x_i is increasing at a constant rate with respect to time. We\r\ncall two cars if they never end up in the same point regardless of their\r\nspeed. In other words, they won\u2019t share the same coordinate at any\r\nmoment.We call two cars if they always end up in the same point\r\nregardless of their speed. In other words, they must share the same\r\ncoordinate at some moment.Unfortunately, we lost all information about\r\nour cars, but we do remember m relationships. There are two types of\r\nrelationships:1 i j i-th car and j-th car are .2 i j i-th car and j-th\r\ncar are .Restore the orientations and the locations of the cars\r\nsatisfying the relationships, or report that it is impossible. If there\r\nare multiple solutions, you can output any.Note that if two cars share\r\nthe same coordinate, they will intersect, but at the same moment they\r\nwill continue their movement in their directions.\r\n", "solutions": ["// Problem: E. Cars \n// Contest: Codeforces Round #772 (Div. 2)\n// URL: https://codeforces.com/contest/1635/problem/E\n// Memory Limit: 512 MB\n// Time Limit: 2000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n//And in that light,I find deliverance.\n#include<bits/stdc++.h>\n// #pragma GCC optimize(\"Ofast\")\n// #pragma GCC optimize(\"unroll-loops\")\n// #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\nusing namespace std;\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nint op[200003],x[200003],y[200003];\nvector<int> e[200003],ee[200003];\nint col[200003];\nint ans[200003],deg[200003];\nvoid dfs(int x)\n{\n\tfor(int y:e[x]) if(y!=x) \n\t{\n\t\tif(col[y]==-1) col[y]=col[x]^1,dfs(y);\n\t\telse if(col[x]==col[y]) puts(\"NO\"),exit(0);\n\t}\n}\nsigned main()\n{\n\tmemset(col,-1,sizeof(col));\n\tint n=read(),m=read();\n\tfor(int i=1; i<=m; ++i) op[i]=read(),x[i]=read(),y[i]=read(),\n\te[x[i]].push_back(y[i]),e[y[i]].push_back(x[i]);\n\tfor(int i=1; i<=n; ++i) if(col[i]==-1) col[i]=0,dfs(i);\n\tqueue<int> q;\n\tfor(int i=1; i<=m; ++i)\n\t\tif(op[i]==1)\n\t\t{\n\t\t\tif(col[x[i]])//<-- y[i] x[i] --> \n\t\t\t{\n\t\t\t\t++deg[x[i]],ee[y[i]].push_back(x[i]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++deg[y[i]],ee[x[i]].push_back(y[i]);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(col[x[i]])//x[i] --> <-- y[i] \n\t\t\t{\n\t\t\t\t++deg[y[i]],ee[x[i]].push_back(y[i]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++deg[x[i]],ee[y[i]].push_back(x[i]);\n\t\t\t}\n\t\t}\n\tfor(int i=1; i<=n; ++i) if(!deg[i]) q.push(i);\n\tint cnt=0;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tans[x]=++cnt;q.pop();\n\t\tfor(int y:ee[x]) if(!--deg[y]) q.push(y);\n\t}\n\tif(cnt!=n) puts(\"NO\"),exit(0);\n\tputs(\"YES\");\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tif(col[i]) putchar('R');\n\t\telse putchar('L');\n\t\tprintf(\" %d\\n\",ans[i]);\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["2-sat", "constructive algorithms", "dfs and similar", "dsu", "graphs", "greedy", "sortings"], "dificulty": "2200", "interactive": false}