{
    "link": "https://codeforces.com//contest/94/problem/A",
    "problemId": "492",
    "problem_idx": "A",
    "shortId": "94A",
    "contest_number": "94",
    "problem_submissions": {
        "E": [
            521553,
            521880,
            522467,
            526155,
            523146,
            523157
        ],
        "D": [
            519365,
            518958,
            518305,
            519392,
            518800,
            520161,
            521011,
            521143,
            520319,
            520841,
            520217,
            521120,
            518685,
            520557,
            518998
        ],
        "C": [
            517626,
            517507,
            517218,
            517667,
            518042,
            517867,
            517038,
            518011,
            517625,
            518595,
            520630,
            519397,
            516288,
            520795,
            521799
        ],
        "B": [
            515646,
            515796,
            515893,
            515624,
            515532,
            516196,
            515676,
            516322,
            516160,
            515597,
            515907,
            516405,
            521550,
            516168,
            515483
        ],
        "A": [
            515017,
            514950,
            515359,
            514955,
            515050,
            515155,
            514834,
            515016,
            515211,
            515499,
            514941,
            514917,
            520686,
            514959,
            515020
        ]
    },
    "name": "A. Restoring Password",
    "statement": "Igor K. always used to trust his favorite Kashpirovsky Antivirus. That\r\nis why he didn’t hesitate to download the link one of his groupmates\r\nsent him via QIP Infinium. The link was said to contain \"some real funny\r\nstuff about swine influenza\". The antivirus had no objections and Igor\r\nK. run the flash application he had downloaded. Immediately his QIP\r\nInfinium said: \"invalid login/password\".Igor K. entered the ISQ from his\r\nadditional account and looked at the info of his main one. His name and\r\nsurname changed to \"H1N1\" and \"Infected\" correspondingly, and the\r\n\"Additional Information\" field contained a strange-looking binary code\r\ncharacters in length, consisting of zeroes and ones. \"I’ve been hacked\"\r\nthought Igor K. and run the Internet Exploiter browser to quickly type\r\nhis favourite search engine’s address.Soon he learned that it really was\r\na virus that changed ISQ users’ passwords. Fortunately, he soon found\r\nout that the binary code was actually the encrypted password where each\r\ngroup of characters stood for one decimal digit. Accordingly, the\r\noriginal password consisted of decimal digits.Help Igor K. restore his\r\nISQ account by the encrypted password and encryption specification.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <string>\n#include <numeric>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n#include <sstream>\n#include <cstring>\n#include <cstdio>\n#include <complex>\n#include <cassert>\n\nusing namespace std;\n\n//\ntypedef long long LL;\ntypedef pair<int,int> PII;\n#define MP make_pair\n#define VI vector<int>\n#define FOR(v,p,k) for(int v=p;v<=k;++v)\n#define FORD(v,p,k) for(int v=p;v>=k;--v)\n#define REP(i,n) for(int i=0;i<(n);++i)\n#define VAR(v,i) __typeof(i) v=(i)\n#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)\n#define PB push_back\n#define ST first\n#define ND second\n#define SIZE(x) (int)x.size()\n#define ALL(c) c.begin(),c.end()\n//\n#define rep(i,b) for(int i=(0);i<(b);++i)\n#define fo(i,a,b) for(int i=(a);i<=(b);++i)\n#define ford(i,a,b) for(int i=(a);i>=(b);--i)\n#define fore(a,b) for(__typeof((b).begin()) a = (b).begin();a!=(b).end();++a)\n#define vv vector\n#define pb push_back\n#define ll long long\n#define ld long double\n#define ss(a) (int)(a).size()\n#define all(x) (x).begin(),(x).end()\n#define clr(x,a) memset(x,a,sizeof(x))\n#define vi vv<int>\n#define vs vv<string>\ntemplate<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}\ntemplate<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}\n\nint cond = (ll)1;\n#define db(x) { if (cond > 0) { cond--; rep (xxx, 1) cerr << __LINE__ << \" \" << #x << \" \" << x << endl; cerr.flush(); } }\n\nvoid _main() {\n    string in;\n    cin>>in;\n    string let[10];\n    rep (i, 10) {\n        cin>>let[i];\n        db(let[i]);\n    }\n    rep (i, 8) {\n        rep (j, 10) {\n            int ok = 0;\n            rep (g, 10) if (in[i*10 + g] != let[j][g]) ok++;\n            db(i<<\" \"<<j<<\" \"<<ok);\n            if (ok == 0) {\n                db(i<<\" \"<<j);\n                cout << j;\n                break;\n            }\n        }\n    }\n    cout << endl;\n}\n\nint main(int argc, char ** argv) {\n    string p = \"../gcj/source/\" + string(\"\") + argv[0][strlen(argv[0])-1];\n//    if (argc >= 2 && strcmp(argv[1], \"q\") != 0) { freopen(argv[1],\"r\",stdin);}\n\n    rep (i, argc) if (strcmp(argv[i], \"1n\") == 0) { freopen(\"1.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"2n\") == 0) { freopen(\"2.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"3n\") == 0) { freopen(\"3.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"4n\") == 0) { freopen(\"4.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"5n\") == 0) { freopen(\"5.in\",\"r\",stdin);}\n\n    rep (i, argc) if (strcmp(argv[i], \"s0\") == 0) { freopen((p + \"-small-0.in\").c_str(),\"r\",stdin);freopen((p + \"-small-0.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"s1\") == 0) { freopen((p + \"-small-1.in\").c_str(),\"r\",stdin);freopen((p + \"-small-1.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"s2\") == 0) { freopen((p + \"-small-2.in\").c_str(),\"r\",stdin);freopen((p + \"-small-2.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"l0\") == 0) { freopen((p + \"-large-0.in\").c_str(),\"r\",stdin);freopen((p + \"-large-0.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"q\") == 0) cond = 1 << 30;\n    _main();\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Restoring Password.json",
    "editorial_link": "https://codeforces.com//blog/entry/2208",
    "editorial": "Password was very easy to restore. You should just iterate over groups of 10 characters in the first string and over all codes. Then, if some number's code is equal to the group - print that number.",
    "hint": []
}