{
    "link": "https://codeforces.com//contest/544/problem/B",
    "problemId": "27509",
    "problem_idx": "B",
    "shortId": "544B",
    "contest_number": "544",
    "problem_submissions": {
        "D": [
            11032012,
            11030561,
            11031995,
            11031987,
            11031076,
            11733855,
            11036523,
            12308236
        ],
        "C": [
            11028349,
            11025550,
            11028166,
            11027513,
            11029011,
            11025883,
            11023519,
            11025660,
            11026616,
            11026912,
            11027600,
            11030213,
            11026452,
            11026673,
            11028755,
            18268210,
            11027624,
            11028873,
            11029553,
            11028365,
            11029408
        ],
        "B": [
            11024290,
            11026185,
            11025669,
            11029854,
            11029782,
            11023653,
            11026411,
            11023531,
            11024274,
            11024308,
            11023437,
            11023757,
            11024285,
            11023489,
            11023113,
            11024136,
            11023333,
            11023666,
            11026341,
            11023637
        ],
        "A": [
            11022935,
            11033816,
            11022995,
            11025287,
            11022840,
            11023316,
            11022775,
            11022778,
            11022845,
            11022867,
            11022763,
            11022688,
            11022879,
            11022708,
            11022881,
            11023441,
            11022791
        ]
    },
    "name": "B. Sea and Islands",
    "statement": "A map of some object is a rectangular field consisting of rows and\r\ncolumns. Each cell is initially occupied by the sea but you can cover\r\nsome some cells of the map with sand so that exactly islands appear on\r\nthe map. We will call a set of sand cells to be if it is possible to get\r\nfrom each of them to each of them by moving only through sand cells and\r\nby moving from a cell only to a side-adjacent cell. The cells are called\r\nto be side-adjacent if they share a vertical or horizontal side. It is\r\neasy to see that islands do not share cells (otherwise they together\r\nform a bigger island).Find a way to cover some cells with sand so that\r\nexactly islands appear on the map, or determine that no such way exists.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nint n , k ;\n\nint main(){\n  cin >> n >> k ;\n  if(k > (n*n+1)/2) { printf(\"NO\") ;  return 0 ;} \n  \n  printf(\"YES\\n\") ;\n  for(int i=0 ; i<n ; i++){\n    int f=((i%2)? 1:0) ;\n    for(int j=0 ; j<n ; j++){\n       if(k) { cout << ((f)?\"S\":\"L\") ; if(!f) k-- ; }\n       else cout << \"S\" ; \n       f^=1 ;\n    }\n    puts(\"\") ;\n  } \n\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Sea and Islands.json",
    "editorial_link": "https://codeforces.com//blog/entry/17773",
    "editorial": "Itâs clear to understand, that optimal answer will consists of simple\r\ncells, for which following condition fullfills: the sum of indices of\r\nrow and column is even. We will try to put islands in such way, and if\r\nitâs impossible, we will report that answer is NO. Try to prove that\r\nthis solution is optimal. The jury solution: 11035691\r\n",
    "hint": []
}