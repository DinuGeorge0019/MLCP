{
    "link": "https://codeforces.com//contest/508/problem/D",
    "problemId": "21346",
    "problem_idx": "D",
    "shortId": "508D",
    "contest_number": "508",
    "problem_submissions": {
        "E": [
            9587610,
            9584813,
            9586421,
            9585135,
            9583814,
            9589053,
            9587449,
            9586484,
            9589963,
            9588638,
            9584850,
            9589523,
            9582441,
            9590322,
            9588666,
            9583017,
            9590629,
            9606435
        ],
        "D": [
            9585269,
            9592984,
            9592880,
            9606979,
            11955537,
            9597174,
            9607981,
            9591160
        ],
        "C": [
            9578155,
            9579052,
            9580254,
            9581709,
            9579236,
            9581849,
            9584375,
            9581929,
            9580398,
            9580036,
            9584567,
            9580689,
            9584970,
            9588863,
            9584808,
            9582586,
            9578299,
            9582444,
            9584975
        ],
        "B": [
            9575657,
            9576658,
            9575398,
            9576129,
            9576184,
            9577421,
            9578063,
            9577484,
            9575841,
            9575521,
            9580057,
            9577021,
            9576342,
            9586515,
            9578539,
            9578428,
            9577881,
            9580472
        ],
        "A": [
            9574439,
            9574503,
            9577415,
            9574774,
            9577057,
            9574902,
            9574502,
            9574812,
            9574701,
            9574474,
            9574846,
            9581748,
            9574597,
            9585159,
            9575359,
            9590306,
            9574725,
            9575399,
            9578528
        ]
    },
    "name": "D. Tanya and Password",
    "statement": "While dad was at work, a little girl Tanya decided to play with dad’s\r\npassword to his secret database. Dad’s password is a string consisting\r\nof characters. She has written all the possible three-letter continuous\r\nsubstrings of the password on pieces of paper, one for each piece of\r\npaper, and threw the password out. Each three-letter substring was\r\nwritten the number of times it occurred in the password. Thus, Tanya\r\nended up with pieces of paper.Then Tanya realized that dad will be upset\r\nto learn about her game and decided to restore the password or at least\r\nany string corresponding to the final set of three-letter strings. You\r\nhave to help her in this difficult task. We know that dad’s password\r\nconsisted of lowercase and uppercase letters of the Latin alphabet and\r\ndigits. Uppercase and lowercase letters of the Latin alphabet are\r\nconsidered distinct.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\nint get(char c) {\n    if (c >= 'a' && c <= 'z') {\n        return c - 'a';\n    } else {\n        if (c >= 'A' && c <= 'Z') {\n            return 26 + c - 'A';\n        } else {\n            return 52 + c - '0';\n        }\n    }\n}\n\nchar put(int v) {\n    //assert(v < 62);\n    if (v < 26) {\n        return v + 'a';\n    } else {\n        v -= 26;\n        if (v < 26) {\n            return v + 'A';\n        } else {\n            v -= 26;\n            return v + '0';\n        }\n    }\n}\n\nstring A(int v) {\n    int x = v / 62;\n    int y = v % 62;\n    string res(2, '0');\n    res[0] = put(x);\n    res[1] = put(y);\n    return res;\n}\n\nint main() {\n#ifdef HOME\n    freopen(\"input.txt\", \"r\", stdin);\n    //freopen(\"output.txt\", \"w\", stdout);\n#else\n\n#endif\n\n    int k;\n    cin >> k;\n\n    const int n = 62 * 62;\n\n    vector<int> g[n];\n\n    memset(g, 0, sizeof(g));\n\n    vector<int> inDegree(n);\n    vector<int> outDegree(n);\n\n    for (int i = 0; i < k; ++i) {\n        string s;\n        cin >> s;\n        int from = get(s[0]) * 62 + get(s[1]);\n        int to = get(s[1]) * 62 + get(s[2]);\n        g[from].push_back(to);\n        inDegree[to]++;\n        outDegree[from]++;\n    }\n\n    //cerr << \"OK\" << endl;\n\n    int start = -1;\n\n    int c1 = 0, c2 = 0;\n\n    for (int i = 0; i < n; ++i) {\n        if (inDegree[i] == outDegree[i]) {\n            continue;\n        }\n        if (inDegree[i] > outDegree[i] + 1) {\n            cout << \"NO\\n\";\n            return 0;\n        }\n        if (outDegree[i] > outDegree[i] + 1) {\n            cout << \"NO\\n\";\n            return 0;\n        }\n        if (inDegree[i] == outDegree[i] + 1) {\n            ++c2;\n        }\n        if (outDegree[i] == inDegree[i] + 1) {\n            ++c1;\n            start = i;\n        }\n    }\n\n    if (c1 > 1 || c2 > 1) {\n        cout << \"NO\\n\";\n        return 0;\n    }\n    if (c1 != c2) {\n        cout << \"NO\\n\";\n        return 0;\n    }\n\n    if (start == -1) {\n        for (int i = 0; i < n; ++i) {\n            if (outDegree[i] > 0) {\n                start = i;\n                break;\n            }\n        }\n    }\n    vector<int> res;\n\n    vector<int> st;\n    st.push_back(start);\n    while (!st.empty()) {\n        int v = st.back();\n\n        if (g[v].empty()) {\n            res.push_back(v);\n            st.pop_back();\n        } else {\n            st.push_back(g[v].back());\n            g[v].pop_back();\n        }\n    }\n\n    if (res.size() != k + 1) {\n        puts(\"NO\");\n        return 0;\n    }\n\n    reverse(res.begin(), res.end());\n\n    puts(\"YES\");\n    cout << A(res[0]);\n    for (size_t i = 1; i < res.size(); ++i) {\n        cout << put(res[i] % 62);\n    }\n    cout << \"\\n\";\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Tanya and Password.json",
    "editorial_link": "https://codeforces.com/blog/entry/16048?locale=en",
    "editorial": "At first, let's convert data from input in directed graph. Vertexes in this graph will all strings with length equals to 2 and consisting of uppercase and lowercase letters of the latin alphabet. For all 3-letters strings from input  si's, let's add edge from vertex si[0]si[1] to si[1]si[2].\n\nNow we need to find in this graph Euler path. For this we can use Fleury's algorithm. It is worth noting, that Euler path consists, if count of vertexes, in wich in-degree and out-degree differs by one, less then 3, and in-degree and out-degree of others vertexes  even. If we can't find Euler path  print NO. Asymptotic behavior of this solution  O(m), where m  count of different 3-letters strings from input. It equals to number of edges in graphs.",
    "hint": []
}