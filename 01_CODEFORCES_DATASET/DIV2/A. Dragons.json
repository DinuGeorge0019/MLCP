{
    "link": "https://codeforces.com//contest/230/problem/A",
    "problemId": "1885",
    "problem_idx": "A",
    "shortId": "230A",
    "contest_number": "230",
    "problem_submissions": {
        "E": [
            2281369,
            2283553,
            2285030,
            2285047,
            2275013,
            2277312,
            2281959,
            2280926,
            2282812,
            2282942,
            2289756,
            2303849,
            2284350,
            2284110
        ],
        "D": [
            2279019,
            2282259,
            2281806,
            2284336,
            2468189,
            2293544,
            2293533,
            2293531,
            2292779,
            2280034,
            2280797,
            2282637,
            2281762,
            2282078,
            2282947
        ],
        "C": [
            2276837,
            2279164,
            2278509,
            2280041,
            2280782,
            2279772,
            2278719,
            2276895,
            2277991,
            2280210,
            2277389,
            2280622,
            2278662,
            2279358,
            2278439,
            2277863,
            2279847,
            2279222
        ],
        "B": [
            2275270,
            2276827,
            2276000,
            2275039,
            2278453,
            2275508,
            2275984,
            2274908,
            2281260,
            2276330,
            2275784,
            2276800,
            2275571,
            2275505,
            2276144,
            2275193,
            2276949,
            2275915
        ],
        "A": [
            2273678,
            2274800,
            2273664,
            2274083,
            2276565,
            2273916,
            2274258,
            2273731,
            2273800,
            2274208,
            2273713,
            2274806,
            2273983,
            2273830,
            2274358,
            2274055,
            2274259,
            2273895
        ]
    },
    "name": "A. Dragons",
    "statement": "Kirito is stuck on a level of the MMORPG he is playing now. To move on\r\nin the game, he\u2019s got to defeat all dragons that live on this level.\r\nKirito and the dragons have , which is represented by an integer. In the\r\nduel between two opponents the duel\u2019s outcome is determined by their\r\nstrength. Initially, Kirito\u2019s strength equals .If Kirito starts duelling\r\nwith the -th () dragon and Kirito\u2019s strength is not greater than the\r\ndragon\u2019s strength , then Kirito loses the duel and dies. But if Kirito\u2019s\r\nstrength is greater than the dragon\u2019s strength, then he defeats the\r\ndragon and gets a bonus strength increase by .Kirito can fight the\r\ndragons in any order. Determine whether he can move on to the next level\r\nof the game, that is, defeat all dragons without a single loss.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <algorithm>\n\nstruct drag_t{\n\n    int x, y;\n\n    void init(){\n        scanf(\"%d %d\" ,&x ,&y);\n    }\n\n    bool operator < (const drag_t& cmp) const{\n        return x < cmp.x;\n    }\n\n}drag[1010];\n\nint main(){\n\n    int s, n;\n    scanf(\"%d %d\" ,&s ,&n);\n\n    for(int i = 0; i < n; i++) drag[i].init();\n    std::sort(drag, drag + n);\n\n    for(int i = 0; i < n; i++){\n        if(s > drag[i].x) s += drag[i].y;\n        else{\n            puts(\"NO\");\n            return 0;\n        }\n    }\n    puts(\"YES\");\n\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Dragons.json",
    "editorial_link": "https://codeforces.com//blog/entry/5437",
    "editorial": "Observe that if Kirito fights a dragon whose strength is less than\r\nKirito\u00e2\u0080\u0099s strength, then Kirito does not lose anything in fact, he even\r\ngains a nonnegative strength increase. Taking note of this, let\u00e2\u0080\u0099s for\r\neach step choose some dragon whose strength is less than Kirito\u00e2\u0080\u0099s\r\ncurrent strength, and fight it. After performing some amount of these\r\nsteps we\u00e2\u0080\u0099ll eventually end up in one of these two situations: either all\r\ndragons are slain (then the answer is \"YES\"), or only dragons whose\r\nstrength is not less than Kirito\u00e2\u0080\u0099s strength remain (then the answer is\r\n\"NO\"). On each step we can choose a suitable dragon to fight either by\r\nsearching through all dragons or by sorting the dragons by strength in\r\nnon-descending order in advance. The complexity of the solution is or .\r\nSample solution: http://pastie.org/4897164 (archived copy)\r\n"
}