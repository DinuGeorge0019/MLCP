{"link": "https://codeforces.com//contest/118/problem/C", "problemId": "619", "problem_idx": "C", "shortId": "118C", "contest_number": "118", "problem_submissions": {"E": [744037, 745078, 744813, 745388, 745323, 745867, 745436, 743649, 746938, 747382, 916949, 916937, 745101, 744662, 746262, 745809, 747461, 745823, 746138], "D": [743430, 743260, 743613, 743901, 743105, 744593, 742112, 744619, 744423, 745827, 743409, 746775, 745410, 743985, 744866, 743911, 743861, 744184, 744358, 744533], "C": [743075, 741949, 742890, 743396, 742360, 743301, 743646, 747932, 743990, 743060, 744985, 747243, 742852, 748623, 744300, 747942, 746584], "B": [741723, 743683, 741482, 741838, 741312, 741497, 746089, 742393, 742319, 741483, 742136, 741733, 740956, 741809, 742820, 742009, 741676, 741556, 742466, 742218], "A": [741066, 743899, 740889, 741247, 744792, 740920, 740962, 741172, 741019, 740916, 741008, 741288, 741140, 741579, 741121, 741180, 741200, 741119]}, "name": "C. Fancy Number", "statement": "A car number in Berland consists of exactly digits. A number is called\r\nbeautiful if it has at least equal digits. Vasya wants to change the\r\ndigits in his car\u2019s number so that the number became beautiful. To\r\nreplace one of digits Vasya has to pay the sum of money, equal to the\r\nabsolute difference between the old digit and the new one.Help Vasya:\r\nfind the minimum sum of money he should pay to make the number of his\r\ncar beautiful. You should also find the resulting beautiful number. If\r\nthere are several such numbers, then print the lexicographically minimum\r\none.\r\n", "solutions": ["#include <iostream>\n#include <fstream>\n#include <cstdio>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n#include <string>\n#include <map>\n#include <cstring>\n\nusing namespace std;\n\n#define NextLine() { char c = getchar(); while (c != 10 && c != EOF) { c = getchar(); } }\n\nint n, k;\nint cnt[10];\nstring old;\n\nvoid Load()\n{\n\tmemset(cnt, 0, sizeof(cnt));\n\tscanf(\"%d%d\", &n, &k);\n\tint i;\n\told = \"\";\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tchar c = getchar();\n\t\twhile (! ((c >= '0') && (c <= '9'))) c = getchar();\n\t\tcnt[c - '0']++;\n\t\told += c;\n\t}\n}\n\nvoid Solve()\n{\n\tint i;\n\tint best = 0x7F7F7F7F;\n\tstring bs = \"\";\n\tfor (i = 0; i <= 9; i++)\n\t{\n\t\t//cerr << \"i = \" << i << \"\\n\";\n\t\tint cur = 0;\n\t\tint j;\n\t\tint num[10];\n\t\tmemset(num, 0, sizeof(num));\n\t\tfor (j = 0; j <= 9; j++)\n\t\t{\n\t\t\tnum[abs(j - i)] += cnt[j];\n\t\t}\n\t\t/*for (j = 0; j <= 9; j++)\n\t\t{\n\t\t\tcerr << num[j] << \" \";\n\t\t}\n\t\tcerr << \"\\n\";*/\n\t\tint cr = k, pos = 0;\n\t\twhile (cr > 0)\n\t\t{\n\t\t\tif (num[pos] >= cr)\n\t\t\t{\n\t\t\t\tnum[pos] = cr;\n\t\t\t\tpos++;\n\t\t\t\twhile (pos < 10) \n\t\t\t\t{\n\t\t\t\t\tnum[pos] = 0;\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcr -= num[pos];\n\t\t\tpos++;\n\t\t}\n\t\t/*cerr << \"num counted\\n\";\n\t\tfor (j = 0; j < 10; j++)\n\t\t{\n\t\t\tcerr << num[j] << \" \";\n\t\t}\n\t\tcerr << \"\\n\";*/\n\t\tstring neww = old;\n\t\tfor (j = 0; j < old.length(); j++)\n\t\t{\n\t\t\tif (num[abs((neww[j] - '0') - i)] > 0 &&\n\t\t\t\t(int)(neww[j] - '0') > i)\n\t\t\t{\n\t\t\t\tnum[abs((neww[j] - '0') - i)]--;\n\t\t\t\tcur += abs(neww[j] - '0' - i);\n\t\t\t\tneww[j] = (char)(i + '0');\n\t\t\t}\n\t\t}\n\t\tfor (j = old.length() - 1; j >= 0; j--)\n\t\t{\n\t\t\tif (num[abs((neww[j] - '0') - i)] > 0)\n\t\t\t{\n\t\t\t\tnum[abs((neww[j] - '0') - i)]--;\n\t\t\t\tcur += abs(neww[j] - '0' - i);\n\t\t\t\tneww[j] = (char)(i + '0');\n\t\t\t}\n\t\t}\n\t\tif (cur < best || (cur == best && neww < bs))\n\t\t{\n\t\t\tbest = cur;\n\t\t\tbs = neww;\n\t\t}\n\t}\n\tprintf(\"%d\\n%s\", best, bs.c_str());\n}\n\nint main()\n{\n\tLoad();\n\tSolve();\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["brute force", "greedy", "sortings", "strings"], "dificulty": "1900", "interactive": false}