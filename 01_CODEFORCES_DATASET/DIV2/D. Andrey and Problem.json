{"link": "https://codeforces.com//contest/443/problem/D", "problemId": "10509", "problem_idx": "D", "shortId": "443D", "contest_number": "443", "problem_submissions": {"D": [6920325, 6916566, 6917590, 6918097, 6920177, 6917285, 6920976, 6921353, 6922229, 6919679, 6920725, 6916330, 6920984, 6916768, 6918289], "C": [6916700, 6920227, 6920927, 6921420, 6918956, 6921762, 6918294, 6918027, 6919227, 6921621, 6920532, 6921893], "B": [6914810, 6917396, 6914725, 6915203, 6915357, 6915551, 6915724, 6915492, 6915913, 6916470, 6917359, 6917333, 6915305, 6915776, 6915944, 6915992], "A": [6913586, 6913341, 6913477, 6914120, 6913376, 6913571, 6913622, 6914280, 6913834, 6913392, 6914327, 6913573, 6919949, 6913342], "E": [6948171]}, "name": "D. Andrey and Problem", "statement": "Andrey needs one more problem to conduct a programming contest. He has\r\nfriends who are always willing to help. He can ask some of them to come\r\nup with a contest problem. Andrey knows one value for each of his fiends\r\nthe probability that this friend will come up with a problem if Andrey\r\nasks him.Help Andrey choose people to ask. As he needs only one problem,\r\nAndrey is going to be really upset if no one comes up with a problem or\r\nif he gets more than one problem from his friends. You need to choose\r\nsuch a set of people that maximizes the chances of Andrey not getting\r\nupset.\r\n", "solutions": ["using namespace std;\n\n#include \"cstdio\"\n#include \"iostream\"\n#include \"algorithm\"\n#include \"vector\"\n#include \"string\"\n#include \"cctype\"\n#include \"set\"\n\ntypedef long long Long;\n\ndouble p[ 102 ];\n\ndouble choose(int n) {\n    double ret = 0.0;\n\n    for (int i = 0; i < n; i++) {\n        double q = 1.0;\n\n        for (int j = 0; j < n; j++) if ( i != j ) q *= 1.0 - p[ j ];\n\n        ret += p[ i ] * q;\n    }\n\n    return ret;\n}\n\nint main() {\n    int n;\n\n    cin >> n;\n    for (int i = 0; i < n; i++) cin >> p[ i ];\n\n    sort( p, p + n );\n    reverse( p, p + n );\n\n    double ans = 0.0;\n\n    for (int i = 1; i <= n; i++) {\n        double r = choose( i );\n\n        fprintf(stderr, \"%d -> %.12lf\\n\", i, r);\n\n        ans = max( ans, r );\n    }\n\n    printf(\"%.12lf\\n\", ans);\n\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["dp", "greedy", "math", "probabilities", "sortings"], "dificulty": "1800", "interactive": false}