{
    "link": "https://codeforces.com//contest/75/problem/C",
    "problemId": "399",
    "problem_idx": "C",
    "shortId": "75C",
    "contest_number": "75",
    "problem_submissions": {
        "D": [
            384982,
            385991,
            384525,
            384834,
            384839,
            385091,
            385312,
            385411,
            385305,
            385211,
            385417,
            386039,
            385176,
            384867,
            394964
        ],
        "C": [
            384042,
            383483,
            383576,
            384129,
            383851,
            384490,
            383698,
            383909,
            384477,
            383838,
            383994,
            384507,
            384866,
            384204,
            386282,
            384164
        ],
        "B": [
            383618,
            384106,
            385087,
            383734,
            383356,
            383597,
            384237,
            383641,
            383456,
            385358,
            383400,
            383978,
            384400,
            387215,
            383552,
            383723
        ],
        "A": [
            383049,
            382879,
            382894,
            382934,
            382877,
            382996,
            383262,
            382978,
            383667,
            382943,
            382941,
            383102,
            383157,
            382990,
            383202
        ],
        "E": [
            3910444
        ]
    },
    "name": "C. Modified GCD",
    "statement": "Well, here is another math class task. In mathematics, GCD is the\r\ngreatest common divisor, and it\u2019s an easy task to calculate the GCD\r\nbetween two positive integers.A common divisor for two positive numbers\r\nis a number which both numbers are divisible by.But your teacher wants\r\nto give you a harder task, in this task you have to find the greatest\r\ncommon divisor between two integers and that is in a given range from to\r\n(inclusive), i.e. . It is possible that there is no common divisor in\r\nthe given range.You will be given the two integers and , then queries.\r\nEach query is a range from to and you have to answer each query.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <map>\n#include <iomanip>\n\n\nusing namespace std;\n\nlong long gcd(long long a, long long b) {\n  if (a < b) return gcd(b, a);\n  if (a % b == 0) return b;\n  return gcd (b, a % b);\n}\n\nvector <int> aa;\n\nint binsearch(int x) {\n  int l = 0;\n  int r = aa.size();\n  while (r - l > 1) {\n    int m = (r + l) / 2;\n    if (aa[m] > x)\n      r = m;\n    else\n      l = m;\n  }\n  return l;\n}\n\nint main() {\n // freopen (\"input.txt\", \"r\", stdin);\n // freopen (\"output.txt\", \"w\", stdout);\n  long long a, b;\n  cin >> a >> b;\n  int n;\n  cin >> n;\n  long long d = gcd(a, b);\n  aa.push_back(d);\n  aa.push_back(1);\n  for (int i = 2; i <= ceil(sqrt(1.0 * d)); ++i) {\n    if (d % i == 0) {\n      aa.push_back(i);\n      aa.push_back(d / i);\n    }\n  }\n  int l, r;\n  sort(aa.begin(), aa.end());\n  for (int i = 0; i < n; ++i) {\n    cin >> l >> r;\n    int pp = binsearch(r);\n    if (aa[pp] < l) {\n      cout << -1;\n    } else {\n      cout << aa[pp];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "number theory"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Modified GCD.json",
    "editorial_link": "https://codeforces.com//blog/entry/1715",
    "editorial": "In this problem you will need to generate all common divisors between a and b before answering any query.\nThe first step in this problem is to factorize a and b, you can use the trial division technique which runs in O(sqrt(N)), you can check getFactors function in my solutions.\nThen using a recursive function you can generate all divisors for a and b from their prime factors, you can check getDivisors function in my solutions.\nThen intersect the 2 sets of divisors for both to get all common divisors, you can do this in O(N+M) where N and M are the lengths of the 2 sets, and also you can do a trivial O(N*M) intersection algorithm, because the maximum number of divisors is not too big (it's 1344).\nNow for each query you need to find the largest common divisor which lies in the given range, you can do this by sorting all common divisors and do binary search for the largest one which lies in the given range. Also you can do this using linear search, because the total number of queries is not too big.\n\nAlso there is much shorter solution for this problem. Here is a hint for it, the GCD between a and b should be dividable by all common divisors of a and b."
}