{
    "link": "https://codeforces.com//contest/1139/problem/C",
    "problemId": "317128",
    "problem_idx": "C",
    "shortId": "1139C",
    "contest_number": "1139",
    "problem_submissions": {
        "F": [
            51641186,
            51646762,
            109435140,
            51647787,
            51858420,
            51784923,
            51643584,
            51652352
        ],
        "E": [
            51636168,
            51644116,
            51640560,
            51642622,
            51644323,
            51644757,
            51643892,
            51845610,
            51647025,
            51647374,
            51647485,
            51647776,
            51635005,
            51638235,
            51639153,
            51639250,
            51638517,
            72001197,
            51662877
        ],
        "D": [
            51642032,
            51635420,
            51636603,
            51637368,
            51636440,
            51639381,
            51643782,
            51845601,
            51642527,
            51640197,
            51643918,
            51642858,
            51827413,
            51649480,
            51908875,
            51638589,
            51637429
        ],
        "C": [
            51630148,
            51629252,
            51628342,
            51628293,
            51633819,
            51633228,
            51629514,
            51845597,
            51631001,
            51631632,
            51635078,
            51636507,
            51631091,
            51631860,
            51631510,
            51630390,
            51632287,
            51636060,
            51629126,
            51630229
        ],
        "B": [
            51627583,
            51626711,
            51625352,
            51626461,
            51626658,
            51627929,
            51626015,
            51845593,
            51628451,
            51628233,
            51627332,
            51628138,
            51627935,
            51626813,
            51626814,
            51626137,
            51629187,
            51627498,
            51626295,
            51627320
        ],
        "A": [
            51623887,
            51624025,
            51623702,
            51623814,
            51624826,
            51624571,
            51623799,
            51845581,
            51625089,
            51624357,
            51625210,
            51626607,
            51624278,
            51623873,
            51625020,
            51624141,
            51624276,
            51623680,
            51624248,
            51623966
        ]
    },
    "name": "C. Edgy Trees",
    "statement": "You are given a tree (a connected undirected graph without cycles) of n\r\nvertices. Each of the n - 1 edges of the tree is colored in either black\r\nor red.You are also given an integer k. Consider sequences of k\r\nvertices. Let’s call a sequence [a_1, a_2,\r\nldots, a_k] if it satisfies the following criterion: We will walk a path\r\n(possibly visiting same edge/vertex multiple times) on the tree,\r\nstarting from a_1 and ending at a_k. Start at a_1, then go to a_2 using\r\nthe shortest path between a_1 and a_2, then go to a_3 in a similar way,\r\nand so on, until you travel the shortest path between a_{k-1} and a_k.\r\nIf you walked over at least one black edge during this process, then the\r\nsequence is good. Consider the tree on the picture. If k=3 then the\r\nfollowing sequences are good: [1, 4, 7], [5, 5, 3] and [2, 3, 7]. The\r\nfollowing sequences are not good: [1, 4, 6], [5, 5, 5], [3, 7, 3].There\r\nare n^k sequences of vertices, count how many of them are good. Since\r\nthis number can be quite large, print it modulo 10^9+7.\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\ntypedef long long llong;\ntypedef pair<int, int> pii;\n\nint n, k;\nvector<int> edge[100001];\n\nconst int mod = 1e9 + 7;\nint pw(int x, int p) {\n    int r = 1;\n    while (p) {\n        if (p & 1) r = (llong)r * x % mod;\n        x = (llong)x * x % mod;\n        p >>= 1;\n    }\n    return r;\n}\n\nint vis[100001];\nint dfs(int x) {\n    int ret = 1;\n    vis[x] = 1;\n    for (int i : edge[x]) {\n        if (vis[i]) continue;\n        ret += dfs(i);\n    }\n    return ret;\n}\n\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    cin >> n >> k;\n    for (int i = 1; i < n; ++i) {\n        int x, y, c;\n        cin >> x >> y >> c;\n        if (c) continue;\n        edge[x].push_back(y);\n        edge[y].push_back(x);\n    }\n    int ans = pw(n, k);\n    for (int i = 1; i <= n; ++i) {\n        if (vis[i]) continue;\n        ans += mod - pw(dfs(i), k);\n        ans %= mod;\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dsu",
        "graphs",
        "math",
        "trees"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Edgy Trees.json",
    "editorial_link": "https://codeforces.com//blog/entry/66101",
    "editorial": "Letâs find the number of bad sequences Sequences of length that do not\r\npass through any black edges. Then answer is all possible sequences\r\nminus the number of bad sequences.Thus, we can remove black edges from\r\nthe tree.Now the tree would be split into connected components.For every\r\nconnected component, if we start with being a node from this component,\r\nthen we cannot step outside this component, since doing so would mean\r\nthat we visit a black edge. But we can visit all the nodes in the\r\ncurrent connected component in any order. So if the size of the current\r\ncomponent is , then we have bad sequences corresponding to this\r\nconnected component.Thus, the overall answer is where is the size of\r\ndifferent connected components, considering only red edges.\r\n",
    "hint": []
}