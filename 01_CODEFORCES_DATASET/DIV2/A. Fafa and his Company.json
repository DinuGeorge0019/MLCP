{
    "link": "https://codeforces.com//contest/935/problem/A",
    "problemId": "158421",
    "problem_idx": "A",
    "shortId": "935A",
    "contest_number": "935",
    "problem_submissions": {
        "E": [
            35490294,
            35492393,
            35493358,
            35495709,
            35495541,
            35493647,
            35499422,
            35499276,
            35500262,
            35500719,
            35500162,
            35500658,
            35500728,
            35499258,
            35501222,
            35495668,
            35497342,
            35498886
        ],
        "D": [
            35486074,
            35488065,
            35489775,
            35490762,
            35489358,
            35485225,
            35484887,
            35488795,
            35492000,
            35489470,
            35491505,
            35486948,
            35491669,
            35491916,
            35491520,
            35489051,
            35488153,
            35487210
        ],
        "C": [
            35484257,
            35486190,
            35486639,
            35485548,
            35486272,
            35495170,
            35490125,
            35484897,
            35485714,
            35486561,
            35487356,
            35493330,
            35488504,
            35487181,
            35485279,
            35490239
        ],
        "B": [
            35480395,
            35480198,
            35480227,
            35479698,
            35479918,
            35483145,
            35479197,
            35480428,
            35479972,
            35480181,
            35482318,
            35482750,
            35481424,
            35486459,
            35478821,
            35479749,
            35480541,
            35480932
        ],
        "A": [
            35478116,
            35476883,
            35477273,
            35476648,
            35476835,
            35476757,
            35476798,
            35478023,
            35477705,
            35477042,
            35477472,
            35478918,
            35478074,
            35478028,
            35476637,
            35476753,
            35478890,
            35477831
        ],
        "F": [
            42089787,
            35507058
        ]
    },
    "name": "A. Fafa and his Company",
    "statement": "Fafa owns a company that works on huge projects. There are employees in\r\nFafa’s company. Whenever the company has a new project to start working\r\non, Fafa has to divide the tasks of this project among all the\r\nemployees.Fafa finds doing this every time is very tiring for him. So,\r\nhe decided to choose the best employees in his company as team leaders.\r\nWhenever there is a new project, Fafa will divide the tasks among only\r\nthe team leaders and each team leader will be responsible of some\r\npositive number of employees to give them the tasks. To make this\r\nprocess fair for the team leaders, each one of them should be\r\nresponsible for the same number of employees. Moreover, every employee,\r\nwho is not a team leader, has to be under the responsibility of exactly\r\none team leader, and no team leader is responsible for another team\r\nleader.Given the number of employees , find in how many ways Fafa could\r\nchoose the number of team leaders in such a way that it is possible to\r\ndivide employees between them evenly.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nint main(void) {\n  int n;\n  scanf(\"%d\", &n);\n  int cnt = 0;\n  for (int i = 1; i < n; ++i) {\n    if (n % i == 0) {\n      ++cnt;\n    }\n  }\n  printf(\"%d\\n\", cnt);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Fafa and his Company.json",
    "editorial_link": "https://codeforces.com//blog/entry/57889",
    "editorial": "Letâs try all values of from 1 to and check whether the remaining people\r\ncould be distributed equally over team leaders (that is, divides ). The\r\nnumber of valid values of is our answer. Complexity: .The problem is\r\nalso equivalent to finding the number of ways to divide the employees\r\ninto equal teams where each team contains more than one employee. It can\r\nalso be solved in by finding the number of divisors of .\r\n",
    "hint": []
}