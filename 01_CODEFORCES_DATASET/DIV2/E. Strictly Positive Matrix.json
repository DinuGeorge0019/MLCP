{
    "link": "https://codeforces.com//contest/402/problem/E",
    "problemId": "7182",
    "problem_idx": "E",
    "shortId": "402E",
    "contest_number": "402",
    "problem_submissions": {
        "D": [
            6050292,
            6050270,
            6036208,
            6037449,
            6037811,
            6039018,
            6037509,
            6040120,
            6039818,
            6037103,
            6036738,
            6052225,
            6039860,
            6039785,
            6039774,
            6040232
        ],
        "E": [
            6038241,
            6039548,
            6034213,
            6036604,
            6037264,
            6040176,
            6052113,
            6052116,
            6052103,
            6052109,
            6058832,
            6040173
        ],
        "C": [
            6035300,
            6033009,
            6036584,
            6037830,
            6033803,
            6032415,
            6034126,
            6031244,
            6034759,
            6038445,
            6040085,
            6032494,
            6038144,
            6039496,
            6032240,
            6032451,
            6036956,
            6037470,
            6036329
        ],
        "B": [
            6031930,
            6031993,
            6031901,
            6040691,
            6032027,
            6037381,
            6032782,
            6035428,
            6032969,
            6032924,
            6042413,
            6034839,
            6033326,
            6031868,
            6052288,
            6052274,
            6052263,
            6035033,
            6034789,
            6032424,
            6034406,
            6032490
        ],
        "A": [
            6030878,
            6030962,
            6031937,
            6034701,
            6030965,
            6033265,
            6031812,
            6031632,
            6036793,
            6034363,
            6031101,
            6031359,
            6030877,
            6031259,
            6031075,
            6033654,
            6031474,
            6031051
        ]
    },
    "name": "E. Strictly Positive Matrix",
    "statement": "You have matrix of size . Let\u2019s number the rows of the matrix from to\r\nfrom top to bottom, let\u2019s number the columns from to from left to right.\r\nLet\u2019s use to represent the element on the intersection of the -th row\r\nand the -th column. Matrix meets the following two conditions: for any\r\nnumbers () the following inequality holds: ; . Matrix is , if for any\r\nnumbers () the inequality holds. You task is to determine if there is\r\nsuch integer , that matrix is strictly positive.\r\n",
    "solutions": [
        "//Codeforces 236\n#include <cmath>\n\n#include <algorithm>\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nconst int INF = 1 << 30;\nconst int MAX_N = 2005;\n\n\nint N;\nvector<int> g[MAX_N], tg[MAX_N];\n\nbool is_scc();\nvoid dfs(int node, vector<int> g[], vector<bool>& visited, vector<int>& st);\n\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin >> N;\n\n  for (int i = 1, edge; i <= N; i += 1) {\n    for (int j = 1; j <= N; j += 1) {\n      cin >> edge;\n      if (edge) {\n        g[i].push_back(j);\n        tg[j].push_back(i);\n      }\n    }\n  }\n\n  if (is_scc()) {\n    cout << \"YES\";\n  } else  {\n    cout << \"NO\";\n  }\n\n  return 0;\n}\n\nbool is_scc() {\n  vector<int> sorted_nodes;\n  vector<bool> visited(N + 1, 0);\n \n  for (int i = 1; i <= N; ++i) {\n    if (!visited[i]) dfs(i, g, visited, sorted_nodes);\n  }\n  fill(visited.begin(), visited.end(), 0);\n \n  vector<int> scc;\n  int node = sorted_nodes.back();\n\n  dfs(node, tg, visited, scc);\n\n  return (int(scc.size()) == N);\n}\n \nvoid dfs(int node, vector<int> g[], vector<bool>& visited, vector<int>& st) {\n  visited[node] = true;\n  for (auto x : g[node]) {\n    if (!visited[x]) dfs(x, g, visited, st);\n  }\n  st.push_back(node);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "math"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Strictly Positive Matrix.json",
    "editorial_link": "https://codeforces.com//blog/entry/10972",
    "editorial": "Let\u00e2\u0080\u0099s look at the matrix as a connectivity matrix of some graph with n\r\nvertices. Moreover, if , then we have directed edge in the graph between\r\nnodes . Otherwise, if that graph does not contains directed edge between\r\npair of nodes . Let . What does means? is the number of paths of length\r\nexactly in our graph from vertex to vertex . Let is an integer, such\r\nthat . That is, we have a loop in the graph. So, if from the vertex\r\nachievable all other vertexes and vice versa, from all other vertices\r\nreachable vertex , then the answer is , otherwise the answer is . If\r\nreachability is missing, it is clear that for any . If reachability\r\nthere, we will be able to reach self-loop, use self-loop \"to twist\", and\r\nafter that we will go to some another vertex.\r\n"
}