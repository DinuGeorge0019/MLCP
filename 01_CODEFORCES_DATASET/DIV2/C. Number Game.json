{
    "link": "https://codeforces.com//contest/1370/problem/C",
    "problemId": "652385",
    "problem_idx": "C",
    "shortId": "1370C",
    "contest_number": "1370",
    "problem_submissions": {
        "F2": [
            84487930,
            84501037,
            84507034,
            84502122,
            84505842,
            84494417,
            84504172,
            84566845,
            84578526,
            84673821,
            84511966,
            84521155,
            84516268,
            84510958,
            84637167,
            84542732
        ],
        "F1": [
            84486378,
            84486419,
            84492617,
            84502436,
            84505676,
            84494227,
            84501907,
            84505799,
            84499630,
            84498065,
            84511746,
            84521030,
            84480006,
            84503644,
            84491858,
            84509184,
            84485122,
            84503318,
            84509115,
            84506881
        ],
        "E": [
            84464817,
            84468991,
            84473151,
            84479507,
            84475443,
            84500759,
            84489817,
            84460631,
            84470842,
            84474055,
            84482485,
            84496561,
            84465043,
            84479036,
            84484283,
            84492032,
            84480292,
            84478287,
            84477997
        ],
        "D": [
            84455500,
            84452319,
            84463814,
            84469488,
            84464677,
            84451453,
            84463855,
            84448741,
            84456676,
            84455689,
            84468315,
            84454815,
            84457156,
            84464597,
            84470092,
            84462687,
            84463427,
            84468065,
            84460953
        ],
        "C": [
            84440472,
            84440716,
            84454929,
            84448947,
            84446464,
            84442992,
            84450392,
            84441491,
            84448508,
            84447398,
            84459387,
            84446704,
            84452028,
            84452970,
            84461892,
            84451604,
            84450230,
            84447402,
            84456732
        ],
        "B": [
            84435577,
            84430992,
            84438860,
            84436667,
            84431532,
            84431988,
            84433331,
            84431260,
            84434049,
            84434058,
            84441995,
            84433852,
            84624590,
            84440409,
            84443832,
            84438516,
            84432500,
            84433721,
            84440325,
            84431147
        ],
        "A": [
            84423084,
            84423206,
            84424226,
            84425612,
            84423582,
            84423261,
            84424093,
            84424056,
            84423388,
            84425755,
            84429438,
            84426743,
            84423750,
            84423134,
            84428806,
            84425122,
            84423069,
            84423389,
            84423328
        ]
    },
    "name": "C. Number Game",
    "statement": "Ashishgup and FastestFinger play a game. They start with a number n and\r\nplay in turns. In each turn, a player can make of the following moves:\r\nDivide n by any of its odd divisors greater than 1. Subtract 1 from n if\r\nn is greater than 1. Divisors of a number include the number itself.The\r\nplayer who is loses the game.Ashishgup moves first. Determine the winner\r\nof the game if both of them play optimally.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint dfs(int n) {\n    if (n == 1) return 0;\n    if (n % 2 == 1) return 1;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) {\n            if (i % 2 == 1 && dfs(n / i) == 0) return 1;\n            if ((n / i) % 2 == 1 && i * i != n && dfs(i) == 0) return 1;\n        }\n    }\n    return (1^dfs(n - 1));\n}\n\nmain() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    int t, n;\n    cin >> t;\n    while (t--) {\n        cin >> n;\n        if (dfs(n)) cout << \"Ashishgup\" << '\\n';\n        else cout << \"FastestFinger\" << '\\n';\n    }\n    return 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "math",
        "number theory"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Number Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/79107",
    "editorial": ": wins for , where () and where is a prime else wins.:Letâs analyse the\r\nproblem for the following cases: Case : n is oddHere can divide by\r\nitself, since it is odd and hence , and loses. Here is an exception.\r\nCase : is even and has no odd divisors greater than Here is of the form\r\n. As has no odd divisors greater than , is forced to subtract it by\r\nmaking odd. So if , wins. For , is equal to , so wins. Case : is even\r\nand has odd divisorsIf is divisible by then can divide by its largest\r\nodd factor after which becomes of the form where , so wins. Otherwise\r\nmust be of the form , where is odd. If is prime, loses since he can\r\neither reduce by or divide it by both of which would be losing for him.\r\nIf is not prime then must be of the form where is prime and is any odd\r\nnumber . can win by dividing by .\r\n",
    "hint": []
}