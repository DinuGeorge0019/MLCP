{
    "link": "https://codeforces.com//contest/1981/problem/F",
    "problemId": "2672994",
    "problem_idx": "F",
    "shortId": "1981F",
    "contest_number": "1981",
    "problem_submissions": {
        "F": [
            263497142,
            263559226
        ],
        "E": [
            263476287,
            263464534,
            263479972,
            263479996,
            263481278,
            263484948,
            263487311,
            263488586,
            263490466,
            263488413,
            263485273,
            263486361,
            263491158,
            263492494,
            263487751,
            263490431,
            263594935,
            263475669,
            263731983
        ],
        "D": [
            263469280,
            263482604,
            263470136,
            263467974,
            263476735,
            263476815,
            263475122,
            263473573,
            263468370,
            263465514,
            263477018,
            263481941,
            263480436,
            263478668,
            263478475,
            263485875,
            263469409,
            263472129,
            263470882
        ],
        "C": [
            263456919,
            263468416,
            263459011,
            263454953,
            263461770,
            263457891,
            263464609,
            263463038,
            263456449,
            263472358,
            263463129,
            263464204,
            263463482,
            263460745,
            263470157,
            263458930,
            263460066,
            263458494,
            263461448
        ],
        "B": [
            263449078,
            263456587,
            263450957,
            263448611,
            263450566,
            263450086,
            263449888,
            263451971,
            263448293,
            263451226,
            263454153,
            263455701,
            263455723,
            263449188,
            263455405,
            263451294,
            263451169,
            263449953,
            263456283
        ],
        "A": [
            263445832,
            263446092,
            263445924,
            263445701,
            263447399,
            263445953,
            263446026,
            263448629,
            263445764,
            263445931,
            263446308,
            263445723,
            263447638,
            263446507,
            263449757,
            263445656,
            263446328,
            263445901,
            263446447
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129848",
    "editorial": "Let\u00e2\u0080\u0099s consider dp. Let denote the path extending upward within the\r\nsubtree rooted at , with the condition that this path does not include\r\nthe value . The value of ranges from . In this case, we can directly\r\ntake the MEX of this path as , because if the MEX is not , then the MEX\r\nwill be smaller, making this dp state suboptimal.Let denote the minimum\r\nresult of the of a path that extends outside the subtree of and is\r\nspecified to be (where is not included in the result). Since the of each\r\npath does not exceed , the values of range from to .Consider all the\r\ntransitions for the dp: If is a leaf, then: If has only one child, let\r\nthe child be . Let , then: If has two children, let the children be and\r\n. Let and . There are four possible transitions: Continuing the path\r\nfrom the subtree of , i.e., Continuing the path from the subtree of ,\r\ni.e., Creating a new path and merging the paths from both subtrees,\r\ni.e., Creating a new path without merging the paths from the two\r\nsubtrees, i.e., Let , then the transition can be written as follows:\r\nThis results in a time complexity of .In fact, we can prove that we only\r\nneed to consider MEX values up to (for , we only need to consider MEX\r\nvalues up to ). Therefore, the second dimension of the dp only needs to\r\nbe enumerated up to (or ).Also, we have a construction of a chain that\r\ncan achieve the MEX value of , which is enumerating from and listing all\r\nthe divisors of in descending order, such as .Time complexity: per test\r\ncase.Proof of the upper bound for MEX:Let\u00e2\u0080\u0099s only consider the case of a\r\nchain. For a fixed , consider a sequence like . We can divide it into\r\nsegments as follows:Where segments without have a MEX value , and\r\nsegments with have a MEX value .Let be the answer. Then, satisfies:\r\n(where is the number of occurrences of )Expanding, we get:Furthermore,\r\nfor segments like , if , then the term above can be reduced to (since\r\ncan be none of ). So, we have:Hence:This means we need occurrences of ,\r\nand since , we have .We also have:By fixing , we can binary search for\r\nthe largest satisfying the above condition, and for , we find .\r\n",
    "name": "F. Turtle and Paths on a Tree",
    "statement": "Piggy gave Turtle a ^{\r\ndagger} with n vertices and a sequence a_1, a_2,\r\nldots, a_n on his birthday. The binary tree is rooted at vertex 1.If a\r\nset of paths P =\r\n{(x_i, y_i)\r\n} in the tree covers each edge , then Turtle will think that the set of\r\npaths is . Note that a good set of paths can cover a vertex twice or\r\nmore.Turtle defines the of a set of paths as\r\nsum\r\nlimits_{(x, y)\r\nin P} f(x, y), where f(x, y) denotes the\r\ntext{MEX}^{\r\nddagger} of all a_u such that vertex u is on the simple path from x to y\r\nin the tree (including the starting vertex x and the ending vertex\r\ny).Turtle wonders the value over all good sets of paths. Please help him\r\ncalculate the answer!^{\r\ndagger}A binary tree is a tree where every non-leaf vertex has at most 2\r\nsons.^{\r\nddagger}\r\ntext{MEX} of a collection of integers c_1, c_2,\r\nldots, c_k is defined as the smallest integer x which does not occur in\r\nthe collection c. For example,\r\ntext{MEX} of [3, 3, 1, 4] is 2,\r\ntext{MEX} of [2, 3] is 1.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define LL long long#define LLL __int128#define uint unsigned#define ldb long double#define uLL unsigned long longusing namespace std;const int N=2.5e4+5,M=4e3+5,INF=1e9;int n,m,ans,a[N],p[N];vector<int>G[N];int f[N][M];inline void dfs(int u,int fa){\tif(G[u].size()==0){\t\tfill(f[u]+1,f[u]+m+1,0),f[u][a[u]]=INF;\t\tif(!fa)ans=(a[u]==1)+1;\t}\telse if(G[u].size()==1){\t\tdfs(G[u][0],u);\t\tcopy(f[G[u][0]]+1,f[G[u][0]]+m+1,f[u]+1);\t\tf[u][a[u]]=INF;\t\tint z=INF;\t\tfor(int i=1;i<=m;++i)z=min(z,f[u][i]+i);\t\tif(!fa)ans=z;\t\tfor(int i=1;i<=m;++i)if(i!=a[u])f[u][i]=min(f[u][i],z);\t}\telse{\t\tdfs(G[u][0],u),f[G[u][0]][a[u]]=INF;\t\tdfs(G[u][1],u),f[G[u][1]][a[u]]=INF;\t\tint lz=INF,rz=INF,z=INF;\t\tfor(int i=1;i<=m;++i)lz=min(lz,f[G[u][0]][i]+i),rz=min(rz,f[G[u][1]][i]+i);\t\tz=min(z,lz+rz);\t\tfor(int i=1;i<=m;++i)\t\t\tif(i!=a[u])\t\t\t\tf[u][i]=min(f[G[u][0]][i]+rz,lz+f[G[u][1]][i]),\t\t\t\tz=min(z,f[G[u][0]][i]+f[G[u][1]][i]+i);\t\t\telse f[u][i]=INF;\t\tif(!fa)ans=z;\t\tfor(int i=1;i<=m;++i)if(i!=a[u])f[u][i]=min(f[u][i],z);\t}}inline void MAIN(){\tcin>>n,m=min(n+1,4000);\tfor(int i=1;i<=n;++i)cin>>a[i],G[i].clear(),a[i]=min(a[i],m);\tfor(int i=2;i<=n;++i)cin>>p[i],G[p[i]].emplace_back(i);\tdfs(1,0);\tcout<<ans<<'\\n';}signed main(){    cin.tie(0)->sync_with_stdio(0);\tint t=1;cin>>t;while(t--)MAIN();    return 0;}/**/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "trees"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Turtle and Paths on a Tree.json"
}