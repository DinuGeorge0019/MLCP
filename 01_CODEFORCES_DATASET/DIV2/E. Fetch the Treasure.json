{
    "link": "https://codeforces.com//contest/312/problem/E",
    "problemId": "3077",
    "problem_idx": "E",
    "shortId": "312E",
    "contest_number": "312",
    "problem_submissions": {
        "E": [
            3778375
        ],
        "C": [
            3774702,
            3773864,
            3774792,
            3774689,
            3776105,
            3773907,
            3773846,
            3775050,
            3773635,
            3774279,
            3774399,
            3773754,
            3775215,
            3774292,
            3774384
        ],
        "B": [
            3773077,
            3774557,
            3779474,
            3775117,
            3773571,
            3772833,
            3772990,
            3773895,
            3772721,
            3773544,
            3773209,
            3774498,
            3773503,
            3773699
        ],
        "A": [
            3772354,
            3772684,
            3772223,
            3772222,
            3772433,
            3772649,
            3772082,
            3772196,
            3772425,
            3772220,
            3772483,
            3773026
        ],
        "D": [
            3778537,
            3783020
        ]
    },
    "name": "E. Fetch the Treasure",
    "statement": "Rainbow built cells in a row that are numbered from 1 to from left to\r\nright. There are cells with treasure. We call each of these cells\r\n\"Treasure Cell\". The -th \"Treasure Cell\" is the -th cell and the value\r\nof treasure in it is dollars.Then, Freda went in the first cell. For\r\nnow, she can go just cells forward, or return to the first cell. That\r\nmeans Freda was able to reach the 1st, ()-th, ()-th, ()-th cells and so\r\non.Then Rainbow gave Freda operations. Each operation is one of the\r\nfollowing three types: Add another method : she can also go just cells\r\nforward at any moment. For example, initially she has only one method .\r\nIf at some moment she has methods then she can reach all the cells with\r\nnumber in form , where some non-negative integer. Reduce the value of\r\nthe treasure in the -th \"Treasure Cell\" by dollars. In other words, to\r\napply assignment . Ask the value of the most valuable treasure among the\r\ncells Freda can reach. If Freda cannot reach any cell with the treasure\r\nthen consider the value of the most valuable treasure equal to 0, and do\r\nnothing. Otherwise take the most valuable treasure away. If several\r\n\"Treasure Cells\" have the most valuable treasure, take the \"Treasure\r\nCell\" with the minimum number (not necessarily with the minimum number\r\nof cell). After that the total number of cells with a treasure is\r\ndecreased by one. As a programmer, you are asked by Freda to write a\r\nprogram to answer each query.\r\n",
    "solutions": [
        "#include<iostream>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long int64;\nconst int N = 201000;\nstruct record {\n    int x,y;\n    bool operator < (const record &b) const {\n        return x==b.x?y>b.y:x<b.x;\n    }\n    record(){}\n    record(int _x,int _y) { x=_x,y=_y; }\n};\npriority_queue<record> seq;\nvector<int> R[N];\nqueue<int> que;\nint n,m,k,p,t,x,y;\nint c[N],v[N],F[N];\nint64 h;\nint64 d[N],a[N],pet[N];\n\nbool cmprec(int x,int y)\n{\n    return a[x]<a[y];\n}\n\nvoid work()\n{\n    for (int i=0;i<k;i++)\n        if (d[i]<1e18+12345) que.push(i),F[i]=1;\n    while (!que.empty())\n    {\n        int x=que.front(),y;\n        F[x]=0;\n        que.pop();\n        for (int i=0;i<p;i++)\n            if (d[y=(x+pet[i])%k]>d[x]+pet[i])\n            {\n                d[y]=d[x]+pet[i];\n                if (!F[y]) \n                    F[y]=1,que.push(y);\n            }\n    }\n    for (int i=0;i<k;i++)\n        while (R[i].size()&&a[R[i][R[i].size()-1]]>=d[i])\n        {\n            v[R[i][R[i].size()-1]]=1;\n            seq.push(record(c[R[i][R[i].size()-1]],R[i][R[i].size()-1]));\n            R[i].pop_back();\n        }\n}\n\nint main()\n{\n    cin>>h>>n>>m>>k;\n    for (int i=0;i<n;i++)\n    {\n        cin>>a[i]>>c[i];\n        a[i]--;\n        R[a[i]%k].push_back(i);\n    }\n    for (int i=0;i<k;i++)\n    {\n        sort(R[i].begin(),R[i].end(),cmprec);\n        d[i]=(int64)(1e18+20);\n    }\n    d[0]=0;\n    work();\n    while (m--)\n    {\n        cin>>t;\n        if (t==1)\n        {\n            cin>>pet[p++];\n            work();\n        }\n        else if (t==2)\n        {\n            cin>>x>>y;\n            c[--x]-=y;\n            if (v[x]) seq.push((record){c[x],x});\n        }\n        else\n        {\n            while (!seq.empty()&&seq.top().x!=c[seq.top().y]) seq.pop();\n            if (!seq.empty()) \n            {\n                cout<<seq.top().x<<endl;\n                c[seq.top().y]=0,seq.pop();\n            }\n            else\n                cout<<0<<endl;\n        }\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "graphs",
        "shortest paths"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Fetch the Treasure.json",
    "editorial_link": "https://codeforces.com//blog/entry/7785",
    "editorial": "Firstly, we solve such a problem: if we can go exactly k,k1,k2or kp cells forward each step, what cells can we reach?\n\nWe divide the H cells into k groups: Group 0,1k-1. The i-th cell should be in Group (i mod k).\n\nIf we reach Cell x in Group (x mod k), we can also reach Cell (x+kj , 1<=j<=p) in Group ((x+kj)mod k).\nIf we reach Cell x in Group (x mod k), we can also reach Cell (x+k) in the same group.\nLet D[i] be the minimum cell we can reach in Group i. Then we can reach all the cells which number are bigger then D[i] in Group i.\n\nRegard the groups as points. Regard k,k1,k2kp as edges. And use a Shortest-Path Algorithm to calculate all D[i].\n\nNotice that there are at most 20 operations of type 1, we are able to run such an algorithm after each of these operations. The total time complexity is O(20*k*20*log(k)) with Dijkstra.\n\nSecondly, we build a binary-heap to solve operations of type 2 and 3.\n\nType1  If a D[i] becomes smaller, we put the new cells we can reach into the heap.\nType2  Decrease a value of a node in the heap, or a cell in the Treasure Cell array.\nType3  Ask the biggest node in the heap and delete it.\nThese are basic operations of binary-heap. The time complexity is O(NlogN). In C++, you can also use priority_queue from STL and lazy-tags. So we can solve the whole problem in O(400klogk+NlogN).",
    "hint": []
}