{"link": "https://codeforces.com//contest/190/problem/D", "problemId": "1332", "problem_idx": "D", "shortId": "190D", "contest_number": "190", "problem_submissions": {"E": [1695983, 1695624, 1697050, 1695708, 1695790], "D": [1695462, 1695449, 1695835, 1695364, 1695377, 1695368, 1695946, 1696839, 1695863, 1695763, 1694579, 1694803, 1694964, 1696526, 1694501, 1695160], "C": [1694760, 1694875, 1695279, 1694796, 1694088, 1695233, 1696929, 1695405, 1695351], "B": [1692770, 1693945, 1696858, 1693150, 1695603, 1696081, 1696565], "A": [1691163, 1691408, 1691387, 1691381, 1691523, 1691170, 1691984, 1691301, 1691155, 1691192, 1691038, 1690947, 1691166, 1691782, 1695491, 1691072]}, "name": "D. Non-Secret Cypher", "statement": "Berland starts to seize the initiative on the war with Flatland. To\r\ndrive the enemy from their native land, the berlanders need to know\r\nexactly how many more flatland soldiers are left in the enemy\u2019s reserve.\r\nFortunately, the scouts captured an enemy in the morning, who had a\r\nsecret encrypted message with the information the berlanders needed so\r\nmuch.The captured enemy had an array of positive integers. Berland\r\nintelligence have long been aware of the flatland code: to convey the\r\nmessage, which contained a number , the enemies use an array of integers\r\n. The number of its subarrays, in which there are at least equal\r\nnumbers, equals . The number has long been known in the Berland army so\r\nGeneral Touristov has once again asked Corporal Vasya to perform a\r\nsimple task: to decipher the flatlanders\u2019 message.Help Vasya, given an\r\narray of integers and number , find the number of subarrays of the array\r\nof numbers , which has at least equal numbers. of array is an array,\r\nmade from its consecutive elements, starting from the -th one and ending\r\nwith the -th one: .\r\n", "solutions": ["#include <stdio.h>\n#include <string.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nlong long tt[400010];\nint a[400010],b[400010],r[400010];\nconst int MAXN = 400010;\nvector <int> g[400010];\nlong long read(int id)\n{\n    long long ans=0;\n    while (id>0)\n    {\n        ans+=tt[id];\n        id-=id&-id;\n    }\n    return ans;\n}\nvoid update(int id,int val)\n{\n    while (id<MAXN)\n    {\n        tt[id]+=val;\n        id+=id&-id;\n    }\n}\nbool cmp(int x,int y)\n{\n    return a[x]<a[y];\n}\nstruct node\n{\n    int ll,rr;\n};\nnode p[400010];\nbool cmp2(const node &a,const node &b)\n{\n    return a.ll<b.ll;\n}\nint main()\n{\n    int n,m;\n    while (scanf(\"%d%d\",&n,&m)==2)\n    {\n        for (int i=0; i<n; i++)\n            scanf(\"%d\",&a[i]);\n        for (int i=0; i<n; i++)\n            r[i]=i;\n        sort(r,r+n,cmp);\n        int now=-1;\n        for (int i=0; i<n; i++)\n        {\n            if (i==0||a[r[i-1]]!=a[r[i]]) now++;\n            b[r[i]]=now;\n        }\n        for (int i=0; i<=now; i++)\n            g[i].clear();\n        for (int i=0; i<n; i++)\n            g[b[i]].push_back(i);\n        memset(tt,0,sizeof(tt));\n        int cnt=0;\n        for (int i=0; i<=now; i++)\n        {\n            int len=g[i].size();\n            for (int j=m-1; j<len; j++)\n            {\n                p[cnt].ll=g[i][j-m+1]+1;\n                p[cnt++].rr=g[i][j]+1;\n            }\n        }\n        sort(p,p+cnt,cmp2);\n        if (cnt!=0)\n        {\n            int minn=p[cnt-1].rr;\n            for (int i=cnt-1;i>=0;i--)\n            {\n                minn=min(minn,p[i].rr);\n                p[i].rr=minn;\n            }\n            for (int i=0; i<cnt; i++)\n            {\n                int ll=p[i].ll,rr=p[i].rr;\n                if (i!=0) ll-=p[i-1].ll;\n                if (rr<ll) rr=ll;\n                update(rr,ll);\n                update(n+1,-ll);\n            }\n        }\n        long long ans=0;\n        for (int i=1; i<=n; i++)\n            ans+=read(i);\n        printf(\"%I64d\\n\",ans);\n    }\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["two pointers"], "dificulty": "1900", "interactive": false}