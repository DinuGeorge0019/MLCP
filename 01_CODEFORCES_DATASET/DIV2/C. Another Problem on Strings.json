{"link": "https://codeforces.com//contest/165/problem/C", "problemId": "1014", "problem_idx": "C", "shortId": "165C", "contest_number": "165", "problem_submissions": {"D": [1366499, 1366969, 1365112, 1367097, 1366684, 1365807, 1365962, 1368726, 1367643, 1365427, 1364667, 1370595, 1385240], "E": [1364192, 1364774, 1367313, 1365367, 1364379, 1368630, 1368754, 1367792, 1368549, 1365271, 1364231, 1368793, 1367116, 2473344, 1366372, 1367247, 1366533, 1367425], "C": [1362928, 1363517, 1362594, 1363696, 1366879, 1362613, 1362246, 1363281, 1364362, 1363392, 1367553, 1369077, 1364690, 2473167, 2473156, 1362666, 1363958, 1364223, 1365162, 1365345], "B": [1362163, 1362376, 1365799, 1362605, 1362500, 1363337, 1362770, 1362069, 1363813, 1363948, 1362915, 1369003, 1362557, 2473004, 2473001, 2472997, 1362110, 1362242, 1362516, 1363280, 1362708], "A": [1361696, 1361752, 1362836, 1361758, 1361587, 1361647, 1361570, 1361606, 1362825, 1365691, 1361805, 1362263, 1361965, 2472978, 2472975, 2472970, 1361665, 1361602, 1361734, 1362468, 1361751]}, "name": "C. Another Problem on Strings", "statement": "A string is , if it consists only of characters \"\" and \"\".String is a of\r\nstring if it has a non-zero length and can be read starting from some\r\nposition in string . For example, string \"\" has six substrings: \"\", \"\",\r\n\"\", \"\", \"\", \"\". Two substrings are considered different if their\r\npositions of occurrence are different. So, if some string occurs\r\nmultiple times, we should consider it the number of times it occurs.You\r\nare given a binary string . Your task is to find the number of its\r\nsubstrings, containing exactly characters \"\".\r\n", "solutions": ["#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <sstream>\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <string>\n#include <cassert>\n\nusing namespace std;\n\n//----------------------zjut_DD for Topcoder-------------------------------\ntypedef long long LL;\ntypedef pair<int,int> PII;\ntypedef vector<int> VI;\ntypedef vector<string> VS;\n#define PB push_back\n#define MP make_pair\n#define ff first\n#define ss second\n#define two(w) (1<<(w))\n#define test(x,w) (x&two(w))\n#define sz(v) (int)v.size()\n#define all(c) c.begin(),c.end() \n#define clr(buf,val) memset(buf,val,sizeof(buf))\n#define rep(i,l,r) for(int i=(l);i<(r);i++)\n#define repv(i,v)  for(int i=0;i<(int)v.size();i++)\n#define repi(it,c) for(typeof(c.begin()) it=c.begin();it!=c.end();++it)\n//------------------------------------------------------------------------\n\n\nchar s[1100000];\nint sum[1100000];\nint main(){\n\tint k;\n\twhile( scanf(\"%d %s\", &k, s+1)!=EOF ){\n\t\tint len=strlen(s+1);\n\t\trep(i, 1, len+1){\n\t\t\tsum[i]=sum[i-1]+(s[i]=='1');\n\t\t}\n\t\tLL ans=0;\n\t\trep(i, 1, len+1){\n\t\t\tint t1=sum[i-1]+k;\n\t\t\tif( sum[len]<t1 ) continue;\n\t\t\tint id1=lower_bound(sum+i, sum+len+1, t1)-sum;\n\t\t\tint id2=upper_bound(sum+i, sum+len+1, t1)-sum;\n\t\t\t\n\t\t\tans+=(id2-id1);\n\t\t}\n\t\tcout<<ans<<endl;\n\t}\n}\n\n\n\n\n"], "input": "", "output": "", "tags": ["binary search", "brute force", "dp", "math", "strings", "two pointers"], "dificulty": "1600", "interactive": false}