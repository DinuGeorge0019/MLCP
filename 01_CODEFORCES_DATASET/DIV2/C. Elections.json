{
    "link": "https://codeforces.com//contest/1020/problem/C",
    "problemId": "207010",
    "problem_idx": "C",
    "shortId": "1020C",
    "contest_number": "1020",
    "problem_submissions": {
        "D": [
            41489189,
            41489089,
            41486423,
            41490197,
            41489917,
            41487075,
            41490349,
            41489723,
            41491006,
            41484021,
            41492712,
            41493543,
            41493068,
            41492267,
            41492744,
            41493565,
            41533654,
            41492210,
            41493418,
            41496467
        ],
        "C": [
            41482847,
            41481559,
            41490429,
            41483828,
            41484432,
            41483284,
            41481342,
            41482980,
            41482276,
            41494412,
            41483383,
            41483904,
            41482436,
            41484813,
            41483954,
            41484715,
            41485204,
            41486868,
            41484572
        ],
        "B": [
            41472124,
            41472495,
            41472169,
            41471832,
            41473647,
            41472819,
            41474467,
            41474217,
            41476517,
            41474465,
            41477984,
            41542441,
            41472876,
            41475507,
            41474290,
            41474434,
            41473754,
            41480874,
            41476912,
            41474412
        ],
        "A": [
            41471287,
            41471470,
            41471174,
            41471276,
            41471647,
            41482521,
            41482998,
            41483546,
            41473507,
            41472376,
            41472014,
            41542424,
            41471633,
            41471835,
            41472031,
            41471489,
            41471801,
            41474026,
            41472191,
            41471736
        ],
        "E": [
            41565578
        ]
    },
    "name": "C. Elections",
    "statement": "As you know, majority of students and teachers of Summer Informatics\r\nSchool live in Berland for the most part of the year. Since corruption\r\nthere is quite widespread, the following story is not uncommon.Elections\r\nare coming. You know the number of voters and the number of parties n\r\nand m respectively. For each voter you know the party he is going to\r\nvote for. However, he can easily change his vote given a certain amount\r\nof money. In particular, if you give i-th voter c_i bytecoins you can\r\nask him to vote for any other party you choose.The United Party of\r\nBerland has decided to perform a statistical study you need to calculate\r\nthe minimum number of bytecoins the Party needs to spend to ensure its\r\nvictory. In order for a party to win the elections, it needs to receive\r\nstrictly more votes than any other party.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define sz(x) ((int)x.size())\n#define all(x) (x).begin(), (x).end()\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\nint n,m;\nbool chk[3010];\nvector<pair<int,int> > a, b[3010];\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tint init = 0;\n\tfor(int i=1; i<=n; i++) {\n\t\tint p,c;\n\t\tscanf(\"%d%d\", &p, &c);\n\t\tif(p == 1) {\n\t\t\tinit++;\n\t\t\tcontinue;\n\t\t}\n\t\tb[p].push_back({c,i});\n\t\ta.push_back({c,i});\n\t}\n\tsort(all(a));\n\tfor(int i=1; i<=m; i++) sort(all(b[i]));\n\tll res = 9e18;\n\tfor(int i=max(init,1); i<=n; i++) {\n\t\tmemset(chk, 0, sizeof(chk));\n\t\tint cnt = 0; ll cost = 0;\n\t\tfor(int j=1; j<=m; j++) {\n\t\t\tif(sz(b[j]) >= i) {\n\t\t\t\tfor(int k=0; k<sz(b[j])-i+1; k++) {\n\t\t\t\t\tcost += b[j][k].first;\n\t\t\t\t\tchk[b[j][k].second] = 1;\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//cout<<\"dbg1\"<<endl;\n\t\tif(cnt > i) continue;\n\t\tfor(int j=0; j<sz(a) && cnt+init < i; j++)\n\t\t\tif(!chk[a[j].second]) {\n\t\t\t\tcost += a[j].first;\n\t\t\t\tcnt++;\n\t\t\t}\n\t\tres = min(res, cost);\n\t}\n\tprintf(\"%lld\", res);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Elections.json",
    "editorial_link": "https://codeforces.com//blog/entry/61161",
    "editorial": "Let's iterate over final number of votes for The United Party of Berland. We can see that all opponents should get less votes than our party, and our party should get at least our chosen number of votes.\n\nWe can sort all voters by their costs, and solve the problem in two passes. First, if we need to get x\n votes, we should definitely buy all cheap votes for parties that have at least x\n votes. Second, if we don't have x\n votes yet, we should by the cheapest votes to get x\n votes. We can see that this solution is optimal: consider the optimal answer, and see how many votes The United Party got. We tried such number of votes, and we tried to achieve this number of votes by cheapest way, so we couldn't miss the optimal answer. This can be implemented in O(n2logn)\n or even O(nlogn)\n.",
    "hint": []
}