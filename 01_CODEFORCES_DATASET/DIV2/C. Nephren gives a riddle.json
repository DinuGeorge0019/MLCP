{
    "link": "https://codeforces.com//contest/897/problem/C",
    "problemId": "137066",
    "problem_idx": "C",
    "shortId": "897C",
    "contest_number": "897",
    "problem_submissions": {
        "D": [
            32869363,
            32868967,
            32870299,
            32871420,
            32871096,
            32871069,
            32872537,
            32872235,
            32873063,
            32867675,
            32899611,
            32872434,
            32870151,
            32872540,
            32868724,
            32872412,
            32871965,
            32870305,
            32870537
        ],
        "C": [
            32866469,
            32867357,
            32867913,
            32867474,
            32867444,
            32868703,
            32867464,
            32865520,
            32867687,
            32873999,
            32867162,
            32872564,
            32869517,
            32873487,
            32868079,
            32870223,
            32867096,
            32871838
        ],
        "B": [
            32863081,
            32866614,
            32863458,
            32862862,
            32863043,
            32864870,
            32863155,
            32862993,
            32862870,
            32864103,
            32865012,
            32863471,
            32863794,
            32862844,
            32864643,
            32865335,
            32872101,
            32864895
        ],
        "A": [
            32860112,
            32864431,
            32860323,
            32860778,
            32862516,
            32860290,
            32860663,
            32860439,
            32860544,
            32861554,
            32860704,
            32860360,
            32860929,
            32861796,
            32861440,
            32860719,
            32861670
        ],
        "E": [
            32893341
        ]
    },
    "name": "C. Nephren gives a riddle",
    "statement": "Nephren is playing a game with little leprechauns.She gives them an\r\ninfinite array of strings, . is \"\".She wants to let more people know\r\nabout it, so she defines \"\" for all .For example, is\"\". Note that the\r\nquotes in the very beginning and in the very end are for clarity and are\r\nnot a part of .It can be seen that the characters in are letters,\r\nquestion marks, (possibly) quotation marks and spaces.Nephren will ask\r\nthe little leprechauns times. Each time she will let them find the -th\r\ncharacter of . The characters are indexed starting from . If consists of\r\nless than characters, output \u201d (without quotes).Can you answer her\r\nqueries?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define inf 1000000000000000010ll\nusing namespace std;\ntypedef long long i64;\ni64 len[100010];\n\nstring s1 = \"What are you doing at the end of the world? Are you busy? Will you save us?\";\nstring s21 = \"What are you doing while sending \\\"\", s22 = \"\\\"? Are you busy? Will you send \\\"\", s23 = \"\\\"?\";\n\nchar get_character(int x, i64 nr)\n{\n    if (nr > len[x])\n        return '.';\n    if (x == 0)\n        return s1[nr - 1];\n    if (nr <= s21.size())\n        return s21[nr - 1];\n    nr -= s21.size();\n    if (nr <= len[x - 1])\n        return get_character(x - 1, nr);\n    nr -= len[x - 1];\n    if (nr <= s22.size())\n        return s22[nr - 1];\n    nr -= s22.size();\n    if (nr <= len[x - 1])\n        return get_character(x - 1, nr);\n    nr -= len[x - 1];\n    return s23[nr - 1];\n}\n\nint main()\n{\n   // cout << s1.size() << '\\n';\n    ios_base :: sync_with_stdio(0);\n\n    cin.tie(0);\n    len[0] = s1.size();\n    //cout << len[0] << '\\n';\n    for (int x(1); x <= 100000; x++) {\n        len[x] = 2ll * len[x - 1] + s21.size() + s22.size() + s23.size();\n        len[x] = min(len[x], inf);\n    }\n    int q;\n    i64 n, l;\n    cin >> q;\n    while (q--) {\n        cin >> n >> l;\n        cout << get_character(n, l);\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Nephren gives a riddle.json",
    "editorial_link": "https://codeforces.com//blog/entry/56135",
    "editorial": "f(n)?=?str1?+?f(n?-?1)?+?str2?+?f(n?-?1)?+?str3.\n\nFirst we can compute the length of f(n) for all possible n.\n\nFor a pair of (n,?k), we can easily determine which part the k-th character is in.\n\nIf it's in f(n?-?1), we can solve the problem recursively.\n\nThe complexity of this algorithm is O(n), which is sufficient to pass all tests.\n\nObviously, length(f(n))???length(f(n?-?1))\u00b72, so length(f(60))???kmax.\n\nIt means that for all n?>?60, the k-th character of f(n) can only be in str1 or the first f(n?-?1).\n\nThen we can answer a query in  time."
}