{"link": "https://codeforces.com//contest/1301/problem/D", "problemId": "538757", "problem_idx": "D", "shortId": "1301D", "contest_number": "1301", "problem_submissions": {"F": [71000973, 71002227, 71047404, 71220694, 70998932, 71051995, 71028699, 71013382, 71013182, 71012775, 71025862, 71001305], "E": [70990356, 70991049, 70989982, 70995000, 71228853, 70994471, 70996484, 70997616, 70993985, 71001983, 71006041, 71000752, 71000762, 71000295, 71036031, 71006895, 71006710, 71008245, 71004278, 71001868, 71010122], "D": [70978990, 70984686, 70977541, 70983758, 70979628, 70981590, 70982372, 70984362, 70996505, 70984162, 70979443, 70993040, 70987583, 70989615, 70984290, 70988249, 70992550, 70989175, 70990934, 70988497], "C": [70971830, 70973831, 70972391, 70970695, 70971864, 70969581, 70970083, 70974438, 70974283, 70973307, 70972668, 70972796, 70978912, 70982981, 70973415, 70972561, 70970139, 70973814, 70975653, 70976409], "B": [70968569, 70967678, 70969977, 70968275, 70967585, 70973366, 70967417, 70968730, 70968327, 70969402, 70969851, 70968467, 70975325, 70966853, 70969894, 70969422, 70967771, 70969867, 70971492, 70969502], "A": [70962789, 70962641, 70962787, 70964181, 70962880, 70962945, 70962791, 70962672, 70962738, 70962693, 70965581, 70963729, 70962976, 70962686, 70963227, 70964391, 70962619, 70962496, 70966796, 70962378]}, "name": "D. Time to Run", "statement": "Bashar was practicing for the national programming contest. Because of\r\nsitting too much in front of the computer without doing physical\r\nmovements and eating a lot Bashar became much fatter. Bashar is going to\r\nquit programming after the national contest and he is going to become an\r\nactor (just like his father), so he should lose weight.In order to lose\r\nweight, Bashar is going to run for k kilometers. Bashar is going to run\r\nin a place that looks like a grid of n rows and m columns. In this grid\r\nthere are two one-way roads of one-kilometer length between each pair of\r\nadjacent by side cells, one road is going from the first cell to the\r\nsecond one, and the other road is going from the second cell to the\r\nfirst one. So, there are exactly (4 n m - 2n - 2m) roads.Let\u2019s take, for\r\nexample, n = 3 and m = 4. In this case, there are 34 roads. It is the\r\npicture of this case (arrows describe roads):Bashar wants to run by\r\nthese rules: He starts at the top-left cell in the grid; In one move\r\nBashar may go up (the symbol \u201d), down (the symbol \u201d), left (the symbol\r\n\u201d) or right (the symbol \u201d). More formally, if he stands in the cell in\r\nthe row i and in the column j, i.e. in the cell (i, j) he will move to:\r\nin the case \u201d to the cell (i-1, j); in the case \u201d to the cell (i+1, j);\r\nin the case \u201d to the cell (i, j-1); in the case \u201d to the cell (i, j+1);\r\nHe wants to run exactly k kilometers, so he wants to make exactly k\r\nmoves; Bashar can finish in any cell of the grid; He can\u2019t go out of the\r\ngrid so at any moment of the time he should be on some cell; Bashar\r\ndoesn\u2019t want to get bored while running so he must visit the same road\r\ntwice. . Bashar asks you if it is possible to run by such rules. If it\r\nis possible, you should tell him how should he run.You should give him a\r\nsteps to do and since Bashar can\u2019t remember too many steps, a should not\r\nexceed 3000. In every step, you should give him an integer f and a\r\nstring of moves s of length at most 4 which means that he should repeat\r\nthe moves in the string s for f times. He will perform the steps in the\r\norder you print them.For example, if the steps are 2 , 3 then the moves\r\nhe is going to move are + + + + = .Can you help him and give him a\r\ncorrect sequence of moves such that the total distance he will run is\r\nequal to k kilometers or say, that it is impossible?\r\n", "solutions": ["#include <bits/stdc++.h>\n\nint n, m, k;\nstd::vector<std::pair<int, char>> vec, ans;\n\ninline void insert(int x, char c) {\n    if (x > 0) { vec.push_back({x, c}); }\n}\ninline void insertt(int x, char c) {\n    if (x > 0) { ans.push_back({x, c}); }\n}\n\nbool solve() {\n    for (auto i : vec) {\n        insertt(std::min(i.first, k), i.second);\n        k -= std::min(i.first, k);\n    }\n    return k <= 0;\n}\n\nint main() {\n    scanf(\"%d%d%d\", &n, &m, &k);\n    for (int i = 1; i < n; i++) {\n        insert(m - 1, 'R');\n        insert(m - 1, 'L');\n        insert(1, 'D');\n    }\n    insert(m - 1, 'R');\n    for (int i = 1; i < m; i++) {\n        insert(n - 1, 'U');\n        insert(n - 1, 'D');\n        insert(1, 'L');\n    }\n    insert(n - 1, 'U');\n    if (!solve()) {\n        printf(\"NO\\n\");\n    } else {\n        printf(\"YES\\n\");\n        printf(\"%d\\n\", ans.size());\n        for (auto i : ans) {\n            printf(\"%d %c\\n\", i.first, i.second);\n        }\n    }\n    return 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "graphs", "implementation"], "dificulty": "2000", "interactive": false}