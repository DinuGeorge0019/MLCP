{
    "link": "https://codeforces.com//contest/362/problem/E",
    "problemId": "3973",
    "problem_idx": "E",
    "shortId": "362E",
    "contest_number": "362",
    "problem_submissions": {
        "D": [
            5106574,
            5109805,
            5108707,
            5110095,
            5109823,
            5107984,
            5114349,
            5146913
        ],
        "C": [
            5103024,
            5102004,
            5102280,
            5104232,
            5104539,
            5104677,
            5106034,
            5103492,
            5106177,
            5103173,
            5110444,
            5105776,
            5106214,
            5105579,
            5106217,
            5104642
        ],
        "A": [
            5100714,
            5100012,
            5099653,
            5099996,
            5099930,
            5099251,
            5099198,
            5105643,
            5100062,
            5106330,
            5099189,
            5101295,
            5100008,
            5100185,
            5101540,
            5101308
        ],
        "B": [
            5099807,
            5109634,
            5098724,
            5099026,
            5100692,
            5100418,
            5100315,
            5100379,
            5098852,
            5099011,
            5103916,
            5100105,
            5100650,
            5101467,
            5105783,
            5102571,
            5102169
        ],
        "E": [
            5106815,
            5107748,
            5110196
        ]
    },
    "name": "E. Petya and Pipes",
    "statement": "A little boy Petya dreams of growing up and becoming the Head Berland\r\nPlumber. He is thinking of the problems he will have to solve in the\r\nfuture. Unfortunately, Petya is too inexperienced, so you are about to\r\nsolve one of such problems for Petya, the one heâ€™s the most interested\r\nin.The Berland capital has water tanks numbered from to . These tanks\r\nare connected by unidirectional pipes in some manner. Any pair of water\r\ntanks is connected by at most one pipe in each direction. Each pipe has\r\na strictly positive integer width. Width determines the number of liters\r\nof water per a unit of time this pipe can transport. The water goes to\r\nthe city from the main water tank (its number is ). The water must go\r\nthrough some pipe path and get to the sewer tank with cleaning system\r\n(its number is ). Petya wants to increase the width of some subset of\r\npipes by at most units in total so that the width of each pipe remains\r\ninteger. Help him determine the maximum amount of water that can be\r\ntransmitted per a unit of time from the main tank to the sewer tank\r\nafter such operation is completed.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <cstdio>\n#include <cassert>\n#include <cstring>\n#include <cctype>\n#include <queue>\nusing namespace std;\ntypedef long long ll;\n#define mp make_pair\n#define f first\n#define s second\n#define pb push_back\nconst int X[] = {-1, 1, 0, 0};\nconst int Y[] = {0, 0, -1, 1};\nconst int N = 100 + 10;\nconst int INF = 1e9;\n\nstruct edge\n{\n  int to, f, rev, c, cst;\n  edge() {}\n  edge(int too, int cc, int revv, int css)\n  {\n    to = too;\n    c = cc;\n    f = 0;\n    cst = css;\n    rev = revv;\n  }\n};\n\nvector <edge> g[N];\nint d[N], par[N], pared[N], n, k, s, t;\nbool use[N];\nqueue <int> q;\n\nvoid addEdge(int x, int y, int cap, int cst)\n{\n  int s1 = g[x].size();\n  int s2 = g[y].size();\n  g[x].pb(edge(y, cap, s2, cst));\n  g[y].pb(edge(x, 0, s1, -cst));\n}\n\nint FBellman()\n{\n  for (int i = 0; i <= t; ++i) d[i] = INF;\n  d[s] = 0;\n  q.push(s);\n  use[s] = true;\n  while (!q.empty())\n  {\n    int v = q.front();\n    use[v] = false;\n    q.pop();\n    for (int i = 0; i < g[v].size(); ++i)\n    {\n      int to = g[v][i].to;\n      if (d[to] > d[v] + g[v][i].cst && g[v][i].c > g[v][i].f)\n      {\n        d[to] = d[v] + g[v][i].cst;\n        if (!use[to]) q.push(to);\n        use[to] = true;\n        par[to] = v;\n        pared[to] = i;\n      }\n    }\n  }\n  return d[t];\n}\n\nint main()\n{\n  cin >> n >> k;\n  s = 0;\n  t = n - 1;\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j < n; ++j)\n    {\n      int x;\n      cin >> x;\n      if (x)\n      {\n        addEdge(i, j, x, 0);\n        addEdge(i, j, k, 1);\n      }\n    }\n\n  int ans = 0;\n  while (true)\n  {\n    int w = FBellman();\n    if (w == INF) break;\n    int v = t, mn = INF;\n    while (v != s)\n    {\n      mn = min(mn, g[par[v]][pared[v]].c - g[par[v]][pared[v]].f);\n      v = par[v];\n    }\n    if (k >= w * mn)\n    {\n      ans += mn;\n      k -= w * mn;\n    } else\n    {\n      mn = min(mn, k / w);\n      ans += mn;\n      break;\n    }\n\n    v = t;\n    while (v != s)\n    {\n      g[par[v]][pared[v]].f += mn;\n      g[v][g[par[v]][pared[v]].rev].f -= mn;\n      v = par[v];\n    }\n  }\n  cout << ans;\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "flows",
        "graphs",
        "shortest paths"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Petya and Pipes.json",
    "editorial_link": "https://codeforces.com//blog/entry/9584",
    "editorial": "Construct the following flow network. Water tank is the source, water\r\ntank is the sink. Every pipe from water tank to water tank is presented\r\nas two arcs the first one with capacity and cost and the second one with\r\ninfinite capacity and cost . Thus, the answer is the maximum flow with\r\ncost not greater than k. It can be found by standard augmenting paths\r\nalgorithm. UPD1. Tutorial for problems A and B added. UPD2. Tutorial for\r\nproblem C added.\r\n",
    "hint": []
}