{
    "link": "https://codeforces.com//contest/716/problem/C",
    "problemId": "71757",
    "problem_idx": "C",
    "shortId": "716C",
    "contest_number": "716",
    "problem_submissions": {
        "D": [
            20744308,
            20715273,
            20712384,
            20698605,
            20701478,
            20703552,
            20702205,
            20704228,
            20701939,
            20707973,
            20706457,
            20707569,
            20706505,
            20706746,
            20706853,
            20708058,
            20712985,
            20706596,
            20702545,
            20706258,
            20710911,
            20710377
        ],
        "E": [
            20707330,
            20706633,
            57471482,
            57471318,
            20786861,
            20925655
        ],
        "C": [
            20688634,
            20691024,
            20700161,
            20694588,
            20693330,
            20695251,
            20692209,
            20693550,
            20695785,
            20697429,
            20695666,
            20696475,
            20696500,
            20694424,
            20694087,
            20699957,
            20710553,
            20698572,
            20699352,
            20704716
        ],
        "B": [
            20685444,
            20688304,
            20686329,
            20686970,
            24007938,
            20689436,
            20687334,
            20687385,
            20688481,
            20689944,
            20688816,
            20691138,
            20689052,
            20691817,
            20689042,
            20688727,
            20687466,
            20689562,
            20689097,
            20691531,
            20693092
        ],
        "A": [
            20683347,
            20683430,
            20683470,
            20683362,
            23991578,
            20684483,
            20684599,
            20683578,
            20683497,
            20684120,
            20684147,
            20685068,
            20683750,
            20684470,
            20685278,
            20683948,
            20683393,
            20683688,
            20684344,
            20683813,
            20686732
        ]
    },
    "name": "C. Plus and Square Root",
    "statement": "ZS the Coder is playing a game. There is a number displayed on the\r\nscreen and there are two buttons, ” (plus) and ” (square root).\r\nInitially, the number is displayed on the screen. There are levels in\r\nthe game and ZS the Coder start at the level .When ZS the Coder is at\r\nlevel , he can : . This increases the number on the screen by exactly .\r\nSo, if the number on the screen was , it becomes . . Let the number on\r\nthe screen be . After pressing this button, the number becomes . After\r\nthat, ZS the Coder levels up, so his current level becomes . This button\r\ncan only be pressed when is a , i.e. for some positive integer .\r\nAdditionally, after each move, if ZS the Coder is at level , and the\r\nnumber on the screen is , then . Note that this condition is only\r\nchecked after performing the press. For example, if ZS the Coder is at\r\nlevel and current number is , he presses the ” button and the number\r\nturns into . Note that at this moment, is not divisible by , but this\r\npress is still valid, because after it, ZS the Coder is at level , and\r\nis divisible by .ZS the Coder needs your help in beating the game he\r\nwants to reach level . In other words, he needs to press the ” button\r\ntimes. Help him determine the number of times he should press the ”\r\nbutton before pressing the ” button at each level. Please note that ZS\r\nthe Coder wants to find just any sequence of presses allowing him to\r\nreach level , but not necessarily a sequence minimizing the number of\r\npresses.\r\n",
    "solutions": [
        "/*AMETHYSTS*/\n#pragma comment(linker, \"/STACK:1000000000\")\n#include <cstdio>\n#include <iostream>\n#include <ctime>\n#include <string>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <cstring>\n#include <set>\n#include <map>\n#include <cstdlib>\n#include <ctime>\n#include <cassert>\n#include <bitset>\n#include <deque>\n#include <stack>\n#include <climits>\n#include <string>\n#include <queue>\n#include <memory.h>\n#include <unordered_map>\n#include <random>\n\n#define ll long long\n#define ld double\n#define pii pair <int, int>\n#define forn(i, n) for (int i = 0; i < (int)n; i++)\n#define mp make_pair\n#define ui unsigned ll\n\nusing namespace std;\n\nint main() {\n\tll x;\n\n\tx = 2;\n\n\tll n;\n\n\tcin >> n;\n\n\tfor (ll i = 1; i <= n; i++) {\n\t\tll y = (x / i);\n\n\t\tif (y >= i * (i + 1) * (i + 1)) {\n\t\t\tthrow 1;\n\t\t}\n\n\t\tprintf(\"%I64d\\n\", i * (i + 1) * (i + 1) - y);\n\n\t\tx = i * (i + 1);\n\t}\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Plus and Square Root.json",
    "editorial_link": "https://codeforces.com//blog/entry/47169",
    "editorial": "Firstly, let ai(1???i???n) be the number on the screen before we level up from level i to i?+?1. Thus, we require all the ais to be perfect square and additionally to reach the next ai via pressing the plus button, we require  and  for all 1???i?<?n. Additionally, we also require ai to be a multiple of i. Thus, we just need to construct a sequence of such integers so that the output numbers does not exceed the limit 1018.\n\nThere are many ways to do this. The third sample actually gave a large hint on my approach. If you were to find the values of ai from the second sample, you'll realize that it is equal to 4,?36,?144,?400. You can try to find the pattern from here. My approach is to use ai?=?[i(i?+?1)]2. Clearly, it is a perfect square for all 1???i???n and when n?=?100000, the output values can be checked to be less than 1018\n\nUnable to parse markup [type=CF_TEX]\n\nwhich is a multiple of i?+?1, and  is also a multiple of i?+?1.\nThe constraints ai must be a multiple of i was added to make the problem easier for Div. 1 A.",
    "hint": []
}