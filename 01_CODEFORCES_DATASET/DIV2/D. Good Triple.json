{
    "link": "https://codeforces.com//contest/1169/problem/D",
    "problemId": "349596",
    "problem_idx": "D",
    "shortId": "1169D",
    "contest_number": "1169",
    "problem_submissions": {
        "E": [
            54684403,
            54675804,
            54682359,
            54685449,
            54689566,
            54686198,
            54691604,
            54688678,
            54690724,
            54691237,
            54681393,
            54688847,
            54690654,
            54694731,
            55081389
        ],
        "D": [
            54680905,
            54683986,
            54684817,
            54682317,
            54679635,
            54689466,
            54908772,
            54684679,
            54690915,
            54687442,
            54685809,
            54685924,
            54681653,
            54683168,
            54681797,
            54682416,
            54683266,
            54682426,
            54682731,
            54684851,
            54684352
        ],
        "C": [
            54678532,
            54681169,
            54677843,
            54687880,
            54675623,
            54679704,
            54681667,
            54677693,
            54680121,
            54682979,
            54690039,
            54678308,
            54675885,
            54677830,
            54678752,
            54677564,
            54679339,
            54676201
        ],
        "B": [
            54673457,
            54678799,
            54680269,
            54673253,
            54673012,
            54676449,
            54676258,
            54675058,
            54676915,
            54675666,
            54692780,
            54676719,
            54675276,
            54674258,
            54673558,
            54671616,
            54673955,
            54671622,
            54675590,
            54674178
        ],
        "A": [
            54670054,
            54677136,
            54670973,
            54669910,
            54670050,
            54670444,
            54671253,
            54670673,
            54669870,
            54694380,
            54670378,
            54670212,
            54670638,
            54670322,
            54670547,
            54670037,
            54669810,
            54671042,
            54669779
        ]
    },
    "name": "D. Good Triple",
    "statement": "Toad Rash has a binary string s. A binary string consists only of zeros\r\nand ones.Let n be the length of s.Rash needs to find the number of such\r\npairs of integers l, r that 1\r\nleq l\r\nleq r\r\nleq n and there is at least one pair of integers x, k such that 1\r\nleq x, k\r\nleq n, l\r\nleq x < x + 2k\r\nleq r, and s_x = s_{x+k} = s_{x+2k}.Find this number of pairs for Rash.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\nint n;\nbool v[300001];\nint t[300001];\nstring s;\nlong long sum;\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin >> s;\n    n=s.size();\n    for (int i=1; i<=n; i++) {\n        t[i]=INT_MAX;\n        char c;\n        c=s[i-1];\n        if (c=='1') {\n            v[i]=1;\n        }\n    }\n    for (int i=1; i<=n; i++) {\n        for (int j=1; j<=20; j++) {\n            if (i+2*j<=n) {\n                if (v[i]==v[i+j] && v[i]==v[i+2*j]) {\n                    t[i]=i+2*j;\n                    break;\n                }\n            }\n        }\n    }\n    for (int i=n-1; i>=1; i--) {\n        t[i]=min(t[i], t[i+1]);\n        if (t[i]!=INT_MAX) {\n            sum+=n+1-t[i];\n        }\n    }\n    cout << sum << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Good Triple.json",
    "editorial_link": "https://codeforces.com//blog/entry/67241",
    "editorial": "Lemma: there are no strings without such of length at least 9.In fact,\r\nyou just can write brute force to find all \"good\" strings and then\r\nrealize that they all are small.Ok, so with this you can just write some\r\nsort of \"naive\" solution, for each find the largest , such that is a\r\n\"good\" string, and then add to the answer. You can do it in or in , as I\r\ndo in my solution. Check it out!\r\n",
    "hint": []
}