{
    "link": "https://codeforces.com//contest/433/problem/E",
    "problemId": "9711",
    "problem_idx": "E",
    "shortId": "433E",
    "contest_number": "433",
    "problem_submissions": {
        "E": [
            6700632,
            6733758,
            6721505
        ],
        "D": [
            6698331,
            6698009,
            6698968,
            6697379,
            6698650,
            6715933,
            6699612,
            6703360,
            6700792,
            6700606,
            6701919
        ],
        "C": [
            6696171,
            6695700,
            6695492,
            6694565,
            6702743,
            6693994,
            6696132,
            6697796,
            6696959,
            6725755,
            6698054,
            6719018,
            6698571,
            6698075,
            6696805
        ],
        "B": [
            6692744,
            6692477,
            6692926,
            6692655,
            6692933,
            6693014,
            6695266,
            6693808,
            6692887,
            6694570,
            6693057,
            6692308,
            6692432,
            6694603,
            6691962,
            6693854,
            6694164,
            6696914
        ],
        "A": [
            6691799,
            6691577,
            6691561,
            6691897,
            6692330,
            6691645,
            6695737,
            6691837,
            6691733,
            6692882,
            6691808,
            6691593,
            6691467,
            6692751,
            6692230,
            6692129,
            6691816
        ]
    },
    "name": "E. Tachibana Kanade s Tofu",
    "statement": "Tachibana Kanade likes Mapo Tofu very much. One day, the canteen cooked\r\nall kinds of tofu to sell, but not all tofu is Mapo Tofu, only those\r\nspicy enough can be called Mapo Tofu.Each piece of tofu in the canteen\r\nis given a -based number, all numbers are in the range ( and being\r\n-based numbers), and for every -based integer in the range , there\r\nexists a piece of tofu with that number.To judge what tofu is Mapo Tofu,\r\nTachibana Kanade chose -based number strings, and assigned a value to\r\neach string. If a string appears in the number of a tofu, the value of\r\nthe string will be added to the value of that tofu. If a string appears\r\nmultiple times, then the value is also added that many times. Initially\r\nthe value of each tofu is zero.Tachibana Kanade considers tofu with\r\nvalues no more than to be Mapo Tofu. So now Tachibana Kanade wants to\r\nknow, how many pieces of tofu are Mapo Tofu?\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstring>\n#include<queue>\n\nusing namespace std;\n\nconst int MOD = 1000000000 + 7;\n\nint n, bas, lim;\n\nint go[210][22];\nint trie[210][22], tn;\nint upper[210], lower[210], val[210], str[210];\nint fail[210];\nint bound[210];\nint f[2][210][210][510];\n\nqueue<int> q;\n\ninline int min(int a, int b) { return a < b ? a : b; }\n\nint work(){\n\tint p = 200;\n\twhile(p >= 0 && !bound[p]){\n\t\t-- p;\n\t}\n\tif(p < 0)\n\t\treturn 0;\n\tmemset(f, 0, sizeof(f));\n\tf[0][0][0][0] = 1;\n\tint ans = 0;\n\tfor(int i = 0; i <= p; i ++){\n\t\tfor(int j = 0; j <= tn; j ++){\n\t\t\tfor(int k = 0; k < 2; k ++){\n\t\t\t\tfor(int v = 0; v <= lim; v ++){\n\t\t\t\t\tif(!f[k][i][j][v])\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor(int fil = 0; fil < bas; fil ++){\n\t\t\t\t\t\tint& nxt = f[(fil == bound[i] && k) || fil > bound[i]][i + 1][go[j][fil]][min(lim + 1, v + val[go[j][fil]])];\n\t\t\t\t\t\tnxt += f[k][i][j][v];\n\t\t\t\t\t\tif(nxt >= MOD)\n\t\t\t\t\t\t\tnxt -= MOD;\n\t\t\t\t\t\tif(fil && v + val[go[j][fil]] <= lim && (!((fil == bound[i] && k) || fil > bound[i]) || i < p)){\n\t\t\t\t\t\t\tans += f[k][i][j][v];\n\t\t\t\t\t\t\tif(ans >= MOD)\n\t\t\t\t\t\t\t\tans -= MOD;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\n\nvoid mminus(){\n\tfor(int i = 0; i <= 200; i ++){\n\t\t-- bound[i];\n\t\tif(bound[i] >= 0)\n\t\t\tbreak;\n\t\tbound[i] += bas;\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d%d\", &n, &bas, &lim);\n\tint len, lenl, lenr;\n\tscanf(\"%d\", &lenl);\n\tfor(int i = lenl - 1; i >= 0; i --)\n\t\tscanf(\"%d\", lower + i);\n\tscanf(\"%d\", &lenr);\n\tfor(int i = lenr - 1; i >= 0; i --)\n\t\tscanf(\"%d\", upper + i);\n\twhile(n --){\n\t\tscanf(\"%d\", &len);\n\t\tfor(int i = len; i >= 1; i --)\n\t\t\tscanf(\"%d\", str + i);\n\t\tint cur = 0;\n\t\tfor(int i = 1; i <= len; i ++){\n\t\t\tif(!trie[cur][str[i]])\n\t\t\t\ttrie[cur][str[i]] = ++ tn;\n\t\t\tcur = trie[cur][str[i]];\n\t\t}\n\t\tint v;\n\t\tscanf(\"%d\", &v);\n\t\tval[cur] += v;\n\t}\n\tq.push(0);\n\twhile(!q.empty()){\n\t\tint cur = q.front();\n\t\tq.pop();\n\t\tfor(int i = 0; i < bas; i ++){\n\t\t\tif(trie[cur][i]){\n\t\t\t\tgo[cur][i] = trie[cur][i];\n\t\t\t\tint ff;\n\t\t\t\tfor(ff = fail[cur]; ff && !trie[ff][i]; ff = fail[ff]);\n\t\t\t\tif(ff == cur)\n\t\t\t\t\tfail[trie[cur][i]] = 0;\n\t\t\t\telse\n\t\t\t\t\tfail[trie[cur][i]] = trie[ff][i];\n\t\t\t\tval[trie[cur][i]] += val[fail[trie[cur][i]]];\n\t\t\t\tq.push(trie[cur][i]);\n\t\t\t} else{\n\t\t\t\tint ff;\n\t\t\t\tfor(ff = fail[cur]; ff && !trie[ff][i]; ff = fail[ff]);\n\t\t\t\tgo[cur][i] = trie[ff][i];\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 200; i >= 0; i --)\n\t\tbound[i] = upper[i];\n\tint ans = work();\n\tfor(int i = 200; i >= 0; i --)\n\t\tbound[i] = lower[i];\n\tmminus();\n\tans -= work();\n\tif(ans < 0)\n\t\tans += MOD;\n\tprintf(\"%d\\n\", ans);\n\n\treturn 0;\n}\n\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Tachibana Kanade s Tofu.json",
    "editorial_link": "https://codeforces.com//blog/entry/12397",
    "editorial": "A straightforward brute-force idea would be to enumerate all numbers in\r\nthe interval , and count how many of them have a value greater than .\r\nThis approach is way too slow, but nevertheless letâs try optimizing it\r\nfirst. The enumeration part seems hard to optimize, so letâs consider\r\nwhat is the fastest way of calculating the value of a string. This is a\r\nclassic problem that can be solved using an Aho-Corasick automaton\r\n(abbr. ACA). Build an ACA with the given number strings, and simply\r\n\"walk\" in the automaton according to the string to be calculated.\r\nConsider a common method when dealing with digits split the interval\r\ninto two, minus . Then use DP to solve an interval, take for instance.\r\nConsider filling in the numbers one by one, we need to record in the\r\nstates of the DP the position in the string, and a flag denoting whether\r\nweâre \"walking on the edge of the upper bound\", that is, whether the\r\nnumbers weâve filled are the prefix of the upper-bound . How can we use\r\nthe approach above in this problem? Can we combine this approach with\r\nour ACA? The answer is yes, further record in the states of the DP the\r\nID of the node weâre currently \"standing on\" in the ACA. Consider the\r\ntransfer of this DP, enumerate which number weâre going to fill in, and\r\ncheck using our flag if the current number will be greater than the\r\nupper-bound. Appending a number to the end of our string would result in\r\na change of the ID of the node in our ACA, so \"walk\" along the\r\ntransferring edge in the ACA. What about the limit of values? Simply\r\nrecord the current value in our DP state, during transfer, add the value\r\nstored in the ACAâs node to the value stored in our state. The tricky\r\nbit is the leading zeros. Numbers canât have leading zeros, but number\r\nstrings can. How can we distinguish leading zeros from zeros in the\r\nmiddle of the number? We keep another flag, denoting whether weâre still\r\ndealing with leading zeros. So finally our state looks like , where , ,\r\nand are current length of number, ID of current node in ACA, and current\r\nvalue of number respectively. Let be the total length of all number\r\nstring, and be the length of , the total complexity would be , since the\r\nnumber of states is and transfer takes time. Solution for the approach\r\nabove: 6712934 Solution for a different approach: 6713013\r\n",
    "hint": []
}