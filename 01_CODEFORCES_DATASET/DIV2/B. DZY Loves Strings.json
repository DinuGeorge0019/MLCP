{"link": "https://codeforces.com//contest/447/problem/B", "problemId": "11395", "problem_idx": "B", "shortId": "447B", "contest_number": "447", "problem_submissions": {"E": [7084046, 7087165, 7086012, 7107031, 7088335], "D": [7080732, 7079815, 7083822, 7083834, 7085600, 7097008, 7086688, 7084686, 7086053, 7083895, 7086461, 7089129, 7088930, 7089222, 7089284, 7087016, 7089423], "C": [7078096, 7076875, 7077066, 7078076, 7077877, 7079534, 7081397, 7082455, 7080387, 7085378, 7082941, 7079168, 7082968, 7081821, 7082878, 7082053, 7087589, 7079590], "B": [7076707, 7075254, 7075472, 7076218, 7075554, 7075342, 7077508, 7076837, 7076067, 7075642, 7075896, 7082177, 7078872, 7077244, 7076799, 7078894, 7077501, 7076959], "A": [7074384, 7074446, 7074355, 7074389, 7074552, 7074411, 7075432, 7075052, 7074452, 7074502, 7074400, 7080033, 7075081, 7075723, 7074815, 7076200, 7075918, 7075090]}, "name": "B. DZY Loves Strings", "statement": "DZY loves collecting special strings which only contain lowercase\r\nletters. For each lowercase letter DZY knows its value . For each\r\nspecial string ( is the length of the string) he represents its value\r\nwith a function , where Now DZY has a string . He wants to insert\r\nlowercase letters into this string in order to get the largest possible\r\nvalue of the resulting string. Can you help him calculate the largest\r\npossible value he could get?\r\n", "solutions": ["#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar ch;\n\nvoid read(int &x)\n{\n\tx=0;\n\tch=getchar();\n\twhile (ch<=32) ch=getchar();\n\twhile (ch>32) x=x*10+ch-48,ch=getchar();\n}\n\nchar a[1005];\nint w[30];\n\nlong long getsum(int l,int r)\n{\n\treturn 1LL*(r-l+1)*(l+r)/2LL;\n}\n\nint main()\n{\n\tscanf(\"%s\",a+1);\n\tint n=strlen(a+1);\n\tint k;\n\tread(k);\n\tint i;\n\tint ma=0;\n\tfor (i=1;i<=26;i++) {\n\t\tread(w[i]);\n\t\tif (w[i]>ma) ma=w[i];\n\t}\n\tlong long sum=0;\n\tlong long ans=0;\n\tfor (i=1;i<=n;i++) {\n\t\tsum+=1LL*i*w[a[i]-'a'+1];\n\t}\n\tans=sum+getsum(n+1,n+k)*ma;\n\tprintf(\"%I64d\\n\",ans);\n}"], "input": "", "output": "", "tags": ["greedy", "implementation"], "dificulty": "1000", "interactive": false}