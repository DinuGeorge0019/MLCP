{
    "link": "https://codeforces.com//contest/1265/problem/E",
    "problemId": "486712",
    "problem_idx": "E",
    "shortId": "1265E",
    "contest_number": "1265",
    "problem_submissions": {
        "F": [
            66347509,
            66356863,
            66557730,
            66442620,
            66596419
        ],
        "D": [
            66340623,
            66367551,
            66338719,
            66334115,
            66337781,
            66335412,
            66337141,
            66346278,
            66339422,
            66338547,
            66341148,
            66339217,
            66340066,
            66341959,
            66331621,
            66342018,
            66346489,
            66340801,
            66342356,
            66342319,
            66343587
        ],
        "E": [
            66334163,
            66342621,
            66338591,
            66341637,
            66343875,
            66343996,
            66335345,
            66344209,
            66345114,
            66344975,
            66347923,
            66349901,
            66349558,
            66353633,
            66348910,
            66344231,
            66352728,
            66349177,
            66344898,
            66345749
        ],
        "C": [
            66327706,
            66330775,
            66334663,
            66328752,
            66329873,
            66333663,
            66331630,
            66332247,
            66329421,
            66334491,
            66334922,
            66330433,
            66331509,
            66336687,
            66333340,
            66334139,
            66330672,
            66335469,
            66331275,
            66338262
        ],
        "B": [
            66327279,
            66324231,
            66324702,
            66323571,
            66323717,
            66325187,
            66324433,
            66325466,
            66331477,
            66327697,
            66323823,
            66325202,
            66325641,
            66327180,
            66324867,
            66325852,
            66324365,
            66328628,
            66324650,
            66332154
        ],
        "A": [
            66323436,
            66367023,
            66322763,
            66325795,
            66322545,
            66322720,
            66322849,
            66322611,
            66322846,
            66324460,
            66323395,
            66326356,
            66322526,
            66323577,
            66323841,
            66322634,
            66323094,
            66322910,
            66325754,
            66323461,
            66323023
        ]
    },
    "name": "E. Beautiful Mirrors",
    "statement": "Creatnx has n mirrors, numbered from 1 to n. Every day, Creatnx asks\r\nexactly one mirror \"Am I beautiful?\". The i-th mirror will tell Creatnx\r\nthat he is beautiful with probability\r\nfrac{p_i}{100} for all 1\r\nle i\r\nle n.Creatnx asks the mirrors one by one, starting from the 1-st mirror.\r\nEvery day, if he asks i-th mirror, there are two possibilities: The i-th\r\nmirror tells Creatnx that he is beautiful. In this case, if i = n\r\nCreatnx will stop and become happy, otherwise he will continue asking\r\nthe i+1-th mirror next day; In the other case, Creatnx will feel upset.\r\nThe next day, Creatnx will start asking from the 1-st mirror again. You\r\nneed to calculate the expected number of days until Creatnx becomes\r\nhappy.This number should be found by modulo 998244353. Formally, let M =\r\n998244353. It can be shown that the answer can be expressed as an\r\nirreducible fraction\r\nfrac{p}{q}, where p and q are integers and q\r\nnot\r\nequiv 0\r\npmod{M}. Output the integer equal to p\r\ncdot q^{-1}\r\nbmod M. In other words, output such an integer x that 0\r\nle x < M and x\r\ncdot q\r\nequiv p\r\npmod{M}.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nconst int maxn=2e5+5;\nconst int mod=998244353;\nint n,p[maxn];\ninline int ksm(int x,int k){\n\tint s=1;\n\tfor(;k;k>>=1,x=1ll*x*x%mod)if(k&1)s=1ll*s*x%mod;\n\treturn s;\n}\nint dp[maxn];\nint main(){\n\tn=read();\n\tint inv=ksm(100,mod-2);\n\tfor(int i=1;i<=n;i++){\n\t\tp[i]=read();\n\t\tp[i]=1ll*p[i]*inv%mod;\n\t}\n\tdp[1]=0;\n\tfor(int i=2;i<=n+1;i++)dp[i]=1ll*(dp[i-1]+1)*ksm(p[i-1],mod-2)%mod;\n\tcout<<dp[n+1]<<'\\n';\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "math",
        "probabilities"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Beautiful Mirrors.json",
    "editorial_link": "https://codeforces.com//blog/entry/71995",
    "editorial": "Let be the probability that the -th mirror will answer YES when it is\r\nasked. That is, this equals to in the problem statement divide by\r\n100.Let be the expected number of days until Creatnx becomes happy when\r\ninitially he is at the -th mirror. For convenient, let (because when\r\nCreatnx is at -th mirror he is happy already). The answer of the problem\r\nwill be .By the definition of expectation value and its basic\r\nproperties, the following must holds for all : Let explain this equation\r\nfor those who are not familiar with probability. Expectation value is\r\njust average of all possible outcomes. The first number 1 in the right\r\nhand side means Creatnx spends 1 day to ask the -th mirror. With\r\nprobability of the -th mirror will answer YES and Creatnx will move to\r\nthe -th mirror in the next day. At the -th mirror, Creatnx on average\r\nneeds to spend days more to become happy. The second term explains this\r\ncase. Similarly, the third term represents the case where the -th mirror\r\nanswers NO.To find we need to solve equations:(1) (2) () We can solve\r\nthis system of equations by using substitution - a common technique.\r\nFrom equation (1) we have . Substituting this in (2) we obtained . See\r\nthe pattern now? Similarly by substituting to that last equation we\r\nhave: We can compute according to the above formula in .\r\n",
    "hint": []
}