{
    "link": "https://codeforces.com//contest/1199/problem/D",
    "problemId": "380944",
    "problem_idx": "D",
    "shortId": "1199D",
    "contest_number": "1199",
    "problem_submissions": {
        "E": [
            58030586,
            58021734,
            58025826,
            58022450,
            58018815,
            58018132,
            58016064,
            58035343,
            58034869,
            58017816,
            58024170,
            58025918,
            58022291,
            58023170,
            58022937,
            58024351,
            58028105
        ],
        "F": [
            58024830,
            58028686,
            58018020,
            58017115,
            58028245,
            58019034,
            58384931,
            58013729,
            58065279,
            58027365,
            58334987,
            58059871,
            58026310
        ],
        "D": [
            58011622,
            58006050,
            58005239,
            58009886,
            58003558,
            58013213,
            58006910,
            58023637,
            58004292,
            58010802,
            58010127,
            58010591,
            58010277,
            58011062,
            58011952,
            58012323,
            58015144,
            58009223,
            58018000
        ],
        "C": [
            58003286,
            58015626,
            58038871,
            58045412,
            58007604,
            58002586,
            58019533,
            58011071,
            58005193,
            58006733,
            58004437,
            58004399,
            58006254,
            58008729,
            58007961,
            58005653,
            58003369,
            58011620
        ],
        "B": [
            57997198,
            58010291,
            57996992,
            57996941,
            58045445,
            57999240,
            57998882,
            57996286,
            57999211,
            58000305,
            58000178,
            58000443,
            57996371,
            57996748,
            57996780,
            57999052,
            57996536,
            57997898,
            57997650,
            58000545
        ],
        "A": [
            57995512,
            58007859,
            57995725,
            57995380,
            57995192,
            57996027,
            57994975,
            57996866,
            57994742,
            57994764,
            57995474,
            57994875,
            57994979,
            57995233,
            57995511,
            57995009,
            57994816,
            57996166,
            57995838
        ]
    },
    "name": "D. Welfare State",
    "statement": "There is a country with n citizens. The i-th of them initially has a_{i}\r\nmoney. The government strictly controls the wealth of its citizens.\r\nWhenever a citizen makes a purchase or earns some money, they must send\r\na receipt to the social services mentioning the amount of money they\r\ncurrently have.Sometimes the government makes payouts to the poor: all\r\ncitizens who have strictly less money than x are paid accordingly so\r\nthat after the payout they have exactly x money. In this case the\r\ncitizens don\u2019t send a receipt.You know the initial wealth of every\r\ncitizen and the log of all events: receipts and payouts. Restore the\r\namount of money each citizen has after all events.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <cstdlib>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n\n#define isNum(a) (a >= '0' && a <= '9')\n#define SP putchar(' ')\n#define EL putchar('\\n')\n#define File(a) freopen(a \".in\", \"r\", stdin), freopen(a \".out\", \"w\", stdout)\n\ntemplate<class T>\ninline void read(T&);\ntemplate<class T>\ninline void write(const T&);\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef const int& ci;\ntypedef std::pair<int, int> pii;\nconst int iinf = 2147483647;\nconst ll llinf = 9223372036854775807ll;\nusing std::min;\nusing std::max;\nusing std::abs;\nusing std::sort;\nconst int N = 200005;\n\nint a[N];\npii lasu[N];\npii mu[N];\nint maxu[N];\nint id;\nstd::vector<int> v[N];\n\nint main () {\n    int n;\n    read(n);\n    for (int i = 1; i <= n; ++i) {\n        read(a[i]);\n        lasu[i] = pii(id, a[i]);\n    }\n    int q;\n    read(q);\n    for (int i = 1; i <= q; ++i) {\n        int mod;\n        read(mod);\n        if (mod == 1) {\n            int p, x;\n            read(p), read(x);\n            lasu[p] = pii(id, x);\n        } else {\n            int x;\n            read(x);\n            mu[id + 1] = pii(id, x);\n            ++id;\n        }\n    }\n    for (int i = 1; i <= n; ++i) {\n        v[lasu[i].first].push_back(i);\n    }\n    for (auto j : v[id]) {\n        a[j] = lasu[j].second;\n    }\n    for (int i = id; i >= 1; --i) {\n        maxu[i] = max(maxu[i + 1], mu[i].second);\n        for (auto j : v[i - 1]) {\n            a[j] = max(lasu[j].second, maxu[i]);\n        }\n    }\n    for (int i = 1; i <= n; ++i) {\n        write(a[i]), SP;\n    }\n    EL;\n    return 0;\n}\n\ntemplate<class T>\nvoid read(T &Re) {\n    T k = 0;\n    char ch = getchar();\n    int flag = 1;\n    while (!isNum(ch)) {\n        if (ch == '-') {\n            flag = -1;\n        }\n        ch = getchar();\n    }\n    while (isNum(ch)) {\n        k = (k << 1) + (k << 3) + ch - '0';\n        ch = getchar();\n    }\n    Re = flag * k;\n}\ntemplate<class T>\nvoid write(const T &Wr) {\n    if (Wr < 0) {\n        putchar('-');\n        write(-Wr);\n    } else {\n        if (Wr < 10) {\n            putchar(Wr + '0');\n        } else {\n            write(Wr / 10);\n            putchar((Wr % 10) + '0');\n        }\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Welfare State.json",
    "editorial_link": "https://codeforces.com/blog/entry/68812",
    "editorial": "For every citizen only the last query of type 1\n matters. Moreover, all queries before don't matter at all. So the answer for each citizen is maximum of x\n for last query of type 1\n for this citizen and maximum of all x\n for queries of type 2\n after that. We can calculate maximum x\n for all suffices of queries of type 2\n, and remember the last query of type 1\n for each citizen. It can be implemented in O(n+q)\n time."
}