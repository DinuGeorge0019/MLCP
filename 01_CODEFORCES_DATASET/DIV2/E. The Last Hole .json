{"link": "https://codeforces.com//contest/275/problem/E", "problemId": "2640", "problem_idx": "E", "shortId": "275E", "contest_number": "275", "problem_submissions": {"B": [3157455, 3154926, 3153875, 3154128, 3168618, 3157608, 3156503, 3154125, 3154230, 3157497, 3153507, 3154970, 3156558, 3164313, 3154711, 3160366], "D": [3155607, 3157854, 3158539, 3159163, 3159177, 3160578, 3159296, 3159635, 3159357, 3161717, 3160646, 3160630, 3156779, 3160587, 3157298, 3156905, 3156998, 3157339], "C": [3153198, 3153405, 3154890, 3156142, 3152561, 3153505, 3157377, 3155829, 3154047, 3155264, 3156869, 3157904, 3152045, 3156766, 3153753, 3155134, 3158671], "A": [3151085, 3151607, 3151113, 3151479, 3168404, 3151428, 3151540, 3151199, 3151322, 3154980, 3151175, 3151327, 3151992, 3151151, 3151487, 3151102, 3151305, 3160818], "E": [3164302]}, "name": "E. The Last Hole ", "statement": "Luyi has circles on the plane. The -th circle is centered at . At the\r\ntime zero circles start to grow simultaneously. In other words, the\r\nradius of each circle at time is equal to . The circles are drawn as\r\nblack discs on an infinite white plane. So at each moment the plane\r\nconsists of several black and white regions. Note that the circles may\r\noverlap while growing. We define a as a closed, connected white region.\r\nFor instance, the figure contains two holes shown by red border. During\r\ngrowing some holes may be created and it is easy to see that each\r\ncreated hole will disappear eventually. Luyi asks you to find moment of\r\ntime such that the last hole disappears. In other words, you should find\r\nthe first moment such that no hole can be seen after that.\r\n", "solutions": ["#include <iostream>\n#include <vector>\n#include <cstring>\n#include <cstdio>\n#include <string>\n#include <cmath>\n#include <set>\n#include <algorithm>\n\n#define pi pair<double, double>\n#define a p[i]\n#define b p[j]\n#define c p[k]\n#define x first\n#define y second\n\nusing namespace std;\n\ndouble D ( pi i, pi j )\n{\n\treturn sqrt( (i.x-j.x)*(i.x-j.x) + (i.y-j.y)*(i.y-j.y) );\n}\n\ndouble cross ( pi _a, pi _b, pi _c )\n{\n\treturn _a.x*(_b.y-_c.y)+_b.x*(_c.y-_a.y)+_c.x*(_a.y-_b.y);\n}\n\nstruct comp\n{\n\tbool operator() (const pi& lhs, const pi& rhs) const\n\t{\n\t\tif ( fabs(lhs.x-rhs.x) < 1e-9 )\n\t\t{\n\t\t\tif ( fabs(lhs.y-rhs.y) < 1e-9 )\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse return lhs.y < rhs.y;\n\t\t}\n\t\treturn lhs.x < rhs.x;\n\t}\n};\nbool comp2 ( pi _a, pi _b )\n{\n\treturn atan2(_a.y,_a.x) < atan2(_b.y,_b.x);\n}\n\nstruct target\n{\n\tpi u;\n\tdouble d;\n\t\n\ttarget(){}\n\t\n\tbool operator < ( const target &t ) const\n\t{\n\t\treturn d > t.d;\n\t}\n};\n\nset<pi, comp> S;\nint N;\npi p[128];\nint flag, cnt;\nvector <target> q;\nvector < pi > v;\ntarget t;\npi u;\ndouble d;\n\nint main (int argc, char const* argv[])\n{\n\tcin >> N;\n\t\n\tfor (int i = 0; i < N; i += 1)\n\t{\n\t\tcin >> p[i].x >> p[i].y;\n\t}\n\t\n\tfor (int i = 0; i < N; i += 1)\n\t{\n\t\tfor (int j = i+1; j < N; j += 1)\n\t\t{\n\t\t\tfor (int k = j+1; k < N; k += 1)\n\t\t\t{\n\t\t\t\td = a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y);\n\t\t\t\td *= 2.0;\n\t\t\t\t\n\t\t\t\tif (d != 0.0)\n\t\t\t\t{\n\t\t\t\t\tu.x = (a.x*a.x+a.y*a.y)*(b.y-c.y)+(b.x*b.x+b.y*b.y)*(c.y-a.y)+(c.x*c.x+c.y*c.y)*(a.y-b.y);\n\t\t\t\t\tu.y = (a.x*a.x+a.y*a.y)*(b.x-c.x)+(b.x*b.x+b.y*b.y)*(c.x-a.x)+(c.x*c.x+c.y*c.y)*(a.x-b.x);\n\t\t\t\t\tu.y *= -1.0;\n\t\t\t\t\tu.x /= d;\n\t\t\t\t\tu.y /= d;\n\t\t\t\t\tS.insert(u);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\twhile (!S.empty())\n\t{\n\t\tt.u = *S.begin();\n\t\tS.erase(S.begin());\n\t\tt.d = 1e99;\n\t\tfor (int i = 0; i < N; i += 1)\n\t\t{\n\t\t\tt.d = min(t.d, D(t.u,p[i]));\n\t\t}\n\t\tq.push_back(t);\n\t}\n\t\n\tsort(q.begin(), q.end());\n\t\n\tpi cn = make_pair(0,0);\n\t\n\tfor (int i = 0; i < q.size(); i += 1)\n\t{\n\t\tv.clear();\n\t\tfor (int j = 0; j < N; j += 1)\n\t\t{\n\t\t\tif (fabs(D(q[i].u,p[j])-q[i].d) < 1e-9)\n\t\t\t{\n\t\t\t\tv.push_back(make_pair(p[j].x-q[i].u.x, p[j].y-q[i].u.y));\n\t\t\t}\n\t\t}\n\t\t\n\t\tsort(v.begin(), v.end(), comp2);\n\t\tcnt = v.size();\n\t\t\n\t\tif(cnt < 3)\n\t\t\tcontinue;\n\t\t\t\n\t\tv.push_back(v[0]);\n\t\tflag = 1;\n\t\t\n\t\tfor (int j = 0; j < cnt; j += 1)\n\t\t{\n\t\t\tif (cross(v[j], cn, v[j+1]) >= 0)\n\t\t\t{\n\t\t\t\tflag = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag)\n\t\t{\n\t\t\tprintf(\"%.6lf\\n\", q[i].d);\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n\tcout << -1 << '\\n';\n\t\n\treturn 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "input": "", "output": "", "tags": [], "dificulty": "2600", "interactive": false}