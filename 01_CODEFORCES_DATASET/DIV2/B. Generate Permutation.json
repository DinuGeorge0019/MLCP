{
    "link": "https://codeforces.com//contest/2001/problem/B",
    "problemId": "2825891",
    "problem_idx": "B",
    "shortId": "2001B",
    "contest_number": "2001",
    "problem_submissions": {
        "B": [
            277398710,
            277337688,
            277333922,
            277337722,
            277337555,
            277331647,
            277331395,
            277333468,
            277348528,
            277341588,
            277340363,
            277333951,
            277333359,
            277338651,
            277333253,
            277332470,
            277333025,
            277335874,
            277338084,
            277338047
        ],
        "A": [
            277396358,
            277332606,
            277324069,
            277328881,
            277324101,
            277323710,
            277325572,
            277324708,
            277342273,
            277324601,
            277327125,
            277324363,
            277324076,
            277325983,
            277324668,
            277323640,
            277324308,
            277324085,
            277329437,
            277324734
        ],
        "C": [
            277393929,
            277349647,
            277343837,
            277347819,
            277349047,
            277345424,
            277478575,
            277341657,
            277342745,
            277358874,
            277352973,
            277356317,
            277345054,
            277358657,
            277349482,
            277354577,
            277354478,
            277341600,
            277373032,
            277357702,
            277354144
        ],
        "D": [
            277386516,
            277362274,
            277363417,
            277423990,
            277364589,
            277362182,
            277363264,
            277481384,
            277378655,
            277372682,
            277373441,
            277372083,
            277373799,
            277371029,
            277376602,
            277374746,
            277374825,
            277383133,
            277374017,
            277362123,
            277383713,
            277376041
        ],
        "E2": [
            277373545,
            283086293,
            277423307,
            278251315,
            278253470
        ],
        "E1": [
            277335505,
            277376073,
            277395747,
            277388497,
            277391499,
            277398952,
            277393530,
            277401516,
            277389370,
            277393752,
            277394666,
            277405095,
            277396023,
            277402006,
            277399147,
            277397663,
            277407033,
            278257931,
            277717643,
            277717625,
            277717605,
            277717578,
            277403586,
            277396025,
            277402066
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132942",
    "editorial": "Consider the cost function:Let c_1, c_2\ndenote the minimum number of carriage return operations needed to make a\n= p if Misuki is using first/second typewritter. Letâs consider how to\ncalculate them.For c_1, we need to do carriage return operation whenever\nthe position of value x + 1 is before x, for all x\nin [1, n - 1], so c_1 = (\ntext{}x\nin [1, n - 1]\ntext{ such that }\nmathrm{pos}_x >\nmathrm{pos}_{x + 1}).Similarly, c_2 = (\ntext{}x\nin [1, n - 1]\ntext{ such that }\nmathrm{pos}_x <\nmathrm{pos}_{x + 1}).Since for x\nin [1, n - 1], either\nmathrm{pos}_x <\nmathrm{pos}_{x + 1} or\nmathrm{pos}_x >\nmathrm{pos}_{x + 1} would hold, so we have c_1 + c_2 = n - 1, which is a\nconstant, and c_1 = c_2\nleftrightarrow c_1 =\nfrac{n - 1}{2}, which only has solution when n is odd, and such p can be\nconstructed easily (for example, {n - 1, n, n - 3, n - 2, ..., 4, 5, 2,\n3, 1}).\n",
    "name": "B. Generate Permutation",
    "statement": "There is an integer sequence a of length n, where each element is\r\ninitially -1.Misuki has two typewriters where the first one writes\r\nletters from left to right, with a pointer initially pointing to 1, and\r\nanother writes letters from right to left with a pointer initially\r\npointing to n.Misuki would choose one of the typewriters and use it to\r\nperform the following operations until a becomes a permutation of [1, 2,\r\nldots, n] write number: write the minimum integer that isn’t present in\r\nthe array a to the element a_i, i is the position where the pointer\r\npoints at. Such operation can be performed only when a_i = -1. carriage\r\nreturn: return the pointer to its initial position (i.e. 1 for the first\r\ntypewriter, n for the second) move pointer: move the pointer to the next\r\nposition, let i be the position the pointer points at before this\r\noperation, if Misuki is using the first typewriter, i := i + 1 would\r\nhappen, and i := i - 1 otherwise. Such operation can be performed only\r\nif after the operation, 1\r\nle i\r\nle n holds. Your task is to construct any permutation p of length n,\r\nsuch that the minimum number of carriage return operations needed to\r\nmake a = p is the same no matter which typewriter Misuki is using.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#define pb push_back#define sz(a) ((int)a.size())#define re return#define all(a) a.begin(),a.end()#define rept(i,a,b) for(int i=(a);i<(b);i++)#define rep(i,a) rept(i,0,a)#define vi vector<int>#define pii pair<int,int>#define F first#define S second#define de(x) cout<<#x<<\"=\"<<x<<\"\\n\";#define int long long#define il inline#define db double#define ld long dbusing namespace std;const int MOD=998244353,INF=1000000000000000000;template<typename T>inline void Mx(T &a,T b){a=max(a,b);}template<typename T>inline void Mi(T &a,T b){a=min(a,b);}void FILEIO(string s){\tfreopen((s+\".in\").c_str(),\"r\",stdin);\tfreopen((s+\".out\").c_str(),\"w\",stdout);}void run(){\tint n;\tcin>>n;\tif(n%2==0){\t\tcout<<\"-1\\n\";\t\tre;\t}\tvi v(n),vv(n);\tfor(int i=0,p=0;p<n;i++,p+=2)v[p]=i;\tfor(int i=n-1,p=1;p<n;i--,p+=2)v[p]=i;\trep(i,n)vv[v[i]]=i;\trep(i,n)cout<<vv[i]+1<<\" \";cout<<\"\\n\";}signed main(){\tios::sync_with_stdio(0);\tcin.tie(0);cout.tie(0);\tint T=1;\tcin>>T;\twhile(T--)\t\trun();\tre 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Generate Permutation.json",
    "hint": [
        "Hint 1 Write a few small cases (ex. ) and play with it, can you notice something interesting about the cost function?",
        "Hint 1 Consider subtask — decision version of the problem (i.e. yes/no problem) as follow: \"Given a fixed , check if this permutation is valid.\"",
        "Hint 2 The above problem would reduce to finding minimum number of carriage return operations needed for each typewriter.",
        "Hint 3 Now you know how to solve above problem, do you notice something interesting about the cost function?"
    ]
}