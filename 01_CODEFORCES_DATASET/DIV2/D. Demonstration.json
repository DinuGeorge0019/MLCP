{"link": "https://codeforces.com//contest/192/problem/D", "problemId": "1358", "problem_idx": "D", "shortId": "192D", "contest_number": "192", "problem_submissions": {"E": [1730427, 1729827, 1729169, 1737343, 1730835, 1730060, 1730937, 1729815, 1729714, 1730328, 1742732, 1730184, 1806477, 1737169, 1737156], "D": [1728885, 1728181, 1729939, 1729209, 1730875, 1729431, 1730793, 1731274, 1729104, 1729076, 1729834, 1729950, 1730041, 1729892, 1730175, 1729978], "C": [1727437, 1727181, 1730368, 1727614, 1728967, 1728425, 1726946, 1730464, 1727937, 1727660, 1727585, 1727616, 1727725, 1727798, 1727968, 1728394, 1728325, 1727926], "B": [1726501, 1725823, 1726206, 1726346, 1727073, 1726253, 1725853, 1726712, 1726473, 1726128, 1725769, 1726259, 1726326, 1726262, 1726409, 1726302, 1726871, 1726862], "A": [1725727, 1725470, 1725578, 1725407, 1725501, 1731382, 2807333, 1731777, 1742258, 1725639, 1725724, 1725378, 1725587, 1725709, 1730327, 1725718, 1725838, 1725740, 1725684]}, "name": "D. Demonstration", "statement": "In the capital city of Berland, Bertown, demonstrations are against the\r\nrecent election of the King of Berland. Berland opposition, led by Mr.\r\nOvalny, believes that the elections were not fair enough and wants to\r\norganize a demonstration at one of the squares.Bertown has squares,\r\nnumbered from to , they are numbered in the order of increasing distance\r\nbetween them and the city center. That is, square number is central, and\r\nsquare number is the farthest from the center. Naturally, the opposition\r\nwants to hold a meeting as close to the city center as possible (that\r\nis, they want an square with the minimum number).There are exactly days\r\nleft before the demonstration. Now all squares are free. But the Bertown\r\ncity administration never sleeps, and the approval of an application for\r\nthe demonstration threatens to become a very complex process. The\r\nprocess of approval lasts several days, but every day the following\r\nprocedure takes place: The opposition shall apply to hold a\r\ndemonstration at a free square (the one which isn\u2019t used by the\r\nadministration). The administration tries to move the demonstration to\r\nthe worst free square left. To do this, the administration organizes\r\nsome long-term activities on the square, which is specified in the\r\napplication of opposition. In other words, the administration starts\r\nusing the square and it is no longer free. Then the administration\r\nproposes to move the opposition demonstration to the worst free square.\r\nIf the opposition has applied for the worst free square . If the\r\nadministration does not have enough money to organize an event on the\r\nsquare in question, the opposition\u2019s application is accepted. If\r\nadministration doesn\u2019t have enough money to organize activity, then rest\r\nof administration\u2019s money spends and application is accepted If the\r\napplication is not accepted, then the opposition can agree to the\r\nadministration\u2019s proposal (that is, take the worst free square), or\r\nwithdraw the current application and submit another one the next day. If\r\nthere are no more days left before the meeting, the opposition has no\r\nchoice but to agree to the proposal of City Hall. If application is\r\naccepted opposition can reject it. It means than opposition still can\r\nsubmit more applications later, . In order to organize an event on the\r\nsquare , the administration needs to spend bourles. Because of the\r\ncrisis the administration has only bourles to confront the opposition.\r\nWhat is the best square that the opposition can take, if the\r\nadministration will keep trying to occupy the square in question each\r\ntime? Note that the administration\u2019s actions always depend only on the\r\nactions of the opposition.\r\n", "solutions": ["#include<algorithm>\n#include<cassert>\n#include<complex>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<map>\n#include<queue>\n#include<set>\n#include<sstream>\n#include<stack>\n#include<string>\n#include<vector>\n#define FOR(i,a,b) for(int i=(a);i<=(b);++i)\n#define FORD(i,a,b) for(int i=(a);i>=(b);--i)\n#define REP(i,n) for(int i=0;i<(n);++i)\n#define fup FOR\n#define fdo FORD\n#define VAR(v,i) __typeof(i) v=(i)\n#define FORE(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)\n#define ALL(x) (x).begin(),(x).end()\n#define SIZE(x) ((int)(x).size())\n#define siz SIZE\n#define CLR memset((x),0,sizeof (x))\n#define PB push_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SQR(a) ((a)*(a))\n\n#define DEBUG 1\n#define debug(x) {if(DEBUG) cerr << #x << \" = \" << x << endl;}\n#define debugv(x) {if(DEBUG) {cerr << #x << \" = \"; FORE(it,(x)) cerr << *it << \" . \"; cerr  <<endl;}}\n\nusing namespace std;\ntypedef long long LL;\ntypedef long double LD;\ntypedef pair<int,int> PII;\ntypedef vector<int> VI;\ntypedef VI vi;\ntypedef LL lli;\n\nconst int inf = 1000000000;\nconst int MAXN = 100100;\nPII a[MAXN]; \nint A[MAXN];\nbool got[MAXN];\nint main() {\n    int n,k;\n    long long b;\n\n    cin >> n >> k;\n    cin >> b;\n    REP(i, n) {\n       int v;\n       cin >> v;\n       a[i] = MP(v, i);\n       A[i] = v;\n    }\n    sort(a, a+n-1);\n    reverse(a, a+n-1);\n    LL sum = 0;\n    REP(i, k) {\n        sum += a[i].FI;\n        got[a[i].SE] = true;\n    }\n    REP(i, n) {\n        if (got[i]){\n            if(sum > b) {\n                printf(\"%d\\n\", i+1);\n                return 0;\n            }\n        } else {\n            if (sum - a[k-1].FI + A[i] > b) {\n                printf(\"%d\\n\", i+1);\n                return 0;\n            }\n        }\n    }\n    printf(\"%d\\n\", n);\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "constructive algorithms"], "dificulty": "1700", "interactive": false}