{
    "link": "https://codeforces.com//contest/839/problem/B",
    "problemId": "117993",
    "problem_idx": "B",
    "shortId": "839B",
    "contest_number": "839",
    "problem_submissions": {
        "E": [
            29403824,
            29409457,
            29402914,
            29408405,
            29406327,
            29410552,
            29409014,
            29406788,
            29421538
        ],
        "D": [
            29392016,
            29388512,
            29406607,
            29404686,
            29398161,
            29392526,
            29399719,
            29390719,
            29400075,
            29403406,
            29402721,
            29399071,
            29398521,
            29424440,
            29406196,
            29459720,
            29400759,
            29408213,
            29406118,
            29386786,
            29408520
        ],
        "B": [
            29387404,
            29386986,
            29393659,
            29399860,
            29418355,
            29403115,
            29393756,
            29389053,
            29386717,
            29387372,
            29401456,
            29401071,
            29391332,
            29403433,
            29397466,
            29394616,
            29424848,
            29400078
        ],
        "C": [
            29383480,
            29380903,
            29399289,
            29392182,
            29388563,
            29393777,
            29384539,
            29382506,
            29387310,
            29394730,
            29389857,
            29391781,
            29393376,
            29394828,
            29384424,
            29392243,
            29387122,
            29397138,
            29382174,
            29387027
        ],
        "A": [
            29379625,
            29382369,
            29383241,
            29383804,
            29379670,
            29380225,
            29381733,
            29394107,
            29380558,
            29383606,
            29380710,
            29381324,
            29380863,
            29382906,
            29380087,
            29384719,
            29381302,
            29383997,
            29392184,
            29388770
        ]
    },
    "name": "B. Game of the Rows",
    "statement": "Daenerys Targaryen has an army consisting of groups of soldiers, the -th\r\ngroup contains soldiers. She wants to bring her army to the other side\r\nof the sea to get the Iron Throne. She has recently bought an airplane\r\nto carry her army through the sea. The airplane has rows, each of them\r\nhas seats. We call two seats neighbor, if they are in the same row and\r\nin seats , , , or . Daenerys Targaryen wants to place her army in the\r\nplane so that there are no two soldiers from different groups sitting on\r\nneighboring seats.Your task is to determine if there is a possible\r\narranging of her army in the airplane such that the condition above is\r\nsatisfied.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define FOR(i,s,e) for(int i=(s);i<=(e);i++)\n#define FORD(i,s,e) for(int i=(s);i>=(e);i--)\n#define ALL(k) (k).begin(),(k).end()\n#define e1 first\n#define e2 second\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long LLU;\ntypedef long double LD;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\ntypedef vector<int> VI;\nconst bool print=false;\n\nint n, k;\n\nint jed, dwa, czt;\nvector <int> wek;\n\nvoid nope()\n{\n    printf(\"NO\\n\");\n    exit(0);\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &k);\n    dwa=n*2;\n    czt=n;\n    for (int i=1; i<=k; i++)\n    {\n        int x;\n        scanf(\"%d\", &x);\n        wek.push_back(x);\n    }\n    while(!wek.empty())\n    {\n        nth_element(wek.begin(), wek.end()-1, wek.end());\n        int x=wek.back();\n        wek.pop_back();\n        if (!x)\n            continue;\n        if (x>=4 && czt)\n        {\n            czt--;\n            x-=4;\n            wek.push_back(x);\n            continue;\n        }\n        if (x>=4 && dwa)\n        {\n            dwa--;\n            x-=2;\n            wek.push_back(x);\n            continue;\n        }\n        if (x>=4 && jed)\n        {\n            jed--;\n            x-=1;\n            wek.push_back(x);\n            continue;\n        }\n        if (x>=4)\n            nope();\n        if (x==3)\n        {\n            if (czt)\n            {\n                czt--;\n                continue;\n            }\n            if (dwa)\n            {\n                dwa--;\n                x-=2;\n                wek.push_back(x);\n                continue;\n            }\n            if (jed)\n            {\n                jed--;\n                x-=1;\n                wek.push_back(x);\n                continue;\n            }\n            nope();\n        }\n        if (x==2)\n        {\n            if (czt)\n            {\n                czt--;\n                jed++;\n                continue;\n            }\n            if (dwa)\n            {\n                dwa--;\n                x-=2;\n                wek.push_back(x);\n                continue;\n            }\n            if (jed)\n            {\n                jed--;\n                x-=1;\n                wek.push_back(x);\n                continue;\n            }\n            nope();\n        }\n        if (x==1)\n        {\n            \n            if (czt)\n            {\n                czt--;\n                jed++;\n                continue;\n            }\n            if (dwa)\n            {\n                dwa--;\n                continue;\n            }\n            if (jed)\n            {\n                jed--;\n                continue;\n            }\n            nope();\n        }\n    }\n    printf(\"YES\\n\");\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "implementation"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Game of the Rows.json",
    "editorial_link": "https://codeforces.com//blog/entry/53815",
    "editorial": "Use greedy solution. Consider a group with members, put of them in seats\r\n[3, 6] of some row, and throw the row. Now we have members in this group\r\nnow. Continue till all of the seats in the range become full, continue\r\nwith and . Now handle groups with size .For groups with size , allocate\r\nseats in range or seats in range or .For groups with size , allocate\r\nseats in range or or seats in range . If no seat found, divide this\r\ngroup and make it two groups with size 1.Fill the other parts with\r\ngroups with groups with size .If in any part we ran out of seat, the\r\nanswer is , otherwise.\r\n",
    "hint": []
}