{
    "link": "https://codeforces.com//contest/2107/problem/B",
    "problemId": "3369874",
    "problem_idx": "B",
    "shortId": "2107B",
    "contest_number": "2107",
    "problem_submissions": {
        "F2": [
            318524340,
            318484817,
            318509938,
            318511203,
            318525439,
            318523594,
            318519776
        ],
        "F1": [
            318519651,
            318487840,
            318492813,
            318505063,
            318504824,
            318527743,
            318517545,
            318515290,
            318492245,
            318507170,
            318502926,
            318494892,
            318509274,
            318493554,
            318492460,
            318538698,
            318513104
        ],
        "E": [
            318507496,
            318520903,
            318524820,
            319045355,
            318517429,
            318526986,
            318522135,
            318520283
        ],
        "D": [
            318493293,
            318536403,
            318487166,
            318499916,
            318508438,
            318508583,
            318505898,
            318493577,
            318513154,
            318499523,
            318510734,
            318518593,
            318502474,
            318501316,
            318505642
        ],
        "C": [
            318476342,
            318476070,
            318476829,
            318476779,
            318475602,
            318489984,
            318490878,
            318480285,
            318468986,
            318484993,
            318479001,
            318481099,
            318477842,
            318483418,
            318469245,
            318475881,
            318486336
        ],
        "B": [
            318459029,
            318461790,
            318460834,
            318460140,
            318461949,
            318460838,
            318465148,
            318465596,
            318462205,
            318463062,
            318467674,
            318475025,
            318483564,
            318464926,
            318482093,
            318463365,
            318465794
        ],
        "A": [
            318456403,
            318456545,
            318456374,
            318456379,
            318456465,
            318456630,
            318465029,
            318458451,
            318456594,
            318457358,
            318459958,
            318457429,
            318485822,
            318458433,
            318472714,
            318456756,
            318458361
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142642",
    "editorial": "SolutionSuppose holds, and there is at least one . Then, infact it is\r\npossible to take one apple while still keeping the condition of .\r\nProofWe will subtract from the maximum element. Then does not change\r\nexcept when . In that special case, you can check that the move is valid\r\nas becomes .In any other case, reduces by or , so only decreases, and\r\nthus clearly holds.Thus, for an array with , the only way for a player\r\nto lose is when all . But this happens exactly after the -th turn\r\nbecause each turn reduces by . It may be possible that a first move\r\nitself is not possible. For example, in the case that . We should check\r\nthat after subtracting the maximum element, the array has the property\r\nthat and immediately print otherwise.In the other case, we can simply\r\nprint when is odd, and when is even. This is because when is odd, Tom\r\nwill be the last person to make a move since he went first and the total\r\nnumber of turns is odd, and vice versa.Time complexity is .\r\n",
    "name": "B. Apples in Boxes",
    "statement": "Tom and Jerry found some apples in the basement. They decided to play a\r\ngame to get some apples.There are n boxes, and the i-th box has a_i\r\napples inside. Tom and Jerry take turns picking up apples. Tom goes\r\nfirst. On their turn, they have to do the following: Choose a box i (1\r\nle i\r\nle n) with a positive number of apples, i.e. a_i > 0, and pick 1 apple\r\nfrom this box. Note that this reduces a_i by 1. If no valid box exists,\r\nthe current player loses. If ,\r\nmax(a_1, a_2,\r\nldots, a_n) -\r\nmin(a_1, a_2,\r\nldots, a_n) > k holds, then the current player (who made the last move)\r\nalso loses. If both players play optimally, predict the winner of the\r\ngame.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "greedy",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Apples in Boxes.json",
    "hint": []
}