{
    "link": "https://codeforces.com//contest/424/problem/C",
    "problemId": "8842",
    "problem_idx": "C",
    "shortId": "424C",
    "contest_number": "424",
    "problem_submissions": {
        "D": [
            6467465,
            6468586,
            6468437,
            6471959,
            6471829,
            6468691,
            6468869,
            6467987,
            6469186,
            6469164,
            6468850,
            6468690,
            6469089,
            6472200,
            6472173,
            6469491,
            6468201,
            6469445,
            6468946,
            6470668,
            6470648
        ],
        "B": [
            6465143,
            6465456,
            6465043,
            6464913,
            6464966,
            6468705,
            6465228,
            6464961,
            6466059,
            6465849,
            6465782,
            6467158,
            6465289,
            6469422,
            6465084,
            6465026,
            6464523,
            6464586,
            6464947,
            6465071
        ],
        "C": [
            6464612,
            6464680,
            6466885,
            6466816,
            6466600,
            6466756,
            6466254,
            6466363,
            6467123,
            6466142,
            6467334,
            6467704,
            7360874,
            6469401,
            6471708,
            6464542,
            6465234,
            6465523,
            6465757,
            6465709
        ],
        "A": [
            6463928,
            6465862,
            6463956,
            6464239,
            6464063,
            6464156,
            6464137,
            6464377,
            6467414,
            6468789,
            6467791,
            6466667,
            6464430,
            6469471,
            6464203,
            6463882,
            6463888,
            6463886,
            6464224,
            6464098
        ]
    },
    "name": "C. Magic Formulas",
    "statement": "People in the Tomskaya region like magic formulas very much. You can see\r\nsome of them below.Imagine you are given a sequence of positive integer\r\nnumbers , , ..., . Lets write down some magic formulas:Here, \"\" means\r\nthe operation of taking the residue after dividing.The expression means\r\napplying the bitwise (excluding \"OR\") operation to integers and . The\r\ngiven operation exists in all modern programming languages. For example,\r\nin languages C++ and Java it is represented by \"\", in Pascal by\r\n\"xor\".People in the Tomskaya region like magic formulas very much, but\r\nthey don\u2019t like to calculate them! Therefore you are given the sequence\r\n, calculate the value of .\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdlib>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define forint(i, a, b) for(int i=(int)(a); i<=(int)(b); ++i)\n#define forintdown(i, a, b) for(int i=(int)(a); i>=(int)(b); --i)\n#define forn(i, n) forint(i, 0, (n)-1)\n#define forndown(i, n) forintdown(i, (n)-1, 0)\n#define fillchar(a, x) memset(a, x, sizeof(a))\ntypedef long long LL;\ntypedef pair<int,int> PII;\ntypedef vector<int> VI;\ntypedef vector<LL> VL;\ntypedef vector<PII> VPI;\n#define MP make_pair\n#define PB push_back\n#define fi first\n#define se second\n\nint t[1000010];\nint n;\n\nint main() {\n\tint ans=0;\n\tscanf(\"%d\", &n);\n\tforint(i, 1, n) {\n\t\tint x; scanf(\"%d\", &x);\n\t\tans^=x;\n\t}\n\tt[0]=0;\n\tforint(i, 1, n) t[i]=t[i-1]^i;\n\tforint(i, 1, n) {\n\t\tint u=n/i;\n\t\tif(u%2!=0) {\n\t\t\tans^=t[i-1];\n\t\t}\n\t\tans^=t[n%i];\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Magic Formulas.json",
    "editorial_link": "https://codeforces.com//blog/entry/11944",
    "editorial": "Consider the following formulas: Let . Lets compute the following\r\nfunction for each (). One can do it in using . Lets transform : Also:\r\nThus: That means, if is odd, , otherwise . can be computed in , that\u00e2\u0080\u0099s\r\nwhy the complexity of the whole solution .\r\n"
}