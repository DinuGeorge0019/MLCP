{
    "link": "https://codeforces.com//contest/520/problem/E",
    "problemId": "23437",
    "problem_idx": "E",
    "shortId": "520E",
    "contest_number": "520",
    "problem_submissions": {
        "D": [
            10119858,
            10114121,
            10111852,
            10111632,
            10111622,
            10170455,
            10121530,
            10118171,
            10118084,
            10122862,
            10134966
        ],
        "E": [
            10114178,
            10113899,
            10113814,
            10152648,
            10109379,
            10113966
        ],
        "C": [
            10108152,
            10109805,
            10109410,
            10108517,
            10109427,
            10114253,
            10113273,
            10113527,
            10112592,
            10107996,
            10108589,
            10108504,
            10107807,
            10108758,
            10108493,
            10109002,
            10108917,
            10110247,
            10109125
        ],
        "B": [
            10106931,
            10107333,
            10110028,
            10106418,
            10116733,
            10106156,
            10110029,
            10112900,
            10113188,
            10106429,
            10105522,
            10105854,
            10105873,
            10105925,
            10106498,
            10106225,
            10106816,
            10106938
        ],
        "A": [
            10105356,
            10105380,
            10105204,
            10104484,
            10110338,
            10105073,
            10105335,
            10111915,
            10112806,
            10104426,
            10104489,
            10104959,
            10104609,
            10104534,
            10104623,
            10104731,
            10104535,
            10105461
        ]
    },
    "name": "E. Pluses everywhere",
    "statement": "Vasya is sitting on an extremely boring math class. To have fun, he took\r\na piece of paper and wrote out numbers on a single line. After that,\r\nVasya began to write out different ways to put pluses (\"\") in the line\r\nbetween certain digits in the line so that the result was a correct\r\narithmetic expression; formally, no two pluses in such a partition can\r\nstand together (between any two adjacent pluses there must be at least\r\none digit), and no plus can stand at the beginning or the end of a line.\r\nFor example, in the string , ways (add no pluses), or are correct, and\r\nways , or are incorrect.The lesson was long, and Vasya has written all\r\nthe correct ways to place exactly pluses in a string of digits. At this\r\npoint, he got caught having fun by a teacher and he was given the task\r\nto calculate the sum of all the resulting arithmetic expressions by the\r\nend of the lesson (when calculating the value of an expression the\r\nleading zeros should be ignored). As the answer can be large, Vasya is\r\nallowed to get only its remainder modulo . Help him!\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#define mo 1000000007\n#define N 100010\nusing namespace std;\ntypedef long long ll;\nll n,k;\nll fac[N],ifac[N];\nchar s[N];\ninline ll Power(ll a,ll b){\n    ll now=1;\n    for(;b;b>>=1,a=1ll*a*a%mo)\n     if(b&1) now=1ll*now*a%mo;\n    return now;\n}\nll a[N],f[N];\ninline ll c(ll n,ll m){\n    return 1ll*fac[n]*ifac[m]%mo*ifac[n-m]%mo;\n}\nll Sum[N];ll power[N];\ninline ll Change(ll S,ll t){\n    return (Sum[t]-Sum[S-1]*power[t-S+1]%mo+mo)%mo;\n}\nint main(){\n    scanf(\"%I64d%I64d\",&n,&k);\n    scanf(\"%s\",s+1);\n    fac[0]=1;\n    for(ll i=1;i<=n;i++)fac[i]=1ll*fac[i-1]*i%mo;\n    ifac[0]=1;\n    ifac[n]=Power(fac[n],mo-2);\n    for(ll i=n-1;i;i--)ifac[i]=1ll*ifac[i+1]*(i+1)%mo;\n    for(ll i=1;i<=n;i++)a[i]=s[i]-'0';\n    for(ll i=1;i<=n;i++)Sum[i]=a[i];\n    power[0]=1;\n    for(int i=1;i<=n;i++)power[i]=(power[i-1]*10ll)%mo;\n    for(ll i=2;i<=n;i++)Sum[i]=(Sum[i]+Sum[i-1]*10ll%mo)%mo;\n    for(ll i=2;i<=n;i++)\n    (a[i]+=a[i-1])%=mo;\n    f[1]=a[n]%mo;for(ll i=2;i<=n;i++)f[i]=((1ll*f[i-1]*10ll%mo+(a[n]-a[i-1])%mo)%mo-1ll*Change(n-i+2,n)*10%mo+mo)%mo;\n    if(k==0)printf(\"%I64d\\n\",f[n]);\n    else \n    if(k==1){ll nowans=0;\n   for(ll i=1;i<=n-1;i++)\n   (nowans+=Change(1,i)+Change(n-i+1,n))%=mo;\n        printf(\"%I64d\\n\",nowans);\n    }else{\n        ll nowans=0;for(ll i=1;i<=n-2-(k-2);i++){\n            nowans=(1ll*nowans+1ll*f[i]*c(n-i-2,k-2)%mo)%mo;\n        }for(ll i=1;i<=n-2-(k-2);i++){\n            nowans=((1ll*nowans-1ll*Change(1,i)*c(n-i-2,k-2)%mo+mo)%mo-1ll*Change(n-i+1,n)*c(n-i-2,k-2)%mo+mo)%mo;\n        }for(ll i=1;i<=n-k;i++){\n            nowans=(1ll*nowans+1ll*(Change(1,i)+Change(n-i+1,n))*c(n-i-1,k-1)%mo)%mo;\n        }\n  printf(\"%I64d\\n\",nowans);\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math",
        "number theory"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Pluses everywhere.json",
    "editorial_link": "https://codeforces.com//blog/entry/16736",
    "editorial": "Consider some way of placing all the pluses, and a single digit di (digits in the string are numbered starting from 0 from left to right). This digit gives input of di\u00b710l to the total sum, where l is the distance to the nearest plus from the right, or to the end of string if there are no pluses there. If we sum up these quantities for all digits and all ways of placing the pluses, we will obtain the answer.\n\nFor a given digit di and some fixed l, how many ways are there to place the pluses? First of all, consider the case when the part containing the digit di is not last, that is, i?+?l?<?n?-?1. There are n?-?1 gaps to place pluses in total; the constraint about di and the distance l means that after digits di, ..., di?+?l?-?1 there are no pluses, while after the digit di?+?l there should be a plus. That is, the string should look as follows:\n\n\nHere a dot means a gap without a plus, and a question mark means that it's not important whether there is a plus or not. So, out of n?-?1 possible gaps there are l?+?1 gaps which states are defined, and there is one plus used in these gaps. That means that the other (n?-?1)?-?(l?+?1)?=?n?-?l?-?2 gaps may contain k?-?1 pluses in any possible way; that is, the number of such placements is . A similar reasoning implies that if the digit di is in the last part, that is, i?+?l?=?n?-?1, the number of placements is .\n\nTo sum up, the total answer is equal to\n\n\nLet us transform the sum:\n\n\nTo compute these sums, we will need to know all powers of 10 up to n-th (modulo 109?+?7), along with the binomial coefficients. To compute the binomials, recall that , so it is enough to know all the numbers k! for k upto n, along with their modular inverses. Also we should use the prefix sums of di, that is, the array . The rest is simple evaluation of the above sums."
}