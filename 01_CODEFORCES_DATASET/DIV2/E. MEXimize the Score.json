{
    "link": "https://codeforces.com//contest/2030/problem/E",
    "problemId": "2962992",
    "problem_idx": "E",
    "shortId": "2030E",
    "contest_number": "2030",
    "problem_submissions": {
        "D": [
            286870605,
            286870097,
            286766067,
            286743790,
            286749704,
            286752517,
            286743540,
            286763694,
            286769489,
            286762215,
            286755968,
            286807582,
            286774479,
            286755264,
            286748829,
            286762354,
            286767397,
            286766307,
            286775817,
            286773805,
            286867460,
            286806694,
            286757030
        ],
        "C": [
            286860734,
            286764785,
            286775512,
            286732737,
            286735870,
            286731279,
            286736529,
            286759035,
            286741312,
            286740209,
            286770332,
            286732276,
            286730948,
            286749099,
            286748589,
            286737019,
            286738816,
            286732618,
            286746919,
            286735952,
            286744382
        ],
        "B": [
            286858184,
            286726117,
            286721582,
            286722000,
            286722997,
            286722179,
            286731090,
            286742656,
            286728669,
            286721456,
            286721616,
            286722634,
            286723485,
            286723817,
            286722712,
            286723090,
            286725291,
            286719819,
            286727047,
            286721215,
            286722880
        ],
        "A": [
            286857205,
            286716570,
            286716508,
            286717068,
            286716187,
            286716722,
            286727391,
            286716522,
            286715165,
            286715628,
            286715445,
            286716659,
            286717260,
            286715083,
            286717340,
            286715258,
            286718621,
            286715888,
            286722488,
            286715834,
            286716388
        ],
        "G1": [
            286855127,
            286854605,
            287072911,
            286866647
        ],
        "F": [
            286768609,
            286793091,
            286802410,
            286804764,
            286807723,
            286808203,
            286799478,
            286806636,
            286814242,
            286786481,
            286811066,
            286813827,
            286813676,
            286816754,
            286814190,
            286813606,
            286813682,
            286795825,
            286808765,
            286817519
        ],
        "E": [
            286766337,
            286759349,
            286779444,
            286786742,
            286788454,
            286791781,
            286783999,
            286800776,
            286780259,
            286764648,
            286793854,
            286792948,
            286789703,
            286779768,
            286799721,
            286794191,
            286791806,
            286816988,
            286786381,
            286789315
        ],
        "G2": [
            287138384
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135218",
    "editorial": "Problem Credits: Proof_by_QED, cry, satyam343 Analysis: cry Solution\r\nObservation: The score of is equivalent to + + + where stores the\r\nfrequency of integer in .Intuition: We can greedily construct the arrays\r\nby repeating this step: Select the minimum such that and , and construct\r\nthe array . This is optimal because every element we add will increase\r\nthe MEX by , which will increase the score by . If we add , the MEX will\r\nnot increase. Also, when we add an element, we cannot increase the score\r\nby more than . Adding less than elements cannot increase MEX for future\r\narrays.From this observation, we can see that only the frequency array\r\nof matters. From now on, let\u00e2\u0080\u0099s denote the frequency of in as . We can\r\nfind the sum over all subsequences using dynamic programming.Let\u00e2\u0080\u0099s\r\ndenote as the number of subsequences containing only the first integers\r\nand . Initially, . To transition, we need to consider two cases: In the\r\nfirst case, let\u00e2\u0080\u0099s assume . The number of subsequences that can be\r\ncreated is . That is, all the subsequences from previous length such\r\nthat it is possible for to be the new minimum, multiplied by the number\r\nof subsequences where .In the second case, let\u00e2\u0080\u0099s assume . The number of\r\nsubsequences that can be created is . That is, all subsequences\r\ncontaining at least elements of , multiplied by all previous\r\nsubsequences with minimum already equal to .The total score is over the\r\nlength of the prefix and prefix minimum .We can speed up the\r\ncalculations for both cases using suffix sums, however, this still\r\nyields an algorithm. However, is bounded to the interval for each .\r\nSince the sum of is , the total number of secondary states is . This\r\nbecomes just a constant factor, so the total complexity is .\r\n",
    "name": "E. MEXimize the Score",
    "statement": "Suppose we partition the elements of an array b into any number k of\r\nnon-empty multisets S_1, S_2,\r\nldots, S_k, where k is an arbitrary positive integer. Define the of b as\r\nthe maximum value of\r\noperatorname{MEX}(S_1)^{\r\ntext{ }} +\r\noperatorname{MEX}(S_2) +\r\nldots +\r\noperatorname{MEX}(S_k) over all possible partitions of b for any integer\r\nk.Envy is given an array a of size n. Since he knows that calculating\r\nthe of a is too easy for you, he instead asks you to calculate the sum\r\nof of all 2^n - 1 non-empty subsequences of a.^{\r\ntext{ }} Since this answer may be large, please output it modulo 998\r\n,244\r\n,353.^{\r\ntext{ }}\r\noperatorname{MEX} of a collection of integers c_1, c_2,\r\nldots, c_k is defined as the smallest non-negative integer x that does\r\nnot occur in the collection c. For example,\r\noperatorname{MEX}([0,1,2,2]) = 3 and\r\noperatorname{MEX}([1,2,2]) = 0^{\r\ntext{ }}A sequence x is a subsequence of a sequence y if x can be\r\nobtained from y by deleting several (possibly, zero or all) elements.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"using namespace std;\u00a0using ll = long long;using vi = vector<int>;\u00a0#define endl '\\n'#define pb emplace_back#define sz(x) (int)(x).size()#define all(x) (x).begin(), (x).end()#define make_unique(x) sort(all(x)), x.resize(unique(all(x)) - begin(x))#define debug(x) cerr << \"[\" << __LINE__ << \"] \"#x\" = \" << (x) << endl\u00a0template<class T>constexpr T power(T a, ll b) {    T res = 1;    for (; b; b /= 2, a *= a) {        if (b % 2) {            res *= a;        }    }    return res;} constexpr ll mul(ll a, ll b, ll p) {    ll res = a * b - ll(1.L * a * b / p) * p;    res %= p;    if (res < 0) {        res += p;    }    return res;}template<ll P>struct MLong {    ll x;    constexpr MLong() : x{} {}    constexpr MLong(ll x) : x{norm(x % getMod())} {}        static ll Mod;    constexpr static ll getMod() {        if (P > 0) {            return P;        } else {            return Mod;        }    }    constexpr static void setMod(ll Mod_) {        Mod = Mod_;    }    constexpr ll norm(ll x) const {        if (x < 0) {            x += getMod();        }        if (x >= getMod()) {            x -= getMod();        }        return x;    }    constexpr ll val() const {        return x;    }    explicit constexpr operator ll() const {        return x;    }    constexpr MLong operator-() const {        MLong res;        res.x = norm(getMod() - x);        return res;    }    constexpr MLong inv() const {        assert(x != 0);        return power(*this, getMod() - 2);    }    constexpr MLong &operator*=(MLong rhs) & {        x = mul(x, rhs.x, getMod());        return *this;    }    constexpr MLong &operator+=(MLong rhs) & {        x = norm(x + rhs.x);        return *this;    }    constexpr MLong &operator-=(MLong rhs) & {        x = norm(x - rhs.x);        return *this;    }    constexpr MLong &operator/=(MLong rhs) & {        return *this *= rhs.inv();    }    friend constexpr MLong operator*(MLong lhs, MLong rhs) {        MLong res = lhs;        res *= rhs;        return res;    }    friend constexpr MLong operator+(MLong lhs, MLong rhs) {        MLong res = lhs;        res += rhs;        return res;    }    friend constexpr MLong operator-(MLong lhs, MLong rhs) {        MLong res = lhs;        res -= rhs;        return res;    }    friend constexpr MLong operator/(MLong lhs, MLong rhs) {        MLong res = lhs;        res /= rhs;        return res;    }    friend constexpr std::istream &operator>>(std::istream &is, MLong &a) {        ll v;        is >> v;        a = MLong(v);        return is;    }    friend constexpr std::ostream &operator<<(std::ostream &os, const MLong &a) {        return os << a.val();    }    friend constexpr bool operator==(MLong lhs, MLong rhs) {        return lhs.val() == rhs.val();    }    friend constexpr bool operator!=(MLong lhs, MLong rhs) {        return lhs.val() != rhs.val();    }}; template<>ll MLong<0ll>::Mod = 1; template<int P>struct MInt {    int x;    constexpr MInt() : x{} {}    constexpr MInt(ll x) : x{norm(x % getMod())} {}        static int Mod;    constexpr static int getMod() {        if (P > 0) {            return P;        } else {            return Mod;        }    }    constexpr static void setMod(int Mod_) {        Mod = Mod_;    }    constexpr int norm(int x) const {        if (x < 0) {            x += getMod();        }        if (x >= getMod()) {            x -= getMod();        }        return x;    }    constexpr int val() const {        return x;    }    explicit constexpr operator int() const {        return x;    }    constexpr MInt operator-() const {        MInt res;        res.x = norm(getMod() - x);        return res;    }    constexpr MInt inv() const {        assert(x != 0);        return power(*this, getMod() - 2);    }    constexpr MInt &operator*=(MInt rhs) & {        x = 1ll * x * rhs.x % getMod();        return *this;    }    constexpr MInt &operator+=(MInt rhs) & {        x = norm(x + rhs.x);        return *this;    }    constexpr MInt &operator-=(MInt rhs) & {        x = norm(x - rhs.x);        return *this;    }    constexpr MInt &operator/=(MInt rhs) & {        return *this *= rhs.inv();    }    friend constexpr MInt operator*(MInt lhs, MInt rhs) {        MInt res = lhs;        res *= rhs;        return res;    }    friend constexpr MInt operator+(MInt lhs, MInt rhs) {        MInt res = lhs;        res += rhs;        return res;    }    friend constexpr MInt operator-(MInt lhs, MInt rhs) {        MInt res = lhs;        res -= rhs;        return res;    }    friend constexpr MInt operator/(MInt lhs, MInt rhs) {        MInt res = lhs;        res /= rhs;        return res;    }    friend constexpr std::istream &operator>>(std::istream &is, MInt &a) {        ll v;        is >> v;        a = MInt(v);        return is;    }    friend constexpr std::ostream &operator<<(std::ostream &os, const MInt &a) {        return os << a.val();    }    friend constexpr bool operator==(MInt lhs, MInt rhs) {        return lhs.val() == rhs.val();    }    friend constexpr bool operator!=(MInt lhs, MInt rhs) {        return lhs.val() != rhs.val();    }}; template<>int MInt<0>::Mod = 1; template<int V, int P>constexpr MInt<P> CInv = MInt<P>(V).inv(); constexpr int P = 998244353;using Z = MInt<P>; struct Comb {    int n;    std::vector<Z> _fac;    std::vector<Z> _invfac;    std::vector<Z> _inv;        Comb() : n{0}, _fac{1}, _invfac{1}, _inv{0} {}    Comb(int n) : Comb() {        init(n);    }        void init(int m) {        if (m <= n) return;        _fac.resize(m + 1);        _invfac.resize(m + 1);        _inv.resize(m + 1);                for (int i = n + 1; i <= m; i++) {            _fac[i] = _fac[i - 1] * i;        }        _invfac[m] = _fac[m].inv();        for (int i = m; i > n; i--) {            _invfac[i - 1] = _invfac[i] * i;            _inv[i] = _invfac[i] * _fac[i - 1];        }        n = m;    }        Z fac(int m) {        if (m > n) init(2 * m);        return _fac[m];    }    Z invfac(int m) {        if (m > n) init(2 * m);        return _invfac[m];    }    Z inv(int m) {        if (m > n) init(2 * m);        return _inv[m];    }    Z binom(int n, int m) {        if (n < m || m < 0) return 0;        return fac(n) * invfac(m) * invfac(n - m);    }} comb; using u64 = unsigned long long;std::mt19937_64 rng(std::chrono::steady_clock::now().time_since_epoch().count());\u00a0void solve() {\tint n; cin >> n;\tvi a(n), cnt(n);\tfor (int i = 0; i < n; i ++) {\t\tcin >> a[i];\t\tcnt[a[i]] ++;\t}\tvector<vector<Z>> dp(n);\tint tot = n;\tvector<Z> pw(n + 1);\tpw[0] = 1;\tZ ans = 0;\tfor (int i = 1; i <= n; i ++) pw[i] = pw[i - 1] * 2;\tfor (int i = 0; i < n; i ++) {\t\tdp[i].resize(cnt[i] + 1);\t\tfor (int j = 1; j <= cnt[i]; j ++) dp[i][j] = comb.binom(cnt[i], j);\t\tif (i) {\t\t\tZ sum = 0;\t\t\tfor (int j = cnt[i]; j; j --) {\t\t\t\tZ tp = 0;\t\t\t\tif (j <= cnt[i - 1]) tp += dp[i][j] * dp[i - 1][j] + sum * (dp[i - 1][j] - (j<cnt[i-1]?dp[i-1][j+1] : 0));\t\t\t\tsum += dp[i][j];\t\t\t\tdp[i][j] = tp;\t\t\t}\t\t}\t\ttot -= cnt[i];\t\tfor (int j = 1; j <= cnt[i]; j ++) {\t\t\tans += pw[tot] * j * dp[i][j];\t\t}\t\tfor (int j = cnt[i] - 1; j > 0; j --) dp[i][j] += dp[i][j + 1];\t}\tcout << ans << endl;}\u00a0int main() {#ifndef ONLINE_JUDGE\tfreopen(\"in.txt\", \"r\", stdin);//\tfreopen(\"out.txt\", \"w\", stdout);#endif\u00a0\tios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\u00a0\tint tc = 1;\tcin >> tc;\twhile (tc --) solve();\u00a0\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "data structures",
        "dp",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. MEXimize the Score.json"
}