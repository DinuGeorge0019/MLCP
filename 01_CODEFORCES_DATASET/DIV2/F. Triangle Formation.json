{
    "link": "https://codeforces.com//contest/1991/problem/F",
    "problemId": "2781506",
    "problem_idx": "F",
    "shortId": "1991F",
    "contest_number": "1991",
    "problem_submissions": {
        "H": [
            273210632,
            273212730,
            273219908,
            273194851,
            273200656,
            273213505,
            273204889,
            273220591,
            273225451,
            273220804,
            273226512,
            273222266,
            273229115,
            278405080,
            273216843
        ],
        "G": [
            273180456,
            273179521,
            273174064,
            273209283,
            273179708,
            273185549,
            273216085,
            273188851,
            273191410,
            273193985,
            273189153,
            273194518,
            273197531,
            273190195,
            273195818,
            273188177,
            273190908,
            273195464,
            273198241
        ],
        "F": [
            273160781,
            273160990,
            273158593,
            273158141,
            273171320,
            273168196,
            273159727,
            273170129,
            273173513,
            273170857,
            273165439,
            273182207,
            273174869,
            273166190,
            273163947,
            273173198,
            273175470,
            273163587,
            273174682,
            273170108
        ],
        "E": [
            273150868,
            273153734,
            273152235,
            273150823,
            273156934,
            273151786,
            273150935,
            273157824,
            273151366,
            273154414,
            273174335,
            273161395,
            273159133,
            273156803,
            273161464,
            273162124,
            273154749,
            273158567,
            273155964
        ],
        "D": [
            273143134,
            273144551,
            273142645,
            273141713,
            273147820,
            273143829,
            273141673,
            273145581,
            273156995,
            273145729,
            273149790,
            273146459,
            273144249,
            273145676,
            273154684,
            273150687,
            273147840,
            273144991,
            273148567
        ],
        "C": [
            273139495,
            273142387,
            273139319,
            273241170,
            273142853,
            273141897,
            273140491,
            273138783,
            273141460,
            273141958,
            273141853,
            273144830,
            273141321,
            273143714,
            273141051,
            273142758,
            273145128,
            273137630,
            273141184,
            273143400
        ],
        "B": [
            273133106,
            273134906,
            273133339,
            273134525,
            273138116,
            273135569,
            273133092,
            273135379,
            273136693,
            273135755,
            273136343,
            273135805,
            273132915,
            273135366,
            273136849,
            273139913,
            273132449,
            273135138,
            273136549
        ],
        "A": [
            273130858,
            273132065,
            273130939,
            273130875,
            273131982,
            273132539,
            273130929,
            273131106,
            273131228,
            273130992,
            273131052,
            273131178,
            273130862,
            273131382,
            273131308,
            273132778,
            273130871,
            273130965,
            273131362
        ],
        "I": [
            273238749,
            273429741
        ]
    },
    "editorial_link": "https://codeforces.com/blog/entry/132014",
    "editorial": "If there are at least 45\n sticks, it is guaranteed to form a triangle. Proof: For any sequence of stick lengths that cannot form a triangle, we can replace it with the Fibonacci sequence. By replacing the sticks in increasing order, the sequence will remain incapable of forming a triangle. This implies that the Fibonacci sequence is one of the longest sequences that cannot form a triangle. The 45\nth Fibonacci number exceeds 109\n. Therefore, having at least 45\n sticks ensures that it is possible to form a triangle.\n\nIf there are at least 48\n sticks, it is guaranteed to form two triangles. Proof: We can first form the first triangle and remove those sticks. The remaining number of sticks is still at least 45\n, which is sufficient to form the second triangle.\n\nTherefore, only for intervals with fewer than 48\n sticks, we need to check whether it is possible to form two triangles.\n\nFirst, we sort the sticks within the interval. Then we use the following algorithm to find two triangles:\n\nAlgorithm 1: Enumerate all possible sets of 6\n consecutive sticks and check if they can form two triangles.\n\nAlgorithm 2: Identify all possible sets of 3\n consecutive sticks that can form a triangle, and check if there exist two disjoint sets among them.\n\nIf neither algorithm can find two triangles, then it is impossible to form two triangles within the given interval. Proof: Consider an interval where Algorithm 1 cannot find two triangles. Suppose it is indeed possible to form two triangles; the six sticks must be non-consecutive. For any unselected sticks between the chosen sticks, if there exists a stick to its left and a stick to its right that belongs to the same triangle, we can replace the leftmost stick of this triangle with the unselected stick. Continuing this process, either the six sticks will become consecutive, or the left side will form one triangle and the right side will form another, which can be detected by Algorithm 2.",
    "name": "F. Triangle Formation",
    "statement": "You are given n sticks, numbered from 1 to n. The length of the i-th\r\nstick is a_i.You need to answer q queries. In each query, you are given\r\ntwo integers l and r (1\r\nle l < r\r\nle n, r - l + 1\r\nge 6). Determine whether it is possible to choose 6 sticks from the\r\nsticks numbered l to r, to form 2 triangles^{\r\ntext{ }}.^{\r\ntext{ }}A triangle with side lengths a, b, and c is called\r\nnon-degenerate if: a < b + c, b < a + c, and c < a + b.\r\n",
    "solutions": [
        "/** *    author:  tourist *    created: 28.07.2024 10:54:17**/#include <bits/stdc++.h>\u00a0using namespace std;\u00a0#ifdef LOCAL#include \"algo/debug.h\"#else#define debug(...) 42#endif\u00a0int main() {  ios::sync_with_stdio(false);  cin.tie(nullptr);  int n, q;  cin >> n >> q;  vector<int> a(n);  for (int i = 0; i < n; i++) {    cin >> a[i];  }  while (q--) {    int l, r;    cin >> l >> r;    --l;    if (r - l > 200) {      cout << \"YES\" << '\\n';      continue;    }    vector<int> b(a.begin() + l, a.begin() + r);    sort(b.begin(), b.end());    int sz = int(b.size());    int L = -1, R = -1;    for (int i = 0; i < sz - 2; i++) {      if (b[i] + b[i + 1] > b[i + 2]) {        if (L == -1) L = i;        R = i;      }    }    if (R - L >= 3) {      cout << \"YES\" << '\\n';      continue;    }    bool found = false;    int mn = int(2e9);    for (int i = sz - 4; i >= 2; i--) {      mn = min(mn, b[i + 3] - b[i + 2]);      int me = b[i + 1] - b[i];      if ((b[i - 1] > me && b[i - 2] > mn) || (b[i - 1] > mn && b[i - 2] > me)) {        found = true;        break;      }    }    if (!found) {      for (int i = sz - 4; i >= 2; i--) {        int me = b[i + 2] - b[i];        mn = b[i + 3] - b[i + 1];        if ((b[i - 1] > me && b[i - 2] > mn) || (b[i - 1] > mn && b[i - 2] > me)) {          found = true;          break;        }        me = b[i + 3] - b[i];        mn = b[i + 2] - b[i + 1];        if ((b[i - 1] > me && b[i - 2] > mn) || (b[i - 1] > mn && b[i - 2] > me)) {          found = true;          break;        }      }    }    cout << (found ? \"YES\" : \"NO\") << '\\n';  }  return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "implementation",
        "math",
        "sortings"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Triangle Formation.json"
}