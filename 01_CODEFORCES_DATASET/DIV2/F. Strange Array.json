{
    "link": "https://codeforces.com//contest/1539/problem/F",
    "problemId": "1021675",
    "problem_idx": "F",
    "shortId": "1539F",
    "contest_number": "1539",
    "problem_submissions": {
        "F": [
            120107348,
            120107649,
            120097977,
            120099320,
            120098312,
            120109635,
            120105864,
            120629204,
            120113433,
            120106419,
            120104986,
            120113014,
            120101930,
            120110658,
            120109502,
            120113744,
            120116844,
            120114654,
            120115147
        ],
        "E": [
            120093781,
            120079364,
            120114726,
            120122564,
            120207189,
            120197883,
            120200475,
            120100072,
            120098623,
            120171381
        ],
        "B": [
            120070630,
            120060349,
            120061059,
            120060386,
            120060622,
            120062253,
            120060692,
            120629156,
            120061053,
            120062981,
            120062418,
            120061602,
            120061888,
            120061204,
            120064416,
            120067261,
            120060854,
            120063414,
            120061859,
            120065691,
            120065164
        ],
        "A": [
            120069368,
            120076735,
            120060240,
            120061153,
            120060245,
            120060841,
            120071571,
            120629142,
            120063706,
            120061645,
            120060943,
            120060282,
            120060860,
            120060194,
            120061081,
            120066922,
            120060268,
            120061240,
            120060385,
            120063176,
            120063285
        ],
        "D": [
            120067082,
            120090685,
            120072966,
            120078507,
            120084869,
            120076433,
            120086821,
            120629190,
            120078363,
            120083343,
            120083998,
            120082921,
            120077950,
            120072171,
            120081856,
            120078775,
            120086440,
            120082002,
            120072832,
            120082004,
            120079880
        ],
        "C": [
            120060552,
            120063745,
            120065169,
            120065204,
            120062357,
            120065301,
            120066339,
            120629175,
            120060313,
            120068918,
            120065740,
            120065066,
            120069921,
            120064011,
            120071005,
            120066689,
            120063119,
            120073312,
            120065303,
            120071920,
            120069029
        ]
    },
    "name": "F. Strange Array",
    "statement": "Vasya has an array of n integers a_1, a_2,\r\nldots, a_n. Vasya thinks that all numbers in his array are strange for\r\nsome reason. To calculate how strange the i-th number is, Vasya created\r\nthe following algorithm.He chooses a subsegment a_l, a_{l+1},\r\nldots, a_r, such that 1\r\nle l\r\nle i\r\nle r\r\nle n, sort its elements in increasing order in his head (he can arrange\r\nequal elements arbitrary). After that he finds the center of the\r\nsegment. The center of a segment is the element at position (l + r) / 2,\r\nif the length of the segment is odd, and at position (l + r + 1) / 2\r\notherwise. Now Vasya finds the element that was at position i before the\r\nsorting, and calculates the distance between its current position and\r\nthe center of the subsegment (the distance between the elements with\r\nindices j and k is |j - k|).The strangeness of the number at position i\r\nis the maximum distance among all suitable choices of l and r. Vasya\r\nwants to calculate the strangeness of each number in his array. Help him\r\nto do it.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define mp make_pair\n#define pb push_back\n#define x first\n#define y second\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntemplate <typename T> void chkmax(T &x,T y){x<y?x=y:T();}\ntemplate <typename T> void chkmin(T &x,T y){y<x?x=y:T();}\ntemplate <typename T> void readint(T &x)\n{\n\tx=0;int f=1;char c;\n\tfor(c=getchar();!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=x*10+(c-'0');\n\tx*=f;\n}\n/*const int MOD=;\ninline int dmy(int x){return x>=MOD?x-MOD:x;}\ninline void inc(int &x,int y){x=dmy(x+y);}\nint qmi(int x,int y)\n{\n\tint ans=1;\n\tfor(;y;y>>=1,x=1ll*x*x%MOD)\n\t\tif(y&1)ans=1ll*ans*x%MOD;\n\treturn ans;\n}*/\nconst int MAXN=200005;\n\nint n,a[MAXN],p[MAXN],res[MAXN];\nvector<int> bb[MAXN];\nstruct segt\n{\n\tint sum[MAXN<<2],pre[MAXN<<2],suf[MAXN<<2];\n\tvoid update(int id)\n\t{\n\t\tint ls=id<<1,rs=id<<1|1;\n\t\tsum[id]=sum[ls]+sum[rs];\n\t\tpre[id]=max(pre[ls],sum[ls]+pre[rs]);\n\t\tsuf[id]=max(suf[rs],sum[rs]+suf[ls]);\n\t}\n\tvoid modify(int id,int l,int r,int x,int c)\n\t{\n\t\tif(l==r){sum[id]=c;pre[id]=suf[id]=max(c,0);return;}\n\t\tint mid=(l+r)>>1;\n\t\tx<=mid?modify(id<<1,l,mid,x,c):modify(id<<1|1,mid+1,r,x,c);\n\t\tupdate(id);\n\t}\n\tpii qpre(int id,int l,int r,int ql,int qr)\n\t{\n\t\tif(l==ql && r==qr)return mp(sum[id],pre[id]);\n\t\tint mid=(l+r)>>1;\n\t\tif(qr<=mid)return qpre(id<<1,l,mid,ql,qr);\n\t\tif(ql>mid)return qpre(id<<1|1,mid+1,r,ql,qr);\n\t\tpii pl=qpre(id<<1,l,mid,ql,mid),pr=qpre(id<<1|1,mid+1,r,mid+1,qr);\n\t\treturn mp(pl.x+pr.x,max(pl.y,pl.x+pr.y));\n\t}\n\tpii qsuf(int id,int l,int r,int ql,int qr)\n\t{\n\t\tif(l==ql && r==qr)return mp(sum[id],suf[id]);\n\t\tint mid=(l+r)>>1;\n\t\tif(qr<=mid)return qsuf(id<<1,l,mid,ql,qr);\n\t\tif(ql>mid)return qsuf(id<<1|1,mid+1,r,ql,qr);\n\t\tpii pl=qsuf(id<<1,l,mid,ql,mid),pr=qsuf(id<<1|1,mid+1,r,mid+1,qr);\n\t\treturn mp(pl.x+pr.x,max(pr.y,pr.x+pl.y));\n\t}\n};\nsegt s1,s2;\n\nint main()\n{\n\t#ifdef LOCAL\n\tfreopen(\"code.in\",\"r\",stdin);\n//\tfreopen(\"code.out\",\"w\",stdout);\n\t#endif\n\treadint(n);\n\tfor(int i=1;i<=n;++i)readint(a[i]),p[i]=i,bb[a[i]].pb(i);\n\tsort(p+1,p+n+1,[&](int x,int y){return a[x]<a[y];});\n\tfor(int i=1;i<=n;++i)s1.modify(1,1,n,i,1);\n\tfor(int i=1;i<=n;++i)s2.modify(1,1,n,i,-1);\n\tfor(int ii=1,c1=1,c2=1;ii<=n;++ii)\n\t{\n\t\tint i=p[ii];\n\t\tfor(;c1<a[i];++c1)\n\t\t\tfor(auto j:bb[c1])\n\t\t\t\ts1.modify(1,1,n,j,-1);\n\t\tfor(;c2<=a[i];++c2)\n\t\t\tfor(auto j:bb[c2])\n\t\t\t\ts2.modify(1,1,n,j,1);\n\t\tint r1=(i>1?s1.qsuf(1,1,n,1,i-1).y:0)+(i<n?s1.qpre(1,1,n,i+1,n).y:0)+1,\n\t\t\tr2=(i>1?s2.qsuf(1,1,n,1,i-1).y:0)+(i<n?s2.qpre(1,1,n,i+1,n).y:0);\n\t\tres[i]=max(r1/2,r2/2);\n\t}\n\tfor(int i=1;i<=n;++i)printf(\"%d \",res[i]);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "sortings"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Strange Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/91906",
    "editorial": "Note that the distance from the given element to the median element (the\r\ncenter of a sorted segment) can be defined in terms of numbers of\r\nelements that are less, equal or bigger than the given element. Let be\r\nthe number of elements that are less, equal (excluding the given) and\r\nbigger than the given element.Then the distance may be calculated in the\r\nfollowing way: If is bigger than the median element: otherwise To solve\r\nthe problem you firstly need to assume that the given element is greater\r\nthan the median element, then consider the other case and take the\r\nmaximum of two answers. Hereinafter only the second case is considered\r\n(in which the element is not greater than the median one), the first\r\ncase can be done analogically.Since we need to maximize , let\u00e2\u0080\u0099s do it\r\nseparately for the elements to the left and to the right of ours.Let\u00e2\u0080\u0099s\r\nsort the indices so that the corresponding elements go in increasing\r\norder.Let array (its size is ) and . We will need operations \"+= on the\r\nsegment\" and \"min/max on the segment\", so let\u00e2\u0080\u0099s build a segment tree for\r\n. We will iterate through the indices in the received order and when\r\nconsidering the index we\u00e2\u0080\u0099ll change and so that they correspond to the\r\nfollowing conditions: For each if then , else Array is a prefix sum\r\narray for (changes to are made via a segment tree) In order to find\r\namong elements to the left of we need to find .In order to find among\r\nelements to the right of i will find .We will find these values using\r\nthe segment tree for and consider the next index.Note that for all the\r\nchanges we will need only actions, because in array each element is\r\nfirstly equal to 1, and then once becomes -1 and never changes again.The\r\ndescribed solution\u00e2\u0080\u0099s time complexity is\r\n"
}