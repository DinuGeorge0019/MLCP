{
    "link": "https://codeforces.com//contest/1159/problem/F",
    "problemId": "343497",
    "problem_idx": "F",
    "shortId": "1159F",
    "contest_number": "1159",
    "problem_submissions": {
        "F": [
            54044898,
            54053832,
            54040772,
            54080509,
            54040513,
            54052332,
            54089294
        ],
        "E": [
            54043384,
            54040516,
            54045368,
            54044519,
            54046071,
            54039628,
            54039102,
            54040677,
            54042415,
            54058636,
            54048968,
            54034868,
            54042017,
            54050776
        ],
        "D": [
            54042721,
            54041943,
            54035580,
            54042572,
            54080606,
            54038146,
            54052354,
            54091059,
            54040030,
            54037911,
            54039545,
            54040731,
            54042578
        ],
        "B": [
            54036094,
            54030149,
            54029931,
            54034799,
            54032077,
            54030372,
            54032226,
            54030581,
            54037312,
            54032827,
            54030507,
            54030402,
            54031286,
            54036701,
            54030641,
            54031474,
            54030960,
            54031607
        ],
        "C": [
            54036012,
            54033415,
            54031953,
            54037681,
            54035770,
            54032952,
            54035496,
            54033625,
            54035290,
            54036048,
            54033635,
            54032111,
            54035844,
            54040001,
            54036873,
            54037164,
            54036330,
            54033726
        ],
        "A": [
            54032465,
            54028777,
            54028614,
            54031427,
            54028774,
            54028660,
            54029725,
            54028649,
            54036064,
            54028741,
            54029512,
            54028702,
            54028642,
            54035314,
            54028987,
            54028902,
            54028641,
            54029509
        ]
    },
    "name": "F. Winding polygonal line",
    "statement": "Vasya has n different points A_1, A_2,\r\nldots A_n on the plane. No three of them lie on the same line He wants\r\nto place them in some order A_{p_1}, A_{p_2},\r\nldots, A_{p_n}, where p_1, p_2,\r\nldots, p_n some permutation of integers from 1 to n.After doing so, he\r\nwill draw oriented polygonal line on these points, drawing oriented\r\nsegments from each point to the next in the chosen order. So, for all 1\r\nleq i\r\nleq n-1 he will draw oriented segment from point A_{p_i} to point\r\nA_{p_{i+1}}. He wants to make this polygonal line satisfying 2\r\nconditions: it will be non-self-intersecting, so any 2 segments which\r\nare not neighbors don’t have common points. it will be . Vasya has a\r\nstring s, consisting of (n-2) symbols \"\" or \"\". Let’s call an oriented\r\npolygonal line , if its i-th turn left, if s_i = \"\" and right, if s_i =\r\n\"\". More formally: i-th turn will be in point A_{p_{i+1}}, where\r\noriented segment from point A_{p_i} to point A_{p_{i+1}} changes to\r\noriented segment from point A_{p_{i+1}} to point A_{p_{i+2}}. Let’s\r\ndefine vectors\r\noverrightarrow{v_1} =\r\noverrightarrow{A_{p_i} A_{p_{i+1}}} and\r\noverrightarrow{v_2} =\r\noverrightarrow{A_{p_{i+1}} A_{p_{i+2}}}. Then if in order to rotate the\r\nvector\r\noverrightarrow{v_1} by the smallest possible angle, so that its\r\ndirection coincides with the direction of the vector\r\noverrightarrow{v_2} we need to make a turn counterclockwise, then we say\r\nthat i-th turn is to the left, and otherwise to the right. For better\r\nunderstanding look at this pictures with some examples of turns: You are\r\ngiven coordinates of the points A_1, A_2,\r\nldots A_n on the plane and string s. Find a permutation p_1, p_2,\r\nldots, p_n of the integers from 1 to n, such that the polygonal line,\r\ndrawn by Vasya satisfy two necessary conditions.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 2200;\n\nint x[N], y[N], vis[N];\nchar a[N];\n\nlong long vec(int i, int j, int k) {\n\tlong long x1 = x[j] - x[i], x2 = x[k] - x[i];\n\tlong long y1 = y[j] - y[i], y2 = y[k] - y[i];\n\treturn x1 * y2 - x2 * y1;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\", \"r\", stdin);\n\tfreopen(\"out.txt\", \"w\", stdout);\n#endif\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0);\n\tint n; cin >> n;\n\tfor (int i = 1; i <= n; i++) cin >> x[i] >> y[i];\n\tcin >> a;\n\tint now = 1;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (x[i] < x[now]) now = i;\n\t\telse if (x[i] == x[now] && y[i] < y[now]) now = i;\n\t}\n\tvis[now] = 1;\n\tcout << now << endl;\n\tfor (int i = 0; i < n-2; i++) {\n\t\tif (a[i] == 'L') {\n\t\t\tint cur = -1;\n\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\tif (vis[j]) continue;\n\t\t\t\tif (cur == -1) {\n\t\t\t\t\tcur = j;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (vec(now, j, cur) > 0) {\n\t\t\t\t\tcur = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvis[cur] = 1;\n\t\t\tnow = cur;\n\t\t\tcout << now << endl;\n\t\t} else {\n\t\t\tint cur = -1;\n\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\tif (vis[j]) continue;\n\t\t\t\tif (cur == -1) {\n\t\t\t\t\tcur = j;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (vec(now, j, cur) < 0) {\n\t\t\t\t\tcur = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvis[cur] = 1;\n\t\t\tnow = cur;\n\t\t\tcout << now << endl;\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) if (!vis[i]) cout << i << endl;\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "geometry",
        "math"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Winding polygonal line.json",
    "editorial_link": "https://codeforces.com/blog/entry/66993?locale=en",
    "editorial": "Letâs describe the algorithm, which is always finding the answer:Letâs\r\nfind any point A_i, lying at the convex hull of points A_1, A_2,\r\nldots, A_n. We donât need to construct the convex hull for this, we can\r\nsimply take the point with the minimal y. This point will be the first\r\nin the permutation. Letâs construct the polygonal line one by one. Let\r\nthe last added point to the polygonal line be A_{p_i}. The point A_{p_i}\r\nshould always lie at the convex hull of remaining points and A_{p_i} (at\r\nthe beginning it is true). If s_i = \"\" the next point be the most right\r\npoint (sorted by angle) and if s_i = \"\"the next point be the most left\r\npoint (sorted by angle) from the remaining. This is the picture for\r\nthis: It is easy to see, that the new point lies at the convex hull. The\r\nnext rotation at the point A_{p_{i+1}} will be to the right side,\r\nbecause if s_i = \"\" all other points lies from the left of the vector\r\noverrightarrow{A_{p_i} A_{p_{i+1}}} and if s_i = \"\" all other points\r\nlies from the right of the vector\r\noverrightarrow{A_{p_i} A_{p_{i+1}}}.To take the most left or right\r\npoint, sorted by the angle from the remaining we will simply take\r\nminimum or maximum using the linear search. The point X lies to the\r\nright of the point Y from the point A_{p_i}, if\r\noverrightarrow{A_{p_i} X}\r\ntimes\r\noverrightarrow{A_{p_i} Y} > 0. The operation\r\ntimes is vectors multiply.Complexity: O(n^2).\r\n",
    "hint": []
}