{
    "link": "https://codeforces.com//contest/514/problem/C",
    "problemId": "22325",
    "problem_idx": "C",
    "shortId": "514C",
    "contest_number": "514",
    "problem_submissions": {
        "D": [
            9843225,
            9846055,
            9837556,
            9859465,
            9840591,
            9843851,
            9839460,
            9844414,
            9842178,
            9845163,
            9846841,
            9842086,
            9846251,
            9848651,
            9842924,
            9846782,
            9849156,
            9841878,
            9846890,
            9847267
        ],
        "C": [
            9841163,
            9837943,
            9841032,
            9837323,
            9841110,
            9846267,
            9840562,
            9847764,
            9841056,
            9842088,
            9846232,
            10793637,
            9841248,
            9846908,
            9840170,
            9843407,
            9848493,
            9849033,
            9841377
        ],
        "B": [
            9835974,
            9834205,
            9834220,
            9843917,
            9833123,
            9834665,
            9840756,
            9834379,
            9834140,
            9837595,
            9836572,
            9835808,
            9834718,
            9833573,
            9839815,
            9834202,
            9838863,
            9839593,
            9833631,
            9835941
        ],
        "E": [
            9834062,
            9844124,
            10054737,
            19616877,
            9857316,
            9848834,
            9874776,
            9849125,
            9848927,
            9849783,
            9853978
        ],
        "A": [
            9830385,
            9849694,
            9830594,
            9830658,
            9831890,
            10621817,
            9830350,
            9831307,
            9831472,
            9830971,
            9833065,
            9834571,
            9832664,
            9831254,
            9834249,
            9833669,
            9831211,
            9830665,
            9833485
        ]
    },
    "name": "C. Watto and Mechanism",
    "statement": "Watto, the owner of a spare parts store, has recently got an order for\r\nthe mechanism that can process strings in a certain way. Initially the\r\nmemory of the mechanism is filled with strings. Then the mechanism\r\nshould be able to process queries of the following type: \"Given string ,\r\ndetermine if the memory of the mechanism contains string that consists\r\nof the same number of characters as and differs from in exactly one\r\nposition\".Watto has already compiled the mechanism, all thatâ€™s left is\r\nto write a program for it and check it on the data consisting of initial\r\nlines and queries. He decided to entrust this job to you.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define SZ(x) ((int)(x).size())\n#define fi first\n#define se second\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000000000000003;\nll powmod(ll a,ll b) {ll res=1;a%=mod;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\nconst int N=601000;\nint n,m;\nll pw[N];\nchar s[N];\nunordered_set<ll> ff;\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tpw[0]=1;\n\trep(i,1,600001) pw[i]=pw[i-1]*3%mod;\n\trep(i,0,n) {\n\t\tscanf(\"%s\",s);\n\t\tint l=strlen(s);\n\t\tll hs=0;\n\t\tfor (int j=0;j<l;j++) hs=(hs*3+s[j]-'a')%mod;\n\t\tff.insert(hs);\n\t}\n\trep(i,0,m) {\n\t\tscanf(\"%s\",s);\n\t\tint l=strlen(s);\n\t\tll hs=0;\n\t\tbool fg=0;\n\t\tfor (int j=0;j<l;j++) hs=(hs*3+s[j]-'a')%mod;\n\t\tfor (int j=0;j<l;j++) {\n\t\t\tll nhs=(hs-(s[l-1-j]-'a')*pw[j])%mod;\n\t\t\tif (nhs<0) nhs+=mod;\n\t\t\trep(k,0,3) if (s[l-1-j]-'a'!=k) {\n\t\t\t\tif (ff.count((nhs+k*pw[j])%mod)) fg=1;\n\t\t\t}\n\t\t\tif (fg) break;\n\t\t\t// s[l-1-j]\n\t\t}\n\t\tputs(fg?\"YES\":\"NO\");\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "hashing",
        "string suffix structures",
        "strings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Watto and Mechanism.json",
    "editorial_link": "https://codeforces.com//blog/entry/16398",
    "editorial": "While adding a string to the set, let's count its polynomial hash and add it to an array. Then let's sort this array. Now, to know the query answer, let's try to change every symbol in the string and check with binary search if its hash can be found in the array (recounting hashes with  complexity). If the hash is found in the array, the answer is \"YES\", otherwise \"NO\".\n",
    "hint": []
}