{"link": "https://codeforces.com//contest/1719/problem/E", "problemId": "1509975", "problem_idx": "E", "shortId": "1719E", "contest_number": "1719", "problem_submissions": {"B": [168566227, 168520938, 168532485, 168523483, 168546606, 168527651, 168529090, 168521682, 168524157, 168525651, 168544350, 168524093, 168532781, 168524676, 168524799, 168528931, 168523245, 168535265, 168542247, 168526151], "C": [168564590, 168527055, 168563913, 168534688, 168554638, 168544738, 168548686, 168548105, 168536891, 168541394, 168530142, 168539695, 168544769, 168539081, 168537531, 168544593, 168539888, 168546396, 168551142, 168534597], "D1": [168558558, 168542679, 168557284, 168554279, 168564803, 171062245, 168563518, 168568656, 168554712, 168565935, 168563890, 168565575, 168554859, 168570422, 168552272, 168561513, 168560338, 168564995, 168562859, 168577517], "D2": [168558497, 168553599, 168557602, 168553982, 168564623, 171062226, 168563176, 168568769, 168554473, 168565713, 168570996, 168565418, 168574779, 168570083, 168576109, 168574448, 168567511, 168565085, 168562615, 168586718], "E": [168554365, 168598287, 168578854, 168574119, 168542245, 168581099, 168583743, 168579840, 168595833, 168593319, 168587676, 168594973, 168588543, 168587843, 168593966, 168594751, 168583071, 168590461, 168594089], "F": [168534987, 168577836, 168600287, 168607443, 168579023, 168704091, 168637926, 168609385, 168607981, 168607715, 168585958], "A": [168519209, 168515375, 168527134, 168516968, 168548303, 168516013, 168516695, 168515925, 168516176, 168516243, 168534710, 168515665, 168518019, 168515902, 168516007, 168515846, 168515950, 168515461, 168516618, 168515960]}, "name": "E. Fibonacci Strings", "statement": "In all schools in Buryatia, in the 1 class, everyone is told the theory\r\nof Fibonacci strings.\"A is a subsegment of a string where all the\r\nletters are the same and are bounded on the left and right by the ends\r\nof the string or by letters other than the letters in the block. A\r\nstring is called a string if, when it is divided into blocks, their\r\nlengths in the order they appear in the string form the Fibonacci\r\nsequence (f_0 = f_1 = 1, f_i = f_{i-2} + f_{i-1}), starting from the\r\nzeroth member of this sequence. A string is called if it possible to\r\nreorder its letters to get a string.\"Burenka decided to enter the Buryat\r\nState University, but at the entrance exam she was given a difficult\r\ntask. She was given a string consisting of the letters of the Buryat\r\nalphabet (which contains exactly k letters), and was asked if the given\r\nstring is . The string can be very long, so instead of the string, she\r\nwas given the number of appearances of each letter (c_i for the i-th\r\nletter) in that string. Unfortunately, Burenka no longer remembers the\r\ntheory of Fibonacci strings, so without your help she will not pass the\r\nexam.\r\n", "solutions": ["#pragma GCC optimize(\"Ofast\",\"unroll-loops\",\"omit-frame-pointer\",\"inline\") //Optimization flags\n#pragma GCC option(\"arch=native\",\"tune=native\",\"no-zero-upper\") //Enable AVX\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2\")\n#include<bits/stdc++.h>\n//#include<ext/pb_ds/assoc_container.hpp>\nusing namespace std;\nnamespace fastio{\n    char in[100000];\n    int itr=0,llen=0;\n    char get(){\n        if(itr==llen)llen=fread(in,1,100000,stdin),itr=0;\n        if(llen==0)return EOF;\n        return in[itr++];\n    }\n    char out[100000];\n    int itr2=0;\n    void put(char c){\n        out[itr2++]=c;\n        if(itr2==100000){\n            fwrite(out,1,100000,stdout);\n            itr2=0;\n        }\n    }\n    int clear(){\n        fwrite(out,1,itr2,stdout);\n        itr2=0;\n        return 0;\n    }\n    int getint(){\n        int ret=0;char ch=get();\n        if(ch=='-')return -getint();\n        while (ch<'0'||ch>'9'){\n            ch=get();if(ch=='-')return -getint();\n        }\n        while ('0'<=ch&&ch<='9'){\n            ret=ret*10-48+ch;\n            ch=get();\n        }\n        return ret;\n    }\n    string getstr(){\n        string ret=\"\";\n        char ch=get();\n        while(isspace(ch))ch=get();\n        while(!isspace(ch))ret.push_back(ch),ch=get();\n        return ret;\n    }\n    void putstr(string s){\n        for(int i=0;i<s.size();i++)put(s[i]);\n    }\n    template<class T>void putint(T x){\n        if(x<0){\n            put('-');\n            putint(-x);\n            return;\n        }\n        if(x==0){\n            put('0');put(' ');\n            return;\n        }\n        char c[40];int pos=0;\n        while(x){\n            c[pos++]='0'+x%10;\n            x/=10;\n        }\n        for(int i=pos-1;i>=0;i--)put(c[i]);\n        put(' ');\n    }\n    template<class T>void putln(T x){\n        if(x<0){\n            put('-');\n            putln(-x);\n            return;\n        }\n        if(x==0){\n            put('0');put('\\n');\n            return;\n        }\n        char c[40];int pos=0;\n        while(x){\n            c[pos++]='0'+x%10;\n            x/=10;\n        }\n        for(int i=pos-1;i>=0;i--)put(c[i]);\n        put('\\n');\n    }\n\tstruct Flusher_ {\n\t\t~Flusher_(){clear();}\n\t}io_flusher_;\n}\nusing namespace fastio;\n//using namespace __gnu_pbds;\nconst int inf=0x3f3f3f3f;\nconst double eps=1e-6;\nconst int mod=1e9+7;\ntypedef long long ll;\n#ifndef LOCAL\n#define cerr if(0)cout\n#define eprintf(...) 0\n#else\n#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#endif\ninline string getstr(string &s,int l,int r){string ret=\"\";for(int i=l;i<=r;i++)ret.push_back(s[i]);return ret;}\nint modpow(int x,int y,int md=mod){int ret=1;do{if(y&1)ret=(ll)ret*x%md;x=(ll)x*x%md;}while(y>>=1);return ret;}\ninline int Rand(){return rand()*32768+rand();}\nint T,k,f[100005],ans[205];\nlong long fib[100005],S[100005];\nbool cmp(int x,int y){\n\treturn f[x]>f[y];\n}\nint main(){\n\tfib[1]=fib[2]=1;\n\tfor(int i=3;i<=50;i++)fib[i]=fib[i-1]+fib[i-2];\n\tS[1]=fib[1];\n\tfor(int i=2;i<=50;i++)S[i]=S[i-1]+fib[i];\n\tT=getint();\n\twhile(T--){\n\t\tmemset(ans,0,sizeof ans);\n\t\tk=getint();\n\t\tfor(int i=1;i<=k;i++)f[i]=getint();\n\t\tint pos=50,can=1;\n\t\tlong long s=0;\n\t\tfor(int i=1;i<=k;i++)s+=f[i];\n\t\twhile(pos>=1&&S[pos]>s)pos--;\n\t\tfor(int i=pos;i>=1;i--){\n\t\t\tvector<int>all;\n\t\t\tfor(int j=1;j<=k;j++)if(f[j]>=fib[i])all.push_back(j);\n\t\t\tsort(all.begin(),all.end(),cmp);\n\t\t\tif(all.size()>=2){\n\t\t\t\tans[i]=(ans[i+1]==all[0]?all[1]:all[0]);\n\t\t\t\tf[ans[i]]-=fib[i];\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(all.size()==0){\n\t\t\t\tcan=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tf[all[0]]-=fib[i];\n\t\t\tans[i]=all[0];\n//\t\t\tcerr<<i<<\" \"<<ans[i]<<endl;\n\t\t}\n\t\tfor(int j=2;j<=pos;j++)if(ans[j]==ans[j-1])can=0;\n\t\tfor(int j=1;j<=k;j++)if(f[j])can=0;\n\t\tif(can){\n\t\t\tputs(\"Yes\");\n\t\t}else puts(\"No\");\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["greedy", "implementation", "number theory"], "dificulty": "2000", "interactive": false}