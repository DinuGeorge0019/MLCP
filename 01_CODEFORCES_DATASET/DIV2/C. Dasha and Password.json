{
    "link": "https://codeforces.com//contest/761/problem/C",
    "problemId": "90960",
    "problem_idx": "C",
    "shortId": "761C",
    "contest_number": "761",
    "problem_submissions": {
        "E": [
            24312697,
            24311709,
            24310168,
            24311976,
            24311188,
            24315381,
            24312128,
            24315134,
            24315757,
            24315051,
            24311586,
            24318302,
            24316465,
            24310698,
            24314080,
            24317203,
            24314720,
            24307483,
            24315644,
            24308867
        ],
        "D": [
            24308080,
            24302806,
            24306764,
            24303840,
            24312711,
            24310952,
            24308712,
            24308632,
            24304486,
            24318361,
            24305083,
            24314765,
            24313344,
            24306662,
            24308564,
            24311519,
            24304640,
            24301778,
            24312201,
            24302140
        ],
        "C": [
            24304705,
            24303281,
            24303086,
            24315151,
            24314006,
            24300409,
            24305328,
            24308132,
            24307670,
            24308073,
            24301179,
            24311655,
            24307103,
            24301133,
            24303312,
            24299854,
            24299226,
            24307641,
            24303935
        ],
        "A": [
            24296943,
            24297317,
            24293268,
            24295355,
            24314899,
            24301549,
            24295024,
            24293258,
            24293478,
            24294436,
            24294254,
            24298618,
            24301924,
            24304008,
            24305575,
            24293046,
            24297813
        ],
        "B": [
            24295947,
            24297573,
            24299480,
            24314233,
            24314669,
            24296673,
            24301229,
            24303624,
            24311945,
            24304611,
            24297096,
            24300811,
            24301955,
            24297423,
            24296616,
            24298776,
            24296843,
            24310580,
            24301114,
            24295172
        ],
        "F": [
            24322841,
            24309197,
            24319670
        ]
    },
    "name": "C. Dasha and Password",
    "statement": "After overcoming the stairs Dasha came to classes. She needed to write a\r\npassword to begin her classes. The password is a string of length which\r\nsatisfies the following requirements: There is at least one digit in the\r\nstring, There is at least one lowercase (small) letter of the Latin\r\nalphabet in the string, There is at least one of three listed symbols in\r\nthe string: ”, ”, ”. Considering that these are programming classes it\r\nis not easy to write the password.For each character of the password we\r\nhave a fixed string of length , on each of these strings there is a\r\npointer on some character. The -th character displayed on the screen is\r\nthe pointed character in the -th string. Initially, all pointers are on\r\ncharacters with indexes in the corresponding strings (all positions are\r\nnumbered starting from one).During one operation Dasha can move a\r\npointer in one string one character to the left or to the right. Strings\r\nare cyclic, it means that when we move the pointer which is on the\r\ncharacter with index to the left, it moves to the character with the\r\nindex , and when we move it to the right from the position it moves to\r\nthe position .You need to determine the minimum number of operations\r\nnecessary to make the string displayed on the screen a valid password.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <time.h>\n#include <map>\n#include <set>\n#include <deque>\n#include <cstdio>\n#include <cstdlib>\n#include <unordered_map>\n#include <bitset>\n#include <algorithm>\n#include <string>\n#include <fstream>\n#include <assert.h>\n#include <list>\n#include <cstring>\nusing namespace std;\n\nnamespace fastinput\n{\n\t/** Interface */\n\n\tinline int readChar();\n\ttemplate <class T = int> inline T readInt();\n\ttemplate <class T> inline void writeInt(T x, char end = 0);\n\tinline void writeChar(int x);\n\tinline void writeWord(const char *s);\n\n\t/** Read */\n\n\tstatic const int buf_size = 16384;\n\n\tinline int getChar() {\n\t\tstatic char buf[buf_size];\n\t\tstatic int len = 0, pos = 0;\n\t\tif (pos == len)\n\t\t\tpos = 0, len = fread(buf, 1, buf_size, stdin);\n\t\tif (pos == len)\n\t\t\treturn -1;\n\t\treturn buf[pos++];\n\t}\n\n\tinline int readChar() {\n\t\tint c = getChar();\n\t\twhile (c <= 32)\n\t\t\tc = getChar();\n\t\treturn c;\n\t}\n\n\ttemplate <class T>\n\tinline T readInt() {\n\t\tint s = 1, c = readChar();\n\t\tT x = 0;\n\t\tif (c == '-')\n\t\t\ts = -1, c = getChar();\n\t\twhile ('0' <= c && c <= '9')\n\t\t\tx = x * 10 + c - '0', c = getChar();\n\t\treturn s == 1 ? x : -x;\n\t}\n\n\t/** Write */\n\n\tstatic int write_pos = 0;\n\tstatic char write_buf[buf_size];\n\n\tinline void writeChar(int x) {\n\t\tif (write_pos == buf_size)\n\t\t\tfwrite(write_buf, 1, buf_size, stdout), write_pos = 0;\n\t\twrite_buf[write_pos++] = x;\n\t}\n\n\ttemplate <class T>\n\tinline void writeInt(T x, char end) {\n\t\tif (x < 0)\n\t\t\twriteChar('-'), x = -x;\n\n\t\tchar s[24];\n\t\tint n = 0;\n\t\twhile (x || !n)\n\t\t\ts[n++] = (char)('0' + x % 10), x /= 10;\n\t\twhile (n--)\n\t\t\twriteChar(s[n]);\n\t\tif (end)\n\t\t\twriteChar(end);\n\t}\n\n\tinline void writeWord(const char *s) {\n\t\twhile (*s)\n\t\t\twriteChar(*s++);\n\t}\n\n\tstruct Flusher {\n\t\t~Flusher() {\n\t\t\tif (write_pos)\n\t\t\t\tfwrite(write_buf, 1, write_pos, stdout), write_pos = 0;\n\t\t}\n\t} flusher;\n}\n\nusing namespace fastinput;\n\nconst int N = 51;\nstring s[N];\nint dp[N][1 << 3]; //[had][num/char/special]\nint dist[N][1 << 3];\n\nint main()\n{\n\tint n, m;\n\tcin >> n >> m;\n\tfor (int i = 0; i < n; ++i)\n\t\tcin >> s[i];\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tdist[i][0] = 0;\n\t\tdist[i][1] = m + 1;\n\t\tdist[i][2] = m + 1;\n\t\tdist[i][4] = m + 1;\n\n\t\tdist[i][3] = n * m;\n\t\tdist[i][5] = n * m;\n\t\tdist[i][6] = n * m;\n\t\tdist[i][7] = n * m;\n\n\t\tfor (int j = 0; j < m; ++j)\n\t\t{\n\t\t\tint calc = min(j, m - j);\n\t\t\tif (s[i][j] >= 'a' && s[i][j] <= 'z')\n\t\t\t\tdist[i][1] = min(dist[i][1], calc);\n\t\t\telse if (s[i][j] >= '0' && s[i][j] <= '9')\n\t\t\t\tdist[i][2] = min(dist[i][2], calc);\n\t\t\telse if (s[i][j] == '#' || s[i][j] == '*' || s[i][j] == '&')\n\t\t\t\tdist[i][4] = min(dist[i][4], calc);\n\t\t}\n\t}\n\tfor (int i = 0; i <= n; ++i)\n\t\tfor (int j = 0; j < 8; ++j)\n\t\t\tdp[i][j] = 1 << 20;\n\tdp[0][0] = 0;\n\tfor (int i = 0; i < n; ++i)\n\t\tfor (int j = 0; j < 8; ++j)\n\t\t\tfor (int z = 0; z < 8; ++z)\n\t\t\t{\n\t\t\t\tint to = j | z;\n\t\t\t\tdp[i + 1][to] = min(dp[i + 1][to], dp[i][j] + dist[i][z]);\n\t\t\t}\n\tcout << dp[n][7] << endl;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Dasha and Password.json",
    "editorial_link": "https://codeforces.com//blog/entry/50179",
    "editorial": "Letâs iterate the string, where we want to get a digit to the password,\r\nthen the string, where weâll get a letter to the password and the\r\nstring, where weâll get one of the characters â&â, â*â, â. Obviously, in\r\nthe other strings we can pick any character, so we only need to compute\r\nminimal number of moves we have to do to get corresponding characters in\r\nfixed strings. We can do it just by iterating that strings.\r\n",
    "hint": []
}