{
    "link": "https://codeforces.com//contest/1582/problem/A",
    "problemId": "1156631",
    "problem_idx": "A",
    "shortId": "1582A",
    "contest_number": "1582",
    "problem_submissions": {
        "G": [
            133300654,
            132904411,
            132903819,
            132921500,
            132938189,
            132915561,
            132904925,
            132893999,
            132930384,
            132930246,
            132930119,
            132929885,
            132929830,
            132917984,
            132923122,
            132922486,
            132909943,
            132922580,
            132929375,
            132930555,
            133312799,
            132969396
        ],
        "F2": [
            132908314,
            132865018,
            132905309,
            132899324,
            132901682,
            132900235,
            132911727,
            132926934,
            132906558,
            132909549,
            132893391,
            132884523,
            132901241,
            132906554,
            132898256,
            133312622,
            132970055,
            132969976,
            132904321
        ],
        "F1": [
            132881252,
            132864382,
            132880627,
            132888291,
            132872964,
            132880051,
            132887180,
            132892561,
            132900410,
            132897751,
            132862757,
            132872739,
            132870584,
            132888250,
            132889092,
            132882038,
            132891013,
            132872187,
            132887941,
            133312616,
            132891504
        ],
        "E": [
            132874913,
            132878099,
            132874176,
            132880923,
            132882227,
            132876672,
            132871740,
            132883982,
            132905776,
            132893914,
            132871055,
            132859358,
            132881562,
            132870144,
            132885086,
            132894857,
            132869674,
            132887914,
            132877059,
            133312375,
            132888626
        ],
        "D": [
            132866716,
            132891541,
            132886280,
            132871648,
            132863103,
            132871610,
            132863993,
            132875189,
            132911684,
            132876113,
            132889182,
            132879862,
            132890109,
            132872530,
            132875475,
            132891337,
            132884986,
            132886500,
            132884112,
            133312126,
            132970973,
            132882901
        ],
        "C": [
            132859265,
            132871828,
            132860284,
            132861165,
            132856817,
            132935747,
            132866931,
            132863031,
            132863018,
            132893464,
            132893294,
            132866549,
            132861428,
            132858872,
            132861957,
            132863927,
            132861005,
            132863860,
            132868896,
            133312107,
            132858386
        ],
        "B": [
            132856790,
            132867123,
            132856747,
            132855505,
            132854485,
            132859085,
            132858770,
            132858595,
            132856173,
            132857637,
            132856186,
            132859468,
            132855951,
            132855099,
            132854810,
            132855351,
            132856357,
            132855765,
            132859435,
            133312040,
            132970544,
            132854847
        ],
        "A": [
            132855030,
            132855528,
            132854523,
            132892082,
            132854129,
            132904251,
            132854758,
            132854419,
            132906994,
            132854763,
            132856077,
            132854737,
            132984138,
            132854196,
            132859118,
            132854306,
            132855186,
            132865041,
            132857131,
            133311808,
            132970350,
            132854128
        ]
    },
    "name": "A. Luntik and Concerts",
    "statement": "Luntik has decided to try singing. He has a one-minute songs, b\r\ntwo-minute songs and c three-minute songs. He wants to distribute all\r\nsongs into two concerts such that every song should be included to\r\nexactly one concert.He wants to make the absolute difference of\r\ndurations of the concerts as small as possible. The duration of the\r\nconcert is the sum of durations of all songs in that concert.Please help\r\nLuntik and find the minimal possible difference in minutes between the\r\nconcerts durations.\r\n",
    "solutions": [
        "#ifdef _MSC_VER\n#define _CRT_SECURE_NO_WARNINGS\n#endif\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nusing ll = long long;\n\nll solve(ll c1, ll c2, ll c3) {\n\tll r = (c3 % 2) * 3;\n\twhile (r >= 2 && c2 > 0) {\n\t\tr = abs(r - 2);\n\t\t--c2;\n\t}\n\tif (c2 % 2 == 1) {\n\t\tr = abs(r - 2);\n\t}\n\twhile (r >= 1 && c1 > 0) {\n\t\tr = abs(r - 1);\n\t\t--c1;\n\t}\n\tif (c1 % 2 == 1) {\n\t\tr = abs(r - 1);\n\t}\n\treturn r;\n}\n\nint main()\n{\n#ifdef _MSC_VER\n\tfreopen(\"a.in\", \"r\", stdin);\n#endif\n\tstd::ios::sync_with_stdio(false);\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tll c1, c2, c3;\n\t\tcin >> c1 >> c2 >> c3;\n\t\tcout << solve(c1, c2, c3) << endl;\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Luntik and Concerts.json",
    "editorial_link": "https://codeforces.com//blog/entry/96267",
    "editorial": "Let be the sum of durations of all songs, that is .Letâs notice that\r\nsince , it is possible to make a concert of any duration from to\r\n(indeed, if we just execute a greedy algorithm and take three-minute\r\nsongs while possible, then take two-minute songs, and then one-minute\r\nones, we can get any duration we need). Now, the answer is the remainder\r\nof modulo , because if is even, then itâs possible to from the first\r\nconcert with duration , and the second one will be left with duration ,\r\nand the difference between the durations will be . If is odd, then the\r\nsmallest possible difference is equal to , letâs form the first concert\r\nwith duration , and the second one is left with duration\r\n",
    "hint": []
}