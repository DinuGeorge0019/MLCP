{
    "link": "https://codeforces.com//contest/1695/problem/A",
    "problemId": "1432671",
    "problem_idx": "A",
    "shortId": "1695A",
    "contest_number": "1695",
    "problem_submissions": {
        "E": [
            161099994,
            161385353
        ],
        "D1": [
            161071005,
            161074543,
            161081125,
            161072748,
            161085205,
            161076792,
            161086180,
            161088285,
            161078663,
            161087570,
            161090981,
            161081382,
            161096600,
            161083265,
            161094007,
            161083359,
            161087191,
            161099464,
            161103072
        ],
        "D2": [
            161070538,
            161074164,
            161080949,
            161072924,
            161085070,
            161077074,
            161086067,
            161090573,
            161078799,
            161087356,
            161091244,
            161098503,
            161096503,
            161083640,
            161093884,
            161083859,
            161106845,
            161102938,
            161103184
        ],
        "C": [
            161049795,
            161059348,
            161063490,
            161060415,
            161055337,
            161053834,
            161061413,
            161054883,
            161053215,
            161065273,
            161068360,
            161076346,
            161062519,
            161063339,
            161079032,
            161066869,
            161096184,
            161063492,
            161059254,
            161053168
        ],
        "B": [
            161047262,
            161053402,
            161051570,
            161054862,
            161050104,
            161049992,
            161050979,
            161048731,
            161049540,
            161057199,
            161054074,
            161054984,
            161050691,
            161052531,
            161068152,
            161056401,
            161053679,
            161049800,
            161064268,
            161048819
        ],
        "A": [
            161046762,
            161046971,
            161046828,
            161047950,
            161046933,
            161046876,
            161047188,
            161046813,
            161046805,
            161048336,
            161047711,
            161049772,
            161046830,
            161047996,
            161062872,
            161046949,
            161047484,
            161047163,
            161047431,
            161046827
        ]
    },
    "name": "A. Subrectangle Guess",
    "statement": "Michael and Joe are playing a game. The game is played on a grid with n\r\nrows and m columns, . We denote the square on the i-th (1\r\nle i\r\nle n) row and j-th (1\r\nle j\r\nle m) column by (i, j) and the number there by a_{ij}.Michael starts by\r\nsaying two numbers h (1\r\nle h\r\nle n) and w (1\r\nle w\r\nle m). Then Joe picks any h\r\ntimes w subrectangle of the board (without Michael seeing).Formally, an\r\nh\r\ntimes w subrectangle starts at some square (a,b) where 1\r\nle a\r\nle n-h+1 and 1\r\nle b\r\nle m-w+1. It contains all squares (i,j) for a\r\nle i\r\nle a+h-1 and b\r\nle j\r\nle b+w-1. Finally, Michael has to guess the maximum number in the\r\nsubrectangle. He wins if he gets it right.Because Michael doesn\u2019t like\r\nbig numbers, he wants the area of the chosen subrectangle (that is, h\r\ncdot w), to be as small as possible, while still ensuring that he wins,\r\nnot depending on Joe\u2019s choice. Help Michael out by finding this minimum\r\npossible area. It can be shown that Michael can always choose h, w for\r\nwhich he can ensure that he wins.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false); cin.tie(0);\n    int T, n, m;\n    cin >> T;\n    while (T--) {\n        cin >> n >> m;\n        int mx = -2e9, x, y;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                int v; cin >> v;\n                if (v > mx) {\n                    mx = v;\n                    x = i;\n                    y = j;\n                }\n            }\n        }\n        cout << max(x, n - x + 1) * max(y, m - y + 1) << endl;\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Subrectangle Guess.json",
    "editorial_link": "https://codeforces.com//blog/entry/103996",
    "editorial": "Note that for any rectangle size, we can always choose an by rectangle\r\nthat contains the maximum element in the grid (which is unique). So in\r\norder for Michael to ensure that he can win, he needs to make and big\r\nenough such that every by rectangle contains the maximum element in the\r\ngrid. Let be the position of the maximum (1 indexed). The furthest point\r\nin the grid from it has to be one of the four corners, and hxw has to be\r\nbig enough to include that furthest point and . So just try all four\r\ncorners and take the biggest rectangle that gives you. This reduces to\r\n(because the dimensions are independent).So the answer is .Complexity:\r\n"
}