{
    "link": "https://codeforces.com//contest/471/problem/C",
    "problemId": "14357",
    "problem_idx": "C",
    "shortId": "471C",
    "contest_number": "471",
    "problem_submissions": {
        "D": [
            7965405,
            7963038,
            7965335,
            7968421,
            7966244,
            7968397,
            7967934,
            7967754,
            7962449,
            7971169,
            7966737,
            7967640,
            7966907,
            7965389,
            7968194,
            7968684,
            7968144,
            7968063,
            7969059,
            7969743
        ],
        "C": [
            7963799,
            7964161,
            7963025,
            7965860,
            7964576,
            7965647,
            7964444,
            7963849,
            7964165,
            7964646,
            7964390,
            7964067,
            7964677,
            7967841,
            7964930,
            7962467,
            7965383,
            7966049,
            7964548,
            7964611
        ],
        "B": [
            7962693,
            7961062,
            7959880,
            7962852,
            7961634,
            7961073,
            7961603,
            7961941,
            7966053,
            7965991,
            7961463,
            7961486,
            7962239,
            7963641,
            7962519,
            7960810,
            7962445,
            7961115,
            7962351,
            7961842
        ],
        "A": [
            7960020,
            7958602,
            7958473,
            7958790,
            7958822,
            7958588,
            7958849,
            7958927,
            7967090,
            7966996,
            7958571,
            7958632,
            7958550,
            7959873,
            7959046,
            7969496,
            7958766,
            7958587,
            7958630,
            7959368
        ]
    },
    "name": "C. MUH and House of Cards",
    "statement": "Polar bears Menshykov and Uslada from the zoo of St. Petersburg and\r\nelephant Horace from the zoo of Kiev decided to build a house of cards.\r\nFor that they’ve already found a hefty deck of playing cards. Let’s\r\ndescribe the house they want to make: The house consists of some\r\nnon-zero number of floors. Each floor consists of a non-zero number of\r\nrooms and the ceiling. A room is two cards that are leaned towards each\r\nother. The rooms are made in a row, each two adjoining rooms share a\r\nceiling made by another card. Each floor besides for the lowest one\r\nshould contain less rooms than the floor below. Please note that the\r\nhouse may end by the floor with more than one room, and in this case\r\nthey also must be covered by the ceiling. Also, the number of rooms on\r\nthe adjoining floors doesn’t have to differ by one, the difference may\r\nbe more. While bears are practicing to put cards, Horace tries to figure\r\nout how many floors their house should consist of. The height of the\r\nhouse is the number of floors in it. It is possible that you can make a\r\nlot of different houses of different heights out of cards. It seems that\r\nthe elephant cannot solve this problem and he asks you to count the\r\nnumber of the distinct heights of the houses that they can make using\r\ncards.\r\n",
    "solutions": [
        "#include <vector>\n#include <list>\n#include <queue>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstring>\n#include <tr1/unordered_set>\n#include <tr1/unordered_map>\n\nusing namespace std;\nusing namespace tr1;\n\nconst int maxn=2e6+5;\n\nlong long n,sum;\n\nint main(){\n    cin>>n;\n    sum=0;\n    int ans=0;\n    for(int i=1;i<maxn;i++){\n        sum+=3LL*i-1;\n        if(sum>n)break;\n        if((n-sum)%3==0)ans++;\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "greedy",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. MUH and House of Cards.json",
    "editorial_link": "https://codeforces.com//blog/entry/13986",
    "editorial": "Card house. This problem required some maths, but just a little bit. So\r\nin order to start here letâs first observe that the number of cards you\r\nneed to use for a complete floor with rooms equals to: Then if you have\r\nfloors with rooms on the -th floor then the total number of cards would\r\nbe: where is the total number of the rooms in the card house. This\r\nalready gives you an important property if you divide on 3 then the\r\nremainder of this division should be 0. This means that if you have\r\nfound some minimum value of floors somehow and you found maximum\r\npossible number of floors in the house, then within that interval only\r\nevery third number will be a part of the solution, the rest of the\r\nnumbers will give a non-zero remainder in the equation above. Now letâs\r\nthink what is the highest house we can build using cards. In order to\r\nbuild the highest possible house obviously you need to put as few cards\r\non each floor as you can. But we have a restriction that every floor\r\nshould have less rooms than the floor below. This gives us the following\r\nstrategy to maximize the height of the house: we put 1 room on the top\r\nfloor, then 2 rooms on the floor below, then 3 rooms on the next floor,\r\netc. In total then the number of cards we will need equals to: This is\r\nminimum number of cards we need in order to build a house with floors.\r\nThis gives us a way to calculate the maximum height of the house we can\r\nbuild using cards, we just need to find maximum which gives .\r\nMathematicians would probably solve the quadratic inequation,\r\nprogrammers have two options: Check all possible until you hit that\r\nupper bound. Since grows quadratically with then you will need to check\r\nonly up to numbers. This gives time complexity and fits nicely in the\r\ngiven time limit. The second approach would be a binary search. Using\r\nbinary search to find maximum number of the floors would give you time\r\ncomplexity. This was the intended originally solution but it was decided\r\nto lower the constraints in order to allow sqrt solutions as well. Now\r\nthat you know the maximum number of the floors in the house you might\r\nneed to correct it a bit because of that remainder thing we discussed\r\nabove, this might make your maximum height one or two floors lower.\r\nLooking again at the remainder discussion on top we can see that\r\nstarting from here only every third number will be valid for an answer.\r\nNow you can either count them brutally (back to solution) or you can\r\nsimply calculate them using this formulae: (integer division) That seems\r\nto be it, just donât forget to use longs all the time in this problem.\r\nAuthorâs solution: 7977863 Authors solution: 7977888\r\n",
    "hint": []
}