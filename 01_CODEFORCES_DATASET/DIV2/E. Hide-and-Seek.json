{"link": "https://codeforces.com//contest/32/problem/E", "problemId": "153", "problem_idx": "E", "shortId": "32E", "contest_number": "32", "problem_submissions": {"D": [138675, 138556, 138604, 138257, 138224, 138380, 138504, 138243, 138210, 138358, 138498, 138310, 138622], "C": [138369, 138391, 138007, 138117, 138443, 138155, 138237, 138506, 138488, 138330, 138272, 138169, 138601, 138447], "B": [138178, 137922, 137712, 137803, 137765, 137945, 137759, 137778, 137848, 138032, 138051, 137886, 137925], "A": [137893, 137679, 137547, 137553, 137536, 137786, 137586, 141335, 137528, 137522, 137671, 137989, 137716, 137643], "E": [139512, 139507]}, "name": "E. Hide-and-Seek", "statement": "Victor and Peter are playing hide-and-seek. Peter has hidden, and Victor\r\nis to find him. In the room where they are playing, there is only one\r\nnon-transparent wall and one double-sided mirror. Victor and Peter are\r\npoints with coordinates and respectively. The wall is a segment joining\r\npoints with coordinates and , the mirror a segment joining points and\r\n.If an obstacle has a common point with a line of vision, it\u2019s\r\nconsidered, that the boys can\u2019t see each other with this line of vision.\r\nIf the mirror has a common point with the line of vision, it\u2019s\r\nconsidered, that the boys can see each other in the mirror, i.e.\r\nreflection takes place. The reflection process is governed by laws of\r\nphysics the angle of incidence is equal to the angle of reflection. The\r\nincident ray is in the same half-plane as the reflected ray, relative to\r\nthe mirror. I.e. to see each other Victor and Peter should be to the\r\nsame side of the line, containing the mirror (see example 1). If the\r\nline of vision is parallel to the mirror, reflection doesn\u2019t take place,\r\nand the mirror isn\u2019t regarded as an obstacle (see example 4).Victor got\r\ninterested if he can see Peter, while standing at the same spot. Help\r\nhim solve this problem.\r\n", "solutions": ["#include <iostream>\n#include <iostream>\n#include <algorithm>\n#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#define eps 1e-9\n#define pi acos(-1)\n#define inf 10000000\nusing namespace std;\n\nstruct Point\n{\n    double x,y;\n    Point(double a,double b){x=a;y=b;}\n    Point(){}\n};\nstruct Line\n{\n    Point s,e;\n    Line(Point a,Point b){s=a;e=b;}\n    Line(){}\n};\n\n\ndouble dot(Point p1,Point p2,Point p0)\n{\n    return ((p1.x-p0.x)*(p2.x-p0.x)+(p1.y-p0.y)*(p2.y-p0.y));\n}\n\ndouble dis(Point a,Point b)\n{\n    return (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y);\n}\ndouble relation(Point p,Line l)\n{\n    Line tl;\n    tl.s=l.s;\n    tl.e=p;\n    return dot(tl.e,l.e,l.s)/dis(l.e,l.s);\n}\n\nPoint per(Point p,Line l)\n{\n    double r=relation(p,l);\n    Point tp;\n    tp.x=l.s.x+r*(l.e.x-l.s.x);\n    tp.y=l.s.y+r*(l.e.y-l.s.y);\n    return tp;\n}\n\nint ep(double x)\n{\n    if(x>eps)return 1;\n    if(x<-eps) return -1;\n    return 0;\n}\n\ndouble ch(Point p1,Point p2,Point p3)\n{\n    return (p2.y-p3.y)*(p1.x-p3.x)-(p2.x-p3.x)*(p1.y-p3.y);\n}\n\n\nbool between(Point a, Point b, Point c)\n{\n    return (b.x >= min(a.x, c.x) && b.x <= max(a.x, c.x) && (b.y >= min(a.y, c.y) && b.y <= max(a.y, c.y)));\n}\n\n\n//\ufffd\u0436\ufffd\u05b1\ufffd\ufffd\ufffd\ufffd\ufffd\u07f6\ufffd\ufffd\u01f7\ufffd\ufffd\u0f7b,p1,p2\ufffd\ufffd\u03aa\u05b1\ufffd\ufffd\nint cross(Point p1,Point p2,Point p3,Point p4 ,Point & temp)\n{\n\n\n//\ufffd\u0436\ufffd\u05b1\ufffd\ufffd\ufffd\ufffd\ufffd\u07f6\ufffd\n//   if(ep(ch(p1,p3,p2))*ep(ch(p1,p4,p2))>0)\n//        return 0;\n//    reutrn 1;\n\n\n//\ufffd\u0436\ufffd\ufffd\ufffd\ufffd\u07f6\ufffd\n    double s1,s2,s3,s4;\n    int d1,d2,d3,d4;\n    d1=ep(s1=ch(p1,p3,p2));\n    d2=ep(s2=ch(p1,p4,p2));\n    d3=ep(s3=ch(p3,p1,p4));\n    d4=ep(s4=ch(p3,p2,p4));\n\n\n    //\ufffd\u6df6\ufffd\u0f7b\n    if((d1^d2)==-2 && (d3^d4)==-2)\n    {\n        temp.x=(p3.x*s2-p4.x*s1)/(s2-s1);\n        temp.y=(p3.y*s2-p4.y*s1)/(s2-s1);\n        return 1;\n    }\n\n    if(!d1 && !d2 && !d3 && !d4)        //\ufffd\ufffd\ufffd\ufffd\n    {\n        if(between(p3,p1,p4))\n            return 5;\n        if(between(p3,p2,p4))\n            return 5;\n        return 0;\n    }\n    if(d1==0 && between(p1,p3,p2) )        //p1\ufffd\ufffdp2\ufffd\ufffd p3 \ufffd\ufffd\ufffd\u07e3\ufffd\ufffd\ufffdp3\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n    {\n        temp = p3;\n        return 2;\n    }\n    if(d2==0 && between(p1,p4,p2) )\n    {\n        temp = p4;\n        return 2;\n    }\n    if(d3==0 && between(p3,p1,p4) )\n    {\n        temp = p1;\n        return 2;\n    }\n    if(d4==0 && between(p3,p2,p4) )\n    {\n        temp = p2;\n        return 2;\n    }\n    return 0;\n}\n\n\n\nint main()\n{\n//    freopen(\"in.txt\",\"r\",stdin);\n    Point v,p;\n    Line w,m;\n    Point t;\n    Point s;\n    Point tmp;\n    while(cin>>v.x>>v.y)\n    {\n        cin>>p.x>>p.y;\n        cin>>w.s.x>>w.s.y>>w.e.x>>w.e.y;\n        cin>>m.s.x>>m.s.y>>m.e.x>>m.e.y;\n        t = per(v,m);\n        s = per(p,m);\n        int ff = cross(w.s,w.e,v,p,tmp);\n        int tt = cross(m.s,m.e,v,p,tmp);\n        int gg;\n        if(ff==0 && (tt==0 || tt==5))\n        {\n            cout<<\"YES\\n\";\n            continue;\n        }\n        if(tt!=0 && tt!=5)\n        {\n            cout<<\"NO\\n\";\n            continue;\n        }\n\n        t.x = t.x*2-v.x;\n        t.y = t.y*2-v.y;\n        s.x = s.x*2-p.x;\n        s.y = s.y*2-p.y;\n        tt = cross(m.s,m.e,t,p,tmp);\n        ff = cross(w.s,w.e,t,p,tmp);\n        gg = cross(w.s,w.e,s,v,tmp);\n        if(tt!=0 && tt!=5 && !ff && !gg)\n        {\n            cout<<\"YES\\n\";\n        }\n        else\n            cout<<\"NO\\n\";\n    }\n}\n"], "input": "", "output": "", "tags": ["geometry", "implementation"], "dificulty": "2400", "interactive": false}