{
    "link": "https://codeforces.com//contest/2049/problem/B",
    "problemId": "3095886",
    "problem_idx": "B",
    "shortId": "2049B",
    "contest_number": "2049",
    "problem_submissions": {
        "E": [
            297497545,
            297506248,
            297513363,
            297497215,
            297513754,
            297518565,
            297506722,
            297520708,
            297488887,
            297517677,
            297529325,
            297517116,
            297526566,
            297525983,
            297522466,
            297519909,
            297520752
        ],
        "D": [
            297483631,
            297479906,
            297485869,
            297513484,
            297488988,
            297486425,
            297485532,
            297485220,
            297484984,
            297500489,
            297482945,
            297486674,
            297499534,
            297487140,
            297494415,
            297499648,
            297503839,
            297506419
        ],
        "C": [
            297476672,
            297469506,
            297476237,
            297468134,
            297474308,
            297470523,
            297476380,
            297473582,
            297506923,
            297485541,
            297473126,
            297478801,
            297475763,
            297482532,
            297481819,
            297486746,
            297475914
        ],
        "B": [
            297470859,
            297460761,
            297460293,
            297459118,
            297463641,
            297461216,
            297463086,
            297463837,
            297473641,
            297462725,
            297462885,
            297469778,
            297465587,
            297460737,
            297466206,
            297472797,
            297465768
        ],
        "A": [
            297458727,
            297456975,
            297457057,
            297457132,
            297458401,
            297457465,
            297458903,
            297458352,
            297460231,
            297458345,
            297457970,
            297457220,
            297457772,
            297457523,
            297459233,
            297459057,
            297457136
        ],
        "F": [
            299863982,
            297606792
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137273",
    "editorial": "Since the entire must be a permutation, if s, we can set ., and if p, we\r\ncan set .. After that, the answer is YES if and only if all non-dot\r\ncharacters in are all p or s. If all non-dot characters are p, we can\r\nchoose the permutation . If all non-dot characters are s, we can choose\r\n. Otherwise, there exists both a p and a s. Suppose for contradiction\r\nthat there is a solution. Let and represent the subarrays represented by\r\nthe p and s respectively. Without loss of generality, suppose is the\r\nshorter subarray. Solution\r\n",
    "name": "B. pspspsps",
    "statement": "Given a string s = s_1s_2\r\nldots s_n of length n consisting of characters , , and (dot), determine\r\nwhether a permutation^{\r\ntext{ }} p of length n exists, such that for all integers i (1\r\nle i\r\nle n): If s_i is , then [p_1, p_2,\r\nldots, p_i] forms a permutation (of length i); If s_i is , then [p_i,\r\np_{i+1},\r\nldots, p_{n}] forms a permutation (of length n-i+1); If s_i is , then\r\nthere is no additional restriction. ^{\r\ntext{ }}A permutation of length n is an array consisting of n distinct\r\nintegers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray), and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#define ent '\\n'#define int long long typedef long long ll;using namespace std; const int mod = 998'244'353;const int maxn = 5e3 + 12; int p[maxn];int n, m, k; void solve() {    string s;    cin >> n >> s;    int ans = 1;    for(int i = 0; i < n; i++) {        for(int j = i + 1; j < n; j++) {            if(s[i] == 's' && s[j] == 'p') {                ans &= (min(n - i, j + 1) <= j - i + 1);            }            if(s[i] == 'p' && s[j] == 's') ans = 0;        }    }    if(ans) {        cout << \"YES\\n\";    }    else {        cout << \"NO\\n\";    }} int32_t main(){    ios_base::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);    int t = 1;     cin >> t;    while(t--){        solve();    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "graph matchings",
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. pspspsps.json",
    "hint": []
}