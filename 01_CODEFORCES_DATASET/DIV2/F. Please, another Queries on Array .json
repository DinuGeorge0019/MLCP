{
    "link": "https://codeforces.com//contest/1114/problem/F",
    "problemId": "295528",
    "problem_idx": "F",
    "shortId": "1114F",
    "contest_number": "1114",
    "problem_submissions": {
        "E": [
            49723158,
            49715728,
            49717586,
            49715673,
            49722801,
            49716158,
            49718191,
            49719573,
            49752574,
            49752490,
            49731134,
            49732179,
            49723266,
            49731088,
            49731791,
            49709398,
            49709699,
            49747930,
            49752856,
            49752305,
            49752243,
            49751661,
            49717020,
            49711667,
            49716380
        ],
        "D": [
            49715413,
            49709860,
            49711770,
            49711237,
            49709601,
            49710358,
            49712973,
            49713792,
            49713441,
            49727466,
            49728830,
            49707199,
            49710354,
            49729290,
            49706402,
            49726434,
            49712605,
            49711462,
            49713489,
            49710031
        ],
        "F": [
            49712180,
            49727873,
            49729579,
            49729533,
            49726481,
            49727101,
            49727851,
            49731205,
            49722332,
            49708876,
            49721497,
            49732987,
            49730916,
            49722816,
            49711859,
            49722110,
            49737560,
            49795547
        ],
        "B": [
            49703429,
            49701684,
            49702412,
            49706794,
            49704297,
            49702841,
            49708341,
            49704456,
            49705411,
            49718896,
            49701034,
            49703871,
            49704671,
            49716920,
            49700530,
            49704223,
            49704334,
            49707941,
            49702883,
            49701403
        ],
        "C": [
            49701343,
            49703467,
            49706082,
            49704226,
            49698909,
            49708135,
            49709609,
            49709215,
            49708563,
            49712949,
            49704721,
            49705449,
            49707404,
            49724763,
            49703776,
            49705794,
            49710442,
            49704405,
            49704935,
            49704203
        ],
        "A": [
            49696863,
            49696786,
            49698271,
            49697340,
            49701634,
            49697080,
            49706366,
            49697215,
            49702348,
            49720550,
            49696844,
            49696791,
            49698691,
            49696775,
            49697211,
            49696953,
            49699702,
            49696860,
            49697429,
            49697130
        ]
    },
    "name": "F. Please, another Queries on Array ",
    "statement": "You are given an array a_1, a_2,\r\nldots, a_n.You need to perform q queries of the following two types: \"\"\r\nfor every i (l\r\nle i\r\nle r) multiply a_i by x. \"\" print\r\nvarphi(\r\nprod\r\nlimits_{i=l}^{r} a_i) taken modulo 10^9+7, where\r\nvarphi denotes Euler’s totient function. The Euler’s totient function of\r\na positive integer n (denoted as\r\nvarphi(n)) is the number of integers x (1\r\nle x\r\nle n) such that\r\ngcd(n,x) = 1.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nusing ll = long long;\n\nconst int MAXN = 400500;\nconst int MOD = 1000000007;\nconst int MAXK = 301;\n\nint t[4 * MAXN];\nint pu[4 * MAXN];\nll mask[4 * MAXN];\nll pumask[4 * MAXN];\n\nint num[MAXN];\n\nint mul(int x, int y) {\n  return (1LL * x * y) % MOD;\n}\n\nint binpow(int x, int n) {\n  int res = 1;\n  for (; n > 0; n /= 2) {\n    if (n & 1) res = mul(res, x);\n    x = mul(x, x);\n  }\n  return res;\n}\n\nll msk[MAXK];\n\nvoid apply(int v, int x, ll msk, int len) {\n  t[v] = mul(t[v], binpow(x, len));\n  pu[v] = mul(pu[v], x);\n  mask[v] |= msk;\n  pumask[v] |= msk;\n}\n\nvoid push(int v, int len) {\n  if (pu[v] == 1 && pumask[v] == 0) {\n    return;\n  }\n  apply(v + v, pu[v], pumask[v], (len + 1) / 2);\n  apply(v + v + 1, pu[v], pumask[v], len / 2);\n  pu[v] = 1;\n  pumask[v] = 0;\n}\n\nvoid update(int v, int l, int r, int x, int tl, int tr) {\n  if (l <= tl && tr <= r) {\n    apply(v, x, msk[x], tr - tl + 1);\n    return;\n  }\n  push(v, tr - tl + 1);\n  int tm = (tl + tr) / 2;\n  if (l <= tm) {\n    update(v + v, l, r, x, tl, tm);\n  }\n  if (r > tm) {\n    update(v + v + 1, l, r, x, tm + 1, tr);\n  }\n  t[v] = mul(t[v + v], t[v + v + 1]);\n  mask[v] = mask[v + v] | mask[v + v + 1];\n}\n\npair<int, ll> get(int v, int l, int r, int tl, int tr) {\n  if (l <= tl && tr <= r) {\n    return pair<int, ll>{t[v], mask[v]};\n  }\n  push(v, tr - tl + 1);\n  int tm = (tl + tr) / 2;\n  if (r <= tm) {\n    return get(v + v, l, r, tl, tm);\n  }\n  if (l > tm) {\n    return get(v + v + 1, l, r, tm + 1, tr);\n  }\n  auto a = get(v + v, l, r, tl, tm);\n  auto b = get(v + v + 1, l, r, tm + 1, tr);\n  return pair<int, ll>{mul(a.first, b.first), a.second | b.second};\n}\n\nint inv[MAXK];\nint pr[MAXK];\n\nint main() {\n  ios_base::sync_with_stdio(false);\n  memset(num , -1, sizeof num);\n  int cnt = 0;\n  for (int i = 2; i <= 300; ++i) {\n    bool ok = true;\n    for (int j = 2; j * j <= i; ++j) {\n      if (i % j == 0) ok = false;\n    }\n    if (!ok) {\n      continue;\n    }\n    num[i] = cnt;\n    pr[cnt++] = i;\n  }\n\n  for (int i = 1; i <= 300; ++i) {\n    for (int j = 2; j <= i; ++j) if (num[j] != -1 && i % j == 0) {\n      msk[i] |= 1LL << num[j];\n    }\n  }\n\n  inv[0] = inv[1] = 1;\n  for (int i = 2; i <= 300; ++i) {\n    inv[i] = mul(inv[MOD % i], MOD - MOD / i);\n  }\n\n  int n, q;\n  cin >> n >> q;\n  for (int i = 0; i < 4 * n; ++i) {\n    t[i] = 1;\n    pu[i] = 1;\n    mask[i] = 0;\n    pumask[i] = 0;\n  }\n  for (int i = 0; i < n; ++i) {\n    int x;\n    cin >> x;\n    update(1, i, i, x, 0, n - 1);\n  }\n\n  for (int i = 0; i < q; ++i) {\n    string s;\n    cin >> s;\n    if (s[0] == 'M') {\n      int l, r, x;\n      cin >> l >> r >> x;\n      --l; --r;\n      update(1, l, r, x, 0, n - 1);\n    } else {\n      int l, r;\n      cin >> l >> r;\n      --l, --r;\n      auto res = get(1, l, r, 0, n - 1);\n      int ans = res.first;\n      for (int j = 0; j < 62; ++j) {\n        if (res.second >> j & 1) {\n          ans = mul(ans, pr[j] - 1);\n          ans = mul(ans, inv[pr[j]]);\n        }\n      }\n      cout << ans << '\\n';\n    }\n  }\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "data structures",
        "divide and conquer",
        "math",
        "number theory"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Please, another Queries on Array .json",
    "editorial_link": "https://codeforces.com/blog/entry/65136",
    "editorial": "TutorialThereâs a few fundamentals about Eulerâs totient we need to\r\nknow: and , provided is a prime number and is a positive integer. You\r\ncan easily prove these equations through the definition of the function\r\nitself. Eulerâs totient is a multiplicative function. is considered a\r\nmultiplicative function when means . Keep in mind that we can rewrite as\r\nof following: .Letâs denote as the set of prime factors of .Thus, the\r\nanswer for each query will simply be: .So, for each query weâll need to\r\nknow the product of the elements, and which primes are included in that\r\nproduct.There are a few ways to work around with it. One of the most\r\neffective way is as following: Create a product segment tree to maintain\r\nthe segment products. Since only depends on the appearance or\r\nnon-appearance of the primes, and the constraints guaranteed us to have\r\nat most prime factors, we can use bitmasks and an or-sum segment tree to\r\nmaintain this part. Also, the bitmasks and range products can be\r\nmaintained in a sqrt-decomposition fashion (please refer to GreenGrapeâs\r\nsolution), making each queryâs complexity to be somewhat around . Still,\r\nthis complexity is quite high and surpassed time limit on a pretty thin\r\nmargin.Complexity for initializing segment trees: .Complexity for each\r\nupdate query: .Complexity for each return query: .\r\n",
    "hint": []
}