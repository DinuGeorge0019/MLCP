{
    "link": "https://codeforces.com//contest/1839/problem/A",
    "problemId": "1950158",
    "problem_idx": "A",
    "shortId": "1839A",
    "contest_number": "1839",
    "problem_submissions": {
        "D": [
            208378999,
            208378969,
            208378832,
            208349629,
            208349595,
            208328924,
            208318842,
            208320348,
            208320009,
            208322670,
            208334872,
            252078530,
            208941980,
            208322481,
            208320363,
            208321362,
            208327211,
            208323287,
            208323939,
            208326005,
            208322044,
            238787448,
            208326918,
            208338715,
            208324800,
            208326544,
            208326069,
            208328427
        ],
        "E": [
            208319512,
            208328631,
            208328272,
            208332229,
            208329987,
            208322483,
            208941985,
            208331621,
            208337019,
            208333546,
            208333532,
            208337451,
            208338255,
            208336016,
            208341143,
            238787342,
            208337777,
            208329186,
            208341540,
            208340328,
            208345193,
            208341230
        ],
        "C": [
            208312529,
            208312433,
            208313019,
            208312784,
            208314192,
            208314831,
            208941969,
            208315364,
            208314601,
            208315655,
            208313303,
            208314023,
            208311295,
            208317114,
            208312761,
            208316692,
            208311943,
            208319701,
            208315483,
            208313786,
            208316277
        ],
        "B": [
            208308892,
            208309149,
            208309789,
            208308399,
            208310012,
            208310211,
            208941953,
            208312078,
            208308633,
            208312628,
            208307832,
            208309526,
            208306915,
            208309002,
            208309419,
            208310463,
            208308132,
            208308049,
            208311860,
            208308608,
            208311306
        ],
        "A": [
            208307199,
            208306621,
            208306837,
            208306359,
            208306401,
            208306556,
            208941945,
            208307764,
            208306608,
            208308716,
            208306828,
            208306416,
            208307882,
            208306972,
            208306698,
            208306776,
            208306761,
            208306697,
            208307597,
            208306680,
            208308663
        ]
    },
    "name": "A. The Good Array",
    "statement": "You are given two integers n and k.An array a_1, a_2,\r\nldots, a_n of length n, consisting of zeroes and ones is if for integers\r\ni from 1 to n of the following conditions are satisfied: at least\r\nlceil\r\nfrac{i}{k}\r\nrceil of the first i elements of a are equal to 1, at least\r\nlceil\r\nfrac{i}{k}\r\nrceil of the last i elements of a are equal to 1. Here,\r\nlceil\r\nfrac{i}{k}\r\nrceil denotes the result of division of i by k, rounded up. For example,\r\nlceil\r\nfrac{6}{3}\r\nrceil = 2,\r\nlceil\r\nfrac{11}{5}\r\nrceil =\r\nlceil 2.2\r\nrceil = 3 and\r\nlceil\r\nfrac{7}{4}\r\nrceil =\r\nlceil 1.75\r\nrceil = 2.Find the minimum possible number of ones in a good array.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define int long long\n#define pii pair<int, int>\n#define ff first\n#define ss second\n#define pb push_back\nusing namespace std;\nvoid init() {\n\t\n}\nvoid solve() {\n\tint n, k;\n\tcin >> n >> k;\n\tint a[n + 1];\n\tfor (int i = 1; i <= n; i++) a[i] = 0;\n\tfor (int i = 1; i <= n / 2; i++) {\n\t\ta[i] = a[(n + 1) - i] = (i % k == 1);\n\t}\n\tint cnt = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t\tcnt += a[i];\n\t\tif (cnt < i / k + bool(i % k)) {\n\t\t\tif (!a[i]) {\n\t\t\t\ta[i] = 1;\n\t\t\t\tcnt++;\n\t\t\t} else throw runtime_error(\"\");\n\t\t}\n\t}\n\tcout << cnt << endl;\n}\nint32_t main(){\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\tcout.tie(0);\n\tinit();\n\tint t = 1;\n\tcin >> t;\n\twhile (t--) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. The Good Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/116963",
    "editorial": "Letâs find lower bound for answer. In any good array, there are at least\r\nones among the first elements. Also, is always , as . So there are at\r\nleast ones in any good array. This lower bound can always be achieved by\r\nplacing ones on position and on positions for all integers such that\r\n.The answer to the probelm is .\r\n",
    "hint": [
        "Hint The first and last elements are always equal to .",
        "Hint There are at least ones among the first elements."
    ]
}