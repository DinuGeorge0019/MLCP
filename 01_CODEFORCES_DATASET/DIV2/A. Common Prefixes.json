{
    "link": "https://codeforces.com//contest/1384/problem/A",
    "problemId": "681333",
    "problem_idx": "A",
    "shortId": "1384A",
    "contest_number": "1384",
    "problem_submissions": {
        "D": [
            87920747,
            87898550,
            87899799,
            87904419,
            87905595,
            87900804,
            87885567,
            87904258,
            87914433,
            87915245,
            87916166,
            87919718,
            87915464,
            87919225,
            87915479,
            87921886,
            87920890,
            87922578,
            87921368,
            87920046
        ],
        "F": [
            87913933
        ],
        "B1": [
            87894001,
            87885002,
            87901113,
            87888080,
            87892689,
            87910843,
            87920006,
            87917285,
            87898927,
            87884228,
            87892152,
            87886631,
            87893715,
            87908879,
            87900239,
            87907063,
            87892421,
            87898971,
            87917937,
            87897854
        ],
        "B2": [
            87893926,
            87884835,
            87901230,
            87887888,
            87903446,
            87910900,
            87919888,
            87917176,
            87906127,
            87884007,
            87892285,
            87886523,
            87893549,
            87908713,
            87900384,
            87907601,
            87892328,
            87898841,
            87917847,
            87897690
        ],
        "C": [
            87885628,
            87894004,
            87882731,
            87893702,
            87872158,
            87889498,
            87895035,
            87884029,
            87889346,
            87904942,
            87896617,
            87893149,
            87904403,
            87889926,
            87909570,
            87895224,
            87907611,
            87906036,
            87884342,
            87911186
        ],
        "A": [
            87871418,
            87873285,
            87873996,
            87872062,
            87871221,
            87872543,
            87898590,
            87873955,
            87871869,
            87871615,
            87875627,
            87876144,
            87877768,
            87875116,
            87878214,
            87873342,
            87873019,
            87876431,
            87871586,
            87881479
        ]
    },
    "name": "A. Common Prefixes",
    "statement": "The length of the of two strings s = s_1 s_2\r\nldots s_n and t = t_1 t_2\r\nldots t_m is defined as the maximum integer k (0\r\nle k\r\nle min(n,m)) such that s_1 s_2\r\nldots s_k equals t_1 t_2\r\nldots t_k.Koa the Koala initially has n+1 strings s_1, s_2,\r\ndots, s_{n+1}.For each i (1\r\nle i\r\nle n) she calculated a_i the length of the of s_i and s_{i+1}.Several\r\ndays later Koa found these numbers, but she couldn\u2019t remember the\r\nstrings.So Koa would like to find some strings s_1, s_2,\r\ndots, s_{n+1} which would have generated numbers a_1, a_2,\r\ndots, a_n. Can you help her?If there are many answers print any. We can\r\nshow that answer always exists for the given constraints.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define inf 0x3f3f3f3f\n#define m_k make_pair\nusing namespace std;\nconst int N=110;\nint t,n,a[N];\nchar s[N];\nsigned main()\n{\n\tscanf(\"%dd\",&t);\n\twhile (t--)\n\t{\n\t\tscanf(\"%d\",&n);\n\t\tfor (int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\t\tint MAX=0;\n\t\tfor (int i=1;i<=n;i++) MAX=max(MAX,a[i]);\n\t\tMAX++;\n\t\tfor (int i=1;i<=MAX;i++) s[i]='a';\n\t\tprintf(\"%s\\n\",s+1);\n\t\tfor (int i=1;i<=n;i++)\n\t\t{\n\t\t\tif (s[a[i]+1]=='a') s[a[i]+1]='b';\n\t\t\telse s[a[i]+1]='a';\n\t\t\tprintf(\"%s\\n\",s+1);\n\t\t}\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "strings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Common Prefixes.json",
    "editorial_link": "https://codeforces.com//blog/entry/80562",
    "editorial": "The problem asks to find strings such that for all (). A way to solve\r\nthis problem is the following: Set (ie. times ). For such that () set\r\nand then flip -th character of (ie. if it was put otherwise ). So for\r\neach : and will have exactly common characters from the prefix. The -th\r\ncharacter of is different than -th character of (this character always\r\nexists since and each string has length exactly ). Therefore the LCP is\r\nas desired. Time complexity: per testcase\r\n"
}