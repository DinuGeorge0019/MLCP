{
    "link": "https://codeforces.com//contest/92/problem/A",
    "problemId": "482",
    "problem_idx": "A",
    "shortId": "92A",
    "contest_number": "92",
    "problem_submissions": {
        "E": [
            502340,
            502235,
            503231,
            503523,
            502875,
            1934622,
            504390,
            504399
        ],
        "D": [
            501536,
            501225,
            500880,
            502434,
            501591,
            501746,
            502190,
            500876,
            502107,
            1934547,
            501066,
            502802,
            501866,
            502445,
            503569,
            502507,
            502093,
            502285,
            502239
        ],
        "C": [
            500714,
            501838,
            501748,
            501346,
            502515,
            500790,
            501606,
            500378,
            501102,
            1934749,
            500620,
            501744,
            501022,
            501650,
            501493,
            501780,
            501873,
            501256,
            501229
        ],
        "B": [
            500032,
            502068,
            499811,
            499879,
            500650,
            499787,
            500445,
            499339,
            500204,
            1934408,
            499909,
            500192,
            500246,
            500348,
            500291,
            502825,
            500705,
            500227,
            499923
        ],
        "A": [
            499184,
            499077,
            498989,
            499217,
            499137,
            499006,
            499104,
            498985,
            498993,
            1934380,
            499022,
            499009,
            499187,
            499279,
            499007,
            503011,
            499075,
            499110,
            498994
        ]
    },
    "name": "A. Chips",
    "statement": "There are walruses sitting in a circle. All of them are numbered in the\r\nclockwise order: the walrus number sits to the left of the walrus number\r\n, the walrus number sits to the left of the walrus number , ..., the\r\nwalrus number sits to the left of the walrus number .The presenter has\r\nchips. The presenter stands in the middle of the circle and starts\r\ngiving the chips to the walruses starting from walrus number and moving\r\nclockwise. The walrus number gets chips. If the presenter can\u2019t give the\r\ncurrent walrus the required number of chips, then the presenter takes\r\nthe remaining chips and the process ends. Determine by the given and how\r\nmany chips the presenter will get in the end.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <string>\n#include <numeric>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n#include <sstream>\n#include <cstring>\n#include <cstdio>\n#include <complex>\n#include <cassert>\n\nusing namespace std;\n\n//\ntypedef long long LL;\ntypedef pair<int,int> PII;\n#define MP make_pair\n#define VI vector<int>\n#define FOR(v,p,k) for(int v=p;v<=k;++v)\n#define FORD(v,p,k) for(int v=p;v>=k;--v)\n#define REP(i,n) for(int i=0;i<(n);++i)\n#define VAR(v,i) __typeof(i) v=(i)\n#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)\n#define PB push_back\n#define ST first\n#define ND second\n#define SIZE(x) (int)x.size()\n#define ALL(c) c.begin(),c.end()\n//\n#define rep(i,b) for(int i=(0);i<(b);++i)\n#define fo(i,a,b) for(int i=(a);i<=(b);++i)\n#define ford(i,a,b) for(int i=(a);i>=(b);--i)\n#define fore(a,b) for(__typeof((b).begin()) a = (b).begin();a!=(b).end();++a)\n#define vv vector\n#define pb push_back\n#define ll long long\n#define ld long double\n#define ss(a) (int)(a).size()\n#define all(x) (x).begin(),(x).end()\n#define clr(x,a) memset(x,a,sizeof(x))\n#define vi vv<int>\n#define vs vv<string>\ntemplate<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}\ntemplate<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}\n\nint cond = (ll)1;\n#define db(x) { if (cond > 0) { cond--; rep (xxx, 1) cerr << __LINE__ << \" \" << #x << \" \" << x << endl; cerr.flush(); } }\n\nvoid _main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    int k = n * (n+1)/2;\n    m %= k;\n    fo (i, 1, n) {\n        if (m >= i) { m -= i; }\n        else break;\n    }\n    cout<<m<<endl;\n}\n\nint main(int argc, char ** argv) {\n    string p = \"../gcj/source/\" + string(\"\") + argv[0][strlen(argv[0])-1];\n//    if (argc >= 2 && strcmp(argv[1], \"q\") != 0) { freopen(argv[1],\"r\",stdin);}\n\n    rep (i, argc) if (strcmp(argv[i], \"1n\") == 0) { freopen(\"1.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"2n\") == 0) { freopen(\"2.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"3n\") == 0) { freopen(\"3.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"4n\") == 0) { freopen(\"4.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"5n\") == 0) { freopen(\"5.in\",\"r\",stdin);}\n\n    rep (i, argc) if (strcmp(argv[i], \"s0\") == 0) { freopen((p + \"-small-0.in\").c_str(),\"r\",stdin);freopen((p + \"-small-0.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"s1\") == 0) { freopen((p + \"-small-1.in\").c_str(),\"r\",stdin);freopen((p + \"-small-1.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"s2\") == 0) { freopen((p + \"-small-2.in\").c_str(),\"r\",stdin);freopen((p + \"-small-2.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"l0\") == 0) { freopen((p + \"-large-0.in\").c_str(),\"r\",stdin);freopen((p + \"-large-0.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"q\") == 0) cond = 1 << 30;\n    _main();\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Chips.json",
    "editorial_link": "https://codeforces.com//blog/entry/2182",
    "editorial": "In these problems you should only realize what was written is the statement. In problem B wasn't recommended to use BigInteger in Java because of slow speed."
}