{"link": "https://codeforces.com//contest/950/problem/D", "problemId": "163625", "problem_idx": "D", "shortId": "950D", "contest_number": "950", "problem_submissions": {"F": [36110799, 36106874, 36110418, 36111996, 36110842, 36112881, 36112066, 36111037, 36115685, 36107783, 36111061, 36110969], "E": [36106600, 36110576, 36107020, 36108185, 36105421, 36110602, 36104100, 36112036, 36103180, 36119591, 36103520, 36104391, 36111839, 36104803, 36105285, 36106153, 36105692, 36107917, 36133513, 36106022], "D": [36099255, 36103207, 36103975, 36101168, 36099422, 36104316, 36100451, 36105727, 36100010, 36100957, 36098808, 36101447, 36108972, 36101180, 36100807, 36101948, 36101824, 36102198, 36099705, 36115114, 36103338], "B": [36097037, 36093570, 36096763, 36102283, 36107341, 36096070, 36118539, 36103628, 36098191, 36093324, 36097654, 36092909, 36097186, 36093092, 36094178, 36093761, 36093826, 36092324, 36094422, 36093177], "C": [36095719, 36096428, 36100419, 36099281, 36103315, 36101716, 36094357, 36100382, 36094934, 36098794, 36096378, 36098545, 36106922, 36096674, 36097941, 36096847, 36097394, 36095627, 36097024, 36097344], "A": [36091256, 36091581, 36094574, 36100244, 36107668, 36091536, 36095298, 36101664, 36095785, 36091314, 36098215, 36091291, 36093398, 36091393, 36091803, 36091568, 36091610, 36091266, 36092123, 36091364]}, "name": "D. A Leapfrog in the Array", "statement": "Dima is a beginner programmer. During his working process, he regularly\r\nhas to repeat the following operation again and again: to remove every\r\nsecond element from the array. One day he has been bored with easy\r\nsolutions of this problem, and he has come up with the following\r\nextravagant algorithm.Let\u2019s consider that initially array contains\r\nnumbers from to and the number is located in the cell with the index\r\n(Indices are numbered starting from one) and other cells of the array\r\nare empty. Each step Dima selects a non-empty array cell with the\r\nmaximum index and moves the number written in it to the nearest empty\r\ncell to the left of the selected one. The process continues until all\r\nnumbers will appear in the first cells of the array. For example if ,\r\nthe array is changing as follows: You have to write a program that\r\nallows you to determine what number will be in the cell with index ()\r\nafter Dima\u2019s algorithm finishes.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\n#define D isdigit(c=getchar())\ninline int getint(){\n\tint x,c,l=0;\n\tfor(;!D;l=c);for(x=c-'0';D;x=x*10+c-'0');\n\treturn l=='-'?-x:x;\n}\ninline int puti(int x){return x?puti(x/10),putchar(x%10+'0'):0;}\ninline int putint(int x){x<0?putchar('-'),x=-x:0;return x?puti(x):putchar('0');}\nlong long n;int q;\nint main(){\n\tscanf(\"%I64d%d\",&n,&q);\n\tfor(int i=1;i<=q;i++){\n\t\tlong long x;scanf(\"%I64d\",&x);\n\t\tfor(;!(x&1);){\n\t\t\tx+=n-(x/2);\n\t\t}\n\t\tprintf(\"%I64d\\n\",x/2+1);\n\t}\n\treturn 0;\n}\n\n"], "input": "", "output": "", "tags": ["constructive algorithms", "math"], "dificulty": "1700", "interactive": false}