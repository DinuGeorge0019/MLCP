{
    "link": "https://codeforces.com//contest/181/problem/E",
    "problemId": "1240",
    "problem_idx": "E",
    "shortId": "181E",
    "contest_number": "181",
    "problem_submissions": {
        "E": [
            1590113,
            1590937,
            1590679,
            1590013,
            1589120,
            1589907,
            1592216,
            1592384,
            1590755
        ],
        "D": [
            1589155,
            1588722,
            1590996,
            1588173,
            1588742,
            1591468,
            1589039,
            1589783,
            1589665,
            1589895,
            1589654,
            1589997,
            1590444,
            1590515
        ],
        "C": [
            1587940,
            1589199,
            1588760,
            1587377,
            1587624,
            1588135,
            1587859,
            1588331,
            1587782,
            1587761,
            1587961,
            1587963,
            1588400,
            1588067,
            1588525,
            1588209,
            1588624
        ],
        "B": [
            1586840,
            1586866,
            1587707,
            1586377,
            1586530,
            1586858,
            1586846,
            1587063,
            1586738,
            1586718,
            1586968,
            1587093,
            1586831,
            1587067,
            1587085,
            1587398,
            1587045
        ],
        "A": [
            1586352,
            1587002,
            1586481,
            1586332,
            1586340,
            1586462,
            1586515,
            1586430,
            1586388,
            1586402,
            1586351,
            1586368,
            1586685,
            1586466,
            1586482,
            1586638,
            1586389
        ]
    },
    "name": "E. Playing with Superglue",
    "statement": "Two players play a game. The game is played on a rectangular board with\r\nsquares. At the beginning of the game two different squares of the board\r\nhave two chips. The first player’s goal is to shift the chips to the\r\nsame square. The second player aims to stop the first one with a .We’ll\r\ndescribe the rules of the game in more detail.The players move in turns.\r\nThe first player begins.With every move the first player chooses one of\r\nhis unglued chips, and shifts it one square to the left, to the right,\r\nup or down. It is not allowed to move a chip beyond the board edge. At\r\nthe beginning of a turn some squares of the board may be covered with a\r\nglue. The first player can move the chip to such square, in this case\r\nthe chip gets tightly glued and cannot move any longer.At each move the\r\nsecond player selects one of the free squares (which do not contain a\r\nchip or a glue) and covers it with superglue. The glue dries long and\r\nsquares covered with it remain sticky up to the end of the game.If,\r\nafter some move of the first player both chips are in the same square,\r\nthen the first player wins. If the first player cannot make a move (both\r\nof his chips are glued), then the second player wins. Note that the\r\nsituation where the second player cannot make a move is impossible he\r\ncan always spread the glue on the square from which the first player has\r\njust moved the chip.We will further clarify the case where both chips\r\nare glued and are in the same square. In this case the first player wins\r\nas the game ends as soon as both chips are in the same square, and the\r\ncondition of the loss (the inability to move) does not arise.You know\r\nthe board sizes and the positions of the two chips on it. At the\r\nbeginning of the game all board squares are glue-free. Find out who wins\r\nif the players play optimally.\r\n",
    "solutions": [
        "#include<cstdio>s\n#include<vector>\n#include<cmath>\n#include<algorithm>\n\n#define pb push_back\n\ntypedef unsigned int uint;\ntypedef long long i64;\ntypedef unsigned long long ui64;\n\nconst int intINF=999999999;\nconst i64 i64INF=99999999999999999ll;\nconst double doubleINF=9999999999.;\n\nusing namespace std;\n\nint abs(int a){\n\tif(a<0) a*=-1;\n\treturn a;\n}\n\nint max(int a,int b){\n\tif(a<b) a=b;\n\treturn a;\n}\n\nint main(){\n\tint x1,y1,x2,y2,px,py;\n\tscanf(\"%d%d%d%d%d%d\",&px,&py,&x1,&y1,&x2,&y2);\n\tint m;\n\tint p1,p2;\n\tp1=abs(y1-y2);\n\tp2=abs(x1-x2);\n\tif( (p1>=3 && p2>=4) || (p1>=4 && p2>=3) || p1>4 || p2>4 ) printf(\"Second\\n\");\n\telse printf(\"First\\n\");\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Playing with Superglue.json",
    "editorial_link": "https://codeforces.com//blog/entry/4372",
    "editorial": "The second player have easy strategy to hold some chip in position (X,?Y) in one of four half-planes  x???X?+?2, x???X?-?2, y???Y?+?2 ? y???Y?-?2. He can chose one of these half-planes by himself.\n\nSo, in case max(|x1?-?x2|,?|y1?-?y2|)?>?4 the second player wins  he just holds chips in half-planes that have no common cells.\n\nCases for max(|x1?-?x2|,?|y1?-?y2|)???4 expected to solve using some bruteforce. You can see that moving chips in way of distancing from each other is not profitable for the first player. Therefore you can bruteforce the game in square no more than 5?×?5. If your bruteforce so slow and doesn't fit into 2 sec, you can use precalculation. Also you can write some dp using masks.\n\nAlso you can check cases max(|x1?-?x2|,?|y1?-?y2|)???4 by hand. But there you can easy make some mistakes.",
    "hint": []
}