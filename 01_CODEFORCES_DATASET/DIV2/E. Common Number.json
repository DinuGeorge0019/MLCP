{
    "link": "https://codeforces.com//contest/1271/problem/E",
    "problemId": "495937",
    "problem_idx": "E",
    "shortId": "1271E",
    "contest_number": "1271",
    "problem_submissions": {
        "F": [
            66961825,
            67036286,
            66974278,
            66959941,
            67028258
        ],
        "D": [
            66955004,
            66954300,
            66950258,
            66955211,
            66955727,
            66954986,
            66956735,
            66957222,
            66956606,
            66952705,
            66951493,
            66952458,
            66958655,
            66958760,
            66959470,
            66951305,
            66951037,
            66961080,
            66953125
        ],
        "E": [
            66949374,
            66950284,
            66955194,
            66945323,
            66950426,
            66952357,
            66949869,
            66952893,
            66953188,
            66956256,
            66958878,
            66957745,
            66946179,
            66952300,
            66952751,
            66953634,
            66960610,
            66957983,
            66952356,
            66960241
        ],
        "C": [
            66945489,
            66944768,
            66945892,
            66949422,
            66948266,
            66947645,
            66944925,
            66945427,
            66944821,
            66946803,
            66944977,
            66945954,
            66962107,
            66945691,
            66947213,
            66947154,
            66945982,
            66945961,
            66946143,
            66945702
        ],
        "B": [
            66942838,
            66941728,
            66942682,
            66945965,
            66941748,
            66944405,
            66942218,
            66943112,
            66940283,
            66944697,
            66941782,
            66942898,
            66961125,
            66942570,
            66943103,
            66943908,
            66943600,
            66947332,
            66942421,
            66942779
        ],
        "A": [
            66938999,
            66939105,
            66938928,
            66942646,
            66939987,
            66939135,
            66939726,
            66939564,
            66938824,
            66939325,
            66939118,
            66940343,
            66960484,
            66938913,
            66939541,
            66940419,
            66940083,
            66938911,
            66938937,
            66942932
        ]
    },
    "name": "E. Common Number",
    "statement": "At first, let’s define function f(x) as follows:\r\nbegin{matrix} f(x) & = &\r\nleft\r\n{\r\nbegin{matrix}\r\nfrac{x}{2} &\r\nmbox{if } x\r\ntext{ is even}\r\nx - 1 &\r\nmbox{otherwise }\r\nend{matrix}\r\nright.\r\nend{matrix} We can see that if we choose some value v and will apply\r\nfunction f to it, then apply f to f(v), and so on, we’ll eventually\r\nget 1. Let’s write down all values we get in this process in a list and\r\ndenote this list as path(v). For example, path(1) = [1], path(15) = [15,\r\n14, 7, 6, 3, 2, 1], path(32) = [32, 16, 8, 4, 2, 1].Let’s write all\r\nlists path(x) for every x from 1 to n. The question is next: what is the\r\nmaximum value y such that y is contained in at least k different lists\r\npath(x)?Formally speaking, you need to find maximum y such that\r\nleft|\r\n{ x  |  1\r\nle x\r\nle n, y\r\nin path(x)\r\n}\r\nright|\r\nge k.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\nll n, k, ans;\n\nll get(ll x, ll dex) {\n\treturn max(0LL, min(1LL << dex, n - (x << dex) + 1));\n}\nll cnt(ll x) {\n\tll res = 0;\n\tfor (int i = 0; (x << i) <= n; i++) {\n\t\tres += get(x, i);\n\t\tif (x % 2 == 0)\n\t\t\tres += get(x + 1, i);\n\t}\n\treturn res;\n}\n\nint main() {\n\tios::sync_with_stdio(false), cin.tie(0);\n\tcin >> n >> k;\n\tfor (int i = 60; ~i; i--)\n\t\tif (cnt(ans | (1LL << i)) >= k)\n\t\t\tans |= (1LL << i);\n\tcout << ans;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics",
        "dp",
        "math"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Common Number.json",
    "editorial_link": "https://codeforces.com/blog/entry/72247",
    "editorial": "Letâs introduce a function the number of such that . The problem is now\r\nto find the greatest number such that .How can we calculate ? First,\r\nletâs consider the case when is odd. is contained in ; then is contained\r\nin (since ) and in (since is odd, ). The next numbers containing in\r\ntheir paths are , , and , then , , ..., , and so on. By processing each\r\nsegment of numbers containing in their paths in , we can calculate for\r\nodd in .What about even ? The first numbers containing in their paths\r\nare and , then , , and , then , , ..., , and so on. So the case with\r\neven can also be solved in .We can also see that simply because for each\r\nnumber containing in its path, there is another number that is less than\r\nit which contains in its path. And this fact means that if we want to\r\nfind the greatest such that , we only have to run two binary searches:\r\none binary search over odd numbers, and another binary search over even\r\nnumbers.\r\n",
    "hint": []
}