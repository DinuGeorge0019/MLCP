{"link": "https://codeforces.com//contest/697/problem/D", "problemId": "65177", "problem_idx": "D", "shortId": "697D", "contest_number": "697", "problem_submissions": {"C": [19125110, 19119489, 19115272, 19120784, 19120358, 19121611, 19126423, 19120555, 19121257, 19119720, 19124669, 19118290, 19123580, 19123345, 19122737, 19115954, 19121052, 19121218], "E": [19122529, 19128431, 19129328, 19128568, 19122012, 19131082, 19131216, 19131999, 19129938, 19131814, 19130868, 19130697, 19131810, 19129659, 19128578, 19132416], "D": [19120706, 19118022, 19122001, 19123039, 19123280, 19123177, 19124026, 19133711, 19129326, 19124900, 19124469, 19135107, 19135081, 19134986, 19134844, 19134818, 19134786, 19125750, 19126098, 19126640, 19125926, 19127387, 19126729, 19124071, 19125133, 19126884], "B": [19115236, 19122038, 19115614, 19117710, 19115812, 19115890, 19117501, 19117067, 19116748, 19116047, 19119950, 19118136, 19119352, 19135966, 19141445, 19130167], "A": [19111990, 19120635, 19112000, 19111957, 19112038, 19111973, 19115290, 19112119, 19111989, 19112683, 19113904, 19113940, 19113380, 19111958, 19112326, 19112540], "F": [19129833, 19132590, 19155674]}, "name": "D. Puzzles", "statement": "Barney lives in country USC (United States of Charzeh). USC has cities\r\nnumbered from through and roads between them. Cities and roads of USC\r\nform a rooted tree (Barney\u2019s not sure why it is rooted). Root of the\r\ntree is the city number . Thus if one will start his journey from city ,\r\nhe can visit any city he wants by following roads. Some girl has stolen\r\nBarney\u2019s heart, and Barney wants to find her. He starts looking for in\r\nthe root of the tree and (since he is Barney Stinson not a random guy),\r\nhe uses a to search in the cities. A pseudo code of this algorithm is as\r\nfollows:let starting_time be an array of length ncurrent_time = 0dfs(v):\r\ncurrent_time = current_time + 1 starting_time[v] = current_time shuffle\r\nchildren[v] randomly (each permutation with equal possibility) //\r\nchildren[v] is vector of children cities of city v for u in children[v]:\r\ndfs(u)As told before, Barney will start his journey in the root of the\r\ntree (equivalent to call ).Now Barney needs to pack a backpack and so he\r\nwants to know more about his upcoming journey: for every city , Barney\r\nwants to know the expected value of . He\u2019s a friend of Jon Snow and\r\nknows nothing, that\u2019s why he asked for your help.\r\n", "solutions": ["//wait darn\n\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n\n    int i,j,k,l;\n\n    vector<int>child[n];\n\n    for(i = 1; i < n;i++)\n    {\n        cin >> j;\n        child[j-1].push_back(i);\n    }\n\n    int distfrom[n];\n    int numchild[n];\n\n    fill_n(numchild,n,1);\n\n    vector<int>::iterator itr;\n\n    queue<int> q;\n    deque<int> dq;\n    distfrom[0]= 0;\n    q.push(0);\n    while(!q.empty())\n    {\n        i = q.front();\n        q.pop();\n        dq.push_back(i);\n\n        for(itr = child[i].begin();itr!= child[i].end();itr++)\n        {\n            distfrom[*itr] = distfrom[i]+1;\n            q.push(*itr);\n        }\n    }\n\n    float expected[n];\n\n    while(!dq.empty())\n    {\n        i = dq.back();\n        dq.pop_back();\n        for(itr = child[i].begin();itr!=child[i].end();itr++)\n        {\n            numchild[i] += numchild[*itr];\n        }\n    }\n\n    expected[0] = 1;\n\n    q.push(0);\n    float stor;\n\n    while(!q.empty())\n    {\n        i = q.front();\n        q.pop();\n        for(itr = child[i].begin();itr != child[i].end();itr++)\n        {\n            stor = numchild[i] - numchild[*itr]+1;\n            expected[*itr] = expected[i] + (stor/2);\n            q.push(*itr);\n        }\n    }\n\n    for(i = 0; i < n;i++)\n        cout << fixed << setprecision(4) << expected[i] << \" \";\n}\n\n"], "input": "", "output": "", "tags": [], "dificulty": "1700", "interactive": false}