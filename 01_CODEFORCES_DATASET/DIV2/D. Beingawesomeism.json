{
    "link": "https://codeforces.com//contest/1281/problem/D",
    "problemId": "495769",
    "problem_idx": "D",
    "shortId": "1281D",
    "contest_number": "1281",
    "problem_submissions": {
        "E": [
            66919654,
            66920588,
            66925092,
            66923975,
            66921225,
            66926039,
            66924486,
            66925911,
            66919753,
            66924443,
            66921735,
            66926640,
            66923762,
            66928689,
            66923984,
            66929347,
            66922347,
            66925800,
            66926136,
            66926785
        ],
        "D": [
            66913905,
            66912980,
            66914351,
            66914888,
            66918186,
            66917312,
            66919310,
            66913455,
            66927167,
            66918040,
            66916917,
            66918767,
            66920615,
            66919931,
            66917311,
            66920679,
            66926946,
            66921289,
            66921368,
            66915749
        ],
        "C": [
            66910411,
            66909108,
            66910083,
            66911847,
            66912648,
            66912093,
            66912420,
            66917797,
            66912812,
            66913195,
            66926185,
            66911123,
            66913114,
            66915044,
            66929796,
            66916101,
            66915614,
            66912997,
            66913346,
            66920684
        ],
        "B": [
            66903686,
            66904970,
            66904261,
            66905849,
            66904183,
            70825921,
            66906323,
            66905017,
            66906316,
            66904966,
            66910332,
            66906601,
            66907853,
            66908474,
            66905210,
            66905588,
            66906778,
            66904477,
            66905850,
            66914866,
            66908783
        ],
        "A": [
            66901264,
            66901388,
            66900754,
            66900661,
            66900790,
            70825928,
            66900330,
            66900663,
            66904497,
            66901649,
            66900680,
            66901270,
            66900668,
            66900286,
            66902138,
            66900321,
            66900528,
            66900477,
            66900340,
            66913834,
            66903613
        ],
        "F": [
            66933294,
            67581587
        ]
    },
    "name": "D. Beingawesomeism",
    "statement": "You are an all-powerful being and you have created a rectangular world.\r\nIn fact, your world is so bland that it could be represented by a r\r\ntimes c grid. Each cell on the grid represents a country. Each country\r\nhas a dominant religion. There are only two religions in your world. One\r\nof the religions is called Beingawesomeism, who do good for the sake of\r\nbeing good. The other religion is called Pushingittoofarism, who do\r\nmurders for the sake of being bad.Oh, and you are actually not really\r\nall-powerful. You just have one power, which you can use infinitely many\r\ntimes! Your power involves . When a missionary group of a certain\r\ncountry, say a, passes by another country b, they change the dominant\r\nreligion of country b to the dominant religion of country a.In\r\nparticular, a single use of your power is this: You choose a horizontal\r\n1\r\ntimes x subgrid or a vertical x\r\ntimes 1 subgrid. That value of x is up to you; You choose a direction d.\r\nIf you chose a horizontal subgrid, your choices will either be NORTH or\r\nSOUTH. If you choose a vertical subgrid, your choices will either be\r\nEAST or WEST; You choose the number s of steps; You command each country\r\nin the subgrid to send a missionary group that will travel s steps\r\ntowards direction d. In each step, they will visit (and in effect\r\nconvert the dominant religion of) all s countries they pass through, as\r\ndetailed above. The parameters x, d, s must be chosen in such a way that\r\nany of the missionary groups won\u2019t leave the grid. The following image\r\nillustrates one possible single usage of your power. Here, represents a\r\ncountry with dominant religion Beingawesomeism and represents a country\r\nwith dominant religion Pushingittoofarism. Here, we\u2019ve chosen a 1\r\ntimes 4 subgrid, the direction NORTH, and s = 2 steps. You are a being\r\nwhich believes in free will, for the most part. However, you just really\r\nwant to stop receiving murders that are attributed to your name. Hence,\r\nyou decide to use your powers and try to make Beingawesomeism the\r\ndominant religion in every country.What is the minimum number of usages\r\nof your power needed to convert everyone to Beingawesomeism?With god,\r\nnothing is impossible. But maybe you\u2019re not god? If it is impossible to\r\nmake Beingawesomeism the dominant religion in all countries, you must\r\nalso admit your mortality and say so.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int M = 1e9 + 7;\nconst int N = 1234567;\nstring s[N];\n\nint main() {\n    int t; cin >> t;\n    for (int tt = 0; tt < t; tt++) {\n        int n, m;\n        cin >> n >> m;\n        int x = 0, y = 0;\n        for (int i = 0; i < n; i++) {\n            cin >> s[i];\n            for (int j = 0; j < m; j++) {\n                if (s[i][j] == 'P') {\n                    x = 1;\n                }\n                if (s[i][j] == 'A') {\n                    y = 1;\n                }\n            }\n        }\n        if (x == 0) {\n            cout << 0 << \"\\n\";\n            continue;\n        }\n        if (y == 0) {\n            cout << \"MORTAL\\n\";\n            continue;\n        }\n        int a = 4;\n        for (int i = 0; i < n; i++) {\n            int u = -1e9, v = 1e9;\n            for (int j = 0; j < m; j++) {\n                u = max(u, (int) s[i][j]);\n                v = min(v, (int) s[i][j]);\n                if (s[i][j] == 'A') {\n                    int t = 4;\n                    if (i == 0 || i == n - 1) {\n                        t--;\n                    }\n                    if (j == 0 || j == m - 1) {\n                        t--;\n                    }\n                    a = min(a, t);\n                }\n            }\n            if (u == v && u == 'A') {\n                if (i == 0 || i == n - 1) {\n                    a = min(a, 1);\n                }\n                else {\n                    a = min(a, 2);\n                }\n            }\n        }\n        for (int j = 0; j < m; j++) {\n            int u = -1e9, v = 1e9;\n            for (int i = 0; i < n; i++) {\n                u = max(u, (int) s[i][j]);\n                v = min(v, (int) s[i][j]);\n            }\n            if (u == v && u == 'A') {\n                if (j == 0 || j == m - 1) {\n                    a = min(a, 1);\n                }\n                else {\n                    a = min(a, 2);\n                }\n            }\n        }\n        cout << a << \"\\n\";\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Beingawesomeism.json",
    "editorial_link": "https://codeforces.com//blog/entry/72212",
    "editorial": "If everything is , then it is clearly impossible (). Otherwise, you can\r\nturn everything into in at most moves, starting from any single . Thus,\r\nthe answer is between and . We can exhaust all possibilities: The answer\r\nis if: Everything is an . Otherwise, at least move is needed. The answer\r\nis if: At least one of the rows/columns is all s. Otherwise, it can be\r\nshown that at least moves are needed, because if every edge has at least\r\none , then no single move can simultaneously turn all four edges into .\r\nTo see this, note that our move must simultaneously touch all four\r\nedges. This forces us to select our initial row/column to be an entire\r\nedge row/column of the grid. But then, we are forced to have at least\r\none in our selection, and this cannot be removed in this move. The\r\nanswer is if: There is one corner that\u00e2\u0080\u0099s an because in a single move, we\r\ncan turn an edge into all s. There\u00e2\u0080\u0099s a whole column or row of s, because\r\nagain, in a single move, we can turn an edge into all s. (This case\r\ncould be tricky to spot.) Otherwise, it can be shown that at least moves\r\nare needed. This is because, if we are only allowed moves, then our\r\nfirst move must take us to a configuration where only move is needed. In\r\nother words, in a single move, we must ensure that one edge has all s.\r\nNow, suppose we have decided which edge to turn into all s. Since all\r\ncorners are s, our move must touch both corners of that edge, and so we\r\nare forced to copy an entire row/column up to that edge. But since every\r\nrow/column has a , this means that the edge will contain a after the\r\nmove, and hence, we have failed to turn that edge into all s. (We cannot\r\nalso have accidentally turned another edge into all s since the other\r\ncorners are still s.) The answer is if: There is at least one in one of\r\nthe edges, because in a single move, we can ensure that one corner\r\nbecomes an . Otherwise, it can be shown that at least moves are needed,\r\nbecause we can\u00e2\u0080\u0099t turn any corner into in a single move (because all\r\nedges are s, and only cells in edges get copied onto corners), and we\r\nalso can\u00e2\u0080\u0099t turn any row/column into all s in a single move (since that\r\nrequires copying an entire row/column onto it, but again, note that the\r\nedges are all s). The answer is if: It is not one of the cases above,\r\nsince moves are always enough.\r\n"
}