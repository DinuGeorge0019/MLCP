{"link": "https://codeforces.com//contest/495/problem/C", "problemId": "19371", "problem_idx": "C", "shortId": "495C", "contest_number": "495", "problem_submissions": {"D": [9112852, 9115986, 9117140, 9117503, 9123190, 9119753], "C": [9107534, 9109560, 9109503, 9108459, 9106667, 9110323, 9118258, 9115754, 9108222, 9112671, 9111689, 9109335, 9111765, 9108306, 9110442, 9106049], "B": [9104748, 9107046, 9106767, 9105605, 9110931, 9106856, 9105868, 9113914, 9105045, 9109777, 9108695, 9106960, 9107128, 9106063, 9106299, 9107851], "A": [9104037, 9104189, 9104218, 9111853, 9108412, 9113154, 9103998, 9107038, 9103963, 9104475, 9104127, 9105245, 9105093, 9104487, 9104429, 9110186]}, "name": "C. Treasure", "statement": "Malek has recently found a treasure map. While he was looking for a\r\ntreasure he found a locked door. There was a string written on the door\r\nconsisting of characters \u201d, \u201d and \u201d. Below there was a manual on how to\r\nopen the door. After spending a long time Malek managed to decode the\r\nmanual and found out that the goal is to replace each \u201d with one or more\r\n\u201d characters so that the final string becomes . Below there was also\r\nwritten that a string is called if for each () there are no more \u201d\r\ncharacters than \u201d characters among the first characters of and also the\r\ntotal number of \u201d characters is equal to the total number of \u201d\r\ncharacters. Help Malek open the door by telling him for each \u201d character\r\nhow many \u201d characters he must replace it with.\r\n", "solutions": ["#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#define MAXL 100010\nchar str[MAXL];\nint cnt[255],len,lasts,val[MAXL];\nint main()\n{\n    scanf(\"%s\",str),len=strlen(str);\n    for(int i=0;i<len;i++) cnt[(int)str[i]]++,lasts=(str[i]=='#'?i:lasts),val[i]=(str[i]=='('?1:-1);\n    val[lasts]=(cnt[(int)'(']-(cnt[(int)')']-1)-cnt[(int)'#']);\n    if(val[lasts]<1)\n    {\n        printf(\"-1\\n\");\n        return 0;\n    }\n    val[lasts]*=-1;\n    bool can=true;\n    for(int i=0,cur=0;i<len&&can;i++)\n    {\n        cur+=val[i];\n        if(cur<0) can=false;\n    }\n    if(!can) printf(\"-1\\n\");\n    else\n    {\n        for(int i=0;i<cnt[(int)'#']-1;i++) printf(\"1\\n\");\n        printf(\"%d\\n\",-val[lasts]);\n    }\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["greedy", "implementation"], "dificulty": "1500", "interactive": false}