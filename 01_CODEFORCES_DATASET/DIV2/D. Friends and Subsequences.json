{
    "link": "https://codeforces.com//contest/689/problem/D",
    "problemId": "64400",
    "problem_idx": "D",
    "shortId": "689D",
    "contest_number": "689",
    "problem_submissions": {
        "D": [
            18930229,
            18929436,
            18930879,
            18930235,
            18926161,
            18928733,
            18925280,
            18927418,
            18929085,
            18929212,
            18929942,
            18930645,
            18931175,
            18924428,
            18930801,
            18934009,
            18927074,
            18932083,
            18931447
        ],
        "E": [
            18927271,
            18927820,
            18923666,
            18931272,
            18929873,
            18930514,
            18922905,
            18924072,
            18931242,
            18932135,
            18931664,
            18935299,
            18933488,
            18930284,
            18935230,
            18930474,
            18929312,
            18934284,
            18932460
        ],
        "C": [
            18924941,
            18925234,
            18926474,
            18924949,
            18927430,
            18926086,
            18927497,
            18929616,
            18924880,
            18926717,
            18932481,
            18925981,
            18926886,
            18931951,
            18926746,
            18931682,
            18931981,
            18925951,
            18922736
        ],
        "B": [
            18923236,
            18923653,
            18926920,
            18923889,
            18924142,
            18923587,
            18927964,
            18931269,
            18923788,
            18925427,
            18926540,
            18924110,
            18924747,
            18932852,
            18923583,
            18924738,
            18930576,
            18923854,
            18932827
        ],
        "A": [
            18922333,
            18922086,
            18921966,
            18921847,
            18936511,
            18922920,
            18935750,
            18932978,
            18922085,
            18924781,
            18922834,
            18922553,
            18922739,
            18933881,
            18922408,
            18925800,
            18922272,
            18933705
        ]
    },
    "name": "D. Friends and Subsequences",
    "statement": "Mike and !Mike are old childhood rivals, they are opposite in everything\r\nthey do, except programming. Today they have a problem they cannot solve\r\non their own, but together (with you) who knows? Every one of them has\r\nan integer sequences and of length . Being given a query of the form of\r\npair of integers , Mike can instantly tell the value of while !Mike can\r\ninstantly tell the value of .Now suppose a robot (you!) asks them all\r\npossible different queries of pairs of integers (so he will make exactly\r\nqueries) and counts how many times their answers coincide, thus for how\r\nmany pairs is satisfied.How many occasions will the robot count?\r\n",
    "solutions": [
        "#include <cassert>\n#include <fstream>\n#include <cstring>\n#include <queue>\n#include <algorithm>\n#include <bitset>\n#include <ctime>\n#include <set>\n#include <cmath>\n#include <iomanip>\n#include <map>\n#include <stack>\n#include <vector>\n#include <bitset>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i, a, n) for (int i = a; i <= n; ++i)\n#define ROF(i, n, a) for (int i = n; i >= a; i--)\n#define FIT(i, v) for (auto &i : v)\n#define pb push_back\n#define mp make_pair\n#define mt make_touple\n#define all(x) (x).begin(), (x).end()\n#define fi first\n#define se second\n#define sz(x) ((int)(x).size())\n#define log log2\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int mod = 1000000007;\nll powmod(ll a, ll b) {ll res=1; a %= mod; assert(b >= 0); for(; b; b >>= 1) {if (b & 1) res = res * a % mod; a = a * a % mod;} return res;}\n\nconst int N = 200100;\n\nll sol;\nint a[N], b[20][N], lg[N], lef[N], rig[N], st[N], t, n, lefumic, lefuegal, rigumic, riguegal;\nint find(int st, int dr) {\n    int dif = dr - st + 1;\n    int l = lg[dif];\n    int dist = dif - (1<<l);\n    return max(b[l][st],b[l][st+dist]);\n}\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"a.in\", \"r\", stdin);\n    freopen(\"a.out\", \"w\", stdout);\n#endif\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    \n    cin >> n;\n    FOR(i,1,n) {\n        cin >> b[0][i];\n    }\n    FOR(i,1,n) {\n        cin >> a[i];\n    }\n    FOR(i,2,n) {\n        lg[i] = lg[i / 2] + 1;\n    }\n    for(int p = 1; (1<<p) <= n; ++p) {\n        FOR(j,1,n-(1<<p)+1) {\n            int l = 1<<(p-1);\n            b[p][j] = max(b[p-1][j],b[p-1][j+l]);\n        }\n    }\n    FOR(i,1,n) {\n        while (t && a[i] < a[st[t]]) {\n            rig[st[t]] = i - 1;\n            --t;\n        }\n        st[++t] = i;\n    }\n    while(t) {\n        rig[st[t]] = n;\n        --t;\n    }\n    ROF(i,n,1) {\n        while (t && a[i] <= a[st[t]]) {\n            lef[st[t]] = i + 1;\n            --t;\n        }\n        st[++t] = i;\n    }\n    while(t) {\n        lef[st[t]] = 1;\n        --t;\n    }\n    FOR(i,1,n) {\n        int st = lef[i];\n        int dr = rig[i];\n        int lefu = st;\n        int rigu = i;\n        lefumic = i + 1;\n        while (lefu <= rigu) {\n            int mij = (lefu + rigu) >> 1;\n            if (find(mij,i) < a[i]) {\n                lefumic = mij;\n                rigu = mij - 1;\n            } else {\n                lefu = mij + 1;\n            }\n        }\n        lefu = st;\n        rigu = i;\n        lefuegal = i + 1;\n        while (lefu <= rigu) {\n            int mij = (lefu + rigu) >> 1;\n            if (find(mij,i) <= a[i]) {\n                lefuegal = mij;\n                rigu = mij - 1;\n            } else {\n                lefu = mij + 1;\n            }\n        }\n        lefu = i;\n        rigu = dr;\n        rigumic = i - 1;\n        while (lefu <= rigu) {\n            int mij = (lefu + rigu) >> 1;\n            if (find(i,mij) < a[i]) {\n                rigumic = mij;\n                lefu = mij + 1;\n            } else {\n                rigu = mij - 1;\n            }\n        }\n        lefu = i;\n        rigu = dr;\n        riguegal = i - 1;\n        while (lefu <= rigu) {\n            int mij = (lefu + rigu) >> 1;\n            if (find(i,mij) <= a[i]) {\n                riguegal = mij;\n                lefu = mij + 1;\n            } else {\n                rigu = mij - 1;\n            }\n        }\n        sol += 1LL * (riguegal-rigumic) * (lefumic-lefuegal) + 1LL * (riguegal-rigumic) * (i - lefumic + 1) + 1LL * (lefumic - lefuegal) * (rigumic - i + 1);\n    }\n    cout << sol;\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Friends and Subsequences.json",
    "editorial_link": "https://codeforces.com//blog/entry/45912",
    "editorial": "First of all it is easy to see that if we fix l then have . So we can just use binary search to find the smallest index rmin and biggest index rmax that satisfy the equality and add rmax?-?rmin?+?1 to our answer. To find the min and max values on a segment [l,?r] we can use Range-Minimum Query data structure."
}