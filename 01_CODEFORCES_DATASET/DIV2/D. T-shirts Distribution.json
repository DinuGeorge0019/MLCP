{"link": "https://codeforces.com//contest/727/problem/D", "problemId": "75802", "problem_idx": "D", "shortId": "727D", "contest_number": "727", "problem_submissions": {"F": [21454299, 21463560, 21456437, 21465295, 21454474, 21458264, 21456589], "E": [21449841, 21449822, 21450904, 21453568, 21453967, 21760601, 21511825, 21511807, 21511800, 21454554, 21549212, 21460363, 21455919, 21459919], "D": [21446491, 21446004, 21446992, 21445398, 21448520, 21448519, 21447217, 21446535, 21447223, 21446711, 21448124, 21446242, 21447928, 21448652, 21448435, 21449709, 21448635, 21445975, 21450092], "C": [21445102, 21444938, 21445707, 21444476, 21446045, 21446680, 21446166, 21445050, 21443956, 21445410, 21446522, 21445734, 21446213, 21445295, 21445829, 21445999, 21444171, 21447101], "B": [21444430, 21444284, 21444596, 21443833, 21445575, 21445150, 21455506, 21444391, 21445186, 21444885, 21444164, 21445217, 21445115, 21446297, 21444840, 21445324, 21453096, 21445206], "A": [21442889, 21442869, 21443136, 21442911, 21443243, 21443224, 21443033, 21442981, 21442858, 21442965, 21442983, 21442922, 21442918, 21442957, 21443069, 21443067, 21443028, 21443089, 21442924, 21443118]}, "name": "D. T-shirts Distribution", "statement": "The organizers of a programming contest have decided to present t-shirts\r\nto participants. There are six different t-shirts sizes in this problem:\r\n, , , , , (sizes are listed in increasing order). The t-shirts are\r\nalready prepared. For each size from to you are given the number of\r\nt-shirts of this size.During the registration, the organizers asked each\r\nof the participants about the t-shirt size he wants. If a participant\r\nhesitated between two sizes, he could specify two neighboring sizes this\r\nmeans that any of these two sizes suits him.Write a program that will\r\ndetermine whether it is possible to present a t-shirt to each\r\nparticipant of the competition, or not. Of course, each participant\r\nshould get a t-shirt of proper size: the size he wanted, if he specified\r\none size; any of the two neibouring sizes, if he specified two sizes. If\r\nit is possible, the program should find any valid distribution of the\r\nt-shirts.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n\nconst int INF = (int) 1e9;\nconst ll LINF = (ll) 1e18;\nconst ld EPS = 1e-7;\n\nconst int M = 6;\nconst int N = 1e5 + 123;\n\nmap<string, int> pp;\nmap<int, string> rev;\nint n;\nstring ans[N];\nint cnt[M];\nvector<int> a[M + 1];\n\nint run() {\n    pp[\"S\"] = 0;\n    pp[\"M\"] = 1;\n    pp[\"L\"] = 2;\n    pp[\"XL\"] = 3;\n    pp[\"XXL\"] = 4;\n    pp[\"XXXL\"] = 5;\n    \n    for (auto &it : pp) {\n        rev[it.second] = it.first;\n    }\n    \n    for (int i = 0; i < M; i++) {\n        cin >> cnt[i];\n    }\n    \n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        string s;\n        cin >> s;\n        int k = (int) s.size();\n        int ind = -1;\n        \n        for (int j = 0; j < k; j++) {\n            if (s[j] == ',') {\n                ind = j;\n            }\n        }\n        \n        if (ind == -1) {\n            ans[i] = s;\n            cnt[pp[s]]--;\n        } else {\n            int id = pp[s.substr(0, ind)];\n            a[id].push_back(i);\n        }\n    }\n    \n    for (int i = 0; i < M - 1; i++) {\n        while (!a[i].empty()) {\n            int el = *a[i].rbegin();\n            a[i].pop_back();\n            \n            if (cnt[i] > 0) {\n                cnt[i]--;\n                ans[el] = rev[i];\n            } else {\n                cnt[i + 1]--;\n                ans[el] = rev[i + 1];\n            }\n        }\n    }\n    \n    bool ok = true;\n    for (int i = 0; i < M; i++) {\n        ok &= cnt[i] >= 0;\n    }\n    \n    if (!ok) {\n        cout << \"NO\\n\";\n        return 0;\n    }\n    \n    cout << \"YES\\n\";\n    for (int i = 0; i < n; i++) {\n        cout << ans[i] << \"\\n\";\n    }\n\n    return 0;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    return run();\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "flows", "greedy"], "dificulty": "1800", "interactive": false}