{
    "link": "https://codeforces.com//contest/1166/problem/B",
    "problemId": "345548",
    "problem_idx": "B",
    "shortId": "1166B",
    "contest_number": "1166",
    "problem_submissions": {
        "F": [
            54316652,
            54307224,
            54305584,
            54310646,
            54378086,
            54313232,
            54308575
        ],
        "E": [
            54298891,
            54300156,
            54304094,
            54294518,
            54300338,
            54303194,
            54301468,
            54302857,
            54297877,
            54295582,
            54302504,
            54299216,
            54297435,
            54297855,
            54304772,
            54304820,
            54295745,
            54296534
        ],
        "D": [
            54296262,
            54291838,
            54301051,
            54302058,
            54297357,
            54294897,
            54294795,
            54298322,
            54305898,
            54305908,
            54298392,
            54300155,
            54304713,
            54305703,
            54307005,
            54301062,
            54300346,
            54307391,
            54309804
        ],
        "C": [
            54289104,
            54297291,
            54291974,
            54290534,
            54287551,
            54289613,
            54287736,
            54292153,
            54290078,
            54292325,
            54290260,
            54291592,
            54291908,
            54293597,
            54292202,
            54290296,
            54292002,
            54299709,
            54289976
        ],
        "B": [
            54286717,
            54295090,
            54286733,
            54287427,
            54290240,
            54285781,
            54285576,
            54288042,
            54287483,
            54286749,
            54287663,
            54286685,
            54286479,
            54286327,
            54288426,
            54286838,
            54288503,
            54286890,
            54287732
        ],
        "A": [
            54284453,
            54292968,
            54284797,
            54284966,
            54291534,
            54284478,
            54284450,
            54284940,
            54284548,
            54284402,
            54284377,
            54284696,
            54284645,
            54284386,
            54285929,
            54284902,
            54285432,
            54284438,
            54284725
        ]
    },
    "name": "B. All the Vowels Please",
    "statement": "Tom loves vowels, and he likes long words with many vowels. His favorite\r\nwords are vowelly words. We say a word of length k is vowelly if there\r\nare positive integers n and m such that n\r\ncdot m = k and when the word is written by using n rows and m columns\r\n(the first row is filled first, then the second and so on, with each row\r\nfilled from left to right), every vowel of the English alphabet appears\r\nat least once in every row and every column.You are given an integer k\r\nand you must either print a vowelly word of length k or print -1 if no\r\nsuch word exists.In this problem the vowels of the English alphabet are\r\n”, ”, ”, ” ,”.\r\n",
    "solutions": [
        "#pragma GCC optimize(\"Ofast\")\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define y0 holdtheflower\n#define y1 enjoythecolorandscent\n#define yn walkthroughthesoulgarden\n#define j1 feelthewarmbreathofkindnessandsalvation\n\n#define endl '\\n'\nmt19937 rng32(chrono::steady_clock::now().time_since_epoch().count());\nmt19937_64 rng64(chrono::steady_clock::now().time_since_epoch().count());\n\nint k;\nstring vowel = \"aeiou\";\n\nvoid Input() {\n\tcin >> k;\n}\n\nvoid Solve() {\n\tfor (int i=5; i<=sqrt(k); i++) {\n\t\tif (k % i != 0) continue;\n\t\tint j = k / i;\n\t\tvector<vector<char>> Mat(i, vector<char>(j, 't'));\n\t\tfor (int x=0; x<i; x++) {\n\t\t\tfor (int y=0; y<j; y++) {\n\t\t\t\tMat[(x+y) % i][y] = vowel[x % 5];\n\t\t\t}\n\t\t}\n\t\tfor (int x=0; x<i; x++) {\n\t\t\tfor (int y=0; y<j; y++) {\n\t\t\t\tcout << Mat[x][y];\n\t\t\t}\n\t\t}\n\t\tcout << endl; return;\n\t}\n\tcout << \"-1\\n\";\n}\n\nint main(int argc, char* argv[]) {\n\tios_base::sync_with_stdio(0); cin.tie(NULL);\n\tInput(); Solve(); return 0;\n}\n\n/******************************************\\\n *  Thuy-Trang Tran, #Team4T's Leader     *\n *  #Team4T Primary Flagship - Salvation  *\n\\******************************************/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. All the Vowels Please.json",
    "editorial_link": "https://codeforces.com//blog/entry/67081",
    "editorial": "First, which boards could we feasibly fill with characters satisfying\r\nthat every row and column contains one vowel at least once? Well, if we\r\nhave a board with less than 5 rows, then each column contains less than\r\n5 characters, so we cannot have every vowel on each column, and we canât\r\nfill the board. Similarly, we canât fill a board with less than 5\r\ncolumns.Ok, so say now that we have a board with at least 5 rows and at\r\nleast 5 columns. Can we fill it? Yes we can! Itâs enough to fill it by\r\ndiagonals, as shown in the following picture: Now we can easily solve\r\nthe problem. If n\r\ncdot m = k, then n must divide k and m =\r\nfrac{k}{n}. So we can iterate over all possible n from 5 to k, check\r\nwhether n divides k and in that case, check whether m =\r\nfrac{k}{n} is at least 5. If this works for at least one value of n then\r\nwe can fill the n\r\ncdot m board by diagonals as shown before, and obtain our vowelly word\r\nby reading the characters row by row. If we donât find any values of n\r\nsatisfying this, then no vowelly word exists.Complexity:\r\nmathcal{O}(k).\r\n",
    "hint": []
}