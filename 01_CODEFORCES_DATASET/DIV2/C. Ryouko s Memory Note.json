{
    "link": "https://codeforces.com//contest/433/problem/C",
    "problemId": "9709",
    "problem_idx": "C",
    "shortId": "433C",
    "contest_number": "433",
    "problem_submissions": {
        "E": [
            6700632,
            6733758,
            6721505
        ],
        "D": [
            6698331,
            6698009,
            6698968,
            6697379,
            6698650,
            6715933,
            6699612,
            6703360,
            6700792,
            6700606,
            6701919
        ],
        "C": [
            6696171,
            6695700,
            6695492,
            6694565,
            6702743,
            6693994,
            6696132,
            6697796,
            6696959,
            6725755,
            6698054,
            6719018,
            6698571,
            6698075,
            6696805
        ],
        "B": [
            6692744,
            6692477,
            6692926,
            6692655,
            6692933,
            6693014,
            6695266,
            6693808,
            6692887,
            6694570,
            6693057,
            6692308,
            6692432,
            6694603,
            6691962,
            6693854,
            6694164,
            6696914
        ],
        "A": [
            6691799,
            6691577,
            6691561,
            6691897,
            6692330,
            6691645,
            6695737,
            6691837,
            6691733,
            6692882,
            6691808,
            6691593,
            6691467,
            6692751,
            6692230,
            6692129,
            6691816
        ]
    },
    "name": "C. Ryouko s Memory Note",
    "statement": "Ryouko is an extremely forgetful girl, she could even forget something\r\nthat has just happened. So in order to remember, she takes a notebook\r\nwith her, called . She writes what she sees and what she hears on the\r\nnotebook, and the notebook became her memory.Though Ryouko is forgetful,\r\nshe is also born with superb analyzing abilities. However, analyzing\r\ndepends greatly on gathered information, in other words, memory. So she\r\nhas to shuffle through her notebook whenever she needs to analyze, which\r\nis tough work.Ryouko\u2019s notebook consists of pages, numbered from 1 to .\r\nTo make life (and this problem) easier, we consider that to turn from\r\npage to page , pages should be turned. During analyzing, Ryouko needs\r\npieces of information, the -th piece of information is on page .\r\nInformation must be read from the notebook in order, so the total number\r\nof pages that Ryouko needs to turn is .Ryouko wants to decrease the\r\nnumber of pages that need to be turned. In order to achieve this, she\r\ncan merge two pages of her notebook. If Ryouko merges page to page , she\r\nwould copy all the information on page to , and consequently, all\r\nelements in sequence that was would become . Note that can be equal to ,\r\nin which case no changes take place.Please tell Ryouko the minimum\r\nnumber of pages that she needs to turn. Note she can apply the described\r\noperation at most once before the reading. Note that the answer can\r\nexceed 32-bit integers.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\n#define LLF \"%I64d\"\n\nconst int MAX_SIZE = 100000;\n\nvector<int> s[MAX_SIZE + 10];\nint n, seq[MAX_SIZE + 10];\nint m;\n\ninline int abs(int a) { return a < 0 ? -a : a; }\n\nint main(){\n\tscanf(\"%d%d\", &m, &n);\n\tfor(int i = 0; i < n; i ++)\n\t\tscanf(\"%d\", seq + i);\n\tn = unique(seq, seq + n) - seq;\n\tLL ans = 0;\n\tfor(int i = 1; i < n; i ++){\n\t\ts[seq[i - 1]].push_back(seq[i]);\n\t\ts[seq[i]].push_back(seq[i - 1]);\n\t\tans += abs(seq[i] - seq[i - 1]);\n\t}\n\tfor(int i = 1; i <= m; i ++)\n\t\tsort(s[i].begin(), s[i].end());\n\tLL maxn = 0;\n\tfor(int i = 1; i <= m; i ++){\n\t\tLL tot = 0;\n\t\tint siz = s[i].size();\n\t\tif(siz == 0)\n\t\t\tcontinue;\n\t\tint mid = siz / 2;\n\t\tfor(int j = 0; j < mid; j ++)\n\t\t\ttot += s[i][j];\n\t\ttot = (LL)mid * s[i][mid] - tot;\n\t\tfor(int j = mid; j < siz; j ++)\n\t\t\ttot += s[i][j];\n\t\ttot -= (LL)(siz - mid) * s[i][mid];\n\t\tLL o = 0;\n\t\tfor(int j = 0; j < siz; j ++)\n\t\t\to += abs(i - s[i][j]);\n\t\ttot = o - tot;\n\t\tif(tot > maxn)\n\t\t\tmaxn = tot;\n\t}\n\tprintf(LLF \"\\n\", ans - maxn);\n\n\treturn 0;\n}\n\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math",
        "sortings"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Ryouko s Memory Note.json",
    "editorial_link": "https://codeforces.com//blog/entry/12397",
    "editorial": "Suppose we\u00e2\u0080\u0099re merging page to page . Obviously page should be an element\r\nof sequence , otherwise merging would have no effect. Enumerate all\r\npossible values of , and denote sequence as the elements of that are\r\nadjacent to an element with value . If one element is adjacent to two\r\nelements with value , it should appear twice in . However, if one\r\nelement itself is , it should not appear in . For example, suppose we\r\nhave , then sequence for would be , where the 6-th element appears\r\ntwice. Problem remains for finding a optimum value for . Let be the\r\nlength of sequence . When merging to , the change in answer would be We\r\nonly care about the left part, as the right part has nothing to do with\r\n. We can change our problem to the following: This is, however, a\r\nclassic problem. We have the following conclusion: Proof: Consider the\r\ncase where is odd. Proof is similar for cases where is even. We choose\r\nan arbitary number as . Suppose there are numbers on the left of , and\r\nnumbers on the right of . If is the median, then , so what we\u00e2\u0080\u0099re going\r\nto prove is that optimal answer cannot be achieved when . Suppose ,\r\nconsider what would happen to the answer if we add to (Here we assume\r\nthat adding to does not affect the values of and ). The distance between\r\nand all the numbers on the right would decrease by , while the distance\r\nbetween and all numbers on the left would increase by . So the answer\r\nwould decrease by , which is a positive value, since . So would keep\r\nincreasing until , when optimal answer can be achieved. Thus is the\r\nmedian of the numbers. This brings us to our solution. Simply sort\r\nsequence and find its median, then calculate the answer. The final\r\nanswer would be the optimal one from all possible values of . The\r\ncomplexity is , as the sum of the length of all sequences does not\r\nexceed . About the pretests: Pretests for this problem are deliberately\r\nmade weak, in order to make hacking more fun. None of the pretests\r\ncontains adjacent numbers with the same value. Solution: 6712939,\r\n6713018\r\n"
}