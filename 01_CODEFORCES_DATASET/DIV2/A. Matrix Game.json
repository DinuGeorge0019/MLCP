{
    "link": "https://codeforces.com//contest/1365/problem/A",
    "problemId": "643136",
    "problem_idx": "A",
    "shortId": "1365A",
    "contest_number": "1365",
    "problem_submissions": {
        "G": [
            82837838,
            82865836,
            82846144,
            82865744,
            83288423,
            83288390,
            83115367,
            83113068,
            82891046,
            83317408
        ],
        "F": [
            82823576,
            82831163,
            82869715,
            82841291,
            82797913,
            82821383,
            82823224,
            82820878,
            82825962,
            82827764,
            82819318,
            82822994,
            82828397,
            82835003,
            82834772,
            82828790,
            83116114,
            82838680,
            82843357,
            82850042
        ],
        "E": [
            82816827,
            82806889,
            82828546,
            82852781,
            82820451,
            82809338,
            82811048,
            82815094,
            82813767,
            82818099,
            82819025,
            82806699,
            82809270,
            82814661,
            82803838,
            82820792,
            82820031,
            82816700,
            82817857,
            82816698
        ],
        "D": [
            82812948,
            82823500,
            82822183,
            82824676,
            82812570,
            82806668,
            82804333,
            82805751,
            82808225,
            82811038,
            82801401,
            82805193,
            82808495,
            82818445,
            82814370,
            83282843,
            82816083,
            82808400,
            82807406,
            82806087
        ],
        "C": [
            82796097,
            82796764,
            82804011,
            82805788,
            82786984,
            82796314,
            82793579,
            82793092,
            82796581,
            82800342,
            82827239,
            82793084,
            82792671,
            82807140,
            82802231,
            82801070,
            82793918,
            82793032,
            82794670
        ],
        "B": [
            82789379,
            82791264,
            82799267,
            82793610,
            82787860,
            82790701,
            82790486,
            82792963,
            82793820,
            82794046,
            82787508,
            82790351,
            82789454,
            82795420,
            82796086,
            83567414,
            83567289,
            83567233,
            83566819,
            83566572,
            83566088,
            83137777,
            83136749,
            83136555,
            82797438,
            82788975,
            82789229,
            82789419
        ],
        "A": [
            82787406,
            82788164,
            82795856,
            82788300,
            82789945,
            82787354,
            82787533,
            82792868,
            82790605,
            82788592,
            83313475,
            82823189,
            82788613,
            82787440,
            82788379,
            82788620,
            82787269,
            82787662,
            82787203,
            82787209
        ]
    },
    "name": "A. Matrix Game",
    "statement": "Ashish and Vivek play a game on a matrix consisting of n rows and m\r\ncolumns, where they take turns claiming cells. Unclaimed cells are\r\nrepresented by 0, while claimed cells are represented by 1. The initial\r\nstate of the matrix is given. There can be some claimed cells in the\r\ninitial state.In each turn, a player must claim a cell. A cell may be\r\nclaimed if it is unclaimed and does not share a row or column with any\r\nother already claimed cells. When a player is unable to make a move, he\r\nloses and the game ends.If Ashish and Vivek take turns to move and\r\nAshish goes first, determine the winner of the game if both of them are\r\nplaying optimally.Optimal play between two players means that both\r\nplayers choose the best possible strategy to achieve the best possible\r\noutcome for themselves.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tint t;\n\tscanf(\"%d\" ,&t);\n\twhile(t--){\n\t\tint n, m;\n\t\tscanf(\"%d%d\", &n, &m);\n\t\tvector <vector <bool> > b(n, vector <bool> (m));\n\t\tfor(int i = 0;i < n;i ++){\n\t\t\tfor(int j = 0;j < m;j ++){\n\t\t\t\tint a;\n\t\t\t\tscanf(\"%d\", &a);\n\t\t\t\tb[i][j]=(a==1);\n\t\t\t}\n\t\t}\n\t\tvector <int> freen(n, 1), freem(m, 1);\n\t\tfor(int i = 0;i < n;i ++){\n\t\t\tfor(int j = 0;j < m;j ++){\n\t\t\t\tif(b[i][j]){\n\t\t\t\t\tfreen[i]=0;\n\t\t\t\t\tfreem[j]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf((min(count(freen.begin(), freen.end(), 1), count(freem.begin(), freem.end(), 1))&1)==0?\"Vivek\\n\":\"Ashish\\n\");\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "greedy",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Matrix Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/78504",
    "editorial": "Vivek and Ashish can never claim cells in rows and columns which already\r\nhave at least one cell claimed. So we need to look at the parity of\r\nminimum of the number of rows and columns which have no cells claimed\r\ninitially.Let be the number of rows which do not have any cell claimed\r\nin them initially and similarly be the number of columns which do not\r\nhave any cell claimed initially. Each time a player makes a move both\r\nand decrease by , since they only claim cells in rows and columns with\r\nno claimed cells. If either one of or becomes , the player whose turn\r\ncomes next loses the game. Since both and decrease by after each move,\r\nbecomes first. So, if is odd, Ashish wins the game otherwise Vivek\r\nwins.Time complexity:\r\n"
}