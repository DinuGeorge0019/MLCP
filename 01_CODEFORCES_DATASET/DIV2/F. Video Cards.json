{
    "link": "https://codeforces.com//contest/731/problem/F",
    "problemId": "75977",
    "problem_idx": "F",
    "shortId": "731F",
    "contest_number": "731",
    "problem_submissions": {
        "D": [
            21507606,
            21485910,
            21487254,
            21484498,
            21488003,
            21486730,
            21490784,
            21494206,
            21481068,
            21511124,
            21485685,
            21489121,
            21487100,
            21568091,
            21513297,
            21513265,
            21483698
        ],
        "E": [
            21487370,
            21488491,
            21489109,
            21490173,
            21490282,
            21488124,
            21478759,
            21486709,
            21482192,
            21497395,
            21489450,
            21493635,
            21484776,
            21490615,
            21489533,
            21487823,
            21492190,
            21499034,
            21490743
        ],
        "F": [
            21481835,
            21483503,
            21486528,
            21484079,
            21487817,
            21483187,
            21479838,
            21481840,
            21482733,
            21486882,
            21483028,
            21483988,
            21482409,
            21480968,
            21488944,
            21485189,
            21488476,
            21484669,
            21488070,
            21486545
        ],
        "C": [
            21479362,
            21481971,
            21480987,
            21481503,
            21479989,
            21477543,
            21482718,
            21479909,
            21477810,
            21485166,
            21479533,
            21479880,
            21478958,
            21488181,
            21481556,
            21481473,
            21477970,
            21479493,
            21480708,
            21481119
        ],
        "B": [
            21476870,
            21479930,
            21477574,
            21478962,
            21478647,
            21492414,
            21481417,
            21477633,
            21476489,
            21481747,
            21477815,
            21481505,
            21485057,
            21489403,
            67074526,
            21478744,
            21480726,
            21477230,
            21478732,
            21478885
        ],
        "A": [
            21476108,
            21478310,
            21476242,
            21476318,
            21476790,
            21479331,
            21480393,
            21476522,
            21475966,
            21478021,
            21476661,
            21476151,
            21475986,
            21490293,
            21476656,
            21477731,
            21478515,
            21476049,
            21476561,
            21476353
        ]
    },
    "name": "F. Video Cards",
    "statement": "Little Vlad is fond of popular computer game Bota-2. Recently, the\r\ndevelopers announced the new add-on named Bota-3. Of course, Vlad\r\nimmediately bought only to find out his computer is too old for the new\r\ngame and needs to be updated.There are video cards in the shop, the\r\npower of the -th video card is equal to integer value . As Vlad wants to\r\nbe sure the new game will work he wants to buy not one, but several\r\nvideo cards and unite their powers using the cutting-edge technology. To\r\nuse this technology one of the cards is chosen as the leading one and\r\nother video cards are attached to it as secondary. For this new\r\ntechnology to work it’s required that the power of each of the secondary\r\nvideo cards is divisible by the power of the leading video card. In\r\norder to achieve that the power of any secondary video card can be\r\nreduced to any integer value less or equal than the current power.\r\nHowever, the power of the leading video card should remain unchanged,\r\ni.e. it be reduced.Vlad has an infinite amount of money so he can buy\r\nany set of video cards. Help him determine which video cards he should\r\nbuy such that after picking the leading video card and may be reducing\r\nsome powers of others to make them work together he will get the maximum\r\ntotal value of video power.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\nconst double pi=acos(-1.0);\nconst double eps=1e-9;\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define re return\n#define vi vector <int> \n#define pii pair <int,int>\n#define pll pair <long long , long long>\ntypedef long long ll;\n\nconst int N=(int)2e5+5;\nll n,a[N],ans;\n\nint bs(int l,int r,int val)\n{\n\tif(l==r) return l;\n\tif(r==l+1)\n\t\tif(a[l]>=val)return l; else return r;\n\tint m=(r+l)/2;\n\tif(a[m]>=val) return bs(l,m,val);else return bs(m,r,val);\n}\nint main()\n{\n\tios:: sync_with_stdio(false);\n\tcin >> n;\n\tfor(int i=0;i<n;i++)\n\t\tcin >> a[i];\n\tsort(a,a+n);\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tll curans=0;\n\t\tif(i!=0&&a[i]==a[i-1])continue;\n\t\tfor(int val=a[i];val<=300000;val+=a[i])\n\t\t{\n\t\t\tif(a[n-1]<val)break;\n\t\t\tcurans+=(n-bs(0,n-1,val))*a[i];\n\t\t}\n\t\tans=max(ans,curans);\n\t}\n\tcout << ans;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "implementation",
        "math",
        "number theory"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Video Cards.json",
    "editorial_link": "https://codeforces.com//blog/entry/47840",
    "editorial": "Problem author: olympiad jury, developer: vintage_Vlad_Makeev First\r\nobservation is that if we fix the leading video card power , we may take\r\nall the video cards of power at least , as each of them brings the\r\npositive power value. So, we may sort all the cards in the ascending\r\npower order and then we will always choose some suffix of cards in such\r\nan order. The final total power equals to . Note that under the\r\nsummation there is a number that is divisible by and that is no larger\r\nthan at the same time. It means that there are no more than different\r\nterms in this sum. Letâs calculate the value of a sum spending the\r\noperations proportional to the number of different terms in it. To do it\r\nwe need to find out for each of the values , , , ..., how many video\r\ncards will have exactly such power at the end. Itâs easy: final power\r\ncorresponds to those video cards, which originally had the power between\r\nand . Their number can be found out in if we build an array storing the\r\nnumber of video cards of each power and calculate prefix sums on it. It\r\nmeans that we got a solution that performs about operations. Itâs useful\r\nto know that the sum inside brackets is called a harmonic series, and\r\nthat its sum is very close to the natural logarithm of the number of\r\nterms (up to a constant factor in limit). It means that we got a\r\nsolution in complexity of where is the maximum power of a single video\r\ncard. Question: One may try to submit a solution assuming that the\r\noptimum power is always one of the first, letâs say, unique video cards\r\nin an ascending power order. How to build a test where the optimum power\r\nlies between 1/4 and 3/4 of a sorted power list, i. e. a counter-test\r\nfor such a solution?\r\n",
    "hint": []
}