{"link": "https://codeforces.com//contest/1496/problem/F", "problemId": "920585", "problem_idx": "F", "shortId": "1496F", "contest_number": "1496", "problem_submissions": {"F": [109600097, 109581929, 109701845, 109708534], "E": [109587933, 109610222, 109608454, 109612058, 109612949, 109605701, 109611256, 109601895, 109607479, 109590869, 109581873, 109617376, 109612836, 109603776, 109607771, 109615091, 109621693, 109607007, 109612110], "D": [109574269, 109586906, 109615783, 109591994, 109595781, 109595004, 109597342, 109595134, 109597199, 109607603, 109613355, 109601453, 109603848, 109608996, 109594798, 109603592, 109595206, 109599096, 109606151], "C": [109563290, 109569588, 109622116, 109569355, 109568236, 109577979, 109569127, 109575607, 109576268, 109595113, 109564920, 109572405, 109579560, 109574270, 109579379, 109566209, 109579522, 109590691, 109576003], "B": [109560788, 109561989, 109564644, 109562884, 109568206, 109558921, 109564927, 109564756, 109563955, 109591099, 109565717, 109571876, 109565751, 109575174, 110006204, 109577208, 109569275, 109582678, 109569576], "A": [109557542, 109557346, 109557850, 109557700, 109558786, 109562504, 109557384, 109557861, 109558109, 109557501, 109558770, 109559819, 109560297, 109564819, 110006201, 109569370, 109558966, 109557973, 109559619]}, "name": "F. BFS Trees", "statement": "We define a spanning tree of a graph to be a BFS tree vertex s if and\r\nonly if for every node t the shortest distance between s and t in the\r\ngraph is equal to the shortest distance between s and t in the spanning\r\ntree. Given a graph, we define f(x,y) to be the number of spanning trees\r\nof that graph that are BFS trees rooted at vertices x and y at the same\r\ntime.You are given an undirected connected graph with n vertices and m\r\nedges. Calculate f(i,j) for all i, j by modulo 998\r\n,244\r\n,353.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=405,M=998244353;\nvector<int> v[N],g[N][N];\nint dis[N][N],f[N][N],ans[N][N],g1[N],g2[N],inv[N],n,m,x,y,cnt[N];\nqueue<int> q;\nvoid bfs(int x){\n\tq.push(x);\n\tdis[x][x]=0;\n\tint tot;\n\tf[x][tot=1]=x;\n\twhile (!q.empty()){\n\t\tint y=q.front();q.pop();\n\t\tfor (int i:v[y])\n\t\t\tif (dis[x][i]==-1){\n\t\t\t\tdis[x][i]=dis[x][y]+1;\n\t\t\t\tq.push(i);\n\t\t\t\tf[x][++tot]=i;\n\t\t\t}\n\t}\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j:v[i])\n\t\t\tif (dis[x][j]==dis[x][i]+1)\n\t\t\t\tg[x][j].push_back(i);\n}\ninline int ksm(int x,int y){\n\tint ans=1;\n\tfor (;y;y>>=1,x=(ll)x*x%M)\n\t\tif (y&1)ans=(ll)ans*x%M;\n\treturn ans;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tmemset(dis,-1,sizeof dis);\n\twhile (m--){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tv[x].push_back(y);\n\t\tv[y].push_back(x);\n\t}\n\tfor (int i=1;i<=n;i++)bfs(i);\n\tfor (int i=1;i<=n;i++)inv[i]=ksm(i,M-2);\n\tinv[0]=1;\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=n;j++)sort(g[i][j].begin(),g[i][j].end());\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=i;j<=n;j++){\n\t\t\tmemset(cnt,0,sizeof cnt);\n\t\t\tfor (int k=1;k<=n;k++){\n\t\t\t\tfor (int x1=0,x2=0;x1<(int)g[i][k].size();x1++){\n\t\t\t\t\twhile (x2<(int)g[j][k].size()&&g[j][k][x2]<g[i][k][x1])x2++;\n\t\t\t\t\tif (x2<(int)g[j][k].size()&&g[j][k][x2]==g[i][k][x1])cnt[k]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemset(g1,0,sizeof g1);\n\t\t\tmemset(g2,0,sizeof g2);\n\t\t\tint num=0,sum=1;\n\t\t\tfor (int k=1;k<=n;k++)\n\t\t\t\tif (cnt[k]==0)num++;\n\t\t\t\telse sum=(ll)sum*cnt[k]%M;\n\t\t\tg1[i]=1;g2[i]=1;\n\t\t\tfor (int k=1;k<n;k++){\n\t\t\t\tfor (int l:v[f[i][k]])if (dis[i][f[i][k]]+1==dis[i][l]){\n\t\t\t\t\tif (g2[f[i][k]]+(!cnt[l])>g2[l])g2[l]=g2[f[i][k]]+(!cnt[l]),g1[l]=0;\n\t\t\t\t\tif (g2[f[i][k]]+(!cnt[l])==g2[l])g1[l]=(g1[l]+inv[cnt[l]]*g1[f[i][k]])%M;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (g2[j]!=num)ans[i][j]=ans[j][i]=0;\n\t\t\telse ans[i][j]=ans[j][i]=(ll)g1[j]*sum%M;\n\t\t}\n\tfor (int i=1;i<=n;i++){\n\t\tfor (int j=1;j<=n;j++)printf(\"%d \",ans[i][j]);\n\t\tputs(\"\");\n\t}\n}\n"], "input": "", "output": "", "tags": ["dfs and similar", "graphs", "math", "shortest paths"], "dificulty": "2600", "interactive": false}