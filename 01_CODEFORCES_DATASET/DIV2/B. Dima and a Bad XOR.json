{
    "link": "https://codeforces.com//contest/1151/problem/B",
    "problemId": "332193",
    "problem_idx": "B",
    "shortId": "1151B",
    "contest_number": "1151",
    "problem_submissions": {
        "F": [
            52969000,
            52974140,
            52969772,
            52975022,
            52980263,
            52981542,
            52980056,
            52974325,
            52978664,
            52982169,
            52980243,
            52979375,
            52980809,
            52981384,
            52980660,
            52981146,
            52979191,
            52982382,
            52981761
        ],
        "A": [
            52964993,
            52960645,
            52960514,
            52960890,
            52960841,
            52960632,
            52960463,
            52975864,
            52961198,
            52962194,
            52961267,
            52961719,
            52960783,
            52960868,
            52960424,
            52960539,
            52961494,
            52961722
        ],
        "E": [
            52963816,
            52970148,
            52978614,
            52970380,
            52972910,
            52970321,
            52971212,
            52978379,
            52974086,
            52973219,
            52974283,
            52974208,
            52973176,
            52975431,
            52974891,
            52976518,
            52981339,
            52975757,
            52977016
        ],
        "C": [
            52962801,
            52967207,
            52977404,
            52967321,
            52965669,
            52965751,
            52967555,
            52965997,
            52969606,
            52970311,
            52971192,
            52970462,
            52971754,
            52968773,
            52969400,
            52967031,
            52972316,
            52975151
        ],
        "D": [
            52961052,
            52964041,
            52961092,
            52964482,
            52967362,
            52967568,
            52969636,
            52967779,
            52971526,
            52966600,
            52966264,
            52971704,
            52969026,
            52970628,
            52970281,
            52971940,
            52968559,
            52968478,
            52966194
        ],
        "B": [
            52960445,
            52962771,
            52963029,
            52967763,
            52962536,
            52962803,
            52962295,
            52961661,
            52965340,
            52964038,
            52963820,
            52964825,
            52967747,
            52963985,
            52966098,
            52966081,
            52962870,
            52965786,
            52964689
        ]
    },
    "name": "B. Dima and a Bad XOR",
    "statement": "Student Dima from Kremland has a matrix a of size n\r\ntimes m filled with non-negative integers.He wants to select exactly one\r\ninteger from each row of the matrix so that the of the selected integers\r\nis strictly greater than zero. Help him!Formally, he wants to choose an\r\nintegers sequence c_1, c_2,\r\nldots, c_n (1\r\nleq c_j\r\nleq m) so that the inequality a_{1, c_1}\r\noplus a_{2, c_2}\r\noplus\r\nldots\r\noplus a_{n, c_n} > 0 holds, where a_{i, j} is the matrix element from\r\nthe i-th row and the j-th column.Here x\r\noplus y denotes the bitwise XOR operation of integers x and y.\r\n",
    "solutions": [
        "#include <vector>\n#include <iostream>\nusing namespace std;\nint main() {\n\tcin.tie(0);\n\tios_base::sync_with_stdio(false);\n\tint H, W;\n\tcin >> H >> W;\n\tvector<vector<int> > A(H, vector<int>(W));\n\tint cur = 0;\n\tfor (int i = 0; i < H; ++i) {\n\t\tfor (int j = 0; j < W; ++j) {\n\t\t\tcin >> A[i][j];\n\t\t}\n\t\tcur ^= A[i][0];\n\t}\n\tint px = -1, py = -1;\n\tfor (int i = 0; i < H && px == -1; ++i) {\n\t\tfor (int j = 0; j < W; ++j) {\n\t\t\tint nxt = cur ^ A[i][0] ^ A[i][j];\n\t\t\tif (nxt > 0) {\n\t\t\t\tpx = i, py = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (px >= 0 && py >= 0) {\n\t\tcout << \"TAK\" << endl;\n\t\tfor (int i = 0; i < H; ++i) {\n\t\t\tif (i) cout << ' ';\n\t\t\tcout << (i == px ? py + 1 : 1);\n\t\t}\n\t\tcout << endl;\n\t}\n\telse {\n\t\tcout << \"NIE\" << endl;\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "constructive algorithms",
        "dp"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Dima and a Bad XOR.json",
    "editorial_link": "https://codeforces.com//blog/entry/66602",
    "editorial": "Let\u00e2\u0080\u0099s take the first number in each array.Then, if we have current XOR\r\nstrictly greater than zero we can output an answer.And if there is some\r\narray, such that it contains at least two distinct numbers, you can\r\nchange the first number in this array to number, that differs from it,\r\nand get XOR .Else, each array consists of the same numbers, so all\r\npossible XORs are equal to , and there is no answer.Complexity is .\r\n"
}