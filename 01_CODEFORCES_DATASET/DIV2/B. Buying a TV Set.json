{
    "link": "https://codeforces.com//contest/1041/problem/B",
    "problemId": "220440",
    "problem_idx": "B",
    "shortId": "1041B",
    "contest_number": "1041",
    "problem_submissions": {
        "F": [
            42937145,
            42936460,
            42941789,
            42939791,
            42936055,
            42943259,
            42941945,
            42942600,
            42940476,
            42943214,
            42942904,
            42941561,
            42940422,
            42942676,
            42967085,
            42945698,
            42942819,
            42940517,
            42945082
        ],
        "E": [
            42931045,
            42932542,
            42929311,
            42932587,
            42939274,
            42934189,
            42934028,
            42935828,
            42936456,
            42936222,
            42934576,
            42934053,
            42934830,
            42936131,
            42933423,
            42935645,
            42936145,
            42934904
        ],
        "D": [
            42928058,
            42928419,
            42932086,
            42926606,
            42928328,
            42929346,
            42929592,
            42930860,
            42930895,
            42928722,
            42931546,
            42929735,
            42930750,
            42931175,
            42929657,
            42930694,
            42932165,
            42929565
        ],
        "C": [
            42924598,
            42925979,
            42923335,
            42923874,
            42924882,
            42924328,
            42925322,
            42926206,
            42927308,
            42925269,
            42926071,
            42925958,
            42929148,
            42926562,
            42925843,
            42927423,
            42929003,
            42925656
        ],
        "B": [
            42919830,
            42920297,
            42919741,
            42920667,
            42921333,
            42921057,
            42919493,
            42920331,
            42920664,
            42920599,
            42920862,
            42919750,
            42921237,
            42921905,
            42921366,
            42922548,
            42922190,
            42921585
        ],
        "A": [
            42918068,
            42918894,
            42917952,
            42918346,
            42918563,
            42921193,
            42918207,
            42918103,
            42917969,
            42918179,
            42919024,
            42917972,
            42919232,
            42918320,
            42918302,
            42919340,
            42918232,
            42918340
        ]
    },
    "name": "B. Buying a TV Set",
    "statement": "Monocarp has decided to buy a new TV set and hang it on the wall in his\r\nflat. The wall has enough free space so Monocarp can buy a TV set with\r\nscreen width not greater than a and screen height not greater than b.\r\nMonocarp is also used to TV sets with a certain aspect ratio: formally,\r\nif the width of the screen is w, and the height of the screen is h, then\r\nthe following condition should be met:\r\nfrac{w}{h} =\r\nfrac{x}{y}.There are many different TV sets in the shop. Monocarp is\r\nsure that for any pair of w and h there is a TV set with screen width w\r\nand height h in the shop.Monocarp isn’t ready to choose the exact TV set\r\nhe is going to buy. Firstly he wants to determine the optimal screen\r\nresolution. He has decided to try all possible variants of screen size.\r\nBut he must count the number of pairs of w and h, beforehand, such that\r\n(w\r\nle a), (h\r\nle b) and (\r\nfrac{w}{h} =\r\nfrac{x}{y}).In other words, Monocarp wants to determine the number of TV\r\nsets having aspect ratio\r\nfrac{x}{y}, screen width not exceeding a, and screen height not\r\nexceeding b. Two TV sets are considered different if they have different\r\nscreen width or different screen height.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nint a[100009];\nmain(){\n    long long a, b, x, y;\n    cin >> a >> b >> x >> y;\n    long long d = __gcd(x, y);\n\n    x /= d;\n    y /= d;\n    cout << min(a/x, b/y) << endl;\n    //x <= a/k\n    //ky <= b\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Buying a TV Set.json",
    "editorial_link": "https://codeforces.com/blog/entry/61876",
    "editorial": "Firstly letâs make and coprime. To do so, we calculate and then divide\r\nboth numbers by .Then the pair is included in the answer if the\r\nfollowing conditions are met: , , and there exists some positive integer\r\nsuch that and . Furthermore, each such pair is uniquely determined by\r\nthis integer . So we can reduce our task to counting the number of\r\npositive integers such that and , and that is just .\r\n",
    "hint": []
}