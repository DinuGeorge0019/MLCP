{
    "link": "https://codeforces.com//contest/872/problem/E",
    "problemId": "128435",
    "problem_idx": "E",
    "shortId": "872E",
    "contest_number": "872",
    "problem_submissions": {
        "D": [
            31357405,
            31351452,
            31343107,
            31351195,
            31348275,
            31358936,
            31353320,
            31359729,
            31384542,
            31354719,
            31362020,
            31359730,
            31362352,
            31351225,
            31351202,
            31354247,
            31354449,
            31352162,
            31359781
        ],
        "E": [
            31353643,
            31348128,
            31351224,
            31359199,
            31354447,
            31355467,
            31348071,
            31351923,
            31353128,
            31362654,
            31354891,
            31382199
        ],
        "C": [
            31342341,
            31341124,
            31342335,
            31339634,
            31341933,
            31341621,
            31341040,
            31345564,
            31340156,
            31342837,
            31339872,
            31339992,
            31338872,
            31343484,
            31340713,
            31344350,
            31343999,
            31340760,
            31346573,
            31343301
        ],
        "B": [
            31339933,
            31344337,
            31346424,
            31335779,
            31338069,
            31340584,
            31337590,
            31339591,
            31336576,
            31337750,
            31336433,
            31336155,
            31344259,
            31336906,
            31343230,
            31338477,
            31343380,
            31338480,
            31339600,
            31336704
        ],
        "A": [
            31337113,
            31334461,
            31338251,
            31333648,
            31354746,
            31334723,
            31335437,
            31336234,
            31333965,
            31339158,
            31333483,
            31334206,
            31334052,
            31333255,
            31341935,
            31334681,
            31333872,
            31333828,
            31335202,
            31334321
        ]
    },
    "name": "E. Points, Lines and Ready-made Titles",
    "statement": "You are given distinct points on a plane with integral coordinates. For\r\neach point you can either draw a vertical line through it, draw a\r\nhorizontal line through it, or do nothing.You consider several\r\ncoinciding straight lines as a single one. How many distinct pictures\r\nyou can get? Print the answer modulo .\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define N 200100\nusing namespace std;\nconst int MOD=1e9+7;\ntypedef pair<int,int> pii;\nmap<pii,int> s;\npii nu[N];\nint n,len,v,tmp=1;\nint a[N],b[N];\nint vis[N],beg[N];\nint to[N<<1],nex[N<<1];\nint f;\ninline void Add(int a,int b){\n\tnex[++len]=beg[a],beg[a]=len,to[len]=b;\n\tnex[++len]=beg[b],beg[b]=len,to[len]=a;\n}\nint dfs(int p,int fa){\n\tvis[p]=1;\n\tint ans=1;\n\tfor(int i=beg[p];i;i=nex[i]){\n\t\tif(to[i]==fa) continue;\n\t\tif(vis[to[i]]){\n\t\t\tf=0;\n\t\t\tcontinue;\n\t\t}\n\t\tans+=dfs(to[i],p);\n\t}\n\treturn ans;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d%d\",&a[i],&b[i]);\n\t\tnu[len++]=pii(a[i],0);\n\t\tnu[len++]=pii(b[i],1);\n\t}\n\tsort(nu,nu+len);\n\tint tmp=1;\n\ts[nu[0]]=1;\n\tfor(int i=1;i<len;i++){\n\t\tif(nu[i]!=nu[i-1]) tmp++;\n\t\ts[nu[i]]=tmp;\n\t}\n\tfor(int i=0;i<n;i++){\n\t\tint l=s[pii(a[i],0)],r=s[pii(b[i],1)];\n\t\tif(l!=r) Add(l,r);\n\t}\n\tlong long ans=1;\n\tfor(int i=1;i<=tmp;i++){\n\t\tif(vis[i]) continue;\n\t\tf=1;\n\t\tint sz=dfs(i,0),bas=1;\n\t\twhile(sz--) bas=bas*2%MOD;\n\t\tbas=(bas-f+MOD)%MOD;\n\t\tans=ans*bas%MOD;\n\t}\n\tprintf(\"%I64d\",ans);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Points, Lines and Ready-made Titles.json",
    "editorial_link": "https://codeforces.com//blog/entry/55200",
    "editorial": "Let's build graph on points. Add edge from point to left, right, top and bottom neighbours (if such neigbour exist). Note that we can solve problem independently for each connected component and then print product of answer for components. So we can consider only connected graphs without loss of generality.\n\nLet's define X as number of different x-coords, Y as number of different y-coords.\n\nWhat if graph contains some cycle? Let's consider this cycle without immediate vertices (vertices that lie on the same line with previous and next vertices of cycle). Draw a line from each such vertex to the next vertex of cycle (and from last to the first). We got all lines that are corresponding to x-coords and y-coords of vertices of cycle. Let's prove by induction that we can got all such lines from the whole graph\n\nRun depth-first search from vertices of cycle. Let we enter in some vertex that is not from cycle. It mush have at least one visited neighbour. By induction for graph consisting of visited vertices we can get all lines. So there is line from visited neighbour. Draw line in another direction and continue depth-first search. Sooner or later we will get all lines for the whole graph. Please note that intermediate vertices of cycle will be processed correctly too.\n\nIf we can get all lines the we can get all subsets of lines. Answer for cyclic graph is 2X?+?Y.\n\nNow look at another case  Â— acyclic graph or tree. We can prove that we can get any incomplete subset of lines.\n\nLet's fix subset and some line not from this subset. Just draw this line without restriction. By similar induction as in cyclic graph case we can prove that we can get all lines (but fixed line doesn't exist really).\n\nNow let's prove that it is impossible to take all lines. For graph consisting of only one vertex it is obvious. Else fix some leaf. We must draw a line which are not directed to any neigbour because it is the only way to draw this line. But now we have tree with less number of vertices. So our statement is correct by induction.\n\nAnswer for tree is 2X?+?Y?-?1.\n\nSo the problem now is just about building graph on points and checking each component on having cycles.",
    "hint": []
}