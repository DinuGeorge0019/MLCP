{"link": "https://codeforces.com//contest/557/problem/C", "problemId": "30555", "problem_idx": "C", "shortId": "557C", "contest_number": "557", "problem_submissions": {"E": [11869387, 11865728, 11877714, 11864888, 11889151, 11866470], "D": [11859147, 11860748, 11861182, 11862277, 11863181, 11865161, 11863844, 11864866, 11861291, 11865190, 11866413, 11860722, 11865833, 11866312, 11923092, 11859036, 11864665, 11862418, 11864374], "C": [11856407, 11858913, 11855729, 11859389, 11860110, 11858947, 11859067, 11857533, 11865562, 11859501, 11860468, 11865942, 11862380, 11854539, 11861657, 11909827, 11857135, 11858056, 11856524], "B": [11852804, 11852275, 11853400, 11856628, 11854078, 11854825, 11852839, 11853621, 11854966, 11854901, 11855996, 11862048, 11854417, 11862769, 11867200, 11867503], "A": [11852067, 11853135, 11852127, 11855787, 11852575, 11852315, 11854321, 11852415, 11852433, 11853058, 11852340, 11861439, 11852247, 11857225, 11853713, 11864195, 11852181, 11852458, 11852065]}, "name": "C. Arthur and Table", "statement": "Arthur has bought a beautiful big table into his new flat. When he came\r\nhome, Arthur noticed that the new table is unstable.In total the table\r\nArthur bought has legs, the length of the -th leg is .Arthur decided to\r\nmake the table stable and remove some legs. For each of them Arthur\r\ndetermined number the amount of energy that he spends to remove the -th\r\nleg.A table with legs is assumed to be stable if there are more than\r\nhalf legs of the maximum length. For example, to make a table with legs\r\nstable, you need to make sure it has at least three (out of these five)\r\nlegs of the maximum length. Also, a table with one leg is always stable\r\nand a table with two legs is stable if and only if they have the same\r\nlengths.Your task is to help Arthur and count the minimum number of\r\nenergy units Arthur should spend on making the table stable.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n#define PII pair <int, int> \nint leng [100005]; \nint energy [100005]; \nPII len [100005]; \nint totenergy [100005]; \nvector <int> energybyleng [100005]; \nint cur [205]; \nint main()\n{\n    ios_base::sync_with_stdio(0); \n    int N; cin >> N;\n    long long tot = 0; \n    for (int g=1; g<=N; g++) cin >> leng[g]; \n    for (int g=1; g<=N; g++) cin >> energy[g]; \n    for (int g=1; g<=N; g++) tot+=energy[g], totenergy[leng[g]]+=energy[g], len[g]=PII(leng[g], energy[g]), energybyleng[leng[g]].push_back(energy[g]); \n    sort(len+1, len+N+1); \n    for (int g=1; g<=100000; g++) sort(energybyleng[g].begin(), energybyleng[g].end()); \n    int checker=0; \n    for (int g=1; g<=100000; g++)\n    {\n        if (!energybyleng[g].size()) continue; \n        int x = totenergy[g]; \n        int cansave = energybyleng[g].size()-1; \n        for (int y=200; y>=1; y--)\n        {\n            if (cansave==0) break; \n            if (cur[y]>=cansave)\n            {\n                x+=(cansave*y); break;\n            }\n            else\n            {\n                x+=(cur[y]*y); \n                cansave-=cur[y]; \n            }\n        }\n        if (x>checker)checker=x; \n        for (int y=0; y<energybyleng[g].size(); y++)\n        {\n            cur[energybyleng[g][y]]++; \n        }\n    }   \n    cout << tot-checker; \n    return 0;\n}"], "input": "", "output": "", "tags": ["brute force", "data structures", "dp", "greedy", "math", "sortings"], "dificulty": "1900", "interactive": false}