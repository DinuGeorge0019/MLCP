{
    "link": "https://codeforces.com//contest/557/problem/C",
    "problemId": "30555",
    "problem_idx": "C",
    "shortId": "557C",
    "contest_number": "557",
    "problem_submissions": {
        "E": [
            11869387,
            11865728,
            11877714,
            11864888,
            11889151,
            11866470
        ],
        "D": [
            11859147,
            11860748,
            11861182,
            11862277,
            11863181,
            11865161,
            11863844,
            11864866,
            11861291,
            11865190,
            11866413,
            11860722,
            11865833,
            11866312,
            11923092,
            11859036,
            11864665,
            11862418,
            11864374
        ],
        "C": [
            11856407,
            11858913,
            11855729,
            11859389,
            11860110,
            11858947,
            11859067,
            11857533,
            11865562,
            11859501,
            11860468,
            11865942,
            11862380,
            11854539,
            11861657,
            11909827,
            11857135,
            11858056,
            11856524
        ],
        "B": [
            11852804,
            11852275,
            11853400,
            11856628,
            11854078,
            11854825,
            11852839,
            11853621,
            11854966,
            11854901,
            11855996,
            11862048,
            11854417,
            11862769,
            11867200,
            11867503
        ],
        "A": [
            11852067,
            11853135,
            11852127,
            11855787,
            11852575,
            11852315,
            11854321,
            11852415,
            11852433,
            11853058,
            11852340,
            11861439,
            11852247,
            11857225,
            11853713,
            11864195,
            11852181,
            11852458,
            11852065
        ]
    },
    "name": "C. Arthur and Table",
    "statement": "Arthur has bought a beautiful big table into his new flat. When he came\r\nhome, Arthur noticed that the new table is unstable.In total the table\r\nArthur bought has legs, the length of the -th leg is .Arthur decided to\r\nmake the table stable and remove some legs. For each of them Arthur\r\ndetermined number the amount of energy that he spends to remove the -th\r\nleg.A table with legs is assumed to be stable if there are more than\r\nhalf legs of the maximum length. For example, to make a table with legs\r\nstable, you need to make sure it has at least three (out of these five)\r\nlegs of the maximum length. Also, a table with one leg is always stable\r\nand a table with two legs is stable if and only if they have the same\r\nlengths.Your task is to help Arthur and count the minimum number of\r\nenergy units Arthur should spend on making the table stable.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define PII pair <int, int> \nint leng [100005]; \nint energy [100005]; \nPII len [100005]; \nint totenergy [100005]; \nvector <int> energybyleng [100005]; \nint cur [205]; \nint main()\n{\n    ios_base::sync_with_stdio(0); \n    int N; cin >> N;\n    long long tot = 0; \n    for (int g=1; g<=N; g++) cin >> leng[g]; \n    for (int g=1; g<=N; g++) cin >> energy[g]; \n    for (int g=1; g<=N; g++) tot+=energy[g], totenergy[leng[g]]+=energy[g], len[g]=PII(leng[g], energy[g]), energybyleng[leng[g]].push_back(energy[g]); \n    sort(len+1, len+N+1); \n    for (int g=1; g<=100000; g++) sort(energybyleng[g].begin(), energybyleng[g].end()); \n    int checker=0; \n    for (int g=1; g<=100000; g++)\n    {\n        if (!energybyleng[g].size()) continue; \n        int x = totenergy[g]; \n        int cansave = energybyleng[g].size()-1; \n        for (int y=200; y>=1; y--)\n        {\n            if (cansave==0) break; \n            if (cur[y]>=cansave)\n            {\n                x+=(cansave*y); break;\n            }\n            else\n            {\n                x+=(cur[y]*y); \n                cansave-=cur[y]; \n            }\n        }\n        if (x>checker)checker=x; \n        for (int y=0; y<energybyleng[g].size(); y++)\n        {\n            cur[energybyleng[g][y]]++; \n        }\n    }   \n    cout << tot-checker; \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Arthur and Table.json",
    "editorial_link": "https://codeforces.com//blog/entry/18943",
    "editorial": "This problem can be solved as follows. At first we need to sort all legs in non-descending order of their length. Also we need to use array cnt[].\n\nLet iterate on length of legs (which will stand table) from the least. Let this lenght is equals to maxlen. Count of units of energy which we need for this we will store in variable cur.\n\nObviously that we must unscrew all legs with lenght more than maxlen. For calculate count of units of energy for doing it we can use array with suffix sums, for exapmle. Then we add this value to cur.\n\nIf count of legs with length maxlen is not strictly greater than the number of the remaining legs then we need to unscrew some count of legs with length less than maxlen. For this we can use array cnt[]. In cnt[i] we will store count of legs with difficulty of unscrew equals to i. In this array will store information about legs which already viewed.\n\nWe will iterate on difficulty of unscrew from one and unscrew legs with this difficulties (and add this difficulties to variable cur) while count of legs with length maxlen will not be strictly greater than the number of the remaining legs.\n\nWhen it happens we need to update answer with variable cur.\n\nAsymptotic behavior of this solution \u0097 O(n?*?d), where n \u0097 count of legs and d \u0097 difference between maximal and minimal units of energy which needed to unscrew some legs."
}