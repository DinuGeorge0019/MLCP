{
    "link": "https://codeforces.com//contest/1625/problem/C",
    "problemId": "1258601",
    "problem_idx": "C",
    "shortId": "1625C",
    "contest_number": "1625",
    "problem_submissions": {
        "E2": [
            142492395,
            142747553,
            142585858,
            142544817,
            142543932,
            142508709,
            142559014,
            142480865
        ],
        "E1": [
            142490853,
            142508148,
            142512533,
            142504881,
            142515152,
            143087068,
            142653128,
            142500567,
            142689991,
            142545810,
            142545797,
            142545556,
            142545467,
            142545326,
            142545262,
            142501419,
            142513368,
            142559018,
            142552380,
            142479633,
            142497816,
            142524491,
            142499880,
            142624103,
            142499824,
            142519909
        ],
        "D": [
            142481572,
            142492922,
            142487953,
            142497240,
            142498374,
            143087164,
            142599139,
            142514228,
            222453996,
            222453785,
            142497243,
            142486623,
            142491954,
            142489551,
            142492232,
            142491133,
            142490435,
            142499368,
            142553310,
            142502090,
            142500746
        ],
        "C": [
            142473156,
            142474854,
            142475386,
            142485242,
            142478481,
            143087271,
            142482654,
            142476782,
            142498111,
            142474938,
            142478501,
            142483591,
            142478318,
            142477275,
            142483517,
            142478815,
            142480894,
            142480450,
            142476700,
            142479689
        ],
        "B": [
            142469531,
            142471088,
            142471096,
            142472842,
            142472506,
            143087319,
            142469913,
            142470866,
            142473066,
            142471519,
            142471936,
            142470735,
            142472744,
            142471752,
            142475933,
            142471863,
            142473722,
            142473268,
            142472289,
            142473807
        ],
        "A": [
            142468922,
            142469220,
            142469548,
            142469271,
            142469703,
            143087364,
            142471996,
            142469051,
            142470684,
            142469214,
            142469265,
            142469095,
            142469247,
            142469618,
            142469909,
            142469285,
            142470575,
            142470471,
            142470036,
            142469919
        ]
    },
    "name": "C. Road Optimization",
    "statement": "The Government of Mars is not only interested in optimizing space\r\nflights, but also wants to improve the road system of the planet.One of\r\nthe most important highways of Mars connects Olymp City and Kstolop, the\r\ncapital of Cydonia. In this problem, we only consider the way from\r\nKstolop to Olymp City, but not the reverse path (i. e. the path from\r\nOlymp City to Kstolop).The road from Kstolop to Olymp City is\r\nell kilometers long. Each point of the road has a coordinate x (0\r\nle x\r\nle\r\nell), which is equal to the distance from Kstolop in kilometers. So,\r\nKstolop is located in the point with coordinate 0, and Olymp City is\r\nlocated in the point with coordinate\r\nell.There are n signs along the road, i-th of which sets a speed limit\r\na_i. This limit means that the next kilometer must be passed in a_i\r\nminutes and is active until you encounter the next along the road. There\r\nis a road sign at the start of the road (i. e. in the point with\r\ncoordinate 0), which sets the initial speed limit.If you know the\r\nlocation of all the signs, it\u2019s not hard to calculate how much time it\r\ntakes to drive from Kstolop to Olymp City. Consider an example: Here,\r\nyou need to drive the first three kilometers in five minutes each, then\r\none kilometer in eight minutes, then four kilometers in three minutes\r\neach, and finally the last two kilometers must be passed in six minutes\r\neach. Total time is 3\r\ncdot 5 + 1\r\ncdot 8 + 4\r\ncdot 3 + 2\r\ncdot 6 = 47 minutes.To optimize the road traffic, the Government of Mars\r\ndecided to remove no more than k road signs. It cannot remove the sign\r\nat the start of the road, otherwise, there will be no limit at the\r\nstart. By removing these signs, the Government also wants to make the\r\ntime needed to drive from Kstolop to Olymp City as small as possible.The\r\nlargest industrial enterprises are located in Cydonia, so it\u2019s the\r\npriority task to optimize the road traffic from Olymp City. So, the\r\nGovernment of Mars wants you to remove the signs in the way described\r\nabove.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define rep(i,n) for (i=1;i<=(n);i++)\nusing namespace std;\nint n,l,k,ans,i;\nint d[555],a[555],dp[555][555]; \nint main(){\n\tmemset(dp,0x3f,sizeof(dp));\n\tans=dp[0][0];\n\tcin>>n>>l>>k;\n\trep(i,n) cin>>d[i];\n\trep(i,n) cin>>a[i];\n\tn++;d[n]=l;\n\tdp[1][1]=0;\n\tfor(int i=2;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tfor(int u=1;u<i;u++){\n\t\t\t\tdp[i][j]=min(dp[i][j],dp[u][j-1]+(d[i]-d[u])*a[u]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=0;i<=k;i++){\n\t\tans=min(ans,dp[n][n-i]);\n\t}\n\tcout<<ans<<endl; \n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Road Optimization.json",
    "editorial_link": "https://codeforces.com//blog/entry/99031",
    "editorial": "First you need to understand that this problem must be solved with\r\ndynamic programming. Let is the minimum time to drive between the two\r\ncities, if we consider first signs and have already removed signs. We\r\nalso assume that the th sign is taken.Then, the initial state is: , .\r\nSo, we don\u00e2\u0080\u0099t need to drive to the first sign (as it takes seconds), and\r\nif we don\u00e2\u0080\u0099t remove any signs, it\u00e2\u0080\u0099s easy to calculate the time.Initially,\r\nfill for all .Then, the answer is over all .Consider which transitions\r\ncan we make. Calculate our DP from bottom to top, so we go from smaller\r\nstates to larger ones. Consider all the and all the in the loop order,\r\ni. e:for (int i = 0; i < n; i++)for (int j = 0; j <= k; j++)If we see ,\r\nthen there\u00e2\u0080\u0099s no answer and we\u00e2\u0080\u0099ll just skip this state. For example, it\r\nmay mean that .Now, iterate over the positions of the next sign we\u00e2\u0080\u0099ll\r\nput. Call this position . The transitions are as follows: .Why such\r\nformula? After removing all the signs between we will stay on the sign ,\r\nremove signs, and the time to go from to will depend on the sign and the\r\ndistance between and .So, we get the solution in .There also exists a\r\nsolution in , which uses Convex Hull Trick. We don\u00e2\u0080\u0099t describe it here,\r\nas it\u00e2\u0080\u0099s not required to solve the problem.\r\n"
}