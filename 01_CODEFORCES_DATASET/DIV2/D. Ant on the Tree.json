{"link": "https://codeforces.com//contest/29/problem/D", "problemId": "137", "problem_idx": "D", "shortId": "29D", "contest_number": "29", "problem_submissions": {"E": [125241, 126330, 126155, 125733, 125865, 126658, 126234, 126231, 126226, 126224, 126223, 126222, 126220, 126219], "D": [125034, 124977, 125137, 124955, 126167, 124975, 125121, 125117, 125144, 125139, 125163, 125118, 125874, 125298, 126655, 125218, 125109, 125229, 124650, 125349, 125423], "C": [124653, 124641, 124557, 124552, 126791, 126165, 124733, 124669, 124678, 124726, 124730, 124571, 124765, 125873, 124728, 124502, 124723, 124476, 125051, 124748, 124750, 124948], "B": [124462, 124483, 124414, 124342, 126163, 124350, 124353, 124357, 124449, 124332, 124258, 124938, 125871, 124444, 124711, 124767, 124895, 125182, 124519, 124630], "A": [124199, 124174, 124196, 124170, 126162, 124168, 124167, 124166, 124172, 124158, 124163, 124217, 125867, 124218, 124863, 124230, 124176, 125258, 124181, 124231]}, "name": "D. Ant on the Tree", "statement": "Connected undirected graph without cycles is called a tree. Trees is a\r\nclass of graphs which is interesting not only for people, but for ants\r\ntoo.An ant stands at the root of some tree. He sees that there are\r\nvertexes in the tree, and they are connected by edges so that there is a\r\npath between any pair of vertexes. A leaf is a distinct from root\r\nvertex, which is connected with exactly one other vertex.The ant wants\r\nto visit every vertex in the tree and return to the root, passing every\r\nedge twice. In addition, he wants to visit the leaves in a specific\r\norder. You are to find some possible route of the ant.\r\n", "solutions": ["/*\nID: espr1t\nLANG: C++\nTASK: Demo\n*/\n\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n#include <cstdlib>\n#include <string>\n#include <queue>\n#include <map>\n#include <set>\n\n#define MAX 1024\n\nusing namespace std;\nFILE *in; FILE *out;\n\n\nint n, idx;\nvector <int> order, ans;\nmap < int, int > level;\nmap < int, vector <int> > v;\nmap < int, set <int> > children;\n\nvoid getLevels(int node, int lvl)\n{\n\tlevel[node] = lvl;\n\tfor (int i = 0; i < (int)v[node].size(); i++)\n\t\tif (level.find(v[node][i]) == level.end())\n\t\t\tgetLevels(v[node][i], lvl + 1);\n}\n\nvoid getChildren(int node)\n{\n\tfor (int i = 0; i < (int)v[node].size(); i++)\n\t{\n\t\tif (level[v[node][i]] > level[node])\n\t\t{\n\t\t\tchildren[node].insert(v[node][i]);\n\t\t\tgetChildren(v[node][i]);\n\t\t\tchildren[node].insert(children[v[node][i]].begin(), children[v[node][i]].end());\n\t\t}\n\t}\n}\n\nvoid recurse(int node)\n{\n\tans.push_back(node);\n\tif (ans.size() > (n - 1) * 2 + 1) return;\n\n//\tcout << \"Currently at node \" << node << endl;\n\twhile (idx < (int)order.size())\n\t{\n\t\tint found = 0;\n\t\tif (ans.size() > (n - 1) * 2 + 1) return;\n\t\tfor (int i = 0; i < (int)v[node].size(); i++) if (level[v[node][i]] > level[node])\n\t\t{\n//\t\t\tcout << \"Trying child \" << v[node][i] << endl;\n\t\t\tif (v[node][i] == order[idx])\n\t\t\t{\n\t\t\t\tans.push_back(v[node][i]);\n\t\t\t\tans.push_back(node);\n\t\t\t\tidx++; found = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (children[v[node][i]].find(order[idx]) != children[v[node][i]].end())\n\t\t\t\t{\n\t\t\t\t\tfound = 1;\n\t\t\t\t\trecurse(v[node][i]);\n\t\t\t\t\tans.push_back(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!found) break;\n\t}\n}\n\nint main(void)\n{\n\tin = stdin; out = stdout;\n//\tin = fopen(\"D.in\", \"rt\"); out = fopen(\"D.out\", \"wt\");\n\t\n\tfscanf(in, \"%d\", &n);\n\tfor (int i = 0; i < n - 1; i++)\n\t{\n\t\tint n1, n2;\n\t\tfscanf(in, \"%d %d\", &n1, &n2);\n\t\tv[n1].push_back(n2);\n\t\tv[n2].push_back(n1);\n\t}\n\t\n\tgetLevels(1, 0);\n\tgetChildren(1);\n\t\n\t/*\n\tfor (map <int, set <int> > :: iterator it = children.begin(); it != children.end(); it++)\n\t{\n\t\tcout << \"Children for node \" << it->first << \":\";\n\t\tfor (set <int> :: iterator it2 = it->second.begin(); it2 != it->second.end(); it2++)\n\t\t\tcout << \" \" << *it2;\n\t\tcout << endl; \n\t}\n\tsystem(\"pause\");\n\t*/\n\n\tint numLeafs = 0;\n\tfor (map < int, set <int> > :: iterator it = children.begin(); it != children.end(); it++)\n\t\tif (it->second.size() == 0) numLeafs++;\n\n\tfor (int i = 0; i < numLeafs; i++)\n\t{\n\t\tint cur;\n\t\tfscanf(in, \"%d\", &cur);\n\t\torder.push_back(cur);\n\t}\n\tidx = 0;\n\trecurse(1);\n\tif (ans.size() != (n - 1) * 2 + 1)\n\t\tfprintf(out, \"-1\\n\");\n\telse\n\t{\n\t\tfor (int i = 0; i < (int)ans.size(); i++)\n\t\t\tfprintf(out, \"%d%c\", ans[i], i + 1 == (int)ans.size() ? '\\n' : ' ');\n\t}\n\t/*\n\tcout << \"Found answer:\";\n\tfor (int i = 0; i < (int)ans.size(); i++)\n\t\tcout << \" \" << ans[i]; cout << endl;\n\tsystem(\"pause\");\n\t*/\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "dfs and similar", "trees"], "dificulty": "2000", "interactive": false}