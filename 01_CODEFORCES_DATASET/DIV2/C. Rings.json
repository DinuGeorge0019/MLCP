{
    "link": "https://codeforces.com//contest/1562/problem/C",
    "problemId": "1090689",
    "problem_idx": "C",
    "shortId": "1562C",
    "contest_number": "1562",
    "problem_submissions": {
        "D1": [
            127110573,
            127085719,
            127084796,
            127084014,
            127082028,
            127085521,
            127097411,
            127086825,
            127084098,
            127152628,
            127086357,
            127091256,
            127089578,
            127094935,
            127087378,
            127145842,
            127096913,
            127085638,
            127093081,
            127092946,
            127097887
        ],
        "C": [
            127103744,
            127070687,
            127073196,
            127078874,
            127072653,
            127077271,
            127080224,
            127080082,
            127076281,
            127152605,
            127080001,
            127084225,
            127080395,
            127079018,
            127078269,
            127145835,
            127074373,
            127074883,
            127071594,
            127080320,
            127084605
        ],
        "F": [
            127097089,
            127135208,
            127161728,
            127161600,
            127229394,
            127157826,
            127137600,
            127137538
        ],
        "B": [
            127076926,
            127064047,
            127067878,
            127063714,
            127064849,
            127070358,
            127068285,
            127074157,
            127067634,
            127152598,
            127071567,
            127066882,
            127070574,
            127066706,
            127070386,
            127145825,
            127065946,
            127063213,
            127065381,
            127068953,
            127075580
        ],
        "E": [
            127072906,
            127104112,
            127107000,
            127110960,
            127115711,
            127114212,
            127106853,
            127106260,
            127114534,
            127115452,
            127152643,
            127119064,
            127113726,
            127111252,
            127120883,
            127122598,
            127145862,
            127118199,
            127123949,
            127112032,
            127125984,
            127116259
        ],
        "A": [
            127058831,
            127058219,
            127058722,
            127058582,
            127058274,
            127060830,
            127061981,
            127062185,
            127059322,
            127061493,
            127152592,
            127059028,
            127058289,
            127059753,
            127058370,
            127060017,
            127145811,
            127058384,
            127058502,
            127058367,
            127058839,
            127058595
        ],
        "D2": [
            127087276,
            127093820,
            127092460,
            127093109,
            127096811,
            127100821,
            127112348,
            127097441,
            127096385,
            127152634,
            127098403,
            127095759,
            127102138,
            127094867,
            127102605,
            127145854,
            127108326,
            127092734,
            127119011,
            127100809,
            127104819
        ]
    },
    "name": "C. Rings",
    "statement": "Somewhere in a parallel Middle-earth, when Saruman caught Frodo, he only\r\nfound n rings. And the i-th ring was either gold or silver. For\r\nconvenience Saruman wrote down a binary string s of n characters, where\r\nthe i-th character was if the i-th ring was gold, and if it was\r\nsilver.Saruman has a magic function f, which takes a binary string and\r\nreturns a number obtained by converting the string into a binary number\r\nand then converting the binary number into a decimal number. For\r\nexample, f(001010) = 10, f(111) = 7, f(11011101) = 221.Saruman, however,\r\nthinks that the order of the rings plays some important role. He wants\r\nto find 2 pairs of integers (l_1, r_1), (l_2, r_2), such that: 1\r\nle l_1\r\nle n, 1\r\nle r_1\r\nle n, r_1-l_1+1\r\nge\r\nlfloor\r\nfrac{n}{2}\r\nrfloor 1\r\nle l_2\r\nle n, 1\r\nle r_2\r\nle n, r_2-l_2+1\r\nge\r\nlfloor\r\nfrac{n}{2}\r\nrfloor Pairs (l_1, r_1) and (l_2, r_2) are distinct. That is, at least\r\none of l_1\r\nneq l_2 and r_1\r\nneq r_2 must hold. Let t be the substring s[l_1:r_1] of s, and w be the\r\nsubstring s[l_2:r_2] of s. Then Here substring s[l:r] denotes s_ls_{l+1}\r\nldots s_{r-1}s_r, and\r\nlfloor x\r\nrfloor denotes rounding the number down to the nearest integer.Help\r\nSaruman solve this problem! It is guaranteed that under the constraints\r\nof the problem at least one solution exists.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nstring s;\nint n,ans,t;\nsigned main(){\n    ios::sync_with_stdio(false);cin.tie(0),cout.tie(0);\n\tcin>>t;\n\twhile(t--){\n\t\tcin>>n>>s;\n\t\tans=0;\n\t\tfor(register int i=0;i<(n-(n>>1))&&!ans;i++)if(s[i]=='0')cout<<i+1<<\" \"<<n<<\" \"<<i+2<<\" \"<<n<<endl,ans=1;\n        if(ans)continue;\n\t\tfor(register int i=0;i<n&&!ans;i++)if(s[i]=='0')ans=i+1;\n\t\tif(ans)cout<<\"1 \"<<ans<<\" 1 \"<<ans-1<<endl;\n\t\telse cout<<\"1 \"<<n-1<<\" 2 \"<<n<<endl;\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Rings.json",
    "editorial_link": "https://codeforces.com//blog/entry/94278",
    "editorial": "Let us first consider the boundary case. Let a string (hereafter we will\r\nassume that the string length ) consists of only ones. Then we can\r\noutput the numbers as the answer, since there will be the same\r\nsubstrings.Now let\u00e2\u0080\u0099s figure out what to do in the other case. Let\u00e2\u0080\u0099s call\r\nthe substring [ ... ] the left half of the string, and the substring [\r\n... ] the right half of the string. Then there are two cases: There is\r\nin the left half of the row, and its position is . Then we can take the\r\nnumbers as the answer, since they are the same numbers, just the second\r\nnumber has an extra leading zero. There is in the right half of the row,\r\nand its position is . Then you can take the numbers as the answer, since\r\nthe second number is the first number multiplied by two (multiplying by\r\ntwo in binary is equivalent to adding one zero to the right).\r\nAsymptotics: per test case.\r\n"
}