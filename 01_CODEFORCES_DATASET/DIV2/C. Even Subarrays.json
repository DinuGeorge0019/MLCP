{
    "link": "https://codeforces.com//contest/1731/problem/C",
    "problemId": "1711453",
    "problem_idx": "C",
    "shortId": "1731C",
    "contest_number": "1731",
    "problem_submissions": {
        "F": [
            186914595,
            186916746,
            188609637,
            186918241,
            186915978,
            186924114,
            186923167,
            186928435,
            186940850,
            186934089,
            186928158,
            186942000,
            186931590,
            186939314,
            186931829,
            186925046,
            187042657,
            186976314,
            186961335,
            186947151,
            186935943,
            186943841,
            186947800,
            187100429,
            186936912
        ],
        "E": [
            186902388,
            186907542,
            188609583,
            186907228,
            186922877,
            186908811,
            186913909,
            186909533,
            186905298,
            186914796,
            186914318,
            186909008,
            186915275,
            186912330,
            186916821,
            186935842,
            186913227,
            186922201,
            186915075,
            186915635,
            186916449
        ],
        "D": [
            186894672,
            186898337,
            188609534,
            186899725,
            186899215,
            186903320,
            186903576,
            186904113,
            186896689,
            186902110,
            186905198,
            186902394,
            186905223,
            186904629,
            186906063,
            186899445,
            186905463,
            186908692,
            186911370,
            186906776,
            186904962
        ],
        "C": [
            186891713,
            186894904,
            188609500,
            186897483,
            186895982,
            186900151,
            186899934,
            186901212,
            186894367,
            186897519,
            186898993,
            186897615,
            186900357,
            186899391,
            186902000,
            186905696,
            186894285,
            186902878,
            186897844,
            186898614,
            186901628
        ],
        "B": [
            186886340,
            186890465,
            188609426,
            186888165,
            186892347,
            186894409,
            186892290,
            186893227,
            186887848,
            186893176,
            186892310,
            186890495,
            186892951,
            186895205,
            186908452,
            186891159,
            186900599,
            186895520,
            186894487,
            186892361,
            186896199
        ],
        "A": [
            186884556,
            186884624,
            188609361,
            186884628,
            186886996,
            186885867,
            186884614,
            186885171,
            186884576,
            186884932,
            186885049,
            186884957,
            186885253,
            186885130,
            186885370,
            186887288,
            186885246,
            186886527,
            186884899,
            186885189,
            186885071
        ]
    },
    "name": "C. Even Subarrays",
    "statement": "You are given an integer array a_1, a_2,\r\ndots, a_n (1\r\nle a_i\r\nle n).Find the number of subarrays of a whose\r\noperatorname{XOR} has an even number of divisors. In other words, find\r\nall pairs of indices (i, j) (i\r\nle j) such that a_i\r\noplus a_{i + 1}\r\noplus\r\ndots\r\noplus a_j has an even number of divisors.For example, numbers 2, 3, 5 or\r\n6 have an even number of divisors, while 1 and 4 odd. Consider that 0\r\nhas an odd number of divisors in this task.Here\r\noperatorname{XOR} (or\r\noplus) denotes the bitwise XOR operation. Okay, let\u2019s stop. Just print\r\nthe actual answer.\r\n",
    "solutions": [
        "//\u8fd9\u56de\u53ea\u82b1\u4e86114514min\u5c31\u6253\u5b8c\u4e86\u3002\n//\u771f\u597d\u3002\u8bb0\u5f97\u591a\u624b\u9020\u51e0\u7ec4\u3002ACM\u62cd\u4ec0\u4e48\u62cd\u3002 \n#include \"bits/stdc++.h\"\nusing namespace std;\ntemplate<typename typC,typename typD> istream &operator>>(istream &cin,pair<typC,typD> &a) { return cin>>a.first>>a.second; }\ntemplate<typename typC> istream &operator>>(istream &cin,vector<typC> &a) { for (auto &x:a) cin>>x; return cin; }\ntemplate<typename typC,typename typD> ostream &operator<<(ostream &cout,const pair<typC,typD> &a) { return cout<<a.first<<' '<<a.second; }\ntemplate<typename typC,typename typD> ostream &operator<<(ostream &cout,const vector<pair<typC,typD>> &a) { for (auto &x:a) cout<<x<<'\\n'; return cout; }\ntemplate<typename typC> ostream &operator<<(ostream &cout,const vector<typC> &a) { int n=a.size(); if (!n) return cout; cout<<a[0]; for (int i=1; i<n; i++) cout<<' '<<a[i]; return cout; }\ntemplate<typename typC,typename typD> bool cmin(typC &x,const typD &y) { if (x>y) { x=y; return 1; } return 0; }\ntemplate<typename typC,typename typD> bool cmax(typC &x,const typD &y) { if (x<y) { x=y; return 1; } return 0; }\ntemplate<typename typC> vector<typC> range(typC l,typC r,typC step=1) { assert(step>0); int n=(r-l+step-1)/step,i; vector<typC> res(n); for (i=0; i<n; i++) res[i]=l+step*i; return res; }\n#if !defined(ONLINE_JUDGE)&&defined(LOCAL)\n#include \"my_header\\debug.h\"\n#else\n#define dbg(...) ;\n#define dbgn(...) ;\n#endif\ntypedef unsigned int ui;\ntypedef long long ll;\n#define all(x) (x).begin(),(x).end()\n// template<typename T1,typename T2> void inc(T1 &x,const T2 &y) { if ((x+=y)>=p) x-=p; }\n// template<typename T1,typename T2> void dec(T1 &x,const T2 &y) { if ((x+=p-y)>=p) x-=p; }\nconst int N=1e6+5;\nint main()\n{\n\tios::sync_with_stdio(0); cin.tie(0);\n\tcout<<fixed<<setprecision(15);\n\tint T; cin>>T;\n\twhile (T--)\n\t{\n\t\tint n,m,i,j;\n\t\tcin>>n;\n\t\tvector<int> cnt(2*n+5);\n\t\tvector<int> a(n);\n\t\tvector<int> b;\n\t\tfor (i=0; i*i<cnt.size(); i++) b.push_back(i*i);\n\t\tcin>>a;\n\t\t++cnt[0];\n\t\tint cur=0;\n\t\tll ans=n*(n+1ll)/2;\n\t\t// dbg(ans);\n\t\tfor (int x:a)\n\t\t{\n\t\t\tcur^=x;\n\t\t\t// dbg(cur);\n\t\t\tfor (int y:b) if ((cur^y)<cnt.size()) ans-=cnt[cur^y];\n\t\t\t++cnt[cur];\n\t\t\t// dbg(ans);\n\t\t}\n\t\tcout<<ans<<'\\n';\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "hashing",
        "math",
        "number theory"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Even Subarrays.json",
    "editorial_link": "https://codeforces.com//blog/entry/110630",
    "editorial": "Let\u00e2\u0080\u0099s calculate the number of subarrays whose sum has an odd number of\r\ndivisors and subtract them from total no of subarrays. Note: A number\r\nhas an odd number of divisors only if it is a perfect square. So we have\r\nto calculate number of subarray having sum a perfect square.For the\r\ngiven constraints for elements in the array, the maximum possible sum of\r\nany subarray will be less than , so the number of possible elements with\r\nodd divisors . Number of subarrays with a given sum can be calculated in\r\n. Therefore, calculate the same for each perfect square less than and\r\nadd all these to get the number of subarrays whose sum has an odd number\r\nof divisors. Subtract from total number of subarrays to get the required\r\nanswer.Time complexity : .\r\n"
}