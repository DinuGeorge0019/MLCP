{
    "link": "https://codeforces.com//contest/811/problem/D",
    "problemId": "107532",
    "problem_idx": "D",
    "shortId": "811D",
    "contest_number": "811",
    "problem_submissions": {
        "E": [
            27384705,
            106269730,
            27384523,
            27384734,
            27377479,
            27382245,
            27387921,
            27385994,
            27378312,
            27417485,
            27383230,
            27385468,
            27379502,
            27382190,
            27381400,
            27383006
        ],
        "D": [
            27379365,
            27381500,
            27381222,
            27386537,
            27382445,
            27381225,
            27382121,
            27382035,
            27384111,
            27380209,
            27384960,
            27386244,
            27384575,
            27385712,
            27381029,
            27382189,
            27383952
        ],
        "C": [
            27375763,
            27376427,
            27377289,
            27382636,
            27375842,
            27378042,
            27373086,
            27379255,
            27377375,
            27374603,
            27380152,
            27380818,
            27378127,
            27376964,
            27376298,
            27380327,
            27375518,
            27379100,
            27378177,
            27379352
        ],
        "B": [
            27372900,
            27372650,
            27375003,
            27380196,
            27375149,
            27373634,
            27384935,
            27374432,
            27374563,
            27374805,
            27389142,
            27372946,
            27375127,
            27378423,
            27372846,
            27373956,
            27374358
        ],
        "A": [
            27371146,
            27371406,
            27372004,
            27371481,
            27372708,
            27371377,
            27372619,
            27371210,
            27371813,
            27371396,
            27371888,
            27371519,
            27371189,
            27371592,
            27371623,
            27372374,
            27385878,
            27371337,
            27371714,
            27372067
        ]
    },
    "name": "D. Vladik and Favorite Game",
    "statement": "Vladik has favorite game, in which he plays all his free time.Game field\r\ncould be represented as matrix which consists of cells of three types:\r\nnormal cell, player can visit it. finish cell, player has to finish his\r\nway there to win. There is exactly one cell of this type. dangerous\r\ncell, if player comes to this cell, he loses. Initially player is\r\nlocated in the left top cell with coordinates . Player has access to\r\nbuttons \"\", \"\", \"\", \"\", each of them move player up, down, left and\r\nright directions respectively.But it s not that easy! Sometimes friends\r\nplay game and change functions of buttons. Function of buttons \"\" and \"\"\r\ncould have been swapped, also functions of buttons \"\" and \"\" could have\r\nbeen swapped. Note that functions of buttons can be changed only at the\r\nbeginning of the game.Help Vladik win the game!\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define rep(i,j,k) for((i)=(j);(i)<=(k);++i)\n#define per(i,j,k) for((i)=(j);(i)>=(k);--i)\nusing namespace std;\ntypedef long long ll;\ninline void cmin(int &x,int y){if(y<x)x=y;}\ninline void cmax(int &x,int y){if(y>x)x=y;}\nint dx[4] = {0,0,1,-1};\nint dy[4] = {1,-1,0,0};\nchar d[4] = {'R','L','D','U'};\nconst int N = 1005;\nint a[N][N],vis[N][N],ok,swapLR,swapUD,x,y,tx,ty,n,m,i,j; char str[N];\nint inline read(){\n\tchar ch=getchar();int z=0,f=1;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){z=z*10+ch-'0';ch=getchar();}\n\treturn z*f;\n}\nvoid dfs(int x,int y){\n\tvis[x][y] = 1; int i,tx,ty;\n\tif(a[x][y] == 2){ok = 1; return;}\n\trep(i,0,3){\n\t\ttx = x + dx[i]; ty = y + dy[i];\n\t\tif(tx>0 && ty>0 && tx<=n && ty<=m && !vis[tx][ty] && a[tx][ty] != 1){\n\t\t\tdfs(tx , ty);\n\t\t\tif(ok) return;\n\t\t}\n\t}\n\tvis[x][y] = 2;\n}\nint main(){\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tn=read();m=read();\n\trep(i,1,n){\n\t\tscanf(\"%s\",str+1);\n\t\trep(j,1,m)\n\t\t\tif(str[j] == '.') a[i][j] = 0;\n\t\t\telse if(str[j] == '*') a[i][j] = 1;\n\t\t\telse a[i][j] = 2;\n\t}\n\tok = 0; dfs(1 , 1);\n\tswapLR = swapUD = -1;\n\tx = 1; y = 1;\n\twhile(a[x][y] != 2){\n\t\tvis[x][y] = 0;\n\t\trep(i,0,3){\n\t\t\ttx = x + dx[i];\n\t\t\tty = y + dy[i];\n\t\t\tif(vis[tx][ty] == 1) break;\n\t\t}\n\t\tif(swapLR < 0 && i < 2){\n\t\t\tswapLR = 1;\n\t\t\tputs(\"R\");\n\t\t\tfflush(stdout);\n\t\t\ttx = read(); ty = read();\n\t\t\tif(x == tx && y == ty){\n\t\t\t\tputs(\"L\");\n\t\t\t\tfflush(stdout);\n\t\t\t\tswap(d[0] , d[1]);\n\t\t\t\tx = read(); y = read();\n\t\t\t}else{\n\t\t\t\tx = tx; y = ty;\n\t\t\t}\n\t\t}else if(swapUD < 0 && i >= 2){\n\t\t\tswapUD = 1;\n\t\t\tputs(\"D\");\n\t\t\tfflush(stdout);\n\t\t\ttx = read(); ty = read();\n\t\t\tif(x == tx && y == ty){\n\t\t\t\tputs(\"U\");\n\t\t\t\tfflush(stdout);\n\t\t\t\tswap(d[2] , d[3]);\n\t\t\t\tx = read(); y = read();\n\t\t\t}else{\n\t\t\t\tx = tx; y = ty;\n\t\t\t}\n\t\t}else{\n\t\t\tputchar(d[i]);\n\t\t\tputs(\"\");\n\t\t\tfflush(stdout);\n\t\t\tx = read(); y = read();\n\t\t}\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "interactive"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Vladik and Favorite Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/52228",
    "editorial": "It\u00e2\u0080\u0099s clear, that to reach finish without stepping into dangerous cells\r\nwe have to know, whether our buttons are broken. Firstly, let\u00e2\u0080\u0099s find any\r\nroute to the finish using bfs / dfs. At the first moment of this route,\r\nwhen we have to go down, we would find out, if our button is broken,\r\nbecause we are still at the first row of the matrix and if the button is\r\nbroken, we just won\u00e2\u0080\u0099t move anywhere. Similarly for left and right pair\r\nof buttons. After that we found out, that button was broken, we can\r\nchange in our route moves to opposite ones.\r\n"
}