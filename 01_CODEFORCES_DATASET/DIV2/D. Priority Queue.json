{
    "link": "https://codeforces.com//contest/1542/problem/D",
    "problemId": "1034812",
    "problem_idx": "D",
    "shortId": "1542D",
    "contest_number": "1542",
    "problem_submissions": {
        "E2": [
            121219799,
            121223040,
            121227052,
            121233469,
            121239326,
            121234301,
            121236580,
            121235420,
            121216663,
            121238675,
            121273656,
            121296078,
            121315568
        ],
        "E1": [
            121219525,
            121218312,
            121219863,
            121224427,
            121223323,
            121227183,
            121236464,
            121219719,
            121216224,
            121238504,
            121230738,
            121231671,
            121233917,
            121231813,
            121237944,
            121234549,
            121237990,
            121237975,
            121239554,
            121315761,
            121236416
        ],
        "B": [
            121207778,
            121207035,
            121196176,
            121198996,
            121193641,
            121199916,
            121198331,
            121209692,
            121227899,
            121202669,
            121195965,
            121201409,
            121210300,
            121201851,
            121197314,
            121210832,
            121203725,
            121200105,
            121198365,
            121315719,
            121204232
        ],
        "A": [
            121204300,
            121188597,
            121188711,
            121189593,
            121188837,
            121209408,
            121188670,
            121192287,
            121228704,
            121189765,
            121189512,
            121188741,
            121190699,
            121190274,
            121188622,
            121206448,
            121191911,
            121188947,
            121188840,
            121315670,
            121198667
        ],
        "D": [
            121203495,
            121202907,
            121210273,
            121212521,
            121209354,
            121208537,
            121211787,
            121232171,
            121222572,
            121218612,
            121213056,
            121211998,
            121216674,
            121217696,
            121216064,
            121219789,
            121217032,
            121218049,
            121218313,
            121350905,
            121217984
        ],
        "C": [
            121193499,
            121197254,
            121200250,
            121203739,
            121204080,
            121201004,
            121202808,
            121205437,
            121226710,
            121208971,
            121203678,
            121205267,
            121206135,
            121204211,
            121205127,
            121202814,
            121209801,
            121207441,
            121209898,
            121315741,
            121209076
        ]
    },
    "name": "D. Priority Queue",
    "statement": "You are given a sequence A, where its elements are either in the form or\r\n, where x is an integer.For such a sequence S where its elements are\r\neither in the form or , define f(S) as follows: iterate through S’s\r\nelements from the first one to the last one, and maintain a multiset T\r\nas you iterate through it. for each element, if it’s in the form , add x\r\nto T; otherwise, erase the smallest element from T (if T is empty, do\r\nnothing). after iterating through all S’s elements, compute the sum of\r\nall elements in T. f(S) is defined as the sum. The sequence b is a\r\nsubsequence of the sequence a if b can be derived from a by removing\r\nzero or more elements without changing the order of the remaining\r\nelements. For all A’s subsequences B, compute the sum of f(B), modulo\r\n998\r\n,244\r\n,353.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define mp make_pair\n#define pb push_back\n#define x first\n#define y second\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntemplate <typename T> void chkmax(T &x,T y){x<y?x=y:T();}\ntemplate <typename T> void chkmin(T &x,T y){y<x?x=y:T();}\ntemplate <typename T> void readint(T &x)\n{\n\tx=0;int f=1;char c;\n\tfor(c=getchar();!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=x*10+(c-'0');\n\tx*=f;\n}\nconst int MOD=998244353;\ninline int dmy(int x){return x>=MOD?x-MOD:x;}\ninline void inc(int &x,int y){x=dmy(x+y);}\nint qmi(int x,int y)\n{\n\tint ans=1;\n\tfor(;y;y>>=1,x=1ll*x*x%MOD)\n\t\tif(y&1)ans=1ll*ans*x%MOD;\n\treturn ans;\n}\nconst int MAXN=505;\n\nint n;\nchar op[MAXN];\nint a[MAXN];\nint dp[MAXN][MAXN];\n\nint main()\n{\n\t#ifdef LOCAL\n\tfreopen(\"code.in\",\"r\",stdin);\n//\tfreopen(\"code.out\",\"w\",stdout);\n\t#endif\n\treadint(n);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\top[i]=getchar();\n\t\tif(op[i]=='+')readint(a[i]);\n\t\telse getchar();\n\t}\n\tint res=0;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(op[i]=='-')continue;\n\t\tmemset(dp,0,sizeof(dp));\n\t\tdp[0][0]=1;\n\t\tfor(int j=1;j<i;++j)\n\t\t\tfor(int k=0;k<j;++k)\n\t\t\t{\n\t\t\t\tinc(dp[j][k],dp[j-1][k]);\n\t\t\t\tif(op[j]=='-')inc(dp[j][max(k-1,0)],dp[j-1][k]);\n\t\t\t\telse if(a[j]<=a[i])inc(dp[j][k+1],dp[j-1][k]);\n\t\t\t\telse inc(dp[j][k],dp[j-1][k]);\n\t\t\t}\n\t\tfor(int k=0;k<i;++k)\n\t\t\tinc(dp[i][k+1],dp[i-1][k]);\n\t\tfor(int j=i+1;j<=n;++j)\n\t\t\tfor(int k=1;k<j;++k)\n\t\t\t{\n\t\t\t\tinc(dp[j][k],dp[j-1][k]);\n\t\t\t\tif(op[j]=='-')k>1?inc(dp[j][k-1],dp[j-1][k]):void(0);\n\t\t\t\telse if(a[j]<a[i])inc(dp[j][k+1],dp[j-1][k]);\n\t\t\t\telse inc(dp[j][k],dp[j-1][k]);\n\t\t\t}\n\t\tint sum=0;\n\t\tfor(int k=1;k<=n;++k)inc(sum,dp[n][k]);\n\t\tinc(res,1ll*a[i]*sum%MOD);\n\t}\n\tprintf(\"%d\\n\",res);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "implementation",
        "math",
        "ternary search"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Priority Queue.json",
    "editorial_link": "https://codeforces.com//blog/entry/92492",
    "editorial": "For each x\n, count how many B\ns make the final set contain x\n.\n\nLet's say we have picked the x\n in the I\n-th operation, call it X\n. Then, the subsequence we choose must satisfy the following conditions:\n\nIt must contain the i\n-th operation (otherwise X\n won't be added).\nLet s\n denote the number of numbers less than X\n in the current T\n. Whenever we meet a - element in S\n after the i\n-th operation, s\n should be greater than 0\n.\nWith those conditions, we can come up with the following dp.\n\nLet f(i,j)\n denote the number of subsequences of a[1...i]\n, that if we maintain T\n with the subsequence, s\n will become j\n.\n\nThen we have the following transitions:\n\nf(i?1,j)?f(i,j)\n (when we don't include the i\n-th element is S\n, here i?I\n)\nf(i?1,j)?f(i,max(j?1,0))\n (here, i<I\n, and the i\n-th element of A\n is -, so the number of numbers in T\n less than x\n decreases by one. If there is no such number, s\n remains 0\n)\nf(i?1,j)?f(i,j?1)\n (here, i>I\n, and and the i\n-th element of A\n is -, so the number of numbers in T\n less than x\n decreases by one.)\nf(i?1,j)?f(i,j)\n (here, the i\n-th element of A\n is + and its x\n is greater than X\n)\nf(i?1,j)?f(i,j+1)\n (here, the i\n-th element of A\n is + and its x\n is less than x\n or [equal to x\n but $i>I$] ) [this is to deal with same elements]\nThen we add ans\n by X×?i?0f(n,i)\n.",
    "hint": []
}