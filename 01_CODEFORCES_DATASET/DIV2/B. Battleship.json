{"link": "https://codeforces.com//contest/965/problem/B", "problemId": "178360", "problem_idx": "B", "shortId": "965B", "contest_number": "965", "problem_submissions": {"E": [37616803, 37610971, 41503980, 40197656, 37654456, 37654431, 40318499, 37616580], "D": [37611930, 37607040, 41317763, 37610171, 37612067, 37611181, 37613901, 37612776, 37612200, 37613391, 37614260, 37613271, 37613054, 37610290, 37613116, 37613596, 37613050, 37608849, 37612402], "C": [37610216, 37627090, 37608448, 37610114, 37609387, 37611531, 37607821, 37608408, 37609724, 37610645, 37613952, 37610230, 37612051, 37612323], "B": [37605866, 37605512, 37606428, 37607027, 37606169, 37607177, 37606751, 37606339, 37606193, 37607495, 37606252, 37606978, 37608449, 37606976, 37606755, 37607765, 37606148, 37607397], "A": [37604550, 37604452, 37604479, 37604681, 37604781, 37605030, 37604765, 37604552, 37605013, 37605227, 37604704, 37604697, 37605015, 37604932, 37605063, 37605445, 37634065, 37604890]}, "name": "B. Battleship", "statement": "Arkady is playing Battleship. The rules of this game aren\u2019t really\r\nimportant.There is a field of n\r\ntimes n cells. There should be exactly one k-decker on the field, i. e.\r\na ship that is k cells long oriented either horizontally or vertically.\r\nHowever, Arkady doesn\u2019t know where it is located. For each cell Arkady\r\nknows if it is definitely empty or can contain a part of the\r\nship.Consider all possible locations of the ship. Find such a cell that\r\nbelongs to the maximum possible number of different locations of the\r\nship.\r\n", "solutions": ["#include <bits/stdc++.h>\n\n#define ll long long\n#define pb push_back\n#define f first\n#define s second\n\nusing namespace std;\n\nconst int N = 1e2 + 10;\n\nint n, k;\n\nchar c[N][N];\n\nint cnt[N][N];\n\nint x = 1, y = 1;\n\nint main() {\n scanf(\"%d%d\", &n, &k);\n for (int i = 1; i <= n; i++) {\n  for (int j = 1; j <= n; j++) {\n   scanf(\" %c\", &c[i][j]);\n  }\n }\n for (int i = 1; i <= n; i++) {\n  int last = 0;\n  for (int j = 1; j <= n; j++) {\n   if (c[i][j] == '#') last = j;\n   else {\n    if (j - last >= k) {\n     for (int L = j - k + 1; L <= j; L++) {\n      cnt[i][L]++;\n     }\n    }\n   }\n  }\n }\n for (int j = 1; j <= n; j++) {\n  int last = 0;\n  for (int i = 1; i <= n; i++) {\n   if (c[i][j] == '#') last = i;\n   else {\n    if (i - last >= k) {\n     for (int L = i - k + 1; L <= i; L++) {\n      cnt[L][j]++;\n     }\n    }\n   }\n  }\n }\n for (int i = 1; i <= n; i++) {\n  for (int j = 1; j <= n; j++) {\n   if (cnt[i][j] > cnt[x][y]) {\n    x = i, y = j;\n   }\n  }\n }\n cout << x << ' ' << y;\n return 0;\n}\n"], "input": "", "output": "", "tags": ["implementation"], "dificulty": "1300", "interactive": false}