{
    "link": "https://codeforces.com//contest/1363/problem/F",
    "problemId": "636628",
    "problem_idx": "F",
    "shortId": "1363F",
    "contest_number": "1363",
    "problem_submissions": {
        "F": [
            82106115,
            82133417,
            82134663,
            82148859,
            82187672,
            82151422,
            82129291
        ],
        "B": [
            82089340,
            82061810,
            82102257,
            82051813,
            82052193,
            82054432,
            82059773,
            82050390,
            82052570,
            82057688,
            82062819,
            82061181,
            82063108,
            82056815,
            82052221,
            82048933,
            82053424,
            82060016
        ],
        "E": [
            82084929,
            82115560,
            82118841,
            82083744,
            82094219,
            82095201,
            82085310,
            82078785,
            82104191,
            82087813,
            82091268,
            82109972,
            82093877,
            82089726,
            82112505,
            82091430,
            82097365,
            82091233
        ],
        "D": [
            82073363,
            82098128,
            82116891,
            82105976,
            82086712,
            82108911,
            82113962,
            82100776,
            82093305,
            82115209,
            82090000,
            82113643,
            82117922,
            82095216,
            82114310,
            82120048,
            82118359
        ],
        "C": [
            82058814,
            82072569,
            82099263,
            82066157,
            82070197,
            82067166,
            82068534,
            82108126,
            82064962,
            82108652,
            82074021,
            82067732,
            82075440,
            82064472,
            82071898,
            82069396,
            82075513,
            82072756
        ],
        "A": [
            82051846,
            82136588,
            82081640,
            82048308,
            82048940,
            82048236,
            82052695,
            82047806,
            82048669,
            82057495,
            82055772,
            82048991,
            82055132,
            82048772,
            82048248,
            82057801,
            82048473,
            82052285
        ]
    },
    "name": "F. Rotating Substrings",
    "statement": "You are given two strings s and t, each of length n and consisting of\r\nlowercase Latin alphabets. You want to make s equal to t. You can\r\nperform the following operation on s any number of times to achieve it\r\nChoose any substring of s and rotate it clockwise once, that is, if the\r\nselected substring is s[l,l+1...r], then it becomes s[r,l,l + 1 ... r -\r\n1]. All the remaining characters of s stay in their position. For\r\nexample, on rotating the substring [2,4] , string \"\" becomes \"\". A\r\nstring a is a substring of a string b if a can be obtained from b by\r\ndeletion of several (possibly, zero or all) characters from the\r\nbeginning and several (possibly, zero or all) characters from the\r\nend.Find the minimum number of operations required to convert s to t, or\r\ndetermine that it\u2019s impossible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define pb push_back\n#define F first\n#define S second\n#define all(x) x.begin(), x.end()\n#define debug(x) cerr << #x << \" : \" << x << '\\n'\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef string str;\ntypedef pair<ll, ll> pll;\n\nconst ll Mod = 1000000007LL;\nconst int N = 2e3 + 10;\nconst ll Inf = 2242545357980376863LL;\nconst ll Log = 30;\n\nll dp[N][N];\nint cs[N][26];\nint ct[N][26];\n\nint Main(){\n\tint n;\n\tcin >> n;\n\tfor(int i = 0; i <= n; i++){\n\t\tmemset(cs[i], 0, sizeof cs[i]);\n\t\tmemset(ct[i], 0, sizeof ct[i]);\n\t\tfill(dp[i], dp[i] + n + 1, -Inf);\n\t}\n\tstr s, t;\n\tcin >> s >> t;\n\treverse(all(s));\n\treverse(all(t));\n\ts = '!' + s;\n\tt = '#' + t;\n\tfor(int i = 1; i <= n; i++){\n\t\tfor(int j = 0; j < 26; j++){\n\t\t\tcs[i][j] = cs[i - 1][j] + (s[i]-'a' == j);\n\t\t\tct[i][j] = ct[i - 1][j] + (t[i]-'a' == j);\n\t\t}\n\t}\n\tfor(int j = 0; j < 26; j++) if(cs[n][j] != ct[n][j]) return cout << \"-1\\n\", 0;\n\n\tfor(int i = 0; i <= n; i++) dp[i][0] = 0;\n\n\tfor(int i = 1; i <= n; i++){\n\t\tfor(int j = 1; j <= n; j++){\n\t\t\tdp[i][j] = dp[i - 1][j];\n\t\t\tif(s[i] == t[j]) dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1);\n\t\t\tif(cs[i][t[j] - 'a'] >= ct[j][t[j] - 'a']){\n\t\t\t\tdp[i][j] = max(dp[i][j], dp[i][j - 1]);\n\t\t\t}\n\t\t}\n\t}\n\tcout << n - dp[n][n] << '\\n';\n\treturn 0;\n}\n\nint main(){\n\tios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\tll T;\n\tcin >> T;\n\twhile(T--) Main();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "strings"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Rotating Substrings.json",
    "editorial_link": "https://codeforces.com//blog/entry/78202",
    "editorial": ": We note that a clockwise rotation is the same as taking a character at\r\nany position in the string, and inserting it anywhere to it\u00e2\u0080\u0099s left.\r\nThus, we process the strings from the end, build the suffixes and move\r\ntowards the prefix.: The answer is if both and do not have the same\r\ncount of every character. Else, we can prove that it is always possible\r\nto convert to .Now, let us remove the largest common suffix of both and\r\n. Now, using the key idea, we consider a move as picking a character at\r\nany position in and inserting it to it\u00e2\u0080\u0099s left. So, let us just \"pick up\"\r\ncharacters, and use them in any order as we iterate through . Our total\r\ncost is equal to the number of characters we picked overall.After\r\nremoving common suffixes, suppose the last character of is . Since the\r\nlast characters of and differ, we can pick up this . Now, we want to\r\nmake equal to , given that we can insert anywhere in .Let us consider\r\n(only for when , which means that we want to make by inserting some\r\ncharacters that we have picked. What characters can we pick? We can pick\r\nthe characters whose count in . The base case is . Now, let us write the\r\ntransitions for this dp solution. Suppose that . There are three\r\npossible transitions from : If the count of in is greater than it\u00e2\u0080\u0099s\r\ncount in , then we can reach the state . If , then we can reach the\r\nstate . We can pick up the character at position (and insert it later)\r\nto reach (with an additional cost of ). The final answer is . :\r\n"
}