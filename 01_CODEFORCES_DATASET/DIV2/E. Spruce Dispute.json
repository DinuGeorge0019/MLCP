{
    "link": "https://codeforces.com//contest/2108/problem/E",
    "problemId": "3362877",
    "problem_idx": "E",
    "shortId": "2108E",
    "contest_number": "2108",
    "problem_submissions": {
        "F": [
            318074076,
            318053056,
            317979016,
            318049609
        ],
        "E": [
            318006093,
            318008858,
            318200795,
            318048861,
            317993756,
            318024876,
            318050412,
            318276432,
            318147145,
            318024521
        ],
        "D": [
            317992477,
            317998675,
            319182607,
            317974400,
            321240302,
            317977258,
            317980895,
            317988260,
            317993109,
            317993702,
            317988454,
            317989488,
            317995058,
            317996633,
            317997808,
            317997816
        ],
        "B": [
            317976080,
            317965188,
            317963351,
            317965896,
            317963448,
            318001512,
            317970540,
            317966965,
            317963770,
            317963355,
            317972547,
            317967881,
            317968086,
            317964661,
            317966671,
            317966562
        ],
        "C": [
            317971653,
            317968542,
            317966737,
            318055757,
            317968604,
            317966809,
            317989087,
            317975119,
            317971049,
            317970883,
            317968958,
            317966636,
            317975399,
            317977731,
            317971385,
            317972596,
            317970612,
            317972254
        ],
        "A": [
            317959967,
            317960152,
            317960238,
            317962142,
            317960060,
            317963735,
            317962697,
            317960613,
            317959940,
            317959918,
            317964465,
            317960821,
            317962779,
            317960858,
            317960520,
            317959969
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142512",
    "editorial": "SolutionLet s assume we have already removed one of the edges from the\r\noriginal tree. Then, we are left with a tree containing an even number\r\nof vertices, namely .Note that the maximum possible sum of distances\r\nbetween same-colored balls in this tree will be achieved if, for every\r\nedge, all vertices in its smaller subtree are of different colors. In\r\nthat case, the edge will contribute the maximum possible number of times\r\nto the answer specifically, , where and are the sizes of the subtrees\r\nconnected by this edge (since, obviously, no more paths can pass through\r\nthis edge).Great now let s root our tree at its centroid, which is a\r\nvertex that splits the tree into subtrees whose sizes do not exceed half\r\nof the total size. It can be proven that such a vertex always exists in\r\nany tree (and if there are two such vertices, we can pick either).Now,\r\nlet s divide all vertices into groups based on which child subtree of\r\nthe centroid they belong to, adding the centroid itself to the smallest\r\ngroup. Notice that the sizes of all groups still do not exceed .\r\nTherefore, we can pair up the vertices in such a way that each pair\r\ncontains vertices from different groups. This can be done greedily using\r\na heap in , or by running DFS from the centroid and coloring vertices\r\nmodulo (clearly, with this method, no group will have two vertices of\r\nthe same color), which has complexity .Thus, we are left to determine\r\nwhich edge we should remove so that the total sum of the minimal subtree\r\nsizes across all edges in the original tree decreases as little as\r\npossible. Note that, since initially the tree has an odd number of\r\nvertices, its centroid is uniquely defined and will not change no matter\r\nwhich edge we remove. At the same time, since all paths pass through the\r\ncentroid, the total sum of their lengths can be rewritten as the sum of\r\ndistances to the centroid.Now, let s make two observations: It is more\r\nbeneficial to remove a leaf than any other type of vertex. Among all\r\nleaves, it is best to remove the one closest to the centroid. The second\r\nobservation follows directly from the first and the earlier remark, so\r\nwe only need to justify the first one. But this is fairly obvious: when\r\nwe remove an edge, besides subtracting the depth of its nearest vertex,\r\nwe also decrease the depths of all vertices in its subtree by one.\r\nTherefore, it will always be better to remove deeper edges rather than\r\nshallower ones.As a result, after finding the centroid in , we get an\r\noverall complexity of (if we use a heap) or .\r\n",
    "name": "E. Spruce Dispute",
    "statement": "It’s already a hot April outside, and Polycarp decided that this is the\r\nperfect time to finally take down the spruce tree he set up several\r\nyears ago. As he spent several hours walking around it, gathering his\r\nstrength, he noticed something curious: the spruce is actually a tree^{\r\ntext{ }} and not just any tree, but one consisting of an number of\r\nvertices n. Moreover, on n-1 of the vertices hang Christmas ornaments,\r\npainted in exactly\r\nfrac{n-1}{2} distinct colors, with exactly two ornaments painted in each\r\ncolor. The remaining vertex, as tradition dictates, holds the tree’s\r\ntopper.At last, after several days of mental preparation, Polycarp began\r\ndismantling the spruce. First, he removed the topper and had already\r\nstarted taking apart some branches when suddenly a natural question\r\nstruck him: how can he remove one of the tree’s edges and rearrange the\r\nornaments in such a way that the sum of the lengths of the simple paths\r\nbetween ornaments of the same color is as large as possible?In this\r\nproblem, removing an edge from the tree is defined as follows: choose a\r\npair of adjacent vertices a and b (a < b), then remove vertex b from the\r\ntree and reattach all of b’s adjacent vertices (except for a) directly\r\nto a.Polycarp cannot continue dismantling his spruce until he gets an\r\nanswer to this question. However, checking all possible options would\r\ntake him several more years. Knowing your experience in competitive\r\nprogramming, he turned to you for help. But can you solve this\r\ndispute?^{\r\ntext{ }}A tree is a connected graph without cycles.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "greedy",
        "implementation",
        "shortest paths",
        "trees"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Spruce Dispute.json",
    "hint": []
}