{
    "link": "https://codeforces.com//contest/1711/problem/D",
    "problemId": "1478275",
    "problem_idx": "D",
    "shortId": "1711D",
    "contest_number": "1711",
    "problem_submissions": {
        "A": [
            165578923,
            165559453,
            189417090,
            165538098,
            165533305,
            165534362,
            165537479,
            165540277,
            165537659,
            165536265,
            165836113,
            165533773,
            165533960,
            165535608,
            166312661,
            165550998,
            165533673,
            165557415,
            165534735,
            165558698,
            165533282,
            165534923,
            166886724,
            166094209,
            165540754
        ],
        "B": [
            165578407,
            165564940,
            189417152,
            165552897,
            165551316,
            165542921,
            165547165,
            165551326,
            165556741,
            165566342,
            165836125,
            165547476,
            165543019,
            165548074,
            166312715,
            165551199,
            165548183,
            165547633,
            165572268,
            165546211,
            165546096,
            165547729,
            166886716,
            166094234,
            165583963
        ],
        "C": [
            165574388,
            165570372,
            165562482,
            165559339,
            165555577,
            165557987,
            165569309,
            165559444,
            165586755,
            165556853,
            165559252,
            165559547,
            165555893,
            165556660,
            165579924,
            165578564,
            165557522,
            165560139,
            165563965,
            165563704
        ],
        "D": [
            165569736,
            165586345,
            165572492,
            165576010,
            165565749,
            165631845
        ],
        "E": [
            165553824,
            165558329,
            165584924,
            165583460,
            165566248,
            165570285,
            165566040,
            166224520,
            165570875,
            165556525,
            165582622,
            165581079,
            165578137,
            165583681,
            165573538,
            165567313,
            165584843,
            165585949,
            165584028,
            165576145
        ]
    },
    "name": "D. Rain",
    "statement": "You are the owner of a harvesting field which can be modeled as an\r\ninfinite line, whose positions are identified by integers.It will rain\r\nfor the next n days. On the i-th day, the rain will be centered at\r\nposition x_i and it will have intensity p_i. Due to these rains, some\r\nrainfall will accumulate; let a_j be the amount of rainfall accumulated\r\nat integer position j. Initially a_j is 0, and it will increase by\r\nmax(0,p_i-|x_i-j|) after the i-th day\u2019s rain.A flood will hit your field\r\nif, at any moment, there is a position j with accumulated rainfall\r\na_j>m.You can use a magical spell to erase day\u2019s rain, i.e., setting\r\np_i=0. For each i from 1 to n, check whether in case of erasing the i-th\r\nday\u2019s rain there is no flood.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\n#define ll long long int\nint T,n,m,cnt;\nstruct point{\n\tll pos,val;\n}po[600006];\nint X[200000];\nint Y[200000];\nbool comp(point p1,point p2)\n{\n\tif(p1.pos==p2.pos)\n\t\treturn p1.val<p2.val;\n\treturn p1.pos<p2.pos;\n}\nll sum1[600006];\nll minL,maxU;\nvoid modify(ll xA,ll yA,ll xB,ll yB)\n{\n\tif(xA>xB) return;\n\tyA-=m; yB-=m;\n\tif(yA<=0&&yB<=0) return;\n\tif(yA>0) maxU=max(maxU,xA+yA);\n\tif(yB>0) maxU=max(maxU,xB+yB);\n\tif(yA>0) minL=min(minL,xA-yA);\n\tif(yB>0) minL=min(minL,xB-yB);\n\treturn;\n}\n\nint main(void)\n{\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tpo[0].val=0;\n\t\tpo[0].pos=1ll<<35;\n\t\tpo[1].val=0;\n\t\tpo[1].pos=-1ll<<35;\n\t\tcnt=2;\n\t\tminL=1ll<<59;\n\t\tmaxU=-1ll<<59;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tscanf(\"%d%d\",&X[i],&Y[i]);\n\t\t\tpo[cnt].pos=X[i]-Y[i]+1;\n\t\t\tpo[cnt].val=1; cnt++;\n\t\t\tpo[cnt].pos=X[i]+1;\n\t\t\tpo[cnt].val=-2; cnt++;\n\t\t\tpo[cnt].pos=X[i]+Y[i]+1;\n\t\t\tpo[cnt].val=1; cnt++;\n\t\t}\n\t\tsort(po,po+cnt,comp);\n\t\tsum1[0]=0;\n\t\tll sum2=0;\n\t\tfor(int i=1;i<cnt-1;i++){\n\t\t\tsum1[i]=sum1[i-1]+po[i].val;\n\t\t\tmodify(po[i].pos,sum2+sum1[i],po[i+1].pos-1,sum2+sum1[i]*(po[i+1].pos-po[i].pos));\n\t\t\tsum2+=sum1[i]*(po[i+1].pos-po[i].pos);\n\t\t}\n\t\tfor(int i=0;i<n;i++)\n\t\t\tputchar('0'+((X[i]+Y[i]>=maxU)&&(X[i]-Y[i]<=minL)));\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "data structures",
        "sortings"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Rain.json",
    "editorial_link": "https://codeforces.com//blog/entry/105232",
    "editorial": "Let's call position j\n a key position if it is the center position of a rain. i.e. there exists i\n so that xi=j\n.\n\nYou can calculate aj\n for all key positions j\n using the difference array.\n\nLet d1j=aj?aj?1\n, d2j=d1j?d1j?1\n, then the i\n-th day's rain will change it as follows:\n\nd2xi?pi+1?d2xi?pi+1+1\n\nd2xi+1?d2xi+1?2\n\nd2xi+pi+1?d2xi+pi+1+1\n\nThis can be calculated efficiently using prefix sums.\n\nWe say that a position j\n is valid if aj?m\n.\n\nNow, consider an invalid position j\n; erasing the i\n-th day's rain will make it valid if and only if pi?|xi?j|?aj?m\n.\n\nOne can check that the region of (x,p)\n satisfying such an inequality is a quadrant rotated 45?\n anticlockwise and translated. And in particular, even the intersections of two such regions have the same structure and can be computed easily (to avoid using floating point numbers, one can multiply all xi,pi\n by 2\n).\n\nIn the end, for each i\n, you only need to check whether point (xi,pi)\n belongs to such region."
}