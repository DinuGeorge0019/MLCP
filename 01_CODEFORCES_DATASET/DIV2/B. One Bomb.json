{
    "link": "https://codeforces.com//contest/699/problem/B",
    "problemId": "65783",
    "problem_idx": "B",
    "shortId": "699B",
    "contest_number": "699",
    "problem_submissions": {
        "F": [
            19254979
        ],
        "D": [
            19246128,
            19238145,
            19243994,
            19244671,
            19244055,
            19240256,
            19244440,
            19243946,
            19242445,
            19244114,
            19244888,
            19248232,
            19245369,
            19243420,
            19242965,
            19246841,
            19244016,
            19246279,
            19245771,
            19248614
        ],
        "C": [
            19238575,
            19234685,
            19237143,
            19235854,
            19236952,
            19235501,
            19237560,
            19233107,
            19236256,
            19238050,
            19237219,
            19240071,
            19233148,
            19236181,
            19237922,
            19238682,
            19238483,
            19238795,
            19237556,
            19239587
        ],
        "B": [
            19235764,
            19233222,
            19235273,
            19233766,
            19234773,
            19233727,
            19234737,
            19236748,
            19232804,
            19234744,
            19234328,
            19236200,
            19240174,
            19238029,
            19236795,
            19234746,
            19234487,
            19234011,
            19235700,
            19235759
        ],
        "A": [
            19233122,
            19232168,
            19232143,
            19232104,
            19232384,
            19232378,
            19232697,
            19238171,
            19232180,
            19232809,
            19232842,
            19233530,
            19236710,
            19232307,
            19233403,
            19232204,
            19232321,
            19232485,
            19232270,
            19233389
        ]
    },
    "name": "B. One Bomb",
    "statement": "You are given a description of a depot. It is a rectangular checkered\r\nfield of size. Each cell in a field can be empty (\"\") or it can be\r\noccupied by a wall (\"\"). You have one bomb. If you lay the bomb at the\r\ncell , then after triggering it will wipe out all walls in the row and\r\nall walls in the column .You are to determine if it is possible to wipe\r\nout all walls in the depot by placing and triggering . The bomb can be\r\nlaid both in an empty cell or in a cell occupied by a wall.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n#include <math.h>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <bitset>\nusing namespace std;\n\n#define bll long long\n#define dou double\n#define For(i,a,b) for (int i=(a),_##i=(b); i<=_##i; i++)\n#define Rof(i,a,b) for (int i=(a),_##i=(b); i>=_##i; i--)\n#define rep(i,a,b) for (int i=(a),_##i=(b); i<=_##i; i++)\n#define rek(i,a,b) for (int i=(a),_##i=(b); i>=_##i; i--)\n#define Mem(a,b) memset(a,b,sizeof(a))\n#define Cpy(a,b) memcpy(a,b,sizeof(b))\n//__builtin_popcountll\n\nconst int maxn=1000+100;\nint N,M,X[maxn],Y[maxn],sum,ansx,ansy;\nchar s[maxn][maxn];\n\nbool check()\n{\n    bool flag=0;\n    For(i,1,N) \n        For(j,1,M)\n        {\n            int ret=X[i]+Y[j]-(s[i][j]=='*');\n            if (ret==sum) { ansx=i,ansy=j; return 1;} \n        }\n    return 0;\n}\n\nint main(int argc, char* argv[])\n{\n    for (; scanf(\"%d%d\",&N,&M)!=EOF; )\n    {\n        For(i,1,N) scanf(\"%s\",s[i]+1);\n        For(i,1,N)\n        {\n            X[i]=0;\n            For(j,1,M)\n                X[i]+=(s[i][j]=='*');\n        }\n        For(j,1,M)\n        {\n            Y[j]=0;\n            For(i,1,N)\n                Y[j]+=(s[i][j]=='*');\n        }\n        sum=0;\n        For(i,1,N) For(j,1,M) sum+=(s[i][j]=='*');\n        if (check()) { printf(\"YES\\n\"); printf(\"%d %d\\n\",ansx,ansy); }\n            else printf(\"NO\\n\");\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. One Bomb.json",
    "editorial_link": "https://codeforces.com//blog/entry/46148",
    "editorial": "To solve this problem we need to calculate two arrays and , where must\r\nbe equal to the number of walls in the column number and must be equal\r\nto the number of walls in the row number . Also let\u00e2\u0080\u0099s store the total\r\nnumber of walls in the variable . Now we need to look over the cells.\r\nLet the current cell be . Let\u00e2\u0080\u0099s count the value how many walls will\r\ndestroy the bomb planted in the cell : . If the cell has a wall we count\r\nit twice, so we need to subtract from the . If we found the answer and\r\nneed to plant the bomb in the cell . If there is no such cell we need to\r\nprint \"\".\r\n"
}