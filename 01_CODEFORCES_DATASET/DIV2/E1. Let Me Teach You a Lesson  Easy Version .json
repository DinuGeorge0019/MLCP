{
    "link": "https://codeforces.com//contest/1995/problem/E1",
    "problemId": "2772829",
    "problem_idx": "E1",
    "shortId": "1995E1",
    "contest_number": "1995",
    "problem_submissions": {
        "D": [
            272131872,
            272130569,
            272133863,
            272134415,
            272137449,
            272131543,
            272154573,
            272151706,
            272151276,
            272141813,
            272139057,
            272151246,
            272151986,
            272153217,
            272157571,
            272148679,
            272149814,
            272486180,
            272157625
        ],
        "C": [
            272114157,
            272113319,
            272111654,
            272121111,
            272111819,
            272119019,
            272113803,
            272118860,
            272116736,
            272123439,
            272121989,
            272122933,
            272112629,
            272120005,
            272111612,
            272116249,
            272108377,
            272486053,
            272120187
        ],
        "B2": [
            272102449,
            272103267,
            272100652,
            272099671,
            272128930,
            272108225,
            272104913,
            272104116,
            272101309,
            272106328,
            272112408,
            272104562,
            272129604,
            272109901,
            272102807,
            272107257,
            272115397,
            272485973,
            272104395
        ],
        "B1": [
            272096864,
            272101887,
            272104047,
            272103720,
            272094726,
            272108617,
            272105391,
            272104979,
            272103341,
            272103459,
            272111706,
            272103650,
            272098283,
            272103066,
            272101216,
            272107954,
            272116416,
            272485941,
            272098022
        ],
        "A": [
            272090620,
            272090574,
            272092410,
            272090882,
            272090527,
            272090716,
            272091404,
            272090846,
            272090748,
            272091332,
            272090661,
            272091173,
            272091300,
            272090978,
            272091057,
            272091479,
            272092003,
            272485907,
            272092660
        ],
        "E1": [
            272173791,
            272497229,
            272245140
        ],
        "E2": [
            272497185,
            272274307
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131851",
    "editorial": "Why independently?Let a desk have knights with intelligence , and the\r\nopposite one with , . Since , the minimal total intelligence on these\r\ndesks is greater iff the maximal total intelligence is less.\r\n",
    "name": "E1. Let Me Teach You a Lesson  Easy Version ",
    "statement": "Arthur is giving a lesson to his famous 2 n knights. Like any other\r\nstudents, they’re sitting at the desks in pairs, but out of habit in a\r\ncircle. The knight 2 i - 1 is sitting at the desk with the knight 2\r\ni.Each knight has , which can be measured by an integer. Let’s denote\r\nthe intelligence of the i-th knight as a_i. Arthur wants the maximal\r\ndifference in total intelligence over all pairs of desks to be as small\r\nas possible. More formally, he wants to minimize\r\nmax\r\nlimits_{1\r\nle i\r\nle n} (a_{2 i - 1} + a_{2 i}) -\r\nmin\r\nlimits_{1\r\nle i\r\nle n} (a_{2 i - 1} + a_{2 i}).However, the Code of Chivalry only allows\r\nswapping the opposite knights in the circle, i.e., Arthur can\r\nsimultaneously perform a_i := a_{i + n}, a_{i + n} := a_i for any 1\r\nle i\r\nle n. Arthur can make any number of such swaps. What is the best result\r\nhe can achieve?\r\n",
    "solutions": [
        "// superyijin AK IOI// wangsiyuanZP AK IOI#pragma GCC optimize(2)#pragma GCC optimize(3)#include <bits/stdc++.h>#define int long longusing namespace std;int n, a[4010], b[8010], dp[4010][2][2];int f(int x){\tif (x <= n) return x + n;\telse return x - n;}int fff(int x){\tif (x & 1) return x + 1;\telse return x + n + 1;}signed main(){\tios::sync_with_stdio(0);\tcin.tie(0), cout.tie(0);\tint t;\tcin >> t;\twhile (t--)\t{\t\tint m = 0;\t\tcin >> n;\t\tfor (int i = 1; i <= 2 * n; i++) cin >> a[i];\t\tfor (int i = 2; i <= 2 * n; i += 2)\t\t{\t\t\tb[++m] = a[i - 1] + a[i];\t\t\tb[++m] = a[f(i - 1)] + a[i];\t\t\tb[++m] = a[i - 1] + a[f(i)];\t\t\tb[++m] = a[f(i - 1)] + a[f(i)];\t\t}\t\tsort(b + 1, b + m + 1);\t\tint ans = 1e18;\t\tfor (int i = 1; i <= m; i++)\t\t{\t\t\tint x = b[i];\t\t\tfor (int j = 0; j <= n; j++) for (int i1 = 0; i1 <= 1; i1++) for (int i2 = 0; i2 <= 1; i2++) dp[j][i1][i2] = 1e18;\t\t\tif (n % 2 == 0)\t\t\t{\t\t\t\tdp[0][0][0] = 0;\t\t\t\tfor (int j = 2; j <= n; j += 2)\t\t\t\t{\t\t\t\t\tint x1 = a[j - 1] + a[j], x2 = a[f(j - 1)] + a[j], x3 = a[j - 1] + a[f(j)], x4 = a[f(j - 1)] + a[f(j)];\t\t\t\t\tif (min(x1, x4) >= x) dp[j][0][0] = min(dp[j][0][0], max(dp[j - 2][0][0], max(x1, x4)));\t\t\t\t\tif (min(x2, x3) >= x) dp[j][0][0] = min(dp[j][0][0], max(dp[j - 2][0][0], max(x2, x3)));\t\t\t\t}\t\t\t\tans = min(ans, dp[n][0][0] - x);\t\t\t}\t\t\telse\t\t\t{\t\t\t\tdp[0][0][0] = dp[0][1][1] = 0;\t\t\t\tfor (int j = 1; j <= n - 1; j++)\t\t\t\t{\t\t\t\t\tfor (int i1 = 0; i1 <= 1; i1++) for (int i2 = 0; i2 <= 1; i2++) for (int i3 = 0; i3 <= 1; i3++)\t\t\t\t\t{\t\t\t\t\t\tint k1 = fff(j) - 1, k2 = fff(j);\t\t\t\t\t\tif (i2) k1 = f(k1);\t\t\t\t\t\tif (i3) k2 = f(k2);\t\t\t\t\t\tif (a[k1] + a[k2] < x) continue;\t\t\t\t\t\tdp[j][i1][i3] = min(dp[j][i1][i3], max(dp[j - 1][i1][i2], a[k1] + a[k2]));\t\t\t\t\t}\t\t\t\t}\t\t\t\tfor (int i1 = 0; i1 <= 1; i1++) for (int i2 = 0; i2 <= 1; i2++)\t\t\t\t{\t\t\t\t\tint k1 = n, k2 = n + 1;\t\t\t\t\tif (i1) k2 = f(k2);\t\t\t\t\tif (i2) k1 = f(k1);\t\t\t\t\tif (a[k1] + a[k2] < x) continue;\t\t\t\t\tans = min(ans, max(dp[n - 1][i1][i2], a[k1] + a[k2]) - x);\t\t\t\t}\t\t\t}\t\t}\t\tcout << ans << '\\n';\t}\treturn 0;}// superyijin AK IOI// wangsiyuanZP AK IOI"
    ],
    "input": "",
    "output": "",
    "tags": [
        "2-sat",
        "data structures",
        "dp",
        "matrices",
        "two pointers"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E1. Let Me Teach You a Lesson  Easy Version .json",
    "hint": [
        "Hint 1 Consider cases of odd and even . Which one is simpler?",
        "Hint 2 If you reorder desks/knights in a way that you swap neighbors (i.e. with , with , ..., with ) instead of opposite knights, it'll probably become easier to think about this problem. We will use this notation from now on.",
        "Hint 3 You're allowed to run in . Wouldn't it have sense to fix some entity and solve in linear time for fixed entity?",
        "Hint 4 DP."
    ]
}