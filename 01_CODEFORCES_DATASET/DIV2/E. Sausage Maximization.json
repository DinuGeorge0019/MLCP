{"link": "https://codeforces.com//contest/282/problem/E", "problemId": "2739", "problem_idx": "E", "shortId": "282E", "contest_number": "282", "problem_submissions": {"C": [3308394, 3301282, 3301694, 3302705, 3302330, 3303854, 3303503, 3306330, 3302565, 3304172, 3301827, 3306234, 3301968, 3303126, 3305787, 3304106, 3308992, 3303892], "D": [3307917, 3308314, 3313040, 3309690, 3307151, 3308890, 3310469, 3310597, 3306177, 3313465], "E": [3306165, 3309048, 3304983, 3304322, 3304461, 3306265, 3306082, 3304910, 3308043, 3302292, 3312468, 3305728, 3309782, 3317587, 3317543, 3317532, 3317526, 3317498, 3310431], "B": [3304464, 3302327, 3303236, 3304724, 3301374, 3302658, 3301911, 3307835, 3301590, 3300782, 3305075, 3301928, 3306464, 3306058, 3305193, 3305485, 3307741, 3307907], "A": [3299445, 3300629, 3299774, 3299328, 3299424, 3300897, 3299676, 3309023, 3299658, 3299312, 3299355, 3299414, 3299685, 3300098, 3300893, 3301113, 3299923, 3300635]}, "name": "E. Sausage Maximization", "statement": "The Bitlandians are quite weird people. They have their own problems and\r\ntheir own solutions. They have their own thoughts and their own beliefs,\r\nthey have their own values and their own merits. They have their own\r\ndishes and their own sausages!In Bitland a sausage is an array of\r\nintegers! A sausage\u2019s deliciousness is equal to the bitwise excluding OR\r\n(the operation) of all integers in that sausage. One day, when Mr.\r\nBitkoch (the local cook) was going to close his BitRestaurant, BitHaval\r\nand BitAryo, the most famous citizens of Bitland, entered the restaurant\r\nand each ordered a sausage.But Mr. Bitkoch had only one sausage left. So\r\nhe decided to cut a prefix (several, may be zero, first array elements)\r\nof the sausage and give it to BitHaval and a postfix (several, may be\r\nzero, last array elements) of the sausage and give it to BitAryo. Note\r\nthat one or both pieces of the sausage can be empty. Of course, the cut\r\npieces mustn\u2019t intersect (no array element can occur in both pieces).The\r\npleasure of BitHaval and BitAryo is equal to the bitwise XOR of their\r\nsausages\u2019 deliciousness. An empty sausage\u2019s deliciousness equals\r\nzero.Find a way to cut a piece of sausage for BitHaval and BitAryo that\r\nmaximizes the pleasure of these worthy citizens.\r\n", "solutions": ["#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <map>\n#include <vector>\n#include <queue>\n#include <iostream>\n#include <string>\nusing namespace std;\n#define LL long long\n#define maxn 200100\n#define maxe 210000\n\nint ch[4200000][2],cnt;\nlong long get(long long n)\n{\n\tint i,t=0,j;\n\tlong long ans=0;\n\tfor(i=40;i>=0;i--)\n\t{\n\t\tif(n&(1ll<<i))\n\t\t\tj=1;\n\t\telse\n\t\t\tj=0;\n\n\t\tif(ch[t][!j])\n\t\t\tt=ch[t][!j],ans+=(1ll<<i);\n\t\telse\n\t\t\tt=ch[t][j];\n\t}\n\treturn ans;\n}\nvoid ins(long long n)\n{\n\tint i,t=0,j;\n\tfor(i=40;i>=0;i--)\n\t{\n\t\tif(n&(1ll<<i))\n\t\t\tj=1;\n\t\telse\n\t\t\tj=0;\n\t\tif(ch[t][j])\n\t\t\tt=ch[t][j];\n\t\telse\n\t\t\tch[t][j]=++cnt,t=cnt;\n\t}\n}\nlong long a[110000];\n\nint main()\n{\n\tint n,i,j;\n\tcin>>n;\n\tlong long s=0;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%I64d\",&a[i]);\n\t\ts^=a[i];\n\t}\n\tins(s);\n\tlong long tmp,ans=0,now=0;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tnow^=a[i];\n\t\ttmp=get(now);\n\t\tif(tmp>ans)\n\t\t\tans=tmp;\n\t\tins(now^s);\n\t}\n\tif(s>ans)\n\t\tans=s;\n\tcout<<ans<<endl;\n}"], "input": "", "output": "", "tags": ["bitmasks", "data structures", "trees"], "dificulty": "2200", "interactive": false}