{"link": "https://codeforces.com//contest/255/problem/D", "problemId": "2398", "problem_idx": "D", "shortId": "255D", "contest_number": "255", "problem_submissions": {"E": [2781064, 2782909, 2779985, 2800669, 2783123], "D": [2779503, 2780531, 2779855, 7301531, 2779527, 2780996, 2780563, 2778460, 2780405, 2781582, 2779013, 2778273, 2780817, 2782180, 2778681, 2781974, 2781214, 2779597], "C": [2777137, 2775883, 2776972, 2778713, 2776597, 2777246, 2780722, 2776279, 2776811, 2784598, 2781515, 2781103, 2782432, 2778575, 2778477, 2781231, 2777192, 2777224, 2777892], "B": [2774906, 2775664, 2774618, 2774745, 2774652, 2775712, 2774692, 2774662, 2775040, 2776057, 2774786, 2775382, 2774585, 2775601, 2774197, 2775299, 2777977, 2781298], "A": [2773818, 2774831, 2773771, 2774023, 2773753, 2773918, 2773887, 2773828, 2774266, 2774889, 2773857, 2774596, 2773892, 2774053, 2773684, 2774322, 2773855, 2773670]}, "name": "D. Mr. Bender and Square", "statement": "Mr. Bender has a digital table of size , each cell can be switched on or\r\noff. He wants the field to have at least switched on squares. When this\r\ncondition is fulfilled, Mr Bender will be happy.We\u2019ll consider the table\r\nrows numbered from top to bottom from 1 to , and the columns numbered\r\nfrom left to right from 1 to . Initially there is exactly one switched\r\non cell with coordinates ( is the row number, is the column number), and\r\nall other cells are switched off. Then each second we switch on the\r\ncells that are off but have the side-adjacent cells that are on.For a\r\ncell with coordinates the side-adjacent cells are cells with coordinates\r\n, , , .In how many seconds will Mr. Bender get happy?\r\n", "solutions": ["#include<cstdio>\n\nint n,x,y,c;\n\nlong long calc(int v){\n    if(v<=0)\n        return 0;\n    return 1LL*v*v;\n}\nlong long calc2(int v){\n    if(v<=0)\n        return 0;\n    return 1LL*v*(v+1)/2;\n}\n\nbool check(int t){\n    long long outer=0;\n    outer=1LL*(t+1)*(t+1)*2-1LL*(t+1)*2+1;\n\n    outer-=calc(t+1-x);\n    outer-=calc(t+1-y);\n    outer-=calc(t-(n-x));\n    outer-=calc(t-(n-y));\n\n    outer+=calc2(t-x-y+1);\n    outer+=calc2(t-x-(n-y));\n    outer+=calc2(t-(n-x)-y);\n    outer+=calc2(t-(n-x)-(n-y)-1);\n\n    if(outer>=c)\n        return true;\n    else\n        return false;\n}\n\nint main(){\n    scanf(\"%d%d%d%d\",&n,&x,&y,&c);\n    int l=0,r=n*2,ans;\n    while(l<=r){\n        int mid=(l+r)>>1;\n        if(check(mid)){\n            ans=mid;r=mid-1;\n        }else\n            l=mid+1;\n    }\n    printf(\"%d\\n\",ans);\n\n    return 0;\n}"], "input": "", "output": "", "tags": ["binary search", "implementation", "math"], "dificulty": "1800", "interactive": false}