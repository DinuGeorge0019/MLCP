{
    "link": "https://codeforces.com//contest/2064/problem/E",
    "problemId": "3209697",
    "problem_idx": "E",
    "shortId": "2064E",
    "contest_number": "2064",
    "problem_submissions": {
        "F": [
            306407892,
            306425196,
            306377965,
            306528822,
            306420583,
            306436938,
            306464619,
            306464611,
            306464596,
            306421840,
            306436020,
            306431617
        ],
        "E": [
            306390714,
            306398471,
            306384310,
            306394422,
            306398127,
            306399878,
            306406503,
            306383184,
            306400855,
            306401726,
            306402720,
            306406500,
            306407308,
            306407643
        ],
        "D": [
            306371870,
            306386641,
            306395969,
            306366170,
            306368905,
            306376156,
            306376541,
            306371606,
            306373885,
            306397500,
            306381946,
            306383232,
            306376685,
            306374721,
            306378738,
            306378728,
            306379129
        ],
        "C": [
            306354396,
            306362052,
            306353937,
            306355169,
            306355714,
            306353717,
            306358223,
            306359445,
            306355168,
            306369168,
            306356490,
            306351942,
            306356412,
            306355663,
            306365036,
            306361215,
            306362138
        ],
        "B": [
            306350175,
            306351645,
            306349804,
            306350391,
            306352487,
            306349346,
            306350952,
            306351840,
            306351364,
            306350764,
            306349120,
            306348178,
            306353114,
            306350171,
            306353103,
            306355161,
            306356448
        ],
        "A": [
            306345365,
            306345586,
            306346094,
            306345382,
            306344838,
            306344890,
            306345366,
            306345254,
            306346099,
            306344812,
            306345138,
            306344813,
            306347979,
            306345325,
            306346230,
            306349362
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/138912",
    "editorial": "SolutionThe first thing to notice is that the first column of sand will\r\nbe identical to after sorting. This means that it must be true that .Now\r\nthat we know we need to find how many ways we can re-arrange such that\r\nthe sand layout is the same. Something we can notice is that must be\r\nable to obtainable from by only swapping values of the same colour. This\r\nis true because if we remove all sand blocks that are not of any\r\nspecific colour (i.e. keeping only one colour), then by examining the\r\nnew sand layout we can find what the values of the colour we didn’t\r\nremove are.Now lets isolate a single colour and try to find the number\r\nof ways we can arrange it. One thing we can notice is that we can swap\r\nan arbitrary and without changing the final sand layout if and only if\r\nevery number of different colour between and is strictly less than both\r\nand . After staring at this operation enough you will see that each\r\nnumber in has a certain range of positions it can take. I think the\r\neasiest way to calculate this range is to use DSU, iterate in order of\r\nand merge with everything it can reach in one move, storing leftmost and\r\nrightmost element currently in the component to be fast enough.It is\r\nimportant to note that these ranges we are calculating have some form of\r\ntree structure, because of how we calculated them every pair of ranges\r\nwill either not intersect or one will contain the other. This means that\r\nif we iterate in order of size and \"fix\" a position in each range we\r\nwill calculate the answer.There is actually no need to build the tree,\r\nand instead we can multiply by the size of each DSU component as we are\r\nmerging, after each merge decreasing the size of the component by .\r\n",
    "name": "E. Mycraft Sand Sort",
    "statement": "Steve has a permutation^{\r\ntext{ }} p and an array c, both of length n. Steve wishes to sort the\r\npermutation p. Steve has an infinite supply of coloured sand blocks, and\r\nusing them he discovered a physics-based way to sort an array of numbers\r\ncalled gravity sort. Namely, to perform gravity sort on p, Steve will do\r\nthe following: For all i such that 1\r\nle i\r\nle n, place a sand block of color c_i in position (i, j) for all j where\r\n1\r\nle j\r\nle p_i. Here, position (x, y) denotes a cell in the x-th row from the\r\ntop and y-th column from the left. Apply downwards gravity to the array,\r\nso that all sand blocks fall as long as they can fall. Alex looks at\r\nSteve’s sand blocks after performing gravity sort and wonders how many\r\npairs of arrays (p’,c’) where p’ is a permutation would have resulted in\r\nthe same layout of sand. Note that the original pair of arrays (p, c)\r\nwill always be counted.Please calculate this for Alex. As this number\r\ncould be large, output it modulo 998\r\n,244\r\n,353.^{\r\ntext{ }}A permutation of length n is an array consisting of n distinct\r\nintegers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray), and [1,3,4] is also not a permutation (n=3 but there is a 4 in\r\nthe array).\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "data structures",
        "dsu",
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Mycraft Sand Sort.json",
    "hint": []
}