{
    "link": "https://codeforces.com//contest/1255/problem/D",
    "problemId": "475556",
    "problem_idx": "D",
    "shortId": "1255D",
    "contest_number": "1255",
    "problem_submissions": {
        "E1": [
            65376345,
            65362349,
            65379019,
            65379231,
            65381365,
            65366418,
            65380019,
            65372166,
            65377390,
            65381751,
            65383634,
            65381490,
            65380093,
            65389225,
            65369401,
            65379688,
            65378584,
            65380932,
            65379653,
            65385144
        ],
        "E2": [
            65376264,
            65385821,
            65381572,
            65386523,
            65384540,
            65381279,
            65389375,
            65384984,
            65389091,
            65691059,
            65704614,
            65451948
        ],
        "F": [
            65375779,
            65385211,
            65388490,
            65389131,
            65387550,
            65391223,
            65696815,
            65727810,
            65496537
        ],
        "D": [
            65370945,
            65376492,
            65370356,
            65373732,
            65376315,
            65359238,
            65370229,
            65377454,
            65373608,
            65377110,
            65372789,
            65372691,
            65369056,
            65377955,
            65368879,
            65372201,
            65375025,
            65360545,
            65373196
        ],
        "C": [
            65364209,
            65367561,
            65365185,
            65370379,
            65369180,
            65375282,
            65364624,
            65368566,
            65367696,
            65368791,
            65366250,
            65385810,
            65363445,
            65364504,
            65364341,
            65366891,
            65364298,
            65372266,
            65367337
        ],
        "B": [
            65357074,
            65365610,
            65356532,
            65359436,
            65360660,
            65362219,
            65358616,
            65357121,
            65358490,
            65360944,
            65360793,
            65359110,
            65357689,
            65359084,
            65357670,
            65361106,
            65357886,
            65367149,
            65358881
        ],
        "A": [
            65352414,
            65792669,
            65360046,
            65351993,
            65354820,
            65353062,
            65354583,
            65352997,
            65351826,
            65353043,
            65356292,
            65352153,
            65352035,
            65353191,
            65353105,
            65351942,
            65353378,
            65352978,
            65362432,
            65354867
        ]
    },
    "name": "D. Feeding Chicken",
    "statement": "Long is a huge fan of CFC (Codeforces Fried Chicken). But the price of\r\nCFC is increasing, so he decides to breed the chicken on his own\r\nfarm.His farm is presented by a rectangle grid with r rows and c\r\ncolumns. Some of these cells contain rice, others are empty. k chickens\r\nare living on his farm. Long wants to give his chicken playgrounds by\r\nassigning these farm cells to his chickens. He would like to satisfy the\r\nfollowing requirements: Each cell of the farm is assigned to chicken.\r\nEach chicken is assigned cell. The set of cells assigned to every\r\nchicken forms a connected area. More precisely, if two cells (x, y) and\r\n(u, v) are assigned to the same chicken, this chicken is able to walk\r\nfrom (x, y) to (u, v) by passing only its cells and moving from each\r\ncell to another cell sharing a side. Long also wants to prevent his\r\nchickens from fighting for food. Hence he wants the difference between\r\nthe maximum and the minimum number of cells with rice assigned to a\r\nchicken to be as small as possible. Please help him.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\ntypedef long long ll;\nusing namespace std;\nstring s;\nll n, m, k, t;\nchar jaw[101010]; \npair<pair<ll,ll>, pair<ll,ll> > A[101010];\nint main()\n{\n\tios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n\tfor(ll i = '0'; i <= '9'; i++)\n\t\ts += char(i);\n\tfor(ll i = 'a'; i <= 'z'; i++)\n\t\ts += char(i);\n\tfor(ll i = 'A'; i <= 'Z'; i++)\n\t\ts += char(i);\n\t// cout << s << \"\\n\";\n\tcin >> t;\n\twhile(t--)\n\t{\n\t\tcin >> n >> m >> k;\n\t\tll te = 0, padi = 0;\n\t\tfor(ll i = 1; i <= n; i++)\n\t\t\tfor(ll j = 1; j <= m; j++)\n\t\t\t{\n\t\t\t\tte++;\n\t\t\t\tchar ct;\n\t\t\t\tcin >> ct;\n\t\t\t\t// cout << i << \" \" << j << \" \" << ct << \"\\n\";\n\t\t\t\tll K = 1;\n\t\t\t\tif(i % 2 == 1)\n\t\t\t\t\tK = -1;\n\t\t\t\tif(ct == 'R')\n\t\t\t\t{\n\t\t\t\t\tpadi++;\n\t\t\t\t\tA[te] = mp(mp(i, j*K), mp(te, 1));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tA[te] = mp(mp(i, j*K), mp(te, 0));\n\t\t\t}\n\t\t// return 0;\n\t\tsort(A+1, A+1+te);\n\t\tll banyak = padi / k;\n\t\tll sisa = padi % k;\n\t\tll udh = 0;\n\t\tll pos = 0;\n\t\t// return 0; \t\n\t\tfor(ll i = 1; i <= te; i++)\n\t\t{\n\t\t\tif(A[i].se.se)\n\t\t\t{\n\t\t\t\tif(udh > banyak)\n\t\t\t\t{\n\t\t\t\t\tsisa--;\n\t\t\t\t\tudh = 0;\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t\telse\t\n\t\t\t\tif(udh == banyak && sisa == 0)\n\t\t\t\t{\n\t\t\t\t\tudh = 0;\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t\tudh++;\n\t\t\t}\n\t\t\t// cout << A[i].se.fi << \" \" << i << \"A\\n\";\n\t\t\tjaw[A[i].se.fi] = s[pos];\n\t\t}\n\t\tte = 0;\n\t\tfor(ll i = 1; i <= n; i++)\n\t\t{\n\t\t\tfor(ll j = 1; j <= m; j++)\n\t\t\t{\n\t\t\t\tte++;\n\t\t\t\tcout << jaw[te] ;\n\t\t\t}\n\t\t\tcout << \"\\n\";\n\t\t}\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Feeding Chicken.json",
    "editorial_link": "https://codeforces.com//blog/entry/71594",
    "editorial": "First, we will try to solve the problem when our rectangle is an array (or an 1?n\n rectangle).\n\nLet r\n be the number of rice cells. It's not hard to see that the difference between the maximum and the minimum number of cells with rice assigned to a chicken is either 0\n, when r\n mod\n k=0\n, or 1\n otherwise. Turns out, there is an easy way to assign: for the first r\n mod\n k\n chicken, we will assign to the current chicken a prefix of the current array that contains exactly ?r/k?\n rice cells, and delete that prefix. The same for the others k?(r\n mod\n k)\n chicken, we will assign to the current chicken a prefix of the current array that contains exactly ?r/k?\n rice cells.\n\nNotice that there exists a path that goes through every cell exactly once and every two consecutive cells on the path share a side. One such path is (1,1),(1,2),...(1,c),(2,c),(2,c?1),...,(2,1),(3,1),(3,2),...\n By thinking the path as an array, we can assign regions on the path according to the above paragraph. Such an assignment is also a valid assignment for the original rectangle."
}