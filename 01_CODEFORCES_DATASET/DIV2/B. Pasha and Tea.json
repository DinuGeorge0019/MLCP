{
    "link": "https://codeforces.com//contest/557/problem/B",
    "problemId": "30554",
    "problem_idx": "B",
    "shortId": "557B",
    "contest_number": "557",
    "problem_submissions": {
        "E": [
            11869387,
            11865728,
            11877714,
            11864888,
            11889151,
            11866470
        ],
        "D": [
            11859147,
            11860748,
            11861182,
            11862277,
            11863181,
            11865161,
            11863844,
            11864866,
            11861291,
            11865190,
            11866413,
            11860722,
            11865833,
            11866312,
            11923092,
            11859036,
            11864665,
            11862418,
            11864374
        ],
        "C": [
            11856407,
            11858913,
            11855729,
            11859389,
            11860110,
            11858947,
            11859067,
            11857533,
            11865562,
            11859501,
            11860468,
            11865942,
            11862380,
            11854539,
            11861657,
            11909827,
            11857135,
            11858056,
            11856524
        ],
        "B": [
            11852804,
            11852275,
            11853400,
            11856628,
            11854078,
            11854825,
            11852839,
            11853621,
            11854966,
            11854901,
            11855996,
            11862048,
            11854417,
            11862769,
            11867200,
            11867503
        ],
        "A": [
            11852067,
            11853135,
            11852127,
            11855787,
            11852575,
            11852315,
            11854321,
            11852415,
            11852433,
            11853058,
            11852340,
            11861439,
            11852247,
            11857225,
            11853713,
            11864195,
            11852181,
            11852458,
            11852065
        ]
    },
    "name": "B. Pasha and Tea",
    "statement": "Pasha decided to invite his friends to a tea party. For that occasion,\r\nhe has a large teapot with the capacity of milliliters and tea cups,\r\neach cup is for one of Pasha\u2019s friends. The -th cup can hold at most\r\nmilliliters of water.It turned out that among Pasha\u2019s friends there are\r\nexactly boys and exactly girls and all of them are going to come to the\r\ntea party. To please everyone, Pasha decided to pour the water for the\r\ntea as follows: Pasha can boil the teapot exactly once by pouring there\r\nat most milliliters of water; Pasha pours the same amount of water to\r\neach girl; Pasha pours the same amount of water to each boy; if each\r\ngirl gets milliliters of water, then each boy gets milliliters of water.\r\nIn the other words, each boy should get two times more water than each\r\ngirl does.Pasha is very kind and polite, so he wants to maximize the\r\ntotal amount of the water that he pours to his friends. Your task is to\r\nhelp him and determine the optimum distribution of cups between Pasha\u2019s\r\nfriends.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nint capacity [200005]; \ndouble findmin (double a, double b)\n{\n    if (a<b) return a; return b; \n}\nint main()\n{\n    ios_base::sync_with_stdio(0); \n    int n, m; cin >> n >> m; \n    for (int g=1; g<=2*n; g++) cin >> capacity[g]; \n    double maxgirl = m/(double)(3*n); \n    sort(capacity+1, capacity+2*n+1); \n    maxgirl = findmin (maxgirl, (capacity[n+1]/(double)2));\n    maxgirl = findmin (maxgirl, capacity[1]);\n    cout << fixed << setprecision(10) << n*3*maxgirl; \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation",
        "math",
        "sortings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Pasha and Tea.json",
    "editorial_link": "https://codeforces.com//blog/entry/18943",
    "editorial": "This problem can be solved in different ways too. We consider the simplest solution whici fits in the given restrictions.\n\nAt first we sort all cups in non-decreasing order of their volumes. Due to reasons of greedy it is correct thatsorted cups with numbers from 1 to n will be given to girls and cups with numbers from n?+?1 to 2?*?n will be given to boys.\n\nNow we need to use binary search and iterate on volume of tea which will be poured for every girl. Let on current iteration (lf?+?rg)?/?2?=?mid. Then if for i from 1 to n it is correct that mid???ai and for i from n?+?1 to 2?*?n it is correct that 2?*?mid???ai then we need to make lf?=?mid. Else we need to make rg?=?mid.\n\nAsymptotic behavior of this solution \u0097 O(n?*?log(n)) where n \u0097 count of cups."
}