{
    "link": "https://codeforces.com//contest/514/problem/D",
    "problemId": "22326",
    "problem_idx": "D",
    "shortId": "514D",
    "contest_number": "514",
    "problem_submissions": {
        "D": [
            9843225,
            9846055,
            9837556,
            9859465,
            9840591,
            9843851,
            9839460,
            9844414,
            9842178,
            9845163,
            9846841,
            9842086,
            9846251,
            9848651,
            9842924,
            9846782,
            9849156,
            9841878,
            9846890,
            9847267
        ],
        "C": [
            9841163,
            9837943,
            9841032,
            9837323,
            9841110,
            9846267,
            9840562,
            9847764,
            9841056,
            9842088,
            9846232,
            10793637,
            9841248,
            9846908,
            9840170,
            9843407,
            9848493,
            9849033,
            9841377
        ],
        "B": [
            9835974,
            9834205,
            9834220,
            9843917,
            9833123,
            9834665,
            9840756,
            9834379,
            9834140,
            9837595,
            9836572,
            9835808,
            9834718,
            9833573,
            9839815,
            9834202,
            9838863,
            9839593,
            9833631,
            9835941
        ],
        "E": [
            9834062,
            9844124,
            10054737,
            19616877,
            9857316,
            9848834,
            9874776,
            9849125,
            9848927,
            9849783,
            9853978
        ],
        "A": [
            9830385,
            9849694,
            9830594,
            9830658,
            9831890,
            10621817,
            9830350,
            9831307,
            9831472,
            9830971,
            9833065,
            9834571,
            9832664,
            9831254,
            9834249,
            9833669,
            9831211,
            9830665,
            9833485
        ]
    },
    "name": "D. R2D2 and Droid Army",
    "statement": "An army of droids is lined up in one row. Each droid is described by\r\nintegers , where is the number of details of the -th type in this\r\ndroid’s mechanism. R2-D2 wants to destroy the sequence of consecutive\r\ndroids of maximum length. He has weapons, the -th weapon can affect all\r\nthe droids in the army by destroying one detail of the -th type (if the\r\ndroid doesn’t have details of this type, nothing happens to it). A droid\r\nis considered to be destroyed when all of its details are destroyed.\r\nR2-D2 can make at most shots. How many shots from the weapon of what\r\ntype should R2-D2 make to destroy the sequence of consecutive droids of\r\nmaximum length?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define SZ(x) ((int)(x).size())\n#define fi first\n#define se second\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\nconst int N=101000;\nint p[N][10],n,m,k,q[N],ret[N][10];\nbool check(int l) {\n\trep(j,0,m) {\n\t\tint h=0,t=-1;\n\t\trep(i,0,n) {\n\t\t\twhile (h<=t&&p[i][j]>p[q[t]][j]) --t;\n\t\t\tq[++t]=i;\n\t\t\twhile (h<=t&&i-q[h]>=l) ++h;\n\t\t\tif (i>=l-1) ret[i][j]=p[q[h]][j];\n\t\t}\n\t}\n\trep(i,l-1,n) {\n\t\tint sm=0;\n\t\trep(j,0,m) sm+=ret[i][j];\n\t\tif (sm<=k) return 1;\n\t}\n\treturn 0;\n}\nvoid gao(int l) {\n\tif (l==0) { rep(j,0,m) printf(\"0 \"); return;}\n\trep(j,0,m) {\n\t\tint h=0,t=-1;\n\t\trep(i,0,n) {\n\t\t\twhile (h<=t&&p[i][j]>p[q[t]][j]) --t;\n\t\t\tq[++t]=i;\n\t\t\twhile (h<=t&&i-q[h]>=l) ++h;\n\t\t\tif (i>=l-1) ret[i][j]=p[q[h]][j];\n\t\t}\n\t}\n\trep(i,l-1,n) {\n\t\tint sm=0;\n\t\trep(j,0,m) sm+=ret[i][j];\n\t\tif (sm<=k) {\n\t\t\trep(j,0,m) printf(\"%d \",ret[i][j]);\n\t\t\treturn;\n\t\t}\n\t}\n\tassert(0);\n}\nint main() {\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\trep(i,0,n) rep(j,0,m) scanf(\"%d\",p[i]+j);\n\tint l=0,r=n+1;\n\twhile (l+1<r) {\n\t\tint md=(l+r)>>1;\n\t\tif (check(md)) l=md; else r=md;\n\t}\n\tgao(l);\n/*\n\tint r=0;\n\twhile (r<n) {\n\t\tadd(r);\n\t\tif (sum()>k) break;\n\t\tr++;\n\t}\n\tint ans=r,pl=0,pr=r-1;\n\trep(i,1,n) {\n\t\tdel(i-1); r=max(r,i);\n\t\tif (sum()<=k) {\n\t\t\twhile (r<n) {\n\t\t\t\tadd(r);\n\t\t\t\tif (sum()>k) break;\n\t\t\t\tr++;\n\t\t\t}\n\t\t}\n\t\tif (r-i>ans) {\n\t\t\tans=r-i; pl=i; pr=r-1;\n\t\t}\n\t}\t\n//\tprintf(\"%d\\n\",ans);\n\trep(j,0,m) {\n\t\tint x=0;\n\t\trep(i,pl,pr+1) x=max(x,p[i][j]);\n\t\tprintf(\"%d \",x);\n\t}\n\tputs(\"\");*/\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "two pointers"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. R2D2 and Droid Army.json",
    "editorial_link": "https://codeforces.com//blog/entry/16398",
    "editorial": "To destroy all the droids on a segment of l to r, we need to make  shots, where cnt[i][j]  number of j-type details in i-th droid. Let's support two pointers  on the beginning and on the end of the segment, which we want to destroy all the droids on. If we can destroy droids on current segment, let's increase right border of the segment, otherwise increase left border, updating the answer after every segment change. Let's use a queue in order to find the segment maximum effectively.",
    "hint": []
}