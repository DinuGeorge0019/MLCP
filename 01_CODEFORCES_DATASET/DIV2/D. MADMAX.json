{
    "link": "https://codeforces.com//contest/918/problem/D",
    "problemId": "151495",
    "problem_idx": "D",
    "shortId": "918D",
    "contest_number": "918",
    "problem_submissions": {
        "D": [
            34674216,
            34676112,
            34673508,
            34668068,
            34677841,
            34677199,
            34677332,
            34677732,
            34674284,
            34676764,
            34679239,
            34678391,
            34678589,
            34677462,
            34676960,
            34679127,
            34678913,
            34675354,
            34679183
        ],
        "B": [
            34670440,
            34667518,
            34666861,
            34670421,
            34670264,
            34667471,
            34666401,
            34668510,
            34667116,
            34668380,
            34668100,
            34668007,
            34668333,
            34667912,
            34667438,
            34673764,
            34668108,
            34668574,
            34670180
        ],
        "C": [
            34669065,
            34673271,
            34676492,
            34678621,
            34673223,
            34674841,
            34674142,
            34672405,
            34678982,
            34671931,
            34673671,
            34675775,
            34673964,
            34675892,
            34678000,
            34670923,
            34676125,
            34680026,
            34675452
        ],
        "A": [
            34664697,
            34665015,
            34664848,
            34664663,
            34664707,
            34665222,
            34664674,
            34665219,
            34664947,
            34672513,
            34664938,
            34664735,
            34665446,
            34664882,
            34665035,
            34672321,
            34665406,
            34664826,
            34666801
        ],
        "E": [
            34687078,
            34688168,
            34687900,
            34687853
        ]
    },
    "name": "D. MADMAX",
    "statement": "As we all know, Max is the best video game player among her friends. Her\r\nfriends were so jealous of hers, that they created an actual game just\r\nto prove that she’s not the best at games. The game is played on a\r\ndirected acyclic graph (a DAG) with vertices and edges. There’s a\r\ncharacter written on each edge, a lowercase English letter. Max and\r\nLucas are playing the game. Max goes first, then Lucas, then Max again\r\nand so on. Each player has a marble, initially located at some vertex.\r\nEach player in his/her turn should move his/her marble along some edge\r\n(a player can move the marble from vertex to vertex if there’s an\r\noutgoing edge from to ). If the player moves his/her marble from vertex\r\nto vertex , the \"character\" of that round is the character written on\r\nthe edge from to . There’s one additional rule; the ASCII code of\r\ncharacter of round should be to the ASCII code of character of round\r\n(for ). The rounds are numbered for both players together, i. e. Max\r\ngoes in odd numbers, Lucas goes in even numbers. The player that can’t\r\nmake a move loses the game. The marbles may be at the same vertex at the\r\nsame time.Since the game could take a while and Lucas and Max have to\r\nfocus on finding Dart, they don’t have time to play. So they asked you,\r\nif they both play optimally, who wins the game?You have to determine the\r\nwinner of the game for all initial positions of the marbles.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\n#define F first\n#define S second\n\nconst int MAXN = 100 + 3;\nconst int C = 26;\n\nint n, m;\nvector<pair<int, int>> adj[MAXN];\nint sec[MAXN], sz, pos[MAXN];\nbool vis[MAXN];\nbool win[MAXN][MAXN][C][2];\n\nvoid dfs(int v){\n\tvis[v] = 1;\n\tfor (auto e:adj[v])\n\t\tif (!vis[e.F])\n\t\t\tdfs(e.F);\n\tsec[sz++] = v;\n}\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcin >> n >> m;\n\twhile (m--) {\n\t\tint u, v; char c;\n\t\tcin >> u >> v >> c;\n\t\tu--, v--;\n\t\tadj[u].push_back({v, int(c - 'a')});\n\t}\n\tfor (int v = 0; v < n; v++)\n\t\tif (!vis[v])\n\t\t\tdfs(v);\n\treverse(sec, sec + n);\n\tfor (int i = 0; i < n; i++)\n\t\tpos[sec[i]] = i;\n\tfor (int sum = 2*(n-1); ~sum; sum--)\n\t\tfor (int a = 0; a < n; a++) {\n\t\t\tint b = sum - a;\n\t\t\tif (b >= n || b < 0) continue;\n\t\t\t\n\t\t\tfor (int w = 0; w < 26; w++) {\n\t\t\t\t//a\n\t\t\t\twin[a][b][w][0] = false;\n\t\t\t\tfor (auto e:adj[sec[a]])\n\t\t\t\t\tif (e.S >= w)\n\t\t\t\t\t\twin[a][b][w][0] |= !win[pos[e.F]][b][e.S][1];\n\n\t\t\t\t//b\n\t\t\t\twin[a][b][w][1] = false;\n\t\t\t\tfor (auto e:adj[sec[b]])\n\t\t\t\t\tif (e.S >= w)\n\t\t\t\t\t\twin[a][b][w][1] |= !win[a][pos[e.F]][e.S][0];\n\t\t\t}\n\t\t}\n\tfor (int a = 0; a < n; a++) {\n\t\tfor (int b = 0; b < n; b++)\n\t\t\tcout << (win[pos[a]][pos[b]][0][0]?\"A\":\"B\");\n\t\tcout << \"\\n\";\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "games",
        "graphs"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. MADMAX.json",
    "editorial_link": "https://codeforces.com/blog/entry/57420",
    "editorial": "Denote dp(v,?u,?c) as the winner of the game (the person that starts it or the other one?, a boolean, true if first person wins) if the first person's marble is initially at vertex v and the second one's initially at u and our set of letters is {ichar(c),?ichar(c?+?1),?...,?'z'} if ichar(i)?=?char('a'?+?i) (c is an integer).\n\nDenote  and ch(x,?y) as the character written on edge from x to y.\n\nNow if there's some x in adj(v) such that c?<?int(ch(v,?x)?-?'a') and dp(u,?x,?ch(v,?x))?=?false, then the first person can move his/her marble to vertex x and win the game, thus dp(v,?u,?c)?=?true, otherwise it's false.\n\nBecause the graph is a DAG there's no loop in this dp, thus we can use memoization. The answer for i,?j is dp(i,?j,?0).\n\nTotal time complexity: ",
    "hint": []
}