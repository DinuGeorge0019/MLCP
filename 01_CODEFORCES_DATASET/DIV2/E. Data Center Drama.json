{"link": "https://codeforces.com//contest/527/problem/E", "problemId": "24746", "problem_idx": "E", "shortId": "527E", "contest_number": "527", "problem_submissions": {"D": [10320998, 10323329, 10320418, 10316376, 10320868, 10323389, 10322440, 10320232, 10321604, 10323582, 10321959, 10322883, 10324771, 10323891, 10324342, 10325751, 10316899, 10320622], "C": [10319281, 10317608, 10318719, 10321621, 10319197, 10319745, 10320049, 10325822, 10321996, 10320609, 10320450, 10322500, 10322047, 10318021, 10323195, 10322166, 10322519, 10313548], "B": [10316733, 10315414, 10316286, 10320342, 10316974, 10315178, 10316059, 10315345, 10320022, 10315992, 10316397, 10319742, 10317580, 10315069, 10315584, 10318949, 10318891, 10343112, 10316418], "A": [10313000, 10313055, 10313796, 10312916, 10313836, 10313217, 10312846, 10312806, 10313753, 10312901, 10312783, 10313020, 10313144, 10312917, 10312793, 10312900, 10314293, 10313134], "E": [11345011]}, "name": "E. Data Center Drama", "statement": "The project of a data center of a Big Software Company consists of\r\ncomputers connected by cables. Simply speaking, each computer can be\r\nconsidered as a box with multiple cables going out of the box. Very\r\nImportant Information is transmitted along each cable in one of the two\r\ndirections. As the data center plan is not yet approved, it wasn\u2019t\r\ndetermined yet in which direction information will go along each cable.\r\nThe cables are put so that each computer is connected with each one,\r\nperhaps through some other computers.The person in charge of the\r\ncleaning the data center will be Claudia Ivanova, the janitor. She loves\r\nto tie cables into bundles using cable ties. For some reasons, she\r\ngroups the cables sticking out of a computer into groups of two, and if\r\nit isn\u2019t possible, then she gets furious and attacks the computer with\r\nthe water from the bucket.It should also be noted that due to the\r\nspecific physical characteristics of the Very Important Information, it\r\nis strictly forbidden to connect in one bundle two cables where\r\ninformation flows in different directions.The management of the data\r\ncenter wants to determine how to send information along each cable so\r\nthat Claudia Ivanova is able to group all the cables coming out of each\r\ncomputer into groups of two, observing the condition above. Since it may\r\nnot be possible with the existing connections plan, you are allowed to\r\nadd the minimum possible number of cables to the scheme, and then you\r\nneed to determine the direction of the information flow for each cable\r\n(yes, sometimes data centers are designed based on the janitors\u2019\r\nconvenience...)\r\n", "solutions": ["/*\n***************************************************************************************************************\n\n                            Author : Yash Sadhwani\n                            \n                            \n                            # 100% Copied from Sundar\n\n                        PATIENCE IS ABOVE PERFECTION !!!!\n\n**************************************************************************************************************\n*/\n#include<stdio.h>\n#include<iostream>\n#include<vector>\n#include<string.h>\n#include<algorithm>\n#include<deque>\n#include<map>\n#include<set>\n#include<stdlib.h>\n#include<math.h>\n#include<queue>\n#include<stack>\n#include<functional>\nusing namespace std;\n#define ll long long\n#define si(x) scanf(\"%d\",&x)\n#define sl(x) scanf(\"%lld\",&x)\n#define sd(x) scanf(\"%lf\",&x)\n#define sc(x) scanf(\"%c\",&x)\n#define ss(x) scanf(\"%s\",x)\n#define vl vector<ll>\n#define vi vector<int>\n#define vvl vector< vl >\n#define vvi vector< vi >\n#define pb push_back\n#define mod 1000000007\n#define mem(x,y) memset(x,y,sizeof(x))\n#define f(i,a,b) for(int i=(a);i<(b);i++)\n#define max_int_value 2147483647\n#define max_long_value 9223372036854775807\n#define ub(X,v) upper_bound(X.begin(),X.end(),v)\n#define lb(X,v) lower_bound(X.begin(),X.end(),v)\n\n\n\n//qsort(ww,cc,sizeof(tp),compare);\n/*int compare(const void *a,const void *b){\n    ll y=((((tp*)a)->w)-(((tp*)b)->w));\n    if(y>0)return 1;\n    else if(y==0)return 0;\n    else return -1;\n}\n\n//return true if in correct positions\nbool way(ii x,ii y){\n    return x.first<y.first or x.first==y.first and x.second<y.second;\n}\n\n//return false if in correct positions\nstruct OrderBy\n{\n    bool operator() (ii a, ii b) { return a.S < b.S; }\n};\npriority_queue<ii, std::vector<ii >, OrderBy> Q;\n\n\nll modpow(ll base, ll exponent,ll modulus){\n    if(base==0&&exponent==0)return 0;\n    ll result = 1;\n    while (exponent > 0){\n        if (exponent % 2 == 1)\n            result = (result * base) % modulus;\n        exponent = exponent >> 1;\n        base = (base * base) % modulus;\n    }\n    return result;\n}\n\n#define getchar_unlocked getchar\nusing namespace std;\ninline int scan(){\n    char c = getchar_unlocked();\n    int x = 0;\n    while(c<'0'||c>'9'){\n        c=getchar_unlocked();\n    }\n    while(c>='0'&&c<='9'){\n        x=(x<<1)+(x<<3)+c-'0';\n        c=getchar_unlocked();\n    }\n    return x;\n}\n\n*/\n\n\n#define MAXN 100010\n#define ls (node<<1)\n#define rs ((node<<1)+1)\n#define ii pair<int,int>\n#define F first\n#define S second\n#define ins insert\n\nmultiset<int> AdjList[MAXN];\n\nint path[5*MAXN+10];\n\nint timers=0;\n\nint N,M;\n\n\n\nvoid EULER(int node){\n    while(AdjList[node].size()){\n        int from=node;\n        int to=*(AdjList[node].begin());\n        AdjList[from].erase(AdjList[from].find(to));\n        AdjList[to].erase(AdjList[to].find(from));\n        EULER(to);\n    }\n    path[timers++]=node;\n}\n\ninline void ReadInput(void){\n    si(N); si(M);\n    for(int i=1;i<=M;i++){\n        int a,b;\n        si(a); si(b);\n        AdjList[a].insert(b);\n        AdjList[b].insert(a);\n    }\n}\n\ninline void solve(void){\n    int prev=-1;\n    for(int i=1;i<=N;i++){\n        int sz=AdjList[i].size();\n        if(sz&1){\n            if(prev!=-1){\n                AdjList[i].insert(prev);\n                AdjList[prev].insert(i);\n                prev=-1;\n                M++;\n            }else{\n                prev=i;\n            }\n        }\n    }\n    if(M&1){\n        AdjList[1].insert(1); \n        AdjList[1].insert(1);\n        M++;\n    }\n    EULER(1);\n    printf(\"%d\\n\",M );\n    for(int i=0;i<M;i++){\n        if(i&1){\n            printf(\"%d %d\\n\",path[i],path[i+1] );\n        }else{\n            printf(\"%d %d\\n\",path[i+1],path[i] );\n        }\n    }\n}\n\ninline void Refresh(void){\n    \n}\n\nint main()\n{   \n    ios_base::sync_with_stdio(false);\n    ReadInput();\n    solve();\n    return 0;\n}\n\n\n//A man got to have a code\n\n"], "input": "", "output": "", "tags": ["dfs and similar", "graphs"], "dificulty": "2600", "interactive": false}