{
    "link": "https://codeforces.com//contest/742/problem/E",
    "problemId": "83319",
    "problem_idx": "E",
    "shortId": "742E",
    "contest_number": "742",
    "problem_submissions": {
        "E": [
            22752019,
            22759064,
            22754657,
            22765857,
            22788546,
            23197143,
            22762814
        ],
        "D": [
            22744910,
            22741651,
            22753078,
            22751028,
            22744888,
            22741846,
            22758632,
            22746446,
            22753836,
            22737034,
            22750995,
            22752528,
            22743466,
            22751854,
            22752496,
            22748899,
            22753642,
            22754503,
            22748134,
            22740266
        ],
        "C": [
            22740173,
            22743352,
            22744642,
            22741334,
            22739680,
            22738371,
            22747384,
            22741807,
            22746641,
            22740018,
            22741232,
            22742624,
            22739762,
            22746069,
            22745352,
            22744071,
            22747640,
            22744802,
            22742428,
            22742553
        ],
        "B": [
            22735430,
            22735137,
            22736961,
            22737223,
            22746763,
            22733523,
            22752994,
            22735820,
            22738249,
            22738141,
            197150958,
            22734885,
            22737066,
            22734297,
            22733944,
            22735191,
            22739491,
            22740891,
            22739140,
            22736069,
            22734748
        ],
        "A": [
            22733155,
            22734578,
            22732981,
            22745942,
            22747296,
            22732607,
            22733617,
            22732946,
            22732749,
            22733033,
            197151042,
            22732771,
            22732850,
            22741111,
            22733718,
            22732738,
            22736352,
            22735420,
            22733368,
            22763624
        ]
    },
    "name": "E. Arpa\u2019s overnight party and Mehrdad\u2019s silent entering",
    "statement": "Arpa loves overnight parties. In the middle of one of these parties\r\nMehrdad suddenly appeared. He saw pairs of friends sitting around a\r\ntable. -th pair consisted of a boy, sitting on the -th chair, and his\r\ngirlfriend, sitting on the -th chair. The chairs were numbered through\r\nin clockwise direction. There was exactly one person sitting on each\r\nchair. There were two types of food: Kooft and Zahre-mar. Now Mehrdad\r\nwonders, was there any way to serve food for the guests such that: Each\r\nperson had exactly one type of food, No boy had the same type of food as\r\nhis girlfriend, Among any three guests sitting on consecutive chairs,\r\nthere was two of them who had different type of food. Note that chairs\r\nand are considered consecutive. Find the answer for the Mehrdad\r\nquestion. If it was possible, find some arrangement of food types that\r\nsatisfies the conditions.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long i64;\nconst int MAX = 2e5 + 10;\nconst int MOD = 1e9 + 7;\n\n//#define acm_local\n\n\nint nxt[MAX];\nint val[MAX];\nint main()\n{\n\n\n#ifdef acm_local\n    freopen(\"data.in\", \"r\", stdin);\n    return 0;\n#else\n    std::ios::sync_with_stdio(false);\n    cin.tie(0);\n#endif\n\n    int n;\n    cin >> n;\n    vector<pair<int, int>> edges;\n   for(int i = 1; i <= n; i++){\n\n       int a, b; cin >> a >> b;\n       edges.push_back({a, b});\n       nxt[a] = b;\n       nxt[b] = a;\n   }\n    for(int i = 1; i <= 2 * n; i++){\n        if(val[i] != 0)\n            continue;\n        int cur = i;\n        int vv = 1;\n        while(val[cur] == 0){\n            val[cur] = 1;\n            int ne;\n            if(cur % 2 == 0){\n                ne = cur - 1;\n            }\n            else ne = (cur + 1);\n\n            if(ne == 2 * n + 1) ne = 1;\n\n            assert(val[ne] == 0);\n\n            val[ne] = 2;\n            cur = nxt[ne];\n        }\n    }\n    for(int i = 0; i < n; i++){\n        int a = edges[i].first, b = edges[i].second;\n        cout << val[a] << \" \" << val[b] << endl;\n\n    }\n\n\n\n\n\n\n\n\n\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Arpa\u2019s overnight party and Mehrdad\u2019s silent entering.json",
    "editorial_link": "https://codeforces.com//blog/entry/48871",
    "editorial": "Build a graph and put an edge between each 2\u00b7i,?2\u00b7i?+?1 and each BF and GF. This graph doesn\u0092t have cycles with odd length. So it is a bipartite graph. Now give Kooft to some part and Zahre-mar to other.\n"
}