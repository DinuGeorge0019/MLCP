{"link": "https://codeforces.com//contest/149/problem/B", "problemId": "894", "problem_idx": "B", "shortId": "149B", "contest_number": "149", "problem_submissions": {"E": [1166748, 1167898, 1167706, 1167062, 1168119, 1166122, 1166620, 1180098, 1166477, 1174675, 1168703], "D": [1164419, 1165531, 1165306, 1167884, 1166269, 1165035, 1166389, 1166109, 1170884, 1168057, 1168286, 1168301, 1166381, 1167820, 1166746, 1167254], "C": [1163610, 1164091, 1166729, 1163074, 1164324, 1166838, 1164648, 1163955, 1163257, 1164156, 1165163, 1165364, 1163684, 1164576, 1163848, 1164438, 1163813], "A": [1161525, 1161700, 1161485, 1162080, 1161445, 1161719, 1162271, 1161578, 1161605, 1161624, 1162068, 1161422, 1170499, 1161442, 1161589, 1162328], "B": [1163315, 1165673, 1163493, 1165775, 1163479, 1163666, 1163250, 1164374, 1163398, 1163280, 1164630, 1168461, 1163446, 1163638]}, "name": "B. Martian Clock", "statement": "Having stayed home alone, Petya decided to watch forbidden films on the\r\nNet in secret. \"What ungentlemanly behavior!\" you can say that, of\r\ncourse, but don\u2019t be too harsh on the kid. In his country films about\r\nthe Martians and other extraterrestrial civilizations are forbidden. It\r\nwas very unfair to Petya as he adored adventure stories that featured\r\nlasers and robots. Today Petya is watching a shocking blockbuster about\r\nthe Martians called \"R2:D2\". What can \"R2:D2\" possibly mean? It might be\r\nthe Martian time represented in the Martian numeral system. Petya knows\r\nthat time on Mars is counted just like on the Earth (that is, there are\r\nhours and each hour has minutes). The time is written as \"\", where the\r\nstring stands for the number of hours (from to inclusive), and string\r\nstands for the number of minutes (from to inclusive). The only thing\r\nPetya doesn\u2019t know is in what numeral system the Martian time is\r\nwritten.Your task is to print the radixes of all numeral system which\r\ncan contain the time \"\".\r\n", "solutions": ["#include <cassert>\n#include <cstdio>\n\n#include <string>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\n\nstring s;\nint n;\nint colon;\n\ninline int get_digit(char ch) {\n    if ('0' <= ch && ch <= '9') return ch - '0';\n    return ch - 'A' + 10;\n}\n\nint transform(string s, int base) {\n    int ans = 0;\n    for (int i = 0; i < (int)s.size(); ++i) {\n        int digit = get_digit(s[i]);\n        if (digit >= base) return INF;\n        ans = ans * base + digit;\n    }\n    return ans;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    assert(freopen(\"B.in\", \"r\", stdin));\n    assert(freopen(\"B.out\", \"w\", stdout));\n#endif\n\n    cin >> s;\n    n = s.size();\n    for (int i = 0; i < n; ++i)\n        if (s[i] == ':')\n            colon = i;\n\n    vector<int> sol;\n    for (int base = 2; base <= 60; ++ base)\n        if (transform(s.substr(0, colon), base) < 24 &&\n            transform(s.substr(colon + 1, n - colon), base) < 60)\n            sol.push_back(base);\n\n    if (sol.size() == 0) {\n        cout << \"0\\n\";\n        return 0;\n    }\n    if (sol.back() == 60) {\n        cout << \"-1\\n\";\n        return 0;\n    }\n    for (size_t i = 0; i < sol.size(); ++i)\n        cout << sol[i] << \" \";\n}\n"], "input": "", "output": "", "tags": ["implementation"], "dificulty": "1600", "interactive": false}