{"link": "https://codeforces.com//contest/948/problem/B", "problemId": "164144", "problem_idx": "B", "shortId": "948B", "contest_number": "948", "problem_submissions": {"E": [36168620, 36172204, 36251405, 36251326, 36173384, 36169252, 36404487, 36183304], "D": [36163433, 36167670, 36167120, 36164480, 36164445, 36162609, 36165068, 36162200, 36164897, 36162927, 36164670, 36161208, 36169789, 36165340, 36163154, 36157640, 36165228, 36165543, 36161744, 36165169], "B": [36163096, 36159675, 36159702, 36174211, 36158845, 36165864, 36161702, 36167381, 36159372, 36164193, 36184907, 36158822, 36161863, 36169531, 36169227, 36162688, 36159710, 36169741, 36162780], "C": [36159863, 36162632, 36162843, 36159971, 36160946, 36158478, 36159665, 36159515, 36161458, 36161320, 36162443, 36163093, 36159021, 36158894, 36174132, 36201237, 36164405, 36159793, 36161953, 36158807, 36162111], "A": [36156394, 36155837, 36155755, 36155535, 36178220, 36155392, 36158997, 36155227, 36155148, 36155311, 36155229, 36155259, 36162558, 36155502, 36155114, 36170875, 36158967, 36155326, 36155358, 36163726, 36155813]}, "name": "B. Primal Sport", "statement": "Alice and Bob begin their day with a quick game. They first choose a\r\nstarting number and try to reach one million by the process described\r\nbelow. Alice goes first and then they take alternating turns. In the -th\r\nturn, the player whose turn it is selects a prime number smaller than\r\nthe current number, and announces the smallest multiple of this prime\r\nnumber that is not smaller than the current number.Formally, he or she\r\nselects a prime and then finds the minimum such that divides . Note that\r\nif the selected prime already divides , then the number does not\r\nchange.Eve has witnessed the state of the game after two turns. Given ,\r\nhelp her determine what is the smallest possible starting number . Note\r\nthat the players don\u2019t necessarily play optimally. You should consider\r\nall possible game evolutions.\r\n", "solutions": ["#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n, MEMO, ans, MMEMO;\nbool flag, NOTPRIME[1000010];\n\nint fact(int idx) {\n    int tmp = idx;\n    if(!NOTPRIME[tmp])\n        return n;\n    while(tmp % 2 == 0) {\n        tmp /= 2;\n        MMEMO = 2;\n    }\n    for(int i = 3 ; i <= n ; i += 2) {\n        if(tmp == 1)\n            break;\n        if(NOTPRIME[i])\n            continue;\n        while(tmp % i == 0) {\n            tmp /= i;\n            MMEMO = i;\n        }\n        if(!NOTPRIME[tmp]) {\n            MMEMO = tmp;\n            break;\n        }\n    }\n    return idx - MMEMO + 1;\n}\n\nvoid ffact(int idx) {\n    int tmp = idx;\n    while(tmp % 2 == 0) {\n        tmp /= 2;\n        MEMO = 2;\n    }\n    for(int i = 3 ; i <= n ; i += 2) {\n        if(tmp == 1)\n            break;\n        if(NOTPRIME[i])\n            continue;\n        while(tmp % i == 0) {\n            tmp /= i;\n            MEMO = i;\n        }\n        if(!NOTPRIME[tmp]) {\n            MEMO = tmp;\n            break;\n        }\n    }\n}\n\nint main() {\n    scanf(\"%d\",&n);\n    ans = n;\n    NOTPRIME[1] = 1;\n    for(int i = 4 ; i <= n ; i+=2)\n        NOTPRIME[i] = 1;\n    for(int i = 3 ; i * i <= n ; i += 2) {\n        if(NOTPRIME[i])\n            continue;\n        for(int j = i * i ; j <= n ; j += i)\n            NOTPRIME[j] = 1;\n    }\n    ffact(n);\n    for(int i = n ; i > n - MEMO; i--)\n        ans = min(ans , fact(i));\n    printf(\"%d\",ans);\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "math", "number theory"], "dificulty": "1700", "interactive": false}