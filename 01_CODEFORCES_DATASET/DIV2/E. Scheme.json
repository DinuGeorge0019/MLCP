{
    "link": "https://codeforces.com//contest/22/problem/E",
    "problemId": "103",
    "problem_idx": "E",
    "shortId": "22E",
    "contest_number": "22",
    "problem_submissions": {
        "E": [
            95075,
            339772
        ],
        "D": [
            94674,
            94317,
            94288,
            94253,
            94410,
            94089,
            94399,
            94885,
            94131,
            94729,
            94450,
            93950,
            94649
        ],
        "C": [
            94316,
            94019,
            94074,
            94097,
            94060,
            94297,
            94096,
            94518,
            94472,
            94134,
            94320,
            94611,
            94048
        ],
        "B": [
            93968,
            93767,
            93718,
            93851,
            93760,
            93791,
            93790,
            93866,
            93966,
            93778,
            94454,
            94133,
            94258,
            93853
        ],
        "A": [
            93542,
            93511,
            93475,
            93559,
            93491,
            93518,
            93660,
            93794,
            93555,
            93524,
            93810,
            93535,
            93618
        ]
    },
    "name": "E. Scheme",
    "statement": "To learn as soon as possible the latest news about their favourite\r\nfundamentally new operating system, BolgenOS community from Nizhni Tagil\r\ndecided to develop a scheme. According to this scheme a community\r\nmember, who is the first to learn the news, calls some other member, the\r\nlatter, in his turn, calls some third member, and so on; i.e. a person\r\nwith index got a person with index , to whom he has to call, if he\r\nlearns the news. With time BolgenOS community members understood that\r\ntheir scheme doesn’t work sometimes there were cases when some members\r\ndidn’t learn the news at all. Now they want to supplement the scheme:\r\nthey into the scheme some instructions of type , which mean that person\r\nhas to call person as well. What is the minimum amount of instructions\r\nthat they need to add so, that at the end everyone learns the news, no\r\nmatter who is the first to learn it?\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <vector>\n\nusing namespace std;\n\nvector <int> topsort;\nint n;\nint b[100013];\nint gr[100013];\nint a[100013];\nint d[100013];\nint m=1;\nvoid dfs1(int v){\n    b[v]=1;\n    if(!b[gr[v]]){\n        dfs1(gr[v]);\n    }\n    topsort.push_back(v);\n}\nvoid dfs(int v){\n    b[v]=m;\n    d[m]=v;\n    if(!b[gr[v]]){\n        dfs(gr[v]);\n    }\n}\nint dfs2(int v){\n    b[v]=1;\n    int t=0;\n    if(!b[gr[v]]){\n        t=dfs2(gr[v]);\n    }\n    return t+1;\n}\nint main(){\n    \n    cin>>n;\n    for(int i=1; i<=n; i++){\n        cin>>gr[i];\n    }\n    memset(b, 0, sizeof(b));\n    int t1=dfs2(1);\n    memset(b, 0, sizeof(b));\n    int t2=dfs2(2);\n    if(t2==t1 && t1==n){\n        cout<<0;\n        return 0;\n    }\n    memset(b, 0, sizeof(b));\n    for(int i=1; i<=n; i++){\n        if(!b[i]){\n            dfs1(i);\n        }\n    }\n    memset(b, 0, sizeof(b));\n    for(int i=n-1; i>=0; i--){\n        if(!b[topsort[i]]){\n            a[m]=topsort[i];\n            dfs(topsort[i]);\n            m++;\n        }\n    }\n    cout<<m-1<<endl;\n    for(int i=2; i<=m-1; i++){\n        cout<<d[i-1]<<\" \"<<a[i]<<endl;\n    }\n    cout<<d[m-1]<<\" \"<<a[1];\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs",
        "trees"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Scheme.json",
    "editorial_link": "https://codeforces.com//blog/entry/507",
    "editorial": "Given an oriented graph, find the minimal number of edges one should add to this graph to make it strongly connected. Looking at statement we can get the fact that each vertex has exactly one outcoming edge. It means that starting at some point we'll get stuck in some cycle. So each connected (not strongly) component is a set of simple paths, ending in some cycle or just a simple cycle. First consider vertexes, which has no incoming edges. When passing through some vertex we'll paint it until the current vertex will be already painted. Then we call the starting vertex as \"beginning\" and the finishing one as \"ending\" of a component.\n\nAfter that consider other vertexes - they belong to cycles. Beginning and ending of a cycle - is any vertexes (possible coinciding) belonging to it. So we got a number of components which we have to connect. Let's connect them cyclically: the edge will pass from the ending of i-th component to the beginning of ((i+1)%k)-th, where k is the number of such components. The answer will be k. There is an exception: if we have only one component which is a simple cycle, the answer will be equal to 0.\n\nSo we'll consider each edge exactly once and the total complexity will be O(n).",
    "hint": []
}