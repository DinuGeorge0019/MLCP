{
    "link": "https://codeforces.com//contest/90/problem/C",
    "problemId": "474",
    "problem_idx": "C",
    "shortId": "90C",
    "contest_number": "90",
    "problem_submissions": {
        "D": [
            493304,
            492173,
            495112
        ],
        "E": [
            491947,
            491395,
            492859,
            493324,
            492706,
            491386,
            492076,
            492909
        ],
        "C": [
            490592,
            490305,
            490472,
            490789,
            491674,
            491498,
            490958,
            490747,
            493104,
            491269,
            491109,
            491086,
            492585
        ],
        "A": [
            489446,
            490943,
            489486,
            489158,
            489519,
            489735,
            489052,
            489077,
            489315,
            495095,
            489065,
            489180,
            489120,
            489179,
            489552
        ],
        "B": [
            489045,
            490681,
            489097,
            490102,
            490088,
            490248,
            489492,
            489514,
            490023,
            489439,
            489372,
            489797,
            489627,
            489746,
            4597999,
            490550
        ]
    },
    "name": "C. Robbery",
    "statement": "It is nighttime and Joe the Elusive got into the country\u2019s main bank\u2019s\r\nsafe. The safe has cells positioned in a row, each of them contains some\r\namount of diamonds. Let\u2019s make the problem more comfortable to work with\r\nand mark the cells with positive numbers from to from the left to the\r\nright.Unfortunately, Joe didn\u2019t switch the last security system off. On\r\nthe plus side, he knows the way it works.Every minute the security\r\nsystem calculates the total amount of diamonds for each two adjacent\r\ncells (for the cells between whose numbers difference equals ). As a\r\nresult of this check we get an sums. If at least one of the sums differs\r\nfrom the corresponding sum received during the previous check, then the\r\nsecurity system is triggered.Joe can move the diamonds from one cell to\r\nanother between the security system\u2019s checks. He manages to move them no\r\nmore than times between two checks. One of the three following\r\noperations is regarded as moving a diamond: moving a diamond from any\r\ncell to any other one, moving a diamond from any cell to Joe\u2019s pocket,\r\nmoving a diamond from Joe\u2019s pocket to any cell. Initially Joe\u2019s pocket\r\nis empty, and it can carry an unlimited amount of diamonds. It is\r\nconsidered that before all Joe\u2019s actions the system performs at least\r\none check.In the morning the bank employees will come, which is why Joe\r\nhas to leave the bank before that moment. Joe has only minutes left\r\nbefore morning, and on each of these minutes he can perform no more than\r\noperations. All that remains in Joe\u2019s pocket, is considered his\r\nloot.Calculate the largest amount of diamonds Joe can carry with him.\r\nDon\u2019t forget that the security system shouldn\u2019t be triggered (even after\r\nJoe leaves the bank) and Joe should leave before morning.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <cctype>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <deque>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <utility>\n#include <vector>\nusing namespace std;\n\n#define size(x) int((x).size())\n#define foreach(i,c) for(typeof((c).begin()) i=(c).begin();i!=(c).end();i++)\ntypedef long long I64; typedef unsigned long long U64;\nconst double EPS=1e-12;\nconst int INF=999999999;\ntypedef vector<int> VI;\ntypedef vector<string> VS;\n\nconst int kMaxN=10000;\n\nint n,m,k;\nint a[kMaxN];\n\nint Solve() {\n  if (n%2==0) return 0;\n\n  int p=n/2+1;\n  int times=m/p;\n  if(times==0) return 0;\n  \n  I64 res=(I64)times*k;\n  for(int i=0;i<n;i+=2) if(a[i]<res) res=a[i];\n  return (int)res;\n}\n\nint main() {\n  scanf(\"%d%d%d\",&n,&m,&k);\n  for(int i=0;i<n;++i) scanf(\"%d\",&a[i]);\n\n  printf(\"%d\\n\",Solve());\n\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Robbery.json",
    "editorial_link": "https://codeforces.com//blog/entry/2162",
    "editorial": "Determine a form of all arrangements of diamonds that set of all sums of pairs adjacent cells is invariably. If you remove from the first cell exactly c diamonds, you should add exactly c diamonds into the second cell, remove c diamonds from the third cell and so on. In other words, all valid arrangements can be produced by adding c diamonds into every even cell and removing c diamonds from every odd cell, where c is some integer. c lies in range from  to  because otherwise number of diamonds in some cell will be less than zero. There is no more valid arrangements.\n\nNow consider a number of all diamonds in cells as a function of c. If n is even, the sum always is constant. So there is impossible of theft diamonds and answer is 0. For odd n for every c there is c extra diamonds. So, Joe can theft no more than  diamonds.\n\nIt is easy for undarstanding that for increasing (or decreasing) c by some constant x Joe should do x(n?+?1)?/?2 moves, but he cannot done it by lass count of moves. In one minute Joe can change c no more than on [m?/?((n?+?1)?/?2)]. Common number of diamonds thet Joe can theft for all time is k[m?/?((n?+?1)?/?2)], but you should take into account a limits for changing of c.\n\nAt the end common solution is following:  If n is even, answer is 0, otherwise answer is .\n\nBe careful fith overflow of 32bit integers. Here you should use an 64bit integers."
}