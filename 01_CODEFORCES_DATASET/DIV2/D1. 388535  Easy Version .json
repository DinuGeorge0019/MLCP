{
    "link": "https://codeforces.com//contest/1658/problem/D1",
    "problemId": "1344625",
    "problem_idx": "D1",
    "shortId": "1658D1",
    "contest_number": "1658",
    "problem_submissions": {
        "E": [
            151138530,
            151146869,
            151142274,
            151156891,
            151144475,
            151131245,
            151198774,
            151154302,
            151144731,
            151157692,
            151159508,
            151140462,
            151148647,
            151219181,
            151219025,
            151218886,
            151218748,
            151155148,
            152719328,
            151158378,
            151155247,
            151203772,
            151170614,
            151170291,
            151155048
        ],
        "F": [
            151130100,
            151137469,
            151160433,
            151144944,
            151156580,
            151159798,
            151232291,
            151153413,
            151160992,
            151158393,
            151217808,
            152719401,
            151235290,
            152865004
        ],
        "D2": [
            151123118,
            151134040,
            151133854,
            151166091,
            151125130,
            151122133,
            151139222,
            151137227,
            151134065,
            151132282,
            151133698,
            151133407,
            151162997,
            151131356,
            151134494,
            151138728,
            151139132,
            151136153,
            151141865
        ],
        "D1": [
            151120822,
            151134118,
            151121251,
            151137456,
            151136457,
            151124968,
            151116539,
            151125380,
            151137042,
            151133981,
            151132184,
            151133795,
            151129157,
            151129385,
            151111426,
            151134591,
            151138886,
            151137815,
            151136213,
            151141775
        ],
        "C": [
            151112073,
            151128253,
            151116864,
            151133478,
            151123922,
            151138412,
            151133817,
            151115900,
            151129938,
            151123515,
            151127137,
            151121616,
            151119175,
            151124585,
            151140674,
            151128907,
            151118670,
            151122285,
            151130110,
            151124708
        ],
        "A": [
            151108745,
            151108766,
            151108093,
            151108539,
            151109707,
            151108138,
            151108257,
            151108228,
            151115578,
            151108352,
            151109887,
            151109318,
            151108285,
            151118389,
            151117355,
            151113770,
            151108678,
            151108356,
            151114275,
            151108304
        ],
        "B": [
            151108090,
            151111195,
            151109084,
            151117990,
            151113182,
            151110666,
            151109661,
            151112815,
            151110325,
            151119421,
            151112382,
            151112621,
            151125884,
            151123923,
            151121603,
            151111889,
            151111865,
            151121448,
            151110901
        ]
    },
    "name": "D1. 388535  Easy Version ",
    "statement": "Marin and Gojou are playing hide-and-seek with an array.Gojou initially\r\nperforms the following steps: First, Gojou chooses 2 integers l and r\r\nsuch that l\r\nleq r. Then, Gojou makes an array a of length r-l+1 which is a\r\npermutation of the array [l,l+1,\r\nldots,r]. Finally, Gojou chooses a secret integer x and sets a_i to a_i\r\noplus x for all i (where\r\noplus denotes the bitwise XOR operation). Marin is then given the values\r\nof l,r and the final array a. She needs to find the secret integer x to\r\nwin. Can you help her?Note that there may be multiple possible x that\r\nGojou could have chosen. Marin can find any possible x that could have\r\nresulted in the final value of a.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define mod 998244353\n#define int long long \nusing namespace std;\nint a[500005],c[500005];\nset <int> s;\ninline void cov(int l,int r)\n{\n\twhile(s.lower_bound(l)!=s.end()&&*s.lower_bound(l)<=r)\n\t\ts.erase(s.lower_bound(l));\n}\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint T;\n\tcin >> T;\n\twhile(T--)\n\t{\n\t\tint l,r;\n\t\tcin >> l >> r;\n\t\tint n=r-l+1;\n\t\ts.clear();\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tcin >> a[i];\n\t\t\ts.insert(a[i]);\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tint now=0;\n\t\t\tfor(int j=16;j>=0;j--)\n\t\t\t{\n\t\t\t\tif(r&(1<<j))\n\t\t\t\t{\n\t\t\t\t\tif(a[i]&(1<<j));\n\t\t\t\t\telse now^=(1<<j);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(a[i]&(1<<j)) cov(now,now+(1<<j)-1),now+=(1<<j);\n\t\t\t\telse cov(now+(1<<j),now+(2<<j)-1);\n\t\t\t}\n\t\t}\n\t\tcout << *s.begin() << \"\\n\";\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D1. 388535  Easy Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/101302",
    "editorial": "Let\u00e2\u0080\u0099s look at the binary representation of numbers from to : Let\nus look at the -th bit only (maybe ), we will get a sequence like .\nNotice that the number of zeroes equals the number of ones in a prefix\nonly when the length of the prefix is a multiple of . Otherwise, there\nwill be more zeros than ones.So, we will count the number of flipped and\nunflipped bits for each bit position. If the number of ones is greater\nthan the number of zeros, the -th bit of must be . If the number of\nzeros is greater than the number of ones, the -th bit of must be . If\nthe number of ones is equal to the number of zeros, that -th bit of can\neither be or . However, if the number of ones is equal to the number of\nzeros, we can assign the -th bit anything we like. The rough sketch of\nthe proof is that if is inside then is also inside .\n"
}