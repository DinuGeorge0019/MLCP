{
    "link": "https://codeforces.com//contest/174/problem/B",
    "problemId": "1097",
    "problem_idx": "B",
    "shortId": "174B",
    "contest_number": "174",
    "problem_submissions": {
        "B": [
            1503930,
            1499525,
            1499538,
            1500205,
            1499258,
            1499768,
            1501357,
            1499457,
            1503985,
            1505557,
            1499961,
            1499234,
            1500331
        ],
        "D": [
            1503363,
            1501621,
            1502127,
            1503092,
            1503245,
            1503411,
            1501894,
            1503085,
            1501903,
            1500001,
            1503531,
            1501616,
            1502373,
            1502070,
            1502395,
            1502564,
            1503108
        ],
        "C": [
            1503107,
            1508292,
            1501371,
            1501282,
            1500969,
            1500926,
            1499876,
            1501802,
            1501230,
            1502044,
            1502361,
            1504842,
            1501563,
            1501111,
            1501734,
            1502012
        ],
        "A": [
            1501910,
            1498466,
            1498355,
            1498723,
            1498298,
            1498576,
            1498366,
            1498300,
            1498312,
            1502389,
            1498657,
            1498399,
            1498335,
            1498390,
            1499307,
            1498408,
            1498327,
            1498514
        ],
        "E": [
            1499649,
            1502782,
            1505549,
            1505680,
            1505679,
            1505670,
            1505552
        ]
    },
    "name": "B. File List",
    "statement": "Eudokimus, a system administrator is in trouble again. As a result of an\r\nerror in some script, a list of names of very important files has been\r\ndamaged. Since they were files in the BerFS file system, it is known\r\nthat each file name has a form \"\", where: is a string consisting of\r\nlowercase Latin letters, its length is from 1 to 8 characters; is a\r\nstring consisting of lowercase Latin letters, its length is from 1 to 3\r\ncharacters. For example, \"\", \"\" and \"\" are valid file names and \"\", \"\"\r\nand \"\" are not.Damage to the list meant that all the file names were\r\nrecorded one after another, without any separators. So now Eudokimus has\r\na single string.Eudokimus needs to set everything right as soon as\r\npossible. He should divide the resulting string into parts so that each\r\npart would be a valid file name in BerFS. Since Eudokimus has already\r\nproved that he is not good at programming, help him. The resulting file\r\nlist can contain the same file names.\r\n",
    "solutions": [
        "#include<iostream>\n#include<cstdio>\n#include <string>\n#include<set>\n#include<algorithm>\n#include<vector>\n#include<map>\nusing namespace std;\n\nstring s;\nvector<string> ans;\n\nvoid No()\n{\n    cout << \"NO\";\n    exit(0);\n}\n\nint main()\n{\n    #ifndef ONLINE_JUDGE\n        freopen(\"input.txt\", \"rt\", stdin);\n        freopen(\"output.txt\", \"wt\", stdout);\n    #endif\n\n    cin >> s;\n    int i = 0;\n    while (i < s.size())\n    {\n        string c = \"\";\n        int j = 0;\n\n        while (i < s.size() && j < 8 && s[i] != '.')\n        {\n            c += s[i];\n            j++;\n            i++;\n        }\n        if (s[i] != '.' || j == 0 || i + 1 >= s.size() || s[i + 1] == '.')\n            No();\n        c += s[i];\n        i++;\n        j = 0;\n\n\n        while (i < s.size() && j < 3 && s[i] != '.' && !(i + 1 < s.size() && s[i + 1] == '.'))\n        {\n            c += s[i];\n            i++;\n            j++;\n        }\n\n        if (j == 0)\n            No();\n        ans.push_back(c);\n    }\n\n    cout << \"YES\\n\";\n    for (int i = 0; i < ans.size(); i++)\n        cout << ans[i] << endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. File List.json",
    "editorial_link": "https://codeforces.com//blog/entry/4303",
    "editorial": "1, : 11 2 , . 8 , . 3 , . :-) X, min(8,X-1). 2, DP: is[i] . is[0] = 1, .\r\nis[i] = 1, ...\r\n",
    "hint": []
}