{
    "link": "https://codeforces.com//contest/1554/problem/D",
    "problemId": "1061274",
    "problem_idx": "D",
    "shortId": "1554D",
    "contest_number": "1554",
    "problem_submissions": {
        "E": [
            124159772,
            124162157,
            124167652,
            124165214,
            124231575,
            124169217,
            124380405,
            124171964,
            124171215,
            124172755,
            124172343,
            124148786,
            124173544,
            124173029,
            124172156,
            124722686,
            124178015,
            124181128,
            124171059,
            124379676,
            124174188,
            124167350,
            124176198,
            124182633
        ],
        "C": [
            124139083,
            124143057,
            124140544,
            124149111,
            124145223,
            124380376,
            124143439,
            124145496,
            124139702,
            124142795,
            124144864,
            124142215,
            124143699,
            124149801,
            124722675,
            124143912,
            124138305,
            124142838,
            124379535,
            124143555,
            124137768,
            124156436,
            124140590
        ],
        "D": [
            124138945,
            124146593,
            124147043,
            124143497,
            124147282,
            124380395,
            124147023,
            124143045,
            124146870,
            124147125,
            124165711,
            124147949,
            124154200,
            124153233,
            124722679,
            124147474,
            124150406,
            124141042,
            124379671,
            124146642,
            124143310,
            124148096,
            124148678
        ],
        "B": [
            124134751,
            124135695,
            124133759,
            124135797,
            124133509,
            124380367,
            124137647,
            124131777,
            124134150,
            124255622,
            124137477,
            124153106,
            124136364,
            124136471,
            124137060,
            124722664,
            124134959,
            124141246,
            124133658,
            124379482,
            124138040,
            124170775,
            124151266,
            124133287
        ],
        "A": [
            124132044,
            124128630,
            124128905,
            124135949,
            124129333,
            124380302,
            124134132,
            124133855,
            124129278,
            124128741,
            124153971,
            124131823,
            124130363,
            124130846,
            124722661,
            124128707,
            124142173,
            124128567,
            124379467,
            124129604,
            124168196,
            124139115,
            124128957
        ]
    },
    "name": "D. Diane",
    "statement": "You are given an integer n. Find any string s of length n consisting\r\nonly of English lowercase letters such that each non-empty substring of\r\ns occurs in s an number of times. If there are multiple such strings,\r\noutput any. It can be shown that such string always exists under the\r\ngiven constraints.A string a is a substring of a string b if a can be\r\nobtained from b by deletion of several (possibly, zero or all)\r\ncharacters from the beginning and several (possibly, zero or all)\r\ncharacters from the end.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint T,n;\nint main(){\n    scanf(\"%d\",&T);\n    while(T--){\n        scanf(\"%d\",&n);\n        if(n<=26){\n            for(int i=0;i<n;i++) printf(\"%c\",(char)(i+'a'));\n            puts(\"\");\n        }else{\n            if(n%2==0){\n                int k=n/2;\n                for(int i=1;i<k;i++) printf(\"a\");\n                printf(\"b\");\n                for(int i=1;i<=k;i++) printf(\"a\");\n                puts(\"\");\n            }else{\n                int k=(n-5)/2;\n                printf(\"a\");\n                for(int i=1;i<=k;i++) printf(\"b\");\n                printf(\"c\");\n                for(int i=1;i<=k+1;i++) printf(\"b\");\n                printf(\"aa\");\n                puts(\"\");\n            }\n        }\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "strings"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Diane.json",
    "editorial_link": "https://codeforces.com//blog/entry/93321",
    "editorial": "Consider the strings of type \"\". Which substring occurs in which parity?\r\nObserve. Play with them.Consider the string \"\" ( times â). WLOG Let be\r\nan odd integer. In this string \"\" occurs times, \"\" occurs times and so\r\non. So \"\", \"\", \"\", occurs odd, even, odd, even, times, respectively.Now\r\nletâs look at the string \"\" ( times â). In this string, \"\", \"\", \"\",\r\noccurs even, odd, even, odd, times, respectively. What can be done\r\nnow?Did you know that odd even odd?Pause and think.Letâs merge both\r\nstrings! If we merge them with \"\" in-between i.e. \"\", then each\r\nsubstring will occur an odd number of times. Thats because each of \"\",\r\n\"\", \"\", occurs odd even odd times, and each newly created substring\r\noccurs exactly once.What will happen if we set ?So here is the solution\r\nto the problem: \"\", where and \"\" when is even and \"\" when is odd. For\r\nexample, if , answer is \"\" and if , answer is \"\".\r\n",
    "hint": []
}