{
    "link": "https://codeforces.com//contest/405/problem/A",
    "problemId": "7382",
    "problem_idx": "A",
    "shortId": "405A",
    "contest_number": "405",
    "problem_submissions": {
        "C": [
            6115915,
            6109660,
            6110133,
            6110046,
            6111196,
            6113157,
            6113191,
            6111181,
            6110354,
            6110520,
            6111719,
            6111599,
            6110290,
            6110453,
            6111762,
            6111100,
            6110857
        ],
        "B": [
            6113263,
            6108172,
            6108709,
            6108763,
            6108097,
            6111258,
            6110081,
            6107735,
            6108477,
            6108386,
            6108872,
            6108648,
            6108353,
            6108714,
            6109837,
            6108107
        ],
        "A": [
            6110002,
            6106628,
            6106664,
            6106595,
            6106410,
            6109734,
            6107964,
            6106587,
            6106988,
            6106985,
            6107053,
            6107108,
            6106487,
            6106761,
            6106362,
            6106567
        ],
        "E": [
            6109575,
            6134220,
            6134212,
            6517207,
            6129138,
            6115449,
            6161534,
            6121533
        ],
        "D": [
            6111866,
            6112127,
            6117518,
            6112341,
            6112656,
            6109019,
            6121539,
            6112769,
            6113306,
            6112893,
            6112946,
            6113537,
            6114230,
            6114563,
            6113633,
            6113898,
            6114989
        ]
    },
    "name": "A. Gravity Flip",
    "statement": "Little Chris is bored during his physics lessons (too easy), so he has\r\nbuilt a toy box to keep himself occupied. The box is special, since it\r\nhas the ability to change gravity.There are columns of toy cubes in the\r\nbox arranged in a line. The -th column contains cubes. At first, the\r\ngravity in the box is pulling the cubes downwards. When Chris switches\r\nthe gravity, it begins to pull all the cubes to the right side of the\r\nbox. The figure shows the initial and final configurations of the cubes\r\nin the box: the cubes that have changed their position are highlighted\r\nwith orange. Given the initial configuration of the toy cubes in the\r\nbox, find the amounts of cubes in each of the columns after the gravity\r\nswitch!\r\n",
    "solutions": [
        "#include<iostream>\n#include<fstream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<map>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\nint n,a[105];\nint b[105],viz[105];\n\nint main()\n{\n    int i;\n    std::ios_base::sync_with_stdio(false);\n    #ifndef ONLINE_JUDGE\n        freopen(\"date.in\", \"r\", stdin);\n        freopen(\"date.out\", \"w\", stdout);\n    #endif\n    scanf(\"%d\",&n);\n    for (i=1;i<=n;i++){\n        scanf(\"%d\",&a[i]);\n        for (int j=1;j<=a[i];++j)\n            ++viz[j];\n    }\n    for (int j=1;j<=100;++j){\n        i=n;\n        while (viz[j]>0){\n            b[i]=j;\n            i--;\n            viz[j]--;\n        }\n    }\n    for (int j=1;j<=n;++j)\n        printf(\"%d \",b[j]);\n    printf(\"\\n\");\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Gravity Flip.json",
    "editorial_link": "https://codeforces.com//blog/entry/11186",
    "editorial": "Observe that in the final configuration the heights of the columns are\r\nin non-decreasing order. Also, the number of columns of each height\r\nremains the same. This means that the answer to the problem is the\r\nsorted sequence of the given column heights. Solution complexity: ,\r\nsince we can sort by counting.\r\n",
    "hint": []
}