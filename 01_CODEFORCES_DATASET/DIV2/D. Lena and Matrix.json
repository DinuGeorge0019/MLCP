{"link": "https://codeforces.com//contest/1689/problem/D", "problemId": "1426171", "problem_idx": "D", "shortId": "1689D", "contest_number": "1689", "problem_submissions": {"E": [160112065, 160122128, 160125790, 160125174, 160129572, 160129585, 160131786, 160198613, 160135003, 160132850, 160130305, 160129724, 160130309, 160134699, 160132208, 160134730, 160133947, 160135624, 160132845], "D": [160105444, 160106619, 160103165, 160105284, 160109476, 160111661, 160111580, 160114903, 160117754, 160223912, 160117858, 160115373, 160119358, 160119569, 160110447, 160119288, 160122102, 160117625, 160122103], "C": [160101725, 160101027, 160100377, 160100502, 160102947, 160104518, 160104470, 160103940, 160105751, 160106384, 160109439, 160101319, 160107036, 160099160, 160109505, 160110151, 160109766, 160109925], "B": [160095106, 160095099, 160095692, 160094546, 160098042, 160100154, 160098117, 160097987, 160101496, 160099759, 160105755, 160095146, 160101519, 160094285, 160105059, 160102238, 160103140, 160102070], "A": [160093939, 160093596, 160093753, 160097601, 160094503, 160096047, 160095876, 160093955, 160095035, 160094694, 160102269, 160093545, 160098465, 160096387, 160095131, 160099800, 160098054, 160096796]}, "name": "D. Lena and Matrix", "statement": "As a gift for her birthday, Lena got a matrix puzzle!The matrix consists\r\nof n rows and m columns, and each cell is either black or white. The\r\ncoordinates (i,j) denote the cell which belongs to the i-th row and j-th\r\ncolumn for every 1\r\nleq i\r\nleq n and 1\r\nleq j\r\nleq m. To solve the puzzle, Lena has to choose a cell that minimizes the\r\nManhattan distance to the farthest black cell from the chosen cell.More\r\nformally, let there be k\r\nge 1 black cells in the matrix with coordinates (x_i,y_i) for every 1\r\nleq i\r\nleq k. Lena should choose a cell (a,b) that minimizes\r\nmax_{i=1}^{k}(|a-x_i|+|b-y_i|).As Lena has no skill, she asked you for\r\nhelp. Will you tell her the optimal cell to choose?\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\nconst int INF = 1e9;\n\nint main() {\n    ios::sync_with_stdio(false); cin.tie(0);\n    int T;\n    cin >> T;\n    while (T--) {\n        int n, m;\n        cin >> n >> m;\n        vector<vector<char>> a(n, vector<char>(m));\n        int ans = INF, x = -1, y = -1;\n        int mx[4] = {-INF, -INF, -INF, -INF};\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                cin >> a[i][j];\n                if (a[i][j] == 'B') {\n                    mx[0] = max(mx[0], -i - j);\n                    mx[1] = max(mx[1], -i + j);\n                    mx[2] = max(mx[2], i - j);\n                    mx[3] = max(mx[3], i + j);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                int val = -INF;\n                val = max(val, mx[0] + i + j);\n                val = max(val, mx[1] + i - j);\n                val = max(val, mx[2] - i + j);\n                val = max(val, mx[3] - i - j);\n                if (val < ans) {\n                    ans = val;\n                    x = i;\n                    y = j;\n                }\n            }\n        }\n        cout << x + 1 << \" \" << y + 1 << endl;\n    }\n    return 0;\n}"], "input": "", "output": "", "tags": ["data structures", "dp", "geometry", "shortest paths"], "dificulty": "1900", "interactive": false}