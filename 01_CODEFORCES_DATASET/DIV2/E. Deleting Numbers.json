{"link": "https://codeforces.com//contest/1406/problem/E", "problemId": "720775", "problem_idx": "E", "shortId": "1406E", "contest_number": "1406", "problem_submissions": {"E": [92629042, 92630500, 92628899, 92635228, 92634107, 92638626, 92619773, 97164376, 92640175, 92638803, 92636918, 92676046, 92671322, 92625530, 92637463, 92637483, 92614606, 92630766, 92631813, 92662786], "D": [92610024, 92609433, 92611409, 92609957, 92609251, 92609187, 92633310, 92613282, 92627048, 92606021, 92676006, 92636207, 92606425, 92616730, 92693126, 92691073, 92607353, 92606067, 92612958], "C": [92591912, 92593174, 92597136, 92597584, 92597579, 92602468, 92594387, 92596256, 92599703, 92594293, 92675991, 92618821, 92592065, 92605879, 92597551, 92594066, 92693156, 92691032, 92598806, 92594142, 92595349], "B": [92585402, 92587012, 92590282, 92585685, 92585843, 92593482, 92586267, 92588568, 92586097, 92589192, 92675966, 92591284, 92587210, 92582618, 92588033, 92585543, 92691012, 92591068, 92596476, 92585669], "A": [92582753, 92582816, 92583498, 92583384, 92582723, 92583951, 92583076, 92582946, 92583005, 92675955, 92583729, 92582667, 92591746, 92583143, 92583399, 92690980, 92584679, 92582643, 92583860]}, "name": "E. Deleting Numbers", "statement": "There is an unknown integer x (1\r\nle x\r\nle n). You want to find x.At first, you have a set of integers\r\n{1, 2,\r\nldots, n\r\n}. You can perform the following operations no more than 10000 times: a:\r\nfind how many numbers are multiples of a in the current set. a: find how\r\nmany numbers are multiples of a in this set, and then delete all\r\nmultiples of a, but x will never be deleted (even if it is a multiple of\r\na). In this operation, a must be greater than 1. a: it means that you\r\nknow that x=a. This operation can be only performed once. Remember that\r\nin the operation of type a>1 must hold.Write a program, that will find\r\nthe value of x.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n#define ff first\n#define ss second\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define all(x) begin(x), end(x)\n#define sz(x) (int)(x).size()\n#define pb push_back\n#define FASTIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n#define endl '\\n'\n#define int long long\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<ll> vl;\ntypedef vector<pii> vpi;\ntypedef pair<ll,ll> pll;\ntypedef vector<string> vs;\ntypedef vector<pll> vpl;\ntypedef vector<int> vi;\n\n\nconst int N = 100100;\nvi primes;\nbool mark[N];\n  int n;\nvoid crivo(){\n\n  for(int i=2;i<=n;i++){\n    if(!mark[i]){\n      if(i<=n)primes.pb(i);\n      for(int j=2*i;j<=n;j+=i)mark[j]=1;\n    }\n  }\n\n}\n\nbool saiu[N];\n\nint askB(int p){\n  if(p > n)return 0;\n  cout <<'B' << \" \"<<p<<endl;\n  cout.flush();\n  int ans;\n  cin >> ans;\n  return ans;\n}\nint askA(int p){\n  if(p > n)return 0;\n  cout << \"A \"<<p<<endl;\n  cout.flush();\n  int ans;\n  cin >> ans;\n  return ans;\n}\n\nint get(int p){\n  int res=0;\n  for(int i=p;i<=n;i+=p){\n    if(saiu[i])continue;\n    res++;\n    saiu[i] = 1;\n  }\n  return res;\n}\nll getlog(ll x,ll mx){\n  ll r = 1;\n  ll p = x;\n  while(p * x<=mx){\n    p*=x;\n    r++;\n  }\n  return r;\n}\nint elevate(int p,int pwr){\n  int r = 1;\n  for(int i=0;i<pwr;i++)r*=p;\n  return r;\n}\n\nconst int sq = 100;\n\nint P=1;\n#define DB 0\nvoid solve(vi cur){\n  //if(DB)cout <<\"ENTREI\"<<endl;\n  for(int p : cur){\n    int x = askB(p);\n    if(x!=0){\n\n      int l = 2,r = getlog(p,n/P);\n      int res = 1;\n      while(l<=r){\n        int mid=(l+r)/2;\n        int per = askA(P * elevate(p,mid));\n        if(per!=0){\n          res = mid,l = mid + 1;\n        }else r = mid - 1;\n      }\n\n      P*=elevate(p,res);\n    }\n  }\n  \n}\n\nint32_t main(){\n  FASTIO;\n  cin>>n;\n  crivo();\n  \n  vi cur;\n  int fora = 0;\n  int i=0;\n  for(i=0;i<=sz(primes);i++){\n    if(i == sz(primes)){\n      \n    //  if(DB)cout<<\"AQUI\\n\";\n\n      solve(cur);\n      break;\n    }\n    cur.pb(primes[i]);\n    int x = askB(primes[i]);\n    int s = get(primes[i]);\n    fora+=x;\n    if(s!=x){\n      solve(cur);\n      break;\n    }\n    if(sz(cur) == sq){\n      \n     // if(DB)cout <<\"Aqui ... \"<<sz(cur)<<\" \"<<sq<<endl;\n\n      int A = askA(1);\n      if(A != n-fora){\n        solve(cur);\n        break;\n      }\n      cur.clear();\n    }\n  }\n  if(P == 1){\n    cout <<\"C \"<<1<<endl;cout.flush();\n    return 0;\n  }\n  i++;\n  for(;i<sz(primes);i++){\n    int p = primes[i];\n    if(p<=1 || p > n)continue;\n    int per = askA(primes[i] * P);\n    if(per!=0){\n      int l = 2,r = getlog(p,n/P);\n      int res = 1;\n      while(l<=r){\n        int mid = (l+r)/2;\n        per = askA(elevate(p,mid) * P);\n        if(per!=0){\n          l = mid + 1;\n          res = mid;\n        }else r = mid - 1;\n      }\n\n\n      P *= elevate(p,res);\n    }\n  }\n\n  cout <<\"C \"<<P<<endl;\n  cout.flush();\n  return 0;\n\n}"], "input": "", "output": "", "tags": ["interactive", "math", "number theory"], "dificulty": "2600", "interactive": false}