{
    "link": "https://codeforces.com//contest/574/problem/C",
    "problemId": "34317",
    "problem_idx": "C",
    "shortId": "574C",
    "contest_number": "574",
    "problem_submissions": {
        "E": [
            12777654,
            12761905,
            12761141,
            12767794,
            12812186,
            12765590,
            12765583,
            12795832
        ],
        "D": [
            12753243,
            12754709,
            12749273,
            12752316,
            12751860,
            34986711,
            12751794,
            12753633,
            12752636,
            12753482,
            12752444,
            12753915,
            12754683,
            12753066,
            12754887,
            12755381,
            12754991,
            12754068,
            12756274,
            12755316,
            12755471
        ],
        "C": [
            12751208,
            12750732,
            12747796,
            12748107,
            12749130,
            34986465,
            12750242,
            12746917,
            12765952,
            12749775,
            12747265,
            12751486,
            12748422,
            12748315,
            12751012,
            12748270,
            12746927,
            12748796,
            12751828,
            12748701,
            12751210,
            12751267
        ],
        "B": [
            12749719,
            12749612,
            12747301,
            12747302,
            12748361,
            34986352,
            12748979,
            12749853,
            23873486,
            12748845,
            12751204,
            12749303,
            12751151,
            12749688,
            12749272,
            12749406,
            12751674,
            12752041,
            12750218,
            12747923,
            12747922,
            12748657
        ],
        "A": [
            12746925,
            12747156,
            12746306,
            12746196,
            12746305,
            34986203,
            34986199,
            12746356,
            12747131,
            12746281,
            12748351,
            12747087,
            12746932,
            12747573,
            12747386,
            12747413,
            12748055,
            12746903,
            12747183,
            12746649,
            12749265,
            12747493
        ]
    },
    "name": "C. Bear and Poker",
    "statement": "Limak is an old brown bear. He often plays poker with his friends. Today\r\nthey went to a casino. There are players (including Limak himself) and\r\nright now all of them have bids on the table. -th of them has bid with\r\nsize dollars.Each player can double his bid any number of times and\r\ntriple his bid any number of times. The casino has a great jackpot for\r\nmaking all bids equal. Is it possible that Limak and his friends will\r\nwin a jackpot?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define X first\n#define Y second\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef pair<int,int> pi;\ntypedef vector<pi> vpi;\ntypedef vector<vpi> vvpi;\n\nint gcd(int a, int b){\n  if(b == 0) return a;\n  return gcd(b,a%b);\n}\n\nint main(){\n  int n;\n  cin>>n;\n  int k[n];\n  cin>>k[0];\n  int d = k[0];\n  for(int i = 1;i < n;++i){\n    cin>>k[i];\n    d = gcd(d,k[i]);\n  }\n  bool xec = true;\n  for(int i = 0;i < n;++i){\n    int q = k[i]/d;\n    while(q%2 == 0) q /= 2;\n    while(q%3 == 0) q /= 3;\n    if(q > 1) xec = false;\n  }\n  if(xec) cout<<\"Yes\"<<endl;\n  else cout<<\"No\"<<endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "number theory"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Bear and Poker.json",
    "editorial_link": "https://codeforces.com//blog/entry/20040",
    "editorial": "Any positive integer number can be factorized and written as . We can\r\nmultiply given numbers by and so we can increase and for them. So we can\r\nmake all and equal by increasing them to the same big value (e.g. ). But\r\nwe canât change powers of other prime numbers so they must be equal from\r\nthe beginning. We can check it by diving all numbers from input by two\r\nand by three as many times as possible. Then all of them must be equal.\r\nCode Alternative solution is to calculate GCD of given numbers. Answer\r\nis \"YES\" iff we can get each number by multiplying GCD by and .\r\nOtherwise, some number had different power of prime number other than\r\nand . Code\r\n",
    "hint": []
}