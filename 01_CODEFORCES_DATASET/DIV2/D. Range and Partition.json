{"link": "https://codeforces.com//contest/1631/problem/D", "problemId": "1276005", "problem_idx": "D", "shortId": "1631D", "contest_number": "1631", "problem_submissions": {"F": [144209452, 144235790, 144244278, 144220136, 144245962, 145961629, 144259733, 144269650], "D": [144194791, 144225252, 144201688, 144230474, 144203435, 144220058, 144203552, 144209046, 144207936, 144210282, 144212647, 144207429, 144217330, 144216217, 144206811, 144214985, 144213401, 144219446, 144231089, 144231916], "E": [144190789, 144201204, 144214332, 144232961, 144227054, 144208434, 144222982, 144216993, 144218442, 144221273, 144225660, 144224625, 144225131, 144219664, 144229917, 144231977, 144227225, 144219457, 144201695], "C": [144179964, 144189456, 144189516, 144215627, 144187648, 144180182, 144189612, 144193307, 144194463, 144187270, 144199486, 144195809, 144197876, 144203729, 144230691, 144197772, 144204964, 144199522, 144195296, 144214390], "B": [144170872, 144177011, 144174808, 144176288, 144176678, 144177243, 144171384, 144176878, 144177419, 144171993, 144172891, 144174155, 144177241, 144177261, 144179565, 144182240, 144180906, 144179159, 144177073, 144204981], "A": [144168895, 144168971, 144169136, 144169033, 144169966, 144169112, 144168711, 144173549, 144170320, 144168841, 144168910, 144168908, 144169573, 144170205, 144173130, 144169980, 144175969, 144173232, 144169253, 144169017]}, "name": "D. Range and Partition", "statement": "Given an array a of n integers, find a range of values [x, y] (x\r\nle y), and split a into k (1\r\nle k\r\nle n) subarrays in such a way that: Each subarray is formed by several\r\ncontinuous elements of a, that is, it is equal to a_l, a_{l+1},\r\nldots, a_r for some l and r (1\r\nleq l\r\nleq r\r\nleq n). Each element from a belongs to exactly one subarray. In each\r\nsubarray the number of elements inside the range [x, y] (inclusive) is\r\nthan the number of elements outside the range. An element with index i\r\nis inside the range [x, y] if and only if x\r\nle a_i\r\nle y. Print any solution that minimizes y - x.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\nconst int max_n = 2e5 + 5;\n\nint n, k;\nint a[max_n];\nint occurences[max_n];\n\npair <int, int> find_answer(int length){\n\tint inside_segment = 0;\n\tfor (int i = 1; i <= length; i++){\n\t\tinside_segment += occurences[i];\n\t}\n\tif (inside_segment >= n - inside_segment + k){\n\t\treturn make_pair(1, length);\n\t}\n\tfor (int segment_start = 2; segment_start <= n - length + 1; segment_start++){\n\t\tinside_segment -= occurences[segment_start - 1];\n\t\tinside_segment += occurences[segment_start + length - 1];\n\t\tif (inside_segment >= n - inside_segment + k){\n\t\t\treturn make_pair(segment_start, segment_start + length - 1);\n\t\t}\n\t}\n\treturn make_pair(-1, -1);\n}\n\nvoid solve_tc(){ \n\tcin >> n >> k;\n\tfor (int i = 1; i <= n; i++){\n\t\tcin >> a[i];\n\t}\n\t\n\tfor (int i = 1; i <= n; i++){\n\t\toccurences[i] = 0;\n\t}\n\tfor (int i = 1; i <= n; i++){\n\t\toccurences[a[i]]++;\n\t}\n\tint low = 1, high = n;\n\twhile (low < high){\n\t\tint middle = (low + high - 1) / 2;\n\t\tif (find_answer(middle).first == -1){\n\t\t\tlow = middle + 1;\n\t\t}\n\t\telse{\n\t\t\thigh = middle;\n\t\t}\n\t}\n\tpair <int, int> answer = find_answer(low);\n\tint balance_in_segment = 0, selected_segments = 0;\n\tvector <pair <int, int>> segments;\n\tint segment_start = 1;\n\tfor (int i = 1; i <= n; i++){\n\t\tif ((answer.first <= a[i]) && (a[i] <= answer.second)){\n\t\t\tbalance_in_segment++;\n\t\t}\n\t\telse{\n\t\t\tbalance_in_segment--;\n\t\t}\n\t\tif (balance_in_segment > 0){\n\t\t\tsegments.emplace_back(segment_start, i);\n\t\t\tselected_segments++;\n\t\t\tif (selected_segments == k){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsegment_start = i + 1;\n\t\t\tbalance_in_segment = 0;\n\t\t}\n\t}\n\tsegments.back().second = n;\n\t\n\tcout << answer.first << \" \" << answer.second << \"\\n\";\n\tfor (auto segment : segments){\n\t\tcout << segment.first << \" \" << segment.second << \"\\n\";\n\t}\n}\n\nint main(){\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\t\n\tint tests;\n\tcin >> tests;\n\twhile (tests--){\n\t\tsolve_tc();\n\t}\n}"], "input": "", "output": "", "tags": ["binary search", "constructive algorithms", "greedy", "two pointers"], "dificulty": "1800", "interactive": false}