{"link": "https://codeforces.com//contest/862/problem/D", "problemId": "123159", "problem_idx": "D", "shortId": "862D", "contest_number": "862", "problem_submissions": {"F": [30522146], "E": [30515524, 30514981, 30514016, 30514863, 30521757, 30513966, 30514334, 30520725, 30516565, 30519106, 30520786, 30520302, 30519855, 30521281, 30521147, 30521254, 30521944, 30521635, 30520751], "C": [30514106, 30508600, 30509568, 30508140, 30506918, 30515950, 30507825, 30509973, 30520060, 30513375, 30510462, 30514508, 30513811, 30512130, 30512019, 30511796, 30511858, 30510871, 30512321], "D": [30510386, 30511427, 30518392, 30512215, 30515491, 30512095, 30520485, 30514131, 30513495, 30515366, 30516105, 30512969, 30517047, 30515613, 30516506, 30516739, 30517091, 30515520], "B": [30503649, 30504269, 30503848, 30503359, 30502486, 30503263, 30503865, 30504630, 30505338, 30505127, 30506532, 30504918, 30504595, 30505318, 30506615, 30505351, 30507736, 30506138, 30506809], "A": [30502233, 30502672, 30502339, 30502484, 30502166, 30502202, 30502311, 30502278, 30502286, 30502588, 30504719, 30504828, 30502367, 30502429, 30504564, 30502776, 30503501, 30505382]}, "name": "D. Mahmoud and Ehab and the binary string", "statement": "Mahmoud and Ehab are in the fourth stage now.Dr. Evil has a hidden\r\nbinary string of length . He guarantees that there is at least one \u20190\u2019\r\nsymbol and at least one \u20191\u2019 symbol in it. Now he wants Mahmoud and Ehab\r\nto find a position of any \u20190\u2019 symbol and any \u20191\u2019 symbol. In order to do\r\nthis, Mahmoud and Ehab can ask Dr. Evil up to questions. They tell Dr.\r\nEvil some binary string of length , and Dr. Evil tells the Hamming\r\ndistance between these two strings. Hamming distance between 2 binary\r\nstrings of the same length is the number of positions in which they have\r\ndifferent symbols. You can find the definition of Hamming distance in\r\nthe notes section below.Help Mahmoud and Ehab find these two\r\npositions.You will get verdict if Your queries doesn\u2019t satisfy\r\ninteraction protocol described below. You ask strictly more than\r\nquestions and your program terminated after exceeding queries limit.\r\nPlease note, that you can do up to ask queries and one answer query.\r\nYour final answer is not correct. You will get if you don\u2019t print\r\nanything or if you forget to flush the output, including for the final\r\nanswer (more info about flushing output below).If you exceed the maximum\r\nnumber of queries, You should terminate with 0, In this case you\u2019ll get\r\nWrong Answer, If you don\u2019t terminate you may receive any verdict because\r\nyou\u2019ll be reading from a closed stream .\r\n", "solutions": ["#include <cstdio>\n#include <algorithm>\n#include <vector>\nint N, N1;\nint query(std::vector < int > V)\n{\n\tprintf(\"? \");\n\tfor (int i : V)\n\t\tprintf(\"%d\", i);\n\tputs(\"\");\n\tfflush(stdout);\n\tint g;\n\tscanf(\"%d\", &g);\n\treturn g;\n}\nstd::pair < int, int > query(int l, int r)\n{\n\tstd::vector < int > V(N);\n\tfor (int i = l; i <= r; i++)\n\t\tV[i] = 1;\n\tint __ = query(V), if_all0 = N1 + r - l + 1;\n\treturn { r - l + 1 - (if_all0 - __ >> 1), if_all0 - __ >> 1 };\n}\nvoid answer(std::pair < int, int > x)\n{\n\tprintf(\"! %d %d\\n\", x.first + 1, x.second + 1);\n\tfflush(stdout);\n}\nint get0(int l, int r)\n{\n\tif (l == r)\n\t\treturn l;\n\tint m = l + r >> 1;\n\tif (query(l, m).first)\n\t\treturn get0(l, m);\n\telse\n\t\treturn get0(m + 1, r);\n}\nint get1(int l, int r)\n{\n\tif (l == r)\n\t\treturn l;\n\tint m = l + r >> 1;\n\tif (query(l, m).second)\n\t\treturn get1(l, m);\n\telse\n\t\treturn get1(m + 1, r);\n}\nstd::pair < int, int > get01(int l, int r)\n{\n\tint m = l + r >> 1;\n\tauto L = query(l, m);\n\tif (!L.first)\n\t\treturn { get0(m + 1, r), l };\n\telse if (!L.second)\n\t\treturn { l, get1(m + 1, r) };\n\telse\n\t\treturn get01(l, m);\n}\nint main()\n{\n\tscanf(\"%d\", &N);\n\tN1 = query(std::vector < int > (N, 0));\n\tanswer(get01(0, N - 1));\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "divide and conquer", "interactive"], "dificulty": "2000", "interactive": false}