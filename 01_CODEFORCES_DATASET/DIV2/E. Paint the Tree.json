{
    "link": "https://codeforces.com//contest/1241/problem/E",
    "problemId": "432404",
    "problem_idx": "E",
    "shortId": "1241E",
    "contest_number": "1241",
    "problem_submissions": {
        "E": [
            62017723,
            62019409,
            62018200,
            62020890,
            62022198,
            62018184,
            62021033,
            62020810,
            62022366,
            62022018,
            62022186,
            62021471,
            62021371,
            62020672,
            62022999,
            62022406,
            62016955,
            62022463,
            62022706,
            62018405,
            62014119,
            62012786,
            62036219,
            62036172
        ],
        "D": [
            62010080,
            62011089,
            62012710,
            62015665,
            62013685,
            62015042,
            62017074,
            62014653,
            62016089,
            62016067,
            62016695,
            62018252,
            62004607,
            62017834,
            62022945,
            62013525,
            62016654,
            62010850
        ],
        "C": [
            62004603,
            62005338,
            62005296,
            62004772,
            62006686,
            62010899,
            62008239,
            62007637,
            62010590,
            62007408,
            62005219,
            62010085,
            62022342,
            62013089,
            62017420,
            62007106,
            62020505,
            62005890
        ],
        "B": [
            61994170,
            61994162,
            61996183,
            61997011,
            61995689,
            61998479,
            61995514,
            62010312,
            62000592,
            62001007,
            61994716,
            62003432,
            62019757,
            61994257,
            62008550,
            61993346,
            61995543
        ],
        "A": [
            61990704,
            61991494,
            61990694,
            61992108,
            61991136,
            61994902,
            61991699,
            62016279,
            61993098,
            61990610,
            61990976,
            61990737,
            62017926,
            61990827,
            62001039,
            61991341,
            61991174
        ],
        "F": [
            62114157,
            62033465,
            62031915
        ]
    },
    "name": "E. Paint the Tree",
    "statement": "You are given a weighted tree consisting of n vertices. Recall that a\r\ntree is a connected graph without cycles. Vertices u_i and v_i are\r\nconnected by an edge with weight w_i.Let’s define the k-coloring of the\r\ntree as an assignment of exactly k colors to vertex, so that each color\r\nis used no more than two times. You can assume that you have infinitely\r\nmany colors available. We say that an edge is in the given k-coloring if\r\nits endpoints share at least one color (i.e. there exists a color that\r\nis assigned to both endpoints).Let’s also define the of a k-coloring as\r\nthe sum of weights of edges.Please calculate the maximum possible of a\r\nk-coloring of the given tree.You have to answer q independent queries.\r\n",
    "solutions": [
        "// Code by H~$~C\n//#pragma comment(linker, \"/STACK:1024000000,1024000000\")\n//#pragma GCC optimize(\"Ofast\", \"unroll-loops\")\n//#pragma target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\n#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\n#define rint register int\n#define rep(i, n) for (rint i = 0; i < (n); ++i)\n#define rep1(i, n) for (rint i = (1); i <= (n); ++i)\n#define Rep(i, a, b) for (rint i = (a); i <= (b); ++i)\n#define per(i, n) for (rint i = ((n) - 1); ~i; --i)\n#define per1(i, n) for (rint i = (n); i; --i)\n#define Per(i, a, b) for (rint i = (a); i >= (b); --i)\n#define repit(it, a) for (__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)\n#define eprintf(...) (fprintf(stderr, __VA_ARGS__) & fflush(stderr))\n#define fillset(a, val) memset(a, val, sizeof(a))\n#define All(a) a.begin(), a.end()\n#define SZ(a) ((int)a.size())\n#define fi first\n#define se second\n#define pb push_back\n#define y0 y19260817\n#define y1 y19268107\n#define j0 j19260817\n#define j1 j19268107\n#define x0 x19260817\n#define x1 x19268107\nusing namespace std;\n#ifndef LOCAL_JUDGE\n#define Debug(...)\n#else\ntemplate <typename T> inline void _debug(const char *names, T &&t) {\n(cerr << names << \" = \" << t << endl).flush();}\ntemplate <typename T1, typename ...T>\ninline void _debug(const char *names, T1 &&t1, T &&... t) {\nconst char *comma = strchr(names, ',');\n(cerr.write(names, comma - names) << \" = \" << t1 << \", \").flush();\n_debug(comma + 1, t ...);}\n#define Debug(...) _debug(#__VA_ARGS__, __VA_ARGS__)\n#endif\nstruct __STARTER_OF_PROGRAM__ { __STARTER_OF_PROGRAM__() {\n#ifndef ONLINE_JUDGE\n  cerr << \"Code by H~$~C: \\n\" << flush;\n#endif\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr), cout.tie(nullptr);\n  cout << fixed << setprecision(12);\n} } __starter_of_program__;\n#ifdef LOCAL_JUDGE\nstruct __ENDDER_OF_PROGRAM__ { ~__ENDDER_OF_PROGRAM__() {\n  cerr << \"\\n\\nTime elasped: \" << clock() * 1000.0 / CLOCKS_PER_SEC << \" ms\\n\" << flush;\n} } __endder_of_program__;\n#endif\nusing ll = long long; using ull = unsigned long long; using uint = unsigned int;\nusing ld = long double; using pii = pair<int, int>; using pll = pair<ll, ll>;\nusing pli = pair<ll, int>; using pil = pair<int, ll>;\ntemplate <typename T> using min_queue = priority_queue<T, vector <T>, greater <T> >;\ntemplate <typename T> using max_queue = priority_queue<T>;\nmt19937 gen(chrono::steady_clock::now().time_since_epoch().count());\nstatic uniform_int_distribution<int> __disint__;\ninline int randint(void) { return __disint__(gen); }\ninline int randint(int l, int r) { return __disint__(gen) % (r - l + 1) + l; }\ntemplate <typename T> inline void reinit(T &t) { t.~T(); new (&t) T(); }\ntemplate <typename T> inline T chmax(T &x, T y) { return x = max(x, y); }\ntemplate <typename T> inline T chmin(T &x, T y) { return x = min(x, y); }\ntemplate <typename T> inline T chmax(T &x, initializer_list <T> i) { return x = max(x, max(i)); }\ntemplate <typename T> inline T chmin(T &x, initializer_list <T> i) { return x = min(x, min(i)); }\ninline void read() { } inline void write() { }\ntemplate <typename T> inline void read(T &x) { cin >> x; }\ntemplate <typename T> inline void write(const T &x) { cout << x; }\ntemplate <typename T, typename U>\ninline void write(const pair<T, U> &x) { write(x.first), cout.put(' '), write(x.second);}\ntemplate <typename T, typename U>\ninline void read(pair<T, U> &x) { read(x.first), read(x.second);}\ntemplate <typename T, typename ...Ts> inline void read(T &x, Ts &...y) { read(x), read(y...); }\ntemplate <typename T, typename ...Ts> inline void write(const T &x, const Ts &...y) {\nwrite(x), (sizeof...(y) && (cout.put(' '), 0)), write(y...); }\n#define writeln(...) (write(__VA_ARGS__), cout.put('\\n'), 0)\ntemplate <typename It> inline void _write(It a, It b) {\nregister char flag = 0; while (a != b) { flag && (cout.put(' '), 0); write(*a ++), flag = 1; } }\n#define _writeln(...) (_write(__VA_ARGS__), cout.put('\\n'), 0)\nconst int mod1 = 1000000007, mod2 = 998244353, mod3 = 1000000009;\nconst double EPS = 1e-9, PI = acos(-1.0), _E_ = exp(1.0);\nconst int inf = 0x3f3f3f3f;\nconst ll lnf = 0x3f3f3f3f3f3f3f3f;\n\nint n, k;\nll dp[500005][2];\n// 0: 剩余 \n// 1: 不剩\nvector<pair<int, ll> > g[500005];\n\nvoid dfs(int u, int par) {\n  ll sum = 0;\n  vector<ll> vec;\n  rep(i, SZ(g[u])) {\n    int v = g[u][i].fi;\n    ll w = g[u][i].se;\n    if (v == par) continue;\n    dfs(v, u);\n    sum += dp[v][1];\n    vec.push_back(dp[v][0] - dp[v][1] + w);\n  }\n  dp[u][0] = dp[u][1] = sum;\n  sort(vec.begin(), vec.end(), greater<ll>());\n  while (!vec.empty() && vec.back() < 0) vec.pop_back();\n  int sz = SZ(vec);\n  rep(i, min(k - 1, sz)) dp[u][0] += vec[i];\n  rep(i, min(k, sz)) dp[u][1] += vec[i];\n}\n\nsigned main(int argc, const char *argv[]) {\n  int tests;\n  read(tests);\n  while (tests--) {\n    read(n, k);\n    rep1(i, n) g[i].clear();\n    rep1(i, n - 1) {\n      int u, v;\n      ll w;\n      read(u, v, w);\n      g[u].push_back({v, w});\n      g[v].push_back({u, w});\n    }\n    dfs(1, -1);\n    writeln(max(dp[1][0], dp[1][1]));\n  }\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "trees"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Paint the Tree.json",
    "editorial_link": "https://codeforces.com/blog/entry/70358",
    "editorial": "It is obvious that if we paint two vertices in the same color, they should be adjacent to each other  otherwise we could paint them in different colors, and the answer would not be worse. So we can reduce the problem to the following: choose a set of edges with maximum cost such that no vertex is adjacent to more than k\n chosen edges. This problem is very similar to maximum weighted matching on the tree, and we can try to use some methods that allow us to solve that problem.\n\nLet's solve the problem using dynamic programming dpv,f\n  the answer to the problem for the subtree of the vertex v\n, f\n is the flag that denotes whether the edge from v\n to its parent is chosen. Depending on the flag f\n, we can choose k\n or k?1\n edges connecting our vertex to its children (let's denote the maximum number of edges we can choose as t\n).\n\nWe have to select no more than t\n child nodes of the vertex v\n. If we choose an edge leading to node u\n, then dpu,1+wv,u\n is added to the dp\n value we are currently calculating; otherwise, dpu,0\n is added.\n\nBased on this formula, you have to choose no more than t\n child nodes of vertex v\n for which the total sum of dpu,1+wv,u?dpu,0\n is maximum.",
    "hint": []
}