{
    "link": "https://codeforces.com//contest/621/problem/C",
    "problemId": "46903",
    "problem_idx": "C",
    "shortId": "621C",
    "contest_number": "621",
    "problem_submissions": {
        "D": [
            15706922,
            15708912,
            15712199,
            15709835,
            15713077,
            15712357,
            15708942,
            15766873,
            15747435,
            15733699,
            15715880,
            15719896
        ],
        "E": [
            15703295,
            15703499,
            15705519,
            15707664,
            15708122,
            15707325,
            15713941,
            15705601,
            15704286,
            15701891,
            15705027,
            15705042,
            15706397,
            15704658,
            15704205,
            15709743,
            15706195,
            15705463,
            15707137,
            15707198
        ],
        "C": [
            15701639,
            15705315,
            15700957,
            15701370,
            15700184,
            15704278,
            15705563,
            15700217,
            15702029,
            15701828,
            15699715,
            15700597,
            15699825,
            15700179,
            15700557,
            15702745,
            15701142,
            15700489,
            15700527,
            15701490
        ],
        "B": [
            15698894,
            15699840,
            15698446,
            15697286,
            15697213,
            15701158,
            15703631,
            15696667,
            15698191,
            15697920,
            15698162,
            15700575,
            15697836,
            15697601,
            15699162,
            15697389,
            15699466,
            15700819,
            15698045,
            15698470
        ],
        "A": [
            15697249,
            15709534,
            15696296,
            15695622,
            15695621,
            15696700,
            15695629,
            15695597,
            15695557,
            15695777,
            15695703,
            15696779,
            15695814,
            15695801,
            15700242,
            15695837,
            15695799,
            15696854,
            15696011,
            15696156
        ]
    },
    "name": "C. Wet Shark and Flowers",
    "statement": "There are sharks who grow flowers for Wet Shark. They are all sitting\r\naround the table, such that sharks and are neighbours for all from to .\r\nSharks and are neighbours too.Each shark will grow some number of\r\nflowers . For -th shark value is random integer equiprobably chosen in\r\nrange from to . Wet Shark has it’s favourite prime number , and he\r\nreally likes it! If for any pair of sharks and the product is divisible\r\nby , then Wet Shark becomes happy and gives dollars to each of these\r\nsharks.At the end of the day sharks sum all the money Wet Shark granted\r\nto them. Find the expectation of this value.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <bitset>\n#include <cassert>\n#include <cctype>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <string>\n#include <utility>\n#include <vector>\nusing namespace std;\n\n#define fi first\n#define se second\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#define sz(x) (int((x).size()))\n#define bit(x) (1 << (x))\n#define cnt1(x) (__builtin_popcount(x))\n\ntemplate<class T, class U>\ninline void chkmax(T& x, U y) {\n\tif (x < y) x = y;\n}\n\ntemplate<class T, class U>\ninline void chkmin(T& x, U y) {\n\tif (y < x) x = y;\n}\n\ntypedef long long LL;\ntypedef long double DB;\ntypedef pair<int, int> PII;\ntypedef vector<int> VI;\nconst int MX = 100005;\nint n, p;\nDB a[MX];\n\nint main() {\n//\tfreopen(\"in.txt\", \"r\", stdin);\n//\tfreopen(\"out.txt\", \"w\", stdout);\n\t\n\tint i, st, en;\n\tDB tot;\n\t\n\tscanf(\"%d%d\", &n, &p);\n\tfor (i = 0; i < n; i++) {\n\t\tscanf(\"%d%d\", &st, &en);\n\t\ta[i] = 1.0L * (en / p - (st - 1) / p) / (en - st + 1);\n\t}\n\ta[n] = a[0];\n\ttot = 0;\n\tfor (i = 0; i < n; i++) {\n\t\ttot += a[i] + a[i + 1] - a[i] * a[i + 1];\n\t}\n\ttot *= 2000;\n\tprintf(\"%.15lf\\n\", double(tot));\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math",
        "number theory",
        "probabilities"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Wet Shark and Flowers.json",
    "editorial_link": "https://codeforces.com//blog/entry/23196",
    "editorial": "Let be the probability that the product of the number of flowers of\r\nsharks and is divisible by . We want the expected value of the number of\r\npairs of neighbouring sharks whose flower numbers are divisible by .\r\nFrom linearity of expectation, this is equal to the probabilities that\r\neach pair multiplies to a number divisible by , or . (Donât forget about\r\nthe wrap-around at ) Now, for each pair of neighbouring sharks, we need\r\nto figure out the probability that their product is divisible by .\r\nConsider an interval . How many numbers in this interval are divisible\r\nby ? Well, it is easier if we break the interval up into . Since\r\ncontains numbers divisible by , the interval contains numbers divisible\r\nby . Now, consider two numbers and , with . Let be the number of\r\nintegers divisible by in the interval , and define similarly. Now whatâs\r\nthe probability that is divisible by ? We can count the opposite: the\r\nprobability that is not divisible by . Since is a prime, this means\r\nneither nor is divisible by . The number of integers in not divisible by\r\nis . Similar for . Therefore, the probability is not divisible by is\r\ngiven by . Therefore, the probability it is can be given by . Now, just\r\nsum over this for all .\r\n",
    "hint": []
}