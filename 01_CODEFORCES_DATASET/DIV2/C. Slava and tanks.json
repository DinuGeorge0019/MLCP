{
    "link": "https://codeforces.com//contest/877/problem/C",
    "problemId": "130130",
    "problem_idx": "C",
    "shortId": "877C",
    "contest_number": "877",
    "problem_submissions": {
        "F": [
            31654167,
            31653139,
            31655134,
            31656955,
            31639931,
            31650204,
            31648622,
            31651887,
            33479364,
            31655646,
            31694169,
            31893110
        ],
        "E": [
            31643937,
            31646320,
            31646382,
            31649500,
            31641532,
            31645322,
            31640350,
            31645337,
            31641515,
            31644016,
            31652300,
            31648164,
            31648540,
            31649482,
            31644271,
            31648366,
            31646891,
            31648638,
            31653283,
            31654866
        ],
        "D": [
            31641155,
            31644336,
            31643884,
            31647657,
            31665021,
            31739883,
            31649498,
            31650176,
            31649638,
            31639062,
            31644913,
            31645497,
            31649880,
            31645363,
            31666561,
            31654457,
            31648925,
            31649435
        ],
        "C": [
            31638971,
            31647846,
            31638928,
            31641413,
            31644732,
            31639320,
            31637367,
            31649045,
            31644989,
            31640032,
            31639911,
            31643252,
            31638722,
            31638437,
            31636874,
            31639305,
            31642602,
            31642153,
            31643991,
            31641659
        ],
        "B": [
            31638394,
            31636212,
            31636559,
            31636226,
            31644604,
            31636106,
            31634815,
            31636547,
            31636242,
            31637676,
            31679870,
            31636958,
            31645807,
            31636913,
            31635284,
            31638201,
            31637074,
            31636966,
            31638021,
            31639655,
            31639274
        ],
        "A": [
            31635408,
            31634914,
            31634587,
            31634665,
            31664979,
            31634608,
            31634317,
            31634960,
            31650654,
            31634394,
            31634371,
            31644024,
            31634639,
            31634521,
            31634889,
            31634575,
            31635175,
            31640619,
            31635186,
            31635511
        ]
    },
    "name": "C. Slava and tanks",
    "statement": "Slava plays his favorite game \"Peace Lightning\". Now he is flying a\r\nbomber on a very specific map.Formally, map is a checkered field of size\r\n, the cells of which are numbered from to , in each cell there can be\r\none or several tanks. Slava doesn’t know the number of tanks and their\r\npositions, because he flies very high, but he can drop a bomb in any\r\ncell. All tanks in this cell will be damaged.If a tank takes damage for\r\nthe first time, it instantly moves to one of the neighboring cells (a\r\ntank in the cell can only move to the cell , a tank in the cell can only\r\nmove to the cell ). If a tank takes damage for the second time, it’s\r\ncounted as destroyed and never moves again. The tanks move only when\r\nthey are damaged for the first time, they do not move by themselves.Help\r\nSlava to destroy all tanks using as few bombs as possible.\r\n",
    "solutions": [
        "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<set>\n#include<map>\n#include<queue>\nusing namespace std;\ntypedef long long  LL;\n#define sqr(x) ((x)*(x))\n#define mp make_pair\n#define F first\n#define S second\ninline int read(){\n\tint x = 0; char ch = getchar(); bool positive = 1;\n\tfor (; !isdigit(ch); ch = getchar())\tif (ch == '-')\tpositive = 0;\n\tfor (; isdigit(ch); ch = getchar())\tx = x * 10 + ch - '0';\n\treturn positive ? x : -x;\n}\ninline void write(int a){\n    if(a>=10)write(a/10);\n    putchar('0'+a%10);\n}\ninline void writeln(int a){\n    if(a<0){\n    \ta=-a; putchar('-');\n\t}\n\twrite(a); puts(\"\");\n}\n#include<string>\nint n;\nint main(){\n\tcin>>n;\n\twriteln(n+n/2);\n\tfor(int i=2;i<=n;i+=2){\n\t\twrite(i); putchar(' ');\n\t}\n\tfor(int i=1;i<=n;i+=2){\n\t\twrite(i); putchar(' ');\n\t}\n\tfor(int i=2;i<=n;i+=2){\n\t\twrite(i); putchar(' ');\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Slava and tanks.json",
    "editorial_link": "https://codeforces.com//blog/entry/55362",
    "editorial": "Letâs call the tanks, which are initially in even positions even, and\r\nthe tansk, which are initially in odd positions odd.Letâs throw bombs in\r\nall even positions. Now all tanks are in odd positons. Now letâs throw\r\nbombs in all odd positions. Now all even tanks are exterminated and all\r\nodd tanks are in even positions. Throw bombs in all even positions\r\nagain. Now all tanks are extemintated.Itâs not hard to prove that this\r\nstrategy is optimal.\r\n",
    "hint": []
}