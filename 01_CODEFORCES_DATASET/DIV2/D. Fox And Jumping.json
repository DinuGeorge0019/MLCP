{
    "link": "https://codeforces.com//contest/510/problem/D",
    "problemId": "21650",
    "problem_idx": "D",
    "shortId": "510D",
    "contest_number": "510",
    "problem_submissions": {
        "D": [
            9684147,
            9684396,
            9684806,
            9688259,
            9688872,
            9688202,
            9688369,
            9688723,
            9687291,
            9689191,
            9687900,
            9689279,
            9689405,
            9687159,
            9684719,
            9685186,
            9686736
        ],
        "C": [
            9682253,
            9688210,
            9686978,
            9685682,
            9685139,
            9685614,
            10161234,
            9700673,
            9685738,
            66447569,
            66445904,
            9686328,
            9689041,
            9687111,
            9690400,
            9689647,
            9688140,
            9688179,
            9685456,
            16269182,
            9682965,
            9696689,
            9680263
        ],
        "B": [
            9680110,
            9680943,
            9682904,
            9681822,
            9681781,
            9681477,
            9683346,
            9682052,
            9683360,
            9681047,
            9680759,
            9682507,
            9684457,
            9685737,
            9682120,
            9681028,
            9680313,
            9681991,
            9684236
        ],
        "A": [
            9678764,
            9678175,
            9681007,
            9678673,
            9678650,
            9678967,
            9679803,
            9682761,
            9680657,
            9678328,
            9678305,
            9680461,
            9680750,
            9679631,
            9678188,
            9678264,
            20834368,
            9678330,
            9678840
        ]
    },
    "name": "D. Fox And Jumping",
    "statement": "Fox Ciel is playing a game. In this game there is an infinite long tape\r\nwith cells indexed by integers (positive, negative and zero). At the\r\nbeginning she is standing at the cell 0.There are also cards, each card\r\nhas 2 attributes: length and cost . If she pays dollars then she can\r\napply -th card. After applying -th card she becomes able to make jumps\r\nof length , i. e. from cell to cell or cell .She wants to be able to\r\njump to any cell on the tape (possibly, visiting some intermediate\r\ncells). For achieving this goal, she wants to buy some cards, paying as\r\nlittle money as possible. If this is possible, calculate the minimal\r\ncost.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nint dp[1024];\nvector<int> v[333];\nint l[333], c[333];\nint const inf = 0x3f3f3f3f;\n\nint main() {\n    int n; scanf(\"%d\", &n);\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%d\", &l[i]);\n    }\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%d\", &c[i]);\n    }\n    for (int i = 0; i < n; ++i) {\n        int t = l[i];\n        for (int j = 2; j * j <= t; ++j) {\n            if (t % j == 0) {\n        v[i].push_back(j);\n                while (t % j == 0) t /= j;\n            }\n        }\n        if (t > 1) v[i].push_back(t);\n    }\n    int ret = inf;\n    for (int i = 0; i < n; ++i) {\n        memset(dp, 0x3f, sizeof dp);\n        int m = v[i].size();\n        int mx = 1 << m;\n        dp[mx - 1] = c[i];\n        for (int j = 0; j < n; ++j) {\n            if (i == j) continue;\n            int msk = 0;\n            int z = v[j].size();\n            for (int k = 0; k < m; ++k) {\n        for (int l = 0; l < z; ++l) {\n                    if (v[j][l] == v[i][k]) {\n                        msk |= (1 << k);\n                        break;\n                    }\n                }\n            }\n            for (int k = 0; k < mx; ++k) {\n                if (dp[k] != inf) {\n          int tm = k & msk;\n                    int tt = dp[k] + c[j];\n                    dp[tm] = min(dp[tm], tt);\n                }\n            }\n        }\n        ret = min(ret, dp[0]);\n    }\n    if (ret == inf) puts(\"-1\");\n    else printf(\"%d\\n\", ret);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "dp",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Fox And Jumping.json",
    "editorial_link": "https://codeforces.com//blog/entry/16173",
    "editorial": "This task equals to: what is the minimal sum of costs that we can select\r\nk cards, so their GCD is 1. First observation is that: means that for\r\nany prime , there exist i such that is not dividable by . So we only\r\ncare about what prime factors a number contain. (So for example, 12 ->\r\n{2, 3}, 6 -> {2, 3}, 9 -> {3]}) The second observation is: If then it\r\nhas at most 9 prime factors. So after we select one number, we only care\r\nabout these 9 or less primes. Then this problem equals to set covering\r\nproblem (SCP), it can be done by mask DP. It can run in about O(2^9 *\r\nn^2).\r\n"
}