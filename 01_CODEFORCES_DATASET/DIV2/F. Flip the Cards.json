{
    "link": "https://codeforces.com//contest/1504/problem/F",
    "problemId": "945468",
    "problem_idx": "F",
    "shortId": "1504F",
    "contest_number": "1504",
    "problem_submissions": {
        "F": [
            111935045
        ],
        "E": [
            111919537,
            111908818,
            111915476,
            111922174,
            111919354,
            111912277,
            111926667,
            111933626,
            111923368,
            111927972,
            111922895,
            111929837,
            111918921,
            111930705,
            111931199,
            111927831,
            111933167,
            111936231,
            111927723
        ],
        "D": [
            111903831,
            111898035,
            111906622,
            111906753,
            111900341,
            111920726,
            111905882,
            111889202,
            111908288,
            111906401,
            111899954,
            111909419,
            111914558,
            111906091,
            111907496,
            111910516,
            111906791,
            111899242,
            111913796
        ],
        "C": [
            111894612,
            111888998,
            111897074,
            111891045,
            111894960,
            111894678,
            111893967,
            111898677,
            111898779,
            111894676,
            111891710,
            111887088,
            111899272,
            111894062,
            111898183,
            111901135,
            111896065,
            111907589,
            111899883
        ],
        "B": [
            111886123,
            111877937,
            111882311,
            111876691,
            111883851,
            111877415,
            111875995,
            111877870,
            111879515,
            111885430,
            111904265,
            111879266,
            111878112,
            111883768,
            111877486,
            111882773,
            111887115,
            111878394,
            111891154
        ],
        "A": [
            111877837,
            111872895,
            111873662,
            111872585,
            111875452,
            111883020,
            111872169,
            111872988,
            111873021,
            111873751,
            111907400,
            111872188,
            111872713,
            111872621,
            111882814,
            111875730,
            111872954,
            111872953,
            111883462
        ]
    },
    "name": "F. Flip the Cards",
    "statement": "There is a deck of n cards. The i-th card has a number a_i on the front\r\nand a number b_i on the back. Every integer between 1 and 2n appears\r\nexactly once on the cards.A deck is called sorted if the front values\r\nare in order and the back values are in order. That is, if a_i< a_{i+1}\r\nand b_i> b_{i+1} for all 1\r\nle i<n.To flip a card i means swapping the values of a_i and b_i. You\r\nmust flip some subset of cards (possibly, none), then put all the cards\r\nin any order you like. What is the minimum number of cards you must flip\r\nin order to sort the deck?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\n#define fo(i,a,b) for(int i=a;i<=b;i++)\n#define fd(i,a,b) for(int i=a;i>=b;i--)\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef double db;\n\nint get(){\n    char ch;\n    while(ch=getchar(),(ch<'0'||ch>'9')&&ch!='-');\n    if (ch=='-'){\n        int s=0;\n        while(ch=getchar(),ch>='0'&&ch<='9')s=s*10+ch-'0';\n        return -s;\n    }\n    int s=ch-'0';\n    while(ch=getchar(),ch>='0'&&ch<='9')s=s*10+ch-'0';\n    return s;\n}\n\nconst int N = 4e5+5;\n\nint n;\nint a[N],b[N],to[N];\nint be[N];\nstruct node{\n    int mx_w,mx_v;\n    int mi_w,mi_v;\n    int l,r;\n}tree[N*2];\n\nvoid update_mx(int &nv, int &nw, int lv, int lw, int rv, int rw){\n    if (lv>rv)nv=lv,nw=lw;\n    else nv=rv,nw=rw;\n}\n\nvoid update_mi(int &nv, int &nw, int lv, int lw, int rv, int rw){\n    if (lv<rv)nv=lv,nw=lw;\n    else nv=rv,nw=rw;\n}\n\nvoid build(int now,int l,int r){\n    if (l==r){\n        tree[now].mx_w=tree[now].mi_w=l;\n        tree[now].mx_v=tree[now].mi_v=to[l];\n        return;\n    }\n    int mid=(l+r)/2;\n    tree[now].l=now+1;\n    tree[now].r=now+2*(mid-l+1);\n    build(tree[now].l,l,mid);\n    build(tree[now].r,mid+1,r);\n    update_mx(tree[now].mx_v,tree[now].mx_w,tree[tree[now].l].mx_v,tree[tree[now].l].mx_w,tree[tree[now].r].mx_v,tree[tree[now].r].mx_w);\n    update_mi(tree[now].mi_v,tree[now].mi_w,tree[tree[now].l].mi_v,tree[tree[now].l].mi_w,tree[tree[now].r].mi_v,tree[tree[now].r].mi_w);\n}\n\nint col[N];\nvector<int> con[N];\n\npair<int,int> getmx(int now,int l,int r,int x,int y){\n    if (x>y||r<x||y<l)return make_pair(-1,-1);\n    if (x<=l&&r<=y)return make_pair(tree[now].mx_v,tree[now].mx_w);\n    int mid=(l+r)/2;\n    pair<int,int>lv=getmx(tree[now].l,l,mid,x,y);\n    pair<int,int>rv=getmx(tree[now].r,mid+1,r,x,y);\n    if (lv.first>rv.first)return lv;\n    return rv;\n}\n\npair<int,int> getmi(int now,int l,int r,int x,int y){\n    if (x>y||r<x||y<l)return make_pair(1e9,-1);\n    if (x<=l&&r<=y)return make_pair(tree[now].mi_v,tree[now].mi_w);\n    int mid=(l+r)/2;\n    pair<int,int>lv=getmi(tree[now].l,l,mid,x,y);\n    pair<int,int>rv=getmi(tree[now].r,mid+1,r,x,y);\n    if (lv.first<rv.first)return lv;\n    return rv;\n}\n\nvoid change(int now,int l,int r,int x){\n    if (l==r){\n        tree[now].mx_v=-1;tree[now].mx_w=-1;\n        tree[now].mi_v=1e9;tree[now].mi_w=-1;\n        return;\n    }\n    int mid=(l+r)/2;\n    if (x<=mid)change(tree[now].l,l,mid,x);\n    else change(tree[now].r,mid+1,r,x);\n    update_mx(tree[now].mx_v,tree[now].mx_w,tree[tree[now].l].mx_v,tree[tree[now].l].mx_w,tree[tree[now].r].mx_v,tree[tree[now].r].mx_w);\n    update_mi(tree[now].mi_v,tree[now].mi_w,tree[tree[now].l].mi_v,tree[tree[now].l].mi_w,tree[tree[now].r].mi_v,tree[tree[now].r].mi_w);\n}\n\nvoid color(int x, int c){\n    if (col[x]!=-1)return;\n    change(1,1,2*n,a[x]);\n    change(1,1,2*n,b[x]);\n    col[x]=c;\n    for(int w=getmx(1,1,2*n,min(a[x],b[x])+1,max(a[x],b[x])-1).second;w!=-1;w=getmx(1,1,2*n,min(a[x],b[x])+1,max(a[x],b[x])-1).second){\n        int y=be[w];\n        if (to[w]<max(a[x],b[x]))break;\n        if (col[y]==-1){\n            color(y,c^1);\n            con[x].push_back(y);\n        }\n    }\n    for(int w=getmi(1,1,2*n,min(a[x],b[x])+1,max(a[x],b[x])-1).second;w!=-1;w=getmi(1,1,2*n,min(a[x],b[x])+1,max(a[x],b[x])-1).second){\n        int y=be[w];\n        if (to[w]>min(a[x],b[x]))break;\n        if (col[y]==-1){\n            color(y,c^1);\n            con[x].push_back(y);\n        }\n    }\n}\n\nint A[N],B[N];\nint num[N];\n\nbool cmp(int x,int y){\n    return A[x]<A[y];\n}\n\nbool pd[N];\nint que[N],k;\n\nvoid getall(int x){\n    if (pd[x])return;\n    pd[x]=true;\n    que[++k]=x;\n    for(auto y:con[x]){\n        getall(y);\n    }\n}\n\nint main(){\n    n=get();\n    fo(i,1,n){\n        a[i]=get();b[i]=get();\n        be[a[i]]=be[b[i]]=i;\n        to[a[i]]=b[i];\n        to[b[i]]=a[i];\n    }\n    build(1,1,2*n);\n    fo(i,1,n)col[i]=-1;\n    fo(i,1,n)\n        color(i,0);\n    fo(i,1,n)\n    if (col[i]){\n        A[i]=min(a[i],b[i]),B[i]=max(a[i],b[i]);\n    }\n    else \n        B[i]=min(a[i],b[i]),A[i]=max(a[i],b[i]);\n    fo(i,1,n)num[i]=i;\n    sort(num+1,num+1+n,cmp);\n    fo(i,1,n-1)if (B[num[i]]<B[num[i+1]]){printf(\"-1\\n\");return 0;}\n    k=0;\n    int ans=0;\n    fo(st,1,n)\n    if (!pd[st]){\n        k=0;\n        getall(st);\n        //now \n        int cst0=0;\n        fo(w,1,k){\n            int x=que[w];\n            if (col[x]){\n                //a[x]<b[x]\n                if (a[x]>b[x])cst0++;\n            }\n            else{\n                //a[x]>b[x]\n                if (a[x]<b[x])cst0++;\n            }\n        }\n        cst0=min(cst0,k-cst0);\n        ans+=cst0;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "2-sat",
        "constructive algorithms",
        "data structures",
        "greedy",
        "sortings",
        "two pointers"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Flip the Cards.json",
    "editorial_link": "https://codeforces.com//blog/entry/89319",
    "editorial": "Suppose there is a sorted deck where the -th card has on the front and\r\non the back. That is, it looks like this:The values must appear in some\r\nprefix of and some suffix of . That is, they must all appear on distinct\r\ncards. So, if two values between and appear on the same card, we should\r\nreport there is no solution.Now, we know that every card in the input\r\nhas a value in and a value in . Let denote the number matched with the\r\nvalue . Letâs split the cards into two sets. Set will be the cards that\r\nwill end with the smaller number on the front, and is the set of cards\r\nending with the smaller number on the back. In each set, as the smaller\r\nnumbers increase, the larger numbers decrease. Therefore, it must be\r\npossible to decompose into two decreasing subsequences, or there is no\r\nsolution.To decompose an array into two decreasing subsequences, there\r\nis a standard greedy approach. Also, note that any decomposition of into\r\ntwo decreasing sequences corresponds to a solution. In fact, we can put\r\nall the cards of one subsequence in and the rest in , and it will create\r\na sorted deck.But how can we find the decomposition that corresponds to\r\nthe minimum number of card flips? For every index such that , letâs add\r\na divider between and . This splits the array into several segments. We\r\ncan independently choose how to decompose each segment into two\r\nsubsequences, and combining them is guaranteed to be a valid\r\ndecomposition for the entire array. Also, there is a unique way to\r\ndecompose each segment: the only choice is in which one we call the\r\nfirst subsequence. And so, we can independently choose for each segment\r\nthe choice that requires the smallest number of flips.Complexity is .\r\n",
    "hint": []
}