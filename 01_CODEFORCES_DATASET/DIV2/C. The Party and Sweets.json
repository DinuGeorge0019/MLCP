{
    "link": "https://codeforces.com//contest/1159/problem/C",
    "problemId": "343494",
    "problem_idx": "C",
    "shortId": "1159C",
    "contest_number": "1159",
    "problem_submissions": {
        "F": [
            54044898,
            54053832,
            54040772,
            54080509,
            54040513,
            54052332,
            54089294
        ],
        "E": [
            54043384,
            54040516,
            54045368,
            54044519,
            54046071,
            54039628,
            54039102,
            54040677,
            54042415,
            54058636,
            54048968,
            54034868,
            54042017,
            54050776
        ],
        "D": [
            54042721,
            54041943,
            54035580,
            54042572,
            54080606,
            54038146,
            54052354,
            54091059,
            54040030,
            54037911,
            54039545,
            54040731,
            54042578
        ],
        "B": [
            54036094,
            54030149,
            54029931,
            54034799,
            54032077,
            54030372,
            54032226,
            54030581,
            54037312,
            54032827,
            54030507,
            54030402,
            54031286,
            54036701,
            54030641,
            54031474,
            54030960,
            54031607
        ],
        "C": [
            54036012,
            54033415,
            54031953,
            54037681,
            54035770,
            54032952,
            54035496,
            54033625,
            54035290,
            54036048,
            54033635,
            54032111,
            54035844,
            54040001,
            54036873,
            54037164,
            54036330,
            54033726
        ],
        "A": [
            54032465,
            54028777,
            54028614,
            54031427,
            54028774,
            54028660,
            54029725,
            54028649,
            54036064,
            54028741,
            54029512,
            54028702,
            54028642,
            54035314,
            54028987,
            54028902,
            54028641,
            54029509
        ]
    },
    "name": "C. The Party and Sweets",
    "statement": "n boys and m girls came to the party. Each boy presented each girl some\r\ninteger number of sweets (possibly zero). All boys are numbered with\r\nintegers from 1 to n and all girls are numbered with integers from 1 to\r\nm. For all 1\r\nleq i\r\nleq n the minimal number of sweets, which i-th boy presented to some\r\ngirl is equal to b_i and for all 1\r\nleq j\r\nleq m the maximal number of sweets, which j-th girl received from some\r\nboy is equal to g_j.More formally, let a_{i,j} be the number of sweets\r\nwhich the i-th boy give to the j-th girl. Then b_i is equal exactly to\r\nthe minimum among values a_{i,1}, a_{i,2},\r\nldots, a_{i,m} and g_j is equal exactly to the maximum among values\r\nb_{1,j}, b_{2,j},\r\nldots, b_{n,j}.You are interested in the minimum total number of sweets\r\nthat boys could present, so you need to minimize the sum of a_{i,j} for\r\nall (i,j) such that 1\r\nleq i\r\nleq n and 1\r\nleq j\r\nleq m. You are given the numbers b_1,\r\nldots, b_n and g_1,\r\nldots, g_m, determine this number.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 110000;\n\nint a[N], b[N];\n\nint main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\", \"r\", stdin);\n\tfreopen(\"out.txt\", \"w\", stdout);\n#endif\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0);\n\tint n, m; cin >> n >> m;\n\tfor (int i = 0; i < n; i++) cin >> a[i];\n\tfor (int i = 0; i < m; i++) cin >> b[i];\n\tsort(a, a + n);\n\tsort(b, b + m);\n\tif (a[n-1] > b[0]) return puts(\"-1\"), 0;\n\tif (a[n-1] == b[0]) {\n\t\tlong long ans = 0;\n\t\tfor (int i = 0; i < n-1; i++) ans += (long long)a[i] * m;\n\t\tfor (int i = 0; i < m; i++) ans += b[i];\n\t\tcout << ans << endl;\n\t\treturn 0;\n\t}\n\tlong long ans = 0;\n\tfor (int i = 0; i < n-1; i++) ans += (long long)a[i] * m;\n\tfor (int i = 0; i < m-1; i++) {\n\t\tans += b[i];\n\t}\n\tans -= a[n-2];\n\tans += b[m-1];\n\tans += a[n-1];\n\tcout << ans << endl;\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. The Party and Sweets.json",
    "editorial_link": "https://codeforces.com/blog/entry/66993?locale=en",
    "editorial": "Let\u00e2\u0080\u0099s note, that for all 1\r\nleq i\r\nleq n, 1\r\nleq j\r\nleq m is is true, that b_i\r\nleq g_j, because b_i\r\nleq a_{{i}{j}}\r\nleq g_j. So max(b_1, b_2,\r\nldots, b_n)\r\nleq min(g_1, g_2,\r\nldots, g_m). If it is not true, the answer is -1.Let\u00e2\u0080\u0099s prove, that if\r\nmax(b_1, b_2,\r\nldots, b_n)\r\nleq min(g_1, g_2,\r\nldots, g_m) the answer always exists and let\u00e2\u0080\u0099s find it. Let\u00e2\u0080\u0099s make all\r\na_{{i}{j}} = b_i. Let\u00e2\u0080\u0099s note, that b_i = min(a_{{i}{1}}, a_{{i}{2}},\r\nldots, a_{{i}{m}}). But in this case maximums in each column can be\r\nwrong. To make them correct we should place 1\r\nleq j\r\nleq m into the j-th column of the table a the number g_j. To make the\r\nsum as small as possible we want to place all g_j into the row with\r\nmaximal b_i. If we will make it the minimal in this row will be equal\r\nmin(g_1, g_2,\r\nldots, g_m). But the number b for this row is equal to max(b_1, b_2,\r\nldots, b_n). So, if max(b_1, b_2,\r\nldots, b_n) = min(g_1, g_2,\r\nldots, g_m) the answer is equal to (b_1 + b_2 +\r\nldots + b_n) m + g_1 + g_2 +\r\nldots + g_m - max(b_1, b_2,\r\nldots, b_n) m. But if max(b_1, b_2,\r\nldots, b_n) < min(g_1, g_2,\r\nldots, g_m) we should place some of the g_j in the other row. Let\u00e2\u0080\u0099s\r\nplace g_1 into the row there b_i is second maximum in the array b. It\u00e2\u0080\u0099s\r\neasy to check in this case, that all minimums, maximums will be correct\r\nin this case. In this case the answer is equal to (b_1 + b_2 +\r\nldots + b_n) m + g_1 + g_2 +\r\nldots + g_m - max(b_1, b_2,\r\nldots, b_n) (m - 1) - max_2(b_1, b_2,\r\nldots, b_n).So: If max(b_1, b_2,\r\nldots, b_n) > min(g_1, g_2,\r\nldots, g_m) the answer is -1; If max(b_1, b_2,\r\nldots, b_n) = min(g_1, g_2,\r\nldots, g_m) the answer is (b_1 + b_2 +\r\nldots + b_n) m + g_1 + g_2 +\r\nldots + g_m - max(b_1, b_2,\r\nldots, b_n) m; If max(b_1, b_2,\r\nldots, b_n) < min(g_1, g_2,\r\nldots, g_m) the answer is (b_1 + b_2 +\r\nldots + b_n) m + g_1 + g_2 +\r\nldots + g_m - max(b_1, b_2,\r\nldots, b_n) (m - 1) - max_2(b_1, b_2,\r\nldots, b_n). Maximum, second maximum in the array b, minimum in the\r\narray g and the sums in the arrays b and g can be easily computed in the\r\nlinear time. So, we have a linear time solution.Complexity: O(n + m).\r\n"
}