{
    "link": "https://codeforces.com//contest/1285/problem/A",
    "problemId": "512926",
    "problem_idx": "A",
    "shortId": "1285A",
    "contest_number": "1285",
    "problem_submissions": {
        "F": [
            68545833,
            68535522,
            68573334,
            96999211,
            96999146,
            68573161,
            69098509,
            68626658,
            68682994
        ],
        "E": [
            68524941,
            68518417,
            68530554,
            68529308,
            68531407,
            68531344,
            68531615,
            68534357,
            68534051,
            68529832,
            68540790,
            68535869,
            68541711,
            68538608,
            68538163,
            68537974,
            68541963,
            68539842,
            68536496,
            68538129
        ],
        "D": [
            68507082,
            68557516,
            68506902,
            68508017,
            68510947,
            68510777,
            68514189,
            68853550,
            68517438,
            68515728,
            68517316,
            68510494,
            68517322,
            68513984,
            68513219,
            68519377,
            68516492,
            68513650,
            68514808,
            68520824,
            68521323
        ],
        "C": [
            68504523,
            68504942,
            68504769,
            68508581,
            68506887,
            68517568,
            68507055,
            68509904,
            68509741,
            68512066,
            68504310,
            68506343,
            68505577,
            68506877,
            68502537,
            68507690,
            68510042,
            68506486,
            68506105,
            68511726
        ],
        "B": [
            68502726,
            68503606,
            68501596,
            68503575,
            68503622,
            68503646,
            68503039,
            68505606,
            68503233,
            68506583,
            68503941,
            68502210,
            68503653,
            68503110,
            68508414,
            68502653,
            68505318,
            68503675,
            68512385,
            68505519
        ],
        "A": [
            68497804,
            68499469,
            68497513,
            68497595,
            68499958,
            68498702,
            68497961,
            68500159,
            68498048,
            68499346,
            68497975,
            68497626,
            68497817,
            68498423,
            68498520,
            68497604,
            68497745,
            68497829,
            68499449,
            68499473
        ]
    },
    "name": "A. Mezo Playing Zoma",
    "statement": "Today, Mezo is playing a game. Zoma, a character in that game, is\r\ninitially at position x = 0. Mezo starts sending n commands to Zoma.\r\nThere are two possible commands: \u2019L\u2019 (Left) sets the position x: =x - 1;\r\n\u2019R\u2019 (Right) sets the position x: =x + 1. Unfortunately, Mezo\u2019s\r\ncontroller malfunctions sometimes. Some commands are sent successfully\r\nand some are ignored. If the command is ignored then the position x\r\ndoesn\u2019t change and Mezo simply proceeds to the next command.For example,\r\nif Mezo sends commands \"\", then here are some possible outcomes\r\n(underlined commands are sent successfully): \"\" Zoma moves to the left,\r\nto the right, to the left again and to the right for the final time,\r\nending up at position 0; \"\" Zoma recieves no commands, doesn\u2019t move at\r\nall and ends up at position 0 as well; \"\" Zoma moves to the left, then\r\nto the left again and ends up in position -2. Mezo doesn\u2019t know which\r\ncommands will be sent successfully beforehand. Thus, he wants to know\r\nhow many different positions may Zoma end up at.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<typename T = int> vector<T> create(size_t n){ return vector<T>(n); }\ntemplate<typename T, typename... Args> auto create(size_t n, Args... args){ return vector<decltype(create<T>(args...))>(n, create<T>(args...)); }\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint n; cin >> n;\n\tstring s; cin >> s;\n\tint l = count(s.begin(), s.end(), 'L');\n\tint r = count(s.begin(), s.end(), 'R');\n\tcout << l + r + 1 << endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Mezo Playing Zoma.json",
    "editorial_link": "https://codeforces.com//blog/entry/72950",
    "editorial": "Let and be the number of \u00e2\u0080\u0099L\u00e2\u0080\u0099s and \u00e2\u0080\u0099R\u00e2\u0080\u0099s in the string respectively. Note\r\nthat Zoma may end up at any integer point in the interval . So, the\r\nanswer equals .\r\n"
}