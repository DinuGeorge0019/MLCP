{"link": "https://codeforces.com//contest/1890/problem/F", "problemId": "2253932", "problem_idx": "F", "shortId": "1890F", "contest_number": "1890", "problem_submissions": {"E2": [230243672, 230240480, 230297470, 230254767, 230258587, 230244180, 230254845, 230249864, 230263075, 230246186], "E1": [230239375, 230240649, 230254904, 230258446, 230244551, 230252707, 230254758, 230249708, 230262781, 230215711, 230246708, 230241675, 230236999, 230227194, 230225604, 230238862, 230234772, 230232052, 230239219], "C": [230215281, 230206393, 230208934, 230208092, 230206406, 230204020, 230204003, 230208271, 230220692, 230199138, 230200556, 230196035, 230205630, 230204581, 230205712, 230207645, 230206074, 230200943], "D": [230200794, 230211914, 230214420, 230213956, 230250838, 230215130, 230243357, 230434274, 230253613, 230238740, 230207739, 230228283, 230207522, 230211617, 230214234, 230212438, 230213769, 230217205, 230221587, 230210557], "B": [230187228, 230188639, 230191975, 230193314, 230189140, 230192487, 230190081, 230430791, 230190255, 230203446, 230188113, 230219697, 230186542, 230187036, 230191039, 230188308, 230187745, 230188740, 230190731, 230189120], "A": [230183445, 230183838, 230195995, 230187748, 230183292, 230186367, 230183250, 230430735, 230183529, 230188990, 230184115, 230213790, 230183853, 230183272, 230185989, 230183632, 230183856, 230183304, 230184663, 230511197, 230183134], "F": [230416243, 230223460, 232061512, 232061382, 232061156, 230258558, 230434262, 230438215]}, "name": "F. Game of Stacks", "statement": "You have n stacks r_1,r_2,\r\nldots,r_n. Each stack contains some positive integers ranging from 1 to\r\nn.Define the following functions:function init(pos): stacks := an array\r\nthat contains n stacks r[1], r[2], ..., r[n] return get(stacks,\r\npos)function get(stacks, pos): if stacks[pos] is empty: return pos else:\r\nnew_pos := the top element of stacks[pos] pop the top element of\r\nstacks[pos] return get(stacks, new_pos)You want to know the values\r\nreturned by\r\ntexttt{init(1)},\r\ntexttt{init(2)},\r\nldots,\r\ntexttt{init(n)}.Note that, during these calls, the stacks r_1,r_2,\r\nldots,r_n don\u2019t change, so the calls\r\ntexttt{init(1)},\r\ntexttt{init(2)},\r\nldots,\r\ntexttt{init(n)} are independent.\r\n", "solutions": ["#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define N\t100000\n\nint *ej[N], eo[N], oo[N], dd[N], rr[N];\n\nint find(int i) {\n\tif (rr[i] == -1)\n\t\trr[i] = oo[i] == 0 ? i : find(ej[i][oo[i] - 1]);\n\treturn rr[i];\n}\n\nint main() {\n\tint n, i, j, k, o;\n\n\tscanf(\"%d\", &n);\n\tfor (i = 0; i < n; i++) {\n\t\tscanf(\"%d\", &eo[i]);\n\t\tej[i] = (int *) malloc(eo[i] * sizeof *ej[i]);\n\t\tfor (o = 0; o < eo[i]; o++) {\n\t\t\tscanf(\"%d\", &j), j--;\n\t\t\tej[i][o] = j, dd[i]++, dd[j]--;\n\t\t}\n\t}\n\tfor (i = 0; i < n; i++)\n\t\twhile (dd[i] > 0) {\n\t\t\tj = i;\n\t\t\twhile (dd[j] > 0) {\n\t\t\t\tk = ej[j][oo[j]++];\n\t\t\t\tdd[j]--, dd[k]++;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t}\n\tmemset(rr, -1, n * sizeof *rr);\n\tfor (i = 0; i < n; i++)\n\t\tprintf(\"%d \", find(i) + 1);\n\tprintf(\"\\n\");\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["dfs and similar", "graphs", "implementation", "trees"], "dificulty": "3000", "interactive": false}