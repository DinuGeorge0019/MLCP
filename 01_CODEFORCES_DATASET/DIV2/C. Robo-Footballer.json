{"link": "https://codeforces.com//contest/248/problem/C", "problemId": "2267", "problem_idx": "C", "shortId": "248C", "contest_number": "248", "problem_submissions": {"E": [2649329, 2666555, 2670742], "C": [2647083, 2645782, 2644570, 2645026, 2644143, 2646018, 2646002, 2646393, 2645569, 2646511, 2646914, 2645391, 2646255, 2646251, 2646956, 2646183, 2647244, 2647055], "B": [2643322, 2643726, 2643149, 2643654, 2645176, 2645012, 2644994, 2643618, 2647620, 2643812, 2643918, 2646274, 2644810, 2644905, 2644568, 2644808, 2644058, 2644407], "A": [2642156, 2642135, 2642120, 2642490, 2642087, 2642114, 2642102, 2642090, 2642543, 2642959, 2642616, 2642092, 2642321, 2643225, 2643200, 2646252, 2642288, 2643406], "D": [2657603, 2671870]}, "name": "C. Robo-Footballer", "statement": "It\u2019s a beautiful April day and Wallace is playing football with his\r\nfriends. But his friends do not know that Wallace actually stayed home\r\nwith Gromit and sent them his robotic self instead. Robo-Wallace has\r\nseveral advantages over the other guys. For example, he can hit the ball\r\ndirectly to the specified point. And yet, the notion of a giveaway is\r\nforeign to him. The combination of these features makes the Robo-Wallace\r\nthe perfect footballer as soon as the ball gets to him, he can just aim\r\nand hit the goal. He followed this tactics in the first half of the\r\nmatch, but he hit the goal rarely. The opposing team has a very good\r\ngoalkeeper who catches most of the balls that fly directly into the\r\ngoal. But Robo-Wallace is a quick thinker, he realized that he can cheat\r\nthe goalkeeper. After all, they are playing in a football box with solid\r\nwalls. Robo-Wallace can kick the ball to the other side, then the\r\ngoalkeeper will not try to catch the ball. Then, if the ball bounces off\r\nthe wall and flies into the goal, the goal will at last be scored.Your\r\ntask is to help Robo-Wallace to detect a spot on the wall of the\r\nfootball box, to which the robot should kick the ball, so that the ball\r\nbounces once and only once off this wall and goes straight to the goal.\r\nIn the first half of the match Robo-Wallace got a ball in the head and\r\nwas severely hit. As a result, some of the schemes have been damaged.\r\nBecause of the damage, Robo-Wallace can only aim to his right wall\r\n(Robo-Wallace is standing with his face to the opposing team\u2019s goal).The\r\nfootball box is rectangular. Let\u2019s introduce a two-dimensional\r\ncoordinate system so that point (, ) lies in the lower left corner of\r\nthe field, if you look at the box above. Robo-Wallace is playing for the\r\nteam, whose goal is to the right. It is an improvised football field, so\r\nthe gate of Robo-Wallace\u2019s rivals may be not in the middle of the left\r\nwall. In the given coordinate system you are given: , the -coordinates\r\nof the side pillars of the goalposts of robo-Wallace\u2019s opponents; the\r\n-coordinate of the wall to which Robo-Wallace is aiming; , the\r\ncoordinates of the ball\u2019s position when it is hit; the radius of the\r\nball. A goal is scored when the center of the ball crosses the axis in\r\nthe given coordinate system between (, ) and (, ). The ball moves along\r\na straight line. The ball\u2019s hit on the wall is perfectly elastic (the\r\nball does not shrink from the hit), the angle of incidence equals the\r\nangle of reflection. If the ball bounces off the wall not to the goal,\r\nthat is, if it hits the other wall or the goal post, then the opposing\r\nteam catches the ball and Robo-Wallace starts looking for miscalculation\r\nand gets dysfunctional. Such an outcome, if possible, should be avoided.\r\nWe assume that the ball touches an object, if the distance from the\r\ncenter of the ball to the object is no greater than the ball radius .\r\n", "solutions": ["#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n\ndouble const eps=1e-8;\nint main()\n{\n    double y1,y2,yw,xb,yb,r;\n    scanf(\"%lf%lf%lf%lf%lf%lf\",&y1,&y2,&yw,&xb,&yb,&r);\n    //3 10 15 17 9 2\n    yw-=r;\n    double y=y1+r;\n    y=2*yw-y;\n    double k=(y-yb)/xb;\n    double ans=(y-yw)/k;\n    double A=1,B=ans/(yw-y1-r),C=-B*(y1+r);\n    double dis=(B*y2+C)/sqrt(B*B+1);\n    if (dis<r+eps) printf(\"-1\\n\");\n    else printf(\"%.9lf\\n\",ans);\n    //system(\"pause\");\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "geometry"], "dificulty": "2000", "interactive": false}