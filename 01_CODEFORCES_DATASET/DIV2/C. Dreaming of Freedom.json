{
    "link": "https://codeforces.com//contest/1826/problem/C",
    "problemId": "1909267",
    "problem_idx": "C",
    "shortId": "1826C",
    "contest_number": "1826",
    "problem_submissions": {
        "E": [
            204602017,
            204700967,
            204596765,
            204613109,
            204610329,
            204611748,
            204612296,
            204613897,
            204618004,
            204612275,
            204613205,
            204624231,
            204661971,
            204617315,
            204616794,
            204621809,
            204612737,
            204608182,
            204614402,
            204623261,
            204628297,
            204657040,
            204656984,
            204620172
        ],
        "D": [
            204582402,
            204585260,
            204585742,
            204589825,
            204587542,
            204586441,
            204588591,
            204588717,
            204601344,
            204595957,
            204585944,
            204587666,
            204590835,
            204583319,
            204595885,
            204598399,
            204596824,
            204590840,
            204586792,
            204595240
        ],
        "C": [
            204575229,
            204577835,
            204576798,
            204582977,
            204581863,
            204581888,
            204584053,
            204580950,
            204583799,
            204579525,
            204580707,
            204583107,
            204584404,
            204580743,
            204585996,
            204593307,
            204588423,
            204580589,
            204579635,
            204588957
        ],
        "B": [
            204572809,
            204580324,
            204572676,
            204573618,
            204574774,
            204576010,
            204578782,
            204574513,
            204577548,
            204573291,
            204574259,
            204574305,
            204578256,
            204586331,
            204580048,
            204581387,
            204580847,
            204576280,
            204573990,
            204577086
        ],
        "A": [
            204572057,
            204576972,
            204571963,
            204571901,
            204572576,
            204573728,
            204575534,
            204572534,
            204574691,
            204572015,
            204572728,
            204572787,
            204573859,
            204573619,
            204575569,
            204576295,
            204576573,
            204576421,
            204572686,
            204573646
        ],
        "F": [
            204650095,
            204649588,
            204792576,
            204790910,
            204785582,
            204784675,
            204782497,
            204779284,
            205142563
        ]
    },
    "name": "C. Dreaming of Freedom",
    "statement": "Madeleine L\u2019EngleThere are n programmers choosing their favorite\r\nalgorithm amongst m different choice options. Before the first round,\r\nall m options are available. In each round, every programmer makes a\r\nvote for one of the remaining algorithms. After the round, only the\r\nalgorithms with the maximum number of votes remain. The voting process\r\nends when there is only one option left. Determine whether the voting\r\nprocess can continue indefinitely or no matter how people vote, they\r\nwill eventually choose a single option after some finite amount of\r\nrounds?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define ld long double\n#define ll long long int\n#define st first\n#define nd second\n#define pb push_back\n#define pii pair<int,int>\n#define mp make_pair\n\nusing namespace std;\n\nvector<int> dd(int x){\n    vector<int> res;\n    for(int i=1;i*i<=x;i++){\n        if(x % i == 0){\n            res.pb(i);\n            res.pb(x / i);\n        }\n    }\n    return res;\n}\n\nvoid solve(){\n    int n, m; cin >> n >> m;\n    auto y = dd(n);\n    for(int x : y){\n        if(x <= m && x > 1){\n            cout << \"NO\" << \"\\n\";\n            return;\n        }\n    }\n    cout << \"YES\" << \"\\n\";\n}\n\nint main(){\n    ios_base::sync_with_stdio(0); cin.tie(0);\n\n    int tt = 1;\n    cin >> tt;\n    while(tt--) solve();\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Dreaming of Freedom.json",
    "editorial_link": "https://codeforces.com//blog/entry/115892",
    "editorial": "First we need to notice, that in order to keep some amount of options\r\nindefinetely, this number has to be at least and divide . Let\u00e2\u0080\u0099s find the\r\nsmallest such number . Now, if , let\u00e2\u0080\u0099s always vote for the first options\r\nevenly. In the other case each round would force us to to decrease the\r\nnumber of remaining options, so eventually it will become one. So the\r\nanswer is if and only if .Now on how to find the number fast. Since is a\r\ndivisor of we can say, that is the smallest divisor of not equal to .We\r\ncan find the number using different approaches. A more straightforward\r\none, is checking all the numbers from up to . If no divisors found, then\r\nis prime and . This results in a solution.The solution presented before\r\nis good, but not fast enough in some languages, like Python. We\u00e2\u0080\u0099ve\r\ndecided not to cut it off to not make the problem heavy in IO. We can\r\noptimize it via finding the smallest divisor using the sieve of\r\nEratosthenes. This would result in or even faster precomputation and to\r\nanswer a test case, so the total time complexity is .\r\n"
}