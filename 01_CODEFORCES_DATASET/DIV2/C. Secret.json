{
    "link": "https://codeforces.com//contest/271/problem/C",
    "problemId": "2619",
    "problem_idx": "C",
    "shortId": "271C",
    "contest_number": "271",
    "problem_submissions": {
        "E": [
            3100960,
            3101029,
            3101071,
            3101158,
            3100866,
            3102870,
            3101166,
            3102181,
            3104424,
            3101146
        ],
        "D": [
            3097603,
            3098148,
            3098618,
            3105470,
            3097962,
            3097553,
            3102341,
            3095933,
            3103085,
            3099231,
            3098903,
            3234423,
            3234279,
            3097880,
            3098244,
            3098489,
            3098417,
            3098350
        ],
        "C": [
            3096548,
            3096735,
            3096791,
            3098514,
            3096739,
            3100014,
            3097999,
            3096954,
            3097536,
            3097492,
            3096753,
            3096325,
            3097045,
            3096662,
            3097008,
            3099380,
            3096917
        ],
        "B": [
            3095583,
            3095688,
            3095491,
            3095629,
            3097325,
            3094921,
            3095378,
            3095747,
            3095596,
            3095729,
            3095110,
            3095423,
            3095894,
            3095694,
            3096439,
            3095824
        ],
        "A": [
            3094225,
            3094352,
            3094125,
            3094074,
            3095532,
            3094090,
            3094248,
            3094063,
            3094079,
            3094404,
            3093980,
            3094108,
            3094610,
            3094523,
            3094534,
            3094629
        ]
    },
    "name": "C. Secret",
    "statement": "The Greatest Secret Ever consists of words, indexed by positive integers\r\nfrom to . The secret needs dividing between Keepers (let’s index them by\r\npositive integers from to ), the -th Keeper gets a set of words with\r\nnumbers from the set . Here and below we’ll presuppose that the set\r\nelements are written in the increasing order.We’ll say that the if the\r\nfollowing conditions are hold: for any two indexes () the intersection\r\nof sets and is an empty set; the union of sets is set ; in each set ,\r\nits elements an arithmetic progression (in particular, should hold). Let\r\nus remind you that the elements of set form an arithmetic progression if\r\nthere is such number , that for all () fulfills . For example, the\r\nelements of sets , and form arithmetic progressions and the elements of\r\nsets and don’t.Your task is to find any partition of the set of words\r\ninto subsets so that the secret is safe. Otherwise indicate that there’s\r\nno such partition.\r\n",
    "solutions": [
        "#include<cstdio>\nint a[2000000],n,k,l,r;\nint main(){\n    scanf(\"%d%d\",&n,&k);\n    if(n<k*3)printf(\"-1\");\n    else{\n        l=1,r=n-1;\n        for(int i=1;i<k;i++)a[l]=i,a[l+1]=i,a[r]=i,l+=2,r--;\n        for(int i=1;i<=n;i++)if(!a[i])a[i]=k;\n        printf(\"%d\",a[1]);for(int i=2;i<=n;i++)printf(\" %d\",a[i]);\n    }\n    getchar(),getchar();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Secret.json",
    "editorial_link": "https://codeforces.com//blog/entry/6662",
    "editorial": "If there is no solution (because each of the sets must have at least 3\r\nelements). Otherwise we can divide first words in the following way: 1 1\r\n2 2 3 3 ... k k 1 2 3 ... k For each of the sets, the difference between\r\nthe first and the second elements will be . And the difference between\r\nthe second and the third elements is definitely not (more precisely, it\r\nis for the -th set). So each set doesnât form an arithmetic progression\r\nfor sure. For this solution it doesnât matter how we divide the rest\r\nwords.\r\n",
    "hint": []
}