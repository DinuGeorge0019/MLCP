{
    "link": "https://codeforces.com//contest/1153/problem/D",
    "problemId": "329969",
    "problem_idx": "D",
    "shortId": "1153D",
    "contest_number": "1153",
    "problem_submissions": {
        "F": [
            52702167,
            52706102,
            52706128,
            52712612,
            52712916,
            52713472,
            52705273,
            53020024
        ],
        "B": [
            52696113,
            52686055,
            52686525,
            52695492,
            52689812,
            52686724,
            52686280,
            52688127,
            52685475,
            52701491,
            52686741,
            52698339,
            52691737,
            52687040,
            52687523,
            52688787,
            52686777,
            52686537,
            52688504
        ],
        "E": [
            52693078,
            52699456,
            52700287,
            52698093,
            52707544,
            52707213,
            52699436,
            52799036,
            52699341,
            52698614,
            52704976,
            52690529,
            52703713,
            52700978,
            52703569,
            52699263,
            52702855,
            52704578
        ],
        "C": [
            52688281,
            52690605,
            52689780,
            52702384,
            52693171,
            52696923,
            52689825,
            52696486,
            52688289,
            52687066,
            52689512,
            52696924,
            52687069,
            52688673,
            52691802,
            52692527,
            52691364,
            52690866,
            52691574
        ],
        "D": [
            52686405,
            52692724,
            52692621,
            52691138,
            52695645,
            52702315,
            52692971,
            52694653,
            52693169,
            52691270,
            52695539,
            52695198,
            52699214,
            52692631,
            52695518,
            52703264,
            52696334,
            52697661,
            52695431
        ],
        "A": [
            52684329,
            52684726,
            52684448,
            52687427,
            52684995,
            52684651,
            52684577,
            52684221,
            52684289,
            52684251,
            52684828,
            52699079,
            52689885,
            52684309,
            52684805,
            52684271,
            52684301,
            52684354,
            52684338
        ]
    },
    "name": "D. Serval and Rooted Tree",
    "statement": "Now Serval is a junior high school student in Japari Middle School, and\r\nhe is still thrilled on math as before. As a talented boy in\r\nmathematics, he likes to play with numbers. This time, he wants to play\r\nwith numbers on a rooted tree.A tree is a connected graph without\r\ncycles. A rooted tree has a special vertex called the root. A parent of\r\na node v is the last different from v vertex on the path from the root\r\nto the vertex v. Children of vertex v are all nodes for which v is the\r\nparent. A vertex is a leaf if it has no children.The rooted tree Serval\r\nowns has n nodes, node 1 is the root. Serval will write some numbers\r\ninto all nodes of the tree. However, there are some restrictions. Each\r\nof the nodes except leaves has an operation\r\nmax or\r\nmin written in it, indicating that the number in this node should be\r\nequal to the maximum or minimum of all the numbers in its sons,\r\nrespectively. Assume that there are k leaves in the tree. Serval wants\r\nto put integers 1, 2,\r\nldots, k to the k leaves (each number should be used exactly once). He\r\nloves large numbers, so he wants to maximize the number in the root. As\r\nhis best friend, can you help him?\r\n",
    "solutions": [
        "//ihdignite\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 3e5;\n\nint n, f[MAXN], a[MAXN], dp[MAXN];\nvector<int> adj[MAXN];\n\nint main() {\n\tios_base::sync_with_stdio(0);\n\tcin.tie(NULL);\n\n\tcin >> n;\n\tfor(int i=0; i<n; ++i)\n\t\tcin >> a[i];\n\tfor(int i=1; i<n; ++i)\n\t\tcin >> f[i], --f[i], adj[f[i]].push_back(i);\n\tint nl=0;\n\tfor(int i=n-1; ~i; --i) {\n\t\tif(adj[i].size()==0) {\n\t\t\tdp[i]=1;\n\t\t\tnl++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(a[i]) {\n\t\t\tdp[i]=1e9;\n\t\t\tfor(int j : adj[i])\n\t\t\t\tdp[i]=min(dp[i],dp[j]);\n\t\t} else {\n\t\t\tdp[i]=0;\n\t\t\tfor(int j : adj[i])\n\t\t\t\tdp[i]+=dp[j];\n\t\t}\n\t}\n\n\tcout << nl+1-dp[0];\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dfs and similar",
        "dp",
        "greedy",
        "trees"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Serval and Rooted Tree.json",
    "editorial_link": "https://codeforces.com/blog/entry/66539",
    "editorial": "If we want to check whether is the\nanswer (I didn\u00e2\u0080\u0099t say I want to do binary search), then we can set all\nthe numbers no less than as , and the numbers less than as . Then we can\nuse to represent that the maximum number on node is the -th smallest\nnumber of leaves within subtree of . There should be at least ones in\nthe subtree of such that the number on is one. Then is the final answer.\nComplexity .\n"
}