{
    "link": "https://codeforces.com//contest/1042/problem/A",
    "problemId": "220705",
    "problem_idx": "A",
    "shortId": "1042A",
    "contest_number": "1042",
    "problem_submissions": {
        "F": [
            42987714,
            42984651,
            42989319,
            42983649,
            42989168,
            42989334,
            42988495,
            42988621,
            42990991,
            42984782,
            42991318,
            42984734,
            42989762,
            42989508,
            42989199,
            42985445,
            42984262,
            42986731
        ],
        "A": [
            42984167,
            42973725,
            42974031,
            42973482,
            42973429,
            42973632,
            42973538,
            42974330,
            42975529,
            42973708,
            42993729,
            42975026,
            42986836,
            42989940,
            42973749,
            42992518,
            42973915,
            42973554,
            42973556,
            42973468
        ],
        "E": [
            42983656,
            42983448,
            42981915,
            42988922,
            42984518,
            42985483,
            42983668,
            42985621,
            42980250,
            42987926,
            42982614,
            42990994,
            42986527,
            42985364,
            42983020,
            42986197,
            42989170,
            42987817,
            42982499
        ],
        "C": [
            42982112,
            42977810,
            42976676,
            42978400,
            42979933,
            42981591,
            42978723,
            42979152,
            42981616,
            43020286,
            42983391,
            42977530,
            42987879,
            42980102,
            42982752,
            42979907,
            42979506,
            42982122,
            42993016,
            42980948,
            42977178
        ],
        "B": [
            42975906,
            42974331,
            42974910,
            42974847,
            42974321,
            42975176,
            42975023,
            42975453,
            42976952,
            42975043,
            42975357,
            42976939,
            42975515,
            42976516,
            42974965,
            42975963,
            42975276,
            42974792,
            42974885,
            42974787
        ],
        "D": [
            42975097,
            42975491,
            42978165,
            42980511,
            42976657,
            42978683,
            42980559,
            42982541,
            42983622,
            43020160,
            42982284,
            42979330,
            42979227,
            42983154,
            42978119,
            42977687,
            42982730,
            42983764,
            42980017,
            42976894,
            42978512
        ]
    },
    "name": "A. Benches",
    "statement": "There are n benches in the Berland Central park. It is known that a_i\r\npeople are currently sitting on the i-th bench. Another m people are\r\ncoming to the park and each of them is going to have a seat on some\r\nbench out of n available.Let k be the maximum number of people sitting\r\non one bench after additional m people came to the park. Calculate the\r\nminimum possible k and the maximum possible k.Nobody leaves the taken\r\nseat during the whole process.\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <set>\n#include <vector>\n#include <map>\n#include <queue>\n#include <string>\n#include <cstring>\n#include <cstdio>\n// Linsanity is back \t\n// Who’s Kobe? \n// Fisherman can’t stop us\n// Average ABCDE on a good day\nusing namespace std;\n\nint n, m;\nconst int MAXN = 105;\nint a[MAXN];\n\nint main()\n{\n\tios::sync_with_stdio(0);\n\tcin >> n >> m;\n\n\tint sum = 0;\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tcin >> a[i];\n\t\tsum += a[i];\n\t}\n\tsort(a, a + n);\n\n\tcout << max(a[n - 1], (sum + m + n - 1) / n) << \" \" << m + a[n - 1] << \"\\n\";\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Benches.json",
    "editorial_link": "https://codeforces.com/blog/entry/61891",
    "editorial": "The maximum value of should be determined in the following way: letâs\r\nfind the maximum number of people already sitting on the same bench (i.\r\ne. the maximum value in the array ). Let this number be . Then if all\r\nadditional people will seat on this bench, we will get the maximum value\r\nof , so the answer is .To determine the minimum value of letâs perform\r\noperations. During each operation we put a new person on the bench\r\ncurrently having minimum number of people occupying it. The answer is\r\nthe maximum number of people on the bench after we perform this\r\noperation for each of newcomers.\r\n",
    "hint": []
}