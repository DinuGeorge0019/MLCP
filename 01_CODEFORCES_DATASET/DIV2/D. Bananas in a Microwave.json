{
    "link": "https://codeforces.com//contest/1498/problem/D",
    "problemId": "939725",
    "problem_idx": "D",
    "shortId": "1498D",
    "contest_number": "1498",
    "problem_submissions": {
        "F": [
            111387402,
            111392757,
            111390775,
            111403691,
            111584572,
            111473088,
            111426854,
            111399920,
            111425764,
            111390588,
            111477247,
            111409684
        ],
        "E": [
            111380663,
            111380198,
            111394052,
            111391669,
            111387992,
            111389314,
            111390832,
            111389181,
            111394144,
            111392605,
            111394352,
            111387457,
            111380754,
            111393900,
            111397027,
            111441836,
            111441307,
            111400155,
            111385873,
            111395643
        ],
        "D": [
            111375931,
            111387383,
            111378758,
            111377203,
            111379613,
            111383007,
            111378160,
            111383542,
            111383036,
            111382698,
            111387981,
            111395336,
            111398482,
            111384225,
            111554241,
            111398142,
            111389221
        ],
        "C": [
            111364680,
            111369793,
            111370806,
            111367823,
            111370857,
            111369057,
            111366879,
            111378226,
            111375527,
            111375807,
            111372267,
            111374177,
            111372378,
            111369667,
            111372541,
            111380311,
            111372933,
            111374210
        ],
        "B": [
            111358809,
            111373602,
            111364638,
            111359716,
            111363279,
            111361795,
            111359400,
            111362980,
            111362321,
            111366507,
            111367101,
            111362617,
            111361122,
            111360963,
            111365072,
            111367219,
            111360331,
            111363745
        ],
        "A": [
            111356336,
            111356639,
            111356331,
            111356474,
            111357691,
            111356258,
            111356269,
            111358101,
            111357535,
            111358945,
            111356500,
            111356580,
            111356352,
            111356349,
            111359311,
            111357626,
            111356520,
            111357210
        ]
    },
    "name": "D. Bananas in a Microwave",
    "statement": "You have a malfunctioning microwave in which you want to put some\r\nbananas. You have n time-steps before the microwave stops working\r\ncompletely. At each time-step, it displays a new operation.Let k be the\r\nnumber of bananas in the microwave currently. Initially, k = 0. In the\r\ni-th operation, you are given three parameters t_i, x_i, y_i in the\r\ninput. Based on the value of t_i, you must do one of the following::\r\n(t_i=1, x_i, y_i) pick an a_i, such that 0\r\nle a_i\r\nle y_i, and perform the following update a_i times: k:=\r\nlceil (k + x_i)\r\nrceil.: (t_i=2, x_i, y_i) pick an a_i, such that 0\r\nle a_i\r\nle y_i, and perform the following update a_i times: k:=\r\nlceil (k\r\ncdot x_i)\r\nrceil.Note that . See input format for more details. Also,\r\nlceil x\r\nrceil is the smallest integer\r\nge x.At the i-th time-step, you must apply the i-th operation exactly\r\nonce.For each j such that 1\r\nle j\r\nle m, output the earliest time-step at which you can create j bananas.\r\nIf you cannot create j bananas, output -1.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define re register\n#define int long long \nusing namespace std;\ninline int read(){\n\tre int t=0;re char v=getchar();\n\twhile(v<'0')v=getchar();\n\twhile(v>='0')t=(t<<3)+(t<<1)+v-48,v=getchar();\n\treturn t;\n}\nconst int M=1e9+7;\ninline void add(re int &x,re int y){(x+=y)>=M?x-=M:x;}\ninline int ksm(re int x,re int y){\n\tre int s=1;\n\twhile(y){\n\t\tif(y&1)s=1ll*s*x%M;\n\t\tx=1ll*x*x%M,y>>=1;\n\t}\n\treturn s;\n}\nstruct edge{int to,next;}e[2000002];\nint t,n,m,a[1000002],b[1000002],c[1000002],ans[100002];\nlong double d[1000002];\nsigned main(){\n\tn=read(),m=read();\n\tfor(re int i=1;i<=n;++i)a[i]=read(),b[i]=read(),c[i]=read();\n\tmemset(ans,-1,sizeof(ans));ans[0]=0;\n\tfor(re int i=1;i<=n;++i){\n\t\tif(a[i]==1){\n\t\t\tb[i]=(b[i]+99999)/100000;\n\t}\n\t\tfor(re int j=m;~j;--j)\n\t\t\tif(ans[j]>-1){\n\t\t\t\tif(j==0&&a[i]==2)continue;\n\t\t\t\tre int x=j;\n\t\t\t\tre int num=0;\n\t\t\t\twhile(1){\n\t\t\t\t\t++num;\n\t\t\t\t\tif(num>c[i])break;\n\t\t\t\t\tif(a[i]==1)x=x+b[i];\n\t\t\t\t\telse x=(x*b[i]+99999)/100000;\n\t\t\t\t\tre int tmp=x;x=tmp;\n\t\t\t\t\tif(tmp>m)break;\n\t\t\t\t\tif(ans[tmp]>-1)break;\n\t\t\t\t\tans[tmp]=i;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t}\n\tfor(re int i=1;i<=m;++i)printf(\"%lld \",ans[i]);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "graphs",
        "implementation"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Bananas in a Microwave.json",
    "editorial_link": "https://codeforces.com//blog/entry/89137",
    "editorial": "We have a brute force O(N?M2)\n solution.\n\nAt every timestep t\n, for each banana bi\n that has already been reached previously, apply this timestep's operation yt\n times on bi\n. For all the yt\n bananas reachable from bi\n, update their minimum reachability time if they hadn't been reached previously.\n\nWhy is this correct? Simply because we are simulating each possible step of the algorithm exactly as it is described. Therefore, we cannot get an answer that's better or worse than that of the optimal solution."
}