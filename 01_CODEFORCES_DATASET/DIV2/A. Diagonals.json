{
    "link": "https://codeforces.com//contest/1995/problem/A",
    "problemId": "2772824",
    "problem_idx": "A",
    "shortId": "1995A",
    "contest_number": "1995",
    "problem_submissions": {
        "D": [
            272131872,
            272130569,
            272133863,
            272134415,
            272137449,
            272131543,
            272154573,
            272151706,
            272151276,
            272141813,
            272139057,
            272151246,
            272151986,
            272153217,
            272157571,
            272148679,
            272149814,
            272486180,
            272157625
        ],
        "C": [
            272114157,
            272113319,
            272111654,
            272121111,
            272111819,
            272119019,
            272113803,
            272118860,
            272116736,
            272123439,
            272121989,
            272122933,
            272112629,
            272120005,
            272111612,
            272116249,
            272108377,
            272486053,
            272120187
        ],
        "B2": [
            272102449,
            272103267,
            272100652,
            272099671,
            272128930,
            272108225,
            272104913,
            272104116,
            272101309,
            272106328,
            272112408,
            272104562,
            272129604,
            272109901,
            272102807,
            272107257,
            272115397,
            272485973,
            272104395
        ],
        "B1": [
            272096864,
            272101887,
            272104047,
            272103720,
            272094726,
            272108617,
            272105391,
            272104979,
            272103341,
            272103459,
            272111706,
            272103650,
            272098283,
            272103066,
            272101216,
            272107954,
            272116416,
            272485941,
            272098022
        ],
        "A": [
            272090620,
            272090574,
            272092410,
            272090882,
            272090527,
            272090716,
            272091404,
            272090846,
            272090748,
            272091332,
            272090661,
            272091173,
            272091300,
            272090978,
            272091057,
            272091479,
            272092003,
            272485907,
            272092660
        ],
        "E1": [
            272173791,
            272497229,
            272245140
        ],
        "E2": [
            272497185,
            272274307
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131851",
    "editorial": "Obviously, in this case, it is worth filling the largest\ndiagonal with chips, then two that are smaller in size, and so on. The\nasymptotics turns out to be .\n",
    "name": "A. Diagonals",
    "statement": "Vitaly503 is given a checkered board with a side of n and k chips. He\r\nrealized that all these k chips need to be placed on the cells of the\r\nboard (no more than one chip can be placed on a single cell).Let’s\r\ndenote the cell in the i-th row and j-th column as (i ,j). A diagonal is\r\nthe set of cells for which the value i + j is the same. For example,\r\ncells (3, 1), (2, 2), and (1, 3) lie on the same diagonal, but (1, 2)\r\nand (2, 3) do not. A diagonal is called occupied if it contains at least\r\none chip. Determine what is the minimum possible number of occupied\r\ndiagonals among all placements of k chips.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#include <ext/pb_ds/assoc_container.hpp>#include <ext/pb_ds/trie_policy.hpp>using namespace std;using namespace __gnu_pbds;typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;#ifndef ONLINE_JUDGE    #include \"debug.h\"#else    #define dbg(...) 42    template<typename T>ostream&operator<<(ostream&os,vector<T>&vec){for(signed i=0;i+1<vec.size();++i){os<<vec[i]<<\" \";}if(vec.size()>0)os<<vec.back();return os;}#endif #define all(x) x.begin(), x.end()#define rall(x) x.rbegin(), x.rend() template<typename T>istream&operator>>(istream&is,vector<T>&vec){for(T&element:vec){is>>element;}return is;}template<typename T>void chmin(T&x,T y){x=min(x,y);}template<typename T>void chmax(T&x,T y){x=max(x,y);} void test_case(signed ___) {    int n, k;    cin >> n >> k;    int len = n;    int cnt = 1;    int res = 0;    for (int len = n; len >= 1 && k > 0; len--) {        k = max(k - len, 0);        res++;        if (cnt > 1 && k > 0) {            k = max(k - len, 0);            res++;        }        cnt = max(cnt, 2);    }    cout << res << \"\\n\";} signed main(void) {    cin.tie(0)->sync_with_stdio(false);     signed tt = 1;    cin >> tt;    while (tt--)     test_case(69420);}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Diagonals.json",
    "hint": [
        "Hint How many described diagonals are there in total? How many cells do they contain?"
    ]
}