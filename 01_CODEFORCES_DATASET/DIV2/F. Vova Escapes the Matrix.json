{
    "link": "https://codeforces.com//contest/1898/problem/F",
    "problemId": "2335773",
    "problem_idx": "F",
    "shortId": "1898F",
    "contest_number": "1898",
    "problem_submissions": {
        "F": [
            233450574,
            233457949,
            233467515,
            233466448,
            233450115,
            233454725,
            233463128,
            233471713,
            233470994,
            233469056,
            233474042,
            233470434,
            233458835,
            233614728,
            233476326,
            233462809
        ],
        "E": [
            233441984,
            233449621,
            233448756,
            233450708,
            233457860,
            233468270,
            233468710,
            233455247,
            233460527,
            233459486,
            233456525,
            233456267,
            233442454,
            233450603,
            233457668,
            233457546,
            233456433,
            233459601
        ],
        "D": [
            233439311,
            233443902,
            233441038,
            233440745,
            233435948,
            233439363,
            233448813,
            233450333,
            233450173,
            233448637,
            233449484,
            233443262,
            233440290,
            233442801,
            233447935,
            233449116,
            233444433,
            233445888,
            233447666
        ],
        "C": [
            233437140,
            233441058,
            233453524,
            233446938,
            233457389,
            233463103,
            233445642,
            233446287,
            233444165,
            233454398,
            233442338,
            233450866,
            233439899,
            233442638,
            233440345,
            233451344,
            233455263,
            233443534
        ],
        "B": [
            233433250,
            233430973,
            233433699,
            233436473,
            233450867,
            233434472,
            233434369,
            233434724,
            233433761,
            233437212,
            233434859,
            233446835,
            233432249,
            233434786,
            233432957,
            233432850,
            233432623,
            233436010,
            233435023
        ],
        "A": [
            233429884,
            233429662,
            233431384,
            233429804,
            233442536,
            233430471,
            235774649,
            233430414,
            233430365,
            233430105,
            233432324,
            233431283,
            233429761,
            233429928,
            233430822,
            233430024,
            233429760,
            233430123,
            233430150,
            233431268
        ]
    },
    "name": "F. Vova Escapes the Matrix",
    "statement": "Following a world tour, Vova got himself trapped inside an n\r\ntimes m matrix. Rows of this matrix are numbered by integers from 1 to n\r\nfrom top to bottom, and the columns are numbered by integers from 1 to m\r\nfrom left to right. The cell (i, j) is the cell on the intersection of\r\nrow i and column j for 1\r\nleq i\r\nleq n and 1\r\nleq j\r\nleq m.Some cells of this matrix are blocked by obstacles, while all\r\nother cells are empty. Vova occupies one of the empty cells. It is\r\nguaranteed that cells (1, 1), (1, m), (n, 1), (n, m) (that is, corners\r\nof the matrix) are blocked.Vova can move from one empty cell to another\r\nempty cell if they share a side. Vova can escape the matrix from any\r\nempty cell on the boundary of the matrix; these cells are called .Vova\r\ndefines the type of the matrix based on the number of exits he can use\r\nto escape the matrix: The 1-st type: matrices with no exits he can use\r\nto escape. The 2-nd type: matrices with exactly one exit he can use to\r\nescape. The 3-rd type: matrices with multiple (two or more) exits he can\r\nuse to escape. Before Vova starts moving, Misha can create more\r\nobstacles to block more cells. However, he cannot change the type of the\r\nmatrix. What is the maximum number of cells Misha can block, so that the\r\ntype of the matrix remains the same? Misha cannot block the cell Vova is\r\ncurrently standing on.\r\n",
    "solutions": [
        "/**\n                                                                                   .@@\n                                                                                  .@@@@\n                                                     :--:::::::-----==:           %%@@@%\n                                             :*++*+==--========----------:-==:    @%@@@@.\n                                        .:. ..-=+=+*+==---=----------------------:*@%@@@@         .:..\n                                    .::::-----==+++====+***#+----=------:--------:-=%%@@@#+%@@@@@@@@@@@@@@@@@@@@@@@\n                :+%@@@@@@@@@@@@@@%::::=*=+++++=++==*%*=-:=*#+##=-----------------:::-@%@@@@@@@@@@@@@@@@@@@@@@@@@@@*\n             %%%%%%%%%%%%@@@@@@= .:=%@@@@@%#+=+++%@@@%+-==--++-=*=-------------:-----:*@@@@@@@@@@@@@@@@@@@@@@@@@@%\n             .@%%%%%%%%%@@@@%-  .-+%@@@%@%%%####%#*#%%%%==----+=:-++-::------=----:::-:=@@@@@@@@@@@@@@@@@@@@@@@@%\n               %%%%%%%%@%@@+  .::*%@@@@%#**#####******+*%+===---+=..:==---------:---::::-@@@@@@@@@@@@@@@@@@@@@@@\n                %%%@%@%@@@:  .:.%%%%%#=+*+*+*#*+=+***+*#+##=--=-:-+.   ==--------::::--::-@@@@@@@@@@@@@@@@@@@@@\n                .#%%%@%@%   . -@%%%*==+*++++**+++=+*++=++=+#--=----=:    +---:-::::::::--:-%@@@@@@@@@@@@@@@@@@=\n                 :@%%%@=   . =%%%#---======+=========++=====*+--=-=--=.    --::::::::::::--=@@@@@@@@@@@@@@@@@@@:\n                  @%@#   .  -%%*+---========-:===++======-==-==--=-----:     :-::::::::::::-=@@@@@@@@@@@@@@@@@@@=\n                  @#.   .  .#*=+.-=-==-==-=-::===+=-==-=--=--==+=:------=     .-:::::::-:--:--#@@@@@@@@@@@@@@@@@@#\n                 -         #+=-.:----=------.:-=-*===----==--==-+=-:::-::-:     :-::::::::::::==+@@@@@@@@@@@@@@@@@@\n                     .    -==:..-=--==--:--:.-===+====----=====--=--::::::--      ::::::::::--:=%*=*@@@@@@@@@@@@@@@@.\n                .+: .    .==-. :----==-::--:.---==-===---:------:----::::::-+       -:::------=--+#+#@@@@@@@@@@@@@@@@.\n              .  . -    ::--. .::---:-:.-=-: :--==--==:=--:-::::::--=-:::-:::*.      :::-==-==--:--**@@@@@@@%@@@@@@@@@=\n                :.:     :::.. .--:::::: --::.:-:---:--:--:::::::::--:==:::::::+.       -:-=-=------:*+@@@@@@@@+ #@@@@@@\n               #-.     -::.. .=+:::::-:.--:-:.::::::::::+:::::::::::::=-:::::::=.       :=-=---------=%@@@@@@@@@  :@@@@\n             =@-.     :=..   -=::::-:=.:::::-.::::::::::%.::::::::::::-=:::::::-+-        *%+=-------::%@@@@@@@@@:   :.\n            #@*.      +-..  :-:::::::-..::::::.:::::::::%:-==:..::::::--+:::-:-====        :*%*+--------@@@@@@@@@@@\n          .@@#       :=:   .::::::::-:.::::::-.::::::.::#.:-=-.:..::-.::-+:-=--===-=         -#++*+===-:#@@@@@@@@@@@@\n         *@@*.    .  --.  .:::::::::-..::::.:::.::..:..-+:: :.......=-.::==--==-====-         .**++++++=*@@@@@@@@@@@@@@:\n       =@@@==.   .: .=-.  ::::::.:::= .::::...::.-.....+::.  - :....:*::--==--=======-          -*++=+=++@@@@@@@@@@@@@@@@@@%-\n     +@@@@::- . .:- :=-. .::::::.::=- .::......=.=.....+ :.  :  ... - -:-==+---==-=--*: .        .*++++=+%@@@@@@@@@@@@@@@\n   :@@@@%.=.. : :--.-=:..:.::.:....-  ......... --:   ::.:.  .  :::.-  ----=#+====-==-*.           :*++=++@@@@@@@@@@@@@.\n     +*#-- :.:: :-::==..::.:..:...:: .:....... . ::   :. :.      -::. ..:#=-=+-==-===-=+.+       ..  -+=++%#=-+=%@@@@#\n        . ...::.--::==: ::........-:..=-   :  .   .   . .:.      :-*-    .:=-+====-==--=-+#       :.   +++++==+++++*@@*\n          :.::.::-.-==-.=-:...--.: :.::-.  :            .:    :+--:.     ::.==+===---=-=+--%.      +@@=. :=*+++++++*++*\n          .::::::::==---=-:.. =- .  ..: :..:  .:...  :  -. .+.   -*=:.+@@@@@@@@*====---=+*:**. .    =@@**%+:-+*%*++***+=\n       . ...::::::-+=--+-=:--.+:.    ..  :.-.:::::. .:  :.*.  :-:+#@@%#++=%:-@##+===-==-=+--==+ ..   .###*+++**#@%#+*+++*=\n       ..::::::::.*+--:=-----:=:-....::=:--=:....:..=. :.    ..+@@@*+==---#-=@*+*====-===+:-=*@% ::    *#*+*#+*++#%%%%##*+++-\n       .::.:::::::%=--:-------: .     : -:-+#+-....= ..:     -*#::%+-:=+---:+**-+==-===-=-+-=@@@@ -#    =***#%#+*+#%==*+\n      :.:::::::::-+=:---=-----. .      :. ::=..:..:   .       :   -=--:..:--+#-:-+=======-%==#@@@@:.@=   :#***%%#*+=#-==\n      :-::-::::.:--*:---=-=---: . ..-+*#%#=-+:...:.                :+-....-+=::::#=======-*%-+@@@%@@-%%-  .#++*%%#*+#*+-\n    . =-:::=:::::-:+.:--=-=--:- .=**+-:::+++%-..:.   .               ::..--:....:=#-=====-#@+=@@@%*%@%%@%-  -*+#%:*%++*=\n      =:::---:------::-:==-=--+.      ....:  :.:.                     .   ......::*=-====-*@#-%@@%#*%%%%%%@*. +**- .*#**=\n     +:::. :---=--=:=:-:==-==-:@.    .....:. ..:.                       ...::...--:*=====-+@@-*@%%*##%%*###+#*= +-  ::-:**\n     ::-:   .:---.#:=.:-==-==-:%%    ....  ..:  :                              :=  ==-+==-*@@=*@%#**#%#****##*++**- .:     .\n    .--      .:--:=:=-.-==-==-:%@+   ....   .:                                ::   :=--===#@@**%%**#*##***++**+=+*- ::\n   :.         :----=.- -=-====-%@@:   ...   .      .                         .     :---==-@@@#%%%#*#*******+++***+# :\n .             -:--: .:-+--==-:%@@@                                              . #%:-===@@@#%##*##**+++#*+*+*+****-\n                ::-:  *:%==----*+%@%   .                                        . #@%--+=*@%@%%##**#**+++%#*==+*++*+=\n                -=:-. #:+#+---:#%++%#.                      . .:. .:+          ..#@@@--**%%%%%###*+#++*++*--+*==+++-+.\n                . =:: -==%@--=-=%**%%+                 =@+ .....:.:.:.         .*:@@%--%%@%%%####**#++*+++--:   .+*-==\n                   :---+**%%---:@**%%#+     .      :@%%%::.:::::..:.:         .-::%%%-:@%%%%%###**#*+++=*+-::    :==:-=\n               .    :=-+*##*#:-:**+*%**@:           =@#*:.::::::::::        .:...:@%%-+%%%%%###**+%*==+=%=:-.    ..    :.\n               .     +*=+**%**-:=***##*+%%.        . .*%.:::::::::..       :. ....@%%=%%%#*#####+#%+===+:-:-.    .\n                     .+-++**#+** +*-*++++%%%.    ..     --:.::.:::       =: .    .%%#+%%####*+@*++%+=-+. .:-\n                      --++=**#*+*-++==+++%%%#@+..         .:::.        :=.  .    .%%%#*#*##*#+#=++#===:  .-\n               .    . =-=+****+**+#:+==++#%%#%%%@%=. ..              :-:       .  %#%###%*##.:*+==#++-    :\n                    .  :-=+=++***++#-:+++*++*#%%%%@@%=.. ..       :---.           #@@%@@@@=  :=  .+-+-\n                .    . :.-===++**+==*+::+#++++*#%%%%%%%%-.     .*=:-:.            *%%%##*==+**#*+==*+=\n                     :  -::====++*=+=+*==*=-=#**##%#%%%%%*+-:%#--:-. ..           .%#*=-==-*#*++==++-=#*:\n                     :*::**=====+**==+=++*##*+++**##%%%%%%. :::.:. ..             .:=--===+@#*+++=+*+=-=+=*#=\n                     #-=+==*=-++++#++==-++++*++++*#%%%%%%=-  .:.... .            .  -=--=+@#*#%@@%+==+=====+*+\n                   ..*++==+**+:=*++%++++#++++++*+**#%%%%#-=. .:........              .@-=+++#%%@@%@=======++*@+\n                .+-.-+*==*++#+-:=++*%+=**++++++*++**%%%%--=-.::..........            .: ==++*%@@%@+========+*#@@+\n               -:--.=-*+*+++++=:.:-+*#+++*****=+*##%+#%==---::...........           :    .+%@@@%@#+======++*#%%@@#%=\n              +::-:==--=*==**=#=:::-+#**+*+**++**%=.-++-:::--... ..  ....          :.     ..-@@@*++====++++*#%@@@%*=+.\n              =---.=--:*+=+#*+=:-:--=++=**+++++*#+:=-.--:.:::..........           +        ..*%-+=-====+++*###@@@#+=+#*\n              =----==-*+===@%:..-=---++##=+++***#-. .:=::...:..........         :=          :*:==-=====+++*%#%@@*++++##@*\n             .+=-=*=+#*---==%:.:-=%+#+-:--+++*+*%:..  -::.............         :.          .--==-=======+*#*%@%+++==+##@#%+\n             -:=##*+=-::-===+:.--+*#---::+*++++#+ ....-  .:.........  ..   . :+. .         =============+**#*++++===*%%#%###.\n             :--*#@*+-::::-==-:-=#=.---:-+*==+#-......-:  ..........        :.            +============+*##**++====*%%%#**+=+\n            .:---%=@*+-::--:-:.-*=:=:--=#++*@%-... . .-:.... ......       .:.           .=-===========+**+++===-===*#***+++=-:\n            ..:-==+*#+*=:-::--.=+=::-=+*+%@+#@%.... ..-:.  .........     .-            .+============++========--===++**++==--\n             .:----++%**-::  .+=+=++++++*%#+@@@%......-:.  .            =. .          .+-===-===-==++==--===------==+++====--:\n              ..:--=*#%*+=   .=%##-:-+++*##+@@@@@.... -:.  .         ..-             -+==-======++*=======------==++======+*#*\n               .::=-=#+#-  .::=#-:-:=++=+##*@@@@@@.. .::.  .         -:      .     .=+==-==+-==++=:=---=----========+**+=----:=\n                .::--=+#=.:::-*=:::::++=+*#*%.#@@@@:..::.   .   .  .+           .=#*++++*+=====--=-=---=--=+**##*+=====-------:-\n                 ..::-=*+::::=:.::::--===**+*. -@@@@:.::  ...  .  -.. .  .  .-%@@@*+*#*#*+====--=-:----*##*+==--==---======----:\n                   ..:-:+:-:--:::--:::-+#*+++:   @@@@+:-  ..  .  +. ..   -@@@@@@@*@%*###*======*+-=-=%#=-=======-====-=======-:-+\n                     ..:=::::::::::-:**++=-++.   .@@@@#= . .   :+    :#@@@@@@@@@%##%%%%#+++==#@%%@=**+==========-------=====-=+==\n                       .  .:::::::--+==----+#++.  .@@@@@ .. ..:::+#%@%@@@@@@@#@%%%%%%@%*=+#@@@%@#%@=============------=====++++=+\n                          ....  ..::=-:----+*=+**=++@@@@@:.-*@@%%%%%@@@@*:. .@@%%@%%@%**%@@@@@##@@*========--------=====+++*#*+==\n                           .    ...::=:--==++=+++=+++%@@@@@@@%%@%@@#-      :%#%%%%@%#@@@@@@@%#@*@@+--===-----------======*##**=--\n                                ...:.--:--=*+===++=++=#@@@@@%%%#*++=.     :%%%@@%%@@@@@@@@+@@#+*@@+===-----------====+++*##**+=-:\n                                ....:+=:-==#++===+++===%@@%#*+==+++++++*##@@@%@@@@@@@@@**%##+=-%@#=-------------====+++*##*++=-:.\n                                 ..:-+#===+#  .-:=+=*+*+#*+==+++++++++**%@@@@@@@@@@@*-@@#+=+==+@@=--------------===+++*##*+=-:.\n                                  ..:=%+==+%       =#*-##*#+=%+++=++*+#%@@@@@@@@@@:%@#*=+=-+=#@@+-=-------------====+*#*++=-:.\n                                     .=*===*      .--#:..-#@@-.   .:=**@@@@@@@@*@@@%+%+@@=--#@%=--:----------------=+++==-:.\n                                       =::--         :*-##==-.        -@@@@@@@@@@@@@@@@@@@@@%+=::::::::::::::::::--====-:..\n                                           ...        *%=-.....       %@@@@@@@@@@@@@@@@@@@@@*-::..:.............:::--:..      .-:\n                                                  ::  ==.   .....    +@%@@@@@@@@@@@@@@@@@@@@*.:. . ...          .... .     =@*-:\n                                                      ::..:---::... :#*#@@@@@@@@@%%@@@@@@@@@@+ .                  :*    ##+%+:\n                                                             ...::::*-:::@@@@@@%##%%%%@@@@@@@#                   -+. *+ =  -:\n                                                                   ..  .#@@%%%%##*+*#%@@@%%%=                    . :     ::\n                                                                        @@@%%%######%%%%#####%=                =        #\n                                                                          @@@@@%@@%%%###*##*-                 . .     =\n                                                                          :@@%%%%###******+=-                 .\n                                                                            *@###***+**+++:\n                                                                               -*- =*++*:\n\n\n                                         Credit for the pic: J5-daigada from deviantart\n*/\n#include <cassert>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <cctype>\n\n#include <algorithm>\n#include <random>\n#include <bitset>\n#include <queue>\n#include <functional>\n#include <set>\n#include <map>\n#include <vector>\n#include <chrono>\n#include <iostream>\n#include <iomanip>\n#include <limits>\n#include <numeric>\n#include <unordered_map>\n#include <unordered_set>\n\nusing namespace std;\n\nconst int N = 2e3;\nstring a[N];\n\nint n, m;\n\nbool check(int i, int j) {\n    if (i < 0 || i >= n || j < 0 || j >= m) return false;\n    if (a[i][j] == '#') return false;\n    return true;\n}\n\nvector<int> dx = {0, 0, 1, -1};\nvector<int> dy = {1, -1, 0, 0};\n\nint d[2][N][N];\nint p[2][N][N];\n\nint ds[N][N];\n\nvoid solve() {\n    cin >> n >> m;\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            p[0][i][j] = p[1][i][j] = -1;\n            d[0][i][j] = d[1][i][j] = ds[i][j] = N * N;\n        }\n    }\n    deque<pair<int, int>> q;\n    int si = -1, sj = -1;\n    int sum = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (a[i][j] == 'V') {\n                si = i;\n                sj = j;\n            }\n            if (a[i][j] == '.') ++sum;\n        }\n    }\n    q.push_back({si, sj});\n    ds[si][sj] = 0;\n    while (!q.empty()) {\n        int x = q.front().first;\n        int y = q.front().second;\n        q.pop_front();\n        for (int i = 0; i < 4; ++i) {\n            int x1 = x + dx[i];\n            int y1 = y + dy[i];\n            if (check(x1, y1)) {\n                if (ds[x1][y1] > ds[x][y] + 1) {\n                    ds[x1][y1] = ds[x][y] + 1;\n                    q.push_back({x1, y1});\n                }\n            }\n        }\n    }\n\n    set<array<int, 4>> st;\n    vector<pair<int, int>> ex;\n    for (int i = 0; i < n; ++i) {\n        if (check(i, 0)) {\n            ex.push_back({i, 0});\n            d[0][i][0] = 0;\n            p[0][i][0] = i * m;\n            st.insert({d[0][i][0], i, 0, 0});\n        }\n        if (check(i, m - 1)) {\n            ex.push_back({i, m - 1});\n            d[0][i][m - 1] = 0;\n            p[0][i][m - 1] = i * m + m - 1;\n            st.insert({d[0][i][m - 1], i, m - 1, 0});\n        }\n    }\n    for (int i = 0; i < m; ++i) {\n        if (check(0, i)) {\n            ex.push_back({0, i});\n            d[0][0][i] = 0;\n            p[0][0][i] = i;\n            st.insert({d[0][0][i], 0, i, 0});\n        }\n        if (check(n - 1, i)) {\n            ex.push_back({n - 1, i});\n            d[0][n - 1][i] = 0;\n            p[0][n - 1][i] = (n - 1) * m + i;\n            st.insert({d[0][n - 1][i], n - 1, i, 0});\n        }\n    }\n    int cnt = 0;\n    int ans = sum;\n    for (auto elem : ex) {\n        if (ds[elem.first][elem.second] != N * N) {\n            ++cnt;\n            if (cnt == 1) {\n                ans -= ds[elem.first][elem.second];\n            }\n        }\n    }\n    if (cnt == 0) {\n        cout << sum << \"\\n\";\n        return;\n    }\n    if (cnt == 1) {\n        cout << ans << \"\\n\";\n        return;\n    }\n    while (!st.empty()) {\n        auto elem = *st.begin();\n        st.erase(st.begin());\n        int x = elem[1], y = elem[2];\n        int cur = elem[0];\n        int par = p[elem[3]][x][y];\n        for (int i = 0; i < 4; ++i) {\n            int x1 = x + dx[i];\n            int y1 = y + dy[i];\n            if (!check(x1, y1)) continue;\n            if (d[0][x1][y1] > cur + 1) {\n                if (p[0][x1][y1] != -1 && p[0][x1][y1] != par) {\n                    st.erase({d[1][x1][y1], x1, y1, 1});\n                    d[1][x1][y1] = d[0][x1][y1];\n                    p[1][x1][y1] = p[0][x1][y1];\n                    st.insert({d[1][x1][y1], x1, y1, 1});\n                }\n                st.erase({d[0][x1][y1], x1, y1, 0});\n                d[0][x1][y1] = cur + 1;\n                p[0][x1][y1] = par;\n                st.insert({d[0][x1][y1], x1, y1, 0});\n            } else if (d[1][x1][y1] > cur + 1 && par != p[0][x1][y1]) {\n                st.erase({d[1][x1][y1], x1, y1, 1});\n                d[1][x1][y1] = cur + 1;\n                p[1][x1][y1] = par;\n                st.insert({d[1][x1][y1], x1, y1, 1});\n            }\n        }\n    }\n    ans = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            ans = max(ans, sum - ds[i][j] - d[0][i][j] - d[1][i][j]);\n        }\n    }\n    cout << ans << \"\\n\";\n}\n\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    int uwu = 1;\n    cin >> uwu;\n    while (uwu--) {\n        solve();\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dfs and similar",
        "divide and conquer",
        "shortest paths"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Vova Escapes the Matrix.json",
    "editorial_link": "https://codeforces.com//blog/entry/120960",
    "editorial": "SolutionFor a matrix of type , Misha can block all empty cells (except\r\nthe one Vova stands on).For a matrix of type , Misha finds the shortest\r\npath to some exit with a single BFS and then blocks every other\r\ncell.Matrices of type are more complicated. We want to find two shortest\r\npaths to the two closest exits and block the remaining empty cells.But,\r\nnotice how the paths will likely share their beginnings. We do not have\r\nto count those cells twice. Letâs take a look at the junction where the\r\ntwo paths merge. If we first fix the junction, finding the shortest path\r\nto Vova can be done by running a single BFS and precalculating the\r\nshortest distances from each cell to Vova. Finding the shortest path\r\nfrom the junction to the two closest exits can also be done with BFS and\r\nprecalculation. We modify the BFS, making it multi-source, with a source\r\nin each exit. Also, we will allow each cell to be visited twice (but by\r\ndifferent exits). We will need to maintain the following data for each\r\ncell: How many times was it visited; The last exit/source that visited\r\nit; The sum of paths from all exits/sources that visited the cell so\r\nfar. Running the BFS with proper implementation produces the answer.\r\nWhen everything said is precalculated, we fix the junction in ways (each\r\nempty cell can be a valid junction), and then calculate the shortest\r\npath from Vova to the two closest cells in per junction.Total complexity\r\nis .\r\n",
    "hint": [
        "Hint To solve the problem for matrices of -rd type, find the shortest path to closest exits with a modification of BFS. Block all cells not belonging to the path with obstacles."
    ]
}