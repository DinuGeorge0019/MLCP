{"link": "https://codeforces.com//contest/296/problem/D", "problemId": "2832", "problem_idx": "D", "shortId": "296D", "contest_number": "296", "problem_submissions": {"E": [3509655, 3530011, 3513398], "D": [3508239, 3510564, 3509853, 3510303, 3509560, 3507344, 3510171, 3510710, 3508453, 3506372, 3508795, 3509129, 3512243, 3511315, 3511375, 3512574, 3511095, 3511937, 3509758, 3511827], "C": [3507268, 3506021, 3506686, 3506618, 3507187, 3504856, 3508052, 3508249, 3506872, 3508268, 3506789, 3507244, 3507018, 3509797, 3509920, 3507422, 3509852, 3509574, 3507123, 3509396], "B": [3505992, 3508492, 3509062, 3509375, 3508183, 3511340, 3506942, 3507117, 3511659, 3511560, 3513039, 3511100, 3509223, 3507976, 3507652, 3509638, 3509043, 3508068, 3512689, 3508226], "A": [3504411, 3504445, 3504488, 3506304, 3511525, 3505538, 3505436, 3504680, 3508725, 3504742, 3504378, 3504972, 3504639, 3513641, 3505229, 3505312, 3505160, 3505517, 3504768]}, "name": "D. Greg and Graph", "statement": "Greg has a weighed directed graph, consisting of vertices. In this graph\r\nany pair of distinct vertices has an edge between them in both\r\ndirections. Greg loves playing with the graph and now he has invented a\r\nnew game: The game consists of steps. On the -th step Greg removes\r\nvertex number from the graph. As Greg removes a vertex, he also removes\r\nall the edges that go in and out of this vertex. Before executing each\r\nstep, Greg wants to know the sum of lengths of the shortest paths\r\nbetween all pairs of the remaining vertices. The shortest path can go\r\nthrough any remaining vertex. In other words, if we assume that is the\r\nshortest path between vertices and in the graph that formed before\r\ndeleting vertex , then Greg wants to know the value of the following\r\nsum: . Help Greg, print the value of the required sum before each step.\r\n", "solutions": ["#include <iostream>\n#include <string>\n#include <cstring>\n#include <cstdio>\n#include <set>\n#include <map>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <complex>\n#include <bitset>\n#include <numeric>\n#pragma comment(linker, \"/STACK:256000000\")\n\nusing namespace std;\n\nconst int maxN = 510;\n\nlong long d[maxN][maxN];\nlong long order[maxN];\nint n;\n\nint main() {\n  //freopen(\"input.txt\", \"r\", stdin);\n  //freopen(\"output.txt\", \"w\", stdout);\n\n  ios_base::sync_with_stdio(false);\n  cin >> n;\n\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < n; ++j) {\n      cin >> d[i][j];\n    }\n  }\n\n  for (int i = 0; i < n; ++i) {\n    cin >> order[i];\n    --order[i];\n  }\n  reverse(order, order + n);\n\n  for (int i = 0; i < n; ++i) {\n    d[i][i] = 1000000000000000000LL;\n  }\n   \n  vector <long long> results;\n\n  for (int k = 0; k < n; ++k) {\n    for (int i = 0; i < n; ++i) {\n      for (int j = 0; j < n; ++j) {\n        d[i][j] = min(d[i][j], d[i][order[k]] + d[order[k]][j]);\n      }    \n    }\n    long long sum = 0;\n    for (int i = 0; i <= k; ++i) {\n      for (int j = 0; j <= k; ++j) {\n        if (order[i] != order[j]) {\n          sum += d[order[i]][order[j]];\n        }\n      }\n    }\n    results.push_back(sum);\n  }\n\n  reverse(results.begin(), results.end());\n  for (int i = 0; i < results.size(); ++i) {\n    cout << results[i] << \" \";\n  }\n  cout << endl;\n\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["dp", "graphs"], "dificulty": "1700", "interactive": false}