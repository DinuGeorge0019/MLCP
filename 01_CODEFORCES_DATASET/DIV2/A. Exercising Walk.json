{
    "link": "https://codeforces.com//contest/1332/problem/A",
    "problemId": "578661",
    "problem_idx": "A",
    "shortId": "1332A",
    "contest_number": "1332",
    "problem_submissions": {
        "G": [
            74991585,
            75037266,
            77351427
        ],
        "F": [
            74972207,
            74968358,
            74971720,
            74973348,
            74978859,
            74982724,
            74982735,
            74986275,
            74983269,
            74987837,
            74986665,
            74991793,
            74983515,
            74979782,
            74972196,
            74981046,
            74990576,
            74985479,
            74988801,
            74990228
        ],
        "E": [
            74961161,
            74955523,
            74954162,
            74962710,
            74964351,
            74963597,
            74954423,
            74965477,
            74965579,
            74964400,
            74967235,
            74963711,
            74965887,
            74966494,
            74989155,
            74967207,
            74974070,
            74976881,
            74974061,
            74976693
        ],
        "D": [
            74952985,
            74945715,
            74946665,
            74947888,
            74950207,
            74948751,
            74939741,
            74946829,
            74947089,
            74946824,
            74948968,
            74945728,
            74948946,
            74959413,
            74956458,
            74959082,
            74952408,
            74962224,
            74953788,
            74952090
        ],
        "C": [
            74942005,
            74937624,
            74936343,
            74941037,
            74943187,
            74945247,
            74948388,
            74939023,
            74936776,
            74940250,
            74942517,
            74933392,
            74937059,
            74947682,
            74933984,
            74947387,
            74935824,
            74944324,
            74945827,
            74930594
        ],
        "B": [
            74937320,
            74934172,
            74933187,
            74935530,
            74936050,
            74936599,
            74943429,
            74933909,
            74931708,
            74932124,
            74935133,
            74939689,
            74933624,
            74939412,
            74938935,
            74936225,
            74945372,
            74938477,
            74936882,
            74941959
        ],
        "A": [
            74930167,
            74929341,
            74931394,
            74930114,
            74930077,
            74932449,
            74934529,
            74928977,
            74928761,
            74928547,
            74928820,
            74928500,
            74928970,
            74929648,
            74959446,
            74929583,
            74931416,
            74933421,
            74928735,
            74938510
        ]
    },
    "name": "A. Exercising Walk",
    "statement": "Alice has a cute cat. To keep her cat fit, Alice wants to design an\r\nexercising walk for her cat! Initially, Alice\u2019s cat is located in a cell\r\n(x,y) of an infinite grid. According to Alice\u2019s theory, cat needs to\r\nmove: exactly a steps left: from (u,v) to (u-1,v); exactly b steps\r\nright: from (u,v) to (u+1,v); exactly c steps down: from (u,v) to\r\n(u,v-1); exactly d steps up: from (u,v) to (u,v+1). Note that the moves\r\ncan be performed in an . For example, if the cat has to move 1 step\r\nleft, 3 steps right and 2 steps down, then the walk right, down, left,\r\nright, right, down is valid.Alice, however, is worrying that her cat\r\nmight get lost if it moves far away from her. So she hopes that her cat\r\nis in the area [x_1,x_2]\r\ntimes [y_1,y_2], i.e. for every cat\u2019s position (u,v) of a walk x_1\r\nle u\r\nle x_2 and y_1\r\nle v\r\nle y_2 holds.Also, note that the cat can visit the same cell multiple\r\ntimes.Can you help Alice find out if there exists a walk satisfying her\r\nwishes?Formally, the walk should contain exactly a+b+c+d unit moves (a\r\nto the left, b to the right, c to the down, d to the up). Alice can do\r\nthe moves in order. Her current position (u, v) should satisfy the\r\nconstraints: x_1\r\nle u\r\nle x_2, y_1\r\nle v\r\nle y_2. The staring point is (x, y).You are required to answer t test\r\ncases .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\ntemplate <class T>\ninline void read(T &res)\n{\n\tres = 0; bool bo = 0; char c;\n\twhile (((c = getchar()) < '0' || c > '9') && c != '-');\n\tif (c == '-') bo = 1; else res = c - 48;\n\twhile ((c = getchar()) >= '0' && c <= '9')\n\t\tres = (res << 3) + (res << 1) + (c - 48);\n\tif (bo) res = ~res + 1;\n}\n\nint main()\n{\n\tint T; read(T);\n\twhile (T--)\n\t{\n\t\tint a, b, c, d, X, Y, xl, yl, xr, yr;\n\t\tread(a); read(b); read(c); read(d); read(X); read(Y); read(xl); read(yl);\n\t\tread(xr); read(yr);\n\t\tif (xl == xr && (a || b)) {puts(\"no\"); continue;}\n\t\tif (yl == yr && (c || d)) {puts(\"no\"); continue;}\n\t\tX += b - a; Y += d - c;\n\t\tputs(xl <= X && X <= xr && yl <= Y && Y <= yr ? \"yes\" : \"no\");\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Exercising Walk.json",
    "editorial_link": "https://codeforces.com//blog/entry/75432",
    "editorial": "The key observation is x-axis and y-axis is independent in this task as\r\nthe area is a rectangle. Therefore, we should only consider 1D case\r\n(x-axis, for example). The optimal path to choose alternates between\r\nright and left moves until only one type of move is possible. And\r\nsometimes there is no place to make even one move, which has to handled\r\nseparately. So the verdict is \"\" if and only if and ( or ).\r\n"
}