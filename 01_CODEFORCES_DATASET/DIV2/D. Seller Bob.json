{
    "link": "https://codeforces.com//contest/18/problem/D",
    "problemId": "85",
    "problem_idx": "D",
    "shortId": "18D",
    "contest_number": "18",
    "problem_submissions": {
        "E": [
            81065,
            81306,
            80765,
            81264,
            81531,
            81749,
            81052,
            81910,
            82769,
            83595,
            82917,
            82903,
            83429,
            82503,
            82497,
            82370,
            470419
        ],
        "D": [
            80763,
            80489,
            81776,
            80347,
            81284,
            81376,
            81320,
            81622,
            81610
        ],
        "B": [
            80357,
            80881,
            79919,
            80575,
            80236,
            80254,
            80116,
            80063,
            80223,
            83594,
            80352,
            80834,
            80541,
            80588,
            81110,
            80898,
            82232,
            81439
        ],
        "C": [
            79922,
            80066,
            79784,
            80695,
            79953,
            79859,
            80277,
            80229,
            79880,
            79798,
            79989,
            80024,
            79954,
            80323,
            79676,
            79918
        ],
        "A": [
            79794,
            79576,
            79652,
            79640,
            79646,
            79718,
            79820,
            79725,
            79739,
            79651,
            79729,
            79883,
            79745,
            80732,
            80006,
            79782
        ]
    },
    "name": "D. Seller Bob",
    "statement": "Last year Bob earned by selling memory sticks. During each of days of\r\nhis work one of the two following events took place: A customer came to\r\nBob and asked to sell him a MB memory stick. If Bob had such a stick, he\r\nsold it and got berllars. Bob won some programming competition and got a\r\nMB memory stick as a prize. Bob could choose whether to present this\r\nmemory stick to one of his friends, or keep it. Bob never kept more than\r\none memory stick, as he feared to mix up their capacities, and deceive a\r\ncustomer unintentionally. It is also known that for each memory stick\r\ncapacity there was at most one customer, who wanted to buy that memory\r\nstick. Now, knowing all the customersâ€™ demands and all the prizes won at\r\nprogramming competitions during the last days, Bob wants to know, how\r\nmuch money he could have earned, if he had acted optimally.\r\n",
    "solutions": [
        "#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <functional>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <ctime>\n#include <cassert>\n#include <queue>\n#include <stack>\n#include <cstdarg>\n\nusing namespace std;\n\n#define TASKNAME \"i\"\n#define pb push_back\n#define mp make_pair\n#define first fi\n#define second se\n#define forn(i, n) for (int i=0; i<(int)n; i++)\n#define all(a) a.begin(), a.end()\n\ntypedef long double ldb;\ntypedef long long lld;\ntypedef unsigned long long uld;\ntypedef vector<int> vi;\ntypedef complex<double> cd;\n\ndouble const eps=1e-9;\nldb const epsl=1e-9;\nint const inf=0x3fffffff;\nint const infu=0x7fffffff;\nlld const infl=0x3fffffffffffffffLL;\nuld const inful=0x7fffffffffffffffLL;\ntemplate <class T>\ninline T sqr(const T &a) {\n    return a*a;\n}\nint const SZ=100;\nint const LBS=8, BS=(int)pow(10., LBS);\ninline void numcpy(int *b, int *a) {\n    if (b!=a) memmove(b, a, (a[0]+1)*sizeof(a[0]));\n}\n\n\nint rs[SZ], cr[SZ];\ninline void put(int *a, FILE *f=stdout) {\n    int const N=1<<10;\n    char b[N*LBS];\n    fprintf(f, \"%d\", a[a[0]]);\n    for (int i=a[0]-1; i>0; i-=N) {\n        for (int k=0; k<N && k<i; k++)\n            for (int j=LBS-1, x=a[i-k]; j>=0; --j, x/=10)\n                b[k*LBS+j]=char(x%10)+'0';\n        fwrite(b, LBS, min(N, i), f);\n    }\n}\ninline void sum(int *c, int *a, int *b) {\n    if (a[0]<b[0]) \n        swap(a, b);\n    if (!b[0]) {\n        if (c!=a) \n            numcpy(c, a);\n        return;\n    }\n    c[1]=a[1]+b[1];\n    for (int i=2; i<=b[0]; i++) {\n        c[i]=a[i]+b[i];\n        if (c[i-1]>=BS)\n            c[i-1]-=BS, c[i]++;\n    }\n    if (a==c)\n        for (int i=b[0]; i<c[0] && c[i]>=BS; i++)\n            c[i]-=BS, ++c[i+1];\n    else {\n        for (int i=b[0]+1; i<=a[0]; i++) {\n            c[i]=a[i];\n            if (c[i-1]>=BS)\n                c[i-1]-=BS, c[i]++;\n        }\n        c[0]=a[0];\n    }\n    if (c[c[0]]>=BS)\n        c[c[0]]-=BS, c[++c[0]]=1;\n}\n\ninline void mul(int *c, int *a, int b) {\n    if (!b) {\n        c[0]=0; return;\n    }\n    long long d, x=0;\n    for (int i=1; i<=a[0]; i++) {\n        d=(long long)a[i]*b+x;\n        x=d/BS, c[i]=int(d-x*BS);\n    }\n    x ? c[c[0]=a[0]+1]=(int)x : c[0]=a[0];\n}\n\n\nint const N=2005;\nint x[N], y[N], w[N];\n\nbool isec(int x1, int y1, int x2, int y2) {\n    return !(y1<x2 || y2<x1);\n}\n\n\nint main () {\n//  freopen (TASKNAME\".in\", \"r\", stdin);\n//  freopen (TASKNAME\".out\", \"w\", stdout);\n    int n;\n    cin >> n;\n    for (int i=1; i<=n; i++) {\n        string s;\n        int p;\n        cin >> s >> p;\n        if (s==\"win\") {\n            if (!y[p]) x[p]=i;\n        } else y[p]=i;\n    }\n    for (int i=2000; i>=0; i--) {\n        w[i]=0;\n        if (x[i] && y[i]) {\n            bool f=1;\n            for (int j=i+1; j<=2000; j++)\n                if (w[j] && isec(x[i], y[i], x[j], y[j]))\n                    f=0;\n            if (f) w[i]=1;\n        }\n    }\n    rs[0]=0;\n    cr[0]=cr[1]=1;\n    for (int i=0; i<=2000; i++) {\n        if (w[i]) sum(rs, rs, cr);\n        mul(cr, cr, 2);\n    }\n    put(rs);\n\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "greedy"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Seller Bob.json",
    "editorial_link": "https://codeforces.com//blog/entry/463",
    "editorial": "In this problem we need big integers because the number 22000 doesn't fit in int64.\nWe are given an assertion that for every memory stick there will be at most one potential customer. Since 2x > 2x-1 + 2x-2 + ... 20, the earnings of selling the most expensive stick will be greater than the earnings of selling all other sticks. So we first try to sell the most expensive stick, then the second one and so on. So one should try to sell sticks in descending order of their costs.",
    "hint": []
}