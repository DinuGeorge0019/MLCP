{
    "link": "https://codeforces.com//contest/1581/problem/A",
    "problemId": "1125258",
    "problem_idx": "A",
    "shortId": "1581A",
    "contest_number": "1581",
    "problem_submissions": {
        "E": [
            130358132,
            130358184,
            130357795,
            130357396,
            130363906,
            130366616,
            130380883,
            130364377,
            130368000,
            130362620,
            130366569,
            130368794,
            130369661,
            130369712,
            130368935,
            130369593
        ],
        "C": [
            130344859,
            130342831,
            130347382,
            130345373,
            130344614,
            130353134,
            130351174,
            130350702,
            130351743,
            130352941,
            130352739,
            130356445,
            130357169,
            130351772,
            130355715,
            130362975,
            130356919,
            130369384,
            130361864
        ],
        "B": [
            130340369,
            130340723,
            130340571,
            130339802,
            130369559,
            130359629,
            130340447,
            130931058,
            130343832,
            130341175,
            130342532,
            130359618,
            130341192,
            130359579,
            130352120,
            130344927,
            130346716,
            130361490
        ],
        "A": [
            130338529,
            130338446,
            130338430,
            130342422,
            130338506,
            130341004,
            130338410,
            130340505,
            130339368,
            130338352,
            130339712,
            130339153,
            130338540,
            130338470,
            130338894,
            130339891,
            130340851,
            130340222,
            130339139
        ],
        "D": [
            130369924,
            130441595,
            130369549,
            130356147
        ],
        "F": [
            130356873,
            130360044,
            130368525,
            130369827,
            130370044
        ]
    },
    "name": "A. CQXYM Count Permutations",
    "statement": "CQXYM is counting permutations length of 2n.A permutation is an array\r\nconsisting of n distinct integers from 1 to n in arbitrary order. For\r\nexample, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation\r\n(2 appears twice in the array) and [1,3,4] is also not a permutation\r\n(n=3 but there is 4 in the array).A permutation p(length of 2n) will be\r\ncounted only if the number of i satisfying p_i<p_{i+1} is no less than\r\nn. For example: Permutation [1, 2, 3, 4] will count, because the number\r\nof such i that p_i<p_{i+1} equals 3 (i = 1, i = 2, i = 3). Permutation\r\n[3, 2, 1, 4] wonâ€™t count, because the number of such i that p_i<p_{i+1}\r\nequals 1 (i = 3). CQXYM wants you to help him to count the number of\r\nsuch permutations modulo 1000000007 (10^9+7).In addition, modulo\r\noperation is to get the remainder. For example: 7\r\nmod 3=1, because 7 = 3\r\ncdot 2 + 1, 15\r\nmod 4=3, because 15 = 4\r\ncdot 3 + 3.\r\n",
    "solutions": [
        "#pragma GCC optimize(2)\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<map>\n#include<queue>\n#include<vector>\n#include<algorithm>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\n#define ll long long\n#define ls(_o) (_o<<1)\n#define rs(_o) ((_o<<1)|1)\n#define N 3100\n#define p 1000000007\n#define p1 998244353\n#define p2 1000000007\nusing namespace std;\nnamespace ywy{\n\tinline int get(){\n\t\tint n=0;char c;while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}n=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\t\n\t\t}s:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\t\n\t\t}\n\t}\n\tvoid ywymain(){\n\t\tint T=get(); while(T--){\n\t\t\tint n=get(); ll ans=1;\n\t\t\tfor(int i=3;i<=n*2;i++) ans=ans*i%p;\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t}\n}\nint main(){\n\tywy::ywymain();\t\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math",
        "number theory"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. CQXYM Count Permutations.json",
    "editorial_link": "https://codeforces.com//blog/entry/95477",
    "editorial": "Assume a permutation\n, and . Assume a permutaion , satisfying . We can know that . Thus,, and\neither should be counted or should be counted. All in all, the half of\nall the permutaions would be counted in the answer. Thus, the answer is\n. The time complexity is . If you precalulate the factors, then the\ncomplexity will be . solution\n",
    "hint": []
}