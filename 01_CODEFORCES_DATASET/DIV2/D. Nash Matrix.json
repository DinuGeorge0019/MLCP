{
    "link": "https://codeforces.com//contest/1316/problem/D",
    "problemId": "552823",
    "problem_idx": "D",
    "shortId": "1316D",
    "contest_number": "1316",
    "problem_submissions": {
        "F": [
            72472310,
            72461023,
            73149710,
            76233934,
            76759743,
            72468426
        ],
        "D": [
            72446577,
            72435880,
            72446350,
            72433935,
            72552354,
            72445851,
            72441671,
            72440731,
            72441946,
            72448620,
            72449884,
            72443275,
            72430235,
            72442450,
            72455002,
            72438222,
            72450604,
            72450271,
            72453451,
            72444636,
            72446410
        ],
        "E": [
            72439852,
            72445012,
            72437670,
            72448064,
            72552368,
            72441953,
            72444842,
            72445763,
            72447311,
            72441940,
            72445222,
            72448678,
            72435875,
            72451508,
            72441755,
            72436908,
            72445710,
            72444493,
            72446787,
            72453158,
            72452797
        ],
        "C": [
            72433832,
            72430966,
            72433288,
            72428640,
            72552344,
            72432747,
            72431625,
            72434362,
            72434375,
            72433220,
            72429941,
            72438552,
            72442079,
            72433103,
            72430036,
            72452619,
            72434221,
            72436747,
            72434315,
            72436157,
            72435969
        ],
        "B": [
            72429931,
            72429194,
            72429286,
            72432383,
            72552325,
            72429081,
            72434265,
            72430795,
            72431025,
            72431357,
            72428379,
            72429255,
            72460222,
            72429093,
            72433129,
            72438863,
            72431653,
            72431631,
            72430316,
            72431406,
            72429986
        ],
        "A": [
            72421838,
            72421944,
            72423224,
            72422468,
            72552315,
            72422813,
            72422138,
            72421848,
            72423996,
            72421816,
            72422254,
            72422463,
            72428261,
            72422024,
            72422458,
            72422846,
            72422294,
            72426353,
            72423021,
            72422856,
            72423629
        ]
    },
    "name": "D. Nash Matrix",
    "statement": "Nash designed an interesting yet simple board game where a player is\r\nsimply required to follow instructions written on the cell where the\r\nplayer currently stands. This board game is played on the n\r\ntimes n board. Rows and columns of this board are numbered from 1 to n.\r\nThe cell on the intersection of the r-th row and c-th column is denoted\r\nby (r, c).Some cells on the board are called . On each cell of the\r\nboard, there is written one of the following 5 characters U, D, L, R or\r\nX instructions for the player. Suppose that the current cell is (r, c).\r\nIf the character is R, the player should move to the right cell (r,\r\nc+1), for L the player should move to the left cell (r, c-1), for U the\r\nplayer should move to the top cell (r-1, c), for D the player should\r\nmove to the bottom cell (r+1, c). Finally, if the character in the cell\r\nis X, then this cell is the . The player should remain in this cell (the\r\ngame for him isn’t very interesting from now on).It is guaranteed that\r\nthe characters are written in a way that the player will never have to\r\nstep outside of the board, no matter at which cell he starts.As a player\r\nstarts from a cell, he moves according to the character in the current\r\ncell. The player keeps moving until he lands in a blocked zone. It is\r\nalso possible that the player will keep moving infinitely long.For every\r\nof the n^2 cells of the board Alice, your friend, wants to know, how\r\nwill the game go, if the player starts in this cell. For each starting\r\ncell of the board, she writes down the cell that the player stops at, or\r\nthat the player never stops at all. She gives you the information she\r\nhas written: for each cell (r, c) she wrote: a pair (x,y), meaning if a\r\nplayer had started at (r, c), he would end up at cell (x,y). or a pair\r\n(-1,-1), meaning if a player had started at (r, c), he would keep moving\r\ninfinitely long and would never enter the blocked zone. It might be\r\npossible that Alice is trying to fool you and there’s no possible grid\r\nthat satisfies all the constraints Alice gave you. For the given\r\ninformation Alice provided you, you are required to decipher a possible\r\nboard, or to determine that such a board doesn’t exist. If there exist\r\nseveral different boards that satisfy the provided information, you can\r\nfind any of them.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint d[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\npair<int, int> a[1005][1005];\nchar mp[1005][1005];\npair<int, int> stk[2000005];\nbool mark[1005][1005];\nint n, top;\nchar getch(int x) {\n\tif (x == 0) return 'L';\n\tif (x == 1) return 'R';\n\tif (x == 2) return 'U';\n\treturn 'D';\n}\n\nvoid dfs(int x, int y) {\n\tmark[x][y] = true;\n\tfor (int i = 0; i < 4; ++ i) {\n\t\tint nx = x + d[i][0];\n\t\tint ny = y + d[i][1];\n\t\tif (nx < 1 || nx > n || ny < 1 || ny > n) continue;\n\t\tif (a[x][y] != a[nx][ny]) continue;\n\t\tif (mark[nx][ny]) continue;\n\t\tmp[nx][ny] = getch(i);\n\t\tdfs(nx, ny);\n\t}\n}\n\nint main( ) {\n\tbool ok = false;\n\tint x, y;\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i ++)\n\t\tfor (int j = 1; j <= n; j ++) {\n\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\tif (make_pair(x, y) == make_pair(i, j)) {\n\t\t\t\tstk[++ top] = make_pair(i, j);\n\t\t\t}\n\t\t\ta[i][j] = make_pair(x, y);\n\t\t}\n\tfor (int i = 1; i <= top; i ++) {\n\t\tdfs(stk[i].first, stk[i].second);\n\t\tmp[stk[i].first][stk[i].second] = 'X';\n\t}\n\tfor (int i = 1; i <= n; i ++)\n\t\tfor (int j = 1; j <= n; j ++) {\n\t\t\tif (a[i][j] != make_pair(-1, -1)) continue;\n\t\t\tint idx = -1, idy = -1;\n\t\t\tif (a[i + 1][j] == make_pair(-1, -1)) {\n\t\t\t\tidx = i + 1;\n\t\t\t\tidy = j;\n\t\t\t\tmp[i][j] = 'D';\n\t\t\t\tmp[i + 1][j] = 'U';\n\t\t\t}\n\t\t\tif (a[i - 1][j] == make_pair(-1, -1)) {\n\t\t\t\tidx = i - 1;\n\t\t\t\tidy = j;\n\t\t\t\tmp[i][j] = 'U';\n\t\t\t\tmp[i - 1][j] = 'D';\n\t\t\t}\n\t\t\tif (a[i][j - 1] == make_pair(-1, -1)) {\n\t\t\t\tidx = i;\n\t\t\t\tidy = j - 1;\n\t\t\t\tmp[i][j] = 'L';\n\t\t\t\tmp[i][j - 1] = 'R';\n\t\t\t}\n\t\t\tif (a[i][j + 1] == make_pair(-1, -1)) {\n\t\t\t\tidx = i;\n\t\t\t\tidy = j + 1;\n\t\t\t\tmp[i][j] = 'R';\n\t\t\t\tmp[i][j + 1] = 'L';\n\t\t\t}\n\t\t\tif (idx == -1 && idy == -1) continue;\n\t\t\tdfs(i, j);\n\t\t\tdfs(idx, idy);\n\t\t}\n\tfor (int i = 1; i <= n; i ++)\n\t\tfor (int j = 1; j <= n; j ++)\n\t\t\tif (!mark[i][j]) ok = true;\n\tif (ok) printf(\"INVALID\\n\");\n\telse {\n\t\tprintf(\"VALID\\n\");\n\t\tfor (int i = 1; i <= n; puts(\"\"), i ++)\n\t\t\tfor (int j = 1; j <= n; j ++)\n\t\t\t\tprintf(\"%c\", mp[i][j]);\n\t}\t\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "implementation"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Nash Matrix.json",
    "editorial_link": "https://codeforces.com//blog/entry/74493",
    "editorial": "If there exists a valid board satisfying the input matrix, one can\r\nnotice two types of clusters in the input matrix, first, a cluster of\r\nconnected cells having the same stopping point and second, a cluster of\r\nconnected cells which do not have any stopping point, i.e., all having\r\npair . Among the cells, having a stopping point, we can start a dfs/bfs\r\nfrom all the cells having stopping point as the cell itself , i.e.,\r\ncells has stopping cell as . While performing the traversal, we move\r\ninto any neighbouring cell from current cell if it has the same stopping\r\ncell as the current cell. This way, all the cells in clusters of first\r\nkind will have an instruction associated , , , or .For the cells having\r\nno stopping cell, we need to put instructions on them such that starting\r\non them, a player keeps moving in a cycle. So these cells are either a\r\npart of cycle, or have paths starting from them leading into a cycle.\r\nThe simplest way to do so is to try to put such cells into disjoint\r\npairs (cycles of length 2 of neighbouring cells), each cell in pair\r\npointing towards the other. Note that after trying to pair up these\r\ncells having no stopping point, there are no more two adjacent such\r\ncells both unpaired. Now for any such cell which could not be paired up,\r\nif it has no adjacent paired up cell, then it is a case of INVALID ,\r\nelse , just put a direction on the cell so that player moves into the\r\nadjacent paired up cell.Now if any cell remains without having any\r\ninstruction alloted, it is a case of INVALID.The complexity of the above\r\nsolution : .\r\n",
    "hint": []
}