{"link": "https://codeforces.com//contest/1041/problem/C", "problemId": "220441", "problem_idx": "C", "shortId": "1041C", "contest_number": "1041", "problem_submissions": {"F": [42937145, 42936460, 42941789, 42939791, 42936055, 42943259, 42941945, 42942600, 42940476, 42943214, 42942904, 42941561, 42940422, 42942676, 42967085, 42945698, 42942819, 42940517, 42945082], "E": [42931045, 42932542, 42929311, 42932587, 42939274, 42934189, 42934028, 42935828, 42936456, 42936222, 42934576, 42934053, 42934830, 42936131, 42933423, 42935645, 42936145, 42934904], "D": [42928058, 42928419, 42932086, 42926606, 42928328, 42929346, 42929592, 42930860, 42930895, 42928722, 42931546, 42929735, 42930750, 42931175, 42929657, 42930694, 42932165, 42929565], "C": [42924598, 42925979, 42923335, 42923874, 42924882, 42924328, 42925322, 42926206, 42927308, 42925269, 42926071, 42925958, 42929148, 42926562, 42925843, 42927423, 42929003, 42925656], "B": [42919830, 42920297, 42919741, 42920667, 42921333, 42921057, 42919493, 42920331, 42920664, 42920599, 42920862, 42919750, 42921237, 42921905, 42921366, 42922548, 42922190, 42921585], "A": [42918068, 42918894, 42917952, 42918346, 42918563, 42921193, 42918207, 42918103, 42917969, 42918179, 42919024, 42917972, 42919232, 42918320, 42918302, 42919340, 42918232, 42918340]}, "name": "C. Coffee Break", "statement": "Recently Monocarp got a job. His working day lasts exactly m minutes.\r\nDuring work, Monocarp wants to drink coffee at certain moments: there\r\nare n minutes a_1, a_2,\r\ndots, a_n, when he is able and willing to take a coffee break (for the\r\nsake of simplicity let\u2019s consider that each coffee break lasts exactly\r\none minute). However, Monocarp\u2019s boss doesn\u2019t like when Monocarp takes\r\nhis coffee breaks too often. So for the given coffee break that is going\r\nto be on minute a_i, Monocarp must choose the day in which he will drink\r\ncoffee during the said minute, so that every day at least d minutes pass\r\nbetween any two coffee breaks. Monocarp also wants to take these n\r\ncoffee breaks in a minimum possible number of days (he doesn\u2019t count\r\ndays when he is not at work, and he doesn\u2019t take coffee breaks on such\r\ndays). Take into account that more than d minutes pass between the end\r\nof any working day and the start of the following working day.For each\r\nof the n given minutes determine the day, during which Monocarp should\r\ntake a coffee break in this minute. You have to minimize the number of\r\ndays spent.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\nint a[200009];\nint D[200009];\nint ans[200009];\nmain(){\n    int n, m, d;\n    cin >> n >> m >> d;\n    vector<pair<int,int> > v;\n    set<int> s;\n    for(int i = 1; i <= n; i++)\n        s.insert(i);\n    for(int i = 0; i < n; i++){\n        cin >> a[i];\n        v.push_back({a[i], i});\n    }\n    sort(v.begin(), v.end());\n    for(int i = 0; i < n; i++){\n        a[i] = v[i].first;\n    }\n    int j = 0;\n    int md = 1;\n    for(int i = 0; i < n; i++){\n        while(a[i] - a[j] - 1 >= d){\n            s.insert(D[j]);\n            j ++;\n        }\n        D[i] = *s.begin();\n        md = max(md, D[i]);\n        ans[v[i].second] = D[i];\n        s.erase(s.begin());\n    }cout<<md<<endl;\n    for(int i = 0; i < n; i++){\n        cout <<ans[i]<<\" \";\n\n    }\n    cout<<endl;\n\n}\n"], "input": "", "output": "", "tags": ["binary search", "data structures", "greedy", "two pointers"], "dificulty": "1600", "interactive": false}