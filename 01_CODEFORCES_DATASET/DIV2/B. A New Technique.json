{
    "link": "https://codeforces.com//contest/1435/problem/B",
    "problemId": "773404",
    "problem_idx": "B",
    "shortId": "1435B",
    "contest_number": "1435",
    "problem_submissions": {
        "E": [
            96673338,
            96681148,
            96682797,
            96685288,
            96847098,
            96685903,
            96675878,
            96687224,
            96687243,
            96686976,
            96689725,
            96692435,
            96691487,
            96692658,
            96691299,
            96690805,
            96693692,
            96679915,
            96692643,
            96687850
        ],
        "D": [
            96666232,
            96664904,
            96669284,
            96672253,
            96669314,
            96662222,
            96670668,
            96669409,
            96677310,
            96678148,
            96672549,
            96673104,
            96674256,
            96678523,
            96677726,
            96675716,
            96674961,
            96679765,
            96674688
        ],
        "C": [
            96659129,
            96657575,
            96664731,
            96660163,
            96661902,
            96686570,
            96658550,
            96663667,
            96669546,
            96664295,
            96666298,
            96669749,
            96666819,
            96667412,
            96671053,
            96669495,
            96685954,
            96666507,
            96668496,
            96674329
        ],
        "B": [
            96653882,
            96659883,
            96653749,
            96652475,
            96653199,
            96659428,
            96653053,
            96655781,
            96654431,
            96655376,
            96655587,
            96653268,
            96655657,
            96658338,
            96657193,
            96656576,
            96657563,
            96655601,
            96656271
        ],
        "A": [
            96648730,
            96649969,
            96649216,
            96648637,
            96648957,
            96653721,
            96648796,
            96663309,
            96649948,
            96651571,
            96648683,
            96648672,
            96658175,
            96649723,
            96648927,
            96651329,
            96649879,
            96649976,
            96675513
        ]
    },
    "name": "B. A New Technique",
    "statement": "All techniques in the ninja world consist of hand seals. At the moment\r\nNaruto is learning a new technique, which consists of n\r\ncdot m different seals, denoted by distinct numbers. All of them were\r\nwritten in an n\r\ntimes m table.The table is lost now. Naruto managed to remember elements\r\nof each row from left to right, and elements of each column from top to\r\nbottom, but he doesnâ€™t remember the order of rows and columns. Please\r\nrestore the table consistent with this data so that Naruto will be able\r\nto learn the new technique.\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <iomanip>\n#include <cassert>\n#include <cstring>\n#include <sstream>\n#include <numeric>\n#include <cstdio>\n#include <bitset>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\n\n#define pb push_back\n#define F first\n#define S second\n#define _sz(x) ((int)x.size())\n\nconst int N = 500 + 10;\nint T;\n\nint n, m, a[N][N], b[N][N], to[N * N];\nbool mark[N * N];\n\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n\n    cin >> T;\n\n    while (T--) {\n        cin >> n >> m;\n\n        for (int i = 0; i <= n * m; i++)\n            mark[i] = to[i] = 0;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++)\n                cin >> a[i][j];\n\n            mark[a[i][0]] = 1;\n            to[a[i][0]] = i;\n        }\n\n        for (int i = 0; i < m; i++)\n            for (int j = 0; j < n; j++)\n                cin >> b[i][j];\n\n        for (int k = 0; k < m; k++)\n            if (mark[b[k][0]]){\n                for (int ii = 0; ii < n; ii++) {\n                    int i = to[b[k][ii]];\n\n                    for (int j = 0; j < m; j++) cout << a[i][j] << ' ';\n                    cout << '\\n';\n                }\n\n                break;\n            }\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. A New Technique.json",
    "editorial_link": "https://codeforces.com//blog/entry/84056",
    "editorial": "To solve this problem it's sufficient to find the position of each row in the table. If we consider the first number of each row and find a column containing it, we will automatically obtain the position of the row. Since all numbers are distinct, the positions will be determined uniquely.\n",
    "hint": []
}