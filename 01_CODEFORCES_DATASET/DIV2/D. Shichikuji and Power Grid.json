{
    "link": "https://codeforces.com//contest/1245/problem/D",
    "problemId": "456077",
    "problem_idx": "D",
    "shortId": "1245D",
    "contest_number": "1245",
    "problem_submissions": {
        "F": [
            64010477,
            64009886,
            64014319,
            64150819,
            64002324,
            64004647,
            64015739,
            64002490,
            64015888,
            64014383,
            64013493,
            64015031,
            64011720,
            64026953,
            64021476,
            64018260,
            64031462,
            64031970,
            64021775,
            64023172
        ],
        "E": [
            64006910,
            64015295,
            64016337,
            64021964,
            64020329,
            64023633,
            64021101,
            64021058,
            64022796,
            64020913,
            64022965,
            64022978,
            64020972,
            64029225,
            64026181,
            64018441,
            64017598,
            64027038,
            64029618
        ],
        "D": [
            64002898,
            64003958,
            64002526,
            64016634,
            64013877,
            64004966,
            64016399,
            64011069,
            64010801,
            64007938,
            64006781,
            64015310,
            64008535,
            64005186,
            64010692,
            64009342,
            64009799,
            64014521,
            64014195
        ],
        "C": [
            63999164,
            64000498,
            64005851,
            64003393,
            64010042,
            64000573,
            64010656,
            64003837,
            64005015,
            63999349,
            64002111,
            63996519,
            64003084,
            64000048,
            64002428,
            64002402,
            63999517,
            64005913,
            64002319
        ],
        "B": [
            63997617,
            63998088,
            64001465,
            63998805,
            64003870,
            63998306,
            64008480,
            64001186,
            63999749,
            64027106,
            64016776,
            64027202,
            64000627,
            64000016,
            64005778,
            63999988,
            64002993,
            63999540,
            63999182
        ],
        "A": [
            63995951,
            63995957,
            63997656,
            63996018,
            63998793,
            63996004,
            64003787,
            63998279,
            63996658,
            64024063,
            63995955,
            63998248,
            63997191,
            63996609,
            63995990,
            63996228,
            63999456,
            63996540,
            63996316
        ]
    },
    "name": "D. Shichikuji and Power Grid",
    "statement": "Shichikuji is the new resident deity of the South Black Snail Temple.\r\nHer first job is as follows:There are n new cities located in Prefecture\r\nX. Cities are numbered from 1 to n. City i is located x_i km North of\r\nthe shrine and y_i km East of the shrine. It is possible that (x_i, y_i)\r\n= (x_j, y_j) even when i\r\nne j.Shichikuji must provide electricity to each city either by building\r\na power station in that city, or by making a connection between that\r\ncity and another one that already has electricity. So the City has\r\nelectricity if it has a power station in it or it is connected to a City\r\nwhich has electricity by a direct connection or via a chain of\r\nconnections. Building a power station in City i will cost c_i yen;\r\nMaking a connection between City i and City j will cost k_i + k_j yen\r\nused for the connection. However, wires can only go the cardinal\r\ndirections (North, South, East, West). Wires can cross each other. Each\r\nwire must have both of its endpoints in some cities. If City i and City\r\nj are connected by a wire, the wire will go through any shortest path\r\nfrom City i to City j. Thus, the length of the wire if City i and City j\r\nare connected is |x_i - x_j| + |y_i - y_j| km. Shichikuji wants to do\r\nthis job spending as little money as possible, since according to her,\r\nthere isn\u2019t really anything else in the world other than money. However,\r\nshe died when she was only in fifth grade so she is not smart enough for\r\nthis. And thus, the new resident deity asks for your help.And so, you\r\nhave to provide Shichikuji with the following information: minimum\r\namount of yen needed to provide electricity to all cities, the cities in\r\nwhich power stations will be built, and the connections to be made.If\r\nthere are multiple ways to choose the cities and the connections to\r\nobtain the construction of minimum price, then print any of them.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nvector<tuple<long long, int, int> > V;\nint N;\nint x[2020], y[2020], c[2020], k[2020];\nint ufd[2020];\nvoid init()\n{\n    for(int i=0; i<2020; ++i) ufd[i] = i;\n}\nint Find(int a)\n{\n    if(a==ufd[a]) return a;\n    return ufd[a] = Find(ufd[a]);\n}\nvoid Union(int a, int b)\n{\n    ufd[Find(a)] = Find(b);\n}\nint main()\n{\n    scanf(\"%d\", &N);\n    for(int i=1; i<=N; ++i) scanf(\"%d%d\", x+i, y+i);\n    for(int i=1; i<=N; ++i) scanf(\"%d\", c+i);\n    for(int i=1; i<=N; ++i) scanf(\"%d\", k+i);\n\n    for(int i=1; i<=N; ++i) V.emplace_back(c[i], 0, i);\n    for(int i=1; i<=N; ++i)\n        for(int j=1; j<i; ++j)\n        {\n            long long cost = 1LL*(abs(x[i]-x[j])+abs(y[i]-y[j]))*(k[i]+k[j]);\n            V.emplace_back(cost, i, j);\n        }\n    sort(V.begin(), V.end());\n    \n    vector<pair<int, int> > E;\n\n    long long ans = 0;\n    init();\n    for(auto [c, i, j]: V)\n    {\n        if(Find(i) == Find(j)) continue;\n        Union(i, j);\n        ans += c;\n        E.emplace_back(i, j);\n    }\n\n    vector<int>power;\n    vector<pair<int, int> > conn;\n    for(auto [u, v]: E)\n    {\n        if(u==0 || v == 0)\n        {\n            power.emplace_back(u+v);\n        }\n        else conn.emplace_back(u ,v);\n    }\n    printf(\"%lld\\n\", ans);\n    printf(\"%d\\n\", (int)power.size());\n    for(auto x: power) printf(\"%d \", x); puts(\"\");\n    printf(\"%d\\n\", (int)conn.size());\n    for(auto [u, v]:conn)\n        printf(\"%d %d\\n\", u, v);\n    return 0;\n\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dsu",
        "graphs",
        "greedy",
        "shortest paths",
        "trees"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Shichikuji and Power Grid.json",
    "editorial_link": "https://codeforces.com/blog/entry/71080",
    "editorial": "Claim. Let be such that is minimum, then there is an optimal\r\nconfiguration with a power station in City .Proof. Consider an optimal\r\nconfiguration. Let\u00e2\u0080\u0099s say that City and City are in the same component if\r\nthey are connected or City is connected to a City such that City is in\r\nthe same component as City . Consider the cities that are in the same\r\ncomponent as City . Exactly one of these cities have a power station,\r\nsince having a power station in one of these cities is enough to provide\r\nelectricity to all of them. Let City be the one with a power station. If\r\n, then we are done. Otherwise, there are three cases: , , . The first\r\ncase leads to a contradiction since having a power station in City would\r\nbe more optimal. The third case also leads to a contradiction since is\r\nminimum. For the remaining case, having a power station in City would be\r\njust as optimal.Let be such that is minimum. Build a power station in\r\nCity . For , define where is the manhattan distance between City and\r\nCity . Notice that the problem has been reduced to a similar problem,\r\nexcept that there is one less city, and values have been changed to the\r\ncorresponding values. Thus, we can keep reducing until there are no\r\ncities left.Alternatively, you can think of it the following way. Let\u00e2\u0080\u0099s\r\ncall a connection between City and City , an undirected edge with the\r\nweight . Create a dummy City and connect each City to it with an edge\r\nwith the weight . The problem now is to find a minimal spanning tree of\r\nthis graph. Prim\u00e2\u0080\u0099s algorithm can do this in .\r\n"
}