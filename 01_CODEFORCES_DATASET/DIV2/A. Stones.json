{
    "link": "https://codeforces.com//contest/1236/problem/A",
    "problemId": "442393",
    "problem_idx": "A",
    "shortId": "1236A",
    "contest_number": "1236",
    "problem_submissions": {
        "F": [
            62811108
        ],
        "E": [
            62897948,
            62812842,
            62804306,
            62804069,
            62813891,
            62807146,
            62814095,
            62805221,
            62811322,
            62812238,
            62805891,
            62807935,
            62864987,
            62832474
        ],
        "D": [
            62802950,
            62812650,
            62812836,
            62802625,
            62815190,
            62803700,
            62813698,
            62812781,
            62814654,
            62821887,
            62803442,
            62805006,
            62803249,
            62804002,
            62802909,
            62805902,
            62806423
        ],
        "C": [
            62792622,
            62791071,
            62789610,
            62791879,
            62789897,
            62794126,
            62795764,
            62792967,
            62790282,
            62793895,
            62789462,
            62790719,
            62789824,
            62786960,
            62793187,
            62790332,
            62791408,
            62792941
        ],
        "B": [
            62786209,
            62787426,
            62787186,
            62788924,
            62792966,
            62790776,
            62793499,
            62788719,
            62790312,
            62785414,
            62786772,
            62787247,
            62786648,
            62784848,
            62788974,
            62787295,
            62787730,
            62787714
        ],
        "A": [
            62784582,
            62784627,
            62784321,
            62785968,
            62783805,
            62784292,
            62799939,
            62784596,
            62785095,
            62790291,
            62784662,
            62784215,
            62784012,
            62783846,
            62784720,
            62784658,
            62784976,
            62784753
        ]
    },
    "name": "A. Stones",
    "statement": "Alice is playing with some stones.Now there are three numbered heaps of\r\nstones. The first of them contains a stones, the second of them contains\r\nb stones and the third of them contains c stones.Each time she can do\r\none of two operations: take one stone from the first heap and two stones\r\nfrom the second heap (this operation can be done only if the first heap\r\ncontains at least one stone and the second heap contains at least two\r\nstones); take one stone from the second heap and two stones from the\r\nthird heap (this operation can be done only if the second heap contains\r\nat least one stone and the third heap contains at least two stones). She\r\nwants to get the maximum number of stones, but she doesnâ€™t know what to\r\ndo. Initially, she has 0 stones. Can you help her?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define endl '\\n'\ntypedef long long ll;\nint i;\n\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int t;\n    cin >> t;\n    while(t--) {\n        int a,b,c;\n        cin >> a >> b >> c;\n        int res = 0;\n        for(int i = 0; i <= a && 2*i <= b; ++i) {\n            int newB = b-i-i;\n            int curr = 3*i;\n            curr +=3*min(newB, c/2);\n            res = max(res, curr);\n        }\n        cout << res << endl;\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Stones.json",
    "editorial_link": "https://codeforces.com/blog/entry/70654",
    "editorial": "We can use many ways to solve the problem. If you just enumerate how\r\nmany operations of the first and the second type, it will also pass.Of\r\ncourse there is a greedy solution. We make the second operation as much\r\nas possible, and then use the first operation. It takes time.\r\n",
    "hint": []
}