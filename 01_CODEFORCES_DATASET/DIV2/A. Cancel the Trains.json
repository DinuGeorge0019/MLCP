{
    "link": "https://codeforces.com//contest/1453/problem/A",
    "problemId": "821022",
    "problem_idx": "A",
    "shortId": "1453A",
    "contest_number": "1453",
    "problem_submissions": {
        "E": [
            100380052,
            155118161,
            100374406,
            100382833,
            100376358,
            100380373,
            100377845,
            100376439,
            100372651,
            100372508,
            100374319,
            100375311,
            100361396,
            100374016,
            100375798,
            100374877,
            100376885,
            100376092,
            100374918,
            100369776
        ],
        "D": [
            100375780,
            155118139,
            100367299,
            100371256,
            100369898,
            100372322,
            100371648,
            100366312,
            100368463,
            100366176,
            100366391,
            100373742,
            100368086,
            100364639,
            100371848,
            100367162,
            100368628,
            100369799,
            100372351
        ],
        "C": [
            100370717,
            155118105,
            100363680,
            100365192,
            100365975,
            100366748,
            100365481,
            100362777,
            100362628,
            100362653,
            100362794,
            100366264,
            100365011,
            100362269,
            100364059,
            100363843,
            100363639,
            100365174,
            100365522,
            100366070
        ],
        "F": [
            100365572,
            155118244,
            100384810,
            100377057,
            100384158,
            100383537,
            100385977,
            100390112,
            100382350,
            100381472,
            100408619,
            100428520
        ],
        "B": [
            100359448,
            155118064,
            100359921,
            100359636,
            100358954,
            100362716,
            100359915,
            100357443,
            100358086,
            100356217,
            100356739,
            100370528,
            100358105,
            100356427,
            100359186,
            100359063,
            100373277,
            100358271,
            100360209,
            100363310
        ],
        "A": [
            100352068,
            155118022,
            100354202,
            100352085,
            100350847,
            100354848,
            100351796,
            100357299,
            100351053,
            100350650,
            100351488,
            100367409,
            100350533,
            100350757,
            100350887,
            100350551,
            100351187,
            100351697,
            100352074,
            100358933
        ]
    },
    "name": "A. Cancel the Trains",
    "statement": "Gildong’s town has a train system that has 100 trains that travel from\r\nthe bottom end to the top end and 100 trains that travel from the left\r\nend to the right end. The trains starting from each side are numbered\r\nfrom 1 to 100, respectively, and all trains have the same speed. Let’s\r\ntake a look at the picture below. The train system can be represented as\r\ncoordinates on a 2D plane. The i-th train starting at the bottom end is\r\ninitially at (i,0) and will be at (i,T) after T minutes, and the i-th\r\ntrain starting at the left end is initially at (0,i) and will be at\r\n(T,i) after T minutes. All trains arrive at their destinations after 101\r\nminutes.However, Gildong found that some trains scheduled to depart at a\r\nspecific time, simultaneously, are very dangerous. At this time, n\r\ntrains are scheduled to depart from the bottom end and m trains are\r\nscheduled to depart from the left end. If two trains are both at (x,y)\r\nat the same time for some x and y, they will crash into each other.\r\nTherefore, he is asking you to find the number of trains that should be\r\ncancelled to prevent all such crashes.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define F(i,j,k) for(int i=(j);i<=(k);++i)\n#define D(i,j,k) for(int i=(j);i>=(k);--i)\n#define rep(it,s) for(__typeof(s.begin()) it=s.begin();it!=s.end();++it)\n#define Rep(a,s) for(auto a:s)\n#define PB push_back\n#define MP make_pair\n#define FF first\n#define SS second\ntypedef long long ll;\ntypedef unsigned long long ull;\nusing namespace std;\ntemplate<class Type>ll quick_pow(Type x,Type y,Type Mod){\n    ll res=1;\n    while(y){\n        if(y&1)res=res*x%Mod;\n        x=x*x%Mod,y>>=1;\n    }\n    return res;\n}\ntemplate<class Type>ll inv(Type x,Type Mod){return quick_pow(x,Mod-2,Mod);}\nnamespace IO{\n    template <class T>\n    inline void read(T &x){\n        x=0;int f=1;char ch=getchar();\n        while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n        while(ch<='9'&&ch>='0')x=x*10+ch-'0',ch=getchar();\n        x*=f;\n    }\n};\nusing namespace IO;\nint T,n,m,num[105],tx;\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\",\"r\",stdin);\n        freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    read(T);\n\twhile(T--){\n\t\tread(n),read(m);\n\t\tF(i,1,100)num[i]=0;\n\t\tF(i,1,n)read(tx),num[tx]=1;\n\t\tF(i,1,m)read(tx),num[tx]=1;\n\t\tint res=0;\n\t\tF(i,1,100)res+=num[i];\n\t\tcout<<n+m-res<<'\\n';\n\t} \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Cancel the Trains.json",
    "editorial_link": "https://codeforces.com//blog/entry/85288",
    "editorial": "Letâs first determine whether itâs possible for two trains that start\r\nfrom and to crash into each other. For this to happen, there must be a\r\npoint where , which means and . Therefore, a train that starts from the\r\nbottom end can crash into a train that starts from the left end if and\r\nonly if they have the same train number. We can cancel either one of\r\nthem to prevent that crash.Since and are small, we can brute-force every\r\npair of trains and count the number of pairs of trains that share the\r\nsame number, and print that value as the answer. The time complexity for\r\nthis solution is for each test case.If we want an asymptotically faster\r\nsolution, we can put all train numbers into a binary search tree\r\nstructure (such as in C++), and then find duplicate numbers from the\r\ntrains of the other side by searching for those values. Another similar\r\nsolution is to sort the former numbers, then perform binary search for\r\nthe other values. The time complexity for these solutions is .There is\r\nanother solution with time complexity taking advantage of the fact that\r\nthe train numbers are small. Letâs make an array of length , and set if\r\nand only if there is a train starting from . For each train starting\r\nfrom , we can check if is , and count the total number of duplicates\r\nthis way.\r\n",
    "hint": []
}