{
    "link": "https://codeforces.com//contest/1793/problem/D",
    "problemId": "1779690",
    "problem_idx": "D",
    "shortId": "1793D",
    "contest_number": "1793",
    "problem_submissions": {
        "E": [
            193303068,
            193410509,
            193318182,
            193317664,
            193321898,
            193321819,
            195118865,
            193320360,
            193323873,
            193322184,
            193312387,
            193317745,
            193328336,
            193326548,
            193325450,
            193417270,
            193326710,
            193328225,
            193330842,
            193347782,
            193325695,
            193407475
        ],
        "F": [
            193294668,
            193432445,
            193283485,
            193302193,
            193292394,
            193301208,
            193303400,
            193301778,
            193305649,
            193314414,
            193303519,
            193297557,
            193311968,
            193311201,
            193435668,
            193417130,
            193298340,
            193305239,
            193316596,
            193292430,
            193291733,
            193298678,
            193285006
        ],
        "D": [
            193289297,
            193410468,
            193298851,
            193295249,
            193301162,
            193294370,
            195118553,
            193297347,
            193290499,
            193299884,
            193294597,
            193310876,
            193307621,
            193292591,
            193294931,
            193417683,
            193309769,
            193297566,
            193311269,
            193290315,
            193298522,
            193315173,
            193303157
        ],
        "C": [
            193282896,
            193410484,
            193410436,
            193291983,
            193285787,
            193287901,
            193282042,
            195118522,
            193288500,
            193283243,
            193287291,
            193286808,
            193292453,
            193283068,
            193285096,
            193286514,
            193417697,
            193294800,
            193285233,
            193294514,
            193283977,
            193285615,
            193312185,
            193282557
        ],
        "B": [
            193281488,
            193410417,
            193303429,
            193282163,
            193284281,
            193285830,
            195118463,
            193284739,
            193293047,
            193283557,
            193283997,
            193294754,
            193288469,
            193298342,
            193284337,
            193417706,
            193311244,
            193287539,
            193288050,
            193280259,
            193283801,
            193322565,
            193294257
        ],
        "A": [
            193280157,
            193410319,
            193280181,
            193280331,
            193281160,
            193280045,
            195118430,
            193280519,
            193280318,
            193279986,
            193280684,
            193280733,
            193280459,
            193280266,
            193280563,
            193417721,
            193281601,
            193308502,
            193281932,
            193295057,
            193280019,
            193319646,
            193290909
        ]
    },
    "name": "D. Moscow Gorillas",
    "statement": "In winter, the inhabitants of the Moscow Zoo are very bored, in\r\nparticular, it concerns gorillas. You decided to entertain them and\r\nbrought a permutation p of length n to the zoo.A permutation of length n\r\nis an array consisting of n distinct integers from 1 to n in any order.\r\nFor example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a\r\npermutation (2 occurs twice in the array) and [1,3,4] is also not a\r\npermutation (n=3, but 4 is present in the array).The gorillas had their\r\nown permutation q of length n. They suggested that you count the number\r\nof pairs of integers l, r (1\r\nle l\r\nle r\r\nle n) such that\r\noperatorname{MEX}([p_l, p_{l+1},\r\nldots, p_r])=\r\noperatorname{MEX}([q_l, q_{l+1},\r\nldots, q_r]).The\r\noperatorname{MEX} of the sequence is the minimum integer number missing\r\nfrom this sequence. For example,\r\noperatorname{MEX}([1, 3]) = 2,\r\noperatorname{MEX}([5]) = 1,\r\noperatorname{MEX}([3, 1, 2, 6]) = 4.You do not want to risk your health,\r\nso you will not dare to refuse the gorillas.\r\n",
    "solutions": [
        "#include<bits/stdC++.h>\nusing namespace std;\nint T,n,p[200003],q[200003];\nlong long ans=1;\nvoid calc(int l,int r,int ll,int rr){\n\tif(ll>rr)return;\n\tif(l>r)ans+=(rr-ll+2ll)*(rr-ll+1ll)/2;\n\telse if(l>=ll&&rr>=r)ans+=(l-ll+1ll)*(rr-r+1ll);\n}\nint main(){\n\tios::sync_with_stdio(0);\n\tcin>>n;\n\tfor(int i=0;i<n;i++){int x;cin>>x;p[x-1]=i;}\n\tfor(int i=0;i<n;i++){int x;cin>>x;q[x-1]=i;}\n\tint L=n-1,R=0;\n\tfor(int i=0;i<n;i++){\n\t\tif(p[i]>q[i])swap(p[i],q[i]);\n\t\tcalc(L,R,0,p[i]-1);\n\t\tcalc(L,R,p[i]+1,q[i]-1);\n\t\tcalc(L,R,q[i]+1,n-1);\n\t\tL=min(L,p[i]);\n\t\tR=max(R,q[i]);\n\t}cout<<ans<<'\\n';\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "implementation",
        "math",
        "two pointers"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Moscow Gorillas.json",
    "editorial_link": "https://codeforces.com//blog/entry/112723",
    "editorial": "Denote by the index of the number in the permutation. Subsegments with\r\nare as follows . Denote by: , . Subsegments with are as follows . Letâs\r\nfind all subsegments with . If , then the subsegments with are as\r\nfollows If , then there is no subsegment with If , then the subsegments\r\nwith are as follows It remains only to intersect the sets of such\r\nsubsegments for and , which is done trivially. Code\r\n",
    "hint": []
}