{"link": "https://codeforces.com//contest/136/problem/D", "problemId": "714", "problem_idx": "D", "shortId": "136D", "contest_number": "136", "problem_submissions": {"E": [4394426, 943854, 943936, 944323, 942300, 944776, 945031, 945743, 945579, 943842, 945887, 945798, 944859, 946578, 946396, 953971, 945988, 946489, 946047, 946492], "D": [4394420, 941362, 941671, 941559, 943130, 942400, 942793, 942153, 943644, 945052, 943026, 942548, 943366, 942578, 942783, 953962, 941992, 943393, 943910, 943675], "C": [4394416, 939617, 939576, 940002, 940871, 939754, 940568, 940141, 939502, 940571, 940454, 938936, 944319, 940526, 940778, 953940, 940564, 940613, 939789, 941664], "B": [4394414, 939135, 938999, 938581, 939003, 938910, 939376, 938682, 939008, 939286, 939655, 939717, 940678, 939297, 939444, 953946, 940051, 939328, 938861, 939640], "A": [4394413, 937874, 938097, 937644, 938221, 937662, 937689, 937544, 937564, 938024, 938080, 940085, 937732, 938256, 937668, 953939, 938564, 938136, 937850, 80618210, 937975]}, "name": "D. Rectangle and Square", "statement": "Little Petya very much likes rectangles and especially squares. Recently\r\nhe has received 8 points on the plane as a gift from his mother. The\r\npoints are pairwise distinct. Petya decided to split them into two sets\r\neach containing 4 points so that the points from the first set lay at\r\nthe vertexes of some square and the points from the second set lay at\r\nthe vertexes of a rectangle. Each point of initial 8 should belong to\r\nexactly one set. It is acceptable for a rectangle from the second set\r\nwas also a square. If there are several partitions, Petya will be\r\nsatisfied by any of them. Help him find such partition. Note that the\r\nrectangle and the square from the partition should have non-zero areas.\r\nThe sides of the figures to be parallel to the coordinate axes, though\r\nit might be the case.\r\n", "solutions": ["//Done by Grey Matter\n//Fet per Ferran Alet\n\n#include<iostream>\n#include<cmath>\n#include<iomanip>\n#include<vector>\n#include<map>\n#include<queue>\n#include<fstream>\n#include<algorithm>\n#include<string>\n#include<stack>\n#include<numeric>\n#include<set>\n#include<sstream>\n#include<list>\n\n#define INF 2147483647\n#define LINF 1000000000000000000LL\n#define EPS 1e-9\n#define debug(x) cerr << #x << \" = \" << x << endl\n#define FOR(x,y) for(int x=0;x<y;x++)\n#define FORU(x,y) for(int x=1;x<=y;x++)\n#define x first\n#define y second\nusing namespace std;\n\n\ntypedef long long ll;\ntypedef pair<int,int> PII;\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<bool> VB;\ntypedef vector<VB> VVB;\ntypedef vector<string> VS;\ntypedef map<int,int> MII;\ntypedef MII::iterator iMII;\n\nvector<PII> v(8);\n\nbool quadrat(){\n    if((v[0].x-v[1].x)*(v[1].x-v[2].x)+(v[0].y-v[1].y)*(v[1].y-v[2].y)!=0) return false;\n    if((v[1].x-v[2].x)*(v[2].x-v[3].x)+(v[1].y-v[2].y)*(v[2].y-v[3].y)!=0) return false;\n    if((v[2].x-v[3].x)*(v[3].x-v[0].x)+(v[2].y-v[3].y)*(v[3].y-v[0].y)!=0) return false;\n    return ((v[0].x-v[1].x)*(v[0].x-v[1].x)+(v[0].y-v[1].y)*(v[0].y-v[1].y)==(v[2].x-v[1].x)*(v[2].x-v[1].x)+(v[2].y-v[1].y)*(v[2].y-v[1].y));\n}\nbool rectangle(){\n    if((v[0+4].x-v[1+4].x)*(v[1+4].x-v[2+4].x)+(v[0+4].y-v[1+4].y)*(v[1+4].y-v[2+4].y)!=0) return false;\n    if((v[1+4].x-v[2+4].x)*(v[2+4].x-v[3+4].x)+(v[1+4].y-v[2+4].y)*(v[2+4].y-v[3+4].y)!=0) return false;\n    if((v[2+4].x-v[3+4].x)*(v[3+4].x-v[0+4].x)+(v[2+4].y-v[3+4].y)*(v[3+4].y-v[0+4].y)!=0) return false;\n    return true;\n}\n\nint main(){\n//ios_base::sync_with_stdio(false);\n    map<PII,int> M;\n    FOR(i,8) {\n        cin>>v[i].first>>v[i].second;\n        M[v[i]]=i+1;\n    }\n    sort(v.begin(),v.end());\n    bool espot=false;\n    do{\n        if(quadrat() && rectangle()){\n            espot=true;\n            cout<<\"YES\"<<endl;\n            FOR(i,4) {\n                if(i) cout<<' ';\n                cout<<M[v[i]];\n            }\n            cout<<endl;\n            FOR(i,4) {\n                if(i) cout<<' ';\n                cout<<M[v[i+4]];\n            }\n            cout<<endl;\n            break;\n        }\n    }while(next_permutation(v.begin(),v.end()));\n    if(!espot) cout<<\"NO\"<<endl;\n    //system(\"pause\");\n}\n"], "input": "", "output": "", "tags": ["brute force", "geometry", "implementation"], "dificulty": "1600", "interactive": false}