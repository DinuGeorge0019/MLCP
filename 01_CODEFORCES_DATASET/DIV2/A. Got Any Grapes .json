{
    "link": "https://codeforces.com//contest/1114/problem/A",
    "problemId": "295523",
    "problem_idx": "A",
    "shortId": "1114A",
    "contest_number": "1114",
    "problem_submissions": {
        "E": [
            49723158,
            49715728,
            49717586,
            49715673,
            49722801,
            49716158,
            49718191,
            49719573,
            49752574,
            49752490,
            49731134,
            49732179,
            49723266,
            49731088,
            49731791,
            49709398,
            49709699,
            49747930,
            49752856,
            49752305,
            49752243,
            49751661,
            49717020,
            49711667,
            49716380
        ],
        "D": [
            49715413,
            49709860,
            49711770,
            49711237,
            49709601,
            49710358,
            49712973,
            49713792,
            49713441,
            49727466,
            49728830,
            49707199,
            49710354,
            49729290,
            49706402,
            49726434,
            49712605,
            49711462,
            49713489,
            49710031
        ],
        "F": [
            49712180,
            49727873,
            49729579,
            49729533,
            49726481,
            49727101,
            49727851,
            49731205,
            49722332,
            49708876,
            49721497,
            49732987,
            49730916,
            49722816,
            49711859,
            49722110,
            49737560,
            49795547
        ],
        "B": [
            49703429,
            49701684,
            49702412,
            49706794,
            49704297,
            49702841,
            49708341,
            49704456,
            49705411,
            49718896,
            49701034,
            49703871,
            49704671,
            49716920,
            49700530,
            49704223,
            49704334,
            49707941,
            49702883,
            49701403
        ],
        "C": [
            49701343,
            49703467,
            49706082,
            49704226,
            49698909,
            49708135,
            49709609,
            49709215,
            49708563,
            49712949,
            49704721,
            49705449,
            49707404,
            49724763,
            49703776,
            49705794,
            49710442,
            49704405,
            49704935,
            49704203
        ],
        "A": [
            49696863,
            49696786,
            49698271,
            49697340,
            49701634,
            49697080,
            49706366,
            49697215,
            49702348,
            49720550,
            49696844,
            49696791,
            49698691,
            49696775,
            49697211,
            49696953,
            49699702,
            49696860,
            49697429,
            49697130
        ]
    },
    "name": "A. Got Any Grapes ",
    "statement": "The Duck songFor simplicity, we’ll assume that there are only three\r\ntypes of grapes: green grapes, purple grapes and black grapes.Andrew,\r\nDmitry and Michal are all grapes’ lovers, however their preferences of\r\ngrapes are different. To make all of them happy, the following should\r\nhappen: Andrew, Dmitry and Michal should eat at least x, y and z grapes,\r\nrespectively. Andrew has an extreme affinity for green grapes, thus he\r\nwill eat green grapes and green grapes only. On the other hand, Dmitry\r\nis not a fan of black grapes any types of grapes except black would do\r\nfor him. In other words, Dmitry can eat green and purple grapes. Michal\r\nhas a common taste he enjoys grapes in general and will be pleased with\r\nany types of grapes, as long as the quantity is sufficient.Knowing that\r\nhis friends are so fond of grapes, Aki decided to host a grape party\r\nwith them. He has prepared a box with a green grapes, b purple grapes\r\nand c black grapes.However, Aki isn’t sure if the box he prepared\r\ncontains enough grapes to make everyone happy. Can you please find out\r\nwhether it’s possible to distribute grapes so that everyone is happy or\r\nAki has to buy some more grapes?It is not required to distribute all the\r\ngrapes, so it’s possible that some of them will remain unused.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nusing ll = long long;\n\nconst int MAXN = 1000500;\nconst int MOD = 1000000007;\n\nvoid bad() {\n  cout << \"No\" << endl;\n  exit(0);\n}\n\nint main() {\n  ios_base::sync_with_stdio(false);\n\n  int x, y, z;\n  cin >> x >> y >> z;\n  int a, b, c;\n  cin >> a >> b >> c;\n  if (a < x) bad();\n  a -= x;\n  if (a + b < y) bad();\n  int tot = a + b + c - y;\n  if (tot < z) bad();\n  cout << \"Yes\" << endl;\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Got Any Grapes .json",
    "editorial_link": "https://codeforces.com/blog/entry/65136",
    "editorial": "TutorialFirst of all, we can see the grape preference is hierarchically\r\ninclusive: the grapesâ types Andrew enjoys are some of those that Dmitry\r\ndoes, and Dmitryâs favorites are included in Michalâs.Letâs distribute\r\nthe grapes to satisfy Andrew first, then to Dmitry, then Michal. If any\r\nof the following criteria is not satisfied (which means one of our\r\nfriends is not happy), then we can immediately say that no distributions\r\nare available: Andrew must have at least green grapes. So we need, .\r\nDmitry can have purple grapes and/or the remaining green grapes. In\r\nother words, (the minus is because green grapes have been given to\r\nAndrew already). Michal can have grapes of any kinds. In other words,\r\n(similar explanations like above for both minus and minus ). If all\r\nthree criteria are satisfied, then a grape distribution is\r\npossible.Total complexity: .\r\n",
    "hint": []
}