{
    "link": "https://codeforces.com//contest/2030/problem/C",
    "problemId": "2962990",
    "problem_idx": "C",
    "shortId": "2030C",
    "contest_number": "2030",
    "problem_submissions": {
        "D": [
            286870605,
            286870097,
            286766067,
            286743790,
            286749704,
            286752517,
            286743540,
            286763694,
            286769489,
            286762215,
            286755968,
            286807582,
            286774479,
            286755264,
            286748829,
            286762354,
            286767397,
            286766307,
            286775817,
            286773805,
            286867460,
            286806694,
            286757030
        ],
        "C": [
            286860734,
            286764785,
            286775512,
            286732737,
            286735870,
            286731279,
            286736529,
            286759035,
            286741312,
            286740209,
            286770332,
            286732276,
            286730948,
            286749099,
            286748589,
            286737019,
            286738816,
            286732618,
            286746919,
            286735952,
            286744382
        ],
        "B": [
            286858184,
            286726117,
            286721582,
            286722000,
            286722997,
            286722179,
            286731090,
            286742656,
            286728669,
            286721456,
            286721616,
            286722634,
            286723485,
            286723817,
            286722712,
            286723090,
            286725291,
            286719819,
            286727047,
            286721215,
            286722880
        ],
        "A": [
            286857205,
            286716570,
            286716508,
            286717068,
            286716187,
            286716722,
            286727391,
            286716522,
            286715165,
            286715628,
            286715445,
            286716659,
            286717260,
            286715083,
            286717340,
            286715258,
            286718621,
            286715888,
            286722488,
            286715834,
            286716388
        ],
        "G1": [
            286855127,
            286854605,
            287072911,
            286866647
        ],
        "F": [
            286768609,
            286793091,
            286802410,
            286804764,
            286807723,
            286808203,
            286799478,
            286806636,
            286814242,
            286786481,
            286811066,
            286813827,
            286813676,
            286816754,
            286814190,
            286813606,
            286813682,
            286795825,
            286808765,
            286817519
        ],
        "E": [
            286766337,
            286759349,
            286779444,
            286786742,
            286788454,
            286791781,
            286783999,
            286800776,
            286780259,
            286764648,
            286793854,
            286792948,
            286789703,
            286779768,
            286799721,
            286794191,
            286791806,
            286816988,
            286786381,
            286789315
        ],
        "G2": [
            287138384
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135218",
    "editorial": "Problem Credits: Proof_by_QED Analysis: Proof_by_QED Solution Letâs\r\nunderstand what Alice wants to do. She wants to separate a statement\r\nthat evaluates to true between two orâs. This guarantees her victory\r\nsince or is evaluated after all andâs.First, if the first or last\r\nboolean is true, then Alice instantly wins by placing or between the\r\nfirst and second, or second to last and last booleans.Otherwise, if\r\nthere are two trueâs consecutively, Alice can also win. Alice may place\r\nor before the first of the two on her first move. If Bob does not put\r\nhis operator between the two trueâs, then Alice will put an or between\r\nthe two trueâs on her next move and win. Otherwise, Bob does place his\r\noperator between the two trueâs. However, no matter what Bob placed, the\r\ntwo trueâs will always evaluate to true, so on her second move Alice can\r\njust place an or on the other side of the two trueâs to win.We claim\r\nthese are the only two cases where Alice wins. This is because\r\notherwise, there does not contain two trueâs consecutively. Now,\r\nwhenever Alice places an or adjacent to a true, Bob will respond by\r\nplacing and after the true, which will invalidate this clause to be\r\nfalse.\r\n",
    "name": "C. A TRUE Battle",
    "statement": "Alice and Bob are playing a game. There is a list of n booleans, each of\r\nwhich is either or , given as a binary string ^{\r\ntext{ }} of length n (where\r\ntexttt{1} represents , and\r\ntexttt{0} represents ). Initially, there are no operators between the\r\nbooleans.Alice and Bob will take alternate turns placing or between the\r\nbooleans, with Alice going first. Thus, the game will consist of n-1\r\nturns since there are n booleans. Alice aims for the final statement to\r\nevaluate to , while Bob aims for it to evaluate to . Given the list of\r\nboolean values, determine whether Alice will win if both players play\r\noptimally.To evaluate the final expression, repeatedly perform the\r\nfollowing steps until the statement consists of a single or : If the\r\nstatement contains an operator, choose any one and replace the\r\nsubexpression surrounding it with its evaluation. Otherwise, the\r\nstatement contains an operator. Choose any one and replace the\r\nsubexpression surrounding the with its evaluation. For example, the\r\nexpression is evaluated as = = . It can be shown that the result of any\r\ncompound statement is unique.^{\r\ntext{ }}A binary string is a string that only consists of characters\r\ntexttt{0} and\r\ntexttt{1}\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"using namespace std;using ll = long long;using vi = vector<int>; #define endl '\\n'#define pb emplace_back#define sz(x) (int)(x).size()#define all(x) (x).begin(), (x).end()#define make_unique(x) sort(all(x)), x.resize(unique(all(x)) - begin(x))#define debug(x) cerr << \"[\" << __LINE__ << \"] \"#x\" = \" << (x) << endl int a[1005]; void solve() {\t\tint n;\tstring str;\tcin >> n >> str;\tstring criteria = \"\";\tcriteria += str[0];\tcriteria += str[n - 1];\tif (criteria == \"10\" || criteria == \"01\" || criteria == \"11\") {\t\tcout << \"YES\" << endl;\t\treturn;\t} \t\tfor (int i = 0; i < n - 1; i ++) {\t\tcriteria = str[i];\t\tcriteria += str[i + 1];\t\tif (criteria == \"11\") {\t\t\tcout << \"YES\" << endl;\t\t\treturn;\t\t}\t}\tcout << \"NO\" << endl;\t\t} int main() {#ifndef ONLINE_JUDGE\tfreopen(\"in.txt\", \"r\", stdin);//\tfreopen(\"out.txt\", \"w\", stdout);#endif \tios::sync_with_stdio(0); cin.tie(0); cout.tie(0); \tint tc = 1;\tcin >> tc;\twhile (tc --) solve(); \treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "games",
        "greedy"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. A TRUE Battle.json",
    "hint": []
}