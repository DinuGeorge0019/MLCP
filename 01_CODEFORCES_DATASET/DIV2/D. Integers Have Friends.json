{
    "link": "https://codeforces.com//contest/1549/problem/D",
    "problemId": "1062377",
    "problem_idx": "D",
    "shortId": "1549D",
    "contest_number": "1549",
    "problem_submissions": {
        "F2": [
            124954760
        ],
        "B": [
            124947565,
            124545808,
            124541593,
            124946530,
            124553166,
            124545711,
            124536914,
            124556540,
            124566832,
            124527986,
            124941325,
            124545594,
            124575237,
            124552639,
            124521339,
            124527240,
            124534396,
            124536389,
            124529098,
            124547548,
            124525326,
            124539590,
            124546541
        ],
        "A": [
            124947501,
            124518305,
            124519670,
            124946570,
            124520785,
            124519203,
            124517993,
            124517559,
            124518317,
            124518952,
            124941237,
            124534955,
            124569653,
            124519648,
            124517299,
            124518094,
            124521899,
            124520868,
            124518074,
            124519228,
            124517443,
            124519076,
            124518992
        ],
        "F1": [
            124584680,
            124595832,
            124599734,
            124593371,
            124597616,
            124593738,
            124591194,
            124592802,
            124602219,
            124602384,
            124588472,
            124753532,
            124592653,
            124603568,
            124595865
        ],
        "E": [
            124572687,
            124578681,
            124586160,
            124580564,
            124586278,
            124587026,
            124603080,
            124600315,
            124577736,
            124595081,
            124580521,
            124597748,
            124594829,
            124597255,
            124685628,
            124601974
        ],
        "D": [
            124558908,
            124554190,
            124550650,
            124565038,
            124571505,
            124565266,
            124557657,
            124634855,
            124586699,
            124566420,
            124566608,
            124571026,
            124544812,
            124558707,
            124568055,
            124617780,
            124551649,
            124555888,
            124569746,
            124549100,
            124571724,
            124554851
        ],
        "C": [
            124534727,
            124537090,
            124536290,
            124552036,
            124551687,
            124549175,
            124538153,
            124547780,
            124552849,
            124553941,
            124540508,
            124527050,
            124538078,
            124556164,
            124573095,
            124538823,
            124554597,
            124536966,
            124553733,
            124540516
        ]
    },
    "name": "D. Integers Have Friends",
    "statement": "British mathematician John Littlewood once said about Indian\r\nmathematician Srinivasa Ramanujan that \"every positive integer was one\r\nof his personal friends.\"It turns out that positive integers can also be\r\nfriends with each other! You are given an array a of distinct positive\r\nintegers. Define a a_i, a_{i+1},\r\nldots, a_j to be a if and only if there exists an integer m\r\nge 2 such that a_i\r\nbmod m = a_{i+1}\r\nbmod m =\r\nldots = a_j\r\nbmod m, where x\r\nbmod y denotes the remainder when x is divided by y.Your friend Gregor\r\nwants to know the size of the largest friend group in a.\r\n",
    "solutions": [
        "// Problem: D. Integers Have Friends\n// Contest: Codeforces - Codeforces Round #736 (Div. 2)\n// URL: https://codeforces.com/contest/1549/problem/D\n// Memory Limit: 256 MB\n// Time Limit: 2000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include<bits/stdc++.h>\n#define pb push_back\n#define mp make_pair\n#define chkmx(a,b) ((a)=max((a),(b)))\n#define chkmn(a,b) ((a)=min((a),(b)))\nusing namespace std;\ntemplate<typename T>\ninline void read(T &x){x=0;char c=getchar();bool f=false;for(;!isdigit(c);c=getchar())f|=c=='-';for(;isdigit(c);c=getchar())x=x*10+c-'0';if(f)x=-x;}\ntemplate<typename T ,typename ...Arg>inline void read(T &x,Arg &...args){read(x);read(args...);}\ntemplate<typename T>inline void write(T x){if(x<0)putchar('-'),x=-x;if(x>=10)write(x/10);putchar(x%10+'0');}\n#define int long long\ntypedef long long ll;\nconst int N=2e5+100;\nint t,n,a[N],b[N];\nstruct SGT{\n\tint val[N<<2];\n\t#define lc (x<<1)\n\t#define rc (x<<1|1)\n\t#define mid ((l+r)>>1)\n\tvoid pushup(int x){\n\t\tval[x]=__gcd(val[lc],val[rc]);\n\t}\n\tvoid build(int x,int l,int r){\n\t\tif(l==r){\n\t\t\tval[x]=b[l];\n\t\t\treturn;;\n\t\t}\n\t\t\n\t\tbuild(lc,l,mid);\n\t\tbuild(rc,mid+1,r);\n\t\tpushup(x);\n\t}\n\tint qry(int x,int l,int r,int ql,int qr){\n\t\tif(ql<=l&&r<=qr)return val[x];\n\t\tif(qr<l||r<ql)return 0;\n\t\treturn __gcd(qry(lc,l,mid,ql,qr),qry(rc,mid+1,r,ql,qr));\n\t}\n}T;\nsigned main(){\n\tread(t);\n\twhile(t--){\n\t\tread(n);\n\t\tfor(int i=1;i<=n;i++)read(a[i]);\n\t\tfor(int i=1;i<n;i++)b[i]=abs(a[i]-a[i+1]);\n\t\tif(n==1){write(1);putchar('\\n');continue;;}\n\t\tT.build(1,1,n-1);\n\t\tint l=1,r=0,ans=1;int now=0;\n\t\tfor(;l<n;){\n\t\t\twhile(r+1<n&&__gcd(now,b[r+1])>1)\n\t\t\t\tr++,now=__gcd(now,b[r]);\n\t\t\tif(now>1)ans=max(ans,r-l+2);\n\t\t\tl++;chkmx(r,l-1);\n\t\t\tif(l<=r)now=T.qry(1,1,n-1,l,r);\n\t\t\telse now=0;\n\t\t}\n\t\twrite(ans);putchar('\\n');\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "math",
        "two pointers"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Integers Have Friends.json",
    "editorial_link": "https://codeforces.com//blog/entry/93586",
    "editorial": "SolutionThe key observation is to construct the difference array of size\r\n, where . If a given subarray is a friend group, then every difference\r\nis a multiple of some . Since every element of is distinct, the case\r\nwhen can be ignored.We can now convert this into a GCD (greatest common\r\ndivisor) problem. It follows that is a friend group if and only if .\r\nIndeed, the value that we want is equal to this GCD.To solve the\r\nproblem, we can use a sparse table or a segment tree to find the largest\r\npossible subarray beginning at , and then max over all subarray answers\r\nto get the final answer.The time complexity is . The first log is for\r\nthe sparse table, the second is for computing GCDs.Note that the de\r\nfacto time complexity may be closer to , due to the insights from this\r\nblog post.\r\n",
    "hint": [
        "Hint 1 Let's say the subarray is all congruent to . What does that imply about the subarray?",
        "Hint 2 What does the previous hint imply about the difference array generated by ?",
        "Hint 3 GCD"
    ]
}