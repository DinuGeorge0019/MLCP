{
    "link": "https://codeforces.com//contest/1072/problem/C",
    "problemId": "240871",
    "problem_idx": "C",
    "shortId": "1072C",
    "contest_number": "1072",
    "problem_submissions": {
        "E": [
            44644399,
            44650543,
            44734034
        ],
        "D": [
            44632605,
            44632447,
            44632175,
            44637652,
            44635628,
            44637006,
            44633885,
            151267020,
            44638964,
            44635045,
            44638115,
            44637529,
            44637972,
            44638624,
            44636915,
            44640412,
            44642212,
            44637605,
            44638663,
            44639668,
            44680075,
            44642131
        ],
        "C": [
            44629439,
            44628133,
            44629672,
            44628147,
            44630750,
            44631571,
            44630332,
            44631317,
            44630520,
            44628174,
            44630246,
            44632020,
            44630576,
            44632772,
            44630621,
            44630463,
            44631591,
            44634217,
            44633521,
            44631795
        ],
        "B": [
            44628286,
            44626280,
            44627642,
            44625837,
            44627706,
            44628961,
            44626684,
            44627105,
            44628089,
            44633570,
            44627458,
            44628288,
            44627756,
            44630738,
            44627790,
            44627828,
            44631462,
            44628114,
            44627946,
            44628620
        ],
        "A": [
            44624145,
            44624123,
            44661469,
            44624742,
            44624134,
            44625024,
            44624914,
            44624126,
            44624358,
            44624143,
            44630174,
            44624249,
            44625453,
            44624220,
            44625169,
            44624173,
            44624200,
            44631557,
            44625268,
            44624520,
            44624259
        ],
        "F": [
            44725275
        ]
    },
    "name": "C. Cram Time",
    "statement": "In a galaxy far, far away Lesha the student has just got to know that he\r\nhas an exam in two days. As always, he hasn’t attended any single class\r\nduring the previous year, so he decided to spend the remaining time\r\nwisely.Lesha knows that today he can study for at most a hours, and he\r\nwill have b hours to study tomorrow. Note that it is possible that on\r\nhis planet there are more hours in a day than on Earth. Lesha knows that\r\nthe quality of his knowledge will only depend on the number of lecture\r\nnotes he will read. He has access to an infinite number of notes that\r\nare enumerated with positive integers, but he knows that he can read the\r\nfirst note in one hour, the second note in two hours and so on. In other\r\nwords, Lesha can read the note with number k in k hours. Lesha can read\r\nthe notes in arbitrary order, however, he can’t start reading a note in\r\nthe first day and finish its reading in the second day.Thus, the student\r\nhas to fully read several lecture notes today, spending at most a hours\r\nin total, and fully read several lecture notes tomorrow, spending at\r\nmost b hours in total. What is the maximum number of notes Lesha can\r\nread in the remaining time? Which notes should he read in the first day,\r\nand which in the second?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 2e5 + 5;\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\ntemplate <typename T> void chkmax(T &x, T y) {x = max(x, y); }\ntemplate <typename T> void chkmin(T &x, T y) {x = min(x, y); } \ntemplate <typename T> void read(T &x) {\n\tx = 0; int f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -f;\n\tfor (; isdigit(c); c = getchar()) x = x * 10 + c - '0';\n\tx *= f;\n}\ntemplate <typename T> void write(T x) {\n\tif (x < 0) x = -x, putchar('-');\n\tif (x > 9) write(x / 10);\n\tputchar(x % 10 + '0');\n}\ntemplate <typename T> void writeln(T x) {\n\twrite(x);\n\tputs(\"\");\n}\nvector <int> a, b;\nint main() {\n\tint n, m; read(n), read(m);\n\tint sum = n + m, tot = 0;\n\twhile (sum >= tot + 1) {\n\t\ttot++;\n\t\tsum -= tot;\n\t}\n\tfor (int i = tot; i >= 1; i--)\n\t\tif (n >= i) {\n\t\t\tn -= i;\n\t\t\ta.push_back(i);\n\t\t} else b.push_back(i);\n\twriteln(a.size());\n\tfor (auto x : a)\n\t\tprintf(\"%d \", x);\n\tprintf(\"\\n\");\n\twriteln(b.size());\n\tfor (auto x : b)\n\t\tprintf(\"%d \", x);\n\tprintf(\"\\n\");\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Cram Time.json",
    "editorial_link": "https://codeforces.com//blog/entry/62612",
    "editorial": "Consider any answer with maximal n+m\n. If we used numbers d1,d2,,dk\n (di>n+m\n), then we didn't use some numbers h1,h2,,hk\n (hi?n+m\n). Replacing all di\n by hi\n (1?i?k\n) doesn't violate the restriction. That means that we can assume that the answer consists of all numbers from 1\n to x\n, and x=n+m\n. The sum of all numbers from 1\n to x\n equals x(x+1)2\n. It's clear that the following inequality must hold: x(x+1)2?a+b\n. Let's find the maximal x\n for which it's true. The answer can't exceed x\n, and we can build the answer for x\n iteratively. Let's iterate over all lecture notes from x\n to 1\n, and on each step we put it into the first day if we can, otherwise if in the first day we have w>0\n free time then we put the lecture note w<x\n to the first day. All other lecture notes can be read during the second day since the either there are none of them, or the first day is full and hence the second day contains a sufficient amount of hours to read'em all.",
    "hint": []
}