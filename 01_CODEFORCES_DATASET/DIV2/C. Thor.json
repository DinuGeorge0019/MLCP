{"link": "https://codeforces.com//contest/705/problem/C", "problemId": "67574", "problem_idx": "C", "shortId": "705C", "contest_number": "705", "problem_submissions": {"D": [19710317, 19709572, 19706603, 19723842, 19714113], "B": [19697015, 19695602, 19694872, 19691908, 19690813, 19690994, 19691365, 19692977, 19701184, 19690077, 19695542, 19693836, 19691432, 19691430, 19691201, 19691141, 19690981, 19690624], "C": [19695574, 19701038, 19703575, 19694988, 19695049, 19694120, 19694460, 19696131, 19693613, 19695194, 19694857, 19693954, 19699733, 19694740, 19697270, 19695964, 19694395, 19694550, 19694956], "A": [19689053, 19689391, 19688190, 19691873, 19687916, 19688114, 19688082, 19688059, 19695855, 19688080, 19688873, 19688894, 19689037, 19688592, 19688331, 19688091, 19688817, 19688188]}, "name": "C. Thor", "statement": "Thor is getting used to the Earth. As a gift Loki gave him a smartphone.\r\nThere are applications on this phone. Thor is fascinated by this phone.\r\nHe has only one minor issue: he can\u2019t count the number of unread\r\nnotifications generated by those applications (maybe Loki put a curse on\r\nit so he can\u2019t). events are about to happen (in chronological order).\r\nThey are of three types: Application generates a notification (this new\r\nnotification is unread). Thor reads all notifications generated so far\r\nby application (he may re-read some notifications). Thor reads the first\r\nnotifications generated by phone applications (notifications generated\r\nin first events of the first type). It\u2019s guaranteed that there were at\r\nleast events of the first type before this event. Please note that he\r\ndoesn\u2019t read first unread notifications, he just reads the very first\r\nnotifications generated on his phone and he may re-read some of them in\r\nthis operation. Please help Thor and tell him the number of unread\r\nnotifications after each event. You may assume that initially there are\r\nno notifications in the phone.\r\n", "solutions": ["#include \"stdio.h\"\n#include \"set\"\n#include \"queue\"\n\nint n,q,t,xi,ty,co;\nstd::set<int> noti;\nstd::queue<int> app[300005];\n\nint main(){\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i = 0; i < q; i++){\n\t\tscanf(\"%d%d\",&ty,&xi);\n\t\tif(ty==1){\n\t\t\tapp[xi].push(t);\n\t\t\tnoti.insert(t++);\n\t\t\tco++;\n\t\t}else if(ty==2){\n\t\t\twhile(!app[xi].empty()){\n\t\t\t\tif(noti.count(app[xi].front())==1){\n\t\t\t\t\tnoti.erase(app[xi].front());\n\t\t\t\t\tco--;\n\t\t\t\t}\n\t\t\t\tapp[xi].pop();\n\t\t\t}\n\t\t}else{\n\t\t\tfor(auto it = noti.begin(); it != noti.end();){\n\t\t\t\tif(*it < xi){\n\t\t\t\t\tit = noti.erase(it);\n\t\t\t\t\tco--;\n\t\t\t\t}else break;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",co);\n\t}\n\n}"], "input": "", "output": "", "tags": ["brute force", "data structures", "implementation"], "dificulty": "1600", "interactive": false}