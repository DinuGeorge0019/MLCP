{
    "link": "https://codeforces.com//contest/680/problem/A",
    "problemId": "61899",
    "problem_idx": "A",
    "shortId": "680A",
    "contest_number": "680",
    "problem_submissions": {
        "E": [
            18325043,
            18336819,
            18313780,
            18325133,
            18326159,
            91465868,
            91465765,
            18326865,
            18326653,
            18321290,
            18325524
        ],
        "D": [
            18318422,
            18317712,
            18319515,
            18318081,
            18319018,
            18319894,
            18321280,
            18314391,
            18321896,
            18322082,
            18323629,
            18321461
        ],
        "C": [
            18310807,
            18309120,
            18309109,
            18310395,
            18309474,
            18309104,
            18322448,
            18311311,
            18310069,
            18313252,
            93169698,
            91285497,
            20188952,
            18318579,
            18308421,
            18311792,
            18307772,
            18311986,
            18308165,
            18323717,
            18309473,
            18312494
        ],
        "B": [
            18305109,
            18304731,
            18305069,
            18305817,
            18305879,
            18305478,
            18318612,
            18306119,
            18307273,
            18305717,
            54153853,
            54153852,
            54153523,
            54153520,
            18308586,
            18305117,
            18306452,
            18305702,
            18306808,
            18308328,
            18304898,
            18305913,
            18306422
        ],
        "A": [
            18302780,
            18302872,
            18302977,
            18303253,
            18302950,
            18302797,
            18317513,
            18303506,
            18302976,
            18303711,
            54152578,
            54152576,
            54152557,
            54152556,
            18306442,
            18302916,
            18303646,
            18303474,
            18304094,
            18302798,
            18302792,
            18304079,
            18303143
        ]
    },
    "name": "A. Bear and Five Cards",
    "statement": "A little bear Limak plays a game. He has five cards. There is one number\r\nwritten on each card. Each number is a positive integer.Limak can\r\ndiscard (throw out) some cards. His goal is to minimize the sum of\r\nnumbers written on remaining (not discarded) cards.He is allowed to\r\ndiscard two or three cards with the same number. Of course, he won’t\r\ndiscard cards if it’s impossible to choose two or three cards with the\r\nsame number.Given five numbers written on cards, cay you find the\r\nminimum sum of numbers on remaining cards?\r\n",
    "solutions": [
        "#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <cstdio>\n#include <string>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<b;++i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n\nint sum[110] , x;\nint main(){\n    int all = 0;\n    rep(i,0,5) cin >> x , sum[x]++ , all += x;\n    int Max = 0;\n    rep(x,1,101) if(sum[x] >= 2) Max = max(Max , min(3 ,sum[x]) * x);\n    cout << all - Max << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Bear and Five Cards.json",
    "editorial_link": "https://codeforces.com//blog/entry/45310",
    "editorial": "Iterate over all pairs and triples of numbers, and for each of them\r\ncheck if all two/three numbers are equal. If yes then consider the sum\r\nof remaining numbers as the answer (the final answer will be the minimum\r\nof considered sums). Below you can see two ways to implement the\r\nsolution. code1\r\n",
    "hint": []
}