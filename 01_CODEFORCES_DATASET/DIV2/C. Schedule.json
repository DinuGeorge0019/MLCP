{"link": "https://codeforces.com//contest/31/problem/C", "problemId": "146", "problem_idx": "C", "shortId": "31C", "contest_number": "31", "problem_submissions": {"E": [134876, 134644, 134848, 134248, 135579], "D": [134485, 133596, 134295, 134196, 134946, 134425, 134440, 134597, 134581, 134770, 134731, 134788, 134711, 135223, 134329, 136009, 136008, 135064], "C": [134168, 134002, 133803, 133545, 134363, 133957, 133783, 133977, 134075, 133915, 134271, 134272, 134280, 134218, 133534, 134400], "B": [133252, 133258, 133180, 135478, 133631, 133324, 133519, 133415, 134235, 133789, 133861, 134099, 133348, 133444], "A": [132701, 132899, 132718, 132766, 132790, 133118, 132713, 132712, 132770, 953988, 757270, 132738, 133121, 133401, 133529, 132807, 132719, 132830]}, "name": "C. Schedule", "statement": "At the beginning of the new semester there is new schedule in the\r\nBerland State University. According to this schedule, groups have\r\nlessons at the room 31. For each group the starting time of the lesson\r\nand the finishing time of the lesson are known. It has turned out that\r\nit is impossible to hold all lessons, because for some groups periods of\r\ntheir lessons intersect. If at some moment of time one groups finishes\r\nit\u2019s lesson, and the other group starts the lesson, their lessons don\u2019t\r\nintersect.The dean wants to cancel the lesson in one group so that no\r\ntwo time periods of lessons of the remaining groups intersect. You are\r\nto find all ways to do that.\r\n", "solutions": ["#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nconst int MAXN = 1000010 + 1;\n\nclass TreeArray {\npublic:\n\tint n, treeAr[MAXN];\n\n\tinline void init(int n0) {\n\t\tn = n0;\n\t\tmemset(treeAr, 0, sizeof(int) * (n + 1));\n\t}\n\n\tinline void editValue(int x, int value) {\n\t\tfor (int i = x; i <= n; i += i & -i) treeAr[i] += value;\n\t}\n\n\tinline int calcSum(int x) {\n\t\tint ret = 0;\n\t\tfor (int i = x; i > 0; i &= i - 1) ret += treeAr[i];\n\t\treturn ret;\n\t}\n};\n\nconst int MAXM = 5050 + 1;\n\nTreeArray ta;\nint n, x[MAXM], y[MAXM], sum[MAXN];\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) scanf(\"%d%d\", &x[i], &y[i]);\n\tint m = *max_element(y, y + n);\n\tta.init(m);\n\tfor (int i = 0; i < n; i++) {\n\t\tta.editValue(x[i], 1);\n\t\tta.editValue(y[i], -1);\n\t}\n\tfor (int i = 1; i <= m; i++) sum[i] = ta.calcSum(i);\n\tint mmin = m + 1, mmax = 0;\n\tbool flag = true;\n\tfor (int i = 1; i <= m; i++) {\n\t\tint value = sum[i];\n//printf(\"value[%d] = %d\\n\", i, value);\n\t\tif (value > 2) {\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t\tif (value == 2) {\n\t\t\tmmin = min(mmin, i);\n\t\t\tmmax = max(mmax, i);\n\t\t}\n\t}\n//printf(\"mmin = %d mmax = %d\\n\", mmin, mmax);\n\tif (!flag) puts(\"0\");\n\telse if (mmin == m + 1) {\n\t\tprintf(\"%d\\n1\", n);\n\t\tfor (int i = 2; i <= n; i++) printf(\" %d\", i);\n\t\tputchar('\\n');\n\t} else {\n\t\tint cnt = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (x[i] <= mmin && mmax < y[i]) cnt++;\n\t\t}\n\t\tprintf(\"%d\\n\", cnt);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (x[i] <= mmin && mmax < y[i]) printf(\"%d \", i + 1);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["implementation"], "dificulty": "1700", "interactive": false}