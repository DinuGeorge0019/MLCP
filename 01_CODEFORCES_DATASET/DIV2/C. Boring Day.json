{
    "link": "https://codeforces.com//contest/1982/problem/C",
    "problemId": "2717388",
    "problem_idx": "C",
    "shortId": "1982C",
    "contest_number": "1982",
    "problem_submissions": {
        "F": [
            267371295,
            267368983,
            267386192,
            267383481,
            267392812,
            267381747,
            267380349,
            267448537,
            267389268,
            267391412,
            267465375,
            267464196,
            267398754,
            267397907,
            267394247,
            267400370,
            267398779,
            267402058,
            267403186,
            267394811,
            267400611,
            267395899,
            267401217
        ],
        "E": [
            267356282,
            267356215,
            267370786,
            267372088,
            267363741,
            267371679,
            267383797,
            267376185,
            267367589,
            267367768,
            267377973,
            267379190,
            267379180,
            267375802,
            267376857,
            267377392,
            267370644,
            267387467,
            267382680,
            267383608
        ],
        "D": [
            267346551,
            267374785,
            267348133,
            267346019,
            267349259,
            267353213,
            267344889,
            267351505,
            267357173,
            267352582,
            267348135,
            267356257,
            267354124,
            267361818,
            267348920,
            267361280,
            267376940,
            267358334,
            267368263,
            267363956
        ],
        "C": [
            267340189,
            267360218,
            267340523,
            267338463,
            267344601,
            267345277,
            267337376,
            267446413,
            267343870,
            267348671,
            267345336,
            267334950,
            267349986,
            267345653,
            267351831,
            267339030,
            267352675,
            267359528,
            267350804,
            267359049,
            267348772
        ],
        "B": [
            267337179,
            267335525,
            267333706,
            267334809,
            267331361,
            267341628,
            267345760,
            267336279,
            267343504,
            267333937,
            267331022,
            267335181,
            267340882,
            267340337,
            267334531,
            267343773,
            267346672,
            267347539,
            267353296,
            267342437
        ],
        "A": [
            267328525,
            267326985,
            267328071,
            267327102,
            267327552,
            267328303,
            267347395,
            267326942,
            267331875,
            267328032,
            267327692,
            267327319,
            267328382,
            267327600,
            267327418,
            267330803,
            267331257,
            267327782,
            267348137,
            267328398
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/130839",
    "editorial": "Solution 1:Let the maximum number of rounds won by Egor for the first\r\nelements (top cards). It is possible to come up with a solution in right\r\nnow. For each state of the dynamic programming , you can either skip the\r\nnext card (not take it in any winning segment), or iterate over the\r\nlength of the segment that will start with the next card. If you\r\ncalculate prefix sums and compute the sum over a segment in , the\r\nsolution works exactly in .Letâs try to optimize the transitions in such\r\na dynamic.First, it can be noticed that all are positive, which means\r\nthat the sum of the segment will be less than . This means that the\r\nfirst suitable segment (with a sum ) can be found using binary search or\r\ntwo pointers.Secondly, if the segment has a suitable sum (from to ), it\r\ndoes not make sense to increase its length, as this can only worsen the\r\nanswer.Thus, for each state of the dynamic programming, there are only\r\ntransitions, so the entire problem can be solved in or .Solution 2:Letâs\r\ntry to solve the problem greedily. Letâs look for a segment in the\r\nprefix such that the sum of all its elements is not less than and not\r\ngreater than , and among all such segments, we will take the segment\r\nwith the minimum . After that, we will consider that the array starts\r\nfrom the -th element and continue to search for the next segment in the\r\nsame way.How to find ? Letâs start by finding the minimum prefix (which\r\nis also the segment ) such that the sum of the elements in it is . If\r\nthis sum is also not greater than , then this prefix is the segment we\r\nneed . Otherwise, we know that the sum of the elements in any subsegment\r\nof this prefix that does not contain the last element is less than , so\r\nwe can try to find a subsegment that ends at , for this, we can iterate\r\nover the left boundary from to . At the same time, the sum of the\r\nelements in the iterated segment will decrease and it may happen again\r\nthat at some point it becomes , in this case, we already know that we\r\nwill not find the required segment with the right boundary , so it needs\r\nto be increased (again until the sum becomes ). By repeating these\r\nactions, we will either find the required segment , or the right\r\nboundary will become equal to . The algorithm is nothing but \"two\r\npointers\", we keep two boundaries and and move them only to the right,\r\nso in total, this all works in .\r\n",
    "name": "C. Boring Day",
    "statement": "On another boring day, Egor got bored and decided to do something. But\r\nsince he has no friends, he came up with a game to play.Egor has a deck\r\nof n cards, the i-th card from the top has a number a_i written on it.\r\nEgor wants to play a certain number of rounds until the cards run out.\r\nIn each round, he takes a non-zero number of cards from the top of the\r\ndeck and finishes the round. If the sum of the numbers on the cards\r\ncollected during the round is between l and r, inclusive, the round is\r\nwon; otherwise, it is lost. Egor knows by heart the order of the cards.\r\nHelp Egor determine the maximum number of rounds he can win in such a\r\ngame. Note that Egor is not required to win rounds consecutively.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std; #define ar array#define sz(v) int(v.size())typedef long long ll; void solve() {    int N,l,r;    cin>>N>>l>>r;    vector<int> a(N);    vector<ll> ps(N+1);    for (int i=0; i<N; i++) {        cin>>a[i];        ps[i+1]=ps[i]+a[i];    }    vector<int> dp(N+1);    for (int i=1; i<=N; i++) {        dp[i]=dp[i-1];        int low=0, hi=i-1;        while (low<hi) {            int m=(low+hi)/2+1;            ps[i]-ps[m]>=l?low=m:hi=m-1;        }        if (ps[i]-ps[low]>=l&&ps[i]-ps[low]<=r) {            dp[i]=max(dp[i],dp[low]+1);        }    }    cout<<dp[N]<<'\\n';} int main() {    ios::sync_with_stdio(0); cin.tie(0);    int T=1;    cin>>T;    while (T--) solve();}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "dp",
        "greedy",
        "two pointers"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Boring Day.json",
    "hint": [
        "Hint 1 All the numbers are positive, can it help somehow?",
        "Hint 2 Try using dynamic programming."
    ]
}