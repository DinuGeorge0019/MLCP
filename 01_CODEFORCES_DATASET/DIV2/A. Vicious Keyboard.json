{"link": "https://codeforces.com//contest/801/problem/A", "problemId": "103100", "problem_idx": "A", "shortId": "801A", "contest_number": "801", "problem_submissions": {"E": [26431268, 26432380, 26476783, 26433724, 26434229, 26480642, 26480548, 26480348, 26494890, 26761813, 26448700, 26891853], "D": [26425044, 26425418, 26424442, 26425844, 26427999, 26423648, 26424386, 26426466, 26425527, 26426325, 26426061, 26426569, 26423135, 26426063, 26426145, 26426707, 26427444, 26427659, 26427813, 26428417], "C": [26421077, 26426753, 26422126, 26422964, 26424591, 26421294, 26422383, 26423910, 26421299, 26422965, 26423300, 26464547, 26464488, 26464472, 26462113, 26461839, 26423489, 26427796, 26421258, 26423212, 26423423, 26423078, 26423800, 26424484, 26424083], "B": [26417032, 26418855, 26417051, 26418098, 26418064, 26417323, 26417757, 26418046, 26417670, 26419595, 26417736, 26418294, 26418039, 26417940, 26419935, 26419134, 26418085, 26419132, 26418680, 26417887], "A": [26416465, 26416667, 26416492, 26416663, 26416642, 26416740, 26416470, 26416681, 26416514, 26418065, 26416666, 26417060, 26416564, 26416805, 26418618, 26417312, 26416869, 26417305, 26416921, 26416811]}, "name": "A. Vicious Keyboard", "statement": "Tonio has a keyboard with only two letters, \"\" and \"\".One day, he has\r\ntyped out a string with only these two letters. He really likes it when\r\nthe string \"\" appears, so he wishes to change at most one letter in the\r\nstring (or do no changes) to maximize the number of occurrences of that\r\nstring. Compute the maximum number of times \"\" can appear as a substring\r\n(i. e. a letter \"\" right after a letter \"\") in the resulting string.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nstring s;\nint main(){\n    cin >> s;\n    int ans = 0;\n    if (s.size() == 1){\n      cout << 0;\n      return 0;\n    }\n    for(int i=0;i<(int)s.size()-1;i++){\n      ans += (s[i] == 'V' && s[i+1] == 'K');\n    }\n    for(int p=0;p<s.size();p++){\n      s[p] = 'V' + 'K' - s[p];\n      int res = 0;\n      for(int i=0;i<(int)s.size()-1;i++){\n         res += (s[i] == 'V' && s[i+1] == 'K');\n      }\n      ans = max(ans, res);\n      s[p] = 'V' + 'K' - s[p];\n    }\ncout << ans;\n}\n"], "input": "", "output": "", "tags": ["brute force"], "dificulty": "1100", "interactive": false}