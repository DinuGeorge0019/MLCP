{
    "link": "https://codeforces.com//contest/1011/problem/A",
    "problemId": "201796",
    "problem_idx": "A",
    "shortId": "1011A",
    "contest_number": "1011",
    "problem_submissions": {
        "F": [
            40800201,
            40801277,
            40801569,
            40804449,
            40805451,
            40806381,
            40806507,
            40806310,
            40805970,
            40801054,
            40808416,
            40809060,
            40810276,
            40808095,
            40807771,
            40805521,
            40807827,
            40807284,
            40807855,
            40804155
        ],
        "D": [
            40796440,
            40794546,
            40792902,
            40795417,
            40799478,
            40795262,
            40794405,
            40796227,
            40796647,
            40805819,
            40795341,
            40796956,
            40801974,
            40796562,
            40798015,
            40809194,
            40797770,
            40797730,
            40793882,
            40809940
        ],
        "E": [
            40792792,
            40796201,
            40795409,
            40798197,
            40794994,
            40796957,
            40798403,
            40799143,
            40799952,
            40795325,
            40797016,
            40792367,
            40793560,
            40799595,
            40800280,
            40796773,
            40803072,
            40801776,
            40801515,
            40795493
        ],
        "C": [
            40790603,
            40791320,
            40791211,
            40789571,
            40790418,
            40791673,
            40790329,
            40790847,
            40793263,
            40794440,
            40790415,
            40800020,
            40790652,
            40792667,
            40793177,
            40791559,
            40792533,
            40792592,
            40791239,
            40793128
        ],
        "B": [
            40785822,
            40786932,
            40787686,
            40786118,
            40785902,
            40788647,
            40785329,
            40786729,
            40785415,
            40788241,
            40792014,
            40785807,
            40787536,
            40787785,
            40787832,
            40786142,
            40787154,
            40790376,
            40787972,
            40786283
        ],
        "A": [
            40783703,
            40785050,
            40784061,
            40783967,
            40783664,
            40784798,
            40783422,
            40784073,
            40783746,
            40785817,
            40785710,
            40783675,
            40784732,
            40784635,
            40786064,
            40783474,
            40783765,
            40785159,
            40784090,
            40783568
        ]
    },
    "name": "A. Stages",
    "statement": "Natasha is going to fly to Mars. She needs to build a rocket, which\r\nconsists of several stages in some order. Each of the stages is defined\r\nby a lowercase Latin letter. This way, the rocket can be described by\r\nthe string concatenation of letters, which correspond to the\r\nstages.There are n stages available. The rocket must contain exactly k\r\nof them. Stages in the rocket should be ordered by their weight. So,\r\nafter the stage with some letter can go only stage with a letter, which\r\nis at least two positions after in the alphabet (skipping one letter in\r\nbetween, or even more). For example, after letter ” can’t go letters ”,\r\n”, ” and ”, but can go letters ”, ”, ..., ”.For the rocket to fly as far\r\nas possible, its weight should be minimal. The weight of the rocket is\r\nequal to the sum of the weights of its stages. The weight of the stage\r\nis the number of its letter in the alphabet. For example, the stage ’\r\n’weighs one ton,’ ’weighs two tons, and’ ’ 26 tons.Build the rocket with\r\nthe minimal weight or determine, that it is impossible to build a rocket\r\nat all. Each stage can be used at most once.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\nchar str[100];\n\nint main() {\n  int n,k;\n  scanf(\"%d%d\",&n,&k);\n  scanf(\"%s\",str+1);\n  sort(str+1,str+n+1);\n  int s=0,x=1,cnt=0;\n  while (x<=n&&cnt<k) {\n  \tcnt++;\n  \ts+=str[x]-'a'+1;\n  \tchar c=str[x];\n  \tfor(;x<=n&&str[x]-c<2;x++);\n  }\n  printf(\"%d\\n\",(cnt<k)?-1:s);\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Stages.json",
    "editorial_link": "https://codeforces.com/blog/entry/60851",
    "editorial": "The problem can be solved by the following greedy algorithm.Sort letters\r\nin increasing order. Letâs try to add letters in this order. If the\r\ncurrent letter is the first in the string, then add it to the answer.\r\nOtherwise, check: if the current letter is at least two positions later\r\nin the alphabet than the previous letter of the answer, add it to the\r\nresponse, otherwise go over to the next letter.As soon as there are k\r\nletters in the answer, print it. If after this algorithm the answer has\r\nless than k letters, print .Complexity: O(n\r\nlog n).\r\n",
    "hint": []
}