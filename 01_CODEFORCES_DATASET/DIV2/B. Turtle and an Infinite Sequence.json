{
    "link": "https://codeforces.com//contest/1981/problem/B",
    "problemId": "2672990",
    "problem_idx": "B",
    "shortId": "1981B",
    "contest_number": "1981",
    "problem_submissions": {
        "F": [
            263497142,
            263559226
        ],
        "E": [
            263476287,
            263464534,
            263479972,
            263479996,
            263481278,
            263484948,
            263487311,
            263488586,
            263490466,
            263488413,
            263485273,
            263486361,
            263491158,
            263492494,
            263487751,
            263490431,
            263594935,
            263475669,
            263731983
        ],
        "D": [
            263469280,
            263482604,
            263470136,
            263467974,
            263476735,
            263476815,
            263475122,
            263473573,
            263468370,
            263465514,
            263477018,
            263481941,
            263480436,
            263478668,
            263478475,
            263485875,
            263469409,
            263472129,
            263470882
        ],
        "C": [
            263456919,
            263468416,
            263459011,
            263454953,
            263461770,
            263457891,
            263464609,
            263463038,
            263456449,
            263472358,
            263463129,
            263464204,
            263463482,
            263460745,
            263470157,
            263458930,
            263460066,
            263458494,
            263461448
        ],
        "B": [
            263449078,
            263456587,
            263450957,
            263448611,
            263450566,
            263450086,
            263449888,
            263451971,
            263448293,
            263451226,
            263454153,
            263455701,
            263455723,
            263449188,
            263455405,
            263451294,
            263451169,
            263449953,
            263456283
        ],
        "A": [
            263445832,
            263446092,
            263445924,
            263445701,
            263447399,
            263445953,
            263446026,
            263448629,
            263445764,
            263445931,
            263446308,
            263445723,
            263447638,
            263446507,
            263449757,
            263445656,
            263446328,
            263445901,
            263446447
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129848",
    "editorial": "Each bit of the answer is independent, so we can calculate the value of\r\neach bit of the answer separately.Letâs consider the -th bit. Then,\r\n.Every second, a will \"spread\" one position to the left and right.If is\r\ninitially , then the answer for this bit is .Otherwise, is in a\r\ncontinuous segment of s, and we need to calculate whether the s on the\r\nleft and right of this segment can \"spread\" to . Let , then . The left\r\nspreading to takes seconds, and the right spreading to takes seconds.\r\nTherefore, if , then can become . Specifically, if , then there is no on\r\nthe left. Therefore, in this case, if , then can become .Time\r\ncomplexity: per test case.\r\n",
    "name": "B. Turtle and an Infinite Sequence",
    "statement": "There is a sequence a_0, a_1, a_2,\r\nldots of infinite length. Initially a_i = i for every non-negative\r\ninteger i.After every second, each element of the sequence will change.\r\na_i will change to a_{i - 1}\r\nmid a_i\r\nmid a_{i + 1} for every positive integer i. a_0 will change to a_0\r\nmid a_1. Here, | denotes bitwise OR.Turtle is asked to find the value of\r\na_n after m seconds. In particular, if m = 0, then he needs to find the\r\ninitial value of a_n. He is tired of calculating so many values, so\r\nplease help him!\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define LL long long#define LLL __int128#define uint unsigned#define ldb long double#define uLL unsigned long longusing namespace std;inline int qpow(int x,int y,int Mod,int z=1){\tfor(;y;(y>>=1)&&(x=(LL)x*x%Mod))if(y&1)z=(LL)z*x%Mod;return z;}inline void MAIN(){\tint n,m;cin>>n>>m;\tLL l=max(0,n-m),r=n+m;\tfor(LL i=1ll<<32;i;i>>=1)if((l&i)!=(r&i))return cout<<(r|(i-1))<<'\\n',void();\tcout<<l<<'\\n';}signed main(){    cin.tie(0)->sync_with_stdio(0);\tint t=1;cin>>t;while(t--)MAIN();    return 0;}/**/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Turtle and an Infinite Sequence.json",
    "hint": [
        "Hint 1 Consider each bit separately.",
        "Hint 2 Calculate the time when the -th bit of becomes ."
    ]
}