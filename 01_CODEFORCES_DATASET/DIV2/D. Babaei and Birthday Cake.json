{
    "link": "https://codeforces.com//contest/629/problem/D",
    "problemId": "48979",
    "problem_idx": "D",
    "shortId": "629D",
    "contest_number": "629",
    "problem_submissions": {
        "E": [
            16243210,
            16242894,
            16246160,
            16254693,
            16246007,
            16245862,
            16244672,
            16242439,
            16242471,
            16258760,
            16243275,
            16248006
        ],
        "C": [
            16240352,
            16245370,
            16241705,
            16242440,
            16239928,
            16244882,
            16239964,
            16237682,
            16237279,
            16238555,
            16240653,
            16241020,
            16238564,
            16239658,
            16239634
        ],
        "D": [
            16239018,
            16239572,
            16235953,
            16238851,
            16241535,
            16240168,
            16238831,
            16236923,
            16236354,
            16239430,
            16240177,
            16240027,
            16239268,
            16236114,
            16247725,
            16240713,
            16264201,
            16261091,
            16260254,
            16241789
        ],
        "B": [
            16234677,
            16235476,
            16237727,
            16234525,
            16235367,
            16236730,
            16234379,
            16237767,
            16237135,
            16233315,
            16234172,
            16233262,
            16234095,
            16233764,
            16235011,
            16233668
        ],
        "A": [
            16232727,
            16233109,
            16236608,
            16232783,
            16233137,
            16233465,
            16232870,
            16238509,
            16232645,
            16232640,
            16233626,
            16232665,
            16232698,
            16232767,
            16233370,
            16232800
        ]
    },
    "name": "D. Babaei and Birthday Cake",
    "statement": "As you know, every birthday party has a cake! This time, Babaei is going\r\nto prepare the very special birthday party\u2019s cake. is a cylinder of some\r\nradius and height. The volume of the simple cake is equal to the volume\r\nof corresponding cylinder. Babaei has simple cakes and he is going to\r\nmake a placing some cylinders on each other.However, there are some\r\nadditional culinary restrictions. The cakes are numbered in such a way\r\nthat the cake number can be placed only on the table or on some cake\r\nnumber where . Moreover, in order to impress friends Babaei will put the\r\ncake on top of the cake only if the volume of the cake is strictly\r\ngreater than the volume of the cake .Babaei wants to prepare a birthday\r\ncake that has a maximum possible total volume. Help him find this value.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\n\n#define pb push_back\n#define ll long long\n#define mp make_pair\n#define f first\n#define s second\n#define pii pair < int, int >\n#define pll pair < ll, ll >\n#define all(s) s.begin(), s.end()\n#define sz(s) (int) s.size()\n#define vi vector < int >\n\nconst int inf = (int)1e9;\nconst int mod = (int) 1e9 + 7;\n\nll a[100100];\nvector < pll > v;\nint pos[100100];\n\nint n;\nint R[100100];\nint H[100100];\nll t[1000100];\nll get(int v, int l, int r, int tl, int tr){\n\tif(tl > tr) return 0;\n\tif(l == tl && tr == r) return t[v];\n\tint mid = (l + r) >> 1;\n\treturn max(get(v * 2, l, mid, tl, min(tr, mid)), get(v * 2 + 1, mid + 1, r, max(tl, mid+1), tr));\n}\nvoid upd(int v, int l, int r, int pos, ll val){\n\tif(l==r){\n\t\tt[v] = val;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(pos<=mid){\n\t\tupd(v * 2, l, mid, pos, val);\n\t}\n\telse upd(v * 2 + 1, mid+1, r, pos, val);\n\tt[v] = max(t[v*2], t[v*2+1]);\n}\nint main () {\n    #ifdef LOCAL\n    freopen (\"a.in\", \"r\", stdin);\n    freopen (\"a.out\", \"w\", stdout);\n    #endif\n    cin >> n;\n    for(int i = 0; i < n; i++){\n    \tcin >> R[i] >> H[i];\n    \ta[i] = R[i] * 1ll * R[i] * 1ll * H[i];\n    \tv.pb(mp(a[i], -i));\n    }\n    sort(all(v));\n    for(int i = 0; i < n; i++){\n    \tpos[-v[i].s] = i;\n    }\n    for(int i = 0; i < n; i++){\n    \tll cur = get(1, 0, n-1, 0, pos[i]);\n    \tupd(1, 0, n-1, pos[i], cur + a[i]);\n    }\n    printf(\"%.12lf\\n\", acos(-1) * 1.0 * get(1, 0, n-1, 0, n-1));\n\n\n\n    #ifdef LOCAL\n    cerr << 1.0 * clock() / CLOCKS_PER_SEC << \" s.\\n\";\n    #endif\n    return 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Babaei and Birthday Cake.json",
    "editorial_link": "https://codeforces.com//blog/entry/43227",
    "editorial": "First of all, we calculate the volume of each cake: = . Now consider the\r\nsequence , , , ..., : The answer to the problem is the maximum sum of\r\nelements between all increasing sub-sequences of this sequence. How do\r\nwe solve this? First to get rid of the decimals we can define a new\r\nsequence , , , ..., such that We consider as the maximum sum between all\r\nthe sequences which end with and = The answer to the problem is: Now how\r\ndo we calculate ? We use a max-segment tree which does these two\r\noperations: . Change the member to . . Find the maximum value in the\r\ninterval to . Now we use this segment tree for the array and find the\r\nanswer. Consider that , , , ..., is sorted. We define as the position of\r\n. Now to fill we find the maximum in the interval in segment and we call\r\nit and we set the th index of the segment as . The answer to the problem\r\nwould the maximum in the segment in the interval [1,n] Time complexity:\r\nThanks to ATofighi who helped a lot for writing the editorial of problem\r\nD. C++ Solution\r\n"
}