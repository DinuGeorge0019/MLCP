{
    "link": "https://codeforces.com//contest/106/problem/E",
    "problemId": "561",
    "problem_idx": "E",
    "shortId": "106E",
    "contest_number": "106",
    "problem_submissions": {
        "E": [
            624494,
            621382,
            621302,
            1028967
        ],
        "B": [
            2851079,
            616301,
            616392,
            616823,
            616526,
            615744,
            616740,
            616327,
            616298,
            616165,
            616707,
            616308,
            616319,
            616401,
            616575
        ],
        "D": [
            618542,
            618462,
            619420,
            618678,
            618906,
            618952,
            618136,
            618460,
            618603,
            618015,
            618966,
            618832,
            619376,
            618535
        ],
        "C": [
            617158,
            617296,
            617911,
            617244,
            617544,
            617983,
            617181,
            617500,
            617204,
            619254,
            617295,
            617239,
            617595,
            617116
        ],
        "A": [
            615823,
            615814,
            616171,
            615840,
            616585,
            616009,
            615802,
            615745,
            615738,
            615793,
            615640,
            615790,
            615820,
            618361
        ]
    },
    "name": "E. Space Rescuers",
    "statement": "The Galaxy contains planets, there are many different living creatures\r\ninhabiting each planet. And each creature can get into troubles! Space\r\nrescuers know it perfectly well and they are always ready to help anyone\r\nwho really needs help. All you need to do is call for them. Now the\r\nspace rescuers plan to build the largest in the history of the Galaxy\r\nrescue station; however, the rescue station’s location is yet to be\r\ndetermined. As some cases are real emergencies, the rescuers want to\r\nfind such a point in the Galaxy from which it would be possible to get\r\nto the remotest planet in the minimum possible time. In other words, the\r\nrescuers need such point in the space that the distance between it and\r\nthe planet remotest from it was minimal (if we compare this point with\r\nall other possible points in the space). Unfortunately, the rescuers\r\ncan’t sole this problem.As the planets are quite remote from each other,\r\nthey can be considered as points in Euclidean three-dimensional space.\r\nThe distance between points and can be calculated by the formula . The\r\nrescue station can be positioned in any point in the space. It can also\r\ncoincide with some planet. Galaxy is in danger! Save the space rescuers\r\nand find the required point for them.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\ndouble p[100][3], w[2][3];\nconst double EPS = 1e-6;\nconst double PHI = 1.6180339887;\nint  n;\ninline double max(double a, double b) {\n    return a > b ? a : b;\n}   \n\ninline double f() {\n    double result = .0, current = .0;\n    int i, j;\n    for (i = 0; i < n; ++i) {\n        current = 0;\n        for (j = 0; j  < 3; ++j) {\n            current += pow(w[0][j] - p[i][j], 2.0);\n        }\n        result = max(result, current);\n    }\n    return result;\n}   \n\ninline double g() {\n    double result = .0, current = .0;\n    int i, j;\n    for (i = 0; i < n; ++i) {\n        current = 0;\n        for (j = 0; j  < 3; ++j) {\n            current += pow(w[1][j] - p[i][j], 2.0);\n        }\n        result = max(result, current);\n    }\n    return result;\n}   \n\ninline double go(int coordinate) {\n    if (coordinate == 3) {\n        double fR = f(), gR = g();\n        if (gR < fR) {\n            memcpy(w[0], w[1], 24);\n        }\n        return gR;\n    } else {\n        double l = -1e4, r = 1e4, a, b, fA, fB, step;\n        while (l + EPS < r) {\n            step = (r - l) / 3;\n            a = l + step;\n            b = r - step;\n            w[1][coordinate] = a;\n            fA = go(1 + coordinate);\n            w[1][coordinate] = b;\n            fB = go(1 + coordinate);\n            if (fA < fB) {\n                r = b;\n            } else {\n                l = a;\n            }\n        }\n        w[1][coordinate] = (l + r) / 2;\n        return go(1 + coordinate);          \n    }\n}\n                    \n\nint main() {\n    int i, j;\n    scanf(\"%d\",&n);\n    for (i = 0; i < n; ++i) {\n        for (j = 0; j < 3; ++j) {\n            scanf(\"%lf\", &p[i][j]);\n        }\n    }\n    go(0);\n    for (i = 0; i < 3; ++i) {\n        printf(\"%.9lf \", w[0][i]);\n    }\n    return 0;\n}\n            "
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "ternary search"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Space Rescuers.json",
    "editorial_link": "https://codeforces.com//blog/entry/2493",
    "editorial": "\nIt works because the function is convex. Maximum of convex functions also convex function. Author not very well imagine convex function in 3 dimrnsions, therefore you can read following proof that algorithm is correct:\n\nLet consider some straight line. Function of distance between points on this line and planet position will be convex (you can imagine it). If you get maximum of such functions it will be convex function too. Let's call this function f1.\n\nNow let's consider flat plane and choose one straight line in it. Set for every point of this line a minumum of function f1 of line that passes through this point and is perpendicular to choosen line. Let's call function on this choosen line f2.\n\nf2 is convex. It can be easily proved by contrary. If f2 is not convex, we can find at least two local minimums. Let's choose two neighbour of them. We can find this two minimums on the plane and drawn through them new line. f1 on this line will be not convex (you also can imagine it). ?ontradiction.\n\nNow let's consider all space. Choose one line in it and define function f3 on it. Values of f3 will be minimums of functions f2 of planes that passes through the line and is perpendicular to it. f3 also is convex. Proof of it is analogically to that is written in the previous paragraph. []\n\nNow you can see that minimum can ge found by three ternary search over functions fi. You can add to these functions returning of value in which they reach a minimum.\n\nAlso there are solutions that uses idea of Gradient descent or Hill climbing. Author was unable to write this solution (not enough precision), but some participants got AC with such solutions.",
    "hint": []
}