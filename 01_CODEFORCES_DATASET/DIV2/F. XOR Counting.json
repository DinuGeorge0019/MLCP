{"link": "https://codeforces.com//contest/1816/problem/F", "problemId": "1871643", "problem_idx": "F", "shortId": "1816F", "contest_number": "1816", "problem_submissions": {"F": [201571165, 201575603], "E": [201540535, 201521580, 201552172, 201540274, 201551497, 201560232, 201559664, 201557564, 201560804, 201563162, 201561880, 201537774, 201526707, 201515322, 201535371, 201540257, 201545215], "D": [201526272, 201555297, 201531457, 201549839, 201530007, 201538289, 201538409, 201545276, 201541091, 201540016, 201546751, 201561431], "C": [201502393, 201505622, 201493541, 201488761, 201501981, 201485106, 201492364, 201508062, 201504590, 201507370, 201512800, 201550313, 201501935, 201545685, 201512228, 201507426, 201505339], "B": [201495797, 201498113, 201488843, 201489011, 201486184, 201503986, 201518658, 201489822, 201495126, 201490303, 201498690, 201494781, 201494291, 201504455, 201496973, 201494497, 201495296], "A": [201482599, 201481556, 201482965, 201480957, 201481143, 201486345, 201502905, 201481407, 201481488, 201481674, 201480959, 201483748, 201481910, 201493735, 201483634, 201482175, 201488121]}, "name": "F. XOR Counting", "statement": "Given two positive integers n and m. Find the sum of all possible values\r\nof a_1\r\nbigoplus a_2\r\nbigoplus\r\nldots\r\nbigoplus a_m, where a_1,a_2,\r\nldots,a_m are non-negative integers such that a_1+a_2+\r\nldots+a_m=n.Note that all possible values a_1\r\nbigoplus a_2\r\nbigoplus\r\nldots\r\nbigoplus a_m should be counted in the sum .As the answer may be too\r\nlarge, output your answer modulo 998244353.Here,\r\nbigoplus denotes the bitwise XOR operation.\r\n", "solutions": ["//\n//  main.cpp\n//  F\n//\n//  Created by Thomas Guo on 2023-04-09.\n//\n\n#include <iostream>\n#include <unordered_map>\n#define ll long long\n#define pll pair<ll, ll>\n#define mp make_pair\n#define MOD 998244353\nusing namespace std;\nunordered_map<ll, pll>dp;\npll solve(ll n){// returns a pair (sum, cnt)\n    if(dp.find(n) != dp.end()){\n        return dp[n];\n    }\n    if(n == 0){\n        return dp[n] = mp(0, 1);\n    }\n    if(n & 1){\n        pll nxt = solve(n/2);\n        return dp[n] = mp((nxt.first * 2) % MOD, nxt.second);\n    }\n    pll nxt0 = solve(n/2);\n    pll nxt1 = solve((n/2)-1);\n    ll cnt = nxt0.second + nxt1.second;cnt %= MOD;\n    ll sum = ((nxt0.first * 2) % MOD) + ((nxt1.first * 2) % MOD) + nxt1.second;\n    sum %= MOD;\n    return dp[n] = mp(sum, cnt);\n}\nint main(){\n    int t;cin>>t;\n    while(t--){\n        ll n,m;cin>>n>>m;\n        if(m == 1){\n            cout<<n%MOD<<\"\\n\";\n        }\n        else if(m == 2){\n            // find all possible k = a1 & a2\n            // we need ((n-k) & k) == k\n            pll solved = solve(n);\n            ll ans = (solved.second % MOD) * (n % MOD) - ((solved.first * 2) % MOD);\n            ans %= MOD;\n            ans += MOD;\n            ans %= MOD;\n            cout<<ans<<\"\\n\";\n        }\n        else{\n            if(n % 2 == 1){\n                ll sqrt = (n+1)/2;\n                sqrt %= MOD;\n                ll ans = sqrt * sqrt;\n                ans %= MOD;\n                cout<<ans<<\"\\n\";\n            }\n            else{\n                ll sqrt = n/2;\n                sqrt %= MOD;\n                ll ans = sqrt * (sqrt + 1);\n                ans %= MOD;\n                cout<<ans<<\"\\n\";\n            }\n        }\n    }\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["combinatorics", "dp", "math"], "dificulty": "2600", "interactive": false}