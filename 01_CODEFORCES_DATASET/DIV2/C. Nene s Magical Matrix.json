{
    "link": "https://codeforces.com//contest/1956/problem/C",
    "problemId": "2588543",
    "problem_idx": "C",
    "shortId": "1956C",
    "contest_number": "1956",
    "problem_submissions": {
        "E2": [
            256586454,
            256520068,
            256593913,
            256584316,
            256530034,
            256531943,
            256617463,
            256530865,
            256802937,
            256648508,
            256552517
        ],
        "F": [
            256530495,
            256522758,
            256514971,
            256533550,
            256538415
        ],
        "E1": [
            256505148,
            256506481,
            256593956,
            256525162,
            256511611,
            256531463,
            256583839,
            256517737,
            256520564,
            256527984,
            256521079,
            256525566,
            256521334,
            256530001,
            256521675,
            256525396,
            256535359,
            256525874,
            256529271
        ],
        "D": [
            256490682,
            256484072,
            256499658,
            256496427,
            256507516,
            256497830,
            256509043,
            256518890,
            256503281,
            256502580,
            256513745,
            256510694,
            256502427,
            256508396,
            256502061,
            256511658,
            256506094,
            256504568,
            256506260,
            256504200
        ],
        "C": [
            256481140,
            256475175,
            256487231,
            256481616,
            256488132,
            256485599,
            256493794,
            256476985,
            256483699,
            256486860,
            256497932,
            256487782,
            256477155,
            256486111,
            256486350,
            256491079,
            256480941,
            256486971,
            256480982,
            256485785
        ],
        "B": [
            256472484,
            256473000,
            256480823,
            256472874,
            256473325,
            256479701,
            256477112,
            256472735,
            256473445,
            256477448,
            256476511,
            256477221,
            256472449,
            256475342,
            256477910,
            256471353,
            256472967,
            256472966,
            256473168,
            256475591
        ],
        "A": [
            256471122,
            256471242,
            256472786,
            256473979,
            256471107,
            256479866,
            256471283,
            256471128,
            256471039,
            256472531,
            256472351,
            256472781,
            256471086,
            256471438,
            256477739,
            256470907,
            256471074,
            256471160,
            256471053,
            256472375
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/128426",
    "editorial": "TutorialThe optimal matrix would be: Construction method: This takes\r\nexactly operations.\r\n",
    "name": "C. Nene s Magical Matrix",
    "statement": "The magical girl Nene has an n\r\ntimes n matrix a filled with zeroes. The j-th element of the i-th row of\r\nmatrix a is denoted as a_{i, j}.She can perform operations of the\r\nfollowing two types with this matrix: Type 1 operation: choose an\r\ninteger i between 1 and n and a permutation p_1, p_2,\r\nldots, p_n of integers from 1 to n. Assign a_{i, j}:=p_j for all 1\r\nle j\r\nle n simultaneously. Type 2 operation: choose an integer i between 1 and\r\nn and a permutation p_1, p_2,\r\nldots, p_n of integers from 1 to n. Assign a_{j, i}:=p_j for all 1\r\nle j\r\nle n simultaneously. Nene wants to maximize the sum of all the numbers\r\nin the matrix\r\nsum\r\nlimits_{i=1}^{n}\r\nsum\r\nlimits_{j=1}^{n}a_{i,j}. She asks you to find the way to perform the\r\noperations so that this sum is maximized. As she doesn\u2019t want to make\r\ntoo many operations, you should provide a solution with no more than 2n\r\noperations.A permutation of length n is an array consisting of n\r\ndistinct integers from 1 to n in arbitrary order. For example,\r\n[2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2\r\nappears twice in the array), and [1,3,4] is also not a permutation (n=3\r\nbut there is 4 in the array).\r\n",
    "solutions": [
        "// Problem: C. Nene's Magical Matrix// Contest: Codeforces - Codeforces Round 939 (Div. 2)// URL: https://mirror.codeforces.com/contest/1956/problem/C// Memory Limit: 256 MB// Time Limit: 2000 ms// // Powered by CP Editor (https://cpeditor.org)\u00a0// Author: EnucAI#include <bits/stdc++.h>\u00a0#ifdef LOCAL#include \"debug.h\"#else#define D(...) ((void)0)#endif\u00a0using ll = long long;using ull = unsigned long long;using ld = long double;using vi = std::vector<int>;using pii = std::pair<int, int>;\u00a0constexpr int inf = std::numeric_limits<int>::max() / 2;constexpr ll infll = std::numeric_limits<ll>::max() / 2;constexpr ld eps = 1e-8l;\u00a0#define all(x) (x).begin(), (x).end()#define sz(x) ((int)((x).size()))#define rep(i, j, k) for (int i = (j); i <= (k); i++)#define per(i, j, k) for (int i = (j); i >= (k); i--)#define fi first#define se second#define mp std::make_pair#define pb push_back#define ppb pop_back#define eb emplace_back\u00a0template <class X, class Y> void chkmax(X &x, const Y &y) { if (x < y) x = y; }template <class X, class Y> void chkmin(X &x, const Y &y) { if (x > y) x = y; }\u00a0constexpr int maxn = 500 + 5;\u00a0int n, a[maxn];\u00a0void solve() {  std::cin >> n;  int s = 0;  rep(i, 1, n) {    s += i * (2 * i - 1);  }  std::cout << s << ' ' << n * 2 << '\\n';  per(i, n, 1) rep(o, 1, 2) {    std::cout << o << ' ' << i << ' ';    rep(j, 1, n) std::cout << j << \" \\n\"[j == n];  }}\u00a0int main() {  std::cin.tie(nullptr)->sync_with_stdio(false);  int t;  std::cin >> t;  while (t--) solve();}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Nene s Magical Matrix.json"
}