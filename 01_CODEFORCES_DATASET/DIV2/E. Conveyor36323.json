{"link": "https://codeforces.com//contest/169/problem/E", "problemId": "1048", "problem_idx": "E", "shortId": "169E", "contest_number": "169", "problem_submissions": {"C": [1413568, 1418000, 1419729, 1418879, 1411538, 1411673, 1412236, 1411277, 1411560, 1412011, 1411811, 1412600], "D": [1412552, 1418074, 1411994, 1418637, 1418063, 1414034], "B": [1410183, 1409899, 1409611, 1409469, 1410004, 1410007, 1410220, 1409835, 1410058, 1410523, 1410902, 1409990, 1409805, 1410144], "A": [1409095, 1409256, 1409125, 1409053, 1409076, 1409189, 1409237, 1409183, 1409272, 1409331, 1409404, 1409425, 1409291, 1409388], "E": [1413634, 1413390, 1419771, 1414392]}, "name": "E. Conveyor", "statement": "Anton came to a chocolate factory. There he found a working conveyor and\r\ndecided to run on it from the beginning to the end.The conveyor is a\r\nlooped belt with a total length of meters, of which meters are located\r\non the surface and are arranged in a straight line. The part of the belt\r\nwhich turns at any moment (the part which emerges from under the floor\r\nto the surface and returns from the surface under the floor) is assumed\r\nto be negligibly short.The belt is moving uniformly at speed meters per\r\nsecond. Anton will be moving on it in the same direction at the constant\r\nspeed of meters per second, so his speed relatively to the floor will be\r\nmeters per second. Anton will neither stop nor change the speed or the\r\ndirection of movement.Here and there there are chocolates stuck to the\r\nbelt ( chocolates). They move together with the belt, and do not come\r\noff it. Anton is keen on the chocolates, but he is more keen to move\r\nforward. So he will pick up all the chocolates he will pass by, but\r\nnothing more. If a chocolate is at the beginning of the belt at the\r\nmoment when Anton starts running, he will take it, and if a chocolate is\r\nat the end of the belt at the moment when Anton comes off the belt, he\r\nwill leave it. You are given the positions of the chocolates relative to\r\nthe initial start position of the belt . The positions on the belt from\r\nto correspond to the top, and from to to the the bottom half of the belt\r\n(see example). All coordinates are given in meters.Anton begins to run\r\nalong the belt at a random moment of time. This means that all possible\r\npositions of the belt at the moment he starts running are equiprobable.\r\nFor each from to calculate the probability that Anton will pick up\r\nexactly chocolates.\r\n", "solutions": ["#include <stdio.h>\n\nusing namespace std;\n\nconst double eps = 0.0001;\nint n, il, ir, m;\ndouble L, v1, v2, l, r, rr;\ndouble a[200001];\ndouble answ[100001] = {0};\n\nvoid answout()\n{\n    int i;\n    for (i = 0; i <= n; ++i)\n        printf(\"%.15lf\\n\", answ[i]);\n}\n\nint main(void)\n{\n    int i;\n    scanf(\"%d%lf%lf%lf\", &n, &L, &v1, &v2);\n    for (i = 0; i < n; ++i)\n        scanf(\"%lf\", a + i);\n    for (i = 0; i < n; ++i)\n        a[n + i] = a[i] + 2 * L;\n    a[2 * n] = a[0] + 4 * L;\n    l = 0;\n    rr = r = L * v2 / (v1 + v2);\n    il = 0;\n    ir = -1;\n    while (a[ir + 1] < r)\n        ++ir;\n    while (true)\n    {\n        if (a[il] - l < a[ir + 1] - r)\n        {\n            m = ir - il + 1;\n            if (a[il] > 2 * L)\n            {\n                answ[m] += (2 * L - l) / (2 * L);\n                answout();\n                return 0;\n            }\n            answ[m] += (a[il] - l) / (2 * L);\n            l = a[il];\n            r = a[il] + rr;\n            ++il;\n        }\n        else\n        {\n            m = ir - il + 1;\n            if (a[ir + 1] - rr > 2 * L)\n            {\n                answ[m] += (2 * L - l) / (2 * L);\n                answout();\n                return 0;\n            }\n            answ[m] += (a[ir + 1] - r) / (2 * L);\n            r = a[ir + 1];\n            l = a[ir + 1] - rr;\n            ++ir;\n        }\n    }\n    return 0;\n}\n"], "input": "", "output": "", "tags": [], "dificulty": "2100", "interactive": false}