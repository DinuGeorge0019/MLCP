{
    "link": "https://codeforces.com//contest/1668/problem/E",
    "problemId": "1373078",
    "problem_idx": "E",
    "shortId": "1668E",
    "contest_number": "1668",
    "problem_submissions": {
        "E": [
            154123739,
            154125336,
            154119851,
            154113083,
            154126230,
            154111025,
            154118734,
            154118893,
            154116518
        ],
        "D": [
            154102065,
            154111480,
            154109461,
            154112828,
            154127256,
            154120568,
            154199100,
            154098507,
            154101292,
            154104775,
            154103929,
            154095552,
            154104771,
            154104638
        ],
        "C": [
            154084164,
            154089822,
            154082750,
            154086924,
            154096669,
            154097603,
            154087733,
            154089704,
            154084845,
            154091220,
            154093921,
            154082051,
            154082528,
            154089420,
            154085834,
            154089820,
            154100489,
            154080049,
            154081283
        ],
        "B": [
            154081285,
            154084224,
            154085663,
            154082020,
            154152941,
            154084489,
            154090124,
            154084331,
            154085985,
            154081983,
            154085223,
            154085348,
            154095598,
            154087105,
            154085147,
            154082318,
            154081788,
            154081908,
            154090843,
            154084167
        ],
        "A": [
            154079113,
            154080383,
            154079244,
            154078891,
            154152929,
            154079977,
            154085842,
            154079717,
            154081051,
            154079292,
            154081689,
            154080381,
            154089065,
            154090204,
            154080866,
            154080201,
            154079483,
            154080405,
            154087751,
            154079358
        ],
        "F": [
            154125193,
            154162167,
            154110277,
            154120657
        ]
    },
    "name": "E. Half Queen Cover",
    "statement": "You are given a board with n rows and n columns, numbered from 1 to n.\r\nThe intersection of the a-th row and b-th column is denoted by (a, b).A\r\nhalf-queen attacks cells in the same row, same column, and on one\r\ndiagonal. More formally, a half-queen on (a, b) attacks the cell (c, d)\r\nif a=c or b=d or a-b=c-d. What is the minimum number of half-queens that\r\ncan be placed on that board so as to ensure that each square is attacked\r\nby at least one half-queen?Construct an optimal solution.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n \nint i,j,k,n,m,t,l,r,x,y;\nset<pair<int,int> > v;\n\nbool chk(int a,int b){\n\tfor(auto [i,j]:v){\n\t\tif(i==a)return 1;\n\t\tif(j==b)return 1;\n\t\tif((i-j)==(a-b))return 1;\n\t}\n\treturn 0;\n}\n\nint main(){\n\tcin>>n;\n\tif(n==1){\n\t\tcout<<\"1\\n1 1\";return 0;\n\t}\n\tm=(n+n+1)/3;\n\tcout<<m<<'\\n';\n\t\n\tr=n-m-1;l=-r;\n\t//printf(\"a%d %d %d\\n\",m,l,r);\n\t\n\tx=1;y=r;\n\twhile(x<=y){\n\t\tv.insert({x,y});\n\t\tv.insert({y,x});\n\t\tx++;y--;\n\t}\n\tx=r+1;y=r+r+1;\n\twhile(x<=y){\n\t\tv.insert({x,y});\n\t\tv.insert({y,x});\n\t\tx++;y--;\n\t}\n\tfor(i=r+r+2;i<=m;i++){\n\t\tv.insert({i,i});\n\t}\n\tfor(auto [x,y]:v){\n\t\tcout<<x<<' '<<y<<'\\n';\n\t}\n\t\n\tassert(m==v.size());\n\t/*for(i=1;i<=n;i++)for(j=1;j<=n;j++){\n\t\tif(!chk(i,j)){\n\t\t\tprintf(\"NMSL%d %d\\n\",i,j);\n\t\t\treturn 1;\n\t\t}\n\t}*/\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Half Queen Cover.json",
    "editorial_link": "https://codeforces.com//blog/entry/102013",
    "editorial": "SolutionLet\u00e2\u0080\u0099s assume that there is a solution for half-queens. There are\r\nat least rows, and columns, which contains no half-queen. If the\r\nuncovered rows are , and the columns are , (in increasing order), each\r\ndiagonal (when the difference is a constant) contains at most one of the\r\nfollowing squares: . So a different half-queen attacks these cells.We\r\nknow that: , so . We have a lower bound for . It turns out, that there\r\nis a consturction, for this .For , , and we can place in the top left\r\ncorner, diagonally, and half queens in the bottom right corner\r\ndiagonally.For an optimal construction could be: , , , , .If , or we can\r\nput one or two half-queens, in the bottom right corner, and use the\r\nprevious construction.\r\n"
}