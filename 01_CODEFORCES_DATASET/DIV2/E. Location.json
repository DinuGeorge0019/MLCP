{
    "link": "https://codeforces.com//contest/1732/problem/E",
    "problemId": "1601560",
    "problem_idx": "E",
    "shortId": "1732E",
    "contest_number": "1732",
    "problem_submissions": {
        "A": [
            177780757,
            177610358,
            177608551,
            177606643,
            177607169,
            177610084,
            177606577,
            177608412,
            177606634,
            177606927,
            177606608,
            177607362,
            177606772,
            177606726,
            177606713,
            177607069,
            177607097,
            177611108,
            177606918,
            177704415,
            177608226,
            177608992
        ],
        "E": [
            177657016,
            177656202,
            177633902,
            177640667,
            177803227,
            177634482,
            219606714,
            177713292,
            205728264
        ],
        "D2": [
            177641910,
            177631345,
            177624639,
            177622507,
            177657720,
            177627306,
            177634600,
            177636897,
            177705044,
            177639536,
            177633383,
            177633472,
            177633356,
            177632157,
            177640421,
            177640870,
            177713072,
            177632770,
            177633150,
            177631372,
            177704515,
            177639496,
            177628055
        ],
        "C2": [
            177632291,
            177641962,
            177622438,
            177615256,
            177628405,
            177620951,
            177620108,
            177616118,
            177614696,
            177620919,
            177623972,
            177616635,
            177637052,
            177635166,
            177620867,
            178222629,
            177623840,
            177623959,
            177628626,
            177704465,
            177632045,
            177631184
        ],
        "D1": [
            177621374,
            177621523,
            177609368,
            177617748,
            177635005,
            177615122,
            177622111,
            177619777,
            177625112,
            177625655,
            177620912,
            177619034,
            177613806,
            177616102,
            177629698,
            177628519,
            177632466,
            177625833,
            177704487,
            177616074,
            177626081
        ],
        "C1": [
            177616773,
            177634647,
            177613208,
            177615318,
            177628507,
            177619693,
            177620176,
            177616207,
            177614603,
            177613000,
            177624015,
            177616698,
            177626783,
            177614045,
            177620826,
            177623767,
            177623763,
            177621443,
            177704454,
            177618806,
            177621758
        ],
        "B": [
            177611173,
            177612224,
            177608250,
            177608561,
            177614708,
            177608123,
            177608457,
            177614546,
            177608888,
            177607945,
            177608753,
            177607801,
            177610965,
            177607589,
            177608533,
            177609886,
            177611017,
            177610279,
            177704436,
            177611009,
            177609323
        ]
    },
    "name": "E. Location",
    "statement": "You are given two arrays of integers a_1, a_2,\r\nldots, a_n and b_1, b_2,\r\nldots, b_n. You need to handle q queries of the following two types: 1 l\r\nr x: assign a_i := x for all l\r\nleq i\r\nleq r; 2 l r: find the minimum value of the following expression among\r\nall l\r\nleq i\r\nleq r:\r\nfrac{\r\noperatorname{lcm}(a_i, b_i)}{\r\ngcd(a_i, b_i)}.In this problem\r\ngcd(x, y) denotes the greatest common divisor of x and y, and\r\noperatorname{lcm}(x, y) denotes the least common multiple of x and y.\r\n",
    "solutions": [
        "#include<cmath>\n#include<cstdio>\n#include<bitset>\n#include<iostream>\n#include<algorithm>\n#include<queue> \n#include<cstring>\n#include<set>\n#include<vector>\n#include<map>\n#include<ctime>\n#include<unordered_map>\nusing namespace std;\n#define LL long long\n#define pp pair<int,int>\n#define ull unsigned long long\nnamespace IO{\n\tconst int sz=1<<22;\n\tchar a[sz+5],b[sz+5],*p1=a,*p2=a,*t=b,p[105];\n\tinline char gc(){\n\t//\treturn p1==p2?(p2=(p1=a)+fread(a,1,sz,stdin),p1==p2?EOF:*p1++):*p1++;\n\t\treturn getchar();\n\t}\n\ttemplate<class T> void gi(T& x){\n\t\tx=0; int f=1;char c=gc();\n\t\tif(c=='-')f=-1;\n\t\tfor(;c<'0'||c>'9';c=gc())if(c=='-')f=-1;\n\t\tfor(;c>='0'&&c<='9';c=gc())\n\t\t\tx=x*10+(c-'0');\n\t\tx=x*f;\n\t}\n\tinline void flush(){fwrite(b,1,t-b,stdout),t=b; }\n\tinline void pc(char x){*t++=x; if(t-b==sz) flush(); }\n\ttemplate<class T> void pi(T x,char c='\\n'){\n\t\tif(x<0)pc('-'),x=-x;\n\t\tif(x==0) pc('0'); int t=0;\n\t\tfor(;x;x/=10) p[++t]=x%10+'0';\n\t\tfor(;t;--t) pc(p[t]); pc(c);\n\t}\n\tstruct F{~F(){flush();}}f; \n}\nusing IO::gi;\nusing IO::pi;\nusing IO::pc;\nconst int mod=998244353;\ninline int add(int x,int y){\n\treturn x+y>=mod?x+y-mod:x+y;\n}\ninline int dec(int x,int y){\n\treturn x-y<0?x-y+mod:x-y;\n}\nint qkpow(int a,int b){\n\tint ans=1,base=a%mod;\n\twhile(b){\n\t\tif(b&1)ans=1ll*ans*base%mod;\n\t\tbase=1ll*base*base%mod;\n\t\tb>>=1;\n\t}\n\treturn ans;\n}\nint fac[10000005],inv[10000005],Invn[600005];\ninline int C(int n,int m){\n\tif(n<m||m<0)return 0;\n\treturn 1ll*fac[n]*inv[m]%mod*inv[n-m]%mod;\n}\nvoid init_C(int n){\n\tfac[0]=1;\n\tfor(int i=1;i<=n;i++)fac[i]=1ll*fac[i-1]*i%mod; \n\tinv[0]=1;\n\tinv[n]=qkpow(fac[n],mod-2);\n\tfor(int i=n-1;i>=1;i--)inv[i]=1ll*inv[i+1]*(i+1)%mod;\n\tInvn[0]=Invn[1]=1;\n\tfor(int i=1;i<=200000;i++)Invn[i]=(LL)(mod-mod/i)*Invn[mod%i]%mod;\n}  \nconst int M = 5e4 + 5, S = 500;\nint _a[M], _b[M], _c[M];\nint v[M], p[M], r;\nint f[S + 1][S + 1];\nvoid Init(){\n\t_a[1] = _b[1] = _c[1] = 1;\n\tfor (int i = 2; i <= M - 5; ++i) {\n\t\tif (!v[i]) {\n\t\t\tp[++r] = i;\n\t\t\t_a[i] = _b[i] = 1, _c[i] = i; \n\t\t}\n\t\tint tp;\n\t\tfor (int j = 1; j <= r && (tp = i * p[j]) <= M - 5; ++j) {\n\t\t\tv[tp] = 1;\n\t\t\t_a[tp] = _a[i] * p[j];\n\t\t\t_b[tp] = _b[i];\n\t\t\t_c[tp] = _c[i];\n\t\t\tif (_a[tp] > _b[tp]) {\n\t\t\t\tswap(_a[tp], _b[tp]);\n\t\t\t\tif (_b[tp] > _c[tp]) {\n\t\t\t\t\tswap(_b[tp], _c[tp]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!(i % p[j])) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 1; i <= S; ++i) {\n\t\tf[0][i] = f[i][0] = i;\n\t\tfor (int j = 1; j <= S; ++j) {\n\t\t\tf[i][j] = f[j % i][i];\n\t\t}\n\t}\n\treturn;\n}\ninline int gcd(int x, int y)\n{\n\tint A = 1, tp = f[_a[x]][y % _a[x]];\n\tA *= tp;\n\ty /= tp;\n\ttp = f[_b[x]][y % _b[x]];\n\tA *= tp;\n\ty /= tp;\n\ttp = (v[_c[x]] ? f[_c[x]][y % _c[x]] : (y % _c[x] ? 1 : _c[x]));\n\tA *= tp;\n\ty /= tp;\n\treturn A;\n}\nint n,q,a[50005],b[50005],tag[50005],B,bl[50005];\nLL ans[50005],bla[50005];\ninline void rebuild(int x){\n\tif(tag[x]!=-1){\n\t\tint num=tag[x];\n\t\tbla[x]=1e18;\n\t\tfor(int i=(x-1)*B+1;i<=min(x*B,n);i++){\n\t\t\tint fk=gcd(num,b[i]);\n\t\t\ta[i]=num;\n\t\t\tans[i]=1ll*a[i]*b[i]/fk/fk;\n\t\t\tbla[x]=min(bla[x],ans[i]);\n\t\t}\n\t\ttag[x]=-1;\n\t}\n}\ninline void recalc(int x){\n\tbla[x]=1e18;\n\tfor(int i=(x-1)*B+1;i<=min(x*B,n);i++)bla[x]=min(bla[x],ans[i]);\n}\nvector<int>G[50005];\nLL cnm[505][50005],cnm2[505][50005];\nconst LL INF=1e18;\ninline void calc(int id,int x){\n\tbla[id]=cnm2[id][x];\n}\ninline void modify(int l,int r,int x){\n\trebuild(bl[l]);\n\tfor(int i=l;i<=min(bl[l]*B,r);i++){\n\t\tint fk=gcd(x,b[i]);\n\t\ta[i]=x;\n\t\tans[i]=1ll*a[i]*b[i]/fk/fk;\n\t}\n\trecalc(bl[l]);\n\tif(bl[l]!=bl[r]){\n\t\trebuild(bl[r]);\n\t\tfor(int i=(bl[r]-1)*B+1;i<=r;i++){\n\t\t\tint fk=gcd(x,b[i]);\n\t\t\ta[i]=x;\n\t\t\tans[i]=1ll*a[i]*b[i]/fk/fk;\n\t\t}\n\t\trecalc(bl[r]);\n\t}\n\tfor(int i=bl[l]+1;i<=bl[r]-1;i++){\n\t\ttag[i]=x;\n\t\tcalc(i,x);\n\t}\n}\ninline LL query(int l,int r){\n\tLL res=1e18;\n\trebuild(bl[l]);\n\tfor(int i=l;i<=min(bl[l]*B,r);i++)res=min(res,ans[i]);\n\trecalc(bl[l]);\n\tif(bl[l]!=bl[r]){\n\t\trebuild(bl[r]);\n\t\tfor(int i=(bl[r]-1)*B+1;i<=r;i++){\n\t\t\tres=min(res,ans[i]);\n\t\t}\n\t\trecalc(bl[r]);\n\t}\n\tfor(int i=bl[l]+1;i<=bl[r]-1;i++)res=min(res,bla[i]);\n\treturn res;\n}\nsigned main(){\n\tInit();\n\tsrand(time(0));\n\tgi(n),gi(q);\n\tB=100;\n\tfor(int i=1;i<=n;i++)gi(a[i]);\n\tfor(int i=1;i<=n;i++)gi(b[i]);\n\tfor(int i=1;i<=n;i++)bl[i]=(i-1)/B+1;\n\tfor(int i=1;i<=50000;i++)\n\t\tfor(int j=i;j<=50000;j+=i)\n\t\t\tG[j].push_back(i);\n\tfor(int i=1;i<=n;i++)bla[i]=1e18;\n\tfor(int i=1;i<=n;i++){\n\t\tint fk=__gcd(a[i],b[i]);\n\t\tans[i]=1ll*a[i]*b[i]/fk/fk;\n\t\tbla[bl[i]]=min(bla[bl[i]],ans[i]);\n\t\ttag[bl[i]]=-1;\n\t}\n\tfor(int i=1;i<=bl[n];i++)\n\t\tfor(int j=1;j<=50000;j++)\n\t\t\tcnm[i][j]=1e18;\n\tfor(int i=1;i<=n;i++){\n\t\tint x=bl[i];\n\t\tfor(auto fk:G[b[i]])\n\t\t\tcnm[x][fk]=min(cnm[x][fk],1ll*b[i]/fk);\n\t}\n\tfor(int i=1;i<=bl[n];i++){\n\t\tfor(int x=1;x<=50000;x++)cnm2[i][x]=INF;\n\t\tfor(int v=1;v<=50000;v++){\n\t\t\tif(cnm[i][v]!=INF)\n\t\t\tfor(int x=v;x<=50000;x+=v)\n\t\t\t\tcnm2[i][x]=min(cnm2[i][x],1ll*x/v*cnm[i][v]);\n\t\t}\t\t\n\t}\n\twhile(q--){\n\t\tint op,l,r,x;\n\t\tgi(op);\n\t\tif(op==1){\n\t\t\tgi(l),gi(r),gi(x);\n\t\t\tmodify(l,r,x);\n\t\t}else{\n\t\t\tgi(l),gi(r);\n\t\t\tpi(query(l,r),'\\n');\n\t\t}\n\t}\n\treturn 0;\n} \n/*\n错误的，偏激的，极右翼的，非马恩主义的，女权的，失败的，人民日报的，乐的！ \n文明之美看东方\n*/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "math",
        "number theory"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Location.json",
    "editorial_link": "https://codeforces.com//blog/entry/108327",
    "editorial": "Tasks of this kind, as a rule, are solved using data structures, and\r\nthis one is no exception. Since the constraints in the problem are not\r\nlarge enough, it is logical to think in the direction of root\r\noptimizations.Letâs divide the array into blocks of length , we will\r\nhave about such blocks. For each block, we want to maintain a response,\r\ni.e. a minimum value of .Letâs see what happens with the first type of\r\noperation. If the block partially intersects with the segment of the\r\nrequest, then it is possible to go through this block for and\r\nrecalculate the answer. There are no more than two such blocks, so in\r\ntotal we will spend on this (we neglect the running time of ). If the\r\nblock lies entirely in the segment of the request (and there can be such\r\nblocks), then you need to somehow recalculate the response more\r\nquickly.To do this, letâs precalculate the following value for each\r\nblock: what will be the answer in the block if we assign the value to\r\nall numbers. Letâs learn how to calculate the answer for a fixed first.\r\nTo do this, letâs iterate over all divisors of the number in fact, by\r\nenumeration of this divisor, we will try to fix . Then note that since\r\nwe want the value to minimize the value, we need to find the minimum\r\nvalue of that is divisible by . And then we make over all such . Letâs\r\nnote that may not actually be equal to , but we know for sure that , and\r\nsince we want to minimize the value , then we do not do worse.Already\r\nnow we can calculate the answer for inside the block, where is the\r\nmaximum value. But you can do even better!Letâs note that where is a\r\nprime divisor of , and donât forget the case when . This follows from\r\nthe fact that all divisors of the number are contained among the\r\ndivisors of numbers of the form .Letâs calculate the running time and\r\nfind the optimal . We need to find all its divisors for each number in\r\norder to quickly find out the minimum number that is divisible by the\r\ngiven one inside the block we do this in . Inside each block, our\r\nprecalculation now works for , that is, in total for all blocks . We\r\nanswer the request for . Hence we get that it is advantageous to take\r\napproximately (we have all quantities of the same order, so we use ).\r\n",
    "hint": []
}