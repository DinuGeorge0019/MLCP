{
    "link": "https://codeforces.com//contest/1788/problem/E",
    "problemId": "1767775",
    "problem_idx": "E",
    "shortId": "1788E",
    "contest_number": "1788",
    "problem_submissions": {
        "F": [
            192929323,
            192944697,
            192947972,
            192947585,
            192932378,
            192933439,
            192954011,
            193003406,
            192956724,
            192960550,
            192961107,
            192951794,
            192975658,
            193004734,
            193000099,
            192953392,
            192971360,
            193157814,
            192925320
        ],
        "E": [
            192914791,
            192927615,
            192927556,
            192934590,
            192889260,
            192914229,
            192917631,
            192924823,
            192930869,
            192943768,
            192931128,
            192903797,
            192921531,
            193004713,
            192925760,
            192927056,
            192925608,
            192917135,
            192939766,
            192904744
        ],
        "D": [
            192905122,
            192919739,
            192914784,
            192910155,
            192955552,
            192927341,
            192930171,
            192916598,
            192938656,
            192928104,
            192958419,
            192917109,
            192914086,
            193004704,
            192914561,
            192936729,
            192911543,
            192926368,
            192906600
        ],
        "C": [
            192896754,
            192903243,
            192891543,
            192895173,
            192914614,
            192879823,
            192902740,
            192906894,
            192909558,
            192922632,
            192887922,
            192904823,
            193004689,
            192890036,
            192896137,
            192904090,
            192893814,
            192946267
        ],
        "B": [
            192885653,
            192880984,
            192883005,
            192891309,
            192902865,
            192884638,
            192883772,
            192879778,
            192880217,
            192885391,
            192892745,
            192885295,
            192888862,
            193004678,
            192878668,
            192883423,
            192882746,
            192889266,
            192878522,
            192940441
        ],
        "A": [
            192874357,
            192874502,
            192872686,
            192876928,
            192873442,
            192872154,
            192872535,
            192873765,
            192873755,
            192872250,
            192873788,
            192879133,
            193004648,
            192872439,
            192874189,
            192873135,
            192877988,
            192872696,
            192938096
        ]
    },
    "name": "E. Sum Over Zero",
    "statement": "You are given an array a_1, a_2,\r\nldots, a_n of n integers. Consider S as a set of segments satisfying the\r\nfollowing conditions. Each element of S should be in form [x, y], where\r\nx and y are integers between 1 and n, inclusive, and x\r\nleq y. No two segments in S intersect with each other. Two segments [a,\r\nb] and [c, d] intersect if and only if there exists an integer x such\r\nthat a\r\nleq x\r\nleq b and c\r\nleq x\r\nleq d. For each [x, y] in S, a_x+a_{x+1}+\r\nldots +a_y\r\ngeq 0. The length of the segment [x, y] is defined as y-x+1. f(S) is\r\ndefined as the sum of the lengths of every element in S. In a formal\r\nway, f(S) =\r\nsum_{[x, y]\r\nin S} (y - x + 1). Note that if S is empty, f(S) is 0.What is the\r\nmaximum f(S) among all possible S?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ninline int in(){\n    int x;\n    scanf(\"%d\",&x);\n    return x;\n}\nconst int N=2e5+5;\nint n;\nll s[N],a[N];\nint c[N],f[N];\nvoid add(int p,int v){\n    for(int i=p;i<=n;i+=i&-i)c[i]=max(c[i],v);\n}\nint get(int p){\n    int mx=-1e9;\n    for(int i=p;i;i-=i&-i)mx=max(mx,c[i]);\n    return mx;\n}\nint main(){\n    n=in();\n    for(int i=1;i<=n;i++)s[i]=s[i-1]+in(),a[i]=s[i];\n    sort(a,a+n+1);\n    for(int i=0;i<=n;i++)s[i]=lower_bound(a,a+n+1,s[i])-a+1;\n    n++;\n    for(int i=1;i<=n;i++)c[i]=-1e9;\n    add(s[0],0);\n    for(int i=1;i<n;i++){\n        f[i]=get(s[i])+i;\n        f[i]=max(f[i],f[i-1]);\n        add(s[i],f[i]-i);\n    }\n    cout<<f[n-1]<<endl;\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dfs and similar",
        "dp"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Sum Over Zero.json",
    "editorial_link": "https://codeforces.com//blog/entry/112584",
    "editorial": "Denote as the prefix sum of . For a segment to be an element of , should\r\nbe satisfied.Letâs denote as the maximum value of the sum of length of\r\nsegment smaller than in . Segment is smaller than if . If there is no\r\nsegment ending at , . If there is segment in , . By summing up, With\r\nthis dp, we get an solution.Now letâs try to speed up the dp transition\r\nusing segment tree. First, use coordinate compression on since we only\r\nsee whether one prefix sum is bigger than the other. We will maintain a\r\nsegment tree that stores in position .Letâs find in order of . We can\r\nsolve by range query on a segment tree. So we can solve in for each .The\r\nentire problem is solved in .There is an alternative solution that\r\nmaintains pair monotonically with a set. This solution also runs in .\r\n",
    "hint": []
}