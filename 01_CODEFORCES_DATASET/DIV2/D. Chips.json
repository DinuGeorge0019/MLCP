{
    "link": "https://codeforces.com//contest/334/problem/D",
    "problemId": "3367",
    "problem_idx": "D",
    "shortId": "334D",
    "contest_number": "334",
    "problem_submissions": {
        "D": [
            4181113,
            4180767,
            4182270,
            4180038,
            4181390,
            4182451,
            4183651,
            4180866,
            4182877,
            4183706,
            4179609,
            4182127,
            4184692,
            4182550,
            4181910
        ],
        "C": [
            4179043,
            4179388,
            4179231,
            4178257,
            4177698,
            4180224,
            4179443,
            4177709,
            4180109,
            4179950,
            4182620,
            4179691,
            4177555,
            4178614,
            4179083
        ],
        "B": [
            4177461,
            4175931,
            4176854,
            4176207,
            4179880,
            4178699,
            4177163,
            4179002,
            4196925,
            4176708,
            4178585,
            4177158,
            4176925,
            4176693,
            4176273,
            4176297
        ],
        "A": [
            4175329,
            4174981,
            4175123,
            4175245,
            4178586,
            4175577,
            4175019,
            4176053,
            4174959,
            4176006,
            4175267,
            4175256,
            4175478,
            4175490,
            4175229
        ]
    },
    "name": "D. Chips",
    "statement": "Gerald plays the following game. He has a checkered field of size cells,\r\nwhere various cells are banned. Before the game, he has to put a few\r\nchips on some border (but not corner) board cells. Then for minutes,\r\nGerald every minute moves each chip into an adjacent cell. He moves each\r\nchip from its original edge to the opposite edge. Gerald loses in this\r\ngame in each of the three cases: At least one of the chips at least once\r\nfell to the banned cell. At least once two chips were on the same cell.\r\nAt least once two chips swapped in a minute (for example, if you stand\r\ntwo chips on two opposite border cells of a row with even length, this\r\nsituation happens in the middle of the row). In that case he loses and\r\nearns points. When nothing like that happened, he wins and earns the\r\nnumber of points equal to the number of chips he managed to put on the\r\nboard. Help Gerald earn the most points.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <algorithm>\n#include <utility>\n#include <stack>\n#include <sstream>\n#include <list>\n#include <map>\n#include <queue>\n#include <set>\n#include <deque>\n#include <bitset>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <iomanip>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <stdlib.h>\n#include <stdint.h>\n#include <unistd.h>\n\nusing namespace std;\n\n#define FOR(i,a,b)                              for (i=a;i<b;i++)\n#define FORL(i,size)                            for (i=0;i<size;i++)\n#define FORR(i,size)                            for (i=size-1;i>=0;i--)\n#define s(n)                                    scanf(\"%d\",&n)\n#define p(n)                                    printf(\"%d\\n\",n)\n#define ps(n)                                   printf(\"%s\\n\",n)\n#define sd(n)                                   int n;scanf(\"%d\",&n)\n#define pb(n)                                   push_back(n)\n#define clr(a)                                  memset(a,0,sizeof(a))\n#define all(c)                                  (c).begin(),(c).end()\n#define mp(a,b)                                 make_pair(a,b)\n#define PI 3.14159265\n\ntypedef vector <int> vi;\ntypedef vector <vi> vvi;\ntypedef vector <string> vst;\ntypedef vector <bool> vb;\ntypedef long long ll;\nint i, j, k;\n\nint main() {\n\n    int T = 1;\n    //freopen(\"input.txt\",\"r\",stdin);\n    //freopen(\"output.txt\",\"w\",stdout);\n    //T = g_fi.ReadNext();\n    //cin>>T;\n\n    FOR(k, 0, T) {\n        sd(n);\n        sd(m);\n        vi bx(m);\n        vi by(m);\n        vector<bool> ax(n,true);\n        vector<bool> ay(n,true);\n        FOR(i,0,m)\n        {\n            sd(a);\n            sd(b);\n            ax[a-1]=false;\n            ay[b-1]=false;\n            bx[i]=a-1;\n            by[i]=b-1;\n        }\n        int cnt=0;\n        FOR(i,1,n-1)\n        {\n            if(ax[i])\n            {\n//                cout<<\"r\"<<i<<endl;\n                cnt++;\n            }\n            if(ay[i])\n            {\n//                cout<<\"c\"<<i<<endl;\n                cnt++;\n            }\n        }\n        if(n%2==1 && ax[n/2] && ay[n/2])\n            cnt--;\n        cout<<cnt<<endl;\n    }\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "two pointers"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Chips.json",
    "editorial_link": "https://codeforces.com//blog/entry/8418",
    "editorial": "At first lets make two remarks: Follow last remark we will avoid hits\r\nchip on forbidden cells. Lets avoid âcollisionsâ of chips. Lets consider\r\nthese four line: vertical lines number and and horizontal lines with the\r\nsame numbers. Chips on these lines can collides together, but conât\r\ncollides to another chip. Therefore we can solve the problem for these\r\nfour line independently. And finally lets observe that we can put the\r\nchip on each of these lines without cillisions as well as on the\r\npicture. So, we can iterate all possible fours and put chip on every\r\npossible line. And donât fogot about case of two middle line in case of\r\nis odd.\r\n",
    "hint": []
}