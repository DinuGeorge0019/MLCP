{
    "link": "https://codeforces.com//contest/1348/problem/B",
    "problemId": "609089",
    "problem_idx": "B",
    "shortId": "1348B",
    "contest_number": "1348",
    "problem_submissions": {
        "F": [
            78730137,
            78732956,
            78738021,
            78735188,
            78738507,
            78734079,
            78753080,
            78717089,
            78727355,
            78727368,
            78773476,
            78740376
        ],
        "E": [
            78711148,
            78713291,
            78707898,
            78710381,
            78719540,
            78713433,
            78709333,
            79466363,
            78772738,
            78713600,
            78699633,
            78717322,
            78717382,
            78717153,
            78728870,
            78722408,
            78722025,
            78727426,
            78728940
        ],
        "C": [
            78694419,
            78693419,
            78696011,
            78687630,
            78679892,
            78697771,
            78685191,
            78681524,
            78686378,
            78693929,
            78687938,
            78717342,
            78689661,
            78687381,
            78689833,
            78687589,
            78685601,
            78687639,
            78687038
        ],
        "D": [
            78686862,
            78702906,
            78690856,
            78698132,
            78702134,
            78701001,
            78706132,
            78701735,
            78701924,
            78711443,
            78693858,
            78706550,
            78704171,
            78707502,
            78702198,
            78714055,
            78702526,
            78697601,
            78708853,
            78702351
        ],
        "B": [
            78677169,
            78673852,
            78668555,
            78675102,
            78668889,
            78672084,
            78671272,
            78669645,
            79465649,
            78671217,
            78677254,
            78667586,
            78673648,
            78677181,
            78676314,
            78695320,
            78673038,
            78670148,
            78674360,
            78670529,
            78675058
        ],
        "A": [
            78669591,
            78665336,
            78662907,
            78664918,
            78662747,
            78662442,
            78662941,
            78662589,
            78662555,
            78665985,
            78662547,
            78662641,
            78669435,
            78666111,
            78662690,
            78662462,
            78663929,
            78669719,
            78662632,
            78663426
        ]
    },
    "name": "B. Phoenix and Beauty",
    "statement": "Phoenix loves beautiful arrays. An array is beautiful if all its\r\nsubarrays of length k have the same sum. A subarray of an array is any\r\nsequence of consecutive elements.Phoenix currently has an array a of\r\nlength n. He wants to insert some number of integers, possibly zero,\r\ninto his array such that it becomes beautiful. The inserted integers\r\nmust be between 1 and n inclusive. Integers may be inserted anywhere\r\n(even before the first or after the last element), and he is to minimize\r\nthe number of inserted integers.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=10010;\nint t,k,n,a[MAXN],b[MAXN],mp[MAXN],rev[MAXN],tmp,cnt;\nint main () {\n\tscanf(\"%d\",&t);\n\tfor (int ii=1;ii<=t;ii++) {\n\t\tscanf(\"%d%d\",&n,&k);\n\t\ttmp=cnt=0;\n\t\tfor (int i=1;i<=n;i++) {mp[i]=0;}\n\t\tfor (int i=1;i<=n;i++) {\n\t\t\tscanf(\"%d\",&a[i]);\n\t\t\tif (++mp[a[i]]==1) {tmp++;}\n\t\t}\n\t\tif (tmp>k) {printf(\"-1\\n\");continue;}\n\t\tint dis=0;\n\t\tfor (int i=1;i<=n;i++) {\n\t\t\tif (n-i+1+dis<=k||mp[i]) {rev[++dis]=i;}\n\t\t}\n\t\tfor (int i=1;i<=n;i++) {\n\t\t\tfor (int j=1;j<=dis;j++) {\n\t\t\t\tb[++cnt]=rev[j];\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",cnt);\n\t\tfor (int i=1;i<=cnt;i++) {printf(\"%d \",b[i]);}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "sortings"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Phoenix and Beauty.json",
    "editorial_link": "https://codeforces.com//blog/entry/76555",
    "editorial": "For an array to be beautiful for some , the array must be periodic with\r\nperiod . If there exists more than distinct numbers in the array , there\r\nis no answer and we print (because the array cannot be periodic with\r\nperiod ). Otherwise, we propose the following construction.Consider a\r\nlist of all the distinct numbers in array . If there are less than of\r\nthem, we will append some s (or any other number) until the list has\r\nsize . We can just print this list times. The length of our array is ,\r\nwhich never exceeds . Array can always be constructed by inserting some\r\nnumbers into array because every number in corresponds to one list.Time\r\ncomplexity for each test case:\r\n"
}