{
    "link": "https://codeforces.com//contest/1853/problem/E",
    "problemId": "2099143",
    "problem_idx": "E",
    "shortId": "1853E",
    "contest_number": "1853",
    "problem_submissions": {
        "E": [
            215240531,
            215240313,
            215246116,
            215249458,
            215251653,
            215250635,
            216838871,
            215350430,
            215284663,
            215314853,
            215261254
        ],
        "D": [
            215214411,
            215220885,
            215224382,
            215226640,
            215227143,
            215237178,
            215219268,
            215220212,
            216838036,
            215216388,
            215222732,
            215221541,
            215222391,
            215228057,
            215226498,
            215216178,
            215232515,
            215230797,
            215230860,
            215230625,
            215227427
        ],
        "C": [
            215208066,
            215209029,
            215218445,
            215213557,
            215221549,
            215215979,
            215208850,
            215209462,
            216838362,
            215211675,
            215212482,
            215215977,
            215215848,
            215207971,
            215220425,
            215219406,
            215210968,
            215214808,
            215215587,
            215214690,
            215214191
        ],
        "B": [
            215201834,
            215199354,
            215203429,
            215207887,
            215208000,
            215209486,
            215199874,
            215202601,
            216837998,
            215205609,
            215206019,
            215207012,
            215203260,
            215203474,
            215206199,
            215210556,
            215204325,
            215206260,
            216063043,
            216062841,
            215207209,
            215210173,
            215204057
        ],
        "A": [
            215192467,
            215191692,
            215193758,
            215193193,
            215193397,
            215196782,
            215192166,
            215194407,
            216837978,
            215192246,
            215196759,
            215192559,
            215192820,
            215193114,
            215192996,
            215192748,
            215192883,
            215192440,
            216062816,
            215194635,
            215194796,
            215192776
        ],
        "F": [
            225845923
        ]
    },
    "name": "E. Ina of the Mountain",
    "statement": "There are n octopuses on a single-file trail on Ina\u2019s mountain, numbered\r\n1, 2,\r\nldots, n. The i-th octopus has a certain initial health value a_i, where\r\n1\r\nleq a_i\r\nleq k.Each boulder crushes consecutive octopuses with indexes l, l+1,\r\nldots, r, where 1\r\nleq l\r\nleq r\r\nleq n. You can choose the numbers l and r arbitrarily for each\r\nboulder.For each boulder, the health value of each octopus the boulder\r\ncrushes is reduced by 1. However, as octopuses are immortal, once they\r\nreach a health value of 0, they will immediately regenerate to a health\r\nvalue of k. Given the octopuses\u2019 initial health values, find the number\r\nof boulders that need to be thrown to make the health of all octopuses\r\nequal to k.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxN = 220000;\nint a[maxN], b[maxN];\nlong long pref[maxN];\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0);\n\tint T;\n\tfor (cin >> T; T; T--) {\n\t\tint n, k; cin >> n >> k;\n\t\tfor (int i = 1; i <= n; i++) cin >> a[i];\n\t\ta[0] = a[n + 1] = k;\n\t\tfor (int i = 1; i <= n + 1; i++) {\n\t\t\tb[i] = (a[i] + k - a[i - 1]) % k;\n\t\t\tpref[i] = pref[i - 1] + b[i];\n\t\t}\n\t\tlong long ans = pref[n + 1];\n\t\tmultiset<int> ms;\n\t\tfor (int i = n + 1; i >= 1; i--) {\n\t\t\tms.insert(-b[i]);\n\t\t\tif (pref[i] / k != pref[i - 1] / k) {\n\t\t\t\tans += *ms.begin();\n\t\t\t\tms.erase(ms.begin());\n\t\t\t}\n\t\t}\n\t\tcout << ans << '\\n';\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "math"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Ina of the Mountain.json",
    "editorial_link": "https://codeforces.com//blog/entry/116940",
    "editorial": "Read the solution in Hint One before continuing with this tutorial; it provides important definitions.\n\nTo reduce the number of possibilities for each c[i]\n, we prove the following lemma: There exists an optimal choice of c\n (minimizing throws\n) where all differences between adjacent c[i]\n have absolute value less than k\n.\n\nIntuitively, this is because we can decrease a c[i]\n by k\n. Formally:\n\nProof of Lemma\nBy the previous lemma, if we have determined c[i]\n, there are at most 2\n choices for c[i+1]\n. (There is 1\n choice when b[i]=b[i+1]\n, resulting in d[i]=0\n, c[i]=c[i+1]\n, effectively merging the two octopuses.)\n\nWe can visualize this as a DAG in the 2D plane over all points (i,c[i])\n (over all possible choices of c[i]\n). Each point points to the points in the next column that are the closest above and below (if it exists), forming a grid-like shape. Our goal is to find a path of minimum cost from (0,0)\n to (n+1,0)\n.\n\nThis is the DAG for the second testcase in samples:  \n\nCall each time we choose a c[i+1]>c[i]\n (i.e. positive d[i]\n) an ascent. Note that the number of ascents is fixed because each nonzero d[i]\n is either x\n or x+k\n for some fixed negative x\n, and there must be a fixed number of +k\n's to make the total change from c[0]\n to c[n+1]\n zero.\n\nEach ascent brings the path up to the next \"row\" of descents. Since these rows slope downwards, the j\nth ascent must take place at or before some index ij\n, because otherwise c[ij+1]\n would be negative.\n\nWe can use the following strategy to find a path which we claim is optimal:\n\nIf we can descend, then we descend. Otherwise, either we ascend, or alternatively, we change a previous descent into an ascent so we can descend here. (This can be further simplified by having a hypothetical \"descent\" here, so you do not need to compare two possibilities in the implementation.) Now, the best such location for an ascent is the one with minimum cost.\n\nProof\nWe can implement the above strategy with a priority queue, where for each descent we push on the cost of the corresponding ascent, and when an ascent is required, we then pop off the minimum element. In particular, if b[i]<b[i+1]\n, then the corresponding ascent has cost b[i+1]?b[i]\n, while if b[i]>b[i+1]\n, it has cost b[i+1]?b[i]+k\n. Also, since the bottom of the DAG corresponds to c[i]=b[i]\n, an ascent is required exactly when b[i]<b[i+1]\n."
}