{"link": "https://codeforces.com//contest/1853/problem/E", "problemId": "2099143", "problem_idx": "E", "shortId": "1853E", "contest_number": "1853", "problem_submissions": {"E": [215240531, 215240313, 215246116, 215249458, 215251653, 215250635, 216838871, 215350430, 215284663, 215314853, 215261254], "D": [215214411, 215220885, 215224382, 215226640, 215227143, 215237178, 215219268, 215220212, 216838036, 215216388, 215222732, 215221541, 215222391, 215228057, 215226498, 215216178, 215232515, 215230797, 215230860, 215230625, 215227427], "C": [215208066, 215209029, 215218445, 215213557, 215221549, 215215979, 215208850, 215209462, 216838362, 215211675, 215212482, 215215977, 215215848, 215207971, 215220425, 215219406, 215210968, 215214808, 215215587, 215214690, 215214191], "B": [215201834, 215199354, 215203429, 215207887, 215208000, 215209486, 215199874, 215202601, 216837998, 215205609, 215206019, 215207012, 215203260, 215203474, 215206199, 215210556, 215204325, 215206260, 216063043, 216062841, 215207209, 215210173, 215204057], "A": [215192467, 215191692, 215193758, 215193193, 215193397, 215196782, 215192166, 215194407, 216837978, 215192246, 215196759, 215192559, 215192820, 215193114, 215192996, 215192748, 215192883, 215192440, 216062816, 215194635, 215194796, 215192776], "F": [225845923]}, "name": "E. Ina of the Mountain", "statement": "There are n octopuses on a single-file trail on Ina\u2019s mountain, numbered\r\n1, 2,\r\nldots, n. The i-th octopus has a certain initial health value a_i, where\r\n1\r\nleq a_i\r\nleq k.Each boulder crushes consecutive octopuses with indexes l, l+1,\r\nldots, r, where 1\r\nleq l\r\nleq r\r\nleq n. You can choose the numbers l and r arbitrarily for each\r\nboulder.For each boulder, the health value of each octopus the boulder\r\ncrushes is reduced by 1. However, as octopuses are immortal, once they\r\nreach a health value of 0, they will immediately regenerate to a health\r\nvalue of k. Given the octopuses\u2019 initial health values, find the number\r\nof boulders that need to be thrown to make the health of all octopuses\r\nequal to k.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxN = 220000;\nint a[maxN], b[maxN];\nlong long pref[maxN];\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0);\n\tint T;\n\tfor (cin >> T; T; T--) {\n\t\tint n, k; cin >> n >> k;\n\t\tfor (int i = 1; i <= n; i++) cin >> a[i];\n\t\ta[0] = a[n + 1] = k;\n\t\tfor (int i = 1; i <= n + 1; i++) {\n\t\t\tb[i] = (a[i] + k - a[i - 1]) % k;\n\t\t\tpref[i] = pref[i - 1] + b[i];\n\t\t}\n\t\tlong long ans = pref[n + 1];\n\t\tmultiset<int> ms;\n\t\tfor (int i = n + 1; i >= 1; i--) {\n\t\t\tms.insert(-b[i]);\n\t\t\tif (pref[i] / k != pref[i - 1] / k) {\n\t\t\t\tans += *ms.begin();\n\t\t\t\tms.erase(ms.begin());\n\t\t\t}\n\t\t}\n\t\tcout << ans << '\\n';\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures", "greedy", "math"], "dificulty": "2400", "interactive": false}