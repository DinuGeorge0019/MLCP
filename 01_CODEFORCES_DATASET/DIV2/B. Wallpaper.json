{
    "link": "https://codeforces.com//contest/139/problem/B",
    "problemId": "728",
    "problem_idx": "B",
    "shortId": "139B",
    "contest_number": "139",
    "problem_submissions": {
        "E": [
            980042,
            1355508,
            989840
        ],
        "D": [
            978407,
            979258,
            981500,
            981141,
            981629,
            981112,
            981003,
            978361,
            980314,
            982438
        ],
        "C": [
            976486,
            980221,
            979576,
            975661,
            979182,
            978241,
            976343,
            980246,
            977234,
            977300,
            980151,
            975292,
            976905,
            979088,
            978354,
            975803
        ],
        "B": [
            975799,
            976102,
            976580,
            980368,
            976461,
            976842,
            977973,
            977389,
            975833,
            975600,
            976651,
            976089,
            975820,
            976583,
            976416,
            977370
        ],
        "A": [
            974412,
            974563,
            974849,
            979612,
            974810,
            975009,
            974390,
            974654,
            984067,
            974272,
            974267,
            976572,
            974588,
            974309,
            974688,
            974303,
            977612
        ]
    },
    "name": "B. Wallpaper",
    "statement": "Having bought his own apartment, Boris decided to paper the walls in\r\nevery room. Borisâ€™s flat has rooms, each of which has the form of a\r\nrectangular parallelepiped. For every room we known its length, width\r\nand height of the walls in meters (different rooms can have different\r\ndimensions, including height).Boris chose types of wallpaper to paper\r\nthe walls of the rooms with (but it is not necessary to use all the\r\ntypes). Each type of wallpaper is sold in rolls of a fixed length and\r\nwidth (the length, naturally, shows how long the unfolded roll will be).\r\nIn addition, for each type we know the price of one roll of this\r\ntype.The wallpaper of each type contains strips running along the length\r\nof the roll. When gluing the strips must be located strictly vertically\r\n(so the roll cannot be rotated, even if the length is less than the\r\nwidth). Besides, a roll can be cut in an arbitrary manner, but the\r\njoints of glued pieces should also be vertical. In addition, each room\r\nshould be papered by only one type of wallpaper. And pieces of the same\r\nroll cannot be used to paper different rooms. That is, for each room the\r\nrolls are purchased separately. Also, some rolls can be used not\r\ncompletely.After buying an apartment Boris is short of cash, so he wants\r\nto spend the minimum money on wallpaper. Help him.\r\n",
    "solutions": [
        "#include <vector>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\nusing namespace std;\ntypedef long long ll;\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\n#define FOR(i, s, t) for(i = (s); i < (t); i++)\n#define RFOR(i, s, t) for(i = (s)-1; i >= (t); i--)\n\nint a[512], b[512], p[512];\nint a1[512], b1[512], c1[512];\n\nint main()\n{\n  #ifdef __FIO\n  freopen(\"in.txt\", \"r\", stdin);\n  freopen(\"out.txt\", \"w\", stdout);\n  #endif\n  int n, m;\n  int i, j, k;\n  int ans, tans;\n  cin>>n;\n  for(i = 0; i < n; i++)\n    cin>>a1[i]>>b1[i]>>c1[i];\n  cin>>m;\n  for(i = 0; i < m; i++)\n    cin>>a[i]>>b[i]>>p[i];\n  ans = 0;\n  for(i = 0; i < n; i++)\n  {\n    a1[i] = (a1[i]+b1[i])*2;\n    tans = 1<<20;\n    for(j = 0; j < m; j++)\n    {\n      k = (a[j]/c1[i]) * b[j];\n      if(k)\n      {\n        tans = min(tans, (a1[i]+k-1)/k * p[j]);\n      }\n    }\n    ans += tans;\n  }\n  cout<<ans<<endl;\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Wallpaper.json",
    "editorial_link": "https://codeforces.com//blog/entry/3462",
    "editorial": "Say we fixed the roll type and the room. The only possible way to cut the roll is to cut it into vertical stripes with length equal to room's height (though it was said we can cut it any way we want, there were some conditions to fulfill, namely there could be no joints other than vertical). So we find the total width of stripes we can cut our roll into as the (length of the roll / height of the room) (rounded down) * (width of the roll). If the roll length is smaller than room height, we obviously can not use this type of rolls (though the statement said there must exist at least one type we can use). The number of rolls is (perimeter of the wall rooms) / (total stripes width) (rounded up).\n\nThen we just try all types for every room and sum the minimal costs. Complexity - O(MN).",
    "hint": []
}