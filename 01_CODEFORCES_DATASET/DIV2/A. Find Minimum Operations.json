{
    "link": "https://codeforces.com//contest/2020/problem/A",
    "problemId": "2912452",
    "problem_idx": "A",
    "shortId": "2020A",
    "contest_number": "2020",
    "problem_submissions": {
        "F": [
            283654781,
            283655384,
            283653019,
            284812010,
            284342422
        ],
        "E": [
            283601053,
            283622277,
            283581328,
            283585589,
            283577511,
            283592572,
            283593005,
            283598500,
            283604766,
            283607067,
            283586822,
            283606206,
            283606082,
            283604966,
            283606881,
            283605803,
            284236238,
            284236223,
            283607016,
            283606859,
            283610252,
            283604942
        ],
        "D": [
            283587438,
            283588481,
            283592593,
            283573905,
            283573809,
            283577852,
            283585317,
            283583897,
            283586760,
            283584637,
            283572139,
            283590684,
            283585043,
            283588345,
            283571960,
            283592544,
            283591323,
            283585990,
            283588589,
            283589632
        ],
        "C": [
            283581157,
            283572675,
            283596795,
            283564752,
            283564525,
            283566373,
            283563157,
            283567449,
            283568512,
            283569775,
            283602587,
            283572456,
            283574521,
            283572581,
            283587896,
            283569964,
            283580076,
            283578040,
            283575463,
            283575417
        ],
        "B": [
            283571512,
            283580920,
            283593819,
            283558272,
            283566033,
            283559192,
            283560269,
            283566846,
            283561344,
            283561669,
            283575968,
            283566810,
            283563128,
            283562164,
            283561716,
            283562347,
            283565083,
            283563622,
            283567830,
            283566097
        ],
        "A": [
            283557781,
            283582998,
            283556780,
            283558386,
            283561649,
            283556987,
            283567215,
            283556859,
            283557220,
            283558113,
            283559136,
            283557475,
            283556847,
            283558472,
            283559470,
            283556985,
            283557885,
            283556894,
            283558118
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/134516",
    "editorial": "By nishkarsh Solution for k = 2Answer will be the number of ones in\r\nbinary representation of .\r\n",
    "name": "A. Find Minimum Operations",
    "statement": "You are given two integers n and k.In one operation, you can subtract\r\nany power of k from n. Formally, in one operation, you can replace n by\r\n(n-k^x) for any non-negative integer x.Find the minimum number of\r\noperations required to make n equal to 0.\r\n",
    "solutions": [
        "// Problem: Find Minimum Operations// Contest: Codeforces// URL: https://m2.codeforces.com/contest/2020/problem/A// Memory Limit: 256 MB// Time Limit: 1000 ms// // Powered by CP Editor (https://cpeditor.org) #pragma GCC optimize(\"Ofast,inline,unroll-loops\")#ifdef GTRAKIOI#define _GLIBCXX_DEBUG //交题前记得注释掉不然容易T。#endif#include<bits/stdc++.h>// #include<stdio.h>#define File(s) freopen(#s\".in\",\"r\",stdin),freopen(#s\".out\",\"w\",stdout)#ifdef GTRAKIOI#include\"C:/code/deb_20.cpp\"#define defrog(...) fprintf(stderr,__VA_ARGS__)#define deb(x) (std::cerr<<#x<<\"@\"<<__LINE__<<\"=\"<<(x)<<'\\n')#else#define defrog(...) 1#define deb(x) 1#define debug(...) 1#define debugArr(...) 1#endif#define defrogf(...) defrog(__VA_ARGS__)#define Tp template<typename T>#define Tl template<typename T#define Tr >#define IS(cond) ,std::enable_if_t<(cond), int> = 0#if __cplusplus>=201703L#define register#endif #ifdef _MSC_VER#if __has_include(<__msvc_int128.hpp>)#include <__msvc_int128.hpp> // https://stackoverflow.com/a/76440171#define __int128 std::_Signed128#define __int128_t std::_Signed128#define __uint128_t std::_Unsigned128#define __SIZEOF_INT128__ 16#endif#endifusing ll=long long;using ull=unsigned long long;#ifdef __SIZEOF_INT128__using lll=__int128;// using ulll=unsigned __int128;#endifusing db=double;using ld=long double;#define INT_ALIAS(w) using i##w=std::int##w##_t;using u##w=std::uint##w##_t;INT_ALIAS(8) INT_ALIAS(16) INT_ALIAS(32) INT_ALIAS(64)#ifdef __SIZEOF_INT128__using i128=__int128_t;using u128=__uint128_t;using i7=__int128_t;using u7=__uint128_t;template <class T>using to_unsigned = typename std::conditional<    std::is_same<T, __int128_t>::value ||        std::is_same<T, __int128>::value,    std::common_type<__uint128_t>,    typename std::conditional<std::is_signed<T>::value,                              std::make_unsigned<T>,                              std::common_type<T>>::type>::type;#elsetemplate <class T>using to_unsigned = std::make_unsigned<T>;#endiftemplate <class T> using to_unsigned_t = typename to_unsigned<T>::type; template<typename T>using vv=std::vector<T>;template<typename T>using V=std::vector<T>;using pii=std::pair<int,int>;using vi=V<int>;using vll=V<ll>;using vpii=V<pii>;using vvi=V<vi>;template<typename T>using pq=std::priority_queue<T>;template<typename T>using pqg=std::priority_queue<T,std::vector<T>,std::greater<>>;#define pb push_back#define eb emplace_back#define pob pop_back#define all(cont) std::begin(cont),std::end(cont) char ibuf[1<<15],*p1,*p2;#define getchar() (p1==p2&&(p2=(p1=ibuf)+fread(ibuf,1,1<<15,stdin),p1==p2)?EOF:*p1++)struct FastIO{\tTl IS(!std::numeric_limits<T>::is_signed) Tr inline void oint(T x){\t\tT y=1;\t\twhile(y<=x/10)y*=10;\t\tdo putchar(int(x/y)|48),x%=y,y/=10;while(y);\t}\tTl IS(std::numeric_limits<T>::is_signed) Tr inline void oint(const T&x){\t\tif(x<0){\t\t\tputchar('-');\t\t\toint<to_unsigned_t<T>>(-x);\t\t}else oint<to_unsigned_t<T>>(x);\t}\tTl=int IS(std::numeric_limits<T>::is_integer) Tr inline T rint(){register char c,f=0;while((c=getchar())<48||c>57)f|=c=='-';to_unsigned_t<T> a=c&15;while((c=getchar())>=48&&c<=57)a=a*10+(c&15);return f?~a+1:a;}\t// inline ll rll(){rg char c,f=0;while((c=getchar())<48||c>57)f|=c=='-';rg ull a=c&15;while((c=getchar())>=48&&c<=57)a=a*10+(c&15);return f?~a+1:a;}//\tinline operator int(){return rint();}\t// inline operator ll(){return rll();}\tTl IS(std::numeric_limits<T>::is_integer) Tr inline operator T(){return rint<T>();}\tinline char rchar(){register char c;while(!isgraph(c=getchar()));return c;}\tinline int rstr(char*s){register char c;while(!isgraph(c=getchar()));int cnt=-1;do s[++cnt]=c;while(isgraph(c=getchar()));s[++cnt]=0;return cnt;}\tinline std::string rs(){register char c;while(!isgraph(c=getchar()));std::string s;do s+=c;while(isgraph(c=getchar()));return s;}\tTl IS(std::numeric_limits<T>::is_integer) Tr inline void print(const T&x){oint(x);}\tinline void print(const char&x){putchar(x);}\tinline void print(const char*const&x){for(int i=0;x[i];++i)putchar(x[i]);}\t#if __cplusplus >= 202002L\tTp requires std::ranges::range<T> inline void print(const T&c){\t\tbool first=true;\t\tfor(const auto&x:c){\t\t\tif(!first)putchar(' ');\t\t\tfirst=false;\t\t\tprint(x);\t\t}\t}\t#endif\tinline void print(const std::string&x){for(int i=0;x[i];++i)putchar(x[i]);} \t// print with separators\t// inline void prints(){putchar('\\n');}\t// inline void prints(const auto&x,const auto&...rst){print(x),putchar(' '),prints(rst...);}\tinline void prints(const auto&...x){((print(x),putchar(' ')),...);putchar('\\n');}}g90;inline void YON(const bool&x){puts(x?\"YES\":\"NO\");}inline void Yon(const bool&x){puts(x?\"Yes\":\"No\");}inline void yon(const bool&x){puts(x?\"yes\":\"no\");} template<typename T=int>std::vector<T>rvec(std::size_t n,std::size_t start=0) {\tstd::vector<T>res(start+n);\tfor(std::size_t i=start;i<start+n;++i)res[i]=g90;\treturn res;} std::mt19937_64 rng(u32(std::chrono::high_resolution_clock::now().time_since_epoch().count()));Tl IS(std::is_floating_point<T>::value) Tr inline T rnd(const T&a,const T&b){\treturn std::uniform_real_distribution<T>(a,b)(rng);}Tl IS(std::numeric_limits<T>::is_integer) Tr inline T rnd(const T&a,const T&b){\treturn std::uniform_int_distribution<T>(a,b)(rng);}namespace MY_STD{\tTp inline T abs(const T&a){return a<0?-a:a;}}#if __cplusplus >= 202002Lnamespace all{\tusing namespace std::ranges;\tusing namespace std::views;\t\t//ambiguous ones\tusing std::views::iota;\tusing std::views::empty;\tusing std::views::reverse;\tinline constexpr auto&R=std::views::reverse;}#endifstruct DSU{//unweighted\tusing key_type=int; \tstd::vector<key_type>fa,size;\tinline DSU(key_type n):fa(n),size(n,1){std::iota(fa.begin(),fa.end(),0);}\tinline key_type& getFa(key_type x){\t\twhile(x^fa[x])x=fa[x]=fa[fa[x]];\t\treturn fa[x];\t}\tinline key_type& operator[](const key_type&x){return getFa(x);}\tinline auto canMerge(const key_type&u,const key_type&v){return getFa(u)!=getFa(v);}\tinline bool merge(key_type u,key_type v){\t\tu=getFa(u),v=getFa(v);\t\treturn (u)!=(v)&&(size[u]<size[v]&&(std::swap(u,v),1),fa[v]=u,size[u]+=size[v],size[v]=0,true);\t} }; template<typename Compare=std::less<>>inline bool ckmax(auto& a,const auto& b,const Compare&comp={}){return comp(a,b)?(a=b,true):false;}template<typename Compare=std::less<>>inline bool ckmin(auto& a,const auto& b,const Compare&comp={}){return comp(b,a)?(a=b,true):false;} inline auto divf(const auto&a,const auto&b){//assume b>0\treturn a<0?(a+1)/b-1:a/b;}inline auto divc(const auto&a,const auto&b){//assume b>0\treturn a>0?(a-1)/b+1:a/b;}  constexpr int N=-2024,M=1;//1000000007;// using mint = atcoder::static_modint<M>;inline int qpow(ll a,auto b){int res=1;for(;b;a=a*a%M,b>>=1)if(b&1)res=res*a%M;return res;}// #define pow qpow signed main(){\tusing std::cin,std::cout,std::cerr;\t//std::ios::sync_with_stdio(0);std::cin.tie(0);std::cout.tie(0);\tint T=1;\tT=g90;\tfor(;T--;)[&]{\t\tint n=g90,k=g90,ans=0;\t\tif(k==1){\t\t\tprintf(\"%d\\n\",n);\t\t\treturn;\t\t}\t\twhile(n){\t\t\tans+=n%k;\t\t\tn/=k;\t\t}\t\tprintf(\"%d\\n\",ans);\t}();}//main()"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Find Minimum Operations.json",
    "hint": []
}