{
    "link": "https://codeforces.com//contest/1281/problem/C",
    "problemId": "495768",
    "problem_idx": "C",
    "shortId": "1281C",
    "contest_number": "1281",
    "problem_submissions": {
        "E": [
            66919654,
            66920588,
            66925092,
            66923975,
            66921225,
            66926039,
            66924486,
            66925911,
            66919753,
            66924443,
            66921735,
            66926640,
            66923762,
            66928689,
            66923984,
            66929347,
            66922347,
            66925800,
            66926136,
            66926785
        ],
        "D": [
            66913905,
            66912980,
            66914351,
            66914888,
            66918186,
            66917312,
            66919310,
            66913455,
            66927167,
            66918040,
            66916917,
            66918767,
            66920615,
            66919931,
            66917311,
            66920679,
            66926946,
            66921289,
            66921368,
            66915749
        ],
        "C": [
            66910411,
            66909108,
            66910083,
            66911847,
            66912648,
            66912093,
            66912420,
            66917797,
            66912812,
            66913195,
            66926185,
            66911123,
            66913114,
            66915044,
            66929796,
            66916101,
            66915614,
            66912997,
            66913346,
            66920684
        ],
        "B": [
            66903686,
            66904970,
            66904261,
            66905849,
            66904183,
            70825921,
            66906323,
            66905017,
            66906316,
            66904966,
            66910332,
            66906601,
            66907853,
            66908474,
            66905210,
            66905588,
            66906778,
            66904477,
            66905850,
            66914866,
            66908783
        ],
        "A": [
            66901264,
            66901388,
            66900754,
            66900661,
            66900790,
            70825928,
            66900330,
            66900663,
            66904497,
            66901649,
            66900680,
            66901270,
            66900668,
            66900286,
            66902138,
            66900321,
            66900528,
            66900477,
            66900340,
            66913834,
            66903613
        ],
        "F": [
            66933294,
            67581587
        ]
    },
    "name": "C. Cut and Paste",
    "statement": "We start with a string s consisting only of the digits 1, 2, or 3. The\r\nlength of s is denoted by |s|. For each i from 1 to |s|, the i-th\r\ncharacter of s is denoted by s_i. There is one cursor. The cursor’s\r\nlocation\r\nell is denoted by an integer in\r\n{0,\r\nldots, |s|\r\n}, with the following meaning: If\r\nell = 0, then the cursor is located before the first character of s. If\r\nell = |s|, then the cursor is located right after the last character of\r\ns. If 0 <\r\nell < |s|, then the cursor is located between s_\r\nell and s_{\r\nell+1}. We denote by s_\r\ntext{left} the string to the left of the cursor and s_\r\ntext{right} the string to the right of the cursor. We also have a string\r\nc, which we call our , which starts out as empty. There are three types\r\nof actions: . Move the cursor one step to the right. This increments\r\nell once. . Set c\r\nleftarrow s_\r\ntext{right}, then set s\r\nleftarrow s_\r\ntext{left}. . Append the value of c to the end of the string s. Note\r\nthat this doesn’t modify c. The cursor initially starts at\r\nell = 0. Then, we perform the following procedure: Perform the Move\r\naction once. Perform the Cut action once. Perform the Paste action s_\r\nell times. If\r\nell = x, stop. Otherwise, return to step 1. You’re given the initial\r\nstring s and the integer x. What is the length of s when the procedure\r\nstops? Since this value may be very large, only find it modulo 10^9 + 7.\r\nIt is guaranteed that\r\nell\r\nle |s| at any time.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int M = 1e9 + 7;\n\nint main() {\n    int t; cin >> t;\n    for (int tt = 0; tt < t; tt++) {\n        int x;\n        cin >> x;\n        string s;\n        cin >> s;\n        int len = s.size();\n        for (int i = 0; i < x; i++) {\n            int k = s[i] - '0';\n            if (s.size() < x) {\n                for (int j = 1; j < k; j++) if ((int) s.size() < x) {\n                    for (int l = i + 1; l < len; l++) if ((int) s.size() < x) {\n                        s += s[l];\n                    }\n                }\n            }\n\n            int d = (len - i - 1 + M) % M;\n            len = ((i + 1) + 1LL * d * k) % M;\n        }\n        cout << len << \"\\n\";\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Cut and Paste.json",
    "editorial_link": "https://codeforces.com//blog/entry/72212",
    "editorial": "Let be the string after the th round, and let be the initial . We also\r\ndenote by the suffix of from the th character, , onwards.A single round\r\nturns into by the suffix exactly times. Hence, we have the recurrence\r\nwhere represents concatenation, and represents replicating times. (Note\r\nthat is interpreted as an integer.)In terms of lengths, we have Since ,\r\nthis is equivalent to This cannot be simulated yet as it is since the\r\nlength of could be growing very quickly. But notice that is always a\r\nprefix of . Therefore, for any two and , the th letters of and are the\r\nsame (as long as their lengths are at least ). Also, note that we only\r\nneed to access up to the th character, . Therefore, we only need to grow\r\njust enough until it contains at least characters. After that, we can\r\nstop modifying at that point and simply keep track of the length,\r\nmaintaining it using the recurrence above. The running time is . (But in\r\nlanguages where strings are immutable, you should use a\r\ndynamically-resizing list instead of appending strings repeatedly,\r\notherwise, youâll get a running time of .)\r\n",
    "hint": []
}