{
    "link": "https://codeforces.com//contest/1691/problem/F",
    "problemId": "1416262",
    "problem_idx": "F",
    "shortId": "1691F",
    "contest_number": "1691",
    "problem_submissions": {
        "F": [
            159037796,
            159004862,
            159045351,
            159041486,
            159074626,
            159060003,
            159067904,
            159020729,
            159065774,
            159064237,
            159068264,
            159063969,
            159078050,
            159063182,
            159071648,
            159076943,
            159063472,
            159076016,
            159077857
        ],
        "B": [
            159027507,
            159038230,
            158993583,
            158988023,
            158992996,
            158994717,
            158998069,
            158998926,
            158995615,
            158994699,
            158990804,
            158993808,
            158998565,
            158999263,
            158993130,
            158999935,
            158995666,
            158999458,
            158995141
        ],
        "C": [
            159022549,
            159035573,
            159003255,
            159002225,
            159000529,
            159011268,
            159008002,
            159028212,
            159004618,
            159012184,
            158998251,
            159004574,
            159008883,
            159022667,
            159090832,
            159011554,
            159006572,
            159005346,
            159010957,
            159006486
        ],
        "D": [
            159013958,
            159031555,
            159015433,
            159028094,
            159016632,
            159019611,
            159021146,
            159042470,
            159021759,
            159030292,
            159022623,
            159025372,
            159146607,
            159023715,
            159047830,
            159026170,
            159023572,
            159028563,
            159187233,
            159031404,
            159022310
        ],
        "E": [
            159000396,
            159018557,
            159029594,
            159057177,
            159032015,
            159039937,
            159038189,
            159062074,
            159045617,
            159045245,
            159054013,
            159039162,
            209514948,
            209514832,
            209514807,
            159105644,
            159105615,
            159105572,
            159105377,
            159104884,
            159097312,
            159096514,
            159095571,
            159042066,
            159035791,
            159048242,
            159046117,
            159052677,
            159191233,
            159190974,
            159179554,
            159054650,
            159057264
        ],
        "A": [
            158985679,
            159039068,
            158986800,
            158984482,
            158984538,
            158986015,
            158985132,
            158992280,
            158986339,
            158985193,
            158984622,
            158989832,
            158990669,
            158984543,
            158985817,
            158988085,
            158998809,
            158987967
        ]
    },
    "name": "F. K-Set Tree",
    "statement": "You are given a tree G with n vertices and an integer k. The vertices of\r\nthe tree are numbered from 1 to n.For a vertex r and a subset S of\r\nvertices of G, such that |S| = k, we define f(r, S) as the size of the\r\nsmallest rooted subtree containing all vertices in S when the tree is\r\nrooted at r. A set of vertices T is called a rooted subtree, if all the\r\nvertices in T are connected, and for each vertex in T, all its\r\ndescendants belong to T.You need to calculate the sum of f(r, S) over of\r\nvertices r and subsets S, where |S| = k. Formally, compute the\r\nfollowing:\r\nsum_{r\r\nin V}\r\nsum_{S\r\nsubseteq V, |S| = k} f(r, S), where V is the set of vertices in G.Output\r\nthe answer modulo 10^9 + 7.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define eb emplace_back\n#define ep emplace\n#define fi first\n#define se second\n#define in read<int>()\n#define lin read<ll>()\n#define rep(i, x, y) for(int i = (x); i <= (y); i++)\n#define per(i, x, y) for(int i = (x); i >= (y); i--)\n\nusing namespace std;\n\nusing ll = long long;\nusing db = double;\nusing pii = pair < int, int >;\nusing vec = vector < int >;\nusing veg = vector < pii >;\n\ntemplate < typename T > T read() {\n\tT x = 0; bool f = 0; char ch = getchar();\n\twhile(!isdigit(ch)) f |= ch == '-', ch = getchar();\n\twhile(isdigit(ch)) x = x * 10 + (ch ^ 48), ch = getchar();\n\treturn f ? -x : x;\n}\n\ntemplate < typename T > void chkmax(T &x, const T &y) { x = x > y ? x : y; }\ntemplate < typename T > void chkmin(T &x, const T &y) { x = x < y ? x : y; }\n\nconst int N = 1e6 + 10;\n//constexpr int mod = 998244353;\nconstexpr int mod = 1e9 + 7;\n\nint reduce(int x) {\n\tif(x < 0) x += mod;\n\tif(x >= mod) x -= mod;\n\treturn x;\n}\n\ntemplate < typename T > T qp(T x, ll t) { T res = 1; for(; t; t >>= 1, x *= x) if(t & 1) res *= x; return res; }\n\nstruct Z { // modint\n\tint x;\n\tZ(int x = 0) : x(reduce(x)) {}\n\tZ(ll x) : x(reduce(x % mod)) {}\n\tZ operator -() const { return Z(reduce(mod - x)); }\n\tint val() { return x; }\n\tZ inv() const { assert(x); return qp(*this, mod - 2); }\n\tZ &operator += (const Z &t) { x = reduce(x + t.x); return *this; }\n\tZ &operator -= (const Z &t) { x = reduce(x - t.x); return *this; }\n\tZ &operator *= (const Z &t) { x = (ll)x * t.x % mod; return *this; }\n\tZ &operator /= (const Z &t) { return *this *= t.inv(); }\n\tfriend Z operator + (const Z &a, const Z &b) { Z res = a; res += b; return res; }\n\tfriend Z operator - (const Z &a, const Z &b) { Z res = a; res -= b; return res; }\n\tfriend Z operator * (const Z &a, const Z &b) { Z res = a; res *= b; return res; }\n\tfriend Z operator / (const Z &a, const Z &b) { Z res = a; res /= b; return res; }\n};\n\nZ fac[N], ifac[N];\nZ C(int x, int y) { return x < 0 || y < 0 || x < y ? Z(0) : fac[x] * ifac[y] * ifac[x - y]; }\nvoid init(int l) {\n\tfac[0] = 1; rep(i, 1, l) fac[i] = fac[i - 1] * Z(i); ifac[l] = fac[l].inv();\n\tper(i, l - 1, 0) ifac[i] = ifac[i + 1] * Z(i + 1);\n}\n\nint n, K, siz[N], fa[N];\nZ ret[N], ans;\nvec G[N];\n\nvoid dfs(int x, int p) {\n\tsiz[x] = 1; fa[x] = p;\n\tfor(auto y : G[x]) if(y ^ p) {\n\t\t\tdfs(y, x); siz[x] += siz[y]; ret[x] += C(siz[y], K);\n\t\t}\n\tret[x] += C(n - siz[x], K);\n}\n\nint main() {\n#ifdef YJR_2333_TEST\n\tfreopen(\"1.in\", \"r\", stdin);\n#endif\n\tn = in, K = in; rep(i, 2, n) { int u = in, v = in; G[u].eb(v), G[v].eb(u); }\n\tinit(n); dfs(1, 0);\n\trep(x, 1, n) {\n\t\tfor(auto y : G[x])\n\t\t\tif(y == fa[x]) {\n\t\t\t\tZ t = (n - siz[x]) * (C(siz[x], K) - (ret[x] - C(n - siz[x], K))) * siz[x];\n\t\t\t\tans += t;\n\t\t\t} else {\n\t\t\t\tZ t = siz[y] * (C(n - siz[y], K) - (ret[x] - C(siz[y], K))) * (n - siz[y]);\n\t\t\t\tans += t;\n\t\t\t}\n\t\tans += (C(n, K) - ret[x]) * n;\n\t}\n\tcout << ans.val() << endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dfs and similar",
        "dp",
        "math",
        "trees"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. K-Set Tree.json",
    "editorial_link": "https://codeforces.com//blog/entry/103212",
    "editorial": "Our task is to calculate over all possible . Let us first focus on all\r\npossible just for a particular root i.e. let us root our tree at and try\r\nto find the sum just for that root.We will calculate our answer using\r\ndynamic programming over the trees. In this technique, we will calculate\r\nsome properties for each sub-tree and eventually get those properties\r\nfor the entire tree.The first property that we want to calculate for\r\neach sub-tree with node as the sub-tree root is which is the number of\r\nsubsets of size such that sub-tree of is the minimum-size sub-tree\r\ncovering it entirely. This can be calculated using combinatorics first\r\nwe calculate the total number of subsets of size in this sub-tree and\r\nthen from it we can subtract the number of subsets of size which donât\r\nhave sub-tree of as the minimum size sub-tree. Here, are all the\r\nchildren of and represents the size of the sub-tree of .This first\r\nproperty that we calculated is very important for us: If we take the sum\r\nof over every node, we will get the total number of subsets of size .\r\nWhen the tree is rooted at , represents the number of subsets where\r\nsub-tree of is the smallest sub-tree containing a set with vertices.\r\nConclusively, . The second property that we want to find for each\r\nsub-tree is the the size of the sub-tree of .The third property that we\r\nwant to find for each sub-tree is .Now, we have (as explained above)\r\ni.e. the contribution to the final answer when the root of the entire\r\ntree is fixed at . We can calculate the final answer by fixing other\r\nnodes as roots and then summing these value up.Notice what happens when\r\nwe try to change the root from to one of itâs children. The properties\r\nthat we calculated for each sub-tree remain the same except for the old\r\nroot and the new root. We can recalculate the properties for these two\r\nnodes using some clever arithmetic and get the new answer with a new\r\nroot. This is known as re-rooting technique. The method to calculate the\r\nnew properties are:Note: We use to represent Old Root. and to represent\r\nNew Root. . (Subtracting the size of this branch.) . (This is the main\r\nroot.) . (Removing contribution of old size and putting contribution of\r\nnew size. Removing contribution of the branch.) . (Removing contribution\r\nof old size and putting contribution of new size. Putting contribution\r\nof new brach.) (By definition.) (By definition.) (Subtracting old\r\ncontribution and adding new contribution.) The final answer is given by:\r\n",
    "hint": [
        "Hint 1 Can we root the tree and find the partial answer for a paticular root?",
        "Hint 2 The counting problem for a fixed root can be solved using combinatorics.",
        "Hint 3 Can we find the answer for other roots using the calculations involved in finding answer for a fixed root in Hint 1?"
    ]
}