{"link": "https://codeforces.com//contest/1623/problem/B", "problemId": "1243266", "problem_idx": "B", "shortId": "1623B", "contest_number": "1623", "problem_submissions": {"E": [140927316, 140928588, 140930913, 140931529, 140930666, 140933308, 140932491, 140927816, 140937929, 140940400, 140934079, 140940202, 140928211, 140936652, 140911137, 140938749, 140941503, 140941228, 140938408, 140940310], "D": [140917013, 140919394, 140925084, 140922860, 140922841, 140918471, 140924963, 140923599, 140924181, 140925202, 140925220, 140928107, 140933937, 140922988, 140926612, 140931586, 140929916, 140930490, 140925401, 140923945], "A": [140906789, 140901830, 140902316, 140901965, 140901890, 140902105, 140901764, 140909860, 140901988, 140902630, 140901845, 140901878, 140902576, 140902335, 140902196, 140902015, 140902189, 140902188, 140903240], "C": [140904718, 140907986, 140909100, 140911556, 140909513, 140908941, 140916100, 140929063, 140914447, 140912787, 140914401, 140913485, 140929704, 140924697, 140932081, 140917741, 140907191, 140910390, 140913379, 140914345], "B": [140902082, 140904432, 140906305, 140905274, 140903910, 140903807, 140906896, 140906851, 140906344, 140908551, 140906181, 140906829, 140906183, 140905516, 140935513, 140912560, 140903639, 140905940, 140907051, 140906596]}, "name": "B. Game on Ranges", "statement": "Alice and Bob play the following game. Alice has a set S of disjoint\r\nranges of integers, initially containing only one range [1, n]. In one\r\nturn, Alice picks a range [l, r] from the set S and asks Bob to pick a\r\nnumber in the range. Bob chooses a number d (l\r\nle d\r\nle r). Then Alice removes [l, r] from S and puts into the set S the\r\nrange [l, d - 1] (if l\r\nle d - 1) and the range [d + 1, r] (if d + 1\r\nle r). The game ends when the set S is empty. We can show that the\r\nnumber of turns in each game is exactly n.After playing the game, Alice\r\nremembers all the ranges [l, r] she picked from the set S, but Bob does\r\nnot remember any of the numbers that he picked. But Bob is smart, and he\r\nknows he can find out his numbers d from Alice\u2019s ranges, and so he asks\r\nyou for help with your programming skill.Given the list of ranges that\r\nAlice has picked ([l, r]), for each range, help Bob find the number d\r\nthat Bob has picked.We can show that there is always a unique way for\r\nBob to choose his number for a list of valid ranges picked by Alice.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tios::sync_with_stdio(false); cin.tie(0);\n\tint T; cin >> T;\n\twhile (T--) {\n\t\tint n; cin >> n;\n\t\tvector<int> l(n), r(n);\n\t\tvector<pair<int, int> > a(n);\n\t\tfor (int i = 0; i < n; i++) cin >> l[i] >> r[i], a[i] = make_pair(l[i], r[i]);\n\t\tsort(a.begin(), a.end());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint pos = lower_bound(a.begin(), a.end(), make_pair(l[i], r[i])) - a.begin();\n\t\t\tif (pos == 0 || a[pos - 1].first != l[i]) {\n\t\t\t\tcout << l[i] << \" \" << r[i] << \" \" << l[i] << endl;\n\t\t\t} else {\n\t\t\t\tcout << l[i] << \" \" << r[i] << \" \" << a[pos - 1].second + 1 << endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["brute force", "dfs and similar", "implementation", "sortings"], "dificulty": "1100", "interactive": false}