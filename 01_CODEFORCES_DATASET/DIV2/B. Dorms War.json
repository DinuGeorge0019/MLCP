{
    "link": "https://codeforces.com//contest/1670/problem/B",
    "problemId": "1390322",
    "problem_idx": "B",
    "shortId": "1670B",
    "contest_number": "1670",
    "problem_submissions": {
        "E": [
            156100998,
            156104485,
            156108916,
            156107756,
            156100648,
            156100656,
            156115463,
            156115332,
            156106434,
            156105992,
            156106756,
            156102783,
            156095228,
            156095823,
            156107708,
            156123887
        ],
        "D": [
            156095484,
            156091337,
            156102106,
            156097049,
            156094743,
            156093318,
            156097826,
            156112660,
            156093899,
            156099166,
            156101898,
            156095357,
            156101001,
            156110723,
            156092669,
            156094972,
            156093548,
            156098200
        ],
        "B": [
            156093818,
            156081627,
            156082334,
            156089012,
            156085695,
            156086167,
            156087956,
            156081931,
            156124817,
            156088947,
            156092504,
            156086895,
            156084557,
            156119888,
            156124153,
            156082723,
            156086168,
            156084111,
            156087742
        ],
        "F": [
            156092264,
            156098593,
            156099277,
            156103760,
            156113156,
            156116884,
            156103788,
            156096373,
            156116972,
            156112838,
            156904481,
            156114948,
            156119689,
            156110847,
            156129976,
            156106292,
            156119874,
            156103026,
            156115147,
            156111724,
            156108733
        ],
        "C": [
            156085904,
            156084420,
            156090953,
            156093920,
            156089470,
            156090841,
            156091539,
            156092125,
            156083813,
            156094804,
            156089625,
            156091655,
            156117087,
            156087179,
            156096140,
            156089472,
            156123873,
            156087762,
            156092456
        ],
        "A": [
            156079702,
            156080088,
            156079627,
            156079602,
            158677746,
            156079680,
            156081873,
            156080010,
            156079669,
            156079762,
            156080064,
            156079483,
            156080211,
            156085709,
            156079540,
            156080023,
            156096396,
            156080412,
            156082179
        ]
    },
    "name": "B. Dorms War",
    "statement": "Hosssam decided to sneak into Hemose\u2019s room while he is sleeping and\r\nchange his laptop\u2019s password. He already knows the password, which is a\r\nstring s of length n. He also knows that there are k letters of the\r\nalphabet: c_1,c_2,\r\nldots, c_k.Hosssam made a program that can do the following. The program\r\nconsiders the current password s of some length m. Then it finds all\r\npositions i (1\r\nle i<m) such that s_{i+1} is one of the k special letters. Then it\r\ndeletes all of those positions from the password s . If there are no\r\npositions to delete, then the program displays an error message which\r\nhas a very loud sound. For example, suppose the string s is \"\" and the\r\nspecial characters are \u201d and \u201d. If he runs the program once, the\r\npositions 1 and 3 will be deleted as they come before special\r\ncharacters, so the password becomes \"\". If he runs the program again, it\r\ndeletes position 1, and the password becomes \"\". If he is wise, he won\u2019t\r\nrun it a third time.Hosssam wants to know how many times he can run the\r\nprogram on Hemose\u2019s laptop without waking him up from the sound of the\r\nerror message. Can you help him?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nint vis[200];\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint T;\n\tcin >> T;\n\twhile(T--)\n\t{\n\t\tstring s;\n\t\tchar t;\n\t\tint n,k;\n\t\tcin >> n >> s >> k;\n\t\tmemset(vis,0,sizeof vis);\n\t\twhile(k--)\n\t\t{\n\t\t\tcin >> t;\n\t\t\tvis[t]=1;\n\t\t}\n\t\tint now=0,ans=0,flag=0,cnt=0;\n\t\tfor(auto x:s)\n\t\t{\n\t\t\tif(vis[x])\n\t\t\t{\n\t\t\t\tif(now>ans) cnt=0;\n\t\t\t\tans=max(ans,now);\n\t\t\t\tif(now==ans&&flag) ++cnt;\n\t\t\t\tflag=1;\n\t\t\t\tnow=0;\n\t\t\t}\n\t\t\telse ++now;\n\t\t}\n\t\tif(cnt) ++ans;\n\t\tcout << ans << \"\\n\";\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "strings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Dorms War.json",
    "editorial_link": "https://codeforces.com//blog/entry/102579",
    "editorial": "Let\u00e2\u0080\u0099s consider the non-special characters as \u00e2\u0080\u00990\u00e2\u0080\u0099 and special characters\r\nas \u00e2\u0080\u00991\u00e2\u0080\u0099 since they are indistinguishable. So now the problem is that we\r\nhave a binary string, where each \u00e2\u0080\u00991\u00e2\u0080\u0099 character removes the character\r\nbefore it each time the program is run.The trivial case is when there is\r\nonly one \u00e2\u0080\u00991\u00e2\u0080\u0099 character, the answer then is just the number of \u00e2\u0080\u00990\u00e2\u0080\u0099\r\ncharacters before it.But what if there is more than one \u00e2\u0080\u00991\u00e2\u0080\u0099 character?\r\nlets take for example when there are two \u00e2\u0080\u00991\u00e2\u0080\u0099 characters as follows: The\r\nobservation here is that when the first \u00e2\u0080\u00991\u00e2\u0080\u0099 character from the right\r\nreached the second \u00e2\u0080\u00991\u00e2\u0080\u0099, it acts as if it just replaced its place, so we\r\ncan say that each \u00e2\u0080\u00991\u00e2\u0080\u0099 character replaces another \u00e2\u0080\u00991\u00e2\u0080\u0099 as soon as it\r\nreaches it.So we can partition the binary string into small partitions\r\nwhere each partition contains only one \u00e2\u0080\u00991\u00e2\u0080\u0099 character that is the\r\nrightmost character in the partition.For example, the string can be\r\npartitioned into: We first calculate the amount of time each partition\r\nrequires to remove all the \u00e2\u0080\u00990\u00e2\u0080\u0099 characters before it, which is basically\r\nthe number of \u00e2\u0080\u00990\u00e2\u0080\u0099 characters before it. Each partition except for the\r\nfirst partition requires one more second to replace the \u00e2\u0080\u00991\u00e2\u0080\u0099 character in\r\nthe previous partition.So the answer is the maximum time required among\r\nall the partitions.\r\n"
}