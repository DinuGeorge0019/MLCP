{
    "link": "https://codeforces.com//contest/1281/problem/A",
    "problemId": "495766",
    "problem_idx": "A",
    "shortId": "1281A",
    "contest_number": "1281",
    "problem_submissions": {
        "E": [
            66919654,
            66920588,
            66925092,
            66923975,
            66921225,
            66926039,
            66924486,
            66925911,
            66919753,
            66924443,
            66921735,
            66926640,
            66923762,
            66928689,
            66923984,
            66929347,
            66922347,
            66925800,
            66926136,
            66926785
        ],
        "D": [
            66913905,
            66912980,
            66914351,
            66914888,
            66918186,
            66917312,
            66919310,
            66913455,
            66927167,
            66918040,
            66916917,
            66918767,
            66920615,
            66919931,
            66917311,
            66920679,
            66926946,
            66921289,
            66921368,
            66915749
        ],
        "C": [
            66910411,
            66909108,
            66910083,
            66911847,
            66912648,
            66912093,
            66912420,
            66917797,
            66912812,
            66913195,
            66926185,
            66911123,
            66913114,
            66915044,
            66929796,
            66916101,
            66915614,
            66912997,
            66913346,
            66920684
        ],
        "B": [
            66903686,
            66904970,
            66904261,
            66905849,
            66904183,
            70825921,
            66906323,
            66905017,
            66906316,
            66904966,
            66910332,
            66906601,
            66907853,
            66908474,
            66905210,
            66905588,
            66906778,
            66904477,
            66905850,
            66914866,
            66908783
        ],
        "A": [
            66901264,
            66901388,
            66900754,
            66900661,
            66900790,
            70825928,
            66900330,
            66900663,
            66904497,
            66901649,
            66900680,
            66901270,
            66900668,
            66900286,
            66902138,
            66900321,
            66900528,
            66900477,
            66900340,
            66913834,
            66903613
        ],
        "F": [
            66933294,
            67581587
        ]
    },
    "name": "A. Suffix Three",
    "statement": "We just discovered a new data structure in our research group: a !It\u2019s\r\nvery useful for natural language processing. Given three languages and\r\nthree suffixes, a suffix three can determine which language a sentence\r\nis written in.It\u2019s super simple, 100\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int t; cin >> t;\n    for (int tt = 0; tt < t; tt++) {\n        string s; cin >> s;\n        string tmp;\n        string a;\n        for (char c : s) {\n            if (c == '_') {\n                reverse(tmp.begin(), tmp.end());\n                if (tmp.find(\"op\") == 0) {\n                    a = \"FILIPINO\";\n                }\n                if (tmp.find(\"used\") == 0 || tmp.find(\"usam\") == 0) {\n                    a = \"JAPANESE\";\n                }\n                if (tmp.find(\"adinm\") == 0) {\n                    a = \"KOREAN\";\n                }\n                tmp = \"\";\n            }\n            else {\n                tmp += c;\n            }\n        }\n        reverse(tmp.begin(), tmp.end());\n        if (tmp.find(\"op\") == 0) {\n            a = \"FILIPINO\";\n        }\n        if (tmp.find(\"used\") == 0 || tmp.find(\"usam\") == 0) {\n            a = \"JAPANESE\";\n        }\n        if (tmp.find(\"adinm\") == 0) {\n            a = \"KOREAN\";\n        }\n        cout << a << \"\\n\";\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Suffix Three.json",
    "editorial_link": "https://codeforces.com//blog/entry/72212",
    "editorial": "The simplest way to solve it is to use your language\u00e2\u0080\u0099s builtin string\r\nmethods like . (It might be different in your preferred language.)\r\nAlternatively, if you know how to access the individual letters of a\r\nstring, then you may implement something similar to yourself.To print\r\nthe required output, you can just use something like: if\r\ns.endswith(\"po\"): print(\"FILIPINO\")if s.endswith(\"desu\") or\r\ns.endswith(\"masu\"): print(\"JAPANESE\")if s.endswith(\"mnida\"):\r\nprint(\"KOREAN\")Alternatively, notice that you can simply check the last\r\nletter since , and are distinct, so it can be simplified slightly. One\r\ncan even write a Python one-liner (for a single test case): print({\"o\":\r\n\"FILIPINO\", \"a\": \"KOREAN\", \"u\": \"JAPANESE\"}[input()[-1]])\r\n"
}