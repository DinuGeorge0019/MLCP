{
    "link": "https://codeforces.com//contest/1365/problem/E",
    "problemId": "643140",
    "problem_idx": "E",
    "shortId": "1365E",
    "contest_number": "1365",
    "problem_submissions": {
        "G": [
            82837838,
            82865836,
            82846144,
            82865744,
            83288423,
            83288390,
            83115367,
            83113068,
            82891046,
            83317408
        ],
        "F": [
            82823576,
            82831163,
            82869715,
            82841291,
            82797913,
            82821383,
            82823224,
            82820878,
            82825962,
            82827764,
            82819318,
            82822994,
            82828397,
            82835003,
            82834772,
            82828790,
            83116114,
            82838680,
            82843357,
            82850042
        ],
        "E": [
            82816827,
            82806889,
            82828546,
            82852781,
            82820451,
            82809338,
            82811048,
            82815094,
            82813767,
            82818099,
            82819025,
            82806699,
            82809270,
            82814661,
            82803838,
            82820792,
            82820031,
            82816700,
            82817857,
            82816698
        ],
        "D": [
            82812948,
            82823500,
            82822183,
            82824676,
            82812570,
            82806668,
            82804333,
            82805751,
            82808225,
            82811038,
            82801401,
            82805193,
            82808495,
            82818445,
            82814370,
            83282843,
            82816083,
            82808400,
            82807406,
            82806087
        ],
        "C": [
            82796097,
            82796764,
            82804011,
            82805788,
            82786984,
            82796314,
            82793579,
            82793092,
            82796581,
            82800342,
            82827239,
            82793084,
            82792671,
            82807140,
            82802231,
            82801070,
            82793918,
            82793032,
            82794670
        ],
        "B": [
            82789379,
            82791264,
            82799267,
            82793610,
            82787860,
            82790701,
            82790486,
            82792963,
            82793820,
            82794046,
            82787508,
            82790351,
            82789454,
            82795420,
            82796086,
            83567414,
            83567289,
            83567233,
            83566819,
            83566572,
            83566088,
            83137777,
            83136749,
            83136555,
            82797438,
            82788975,
            82789229,
            82789419
        ],
        "A": [
            82787406,
            82788164,
            82795856,
            82788300,
            82789945,
            82787354,
            82787533,
            82792868,
            82790605,
            82788592,
            83313475,
            82823189,
            82788613,
            82787440,
            82788379,
            82788620,
            82787269,
            82787662,
            82787203,
            82787209
        ]
    },
    "name": "E. Maximum Subsequence Value",
    "statement": "Ridhiman challenged Ashish to find the maximum valued subsequence of an\r\narray a of size n consisting of positive integers. The value of a\r\nnon-empty subsequence of k elements of a is defined as\r\nsum 2^i over all integers i\r\nge 0 such that at least\r\nmax(1, k - 2) elements of the subsequence have the i-th bit set in their\r\nbinary representation (value x has the i-th bit set in its binary\r\nrepresentation if\r\nlfloor\r\nfrac{x}{2^i}\r\nrfloor\r\nmod 2 is equal to 1). Recall that b is a subsequence of a, if b can be\r\nobtained by deleting some(possibly zero) elements from a.Help Ashish\r\nfind the maximum value he can get by choosing some subsequence of a.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tint t=1;\n\t// scanf(\"%d\" ,&t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\", &n);\n\t\tvector <long long> a(n);\n\t\tfor(auto&i:a){\n\t\t\tscanf(\"%lld\", &i);\n\t\t}\n\t\tlong long ans=0;\n\t\tfor(int i = 0;i < n;i ++){\n\t\t\tfor(int j = 0;j < i;j ++){\n\t\t\t\tfor(int k = 0;k < j;k ++){\n\t\t\t\t\tans=max(ans, a[i]|a[j]|a[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(n<3){\n\t\t\tfor(int i = 0;i < n;i ++)\n\t\t\t\tans|=a[i];\n\t\t}\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Maximum Subsequence Value.json",
    "editorial_link": "https://codeforces.com//blog/entry/78504",
    "editorial": "For subsets of size up to , their value is the bitwise OR of all\r\nelements in it. For any subset of size greater than , it turns out that\r\nif we pick any subset of elements within it, then its value is greater\r\nthan or equal to the value of !Let be the size of the chosen subset. For\r\n, is equal to . This implies that their value is equal to the bitwise OR\r\nof all the elements in it (since we need to add for all such that at\r\nleast element in the subset has -th bit set in its binary\r\nrepresentation).Consider any subset of size . Let be any number such\r\nthat the -th bit is set in at least elements of . If we pick any\r\nelements of this subset, then by Pigeonhole principle the -th bit would\r\nalso be set in at least one of these elements! If this is not true then\r\nthe there are elements in which do not have the -th bit set, which is\r\nnot possible.So for any subset of size greater than , its value is less\r\nthan or equal to the value of any subset consisting of elements from .\r\nHence, we only need to check all subsets of size up to .Time complexity:\r\n",
    "hint": []
}