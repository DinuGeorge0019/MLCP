{
    "link": "https://codeforces.com//contest/1332/problem/D",
    "problemId": "578664",
    "problem_idx": "D",
    "shortId": "1332D",
    "contest_number": "1332",
    "problem_submissions": {
        "G": [
            74991585,
            75037266,
            77351427
        ],
        "F": [
            74972207,
            74968358,
            74971720,
            74973348,
            74978859,
            74982724,
            74982735,
            74986275,
            74983269,
            74987837,
            74986665,
            74991793,
            74983515,
            74979782,
            74972196,
            74981046,
            74990576,
            74985479,
            74988801,
            74990228
        ],
        "E": [
            74961161,
            74955523,
            74954162,
            74962710,
            74964351,
            74963597,
            74954423,
            74965477,
            74965579,
            74964400,
            74967235,
            74963711,
            74965887,
            74966494,
            74989155,
            74967207,
            74974070,
            74976881,
            74974061,
            74976693
        ],
        "D": [
            74952985,
            74945715,
            74946665,
            74947888,
            74950207,
            74948751,
            74939741,
            74946829,
            74947089,
            74946824,
            74948968,
            74945728,
            74948946,
            74959413,
            74956458,
            74959082,
            74952408,
            74962224,
            74953788,
            74952090
        ],
        "C": [
            74942005,
            74937624,
            74936343,
            74941037,
            74943187,
            74945247,
            74948388,
            74939023,
            74936776,
            74940250,
            74942517,
            74933392,
            74937059,
            74947682,
            74933984,
            74947387,
            74935824,
            74944324,
            74945827,
            74930594
        ],
        "B": [
            74937320,
            74934172,
            74933187,
            74935530,
            74936050,
            74936599,
            74943429,
            74933909,
            74931708,
            74932124,
            74935133,
            74939689,
            74933624,
            74939412,
            74938935,
            74936225,
            74945372,
            74938477,
            74936882,
            74941959
        ],
        "A": [
            74930167,
            74929341,
            74931394,
            74930114,
            74930077,
            74932449,
            74934529,
            74928977,
            74928761,
            74928547,
            74928820,
            74928500,
            74928970,
            74929648,
            74959446,
            74929583,
            74931416,
            74933421,
            74928735,
            74938510
        ]
    },
    "name": "D. Walk on Matrix",
    "statement": "Bob is playing a game named \"Walk on Matrix\".In this game, player is\r\ngiven an n\r\ntimes m matrix A=(a_{i,j}), i.e. the element in the i-th row in the j-th\r\ncolumn is a_{i,j}. Initially, player is located at position (1,1) with\r\nscore a_{1,1}. To reach the goal, position (n,m), player can move right\r\nor down, i.e. move from (x,y) to (x,y+1) or (x+1,y), as long as player\r\nis still on the matrix.However, each move changes player\u2019s score to the\r\nbitwise AND of the current score and the value at the position he moves\r\nto.Bob can\u2019t wait to find out the maximum score he can get using the\r\ntool he recently learnt dynamic programming. Here is his algorithm for\r\nthis problem. However, he suddenly realize that the algorithm above\r\nfails to output the maximum score for some matrix A. Thus, for any given\r\nnon-negative integer k, he wants to find out an n\r\ntimes m matrix A=(a_{i,j}) such that 1\r\nle n,m\r\nle 500 (as Bob hates large matrix); 0\r\nle a_{i,j}\r\nle 3\r\ncdot 10^5 for all 1\r\nle i\r\nle n,1\r\nle j\r\nle m (as Bob hates large numbers); the difference between the maximum\r\nscore he can get and the output of his algorithm is k. It can be shown\r\nthat for any given integer k such that 0\r\nle k\r\nle 10^5, there exists a matrix satisfying the above constraints.Please\r\nhelp him with it!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nint k, m = 1;\n\nint main()\n{\n\tstd::cin >> k;\n\tputs(\"3 3\");\n\twhile (m <= k) m <<= 1;\n\tstd::cout << m + k << \" \" << k << \" \" << k << std::endl;\n\tstd::cout << m << \" \" << m << \" \" << m + k << std::endl;\n\tstd::cout << 0 << \" \" << 0 << \" \" << k << std::endl;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Walk on Matrix.json",
    "editorial_link": "https://codeforces.com//blog/entry/75432",
    "editorial": "In fact, the following matrix will work: To find such a matrix, one\r\nshould find out why the dp solution fails.One should notice that and dp\r\nsolution will choose the optimal path from to for later decision.\r\nHowever, we should notice that we can only discard the suboptimal result\r\nif and only if rather than . Based on above analysis, we can construct\r\nthe matrix easily. In fact, even if is fixed satisfying that and , we\r\ncould easily construct a matrix for a given based on our matrix.\r\n"
}