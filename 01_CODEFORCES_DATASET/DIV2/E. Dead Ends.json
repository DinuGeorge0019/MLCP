{
    "link": "https://codeforces.com//contest/53/problem/E",
    "problemId": "281",
    "problem_idx": "E",
    "shortId": "53E",
    "contest_number": "53",
    "problem_submissions": {
        "D": [
            239021,
            239193,
            238722,
            239346,
            239182,
            239848,
            239737,
            238790,
            238737,
            238732,
            238838,
            238854,
            238943,
            239423
        ],
        "C": [
            238660,
            238284,
            238456,
            239097,
            238366,
            238317,
            238648,
            238222,
            238274,
            238168,
            238487,
            238198,
            238286,
            238820
        ],
        "B": [
            238516,
            238801,
            239508,
            238926,
            239954,
            239467,
            238856,
            240487,
            241511,
            239803
        ],
        "A": [
            237956,
            237921,
            237848,
            238380,
            239531,
            242667,
            237923,
            237920,
            237851,
            237863,
            237845,
            237871,
            237932,
            237861,
            237905
        ],
        "E": [
            267303,
            243881
        ]
    },
    "name": "E. Dead Ends",
    "statement": "Life in Bertown has become hard. The city has too many roads and the\r\ngovernment spends too much to maintain them. There are junctions and two\r\nway roads, at which one can get from each junction to any other one. The\r\nmayor wants to close some roads so that the number of roads left totaled\r\nto roads and it were still possible to get from each junction to any\r\nother one. Besides, the mayor is concerned with the number of dead ends\r\nwhich are the junctions from which only one road goes. There shouldn\u2019t\r\nbe too many or too few junctions. Having discussed the problem, the\r\nmayor and his assistants decided that after the roads are closed, the\r\nroad map should contain exactly dead ends. Your task is to count the\r\nnumber of different ways of closing the roads at which the following\r\nconditions are met: There are exactly roads left. It is possible to get\r\nfrom each junction to any other one. There are exactly dead ends on the\r\nresulting map. Two ways are considered different if there is a road that\r\nis closed in the first way, and is open in the second one.\r\n",
    "solutions": [
        "/* \n * File:   E.cpp\n * Author: J_M\n *\n * Created on 2011\u5e741\u670829\u65e5, \u4e0a\u534811:56\n */\n\n#include <cstdlib>\n#include <iostream>\n#include <stdio.h>\nusing namespace std;\n#define two(x) (1<<x)\nint dp[two(10)+5][two(10)+5];\nint n,m,k;\nint e[105][2];\nint main(int argc, char** argv) {\n    cin>>n>>m>>k;\n    for (int i=0;i<m;i++){\n        cin>>e[i][0]>>e[i][1];\n        e[i][0]--; e[i][1]--;\n        int u=two(e[i][0]),v=two(e[i][1]);\n        dp[u|v][u|v]=1;\n    }\n    int res=0;\n    for (int i=0;i<two(n);i++) for (int j=0;j<two(n);j++) if (dp[i][j]){\n        int cnt=0;\n        for (int t=0;t<n;t++) if (two(t) & j)\n            cnt++;\n        if (dp[i][j]>1 && cnt>1)\n            dp[i][j]/=cnt;\n        if (cnt==k && i==two(n)-1)\n            res+=dp[i][j];\n        for (int t=0;t<m;t++){\n            int u=e[t][0],v=e[t][1];\n            int x=i,y=j;\n            if ((i & two(u))!=0 && (i & two(v))==0){\n                x|=two(v);\n                if (y & two(u))\n                    y^=two(u);\n                y|=two(v);\n            }else\n            if ((i & two(u))==0 && (i & two(v))!=0){\n                x|=two(u);\n                if (y & two(v))\n                    y^=two(v);\n                y|=two(u);\n            }else\n                continue;\n            dp[x][y]+=dp[i][j];\n        }\n    }\n    cout<<res<<endl;\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "dp"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Dead Ends.json",
    "editorial_link": "https://codeforces.com//blog/entry/1065",
    "editorial": "The first thing you should notice - - n <= 10. It means, that we have exponential solution and we can rundown some subsets.\n\nSolution is dynamic programming d[m][subm] - number of ways to make connected tree from subgraph m (it's a bit mask) with dead ends subm (it's also a bit mask). Answer is sum of d[2n-1][x], where |x|=k (size of x as a subset is k).\nRecalculating isn't really hard. For empty subset and subset of two vertexes (either 0 or 1) answer is oblivious. Also you should know that there is no tree with exactly one dead end (it's easy to prove). Now for greater subsets: rundown i from subm - one of dead ends. Cut it off from tree along some edge to b (b shouldn't be a dead end, otherwise we got unconnected graph). Now we have tree with lower count of vertexes and either decreased 1 number of dead ends or with changed i to b (if b had exactly two neighbors). Answer for this tree we know already. In the end of summarizing we should divide answer by k - each tree has been taken as many times, as it has dead ends (k)."
}