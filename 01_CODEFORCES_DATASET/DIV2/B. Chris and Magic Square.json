{
    "link": "https://codeforces.com//contest/711/problem/B",
    "problemId": "69433",
    "problem_idx": "B",
    "shortId": "711B",
    "contest_number": "711",
    "problem_submissions": {
        "E": [
            20243389,
            20243503,
            20251107,
            20247122,
            20236128,
            20244311,
            20247031,
            20249581,
            20251290,
            20251110,
            20236252,
            20252814,
            20251720,
            20253127,
            20249558,
            20253691,
            20251603,
            20254289,
            20255257,
            20254984
        ],
        "D": [
            20236748,
            20238445,
            20241120,
            20241449,
            20243957,
            20248074,
            20235096,
            20241386,
            20243419,
            20245769,
            20252016,
            20241009,
            20246037,
            20248033,
            20253018,
            20249456,
            20247107,
            20247154,
            20250386,
            20243861
        ],
        "C": [
            20233774,
            20236081,
            20235214,
            20238143,
            20247473,
            20235216,
            20238803,
            20236811,
            20238264,
            20238615,
            20243230,
            20238055,
            20240001,
            20236172,
            20233634,
            20240235,
            20250548,
            20242121,
            20238810,
            20252383
        ],
        "B": [
            20231663,
            20231286,
            20231641,
            20233400,
            20241564,
            20239107,
            20249116,
            20232416,
            20233691,
            20233328,
            20237744,
            20233188,
            20232782,
            20232671,
            20234921,
            20232432,
            20236746,
            20235044,
            20234855,
            20236166
        ],
        "A": [
            20229146,
            20229063,
            20229191,
            20229690,
            20306899,
            20229217,
            20232219,
            20240668,
            20229251,
            20229508,
            20229028,
            20230826,
            20229961,
            20229487,
            20229092,
            20231432,
            20229019,
            20229332,
            20231409,
            20230327,
            20229746
        ]
    },
    "name": "B. Chris and Magic Square",
    "statement": "ZS the Coder and Chris the Baboon arrived at the entrance of Udayland.\r\nThere is a magic grid on the entrance which is filled with integers.\r\nChris noticed that exactly one of the cells in the grid is empty, and to\r\nenter Udayland, they need to fill a into the empty cell.Chris tried\r\nfilling in random numbers but it didn\u2019t work. ZS the Coder realizes that\r\nthey need to fill in a positive integer such that the numbers in the\r\ngrid form . This means that he has to fill in a positive integer so that\r\nthe sum of the numbers in each row of the grid (), each column of the\r\ngrid (), and the two long diagonals of the grid (the main diagonal and\r\nthe secondary diagonal ) are equal. Chris doesn\u2019t know what number to\r\nfill in. Can you help Chris find the correct positive integer to fill in\r\nor determine that it is impossible?\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <ctime>\n#include <cassert>\n#include <cmath>\n#include <algorithm>\n#include <utility>\n\n#define f first\n#define s second\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\n\nconst int maxn = (int)1e6;\nconst int inf = (int)1e9;\nconst int mod = (int)1e9 + 7;\nconst ll INF = (ll)1e18;\nconst double eps = 1e-9;\n\nint n;\nint a[1010][1010];\n\nint main()\n{\n\n\tcin >> n;\n\tint x = -1, y = -1;\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tcin >> a[i][j];\n\t\t\tif (a[i][j] == 0) {\n\t\t\t\tx = i;\n\t\t\t\ty = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (n == 1) {\n\t\tcout << 1 << endl;\n\t\treturn 0;\n\t}\n\t\n\tll s = 0;\n\t\n\tint r = (x + 1) % n;\n\tfor (int i = 0; i < n; i++) s += a[r][i];\n\t\n\tll cur = 0;\n\tfor (int i = 0; i < n; i++) cur += a[x][i];\n\t\n\tll val = s - cur;\n\t\n\tif (val <= 0) {\n\t\tcout << -1 << endl;\n\t\treturn 0;\n\t}\n\t\n\tfor (int i = 0; i < n; i++) {\n\t\tll row = 0, col = 0;\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\trow += a[i][j];\n\t\t\tcol += a[j][i];\n\t\t}\n\t\tif (i == x) row += val;\n\t\tif (i == y) col += val;\n\t\tif (row != s || col != s) {\n\t\t\tcout << -1 << endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n\tll diag = 0, pob = 0;\n\t\n\tfor (int i = 0; i < n; i++) {\n\t\tdiag += a[i][i];\n\t\tpob += a[i][n - 1 - i];\n\t}\n\t\n\tif (x == y) diag += val;\n\tif (x + y == n - 1) pob += val;\n\t\n\tif (diag != s || s != pob) {\n\t\tcout << -1 << endl;\n\t\treturn 0;\n\t}\n\t\n\tcout << val << endl;\n\t\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Chris and Magic Square.json",
    "editorial_link": "https://codeforces.com//blog/entry/46830",
    "editorial": "Firstly, when , output any positive integer in the range will work.\r\nOtherwise, we calculate the sum of the values in each row, column and\r\nthe two long diagonals, and also keep track which row and column the\r\nempty square is in and also which diagonals it lies on. Finally, we can\r\nuse the sums to determine the value of the empty square or that it is\r\nimpossible to make the square magic. Keep in mind that the blank must be\r\nfilled with a , so doesn\u00e2\u0080\u0099t work. Also, remember to use 64-bit integers\r\nto store the sums or it will overflow. (and will fail on the overflow\r\ntest)Time Complexity :\r\n"
}