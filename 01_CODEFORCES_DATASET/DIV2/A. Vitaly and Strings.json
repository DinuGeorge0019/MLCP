{
    "link": "https://codeforces.com//contest/518/problem/A",
    "problemId": "22986",
    "problem_idx": "A",
    "shortId": "518A",
    "contest_number": "518",
    "problem_submissions": {
        "C": [
            9988883,
            9986333,
            9990862,
            9987399,
            9998129,
            9989956,
            9985416,
            9991301,
            9988773,
            9987777,
            9986792,
            9990874,
            9996855,
            9993083,
            9991646,
            9993492,
            9989796
        ],
        "B": [
            9986603,
            9991969,
            9985412,
            9984010,
            9991935,
            9983836,
            9985675,
            9984464,
            9984814,
            9987730,
            9987512,
            9987182,
            9990867,
            9988157,
            9985156,
            9986048
        ],
        "D": [
            9984146,
            9987656,
            9983589,
            9996581,
            9988389,
            9983991,
            10019512,
            9994388,
            9990798,
            9998733,
            9989910,
            9992602,
            9994055,
            9988668,
            9997395,
            9994329,
            10003029
        ],
        "A": [
            9982691,
            9984919,
            9983532,
            9982857,
            9984890,
            9982599,
            9983377,
            9983139,
            9982876,
            10006211,
            9984273,
            10016035,
            9996459,
            9986695,
            9983905
        ],
        "F": [
            9995207,
            10007934
        ],
        "E": [
            10000287,
            10002761,
            10005947,
            10001378,
            9999399,
            10002023,
            10011774
        ]
    },
    "name": "A. Vitaly and Strings",
    "statement": "Vitaly is a diligent student who never missed a lesson in his five years\r\nof studying in the university. He always does his homework on time and\r\npasses his exams in time. During the last lesson the teacher has\r\nprovided two strings and to Vitaly. The strings have the same length,\r\nthey consist of lowercase English letters, string is lexicographically\r\nsmaller than string . Vitaly wondered if there is such string that is\r\nlexicographically larger than string and at the same is\r\nlexicographically smaller than string . This string should also consist\r\nof lowercase English letters and have the length equal to the lengths of\r\nstrings and . Letâ€™s help Vitaly solve this easy problem!\r\n",
    "solutions": [
        "#include<vector>\n#include<list>\n#include<map>\n#include<set>\n#include<deque>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<algorithm>\n#include<functional>\n#include<numeric>\n#include<utility>\n#include<iostream>\n#include<sstream>\n#include<iomanip>\n#include<cmath>\n#include<cstdlib>\n#include<cctype>\n#include<string>\n#include<cstring>\n#include<cstdio>\n#include<ctime>\n#include<climits>\n#include<complex>\n#include<cassert>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define sz(x) (int)((x).size())\n#define all(x) x.begin(),x.end()\n#define clr(x) memset((x),0,sizeof(x))\n#define cdp(x) memset((x),-1,sizeof(x))\n#define rep(i,n) for (i=0;i<n;i++)\n#define Rep(i,a,b) for (i=a;i<=b;i++)\n#define ff(i,x) for (i=start[x];i!=-1;i=a[i].next)\n#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)\nusing namespace std;\nconst double eps=1e-8;\nconst double pi=acos(-1.0);\nint dblcmp(double d){if (fabs(d)<eps)return 0;return d>eps?1:-1;}\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\ntypedef vector<pii> vpi;\nint main()\n{\n\tstring s,t;\n\tcin>>s>>t;\n\tint i,j,k,l=sz(s);\n\tint c=1;\n\ti=l-1;\n\twhile (c)\n\t{\n\t\ts[i]++;\n\t\tc=0;\n\t\tif (s[i]=='z'+1)\n\t\t{\n\t\t\ts[i]='a';\n\t\t\tc=1;\n\t\t}\n\t\ti--;\n\t}\n\tif (s==t)cout<<\"No such string\"<<endl;\n\telse cout<<s<<endl;\n\treturn 0;\n}\n\t\t\t"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "strings"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Vitaly and Strings.json",
    "editorial_link": "https://codeforces.com//blog/entry/16598",
    "editorial": "To solve this problem we can, for example, find string next, which lexicographically next to string s and check that string next is lexicographically less than string t. If string next is lexicographically smaller than string t, print string next and finish algorithm. If string next is equal to string t print No such string.\n\nTo find string next, which lexicographically next to string s, at first we need to find maximal suffix of string s, consisting from letters 'z', change all letters 'z' in this suffix on letters 'a', and then letter before this suffix increase on one. I.e. if before suffix was letter, for example, 'd', we need to change it on letter 'e'.",
    "hint": []
}