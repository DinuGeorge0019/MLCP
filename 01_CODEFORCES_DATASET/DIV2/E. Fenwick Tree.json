{
    "link": "https://codeforces.com//contest/1972/problem/E",
    "problemId": "2620261",
    "problem_idx": "E",
    "shortId": "1972E",
    "contest_number": "1972",
    "problem_submissions": {
        "E": [
            258907706,
            258906689,
            258908735,
            258886738,
            258901485,
            258906022,
            258913488,
            258911752,
            258913907,
            258913999,
            258916450,
            258914641,
            258910690,
            258920127,
            258912063,
            258910772,
            258915135,
            258914430
        ],
        "D2": [
            258898687,
            258895159,
            258892501,
            258911037,
            258914022,
            258908970,
            258902827,
            258898337,
            258897157,
            258907327,
            258896398,
            258902164,
            258918202,
            258887350,
            258904678,
            258922033,
            258908345,
            258904117
        ],
        "D1": [
            258879224,
            258887924,
            258886804,
            258889175,
            258886155,
            258888199,
            258887247,
            258892352,
            258882986,
            258888686,
            258890551,
            258888559,
            258871438,
            258899829,
            258888037,
            258891042,
            258898086
        ],
        "C": [
            258877059,
            258881081,
            258882446,
            258885988,
            258877387,
            258876397,
            258878529,
            258880771,
            258878031,
            258885936,
            258887870,
            258877926,
            258892416,
            258887161,
            258883084,
            258878181,
            258887720
        ],
        "B": [
            258867491,
            258869795,
            258867759,
            258890058,
            258867358,
            258869952,
            258866940,
            258871940,
            258871253,
            258870378,
            258871631,
            258870002,
            258877290,
            258868779,
            258871179,
            258886225,
            258878415
        ],
        "A": [
            258864858,
            258865079,
            258865742,
            258864993,
            258865457,
            258865824,
            258864584,
            258865871,
            258870891,
            258866770,
            258865991,
            258864627,
            258872625,
            258865600,
            258867355,
            258871468,
            258864633
        ],
        "F": [
            258956362
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129027",
    "editorial": "It's well-known that Fenwick Tree is the data structure shown in the image below, and the sum of each subtree is stored at each vertex (i.e. c=f(a)\n and cu=?v in subtree of uav\n).\n\n\n\nDenote the depth of a vertex u\n as dep(u)\n. Assume that b=fk(a)\n. Consider a vertex u\n and one of its ancestors v\n. Let ?d=dep(u)?dep(v)\n. It can be easily proved (by using the stars and bars method or generating functions) that the coefficient of au\n in bv\n is (?d+k?1?d)\n.\n\nObviously, au=bu\n is satisfied for each leaf u\n. Enumerate each vertex u\n whose a\n value is already known (just in the increasing order is fine), and all its ancestors v\n, remove the coefficient?au\n part from bv\n, and we can calculate the a\n value of each vertex.\n\nTime complexity is O(nlogn)\n because the height of a Fenwick Tree is O(logn)\n.",
    "name": "E. Fenwick Tree",
    "statement": "Let\r\noperatorname{lowbit}(x) denote the value of the lowest binary bit of x,\r\ne.g.\r\noperatorname{lowbit}(12)=4,\r\noperatorname{lowbit}(8)=8.For an array a of length n, if an array s of\r\nlength n satisfies s_k=\r\nleft(\r\nsum\r\nlimits_{i=k-\r\noperatorname{lowbit}(k)+1}^{k}a_i\r\nright)\r\nbmod 998\r\n,244\r\n,353 for all k, then s is called the of a. Let’s denote it as s=f(a).For\r\na positive integer k and an array a, f^k(a) is defined as follows:\r\nf^k(a)=\r\nbegin{cases} f(a)&\r\ntextrm{if }k=1\r\nf(f^{k-1}(a))&\r\ntextrm{otherwise.}\r\nend{cases} You are given an array b of length n and a positive integer\r\nk. Find an array a that satisfies 0\r\nle a_i < 998\r\n,244\r\n,353 and f^k(a)=b. It can be proved that an answer always exists. If\r\nthere are multiple possible answers, you may print any of them.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>using namespace std; #define int int64_t#define pb push_back#define pii pair<int, int>#define st first#define nd second#define sz(x) (int)(x).size()#define all(x) (x).begin(), (x).end() const int MAXN = 200'009;const int MOD = 998244353; int tab[MAXN];int ans[MAXN];vector<int> G[MAXN];int deg[MAXN];int dp[MAXN]; int F(int a, int b) {\tint c = 1;\twhile(b) {\t\tif(b%2) c = c*a%MOD;\t\ta = a*a%MOD;\t\tb/=2;\t}\treturn c;} void solve() {\tint n, K;\tcin >> n >> K;\tK--;\tdp[0] = 1;\tfor(int i=1;i<=n;i++) {\t\tdp[i] = dp[i-1]*(i+K)%MOD*F(i, MOD-2)%MOD;\t}\tfor(int i=1;i<=n;i++) {\t\tG[i].clear();\t\tdeg[i] = 0;\t\tfor(int j=i;j<=n;j+=j&(-j)) {\t\t\t// cout << i << \" -> \" << j << \"\\n\";\t\t\tG[i].pb(j);\t\t\tdeg[j]++;\t\t}\t}\tqueue<int> q;\tfor(int i=1;i<=n;i++) {\t\tcin >> tab[i];\t\tif(deg[i]==1) {\t\t\tq.push(i);\t\t}\t}\twhile(sz(q)) {\t\tint x = q.front();\t\tq.pop();\t\tans[x] = tab[x];\t\tfor(int i=0;i<sz(G[x]);i++) {\t\t\tint y = G[x][i];\t\t\ttab[y] -= ans[x]*dp[i];\t\t\ttab[y] %= MOD;\t\t\tif(tab[y]<0) tab[y] += MOD;\t\t\tdeg[y]--;\t\t\tif(deg[y]==1) \t\t\t\tq.push(y);\t\t}\t}\tfor(int i=1;i<=n;i++) {\t\tcout << ans[i] << \" \";\t}\tcout << \"\\n\";} int32_t main() {\tios_base::sync_with_stdio(false);\tcin.tie(NULL);\t\tint t=1;\tcin >> t;\twhile(t--) {\t\tsolve();\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "data structures",
        "math",
        "matrices"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Fenwick Tree.json",
    "hint": []
}