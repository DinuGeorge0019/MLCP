{
    "link": "https://codeforces.com//contest/1831/problem/B",
    "problemId": "1942562",
    "problem_idx": "B",
    "shortId": "1831B",
    "contest_number": "1831",
    "problem_submissions": {
        "F": [
            208138276,
            207709337
        ],
        "E": [
            208138261,
            207648682,
            207658220,
            207656838,
            207666357,
            207774368,
            207656515,
            207695977,
            207710932,
            207657876,
            208163887,
            207670786,
            207664348,
            207669868,
            207660228
        ],
        "D": [
            208138229,
            207624019,
            207622747,
            207707096,
            207639773,
            207642056,
            207665762,
            207606856,
            207612471,
            207613443,
            207614547,
            207617717,
            207621891,
            207622928,
            207622371,
            207623544,
            207626326,
            207683940,
            207628627
        ],
        "C": [
            208138202,
            207603654,
            207591133,
            207610375,
            207604106,
            207604842,
            207591198,
            207597318,
            207602578,
            207595759,
            207597417,
            207600531,
            207601702,
            207596236,
            207598453,
            207596408,
            207607400,
            207594213,
            207608501,
            207603207
        ],
        "B": [
            207933759,
            207587309,
            207585317,
            207591044,
            207597740,
            207626518,
            207586353,
            207592366,
            207588011,
            207586628,
            207590623,
            207592643,
            207591011,
            207586905,
            209739181,
            207587547,
            207588237,
            207602435,
            207588035,
            207591775,
            207591535
        ],
        "A": [
            207933729,
            207580780,
            207580051,
            207582133,
            207593347,
            207580551,
            207581151,
            207591960,
            207580225,
            207581009,
            207582654,
            207583238,
            207580711,
            207581264,
            209739158,
            207580917,
            207581616,
            207598296,
            207580446,
            207582701,
            207581592
        ]
    },
    "name": "B. Array merging",
    "statement": "You are given two arrays a and b both of length n.You will merge^\r\ndagger these arrays forming another array c of length 2\r\ncdot n. You have to find the maximum length of a subarray consisting of\r\nequal values across all arrays c that could be obtained.^\r\ndagger A merge of two arrays results in an array c composed by\r\nsuccessively taking the first element of either array (as long as that\r\narray is nonempty) and removing it. After this step, the element is\r\nappended to the back of c. We repeat this operation as long as we can\r\n(i.e. at least one array is nonempty).\r\n",
    "solutions": [
        "// LUOGU_RID: 111682333\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate < typename T >\ninline const void read(T &x)\n{\n\tbool flg = x = 0;\n\tchar c;\n\twhile ((c = getchar()) < 48 || c > 57)\n\t\tflg |= c == '-';\n\tdo\n\t\tx = (x << 1) + (x << 3) + (c ^ 48);\n\twhile ((c = getchar()) > 47 && c < 58);\n\tif (flg) x = -x;\n}\n\nint OUTPUT[45];\n\ntemplate < typename T >\ninline const void write(T x)\n{\n\tif (x < 0)\n\t{\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tint len = 0;\n\tdo\n\t{\n\t\tOUTPUT[++len] = x % 10 | 48;\n\t\tx /= 10;\n\t}while (x);\n\twhile (len)\n\t\tputchar(OUTPUT[len--]);\n}\n\ntemplate < typename T >\ninline const void writesp(const T x)\n{\n\twrite(x);\n\tputchar(32);\n}\n\ntemplate < typename T >\ninline const void writeln(const T x)\n{\n\twrite(x);\n\tputchar(10);\n}\n\nconst int N = 1e6 + 5;\nint T, n, a[N], b[N], s1[N], s2[N];\n\nint main()\n{\n//\tfreopen(\".in\", \"r\", stdin);\n//\tfreopen(\".out\", \"w\", stdout);\n\tread(T);\n\twhile (T--)\n\t{\n\t\tread(n);\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tread(a[i]);\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tread(b[i]);\n\t\tint m = (n << 1);\n\t\tfor (int i = 1; i <= m; ++i)\n\t\t\ts1[i] = s2[i] = 0;\n\t\tfor (int i = 1; i <= n;)\n\t\t{\n\t\t\tint r = i;\n\t\t\twhile (r < n && a[r + 1] == a[i])\n\t\t\t\t++r;\n\t\t\ts1[a[i]] = max(s1[a[i]], r - i + 1);\n\t\t\ti = r + 1;\n\t\t}\n\t\tfor (int i = 1; i <= n;)\n\t\t{\n\t\t\tint r = i;\n\t\t\twhile (r < n && b[r + 1] == b[i])\n\t\t\t\t++r;\n\t\t\ts2[b[i]] = max(s2[b[i]], r - i + 1);\n\t\t\ti = r + 1;\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 1; i <= m; ++i)\n\t\t\tans = max(ans, s1[i] + s2[i]);\n\t\twriteln(ans);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Array merging.json",
    "editorial_link": "https://codeforces.com//blog/entry/116527",
    "editorial": "SolutionLet be the length of the longest subarray from containing only\r\nelements equal to . If doesn\u00e2\u0080\u0099t appear in , then .Similarly, let be the\r\nlength of the longest subarray from containing only elements equal to .\r\nIf doesn\u00e2\u0080\u0099t appear in , then . and can be computed in by scanning the\r\narray while updating current maximal subarray.When merging two arrays,\r\nit is possible to force a particular subarray to be adjacent to another\r\nparticular subarray in the merged array. ProofWe can construct the\r\nmerged array as follows: If , then the merged array will have a subarray\r\nconsisting of equal elements.Therefore, the answer is equal to: Time\r\ncomplexity per testcase: .\r\n"
}