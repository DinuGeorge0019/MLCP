{"link": "https://codeforces.com//contest/987/problem/E", "problemId": "186079", "problem_idx": "E", "shortId": "987E", "contest_number": "987", "problem_submissions": {"F": [38741581, 38744536, 38751744, 38745850, 38733424, 38747373, 38750038, 38739632, 38747501, 38755456, 38754103, 38756570, 39458080, 38800187], "E": [38729820, 38734010, 38739026, 38737750, 38737503, 38735270, 38728175, 38732950, 38732076, 38735536, 38726470, 38736185, 38735395, 38739389, 38737950, 38733385, 38737429, 38728750, 38738471, 38737473], "D": [38728300, 38727603, 38735413, 38739497, 38729365, 38742941, 38742478, 38734115, 38734916, 38731776, 38732631, 38732131, 38730887, 38729679, 38734141, 38739584, 38734771, 38732422, 38734393, 38734819], "C": [38726042, 38723808, 38731874, 38743387, 38723590, 38733893, 38745979, 38727421, 38727101, 38736817, 38728419, 38728352, 38726949, 38728339, 38727877, 38729476, 38745549, 38729490, 38728289], "B": [38724259, 38725683, 38728179, 38741244, 38724899, 38730252, 38743111, 38724174, 38724175, 38729270, 38726063, 38724744, 38724501, 38724885, 38726559, 38724213, 38725258, 38725636], "A": [38722785, 38722940, 38724393, 38742310, 38723006, 38722966, 38743314, 38737316, 38722904, 38722943, 38728732, 38723066, 38722799, 38722866, 38722916, 38723281, 38723901, 38723746, 38723057]}, "name": "E. Petr and Permutations", "statement": "Petr likes to come up with problems about randomly generated data. This\r\ntime problem is about random permutation. He decided to generate a\r\nrandom permutation this way: he takes identity permutation of numbers\r\nfrom 1 to n and then 3n times takes a random pair of different elements\r\nand swaps them. Alex envies Petr and tries to imitate him in all kind of\r\nthings. Alex has also come up with a problem about random permutation.\r\nHe generates a random permutation just like Petr but swaps elements 7n+1\r\ntimes instead of 3n times. Because it is more random, OK?!You somehow\r\nget a test from one of these problems and now you want to know from\r\nwhich one.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate<class T, int size>\nstruct fenwick {\n\tT a[size];\n\n\t/* precondition: pos > 0 */\n\tvoid add(int pos, const T& val) {\n\t\twhile (pos < size) {\n\t\t\ta[pos] += val;\n\t\t\tpos += pos & -pos;\n\t\t}\n\t}\n\n\tT sum(int pos) {\n\t\tT ret = T();\n\t\twhile (pos > 0) {\n\t\t\tret += a[pos];\n\t\t\tpos -= pos & -pos;\n\t\t}\n\t\treturn ret;\n\t}\n};\n\nint n;\nint a[1000005];\nfenwick<int, 1000005> drvo;\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\tcout.tie(nullptr);\n\tcerr.tie(nullptr);\n\n\tcin >> n;\n\tfor (int i=1; i<=n; i++)\n\t\tcin >> a[i];\n\n\tlong long inv = 0;\n\tfor (int i=1; i<=n; i++) {\n\t\tinv += drvo.sum(n) - drvo.sum(a[i]);\n\t\tdrvo.add(a[i], 1);\n\t}\n\n\tcout << ((n + inv + 1) % 2 ? \"Petr\" : \"Um_nik\");\n}"], "input": "", "output": "", "tags": ["math"], "dificulty": "1800", "interactive": false}