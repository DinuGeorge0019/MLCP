{
    "link": "https://codeforces.com//contest/1159/problem/A",
    "problemId": "343492",
    "problem_idx": "A",
    "shortId": "1159A",
    "contest_number": "1159",
    "problem_submissions": {
        "F": [
            54044898,
            54053832,
            54040772,
            54080509,
            54040513,
            54052332,
            54089294
        ],
        "E": [
            54043384,
            54040516,
            54045368,
            54044519,
            54046071,
            54039628,
            54039102,
            54040677,
            54042415,
            54058636,
            54048968,
            54034868,
            54042017,
            54050776
        ],
        "D": [
            54042721,
            54041943,
            54035580,
            54042572,
            54080606,
            54038146,
            54052354,
            54091059,
            54040030,
            54037911,
            54039545,
            54040731,
            54042578
        ],
        "B": [
            54036094,
            54030149,
            54029931,
            54034799,
            54032077,
            54030372,
            54032226,
            54030581,
            54037312,
            54032827,
            54030507,
            54030402,
            54031286,
            54036701,
            54030641,
            54031474,
            54030960,
            54031607
        ],
        "C": [
            54036012,
            54033415,
            54031953,
            54037681,
            54035770,
            54032952,
            54035496,
            54033625,
            54035290,
            54036048,
            54033635,
            54032111,
            54035844,
            54040001,
            54036873,
            54037164,
            54036330,
            54033726
        ],
        "A": [
            54032465,
            54028777,
            54028614,
            54031427,
            54028774,
            54028660,
            54029725,
            54028649,
            54036064,
            54028741,
            54029512,
            54028702,
            54028642,
            54035314,
            54028987,
            54028902,
            54028641,
            54029509
        ]
    },
    "name": "A. A pile of stones",
    "statement": "Vasya has a pile, that consists of some number of stones. n times he\r\neither took one stone from the pile or added one stone to the pile. The\r\npile was non-empty before each operation of taking one stone from the\r\npile.You are given n operations which Vasya has made. Find the minimal\r\npossible number of stones that can be in the pile after making these\r\noperations.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 110;\nchar a[N];\n\nint main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\", \"r\", stdin);\n\tfreopen(\"out.txt\", \"w\", stdout);\n#endif\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0);\n\tint n; cin >> n;\n\tcin >> a;\n\tint now = 0;\n\tint Min = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (a[i] == '-') now--;\n\t\telse now++;\n\t\tMin = min(Min, now);\n\t}\n\tif (Min < 0) now = -Min;\n\telse now = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (a[i] == '-') now--;\n\t\telse now++;\n\t}\n\tcout << now << endl;\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. A pile of stones.json",
    "editorial_link": "https://codeforces.com/blog/entry/66993?locale=en",
    "editorial": "Let\u00e2\u0080\u0099s consider an array , there , if \"\" and , if \"\". Let\u00e2\u0080\u0099s notice, that\r\nthe answer for all . It is true, because after making the first\r\noperations the number of stones will be , so at the end the number of\r\nstones will be .Let\u00e2\u0080\u0099s prove, that the answer is equal to . We proved\r\nthat it should be at least that number of stones. It\u00e2\u0080\u0099s easy to see, that\r\nif we will take stones at the beginning, the pile will be non-empty each\r\ntime when Vasya should take a stone and at the end, the number of stones\r\nwill be equal to .Complexity: .\r\n"
}