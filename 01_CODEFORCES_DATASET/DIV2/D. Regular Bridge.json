{"link": "https://codeforces.com//contest/550/problem/D", "problemId": "28714", "problem_idx": "D", "shortId": "550D", "contest_number": "550", "problem_submissions": {"E": [11427018, 11429644, 11432526, 11430611, 11432228, 11432165, 11489207, 11427558, 11432275, 11429524, 11432478, 11432415, 11430446, 11486308], "D": [11423745, 11423796, 11427878, 11431814, 11429565, 11429723, 11427594, 11427339, 11431790, 11428771, 11426823, 11429779, 11429172, 11429089, 11430041], "C": [11421138, 11416776, 11423192, 11422512, 11424510, 11421428, 11421418, 11420140, 11434273, 11422988, 11421940, 11421776, 11433710, 11424080, 11421277, 11423080, 11425605], "B": [11420010, 11420534, 11419884, 11420795, 11419465, 11418370, 11419003, 11418791, 11421152, 11420042, 11419639, 11419437, 11420868, 11422488, 11419737, 11424665, 11422066, 11422524], "A": [11417030, 11416689, 11417915, 11416872, 11429128, 11417246, 11416778, 11416762, 11416557, 11416626, 11434617, 11421161, 11417521, 11420430, 11419146]}, "name": "D. Regular Bridge", "statement": "An undirected graph is called , if the degrees of all its vertices are\r\nequal . An edge of a connected graph is called a , if after removing it\r\nthe graph is being split into two connected components.Build a connected\r\nundirected -regular graph containing at least one bridge, or else state\r\nthat such graph doesn\u2019t exist.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long int64;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\n\nconst double EPS = 1e-9;\nconst int oo = 0x3f3f3f3;\nconst int MAXN = (int)1e5 + 10;\n\nvoid print(int s, int k){\n\n    for (int i = 1; i < k; ++i){\n        cout << s << \" \" << s + i << endl;\n        if (i % 2 == 0)\n            cout << s + k - 1 + i << \" \" << s + k - 2 + i << endl;\n        for (int j = 1; j < k; ++j){\n            cout << s + i << \" \" << s + k - 1 + j << endl;\n        }\n    }\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n\n    int n; cin >> n;\n\n    if (n % 2 == 0){\n        cout << \"NO\" << endl;\n        return 0;\n    }\n\n    int tot = 2 * (2 * n - 1);\n    int edg = tot * n / 2;\n\n    cout << \"YES\" << endl;\n    cout << tot << \" \" << edg << endl;\n\n    print(1, n);\n    print(2 * n, n);\n    cout << 1 << \" \" << 2 * n << endl;\n\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "graphs", "implementation"], "dificulty": "1900", "interactive": false}