{
    "link": "https://codeforces.com//contest/339/problem/C",
    "problemId": "3414",
    "problem_idx": "C",
    "shortId": "339C",
    "contest_number": "339",
    "problem_submissions": {
        "E": [
            4350288,
            4350692,
            4352701
        ],
        "D": [
            4347551,
            4348122,
            4348269,
            4346682,
            4347753,
            4347777,
            4346418,
            4348110,
            4345524,
            4347567,
            4346466,
            4344100,
            4349422,
            4345943,
            4341414,
            4344586,
            4346272,
            4344696,
            4346389,
            4346350
        ],
        "C": [
            4346199,
            4345560,
            4345573,
            4349756,
            4349561,
            4350535,
            4346192,
            4343883,
            4344992,
            4344549,
            4345429,
            4347032,
            4344235,
            4347272,
            4346342,
            4344286,
            4343699,
            4344636,
            4349580
        ],
        "B": [
            4342829,
            4340936,
            4341294,
            4343582,
            4343548,
            4342304,
            4341644,
            4342625,
            4341093,
            4341762,
            4341301,
            4342171,
            4342988,
            4342700,
            4343276,
            4342478,
            4342137,
            4345190,
            4341771,
            4347102
        ],
        "A": [
            4340544,
            4340115,
            4340169,
            4342061,
            4342695,
            4341025,
            4340145,
            4341252,
            4340204,
            4340351,
            4340621,
            4342784,
            4340896,
            4340831,
            4341165,
            4340658,
            4345500,
            4340568,
            4346745
        ]
    },
    "name": "C. Xenia and Weights",
    "statement": "Xenia has a set of weights and pan scales. Each weight has an integer\r\nweight from 1 to 10 kilos. Xenia is going to play with scales and\r\nweights a little. For this, she puts weights on the scalepans, one by\r\none. The first weight goes on the left scalepan, the second weight goes\r\non the right scalepan, the third one goes on the left scalepan, the\r\nfourth one goes on the right scalepan and so on. Xenia wants to put the\r\ntotal of weights on the scalepans.Simply putting weights on the scales\r\nis not interesting, so Xenia has set some rules. First, she does not put\r\non the scales two consecutive weights of the same weight. That is, the\r\nweight that goes -th should be different from the -th weight for any .\r\nSecond, every time Xenia puts a weight on some scalepan, she wants this\r\nscalepan to outweigh the other one. That is, the sum of the weights on\r\nthe corresponding scalepan must be strictly greater than the sum on the\r\nother pan.You are given all types of weights available for Xenia. You\r\ncan assume that the girl has an infinite number of weights of each\r\nspecified type. Your task is to help Xenia lay weights on the scales or\r\nto say that it can\u2019t be done.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstring>\n#include <cstdio>\n\nusing namespace std;\n\nconst int N=2006;\n\nbool f[N][11][11];\nchar buff[111];\nint n;\n\nvoid PRINT(int dep, int cho, int mor) {\n\tint pre=-1;\n\tfor(int i=1; i<=10 && pre==-1; i++)\n\t\tif(f[dep-1][i][cho-mor] && i!=cho) pre=i;\n\tif(dep==1) printf(\"%d\", pre);\n\telse PRINT(dep-1, pre, cho-mor);\n\tprintf(\" %d\", cho);\n}\n\nint main() {\n\tscanf(\"%s%d\", buff, &n);\n\tmemset(f, 0, sizeof f);\n\tfor(int i=1; i<=10; i++) if(buff[i-1]=='1') f[0][i][i]=1;\n\tfor(int i=0; i<n; i++) {\n\t\tfor(int j=1; j<=10; j++) {\n\t\t\tfor(int k=1; k<=10; k++) {\n\t\t\t\tif(!f[i][j][k]) continue;\n\t\t\t\tfor(int nxt=1; nxt<=10; nxt++) {\n\t\t\t\t\tif(buff[nxt-1]!='1') continue;\n\t\t\t\t\tif(nxt-k<=0) continue;\n\t\t\t\t\tif(nxt==j) continue;\n\t\t\t\t\tf[i+1][nxt][nxt-k]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint id1=-1, id2=-1;\n\tfor(int i=1; i<=10 && id1==-1; i++)\n\t\tfor(int j=1; j<=10 && id1==-1; j++) {\n\t\t\tif(f[n-1][i][j]) {\n\t\t\t\tid1=i, id2=j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\tif(id1==-1) {\n\t\tprintf(\"NO\\n\");\n\t\treturn 0;\n\t}\n\tprintf(\"YES\\n\");\n\tif(n==1) printf(\"%d\\n\", id1);\n\telse PRINT(n-1, id1, id2), printf(\"\\n\");\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "dp",
        "graphs",
        "greedy",
        "shortest paths"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Xenia and Weights.json",
    "editorial_link": "https://codeforces.com//blog/entry/8725",
    "editorial": "Tutorial by Fefer_Ivan Let\u00e2\u0080\u0099s consider the definition of balance. Balance\r\nis the difference between sum of all weights on the left pan and sum of\r\nall weights on the right pan. At the beginning balance is equal to 0.\r\nAtt each step Xenia puts one weight on the pan. It means she adds to or\r\nsubstracts from balance integer from 1 to 10. In each odd step, the\r\ninteger is added and in each even step the integer is subtracted. From\r\nthe statement we know, that after each step, balance must change it sign\r\nand must not be equal to 0. So if after some step the absolute value of\r\nbalance is greater than 10, Xenia can not continue. Also, it is said in\r\nthe statement that we can not use two equal weigths in a row. To solve\r\nthe problem, let\u00e2\u0080\u0099s consider a graph, where vertices are tuples of three\r\nnumbers , where is a current balance, is a weight, used in the previous\r\nstep, and is the number of the current step. Arcs of the graph must\r\ncorrespond to Xenias actions, described in the statement. The solution\r\nof the problme is a path from vertex to some vertex , where x, y are any\r\nnumbers, and is the requared number of steps.\r\n"
}