{
    "link": "https://codeforces.com//contest/864/problem/D",
    "problemId": "124136",
    "problem_idx": "D",
    "shortId": "864D",
    "contest_number": "864",
    "problem_submissions": {
        "F": [
            30716015,
            30722402,
            30723225,
            30725964,
            30739740
        ],
        "E": [
            30710484,
            30714856,
            30715154,
            30723143,
            30713586,
            30730131,
            30715426,
            30713107,
            30711368,
            30718758,
            30718806,
            30718477,
            30714033,
            30714286,
            30715582,
            30713724,
            30713502,
            30738356,
            30717401,
            30713777,
            30716171,
            30715998
        ],
        "D": [
            30707520,
            30709478,
            30708092,
            30709303,
            30709255,
            30703697,
            30709397,
            30707026,
            30712505,
            30709061,
            30711433,
            30710302,
            30710827,
            30707816,
            30706829,
            30708611,
            30705451,
            30707869,
            30706715,
            30708055
        ],
        "C": [
            30705528,
            30707197,
            30704462,
            30712744,
            30706231,
            30710658,
            30706244,
            30713235,
            30708256,
            30705517,
            30708760,
            30706819,
            30708546,
            30705215,
            30711574,
            30711162,
            30709362,
            30710824,
            30709705,
            30706376
        ],
        "B": [
            30703070,
            30703231,
            30706404,
            30704293,
            30702498,
            30701721,
            30702746,
            30704552,
            30702131,
            30702339,
            30704226,
            30703770,
            30702687,
            30701947,
            30704004,
            30702177,
            30703567,
            30708307,
            30703521,
            30704217
        ],
        "A": [
            30701411,
            30701464,
            30701236,
            30703640,
            30701582,
            30701091,
            30701629,
            30704524,
            30701158,
            30701293,
            30701284,
            30701912,
            30701498,
            30701066,
            30701818,
            30701174,
            30701687,
            30701585,
            30701750,
            30701329
        ]
    },
    "name": "D. Make a Permutation ",
    "statement": "Ivan has an array consisting of elements. Each of the elements is an\r\ninteger from to .Recently Ivan learned about permutations and their\r\nlexicographical order. Now he wants to change (replace) number of\r\nelements in his array in such a way that his array becomes a (i.e. each\r\nof the integers from to was encountered in his array exactly once). If\r\nthere are multiple ways to do it he wants to find the permutation among\r\nthem.Thus minimizing the number of changes has the first priority,\r\nlexicographical minimizing has the second priority.In order to determine\r\nwhich of the two permutations is lexicographically smaller, we compare\r\ntheir first elements. If they are equal compare the second, and so on.\r\nIf we have two permutations and , then is lexicographically smaller if ,\r\nwhere is the first index in which the permutations and differ.Determine\r\nthe array Ivan will obtain after performing all the changes.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cstdlib>\n#include<ctime>\n#include<utility>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\nint n;\nint a[200010];\nint b[200010];\nint c[200010];\nint d[200010];\nint e[200010];\nint ans[200010];\nint main()\n{\n\tmemset(c,0,sizeof c);\n\tmemset(e,0,sizeof e);\n\tscanf(\"%d\",&n);\n\tint i;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t\tb[i]=a[i];\n\t\tc[a[i]]++;\n\t}\n\tsort(b+1,b+n+1);\n\tint m=unique(b+1,b+n+1)-b-1;\n\tprintf(\"%d\\n\",n-m);\n\tint j=1;\n\tint k=0;\n\tfor(i=1;i<=n;i++)\n\t\tif(!c[i])\n\t\t\td[++k]=i;\n\tfor(i=1;i<=n;i++)\n\t\tif(!e[a[i]])\n\t\t{\n\t\t\tif(c[a[i]]==1)\n\t\t\t{\n\t\t\t\tc[a[i]]--;\n\t\t\t\te[a[i]]=1;\n\t\t\t\tans[i]=a[i];\n\t\t\t}\n\t\t\telse if(d[j]<a[i])\n\t\t\t{\n\t\t\t\tans[i]=d[j++];\n\t\t\t\tc[a[i]]--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\te[a[i]]=1;\n\t\t\t\tans[i]=a[i];\n\t\t\t\tc[a[i]]--;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tans[i]=d[j++];\n\t\t\tc[a[i]]--;\n\t\t}\n\tfor(i=1;i<=n;i++)\n\t\tprintf(\"%d \",ans[i]);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Make a Permutation .json",
    "editorial_link": "https://codeforces.com//blog/entry/54765",
    "editorial": "We will use an array where we will store how many times the numbers from\r\nto met in the given array . Put all numbers that never occur in the\r\narray in a vector we must add this numbers in the array to make a\r\npermutation.We will add numbers from in ascending order because we want\r\nto get lexicographically minimal permutation. Let is a pointer on the\r\ncurrent number which we need to add on the current move. Initially, .We\r\nwill iterate through the array . Let the current number equals to . If ,\r\nwe move to the next number in the array. If we added not all numbers\r\nfrom , and or there already was on the prefix of the array (to check it\r\nwe can use, for example, boolean array), then we put in the current\r\nposition, decrease on one, increase and answer on one. If we do not\r\nchange anything on that step we mark that already was on the prefix of\r\nthe array. After that we move to the next number in array .\r\n"
}