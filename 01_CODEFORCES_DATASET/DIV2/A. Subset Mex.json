{
    "link": "https://codeforces.com//contest/1406/problem/A",
    "problemId": "720771",
    "problem_idx": "A",
    "shortId": "1406A",
    "contest_number": "1406",
    "problem_submissions": {
        "E": [
            92629042,
            92630500,
            92628899,
            92635228,
            92634107,
            92638626,
            92619773,
            97164376,
            92640175,
            92638803,
            92636918,
            92676046,
            92671322,
            92625530,
            92637463,
            92637483,
            92614606,
            92630766,
            92631813,
            92662786
        ],
        "D": [
            92610024,
            92609433,
            92611409,
            92609957,
            92609251,
            92609187,
            92633310,
            92613282,
            92627048,
            92606021,
            92676006,
            92636207,
            92606425,
            92616730,
            92693126,
            92691073,
            92607353,
            92606067,
            92612958
        ],
        "C": [
            92591912,
            92593174,
            92597136,
            92597584,
            92597579,
            92602468,
            92594387,
            92596256,
            92599703,
            92594293,
            92675991,
            92618821,
            92592065,
            92605879,
            92597551,
            92594066,
            92693156,
            92691032,
            92598806,
            92594142,
            92595349
        ],
        "B": [
            92585402,
            92587012,
            92590282,
            92585685,
            92585843,
            92593482,
            92586267,
            92588568,
            92586097,
            92589192,
            92675966,
            92591284,
            92587210,
            92582618,
            92588033,
            92585543,
            92691012,
            92591068,
            92596476,
            92585669
        ],
        "A": [
            92582753,
            92582816,
            92583498,
            92583384,
            92582723,
            92583951,
            92583076,
            92582946,
            92583005,
            92675955,
            92583729,
            92582667,
            92591746,
            92583143,
            92583399,
            92690980,
            92584679,
            92582643,
            92583860
        ]
    },
    "name": "A. Subset Mex",
    "statement": "Given a set of integers (it can contain equal elements).You have to\r\nsplit it into two subsets A and B (both of them can contain equal\r\nelements or be empty). You have to maximize the value of\r\nmex(A)+mex(B).Here mex of a set denotes the smallest non-negative\r\ninteger that doesnâ€™t exist in the set. For example: mex(\r\n{1,4,0,2,2,1\r\n})=3 mex(\r\n{3,3,2,1,3,0,0\r\n})=4 mex(\r\nvarnothing)=0 (mex for empty set) The set is splitted into two subsets A\r\nand B if for any integer number x the number of occurrences of x into\r\nthis set is equal to the sum of the number of occurrences of x into A\r\nand the number of occurrences of x into B.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define ff first\n#define ss second\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define all(x) begin(x), end(x)\n#define sz(x) (int)(x).size()\n#define pb push_back\n#define FASTIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n#define endl '\\n'\n//#define int long long\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<ll> vl;\ntypedef vector<pii> vpi;\ntypedef pair<ll,ll> pll;\ntypedef vector<string> vs;\ntypedef vector<pll> vpl;\ntypedef vector<int> vi;\n\nvoid solve(){\n  int n;\n  cin >> n;\n  vi a(n);\n  vi cnt(150,0);\n  for(int i=0;i<n;i++){\n    cin >> a[i];\n    cnt[a[i]]++;\n  }\n  int res=0;\n  int curs = 2;\n  for(int i=0;i<=100;i++){\n    if(cnt[i] == 0)break;\n    int nv = min(curs,cnt[i]);\n    res+=nv;\n    curs = nv;\n  }\n  cout << res << endl;\n}\n\nint32_t main(){\n  FASTIO;\n  int t;\n  cin >> t;\n  while(t--){\n    solve();\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Subset Mex.json",
    "editorial_link": "https://codeforces.com//blog/entry/82560",
    "editorial": "Let us store the count of each number from to in array . Now would be\r\nthe smallest for which .Let this be . would be smallest for which . This\r\nis because one count of each number less than would go to therefore the\r\nelement which was present initially once would now not be available for\r\n.Overall Complexity: .\r\n",
    "hint": []
}