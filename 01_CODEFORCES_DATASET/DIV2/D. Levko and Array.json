{
    "link": "https://codeforces.com//contest/361/problem/D",
    "problemId": "3926",
    "problem_idx": "D",
    "shortId": "361D",
    "contest_number": "361",
    "problem_submissions": {
        "D": [
            5049570,
            5052330
        ],
        "C": [
            5047571,
            5053670,
            5050883,
            5048019,
            5047769,
            5048027,
            5047841,
            5047707,
            5048418,
            5047887,
            5048463,
            5048606,
            5049754,
            5049540,
            5048783,
            5048302,
            5049619,
            5048422
        ],
        "B": [
            5044449,
            5044711,
            5051123,
            5045001,
            5045542,
            5045424,
            5045674,
            5046005,
            5045458,
            5045942,
            5045765,
            5046310,
            5045032,
            5045644,
            5045632,
            5045669,
            5046351,
            5045701
        ],
        "A": [
            5043955,
            5044015,
            5044078,
            5044002,
            5044057,
            5044305,
            5043924,
            5044167,
            5044499,
            5044289,
            5044756,
            5044266,
            5043952,
            5044618,
            5043976,
            5044519,
            5044413,
            5043956
        ],
        "E": [
            5051035
        ]
    },
    "name": "D. Levko and Array",
    "statement": "Levko has an array that consists of integers: . But he doesn t like this\r\narray at all.Levko thinks that the beauty of the array directly depends\r\non value , which can be calculated by the formula: The less value is,\r\nthe more beautiful the array is.It s time to change the world and Levko\r\nis going to change his array for the better. To be exact, Levko wants to\r\nchange the values of at most array elements (it is allowed to replace\r\nthe values by any integers). Of course, the changes should make the\r\narray as beautiful as possible.Help Levko and calculate what minimum\r\nnumber he can reach.\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <cmath>\n#include <memory.h>\n#include <time.h>\n#include <set>\n#include <map>\n#include <deque>\n#include <queue>\n#include <cstdlib>\n#include <cstdio>\n#include <string>\n#include <fstream>\n\nusing namespace std;\n\nlong long a[4444];\nlong long f[4444];\nlong long n,m;\n\nbool ff(long long value)\n    {\n        if (n<=1) return true;\n        for (long long i = 1; i<=n; i++)\n            {\n                f[i]=1;\n                for (long long j = 1; j<=i-1; j++)\n                    {\n                        long long dist = abs(a[i]-a[j]);\n                        if (dist<=(i-j)*value) f[i]=max(f[i],f[j]+1);\n                    }\n            }\n        long long answer = 0;\n        for (int i = 1; i<=n; i++)\n         if (f[i]>answer) answer=f[i];\n         //cout  << answer << endl;\n        return (answer+m>=n);\n    }\n\nint main(){\n    //freopen(\"input.txt\",\"r\",stdin);\n    //freopen(\"output.txt\",\"w\",stdout);\n    ios_base::sync_with_stdio(0);\n    cin >> n >> m;\n    for (long long i = 1; i<=n; i++) cin >> a[i];\n    long long L = 0;\n    long long R = 4000000000;\n    while (R-L>1)\n        {\n            long long M = (R+L)/2;\n            if (ff(M)) R = M; else L = M;\n        }\n    if (ff(L)) cout << L << endl; else cout << R << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Levko and Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/9529",
    "editorial": "Let's solve this problem using binary search. We need to check whether we can achieve an array, when c(a) will be at most x. Lets make dp. dp[i] means minimal number of elements with indeces less than i, which we need to change, but we don't change i-th element. Let's iterate next element j, which we don't change. Then we know that we can change all elements between i and j. It is equivalent to such condition\n\n|aj?-?ai|???(j?-?i)\u00b7x\n\nDifference between neighboring elements can be at most x. The maximal possible difference increases by x exactly j?-?i times between elements i and j, so this inequality is correct."
}