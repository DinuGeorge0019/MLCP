{
    "link": "https://codeforces.com//contest/1189/problem/D1",
    "problemId": "366815",
    "problem_idx": "D1",
    "shortId": "1189D1",
    "contest_number": "1189",
    "problem_submissions": {
        "F": [
            56579282,
            56588782
        ],
        "E": [
            56573729,
            56581060,
            56587807,
            56582721,
            56573316,
            56576668,
            56574574,
            56574253,
            56578675,
            56569961,
            56571979,
            56580045,
            56581830,
            56582305,
            56578680,
            56579770,
            56574900,
            56580107,
            56581322,
            56581737
        ],
        "D2": [
            56570743,
            56583951,
            56590479
        ],
        "D1": [
            56566287,
            56577941,
            56576232,
            56577551,
            56577147,
            56570210,
            56577116,
            56576238,
            56575115,
            56582247,
            56573204,
            56575137,
            56576626,
            56575444,
            56576506,
            56574493,
            56579444,
            56574000,
            56578325,
            56573475
        ],
        "C": [
            56564288,
            56574952,
            56571400,
            56573424,
            56567619,
            56566699,
            56569018,
            56568449,
            56569895,
            56577759,
            56579059,
            56569406,
            56571224,
            56569610,
            56573567,
            56600577,
            56571447,
            56582169,
            56576771,
            56570411,
            56571321
        ],
        "B": [
            56562679,
            56568440,
            56565277,
            56565965,
            56565753,
            56564877,
            56565902,
            56566168,
            56565507,
            56574431,
            56576380,
            56566755,
            56565186,
            56567011,
            56566710,
            56600572,
            56577002,
            56568448,
            56570059,
            56563578,
            56569221
        ],
        "A": [
            56561345,
            56562783,
            56561869,
            56561808,
            56562857,
            56561895,
            56562128,
            56561757,
            56561830,
            56571793,
            56568111,
            56561276,
            56563011,
            56562623,
            56562477,
            56600568,
            56563950,
            56562575,
            56563861,
            56594597,
            56561346,
            56563282
        ]
    },
    "name": "D1. Add on a Tree",
    "statement": "You are given a tree with n nodes. In the beginning, 0 is written on all\r\nedges. In one operation, you can choose any 2 distinct u, v and any\r\nnumber x and add x to values written on all edges on the simple path\r\nbetween u and v.For example, on the picture below you can see the result\r\nof applying two operations to the graph: adding 2 on the path from 7 to\r\n6, and then adding -0.5 on the path from 4 to 5. Is it true that for any\r\nconfiguration of real numbers written on edges, we can achieve it with a\r\nfinite number of operations?Leaf is a node of a tree of degree 1. Simple\r\npath is a path that doesn\u2019t contain any node twice.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nint d[101010];\nint main(){\n\tint n;scanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;scanf(\"%d%d\",&u,&v);u--;v--;\n\t\td[u]++,d[v]++;\n\t}\n\tbool bad=false;\n\tfor(int i=0;i<n;i++)if(d[i]==2)bad=true;\n\tif(bad)puts(\"NO\");\n\telse puts(\"YES\");\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "trees"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D1. Add on a Tree.json",
    "editorial_link": "https://codeforces.com//blog/entry/68079",
    "editorial": "We claim, that the answer is YES iff there is no vertex with degree 2. After this, it's easy to get a solution for first subtask in O(n)\n.\n\nProof\nBecause all numbers are different, in the second subtask if we have a vertex with degree 2\n then answer is NO. If there is no such then construction also follows from proof. Indeed, if we can add on any path to leaf, then we can add on one edge. So, consider any edge uv\n and suppose we want to add x\n on this edge. Let's find any leaf in a subtree of vertex u\n, which doesn't contain v\n, let's name it l\n. If l=u\n, just add x\n on path uv\n. Else, add x\n on path vl\n and ?x\n on path ul\n. It's clear, that after this two operations we've added x\n on edge uv\n and didn't add anything on other edges. Then, just add on each edge needed number.\n\nIn the end, let's talk about implementation. To add on the path to leaf it's sufficient to find a leaf in the subtree. We can do it naively in O(n)\n, then complexity is O(n2)\n. Also, we can precalculate leaves in each subtree and, for example, root tree at some leaf. Then, it's possible to do all operations in O(1)\n, and complexity is O(n)\n, but it wasn't needed."
}