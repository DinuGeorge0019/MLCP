{
    "link": "https://codeforces.com//contest/490/problem/D",
    "problemId": "17898",
    "problem_idx": "D",
    "shortId": "490D",
    "contest_number": "490",
    "problem_submissions": {
        "F": [
            8817515,
            8819985,
            8842361,
            8817338,
            8817935,
            8817635,
            8855350,
            8819845,
            8823757,
            8823458,
            8821739,
            8820145
        ],
        "E": [
            8815308,
            8814782,
            8815162,
            8819489,
            8815467,
            8822097,
            8817785,
            8817507,
            8817956,
            8818730,
            8821845,
            8820184,
            8819671,
            8820855,
            8817217,
            8822605,
            8820689
        ],
        "D": [
            8813861,
            8818202,
            8817853,
            8814442,
            8820510,
            8816678,
            8814870,
            8815149,
            8814552,
            8815859,
            8816515,
            8814018,
            8816647,
            8817008,
            8816236,
            8820552,
            8814405,
            8814971,
            8817626,
            8817113
        ],
        "C": [
            8812444,
            8815662,
            8813217,
            8812979,
            8814331,
            8811719,
            8813130,
            8812621,
            8821924,
            8813827,
            8814389,
            8812560,
            8812032,
            8814787,
            8814945,
            8814699,
            8813034,
            8813032,
            8813495,
            8815850
        ],
        "B": [
            8811804,
            8812050,
            8811800,
            8811893,
            8812411,
            8813404,
            8812022,
            8811615,
            8813128,
            8812542,
            8812723,
            8811783,
            8814873,
            8813230,
            8813299,
            8812788,
            8811816,
            8811980,
            8812324,
            8813904
        ],
        "A": [
            8810238,
            8810285,
            8810322,
            8810378,
            8810319,
            8812020,
            8810257,
            8810233,
            8811808,
            8810284,
            8810467,
            8810179,
            8810618,
            8811059,
            8810734,
            8811110,
            8810293,
            8810358,
            8810190,
            8811062
        ]
    },
    "name": "D. Chocolate",
    "statement": "Polycarpus likes giving presents to Paraskevi. He has bought two\r\nchocolate bars, each of them has the shape of a segmented rectangle. The\r\nfirst bar is segments large and the second one is segments\r\nlarge.Polycarpus wants to give Paraskevi one of the bars at the lunch\r\nbreak and eat the other one himself. Besides, he wants to show that\r\nPolycarpus’s mind and Paraskevi’s beauty are equally matched, so the two\r\nbars must have the same number of squares.To make the bars have the same\r\nnumber of squares, Polycarpus eats a little piece of chocolate each\r\nminute. Each minute he does the following: he either breaks one bar\r\nexactly in half (vertically horizontally) and of the bar, or he chips of\r\nexactly one third of a bar (vertically or horizontally) and of the bar.\r\nIn the first case he is left with a , of the bar and in the second case\r\nhe is left with of the bar.Both variants aren’t always possible, and\r\nsometimes Polycarpus cannot chip off a half nor a third. For example, if\r\nthe bar is , then Polycarpus can chip off a half, but not a third. If\r\nthe bar is , then Polycarpus can chip off both a half and a third. If\r\nthe bar is , then Polycarpus cannot chip off a half nor a third.What is\r\nthe minimum number of minutes Polycarpus needs to make two bars consist\r\nof the same number of squares? Find not only the required minimum number\r\nof minutes, but also the possible sizes of the bars after the process.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <cmath>\n#include <iostream>\n#include <algorithm>\n#include <map>\n\nusing namespace std;\n\nint n, m, x, c[1000001];\nmap<int, int> a1, a2, v1, v2;\nmap<long long, int> a, v;\n\nint main(){\n     //freopen(\"d.in\", \"r\", stdin);\n     //freopen(\"d.out\", \"w\", stdout);\n     scanf(\"%d\", &x); a1.clear();\n     c[1] = x; a1[x] = 1;\n     for (int k = 1, l = 1; l <= k; l++)\n     {\n          int m = c[l];\n          if (!(m & 1) && !a1[m / 2])\n               a1[m / 2] = a1[m] + 1, c[++k] = m / 2;\n          if (!(m % 3) && !a1[m / 3])\n               a1[m / 3 * 2] = a1[m] + 1, c[++k] = m / 3 * 2;\n     }\n     \n     \n     scanf(\"%d\", &x); a2.clear();\n     c[1] = x; a2[x] = 1;\n     for (int k = 1, l = 1; l <= k; l++)\n     {\n          int m = c[l];\n          if (!(m & 1) && !a2[m / 2])\n               a2[m / 2] = a2[m] + 1, c[++k] = m / 2;\n          if (!(m % 3) && !a2[m / 3])\n               a2[m / 3 * 2] = a2[m] + 1, c[++k] = m / 3 * 2;\n     }\n     \n     v1 = a1; v2 = a2;\n     \n     scanf(\"%d\", &x); a1.clear();\n     c[1] = x; a1[x] = 1;\n     for (int k = 1, l = 1; l <= k; l++)\n     {\n          int m = c[l];\n          if (!(m & 1) && !a1[m / 2])\n               a1[m / 2] = a1[m] + 1, c[++k] = m / 2;\n          if (!(m % 3) && !a1[m / 3])\n               a1[m / 3 * 2] = a1[m] + 1, c[++k] = m / 3 * 2;\n     }\n     \n     scanf(\"%d\", &x); a2.clear();\n     c[1] = x; a2[x] = 1;\n     for (int k = 1, l = 1; l <= k; l++)\n     {\n          int m = c[l];\n          if (!(m & 1) && !a2[m / 2])\n               a2[m / 2] = a2[m] + 1, c[++k] = m / 2;\n          if (!(m % 3) && !a2[m / 3])\n               a2[m / 3 * 2] = a2[m] + 1, c[++k] = m / 3 * 2;\n     }\n     \n     int ans = 0, x = 0, y = 0, z = 0, k = 0, Min1 = 1 << 30, Min2 = 1 << 30;\n     a.clear(); v.clear();\n     for (map<int, int>::iterator itr = a1.begin(); itr != a1.end(); itr++)\n          for (map<int, int>::iterator itr1 = a2.begin(); itr1 != a2.end(); itr1++)\n          {\n               if (a.find(1LL * itr->first * itr1->first) == a.end() || \n               itr->second + itr1->second - 2 < a[1LL * itr->first * itr1->first])\n               a[1LL * itr->first * itr1->first] = itr->second + itr1->second - 2,\n               v[1LL * itr->first * itr1->first] = itr->first;\n          }\n               \n     for (map<int, int>::iterator itr = v1.begin(); itr != v1.end(); itr++)\n          for (map<int, int>::iterator itr1 = v2.begin(); itr1 != v2.end(); itr1++)\n               if (a.find(1LL * itr->first * itr1->first) != a.end())\n               {\n                    int value = a[1LL * itr->first * itr1->first] + itr->second + \n                        itr1->second - 2;\n                    if (value < Min1) Min1 = value,\n                    x =  v[1LL * itr->first * itr1->first], y = 1LL * itr->first * itr1->first / x,\n                    z = itr->first, k = itr1->first;\n               }\n     if (Min1 == 1 << 30) printf(\"-1\\n\");\n     else printf(\"%d\\n%d %d\\n%d %d\\n\", Min1, z, k, x, y);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dfs and similar",
        "math",
        "meet-in-the-middle",
        "number theory"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Chocolate.json",
    "editorial_link": "https://codeforces.com//blog/entry/14849",
    "editorial": "We can change the numbers by dividing their by two or by dividing their\r\nby three and multiply two. Firstly remove all 2 and 3 from factorization\r\nof chocolate and determine equals their square or not. If their squares\r\nare not equals answer doesn t exists. Otherwise calculate of difference\r\nbetween number of three in factorization, we should remove this amount\r\nof threes from the some chocolate, it depends from the sign, and\r\nrecalculate difference between number of two in factorization and do the\r\nsame.\r\n",
    "hint": []
}