{
    "link": "https://codeforces.com//contest/1407/problem/D",
    "problemId": "718474",
    "problem_idx": "D",
    "shortId": "1407D",
    "contest_number": "1407",
    "problem_submissions": {
        "D": [
            92297631,
            92239112,
            92260381,
            92252806,
            92252049,
            92262520,
            92228234,
            92259211,
            92260360,
            92261376,
            92261918,
            92266899,
            92256587,
            92266172,
            92260274,
            92262912,
            92303878,
            92302623,
            92256275,
            92270984,
            92272252,
            92271510,
            92282349
        ],
        "E": [
            92256636,
            92233407,
            92267510,
            92279480,
            92272807,
            92274460,
            92269480,
            92269259,
            92273514,
            92279715,
            92278350,
            92279867,
            92282565,
            92283409,
            92274020,
            92304060,
            92282786,
            92228831,
            92283331,
            92283427,
            92278831
        ],
        "C": [
            92232599,
            92248324,
            92233479,
            92234268,
            92236468,
            92249353,
            92246953,
            92244705,
            92238987,
            92236719,
            92240957,
            92237611,
            92237282,
            92240234,
            92248416,
            92302688,
            92246152,
            92275036,
            92246613,
            92261035,
            92227354
        ],
        "B": [
            92224272,
            92243377,
            92224493,
            92224273,
            92227246,
            92253319,
            92237934,
            92228855,
            92225988,
            92227692,
            92222986,
            92232613,
            92224373,
            92228873,
            92234801,
            92303526,
            92302715,
            92233774,
            92277941,
            92232453,
            92246726,
            92238191
        ],
        "A": [
            92221741,
            92238499,
            92221489,
            92220356,
            92223704,
            92240968,
            92227717,
            92262213,
            92222693,
            92221930,
            92220180,
            92226337,
            92220737,
            92223399,
            92226099,
            92303272,
            92302746,
            92224681,
            92281196,
            92221648,
            92239991,
            92220826
        ]
    },
    "name": "D. Discrete Centrifugal Jumps",
    "statement": "There are n beautiful skyscrapers in New York, the height of the i-th\r\none is h_i. Today some villains have set on fire first n - 1 of them,\r\nand now the only safety building is n-th skyscraper.Let\u2019s call a jump\r\nfrom i-th skyscraper to j-th (i < j) , if all skyscrapers between are\r\nstrictly lower or higher than both of them. Formally, jump is discrete,\r\nif i < j and one of the following conditions satisfied: i + 1 = j\r\nmax(h_{i + 1},\r\nldots, h_{j - 1}) <\r\nmin(h_i, h_j)\r\nmax(h_i, h_j) <\r\nmin(h_{i + 1},\r\nldots, h_{j - 1}). At the moment, Vasya is staying on the first\r\nskyscraper and wants to live a little longer, so his goal is to reach\r\nn-th skyscraper with minimal count of discrete jumps. Help him with\r\ncalcualting this number.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 300005;\n\nint n, a[N], dp[N];\nvector<int> mi, mx;\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cin >> n;\n    dp[0] = -1;\n    for (int i = 1; i <= n; i++) {\n        cin >> a[i];\n        dp[i] = dp[i - 1];\n        int typ = (a[i] == a[i - 1] ? -1 : a[i] > a[i - 1]);\n        while (!mi.empty() && a[mi.back()] > a[i]) {\n            if (typ == 0) {\n                dp[i] = min(dp[i], dp[mi.back()]);\n            }\n            mi.pop_back();\n        }\n        if (!mi.empty()) {\n            if (typ == 0) {\n                dp[i] = min(dp[i], dp[mi.back()]);\n            }\n            if (a[mi.back()] == a[i]) {\n                mi.pop_back();\n            }\n        }\n        mi.push_back(i);\n        while (!mx.empty() && a[mx.back()] < a[i]) {\n            if (typ == 1) {\n                dp[i] = min(dp[i], dp[mx.back()]);\n            }\n            mx.pop_back();\n        }\n        if (!mx.empty()) {\n            if (typ == 1) {\n                dp[i] = min(dp[i], dp[mx.back()]);\n            }\n            if (a[mx.back()] == a[i]) {\n                mx.pop_back();\n            }\n        }\n        mx.push_back(i);\n        dp[i]++;\n    }\n    cout << dp[n];\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp",
        "graphs"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Discrete Centrifugal Jumps.json",
    "editorial_link": "https://codeforces.com//blog/entry/82417",
    "editorial": "Consider such a jump, when all of the skyscrapers between are smaller\r\nthan initial and final (another case is similar). Let\u00e2\u0080\u0099s stand on the\r\nskyscraper with index . We want to find out whether -th skyscraper\r\nsatisfies our conditions. We have two cases: . Then, obviously, is the\r\nfirst skyscraper that not lower than (otherwise we have a building that\r\nhigher than starter, it\u00e2\u0080\u0099s contradiction). . Then, it\u00e2\u0080\u0099s easy to see, that\r\nis the first skyscraper to the left of , that higher than for the same\r\nreason. For another case, reasoning is similar, but skyscaper should be\r\nlower, not higher. We can see, that amount of pairs such that we can\r\njump from to , we can estimate as . So, we can find for each skyscraper\r\nthe nearest bigger (and smaller) one using stack and simply count\r\nminimal count of jumps that we need to reach -th skyscraper. Check the\r\nsolution for a better understanding.\r\n"
}