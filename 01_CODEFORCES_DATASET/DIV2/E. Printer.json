{
    "link": "https://codeforces.com//contest/253/problem/E",
    "problemId": "2359",
    "problem_idx": "E",
    "shortId": "253E",
    "contest_number": "253",
    "problem_submissions": {
        "E": [
            2726944,
            2726770,
            2723241,
            2726790,
            2727978,
            2727471,
            2730692,
            2727089,
            2733327
        ],
        "D": [
            2723881,
            2724571,
            2724941,
            2724183,
            2724072,
            2730055,
            2725910,
            2724288,
            2727979,
            2726091,
            2724937,
            2724056,
            2724791,
            2726548,
            2727374,
            2727845,
            2724772,
            2727700,
            2727671
        ],
        "C": [
            2722572,
            2722281,
            2724549,
            2722354,
            2728524,
            2725077,
            2722977,
            2724138,
            2725868,
            2723657,
            2726470,
            2725360,
            2723760,
            2725532,
            2724133,
            2723644,
            2723308,
            2726933,
            2724303,
            2722964
        ],
        "B": [
            2721049,
            2720520,
            2723865,
            2720653,
            2721139,
            2720528,
            2729702,
            2729645,
            2721283,
            2721143,
            2722792,
            2721898,
            2721343,
            2721641,
            2721718,
            2723762,
            2722392,
            2721474,
            2721728,
            2725310,
            2722068,
            2720627
        ],
        "A": [
            2719721,
            2719583,
            2723434,
            2725505,
            2726928,
            2719479,
            2719939,
            2719790,
            2720497,
            2719471,
            2719992,
            2720388,
            2727234,
            2723792,
            2722012,
            2720226,
            2719749,
            2721562,
            2720002,
            2728636
        ]
    },
    "name": "E. Printer",
    "statement": "Let’s consider a network printer that functions like that. It starts\r\nworking at time 0. In each second it can print one page of a text. At\r\nsome moments of time the printer receives printing tasks. We know that a\r\nprinter received tasks. Let’s number the tasks by consecutive integers\r\nfrom 1 to . Then the task number is characterised by three integers: is\r\nthe time when the task came, is the task’s volume (in pages) and is the\r\ntask’s priority. The priorities of all tasks are distinct.When the\r\nprinter receives a task, the task goes to the queue and remains there\r\nuntil all pages from this task are printed. The printer chooses a page\r\nto print each time when it either stops printing some page or when it is\r\nfree and receives a new task. Among all tasks that are in the queue at\r\nthis moment, the printer chooses the task with the highest priority and\r\nnext second prints an unprinted page from this task. You can assume that\r\na task goes to the queue immediately, that’s why if a task has just\r\narrived by time , the printer can already choose it for printing.You are\r\ngiven full information about all tasks except for one: you don’t know\r\nthis task’s priority. However, we know the time when the last page from\r\nthis task was finished printing. Given this information, find the\r\nunknown priority value and determine the moments of time when the\r\nprinter finished printing each task.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <string.h>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef set<pii>::iterator vit;\n\nstruct TASK\n{\n    int t;\n    int s;\n    int p;\n    int id;\n    ll FT;\n    inline bool operator<(const TASK& b) const \n    {\n        return t == b.t ? s > b.s : t < b.t;\n    }\n};\nTASK Tasks[55555];\n\npii ps[55555];\n\nll ftans[55555];\n\nint main(void)\n{\n    freopen(\"input.txt\",\"rt\",stdin);\n    freopen(\"output.txt\",\"wt\",stdout);\n    int n = 0;\n    scanf(\"%d\",&n);\n    int target = -1;\n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d %d %d\",&Tasks[i].t,&Tasks[i].s,&Tasks[i].p);\n        Tasks[i].id = i;\n    }\n    \n    ll T = 0;\n    scanf(\"%I64d\",&T);\n\n    sort(Tasks,Tasks+n);\n    for(int i = 0;i < n;i++) if(Tasks[i].p == -1) target = i;\n\n    ll inside = T-Tasks[target].t-Tasks[target].s;\n    set<pii> que;\n    int maxx = (int)1e9+1;\n    int minx = 0;\n    // result in (minx,maxx), take (minx+maxx)/2\n    for(int i = 0;i < n;i++)\n    {\n        if(i && Tasks[i].t != Tasks[i-1].t)\n        {\n            ll ft = Tasks[i].t-Tasks[i-1].t;\n            ll ct = Tasks[i-1].t;\n            while(ft && que.size())\n            {\n                vit it = que.begin();\n                int tid = it->second;\n                int cost = min<ll>(ft,Tasks[tid].s);\n                ct += cost;\n                Tasks[tid].s -= cost;\n                ft -= cost;\n                if(Tasks[tid].s == 0) { que.erase(it); Tasks[tid].FT = ct; }\n            }\n        }\n        if(Tasks[i].p == -1)\n        {\n            int xpcnt = 0;\n            for(int j = 0;j < n;j++)\n            {\n                if(Tasks[j].t > T) break;\n                if(Tasks[j].s == 0 || Tasks[j].p == -1) continue;\n                ps[xpcnt++] = pii(Tasks[j].p,Tasks[j].s);\n            }\n            sort(ps,ps+xpcnt);\n            ll sum = 0;\n            for(int j = xpcnt;j >= 0;j--)\n            {\n                sum += ps[j].second;\n                if(sum == inside)\n                {\n                    if(j < xpcnt) maxx = ps[j].first;\n                    if(j) minx = ps[j-1].first;\n                    break;\n                }\n            }\n            Tasks[i].p = (minx+maxx)/2;\n            //printf(\"!!!!!! %d\\n\",Tasks[i].p);\n        }\n        que.insert(pii(-Tasks[i].p,i));\n    }\n    ll ct = Tasks[n-1].t;\n    while(que.size())\n    {\n        vit it = que.begin();\n        int tid = it->second;\n        int cost = Tasks[tid].s;\n        ct += cost;\n        Tasks[tid].s -= cost;\n        if(Tasks[tid].s == 0) { que.erase(it); Tasks[tid].FT = ct; }\n    }\n\n    printf(\"%d\\n\",Tasks[target].p);\n    for(int i = 0;i < n;i++) ftans[Tasks[i].id] = Tasks[i].FT;\n    for(int i = 0;i < n;i++) printf(\"%I64d \",ftans[i]);\n    puts(\"\");\n    while(getchar() != EOF);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "implementation",
        "sortings"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Printer.json",
    "editorial_link": "https://codeforces.com//blog/entry/6073",
    "editorial": "First lets learn how to simulate the process with all priorities known.\r\nWe will keep the priority queue of tasks. The task enters the queue when\r\nthe printer receives this task, and leaves the queue when the printer\r\nfinishes it. Then every change in the queue happens when one of the two\r\npossible events occurs: the printer receives some task or finishes\r\nprinting some task. Between the consecutive events printer just prints\r\npages from the tasks with the highest priority. So, if we maintain a set\r\nof events, the simulation can be done in . To solve the problem, make an\r\nobvious observation: the higher priority the task has, the sooner the\r\nprinter finishes it. Then the required missing priority can be found\r\nusing binary search. Also we can search the missing priority among\r\nvalues. The overall complexity is . This problem also has solution,\r\nwhich will be described later.\r\n",
    "hint": []
}