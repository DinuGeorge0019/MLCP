{
    "link": "https://codeforces.com//contest/894/problem/A",
    "problemId": "134790",
    "problem_idx": "A",
    "shortId": "894A",
    "contest_number": "894",
    "problem_submissions": {
        "E": [
            32471307,
            32470808,
            32477653,
            32468892,
            32476378,
            32473286,
            32472749,
            32479578,
            32478798,
            32483759,
            32466869,
            32470695,
            32470873,
            32493311
        ],
        "C": [
            32467626,
            32472589,
            32462133,
            32463427,
            32461488,
            32465456,
            32463529,
            32464758,
            32463676,
            32464462,
            32469317,
            32465537,
            32470577,
            32468611,
            32464977,
            32465202,
            32462633,
            32464400
        ],
        "B": [
            32465947,
            32462718,
            32464339,
            32462164,
            32478784,
            32490475,
            32479651,
            32463872,
            32461816,
            32462196,
            32472670,
            32462354,
            32463630,
            32462716,
            32463341,
            32469382
        ],
        "D": [
            32464126,
            32467179,
            32469559,
            32463935,
            32469406,
            32468195,
            32470253,
            32466945,
            32470315,
            32471173,
            32471807,
            32476896,
            32473554,
            32474533,
            32473511
        ],
        "A": [
            32458491,
            32461795,
            32458601,
            32458521,
            32458627,
            32465359,
            32458507,
            32458624,
            32459097,
            32461613,
            32461662,
            32461348,
            32461278,
            32459033,
            32459890,
            32458837,
            32458739,
            32458734
        ]
    },
    "name": "A. QAQ",
    "statement": "\"QAQ\" is a word to denote an expression of crying. Imagine \"Q\" as eyes\r\nwith tears and \"A\" as a mouth.Now Diamond has given Bort a string\r\nconsisting of only uppercase English letters of length . There is a\r\ngreat number of \"QAQ\" in the string (Diamond is so cute!). Bort wants to\r\nknow how many subsequences \"\" are in the string Diamond has given. Note\r\nthat the letters \"\" don\u2019t have to be consecutive, but the order of\r\nletters should be exact.\r\n",
    "solutions": [
        "#include <iostream>\n#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#include <time.h>\n#include <stdlib.h>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <algorithm>\n#include <sstream>\n#include <stack>\n#include <iomanip>\nusing namespace std;\n#define pb push_back\n#define mp make_pair\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntypedef long double ld;\ntypedef double db;\ntypedef vector<int> vi;\n#define fi first\n#define se second\n#define fe first\n#define FO(x) {freopen(#x\".in\",\"r\",stdin);freopen(#x\".out\",\"w\",stdout);}\n#define Edg int M=0,fst[SZ],vb[SZ],nxt[SZ];void ad_de(int a,int b){++M;nxt[M]=fst[a];fst[a]=M;vb[M]=b;}void adde(int a,int b){ad_de(a,b);ad_de(b,a);}\n#define Edgc int M=0,fst[SZ],vb[SZ],nxt[SZ],vc[SZ];void ad_de(int a,int b,int c){++M;nxt[M]=fst[a];fst[a]=M;vb[M]=b;vc[M]=c;}void adde(int a,int b,int c){ad_de(a,b,c);ad_de(b,a,c);}\n#define es(x,e) (int e=fst[x];e;e=nxt[e])\n#define esb(x,e,b) (int e=fst[x],b=vb[e];e;e=nxt[e],b=vb[e])\n#define SZ 666666\nchar s[SZ];\nint main()\n{\n\tcin>>s+1; int n=strlen(s+1),ans=0;\n\tfor(int i=1;i<=n;++i)\n\t\tfor(int j=i+1;j<=n;++j)\n\t\t\tfor(int k=j+1;k<=n;++k)\n\t\t\t\tif(s[i]=='Q'&&s[k]=='Q'&&s[j]=='A') ++ans;\n\tcout<<ans<<\"\\n\";\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. QAQ.json",
    "editorial_link": "https://codeforces.com//blog/entry/55884",
    "editorial": "Since , we can iterate on the place of first \u00e2\u0080\u0099Q\u00e2\u0080\u0099,\u00e2\u0080\u0099A\u00e2\u0080\u0099 and second \u00e2\u0080\u0099Q\u00e2\u0080\u0099. The\r\nbrute force solution will work in time which can surely pass. If we only\r\niterate on the place of \u00e2\u0080\u0099A\u00e2\u0080\u0099, we can get the number of \u00e2\u0080\u0099Q\u00e2\u0080\u0099 before and\r\nafter it using prefix sums, and it leads to solution.\r\n"
}