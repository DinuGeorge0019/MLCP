{
    "link": "https://codeforces.com//contest/1465/problem/F",
    "problemId": "839221",
    "problem_idx": "F",
    "shortId": "1465F",
    "contest_number": "1465",
    "problem_submissions": {
        "E": [
            101889759,
            101886960,
            101897712,
            101902339,
            101902023,
            101893375,
            101904494,
            101923462,
            101931929
        ],
        "D": [
            101878329,
            101896950,
            101887109,
            101890727,
            101895696,
            101885523,
            101894957,
            101880576,
            101882575,
            101881809,
            101885768,
            101882968,
            101886357,
            101886080,
            101886656,
            101892161,
            101888774,
            101888604,
            101893836
        ],
        "C": [
            101871373,
            101877108,
            101882389,
            101882084,
            101878736,
            101900776,
            101880965,
            101870960,
            101875344,
            101876806,
            101873569,
            101877324,
            101877029,
            101878345,
            101879371,
            101871187,
            101877833,
            101880185,
            101881011
        ],
        "A": [
            101864398,
            101862566,
            101860401,
            101860285,
            101860331,
            101864535,
            101864517,
            101859464,
            101860720,
            101859587,
            101863596,
            101859867,
            101864237,
            101862483,
            101863218,
            101860139,
            101863738,
            101864046,
            101859532
        ],
        "B": [
            101860078,
            101873103,
            101866758,
            101865847,
            101869239,
            101868793,
            101871794,
            101862334,
            101865531,
            101862067,
            101867494,
            101865697,
            101867821,
            101870548,
            101867113,
            101866220,
            101870657,
            101871916,
            101866936
        ],
        "F": [
            101998980
        ]
    },
    "name": "F. The Thorny Path",
    "statement": "According to a legend the Hanoi Temple holds a permutation of integers\r\nfrom 1 to n. There are n stones of distinct colors lying in one line in\r\nfront of the temple. Monks can perform the following operation on\r\nstones: choose a position i (1\r\nle i\r\nle n) and cyclically shift stones at positions i, p[i], p[p[i]], ....\r\nThat is, a stone from position i will move to position p[i], a stone\r\nfrom position p[i] will move to position p[p[i]], and so on, a stone\r\nfrom position j, such that p[j] = i, will move to position i.Each day\r\nthe monks must obtain a new arrangement of stones using an arbitrary\r\nnumber of these operations. When all possible arrangements will have\r\nbeen obtained, the world will end. You are wondering, what if some\r\nelements of the permutation could be swapped just before the beginning?\r\nHow many days would the world last?You want to get a permutation that\r\nwill allow the world to last as long as possible, using the minimum\r\nnumber of exchanges of two elements of the permutation.Two arrangements\r\nof stones are considered different if there exists a position i such\r\nthat the colors of the stones on that position are different in these\r\narrangements.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define ll long long\n\nconst int N = 1e6+15;\nconst int mod = 1e9 + 7;\n\nint per[N];\nbool vis[N];\n\nint solution(int *num) {\n\tint c1 = num[2], c2= num[1] + num[4];\n\tint ret = -num[1];\n\tint u = min(c1,c2);\n\tret += u*2;\n\tret += (c1-u);\n\tret += (c2-u)/3*5;\n\treturn ret;\n}\n\nvoid solve2() {\n\tint n;\n\tscanf(\"%d\",&n);\n\tint num[5];\n\tfor(int i=4;i;--i) num[i] = 0;\n\n\tint x =  n,total = 1;\n\twhile(x-3>=2) {\n\t\ttotal = (ll)total*3%mod;\n\t\tx -= 3;\n\t}\n\ttotal = (ll)total*x%mod;\n\t\n\tfor(int i=1;i<=n;++i) {\n\t\tscanf(\"%d\",&per[i]);\n\t\tvis[i] = false;\n\t}\n\tint base = 0;\n\tfor(int i=1;i<=n;++i) {\n\t\tif(!vis[i]) {\n\t\t\tint length = 0;\n\t\t\tint node = i;\n\t\t\twhile(!vis[node]) {\n\t\t\t\tvis[node] = true;\n\t\t\t\t++length;\n\t\t\t\tnode = per[node];\n\t\t\t}\n\t\t\twhile(length-3>=2) {\n\t\t\t\tlength -= 3;\n\t\t\t\t++base;\n\t\t\t}\n\t\t\t++num[length];\n\t\t}\n\t}\n\tint ret = 1e9;\n\tif(n%3==0) {\n\t\tret = solution(num);\n\t} else if(n%3==1){\n\t\t//make 4\n\t\tif(num[1]>=4) {\n\t\t\tnum[1] -= 4;\n\t\t\tret = min(ret, solution(num)+2);\n\t\t\tnum[1] += 4;\n\t\t}\n\t\tif(num[1]>=1 && num[3]>=1) {\n\t\t\t--num[1],--num[3];\n\t\t\tret = min(ret, solution(num)+1);\n\t\t\t++num[1],++num[3];\n\t\t}\n\t\tif(num[1]>=2 && num[2]>=1) {\n\t\t\tnum[1]-=2,num[2]-=1;\n\t\t\tret = min(ret, solution(num)+1);\n\t\t\tnum[1] +=2, num[2] += 1;\n\t\t}\n\t\tif(num[2]>=2) {\n\t\t\tnum[2] -=2;\n\t\t\tret = min(ret, solution(num));\n\t\t\tnum[2] += 2;\n\t\t}\n\t\tif(num[4]) {\n\t\t\t--num[4];\n\t\t\tret= min(ret,solution(num));\n\t\t\t++num[4];\n\t\t}\n\t} else {\n\t\t//make 2\n\t\tif(num[1]>=2) {\n\t\t\tnum[1]-=2;\n\t\t\tret = min(ret, solution(num)+1);\n\t\t\tnum[1] +=2;\n\t\t}\n\t\tif(num[2]>=1) {\n\t\t\t--num[2];\n\t\t\tret = min(ret, solution(num));\n\t\t\tnum[2] += 1;\n\t\t}\n\t\tif(num[4]>=1) {\n\t\t\t--num[4];\n\t\t\t++num[2];\n\t\t\tret = min(ret, solution(num)+1);\n\t\t\t--num[2],++num[4];\n\t\t}\n\t}\n\tprintf(\"%d %d\\n\",total,ret+base);\n}\n\nvoid solve() {\n\tint n;\n\tscanf(\"%d\",&n);\n\twhile(n--) {\n\t\tsolve2();\n\t}\n}\n\nint main() {\n\t//freopen(\"sample_input.txt\", \"r\", stdin);\n\tsolve();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. The Thorny Path.json",
    "editorial_link": "https://codeforces.com//blog/entry/85792",
    "editorial": "The problem boils down to getting an array consisting of threes and a remainder (2 or 2+2 or 4) using split and merge operations. It helps to think that all merge operations are done before split operations.\n\nTo solve the problem, you can brute which elements of the array the remainder is subtracted from, then the rest of the operations are done greedily.\n\nBonus. Given k\n. We need to get an array consisting of k\n using these operations. Assume that the sum of the array elements is divisible by k\n. This can be represented as minimum cover of the hypergraph by edges with weights = (number of vertices - 1) + (sum of elements / k\n - 1). Is there a polynomial solution (k\n is a parameter)?"
}