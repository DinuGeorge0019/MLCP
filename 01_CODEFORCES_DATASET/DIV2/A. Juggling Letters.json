{
    "link": "https://codeforces.com//contest/1397/problem/A",
    "problemId": "712379",
    "problem_idx": "A",
    "shortId": "1397A",
    "contest_number": "1397",
    "problem_submissions": {
        "E": [
            91394076,
            91394865,
            91408844,
            91416677,
            91414871,
            91407127,
            91402357,
            91407934,
            91417811,
            91413475,
            91412250,
            91419091,
            91378476,
            91418930,
            91419994,
            91417519,
            91458404,
            91417294,
            91409334
        ],
        "D": [
            91372186,
            91372582,
            91379493,
            91372345,
            91376314,
            91383935,
            91383522,
            91392204,
            91382650,
            91385007,
            91393978,
            91368671,
            91385270,
            91368010,
            91395370,
            91397954,
            91372182
        ],
        "C": [
            91363525,
            91369524,
            91374646,
            91368197,
            91364426,
            91371771,
            91377426,
            91373604,
            91367966,
            91376255,
            91377856,
            91409632,
            91401708,
            91394202,
            91379664,
            91386652,
            91367805,
            91370718
        ],
        "B": [
            91361168,
            91362660,
            91362581,
            91360878,
            91374582,
            91380823,
            91370909,
            91365176,
            91359546,
            91369350,
            91367433,
            91374994,
            91454186,
            91372042,
            91383116,
            91365692,
            103511310,
            91389732,
            91359483,
            91364179
        ],
        "A": [
            91350972,
            91351778,
            91350895,
            91353022,
            91367161,
            91353583,
            91358678,
            91362352,
            91350856,
            91360209,
            91369795,
            91350959,
            91386649,
            91455005,
            91454161,
            91357607,
            91352696,
            91350850,
            91354043,
            91352491,
            91360679
        ]
    },
    "name": "A. Juggling Letters",
    "statement": "You are given n strings s_1, s_2,\r\nldots, s_n consisting of lowercase Latin letters.In one operation you\r\ncan remove a character from a string s_i and insert it to an arbitrary\r\nposition in a string s_j (j may be equal to i). You may perform this\r\noperation any number of times. Is it possible to make all n strings\r\nequal?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int T; cin >> T;\n    while(T--)\n    {\n        vector<int> arr(256);\n        int N; cin >> N;\n        for(int i=1; i<=N; ++i)\n        {\n            string s;\n            cin >> s;\n            for(auto c: s) arr[c]++;\n        }\n        bool f = true;\n        for(int i=0; i<256; ++i)\n            if(arr[i]%N!=0) f = false;\n        if(f) puts(\"YES\");\n        else puts(\"NO\");\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Juggling Letters.json",
    "editorial_link": "https://codeforces.com//blog/entry/82142",
    "editorial": "Let denote a rectangle with opposite corners and . For convenience,\r\nassume and .Letâs try solving the problem if coordinates are in range .\r\nWe could easily do this by coordinates compression.First, letâs look at\r\nthe problem with fixed. We define to be the smallest integer such that\r\nand is a rectangle (If there is no such integer, let ). It can be proven\r\nthat is non-decreasing, i.e. if , then .Now, letâs see how changes when\r\nwe iterate over a fixed . It is hard to add points to the set, so we\r\nwill try to support deleting points operation. For point , we have the\r\nfollowing definitions:Let set . Let with the largest .Let set . Let with\r\nthe smallest .(Note that or might represent empty set).With these two\r\nfunctions, we could see how changes after we delete point . It looks\r\nsomething like this: For every such that ;We could support this\r\noperation using segment tree with lazy propagation. The total time\r\ncomplexity is .\r\n",
    "hint": []
}