{
    "link": "https://codeforces.com//contest/1422/problem/A",
    "problemId": "748723",
    "problem_idx": "A",
    "shortId": "1422A",
    "contest_number": "1422",
    "problem_submissions": {
        "F": [
            94701883,
            94826866,
            94826835,
            94745688,
            94705379,
            94693551,
            94953245,
            94915043,
            94711007,
            94710952
        ],
        "D": [
            94689176,
            94687852,
            94699245,
            94700756,
            94730858,
            94685919,
            94687412,
            94684031,
            94691326,
            94692798,
            209847951,
            94692199,
            94693976,
            94690624,
            94695759,
            95022837,
            94688084,
            94690199
        ],
        "C": [
            94679953,
            94679288,
            94678596,
            94684155,
            94679523,
            94703846,
            94668997,
            94676012,
            94678225,
            94681262,
            94689674,
            94678418,
            94678427,
            94678143,
            94682123,
            94677251,
            94684478,
            94676757,
            94679761
        ],
        "B": [
            94670303,
            94669460,
            94669121,
            94671181,
            94667987,
            94697716,
            94673035,
            94667020,
            94667631,
            94669211,
            94678649,
            94671772,
            94672654,
            94668738,
            94675426,
            94669613,
            94671963,
            94668373,
            94672738
        ],
        "A": [
            94662989,
            94664962,
            97569670,
            94661799,
            94662880,
            94662335,
            94664103,
            94661944,
            94661473,
            94662039,
            94663061,
            94665832,
            94661500,
            94664606,
            94661429,
            94662035,
            94661746,
            94661457,
            94662741,
            94673552
        ],
        "E": [
            94701493,
            94708058,
            94709364,
            94747586,
            95060609,
            95041928,
            94699655,
            94723718,
            94704623
        ]
    },
    "name": "A. Fence",
    "statement": "Yura is tasked to build a closed fence in shape of an arbitrary\r\nnon-degenerate simple quadrilateral. Heâ€™s already got three straight\r\nfence segments with known lengths a, b, and c. Now he needs to find out\r\nsome possible integer length d of the fourth straight fence segment so\r\nthat he can build the fence using these four segments. In other words,\r\nthe fence should have a quadrilateral shape with side lengths equal to\r\na, b, c, and d. Help Yura, find any possible length of the fourth side.A\r\nnon-degenerate simple quadrilateral is such a quadrilateral that no\r\nthree of its corners lie on the same line, and it does not cross itself.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define I inline int\n#define V inline void\n#define ll long long int\n#define isnum(ch) ('0'<=ch&&ch<='9')\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define ROF(i,a,b) for(int i=a;i>=b;i--)\n#define REP(u) for(int i=h[u],v;v=e[i].t,i;i=e[i].n)\n#define gc (_op==_ed&&(_ed=(_op=_buf)+fread(_buf,1,100000,stdin),_op==_ed)?EOF:*_op++)\nchar _buf[100000],*_op(_buf),*_ed(_buf);\nI getint(){\n\tint _s=0,_f=1;char _ch=gc;\n\twhile(!isnum(_ch))(_ch=='-')&&(_f=-1),_ch=gc;\n\twhile(isnum(_ch))_s=_s*10+_ch-48,_ch=gc;\n\treturn _s*_f;\n}\nconst int N=2e5+1,mod=998244353;\nV check(int&x){x-=mod,x+=x>>31&mod;}\nV cmax(int&x,int y){if(x-y>>31)x=y;}\nV cmin(int&x,int y){if(y-x>>31)x=y;}\nint T,n;\nll a[N];\nV input(){\n\tn=3;\n\tFOR(i,1,n)a[i]=getint();\n\tcout<<a[3]+a[2]+a[1]-1<<'\\n';\n}\nV init(){\n\t\n}\nV work(){\n\t\n}\nint main(){\n//\tfreopen(\"test.in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tfor(scanf(\"%d\",&T);T--;){\n\t\tinput();\n\t\tinit();\n\t\twork();\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Fence.json",
    "editorial_link": "https://codeforces.com//blog/entry/83452",
    "editorial": "A quadrilateral can be built when , that is, the sum of the minimum\r\nthree numbers is greater than the maximum. To do this, you could choose\r\nor as .\r\n",
    "hint": []
}