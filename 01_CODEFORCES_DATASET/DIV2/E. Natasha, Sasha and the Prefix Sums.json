{
    "link": "https://codeforces.com//contest/1204/problem/E",
    "problemId": "392656",
    "problem_idx": "E",
    "shortId": "1204E",
    "contest_number": "1204",
    "problem_submissions": {
        "D2": [
            59171473,
            59176959,
            59165503,
            59172424,
            59176173,
            59167492,
            59164905,
            59176155,
            59178992,
            59169931,
            59176960,
            59169864,
            59178242,
            59178029,
            59169582,
            59172809,
            59169123,
            59168999,
            59171305,
            59170057
        ],
        "D1": [
            59169891,
            59176544,
            59165271,
            59172261,
            59176126,
            59167259,
            59164656,
            59176100,
            59163490,
            59168508,
            59176724,
            59170026,
            59178274,
            59177894,
            59169407,
            59172673,
            59169296,
            59168747,
            59167871,
            59169828
        ],
        "E": [
            59165621,
            59159508,
            59171204,
            59167827,
            59161848,
            59176920,
            59177089,
            59166777,
            59176127,
            59177175,
            59172161,
            59177722,
            59170117,
            59171712,
            59177233,
            59179201,
            59180220,
            59178891,
            59180477,
            59178723
        ],
        "C": [
            59151501,
            59163669,
            59158012,
            59149471,
            59166332,
            59152299,
            59160440,
            59156718,
            59160290,
            59156826,
            59162942,
            59160646,
            59158205,
            59161710,
            59162530,
            59157292,
            59158762,
            59160352,
            59157314,
            59162180
        ],
        "B": [
            59144349,
            59150576,
            59146764,
            59144554,
            59146379,
            59145028,
            59149730,
            59146608,
            59146122,
            59145946,
            59147391,
            59146291,
            59146819,
            59146767,
            59151379,
            59145774,
            59147183,
            59147977,
            59149695,
            59149226
        ],
        "A": [
            59141665,
            59142146,
            59141563,
            59142710,
            59143581,
            59145777,
            59144224,
            59142379,
            59143868,
            59142387,
            59143522,
            59143089,
            59147328,
            59153631,
            59142559,
            59141790,
            59142894,
            59147085,
            59146105
        ]
    },
    "name": "E. Natasha, Sasha and the Prefix Sums",
    "statement": "Natasha\u2019s favourite numbers are n and 1, and Sasha\u2019s favourite numbers\r\nare m and -1. One day Natasha and Sasha met and wrote down every\r\npossible array of length n+m such that some n of its elements are equal\r\nto 1 and another m elements are equal to -1. For each such array they\r\ncounted its maximal prefix sum, probably an empty one which is equal to\r\n0 (in another words, if every nonempty prefix sum is less to zero, then\r\nit is considered equal to zero). Formally, denote as f(a) the maximal\r\nprefix sum of an array a_{1,\r\nldots ,l} of length l\r\ngeq 0. Then: f(a) =\r\nmax (0,\r\nsmash{\r\ndisplaystyle\r\nmax_{1\r\nleq i\r\nleq l}}\r\nsum_{j=1}^{i} a_j )Now they want to count the sum of maximal prefix sums\r\nfor each such an array and they are asking you to help. As this sum can\r\nbe very large, output it modulo 998\r\n: 244\r\n: 853.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\nconst ll MOD = 998244853;\n\nint n, m;\nll comb[4002][4002];\nll sum[4002];\nll realSum[4002];\nll allSum;\nll ans;\n\nvoid generateComb();\n\nint main(){\n    generateComb();\n    scanf(\"%d %d\", &n, &m);\n    allSum = comb[n+m][n];\n    for(int i=n; i>=1 && i>=n-m; i--){\n        sum[i] = (comb[n+m][n-i] - realSum[i+1] + MOD) % MOD;\n        ans += (sum[i] * i) % MOD;\n        ans %= MOD;\n        realSum[i] = realSum[i+1] + sum[i];\n        realSum[i] %= MOD;\n//        printf(\"%d: %lld\\n\", i, sum[i]);\n    }\n    printf(\"%lld\", ans);\n}\n\nvoid generateComb(){\n    for(int i=0; i<=4000; i++) comb[i][0] = comb[i][i] = 1;\n    for(int i=1; i<=4000; i++){\n        for(int j=1; j<i; j++){\n            comb[i][j] = comb[i-1][j-1] + comb[i-1][j];\n            comb[i][j] %= MOD;\n        }\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math",
        "number theory"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Natasha, Sasha and the Prefix Sums.json",
    "editorial_link": "https://codeforces.com/blog/entry/69244",
    "editorial": "Let\u00e2\u0080\u0099s count a dp the number of arrays consisting of ones and minus ones\r\nsuch that their maximal prefix sum is equal to : if then , else if then\r\n, else , because if we consider any array consisting of ones and minus\r\nones which maximal prefix sum is then adding a minus one to the end\r\nleaves it equal to ; also if we consider any array consisting of ones\r\nand minus ones which maximal prefix sum is then adding a one to the end\r\nleaves it equal to , because .Now let\u00e2\u0080\u0099s count a dp the answer to the\r\nproblem for and : if then , else if then , else . That is because if we\r\nconsider any array of ones and minus ones (there are such arrays) then\r\nadding a one in its beginning increases its maximal prefix sum by ; also\r\nif we consider any array of ones and minus ones then adding a minus one\r\nin its beginning either decreases its maximal prefix sum by if it was\r\ngreater than (there are such arrays) or leaves it equal to . So the\r\nanswer to the problem is .\r\n"
}