{
    "link": "https://codeforces.com//contest/851/problem/D",
    "problemId": "120884",
    "problem_idx": "D",
    "shortId": "851D",
    "contest_number": "851",
    "problem_submissions": {
        "E": [
            30068335,
            30088610,
            30075383,
            30074656,
            30075499,
            30099471,
            30089475,
            30079934,
            30225549,
            30079493,
            30080353
        ],
        "C": [
            30064829,
            30063738,
            30067780,
            30065175,
            30067016,
            30064360,
            30092204,
            30067962,
            30063996,
            30066468,
            30071739,
            30067172,
            30067766,
            30070923,
            30067394,
            30066218,
            30067344,
            30067420,
            30068901,
            30074150,
            30069613
        ],
        "D": [
            30061008,
            30067092,
            30060975,
            30106276,
            30071770,
            30072710,
            30072481,
            30067736,
            30073597,
            30067133,
            30077107,
            30095645,
            30095491,
            30095471,
            30092613,
            30092592,
            30075289,
            30088915,
            30074494,
            30070223
        ],
        "A": [
            30056920,
            30055494,
            30061723,
            30055450,
            30059422,
            30055778,
            30056976,
            30055742,
            30059653,
            30055763,
            30057287,
            30071928,
            30055841,
            30056295,
            30055999,
            30055697,
            30056608,
            30056227
        ],
        "B": [
            30056298,
            30060194,
            30065585,
            30059352,
            30057773,
            30059430,
            30060590,
            30059837,
            30061170,
            30063102,
            30063850,
            30057800,
            30058628,
            30061891,
            30058378,
            30059786,
            30064409,
            30060348
        ]
    },
    "name": "D. Arpa and a list of numbers",
    "statement": "Arpa has found a list containing numbers. He calls a list bad if and\r\nonly if it is not empty and (see notes section for more information) of\r\nnumbers in the list is .Arpa can perform two types of operations: Choose\r\na number and delete it with cost . Choose a number and increase it by\r\nwith cost . Arpa can apply these operations to as many numbers as he\r\nwishes, and he is allowed to apply the second operation arbitrarily many\r\ntimes on the same number.Help Arpa to find the minimum possible cost to\r\nmake the list good.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define N 2000009\nusing namespace std;\n\nint n,A,B,a[N]; ll s[N];\nint main(){\n\tscanf(\"%d%d%d\",&n,&A,&B);\n\tint i,j,k,p=A/B;\n\tfor (i=1; i<=n; i++){\n\t\tscanf(\"%d\",&j);\n\t\ta[j]++; s[j]+=j;\n\t}\n\tfor (i=1; i<=2000000; i++){\n\t\ta[i]+=a[i-1]; s[i]+=s[i-1];\n\t}\n\tll ans=(ll)n*A;\n\tfor (i=2; i<=1000000; i++){\n\t\tll tmp=0;\n\t\tfor (j=i; j<=1000000+i && tmp<ans; j+=i){\n\t\t\tk=max(j-i+1,j-p);\n\t\t\ttmp+=((ll)(a[j]-a[k-1])*j-(s[j]-s[k-1]))*B;\n\t\t\ttmp+=(ll)(a[k-1]-a[j-i])*A;\n\t\t}\n\t\tans=min(ans,tmp);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Arpa and a list of numbers.json",
    "editorial_link": "https://codeforces.com//blog/entry/54317",
    "editorial": "Let's define cost(g) the cost if we want gcd of the array becomes g. The answer is min cost(g) for g?>?1. Now, let's see how to calculate cost(g). For each number like c, we can delete it with cost x or we can add it till g divides it. So, we must pay . Let's iterate on possible values for .\n\nBefore entering the main part of the solution, let's define two helper functions:\n\n\u0096 cnt(l,?r): this function returns the number of i's such that l???ai???r.\n\n\u0096 sum(l,?r): this function returns . To implement this function, define an array ps, such that psi keeps the sum of values less than or equal to i. Then sum(l,?r)?=?psr?-?psl?-?1.\n\nNow for each multiple of g like k, let's find the cost of numbers in the range (k?-?g,?k], and sum up these values. We must find the best f and divide the range into two segments (k?-?g,?f] and (f,?k] and delete the numbers in the first range and add the numbers in second range till they become k. Now to find the best value for f, .\n\nSo, the total cost for this range is cnt(k?-?g?+?1,?k?-?? f?)?\u00d7?x?+?(cnt(k?-?? f??+?1,?k)?\u00d7?k?-?sum(k?-?? f??+?1,?k))?\u00d7?y.\n\nTime complexity: ."
}