{
    "link": "https://codeforces.com//contest/1634/problem/B",
    "problemId": "1285094",
    "problem_idx": "B",
    "shortId": "1634B",
    "contest_number": "1634",
    "problem_submissions": {
        "D": [
            145448060,
            145421218,
            145416745,
            145423344,
            145443205,
            145427784,
            145443409,
            145431341,
            145433882,
            145423790,
            145432676,
            145425041,
            145425515,
            145428134,
            145433736,
            145425560,
            145429012,
            145409353,
            145450134
        ],
        "F": [
            145433416,
            145453477,
            145451269,
            145460505,
            145460962,
            145457398,
            145463150,
            146209818,
            145424500,
            146353080,
            145461554
        ],
        "E": [
            145417696,
            145430773,
            145437025,
            145445326,
            145418577,
            145442374,
            145429197,
            145419121,
            145409285,
            145435196,
            145437792,
            145441628,
            145453390,
            145439700,
            145444612,
            145443262,
            145449756,
            145425032
        ],
        "C": [
            145412708,
            145407591,
            145405856,
            145408804,
            145405037,
            145408252,
            145414142,
            145411742,
            145412561,
            145404073,
            145409362,
            145407564,
            145408646,
            145418751,
            145411128,
            145416814,
            145410703,
            145419625,
            145409764
        ],
        "B": [
            145407070,
            145396453,
            145401718,
            145400856,
            145397249,
            145398450,
            145410765,
            145408191,
            145401469,
            145397310,
            145403868,
            145398596,
            145400216,
            145410152,
            145399502,
            145397772,
            145402171,
            145398736,
            145404461
        ],
        "A": [
            145397151,
            145395090,
            145396464,
            145396099,
            145395149,
            145395150,
            145396024,
            145395848,
            145396137,
            145395189,
            159142248,
            145403722,
            145395766,
            145395501,
            145399119,
            145395603,
            145395368,
            145397257,
            145397479
        ]
    },
    "name": "B. Fortune Telling",
    "statement": "Haha, try to solve this, SelectorUnlimited! antontrygubO_oYour friends\r\nAlice and Bob practice fortune telling.Fortune telling is performed as\r\nfollows. There is a well-known array a of n non-negative integers\r\nindexed from 1 to n. The tellee starts with some non-negative number d\r\nand performs one of the two operations for each i = 1, 2,\r\nldots, n, . The possible operations are: replace their current number d\r\nwith d + a_i replace their current number d with d\r\noplus a_i (hereinafter\r\noplus denotes the bitwise XOR operation)Notice that the chosen operation\r\nmay be different for different i and for different tellees.One time,\r\nAlice decided to start with d = x and Bob started with d = x + 3. Each\r\nof them performed fortune telling and got a particular number in the\r\nend. Notice that the friends chose operations independently of each\r\nother, that is, they could apply different operations for the same i.You\r\nlearnt that either Alice or Bob ended up with number y in the end, but\r\nyou donâ€™t know whose of the two it was. Given the numbers Alice and Bob\r\nstarted with and y, find out who (Alice or Bob) could get the number y\r\nafter performing the operations. It is guaranteed that on the jury\r\ntests, of your friends could have actually gotten that number.You cannot\r\nmake hacks in this problem.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define mp make_pair\n#define reg register\nconst int maxn=10005;\nchar buffer[maxn],*S,*T;\ninline char Get_Char(){\n    if(S==T){\n        T=(S=buffer)+fread(buffer,1,maxn,stdin);\n        if(S==T)return EOF;\n    }\n    return *S++;\n}\n\ninline int read(){\n    reg char c;\n    reg int re=0,f=0;\n    for(c=Get_Char();c<'0' or c>'9';c=Get_Char())if(c=='-')f=1;\n    for(;c>='0' and c<='9';)re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();\n    if(f)return -re;\n    return re;\n}\n\ninline void read(int&x){\n    reg char c;\n    reg int re=0,f=0;\n    for(c=Get_Char();c<'0' or c>'9';c=Get_Char())if(c=='-')f=1;\n    for(;c>='0' and c<='9';)re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();\n    if(f)x=-re;\n    else x=re;\n}\ninline void read(ll&x){\n    reg char c;\n    reg ll re=0,f=0;\n    for(c=Get_Char();c<'0' or c>'9';c=Get_Char())if(c=='-')f=1;\n    for(;c>='0' and c<='9';)re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();\n    if(f)x=-re;\n    else x=re;\n}\nconst int mxn=1e5+5;\nll a[mxn];\nll x,y,n,p[33],q[33],lp[33],lq[33];\ninline void solve(){\n\tmemset(p,0,sizeof(p));\n\tmemset(q,0,sizeof(q));\n\tcin>>n>>x>>y;\n\tx%=32,y%=32;\n\tll c=x,d=x+3;\n\td%=32;\n\tp[c]=1,q[d]=1;\n\tfor(int i=1;i<=n;++i){\n\t\tcin>>a[x];\n\t\tmemset(lp,0,sizeof(lp));\n\t\tmemset(lq,0,sizeof(lq));\n\t\tfor(int j=0;j<32;++j){\n\t\t\tif(p[j]==1){\n\t\t\t\tlp[(j+a[x])%32]=1;\n\t\t\t\tlp[(j^a[x])%32]=1;\n\t\t\t}\n\t\t\tif(q[j]==1){\n\t\t\t\tlq[(j+a[x])%32]=1;\n\t\t\t\tlq[(j^a[x])%32]=1;\n\t\t\t}\n\t\t}\n\t\tfor(int j=0;j<32;++j)p[j]=lp[j],q[j]=lq[j];\n\t}\n\tif(p[y]==1)cout<<\"Alice\\n\";\n\telse cout<<\"Bob\\n\";\n}\nint main(){\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0),cout.tie(0);\n\tint T=1;\n\tcin>>T;\n\tfor(;T--;)solve();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "math"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Fortune Telling.json",
    "editorial_link": "https://codeforces.com//blog/entry/99563",
    "editorial": "Notice that the operations and have the same effect on the parity: it is\r\ninverted if the second argument of the operation is odd, and stays the\r\nsame otherwise. By induction, we conclude that if we apply the\r\noperations to some even number and to some odd number, the resulting\r\nnumbers will also be of different parity.Therefore, we can determine\r\nwhether the parity of the input is the same as the parity of the output\r\nor the opposite: if the sum of is even, then the parity does not change,\r\notherwise it does. Thus we can find out the parity of the original\r\nnumber from the parity of the result, and this is enough to solve the\r\nproblem because the numbers and have different parity.\r\n",
    "hint": [
        "Hint 1 Can you figure out which of your friends can't get the number regardless of the order of operations? The answer to the problem would be the other person, since the jury guarantees that exactly one of your friends could get it.",
        "Hint 2 What do the numbers and have in common for any ?",
        "Hint 3 What do all the numbers that can be obtained by all combinations of operations starting with have in common? Does the set of these numbers intersect with the set of numbers that can be obtained starting with ?"
    ]
}