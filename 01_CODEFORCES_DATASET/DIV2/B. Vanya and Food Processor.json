{
    "link": "https://codeforces.com//contest/677/problem/B",
    "problemId": "61382",
    "problem_idx": "B",
    "shortId": "677B",
    "contest_number": "677",
    "problem_submissions": {
        "E": [
            18198164,
            18204085,
            18197306,
            18200993,
            18200953,
            18195589,
            18203905,
            18215946
        ],
        "D": [
            18193483,
            18198632,
            18200137,
            18203205,
            18194465,
            18198804,
            18199943,
            18195070,
            18202030,
            18197600,
            18197818,
            18198979,
            18200991,
            18199872,
            18199844
        ],
        "B": [
            18190137,
            18189283,
            18188934,
            18189082,
            18188438,
            18189342,
            18189575,
            18188793,
            18188689,
            18189354,
            18191729,
            18192124,
            18189662,
            18190381,
            18192321,
            18189806,
            18199099,
            18189915,
            18189024,
            18192633
        ],
        "C": [
            18189147,
            18192130,
            18193382,
            18190274,
            18190560,
            18190716,
            18189368,
            18190951,
            18190001,
            18192729,
            18189241,
            18189853,
            18190879,
            18188748,
            18189105,
            18191741,
            18199413,
            18194523,
            18189867,
            18194964
        ],
        "A": [
            18185361,
            18186546,
            18186018,
            18185448,
            18185774,
            18186287,
            18186201,
            18185979,
            18185500,
            18187073,
            18192540,
            18186205,
            18189142,
            18189736,
            18185692,
            18198474,
            18185676,
            18185395,
            18188182
        ]
    },
    "name": "B. Vanya and Food Processor",
    "statement": "Vanya smashes potato in a vertical food processor. At each moment of\r\ntime the height of the potato in the processor doesn\u2019t exceed and the\r\nprocessor smashes centimeters of potato each second. If there are less\r\nthan centimeters remaining, than during this second processor smashes\r\nall the remaining potato.Vanya has pieces of potato, the height of the\r\n-th piece is equal to . He puts them in the food processor one by one\r\nstarting from the piece number and finishing with piece number .\r\nFormally, each second the following happens: If there is at least one\r\npiece of potato remaining, Vanya puts them in the processor one by one,\r\nuntil there is not enough space for the next piece. Processor smashes\r\ncentimeters of potato (or just everything that is inside). Provided the\r\ninformation about the parameter of the food processor and the size of\r\neach potato in a row, compute how long will it take for all the potato\r\nto become smashed.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nint n,h,k;\nlong long ans;\nlong long a[1000000];\n\nvoid make(long long &x,long long y)\n{\n    long long kek=y/k;\n    if(y%k)\n        ++kek;\n    ans+=kek;\n    x-=k*kek;\n    if(x<0)\n        x=0;\n}\n\nint main()\n{\n    cin>>n>>h>>k;\n    for(int i=1;i<=n;i++)\n        cin>>a[i];\n    long long cur=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(cur+a[i]<=h)\n        {\n            cur+=a[i];\n            continue;\n        }\n        long long dif=cur+a[i]-h;\n        make(cur,dif);\n        cur+=a[i];\n    }\n    make(cur,cur);\n    cout<<ans<<\"\\n\";\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Vanya and Food Processor.json",
    "editorial_link": "https://codeforces.com//blog/entry/45181",
    "editorial": "The solution, that does same thing, as in the problem statement will\r\nfail with TL, because if the height of each piece of potato will be and\r\nsmashing speed will be , then for each piece we will do operations. With\r\neach new piece of potato we will smash the potato till , so we will\r\nwaste seconds on it. If we can not put this piece of potato after that,\r\nwe will waste more second to smash everything, that inside, else just\r\nput this piece. We will get an answer same as we could get with actions\r\nfrom the statement. Complexity . Code\r\n"
}