{
    "link": "https://codeforces.com//contest/225/problem/B",
    "problemId": "1829",
    "problem_idx": "B",
    "shortId": "225B",
    "contest_number": "225",
    "problem_submissions": {
        "A": [
            2221105,
            2214162,
            2213024,
            2213181,
            2218269,
            2215390,
            2213087,
            2213131,
            2213045,
            2213399,
            2218254,
            2213449,
            2215635,
            2213022,
            2219451,
            2214235,
            2218861,
            2213502
        ],
        "D": [
            2218238,
            2217449,
            2217706,
            2290695,
            2219111,
            2226502,
            2219345,
            2221170
        ],
        "C": [
            2217175,
            2219527,
            2217380,
            2214633,
            2213571,
            2214672,
            2216972,
            2213976,
            2217628,
            2215057,
            2215884,
            2217221,
            2216137,
            2214774,
            2219743
        ],
        "B": [
            2215089,
            2214635,
            2214157,
            2213471,
            2217514,
            2216657,
            2214710,
            2214892,
            2219487,
            2217944,
            2217204,
            2220412,
            2220302,
            2217349,
            2217093,
            2216495
        ],
        "E": [
            2219166,
            2216024,
            2218518,
            2218635,
            2218425,
            2270284,
            2216885,
            2219080,
            2218848,
            2218491,
            2218490,
            2218734,
            2217815
        ]
    },
    "name": "B. Well-known Numbers",
    "statement": "Numbers -bonacci ( is integer, ) are a generalization of Fibonacci\r\nnumbers and are determined as follows: , for integer , ; ; , for integer\r\n, . Note that we determine the -bonacci numbers, , only for integer\r\nvalues of and .Youâ€™ve got a number , represent it as a sum of several\r\n(at least two) -bonacci numbers.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n\nusing namespace std;\n\nint a[5000000];\nint sum[5000000];\nint ans[5000000],tot;\nint s,k,n;\n\nint main()\n{\n\tscanf(\"%d%d\",&s,&k);\n\ta[1]=1;\n\tsum[1]=1;\n\tfor(int i=2;;i++)\n\t{\n\t\tif(i<=k)\n\t\t\ta[i]=sum[i-1];\n\t\telse a[i]=sum[i-1]-sum[i-k-1];\n\t\tif(a[i]>s) {n=i;break;}\n\t\tsum[i]=sum[i-1]+a[i];\n\t}\n\tfor(int i=n-1;i>=1;i--){\n\t\tif(s-a[i]>=0)\n\t\t{\n\t\t s-=a[i];\n\t\t ans[++tot]=a[i];\n\t\t}\n\t}\n\tif(tot==1) ans[++tot]=0;\n\tprintf(\"%d\\n\",tot);\n\tfor(int i=1;i<=tot;i++) printf(\"%d \",ans[i]);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "number theory"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Well-known Numbers.json",
    "editorial_link": "https://codeforces.com//blog/entry/5322",
    "editorial": "Firstly you should generate all k-bonacci numbers less than n. For k???32 you can do it straightforward, for bigger k you can see that all k-bonacci numbers less 109 are powers of two only (and 0). So you will have no more then 100 numbers.\n\nThen you should use greedy algo. You should substract from n maximal possible k-bonacci numbers. You should repeat this operation while n is not decomposed. And in the end you will have answer.\n\nWhy all numbers will be different? One of possible proves:\n\nF(k,?n)?=?F(k,?n?-?1)?+?F(k,?n?-?2)?+?...?+?F(k,?n?-?k)\n\nF(k,?n?-?1)?=?F(k,?n?-?2)?+?F(k,?n?-?3)?+?...?+?F(k,?n?-?k?-?1)\n\nYou can substract the 2nd equation from the 1st one and you will recieve F(k,?n)?+?F(k,?n?-?k?-?1)?=?2F(k,?n?-?1), that equal to 2F(k,?n?-?1)???F(k,?n). This unequation also holds for n???k.\n\nSuppose than greedy also constricted 2 equal numbers F(k,?x) in decomposition. But then in virtue of unequation we should take number F(k,?x?+?1) insead these 2 numbers. ?ontradiction.\n\nBut you didn't need prove than greedy algo works, you might believe that it works:)",
    "hint": []
}