{"link": "https://codeforces.com//contest/474/problem/E", "problemId": "14849", "problem_idx": "E", "shortId": "474E", "contest_number": "474", "problem_submissions": {"F": [8116116, 8111347, 8114247, 8117109, 8119759, 8119274, 8115617, 8117848, 8117464, 8117692, 8128068, 8128022, 8117327, 8118237, 8119671, 8142598, 8120637, 8119403, 8120748, 8142553, 8142542, 8142530, 8124718], "E": [8115184, 8114217, 8112389, 8114867, 8116240, 8115244, 8120717, 8120099, 8115954, 8123772, 8128154, 8128134, 8116067, 8117086, 8119886, 8115878, 8118972, 8118469, 8118934, 8119664, 8118899, 8119466], "C": [8112567, 8114486, 8117872, 8117009, 8121035, 8124320, 8113338, 8116442, 8121988, 8120682, 8122009, 8128422, 8130552, 8113770, 8117339, 8116750], "D": [8110246, 8110989, 8115114, 8112497, 8111050, 8112447, 8109737, 8115431, 8111354, 8111585, 8113528, 8114235, 8114084, 8108822, 8113696, 8116276, 8114733, 8114795, 8112957, 8112642], "B": [8108782, 8109337, 8115774, 8108967, 8110289, 8109920, 8110734, 8108738, 8109834, 8112357, 8109436, 8112150, 8112245, 8109821, 8112135, 8108859, 8109140, 8108856, 8110418, 8108483], "A": [8107723, 8108745, 8116336, 8108373, 8107695, 8108517, 8107682, 8107784, 8107553, 8108585, 8107565, 8112928, 8110053, 8110849, 8110377, 8107596, 8107999, 8107713, 8108893, 8107595]}, "name": "E. Pillars", "statement": "Marmot found a row with pillars. The -th pillar has the height of\r\nmeters. Starting from one pillar , Marmot wants to jump on the pillars ,\r\n..., . (). From a pillar Marmot can jump on a pillar only if and , where\r\nis the absolute value of the number .Now Marmot is asking you find out a\r\njump sequence with maximal length and print it.\r\n", "solutions": ["#include <cstring>\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long ll;\nconst int kMaxN = 100000;\nconst int kInf = 0x3f3f3f3f;\nint n, d;\nll h[kMaxN], axis[kMaxN];\nint f[kMaxN], g[kMaxN];\nint m;\n\nstruct Pair {\n    int v, r;\n    Pair() {}\n    Pair(int _v, int _r) : v(_v), r(_r) {}\n    Pair operator+(const Pair &t) const {\n        if (v > t.v) \n            return *this;\n        else\n            return t;\n    }\n};\n\nstruct Node {\n    Pair p;\n    Node *son[2];\n    Node() {\n        p = Pair(-kInf, -1);\n        son[0] = son[1] = NULL;\n    }\n    void update() {\n        p = son[0]->p + son[1]->p;\n    }\n} nodes[kMaxN * 2 - 1], *nodeIdx = nodes, *root = NULL;\n\nNode *build(int l, int r) {\n    Node *res = nodeIdx ++;\n    if (l + 1 < r) {\n        int mid = (l + r) >> 1;\n        res->son[0] = build(l, mid);\n        res->son[1] = build(mid, r);\n    }\n    return res;\n}\n\nPair askOnRange(int l, int r, Node *pos, int pL, int pR) {\n    if (l >= pR || r <= pL) {\n        return Pair(-kInf, -1);\n    } else if (l <= pL && r >= pR) {\n        return pos->p;\n    } else {\n        int mid = (pL + pR) >> 1;\n        return askOnRange(l, r, pos->son[0], pL, mid) + askOnRange(l, r, pos->son[1], mid, pR);\n    }\n}\n\nvoid changeOnRange(int x, Pair p, Node *pos, int pL, int pR) {\n    if (pL + 1 == pR) {\n        if (p.v > pos->p.v) {\n            pos->p = p;\n        }\n    } else {\n        int mid = (pL + pR) >> 1;\n        if (x < mid) \n            changeOnRange(x, p, pos->son[0], pL, mid);\n        else\n            changeOnRange(x, p, pos->son[1], mid, pR);\n        pos->update();\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin >> n >> d;\n    for (int i = 0; i < n; ++ i) {\n        cin >> h[i];\n        axis[i] = h[i];\n    }\n    sort(axis, axis + n);\n    m = unique(axis, axis + n) - axis;\n    root = build(0, m);\n    for (int i = n - 1; i >= 0; -- i) {\n        f[i] = 1;\n        g[i] = -1;\n\n        ll t = h[i] + d;\n        if (t <= axis[m - 1]) {\n            int lb = lower_bound(axis, axis + m, t) - axis;\n            Pair p = askOnRange(lb, m, root, 0, m);\n            if (p.v + 1 >= f[i]) {\n                f[i] = p.v + 1;\n                g[i] = p.r;\n            }\n        }\n\n        t = h[i] - d;\n        if (t >= axis[0]) {\n            int rb = m;\n            if (t < axis[m - 1]) {\n                rb = upper_bound(axis, axis + m, t) - axis;\n            }\n            Pair p = askOnRange(0, rb, root, 0, m);\n            if (p.v + 1 >= f[i]) {\n                f[i] = p.v + 1;\n                g[i] = p.r;\n            }\n        }\n\n        changeOnRange(lower_bound(axis, axis + m, h[i]) - axis, Pair(f[i], i), root, 0, m);\n    }\n    int s = 0;\n    for (int i = 1; i < n; ++ i)\n        if (f[i] > f[s]) s = i;\n    cout << f[s] << endl;\n    for (int t = s; t != -1; t = g[t]) {\n        cout << (t + 1) << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "data structures", "dp", "sortings", "trees"], "dificulty": "2000", "interactive": false}