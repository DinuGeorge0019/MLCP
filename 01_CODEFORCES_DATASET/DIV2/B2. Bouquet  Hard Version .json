{
    "link": "https://codeforces.com//contest/1995/problem/B2",
    "problemId": "2772826",
    "problem_idx": "B2",
    "shortId": "1995B2",
    "contest_number": "1995",
    "problem_submissions": {
        "D": [
            272131872,
            272130569,
            272133863,
            272134415,
            272137449,
            272131543,
            272154573,
            272151706,
            272151276,
            272141813,
            272139057,
            272151246,
            272151986,
            272153217,
            272157571,
            272148679,
            272149814,
            272486180,
            272157625
        ],
        "C": [
            272114157,
            272113319,
            272111654,
            272121111,
            272111819,
            272119019,
            272113803,
            272118860,
            272116736,
            272123439,
            272121989,
            272122933,
            272112629,
            272120005,
            272111612,
            272116249,
            272108377,
            272486053,
            272120187
        ],
        "B2": [
            272102449,
            272103267,
            272100652,
            272099671,
            272128930,
            272108225,
            272104913,
            272104116,
            272101309,
            272106328,
            272112408,
            272104562,
            272129604,
            272109901,
            272102807,
            272107257,
            272115397,
            272485973,
            272104395
        ],
        "B1": [
            272096864,
            272101887,
            272104047,
            272103720,
            272094726,
            272108617,
            272105391,
            272104979,
            272103341,
            272103459,
            272111706,
            272103650,
            272098283,
            272103066,
            272101216,
            272107954,
            272116416,
            272485941,
            272098022
        ],
        "A": [
            272090620,
            272090574,
            272092410,
            272090882,
            272090527,
            272090716,
            272091404,
            272090846,
            272090748,
            272091332,
            272090661,
            272091173,
            272091300,
            272090978,
            272091057,
            272091479,
            272092003,
            272485907,
            272092660
        ],
        "E1": [
            272173791,
            272497229,
            272245140
        ],
        "E2": [
            272497185,
            272274307
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131851",
    "editorial": "SolutionWe already have a list of . We can use hash map to be able to\r\ncheck for any by .We again will try to assemble the bouquet only with\r\nflowers with petals. We set . Then we have . Let\u00e2\u0080\u0099s set . Then we have .\r\nLet\u00e2\u0080\u0099s substitute flower with petals with flower with petals as many\r\ntimes as we can. This can be done times, as each operation will require\r\nus 1 coin, 1 flower in the bouquet with petals and one 1 flower with\r\npetals not in the bouquet. In total we can get petals.This assembling is\r\noptimal. Here is why. Suppose that we have flowers with petals and\r\nflowers with petals and greater total value of . We already know that by\r\nchoosing of . If , then we can \u00e2\u0080\u009dundo\u00e2\u0080\u009d our operation times, sum is still\r\nnot greater than , and we know that now there can\u00e2\u0080\u0099t be more than flowers\r\nwith petals, as otherwise we didn\u00e2\u0080\u0099t chose optimal . If , then , if then\r\nit is just the case when we have only flowers with petals which will be\r\nconsidered in case , if then and we already found the maximum. So and\r\nand is not better than optimal.Total time complexity is .\r\n",
    "name": "B2. Bouquet  Hard Version ",
    "statement": "A girl is preparing for her birthday and wants to buy the most beautiful\r\nbouquet. There are a total of n different types of flowers in the store,\r\neach of which is characterized by the number of petals and the quantity\r\nof this type of flower. A flower with k petals costs k coins. The girl\r\nhas decided that the difference in the number of petals between any two\r\nflowers she will use to decorate her cake should not exceed one. At the\r\nsame time, the girl wants to assemble a bouquet with the maximum\r\npossible number of petals. Unfortunately, she only has m coins, and she\r\ncannot spend more. What is the maximum total number of petals she can\r\nassemble in the bouquet?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#include <ext/pb_ds/assoc_container.hpp>#include <ext/pb_ds/trie_policy.hpp>using namespace std;using namespace __gnu_pbds;typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;#ifndef ONLINE_JUDGE    #include \"debug.h\"#else    #define dbg(...) 42    template<typename T>ostream&operator<<(ostream&os,vector<T>&vec){for(signed i=0;i+1<vec.size();++i){os<<vec[i]<<\" \";}if(vec.size()>0)os<<vec.back();return os;}#endif\u00a0#define all(x) x.begin(), x.end()#define rall(x) x.rbegin(), x.rend()\u00a0template<typename T>istream&operator>>(istream&is,vector<T>&vec){for(T&element:vec){is>>element;}return is;}template<typename T>void chmin(T&x,T y){x=min(x,y);}template<typename T>void chmax(T&x,T y){x=max(x,y);}\u00a0#define int int64_t\u00a0void test_case(signed ___) {    int64_t n, m;    cin >> n >> m;    vector<int> ar(n);    cin >> ar;\u00a0    vector<int> c(n);    cin >> c;\u00a0    map<int64_t, int64_t> mp;    for (int i = 0; i < n; ++i) {        mp[ar[i]] = c[i];    }\u00a0    int64_t res = 0;\u00a0    for (auto [x, y] : mp) {        int64_t can_buy_first = min(y, m/x);        int64_t nxt = x+1;        int64_t can_buy_second = 0;        if (mp.count(nxt)) {            can_buy_second = mp[x+1];        }        int64_t bought_second = min((m-can_buy_first*x)/nxt, can_buy_second);        int64_t need_inc = m - can_buy_first*x - bought_second*nxt;        int64_t can_sub = min(can_buy_first, can_buy_second-bought_second);        can_sub = min(can_sub, need_inc);        int64_t now = can_buy_first*x + bought_second*nxt + can_sub;        res = max(res, now);    }    cout << res << \"\\n\";}\u00a0signed main(void) {    cin.tie(0)->sync_with_stdio(false);\u00a0    signed tt = 1;    cin >> tt;    while (tt--)     test_case(69420);}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "greedy",
        "math",
        "sortings",
        "two pointers"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B2. Bouquet  Hard Version .json"
}