{
    "link": "https://codeforces.com//contest/1904/problem/A",
    "problemId": "2374320",
    "problem_idx": "A",
    "shortId": "1904A",
    "contest_number": "1904",
    "problem_submissions": {
        "F": [
            236570080,
            236576621,
            236554431,
            236568040,
            236582005,
            236574981,
            236880626,
            236880480,
            236569573
        ],
        "E": [
            236554914,
            236578860,
            236576444,
            236573774,
            238458664,
            236560297,
            236558822,
            236558918,
            236569149,
            236563127,
            236567711,
            236569198,
            236566626,
            236565306,
            236568569,
            236566882,
            236569261,
            236579274,
            236552305,
            236552808,
            236798985
        ],
        "D1": [
            236545065,
            236536170,
            236543035,
            236535328,
            236546645,
            236545333,
            236534429,
            236543154,
            236535118,
            236545269,
            236548952,
            236561907,
            236552142,
            236547668,
            236547285,
            236579190,
            236560952,
            236535340,
            236566707
        ],
        "D2": [
            236544975,
            236536268,
            236547976,
            236535232,
            236546707,
            236545240,
            236539045,
            236543101,
            236535019,
            236550494,
            236549022,
            236539644,
            236552226,
            236551334,
            236547141,
            236579204,
            236562744,
            236535269,
            236566631
        ],
        "C": [
            236537578,
            236532163,
            236538305,
            236529701,
            236530813,
            236537981,
            236531278,
            236536485,
            236540998,
            236534952,
            236537201,
            236530975,
            236533757,
            236539773,
            236559221,
            236579140,
            236529162,
            236713604,
            236530644
        ],
        "B": [
            236533750,
            236526956,
            236527715,
            236527401,
            236528167,
            236531303,
            236527554,
            236530718,
            236528605,
            236528181,
            236531779,
            236528715,
            236530882,
            236530328,
            236531954,
            236579315,
            236527688,
            236526407,
            236558484,
            236528501
        ],
        "A": [
            236526415,
            236525678,
            236525809,
            236525816,
            236525646,
            236527341,
            236525550,
            236527627,
            236527718,
            236525848,
            236525742,
            236526468,
            236525731,
            236528067,
            236527808,
            236579299,
            236525701,
            236525590,
            236554437,
            236526433
        ]
    },
    "name": "A. Forked ",
    "statement": "Lunchbox is done with playing chess! His queen and king just got forked\r\nagain!In chess, a fork is when a knight attacks two pieces of higher\r\nvalue, commonly the king and the queen. Lunchbox knows that knights can\r\nbe tricky, and in the version of chess that he is playing, knights are\r\neven trickier: instead of moving 1 tile in one direction and 2 tiles in\r\nthe other, knights in Lunchbox\u2019s modified game move a tiles in one\r\ndirection and b tiles in the other.Lunchbox is playing chess on an\r\ninfinite chessboard which contains all cells (x,y) where x and y are\r\n(possibly negative) integers. Lunchbox\u2019s king and queen are placed on\r\ncells (x_K,y_K) and (x_Q,y_Q) respectively. Find the number of positions\r\nsuch that if a knight was placed on that cell, it would attack both the\r\nking and queen.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint T;\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcin >> T;\n\twhile (T--) {\n\t\tint a, b, x, y, z, w;\n\t\tcin >> a >> b >> x >> y >> z >> w;\n\t\tconst int dx[8] = {a, a, -a, -a, b, b, -b, -b};\n\t\tconst int dy[8] = {b, -b, b, -b, a, -a, a, -a};\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < (a == b ? 4 : 8); ++i) {\n\t\t\tint px = x + dx[i], py = y + dy[i];\n\t\t\tint tx = abs(px - z), ty = abs(py - w);\n\t\t\tif ((tx == a && ty == b) || (tx == b && ty == a)) ++ans;\n\t\t} \n\t\tcout << ans << '\\n';\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Forked .json",
    "editorial_link": "https://codeforces.com//blog/entry/123160",
    "editorial": "SolutionThere are at most positions of the knight that can attack a\r\nsingle cell. Therefore, we can find all positions that attack the king\r\nand the positions that attack the queen and count the number of\r\npositions that appear in both of these lists.\r\n"
}