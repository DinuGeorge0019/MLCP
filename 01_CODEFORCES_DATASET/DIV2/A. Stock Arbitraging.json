{
    "link": "https://codeforces.com//contest/1150/problem/A",
    "problemId": "337485",
    "problem_idx": "A",
    "shortId": "1150A",
    "contest_number": "1150",
    "problem_submissions": {
        "B": [
            53540534,
            53507569,
            53508198,
            53505953,
            53507902,
            53502830,
            53513376,
            53506258,
            53506938,
            53507029,
            53505090,
            53506786,
            53507919,
            53505701,
            53508136,
            53505737,
            53510148,
            53505896,
            53509474,
            53506927
        ],
        "A": [
            53540520,
            53504501,
            53501762,
            53504323,
            53502423,
            53506385,
            53503912,
            53503441,
            53502508,
            53503428,
            53501838,
            53503271,
            53503651,
            53502306,
            53502491,
            53507914,
            53502081,
            53502083,
            53506610,
            53502822
        ],
        "D": [
            53516414,
            53520400,
            53521416,
            53522657,
            53528159,
            53520710,
            53520700,
            53521674,
            53520691,
            53521939,
            53524571,
            53524486,
            53563821,
            53526080,
            53525497,
            53525654,
            53525306,
            53525173,
            53524887,
            53526333,
            53526204
        ],
        "C": [
            53509607,
            53510070,
            53509423,
            53505062,
            53510041,
            53509499,
            53512010,
            53510164,
            53511943,
            53509231,
            53509848,
            53515668,
            53510065,
            53514034,
            53514382,
            53512626,
            53511942,
            53512622,
            53512550
        ],
        "E": [
            53531623,
            53531513,
            53525648
        ]
    },
    "name": "A. Stock Arbitraging",
    "statement": "Welcome to Codeforces Stock Exchange! We’re pretty limited now as we\r\ncurrently allow trading on one stock, Codeforces Ltd. We hope you’ll\r\nstill be able to make profit from the market!In the morning, there are n\r\nopportunities to buy shares. The i-th of them allows to buy as many\r\nshares as you want, each at the price of s_i bourles.In the evening,\r\nthere are m opportunities to sell shares. The i-th of them allows to\r\nsell as many shares as you want, each at the price of b_i bourles. You\r\ncan’t sell more shares than you have.It’s morning now and you possess r\r\nbourles and no shares.What is the maximum number of bourles you can hold\r\nafter the evening?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nconst int MAXN=30+5;\nint n,m,r;\nint s[MAXN+5],b[MAXN+5];\nint mins=1000,maxb=1;\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&r);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d\",&s[i]);\n\t\tmins=std::min(mins,s[i]);\n\t}\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%d\",&b[i]);\n\t\tmaxb=std::max(maxb,b[i]);\n\t}\n\tif(mins>=maxb){\n\t\tprintf(\"%d\\n\",r);\n\t}else{\n\t\tprintf(\"%d\\n\",r%mins+r/mins*maxb);\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Stock Arbitraging.json",
    "editorial_link": "https://codeforces.com/blog/entry/66783",
    "editorial": "The main observation is that we always want to buy shares as cheaply as\r\npossible, and sell them as expensively as possible. Therefore, we should\r\npick the lowest price at which we can buy shares , and the highest price\r\nat which we can sell the shares . Now, we have two cases: If , itâs\r\noptimal to buy as many shares and possible in the morning and sell them\r\nall in the evening. We can buy as many as shares and gain bourles profit\r\non each of them. Therefore, the final balance is . If , weâre not\r\ngaining any profit on the shares and therefore we shouldnât care about\r\ntrading stocks at all. The final balance is then . The solution can be\r\ntherefore implemented in time. However, the constraints even allowed\r\nbrute-forcing the seller, the buyer and the amount of stock weâre buying\r\nin time.Note that many programming languages have routines for finding\r\nthe minima/maxima of the collections of integers: e.g. in C++, in Java,\r\nor in Python. This should make the code shorter and quicker to write.\r\n",
    "hint": []
}