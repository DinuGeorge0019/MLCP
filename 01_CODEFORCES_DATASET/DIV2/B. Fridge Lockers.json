{
    "link": "https://codeforces.com//contest/1255/problem/B",
    "problemId": "475554",
    "problem_idx": "B",
    "shortId": "1255B",
    "contest_number": "1255",
    "problem_submissions": {
        "E1": [
            65376345,
            65362349,
            65379019,
            65379231,
            65381365,
            65366418,
            65380019,
            65372166,
            65377390,
            65381751,
            65383634,
            65381490,
            65380093,
            65389225,
            65369401,
            65379688,
            65378584,
            65380932,
            65379653,
            65385144
        ],
        "E2": [
            65376264,
            65385821,
            65381572,
            65386523,
            65384540,
            65381279,
            65389375,
            65384984,
            65389091,
            65691059,
            65704614,
            65451948
        ],
        "F": [
            65375779,
            65385211,
            65388490,
            65389131,
            65387550,
            65391223,
            65696815,
            65727810,
            65496537
        ],
        "D": [
            65370945,
            65376492,
            65370356,
            65373732,
            65376315,
            65359238,
            65370229,
            65377454,
            65373608,
            65377110,
            65372789,
            65372691,
            65369056,
            65377955,
            65368879,
            65372201,
            65375025,
            65360545,
            65373196
        ],
        "C": [
            65364209,
            65367561,
            65365185,
            65370379,
            65369180,
            65375282,
            65364624,
            65368566,
            65367696,
            65368791,
            65366250,
            65385810,
            65363445,
            65364504,
            65364341,
            65366891,
            65364298,
            65372266,
            65367337
        ],
        "B": [
            65357074,
            65365610,
            65356532,
            65359436,
            65360660,
            65362219,
            65358616,
            65357121,
            65358490,
            65360944,
            65360793,
            65359110,
            65357689,
            65359084,
            65357670,
            65361106,
            65357886,
            65367149,
            65358881
        ],
        "A": [
            65352414,
            65792669,
            65360046,
            65351993,
            65354820,
            65353062,
            65354583,
            65352997,
            65351826,
            65353043,
            65356292,
            65352153,
            65352035,
            65353191,
            65353105,
            65351942,
            65353378,
            65352978,
            65362432,
            65354867
        ]
    },
    "name": "B. Fridge Lockers",
    "statement": "Hanh lives in a shared apartment. There are n people (including Hanh)\r\nliving there, each has a private fridge. n fridges are secured by\r\nseveral steel chains. Each steel chain connects two fridges and is\r\nprotected by a digital lock. The owner of a fridge knows passcodes of\r\nall chains connected to it. A fridge can be open only if all chains\r\nconnected to it are unlocked. For example, if a fridge has no chains\r\nconnected to it at all, then any of n people can open it. The weights of\r\nthese fridges are a_1, a_2,\r\nldots, a_n. To make a steel chain connecting fridges u and v, you have\r\nto pay a_u + a_v dollars. Note that the landlord allows you to create .\r\nHanh\u2019s apartment landlord asks you to create exactly m steel chains so\r\nthat all fridges are private. A fridge is private if and only if, among\r\nn people living in the apartment, only the owner can open it (i.e. no\r\nother person acting alone can do it). In other words, the fridge i is\r\nnot private if there exists the person j (i\r\nne j) that the person j can open the fridge i.For example, in the\r\npicture all the fridges are private. On the other hand, if there are n=2\r\nfridges and only one chain (which connects them) then both fridges are\r\nnot private (both fridges can be open not only by its owner but also by\r\nanother person).Of course, the landlord wants to minimize the total cost\r\nof all steel chains to fulfill his request. Determine whether there\r\nexists any way to make exactly m chains, and if yes, output any solution\r\nthat minimizes the total cost.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nlong long T, n, m, a[2000], ans, mini1, mini2;\n\nint main() {\n\tcin >> T;\n\twhile (T--) {\n\t\tcin >> n >> m;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tcin >> a[i];\n\t\t}\n\t\tmini1 = 1;\n\t\tmini2 = 2;\n\t\tif (a[mini1] > a[mini2]) {\n\t\t\tswap(mini1, mini2);\n\t\t}\n\t\tif (n == 2 || m < n) {\n\t\t\tcout << \"-1\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tans = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (i > 2) {\n\t\t\t\tif (a[i] < a[mini2]) {\n\t\t\t\t\tmini2 = i;\n\t\t\t\t\tif (a[mini2] < a[mini1]) {\n\t\t\t\t\t\tswap(mini1, mini2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tans += 2*a[i];\n\t\t}\n\t\tfor (int i = n+1; i <= m; i++) {\n\t\t\tans += a[mini1] + a[mini2];\n\t\t}\n\t\tcout << ans << \"\\n\";\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tcout << i << \" \";\n\t\t\tif (i == n) cout << 1;\n\t\t\telse cout << i+1;\n\t\t\tcout << \"\\n\";\n\t\t}\n\t\tfor (int i = n+1; i <= m; i++) {\n\t\t\tcout << mini1 << \" \" << mini2 << \"\\n\";\n\t\t}\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Fridge Lockers.json",
    "editorial_link": "https://codeforces.com//blog/entry/71594",
    "editorial": "There will be exactly numbers that appear only once in the input and\r\nthey are the first and the last element of the permutation. Let be any\r\nof them and start with the only triple that contains . If are the other\r\nmembers of the mentioned triple, there exists a unique triple that\r\ncontains but not . We can easily find that triple by searching through\r\nevery triple that contains (and there are at most such triples). By\r\nrepeating doing this, we can get a list that .From , we can construct a\r\npermutation that satisfies the problem. Assume we know and , then we can\r\nfind the rest of the permutation easily. To determine which number is ,\r\nwe can use the fact is the only number that only appears in and .\r\n"
}