{
    "link": "https://codeforces.com//contest/271/problem/E",
    "problemId": "2621",
    "problem_idx": "E",
    "shortId": "271E",
    "contest_number": "271",
    "problem_submissions": {
        "E": [
            3100960,
            3101029,
            3101071,
            3101158,
            3100866,
            3102870,
            3101166,
            3102181,
            3104424,
            3101146
        ],
        "D": [
            3097603,
            3098148,
            3098618,
            3105470,
            3097962,
            3097553,
            3102341,
            3095933,
            3103085,
            3099231,
            3098903,
            3234423,
            3234279,
            3097880,
            3098244,
            3098489,
            3098417,
            3098350
        ],
        "C": [
            3096548,
            3096735,
            3096791,
            3098514,
            3096739,
            3100014,
            3097999,
            3096954,
            3097536,
            3097492,
            3096753,
            3096325,
            3097045,
            3096662,
            3097008,
            3099380,
            3096917
        ],
        "B": [
            3095583,
            3095688,
            3095491,
            3095629,
            3097325,
            3094921,
            3095378,
            3095747,
            3095596,
            3095729,
            3095110,
            3095423,
            3095894,
            3095694,
            3096439,
            3095824
        ],
        "A": [
            3094225,
            3094352,
            3094125,
            3094074,
            3095532,
            3094090,
            3094248,
            3094063,
            3094079,
            3094404,
            3093980,
            3094108,
            3094610,
            3094523,
            3094534,
            3094629
        ]
    },
    "name": "E. Three Horses",
    "statement": "There are three horses living in a horse land: one gray, one white and\r\none gray-and-white. The horses are really amusing animals, which is why\r\nthey adore special cards. Each of those cards must contain two integers,\r\nthe first one on top, the second one in the bottom of the card. Let\u2019s\r\ndenote a card with on the top and in the bottom as .Each of the three\r\nhorses can paint the special cards. If you show an card to the gray\r\nhorse, then the horse can paint a new card. If you show an card, such\r\nthat and are even integers, to the white horse, then the horse can paint\r\na new card. If you show two cards and to the gray-and-white horse, then\r\nhe can paint a new card.Polycarpus really wants to get special cards , ,\r\n, . For that he is going to the horse land. He can take exactly one card\r\nto the horse land, such that . How many ways are there to choose the\r\ncard so that he can perform some actions in the horse land and get the\r\nrequired cards?Polycarpus can get cards from the horses only as a result\r\nof the actions that are described above. Polycarpus is allowed to get\r\nadditional cards besides the cards that he requires.\r\n",
    "solutions": [
        "#include<cstdio>\ntypedef long long LL;\nint n,m,x,a;\nLL  ans;\nvoid    read(int &x){\n\tchar    c;\n\tfor(c=getchar();c<'0'||c>'9';c=getchar());\n\tx=c-48;\n\tfor(c=getchar();c>='0'&&c<='9';c=getchar())x=x*10+c-48;\n}\nint gcd(int x,int y){return y?gcd(y,x%y):x;}\nvoid    work(LL x){\n    while(x<m){ans+=m-x,x*=2;}\n}\nint main(){\n    read(n),read(m);\n    read(x),x--;\n    for(int i=2;i<=n;i++){\n        read(a);\n        x=gcd(x,a-1);\n        if(x==1)break;\n    }\n    for(int i=1;i*i<=x;i++)\n        if(x%i==0){\n            int t=x/i;\n            if(i%2!=0)work(i);if(t!=i&&t%2!=0)work(t);\n        }\n    printf(\"%I64d\\n\",ans);\n    getchar(),getchar();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Three Horses.json",
    "editorial_link": "https://codeforces.com//blog/entry/6662",
    "editorial": "It could be proved, that a card can be transformed to any card , where\r\nis the maximal odd divisor of , and is just any positive integer. So\r\nevery must be divisible by , i. e. is a divisor of , and we can just\r\niterate over all possible divisors. Let\u00e2\u0080\u0099s take a look at all the initial\r\ncards , which have have as their maximal odd divisor: these are cards\r\nwith equal to , or , or , , , ... Don\u00e2\u0080\u0099t forget that the numbers and must\r\nnot exceed . It means that the total number of cards with some fixed\r\ndifference is exactly . The resulting solution: sum up , where is any\r\nodd divisor of , and is such, that .\r\n"
}