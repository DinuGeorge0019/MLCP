{
    "link": "https://codeforces.com//contest/1384/problem/C",
    "problemId": "681336",
    "problem_idx": "C",
    "shortId": "1384C",
    "contest_number": "1384",
    "problem_submissions": {
        "D": [
            87920747,
            87898550,
            87899799,
            87904419,
            87905595,
            87900804,
            87885567,
            87904258,
            87914433,
            87915245,
            87916166,
            87919718,
            87915464,
            87919225,
            87915479,
            87921886,
            87920890,
            87922578,
            87921368,
            87920046
        ],
        "F": [
            87913933
        ],
        "B1": [
            87894001,
            87885002,
            87901113,
            87888080,
            87892689,
            87910843,
            87920006,
            87917285,
            87898927,
            87884228,
            87892152,
            87886631,
            87893715,
            87908879,
            87900239,
            87907063,
            87892421,
            87898971,
            87917937,
            87897854
        ],
        "B2": [
            87893926,
            87884835,
            87901230,
            87887888,
            87903446,
            87910900,
            87919888,
            87917176,
            87906127,
            87884007,
            87892285,
            87886523,
            87893549,
            87908713,
            87900384,
            87907601,
            87892328,
            87898841,
            87917847,
            87897690
        ],
        "C": [
            87885628,
            87894004,
            87882731,
            87893702,
            87872158,
            87889498,
            87895035,
            87884029,
            87889346,
            87904942,
            87896617,
            87893149,
            87904403,
            87889926,
            87909570,
            87895224,
            87907611,
            87906036,
            87884342,
            87911186
        ],
        "A": [
            87871418,
            87873285,
            87873996,
            87872062,
            87871221,
            87872543,
            87898590,
            87873955,
            87871869,
            87871615,
            87875627,
            87876144,
            87877768,
            87875116,
            87878214,
            87873342,
            87873019,
            87876431,
            87871586,
            87881479
        ]
    },
    "name": "C. String Transformation 1",
    "statement": "Koa the Koala has two strings A and B of the same length n (|A|=|B|=n)\r\nconsisting of the first 20 lowercase English alphabet letters (ie. from\r\nto ).In one move Koa: selects some subset of positions p_1, p_2,\r\nldots, p_k (k\r\nge 1; 1\r\nle p_i\r\nle n; p_i\r\nneq p_j if i\r\nneq j) of A such that A_{p_1} = A_{p_2} =\r\nldots = A_{p_k} = x (ie. all letters on this positions are equal to some\r\nletter x). selects a letter y (from the first 20 lowercase letters in\r\nEnglish alphabet) such that y>x (ie. letter y is alphabetically than x).\r\nsets each letter in positions p_1, p_2,\r\nldots, p_k to letter y. More formally: for each i (1\r\nle i\r\nle k) Koa sets A_{p_i} = y. .Koa wants to know the smallest number of\r\nmoves she has to do to make strings equal to each other (A = B) or to\r\ndetermine that there is no way to make them equal. Help her!\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int inf=(int)(2e9);\nconst ll INF=(ll)(5e18);\nconst int N=101;\nconst int M=100005;\nint t,n;\nint a[N][N];\nchar s1[M],s2[M];\n\nint main()\n{\n\tcin>>t;\n\twhile(t--)\n\t{\n\t\tmemset(a,0,sizeof(a));\n\t\tscanf(\"%d\",&n);\n\t\tscanf(\"%s\",s1+1); scanf(\"%s\",s2+1);\n\t\tint bl=1;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(s2[i]<s1[i]) bl=0;\n\t\t\ta[s1[i]-'a'][s2[i]-'a']++;\n\t\t}\n\t\tif(!bl)\n\t\t{\n\t\t\tputs(\"-1\");\n\t\t\tcontinue;\n\t\t}\n\t\tint sum=0;\n\t\tfor(int l=0;l<20;l++)\n\t\t{\n\t\t\tfor(int r=l+1;r<20;r++)\n\t\t\t{\n\t\t\t\tif(a[l][r])\n\t\t\t\t{\n\t\t\t\t\tsum++;\n\t\t\t\t\tfor(int i=r+1;i<20;i++) \n\t\t\t\t\t{\n\t\t\t\t\t\ta[r][i]+=a[l][i];\n\t\t\t\t\t\ta[l][i]=0;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",sum);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dsu",
        "graphs",
        "greedy",
        "sortings",
        "trees"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. String Transformation 1.json",
    "editorial_link": "https://codeforces.com//blog/entry/80562",
    "editorial": "First of all, if there exists some i\n such that Ai>Bi\n there isn't a solution.\n\nOtherwise, create a graph where every character is a node, and put a directed edge between node u\n and node v\n if character u\n must be transformed into character v\n (ie. from Ai\n to Bi\n for all i\n). We must select a list with minimum number of operations such that if there is an edge from node u\n to node v\n, then it must exist a subsequence of the operations in the list that transforms u\n into v\n.\n\nEach weakly connected component C\n can be solved independently and the answer for each component is |C|?1\n. So total answer is |ALP|?k\n where k\n is the number of weakly connected components in the graph.\n\nProof:\n\nEach weakly connected component C\n requires at least |C|?1\n operations (because they are connected). Since there are no cycles in the graph a topological order exists. Find one and select each pair of consecutive nodes in this order as the list of operations.\n\nTime complexity: O(|A|+|B|+|ALP|)\n per test case where |ALP|=20\n denotes size of alphabet",
    "hint": []
}