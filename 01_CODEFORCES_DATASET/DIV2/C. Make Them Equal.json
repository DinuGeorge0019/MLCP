{
    "link": "https://codeforces.com//contest/1594/problem/C",
    "problemId": "1135636",
    "problem_idx": "C",
    "shortId": "1594C",
    "contest_number": "1594",
    "problem_submissions": {
        "E2": [
            131201431,
            131189862,
            131190731,
            131204830,
            131335383,
            131226398,
            131198152,
            131201638,
            131204894,
            131232694,
            131217147,
            131214481,
            131205202,
            131197222,
            131203076,
            131208236,
            131224943,
            131226297,
            131228207,
            131205596
        ],
        "F": [
            131193546,
            131198168,
            131204819,
            131191276,
            131194027,
            131211385,
            131209381,
            131214118,
            131206895,
            131201547,
            131217018,
            131226069,
            131219283,
            131221051,
            131209964,
            131207271,
            131214277,
            131238575,
            131228401,
            131201592
        ],
        "E1": [
            131181296,
            131181310,
            131181914,
            131185896,
            131188245,
            131188013,
            131187848,
            131190323,
            131191597,
            131193172,
            131188008,
            131187198,
            131191256,
            131191508,
            131193161,
            131216105,
            131192871,
            131192806,
            131193863
        ],
        "C": [
            131178489,
            131175224,
            131175277,
            131176811,
            131175035,
            131178056,
            131178928,
            131176905,
            131179134,
            131182174,
            131176234,
            131176202,
            131182167,
            131177472,
            131233310,
            131183523,
            131183173,
            131182656,
            131183921,
            131177712
        ],
        "D": [
            131177404,
            131179044,
            131177912,
            131183480,
            131185907,
            131184631,
            131184408,
            131188052,
            131189056,
            131189293,
            131184453,
            131184011,
            131187702,
            131188002,
            131190262,
            131189525,
            131200165,
            131190411,
            131188282
        ],
        "A": [
            131171410,
            131170689,
            131170400,
            131171742,
            131170602,
            131170026,
            131170772,
            131172659,
            131172422,
            131172236,
            131170874,
            131170513,
            131172774,
            131170479,
            131173618,
            131170466,
            131175176,
            131176321,
            131170181
        ],
        "B": [
            131170592,
            131172208,
            131170486,
            131173477,
            131172222,
            131172615,
            131174348,
            131174291,
            131175520,
            131179615,
            131172910,
            131172727,
            131175758,
            131172405,
            131179739,
            131172566,
            131179352,
            131177990,
            131173135
        ]
    },
    "name": "C. Make Them Equal",
    "statement": "Theofanis has a string s_1 s_2\r\ndots s_n and a character c. He wants to make all characters of the\r\nstring equal to c using the minimum number of operations.In one\r\noperation he can choose a number x (1\r\nle x\r\nle n) and , where i is divisible by x, replace s_i with c. Find the\r\nminimum number of operations required to make all the characters equal\r\nto c and the x-s that he should use in his operations.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\nint n,fla[400400]; \nchar s[300300]; \nvoid solve() {\n    scanf(\"%d\",&n);\n    char c;\n    cin>>c;\n    scanf(\"%s\",s+1); \n    int ok=1;  \n    for (int i=1;i<=n;i++) {\n        if (s[i]!=c) {\n            ok=0; break ; \n        }\n    }\n    if (ok) {\n        puts(\"0\");\n        return ; \n    }\n    if (s[n]==c) {\n        puts(\"1\");\n        printf(\"%d\\n\",n);\n        return ; \n    }\n    ok=1; \n    for (int i=1;i<=n;i++) fla[i]=0; \n    for (int i=1;i<=n;i++) {\n        if (s[i]!=c) {\n            for (int j=1;j*j<=i;j++) {\n                if (i%j==0) \n                fla[j]=1,fla[i/j]=1;  \n            }\n        }\n    }\n    for (int i=1;i<=n;i++) {\n        if (!fla[i]) {\n            puts(\"1\");\n            printf(\"%d\\n\",i); \n            return ; \n        }\n    }\n    puts(\"2\");\n    printf(\"%d \",n);\n    for (int i=1;i<=n;i++) {\n        if (n%i!=0) {\n            printf(\"%d\\n\",i);\n            return ; \n        }\n    }\n}\nint main() {\n    int T;\n    scanf(\"%d\",&T);\n    while (T--) {\n        solve(); \n    }\n    return 0; \n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "math",
        "strings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Make Them Equal.json",
    "editorial_link": "https://codeforces.com//blog/entry/95525",
    "editorial": "If the whole string is equal to then you donât need to make any\r\noperations.In order to find if it is possible with exactly operation, we\r\ncan pass through every and count all the letters that are divisible by .\r\nThis takes time complexity.If for some all its multiples are then the\r\nanswer is operation with that .If all the above conditions donât hold\r\nyou can always make operations and make all the elements equal.One\r\npossible way is with and .After the first operation only the last\r\nelement of is not thus if we use since then is not divisible by and it\r\nwill become equal to .Time complexity: per test case.\r\n",
    "hint": [
        "Hint You need atmost 2 operations."
    ]
}