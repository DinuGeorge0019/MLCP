{
    "link": "https://codeforces.com//contest/1734/problem/E",
    "problemId": "1552472",
    "problem_idx": "E",
    "shortId": "1734E",
    "contest_number": "1734",
    "problem_submissions": {
        "F": [
            173185632,
            175218475,
            173190546,
            173191658,
            173196355,
            173188817,
            173202455,
            173187697,
            173194085,
            173183123,
            173202233,
            173182648,
            173206619,
            173206031,
            173205548,
            173214371,
            173208785,
            173211522,
            173212671,
            173216120,
            173216610
        ],
        "E": [
            173175699,
            173166069,
            173180507,
            173192080,
            173179852,
            173184971,
            173197330,
            173182409,
            173189641,
            173194573,
            173204944,
            173179755,
            173194867,
            173195446,
            173190898,
            173195535,
            173185614,
            173194125,
            173192157,
            173195124
        ],
        "D": [
            173172113,
            173184362,
            173173933,
            173177548,
            173199975,
            173194507,
            173189936,
            173202354,
            173195516,
            173191220,
            173189692,
            173195961,
            173190592,
            173192533,
            173179112,
            173186768,
            173197574,
            173186962,
            173186353,
            173189234
        ],
        "C": [
            173171420,
            173173245,
            173168676,
            173179830,
            173175634,
            173167876,
            173187173,
            173175996,
            173196980,
            173169255,
            173195772,
            173170163,
            173177695,
            173173390,
            173174005,
            173175329,
            173173990,
            173179546,
            173179107,
            173169662
        ],
        "B": [
            173169227,
            173171175,
            173193336,
            173168846,
            173171766,
            173171866,
            173178703,
            173171564,
            173199117,
            173175233,
            173193770,
            173167986,
            173174104,
            173170609,
            173170567,
            173169827,
            173173815,
            173175076,
            173172718,
            173176884
        ],
        "A": [
            173165060,
            173168188,
            173166559,
            173165334,
            173167696,
            173173794,
            173167259,
            173167875,
            173200226,
            173178050,
            173191224,
            173165056,
            173168611,
            173165867,
            173165345,
            173165147,
            173168349,
            173167419,
            173166169,
            173173512
        ]
    },
    "name": "E. Rectangular Congruence",
    "statement": "You are given a number n, and an array of n integers b_1,b_2,\r\nldots, b_n, where 0\r\nleq b_i < n for each 1\r\nle i\r\nleq n.You have to find a matrix a of size n\r\ntimes n such that all of the following requirements hold: 0\r\nle a_{i,j} < n for all 1\r\nle i, j\r\nle n. a_{r_1, c_1} + a_{r_2, c_2}\r\nnot\r\nequiv a_{r_1, c_2} + a_{r_2, c_1}\r\npmod n for all positive integers r_1, r_2, c_1, and c_2 such that 1\r\nle r_1 < r_2\r\nle n and 1\r\nle c_1 < c_2\r\nle n. a_{i,i} = b_i for all 1\r\nle i\r\nleq n. Here x\r\nnot\r\nequiv y\r\npmod m denotes that x and y give different remainders when divided by\r\nm.If there are multiple solutions, output any. It can be shown that such\r\na matrix always exists under the given constraints.\r\n",
    "solutions": [
        "//author: wuge with noi2022 cu\n//https://www.luogu.com.cn/team/48234\n#include<bits/stdc++.h>\nusing namespace std;\n#define M998 const int mod=998244353\n#define M197 const int mod=1e9+7\n#define int long long\n#define genshin getchar\n#define impact isdigit\ninline int read()\n{\n     int shaya=0,wugecu=1;//5 spaces\n  char cirno_9=genshin();//2 spaces\n        while(!impact(cirno_9))//8 spaces\n  {if(cirno_9=='-')wugecu=-1;cirno_9=genshin();}//2 spaces\n  while(impact(cirno_9)) shaya=shaya*10+cirno_9-'0',cirno_9=genshin();//2 spaces\n return shaya*wugecu;//1 space\n}\nint a[505][505];\nvoid Meyi()\n{\n\tint n=read();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta[i][i]=read();\n\t\tfor(int j=0;j<n;j++)\n\t\t\ta[i][(i+j)%n]=(a[i][i]+i*j)%n;\n\t}\n\tfor(int i=0;i<n;i++,puts(\"\"))\n\t\tfor(int j=0;j<n;j++)\n\t\t\tprintf(\"%d \",a[i][j]);\n}\nsigned main()\n{\n\tint miHoYo=1;\n\twhile(miHoYo--) Meyi();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "number theory"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Rectangular Congruence.json",
    "editorial_link": "https://codeforces.com//blog/entry/107231",
    "editorial": "We say a matrix to be good if it satisfies the congruence condition (the\r\nsecond condition). When we have a good matrix, we can add any value to a\r\nwhole row while maintaining the congruence relation. The same is true\r\nfor adding the same value to a whole column. Suppose we have any good\r\nmatrix , then by adding to the -th row for each of , we obtain a good\r\nmatrix that has the desired values on the diagonal. In fact, there are a\r\nlot of possible constructions. We present a few of them here: . This\r\nneeds special handling when . . The coolest part is that all quadratic\r\npolynomials in the form are valid for all integers and As a bonus, we\r\nprove that the general quadratic polynomial gives a good construction.\r\nProofSince we can add values to a whole row or column, and are also\r\nconstant on the rows and columns, adding them by has no effect. So we\r\nmay just assume .So it suffices to show that satisfies the condition. We\r\ncan see directly that . As , , , and is a prime, this expression must be\r\nnonzero .\r\n",
    "hint": []
}