{
    "link": "https://codeforces.com//contest/1614/problem/E",
    "problemId": "1203043",
    "problem_idx": "E",
    "shortId": "1614E",
    "contest_number": "1614",
    "problem_submissions": {
        "E": [
            137009194,
            137014194,
            137015789,
            137016362,
            137020752,
            137014205,
            137015539,
            137026112,
            137010161,
            137029153,
            137038215,
            137034410,
            137034461,
            137034375,
            137033386,
            137036667,
            137032190,
            137023207,
            137075934,
            137032904,
            137024920
        ],
        "D2": [
            137001410,
            137005681,
            137003285,
            137009439,
            137006489,
            137047807,
            137022355,
            137022814,
            137011076,
            137025868,
            137009738,
            137014291,
            137016349,
            137021410,
            137017855,
            137020600,
            137016886,
            137022178,
            137031343,
            137075935,
            137024473,
            137042227
        ],
        "D1": [
            137001180,
            137005447,
            137003383,
            137009205,
            137000884,
            137017961,
            137020978,
            137011203,
            137016671,
            136998649,
            136997230,
            137016563,
            137017097,
            137017709,
            137018992,
            137012342,
            137016351,
            137013550,
            137075936,
            137024377,
            136998698
        ],
        "C": [
            136997379,
            136997240,
            136998807,
            137002096,
            137007050,
            137000530,
            137002694,
            137003666,
            137011162,
            136999430,
            136998165,
            137006807,
            137006775,
            137007934,
            137009951,
            137007247,
            137002109,
            137007391,
            137075939,
            137005239,
            136992992
        ],
        "B": [
            136992729,
            136995061,
            136994469,
            136996499,
            136993703,
            136995623,
            136996491,
            136996472,
            137013016,
            136993489,
            136992988,
            136997915,
            136998466,
            137001753,
            136996259,
            136997667,
            136996579,
            137035495,
            137075938,
            136994606,
            136992231
        ],
        "A": [
            136989831,
            136990477,
            136990196,
            136991523,
            136991743,
            136990642,
            136990416,
            136989822,
            137014012,
            136989949,
            136989975,
            136991659,
            136990728,
            136994950,
            136991062,
            136991074,
            136989905,
            136990672,
            137075940,
            136989947,
            136989765
        ]
    },
    "name": "E. Divan and a Cottage",
    "statement": "’s new cottage is finally complete! However, after a thorough\r\ninspection, it turned out that the workers had installed the insulation\r\nincorrectly, and now the temperature in the house directly depends on\r\nthe temperature outside. More precisely, if the temperature in the house\r\nis P in the morning, and the street temperature is T, then by the next\r\nmorning the temperature in the house changes according to the following\r\nrule: P_{new} = P + 1, if P < T, P_{new} = P - 1, if P > T, P_{new} = P,\r\nif P = T. Here P_{new} is the temperature in the house next morning. is\r\na very busy businessman, so sometimes he is not at home for long periods\r\nand does not know what the temperature is there now, so he hired you to\r\nfind it. You will work for n days. In the beginning of the i-th day, the\r\ntemperature outside T_i is first given to you. After that, on the i-th\r\nday, you will receive k_i queries. Each query asks the following: \"if\r\nthe temperature in the house was x_i at the morning of the day, what\r\nwould be the temperature in the house next morning (after day i)?\"Please\r\nanswer all the businessman’s queries.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nconst int _ = 2e5 + 7 , __ = _ * 240; int N;\n#define mid ((l + r) >> 1)\nint mrk[__] , ch[__][2] , mn[__] , mx[__] , cnt;\nint create(int L , int R){int t = ++cnt; mn[t] = L; mx[t] = R; return t;}\nvoid mark(int &x , int v){mrk[x] += v; mn[x] += v; mx[x] += v;}\nvoid pushdown(int x , int l , int r){\n\tif(l == r) return;\n\tif(!ch[x][0]) ch[x][0] = create(l , mid);\n\tif(!ch[x][1]) ch[x][1] = create(mid + 1 , r);\n\tmark(ch[x][0] , mrk[x]); mark(ch[x][1] , mrk[x]); mrk[x] = 0;\n}\nvoid upd(int x){mn[x] = min(mn[ch[x][0]] , mn[ch[x][1]]); mx[x] = max(mx[ch[x][0]] , mx[ch[x][1]]);}\nvoid mark(int x , int l , int r , int L , int R , int v){\n\tif(l >= L && r <= R) return mark(x , v);\n\tpushdown(x , l , r);\n\tif(mid >= L) mark(ch[x][0] , l , mid , L , R , v);\n\tif(mid < R) mark(ch[x][1] , mid + 1 , r , L , R , v);\n\tupd(x);\n}\nint qL(int x , int l , int r , int v){\n\tif(l == r) return l;\n\tpushdown(x , l , r); if(mn[ch[x][1]] <= v) return qL(ch[x][1] , mid + 1 , r , v);\n\treturn qL(ch[x][0] , l , mid , v);\n}\nint qR(int x , int l , int r , int v){\n\tif(l == r) return l;\n\tpushdown(x , l , r); if(mx[ch[x][0]] >= v) return qR(ch[x][0] , l , mid , v);\n\treturn qR(ch[x][1] , mid + 1 , r , v);\n}\nint qry(int x , int l , int r , int t){\n\tif(!x) return t;\n\tif(l == r) return mn[x];\n\treturn (mid >= t ? qry(ch[x][0] , l , mid , t) : qry(ch[x][1] , mid + 1 , r , t)) + mrk[x];\n}\n\nint main(){\n\tios::sync_with_stdio(0); cin >> N; create(0 , 1e9); int lastans = 0;\n\tfor(int i = 1 ; i <= N ; ++i){\n\t\tint T; cin >> T;\n\t\tif(mn[1] < T) mark(1 , 0 , 1e9 , 0 , qL(1 , 0 , 1e9 , T - 1) , 1);\n\t\tif(mx[1] > T) mark(1 , 0 , 1e9 , qR(1 , 0 , 1e9 , T + 1) , 1e9 , -1);\n\t\tint K; cin >> K; while(K--){int p; cin >> p; p = (p + lastans) % (1000000000 + 1); cout << (lastans = qry(1 , 0 , 1e9 , p)) << '\\n';}\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Divan and a Cottage.json",
    "editorial_link": "https://codeforces.com//blog/entry/97283",
    "editorial": "SolutionLet the current answer for temperature . Before all days, is\r\nconsidered equal to .In order to respond to a request with a temperature\r\nof , we will just need to output the value of . But how to maintain ?\r\nWith the help of an implicit tree of segments, at the vertices of which\r\nthe minimum and maximum will be stored, as well as the variable , which\r\nwill contain the value that needs to be added to the current vertex\r\n(that is, such a variable that is needed to perform lazy operations on\r\nthe segment tree).At the beginning of the next day you get the\r\ntemperature . Now we need to change the current answer for some . We\r\nneed to find such that and add to them, and then find such that and add\r\nto them. All this is not difficult to do, just starting from the root of\r\nthe segment tree and stopping at the moments when: the maximum of the\r\ncurrent vertex is less than here we add ; the minimum of the current\r\nvertex is greater than here we add ; the minimum of the vertex is equal\r\nto the maximum of the vertex (and, therefore, the itself) here we do not\r\nadd anything. The resulting asymptotics in time: .\r\n",
    "hint": []
}