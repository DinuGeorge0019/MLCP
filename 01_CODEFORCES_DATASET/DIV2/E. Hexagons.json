{
    "link": "https://codeforces.com//contest/615/problem/E",
    "problemId": "45138",
    "problem_idx": "E",
    "shortId": "615E",
    "contest_number": "615",
    "problem_submissions": {
        "D": [
            15246218,
            15243648,
            15241674,
            15242192,
            15244574,
            15242022,
            15243833,
            15247327,
            15245928,
            15245965,
            15250600,
            15244765,
            15244668,
            15243379,
            15244617,
            15245499,
            15246279,
            15242819
        ],
        "C": [
            15243771,
            15245552,
            15245503,
            15246881,
            15242164,
            15249238,
            15422750,
            15249506,
            15244269,
            15243604,
            15243504,
            15247689,
            15243273,
            15245397,
            15244917,
            15256203,
            15256783,
            15256658,
            15262298
        ],
        "E": [
            15241790,
            15242394,
            15249657,
            15250007,
            15248042,
            15246416,
            15250940,
            15251751,
            15248476,
            15250193,
            15254285,
            15249151,
            15249613,
            15242059,
            15248491,
            15248349,
            15250365
        ],
        "B": [
            15240908,
            15246431,
            15240992,
            15240867,
            15249484,
            15247141,
            15245895,
            15241449,
            15250210,
            15247251,
            15242653,
            15240727,
            15240692,
            15240772,
            15241317,
            15251939,
            15241564,
            15244142,
            15246779
        ],
        "A": [
            15238675,
            15239335,
            15238139,
            15237976,
            15238447,
            15239307,
            15239985,
            15238131,
            15248916,
            15237777,
            15240179,
            15237788,
            15238124,
            15238812,
            15238095,
            15252529,
            15238764,
            15239416,
            15239104
        ]
    },
    "name": "E. Hexagons",
    "statement": "Ayrat is looking for the perfect code. He decided to start his search\r\nfrom an infinite field tiled by hexagons. For convenience the coordinate\r\nsystem is introduced, take a look at the picture to see how the\r\ncoordinates of hexagon are defined: Ayrat is searching through the\r\nfield. He started at point and is moving along the spiral (see second\r\npicture). Sometimes he forgets where he is now. Help Ayrat determine his\r\nlocation after moves.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i, a, b) for (int i = (a), _end_ = (b); i < _end_; ++i)\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mp make_pair\n#define x first\n#define y second\n#define pb push_back\n#define SZ(x) (int((x).size()))\n#define ALL(x) (x).begin(), (x).end()\n\ntemplate<typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }\n\ntypedef long long LL;\n\nconst int oo = 0x3f3f3f3f;\n\nconst int max0 = 1e9;\n\nint st[][2] = {{2, 0}, {1, 2}, {-1, 2}, {-2, 0}, {-1, -2}, {1, -2}, {2, 0}};\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tLL n;\n\tscanf(\"%I64d\", &n), ++n;\n\tLL l = 1, r = max0;\n\twhile (l < r)\n\t{\n\t\tLL mid = (l + r) >> 1;\n\t\tif (3 * mid * (mid + 1) + 1 <= n) l = mid + 1;\n\t\telse r = mid;\n\t}\n\tLL p = (n - 3 * l * (l - 1) - 1);\n\tif (!p) printf(\"%I64d 0\\n\", (l - 1) << 1);\n\telse\n\t{\n\t\tint lyc = p / l;\n\t\tint res = p % l;\n\t\tassert(lyc < 6);\n\t\tprintf(\"%I64d %I64d\\n\", l * st[lyc][0] + res * (st[lyc + 1][0] - st[lyc][0]), l * st[lyc][1] + res * (st[lyc + 1][1] - st[lyc][1]));\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation",
        "math"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Hexagons.json",
    "editorial_link": "https://codeforces.com//blog/entry/22658",
    "editorial": "Let\u00e2\u0080\u0099s see how the coordinates are changing while we move from current\r\ncell to one of the 6 adjacent cells let\u00e2\u0080\u0099s call this 6 typed of moves. If\r\nwe know the number of moves of each type on our way, then we know the\r\ncoordinates of the end of the way. We will divide the way into rings.\r\nLet\u00e2\u0080\u0099s count the number of moves of each type for the first ring. Next\r\nring will have one more move of each type. Length of each ring = length\r\nof previous + 6. It is an arithmetic progression. Using well-known\r\nformulas and binary search we calculate the number of the last ring and\r\noverall length of previous rings. Now we have to brute-force 6 types of\r\nthe last move and calculate the answer. code: 15260879\r\n"
}