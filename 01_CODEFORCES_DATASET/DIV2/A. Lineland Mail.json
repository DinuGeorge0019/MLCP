{
    "link": "https://codeforces.com//contest/567/problem/A",
    "problemId": "32460",
    "problem_idx": "A",
    "shortId": "567A",
    "contest_number": "567",
    "problem_submissions": {
        "E": [
            12368419,
            12374631,
            12397425,
            12788088,
            12389152,
            12406146
        ],
        "D": [
            12361936,
            12364905,
            12366026,
            12367144,
            12362999,
            12362187,
            12362197,
            12363830,
            12363930,
            12363691,
            12364368,
            12363078,
            12362951,
            12369923,
            12364411,
            12364518,
            12365344,
            12364031,
            12364332
        ],
        "C": [
            12358359,
            12361761,
            12364757,
            12364566,
            12375712,
            12357726,
            12357396,
            12357507,
            12355472,
            12358430,
            12360526,
            12359721,
            12359102,
            12360618,
            12360834,
            12358973,
            12358889,
            12361330
        ],
        "B": [
            12356896,
            12358133,
            12362101,
            12361060,
            12355833,
            12356064,
            12358845,
            12355641,
            12356983,
            12356330,
            12357412,
            12355553,
            12354653,
            12356634,
            12358468,
            12356890,
            12356104,
            12359549
        ],
        "A": [
            12353500,
            12353898,
            12359353,
            12355278,
            12353802,
            12353454,
            12354645,
            12353575,
            12353588,
            12353804,
            12354250,
            12353515,
            12353505,
            12353940,
            12356166,
            12354753,
            12353585,
            12355460
        ],
        "F": [
            12373751,
            12373972,
            12370851,
            12374943
        ]
    },
    "name": "A. Lineland Mail",
    "statement": "All cities of Lineland are located on the coordinate axis. Thus, each\r\ncity is associated with its position a coordinate on the axis. No two\r\ncities are located at a single point.Lineland residents love to send\r\nletters to each other. A person may send a letter only if the recipient\r\nlives in another city (because if they live in the same city, then it is\r\neasier to drop in).Strange but true, the cost of sending the letter is\r\nexactly equal to the distance between the sender\u2019s city and the\r\nrecipient\u2019s city.For each city calculate two values and , where is the\r\nminimum cost of sending a letter from the -th city to some other city,\r\nand is the the maximum cost of sending a letter from the -th city to\r\nsome other city\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <set>\n#include <map>\n#include <queue>\n#include <ctime>\n\n#define pb push_back\n#define ll long long\n#define mp make_pair\n#define f first\n#define s second\n#define pii pair < int, int >\n#define ull unsigned long long\n#define pll pair < ll, ll >\n#define forit(s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it ++)\n#define all(s) s.begin(), s.end()\n\nconst int inf = (1ll << 31) - 1;\nconst int maxn = (int) 1e5 + 10;\n\nusing namespace std;\n\nint n;\nint a[100100];\n\n\nint main () {\n    #ifdef LOCAL\n    freopen (\"a.in\", \"r\", stdin);\n    freopen (\"a.out\", \"w\", stdout);\n    #endif\n    cin >> n;\n    for(int i = 0 ; i < n; i++)\n        cin >> a[i];\n    for(int i = 0; i < n; i++){\n        int mini = inf;\n        if( i > 0) mini = min(mini, a[i] - a[i-1]);\n        if(i < n - 1) mini = min(mini, a[i + 1] - a[i]);\n        cout << mini << \" \"<< max(a[n-1] - a[i], a[i] - a[0]) << \"\\n\";\n    }   \n\n\n\n    #ifdef LOCAL\n    cerr << 1.0 * clock() / CLOCKS_PER_SEC << \" s.\\n\";\n    #endif\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Lineland Mail.json",
    "editorial_link": "https://codeforces.com//blog/entry/19604",
    "editorial": "One can notice that the maximum cost of sending a letter from \u00e2\u0080\u0099th city\r\nis equal to maximum of distances from \u00e2\u0080\u0099th city to first city and from\r\n\u00e2\u0080\u0099th city to last (). On the other hand, the minimum cost of sending a\r\nletter will be the minimum of distances between neighboring cities (\u00e2\u0080\u0099th\r\nand \u00e2\u0080\u0099th cities), more formally, . For each city, except the first and\r\nthe last this formula is correct, but for them formulas are () and ()\r\nrespectively. Author solution\r\n"
}