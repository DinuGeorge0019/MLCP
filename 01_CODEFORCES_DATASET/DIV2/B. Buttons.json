{"link": "https://codeforces.com//contest/268/problem/B", "problemId": "2559", "problem_idx": "B", "shortId": "268B", "contest_number": "268", "problem_submissions": {"E": [3029362, 3027005, 3026499, 3026194, 3026632, 3027097, 3026470, 3026693, 3027609, 3027536, 3027449, 3029652, 3027603, 3027497, 3027682, 3029387, 3028099, 3028892], "D": [3029086, 3037705, 3037697, 3037608, 3037604, 3037597, 3037586], "C": [3022125, 3024460, 3023115, 3022875, 3022947, 3022255, 3024092, 3024462, 3022033, 3022803, 3024394, 3025519, 3024680, 3023628, 3024663, 3025736, 3024616, 3023126], "B": [3021486, 3022962, 3021236, 3021634, 3022054, 3021375, 3022451, 3021884, 3023790, 3021388, 3022861, 3022930, 3022093, 3022237, 3022694, 3023334, 3021661, 3021427], "A": [3020792, 3021158, 3020508, 3020555, 3021108, 3020432, 3020678, 3021068, 3020421, 3020463, 3021924, 3020884, 3020808, 3020977, 3021030, 3020567, 3022196, 3022929]}, "name": "B. Buttons", "statement": "Manao is trying to open a rather challenging lock. The lock has buttons\r\non it and to open it, you should press the buttons in a certain order to\r\nopen the lock. When you push some button, it either stays pressed into\r\nthe lock (that means that you\u2019ve guessed correctly and pushed the button\r\nthat goes next in the sequence), or all pressed buttons return to the\r\ninitial position. When all buttons are pressed into the lock at once,\r\nthe lock opens.Consider an example with three buttons. Let\u2019s say that\r\nthe opening sequence is: {2, 3, 1}. If you first press buttons 1 or 3,\r\nthe buttons unpress immediately. If you first press button 2, it stays\r\npressed. If you press 1 after 2, all buttons unpress. If you press 3\r\nafter 2, buttons 3 and 2 stay pressed. As soon as you\u2019ve got two pressed\r\nbuttons, you only need to press button 1 to open the lock.Manao doesn\u2019t\r\nknow the opening sequence. But he is really smart and he is going to act\r\nin the optimal way. Calculate the number of times he\u2019s got to push a\r\nbutton in order to open the lock in the worst-case scenario.\r\n", "solutions": ["#include <vector> \n#include <list> \n#include <map> \n#include <set> \n#include <deque> \n#include <queue> \n#include <stack> \n#include <bitset> \n#include <algorithm> \n#include <functional> \n#include <numeric> \n#include <utility> \n#include <sstream> \n#include <iostream> \n#include <iomanip> \n#include <cstdio> \n#include <cmath> \n#include <cstdlib> \n#include <cctype> \n#include <string> \n#include <cstring> \n#include <ctime> \n\nusing namespace std;\n\n#define _int64 long long\n\nint main()\n{\n  int i,j,n,ans;\n  scanf(\"%d\",&n);\n  ans=0;\n  for (i=0;i<n;i++)\n  {\n    ans+=(n-1-i)*(i+1);\n    ans++;\n  }\n  printf(\"%d\\n\",ans);\n}\n"], "input": "", "output": "", "tags": ["implementation", "math"], "dificulty": "1000", "interactive": false}