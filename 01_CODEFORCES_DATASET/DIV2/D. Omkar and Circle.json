{
    "link": "https://codeforces.com//contest/1372/problem/D",
    "problemId": "665585",
    "problem_idx": "D",
    "shortId": "1372D",
    "contest_number": "1372",
    "problem_submissions": {
        "F": [
            86587331,
            86592445
        ],
        "D": [
            86567204,
            86579473,
            86577327,
            86535735,
            86539756,
            86541547,
            86541810,
            86544261,
            86545902,
            86544858,
            86551552,
            86549456,
            86551379,
            86554398,
            86555103,
            86559228,
            86553301
        ],
        "C": [
            86542450,
            86550447,
            86544146,
            86549498,
            86526578,
            86530081,
            86532018,
            86527267,
            86533550,
            86528779,
            86532078,
            86534770,
            86530142,
            86536030,
            86548674,
            86533586,
            86533762,
            86528487,
            86532205
        ],
        "B": [
            86530649,
            86544843,
            86528066,
            86586370,
            86518220,
            86520050,
            86527028,
            86521440,
            86521451,
            86520560,
            86523901,
            86522899,
            86522046,
            86527358,
            86530942,
            86526972,
            86524542,
            86517410,
            86521410
        ],
        "A": [
            86513990,
            86538518,
            86515960,
            86516941,
            86513491,
            86515289,
            86513521,
            86514849,
            86514076,
            86513724,
            86514041,
            86514826,
            86513853,
            86514635,
            86523362,
            86514036,
            86514079,
            86513422,
            86513617
        ],
        "E": [
            86584231,
            86531273,
            86583888,
            86618428,
            86570603
        ]
    },
    "name": "D. Omkar and Circle",
    "statement": "Danny, the local Math Maniac, is fascinated by circles, Omkar’s most\r\nrecent creation. Help him solve this circle problem!You are given n\r\nnonnegative integers a_1, a_2,\r\ndots, a_n arranged in a circle, where n must be odd (ie. n-1 is\r\ndivisible by 2). Formally, for all i such that 2\r\nleq i\r\nleq n, the elements a_{i - 1} and a_i are considered to be adjacent, and\r\na_n and a_1 are also considered to be adjacent. In one operation, you\r\npick a number on the circle, replace it with the sum of the two elements\r\nadjacent to it, and then delete the two adjacent elements from the\r\ncircle. This is repeated until only one number remains in the circle,\r\nwhich we call the circular value.Help Danny find the maximum possible\r\ncircular value after some sequences of operations.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned int ui;\ntypedef unsigned long long ull;\ntypedef pair<int ,int> pii;\ntypedef pair<ll, ll> pll;\ntypedef double rl;\n\ntypedef pii int2;\ntypedef tuple<int, int, int>           int3;\ntypedef tuple<int, int, int, int>      int4;\ntypedef tuple<int, int, int, int, int> int5;\n\ntypedef pll ll2;\ntypedef tuple<ll, ll, ll>         ll3;\ntypedef tuple<ll, ll, ll, ll>     ll4;\ntypedef tuple<ll, ll, ll, ll, ll> ll5;\n\n#define g0(x) get<0>(x)\n#define g1(x) get<1>(x)\n#define g2(x) get<2>(x)\n#define g3(x) get<3>(x)\n#define g4(x) get<4>(x)\n\ntypedef vector<int> vi;\ntypedef vector<pii> vii;\ntypedef vector<ll> vll;\ntypedef vector<pll> vll_ll;\ntypedef vector<vi> vvi;\ntypedef vector<vii> vvii;\ntypedef vector<vll> vvll;\ntypedef vector<vll_ll> vvll_ll;\n\n#define pb push_back\n#define mp make_pair\n#define eb emplace_back\n#define xx first\n#define yy second\n\n#define FOR(i,N) for(int i=0; i<N; i++)\n\n#define popc __builtin_popcountll\n// #define popc __builtin_popcount\n\ntemplate<typename A>\nstring to_string(A* ptr)\n{\n    stringstream ss; ss << \"0x\" << std::setw(16) << std::setfill ('0') << std::hex << (uint64_t)(uintptr_t)ptr;\n    return ss.str();\n}\n\nstring to_string(char c)\n{\n    return ((string)\"'\"+c)+ \"'\";\n}\n\ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p);\n\ntemplate <typename A, typename B, typename C>\nstring to_string(tuple<A, B, C> p);\n\ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p);\n\nstring to_string(const string& s) {\n  return '\"' + s + '\"';\n}\n\nstring to_string(const char* s) {\n  return to_string((string) s);\n}\n\nstring to_string(bool b) {\n  return (b ? \"true\" : \"false\");\n}\n\nstring to_string(vector<bool> v) {\n  bool first = true;\n  string res = \"{\";\n  for (int i = 0; i < static_cast<int>(v.size()); i++) {\n    if (!first) {\n      res += \", \";\n    }\n    first = false;\n    res += to_string(v[i]);\n  }\n  res += \"}\";\n  return res;\n}\n\ntemplate <size_t N>\nstring to_string(bitset<N> v) {\n  string res = \"\";\n  for (size_t i = 0; i < N; i++) {\n    res += static_cast<char>('0' + v[i]);\n  }\n  return res;\n}\n\ntemplate <typename A>\nstring to_string(A v) {\n  bool first = true;\n  string res = \"{\";\n  for (const auto &x : v) {\n    if (!first) {\n      res += \", \";\n    }\n    first = false;\n    res += to_string(x);\n  }\n  res += \"}\";\n  return res;\n}\n\ntemplate <typename A, typename B>\nstring to_string(pair<A, B> p) {\n  return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\";\n}\n\ntemplate <typename A, typename B, typename C>\nstring to_string(tuple<A, B, C> p) {\n  return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \")\";\n}\n\ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p) {\n  return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \", \" + to_string(get<3>(p)) + \")\";\n}\n\nvoid debug_out() { cerr << endl; }\n\ntemplate <typename Head, typename... Tail>\nvoid debug_out(Head H, Tail... T) {\n  cerr << \" \" << to_string(H);\n  debug_out(T...);\n}\n\n#if !ONLINE_JUDGE && 1\n#define dbg(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n#else\n#define dbg(...) 42\n#endif\n\nconst int MX=2e5+99;\nint n;\nint k;\nll a[MX];\n\nll& aa(int idx)\n{\n    idx%=n;\n    if(idx<0) idx+=n;\n    return a[idx];\n}\n\nll S[MX];\n\nll solve()\n{\n    if(n==1) return a[0];\n    k=(n-1)/2;\n\n    ll sumOdd=0, sumEven=0;\n    for(int i=0; i<n; i++)\n    {\n        if(i%2==0) sumEven+=a[i];\n        else sumOdd+=a[i];\n    }\n\n    S[0]=a[0];\n    S[1]=a[1];\n    for(int i=2; i<n; i++) S[i]=S[i-2]+a[i];\n\n    ll result=sumEven;\n    for(int i=0; i+1<n; i++)\n    {\n        ll left=S[i];\n        ll right=a[i+1] + ((i+1)%2==0 ? sumEven : sumOdd) - S[i+1];\n        result=max(result, left+right);\n    }\n\n    return result;\n}\n\nint main()\n{\n#if !ONLINE_JUDGE && 0\n    freopen(\"D.txt\", \"r\", stdin);\n    //freopen(\"output.txt\", \"w\", stdout);\n#endif\n#if 0\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr); cout.tie(nullptr);\n#endif\n\n    int TT;\n#if 0\n    cin >> TT;\n#else\n    TT=1;\n#endif\n    for(int ttt=0; ttt<TT; ttt++)\n    {\n        cin >> n;\n        for(int i=0; i<n; i++) cin >> a[i];\n        cout << solve();\n    }\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "games",
        "greedy"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Omkar and Circle.json",
    "editorial_link": "https://codeforces.com//blog/entry/79974",
    "editorial": "First note that any possible circular value consists of the sum of some\r\nelements. Now letâs think about how these values would look like in the\r\ncircle. Letâs consider any one move on index . will be replaced with the\r\nsum of and (wrap around to index or if needed). Then letâs consider\r\nmaking a move on , since it will be adjacent to after the first move.\r\nThen its value will become . This implies that alternating values play a\r\nrole in the construction of the values contained in the final circular\r\nvalue. Now letâs consider the final move when thereâs elements left in\r\nthe circle. This is the only move that takes the sum of two adjacent\r\nelements in the initial circle. With this observation, we can achieve\r\nour final construction as follows:Choose any elements in the initial\r\ncircle such that exactly one pair of chosen numbers are adjacent to each\r\nother. The answer will be the maximum of the circular value over all\r\npossible constructions.While there are ways involving complicated prefix\r\nsums/segment trees, the cleanest implementation is as follows: create an\r\narray whose values consists of . Append this new array to itself to\r\naccount for the circular structure. Now all you simply have to do is to\r\nfind the maximum sum over all subarrays of length . This can be done\r\nwith sliding window in time.\r\n",
    "hint": []
}