{"link": "https://codeforces.com//contest/443/problem/C", "problemId": "10508", "problem_idx": "C", "shortId": "443C", "contest_number": "443", "problem_submissions": {"D": [6920325, 6916566, 6917590, 6918097, 6920177, 6917285, 6920976, 6921353, 6922229, 6919679, 6920725, 6916330, 6920984, 6916768, 6918289], "C": [6916700, 6920227, 6920927, 6921420, 6918956, 6921762, 6918294, 6918027, 6919227, 6921621, 6920532, 6921893], "B": [6914810, 6917396, 6914725, 6915203, 6915357, 6915551, 6915724, 6915492, 6915913, 6916470, 6917359, 6917333, 6915305, 6915776, 6915944, 6915992], "A": [6913586, 6913341, 6913477, 6914120, 6913376, 6913571, 6913622, 6914280, 6913834, 6913392, 6914327, 6913573, 6919949, 6913342], "E": [6948171]}, "name": "C. Borya and Hanabi", "statement": "Have you ever played Hanabi? If not, then you\u2019ve got to try it out! This\r\nproblem deals with a simplified version of the game.Overall, the game\r\nhas 25 types of cards (5 distinct colors and 5 distinct values). Borya\r\nis holding cards. The game is somewhat complicated by the fact that\r\neverybody sees Borya\u2019s cards except for Borya himself. Borya knows which\r\ncards he has but he knows nothing about the order they lie in. Note that\r\nBorya can have multiple identical cards (and for each of the 25 types of\r\ncards he knows exactly how many cards of this type he has).The aim of\r\nthe other players is to achieve the state when Borya knows the color and\r\nnumber value of each of his cards. For that, other players can give him\r\nhints. The hints can be of two types: color hints and value hints. A\r\ncolor hint goes like that: a player names some color and points at all\r\nthe cards of this color. Similarly goes the value hint. A player names\r\nsome value and points at all the cards that contain the value.Determine\r\nwhat minimum number of hints the other players should make for Borya to\r\nbe certain about each card\u2019s color and value.\r\n", "solutions": ["using namespace std;\n\n#include \"cstdio\"\n#include \"iostream\"\n#include \"algorithm\"\n#include \"vector\"\n#include \"string\"\n#include \"cctype\"\n#include \"set\"\n\ntypedef long long Long;\n\nset< int > S;\nchar color[] = {'R', 'G', 'B', 'Y', 'W'};\n\nint getBit(char c) {\n    if ( isdigit( c ) ) return c - '1';\n    \n    int k = 0;\n\n    while (k < 5 && color[k] != c) k++;\n\n    return 5 + k;\n}\n\nint Count[ 1 << 10 ];\nbool test(int msk) {\n    for (int i = 0; i < 1024; i++) Count[ i ] = 0;\n\n    for ( typeof( S.begin() ) it = S.begin(); it != S.end(); it++) {\n        int ind = (*it) & msk;\n        Count[ ind ]++;\n\n        if ( Count[ ind ] > 1 ) return false;\n    }\n\n    return true;\n}\n\nint main() {\n    int n;\n    int mask = 0;\n\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        string card;\n        cin >> card;\n\n        int cc = 0;\n        cc |= 1 << getBit( card[ 0 ] );\n        cc |= 1 << getBit( card[ 1 ] );\n\n        S.insert( cc );\n\n        mask |= 1 << getBit( card[ 0 ] );\n        mask |= 1 << getBit( card[ 1 ] );\n    }\n\n    int ans = __builtin_popcount( mask );\n\n    for (int ss = 0; ss < mask; ss++) {\n        if ( test( ss ) ) ans = min( ans, __builtin_popcount( ss ) );\n    }\n\n    cout << ans << endl;\n\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["bitmasks", "brute force", "constructive algorithms", "implementation"], "dificulty": "1700", "interactive": false}