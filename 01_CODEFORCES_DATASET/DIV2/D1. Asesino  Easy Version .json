{
    "link": "https://codeforces.com//contest/2022/problem/D1",
    "problemId": "2947277",
    "problem_idx": "D1",
    "shortId": "2022D1",
    "contest_number": "2022",
    "problem_submissions": {
        "D1": [
            285726010,
            285732443,
            285720467,
            285721725,
            285710598,
            285716496,
            285709185,
            285722223,
            285721840,
            285726265,
            285729782,
            285729870,
            285772115,
            285771713,
            285716249,
            285713460,
            285712248,
            285718533,
            285715843
        ],
        "E2": [
            285719910,
            285720748,
            285735574,
            285735176,
            288055359,
            286524378,
            285733091,
            285771493,
            285770412,
            285770170,
            285769301
        ],
        "E1": [
            285717777,
            285720862,
            285735538,
            285732412,
            285730131,
            285734694,
            285730466,
            285740393,
            285736961,
            285737293,
            285738689,
            285733822,
            285723809
        ],
        "C": [
            285713470,
            285709435,
            285713964,
            285712717,
            285726534,
            285712313,
            285728850,
            285716262,
            285717872,
            285721376,
            285719625,
            285718527,
            285713136,
            285713916,
            285709969,
            285709168,
            285707306,
            285710892,
            285710354
        ],
        "B": [
            285703660,
            285702595,
            285706421,
            285702197,
            285705976,
            285703966,
            285719780,
            285706485,
            285711437,
            285705925,
            285707565,
            285707987,
            285708651,
            285708053,
            285702275,
            285704156,
            285708490,
            285702360,
            285704264
        ],
        "A": [
            285702679,
            285701420,
            285703196,
            285701332,
            285704286,
            285701973,
            285705578,
            285709500,
            285703987,
            285704902,
            285704417,
            285704940,
            285701496,
            285701330,
            285702274,
            285701454,
            285701489,
            285702531
        ],
        "D2": [
            286191597,
            285736183,
            290850953,
            285816124
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135095",
    "editorial": "There\u00e2\u0080\u0099s many solutions that work. Given that 69 is big\nenough, we can use the previous observation of asking in pairs and\nreducing the problem recursively.Combining hint 2 with our solutions for\nand , we can come up with the following algorithm: While , query and .\nIf their answers don\u00e2\u0080\u0099t match, one of them is the impostor. Query and .\nIf their answers don\u00e2\u0080\u0099t match, is the impostor. Otherwise, is the\nimpostor. If the answers match, do . If doesn\u00e2\u0080\u0099t hold and we haven\u00e2\u0080\u0099t\nfound the impostor, we either have the case or the case, and we can\nsolve either of them in queries. In the worst case, this algorithm uses\nqueries. I\u00e2\u0080\u0099m also aware of a solution with queries, queries, and one\nwith queries. We only present this solution to shorten the length of the\nblog but feel free to ask about the others in the comments.\n",
    "name": "D1. Asesino  Easy Version ",
    "statement": ".It is a tradition in Mexico\u2019s national IOI trainings to play the game\r\n\"\", which is similar to \"\" or \"\".Today, n players, numbered from 1 to n,\r\nwill play \"\" with the following three roles: : a Knight is someone who\r\nalways tells the truth. : a Knave is someone who always lies. : an\r\nImpostor is someone everybody thinks is a Knight, but is secretly a\r\nKnave. Each player will be assigned a role in the game. There will be\r\nImpostor but there can be any (possible zero) number of Knights and\r\nKnaves.As the game moderator, you have accidentally forgotten the roles\r\nof everyone, but you need to determine the player who is the Impostor.To\r\ndetermine the Impostor, you will ask some questions. In each question,\r\nyou will pick two players i and j (1\r\nleq i, j\r\nleq n; i\r\nneq j) and ask if player i thinks that player j is a Knight. The results\r\nof the question is shown in the table below.\r\nKnightKnaveImpostorKnightYesNoYesKnaveNoYesNoImpostorNoYes Find the\r\nImpostor in at most n + 69 questions. the roles of the players are not\r\nfixed in the beginning and may change depending on your questions.\r\nHowever, it is guaranteed that there exists an assignment of roles that\r\nis consistent with all previously asked questions under the constraints\r\nof this problem.\r\n",
    "solutions": [
        "#line 1 \"library/Template/template.hpp\"#include <bits/stdc++.h>using namespace std;\u00a0#define rep(i, a, b) for (int i = (int)(a); i < (int)(b); i++)#define rrep(i, a, b) for (int i = (int)(b)-1; i >= (int)(a); i--)#define ALL(v) (v).begin(), (v).end()#define UNIQUE(v) sort(ALL(v)), (v).erase(unique(ALL(v)), (v).end())#define SZ(v) (int)v.size()#define MIN(v) *min_element(ALL(v))#define MAX(v) *max_element(ALL(v))#define LB(v, x) int(lower_bound(ALL(v), (x)) - (v).begin())#define UB(v, x) int(upper_bound(ALL(v), (x)) - (v).begin())\u00a0using uint = unsigned int;using ll = long long int;using ull = unsigned long long;using i128 = __int128_t;using u128 = __uint128_t;const int inf = 0x3fffffff;const ll INF = 0x1fffffffffffffff;\u00a0template <typename T> inline bool chmax(T &a, T b) {    if (a < b) {        a = b;        return 1;    }    return 0;}template <typename T> inline bool chmin(T &a, T b) {    if (a > b) {        a = b;        return 1;    }    return 0;}template <typename T, typename U> T ceil(T x, U y) {    assert(y != 0);    if (y < 0)        x = -x, y = -y;    return (x > 0 ? (x + y - 1) / y : x / y);}template <typename T, typename U> T floor(T x, U y) {    assert(y != 0);    if (y < 0)        x = -x, y = -y;    return (x > 0 ? x / y : (x - y + 1) / y);}template <typename T> int popcnt(T x) {    return __builtin_popcountll(x);}template <typename T> int topbit(T x) {    return (x == 0 ? -1 : 63 - __builtin_clzll(x));}template <typename T> int lowbit(T x) {    return (x == 0 ? -1 : __builtin_ctzll(x));}\u00a0template <class T, class U>ostream &operator<<(ostream &os, const pair<T, U> &p) {    os << \"P(\" << p.first << \", \" << p.second << \")\";    return os;}template <typename T> ostream &operator<<(ostream &os, const vector<T> &vec) {    os << \"{\";    for (int i = 0; i < vec.size(); i++) {        os << vec[i] << (i + 1 == vec.size() ? \"\" : \", \");    }    os << \"}\";    return os;}template <typename T, typename U>ostream &operator<<(ostream &os, const map<T, U> &map_var) {    os << \"{\";    for (auto itr = map_var.begin(); itr != map_var.end(); itr++) {        os << \"(\" << itr->first << \", \" << itr->second << \")\";        itr++;        if (itr != map_var.end())            os << \", \";        itr--;    }    os << \"}\";    return os;}template <typename T> ostream &operator<<(ostream &os, const set<T> &set_var) {    os << \"{\";    for (auto itr = set_var.begin(); itr != set_var.end(); itr++) {        os << *itr;        ++itr;        if (itr != set_var.end())            os << \", \";        itr--;    }    os << \"}\";    return os;}#ifdef LOCAL#define show(...) _show(0, #__VA_ARGS__, __VA_ARGS__)#else#define show(...) true#endiftemplate <typename T> void _show(int i, T name) {    cerr << '\\n';}template <typename T1, typename T2, typename... T3>void _show(int i, const T1 &a, const T2 &b, const T3 &...c) {    for (; a[i] != ',' && a[i] != '\\0'; i++)        cerr << a[i];    cerr << \":\" << b << \" \";    _show(i + 1, a, c...);}#line 2 \"sol.cpp\"// #include \"Utility/fastio.hpp\"\u00a0bool ask(int i, int j) {    cout << \"? \" << i + 1 << ' ' << j + 1 << endl;    int res;    cin >> res;    assert(res != -1);    return res;}\u00a0void solve(int _rot) {    // write(\"Case #\"+to_string(_rot)+\": \");    int n;    cin >> n;\u00a0    int X = -1, Y = -1;    for (int i = 0; i + 1 < n; i += 2) {        if (ask(i, i + 1) != ask(i + 1, i)) {            X = i, Y = i + 1;            break;        }    }    if (X == -1) {        assert(n & 1);        cout << \"! \" << n << endl;        return;    }    rep(i, 0, n) if (i != X and i != Y) {        if (ask(i, X) != ask(X, i)) {            cout << \"! \" << X + 1 << endl;        } else {            cout << \"! \" << Y + 1 << endl;        }        return;    }}\u00a0int main() {    int t;    cin >> t;    rep(rot, 0, t) solve(rot + 1);    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "constructive algorithms",
        "implementation",
        "interactive"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D1. Asesino  Easy Version .json"
}