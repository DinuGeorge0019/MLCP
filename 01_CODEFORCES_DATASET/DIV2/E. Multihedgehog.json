{"link": "https://codeforces.com//contest/1068/problem/E", "problemId": "242825", "problem_idx": "E", "shortId": "1068E", "contest_number": "1068", "problem_submissions": {"C": [44804609, 44787225, 44783973, 44791722, 44788969, 44795395, 44788534, 44796839, 44794223, 44802675, 44793149, 44791347, 44791718, 44799632, 45919927, 44995670, 44792807, 44787914, 45131859, 45131819, 44809435, 44799658], "E": [44798389, 44796278, 44796319, 44792474, 44806152, 44807222, 44805314, 44809246, 44805901, 44806685, 44806349, 44805897, 44809417, 44803952, 44807694, 44809008, 44809472, 44805216, 44807724], "D": [44791215, 44806495, 44806429, 44801917, 44799230, 44796871, 44798866, 44798712, 44802512, 44801974, 44797087, 44801487, 44802268, 44817888, 44808939, 44797764, 44805243, 44807172, 44799620, 44790945], "B": [44783822, 44782929, 44781389, 44784465, 44783047, 44783627, 44784192, 44786901, 44784629, 44784410, 44789258, 44784311, 44783736, 44784363, 44781413, 44782490, 44787464, 44794535], "A": [44781781, 44781589, 44813303, 44781338, 44782084, 44782565, 44782183, 44785669, 44781504, 44803190, 44787315, 44781691, 44781558, 44782973, 44787832, 44781454, 44783541, 44813482], "F": [44823303, 44827702, 44826052]}, "name": "E. Multihedgehog", "statement": "Someone give a strange birthday present to Ivan. It is hedgehog\r\nconnected undirected graph in which one vertex has degree at least 3 (we\r\nwill call it center) and all other vertices has degree 1. Ivan thought\r\nthat hedgehog is too boring and decided to make himself\r\nk-multihedgehog.Let us define k-multihedgehog as follows:\r\n1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and\r\nsome vertices of degree 1. For all k\r\nge 2, k-multihedgehog is (k-1)-multihedgehog in which the following\r\nchanges has been made for each vertex v with degree 1: let u be its only\r\nneighbor; remove vertex v, create a new hedgehog with center at vertex w\r\nand connect vertices u and w with an edge. New hedgehogs can differ from\r\neach other and the initial gift. Thereby k-multihedgehog is a tree. Ivan\r\nmade k-multihedgehog but he is not sure that he did not make any\r\nmistakes. That is why he asked you to check if his tree is indeed\r\nk-multihedgehog.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 100005;\n\nint n, k;\nvector<int> g[N];\nint from[N], lev[N];\nvector<int> path;\n\nvoid dfs(int u,int p) {\n\tfor (int v : g[u]) if (v != p) {\n\t\tlev[v] = lev[u] + 1;\n\t\tfrom[v] = u;\n\t\tdfs(v, u);\n\t}\n}\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin >> n >> k;\n\tfor (int i = 1; i <= n - 1; ++i) {\n\t\tint u, v; cin >> u >> v;\n\t\tg[u].push_back(v);\n\t\tg[v].push_back(u);\n\t}\n\tdfs(1, -1);\n\tint root = 0;\n\tfor (int i = 1; i <= n; ++i) if (lev[i] > lev[root]) {\n\t\troot = i;\n\t}\n\tlev[root] = 0; dfs(root, -1);\n\tint target = 0;\n\tfor (int i = 1; i <= n; ++i) if (lev[i] > lev[target]) {\n\t\ttarget = i;\n\t} \n\twhile (target != root) {\n\t\tpath.push_back(target);\n\t\ttarget = from[target];\n\t}\n\tpath.push_back(root);\n\tif ((int)path.size() != k + k + 1) return cout << \"No\" << '\\n',0;\n\troot = path[k];\n\tlev[root] = 0; dfs(root, -1);\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (lev[i] == k) continue;\n\t\tint nchild = (int)g[i].size() - 1 + (root == i);\n\t\tif (nchild < 3) return cout << \"No\" << '\\n',0;\n\t} \n\tcout << \"Yes\" << '\\n';\n}"], "input": "", "output": "", "tags": ["graphs", "shortest paths", "trees"], "dificulty": "1800", "interactive": false}