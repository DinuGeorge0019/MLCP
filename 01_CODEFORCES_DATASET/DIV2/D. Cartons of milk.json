{
    "link": "https://codeforces.com//contest/767/problem/D",
    "problemId": "94683",
    "problem_idx": "D",
    "shortId": "767D",
    "contest_number": "767",
    "problem_submissions": {
        "E": [
            24773688,
            24758593,
            24766542,
            24771366,
            24781051,
            24771141,
            24779799,
            24793086,
            24815876,
            24813453,
            24777026
        ],
        "D": [
            24763626,
            24761005,
            24762891,
            24764024,
            24762582,
            24766354,
            24757953,
            24768943,
            24767743,
            24772654,
            24771704,
            24762285,
            24776438,
            24769130,
            24767445,
            24768099,
            24766844,
            24758983,
            24768020,
            24763075,
            24760035
        ],
        "C": [
            24761320,
            24765332,
            24760448,
            24761283,
            24759373,
            24763235,
            24759987,
            24766222,
            24769355,
            24767653,
            24765828,
            24761673,
            24774191,
            24769625,
            24760821,
            24762590,
            24762307,
            24759906,
            24765569
        ],
        "B": [
            24759162,
            24783957,
            24766261,
            24758310,
            24773199,
            24761589,
            24765216,
            24759680,
            24761807,
            24765169,
            24760359,
            24760779,
            24771356,
            24771320,
            24788532
        ],
        "A": [
            24756659,
            24769945,
            24755736,
            24756082,
            24755178,
            24755290,
            24755126,
            24755429,
            24755320,
            24755950,
            24755426,
            24755130,
            24770401,
            24755414,
            24755517,
            24761778,
            24755322,
            24757132,
            24755145,
            24761825
        ]
    },
    "name": "D. Cartons of milk",
    "statement": "Olya likes milk very much. She drinks cartons of milk each day if she\r\nhas at least and drinks all of them if she doesn\u2019t. But there\u2019s an issue\r\nexpiration dates. Each carton has a date after which you can\u2019t drink it\r\n(you still can drink it exactly at the date written on the carton). Due\r\nto this, if Olya\u2019s fridge contains a carton past its expiry date, she\r\nthrows it away.Olya hates throwing out cartons, so when she drinks a\r\ncarton, she chooses the one which expires the fastest. It\u2019s easy to\r\nunderstand that this strategy minimizes the amount of cartons thrown out\r\nand lets her avoid it if it\u2019s even possible. The main issue Olya has is\r\nthe one of buying new cartons. Currently, there are cartons of milk in\r\nOlya\u2019s fridge, for each one an expiration date is known (how soon does\r\nit expire, measured in days). In the shop that Olya visited there are\r\ncartons, and the expiration date is known for each of those cartons as\r\nwell.Find the maximum number of cartons Olya can buy so that she\r\nwouldn\u2019t have to throw away any cartons. Assume that Olya drank no\r\ncartons today.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define ran 1111111\nint n,m,k;\nint a[ran];\npair<int,int> b[ran];\nint c[ran * 2],lc;\nbool ok(int x){\n\tlc = 0;\n\tfor(int i = 0, j = m - x; i < n || j < m; ){\n\t\tif(i<n && (j==m || a[i] < b[j].first)){\n\t\t\tc[lc++] = a[i];\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tc[lc++] = b[j].first;\n\t\t\tj++;\n\t\t}\n\t}\n\tfor(int i = 0, j = 0; i < lc; i += k, j++){\n\t\tfor(int i2 = i; i2 < lc && i2 < i+k; i2++)\n\t\t\tif(c[i2] < j)\n\t\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=0; i<n; i++)\n\t\tscanf(\"%d\",&a[i]);\n\tsort(a,a+n);\n\tfor(int i=0; i<m; i++){\n\t\tscanf(\"%d\",&b[i].first);\n\t\tb[i].second = i+1;\n\t}\n\tsort(b,b+m);\n//\tfor(int i=0; i<m; i++)\n//\t\tprintf(\"%d \",b[i].second);\n//\tputs(\"\");\n\tint lo = -1, hi = m;\n\twhile(lo!=hi){\n\t\tint mi = (lo + hi + 1)/2;\n\t\tif(ok(mi))\n\t\t\tlo = mi;\n\t\telse\n\t\t\thi = mi-1;\n\t}\n\tif(lo == -1)puts(\"-1\");else{\n\t\tprintf(\"%d\\n\",lo);\n\t\tfor(int i=0; i<lo; i++){\n\t\t\tprintf(\"%d%c\",b[m-1-i].second,i<lo-1?' ':'\\n');\n\t\t}\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "greedy",
        "sortings",
        "two pointers"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Cartons of milk.json",
    "editorial_link": "https://codeforces.com//blog/entry/50498",
    "editorial": "Let be the maximum expiry date in the input.The key observation in this\r\nproblem is the fact that if we can buy some cartons from the shop and\r\nnot have to throw away the cartons, we can buy cartons with the biggest\r\nexpiry dates and we won\u00e2\u0080\u0099t have to throw away any cartons either. It\r\nhappens because if we increase the carton\u00e2\u0080\u0099s expiry date while having\r\nfixed distribution of cartons per days, the distribution would stay\r\ncorrect.Then, let\u00e2\u0080\u0099s learn to check for an arbitrary is it true that if\r\nwe take cartons with the maximum expiry dates we can distribute those\r\ncartons per days so that we won\u00e2\u0080\u0099t have to throw cartons away. To do\r\nthis, it is sufficient to check for each day from to that the amount of\r\ncartons with expiry dates (both from a fridge and bought) is no bigger\r\nthan . Then the solution would be to search for maximum using the binary\r\nsearch. If is the answer, the check would pass for all from to and\r\nwouldn\u00e2\u0080\u0099t for , this monotony is sufficient for the binary search to\r\nwork. Then we output the found and the cartons with maximum expiry dates\r\n(we don\u00e2\u0080\u0099t even have to sort , we can justdo an enumeration sort because\r\n). This soluton runs in time.\r\n"
}