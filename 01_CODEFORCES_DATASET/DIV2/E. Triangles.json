{
    "link": "https://codeforces.com//contest/230/problem/E",
    "problemId": "1889",
    "problem_idx": "E",
    "shortId": "230E",
    "contest_number": "230",
    "problem_submissions": {
        "E": [
            2281369,
            2283553,
            2285030,
            2285047,
            2275013,
            2277312,
            2281959,
            2280926,
            2282812,
            2282942,
            2289756,
            2303849,
            2284350,
            2284110
        ],
        "D": [
            2279019,
            2282259,
            2281806,
            2284336,
            2468189,
            2293544,
            2293533,
            2293531,
            2292779,
            2280034,
            2280797,
            2282637,
            2281762,
            2282078,
            2282947
        ],
        "C": [
            2276837,
            2279164,
            2278509,
            2280041,
            2280782,
            2279772,
            2278719,
            2276895,
            2277991,
            2280210,
            2277389,
            2280622,
            2278662,
            2279358,
            2278439,
            2277863,
            2279847,
            2279222
        ],
        "B": [
            2275270,
            2276827,
            2276000,
            2275039,
            2278453,
            2275508,
            2275984,
            2274908,
            2281260,
            2276330,
            2275784,
            2276800,
            2275571,
            2275505,
            2276144,
            2275193,
            2276949,
            2275915
        ],
        "A": [
            2273678,
            2274800,
            2273664,
            2274083,
            2276565,
            2273916,
            2274258,
            2273731,
            2273800,
            2274208,
            2273713,
            2274806,
            2273983,
            2273830,
            2274358,
            2274055,
            2274259,
            2273895
        ]
    },
    "name": "E. Triangles",
    "statement": "Alice and Bob don\u2019t play games anymore. Now they study properties of all\r\nsorts of graphs together. Alice invented the following task: she takes a\r\ncomplete undirected graph with vertices, chooses some edges and keeps\r\nthem. Bob gets the remaining edges.Alice and Bob are fond of \"triangles\"\r\nin graphs, that is, cycles of length 3. That\u2019s why they wonder: what\r\ntotal number of triangles is there in the two graphs formed by Alice and\r\nBob\u2019s edges, correspondingly?\r\n",
    "solutions": [
        "#include <cstdio>\n\nconst int MXN = 1000010;\n\nint da[MXN], db[MXN];\n\nint main(){\n\n    int n, m;\n    scanf(\"%d %d\" ,&n ,&m);\n\n    for(int i = 1; i <= n; i++) db[i] = n - 1;\n\n    while(m--){\n\n        int a, b;\n        scanf(\"%d %d\" ,&a ,&b);\n        da[a]++, da[b]++;\n        db[a]--, db[b]--;\n\n    }\n\n    long long ans = -(long long)n * (n - 1) * (n - 2) / 6;\n    for(int i = 1; i <= n; i++){\n        ans += (long long)da[i] * (da[i] - 1) / 2;\n        ans += (long long)db[i] * (db[i] - 1) / 2;\n    }\n\n    printf(\"%I64d\\n\" ,ans / 2);\n\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "graphs",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Triangles.json",
    "editorial_link": "https://codeforces.com//blog/entry/5437",
    "editorial": "Let's call Alice's edges simply edges, and Bob's edges the antiedges. For each edge pair of the initial complete graph that pass through the same vertices, assign a weight: for each pair of edges the weight +2, for each pair of edge and antiedge ?1 and for each pair of antiedges +2. Now calculate the sum of all the weights. Observe that each Alice's or Bob's triangle adds exactly +6 to the sum, and each combination of three vertices that do not form the triangle in any of the two graphs adds exactly 0 to the sum. The sum itself is calculated by iterating over all vertices and adding the total weight of all the edge pairs that pass through this vertex. If the degree of the vertex is d, then we should add  d(d?-?1)?-?d(n?-?d?-?1)?+?(n?-?d?-?1)(n?-?d?-?2) to the final sum. Since each triangle adds +6 to the sum, then the answer is equal to the sum divided by 6."
}