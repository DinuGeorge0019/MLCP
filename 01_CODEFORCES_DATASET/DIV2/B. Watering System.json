{
    "link": "https://codeforces.com//contest/967/problem/B",
    "problemId": "179482",
    "problem_idx": "B",
    "shortId": "967B",
    "contest_number": "967",
    "problem_submissions": {
        "F": [
            37724740,
            37785350
        ],
        "D": [
            37715859,
            37718485,
            37714997,
            37714910,
            37721057,
            37715196,
            37718252,
            37721060,
            37725740,
            37722409,
            37721493,
            37718542,
            37720902,
            37723570,
            37717977,
            37722095,
            37718943,
            37720444,
            37720943,
            37717804
        ],
        "C": [
            37713201,
            37714275,
            37715739,
            37715714,
            37735586,
            37715171,
            37716355,
            37717661,
            37717233,
            37716160,
            37725218,
            37716853,
            37715198,
            37728018,
            37717261,
            37727878,
            37722084,
            37716869,
            37714314
        ],
        "B": [
            37710580,
            37710295,
            37709555,
            37710161,
            37717401,
            37713108,
            37711288,
            37712382,
            37711143,
            37713098,
            37711452,
            37711212,
            37711591,
            37710867,
            37709639,
            37712905,
            37712898,
            37710688,
            37712013,
            37710071
        ],
        "A": [
            37709201,
            37709088,
            37708901,
            37710764,
            37709412,
            37710987,
            37735764,
            37709724,
            37709576,
            37710227,
            37709634,
            37709699,
            37709830,
            37709320,
            37917335,
            37710605,
            37727121,
            37709146,
            37708986
        ],
        "E": [
            37722960,
            37719908,
            37746295,
            37728001,
            37723621,
            37714048,
            37723133,
            37726145,
            37721957,
            37725590,
            37727533,
            37724467,
            37727640,
            37727967,
            37722685,
            37746402,
            37724717,
            37727899,
            37780807
        ]
    },
    "name": "B. Watering System",
    "statement": "Arkady wants to water his only flower. Unfortunately, he has a very poor\r\nwatering system that was designed for n flowers and so it looks like a\r\npipe with n holes. Arkady can only use the water that flows from the\r\nfirst hole.Arkady can block some of the holes, and then pour A liters of\r\nwater into the pipe. After that, the water will flow out from the\r\nnon-blocked holes proportionally to their sizes s_1, s_2,\r\nldots, s_n. In other words, if the sum of sizes of non-blocked holes is\r\nS, and the i-th hole is not blocked,\r\nfrac{s_i\r\ncdot A}{S} liters of water will flow out of it.What is the minimum\r\nnumber of holes Arkady should block to make at least B liters of water\r\nflow out of the first hole?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nint n,u,v,a[120000];\n\nint main(){\n\tscanf(\"%d%d%d\",&n,&u,&v);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",a+i);\n\tsort(a+2,a+n+1);\n\tlong long sum=a[1];\n\tfor(int i=2;i<=n;i++){\n\t\tsum+=a[i];\n\t\tif(sum*v>(long long)a[1]*u){\n\t\t\tprintf(\"%d\\n\",n-i+1);return 0;\n\t\t}\n\t}\n\tputs(\"0\");\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "sortings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Watering System.json",
    "editorial_link": "https://codeforces.com//blog/entry/59173",
    "editorial": "It\u00e2\u0080\u0099s obvious that we should block several largest holes. Let\u00e2\u0080\u0099s first\r\nsort them. After that, let\u00e2\u0080\u0099s iterate through the number of blocked\r\nholes, maintaining the sum of sizes of non-blocked holes . With the\r\nvalue it is easy to compute if the flow from the first hole is large\r\nenough or not. Just output the number of blocked pipes at the first\r\nmoment when the flow is large enough. The complexity is .\r\n"
}