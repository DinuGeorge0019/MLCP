{"link": "https://codeforces.com//contest/43/problem/E", "problemId": "237", "problem_idx": "E", "shortId": "43E", "contest_number": "43", "problem_submissions": {"E": [204317, 203248, 205791, 203440, 204491, 203255, 203285, 204569], "D": [203414, 203389, 202746, 203128, 205117, 206004, 203089, 203486, 203882, 203224, 203555], "C": [201375, 201638, 201982, 201685, 201620, 201614, 201651, 201740, 201970, 202162, 202501, 202461, 202160], "B": [201164, 201219, 201274, 201224, 201377, 201223, 201446, 201422, 201870, 202173, 202210], "A": [200779, 200849, 200855, 200871, 200780, 205116, 205993, 200960, 200899, 201559, 201421, 201154]}, "name": "E. Race", "statement": "Today kilometer long auto race takes place in Berland. The track is\r\nrepresented by a straight line as long as kilometers. There are cars\r\ntaking part in the race, all of them start simultaneously at the very\r\nbeginning of the track. For every car is known its behavior the system\r\nof segments on each of which the speed of the car is constant. The -th\r\nsegment of the -th car is pair , where is the car\u2019s speed on the whole\r\nsegment in kilometers per hour and is for how many hours the car had\r\nbeen driving at that speed. The segments are given in the order in which\r\nthey are \"being driven on\" by the cars.Your task is to find out how many\r\ntimes during the race some car managed to have a lead over another car.\r\nA lead is considered a situation when one car appears in front of\r\nanother car. It is known, that all the leads happen instantly, i. e.\r\nthere are no such time segment of positive length, during which some two\r\ncars drive \"together\". At one moment of time on one and the same point\r\nseveral leads may appear. In this case all of them should be taken\r\nindividually. Meetings of cars at the start and finish are not\r\nconsidered to be counted as leads.\r\n", "solutions": ["#include <iostream>\n#include <sstream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cctype>\n#include <string>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\nusing namespace std; \n\n#define DEBUG(x) cout << '>' << #x << ':' << x << endl;\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n#define FOR2(i, a, b) for (int i = (a); i > (b); --i)\ninline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }\n\nconst int INF = 1<<29;\ntypedef long long ll;\n\ninline int two(int n) { return 1 << n; }\ninline int test(int n, int b) { return n & two(b); }\ninline void set_bit(int & n, int b) { n |= two(b); }\ninline void unset_bit(int & n, int b) { n &= ~two(b); }\ninline int last_bit(int n) { return n & (-n); }\ninline int ones(int n) { int res = 0; while(n && ++res) n-=n&(-n); return res; }\n\ntemplate<class T> void chmax(T & a, const T & b) { a = max(a, b); }\ntemplate<class T> void chmin(T & a, const T & b) { a = min(a, b); }\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst int MAX = 100;\nint N, S;\nvector<pair<int, int> > input[MAX]; //speed time\n\nint go(int car1, int car2)\n{\n        int res = 0, state = 0, ind1 = 0, ind2 = 0, d1 = 0, d2 = 0, s1 = input[car1][0].first, s2 = input[car2][0].first;\n\n        int last = 0;\n        while (ind1 < input[car1].size() && ind2 < input[car2].size())\n        {\n                int tim = min(input[car1][ind1].second, input[car2][ind2].second);\n\n                d1 += s1 * (tim-last);\n                d2 += s2 * (tim-last);\n\n                if (input[car1][ind1].second == tim) \n                {\n                        ++ind1;\n                        if (ind1 < input[car1].size()) s1 = input[car1][ind1].first;\n                }\n                if (input[car2][ind2].second == tim) \n                {\n                        ++ind2;\n                        if (ind2 < input[car2].size()) s2 = input[car2][ind2].first;\n                }\n                \n                if (d1 > d2)\n                {\n                        if (state == 1) ++res;\n                        state = -1;\n                }\n                else if (d1 < d2)\n                {\n                        if (state == -1) ++res;\n                        state = 1;\n                }\n                last = tim;\n        }\n        return res;\n}\n\nint main()\n{\n        cin >> N >> S;\n\n        FOR(i, 0, N)\n        {\n                int K, d = 0;\n                cin >> K;\n                FOR(j, 0, K)\n                {\n                        int speed, tim;\n                        cin >> speed >> tim;\n                        d += tim;\n                        input[i].push_back(make_pair(speed, d));\n                }\n        }\n\n        int res = 0;\n\n        FOR(i, 0, N)\n                FOR(j, i+1, N)\n                        res += go(i, j);\n        cout << res << endl;\n\n        return 0;\n}"], "input": "", "output": "", "tags": ["brute force", "implementation", "two pointers"], "dificulty": "2300", "interactive": false}