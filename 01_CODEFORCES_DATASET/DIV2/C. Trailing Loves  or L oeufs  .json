{
    "link": "https://codeforces.com//contest/1114/problem/C",
    "problemId": "295525",
    "problem_idx": "C",
    "shortId": "1114C",
    "contest_number": "1114",
    "problem_submissions": {
        "E": [
            49723158,
            49715728,
            49717586,
            49715673,
            49722801,
            49716158,
            49718191,
            49719573,
            49752574,
            49752490,
            49731134,
            49732179,
            49723266,
            49731088,
            49731791,
            49709398,
            49709699,
            49747930,
            49752856,
            49752305,
            49752243,
            49751661,
            49717020,
            49711667,
            49716380
        ],
        "D": [
            49715413,
            49709860,
            49711770,
            49711237,
            49709601,
            49710358,
            49712973,
            49713792,
            49713441,
            49727466,
            49728830,
            49707199,
            49710354,
            49729290,
            49706402,
            49726434,
            49712605,
            49711462,
            49713489,
            49710031
        ],
        "F": [
            49712180,
            49727873,
            49729579,
            49729533,
            49726481,
            49727101,
            49727851,
            49731205,
            49722332,
            49708876,
            49721497,
            49732987,
            49730916,
            49722816,
            49711859,
            49722110,
            49737560,
            49795547
        ],
        "B": [
            49703429,
            49701684,
            49702412,
            49706794,
            49704297,
            49702841,
            49708341,
            49704456,
            49705411,
            49718896,
            49701034,
            49703871,
            49704671,
            49716920,
            49700530,
            49704223,
            49704334,
            49707941,
            49702883,
            49701403
        ],
        "C": [
            49701343,
            49703467,
            49706082,
            49704226,
            49698909,
            49708135,
            49709609,
            49709215,
            49708563,
            49712949,
            49704721,
            49705449,
            49707404,
            49724763,
            49703776,
            49705794,
            49710442,
            49704405,
            49704935,
            49704203
        ],
        "A": [
            49696863,
            49696786,
            49698271,
            49697340,
            49701634,
            49697080,
            49706366,
            49697215,
            49702348,
            49720550,
            49696844,
            49696791,
            49698691,
            49696775,
            49697211,
            49696953,
            49699702,
            49696860,
            49697429,
            49697130
        ]
    },
    "name": "C. Trailing Loves  or L oeufs  ",
    "statement": "The number \"zero\" is called \"love\" (or \"lâ€™oeuf\" to be precise, literally\r\nmeans \"egg\" in French), for example when denoting the zero score in a\r\ngame of tennis. Aki is fond of numbers, especially those with trailing\r\nzeros. For example, the number 9200 has two trailing zeros. Aki thinks\r\nthe more trailing zero digits a number has, the prettier it is.However,\r\nAki believes, that the number of trailing zeros of a number is not\r\nstatic, but depends on the base (radix) it is represented in. Thus, he\r\nconsiders a few scenarios with some numbers and bases. And now, since\r\nthe numbers he used become quite bizarre, he asks you to help him to\r\ncalculate the beauty of these numbers.Given two integers n and b (in\r\ndecimal notation), your task is to calculate the number of trailing zero\r\ndigits in the b-ary (in the base/radix of b) representation of n\r\n,! (factorial of n).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nusing ll = long long;\n\nconst int MAXN = 1000500;\nconst int MOD = 1000000007;\n\nvoid bad() {\n  cout << \"No\" << endl;\n  exit(0);\n}\n\nint main() {\n  ios_base::sync_with_stdio(false);\n\n  long long n;\n  long long b;\n  cin >> n >> b;\n\n  vector<pair<ll, int>> f;\n  for (ll x = 2; x * x  <= b; ++x) {\n    if (b % x == 0) {\n      f.emplace_back(x, 0);\n      while(b % x == 0) {\n        f.back().second++;\n        b /= x;\n      }\n    }\n  }\n  if (b > 1) {\n    f.emplace_back(b, 1);\n  }\n\n  long long ans = numeric_limits<ll>::max();\n  for (auto x : f) {\n    ll m = n;\n    long long res = 0;\n    while (m > 0) {\n      m /= x.first;\n      res += m;\n    }\n    ans = min(ans, res / x.second);\n  }\n  cout << ans << endl;\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math",
        "number theory"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Trailing Loves  or L oeufs  .json",
    "editorial_link": "https://codeforces.com/blog/entry/65136",
    "editorial": "TutorialThe problem can be reduced to the following: finding the maximum\r\nthat is divisible by .By prime factorization, we will have the\r\nfollowing: .In a similar manner, we will also have: (with being coprime\r\nto any presented above).The process of finding , , , , , , , can be done\r\nby normal prime factorization of the value .The process of finding , , ,\r\nis a little bit more tricky since the integer they were originated () is\r\ntoo huge to be factorized manually. Still the factorial properties gave\r\nus another approach: for each , we can do the following: Initially,\r\ndenote . Repeatedly do the following: add to , then divide by . The loop\r\nends when is zero. After all, we can obtain the final value as of\r\nfollowing: .Total complexity: (as the number of prime factors of an\r\ninteger will not surpass ).\r\n",
    "hint": []
}