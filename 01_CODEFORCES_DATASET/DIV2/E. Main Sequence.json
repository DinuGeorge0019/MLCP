{"link": "https://codeforces.com//contest/287/problem/E", "problemId": "2764", "problem_idx": "E", "shortId": "287E", "contest_number": "287", "problem_submissions": {"B": [3389740, 3385851, 3390594, 3393152, 3386756, 3385467, 3386512, 3387058, 3386629, 3386855, 3386267, 3394348, 3386542, 3386317, 3386774, 3385430, 3386303, 3386690, 3386374], "E": [3388987, 3391965, 3389122, 3391520, 3389487, 3391136, 3390533, 3391898, 3391078, 3389973], "D": [3386764, 3390723, 3391406, 3390184, 3391781, 3540938, 3390136], "C": [3385718, 3386355, 3387824, 3386709, 3387896, 3386437, 3388881, 3388689, 3388362, 3389262, 3387586, 3387592, 3387606, 3387372, 3387548, 3388515, 3387560, 3388169, 3388584, 3387782], "A": [3384457, 3384792, 3384549, 3384653, 3387027, 3384478, 3385172, 3384678, 3384599, 3384586, 3384505, 3384624, 3384741, 3384474, 3384523, 3384546, 3384479, 3385128]}, "name": "E. Main Sequence", "statement": "As you know, Vova has recently become a new shaman in the city of Ultima\r\nThule. So, he has received the shaman knowledge about the correct\r\nbracket sequences. The shamans of Ultima Thule have been using lots of\r\ndifferent types of brackets since prehistoric times. A bracket type is a\r\npositive integer. The shamans define a correct bracket sequence as\r\nfollows: An empty sequence is a correct bracket sequence. If and are\r\ncorrect bracket sequences, then sequence (their concatenation) also is a\r\ncorrect bracket sequence. If is a correct bracket sequence, then\r\nsequence also is a correct bracket sequence, where is an integer. For\r\nexample, sequences and are correct bracket sequences, and is\r\nnot.Moreover, after Vova became a shaman, he learned the correct bracket\r\nsequence , consisting of integers. As sequence is the most important,\r\nVova decided to encrypt it just in case.Encrypting consists of two\r\nsequences. The first sequence contains types of brackets, that is, ().\r\nThe second sequence contains integers (possibly, not all of them), which\r\nhad negative numbers in sequence .Unfortunately, Vova forgot the main\r\nsequence. But he was lucky enough to keep the encryption: sequences and\r\n. Help Vova restore sequence by the encryption. If there are multiple\r\nsequences that correspond to the encryption, restore any of them. If\r\nthere are no such sequences, you should tell so.\r\n", "solutions": ["#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define clr(a) memset(a,0,sizeof(a))\nint n,v[1010000],neg[1010000],s[1010000],top,t,x;\nint main() {\n    scanf(\"%d\",&n);\n    rep(i,1,n+1) scanf(\"%d\",&v[i]);\n    scanf(\"%d\",&t);\n    rep(i,0,t) scanf(\"%d\",&x),neg[x]=1;\n    top=0;\n    for (int i=n;i>=1;i--) {\n        if (top>0&&!neg[i]&&v[i]==v[s[top]]) {\n            v[s[top]]*=-1;\n            --top;\n        } else s[++top]=i;\n    }\n    if (top!=0) puts(\"NO\");\n    else {\n        puts(\"YES\");\n        rep(i,1,n+1) printf(\"%d \",v[i]); \n    }\n}"], "input": "", "output": "", "tags": ["data structures", "greedy"], "dificulty": "2100", "interactive": false}