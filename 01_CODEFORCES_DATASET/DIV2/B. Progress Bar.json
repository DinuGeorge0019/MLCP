{"link": "https://codeforces.com//contest/71/problem/B", "problemId": "381", "problem_idx": "B", "shortId": "71B", "contest_number": "71", "problem_submissions": {"E": [364940, 364561, 364869, 367554, 364877, 365341, 366959], "D": [364121, 370659, 364672, 364797, 364478, 365171, 365496, 365374, 365026], "C": [362958, 363113, 363174, 362960, 363170, 363249, 363364, 363672, 362819, 363791, 363858, 363105, 363379, 363017, 363030, 364051], "B": [362471, 362684, 362612, 362536, 362613, 362856, 362438, 362761, 362270, 362469, 362902, 365732, 362795, 362402, 362273, 362966], "A": [362169, 361901, 361819, 361870, 361938, 362121, 362009, 362162, 361786, 362024, 361769, 361943, 362014, 361863, 361998, 362420]}, "name": "B. Progress Bar", "statement": "A progress bar is an element of graphical interface that displays the\r\nprogress of a process for this very moment before it is completed. Let\u2019s\r\ntake a look at the following form of such a bar.A bar is represented as\r\nsquares, located in line. To add clarity, let\u2019s number them with\r\npositive integers from to from the left to the right. Each square has\r\nsaturation ( for the -th square), which is measured by an integer from\r\nto . When the bar for some () is displayed, squares has the saturation ,\r\nsquares has the saturation , and the saturation of the square can have\r\nany value from to .So some first squares of the progress bar always have\r\nthe saturation . Some last squares always have the saturation . And\r\nthere is no more than one square that has the saturation different from\r\nand .The degree of the process\u2019s completion is measured in percents. Let\r\nthe process be\r\n", "solutions": ["#include <iostream>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\n\nint out[110];\n\nmain(){\n\tint n, k, t, i;\n\t\n\tscanf ( \"%d %d %d\", &n, &k, &t );\n\tt = t * n * k;\n\tmemset ( out, 0, sizeof ( out ) );\n\tfor ( i = 0; i <= n * k; i ++ )\n\t\tif ( i * 100 <= t && t < i * 100 + 100 )\n\t\t\tbreak;\n\t\telse\n\t\t\tout[ i / k ] ++;\n\tfor ( i = 0; i < n; i ++ )\n\t\tprintf( \"%d \", out[i] );\n\tprintf( \"\\n\" );\n\t\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["implementation", "math"], "dificulty": "1300", "interactive": false}