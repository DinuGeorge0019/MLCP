{
    "link": "https://codeforces.com//contest/1775/problem/A1",
    "problemId": "1730872",
    "problem_idx": "A1",
    "shortId": "1775A1",
    "contest_number": "1775",
    "problem_submissions": {
        "F": [
            188713433,
            188725196,
            188731396,
            188734657,
            188732056,
            188733441,
            188727879,
            188728779,
            188732238,
            188744590,
            188740643,
            188819082,
            188726758,
            188730587,
            188740657,
            188744867,
            188749677,
            188736230,
            188750878,
            188747224,
            188750488
        ],
        "E": [
            188705052,
            188711810,
            188702314,
            188703997,
            188719714,
            188707610,
            188716487,
            188718865,
            188714441,
            188704775,
            188725287,
            188819074,
            188708013,
            188721335,
            188719084,
            188719253,
            188714969,
            188726615,
            188723431,
            188727896,
            188725883
        ],
        "D": [
            188702613,
            188703020,
            188697830,
            188697522,
            188707471,
            188696985,
            188707674,
            188710332,
            188711385,
            188724357,
            188713699,
            188819118,
            188819061,
            188695392,
            188715707,
            188723783,
            188712755,
            188710335,
            188700501,
            188714975,
            188711803,
            188710270
        ],
        "C": [
            188694431,
            188698020,
            188689331,
            188692115,
            188699073,
            188721317,
            188698207,
            188703599,
            188700577,
            188691524,
            188697369,
            188818955,
            188729950,
            188704268,
            188712641,
            188705362,
            188703234,
            188716581,
            188706582,
            188705592,
            188701989
        ],
        "B": [
            188689294,
            188694420,
            188688425,
            188705924,
            188692481,
            188693569,
            188693704,
            188692884,
            188692641,
            188690496,
            188689877,
            188818945,
            188737766,
            188698596,
            188704549,
            188701478,
            188699101,
            188697811,
            188699643,
            188700904,
            188695734
        ],
        "A2": [
            188688478,
            188690842,
            188692472,
            188689269,
            188688789,
            188704546,
            188691442,
            188689540,
            188689829,
            188692114,
            188699776,
            188818970,
            188727805,
            188692265,
            188700238,
            188696195,
            188689432,
            188688599,
            188695159,
            188698301,
            188690756
        ],
        "A1": [
            188688462,
            188690964,
            188692352,
            188689360,
            188688853,
            188699704,
            188691533,
            188689633,
            188689929,
            188688691,
            188699645,
            188818981,
            188689698,
            188692382,
            188700463,
            188696403,
            188689492,
            188688657,
            188694924,
            188695874,
            188690864
        ]
    },
    "name": "A1. Gardener and the Capybaras  easy version ",
    "statement": "Kazimir Kazimirovich is a Martian gardener. He has a huge orchard of\r\nbinary balanced apple trees.Recently Casimir decided to get himself\r\nthree capybaras. The gardener even came up with their names and wrote\r\nthem down on a piece of paper. The name of each capybara is a non-empty\r\nline consisting of letters \"\" and \"\".Denote the names of the capybaras\r\nby the lines a, b, and c. Then Casimir wrote the nonempty lines a, b,\r\nand c in a row without spaces. For example, if the capybara\u2019s name was\r\n\"\", \"\", and \"\", then the string the gardener wrote down would look like\r\n\"\".The gardener remembered an interesting property: either the string b\r\nis lexicographically not smaller than the strings a and c at the same\r\ntime, or the string b is lexicographically not greater than the strings\r\na and c at the same time. In other words, either a\r\nle b and c\r\nle b are satisfied, or b\r\nle a and b\r\nle c are satisfied (or possibly both conditions simultaneously). Here\r\nle denotes the lexicographic \"less than or equal to\" for strings. Thus,\r\na\r\nle b means that the strings must either be equal, or the string a must\r\nstand earlier in the dictionary than the string b. For a more detailed\r\nexplanation of this operation, see \"Notes\" section.Today the gardener\r\nlooked at his notes and realized that he cannot recover the names\r\nbecause they are written without spaces. He is no longer sure if he can\r\nrecover the original strings a, b, and c, so he wants to find any\r\ntriplet of names that satisfy the above property.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n#define ll long long\n#define ii pair<int,int>\n#define iii tuple<int,int,int>\n#define fi first\n#define se second\n#define endl '\\n'\n#define debug(x) cout << #x << \": \" << x << endl\n\n#define pub push_back\n#define pob pop_back\n#define puf push_front\n#define pof pop_front\n#define lb lower_bound\n#define ub upper_bound\n\n#define rep(x,start,end) for(int x=(start)-((start)>(end));x!=(end)-((start)>(end));((start)<(end)?x++:x--))\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n\nmt19937 rng(chrono::system_clock::now().time_since_epoch().count());\n\nsigned main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcout.tie(0);\n\tcin.exceptions(ios::badbit | ios::failbit);\n\t\n\tint TC;\n\tcin>>TC;\n\twhile (TC--){\n\t\tstring s; cin>>s;\n\t\t\n\t\tbool done=false;\n\t\trep(x,1,sz(s)-1) if (s[x]=='a'){\n\t\t\tcout<<s.substr(0,x)<<\" a \"<<s.substr(x+1,sz(s)-x-1)<<endl;\n\t\t\tdone=true;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (!done) cout<<s[0]<<\" \"<<s.substr(1,sz(s)-2)<<\" \"<<s[sz(s)-1]<<endl;\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A1. Gardener and the Capybaras  easy version .json",
    "editorial_link": "https://codeforces.com//blog/entry/111286",
    "editorial": "To solve this problem, it was enough just to consider all options of\r\nsplitting the string into three substrings, and there are only ways to\r\ndo it.\r\n"
}