{"link": "https://codeforces.com//contest/1262/problem/C", "problemId": "479739", "problem_idx": "C", "shortId": "1262C", "contest_number": "1262", "problem_submissions": {"F1": [65643346, 65653823, 65643705, 65644730, 65690605, 65651588, 65651277, 66034817, 65646761, 65654524, 65651505, 65653937, 65645081, 65645973, 65647100, 65654475, 65687063, 65647622, 65647339, 65645959], "F2": [65643279, 65653692, 65828965, 65686253, 65649254, 65653062, 65651757, 71816951, 71815917, 71815485, 71815448, 71815068, 71814941, 71814802, 65654320, 65687047, 65652597, 65652697, 65651173], "E": [65639530, 65645042, 65648892, 65652057, 65690596, 65647275, 65647634, 65653097, 65651461, 65648284, 65647900, 97249054, 97246746, 65648360, 65650087, 65951237, 65651779], "D1": [65634593, 65638676, 65638313, 65637479, 65640274, 65640849, 65636529, 65639533, 65642238, 65648533, 65640691, 65638549, 65642536, 65639709, 65635698, 65639724, 65643528, 65642432, 65642224, 65638684], "D2": [65634523, 65638577, 65638418, 65637413, 65640211, 65640949, 65642851, 65639443, 65642574, 65642451, 65640796, 65638763, 65642667, 65639589, 65635638, 65639633, 65643328, 65643512, 65642176, 65638616], "C": [65629762, 65634294, 65634237, 65633719, 65632321, 65635540, 65633375, 65635292, 65633541, 65633864, 65634698, 65633061, 65637189, 65634072, 65640938, 65633298, 65638202, 65638218, 65637587, 65633967], "B": [65627254, 65629631, 65628216, 65627679, 65628556, 65630807, 65628279, 65630765, 65628901, 65628780, 65629802, 65628147, 65626929, 65628945, 65629119, 65627530, 65632823, 65631394, 65633894, 65629398], "A": [65626237, 65626820, 65626466, 65626311, 65627028, 65627733, 65626343, 65627142, 65629675, 65626752, 65627572, 65626402, 65628146, 65626239, 65626787, 65626257, 65626896, 65628642, 65626213, 65626672]}, "name": "C. Messy", "statement": "You are fed up with your messy room, so you decided to clean it up.Your\r\nroom is a bracket sequence s=s_{1}s_{2}\r\ndots s_{n} of length n. Each character of this string is either an\r\nopening bracket \u201d or a closing bracket \u201d.In one operation you can choose\r\nany consecutive substring of s and reverse it. In other words, you can\r\nchoose any substring s[l\r\ndots r]=s_l, s_{l+1},\r\ndots, s_r and change the order of elements in it into s_r, s_{r-1},\r\ndots, s_{l}.For example, if you will decide to reverse substring s[2\r\ndots 4] of string s=\"\" it will be equal to s=\"\".A (aka balanced) bracket\r\nsequence is a bracket sequence that can be transformed into a correct\r\narithmetic expression by inserting characters \u201d and \u201d between the\r\noriginal characters of the sequence. For example, bracket sequences \"\",\r\n\"\" are regular (the resulting expressions are: \"\", \"\"), and \"\" and \"\"\r\nare not.A prefix of a string s is a substring that starts at position 1.\r\nFor example, for s=\"\" there are 6 prefixes: \"\", \"\", \"\", \"\", \"\" and \"\".In\r\nyour opinion, a neat and clean room s is a bracket sequence that: the\r\nwhole string s is a bracket sequence; there are exactly k prefixes of\r\nthis sequence which are regular (including whole s itself). For example,\r\nif k = 2, then \"\" is a neat and clean room.You want to use at most n\r\noperations to make your room neat and clean. Operations are applied one\r\nafter another sequentially.It is guaranteed that the answer exists. Note\r\nthat you to minimize the number of operations: find any way to achieve\r\nthe desired configuration in n or less operations.\r\n", "solutions": ["//#pragma comment(linker, \"/stack:200000000\")\n//#pragma GCC optimize(\"Ofast\")\n//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//#pragma GCC optimize(\"unroll-loops\")\n \n#include <iostream>\n#include <stdlib.h>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <unordered_set>\n#include <random>\n#include <assert.h>\n#include <memory.h>\n#include <time.h>\n#include <bitset>\n \n#define uint unsigned int\n#define ll long long\n#define ull unsigned long long\n#define ld long double\n#define rep(i, l, r) for (int i = (l); i < (r); i++)\n#define repb(i, r, l) for (int i = (r); i > (l); i--)\n#define sz(a) (int)a.size()\n#define fi first\n#define se second\n#define mp(a, b) make_pair(a, b)\n#define rank qwertyuio\n#define next dfghjk\n#define plus fsghsf\n#define minus ytryr\n \nusing namespace std;\n \ninline bool setmin(int &x, int y) { return (y < x) ? x = y, 1 : 0; }\ninline bool setmax(int &x, int y) { return (y > x) ? x = y, 1 : 0; }\ninline bool setmin(ll &x, ll y) { return (y < x) ? x = y, 1 : 0; }\ninline bool setmax(ll &x, ll y) { return (y > x) ? x = y, 1 : 0; }\n \nconst int N = 100000;\nconst int inf = (int)1e9 + 1;\nconst ll big = (ll)1e18 + 1;\nconst int P = 239;\nconst int P1 = 31;\nconst int P2 = 57;\nconst int MOD = (int)1e9 + 7;\nconst int MOD1 = (int)1e9 + 9;\nconst int MOD2 = 998244353;\nconst ld eps = 1e-12;\nconst double pi = atan2(0, -1);\nconst int ABC = 26;\n\nvoid reverse_sub(string &s, int l, int r) {\n    rep(i, 0, (r - l + 1) / 2) {\n        swap(s[l + i], s[r - i]);\n    }\n}\n\nint main()\n{\n    //freopen(\"a.in\", \"r\", stdin);\n    //freopen(\"a.out\", \"w\", stdout);\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.precision(20);\n    //ll TL = 10.95 * CLOCKS_PER_SEC;\n    //clock_t time = clock();\n    int T;\n    cin >> T;\n    while (T--) {\n        int n, k;\n        cin >> n >> k; k--;\n        string s;\n        cin >> s;\n        string t;\n        rep(i, 0, k) {\n            t += \"()\";\n        }\n        rep(i, 0, (n - 2 * k) / 2) {\n            t += \"(\";\n        }\n        rep(i, 0, (n - 2 * k) / 2) {\n            t += \")\";\n        }\n        cout << n << \"\\n\";\n        rep(i, 0, n) {\n            int p = i;\n            while (s[p] != t[i]) {\n                p++;\n            }\n            cout << i + 1 << \" \" << p + 1 << \"\\n\";\n            reverse_sub(s, i, p);\n        }\n    }\n    return 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "implementation"], "dificulty": "1700", "interactive": false}