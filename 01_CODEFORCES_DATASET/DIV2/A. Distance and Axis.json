{
    "link": "https://codeforces.com//contest/1401/problem/A",
    "problemId": "704913",
    "problem_idx": "A",
    "shortId": "1401A",
    "contest_number": "1401",
    "problem_submissions": {
        "E": [
            90589999,
            90578154,
            90605920,
            90584030,
            90594969,
            90593911,
            90572580,
            90599304,
            90615088,
            90675249,
            90605781,
            90590132,
            90599391,
            90594214,
            90758857,
            90645951,
            90601216
        ],
        "F": [
            90580393,
            90597215,
            90579684,
            90610107,
            90603479,
            90603116,
            90603512,
            90617786,
            90601646,
            90675259,
            90613571,
            90583132,
            90589402,
            90594866,
            90604055,
            90620941,
            90598510,
            90646625
        ],
        "D": [
            90560258,
            90565538,
            90550432,
            90567225,
            90569423,
            90571869,
            90587693,
            90567049,
            90578884,
            90577112,
            90563897,
            90566957,
            90557267,
            90573179,
            90565326,
            90564972,
            90565503,
            90568268,
            90571582
        ],
        "C": [
            90551509,
            90552981,
            90554787,
            90547352,
            90555070,
            90559549,
            90607672,
            90556632,
            90562455,
            90568524,
            90549734,
            90553714,
            90548534,
            90548686,
            90550222,
            90543917,
            90550988,
            90557805,
            90555836
        ],
        "B": [
            90546499,
            90547295,
            90558760,
            90542536,
            90550631,
            90551851,
            90549294,
            90545681,
            90553940,
            90549432,
            90563346,
            90548659,
            90544907,
            90558972,
            90545692,
            90550414,
            90545438,
            90550179,
            90547970
        ],
        "A": [
            90541721,
            90542770,
            90541219,
            90541087,
            90544810,
            90561361,
            90543645,
            90541402,
            90544925,
            90541955,
            90542350,
            90543732,
            90541094,
            90542063,
            90541725,
            90541822,
            90542174,
            90542376,
            90542708
        ]
    },
    "name": "A. Distance and Axis",
    "statement": "We have a point A with coordinate x = n on OX-axis. We\u2019d like to find an\r\nB (also on OX-axis), such that the between the distance from O to B and\r\nthe distance from A to B is equal to k. Since sometimes it\u2019s impossible\r\nto find such point B, we can, in one step, increase or decrease the\r\ncoordinate of A by 1. What is the minimum number of steps we should do\r\nto make such point B exist?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n\ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\n\ntypedef vector<int> vi;\ntypedef vector<ld> vd;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\ntypedef vector<pl> vpl;\n\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n\nint main() {\n\tios::sync_with_stdio(0); cin.tie(0);\n\n\tint t;\n\tcin >> t;\n\twhile(t--) {\n\t\tint n, k;\n\t\tcin >> n >> k;\n\t\tcout << max(k-n, k&1^n&1) << \"\\n\";\n\t}\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Distance and Axis.json",
    "editorial_link": "https://codeforces.com//blog/entry/81700",
    "editorial": "If is less than , we have to move to coordinate , and set the coordinate\r\nof as or . So the answer is .If is not less than , let\u00e2\u0080\u0099s define the\r\ncoordinate of as (). By the condition in the problem, the difference\r\nbetween () and () should be equal to . That is, is , and summarizing the\r\nformula, . Because the coordinate of is integer, if the parity of and is\r\nsame the answer is , otherwise the answer is (If we increase the\r\ncoordinate of by , m becomes integer).Time complexity :\r\n"
}