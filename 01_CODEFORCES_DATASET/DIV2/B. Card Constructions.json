{
    "link": "https://codeforces.com//contest/1345/problem/B",
    "problemId": "600708",
    "problem_idx": "B",
    "shortId": "1345B",
    "contest_number": "1345",
    "problem_submissions": {
        "E": [
            79194179,
            79196032,
            79220297,
            79200684,
            79201329,
            79219340,
            79391989,
            79268362,
            79267373,
            79247234,
            79230319,
            79193699
        ],
        "D": [
            79182685,
            79185329,
            79189475,
            79188511,
            79179864,
            79171870,
            79173915,
            79165263,
            79173257,
            79175980,
            79176898,
            79242598,
            79180486,
            79183462,
            79179438,
            79180644,
            79181066,
            79182336
        ],
        "C": [
            79166678,
            79171676,
            79174223,
            79183005,
            79155393,
            79157900,
            79170332,
            79162910,
            79161162,
            79163028,
            79162951,
            79164149,
            79160726,
            79164483,
            79165533,
            79167519,
            79166191
        ],
        "B": [
            79161444,
            79162895,
            79158056,
            79159769,
            79152511,
            79154234,
            79151562,
            79156943,
            79155510,
            79156024,
            79158727,
            79152661,
            79151997,
            79158730,
            79160284,
            79158238,
            79157754
        ],
        "A": [
            79149423,
            79162373,
            79160953,
            79149853,
            79149101,
            79148773,
            79149875,
            79150362,
            79149364,
            79149646,
            79148884,
            79148772,
            79158375,
            79151373,
            79149772,
            79149372
        ],
        "F": [
            79200676,
            79276017
        ]
    },
    "name": "B. Card Constructions",
    "statement": "A card pyramid of height 1 is constructed by resting two cards against\r\neach other. For h>1, a card pyramid of height h is constructed by\r\nplacing a card pyramid of height h-1 onto a base. A base consists of h\r\npyramids of height 1, and h-1 cards on top. For example, card pyramids\r\nof heights 1, 2, and 3 look as follows: You start with n cards and build\r\nthe tallest pyramid that you can. If there are some cards remaining, you\r\nbuild the tallest pyramid possible with the remaining cards. You repeat\r\nthis process until it is impossible to build another pyramid. In the\r\nend, how many pyramids will you have constructed?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define int long long\n\nint trinum(int n) {\n  return n * (3 * n + 1) / 2;\n}\n\nsigned main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n\n  int t;\n  cin >> t;\n\n  for (int j = 0; j < t; j++) {\n    int n;\n    cin >> n;\n    int cnt = 0;\n\n    for (int i = 30000; i > 0; i--) {\n      int x = trinum(i);\n      while (x <= n) {\n        cnt++;\n        n-=x;\n      }\n    }\n    cout << cnt << \"\\n\";\n  }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "dp",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Card Constructions.json",
    "editorial_link": "https://codeforces.com//blog/entry/76819",
    "editorial": "Let\u00e2\u0080\u0099s count the number of cards in a pyramid of height . There are cards\r\nstanding up, and there are horizontal cards. So, there are cards total.\r\nUsing this formula, we can quickly find the largest height that uses at\r\nmost cards.The quadratic formula or binary search can be used here, but\r\nare unnecessary. Simply iterating through all values works in time per\r\ntest.It\u00e2\u0080\u0099s enough to see that this takes time overall, where is the sum\r\nof across all test cases. But interestingly, we can argue for a tighter\r\nbound of due to the Cauchy-Schwarz Inequality:\r\n"
}