{
    "link": "https://codeforces.com//contest/370/problem/B",
    "problemId": "4144",
    "problem_idx": "B",
    "shortId": "370B",
    "contest_number": "370",
    "problem_submissions": {
        "C": [
            5370412,
            5368730,
            5371522,
            5371990,
            5370195,
            5370131,
            5371258,
            5371358,
            5372807,
            5379034,
            5368672
        ],
        "D": [
            5369264,
            5370401,
            5370565,
            5371357,
            5372982,
            5372779,
            5373131,
            5372520,
            5372523,
            5370570,
            5370366,
            5371915,
            5371128,
            5372843,
            5372383,
            5373802
        ],
        "B": [
            5367928,
            5367560,
            5367818,
            5367866,
            5367916,
            5368321,
            5372838,
            5370234,
            5369841,
            5368420,
            5367832,
            5368440,
            5368950,
            5372070,
            5368698,
            5369739,
            5367644
        ],
        "A": [
            5367394,
            5369807,
            5367525,
            5367450,
            5367389,
            5367654,
            5369021,
            5369042,
            5374280,
            5368909,
            5367810,
            5367376,
            5367612,
            5368269,
            5373074,
            5367757,
            5368835,
            5367393
        ],
        "E": [
            5372646,
            5370095
        ]
    },
    "name": "B. Berland Bingo",
    "statement": "Lately, a national version of a bingo game has become very popular in\r\nBerland. There are players playing the game, each player has a card with\r\nnumbers. The numbers on each card are distinct, but distinct cards can\r\nhave equal numbers. The card of the -th player contains numbers.During\r\nthe game the host takes numbered balls one by one from a bag. He reads\r\nthe number aloud in a high and clear voice and then puts the ball away.\r\nAll participants cross out the number if it occurs on their cards. The\r\nperson who crosses out all numbers from his card first, wins. If\r\nmultiple people cross out all numbers from their cards at the same time,\r\nthere are no winners in the game. At the beginning of the game the bag\r\ncontains 100 balls numbered 1 through 100, the numbers of all balls are\r\ndistinct.You are given the cards for each player. Write a program that\r\ndetermines whether a player can win the game at the most favorable for\r\nhim scenario or not.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <ctime>\n#include <vector>\n#include <map>\n#include <set>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\nconst ld eps = 1e-12;\nconst int inf = 1e9;\n#define pb push_back\n#define pob pop_back\n#define i1 first\n#define i2 second\n#define mp make_pair\n\n#define file \"\"\n#define N 100500\n\nint use[120];\n\nint m[120][120];\nint ml[120];    \nbool ans[120];\n       \nint main()\n{\n\n    int n;\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++)\n    {\n        scanf(\"%d\", &ml[i]);\n        for (int j = 0; j < ml[i]; j++)\n            scanf(\"%d\", &m[i][j]);\n        sort(m[i], m[i] + ml[i]);\n    }\n\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j <= 100; j++) use[j] = 0;\n        for (int j = 0; j < ml[i]; j++) use[m[i][j]] = 1;\n        ans[i] = 1;\n        for (int j = 0; j < n; j++)\n            if (i != j)\n            {\n                bool f = 1;\n                for (int k = 0; k < ml[j] && f; k++)\n                    if (!use[m[j][k]])\n                    {\n                        f = 0;\n                        break;\n                    }\n                if (f)\n                {\n                    ans[i] = 0;\n                    break;\n                }\n            }\n    }\n    for (int i = 0; i < n; i++)\n        if (ans[i] == 1) printf(\"YES\\n\");\n        else printf(\"NO\\n\");\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Berland Bingo.json",
    "editorial_link": "https://codeforces.com//blog/entry/9866",
    "editorial": "It is good idea to think about cards as set of numbers. It is easy to\r\nsee that card can t be finished before if is subset of . So all you need\r\nis to find such cards (sets) which do not have other card (other set) as\r\nsubset. Since there are at most 1000 cards, you may iterate through all\r\npairs and check that one card contains other in naive way like:\r\n",
    "hint": []
}