{"link": "https://codeforces.com//contest/1634/problem/E", "problemId": "1285097", "problem_idx": "E", "shortId": "1634E", "contest_number": "1634", "problem_submissions": {"D": [145448060, 145421218, 145416745, 145423344, 145443205, 145427784, 145443409, 145431341, 145433882, 145423790, 145432676, 145425041, 145425515, 145428134, 145433736, 145425560, 145429012, 145409353, 145450134], "F": [145433416, 145453477, 145451269, 145460505, 145460962, 145457398, 145463150, 146209818, 145424500, 146353080, 145461554], "E": [145417696, 145430773, 145437025, 145445326, 145418577, 145442374, 145429197, 145419121, 145409285, 145435196, 145437792, 145441628, 145453390, 145439700, 145444612, 145443262, 145449756, 145425032], "C": [145412708, 145407591, 145405856, 145408804, 145405037, 145408252, 145414142, 145411742, 145412561, 145404073, 145409362, 145407564, 145408646, 145418751, 145411128, 145416814, 145410703, 145419625, 145409764], "B": [145407070, 145396453, 145401718, 145400856, 145397249, 145398450, 145410765, 145408191, 145401469, 145397310, 145403868, 145398596, 145400216, 145410152, 145399502, 145397772, 145402171, 145398736, 145404461], "A": [145397151, 145395090, 145396464, 145396099, 145395149, 145395150, 145396024, 145395848, 145396137, 145395189, 159142248, 145403722, 145395766, 145395501, 145399119, 145395603, 145395368, 145397257, 145397479]}, "name": "E. Fair Share", "statement": "Even a cat has things it can do that AI cannot. Fei-Fei LiYou are given\r\nm arrays of positive integers. Each array is of even length.You need to\r\nsplit all these integers into two multisets L and R, that is, each\r\nelement of each array should go into one of two multisets (but not\r\nboth). Additionally, for each of the m arrays, of its elements should go\r\ninto L, and the rest should go into R.Give an example of such a division\r\nor determine that no such division exists.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\nint m,n,dg[100003],cnt;\nvector<int>v[100003],g[100003],h[100003],val[100003],V[100003],G[100003],rev[100003];\nstring ans[100003];\nvoid dfs(int x,int ed,bool ok){\n\tif(x==ed&&!ok)return;\n\tfor(int i=0;i<g[x].size();i++)\n\t\tif(h[x][i]==1){\n//\t\t\tcout<<x<<' '<<g[x][i]<<' '<<V[x][i]-1<<' '<<G[x][i]-1<<endl;\n\t\t\tdg[x]--;\n\t\t\th[x][i]--;\n\t\t\tdg[g[x][i]]--;\n\t\t\th[g[x][i]][rev[x][i]]--;\n\t\t\tans[x][V[x][i]-1]='L';\n\t\t\tans[g[x][i]][G[x][i]-1]='R';\n\t\t\tdfs(g[x][i],ed,0);\n\t\t\treturn;\n\t\t}\n}\nint main(){\n\tcin>>m;\n\tmap<int,int>MP,idx;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>n;cnt+=n;\n\t\tmap<int,int>mp;\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tint x;\n\t\t\tcin>>x;\n\t\t\tans[i]+=' ';\n\t\t\tif(mp[x]){\n\t\t\t\tans[i][mp[x]-1]='L';\n\t\t\t\tans[i][j-1]='R';\n\t\t\t\tmp[x]=0;\n\t\t\t\tcnt-=2;\n\t\t\t}else\n\t\t\t\tmp[x]=j;\n\t\t\tv[i].push_back(x);\n\t\t}\n\t\tsort(v[i].begin(),v[i].end());\n\t\tv[i].erase(unique(v[i].begin(),v[i].end()),v[i].end());\n\t\tfor(int j=0;j<v[i].size();j++)\n\t\t\tif(mp[v[i][j]])\n\t\t\t\tif(MP[v[i][j]]){\n\t\t\t\t\trev[i].push_back(dg[MP[v[i][j]]]);\n\t\t\t\t\trev[MP[v[i][j]]].push_back(dg[i]);\n\t\t\t\t\tdg[i]++;\n\t\t\t\t\tdg[MP[v[i][j]]]++; \n\t\t\t\t\tg[i].push_back(MP[v[i][j]]);\n\t\t\t\t\tg[MP[v[i][j]]].push_back(i);\n\t\t\t\t\th[i].push_back(1);\n\t\t\t\t\th[MP[v[i][j]]].push_back(1);\n\t\t\t\t\tV[i].push_back(mp[v[i][j]]);\n\t\t\t\t\tG[i].push_back(idx[v[i][j]]);\n\t\t\t\t\tG[MP[v[i][j]]].push_back(mp[v[i][j]]);\n\t\t\t\t\tV[MP[v[i][j]]].push_back(idx[v[i][j]]);\n\t\t\t\t\tcnt-=2;\n\t\t\t\t\tMP[v[i][j]]=0;\n\t\t\t\t}else{\n\t\t\t\t\tMP[v[i][j]]=i;\n\t\t\t\t\tidx[v[i][j]]=mp[v[i][j]];\n\t\t\t\t}\n\t}\n\tif(cnt){cout<<\"NO\\n\";return 0;}\n\tcout<<\"YES\\n\";\n\tfor(int i=1;i<=m;i++)\n\t\twhile(dg[i])\n\t\t\tdfs(i,i,1);\n\tfor(int i=1;i<=m;i++)\n\t\tcout<<ans[i]<<endl;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "data structures", "dfs and similar", "graph matchings", "graphs"], "dificulty": "2400", "interactive": false}