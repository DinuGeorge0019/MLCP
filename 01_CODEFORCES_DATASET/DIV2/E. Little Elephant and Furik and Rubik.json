{
    "link": "https://codeforces.com//contest/205/problem/E",
    "problemId": "1541",
    "problem_idx": "E",
    "shortId": "205E",
    "contest_number": "205",
    "problem_submissions": {
        "E": [
            1890290,
            1890857,
            1888830,
            1895841,
            1896230,
            1893117
        ],
        "D": [
            1888418,
            1888966,
            1886041,
            1887661,
            1887038,
            1887138,
            1886812,
            1886982,
            1886173,
            1887895,
            1887426,
            1886086,
            1887791,
            1886400,
            1887899,
            1887890,
            1887554
        ],
        "C": [
            1887403,
            10219680,
            1888200,
            1887469,
            1885487,
            1886378,
            1886198,
            1886444,
            1886262,
            1885308,
            1888612,
            1886427,
            1886322,
            1888156,
            1886987,
            1888828,
            1887054,
            1886548,
            1889741
        ],
        "B": [
            1885347,
            1885224,
            1883868,
            1884083,
            1884584,
            1885087,
            1884843,
            1885241,
            1883866,
            1884145,
            1884352,
            1885005,
            1884951,
            1884629,
            1884616,
            1884866,
            1884631,
            1886549
        ],
        "A": [
            1883495,
            1883456,
            1883441,
            1883462,
            1883497,
            1883746,
            1883922,
            1883957,
            1884403,
            1883486,
            1883550,
            1883761,
            1883459,
            1883607,
            1883898,
            1883757,
            1883836,
            1883518
        ]
    },
    "name": "E. Little Elephant and Furik and Rubik",
    "statement": "Little Elephant loves Furik and Rubik, who he met in a small city\r\nKremenchug.The Little Elephant has two strings of equal length and ,\r\nconsisting only of uppercase English letters. The Little Elephant\r\nselects a pair of substrings of equal length the first one from string ,\r\nthe second one from string . The choice is equiprobable among all\r\npossible pairs. Let\u2019s denote the substring of as , and the substring of\r\nas . The Little Elephant gives string to Furik and string to Rubik.Let\u2019s\r\nassume that is the number of such positions of (), that (where is the\r\nlength of lines and , and , are the -th characters of strings and ,\r\ncorrespondingly). Help Furik and Rubik find the expected value of .\r\n",
    "solutions": [
        "#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nchar s1[200005],s2[200005];\nint n;\ndouble sum1[26],sum2[26];\nint main()\n{\n    int i;\n    scanf(\"%d\",&n);\n    scanf(\"%s%s\",s1+1,s2+1);\n    double tot=0,ans=0;\n    for(i=1;i<=n;i++)\n    {\n        tot+=1LL*i*i;\n        int u1=s1[i]-'A';\n        int u2=s2[i]-'A';\n        ans+=sum1[u2]*(n-i+1);\n        ans+=sum2[u1]*(n-i+1);\n        sum1[u1]+=i;\n        sum2[u2]+=i;\n        if(u1==u2)\n        {\n            ans+=1LL*i*(n-i+1);\n        }\n    }\n    printf(\"%.10lf\\n\",ans/tot);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "probabilities"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Little Elephant and Furik and Rubik.json",
    "editorial_link": "https://codeforces.com//blog/entry/4849",
    "editorial": "This problem is to find the expected value. Important fact here is the\r\nlinearity of the expected value. This means that we can for each element\r\nof the first strings find the probability that exactly this element will\r\nme matched with some other (but, of course, equal) from the second\r\nstring. The answer will be the sum of all such probabilities. Let the\r\ncurrent character of the first string be the -th character (1-based\r\nnumeration). Firstly we try to solve problem in time. Namely, as it was\r\nsaid above, we need to find the number of such pairs of substrings that\r\n-th character (which is on probably some other position in substring) is\r\nthe same as the corresponding character of the second substring. Iterate\r\nthrough all () such that . The number of such pairs of substrings that\r\nhave match in that characters is (considering 1-based numeration). This\r\nis . And because we need to find the sum of such values for all possible\r\n, we can rewrite it as , where equals to the sum of all integers () that\r\n. Array can be simply computed in a linear time. Analogically you should\r\nprocess all indices to the right from . After we know the number of\r\npairs of substrings with the match with the -th character (let it be ),\r\nthe probability is , where is the total number of pair of substrings (it\r\ncan be found by loop or with some simple formula). The comlexity is .\r\n"
}