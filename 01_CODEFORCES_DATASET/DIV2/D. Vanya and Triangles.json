{
    "link": "https://codeforces.com//contest/552/problem/D",
    "problemId": "29864",
    "problem_idx": "D",
    "shortId": "552D",
    "contest_number": "552",
    "problem_submissions": {
        "E": [
            11646876,
            11645914,
            11646152,
            11649972,
            11649705,
            11649254,
            11649323,
            11649002,
            11652530,
            11648502,
            11648682,
            11644488,
            11651947
        ],
        "D": [
            11640438,
            11641253,
            11643031,
            11645042,
            11638109,
            11641642,
            11643248,
            11642812,
            11645189,
            11653069,
            11638747,
            11644748,
            11637258,
            11646037,
            11643577,
            11645065,
            11645584,
            11650005
        ],
        "C": [
            11638883,
            11643048,
            11640597,
            11643428,
            11643543,
            11646030,
            11644783,
            11645127,
            11637655,
            11645256,
            11659993,
            11639889,
            11660703,
            11640924,
            11642914
        ],
        "B": [
            11636441,
            11637487,
            11637412,
            11638261,
            11639028,
            11636467,
            11638358,
            11637713,
            11644065,
            11640586,
            11636843,
            11637147,
            11640517,
            11646494,
            11637818,
            11638869,
            11636892
        ],
        "A": [
            11635963,
            11636114,
            11636315,
            11636121,
            11639545,
            11635795,
            11635940,
            11635876,
            11635929,
            11637062,
            11635777,
            11635996,
            11641441,
            11647153,
            11636326,
            11637141,
            11635979
        ]
    },
    "name": "D. Vanya and Triangles",
    "statement": "Vanya got bored and he painted distinct points on the plane. After that\r\nhe connected all the points pairwise and saw that as a result many\r\ntriangles were formed with vertices in the painted points. He asks you\r\nto count the number of the formed triangles with the area.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#include <deque>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <limits>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\nusing namespace std;\n\ntypedef long long ll;\n\nvoid setup(){\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cout.precision(15);\n}\n\nll N, A, T;\npair<ll, ll> pts[2048];\n\nll gcd(ll a, ll b){\n    if(!b) return a;\n    return gcd(b, a%b);\n}\n\nint main(){\n    setup();\n    cin >> N;\n    for(int i=0; i<N; i++)\n        cin >> pts[i].first >> pts[i].second;\n\n    for(int c=0; c<N; c++){\n        vector<pair<ll, ll> > off;\n        for(int i=0; i<N; i++){\n            if(i==c) continue;\n            pair<ll, ll> val = {pts[i].first - pts[c].first,\n                                  pts[i].second - pts[c].second};\n            ll g = gcd(abs(val.first), abs(val.second));\n            val.first /= g;\n            val.second /= g;\n            off.push_back(val);\n        }\n\n        sort(off.begin(), off.end());\n\n        for(int i=0; i<off.size(); ){\n            int j = i+1;\n            while(j<off.size() && off[j] == off[i]) j++;\n            T += (j-i) * (j-i-1) / 2;\n            i = j;\n        }\n    }\n\n    A = N * (N - 1) * (N - 2) / 6;\n    A -= T/2;\n    cout << A << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "data structures",
        "geometry",
        "math",
        "sortings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Vanya and Triangles.json",
    "editorial_link": "https://codeforces.com//blog/entry/18696",
    "editorial": "We can look through all pair of points, draw line through each pair and\r\nwrite, that this line includes these 2 points. We can do it with map. If\r\nsome line includes points, then in fact we counted, that it has points,\r\nbecause we included each point 2*(x-1) times in this line. We can create\r\nan array and add to him values , so we can define, how many points is on\r\nthe line. Then we can iterate through all lanes and for each line with\r\npoints we will loose possible triangles from all possible triangles.\r\nDecide, that at first . So for every line, that includes points, we will\r\nsubstract from . Time complexity . C++11 code Wild_Hamster Java code\r\nWild_Hamster Java code Zlobober UPD: I am sorry, that O(n3 / 6)\r\nsolutions passed, my solution with O(n3 / 6) didnât pass before the\r\ncontest, so I decided, that TL 4 sec is good(it was for Java TL).\r\n",
    "hint": []
}