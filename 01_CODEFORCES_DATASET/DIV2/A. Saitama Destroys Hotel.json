{
    "link": "https://codeforces.com//contest/608/problem/A",
    "problemId": "43760",
    "problem_idx": "A",
    "shortId": "608A",
    "contest_number": "608",
    "problem_submissions": {
        "E": [
            14954683,
            14954321,
            14954967,
            14955933,
            14956930,
            14989274
        ],
        "D": [
            14948975,
            14955911,
            14950351,
            14951548,
            14950173,
            14953248,
            14946689,
            14948327,
            14947848,
            14948851,
            14949821,
            14949443,
            15002023,
            14945126,
            14950775,
            14949904,
            14949831,
            14950588,
            14950645,
            14950938,
            14949897
        ],
        "C": [
            14945727,
            14946619,
            14946995,
            14949787,
            14946924,
            14950673,
            14943809,
            14945500,
            14946278,
            14947165,
            14947087,
            14945923,
            14951157,
            14946593,
            14946790,
            14948255,
            14946254,
            14947790,
            14946313,
            14947513
        ],
        "B": [
            14943326,
            14943191,
            14943393,
            14946771,
            14944173,
            14948008,
            14945018,
            14943391,
            14944514,
            14944104,
            14944387,
            14943821,
            15002142,
            14948152,
            14944125,
            14944530,
            14944871,
            14943806,
            14944927,
            14944558,
            14946007
        ],
        "A": [
            14941960,
            14941817,
            14941888,
            14941881,
            14943576,
            14941987,
            14942178,
            14941800,
            14942424,
            14942297,
            14942192,
            14946279,
            14942201,
            14941803,
            14942278,
            14942854,
            14942697,
            14941911,
            14941863
        ]
    },
    "name": "A. Saitama Destroys Hotel",
    "statement": "Saitama accidentally destroyed a hotel again. To repay the hotel\r\ncompany, Genos has volunteered to operate an elevator in one of its\r\nother hotels. The elevator is special it starts on the top floor, can\r\nonly move down, and has infinite capacity. Floors are numbered from to\r\nand elevator initially starts on floor at time .The elevator takes\r\nexactly second to move down exactly floor and negligible time to pick up\r\npassengers. Genos is given a list detailing when and on which floor\r\npassengers arrive. Please determine how long in seconds it will take\r\nGenos to bring all passengers to floor .\r\n",
    "solutions": [
        "#include <iostream>\nusing namespace std;\n\nint n, s;\n\nint main(){\n  cin >> n >> s;\n  \n  int ans=s;\n  for (int i=0; i<n; ++i){\n    int f, t;\n    cin >> f >> t;\n    ans=max(ans, f+t);\n  }\n  cout << ans << endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Saitama Destroys Hotel.json",
    "editorial_link": "https://codeforces.com//blog/entry/22256",
    "editorial": "The minimum amount of time required is the maximum value of ti?+?fi and s, where t_i and f_i are the time and the floor of the passenger respectively.\n\nThe initial observation that should be made for this problem is that only the latest passenger on each floor matters. So, we can ignore all passengers that aren't the latest passenger on each floor.\n\nNow, assume there is only a passenger on floor s. Call this passenger a. The time taken for this passenger is clearly ta?+?fa (the time taken to wait for the passenger summed to the time taken for the elevator to reach the bottom).\n\nNow, add in one passenger on a floor lower than s. Call this new passenger b. There are 2 possibilities for this passenger. Either the elevator reaches the passenger's floor after the passenger's time of arrival or the elevator reaches the passenger's floor before the passenger's time of arrival. For the first case, no time is added to the solution, and the solution remains ta?+?fa. For the second case, the passenger on floor s doesn't matter, and the time taken is tb?+?fb for the new passenger.\n\nThe only thing left is to determine whether the elevator reaches the new passenger before ti of the new passenger. It does so if ta?+?(fa?-?fb)?>?tb. Clearly this is equivalent to whether ta?+?fa?>?tb?+?fb. Thus, the solution is max of max(ta?+?fa,?tb?+?fb).\n\nA similar line of reasoning can be applied to the rest of the passengers. Thus, the solution is the maximum value of ti?+?fi and s."
}