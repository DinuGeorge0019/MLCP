{"link": "https://codeforces.com//contest/919/problem/D", "problemId": "152090", "problem_idx": "D", "shortId": "919D", "contest_number": "919", "problem_submissions": {"E": [34759854, 34759008, 34755530, 34755071, 34767384, 34769825, 34762286, 34765859, 34757902, 34756808, 34754350, 34754906, 34754485, 34764184, 34764060, 34765778, 34765644, 34766112, 34770806, 34758487], "D": [34759692, 34756182, 34766669, 34747857, 34750540, 34761944, 34744086, 34755286, 34747306, 34747805, 34758206, 34746635, 34748995, 34743941, 34750352, 34751132, 34754972, 34756086, 34749125, 34751985], "F": [34756268, 34770726, 34767209, 34940216, 34940205, 34940167, 34768110], "C": [34755543, 34745303, 34743775, 34749427, 34742058, 34751454, 34747057, 34746048, 34744189, 34743121, 34786015, 34743288, 34741969, 34754924, 34754196, 34743195, 34748307, 34749924, 34748253, 34744412], "A": [34741202, 34738877, 34738230, 34738207, 34743521, 34740387, 34738030, 34738271, 34738995, 34738099, 34737984, 34739113, 34738625, 34738247, 34738122, 34738762, 34738024, 34737950, 34738747], "B": [34740191, 34740735, 34740551, 34773488, 34738696, 34749487, 34740570, 34740622, 34740449, 34739728, 34741488, 34740826, 34738595, 34739371, 34739374, 34739976, 34741055, 34741170, 34739403, 34740674]}, "name": "D. Substring", "statement": "You are given a graph with n nodes and m edges. One lowercase letter is\r\nassigned to each node. We define a path\u2019s value as the number of the\r\nmost frequently occurring letter. For example, if letters on a path are\r\n\"\", then the value of that path is 3. Your task is find a path whose\r\nvalue is the largest.\r\n", "solutions": ["#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int MX=300005;\nint f[MX][27];\nvector<int>G[MX];\nint n,m;\nchar s[MX];\nchar vis[MX];\nbool dfs(int k){\n\tif(vis[k]==2)return false;\n\tif(vis[k]==1)return true;\n\tvis[k]=1;\n\tfor(auto i:G[k])if(dfs(i))return true;\n\tvis[k]=2;\n\treturn false;\n}\nint F(int k,int c){\n\tif(f[k][c]!=-1)return f[k][c];\n\tint r=(s[k]=='a'+c?1:0),a=0;\n\tfor(auto i:G[k])a=max(a,F(i,c));\n\treturn f[k][c]=r+a;\n}\nint main(){\n\tios::sync_with_stdio(false);\n\tcin>>n>>m;cin>>(s+1);\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v;cin>>u>>v;\n\t\tG[u].push_back(v);\n\t}\n\tfor(int i=1;i<=n;i++)if(!vis[i]&&dfs(i))return cout<<-1<<endl,0;\n\tint ans=0;\n\tmemset(f,-1,sizeof(f));\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=0;j<26;j++)\n\t\t\tans=max(ans,F(i,j));\n\tcout<<ans<<endl;\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["dfs and similar", "dp", "graphs"], "dificulty": "1700", "interactive": false}