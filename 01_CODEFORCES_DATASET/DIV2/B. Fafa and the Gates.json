{
    "link": "https://codeforces.com//contest/935/problem/B",
    "problemId": "158422",
    "problem_idx": "B",
    "shortId": "935B",
    "contest_number": "935",
    "problem_submissions": {
        "E": [
            35490294,
            35492393,
            35493358,
            35495709,
            35495541,
            35493647,
            35499422,
            35499276,
            35500262,
            35500719,
            35500162,
            35500658,
            35500728,
            35499258,
            35501222,
            35495668,
            35497342,
            35498886
        ],
        "D": [
            35486074,
            35488065,
            35489775,
            35490762,
            35489358,
            35485225,
            35484887,
            35488795,
            35492000,
            35489470,
            35491505,
            35486948,
            35491669,
            35491916,
            35491520,
            35489051,
            35488153,
            35487210
        ],
        "C": [
            35484257,
            35486190,
            35486639,
            35485548,
            35486272,
            35495170,
            35490125,
            35484897,
            35485714,
            35486561,
            35487356,
            35493330,
            35488504,
            35487181,
            35485279,
            35490239
        ],
        "B": [
            35480395,
            35480198,
            35480227,
            35479698,
            35479918,
            35483145,
            35479197,
            35480428,
            35479972,
            35480181,
            35482318,
            35482750,
            35481424,
            35486459,
            35478821,
            35479749,
            35480541,
            35480932
        ],
        "A": [
            35478116,
            35476883,
            35477273,
            35476648,
            35476835,
            35476757,
            35476798,
            35478023,
            35477705,
            35477042,
            35477472,
            35478918,
            35478074,
            35478028,
            35476637,
            35476753,
            35478890,
            35477831
        ],
        "F": [
            42089787,
            35507058
        ]
    },
    "name": "B. Fafa and the Gates",
    "statement": "Two neighboring kingdoms decided to build a wall between them with some\r\ngates to enable the citizens to go from one kingdom to another. Each\r\ntime a citizen passes through a gate, he has to pay one silver coin.The\r\nworld can be represented by the first quadrant of a plane and the wall\r\nis built along the identity line (i.e. the line with the equation ). Any\r\npoint below the wall belongs to the first kingdom while any point above\r\nthe wall belongs to the second kingdom. There is a gate at any integer\r\npoint on the line (i.e. at points , , , ...). The wall and the gates do\r\nnot belong to any of the kingdoms. Fafa is at the gate at position and\r\nhe wants to walk around in the two kingdoms. He knows the sequence of\r\nmoves he will do. This sequence is a string where each character\r\nrepresents a move. The two possible moves Fafa will do are \u201d (move one\r\nstep up, from to ) and \u201d (move one step right, from to ). Fafa wants to\r\nknow the number of silver coins he needs to pay to walk around the two\r\nkingdoms following the sequence . Note that if Fafa visits a gate\r\nwithout moving from one kingdom to another, he pays no silver coins.\r\nAlso assume that he doesn\u2019t pay at the gate at point , i. e. he is\r\ninitially on the side he needs.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nconst int maxn = 1e5;\n\nint n;\nchar s[maxn + 1];\n\nint main(void) {\n  scanf(\"%d%s\", &n, s);\n  int x = 0, y = 0, side = -1, ans = 0;\n  for (int i = 0; i < n; ++i) {\n    if (s[i] == 'U') {\n      ++y;\n    } else {\n      ++x;\n    }\n    if (x > y) {\n      if (side == 1) {\n        ++ans;\n      }\n      side = 0;\n    } else if (x < y) {\n      if (side == 0) {\n        ++ans;\n      }\n      side = 1;\n    }\n  }\n  printf(\"%d\\n\", ans);\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Fafa and the Gates.json",
    "editorial_link": "https://codeforces.com//blog/entry/57889",
    "editorial": "Fafa the gates when he stands on the line . This happens only when he\r\nmakes an equal number of up and right moves. Fafa will the gates if he\r\nis currently at a gate and will make a move similar to the last one.So,\r\nwe can iterate over the moves in order from left to right keeping track\r\nof the number of up and right moves till now, and increment the answer\r\nif the next move is similar to the current one and the number of up and\r\nright moves are equal.Complexity: .\r\n"
}