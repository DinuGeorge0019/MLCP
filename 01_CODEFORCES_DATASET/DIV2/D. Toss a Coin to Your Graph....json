{
    "link": "https://codeforces.com//contest/1679/problem/D",
    "problemId": "1399039",
    "problem_idx": "D",
    "shortId": "1679D",
    "contest_number": "1679",
    "problem_submissions": {
        "E": [
            157180775,
            157191404,
            157182377,
            157177036,
            157184415,
            157176870,
            157175927,
            157179358,
            157179949,
            157181138,
            157181082,
            157188651,
            158765685,
            157182719,
            157183341,
            157204752,
            157188040,
            157183760,
            157190456,
            157188869
        ],
        "F": [
            157169392,
            157164382,
            157193064,
            157199663,
            157199138,
            157186552,
            157273261,
            157180874,
            158765715,
            157250679,
            157197475,
            157509965
        ],
        "A": [
            157160334,
            157139962,
            157137818,
            157155828,
            157137804,
            157138382,
            157140445,
            157138960,
            157138642,
            157138794,
            157144480,
            157142439,
            162719211,
            158765634,
            157138332,
            157138320,
            157139854,
            157140729,
            157138982,
            157137953,
            157138211
        ],
        "B": [
            157157060,
            157145020,
            157140369,
            157158458,
            157140367,
            157140216,
            157144197,
            157146569,
            157143365,
            157142315,
            157148129,
            157146141,
            157198440,
            158765655,
            157143823,
            157143623,
            157144426,
            157145542,
            157143138,
            157142676,
            157142878
        ],
        "C": [
            157154751,
            157170214,
            157147368,
            157161435,
            157149801,
            157145630,
            157152376,
            157151562,
            157149876,
            157147868,
            157153893,
            157150787,
            157196725,
            158765679,
            157151559,
            157154130,
            157157802,
            157152042,
            157149676,
            157150426,
            157148575
        ],
        "D": [
            157148745,
            157180439,
            157159044,
            157144096,
            157159383,
            157154423,
            157160087,
            157161413,
            157158556,
            157158664,
            157164328,
            157159039,
            157192557,
            158765668,
            157159304,
            157162810,
            157169333,
            157162480,
            157162127,
            157163382,
            157167439
        ]
    },
    "name": "D. Toss a Coin to Your Graph...",
    "statement": "One day Masha was walking in the park and found a graph under a tree...\r\nSurprised? Did you think that this problem would have some logical and\r\nreasoned story? No way! So, the problem...Masha has an oriented graph\r\nwhich i-th vertex contains some positive integer a_i. Initially Masha\r\ncan put a coin at some vertex. In one operation she can move a coin\r\nplaced in some vertex u to any other vertex v such that there is an\r\noriented edge u\r\nto v in the graph. Each time when the coin is placed in some vertex i,\r\nMasha write down an integer a_i in her notebook (in particular, when\r\nMasha initially puts a coin at some vertex, she writes an integer\r\nwritten at this vertex in her notebook). Masha wants to make exactly k -\r\n1 operations in such way that the maximum number written in her notebook\r\nis as small as possible.\r\n",
    "solutions": [
        "#include<algorithm>\n#include<iostream>\n#include<stdio.h>\n#include<vector>\n#include<queue>\n#include<map>\nusing namespace std;\nconst int maxn=500005;\nint n,m,ans;\nlong long k;\nint a[maxn],id[maxn],f[maxn],deg[maxn],xx[maxn],yy[maxn];\nvector<int>v[maxn];\nqueue<int>q;\ninline int cmp(int x,int y){\n\treturn a[x]<a[y];\n}\nint main(){\n\tscanf(\"%d%d%lld\",&n,&m,&k);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&a[i]),id[i]=i;\n\tsort(id+1,id+1+n,cmp);\n\tfor(int i=1,x,y;i<=m;i++)\n\t\tscanf(\"%d%d\",&xx[i],&yy[i]);\n\tint L=0,R=n+1;\n\twhile(L+1<R){\n\t\tint mid=(L+R)>>1;\n\t\tfor(int i=1;i<=m;i++)\n\t\t\tif(a[xx[i]]<=a[id[mid]]&&a[yy[i]]<=a[id[mid]])\n\t\t\t\tdeg[yy[i]]++,v[xx[i]].push_back(yy[i]);\n\t\tint tot=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(deg[i]==0)\n\t\t\t\tq.push(i);\n\t\twhile(!q.empty()){\n\t\t\tint x=q.front();\n\t\t\tq.pop(),tot++;\n\t\t\tfor(int i=0;i<v[x].size();i++){\n\t\t\t\tint y=v[x][i];\n\t\t\t\tdeg[y]--,f[y]=max(f[y],f[x]+1);\n\t\t\t\tif(deg[y]==0)\n\t\t\t\t\tq.push(y);\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(f[i]+1>=k){\n\t\t\t\ttot=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\tif(tot<n)\n\t\t\tR=mid;\n\t\telse L=mid;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tv[i].clear(),deg[i]=f[i]=0;\n\t}\n\tif(R>n)\n\t\tputs(\"-1\");\n\telse printf(\"%d\\n\",a[id[R]]);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dfs and similar",
        "dp",
        "graphs"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Toss a Coin to Your Graph....json",
    "editorial_link": "https://codeforces.com//blog/entry/102859",
    "editorial": "Note that the function of existence of the answer relatively to the\r\nminimum value of the maximum in the path is monotonous. If we were able\r\nto construct the path with maximum, not greater than , we are able to\r\nconstruct the path with maximum, not greater than . This leads to the\r\nidea of binary search the answer.Let binary search to fix some integer .\r\nWe have to check, if there is a path in the graph, that consists of\r\nedges and the maximum on this path is not greater than . In the\r\nbeginning let\u00e2\u0080\u0099s leave in consideration only vertices which values are\r\nnot greater than . Now we need to check if the needed path exist in the\r\nresulting graph.If there is a cycle in the graph, there is a path of\r\nevery length in it, so there is a path of length . Otherwise we have a\r\ndirected acyclic graph. Let\u00e2\u0080\u0099s find a longest path in it and compare its\r\nlength with . Let\u00e2\u0080\u0099s sort the graph topologically and calculate the\r\nlength of the longest path in the graph that begins in vertex , it\u00e2\u0080\u0099s a\r\nwell-known classical problem.Time complexity: .\r\n"
}