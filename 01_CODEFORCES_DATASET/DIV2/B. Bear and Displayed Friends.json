{
    "link": "https://codeforces.com//contest/658/problem/B",
    "problemId": "53370",
    "problem_idx": "B",
    "shortId": "658B",
    "contest_number": "658",
    "problem_submissions": {
        "E": [
            17004085,
            49157877,
            17061517,
            17156655
        ],
        "D": [
            16999449,
            17015215,
            16997780,
            17002007,
            17001539,
            17001492,
            17003628,
            17003492,
            17003016,
            17002794,
            17003833,
            17004549,
            17006375,
            17005499,
            17005815,
            17005114,
            17019978,
            17005108,
            17005065,
            17003630,
            17006976
        ],
        "C": [
            16995068,
            16993450,
            16995031,
            16997375,
            16996718,
            16996690,
            16995850,
            16997578,
            17001691,
            16996778,
            16998533,
            16997776,
            16998853,
            16997308,
            16999990,
            16997317,
            16999080,
            17004966,
            16999164
        ],
        "B": [
            16992735,
            16994253,
            16992611,
            16991812,
            16993314,
            16992931,
            16992391,
            16993663,
            16993303,
            16993084,
            16992706,
            16992701,
            16994956,
            16993684,
            16993760,
            16992879,
            16993582,
            16992643,
            16994378
        ],
        "A": [
            16990896,
            16990442,
            16990585,
            16990357,
            16991634,
            16990650,
            16990607,
            16990450,
            16991276,
            16991187,
            16990751,
            16990621,
            16991771,
            16990461,
            16991470,
            16990648,
            16991140,
            16990764,
            16991241
        ]
    },
    "name": "B. Bear and Displayed Friends",
    "statement": "Limak is a little polar bear. He loves connecting with other bears via\r\nsocial networks. He has friends and his relation with the -th of them is\r\ndescribed by a unique integer . The bigger this value is, the better the\r\nfriendship is. No two friends have the same value .Spring is starting\r\nand the Winter sleep is over for bears. Limak has just woken up and\r\nlogged in. All his friends still sleep and thus none of them is online.\r\nSome (maybe all) of them will appear online in the next hours, one at a\r\ntime.The system displays friends who are online. On the screen there is\r\nspace to display at most friends. If there are more than friends online\r\nthen the system displays only best of them those with biggest .Your task\r\nis to handle queries of two types: \"\" Friend becomes online. It\u2019s\r\nguaranteed that he wasn\u2019t online before. \"\" Check whether friend is\r\ndisplayed by the system. Print \"\" or \"\" in a separate line. Are you able\r\nto help Limak and answer all queries of the second type?\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <climits>\n#include <algorithm>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <cassert>\n#include <vector>\n#define all(x) x.begin() , x.end()\n#define fi first\n#define se second\n#define pb push_back\n#define umax( x , y ) x = max( x , (y) )\n#define umin( x , y ) x = min( x , (y) )\n#define For( i , a ) for(int i=1;i<=a;i++)\n#define ort (((b+s) < 0 )? (b+s)/2-1:(b+s)/2)\n#define y2 asrwjaelkf\n#define y1 asseopirwjaelkf\n\nusing namespace std;\n\ninline int read() {\n\tint res = 0 ;int neg ;\n\twhile(true){char ch = getchar();if(ch>='0' && ch<='9' || ch=='-'){if(ch=='-') neg = -1;else neg = 1 , res = ch-'0';break;} }\n\twhile(true){char ch = getchar();if(ch>='0' && ch<='9') res*=10 , res+=ch-'0';else break;}\n\treturn res*neg;\n}\n\ntypedef long long Lint;\ntypedef double db;\ntypedef pair<int,int> ii;\ntypedef pair<int,ii> iii;\n\nconst int maxn = 1000020;\nconst int MOd = 1e9+7;\n\nint a, b, q;\nint ar[maxn], t[maxn];\nset<ii> :: iterator it;\nset<ii> st;\n\nint main() {\n\t\n\tscanf(\"%d %d %d\",&a,&b,&q);\n\t\n\tfor(int i=1;i<=a;i++) {\n\t\tscanf(\"%d\",&ar[i]);\n\t\tar[i] = -ar[i];\n\t}\n\t\n\tfor(int i=1;i<=q;i++) {\n\t\tint tp, x;\n\t\tscanf(\"%d %d\",&tp,&x);\n\t\tif( tp == 1 ) {\n\t\t\tst.insert( ii( ar[x], x ) );\n\t\t}\n\t\tif( tp == 2 ) {\n\t\t\tit = st.begin();\n\t\t\tint c = 0;\n\t\t\tfor(int j=1;j<=b;j++) {\n\t\t\t\tif( it == st.end() ) break;\n\t\t\t\tif( it->se == x ) { printf(\"YES\\n\"); c = 1; break; }\n\t\t\t\tit++;\n\t\t\t}\n\t\t\tif( !c ) printf(\"NO\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Bear and Displayed Friends.json",
    "editorial_link": "https://codeforces.com//blog/entry/44047",
    "editorial": "You should remember all friends displayed currently (in set or list) and when you add someone new you must check whether there are at most k people displayed. If there are k?+?1 then you can iterate over them (over k?+?1 people in your set/list) and find the worst one. Then \u0097 remove him. The intended complexity is O(n + q*k)."
}