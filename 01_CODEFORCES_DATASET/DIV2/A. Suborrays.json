{
    "link": "https://codeforces.com//contest/1391/problem/A",
    "problemId": "694515",
    "problem_idx": "A",
    "shortId": "1391A",
    "contest_number": "1391",
    "problem_submissions": {
        "E": [
            89439040,
            89441228,
            89441499,
            89447005,
            89455919,
            89448964,
            89450402,
            89450314,
            89451586,
            89450891,
            89451401,
            89477045,
            89456884,
            89551553,
            89455517,
            134448846
        ],
        "D": [
            89432700,
            89481054,
            89433875,
            89429170,
            89437115,
            89436985,
            89437929,
            89442877,
            89440195,
            89442618,
            89441518,
            89427031,
            89429794,
            89432423,
            89430800,
            89431789,
            89433956,
            89433503,
            89434575,
            89434257,
            89434975
        ],
        "C": [
            89426750,
            89420513,
            89434144,
            89429566,
            89425760,
            89427285,
            89429714,
            89432343,
            89427996,
            89426533,
            89417430,
            89420352,
            89419759,
            89418803,
            89424047,
            89424699,
            89425111,
            89422696,
            89425810,
            89422948
        ],
        "B": [
            89410454,
            89413605,
            89410503,
            89414269,
            89414715,
            89415761,
            89415369,
            89418138,
            89419682,
            89414189,
            89411200,
            89409436,
            89412062,
            89413310,
            89415929,
            89412884,
            89413208,
            89414045,
            89413779,
            89419197
        ],
        "A": [
            89406971,
            89407448,
            89407070,
            89407023,
            89410266,
            89408876,
            89408557,
            89413085,
            89412622,
            89407815,
            89407257,
            89406922,
            89406883,
            89407981,
            89408687,
            89407102,
            89407091,
            89409131,
            89415228,
            89408988
        ]
    },
    "name": "A. Suborrays",
    "statement": "A permutation of length n is an array consisting of n distinct integers\r\nfrom 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray) and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray).For a positive integer n, we call a permutation p of length n if\r\nthe following condition holds for every pair i and j (1\r\nle i\r\nle j\r\nle n) (p_i\r\ntext{ OR } p_{i+1}\r\ntext{ OR }\r\nldots\r\ntext{ OR } p_{j-1}\r\ntext{ OR } p_{j})\r\nge j-i+1, where\r\ntext{OR} denotes the bitwise OR operation. In other words, a permutation\r\np is if for every subarray of p, the\r\ntext{OR} of all elements in it is not less than the number of elements\r\nin that subarray. Given a positive integer n, output any permutation of\r\nlength n. We can show that for the given constraints such a permutation\r\nalways exists.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    int t;\n    cin >> t;\n\n    while(t--){\n        int n;\n        cin >> n;\n\n        for(int i = 1; i <= n; ++i)\n            cout << i << \" \";\n        cout << \"\\n\";\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Suborrays.json",
    "editorial_link": "https://codeforces.com//blog/entry/81265",
    "editorial": "Every permutation is good. Proof: We use the fact that for any set of\r\nnumbers, itâs bitwise OR is at least the maximum value in it. Now, we\r\njust need to show that any subarray of length has at least one element\r\ngreater than or equal to . If the maximum element is , then, we have\r\nelements all with values in the range . By the pigeonhole principle, at\r\nleast of them must be the same contradicting the fact the itâs a\r\npermutation. Time Complexity:\r\n",
    "hint": []
}