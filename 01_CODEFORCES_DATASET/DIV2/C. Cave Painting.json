{
    "link": "https://codeforces.com//contest/922/problem/C",
    "problemId": "154240",
    "problem_idx": "C",
    "shortId": "922C",
    "contest_number": "922",
    "problem_submissions": {
        "F": [
            35024389,
            35030878,
            35066050
        ],
        "E": [
            35021772,
            35023531,
            35025088,
            35031161,
            35025975,
            35029014,
            35026988,
            35021941,
            35026997,
            35064591,
            35064474,
            35026191,
            35037602,
            35037396,
            35027845
        ],
        "A": [
            35014429,
            35006326,
            35014914,
            35006731,
            35022340,
            35006627,
            35016513,
            35027286,
            35015985,
            35019424,
            35007052,
            35007949,
            35037576,
            35006680
        ],
        "C": [
            35013242,
            35014688,
            35008675,
            35009771,
            35021848,
            35009735,
            35022809,
            35015286,
            35020018,
            35017726,
            35013353,
            35014808,
            35011448,
            35018270,
            35015187,
            35037555,
            35037421,
            35021338,
            35014321
        ],
        "D": [
            35011345,
            35017477,
            35010376,
            35021949,
            35015604,
            35013771,
            35027504,
            35020183,
            35031518,
            35015008,
            35019185,
            35023414,
            35018029,
            35028830,
            35018141,
            35037411,
            35026479,
            35021278
        ],
        "B": [
            35007623,
            35008516,
            35007719,
            35008074,
            35008746,
            35007399,
            35009873,
            35009915,
            35012055,
            35007990,
            35009015,
            35007912,
            35008304,
            35009458,
            35010175,
            35037430,
            35007761,
            35008509
        ]
    },
    "name": "C. Cave Painting",
    "statement": "Imp is watching a documentary about cave painting. Some numbers, carved\r\nin chaotic order, immediately attracted his attention. Imp rapidly\r\nproposed a guess that they are the remainders of division of a number by\r\nall integers from to . Unfortunately, there are too many integers to\r\nanalyze for Imp.Imp wants you to check whether all these remainders are\r\ndistinct. Formally, he wants to check, if all , , are distinct, i. e.\r\nthere is no such pair that: , , where is the remainder of division by .\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define int long long\n#define F first\n#define S second\n\nmain(){\n    int n, k;\n    cin >> n >> k;\n    if(n == 1){\n        if(k <= 2) cout << \"Yes\" << endl;\n        else cout << \"No\" << endl;\n        return 0;\n    }\n    int l;\n    for(int i=1; ; i++){\n        if((n+1)%i != 0){\n            l = i - 1;\n            break;\n        }\n    }\n    if(k <= l) cout << \"Yes\" << endl;\n    else cout << \"No\" << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "number theory"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Cave Painting.json",
    "editorial_link": "https://codeforces.com//blog/entry/57605",
    "editorial": "Consider the way remainders are obtained. Remainder can be obtained only\r\nwhen is taken modulo . Remainder can either be obtained when taken\r\nmodulo or . Since the remainder modulo is already fixed, the only\r\nopportunity left is . Proceeding this way, we come to a conclusion that\r\nif answer exists, then = holds. This condition is equal to mod = , i. e.\r\nshould be divisible by all numbers between and . In other words, must be\r\ndivisible by their LCM. Following the exponential growth of LCM, we\r\nclaim that when is huge enough, the answer wonât exists (more precisely\r\nat ). And for small we can solve the task naively. .\r\n",
    "hint": []
}