{
    "link": "https://codeforces.com//contest/782/problem/C",
    "problemId": "96957",
    "problem_idx": "C",
    "shortId": "782C",
    "contest_number": "782",
    "problem_submissions": {
        "B": [
            25267905,
            25250113,
            25247221,
            25250057,
            25249960,
            25260592,
            25250810,
            25250250,
            25247987,
            25248996,
            25252120,
            25252630,
            25250336,
            25258914,
            25255792,
            25254407,
            25252511,
            25252408,
            25251554,
            25264621,
            25253624
        ],
        "E": [
            25257921,
            25262484,
            25258744,
            25260005,
            25259671,
            25259859,
            25263675,
            25263558,
            25261219,
            25263312,
            25264852,
            25262648,
            25263111,
            25263112,
            25265502,
            25264818,
            25264138,
            25263813,
            25263236,
            25499887,
            25266724,
            25260260,
            25256767
        ],
        "D": [
            25255317,
            25254040,
            25254587,
            25256934,
            25261275,
            25263628,
            25259016,
            25257085,
            25258676,
            25258895,
            25257929,
            25259738,
            25253164,
            25260236,
            25257532,
            25259424,
            25260675,
            25259499,
            25261948,
            25267588
        ],
        "C": [
            25252879,
            25249891,
            25251779,
            25251734,
            25260562,
            25253017,
            25252465,
            25250777,
            25252022,
            25254042,
            25255189,
            25253477,
            25255602,
            25254511,
            25256655,
            25255363,
            25254268,
            25254004,
            25250050,
            25250430
        ],
        "A": [
            25247630,
            25246175,
            25246521,
            25247338,
            25259975,
            25247530,
            25246345,
            25246130,
            25246627,
            25246669,
            25247634,
            25246833,
            25257300,
            25246231,
            25249989,
            25247211,
            25250337,
            25247505,
            25500110,
            25251276,
            25246111
        ],
        "F": [
            25264803,
            25787036,
            25277978
        ]
    },
    "name": "C. Andryusha and Colored Balloons",
    "statement": "Andryusha goes through a park each day. The squares and paths between\r\nthem look boring to Andryusha, so he decided to decorate them.The park\r\nconsists of squares connected with bidirectional paths in such a way\r\nthat any square is reachable from any other using these paths. Andryusha\r\ndecided to hang a colored balloon at each of the squares. The baloons\u2019\r\ncolors are described by positive integers, starting from . In order to\r\nmake the park varicolored, Andryusha wants to choose the colors in a\r\nspecial way. More precisely, he wants to use such colors that if , and\r\nare distinct squares that and have a direct path between them, and and\r\nhave a direct path between them, then balloon colors on these three\r\nsquares are distinct.Andryusha wants to use as little different colors\r\nas possible. Help him to choose the colors!\r\n",
    "solutions": [
        "#include<cstdio>\n#include<vector>\n\nint n, ans, c[200005];\nstd::vector<int> v[200005];\n\nvoid dfs(int x, int y) {\n\tint cc = 1;\n\tfor (int i = 0; i < v[x].size(); i++) if (v[x][i] != y) {\n\t\t\twhile (cc == c[x] || cc == c[y]) cc++;\n\t\t\tc[v[x][i]] = cc++;\n\t}\n\tfor (int i = 0; i < v[x].size(); i++) if (v[x][i] != y) dfs(v[x][i], x);\n}\n\nint max(int x, int y) {\n\treturn x > y ? x : y;\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i < n; i++) {\n\t\tint x, y;\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tv[x].push_back(y);\n\t\tv[y].push_back(x);\n\t}\n\tc[1] = 1;\n\tdfs(1, 0);\n\tfor (int i = 1; i <= n; i++) ans = max(ans, c[i]);\n\tprintf(\"%d\\n\", ans);\n\tfor (int i = 1; i <= n; i++) printf(\"%d%c\", c[i], i == n ? '\\n' : ' ');\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs",
        "greedy",
        "trees"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Andryusha and Colored Balloons.json",
    "editorial_link": "https://codeforces.com//blog/entry/50854",
    "editorial": "If v is a vertex of degree d, then the answer is at least d?+?1. Indeed, any two neighbours of v can be connected by a path of length three via vertex v. Also, v lies on a common three-vertex path with any of its neighbours (possibly using a non-neighbour vertex). It follows that v and all of its neighbours must have pairwise distinct colors.\n\nLet us show that the strongest of these estimates is best possible, that is, construct a coloring with D?+?1 colors, where D is the maximal degree. Root the tree at arbitrary vertex, and color the root with color 1, also color its children with subsequent colors. All the rest vertices will be colored as follows: if a vertex v is colored x, and its parent is colored y, then for the children of v we will use numbers starting from 1 skipping x and y. One can check that no color with number larger than D?+?1 shall be used. Implementation-wise, this is a simple DFS procedure."
}