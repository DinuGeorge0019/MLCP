{
    "link": "https://codeforces.com//contest/195/problem/B",
    "problemId": "1420",
    "problem_idx": "B",
    "shortId": "195B",
    "contest_number": "195",
    "problem_submissions": {
        "E": [
            1777341,
            1777807,
            1780602,
            1778882,
            1779695,
            1778939,
            1778079,
            1779584,
            1779643,
            1780676,
            1779994,
            1779882,
            1781688
        ],
        "D": [
            1776612,
            1777077,
            1778398,
            1777210,
            1777366,
            1777818,
            1778286,
            1778743,
            1779250,
            1776789,
            1779690,
            1779525,
            1779340,
            1779758
        ],
        "C": [
            1776366,
            1778703,
            1777228,
            1786363,
            1778918,
            1777720,
            1778071,
            1778134,
            1779053,
            1780725,
            1777787,
            1778730,
            1778503,
            1778557
        ],
        "B": [
            1775818,
            1776287,
            1776244,
            1776178,
            1776166,
            1776316,
            1776212,
            1776715,
            1776133,
            1776660,
            1776543,
            1776189,
            1776717,
            1777992,
            1776246,
            1777021,
            1776348,
            1776593
        ],
        "A": [
            1775640,
            1775659,
            1775647,
            1775756,
            1775776,
            1775645,
            1775901,
            1776042,
            1775714,
            1776301,
            1775707,
            1775754,
            1776172,
            1777471,
            1775841,
            1775942,
            1776937,
            1775764
        ]
    },
    "name": "B. After Training",
    "statement": "After a team finished their training session on Euro football\r\nchampionship, Valeric was commissioned to gather the balls and sort them\r\ninto baskets. Overall the stadium has balls and baskets. The baskets are\r\npositioned in a row from left to right and they are numbered with\r\nnumbers from to , correspondingly. The balls are numbered with numbers\r\nfrom to .Valeric decided to sort the balls in the order of increasing of\r\ntheir numbers by the following scheme. He will put each new ball in the\r\nbasket with the least number of balls. And if he’s got several variants,\r\nhe chooses the basket which stands closer to the middle. That means that\r\nhe chooses the basket for which is minimum, where is the number of the\r\nbasket. If in this case Valeric still has multiple variants, he chooses\r\nthe basket with the minimum number.For every ball print the number of\r\nthe basket where it will go according to Valeric’s scheme.Note that the\r\nballs are sorted into baskets in the order of increasing numbers, that\r\nis, the first ball goes first, then goes the second ball and so on.\r\n",
    "solutions": [
        "#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <cstddef>\n#include <algorithm>\n#include <utility>\n#include <iterator>\n#include <numeric>\n#include <list>\n#include <complex>\n#include <cstdio>\n#include <climits>\n#include <iostream>\n#include <fstream>\n\n/*** TEMPLATE CODE STARTS HERE ***/\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef long long ll;\ntypedef complex<double> pnt;\ntypedef pair<int, int> pii;\n\n#define RA(x) (x).begin(), (x).end()\n#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)\n#define SZ(x) ((int) (x).size())\n\ntemplate<class T>\nvoid splitstr(const string &s, vector<T> &out)\n{\n    istringstream in(s);\n    out.clear();\n    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));\n}\n\ntemplate<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }\n\nstatic void redirect(int argc, const char **argv)\n{\n    if (argc > 1)\n    {\n        static filebuf f;\n        f.open(argv[1], ios::in);\n        cin.rdbuf(&f);\n        if (!cin)\n        {\n            cerr << \"Failed to open '\" << argv[1] << \"'\" << endl;\n            exit(1);\n        }\n    }\n\n    if (argc > 2)\n    {\n        static filebuf f;\n        f.open(argv[2], ios::out | ios::trunc);\n        cout.rdbuf(&f);\n        if (!cout)\n        {\n            cerr << \"Failed to open '\" << argv[2] << \"'\" << endl;\n        }\n    }\n}\n\n/*** TEMPLATE CODE ENDS HERE */\n\nstruct compare\n{\n    int M;\n\n    compare(int M = 0) : M(M) {}\n\n    bool operator()(int a, int b) const\n    {\n        return abs(M + 1 - 2 * a) < abs(M + 1 - 2 * b);\n    }\n};\n\n\nint main(int argc, const char **argv)\n{\n    redirect(argc, argv);\n\n    int N, M;\n    cin >> N >> M;\n    vi order(M);\n    for (int i = 0; i < M; i++)\n        order[i] = i + 1;\n    stable_sort(order.begin(), order.end(), compare(M));\n    for (int i = 0; i < N; i++)\n        cout << order[i % M] << '\\n';\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. After Training.json",
    "editorial_link": "https://codeforces.com//blog/entry/4699",
    "editorial": "In this problem you should carefully implement the given process.\r\nFirstly note that ball number will be in the same basket as ball number\r\n. Therefore it is enough to distribute first balls. It can be done using\r\ntwo pointers , from the middle. Alternately put one ball to the left and\r\nto the right and shift pointers. In only case you should shift left\r\npointer twice in the first moment of time if is odd.\r\n",
    "hint": []
}