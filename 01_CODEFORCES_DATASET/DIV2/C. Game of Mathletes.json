{
    "link": "https://codeforces.com//contest/2060/problem/C",
    "problemId": "3147472",
    "problem_idx": "C",
    "shortId": "2060C",
    "contest_number": "2060",
    "problem_submissions": {
        "G": [
            301873530,
            301859046,
            301852803,
            301886996,
            301829945,
            301884074,
            301865362,
            301944483,
            301877663
        ],
        "F": [
            301809977,
            301827952,
            301788384,
            301831904,
            301878286,
            301872767,
            301850953,
            301874252,
            301811774,
            301816800,
            301831940,
            301815743,
            301889712,
            301854030,
            301836262,
            301832755,
            301848647,
            301843962,
            301841616,
            301902407
        ],
        "E": [
            301780977,
            301790293,
            301841004,
            301786821,
            301854824,
            301815095,
            301816295,
            301758990,
            301799665,
            301795284,
            301801086,
            301920235,
            301889573,
            301794741,
            301799175,
            301804483,
            301807413,
            301794652,
            301768541
        ],
        "D": [
            301771562,
            301772155,
            301822748,
            301775745,
            301785461,
            301801939,
            301852011,
            301776457,
            301782878,
            301769755,
            301787487,
            301917787,
            301889434,
            301776569,
            301786371,
            301790878,
            301764610,
            301773754,
            301756989
        ],
        "C": [
            301748633,
            301761322,
            301773736,
            301772188,
            301769620,
            301776760,
            301770890,
            301782439,
            301749719,
            301754417,
            301759048,
            301774305,
            301916945,
            301889316,
            301755362,
            301775118,
            301772704,
            301748352,
            301760800,
            301753236
        ],
        "B": [
            301746021,
            301755202,
            301761527,
            301755925,
            301795537,
            301759408,
            301745641,
            301745397,
            301750029,
            301750098,
            301915984,
            301888995,
            301750358,
            301751304,
            301755984,
            301781169,
            301750274,
            301748735
        ],
        "A": [
            301739564,
            301739279,
            301761253,
            301738865,
            301749974,
            301743163,
            301743222,
            301739250,
            301739375,
            301743095,
            301739024,
            301915381,
            301888689,
            301739666,
            301739726,
            301746215,
            301745343,
            301738637,
            301738767
        ]
    },
    "editorial_link": "https://codeforces.com/blog/entry/138342",
    "editorial": "Note that Bob has all the power in this game, because the order in which Alice picks numbers is irrelevant, since Bob can always pick the optimal number to give himself a point. Therefore, we can just ignore Alice and play the game from Bob's perspective.\n\nFrom this point on, a \"paired\" number is any number a\n on the blackboard such that there exists a b\n on the blackboard such that a+b=k\n.\n\nBob's strategy is as follows:\n\nif Alice picks a paired number, Bob should pick the other number in the pair.\n\nif Alice picks an unpaired number, Bob can pick any other unpaired number, it doesn't matter which.\n\nThis always works because the number of \"unpaired numbers\" is always even, since n\n is even and the number of \"paired numbers\" will always be even. Therefore, for every unpaired number Alice picks, Bob will always have an unpaired number to respond with.\n\nTherefore, the final score is just the number of pairs in the input. To count them, use a map of counts c\n such that cx\n is the number of occurrences of x\n on the whiteboard. Then, for each number from 1\n to ?k2?\n, take the minimum of cx\n and ck?x\n, and add that to the total. Remember the edge case where k\n is even and x=k2\n. The number of pairs here is just ?cx2?\n.",
    "name": "C. Game of Mathletes",
    "statement": "Alice and Bob are playing a game. There are n () integers written on a\r\nblackboard, represented by x_1, x_2,\r\nldots, x_n. There is also a given integer k and an integer that is\r\ninitially 0. The game lasts for\r\nfrac{n}{2} turns, in which the following events happen sequentially:\r\nAlice selects an integer from the blackboard and erases it. Let\u2019s call\r\nAlice\u2019s chosen integer a. Bob selects an integer from the blackboard and\r\nerases it. Let\u2019s call Bob\u2019s chosen integer b. If a+b=k, add 1 to . Alice\r\nis playing to minimize the while Bob is playing to maximize the .\r\nAssuming both players use optimal strategies, what is the after the game\r\nends?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;\u00a0int main(){\tios::sync_with_stdio(false);\tcin.tie(nullptr);\u00a0\tint t;\tcin >> t;\twhile(t--){\t\tint n, k;\t\tcin >> n >> k;\u00a0\t\tvector<int> freq(n+1, 0);\t\tfor(int i = 0; i < n; i++){\t\t\tint x; \t\t\tcin >> x;\t\t\tfreq[x]++;\t\t}\u00a0\t\tif(k > 2*n){\t\t\tcout << 0 << \"\\n\";\t\t\tcontinue;\t\t}\u00a0\t\tlong long answer = 0;\t\tint start = max(1, k - n), end = min(n, (k - 1) / 2);\t\tfor(int i = start; i <= end; i++){\t\t\tint j = k - i;\t\t\tif(j >= 1 && j <= n && i < j){\t\t\t\tanswer += min(freq[i], freq[j]);\t\t\t}\t\t}\t\tif(k % 2 == 0){\t\t\tint half = k / 2;\t\t\tif(half >= 1 && half <= n){\t\t\t\tanswer += freq[half] / 2;\t\t\t}\t\t}\u00a0\t\tcout << answer << \"\\n\";\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "greedy",
        "sortings",
        "two pointers"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Game of Mathletes.json"
}