{"link": "https://codeforces.com//contest/1928/problem/F", "problemId": "2471778", "problem_idx": "F", "shortId": "1928F", "contest_number": "1928", "problem_submissions": {"F": [245849503, 245993896], "E": [245824555, 245829499, 245832784, 245834485, 245833902, 245835921, 245834370, 245835347, 245835219, 245878440, 245832600, 245836538, 245836332, 245838032, 245837628, 245837711, 245841209, 245841102, 245837376], "D": [245815421, 245816606, 245823987, 245822097, 245824145, 245822460, 245824462, 245825936, 245821079, 245821563, 245828692, 245822407, 245826293, 245826843, 245826081, 245825495, 245820103, 245826303, 245826059], "C": [245806250, 245805820, 245813391, 245810753, 245811757, 245812438, 245811596, 245812971, 245811199, 245809118, 245814024, 245811562, 245813546, 245818219, 245816512, 245809891, 245812032, 245816988], "B": [245796420, 245797249, 245798962, 245800253, 245800069, 245802494, 245798634, 245800445, 245804185, 245802239, 245797030, 245802272, 245799479, 245799473, 245800524, 245801423, 245801226, 245803227], "A": [245794304, 245796660, 245795167, 245796391, 245796735, 245797061, 245794273, 245795174, 245794810, 245794175, 245794231, 245794283, 245796446, 245794415, 245795633, 245796529, 245795529, 245797383]}, "name": "F. Digital Patterns", "statement": "Anya is engaged in needlework. Today she decided to knit a scarf from\r\nsemi-transparent threads. Each thread is characterized by a single\r\ninteger the transparency coefficient.The scarf is made according to the\r\nfollowing scheme: horizontal threads with transparency coefficients a_1,\r\na_2,\r\nldots, a_n and vertical threads with transparency coefficients b_1, b_2,\r\nldots, b_m are selected. Then they are interwoven as shown in the\r\npicture below, forming a piece of fabric of size n\r\ntimes m, consisting of exactly nm nodes: After the interweaving tightens\r\nand there are no gaps between the threads, each node formed by a\r\nhorizontal thread with number i and a vertical thread with number j will\r\nturn into a cell, which we will denote as (i, j). Cell (i, j) will have\r\na transparency coefficient of a_i + b_j.The of the resulting scarf will\r\nbe the number of its sub-squares^{\r\ndagger} in which there are no pairs of neighboring^{\r\ndagger\r\ndagger} cells with the same transparency coefficients.Anya has not yet\r\ndecided which threads to use for the scarf, so you will also be given q\r\nqueries to increase/decrease the coefficients for the threads on some\r\nranges. After each query of which you need to output the interestingness\r\nof the resulting scarf.^{\r\ndagger}A sub-square of a piece of fabric is defined as the set of all\r\nits cells (i, j), such that x_0\r\nle i\r\nle x_0 + d and y_0\r\nle j\r\nle y_0 + d for some integers x_0, y_0, and d (1\r\nle x_0\r\nle n - d, 1\r\nle y_0\r\nle m - d, d\r\nge 0).^{\r\ndagger\r\ndagger}. Cells (i_1, j_1) and (i_2, j_2) are neighboring if and only if\r\n|i_1 - i_2| + |j_1 - j_2| = 1.\r\n", "solutions": ["#include<bits/stdc++.h>\n\n\nstruct segtree {\n        int n;\n        std::vector<long long> tr;\n\n        segtree() = default;\n        segtree(int n) : n(n), tr(n, 0) {}\n\n        void upd(int k, long long x) {\n                for (; k < n; k |= k + 1) tr[k] += x;\n        }\n\n        long long get(int r) {\n                long long res = 0;\n                for (; r >= 0; r &= r + 1, --r) res += tr[r];\n                        return res;\n        }\n\n        long long get(int l, int r) {\n                return get(r) - get(l - 1);\n        }\n};\n\n#define sqr(x) (x) * (x)\n\nconst int N = 3e5 + 1;\n\nint main() {\n        std::cin.tie(nullptr)->sync_with_stdio(false);\n\n        int n, m, q;\n        std::cin >> n >> m >> q;\n        segtree cntx(N), smx(N), smsqx(N), smsmx(N), smsmsmx(N), cnty(N), smy(N), smsqy(N), smsmy(N), smsmsmy(N), dx(N), dy(N);\n        long long ans = 0;\n        auto addx = [&](long long x) -> void {\n                {\n                        auto cnt = cnty.get(x + 1, N - 1);\n                        auto sm = smy.get(x + 1, N - 1);\n                        ans += x * x * sm + cnt * x * (x + 1) * (2 * x + 1) / 6 - x * (x - 1) / 2 * (x * cnt + sm + 2 * cnt) - cnt * x;\n                }\n                {\n                        auto smsq = smsqy.get(0, x);\n                        auto smsm = smsmy.get(0, x);\n                        auto smsmsm = smsmsmy.get(0, x);\n                        auto sm = smy.get(0, x);\n                        auto cnt = cnty.get(0, x);\n                        ans += smsq * x + smsmsm - x * smsm - sm;\n                }\n                cntx.upd(x, 1);\n                smx.upd(x, x);\n                smsqx.upd(x, x * x);\n                smsmx.upd(x, x * (x - 1) / 2);\n                smsmsmx.upd(x, x * (x + 1) * (2 * x + 1) / 6 - (x + 2) * x * (x - 1) / 2);\n        };\n        auto delx = [&](long long x) -> void {\n                {\n                        auto cnt = cnty.get(x + 1, N - 1);\n                        auto sm = smy.get(x + 1, N - 1);\n                        ans -= x * x * sm + cnt * x * (x + 1) * (2 * x + 1) / 6 - x * (x - 1) / 2 * (x * cnt + sm + 2 * cnt) - cnt * x;\n                }\n                {\n                        auto smsq = smsqy.get(0, x);\n                        auto smsm = smsmy.get(0, x);\n                        auto smsmsm = smsmsmy.get(0, x);\n                        auto sm = smy.get(0, x);\n                        auto cnt = cnty.get(0, x);\n                        ans -= smsq * x + smsmsm - x * smsm - sm;\n                }\n                cntx.upd(x, -1);\n                smx.upd(x, -x);\n                smsqx.upd(x, -x * x);\n                smsmx.upd(x, -x * (x - 1) / 2);\n                smsmsmx.upd(x, -x * (x + 1) * (2 * x + 1) / 6 + (x + 2) * x * (x - 1) / 2);\n        };\n        auto addy = [&](long long x) -> void {\n                {\n                        auto cnt = cntx.get(x + 1, N - 1);\n                        auto sm = smx.get(x + 1, N - 1);\n                        ans += x * x * sm + cnt * x * (x + 1) * (2 * x + 1) / 6 - x * (x - 1) / 2 * (x * cnt + sm + 2 * cnt) - cnt * x;\n                }\n                {\n                        auto smsq = smsqx.get(0, x);\n                        auto smsm = smsmx.get(0, x);\n                        auto smsmsm = smsmsmx.get(0, x);\n                        auto sm = smx.get(0, x);\n                        auto cnt = cntx.get(0, x);\n                        ans += smsq * x + smsmsm - x * smsm - sm;\n                }\n                cnty.upd(x, 1);\n                smy.upd(x, x);\n                smsqy.upd(x, x * x);\n                smsmy.upd(x, x * (x - 1) / 2);\n                smsmsmy.upd(x, x * (x + 1) * (2 * x + 1) / 6 - (x + 2) * x * (x - 1) / 2);\n        };\n        auto dely = [&](long long x) -> void {\n                {\n                        auto cnt = cntx.get(x + 1, N - 1);\n                        auto sm = smx.get(x + 1, N - 1);\n                        ans -= x * x * sm + cnt * x * (x + 1) * (2 * x + 1) / 6 - x * (x - 1) / 2 * (x * cnt + sm + 2 * cnt) - cnt * x;\n                }\n                {\n                        auto smsq = smsqx.get(0, x);\n                        auto smsm = smsmx.get(0, x);\n                        auto smsmsm = smsmsmx.get(0, x);\n                        auto sm = smx.get(0, x);\n                        auto cnt = cntx.get(0, x);\n                        ans -= smsq * x + smsmsm - x * smsm - sm;\n                }\n                cnty.upd(x, -1);\n                smy.upd(x, -x);\n                smsqy.upd(x, -x * x);\n                smsmy.upd(x, -x * (x - 1) / 2);\n                smsmsmy.upd(x, -x * (x + 1) * (2 * x + 1) / 6 + (x + 2) * x * (x - 1) / 2);\n        };\n        for (int i = 0; i < n; ++i) {\n                int x;\n                std::cin >> x;\n                dx.upd(i, x);\n                dx.upd(i + 1, -x);\n        }\n        for (int i = 0; i < m; ++i) {\n                int x;\n                std::cin >> x;\n                dy.upd(i, x);\n                dy.upd(i + 1, -x);\n        }\n        std::set<std::pair<int, int>> stx, sty;\n        int cur = 1;\n        for (int i = 1; i < n; ++i) {\n                if (dx.get(i) == dx.get(i - 1)) {\n                        addx(cur);\n                        stx.emplace(i - cur, i - 1);\n                        cur = 0;\n                }\n                cur++;\n        }\n        addx(cur);\n        stx.emplace(n - cur, n - 1);\n        auto getx = [&](int i) -> std::pair<int, int> {\n                return *prev(stx.lower_bound(std::make_pair(i, 1e9)));\n        };\n        cur = 1;\n        for (int i = 1; i < m; ++i) {\n                if (dy.get(i) == dy.get(i - 1)) {\n                        addy(cur);\n                        sty.emplace(i - cur, i - 1);\n                        cur = 0;\n                }\n                cur++;\n        }\n        addy(cur);\n        sty.emplace(m - cur, m - 1);\n        auto gety = [&](int i) -> std::pair<int, int> {\n                return *prev(sty.lower_bound(std::make_pair(i, 1e9)));\n        };\n        std::cout << ans << '\\n';\n        while (q--) {\n                int t, l, r, x;\n                std::cin >> t >> l >> r >> x;\n                --l, --r;\n                if (t == 1) {\n                        for (auto i : {l, r + 1}) {\n                                if (i > 0 && i < n && dx.get(i - 1) != dx.get(i)) {\n                                        auto ss = getx(i);\n                                        delx(ss.second - ss.first + 1);\n                                        stx.erase(ss);\n                                        addx((i - 1) - ss.first + 1);\n                                        stx.emplace(ss.first, i - 1);\n                                        addx(ss.second - i + 1);\n                                        stx.emplace(i, ss.second);\n                                }\n                        }\n                        dx.upd(l, x);\n                        dx.upd(r + 1, -x);\n                        for (auto i : {l, r + 1}) {\n                                if (i > 0 && i < n && dx.get(i - 1) != dx.get(i)) {\n                                        auto s1 = getx(i - 1);\n                                        auto s2 = getx(i);\n                                        delx(s1.second - s1.first + 1);\n                                        stx.erase(s1);\n                                        delx(s2.second - s2.first + 1);\n                                        stx.erase(s2);\n                                        addx(s2.second - s1.first + 1);\n                                        stx.emplace(s1.first, s2.second);\n                                }\n                        }\n                } else {\n                        for (auto i : {l, r + 1}) {\n                                if (i > 0 && i < m && dy.get(i - 1) != dy.get(i)) {\n                                        auto ss = gety(i);\n                                        dely(ss.second - ss.first + 1);\n                                        sty.erase(ss);\n                                        addy((i - 1) - ss.first + 1);\n                                        sty.emplace(ss.first, i - 1);\n                                        addy(ss.second - i + 1);\n                                        sty.emplace(i, ss.second);\n                                }\n                        }\n                        dy.upd(l, x);\n                        dy.upd(r + 1, -x);\n                        for (auto i : {l, r + 1}) {\n                                if (i > 0 && i < m && dy.get(i - 1) != dy.get(i)) {\n                                        auto s1 = gety(i - 1);\n                                        auto s2 = gety(i);\n                                        dely(s1.second - s1.first + 1);\n                                        sty.erase(s1);\n                                        dely(s2.second - s2.first + 1);\n                                        sty.erase(s2);\n                                        addy(s2.second - s1.first + 1);\n                                        sty.emplace(s1.first, s2.second);\n                                }\n                        }\n                }\n                std::cout << ans << '\\n';\n        }\n}"], "input": "", "output": "", "tags": ["combinatorics", "data structures", "implementation", "math"], "dificulty": "2900", "interactive": false}