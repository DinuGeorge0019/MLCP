{
    "link": "https://codeforces.com//contest/1635/problem/D",
    "problemId": "1304250",
    "problem_idx": "D",
    "shortId": "1635D",
    "contest_number": "1635",
    "problem_submissions": {
        "F": [
            147074799,
            147095752,
            147102178,
            147104275
        ],
        "E": [
            147062187,
            147069534,
            147070601,
            147071820,
            147072661,
            147071018,
            147073981,
            147068936,
            147074142,
            147080760,
            147076462,
            147075385,
            147083209,
            147071491,
            147078900,
            147071624,
            147081688,
            147079690,
            147084319
        ],
        "D": [
            147053217,
            147052386,
            147056630,
            147057231,
            147060557,
            147060631,
            147061935,
            147063792,
            147060134,
            147103502,
            147102937,
            147062678,
            147065535,
            147062609,
            147060941,
            147064885,
            147067705,
            147078835,
            147068792,
            147065392,
            147061320
        ],
        "C": [
            147045170,
            147044912,
            147046365,
            147045126,
            147049650,
            147049621,
            147048160,
            147047404,
            147047609,
            147047366,
            147047254,
            147054268,
            147048212,
            147053384,
            147048532,
            147046997,
            147047963,
            147049441,
            147044930
        ],
        "B": [
            147039520,
            147040113,
            147040251,
            147041870,
            147044628,
            147040558,
            147042641,
            147039735,
            147042175,
            147042000,
            147041459,
            147043659,
            147041936,
            147043726,
            147040154,
            147042155,
            147041291,
            147040938,
            147041038
        ],
        "A": [
            147036699,
            147037179,
            147036802,
            147037015,
            147036879,
            147036847,
            147037144,
            147036925,
            147036758,
            147037118,
            147036774,
            147037869,
            147036975,
            147036790,
            147036876,
            147036819,
            147036907,
            147037053,
            147036783
        ]
    },
    "name": "D. Infinite Set",
    "statement": "You are given an array a consisting of n positive integers.Let\u2019s\r\nconsider an infinite integer set S which contains all integers x that\r\nsatisfy at least one of the following conditions: x = a_i for some 1\r\nleq i\r\nleq n. x = 2y + 1 and y is in S. x = 4y and y is in S.For example, if a\r\n= [1,2] then the 10 smallest elements in S will be\r\n{1,2,3,4,5,7,8,9,11,12\r\n}.Find the number of elements in S that are strictly smaller than 2^p.\r\nSince this number may be too large, print it modulo 10^9 + 7.\r\n",
    "solutions": [
        "// Problem: D. Infinite Set\n// Contest: Codeforces Round #772 (Div. 2)\n// URL: https://codeforces.com/contest/1635/problem/D\n// Memory Limit: 256 MB\n// Time Limit: 2000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n//And in that light,I find deliverance.\n#include<bits/stdc++.h>\n// #pragma GCC optimize(\"Ofast\")\n// #pragma GCC optimize(\"unroll-loops\")\n// #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\nusing namespace std;\n#define int long long\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nconst int p=1e9+7;\nint qp(int x,int y)\n{\n\tint res=1;\n\tfor(int t=x; y; y>>=1,t=t*t%p) if(y&1) res=res*t%p;\n\treturn res;\n}\nint a[1000003],val[1000003];\nset<int> vis;\nint f[1000003];\nsigned main()\n{\n\tint n=read(),m=read(),ans=0;\n\tfor(int i=1; i<=n; ++i) \n\t\tval[i]=read(),vis.insert(val[i]);\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tint q=val[i];\n\t\twhile(q)\n\t\t{\n\t\t\tif(q&1) q>>=1;\n\t\t\telse if(q&2) break;\n\t\t\telse q>>=2;\n\t\t\tif(vis.find(q)!=vis.end()) \n\t\t\t{\n\t\t\t\tvis.erase(val[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i:vis)\n\t{\n\t\tint q=0;\n\t\tint t=i;\n\t\twhile(t) ++q,t>>=1;\n\t\t++a[q];\n\t}\n\tfor(int i=1; i<=m; ++i) \n\t\ta[i+1]=(a[i+1]+a[i])%p,a[i+2]=(a[i+2]+a[i])%p,ans=(ans+a[i])%p;\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "dp",
        "math",
        "matrices",
        "number theory",
        "strings"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Infinite Set.json",
    "editorial_link": "https://codeforces.com//blog/entry/100153",
    "editorial": "First of all, let\u00e2\u0080\u0099s discuss the problem where and .For every integer ,\r\nthere is exactly one integer satisfying . Let\u00e2\u0080\u0099s define .Then, it\u00e2\u0080\u0099s quite\r\neasy to find out and .This observation leads to a simple dynamic\r\nprogramming solution: let be the number of integer where and . The base\r\ncase is and the transition is .After computing the array, the final\r\nanswer will be .For the general version of the problem, in order not to\r\ncompute the same number two or more times, we need to delete all\r\n\"useless\" numbers. A number is called useless if there exists an index\r\nsuch that can generate after a series of operations (setting to or ).\r\nAfter the deletion, we can simply do the same thing above, only changing\r\nthe transition a little bit: , where = number of satisfying . The final\r\nproblem is how to find all the useless numbers. For every integer ,\r\nthere are at most possible \"parents\" that can generate it. Also, such\r\n\"parent\" must be smaller than .So, let\u00e2\u0080\u0099s sort the array in increasing\r\norder. Maintain all useful numbers in a set, and for each , we will\r\ncheck whether its \"parent\" exists or not. Once we confirm that its\r\nparent doesn\u00e2\u0080\u0099t exist, we will append it to the set of useful numbers.\r\nThis works in .Total Complexity: .\r\n"
}