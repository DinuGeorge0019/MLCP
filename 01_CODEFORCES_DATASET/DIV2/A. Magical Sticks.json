{
    "link": "https://codeforces.com//contest/1371/problem/A",
    "problemId": "658029",
    "problem_idx": "A",
    "shortId": "1371A",
    "contest_number": "1371",
    "problem_submissions": {
        "F": [
            85724126,
            85680245,
            85681350,
            85699885
        ],
        "E2": [
            85657442,
            85655168,
            85656290,
            85748587,
            85748232,
            85708674,
            85665045,
            85668857,
            85658632,
            85666166,
            85670120,
            85660293,
            85663781,
            85670954,
            85668210,
            85680055,
            85669661,
            85682351,
            85669454,
            85672846,
            85682060,
            85671106
        ],
        "E1": [
            85647787,
            85655311,
            85656202,
            85709850,
            85654362,
            85651600,
            85658237,
            85658032,
            85654262,
            85660541,
            85663528,
            85656065,
            85668083,
            85661660,
            85665638,
            85654459,
            85668563,
            85663741,
            85657234,
            85666469
        ],
        "D": [
            85643050,
            85667344,
            85644091,
            85642391,
            85641068,
            85648738,
            85648076,
            85650769,
            85650684,
            85651359,
            85649126,
            85650672,
            85644656,
            85652003,
            85647555,
            85653607,
            85654186,
            85646247,
            85653171
        ],
        "C": [
            85639893,
            85664644,
            85640509,
            85637217,
            85637662,
            85643069,
            85643313,
            85639582,
            85644962,
            85641558,
            85643750,
            85642402,
            85635916,
            85643555,
            85643224,
            85639831,
            85646794,
            85639649,
            85640565
        ],
        "B": [
            85637385,
            85659549,
            85636246,
            85634765,
            85643737,
            85638003,
            85639540,
            85641465,
            85641062,
            85638464,
            85641050,
            85638539,
            85645723,
            85639381,
            85639446,
            85646495,
            85640832,
            85636683,
            85636740
        ],
        "A": [
            85625335,
            85659712,
            85625054,
            85624966,
            85631182,
            85625230,
            85625986,
            85627166,
            85626824,
            85627013,
            85638725,
            85626600,
            85625210,
            85625324,
            85628198,
            85626246,
            85627731,
            85625426,
            85631949
        ]
    },
    "name": "A. Magical Sticks",
    "statement": "A penguin Rocher has n sticks. He has exactly one stick with length i\r\nfor all 1\r\nle i\r\nle n.He can connect some sticks. If he connects two sticks that have\r\nlengths a and b, he gets one stick with length a + b. Two sticks, that\r\nwere used in the operation disappear from his set and the new connected\r\nstick appears in his set and can be used for the next connections.He\r\nwants to create the maximum number of sticks that have the same length.\r\nIt is not necessary to make all sticks have the same length, some sticks\r\ncan have the other length. How many sticks with the equal length he can\r\ncreate?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint T, n;\nint main()\n{\n\tscanf(\"%d\", &T);\n\twhile (T--)\n\t{\n\t\tscanf(\"%d\", &n);\n\t\tprintf(\"%d\\n\", (n + 1) / 2);\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Magical Sticks.json",
    "editorial_link": "https://codeforces.com//blog/entry/79624",
    "editorial": "Output . When is even, we can create When is odd, we can create\r\nInitially, there are only stick which has length . If we connect sticks\r\nand , after that, there is a stick which has a different length from and\r\n. Then, we can create at most sticks that have the same length. The\r\nvalue is equal to .Total complexity:\r\n"
}