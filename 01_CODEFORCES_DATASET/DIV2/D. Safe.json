{"link": "https://codeforces.com//contest/47/problem/D", "problemId": "248", "problem_idx": "D", "shortId": "47D", "contest_number": "47", "problem_submissions": {"D": [214688, 214567, 214462, 214130, 214246, 214591, 214548, 214594, 215160, 214627, 214695, 277771, 214789, 214819, 214988, 214911], "C": [214531, 214800, 214769, 214564, 214632], "B": [214196, 213937, 213787, 213575, 213695, 213642, 213745, 213667, 214199, 213907, 213980, 213392, 213596, 213886, 213586, 214343], "A": [213976, 213112, 213127, 213092, 213168, 213253, 213260, 213161, 213129, 213524, 213232, 213065, 213046, 213145, 213105, 213370], "E": [215233]}, "name": "D. Safe", "statement": "Vasya tries to break in a safe. He knows that a code consists of\r\nnumbers, and every number is a 0 or a 1. Vasya has made attempts to\r\nenter the code. After each attempt the system told him in how many\r\nposition stand the right numbers. It is not said in which positions the\r\nwrong numbers stand. Vasya has been so unlucky that he hasn t entered\r\nthe code where would be more than 5 correct numbers. Now Vasya is\r\ncompletely bewildered: he thinks there s a mistake in the system and it\r\nis self-contradictory. Help Vasya calculate how many possible code\r\nvariants are left that do not contradict the previous system responses.\r\n", "solutions": ["#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <cstdlib>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iomanip>\n#include <cstdio>\n#include <vector>\n#include <bitset>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <cmath>\n#include <ctime>\n#include <list>\n#include <map>\n#include <set>\n\nusing namespace std;\n\n#define VT vector\ntypedef VT<int> VI;\ntypedef VT<VI> VVI;\ntypedef VT<string> VS;\ntypedef VT<double> VD;\ntypedef VT<VD> VVD;\n\n#define REP(i,n) for(int i=0;i<(int)(n);++i)\n#define FOR(i,a,b) for(int i=(int)a;i<=(int)b;++i)\n#define ALL(c) c.begin(),c.end()\n#define PB push_back\n#define MP make_pair\n\nchar back(const std::string& str)\n{\n\treturn str[str.size()-1];\n}\n\nint main(int argc, char* argv[])\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\", \"r\", stdin);\n#endif\n\n\tint n,m;\n\tcin >>n>>m;\n\n\tVI flaws;\n\tVS tries;\n\n\tREP(i, m)\n\t{\n\t\tstring s;\n\t\tcin >> s;\n\t\tint f;\n\t\tcin >> f;\n\n\t\ttries.push_back(s);\n\t\tflaws.push_back(f);\n\t}\n\n\tVI p(n);\n\tfor(int i = 0; i < flaws[0]; ++i)\n\t\tp[p.size()-1-i] = 1;\n\n\n\tlong long res = 0;\n\n\tdo\n\t{\n\t\tstring cypher(n, '0');\n\n\t\tREP(i, n)\n\t\t\tif (p[i])\n\t\t\t\tcypher[i] = tries[0][i];\n\t\t\telse\n\t\t\t\tcypher[i] = tries[0][i] == '0' ? '1' : '0';\n\n\t\tbool ok = true;\n\t\tFOR(i, 1, m-1)\n\t\t{\n\t\t\tint correct = 0;\n\t\t\tREP(j, n)\n\t\t\t{\n\t\t\t\tif (cypher[j] == tries[i][j])\n\t\t\t\t\tcorrect++;\n\t\t\t}\n\n\t\t\tif (correct != flaws[i])\n\t\t\t{\n\t\t\t\tok = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (ok)\n\t\t\tres++;\n\n\t}\n\twhile(next_permutation(ALL(p)));\n\n\n\tcout << res << \"\\n\";\n\n\n\n\tint temp;\n\tstd::cin >> temp;\n}\n"], "input": "", "output": "", "tags": ["brute force"], "dificulty": "2200", "interactive": false}