{"link": "https://codeforces.com//contest/358/problem/C", "problemId": "3806", "problem_idx": "C", "shortId": "358C", "contest_number": "358", "problem_submissions": {"E": [4889715, 4889265, 4888936, 4885014], "D": [4886230, 4884597, 4886065, 4886102, 4887047, 4885262, 4886058, 4889330, 4888287, 4889122, 4884736, 4887257, 4890403, 4886697, 4887096, 4889295, 4888527, 4887412, 4885636], "C": [4885109, 4886954, 4891424, 4885421, 4888165, 4889963, 4886269, 4889009, 4887295, 4888075, 4890489, 4887470, 4890195, 4890011, 4887260, 4890178, 4884373], "B": [4882466, 4881745, 4881543, 4888752, 4888613, 4882959, 4882359, 4882560, 4883488, 4883313, 4882506, 4883848, 4881903, 4883587, 4883338, 4882307, 4882280, 4890873, 4882809], "A": [4880868, 4894891, 4880938, 4889684, 4881359, 4881277, 4880937, 4881564, 4882155, 4881794, 4891559, 4881953, 4880986, 4882605, 4882019, 4881030, 4881035, 4881111, 4881523]}, "name": "C. Dima and Containers", "statement": "Dima has a birthday soon! It\u2019s a big day! Saryozha\u2019s present to Dima is\r\nthat Seryozha won\u2019t be in the room and won\u2019t disturb Dima and Inna as\r\nthey celebrate the birthday. Inna\u2019s present to Dima is a stack, a queue\r\nand a deck.Inna wants her present to show Dima how great a programmer he\r\nis. For that, she is going to give Dima commands one by one. There are\r\ntwo types of commands: Add a given number into one of containers. For\r\nthe queue and the stack, you can add elements only to the end. For the\r\ndeck, you can add elements to the beginning and to the end. Extract a\r\nnumber from each of at most three distinct containers. Tell all\r\nextracted numbers to Inna and then empty all containers. In the queue\r\ncontainer you can extract numbers only from the beginning. In the stack\r\ncontainer you can extract numbers only from the end. In the deck number\r\nyou can extract numbers from the beginning and from the end. You cannot\r\nextract numbers from empty containers. Every time Dima makes a command\r\nof the second type, Inna kisses Dima some (possibly zero) number of\r\ntimes. Dima knows Inna perfectly well, he is sure that this number\r\nequals the sum of numbers he extracts from containers during this\r\noperation.As we\u2019ve said before, Dima knows Inna perfectly well and he\r\nknows which commands Inna will give to Dima and the order of the\r\ncommands. Help Dima find the strategy that lets him give as more kisses\r\nas possible for his birthday!\r\n", "solutions": ["#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<ctime>\n#include<map>\n#include<string>\n#include<vector>\n#include<set>\n\nusing namespace std;\n#define For(i,l,r) for (int i = l; i <= r; ++i)\n#define Cor(i,l,r) for (int i = l; i >= r; --i)\n#define Fill(a,b) memset(a,b,sizeof(a))\n#define FI first\n#define SE second\n#define MP make_pair\n#define PII pair<int,int>\n#define flt double\n#define INF (0x3f3f3f3f)\n#define MaxN 1020304\n#define MaxNode 1020304\n#define MD 1000000007\n\nint n; PII cache[MaxN];\nint main() {\n    //freopen(\"input.txt\",\"r\",stdin); freopen(\"output.txt\",\"w\",stdout);\n    cin >> n;\n    int Tot = 0;\n    For(i,1,n) {\n            int t;\n        scanf(\"%d\",&t);\n        if (t) {\n            cache[++Tot] = MP(t,i);\n            continue ;\n        }\n        if (Tot <= 3) {\n            if (Tot) puts(\"pushStack\");\n            if (Tot > 1) puts(\"pushQueue\");\n            if (Tot > 2) puts(\"pushFront\");\n            printf(\"%d\",Tot);\n            if (Tot) printf(\" popStack\");\n            if (Tot > 1) printf(\" popQueue\");\n            if (Tot > 2) printf(\" popFront\");\n            puts(\"\");\n            Tot = 0;\n            continue ;\n        }\n        sort(cache + 1,cache + Tot + 1);\n        reverse(cache + 1,cache + Tot + 1);\n        For(j,1,3) swap(cache[j].FI,cache[j].SE);\n        sort(cache + 1,cache + 4);\n        int cur = 0;\n        For(j,i - Tot,i - 1) {\n            if (!cur) {\n                puts(\"pushStack\"); \n                if (j == cache[1].FI) ++cur;\n                continue ;\n            }\n            if (cur == 1) {\n                if (j == cache[2].FI) {\n                    ++cur; puts(\"pushQueue\");\n                } else {\n                    puts(\"pushBack\");\n                }\n                continue ;\n            }\n            if (cur == 2) {\n                if (j == cache[3].FI) {\n                    ++cur; puts(\"pushFront\");\n                } else {\n                    puts(\"pushQueue\");\n                }\n                continue ;\n            }\n            puts(\"pushQueue\");\n        }\n        printf(\"3 popQueue popStack popFront\\n\");\n        Tot = 0;\n    }\n    if (Tot) For(i,1,Tot) puts(\"pushStack\");\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy", "implementation"], "dificulty": "2000", "interactive": false}