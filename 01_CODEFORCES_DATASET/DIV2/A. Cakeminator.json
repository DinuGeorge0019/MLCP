{
    "link": "https://codeforces.com//contest/330/problem/A",
    "problemId": "3349",
    "problem_idx": "A",
    "shortId": "330A",
    "contest_number": "330",
    "problem_submissions": {
        "E": [
            4121855,
            4129603,
            4139778,
            4139451,
            4213008
        ],
        "D": [
            4117664,
            4117609,
            4117505,
            4117842,
            4117606,
            4117463,
            4115484,
            4117887,
            4117520,
            4117977,
            4117817,
            4117617,
            4117937,
            4117768,
            4118484,
            4119072,
            4118154,
            4117838,
            4118899
        ],
        "C": [
            4115956,
            4115187,
            4115372,
            4115604,
            4115813,
            4117683,
            4115859,
            4115396,
            4115931,
            4115861,
            4115789,
            4115557,
            4115689,
            4114734,
            4115836,
            4117100,
            4115924
        ],
        "B": [
            4114293,
            4113546,
            4113615,
            4113315,
            4113231,
            4116357,
            4113644,
            4113499,
            4114262,
            4113658,
            4113108,
            4114038,
            4113172,
            4113061,
            4113986,
            4114337,
            4113965
        ],
        "A": [
            4113132,
            4112577,
            4112734,
            4112448,
            4112410,
            4112458,
            4112430,
            4114037,
            4112918,
            4112498,
            4112396,
            4112828,
            4112414,
            4112412,
            4112843,
            4112551,
            4112821
        ]
    },
    "name": "A. Cakeminator",
    "statement": "You are given a rectangular cake, represented as an grid. Each cell\r\neither has an evil strawberry, or is empty. For example, a cake may look\r\nas follows: The cakeminator is going to eat the cake! Each time he eats,\r\nhe chooses a row or a column that does not contain any evil strawberries\r\nand contains at least one cake cell that has not been eaten before, and\r\neats all the cake cells there. He may decide to eat any number of\r\ntimes.Please output the maximum number of cake cells that the\r\ncakeminator can eat.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <memory.h>\n#define clr(u) memset(u,0,sizeof(u))\n\nint main(){\n//\tfreopen(\"a.in\",\"r\",stdin);\n\tint i,j,k;\n\tint ni,nj;\n\tchar s[15][15];\n\tscanf(\"%d%d\\n\",&ni,&nj);\n\n\tfor(i=0;i<ni;i++)scanf(\"%s\", s[i]);\n\n\tbool vis[15][15];\n\tclr(vis);\n\n\tint ans=0;\n\n\tfor(i=0;i<ni;i++){\n\t\tfor(j=0;j<nj;j++)if(s[i][j]=='S')break;\n\t\tif(j==nj){\n\t\t\tfor(j=0;j<nj;j++){\n\t\t\t\tif(!vis[i][j])ans++;\n\t\t\t\tvis[i][j]=1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(j=0;j<nj;j++){\n\t\tfor(i=0;i<ni;i++)if(s[i][j]=='S')break;\n\t\tif(i==ni){\n\t\t\tfor(i=0;i<ni;i++){\n\t\t\t\tif(!vis[i][j])ans++;\n\t\t\t\tvis[i][j]=1;\n\t\t\t}\n\t\t}\n\t}\n\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Cakeminator.json",
    "editorial_link": "https://codeforces.com//blog/entry/8417",
    "editorial": "Long solution: Short solution: If there are râ rows that cannot be\r\neaten, and câ columns that cannot be eaten, then there are râ * câ cells\r\nthat cannot be eaten â a cell such that both its row and columns cannot\r\nbe eaten. Since all other cells can be eaten, answer is R * C râ * câ.\r\n",
    "hint": []
}