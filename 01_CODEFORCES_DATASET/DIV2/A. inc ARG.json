{
    "link": "https://codeforces.com//contest/465/problem/A",
    "problemId": "13519",
    "problem_idx": "A",
    "shortId": "465A",
    "contest_number": "465",
    "problem_submissions": {
        "A": [
            7711802,
            7701020,
            7701162,
            7701215,
            7701067,
            7700923,
            7700938,
            7700998,
            7700973,
            7701012,
            7701685,
            7701159,
            7701027,
            7700987,
            7701142,
            7707761
        ],
        "B": [
            7710960,
            7702304,
            7704505,
            7702799,
            7702477,
            7701665,
            7702245,
            7703705,
            7702813,
            7701866,
            7704644,
            7703425,
            7704203,
            7702935,
            7704029,
            7708200
        ],
        "C": [
            7710335,
            7706333,
            7703312,
            7705351,
            7704980,
            7706564,
            7707092,
            7707812,
            7708661,
            7712440,
            7711616,
            7713184,
            7708012,
            7713150,
            7707559,
            7704663,
            7713529
        ],
        "D": [
            7709422,
            7712990,
            7717263,
            7711449,
            7714497,
            7710959,
            7711750,
            7710792,
            7709092,
            7709745,
            7709556,
            7712262,
            7717463,
            7717446,
            7710168,
            7710367
        ],
        "E": [
            7704010,
            7709717,
            7707403,
            7708373,
            7710918,
            7711818,
            9363741,
            7713618,
            7713248
        ]
    },
    "name": "A. inc ARG",
    "statement": "Sergey is testing a next-generation processor. Instead of bytes the\r\nprocessor works with memory cells consisting of bits. These bits are\r\nnumbered from to . An integer is stored in the cell in the following\r\nway: the least significant bit is stored in the first bit of the cell,\r\nthe next significant bit is stored in the second bit, and so on; the\r\nmost significant bit is stored in the -th bit.Now Sergey wants to test\r\nthe following instruction: \"add to the value of the cell\". As a result\r\nof the instruction, the integer that is written in the cell must be\r\nincreased by one; if some of the most significant bits of the resulting\r\nnumber do not fit into the cell, they must be discarded.Sergey wrote\r\ncertain values of the bits in the cell and is going to add one to its\r\nvalue. How many bits of the cell will change after the operation?\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <iostream>\n\n#define REP(i, a, b) for (int i = (a), _end_ = (b); i != _end_; ++i)\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mp make_pair\n#define x first\n#define y second\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int oo = 0x3f3f3f3f;\n\nconst int maxn = 100;\n\nint n;\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tscanf(\"%d\\n\", &n);\n\tint ans = 0;\n\tREP(i, 0, n)\n\t{\n\t\tstatic char x;\n\t\tscanf(\"%c\", &x);\n\t\tif (x == '0') break;\n\t\t++ans;\n\t}\n\tif (ans < n) ++ans;\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. inc ARG.json",
    "editorial_link": "https://codeforces.com//blog/entry/13694",
    "editorial": "If we add 1 to a number, its binary representation changes in a simple\r\nway: all the least significant \u00e2\u0080\u0099s change to \u00e2\u0080\u0099s, and the single following\r\nchanges to . It suffices to find the length of largest suffix which\r\ncontains only \u00e2\u0080\u0099s, suppose its length is . Then the answer is except for\r\nthe case when all the string consists of , when the answer is . It is\r\namusing that div1E problem is concerned with addition of 1 to a binary\r\ninteger as well. =)\r\n"
}