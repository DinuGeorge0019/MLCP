{"link": "https://codeforces.com//contest/381/problem/E", "problemId": "5528", "problem_idx": "E", "shortId": "381E", "contest_number": "381", "problem_submissions": {"E": [5672312, 5673890, 5672640, 5674012, 5673942, 5674064, 5674158, 5672887, 5675816, 6481132, 5673153, 5673647, 5675440, 5675508, 5675052, 5675464, 5674370, 5675251, 5675100], "C": [5670620, 5670357, 5670156, 5670230, 5670852, 5670514, 5671644, 5674896, 5670687, 5671510, 5675154, 5675589, 5672130, 5672003, 5672276, 5673101, 5671653, 5677587, 5672482, 5672754], "B": [5667383, 5667530, 5668160, 5667526, 5667221, 5667323, 5682800, 5668514, 5668603, 5667280, 5667809, 5667640, 5668168, 5667958, 5667727, 5669465, 5669171, 5672704, 5667775, 5671101], "A": [5666172, 5666328, 5667263, 5666342, 5666147, 5666449, 5680004, 5666226, 5667506, 5666221, 5666521, 5666215, 5667030, 5667212, 5666641, 5666780, 5667112, 5671987, 5666602, 5667129], "D": [5677146, 5673435, 6765447]}, "name": "E. Sereja and Brackets", "statement": "Sereja has a bracket sequence , or, in other words, a string of length ,\r\nconsisting of characters \"\" and \"\".Sereja needs to answer queries, each\r\nof them is described by two integers . The answer to the -th query is\r\nthe length of the maximum correct bracket subsequence of sequence . Help\r\nSereja answer all queries.You can find the definitions for a subsequence\r\nand a correct bracket sequence in the notes.\r\n", "solutions": ["#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<vector> \n#include<cstring>\n#include<string>\n#define mp make_pair\n#define scn second\n#define frs first\n#define pb push_back\n#define NAME \"a\"\n#define fop freopen(NAME \".in\", \"r\", stdin); freopen(NAME \".out\", \"w\", stdout); \nusing namespace std;\n\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int, int> pi;\nvoid dout() { cerr << endl; }\ntemplate <typename Head, typename... Tail>\nvoid dout(Head H, Tail... T) {\n  cerr << H << ' ';\n  dout(T...);\n}\npi f[1001000][22];\nint n, m;\nchar s[1000100];\n\n\nint main(){\n\t#ifdef LocalHost\n\t\tfop;\n\t#endif\n\tscanf(\"%s\", s);\n\tint len = strlen(s);\n\tfor (int i = 0; i < len; ++i) {\n\t\tf[i][0].frs = s[i] == ')';\n\t\tf[i][0].scn = s[i] == '(';\n\t}\n\tfor (int k = 1; k <= 20; ++k) {\n\t\tfor (int i = 0; i < len && i + (1 << (k-1)) < 1000100; ++i) {\n\t\t\tf[i][k].frs = f[i][k-1].frs + max(0, f[i + (1 << (k-1))][k-1].frs - f[i][k - 1].scn);\n\t\t\tf[i][k].scn = f[i + (1 << (k-1))][k-1].scn + max(0, -f[i + (1 << (k-1))][k-1].frs + f[i][k - 1].scn);\n\t\t}\n\t}\n\tscanf(\"%d\", &m);\n\tfor (int i = 0; i < m; ++i) {\n\t\tint l, r;\n\t    scanf(\"%d%d\", &l, &r);\n\t\t--l, --r;\n\t\tint ln = r - l + 1;\n\t\tint now = l, ba=0, bb= 0;\n\t\tfor (int k = 20; k >= 0; --k) {\n\t\t\tif (now + (1 << k) - 1 <= r) {\n\t\t\t\tbb -= f[now][k].frs;\n\t\t\t\tif (bb < 0)\n\t\t\t\t\tba += (-bb), bb = 0;\n\t\t\t\tbb += f[now][k].scn;\n\t\t\t\tnow = now + (1 << k);\n\t\t\t}\t\n\t\t}\n\t\tprintf(\"%d\\n\", ln - bb - ba);\n\t}\t\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures"], "dificulty": "2000", "interactive": false}