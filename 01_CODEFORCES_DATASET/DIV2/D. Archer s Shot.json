{"link": "https://codeforces.com//contest/78/problem/D", "problemId": "420", "problem_idx": "D", "shortId": "78D", "contest_number": "78", "problem_submissions": {"E": [412000, 412857], "B": [409412, 410003, 409464, 409485, 409229, 409391, 409709, 409646, 409243, 409557, 410163, 409775, 409340, 409369, 410560], "A": [408793, 408783, 408965, 408822, 408787, 408815, 408846, 408809, 408863, 408801, 409486, 410948, 408932, 408926, 409703], "C": [410868, 412693, 410900, 410229, 410280, 410434, 410827, 410485, 410919, 411104, 410723, 411342, 411575, 412006], "D": [411731]}, "name": "D. Archer s Shot", "statement": "A breakthrough among computer games, \"Civilization XIII\", is striking in\r\nits scale and elaborate details. Let\u2019s take a closer look at one of\r\nthem.The playing area in the game is split into congruent cells that are\r\nregular hexagons. The side of each cell is equal to 1. Each unit\r\noccupies exactly one cell of the playing field. The field can be\r\nconsidered infinite. Let\u2019s take a look at the battle unit called an\r\n\"Archer\". Each archer has a parameter \"shot range\". It\u2019s a positive\r\ninteger that determines the radius of the circle in which the archer can\r\nhit a target. The center of the circle coincides with the center of the\r\ncell in which the archer stays. A cell is considered to be under the\r\narcher s fire if and only if all points of this cell, including border\r\npoints are located inside the circle or on its border.The picture below\r\nshows the borders for shot ranges equal to , and . The archer is\r\ndepicted as . Find the number of cells that are under fire for some\r\narcher.\r\n", "solutions": ["#include <stdio.h>\n\ntypedef unsigned long long ull;\n\null n;\null s1, s2, c;\null x, y;\n\ninline ull sqr(ull x) { return x*x; }\n\nint main()\n{\n    scanf(\"%I64u\", &n);\n\n    s1 = (n-1) / 3;\n    c = -s1;\n\n    x = s1 * 3 + 2;\n    y = 0;\n    while (y*2 + 1 < x)\n    {\n        ull d = sqr(2*x - y + 1) + 3 * sqr(y+1);\n        if (d > 4 * sqr(n))\n        {\n            x--;\n            y++;\n            c += (x - 2*y + 1) / 3;\n        }\n        else\n        {\n            x+= 2;\n            y++;\n            c += (x - 2*y + 1) / 3 - 1;\n        }\n    }\n\n    s2 = y-1;\n\n    printf(\"%I64u\\n\", 1 + s1*6 + s2*6 + c*12);\n\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "geometry", "math", "two pointers"], "dificulty": "2300", "interactive": false}