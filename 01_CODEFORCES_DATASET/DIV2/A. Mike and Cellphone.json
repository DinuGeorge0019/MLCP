{"link": "https://codeforces.com//contest/689/problem/A", "problemId": "64397", "problem_idx": "A", "shortId": "689A", "contest_number": "689", "problem_submissions": {"D": [18930229, 18929436, 18930879, 18930235, 18926161, 18928733, 18925280, 18927418, 18929085, 18929212, 18929942, 18930645, 18931175, 18924428, 18930801, 18934009, 18927074, 18932083, 18931447], "E": [18927271, 18927820, 18923666, 18931272, 18929873, 18930514, 18922905, 18924072, 18931242, 18932135, 18931664, 18935299, 18933488, 18930284, 18935230, 18930474, 18929312, 18934284, 18932460], "C": [18924941, 18925234, 18926474, 18924949, 18927430, 18926086, 18927497, 18929616, 18924880, 18926717, 18932481, 18925981, 18926886, 18931951, 18926746, 18931682, 18931981, 18925951, 18922736], "B": [18923236, 18923653, 18926920, 18923889, 18924142, 18923587, 18927964, 18931269, 18923788, 18925427, 18926540, 18924110, 18924747, 18932852, 18923583, 18924738, 18930576, 18923854, 18932827], "A": [18922333, 18922086, 18921966, 18921847, 18936511, 18922920, 18935750, 18932978, 18922085, 18924781, 18922834, 18922553, 18922739, 18933881, 18922408, 18925800, 18922272, 18933705]}, "name": "A. Mike and Cellphone", "statement": "While swimming at the beach, Mike has accidentally dropped his cellphone\r\ninto the water. There was no worry as he bought a cheap replacement\r\nphone with an old-fashioned keyboard. The keyboard has only ten digital\r\nequal-sized keys, located in the following way: Together with his old\r\nphone, he lost all his contacts and now he can only remember the way his\r\nfingers moved when he put some number in. One can formally consider as a\r\nsequence of vectors connecting centers of keys pressed consecutively to\r\nput in a number. For example, the finger movements for number \"586\" are\r\nthe same as finger movements for number \"253\": Mike has already put in a\r\nnumber by his \"finger memory\" and started calling it, so he is now\r\nworrying, can he be sure that he is calling the correct number? In other\r\nwords, is there any other number, that has the same finger movements?\r\n", "solutions": ["#include <cassert>\n#include <fstream>\n#include <cstring>\n#include <queue>\n#include <algorithm>\n#include <bitset>\n#include <ctime>\n#include <set>\n#include <cmath>\n#include <iomanip>\n#include <map>\n#include <stack>\n#include <vector>\n#include <bitset>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i, a, n) for (int i = a; i <= n; ++i)\n#define ROF(i, n, a) for (int i = n; i >= a; i--)\n#define FIT(i, v) for (auto &i : v)\n#define pb push_back\n#define mp make_pair\n#define mt make_touple\n#define all(x) (x).begin(), (x).end()\n#define fi first\n#define se second\n#define sz(x) ((int)(x).size())\n#define log log2\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int mod = 1000000007;\nll powmod(ll a, ll b) {ll res=1; a %= mod; assert(b >= 0); for(; b; b >>= 1) {if (b & 1) res = res * a % mod; a = a * a % mod;} return res;}\n\nconst int N = 1010;\n\n\n\nint a[10][10];\nint n;\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"a.in\", \"r\", stdin);\n    freopen(\"a.out\", \"w\", stdout);\n#endif\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    \n    int n;\n    char s[11];\n    cin >> n;\n    cin >> (s + 1);\n    int px[] = {4, 1, 1, 1, 2, 2, 2, 3, 3, 3};\n    int py[] = {2, 1, 2, 3, 1, 2, 3, 1, 2, 3};\n    set<pair<int,int>> A;\n    FOR(i,0,9) {\n        a[px[i]][py[i]] = 1;\n    }\n    int cnt = 0;\n    FOR(j,-4,4) {\n        FOR(k,-4,4) {\n            int ok = 1;\n            FOR(i,1,n) {\n                int x = s[i] - '0';\n                int nx = px[x] + j;\n                int ny = py[x] + k;\n                if (nx >= 0 && ny >= 0 && a[nx][ny]) {\n                    ok = 1;\n                } else {\n                    ok = 0;\n                    break;\n                }\n            }\n            cnt += ok;\n        }\n    }\n    if (cnt == 1) {\n        cout << \"YES\";\n    } else {\n        cout << \"NO\";\n    }\n    return 0;\n}"], "input": "", "output": "", "tags": ["brute force", "constructive algorithms", "implementation"], "dificulty": "1400", "interactive": false}