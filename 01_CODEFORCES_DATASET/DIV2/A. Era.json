{
    "link": "https://codeforces.com//contest/1604/problem/A",
    "problemId": "1163962",
    "problem_idx": "A",
    "shortId": "1604A",
    "contest_number": "1604",
    "problem_submissions": {
        "E": [
            133665266,
            133665330,
            133659495,
            133662698,
            133665754,
            133665695,
            133667913,
            133670360,
            133670641,
            133670753,
            133676806,
            133672911,
            133673104,
            133674991,
            133676775,
            133679158,
            133677605,
            133683514,
            133682221,
            133683564
        ],
        "D": [
            133632914,
            133634675,
            133646997,
            133640774,
            133645923,
            133643402,
            133646411,
            133639935,
            133645645,
            133646807,
            133649571,
            133658060,
            133654131,
            133649231,
            133663364,
            133653039,
            133654438,
            133653052,
            133653688,
            133661097
        ],
        "C": [
            133630411,
            133638085,
            133632064,
            133625685,
            133635045,
            133633934,
            133631657,
            133625520,
            133634475,
            133635072,
            133633002,
            133634939,
            133644373,
            133640982,
            133632402,
            133642673,
            133644331,
            133633661,
            133631330,
            133642353
        ],
        "B": [
            133625396,
            133621698,
            133626014,
            133619603,
            134090905,
            133624581,
            133623770,
            133621459,
            133634337,
            133628885,
            133630875,
            133627020,
            133622232,
            133627089,
            133635361,
            133623364,
            133634078,
            133623924,
            133625391,
            133624417,
            133621609
        ],
        "A": [
            133617599,
            133618208,
            133617413,
            133617141,
            134090791,
            133617364,
            133617444,
            133617618,
            133619480,
            133619710,
            133620324,
            133618064,
            133617109,
            133626724,
            133628136,
            133617925,
            133618078,
            133619587,
            133619073,
            133618066,
            133617633
        ],
        "F": [
            133735630,
            133826813
        ]
    },
    "name": "A. Era",
    "statement": "Shohag has an integer sequence a_1, a_2,\r\nldots, a_n. He can perform the following operation any number of times\r\n(possibly, zero): Select any positive integer k (it can be different in\r\ndifferent operations). Choose any position in the sequence (possibly the\r\nbeginning or end of the sequence, or in between any two elements) and\r\ninsert k into the sequence at this position. This way, the sequence a\r\nchanges, and the next operation is performed on this changed sequence.\r\nFor example, if a=[3,3,4] and he selects k = 2, then after the operation\r\nhe can obtain one of the sequences [\r\nunderline{2},3,3,4], [3,\r\nunderline{2},3,4], [3,3,\r\nunderline{2},4], or [3,3,4,\r\nunderline{2}].Shohag wants this sequence to satisfy the following\r\ncondition: for each 1\r\nle i\r\nle |a|, a_i\r\nle i. Here, |a| denotes the size of a.Help him to find the minimum\r\nnumber of operations that he has to perform to achieve this goal. We can\r\nshow that under the constraints of the problem itâ€™s always possible to\r\nachieve this goal in a finite number of operations.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define INF 0x3f3f3f3f3f3f3f3f\nusing namespace std;\ntypedef long long ll;\ninline ll read() {\n    ll x=0,f=1;int c=getchar();\n    while(!isdigit(c)) {if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)) {x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    return x*f;\n}\nll t,n,pos,mx;\nint main(){\n    //freopen(\".in\",\"r\",stdin);\n    //freopen(\".out\",\"w\",stdout);\n    t=read();\n    while(t--){\n        n=read(),mx=0;\n        for(int i=1,x;i<=n;i++) mx=max(mx,read()-(ll)i);\n        printf(\"%lld\\n\",mx);\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Era.json",
    "editorial_link": "https://codeforces.com//blog/entry/96460",
    "editorial": "If for some position , then we need to insert at least new small\r\nelements before this position. Let . So we need at least operations. But\r\nits not hard to see that operations are enough. For example, you can\r\ninsert s at the beginning of the sequence. This way, all elements will\r\nbe shifted by positions, and consequently, will satisfy that for each\r\nvalid .\r\n",
    "hint": []
}