{
    "link": "https://codeforces.com//contest/218/problem/C",
    "problemId": "1604",
    "problem_idx": "C",
    "shortId": "218C",
    "contest_number": "218",
    "problem_submissions": {
        "A": [
            2028997,
            2030227,
            2025031,
            2023765,
            2025778,
            2023917,
            2029081,
            2023851,
            2023845,
            2024188,
            2023869,
            2024364,
            2024261,
            2023609,
            2024507,
            2024842,
            2024515,
            2024643,
            2025004,
            2024115
        ],
        "B": [
            2028813,
            2025859,
            2024728,
            2025181,
            2025174,
            2028767,
            2024807,
            2024938,
            2025059,
            2025512,
            2025303,
            2025424,
            2024591,
            2025144,
            2027115,
            2026214,
            2030523,
            2024374,
            2025288
        ],
        "D": [
            2028228,
            2028076,
            2028096,
            2028561,
            2028483,
            2028471,
            2029257,
            2029154,
            2029165,
            2029185,
            2029136,
            2029276,
            2029497,
            2029486,
            2028924,
            2029787,
            2028899
        ],
        "C": [
            2024163,
            2023867,
            2025504,
            2024348,
            2026143,
            2024315,
            2025600,
            2025742,
            2025843,
            2026651,
            2026604,
            2026297,
            2025597,
            2026207,
            2026007,
            2026046,
            2026139,
            2026389
        ],
        "E": [
            2032581,
            2031030
        ]
    },
    "name": "C. Ice Skating",
    "statement": "Bajtek is learning to skate on ice. He’s a beginner, so his only mode of\r\ntransportation is pushing off from a snow drift to the north, east,\r\nsouth or west and sliding until he lands in another snow drift. He has\r\nnoticed that in this way it’s impossible to get from some snow drifts to\r\nsome other by any sequence of moves. He now wants to heap up some\r\nadditional snow drifts, so that he can get from any snow drift to any\r\nother one. He asked you to find the minimal number of snow drifts that\r\nneed to be created.We assume that Bajtek can only heap up snow drifts at\r\ninteger coordinates.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n//#include <stdbool.h>\n#include <math.h>\n#define LL long long\n#define CLR(x) memset(x,0,sizeof(x))\n#define typec double\n#define sqr(x) ((x)*(x))\n#define abs(x) ((x)<0?(-(x)):(x))\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define PI acos(-1.0)\n#define lowbit(x) ((x)&(-(x)))\n#define lson l , m , rt << 1\n#define rson m + 1 , r , rt << 1 | 1\n#define inf 100000000\n//For C++\n#include <cctype>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <list>\n#include <iostream>\nusing namespace std;\nconst double eps=1e-10;\nint dblcmp(typec d) {\n    if (fabs(d)<eps)\n       return 0;\n    return (d>0)?1:-1;\n}\nint n,m,T;\nstruct point{\n    int x,y;\n    void input(){\n        scanf(\"%d%d\",&x,&y);\n    }\n}p[200];\nbool vis[200];\nvoid dfs(int x){\n    vis[x]=1;\n    for (int i=0;i<n;++i)\n        if (!vis[i] && (p[i].x==p[x].x || p[i].y==p[x].y))\n            dfs(i);\n}\nint main(){\n    cin>>n;\n    for (int i=0;i<n;++i){\n        p[i].input();\n    }\n    int cnt=0;\n    for (int i=0;i<n;++i){\n        if (!vis[i]){\n            ++cnt;\n            dfs(i);\n        }\n    }\n    printf(\"%d\\n\",cnt-1);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dsu",
        "graphs"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Ice Skating.json",
    "editorial_link": "https://codeforces.com//blog/entry/5285",
    "editorial": "Notice that the existence of a snow drift at the point (x,?y) implies that \"if I'm on the horizontal line at y then I am certainly able to get to the vertical line at x, and vice versa\". Thus, the snow drifts are the edges of a bipartite graph between x- and y- coordinates. The number of snow drifts that need to be added to make this (as well as the original) graph connected is the number of its connected components reduced by one.",
    "hint": []
}