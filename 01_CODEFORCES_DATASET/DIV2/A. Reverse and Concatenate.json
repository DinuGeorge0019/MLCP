{"link": "https://codeforces.com//contest/1634/problem/A", "problemId": "1285093", "problem_idx": "A", "shortId": "1634A", "contest_number": "1634", "problem_submissions": {"D": [145448060, 145421218, 145416745, 145423344, 145443205, 145427784, 145443409, 145431341, 145433882, 145423790, 145432676, 145425041, 145425515, 145428134, 145433736, 145425560, 145429012, 145409353, 145450134], "F": [145433416, 145453477, 145451269, 145460505, 145460962, 145457398, 145463150, 146209818, 145424500, 146353080, 145461554], "E": [145417696, 145430773, 145437025, 145445326, 145418577, 145442374, 145429197, 145419121, 145409285, 145435196, 145437792, 145441628, 145453390, 145439700, 145444612, 145443262, 145449756, 145425032], "C": [145412708, 145407591, 145405856, 145408804, 145405037, 145408252, 145414142, 145411742, 145412561, 145404073, 145409362, 145407564, 145408646, 145418751, 145411128, 145416814, 145410703, 145419625, 145409764], "B": [145407070, 145396453, 145401718, 145400856, 145397249, 145398450, 145410765, 145408191, 145401469, 145397310, 145403868, 145398596, 145400216, 145410152, 145399502, 145397772, 145402171, 145398736, 145404461], "A": [145397151, 145395090, 145396464, 145396099, 145395149, 145395150, 145396024, 145395848, 145396137, 145395189, 159142248, 145403722, 145395766, 145395501, 145399119, 145395603, 145395368, 145397257, 145397479]}, "name": "A. Reverse and Concatenate", "statement": "Real stupidity beats artificial intelligence every time. Terry\r\nPratchett, You are given a string s of length n and a number k. Let\u2019s\r\ndenote by rev(s) the reversed string s (i.e. rev(s) = s_n s_{n-1} ...\r\ns_1). You can apply one of the two kinds of operations to the string:\r\nreplace the string s with s + rev(s) replace the string s with rev(s) +\r\nsHow many different strings can you get as a result of performing k\r\noperations (possibly of different kinds) on the original string s?In\r\nthis statement we denoted the concatenation of strings s and t as s + t.\r\nIn other words, s + t = s_1 s_2 ... s_n t_1 t_2 ... t_m, where n and m\r\nare the lengths of strings s and t respectively.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define mp make_pair\n#define reg register\nconst int maxn=10005;\nchar buffer[maxn],*S,*T;\ninline char Get_Char(){\n    if(S==T){\n        T=(S=buffer)+fread(buffer,1,maxn,stdin);\n        if(S==T)return EOF;\n    }\n    return *S++;\n}\n\ninline int read(){\n    reg char c;\n    reg int re=0,f=0;\n    for(c=Get_Char();c<'0' or c>'9';c=Get_Char())if(c=='-')f=1;\n    for(;c>='0' and c<='9';)re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();\n    if(f)return -re;\n    return re;\n}\n\ninline void read(int&x){\n    reg char c;\n    reg int re=0,f=0;\n    for(c=Get_Char();c<'0' or c>'9';c=Get_Char())if(c=='-')f=1;\n    for(;c>='0' and c<='9';)re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();\n    if(f)x=-re;\n    else x=re;\n}\ninline void read(ll&x){\n    reg char c;\n    reg ll re=0,f=0;\n    for(c=Get_Char();c<'0' or c>'9';c=Get_Char())if(c=='-')f=1;\n    for(;c>='0' and c<='9';)re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();\n    if(f)x=-re;\n    else x=re;\n}\ninline void solve(){\n\tint n,k;string s;\n\tcin>>n>>k>>s;\n\tstring t=s;\n\treverse(t.begin(),t.end());\n\tif(t==s or k==0)cout<<1<<'\\n';\n\telse cout<<2<<'\\n';\n}\nint main(){\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0),cout.tie(0);\n\tint T=1;\n\tcin>>T;\n\tfor(;T--;)solve();\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["greedy", "strings"], "dificulty": "800", "interactive": false}