{
    "link": "https://codeforces.com//contest/1649/problem/C",
    "problemId": "1318585",
    "problem_idx": "C",
    "shortId": "1649C",
    "contest_number": "1649",
    "problem_submissions": {
        "E": [
            148570405,
            148567587,
            148573812,
            148564341,
            148576426,
            148573557,
            148575813,
            148579228,
            148575906,
            148578716,
            148579271,
            148582328,
            148662355,
            148583368,
            148578883,
            148582802,
            148585418,
            148586818,
            148585982,
            148581078,
            148612161,
            148588539
        ],
        "D": [
            148557933,
            148560820,
            148562956,
            148546618,
            148566533,
            148563719,
            148566682,
            148565430,
            148568037,
            148566184,
            148563368,
            148567438,
            148563519,
            148569228,
            148568798,
            148555841,
            148568207,
            148564278,
            148570230,
            148612195,
            148612000,
            148565213
        ],
        "C": [
            148552699,
            148553185,
            148557085,
            148565920,
            148554169,
            148559874,
            148558298,
            148559324,
            148560060,
            148552010,
            148557966,
            148557845,
            148558319,
            148563597,
            148559134,
            148551291,
            148559957,
            148557540,
            148559934,
            148557341
        ],
        "B": [
            148549340,
            148547930,
            148551996,
            148570058,
            148544445,
            148556309,
            148549430,
            148554177,
            148555299,
            148555535,
            148553000,
            148547200,
            148552578,
            148554529,
            148552354,
            148559155,
            148554077,
            149225497,
            148573979,
            148552460,
            148550780
        ],
        "A": [
            148541954,
            148570044,
            148542065,
            148571095,
            148541611,
            148544925,
            148541660,
            148544973,
            148544958,
            148558109,
            148541535,
            148542135,
            148541834,
            148556570,
            148541907,
            148561936,
            148542732,
            149225451,
            148543259,
            148541552,
            148544161
        ],
        "F": [
            148802496,
            148696109,
            148694405
        ]
    },
    "name": "C. Weird Sum",
    "statement": "Egor has a table of size n\r\ntimes m, with lines numbered from 1 to n and columns numbered from 1 to\r\nm. Each cell has a color that can be presented as an integer from 1 to\r\n10^5.Let us denote the cell that lies in the intersection of the r-th\r\nrow and the c-th column as (r, c). We define the between two cells (r_1,\r\nc_1) and (r_2, c_2) as the length of a shortest path between them where\r\neach consecutive cells in the path must have a common side. The path can\r\ngo through cells of any color. For example, in the table 3\r\ntimes 4 the manhattan distance between (1, 2) and (3, 3) is 3, one of\r\nthe shortest paths is the following: (1, 2)\r\nto (2, 2)\r\nto (2, 3)\r\nto (3, 3). Egor decided to calculate the sum of manhattan distances\r\nbetween each pair of cells of the same color. Help him to calculate this\r\nsum.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n\n#ifndef ONLINE_JUDGE\n#include \"debug.h\"\n#else\n#define deb(...) 4\n#endif\n\nint solve(vector<int>v){\n\tint n=v.size();\n\tsort(v.begin(),v.end());\n\tint sm=0;\n\tint ans=0;\n\tfor(int i=0;i<n;i++){\n\t\tans+=i*v[i]-sm;\n\t\tsm+=v[i];\n\t}\n\treturn ans;\n}\nint calc(vector<pair<int,int>>v){\n\tvector<int>x,y;\n\tfor(auto p:v){\n\t\tx.push_back(p.first);\n\t\ty.push_back(p.second);\n\t}\n\treturn solve(x)+solve(y);\n}\nsigned main()\n{\n\tios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n\n\tint n,m;\n\tcin>>n>>m;\n\tmap<int,vector<pair<int,int>>>mp;\n\tfor(int i=0;i<n;i++){\n\t\tfor(int j=0;j<m;j++){\n\t\t\tint x;\n\t\t\tcin>>x;\n\t\t\tmp[x].push_back({i,j});\n\t\t}\n\t}\n\tint ans=0;\n\tfor(auto p:mp){\n\t\tans+=calc(p.second);\n\t}\n\tcout<<ans;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math",
        "matrices"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Weird Sum.json",
    "editorial_link": "https://codeforces.com//blog/entry/100592",
    "editorial": "We note that the manhattan distance between cells (r1,c1)\n and (r2,c2)\n is equal to |r1?r2|+|c1?c2|\n. For each color we will compose a list of all cells (r0,c0),Â…,(rk?1,ck?1)\n of this color, compute the target sum for this color, and sum up the answers for all colors. The sum is equal:\n\n?i=0k?1?j=i+1k?1|ri?rj|+|ci?cj|=(?i=0k?1?j=i+1k?1|ri?rj|)+(?i=0k?1?j=i+1k?1|ci?cj|)\n\nWe will compute the first sum, the second sum is analogous. Let an array s\n be equal to r\n, but sorted in increasing order. Then:\n\n?i=0k?1?j=i+1k?1|ri?rj|=?i=0k?1?j=i+1k?1sj?si=(?i=0k?1?j=i+1k?1sj)+(?i=0k?1?j=i+1k?1?si)\n\nThe value sj\n occurs in the first double sum exactly j\n times, the value ?si\n occurs in the second sum exactly k?1?i\n times. Then, the value is equal to:\n\n?j=0k?1jsj+?i=0k?1?(k?1?i)si=?i=0k?1(2i+1?k)si\n\nThe last sum can be computed in O(k)\n, the time complexity to sort an array is O(klogk)\n. The overall complexity is O(nmlog(nm))\n. We can also sort arrays of coordinates by adding cells to lists in the right order. This yields an O(nm)\n solution.",
    "hint": []
}