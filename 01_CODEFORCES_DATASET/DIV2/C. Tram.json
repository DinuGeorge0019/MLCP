{
    "link": "https://codeforces.com//contest/746/problem/C",
    "problemId": "85371",
    "problem_idx": "C",
    "shortId": "746C",
    "contest_number": "746",
    "problem_submissions": {
        "F": [
            23098160,
            23101734,
            23098656,
            23102651,
            23103415,
            23107961,
            23097485,
            23103112,
            23103543,
            23134726,
            23104852,
            23131476
        ],
        "G": [
            23093374,
            23095345,
            23096484,
            23099554,
            23094331,
            23098793,
            32644514,
            23097257,
            23097589,
            23088737,
            23098418,
            23099935,
            23101255,
            23098493,
            23095437,
            23098070,
            23097715,
            23102940,
            23099714,
            23102329,
            23100307
        ],
        "E": [
            23090983,
            23091838,
            23090400,
            23090385,
            23091224,
            23095595,
            23092637,
            23090974,
            23092694,
            23093218,
            23092131,
            23090847,
            23094473,
            23098598,
            23094014,
            23142601,
            23096689,
            23092749,
            23095909,
            23093965,
            23096216
        ],
        "C": [
            23089009,
            23086489,
            23093136,
            23087647,
            23090881,
            23086795,
            23086617,
            23094723,
            23086814,
            23087320,
            23089539,
            23108446,
            23092756,
            23088603,
            23090345,
            23087808,
            23091627
        ],
        "D": [
            23086805,
            23088293,
            23086244,
            23094627,
            23088889,
            23093685,
            23088867,
            23088313,
            23096227,
            23088723,
            23089318,
            23104824,
            23090867,
            23090879,
            23091937,
            23088754,
            23089647,
            23091296,
            23088886,
            23089358
        ],
        "B": [
            23084224,
            23084449,
            23084370,
            23084955,
            23085227,
            23087278,
            23084159,
            23084283,
            23090451,
            23083745,
            23084649,
            23085347,
            23084771,
            23089523,
            23085956,
            23085476,
            23085206,
            23084905,
            23085967
        ],
        "A": [
            23082169,
            23082385,
            23081947,
            23082691,
            23082163,
            23085385,
            23081965,
            23082429,
            23082420,
            23082009,
            23082118,
            23082810,
            23086953,
            23088467,
            23082662,
            23082884,
            23082308,
            23082652,
            23082888
        ]
    },
    "name": "C. Tram",
    "statement": "The tram in Berland goes along a straight line from the point to the\r\npoint and back, passing meter per seconds in both directions. It means\r\nthat the tram is always in the state of uniform rectilinear motion,\r\ninstantly turning around at points and .Igor is at the point . He should\r\nreach the point . Igor passes meter per seconds. Your task is to\r\ndetermine the minimum time Igor needs to get from the point to the point\r\n, if it is known where the tram is and in what direction it goes at the\r\nmoment Igor comes to the point .Igor can enter the tram unlimited number\r\nof times at any moment when his and the tram\u2019s positions coincide. It is\r\nthat points in which Igor enter and exit the tram are integers. Assume\r\nthat any boarding and unboarding happens instantly. Igor can move\r\narbitrary along the line (but not faster than meter per seconds). He can\r\nalso stand at some point for some time.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define ld long double\n#define N ((ll)301*1000)\n#define INF ((ll)2e9)\n#define MOD ((ll)1e9+7)\nll tavan(ll x,ll y){ll res=1;while(y){res*=y%2?x:1;res%=MOD;x*=x;x%=MOD;y/=2;}return res;}\n\nll t1,t2,s;\n\npair<ll,ll> calc(ll p,ll x1,ll d)\n{\n\tll first;\n\tif((x1>=p && d==1) || (x1<=p && d==-1))first=abs(x1-p)*t1;\n    else\n    {\n    \tif(d==-1)first=p*t1+x1*t1,d=1;\n    \telse first=(s-p)*t1+(s-x1)*t1,d=-1;\n\t}\n\treturn {first,d};\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(0);cin.tie(0);\n    ll x1,x2,p,d;\n    cin>>s>>x1>>x2;\n    cin>>t1>>t2;\n    cin>>p>>d;\n    ll ans=abs(x1-x2)*t2;\n    ll first=calc(p,x1,d).first;\n    d=calc(p,x1,d).second;\n\tll second=calc(x1,x2,d).first;\n\tcout<<min(ans,first+second);\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Tram.json",
    "editorial_link": "https://codeforces.com//blog/entry/49160",
    "editorial": "It is easy to show that if Igor faster than the tram the answer is . In\r\nthe other case we need to use the following hint: the time of arrive\r\ndoes not depend on how much Igor walk before enter the tram, if the tram\r\nwill reach the finish point faster than Igor. So Igor can wait the tram\r\nin the point .The answer is minimum of the following values: the time\r\nduring which Igor will reach the point by foot and the time during which\r\nthe tram will reach at first the point and than the point .\r\n"
}