{"link": "https://codeforces.com//contest/1700/problem/A", "problemId": "1433682", "problem_idx": "A", "shortId": "1700A", "contest_number": "1700", "problem_submissions": {"F": [161204184, 161175037, 161206125, 161212939, 161208920, 161208613, 161221499, 161209546], "E": [161198687, 161196286, 161355967, 161718414, 161625123, 161210058, 161186427, 161205675, 161211460, 161212251, 161209815, 161226432, 161215179, 161212687, 161209759, 161208133, 161212427], "D": [161181899, 161187142, 161172748, 161191235, 161182477, 161193166, 161184771, 161194388, 161383056, 161196489, 161188119, 161188891, 161183798, 161190373, 161201766, 161189358, 161191653, 161196390, 161376237, 161189700, 161191427], "C": [161179311, 161183541, 161180380, 161184212, 161718390, 161184885, 161181511, 161178526, 161188654, 161193034, 161183225, 161183002, 161175389, 161193124, 161191878, 161177816, 161183179, 161187003, 161183522, 161177845], "B": [161174411, 161180612, 161180415, 161180363, 161174680, 161179087, 161174700, 161180026, 161190959, 161175925, 161173974, 161173339, 161174147, 161181560, 161181382, 161172925, 161174110], "A": [161167944, 161176736, 161168168, 161168440, 161176515, 161168925, 161168213, 161168654, 161187609, 161168766, 161168663, 161168483, 161168047, 161169513, 161168007, 161168296, 161173279, 161168814, 161167994]}, "name": "A. Optimal Path", "statement": "You are given a table a of size n\r\ntimes m. We will consider the table rows numbered from top to bottom\r\nfrom 1 to n, and the columns numbered from left to right from 1 to m. We\r\nwill denote a cell that is in the i-th row and in the j-th column as (i,\r\nj). In the cell (i, j) there is written a number (i - 1)\r\ncdot m + j, that is a_{ij} = (i - 1)\r\ncdot m + j.A turtle initially stands in the cell (1, 1) and it wants to\r\ncome to the cell (n, m). From the cell (i, j) it can in one step go to\r\none of the cells (i + 1, j) or (i, j + 1), if it exists. A path is a\r\nsequence of cells in which for every two adjacent in the sequence cells\r\nthe following satisfies: the turtle can reach from the first cell to the\r\nsecond cell in one step. A cost of a path is the sum of numbers that are\r\nwritten in the cells of the path. For example, with n = 2 and m = 3 the\r\ntable will look as shown above. The turtle can take the following path:\r\n(1, 1)\r\nrightarrow (1, 2)\r\nrightarrow (1, 3)\r\nrightarrow (2, 3). The cost of such way is equal to a_{11} + a_{12} +\r\na_{13} + a_{23} = 12. On the other hand, the paths (1, 1)\r\nrightarrow (1, 2)\r\nrightarrow (2, 2)\r\nrightarrow (2, 1) and (1, 1)\r\nrightarrow (1, 3) are incorrect, because in the first path the turtle\r\ncan\u2019t make a step (2, 2)\r\nrightarrow (2, 1), and in the second path it can\u2019t make a step (1, 1)\r\nrightarrow (1, 3).You are asked to tell the turtle a minimal possible\r\ncost of a path from the cell (1, 1) to the cell (n, m). Please note that\r\nthe cells (1, 1) and (n, m) are a part of the way.\r\n", "solutions": ["/*\n\n_/      _/       _/_/_/      _/      _/    _/           _/_/_/_/_/\n _/    _/      _/      _/     _/    _/     _/           _/\n  _/  _/      _/               _/  _/      _/           _/\n   _/_/       _/                 _/        _/           _/_/_/_/\n  _/  _/      _/                 _/        _/           _/\n _/    _/      _/      _/        _/        _/           _/\n_/      _/       _/_/_/          _/        _/_/_/_/_/   _/_/_/_/_/\n\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define lc(x) ((x) << 1)\n#define rc(x) ((x) << 1 | 1)\n#define ru(i, l, r) for (int i = (l); i <= (r); i++)\n#define rd(i, r, l) for (int i = (r); i >= (l); i--)\n#define mid ((l + r) >> 1)\nusing namespace std;\ninline int read()\n{\n\tint x = 0, w = 0; char ch = getchar();\n\twhile(!isdigit(ch)) {w |= ch == '-'; ch = getchar();}\n\twhile(isdigit(ch)) {x = x * 10 + ch - '0'; ch = getchar();}\n\treturn w ? -x : x;\n}\nvoid solve()\n{\n\tint n = read(), m = read();\n\tprintf(\"%lld\\n\", (ll)m * (m - 1) / 2 + (ll)m * n * (n + 1) / 2);\n}\nint main()\n{\n\tint T = read(); while(T--) solve(); \n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy", "math"], "dificulty": "800", "interactive": false}