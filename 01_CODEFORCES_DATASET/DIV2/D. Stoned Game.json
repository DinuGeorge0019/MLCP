{
    "link": "https://codeforces.com//contest/1397/problem/D",
    "problemId": "712382",
    "problem_idx": "D",
    "shortId": "1397D",
    "contest_number": "1397",
    "problem_submissions": {
        "E": [
            91394076,
            91394865,
            91408844,
            91416677,
            91414871,
            91407127,
            91402357,
            91407934,
            91417811,
            91413475,
            91412250,
            91419091,
            91378476,
            91418930,
            91419994,
            91417519,
            91458404,
            91417294,
            91409334
        ],
        "D": [
            91372186,
            91372582,
            91379493,
            91372345,
            91376314,
            91383935,
            91383522,
            91392204,
            91382650,
            91385007,
            91393978,
            91368671,
            91385270,
            91368010,
            91395370,
            91397954,
            91372182
        ],
        "C": [
            91363525,
            91369524,
            91374646,
            91368197,
            91364426,
            91371771,
            91377426,
            91373604,
            91367966,
            91376255,
            91377856,
            91409632,
            91401708,
            91394202,
            91379664,
            91386652,
            91367805,
            91370718
        ],
        "B": [
            91361168,
            91362660,
            91362581,
            91360878,
            91374582,
            91380823,
            91370909,
            91365176,
            91359546,
            91369350,
            91367433,
            91374994,
            91454186,
            91372042,
            91383116,
            91365692,
            103511310,
            91389732,
            91359483,
            91364179
        ],
        "A": [
            91350972,
            91351778,
            91350895,
            91353022,
            91367161,
            91353583,
            91358678,
            91362352,
            91350856,
            91360209,
            91369795,
            91350959,
            91386649,
            91455005,
            91454161,
            91357607,
            91352696,
            91350850,
            91354043,
            91352491,
            91360679
        ]
    },
    "name": "D. Stoned Game",
    "statement": "T is playing a game with his friend, HL.There are n piles of stones, the\r\ni-th pile initially has a_i stones. T and HL will take alternating\r\nturns, with T going first. In each turn, a player chooses a non-empty\r\npile and then removes a single stone from it. However, one cannot choose\r\na pile that has been chosen in the previous turn (the pile that was\r\nchosen by the other player, or if the current turn is the first turn\r\nthen the player can choose any non-empty pile). The player who cannot\r\nchoose a pile in his turn loses, and the game ends.Assuming both players\r\nplay optimally, given the starting configuration of t games, determine\r\nthe winner of each game.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n\nint N;\nint arr[101010];\n\nint main()\n{\n    int T; cin >> T;\n    while(T--)\n    {\n        int N; cin >> N;\n        int s = 0;\n        for(int i=0; i<N; ++i)\n        {\n            cin >> arr[i]; s += arr[i];\n        }\n        int m = *max_element(arr, arr+N);\n        s -= m;\n        if(m > s) puts(\"T\");\n        else if(m <= s && m%2 == s%2) puts(\"HL\");\n        else puts(\"T\");\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "games",
        "greedy",
        "implementation"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Stoned Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/82142",
    "editorial": "Let us denote S\n as the current total number of stones.\n\nConsider the following cases:\n\nCase A: There is a pile that has more than ?S2?\n stones.\n\nThe first player (T) can always choose from this pile, thus he (T) is the winner.\n\nCase B: Every pile has at most ?S2?\n stones, and S\n is even.\n\nIt can be proven that the second player (HL) always wins.\n\nProof 1\nProof 2\nCase C: Every pile has at most ?S2?\n stones, and S\n is odd.\n\nThe first player (T) can choose from any pile, and we arrive back at case B where the next player to move loses.\n\nSo the first player (T) wins if and only if there is a pile that has more than ?S2?\n stones or S\n is odd. This can be easily checked in O(n)\n."
}