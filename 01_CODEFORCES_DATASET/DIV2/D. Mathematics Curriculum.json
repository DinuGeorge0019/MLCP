{
    "link": "https://codeforces.com//contest/1581/problem/D",
    "problemId": "1125261",
    "problem_idx": "D",
    "shortId": "1581D",
    "contest_number": "1581",
    "problem_submissions": {
        "E": [
            130358132,
            130358184,
            130357795,
            130357396,
            130363906,
            130366616,
            130380883,
            130364377,
            130368000,
            130362620,
            130366569,
            130368794,
            130369661,
            130369712,
            130368935,
            130369593
        ],
        "C": [
            130344859,
            130342831,
            130347382,
            130345373,
            130344614,
            130353134,
            130351174,
            130350702,
            130351743,
            130352941,
            130352739,
            130356445,
            130357169,
            130351772,
            130355715,
            130362975,
            130356919,
            130369384,
            130361864
        ],
        "B": [
            130340369,
            130340723,
            130340571,
            130339802,
            130369559,
            130359629,
            130340447,
            130931058,
            130343832,
            130341175,
            130342532,
            130359618,
            130341192,
            130359579,
            130352120,
            130344927,
            130346716,
            130361490
        ],
        "A": [
            130338529,
            130338446,
            130338430,
            130342422,
            130338506,
            130341004,
            130338410,
            130340505,
            130339368,
            130338352,
            130339712,
            130339153,
            130338540,
            130338470,
            130338894,
            130339891,
            130340851,
            130340222,
            130339139
        ],
        "D": [
            130369924,
            130441595,
            130369549,
            130356147
        ],
        "F": [
            130356873,
            130360044,
            130368525,
            130369827,
            130370044
        ]
    },
    "name": "D. Mathematics Curriculum",
    "statement": "Let c_1, c_2,\r\nldots, c_n be a permutation of integers 1, 2,\r\nldots, n. Consider all subsegments of this permutation containing an\r\ninteger x. Given an integer m, we call the integer x if there are\r\nexactly m different values of maximum on these subsegments.Cirno is\r\nstudying mathematics, and the teacher asks her to count the number of\r\npermutations of length n with exactly k numbers.Unfortunately, Cirno\r\nisn’t good at mathematics, and she can’t answer this question.\r\nTherefore, she asks you for help.Since the answer may be very big, you\r\nonly need to tell her the number of permutations modulo p.A permutation\r\nis an array consisting of n distinct integers from 1 to n in arbitrary\r\norder. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a\r\npermutation (2 appears twice in the array) and [1,3,4] is also not a\r\npermutation (n=3 but there is 4 in the array).A sequence a is a\r\nsubsegment of a sequence b if a can be obtained from b by deletion of\r\nseveral (possibly, zero or all) elements from the beginning and several\r\n(possibly, zero or all) elements from the end.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>//{{{\nusing namespace std;typedef long long ll;\ntemplate<typename T>inline void read(T &x)\n{\n    x=0;char c=getchar(),f=0;\n    for(;c<48||c>57;c=getchar()) if(!(c^45)) f=1;\n    for(;c>=48&&c<=57;c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n    f?x=-x:x;\n}\ntemplate<typename T,typename...L>inline void read(T &x,L&...l) {read(x),read(l...);}/*}}}*/\n#pragma GCC optimize(\"Ofast,no-stack-protector,unroll-loops,fast-math\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native\")\nint n,m,K,P,vl[105],C[105][105],dp[105][105][105];\ninline int solve(int n,int d,int w)\n{\n\tif(2*w-1>n) return 0;\n\tif(n==0) return w==0;\n\tif(n==1) return (d==1&&w==1)||(d!=1&&w==0);\n\tif(d==1) return w==1?vl[n]:0;\n\tint &rs=dp[n][d][w];if(~rs) return rs;else rs=0;\n\tfor(int i=0;i<n;i++) for(int x=0;x<=w;x++)\n\t\trs=(rs+1ll*solve(i,d-1,x)*solve(n-i-1,d-1,w-x)%P*C[n-1][i])%P;\n\treturn rs;\n}\nint main()\n{\n\tread(n,m,K,P),memset(dp,-1,sizeof(dp));\n\tfor(int i=0;i<=n;i++) {C[i][0]=1;for(int j=1;j<=i;j++) C[i][j]=(C[i-1][j]+C[i-1][j-1])%P;}\n\tvl[0]=1,vl[1]=1;for(int i=2;i<=n;i++) for(int l=0;l<i;l++) vl[i]=(vl[i]+1ll*vl[l]*vl[i-l-1]%P*C[i-1][l])%P;\n\treturn printf(\"%d\\n\",solve(n,m,K)),0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Mathematics Curriculum.json",
    "editorial_link": "https://codeforces.com//blog/entry/95477",
    "editorial": "Define the dp state fl,s,d\n as the number of the permutaion length of l\n with exactly d\n such numbers that all the subsegments containing them have exactly s\n different maxima in total. We enumerate the position of the bigest number in the permutaion. We call the position is a\n. The numbers before a\n and after a\n are independent. Then we transform the statement (l,s,d)\n to (a?1,x,d+1)\n and (l?a,y,d+1)\n. We also have to distribute the numbers to two parts, so the dp transformation is:\n\nfl,s,d=?la=1(l?1a?1)?sx=0fa?1,x,d+1fl?a,s?x?[d=k],d+1\n\nIn addition, the answer of the problem is fn,m,k\n. Actually, the dp proccess is just like a cartesian tree. The time complexity is O(n2m2k)\n, space complexity is O(nmk)\n. However, it's enough to pass the tests.",
    "hint": []
}