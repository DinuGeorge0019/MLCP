{
    "link": "https://codeforces.com//contest/485/problem/A",
    "problemId": "16623",
    "problem_idx": "A",
    "shortId": "485A",
    "contest_number": "485",
    "problem_submissions": {
        "D": [
            8565004,
            8569786,
            8572411,
            8571355,
            8572385,
            8574062,
            8588637,
            8588630,
            8571073,
            8566483,
            8574364,
            8571883,
            8570649,
            8574392,
            8567322,
            8571083,
            8574328,
            8576860,
            8575741,
            8574418,
            8587245,
            8569450,
            8568376
        ],
        "C": [
            8563871,
            8567717,
            8566352,
            8565087,
            8564516,
            8566585,
            8569800,
            8573286,
            8585003,
            8572983,
            8570718,
            8579017,
            8572835,
            8569512,
            8563562,
            8574652,
            8572953,
            8568996,
            8572297,
            8564367,
            8573326,
            8581963
        ],
        "A": [
            8560393,
            8561369,
            8561216,
            8560800,
            8560622,
            8560703,
            8561171,
            8570241,
            8560790,
            8565662,
            8563691,
            8562866,
            8560513,
            8560683,
            8567508,
            8560437,
            8560375,
            8560739
        ],
        "B": [
            8564890,
            8563705,
            8566333,
            8561886,
            8562421,
            8560640,
            8576051,
            8562547,
            8567073,
            8566078,
            8566327,
            8562571,
            8562460,
            8562147,
            8562077,
            8561885,
            8564575,
            8581990
        ]
    },
    "name": "A. Factory",
    "statement": "One industrial factory is reforming working plan. The director suggested\r\nto set a mythical detail production norm. If at the beginning of the day\r\nthere were details in the factory storage, then by the end of the day\r\nthe factory has to produce (remainder after dividing by ) more details.\r\nUnfortunately, no customer has ever bought any mythical detail, so all\r\nthe details produced stay on the factory. The board of directors are\r\nworried that the production by the given plan may eventually stop (that\r\nmeans that there will be moment when the current number of details on\r\nthe factory is divisible by ). Given the number of details on the first\r\nday and number check if the production stops at some moment.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <cstdlib>\n\n#define rep(a,b,c) for(int a=b;a<=c;++a)\n#define per(a,b,c) for(int a=b;a>=c;--a)\n#define mp make_pair\n#define PII pair<int,int>\n#define PDD pair<double,double>\n#define min(a,b) (((a)<(b))?(a):(b))\n#define max(a,b) (((a)>(b))?(a):(b))\n#define X first\n#define Y second\n#define PI 3.141592653589793\n\nusing namespace std;\n\ntypedef long long ll;\n\ninline int gcd(int x,int y){\n\tfor\t(int t;y;t=x%y,x=y,y=t);\n\treturn\tx;\n}\n\ninline ll gcd(ll x,ll y){\n\tfor\t(ll t;y;t=x%y,x=y,y=t);\n\treturn\tx;\n}\n\ninline void read(int &x){\n\tchar cc=getchar();\n\twhile\t(cc<'0' || cc>'9')\tcc=getchar();\n\tx=0;\n\twhile\t(cc>='0' && cc<='9'){\n\t\tx=x*10+cc-'0';\n\t\tcc=getchar();\n\t}\n}\n\nint vis[100010];\n\nint main(){\n\tmemset(vis,0,sizeof vis);\n\tint a,m;\n\tscanf(\"%d %d\",&a,&m);\n\twhile\t(1){\n\t\tif\t(a==0){\n\t\t\tputs(\"Yes\");\n\t\t\treturn\t0;\n\t\t}\n\t\tif\t(vis[a]){\n\t\t\tputs(\"No\");\n\t\t\treturn\t0;\n\t\t}\n\t\tvis[a]=1;\n\t\ta=(a+a%m)%m;\n\t}\n\treturn\t0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math",
        "matrices"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Factory.json",
    "editorial_link": "https://codeforces.com//blog/entry/14592",
    "editorial": "Production will stops iff exists integer such is divisible by . From\r\nthis fact follows that maximum will be about . So if we modeling some,\r\nfor example, 20 days and production does not stop, then it will never\r\nstop and answer is \"No\". Otherwise answer is \"Yes\".\r\n"
}