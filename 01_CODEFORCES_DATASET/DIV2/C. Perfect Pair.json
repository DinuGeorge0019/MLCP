{
    "link": "https://codeforces.com//contest/318/problem/C",
    "problemId": "3163",
    "problem_idx": "C",
    "shortId": "318C",
    "contest_number": "318",
    "problem_submissions": {
        "D": [
            3889771,
            3891598,
            3890931,
            3895120,
            3889991,
            3892582,
            3894118,
            3895024,
            3894070,
            3893665,
            3894800,
            3895558,
            3894762,
            3894398,
            3891169
        ],
        "C": [
            3886193,
            3886712,
            3888993,
            3887980,
            3890359,
            3888216,
            3888258,
            3890410,
            4099870,
            3891425,
            3888553,
            3888908,
            3889856,
            3895067
        ],
        "B": [
            3885067,
            3886676,
            3887330,
            3885863,
            3887527,
            3886640,
            3886280,
            3886107,
            3888159,
            4094214,
            4094197,
            3886069,
            3886337,
            3887281,
            3887448,
            3886826
        ],
        "A": [
            3883842,
            3885636,
            3884050,
            3884161,
            3887877,
            3884428,
            3884162,
            3884552,
            3885363,
            4093985,
            3884118,
            3885191,
            3884387,
            3884475,
            3883975
        ]
    },
    "name": "C. Perfect Pair",
    "statement": "Let us call a pair of integer numbers , if at least one number in the\r\npair is greater than or equal to . Thus, the pairs (3, 3) and (0, 2) are\r\n2-perfect while the pair (-1, 1) is not.Two integers , are written on\r\nthe blackboard. It is allowed to erase one of them and replace it with\r\nthe sum of the numbers, .What is the minimum number of such operations\r\none has to perform in order to make the given pair of integers -perfect?\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nint main()\n{\n\tlong long n,m,r;\n\tcin >> n >> m >> r;\n\tlong long ans = 0;\n\tif(max(n,m) >= r) {\n\t\tprintf(\"0\\n\");\n\t\treturn 0;\n\t}\n\tif(n <= 0 && m <= 0) {\n\t\tprintf(\"-1\\n\");\n\t\treturn 0;\n\t}\n\tif(n > m) swap(n,m);\n\tif(n < 0) {\n\t\tans += (-n) / m;\n\t\tn += ans * m;\n\t}\n\twhile(max(n,m) < r) {\n\t\tans ++;\n\t\tif(n > m) swap(n,m);\n\t\tn += m;\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Perfect Pair.json",
    "editorial_link": "https://codeforces.com/blog/entry/7956",
    "editorial": "This problem were more about accuracy then about ideas or coding. It is\r\nimportant to not forget any cases here. On each step we replace one of\r\nthe numbers , by their sum until the pair becomes -perfect (id est one\r\nof them becomes not lesser than ). It is clear that one sould replace\r\nlesser number from the pair , . Indeed lets say the pair dominates the\r\npair , if and . In this case if one can get -perfect pair from , by\r\ncertain sequence of actions, then one can get -perfect pair from , by\r\nthe same or shorter sequence of actions. If , then the pair , dominates\r\nthe pair , . Hence path from , to -perfect is not longer than from , ,\r\nand we may assume that we choose exactly this pair. Consider following\r\ncases: , In this case our numbers do not increase in the process. Hence\r\neither the pair is alredy -perfect or it will never be. and In this case\r\nfor each pair will after several steps become -perfect. To count precise\r\nnumber of those steps one needs to launch emulation. If and , then pair\r\n\"grows exponentionaly>> (more formally: easy to show that starting from\r\nsecnd step sum grows in at least times each step) and emulation works\r\npretty fast. However in the case and (or vice versa) pair might change\r\nvery slowly. Most bright example is , . Thus one needs to count number\r\nof steps until both numbers becomes positive before launching\r\nemulationt. For and number of those steps is exactly .\r\n"
}