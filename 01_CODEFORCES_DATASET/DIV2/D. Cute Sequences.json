{
    "link": "https://codeforces.com//contest/1166/problem/D",
    "problemId": "345553",
    "problem_idx": "D",
    "shortId": "1166D",
    "contest_number": "1166",
    "problem_submissions": {
        "F": [
            54316652,
            54307224,
            54305584,
            54310646,
            54378086,
            54313232,
            54308575
        ],
        "E": [
            54298891,
            54300156,
            54304094,
            54294518,
            54300338,
            54303194,
            54301468,
            54302857,
            54297877,
            54295582,
            54302504,
            54299216,
            54297435,
            54297855,
            54304772,
            54304820,
            54295745,
            54296534
        ],
        "D": [
            54296262,
            54291838,
            54301051,
            54302058,
            54297357,
            54294897,
            54294795,
            54298322,
            54305898,
            54305908,
            54298392,
            54300155,
            54304713,
            54305703,
            54307005,
            54301062,
            54300346,
            54307391,
            54309804
        ],
        "C": [
            54289104,
            54297291,
            54291974,
            54290534,
            54287551,
            54289613,
            54287736,
            54292153,
            54290078,
            54292325,
            54290260,
            54291592,
            54291908,
            54293597,
            54292202,
            54290296,
            54292002,
            54299709,
            54289976
        ],
        "B": [
            54286717,
            54295090,
            54286733,
            54287427,
            54290240,
            54285781,
            54285576,
            54288042,
            54287483,
            54286749,
            54287663,
            54286685,
            54286479,
            54286327,
            54288426,
            54286838,
            54288503,
            54286890,
            54287732
        ],
        "A": [
            54284453,
            54292968,
            54284797,
            54284966,
            54291534,
            54284478,
            54284450,
            54284940,
            54284548,
            54284402,
            54284377,
            54284696,
            54284645,
            54284386,
            54285929,
            54284902,
            54285432,
            54284438,
            54284725
        ]
    },
    "name": "D. Cute Sequences",
    "statement": "Given a positive integer m, we say that a sequence x_1, x_2,\r\ndots, x_n of positive integers is m-cute if for every index i such that\r\n2\r\nle i\r\nle n it holds that x_i = x_{i - 1} + x_{i - 2} +\r\ndots + x_1 + r_i for some positive integer r_i satisfying 1\r\nle r_i\r\nle m.You will be given q queries consisting of three positive integers\r\na, b and m. For each query you must determine whether or not there\r\nexists an m-cute sequence whose first term is a and whose last term is\r\nb. If such a sequence exists, you must additionally find an example of\r\nit.\r\n",
    "solutions": [
        "#pragma GCC optimize(\"Ofast\")\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define y0 holdtheflower\n#define y1 enjoythecolorandscent\n#define yn walkthroughthesoulgarden\n#define j1 feelthewarmbreathofkindnessandsalvation\n\n#define endl '\\n'\nmt19937 rng32(chrono::steady_clock::now().time_since_epoch().count());\nmt19937_64 rng64(chrono::steady_clock::now().time_since_epoch().count());\n\nlong long a, b, m;\n\nvoid Input() {\n\tcin >> a >> b >> m;\n}\n\nvoid Solve() {\n\tif (a == b) {cout << \"1 \" << a << endl; return;}\n\tvector<long long> Min, Max;\n\tMin.push_back(a); Max.push_back(a);\n\tint siz = 1;\n\tfor (; siz <= 50; siz++) {\n\t\tif (siz == 50) {siz++; break;}\n\t\tlong long Mn = 1, Mx = m;\n\t\tfor (int x = 0; x < siz; x++) {\n\t\t\tMn += Min[x]; Mx += Max[x];\n\t\t}\n\t\tMin.push_back(Mn); Max.push_back(Mx);\n\t\tif (Mn > b) {cout << \"-1\\n\"; return;}\n\t\tif (Mn <= b && b <= Mx) {siz++; break;}\n\t}\n\tif (siz > 50) {cout << \"-1\\n\"; return;}\n\tlong long curr = Min.back();\n\tvector<long long> Weight(siz, 1), coef(siz, 1);\n\tfor (int i=2; i<siz; i++) Weight[i] = Weight[i-1] * 2;\n\treverse(Weight.begin(), Weight.end());\n\tfor (int i=1; i<siz; i++) {\n\t\tlong long MaxAllowed = min(m-1, (b - curr) / Weight[i]);\n\t\tcoef[i] += MaxAllowed; curr += MaxAllowed * Weight[i];\n\t}\n\tvector<long long> arr(siz, 0); arr[0] = a;\n\tfor (int i=1; i<siz; i++) {\n\t\tfor (int j=0; j<i; j++) arr[i] += arr[j];\n\t\tarr[i] += coef[i];\n\t}\n\tcout << siz;\n\tfor (auto z: arr) cout << \" \" << z;\n\tcout << endl;\n}\n\nint main(int argc, char* argv[]) {\n\tios_base::sync_with_stdio(0); cin.tie(NULL);\n\tint T; cin >> T; while (T--) {Input(); Solve();} return 0;\n}\n\n/******************************************\\\n *  Thuy-Trang Tran, #Team4T's Leader     *\n *  #Team4T Primary Flagship - Salvation  *\n\\******************************************/"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "greedy",
        "math"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Cute Sequences.json",
    "editorial_link": "https://codeforces.com//blog/entry/67081",
    "editorial": "We will first deal with determining when the sequence doesnât exist. To\r\ndo this, we place some bounds on the values of . If we choose all values\r\nof the to be equal to then we can calculate that . Reciprocally if we\r\nchoose all to be equal to then we find . All other values give something\r\ninbetween, so we getTherefore, if doesnât lie on any of the intervals\r\nfor some value of , then it is impossible for to be a term of an -cute\r\nsequence starting at . This can be checked naively in since there are\r\nthis many relevant values of . We can convince ourselves that all values\r\nin these intervals are feasible through some experimentation, so we now\r\nturn to the more difficult problem of actually constructing a\r\nsequence.First, notice that we can rearrange the definition of the\r\nsequence as follows:Now, we can try to find a pattern. We see that , , ,\r\nand in general it would seem that.This is actually very easy to prove\r\ninductively using : All coefficients double from one term to the next,\r\nbut we substract once, so that coefficient becomes instead. Now we can\r\nalso find an explicit solution: Write as where , and consider the binary\r\nrepresentation of . Then choosing (where ) works, becauseAlternatively,\r\nafter getting the formula, we can iterate on from to and greedily choose\r\nthe values of to be as large as we can without exceeding . This can be\r\neasily shown to work using that the coefficients are consecutive powers\r\nof two.Both of these approaches can be implemented in per\r\nquery.Complexity:\r\n",
    "hint": []
}