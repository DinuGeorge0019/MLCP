{
    "link": "https://codeforces.com//contest/488/problem/B",
    "problemId": "17753",
    "problem_idx": "B",
    "shortId": "488B",
    "contest_number": "488",
    "problem_submissions": {
        "C": [
            8789721,
            8784968,
            8786503,
            8785444,
            8787030,
            8788326,
            8788622,
            8789526,
            8783088,
            8788042,
            8841638,
            8787428,
            8789969,
            8785172,
            8783549,
            8795032,
            8792817,
            8792769,
            8792766,
            8790912,
            8784523
        ],
        "D": [
            8787031,
            8860157,
            8845738,
            8846448
        ],
        "B": [
            8783651,
            8783456,
            8782128,
            8783172,
            8783387,
            8783484,
            8784283,
            8784001,
            8789951,
            8782906,
            8841826,
            8810063,
            8784023,
            8785144,
            8782367,
            8790893,
            8785527
        ],
        "A": [
            8777414,
            8777482,
            8778085,
            8777878,
            8777654,
            8777074,
            8779752,
            8777889,
            8778928,
            8778120,
            8841586,
            8778590,
            8782174,
            8791718,
            8778710,
            8778067,
            8777724
        ],
        "E": [
            8862060,
            8861159
        ]
    },
    "name": "B. Candy Boxes",
    "statement": "There is an old tradition of keeping boxes of candies in the house in\r\nCyberland. The numbers of candies are if their , their and their are all\r\nequal. By definition, for a set () is , is and is . It is well-known\r\nthat if those three numbers are same, boxes will create a \"debugging\r\nfield\" and codes in the field will have no bugs.For example, is the\r\nexample of numbers meeting the condition because their mean, median and\r\nrange are all equal to .Jeff has special boxes of candies. However,\r\nsomething bad has happened! Some of the boxes could have been lost and\r\nnow there are only () boxes remaining. The -th remaining box contains\r\ncandies.Now Jeff wants to know: is there a possible way to find the\r\nnumber of candies of the missing boxes, meeting the condition above (the\r\nmean, median and range are equal)?\r\n",
    "solutions": [
        "#define _CRT_SECURE_NO_WARNINGS\n#if 1\n#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <iomanip>\n#include <sstream>\n#include <numeric>\n#include <string>\n#include <vector>\n#include <bitset>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <cstdlib>\n#include <cassert>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <ctime>\n#include <list>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef long double LD;\ntypedef pair<int, int> pii;\n\nconst LD eps = 1e-9;\nconst LD pi = acos(-1.0);\nconst LL inf = 1e+9;\n\n#define mp make_pair\n#define pb push_back\n#define X first\n#define Y second\n\n#define dbg(x) { cerr << #x << \" = \" << x << endl; }\n\n// extended template\n#pragma comment(linker, \"/STACK:36777216\")\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\n\n#define forn(i, n) for (int i = 0; i < n; ++i)\n#define all(a) (a).begin(), (a).end()\n#define rall(a) (a).rbegin(), (a).rend()\n\ntemplate<typename T> istream & operator >> (istream &, vector<T> &);\ntemplate<typename T> ostream & operator << (ostream &, const vector<T> &);\n\n#define START clock_t _clock = clock();\n#define END cerr << endl << \"time: \" << (clock() - _clock) / LD(CLOCKS_PER_SEC) << endl;\n\n#define NAME \"problem\"\n\nvoid d(int i){\n    if (i == 4){\n\n    }\n}\n\nbool check(int a, int b, int c, int d){\n    return (d == 3 * a && b + c == a + d);\n}\n\nvoid solve(){\n    int n, a[4];\n    cin >> n;\n    memset(a, 0, sizeof(a));\n    forn(i, n) cin >> a[i];\n\n    if (n == 0){\n        cout << \"YES\" << endl;\n        cout << 1 << endl << 1 << endl << 3 << endl << 3 << endl;\n        return;\n    }\n\n    if (n == 1){\n        cout << \"YES\" << endl;\n        cout << a[0] << endl << 3 * a[0] << endl << 3 * a[0] << endl;\n        return;\n    }\n\n    sort(a, a + n);\n    int u = a[0];\n    int v = a[n - 1];\n\n    if (v > 3 * u){\n        cout << \"NO\" << endl;\n        return;\n    }\n\n    if (n == 2){\n        if (v == 3 * u){\n            cout << \"YES\" << endl;\n            cout << a[0] << endl << 3 * a[0] << endl;\n            return;\n        }\n\n        cout << \"YES\" << endl;\n        cout << 4 * a[0] - a[1] << endl << 3 * a[0] << endl;\n        return;\n    }\n\n    if (n == 3){\n        int res;\n        \n        if (a[2] % 3 == 0){\n            res = a[2] / 3;\n            if (check(res, a[0], a[1], a[2])){\n                cout << \"YES\" << endl << res << endl;\n                return;\n            }\n        }\n\n        if (a[2] == 3 * a[0]){\n            if (check(a[0], a[1], a[2] + a[0] - a[1], a[2])){\n                cout << \"YES\" << endl << a[2] + a[0] - a[1] << endl;\n                return;\n            }\n        }\n\n        res = 3 * a[0];\n        if (check(a[0], a[1], a[2], res)){\n            cout << \"YES\" << endl << res << endl;\n            return;\n        }\n\n        cout << \"NO\" << endl;\n        return;\n    }\n\n    if (n == 4){\n        if (check(a[0], a[1], a[2], a[3])) cout << \"YES\" << endl;\n        else cout << \"NO\" << endl;\n        return;\n    }\n    cout << \"NO\" << endl;\n}\n\nint main()\n{\n    // freopen(NAME \".in\", \"r\", stdin); freopen(NAME \".out\", \"w\", stdout);\n    // freopen(\"input.txt\", \"r\", stdin); // freopen(\"output.txt\", \"w\", stdout);\n\n    solve();\n\n    return 0;\n}\n/*******************************************\n*******************************************/\n\ntemplate<typename T> istream & operator >> (istream &is, vector<T> &v)\n{\n    forn(i, v.size())\n        is >> v[i];\n    return is;\n}\ntemplate<typename T> ostream & operator << (ostream &os, const vector<T> &v)\n{\n    forn(i, v.size())\n        os << v[i] << \" \";\n    return os;\n}\n#endif"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Candy Boxes.json",
    "editorial_link": "https://codeforces.com/blog/entry/14832",
    "editorial": "Letâs sort the four numbers in ascending order: (where are used in\r\nproblem statement). So . With some basic math, we can get and . Solution\r\n1: If , just output any answer (such as ). If , just output , where is\r\nthe known number. If , just check whether the four known numbers meet\r\nthe condition. If , let denote the known numbers (). No solution exists\r\nif . Otherwise we can construct a solution (certainly other solutions\r\nmay exist). If , let denote the known numbers (). No solution exists if\r\n. Otherwise the solution can only be , or . Solution 2: The known\r\nnumbers are no larger than , so all numbers are no larger than if\r\nsolution exists. We enumerate from to , from to , then is a solution.\r\nFor each solution, check if it matches the known numbers. Solution 3: If\r\n, just output any answer (such as ). If , just output , where is the\r\nknown number. If , just check whether the four known numbers meet the\r\ncondition. Otherwise, we can enumerate the or missing number(s), and\r\ncheck if the four numbers meet the condition.\r\n",
    "hint": []
}