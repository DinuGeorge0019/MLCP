{
    "link": "https://codeforces.com//contest/1130/problem/A",
    "problemId": "303006",
    "problem_idx": "A",
    "shortId": "1130A",
    "contest_number": "1130",
    "problem_submissions": {
        "E": [
            50451743,
            50450700,
            50452094,
            50453474,
            50446313,
            50455916,
            50454920,
            50454012,
            50454008,
            50454839,
            50457467,
            50456727,
            50456260,
            50455672,
            50455605,
            50457927,
            50458312,
            50458126,
            50457415,
            50456722
        ],
        "D1": [
            50446455,
            50445965,
            50445582,
            50447980,
            50455630,
            50447204,
            50446775,
            50447785,
            50448347,
            50449449,
            50449217,
            50450469,
            50443264,
            50449132,
            50450976,
            50449020,
            50447745,
            50451064,
            50451498,
            50451552
        ],
        "D2": [
            50446421,
            50445878,
            50447104,
            50447912,
            50455476,
            50447640,
            50449363,
            50448330,
            50449131,
            50450168,
            50449067,
            50450309,
            50443073,
            50449382,
            50450922,
            50449226,
            50450982,
            50451004,
            50451840,
            50451473
        ],
        "C": [
            50442552,
            50443206,
            50442662,
            50441379,
            50437688,
            50442381,
            50441711,
            50439129,
            50445792,
            50444106,
            50444264,
            50443989,
            50450118,
            50445704,
            50445333,
            50444492,
            50440739,
            50444078,
            50446518,
            50445495
        ],
        "B": [
            50438439,
            50440829,
            50438694,
            50437732,
            50440500,
            50437727,
            50437348,
            50443831,
            50442386,
            50441239,
            50438973,
            50438854,
            50445257,
            50439931,
            50440493,
            50439101,
            50443847,
            50438507,
            50438623,
            50441001
        ],
        "A": [
            50434167,
            50434903,
            50434750,
            50433920,
            50434056,
            50434451,
            50434231,
            50435637,
            50434352,
            50433911,
            50435681,
            50434866,
            50434981,
            50436177,
            50436562,
            50434700,
            50434131,
            50435258,
            50434348,
            50436340
        ]
    },
    "name": "A. Be Positive",
    "statement": "You are given an array of n integers: a_1, a_2,\r\nldots, a_n. Your task is to find some d (-10^3\r\nleq d\r\nleq 10^3) such that, after each number in the array is divided by d, the\r\nnumber of positive numbers that are presented in the array is greater\r\nthan or equal to half of the array size (i.e., at least\r\nlceil\r\nfrac{n}{2}\r\nrceil). Note that those positive numbers do not need to be an integer\r\n(e.g., a 2.5 counts as a positive number). If there are multiple values\r\nof d that satisfy the condition, you may print any of them. In case that\r\nthere is no such d, print a single integer 0.Recall that\r\nlceil x\r\nrceil represents the smallest integer that is not less than x and that\r\nzero (0) is neither positive nor negative.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, d, u, x;\n\nint main()\n{\n\t\n\tscanf(\"%d\", &n);\n\tfor(int i=0; i<n; ++i)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\tif(x>0)\n\t\t{\n\t\t\t++d;\n\t\t}\n\t\telse if(x<0)\n\t\t{\n\t\t\t++u;\n\t\t}\n\t}\n\tif(d*2>=n)\n\t{\n\t\tprintf(\"1\");\n\t}\n\telse if(u*2>=n)\n\t{\n\t\tprintf(\"-1\");\n\t}\n\telse\n\t{\n\t\tprintf(\"0\");\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Be Positive.json",
    "editorial_link": "https://codeforces.com/blog/entry/65520",
    "editorial": "Let be the set of cells accessible from .Similarly, let be the set of\r\ncells accessible from .We can find and using a search algorithm such as\r\na DFS or a BFS.If , then a tunnel is not needed, so the answer is\r\n.Otherwise, we need to create a tunnel with an endpoint in and the other\r\nin . Now, we can simply iterate through all possible pairs of cells\r\nwhere and to find one that minimizes the cost (i.e., ).The time\r\ncomplexity is .\r\n",
    "hint": []
}