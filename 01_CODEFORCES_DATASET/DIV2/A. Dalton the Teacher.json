{
    "link": "https://codeforces.com//contest/1855/problem/A",
    "problemId": "2119324",
    "problem_idx": "A",
    "shortId": "1855A",
    "contest_number": "1855",
    "problem_submissions": {
        "D": [
            216333466,
            216282930,
            216304321,
            216288702,
            216315573,
            216283245,
            216277730,
            216313898,
            216306202,
            216314199,
            216313213,
            216292626,
            216312027,
            216805668,
            216805337,
            216315274,
            216317158,
            216319074,
            216320064,
            216332564,
            216313414
        ],
        "C1": [
            216327527,
            216265798,
            216278749,
            216252157,
            216263595,
            216261550,
            216296642,
            216259910,
            216265017,
            216265900,
            216266262,
            216246799,
            216254795,
            216264575,
            216271415,
            216266184,
            216256689,
            216266334,
            216273339,
            216281116
        ],
        "C2": [
            216327433,
            216333169,
            216278334,
            216276389,
            216290961,
            216261266,
            216308671,
            216288782,
            216279381,
            216300131,
            216292122,
            216299685,
            216284770,
            216286877,
            216294260,
            216296589,
            216302878,
            216296848,
            216273167,
            216291700
        ],
        "B": [
            216319187,
            216239575,
            216251320,
            216239516,
            216251539,
            216242319,
            216247221,
            216244993,
            216252246,
            216251732,
            216255891,
            216249364,
            216243332,
            216244237,
            216260716,
            216245518,
            216240380,
            216281460,
            216248098,
            216245806
        ],
        "A": [
            216318294,
            216235675,
            216247364,
            216235951,
            216238094,
            216238019,
            216237152,
            216237362,
            216248778,
            216237335,
            216241402,
            216238578,
            216237824,
            216238112,
            216254438,
            216237599,
            216236030,
            216240134,
            216239210,
            216238506
        ],
        "E": [
            216307488,
            216320937,
            216323420,
            216339638,
            216487251,
            216321175,
            216593212,
            216352369
        ],
        "F": [
            216295921,
            216331597,
            216627506
        ]
    },
    "name": "A. Dalton the Teacher",
    "statement": "Dalton is the teacher of a class with n students, numbered from 1 to n.\r\nThe classroom contains n chairs, also numbered from 1 to n. Initially\r\nstudent i is seated on chair p_i. It is guaranteed that p_1,p_2,\r\ndots, p_n is a permutation of length n.A student is happy if his/her\r\nnumber is different from the number of his/her chair. In order to make\r\nall of his students happy, Dalton can repeatedly perform the following\r\noperation: choose two distinct students and swap their chairs. What is\r\nthe minimum number of moves required to make all the students happy? One\r\ncan show that, under the constraints of this problem, it is possible to\r\nmake all the students happy with a finite number of moves.A permutation\r\nof length n is an array consisting of n distinct integers from 1 to n in\r\narbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2]\r\nis not a permutation (2 appears twice in the array), and [1,3,4] is also\r\nnot a permutation (n=3 but there is 4 in the array).\r\n",
    "solutions": [
        "#pragma GCC optimize(3)\n// #pragma GCC optimize(\"trapv\")\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\n \n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define all(x) begin(x), end(x)\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\nconst int N=200007;\nconst int INF=1e9;\nconst int mod=1e9+7;\nconst double pi=acos(-1);\nmt19937_64 rng(time(NULL));\n \nint n;\nint a[N];\nint sum[N];\nsigned main(){\n  ios::sync_with_stdio(false);\n  cin.tie(0), cout.tie(0);\n  int _;\n  cin>>_;\n  while (_--){\n    cin>>n;\n    int bad=0;\n    for (int i=1;i<=n;++i){\n      int u;\n      cin>>u;\n      if (u==i) bad++;\n    }\n    cout<<(bad+1)/2<<\"\\n\";\n  }\n}  "
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Dalton the Teacher.json",
    "editorial_link": "https://codeforces.com//blog/entry/118540",
    "editorial": "SolutionLet be the number of sad students at the beginning. The answer\r\nis .In one move, you can make at most sad students happy (because you\r\ncan change the position of at most two students), so you need at least\r\nmoves.In fact, you can make everyone happy in exactly moves: while there\r\nare at least sad students, you can swap them and both of them will be\r\nhappy; if there is exactly sad student left, you can swap it with any\r\nother student. Complexity:\r\n",
    "hint": [
        "Hint 1 What's the most efficient way to make the sad students happy?",
        "Hint 2 In most cases, you can make sad students happy in move."
    ]
}