{
    "link": "https://codeforces.com//contest/939/problem/D",
    "problemId": "157443",
    "problem_idx": "D",
    "shortId": "939D",
    "contest_number": "939",
    "problem_submissions": {
        "F": [
            35407164,
            35404527,
            35409631,
            35413577,
            35411662,
            35419439,
            35414187,
            35411618,
            35431888,
            35412467,
            35419660,
            35433583
        ],
        "E": [
            35398600,
            35400617,
            35396384,
            35401251,
            35402353,
            35398722,
            35401205,
            35397543,
            35398502,
            35402734,
            35403103,
            35414533,
            35403422,
            35401372,
            35401626,
            35461044,
            35403396,
            35403015,
            35403923,
            35405332,
            35405603
        ],
        "D": [
            35396133,
            35397568,
            35397994,
            35395417,
            35401286,
            35396814,
            35398696,
            35395034,
            35395649,
            35399214,
            35400903,
            35404198,
            35396354,
            35399157,
            35398522,
            35399419,
            35400286,
            35400477,
            35399060,
            35399994
        ],
        "C": [
            35393837,
            35395958,
            35393508,
            35393769,
            35396360,
            35392577,
            35412731,
            35392757,
            35393879,
            35395902,
            35398127,
            35403086,
            35394045,
            35395387,
            35396026,
            35395295,
            35396730,
            35397951,
            35394874,
            35395895
        ],
        "B": [
            35389969,
            35392883,
            35389759,
            35389629,
            35391873,
            35393694,
            35390537,
            35390126,
            35390538,
            35390605,
            35392335,
            35394074,
            35390549,
            35391091,
            35397165,
            35390254,
            35391051,
            35391212,
            35391979,
            35390583
        ],
        "A": [
            35388647,
            35391478,
            35388695,
            35388656,
            35389475,
            35394633,
            35388859,
            35388665,
            35388816,
            35388903,
            35389256,
            35400980,
            35388685,
            35388755,
            35389214,
            35388752,
            35389036,
            35388963,
            35390469,
            35388756
        ]
    },
    "name": "D. Love Rescue",
    "statement": "Valya and Tolya are an ideal pair, but they quarrel sometimes. Recently,\r\nValya took offense at her boyfriend because he came to her in t-shirt\r\nwith lettering that differs from lettering on her pullover. Now she\r\ndoesn\u2019t want to see him and Tolya is seating at his room and crying at\r\nher photos all day long.This story could be very sad but fairy godmother\r\n(Tolya\u2019s grandmother) decided to help them and restore their\r\nrelationship. She secretly took Tolya\u2019s t-shirt and Valya\u2019s pullover and\r\nwants to make the letterings on them same. In order to do this, for one\r\nunit of mana she can buy a spell that can change some letters on the\r\nclothes. Your task is calculate the minimum amount of mana that Tolya\u2019s\r\ngrandmother should spend to rescue love of Tolya and Valya.More\r\nformally, letterings on Tolya\u2019s t-shirt and Valya\u2019s pullover are two\r\nstrings with same length consisting only of lowercase English letters.\r\nUsing one unit of mana, grandmother can buy a spell of form (where and\r\nare some lowercase English letters), which can arbitrary number of times\r\ntransform a single letter to and vise-versa on both Tolya\u2019s t-shirt and\r\nValya\u2019s pullover. You should find the minimum amount of mana that\r\ngrandmother should spend to buy a set of spells that can make the\r\nletterings equal. In addition you should output the required set of\r\nspells.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\n#define F first\n#define S second\n\nconst int MAXN = 1e5 + 10;\n\nint n;\nstring s, t;\nbool vis[MAXN];\nint sec[MAXN], sz;\nvector<int> adj[MAXN];\n\nvoid dfs(int v){\n\tvis[v] = true;\n\tfor (int u:adj[v])\n\t\tif (!vis[u])\n\t\t\tdfs(u);\n\tsec[sz++] = v;\n}\n\npii ans[MAXN];\nint cc;\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcin >> n >> s >> t;\n\tfor (int i = 0; i < n; i++){\n\t\tint a = (int)(s[i] - 'a');\n\t\tint b = (int)(t[i] - 'a');\n\t\tadj[a].push_back(b);\n\t\tadj[b].push_back(a);\n\t}\n\tfor (int v = 0; v < 200; v++)\n\t\tif (!vis[v]){\n\t\t\tsz = 0;\n\t\t\tdfs(v);\n\t\t\tfor (int i = 0; i + 1 < sz; i++)\n\t\t\t\tans[cc++] = {sec[i], sec[i+1]};\n\t\t}\n\tcout << cc << \"\\n\";\n\tfor (int i = 0; i < cc; i++)\n\t\tcout << char(ans[i].F+'a') << \" \" << char(ans[i].S+'a') << \"\\n\";\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dsu",
        "graphs",
        "greedy",
        "strings"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Love Rescue.json",
    "editorial_link": "https://codeforces.com//blog/entry/57892",
    "editorial": "Let\u00e2\u0080\u0099s build a graph with 26 vertices representing the 26 letters of\r\nEnglish alphabet. When we buy a spell of form , add an edge between\r\nvertices and . It\u00e2\u0080\u0099s easy to see, that it is possible to change a letter\r\nto a letter if and only if there is a path between corresponding\r\nvertices in the graph. So our task is to add the minimum possible number\r\nof edges such that characters and are in one connected component for\r\neach (here and are the given strings).Let\u00e2\u0080\u0099s now take an empty graph and\r\nadd edges between vertices and for each . These edges, as we already\r\nknow, add constraints on the final graph (these letters should be in a\r\nsingle connected component in the final graph). Let\u00e2\u0080\u0099s compute the number\r\nof connected components in the graph let it be . Let\u00e2\u0080\u0099s consider one\r\nconnected component, let its size be . Note that the spell we should buy\r\nshould connect all these vertices in a single component. We can do this\r\nusing at least edges, and the edges that suit us are any spanning tree\r\nof this component, that can be found using a dfs, or just connect one\r\nvertex of this component to all the others. So the total number of\r\nspells is . This is the answer to the problem.\r\n"
}