{
    "link": "https://codeforces.com//contest/144/problem/D",
    "problemId": "784",
    "problem_idx": "D",
    "shortId": "144D",
    "contest_number": "144",
    "problem_submissions": {
        "B": [
            1079685,
            1076543,
            1079898,
            1082847,
            1082735,
            1077650,
            1076828,
            1076897,
            1075703,
            1076570,
            1078583,
            1076905,
            1080333,
            1077070,
            1076919,
            1077073,
            1077426,
            1076974,
            1076783,
            1080322
        ],
        "C": [
            1079250,
            1077173,
            1076551,
            1078237,
            1077015,
            1076842,
            1077698,
            1077957,
            1077065,
            1077590,
            1079431,
            1077439,
            1075886,
            1077839,
            1077621,
            1077697,
            1075975,
            1077567,
            1077415,
            1077375
        ],
        "D": [
            1078442,
            1078477,
            1077789,
            1080084,
            1080478,
            1079868,
            1078561,
            1082477,
            1079132,
            1078573,
            1078956,
            1077881,
            1080255,
            1079060,
            1079072,
            1079853,
            1079171,
            1079213,
            1078913
        ],
        "E": [
            1077630,
            1079988,
            1080515,
            1079940,
            1081931,
            1080530,
            1097618,
            1079963,
            1082156,
            1078798,
            1082939,
            1084001,
            1083991,
            1083989
        ],
        "A": [
            1075930,
            1075624,
            1075694,
            1076063,
            1075731,
            1075713,
            1075976,
            1075788,
            1076457,
            1075616,
            1076584,
            1075746,
            1080725,
            1075619,
            1075655,
            1075636,
            1076691,
            1075720,
            1075774,
            1080649
        ]
    },
    "name": "D. Missile Silos",
    "statement": "A country called Berland consists of cities, numbered with integer\r\nnumbers from to . Some of them are connected by bidirectional roads.\r\nEach road has some length. There is a path from each city to any other\r\none by these roads. According to some Super Duper Documents, Berland is\r\nprotected by the Super Duper Missiles. The exact position of the Super\r\nDuper Secret Missile Silos is kept secret but Bob managed to get hold of\r\nthe information. That information says that all silos are located\r\nexactly at a distance from the capital. The capital is located in the\r\ncity with number .The documents give the formal definition: the Super\r\nDuper Secret Missile Silo is located at some place (which is either city\r\nor a point on a road) if and only if the shortest distance from this\r\nplace to the capital along the roads of the country equals exactly .Bob\r\nwants to know how many missile silos are located in Berland to sell the\r\ninformation then to enemy spies. Help Bob.\r\n",
    "solutions": [
        "#include <string>\n#include <algorithm>\n#include <utility>\n#include <stdlib.h>\n#include <stdio.h>\n#include <vector>\n#include <iostream>\n#include <sstream>\n#include <set>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <utility>\n#include <time.h>\n#include <string.h>\nusing namespace std;\n\n\nint main( void )\n{\n\tint n, m, s;\n\tcin >> n >> m >> s;\n\t-- s;\n\tvector< vector<int> > adj(n);\n\tvector<int> u(m), v(m), w(m);\n\tfor( int i =0; i < m; i ++ ){\n\t\tcin >> u[i] >> v[i] >> w[i];\n\t\t-- u[i];\n\t\t-- v[i];\n\t\tadj[u[i]].push_back(i);\n\t\tadj[v[i]].push_back(i);\n\t}\n\tlong long l;\n\tcin >> l;\n\n\tpriority_queue< pair<int,int> > wl;\n\twl.push(pair<int,int>(0,s));\n\n\tvector<int> visited(n,0);\n\tvector<int> dist(n,-1);\n\twhile( !wl.empty() ){\n\t\tint D = -wl.top().first;\n\t\tint i = wl.top().second;\n\t\twl.pop();\n\t\tif( visited[i] ) continue;\n\t\tvisited[i] = true;\n\t\tdist[i] = D;\n\t\tfor( int j = 0; j < adj[i].size(); j ++ ){\n\t\t\tint e = adj[i][j];\n\t\t\tint t = u[e] == i ? v[e] : u[e];\n\t\t\tint d2 = D + w[e];\n\t\t\twl.push(pair<int,int>(-d2,t));\n\t\t}\n\t}\n\t\n\tint ans = 0;\n\tfor( int i =0; i < m; i ++ ){\n\t\tlong long A1 = -1, A2 = -1;\n\t\tif( dist[u[i]] < l && l < dist[u[i]] + w[i] && l <= dist[v[i]] + (dist[u[i]] + w[i] - l) )\n\t\t\tA1 = l - dist[u[i]];\n\t\tif( dist[v[i]] < l && l < dist[v[i]] + w[i] && l <= dist[u[i]] + (dist[v[i]] + w[i] - l) )\n\t\t\tA2 = (dist[v[i]] + w[i] - l);\n\t\tif( A1 >= 0 ) ++ ans;\n\t\tif( A2 >= 0 && A2 != A1 ) ++ ans;\n\t}\n\tfor( int i = 0; i < n; i ++ ){\n\t\tif( dist[i] == l )\n\t\t\t++ ans;\n\t}\n\tcout << ans << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dfs and similar",
        "graphs",
        "shortest paths"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Missile Silos.json",
    "editorial_link": "https://codeforces.com//blog/entry/3693",
    "editorial": "d[i] --- the minimum distance from vertex s to vertex i, that counted by algorithm of Dijkstra. \"et's count the number of points on each edge of the graph that are on the distance l form the vertex s (and l --- the minimum distance from these points to s).\n\nFor edge (u, v):\n\nif d[u]?<?l and l?-?d[u]?<?w(u,?v) and w(u,?v)?-?(l?-?d[u])?+?d[v]?>?l then add to the answer the point on this edge, the distance of which to the vertex u is l?-?d[u];\n\nif d[v]?<?l and l?-?d[v]?<?w(u,?v) and w(u,?v)?-?(l?-?d[v])?+?d[u]?>?l then add to the answer the point on this edge, the distance of which to the vertex v is l?-?d[v];\n\nif d[v]?<?l and d[u]?<?l and d[u]?+?d[v]?+?w(u,?v)?=?2?*?l then add to the answer the point on this edge, the distance of which to the vertex v is l?-?d[v] and to the vertex u is l?-?d[u].\n\nAnd if d[i]?=?l, then let's add to the answer this point."
}