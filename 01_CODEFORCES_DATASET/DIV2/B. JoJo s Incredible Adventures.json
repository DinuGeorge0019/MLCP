{
    "link": "https://codeforces.com//contest/1820/problem/B",
    "problemId": "1880610",
    "problem_idx": "B",
    "shortId": "1820B",
    "contest_number": "1820",
    "problem_submissions": {
        "E": [
            202221495,
            202224197,
            202223650,
            202221055,
            202211278,
            202210773,
            202210525,
            202392193,
            202234544,
            202241741
        ],
        "D": [
            202204493,
            202203834,
            202204941,
            202200357,
            202224521,
            202196714,
            202201649,
            202201288,
            202205548,
            202208808,
            202207552,
            202206152,
            202208768,
            202210206,
            202204088,
            202209173,
            202204193,
            202208143
        ],
        "C": [
            202188210,
            202190438,
            202191871,
            202204067,
            202186370,
            202194680,
            202193928,
            202184998,
            202190422,
            202190852,
            202188780,
            202191686,
            202189589,
            202189497,
            202191313,
            202189933,
            202193203,
            202191781,
            202192559,
            202193037
        ],
        "B": [
            202184059,
            202186314,
            202188694,
            202185290,
            202181971,
            202185877,
            202195824,
            202184988,
            202186184,
            202184424,
            202184282,
            202185384,
            202184368,
            202185406,
            202183611,
            202187273,
            202187259,
            202188101,
            202186319
        ],
        "A": [
            202181070,
            202181088,
            202184573,
            202180673,
            202180868,
            202181103,
            202180754,
            202181157,
            202181299,
            202180503,
            202180966,
            202180804,
            202180777,
            202180572,
            202180527,
            202180589,
            202182901,
            202184035,
            202181508
        ],
        "F": [
            202489739,
            202420015
        ]
    },
    "name": "B. JoJo s Incredible Adventures",
    "statement": "Did you think there was going to be a JoJo legend here? But no, that was\r\nme, Dio!Given a binary string s of length n, consisting of characters\r\nand . Let\u2019s build a table of size n\r\ntimes n, consisting of and characters as follows.In the first row of the\r\ntable write the original string s. In the second row of the table write\r\nof the string s by one to the right. In the third row of the table,\r\nwrite the cyclic shift of line s by two to the right. And so on. Thus,\r\nthe row with number k will contain a cyclic shift of string s by k to\r\nthe right. The rows .In the resulting table we need to find the\r\nrectangle consisting only of ones that has the largest area.We call a\r\nrectangle the set of all cells (i, j) in the table, such that x_1\r\nle i\r\nle x_2 and y_1\r\nle j\r\nle y_2 for some integers 0\r\nle x_1\r\nle x_2 < n and 0\r\nle y_1\r\nle y_2 < n.Recall that the cyclic shift of string s by k to the right is\r\nthe string s_{n-k+1}\r\nldots s_n s_1 s_2\r\nldots s_{n-k}. For example, the cyclic shift of the string \"\" by 0 to\r\nthe right is the string itself \"\", its cyclic shift by 3 to the right is\r\nthe string \"\".\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i, n) for (int (i) = 0; (i) < (n); (i)++)\n#define FORI(i, a, b) for (int (i) = (a); (i) < (b); (i)++)\n \nmt19937 rnd(time(0));\n\n#define ll long long\n#define vi vector<int>\n#define vvi vector<vector<int> >\n#define endl '\\n'\n\n#define mp(m, n) make_pair((m), (n))\n \ntemplate<typename T>\nvoid read(vector<T> &t) {FOR(i, t.size()) {cin >> t[i];}}\ntemplate<typename T> string tostring(T a) { istringstream sin; sin >> a; return sin.str(); }\n \n// #define DEBUG\n \n#ifdef DEBUG\ntemplate<typename T>\nvoid _debug(string s, T x) {\n    cerr << s << \":\";\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        cerr << \" \" << *it;\n    }\n    cerr << endl;\n}\n \ntemplate<typename T, typename K>\nvoid _debug(string s, unordered_map<T, K> x) {\n    cerr << s << \":\";\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        cerr << \" \" << it->first << \":\" << it->second;\n    }\n    cerr << endl;\n}\n\ntemplate<typename T, typename K>\nvoid _debug(string s, map<T, K> x) {\n    cerr << s << \":\";\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        cerr << \" \" << it->first << \":\" << it->second;\n    }\n    cerr << endl;\n}\n \ntemplate<typename T, typename K>\nvoid _debug(string s, set<T, K> x) {\n    cerr << s << \":\";\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        cerr << \" \" << *it;\n    }\n    cerr << endl;\n}\n \ntemplate<typename T, typename K>\nvoid _debug(string s, vector<pair<T, K> > x) {\n    cerr << s << \":\";\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        cerr << \" \" << it->first << \",\" << it->second;\n    }\n    cerr << endl;\n}\n\ntemplate<typename T, typename K>\nvoid _debug(string s, pair<T, K> x) {\n    cerr << s << \": \" << x.first << \",\" << x.second << endl;\n}\n \nvoid _debug(string s, int x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, long long x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, double x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, string x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, char x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, size_t x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, bool x) {\n    cerr << s << \": \" << x << endl;\n}\n \n#define debug(x) _debug(#x, (x))\n#else\n#define debug(x)\n#endif\n \n#define db debug\n\ntemplate <class T>\nvoid print(vector<T> &v) {\n    for (int i = 0; i < v.size(); i++) {\n        cout << v[i];\n        if (i == v.size() - 1) {\n            cout << endl;\n        } else {\n            cout << \" \";\n        }\n    }\n}\n\nvoid solve();\n \nvoid pre_init();\n\nint main() {\n    ios_base::sync_with_stdio(false); std::cin.tie(0);\n    pre_init();\n    int t = 1;\n    cin >> t;\n    while (t--) {\n        solve();\n    }\n    cerr<<\"Time:\"<<1000*((double)clock())/(double)CLOCKS_PER_SEC<<\"ms\\n\"; \n}\n \nvoid pre_init() {}\n\nvoid solve() {\n    string s;\n    cin >> s;\n    ll n = s.size();\n    int has0 = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '0') has0 = true;\n        s += s[i];\n    }\n    if (!has0) {\n        cout << n * n << endl;\n        return;\n    }\n    ll max_cnt = 0;\n    ll now = 0;\n    debug(s);\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == '0') now = 0;\n        else now += 1;\n        max_cnt = max(max_cnt, now);\n    }\n    debug(max_cnt);\n    cout << (max_cnt / 2 + 1) * ((max_cnt + 1) / 2) << endl;\n    \n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "strings",
        "two pointers"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. JoJo s Incredible Adventures.json",
    "editorial_link": "https://codeforces.com//blog/entry/115133",
    "editorial": "First of all, consider the cases if the given string consists only of\r\nones and only of zeros. It\u00e2\u0080\u0099s easy to see that answers for these cases\r\nare and .In all other cases let\u00e2\u0080\u0099s split all strings into segments that\r\nconsist only of ones. Also if the first and the last characters of the\r\nstring equals to \"\", these two characters will be in one segment. In\r\nother words, the pair of ones will lay inside one group if there exists\r\ncyclic shift that these two ones are consecutive. Let the maximum length\r\nof such segment be equal to . Then it can be shown that the answer\r\nequals to .We will proof this fact in such way. If there exists some\r\nrectangle of size . Considering its first row, we can see that it has\r\nconsecutive ones. But it means that . Without loss of generality, if ,\r\nwe can do the following replacements: , . It means that .Time\r\ncomplexity: .\r\n"
}