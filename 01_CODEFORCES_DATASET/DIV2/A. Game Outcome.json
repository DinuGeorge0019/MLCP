{"link": "https://codeforces.com//contest/157/problem/A", "problemId": "964", "problem_idx": "A", "shortId": "157A", "contest_number": "157", "problem_submissions": {"E": [1248565, 1248604, 1249847, 1249719, 1249198, 1252963, 7284608, 1259710, 1249969, 1357727, 1250326, 1253342], "D": [1247682, 1249793, 1248218, 1248230, 1248147, 1248671, 1248386, 1249291, 1249183, 1248872, 1249391, 1249679, 1246812, 1248518], "C": [1246074, 1248822, 1246490, 1617831, 1246429, 1247018, 1245946, 1246282, 1247472, 1246694, 1246096, 1281859, 1245531, 1247798], "B": [1244973, 1245596, 1245015, 1246109, 1246844, 1245147, 1245069, 1244930, 1245121, 1245571, 1244946, 1244729, 1245625, 1244883, 1246390], "A": [1244274, 1244154, 1245191, 1246058, 1244171, 1244215, 1244186, 1244383, 1244640, 1244109, 1244087, 1244512, 1244835]}, "name": "A. Game Outcome", "statement": "Sherlock Holmes and Dr. Watson played some game on a checkered board in\r\nsize. During the game they put numbers on the board\u2019s squares by some\r\ntricky rules we don\u2019t know. However, the game is now over and each\r\nsquare of the board contains exactly one number. To understand who has\r\nwon, they need to count the number of squares. To determine if the\r\nparticular square is winning you should do the following. Calculate the\r\nsum of all numbers on the squares that share this column (including the\r\ngiven square) and separately calculate the sum of all numbers on the\r\nsquares that share this row (including the given square). A square is\r\nconsidered if the sum of the column numbers is greater than the sum of\r\nthe row numbers.For instance, lets game was ended like is shown in the\r\npicture. Then the purple cell is winning, because the sum of its column\r\nnumbers equals , sum of its row numbers equals , and .\r\n", "solutions": ["#include<iostream>\n#include<vector>\n#include<string>\n#include<stack>\n#include<algorithm>\n#include<cmath>\n#include<set>\n#include<queue>\n#include<sstream>\n#include<utility>\n\nusing std::pair;\nusing std::stringstream;\nusing std::next_permutation;\nusing std::sqrt;\nusing std::priority_queue;\nusing std::sort;\nusing std::stack;\nusing std::string;\nusing std::vector;\nusing std::cin;\nusing std::cout;\nusing std::endl;\nusing std::min;\nusing std::max;\nusing std::set;\nusing std::swap;\nusing std::random_shuffle;\nusing std::queue;\nusing std::sin;\nusing std::cos;\nusing std::make_pair;\n\ntypedef long long ll; \ntypedef pair<ll, ll> pll;\nconst double PI = 3.14159265358979323846;  \n\n\n\nint main() {\n\tint n;\n\tcin >> n;\n\tvector<vector<int> > data(n, vector<int>(n));\n\tfor (int i = 0; i < n; ++i)\n\t\tfor (int j = 0; j < n; ++j)\n\t\t\tcin >> data[i][j];\n\tint x = 0;\n\tfor (int i = 0; i < n; ++i) \n\t\tfor (int j = 0; j < n; ++j) {\n\t\t\tint ver = 0;\n\t\t\tfor (int k = 0; k < n; ++k)\n\t\t\t\tver += data[k][j];\n\t\t\tint hor = 0;\n\t\t\tfor (int k = 0; k < n; ++k)\n\t\t\t\thor += data[i][k];\n\t\t\tif (ver > hor)\n\t\t\t\t++x;\n\t\t}\n\tcout << x << endl;\t\n\treturn 0;\t\n}\n                                             \n"], "input": "", "output": "", "tags": ["brute force"], "dificulty": "800", "interactive": false}