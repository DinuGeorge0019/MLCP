{
    "link": "https://codeforces.com//contest/898/problem/E",
    "problemId": "139118",
    "problem_idx": "E",
    "shortId": "898E",
    "contest_number": "898",
    "problem_submissions": {
        "F": [
            33307844,
            33307069,
            33308143,
            33307333,
            33304725,
            33309674,
            33307617,
            33324444,
            33463766,
            33463739
        ],
        "E": [
            33298700,
            33298827,
            33296850,
            33298062,
            33299543,
            33301231,
            33302052,
            33295023,
            33295557,
            33302644,
            33297022,
            33300051,
            33297188,
            33300909,
            33298325,
            33294157,
            33299352
        ],
        "D": [
            33295484,
            33296274,
            33295804,
            33295438,
            33296979,
            33297889,
            33299897,
            33296885,
            33293153,
            33301610,
            33299195,
            33297291,
            33294317,
            33297559,
            33296082,
            33292010,
            33295516
        ],
        "C": [
            33293049,
            33292838,
            33294192,
            33293208,
            33294387,
            33295591,
            36631893,
            33298752,
            33292900,
            33291380,
            33326974,
            33293057,
            33293412,
            33294345,
            33292038,
            33294840,
            33294194,
            33298225,
            33297034
        ],
        "B": [
            33288797,
            33294236,
            33289524,
            33296573,
            33305320,
            33291082,
            33290611,
            33289720,
            33288149,
            33288790,
            33289877,
            33289821,
            33288702,
            33290526,
            33291731,
            33294974,
            33291014
        ],
        "A": [
            33287337,
            33293381,
            33287422,
            33296068,
            33304988,
            33288124,
            33288589,
            33287509,
            33287292,
            33287275,
            33287989,
            33287858,
            33287278,
            33288680,
            33290739,
            33295465,
            33288106
        ]
    },
    "name": "E. Squares and not squares",
    "statement": "Ann and Borya have piles with candies and is even number. There are\r\ncandies in pile with number .Ann likes numbers which are square of some\r\ninteger and Borya doesn’t like numbers which are square of any integer.\r\nDuring one move guys can select some pile with candies and add one candy\r\nto it (this candy is new and doesn’t belong to any other pile) or remove\r\none candy (if there is at least one candy in this pile). Find out\r\nminimal number of moves that is required to make exactly piles contain\r\nnumber of candies that is a square of some integer and exactly piles\r\ncontain number of candies that is not a square of any integer.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define ll long long\n\nusing namespace std;\n\nconst int N = (3e5), mod = (1e9) + 7;\n\npair <ll,ll> p[N];\n\nint n;\n\nint main(){\n\tscanf(\"%d\", &n);\n\tfor(int i = 1,x; i <= n; i++){\n\t\tscanf(\"%d\", &x);\n\t\tint v = (int)sqrt(x);\n\t\tll cnt = mod;\n\t\tfor(int j = v - 2; j <= v + 2; j++){\n\t\t\tif(j >= 0 && 1ll * j * j >= x){\n\t\t\t\tcnt = min(cnt, 1ll * j * j - x);\n\t\t\t}\n\t\t}\n\t\tfor(int j = v - 2; j <= v + 2; j++){\n\t\t\tif(j >= 0 && 1ll * j * j <= x){\n\t\t\t\tcnt = min(cnt, x - 1ll * j * j);\n\t\t\t}\n\t\t}\n\t\tp[i] = mp(cnt, x);\n\t}\n\tsort(p + 1, p + n + 1);\n\tll ans = 0;\n\tfor(int i = 1; i <= n / 2; i++){\n\t\tans += p[i].f;\n\t}\n\tfor(int i = n / 2 + 1; i <= n; i++){\n\t\tif(p[i].f == 0){\n\t\t\tif(p[i].s == 0) ans += 2;\n\t\t\telse ans++;\n\t\t}\n\t}\n\tprintf(\"%lld\", ans);\n\t\n \treturn 0;\n}             "
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Squares and not squares.json",
    "editorial_link": "https://codeforces.com//blog/entry/56381",
    "editorial": "At first we need to implement a function to check integer if it is a\r\nsquare of an integer. Let is a round down square root of . If then is a\r\nsquare of an integer.Letâs calculate two values: how many given numbers\r\nare integer squares and how many given numbers are not integer\r\nsquares.If , then we should not to change anything and the answer is .If\r\n, then we should to make numbers-squares not to be squares. To make it\r\nwe need to take numbers-squares, which do not equal to and increase them\r\nby . If such numbers do not enough we should take needed number of and\r\nincrease them by .If , then we should to make numbers, which do not\r\nsquares, to be squares. Letâs calculate for each such number the number\r\nof operations to make this number square-number and put this value in\r\nseparate vector. After than we should sort vector in increasing order\r\nand print the sum of first vector elements.\r\n",
    "hint": []
}