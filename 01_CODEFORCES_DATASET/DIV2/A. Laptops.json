{
    "link": "https://codeforces.com//contest/456/problem/A",
    "problemId": "12122",
    "problem_idx": "A",
    "shortId": "456A",
    "contest_number": "456",
    "problem_submissions": {
        "D": [
            7394195,
            7387334,
            7388194,
            7405631,
            7391438,
            7570888,
            7392150,
            7392407,
            7393420,
            7393011,
            7390869,
            7412347,
            7393749,
            7391710,
            7395518,
            7389615
        ],
        "E": [
            7391057,
            7389574,
            7398919,
            7392485,
            7391618,
            7395429,
            7414900,
            7394901,
            7394000,
            7407156,
            7407099,
            7394565
        ],
        "C": [
            7384935,
            7379979,
            7382777,
            7382760,
            7382268,
            7385285,
            7383719,
            7382555,
            7385127,
            7383651,
            7381928,
            7379735,
            7383336,
            7384288,
            7385361,
            7383584,
            7385744,
            7383852,
            7380739
        ],
        "A": [
            7381212,
            7377201,
            7377560,
            7377220,
            7377312,
            7379694,
            7377445,
            7377742,
            7377341,
            7377480,
            7377279,
            7382703,
            7377573,
            7378438,
            7377375,
            7377583,
            7379362,
            7377853,
            7384952
        ],
        "B": [
            7380090,
            7378182,
            7380801,
            7379345,
            7379559,
            7382230,
            7379187,
            7379755,
            7379683,
            7379290,
            7381183,
            7380009,
            7380898,
            7380752,
            7380004,
            7381407,
            7380326,
            7387312
        ]
    },
    "name": "A. Laptops",
    "statement": "One day Dima and Alex had an argument about the price and quality of\r\nlaptops. Dima thinks that the more expensive a laptop is, the better it\r\nis. Alex disagrees. Alex thinks that there are two laptops, such that\r\nthe price of the first laptop is less (strictly smaller) than the price\r\nof the second laptop but the quality of the first laptop is higher\r\n(strictly greater) than the quality of the second laptop.Please, check\r\nthe guess of Alex. You are given descriptions of laptops. Determine\r\nwhether two described above laptops exist.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <queue>\n#include <map>\n#include <set>\n#include <iostream>\n\nusing namespace std;\n\nstruct par {\n    int x, y;\n    bool operator  < (const par &otro) const {\n        if(x<otro.x){\n            return true;\n        }\n        return false;\n    }\n} A[100005];\n\nint ctos;\n\nint main()\n{\n    scanf(\"%d\",&ctos);\n    for(int i=1; i<=ctos; i++){\n        scanf(\"%d%d\",&A[i].x,&A[i].y);\n    }\n    sort(A+1, A+ctos+1);\n    for(int i=1; i<ctos; i++){\n        if(A[i].y>A[i+1].y){\n            printf(\"Happy Alex\\n\");\n            return 0;\n        }\n    }\n    printf(\"Poor Alex\\n\");\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "sortings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Laptops.json",
    "editorial_link": "https://codeforces.com//blog/entry/13336",
    "editorial": "In this task you need to check the existense of such\npair and , such that , , . If such and exist, Alex is happy. There is\nvery simple solution. Letâs check that for all . If this condition is\ntrue we should print \"Poor Alex\". We can easy prove it. Letâs sort\narrays and like pair of numbers in increasing order. We can see that\nAlex is happy if we have at least one inversion in array , i.e there is\nsuch pair and that (). i.e it means that array is not sorted and itâs\nmeans that .\n",
    "hint": []
}