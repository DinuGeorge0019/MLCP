{
    "link": "https://codeforces.com//contest/1285/problem/B",
    "problemId": "512927",
    "problem_idx": "B",
    "shortId": "1285B",
    "contest_number": "1285",
    "problem_submissions": {
        "F": [
            68545833,
            68535522,
            68573334,
            96999211,
            96999146,
            68573161,
            69098509,
            68626658,
            68682994
        ],
        "E": [
            68524941,
            68518417,
            68530554,
            68529308,
            68531407,
            68531344,
            68531615,
            68534357,
            68534051,
            68529832,
            68540790,
            68535869,
            68541711,
            68538608,
            68538163,
            68537974,
            68541963,
            68539842,
            68536496,
            68538129
        ],
        "D": [
            68507082,
            68557516,
            68506902,
            68508017,
            68510947,
            68510777,
            68514189,
            68853550,
            68517438,
            68515728,
            68517316,
            68510494,
            68517322,
            68513984,
            68513219,
            68519377,
            68516492,
            68513650,
            68514808,
            68520824,
            68521323
        ],
        "C": [
            68504523,
            68504942,
            68504769,
            68508581,
            68506887,
            68517568,
            68507055,
            68509904,
            68509741,
            68512066,
            68504310,
            68506343,
            68505577,
            68506877,
            68502537,
            68507690,
            68510042,
            68506486,
            68506105,
            68511726
        ],
        "B": [
            68502726,
            68503606,
            68501596,
            68503575,
            68503622,
            68503646,
            68503039,
            68505606,
            68503233,
            68506583,
            68503941,
            68502210,
            68503653,
            68503110,
            68508414,
            68502653,
            68505318,
            68503675,
            68512385,
            68505519
        ],
        "A": [
            68497804,
            68499469,
            68497513,
            68497595,
            68499958,
            68498702,
            68497961,
            68500159,
            68498048,
            68499346,
            68497975,
            68497626,
            68497817,
            68498423,
            68498520,
            68497604,
            68497745,
            68497829,
            68499449,
            68499473
        ]
    },
    "name": "B. Just Eat It ",
    "statement": "Today, Yasser and Adel are at the shop buying cupcakes. There are n\r\ncupcake types, arranged from 1 to n on the shelf, and there are\r\ninfinitely many of each type. The tastiness of a cupcake of type i is an\r\ninteger a_i. There are both tasty and nasty cupcakes, so the tastiness\r\ncan be positive, zero or negative.Yasser, of course, wants to try them\r\nall, so he will buy exactly one cupcake of each type.On the other hand,\r\nAdel will choose some segment [l, r] (1\r\nle l\r\nle r\r\nle n) that does not include all of cupcakes (he can’t choose [l, r] =\r\n[1, n]) and buy exactly one cupcake of each of types l, l + 1,\r\ndots, r.After that they will compare the total tastiness of the cupcakes\r\neach of them have bought. Yasser will be happy if the total tastiness of\r\ncupcakes he buys is greater than the total tastiness of cupcakes Adel\r\nbuys .For example, let the tastinesses of the cupcakes be [7, 4, -1].\r\nYasser will buy all of them, the total tastiness will be 7 + 4 - 1 = 10.\r\nAdel can choose segments [7], [4], [-1], [7, 4] or [4, -1], their total\r\ntastinesses are 7, 4, -1, 11 and 3, respectively. Adel can choose\r\nsegment with tastiness 11, and as 10 is not strictly greater than 11,\r\nYasser won’t be happy :(Find out if Yasser will be happy after visiting\r\nthe shop.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<typename T = int> vector<T> create(size_t n){ return vector<T>(n); }\ntemplate<typename T, typename... Args> auto create(size_t n, Args... args){ return vector<decltype(create<T>(args...))>(n, create<T>(args...)); }\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint t; cin >> t;\n\twhile(t--){\n\t\tint n; cin >> n;\n\t\tvector<int> a(n);\n\t\tlong long sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcin >> a[i];\n\t\t\tsum += a[i];\n\t\t}\n\t\tauto kad = [&](int l, int r){\n\t\t\tbool ok = false;\n\t\t\tfor(int i = l; i < r; i++) if(a[i] >= 0) ok = true;\n\t\t\tif(ok){\n\t\t\t\tlong long cur = 0, best = 0;\n\t\t\t\tfor(int i = l; i < r; i++){\n\t\t\t\t\tcur += a[i];\n\t\t\t\t\tcur = max(cur, 0ll);\n\t\t\t\t\tbest = max(best, cur);\n\t\t\t\t}\n\t\t\t\treturn best;\n\t\t\t} else {\n\t\t\t\tlong long ma = -(1ll<<60);\n\t\t\t\tfor(int i = l; i < r; i++) ma = max(ma, 1ll * a[i]);\n\t\t\t\treturn ma;\n\t\t\t}\n\t\t};\n\t\tif(sum > kad(0, n - 1) && sum > kad(1, n)){\n\t\t\tcout << \"YES\\n\";\n\t\t} else {\n\t\t\tcout << \"NO\\n\";\n\t\t}\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Just Eat It .json",
    "editorial_link": "https://codeforces.com//blog/entry/72950",
    "editorial": "If there is at least a prefix or a suffix with non-positive sum, we can\r\ndelete that prefix/suffix and end up with an array with sum the sum of\r\nthe whole array. So, if thatâs the case, the answer is \"NO\".Otherwise,\r\nall the segments that Adel can choose will have sum than the sum of the\r\nwhole array because the elements that are not in the segment will always\r\nhave a strictly positive sum. So, in that case, the answer is \"YES\".Time\r\ncomplexity:\r\n",
    "hint": []
}