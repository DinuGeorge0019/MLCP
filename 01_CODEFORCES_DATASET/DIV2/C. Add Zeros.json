{
    "link": "https://codeforces.com//contest/2027/problem/C",
    "problemId": "2980651",
    "problem_idx": "C",
    "shortId": "2027C",
    "contest_number": "2027",
    "problem_submissions": {
        "E1": [
            288173465
        ],
        "C": [
            288155049,
            288120759,
            288122093,
            288125570,
            288127321,
            288123494,
            288123556,
            288122333,
            288123755,
            288125169,
            288121427,
            288117465,
            288125690,
            288124584,
            288121786,
            288127829,
            288125975,
            288124342
        ],
        "B": [
            288142255,
            288115334,
            288114511,
            288119086,
            288120877,
            288116135,
            288118059,
            288116134,
            288116952,
            288118306,
            288116355,
            288118112,
            288118023,
            288118240,
            288114959,
            288119841,
            288117994,
            288116831
        ],
        "D1": [
            288128564,
            288128933,
            288128524,
            288131968,
            288133129,
            288135744,
            288132103,
            288131863,
            288129253,
            288133201,
            288129398,
            288141909,
            288136583,
            288131627,
            288137428,
            288134171,
            288136755,
            288139102
        ],
        "D2": [
            288128086,
            288140616,
            288241523,
            288145908,
            288142238,
            288141377,
            288147849,
            288144735,
            288148268,
            288155865,
            288150156,
            288152683,
            288141628,
            288150384,
            288157699,
            288150265,
            288151809,
            288152365,
            288146843
        ],
        "A": [
            288116848,
            288110808,
            288111033,
            288112146,
            288115964,
            288110952,
            288112831,
            288111212,
            288110889,
            288110825,
            288111627,
            288112681,
            288110645,
            288110604,
            288114987,
            288112466,
            288110744
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135558",
    "editorial": "Letâs rearrange the equation given in the statement to find a ârequiredâ\r\nvalue in order to use an operation at that index. We have , so . Note\r\nthat if , then the condition is never true, since always. So actually,\r\nwe just need to consider the first positions. Once we use an operation\r\nat position , the length of the array will increase by . So, for each\r\nposition we require some length and make a length of . So, letâs create\r\na graph containing all edges, and run some DFS or BFS on this graph\r\nstarting from node (the starting value of ). It then follows that the\r\nlargest node visited is the maximum length of the array we can possibly\r\nget.We should use a map to store the graph, since the length of the\r\narray can grow up to and so the graph is very sparse. If we donât want\r\nto use a map, we can also take advantage of the fact that all edges are\r\ndirected from to where and that all edges and nodes are fixed, so we can\r\nactually iterate through all and maintain a boolean array of which\r\nvalues are visited so far, updating it at any point using a binary\r\nsearch.\r\n",
    "name": "C. Add Zeros",
    "statement": "You’re given an array a initially containing n integers. In one\r\noperation, you must do the following: Choose a position i such that 1 <\r\ni\r\nle |a| and a_i = |a| + 1 - i, where |a| is the size of the array. Append\r\ni - 1 zeros onto the end of a. After performing this operation as many\r\ntimes as you want, what is the maximum possible length of the array a?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#ifdef LOCAL#define TASK \"test\"#else#define TASK \"test\"#endifusing namespace std; #define int long long const int N = 3e5 + 5; int n;int a[N]; void solve() {    cin >> n;    for (int i = 0; i < n; ++i) {        cin >> a[i];    }    if (n == 1) {        cout << 1 << '\\n';        return;    }    set<int> st;    st.insert(n);    vector<pair<int, int>> b;    for (int i = 0; i < n; ++i) {        b.emplace_back(a[i] + i, i);    }    sort(b.begin(), b.end());    for (auto x : b) {        int p = x.first, q = x.second;        if (st.count(p)) {            st.insert(p + q);        }    }    cout << *st.rbegin() << '\\n';} signed main() {    if (fopen(TASK\".inp\", \"r\")) {        freopen(TASK\".inp\", \"r\", stdin);        freopen(TASK\".out\", \"w\", stdout);    }    if (fopen(TASK\".err\", \"r\")) {        freopen(TASK\".err\", \"w\", stderr);    }    ios::sync_with_stdio(false);    cin.tie(nullptr);    int T;    cin >> T;    while (T--) {        solve();    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "dfs and similar",
        "dp",
        "graphs",
        "greedy"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Add Zeros.json",
    "hint": []
}