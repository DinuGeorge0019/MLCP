{
    "link": "https://codeforces.com//contest/1099/problem/C",
    "problemId": "278503",
    "problem_idx": "C",
    "shortId": "1099C",
    "contest_number": "1099",
    "problem_submissions": {
        "E": [
            48000148,
            48008414,
            48015162,
            48015155,
            47998674,
            68679965,
            48055305,
            48002816,
            48005156,
            48004046
        ],
        "F": [
            47993398,
            48000668,
            47998030,
            47996940,
            48003129,
            48002459,
            48000786,
            48002880,
            48003524,
            48001521,
            48002772,
            48065469,
            48065253,
            48007017,
            48004595,
            48004955,
            48023235,
            48006181,
            48008407
        ],
        "D": [
            47985584,
            47989615,
            47984416,
            47978723,
            47985339,
            47986984,
            47992304,
            47990729,
            47990739,
            47992156,
            47990766,
            47987456,
            47986225,
            47993500,
            47991322,
            47992653,
            47992397,
            47991707,
            47988171,
            47987589
        ],
        "C": [
            47981176,
            47983527,
            47980104,
            47987818,
            47981157,
            47982699,
            47982090,
            47982267,
            47986173,
            47985738,
            47981653,
            47982375,
            47988366,
            47985929,
            47986209,
            47986811,
            47984704,
            47981818,
            47983683
        ],
        "B": [
            47976890,
            47977488,
            47975669,
            47984516,
            47975576,
            47975800,
            47977583,
            47977135,
            47978430,
            47982162,
            47977417,
            47977771,
            47981576,
            47979226,
            47979187,
            47980494,
            47977529,
            47975997,
            47978338
        ],
        "A": [
            47974401,
            47973914,
            47973933,
            47982820,
            47974013,
            47974051,
            47974701,
            47974488,
            47974881,
            47974319,
            47973925,
            47973908,
            47975086,
            47976101,
            47974397,
            47974659,
            47974316,
            47973944,
            47974200
        ]
    },
    "name": "C. Postcard",
    "statement": "Andrey received a postcard from Irina. It contained only the words\r\n\"Hello, Andrey!\", and a strange string consisting of lowercase Latin\r\nletters, snowflakes and candy canes. Andrey thought that this string is\r\nan encrypted message, and decided to decrypt it.Andrey noticed that\r\nsnowflakes and candy canes always stand after the letters, so he\r\nsupposed that the message was encrypted as follows. Candy cane means\r\nthat the letter before it can be removed, or can be left. A snowflake\r\nmeans that the letter before it can be removed, left, or repeated\r\nseveral times.For example, consider the following string: This string\r\ncan encode the message . For this, candy canes and snowflakes should be\r\nused as follows: candy cane 1: remove the letter , snowflake 1: repeat\r\nthe letter twice, candy cane 2: leave the letter , snowflake 2: remove\r\nthe letter , snowflake 3: leave the letter . Please note that the same\r\nstring can encode different messages. For example, the string above can\r\nencode , , and other messages.Andrey knows that messages from Irina\r\nusually have a length of k letters. Help him to find out if a given\r\nstring can encode a message of k letters, and if so, give an example of\r\nsuch a message.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define endl '\\n'\n\n//#pragma GCC optimize (\"O3\")\n//#pragma GCC target (\"sse4\")\n\n#define SZ(x) ((int)x.size())\n#define ALL(V) V.begin(), V.end()\n#define L_B lower_bound\n#define U_B upper_bound\n#define pb push_back\n\nusing namespace std;\ntemplate<class T, class T2> inline int chkmax(T &x, const T2 &y) { return x < y ? x = y, 1 : 0; }\ntemplate<class T, class T2> inline int chkmin(T &x, const T2 &y) { return x > y ? x = y, 1 : 0; }\nconst int MAXN = (1 << 20);\n\nstring s;\nint k;\n\nvoid read()\n{\n\tcin >> s;\n\tcin >> k;\n}\n\nint type[MAXN];\n\nvoid solve()\n{\n\tstring t;\n\tfor(char c: s)\n\t{\n\t\tif(c == '?') type[t.size() - 1] = 1;\n\t\telse if(c == '*') type[t.size() - 1] = 2;\n\t\telse t.pb(c);\n\t}\n\n\tif(SZ(t) == k)\n\t{\n\t\tcout << t << endl;\n\t\treturn;\n\t}\n\n\tif(SZ(t) < k)\n\t{\n\t\tstring tmp;\n\t\tint additional = k - SZ(t);\n\t\tfor(int i = 0; i < SZ(t); i++)\n\t\t\tif(type[i] == 2)\n\t\t\t{\n\t\t\t\ttmp.pb(t[i]);\n\t\t\t\twhile(additional)\n\t\t\t\t\tadditional--, tmp.pb(t[i]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttmp.pb(t[i]);\n\t\t\t}\n\n\t\tif(SZ(tmp) < k) cout << \"Impossible\" << endl;\n\t\telse cout << tmp << endl;\n\t\treturn;\n\t}\n\n\tif(SZ(t) > k)\n\t{\n\t\tstring tmp;\n\t\tint need = SZ(t) - k;\n\t\tfor(int i = 0; i < SZ(t); i++)\n\t\t{\n\t\t\tif(need && type[i]) { need--; continue; }\n\t\t\ttmp.pb(t[i]);\n\t\t}\n\n\t\tif(need) cout << \"Impossible\" << endl;\n\t\telse cout << tmp << endl;\n\t\treturn;\n\t}\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL);\n\n\tread();\n\tsolve();\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Postcard.json",
    "editorial_link": "https://codeforces.com/blog/entry/64331",
    "editorial": "If the string in the postcard does not contain any snowflakes or candy\r\ncones, must be equal to the length of the string, because the only\r\nstring encoded by such message is the string itself, and in this case if\r\nis not equal to the length of the string, the answer is .Let\u00e2\u0080\u0099s call the\r\ncharacters of the message if they are not followed by snowflakes or\r\ncandy cones. Clearly should be at least the number of mandatory\r\ncharacters, otherwise the answer is .In case there a snowflake (*) in\r\nthe message, we can repeat the preceding character enough times to get\r\nthe length , and remove the rest of non-mandatory characters.If there\r\nare no snowflakes, but only candy cones, we should use the characters\r\nfollowed by candy cones until we get the desired length . In case we\r\ndon\u00e2\u0080\u0099t have enough, the answer is .\r\n"
}