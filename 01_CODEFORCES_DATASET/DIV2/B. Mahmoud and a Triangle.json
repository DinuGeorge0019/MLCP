{
    "link": "https://codeforces.com//contest/766/problem/B",
    "problemId": "92732",
    "problem_idx": "B",
    "shortId": "766B",
    "contest_number": "766",
    "problem_submissions": {
        "D": [
            24505946,
            24500916,
            24504908,
            24507791,
            24507596,
            24502515,
            24505444,
            24508821,
            24506093,
            24509131,
            24508400,
            24506164,
            24508411,
            24506236,
            24509954,
            24506157,
            24500663,
            24511147,
            24509915,
            24510742,
            24507071
        ],
        "C": [
            24503002,
            24497705,
            24503645,
            24497245,
            24504415,
            24507920,
            24498510,
            24499723,
            24502316,
            24500439,
            24497520,
            24497973,
            24498376,
            24502187,
            24500765,
            24500712,
            24509044,
            24499242,
            24501478,
            24510759
        ],
        "E": [
            24499598,
            24503926,
            24499034,
            24503749,
            24499107,
            24506022,
            24509883,
            24505215,
            24508282,
            24506448,
            24503360,
            24508753,
            24506776,
            24509196,
            24506537,
            24510465,
            24506832,
            24511136,
            24508039,
            24506667,
            24509589
        ],
        "B": [
            24494141,
            24493611,
            24500716,
            24498345,
            24502090,
            24496129,
            24493849,
            24494351,
            24495688,
            24493721,
            24507808,
            24494240,
            24493512,
            24496420,
            24496210,
            24495834,
            24507882,
            24494117,
            24496757,
            24494993
        ],
        "A": [
            24493013,
            24492877,
            24500045,
            24499173,
            24500116,
            24494575,
            24495318,
            24492979,
            24492967,
            24492862,
            24493192,
            24492913,
            24494460,
            24494158,
            24494086,
            24507606,
            24492997,
            24493480
        ]
    },
    "name": "B. Mahmoud and a Triangle",
    "statement": "Mahmoud has line segments, the -th of them has length . Ehab challenged\r\nhim to use line segments to form a non-degenerate triangle. Mahmoud\r\ndoesn\u2019t accept challenges unless he is sure he can win, so he asked you\r\nto tell him if he should accept the challenge. Given the lengths of the\r\nline segments, check if he can choose exactly of them to form a\r\nnon-degenerate triangle.Mahmoud should use exactly line segments, he\r\ncan\u2019t concatenate two line segments or change any length. A\r\nnon-degenerate triangle is a triangle with positive area.\r\n",
    "solutions": [
        "#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <cassert>\n#include <sstream>\n#include <numeric>\n#include <string>\n#include <vector>\n#include <cstdio>\n#include <bitset>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n\nusing namespace std;\n\n#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)\n#define np(v) next_permutation(v.begin(), v.end())\n#define pll pair < long long, long long>\n#define all(a) a.begin(), a.end()\n#define ull unsigned long long\n#define pii pair < int, int >\n#define sz(a) (int)a.size()\n#define sqr(x) ((x) * (x))\n#define y1 stupid_cmath\n#define vi vector <int>\n#define pb push_back\n#define mp make_pair\n#define ll long long\n#define f first\n#define s second\n\nconst int inf = (int)1e9;\nconst int mod = inf + 7;\nconst double eps = 1e-9;\nconst double pi = acos(-1.0);\n\nint n;\nll a[100100];\n\nint main(){\n    ios_base::sync_with_stdio(0), cin.tie(0);\n    cin >> n;\n    for(int i = 0; i < n; ++i){\n        cin >> a[i];\n    }\n    sort(a, a + n);\n    for(int i = 2; i < n; ++i){\n        if(a[i] < a[i - 1] + a[i - 2]) return cout << \"YES\" << endl, 0;\n    }\n    cout << \"NO\" << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "geometry",
        "greedy",
        "math",
        "number theory",
        "sortings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Mahmoud and a Triangle.json",
    "editorial_link": "https://codeforces.com//blog/entry/50294",
    "editorial": "Let x, y and z be the lengths of 3 line segments such that x???y???z, If they can't form a non-degenerate triangle, Line segments of lengths x?-?1, y and z or x, y and z?+?1 can't form a non-degenerate triangle, So we don't need to try all the combinations, If we try y as the middle one, We need to try the maximum x that is less than or equal to y and the minimum z that is greater than or equal to y, The easiest way to do so is to sort the line segments and try every consecutive 3.\n"
}