{"link": "https://codeforces.com//contest/1372/problem/E", "problemId": "665586", "problem_idx": "E", "shortId": "1372E", "contest_number": "1372", "problem_submissions": {"F": [86587331, 86592445], "D": [86567204, 86579473, 86577327, 86535735, 86539756, 86541547, 86541810, 86544261, 86545902, 86544858, 86551552, 86549456, 86551379, 86554398, 86555103, 86559228, 86553301], "C": [86542450, 86550447, 86544146, 86549498, 86526578, 86530081, 86532018, 86527267, 86533550, 86528779, 86532078, 86534770, 86530142, 86536030, 86548674, 86533586, 86533762, 86528487, 86532205], "B": [86530649, 86544843, 86528066, 86586370, 86518220, 86520050, 86527028, 86521440, 86521451, 86520560, 86523901, 86522899, 86522046, 86527358, 86530942, 86526972, 86524542, 86517410, 86521410], "A": [86513990, 86538518, 86515960, 86516941, 86513491, 86515289, 86513521, 86514849, 86514076, 86513724, 86514041, 86514826, 86513853, 86514635, 86523362, 86514036, 86514079, 86513422, 86513617], "E": [86584231, 86531273, 86583888, 86618428, 86570603]}, "name": "E. Omkar and Last Floor", "statement": "Omkar is building a house. He wants to decide how to make the floor plan\r\nfor the last floor.Omkar\u2019s floor starts out as n rows of m zeros (1\r\nle n,m\r\nle 100). Every row is divided into intervals such that every 0 in the\r\nrow is in exactly 1 interval. For every interval for every row, Omkar\r\ncan change exactly one of the 0s contained in that interval to a 1.\r\nOmkar defines the quality of a floor as the sum of the squares of the\r\nsums of the values in each column, i. e. if the sum of the values in the\r\ni-th column is q_i, then the quality of the floor is\r\nsum_{i = 1}^m q_i^2.Help Omkar find the maximum quality that the floor\r\ncan have.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define int ll\ntypedef pair<int,int> ii;\n#define db(x) cout<<#x<<\" = \"<<x<<\"\\n\";\n#define fore(i,a,b) for(int i=a,ggdem=b;i<ggdem;i++)\n#define FIN ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)\n#define SZ(a) ((int)(a).size())\n#define ALL(a) a.begin(),a.end()\n#define mset(a,b) memset(a,b,sizeof(a));\n#define pb push_back\n#define fst first\n#define snd second\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\n\nconst int N=101;\nint n,m,a[N][N],id[N][N],vis[N][N],l[N][N],r[N][N],dp[N][N];\nvector<ii>g[N*N];\nint solve(int i,int j) {\n  if(i>j)return 0;\n  if(dp[i][j]!=-1)return dp[i][j];\n  int res=0;\n  fore(col,i,j+1) {\n    int cur=0;\n    fore(row,0,n)if(i<=l[row][col] && r[row][col]<=j)cur++;\n    res=max(res,solve(i,col-1)+cur*cur+solve(col+1,j));\n  }\n  return dp[i][j]=res;\n}\nvoid debug() {\n  cout<<\"done input\"<<endl;\n  cout<<\"id:\"<<endl;fore(i,0,n){fore(j,0,m)cout<<id[i][j]<<\" \";cout<<endl;}\n  cout<<\"l:\"<<endl;fore(i,0,n){fore(j,0,m)cout<<l[i][j]<<\" \";cout<<endl;}\n  cout<<\"r:\"<<endl;fore(i,0,n){fore(j,0,m)cout<<r[i][j]<<\" \";cout<<endl;}\n  cout<<\"g: \"<<endl;\n  fore(i,0,n*m) {\n    if(!(SZ(g[i])))continue;\n    cout<<i<<\" : \";for(auto it:g[i])cout<<it.fst<<\" \"<<it.snd<<endl;\n  }\n}\nmain() {FIN;\n  memset(dp,-1,sizeof(dp));\n  cin>>n>>m;\n  fore(i,0,n) {\n    int k,cur=0;cin>>k;\n    while(k--) {\n      int x,y;cin>>x>>y;\n      x=y-x+1;\n      fore(j,0,x) {\n        id[i][cur+j]=m*i+cur;\n        l[i][cur+j]=cur,r[i][cur+j]=cur+x-1;\n        g[id[i][cur+j]].pb({i,cur+j});\n      }\n      cur+=x;\n    }\n  }\n  // debug();\n  cout<<solve(0,m-1)<<\"\\n\";\n}"], "input": "", "output": "", "tags": ["dp", "greedy", "two pointers"], "dificulty": "2900", "interactive": false}