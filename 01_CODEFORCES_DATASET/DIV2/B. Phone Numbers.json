{
    "link": "https://codeforces.com//contest/151/problem/B",
    "problemId": "935",
    "problem_idx": "B",
    "shortId": "151B",
    "contest_number": "151",
    "problem_submissions": {
        "D": [
            1191288,
            1190982,
            1192075,
            1188622,
            1191064,
            1192743,
            1193614,
            1191724,
            1192528,
            1193223,
            1188963,
            1193176,
            1193652,
            1193586,
            1193699,
            1194530
        ],
        "C": [
            1189986,
            1190106,
            1190645,
            1190418,
            1193125,
            1191423,
            1190313,
            1193505,
            1191825,
            1191803,
            1193463,
            1191879,
            1191139,
            1192438,
            1191193,
            1191323
        ],
        "B": [
            1188864,
            1188485,
            1189628,
            1193411,
            1189152,
            1189396,
            1188819,
            1188853,
            1189550,
            1189820,
            1191583,
            1190692,
            1189320,
            1189623,
            1188981,
            1189626
        ],
        "A": [
            1187303,
            1186976,
            1188162,
            1194214,
            1187098,
            1187126,
            1187027,
            1187048,
            1187460,
            1187074,
            1189804,
            1187622,
            1187259,
            1188213,
            1187014,
            1187154
        ]
    },
    "name": "B. Phone Numbers",
    "statement": "Winters are just damn freezing cold in Nvodsk! That\u2019s why a group of\r\nfriends prefers to take a taxi, order a pizza and call girls. The phone\r\nnumbers in the city consist of three pairs of digits (for example,\r\n12-34-56). Each friend has a phonebook of size (that\u2019s the number of\r\nphone numbers). We know that taxi numbers consist of six identical\r\ndigits (for example, 22-22-22), the numbers of pizza deliveries should\r\nnecessarily be decreasing sequences of six different digits (for\r\nexample, 98-73-21), all other numbers are the girls\u2019 numbers.You are\r\ngiven your friends\u2019 phone books. Calculate which friend is best to go to\r\nwhen you are interested in each of those things (who has maximal number\r\nof phone numbers of each type). If the phone book of one person contains\r\nsome number two times, you should count it . That is, each number should\r\nbe taken into consideration the number of times it occurs in the phone\r\nbook.\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <cstdio>\n#include <cstdlib>\n#include <queue>\n#include <map>\nusing namespace std;\n\nstruct person\n{\n\tstring name;\n\tint arr[3];\n};\n\nint get_number_type(string number)\n{\n\tif(number[0] == number[1] && number[1] == number[3] &&\n\t\tnumber[3] == number[4] && number[4] == number[6] && number[6] == number[7])\n\t{\n\t\treturn 0;\n\t}\n\tif(number[0] > number[1] && number[1] > number[3] &&\n\t\tnumber[3] > number[4] && number[4] > number[6] && number[6] > number[7])\n\t{\n\t\treturn 1;\n\t}\n\treturn 2;\n}\n\nperson m[105];\n\nint main()\n{\n\tint n;\n\tcin >> n;\n\tint i;\n\tint max_arr[3] = {0, 0, 0};\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tint s;\n\t\tperson p;\n\t\tp.arr[0] = 0;\n\t\tp.arr[1] = 0;\n\t\tp.arr[2] = 0;\n\t\tcin >> s >> p.name;\n\t\tint j;\n\t\tstring number;\n\t\tfor(j = 0; j < s; j++)\n\t\t{\n\t\t\tcin >> number;\n\t\t\tp.arr[get_number_type(number)]++;\n\t\t}\n\t\tfor(j = 0; j < 3; j++)\n\t\t{\n\t\t\tif(p.arr[j] > max_arr[j])\n\t\t\t{\n\t\t\t\tmax_arr[j] = p.arr[j];\n\t\t\t}\n\t\t}\n\t\tm[i] = p;\n\t}\n\tstring prefixes[3] = {\n\t\t\"If you want to call a taxi, you should call: \",\n\t\t\"If you want to order a pizza, you should call: \",\n\t\t\"If you want to go to a cafe with a wonderful girl, you should call: \",\n\t};\n\tfor(i = 0; i < 3; i++)\n\t{\n\t\tint j;\n\t\tstring str = \"\";\n\t\tfor(j = 0; j < n; j++)\n\t\t{\n\t\t\tif(m[j].arr[i] == max_arr[i])\n\t\t\t{\n\t\t\t\tif(str == \"\")\n\t\t\t\t{\n\t\t\t\t\tstr = m[j].name;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstr += \", \";\n\t\t\t\t\tstr += m[j].name;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstr += \".\";\n\t\tcout << prefixes[i] << str << endl;\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Phone Numbers.json",
    "editorial_link": "https://codeforces.com//blog/entry/3905",
    "editorial": "In this task you were to implement the described selection of the\r\nmaximum elements.\r\n"
}