{
    "link": "https://codeforces.com//contest/738/problem/D",
    "problemId": "81058",
    "problem_idx": "D",
    "shortId": "738D",
    "contest_number": "738",
    "problem_submissions": {
        "E": [
            22355357,
            22354524,
            22368260,
            22349644,
            22355331,
            22356088,
            22356163,
            22356096,
            22357408,
            22351061,
            22356973,
            22355298,
            22358187,
            22357834,
            22357953,
            22357991,
            22358891,
            22358107,
            22359096,
            22358176,
            22359681
        ],
        "D": [
            22352887,
            22353039,
            22402501,
            22352355,
            22352815,
            22351941,
            22352850,
            22352916,
            22350647,
            22353806,
            22348566,
            22353986,
            22349405,
            22355113,
            22351157,
            22350006,
            22354616,
            22352089,
            22346385,
            22351808,
            22354557
        ],
        "C": [
            22348617,
            22348545,
            22351859,
            22348840,
            22349718,
            22349641,
            22349601,
            22352863,
            22355987,
            22353264,
            22351200,
            22353844,
            22349294,
            22354485,
            22353883,
            22349940,
            22349844,
            22371503,
            22354418,
            22355326,
            22351271
        ],
        "B": [
            22345078,
            22345223,
            22347131,
            22345520,
            22345422,
            22345771,
            22345810,
            22346401,
            22348268,
            22345003,
            22348061,
            22346211,
            22344435,
            22345892,
            22345784,
            22345313,
            22344813,
            22347694,
            22347099,
            22346201
        ],
        "A": [
            22343882,
            22343979,
            22345882,
            22343953,
            22344058,
            22344097,
            22344370,
            22344195,
            22346397,
            22343753,
            22346250,
            22343907,
            22343833,
            22344008,
            22343904,
            22343686,
            22344348,
            22345077
        ],
        "F": [
            22415691,
            22576726,
            22658711,
            22371212,
            22371207,
            22371193,
            22371178,
            22371166,
            22368114,
            22469249,
            22468405,
            22458802
        ]
    },
    "name": "D. Sea Battle",
    "statement": "Galya is playing one-dimensional Sea Battle on a grid. In this game\r\nships are placed on the grid. Each of the ships consists of consecutive\r\ncells. No cell can be part of two ships, however, the ships each\r\nother.Galya doesn\u2019t know the ships location. She can shoot to some cells\r\nand after each shot she is told if that cell was a part of some ship\r\n(this case is called \"hit\") or not (this case is called \"miss\").Galya\r\nhas already made shots, all of them were misses.Your task is to\r\ncalculate the minimum number of cells such that if Galya shoot at all of\r\nthem, she would hit at least one ship.It is guaranteed that there is at\r\nleast one valid ships placement.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <algorithm>\n#include <set>\n#include <unordered_map>\nusing namespace std;\n\nint n, a, b, k;\nbool t[1000000];\nbool gd[1000000];\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin >> n >> a >> b >> k;\n    string s;\n    cin >> s;\n    for (int i = 0; i < s.length(); i++)\n    {\n        t[i + 1] = bool(s[i] - '0');\n    }\n\n    vector < pair <int, int> > sz;\n    int calc = 0;\n    int cr = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        if (t[i])\n        {\n            if (cr > 0)\n                sz.push_back(make_pair(i - cr, cr));\n            calc += cr / b;\n            cr = 0;\n        } else\n        {\n            cr++;\n        }\n    }\n    if (cr > 0)\n        sz.push_back(make_pair(n + 1 - cr, cr));\n    calc += cr / b;\n    vector <int> ans;\n    for (int i1 = 0; i1 < sz.size(); i1++)\n    {\n        int l = sz[i1].second;\n        int i = sz[i1].first;\n        int rr = i + l;\n        int cl = l / b;\n        for (int q = 0; q <= cl; q++)\n        {\n            int st = b;\n            if (i + l % b >= rr)\n            {\n                break;\n            }\n\n            ans.push_back(i + l % b);\n            if (ans.size() == calc - a + 1)\n            {\n                cout << ans.size() << endl;\n                for (auto tp : ans)\n                {\n                    cout << tp << \" \";\n                }\n                cout << endl;\n                return 0;\n            }\n\n            i += b;\n        }\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Sea Battle.json",
    "editorial_link": "https://codeforces.com//blog/entry/48501",
    "editorial": "Let's note that in on the field there are b zeroes in a row we must to shoot in at least one of them. We suppose that all ships was pressed to the right. Let's put the number 2 in cells where ships can be placed. Then iterate through the field from the left to the right and shoot in the cell if there is 0 and before it was b?-?1 zero in a row. After iteration ended it is left only to shoot in any cell which value equals to 2. All described shoots are the answer for this problem.\n"
}