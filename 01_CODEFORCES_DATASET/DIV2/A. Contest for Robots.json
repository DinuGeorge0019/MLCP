{
    "link": "https://codeforces.com//contest/1321/problem/A",
    "problemId": "551760",
    "problem_idx": "A",
    "shortId": "1321A",
    "contest_number": "1321",
    "problem_submissions": {
        "F": [
            72202118,
            72198416
        ],
        "C": [
            72190499,
            72170310,
            72171527,
            72174502,
            72175483,
            72175401,
            72175000,
            72176189,
            72171238,
            72175883,
            72177727,
            72183189,
            72179214,
            72177328,
            72279003,
            72174053,
            72178214,
            72178070,
            72179504,
            72179152,
            72178320
        ],
        "D": [
            72183268,
            72175184,
            72177797,
            72179168,
            72180779,
            72181426,
            72180644,
            72182068,
            72185885,
            72181701,
            72186041,
            72179938,
            72186063,
            72181326,
            72178168,
            72183258,
            72185462,
            72184740,
            72187220,
            72184221
        ],
        "E": [
            72180529,
            72186287,
            72184508,
            72188609,
            72188377,
            72190998,
            72191625,
            72192736,
            72180513,
            72191278,
            72214882,
            72192856,
            72193973,
            72192866,
            72196349,
            72194892,
            72194887,
            72194595,
            72195594,
            72195787
        ],
        "A": [
            72173172,
            72167016,
            72167934,
            72167935,
            72169001,
            72167363,
            72167505,
            72167646,
            72189321,
            72167844,
            72168400,
            72167413,
            72168727,
            72167365,
            72278985,
            72168080,
            72169683,
            72169011,
            72168321,
            72167972,
            72167569
        ],
        "B": [
            72168656,
            72168025,
            72169238,
            72170413,
            72171089,
            72169057,
            72169880,
            72170679,
            72187620,
            72171095,
            72171827,
            72169625,
            72172515,
            72169721,
            72170650,
            72172323,
            72173484,
            72170425,
            72174186,
            72171595
        ]
    },
    "name": "A. Contest for Robots",
    "statement": "Polycarp is preparing the first programming contest for robots. There\r\nare n problems in it, and a lot of robots are going to participate in\r\nit. Each robot solving the problem i gets p_i points, and the score of\r\neach robot in the competition is calculated as the sum of p_i over all\r\nproblems i solved by it. For each problem, p_i is an integer not less\r\nthan 1.Two corporations specializing in problem-solving robot\r\nmanufacturing, \"Robo-Coder Inc.\" and \"BionicSolver Industries\", are\r\ngoing to register two robots (one for each corporation) for\r\nparticipation as well. Polycarp knows the advantages and flaws of robots\r\nproduced by these companies, so, for each problem, he knows precisely\r\nwhether each robot will solve it during the competition. Knowing this,\r\nhe can try predicting the results or manipulating them. For some reason\r\n(which absolutely cannot involve bribing), Polycarp wants the\r\n\"Robo-Coder Inc.\" robot to outperform the \"BionicSolver Industries\"\r\nrobot in the competition. Polycarp wants to set the values of p_i in\r\nsuch a way that the \"Robo-Coder Inc.\" robot gets points than the\r\n\"BionicSolver Industries\" robot. However, if the values of p_i will be\r\nlarge, it may look very suspicious so Polycarp wants to minimize the\r\nmaximum value of p_i over all problems. Can you help Polycarp to\r\ndetermine the minimum possible upper bound on the number of points given\r\nfor solving the problems?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define in ({int x=0;int c=getchar(),n=0;for(;!isdigit(c);c=getchar()) n=(c=='-');for(;isdigit(c);c=getchar()) x=x*10+c-'0';n?-x:x;})\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nint rnd(int l,int r){return l+rng()%(r-l+1);}\n#define fasty ios_base::sync_with_stdio(0),cin.tie(0);\n#define forinc(a,b,c) for(int a=b,_c=c;a<=_c;++a)\n#define fordec(a,b,c) for(int a=b,_c=c;a>=_c;--a)\n#define forv(a,b) for(auto&a:b)\n#define fi first\n#define se second\n#define pb push_back\n#define ii pair<int,int>\n#define mt make_tuple\n#define all(a) a.begin(),a.end()\n#define reset(f, x) memset(f, x, sizeof(f))\n#define bit(x,i) ((x>>(i-1))&1)\n#define on(x,i) (x|(1ll<<(i-1)))\n#define off(x,i) (x&~(1<<(i-1)))\n#define gg exit(0);\n\nconst int N=200010;\n\nint n;\nint a[N],b[N];\n\nmain(){\n    #define task \"TASK\"\n    //freopen(task\".inp\",\"r\",stdin);\n    //freopen(task\".out\",\"w\",stdout);\n\n    n=in;\n    forinc(i,1,n) a[i]=in;\n    forinc(i,1,n) b[i]=in;\n\n    int x=0,y=0;\n    forinc(i,1,n){\n        if(a[i]^b[i])\n            x+=a[i], y+=b[i];\n    }\n    if(!x) return cout<<-1,0;\n    if(x>y) return cout<<1,0;\n    cout<<y/x+1;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Contest for Robots.json",
    "editorial_link": "https://codeforces.com//blog/entry/74431",
    "editorial": "Score distribution for problems having is irrelevant (we can make for\r\nall of them). Letâs consider the remaining problems.Suppose we have\r\nproblems solved by the first robot (and not solved by the second one),\r\nand problems solved by the second robot (and not solved by the first\r\none). If , then the score of the first robot wonât exceed the score of\r\nthe second robot by any means, so the answer is .Otherwise, we can set\r\nthe score for problems solved by the first robot to some number , and\r\nthe score for all remaining problems to . Then, the condition must hold,\r\nor , so is the answer. Note that the constraints allow us to iterate on\r\ninstead of implementing a formula for it.\r\n",
    "hint": []
}