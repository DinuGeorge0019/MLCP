{
    "link": "https://codeforces.com//contest/1956/problem/B",
    "problemId": "2588542",
    "problem_idx": "B",
    "shortId": "1956B",
    "contest_number": "1956",
    "problem_submissions": {
        "E2": [
            256586454,
            256520068,
            256593913,
            256584316,
            256530034,
            256531943,
            256617463,
            256530865,
            256802937,
            256648508,
            256552517
        ],
        "F": [
            256530495,
            256522758,
            256514971,
            256533550,
            256538415
        ],
        "E1": [
            256505148,
            256506481,
            256593956,
            256525162,
            256511611,
            256531463,
            256583839,
            256517737,
            256520564,
            256527984,
            256521079,
            256525566,
            256521334,
            256530001,
            256521675,
            256525396,
            256535359,
            256525874,
            256529271
        ],
        "D": [
            256490682,
            256484072,
            256499658,
            256496427,
            256507516,
            256497830,
            256509043,
            256518890,
            256503281,
            256502580,
            256513745,
            256510694,
            256502427,
            256508396,
            256502061,
            256511658,
            256506094,
            256504568,
            256506260,
            256504200
        ],
        "C": [
            256481140,
            256475175,
            256487231,
            256481616,
            256488132,
            256485599,
            256493794,
            256476985,
            256483699,
            256486860,
            256497932,
            256487782,
            256477155,
            256486111,
            256486350,
            256491079,
            256480941,
            256486971,
            256480982,
            256485785
        ],
        "B": [
            256472484,
            256473000,
            256480823,
            256472874,
            256473325,
            256479701,
            256477112,
            256472735,
            256473445,
            256477448,
            256476511,
            256477221,
            256472449,
            256475342,
            256477910,
            256471353,
            256472967,
            256472966,
            256473168,
            256475591
        ],
        "A": [
            256471122,
            256471242,
            256472786,
            256473979,
            256471107,
            256479866,
            256471283,
            256471128,
            256471039,
            256472531,
            256472351,
            256472781,
            256471086,
            256471438,
            256477739,
            256470907,
            256471074,
            256471160,
            256471053,
            256472375
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/128426",
    "editorial": "TutorialFor each color (in the following text, \"this point\" refers to\r\nthe point someone got by playing a card with this color): If you have\r\nboth cards of this color in your hand, you will be able to get this\r\npoint. If Nene has both cards, you will not be able to get this point.\r\nIf you have only one card, you cannot get this point when Nene is using\r\nthe following strategy: When you play one of your paired cards, Nene\r\nalso plays one of her paired cards; Otherwise, Nene will have the card\r\nwith the same color. She can play it and get this point. Therefore, the\r\nanswer will be the amount of pairs in your hand.\r\n",
    "name": "B. Nene and the Card Game",
    "statement": "You and Nene are playing a card game. The deck with 2n cards is used to\r\nplay this game. Each card has an integer from 1 to n on it, and each of\r\nintegers 1 through n appears exactly on 2 cards. Additionally, there is\r\na table where cards are placed during the game (initially, the table is\r\nempty).In the beginning of the game, these 2n cards are distributed\r\nbetween you and Nene so that each player receives n cards. After it, you\r\nand Nene alternatively take 2n turns, i.e. each person takes n turns, .\r\nOn each turn: The player whose turn is it selects one of the cards in\r\nhis hand. Let x be the number on it. The player whose turn is it\r\nreceives 1 point if there is already a card with the integer x on the\r\ntable (otherwise, he receives no points). After it, he places the\r\nselected card with the integer x on the table. Note that turns are made\r\npublicly: each player can see all the cards on the table at each\r\nmoment.Nene is very smart so she always selects cards optimally in order\r\nto maximize her score in the end of the game (after 2n rounds). If she\r\nhas several optimal moves, she selects the move that minimizes your\r\nscore in the end of the game.More formally, Nene always takes turns\r\noptimally in order to maximize her score in the end of the game in the\r\nfirst place and to minimize your score in the end of the game in the\r\nsecond place.Assuming that the cards are already distributed and cards\r\nin your hand have integers a_1, a_2,\r\nldots, a_n written on them, what is the maximum number of points you can\r\nget by taking your turns optimally?\r\n",
    "solutions": [
        "// Problem: B. Nene and the Card Game// Contest: Codeforces - Codeforces Round 939 (Div. 2)// URL: https://mirror.codeforces.com/contest/1956/problem/B// Memory Limit: 256 MB// Time Limit: 1000 ms// // Powered by CP Editor (https://cpeditor.org) // Author: EnucAI#include <bits/stdc++.h> #ifdef LOCAL#include \"debug.h\"#else#define D(...) ((void)0)#endif using ll = long long;using ull = unsigned long long;using ld = long double;using vi = std::vector<int>;using pii = std::pair<int, int>; constexpr int inf = std::numeric_limits<int>::max() / 2;constexpr ll infll = std::numeric_limits<ll>::max() / 2;constexpr ld eps = 1e-8l; #define all(x) (x).begin(), (x).end()#define sz(x) ((int)((x).size()))#define rep(i, j, k) for (int i = (j); i <= (k); i++)#define per(i, j, k) for (int i = (j); i >= (k); i--)#define fi first#define se second#define mp std::make_pair#define pb push_back#define ppb pop_back#define eb emplace_back template <class X, class Y> void chkmax(X &x, const Y &y) { if (x < y) x = y; }template <class X, class Y> void chkmin(X &x, const Y &y) { if (x > y) x = y; } constexpr int maxn = 2e5 + 5; int n, a[maxn], cnt[maxn]; void solve() {  std::cin >> n;  std::fill(cnt + 1, cnt + n + 1, 0);  rep(i, 1, n) std::cin >> a[i], cnt[a[i]]++;  int ans = 0;  rep(i, 1, n) if (cnt[i] == 2) ans++;  std::cout << ans << '\\n';} int main() {  std::cin.tie(nullptr)->sync_with_stdio(false);  int t;  std::cin >> t;  while (t--) solve();}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "greedy"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Nene and the Card Game.json",
    "hint": []
}