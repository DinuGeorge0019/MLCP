{
    "link": "https://codeforces.com//contest/1946/problem/B",
    "problemId": "2546662",
    "problem_idx": "B",
    "shortId": "1946B",
    "contest_number": "1946",
    "problem_submissions": {
        "F": [
            252778634,
            252785320,
            252786013,
            252792288,
            252797773,
            252760159,
            252805049,
            252802973,
            252797418,
            252804807,
            252802498,
            252803677,
            252806450,
            252799639,
            252798045,
            252805458,
            253149787,
            253149764,
            252804697,
            252968362,
            252967816,
            252967536,
            252967308,
            252806243,
            252801898,
            252945361
        ],
        "E": [
            252767893,
            252755066,
            252775649,
            252778497,
            252788255,
            252768645,
            252781620,
            252778378,
            252791272,
            252783666,
            252792255,
            252787037,
            252788438,
            252796123,
            252791048,
            252789043,
            253149820,
            252796931,
            252794065,
            252793295,
            252769537
        ],
        "D": [
            252762969,
            252760657,
            252762929,
            252773084,
            252775710,
            252791493,
            252768538,
            252788123,
            252780760,
            252772529,
            252780806,
            252771784,
            252771623,
            252765540,
            252785160,
            252771914,
            253149843,
            252783465,
            252776484,
            252789596,
            252761305
        ],
        "C": [
            252755980,
            252750182,
            252755510,
            252756532,
            252756457,
            252786638,
            252755577,
            252760887,
            252765082,
            252758814,
            252754307,
            252762090,
            252762611,
            252762199,
            252764272,
            252764206,
            253149881,
            252762872,
            252757806,
            252747947,
            252752185
        ],
        "B": [
            252751889,
            252748922,
            252750334,
            252750610,
            252747768,
            252788061,
            252749547,
            252752546,
            252752071,
            252751826,
            252749973,
            252750830,
            252751955,
            252750419,
            252760194,
            252752821,
            253149896,
            252756666,
            252745823,
            252761849,
            252754627
        ],
        "A": [
            252743735,
            252744280,
            252743830,
            252744601,
            252743817,
            252788730,
            252743641,
            252745268,
            252744800,
            252746033,
            252743616,
            252744372,
            252744103,
            252744348,
            252750764,
            252744631,
            253149908,
            252746630,
            252743684,
            252757716,
            252743737
        ]
    },
    "name": "B. Maximum Sum",
    "statement": "You have an array a of n integers.You perform exactly k operations on\r\nit. In one operation, you select any contiguous subarray of the array a\r\n(possibly empty) and insert the sum of this subarray anywhere in the\r\narray.Your task is to find the maximum possible sum of the array after k\r\nsuch operations.As this number can be very large, output the answer\r\nmodulo 10^9 + 7.Reminder: the remainder of a number x modulo p is the\r\nsmallest non-negative y such that there exists an integer q and x = p\r\ncdot q + y.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define MP make_pair\nmt19937 rnd(time(0));\nconst int MAXN=2e5+5;\nconst int MOD=1e9+7;\nll n,k,a[MAXN];\nll ksm(ll a,int b){ll r=1;while(b){if(b&1)r=r*a%MOD;a=a*a%MOD,b>>=1;}return r;}\nvoid solve(){\n\tcin>>n>>k;\n\tfor(int i=1;i<=n;i++) cin>>a[i],a[i]+=a[i-1];\n\tll s=0,mn=0;\n\tfor(int i=1;i<=n;i++){\n\t\tmn=min(mn,a[i]);\n\t\ts=max(s,a[i]-mn);\n\t}\n\tcout<<((a[n]+s%MOD*(ksm(2,k)-1))%MOD+MOD)%MOD<<'\\n';\n}\nint main(){\n\tios::sync_with_stdio(false);\n\t// freopen(\"Otomachi_Una.in\",\"r\",stdin);\n\t// freopen(\"Otomachi_Una.out\",\"w\",stdout);\n\tint _;cin>>_;\n\twhile(_--) solve();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Maximum Sum.json",
    "editorial_link": "https://codeforces.com//blog/entry/127439",
    "editorial": "Letâs denote as the sum of the original array and as the sum of the\r\nsubarray with the maximum sum from the original array.We solve the\r\nproblem when equals . In this case, we need to find the subarray of the\r\narray with the maximum sum and insert this sum anywhere in the array, so\r\nthe answer is . Now, let be . In this case, there is already a value\r\nwhere we insert the sum of the subarray with the maximum sum. Then we\r\ncan increase the sum of the subarray with the maximum sum by no more\r\nthan (we can increase it by simply by inserting it into the subarray\r\nwith the maximum sum), and obtain the sum of the subarray with the\r\nmaximum sum . Then insert it anywhere in the array, thus obtaining the\r\nsum of the final array equal to . Similarly, for any , the sum of the\r\nsubarray with the maximum sum is initially , then , then , , , then the\r\nanswer is equal to .\r\n",
    "hint": []
}