{
    "link": "https://codeforces.com//contest/1269/problem/E",
    "problemId": "499891",
    "problem_idx": "E",
    "shortId": "1269E",
    "contest_number": "1269",
    "problem_submissions": {
        "C": [
            67352706,
            67342506,
            67340660,
            67342809,
            67344956,
            67331477,
            67339107,
            67340486,
            67338149,
            67340091,
            67338156,
            67347782,
            67341549,
            67341600,
            67342294,
            67342344,
            67342829,
            67330241
        ],
        "E": [
            67349858,
            67364589,
            67368127,
            67360428,
            67362487,
            67407644,
            67361816,
            68037838
        ],
        "D": [
            67339478,
            67353948,
            67348917,
            67364550,
            67364311,
            67334215,
            67340431,
            67341741,
            67338198,
            67342873,
            67348426,
            67348708,
            67343994,
            67344243,
            67344039,
            67350135,
            67345192,
            67346296,
            67343602
        ],
        "B": [
            67337312,
            67377870,
            67335347,
            67345749,
            67336939,
            67340567,
            67339027,
            67334414,
            67335423,
            67344354,
            67335379,
            67396814,
            67341834,
            67332604,
            67337610,
            67338071,
            67337253,
            67332987,
            67335282,
            67336511,
            67345383
        ],
        "A": [
            67331771,
            67329729,
            67330308,
            67335502,
            67337021,
            67336156,
            67329958,
            67329769,
            67338898,
            67330168,
            67396807,
            67337525,
            67329686,
            67329755,
            67331194,
            67331352,
            67329912,
            67329806,
            67330184,
            67340611
        ]
    },
    "name": "E. K Integers",
    "statement": "You are given a permutation p_1, p_2,\r\nldots, p_n.In one move you can swap two adjacent values.You want to\r\nperform a minimum number of moves, such that in the end there will exist\r\na subsegment 1,2,\r\nldots, k, in other words in the end there should be an integer i, 1\r\nleq i\r\nleq n-k+1 such that p_i = 1, p_{i+1} = 2,\r\nldots, p_{i+k-1}=k.Let f(k) be the minimum number of moves that you need\r\nto make a subsegment with values 1,2,\r\nldots,k appear in the permutation.You need to find f(1), f(2),\r\nldots, f(n).\r\n",
    "solutions": [
        "//#pragma GCC optimize(\"Ofast\")\n//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx\")\n\n#include<bits/stdc++.h>\n\n#define pb push_back\n#define F first\n#define S second\n#define ll long long\n#define ld long double\n#define null nullptr\n#define _ <<' '<<\n#define endl '\\n'\n\nusing namespace std;\n\nmt19937 gen(chrono::high_resolution_clock::now().time_since_epoch().count());\n\nconst int N = 2e5 + 7;\nconst int maxn = 262144;\nconst int M = 1e9 + 7;\n//const int M = 998244353;\nconst int FFTM = 998244353;\n\nstruct segtree\n{\n    int T[maxn * 2 + 5];\n    void update(int p, int x)\n    {\n        int v = p + maxn;\n        while(v > 0)\n        {\n            T[v] += x;\n            v >>= 1;\n        }\n        return;\n    }\n    int z()\n    {\n        int v = 1;\n        int need = T[1] / 2;\n        while(v < maxn)\n        {\n            if (T[v << 1] <= need)\n            {\n                need -= T[v << 1];\n                v = v << 1 | 1;\n            }\n            else\n            {\n                if (T[v << 1] > 0)\n                    v = v << 1;\n                else\n                    v = v << 1 | 1;\n            }\n        }\n        return v - maxn;\n    }\n};\n\nstruct fenwik\n{\n    ll t[N];\n\n    fenwik()\n    {\n        for (int i = 0; i < N; i++)\n            t[i] = 0;\n    }\n\n    void upd(int p, ll x)\n    {\n        p += 2;\n        for (; p < N; p += p&-p)\n            t[p] += x;\n    }\n\n    ll q(int p)\n    {\n        p += 2;\n        ll res = 0;\n        for (; p > 0; p -= p&-p)\n            res += t[p];\n        return res;\n    }\n\n    ll q(int l, int r)\n    {\n        return q(r) - q(l - 1);\n    }\n};\n\nll f(ll x)\n{\n    return x*(x - 1)/2ll;\n}\n\nll n, x[N], pos[N], dp[N];\nfenwik t;\nsegtree T;\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n#ifdef LOCAL\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n#endif // LOCAL\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        cin >> x[i];\n        pos[x[i] - 1] = i;\n    }\n    for (int i = n - 1; i >= 0; i--)\n    {\n        dp[i] = t.q(x[i]);\n        t.upd(x[i], 1);\n    }\n    ll cur = 0;\n    fenwik all;\n    fenwik cnt;\n    for (int i = 0; i < n; i++)\n    {\n        cur += dp[pos[i]];\n        all.upd(pos[i], pos[i]);\n        cnt.upd(pos[i], 1);\n        T.update(pos[i], 1);\n        int m = T.z();\n        ll kl = cnt.q(m);\n        ll kr = cnt.q(m + 1, N - 4);\n        ll l = kl*m - all.q(m) - f(kl);\n        ll r = all.q(m + 1, N - 4) - kr*(m + 1) - f(kr);\n\n        cout << cur + l + r << ' ';\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. K Integers.json",
    "editorial_link": "https://codeforces.com//blog/entry/72358",
    "editorial": "At first, letâs add to the answer number of inversions among numbers\r\n.After that, letâs say that is one, and is zero.Then you need to\r\ncalculate the smallest number of swaps to make segment of length appear\r\nin the permutation. For this, letâs call the number of ones on the\r\nprefix.For all we need to add to the answer (it is an obvious lower\r\nbound, and it is simple to prove that we always can do one operation to\r\nreduce this total value by one).How to calculate this for each ? Letâs\r\nmove from to . You can maintain number of inversions with BIT. To\r\ncalculate the second value, you can note that you just need to find -th\r\nnumber and add values at the left and add the right with different\r\ncoefficients. To maintain them, you can recalculate everything when you\r\nare moving the median (in heap). But also it is possible to maintain the\r\nsegment tree by and just take some sum.\r\n",
    "hint": []
}