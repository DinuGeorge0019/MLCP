{
    "link": "https://codeforces.com//contest/1720/problem/E",
    "problemId": "1512387",
    "problem_idx": "E",
    "shortId": "1720E",
    "contest_number": "1720",
    "problem_submissions": {
        "E": [
            168846777,
            168840544,
            168827050,
            168859240,
            168862248,
            168861844,
            168862010,
            168825889,
            168916027,
            168877554,
            168901697,
            168883239
        ],
        "D2": [
            168835694,
            168850679,
            168839552,
            168830934,
            168845483,
            168843478,
            168832795,
            168821250,
            168836283,
            168852109,
            168831844,
            168842245,
            168839190,
            168846298,
            168842200,
            168837729,
            168842524
        ],
        "D1": [
            168824858,
            168826632,
            168839665,
            168830830,
            168827889,
            168830140,
            168824710,
            168836162,
            168821401,
            168836396,
            168823758,
            168831963,
            168842466,
            168825766,
            168831343,
            168842031,
            168837590,
            168842611
        ],
        "C": [
            168811322,
            168813329,
            168842584,
            168815215,
            168819795,
            168819474,
            168819456,
            168850754,
            168812287,
            168814430,
            168814760,
            168822741,
            168815241,
            168811935,
            168821777,
            168817839,
            168814181,
            168823921,
            168820025
        ],
        "A": [
            168809810,
            168807059,
            168846238,
            168808208,
            168810706,
            168809379,
            168807927,
            168854111,
            168807247,
            168807149,
            168808346,
            168808021,
            168807215,
            168848108,
            168807353,
            168808693,
            168807411,
            168807295,
            168808471
        ],
        "B": [
            168807225,
            168807985,
            168844246,
            168809736,
            168814160,
            168814167,
            168862630,
            168852491,
            168808670,
            168808487,
            168810496,
            168816414,
            168815954,
            168809438,
            168816039,
            168810273,
            168810419,
            168815510,
            168813227
        ]
    },
    "name": "E. Misha and Paintings",
    "statement": "Misha has a n\r\ntimes n matrix, where the number in row i and column j is equal to a_{i,\r\nj}. Misha wants to modify the matrix to contain k distinct integers. To\r\nachieve this goal, Misha can perform the following operation zero or\r\nmore times: choose any submatrix of the matrix (you choose (x_1,y_1),\r\n(x_2,y_2), such that x_1\r\nleq x_2, y_1\r\nleq y_2, x_2 - x_1 = y_2 - y_1, then submatrix is a set of cells with\r\ncoordinates (x, y), such that x_1\r\nleq x\r\nleq x_2, y_1\r\nleq y\r\nleq y_2), choose an integer k, where 1\r\nleq k\r\nleq n^2, replace all integers in the submatrix with k. Please find the\r\nminimum number of operations that Misha needs to achieve his goal.\r\n",
    "solutions": [
        "//这回只花了114514min就打完了。\n//真好。记得多手造几组。ACM拍什么拍。 \n#include \"bits/stdc++.h\"\nusing namespace std;\ntemplate<typename typC,typename typD> istream &operator>>(istream &cin,pair<typC,typD> &a) { return cin>>a.first>>a.second; }\ntemplate<typename typC> istream &operator>>(istream &cin,vector<typC> &a) { for (auto &x:a) cin>>x; return cin; }\ntemplate<typename typC,typename typD> ostream &operator<<(ostream &cout,const pair<typC,typD> &a) { return cout<<a.first<<' '<<a.second; }\ntemplate<typename typC,typename typD> ostream &operator<<(ostream &cout,const vector<pair<typC,typD>> &a) { for (auto &x:a) cout<<x<<'\\n'; return cout; }\ntemplate<typename typC> ostream &operator<<(ostream &cout,const vector<typC> &a) { int n=a.size(); if (!n) return cout; cout<<a[0]; for (int i=1; i<n; i++) cout<<' '<<a[i]; return cout; }\ntemplate<typename typC> bool cmin(typC &x,const typC &y) { if (x>y) { x=y; return 1; } return 0; }\ntemplate<typename typC> bool cmax(typC &x,const typC &y) { if (x<y) { x=y; return 1; } return 0; }\n#if !defined(ONLINE_JUDGE)&&defined(LOCAL)\n#include \"my_header\\debug.h\"\n#else\n#define dbg(...) ;\n#define dbgn(...) ;\n#endif\ntypedef unsigned int ui;\ntypedef long long ll;\n#define all(x) (x).begin(),(x).end()\n// void inc(ui &x,const ui &y) { if ((x+=y)>=p) x-=p; }\n// void dec(ui &x,const ui &y) { if ((x+=p-y)>=p) x-=p; }\nconst int N=502,M=N*N;\nint a[N][N],cnt[M],b[N][N],u[N*N],d[N*N],l[N*N],r[N*N];\nint main()\n{\n\tios::sync_with_stdio(0); cin.tie(0);\n\tcout<<setiosflags(ios::fixed)<<setprecision(15);\n\tint n,m,q=0,i,j,k;\n\tcin>>n>>m;\n\tfor (i=1; i<=n; i++) for (j=1; j<=n; j++) cin>>a[i][j],++cnt[a[i][j]];\n\tfor (int x:cnt) q+=!!x;\n\tif (q<=m)\n\t{\n\t\tcout<<m-q<<endl;\n\t\treturn 0;\n\t}\n\tm=q-m;\n\tmemset(u,0x3f,sizeof u);\n\tmemset(l,0x3f,sizeof l);\n\tfor (i=1; i<=n; i++) for (j=1; j<=n; j++)\n\t{\n\t\tcmin(l[a[i][j]],j);\n\t\tcmax(r[a[i][j]],j);\n\t\tcmin(u[a[i][j]],i);\n\t\tcmax(d[a[i][j]],i);\n\t}\n\tfor (k=1; k<=n; k++)\n\t{\n\t\tint L,R,U,D;\n\t\tmemset(b,0,sizeof b);\n\t\tfor (i=1; i<=n*n; i++) if (cnt[i])\n\t\t{\n\t\t\tL=max(1,r[i]-k+1);\n\t\t\tR=l[i];\n\t\t\tU=max(1,d[i]-k+1);\n\t\t\tD=u[i];\n\t\t\tif (L<=R&&U<=D)\n\t\t\t{\n\t\t\t\t// dbg(i,L,R,U,D);\n\t\t\t\t++R; ++D;\n\t\t\t\t++b[L][U];\n\t\t\t\t++b[R][D];\n\t\t\t\t--b[L][D];\n\t\t\t\t--b[R][U];\n\t\t\t}\n\t\t}\n\t\tfor (i=1; i+k-1<=n; i++) for (j=1; j+k-1<=n; j++)\n\t\t{\n\t\t\tb[i][j]+=b[i-1][j]+b[i][j-1]-b[i-1][j-1];\n\t\t\t// dbg(k,i,j,b[i][j]);\n\t\t\tif (b[i][j]==m||b[i][j]-1==m)\n\t\t\t{\n\t\t\t\tcout<<1<<endl;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\tcout<<2<<endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Misha and Paintings.json",
    "editorial_link": "https://codeforces.com//blog/entry/106136",
    "editorial": "SolutionIf is greater than the number of different numbers in the\r\nmatrix, then the answer is minus the number of different\r\nelements.Otherwise the answer does not exceed 2.Letâs proof that: choose\r\nthe maximum square (let its side be equal to ), containing the top left\r\ncorner of the matrix, such as recolouring it to some new colour makes\r\nthe number of different colours in the table at least .If the number of\r\ndifferent colours after recolouring is greater than , then choose a\r\nsquare with bottom right corner in , such as recolouring it makes the\r\nnumber of different colours at least . If we got exactly colours then we\r\nare done. Otherwise letâs extend the square by one. We got or different\r\ncolours. This way, by choosing the correct colour of the square we can\r\nget exactly colours. Otherwise we are done.It remains to learn how to\r\ncheck whether the answer is equal to 1. We will iterate over length of\r\nthe side of the square of the answer. Now we need to check whether the\r\nrequired square with such a side exists. To do this, we calculate for\r\neach square in the table with such a side length (there are such\r\nsquares), how many numbers this square completely covers (all\r\nappeareances of this numbers are in thsi square). To do this, letâs\r\niterate over the number . Having considered its occurrences, it is easy\r\nto understand that the upper left corners of all squares with our side\r\nlength, covering all cells with the number , lie in some subrectangle of\r\nthe table, so you can simply add 1 on this subrectangle using offline\r\nprefix sums. Having processed all the numbers in this way, we can count\r\nfor each square how many numbers it covers completely, and therefore\r\ncheck whether it fits the requirements.Complexity:\r\n",
    "hint": []
}