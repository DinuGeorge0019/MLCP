{
    "link": "https://codeforces.com//contest/579/problem/E",
    "problemId": "35414",
    "problem_idx": "E",
    "shortId": "579E",
    "contest_number": "579",
    "problem_submissions": {
        "E": [
            13036239,
            13035128,
            13044465,
            13040385,
            13048780,
            13043946,
            13047015,
            13047576,
            13048735,
            13050917,
            13038574,
            13049143,
            13046456,
            13050423,
            13039674,
            13038651,
            13044189,
            13066134,
            13058250
        ],
        "C": [
            13034420,
            13051906,
            13043085,
            13037760,
            13036947,
            13075503,
            13037513,
            13040485,
            13036114,
            13034214,
            13042749,
            13043422,
            13069668,
            13041260,
            13046486,
            13047106,
            13036571,
            13037203,
            13035739
        ],
        "D": [
            13032546,
            13042119,
            13042301,
            13032869,
            13034019,
            13032523,
            13043344,
            13042940,
            13043902,
            13044341,
            13042849,
            13038790,
            13046469,
            13052483,
            13033165,
            13039327
        ],
        "B": [
            13028607,
            13043435,
            13032514,
            13042581,
            13031837,
            13029292,
            13037865,
            13029204,
            13037306,
            13030841,
            13030662,
            13045162,
            13030689,
            13032289,
            13029852,
            13037989,
            13031677,
            13029359,
            13029903
        ],
        "F": [
            23642514,
            13069450
        ],
        "A": [
            13026446,
            13029125,
            13041159,
            13028187,
            13026318,
            13027263,
            13026324,
            13028233,
            13028363,
            13026488,
            13044113,
            13027133,
            13026585,
            13026495,
            13027733,
            13027555,
            13026813,
            13026529
        ]
    },
    "name": "E. Weakness and Poorness",
    "statement": "You are given a sequence of n integers . Determine a real number such\r\nthat the of the sequence is as small as possible.The of a sequence is\r\ndefined as the maximum value of the over all segments (contiguous\r\nsubsequences) of a sequence.The of a segment is defined as the absolute\r\nvalue of sum of the elements of segment.\r\n",
    "solutions": [
        "//#include \"testlib.h\"\n//#include <spoj.h>\n\n#include <iostream>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <math.h>\n#include <assert.h>\n#include <time.h>\n#include <memory.h>\n#include <set>\n#include <numeric>\n#include <map>\n#include <queue>\n#include <stack>\n\nusing namespace std;\n\nint n;\nint a[222222];\n\ndouble f(double x) {\n    double cur_sum = 0;\n    double min_sum = 0;\n    double max_sum = 0;\n    double ans = 0;\n    for(int i = 0; i < n; ++i) {\n        cur_sum += a[i] - x;\n        \n        ans = max(ans, fabs(cur_sum - min_sum));\n        ans = max(ans, fabs(cur_sum - max_sum));\n        \n        min_sum = min(min_sum, cur_sum);\n        max_sum = max(max_sum, cur_sum);\n    }\n    return ans;\n}\n\nint main() {\n    ios::sync_with_stdio(0);\n    cin >> n;\n    for(int i = 0; i < n; ++i)\n        cin >> a[i];\n    \n    double l = -1e9, r = 1e9;\n    for(int i = 0; i < 500; ++i) {\n        double m1 = l + (r - l) / 3.0;\n        double m2 = r - (r - l) / 3.0;\n        \n        if (f(m1) > f(m2))\n            l = m1;\n        else\n            r = m2;\n    }\n    cout.precision(10);\n    cout << fixed << f(l) << \"\\n\";\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "ternary search"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Weakness and Poorness.json",
    "editorial_link": "https://codeforces.com//blog/entry/20368",
    "editorial": "Let , we can write down the definition of poorness formally as\n\n \n\n. It's easy to see that A is a strictly decreasing function of x, and B is a strictly increasing function of x. Thus the minimum of max(A,?B) can be found using binary or ternary search. The time complexity is ,\n\nNow here give people geometry viewpoint of this problem:\n\nlet \n\nWe plot n?+?1 straight line y?=?i?*?x?+?bi in the plane for i from 0 to n.\n\nWe can discover when you are given x. The weakness will be (y coordinator of highest line at x) Â— (y coordinator of lowest line at x).\n\nSo we only need to consider the upper convex hull and the lower convex hull of all lines. And the target x value will be one of the intersection of these convex hull.\n\nBecause you can get these line in order of their slope value. we can use stack to get the convex hulls in O(n).",
    "hint": []
}