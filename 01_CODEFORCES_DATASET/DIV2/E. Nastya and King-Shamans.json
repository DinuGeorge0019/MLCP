{
    "link": "https://codeforces.com//contest/992/problem/E",
    "problemId": "191475",
    "problem_idx": "E",
    "shortId": "992E",
    "contest_number": "992",
    "problem_submissions": {
        "E": [
            39379971,
            39367354,
            39383435,
            39383874,
            39377809,
            39387889,
            39394476,
            39394446,
            39415001,
            39392776
        ],
        "D": [
            39367228,
            39375773,
            39372594,
            39378835,
            39367744,
            39373260,
            39369394,
            39372029,
            39372974,
            39365892,
            39371246,
            39373661,
            39373903,
            39372053,
            39374817,
            39372239,
            39375168,
            39375159,
            39373219
        ],
        "C": [
            39364165,
            39377468,
            39374599,
            39369673,
            39390179,
            39368182,
            39365924,
            39366169,
            39367079,
            39370888,
            39367372,
            39369592,
            39366923,
            39366841,
            39366909,
            39368981,
            39367582
        ],
        "B": [
            39362525,
            39369978,
            39364265,
            39363783,
            39364539,
            39390973,
            39364179,
            39363741,
            39364940,
            39371207,
            39363548,
            39366410,
            39364261,
            39363633,
            39364663,
            39364278,
            39364004,
            39364073,
            39364080
        ],
        "A": [
            39360959,
            39367984,
            39361000,
            39360904,
            39364171,
            39360934,
            39362882,
            39361086,
            39361354,
            39361964,
            39363683,
            39362014,
            39362194,
            39360828,
            39362485,
            39364246,
            39462075,
            39360847,
            39362002,
            39361147
        ]
    },
    "name": "E. Nastya and King-Shamans",
    "statement": "Nastya likes reading and even spends whole days in a library sometimes.\r\nToday she found a chronicle of Byteland in the library, and it stated\r\nthat there lived shamans long time ago. It is known that at every moment\r\nthere was exactly one shaman in Byteland, and there were shamans in\r\ntotal enumerated with integers from to in the order they lived. Also,\r\neach shaman had a magic power which can now be expressed as an\r\ninteger.The chronicle includes a list of powers of the shamans. Also,\r\nsome shamans can be king-shamans, if they gathered all the power of\r\ntheir predecessors, i.e. their power is exactly the sum of powers of all\r\nprevious shamans. Nastya is interested in whether there was at least one\r\nking-shaman in Byteland.Unfortunately many of the powers are unreadable\r\nin the list, so Nastya is doing the following: Initially she supposes\r\nsome power for each shaman. After that she changes the power of some\r\nshaman times (the shamans can differ) and after that wants to check if\r\nthere is at least one king-shaman in the list. If yes, she wants to know\r\nthe index of any king-shaman. Unfortunately the list is too large and\r\nNastya wants you to help her.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 262144;\ntypedef long long ll;\n\nint n, q;\nll z[200005], a[200005];\n\nconst ll INF = 2123123123123123123ll;\n\nstruct stb {\n\tstruct node {\n\t\tll b, lo, hi;\n\t\tint z;\n\n\t\tnode& operator+= (const node& o) {\n\t\t\tlo = min(lo, o.lo);\n\t\t\thi = max(hi, o.hi);\n\t\t\tz = max(z, o.z);\n\t\t\treturn *this;\n\t\t}\n\n\t\tnode operator+ (const node& o) const {\n\t\t\tnode tmp = *this;\n\t\t\ttmp += o;\n\t\t\treturn tmp;\n\t\t}\n\t};\n\n\tnode d[2*MAXN];\n\n\tvoid push(int i) {\n\t\tif (d[i].b == 0)\n\t\t\treturn;\n\n\t\tif (i >= MAXN) {\n\t\t\td[i].lo += d[i].b;\n\t\t\td[i].hi += d[i].b;\n\t\t\td[i].z = d[i].lo == 0 ? i - MAXN + 1 : -1;\n\t\t\td[i].b = 0;\n\t\t\treturn;\n\t\t}\n\n\t\tif (!(d[i].lo + d[i].b <= 0 && 0 <= d[i].hi + d[i].b)) {\n\t\t\td[i].lo += d[i].b;\n\t\t\td[i].hi += d[i].b;\n\t\t\td[2*i].b += d[i].b;\n\t\t\td[2*i+1].b += d[i].b;\n\t\t\td[i].b = 0;\n\t\t\td[i].z = -1;\n\t\t\treturn;\n\t\t}\n\n\t\td[2*i].b += d[i].b;\n\t\td[2*i+1].b += d[i].b;\n\t\tpush(2*i);\n\t\tpush(2*i+1);\n\t\td[i] = d[2*i] + d[2*i+1];\n\t}\n\n\tvoid init() {\n\t\tfor (int i=1; i<=n; i++)\n\t\t\td[i + MAXN - 1] = {0, z[i], z[i], z[i] == 0 ? i : -1};\n\t\tfor (int i=n+1; i<=MAXN; i++)\n\t\t\td[i + MAXN - 1] = {0, INF, INF, -1};\n\n\t\tfor (int i=MAXN-1; i>=1; i--)\n\t\t\td[i] = d[2*i] + d[2*i+1];\n\t}\n\n\tvoid add(int l, int r, ll val, int x = 1, int xl = 1, int xr = MAXN) {\n\t\tpush(x);\n\t\tif (r < xl || xr < l)\n\t\t\treturn;\n\t\tif (l <= xl && xr <= r) {\n\t\t\td[x].b += val;\n\t\t\tpush(x);\n\t\t\treturn;\n\t\t}\n\n\t\tint xm = (xl + xr) >> 1;\n\t\tadd(l, r, val, 2*x, xl, xm);\n\t\tadd(l, r, val, 2*x+1, xm+1, xr);\n\n\t\td[x] = d[2*x] + d[2*x+1];\n\t}\n\n\tint nula() {\n\t\tpush(1);\n\t\treturn d[1].z;\n\t}\n\n} drvo;\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\tcout.tie(nullptr);\n\tcerr.tie(nullptr);\n\n\tcin >> n >> q;\n\n\tll ps = 0;\n\tfor (int i=1; i<=n; i++) {\n\t\tint x;\n\t\tcin >> x;\n\t\ta[i] = x;\n\t\tz[i] = x - ps;\n\t\tps += x;\n\t}\n\n\tdrvo.init();\n\n\tfor (int i=1; i<=q; i++) {\n\t\tint p;\n\t\tll v;\n\t\tcin >> p >> v;\n\t\tv -= a[p];\n\t\ta[p] += v;\n\n\t\tdrvo.add(p, p, v);\n\t\tif (p != n)\n\t\t\tdrvo.add(p+1, n, -v);\n\t\tcout << drvo.nula() << '\\n';\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Nastya and King-Shamans.json",
    "editorial_link": "https://codeforces.com/blog/entry/60083",
    "editorial": "This problem was inspired by idea which was offered by my unbelievable\r\ngirlfriend :)In this problem we maintain two segment trees - with\r\nmaximum and with sum. After every query we recalculate these trees in\r\nfor a query. Now we only have to understand, how to answer for a query?\r\nLetâs call a prefix of the array as in the case if we surely know that\r\nit doesnât contain a king-shaman. So either the first shaman is king and\r\nwe are able to answer for the query, or we call the prefix with length 1\r\nas . Then letâs repeat the following operation: We call as sum in the\r\ngood prefix now. We find it using the segment tree with sums. We find\r\nthe leftmost element which may be king-shaman yet. We can realise that\r\nitâs the leftmost element, which doesnât lie in the prefix (as there\r\nisnât king-shaman according the definition), which have a value at least\r\n. It can be done using segment tree with maximums, with descent. We\r\ncheck if this found shaman is king. If isnât, we can say that the good\r\nprefix finishes in this shaman now, because it was the leftmost shaman\r\nwho might be king. Every operation works in . Letâs notice, that one\r\noperation increases sum in the prefix at least by two times. So, after\r\noperations sum in the good prefix will become more than a maximal\r\npossible number in the array, so that we will be able to finish, because\r\nwe will be sure that answer will be -1. Complexity of the solution is\r\n.Let be the prefix sums of . Weâre gonna introduce and reformulate the\r\nqueries using these new terms. Imagine we wanna change the value at to .\r\nLet . Then will decrease by whereas will increase by . Imagine we wanna\r\nfind the answer. Then itâs sufficient to find any satisfying . Split\r\ninto blocks of size . Each block will be comprised of pairs sorted by .\r\nAt the same time we will maintain array responsible for lazy additions\r\nto blocks. How does this help? Let . The goal is to find the position of\r\n, decrease its value and increase values for all within this block. It\r\ncan be done in a smart way in (actually, this can be represented as\r\nmerging sorted vectors). You should also take care of the tail, i.e add\r\nto in time. Weâre asked to find such that . All blocks are sorted, thus\r\nwe can simply apply binary search in overall. The optimal assignment is\r\nwhich results into total runtime. The huge advantage of this approach is\r\nits independency from constraints on (i.e non-negativity). Although we\r\ndidnât succeed in squeezing this into TL :)Group the numbers according\r\nto their highest bits (with groups of the form and separately for\r\nzeros). Inside each groups (no more than of them) we maintain elements\r\nin increasing order of indexes. Itâs easy to see that each group\r\ncontains no more than two candidates for answer (since their sum is\r\nguaranteed to be greater than any of the remaining ones). This\r\nobservation leads to an easy solution in we iterate over groups and\r\ncheck prefix sums for these candidates.Thereâs actually further space\r\nfor optimizations. Letâs maintain prefix sums for our candidates this\r\nallows us to get rid of the extra log when quering the tree. Almost\r\neverything we need at this step is to somehow process additions and\r\ndeletions change the order inside two blocks and probably recalculate\r\nprefix sums. The only thing left is to stay aware of prefix sum changes\r\nfor the remaining blocks. Luckily, they can be fixed in per block (if\r\nthen the sum increases by and stays the same otherwise). The resulting\r\ncomlexity is .\r\n",
    "hint": []
}