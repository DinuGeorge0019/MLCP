{
    "link": "https://codeforces.com//contest/22/problem/D",
    "problemId": "102",
    "problem_idx": "D",
    "shortId": "22D",
    "contest_number": "22",
    "problem_submissions": {
        "E": [
            95075,
            339772
        ],
        "D": [
            94674,
            94317,
            94288,
            94253,
            94410,
            94089,
            94399,
            94885,
            94131,
            94729,
            94450,
            93950,
            94649
        ],
        "C": [
            94316,
            94019,
            94074,
            94097,
            94060,
            94297,
            94096,
            94518,
            94472,
            94134,
            94320,
            94611,
            94048
        ],
        "B": [
            93968,
            93767,
            93718,
            93851,
            93760,
            93791,
            93790,
            93866,
            93966,
            93778,
            94454,
            94133,
            94258,
            93853
        ],
        "A": [
            93542,
            93511,
            93475,
            93559,
            93491,
            93518,
            93660,
            93794,
            93555,
            93524,
            93810,
            93535,
            93618
        ]
    },
    "name": "D. Segments",
    "statement": "You are given segments on the Ox-axis. You can drive a nail in any\r\ninteger point on the Ox-axis line nail so, that all segments containing\r\nthis point, are considered nailed down. If the nail passes through\r\nendpoint of some segment, this segment is considered to be nailed too.\r\nWhat is the smallest number of nails needed to nail all the segments\r\ndown?\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <queue>\nusing namespace std;\n\nbool cmp(pair <int, int> a, pair <int, int> b){\n    if(a.first<b.first){\n        return true;\n    }else{\n        if(a.first==b.first){\n            return a.second<b.second;\n        }\n        return false;\n    }\n}\n\n\nint main(){\n\n    int n;\n    pair <int, int> a[1013];\n    cin>>n;\n    for(int i=0; i<n; i++){\n        cin>>a[i].first>>a[i].second;\n        if(a[i].first>a[i].second) swap(a[i].first,a[i].second);\n    }\n    sort(a,a+n,cmp);\n    int m=0;\n    queue <int> q;\n    int f=0;\n    pair<int ,int> t;\n    while(f<n){\n        t=a[f];\n        int p=f;\n        bool fl=false;\n        while(p<n && max(t.first,a[p].first)<=min(t.second,a[p].second)){\n            t.first=max(t.first,a[p].first);\n            t.second=min(t.second,a[p].second);\n            fl=true;\n            p++;\n        }\n        q.push(t.first);\n        if(!fl) p++;\n        f=p;\n    }\n    cout<<q.size()<<endl;\n    while(!q.empty()){\n        cout<<q.front()<<\" \";\n        q.pop();\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Segments.json",
    "editorial_link": "https://codeforces.com//blog/entry/507",
    "editorial": "In this problem one should place minimal number of points on the line such that any given segment touches at least one of these points. Let's call the coordinate of ending of any segment as event. There will be events of two types: beginning of a segment and its ending. Let's sort this events by coordinates. In the case of equality of some events consider that the event of the beginning will be less than the event of ending. Look at our events from left to right: if there is a beginning event, then push the number of this segment to the special queue. Once we take an ending of some segment, place the point here and clear the special queue (because each of segment in this queue will touch this point).\n"
}