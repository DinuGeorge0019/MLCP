{
    "link": "https://codeforces.com//contest/1333/problem/F",
    "problemId": "586758",
    "problem_idx": "F",
    "shortId": "1333F",
    "contest_number": "1333",
    "problem_submissions": {
        "E": [
            75896339,
            75896565,
            75977605,
            75896691,
            75897517,
            75909706,
            75903789,
            75909595,
            75887158,
            75892751,
            75911705,
            75893605,
            75903871,
            75907577,
            75907287,
            75905980,
            75911364,
            102357635
        ],
        "F": [
            75886038,
            75883944,
            75977662,
            75881660,
            75879950,
            75880078,
            75883983,
            75889261,
            75893323,
            75897108,
            75891281,
            75909072,
            75894697,
            75898619,
            75885706,
            75889606,
            75886207,
            75876954,
            75881193
        ],
        "D": [
            75864744,
            75869369,
            75977526,
            75869421,
            75870061,
            75872281,
            75875027,
            75874985,
            75876429,
            75882167,
            75873219,
            75876350,
            75881516,
            75880068,
            75879600,
            75883836,
            75901469,
            75865548,
            75870511
        ],
        "C": [
            75852521,
            75859230,
            75977465,
            75850790,
            75858133,
            75853774,
            75862591,
            75860649,
            75860611,
            75873215,
            75852933,
            75864634,
            75853173,
            75865167,
            75868921,
            75862158,
            75875332,
            75854728,
            75853080
        ],
        "B": [
            75848076,
            75848553,
            75977412,
            75847691,
            75848476,
            75846675,
            75848813,
            75851794,
            75895723,
            75859034,
            75846157,
            75848508,
            75884037,
            75854691,
            75852331,
            75853099,
            75848989,
            75850255,
            75846775
        ],
        "A": [
            75845195,
            75845040,
            75977221,
            75844826,
            75845093,
            75844889,
            75845001,
            75846626,
            75847661,
            75851327,
            75844724,
            75845218,
            75845746,
            75850998,
            75847105,
            75848789,
            75855160,
            75846223,
            75844893
        ]
    },
    "name": "F. Kate and imperfection",
    "statement": "Kate has a set S of n integers\r\n{1,\r\ndots, n\r\n} . She thinks that of a subset M\r\nsubseteq S is equal to the of gcd(a, b) over all pairs (a, b) such that\r\nboth a and b are in M and a\r\nneq b. Kate is a very neat girl and for each k\r\nin\r\n{2,\r\ndots, n\r\n} she wants to find a subset that has the among all subsets in S of size\r\nk. There can be more than one subset with the smallest imperfection and\r\nthe same size, but you don\u2019t need to worry about it. Kate wants to find\r\nall the subsets herself, but she needs your help to find the smallest\r\npossible imperfection for each size k, will name it I_k. Please, help\r\nKate to find I_2, I_3, ..., I_n.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <cmath>\n#include <map>\n\nusing namespace std;\n\n#define MIN(a, b) (((a) < (b)) ? (a) : (b))\n#define MAX(a, b) (((a) < (b)) ? (b) : (a))\n\nusing ll = long long;\nint const nmax = 500000;\nint fi[1 + nmax], sol[1 + nmax];\nint invsol[1 + nmax];\n\nint main()\n{\n  int n;\n  cin >> n;\n  for(int i = 1;i <= n; i++)\n    fi[i] = 1;\n  for(int i = 2;i <= n; i++){\n    for(int j = i * 2; j <= n; j += i)\n      fi[j] = i;\n  }\n\n  for(int i = 1;i <= n; i++)\n    sol[fi[i]]++;\n\n  for(int i = 1;i <= n; i++)\n    invsol[i] = n;\n\n  for(int i = 1;i <= n; i++)\n    sol[i] += sol[i - 1];\n\n  for(int i = n;1 <= i; i--)\n    invsol[sol[i]] = i;\n\n  for(int i = n - 1; 1 <= i; i--)\n    invsol[i] = min(invsol[i], invsol[i + 1]);\n\n  for(int i = 2;i <= n; i++)\n    cout << invsol[i] << \" \";\n\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "math",
        "number theory",
        "sortings",
        "two pointers"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Kate and imperfection.json",
    "editorial_link": "https://codeforces.com//blog/entry/75802",
    "editorial": "Let be one of the possible subsets with smallest imperfection. If for\r\nany number in not all of its divisors contained in then we can replace\r\nwith one of it divisor. The size os the subset does not change and\r\nimperfection may only decrease. Then we can assume that for any all of\r\nit divisors contained in . Let be the greatest divisor of exclude ().\r\nSince contains element with its divisors then smallest gcd of pair of an\r\nelements not less than maximum of over elements of (because contains\r\nwith ). And for any element there is no element in with (because is the\r\ngreatest divisor). Then imperfection of is equal to greatest over\r\nelements of . After this observation we can just sort elements by theirs\r\nand take smallest for every . You can calculate using the sieve of\r\nEratosthenes.Final time complexity:\r\n"
}