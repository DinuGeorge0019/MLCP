{
    "link": "https://codeforces.com//contest/1695/problem/B",
    "problemId": "1432672",
    "problem_idx": "B",
    "shortId": "1695B",
    "contest_number": "1695",
    "problem_submissions": {
        "E": [
            161099994,
            161385353
        ],
        "D1": [
            161071005,
            161074543,
            161081125,
            161072748,
            161085205,
            161076792,
            161086180,
            161088285,
            161078663,
            161087570,
            161090981,
            161081382,
            161096600,
            161083265,
            161094007,
            161083359,
            161087191,
            161099464,
            161103072
        ],
        "D2": [
            161070538,
            161074164,
            161080949,
            161072924,
            161085070,
            161077074,
            161086067,
            161090573,
            161078799,
            161087356,
            161091244,
            161098503,
            161096503,
            161083640,
            161093884,
            161083859,
            161106845,
            161102938,
            161103184
        ],
        "C": [
            161049795,
            161059348,
            161063490,
            161060415,
            161055337,
            161053834,
            161061413,
            161054883,
            161053215,
            161065273,
            161068360,
            161076346,
            161062519,
            161063339,
            161079032,
            161066869,
            161096184,
            161063492,
            161059254,
            161053168
        ],
        "B": [
            161047262,
            161053402,
            161051570,
            161054862,
            161050104,
            161049992,
            161050979,
            161048731,
            161049540,
            161057199,
            161054074,
            161054984,
            161050691,
            161052531,
            161068152,
            161056401,
            161053679,
            161049800,
            161064268,
            161048819
        ],
        "A": [
            161046762,
            161046971,
            161046828,
            161047950,
            161046933,
            161046876,
            161047188,
            161046813,
            161046805,
            161048336,
            161047711,
            161049772,
            161046830,
            161047996,
            161062872,
            161046949,
            161047484,
            161047163,
            161047431,
            161046827
        ]
    },
    "name": "B. Circle Game",
    "statement": "Mike and Joe are playing a game with some stones. Specifically, they\r\nhave n piles of stones of sizes a_1, a_2,\r\nldots, a_n. These piles are arranged in a circle.The game goes as\r\nfollows. Players take turns removing some positive number of stones from\r\na pile in clockwise order starting from pile 1. Formally, if a player\r\nremoved stones from pile i on a turn, the other player removes stones\r\nfrom pile ((i\r\nbmod n) + 1) on the next turn.If a player cannot remove any stones on\r\ntheir turn (because the pile is empty), they lose. Mike goes first.If\r\nMike and Joe play optimally, who will win?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false); cin.tie(0);\n    int T, n;\n    cin >> T;\n    while (T--) {\n        cin >> n;\n        vector<int> a(n);\n        for (int i = 0; i < n; i++) cin >> a[i];\n        if (n % 2 == 1) {\n            cout << \"Mike\" << endl;\n            continue;\n        }\n        int mn = 2e9, pos;\n        for (int i = 0; i < n; i++) {\n            if (a[i] < mn) {\n                mn = a[i];\n                pos = i;\n            }\n        }\n        if (pos % 2 == 0) {\n            cout << \"Joe\" << endl;\n        } else {\n            cout << \"Mike\" << endl;\n        }\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "greedy"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Circle Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/103996",
    "editorial": "Note that since all piles are initially nonempty, the game will not end\r\nfor the first turns, because on each of those turns, a player will be\r\nremoving from a nonempty pile. If is odd, Mike can remove all of the\r\nstones from the first pile. Then, on the th turn (the first turn where\r\nthe game can end), Joe will be forced to remove from the first pile,\r\nwhich is empty. So Mike can always win if is odd.If is even, then Mike\r\nwill only ever remove from the odd piles, and Joe will only ever remove\r\nfrom the even piles. So each player has piles, and neither can remove\r\nfrom the otherâs piles. Therefore, it is optimal for each player to\r\nremove the minimal possible number of stones at each step, so that they\r\nstay in the game for as long as possible.So on each turn, a player\r\nremoves exactly one stone, and the first pile to become empty will be\r\nthe pile with the minimal number of stones. If there are multiple\r\nminimal piles, it will be the leftmost such pile. So if this pile is on\r\nan odd position, Mike will lose (and therefore Joe will win), and\r\notherwise Joe will lose (and Mike will win).Complexity:\r\n",
    "hint": []
}