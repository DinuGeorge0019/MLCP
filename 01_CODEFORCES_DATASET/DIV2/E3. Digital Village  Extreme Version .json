{
    "link": "https://codeforces.com//contest/2021/problem/E3",
    "problemId": "2929698",
    "problem_idx": "E3",
    "shortId": "2021E3",
    "contest_number": "2021",
    "problem_submissions": {
        "D": [
            284590256,
            284590001,
            284586301,
            284623851,
            284569171,
            284578878,
            284712748,
            284578625,
            284581515,
            284581353,
            284637993
        ],
        "E3": [
            284578176,
            284565599,
            284600842,
            284850992,
            284584216,
            284618196,
            284597636,
            284599022,
            284585148,
            286020331,
            284745105
        ],
        "E1": [
            284577293,
            284599054,
            284566976,
            284599574,
            284568532,
            284584477,
            284579805,
            284586608,
            284600476,
            284585423,
            284594051,
            284576473,
            284592731,
            284581221,
            284582830,
            284576965,
            286020463,
            284573682,
            284745154,
            284585073
        ],
        "E2": [
            284576481,
            284599368,
            284566551,
            284571784,
            284584447,
            284580377,
            284586193,
            284585357,
            284576258,
            284585492,
            284583546,
            284582548,
            286020438,
            284593395,
            284766277,
            284587863
        ],
        "C2": [
            284552959,
            284550125,
            284578847,
            284570668,
            284557743,
            284572571,
            284559765,
            284559531,
            284592443,
            284564745,
            284553608,
            284551809,
            284555032,
            284564040,
            284565535,
            284591262,
            284564727,
            284560092
        ],
        "C1": [
            284543395,
            284545189,
            284579118,
            284555011,
            284551439,
            284544381,
            284549845,
            284558858,
            284582609,
            284556392,
            284545368,
            284554154,
            284545358,
            284546156,
            284555833,
            284553560,
            284550666,
            284546712,
            284545533,
            284552561
        ],
        "B": [
            284537997,
            284541648,
            284545572,
            284550280,
            284536827,
            284538339,
            284543136,
            284541306,
            284577835,
            284541582,
            284538597,
            284539525,
            284540971,
            284538476,
            284541915,
            284545007,
            284543924,
            284540121,
            284540098,
            284544260
        ],
        "A": [
            284536034,
            284541336,
            284535964,
            284545882,
            284543072,
            284535980,
            284537720,
            284537149,
            284572305,
            284541440,
            284535781,
            284536205,
            284539247,
            284535865,
            284537520,
            284541705,
            284541775,
            284537231,
            284537773,
            284536991
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/134873",
    "editorial": "Since the cost of a path uses the maximum edge weight in the path, we\r\ncan use a Kruskal-like algorithm that is similar to finding the MST\r\n(Minimum Spanning Tree). Initially, the graph has no edges, and we add\r\neach edge one by one starting from the smallest values of , while\r\nmaintaining the connected components in the graph using DSU (Disjoint\r\nSet Union).While doing the MST algorithm, we simultaneously construct\r\nthe reachability tree of the graph, whose structure represents the\r\nsequence of mergings of connected components in the algorithm. Each\r\nvertex in the reachability tree corresponds to some connected component\r\nat some point in time in the algorithm. Each non-leaf vertex in the\r\nreachability tree always has two children, which are the two connected\r\ncomponents that are merged to form the connected component represented\r\nby that vertex, so every time two connected components merge in the\r\nalgorithm, we make a new vertex in the reachability tree that is\r\nconnected to its two corresponding children.After doing all that, weâve\r\nconstructed a reachability tree that is a rooted binary tree with\r\nvertices, of which are leaves. For each non-leaf vertex , we write down\r\nwhich is the weight of the edge that forms its connected component. For\r\neach leaf, we mark it as special if and only if it corresponds to a\r\nhouse that needs internet. Then, for each vertex , we calculate , which\r\nis the number of special leaves in the subtree of . These values will be\r\nused later.Consider a non-leaf in the reachability tree. It can be\r\nobtained that two vertices in the original graph corresponding to any\r\ntwo leaves in the subtree of can have a path between them in the\r\noriginal graph with a weight of at most .Letâs solve for some value of .\r\nFor each special vertex , we want to choose a target vertex thatâs an\r\nancestor of . Then, we choose a set of leaves for the houses with\r\ninstalled servers. We want it such that each chosen target has at least\r\none leaf in its subtree that is a member of the set. The total path cost\r\nof this is the sum of for all chosen targets .Letâs say weâve fixed the\r\nset of leaves. Then, we mark every ancestor of these leaves. If we only\r\nconsider the marked vertices with the edges between them, we have a\r\nreduced tree. For each special leaf, we want to choose its nearest\r\nancestor that is in the reduced tree for its target to get the one with\r\nthe smallest weight.Knowing this, we can solve the problem in another\r\npoint of view. Initially, we have the original reachability tree. We\r\nwant to reduce it into a reduced tree with leaves. We want to do it\r\nwhile maintaining the chosen targets of the special leaves and their\r\ncosts. Initially, for each special leaf, we choose itself as its target.\r\nIn one operation, we can do the following: Choose a vertex thatâs\r\ncurrently a leaf. Move every target thatâs currently in that leaf to its\r\nparent. Remove that leaf and the edge connecting it to its parent. We\r\nwant to do that until the reduced tree has leaves.For each edge\r\nconnecting a vertex to its parent in the reachability tree, calculate .\r\nThat is the cost to move every target in vertex to vertex . Define that\r\nas the edgeâs length.We want to do operations with the minimum cost so\r\nthat the reduced tree has leaves. We want to minimize the sum of lengths\r\nof the deleted edges. If we look at it in a different way, we want to\r\nchoose edges to be in the reduced tree with the maximum sum of\r\nlengths.For some value of , the edges of the reduced tree can be\r\ndecomposed into paths from some vertex to its descendant. We want the\r\ntotal sum of lengths of these paths to be as big as possible. But how do\r\nwe solve it for every from to ?Letâs say . We can choose the path from\r\nthe root to its furthest leaf. How do we solve for onwards? It turns out\r\nthat we can use the optimal solution for some value of to make the\r\noptimal solution for , by just adding the longest possible available\r\npath. That means, for each from to , we just find the current longest\r\navailable path and add it to our reduced tree.What if at some point.\r\nthere are more than one possible longest paths? It can be proven that we\r\ncan choose any of these paths and the optimal solutions for the next\r\nvalues of will still be optimal.The proof for this greedy strategy\r\ninvolves the convexity of the total length as goes from to . However, we\r\nwonât explain it in detail here.So to solve the problem, we do DFS in\r\nthe reachability tree to calculate for each vertex , the furthest leaf\r\nand the second furthest leaf in its subtree. For each from to , we add\r\nthe current longest available path using this precalculation.Time\r\ncomplexity:\r\n",
    "name": "E3. Digital Village  Extreme Version ",
    "statement": "Pak Chanek is setting up internet connections for the village of\r\nKhuntien. The village can be represented as a connected simple graph\r\nwith n houses and m internet cables connecting house u_i and house v_i,\r\neach with a latency of w_i.There are p houses that require internet. Pak\r\nChanek can install servers in at most k of the houses. The houses that\r\nneed internet will then be connected to one of the servers. However,\r\nsince each cable has its latency, the latency experienced by house s_i\r\nrequiring internet will be the latency of the cables between that house\r\nand the server it is connected to.For each k = 1,2,\r\nldots,n, help Pak Chanek determine the minimum latency that can be\r\nachieved for all the houses requiring internet.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;int Qread(){\tint x=0;bool f=false;char ch=getchar();\twhile(ch<'0'||ch>'9') f|=(ch=='-'),ch=getchar();\twhile(ch>='0'&&ch<='9') x=x*10+(ch^48),ch=getchar();\treturn f?-x:x;}struct Edge{int u,v,w;}l[200010];bool operator<(Edge A,Edge B){return A.w<B.w;}int n,m,p;int rt,fa[200010],siz[200010],cnt[200010];int get_fa(int a){return a==fa[a]?a:fa[a]=get_fa(fa[a]);}long long bas[200010],del,tk;multiset<long long> S[200010];void solve(){\tmemset(cnt,0,(n+1)<<2),memset(bas,0,(n+1)<<3); \tn=Qread(),m=Qread(),p=Qread();\tfor(int i=1;i<=p;i++) cnt[Qread()]=1; \tfor(int i=1;i<=n;i++) fa[i]=i,siz[i]=1,S[i].insert(0); \tfor(int i=1;i<=m;i++) l[i].u=Qread(),l[i].v=Qread(),l[i].w=Qread();\tsort(l+1,l+m+1);\t\tfor(int i=1,u,v;i<=m;i++) if(get_fa(l[i].u)!=get_fa(l[i].v))\t{\t\tu=get_fa(l[i].u),v=get_fa(l[i].v);\t\tif(siz[u]<siz[v]) swap(u,v); \t\tdel=1ll*cnt[u]*l[i].w-bas[u];\t\ttk=*S[u].begin();S[u].erase(S[u].begin());\t\tS[u].insert(tk-del);\t\tbas[u]+=del; \t\tdel=1ll*cnt[v]*l[i].w-bas[v];\t\ttk=*S[v].begin();S[v].erase(S[v].begin());\t\tS[v].insert(tk-del);\t\tbas[v]+=del; \t\tfa[v]=u,siz[u]+=siz[v],cnt[u]+=cnt[v],bas[u]+=bas[v]; \t\tfor(long long g:S[v]) S[u].insert(g);\t\tmultiset<long long>().swap(S[v]);\t}\trt=get_fa(1);\tfor(long long g:S[rt])\t{\t\tbas[rt]+=g;\t\tprintf(\"%lld \",bas[rt]);\t}\tprintf(\"\\n\"); \tmultiset<long long>().swap(S[rt]);}int main(){\tint T=Qread();\twhile(T--) solve();\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dfs and similar",
        "dp",
        "dsu",
        "graphs",
        "greedy",
        "math",
        "trees"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E3. Digital Village  Extreme Version .json",
    "hint": []
}