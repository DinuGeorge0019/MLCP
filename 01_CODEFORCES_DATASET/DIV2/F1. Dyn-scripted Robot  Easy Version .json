{
    "link": "https://codeforces.com//contest/1993/problem/F1",
    "problemId": "2795986",
    "problem_idx": "F1",
    "shortId": "1993F1",
    "contest_number": "1993",
    "problem_submissions": {
        "C": [
            274402188,
            274358757,
            274374996,
            274374747,
            274368652,
            274357644,
            274365562,
            274356432,
            274379356,
            274367132,
            274372055,
            274371076,
            274363983,
            274370693,
            274369864,
            274367679,
            274363345,
            274405366,
            274364436
        ],
        "B": [
            274397223,
            274346884,
            274361191,
            274359127,
            274350863,
            274346370,
            274355668,
            274347298,
            274365588,
            274350765,
            274364310,
            274350846,
            274352824,
            274355191,
            274352816,
            274350915,
            274351222,
            274395841,
            274351441
        ],
        "A": [
            274391220,
            274335769,
            274358967,
            274335712,
            274338856,
            274337195,
            274340094,
            274335737,
            274356689,
            274336110,
            274349520,
            274336792,
            274342378,
            274342208,
            274335539,
            274352863,
            274335926,
            274386754,
            274342173
        ],
        "D": [
            274387898,
            274378476,
            274479687,
            274386087,
            274394516,
            274379793,
            274384145,
            274380644,
            274383004,
            274432739,
            274365274,
            274383568,
            274381874,
            274380805,
            274387445,
            274383605,
            274390133,
            275106936,
            274388789,
            274469604,
            274391022,
            274416385,
            274388682
        ],
        "E": [
            274380482,
            274416572,
            274415942,
            274406977,
            274400748,
            275106863,
            274409594,
            281997956,
            274569827
        ],
        "F2": [
            274361444,
            274397454,
            274414076,
            274417256,
            274415219,
            276095739,
            274383447
        ],
        "F1": [
            274349830,
            274385685,
            274402182,
            274415340,
            274413779,
            274417154,
            274400648,
            274391762,
            274403361,
            274395449,
            274405171,
            274404884,
            274415155,
            274426602,
            274426556,
            274426256,
            274400601,
            274403335,
            274384119,
            274407161
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132185",
    "editorial": "SolutionSo apparently, we need to calculate the number of times the\r\nrobot reaches , where is a multiple of and is a multiple of (see the\r\ngeneral idea above).Let\u00e2\u0080\u0099s call how much the robot moves (in direction)\r\nafter executing the first commands of the script. Then: and can be\r\ncalculated through and .The robot will execute the script times and the\r\nscript contains commands, so we have positions to check out. Each\r\nposition can be represented by: (where and ). Besides, we need: Lastly,\r\nwe can traverse all possible from to and count the number of that\r\nsatisfies the above equivalence. One possible way to do this is to use a\r\nmap to count each element in the array . Summing all the counts will\r\ngive the answer for this problem.Time complexity:\r\n",
    "name": "F1. Dyn-scripted Robot  Easy Version ",
    "statement": "Given a w\r\ntimes h rectangle on the Oxy plane, with points (0, 0) at the\r\nbottom-left and (w, h) at the top-right of the rectangle.You also have a\r\nrobot initially at point (0, 0) and a script s of n characters. Each\r\ncharacter is either , , , or , which tells the robot to move left,\r\nright, up, or down respectively.The robot can only move inside the\r\nrectangle; otherwise, it will change the script s as follows: If it\r\ntries to move outside a vertical border, it changes all characters to \u2019s\r\n(and vice versa, all \u2019s to \u2019s). If it tries to move outside a horizontal\r\nborder, it changes all characters to \u2019s (and vice versa, all \u2019s to \u2019s).\r\nThen, it will execute the changed script starting from the character\r\nwhich it couldn\u2019t execute. The script s will be executed for k times\r\ncontinuously. All changes to the string s will be retained even when it\r\nis repeated. During this process, how many times will the robot move to\r\nthe point (0, 0) in total? .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#define pb push_back#define sz(a) ((int)a.size())#define re return#define all(a) a.begin(),a.end()#define rept(i,a,b) for(int i=(a);i<(b);i++)#define rep(i,a) rept(i,0,a)#define vi vector<int>#define pii pair<int,int>#define F first#define S second#define de(x) cout<<#x<<\"=\"<<x<<\"\\n\";#define int long long#define il inline#define db double#define ld long dbusing namespace std;const int MOD=998244353,INF=1000000000000000000;template<typename T>inline void Mx(T &a,T b){a=max(a,b);}template<typename T>inline void Mi(T &a,T b){a=min(a,b);}void FILEIO(string s){\tfreopen((s+\".in\").c_str(),\"r\",stdin);\tfreopen((s+\".out\").c_str(),\"w\",stdout);}int n,k,h,w;string s;void run(){\tcin>>n>>k>>h>>w>>s;\tint cx=0,cy=0;\tmap<pii,int>pp,pp2;\th+=h,w+=w;\tfor(char c:s){\t\tif(c=='L')cx--;\t\tif(c=='R')cx++;\t\tif(c=='D')cy--;\t\tif(c=='U')cy++;\t\t(cx+=h)%=h;\t\t(cy+=w)%=w;\t\tpp[{cx,cy}]++;\t}\tint dx=0,dy=0;\trep(i,k){\t\tpp2[{dx,dy}]++;\t\t(dx+=cx)%=h;\t\t(dy+=cy)%=w;\t}\tint ans=0;\tfor(auto it:pp)ans+=pp2[{(h-it.F.F)%h,(w-it.F.S)%w}]*it.S;\tcout<<ans<<\"\\n\";}signed main(){\tios::sync_with_stdio(0);\tcin.tie(0);cout.tie(0);\tint T=1;\tcin>>T;\twhile(T--)\t\trun();\tre 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "chinese remainder theorem",
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F1. Dyn-scripted Robot  Easy Version .json"
}