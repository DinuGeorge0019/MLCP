{
    "link": "https://codeforces.com//contest/1920/problem/A",
    "problemId": "2424500",
    "problem_idx": "A",
    "shortId": "1920A",
    "contest_number": "1920",
    "problem_submissions": {
        "F2": [
            241519708,
            242461640,
            241499605,
            241499150,
            241499121,
            241526798,
            241677520,
            242000469
        ],
        "F1": [
            241460299,
            241470662,
            241472660,
            241471905,
            241452735,
            241475361,
            241451154,
            241473438,
            241479153,
            241478315,
            241484928,
            241465563,
            241477422,
            241477811,
            241688562,
            241479348,
            241481887,
            241485652,
            241484576,
            241481175
        ],
        "E": [
            241449808,
            241450749,
            250647629,
            250647603,
            250646809,
            241453536,
            241456702,
            241468503,
            241457240,
            241473848,
            241459615,
            241448891,
            241462905,
            241455611,
            241473828,
            241462340,
            241463447,
            241688611,
            241464804,
            241470317,
            241459879,
            241463678,
            241464099
        ],
        "D": [
            241440349,
            241444733,
            241443927,
            241444084,
            241461216,
            241445290,
            241465918,
            241452364,
            241443025,
            241445939,
            241448263,
            241452666,
            241453380,
            241452851,
            241446075,
            241446900,
            241450746,
            241452656,
            241457511
        ],
        "C": [
            241424760,
            241434849,
            241435347,
            241432571,
            241426106,
            241430363,
            241433735,
            241436246,
            241435590,
            241433210,
            241428829,
            241435049,
            241436115,
            241439877,
            241436063,
            241433607,
            241435067,
            241438107,
            241435335
        ],
        "B": [
            241420376,
            241425242,
            241428830,
            241429674,
            241419228,
            241425601,
            241423672,
            241427964,
            241426457,
            241429604,
            241423387,
            241427147,
            241430484,
            241428576,
            241428228,
            241423313,
            241427602,
            241429162,
            241430149
        ],
        "A": [
            241418935,
            241420574,
            241419051,
            241419262,
            241421587,
            241419112,
            241419031,
            241419259,
            241421308,
            241419216,
            241419840,
            241421070,
            241419328,
            241428462,
            241421467,
            241419238,
            241420328,
            241420339,
            241423810
        ]
    },
    "name": "A. Satisfying Constraints",
    "statement": "Alex is solving a problem. He has n constraints on what the integer k\r\ncan be. There are three types of constraints: k must be some integer x;\r\nk must be some integer x; k must be some integer x. Help Alex find the\r\nnumber of integers k that satisfy all n constraints. It is guaranteed\r\nthat the (there exists at least one constraint of type 1 and at least\r\none constraint of type 2). Also, it is guaranteed that .\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define int long long\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define isz(x) ((int)x.size())\n#define sumof(x) accumulate(all(x), 0ll)\n\nvoid solve(){\n   vector<int> v;\n   int l=0, r=1e18;\n   int n; cin >> n;\n   for (int i=1; i<=n; ++i){\n      int o, x; cin >> o >> x;\n      if (o==1) l=max(l, x);\n      else if (o==2) r=min(r, x);\n      else v.push_back(x);\n   }\n   sort(all(v)); v.resize(unique(all(v))-v.begin());\n   if (l>r) cout << 0;\n   else cout << (r-l+1)-(upper_bound(all(v), r)-lower_bound(all(v), l));\n   cout << '\\n';\n}\n\nint32_t main(){\n   ios_base::sync_with_stdio(false);\n   cin.tie(nullptr);\n   int ntests=1;\n   cin >> ntests;\n   for (int i=1; i<=ntests; ++i) solve();\n   return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Satisfying Constraints.json",
    "editorial_link": "https://codeforces.com//blog/entry/122560",
    "editorial": "Let's first only consider the ?\n and ?\n constraints. The integers satisfying those two constraints will be some contiguous interval [l,r]\n. To find [l,r]\n, for each ?x\n constraint, we do l:=max(l,x)\n and for each ?x\n constraint, we do r:=min(r,x)\n.\n\nNow, for each, ?x\n constraint, we check if x\n is in [l,r]\n. If so, we subtract one from the answer (remember that there are no duplicate constraints). Let the total number of times we subtract be s\n. Then our answer is max(r?l+1?s,0)\n. The time complexity of this solution is O(n)\n."
}