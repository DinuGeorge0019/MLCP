{
    "link": "https://codeforces.com//contest/127/problem/C",
    "problemId": "669",
    "problem_idx": "C",
    "shortId": "127C",
    "contest_number": "127",
    "problem_submissions": {
        "C": [
            850036,
            853243,
            846749,
            850308,
            846400,
            846988,
            845889,
            846983,
            848328,
            847795,
            850207,
            848393,
            852965,
            852478
        ],
        "E": [
            847897,
            853236,
            852099,
            849554,
            849938,
            852088,
            847325,
            849147,
            850677,
            850641,
            851469,
            847732,
            853167,
            848319
        ],
        "D": [
            846279,
            853241,
            847740,
            846696,
            846866,
            848133,
            848630,
            6502633,
            848689,
            855255,
            848044,
            852652,
            849109,
            849008,
            849880,
            850099
        ],
        "B": [
            844434,
            853246,
            843634,
            844201,
            843671,
            852802,
            849355,
            844696,
            844897,
            844537,
            843982,
            844433,
            845330,
            844159,
            844315,
            844292,
            844410,
            844073
        ],
        "A": [
            843764,
            853248,
            844472,
            843689,
            844407,
            843900,
            849942,
            843939,
            843940,
            843968,
            843625,
            843834,
            844583,
            843676,
            843729,
            843791,
            844024,
            843613
        ]
    },
    "name": "C. Hot Bath",
    "statement": "Bob is about to take a hot bath. There are two taps to fill the bath: a\r\nhot water tap and a cold water tap. The cold water\u2019s temperature is ,\r\nand the hot water\u2019s temperature is . The cold water tap can transmit any\r\ninteger number of water units per second from to , inclusive. Similarly,\r\nthe hot water tap can transmit from to water units per second.If water\r\nunits per second flow through the first tap and water units per second\r\nflow through the second tap, then the resulting bath water temperature\r\nwill be:Bob wants to open both taps so that the bath water temperature\r\nwas not less than . However, the temperature should be as close as\r\npossible to this value. If there are several optimal variants, Bob\r\nchooses the one that lets fill the bath in the quickest way\r\npossible.Determine how much each tap should be opened so that Bob was\r\npleased with the result in the end.\r\n",
    "solutions": [
        "// Friendship is Magic\n#pragma comment(linker, \"/STACK:32000000\")\n\n#include <memory.h>\n#include <string.h>\n#include <cstdio>\n#include <cmath>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n\nusing namespace std;\n\ntypedef long long LL;\n\nvoid do_solve() {\n    int t1, t2, x1, x2, t0;\n    scanf(\"%d%d\", &t1, &t2);\n    scanf(\"%d%d%d\", &x1, &x2, &t0);\n    if (t0 == t2)\n    {\n        printf(\"%d %d\", t0 == t1 ? x1 : 0, x2);\n        return;\n    }\n    int besty1, besty2 = -1; \n    LL bestq, bestsum;\n    for (int i = 0; i <= x1; i++)\n    {\n        int j = min(((LL)(t0 - t1) * i + t2 - t0 - 1) / (t2 - t0), (LL)x2);\n        if (i == 0) j = x2;\n        LL sum = i+j;\n        LL q = t1 * (LL)i + t2 * (LL)j - sum * t0;\n        if (q < 0) continue;\n        if (besty2 == -1)\n        {\n            besty1 = i;\n            besty2 = j;\n            bestq = q;\n            bestsum = i+j;\n        }\n        else\n        {\n            if (q * bestsum < bestq * sum || (q * bestsum == bestq * sum && sum > bestsum))\n            {\n                besty1 = i;\n                besty2 = j;\n                bestq = q;\n                bestsum = i+j;\n            }\n        }\n    }\n    cout << besty1 << \" \" << besty2;\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    do_solve();\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Hot Bath.json",
    "editorial_link": "https://codeforces.com//blog/entry/3140",
    "editorial": "At the first you should consider cases when t0?=?t1, t0?=?t2 and t1?=?t2. Answers will be (x1,?0), (0,?x2) and (x1,?x2). The last 2 of them didn't present in the pretests.\n\nNext, for all 1???y1???x1 you should find minimal y2, for that t(y1,?y2)???t0. You can do it using one of three ways: binary search, two pointers or just calculation by formula [y1(t0?-?t1)?/?(t2?-?t0)], where [x] is rounding up of x. You should iterate over all cases and choose one optimal of them.\n\nThe last tricky case consists in the fact that for all 1???y1???x1 ? 1???y2???x2 t(y1,?y2)?<?t0. For example, you can see following test\n\n100 110 2 2 109 (it is the 6th pretest).\n\nIn this case you should output (0,?x2).\n\nAll calculations should be done in 64-bit integers (8th pretest checks overflow of 32-bit integers) or very carefully in the real numbers."
}