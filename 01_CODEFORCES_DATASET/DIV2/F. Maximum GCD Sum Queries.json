{
    "link": "https://codeforces.com//contest/1973/problem/F",
    "problemId": "2652015",
    "problem_idx": "F",
    "shortId": "1973F",
    "contest_number": "1973",
    "problem_submissions": {
        "F": [
            261463251,
            261436494,
            261787514
        ],
        "D": [
            261394881,
            261402242,
            261380949,
            261382024,
            261382530,
            261387010,
            261390196,
            261382271,
            261387986,
            261384447,
            261402787,
            261386421,
            261427816,
            261407792,
            261395337,
            261376975,
            261379252,
            261380684,
            261382950
        ],
        "E": [
            261381347,
            261382046,
            261401618,
            261402013,
            261401999,
            261406109,
            261402299,
            261407866,
            261402896,
            261405986,
            261394102,
            261405366,
            261389878,
            261408472,
            261404774,
            261590660
        ],
        "C": [
            261360567,
            261360988,
            261363426,
            261364691,
            261354543,
            261360787,
            261363933,
            261369573,
            261365792,
            261367077,
            261359236,
            261367488,
            261357141,
            261374894,
            261387975,
            261359851,
            261363374,
            261357155
        ],
        "B": [
            261348324,
            261350288,
            261353838,
            261351331,
            261349040,
            261350145,
            261349881,
            261347862,
            261350513,
            261350776,
            261350235,
            261356753,
            261350384,
            261354721,
            261390204,
            261350344,
            261351974,
            261347066
        ],
        "A": [
            261346207,
            261346661,
            261348023,
            288952169,
            261346140,
            261346181,
            261346010,
            261346089,
            261345101,
            261344789,
            261344990,
            261346630,
            261346138,
            261346691,
            261348987,
            261391373,
            261346139,
            261346040,
            261349777
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129556",
    "editorial": "Solution:Let be the maximum value of , on input (). Let be the maximum\r\nnumber of divisors a number in range can have and the maximum number of\r\nprime divisors such number can have.Letâs think about how to solve one\r\nquery (with coins) for now. Assume that in the optimal solution, we\r\nnever swap and . In the end, we will just run the same solution on input\r\nwhere and is swapped and is decreased by , and then we will take the\r\nmaximum of the two values these two runs will find.So now, in the\r\noptimal solution, the gcd of is always a divisor of , and the of is a\r\ndivisor of . Letâs start by factorizing the two numbers in .Now we will\r\nprecalculate something in order to be efficiently able to determine for\r\nevery , a divisor of , and , a divisor of , whether we can have and\r\nsimultaneously (and also the minimum cost of making it so). Then we can\r\nobviously answer the query by finding the best pair with sum at most .\r\nLetâs create new two dimensional arrays and of size . We will use to be\r\nable to tell the number of indexes such that we have either and or and .\r\nIf this count wonât be , then obviously we canât have and as âs of and .\r\nAlso, we will use to tell us the sum of costs of all swaps we need to\r\nperform to have and .Now how to make two such arrays efficiently? It is\r\nobvious that if the pair of s is consistent with some indexes in the\r\noriginal array, then for every pair such that and , this pair of s is\r\nalso consistent with those indexes (and maybe even more, also maybe some\r\nswaps just became unnecessary, but the point is, it doesnât get worse).\r\nSo if we want to add some value to a pair, we also want to get it added\r\nto all its divisors. Thatâs why, in order to calculate the arrays\r\nefficiently, we will first add some values on some positions and then do\r\nsomething like prefix sums for every cell we will sum the values for all\r\npairs such that and and update its current value with it. Assuming this\r\nis going to happen in the end, letâs look at every and consider what\r\npairs are \"good\" for this index with or without the swap:a) If divides\r\nand divides : For this type of pairs, we donât need to make any swaps on\r\nthis index. Letâs add to to indicate that for all such that and , we\r\ndonât have to perform any swaps at the position , the index is good as\r\nit is.b) divides and divides : In this case we will add to and to to\r\nindicate that if we pick , such that and , we can make index good if we\r\nswap and .c) and both divide both and : To avoid counting both of the\r\nprevious cases and therefore overcounting, we will add to and to (we\r\nhave to undo paying for the swap since in this case we actually donât\r\nhave to pay for it, but it falls under the case b) too).This step can be\r\ndone in .Now letâs fix the arrays and so they store the actual values,\r\nnot just the values we need to add. We will go through all primes\r\ndividing and update with and with , similarly for all primes dividing .\r\nIf we make those updates in the right order, we achieve that is the sum\r\nof all original values for all the pairs such that and like we wanted\r\n(and we can do the same for ).By careful precalculation of divisors and\r\ntheir order while factorizing, we can do this step in . Some efficient\r\nimplementations with extra log might pass also, but you will have to be\r\nmore careful.For multiple queries, after precalculating the possible\r\nsums of s and their costs, you can sort them and use binary search to\r\nanswer the queries.Time complexity: Memory complexity: Implementation in\r\nC++: 261999743Fun fact: While making the original proposal, I invented a\r\nversion of this problem with lower constraints and thought it could be\r\nnice Div2C. Few days later, while I was on a walk, I realized this\r\nsolution exists, so we decided to try to propose it as the hardest\r\nproblem.\r\n",
    "name": "F. Maximum GCD Sum Queries",
    "statement": "For k positive integers x_1, x_2,\r\nldots, x_k, the value\r\ngcd(x_1, x_2,\r\nldots, x_k) is the greatest common divisor of the integers x_1, x_2,\r\nldots, x_k the largest integer z such that all the integers x_1, x_2,\r\nldots, x_k are divisible by z.You are given three arrays a_1, a_2,\r\nldots, a_n, b_1, b_2,\r\nldots, b_n and c_1, c_2,\r\nldots, c_n of length n, containing positive integers. You also have a\r\nmachine that allows you to swap a_i and b_i for any i (1\r\nle i\r\nle n). Each swap costs you c_i coins.Find the maximum possible value of\r\ngcd(a_1, a_2,\r\nldots, a_n) +\r\ngcd(b_1, b_2,\r\nldots, b_n) that you can get by paying in total at most d coins for\r\nswapping some elements. The amount of coins you have changes a lot, so\r\nfind the answer to this question for each of the q possible values d_1,\r\nd_2,\r\nldots, d_q.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>using namespace std;#define ll long longint n,q,a[501000],b[500100],C[501000];ll d[501000];int ans[501000];int p[30],c[30],z1,z2,qz[30];ll su[10100000];int sk[10100000];int gcd(int a,int b){if(!b)return a;return gcd(b,a%b);}void za(int x,int y,int t,int z){    int o=x,zt=0;    for(int i=1;i<=z1;i++){        int e=0;while(!(o%p[i]))o/=p[i],e++;        zt+=qz[i-1]*min(e,c[i]);    }    o=y;    for(int i=z1+1;i<=z2;i++){        int e=0;while(!(o%p[i]))o/=p[i],e++;        zt+=qz[i-1]*min(e,c[i]);    }    if(t)su[zt]+=z;else sk[zt]+=z;}pair<ll,int>po[11451414];int tp;void dfs(int i,int x,int y,int st){    if(i==z2+1){        if(sk[st]<n-1)return;        po[++tp]={su[st],x+y};        return;    }    for(int j=0;j<=c[i];j++){        if(j){            st+=qz[i-1];            if(i<=z1)x*=p[i];            else y*=p[i];        }        dfs(i+1,x,y,st);    }}ll fz[11451414];void sol(ll V){    tp=0;    z1=z2=0;    int u=a[1];    for(int i=2;i*i<=u;i++)if(!(u%i)){p[++z1]=i,c[z1]=0;while(!(u%i))u/=i,c[z1]++;}    if(u>1)p[++z1]=u,c[z1]=1;    z2=z1,u=b[1];    for(int i=2;i*i<=u;i++)if(!(u%i)){p[++z2]=i,c[z2]=0;while(!(u%i))u/=i,c[z2]++;}    if(u>1)p[++z2]=u,c[z2]=1;    qz[0]=1;    for(int i=1;i<=z2;i++)qz[i]=qz[i-1]*(c[i]+1);    for(int i=0;i<qz[z2];i++)su[i]=sk[i]=0;    for(int i=2;i<=n;i++){        za(a[i],b[i],0,1),za(b[i],a[i],0,1);        int g=gcd(a[i],b[i]);        za(g,g,0,-1);        za(b[i],a[i],1,C[i]);        za(g,g,1,-C[i]);    }    for(int i=0;i<z2;i++)for(int j=qz[z2]-1;j>=0;j--)if((j%qz[i+1])/qz[i]>0)    su[j-qz[i]]+=su[j],sk[j-qz[i]]+=sk[j];    dfs(1,1,1,0);sort(po+1,po+tp+1);    for(int i=1;i<=tp;i++)po[i].second=max(po[i].second,po[i-1].second),fz[i]=po[i].first;    for(int i=1;i<=q;i++){        int wh=lower_bound(fz+1,fz+tp+1,d[i]-V+1)-fz;        if(wh>1)ans[i]=max(ans[i],po[wh-1].second);    }}int main(){    scanf(\"%d%d\",&n,&q);    for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);    for(int i=1;i<=n;i++)scanf(\"%d\",&b[i]);    for(int i=1;i<=n;i++)scanf(\"%d\",&C[i]);    for(int i=1;i<=q;i++)scanf(\"%lld\",&d[i]);    sol(0);swap(a[1],b[1]);sol(C[1]);    for(int i=1;i<=q;i++)printf(\"%d \",ans[i]);    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "dp",
        "implementation",
        "number theory"
    ],
    "dificulty": "3100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Maximum GCD Sum Queries.json",
    "hint": []
}