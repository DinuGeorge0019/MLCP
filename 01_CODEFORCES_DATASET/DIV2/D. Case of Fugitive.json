{"link": "https://codeforces.com//contest/556/problem/D", "problemId": "30417", "problem_idx": "D", "shortId": "556D", "contest_number": "556", "problem_submissions": {"E": [11798593, 11802983, 11804367, 11806288, 11807296, 11809513, 11800434, 11802658, 11830953], "D": [11795355, 11796315, 11795899, 11796322, 11799061, 11798540, 11799119, 11797672, 11798131, 11798280, 11800191, 11812529, 11800092, 11799755, 11800619, 11802251, 11818504, 11800610, 11801708, 11800703], "C": [11790828, 11813461, 11790864, 11790816, 11792705, 11791993, 11793214, 11794207, 11799350, 11792271, 11793843, 11792946, 11788929, 11794460, 11794387, 11796150, 11791587, 11789894, 11791106, 11792562, 11793761], "B": [11787481, 11788094, 11788373, 11788280, 11788531, 11789067, 11788489, 11786492, 11787137, 11787902, 11790114, 11790590, 11787542, 11786980, 11787988, 11787858, 11787163, 11788286, 11787516], "A": [11785901, 11785921, 11786590, 11785894, 11785846, 11786159, 11786486, 11786214, 11785755, 11785763, 11785847, 11785750, 11785944, 11785887, 11785926, 11786005, 11786011, 11785820, 11786301, 11785958]}, "name": "D. Case of Fugitive", "statement": "Andrewid the Android is a galaxy-famous detective. He is now chasing a\r\ncriminal hiding on the planet Oxa-5, the planet almost fully covered\r\nwith water.The only dry land there is an archipelago of narrow islands\r\nlocated in a row. For more comfort let\u2019s represent them as\r\nnon-intersecting segments on a straight line: island has coordinates ,\r\nbesides, for .To reach the goal, Andrewid needs to place a bridge\r\nbetween each pair of islands. A bridge of length can be placed between\r\nthe -th and the -th islads, if there are such coordinates of and , that\r\n, and . The detective was supplied with bridges, each bridge can be used\r\nat most once. Help him determine whether the bridges he got are enough\r\nto connect each pair of adjacent islands.\r\n", "solutions": ["#include <cstdio>\n#include <utility>\n#include <algorithm>\n#include <set>\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long ll;\n\npair<pair<ll, ll>, int> to_use[300000];\nll sh(pair<pair<ll, ll>, int> &A) { return A.first.first; }\npair<ll, int> mut(pair<pair<ll, ll>, int> &A) {\n  return make_pair(A.first.second, A.second);\n}\nint next_to_use = 0;\nset<pair<ll, int> > current;\npair<ll, int> bridges[300000];\nint result[300000];\nint ressize;\n\nint main() {\n  int N, M;\n  ressize = 0;\n  scanf(\"%d %d\", &N, &M);\n  ll A, B;\n  cin >> A >> B;\n  for (int i = 0; i < N - 1; ++i) {\n    ll a, b;\n    cin >> a >> b;\n    to_use[next_to_use++] = make_pair(make_pair(a - B, b - A), i);\n    A = a; B = b;\n  }\n  sort(&to_use[0], &to_use[next_to_use]);\n  for (int i = 0; i < M; ++i) {\n    ll X;\n    cin >> X;\n    bridges[i] = make_pair(X, i + 1);\n  }\n  sort(&bridges[0], &bridges[M]);\n  next_to_use = 0;\n  for (int i = 0; i < M; ++i) {\n    while (next_to_use < N - 1 && sh(to_use[next_to_use]) <= bridges[i].first) {\n      current.insert(mut(to_use[next_to_use]));\n      next_to_use += 1;\n    }\n    auto it = current.begin();\n    if (it == current.end()) continue;\n    if (it->first < bridges[i].first) {\n      printf(\"No\\n\");\n      return 0;\n    }\n    result[it->second] = bridges[i].second;\n    current.erase(it);\n    ressize += 1;\n  }\n  if (ressize < N - 1) {\n    printf(\"No\\n\"); return 0;\n  }\n  printf(\"Yes\\n\");\n  for (int i = 0; i < N - 1; ++i) {\n    printf(\"%d \", result[i]);\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "data structures", "greedy"], "dificulty": "2000", "interactive": false}