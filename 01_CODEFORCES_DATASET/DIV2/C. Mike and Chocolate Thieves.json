{
    "link": "https://codeforces.com//contest/689/problem/C",
    "problemId": "64399",
    "problem_idx": "C",
    "shortId": "689C",
    "contest_number": "689",
    "problem_submissions": {
        "D": [
            18930229,
            18929436,
            18930879,
            18930235,
            18926161,
            18928733,
            18925280,
            18927418,
            18929085,
            18929212,
            18929942,
            18930645,
            18931175,
            18924428,
            18930801,
            18934009,
            18927074,
            18932083,
            18931447
        ],
        "E": [
            18927271,
            18927820,
            18923666,
            18931272,
            18929873,
            18930514,
            18922905,
            18924072,
            18931242,
            18932135,
            18931664,
            18935299,
            18933488,
            18930284,
            18935230,
            18930474,
            18929312,
            18934284,
            18932460
        ],
        "C": [
            18924941,
            18925234,
            18926474,
            18924949,
            18927430,
            18926086,
            18927497,
            18929616,
            18924880,
            18926717,
            18932481,
            18925981,
            18926886,
            18931951,
            18926746,
            18931682,
            18931981,
            18925951,
            18922736
        ],
        "B": [
            18923236,
            18923653,
            18926920,
            18923889,
            18924142,
            18923587,
            18927964,
            18931269,
            18923788,
            18925427,
            18926540,
            18924110,
            18924747,
            18932852,
            18923583,
            18924738,
            18930576,
            18923854,
            18932827
        ],
        "A": [
            18922333,
            18922086,
            18921966,
            18921847,
            18936511,
            18922920,
            18935750,
            18932978,
            18922085,
            18924781,
            18922834,
            18922553,
            18922739,
            18933881,
            18922408,
            18925800,
            18922272,
            18933705
        ]
    },
    "name": "C. Mike and Chocolate Thieves",
    "statement": "Bad news came to Mike’s village, some thieves stole a bunch of\r\nchocolates from the local factory! Horrible! Aside from loving sweet\r\nthings, thieves from this area are known to be very greedy. So after a\r\nthief takes his number of chocolates for himself, the next thief will\r\ntake exactly times more than the previous one. The value of () is a\r\nsecret integer known only to them. It is also known that each thief’s\r\nbag can carry at most chocolates (if they intend to take more, the deal\r\nis cancelled) and that there were thieves involved. Sadly, only the\r\nthieves know the value of , but rumours say that the numbers of ways\r\nthey could have taken the chocolates (for a fixed , but not fixed ) is .\r\nTwo ways are considered different if one of the thieves (they should be\r\nnumbered in the order they take chocolates) took different number of\r\nchocolates in them.Mike want to track the thieves down, so he wants to\r\nknow what their bags are and value of will help him in that. Please find\r\nvalue of or tell him that the rumors are false and there is no such .\r\n",
    "solutions": [
        "#include <cassert>\n#include <fstream>\n#include <cstring>\n#include <queue>\n#include <algorithm>\n#include <bitset>\n#include <ctime>\n#include <set>\n#include <cmath>\n#include <iomanip>\n#include <map>\n#include <stack>\n#include <vector>\n#include <bitset>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i, a, n) for (int i = a; i <= n; ++i)\n#define ROF(i, n, a) for (int i = n; i >= a; i--)\n#define FIT(i, v) for (auto &i : v)\n#define pb push_back\n#define mp make_pair\n#define mt make_touple\n#define all(x) (x).begin(), (x).end()\n#define fi first\n#define se second\n#define sz(x) ((int)(x).size())\n#define log log2\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int mod = 1000000007;\nll powmod(ll a, ll b) {ll res=1; a %= mod; assert(b >= 0); for(; b; b >>= 1) {if (b & 1) res = res * a % mod; a = a * a % mod;} return res;}\n\nconst int N = 200100;\n\nll m;\n\nll nr(ll x) {\n    ll nr = 0;\n    FOR(i,2,200001) {\n        nr += x / (1LL * i * i * i);\n        if (1LL * i * i * i > x) {\n            break;\n        }\n        if (nr > m) {\n            return nr;\n        }\n    }\n    return nr;\n}\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"a.in\", \"r\", stdin);\n    freopen(\"a.out\", \"w\", stdout);\n#endif\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    \n    cin >> m;\n    ll st = 1;\n    ll dr = m * 8;\n    ll sol = -1;\n    while (st <= dr) {\n        ll mij = (st + dr) >> 1;\n        if (nr(mij) > m) {\n            dr = mij - 1;\n        } else if (nr(mij) < m){\n            st = mij + 1;\n        } else if (nr(mij) == m) {\n            sol = mij;\n            dr = mij - 1;\n        }\n    }\n    cout << sol;\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Mike and Chocolate Thieves.json",
    "editorial_link": "https://codeforces.com//blog/entry/45912",
    "editorial": "Suppose we want to find the number of ways for a fixed n.\n\nLet a,?b,?c,?d ( 0?<?a?<?b?<?c?<?d???n ) be the number of chocolates the thieves stole. By our condition, they have the form b?=?ak,?c?=?ak2,?d?=?ak3,where k is a positive integer. We can notice that  , so for each k we can count how many a satisfy the conditions 0?<?a?<?ak?<?ak2?<?ak3???n, their number is . Considering this, the final answer is .\n\nNotice that this expression is non-decreasing as n grows, so we can run a binary search for n.\n\nTotal complexity: Time ~ , Space: O(1).",
    "hint": []
}