{
    "link": "https://codeforces.com//contest/758/problem/C",
    "problemId": "89337",
    "problem_idx": "C",
    "shortId": "758C",
    "contest_number": "758",
    "problem_submissions": {
        "F": [
            23961911,
            23961832,
            23965370,
            23967077,
            23964444,
            23962828,
            23961458,
            23959907,
            23962385,
            23972421,
            23961385
        ],
        "E": [
            23961199,
            23969660
        ],
        "D": [
            23954905,
            23959005,
            23958687,
            23961234,
            23966280,
            23981466,
            23957019,
            23970497,
            23990624,
            23958899,
            23958219,
            23957228,
            23958436,
            23958155
        ],
        "C": [
            23954486,
            23955509,
            23955744,
            23956366,
            23958572,
            23953897,
            23975736,
            23955059,
            23956120,
            23952427,
            23952244,
            23955152,
            23953675,
            23954430,
            23955137,
            23954127,
            23955341,
            23955536,
            23969442,
            23966778
        ],
        "B": [
            23949178,
            23953141,
            23951861,
            23953552,
            23951433,
            23950823,
            23950433,
            23961140,
            23952985,
            23949054,
            23949507,
            23952101,
            23950424,
            23951944,
            23951182,
            23950619,
            23951222,
            23951421,
            23953877
        ],
        "A": [
            23947216,
            23950206,
            23947310,
            23949396,
            23949600,
            23947716,
            23947436,
            23947618,
            23948628,
            23947219,
            23947297,
            23948336,
            23948103,
            23948298,
            23947546,
            23947915,
            23948934,
            23948465
        ]
    },
    "name": "C. Unfair Poll",
    "statement": "On the Literature lesson Sergei noticed an awful injustice, it seems\r\nthat some students are asked more often than others.Seating in the class\r\nlooks like a rectangle, where rows with pupils in each. The teacher asks\r\npupils in the following order: at first, she asks all pupils from the\r\nfirst row in the order of their seating, then she continues to ask\r\npupils from the next row. If the teacher asked the last row, then the\r\ndirection of the poll changes, it means that she asks the previous row.\r\nThe order of asking the rows looks as follows: the -st row, the -nd row,\r\n, the -st row, the -th row, the -st row, , the -nd row, the -st row, the\r\n-nd row, The order of asking of pupils on the same row is always the\r\nsame: the -st pupil, the -nd pupil, , the -th pupil.During the lesson\r\nthe teacher managed to ask exactly questions from pupils in order\r\ndescribed above. Sergei seats on the -th row, on the -th place in the\r\nrow. Sergei decided to prove to the teacher that pupils are asked\r\nirregularly, help him count three values: the maximum number of\r\nquestions a particular pupil is asked, the minimum number of questions a\r\nparticular pupil is asked, how many times the teacher asked Sergei. If\r\nthere is only one row in the class, then the teacher always asks\r\nchildren from this row.\r\n",
    "solutions": [
        "//#include <bits/stdc++.h>\n#include <iostream>\nusing namespace std;\ntypedef long long ll;\nll n,m,k,x,y,mx,mn;\nll f(ll x, ll y, ll k)\n{\n\tll ans=0;\n\tif(n==1)\n\t{\n\t\tans=k/m;\n\t\tk-=ans*m;\n\t\tif(k>=y)\n\t\t\tans++;\n\t}\n\telse if(x==1)\n\t{\n\t\tll cnt=k/((n-1)*m);\n\t\tk-=cnt*(n-1)*m;\n\t\tans+=(cnt+1)/2;\n\t\tif(cnt&1)\n\t\t{\n\t\t\tfor(ll i=n;k>0&&i>=1;i--,k-=m)\n\t\t\t\tif(i==x&&k>=y)\n\t\t\t\t\tans++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(ll i=1;i<=n&&k>0;i++,k-=m)\n\t\t\t\tif(i==x&&k>=y)\n\t\t\t\t\tans++;\n\t\t}\n\t}\n\telse if(x==n)\n\t{\n\t\tll cnt=k/((n-1)*m);\n\t\tk-=cnt*(n-1)*m;\n\t\tans+=cnt/2;\n\t\tif(cnt&1)\n\t\t{\n\t\t\tfor(ll i=n;k>0&&i>=1;i--,k-=m)\n\t\t\t\tif(i==x&&k>=y)\n\t\t\t\t\tans++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(ll i=1;i<=n&&k>0;i++,k-=m)\n\t\t\t\tif(i==x&&k>=y)\n\t\t\t\t\tans++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tans+=k/((n-1)*m);\n\t\tk-=ans*(n-1)*m;\n\t\tif(ans&1)\n\t\t{\n\t\t\tfor(ll i=n;k>0&&i>=1;i--,k-=m)\n\t\t\t\tif(i==x&&k>=y)\n\t\t\t\t\tans++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(ll i=1;i<=n&&k>0;i++,k-=m)\n\t\t\t\tif(i==x&&k>=y)\n\t\t\t\t\tans++;\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\n{\n\tcin>>n>>m>>k>>x>>y;\n\tmx=mn=f(1,1,k);\n\tfor(ll i=1;i<=n;i++)\n\t\tfor(ll j=1;j<=m;j++)\n\t\t\tmx=max(mx,f(i,j,k)),\n\t\t\tmn=min(mn,f(i,j,k));\n\tcout<<mx<<\" \"<<mn<<\" \"<<f(x,y,k);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "implementation",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Unfair Poll.json",
    "editorial_link": "https://codeforces.com//blog/entry/49880",
    "editorial": "Letâs learn to count the number of questions which were asked to the\r\npupil in the -th row, at the -th place in the order. Note that the\r\nprocess of asking is periodic. During one period children were asked in\r\nthe following order: the pupil from the first row who seats at the first\r\ntable; the pupil from the first row who seats at the second table; the\r\npupil from the first row who seats at the table; the pupil from the\r\nfirst row who seats at the table; the pupil from the second row who\r\nseats at the first table; the pupil from the second row who seats at the\r\nsecond table; the pupil from the second row who seats at the table; the\r\npupil from the second row who seats at the table; the pupil from the row\r\nwho seats at the table; the pupil from the row who seats at the first\r\ntable; the pupil from row who seats at the second table; the pupil from\r\nthe row who seats at the table; the pupil from the row who seats at the\r\ntable; the pupil from the row who seats at the first table; the pupil\r\nfrom the row who seats at the second table; the pupil from the row who\r\nseats at the table; the pupil from the row who seats at the table; the\r\npupil from the row who seats at the first table; the pupil from the row\r\nwho seats at the second table; the pupil from the row who seats at the\r\ntable; the pupil from the row who seats at the table; the pupil from the\r\nrow who seats at the table; the pupil from the second row who seats at\r\nthe first table; the pupil from the second row who seats at the second\r\ntable; the pupil from the second row who seats at the table; the pupil\r\nfrom the second row who seats at the table. The next the pupil from the\r\nfirst row who seats at the first table, the period starts from the\r\nbeginning. Thus, during one period pupils who seats at the outer rows\r\nwill be asked once, others will be asked twice. If , then . The number\r\nof full periods equals . The remaining questions are , so we can only\r\nmake poll on the remaining questions for the or for individual and print\r\nthe formula. Thus, can be seen as or as .On what places are people who\r\nmay be asked more times than the other? Firstly, this is the first row\r\nand the first table, because the poll begins from it. Secondly, this is\r\nthe second row and the first table, because the poll of the central, not\r\nouter part of a class at the right side, begins from it. Thirdly, the\r\nrow and the first place because the poll of the central, not outer part\r\nof a class at the left side, begins from it.The maximum number of asked\r\nquestions to one pupil equals .The minimum number of asked questions to\r\none pupil equals , because the pupil who seats on the last row and at\r\nthe last table will be asked less than others. Thus, we have decisions\r\nwith the asymptotic or .\r\n",
    "hint": []
}