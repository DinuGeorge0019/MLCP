{"link": "https://codeforces.com//contest/554/problem/E", "problemId": "30336", "problem_idx": "E", "shortId": "554E", "contest_number": "554", "problem_submissions": {"E": [11746850, 13764219, 11830271, 11766455, 11747742, 11764575, 11774480, 11758934], "D": [11744247, 11746031, 11746127, 11746736, 11747437, 11747976, 11748267, 11748288, 11748030, 11747975, 11748807, 11748413, 11748580, 11748828, 11748890, 11748381, 11749085], "C": [11742733, 13059738, 11743053, 11742819, 11744097, 11744323, 11744579, 11743917, 11744372, 11744426, 11744294, 11742165, 11745064, 11744621, 11745770, 11745295, 11745901, 11746169, 11746135], "B": [11739897, 11739637, 11740204, 11741151, 11741795, 11740995, 11741073, 11742270, 11742529, 11741366, 11746029, 11742271, 11745027, 11741791, 11743493, 11742926, 11741663, 11742603, 11739370], "A": [11739226, 11738997, 11739151, 11739277, 11740303, 11739365, 11739663, 11740298, 11740792, 11739964, 11739524, 11740207, 11741321, 11739802, 11762460, 11740503, 11740511, 11739943, 11741469, 11738906]}, "name": "E. Love Triangles", "statement": "There are many anime that are about \"love triangles\": Alice loves Bob,\r\nand Charlie loves Bob as well, but Alice hates Charlie. You are thinking\r\nabout an anime which has characters. The characters are labeled from to\r\n. Every pair of two characters can either mutually love each other or\r\nmutually hate each other (there is no neutral state).You hate love\r\ntriangles (A-B are in love and B-C are in love, but A-C hate each\r\nother), and you also hate it when nobody is in love. So, considering any\r\nthree characters, you will be happy if exactly one pair is in love (A\r\nand B love each other, and C hates both A and B), or if all three pairs\r\nare in love (A loves B, B loves C, C loves A).You are given a list of\r\nknown relationships in the anime. You know for sure that certain pairs\r\nlove each other, and certain pairs hate each other. You\u2019re wondering how\r\nmany ways you can fill in the remaining relationships so you are happy\r\nwith every triangle. Two ways are considered different if two characters\r\nare in love in one way but hate each other in the other. Print this\r\ncount modulo .\r\n", "solutions": ["#pragma comment (linker, \"/STACK:1000000000\")\n\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <set>\n#include <cstring>\n#include <queue>\n#include <vector>\n#include <map>\n#include <string>\n\nusing namespace std;\n\nconst int maxn = (int)1e5 + 10;\n\nint p[maxn];\nint xorrrr[maxn];\nint d[maxn];\n\nvector <int> ed[maxn];\n\nint get_parent(int v) {\n\tif (v == p[v]) {\n\t\treturn v;\n\t}\n\n\tint par = get_parent(p[v]);\n\n\td[v] += d[p[v]];\n\td[v] %= 2;\n\txorrrr[v] ^= xorrrr[p[v]];\n\n\tp[v] = par;\n\n\treturn par;\n}\n\nbool used[maxn];\nconst int q = (int)1e9 + 7;\n\nvoid dfs(int v) {\n\tused[v] = true;\n\n\tfor (int i = 0; i < (int)ed[v].size(); i++) {\n\t\tint u = ed[v][i];\n\n\t\tif (!used[u]) {\n\t\t\tdfs(u);\n\t\t}\n\t}\n}\n\nint main() {\n\tint n, m;\n\n\tscanf(\"%d %d\", &n, &m);\n\n\tfor (int i = 1; i <= n; i++) {\n\t\tp[i] = i;\n\t\txorrrr[i] = 0;\n\t\td[i] = 0;\n\t}\n\n\tfor (int i = 0; i < m; i++) {\n\t\tint x, y, tp;\n\n\t\tscanf(\"%d %d %d\", &x, &y, &tp);\n\n\t\ted[x].push_back(y);\n\t\ted[y].push_back(x);\n\n\t\tint p_x = get_parent(x);\n\t\tint p_y = get_parent(y);\n\n\t\tif (p_x == p_y) {\n\t\t\tif ((d[x] + d[y]) % 2 == 0) {\n\t\t\t\tif ((xorrrr[x] ^ xorrrr[y] ^ tp) == 0) {\n\t\t\t\t\tprintf(\"0\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ((xorrrr[x] ^ xorrrr[y] ^ tp) == 1) {\n\t\t\t\t\tprintf(\"0\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tp[p_x] = p_y;\n\t\t\td[p_x] = (d[x] + d[y] + 1) % 2;\n\t\t\txorrrr[p_x] = xorrrr[x] ^ xorrrr[y] ^ tp;\n\t\t}\n\t}\n\n\tint cnt = 0;\n\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!used[i]) {\n\t\t\tcnt++;\n\t\t\tdfs(i);\n\t\t}\n\t}\n\n\tint ans = 1;\n\n\tfor (int i = 1; i < cnt; i++) {\n\t\tans *= 2;\n\t\tans %= q;\n\t}\n\n\tcout << ans << endl;\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["dfs and similar", "dsu", "graphs"], "dificulty": "2200", "interactive": false}