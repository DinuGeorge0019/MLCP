{
    "link": "https://codeforces.com//contest/1313/problem/C1",
    "problemId": "546722",
    "problem_idx": "C1",
    "shortId": "1313C1",
    "contest_number": "1313",
    "problem_submissions": {
        "E": [
            71681170,
            71676206,
            71701918,
            71678634,
            71684245
        ],
        "D": [
            71668784,
            71676711,
            71679066,
            71902295,
            71669382,
            71676113,
            71676282,
            71682897,
            71682850,
            71684110,
            71683951,
            71679478,
            71685695,
            71684314,
            71693014,
            71684216,
            71672133,
            71677829,
            71681283
        ],
        "C1": [
            71659792,
            71665149,
            71664308,
            71663397,
            71902274,
            71657100,
            71662551,
            71666875,
            71662026,
            71660339,
            71665119,
            71670647,
            71661830,
            71671471,
            71673887,
            71666482,
            71663477,
            71673192,
            71664658,
            71659547,
            71660235
        ],
        "C2": [
            71659727,
            71665106,
            71664225,
            71663324,
            71902282,
            71657182,
            71679705,
            71666789,
            71661927,
            71660290,
            71665068,
            71670595,
            71672508,
            71671524,
            71673974,
            71666543,
            71663428,
            71673118,
            71664615,
            71659474,
            71664008
        ],
        "B": [
            71658438,
            71660532,
            71661422,
            71660555,
            71902225,
            71683862,
            71659255,
            71661835,
            71671081,
            71672434,
            71661140,
            71675335,
            71666293,
            71666358,
            71674883,
            71661144,
            71675700,
            71667622
        ],
        "A": [
            71654494,
            71655402,
            71656261,
            71655976,
            71902195,
            71678655,
            71654489,
            71655616,
            71656192,
            71666785,
            71655624,
            71657167,
            71655162,
            71654706,
            71657644,
            71657443,
            71657488,
            71654829,
            71654475,
            71655371,
            71655189
        ]
    },
    "name": "C1. Skyscrapers  easy version ",
    "statement": "The outskirts of the capital are being actively built up in Berland. The\r\ncompany \"Kernel Panic\" manages the construction of a residential complex\r\nof skyscrapers in New Berlskva. All skyscrapers are built along the\r\nhighway. It is known that the company has already bought n plots along\r\nthe highway and is preparing to build n skyscrapers, one skyscraper per\r\nplot.Architects must consider several requirements when planning a\r\nskyscraper. Firstly, since the land on each plot has different\r\nproperties, each skyscraper has a limit on the largest number of floors\r\nit can have. Secondly, according to the design code of the city, it is\r\nunacceptable for a skyscraper to simultaneously have higher skyscrapers\r\nboth to the left and to the right of it.Formally, let\u2019s number the plots\r\nfrom 1 to n. Then if the skyscraper on the i-th plot has a_i floors, it\r\nmust hold that a_i is at most m_i (1\r\nle a_i\r\nle m_i). Also there mustn\u2019t be integers j and k such that j < i < k and\r\na_j > a_i < a_k. Plots j and k are required to be adjacent to i.The\r\ncompany wants the total number of floors in the built skyscrapers to be\r\nas large as possible. Help it to choose the number of floors for each\r\nskyscraper in an optimal way, i.e. in such a way that all requirements\r\nare fulfilled, and among all such construction plans choose any plan\r\nwith the maximum possible total number of floors.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\ntypedef long long ll;\nll gi(){\n\tll x=0,f=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch))f^=ch=='-',ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-'0',ch=getchar();\n\treturn f?x:-x;\n}\nint h[500010];\nll L[500010],R[500010];\nint stk[500010],tot[500010];ll sum;\nint main(){\n#ifdef LOCAL\n\tfreopen(\"in.in\",\"r\",stdin);\n\t//freopen(\"out.out\",\"w\",stdout);\n#endif\n\tint n=gi();\n\tfor(int i=1;i<=n;++i)h[i]=gi();\n\tint tp=0;\n\tfor(int i=1;i<=n;++i){\n\t\tint TOT=1;\n\t\twhile(tp&&stk[tp]>h[i])TOT+=tot[tp],sum-=1ll*tot[tp]*stk[tp],--tp;\n\t\tstk[++tp]=h[i],tot[tp]=TOT,sum+=1ll*h[i]*TOT;\n\t\tL[i]=sum;\n\t}\n\ttp=0;\n\tsum=0;\n\tfor(int i=n;i;--i){\n\t\tint TOT=1;\n\t\twhile(tp&&stk[tp]>h[i])TOT+=tot[tp],sum-=1ll*tot[tp]*stk[tp],--tp;\n\t\tstk[++tp]=h[i],tot[tp]=TOT,sum+=1ll*h[i]*TOT;\n\t\tR[i]=sum;\n\t}\n\tll mx=0,p=0;\n\tfor(int i=1;i<=n;++i)if(L[i]+R[i]-h[i]>mx)mx=L[i]+R[i]-h[i],p=i;\n\tfor(int i=p-1;i;--i)h[i]=std::min(h[i],h[i+1]);\n\tfor(int i=p+1;i<=n;++i)h[i]=std::min(h[i],h[i-1]);\n\tfor(int i=1;i<=n;++i)printf(\"%d \",h[i]);puts(\"\");\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "greedy"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C1. Skyscrapers  easy version .json",
    "editorial_link": "https://codeforces.com//blog/entry/74146",
    "editorial": "using namespace std; int main() { ll n,i,j,k,l; cin>>n; ll a[n+1];\r\nfor(i=1;i<=n;i++){ cin>>a[i]; } i=1;j=n; while(i<=j){ } }\r\n"
}