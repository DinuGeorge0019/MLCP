{"link": "https://codeforces.com//contest/1364/problem/B", "problemId": "647243", "problem_idx": "B", "shortId": "1364B", "contest_number": "1364", "problem_submissions": {"E": [83685190, 83684728, 83670044, 83708391, 86874545, 83727888, 94916861, 83733626, 83892588], "D": [83674039, 83643909, 83643324, 83650173, 83654530, 83655343, 83656667, 83658116, 83652702, 83655398, 83657128, 83655879, 83656798, 83659303, 83654673, 83652945, 83654032, 83654691, 83660980, 84168459, 83653853], "C": [83641956, 83631075, 83632825, 83637025, 83635932, 83634309, 83632050, 83634741, 83637967, 83633786, 83640244, 83634458, 83638454, 83638371, 83638980, 83647774, 83644474, 83643505, 83634306, 83639352], "B": [83634593, 83624903, 83627972, 83631302, 83628554, 83625631, 83625293, 83627339, 83628623, 83628644, 83625351, 83628184, 83628428, 83624769, 83633106, 83628572, 83637716, 83626469, 83630293], "A": [83629697, 83628427, 83623168, 83625873, 83624275, 83623298, 83623685, 83623482, 83625309, 83624536, 83623274, 83624381, 83624214, 83623297, 83623701, 83625943, 83623507, 83625742]}, "name": "B. Most socially-distanced subsequence", "statement": "Given a permutation p of length n, find its subsequence s_1, s_2,\r\nldots, s_k of length at least 2 such that: |s_1-s_2|+|s_2-s_3|+\r\nldots+|s_{k-1}-s_k| is as big as possible over all subsequences of p\r\nwith length at least 2. Among all such subsequences, choose the one\r\nwhose length, k, is as small as possible. If multiple subsequences\r\nsatisfy these conditions, you are allowed to find any of them.A sequence\r\na is a subsequence of an array b if a can be obtained from b by deleting\r\nsome (possibly, zero or all) elements.A permutation of length n is an\r\narray of length n in which every element from 1 to n occurs exactly\r\nonce.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (auto &i : a) {\n      cin >> i;\n    }\n    int i = 0;\n    vector<int> res;\n    while (true) {\n      res.emplace_back(a[i]);\n      int j = i + 1;\n      if (j == n) {\n        break;\n      } else if (a[j] > a[i]) {\n        while (a[j] > a[j - 1] && j < n) {\n          j++;\n        }\n        i = j - 1;\n      } else {\n        while (a[j] < a[j - 1] && j < n) {\n          j++;\n        }\n        i = j - 1;\n      }\n    }\n    cout << res.size() << '\\n';\n    for (const auto &j : res) {\n      cout << j << ' ';\n    }\n    cout << '\\n';\n  }\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["greedy", "two pointers"], "dificulty": "1300", "interactive": false}