{
    "link": "https://codeforces.com//contest/1113/problem/F",
    "problemId": "298880",
    "problem_idx": "F",
    "shortId": "1113F",
    "contest_number": "1113",
    "problem_submissions": {
        "F": [
            50029851,
            50027404,
            50030339,
            50026081,
            50014660,
            50035333,
            50257257,
            50070723
        ],
        "D": [
            50015277,
            50015205,
            50019421,
            50031452,
            50020920,
            50013311,
            50007178,
            50013937,
            50012791,
            50015938,
            50016802,
            50014200,
            50015657,
            50016776,
            50016469,
            50014925,
            50016276,
            50015341,
            50015398
        ],
        "C": [
            50010380,
            50008887,
            50014758,
            50003958,
            50029468,
            50007583,
            50010331,
            50007640,
            50007298,
            50006708,
            50007662,
            50010852,
            50007580,
            50008735,
            50006693,
            50008307,
            50010428,
            50010877,
            50010398
        ],
        "B": [
            50004482,
            50004900,
            50004055,
            50027451,
            50003687,
            50003644,
            50004759,
            50003919,
            50003186,
            50003543,
            50006686,
            50003830,
            50004035,
            50003831,
            50006011,
            50005003,
            50007355,
            50002185
        ],
        "A": [
            50001104,
            50002099,
            50000353,
            49999666,
            49999994,
            50004913,
            49999638,
            49999959,
            49999704,
            50000171,
            50001843,
            49999533,
            50000757,
            49999734,
            50002770,
            50000200,
            50002464,
            49999515
        ],
        "E": []
    },
    "name": "F. Sasha and Interesting Fact from Graph Theory",
    "statement": "Once, during a lesson, Sasha got bored and decided to talk with his\r\nfriends. Suddenly, he saw Kefa. Since we can talk endlessly about Kefa,\r\nwe won\u2019t even start doing that. The conversation turned to graphs. Kefa\r\npromised Sasha to tell him about one interesting fact from graph theory\r\nif Sasha helps Kefa to count the number of . In this task, a is a\r\nweighted connected graph, consisting of n vertices and n-1 edges, and\r\nweights of edges are integers from 1 to m. Kefa determines the beauty of\r\na tree as follows: he finds in the tree his two favorite vertices\r\nvertices with numbers a and b, and counts the distance between them. The\r\ndistance between two vertices x and y is the sum of weights of edges on\r\nthe simple path from x to y. If the distance between two vertices a and\r\nb is to m, then the tree is .Sasha likes graph theory, and even more,\r\nSasha likes interesting facts, that\u2019s why he agreed to help Kefa.\r\nLuckily, Sasha is familiar with you . Help Sasha to count the number of\r\ntrees for Kefa. Two trees are considered to be distinct if there is an\r\nedge that occurs in one of them and doesn\u2019t occur in the other one.\r\nEdge\u2019s .Kefa warned Sasha, that there can be too many beautiful trees,\r\nso it will be enough to count the number modulo 10^9 + 7.\r\n",
    "solutions": [
        "#include <iostream>\nusing namespace std;\n\nint n, m, a, b;\nconst long long MOD = 1e9+7, M = 1e6;\nlong long pow(long long a, int n) {\n    if(n == 0) return 1;\n    long long p = pow(a,n/2);\n    p *= p; p %= MOD;\n    return (n % 2 == 0 ? p : (p*a)%MOD);\n}\nlong long inv[M+1];\n\nint main() {\n    for (int i = 1; i <= M; i++) inv[i] = pow(i, MOD-2);\n    ios_base::sync_with_stdio(false);\n    cin >> n >> m >> a >> b;\n    long long sol = 0;\n    long long t = (pow(m, n-1)*pow(n, n-2)) % MOD;\n    for (int d = 1; d <= min(m, n-1); d++) {\n        if(d != 1) {\n            t *= (m-d+1); t %= MOD;\n            t *= inv[d-1]; t %= MOD;\n        }\n        t *= inv[m]; t %= MOD;\n        if(d != 1) {\n            t *= n-d; t %= MOD;\n        }\n        t *= d+1; t %= MOD;\n        t *= inv[d]; t %= MOD;\n        t *= inv[n]; t %= MOD;\n        sol += t; sol %= MOD;\n    }\n    cout << sol << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "trees"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Sasha and Interesting Fact from Graph Theory.json",
    "editorial_link": "https://codeforces.com//blog/entry/65295",
    "editorial": "Let's fix edges\n  \u0097 the number of edges on the path between a\n and b\n. Then on this path there are edges?1\n vertices between a\n and b\n, and they can be choosen in A(n?2,edges?1)\n ways. The amount of ways to place numbers on edges in such a way, that their sum is equal to m\n, is (m?1edges?1)\n (stars and bars method). If an edge doesn't belong to out path, then doesn't metter what number is written on it, so we can multiply answer by mn?edges?1\n. Now, we want to form a forest from remaining n?edges?1\n vertices and to hang it to any of edges+1\n vertexes from our path. According to one of generalizations of Cayley's formula, number of forsests of x\n vertices, where vertices 1,2,\u0085,y\n belong to different trees is f(x,y)=y?xx?y?1\n. So for fixed edges\n we got the formula trees(edges)=A(n?2,edges?1)?f(n,edges+1)?(m?1edges?1)?mn?edges?1\n\nComplexity is O((n+m)?log(mod))\n or O(n+m)\n, in case you precompute all powers, factorials and thier inverse in linear time."
}