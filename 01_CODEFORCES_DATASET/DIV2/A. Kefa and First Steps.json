{
    "link": "https://codeforces.com//contest/580/problem/A",
    "problemId": "35995",
    "problem_idx": "A",
    "shortId": "580A",
    "contest_number": "580",
    "problem_submissions": {
        "E": [
            13169027,
            13165630,
            13172362,
            13172239,
            13276228,
            13276220,
            13181451,
            13180453
        ],
        "D": [
            13158152,
            13153446,
            13153124,
            13152837,
            13153644,
            13153078,
            13152233,
            13150734,
            13158863,
            13154097,
            13154459,
            13155410,
            13154153,
            13153936,
            13153904,
            13151772,
            13154328,
            13155366
        ],
        "C": [
            13152496,
            13147124,
            13149562,
            13149833,
            13149612,
            13149260,
            13148537,
            13148215,
            13150353,
            13147522,
            13151581,
            13150500,
            13149659,
            13151388,
            13150099,
            13149113,
            13149776,
            13150107
        ],
        "B": [
            13148061,
            13167252,
            13146021,
            13147235,
            13171070,
            13146699,
            13146714,
            13146413,
            13145854,
            13146150,
            13150066,
            13148456,
            13146468,
            13147058,
            13148187,
            13147219,
            13146687,
            13147097,
            13148044
        ],
        "A": [
            13145130,
            13166155,
            13143931,
            13143879,
            13144120,
            13143774,
            13143862,
            13143852,
            13143834,
            13144014,
            13143978,
            13143875,
            13144293,
            13145295,
            13145825,
            13143916,
            13144739,
            13143807
        ]
    },
    "name": "A. Kefa and First Steps",
    "statement": "Kefa decided to make some money doing business on the Internet for\r\nexactly days. He knows that on the -th day () he makes money. Kefa loves\r\nprogress, thatâ€™s why he wants to know the length of the maximum\r\nnon-decreasing subsegment in sequence . Let us remind you that the\r\nsubsegment of the sequence is its continuous fragment. A subsegment of\r\nnumbers is called non-decreasing if all numbers in it follow in the\r\nnon-decreasing order.Help Kefa cope with this task!\r\n",
    "solutions": [
        "#include<iostream>\n#include<sstream>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<cstdlib>\n#include<cmath>\n#include<cctype>\n#include<ctime>\n#include<algorithm>\n#include<iomanip>\n#include<vector>\n#include<queue>\n#include<map>\n#include<set>\n#include<cassert>\n#include<bitset>\n\nusing namespace std;\ntypedef long long LL;\nint a[200000];\nint main() {\n    int n;\n    a[0]=-1;\n    int ans=0;\n    int s=0;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n        if (a[i]>=a[i-1]) s++;\n        else\n        {\n            s=1;\n        }\n        ans=max(ans,s);\n    }\n    cout<<ans<<endl;\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "implementation"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Kefa and First Steps.json",
    "editorial_link": "https://codeforces.com//blog/entry/20468",
    "editorial": "Note, that if the array has two intersecting continuous non-decreasing\r\nsubsequence, they can be combined into one. Therefore, you can just pass\r\nthe array from left to right. If the current subsequence can be\r\ncontinued using the -th element, then we do it, otherwise we start a new\r\none. The answer is the maximum subsequence of all the found ones.\r\nAsymptotics . Solution\r\n",
    "hint": []
}