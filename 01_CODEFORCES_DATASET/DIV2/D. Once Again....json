{"link": "https://codeforces.com//contest/583/problem/D", "problemId": "37193", "problem_idx": "D", "shortId": "583D", "contest_number": "583", "problem_submissions": {"E": [13375753, 13396222], "D": [13371700, 13375834, 13375664, 13375798, 13376138, 13377993, 13375935, 13375839, 13375159, 13377276, 13376289, 13377157, 13375820, 13376745, 13376124, 13377422, 13377342, 13377605], "B": [13364674, 13365201, 13363126, 13365327, 13365425, 13364429, 13367401, 13370194, 13367295, 13364694, 13364942, 13365660, 13367313, 13366206, 13367386, 13368153, 13364343, 13366693], "A": [13362665, 13362396, 13364500, 13362804, 13362621, 13362398, 13364299, 13368142, 13363751, 13362641, 13362459, 13362661, 13364238, 13362509, 13363582, 13363832, 13362516, 13363164], "C": [13368419, 13368334, 13370522, 13369874, 13370412, 13370222, 13366293, 13372301, 13369921, 13372160, 13372319, 13372641, 13371990, 13372547, 13373001, 13368713, 13370537]}, "name": "D. Once Again...", "statement": "You are given an array of positive integers of length . We know that for\r\nany it is true that . Find the length of the longest non-decreasing\r\nsequence of the given array.\r\n", "solutions": ["#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<iostream>\nusing namespace std;\nconst int N=100;\ntypedef int Mat[102][105];\nMat X,A,tmp;\nint n,T,a[105],b[105],vn;\nint d[105];\n\nvoid mult(Mat &a,Mat &b,Mat &c)\n{\n\tint r;\n\tfor(int i=1;i<=N;i++)\n\t\tfor(int j=1;j<=N;j++)\n\t\t{\n\t\t\tr=-1000010000;\n\t\t\tfor(int k=1;k<=N;k++)\n\t\t\t\tr=max(r,a[i][k]+b[k][j]);\n\t\t\ttmp[i][j]=r;\n\t\t}\n\tfor(int i=1;i<=N;i++)\n\t\tfor(int j=1;j<=N;j++)\n\t\t\tc[i][j]=tmp[i][j];\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&T);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",a+i),b[i]=a[i];\n\tsort(b+1,b+n+1);\n\tvn=unique(b+1,b+n+1)-b-1;\n\tfor(int i=1;i<=n;i++)\n\t\ta[i]=lower_bound(b+1,b+vn+1,a[i])-b;\n\tmemset(X,-60,sizeof(X));\n\tmemset(A,-60,sizeof(A));\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tfor(int j=1;j<=N;j++)\n\t\t\tX[i][j]=A[i][j]=-1000010000;\n\t\tA[i][i]=0;\n\t}\n\tfor(int p=1,low,high,mid;p<=N;p++)\n\t{\n\t\tmemset(d,31,sizeof(d));\n\t\td[0]=p;\n\t\tfor(int i=1;i<=n;i++)\n\t\tif(a[i]>=p)\n\t\t{\n\t\t\tlow=0,high=n+1;\n\t\t\twhile(low+1<high)\n\t\t\t{\n\t\t\t\tmid=low+high>>1;\n\t\t\t\tif(a[i]>=d[mid])low=mid;\n\t\t\t\telse high=mid;\n\t\t\t}\n\t\t\td[low+1]=min(d[low+1],a[i]);\n\t\t}\n\t\tfor(int q=p;q<=N;q++)\n\t\t{\n\t\t\tlow=0,high=n+1;\n\t\t\twhile(low+1<high)\n\t\t\t{\n\t\t\t\tmid=low+high>>1;\n\t\t\t\tif(q>=d[mid])low=mid;\n\t\t\t\telse high=mid;\n\t\t\t}\n\t\t\tX[p][q]=low;\n\t\t}\n\t}\n\t\n\tfor(int B=T;B;B>>=1,mult(X,X,X))\n\t\tif(B&1)mult(A,X,A);\n\tint ans=0;\n\tfor(int i=1;i<=N;i++)\n\t\tans=max(ans,A[1][i]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "dp"], "dificulty": "1900", "interactive": false}