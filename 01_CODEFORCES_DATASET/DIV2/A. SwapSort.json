{
    "link": "https://codeforces.com//contest/489/problem/A",
    "problemId": "17496",
    "problem_idx": "A",
    "shortId": "489A",
    "contest_number": "489",
    "problem_submissions": {
        "D": [
            13589038,
            8724316,
            8726296,
            8731189,
            8726766,
            8726894,
            8728465,
            8728477,
            8727759,
            8725875,
            8727494,
            8730275,
            8733738,
            8729954,
            8730137,
            8724674,
            8731839,
            8731752,
            8732051
        ],
        "C": [
            13588891,
            8721795,
            8727951,
            8723822,
            8724371,
            8723499,
            8726577,
            8723991,
            8722965,
            8723091,
            8724636,
            8726610,
            8730038,
            8726232,
            8725795,
            8724261,
            8722941,
            8722633,
            8723063
        ],
        "B": [
            13588813,
            8720541,
            8728807,
            8721401,
            8766675,
            8722756,
            8720717,
            8724885,
            8720855,
            8720680,
            8720515,
            8720936,
            8722566,
            8728071,
            8723662,
            8722124,
            8737370,
            8720146,
            8720599,
            8721787
        ],
        "A": [
            13588752,
            8742614,
            8729605,
            8720536,
            8720304,
            8719407,
            8720112,
            8719631,
            8724692,
            8719911,
            8719459,
            8720699,
            8726238,
            8722578,
            8720190,
            8721547,
            8726214,
            8726620,
            8726619
        ],
        "E": [
            8736947,
            11503343,
            8742532,
            8742434,
            8742318,
            8742303,
            8742271,
            8737226
        ],
        "F": [
            8731272,
            8723125,
            8728205,
            8732102,
            8733456,
            8733048,
            8733546,
            8733373,
            8736588,
            8734709,
            8733680,
            8724458,
            8733867,
            8734049,
            8727708,
            8736377,
            8736466,
            8736428
        ]
    },
    "name": "A. SwapSort",
    "statement": "In this problem your goal is to sort an array consisting of integers in\r\nat most swaps. For the given array find the sequence of swaps that makes\r\nthe array sorted in the non-descending order. Swaps are performed\r\nconsecutively, one after another.Note that in this problem you do not\r\nhave to minimize the number of swaps your task is to find any sequence\r\nthat is no longer than .\r\n",
    "solutions": [
        "#include<cstdio>\n#include<vector>\n#include<utility>\n#include<algorithm>\nusing namespace std;\nconst int MAX = 3000 + 10;\nint rec[MAX];\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    for(int i= 0 ; i < n ; i++){\n        scanf(\"%d\", &rec[i]);\n    }\n    vector<pair<int,int>> v;\n    for(int i = 0 ; i < n ; i++){\n        int tmp = i;\n        for(int j = i ; j < n ; j++){\n            if(rec[tmp] > rec[j])\n                tmp = j;\n        }\n        if(tmp != i) v.push_back(make_pair(tmp, i));\n        swap(rec[tmp], rec[i]);\n    }\n    printf(\"%d\\n\", v.size());\n    for(int i= 0 ; i < v.size() ; i++)\n        printf(\"%d %d\\n\", v[i].first, v[i].second);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. SwapSort.json",
    "editorial_link": "https://codeforces.com//blog/entry/14741",
    "editorial": "All you need is to swap the current minimum with the -th element each\r\ntime. You can do it with the code like: This solution makes at most n-1\r\nswap operation. Also if (i != j) is not necessary.\r\n"
}