{
    "link": "https://codeforces.com//contest/1920/problem/B",
    "problemId": "2424501",
    "problem_idx": "B",
    "shortId": "1920B",
    "contest_number": "1920",
    "problem_submissions": {
        "F2": [
            241519708,
            242461640,
            241499605,
            241499150,
            241499121,
            241526798,
            241677520,
            242000469
        ],
        "F1": [
            241460299,
            241470662,
            241472660,
            241471905,
            241452735,
            241475361,
            241451154,
            241473438,
            241479153,
            241478315,
            241484928,
            241465563,
            241477422,
            241477811,
            241688562,
            241479348,
            241481887,
            241485652,
            241484576,
            241481175
        ],
        "E": [
            241449808,
            241450749,
            250647629,
            250647603,
            250646809,
            241453536,
            241456702,
            241468503,
            241457240,
            241473848,
            241459615,
            241448891,
            241462905,
            241455611,
            241473828,
            241462340,
            241463447,
            241688611,
            241464804,
            241470317,
            241459879,
            241463678,
            241464099
        ],
        "D": [
            241440349,
            241444733,
            241443927,
            241444084,
            241461216,
            241445290,
            241465918,
            241452364,
            241443025,
            241445939,
            241448263,
            241452666,
            241453380,
            241452851,
            241446075,
            241446900,
            241450746,
            241452656,
            241457511
        ],
        "C": [
            241424760,
            241434849,
            241435347,
            241432571,
            241426106,
            241430363,
            241433735,
            241436246,
            241435590,
            241433210,
            241428829,
            241435049,
            241436115,
            241439877,
            241436063,
            241433607,
            241435067,
            241438107,
            241435335
        ],
        "B": [
            241420376,
            241425242,
            241428830,
            241429674,
            241419228,
            241425601,
            241423672,
            241427964,
            241426457,
            241429604,
            241423387,
            241427147,
            241430484,
            241428576,
            241428228,
            241423313,
            241427602,
            241429162,
            241430149
        ],
        "A": [
            241418935,
            241420574,
            241419051,
            241419262,
            241421587,
            241419112,
            241419031,
            241419259,
            241421308,
            241419216,
            241419840,
            241421070,
            241419328,
            241428462,
            241421467,
            241419238,
            241420328,
            241420339,
            241423810
        ]
    },
    "name": "B. Summation Game",
    "statement": "Alice and Bob are playing a game. They have an array a_1, a_2,\r\nldots,a_n. The game consists of two steps: First, Alice will remove k\r\nelements from the array. Second, Bob will multiply x elements of the\r\narray by -1. Alice wants to maximize the sum of elements of the array\r\nwhile Bob wants to minimize it. Find the sum of elements of the array\r\nafter the game if both players play optimally.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define int long long\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define isz(x) ((int)x.size())\n#define sumof(x) accumulate(all(x), 0ll)\n\nconst int N=2e5+10;\nint n, k, x;\nint a[N], pf[N];\n\nvoid solve(){\n   cin >> n >> k >> x;\n   for (int i=1; i<=n; ++i) cin >> a[i];\n   sort(a+1, a+n+1);\n   partial_sum(a, a+n+1, pf);\n   int ans=-1e18;\n   for (int i=n-k; i<=n; ++i){\n      int j=max(0ll, i-x);\n      ans=max(ans, -(pf[i]-pf[j])+pf[j]);\n   }\n   cout << ans << '\\n';\n}\n\nint32_t main(){\n   ios_base::sync_with_stdio(false);\n   cin.tie(nullptr);\n   int ntests=1;\n   cin >> ntests;\n   for (int i=1; i<=ntests; ++i) solve();\n   return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Summation Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/122560",
    "editorial": "It is optimal for Bob to negate the x\n largest elements of the array. So in order to minimize the damage Bob will do, Alice should always remove some number of largest elements.\n\nTo solve the problem, we can sort the array and iterate over i\n (0?i?k\n) where i\n is the number of elements Alice removes. For each i\n, we know that Alice will remove the i\n largest elements of the array and Bob will then negate the x\n largest remaining elements. So the sum at the end can be calculated quickly with prefix sums. The time complexity is O(nlogn)\n because of sorting."
}