{
    "link": "https://codeforces.com//contest/707/problem/E",
    "problemId": "68579",
    "problem_idx": "E",
    "shortId": "707E",
    "contest_number": "707",
    "problem_submissions": {
        "E": [
            19999638,
            20000220,
            19999902,
            20004459,
            20001527,
            20000267,
            20003187,
            19998436,
            19997562,
            20002961,
            20002001
        ],
        "D": [
            19992217,
            19995484,
            19994755,
            19992826,
            19997136,
            19993596,
            20006942,
            19997119,
            20013037,
            19993142,
            19995313,
            19999894,
            19997617,
            19996425,
            19998702,
            19999735,
            21372182,
            21371999,
            19995598
        ],
        "C": [
            19989680,
            19991341,
            19989052,
            19995374,
            20002471,
            19987427,
            19991851,
            19986782,
            19987642,
            20012707,
            19989756,
            19990354,
            19991429,
            19991374,
            19994085,
            19991752,
            19991441
        ],
        "B": [
            19985922,
            19986558,
            19987945,
            19996933,
            19986674,
            19984891,
            20010196,
            19984984,
            19989212,
            19987604,
            19990363,
            19989764,
            19987808,
            19989404,
            19988496,
            19990285,
            19987180,
            19991247
        ],
        "A": [
            19982567,
            19982966,
            19983593,
            19982522,
            19982389,
            19984792,
            19998325,
            19995326,
            19993243,
            19983627,
            19985898,
            19982933,
            19984161,
            19983215,
            19983795
        ]
    },
    "name": "E. Garlands",
    "statement": "Like all children, Alesha loves New Year celebration. During the\r\ncelebration he and his whole family dress up the fir-tree. Like all\r\nchildren, Alesha likes to play with garlands chains consisting of a\r\nlightbulbs.Alesha uses a grid field sized for playing. The rows of the\r\nfield are numbered from to from the top to the bottom and columns are\r\nnumbered from to from the left to the right.Alesha has garlands which he\r\nplaces at the field. He does so in the way such that each lightbulb of\r\neach garland lies in the center of some cell in the field, and each cell\r\ncontains . Of course lightbulbs, which are neighbours in some garland,\r\nappears in cells neighbouring by a side.The example of garland\r\nplacing.Each garland is turned off or turned on at any moment. If some\r\ngarland is turned on then each of its lightbulbs is turned on, the same\r\napplies for garland turned off. Each lightbulb in the whole garland set\r\nis unique, and thus, being turned on, brings Alesha some pleasure,\r\ndescribed by an integer value. Turned off lightbulbs don’t bring Alesha\r\nany pleasure.Alesha can turn garlands on and off and wants to know the\r\nsum of pleasure value which the lightbulbs, placed in the centers of the\r\ncells in some rectangular part of the field, bring him. Initially\r\n.Alesha is still very little and can’t add big numbers. He extremely\r\nasks you to help him.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nconst int maxn = 2005;\n\ntypedef long long ll;\n\nstruct node\n{\n\tint x,y,w;\n\n\tnode(void){}\n\tnode(int a,int b,int c) : x(a),y(b),w(c){}\n}po[maxn][maxn];\n\nvector<int> lk[maxn];\nnode rep[1000005][2];\nbool ned[1000005];\nll ans[1000005],v[maxn];\nint co[maxn],sta[maxn];\nint n,m,k;\n\nvoid push(int p,int w)\n{\n\tfor(;p <= m;p += p & -p) v[p] += w;\n}\n\nll sum(int p)\n{\n\tll tmp = 0;\n\tfor(;p;p -= p & -p) tmp += v[p];\n\treturn tmp;\n}\n\nbool cmp(node a,node b)\n{\n\treturn a.x < b.x || a.x == b.x && a.y <= b.y;\n}\n\nvoid solve(int cur)\n{\n\tnode *all = po[cur];\n\tsort(all,all + co[cur],cmp);\n\tvector<node> ask;\n\task.clear();\n\tfor(int i = 0;i < lk[cur].size();i ++)\n\t{\n\t\tint v = lk[cur][i];\n\t\task.push_back(node(rep[v][0].x - 1,v,-1));\n\t\task.push_back(node(rep[v][1].x,v,1));\n\t}\n\tfor(int i = 1;i <= m;i ++) v[i] = 0;\n\tsort(ask.begin(),ask.end(),cmp);\n\tfor(int i = 0,j = 0;i < ask.size();i ++)\n\t{\n\t\tint cx = ask[i].x;\n\t\tfor(;j < co[cur] && all[j].x <= cx;j ++) push(all[j].y,all[j].w);\n\t\tint ref = ask[i].y,y = rep[ref][0].y,y1 = rep[ref][1].y;\n\t\tans[ref] += ask[i].w * (sum(y1) - sum(y - 1));\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor(int i = 1;i <= k;i ++)\n\t{\n\t\tscanf(\"%d\", &co[i]);\n\t\tfor(int j = 0;j < co[i];j ++)\n\t\t\tscanf(\"%d%d%d\", &po[i][j].x, &po[i][j].y, &po[i][j].w);\n\t\tsta[i] = 1;\n\t}\n\tint q;\n\tscanf(\"%d\", &q);\n\tfor(int i = 1;i <= q;i ++)\n\t{\n\t\tstatic char st[100];\n\t\tint x,y,x1,y1;\n\t\tscanf(\"%s\", st);\n\t\tscanf(\"%d\", &x);\n\t\tif (st[0] == 'S') sta[x] ^= 1; else\n\t\t{\n\t\t\tned[i] = 1;\n\t\t\tscanf(\"%d%d%d\", &y, &x1, &y1);\n\t\t\trep[i][0] = node(x,y,0),rep[i][1] = node(x1,y1,0);\n\t\t\tfor(int j = 1;j <= k;j ++)\n\t\t\t\tif (sta[j]) lk[j].push_back(i);\n\t\t} \n\t}\n\tfor(int i = 1;i <= k;i ++)\n\t\tsolve(i);\n\tfor(int i = 1;i <= q;i ++)\n\t\tif (ned[i]) printf(\"%I64d\\n\", ans[i]);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Garlands.json",
    "editorial_link": "https://codeforces.com//blog/entry/46662",
    "editorial": "Let us handle each request as follows:\n\nLet's go for a \"frame\" request and remember lamp garlands, which lies on the boundary. Then, in order to find concrete garland, what part of it lies within the query, sum all of its segments, the ends of it are lamps that lie on the \"frame\".\n\nAlso, do not forget the garland wich lies entirely within the request. Each garland at the beginning we find the extreme points, and to check whether it lies entirely within the query, check whether the lie inside its extreme points.",
    "hint": []
}