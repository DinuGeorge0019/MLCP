{
    "link": "https://codeforces.com//contest/94/problem/E",
    "problemId": "496",
    "problem_idx": "E",
    "shortId": "94E",
    "contest_number": "94",
    "problem_submissions": {
        "E": [
            521553,
            521880,
            522467,
            526155,
            523146,
            523157
        ],
        "D": [
            519365,
            518958,
            518305,
            519392,
            518800,
            520161,
            521011,
            521143,
            520319,
            520841,
            520217,
            521120,
            518685,
            520557,
            518998
        ],
        "C": [
            517626,
            517507,
            517218,
            517667,
            518042,
            517867,
            517038,
            518011,
            517625,
            518595,
            520630,
            519397,
            516288,
            520795,
            521799
        ],
        "B": [
            515646,
            515796,
            515893,
            515624,
            515532,
            516196,
            515676,
            516322,
            516160,
            515597,
            515907,
            516405,
            521550,
            516168,
            515483
        ],
        "A": [
            515017,
            514950,
            515359,
            514955,
            515050,
            515155,
            514834,
            515016,
            515211,
            515499,
            514941,
            514917,
            520686,
            514959,
            515020
        ]
    },
    "name": "E. Azembler",
    "statement": "After the Search Ultimate program that searched for strings in a text\r\nfailed, Igor K. got to think: \"Why on Earth does my program work so\r\nslowly?\" As he double-checked his code, he said: \"My code contains no\r\nerrors, yet I know how we will improve Search Ultimate!\" and took a\r\nlarge book from the shelves. The book read \"Azembler. Principally New\r\nApproach\".Having carefully thumbed through the book, Igor K. realised\r\nthat, as it turns out, you can multiply the numbers dozens of times\r\nfaster. \"Search Ultimate will be faster than it has ever been!\" the\r\nfellow shouted happily and set to work.Let us now clarify what Igor’s\r\nidea was. The thing is that the code that was generated by a compiler\r\nwas far from perfect. Standard multiplying does work slower than with\r\nthe trick the book mentioned.The Azembler language operates with 26\r\nregisters (eax, ebx, ..., ezx) and two commands: [] returns the value\r\nlocated in the address . For example, [eax] returns the value that was\r\nlocated in the address, equal to the value in the register eax. lea ,\r\nassigns to the register , indicated as the first operand, the second\r\noperand’s address. Thus, for example, the \"lea ebx, [eax]\" command will\r\nwrite in the ebx register the content of the eax register: first the\r\n[eax] operation will be fulfilled, the result of it will be some value\r\nthat lies in the address written in eax. But we do not need the value\r\nthe next operation will be lea, that will take the [eax] address, i.e.,\r\nthe value in the eax register, and will write it in ebx. On the first\r\nthought the second operation seems meaningless, but as it turns out, it\r\nis acceptable to write the operation as lea ecx, [eax + ebx],lea ecx,\r\n[k*eax]or evenlea ecx, [ebx + k*eax],where k = 1, 2, 4 or 8.As a result,\r\nthe register ecx will be equal to the numbers eax + ebx, k*eax and ebx +\r\nk*eax correspondingly. However, such operation is fulfilled many times,\r\ndozens of times faster that the usual multiplying of numbers. And using\r\nseveral such operations, one can very quickly multiply some number by\r\nsome other one. Of course, instead of eax, ebx and ecx you are allowed\r\nto use any registers.For example, let the eax register contain some\r\nnumber that we should multiply by 41. It takes us 2 lines:lea ebx,\r\n[eax + 4*eax] // now ebx = 5*eaxlea eax, [eax + 8*ebx] // now eax =\r\neax + 8*ebx = 41*eaxIgor K. got interested in the following question:\r\nwhat is the minimum number of lea operations needed to multiply by the\r\ngiven number and how to do it? Your task is to help him.Consider that at\r\nthe initial moment of time eax contains a number that Igor K. was about\r\nto multiply by , and the registers from ebx to ezx contain number 0. At\r\nthe final moment of time the result can be located in any register.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <string>\n#include <numeric>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n#include <sstream>\n#include <cstring>\n#include <cstdio>\n#include <complex>\n#include <cassert>\n\nusing namespace std;\n\n//\ntypedef long long LL;\ntypedef pair<int,int> PII;\n#define MP make_pair\n#define VI vector<int>\n#define FOR(v,p,k) for(int v=p;v<=k;++v)\n#define FORD(v,p,k) for(int v=p;v>=k;--v)\n#define REP(i,n) for(int i=0;i<(n);++i)\n#define VAR(v,i) __typeof(i) v=(i)\n#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)\n#define PB push_back\n#define ST first\n#define ND second\n#define SIZE(x) (int)x.size()\n#define ALL(c) c.begin(),c.end()\n//\n#define rep(i,b) for(int i=(0);i<(b);++i)\n#define fo(i,a,b) for(int i=(a);i<=(b);++i)\n#define ford(i,a,b) for(int i=(a);i>=(b);--i)\n#define fore(a,b) for(__typeof((b).begin()) a = (b).begin();a!=(b).end();++a)\n#define vv vector\n#define pb push_back\n#define ll long long\n#define ld long double\n#define ss(a) (int)(a).size()\n#define all(x) (x).begin(),(x).end()\n#define clr(x,a) memset(x,a,sizeof(x))\n#define vi vv<int>\n#define vs vv<string>\ntemplate<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}\ntemplate<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}\n\nint cond = (ll)0;\n#define db(x) { if (cond > 0) { cond--; rep (xxx, 1) cerr << __LINE__ << \" \" << #x << \" \" << x << endl; cerr.flush(); } }\n\nvector<int> sol;\nint n;\n\nint mul[4] = {1,2,4,8};\nvoid go(vector<int>cur, int dep, int maxdep) {\n    if (sol.size()) return;\n    if (cur.back() == n) { sol = cur; \n        return;\n    }\n    if (dep >= maxdep) return;\n    rep (i, cur.size()) rep (j, cur.size()) {\n        rep (k, 4) {\n            int nval = cur[i] + cur[j] * mul[k];\n            if (nval > cur.back() && nval <= n) {\n                cur.pb(nval);\n                go(cur, dep+1, maxdep);\n                cur.pop_back();\n            }\n        }\n    }\n    rep (i, cur.size()) {\n        rep (k, 4) {\n            int nval = cur[i] * mul[k];\n            if (nval > cur.back() && nval <= n) {\n                cur.pb(nval);\n                go(cur, dep+1, maxdep);\n                cur.pop_back();\n            }\n        }\n    }\n\n}\n\nvoid _main() {\n    scanf(\"%d\", &n);\n    fo (dep, 0, 10) {\n        vector<int> tmp;\n        tmp.pb(1);\n        go(tmp, 0, dep);\n        if (sol.size()) {\n            cout<<sol.size()-1<<endl;\n            db(sol.size());\n            fore (it, sol) db(*it);\n            int kkkk = sol.size();\n            vector<int> cur = sol;\n            fo (iiii, 1,kkkk-1) {\n                rep (i, iiii) rep (j, iiii) {\n                    rep (k, 4) {\n                        int nval = cur[i] + cur[j] * mul[k];\n                        if (nval == sol[iiii]) {\n                            db(nval);\n                            cout << \"lea e\" << (char)('a' + iiii) << \"x, [\"\n                                << \"e\" << (char)('a' + i) << \"x + \"\n                                << mul[k] << \"*e\" << (char)('a' + j) << \"x]\" << endl;\n                            goto end;\n                        }\n                    }\n                }\n                rep (i, iiii) {\n                    rep (k, 4) {\n                        int nval = cur[i] * mul[k];\n                        if (nval == sol[iiii]) {\n                            db(nval);\n                            cout << \"lea e\" << (char)('a' + iiii) << \"x, [\"\n                                << mul[k] << \"*e\" << (char)('a' + i) << \"x]\" << endl;\n                            goto end;\n                        }\n                    }\n                }\nend:;\n            }\n            exit(0);\n        }\n    }\n\n}\n\nint main(int argc, char ** argv) {\n        _main();\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Azembler.json",
    "editorial_link": "https://codeforces.com//blog/entry/2208",
    "editorial": "I don't know why so few coders have solved it. Small limitations for n and big time limit - 5 seconds - hint that it's backtracking. Also, no need to be a soothsayer to understand that maximal answer is about 5.\n\nSolving it is clear. You should keep all current registers at the vector and call some function that goes over all current registers and calculate new values, then calls itself recursively. In that process we can also save the program itself.\n\nTo avoid TLE you should not make recursive calls if the deep of recursion is larger than current answer, should not go to the states where you get a number larger than n or less than current biggest number. And if you reach exactly n, you should update answer and copy the program to the safe place.\n\nThere are some hacks to speed up this approach: for example, iterate over numbers in descending order (it works faster), but 5 seconds is such TLE that you can solve it any way. Or you can launch backtracking for the specific answer (increasing it) while the program won't be found (I don't know how this method is named in English). Also, some contestants have solved it using BFS.",
    "hint": []
}