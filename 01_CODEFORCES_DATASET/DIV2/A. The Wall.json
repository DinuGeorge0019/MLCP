{
    "link": "https://codeforces.com//contest/340/problem/A",
    "problemId": "3417",
    "problem_idx": "A",
    "shortId": "340A",
    "contest_number": "340",
    "problem_submissions": {
        "E": [
            4380220,
            4380834,
            4380126,
            4391968,
            4382367,
            4376164,
            4380005,
            4381859,
            4379851,
            4381825,
            4380671,
            4377641,
            4381576,
            4383755
        ],
        "D": [
            4377289,
            4376595,
            4378029,
            4372963,
            4376785,
            4377666,
            4373992,
            4376684,
            4376514,
            4377010,
            4380983,
            4375663,
            4376643,
            4377274,
            4373081,
            4406324,
            4378181,
            4380917,
            4377354,
            4383338
        ],
        "C": [
            4375809,
            4375002,
            4377603,
            4374632,
            4375617,
            4376250,
            4378682,
            4380136,
            4373891,
            4375990,
            4378082,
            4377910,
            4377314,
            4378457,
            4375078,
            4376703,
            4378516,
            4378506,
            4374797
        ],
        "B": [
            4372293,
            4378644,
            4376876,
            4375385,
            4378732,
            4374049,
            4386232,
            4373253,
            4380096,
            4376212,
            4383111,
            4383087,
            4379013,
            4399484,
            4382621,
            4372666
        ],
        "A": [
            4371264,
            4371296,
            4372303,
            4375873,
            4371313,
            4371976,
            4371443,
            4371936,
            4378560,
            4371824,
            4374190,
            4371558,
            4371435,
            4371343,
            4371370,
            4371365,
            4371526,
            4371376,
            4371280
        ]
    },
    "name": "A. The Wall",
    "statement": "Iahub and his friend Floyd have started painting a wall. Iahub is\r\npainting the wall red and Floyd is painting it pink. You can consider\r\nthe wall being made of a very large number of bricks, numbered , , and\r\nso on. Iahub has the following scheme of painting: he skips consecutive\r\nbricks, then he paints the -th one. That is, he’ll paint bricks , , and\r\nso on red. Similarly, Floyd skips consecutive bricks, then he paints the\r\n-th one. Hence he’ll paint bricks , , and so on pink.After painting the\r\nwall all day, the boys observed that some bricks are painted both red\r\nand pink. Iahub has a lucky number and Floyd has a lucky number . Boys\r\nwonder how many bricks numbered no less than and no greater than are\r\npainted both red and pink. This is exactly your task: compute and print\r\nthe answer to the question.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <sstream>\n#include <vector>\n#define FOR(i,a,b) for(int i = (a); i <= (b); i++)\n#define FR(i,a) for(int i = 0; i < (a); i++)\nusing namespace std;\n#define maxn 200100\nlong long x,y,A,B;\n\nlong long get(long long X) {\n    long long d = __gcd(x,y);\n    long long LCM = x*y / d;\n    return X/LCM;\n}\nint main() {\n    //freopen(\"A.in\",\"r\",stdin);\n    //freopen(\"A.out\",\"w\",stdout);\n    cin >> x >> y >> A >> B;\n    cout << get(B) - get(A-1) << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. The Wall.json",
    "editorial_link": "https://codeforces.com/blog/entry/8755",
    "editorial": "You are given a range . Youâre asked to compute fast how many numbers in\r\nthe range are divisible by both and . Iâll present here an solution. We\r\nmade tests low so other not optimal solutions to pass as well. The\r\nsolution refers to the original problem, where . Firstly, we can\r\nsimplify the problem. Suppose we can calculate how many numbers are\r\ndivisible in range by both and . Can this solve our task? The answer is\r\nyes. All numbers in range divisible by both numbers should be counted,\r\nexcept the numbers lower than (1, 2, ..., A 1). But, as you can see,\r\nnumbers lower than A divisible by both numbers are actually numbers from\r\nrange [1, A 1]. So the answer of our task is f(B) f(A 1), where f(X) is\r\nhow many numbers from 1, 2, ..., X are divisible by both x and y. For\r\ncalculate in the f(X) we need some math. If you donât know about it,\r\nplease read firstly about least common multiple. Now, what will be the\r\nlowest number divisible by both x and y. The answer is least common\r\nmultiple of x and y. Letâs note it by . The sequence of the numbers\r\ndivisible by both x and y is , , and so on. As a proof, suppose a number\r\nz is divisible by both x and y, but it is not in the above sequence. If\r\na number is divisible by both x and y, it will be divisible by M also.\r\nIf a number is divisible by M, it will be in the above sequence. Hence,\r\nthe only way a number to be divisible by both x and y is to be in\r\nsequence , , , ... The f(X) calculation reduces to finding the number of\r\nnumbers from sequence , , , ... lower or equal than X. Itâs obvious that\r\nif a number h * M is greater than X, so will be (h + 1) * M, (h + 2) * M\r\nand so on. We actually need to find the greatest integer number h such\r\nas . The numbers weâre looking for will be (so their count will be ).\r\nThe number h is actually [X / M], where [number] denotes the integer\r\npart of [number]. Take some examples on paper, youâll see why itâs true.\r\nThe only thing not discussed is how to calculate the number M given 2\r\nnumber x and y. You can use this formula . For calculate gcd(x, y) you\r\ncan use Euclidâs algorithm. Its complexity is , so this is the running\r\ntime for the entire algorithm. Official solution: 4383403\r\n",
    "hint": []
}