{
    "link": "https://codeforces.com//contest/463/problem/C",
    "problemId": "13411",
    "problem_idx": "C",
    "shortId": "463C",
    "contest_number": "463",
    "problem_submissions": {
        "E": [
            7638960,
            7637193,
            7682816,
            7638248,
            7639853,
            7638211,
            7637973,
            7639823,
            7643707,
            7637460,
            7639583,
            7639708,
            7646111,
            7680392
        ],
        "D": [
            7633516,
            7634297,
            7633801,
            7632252,
            7635569,
            7633746,
            7635006,
            7633676,
            7631296,
            7637376,
            7629043,
            7638633,
            7636946,
            7634549,
            7632611,
            7631941,
            7635806,
            7635047,
            7633827
        ],
        "A": [
            7632250,
            7626691,
            7626688,
            7627018,
            7627107,
            7626706,
            7644040,
            7631576,
            7626744,
            7634237,
            7634275,
            7626965,
            7627191,
            7627423,
            7627095,
            7627639,
            7628035,
            7635333
        ],
        "B": [
            7630537,
            7627110,
            7627719,
            7627619,
            7629633,
            7628175,
            7631202,
            7629983,
            7627256,
            7633605,
            7632837,
            7629106,
            7628563,
            7629250,
            7629192,
            7628955,
            7630266,
            7636050
        ],
        "C": [
            7628696,
            7632900,
            7632098,
            7629603,
            7634187,
            7640208,
            7633142,
            7628662,
            7678669,
            7631060,
            7637636,
            7632929,
            7631029,
            7638701,
            7635241,
            7632886,
            7633425,
            7630271
        ]
    },
    "name": "C. Gargari and Bishops",
    "statement": "Gargari is jealous that his friend Caisa won the game from the previous\r\nproblem. He wants to prove that he is a genius.He has a chessboard. Each\r\ncell of the chessboard has a number written on it. Gargari wants to\r\nplace two bishops on the chessboard in such a way that there is no cell\r\nthat is attacked by both of them. Consider a cell with number written on\r\nit, if this cell is attacked by one of the bishops Gargari will get\r\ndollars for it. Tell Gargari, how to place bishops on the chessboard to\r\nget maximum amount of money.We assume a cell is attacked by a bishop, if\r\nthe cell is located on the same diagonal with the bishop (the cell,\r\nwhere the bishop is, also considered attacked by it).\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <set>\n#include <string>\n#include <functional>\n\ntypedef long long lld;\nconst int N = 2000 + 5;\nlld l[N][N],r[N][N],u[N][N],d[N][N],A[N][N];\nint n;\n\nint main() {\n\tscanf(\"%d\",&n);\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tfor (int j = 1; j <= n; ++ j) {\n\t\t\tscanf(\"%I64d\",&A[i][j]);\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tfor (int j = 1; j <= n; ++ j) {\n\t\t\tl[i][j] = l[i-1][j-1] + A[i][j];\n\t\t\tr[i][j] = r[i-1][j+1] + A[i][j];\n\t\t}\n\t}\n\tfor (int i = n; i >= 1; -- i) {\n\t\tfor (int j = 1; j <= n; ++ j) {\n\t\t\tu[i][j] = u[i+1][j-1] + A[i][j];\n\t\t\td[i][j] = d[i+1][j+1] + A[i][j];\n\t\t}\n\t}\n\tlld sum[2] = {-1,-1};\n\tint x[2],y[2];\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tfor (int j = 1; j <= n; ++ j) {\n\t\t\tint c = (i+j&1);\n\t\t\tlld value = l[i][j] + r[i][j] + u[i][j] + d[i][j] - 3*A[i][j];\n\t\t\tif (sum[c] < value) {\n\t\t\t\tsum[c] = value;\n\t\t\t\tx[c] = i;\n\t\t\t\ty[c] = j;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%I64d\\n\",sum[0]+sum[1]);\n\tprintf(\"%d %d %d %d\\n\",x[0],y[0],x[1],y[1]);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "hashing",
        "implementation"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Gargari and Bishops.json",
    "editorial_link": "https://codeforces.com/blog/entry/13631",
    "editorial": "We preprocess the sum for all the diagonals(principals and secondary diagonals) in two arrays(so that for every element i,j we can find sum of elements which are attacked in O(1) time).Also for avoiding the intersection,we need to find two cells so that for one the sum of row and column is even and for the other one the sum of row and column is odd.Finally,we analyze every cell ,we see if the sum of row and column is even or odd,and update that two positions(solutions)."
}