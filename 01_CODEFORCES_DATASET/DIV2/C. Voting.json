{
    "link": "https://codeforces.com//contest/749/problem/C",
    "problemId": "85477",
    "problem_idx": "C",
    "shortId": "749C",
    "contest_number": "749",
    "problem_submissions": {
        "E": [
            23157045,
            23158471,
            23159955,
            23159227,
            23159699,
            23201671,
            23188698,
            23188666,
            23161857,
            23249468,
            23159356,
            23161181
        ],
        "D": [
            23150269,
            23155017,
            23153167,
            23156936,
            23152064,
            23151488,
            23150216,
            23152653,
            23152526,
            23153002,
            23153816,
            23153299,
            23153576,
            23153949,
            23154660,
            23153221,
            23154083,
            23155240,
            23153806,
            23154081
        ],
        "C": [
            23147336,
            23149855,
            23149193,
            23149595,
            23147564,
            23151828,
            23148654,
            23149362,
            23149269,
            23149897,
            23148430,
            23149965,
            23148722,
            23175263,
            23147964,
            23150407,
            23148950,
            23162490,
            23148466
        ],
        "B": [
            23145982,
            23147492,
            23146643,
            23146380,
            23145252,
            23147345,
            23149268,
            23146406,
            23146519,
            23147467,
            23146720,
            23146308,
            23146859,
            23149282,
            23150475,
            23147414,
            23147519,
            23146953,
            23155115
        ],
        "A": [
            23143678,
            23144522,
            23143768,
            23144671,
            23143613,
            23143623,
            23143733,
            23144118,
            23144102,
            23144679,
            23143737,
            23143812,
            23143610,
            23143762,
            23150938,
            23145011,
            23144267,
            23144159,
            23143669
        ]
    },
    "name": "C. Voting",
    "statement": "There are employees in Alternative Cake Manufacturing (ACM). They are\r\nnow voting on some very important question and the leading world media\r\nare trying to predict the outcome of the vote.Each of the employees\r\nbelongs to one of two fractions: depublicans or remocrats, and these two\r\nfractions have opposite opinions on what should be the outcome of the\r\nvote. The voting procedure is rather complicated: Each of employees\r\nmakes a statement. They make statements one by one starting from\r\nemployees and finishing with employee . If at the moment when it’s time\r\nfor the -th employee to make a statement he no longer has the right to\r\nvote, he just skips his turn (and no longer takes part in this voting).\r\nWhen employee makes a statement, he can do nothing or declare that one\r\nof the other employees no longer has a right to vote. It’s allowed to\r\ndeny from voting people who already made the statement or people who are\r\nonly waiting to do so. If someone is denied from voting he no longer\r\nparticipates in the voting till the very end. When all employees are\r\ndone with their statements, the procedure repeats: again, each employees\r\nstarting from and finishing with who are still eligible to vote make\r\ntheir statements. The process repeats until there is only one employee\r\neligible to vote remaining and he determines the outcome of the whole\r\nvoting. Of course, he votes for the decision suitable for his fraction.\r\nYou know the order employees are going to vote and that they behave\r\noptimal (and they also know the order and who belongs to which\r\nfraction). Predict the outcome of the vote.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <iostream>\n#include <set>\nusing namespace std;\ntypedef long long ll;\nll n,a,b;\nchar s[222222];\nset<ll>x,y;\nint main()\n{\n\tcin>>n;\n\tscanf(\"%s\",s);\n\tfor(ll i=0;i<n;i++)\n\t\tif(s[i]=='D')\n\t\t\tx.insert(i+1);\n\t\telse\n\t\t\ty.insert(i+1);\n\tfor(;!x.empty()&&!y.empty();)\n\t{\n\t\ta=*x.begin();\n\t\tb=*y.begin();\n\t\tx.erase(x.begin());\n\t\ty.erase(y.begin());\n\t\tif(a<b)\n\t\t\tx.insert(a+n);\n\t\telse\n\t\t\ty.insert(b+n);\n\t}\n\tif(!x.empty())\n\t\tcout<<\"D\";\n\telse\n\t\tcout<<\"R\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "two pointers"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Voting.json",
    "editorial_link": "https://codeforces.com//blog/entry/49186",
    "editorial": "We will emulate the process with two queues. Let s store in the first\r\nqueue the moments of time when D-people will vote, and in the second\r\nqueue - the moments of time of R-people. For every man where will be\r\nonly one element in the queue.Now compare the first elements in the\r\nqueues. The man whose moment of time is less votes first. It s obvious\r\nthat it s always profitable to vote against the first opponent. So we\r\nwill remove the first element from the opponent s queue, and move\r\nourselves to the back of our queue, increasing the current time by -\r\nnext time this man will vote after turns.When one of the queues becomes\r\nempty, the corresponding party loses.\r\n",
    "hint": []
}