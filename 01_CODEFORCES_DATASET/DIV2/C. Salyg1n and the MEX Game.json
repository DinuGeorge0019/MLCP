{"link": "https://codeforces.com//contest/1867/problem/C", "problemId": "2204233", "problem_idx": "C", "shortId": "1867C", "contest_number": "1867", "problem_submissions": {"F": [222974823, 222969528, 222982087, 222982811, 222942381, 222981865, 222970849, 223263369, 222992160, 222992118, 222990610, 223293875], "E2": [222941139, 222944891, 222954532, 222948444, 222972148, 222927706, 222951442, 222943457, 222956697, 222956351, 222957299, 222965859, 222961624, 222958308, 222959237, 222958461, 222947616, 222951450, 222971686, 222965055], "E1": [222935951, 222944650, 222944932, 222948245, 222972552, 222928046, 222951818, 222940287, 222956433, 222950145, 222954065, 222953208, 222961246, 222954058, 222958971, 222958084, 222946896, 222951047, 222957812, 222965382], "D": [222929659, 222935565, 222933136, 222933725, 222959573, 222947841, 222976215, 222934664, 222934515, 222943779, 222942901, 222940224, 222926502, 222939367, 222939032, 222944642, 222964473, 222961543, 222946848, 222932024], "C": [222924786, 222923447, 222923495, 222924317, 222955570, 222955063, 222981892, 222921233, 222922345, 222926941, 222929128, 222930091, 222943796, 222929098, 222924664, 222933035, 222926807, 222929365, 222928181, 222930087], "B": [222916375, 222917063, 222916284, 222918254, 222947890, 222958388, 222980080, 222916704, 222917105, 222917987, 222920819, 222919702, 222916186, 222917789, 222919342, 222922163, 222919191, 222921766, 222918135, 222919076], "A": [222912165, 222912569, 222912487, 222914168, 222945721, 222961169, 222912375, 222913097, 222912526, 222913140, 222913385, 222912716, 222912425, 222912955, 222912750, 222914115, 222913574, 222915575, 222912204, 222918270]}, "name": "C. Salyg1n and the MEX Game", "statement": "salyg1n gave Alice a set S of n distinct integers s_1, s_2,\r\nldots, s_n (0\r\nleq s_i\r\nleq 10^9). Alice decided to play a game with this set against Bob. The\r\nrules of the game are as follows: Players take turns, with Alice going\r\nfirst. In one move, Alice adds one number x (0\r\nleq x\r\nleq 10^9) to the set S. The set S must not contain the number x at the\r\ntime of the move. In one move, Bob removes one number y from the set S.\r\nThe set S must contain the number y at the time of the move.\r\nAdditionally, the number y must be than the last number added by Alice.\r\nThe game ends when Bob cannot make a move or after 2\r\ncdot n + 1 moves (in which case Alice\u2019s move will be the last one). The\r\nresult of the game is\r\noperatorname{MEX}\r\ndagger(S) (S at the end of the game). Alice aims to maximize the result,\r\nwhile Bob aims to minimize it. Let R be the result when both players\r\nplay optimally. Your task is to implement a strategy for Alice such that\r\nthe result of the game is always at least R.\r\ndagger\r\noperatorname{MEX} of a set of integers c_1, c_2,\r\nldots, c_k is defined as the smallest non-negative integer x which does\r\nnot occur in the set c. For example,\r\noperatorname{MEX}(\r\n{0, 1, 2, 4\r\n}) = 3.\r\n", "solutions": ["#include <bits/stdc++.h>\n#define int long long\n#define x first\n#define y second\n#define pb push_back\nusing namespace std;\nusing pii=pair <int,int>;\nusing tii=pair <pii,int>;\nvoid solve(){\n    int n; cin>>n;\n    bool have[n+1];\n    memset(have,0,sizeof have);\n    for (int i=1; i<=n; i++){\n        int t; cin>>t;\n        if (t<=n) have[t]=1;\n    }\n    int mex=n+1;\n    for (int i=0; i<=n; i++){\n        if (!have[i]){\n            mex=i;\n            break;\n        }\n    }\n    for (int i=mex; i>=0; i--){\n        if (have[i]) continue;\n        cout<<i<<endl;\n        have[i]=1;\n        int t; cin>>t;\n        if (t<0) return;\n        have[t]=0;\n    }\n}\nsigned main(){\n\t//ios_base::sync_with_stdio(0); cin.tie(0);\n\tint t=1;\n\tcin>>t;\n\twhile (t--) solve();\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "data structures", "games", "greedy", "interactive"], "dificulty": "1300", "interactive": false}