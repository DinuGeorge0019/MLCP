{"link": "https://codeforces.com//contest/1061/problem/E", "problemId": "259561", "problem_idx": "E", "shortId": "1061E", "contest_number": "1061", "problem_submissions": {"F": [46080533, 46078741, 46083363, 46090966, 46090449, 46083565, 46085799, 46083880, 46078551, 46109412, 46086044, 46084393, 46085497, 46085674, 46086595, 46085522, 46079186, 46086667, 46084268, 46086192, 46099697, 46099461, 46088106], "D": [46072013, 46076677, 46075957, 46074341, 46074354, 46074232, 46074411, 46085044, 46076314, 46078869, 46075590, 46078204, 46076173, 46079731, 46078000, 46081859, 46079963, 46085405, 46080982, 46080058], "C": [46069182, 46071750, 46070967, 46071622, 46071185, 46071619, 46071683, 46072269, 46072643, 46074534, 46072699, 46073691, 46071278, 46072896, 46072959, 46081505, 46074501, 46073620, 46077745, 46075063], "B": [46068385, 46070705, 46068805, 46070395, 46069936, 46070540, 46069425, 46071160, 46070196, 46071645, 46073407, 46071478, 46069267, 46070628, 46070940, 46073987, 46071263, 46069667, 46073266, 46069912], "A": [46065105, 46064815, 46065437, 46065157, 46065204, 46064909, 46064831, 46065487, 46067926, 46065498, 46065297, 46066800, 46065131, 46066394, 46065152, 46064816, 46065082, 46065378, 46071171, 46064958], "E": [46080824, 46089783, 46087601, 142313241, 46115374]}, "name": "E. Politics", "statement": "There are n cities in the country. Two candidates are fighting for the\r\npost of the President. The elections are set in the future, and both\r\ncandidates have already planned how they are going to connect the cities\r\nwith roads. Both plans will connect all cities using n - 1 roads only.\r\nThat is, each plan can be viewed as a tree. Both of the candidates had\r\nalso specified their choice of the capital among n cities (x for the\r\nfirst candidate and y for the second candidate), which may or may not be\r\nsame.Each city has a potential of building a port (one city can have at\r\nmost one port). Building a port in i-th city brings a_i amount of money.\r\nHowever, each candidate has his specific demands. The demands are of the\r\nform: k x, which means that the candidate wants to build exactly x ports\r\nin the subtree of the k-th city of his tree (the tree is rooted at the\r\ncapital of his choice). Find out the maximum revenue that can be gained\r\nwhile fulfilling all demands of both candidates, or print if it is not\r\npossible to do.It is additionally guaranteed, that each candidate has\r\nspecified the port demands for the capital of his choice.\r\n", "solutions": ["#include<cstdio>\n#include<limits>\n#include<functional>\n#include<queue>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n\nstruct MinCostFlow\n{\n    typedef int cap_t;\n    typedef long long cost_t;\n\n    bool iszerocap(cap_t cap) { return cap == 0; }\n\n    struct edge {\n        int target;\n        cost_t cost;\n        cap_t residual_capacity;\n        cap_t orig_capacity;\n        int revid;\n    };\n\n    vector<vector<edge>> graph;\n    int n;\n    vector<cost_t> pi;\n    bool needNormalize;\n\n    MinCostFlow(int n) : graph(n), n(n), pi(n, 0), needNormalize(false) {}\n    // \ud55c\ucc38 \ub3cc\ub9ac\ub358 \uc911\uac04\uc5d0 \ucd94\uac00\ud558\ub294 \uacbd\uc6b0\ub294 \uace0\ub824 \uc548 \ud568\n    void addEdge(int s, int e, cost_t cost, cap_t cap)\n    {\n        int forward_rev = graph[e].size() + ((s == e) ? 1 : 0);\n        int backward_rev = graph[s].size();\n        edge forward = { e, cost, cap, cap, forward_rev };\n        edge backward = { s, -cost, 0, 0, backward_rev };\n        if (cost < 0) {\n            needNormalize = true;\n        }\n        graph[s].emplace_back(forward);\n        graph[e].emplace_back(backward);\n    }\n\n    bool normalize(int s) {\n        auto infinite_cost = numeric_limits<cost_t>::max();\n        vector<cost_t> dist(n, infinite_cost);\n        dist[s] = 0;\n        queue<int> q;\n        vector<int> v(n), relax_count(n);\n        v[s] = 1; q.push(s);\n        while (!q.empty()) {\n            int cur = q.front();\n            v[cur] = 0; q.pop();\n            if (++relax_count[cur] >= n) return false;\n            for (const auto &e : graph[cur]) {\n                if (iszerocap(e.residual_capacity)) continue;\n                auto next = e.target;\n                auto ncost = dist[cur] + e.cost;\n                if (dist[next] > ncost) {\n                    dist[next] = ncost;\n                    if (v[next]) continue;\n                    v[next] = 1; q.push(next);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) pi[i] = dist[i];\n        return true;\n    }\n\n    pair<cost_t, cap_t> augmentShortest(int s, int e, cap_t flow_goal, cap_t flow_limit) {\n        auto infinite_cost = numeric_limits<cost_t>::max();\n        auto infinite_flow = numeric_limits<cap_t>::max();\n        typedef pair<cost_t, int> pq_t;\n        priority_queue<pq_t, vector<pq_t>, greater<pq_t>> pq;\n        vector<pair<cost_t, cap_t>> dist(n, make_pair(infinite_cost, 0));\n        vector<int> from(n, -1), v(n);\n\n        if (needNormalize) {\n            normalize(s);\n            needNormalize = false;\n        }\n\n        dist[s] = pair<cost_t, cap_t>(0, infinite_flow);\n        pq.emplace(dist[s].first, s);\n        while (!pq.empty()) {\n            auto cur = pq.top().second; pq.pop();\n            if (v[cur]) continue;\n            v[cur] = 1;\n            for (const auto &edge : graph[cur]) {\n                auto next = edge.target;\n                if (v[next]) continue;\n                if (iszerocap(edge.residual_capacity)) continue;\n                auto ncost = dist[cur].first + edge.cost - pi[next] + pi[cur];\n                auto nflow = min(dist[cur].second, edge.residual_capacity);\n                if (dist[next].first <= ncost) continue;\n                dist[next] = make_pair(ncost, nflow);\n                from[next] = edge.revid;\n                pq.emplace(dist[next].first, next);\n            }\n        }\n        /** augment the shortest path **/\n        /* update potential, dist[i].first becomes invalid */\n        for (int i = 0; i < n; i++) {\n            if (iszerocap(dist[i].second)) continue;\n            pi[i] += dist[i].first;\n        }\n        auto flow = dist[e].second;\n        // e is unreachable\n        if (iszerocap(flow)) return make_pair(0, 0);\n        // reduced cost of augment path is 0, actual cost is potential difference\n        auto pathcost = pi[e] - pi[s];\n        // always restrict\n        flow = min(flow, flow_limit);\n        // if it costs, we want minimum flow\n        if (pathcost >= 0) flow = min(flow, flow_goal);\n        if (flow <= 0 || iszerocap(flow)) return make_pair(0, 0);\n\n        for (auto cur = e; from[cur] != -1; ) {\n            auto back_edge = from[cur];\n            auto prev = graph[cur][back_edge].target;\n            auto forward_edge = graph[cur][back_edge].revid;\n            graph[cur][back_edge].residual_capacity += flow;\n            graph[prev][forward_edge].residual_capacity -= flow;\n            cur = prev;\n        }\n        return make_pair(pathcost * flow, flow);\n    }\n\n    pair<cost_t, cap_t> solve(int s, int e, cap_t flow_goal = numeric_limits<cap_t>::max(), cap_t flow_limit = numeric_limits<cap_t>::max()) {\n        cost_t total_cost = 0;\n        cap_t total_flow = 0;\n        for (;;) {\n            auto res = augmentShortest(s, e, flow_goal - total_flow, flow_limit - total_flow);\n            if (res.second <= 0) break;\n            total_cost += res.first;\n            total_flow += res.second;\n        }\n        return make_pair(total_cost, total_flow);\n    }\n};\n\nvector<int> g[2][501];\nint R[2];\nint demand[2][501];\n\nvoid dfs1(vector<pair<int,int>>& out, int cand, int u, int p){\n    if(demand[cand][u]){\n        out.push_back({u, demand[cand][u]});\n        return;\n    }\n\n    for(int v:g[cand][u]) if(v!=p){\n        dfs1(out, cand, v, u);\n    }\n}\n\nvector<pair<int,vector<int>>> D[2];\n\nbool block[501];\nvoid dfs2(vector<int>& out, int cand, int u, int p){\n    if(block[u]) return;\n    out.push_back(u);\n    for(int v:g[cand][u]) if(v!=p) dfs2(out, cand, v, u);\n}\n\nvoid dfs0(int cand, int u, int p){\n    if(demand[cand][u]){\n        vector<pair<int,int>> c_demand;\n        for(int v:g[cand][u]) if(v!=p)\n            dfs1(c_demand, cand, v, u);\n        int dsum = 0;\n        for(const auto& elt:c_demand){\n            dsum += elt.second;\n        }\n\n        for(const auto& elt:c_demand){\n            block[elt.first] = true;\n        }\n\n        vector<int> c;\n        dfs2(c, cand, u, p);\n\n        for(const auto& elt:c_demand){\n            block[elt.first] = false;\n        }\n\n        D[cand].push_back({demand[cand][u]-dsum, c});\n    }\n\n    for(int v:g[cand][u]) if(v!=p){\n        dfs0(cand, v, u);\n    }\n}\n\nint A[501];\n\nint main(){\n    int N; scanf(\"%d%d%d\",&N,R+0,R+1);\n    for(int i=1;i<=N;i++) scanf(\"%d\", A+i);\n\n    for(int cand=0;cand<2;cand++) for(int i=1;i<N;i++){\n        int u,v; scanf(\"%d%d\",&u,&v);\n        g[cand][u].push_back(v);\n        g[cand][v].push_back(u);\n    }\n\n    for(int cand=0;cand<2;cand++){\n        int Q; scanf(\"%d\",&Q);\n        for(int i=0;i<Q;i++){\n            int u, t; scanf(\"%d%d\",&u,&t);\n            if(demand[cand][u]){\n                if(demand[cand][u]!=t) return !printf(\"-1\");\n            }\n            demand[cand][u] = t;\n        }\n    }\n\n    for(int cand=0;cand<2;cand++) dfs0(cand, R[cand], 0);\n    MinCostFlow mcf(2+D[0].size()+D[1].size()+N);\n\n    int Tsum = 0, Ssum = 0;\n    int T = D[0].size();\n    for(int i=0;i<D[0].size();i++){\n        const auto& elt = D[0][i];\n        if(elt.first < 0) return !printf(\"-1\");\n        Tsum += elt.first;\n\n        mcf.addEdge(0,N+1+i,0,elt.first);\n        for(int u:elt.second) mcf.addEdge(N+1+i, u, -A[u], 1);\n    }\n    int S = D[1].size();\n    for(int i=0;i<D[1].size();i++){\n        const auto& elt = D[1][i];\n        if(elt.first < 0) return !printf(\"-1\");\n        Ssum += elt.first;\n\n        mcf.addEdge(N+T+1+i, N+T+S+1, 0, elt.first);\n        for(int u:elt.second) mcf.addEdge(u, N+T+1+i, 0, 1);\n    }\n    if(Tsum!=Ssum) return !printf(\"-1\");\n\n    auto res = mcf.solve(0, N+S+T+1);\n\n    if(res.second != Tsum) return !printf(\"-1\");\n    printf(\"%lld\\n\", -res.first);\n}\n"], "input": "", "output": "", "tags": ["flows", "graphs"], "dificulty": "2600", "interactive": false}