{
    "link": "https://codeforces.com//contest/1775/problem/E",
    "problemId": "1730877",
    "problem_idx": "E",
    "shortId": "1775E",
    "contest_number": "1775",
    "problem_submissions": {
        "F": [
            188713433,
            188725196,
            188731396,
            188734657,
            188732056,
            188733441,
            188727879,
            188728779,
            188732238,
            188744590,
            188740643,
            188819082,
            188726758,
            188730587,
            188740657,
            188744867,
            188749677,
            188736230,
            188750878,
            188747224,
            188750488
        ],
        "E": [
            188705052,
            188711810,
            188702314,
            188703997,
            188719714,
            188707610,
            188716487,
            188718865,
            188714441,
            188704775,
            188725287,
            188819074,
            188708013,
            188721335,
            188719084,
            188719253,
            188714969,
            188726615,
            188723431,
            188727896,
            188725883
        ],
        "D": [
            188702613,
            188703020,
            188697830,
            188697522,
            188707471,
            188696985,
            188707674,
            188710332,
            188711385,
            188724357,
            188713699,
            188819118,
            188819061,
            188695392,
            188715707,
            188723783,
            188712755,
            188710335,
            188700501,
            188714975,
            188711803,
            188710270
        ],
        "C": [
            188694431,
            188698020,
            188689331,
            188692115,
            188699073,
            188721317,
            188698207,
            188703599,
            188700577,
            188691524,
            188697369,
            188818955,
            188729950,
            188704268,
            188712641,
            188705362,
            188703234,
            188716581,
            188706582,
            188705592,
            188701989
        ],
        "B": [
            188689294,
            188694420,
            188688425,
            188705924,
            188692481,
            188693569,
            188693704,
            188692884,
            188692641,
            188690496,
            188689877,
            188818945,
            188737766,
            188698596,
            188704549,
            188701478,
            188699101,
            188697811,
            188699643,
            188700904,
            188695734
        ],
        "A2": [
            188688478,
            188690842,
            188692472,
            188689269,
            188688789,
            188704546,
            188691442,
            188689540,
            188689829,
            188692114,
            188699776,
            188818970,
            188727805,
            188692265,
            188700238,
            188696195,
            188689432,
            188688599,
            188695159,
            188698301,
            188690756
        ],
        "A1": [
            188688462,
            188690964,
            188692352,
            188689360,
            188688853,
            188699704,
            188691533,
            188689633,
            188689929,
            188688691,
            188699645,
            188818981,
            188689698,
            188692382,
            188700463,
            188696403,
            188689492,
            188688657,
            188694924,
            188695874,
            188690864
        ]
    },
    "name": "E. The Human Equation",
    "statement": "Petya and his friend, the robot Petya++, went to BFDMONCON, where the\r\ncostume contest is taking place today. While walking through the\r\nfestival, they came across a scientific stand named after Professor Oak\r\nand Golfball, where they were asked to solve an interesting\r\nproblem.Given a sequence of numbers a_1, a_2,\r\ndots, a_n you can perform several operations on this sequence.Each\r\noperation should look as follows. You choose some subsequence^\r\ndagger. Then you call all the numbers at odd positions in this\r\nsubsequence , and all the numbers at even positions in this subsequence\r\n. In this case, only the position of the number in the subsequence is\r\ntaken into account, not in the original sequence.For example, consider\r\nthe sequence 1, 4, 2, 8, 5, 7, 3, 6, 9 and its subsequence (shown in\r\nbold) 1,\r\nmathbf{4},\r\nmathbf{2}, 8,\r\nmathbf{5}, 7, 3,\r\nmathbf{6}, 9. Then the numbers 4 and 5 are , and the numbers 2 and 6 are\r\n.After that, you can do one of the following: add 1 to all northern\r\nnumbers and subtract 1 from all south numbers; or add 1 to all southern\r\nnumbers and subtract 1 from all northern numbers. Thus, from the\r\nsequence 1,\r\nmathbf{4},\r\nmathbf{2}, 8,\r\nmathbf{5}, 7, 3,\r\nmathbf{6}, 9, if you choose the subsequence shown in bold, you can get\r\neither 1,\r\nmathbf{5},\r\nmathbf{1}, 8,\r\nmathbf{6}, 7, 3,\r\nmathbf{5}, 9 or 1,\r\nmathbf{3},\r\nmathbf{3}, 8,\r\nmathbf{4}, 7, 3,\r\nmathbf{7}, 9.Then the operation ends. Note also that all operations are\r\nindependent, i. e. the numbers are no longer called or when one\r\noperation ends.It is necessary to turn all the numbers of the sequence\r\ninto zeros using the operations described above. Since there is very\r\nlittle time left before the costume contest, the friends want to know,\r\nwhat is the minimum number of operations required for this.The friends\r\nwere unable to solve this problem, so can you help them?^\r\ndagger A sequence c is a subsequence of a sequence d if c can be\r\nobtained from d by the deletion of several (possibly, zero or all)\r\nelements.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n#define ll long long\n#define ii pair<int,int>\n#define iii tuple<int,int,int>\n#define fi first\n#define se second\n#define endl '\\n'\n#define debug(x) cout << #x << \": \" << x << endl\n\n#define pub push_back\n#define pob pop_back\n#define puf push_front\n#define pof pop_front\n#define lb lower_bound\n#define ub upper_bound\n\n#define rep(x,start,end) for(int x=(start)-((start)>(end));x!=(end)-((start)>(end));((start)<(end)?x++:x--))\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n\nmt19937 rng(chrono::system_clock::now().time_since_epoch().count());\n\nint n;\nint arr[200005];\n\nsigned main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcout.tie(0);\n\tcin.exceptions(ios::badbit | ios::failbit);\n\t\n\tint TC;\n\tcin>>TC;\n\twhile (TC--){\n\t\tcin>>n;\n\t\trep(x,1,n+1) cin>>arr[x];\n\t\t\n\t\tint add=0,sub=0;\n\t\trep(x,1,n+1){\n\t\t\tif (arr[x]>0){\n\t\t\t\tadd=max(add,arr[x]);\n\t\t\t\tadd-=arr[x];\n\t\t\t\tsub+=arr[x];\n\t\t\t}\n\t\t\tif (arr[x]<0){\n\t\t\t\tarr[x]=-arr[x];\n\t\t\t\tsub=max(sub,arr[x]);\n\t\t\t\tsub-=arr[x];\n\t\t\t\tadd+=arr[x];\n\t\t\t}\n\t\t}\n\t\t\n\t\tcout<<add+sub<<endl;\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. The Human Equation.json",
    "editorial_link": "https://codeforces.com//blog/entry/111286",
    "editorial": "Letâs calculate an array of prefix sums. What do the operations look\r\nlike in this case? If we calculate the array of prefix sums, weâll see\r\nthat the operations now look like \"add 1 on a subsequence\" or \"take away\r\n1 on a subsequence\". Why? If we take the indices and and apply our\r\noperation to them (i.e. and ), it will appear that we added on the\r\nsegment in the prefix sums array.We still need to make the array all\r\nzeros. How? We will add to all elements that are less than zero, then\r\nsubtract from all elements that are greater than .From this we get that\r\nthe answer is the difference between the maximum and minimum prefix\r\nsums.\r\n",
    "hint": []
}