{
    "link": "https://codeforces.com//contest/168/problem/D",
    "problemId": "1058",
    "problem_idx": "D",
    "shortId": "168D",
    "contest_number": "168",
    "problem_submissions": {
        "B": [
            1428836,
            1427139,
            1426253,
            1427986,
            1430335,
            1427853,
            1424590,
            1424980,
            1424310
        ],
        "D": [
            1426871,
            1430554,
            1429305,
            1431245,
            1429653,
            1430817,
            1430384,
            1431850,
            30408057
        ],
        "C": [
            1425388,
            1426092,
            1431178,
            1426649,
            1431983,
            1430173,
            1426526,
            1428307,
            1425447,
            1426498,
            1426931
        ],
        "A": [
            1423734,
            1423629,
            1423811,
            1423781,
            1424797,
            1423644,
            1423482,
            1423449,
            1423414,
            1423417,
            1423345
        ],
        "E": [
            1436307
        ]
    },
    "name": "D. Wizards and Huge Prize",
    "statement": "One must train much to do well on wizardry contests. So, there are\r\nnumerous wizardry schools and magic fees.One of such magic schools\r\nconsists of tours. A winner of each tour gets a huge prize. The school\r\nis organised quite far away, so one will have to take all the prizes\r\nhome in one go. And the bags that you’ve brought with you have space for\r\nno more than huge prizes.Besides the fact that you want to take all the\r\nprizes home, you also want to perform well. You will consider your\r\nperformance good if you win at least tours.In fact, years of organizing\r\ncontests proved to the organizers that transporting huge prizes is an\r\nissue for the participants. Alas, no one has ever invented a spell that\r\nwould shrink the prizes... So, here’s the solution: for some tours the\r\nwinner gets a bag instead of a huge prize. Each bag is characterized by\r\nnumber the number of huge prizes that will fit into it.You already know\r\nthe subject of all tours, so you can estimate the probability of winning\r\nthe -th tour. You cannot skip the tour under any circumstances.Find the\r\nprobability that you will perform well on the contest and will be able\r\nto take all won prizes home (that is, that you will be able to fit all\r\nthe huge prizes that you won into the bags that you either won or\r\nbrought from home).\r\n",
    "solutions": [
        "#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n\nusing namespace std;\n\nint N,W,B,prize[201];\ndouble dp[201][201][401],chance[201];\nbool sudah[201][201][401];\n\ndouble proses(int urut,int dapat,int muat) {\n\tif (urut == N) {\n\t\treturn ((dapat >= W)&&(muat >= 200))?1.0:0.0;\n\t}\n\tif (sudah[urut][dapat][muat]) return dp[urut][dapat][muat];\n\t\n\tsudah[urut][dapat][muat] = true;\n\t\n\tdp[urut][dapat][muat] = (1.0-chance[urut])*proses(urut+1,dapat,muat);\n\tif (prize[urut] == -1) dp[urut][dapat][muat] += chance[urut]*proses(urut+1,dapat+1,muat-1);\n\telse dp[urut][dapat][muat] += chance[urut]*proses(urut+1,dapat+1,min(400,muat+prize[urut]));\n\t\n\treturn dp[urut][dapat][muat];\n}\n\nint main() {\n\tscanf(\"%d %d %d\",&N,&W,&B);\n\tfor (int i=0;i<N;++i) {\n\t\tscanf(\"%lf\",&chance[i]);\n\t\tchance[i] /= 100.0;\n\t}\n\tfor (int i=0;i<N;++i) scanf(\"%d\",&prize[i]);\n\t\n\tdouble jawab = proses(0,0,200+B);\n\tprintf(\"%.6lf\\n\",jawab);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "math",
        "probabilities"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Wizards and Huge Prize.json",
    "editorial_link": "https://codeforces.com//blog/entry/4217",
    "editorial": "For every citizen only the last query of type 1\n matters. Moreover, all queries before don't matter at all. So the answer for each citizen is maximum of x\n for last query of type 1\n for this citizen and maximum of all x\n for queries of type 2\n after that. We can calculate maximum x\n for all suffices of queries of type 2\n, and remember the last query of type 1\n for each citizen. It can be implemented in O(n+q)\n time.",
    "hint": []
}