{"link": "https://codeforces.com//contest/1236/problem/E", "problemId": "442397", "problem_idx": "E", "shortId": "1236E", "contest_number": "1236", "problem_submissions": {"F": [62811108], "E": [62897948, 62812842, 62804306, 62804069, 62813891, 62807146, 62814095, 62805221, 62811322, 62812238, 62805891, 62807935, 62864987, 62832474], "D": [62802950, 62812650, 62812836, 62802625, 62815190, 62803700, 62813698, 62812781, 62814654, 62821887, 62803442, 62805006, 62803249, 62804002, 62802909, 62805902, 62806423], "C": [62792622, 62791071, 62789610, 62791879, 62789897, 62794126, 62795764, 62792967, 62790282, 62793895, 62789462, 62790719, 62789824, 62786960, 62793187, 62790332, 62791408, 62792941], "B": [62786209, 62787426, 62787186, 62788924, 62792966, 62790776, 62793499, 62788719, 62790312, 62785414, 62786772, 62787247, 62786648, 62784848, 62788974, 62787295, 62787730, 62787714], "A": [62784582, 62784627, 62784321, 62785968, 62783805, 62784292, 62799939, 62784596, 62785095, 62790291, 62784662, 62784215, 62784012, 62783846, 62784720, 62784658, 62784976, 62784753]}, "name": "E. Alice and the Unfair Game", "statement": "Alice is playing a game with her good friend, Marisa.There are n boxes\r\narranged in a line, numbered with integers from 1 to n from left to\r\nright. Marisa will hide a doll in one of the boxes. Then Alice will have\r\nm chances to guess where the doll is. If Alice will correctly guess the\r\nnumber of box, where doll is now, she will win the game, otherwise, her\r\nfriend will win the game.In order to win, Marisa will use some unfair\r\ntricks. After each time Alice guesses a box, she can move the doll to\r\nthe neighboring box or just keep it at its place. Boxes i and i + 1 are\r\nneighboring for all 1\r\nleq i\r\nleq n - 1. She can also use this trick once before the game starts.So,\r\nthe game happens in this order: the game starts, Marisa makes the trick,\r\nAlice makes the first guess, Marisa makes the trick, Alice makes the\r\nsecond guess, Marisa makes the trick,\r\nldots, Alice makes m-th guess, Marisa makes the trick, the game\r\nends.Alice has come up with a sequence a_1, a_2,\r\nldots, a_m. In the i-th guess, she will ask if the doll is in the box\r\na_i. She wants to know the number of scenarios (x, y) (for all 1\r\nleq x, y\r\nleq n), such that Marisa can win the game if she will put the doll at\r\nthe x-th box at the beginning and at the end of the game, the doll will\r\nbe at the y-th box. Help her and calculate this number.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define endl '\\n'\ntypedef long long ll;\n\n\n\n\n\nconst int N = 2e5+10;\nset<int> posDiagToJ[N], negDiagToJ[N];\nmap<int, int> memoPos[N], memoNeg[N];\n\nint n, m;\n\nint solvePos(int i, int j) {\n    if(j == m+1) return i;\n    if(memoPos[i].count(j)) return memoPos[i][j];\n    auto it = posDiagToJ[i+j].upper_bound(j);\n    int res = -1;\n    if(it == posDiagToJ[i+j].end()) {\n        int temp = (m+1) - j;\n        res = max(0LL, i - temp);\n    } else {\n        int blockedJ = *it;\n        int temp = blockedJ - j;\n        res = solvePos(i-temp+1, j+temp);\n    }\n    return memoPos[i][j] = res;\n}\n\nint solveNeg(int i, int j) {\n    if(j == m+1) return i;\n    if(memoNeg[i].count(j)) return memoNeg[i][j];\n    auto it = negDiagToJ[j-i+n].upper_bound(j);\n    int res = -1;\n    if(it == negDiagToJ[j-i+n].end()) {\n        int temp = (m+1) - j;\n        res = min(n-1, i+temp);\n    } else {\n        int temp = *it - j;\n        res = solveNeg(i+temp-1, j+temp);\n    }\n    return memoNeg[i][j] = res;\n}\n\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin >> n >> m;\n    if(n == 1) {\n        cout << 0;\n        return 0;\n    }\n\n    for(int j = 1; j <= m; ++j) {\n        int box;\n        cin >> box;\n        --box;\n        //cout << \"diag: \" << j+box << endl;\n        posDiagToJ[j+box].insert(j);\n        negDiagToJ[j-box+n].insert(j);\n    }\n    vector<int> lows(n);\n    vector<int> highs(n);\n    for(int i = 0; i < n; ++i) {\n        lows[i] = solvePos(i,0);\n        highs[i] = solveNeg(i,0);\n    }\n    /*\n    cout << \"lows:\\n\";\n    for(int i = 0; i < n; ++i) {\n        cout << lows[i] << ' ';\n    }\n    cout << \"highs:\\n\";\n    for(int i = 0; i < n; ++i) {\n        cout << highs[i] << ' ';\n    }\n    */\n    int ans = 0;\n    for(int i = 0; i < n; ++i) {\n        ans += highs[i]-lows[i] + 1;\n    }\n    cout << ans << endl;\n}\n"], "input": "", "output": "", "tags": ["binary search", "data structures", "dp", "dsu"], "dificulty": "2500", "interactive": false}