{
    "link": "https://codeforces.com//contest/982/problem/A",
    "problemId": "183671",
    "problem_idx": "A",
    "shortId": "982A",
    "contest_number": "982",
    "problem_submissions": {
        "D": [
            38375535,
            38368851,
            38373726,
            38377162,
            38371395,
            38370646,
            38371994,
            38375134,
            38373026,
            38372327,
            38378250,
            38374514,
            38364939,
            38373007,
            38369726,
            38368852,
            38367484,
            38371092,
            38368305
        ],
        "C": [
            38369557,
            38365950,
            38368727,
            38373748,
            38365636,
            38362990,
            38360353,
            38357935,
            38366403,
            38365707,
            38366242,
            38368203,
            38360426,
            38360914,
            38358247,
            38360443,
            38360473,
            38363231,
            38362845
        ],
        "B": [
            38368596,
            38365056,
            38363500,
            38360346,
            38360284,
            38359729,
            38364781,
            38362446,
            38362143,
            38359325,
            38360710,
            38365274,
            38357153,
            38595002,
            38358897,
            38360993,
            38362869,
            38358240,
            38360536,
            38357974
        ],
        "A": [
            38367216,
            38364962,
            38356449,
            38356432,
            38356314,
            38356331,
            38367453,
            38355628,
            38357632,
            38356537,
            38357572,
            38363973,
            38355536,
            38355838,
            38356345,
            38364483,
            38355616,
            38357300,
            38355573
        ],
        "F": [
            38365213,
            38386318,
            38386309,
            38375562,
            38372484,
            38551586
        ],
        "E": [
            38373371,
            38376699,
            38377910,
            38376666,
            38377583,
            38377503,
            38378506,
            38374036,
            38378687,
            40182999
        ]
    },
    "name": "A. Row",
    "statement": "You\u2019re given a row with n chairs. We call a seating of people \"maximal\"\r\nif the two following conditions hold: There are no neighbors adjacent to\r\nanyone seated. It\u2019s impossible to seat one more person without violating\r\nthe first rule. The seating is given as a string consisting of zeros and\r\nones (0 means that the corresponding seat is empty, 1 occupied). The\r\ngoal is to determine whether this seating is \"maximal\".Note that the\r\nfirst and last seats are adjacent (if n\r\nne 2).\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <bitset>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#define rep(i,n) for(int i=1;i<=n;++i)\nusing namespace std;\n\nchar s[510000];\n\nint main()\n{\n\tint n;\n\tcin>>n;\n\tscanf(\"%s\",s);\n\tint flag=1;\n\trep(i,n)\n\t{\n\t\tint x=0,y=0;\n\t\tif (s[i-1]=='0')\n\t\t{\n\t\t\tif (i==1||s[i-2]=='0')x=1;\n\t\t\tif (i==n||s[i]=='0')y=1;\n\t\t\tif (x==1&&y==1){ flag=0; break; }\n\t\t}\n\t\tif (s[i-1]=='1')\n\t\t{\n\t\t\tif (i>1)if (s[i-2]=='1') {flag=0; break; } \n\t\t\tif (i<n)if (s[i]=='1') {flag=0; break;} \n\t\t}\n\t}\n\tif (flag)puts(\"Yes\"); else puts(\"No\");\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Row.json",
    "editorial_link": "https://codeforces.com//blog/entry/59551",
    "editorial": "Seating is the maximum when it does not exist two ones or three zeros\r\ntogether. It is also necessary to carefully process the ends of the\r\nseries it is necessary to check that you can not put a person on the\r\nmost right or the most left chairs.\r\n"
}