{
    "link": "https://codeforces.com//contest/1281/problem/E",
    "problemId": "495770",
    "problem_idx": "E",
    "shortId": "1281E",
    "contest_number": "1281",
    "problem_submissions": {
        "E": [
            66919654,
            66920588,
            66925092,
            66923975,
            66921225,
            66926039,
            66924486,
            66925911,
            66919753,
            66924443,
            66921735,
            66926640,
            66923762,
            66928689,
            66923984,
            66929347,
            66922347,
            66925800,
            66926136,
            66926785
        ],
        "D": [
            66913905,
            66912980,
            66914351,
            66914888,
            66918186,
            66917312,
            66919310,
            66913455,
            66927167,
            66918040,
            66916917,
            66918767,
            66920615,
            66919931,
            66917311,
            66920679,
            66926946,
            66921289,
            66921368,
            66915749
        ],
        "C": [
            66910411,
            66909108,
            66910083,
            66911847,
            66912648,
            66912093,
            66912420,
            66917797,
            66912812,
            66913195,
            66926185,
            66911123,
            66913114,
            66915044,
            66929796,
            66916101,
            66915614,
            66912997,
            66913346,
            66920684
        ],
        "B": [
            66903686,
            66904970,
            66904261,
            66905849,
            66904183,
            70825921,
            66906323,
            66905017,
            66906316,
            66904966,
            66910332,
            66906601,
            66907853,
            66908474,
            66905210,
            66905588,
            66906778,
            66904477,
            66905850,
            66914866,
            66908783
        ],
        "A": [
            66901264,
            66901388,
            66900754,
            66900661,
            66900790,
            70825928,
            66900330,
            66900663,
            66904497,
            66901649,
            66900680,
            66901270,
            66900668,
            66900286,
            66902138,
            66900321,
            66900528,
            66900477,
            66900340,
            66913834,
            66903613
        ],
        "F": [
            66933294,
            67581587
        ]
    },
    "name": "E. Jeremy Bearimy",
    "statement": "Welcome! Everything is fine.You have arrived in The Medium Place, the\r\nplace between The Good Place and The Bad Place. You are assigned a task\r\nthat will either make people happier or torture them for eternity.You\r\nhave a list of k pairs of people who have arrived in a new inhabited\r\nneighborhood. You need to assign each of the 2k people into one of the\r\n2k houses. Each person will be the resident of exactly one house, and\r\neach house will have exactly one resident.Of course, in the\r\nneighborhood, it is possible to visit friends. There are 2k - 1 roads,\r\neach of which connects two houses. It takes some time to traverse a\r\nroad. We will specify the amount of time it takes in the input. The\r\nneighborhood is designed in such a way that from anyone’s house, there\r\nis exactly one sequence of distinct roads you can take to any other\r\nhouse. In other words, the graph with the houses as vertices and the\r\nroads as edges is a tree.The truth is, these k pairs of people are\r\nactually soulmates. We index them from 1 to k. We denote by f(i) the\r\namount of time it takes for the i-th pair of soulmates to go to each\r\nother’s houses.As we have said before, you will need to assign each of\r\nthe 2k people into one of the 2k houses. You have two missions, one from\r\nthe entities in The Good Place and one from the entities of The Bad\r\nPlace. Here they are: The first mission, from The Good Place, is to\r\nassign the people into the houses such that the sum of f(i) over all\r\npairs i is minimized. Let’s define this minimized sum as G. This makes\r\nsure that soulmates can easily and efficiently visit each other; The\r\nsecond mission, from The Bad Place, is to assign the people into the\r\nhouses such that the sum of f(i) over all pairs i is maximized. Let’s\r\ndefine this maximized sum as B. This makes sure that soulmates will have\r\na difficult time to visit each other. What are the values of G and B?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int M = 1e9 + 7;\nconst int N = 1234567;\nint n;\nvector<pair<int, int>> g[N];\nint vis[N];\nint sz[N];\nlong long d[N];\n\nvoid dfs(int u) {\n    vis[u] = 1;\n    sz[u] = 1;\n    for (auto it : g[u]) {\n        int v = it.first;\n        int w = it.second;\n        if (!vis[v]) {\n            d[v] = d[u] + w;\n            dfs(v);\n            sz[u] += sz[v];\n        }\n    }\n}\n\nint find_centroid() {\n    dfs(0);\n    int u = 0, p = -1;\n    while (true) {\n        pair<int, int> x;\n        for (auto it : g[u]) {\n            int v = it.first;\n            int w = it.second;\n            if (v != p) {\n                x = max(x, make_pair(sz[v], v));\n            }\n        }\n        if (x.first + x.first <= n) {\n            return u;\n        }\n        p = u, u = x.second;\n    }\n}\n\nvoid dfs2(int u, long long& ans) {\n    vis[u] = 1;\n    for (auto it : g[u]) {\n        int v = it.first;\n        int w = it.second;\n        if (!vis[v]) {\n            if (sz[v] % 2 == 1) {\n                ans += w;\n            }\n            dfs2(v, ans);\n        }\n    }\n}\n\nint main() {\n    int t; cin >> t;\n    for (int tt = 0; tt < t; tt++) {\n        cin >> n;\n        n *= 2;\n        for (int i = 0; i < n; i++) {\n            g[i].clear();\n            vis[i] = 0;\n        }\n        for (int i = 0; i < n - 1; i++) {\n            int x, y, w;\n            cin >> x >> y >> w;\n            g[x - 1].push_back({y - 1, w});\n            g[y - 1].push_back({x - 1, w});\n        }\n        int u = find_centroid();\n        for (int i = 0; i < n; i++) {\n            vis[i] = 0;\n        }\n        d[u] = 0;\n        dfs(u);\n        long long ans1 = 0;\n        for (int i = 0; i < n; i++) {\n            ans1 += d[i];\n        }\n        long long ans2 = 0;\n        for (int i = 0; i < n; i++) {\n            vis[i] = 0;\n        }\n        dfs2(u, ans2);\n        cout << ans2 << \" \" << ans1 << \"\\n\";\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs",
        "greedy",
        "implementation",
        "trees"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Jeremy Bearimy.json",
    "editorial_link": "https://codeforces.com//blog/entry/72212",
    "editorial": "Suppose weâre maximizing the sum. Consider a single edge , and consider\r\nthe two components on either side of this edge. Then we have an\r\nimportant observation: This is because otherwise, there will be at least\r\none pair in each component that lies entirely in that component, say and\r\n). But if we switch the pairing to, say, and , then the cost increases,\r\nbecause weâre introducing new edges (namely , among possibly others)\r\nwhile keeping everything from the previous pairing. Repeating this, we\r\ncan construct an optimal solution where all nodes in one component are\r\npaired with nodes in the other component.This means that in the optimal\r\nsolution, the edge is counted times, where is the size of the component\r\non âs side, and is the size of the component on âs side. Therefore, the\r\nedge contributes exactly to the answer. But the same is true for all\r\nedges! Therefore, we can compute the answer by just summing up all\r\ncontributions. The only remaining step needed is to compute the sizes of\r\nall subtrees, and this can be done with a single BFS/DFS and DP. This\r\nruns in .Now, suppose weâre minimizing the sum. Consider again a single\r\nedge . Again, we have an important observation: . This is because\r\notherwise, if there are at least two such pairs, then we can again\r\nswitch the pairing (essentially the reverse of maximizing), which\r\ndecreases the cost, because it doesnât introduce additional edges but it\r\ndecreases the number of pairs passing through by . Repeating this, we\r\ncan ensure that at most one pair passes through . Furthermore, the of\r\nthe number of pairs passing through is fixed. (Why?) Therefore, in the\r\noptimal solution, is counted times. (Note that )But again, the same is\r\ntrue for all edges! Therefore, we can compute the answer in as well, by\r\nsumming up all contributions.\r\n",
    "hint": []
}