{"link": "https://codeforces.com//contest/296/problem/C", "problemId": "2831", "problem_idx": "C", "shortId": "296C", "contest_number": "296", "problem_submissions": {"E": [3509655, 3530011, 3513398], "D": [3508239, 3510564, 3509853, 3510303, 3509560, 3507344, 3510171, 3510710, 3508453, 3506372, 3508795, 3509129, 3512243, 3511315, 3511375, 3512574, 3511095, 3511937, 3509758, 3511827], "C": [3507268, 3506021, 3506686, 3506618, 3507187, 3504856, 3508052, 3508249, 3506872, 3508268, 3506789, 3507244, 3507018, 3509797, 3509920, 3507422, 3509852, 3509574, 3507123, 3509396], "B": [3505992, 3508492, 3509062, 3509375, 3508183, 3511340, 3506942, 3507117, 3511659, 3511560, 3513039, 3511100, 3509223, 3507976, 3507652, 3509638, 3509043, 3508068, 3512689, 3508226], "A": [3504411, 3504445, 3504488, 3506304, 3511525, 3505538, 3505436, 3504680, 3508725, 3504742, 3504378, 3504972, 3504639, 3513641, 3505229, 3505312, 3505160, 3505517, 3504768]}, "name": "C. Greg and Array", "statement": "Greg has an array and operations. Each operation looks as: , , , . To\r\napply operation to the array means to increase all array elements with\r\nnumbers by value .Greg wrote down queries on a piece of paper. Each\r\nquery has the following form: , , . That means that one should apply\r\noperations with numbers to the array.Now Greg is wondering, what the\r\narray will be after all the queries are executed. Help Greg.\r\n", "solutions": ["#include <iostream>\n#include <string>\n#include <cstring>\n#include <cstdio>\n#include <set>\n#include <map>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <complex>\n#include <bitset>\n#include <numeric>\n#pragma comment(linker, \"/STACK:256000000\")\n\nusing namespace std;\n\nconst int maxN = 101000;\nlong long a[maxN];\nint n, m, k;\nlong long l[maxN];\nlong long r[maxN];\nlong long d[maxN];\n\nlong long cnt[maxN];\n\nint main() {\n  //freopen(\"input.txt\", \"r\", stdin);\n  //freopen(\"output.txt\", \"w\", stdout);\n  \n  ios_base::sync_with_stdio(false);\n\n  cin >> n >> m >> k;\n  for (int i = 1; i <= n; ++i) {\n    cin >> a[i];\n  }\n  for (int i = n; i >= 1; --i) {\n    a[i] -= a[i - 1];\n  }\n\n  for (int i = 1; i <= m; ++i) {\n    cin >> l[i] >> r[i] >> d[i];\n  }\n\n  for (int i = 0; i < k; ++i) {\n    int x, y;\n    cin >> x >> y;\n    ++cnt[x];\n    --cnt[y + 1];\n  }\n\n  for (int i = 1; i < maxN; ++i) {\n    cnt[i] += cnt[i - 1];\n  }\n\n  for (int i = 1; i <= m; ++i) {\n    //cout << cnt[i] << \" \";\n  }\n  //cout << endl;\n\n  for (int i = 1; i <= m; ++i) {\n    long long cn = cnt[i];\n    cn *= d[i];\n    //cerr << cn << endl;\n    a[l[i]] += cn;\n    a[r[i] + 1] -= cn;\n  }\n\n  for (int i = 1; i <= n; ++i) {\n    a[i] += a[i - 1];\n  }\n\n  for (int i = 1; i <= n; ++i) {\n    cout << a[i] << \" \";\n  }\n  cout << endl;\n\n  return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "dp", "implementation"], "dificulty": "1400", "interactive": false}