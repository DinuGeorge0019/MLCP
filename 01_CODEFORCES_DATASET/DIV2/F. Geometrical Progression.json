{
    "link": "https://codeforces.com//contest/758/problem/F",
    "problemId": "89340",
    "problem_idx": "F",
    "shortId": "758F",
    "contest_number": "758",
    "problem_submissions": {
        "F": [
            23961911,
            23961832,
            23965370,
            23967077,
            23964444,
            23962828,
            23961458,
            23959907,
            23962385,
            23972421,
            23961385
        ],
        "E": [
            23961199,
            23969660
        ],
        "D": [
            23954905,
            23959005,
            23958687,
            23961234,
            23966280,
            23981466,
            23957019,
            23970497,
            23990624,
            23958899,
            23958219,
            23957228,
            23958436,
            23958155
        ],
        "C": [
            23954486,
            23955509,
            23955744,
            23956366,
            23958572,
            23953897,
            23975736,
            23955059,
            23956120,
            23952427,
            23952244,
            23955152,
            23953675,
            23954430,
            23955137,
            23954127,
            23955341,
            23955536,
            23969442,
            23966778
        ],
        "B": [
            23949178,
            23953141,
            23951861,
            23953552,
            23951433,
            23950823,
            23950433,
            23961140,
            23952985,
            23949054,
            23949507,
            23952101,
            23950424,
            23951944,
            23951182,
            23950619,
            23951222,
            23951421,
            23953877
        ],
        "A": [
            23947216,
            23950206,
            23947310,
            23949396,
            23949600,
            23947716,
            23947436,
            23947618,
            23948628,
            23947219,
            23947297,
            23948336,
            23948103,
            23948298,
            23947546,
            23947915,
            23948934,
            23948465
        ]
    },
    "name": "F. Geometrical Progression",
    "statement": "For given , and find the number of distinct geometrical progression,\r\neach of which contains distinct integers not less than and not greater\r\nthan . In other words, for each progression the following must hold: and\r\n, where is the geometrical progression, and .Geometrical progression is\r\na sequence of numbers where each term after first is found by\r\nmultiplying the previous one by a fixed non-zero number called the\r\ncommon ratio. Note that in our task may be non-integer. For example in\r\nprogression , common ratio is .Two progressions and are considered\r\ndifferent, if there is such () that .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ntypedef long long ll;\nll l,r,n,ans,m,a,b;\nll bin(ll a, ll n)\n{\n\tll ans=1;\n\twhile(n)\n\t{\n\t\tif(n&1)\n\t\t\tans*=a;\n\t\ta*=a;\n\t\tn/=2;\n\t}\n\treturn ans;\n}\nint main()\n{\n\tcin>>n>>l>>r;\n\tif(n==1)\n\t{\n\t\tcout<<r-l+1;\n\t\treturn 0;\n\t}\n\tif(n>25)\n\t{\n\t\tcout<<0;\n\t\treturn 0;\n\t}\n\tif(n>2)\n\t{\n\t\tm=pow(2,log2(1e8)/(n-1));\n\t\tm=min(m,3200LL);\n\t\tfor(ll i=1;i<=m;i++)\n\t\t\tfor(ll j=i+1;j<=m;j++)\n\t\t\t\tif(__gcd(i,j)==1)\n\t\t\t\t{\n\t\t\t\t\ta=bin(j,n-1);\n\t\t\t\t\tb=bin(i,n-1);\n\t\t\t\t\tif(l*a/b>r)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tans+=(r*b/a)/b-(l-1)/b;\n\t\t\t\t}\n\t\tcout<<ans*2;\n\t\treturn 0;\n\t}\n\tcout<<(r-l+1)*(r-l);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math",
        "number theory"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Geometrical Progression.json",
    "editorial_link": "https://codeforces.com//blog/entry/49880",
    "editorial": "Let is the denominator of the progression. is the rational number,\r\nbecause all numbers of progression are integers. ,where are integers, .\r\nThen . Because all numbers of progression are integers, so . Let , then\r\nand . According to the condition of the problem it must be done: . Count\r\nthe number of increasing progressions, it means (). Note that there are\r\ndecreasing progressions as much as increasing, any decreasing\r\nprogression is increasing, but written from right to left. If , then .\r\nThen for certain and the number of possible integers is calculated by\r\nthe formula .Letâs sort from to , from to . Before you add the number of\r\noptions for the next and you need to check that . Better to count using\r\nEuclidean algorithm for . Remember that we counted only increasing\r\nprogressions, the answer would be higher twice.Note that when this\r\nalgorithm is meaningless, so it is necessary to separately register the\r\nanswer, for it equals , it means that you choose one element from to\r\n.Also for it is necessary to print the formula, any pair of integers is\r\nthe geometrical progression, so for the answer equals , the first\r\ninteger can be chosen by using ways, the second which is not equal to\r\nthe first by using ways.Possible asymptotic behavior:; when we make the\r\nbinary transfer to the degree; with preliminary count; with binary\r\npreliminary count.\r\n",
    "hint": []
}