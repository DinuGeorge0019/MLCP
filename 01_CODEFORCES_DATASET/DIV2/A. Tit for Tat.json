{
    "link": "https://codeforces.com//contest/1516/problem/A",
    "problemId": "963906",
    "problem_idx": "A",
    "shortId": "1516A",
    "contest_number": "1516",
    "problem_submissions": {
        "D": [
            113744317,
            113734893,
            113732174,
            113735658,
            113736689,
            113753948,
            113752217,
            113742709,
            113733277,
            113772079,
            113758509,
            113765675,
            113749541,
            113745751,
            113782529,
            113747411,
            113750921,
            113756461
        ],
        "B": [
            113738828,
            113716225,
            113717222,
            113722044,
            113718441,
            113730595,
            113730731,
            113724024,
            113714979,
            113731503,
            113722149,
            113770715,
            113734481,
            113725894,
            113728293,
            113726022,
            113720823,
            113721935
        ],
        "A": [
            113731086,
            113713802,
            113713787,
            113716079,
            113713803,
            113733865,
            113718261,
            113723529,
            113713794,
            113715315,
            113715862,
            113721754,
            113725712,
            113721388,
            113714099,
            113715023,
            113714544
        ],
        "C": [
            113728258,
            113723880,
            113721257,
            113726835,
            113726539,
            113723017,
            113756433,
            113727327,
            113747091,
            113766829,
            113742469,
            113777547,
            113761975,
            113734529,
            113746406,
            113736795,
            113734065,
            113734539
        ],
        "E": [
            113723992,
            113762256,
            113769222,
            113761842,
            113767857,
            113776100,
            113769406,
            113784620,
            113781943,
            113761572,
            113785543,
            113747187,
            113860370,
            113784367,
            113787186,
            113776311,
            113821800
        ]
    },
    "name": "A. Tit for Tat",
    "statement": "Given an array a of length n, you can do at most k operations of the\r\nfollowing type on it: choose 2 different elements in the array, add 1 to\r\nthe first, and subtract 1 from the second. However, all the elements of\r\na have to remain non-negative after this operation. What is\r\nlexicographically the smallest array you can obtain?An array x is\r\nlexicographically smaller than an array y if there exists an index i\r\nsuch that x_i<y_i, and x_j=y_j for all 1\r\nle j < i. Less formally, at the first index i in which they differ,\r\nx_i<y_i.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define re register\nusing namespace std;\ninline int read(){\n\tre int t=0;re char v=getchar();\n\twhile(v<'0')v=getchar();\n\twhile(v>='0')t=(t<<3)+(t<<1)+v-48,v=getchar();\n\treturn t;\n}\nint n,k,a[102],pos;\nint main(){\n\tint t=read();\n\twhile(t--){\n\t\tn=read(),k=read();\n\t\tfor(re int i=1;i<=n;++i)a[i]=read();\n\t\tpos=1;\n\t\twhile(k--){\n\t\t\twhile(pos<=n&&(!a[pos]))++pos;\n\t\t\tif(pos>n)break;\n\t\t\t--a[pos],++a[n];\n\t\t}\n\t\tfor(re int i=1;i<=n;++i)printf(\"%d \",a[i]);\n\t\tputs(\"\");\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Tit for Tat.json",
    "editorial_link": "https://codeforces.com//blog/entry/89846",
    "editorial": "The general approach to minimizing an array lexicographically is to try\r\nto make the first element as small as possible, then the second element,\r\nand so on. So greedily, in each operation, we\u00e2\u0080\u0099ll pick the first non-zero\r\nelement and subtract from it, and we\u00e2\u0080\u0099ll add that to the very last\r\nelement. You can make the implementation faster by doing as many\r\noperations as you can on the first non-zero element simultaneously, but\r\nit\u00e2\u0080\u0099s not necessary. Code link: https://pastebin.com/pBsychs2\r\n"
}