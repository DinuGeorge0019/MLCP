{
    "link": "https://codeforces.com//contest/789/problem/B",
    "problemId": "100713",
    "problem_idx": "B",
    "shortId": "789B",
    "contest_number": "789",
    "problem_submissions": {
        "E": [
            25921417,
            25928664,
            25938608,
            26079210,
            25947954,
            26156847,
            25952720,
            25948873,
            25927282,
            25920863
        ],
        "C": [
            25907485,
            25920845,
            25908240,
            25909409,
            25909007,
            25905160,
            25908451,
            25908709,
            25907436,
            25913347,
            25910091,
            25912715,
            25905998,
            25914226,
            25910850,
            25914881,
            25912811,
            25910391
        ],
        "B": [
            25905735,
            25936346,
            25905545,
            25905376,
            25905148,
            25909677,
            25906183,
            25904190,
            25902630,
            25909186,
            25906079,
            25908841,
            25906659,
            25906692,
            25949245,
            25917385,
            25906432,
            25939487
        ],
        "A": [
            25903396,
            25902876,
            25900899,
            25900290,
            25900204,
            25900048,
            25900683,
            25900192,
            25900117,
            25900433,
            25900607,
            25901029,
            25900382,
            25900017,
            25900928,
            25900038,
            25900011,
            25900777
        ],
        "D": [
            25920092,
            25917739,
            25919852,
            25922157,
            25919194,
            25919753,
            25920835,
            25927363,
            25921216,
            25924692,
            25924134,
            25910294,
            25927095,
            25925921,
            25927864
        ]
    },
    "name": "B. Masha and geometric depression",
    "statement": "Masha really loves algebra. On the last lesson, her strict teacher\r\nDvastan gave she new exercise.You are given geometric progression\r\ndefined by two integers and . Remind that a geometric progression is a\r\nsequence of integers , where for each the respective term satisfies the\r\ncondition , where is called the common ratio of the progression.\r\nProgressions in Uzhlyandia are unusual: both and . Also, Dvastan gave\r\nMasha \"bad\" integers , and an integer .Masha writes all progression\r\nterms one by one onto the board (including repetitive) while condition\r\nis satisfied ( means absolute value of ). There is an exception: if a\r\nterm equals one of the \"bad\" integers, Masha skips it (doesn’t write\r\nonto the board) and moves forward to the next term.But the lesson is\r\ngoing to end soon, so Masha has to calculate how many integers will be\r\nwritten on the board. In order not to get into depression, Masha asked\r\nyou for help: help her calculate how many numbers she will write, or\r\nprint \"\" in case she needs to write infinitely many integers.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nmap<ll, int> bad;\nint main()\n{\n    ll b1,q,l,m;\n    scanf(\"%lld%lld%lld%lld\",&b1,&q,&l,&m);\n    while(m--)\n    {\n        ll x;\n        scanf(\"%lld\",&x);\n        bad[x]++;\n    }\n    ll ans = 0;\n    int cnt = 0;\n    while(llabs(b1)<=l&&cnt<100000)\n    {\n        ++cnt;\n        if(!bad[b1]) ans++;\n        b1*=q;\n    }\n    if(ans > 2000) puts(\"inf\");\n    else printf(\"%lld\\n\",ans);\n    return 0;\n    \n    if(b1==0)\n    {\n        if(bad[0]) puts(\"0\");\n        else puts(\"inf\");\n    } \n    else\n    if(q==0)\n    {\n        ll ans = 0;\n        if(!bad[b1]) ans++;\n        if(!bad[0]) puts(\"inf\");\n        else printf(\"%lld\\n\",ans);\n    }                                                                         \n    else if(q==1)\n    {\n        if(bad[b1]) puts(\"0\");\n        else puts(\"inf\");\n    }\n    else if(q==-1)\n    {\n        if(bad[b1]&&bad[-b1]) puts(\"0\");\n        else puts(\"inf\");\n    }\n    else\n    {\n        ll ans = 0;\n        while(llabs(b1)<=l)\n        {\n            if(!bad[b1]) ans++;\n            b1*=q;\n        }\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Masha and geometric depression.json",
    "editorial_link": "https://codeforces.com//blog/entry/51312",
    "editorial": "We need to handle following cases in the solution: answer is 0. if 0 is\r\npresent in array than answer is 0, else . if is present in array than\r\nanswer is 0, else . if both and are present in array than answer is 0,\r\notherwise . if 0 isnât present in array than answer is , else if is\r\npresent in than answer is 0, else answer is 1. In all other cases we can\r\nsimply iterate over all terms of progression while their absolute value\r\ndoesnât exceed . For every term that is not present in we simply\r\nincreasing answer by 1. Obviously, the absolute value of every next\r\nelement is bigger in at least 2 times than the absolute value of\r\nprevious. Thatâs why weâll need to check at most progression terms.\r\nSolution complexity is or .\r\n",
    "hint": []
}