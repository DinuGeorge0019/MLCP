{
    "link": "https://codeforces.com//contest/1395/problem/C",
    "problemId": "697391",
    "problem_idx": "C",
    "shortId": "1395C",
    "contest_number": "1395",
    "problem_submissions": {
        "E": [
            89703350,
            89708810,
            89714112,
            89712317,
            89710869,
            89721292,
            89717279,
            89724356,
            89790658,
            89720352,
            89754109,
            89972468,
            89742493
        ],
        "D": [
            89680583,
            89688575,
            89687431,
            89686132,
            89714959,
            89699868,
            89694770,
            89698961,
            89690630,
            89691297,
            89679330,
            89689190,
            89686103,
            89687862,
            89691233,
            89685139,
            89691247,
            89695821,
            89694043,
            89690135
        ],
        "C": [
            89667862,
            89671025,
            89670163,
            89676747,
            89709040,
            89680699,
            89672427,
            89678496,
            89680762,
            89680781,
            89671144,
            89671940,
            89675222,
            89675842,
            89668159,
            89667746,
            89679969,
            89674140,
            89676822,
            89680839
        ],
        "B": [
            89662013,
            89665422,
            89664182,
            89669305,
            89705735,
            89669721,
            89665457,
            89671085,
            89672065,
            89669758,
            89663771,
            89663206,
            89664323,
            89667048,
            89663548,
            89692219,
            89670175,
            89666811,
            89668290,
            89675614
        ],
        "A": [
            89659448,
            89659999,
            89659595,
            89659674,
            89701947,
            89663005,
            89660051,
            89663077,
            89666442,
            89661809,
            89659697,
            89659449,
            89659558,
            89661691,
            89659464,
            89660991,
            89660634,
            89661384,
            89662258,
            89660765
        ],
        "F": [
            89730004,
            89698501,
            89836189,
            89729687
        ]
    },
    "name": "C. Boboniu and Bit Operations",
    "statement": "Boboniu likes bit operations. He wants to play a game with you.Boboniu\r\ngives you two sequences of non-negative integers a_1,a_2,\r\nldots,a_n and b_1,b_2,\r\nldots,b_m.For each i (1\r\nle i\r\nle n), you\u2019re asked to choose a j (1\r\nle j\r\nle m) and let c_i=a_i\r\n& b_j, where\r\n& denotes the bitwise AND operation. Note that you can pick the same j\r\nfor different i\u2019s.Find the minimum possible c_1 | c_2 |\r\nldots | c_n, where | denotes the bitwise OR operation.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nint n,m,a[210],b[210],res;\nbool ok[210][210];\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n\tfor(int j=1;j<=m;j++)scanf(\"%d\",&b[j]);\n\tfor(int k=8;k>=0;k--){\n\t\tbool fl=true;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tbool fd=false;\n\t\t\tfor(int j=1;j<=m;j++)if(!ok[i][j]&&!(a[i]&b[j]&(1<<k)))fd=true;\n\t\t\tfl&=fd;\n\t\t}\n\t\tif(!fl){res+=(1<<k);continue;}\n\t\tfor(int i=1;i<=n;i++)for(int j=1;j<=m;j++)ok[i][j]|=((a[i]&b[j]&(1<<k))!=0);\n\t}\n\tprintf(\"%d\\n\",res);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "dp",
        "greedy"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Boboniu and Bit Operations.json",
    "editorial_link": "https://codeforces.com//blog/entry/81355",
    "editorial": "Suppose the answer is . Thus for all (), .Since , we can enumerate all\r\nintegers from to , and check if there exists for each that . The minimum\r\nof them will be the answer.The time complexity is\r\n"
}