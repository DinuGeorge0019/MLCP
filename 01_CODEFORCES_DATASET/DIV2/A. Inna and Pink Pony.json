{
    "link": "https://codeforces.com//contest/374/problem/A",
    "problemId": "4190",
    "problem_idx": "A",
    "shortId": "374A",
    "contest_number": "374",
    "problem_submissions": {
        "A": [
            5465863,
            5461833,
            5466158,
            5464911,
            5466997,
            5469706,
            5473574,
            5469853,
            5468623,
            5465633,
            5469265,
            5462265
        ],
        "D": [
            5462696,
            5467904,
            5464786,
            5464934,
            5468604,
            5465912,
            5467230,
            5466682,
            5468095,
            5465960,
            5466161
        ],
        "B": [
            5468995,
            5469225,
            5467607,
            5470212,
            5468275,
            5468375,
            5461857,
            5462807,
            5463190,
            5462540,
            5462778,
            5463491,
            5467629
        ],
        "C": [
            5466406,
            5463399,
            5462344,
            5464302,
            5463648,
            5464974,
            5464693,
            5465386,
            5470035,
            5465614,
            5465245,
            5466097,
            5466366
        ],
        "E": [
            5470049,
            5469975
        ]
    },
    "name": "A. Inna and Pink Pony",
    "statement": "Dima and Inna are doing so great! At the moment, Inna is sitting on the\r\nmagic lawn playing with a pink pony. Dima wanted to play too. He brought\r\nan chessboard, a very tasty candy and two numbers and .Dima put the\r\nchessboard in front of Inna and placed the candy in position on the\r\nboard. The boy said he would give the candy if it reaches one of the\r\ncorner cells of the board. He’s got one more condition. There can only\r\nbe actions of the following types: move the candy from position on the\r\nboard to position ; move the candy from position on the board to\r\nposition ; move the candy from position on the board to position ; move\r\nthe candy from position on the board to position . Naturally, Dima\r\ndoesn’t allow to move the candy beyond the chessboard borders.Inna and\r\nthe pony started shifting the candy around the board. They wonder what\r\nis the minimum number of allowed actions that they need to perform to\r\nmove the candy from the initial position to one of the chessboard\r\ncorners. Help them cope with the task!\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint n, m, x, y, a, b , ans;\n\nint dist(int xx, int yy) {\n    if (xx % a != x % a || yy % b != y % b) return 1000000000;\n    int res = abs(xx - x) / a + abs(yy - y) / b;\n    return res % 2 ? 1000000000 : max(abs(xx - x) / a, abs(yy - y) / b);\n}\n\n\nint main() {\n    cin >> n >> m >> x >> y >> a >> b;\n\n    if (x == 1 && y == 1 || x == 1 && y == m || x == n && y == 1 || x == n && y == m) {\n        cout << \"0\\n\";\n        return 0;\n    }\n\n    if (x + a > n && x - a < 1 || y + b > m && y - b < 1) {\n        cout << \"Poor Inna and pony!\\n\";\n        return 0;\n    }\n    int ans = min(min(dist(1, 1), dist(1, m)), min(dist(n, 1), dist(n, m)));\n    if (ans == 1000000000) cout << \"Poor Inna and pony!\\n\";\n    else cout << ans << \"\\n\";\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Inna and Pink Pony.json",
    "editorial_link": "https://codeforces.com//blog/entry/10018",
    "editorial": "Lets find a solution for shifting a candy from the position into\r\nposition . On each step we shift (increase or decrease) by and by . It\r\nis not difficult to understand that if is not divisible by and is\r\ndivisible by answer doesnât exist. We should also note that and Should\r\nbe both even or odd as shifting is performed at a time for both values.\r\nWe should also look up for a corner case when step dropes us out from\r\nthe board. Now we can determine the way from to as . Lets calculate it\r\nfor all corners and choose minimum or determine that the answer doesnât\r\nexist.\r\n",
    "hint": []
}