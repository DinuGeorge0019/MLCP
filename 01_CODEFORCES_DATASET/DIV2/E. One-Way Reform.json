{"link": "https://codeforces.com//contest/723/problem/E", "problemId": "74121", "problem_idx": "E", "shortId": "723E", "contest_number": "723", "problem_submissions": {"F": [21155697, 21154113, 21155933, 21154904, 21149973, 21159426, 21152095, 21153693, 21156752, 21154148, 21155446, 21158512, 21156719, 21157841, 63684195, 21157428, 21156472, 21165079], "D": [21145243, 21158845, 21147482, 21142220, 21145053, 21143706, 21144743, 21145722, 21163140, 21144768, 21147552, 21144060, 21144166, 21146675, 21148374, 21147946, 21149603, 21146889, 21147955, 21145653], "E": [21142890, 21148616, 21159045, 21149920, 21158556, 21150731, 21180051, 21153029, 21177875, 21161980, 21155864, 21154968, 21148045], "C": [21140474, 21141296, 21140148, 21162108, 21142166, 21146292, 21147879, 21142862, 21142174, 21148589, 21144499, 21141215, 21141347, 21144291, 21144339, 21143781, 21144417, 21143640, 21144289, 21142493], "B": [21138785, 21138330, 21144052, 21141269, 21138610, 21139747, 21138581, 21138753, 21138976, 21139782, 21142236, 21137955, 21139130, 21139752, 21139693, 21141265, 21138488, 21140188, 21156231], "A": [21135605, 21135289, 21141496, 21135525, 21135366, 21137068, 21135345, 21136036, 21135454, 21135984, 21136355, 21135335, 21136286, 21136540, 21136310, 21138762, 21135363, 21135712, 21156449]}, "name": "E. One-Way Reform", "statement": "There are cities and two-way roads in Berland, each road connects two\r\ncities. It is known that there is no more than one road connecting each\r\npair of cities, and there is no road which connects the city with\r\nitself. It is possible that there is no way to get from one city to some\r\nother city using only these roads.The road minister decided to make a\r\nreform in Berland and to orient all roads in the country, i.e. to make\r\neach road one-way. The minister wants to the number of cities, for which\r\nthe number of roads that begins in the city to the number of roads that\r\nends in it.\r\n", "solutions": ["#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <set>\n\nusing namespace std;\n\nconst int N(222);\n\nint n, m;\nint adj[N][N], visit[N], deg[N];\nvector<pair<int, int> > answer;\nset<pair<int, int> > baned;\n\nvoid dfs(int x) {\n\tvisit[x] = 1;\n\tfor (int y = 1; y <= n; y++) {\n\t\twhile (adj[x][y]) {\n\t\t\tadj[x][y]--;\n\t\t\tadj[y][x]--;\n\t\t\tdfs(y);\n\t\t\tanswer.push_back({x, y});\n\t\t}\n\t}\n}\n\nint main() {\n\tint test;\n\tscanf(\"%d\", &test);\n\twhile (test--) {\n\t\tscanf(\"%d %d\", &n, &m);\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tvisit[i] = 0;\n\t\t\tdeg[i] = 0;\n\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\tadj[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\tbaned.clear();\n\t\tanswer.clear();\n\t\tfor (int i = 1; i <= m; i++) {\n\t\t\tint u, v;\n\t\t\tscanf(\"%d %d\", &u, &v);\n\t\t\tadj[u][v] = adj[v][u] = 1;\n\t\t\tdeg[v]++;\n\t\t\tdeg[u]++;\n\t\t}\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (deg[i] % 2 == 1) {\n\t\t\t\tfor (int j = i + 1; j <= n; j++) {\n\t\t\t\t\tif (deg[j] % 2 == 1) {\n\t\t\t\t\t\tbaned.insert({i, j});\n\t\t\t\t\t\tadj[i][j]++;\n\t\t\t\t\t\tadj[j][i]++;\n\t\t\t\t\t\tdeg[i]++;\n\t\t\t\t\t\tdeg[j]++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (!visit[i]) {\n\t\t\t\tdfs(i);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tdeg[i] = 0;\n\t\t}\n\t\tvector<pair<int, int> > result;\n\t\tfor (auto p : answer) {\n\t\t\tint a = p.first, b = p.second;\n\t\t\tif (baned.count({a, b}) || baned.count({b, a})) {\n\t\t\t\tbaned.erase({min(a, b), max(a, b)});\n\t\t\t} else {\n\t\t\t\tdeg[a]++;\n\t\t\t\tdeg[b]--;\n\t\t\t\tresult.push_back({a, b});\n\t\t\t}\n\t\t}\n\t\tint cnt = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (deg[i] == 0) {\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\", cnt);\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tprintf(\"%d %d\\n\", result[i].first, result[i].second);\n\t\t}\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "dfs and similar", "flows", "graphs", "greedy"], "dificulty": "2200", "interactive": false}