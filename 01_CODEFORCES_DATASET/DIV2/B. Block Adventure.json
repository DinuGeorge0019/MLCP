{
    "link": "https://codeforces.com//contest/1200/problem/B",
    "problemId": "387082",
    "problem_idx": "B",
    "shortId": "1200B",
    "contest_number": "1200",
    "problem_submissions": {
        "F": [
            58597034,
            58604274,
            58603801,
            58604261,
            58606296,
            58609347,
            58606628,
            58603882,
            58611421,
            58614224,
            58612143,
            58659085,
            58617947,
            58615235,
            58614922,
            58618563,
            58618410,
            58819839,
            58819733,
            58614658,
            58617967,
            58616220,
            58617480
        ],
        "E": [
            58590453,
            58591974,
            58589669,
            58582754,
            58593262,
            58593765,
            58594950,
            58609042,
            58590807,
            58600501,
            58598133,
            58655621,
            58603439,
            58602117,
            58595933,
            58604924,
            58702004,
            58608728,
            58607700,
            58606886,
            58608547,
            58595823
        ],
        "D": [
            58585183,
            58587196,
            58595741,
            58592331,
            58597422,
            58600351,
            58598831,
            58588698,
            58604146,
            58596632,
            58604059,
            58594391,
            58596161,
            58605981,
            58592911,
            58594958,
            58601895,
            58602011,
            58595454,
            58607933
        ],
        "C": [
            58581348,
            58578761,
            58581508,
            58598446,
            58584753,
            58585227,
            58584309,
            58590893,
            58582665,
            58580776,
            58585592,
            58580638,
            58583883,
            58586342,
            58585762,
            58586591,
            58578435,
            58584027,
            58584223,
            58583648
        ],
        "B": [
            58580222,
            58581800,
            58579349,
            58596443,
            58582220,
            58582093,
            58584008,
            58593306,
            58580382,
            58578318,
            58581197,
            58578343,
            58580875,
            58583711,
            58582188,
            58581441,
            58581810,
            58580259,
            58599702,
            58580893
        ],
        "A": [
            58576391,
            58576584,
            58577266,
            58594056,
            58576879,
            58576717,
            58577509,
            58578116,
            58576412,
            58576423,
            58577739,
            58576429,
            58576681,
            58580309,
            58578442,
            58576553,
            58583309,
            58576504,
            58576736,
            58576406
        ]
    },
    "name": "B. Block Adventure",
    "statement": "Gildong is playing a video game called . In Block Adventure, there are n\r\ncolumns of blocks in a row, and the columns are numbered from 1 to n.\r\nAll blocks have equal heights. The height of the i-th column is\r\nrepresented as h_i, which is the number of blocks stacked in the i-th\r\ncolumn.Gildong plays the game as a character that can stand only on the\r\ntop of the columns. At the beginning, the character is standing on the\r\ntop of the 1-st column. The goal of the game is to move the character to\r\nthe top of the n-th column.The character also has a bag that can hold\r\ninfinitely many blocks. When the character is on the top of the i-th\r\ncolumn, Gildong can take one of the following three actions as many\r\ntimes as he wants: if there is at least one block on the column, remove\r\none block from the top of the i-th column and put it in the bag; if\r\nthere is at least one block in the bag, take one block out of the bag\r\nand place it on the top of the i-th column; if i < n and |h_i - h_{i+1}|\r\nle k, move the character to the top of the i+1-st column. k is a\r\nnon-negative integer given at the beginning of the game. Note that it is\r\nonly possible to move to the column. In actions of the first two types\r\nthe character remains in the i-th column, and the value h_i changes.The\r\ncharacter initially has m blocks in the bag. Gildong wants to know if it\r\nis possible to win the game. Help Gildong find the answer to his\r\nquestion.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint n, m, k, h[100];\n\nvoid solve() {\n\tcin >> n >> m >> k;\n\tfor(int i=0; i<n; ++i)\n\t\tcin >> h[i];\n\tfor(int i=0; i+1<n; ++i) {\n\t\tif(h[i]<h[i+1]-k) {\n\t\t\tm-=h[i+1]-k-h[i];\n\t\t\tif(m<0) {\n\t\t\t\tcout << \"NO\\n\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tm+=h[i]-max(h[i+1]-k, 0);\n\t\t}\n\t}\n\tcout << \"YES\\n\";\n}\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\t\n\tint t;\n\tcin >> t;\n\twhile(t--)\n\t\tsolve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Block Adventure.json",
    "editorial_link": "https://codeforces.com/blog/entry/69035",
    "editorial": "We can easily see that itâs always optimal to have as many blocks as\r\npossible in the bag before getting to the next column. Therefore, if the\r\ncharacter is currently on the top of the -th column, Gildong just needs\r\nto make become by repeating the -st or the -nd action. In other words,\r\nwe should add blocks to the bag. Adding or subtracting one by one will\r\nlead to TLE. If there exists a situation where the bag will have\r\nnegative number of blocks, the answer is NO. Otherwise the answer is\r\nYES.Time complexity: for each test case.\r\n",
    "hint": []
}