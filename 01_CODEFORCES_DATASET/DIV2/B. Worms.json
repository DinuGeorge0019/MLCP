{
    "link": "https://codeforces.com//contest/474/problem/B",
    "problemId": "14846",
    "problem_idx": "B",
    "shortId": "474B",
    "contest_number": "474",
    "problem_submissions": {
        "F": [
            8116116,
            8111347,
            8114247,
            8117109,
            8119759,
            8119274,
            8115617,
            8117848,
            8117464,
            8117692,
            8128068,
            8128022,
            8117327,
            8118237,
            8119671,
            8142598,
            8120637,
            8119403,
            8120748,
            8142553,
            8142542,
            8142530,
            8124718
        ],
        "E": [
            8115184,
            8114217,
            8112389,
            8114867,
            8116240,
            8115244,
            8120717,
            8120099,
            8115954,
            8123772,
            8128154,
            8128134,
            8116067,
            8117086,
            8119886,
            8115878,
            8118972,
            8118469,
            8118934,
            8119664,
            8118899,
            8119466
        ],
        "C": [
            8112567,
            8114486,
            8117872,
            8117009,
            8121035,
            8124320,
            8113338,
            8116442,
            8121988,
            8120682,
            8122009,
            8128422,
            8130552,
            8113770,
            8117339,
            8116750
        ],
        "D": [
            8110246,
            8110989,
            8115114,
            8112497,
            8111050,
            8112447,
            8109737,
            8115431,
            8111354,
            8111585,
            8113528,
            8114235,
            8114084,
            8108822,
            8113696,
            8116276,
            8114733,
            8114795,
            8112957,
            8112642
        ],
        "B": [
            8108782,
            8109337,
            8115774,
            8108967,
            8110289,
            8109920,
            8110734,
            8108738,
            8109834,
            8112357,
            8109436,
            8112150,
            8112245,
            8109821,
            8112135,
            8108859,
            8109140,
            8108856,
            8110418,
            8108483
        ],
        "A": [
            8107723,
            8108745,
            8116336,
            8108373,
            8107695,
            8108517,
            8107682,
            8107784,
            8107553,
            8108585,
            8107565,
            8112928,
            8110053,
            8110849,
            8110377,
            8107596,
            8107999,
            8107713,
            8108893,
            8107595
        ]
    },
    "name": "B. Worms",
    "statement": "It is lunch time for Mole. His friend, Marmot, prepared him a nice game\r\nfor lunch.Marmot brought Mole ordered piles of worms such that -th pile\r\ncontains worms. He labeled all these worms with consecutive integers:\r\nworms in first pile are labeled with numbers to , worms in second pile\r\nare labeled with numbers to and so on. See the example for a better\r\nunderstanding.Mole can\u2019t eat all the worms (Marmot brought a lot) and,\r\nas we all know, Mole is blind, so Marmot tells him the labels of the\r\nbest juicy worms. Marmot will only give Mole a worm if Mole says\r\ncorrectly in which pile this worm is contained.Poor Mole asks for your\r\nhelp. For all juicy worms said by Marmot, tell Mole the correct answers.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int kMaxN = 100000;\nint n, s[kMaxN + 1];\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; ++ i) {\n        scanf(\"%d\", &s[i]);\n        s[i] += s[i - 1];\n    }\n    int m;\n    scanf(\"%d\", &m);\n    for (int x; m --; ) {\n        scanf(\"%d\", &x);\n        int p = lower_bound(s + 1, s + n + 1, x) - s;\n        printf(\"%d\\n\", p);\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Worms.json",
    "editorial_link": "https://codeforces.com//blog/entry/14136",
    "editorial": "There are two solutions: We can make partial sums () and then make a\r\nbinary search for each query to find the result with the properties and\r\n. This solution has the complexity We can precalculate the index of the\r\npile for each worm and then answer for each query in . This solution has\r\nthe complexity\r\n"
}