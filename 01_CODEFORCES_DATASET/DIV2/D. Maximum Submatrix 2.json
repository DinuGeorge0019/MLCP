{"link": "https://codeforces.com//contest/376/problem/D", "problemId": "4243", "problem_idx": "D", "shortId": "376D", "contest_number": "376", "problem_submissions": {"C": [5507703, 5508378, 5509653, 5505870, 5508901, 5506789, 5506579, 5509150, 5509916, 5509799, 5507345, 5507270, 5509544, 5509634, 5509897, 5507776, 5509511, 5508122, 5507836], "B": [5506652, 5504117, 5503207, 5503382, 5503807, 5504774, 5504043, 5504523, 5504270, 5505254, 5504120, 5504627, 5505556, 5504132, 5504367, 5505335, 5505531, 5506467], "A": [5506294, 5502978, 5502598, 5506281, 5502656, 5503030, 5502618, 5503447, 5502632, 5502661, 5503380, 5502677, 5504082, 5503223, 5503562, 5502845, 5503131, 5502839], "D": [5505050, 5520106, 5520007, 5519986, 5519964, 5506569, 5511181, 5506448, 5507217, 5507459, 5508461, 5507914, 5507225, 5505749, 5506239, 5511657, 5508760, 5509213, 5508509, 5507842, 5508103, 5509597, 5508261, 5509314, 5509273], "E": [5518045]}, "name": "D. Maximum Submatrix 2", "statement": "You are given a matrix consisting of digits zero and one, its size is .\r\nYou are allowed to rearrange its rows. What is the maximum area of the\r\nsubmatrix that only consists of ones and can be obtained in the given\r\nproblem by the described operations?Let\u2019s assume that the rows of matrix\r\nare numbered from 1 to from top to bottom and the columns are numbered\r\nfrom 1 to from left to right. A matrix cell on the intersection of the\r\n-th row and the -th column can be represented as . Formally, a submatrix\r\nof matrix is a group of four integers . We will assume that the\r\nsubmatrix contains cells . The area of the submatrix is the number of\r\ncells it contains.\r\n", "solutions": ["#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <set>\n#include <string>\n#include <cstring>\n\nusing namespace std;\n\n#define maxn 5010\n\nchar s[maxn][maxn];\nint f[maxn][maxn], a[maxn];\n\nint solve(int a[], int n) {\n    int ans = 0;\n    sort(a, a + n);\n    for (int i = n - 1; i >= 0; --i) {\n        ans = max(ans, (n - i) * a[i]);\n    }\n    return ans;\n}\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%s\", s[i]);\n    }\n    for (int i = 0; i < n; ++i) {\n        for (int j = m - 1; j >= 0; --j) {\n            if (s[i][j] == '0') {\n                f[i][j] = 0;\n            } else {\n                f[i][j] = f[i][j + 1] + 1;\n            }\n        }\n    }\n    int ans = 0;\n    for (int j = 0; j < m; ++j) {\n        for (int i = 0; i < n; ++i) {\n            a[i] = f[i][j];\n        }\n        ans = max(ans, solve(a, n));\n    }\n    cout << ans << endl;\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["dp", "implementation", "sortings"], "dificulty": "1600", "interactive": false}