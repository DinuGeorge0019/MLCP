{
    "link": "https://codeforces.com//contest/1445/problem/D",
    "problemId": "781572",
    "problem_idx": "D",
    "shortId": "1445D",
    "contest_number": "1445",
    "problem_submissions": {
        "E": [
            97343040,
            97347277,
            97348912,
            97344656,
            97407907,
            97407463,
            97396524,
            97362947
        ],
        "D": [
            97324855,
            97333286,
            97329900,
            97353075,
            97316397,
            97323647,
            97321827,
            97324812,
            97326864,
            97321949,
            97323009,
            97324550,
            97322776,
            97326841,
            97328860,
            97326229,
            97319935,
            97330188,
            97323548,
            97329039
        ],
        "C": [
            97312030,
            97308145,
            97319441,
            97322210,
            97306404,
            97316438,
            97309851,
            97318138,
            97312463,
            97315342,
            97319473,
            97318075,
            97315769,
            97319997,
            97316782,
            97317725,
            97311982,
            97316093,
            97319226,
            97318708
        ],
        "B": [
            97307314,
            97314537,
            97310817,
            97314466,
            97321532,
            97307574,
            97325592,
            97309083,
            97515487,
            97306672,
            97309337,
            97315410,
            97313589,
            97311259,
            97309216,
            97310018,
            97309275,
            97322041,
            97310083,
            97315384,
            97310291
        ],
        "A": [
            97303713,
            97309415,
            97303791,
            97305897,
            97308405,
            97303339,
            97304268,
            97303286,
            97515476,
            97303210,
            97303136,
            97304841,
            97305580,
            97303766,
            97303232,
            97303901,
            97303416,
            97315951,
            97303601,
            97303529,
            97303495
        ]
    },
    "name": "D. Divide and Sum",
    "statement": "You are given an array a of length 2n. Consider a partition of array a\r\ninto two subsequences p and q of length n each (each element of array a\r\nshould be in exactly one subsequence: either in p or in q).Letâ€™s sort p\r\nin non-decreasing order, and q in non-increasing order, we can denote\r\nthe sorted versions by x and y, respectively. Then the of a partition is\r\ndefined as f(p, q) =\r\nsum_{i = 1}^n |x_i - y_i|.Find the sum of f(p, q) over all correct\r\npartitions of array a. Since the answer might be too big, print its\r\nremainder modulo 998244353.\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <iomanip>\n#include <cassert>\n#include <cstring>\n#include <sstream>\n#include <numeric>\n#include <cstdio>\n#include <bitset>\n\n#define int ll \n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\n\n\n#define pb push_back\n#define F first\n#define S second\n#define _sz(x) ((int)x.size())\n\nconst int N = 4e5 + 20, mod = 998244353;\nint n;\nint a[N];\n\nint fac[N], ifac[N];\n\ninline int pw (int a, int b) {\n    int res = 1;\n    while (b) {\n        if (b & 1) res = 1ll * res * a % mod;\n        a = 1ll * a * a % mod;\n        b /= 2;\n    }\n\n    return res;\n}\n\ninline int C (int n, int k) {\n    if (k > n || k < 0) return 0;\n    return 1ll * fac[n] * ifac[k] % mod * ifac[n - k] % mod;\n}\n\nint32_t main()\n{\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n\n    for (int i = fac[0] = ifac[0] = 1; i < N; i++) {\n        fac[i] = 1ll * fac[i - 1] * i % mod;\n        ifac[i] = pw(fac[i], mod - 2);\n    }\n    \n    cin >> n;\n\n    for (int i = 0; i < 2 * n; i++) cin >> a[i];\n\n    sort(a, a + 2 * n);\n\n    int ans = 0;\n\n    for (int i = 1; i < 2 * n; i++)\n        ans = (ans + 1ll * min(i, 2 * n - i) * (a[i] - a[i - 1])) % mod;\n\n    ans = 1ll * ans * C(2 * n, n) % mod;\n\n    cout << ans << '\\n';\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math",
        "sortings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Divide and Sum.json",
    "editorial_link": "https://codeforces.com//blog/entry/84248",
    "editorial": "No matter how we split the array, the cost of a partition will always be the same.\n\nLet's prove it. Without loss of generality we will consider that the array a\n sorted and denote for L\n the set of elements with indexes from 1\n to n\n, and for R\n the set of elements with indexes from n+1\n to 2n\n.\n\nThen split the array a\n into any two arrays p\n and q\n of size n\n. Let's sort p\n in non-decreasing order and q\n by non-increasing order. Any difference |pi?qi|\n in our sum will be the difference of one element of R\n and one element of L\n.\n\nIf this is not the case, then there is an index i\n such that both pi\n and qi\n belong to the same set. Let's assume that this is L\n.\n\nAll elements with indexes less than or equal to i\n in p\n belong to L\n (i\n elements)\nAll items with indexes greater than or equal to i\n in q\n belong to L\n (n?(i?1)\n elements)\nThen L\n has at least i+n?(i?1)=n+1\n elements, but there must be exactly n\n. Contradiction. For the set R\n the proof is similar.\n\nThen the answer to the problem is (the sum of the elements of the set R\n minus the sum of the elements of the set L\n) multiplied by the number of partitions of the array Cn2n\n.",
    "hint": []
}