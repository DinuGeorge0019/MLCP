{
    "link": "https://codeforces.com//contest/1061/problem/D",
    "problemId": "259560",
    "problem_idx": "D",
    "shortId": "1061D",
    "contest_number": "1061",
    "problem_submissions": {
        "F": [
            46080533,
            46078741,
            46083363,
            46090966,
            46090449,
            46083565,
            46085799,
            46083880,
            46078551,
            46109412,
            46086044,
            46084393,
            46085497,
            46085674,
            46086595,
            46085522,
            46079186,
            46086667,
            46084268,
            46086192,
            46099697,
            46099461,
            46088106
        ],
        "D": [
            46072013,
            46076677,
            46075957,
            46074341,
            46074354,
            46074232,
            46074411,
            46085044,
            46076314,
            46078869,
            46075590,
            46078204,
            46076173,
            46079731,
            46078000,
            46081859,
            46079963,
            46085405,
            46080982,
            46080058
        ],
        "C": [
            46069182,
            46071750,
            46070967,
            46071622,
            46071185,
            46071619,
            46071683,
            46072269,
            46072643,
            46074534,
            46072699,
            46073691,
            46071278,
            46072896,
            46072959,
            46081505,
            46074501,
            46073620,
            46077745,
            46075063
        ],
        "B": [
            46068385,
            46070705,
            46068805,
            46070395,
            46069936,
            46070540,
            46069425,
            46071160,
            46070196,
            46071645,
            46073407,
            46071478,
            46069267,
            46070628,
            46070940,
            46073987,
            46071263,
            46069667,
            46073266,
            46069912
        ],
        "A": [
            46065105,
            46064815,
            46065437,
            46065157,
            46065204,
            46064909,
            46064831,
            46065487,
            46067926,
            46065498,
            46065297,
            46066800,
            46065131,
            46066394,
            46065152,
            46064816,
            46065082,
            46065378,
            46071171,
            46064958
        ],
        "E": [
            46080824,
            46089783,
            46087601,
            142313241,
            46115374
        ]
    },
    "name": "D. TV Shows",
    "statement": "There are n TV shows you want to watch. Suppose the whole time is split\r\ninto equal parts called \"minutes\". The i-th of the shows is going from\r\nl_i-th to r_i-th minute, both ends inclusive.You need a TV to watch a TV\r\nshow and you can\u2019t watch two TV shows which air at the same time on the\r\nsame TV, so it is possible you will need multiple TVs in some minutes.\r\nFor example, if segments [l_i, r_i] and [l_j, r_j] intersect, then shows\r\ni and j can\u2019t be watched simultaneously on one TV.Once you start\r\nwatching a show on some TV it is not possible to \"move\" it to another TV\r\n(since it would be too distracting), or to watch another show on the\r\nsame TV until this show ends.There is a TV Rental shop near you. It\r\nrents a TV for x rupees, and charges y (y < x) rupees for every extra\r\nminute you keep the TV. So in order to rent a TV for minutes [a; b] you\r\nwill need to pay x + y\r\ncdot (b - a). You can assume, that taking and returning of the TV\r\ndoesn\u2019t take any time and doesn\u2019t distract from watching other TV shows.\r\nFind the minimum possible cost to view all shows. Since this value could\r\nbe too large, print it modulo 10^9 + 7.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define eb emplace_back\n#define INF (0x3f3f3f3f)\n#define INFLL (0x3f3f3f3f3f3f3f3fll)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<int, ll> pil;\ntypedef pair<ll, int> pli;\n\nconst int MOD = 1000000007;\nconst int MAXN = 100005;\n\nstruct EVT {\n\tEVT(int type, int x, int idx)\n\t\t: type(type), x(x), idx(idx) {}\n\tint type, x, idx;\n\n\tbool operator < (const EVT &t) const {\n\t\tif(x != t.x) return x < t.x;\n\t\treturn type < t.type;\n\t}\n};\n\npriority_queue<ll> PQ;\n\nvector<EVT> EV;\n\nint A[MAXN], B[MAXN];\n\nll Ans;\nint N, CX, CY;\n\nint main() {\n\tscanf(\"%d%d%d\", &N, &CX, &CY);\n\tfor(int i = 1; i <= N; i++) {\n\t\tscanf(\"%d%d\", &A[i], &B[i]);\n\t\tEV.eb(1, A[i], i);\n\t\tEV.eb(2, B[i], i);\n\t}\n\n\tsort(EV.begin(), EV.end());\n\n\tfor(auto &ev : EV) {\n\t\tint type = ev.type, idx = ev.idx;\n\t\tif(1 == type) {\n\t\t\tif(!PQ.empty() && ((ll)A[idx] - PQ.top()) * ll(CY) < CX) {\n\t\t\t\tAns += ((ll)A[idx] - PQ.top()) * ll(CY);\n\t\t\t\tPQ.pop();\n\t\t\t} else {\n\t\t\t\tAns += CX;\n\t\t\t}\n\t\t\tAns %= MOD;\n\t\t\tAns += ll(CY) * ll(B[idx] - A[idx]);\n\t\t\tAns %= MOD;\n\t\t} else {\n\t\t\tPQ.push(B[idx]);\n\t\t}\n\t}\n\n\tAns = ((Ans % MOD) + MOD) % MOD;\n\tcout << Ans << endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. TV Shows.json",
    "editorial_link": "https://codeforces.com//blog/entry/63384",
    "editorial": ": Sort the TV shows on the basis of their starting time. Now, we start\r\nallocating TVs greedily to the shows. For any show , we allocate a new\r\nTV only if there is no old TV where the show ends at , such that and .\r\nAlso, if there are many such old TVs, then we use the TV where is\r\nmaximum.: Notice that there is a minimal cost of , which will always be\r\nadded. Hence, the optimal solution completely depends on the rent of new\r\nTV and the time wasted on old TVs. Now, lets try to prove that\r\nallocating an old TV with maximum is optimal. Suppose we are allocating\r\na TV to show . Let\u00e2\u0080\u0099s consider two old TVs and , such that and . In such\r\na case, it is possible to allocate both the TVs to this show. For\r\nchoosing which TV to be allocated let\u00e2\u0080\u0099s consider the three possible\r\ncases:: There is no show , such that . In this case, it would be better\r\nto allocate TV to show , since . Hence, allocating TV to show is optimal\r\nin this case.: There are shows , such that ; but there is no show , such\r\nthat . In this case, if we allocate TV to show and TV to show , then the\r\ncost will be . And, if we allocate TV to show , then we need to buy a\r\nnew TV for show and our cost will be . Now, as , . Hence, allocating TV\r\ninstead of TV to show is optimal in this case.: There are shows , such\r\nthat . In this case, if we allocate TV to show , cost will be . If we\r\nallocate TV to show , cost will be . Here, we can see that in both of\r\nthe allocations, the cost is and so any allocation is optimal here.\r\nHence, we can see that if more than one old TVs are available,\r\nallocating the one with maximum is always optimal. Overall Complexity:\r\n"
}