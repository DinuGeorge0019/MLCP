{
    "link": "https://codeforces.com//contest/2116/problem/B",
    "problemId": "3415138",
    "problem_idx": "B",
    "shortId": "2116B",
    "contest_number": "2116",
    "problem_submissions": {
        "F": [
            322273084,
            322268455,
            322272796
        ],
        "C": [
            322213782,
            322211495,
            322225091,
            322350839,
            322234816,
            322216926,
            322230916,
            322208199,
            322216308,
            322217941,
            322222800,
            322209740,
            322208831,
            322220199,
            322212868,
            322216844,
            322222870,
            322229532,
            322229611,
            322229496
        ],
        "B": [
            322207078,
            322245593,
            322214843,
            322220841,
            322209715,
            322194328,
            322245619,
            322212539,
            322212541,
            322201689,
            322197216,
            322243242,
            322200057,
            322206228,
            322250414,
            322200360,
            322207000,
            322212298,
            322200863
        ],
        "A": [
            322202620,
            322202049,
            322192913,
            322203481,
            322203480,
            322198217,
            322192551,
            322206431,
            322209912,
            322192218,
            322192710,
            322224349,
            322193123,
            322195678,
            322206988,
            322190686,
            322193586,
            322194199,
            322191847
        ],
        "E": [
            322602078,
            322528542,
            322289444
        ],
        "D": [
            322234808,
            322229165,
            322222196,
            322228457,
            322240294,
            322239871,
            322249088,
            322247900,
            322235216,
            322255648,
            322247823,
            322233222,
            322259282,
            322255603,
            322252126,
            322260830
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/143418",
    "editorial": "SolutionFor given integers , if we want to compare and , we actually\r\nneed to compare with first, and with second. This is due to ; when , ,\r\nand itâ€™s symmetric for .So for all , we only need to find , then . This\r\nis easily done in time.Time complexity: per test case.Memory complexity:\r\nper test case.\r\n",
    "name": "B. Gellyfish and Baby s Breath",
    "statement": "Flower gives Gellyfish two permutations^{\r\ntext{ }} of [0, 1,\r\nldots, n-1]: p_0, p_1,\r\nldots, p_{n-1} and q_0, q_1,\r\nldots, q_{n-1}.Now Gellyfish wants to calculate an array r_0,r_1,\r\nldots,r_{n-1} through the following method: For all i (0\r\nleq i\r\nleq n-1), r_i =\r\nmax\r\nlimits_{j=0}^{i}\r\nleft(2^{p_j} + 2^{q_{i-j}}\r\nright) But since Gellyfish is very lazy, you have to help her figure out\r\nthe elements of r.Since the elements of r are very large, you are only\r\nrequired to output the elements of r modulo 998\r\n,244\r\n,353.^{\r\ntext{ }}An array b is a permutation of an array a if b consists of the\r\nelements of a in arbitrary order. For example, [4,2,3,4] is a\r\npermutation of [3,2,4,4] while [1,2,2] is not a permutation of [1,2,3].\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Gellyfish and Baby s Breath.json",
    "hint": [
        "Hint 1 How to quickly compare and for given integers is the key.",
        "Hint 2 We are given two permutations of and , which means that each element will appear only once in both and , respectively. What's the point of this?",
        "Hint 1 Try to think about why Gellyfish can always achieve her goal, and ultimately what all the elements will turn into.",
        "Hint 2 When you've figured out Hint 1 , try using dynamic programming to reach your goal.",
        "Hint 1 Try working backwards from the final sequence, to the initial.",
        "Hint 2 If you're confused about Hint 1 , it's probably because the result isn't unique each time. Think carefully about whether you can just take the \"tightest\" result possible",
        "Hint 1 Try to find an solution using dynamic programming.",
        "Hint 2 Re-examining Gellyfish's strategy, there are definitely situations where she chooses to carry out an attack. Can we divide the rounds into two phases by some nature?",
        "Hint 1 Consider if consists only of , this problem turned out to be another classic problem. So you need at least something that you know what it is.",
        "Hint 2 \"linear basis\" is the answer to Hint 1 . Please try to understand this: all addition operations are interpreted as XOR operations.",
        "Hint 1 There is an easy way to solve the problem in time complexity. Thus for cases with small , we can easily solve them, but what about cases with large ?",
        "Hint 2 There is a classic but mistaken greed where we only take the item with the largest . This is obviously wrong, but Hint 1 lets us rule out the case where r is small; is there an efficient algorithm that can fix this greed for larger ?"
    ]
}