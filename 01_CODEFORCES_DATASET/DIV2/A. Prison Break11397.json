{
    "link": "https://codeforces.com//contest/1457/problem/A",
    "problemId": "814141",
    "problem_idx": "A",
    "shortId": "1457A",
    "contest_number": "1457",
    "problem_submissions": {
        "E": [
            99868612,
            99868820,
            99868894,
            99871379,
            99876241,
            99873210,
            99873073,
            99877427,
            99875242,
            99874362,
            99880934,
            99878599,
            99880282,
            99880267,
            99880129,
            99881010,
            99881186,
            99878842,
            99883433,
            99887042
        ],
        "D": [
            99860413,
            99858501,
            99859224,
            99855503,
            99852261,
            99861676,
            99862738,
            99863057,
            99864198,
            99864361,
            99855111,
            99866971,
            99857047,
            99869259,
            99872023,
            99871057,
            99871185,
            99871389,
            99870989,
            99870957
        ],
        "C": [
            99848523,
            99846546,
            99854121,
            99849522,
            99849975,
            99852554,
            99857957,
            99855488,
            99850137,
            99854183,
            99851123,
            99848085,
            99862644,
            99857309,
            99851618,
            99858097,
            99853416,
            99850485,
            99861161,
            99863907
        ],
        "B": [
            99842172,
            99842416,
            99847160,
            99843642,
            99841920,
            99843802,
            99852704,
            99845703,
            99844331,
            99847361,
            99846671,
            99841358,
            99851090,
            99848157,
            99844121,
            99845368,
            99843677,
            99857603,
            99853155,
            99848846
        ],
        "A": [
            99839848,
            99840102,
            99841257,
            99839720,
            99841011,
            99840218,
            99839732,
            99841278,
            99840508,
            99841843,
            99839833,
            99839677,
            99846294,
            99845677,
            99840019,
            99840219,
            99840262,
            99842567,
            99843366,
            99841538
        ]
    },
    "name": "A. Prison Break",
    "statement": "There is a prison that can be represented as a rectangular matrix with n\r\nrows and m columns. Therefore, there are n\r\ncdot m prison cells. There are also n\r\ncdot m prisoners, one in each prison cell. Let\u2019s denote the cell in the\r\ni-th row and the j-th column as (i, j).There\u2019s a secret tunnel in the\r\ncell (r, c), that the prisoners will use to escape! However, to avoid\r\nthe risk of getting caught, they will escape at night.Before the night,\r\nevery prisoner is in his own cell. When night comes, they can start\r\nmoving to adjacent cells. Formally, in one second, a prisoner located in\r\ncell (i, j) can move to cells ( i - 1 , j ) , ( i + 1 , j ) , ( i , j -\r\n1 ) , or ( i , j + 1 ), as long as the target cell is inside the prison.\r\nThey can also choose to stay in cell (i, j).The prisoners want to know\r\nthe minimum number of seconds needed so that every prisoner can arrive\r\nto cell ( r , c ) if they move optimally. Note that there can be any\r\nnumber of prisoners in the same cell at the same time.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pre(i,a,b) for(int i=a;i>=b;i--)\n#define N 100005\nusing namespace std;\nint n,m,r,c;\nint dis(int x,int y,int X,int Y){return abs(x-X)+abs(y-Y);}\nvoid solve(){\n\tscanf(\"%d%d%d%d\",&n,&m,&r,&c);\n\tprintf(\"%d\\n\",max(max(dis(1,1,r,c),dis(n,m,r,c)),max(dis(1,m,r,c),dis(n,1,r,c))));\n}\nint main(){\n\tint T;scanf(\"%d\",&T);\n\twhile(T--)solve();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Prison Break11397.json",
    "editorial_link": "https://codeforces.com//blog/entry/85118",
    "editorial": "The problem is equivalent to finding the farthest cell from (x,y)\n. It is easy to see that, if they move optimally, (i,j)\n can reach (x,y)\n just by moving in an L shape, and this is equivalent to the Manhattan distance between the two points. The longest distance a prisoner will move on rows is max(x?1,n?x)\n, and for the columns it is (y?1,m?y)\n. So answer is just max(x?1,n?x)+max(y?1,m?y)"
}