{
    "link": "https://codeforces.com//contest/1185/problem/C2",
    "problemId": "360323",
    "problem_idx": "C2",
    "shortId": "1185C2",
    "contest_number": "1185",
    "problem_submissions": {
        "G2": [
            55788875,
            55790981,
            55805220,
            55805211,
            55805181,
            55805110,
            55805072,
            55792804,
            55790893,
            55798346,
            55839723
        ],
        "F": [
            55780405,
            55784226,
            55779797,
            55790435,
            55783948,
            55774453,
            55775306,
            55787301,
            55787239,
            55780510,
            55776902,
            55778347,
            55775969,
            55787695,
            55787943,
            55780581,
            55779230,
            55782760,
            55786882,
            55789076
        ],
        "G1": [
            55775590,
            55777444,
            55773026,
            55772290,
            55770464,
            55777149,
            55766017,
            55779783,
            55780697,
            55775163,
            55781086,
            55781273,
            55783475,
            55770087,
            55781658,
            55783057,
            55787570,
            55776249,
            55782788,
            55780634
        ],
        "E": [
            55773709,
            55771675,
            55770836,
            55777430,
            55780309,
            55781282,
            55788835,
            55774037,
            55773565,
            55789637,
            55786175,
            55787728,
            55781452,
            55776381,
            55777447,
            55775569,
            55774578,
            55788543,
            55772414,
            55777859
        ],
        "D": [
            55764805,
            55765160,
            55763333,
            55764561,
            55767970,
            55767077,
            55763517,
            55765643,
            55766955,
            55766963,
            55766612,
            55765495,
            55757519,
            55767392,
            55769540,
            55767234,
            55769033,
            55770802,
            55765015,
            55772029
        ],
        "C1": [
            55760617,
            55761184,
            55760176,
            55760890,
            55765300,
            55759868,
            55766915,
            55759835,
            55763415,
            55762227,
            55760086,
            55765957,
            55763972,
            55762753,
            55765982,
            55761920,
            55763575,
            55762040,
            55779786,
            55761686
        ],
        "C2": [
            55760448,
            55761127,
            55759974,
            55760758,
            55765213,
            55759811,
            55767080,
            55761513,
            55763197,
            55762148,
            55760260,
            55762050,
            55763657,
            55765005,
            55765960,
            55761757,
            55779613,
            55763567,
            55779964,
            55761855
        ],
        "B": [
            55757432,
            55757400,
            55757118,
            55756714,
            55760856,
            55756979,
            55757746,
            55757494,
            55758775,
            55757209,
            55756807,
            55758385,
            55768633,
            55758969,
            55760948,
            55757700,
            55756899,
            55760037,
            55759228,
            55756676
        ],
        "A": [
            55755278,
            55754991,
            55754916,
            55754981,
            55758172,
            55754952,
            55755176,
            55754923,
            55755064,
            55755117,
            55755166,
            55754951,
            55770975,
            55755955,
            55755304,
            55755094,
            55755216,
            55755238,
            55756678,
            55754929
        ]
    },
    "name": "C2. Exam in BerSU  hard version ",
    "statement": "A session has begun at Beland State University. Many students are taking\r\nexams.Polygraph Poligrafovich is going to examine a group of n students.\r\nStudents will take the exam one-by-one in order from 1-th to n-th. Rules\r\nof the exam are following: The i-th student randomly chooses a ticket.\r\nif this ticket is too hard to the student, he doesn’t answer and goes\r\nhome immediately (this process is so fast that it’s considered no time\r\nelapses). This student fails the exam. if the student finds the ticket\r\neasy, he spends exactly t_i minutes to pass the exam. After it, he\r\nimmediately gets a mark and goes home. Students take the exam in the\r\nfixed order, one-by-one, without any interruption. At any moment of\r\ntime, Polygraph Poligrafovich takes the answer from one student.The\r\nduration of the whole exam for all students is M minutes (\r\nmax t_i\r\nle M), so students at the end of the list have a greater possibility to\r\nrun out of time to pass the exam.For each student i, you should count\r\nthe minimum possible number of students who need to fail the exam so the\r\ni-th student has enough time to the exam.For each student i, find the\r\nanswer independently. That is, if when finding the answer for the\r\nstudent i_1 some student j should leave, then while finding the answer\r\nfor i_2 (i_2>i_1) the student j student does not have to go home.\r\n",
    "solutions": [
        "///Mn kotr el labawy mb2t4 nawy\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing ll = long long;\nint t[2 * 1000 * 105];\nint cnt[105];\nint main(){\n  ios_base::sync_with_stdio(0);cin.tie(0);\n  int n, M;\n  cin >> n >> M;\n  for(int i = 0;i < n; i++)\n    cin >> t[i];\n\n  for(int i = 0; i < n; i++){\n    int curCnt = 0;\n    int curSum=0;\n    for(int j =1; j<=100;j++){\n      if(curSum+t[i]+cnt[j]*j>M){             \n        int lft = M - curSum - t[i];\n        curCnt+=(lft/j);\n        break;\n      } else {\n        curCnt+=cnt[j];\n        curSum+=cnt[j]*j;\n      }\n    }\n    cout <<i-curCnt<<\" \\n\"[i+1==n];\n    cnt[t[i]]++;\n  }\n\n\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "greedy",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C2. Exam in BerSU  hard version .json",
    "editorial_link": "https://codeforces.com//blog/entry/67829",
    "editorial": "Note that for each -th student. It brings us to the idea that for each\r\nstudent we only need to know number of students, who are before current\r\nstudent and whose duration of passing the exam is exactly , for all from\r\nto .Letâs use as array of number student, whose duration of passing the\r\nexam is exactly . Initially for all from to .For each student we can\r\nprecalculate sum of all durations of students before current. Now we can\r\niterate all students from -st to -th. Letâs walk by from to . Initially\r\nthe answer for -th student is . If , letâs and . If , it means that is\r\nthe answer, but it might be not minimal answer. So, the answer is\r\n",
    "hint": []
}