{
    "link": "https://codeforces.com//contest/1163/problem/D",
    "problemId": "341952",
    "problem_idx": "D",
    "shortId": "1163D",
    "contest_number": "1163",
    "problem_submissions": {
        "C2": [
            66047932,
            53928733,
            53917739,
            53916320,
            53927440,
            53917053,
            53921940,
            53917741,
            53917113,
            53917536,
            53916492,
            53922064,
            53918906,
            53917646,
            53928915,
            53916500,
            53917339,
            53918100,
            53918744,
            53917518,
            53919810
        ],
        "C1": [
            66047912,
            53928680,
            53917729,
            53916398,
            53927499,
            53917123,
            53921828,
            53917840,
            53916975,
            53916501,
            53916551,
            53921864,
            53918990,
            53917581,
            53920027,
            53916455,
            53917420,
            53918173,
            53918994,
            53917678,
            53919432
        ],
        "B2": [
            66047900,
            53920376,
            53914135,
            53913146,
            53913090,
            53913301,
            53918925,
            53912937,
            53914221,
            53912878,
            53912457,
            53914593,
            53913074,
            53922853,
            53913811,
            53913679,
            53912800,
            53914163,
            53913157,
            53913627,
            53916315
        ],
        "B1": [
            66047874,
            53920441,
            53914184,
            53913224,
            53913218,
            53913362,
            53918852,
            53913014,
            53914129,
            53912791,
            53912577,
            53914508,
            53913299,
            53914871,
            53913903,
            53913625,
            53912899,
            53914084,
            53913246,
            53913821,
            53916410
        ],
        "E": [
            53956983,
            53917883,
            53924812,
            53927353,
            53925644,
            53925684,
            53938288,
            53938253
        ],
        "D": [
            53956962,
            53912001,
            53921113,
            53918916,
            53915736,
            53919859,
            53913955,
            53921659,
            53920805,
            53920009,
            53923016,
            53918711,
            53920953,
            53917042,
            53924906,
            53924050,
            53923576,
            53920981,
            53945253,
            53925390,
            53922597
        ],
        "A": [
            53956941,
            53913969,
            53910517,
            53910338,
            53909903,
            53909816,
            53916249,
            53910013,
            53910841,
            53909880,
            54028459,
            53912757,
            53911710,
            53909900,
            53909929,
            53910371,
            53909489,
            53909450,
            53909565,
            53911288,
            53909949,
            53909884
        ]
    },
    "name": "D. Mysterious Code",
    "statement": "During a normal walk in the forest, Katie has stumbled upon a mysterious\r\ncode! However, the mysterious code had some characters unreadable. She\r\nhas written down this code as a string c consisting of lowercase English\r\ncharacters and asterisks (\"\"), where each of the asterisks denotes an\r\nunreadable character. Excited with her discovery, Katie has decided to\r\nrecover the unreadable characters by replacing each asterisk with\r\narbitrary lowercase English letter (different asterisks might be\r\nreplaced with different letters).Katie has a favorite string s and a\r\nnot-so-favorite string t and she would love to recover the mysterious\r\ncode so that it has as many occurrences of s as possible and as little\r\noccurrences of t as possible. Formally, let\u2019s denote f(x, y) as the\r\nnumber of occurrences of y in x (for example, f(aababa, ab) = 2). Katie\r\nwants to recover the code c\u2019 conforming to the original c, such that\r\nf(c\u2019, s) - f(c\u2019, t) is largest possible. However, Katie is not very good\r\nat recovering codes in general, so she would like you to help her out.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nconst int ML = 1005, MN = 105, Sig = 26;\nconst int nInf = 0xc0c0c0c0;\n\nint N;\nchar C[ML], S1[MN], S2[MN];\n\nint ch[MN][Sig], fail[MN], sum[MN], cnt;\n\ninline void Insert(char *s, int v) {\n\tint now = 0;\n\tfor (; *s; ++s) {\n\t\tif (!ch[now][*s - 'a']) ch[now][*s - 'a'] = ++cnt;\n\t\tnow = ch[now][*s - 'a'];\n\t} sum[now] += v;\n}\n\nint que[MN], l, r;\nvoid BuildAC() {\n\tfail[0] = -1;\n\tque[l = r = 1] = 0;\n\twhile (l <= r) {\n\t\tint u = que[l++];\n\t\tfor (int i = 0; i < Sig; ++i) {\n\t\t\tif (ch[u][i]) {\n\t\t\t\tif (~fail[u]) fail[ch[u][i]] = ch[fail[u]][i];\n\t\t\t\tque[++r] = ch[u][i];\n\t\t\t}\n\t\t\telse if (~fail[u]) ch[u][i] = ch[fail[u]][i];\n\t\t}\n\t}\n\tfor (int i = 2; i <= r; ++i)\n\t\tsum[que[i]] += sum[fail[que[i]]];\n}\n\nint f[ML][MN];\n\nint main() {\n\tscanf(\"%s%s%s\", C, S1, S2), N = strlen(C);\n\tInsert(S1, 1);\n\tInsert(S2, -1);\n\tBuildAC();\n\tmemset(f, 0xc0, sizeof f);\n\tf[0][0] = 0;\n\tfor (int i = 0; i < N; ++i) {\n\t\tfor (int j = 0; j <= cnt; ++j) {\n\t\t\tif (f[i][j] == nInf) continue;\n\t\t\tfor (int k = 0; k < Sig; ++k) {\n\t\t\t\tif (C[i] != '*' && C[i] != k + 'a') continue;\n\t\t\t\tint nx = ch[j][k];\n\t\t\t\tf[i + 1][nx] = std::max(f[i + 1][nx], f[i][j] + sum[nx]);\n\t\t\t}\n\t\t}\n\t}\n\tint Ans = nInf;\n\tfor (int j = 0; j <= cnt; ++j) Ans = std::max(Ans, f[N][j]);\n\tprintf(\"%d\\n\", Ans);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "strings"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Mysterious Code.json",
    "editorial_link": "https://codeforces.com/blog/entry/66943",
    "editorial": "Firstly, we will find the maximal value of via dynamic programming.\r\nDenote \u00e2\u0080\u0099dp[i][ks][kt]\u00e2\u0080\u0099 as the maximal value of the said value when\r\nreplacing the first -th character of , and the KMP state for the\r\nreplaced sub-code to be and . The maximal value of for the whole code\r\nwill lie among all end states for all values of and .Complexity: .\r\n"
}