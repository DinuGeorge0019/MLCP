{
    "link": "https://codeforces.com//contest/1084/problem/A",
    "problemId": "268415",
    "problem_idx": "A",
    "shortId": "1084A",
    "contest_number": "1084",
    "problem_submissions": {
        "E": [
            46871140,
            46872149,
            46875669,
            46875724,
            46874048,
            46872086,
            46872648,
            46877520,
            46878278,
            46874461,
            46878594,
            46878417,
            46876583,
            46878192,
            46874895,
            46876700,
            46877996,
            46876441,
            46873571,
            46873367
        ],
        "D": [
            46865692,
            46866251,
            46867303,
            46864932,
            46866831,
            46870175,
            46871027,
            46867359,
            46864028,
            46867931,
            46867474,
            46868146,
            46871839,
            46871054,
            46866346,
            46870635,
            46870859,
            46868272,
            46870701,
            46867072
        ],
        "C": [
            46862188,
            46862548,
            46862310,
            46864314,
            46859780,
            46865533,
            46863590,
            46862823,
            46859756,
            46864914,
            46865680,
            46864482,
            46863554,
            46862055,
            46865588,
            46867219,
            46865294,
            46862436,
            46861206,
            46862144
        ],
        "B": [
            46860593,
            46860115,
            46860565,
            46859288,
            46868191,
            46861225,
            46861292,
            46860596,
            46860732,
            46863777,
            46862311,
            46860318,
            46861810,
            46860088,
            46859027,
            46862964,
            46862212,
            46860437,
            46875865,
            46882320
        ],
        "A": [
            46860045,
            46859437,
            46859480,
            46861802,
            46870580,
            46859672,
            46860117,
            46859399,
            46861955,
            46862963,
            46861395,
            46859357,
            46859117,
            46859254,
            46859455,
            46860467,
            46859673,
            46859251,
            46859051,
            46859322
        ]
    },
    "name": "A. The Fair Nut and Elevator",
    "statement": "The Fair Nut lives in n story house. a_i people live on the i-th floor\r\nof the house. Every person uses elevator twice a day: to get from the\r\nfloor where he/she lives to the ground (first) floor and to get from the\r\nfirst floor to the floor where he/she lives, when he/she comes back home\r\nin the evening. It was decided that elevator, when it is not used, will\r\nstay on the x-th floor, but x hasn\u2019t been chosen yet. When a person\r\nneeds to get from floor a to floor b, elevator follows the simple\r\nalgorithm: Moves from the x-th floor (initially it stays on the x-th\r\nfloor) to the a-th and takes the passenger. Moves from the a-th floor to\r\nthe b-th floor and lets out the passenger (if a equals b, elevator just\r\nopens and closes the doors, comes to the floor from the x-th floor).\r\nMoves from the b-th floor back to the x-th. The elevator never\r\ntransposes more than one person and always goes back to the floor x\r\nbefore transposing a next passenger. The elevator spends one unit of\r\nelectricity to move between neighboring floors. So moving from the a-th\r\nfloor to the b-th floor requires |a - b| units of electricity.Your task\r\nis to help Nut to find the minimum number of electricity units, that it\r\nwould be enough for one day, by choosing an optimal the x-th floor.\r\nDon\u2019t forget than elevator initially stays on the x-th floor.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n\ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<ld,ld> pd;\n\ntypedef vector<int> vi;\ntypedef vector<ld> vd;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\ntypedef vector<pl> vpl;\ntypedef vector<cd> vcd;\n\ntemplate <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;\n\n#define FOR(i, a, b) for (int i=a; i<(b); i++)\n#define F0R(i, a) for (int i=0; i<(a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n\nconst int MOD = 1000000007;\nconst ll INF = 1e18;\nconst int MX = 100001;\n\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n\n    int n; cin >> n;\n    int data[n]; F0R(i, n) cin >> data[i];\n\n    int best = 1000000000;\n    F0R(i, n) {\n        int curTotal = 0;\n        F0R(j, n) {\n            int perPerson = i + j + abs(i-j);\n            curTotal += perPerson * data[j] * 2;\n        }\n        best = min(best, curTotal);\n    }\n\n    cout << best << endl;\n\n    return 0;\n}\n\n// read the question correctly (ll vs int)\n// template by bqi343"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. The Fair Nut and Elevator.json",
    "editorial_link": "https://codeforces.com/blog/entry/63753?locale=en",
    "editorial": "For each request of passenger who lives on the -th floor to get to the\r\nfirst floor, we need energy, because in this case lift moves from the\r\n-th floor to the -th, then from the -th to the first, then from the\r\nfirst to the -th. So sum is and it equals . if request is to get from\r\nthe first to the -th floor, number of energy is the same. So the optimal\r\nanswer can be acheived be choosing the first floor as the -th.\r\n"
}