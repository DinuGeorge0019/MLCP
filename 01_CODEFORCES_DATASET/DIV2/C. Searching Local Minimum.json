{
    "link": "https://codeforces.com//contest/1480/problem/C",
    "problemId": "889620",
    "problem_idx": "C",
    "shortId": "1480C",
    "contest_number": "1480",
    "problem_submissions": {
        "E": [
            106815202,
            106829295,
            106831975,
            106809004,
            106829806,
            106819321
        ],
        "A": [
            106788901,
            106763609,
            106753484,
            106750112,
            106751527,
            106754769,
            106750125,
            106749992,
            106750591,
            106751832,
            106750843,
            106752181,
            106751591,
            106750114,
            106751859,
            106763776,
            106750109,
            106751576,
            106750047
        ],
        "B": [
            106787623,
            106771665,
            106761993,
            106764148,
            106756896,
            106759373,
            106760371,
            106757851,
            106763699,
            106762465,
            106762683,
            106765834,
            106771235,
            106765823,
            106763977,
            106769634,
            106760777,
            106760996,
            106762894
        ],
        "D2": [
            106784450,
            106807928,
            106805609,
            106826801,
            106798277,
            106796852,
            106798333,
            106810992,
            106800784,
            106809989,
            106808304,
            106811925,
            106820358,
            106815498,
            106828841,
            106811617,
            106816566,
            106820373,
            106831701
        ],
        "D1": [
            106783553,
            106789621,
            106794420,
            106828218,
            106785923,
            106787471,
            106782777,
            106790234,
            106791782,
            106791560,
            106802581,
            106787920,
            106797964,
            106789713,
            106805344,
            106803882,
            106796851,
            106808232,
            106798013
        ],
        "C": [
            106763339,
            106759660,
            106769859,
            106771866,
            106840559,
            106871120,
            106772068,
            106767886,
            106771470,
            106778796,
            106778516,
            106806146,
            106779019,
            106800993,
            106782589,
            106787042,
            106778247,
            106779906,
            106777631
        ]
    },
    "name": "C. Searching Local Minimum",
    "statement": ".Homer likes arrays a lot and he wants to play a game with you. Homer\r\nhas hidden from you a permutation a_1, a_2,\r\ndots, a_n of integers 1 to n. You are asked to find any index k (1\r\nleq k\r\nleq n) which is a local minimum. For an array a_1, a_2,\r\ndots, a_n, an index i (1\r\nleq i\r\nleq n) is said to be a if a_i <\r\nmin\r\n{a_{i-1},a_{i+1}\r\n}, where a_0 = a_{n+1} = +\r\ninfty. An array is said to be a permutation of integers 1 to n, if it\r\ncontains all integers from 1 to n exactly once.Initially, you are only\r\ngiven the value of n without any other information about this\r\npermutation.At each interactive step, you are allowed to choose any i (1\r\nleq i\r\nleq n) and make a query with it. As a response, you will be given the\r\nvalue of a_i. You are asked to find any index k which is a local minimum\r\n.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\n#define Fast_IO ios::sync_with_stdio(false);\n#define DEBUG fprintf(stderr,\"Running on Line %d in Function %s\\n\",__LINE__,__FUNCTION__)\nmt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());\n#define fir first\n#define sec second\n#define mod 998244353\n#define ll long long\n#define inf 0x3f3f3f3f\n#define INF 0x3f3f3f3f3f3f3f3f\ninline int read()\n{\n\tchar ch=getchar(); int nega=1; while(!isdigit(ch)) {if(ch=='-') nega=-1; ch=getchar();}\n\tint ans=0; while(isdigit(ch)) {ans=ans*10+ch-48;ch=getchar();}\n\tif(nega==-1) return -ans;\n\treturn ans;\n}\ntypedef pair<int,int> pii;\nvoid print(vector<int> x){for(int i=0;i<(int)x.size();i++) printf(\"%d%c\",x[i],\" \\n\"[i==(int)x.size()-1]);}\n#define N 100005\nint a[N];\nint query(int x)\n{\n\tcout<<\"? \"<<x<<endl;\n\treturn read();\n}\nint b[N],cnt;\nsigned main()\n{\n\tint n=read();\n\tif(n==1)\n\t{\n\t\tcout<<\"! 1\"<<endl;\n\t\treturn 0;\n\t}\n\tint lim=min(50,n);\n\ta[0]=a[n+1]=inf;\n\tfor(int i=1;i<=lim;i++)\n\t{\n\t\tint pos=rnd()%n+1;\n\t\twhile(a[pos]) pos=rnd()%n+1;\n\t\ta[pos]=query(pos);\n\t\tb[i]=pos;\n\t}\n\tb[++lim]=0,b[++lim]=n+1;\n\tsort(b+1,b+lim+1);\n\tfor(int i=1;i<=lim;i++)\n\t{\n\t\tfor(int j=i+1;j<=lim;j++)\n\t\t{\n\t\t\tfor(int k=j+1;k<=lim;k++)\n\t\t\t{\n\t\t\t\tint p1=b[i],p2=b[j],p3=b[k];\n\t\t\t\tif(a[p1]>a[p2]&&a[p2]<a[p3])\n\t\t\t\t{\n\t\t\t\t\tint l=p1,r=p3,t=0;\n\t\t\t\t\twhile(r-l>2)\n\t\t\t\t\t{\n//\t\t\t\t\t\tprintf(\"%d %d %d\\n\",l,p2,r);\n\t\t\t\t\t\tif(t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(p2-l==1) t^=1;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint mid=(l+p2)/2;\n\t\t\t\t\t\t\t\ta[mid]=query(mid);\n\t\t\t\t\t\t\t\tif(a[mid]>a[p2]) l=mid;\n\t\t\t\t\t\t\t\telse r=p2,p2=mid;\n\t\t\t\t\t\t\t\tt^=1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(r-p2==1) t^=1;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint mid=(r+p2)/2;\n\t\t\t\t\t\t\t\ta[mid]=query(mid);\n\t\t\t\t\t\t\t\tif(a[mid]>a[p2]) r=mid;\n\t\t\t\t\t\t\t\telse l=p2,p2=mid;\n\t\t\t\t\t\t\t\tt^=1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcout<<\"! \"<<p2<<endl;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "interactive",
        "math",
        "ternary search"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Searching Local Minimum.json",
    "editorial_link": "https://codeforces.com//blog/entry/87598",
    "editorial": "We maintain by binary search a range [l,r] which has a local minimum. Moreover, we assume that al?1>al and ar<ar+1. Initially, [l,r]=[1,n].\n\nIn each iteration, let m be the midpoint of l and r.\n\nCase 1. If am<am+1, then the range becomes [l,m].\n\nCase 2. If am>am+1, then the range becomes [m+1,r].\n\nWhen l=r, we have found a local minimum al.\n\nThe number of queries to ai is at most 2?log2n??34<100."
}