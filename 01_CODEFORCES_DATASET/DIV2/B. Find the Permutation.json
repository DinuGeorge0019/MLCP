{
    "link": "https://codeforces.com//contest/2056/problem/B",
    "problemId": "3150793",
    "problem_idx": "B",
    "shortId": "2056B",
    "contest_number": "2056",
    "problem_submissions": {
        "F2": [
            301545587,
            301509040,
            301738450,
            302033567
        ],
        "F1": [
            301461815,
            301455964,
            301458356,
            301426872,
            301434246,
            302031432,
            302030623,
            301580078,
            301600084
        ],
        "E": [
            301439440,
            301447920,
            301443059,
            301433627,
            301428331,
            301444669,
            301439558,
            301439957,
            301443503,
            301447455,
            301451147,
            301446991,
            301456228,
            301452444,
            301427254,
            301456788,
            301448385
        ],
        "D": [
            301411463,
            301430952,
            301426584,
            301413553,
            301414046,
            301415062,
            301415941,
            301414692,
            301446695,
            301418999,
            301418932,
            301422889,
            301412134,
            301417642,
            301411530,
            301417000,
            301444048,
            301424366,
            301426240
        ],
        "C": [
            301399544,
            301411500,
            301416896,
            301418700,
            301401301,
            301404995,
            301400708,
            301399472,
            301417939,
            301403985,
            301402887,
            301398665,
            301399127,
            301403882,
            301404504,
            301408969,
            301407435,
            301401039,
            301402939
        ],
        "B": [
            301393848,
            301392518,
            301400501,
            301395217,
            301391544,
            301398396,
            301394970,
            301396057,
            301401319,
            301397018,
            301398125,
            301391015,
            301394435,
            301395913,
            301394898,
            301392345,
            301400120,
            301395871,
            301401973
        ],
        "A": [
            301388610,
            301388749,
            301390918,
            301392589,
            301387805,
            301391122,
            301388287,
            301390050,
            301390421,
            301388003,
            301389658,
            301387952,
            301388733,
            301389417,
            301387733,
            301388087,
            301390776,
            301389692,
            301388580
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/138487",
    "editorial": "SolutionConsider two elements . Suppose their positions in are and\r\ncorrespondigly.How can we determine if ? If and , we will have .\r\nOtherwise, and , so .So if , we know that , otherwise .That way we can\r\ndetermine for each pair of elements which one of them should appear\r\nearlier in the permutation. Notice that this is just a definition of a\r\ncomparator, which proves that the permutation is indeed unique. We can\r\nfind it by sorting with that comparator.\r\n",
    "name": "B. Find the Permutation",
    "statement": "You are given an undirected graph with n vertices, labeled from 1 to n.\r\nThis graph encodes a hidden permutation^{\r\ntext{ }} p of size n. The graph is constructed as follows: For every\r\npair of integers 1\r\nle i < j\r\nle n, an undirected edge is added between vertex p_i and vertex p_j if\r\nand only if p_i < p_j. Note that the edge between vertices i and j, but\r\nbetween the vertices of their respective elements. Refer to the notes\r\nsection for better understanding. Your task is to reconstruct and output\r\nthe permutation p. It can be proven that permutation p can be uniquely\r\ndetermined.^{\r\ntext{ }}A permutation of length n is an array consisting of n distinct\r\nintegers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray), and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray).\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define N 1005#define M 505#define LL long long#define inf 21474836477777777ll#define LD long double#define eps 1e-6using namespace std;int n,m,a[N][N],ans[N];char s[N];const int p=998244353;// inline void add(int x,int y){son[++tot]=y,nxt[tot]=fir[x],fir[x]=tot;} // inline int P(int x,int y){int z=1;while(y){if(y&1) z=1ll*z*x%p;y>>=1,x=1ll*x*x%p;} return z;}// inline void A(int &x,int y){x+=y,(x>=p)&&(x-=p,0),(x<0)&&(x+=p,0);}// inline void mul(int &x,int y){x=1ll*x*y%p;}inline void solve(int tc){    cin>>n;for(int i=1;i<=n;ans[i]=0,i++){cin>>(s+1);for(int j=1;j<=n;j++) a[i][j]=s[j]-'0';}    for(int i=1;i<=n;i++){        int sum=0;for(int j=i+1;j<=n;j++) if(!a[i][j]) sum++;        for(int j=1;j<=n;j++) if(!ans[j]){if(!sum) ans[j]=i;sum--;}    }    for(int i=1;i<=n;i++) cout<<ans[i]<<' ';cout<<'\\n';}int main(){    // freopen(\"data.in\",\"r\",stdin);    ios::sync_with_stdio(false);    cin.tie(0); cout.tie(0);    int tc=1;    cin>>tc;    while(tc--) solve(tc);    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dfs and similar",
        "graphs",
        "implementation",
        "sortings"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Find the Permutation.json",
    "hint": [
        "Hint 1 \"It can be proven that permutation can be uniquely determined\"",
        "Hint 2 This means that there is an order of elements. How to determine whether should be earlier in that order than ?"
    ]
}