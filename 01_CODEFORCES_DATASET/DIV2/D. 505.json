{"link": "https://codeforces.com//contest/1391/problem/D", "problemId": "694518", "problem_idx": "D", "shortId": "1391D", "contest_number": "1391", "problem_submissions": {"E": [89439040, 89441228, 89441499, 89447005, 89455919, 89448964, 89450402, 89450314, 89451586, 89450891, 89451401, 89477045, 89456884, 89551553, 89455517, 134448846], "D": [89432700, 89481054, 89433875, 89429170, 89437115, 89436985, 89437929, 89442877, 89440195, 89442618, 89441518, 89427031, 89429794, 89432423, 89430800, 89431789, 89433956, 89433503, 89434575, 89434257, 89434975], "C": [89426750, 89420513, 89434144, 89429566, 89425760, 89427285, 89429714, 89432343, 89427996, 89426533, 89417430, 89420352, 89419759, 89418803, 89424047, 89424699, 89425111, 89422696, 89425810, 89422948], "B": [89410454, 89413605, 89410503, 89414269, 89414715, 89415761, 89415369, 89418138, 89419682, 89414189, 89411200, 89409436, 89412062, 89413310, 89415929, 89412884, 89413208, 89414045, 89413779, 89419197], "A": [89406971, 89407448, 89407070, 89407023, 89410266, 89408876, 89408557, 89413085, 89412622, 89407815, 89407257, 89406922, 89406883, 89407981, 89408687, 89407102, 89407091, 89409131, 89415228, 89408988]}, "name": "D. 505", "statement": "A binary matrix is called if every length square sub-matrix has an\r\nnumber of ones. Given a binary matrix a consisting of n rows and m\r\ncolumns, determine the minimum number of cells you need to change to\r\nmake it good, or report that there is no way to make it good at all. All\r\nthe terms above have their usual meanings refer to the Notes section for\r\ntheir formal definitions.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int k_N = 1e6 + 3;\n\nint n, m;\npair<int, bool> dp[k_N][1 << 3];\nstring s[3];\n\nbool check(int mask, int new_mask){\n    int cnt = 0;\n    for(int i = 0; i < 2; ++i){\n        cnt += (bool)(mask & (1 << i));\n        cnt += (bool)(new_mask & (1 << i));\n    }\n\n    if(cnt % 2 == 0) return false;\n    if(n == 2) return true;\n\n    cnt = 0;\n    for(int i = 1; i < 3; ++i){\n        cnt += (bool)(mask & (1 << i));\n        cnt += (bool)(new_mask & (1 << i));\n    }\n\n    return cnt & 1;\n}\n\nint solve(int pos, int mask){\n    if(pos == m) return 0;\n\n    auto &[ans, solved] = dp[pos][mask];\n    if(solved) return ans;\n\n    solved = true, ans = k_N;\n\n    for(int new_mask = 0; new_mask < (1 << n); ++new_mask){\n        if(pos == 0 || check(mask, new_mask)){\n            int add = 0;\n            for(int i = 0; i < n; ++i){\n                int x = (bool)(new_mask & (1 << i));\n                if(x != s[i][pos] - '0') add++;\n            }\n            ans = min(ans, solve(pos + 1, new_mask) + add);\n        }\n    }\n\n    return ans;\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    cin >> n >> m;\n\n    if(n >= 4){\n        cout << \"-1\\n\";\n        return 0;\n    }\n    if(n == 1){\n        cout << \"0\\n\";\n        return 0;\n    }\n\n    for(int i = 0; i < n; ++i)\n        cin >> s[i];\n\n    int ans = k_N;\n    for(int i = 0; i < (1 << n); ++i)\n        ans = min(ans, solve(0, i));\n\n    cout << ans << \"\\n\";\n}"], "input": "", "output": "", "tags": ["bitmasks", "brute force", "constructive algorithms", "dp", "greedy", "implementation"], "dificulty": "2000", "interactive": false}