{"link": "https://codeforces.com//contest/839/problem/E", "problemId": "117996", "problem_idx": "E", "shortId": "839E", "contest_number": "839", "problem_submissions": {"E": [29403824, 29409457, 29402914, 29408405, 29406327, 29410552, 29409014, 29406788, 29421538], "D": [29392016, 29388512, 29406607, 29404686, 29398161, 29392526, 29399719, 29390719, 29400075, 29403406, 29402721, 29399071, 29398521, 29424440, 29406196, 29459720, 29400759, 29408213, 29406118, 29386786, 29408520], "B": [29387404, 29386986, 29393659, 29399860, 29418355, 29403115, 29393756, 29389053, 29386717, 29387372, 29401456, 29401071, 29391332, 29403433, 29397466, 29394616, 29424848, 29400078], "C": [29383480, 29380903, 29399289, 29392182, 29388563, 29393777, 29384539, 29382506, 29387310, 29394730, 29389857, 29391781, 29393376, 29394828, 29384424, 29392243, 29387122, 29397138, 29382174, 29387027], "A": [29379625, 29382369, 29383241, 29383804, 29379670, 29380225, 29381733, 29394107, 29380558, 29383606, 29380710, 29381324, 29380863, 29382906, 29380087, 29384719, 29381302, 29383997, 29392184, 29388770]}, "name": "E. Mother of Dragons", "statement": "There are castles in the Lannister\u2019s Kingdom and some walls connect two\r\ncastles, no two castles are connected by more than one wall, no wall\r\nconnects a castle to itself. Sir Jaime Lannister has discovered that\r\nDaenerys Targaryen is going to attack his kingdom soon. Therefore he\r\nwants to defend his kingdom. He has liters of a strange liquid. He wants\r\nto distribute that liquid among the castles, so each castle may contain\r\nsome liquid (possibly zero or non-integer number of liters). After that\r\nthe stability of a wall is defined as follows: if the wall connects two\r\ncastles and , and they contain and liters of that liquid, respectively,\r\nthen the strength of that wall is .Your task is to print the maximum\r\npossible sum of stabilities of the walls that Sir Jaime Lannister can\r\nachieve.\r\n", "solutions": ["#include<bits/stdc++.h>\n#define FOR(i,s,e) for(int i=(s);i<=(e);i++)\n#define FORD(i,s,e) for(int i=(s);i>=(e);i--)\n#define ALL(k) (k).begin(),(k).end()\n#define e1 first\n#define e2 second\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long LLU;\ntypedef long double LD;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\ntypedef vector<int> VI;\nconst bool print=false;\n\nconst int N=(1<<21)+7;\nint d=20;\n\nint n, k;\n\nvector <int> graf[N];\n\nint ok;\n\nint naj=1;\n\nlong long mas[N];\n\nint dp[N];\n\nint main()\n{\n    scanf(\"%d%d\", &n, &k);\n    for (int i=0; i<n; i++)\n    {\n        mas[i]|=(1LL<<i);\n        for (int j=0; j<n; j++)\n        {\n            int x;\n            scanf(\"%d\", &x);\n            if (x)\n            {\n                ok=1;\n                mas[i]|=(1LL<<j);\n            }\n        }\n    }\n    if (!ok)\n    {\n        printf(\"%.9lf\\n\", 0.0);\n        return 0;\n    }\n    d=min(d, n);\n    for (int i=1; i<(1<<d); i++)\n    {\n        int czy=1;\n        long long wsz=(1LL<<n)-1;\n        for (int j=0; j<d && czy; j++)\n        {\n            if ((i&(1<<j)) && (mas[j]&i)!=i)\n                czy=0;\n            if (i&(1<<j))\n                wsz&=mas[j];\n        }\n        if (czy)\n            dp[wsz>>d]=max(dp[wsz>>d], __builtin_popcount(i));\n    }\n    for (int i=(1<<(n-d))-1; i>=0; i--)\n    {\n        int czy=1;\n        for (int j=0; j<(n-d); j++)\n        {\n            if ((i&(1<<j)) && ((mas[d+j]>>d)&i)!=i)\n                czy=0;\n            if (i&(1<<j))\n                dp[i^(1<<j)]=max(dp[i^(1<<j)], dp[i]);\n        }\n        if (czy)\n            naj=max(naj, __builtin_popcount(i)+dp[i]);\n    }\n    printf(\"%.9lf\\n\", k*k*(naj-1.0)/(2.0*naj));\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "graphs", "math", "meet-in-the-middle"], "dificulty": "2700", "interactive": false}