{
    "link": "https://codeforces.com//contest/456/problem/B",
    "problemId": "12123",
    "problem_idx": "B",
    "shortId": "456B",
    "contest_number": "456",
    "problem_submissions": {
        "D": [
            7394195,
            7387334,
            7388194,
            7405631,
            7391438,
            7570888,
            7392150,
            7392407,
            7393420,
            7393011,
            7390869,
            7412347,
            7393749,
            7391710,
            7395518,
            7389615
        ],
        "E": [
            7391057,
            7389574,
            7398919,
            7392485,
            7391618,
            7395429,
            7414900,
            7394901,
            7394000,
            7407156,
            7407099,
            7394565
        ],
        "C": [
            7384935,
            7379979,
            7382777,
            7382760,
            7382268,
            7385285,
            7383719,
            7382555,
            7385127,
            7383651,
            7381928,
            7379735,
            7383336,
            7384288,
            7385361,
            7383584,
            7385744,
            7383852,
            7380739
        ],
        "A": [
            7381212,
            7377201,
            7377560,
            7377220,
            7377312,
            7379694,
            7377445,
            7377742,
            7377341,
            7377480,
            7377279,
            7382703,
            7377573,
            7378438,
            7377375,
            7377583,
            7379362,
            7377853,
            7384952
        ],
        "B": [
            7380090,
            7378182,
            7380801,
            7379345,
            7379559,
            7382230,
            7379187,
            7379755,
            7379683,
            7379290,
            7381183,
            7380009,
            7380898,
            7380752,
            7380004,
            7381407,
            7380326,
            7387312
        ]
    },
    "name": "B. Fedya and Maths",
    "statement": "Fedya studies in a gymnasium. Fedya’s maths hometask is to calculate the\r\nfollowing expression:for given value of . Fedya managed to complete the\r\ntask. Can you? Note that given number can be extremely large (e.g. it\r\ncan exceed any integer type of your programming language).\r\n",
    "solutions": [
        "#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <queue>\n#include <map>\n#include <set>\n#include <iostream>\n\nusing namespace std;\n\nchar A[100005];\nint res=0, mide, es;\n\nint main()\n{\n    scanf(\"%s\",A);\n    for(mide=0; A[mide]!='\\0'; mide++);\n    mide-=2;\n    for(int i=1; i<=2; i++){\n        if(mide>=0){\n            es*=10;\n            es+=A[mide]-'0';\n        }\n        ++mide;\n    }\n    if(es%4==0){\n        res+=4;\n    }\n    else if(es%4==1){\n        res+=0;\n    }\n    else if(es%4==2){\n        res+=0;\n    }\n    else if(es%4==3){\n        res+=0;\n    }\n    printf(\"%d\\n\",res);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "number theory"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Fedya and Maths.json",
    "editorial_link": "https://codeforces.com//blog/entry/13336",
    "editorial": " In this task you need to calculate formula\nthat given in the statement, but itâs hard to calculate it with the\nnaive way. But we can transform our formula to this: This formula is\nright because is prime number and itâs coprime with , , , . To solve\nthis task we should be able to calculate remainder of division by and\ncalculate formula for small . Asymptotics . There is also another\nsolution. It uses a fast exponentiation, but not binary exponentiation.\nThe idea of this exponentiation is the same as that of the binary\nexponentiation. Let we want to fast calculate . Algorithm is very\nsimple. Let process digits of n moving from end to begin. Let current\nresult and , number of the currently processed digit (digits are\nnumbered from the end. Used 0-indexation). During processing of digits,\nwe must update result: , -th digit of the number (digits are numbered\nfrom the end). Asymptotics .\n",
    "hint": []
}