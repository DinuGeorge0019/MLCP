{
    "link": "https://codeforces.com//contest/1484/problem/B",
    "problemId": "931265",
    "problem_idx": "B",
    "shortId": "1484B",
    "contest_number": "1484",
    "problem_submissions": {
        "F": [
            110657532,
            110661405,
            110668413,
            110665063,
            110667584,
            110693226,
            110689740,
            110699242,
            110689519,
            110729936
        ],
        "E": [
            110652520,
            110652573,
            110656142,
            110659865,
            110659655,
            110638421,
            110657125,
            110656123,
            110656364,
            110659863,
            110649695,
            110648134,
            110661585,
            110638998,
            110667069,
            110662656,
            110665042,
            110662940,
            110667246,
            110664847
        ],
        "D": [
            110648415,
            110645978,
            110649799,
            110651144,
            110649241,
            110642542,
            110646537,
            110651979,
            110643535,
            110649770,
            110657613,
            110654803,
            110657052,
            110642182,
            110653908,
            110653309,
            110651762,
            110658162,
            110653592,
            110654689
        ],
        "C": [
            110640873,
            110642187,
            110633376,
            110636572,
            110644279,
            110636058,
            110637281,
            110637639,
            110639537,
            110639114,
            110634672,
            110661474,
            110641726,
            110639210,
            110640003,
            110642952,
            110644966,
            110648405,
            110643573,
            110647774
        ],
        "B": [
            110632955,
            110638515,
            110644328,
            110642323,
            110639199,
            110633637,
            110635087,
            110632899,
            110632555,
            110636089,
            110632943,
            110635814,
            110637169,
            110730778,
            110636805,
            110637796,
            110637626,
            110638325,
            110638006,
            110641086
        ],
        "A": [
            110627328,
            110628878,
            110637469,
            110632147,
            110630333,
            110627835,
            110626002,
            110626585,
            110625791,
            110627648,
            110626340,
            110627768,
            110629720,
            110626163,
            110628247,
            110631925,
            110627992,
            110627111,
            110625876,
            110626130
        ]
    },
    "name": "B. Restore Modulo",
    "statement": "For the first place at the competition, Alex won many arrays of integers\r\nand was assured that these arrays are very expensive. After the award\r\nceremony Alex decided to sell them. There is a rule in arrays pawnshop:\r\nyou can sell array only if it can be compressed to a generator.This\r\ngenerator takes four non-negative numbers n, m, c, s. n and m must be\r\npositive, s non-negative and for c it must be true that 0\r\nleq c < m. The array a of length n is created according to the following\r\nrules: a_1 = s\r\nbmod m, here x\r\nbmod y denotes remainder of the division of x by y; a_i = (a_{i-1} + c)\r\nbmod m for all i such that 1 < i\r\nle n. For example, if n = 5, m = 7, c = 4, and s = 10, then a = [3, 0,\r\n4, 1, 5].Price of such an array is the value of m in this generator.Alex\r\nhas a question: how much money he can get for each of the arrays.\r\nPlease, help him to understand for every array whether there exist four\r\nnumbers n, m, c, s that generate this array. If yes, then maximize m.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define R register\n#define N 1000201\n\nint z,f,a[N],b[N];\n\ninline void solve(){\n\tz=-1,f=-1;\n\tR int n;\n\tscanf(\"%d\",&n);\n\tfor(R int i=1;i<=n;++i) scanf(\"%d\",&a[i]);\n\tfor(R int i=1;i<n;++i){\n\t\tR int qwq=a[i+1]-a[i];\n\t\tif(qwq>0){\n\t\t\tif(z==-1) z=qwq;\n\t\t\telse if(qwq!=z){\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\treturn ;\n\t\t\t}\n\t\t} else{\n\t\t\tqwq=-qwq;\n\t\t\tif(f==-1) f=qwq;\n\t\t\telse if(qwq!=f){\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1||z==-1) return (void)printf(\"0\\n\");\n\tR int m=z+f;\n\tb[1]=a[1];\n\tif(a[1]>=m){\n\t\tprintf(\"-1\\n\");\n\t\treturn;\n\t}\n\tfor(R int i=2;i<=n;++i){\n\t\tb[i]=(b[i-1]+z)%m;\n\t\tif(b[i]!=a[i]){\n\t\t\tprintf(\"-1\\n\");\n\t\t\treturn;\n\t\t}\n\t}\n\tprintf(\"%d %d\\n\",m,z);\n\t\n}\n\nint main(){\n\tR int T;\n\tstd::cin>>T;\n\twhile(T--)\n\t\tsolve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Restore Modulo.json",
    "editorial_link": "https://codeforces.com//blog/entry/88963",
    "editorial": "Handle the case of c=0\n separately. For this check whether for every i\n from 1?i<n\n there holds an equality arr[i]=arr[i+1]\n (or in other words, all numbers are the same). If this is true then the modulo can be arbitrarily large. Otherwise, if arr[i]=arr[i+1]\n holds for at least one i\n, then c\n must equal zero, but we already know that it's not the case, so the answer is ?1\n.\n\nOk, now c?0\n and no two consecutive numbers coincide. Note that x+c(modm)\n is either x+c\n or x?(m?c)\n. So all positive differences (between pairs of consecutive numbers) must be the same, as well as all negative differences. Otherwise the answer is ?1\n.\n\nIf there is no positive difference (or similarly if there is no negative difference) then the modulo can be arbitrarily large. Otherwise the modulo has to equal their sum c+(m?c)=m\n. After we find out m\n and c\n it only remains to check if they in fact generate our sequence."
}