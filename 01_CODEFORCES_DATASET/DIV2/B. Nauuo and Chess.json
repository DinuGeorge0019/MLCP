{
    "link": "https://codeforces.com//contest/1173/problem/B",
    "problemId": "355016",
    "problem_idx": "B",
    "shortId": "1173B",
    "contest_number": "1173",
    "problem_submissions": {
        "B": [
            55390180,
            55249364,
            55248813,
            55247081,
            55248572,
            55248319,
            55248049,
            55248085,
            55247784,
            55250606,
            55249875,
            55247888,
            55253438,
            55255965,
            55247147,
            55247479,
            55247401,
            55252892,
            55249644,
            55245503,
            55249304
        ],
        "A": [
            55390168,
            55244540,
            55242948,
            55243093,
            55244653,
            55243324,
            55244848,
            55243589,
            55244417,
            55250689,
            55243924,
            55243392,
            55251670,
            55243714,
            55243163,
            55243456,
            55243342,
            55251282,
            55247743,
            55247907,
            55243333
        ],
        "E2": [
            55264453,
            55265045,
            55329518,
            55304255
        ],
        "E1": [
            55264406,
            55262702,
            55259992,
            55263176,
            55264651,
            55262666,
            55266873,
            55264627,
            55264452,
            55266634,
            55266464,
            55265263,
            55264681,
            55280794
        ],
        "D": [
            55255531,
            55258124,
            55255281,
            55257012,
            55256681,
            55257269,
            55258420,
            55260440,
            55256109,
            55260509,
            55259549,
            55259968,
            55265550,
            55252742,
            55256814,
            55258411,
            55258273,
            55257931,
            55253830,
            55257656
        ],
        "C": [
            55252151,
            55255450,
            55254699,
            55254410,
            55253838,
            55254769,
            55255630,
            55254749,
            55258947,
            55256880,
            55254444,
            55257615,
            55254129,
            55257128,
            55254804,
            55253939,
            55250315,
            55254309,
            55260196,
            55254835
        ]
    },
    "name": "B. Nauuo and Chess",
    "statement": "Nauuo is a girl who loves playing chess.One day she invented a game by\r\nherself which needs n chess pieces to play on a m\r\ntimes m chessboard. The rows and columns are numbered from 1 to m. We\r\ndenote a cell on the intersection of the r-th row and c-th column as\r\n(r,c).The game\u2019s goal is to place n chess pieces numbered from 1 to n on\r\nthe chessboard, the i-th piece lies on (r_i,\r\n,c_i), while the following rule is satisfied: for all pairs of pieces i\r\nand j, |r_i-r_j|+|c_i-c_j|\r\nge|i-j|. Here |x| means the absolute value of x.However, Nauuo\r\ndiscovered that sometimes she couldn\u2019t find a solution because the\r\nchessboard was too small.She wants to find the chessboard on which she\r\ncan put n pieces according to the rules.She also wonders how to place\r\nthe pieces on such a chessboard. Can you help her?\r\n",
    "solutions": [
        "//2019.6.7 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define INF 0x3f3f3f3f3f3f3f\n#define eps 1e-10\n#define RG register\n #define gc getchar\n//inline char gc() {\n//    static char buf[100000],*p1,*p2;\n//    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n//}\ninline int read() {\n    res s=0,ch=gc();\n    while(ch<'0'||ch>'9')ch=gc();\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n    return s;\n}\n//inline int read() {\n//    res s=0,ch=gc(),w=1;\n//    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=gc();}\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s*w;\n//}\n//inline LL Read() {\n//    RG LL s=0;\n//    res ch=gc();\n//    while(ch<'0'||ch>'9')ch=gc();\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s;\n//}\n//inline LL Read() {\n//    RG LL s=0;\n//    res ch=gc(),w=1;\n//    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=gc();}\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s*w;\n//}\n//inline void swap(res &x,res &y) {\n//    x^=y^=x^=y;\n//}\n//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nnamespace MAIN {\n    int n;\n    inline void MAIN(){\n        n=read();\n        res m=1;\n        if(n==1){puts(\"1\");puts(\"1 1\");return;}\n        for(;(m-1)*2<(n-1);m++);\n        printf(\"%d\\n\",m);\n        res dx=1,dy=1;\n        for(res i=1;i<=n;i++){\n            printf(\"%d %d\\n\",dx,dy);\n            if(dy==m)dx++;\n            else dy++;\n        }\n    }\n}\nint main() {\n//    srand((unsigned)time(NULL));\n    // freopen(\"zao.in\",\"r\",stdin);\n    // freopen(\"std.out\",\"w\",stdout);\n    MAIN::MAIN();\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Nauuo and Chess.json",
    "editorial_link": "https://codeforces.com//blog/entry/67511",
    "editorial": "Tutorial Consider the chess pieces and . can be If we put the -th piece\r\non satisfying , it is a feasible plan, because .\r\n"
}