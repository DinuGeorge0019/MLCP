{
    "link": "https://codeforces.com//contest/1169/problem/E",
    "problemId": "349597",
    "problem_idx": "E",
    "shortId": "1169E",
    "contest_number": "1169",
    "problem_submissions": {
        "E": [
            54684403,
            54675804,
            54682359,
            54685449,
            54689566,
            54686198,
            54691604,
            54688678,
            54690724,
            54691237,
            54681393,
            54688847,
            54690654,
            54694731,
            55081389
        ],
        "D": [
            54680905,
            54683986,
            54684817,
            54682317,
            54679635,
            54689466,
            54908772,
            54684679,
            54690915,
            54687442,
            54685809,
            54685924,
            54681653,
            54683168,
            54681797,
            54682416,
            54683266,
            54682426,
            54682731,
            54684851,
            54684352
        ],
        "C": [
            54678532,
            54681169,
            54677843,
            54687880,
            54675623,
            54679704,
            54681667,
            54677693,
            54680121,
            54682979,
            54690039,
            54678308,
            54675885,
            54677830,
            54678752,
            54677564,
            54679339,
            54676201
        ],
        "B": [
            54673457,
            54678799,
            54680269,
            54673253,
            54673012,
            54676449,
            54676258,
            54675058,
            54676915,
            54675666,
            54692780,
            54676719,
            54675276,
            54674258,
            54673558,
            54671616,
            54673955,
            54671622,
            54675590,
            54674178
        ],
        "A": [
            54670054,
            54677136,
            54670973,
            54669910,
            54670050,
            54670444,
            54671253,
            54670673,
            54669870,
            54694380,
            54670378,
            54670212,
            54670638,
            54670322,
            54670547,
            54670037,
            54669810,
            54671042,
            54669779
        ]
    },
    "name": "E. And Reachability",
    "statement": "Toad Pimple has an array of integers a_1, a_2,\r\nldots, a_n.We say that y is reachable from x if x<y and there exists an\r\ninteger array p such that x = p_1 < p_2 <\r\nldots < p_k=y, and a_{p_i}\r\n,\r\n&\r\n, a_{p_{i+1}} > 0 for all integers i such that 1\r\nleq i < k.Here\r\n& denotes the bitwise AND operation.You are given q pairs of indices,\r\ncheck reachability for each of them.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\nint n, q;\nbool t[300001][21];\nint kov[300001][21];\nint el[300001][21];\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin >> n >> q;\n    for (int i=1; i<=n; i++) {\n        int a;\n        cin >> a;\n        int x=1;\n        while(a>0) {\n            if (a%2!=0) {\n                t[i][x]=true;\n            }\n            a/=2;\n            x++;\n        }\n    }\n    /*for (int i=1; i<=n; i++) {\n        for (int j=1; j<=20; j++) {\n            cout << t[i][j];\n        }\n        cout << endl;\n    }*/\n    int akt=0;\n    for (int j=1; j<=20; j++) {\n        for (int i=n; i>=1; i--) {\n            if (t[i][j]) {\n                kov[i][j]=akt;\n                akt=i;\n            }\n            el[i][j]=INT_MAX;\n        }\n        akt=0;\n    }\n    /*for (int i=1; i<=n; i++) {\n        cout << kov[i][1] << endl;\n    }*/\n    for (int i=n; i>=1; i--) {\n        for (int j=1; j<=20; j++) {\n            if (t[i][j]) {\n                el[i][j]=i;\n                if (kov[i][j]!=0) {\n                    for (int k=1; k<=20; k++) {\n                        int p=kov[i][j];\n                        el[i][k]=min(el[i][k], el[p][k]);\n                    }\n                }\n            }\n        }\n    }\n    for (int i=1; i<=q; i++) {\n        int a, b;\n        cin >> a >> b;\n        bool c=false;\n        for (int i=1; i<=20; i++) {\n            if (t[b][i] && el[a][i]<=b) {\n                c=true;\n            }\n        }\n        if (c) {\n            cout << \"Shi\" << \"\\n\";\n        } else {\n            cout << \"Fou\" << \"\\n\";\n        }\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. And Reachability.json",
    "editorial_link": "https://codeforces.com//blog/entry/67241",
    "editorial": "Let\u00e2\u0080\u0099s calculate the smallest , such that contains bit , which is\r\nreachable from .How to recalculate it? Let is the smallest , such that\r\ncontains bit .Then, I claim that is equal to the or to the for all bits\r\nthat contains. Why? Because if you go from to some number, which has bit\r\nin the intersection, it is useless to go to the number which is not\r\nequal to , because from you can go to all numbers that have bit and that\r\npositioned farther.So in you can calculate all these values, and then to\r\nanswer the query you can check that there exists some bit in such that\r\n.This solution\r\n"
}