{
    "link": "https://codeforces.com//contest/1509/problem/B",
    "problemId": "958788",
    "problem_idx": "B",
    "shortId": "1509B",
    "contest_number": "1509",
    "problem_submissions": {
        "F": [
            113256937,
            113452435,
            113285395
        ],
        "E": [
            113232874,
            113219267,
            113224061,
            113223560,
            113233730,
            113226238,
            113242617,
            113234728,
            113229028,
            113234613,
            113236691,
            113233309,
            113237999,
            113236924,
            113234998,
            113244661,
            113248199,
            113294044,
            113242554,
            113241170,
            113238407
        ],
        "D": [
            113221122,
            113205083,
            113211524,
            113212503,
            113218682,
            113218702,
            113210079,
            113222981,
            113224859,
            113213502,
            113222656,
            113222165,
            113224508,
            113227361,
            113205851,
            113214932,
            113213501,
            113214642,
            113227110,
            113229498
        ],
        "C": [
            113210555,
            113197246,
            113200376,
            113200962,
            113204903,
            113197040,
            113198240,
            113210183,
            113210598,
            113200328,
            113196898,
            113203900,
            113204261,
            113210665,
            113209464,
            113204447,
            113203994,
            113206401,
            113202494,
            113202048
        ],
        "B": [
            113194717,
            113193937,
            113192191,
            113190108,
            113198761,
            113232450,
            113190578,
            113195766,
            113197868,
            113220965,
            113207035,
            113194479,
            113196536,
            113224188,
            113200860,
            113198840,
            113198891,
            113192926,
            113195317
        ],
        "A": [
            113186426,
            113184937,
            113185796,
            113185053,
            113185023,
            113184968,
            113185012,
            113185414,
            113185256,
            113188852,
            113200720,
            113185467,
            113185688,
            113212116,
            113186288,
            113188479,
            113188850,
            113184903,
            113188945
        ]
    },
    "name": "B. TMT Document",
    "statement": "The student council has a shared document file. Every day, some members\r\nof the student council write the sequence (short for Towa Maji Tenshi)\r\nin it.However, one day, the members somehow entered the sequence into\r\nthe document at the same time, creating a jumbled mess. Therefore, it is\r\nSuguru Doujima\u2019s task to figure out whether the document has\r\nmalfunctioned. Specifically, he is given a string of length n whose\r\ncharacters are all either or , and he wants to figure out if it is\r\npossible to partition it into some number of disjoint subsequences, all\r\nof which are equal to . That is, each character of the string should\r\nbelong to exactly one of the subsequences.A string a is a subsequence of\r\na string b if a can be obtained from b by deletion of several (possibly,\r\nzero) characters.\r\n",
    "solutions": [
        "#include <ctime>\n#pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"Ofast\")\n//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx\")\n#pragma warning(disable : 4996)\n#include <algorithm>\n#include <cstdint>\n#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <functional>\n#include <utility>\n#include <numeric>\n#include <cmath>\n#include <set>\n#include <iterator>\n#include <vector>\n#include <queue>\n#include <math.h>\n#include <cassert>\n#include <unordered_map>\n\nusing namespace std;\n\nusing ll = long long;\nusing ld = long double;\nusing ull = unsigned long long;\n\n// #define int long long\n#define F first\n#define S second\n#define all(v) v.begin(), v.end()\n#define rall(v) v.rbegin(), v.rend()\n#define len(s) (int)(s).size()\n// #define endl '\\n'\n\n\ninline void accell() {\n    cin.tie(0);\n    cout.tie(0);\n    ios_base::sync_with_stdio(0);\n}\n\ntemplate<class T> ostream& operator<< (ostream& out, const pair<int, int>&X) {\n    out << X.first << ' ' << X.second << endl;\n    return out;\n}\n\ntemplate<class T> ostream& operator<< (ostream& out, const vector<T> &X) {\n    for (const auto& it : X)\n        out << it << ' ';\n    return out;\n}\ntemplate<class T> ostream& operator<< (ostream& out, const set<T> &X) {\n    for (const auto& it : X)\n        out << it << ' ';\n    return out;\n}\ntemplate<class T> void dbg(const T &X) {\n    cerr << \"DEBUG: \" << \": \";\n    cerr << X << endl;\n}\nconst int mod = 1e9 + 7;\nconst int N = 1e5 + 5;\n\n\nsigned main() {\n    accell();\n    int t;\n    cin >> t;\n    while (t--) {\n        int n;\n        cin >> n;\n        string s;\n        cin >> s;\n        int c[3] = {};\n        bool ok = true;\n        int cc = 0;\n        int bal = 0;\n        for (int i = 0; i < n && cc < n / 3; ++i) {\n            if (s[i] == 'T') {\n                cc++;\n                ++bal;\n            } else {\n                --bal;\n            }\n            if (bal < 0) {\n                ok = false;\n                break;\n            }\n        }\n        if (count(s.begin(), s.end(), 'T') != 2 * n / 3) {\n            ok = false;\n        }\n        cc = 0;\n        bal = 0;\n        for (int i = n - 1; i >= 0 && cc < n / 3; --i) {\n            if (s[i] == 'T') {\n                bal++;\n                cc++;\n            } else {\n                bal--;\n            }\n            if (bal < 0) {\n                ok = false;\n            }\n        }\n        if (ok)\n            cout << \"YES\\n\";\n        else\n            cout << \"NO\\n\";\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. TMT Document.json",
    "editorial_link": "https://codeforces.com//blog/entry/89644",
    "editorial": "There are many slightly different solutions, all based on some sort of\r\ngreedy idea. Write for convenience. Obviously, the string must have\r\ncharacters and characters for the partition to be possible, so we can\r\njust discard all other cases.Now, let\u00e2\u0080\u0099s consider the first character in\r\nthe string. This must be part of some subsequence, so we must choose a\r\ncharacter to its left to work as the first character of this\r\nsubsequence. Which character should we choose? Well, it seems intuitive\r\nto match it with the first character we find going from left to right -\r\nit is certainly not the right character of any sequence, and it seems\r\nlike a good idea to assign it to the first character since characters\r\nthat are further to the right may be too far right to match with this\r\ncharacter.Continuing this idea, we come up with the following greedy\r\nalgorithm: Take the first characters and use them as the first\r\ncharacters of the subsequences, matching them with the characters from\r\nleft to right greedily. Similarly, take the last characters and match\r\nthem with each character from left to right greedily. If either of these\r\nsteps fails, the partition is impossible. This can be formalized into\r\nthe following observation, which is both easy to prove and gives a\r\nsolution that is very easy to implement. Let be the positions of the\r\ncharacters and let be the positions of the characters. Then the\r\npartition exists if and only if for . If the condition holds then we can\r\njust choose the subsequences with indices , so it is sufficient. To see\r\nthat it\u00e2\u0080\u0099s necessary, consider the first characters with indices , and\r\nconsider the left characters in the subsequence they\u00e2\u0080\u0099re in. These are to\r\nthe left of their corresponding characters, and in particular they are\r\nto the left of the -th character. Thus there\u00e2\u0080\u0099s at least characters to\r\nthe left of the -th character, meaning . The other inequality is proved\r\nsimilarly.\r\n"
}