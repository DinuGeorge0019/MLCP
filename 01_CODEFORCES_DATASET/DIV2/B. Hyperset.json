{
    "link": "https://codeforces.com//contest/1287/problem/B",
    "problemId": "509647",
    "problem_idx": "B",
    "shortId": "1287B",
    "contest_number": "1287",
    "problem_submissions": {
        "E2": [
            68292966
        ],
        "E1": [
            68275567,
            69857829,
            68268888,
            68267730,
            68276517,
            68275345,
            68277506
        ],
        "D": [
            68254686,
            69267989,
            68263399,
            68273154,
            68268233,
            68260202,
            68261652,
            68267427,
            68261050,
            68269506,
            68253370,
            68261828,
            68262781,
            68259993,
            68263653,
            68262032,
            68264765,
            68263857,
            68263835,
            68268683
        ],
        "C": [
            68251057,
            69267378,
            68258032,
            68258705,
            68258307,
            68255841,
            68251184,
            68254777,
            68254064,
            68259914,
            68257391,
            68256601,
            68256839,
            68253229,
            68254316,
            68258260,
            68255773,
            68259159,
            68259073,
            68255080
        ],
        "B": [
            68248587,
            69266960,
            68254034,
            68252413,
            68256461,
            68250437,
            68247733,
            68281202,
            68281106,
            68280696,
            68280618,
            68264095,
            68250685,
            68253499,
            68259982,
            68248645,
            68435109,
            68253464,
            68263831,
            68250832,
            68248995,
            68250500,
            68255530,
            68255702,
            68249590
        ],
        "A": [
            68244872,
            69266641,
            68245653,
            68244897,
            68247583,
            68245583,
            68244694,
            68245113,
            68244700,
            68244809,
            68261293,
            68244924,
            68435072,
            68246461,
            68245783,
            68245033,
            68244706,
            68244729,
            68245472,
            68245512,
            68245361
        ],
        "F": [
            68641340
        ]
    },
    "name": "B. Hyperset",
    "statement": "Bees Alice and Alesya gave beekeeper Polina famous card game \"Set\" as a\r\nChristmas present. The deck consists of cards that vary in four features\r\nacross three options for each kind of feature: number of shapes, shape,\r\nshading, and color. In this game, some combinations of three cards are\r\nsaid to make up a . For every feature color, number, shape, and shading\r\nthe three cards must display that feature as either all the same, or\r\npairwise different. The picture below shows how sets look.Polina came up\r\nwith a new game called \"Hyperset\". In her game, there are n cards with k\r\nfeatures, each feature has three possible values: \"\", \"\", or \"\". The\r\noriginal \"Set\" game can be viewed as \"Hyperset\" with k = 4.Similarly to\r\nthe original game, three cards form a , if all features are the same for\r\nall cards or are pairwise different. The goal of the game is to compute\r\nthe number of ways to choose three cards that form a .Unfortunately,\r\nwinter holidays have come to an end, and it\u2019s time for Polina to go to\r\nschool. Help Polina find the number of sets among the cards lying on the\r\ntable.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1505;\n\nstring s[N];\nmap<string, int> cnt;\nint n, k;\n\nvoid read() {\n  cin >> n >> k;\n  for (int i = 0 ; i < n ; i++) {\n    cin >> s[i];\n  }\n}\n\nlong long work() {\n  long long ret = 0;\n\n  for (int i = 0 ; i < n ; i++) {\n    for (int j = i+1 ; j < n ; j++) {\n      string cur = \"\";\n\n      for (int kk = 0 ; kk < k ; kk++) {\n        if (s[i][kk] == s[j][kk]) {\n          cur += s[i][kk];\n        } else {\n          if ('S' != s[i][kk] && 'S' != s[j][kk]) {\n            cur += 'S';\n          }         \n          if ('E' != s[i][kk] && 'E' != s[j][kk]) {\n            cur += 'E';\n          }\n          if ('T' != s[i][kk] && 'T' != s[j][kk]) {\n            cur += 'T';\n          }\n        }\n      }\n\n      if (cnt.count(cur)) {\n        ret += cnt[cur];\n      }\n    }\n\n    cnt[s[i]]++;\n  }\n\n  return ret;\n}\n\nint main() {\n  read();\n  cout << work() << endl;\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Hyperset.json",
    "editorial_link": "https://codeforces.com//blog/entry/72867",
    "editorial": "Firstly, we can notice that two cards uniquely identify the third, which\r\nforms a set with them. If the -th feature of two cards is the same, then\r\nin the third card also has the same, otherwise, it has a different\r\nfeature. Thus, we can check all pairs of cards, find their third one,\r\nwhich forms a set with them, and find out if it exists.Time complexity:\r\n( ).\r\n"
}