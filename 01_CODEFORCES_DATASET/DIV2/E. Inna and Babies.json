{
    "link": "https://codeforces.com//contest/374/problem/E",
    "problemId": "4194",
    "problem_idx": "E",
    "shortId": "374E",
    "contest_number": "374",
    "problem_submissions": {
        "A": [
            5465863,
            5461833,
            5466158,
            5464911,
            5466997,
            5469706,
            5473574,
            5469853,
            5468623,
            5465633,
            5469265,
            5462265
        ],
        "D": [
            5462696,
            5467904,
            5464786,
            5464934,
            5468604,
            5465912,
            5467230,
            5466682,
            5468095,
            5465960,
            5466161
        ],
        "B": [
            5468995,
            5469225,
            5467607,
            5470212,
            5468275,
            5468375,
            5461857,
            5462807,
            5463190,
            5462540,
            5462778,
            5463491,
            5467629
        ],
        "C": [
            5466406,
            5463399,
            5462344,
            5464302,
            5463648,
            5464974,
            5464693,
            5465386,
            5470035,
            5465614,
            5465245,
            5466097,
            5466366
        ],
        "E": [
            5470049,
            5469975
        ]
    },
    "name": "E. Inna and Babies",
    "statement": "Inna, Dima and Sereja are in one room together. It\u2019s cold outside, so\r\nSereja suggested to play a board game called \"Babies\". The babies\r\nplaying board is an infinite plane containing blue babies and red ones.\r\nEach baby is a segment that grows in time. At time moment the blue baby\r\nis a blue segment with ends at points , . Similarly, at time the red\r\nbaby is a red segment with ends at points , of the plane. Initially, at\r\ntime all babies are points on the plane.The goal of the game is to find\r\nthe first integer moment of time when the plane contains a rectangle of\r\na non-zero area which sides are fully covered by some babies. A side may\r\nbe covered by multiple babies. More formally, each point of each side of\r\nthe rectangle should be covered by at least one baby of any color. At\r\nthat, you must assume that the babies are closed segments, that is, they\r\ncontain their endpoints.You are given the positions of all babies help\r\nInna and Dima to find the required moment of time.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\n\nconst int N = 2005;\nint n, m;\nstruct pt {\n\tint x, y;\n\tinline void read() {\n\t\tscanf(\"%d%d\", &x, &y);\n\t}\n} a[N], b[N];\nstruct line {\n\tint x1, x2, y1, y2;\n\tline() {}\n\tline(int X1, int Y1, int X2, int Y2) {\n\t\tif (X1 < X2)\t\n\t\t\tx1 = X1, x2 = X2, y1 = Y1, y2 = Y2; else\n\t\t\tx1 = X2, x2 = X1, y1 = Y2, Y2 = y1;\n\t}\n\tinline int k() const {\n\t\treturn x1==x2 ? 1 : (y2-y1) / (x2-x1);\n\t}\n\tinline int at(int x) const {\n\t\treturn y1 + (x-x1) * k();\n\t}\n} l1[N], l2[N];\nint n1, n2, l[N];\ninline bool conj(const line &A, const line &B) {\n\tconst line &a = A.x1 > B.x1 ? B : A, &b = A.x1 > B.x1 ? A : B;\n\tif (a.x2 < b.x1) return 0;\n\treturn a.at(b.x1) == b.y1;\n}\ninline bool inter(const line &a, const line &b) {\n\tint x = -2 * (b.at(0) - a.at(0)) / (b.k() - a.k());\n\treturn a.x1*2<=x && a.x2*2>=x && b.x1*2<=x && b.x2*2>=x;\n}\nline merge(const line &A, const line &B) {\n\tconst line &a = A.x1 > B.x1 ? B : A, &b = A.x1 > B.x1 ? A : B;\n\treturn line(a.x1, a.y1, b.x2, b.y2);\n}\nbool vis[N][N];\nbool check(int t) {\n\tline cur;\n\tbool flag;\n\tn1 = 0;\n\tfor (int i=1; i<=n; ++i) {\n\t\tcur = line(a[i].x-t, a[i].y+t, a[i].x+t, a[i].y-t);\n\t\tflag = 0;\n\t\tfor (int j=1; !flag && j<=n1; ++j) {\n\t\t\tif (conj(l1[j], cur))\n\t\t\t\tl1[j] = merge(l1[j], cur), flag = 1;\n\t\t}\n\t\tif (!flag) l1[++n1] = cur;\n\t}\n\t\n\tn2 = 0;\n\tfor (int i=1; i<=m; ++i) {\n\t\tcur = line(b[i].x-t, b[i].y-t, b[i].x+t, b[i].y+t);\n\t\tflag = 0;\n\t\tfor (int j=1; !flag && j<=n2; ++j) {\n\t\t\tif (conj(l2[j], cur))\n\t\t\t\tl2[j] = merge(l2[j], cur), flag = 1;\n\t\t}\n\t\tif (!flag) l2[++n2] = cur;\n\t}\n\t\n\tint ln;\n\tfor (int i=1; i<=n2; ++i)\n\t\tfor (int j=1; j<=n2; ++j)\n\t\t\tvis[i][j] = 0;\n\tfor (int i=1; i<=n1; ++i) {\n\t\tln = 0;\n\t\tfor (int j=1; j<=n2; ++j)\n\t\t\tif (inter(l1[i], l2[j]))\n\t\t\t\tl[++ln] = j;\n\t\tfor (int j=1; j<=ln; ++j)\n\t\t\tfor (int k=j+1; k<=ln; ++k)\n\t\t\t\tif (vis[l[j]][l[k]])\n\t\t\t\t\treturn 1; else\n\t\t\t\t\tvis[l[j]][l[k]] = 1;\n\t}\n\treturn 0;\n}\ninline bool cmp(pt x, pt y) {\n\treturn x.x < y.x;\n}\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i=1; i<=n; ++i) a[i].read();\n\tfor (int j=1; j<=m; ++j) b[j].read();\n\tsort(a+1, a+n+1, cmp);\n\tsort(b+1, b+m+1, cmp);\n\tint l = 1, r = 2000005, mid;\n\twhile (l < r) {\n\t\tmid = (l + r) >> 1;\n\t\tif (check(mid))\n\t\t\tr = mid; else\n\t\t\tl = mid + 1;\n\t}\n\tif (l > 2000000)\n\t\tputs(\"Poor Sereja!\"); else\n\t\tprintf(\"%d\\n\", l);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "dsu",
        "geometry",
        "implementation"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Inna and Babies.json",
    "editorial_link": "https://codeforces.com//blog/entry/10018",
    "editorial": "We will make the binary search to find the answer. For each time let\u00e2\u0080\u0099s\r\ngenerate our segments and rotate them to transform them into horizontal\r\nand verticle. We can use transformation to . Don\u00e2\u0080\u0099t forget to make the\r\nunion of all segments which were at the one diagonal and have an\r\nintersection. You should sort all segments of one type and iterate\r\nthrough them updating the size of the segment. Now we should only\r\ndetermine if there is at least one rectangle. For example we can iterate\r\neach verticle segment updating the set of all horizontal which begin not\r\nlater than our verticle. For each verticle (the left one) we should\r\niterate the right verticle and now calculate the set of horizontal which\r\nnot only begin not later than the left verticle but also don\u00e2\u0080\u0099t end\r\nearlier than the right one. Now we should only determine is ther is two\r\nor more horizontal segments from the set which satisfy also y-conditions\r\nfor current vertical.\r\n"
}