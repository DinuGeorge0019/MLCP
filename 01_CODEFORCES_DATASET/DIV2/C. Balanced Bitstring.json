{"link": "https://codeforces.com//contest/1405/problem/C", "problemId": "718468", "problem_idx": "C", "shortId": "1405C", "contest_number": "1405", "problem_submissions": {"E": [92059741, 92058133, 92062156, 92060968, 92062924, 92067408, 92066292, 92068112, 92062237, 92066773, 92068775, 92072009, 92069079, 92061737, 92074033, 92066427, 92074374, 92065015], "D": [92042902, 92049954, 92043014, 92049578, 92048487, 92047077, 92051858, 92049539, 92053114, 92052985, 92055807, 92047137, 92054061, 92071019, 92059215, 92073091, 92059129, 92044558, 92094648, 92049569], "C": [92035786, 92037182, 92033713, 92034576, 92036286, 92037578, 92036561, 92039390, 92037184, 92039374, 92039602, 92033076, 92045285, 92037821, 92043997, 92035004, 92050607, 92038515, 92037672, 92034975], "B": [92025229, 92029135, 92026910, 92025507, 92028947, 92031236, 92029110, 92028870, 92041377, 92032881, 92030734, 92026455, 92038256, 92044134, 92038934, 92028794, 92045596, 92031141, 92026747, 92029131], "A": [92023093, 92025469, 92023871, 92023042, 92024363, 92027769, 92023712, 92023043, 92039754, 92024522, 92027108, 92023087, 92026674, 92024071, 92047223, 92036791, 92039497, 92023146, 92023754]}, "name": "C. Balanced Bitstring", "statement": "A bitstring is a string consisting only of the characters and . A\r\nbitstring is called k- if every substring of size k of this bitstring\r\nhas an equal amount of and characters (\r\nfrac{k}{2} of each).You are given an integer k and a string s which is\r\ncomposed only of characters , , and . You need to determine whether you\r\ncan make a k-balanced bitstring by replacing every characters in s with\r\neither or .A string a is a substring of a string b if a can be obtained\r\nfrom b by deletion of several (possibly, zero or all) characters from\r\nthe beginning and several (possibly, zero or all) characters from the\r\nend.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\n#define fef(i,a,b) for(ll i=a;i<=b;i++)\n#define rer(i,a,b) for(ll i=b;i>=a;i--)\n#define wew while(true)\n#pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n#define FILE_IN \"cseq.inp\"\n#define FILE_OUT \"cseq.out\"\n#define ofile freopen(FILE_IN,\"r\",stdin);freopen(FILE_OUT,\"w\",stdout)\n#define fio ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)\n#define nfio cin.tie(0);cout.tie(0)\n#define max(x,y) (((x)>(y))?(x):(y))\n#define min(x,y) (((x)<(y))?(x):(y))\n#define ord(a,b,c) ((a>=b)and(b>=c))\n#define MOD (ll(1000000007))\n#define MAX 300001\n#define mag 320\n#define p1 first\n#define p2 second.first\n#define p3 second.second\n#define X first\n#define Y second\n#define pow2(x) (ll(1)<<x)\n#define pii pair<int,int>\n#define piii pair<int,pii>\n#define For(i,__,___) for(int i=__;i<=___;i++)\n#define Rep(i,__,___) for(int i=__;i>=___;i--)\n#define ordered_set tree<long long,null_type,less<long long>,rb_tree_tag,tree_order_statistics_node_update>\n#define endl \"\\n\"\n#define bi BigInt\ntypedef long long ll;\n//---------END-------//\nconst int maxn = 1e5 + 17;\n\nint main(){\n    nfio;\n    int t;\n    cin >> t;\n    while (t--){\n        int n, k;\n        string s;\n        cin >> n >> k;\n        cin >> s;\n        bool check = true;\n        int count = 0, balance = 0;\n        For(i, 0, k - 1){\n            int index = i, val = -1;\n            while (index < n){\n                if (s[index] == '?'){\n                    index += k;\n                    continue;\n                }\n                if (val != -1 && val != (s[index] - '0')){\n                    check = false;\n                }\n                else if (val == -1){\n                    val = (s[index] - '0');\n                }\n                index += k;\n            }\n            if (val == -1){\n                count++;\n            }\n            else{\n                if (val == 0){\n                    balance--;\n                }\n                else{\n                    balance++;\n                }\n            }\n        }\n        if (check == false || abs(balance) > count){\n            cout << \"NO\\n\";\n        }\n        else{\n            cout << \"YES\\n\";\n        }\n    }\n}"], "input": "", "output": "", "tags": ["greedy", "implementation", "strings"], "dificulty": "1500", "interactive": false}