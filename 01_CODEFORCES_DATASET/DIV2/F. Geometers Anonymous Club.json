{
    "link": "https://codeforces.com//contest/1195/problem/F",
    "problemId": "373882",
    "problem_idx": "F",
    "shortId": "1195F",
    "contest_number": "1195",
    "problem_submissions": {
        "F": [
            57231940,
            57228583,
            57230665,
            57230760,
            57233707,
            57236452,
            57231972,
            57234436,
            57234600,
            57238063,
            57234775,
            57310298,
            57228874,
            57290272,
            57225125
        ],
        "E": [
            57221608,
            57223793,
            57222513,
            57225684,
            57222906,
            57215919,
            57226202,
            57226594,
            57228678,
            57225929,
            57227306,
            57224920,
            57217658,
            57221326,
            57221813,
            57226168,
            57222930,
            57258569,
            57224143
        ],
        "D1": [
            57217173,
            57217670,
            57213566,
            57216495,
            57217668,
            57218460,
            57220879,
            57217890,
            57215569,
            57210215,
            57222516,
            57213030,
            57213769,
            57209778,
            57215844,
            57218863,
            57212403,
            57215924,
            57215516,
            57217529
        ],
        "D2": [
            57216895,
            57217496,
            57213368,
            57216364,
            57217535,
            57229402,
            57220576,
            57217862,
            57215401,
            57216742,
            57222653,
            57217606,
            57213863,
            57214793,
            57215958,
            57218634,
            57215884,
            57216070,
            57229811,
            57216866
        ],
        "C": [
            57208411,
            57206363,
            57208350,
            57208286,
            57212089,
            57204975,
            57209742,
            57209624,
            57207426,
            57206667,
            57209966,
            57209554,
            57208702,
            57205876,
            57208547,
            57209651,
            57208031,
            57210123,
            57210767,
            57209324
        ],
        "B": [
            57206484,
            57204728,
            57206113,
            57205986,
            57206681,
            57203895,
            57206510,
            57205624,
            57205603,
            57204561,
            57207235,
            57206451,
            57206143,
            57204517,
            57206504,
            57207159,
            57205738,
            57206747,
            57207265
        ],
        "A": [
            57203812,
            57203699,
            57205723,
            57203885,
            57204288,
            57203645,
            57204262,
            57204010,
            57204256,
            57203704,
            57203968,
            57204725,
            57203853,
            57203719,
            57204238,
            57204466,
            57203857,
            57203680,
            57204939,
            57203939
        ]
    },
    "name": "F. Geometers Anonymous Club",
    "statement": "Denis holds a Geometers Anonymous Club meeting in SIS. He has prepared n\r\nconvex polygons numbered from 1 to n for the club. He plans to offer\r\nmembers of the club to calculate Minkowski sums of these polygons. More\r\nprecisely, he plans to give q tasks, the i-th of them asks to calculate\r\nthe sum of Minkowski of polygons with indices from l_i to r_i\r\ninclusive.The sum of Minkowski of two sets A and B is the set C =\r\n{a + b : a\r\nin A, b\r\nin B\r\n}. It can be proven that if A and B are convex polygons then C will also\r\nbe a convex polygon. Sum of two convex polygons To calculate the sum of\r\nMinkowski of p polygons (p > 2), you need to calculate the sum of\r\nMinkowski of the first p - 1 polygons, and then calculate the sum of\r\nMinkowski of the resulting polygon and the p-th polygon.For the\r\nconvenience of checking answers, Denis has decided to prepare and\r\ncalculate the number of vertices in the sum of Minkowski for each task\r\nhe prepared. Help him to do it.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 300005;\n\nint sz[N], bd[N], kt[N], x[N], y[N], a[N], last[N], le[N], ri[N], pos[N], bit[N], kq[N];\n\nbool cmp(int i, int j) {\n    return ri[i] < ri[j] || (ri[i] == ri[j] && i < j);\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int cnt = 1;\n    map<pair<int,int>,int> mp;\n    int dem = 0;\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", sz+i);\n        bd[i] = cnt;\n        int ss = sz[i];\n        for (int j = 0; j <= ss; j++) {\n            if (j == ss) {\n                x[j] = x[0];\n                y[j] = y[0];\n            }\n            else\n                scanf(\"%d%d\", x+j, y+j);\n            if (j > 0) {\n                int xx = x[j] - x[j-1];\n                int yy = y[j] - y[j-1];\n                int g = __gcd(abs(xx), abs(yy));\n                xx /= g;\n                yy /= g;\n                auto p = make_pair(xx, yy);\n                int z = mp[p];\n                if (z == 0) {\n                    z = ++dem;\n                    mp[p] = z;\n                }\n                a[cnt++] = z;\n            }\n        }\n        kt[i] = cnt-1;\n    }\n    int q;\n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++) {\n        scanf(\"%d%d\", le+i, ri+i);\n        le[i] = bd[le[i]];\n        ri[i] = kt[ri[i]];\n        pos[i] = i;\n    }\n    sort(pos, pos+q, cmp);\n    int cur = 1;\n    for (int i = 0; i < q; i++) {\n        int l = le[pos[i]];\n        int r = ri[pos[i]];\n        while (cur <= r) {\n            int val = a[cur];\n            if (last[val] > 0) {\n                for (int u = last[val]; u <= cnt; u += u & (-u))\n                    bit[u]--;\n            }\n            last[val] = cur;\n            for (int u = cur; u <= cnt; u += u & (-u))\n                bit[u]++;\n            cur++;\n        }\n        int res = 0;\n        for (int u = r; u > 0; u -= u & (-u))\n            res += bit[u];\n        for (int u = l-1; u > 0; u -= u & (-u))\n            res -= bit[u];\n        kq[pos[i]] = res;\n    }\n    for (int i = 0; i < q; i++) printf(\"%d\\n\", kq[i]);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "geometry",
        "math",
        "sortings"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Geometers Anonymous Club.json",
    "editorial_link": "https://codeforces.com/blog/entry/68471",
    "editorial": "Suppose we want to compute the Minkowski sum of two polygons and . Letâs\r\ndenote two sequences of free vectors: , , ..., such that free vector is\r\ncongruent to the bound vector starting in -th vertex of the first\r\npolygon and ending in the -th vertex of this polygon (if , then we use\r\nthe st point as the -th one); , , ..., such that free vector is\r\ncongruent to the bound vector starting in -th vertex of the second\r\npolygon and ending in the -th vertex of this polygon (if , then we again\r\nuse the st point as the -th one). Itâs impossible to choose a pair of\r\nvectors from the same sequence in such a way that they are parallel,\r\nsince there are no three points lying on the same line in the same\r\npolygon (but it may be possible to find a pair of antiparallel vectors\r\nbelonging to the same sequence).Letâs try to analyze how we can\r\nconstruct such sequence for the resulting polygon. For example, letâs\r\npick some side of the first polygon (let vector denote this side of the\r\npolygon) and analyze how this side can affect the resulting polygon.\r\nThere are two cases: there is a vector such that it is parallel (not\r\nantiparallel) to . Then this vector represents a side of the second\r\npolygon. If we construct the Minkowski sum of these two sides (the side\r\nrepresented by in the first polygon and the side represented by in the\r\nsecond polygon), then we will get a segment having length equal to . The\r\nline coming through this segment divides the plane into two halfplanes,\r\nand all points belonging to the Minkowski sum of these polygons will be\r\ncontained in the same halfplane. Thatâs because all points of the first\r\npolygon belong to the same halfplane (if we divide the plane by the line\r\ncoming through the side represented by ), and all points of the second\r\npolygon belong to the same halfplane (if we divide the plane by the line\r\ncoming through the side represented by ) moreover, both these halfplanes\r\nare either upper halfplanes (and then the whole resulting polygon\r\nbelongs to the upper halfplane) or lower halfplanes (then result belongs\r\nto the lower halfplane). So, the resulting polygon will have a side\r\nrepresented by the free vector equal to (obviously, there can be only\r\none such side); there is no such vector in the second sequence such that\r\nit is parallel to . Then there exists exactly one vertex of the second\r\npolygon such that if we draw a line parallel to through this vertex, the\r\nwhole second polygon will be contained in the upper halfplane or the\r\nlower halfplane (depending on whether the first polygon belongs to the\r\nupper halfplane or the lower halfplane in respect to the side parallel\r\nto ). Actually, this case can be analyzed as the case where exists, but\r\nhas zero length: the resulting polygon will have a side represented by\r\nthe vector . So, for every vector in the sequences constructed by the\r\ngiven polygons, there will be a vector parallel to it in the resulting\r\nsequence of vectors. It is quite obvious that every vector in the\r\nresulting sequence is also parallel to some vector from the first two\r\nsequences. It means that the number of sides in the Minkowski sum is\r\nequal to the number of vectors in these two sequences, but all parallel\r\nvectors count as one.This fact can be extended to computing the\r\nMinkowski sum of multiple polygons: the resulting polygon will have the\r\nnumber of sides equal to the number of vectors in all sequences for\r\ngiven polygons, if we count all parallel vectors as one. Now we can\r\nsolve the problem in such a way: construct the sequences of vectors for\r\nthe given polygons and divide these vectors into equivalence classes in\r\nsuch a way that vectors belong to the same class if and only if they are\r\nparallel. The answer to each query is equal to the number of equivalence\r\nclasses such that at least one vector belonging to this class is\r\ncontained in at least one sequence on the segment of polygons; this can\r\nbe modeled as the query \"count the number of distinct values on the\r\ngiven segment of the given array\". This problem can be solved with Moâs\r\nalgorithm, mergesort tree or persistent segment tree.\r\n",
    "hint": []
}