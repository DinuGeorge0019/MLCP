{
    "link": "https://codeforces.com//contest/1946/problem/E",
    "problemId": "2546665",
    "problem_idx": "E",
    "shortId": "1946E",
    "contest_number": "1946",
    "problem_submissions": {
        "F": [
            252778634,
            252785320,
            252786013,
            252792288,
            252797773,
            252760159,
            252805049,
            252802973,
            252797418,
            252804807,
            252802498,
            252803677,
            252806450,
            252799639,
            252798045,
            252805458,
            253149787,
            253149764,
            252804697,
            252968362,
            252967816,
            252967536,
            252967308,
            252806243,
            252801898,
            252945361
        ],
        "E": [
            252767893,
            252755066,
            252775649,
            252778497,
            252788255,
            252768645,
            252781620,
            252778378,
            252791272,
            252783666,
            252792255,
            252787037,
            252788438,
            252796123,
            252791048,
            252789043,
            253149820,
            252796931,
            252794065,
            252793295,
            252769537
        ],
        "D": [
            252762969,
            252760657,
            252762929,
            252773084,
            252775710,
            252791493,
            252768538,
            252788123,
            252780760,
            252772529,
            252780806,
            252771784,
            252771623,
            252765540,
            252785160,
            252771914,
            253149843,
            252783465,
            252776484,
            252789596,
            252761305
        ],
        "C": [
            252755980,
            252750182,
            252755510,
            252756532,
            252756457,
            252786638,
            252755577,
            252760887,
            252765082,
            252758814,
            252754307,
            252762090,
            252762611,
            252762199,
            252764272,
            252764206,
            253149881,
            252762872,
            252757806,
            252747947,
            252752185
        ],
        "B": [
            252751889,
            252748922,
            252750334,
            252750610,
            252747768,
            252788061,
            252749547,
            252752546,
            252752071,
            252751826,
            252749973,
            252750830,
            252751955,
            252750419,
            252760194,
            252752821,
            253149896,
            252756666,
            252745823,
            252761849,
            252754627
        ],
        "A": [
            252743735,
            252744280,
            252743830,
            252744601,
            252743817,
            252788730,
            252743641,
            252745268,
            252744800,
            252746033,
            252743616,
            252744372,
            252744103,
            252744348,
            252750764,
            252744631,
            253149908,
            252746630,
            252743684,
            252757716,
            252743737
        ]
    },
    "name": "E. Girl Permutation",
    "statement": "Some permutation of length n is guessed.You are given the indices of its\r\nprefix maximums and suffix maximums.Recall that a permutation of length\r\nk is an array of size k such that each integer from 1 to k occurs\r\nexactly once.Prefix maximums are the elements that are the maximum on\r\nthe prefix ending at that element. More formally, the element a_i is a\r\nprefix maximum if a_i > a_j for every j < i.Similarly, suffix maximums\r\nare defined, the element a_i is a suffix maximum if a_i > a_j for every\r\nj > i.You need to output the number of different permutations that could\r\nhave been guessed.As this number can be very large, output the answer\r\nmodulo 10^9 + 7.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define MP make_pair\nconst int MAXN=2e5+5;\nconst int MOD=1e9+7;\nint n,m1,m2;\nbool vis[MAXN];\nll fac[MAXN],inf[MAXN],a[MAXN],b[MAXN];\nll C(int x,int y){return (x<0||x>y)?0:fac[y]*inf[x]%MOD*inf[y-x]%MOD;}\nll ksm(ll a,int b){ll r=1;while(b){if(b&1)r=r*a%MOD;a=a*a%MOD,b>>=1;}return r;}\nvoid solve(){\n\tcin>>n>>m1>>m2;\n\tfor(int i=1;i<=n;i++) vis[i]=0;\n\tfor(int i=1;i<=m1;i++){\n\t\tcin>>a[i];\n\t\tvis[a[i]]=true;\n\t}\n\tfor(int i=1;i<=m2;i++){\n\t\tcin>>b[i];\n\t\tvis[b[i]]=true;\n\t}\n\tif(a[m1]!=b[1]){\n\t\tcout<<0<<'\\n';\n\t\treturn;\n\t}\n\tll ans=C(a[m1]-1,n-1);\n\tfor(int i=1;i<a[m1];i++) if(!vis[i]) ans=ans*(i-1)%MOD;\n\tfor(int i=n;i>a[m1];i--) if(!vis[i]) ans=ans*(n-i)%MOD;\n\tcout<<ans<<'\\n';\n}\nint main(){\n\tios::sync_with_stdio(false);\n\t// freopen(\"Otomachi_Una.in\",\"r\",stdin);\n\t// freopen(\"Otomachi_Una.out\",\"w\",stdout);\n\tfac[0]=fac[1]=inf[0]=inf[1]=1;\n\tfor(int i=2;i<MAXN;i++){\n\t\tfac[i]=fac[i-1]*i%MOD;\n\t\tinf[i]=1ll*(MOD-1)*(MOD/i)%MOD*inf[MOD%i]%MOD;\n\t}\n\tfor(int i=2;i<MAXN;i++) inf[i]=inf[i-1]*inf[i]%MOD;\n\tint _;cin>>_;\n\twhile(_--) solve();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math",
        "number theory"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Girl Permutation.json",
    "editorial_link": "https://codeforces.com//blog/entry/127439",
    "editorial": "First, if is not equal to , or is not equal to , or is not equal to ,\r\nthen the answer is for obvious reasons. Otherwise, we know exactly where\r\nthe number is located, at position . Next, we have ways to divide the\r\nnumbers from to into two sets the numbers that will be in the left part\r\nand the numbers that will be in the right part (the left part all\r\nindices , the right part all indices ). We solve for the left part, and\r\nsimilarly for the right part. For the left part, the position of the\r\nmaximum () is again defined, and the maximum itself is also unique in\r\nthe set of numbers for the left part, so we can again divide the left\r\npart into two, with ways to do so, but we can also arrange the numbers\r\nbetween indices and (non-inclusive) in any order, i.e., ways. Then we\r\nsolve similarly for the left set (i.e., for indices less than ).\r\n",
    "hint": []
}