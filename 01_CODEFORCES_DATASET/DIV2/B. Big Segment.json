{
    "link": "https://codeforces.com//contest/242/problem/B",
    "problemId": "2148",
    "problem_idx": "B",
    "shortId": "242B",
    "contest_number": "242",
    "problem_submissions": {
        "D": [
            2537952,
            2537942,
            2539339,
            2539698,
            2539156,
            2539580,
            2537494,
            2542278,
            2538787,
            2539905,
            2536184,
            2537759,
            2542044,
            2538066,
            2564424
        ],
        "C": [
            2537373,
            2537268,
            2536519,
            2536785,
            2537810,
            2537116,
            2537792,
            2536568,
            2536898,
            2537580,
            2536958,
            2536262,
            2537263,
            2538218,
            2536235,
            2542015,
            2536779,
            2536389,
            2538664,
            2537599
        ],
        "B": [
            2536607,
            2534065,
            2534724,
            2534650,
            2534927,
            2535116,
            2534461,
            2535027,
            2534468,
            2533804,
            2535897,
            2534112,
            2534107,
            2535117,
            2534450,
            2534923,
            2542000,
            2534963,
            2534474,
            2534940,
            2535281
        ],
        "A": [
            2536206,
            2533805,
            2533960,
            2533930,
            2534212,
            2534073,
            2533868,
            2533943,
            2533896,
            2534746,
            2535180,
            2533808,
            2533814,
            2534432,
            2533857,
            2533887,
            2541991,
            2534152,
            2533996,
            2533848,
            2534557
        ],
        "E": [
            2535640,
            2536427,
            2538447,
            2538483,
            2538649,
            2538639,
            2537907,
            2539042,
            2537371,
            2537776,
            2539203,
            2536140,
            2538840,
            2538202,
            2564479,
            2541961,
            2541948,
            2542249,
            2542247,
            2542240,
            2539344,
            9226579,
            2538102,
            2538950
        ]
    },
    "name": "B. Big Segment",
    "statement": "A coordinate line has segments, the -th segment starts at the position\r\nand ends at the position . We will denote such a segment as .You have\r\nsuggested that one of the defined segments covers all others. In other\r\nwords, there is such segment in the given set, which contains all other\r\nones. Now you want to test your assumption. Find in the given set the\r\nsegment which covers all other segments, and print its number. If such a\r\nsegment doesn’t exist, print -1.Formally we will assume that segment\r\ncovers segment , if they meet this condition .\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nint x[111111], y[111111];\n\nint main() {\n\tint n; scanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; ++i) scanf(\"%d%d\", &x[i], &y[i]);\n\tint minx = x[1], maxx = y[1];\n\tfor (int i = 1; i <= n; ++i) {\n\t\tminx = min(minx, x[i]);\n\t\tmaxx = max(maxx, y[i]);\n\t}\n\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (x[i] == minx && y[i] == maxx) {\n\t\t\tprintf(\"%d\\n\", i); return 0;\n\t\t}\n\t}\n\n\tprintf(\"%d\\n\", -1);\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "sortings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Big Segment.json",
    "editorial_link": "https://codeforces.com//blog/entry/5837",
    "editorial": "At first, we must note that the answer is always unique, because if\r\nsegment covers segment , that segment canât cover segment . It possible\r\nif and only if there are coincide segments in the set, but itâs not\r\npermissible by the statement. Letâs pay attention the answer covers the\r\nmost left point of all segments and the most right point of all points\r\ntoo. Now then we should found and and print index of segment , or if\r\nthere is no such segment in the set. The time is .\r\n",
    "hint": []
}