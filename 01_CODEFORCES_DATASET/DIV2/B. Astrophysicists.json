{
    "link": "https://codeforces.com//contest/1836/problem/B",
    "problemId": "1971174",
    "problem_idx": "B",
    "shortId": "1836B",
    "contest_number": "1836",
    "problem_submissions": {
        "E": [
            210147681,
            210156192,
            210163487,
            210136429,
            210157213,
            210315010,
            210158073,
            210164123,
            210155192,
            210164163,
            210159525
        ],
        "C": [
            210130232,
            210131057,
            210124529,
            210133873,
            210151231,
            210126284,
            210133931,
            210138158,
            210136673,
            210132463,
            210128133,
            210140056,
            210148028,
            210143853,
            210137711,
            210137608,
            210128551,
            210120166,
            210126121
        ],
        "B": [
            210123440,
            210126296,
            210116405,
            210125585,
            210144712,
            210122722,
            210125845,
            210141461,
            210122883,
            210123468,
            210120670,
            210126915,
            210118094,
            210134923,
            210163701,
            210137111,
            210115730,
            210115790
        ],
        "A": [
            210111620,
            210110060,
            210110623,
            210116661,
            210139143,
            210111484,
            210110034,
            210110353,
            210111957,
            210118244,
            210112250,
            210110488,
            210111107,
            210115218,
            210110094,
            210110963,
            210112266,
            210116067,
            210110124
        ],
        "D": [
            210158558,
            210154147,
            210162752,
            210191544,
            210162490,
            210160449,
            210160513,
            210163603
        ]
    },
    "name": "B. Astrophysicists",
    "statement": "In many, many years, far, far away, there will be a launch of the first\r\nflight to Mars. To celebrate the success, n astrophysicists working on\r\nthe project will be given bonuses of a total value of k gold coins.You\r\nhave to distribute the money among the astrophysicists, and to make it\r\neasier, you have to assign bonuses in silver coins. Each gold coin is\r\nworth g silver coins, so you have to distribute all k\r\ncdot g silver coins among n people.Unfortunately, the company has some\r\nfinancial troubles right now. Therefore, instead of paying the number of\r\nsilver coins written on the bonus, they decided to round this amount to\r\nthe nearest integer number of gold coins.The rounding procedure is as\r\nfollows. If an astrophysicist has bonus equal to x silver coins, and we\r\ndenote r = x\r\nbmod g, then: If r\r\ngeq\r\nlceil\r\nfrac{g}{2}\r\nrceil, the astrophysicist receives x + (g - r) silver coins; Otherwise,\r\nan astrophysicists receives x - r silver coins. Note that due to\r\nrounding, the total sum of actually paid money is not, in general, equal\r\nto k\r\ncdot g silver coins. The operation a\r\nbmod b denotes the remainder of the division of a by b. Sum of values\r\nbefore rounding , but some workers can be assigned 0 silver coins.You\r\naim to distribute the bonuses so that the company saves as many silver\r\ncoins due to rounding as possible. Please note that there is always a\r\ndistribution in which the company spends no more than k\r\ncdot g silver coins.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint t;\n\tcin >> t;\n\twhile(t--){\n\t\tint n, k, g;\n\t\tcin >> n >> k >> g;\n\t\tlong long total = k * 1LL * g;\n\t\tlong long at_first = min(total, (g - 1) / 2 * 1LL * n);\n\t\tlong long used = total - at_first;\n\t\tif (used % g > 0) used += g - (used % g);\n\t\t\n\t\tcout << total - used << endl;\n\t}\n\t\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Astrophysicists.json",
    "editorial_link": "https://codeforces.com//blog/entry/117394",
    "editorial": "Note that in the perfect world, weâd give each astrophysicist precisely\r\n, and weâd spare silver coins. Unfortunately, two things may happen:\r\nFirst, we may run out of money. This is an easy case; it is enough to\r\noutput if it is less than . Second, we may have some money left. It\r\nturns out that an acceptable solution is to give everything to one\r\nastrophysicist. The intuition behind it is simple we are only interested\r\nin bonus sizes modulo , and by decreasing the bonus of one\r\nastrophysicist, we can get at most from another one, and by increasing\r\nit, we lose . In both cases, it is not worth changing the value.Thus, we\r\ngot a formula to calculate in .\r\n",
    "hint": []
}