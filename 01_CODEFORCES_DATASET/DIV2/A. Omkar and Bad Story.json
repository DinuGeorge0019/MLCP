{
    "link": "https://codeforces.com//contest/1536/problem/A",
    "problemId": "1007469",
    "problem_idx": "A",
    "shortId": "1536A",
    "contest_number": "1536",
    "problem_submissions": {
        "E": [
            118631124,
            118614939,
            118616967,
            118624386,
            118627719,
            118635620,
            118636863,
            118621534,
            118623141,
            118619496,
            118630371,
            118626916,
            118634340,
            118635235,
            118626014,
            118625912,
            118631232,
            118724771,
            118637508,
            118632134,
            118634841
        ],
        "F": [
            118625791,
            118638866,
            118613437,
            118637695,
            118644936,
            118650446,
            118647459,
            118663966,
            118711352,
            118653882,
            118654218,
            118882357
        ],
        "C": [
            118608971,
            118600883,
            118628209,
            118608554,
            118608052,
            118619465,
            118622898,
            118607847,
            118602584,
            118598176,
            118609484,
            118609006,
            118618271,
            118606277,
            118606392,
            118620701,
            118612692,
            118724743,
            118612675,
            118612583,
            118612872
        ],
        "D": [
            118608031,
            118607288,
            118623947,
            118617513,
            118619773,
            118632284,
            118632215,
            118614859,
            118617552,
            118601113,
            118616452,
            118622152,
            118614133,
            118620886,
            118617343,
            118616486,
            118624441,
            118724752,
            118620219,
            118627264,
            118625159
        ],
        "B": [
            118602956,
            118599083,
            118634218,
            118612957,
            118602526,
            118613641,
            118606813,
            118602130,
            118599340,
            118630482,
            118605942,
            118604400,
            118601413,
            118601634,
            118600081,
            118601184,
            118602824,
            118724734,
            118602945,
            118605239,
            118604772
        ],
        "A": [
            118598232,
            118597991,
            118635775,
            118598107,
            118598184,
            118601999,
            118598235,
            118599189,
            118598143,
            118622748,
            118598451,
            118598128,
            118598114,
            118598284,
            118598026,
            118597979,
            118598563,
            118724715,
            118598620,
            118599178,
            118598920
        ]
    },
    "name": "A. Omkar and Bad Story",
    "statement": "Omkar has received a message from Anton saying \"Your story for problem A\r\nis confusing. Just make a formal statement.\" Because of this, Omkar\r\ngives you an array a = [a_1, a_2,\r\nldots, a_n] of n distinct integers. An array b = [b_1, b_2,\r\nldots, b_k] is called if for any two distinct elements b_i, b_j of b,\r\n|b_i-b_j| appears in b at least once. In addition, all elements in b\r\nmust be distinct. Can you add several (maybe, 0) integers to a to create\r\na array b ? If a is already , you don\u2019t have to add any elements.For\r\nexample, array [3, 6, 9] is , as |6-3|=|9-6| = 3, which appears in the\r\narray, and |9-3| = 6, which appears in the array, while array [4, 2, 0,\r\n6, 9] is not , as |9-4| = 5 is not present in the array.For integers x\r\nand y, |x-y| = x-y if x > y and |x-y| = y-x otherwise.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nconst int N=305;\nint mi;\nint read()\n{\n\tint res=0,fl=0; char a=getchar();\n\twhile(a<'0'||a>'9') fl|=a=='-',a=getchar();\n\twhile(a>='0'&&a<='9') res=res*10+a-'0',a=getchar();\n\treturn fl? -res:res;\n}\nint main()\n{\n\tint i,j,t=read();\n\twhile(t--)\n\t{\n\t\tmi=200;\n\t\tfor(i=read();i;i--) j=read(),mi=min(mi,j);\n\t\tif(mi<0) cout<<\"NO\\n\";\n\t\telse for(cout<<\"YES\\n\"<<101<<'\\n',i=0;i<=100;i++) cout<<i<<' ';\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Omkar and Bad Story.json",
    "editorial_link": "https://codeforces.com//blog/entry/91520",
    "editorial": "SolutionWe first claim that if any negative number exists in , then no\r\nsolution exists. Denote as the smallest number in and as another\r\narbitrary number in the array (as , always exists). Clearly, . However,\r\nbecause is negative, . As such, adding to the output array would create\r\nthe pair with difference . We have the same problem as before; thus, it\r\nis impossible to create a nice array if there exists a negative number\r\nin .After we deal with this case, we now claim that is a valid nice\r\narray for any that contains no negative numbers. It is easy to verify\r\nthat this is a valid nice array. And since in this case, every element\r\nof is nonnegative and distinct, it is always possible to rearrange and\r\nadd elements to to obtain .\r\n"
}