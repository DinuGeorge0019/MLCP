{
    "link": "https://codeforces.com//contest/1925/problem/A",
    "problemId": "2447851",
    "problem_idx": "A",
    "shortId": "1925A",
    "contest_number": "1925",
    "problem_submissions": {
        "F": [
            243635672,
            243648922,
            243652277,
            243654463,
            243696386
        ],
        "E": [
            243616564,
            243621263,
            243626621,
            243628373,
            243642423,
            243636417,
            243643693,
            243633557,
            243638778,
            243637771,
            243645710,
            243648841,
            243629267,
            243713101,
            243632960,
            243654973,
            243648168,
            243647861,
            243652611,
            243647183,
            243650906
        ],
        "D": [
            243592234,
            243594869,
            243599958,
            243596486,
            243624513,
            243610640,
            243600801,
            243608352,
            243605500,
            243665895,
            243608581,
            243587140,
            243614894,
            243606314,
            243649266,
            243604378,
            243609277,
            243609750,
            243623206,
            243609456,
            249399690,
            243606073
        ],
        "C": [
            243570353,
            243577698,
            243576709,
            243576761,
            243588406,
            243564488,
            243578879,
            243585269,
            243576848,
            243595639,
            243608536,
            243585312,
            243573744,
            243571216,
            243580792,
            243582138,
            243591440,
            243576695,
            243587225,
            249717100,
            243587500
        ],
        "B": [
            243565143,
            243557943,
            243563278,
            243563287,
            243557566,
            243563680,
            243568156,
            243559337,
            243561416,
            243559345,
            243566711,
            243558705,
            243561296,
            243561403,
            243570584,
            243570498,
            243563900,
            243563678,
            243565505
        ],
        "A": [
            243556584,
            243556225,
            243557446,
            243557520,
            243556082,
            243557771,
            243560727,
            243556392,
            243556560,
            243556879,
            243556644,
            243556058,
            243556214,
            243556452,
            243557610,
            243558322,
            243556372,
            243556420,
            243556133
        ]
    },
    "name": "A. We Got Everything Covered ",
    "statement": "You are given two positive integers n and k. Your task is to find a\r\nstring s such that all possible strings of length n that can be formed\r\nusing the first k lowercase English alphabets occur as a subsequence of\r\ns. If there are multiple answers, print the one with the smallest\r\nlength. If there are still multiple answers, you may print any of them.\r\nA string a is called a subsequence of another string b if a can be\r\nobtained by deleting some (possibly zero) characters from b without\r\nchanging the order of the remaining characters.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nvoid solve() {\n  int n, k;\n  cin >> n >> k;\n  while (n--)\n    for (int i = 0; i < k; i++)\n      cout << (char) ('a' + i);\n  cout << endl;\n}\nint main() {\n  int t;\n  cin >> t;\n  while (t--) solve();\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. We Got Everything Covered .json",
    "editorial_link": "https://codeforces.com//blog/entry/125137",
    "editorial": "TutorialThe smallest length possible for such a string is . Why?To have\r\nthe string as a subsequence, you need to have at least characters in the\r\nstring as . Similarly for all different characters. So, that gives a\r\ntotal length of at least .In fact, it is always possible to construct a\r\nstring of length that satisfies this property. One such string is times\r\nwhere is the letter of English alphabet. For example, the answer for can\r\nbe . It is not hard to see that the first letter of the subsequence can\r\nbe from the first group of letters, second letter from the second group\r\nand so on.\r\n"
}