{
    "link": "https://codeforces.com//contest/1604/problem/E",
    "problemId": "1163966",
    "problem_idx": "E",
    "shortId": "1604E",
    "contest_number": "1604",
    "problem_submissions": {
        "E": [
            133665266,
            133665330,
            133659495,
            133662698,
            133665754,
            133665695,
            133667913,
            133670360,
            133670641,
            133670753,
            133676806,
            133672911,
            133673104,
            133674991,
            133676775,
            133679158,
            133677605,
            133683514,
            133682221,
            133683564
        ],
        "D": [
            133632914,
            133634675,
            133646997,
            133640774,
            133645923,
            133643402,
            133646411,
            133639935,
            133645645,
            133646807,
            133649571,
            133658060,
            133654131,
            133649231,
            133663364,
            133653039,
            133654438,
            133653052,
            133653688,
            133661097
        ],
        "C": [
            133630411,
            133638085,
            133632064,
            133625685,
            133635045,
            133633934,
            133631657,
            133625520,
            133634475,
            133635072,
            133633002,
            133634939,
            133644373,
            133640982,
            133632402,
            133642673,
            133644331,
            133633661,
            133631330,
            133642353
        ],
        "B": [
            133625396,
            133621698,
            133626014,
            133619603,
            134090905,
            133624581,
            133623770,
            133621459,
            133634337,
            133628885,
            133630875,
            133627020,
            133622232,
            133627089,
            133635361,
            133623364,
            133634078,
            133623924,
            133625391,
            133624417,
            133621609
        ],
        "A": [
            133617599,
            133618208,
            133617413,
            133617141,
            134090791,
            133617364,
            133617444,
            133617618,
            133619480,
            133619710,
            133620324,
            133618064,
            133617109,
            133626724,
            133628136,
            133617925,
            133618078,
            133619587,
            133619073,
            133618066,
            133617633
        ],
        "F": [
            133735630,
            133826813
        ]
    },
    "name": "E. Extreme Extension",
    "statement": "For an array b of n integers, the of this array is the minimum number of\r\ntimes (possibly, zero) the following operation has to be performed to\r\nmake b : Select an index i such that 1\r\nle i\r\nle |b|, where |b| is the current length of b. Replace b_i with two\r\nelements x and y such that x and y both are integers and x + y = b_i.\r\nThis way, the array b changes and the next operation is performed on\r\nthis modified array. For example, if b = [2, 4, 3] and index 2 gets\r\nselected, then the possible arrays after this operation are [2,\r\nunderline{1},\r\nunderline{3}, 3], [2,\r\nunderline{2},\r\nunderline{2}, 3], or [2,\r\nunderline{3},\r\nunderline{1}, 3]. And consequently, for this array, this single\r\noperation is enough to make it non-decreasing: [2, 4, 3]\r\nrightarrow [2,\r\nunderline{2},\r\nunderline{2}, 3].It\u2019s easy to see that every array of positive integers\r\ncan be made non-decreasing this way.YouKn0wWho has an array a of n\r\nintegers. Help him find the sum of of all nonempty subarrays of a modulo\r\n998\r\n,244\r\n,353. If a subarray appears in a multiple times, its extreme value\r\nshould be counted the number of times it appears.An array d is a\r\nsubarray of an array c if d can be obtained from c by deletion of\r\nseveral (possibly, zero or all) elements from the beginning and several\r\n(possibly, zero or all) elements from the end.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define N 100009\n#define P 998244353\n#define INF 0x3f3f3f3f3f3f3f3f\nusing namespace std;\ntypedef long long ll;\ninline ll read() {\n    ll x=0,f=1;int c=getchar();\n    while(!isdigit(c)) {if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)) {x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    return x*f;\n}\nll t,n,ans,lst,a[N],b1[N],b2[N],c[N],d[N];\nvoid calc(ll x,ll y){\n    for(int i=y+1;i<=x;i++) d[i]=(d[i-1]+c[i]*i%P)%P,ans+=c[i]*i%P,ans%=P;\n}\nvoid solve(){\n    n=read();\n    for(int i=1;i<=n;i++) b1[i]=b2[i]=c[i]=d[i]=0;\n    for(int i=1;i<=n;i++) a[i]=read();\n    ans=0;\n    for(int i=1;i<=n;i++){\n        lst=a[i];int j;\n        b1[i]=b2[i]=a[i];\n        for(j=i-1;j>=1;j--){\n            if(b2[j]>lst){\n                c[j]=(a[j]+lst-1)/lst;\n                b1[j]=a[j]/c[j];\n                if(a[j]%c[j]==0) b2[j]=b1[j];\n                else b2[j]=b1[j]+1;\n                lst=b1[j],c[j]--;\n            }\n            else{ans+=d[j],ans%=P;break;}\n        }\n        calc(i,j);\n    }\n}\nint main(){\n    //freopen(\".in\",\"r\",stdin);\n    //freopen(\".out\",\"w\",stdout);\n    t=read();\n    while(t--) solve(),printf(\"%lld\\n\",ans);\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "number theory"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Extreme Extension.json",
    "editorial_link": "https://codeforces.com//blog/entry/96460",
    "editorial": "Let's find out how to calculate the extreme value of an array a\n of n\n integers. It turns out that a greedy solution exists!\n\nConsider the rightmost index i\n such that ai>ai+1\n. So we must split ai\n into new (let's say k\n) elements 1?b1?b2?\u0085?bk?ai+1\n such that b1+b2+\u0085+bk=ai\n . Notice that k??aiai+1?\n because bk?ai+1\n. But it is always optimal to make b1\n as large as possible. It is not hard to see that the smaller the k\n, the bigger the b1\n we can achieve. So let's set k=?aiai+1?\n. Now, notice that b1??aik?\n. So let's set b1=?aik?=?ai?aiai+1??\n. So we have performed k?1=?aiai+1??1\n operations and will solve the problem analogously for the previous indices after replacing ai\n by [b1,b2,\u0085,bk]\n.\n\nTo sum it all up, we can calculate the extreme value in the following procedure:\n\nIterator from i=n?1\n to 1\n.\nAdd ?aiai+1??1\n to the answer.\nSet ai=?ai?aiai+1??\n.\nPretty elegant! Let's call it elegant procedure from now on.\n\nSo we can calculate the extreme value of an array of n\n integers in O(n)\n.\n\nTo solve it for all subarrays in O(n2)\n, we need to fix a prefix and solve each suffix of this prefix in a total of O(n)\n operations. We can do that easily because the procedure to calculate the extreme values starts from the end, so we can sum up the contributions on the run.\n\nHow to solve the problem faster?\n\nThink dp.\n\nLet dp(i,x)\n be the count of subarrays a[i;j]\n such that i?j\n and after the elegant procedure x\n becomes the first element of the final version of that subarray.\n\nWe only care about the x\ns for which dp(i,x)\n is non-zero. How many different x\n is possible?\n\nWell, it can be up to 105\n, right?\n\nWrong!\n\nLet's go back to our elegant procedure once again. For the time being, let's say for all x=1\n to 105\n, dp(i+1,x)\n is non-zero. So for each x\n, we will add dp(i+1,x)\n to dp(i,?ai?aix??)\n.\n\nBut there can be at most 2m???\n distinct values in the sequence ?m1?,?m2?,\u0085,?mm?\n. Check this for a proof.\n\nSo there can be O(105????)\n distinct x\ns for which dp(i,x)\n is non-zero. So we can solve this dp in O(n?105????)\n. To optimize the space-complexity we can observe that we only need the dp values of i+1\n. So we can use only two arrays to maintain everything. Check my solution for more clarity.\n\nTo get the final answer, we will use the contribution technique. To be precise, for each (i+1,x)\n we will add i?dp(i+1,x)?(?aiai+1??1)\n to our answer and its not hard to see this. Here, i?dp(i+1,x)\n is the number of arrays where the i\n-th element will be set to x\n in the elegant procedure and ?aiai+1??1\n is the number of operations that will be performed for the same.\n\nOverall time complexity will be O(n?105????)\n and space complexity will be O(n)\n."
}