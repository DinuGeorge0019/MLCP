{
    "link": "https://codeforces.com//contest/931/problem/D",
    "problemId": "162266",
    "problem_idx": "D",
    "shortId": "931D",
    "contest_number": "931",
    "problem_submissions": {
        "F": [
            35940104,
            35941465,
            35943287,
            35941080,
            35942331,
            35943653,
            35947276,
            35943719,
            35948347,
            35944673,
            35940779,
            35944545,
            35939029,
            35944604,
            35941239,
            35940667,
            35943276,
            35942053,
            35941638
        ],
        "E": [
            35935873,
            35937949,
            35939388,
            35938861,
            35938615,
            35938585,
            35938306,
            35937388,
            35944915,
            35945452,
            35936046,
            35942168,
            35938423,
            35939249,
            35936882,
            35938436
        ],
        "C": [
            35932593,
            35935542,
            35932202,
            35935230,
            35934264,
            35936847,
            35933533,
            35934506,
            35935861,
            35934976,
            35935354,
            35943273,
            35946878,
            35947399,
            35947162
        ],
        "D": [
            35930635,
            35933077,
            35934832,
            35933775,
            35935452,
            35929853,
            35935211,
            35931557,
            35934131,
            35930406,
            35933242,
            35937131,
            35943429,
            35935627,
            35932316,
            35932452
        ],
        "B": [
            35929535,
            35929870,
            35928517,
            35928303,
            35929389,
            35931362,
            35930323,
            35930011,
            35929776,
            35928105,
            35928031,
            35931499,
            35930328,
            35928842,
            35930448,
            35928972
        ],
        "A": [
            35926848,
            35929929,
            35926934,
            35926799,
            35927905,
            35929233,
            35927305,
            35927514,
            35926795,
            35926930,
            35926789,
            35928102,
            35927117,
            35926792,
            35928368,
            35926987
        ]
    },
    "name": "D. Peculiar apple-tree",
    "statement": "In Arcady’s garden there grows a peculiar apple-tree that fruits one\r\ntime per year. Its peculiarity can be explained in following way: there\r\nare inflorescences, numbered from to . Inflorescence number is situated\r\nnear base of tree and any other inflorescence with number () is situated\r\nat the top of branch, which bottom is -th inflorescence and .Once tree\r\nstarts fruiting, there appears exactly one apple in each inflorescence.\r\nThe same moment as apples appear, they start to roll down along branches\r\nto the very base of tree. Each second all apples, except ones in first\r\ninflorescence simultaneously roll down one branch closer to tree base,\r\ne.g. apple in -th inflorescence gets to -th inflorescence. Apples that\r\nend up in first inflorescence are gathered by Arcady in exactly the same\r\nmoment. Second peculiarity of this tree is that once two apples are in\r\nsame inflorescence they . This happens with each pair of apples, e.g. if\r\nthere are apples in same inflorescence in same time, only one will not\r\nbe annihilated and if there are apples, all apples will be annihilated.\r\nThus, there can be no more than one apple in each inflorescence in each\r\nmoment of time.Help Arcady with counting number of apples he will be\r\nable to collect from first inflorescence during one harvest.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nvector<int> adj[100010];\nint d[100010] = {};\n\nvoid dfs(int x, int dp) {\n\td[dp]++;\n\tfor(int u : adj[x]) {\n\t\tdfs(u, dp+1);\n\t}\n}\n\nint main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tint n;\n\tcin >> n;\n\tfor(int i = 1; i < n; ++i) {\n\t\tint x;\n\t\tcin >> x;\n\t\t--x;\n\t\tadj[x].push_back(i);\n\t}\n\tdfs(0, 0);\n\tint ans = 0;\n\tfor(int i = 0; i < 100010; ++i) ans += d[i] & 1;\n\tcout << ans << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs",
        "trees"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Peculiar apple-tree.json",
    "editorial_link": "https://codeforces.com//blog/entry/58177",
    "editorial": "\nFirstly, let's formalize problem: we have tree with root in first inflorescence. Let's examine apples that can roll down to the base of tree in t-th moment of time. It is obvious this are apples initially situated in nodes at t distance from root.\n\nKey idea of solution is that we can suppose that apples in nonroot nodes don't annihilate but roll down to the very root and annihilate in it. This assumption is correct because number of apples in root at the t-th moment depends only on parity of apples that got there at that moment.\n\nThus let's calculate cntt   number of apples that will appear in root in root in t-th moment of time for each t. This can be performed by BFS or DFS.\n\nAnswer for this problem is sum of all cntt mod 2 (a mod b means calculating remainder a modulo b) for each t from 0 up to d, where d is maximal distance from root to node of tree.",
    "hint": []
}