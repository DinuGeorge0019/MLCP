{
    "link": "https://codeforces.com//contest/1323/problem/C",
    "problemId": "555652",
    "problem_idx": "C",
    "shortId": "1323C",
    "contest_number": "1323",
    "problem_submissions": {
        "E": [
            72646123,
            72653285,
            72643665,
            72638538,
            72651824,
            72641452,
            73215564,
            74923998,
            74923708,
            73375083
        ],
        "D": [
            72641565,
            72643228,
            72648719,
            72647003,
            72657000,
            72637909,
            72646207,
            72643501,
            72637563,
            72646014,
            72647579,
            72648996,
            72648307,
            72652014,
            72649186,
            72646691,
            72649030,
            72650695,
            72651530
        ],
        "B": [
            72636401,
            72633103,
            72651379,
            72658721,
            72640042,
            72636596,
            72635014,
            72632358,
            72634390,
            72641816,
            72634710,
            72636519,
            72636057,
            72635279,
            72633123,
            72635193,
            72638653,
            72635061,
            72634039,
            72635382
        ],
        "A": [
            72633163,
            72628485,
            72649551,
            72644013,
            72634218,
            72632880,
            72629084,
            72628191,
            72629890,
            72628412,
            72628653,
            72634993,
            72629129,
            72628869,
            72628314,
            72629285,
            72631475,
            72629827,
            72628727,
            72629930
        ],
        "C": [
            72632322,
            72637080,
            72632032,
            72656932,
            72642708,
            72635949,
            72629179,
            72635274,
            72637583,
            72643824,
            72637576,
            72633880,
            72637844,
            72637960,
            72635809,
            72640203,
            72642430,
            72637773,
            72640096,
            72637917
        ],
        "F": [
            72957747
        ]
    },
    "name": "C. Unusual Competitions",
    "statement": "A bracketed sequence is called correct (regular) if by inserting \"+\" and\r\n\"1\" you can get a well-formed mathematical expression from it. For\r\nexample, sequences \"\", \"\" and \"\" are correct, while \"\", \"\" and \"\" are\r\nnot.The teacher gave Dmitry\u2019s class a very strange task she asked every\r\nstudent to come up with a sequence of arbitrary length, consisting only\r\nof opening and closing brackets. After that all the students took turns\r\nnaming the sequences they had invented. When Dima\u2019s turn came, he\r\nsuddenly realized that all his classmates got the correct bracketed\r\nsequence, and whether he got the correct bracketed sequence, he did not\r\nknow.Dima suspects now that he simply missed the word \"correct\" in the\r\ntask statement, so now he wants to save the situation by modifying his\r\nsequence slightly. More precisely, he can (possibly zero) perform the\r\noperation.The reorder operation consists of choosing an arbitrary\r\nconsecutive subsegment (substring) of the sequence and then reordering\r\nall the characters in it in an arbitrary way. Such operation takes l\r\nnanoseconds, where l is the length of the subsegment being reordered.\r\nIt\u2019s easy to see that reorder operation doesn\u2019t change the number of\r\nopening and closing brackets. For example for \"\" he can choose the\r\nsubstring \"\" and do reorder \"\" (this operation will take 2\r\nnanoseconds).Since Dima will soon have to answer, he wants to make his\r\nsequence correct as fast as possible. Help him to do this, or determine\r\nthat it\u2019s impossible.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define ll  long long\n#define ld  double\n\n#define sz(x)   (int)x.size()\n#define all(x)  x.begin(),x.end()\n\n#define pb  emplace_back\n#define X   first\n#define Y   second\n\nconst int   N   = 2e5 + 5;\n\ntypedef pair<int,int>   ii;\n\nint f[N];\n\nint main()  {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0); cout.tie(0);\n\n    int n;      cin >> n;\n    string S;   cin >> S;\n\n    int Sum = 0;\n    int ans = 0;\n\n    for(char c : S) {\n        if (c == '(')   Sum++;\n        if (c == ')')   Sum--;\n\n        if (Sum < 0)\n            ans++;\n        if (Sum == -1 && c == ')')\n            ans++;\n    }\n    if (Sum)    {\n        cout << -1;\n        return  0;\n    }\n    cout << ans << endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Unusual Competitions.json",
    "editorial_link": "https://codeforces.com//blog/entry/74148",
    "editorial": "Obviously, if the number of opening brackets is not equal to the number of closing ones, then since the described operation does not change their number, it will be impossible to get the correct sequence. Otherwise, if their numbers are equal, you can take the entire string and rearrange its n\n characters so that the string becomes a right bracketed sequence, for example, \"((((\u0085\n))))\".\n\nLet pi\n be a prefix balance on the first i\n characters, that is, the difference between the number of opening and closing brackets.\n\nConsider an index i\n such that bali?1?0\n, bali<0\n, or bali?1<0\n, bali?0\n. Then, if the si\n character does not participate in any shuffle oeration, the resulting string will have a i\nth or i?1\nth prefix balance negative, making the resulting sequence incorrect. This means that at least characters with such indexes i\n must participate in at least one operation. It will be shown below how to use only them in shuffles to make a right bracketed sequence.\n\nLet's represent this bracketed sequence as a polyline. It will start at the point with coordinates (0,0)\n, end at the point with coordinates (2n,0)\n, i\n - th vector of this polyline will be equal to (+1,+1)\n, if si=\n ( and (+1,?1)\n otherwise. Then the above-described indexes i\n, which must participate in at least one operation \u0097 are exactly all the segments below the line x=0\n. To make the sequence correct, we will turn all consecutive segments of such brackets backwards. It's not hard to see that the sequence will become correct.\n\nAn example of this conversion is shown below:\n\n\nGiven sequence was ())(()))()((\n\nAfter reshuffling 2 segments of total length 8, we can get a right bracketed sequence:()()((()())"
}