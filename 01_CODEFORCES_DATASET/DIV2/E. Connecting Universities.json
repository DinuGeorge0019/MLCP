{
    "link": "https://codeforces.com//contest/701/problem/E",
    "problemId": "66141",
    "problem_idx": "E",
    "shortId": "701E",
    "contest_number": "701",
    "problem_submissions": {
        "E": [
            19339232,
            19339967,
            19337387,
            19341119,
            19340472,
            19343370,
            19332036,
            19343768,
            19337227,
            19342206,
            19342884,
            19343434,
            19342706,
            19342112,
            19341446,
            19342774,
            19344918,
            19340782,
            19346141
        ],
        "D": [
            19336197,
            19336702,
            19340772,
            19337219,
            19338809,
            19336973,
            19345986,
            19337675,
            19341726,
            19340266,
            19337393,
            19339026,
            19340545,
            19339268,
            19343887,
            19339934,
            19334768,
            19345648,
            19338666
        ],
        "C": [
            19331548,
            19332315,
            19332582,
            19333338,
            19335372,
            19333598,
            19333759,
            19333561,
            19330276,
            19333948,
            19333692,
            19333063,
            19336324,
            19334938,
            19331957,
            19334534,
            19332828,
            19333541,
            19333823
        ],
        "B": [
            19328928,
            19333250,
            19330458,
            19331322,
            19331881,
            19330225,
            19337888,
            19330033,
            19333637,
            19330238,
            19331397,
            19328913,
            19331820,
            19331326,
            19330196,
            19332294,
            19330540,
            19331717,
            19331319
        ],
        "A": [
            19328299,
            19329195,
            19329297,
            19328777,
            19328512,
            19328665,
            19336083,
            19328494,
            19331305,
            19328347,
            19328615,
            19328349,
            19330505,
            19328746,
            19328523,
            19328329,
            19328905,
            19329447,
            19329651
        ],
        "F": [
            19425122,
            19349150,
            19462368,
            19462354
        ]
    },
    "name": "E. Connecting Universities",
    "statement": "Treeland is a country in which there are towns connected by two-way road\r\nsuch that it\u2019s possible to get from any town to any other town. In\r\nTreeland there are universities which are located in different towns.\r\nRecently, the president signed the decree to connect universities by\r\nhigh-speed network.The Ministry of Education understood the decree in\r\nits own way and decided that it was enough to connect each university\r\nwith another one by using a cable. Formally, the decree will be done! To\r\nhave the maximum sum in the budget, the Ministry decided to divide\r\nuniversities into pairs so that the total length of the required cable\r\nwill be maximum. In other words, the total distance between universities\r\nin pairs should be as large as possible. Help the Ministry to find the\r\nmaximum total distance. Of course, each university should be present in\r\nonly one pair. Consider that all roads have the same length which is\r\nequal to .\r\n",
    "solutions": [
        "#include<cstdlib>\n#include<cctype>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<iostream>\n#include<sstream>\n#include<map>\n#include<set>\n#include<queue>\n#include<stack>\n#include<fstream>\n#include<numeric>\n#include<iomanip>\n#include<bitset>\n#include<list>\n#include<stdexcept>\n#include<functional>\n#include<utility>\n#include<ctime>\n#include<cassert>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(int)(n);i++)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) ((int)(x).size())\n#define MP make_pair\n#define PB push_back\n#define AA first\n#define BB second\n#define OP begin()\n#define ED end()\n#define SZ size()\ntypedef long long LL;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\ntypedef vector<int> VI;\ntypedef vector<LL> VL;\n#define cmin(x,y) x=min(x,y)\n#define cmax(x,y) x=max(x,y)\nconst LL MOD = 1000000007;\nconst double PI = acos(-1.);\nconst double eps = 1e-9;\nLL modPow(LL a,LL b,LL MOD){\n\tLL ret=1;for(;b;b>>=1){\n\t\tif(b&1)ret=ret*a%MOD;a=a*a%MOD;\n\t}return ret;\n}\n\nvector<int>G[200005];\nint u[200005];\nint q[200005],ql,qr;\nint vis[200005];\nint fa[200005];\nint ns[200005];\nvoid solve(){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\trep(i,1,n+1)u[i]=0,G[i].clear(),vis[i]=0,fa[i]=-1;\n\trep(i,0,2*m){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tu[x]=1;\n\t}\n\trep(i,0,n-1){\n\t\tint p,q;\n\t\tscanf(\"%d%d\",&p,&q);\n\t\tG[p].PB(q),G[q].PB(p);\n\t}\n\tql=qr=0;\n\tq[qr++]=1;\n\tvis[1]=1;\n\twhile(qr>ql){\n\t\tint x=q[ql++];\n\t\trep(i,0,sz(G[x])){\n\t\t\tint y=G[x][i];\n\t\t\tif(vis[y])continue;\n\t\t\tvis[y]=1;\n\t\t\tq[qr++]=y;\n\t\t\tfa[y]=x;\n\t\t}\n\t}\n\tLL ans=0;\n\tfor(int i=n-1;i>=0;i--){\n\t\tint x=q[i];\n\t\tns[x]=u[x];\n\t\trep(j,0,sz(G[x])){\n\t\t\tint y=G[x][j];\n\t\t\tif(y==fa[x])continue;\n\t\t\tns[x]+=ns[y];\n\t\t}\n\t\tans+=min(ns[x],2*m-ns[x]);\n\t}\n\tprintf(\"%I64d\\n\",ans);\n}\n\nint main(){\n\tint _T=1;\n\trep(CA,0,_T){\n\t\tsolve();\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "graphs",
        "trees"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Connecting Universities.json",
    "editorial_link": "https://codeforces.com//blog/entry/46283",
    "editorial": "Let\u00e2\u0080\u0099s root a tree with vertex by single DFS and by the way find two\r\nvalues for every vertex : length of the edge that leads from parent of\r\nto vertex ; the number of universities in the subtree of vertex\r\n(including itself). Consider any optimal solution, i.e. such solution\r\nthat the total length is maximum. Look at some edge that leads from the\r\nparent of to . We claim that it should be used in paths. It obviously\r\ncannot be used more time than this value, however, if it is used less\r\nnumber of times, that means there is at least one connected pair (let\u00e2\u0080\u0099s\r\nsay and ) located in the subtree of and at least one connected pair\r\nlocated outside (vertices and ). By the properties of the tree, paths\r\nfrom to and from to cover all edges of the paths from to and from to\r\nplus some extra edges, meaning the current answer is not optimal. Thus,\r\nthis edge will be used exactly times.The above means we can compute the\r\nanswer value as . Note that the above method doesn\u00e2\u0080\u0099t provide the optimal\r\nmatching itself (though, not many modifications required).\r\n"
}