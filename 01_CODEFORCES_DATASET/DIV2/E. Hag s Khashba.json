{
    "link": "https://codeforces.com//contest/975/problem/E",
    "problemId": "179943",
    "problem_idx": "E",
    "shortId": "975E",
    "contest_number": "975",
    "problem_submissions": {
        "E": [
            37816370,
            37813409,
            37822383,
            37823053,
            37822980,
            37827685
        ],
        "D": [
            37811765,
            37818256,
            37809031,
            37810818,
            37810958,
            37809945,
            37821284,
            37811538,
            37811831,
            37813423,
            37811960,
            37812411,
            37812713,
            37812337,
            37812042,
            37812735,
            37814476,
            37812168,
            37813847
        ],
        "C": [
            37806281,
            37806363,
            37804979,
            37805578,
            37804360,
            37804440,
            37821200,
            37821166,
            37821144,
            37821019,
            37820867,
            37820774,
            37806683,
            37806043,
            37805497,
            37803505,
            37807380,
            37806289,
            37807089,
            37807897,
            37808134,
            37806223,
            37805766,
            37803795
        ],
        "B": [
            37803296,
            37802840,
            37803779,
            37802570,
            37805983,
            37805016,
            37803559,
            37805291,
            37804701,
            37803620,
            37805350,
            37804764,
            37804751,
            37803055,
            37803333,
            37807375
        ],
        "A": [
            37801128,
            37800869,
            37800960,
            37801705,
            37801031,
            37801042,
            37802652,
            37801616,
            37801102,
            37801914,
            37802731,
            37801888,
            37801010,
            37801985,
            37803138,
            37801035,
            37801033,
            37805139
        ]
    },
    "name": "E. Hag s Khashba",
    "statement": "Hag is a very talented person. He has always had an artist inside him\r\nbut his father forced him to study mechanical engineering.Yesterday he\r\nspent all of his time cutting a giant piece of wood trying to make it\r\nlook like a goose. Anyway, his dad found out that he was doing arts\r\nrather than studying mechanics and other boring subjects. He confronted\r\nHag with the fact that he is a spoiled son that does not care about his\r\nfuture, and if he continues to do arts he will cut his 25 Lira monthly\r\nallowance.Hag is trying to prove to his dad that the wooden piece is a\r\nproject for mechanics subject. He also told his dad that the wooden\r\npiece is a polygon with n vertices.Hag brought two pins and pinned the\r\npolygon with them in the 1-st and 2-nd vertices to the wall. His dad has\r\nq queries to Hag of two types. 1 f t: pull a pin from the vertex f, wait\r\nfor the wooden polygon to rotate under the gravity force (if it will\r\nrotate) and stabilize. And then put the pin in vertex t. 2 v: answer\r\nwhat are the coordinates of the vertex v. Please help Hag to answer his\r\nfather\u2019s queries.You can assume that the wood that forms the polygon has\r\nuniform density and the polygon has a positive thickness, same in all\r\npoints. After every query of the 1-st type Hag\u2019s dad tries to move the\r\npolygon a bit and watches it stabilize again.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define fr(x, y, z) for(int x=y;x<z;x++)\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<ll,ll> pll;\ntypedef pair<pll,ll> ppl;\nconst int ms=1e4+10;\n\nconst double eps = 1e-8;\nconst double pi = acos(-1.0);\n \nint cmp(double a, double b = 0) {\n    if (fabs(a-b) < eps) return 0;\n    else if (a < b) return -1;\n    return 1;\n}\n \nstruct PT {\n    double x, y;\n \n    PT () {}\n    PT(double x, double y) : x(x), y(y) {}\n     \n    //Chamemos (*this) de p\n    PT operator+(const PT &q) const { return PT(x+q.x, y+q.y); }\n    PT operator-(const PT &q) const { return PT(x-q.x, y-q.y); }\n    PT operator*(double t) const { return PT(x*t, y*t); }\n    PT operator/(double t) const { return PT(x/t, y/t); }\n    PT operator-() const { return PT(-x, -y); }\n    PT operator[](double t) const { return PT(x*cos(t) - y*sin(t), x*sin(t) + y*cos(t)); } //rotaciona p em t radianos anti-horario\n    double operator*(const PT &q) const { return x*q.x + y*q.y; } //produto escalar entre p e q\n    double operator%(const PT &q) const { return x*q.y - y*q.x; } //produto cruzado entre p e q\n    double operator!() const { return sqrt(x*x + y*y); } //norma de p\n    double operator^(const PT &q) const { return atan2(*this%q,*this*q); } //pega o angulo entre p e q\n    double operator>(const PT &q) const { return ((*this*q)/(q*q)); } //pega o k da proje\u00e7\u00e3o de p em q\n};\n\nPT cen, pts[ms];\n\nvoid print(PT p){\n    return;\n    cout<<\"(\"<<p.x<<\", \"<<p.y<<\")\"<<endl;\n}\nint main(){\n    ll n,a=0,b=1,q;\n    ll ans=0;\n    scanf(\"%lld%lld\",&n,&q);\n    fr(i,0,n){\n        scanf(\"%lf%lf\",&pts[i].x,&pts[i].y);\n        //cout<<pts[i].x<<\" \"<<pts[i].y<<endl;\n    }\n    double mass=0;\n    fr(i,2,n){\n        PT temp = (pts[0]+pts[i-1]+pts[i])/3;\n        double tmass=fabs((pts[i-1]-pts[0])%(pts[i]-pts[0]));\n        \n    //cout<<cen.x<<\" \"<<cen.y<<endl;\n    //cout<<temp.x<<\" \"<<temp.y<<endl;\n        cen = cen * mass + temp * tmass;\n        mass += tmass;\n        cen = cen / mass;\n    }\n    fr(i,0,n){\n        pts[i]=pts[i]-cen;\n    }\n    ld ang=0;\n    fr(i,0,q){\n        int c;\n        scanf(\"%d\",&c);\n        if(c==1){\n            scanf(\"%d\",&c);\n            c--;\n            if(b==c)swap(a,b);\n            cen=cen+pts[b][ang];\n            print(cen);\n            ld tang=(pts[b][ang])^PT(0,1);\n            \n            ang+=tang;\n            if(ang>2*pi)ang-=2*pi;\n            if(ang<2*pi)ang+=2*pi;\n            cen=cen-pts[b][ang];\n            print(cen);\n            \n            scanf(\"%d\",&c);\n            c--;\n            a=c;\n        }else{\n            \n            scanf(\"%d\",&c);\n            c--;\n            PT temp=pts[c][ang]+cen;\n            printf(\"%.08lf %.08lf\\n\",temp.x,temp.y);\n        }\n    }\n    \n   // cout<<cen.x<<\" \"<<cen.y<<endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Hag s Khashba.json",
    "editorial_link": "https://codeforces.com//blog/entry/59202",
    "editorial": "In this problem, we calculate the center of mass of the polygon (ie its\r\ncentroid) and then we make it our reference point. we maintain its\r\ncoordinates after each and every rotation.Now when the pin is taken out\r\nfrom a vertex it leaves the other pin as a pivot for rotation we\r\ncalculate the angle of current rotation. calculate the new coordinates\r\nof the center of mass after rotation, we should also store the initial\r\ndistances from the center of mass, and the angle that the polygon had\r\nrotated around itself.from the angle, coordinates of the center of mass\r\nand the initial distances from the center of mass it is possible to\r\ncalculate the coordinates of any point in the polygon.Note: when\r\ncalculating the center of mass we should shift the polygon to the (0,0)\r\nbecause in some algorithms it uses point (0,0) in triangulation the\r\npolygon. if the polygon is very far from (0,0) accuracy will be lost. so\r\nbetter to either shift the polygon to (0,0) or use the first point of\r\nthe polygon to form the sub-triangles of the polygon when calculating\r\nthe center of mass.\r\n"
}