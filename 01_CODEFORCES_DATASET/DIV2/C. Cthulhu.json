{"link": "https://codeforces.com//contest/104/problem/C", "problemId": "549", "problem_idx": "C", "shortId": "104C", "contest_number": "104", "problem_submissions": {"E": [594572, 595447, 594514, 593423, 594676, 594292, 594547], "C": [591857, 591809, 591800, 592033, 590961, 15833664, 592207, 591755, 592040, 591871, 591464, 592241, 593499, 592011, 592711, 594849], "D": [593368, 592821, 593272, 594806, 593597, 594364, 594478, 594691, 596431, 595141, 594573, 592760], "B": [590511, 590167, 590267, 590358, 590770, 590604, 591136, 590892, 591094, 590607, 590251, 590834, 590212, 591386, 590970], "A": [589657, 589353, 589356, 589622, 590590, 589788, 589796, 590775, 590074, 589669, 589302, 590025, 589306, 590532, 589463]}, "name": "C. Cthulhu", "statement": "...Once upon a time a man came to the sea. The sea was stormy and dark.\r\nThe man started to call for the little mermaid to appear but alas, he\r\nonly woke up Cthulhu...Whereas on the other end of the world Pentagon is\r\nactively collecting information trying to predict the monster\u2019s behavior\r\nand preparing the secret super weapon. Due to high seismic activity and\r\npoor weather conditions the satellites haven\u2019t yet been able to make\r\nclear shots of the monster. The analysis of the first shot resulted in\r\nan undirected graph with vertices and edges. Now the world\u2019s best minds\r\nare about to determine whether this graph can be regarded as Cthulhu or\r\nnot.To add simplicity, let\u2019s suppose that Cthulhu looks from the space\r\nlike some spherical body with tentacles attached to it. Formally, we\r\nshall regard as Cthulhu such an undirected graph that can be represented\r\nas a set of three or more rooted trees, whose roots are connected by a\r\nsimple cycle.It is guaranteed that the graph contains no multiple edges\r\nand self-loops.\r\n", "solutions": ["#include <stdio.h>\n#include <string.h>\n\n\nconst int INF = 999666111;\n\nint n, m;\nint g[128][128];\nint t[128][128];\n\nvoid input(void)\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 0; i < m; i++) {\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tx--, y--;\n\t\tg[x][y] = g[y][x] = 1;\n\t}\n}\n\nint ds[128], pr[128], ps[128];\n\nbool prim(void)\n{\n\tfor (int i = 0; i < n; i++) ds[i] = INF;\n\tfor (int i = 0; i < n; i++) pr[i] = -1;\n\tds[0] = 0;\n\twhile (1) {\n\t\tint bi = -1, mdist = INF;\n\t\tfor (int i = 0; i < n; i++) if (!ps[i] && ds[i] < mdist) {\n\t\t\tbi = i;\n\t\t\tmdist = ds[i];\n\t\t}\n\t\tif (bi == -1) break;\n\t\tps[bi] = 1;\n\t\tif (pr[bi] != -1) {\n\t\t\tt[pr[bi]][bi] = t[bi][pr[bi]] = 1;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) if (!ps[i]) {\n\t\t\tif (ds[i] >= INF && g[bi][i]) {\n\t\t\t\tds[i] = ds[bi] + 1;\n\t\t\t\tpr[i] = bi;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) if (ds[i] >= INF) return false;\n\treturn true;\n}\n\nint ncyc(void)\n{\n\tint c = 0;\n\tfor (int i = 0; i < n; i++) for (int j = i + 1; j < n; j++)\n\t\tif (g[i][j] && !t[i][j]) c++;\n\treturn c;\n}\n\nvoid doit(void)\n{\n\tif (prim() && ncyc() == 1) printf(\"FHTAGN!\\n\");\n\telse\n\t\tprintf(\"NO\\n\");\n}\n\n\nint main(void)\n{\n\tinput();\n\tdoit();\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["dsu", "trees"], "dificulty": "1500", "interactive": false}