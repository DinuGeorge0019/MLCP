{
    "link": "https://codeforces.com//contest/782/problem/D",
    "problemId": "96958",
    "problem_idx": "D",
    "shortId": "782D",
    "contest_number": "782",
    "problem_submissions": {
        "B": [
            25267905,
            25250113,
            25247221,
            25250057,
            25249960,
            25260592,
            25250810,
            25250250,
            25247987,
            25248996,
            25252120,
            25252630,
            25250336,
            25258914,
            25255792,
            25254407,
            25252511,
            25252408,
            25251554,
            25264621,
            25253624
        ],
        "E": [
            25257921,
            25262484,
            25258744,
            25260005,
            25259671,
            25259859,
            25263675,
            25263558,
            25261219,
            25263312,
            25264852,
            25262648,
            25263111,
            25263112,
            25265502,
            25264818,
            25264138,
            25263813,
            25263236,
            25499887,
            25266724,
            25260260,
            25256767
        ],
        "D": [
            25255317,
            25254040,
            25254587,
            25256934,
            25261275,
            25263628,
            25259016,
            25257085,
            25258676,
            25258895,
            25257929,
            25259738,
            25253164,
            25260236,
            25257532,
            25259424,
            25260675,
            25259499,
            25261948,
            25267588
        ],
        "C": [
            25252879,
            25249891,
            25251779,
            25251734,
            25260562,
            25253017,
            25252465,
            25250777,
            25252022,
            25254042,
            25255189,
            25253477,
            25255602,
            25254511,
            25256655,
            25255363,
            25254268,
            25254004,
            25250050,
            25250430
        ],
        "A": [
            25247630,
            25246175,
            25246521,
            25247338,
            25259975,
            25247530,
            25246345,
            25246130,
            25246627,
            25246669,
            25247634,
            25246833,
            25257300,
            25246231,
            25249989,
            25247211,
            25250337,
            25247505,
            25500110,
            25251276,
            25246111
        ],
        "F": [
            25264803,
            25787036,
            25277978
        ]
    },
    "name": "D. Innokenty and a Football League",
    "statement": "Innokenty is a president of a new football league in Byteland. The first\r\ntask he should do is to assign short names to all clubs to be shown on\r\nTV next to the score. Of course, the short names should be distinct, and\r\nInnokenty wants that all short names consist of .Each club\u2019s full name\r\nconsist of two words: the team\u2019s name and the hometown\u2019s name, for\r\nexample, \"\". Innokenty doesn\u2019t want to assign strange short names, so he\r\nwants to choose such short names for each club that: the short name is\r\nthe same as three first letters of the team\u2019s name, for example, for the\r\nmentioned club it is \"\", or, the first two letters of the short name\r\nshould be the same as the first two letters of the team\u2019s name, while\r\nthe third letter is the same as the first letter in the hometown\u2019s name.\r\nFor the mentioned club it is \"\". Apart from this, there is a rule that\r\nif for some club the second option of short name is chosen, then there\r\nshould be no club, for which the first option is chosen which is the\r\nsame as the first option for the club . For example, if the above\r\nmentioned club has short name \"\", then no club for which the first\r\noption is chosen can have short name equal to \"\". However, it is\r\npossible that some club have short name \"\", where \"\" are the first two\r\nletters of the team\u2019s name, and \"\" is the first letter of hometown\u2019s\r\nname. Of course, no two teams can have the same short name.Help\r\nInnokenty to choose a short name for each of the teams. If this is\r\nimpossible, report that. If there are multiple answer, any of them will\r\nsuit Innokenty. If for some team the two options of short name are\r\nequal, then Innokenty will formally think that only one of these options\r\nis chosen.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstring>\n#include<queue>\n\nint n, sno[1003];\nchar s[1003][2][21], sn[2][1003][4];\nbool iq[1003];\nstd::queue<int> q;\n\nvoid push(int x) {\n\tif (!iq[x]) q.push(x);\n\tiq[x] = true;\n}\n\nbool check() {\n\tfor (int i = 0; i < n; i++) for (int j = i + 1; j < n; j++) if (!strcmp(sn[sno[i]][i], sn[sno[j]][j])) return false;\n\treturn true;\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%s %s\", s[i][0], s[i][1]);\n\t\tstrncpy(sn[0][i], s[i][0], 3);\n\t\tstrncpy(sn[1][i], s[i][0], 2);\n\t\tstrncat(sn[1][i], s[i][1], 1);\n\t}\n\tfor (int i = 0; i < n; i++) for (int j = i + 1; j < n; j++) if (!strcmp(sn[0][i], sn[0][j])) {\n\t\tpush(i);\n\t\tpush(j);\n\t\tsno[i] = sno[j] = 1;\n\t}\n\twhile(!q.empty()) {\n\t\tint x = q.front();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (!strcmp(sn[0][i], sn[1][x])) {\n\t\t\t\tpush(i);\n\t\t\t\tsno[i] = 1;\n\t\t\t}\n\t\t}\n\t\tq.pop();\n\t}\n\tif (check()) {\n\t\tprintf(\"YES\\n\");\n\t\tfor (int i = 0; i < n; i++) printf(\"%s\\n\", sn[sno[i]][i]);\n\t}\n\telse printf(\"NO\\n\");\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "greedy",
        "shortest paths",
        "strings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Innokenty and a Football League.json",
    "editorial_link": "https://codeforces.com//blog/entry/50854",
    "editorial": "Let us write ai and bi for first and second options for i-th club name.\n\nIf all ai are distinct, we can assign all of them to be club names without conflict. Otherwise, suppose that for clubs i, j we have ai?=?aj, hence we can't use them simultaneously. Note that, say, choosing ai and bj is also forbidden by the statement. It follows that we must use bi and bj as i-th and j-th club names respectively.\n\nIf for some other club k we now have ak?=?bi, then we are forced to use bk as its name as well. We can process this kind of chain conflicts with a BFS-like procedure. If at any point we are forced to use the same name for two different clubs, then the answer is NO. Otherwise, resolving all conflicts will yield a correct assignment.\n\nComplexity: O(n) memory and time if implemented carefully (not necessary though)."
}