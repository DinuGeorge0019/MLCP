{
    "link": "https://codeforces.com//contest/1856/problem/A",
    "problemId": "2145352",
    "problem_idx": "A",
    "shortId": "1856A",
    "contest_number": "1856",
    "problem_submissions": {
        "E2": [
            217327108,
            217341724,
            217337731,
            217337437,
            217412216,
            217338400,
            217336393,
            217345459,
            217391033,
            217321012,
            217492472,
            217488570,
            217325278,
            217439292,
            217437989,
            217363475,
            217446369,
            217445127,
            217406790
        ],
        "D": [
            217299783,
            217294842,
            217318244,
            217319013,
            217306383,
            217302272,
            217316304,
            217332681,
            217344634,
            217306374,
            217314009,
            217314765,
            217312837,
            217302425,
            217303810,
            217314415,
            217312870,
            217318456,
            217300443,
            217400494,
            217316669
        ],
        "E1": [
            217289515,
            217306137,
            217300615,
            217308752,
            217314014,
            217319703,
            217297854,
            217321288,
            217321307,
            217290094,
            217290570,
            217296889,
            217296429,
            217312238,
            217311348,
            217286339,
            217297816,
            217298120,
            217312665,
            217400516,
            217300470
        ],
        "C": [
            217279950,
            217281231,
            217291934,
            217287003,
            217296034,
            217283292,
            217292390,
            217290232,
            217308894,
            217275596,
            217275048,
            217281202,
            217279491,
            217289317,
            217288630,
            217298170,
            217285184,
            217287913,
            217284586,
            217400474,
            217290893
        ],
        "B": [
            217269320,
            217271397,
            217269501,
            217272164,
            217281399,
            217274759,
            217266730,
            217267264,
            217269590,
            217284481,
            217268556,
            217268444,
            217267764,
            217270460,
            217268264,
            217272318,
            217272448,
            217269161,
            217271865,
            217400507,
            217272774
        ],
        "A": [
            217264730,
            217266241,
            217264910,
            217266955,
            217265330,
            217267424,
            217264736,
            217264718,
            217265900,
            217267758,
            217264795,
            217265478,
            217264842,
            217265458,
            217264741,
            217264735,
            217265053,
            217264661,
            217265267,
            217400456,
            217266136
        ]
    },
    "name": "A. Tales of a Sort",
    "statement": "Alphen has an array of positive integers a of length n.Alphen can\r\nperform the following operation: For i from 1 to n, replace a_i with\r\nmax(0, a_i - 1). Alphen will perform the above operation until a is\r\nsorted, that is a satisfies a_1\r\nleq a_2\r\nleq\r\nldots\r\nleq a_n. How many operations will Alphen perform? Under the constraints\r\nof the problem, it can be proven that Alphen will perform a finite\r\nnumber of operations.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define ld long double\n#define ll long long int\n#define st first\n#define nd second\n#define pb push_back\n#define pii pair<int,int>\n#define mp make_pair\n\nusing namespace std;\n\n\nconst int N = 55;\nll a[N];\nint n;\n\nvoid solve(){\n    ll mx = 0;\n    cin >> n;\n    for(int i=1;i<=n;i++){\n        cin >> a[i];\n        if(i >= 2 && a[i - 1] > a[i]) mx = max(mx, a[i - 1]);\n    }\n    cout << mx << \"\\n\";\n}\n\nint main(){\n    ios_base::sync_with_stdio(0); cin.tie(0);\n\n    int tt = 1;\n    cin >> tt;\n    while(tt--) solve();\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Tales of a Sort.json",
    "editorial_link": "https://codeforces.com//blog/entry/119058",
    "editorial": "Suppose we have performed operations and have gotten the array . Then\r\nfor all from to .If is sorted, then for all from to . In other words, .\r\nLetâs find for which this inequality holds.Suppose . Then is true for\r\nany .Now suppose . Then is true only if .For the array to be sorted\r\nafter operations, must hold for all . From the statements above, we can\r\nsee that the smallest for which this is true is equal to the maximum\r\nvalue of over all such that . If no such exists, the answer is , since\r\nthe array is already sorted.Complexity: Note: there are at least two\r\nother solutions: The solution above is also equivalent to finding the\r\nmaximum value of over all such that , which leads to a solution.\r\nAlternatively, you can do binary search on the answer to get a solution,\r\nwhere is the maximum possible value of .\r\n",
    "hint": [
        "Hint 1 How many operations are needed to make if initially, ?"
    ]
}