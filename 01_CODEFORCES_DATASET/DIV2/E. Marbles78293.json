{
    "link": "https://codeforces.com//contest/608/problem/E",
    "problemId": "43764",
    "problem_idx": "E",
    "shortId": "608E",
    "contest_number": "608",
    "problem_submissions": {
        "E": [
            14954683,
            14954321,
            14954967,
            14955933,
            14956930,
            14989274
        ],
        "D": [
            14948975,
            14955911,
            14950351,
            14951548,
            14950173,
            14953248,
            14946689,
            14948327,
            14947848,
            14948851,
            14949821,
            14949443,
            15002023,
            14945126,
            14950775,
            14949904,
            14949831,
            14950588,
            14950645,
            14950938,
            14949897
        ],
        "C": [
            14945727,
            14946619,
            14946995,
            14949787,
            14946924,
            14950673,
            14943809,
            14945500,
            14946278,
            14947165,
            14947087,
            14945923,
            14951157,
            14946593,
            14946790,
            14948255,
            14946254,
            14947790,
            14946313,
            14947513
        ],
        "B": [
            14943326,
            14943191,
            14943393,
            14946771,
            14944173,
            14948008,
            14945018,
            14943391,
            14944514,
            14944104,
            14944387,
            14943821,
            15002142,
            14948152,
            14944125,
            14944530,
            14944871,
            14943806,
            14944927,
            14944558,
            14946007
        ],
        "A": [
            14941960,
            14941817,
            14941888,
            14941881,
            14943576,
            14941987,
            14942178,
            14941800,
            14942424,
            14942297,
            14942192,
            14946279,
            14942201,
            14941803,
            14942278,
            14942854,
            14942697,
            14941911,
            14941863
        ]
    },
    "name": "E. Marbles",
    "statement": "In the spirit of the holidays, Saitama has given Genos two grid paths of\r\nlength (a weird gift even by Saitama\u2019s standards). A grid path is an\r\nordered sequence of neighbouring squares in an infinite grid. Two\r\nsquares are neighbouring if they share a side.One example of a grid path\r\nis . Note that squares in this sequence might be repeated, i.e. path has\r\nself intersections.Movement within a grid path is restricted to adjacent\r\nsquares within the sequence. That is, from the -th square, one can to\r\nthe -th or -th squares of this path. Note that there is only a single\r\nvalid move from the first and last squares of a grid path. Also note,\r\nthat even if there is some -th square of the path that coincides with\r\nthe -th square, only moves to -th and -th squares are available. For\r\nexample, from the second square in the above sequence, one can only move\r\nto either the first or third squares.To ensure that movement is not\r\nambiguous, the two grid paths will not have an alternating sequence of\r\nthree squares. For example, a contiguous subsequence in a valid grid\r\npath.One marble is placed on the first square of each grid path. Genos\r\nwants to get both marbles to the last square of each grid path. However,\r\nthere is a catch. Whenever he moves one marble, the other marble will\r\ncopy its movement if possible. For instance, if one marble moves east,\r\nthen the other marble will and move east as well. By , we mean if moving\r\neast is a valid move, then the marble will move east.Moving north\r\nincreases the second coordinate by , while moving south decreases it by\r\n. Similarly, moving east increases first coordinate by , while moving\r\nwest decreases it.Given these two valid grid paths, Genos wants to know\r\nif it is possible to move both marbles to the ends of their respective\r\npaths. That is, if it is possible to move the marbles such that both\r\nmarbles rest on the last square of their respective paths.\r\n",
    "solutions": [
        "#include <iostream>\nusing namespace std;\n\ntypedef unsigned long long ull;\n\nint n;\nstring a, b;\n\nint op(char a){\n  if (a=='N') return 'S';\n  if (a=='E') return 'W';\n  if (a=='S') return 'N';\n  if (a=='W') return 'E';\n}\n\null A=23;\null B=1000000007;\n\n\null ahs[1222000];\null bhs[1222000];\null hsh[1222000];\n\nint main(){\n  cin >> n;\n  cin >> a >> b;\n  for (int i=0; i<(a.size()+1)/2; ++i){\n    char g=a[i];\n    a[i]=op(a[a.size()-i-1]);\n    a[a.size()-i-1]=op(g);\n  }\n  hsh[0]=1;\n  for (int i=1; i<n; ++i){\n    hsh[i]=hsh[i-1]*A;\n    ahs[i]=ahs[i-1]*A+a[i-1];\n    bhs[i]=bhs[i-1]*A+b[i-1];\n    hsh[i]%=B;\n    ahs[i]%=B;\n    bhs[i]%=B;\n  }\n \n  bool can=1;\n  for (int i=1; i<n; ++i){\n    ull ash=ahs[i];\n    ull bsh=(bhs[n-1]-(bhs[n-1-i]*hsh[i])%B+B)%B;\n    if (ash==bsh) can=0;\n  }\n  if (can) cout << \"YES\\n\";\n  else cout << \"NO\\n\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "strings"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Marbles78293.json",
    "editorial_link": "https://codeforces.com//blog/entry/22256",
    "editorial": "Define the reverse of a sequence as the sequence of moves needed to negate the movement. For example, EEE and WWW are reverses, and WWSSSEE and WWNNNEE are reverses. I claim is impossible to get both balls to the end if and only if some suffix of the first sequence is the reverse of a suffix of the second sequence.\n\nLet us prove the forward case first, that if two suffixes are reverses, then it is impossible to get both balls to the end. Consider a sequence and its reverse, and note that they share the same geometric structure, except that the direction of travel is opposite. Now imagine laying the two grid paths over each other so that their reverse suffixes are laying on top of each other. It becomes apparent that in order to move both balls to their ends, they must cross over at some point within the confines of the suffix. However, this is impossible under the movement rules, as in order for this to happen, the two balls need to move in different directions at a single point in time, which is not allowed.\n\nNow let us prove the backwards case: that if no suffixes are reverses, then it is possible for both balls to reach the end. There is a simple algorithm that achieves this goal, which is to move the first ball to its end, then move the second ball to its end, then move the first ball to its end, and so on. Let's denote each of these \"move the x ball to its end\" one step in the algorithm. After every step, the combined distance of both balls from the start is strictly increasing. Without loss of generality, consider a step where you move the first ball to the end, this increases the distance of the first ball by some value k. However, the second ball can move back at most k?-?1 steps (only its a reverse sequence can move back k steps), so the minimum change in distance is ?+?1. Hence, at some point the combined distance will increase to 2(n?-?1) and both balls will be at the end.\n\nIn order to check if suffixes are reverses of each other, we can take reverse the first sequence, and see if one of its prefixes matches a suffix of the second sequence. This can be done using string hashing or KMP in linear time."
}