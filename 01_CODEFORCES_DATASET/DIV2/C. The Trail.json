{
    "link": "https://codeforces.com//contest/2055/problem/C",
    "problemId": "3141116",
    "problem_idx": "C",
    "shortId": "2055C",
    "contest_number": "2055",
    "problem_submissions": {
        "E": [
            300746486,
            300849536,
            300761124
        ],
        "D": [
            300696033,
            300705238,
            300701008,
            300702007,
            300702452,
            300703784,
            300699187,
            300704114,
            300709175,
            300707029,
            300707549,
            300710969,
            300708967,
            300711888,
            300708148,
            300708052,
            300708173,
            300705738
        ],
        "C": [
            300672652,
            300668358,
            300677522,
            300677196,
            300683675,
            300681011,
            300678376,
            300681393,
            300678777,
            300680600,
            300678839,
            300677980,
            300671004,
            300679220,
            300687159,
            300684321,
            300687531,
            300683543
        ],
        "B": [
            300657881,
            300656820,
            300666935,
            300663382,
            300655553,
            300662689,
            300671074,
            300665092,
            300657486,
            300665581,
            300668563,
            300655341,
            300661161,
            300658795,
            300659826,
            300665475,
            300658513,
            300662771
        ],
        "A": [
            300651053,
            300651601,
            300652364,
            300654430,
            300651022,
            300652195,
            300652888,
            300655299,
            300650941,
            300654319,
            300652932,
            300651006,
            300651149,
            300651992,
            300652147,
            300652006,
            300652172,
            300650990
        ],
        "F": []
    },
    "editorial_link": "https://codeforces.com//blog/entry/138343",
    "editorial": "SolutionThe naive solution of writing out a linear system and solving\r\nthem will take time, which is too slow, so we will need a faster\r\nalgorithm.We begin by selecting a target sum for each row and column. If\r\nwe calculate the sum of all numbers in the completed grid, summing over\r\nrows gives a total of while summing over columns gives a total of .\r\nTherefore, in order for our choice of to be possible, we require , and\r\nsince it is possible for , we will pick for our choice to be possible in\r\nall cases of . Notice that all choices will fail on , as the condition\r\nno longer holds. As such, is the only one that will work in all\r\ncases.Now, we aim to make each row and column sum to . The crux of the\r\nproblem is the following observation: Denote to be the variables along\r\nthe path. Let’s say variables have their values set for some . Then,\r\neither the row or column corresponding to variable has all of its values\r\nset besides , and therefore we may determine exactly one possible value\r\nof to make its row or column sum to . The proof of this claim is simple.\r\nAt variable , we look at the corresponding path move . If , then the\r\npath will never revisit the column of variable , and its column will\r\nhave no remaining unset variables since are already set. Likewise, if ,\r\nthen the path will never revisit the row of variable , which can then be\r\nused to determine the value of .Repeating this process will cause every\r\nrow and column except for row and column to have a sum of zero, with\r\nbeing the final variable. However, we will show that we can use either\r\nthe row or column to determine it, and it will give a sum of zero for\r\nboth row and column . WLOG we use row . Indeed, if the sum of all rows\r\nand columns except for column are zero, we know that the sum of all\r\nentries of the grid is zero by summing over rows. However, we may then\r\nsubtract all columns except column from this total to arrive at the\r\nconclusion that column also has zero sum. Therefore, we may determine\r\nthe value of using either its row or column to finish our construction,\r\ngiving a solution in .\r\n",
    "name": "C. The Trail",
    "statement": "In the wilderness lies a region of mountainous terrain represented as a\r\nrectangular grid with n rows and m columns. Each cell in the grid is\r\nidentified by its position (i, j), where i is the row index and j is the\r\ncolumn index. The altitude of cell (i, j) is denoted by a_{i,j}.However,\r\nthis region has been tampered with. A path consisting of n + m - 1\r\ncells, starting from the top-left corner (1, 1) and ending at the\r\nbottom-right corner (n, m), has been cleared. For every cell (i, j)\r\nalong this path, the altitude a_{i,j} has been set to 0. The path moves\r\nstrictly via downward (\r\nmathtt{D}) or rightward (\r\nmathtt{R}) steps.To restore the terrain to its original state, it is\r\nknown that the region possessed a magical property before it was\r\ntampered with: all rows and all columns shared the same sum of\r\naltitudes. More formally, there exists an integer x such that\r\nsum_{j=1}^m a_{i, j} = x for all 1\r\nle i\r\nle n, and\r\nsum_{i=1}^n a_{i, j} = x for all 1\r\nle j\r\nle m.Your task is to assign new altitudes to the cells on the path such\r\nthat the above magical property is restored. It can be proven that a\r\nsolution always exists. If there are multiple solutions that satisfy the\r\nproperty, any one of them may be provided.\r\n",
    "solutions": [
        "#include <algorithm>#include <array>#include <bitset>#include <cassert>#include <chrono>#include <cmath>#include <complex>#include <cstring>#include <functional>#include <iomanip>#include <iostream>#include <map>#include <numeric>#include <queue>#include <random>#include <set>#include <vector>#include <climits>using namespace std;using ll=long long;using db=long double;using pi=pair<int,int>;using pl=pair<ll,ll>;using vi=vector<int>;using vl=vector<ll>;using vpi=vector<pi>;using vpl=vector<pl>;#define mp make_pair#define eb emplace_back#define pb push_back#define x first#define y second#define sz(x)int((x).size())#define bg(x) begin(x)#define all(x)(x).begin(),(x).end()#define rall(x) x.rbegin(), x.rend() #define rep(i,a,b)for(int i=(a);i<(b);i++)#define per(i,a,b)for(int i=(b)-1;i>=(a);i--)#define ft front()#define bk back()#define rsz resize#define ins insert#define each(a,x)for(auto&a:x)bool ckmin(auto&a,auto b){return b<a?a=b,1:0;}bool ckmax(auto&a,auto b){return b>a?a=b,1:0;}#ifdef LOCALtemplate<class A, class B>ostream&operator<<(ostream&o,pair<A,B>p){return o<<\"(\"<<p.x<<\", \"<<p.y<<\")\";}template<class A, class B, class C>ostream&operator<<(ostream&o,tuple<A,B,C>t){    return o<<\"(\"<<get<0>(t)<<\", \"<<get<1>(t)<<\", \"<<get<2>(t)<<\", \"<<\")\";}auto operator<<(auto&o,auto x)->decltype(x.end(),o){    o<<\"{\";int i=0;for(auto&e:x)o<<\",\"+!i++<<e;return o<<\"}\";}#define debug(X...)cerr<<\"[\"#X\"]: \",[](auto...$){((cerr<<$<<\"; \"),...)<<endl;}(X);#else#define debug(...){}#endif const pi MOVES[] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}}; // #include <ext/pb_ds/assoc_container.hpp>// #include <ext/pb_ds/tree_policy.hpp>// using namespace __gnu_pbds;// template<class T>// using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>; template<int MOD, int RT> struct mint {    static const int mod = MOD;    static constexpr mint rt() { return RT; }    int v; explicit operator int() const { return v; }    mint() : v(0) {}    mint(ll _v) { v = int((-MOD < _v && _v < MOD) ? _v : _v % MOD);        if (v < 0) v += MOD; }    bool operator==(const mint& o) const {        return v == o.v; }    friend bool operator!=(const mint& a, const mint& b) {         return !(a == b); }    friend bool operator<(const mint& a, const mint& b) {         return a.v < b.v; }     mint& operator+=(const mint& o) {         if ((v += o.v) >= MOD) v -= MOD;         return *this; }    mint& operator-=(const mint& o) {         if ((v -= o.v) < 0) v += MOD;         return *this; }    mint& operator*=(const mint& o) {         v = int((ll)v*o.v%MOD); return *this; }    mint& operator/=(const mint& o) { return (*this) *= inv(o); }    friend mint pow(mint a, ll p) {        mint ans = 1; assert(p >= 0);        for (; p; p /= 2, a *= a) if (p&1) ans *= a;        return ans; }    friend mint inv(const mint& a) { assert(a.v != 0);         return pow(a,MOD-2); }            mint operator-() const { return mint(-v); }    mint& operator++() { return *this += 1; }    mint& operator--() { return *this -= 1; }    friend mint operator+(mint a, const mint& b) { return a += b; }    friend mint operator-(mint a, const mint& b) { return a -= b; }    friend mint operator*(mint a, const mint& b) { return a *= b; }    friend mint operator/(mint a, const mint& b) { return a /= b; }    friend ostream& operator<<(ostream& o, const mint& a) { return o << a.v; }    friend istream& operator>>(istream& i, mint& a) {        ll x; i >> x; a = x;        return i;    }}; const int MOD = 998244353;using mi = mint<MOD,5>;using vmi = vector<mi>;using pmi = pair<mi,mi>;using vpmi = vector<pmi>; const int INF = 1e9+2137; const int N = 1024;ll a[N][N]; void solve() {    int n, m;    cin >> n >> m;    string s;    cin >> s;    s += 'D';    rep(i,0,n) rep(j,0,m) cin >> a[i][j];    int x = 0;    int y = 0;    rep(i,0,sz(s)) {        debug(x, y);        assert(a[x][y] == 0);        ll sum = 0;        if (s[i] == 'D') {            rep(j,0,m) sum += a[x][j];             a[x][y] = -sum;            x++;        }        else {            rep(j,0,n) sum += a[j][y];            a[x][y] = -sum;            y++;        }    }#ifdef LOCAL    rep(i,0,n) {        ll sum = 0;        rep(j,0,m) sum += a[i][j];        assert(sum == 0);    }    rep(j,0,m) {        ll sum = 0;        rep(i,0,n) sum += a[i][j];        assert(sum == 0);    }#endif    rep(i,0,n) {        rep(j,0,m) cout << a[i][j] << ' ';        cout << '\\n';    }} signed main() {    cin.tie(0)->sync_with_stdio(0);     int t;    cin >> t;    while (t--) solve();     return 0;} "
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "math",
        "two pointers"
    ],
    "dificulty": "",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. The Trail.json",
    "hint": [
        "Hint 1 Pick , and find the sum of the whole grid. What does this tell you?",
        "Hint 2 Once you know , the top left cell is fixed.",
        "Hint 3 What about the next cell on the trail?"
    ]
}