{
    "link": "https://codeforces.com//contest/734/problem/F",
    "problemId": "80478",
    "problem_idx": "F",
    "shortId": "734F",
    "contest_number": "734",
    "problem_submissions": {
        "F": [
            22242677,
            22263963
        ],
        "D": [
            22237702,
            22238671,
            22238436,
            22238926,
            22238773,
            22237833,
            22241230,
            22239041,
            22239616,
            22240014,
            22239208,
            22240034,
            22240178,
            22236173,
            22238427,
            22246118,
            22238956,
            22239478,
            22239903,
            22238000
        ],
        "C": [
            22234888,
            22234918,
            22235409,
            22236073,
            22235114,
            22235451,
            22235615,
            22235516,
            22234702,
            22235336,
            22234636,
            22235118,
            22237525,
            22238970,
            22235561,
            22239159,
            22235440,
            22236588,
            22236772,
            22235639
        ],
        "B": [
            22228951,
            22228069,
            22228596,
            22229294,
            22228497,
            22229303,
            22229501,
            22229322,
            22228369,
            22229545,
            22228175,
            22229688,
            22229766,
            22229538,
            22230326,
            22233850,
            22229247,
            22231472,
            22229353,
            22228678
        ],
        "A": [
            22226500,
            22226334,
            22226410,
            22226760,
            22226352,
            22226714,
            22226436,
            22226603,
            22226585,
            22226921,
            22226580,
            22226632,
            22227401,
            22227664,
            22229822,
            22226975,
            22228813,
            22226738,
            22226445
        ],
        "E": [
            22241795,
            22241633,
            22241388,
            22240916,
            22242495,
            22246165,
            22242439,
            22243868,
            22243102,
            22245799,
            22245135,
            22244767,
            22245998,
            22247226,
            22236319,
            22244870,
            22244604,
            22244885,
            22244356
        ]
    },
    "name": "F. Anton and School",
    "statement": "Anton goes to school, his favorite lessons are arraystudying. He usually\r\nsolves all the tasks pretty fast, but this time the teacher gave him a\r\ncomplicated one: given two arrays and of length , find array , such\r\nthat:where means bitwise AND, while means bitwise OR.Usually Anton is\r\ngood in arraystudying, but this problem is too hard, so Anton asks you\r\nto help.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <list>\n#include <stack>\n#include <deque>\n#include <utility>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <vector>\n#include <cmath>\n#include <string>\n#include <algorithm>\n#include <iomanip>\n#include <ctime>\n#include <iterator>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\n#define f first\n#define s second\n#define pb push_back\n#define mp make_pair\n\nconst int maxn = 200500;\nconst int inf = 2e9;\nconst double eps = 1e-8;\nconst int base = 1073676287;\n\nll a[maxn];\nint b[maxn];\nint c[maxn];\nint bit[64];\nint bits2[64];\n\nvoid check( int n ) {\n    ll sum = 0LL;\n\tfor ( int j = 0; j < n; j++ ) {\n\t    sum += a[j];\n\t\tint x = a[j];\n\t\tint pos = 0;\n\t\twhile ( x ) {\n\t\t\tbit[pos++] += x % 2;\n\t\t\tx /= 2;\n\t\t}\n\t}\n\tfor ( int j = 0; j < n; j++ ) {\n\t\tint x = a[j];\n\t\tint pos = 0;\n\t\tfor ( int i = 0; i < 64; i++ )\n\t\t\tbits2[i] = 0;\n\t\twhile ( x ) {\n\t\t\tbits2[pos++] = x % 2;\n\t\t\tx /= 2;\n\t\t}\n\t\tll cnt = 0LL;\n\t\tll deg = 1LL;\n\t\tfor ( int i = 0; i < 60; i++ ) {\n\t\t\tif ( bits2[i] )\n\t\t\t\tcnt += 1LL * bit[i] * deg;\n\t\t\tdeg *= 2LL;\n\t\t}\n\t\tif ( cnt != b[j] ) {\n\t\t\tputs( \"-1\" );\n\t\t\texit( 0 );\n\t\t}\n\t\tif ( 1LL * a[j] * n + sum != 1LL * b[j] + 1LL * c[j] ) {\n\t\t\tputs( \"-1\" );\n\t\t\texit( 0 );\n        }\n    }\n}\n\nint main()\n{\n    srand( time( 0 ) );\n    // freopen( \"input.txt\", \"r\", stdin );\n    // freopen( \"output.txt\", \"w\", stdout );\n    // ios_base::sync_with_stdio(false);\n    int n;\n    ll sum = 0LL;\n    scanf ( \"%d\", &n );\n    for ( int j = 0; j < n; j++ ) {\n    \tscanf ( \"%d\", &b[j] );\n    \tsum += 1LL * b[j];\n    }\n    for ( int j = 0; j < n; j++ ) {\n   \t\tscanf ( \"%d\", &c[j] );\n   \t\tsum += 1LL * c[j];\n    }\n    if ( sum % ( 2LL * n ) != 0LL ) {\n    \tputs( \"-1\" );\n    \treturn 0;\n    }\n    sum /= 2LL * n;\n    for ( int j = 0; j < n; j++ ) {\n    \tint cur = b[j] + c[j];\n    \ta[j] = cur - sum;\n    \tif ( a[j] < 0LL ) {\n    \t\tputs( \"-1\" );\n    \t\treturn 0;\n    \t}\n    \tif ( 1LL * a[j] % n != 0LL ) {\n    \t\tputs( \"-1\" );\n    \t\treturn 0;\n    \t}\n    \ta[j] /= 1LL * n;\n    }\n    check( n );\n    for ( int j = 0; j < n; j++ )\n    \tcout << a[j] << ' ';\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "implementation",
        "math"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Anton and School.json",
    "editorial_link": "https://codeforces.com//blog/entry/48397",
    "editorial": "We\u00e2\u0080\u0099ll prove that . At first, let\u00e2\u0080\u0099s prove that it\u00e2\u0080\u0099s true when . To do it,\r\nlet\u00e2\u0080\u0099s consider all the possible values of and :Here we can see that the\r\nequality is true. Now, we\u00e2\u0080\u0099ll prove it for any positive integers. To do\r\nit, let\u00e2\u0080\u0099s divide and into bits:Here mean the bits of and mean the bits\r\nof .Now, let\u00e2\u0080\u0099s divide and ) into bits: Rewrite the initial equality:Now\r\nit\u00e2\u0080\u0099s not hard to observe that is true because the equality is true for\r\nbits. Similarly, we see that is true and so on. From all this it follows\r\nthat the equality is true.Let\u00e2\u0080\u0099s create an array where . It\u00e2\u0080\u0099s obvious\r\nthatSee thatfrom where Now it\u00e2\u0080\u0099s not hard to find : Now, we only must\r\ncheck the answer for correctness. It\u00e2\u0080\u0099s obvious then, if answer exists,\r\nit\u00e2\u0080\u0099s alway unique, because it\u00e2\u0080\u0099s explicitly derived from the formula\r\nabove. To check if the answer exists, let\u00e2\u0080\u0099s build arrays and from the\r\nfound array and compare it with the arrays given in the input. We\u00e2\u0080\u0099ll do\r\nthis separately for every bit. Let\u00e2\u0080\u0099s calculate amount of numbers in\r\narray that has a one in the -th bit. Let\u00e2\u0080\u0099s denote the -th bit of as .\r\nNow, let\u00e2\u0080\u0099s count and such as It\u00e2\u0080\u0099s not hard to do since we know :See that\r\nif we calculate , it will be easy to find : Time complexity is , where .\r\n"
}