{
    "link": "https://codeforces.com//contest/982/problem/B",
    "problemId": "183672",
    "problem_idx": "B",
    "shortId": "982B",
    "contest_number": "982",
    "problem_submissions": {
        "D": [
            38375535,
            38368851,
            38373726,
            38377162,
            38371395,
            38370646,
            38371994,
            38375134,
            38373026,
            38372327,
            38378250,
            38374514,
            38364939,
            38373007,
            38369726,
            38368852,
            38367484,
            38371092,
            38368305
        ],
        "C": [
            38369557,
            38365950,
            38368727,
            38373748,
            38365636,
            38362990,
            38360353,
            38357935,
            38366403,
            38365707,
            38366242,
            38368203,
            38360426,
            38360914,
            38358247,
            38360443,
            38360473,
            38363231,
            38362845
        ],
        "B": [
            38368596,
            38365056,
            38363500,
            38360346,
            38360284,
            38359729,
            38364781,
            38362446,
            38362143,
            38359325,
            38360710,
            38365274,
            38357153,
            38595002,
            38358897,
            38360993,
            38362869,
            38358240,
            38360536,
            38357974
        ],
        "A": [
            38367216,
            38364962,
            38356449,
            38356432,
            38356314,
            38356331,
            38367453,
            38355628,
            38357632,
            38356537,
            38357572,
            38363973,
            38355536,
            38355838,
            38356345,
            38364483,
            38355616,
            38357300,
            38355573
        ],
        "F": [
            38365213,
            38386318,
            38386309,
            38375562,
            38372484,
            38551586
        ],
        "E": [
            38373371,
            38376699,
            38377910,
            38376666,
            38377583,
            38377503,
            38378506,
            38374036,
            38378687,
            40182999
        ]
    },
    "name": "B. Bus of Characters",
    "statement": "In the Bus of Characters there are n rows of seat, each having 2 seats.\r\nThe width of both seats in the i-th row is w_i centimeters. All integers\r\nw_i are distinct.Initially the bus is empty. On each of 2n stops one\r\npassenger enters the bus. There are two types of passengers: an\r\nintrovert always chooses a row where both seats are empty. Among these\r\nrows he chooses the one with the smallest seats width and takes one of\r\nthe seats in it; an extrovert always chooses a row where exactly one\r\nseat is occupied (by an introvert). Among these rows he chooses the one\r\nwith the largest seats width and takes the vacant place in it. You are\r\ngiven the seats width in each row and the order the passengers enter the\r\nbus. Determine which row each passenger will take.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <bitset>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#define rep(i,n) for(int i=1;i<=n;++i)\nusing namespace std;\n\nstruct node{\n\tint w,pos;\n\tfriend bool operator <(node a,node b)\n\t{\n\t\treturn a.w<b.w;\n\t}\n};\n\nchar s[510000];\nint w[510000],ans[510000];\nint n;\npriority_queue<node>a,b;\nint main()\n{\n\tcin>>n;\n\tfor (int i=1;i<=n;i++) scanf(\"%d\",&w[i]);\n\tscanf(\"%s\",s);\n\twhile (!a.empty())a.pop();\n\trep(i,n)a.push((node){-w[i],i});\n\trep(i,2*n)\n\t\tif (s[i-1]=='0') \n\t\t{\n\t\t\tnode tmp=a.top(); a.pop();\n\t\t\tans[i]=tmp.pos;\n\t\t\ttmp.w=-tmp.w;\n\t\t\tb.push(tmp);\n\t\t}\n\t\telse\n\t\tif (s[i-1]=='1')\n\t\t{\n\t\t\tnode tmp=b.top(); \n\t\t\tb.pop();\n\t\t\tans[i]=tmp.pos;\n\t\t}\n\trep(i,2*n)printf(\"%d%c\",ans[i],i==2*n?'\\n':' ');\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Bus of Characters.json",
    "editorial_link": "https://codeforces.com//blog/entry/59551",
    "editorial": "Note that the final introvert-extrovert pairs are uniquely determined,\r\nand that using the stack, it is possible to recover which extrovert to\r\nwhich introvert will sit (note that the zeros and ones will form the\r\ncorrect bracket sequence). Then one of the solutions may be as follows:\r\n",
    "hint": []
}