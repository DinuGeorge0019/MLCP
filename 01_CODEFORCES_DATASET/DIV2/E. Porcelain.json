{
    "link": "https://codeforces.com//contest/148/problem/E",
    "problemId": "883",
    "problem_idx": "E",
    "shortId": "148E",
    "contest_number": "148",
    "problem_submissions": {
        "D": [
            1139191,
            1138652,
            1138343,
            1139931,
            1138050,
            1141845,
            1137541,
            1139093,
            1141226,
            1140900,
            1138905,
            1138670,
            1137683
        ],
        "E": [
            1138985,
            1140513,
            1139519,
            1141488,
            1139717,
            1140284,
            1142221,
            1139946,
            1138873,
            1142635,
            1149309,
            1141182,
            1140316
        ],
        "B": [
            1135154,
            1135748,
            1135053,
            1135639,
            1140648,
            1135735,
            1134985,
            1135240,
            1135774,
            1138444,
            1134958,
            1134820,
            1135228
        ],
        "A": [
            1133841,
            1134314,
            1134164,
            1134213,
            1133731,
            1134661,
            1133747,
            1134454,
            1134132,
            1134262,
            1133778,
            1133823,
            1134119,
            1133907
        ],
        "C": [
            1137373,
            1136906,
            1137643,
            1136607,
            1138188,
            1140983,
            1141293,
            1140962,
            1139122,
            1136427,
            1137116,
            1136279
        ]
    },
    "name": "E. Porcelain",
    "statement": "During her tantrums the princess usually smashes some collectable\r\nporcelain. Every furious shriek is accompanied with one item smashed.The\r\ncollection of porcelain is arranged neatly on shelves. Within each shelf\r\nthe items are placed in one row, so that one can access only the\r\noutermost items the leftmost or the rightmost item, not the ones in the\r\nmiddle of the shelf. Once an item is taken, the next item on that side\r\nof the shelf can be accessed (see example). Once an item is taken, it\r\ncan’t be returned to the shelves.You are given the values of all items.\r\nYour task is to find the maximal damage the princess’ tantrum of shrieks\r\ncan inflict on the collection of porcelain.\r\n",
    "solutions": [
        "#include<vector>\n#include<list>\n#include<map>\n#include<set>\n#include<deque>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<algorithm>\n#include<functional>\n#include<numeric>\n#include<utility>\n#include<iostream>\n#include<sstream>\n#include<iomanip>\n#include<cmath>\n#include<cstdlib>\n#include<cctype>\n#include<string>\n#include<cstring>\n#include<cstdio>\n#include<ctime>\n#include<climits>\n#include<complex>\n#include<cassert>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define sz(x) (int)((x).size())\n#define all(x) x.begin(),x.end()\n#define clr(x) memset((x),0,sizeof(x))\n#define cdp(x) memset((x),-1,sizeof(x))\n#define rep(i,n) for (i=0;i<n;i++)\n#define Rep(i,a,b) for (i=a;i<=b;i++)\n#define ff(i,x) for (i=start[x];i!=-1;i=a[i].next)\n#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)\nusing namespace std;\nconst double eps=1e-8;\nconst double pi=acos(-1.0);\nint dblcmp(double d){if (fabs(d)<eps)return 0;return d>eps?1:-1;}\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\ntypedef vector<pii> vpi;\nint dp[111][11111],sum[111];\nint a[111][111];\nint main()\n{\n    int i,j,k,n,m;\n    scanf(\"%d%d\",&n,&m);\n    clr(a);\n    for (i=0;i<n;i++)\n    {\n        int c;\n        int v[111];\n        scanf(\"%d\",&c);\n        for (j=1;j<=c;j++)\n        {\n            scanf(\"%d\",v+j);\n        }\n        clr(sum);\n        sum[0]=0;\n        for (j=1;j<=c;j++)\n        {\n            sum[j]=sum[j-1]+v[j];\n        }\n        for (j=1;j<=c;j++)\n        {\n            for (k=0;k<=j;k++)\n            {\n                int t=sum[k]+sum[c]-sum[c-(j-k)];\n                a[i][j]=max(a[i][j],t);\n            }\n        }\n    }\n    //printf(\"%d\\n\",a[0][3]);\n    memset(dp,200,sizeof(dp));\n    dp[0][0]=0;\n    for (i=0;i<n;i++)\n    {\n        for (j=0;j<=m;j++)if (dp[i][j]>=0)\n        {\n            for (k=0;k<=100&&j+k<=m;k++)\n            {\n                dp[i+1][j+k]=max(dp[i+1][j+k],dp[i][j]+a[i][k]);\n            }\n        }\n    }\n    printf(\"%d\\n\",*max_element(dp[n],dp[n]+m+1));\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Porcelain.json",
    "editorial_link": "https://codeforces.com//blog/entry/3819",
    "editorial": "This problem involved dynamic programming with precalculation. The first\r\npart of the solution was to precalculate the maximal cost of i items\r\ntaken from the shelf (i ranging from 1 to the number of items on the\r\nshelf) for each shelf. Note that this canât be done greedily: this can\r\nbe seen on the shelf 6: 5 1 10 1 1 5. The second part is a standard\r\ndynamic programming, which calculates the maximal cost of items taken\r\nfor index of last shelf used and total number of items taken. To advance\r\nto the next shelf, one has to try all possible numbers of items taken\r\nfrom it and increase the total cost of items taken by corresponding\r\nprecalculated values.\r\n",
    "hint": []
}