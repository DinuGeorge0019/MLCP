{
    "link": "https://codeforces.com//contest/41/problem/E",
    "problemId": "217",
    "problem_idx": "E",
    "shortId": "41E",
    "contest_number": "41",
    "problem_submissions": {
        "E": [
            187709,
            187786,
            188013,
            188055,
            187720,
            188400,
            187514,
            188819,
            188191,
            188320,
            187947,
            187986,
            188068,
            187475,
            188102,
            188249,
            188098
        ],
        "D": [
            187451,
            188035,
            187556,
            187294,
            187606,
            188558,
            188821,
            187849,
            187246,
            187712
        ],
        "C": [
            186912,
            186684,
            186917,
            187641,
            186883,
            186553,
            188818,
            186598,
            186899,
            188654,
            186712,
            186971,
            187041,
            187211,
            187296,
            187151,
            187405
        ],
        "B": [
            186796,
            186260,
            186544,
            186516,
            188464,
            186708,
            186215,
            188816,
            186320,
            188632,
            186180,
            186422,
            186551,
            186670,
            188213,
            186455,
            186499
        ],
        "A": [
            185992,
            186549,
            186066,
            186169,
            186054,
            186446,
            186002,
            188814,
            186063,
            186094,
            185993,
            186104,
            186145,
            185988,
            186586,
            185990,
            186130
        ]
    },
    "name": "E. 3-cycles",
    "statement": "During a recent research Berland scientists found out that there were\r\ncities in Ancient Berland, joined by two-way paths. Any two cities are\r\njoined by no more than one path. No path joins a city with itself.\r\nAccording to a well-known tradition, the road network was built so that\r\nit would be impossible to choose three cities from each of which one can\r\nget to any other one directly. That is, there was no cycle exactly as\r\nlong as 3. Unfortunately, the road map has not been preserved till\r\nnowadays. Now the scientists are interested how much developed a country\r\nAncient Berland was. Help them - find, what maximal number of roads\r\ncould be in the country. You also have to restore any of the possible\r\nroad maps.\r\n",
    "solutions": [
        "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<list>\n#include<map>\n#include<set>\n#include<queue>\n#include<stack>\n#include<utility>\n#include<sstream>\nusing namespace std;\n#define FOR(I,A,B) for(int I=(A);I<=(B);I++)\n#define REP(I,N) for(int I=0;I<(N);I++)\n#define ALL(X) (X).begin(),(X).end()\n#define VAR(A,B) __typeof(B) A=B\n#define FORE(I,X) for(VAR(I,(X).begin());I!=(X).end();I++)\n#define F first\n#define S second\n#define INF 1000000007\n#define PB push_back\n#define MP make_pair\ntypedef pair<int,int> PII;\ntypedef long long LL;\nint n,wyn;\n\nint main(){\n\tscanf(\"%d\",&n);\n\tif (n<3){\n\t\tif (n==1) printf(\"0\\n\");\n\t\telse printf(\"1\\n1 2\\n\");\n\t\treturn 0;\n\t}\n\tREP(i,n){\n\t\twyn+=(n-i)/2;\n\t}\n\tprintf(\"%d\\n\",wyn);\n\tREP(i,n){\n\t\tREP(j,(n-i)/2){\n\t\t\tprintf(\"%d %d\\n\",i+1,i+2*j+2);\n\t\t}\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "graphs",
        "greedy"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. 3-cycles.json",
    "editorial_link": "https://codeforces.com//blog/entry/1620",
    "editorial": "The road map with most edges is a complete bipartite graph with equal number of vertices on each side. (Prove it by yourself :D ). We can make such a graph by putting the first  vertices on one side and the other  on the other side.For sure , number of edges is ."
}