{
    "link": "https://codeforces.com//contest/760/problem/B",
    "problemId": "89817",
    "problem_idx": "B",
    "shortId": "760B",
    "contest_number": "760",
    "problem_submissions": {
        "F": [
            24048996,
            24334592,
            24109967
        ],
        "D": [
            24042480,
            24043732,
            24050024,
            24046176,
            24044696,
            24045116,
            24042014,
            24043570,
            24047853,
            24043885,
            24739234,
            24045094,
            24044167,
            24044943,
            24049808,
            24041812,
            24045235
        ],
        "C": [
            24040885,
            24041111,
            24041193,
            24043138,
            24047007,
            24043013,
            24038951,
            24041237,
            24046096,
            24041744,
            24041798,
            24042387,
            24042705,
            24049213,
            24042229,
            24044994,
            24042730
        ],
        "B": [
            24039488,
            24039342,
            24037031,
            24040294,
            24041983,
            24041211,
            24039467,
            24039465,
            24039319,
            24038489,
            24040344,
            24039097,
            24039942,
            24040090,
            24041062
        ],
        "A": [
            24036025,
            24035890,
            24035872,
            24036889,
            24036131,
            24037811,
            24035954,
            24036348,
            24036507,
            24036069,
            24036108,
            24036146,
            24036211,
            24041066,
            24035881,
            24035886,
            24036867
        ],
        "E": [
            24050782,
            24048436,
            24049579,
            24049178,
            24050210,
            24052439,
            24072140,
            24052585,
            24324528,
            24324402,
            24048812,
            24049062,
            24108774
        ]
    },
    "name": "B. Frodo and pillows",
    "statement": "hobbits are planning to spend the night at Frodo’s house. Frodo has beds\r\nstanding in a row and pillows (). Each hobbit needs a bed and at least\r\none pillow to sleep, however, everyone wants as many pillows as\r\npossible. Of course, it’s not always possible to share pillows equally,\r\nbut any hobbit gets hurt if he has at least two pillows less than some\r\nof his neighbors have. Frodo will sleep on the -th bed in the row. What\r\nis the maximum number of pillows he can have so that every hobbit has at\r\nleast one pillow, every pillow is given to some hobbit and no one is\r\nhurt?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef unsigned long long ull;\n\nll get(ll ed, ll cnt){\n\tll d = cnt;\n\tif (d > ed) d = ed;\n\tcnt -= d;\n\t\n\treturn cnt + d * (2 * ed - d + 1) / 2;\n}\n\nint main(){\n\tios::sync_with_stdio(0);\n\tcout.tie(0); cin.tie(0);\n\n\tll n, p, k; cin >> n >> p >> k;\n\tll l = 1, r = 1e9 + 10;\n\n\twhile(l + 1 < r){\n\t\tll m = (l + r) / 2;\n\n\t\tif ( ull(get(m, k)) + get(m, n - k + 1) - m > p)\n\t\t\tr = m;\n\t\telse l = m;\n\t}\n\n\tcout << l << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Frodo and pillows.json",
    "editorial_link": "https://codeforces.com//blog/entry/49946",
    "editorial": "Letâs do binary search on the answer. How to check if Frodo can have\r\npillows or more? We need to calculate the least amount of pillows we\r\nneed to give to all the hobbits and compare it to m.The number of\r\npillows is minimized if we give pillows to Frodoâs neighbors, pillows to\r\nthe hobbits at the distance from Frodo and so on, until we reach pillow\r\nor until we reach an end of beds row. The total amount of pillows on one\r\nside of Frodo can be calculated using a formula.Suppose there are beds\r\non one side of Frodo. There are two cases: if , then the total number of\r\npillows is , otherwise the total number of pillows is .\r\n",
    "hint": []
}