{
    "link": "https://codeforces.com//contest/94/problem/B",
    "problemId": "493",
    "problem_idx": "B",
    "shortId": "94B",
    "contest_number": "94",
    "problem_submissions": {
        "E": [
            521553,
            521880,
            522467,
            526155,
            523146,
            523157
        ],
        "D": [
            519365,
            518958,
            518305,
            519392,
            518800,
            520161,
            521011,
            521143,
            520319,
            520841,
            520217,
            521120,
            518685,
            520557,
            518998
        ],
        "C": [
            517626,
            517507,
            517218,
            517667,
            518042,
            517867,
            517038,
            518011,
            517625,
            518595,
            520630,
            519397,
            516288,
            520795,
            521799
        ],
        "B": [
            515646,
            515796,
            515893,
            515624,
            515532,
            516196,
            515676,
            516322,
            516160,
            515597,
            515907,
            516405,
            521550,
            516168,
            515483
        ],
        "A": [
            515017,
            514950,
            515359,
            514955,
            515050,
            515155,
            514834,
            515016,
            515211,
            515499,
            514941,
            514917,
            520686,
            514959,
            515020
        ]
    },
    "name": "B. Friends",
    "statement": "One day Igor K. stopped programming and took up math. One late autumn\r\nevening he was sitting at a table reading a book and thinking about\r\nsomething. The following statement caught his attention: \"Among any six\r\npeople there are either three pairwise acquainted people or three\r\npairwise unacquainted people\"Igor just couldn’t get why the required\r\nminimum is 6 people. \"Well, that’s the same for five people, too!\" he\r\nkept on repeating in his mind. \"Let’s take, say, Max, Ilya, Vova here,\r\nthey all know each other! And now let’s add Dima and Oleg to Vova none\r\nof them is acquainted with each other! Now, that math is just\r\nrubbish!\"Igor K. took 5 friends of his and wrote down who of them is\r\nfriends with whom. Now he wants to check whether it is true for the five\r\npeople that among them there are either three pairwise acquainted or\r\nthree pairwise not acquainted people.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <string>\n#include <numeric>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n#include <sstream>\n#include <cstring>\n#include <cstdio>\n#include <complex>\n#include <cassert>\n\nusing namespace std;\n\n//\ntypedef long long LL;\ntypedef pair<int,int> PII;\n#define MP make_pair\n#define VI vector<int>\n#define FOR(v,p,k) for(int v=p;v<=k;++v)\n#define FORD(v,p,k) for(int v=p;v>=k;--v)\n#define REP(i,n) for(int i=0;i<(n);++i)\n#define VAR(v,i) __typeof(i) v=(i)\n#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)\n#define PB push_back\n#define ST first\n#define ND second\n#define SIZE(x) (int)x.size()\n#define ALL(c) c.begin(),c.end()\n//\n#define rep(i,b) for(int i=(0);i<(b);++i)\n#define fo(i,a,b) for(int i=(a);i<=(b);++i)\n#define ford(i,a,b) for(int i=(a);i>=(b);--i)\n#define fore(a,b) for(__typeof((b).begin()) a = (b).begin();a!=(b).end();++a)\n#define vv vector\n#define pb push_back\n#define ll long long\n#define ld long double\n#define ss(a) (int)(a).size()\n#define all(x) (x).begin(),(x).end()\n#define clr(x,a) memset(x,a,sizeof(x))\n#define vi vv<int>\n#define vs vv<string>\ntemplate<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}\ntemplate<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}\n\nint cond = (ll)1;\n#define db(x) { if (cond > 0) { cond--; rep (xxx, 1) cerr << __LINE__ << \" \" << #x << \" \" << x << endl; cerr.flush(); } }\n\nint llll[15][15];\n\nvoid _main() {\n    int m;\n    scanf(\"%d\", &m);\n    rep (i, m) {int a,b; scanf(\"%d%d\", &a, &b);\n        llll[a][b] = 1;\n        llll[b][a] = 1;\n    }\n    bool ok = 0;\n    fo (i, 1, 5) fo (j, i+1,5) fo(k,j+1, 5) {\n        int cnt = 0;\n        cnt += llll[i][j];\n        cnt += llll[i][k];\n        cnt += llll[j][k];\n        ok |= cnt == 0;\n        ok |= cnt == 3;\n    }\n    if (ok) printf(\"WIN\\n\");\n    else printf(\"FAIL\\n\");\n\n}\n\nint main(int argc, char ** argv) {\n    string p = \"../gcj/source/\" + string(\"\") + argv[0][strlen(argv[0])-1];\n//    if (argc >= 2 && strcmp(argv[1], \"q\") != 0) { freopen(argv[1],\"r\",stdin);}\n\n    rep (i, argc) if (strcmp(argv[i], \"1n\") == 0) { freopen(\"1.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"2n\") == 0) { freopen(\"2.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"3n\") == 0) { freopen(\"3.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"4n\") == 0) { freopen(\"4.in\",\"r\",stdin);}\n    rep (i, argc) if (strcmp(argv[i], \"5n\") == 0) { freopen(\"5.in\",\"r\",stdin);}\n\n    rep (i, argc) if (strcmp(argv[i], \"s0\") == 0) { freopen((p + \"-small-0.in\").c_str(),\"r\",stdin);freopen((p + \"-small-0.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"s1\") == 0) { freopen((p + \"-small-1.in\").c_str(),\"r\",stdin);freopen((p + \"-small-1.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"s2\") == 0) { freopen((p + \"-small-2.in\").c_str(),\"r\",stdin);freopen((p + \"-small-2.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"l0\") == 0) { freopen((p + \"-large-0.in\").c_str(),\"r\",stdin);freopen((p + \"-large-0.out\").c_str(),\"w\",stdout); }\n    rep (i, argc) if (strcmp(argv[i], \"q\") == 0) cond = 1 << 30;\n    _main();\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "implementation",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Friends.json",
    "editorial_link": "https://codeforces.com//blog/entry/2208",
    "editorial": "Let's construct the graph where vertices correspond to the people and edges correspond to the relationships. Then paint each edge in this way: edge will be red if the men connected by it are friends and black otherwise. Now let's think what is \"three pairwise acquainted people\" and \"three pairwise unacquainted people\". We see that they are cycles of only red and only black vertices correspondingly, and the length of these cycles is 3.\n\nNow we know the solution: write 3 \"for\" cycles, one cycle for one vertex, and check if the edges between these vertices are only red or only black.",
    "hint": []
}