{
    "link": "https://codeforces.com//contest/821/problem/A",
    "problemId": "111649",
    "problem_idx": "A",
    "shortId": "821A",
    "contest_number": "821",
    "problem_submissions": {
        "D": [
            28036388,
            28036319,
            28037093,
            41734433,
            28037174,
            28036759,
            28036893,
            28108464,
            28108438,
            28053809,
            28048526,
            28037849,
            28039886,
            28037900,
            28037562,
            28037762,
            28067673,
            28050717
        ],
        "E": [
            28031080,
            28025704,
            28029758,
            28032764,
            28034511,
            28038207,
            28056472,
            28054979,
            28053726,
            28053708,
            28053530,
            28035432,
            28032380,
            28032466,
            67190033,
            28025986,
            28039285,
            28035423,
            28028415,
            28031314,
            28033070,
            28028563,
            28033114,
            28035978,
            28036465,
            28035018
        ],
        "C": [
            28027564,
            28028757,
            28027102,
            28028054,
            28028077,
            28026793,
            28053306,
            28050947,
            28049926,
            28028104,
            28028806,
            28032681,
            28027048,
            28027053,
            28038599,
            28026500,
            28028038,
            28025519,
            28031473,
            28029012,
            28027297,
            28028758,
            28029118
        ],
        "B": [
            28025033,
            28029985,
            28027229,
            28026296,
            28026743,
            28025293,
            28047680,
            28046444,
            28026532,
            28026871,
            28024943,
            28029111,
            28024882,
            28027316,
            28035127,
            28026321,
            28027518,
            28033448,
            28025512,
            28026466,
            28026910
        ],
        "A": [
            28023814,
            28030700,
            28026806,
            28025423,
            28026686,
            28024284,
            28047598,
            28025814,
            28023873,
            28023685,
            28028848,
            28024187,
            28025303,
            28024870,
            28024246,
            28024053,
            28029160,
            28023901,
            28023721,
            28024947,
            28025828
        ]
    },
    "name": "A. Okabe and Future Gadget Laboratory",
    "statement": "Okabe needs to renovate the after he tried doing some crazy experiments!\r\nThe lab is represented as an by square grid of integers. A lab is\r\ndefined as a lab in which every number not equal to can be expressed as\r\nthe sum of a number in the same row and a number in the same column. In\r\nother words, for every such that and , there should exist two indices\r\nand so that , where denotes the integer in -th row and -th column.Help\r\nOkabe determine whether a given lab is !\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define oo 0x3f3f3f3f\n#define cl(x) memset(x, 0, sizeof(x))\n#define maxn 60\ntypedef long long ll;\nusing namespace std;\nvoid gn(int &x) {\n\tx = 0; char ch = getchar();\n\twhile (ch < '0' || ch > '9') ch = getchar();\n\twhile (ch >= '0' && ch <= '9')\n\t\tx = x * 10 + ch - '0', ch = getchar();\n}\nint n, a[maxn][maxn];\nint main() {\n\tgn(n);\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= n; ++j)\n\t\t\tgn(a[i][j]);\n\tbool ans = 1;\n\tfor (int x = 1; x <= n; ++x)\n\t\tfor (int y = 1; y <= n; ++y) {\n\t\t\tif (a[x][y] == 1) continue;\n\t\t\tbool flag = 0;\n\t\t\tfor (int s = 1; s <= n; ++s)\n\t\t\t\tfor (int t = 1; t <= n; ++t)\n\t\t\t\t\tif (a[x][s] + a[t][y] == a[x][y]) {\n\t\t\t\t\t\tflag = 1; break;\n\t\t\t\t\t}\n\t\t\tif (!flag) ans = 0;\n\t\t}\n\tputs(ans ? \"Yes\" : \"No\");\n\treturn 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Okabe and Future Gadget Laboratory.json",
    "editorial_link": "https://codeforces.com/blog/entry/52895",
    "editorial": "We can simulate exactly what's described in the statement: loop over all cells not equal to 1 and check if it doesn't break the city property. To check if a cell breaks the property, just loop over an element in the same row, and an element in the same column, and see if they can add to give the cell's number. The complexity is O(n4)."
}