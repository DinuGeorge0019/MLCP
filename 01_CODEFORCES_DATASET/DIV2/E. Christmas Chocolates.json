{
    "link": "https://codeforces.com//contest/1617/problem/E",
    "problemId": "1229935",
    "problem_idx": "E",
    "shortId": "1617E",
    "contest_number": "1617",
    "problem_submissions": {
        "D2": [
            139528258,
            139511137,
            139522542,
            139519708,
            139520670,
            139523783,
            139518761,
            139530052,
            139554537,
            139536292,
            139522659,
            139517981,
            139512155,
            139519772,
            139538893,
            139543913,
            139531998
        ],
        "E": [
            139517842,
            139538424,
            139497648,
            139535975,
            139534847,
            139545980,
            139543568,
            139544780,
            139542416,
            139541142,
            139546720,
            139613086,
            139612916
        ],
        "D1": [
            139501429,
            139511244,
            139522629,
            139519806,
            139515622,
            139513160,
            139518872,
            139525357,
            139508478,
            139513182,
            139525031,
            139501096,
            139517883,
            139503934,
            139519698,
            139505351,
            139502672,
            139513862
        ],
        "C": [
            139489946,
            139490132,
            139526014,
            139489601,
            139500619,
            139496413,
            139508980,
            139499423,
            139495044,
            139500428,
            139504938,
            139495573,
            139492326,
            139510250,
            139491535,
            139494498,
            139495193,
            139495421
        ],
        "B": [
            139486471,
            139485548,
            139527692,
            139491898,
            139493048,
            139490679,
            139500877,
            139490165,
            139489596,
            139492975,
            139498385,
            139485704,
            139488427,
            139502448,
            139486742,
            139489499,
            139488312,
            139490271
        ],
        "A": [
            139485264,
            139485036,
            139530317,
            139495566,
            139490417,
            139485662,
            139494269,
            139485815,
            139485225,
            139486039,
            139485608,
            139487143,
            139485767,
            139485406,
            139485431,
            139485561,
            139486024,
            139485975
        ]
    },
    "name": "E. Christmas Chocolates",
    "statement": "Christmas is coming, Icy has just received a box of chocolates from her\r\ngrandparents! The box contains n chocolates. The i-th chocolate has a\r\nnon-negative integer type a_i.Icy believes that good things come in\r\npairs. Unfortunately, all types of chocolates are distinct (all a_i are\r\n). Icy wants to make at least one pair of chocolates the same type. As a\r\nresult, she asks her grandparents to perform some . , Icy chooses two\r\nchocolates with indices x and y (1\r\nle x, y\r\nle n, x\r\nne y).In a , Icy’s grandparents choose a non-negative integer k, such\r\nthat 2^k\r\nge a_x, and change the type of the chocolate x from a_x to 2^k - a_x\r\n(that is, perform a_x := 2^k - a_x).The chocolate exchanges will be\r\nstopped only when a_x = a_y. Icy’s grandparents are smart, so they would\r\nchoose the sequence of chocolate exchanges that the number of exchanges\r\nneeded. Since Icy likes causing trouble, she wants to the minimum number\r\nof exchanges needed by choosing x and y appropriately. She wonders what\r\nis the optimal pair (x, y) such that the minimum number of exchanges\r\nneeded is maximized across all possible choices of (x, y).Since Icy is\r\nnot good at math, she hopes that you can help her solve the problem.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nusing LL = long long;\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\tint n;\n\tcin >> n;\n\tmap<int, int> par, pos;\n\tauto fp = [&](int u){\n\t\tif (u == 0) return -1;\n\t\tint k = 1;\n\t\twhile (k < u) k <<= 1;\n\t\treturn k - u;\n\t};\n\tvector<int> a(n + 1);\n\tfor (int i = 1; i <= n; i += 1) {\n\t\tcin >> a[i];\n\t\tfor (int p = a[i]; p != -1; p = par[p])\n\t\t\tpar[p] = fp(p);\n\t\tpos[a[i]] = i;\n\t}\n\tint m = par.size();\n\tvector<int> v(m), p(m, -1), key(m);\n\tmap<int, int> mp;\n\tfor (int i = 0; auto [x, y] : par) {\n\t\tv[i] = x;\n\t\tmp[x] = i;\n\t\tif (y != -1) p[i] = mp[y];\n\t\tif (pos.contains(x)) key[i] = 1;\n\t\ti += 1;\n\t}\n\tvector<tuple<int, int, int>> dp(m, {0, -1, -1});\n\tvector<pair<int, int>> mx(m, {-1, -1}), mx2(m, {-1, -1});\n\tauto insert = [&](int i, pair<int, int> p){\n\t\tif (p > mx[i]) {\n\t\t\tmx2[i] = mx[i];\n\t\t\tmx[i] = p;\n\t\t}\n\t\telse if (p > mx2[i]) mx2[i] = p;\n\t};\n\tfor (int i = m - 1; i >= 0; i -= 1) {\n\t\tif (key[i]) insert(i, {0, i});\n\t\tif (mx2[i].first != -1)\n\t\t\tdp[i] = max(dp[i], {mx[i].first + mx2[i].first, mx[i].second, mx2[i].second});\n\t\tif (i) {\n\t\t\tif (mx[i].first != -1) insert(p[i], {mx[i].first + 1, mx[i].second});\n\t\t\tdp[p[i]] = max(dp[p[i]], dp[i]);\n\t\t}\n\t}\n\tauto [w, x, y] = dp[0];\n\tcout << pos[v[x]] << \" \" << pos[v[y]] << \" \" << w << \"\\n\";\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "games",
        "graphs",
        "implementation",
        "math",
        "number theory",
        "shortest paths",
        "trees"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Christmas Chocolates.json",
    "editorial_link": "https://codeforces.com//blog/entry/97920",
    "editorial": "Solution (Step 1)In graph terms, the problem is as follows: in a graph\r\nwith infinite nodes, two nodes and are connected if for some . Among\r\nspecial nodes, find the pair of nodes () with maximum shortest\r\ndistance.Here comes the key observation: For any , there exists only one\r\n() such that for some .The proof is as follows: letâs say that , , , .\r\nThen, . So, . Since , .Then, we realize we can build a graph as follows:\r\nadd an edge between and () if for some . Because of the first key\r\nobservation, the graph must be a tree. We can root the tree at node .Our\r\nproblem is equivalent to finding the pair of nodes which have maximum\r\ndistance in a tree, which can be solved using the diameter of tree\r\nalgorithm.\r\n",
    "hint": [
        "Hint 1 Translate the problem into a graph problem. What feature of the graph is it asking about?",
        "Hint 2 Draw out the graph, for . What special property does the graph have?",
        "Hint 3 Any specific algorithm to solve the problem (in Hint 1)?",
        "Hint 4 We can't build the entire tree as it has nodes. Try to notice something about the depth of the tree, then think of how this could help us solve the problem (by building the tree, or otherwise)."
    ]
}