{
    "link": "https://codeforces.com//contest/919/problem/C",
    "problemId": "152089",
    "problem_idx": "C",
    "shortId": "919C",
    "contest_number": "919",
    "problem_submissions": {
        "E": [
            34759854,
            34759008,
            34755530,
            34755071,
            34767384,
            34769825,
            34762286,
            34765859,
            34757902,
            34756808,
            34754350,
            34754906,
            34754485,
            34764184,
            34764060,
            34765778,
            34765644,
            34766112,
            34770806,
            34758487
        ],
        "D": [
            34759692,
            34756182,
            34766669,
            34747857,
            34750540,
            34761944,
            34744086,
            34755286,
            34747306,
            34747805,
            34758206,
            34746635,
            34748995,
            34743941,
            34750352,
            34751132,
            34754972,
            34756086,
            34749125,
            34751985
        ],
        "F": [
            34756268,
            34770726,
            34767209,
            34940216,
            34940205,
            34940167,
            34768110
        ],
        "C": [
            34755543,
            34745303,
            34743775,
            34749427,
            34742058,
            34751454,
            34747057,
            34746048,
            34744189,
            34743121,
            34786015,
            34743288,
            34741969,
            34754924,
            34754196,
            34743195,
            34748307,
            34749924,
            34748253,
            34744412
        ],
        "A": [
            34741202,
            34738877,
            34738230,
            34738207,
            34743521,
            34740387,
            34738030,
            34738271,
            34738995,
            34738099,
            34737984,
            34739113,
            34738625,
            34738247,
            34738122,
            34738762,
            34738024,
            34737950,
            34738747
        ],
        "B": [
            34740191,
            34740735,
            34740551,
            34773488,
            34738696,
            34749487,
            34740570,
            34740622,
            34740449,
            34739728,
            34741488,
            34740826,
            34738595,
            34739371,
            34739374,
            34739976,
            34741055,
            34741170,
            34739403,
            34740674
        ]
    },
    "name": "C. Seat Arrangements",
    "statement": "Suppose that you are in a campus and have to go for classes day by day.\r\nAs you may see, when you hurry to a classroom, you surprisingly find\r\nthat many seats there are already occupied. Today you and your friends\r\nwent for class, and found out that some of the seats were occupied.The\r\nclassroom contains n rows of seats and there are m seats in each row.\r\nThen the classroom can be represented as an n\r\ntimes m matrix. The character ” represents an empty seat, while ” means\r\nthat the seat is occupied. You need to find k consecutive empty seats in\r\nthe same row or column and arrange those seats for you and your friends.\r\nYour task is to find the number of ways to arrange the seats.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nconst int MX=2005;\n\nint n,m,k,cnt,ans;\nchar g[MX][MX];\n\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",g[i]+1);\n        g[i][m+1]='*';\n    }\n    m++;\n    for(int i=1;i<=m;i++)g[n+1][i]='*';\n    n++;\n    for(int i=1;i<=n;i++)for(int j=1;j<=m;j++)\n    {\n        if(g[i][j]=='*')\n            ans+=max(0,cnt-k+1),cnt=0;\n        else cnt++;\n    }\n    for(int i=1;i<=m;i++)for(int j=1;j<=n;j++)\n        if(g[j][i]=='*')\n            ans+=max(0,cnt-k+1),cnt=0;\n        else cnt++;\n    if(k==1)ans/=2;\n    cout<<ans<<endl;\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Seat Arrangements.json",
    "editorial_link": "https://codeforces.com//blog/entry/57462",
    "editorial": "We can find out how many consecutive empty positions in every row and\r\ncolumn separately and add them together to form the final answer.If the\r\nlength of consecutive empty positions is no smaller than , we assume\r\nthat it is . Then we can add to the final answer.But, be careful. When ,\r\nthe algorithm shown above is completely wrong. (Why?) So we need to deal\r\nwith that situation separately. (I guess there will be lots of hacks :P)\r\n.\r\n",
    "hint": []
}