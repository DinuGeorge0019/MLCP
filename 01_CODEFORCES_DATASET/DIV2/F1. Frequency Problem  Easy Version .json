{
    "link": "https://codeforces.com//contest/1447/problem/F1",
    "problemId": "797267",
    "problem_idx": "F1",
    "shortId": "1447F1",
    "contest_number": "1447",
    "problem_submissions": {
        "F1": [
            98482074,
            98493054,
            99700638,
            99700288,
            98507770,
            98535197
        ],
        "E": [
            98471672,
            98487762,
            98462641,
            98467656,
            98474856,
            98475468,
            98466748,
            98471089,
            98474335,
            98473016,
            98472819,
            98475501,
            98476100,
            98473152,
            98480927,
            98480063,
            98483273,
            98472232,
            98484816
        ],
        "D": [
            98465943,
            98460161,
            98460032,
            98460272,
            98457345,
            98456392,
            98459724,
            98462491,
            98458555,
            98456607,
            98463156,
            98464783,
            98463338,
            98468636,
            98460203,
            98469147,
            98464911,
            98463572,
            98466107
        ],
        "C": [
            98461616,
            98454149,
            98456198,
            98455102,
            98451609,
            98450909,
            98449636,
            98454179,
            98454951,
            98450139,
            98456033,
            98456615,
            98452367,
            98462699,
            98462915,
            98451741,
            98459164,
            98457799,
            98456088
        ],
        "B": [
            98459424,
            98448840,
            98451090,
            98683205,
            98449593,
            98453136,
            98446655,
            98474948,
            98449629,
            98450999,
            98461566,
            98449722,
            98448167,
            106347351,
            98672986,
            98448001,
            98455222,
            98451056,
            98457032,
            98449675,
            98477349,
            98451673
        ],
        "A": [
            98453484,
            98445641,
            98444797,
            98683165,
            98445393,
            98446357,
            98444563,
            98446885,
            98447224,
            98445951,
            98458580,
            98444650,
            98444710,
            135934878,
            135934648,
            135925416,
            135925369,
            135925314,
            135925279,
            135925096,
            135925047,
            135924862,
            135924832,
            135924797,
            135924764,
            135924707,
            135924661,
            135924602,
            135924566,
            135924526,
            135924432,
            135924298,
            135924179,
            106344775,
            98672850,
            98445798,
            98445995,
            98446080,
            98454545,
            98452405,
            98445713,
            98447399
        ],
        "F2": [
            100134501,
            99704090
        ]
    },
    "name": "F1. Frequency Problem  Easy Version ",
    "statement": "You are given an array [a_1, a_2,\r\ndots, a_n]. Your goal is to find the length of the longest subarray of\r\nthis array such that the most frequent value in it is unique. In other\r\nwords, you are looking for a subarray such that if the most frequent\r\nvalue occurs f times in this subarray, then at least 2 different values\r\nshould occur exactly f times.An array c is a subarray of an array d if c\r\ncan be obtained from d by deletion of several (possibly, zero or all)\r\nelements from the beginning and several (possibly, zero or all) elements\r\nfrom the end.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint N;\nint a[200010];\nint cnt[200010];\nint S[200010];\nconst int BIAS = 200000;\nint pos[400040];\n\nint main() {\n    scanf(\"%d\",&N);\n    int mx = 0;\n    for (int i=1;i<=N;i++) {\n        scanf(\"%d\",&a[i]);\n        cnt[a[i]]++;\n        mx = max(mx, cnt[a[i]]);\n    }\n    int max_id = -1;\n    for (int i=1;i<=N;i++) {\n        if (cnt[i] == mx) {\n            if (max_id != -1) {\n                printf(\"%d\\n\",N);\n                return 0;\n            }\n            max_id = i;\n        }\n    }\n    for (int j=-N;j<=N;j++) {\n        pos[j+BIAS] = -1;\n    }\n    int ans = 0;\n    for (int i=1;i<=N;i++) {\n        if (i == max_id || cnt[i] == 0) continue;\n        bool have = false;\n        pos[BIAS] = 0;\n        for (int j=1;j<=N;j++) {\n            S[j] = S[j - 1];\n            if (a[j] == max_id) S[j]++, have = true;\n            if (a[j] == i) S[j]--, have = true;\n            if (!have) continue;\n            if (pos[S[j] + BIAS] == -1) {\n                pos[S[j] + BIAS] = j;\n            } else {\n                ans = max(ans, j - pos[S[j] + BIAS]);\n            }\n        }\n        for (int j=-N;j<=N;j++) {\n            pos[j+BIAS] = -1;\n        }\n    }\n    printf(\"%d\\n\",ans);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F1. Frequency Problem  Easy Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/82067",
    "editorial": "First stepsLet be the most frequent value in the whole sequence. If is\r\nnot unique, we output . Otherwise, we can prove that one of the most\r\nfrequent values in an optimal solution is .\r\n"
}