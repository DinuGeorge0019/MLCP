{
    "link": "https://codeforces.com//contest/2108/problem/F",
    "problemId": "3362878",
    "problem_idx": "F",
    "shortId": "2108F",
    "contest_number": "2108",
    "problem_submissions": {
        "F": [
            318074076,
            318053056,
            317979016,
            318049609
        ],
        "E": [
            318006093,
            318008858,
            318200795,
            318048861,
            317993756,
            318024876,
            318050412,
            318276432,
            318147145,
            318024521
        ],
        "D": [
            317992477,
            317998675,
            319182607,
            317974400,
            321240302,
            317977258,
            317980895,
            317988260,
            317993109,
            317993702,
            317988454,
            317989488,
            317995058,
            317996633,
            317997808,
            317997816
        ],
        "B": [
            317976080,
            317965188,
            317963351,
            317965896,
            317963448,
            318001512,
            317970540,
            317966965,
            317963770,
            317963355,
            317972547,
            317967881,
            317968086,
            317964661,
            317966671,
            317966562
        ],
        "C": [
            317971653,
            317968542,
            317966737,
            318055757,
            317968604,
            317966809,
            317989087,
            317975119,
            317971049,
            317970883,
            317968958,
            317966636,
            317975399,
            317977731,
            317971385,
            317972596,
            317970612,
            317972254
        ],
        "A": [
            317959967,
            317960152,
            317960238,
            317962142,
            317960060,
            317963735,
            317962697,
            317960613,
            317959940,
            317959918,
            317964465,
            317960821,
            317962779,
            317960858,
            317960520,
            317959969
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142512",
    "editorial": "SolutionIt can be shown that for any array obtained after collapsing all\r\ntowers, we can also obtain any other array whose elements do not exceed\r\nthe elements of . A strict formal proof is provided in the spoiler\r\nbelow; here is a brief explanation. Suppose blocks fell onto the -th\r\ntower over the entire process. Then, for its height in the final array\r\nto be , blocks must have fallen after its collapse, while the remaining\r\nblocks fell before. Thus, we can always rearrange the order in which the\r\ntowers collapse so that its height becomes . In other words, we ensure\r\nthat blocks fall onto the -th tower after its collapse, and fall\r\nbefore.From this claim about the possibility of obtaining a smaller\r\narray, two facts follow: For any answer , we can also obtain the answer\r\n. This means we can apply binary search on the answer. For any answer ,\r\nwe can achieve it in the form . Thus, at each iteration of the binary\r\nsearch, we need to check the possibility of obtaining such an array. To\r\ndo this, we traverse the towers from left to right, tracking the number\r\nof cubes that fall onto each tower at some point and collapsing each\r\ntower after the required number of cubes have fallen onto it. The most\r\nefficient way to track the number of cubes is using the scanline method.\r\nIn total, there are iterations in the binary search over the answer and\r\noperations per iteration.The final complexity is .\r\n",
    "name": "F. Fallen Towers",
    "statement": "Pizano built an array a of n towers, each consisting of a_i\r\nge 0 blocks.Pizano can knock down a tower so that the next a_i towers\r\ngrow by 1. In other words, he can take the element a_i, increase the\r\nnext a_i elements by one, and then set a_i to 0. The blocks that fall\r\noutside the array of towers disappear. If Pizano knocks down a tower\r\nwith 0 blocks, nothing happens.Pizano wants to knock down all n towers\r\nin any order, . That is, for each i from 1 to n, he will knock down the\r\ntower at position i exactly once.Moreover, the resulting array of tower\r\nheights . This means that after he knocks down all n towers, for any i <\r\nj, the tower at position i must not be taller than the tower at position\r\nj.You are required to output the maximum\r\ntext{MEX} of the resulting array of tower heights.The\r\ntext{MEX} of an array is the smallest non-negative integer that is not\r\npresent in the array.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Fallen Towers.json",
    "hint": [
        "Hint Instead of trying to process it per element, why not when inserting, process which buttons that same robot can also press?"
    ]
}