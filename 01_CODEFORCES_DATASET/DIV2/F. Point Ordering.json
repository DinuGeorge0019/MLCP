{
    "link": "https://codeforces.com//contest/1255/problem/F",
    "problemId": "475559",
    "problem_idx": "F",
    "shortId": "1255F",
    "contest_number": "1255",
    "problem_submissions": {
        "E1": [
            65376345,
            65362349,
            65379019,
            65379231,
            65381365,
            65366418,
            65380019,
            65372166,
            65377390,
            65381751,
            65383634,
            65381490,
            65380093,
            65389225,
            65369401,
            65379688,
            65378584,
            65380932,
            65379653,
            65385144
        ],
        "E2": [
            65376264,
            65385821,
            65381572,
            65386523,
            65384540,
            65381279,
            65389375,
            65384984,
            65389091,
            65691059,
            65704614,
            65451948
        ],
        "F": [
            65375779,
            65385211,
            65388490,
            65389131,
            65387550,
            65391223,
            65696815,
            65727810,
            65496537
        ],
        "D": [
            65370945,
            65376492,
            65370356,
            65373732,
            65376315,
            65359238,
            65370229,
            65377454,
            65373608,
            65377110,
            65372789,
            65372691,
            65369056,
            65377955,
            65368879,
            65372201,
            65375025,
            65360545,
            65373196
        ],
        "C": [
            65364209,
            65367561,
            65365185,
            65370379,
            65369180,
            65375282,
            65364624,
            65368566,
            65367696,
            65368791,
            65366250,
            65385810,
            65363445,
            65364504,
            65364341,
            65366891,
            65364298,
            65372266,
            65367337
        ],
        "B": [
            65357074,
            65365610,
            65356532,
            65359436,
            65360660,
            65362219,
            65358616,
            65357121,
            65358490,
            65360944,
            65360793,
            65359110,
            65357689,
            65359084,
            65357670,
            65361106,
            65357886,
            65367149,
            65358881
        ],
        "A": [
            65352414,
            65792669,
            65360046,
            65351993,
            65354820,
            65353062,
            65354583,
            65352997,
            65351826,
            65353043,
            65356292,
            65352153,
            65352035,
            65353191,
            65353105,
            65351942,
            65353378,
            65352978,
            65362432,
            65354867
        ]
    },
    "name": "F. Point Ordering",
    "statement": "Khanh has n points on the Cartesian plane, denoted by a_1, a_2,\r\nldots, a_n. All pointsâ€™ coordinates are integers between -10^9 and 10^9,\r\ninclusive. No three points are collinear. He says that these points are\r\nvertices of a convex polygon; in other words, there exists a permutation\r\np_1, p_2,\r\nldots, p_n of integers from 1 to n such that the polygon a_{p_1} a_{p_2}\r\nldots a_{p_n} is convex and vertices are listed in counter-clockwise\r\norder.Khanh gives you the number n, but hides the coordinates of his\r\npoints. Your task is to guess the above permutation by asking multiple\r\nqueries. In each query, you give Khanh 4 integers t, i, j, k; where\r\neither t = 1 or t = 2; and i, j, k are three indices from 1 to n,\r\ninclusive. In response, Khanh tells you: if t = 1, the area of the\r\ntriangle a_ia_ja_k . if t = 2, the of the of two\r\noverrightarrow{a_ia_j} and\r\noverrightarrow{a_ia_k}. Recall that the of vector\r\noverrightarrow{a} = (x_a, y_a) and vector\r\noverrightarrow{b} = (x_b, y_b) is the x_a\r\ncdot y_b - x_b\r\ncdot y_a. The of a number is 1 it it is positive, and -1 otherwise. It\r\ncan be proven that the cross product obtained in the above queries can\r\nnot be 0.You can ask at most 3\r\ncdot n queries.Please note that Khanh fixes the coordinates of his\r\npoints and does not change it while answering your queries. You do not\r\nneed to guess the coordinates. In your permutation a_{p_1}a_{p_2}\r\nldots a_{p_n}, p_1 should be equal to 1 and the indices of vertices\r\nshould be .\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define fi first\n#define se second\n\ntypedef long long ll;\ntypedef pair<ll, ll> ip;\n\nll n, piv, sebelah, luas[1010];\nvector <ip> atas, bawah;\n\nll tanya(ll t, ll i, ll j, ll k) {\n\tprintf(\"%lld %lld %lld %lld\\n\", t, i, j, k);\n\tfflush(stdout);\n\tll resp;\n\tcin >> resp;\n\treturn resp;\n}\n\nint main() {\n\tcin >> n;\n\tpiv = 1;\n\tsebelah = 2;\n\tfor (ll i = 3; i <= n; i++) {\n\t\tll orientation = tanya(2, piv, sebelah, i);\n\t\tif (orientation == -1) {\n\t\t\tsebelah = i;\n\t\t}\n\t}\n\tll jauh = 2;\n\tif (sebelah == 2) jauh = 3;\n\tfor (ll i = 2; i <= n; i++) {\n\t\tif (i == sebelah) continue;\n\t\tluas[i] = tanya(1, piv, sebelah, i);\n\t\tif (luas[i] > luas[jauh]) jauh = i;\n\t}\n\tfor (ll i = 2; i <= n; i++) {\n\t\tif (i == sebelah || i == jauh) continue;\n\t\tll orientation = tanya(2, piv, jauh, i);\n\t\tif (orientation == 1) {\n\t\t\tatas.pb({luas[i], i});\n\t\t} else {\n\t\t\tbawah.pb({luas[i], i});\n\t\t}\n\t}\n\tsort(atas.rbegin(), atas.rend());\n\tsort(bawah.begin(), bawah.end());\n\tcout << \"0 \" << piv << \" \" << sebelah;\n\tfor (ll i = 0; i < bawah.size(); i++) {\n\t\tcout << \" \" << bawah[i].se;\n\t}\n\tcout << \" \" << jauh;\n\tfor (ll i = 0; i < atas.size(); i++) {\n\t\tcout << \" \" << atas[i].se;\n\t}\n\tcout << \"\\n\";\n\tfflush(stdout);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "interactive"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Point Ordering.json",
    "editorial_link": "https://codeforces.com//blog/entry/71594",
    "editorial": "Let's start by choosing vertices 1\n and 2\n as pivots.\n\nRecall that if the cross product of two vectors A? \n and B? \n is positive, point B\n lies to the left of A? \n; if the product is negative, point B\n lies to the right of A? \n; and if the product is zero, the 3 points (0,0)\n, A\n, B\n are collinear.\n\nWith n?2\n queries of type 2, we can know which vertices lie to the left or to the right of edge 1?2\n and then solve the two sides separately.\n\nConsider the left side and there are a\n vertices lie to the left, we can use a\n queries of type 1 to calculate the distance from those vertices to edge 1?2\n (the distance from vertex X\n to edge 1?2\n is twice the area of the triangle forms by 1\n, 2\n, X\n, divides by the length of edge 1?2\n).\n\nLet Y be the farthest from 1?2\n (there can be at most 2 such vertices). We can use a?1\n queries of type 2 to see if the others vertices lie between 1,Y\n or between Y,2\n, then sort them counter-clockwise with the asked distances.\n\nSo we will use n?2\n queries to calculate the distances from vertices 3,4,..n\n to edge 1?2\n and at most n?3\n for the latter step. This solution uses at most 3n?7\n queries.\n\nAnother solution is to find the vertex that is consecutive to 1\n in n?2\n queries and do the same as the solution above.",
    "hint": []
}