{
    "link": "https://codeforces.com//contest/1917/problem/E",
    "problemId": "2396147",
    "problem_idx": "E",
    "shortId": "1917E",
    "contest_number": "1917",
    "problem_submissions": {
        "F": [
            238733616,
            238732449,
            238722650,
            238747708,
            238719236,
            238789557,
            238737024,
            238776133,
            238801763,
            238731647,
            239022549,
            238871907,
            238842440,
            239033126,
            238722153,
            238742411
        ],
        "E": [
            238721862,
            238726116,
            238727431,
            238737036,
            238700760,
            238738779,
            238770928,
            238719511,
            238730269,
            238724820,
            238713406,
            238730340,
            238732710,
            238724485,
            238737682
        ],
        "D": [
            238707805,
            238694785,
            238712512,
            238715225,
            238727535,
            238700990,
            238706030,
            238714969,
            238715935,
            238715986,
            238715678,
            238715941,
            238738577,
            238719803,
            238709527,
            238707807
        ],
        "C": [
            238697529,
            238700737,
            238690241,
            238696341,
            238701325,
            238711284,
            238686628,
            238710402,
            238697578,
            238703582,
            238693431,
            238697956,
            238702600,
            238708773,
            238700119,
            238694618,
            238692698,
            238693118
        ],
        "B": [
            238682533,
            238681807,
            238679080,
            238680525,
            238688332,
            238704922,
            238688891,
            238681860,
            238681830,
            238685486,
            238678116,
            238683453,
            238695119,
            238690853,
            238683129,
            238686944,
            238685014,
            238679989
        ],
        "A": [
            238678969,
            238676634,
            238676579,
            238676658,
            238681375,
            238702133,
            238676697,
            238677114,
            238676598,
            238677433,
            238676559,
            238676795,
            238690754,
            238695279,
            238676668,
            238682718,
            238676593,
            238676877
        ]
    },
    "name": "E. Construct Matrix",
    "statement": "You are given an integer n and an integer k. Your task is to construct a\r\nmatrix of size n\r\ntimes n consisting of numbers 0 and 1 in such a way that the following\r\nconditions are true, or report that it is impossible: the sum of all the\r\nnumbers in the matrix is exactly k; the bitwise\r\ntexttt{XOR} of all the numbers in the row i is the same for each i; the\r\nbitwise\r\ntexttt{XOR} of all the numbers in the column j is the same for each j.\r\n",
    "solutions": [
        "#include<iostream>\n#include<vector>\n#include<set>\n#include<algorithm>\n#include<cstring>\n#include<random>\n#include<ctime>\nusing namespace std;\nconst int maxn=1005;\nint T,n,k,p[maxn][maxn];\nsigned main(){\n\tios::sync_with_stdio(false);cin.tie(0);\n\tcin>>T;\n\twhile(T--){\n\t\tcin>>n>>k;\n\t\tfor(int i=1;i<=n;++i)for(int j=1;j<=n;++j)p[i][j]=0;\n\t\tif(k&1){\n\t\t\tcout<<\"No\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tif(k%4==0){\n\t\t\tcout<<\"Yes\\n\";\n\t\t\tk/=4;\n\t\t\tfor(int i=1;i<=n&&k;i+=2)for(int j=1;j<=n&&k;j+=2){\n\t\t\t\t--k;\n\t\t\t\tp[i][j]=p[i+1][j]=p[i][j+1]=p[i+1][j+1]=1;\n\t\t\t}\n\t\t\tfor(int i=1;i<=n;++i){\n\t\t\t\tfor(int j=1;j<=n;++j)cout<<p[i][j]<<' ';\n\t\t\t\tcout<<'\\n';\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tint fg=0;\n\t\tif(k>n*n/2){\n\t\t\tk=n*n-k,fg=1;\n\t\t}\n\t\tint flag=0;\n\t\tif(n%4==2){\n\t\t\tif(k<n){\n\t\t\t\tflag=1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tk=(k-n)/4;\n\t\t\t\tfor(int i=1;i<=n;++i)p[i][i]=1;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(k<n+2){\n\t\t\t\tflag=1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tk=(k-n-2)/4;\n\t\t\t\tfor(int i=5;i<=n;++i)p[i][i]=1;\n\t\t\t\tp[1][2]=p[1][3]=p[1][4]=p[2][1]=p[3][1]=p[4][1]=1;\n\t\t\t}\n\t\t}\n\t\tif(flag){\n\t\t\tif(k<6){\n\t\t\t\tcout<<\"No\\n\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tk-=6;k/=4;\n\t\t\tp[1][1]=p[1][2]=p[2][1]=p[2][3]=p[3][2]=p[3][3]=1;\n\t\t}\n\t\tfor(int i=1;i<=n&&k;i+=2)for(int j=1;j<=n&&k;j+=2)if(!p[i][j]&&!p[i+1][j]&&!p[i][j+1]&&!p[i+1][j+1]){\n\t\t\t--k;\n\t\t\tp[i][j]=p[i+1][j]=p[i][j+1]=p[i+1][j+1]=1;\n\t\t}\n\t\tif(k){\n\t\t\tcout<<\"No\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tcout<<\"Yes\\n\";\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tfor(int j=1;j<=n;++j){\n\t\t\t\tif(fg)cout<<1-p[i][j]<<' ';\n\t\t\t\telse cout<<p[i][j]<<' ';\n\t\t\t}\n\t\t\tcout<<'\\n';\n\t\t}\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Construct Matrix.json",
    "editorial_link": "https://codeforces.com//blog/entry/123721",
    "editorial": "SolutionFirst, let\u00e2\u0080\u0099s note that when is odd, the solution doesn\u00e2\u0080\u0099t exist.\r\nIt\u00e2\u0080\u0099s obvious since in the solution the xors of all the rows are the\r\nsame, it follows that the parity of the number of s in each row is the\r\nsame, and let\u00e2\u0080\u0099s remember that is even, and from these conditions get\r\nthat solution exists only when is even.Second, let\u00e2\u0080\u0099s note that for or ,\r\nthe solution exists only for .For all other cases, a solution always\r\nexists. when , we can fill submatrices of size . when . Let\u00e2\u0080\u0099s note that\r\n. Let\u00e2\u0080\u0099s write in the following positions: , , , , , . After this, we\r\nshould fill the remaining ones, and let\u00e2\u0080\u0099s note that . There are obvious\r\nsubmatrices of size , which aren\u00e2\u0080\u0099t filled yet outside the top left\r\nsubmatrix. If , then we can fill as many of those submatrices as\r\nnecessary, otherwise if , we can also fill with s the following\r\npositions too: , , , .\r\n"
}