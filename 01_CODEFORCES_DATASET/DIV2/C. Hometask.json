{"link": "https://codeforces.com//contest/155/problem/C", "problemId": "951", "problem_idx": "C", "shortId": "155C", "contest_number": "155", "problem_submissions": {"C": [1225243, 1226717, 1224971, 1224506, 1224768, 1224444, 1224336, 1226178, 1224907, 1224916, 1224811, 1224924, 1224662, 1223975, 1226905, 1227456, 1225902, 1228923, 4141949, 1225351], "D": [1224117, 1227696, 1226383, 1225863, 1228335, 1226351, 1226456, 1225394, 1226266, 1226950, 1226772, 1227105, 1227425, 1226475, 1226136, 1224942, 1227473, 1225325, 1227301], "B": [1221607, 1221762, 1222099, 1223177, 1225270, 1222150, 1223376, 1222553, 1222471, 1222167, 1223151, 1222830, 1222882, 1224581, 1222789, 1222810, 1222778, 1222687, 1222965], "A": [1221146, 1221148, 1221169, 1221961, 1222044, 1221349, 1221696, 1221640, 1221515, 1221343, 1221470, 1221634, 1221617, 17013899, 1224871, 1221409, 1221848, 1221716, 1221534, 1221252], "E": [1239607, 1239595, 1239584, 1231448, 1239840, 1243072]}, "name": "C. Hometask", "statement": "Sergey attends lessons of the -ish language. Each lesson he receives a\r\nhometask. This time the task is to translate some sentence to the -ish\r\nlanguage. Sentences of the -ish language can be represented as strings\r\nconsisting of lowercase Latin letters without spaces or punctuation\r\nmarks.Sergey totally forgot about the task until half an hour before the\r\nnext lesson and hastily scribbled something down. But then he\r\nrecollected that in the last lesson he learned the grammar of -ish. The\r\nspelling rules state that -ish contains some \"forbidden\" pairs of\r\nletters: such letters can never occur in a sentence next to each other.\r\nAlso, the order of the letters doesn\u2019t matter (for example, if the pair\r\nof letters \"\" is forbidden, then any occurrences of substrings \"\" and \"\"\r\nare also forbidden). Also, each pair has different letters and each\r\nletter occurs in no more than one forbidden pair.Now Sergey wants to\r\ncorrect his sentence so that it doesn\u2019t contain any \"forbidden\" pairs of\r\nletters that stand next to each other. However, he is running out of\r\ntime, so he decided to simply cross out some letters from the sentence.\r\nWhat smallest number of letters will he have to cross out? When a letter\r\nis crossed out, it is \"removed\" so that the letters to its left and\r\nright (if they existed), become neighboring. For example, if we cross\r\nout the first letter from the string \"\", we get the string \"\", and if we\r\ncross out the second letter, we get \"\".\r\n", "solutions": ["#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <complex>\n#include <cmath>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n\nusing namespace std;\n\nint main() {\n    string s; cin >> s;\n    int k; cin >> k;\n    map<char, char> f;\n    for (int i=0; i < k; i++) {\n        char a,b; cin >> a >> b;\n        f[a] = b;\n        f[b] = a;\n    }\n    \n    char x = ' ', y = ' ';\n    int nx = 0, ny = 0, nc = 0, count = 0;\n    for (int i=0; i < s.size(); i++ ){\n        if (x == ' ') {\n            x = s[i];\n            nx = 1;\n        }\n        else if (y == ' ') {\n            y = s[i];\n            ny = 1;\n        }\n        else if (s[i] == x) nx++;\n        else if (s[i] == y) ny++;\n        else if (s[i] != x && s[i] != y) {\n            if (f[x] == y) {\n                count += min(nx, ny);\n            }\n            x = s[i-1];\n            nx = nc;\n            y = s[i];\n            ny = 1;\n        }\n        if (i != 0 && s[i] == s[i-1]) {\n            nc++;\n        } else {\n            nc = 1;\n        }\n    }\n    if (f[x] == y) {\n        count += min(nx, ny);\n    }\n    cout << count << endl;\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["dp", "greedy"], "dificulty": "1600", "interactive": false}