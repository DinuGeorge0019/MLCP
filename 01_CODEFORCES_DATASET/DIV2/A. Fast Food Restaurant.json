{
    "link": "https://codeforces.com//contest/1313/problem/A",
    "problemId": "546720",
    "problem_idx": "A",
    "shortId": "1313A",
    "contest_number": "1313",
    "problem_submissions": {
        "E": [
            71681170,
            71676206,
            71701918,
            71678634,
            71684245
        ],
        "D": [
            71668784,
            71676711,
            71679066,
            71902295,
            71669382,
            71676113,
            71676282,
            71682897,
            71682850,
            71684110,
            71683951,
            71679478,
            71685695,
            71684314,
            71693014,
            71684216,
            71672133,
            71677829,
            71681283
        ],
        "C1": [
            71659792,
            71665149,
            71664308,
            71663397,
            71902274,
            71657100,
            71662551,
            71666875,
            71662026,
            71660339,
            71665119,
            71670647,
            71661830,
            71671471,
            71673887,
            71666482,
            71663477,
            71673192,
            71664658,
            71659547,
            71660235
        ],
        "C2": [
            71659727,
            71665106,
            71664225,
            71663324,
            71902282,
            71657182,
            71679705,
            71666789,
            71661927,
            71660290,
            71665068,
            71670595,
            71672508,
            71671524,
            71673974,
            71666543,
            71663428,
            71673118,
            71664615,
            71659474,
            71664008
        ],
        "B": [
            71658438,
            71660532,
            71661422,
            71660555,
            71902225,
            71683862,
            71659255,
            71661835,
            71671081,
            71672434,
            71661140,
            71675335,
            71666293,
            71666358,
            71674883,
            71661144,
            71675700,
            71667622
        ],
        "A": [
            71654494,
            71655402,
            71656261,
            71655976,
            71902195,
            71678655,
            71654489,
            71655616,
            71656192,
            71666785,
            71655624,
            71657167,
            71655162,
            71654706,
            71657644,
            71657443,
            71657488,
            71654829,
            71654475,
            71655371,
            71655189
        ]
    },
    "name": "A. Fast Food Restaurant",
    "statement": "Tired of boring office work, Denis decided to open a fast food\r\nrestaurant.On the first day he made a portions of dumplings, b portions\r\nof cranberry juice and c pancakes with condensed milk.The peculiarity of\r\nDenis\u2019s restaurant is the procedure of ordering food. For each visitor\r\nDenis himself chooses a set of dishes that this visitor will receive.\r\nWhen doing so, Denis is guided by the following rules: every visitor\r\nshould receive at least one dish (dumplings, cranberry juice, pancakes\r\nwith condensed milk are all considered to be dishes); each visitor\r\nshould receive no more than one portion of dumplings, no more than one\r\nportion of cranberry juice and no more than one pancake with condensed\r\nmilk; all visitors should receive different sets of dishes. What is the\r\nmaximum number of visitors Denis can feed?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\ntypedef long long ll;\nll gi(){\n\tll x=0,f=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch))f^=ch=='-',ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-'0',ch=getchar();\n\treturn f?x:-x;\n}\nint C[][3]={\n\t{0,0,1},\n\t{0,1,0},\n\t{1,0,0},\n\t{0,1,1},\n\t{1,0,1},\n\t{1,1,0},\n\t{1,1,1}\n};\nint main(){\n#ifdef LOCAL\n\tfreopen(\"in.in\",\"r\",stdin);\n\t//freopen(\"out.out\",\"w\",stdout);\n#endif\n\tint T=gi();\n\twhile(T--){\n\t\tint a=gi(),b=gi(),c=gi(),ans=0;\n\t\tfor(int i=0;i<1<<7;++i){\n\t\t\tint sa=0,sb=0,sc=0;\n\t\t\tfor(int j=0;j<7;++j)if(i>>j&1)sa+=C[j][0],sb+=C[j][1],sc+=C[j][2];\n\t\t\tif(sa<=a&&sb<=b&&sc<=c)ans=std::max(ans,__builtin_popcount(i));\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "implementation"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Fast Food Restaurant.json",
    "editorial_link": "https://codeforces.com//blog/entry/74146",
    "editorial": "There are seven possible sets of dishes, so the simplest solution is to\r\niterate over all possible subsets of sets of dishes.You can also go over\r\npermutations of sets of dishes and gather sets of dishes greedily in the\r\nselected order.Note that the solution can be optimal only when it is\r\nimpossible to add an additional set of dishes to it.Let the solution be\r\nsuch that it is impossible to add a single set of dishes to it and it\r\ndoes not have any set consisting of one dish, but there is a set\r\nconsisting of two or three dishes containing this one dish. Then you can\r\nreplace the corresponding set with a set of one dish, without worsening\r\nthe answer. This means that at the beginning you can greedily add all\r\nthe sets consisting of one dish.The same can show that any set of three\r\ndishes can be replaced with a set of two dishes, so after the sets of\r\none and two dishes are fixed, it is enough to simply check whether you\r\ncan add a set of three dishes.However, it is wrong to choose sets of two\r\ndishes greedily. Suppose that after choosing sets of one dish, there is\r\none dish of the first type, one dish of the second type and two dishes\r\nof the third type. Then you can choose two sets of dishes, but if you\r\ntake at the beginning a set of dishes of the first and second types, you\r\nwon\u00e2\u0080\u0099t get two different sets.In this case, you can simply iterate over\r\nthe order of choosing sets of two dishes or notice that all such tests\r\nhave the form , , , where , and solve them separately.\r\n"
}