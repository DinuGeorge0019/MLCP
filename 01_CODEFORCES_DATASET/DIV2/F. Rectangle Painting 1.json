{
    "link": "https://codeforces.com//contest/1199/problem/F",
    "problemId": "380946",
    "problem_idx": "F",
    "shortId": "1199F",
    "contest_number": "1199",
    "problem_submissions": {
        "E": [
            58030586,
            58021734,
            58025826,
            58022450,
            58018815,
            58018132,
            58016064,
            58035343,
            58034869,
            58017816,
            58024170,
            58025918,
            58022291,
            58023170,
            58022937,
            58024351,
            58028105
        ],
        "F": [
            58024830,
            58028686,
            58018020,
            58017115,
            58028245,
            58019034,
            58384931,
            58013729,
            58065279,
            58027365,
            58334987,
            58059871,
            58026310
        ],
        "D": [
            58011622,
            58006050,
            58005239,
            58009886,
            58003558,
            58013213,
            58006910,
            58023637,
            58004292,
            58010802,
            58010127,
            58010591,
            58010277,
            58011062,
            58011952,
            58012323,
            58015144,
            58009223,
            58018000
        ],
        "C": [
            58003286,
            58015626,
            58038871,
            58045412,
            58007604,
            58002586,
            58019533,
            58011071,
            58005193,
            58006733,
            58004437,
            58004399,
            58006254,
            58008729,
            58007961,
            58005653,
            58003369,
            58011620
        ],
        "B": [
            57997198,
            58010291,
            57996992,
            57996941,
            58045445,
            57999240,
            57998882,
            57996286,
            57999211,
            58000305,
            58000178,
            58000443,
            57996371,
            57996748,
            57996780,
            57999052,
            57996536,
            57997898,
            57997650,
            58000545
        ],
        "A": [
            57995512,
            58007859,
            57995725,
            57995380,
            57995192,
            57996027,
            57994975,
            57996866,
            57994742,
            57994764,
            57995474,
            57994875,
            57994979,
            57995233,
            57995511,
            57995009,
            57994816,
            57996166,
            57995838
        ]
    },
    "name": "F. Rectangle Painting 1",
    "statement": "There is a square grid of size n\r\ntimes n. Some cells are colored in black, all others are colored in\r\nwhite. In one operation you can select some rectangle and color all its\r\ncells in white. It costs\r\nmax(h, w) to color a rectangle of size h\r\ntimes w. You are to make all cells white for minimum total cost.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <cstdlib>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n\n#define isNum(a) (a >= '0' && a <= '9')\n#define SP putchar(' ')\n#define EL putchar('\\n')\n#define File(a) freopen(a \".in\", \"r\", stdin), freopen(a \".out\", \"w\", stdout)\n\ntemplate<class T>\ninline void read(T&);\ntemplate<class T>\ninline void write(const T&);\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef const int& ci;\ntypedef std::pair<int, int> pii;\nconst int iinf = 2147483647;\nconst ll llinf = 9223372036854775807ll;\nusing std::min;\nusing std::max;\nusing std::abs;\nusing std::sort;\nconst int N = 55;\n\nint dfs(int, int, int, int);\n\nint dp[N][N][N][N];\nbool a[N][N];\n\nint main () {\n    int n;\n    read(n);\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            char ch;\n            std::cin >> ch;\n            a[i][j] = (ch == '#');\n        }\n    }\n    memset(dp, -1, sizeof(dp));\n    write(dfs(1, 1, n, n)), EL;\n    return 0;\n}\n\ntemplate<class T>\nvoid read(T &Re) {\n    T k = 0;\n    char ch = getchar();\n    int flag = 1;\n    while (!isNum(ch)) {\n        if (ch == '-') {\n            flag = -1;\n        }\n        ch = getchar();\n    }\n    while (isNum(ch)) {\n        k = (k << 1) + (k << 3) + ch - '0';\n        ch = getchar();\n    }\n    Re = flag * k;\n}\ntemplate<class T>\nvoid write(const T &Wr) {\n    if (Wr < 0) {\n        putchar('-');\n        write(-Wr);\n    } else {\n        if (Wr < 10) {\n            putchar(Wr + '0');\n        } else {\n            write(Wr / 10);\n            putchar((Wr % 10) + '0');\n        }\n    }\n}\n\nint dfs(int x1, int y1, int x2, int y2) {\n    if (~dp[x1][y1][x2][y2]) {\n        return dp[x1][y1][x2][y2];\n    }\n    if (x1 == x2 && y1 == y2) {\n        return dp[x1][y1][x2][y2] = a[x1][y1];\n    }\n    int ans = max(x2 - x1 + 1, y2 - y1 + 1);\n    for (int i = x1; i < x2; ++i) {\n        ans = min(ans, dfs(x1, y1, i, y2) + dfs(i + 1, y1, x2, y2));\n    }\n    for (int i = y1; i < y2; ++i) {\n        ans = min(ans, dfs(x1, y1, x2, i) + dfs(x1, i + 1, x2, y2));\n    }\n    return dp[x1][y1][x2][y2] = ans;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Rectangle Painting 1.json",
    "editorial_link": "https://codeforces.com/blog/entry/68812",
    "editorial": "Let's solve the problem for rectangle W\u00d7H\n (W?H\n). Of course, we can cover all rectangle with itself for cost W\n. To get something smaller than W\n we have to leave at least one column uncovered \u0097 otherwise we pay at least sum of w\n over all rectangles which is at least W\n. This gives us an idea to use DP on rectangles to solve the problem: dp[x1][x2][y1][y2]\n is minimal cost to cover the rectangle [x1;x2)\u00d7[y1;y2)\n. It is initialized by max(x2?x1,y2?y1)\n, and we have to try not to cover every column/row. Of course, we have to check if it is all white from the beginning; to do that we will precalculate 2D prefix sums. Total complexity is O(n5)\n."
}