{
    "link": "https://codeforces.com//contest/144/problem/C",
    "problemId": "783",
    "problem_idx": "C",
    "shortId": "144C",
    "contest_number": "144",
    "problem_submissions": {
        "B": [
            1079685,
            1076543,
            1079898,
            1082847,
            1082735,
            1077650,
            1076828,
            1076897,
            1075703,
            1076570,
            1078583,
            1076905,
            1080333,
            1077070,
            1076919,
            1077073,
            1077426,
            1076974,
            1076783,
            1080322
        ],
        "C": [
            1079250,
            1077173,
            1076551,
            1078237,
            1077015,
            1076842,
            1077698,
            1077957,
            1077065,
            1077590,
            1079431,
            1077439,
            1075886,
            1077839,
            1077621,
            1077697,
            1075975,
            1077567,
            1077415,
            1077375
        ],
        "D": [
            1078442,
            1078477,
            1077789,
            1080084,
            1080478,
            1079868,
            1078561,
            1082477,
            1079132,
            1078573,
            1078956,
            1077881,
            1080255,
            1079060,
            1079072,
            1079853,
            1079171,
            1079213,
            1078913
        ],
        "E": [
            1077630,
            1079988,
            1080515,
            1079940,
            1081931,
            1080530,
            1097618,
            1079963,
            1082156,
            1078798,
            1082939,
            1084001,
            1083991,
            1083989
        ],
        "A": [
            1075930,
            1075624,
            1075694,
            1076063,
            1075731,
            1075713,
            1075976,
            1075788,
            1076457,
            1075616,
            1076584,
            1075746,
            1080725,
            1075619,
            1075655,
            1075636,
            1076691,
            1075720,
            1075774,
            1080649
        ]
    },
    "name": "C. Anagram Search",
    "statement": "A string is called an of the string , if it is possible to rearrange\r\nletters in so that it is identical to the string . For example, the\r\nstring \"\" is an anagram of the string \"\" and the string \"\" is not.The\r\nstring is called a of the string if it can be read starting from some\r\nposition in the string . For example, the string \"\" has six substrings:\r\n\"\", \"\", \"\", \"\", \"\", \"\".You are given a string , consisting of lowercase\r\nLatin letters and characters \"\". You are also given a string ,\r\nconsisting of lowercase Latin letters only. Let’s assume that a string\r\nis if you can obtain an anagram of the string from it, replacing the \"\"\r\ncharacters by Latin letters. Each \"\" can be replaced by exactly one\r\ncharacter of the Latin alphabet. For example, if the string = , then the\r\nstring \"\" is good, and the string is not. Your task is to find the\r\nnumber of good substrings of the string (identical substrings must be\r\ncounted in the answer several times).\r\n",
    "solutions": [
        "#include <string>\n#include <algorithm>\n#include <utility>\n#include <stdlib.h>\n#include <stdio.h>\n#include <vector>\n#include <iostream>\n#include <sstream>\n#include <set>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <utility>\n#include <time.h>\n#include <string.h>\nusing namespace std;\n\n\nint main( void )\n{\n\tvector<char> S;\n\tvector<int> P(26);\n\tvector<int> cur(26);\n\tint Plen = 0;\n\n\tint c;\n\twhile( (c = getchar()) != '\\n' ){\n\t\tS.push_back(c);\n\t}\n\twhile( (c = getchar()) != '\\n' ){\n\t\tP[c-'a'] ++;\n\t\tPlen ++;\n\t}\n\tif( Plen > S.size() ){\n\t\tcout << 0 << endl;\n\t\treturn 0;\n\t}\n\n\t// Plen <= S.size()\n\tfor( int j = 0; j < Plen; j ++ )\n\t\tif( S[j] != '?' )\n\t\t\tcur[S[j]-'a'] ++;\n\n\tint ans = 0;\n\tfor( int i = 0; i < S.size(); i ++ ){\n\t\tfor( int t = 0; t < 26; t ++ )\n\t\t\tif( cur[t] > P[t] ) goto NG;\n\t\t++ ans;\n\t\tNG:;\n\t\tif( S[i] != '?' )\n\t\t\tcur[S[i]-'a'] --;\n\t\tint j = i + Plen;\n\t\tif( j >= S.size() ) break;\n\t\tif( S[j] != '?' )\n\t\t\tcur[S[j]-'a'] ++;\n\t}\n\tcout << ans << endl;\n\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Anagram Search.json",
    "editorial_link": "https://codeforces.com//blog/entry/3693",
    "editorial": "Let's count number of each letter in the second string and save it, for example, in array a[1..26]. For the first strings' prefix of length n, where n is the length of second string, (it's the first substring) we count number of each letter in array b[1..26]. We don't count characters ``\\texttt{?}''. If there are b[i]???a[i] for all i, then it's good substring. Then go to the second substring: subtract from the array b the first character:  b[s[1]?-?'a'?+?1]?? and add n?+?1 character: b[s[n?+?1]?-?'a'?+?1]?+??+?. If some of these characters is ``\\texttt{?}'' then we shouldn't do for it the subtraction or addition. Then repeat the showed check and go to the next substring. Let's repeat this procedure for all substrings of length n.",
    "hint": []
}