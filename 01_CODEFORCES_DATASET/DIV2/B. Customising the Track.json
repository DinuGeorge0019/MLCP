{
    "link": "https://codeforces.com//contest/1543/problem/B",
    "problemId": "1038886",
    "problem_idx": "B",
    "shortId": "1543B",
    "contest_number": "1543",
    "problem_submissions": {
        "E": [
            121638293,
            121640122,
            121646039,
            121646816,
            121811012,
            121760431,
            121760422,
            121760385,
            121760374,
            121760355,
            121760336,
            121760282,
            121760064,
            121760038,
            121759905,
            121653632,
            121644982,
            121669265,
            121699461,
            121677102,
            121676768,
            121663043,
            121682193,
            121682008,
            121681968,
            121681825
        ],
        "C": [
            121607103,
            121580363,
            121606682,
            121627500,
            121653560,
            121590146,
            121589009,
            121582693,
            121614005,
            121615009,
            121616095,
            121613756,
            121596961,
            121599154,
            121597926,
            121608185,
            121597933,
            121606103,
            121606203
        ],
        "D2": [
            121596158,
            121601464,
            121617704,
            121620392,
            121626490,
            121619638,
            121618444,
            121618704,
            121605621,
            121605043,
            121602716,
            121616842,
            121615764,
            121615962,
            121615812,
            121620480,
            121619304,
            121615169,
            121624602
        ],
        "D1": [
            121576532,
            121593477,
            121613266,
            121597889,
            121614339,
            121601755,
            121604364,
            121608739,
            121598195,
            121595487,
            121589696,
            121586209,
            121618059,
            121609771,
            121609361,
            121593980,
            121614987,
            121614945,
            121599352
        ],
        "B": [
            121572816,
            121573125,
            121599866,
            121581407,
            121575511,
            121573418,
            121573029,
            121584593,
            121575414,
            121574254,
            121573423,
            121577407,
            121575483,
            121573867,
            121576997,
            121576837,
            121577599,
            121574767,
            121583481
        ],
        "A": [
            121572516,
            121572434,
            121598213,
            121578311,
            121573469,
            121572491,
            121577467,
            121587968,
            121572718,
            121572541,
            121572464,
            121574176,
            121573349,
            121572610,
            121574728,
            121572920,
            121574400,
            121572846,
            121578119
        ]
    },
    "name": "B. Customising the Track",
    "statement": "Highway 201 is the most busy street in Rockport. Traffic cars cause a\r\nlot of hindrances to races, especially when there are a lot of them. The\r\ntrack which passes through this highway can be divided into n\r\nsub-tracks. You are given an array a where a_i represents the number of\r\ntraffic cars in the i-th sub-track. You define the inconvenience of the\r\ntrack as\r\nsum\r\nlimits_{i=1}^{n}\r\nsum\r\nlimits_{j=i+1}^{n}\r\nlvert a_i-a_j\r\nrvert, where |x| is the absolute value of x. You can perform the\r\nfollowing operation any (possibly zero) number of times: choose a\r\ntraffic car and move it from its current sub-track to any other\r\nsub-track.Find the minimum inconvenience you can achieve.\r\n",
    "solutions": [
        "// Problem: B. Customising the Track\n// Contest: Codeforces - Codeforces Round #730 (Div. 2)\n// URL: https://codeforces.com/contest/1543/problem/B\n// Memory Limit: 256 MB\n// Time Limit: 1000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n//And in that light,I find deliverance.\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nconst int p=998244353;\nint qp(int x,int y)\n{\n\tint res=1;\n\tfor(int t=x; y; y>>=1,t=t*t%p) if(y&1) res=res*t%p;\n\treturn res;\n}\nint a[1000003];\nsigned main()\n{\n\tfor(int T=read();T--;)\n\t{\n\t\tint n=read();\n\t\tint s=0;\n\t\tfor(int i=1; i<=n; ++i) a[i]=read(),s+=a[i];\n\t\tint A=s%n;\n\t\tprintf(\"%lld\\n\",A*(n-A));\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "greedy",
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Customising the Track.json",
    "editorial_link": "https://codeforces.com//blog/entry/92582",
    "editorial": "TutorialIn the optimal arrangement, the number of traffic cars will be\r\ndistributed as evenly as possible, i.e., Unable to parse markup\r\n[type=CF_MATHJAX] for each valid . Proof (Warning: Too much Math\r\ninside)Let\u00e2\u0080\u0099s sort the array in non-decreasing order. Let Unable to parse\r\nmarkup [type=CF_MATHJAX], Unable to parse markup [type=CF_MATHJAX],\r\nUnable to parse markup [type=CF_MATHJAX], elements of the array be equal\r\nto , elements of the array be equal to , Unable to parse markup\r\n[type=CF_MATHJAX] and Unable to parse markup [type=CF_MATHJAX].The\r\ninconvenience of the track will be equal to Unable to parse markup\r\n[type=CF_MATHJAX]Suppose we increase by and decrease by . Then, the\r\nnumber of occurrences of and will reduce by , two new elements and will\r\nbe formed, and and will remain unchanged. In such a case, the new\r\ninconvenience of the track will be Unable to parse markup\r\n[type=CF_MATHJAX] Unable to parse markup [type=CF_MATHJAX] Unable to\r\nparse markup [type=CF_MATHJAX] Unable to parse markup [type=CF_MATHJAX]\r\nUnable to parse markup [type=CF_MATHJAX] Unable to parse markup\r\n[type=CF_MATHJAX] Unable to parse markup [type=CF_MATHJAX] Unable to\r\nparse markup [type=CF_MATHJAX]Change in inconvenience, Unable to parse\r\nmarkup [type=CF_MATHJAX] Unable to parse markup [type=CF_MATHJAX] Unable\r\nto parse markup [type=CF_MATHJAX] Unable to parse markup\r\n[type=CF_MATHJAX] Unable to parse markup [type=CF_MATHJAX] Unable to\r\nparse markup [type=CF_MATHJAX] Unable to parse markup [type=CF_MATHJAX]\r\nUnable to parse markup [type=CF_MATHJAX] Unable to parse markup\r\n[type=CF_MATHJAX] as Unable to parse markup [type=CF_MATHJAX].So, it\r\nfollows that if Unable to parse markup [type=CF_MATHJAX]. it is always\r\nbeneficial to move a traffic car from the sub-track with the highest\r\nnumber of traffic cars to the sub-track with the lowest number of\r\ntraffic cars. If Unable to parse markup [type=CF_MATHJAX], applying this\r\noperation won\u00e2\u0080\u0099t change the inconvenience as this will only swap the last\r\nand the first element of the array leaving everything else unchanged. If\r\nUnable to parse markup [type=CF_MATHJAX], all the elements of the array\r\nare already equal, meaning that we have inconvenience which is the\r\nminimum possible. So, there is no point in applying any operation.Now\r\nthat we have constructed the optimal arrangement of traffic cars, let\u00e2\u0080\u0099s\r\nfind out the value of minimum inconvenience of this optimal arrangement.\r\nFinding it naively in Unable to parse markup [type=CF_MATHJAX] will time\r\nout. Notice that in the optimal arrangement we will have some (say )\r\nelements equal to some number and the other Unable to parse markup\r\n[type=CF_MATHJAX] elements equal to . Let the sum of all elements in be\r\n. Then, Unable to parse markup [type=CF_MATHJAX] and Unable to parse\r\nmarkup [type=CF_MATHJAX]. For each pair Unable to parse markup\r\n[type=CF_MATHJAX], we will get an absolute difference of and for all\r\nother pairs, we will get an absolute difference of . Number of such\r\npairs with difference is equal to Unable to parse markup\r\n[type=CF_MATHJAX]. So, the minimum inconvenience we can achieve is equal\r\nto Unable to parse markup [type=CF_MATHJAX]. That\u00e2\u0080\u0099s all we need to find\r\nout! Time ComplexityUnable to parse markup [type=CF_MATHJAX]\r\n"
}