{
    "link": "https://codeforces.com//contest/1903/problem/D2",
    "problemId": "2355508",
    "problem_idx": "D2",
    "shortId": "1903D2",
    "contest_number": "1903",
    "problem_submissions": {
        "D2": [
            235128331,
            235435764,
            235183865,
            235116126,
            235121557,
            235122165,
            236143935,
            235115553,
            235129873,
            235119268
        ],
        "F": [
            235111543,
            235102179,
            235105725,
            235099949,
            235124718,
            235126382,
            235187626,
            235129442,
            235218441,
            235126934,
            235133564,
            235146171,
            235141771,
            235179210
        ],
        "E": [
            235106076,
            235104135,
            235115833,
            235114935,
            235102473,
            235112204,
            235107850,
            235103854,
            235111843,
            235109842,
            235115868,
            235124408,
            235114753,
            235126753,
            235108387,
            235107433,
            235107971,
            235105219,
            235108510,
            235108333
        ],
        "D1": [
            235093312,
            235109270,
            235095674,
            235117999,
            235091603,
            235099696,
            235100348,
            235094032,
            235098578,
            235098148,
            235119995,
            235115692,
            235105537,
            235119353,
            235094232,
            235095613,
            235096813,
            235097844,
            235096074,
            235099176
        ],
        "C": [
            235088892,
            235089084,
            235089891,
            235103743,
            235087836,
            235093791,
            235088528,
            235088785,
            235092085,
            235091882,
            235086000,
            235089517,
            235099201,
            235093455,
            235087482,
            235090537,
            235090823,
            235091561,
            235089639,
            235091936
        ],
        "B": [
            235086528,
            235084790,
            235086716,
            235102627,
            235086465,
            235090208,
            235086073,
            235088901,
            235087776,
            235087683,
            235089557,
            235084538,
            235096155,
            235090241,
            235085240,
            235087001,
            235086944,
            235087486,
            235086654,
            235088684
        ],
        "A": [
            235083574,
            235084421,
            235082280,
            235100671,
            235083954,
            235085469,
            235082350,
            235089029,
            235082379,
            235083014,
            235084518,
            235090802,
            235083842,
            235083352,
            235082144,
            235082627,
            235082396,
            235082150,
            235082134,
            235082717
        ]
    },
    "name": "D2. Maximum And Queries  hard version ",
    "statement": "Theofanis really likes to play with the bits of numbers. He has an array\r\na of size n and an integer k. He can make at most k operations in the\r\narray. In each operation, he picks a single element and increases it by\r\n1.He found the bitwise AND that array a can have after at most k\r\noperations.Theofanis has put a lot of work into finding this value and\r\nwas very happy with his result. Unfortunately, Ada , being the evil\r\nperson that he is, decided to bully him by repeatedly changing the value\r\nof k.Help Theofanis by calculating the possible bitwise AND for q\r\ndifferent values of k. Note that queries are independent.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nlong long cnt[20][1 << 20], val[20][1 << 20];\n\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0);\n    int n, q;\n    cin >> n >> q;\n\n    vector <int> a(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n        int x = a[i] ^ ((1 << 20) - 1);\n        int cur = (1 << 20) - 1;\n        for (int j = 19; ~j; --j) if (x >> j & 1) {\n            cur ^= (1 << j);\n            cnt[j][cur]++;\n            val[j][cur] += a[i] & ((1 << j) - 1);\n        }\n    }\n    for (int i = 0; i < 20; ++i) {\n        for (int j = 0; j < 20; ++j) {\n            for (int msk = 0; msk < 1 << 20; ++msk) if (~msk >> j & 1) {\n                cnt[i][msk] += cnt[i][msk ^ (1 << j)];\n                val[i][msk] += val[i][msk ^ (1 << j)];\n            }\n        }\n    }\n    // 10001010010\n    // 00001100101\n    vector <long long> cost(1 << 20);\n    for (int msk = 0; msk < 1 << 20; ++msk) {\n        int cur = msk;\n        for (int i = 19; ~i; --i) if (msk >> i & 1) {\n            cost[msk] += 1ll * cnt[i][msk ^ (1 << i)] * cur - val[i][msk ^ (1 << i)];\n            cur ^= (1 << i);\n        }\n    }\n    vector <pair <long long, int>> vec;\n    for (int msk = 0; msk < 1 << 20; ++msk) {\n        while (!vec.empty() && vec.back().first >= cost[msk]) {\n            vec.pop_back();\n        }\n        vec.emplace_back(cost[msk], msk);\n    }\n\n    long long sum = accumulate(a.begin(), a.end(), 0ll);\n    while (q--) {\n        long long k; cin >> k;\n        long long ans1 = (k + sum) / n;\n        if (ans1 >= (1ll << 20)) {\n            cout << ans1 << '\\n';\n            continue;\n        }\n        auto it = lower_bound(vec.begin(), vec.end(), make_pair(k + 1, -1));\n        assert(it != vec.begin());\n        cout << prev(it)->second << '\\n';\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "divide and conquer",
        "dp",
        "greedy"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D2. Maximum And Queries  hard version .json",
    "editorial_link": "https://codeforces.com//blog/entry/122820",
    "editorial": "Let . If then the answer is .Similarly to D1 letâs construct the answer\r\nbit by bit. Let be the current answer and be the bit we want to add.\r\nLetâs look at the amount of operations we need to do on the -th element\r\nto change our answer from to . if is not a submask of , then after\r\nconstructing answer it has s on all bits not greater than . In this case\r\nwe need to increase the -th element by . if is a submask of , then we do\r\nnot need to increase the -th element. otherwise we need to increase the\r\n-th element by . We can handle all three cases efficiently if we\r\nprecompute the following two arrays: how many elements from the array is\r\na submask of. sum of over all for which is a submask.Both arrays can be\r\ncalculated efficiently using SOS dp.This allows us to answer the queries\r\nin ( ) with ( ) preprocessing\r\n",
    "hint": [
        "Hint Try optimizing the greedy approach from ( ) to ( )."
    ]
}