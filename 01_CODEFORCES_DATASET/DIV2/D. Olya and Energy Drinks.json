{
    "link": "https://codeforces.com//contest/877/problem/D",
    "problemId": "130131",
    "problem_idx": "D",
    "shortId": "877D",
    "contest_number": "877",
    "problem_submissions": {
        "F": [
            31654167,
            31653139,
            31655134,
            31656955,
            31639931,
            31650204,
            31648622,
            31651887,
            33479364,
            31655646,
            31694169,
            31893110
        ],
        "E": [
            31643937,
            31646320,
            31646382,
            31649500,
            31641532,
            31645322,
            31640350,
            31645337,
            31641515,
            31644016,
            31652300,
            31648164,
            31648540,
            31649482,
            31644271,
            31648366,
            31646891,
            31648638,
            31653283,
            31654866
        ],
        "D": [
            31641155,
            31644336,
            31643884,
            31647657,
            31665021,
            31739883,
            31649498,
            31650176,
            31649638,
            31639062,
            31644913,
            31645497,
            31649880,
            31645363,
            31666561,
            31654457,
            31648925,
            31649435
        ],
        "C": [
            31638971,
            31647846,
            31638928,
            31641413,
            31644732,
            31639320,
            31637367,
            31649045,
            31644989,
            31640032,
            31639911,
            31643252,
            31638722,
            31638437,
            31636874,
            31639305,
            31642602,
            31642153,
            31643991,
            31641659
        ],
        "B": [
            31638394,
            31636212,
            31636559,
            31636226,
            31644604,
            31636106,
            31634815,
            31636547,
            31636242,
            31637676,
            31679870,
            31636958,
            31645807,
            31636913,
            31635284,
            31638201,
            31637074,
            31636966,
            31638021,
            31639655,
            31639274
        ],
        "A": [
            31635408,
            31634914,
            31634587,
            31634665,
            31664979,
            31634608,
            31634317,
            31634960,
            31650654,
            31634394,
            31634371,
            31644024,
            31634639,
            31634521,
            31634889,
            31634575,
            31635175,
            31640619,
            31635186,
            31635511
        ]
    },
    "name": "D. Olya and Energy Drinks",
    "statement": "Olya loves energy drinks. She loves them so much that her room is full\r\nof empty cans from energy drinks.Formally, her room can be represented\r\nas a field of cells, each cell of which is empty or littered with\r\ncans.Olya drank a lot of energy drink, so now she can run meters per\r\nsecond. Each second she chooses one of the four directions (up, down,\r\nleft or right) and runs from to meters in this direction. Of course, she\r\ncan only run through empty cells.Now Olya needs to get from cell to cell\r\n. How many seconds will it take her if she moves optimally?It\u2019s\r\nguaranteed that cells and are empty. These cells can coincide.\r\n",
    "solutions": [
        "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<set>\n#include<map>\n#include<queue>\nusing namespace std;\ntypedef long long  LL;\n#define sqr(x) ((x)*(x))\n#define mp make_pair\n#define F first\n#define S second\ninline int read(){\n\tint x = 0; char ch = getchar(); bool positive = 1;\n\tfor (; !isdigit(ch); ch = getchar())\tif (ch == '-')\tpositive = 0;\n\tfor (; isdigit(ch); ch = getchar())\tx = x * 10 + ch - '0';\n\treturn positive ? x : -x;\n}\ninline void write(int a){\n    if(a>=10)write(a/10);\n    putchar('0'+a%10);\n}\ninline void writeln(int a){\n    if(a<0){\n    \ta=-a; putchar('-');\n\t}\n\twrite(a); puts(\"\");\n}\n#include<string>\nconst int N=1005;\nint n,m,k,sx,sy,tx,ty,l,r,bs[N*N*4],s1[4]={0,0,1,-1},s2[4]={1,-1,0,0};\nbool vis[N][N][4];\npair<int,int> zz,zs,que[N*N*4];\nchar ch[N][N];\nint main(){\n\tcin>>n>>m>>k;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++)scanf(\"\\n%c\",&ch[i][j]);\n\t}\n\tcin>>sx>>sy>>tx>>ty;\n\tque[r=1]=mp(sx,sy); for(int i=0;i<4;i++)vis[sx][sy][i]=1;\n\twhile(l<r){\n\t\tzs=que[++l];\n\t\tif(zs==mp(tx,ty)){\n\t\t\twriteln(bs[l]); return 0;\n\t\t}\n\t\tfor(int i=0;i<4;i++){\n\t\t\tzz=zs;\n\t\t\tfor(int j=0;j<k;j++){\n\t\t\t\tzz.F+=s1[i]; zz.S+=s2[i];\n\t\t\t\tif(zz.F&&zz.S&&zz.F<=n&&zz.S<=m&&!vis[zz.F][zz.S][i]&&ch[zz.F][zz.S]=='.'){\n\t\t\t\t\tvis[zz.F][zz.S][i]=1;\n\t\t\t\t\tque[++r]=zz;\n\t\t\t\t\tbs[r]=bs[l]+1;\n\t\t\t\t}else break;\n\t\t\t}\n\t\t}\n\t}\n\tputs(\"-1\");\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dfs and similar",
        "graphs",
        "shortest paths"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Olya and Energy Drinks.json",
    "editorial_link": "https://codeforces.com//blog/entry/55362",
    "editorial": "Note, that can find right answer, but works in . It\u00e2\u0080\u0099s too slow.We\u00e2\u0080\u0099ll\r\nstore all not visited cells in . For each row and column we\u00e2\u0080\u0099ll make own\r\n. Now it\u00e2\u0080\u0099s easy to find all not visited cell which is reachable from\r\nvertex in , where is number of this cells. Then summary it works in .\r\n"
}