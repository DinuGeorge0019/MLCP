{"link": "https://codeforces.com//contest/754/problem/E", "problemId": "88004", "problem_idx": "E", "shortId": "754E", "contest_number": "754", "problem_submissions": {"C": [23598952, 23602731, 23600404, 23598770, 23595631, 23604849, 23604549, 23600905, 23597681, 23600418, 23605322, 23605304, 23598917, 23597491, 23604104, 23598918, 23606632], "D": [23593184, 23593323, 23595150, 23595085, 23598162, 23593559, 23596735, 23599764, 23604175, 23599201, 23597364, 23604779, 23603085, 23598699, 23605480, 23605421, 23600608, 23604207, 23599681], "B": [23588442, 23588177, 23589652, 23588551, 23588951, 23588531, 23591530, 23589211, 23589887, 23588557, 23594523, 23590126, 23593242, 23593078, 23590225, 23588316, 23588990, 23589935, 23595966], "A": [23587499, 23595001, 23587629, 23607118, 23587407, 23587483, 23589634, 23587559, 23587954, 23587405, 23587857, 23587707, 23599756, 23587979, 23587428, 23587560, 23588096, 23590086], "E": [23607022, 23650416, 23650411, 23650402, 23621680, 24024004, 23676163]}, "name": "E. Dasha and cyclic table", "statement": "Dasha is fond of challenging puzzles: Rubik\u2019s Cube , , and so on. This\r\ntime she has a cyclic table of size , and each cell of the table\r\ncontains a lowercase English letter. Each cell has coordinates (, ). The\r\ntable is cyclic means that to the right of cell there is the cell , and\r\nto the down there is the cell .Dasha has a pattern as well. A pattern is\r\na non-cyclic table of size . Each cell is either a lowercase English\r\nletter or a question mark. Each cell has coordinates (, ).The goal of\r\nthe puzzle is to find all the appearance positions of the pattern in the\r\ncyclic table.We say that the cell of cyclic table is an appearance\r\nposition, if for every pair such that and one of the following\r\nconditions holds: There is a question mark in the cell of the pattern,\r\nor The cell of the cyclic table equals to the cell of the pattern. Dasha\r\nsolved this puzzle in no time, as well as all the others she ever tried.\r\nCan you solve it?.\r\n", "solutions": ["//\u770b\u770b\u4f1a\u4e0d\u4f1a\u7206int!\n#include <bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define mkp make_pair\n#define fi first\n#define se second\n#define FOR(i, l, r) for(int i = l; i <= r; i++)\n#define ROF(i, r, l) for(int i = r; i >= l; i--)\n#define all(a) a.begin(), a.end()\ninline int ckmax(int &a, int b) { return a < b ? a = b, 1 : 0; }\ninline int ckmin(int &a, int b) { return a > b ? a = b, 1 : 0; }\n#define clean(a) memset(a, 0, sizeof(a))\ntypedef long long ll;\n\nconst double pi = acos(-1.0);\n//\u5bf9\u65f6\u95f4\u8981\u6c42\u4e0d\u9ad8\u53ef\u4ee5\u76f4\u63a5typedef complex<double> Comp;\nstruct Comp{\n  double x, y;\n  Comp(): x(0), y(0) {}\n  Comp(double _x, double _y): x(_x), y(_y) {}\n  Comp operator + (const Comp &rhs) const {\n    return Comp(x + rhs.x, y + rhs.y);\n  }\n  Comp operator - (const Comp &rhs) const {\n    return Comp(x - rhs.x, y - rhs.y);\n  }\n  Comp operator * (const Comp &rhs) const {\n    return Comp(x * rhs.x - y * rhs.y, x * rhs.y + y * rhs.x);\n  }\n  Comp &operator += (const Comp &rhs) {\n    x += rhs.x; y += rhs.y;\n    return *this;\n  }\n  Comp &operator -= (const Comp &rhs) {\n    x -= rhs.x; y -= rhs.y;\n    return *this;\n  }\n  Comp conj() const {\n    return Comp(x, -y);\n  }\n};\nconst int MAXN = 1 << 21;\nComp X[MAXN], Y[MAXN], Z[MAXN];\nint bitrev[MAXN];\n\nvoid FFT(Comp A[], int n, int o){\n\tfor(int i = 0; i < n; i++) if(bitrev[i] < i) swap(A[bitrev[i]], A[i]);\n\tfor(int s = 0; 1 << s <= n; s++){\n\t\tint m = 1 << s;\n\t\tdouble ang = 2 * pi / m * o;\n\t\tComp od = Comp(cos(ang), sin(ang));\n\t\tfor(int k = 0; k < n; k += m){\n\t\t\tComp w = Comp(1.0, 0);\n\t\t\tfor(int j = 0; j < m / 2; j++){\n\t\t\t\tComp t = w * A[k + j + m / 2];\n\t\t\t\tA[k + j + m / 2] = A[k + j] - t;\n\t\t\t\tA[k + j] = A[k + j] + t;\n\t\t\t\tw = w * od;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid conv(int x[], int n, int y[], int m, ll z[]){\n  int l = 0;\n  while ((1 << l) < n + m - 1) ++l;\n  int s = 1 << l;\n  for (int i = 0; i < s; ++i)\n    bitrev[i] = bitrev[i >> 1] >> 1 | ((i & 1) << (l - 1));\n  for (int i = 0; i < s; ++i){\n\t\tX[i] = Comp(i < n ? x[i] : 0, 0);\n\t\tY[i] = Comp(i < m ? y[i] : 0, 0);\n  }\n  FFT(X, s, 1); FFT(Y, s, 1);\n\tfor(int i = 0; i < s; ++i) Z[i] = X[i] * Y[i];\n  FFT(Z, s, -1);\n  for (int i = 0; i < s; ++i)\n\t\tz[i] = ll(Z[i].x / s + 0.5);\n}\n\nint n, m, r, c;\nint a[1000][1000], b[1000][1000];\nchar s[1000];\nint f1[1000 * 1000], f2[1000 * 1000], g1[1000 * 1000], g2[1000 * 1000];\nll res1[MAXN], res2[MAXN];\n\nint main(){\n#ifndef ONLINE_JUDGE\n\tfreopen(\"x.in\", \"r\", stdin);\n\tfreopen(\"x.out\", \"w\", stdout);\n#endif\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 0; i < n; ++i){\n\t\tscanf(\"%s\", s);\n\t\tfor(int j = 0; j < m; ++j)\n\t\t\ta[i][j] = s[j] == '?' ? 0 : s[j] - 'a' + 1;\n\t}\n\tscanf(\"%d%d\", &r, &c);\n\tfor(int i = 0; i < r; ++i){\n\t\tscanf(\"%s\", s);\n\t\tfor(int j = 0; j < c; ++j)\n\t\t\tb[r - i - 1][c - j - 1] = s[j] == '?' ? 0 : s[j] - 'a' + 1;\n\t}\n\tll sum = 0;\n\tfor(int i = 0; i < 800; ++i)\n\t\tfor(int j = 0; j < 800; ++j){\n\t\t\tf1[i * 800 + j] = a[i % n][j % m] * a[i % n][j % m];\n\t\t\tf2[i * 800 + j] = a[i % n][j % m] * 2;\n\t\t\tif(i < r && j < c){\n\t\t\t\tg1[i * 800 + j] = b[i][j];\n\t\t\t\tg2[i * 800 + j] = b[i][j] * b[i][j];\n\t\t\t\tsum += b[i][j] * b[i][j] * b[i][j];\n\t\t\t}\n\t\t}\n\tconv(f1, 800 * 800, g1, 800 * 800, res1);\n\tconv(f2, 800 * 800, g2, 800 * 800, res2);\n\tfor(int i = 0; i < n; printf(\"\\n\"), ++i)\n\t\tfor(int j = 0; j < m; ++j){\n\t\t\tll res = res1[(i + r - 1) * 800 + j + c - 1] - res2[(i + r - 1) * 800 + j + c - 1] + sum;\n\t\t\tprintf(\"%d\", res == 0 ? 1 : 0);\n\t\t}\n  return 0;\n}\n/*\n                   _ooOoo_\n                  o8888888o\n                  88\" . \"88\n                  (| -_- |)\n                  O\\  =  /O\n               ____/`---'\\____\n             .'  \\\\|     |//  `.\n            /  \\\\|||  :  |||//  \\\n           /  _||||| -:- |||||-  \\\n           |   | \\\\\\  -  /// |   |\n           | \\_|  ''\\---/''  |   |\n           \\  .-\\__  `-`  ___/-. /\n         ___`. .'  /--.--\\  `. . __\n      .\"\" '<  `.___\\_<|>_/___.'  >'\"\".\n     | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |\n     \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /\n======`-.____`-.___\\_____/___.-`____.-'======\n                   `=---='\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n         \u4f5b\u7956\u4fdd\u4f51       \u6c38\u65e0BUG\n*/\n"], "input": "", "output": "", "tags": ["bitmasks", "brute force", "fft", "strings", "trees"], "dificulty": "2600", "interactive": false}