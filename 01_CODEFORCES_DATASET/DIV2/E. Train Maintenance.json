{
    "link": "https://codeforces.com//contest/1581/problem/E",
    "problemId": "1125262",
    "problem_idx": "E",
    "shortId": "1581E",
    "contest_number": "1581",
    "problem_submissions": {
        "E": [
            130358132,
            130358184,
            130357795,
            130357396,
            130363906,
            130366616,
            130380883,
            130364377,
            130368000,
            130362620,
            130366569,
            130368794,
            130369661,
            130369712,
            130368935,
            130369593
        ],
        "C": [
            130344859,
            130342831,
            130347382,
            130345373,
            130344614,
            130353134,
            130351174,
            130350702,
            130351743,
            130352941,
            130352739,
            130356445,
            130357169,
            130351772,
            130355715,
            130362975,
            130356919,
            130369384,
            130361864
        ],
        "B": [
            130340369,
            130340723,
            130340571,
            130339802,
            130369559,
            130359629,
            130340447,
            130931058,
            130343832,
            130341175,
            130342532,
            130359618,
            130341192,
            130359579,
            130352120,
            130344927,
            130346716,
            130361490
        ],
        "A": [
            130338529,
            130338446,
            130338430,
            130342422,
            130338506,
            130341004,
            130338410,
            130340505,
            130339368,
            130338352,
            130339712,
            130339153,
            130338540,
            130338470,
            130338894,
            130339891,
            130340851,
            130340222,
            130339139
        ],
        "D": [
            130369924,
            130441595,
            130369549,
            130356147
        ],
        "F": [
            130356873,
            130360044,
            130368525,
            130369827,
            130370044
        ]
    },
    "name": "E. Train Maintenance",
    "statement": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed\r\nto help maintain trains.There are n models of trains, and Nitoriâ€™s\r\ndepartment will only have at most one train of each model at any moment.\r\nIn the beginning, there are no trains, at each of the following m days,\r\none train will be added, or one train will be removed. When a train of\r\nmodel i is added at day t, it works for x_i days (day t inclusive), then\r\nit is in maintenance for y_i days, then in work for x_i days again, and\r\nso on until it is removed.In order to make management easier, Nitori\r\nwants you to help her calculate how many trains are in maintenance in\r\neach day.\r\n",
    "solutions": [
        "#pragma GCC optimize(2)\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<map>\n#include<queue>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\n#define ll long long\n#define ls(_o) (_o<<1)\n#define rs(_o) ((_o<<1)|1)\n#define N 201000\n#define M 544\n#define p 1000000007\n#define p1 998244353\n#define p2 1000000007\nusing namespace std;\nnamespace ywy{\n\tinline int get(){\n\t\tint n=0;char c;while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}n=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\t\n\t\t}s:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\t\n\t\t}\n\t}\n\tint sig[N],tme[N],tag[M][M],x[N],y[N];\n\tvoid ywymain(){\n\t\tint n=get(),m=get();\n\t\tint blo=sqrt(m)+1;\n\t\tfor(int i=1;i<=n;i++) x[i]=get(),y[i]=get();\n\t\tint tot=0;\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tint op=get(),id=get(); if(op==1){\n\t\t\t\ttot++;\n\t\t\t\ttme[id]=i;\n\t\t\t\tif(x[id]+y[id]>blo){\n\t\t\t\t\tfor(int j=i;j<=m;j+=(x[id]+y[id])){\n\t\t\t\t\t\tsig[j]++; sig[min(m+1,j+x[id])]--;\t\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tfor(int j=i;j<i+x[id];j++) tag[x[id]+y[id]][j%(x[id]+y[id])]++;\t\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\ttot--;\n\t\t\t\tif(x[id]+y[id]>blo){\n\t\t\t\t\tfor(int j=tme[id];j<=m;j+=(x[id]+y[id])){\n\t\t\t\t\t\tif(j+x[id]-1<i) continue;\n\t\t\t\t\t\tsig[max(i,j)]--; sig[min(m+1,j+x[id])]++;\t\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tfor(int j=tme[id];j<tme[id]+x[id];j++) tag[x[id]+y[id]][j%(x[id]+y[id])]--;\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tsig[i]+=sig[i-1];\n\t\t\tint ans=sig[i];\n\t\t\tfor(int j=1;j<=blo;j++) ans+=tag[j][i%j];\n\t\t\tprintf(\"%d\\n\",tot-ans);\t\n\t\t}\n\t}\n}\nint main(){\n\tywy::ywymain();\t\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "implementation"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Train Maintenance.json",
    "editorial_link": "https://codeforces.com//blog/entry/95477",
    "editorial": "Let's distinguish the trains according to xi+yi\n.\n\nIf xi+yi>m???\n, the total times of maintenance and running don't exceed mm?=m???\n. So we can find every date that the train of model i\n begin or end maintenance in O(m???)\n, and we can maintain a differential sequence. We can add 1 to the beginning date and minus 1 to the end date, and the prefix sum of this sequence is the number of trains in maintenance.\n\nIf xi+yi?m???\n, suppose the train of model i\n is repaired at si\n day. For a date t\n that the train of model i\n is in maintenance if and only if (t?si) mod (xi+yi)?xi\n. Thus for each a?m???\n, we can use an array of length a\n to record the date of all trains that satisfy xi+yi=a\n are in maintenance modulo a\n. And for one period of maintenance, the total days aren't exceed m???\n. So we can maintain (t?si) mod (xi+yi)\n in O(m???)\n.\n\nThus the intended time complexity is O(mm???)\n and the intended memory complexity is O(n+m)\n. Finished reading the statement, you may have thought about this easy solution as followed. Maintain an array to count the trains in maintenance in each day. For add and remove operations, traverse the array and add the contribution to the array. The algorithm works in the time complexity of O(nm)\n. Besides, we can use the difference array to modify a segment in O(1)\n. However, we can optimize this solution. For the trains of x+y>m???\n, we can modify every period by brute force because the number of periods is less than m???\n. For the trains of x+y?m???\n, the number of the periods can be large. In this case, we set the blocks, each of them sizes O(m???)\n. We can merge the modifies which are completely included in the same block, with the same length of period and the same start position in the block. It's fine to use an array to record this. Number of segments are not completely included in the block is about O(m???)\n. The total complexity is O(mm???)\n.",
    "hint": []
}