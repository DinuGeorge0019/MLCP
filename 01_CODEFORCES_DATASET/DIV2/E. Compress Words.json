{
    "link": "https://codeforces.com//contest/1200/problem/E",
    "problemId": "387085",
    "problem_idx": "E",
    "shortId": "1200E",
    "contest_number": "1200",
    "problem_submissions": {
        "F": [
            58597034,
            58604274,
            58603801,
            58604261,
            58606296,
            58609347,
            58606628,
            58603882,
            58611421,
            58614224,
            58612143,
            58659085,
            58617947,
            58615235,
            58614922,
            58618563,
            58618410,
            58819839,
            58819733,
            58614658,
            58617967,
            58616220,
            58617480
        ],
        "E": [
            58590453,
            58591974,
            58589669,
            58582754,
            58593262,
            58593765,
            58594950,
            58609042,
            58590807,
            58600501,
            58598133,
            58655621,
            58603439,
            58602117,
            58595933,
            58604924,
            58702004,
            58608728,
            58607700,
            58606886,
            58608547,
            58595823
        ],
        "D": [
            58585183,
            58587196,
            58595741,
            58592331,
            58597422,
            58600351,
            58598831,
            58588698,
            58604146,
            58596632,
            58604059,
            58594391,
            58596161,
            58605981,
            58592911,
            58594958,
            58601895,
            58602011,
            58595454,
            58607933
        ],
        "C": [
            58581348,
            58578761,
            58581508,
            58598446,
            58584753,
            58585227,
            58584309,
            58590893,
            58582665,
            58580776,
            58585592,
            58580638,
            58583883,
            58586342,
            58585762,
            58586591,
            58578435,
            58584027,
            58584223,
            58583648
        ],
        "B": [
            58580222,
            58581800,
            58579349,
            58596443,
            58582220,
            58582093,
            58584008,
            58593306,
            58580382,
            58578318,
            58581197,
            58578343,
            58580875,
            58583711,
            58582188,
            58581441,
            58581810,
            58580259,
            58599702,
            58580893
        ],
        "A": [
            58576391,
            58576584,
            58577266,
            58594056,
            58576879,
            58576717,
            58577509,
            58578116,
            58576412,
            58576423,
            58577739,
            58576429,
            58576681,
            58580309,
            58578442,
            58576553,
            58583309,
            58576504,
            58576736,
            58576406
        ]
    },
    "name": "E. Compress Words",
    "statement": "Amugae has a sentence consisting of n words. He want to compress this\r\nsentence into one word. Amugae doesn\u2019t like repetitions, so when he\r\nmerges two words into one word, he removes the longest prefix of the\r\nsecond word that coincides with a suffix of the first word. For example,\r\nhe merges \"\" and \"\" into \"\".Amugae will merge his sentence left to right\r\n(i.e. first merge the first two words, then merge the result with the\r\nthird word and so on). Write a program that prints the compressed word\r\nafter the merging process ends.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int mxN=1e5;\nint n;\nstring ans;\n\nint kmp(string s) {\n\tvector<int> pf(s.size());\n\tfor(int j=1; j<s.size(); ++j) {\n\t\tint k=pf[j-1];\n\t\twhile(s[k]!=s[j]) {\n\t\t\tif(!k) {\n\t\t\t\tk=-1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tk=pf[k-1];\n\t\t}\n\t\tpf[j]=k+1;\n\t}\n\treturn pf.back();\n}\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\t\n\tcin >> n;\n\tfor(int i=0; i<n; ++i) {\n\t\tif(!i) {\n\t\t\tcin >> ans;\n\t\t\tcontinue;\n\t\t}\n\t\tstring s;\n\t\tcin >> s;\n\t\tstring t=s;\n\t\tt+='#';\n\t\tint a=min((int)ans.size(), (int)s.size());\n\t\tt.insert(t.end(), ans.end()-a, ans.end());\n\t\tint x=kmp(t);\n\t\twhile(x--)\n\t\t\tans.pop_back();\n\t\tans.insert(ans.end(), s.begin(), s.end());\n\t}\n\tcout << ans;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "hashing",
        "implementation",
        "string suffix structures",
        "strings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Compress Words.json",
    "editorial_link": "https://codeforces.com/blog/entry/69035",
    "editorial": "Denote the words from left to right as .If we define string as the\r\nresult of merging as described in the problem times, we can get by the\r\nfollowing process: If length of > length of Assume the length of is ,\r\nand the length of is . Construct the string ( * for string is the\r\nsubstring from index to ) Get the KMP failure function from string . We\r\ncan get maximum overlapped length of \u00e2\u0080\u0099s prefix and \u00e2\u0080\u0099s suffix from this\r\nfunction. Suppose the last element of the failure function smaller than\r\nthe length of is . Then the longest overlapped length of \u00e2\u0080\u0099s suffix and\r\n\u00e2\u0080\u0099s prefix is . Let . Then, Otherwise Construct as . We can get from the\r\nsame process described in 1. In this process, we can get from in time\r\ncomplexity . So, we can get (the answer of this problem) in .\r\n"
}