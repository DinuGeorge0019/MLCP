{
    "link": "https://codeforces.com//contest/761/problem/B",
    "problemId": "90959",
    "problem_idx": "B",
    "shortId": "761B",
    "contest_number": "761",
    "problem_submissions": {
        "E": [
            24312697,
            24311709,
            24310168,
            24311976,
            24311188,
            24315381,
            24312128,
            24315134,
            24315757,
            24315051,
            24311586,
            24318302,
            24316465,
            24310698,
            24314080,
            24317203,
            24314720,
            24307483,
            24315644,
            24308867
        ],
        "D": [
            24308080,
            24302806,
            24306764,
            24303840,
            24312711,
            24310952,
            24308712,
            24308632,
            24304486,
            24318361,
            24305083,
            24314765,
            24313344,
            24306662,
            24308564,
            24311519,
            24304640,
            24301778,
            24312201,
            24302140
        ],
        "C": [
            24304705,
            24303281,
            24303086,
            24315151,
            24314006,
            24300409,
            24305328,
            24308132,
            24307670,
            24308073,
            24301179,
            24311655,
            24307103,
            24301133,
            24303312,
            24299854,
            24299226,
            24307641,
            24303935
        ],
        "A": [
            24296943,
            24297317,
            24293268,
            24295355,
            24314899,
            24301549,
            24295024,
            24293258,
            24293478,
            24294436,
            24294254,
            24298618,
            24301924,
            24304008,
            24305575,
            24293046,
            24297813
        ],
        "B": [
            24295947,
            24297573,
            24299480,
            24314233,
            24314669,
            24296673,
            24301229,
            24303624,
            24311945,
            24304611,
            24297096,
            24300811,
            24301955,
            24297423,
            24296616,
            24298776,
            24296843,
            24310580,
            24301114,
            24295172
        ],
        "F": [
            24322841,
            24309197,
            24319670
        ]
    },
    "name": "B. Dasha and friends",
    "statement": "Running with barriers on the circle track is very popular in the country\r\nwhere Dasha lives, so no wonder that on her way to classes she saw the\r\nfollowing situation:The track is the circle with length , in distinct\r\npoints of which there are barriers. Athlete always run the track in\r\ncounterclockwise direction if you look on him from above. All barriers\r\nare located at integer distance from each other along the track. Her\r\nfriends the parrot Kefa and the leopard Sasha participated in\r\ncompetitions and each of them ran one lap. Each of the friends started\r\nfrom some integral point on the track. Both friends wrote the distance\r\nfrom their start along the track to each of the barriers. Thus, each of\r\nthem wrote integers in the ascending order, each of them was between and\r\n, inclusively. There are several tracks in the country, all of them have\r\nsame length and same number of barriers, but the positions of the\r\nbarriers can differ among different tracks. Now Dasha is interested if\r\nit is possible that Kefa and Sasha ran the same track or they\r\nparticipated on different tracks. Write the program which will check\r\nthat Kefa\u2019s and Sasha\u2019s tracks coincide (it means that one can be\r\nobtained from the other by changing the start position). Note that they\r\nalways run the track in one direction counterclockwise, if you look on a\r\ntrack from above.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <time.h>\n#include <map>\n#include <set>\n#include <deque>\n#include <cstdio>\n#include <cstdlib>\n#include <unordered_map>\n#include <bitset>\n#include <algorithm>\n#include <string>\n#include <fstream>\n#include <assert.h>\n#include <list>\n#include <cstring>\nusing namespace std;\n\nnamespace fastinput\n{\n\t/** Interface */\n\n\tinline int readChar();\n\ttemplate <class T = int> inline T readInt();\n\ttemplate <class T> inline void writeInt(T x, char end = 0);\n\tinline void writeChar(int x);\n\tinline void writeWord(const char *s);\n\n\t/** Read */\n\n\tstatic const int buf_size = 16384;\n\n\tinline int getChar() {\n\t\tstatic char buf[buf_size];\n\t\tstatic int len = 0, pos = 0;\n\t\tif (pos == len)\n\t\t\tpos = 0, len = fread(buf, 1, buf_size, stdin);\n\t\tif (pos == len)\n\t\t\treturn -1;\n\t\treturn buf[pos++];\n\t}\n\n\tinline int readChar() {\n\t\tint c = getChar();\n\t\twhile (c <= 32)\n\t\t\tc = getChar();\n\t\treturn c;\n\t}\n\n\ttemplate <class T>\n\tinline T readInt() {\n\t\tint s = 1, c = readChar();\n\t\tT x = 0;\n\t\tif (c == '-')\n\t\t\ts = -1, c = getChar();\n\t\twhile ('0' <= c && c <= '9')\n\t\t\tx = x * 10 + c - '0', c = getChar();\n\t\treturn s == 1 ? x : -x;\n\t}\n\n\t/** Write */\n\n\tstatic int write_pos = 0;\n\tstatic char write_buf[buf_size];\n\n\tinline void writeChar(int x) {\n\t\tif (write_pos == buf_size)\n\t\t\tfwrite(write_buf, 1, buf_size, stdout), write_pos = 0;\n\t\twrite_buf[write_pos++] = x;\n\t}\n\n\ttemplate <class T>\n\tinline void writeInt(T x, char end) {\n\t\tif (x < 0)\n\t\t\twriteChar('-'), x = -x;\n\n\t\tchar s[24];\n\t\tint n = 0;\n\t\twhile (x || !n)\n\t\t\ts[n++] = (char)('0' + x % 10), x /= 10;\n\t\twhile (n--)\n\t\t\twriteChar(s[n]);\n\t\tif (end)\n\t\t\twriteChar(end);\n\t}\n\n\tinline void writeWord(const char *s) {\n\t\twhile (*s)\n\t\t\twriteChar(*s++);\n\t}\n\n\tstruct Flusher {\n\t\t~Flusher() {\n\t\t\tif (write_pos)\n\t\t\t\tfwrite(write_buf, 1, write_pos, stdout), write_pos = 0;\n\t\t}\n\t} flusher;\n}\n\nusing namespace fastinput;\n\nconst int N = 1e6;\n\nint main()\n{\n\tvector <int> a, b;\n\tint n, l;\n\tcin >> n >> l;\n\tint last;\n\tint st1;\n\tcin >> st1;\n\tlast = st1;\n\tfor (int i = 1; i < n; ++i)\n\t{\n\t\tint x;\n\t\tcin >> x;\n\t\ta.push_back(x - last);\n\t\tlast = x;\n\t}\n\ta.push_back(l - last + st1);\n\tcin >> st1;\n\tlast = st1;\n\tfor (int i = 1; i < n; ++i)\n\t{\n\t\tint x;\n\t\tcin >> x;\n\t\tb.push_back(x - last);\n\t\tlast = x;\n\t}\n\tb.push_back(l - last + st1);\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tbool bad = false;\n\t\tfor (int j = 0; j < n; ++j)\n\t\t\tif (a[j] != b[(i + j) % n])\n\t\t\t{\n\t\t\t\tbad = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\tif (!bad)\n\t\t{\n\t\t\tputs(\"YES\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tputs(\"NO\");\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Dasha and friends.json",
    "editorial_link": "https://codeforces.com//blog/entry/50179",
    "editorial": "Let\u00e2\u0080\u0099s add distances between pairs of adjacent barriers of both tracks in\r\narrays and check if it possible to get one of them from another using\r\ncycling shift of the elements.\r\n"
}