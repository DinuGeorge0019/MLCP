{
    "link": "https://codeforces.com//contest/1011/problem/B",
    "problemId": "201797",
    "problem_idx": "B",
    "shortId": "1011B",
    "contest_number": "1011",
    "problem_submissions": {
        "F": [
            40800201,
            40801277,
            40801569,
            40804449,
            40805451,
            40806381,
            40806507,
            40806310,
            40805970,
            40801054,
            40808416,
            40809060,
            40810276,
            40808095,
            40807771,
            40805521,
            40807827,
            40807284,
            40807855,
            40804155
        ],
        "D": [
            40796440,
            40794546,
            40792902,
            40795417,
            40799478,
            40795262,
            40794405,
            40796227,
            40796647,
            40805819,
            40795341,
            40796956,
            40801974,
            40796562,
            40798015,
            40809194,
            40797770,
            40797730,
            40793882,
            40809940
        ],
        "E": [
            40792792,
            40796201,
            40795409,
            40798197,
            40794994,
            40796957,
            40798403,
            40799143,
            40799952,
            40795325,
            40797016,
            40792367,
            40793560,
            40799595,
            40800280,
            40796773,
            40803072,
            40801776,
            40801515,
            40795493
        ],
        "C": [
            40790603,
            40791320,
            40791211,
            40789571,
            40790418,
            40791673,
            40790329,
            40790847,
            40793263,
            40794440,
            40790415,
            40800020,
            40790652,
            40792667,
            40793177,
            40791559,
            40792533,
            40792592,
            40791239,
            40793128
        ],
        "B": [
            40785822,
            40786932,
            40787686,
            40786118,
            40785902,
            40788647,
            40785329,
            40786729,
            40785415,
            40788241,
            40792014,
            40785807,
            40787536,
            40787785,
            40787832,
            40786142,
            40787154,
            40790376,
            40787972,
            40786283
        ],
        "A": [
            40783703,
            40785050,
            40784061,
            40783967,
            40783664,
            40784798,
            40783422,
            40784073,
            40783746,
            40785817,
            40785710,
            40783675,
            40784732,
            40784635,
            40786064,
            40783474,
            40783765,
            40785159,
            40784090,
            40783568
        ]
    },
    "name": "B. Planning The Expedition",
    "statement": "Natasha is planning an expedition to Mars for n people. One of the\r\nimportant tasks is to provide food for each participant.The warehouse\r\nhas m daily food packages. Each package has some food type a_i.Each\r\nparticipant must eat exactly one food package each day. Due to extreme\r\nloads, each participant must eat the same food type throughout the\r\nexpedition. Different participants may eat different (or the same) types\r\nof food.Formally, for each participant j Natasha should select his food\r\ntype b_j and each day j-th participant will eat one food package of type\r\nb_j. The values b_j for different participants may be different.What is\r\nthe maximum possible number of days the expedition can last, following\r\nthe requirements above?\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\nint cnt[105];\n\nint main() {\n  int n,m;\n  scanf(\"%d%d\",&m,&n);\n  for(int i=1;i<=n;i++) {\n  \tint x;\n  \tscanf(\"%d\",&x);\n  \tcnt[x]++;\n  }\n  int ans=0;\n  for(int i=n;i>0;i--) {\n  \tint s=0;\n  \tfor(int j=1;j<=100;j++) s+=cnt[j]/i;\n  \tif (s>=m) {\n  \t\tans=i;\n  \t\tbreak;\n\t  }\n  }\n  printf(\"%d\\n\",ans);\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Planning The Expedition.json",
    "editorial_link": "https://codeforces.com/blog/entry/60851",
    "editorial": "Let c_i be the number of food packages that equal to i. Calculate the\r\narray c.For any d we can calculate the maximum number of people k, who\r\ncan participate in the expedition for d days. To do this, weâll go over\r\nall the elements of the array c. Let now be considered c_i. If c_i\r\nge d, we can decrease c_i by d and increase k by 1, that is, take d\r\ndaily food packages for one person. If still c_i\r\nge d, repeat the algorithm, and so on. That is for i-th iteration number\r\nk increases by\r\nleft\r\nlfloor\r\ndfrac{c_i}d\r\nright\r\nrfloor. After all the iterations the number k will be the required\r\nnumber of people.It is clear that the answer does not exceed m (every\r\nday at least one food package is used).Letâs iterate d from m to 1, each\r\ntime checking whether the answer can be equal d. To do this, we\r\ncalculate the maximum number of people k, who can participate in the\r\nexpedition for d days. If k\r\nge n, then the answer is d. If no answer was received on any iteration,\r\nthen the answer is 0.Complexity: O(m^2).Bonus. Try to improve the\r\ncomplexity to O(m\r\nlog m).\r\n",
    "hint": []
}