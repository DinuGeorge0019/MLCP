{"link": "https://codeforces.com//contest/402/problem/B", "problemId": "7179", "problem_idx": "B", "shortId": "402B", "contest_number": "402", "problem_submissions": {"D": [6050292, 6050270, 6036208, 6037449, 6037811, 6039018, 6037509, 6040120, 6039818, 6037103, 6036738, 6052225, 6039860, 6039785, 6039774, 6040232], "E": [6038241, 6039548, 6034213, 6036604, 6037264, 6040176, 6052113, 6052116, 6052103, 6052109, 6058832, 6040173], "C": [6035300, 6033009, 6036584, 6037830, 6033803, 6032415, 6034126, 6031244, 6034759, 6038445, 6040085, 6032494, 6038144, 6039496, 6032240, 6032451, 6036956, 6037470, 6036329], "B": [6031930, 6031993, 6031901, 6040691, 6032027, 6037381, 6032782, 6035428, 6032969, 6032924, 6042413, 6034839, 6033326, 6031868, 6052288, 6052274, 6052263, 6035033, 6034789, 6032424, 6034406, 6032490], "A": [6030878, 6030962, 6031937, 6034701, 6030965, 6033265, 6031812, 6031632, 6036793, 6034363, 6031101, 6031359, 6030877, 6031259, 6031075, 6033654, 6031474, 6031051]}, "name": "B. Trees in a Row", "statement": "The Queen of England has trees growing in a row in her garden. At that,\r\nthe -th tree from the left has height meters. Today the Queen decided to\r\nupdate the scenery of her garden. She wants the trees\u2019 heights to meet\r\nthe condition: for all , , where is the number the Queen\r\nchose.Unfortunately, the royal gardener is not a machine and he cannot\r\nfulfill the desire of the Queen instantly! In one minute, the gardener\r\ncan either decrease the height of a tree to any positive integer height\r\nor increase the height of a tree to any positive integer height. How\r\nshould the royal gardener act to fulfill a whim of Her Majesty in the\r\nminimum number of minutes?\r\n", "solutions": ["//Codeforces 236\n#include <cmath>\n\n#include <algorithm>\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nconst int INF = 1 << 30;\nconst int MAX_N = 1005;\n\nint N, K;\nint h[MAX_N];\n\nint main() {\n  cin >> N >> K;\n  for (int i = 1; i <= N; i += 1) cin >> h[i];\n\n  int start = INF, best = INF;\n  for (int l = 1; l <= MAX_N; l += 1) {\n    int nh = l, cost = 0;\n    for (int i = 1; i <= N; i += 1) {\n      cost += (abs(h[i] - nh) != 0);\n      nh += K;\n    }\n    if (cost < best) {\n      best = cost;\n      start = l;\n    }\n  }\n\n  int nh = start;\n  cout << best << '\\n';\n  for (int i = 1; i <= N; i += 1) {\n    if (h[i] - nh > 0) {\n      cout << \"- \" << i << ' ' << h[i] - nh << '\\n';\n    } else if (nh - h[i] > 0) {\n      cout << \"+ \" << i << ' ' << nh - h[i] << '\\n';\n    }\n    nh += K;\n  }\n\n  return 0;\n}\n\n"], "input": "", "output": "", "tags": ["brute force", "implementation"], "dificulty": "1400", "interactive": false}