{
    "link": "https://codeforces.com//contest/659/problem/A",
    "problemId": "53566",
    "problem_idx": "A",
    "shortId": "659A",
    "contest_number": "659",
    "problem_submissions": {
        "G": [
            17048942,
            17051082,
            17053499,
            17056302,
            17057443,
            17052627,
            17057183,
            17057162,
            17076131,
            17045172,
            17053158,
            17056518
        ],
        "F": [
            17047834,
            17053774,
            17049969,
            17050820,
            17052174,
            17056026,
            17050842,
            17053250,
            17050852,
            17050686,
            17050499,
            17050611,
            17052481,
            17064456,
            17051398,
            17051617,
            17051540,
            17050465
        ],
        "E": [
            17042676,
            17043109,
            17045262,
            17042718,
            17047927,
            17046574,
            17040925,
            17048651,
            17040880,
            17052066,
            17041600,
            17046501,
            17046168,
            17045890,
            17045191,
            17046107,
            17048339,
            17043013,
            17046378
        ],
        "D": [
            17040164,
            17050025,
            17044036,
            17045724,
            17041432,
            17042750,
            17045206,
            17042744,
            17045258,
            17053191,
            17040131,
            17041993,
            17045154,
            20417581,
            17042968,
            17047543,
            17044200,
            17041493,
            17046806,
            17044650
        ],
        "B": [
            17039409,
            17039152,
            17039943,
            17044093,
            17038870,
            17038621,
            17044105,
            17040190,
            17043575,
            17055274,
            17038055,
            17038759,
            17039771,
            17039240,
            17039293,
            17039271,
            17043285,
            17040658,
            17040098
        ],
        "C": [
            17039394,
            17040359,
            17041969,
            17039075,
            17037528,
            17039602,
            17038719,
            17041409,
            17038514,
            17053925,
            17038798,
            17040270,
            17038600,
            17041901,
            17040814,
            17041935,
            17039324,
            17039760,
            17041613
        ],
        "A": [
            17037687,
            17039404,
            17037482,
            17037338,
            17052801,
            17037726,
            17040138,
            17037138,
            17055546,
            17037115,
            17039098,
            17037248,
            17037187,
            17037309,
            17038070,
            17037352,
            17037563
        ]
    },
    "name": "A. Round House",
    "statement": "Vasya lives in a round building, whose entrances are numbered\r\nsequentially by integers from to . Entrance and entrance are\r\nadjacent.Today Vasya got bored and decided to take a walk in the yard.\r\nVasya lives in entrance and he decided that during his walk he will move\r\naround the house entrances in the direction of increasing numbers (in\r\nthis order entrance should be followed by entrance ). The negative value\r\nof corresponds to moving entrances in the order of decreasing numbers\r\n(in this order entrance is followed by entrance ). If , then Vasya\r\nprefers to walk beside his entrance. Help Vasya to determine the number\r\nof the entrance, near which he will be at the end of his walk.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <algorithm>\n#include <set>\n#include <map>\n#include <queue>\n#include <vector>\n\n#define REP(I,A,B) for(int I=A,_END_=B;I<=_END_;I++)\n#define REPD(I,A,B) for(int I=A,_END_=B;I>=_END_;I--)\n#define RI(X) X=Readint()\n#define RII(X,Y) RI(X),RI(Y)\n#define RIII(X,Y,Z) RI(X),RI(Y),RI(Z)\n#define RS(X) scanf(\"%s\",X)\n#define RD(X) scanf(\"%lf\",&X)\n#define GCH getchar()\n#define PCH(X) putchar(X)\n#define MS(X,Y) memset(X,Y,sizeof(X))\n#define MC(X,Y,var,len) memcpy(X,Y,sizeof(var)*(len))\n#define debug(...) fprintf(stderr,__VA_ARGS__)\n#define pb(X) push_back(X)\n#define mp(A,B) make_pair(A,B)\n#define fr first\n#define sc second\n#define lch(p) (p+p)\n#define rch(p) (p+p+1)\n#define lowbit(X) ((X)&(-(X)))\n\nusing namespace std;\n\ntypedef pair<int,int> poi;\n\ninline int Readint()\n{\n\tint ret=0;\n\tint f=1;\n\tchar ch;\n\tdo\n\t{\n\t\tch=GCH;\n\t\tif (ch=='-') f*=-1;\n\t}while(ch>=0 && (ch<'0' || ch>'9'));\n\n\twhile ('0'<=ch && ch<='9')\n\t{\n\t\tret=ret*10+ch-'0';\n\t\tch=GCH;\n\t}\n\treturn ret*f;\n}\n\nvoid open()\n{\n\tfreopen(\"*.in\",\"r\",stdin);\n\tfreopen(\"*.out\",\"w\",stdout);\n}\nvoid close()\n{\n\tfclose(stdin);\n\tfclose(stdout);\n}\n\nint main()\n{\n\tint _=0;\n\tint n,a,b;\n\tRIII(n,a,b);\n\tif (b>0)\n\t{\n\t\tREP(i,1,b)\n\t\t\tif (a==n) a=1;\n\t\t\telse a++;\n\t}\n\telse if (b<0)\n\t{\n\t\tb*=-1;\n\t\tREP(i,1,b)\n\t\t\tif (a==1) a=n;\n\t\t\telse a--;\n\t}\n\tprintf(\"%d\\n\",a);\n\tclose();\n\treturn 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Round House.json",
    "editorial_link": "https://codeforces.com//blog/entry/44093",
    "editorial": "The answer for the problem is calculated with a formula + ) + . Such\r\nsolution has complexity . There is also a solution with iterations,\r\nmodelling every of âs Vasyaâs moves by one entrance one by one in\r\ndesired direction, allowed to pass all the tests. This solutionâs\r\ncomplexity is .\r\n",
    "hint": []
}