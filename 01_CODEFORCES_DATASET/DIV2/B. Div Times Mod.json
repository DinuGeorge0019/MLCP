{
    "link": "https://codeforces.com//contest/1087/problem/B",
    "problemId": "273646",
    "problem_idx": "B",
    "shortId": "1087B",
    "contest_number": "1087",
    "problem_submissions": {
        "E": [
            58252522,
            47419404,
            47425055,
            47427281,
            47427199,
            47427772,
            47427175,
            47429424,
            47427691,
            47428203,
            47426678,
            47429553,
            47424066,
            47442342,
            47431388
        ],
        "F": [
            47420077,
            47423866,
            47885139,
            47468746,
            47429059,
            47443089
        ],
        "D": [
            47418729,
            47408054,
            47412096,
            47414267,
            47413772,
            47414393,
            47411787,
            47412026,
            47410837,
            47416228,
            47416942,
            47404060,
            47424226,
            47415168,
            47411121,
            47421101,
            47407066,
            47410268,
            47411462,
            47409719
        ],
        "C": [
            47405054,
            47411233,
            47407822,
            47412155,
            47406359,
            47410875,
            47413841,
            47406249,
            47409638,
            47412893,
            47414989,
            47429784,
            47418255,
            47431334,
            47431242,
            47407433,
            47430615,
            47412255,
            47405671,
            47407818,
            47406818
        ],
        "B": [
            47401231,
            47412385,
            47401723,
            47403755,
            47401975,
            47403962,
            47406414,
            47402530,
            47402488,
            47401578,
            47406978,
            47400393,
            47407454,
            47402895,
            47400789,
            47403406,
            47402600,
            47400687,
            47402493,
            47402234
        ],
        "A": [
            47400159,
            47405287,
            47400196,
            47400342,
            47400796,
            47401502,
            47401673,
            47400758,
            47400490,
            47400180,
            47403017,
            47409819,
            47408382,
            47400648,
            47400053,
            47400839,
            47400496,
            47400902,
            47400447,
            47400696
        ]
    },
    "name": "B. Div Times Mod",
    "statement": "Vasya likes to solve equations. Today he wants to solve (x \r\nmathrm{div} k)\r\ncdot (x\r\nbmod k) = n, where\r\nmathrm{div} and\r\nmathrm{mod} stand for integer division and modulo operations (refer to\r\nthe Notes below for exact definition). In this equation, k and n are\r\npositive integer parameters, and x is a positive integer unknown. If\r\nthere are several solutions, Vasya wants to find the smallest possible\r\nx. Can you help him?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define ff first\n#define ss second\n#define all(X) begin(X), end(X)\nvector<vector<int>>dp,s;\nvector<int>x,sum;\nsigned main(){\n\tint n,k;\n\tcin >> n >> k;\n\tint ans = INT_MAX;\n\tfor(int i = 1; i < k; i++){\n\t\tif(n%i)continue;\n\t\tint j = n/i;\n\t\tans = min(ans,j*k+i);\n\t}\n\tcout << ans << endl;\n} \n"
    ],
    "input": "",
    "output": "",
    "tags": [],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Div Times Mod.json",
    "editorial_link": "https://codeforces.com//blog/entry/64078",
    "editorial": "n has to be divisible by p = x\r\nbmod k, which in turn is less than k. We can try all options of p (in\r\nO(p) time), and for suitable options restore x = p\r\ncdot\r\nfrac{n - p}{k}. Choose the smallest possible x. Note that p = 1 always\r\ndivides n, hence at least one option will always be available.\r\n",
    "hint": []
}