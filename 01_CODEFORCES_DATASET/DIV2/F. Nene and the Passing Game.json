{
    "link": "https://codeforces.com//contest/1956/problem/F",
    "problemId": "2588547",
    "problem_idx": "F",
    "shortId": "1956F",
    "contest_number": "1956",
    "problem_submissions": {
        "E2": [
            256586454,
            256520068,
            256593913,
            256584316,
            256530034,
            256531943,
            256617463,
            256530865,
            256802937,
            256648508,
            256552517
        ],
        "F": [
            256530495,
            256522758,
            256514971,
            256533550,
            256538415
        ],
        "E1": [
            256505148,
            256506481,
            256593956,
            256525162,
            256511611,
            256531463,
            256583839,
            256517737,
            256520564,
            256527984,
            256521079,
            256525566,
            256521334,
            256530001,
            256521675,
            256525396,
            256535359,
            256525874,
            256529271
        ],
        "D": [
            256490682,
            256484072,
            256499658,
            256496427,
            256507516,
            256497830,
            256509043,
            256518890,
            256503281,
            256502580,
            256513745,
            256510694,
            256502427,
            256508396,
            256502061,
            256511658,
            256506094,
            256504568,
            256506260,
            256504200
        ],
        "C": [
            256481140,
            256475175,
            256487231,
            256481616,
            256488132,
            256485599,
            256493794,
            256476985,
            256483699,
            256486860,
            256497932,
            256487782,
            256477155,
            256486111,
            256486350,
            256491079,
            256480941,
            256486971,
            256480982,
            256485785
        ],
        "B": [
            256472484,
            256473000,
            256480823,
            256472874,
            256473325,
            256479701,
            256477112,
            256472735,
            256473445,
            256477448,
            256476511,
            256477221,
            256472449,
            256475342,
            256477910,
            256471353,
            256472967,
            256472966,
            256473168,
            256475591
        ],
        "A": [
            256471122,
            256471242,
            256472786,
            256473979,
            256471107,
            256479866,
            256471283,
            256471128,
            256471039,
            256472531,
            256472351,
            256472781,
            256471086,
            256471438,
            256477739,
            256470907,
            256471074,
            256471160,
            256471053,
            256472375
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/128426",
    "editorial": "According to the hint above, we can build the\nfollowing graph: There are vertices in the graph. Vertice links to\nvertices . That is, assuming vertices to are players, vertices to are\ntemporary spots, and player links to all the spots where his/her arm can\nreach.Then, the answer will be the number of connected components in\nthis graph which contains at least one vertice with an index less than\nor equal to .But thereâs still a little problem with the solution. For\ntwo players satisfying (that is, both players reaching out their \"right\narm\"s), they are incorrectly counted as connected.To solve that, we can\ndelete all the vertices such that or (that is, nobodyâs left/right arm\ncan reach ). Finding such can be done easily in .The last issue is, the\ngraph contains edges. but since we only care about connectivity,\noperation \"link to \" can be changed to \"link to , and link to for all in\n\". After that and removing multiple edges, the number of edges is\nreduced to .Finally, counting connected components in a graph can be\neasily done in , so the time complexity is .\n",
    "name": "F. Nene and the Passing Game",
    "statement": "Nene is training her team as a basketball coach. Nene’s team consists of\r\nn players, numbered from 1 to n. The i-th player has an [l_i,r_i]. Two\r\nplayers i and j (i\r\nneq j) can pass the ball to each other if and only if |i-j|\r\nin[l_i+l_j,r_i+r_j] (here, |x| denotes the absolute value of x).Nene\r\nwants to test the cooperation ability of these players. In order to do\r\nthis, she will hold several rounds of assessment. In each round, Nene\r\nwill select a sequence of players p_1,p_2,\r\nldots,p_m such that players p_i and p_{i+1} can pass the ball to each\r\nother for all 1\r\nle i < m. The length of the sequence m can be chosen by Nene. Each\r\nplayer can appear in the sequence p_1,p_2,\r\nldots,p_m multiple times or not appear in it at all. Then, Nene will\r\nthrow a ball to player p_1, player p_1 will pass the ball to player p_2\r\nand so on... Player p_m will throw a ball away from the basketball court\r\nso it can no longer be used. As a coach, Nene wants each of n players to\r\nappear in at least one round of assessment. Since Nene has to go on a\r\ndate after school, Nene wants you to calculate the minimum number of\r\nrounds of assessment needed to complete the task.\r\n",
    "solutions": [
        "// Problem: F. Nene and the Passing Game// Contest: Codeforces - Codeforces Round 939 (Div. 2)// URL: https://mirror.codeforces.com/contest/1956/problem/F// Memory Limit: 256 MB// Time Limit: 4000 ms// // Powered by CP Editor (https://cpeditor.org) // Author: EnucAI#include <bits/stdc++.h> #ifdef LOCAL#include \"debug.h\"#else#define D(...) ((void)0)#endif using ll = long long;using ull = unsigned long long;using ld = long double;using vi = std::vector<int>;using pii = std::pair<int, int>; constexpr int inf = std::numeric_limits<int>::max() / 2;constexpr ll infll = std::numeric_limits<ll>::max() / 2;constexpr ld eps = 1e-8l; #define all(x) (x).begin(), (x).end()#define sz(x) ((int)((x).size()))#define rep(i, j, k) for (int i = (j); i <= (k); i++)#define per(i, j, k) for (int i = (j); i >= (k); i--)#define fi first#define se second#define mp std::make_pair#define pb push_back#define ppb pop_back#define eb emplace_back template <class X, class Y> void chkmax(X &x, const Y &y) { if (x < y) x = y; }template <class X, class Y> void chkmin(X &x, const Y &y) { if (x > y) x = y; } constexpr int maxn = 2e6 + 5; int n, l[maxn], r[maxn], id[maxn]; struct op {  int p, ty, id;  bool operator<(op rhs)const {    if (p != rhs.p) return p < rhs.p;    return ty < rhs.ty;  }} o[maxn * 2]; std::set<pii> st; int dsu[maxn];int fa(int x) {  return x == dsu[x] ? x : dsu[x] = fa(dsu[x]);}void mrg(int x, int y) {  dsu[fa(y)] = fa(x);} void solve() {  std::cin >> n;  rep(i, 1, n) std::cin >> l[i] >> r[i];  rep(i, 1, n) {    o[i * 2 - 1] = {i - l[i], 1, i};    o[i * 2] = {i + l[i], 0, i};  }  std::sort(o + 1, o + n * 2 + 1);  std::iota(dsu + 1, dsu + n + 1, 1);  st.clear();  rep(i, 1, n * 2) {    D(o[i].ty, o[i].id);    if (o[i].ty == 1) {      auto it = st.lower_bound(mp(o[i].id - r[o[i].id], 0));      if (it == st.end()) continue;      auto ed = --st.end();      mrg(ed->se, o[i].id);      while (it != ed) {        mrg(ed->se, it->se);        it = st.erase(it);      }    } else {      st.emplace(o[i].id + r[o[i].id], o[i].id);    }  }  rep(i, 1, n) D(fa(i));  int ans = 0;  rep(i, 1, n) if (i == fa(i)) ans++;  std::cout << ans << '\\n';} int main() {  std::cin.tie(nullptr)->sync_with_stdio(false);  int t;  std::cin >> t;  while (t--) solve();}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "dsu",
        "graphs",
        "sortings"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Nene and the Passing Game.json",
    "hint": []
}