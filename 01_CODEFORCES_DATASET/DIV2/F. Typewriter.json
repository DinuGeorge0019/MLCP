{"link": "https://codeforces.com//contest/1834/problem/F", "problemId": "1970551", "problem_idx": "F", "shortId": "1834F", "contest_number": "1834", "problem_submissions": {"F": [210053333, 210055795, 210061394, 210063603, 210067240, 210074011, 210067928, 210074058, 210075127, 210077576, 210081254, 210080638, 210077908, 210081433, 210081470, 210075926, 210079720, 210073143, 210080327, 210079002], "E": [210043231, 210048962, 210050705, 210040023, 210052461, 210056199, 210057535, 210057973, 210068092, 210063785, 210047635, 210066422, 210066208, 210059930, 210084962, 210058056, 210078624, 210065540, 210102659, 210075510, 210066583, 210054659], "D": [210041205, 210041410, 210047091, 210046686, 210055618, 210044791, 210050088, 210048637, 210051528, 210053073, 210042552, 210055020, 210056083, 210067524, 210071426, 210050909, 210057660, 210061801, 210060481, 210064580], "C": [210036361, 210039180, 210042203, 210051207, 210041802, 210040948, 210044017, 210043949, 210040181, 210047738, 210064568, 210043833, 210041545, 210044468, 210046528, 210040515, 210054425, 210046290, 210037195, 210068118], "B": [210033459, 210035736, 210037921, 210055396, 210039182, 210035904, 210039397, 210039555, 210036625, 210043087, 210062502, 210039428, 210036497, 210051272, 210040630, 210036404, 210051486, 210058486, 210055398, 210069509], "A": [210032106, 210032895, 210032201, 210033870, 210032108, 210032116, 210033115, 210033564, 210032243, 210032564, 210032148, 210033019, 210032192, 210033118, 210032467, 210032459, 210045546, 210036091, 210032276, 210070208]}, "name": "F. Typewriter", "statement": "Recently, Polycarp was given an unusual typewriter as a gift!\r\nUnfortunately, the typewriter was defective and had a rather strange\r\ndesign.The typewriter consists of n cells numbered from left to right\r\nfrom 1 to n, and a carriage that moves over them. The typewriter cells\r\ncontain n integers from 1 to n, and each cell i initially contains the\r\ninteger p_i. Before all actions, the carriage is at cell number 1 and\r\nthere is nothing in its buffer storage. The cell on which the carriage\r\nis located is called the cell. The carriage can perform five types of\r\noperations: Take the integer from the current cell, if it is not empty,\r\nand put it in the carriage buffer, if it is empty (this buffer can\r\ncontain integer). Put the integer from the carriage buffer, if it is not\r\nempty, into the current cell, if it is empty. Swap the number in the\r\ncarriage buffer with the number in the current cell, if both the buffer\r\nand the cell contain integers. Move the carriage from the current cell i\r\nto cell i + 1 (if i < n), while the integer in the buffer is preserved.\r\nReset the carriage, i.e. move it to cell number 1, while the integer in\r\nthe buffer is preserved. Polycarp was very interested in this\r\ntypewriter, so he asks you to help him understand it and will ask you q\r\nqueries of three types: Perform a cyclic shift of the sequence p to the\r\nleft by k_j. Perform a cyclic shift of the sequence p to the right by\r\nk_j. Reverse the sequence p. Before and after each query, Polycarp wants\r\nto know what number of carriage resets is needed for the current\r\nsequence in order to distribute the numbers to their cells (so that the\r\nnumber i ends up in cell number i).Note that Polycarp only wants to know\r\nthe minimum number of carriage resets required to arrange the numbers in\r\ntheir places, but .Help Polycarp find the answers to his queries!\r\n", "solutions": ["#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nint a[1000005],n;\nint cal()\n{\n\tint ans=0;\n\tfor(int i=1;i<=n;i++) ans+=a[i]<i;\n\treturn ans;\n}\nint ans0[1000005],ans1[1000005];\nstruct BIT\n{\n\tint tree[2000005];\n\tvoid init()\n\t{\n\t\tmemset(tree,0,sizeof tree);\n\t}\n\tint lowbit(int x)\n\t{\n\t\treturn x&-x;\n\t}\n\tvoid add(int x,int y)\n\t{\n\t\tfor(x+=1000000;x<=2000000;x+=lowbit(x)) tree[x]+=y;\n\t}\n\tint ask(int x)\n\t{\n\t\tint rtn=0;\n\t\t--x;\n\t\tfor(x+=1000000;x;x^=lowbit(x)) rtn+=tree[x];\n\t\treturn rtn;\n\t}\n}T;\nvoid mermermer()\n{\n\tcin >> n;\n\tfor(int i=1;i<=n;i++) cin >> a[i];\n\tfor(int i=n+1;i<=n+n;i++) a[i]=a[i-n];\n\tfor(int i=1;i<=n;i++) T.add(a[i]-i,1);\n\tans0[0]=T.ask(0);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tT.add(a[i+n]-(i+n),1);\n\t\tT.add(a[i]-i,-1);\n\t\tans0[i]=T.ask(-i);\n\t}\n\tT.init();\n\treverse(a+1,a+n+1);\n\tfor(int i=n+1;i<=n+n;i++) a[i]=a[i-n];\n\tfor(int i=1;i<=n;i++) T.add(a[i]-i,1);\n\tans1[0]=T.ask(0);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tT.add(a[i+n]-(i+n),1);\n\t\tT.add(a[i]-i,-1);\n\t\tans1[i]=T.ask(-i);\n\t}\n\tint nw=0,f=0;\n\tcout << ans0[0] << \"\\n\";\n\tint q;\n\tcin >> q;\n\twhile(q--)\n\t{\n\t\tint op,x;\n\t\tcin >> op;\n\t\tif(op==3)\n\t\t{\n\t\t\tf^=1,nw=(n-nw)%n;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcin >> x;\n\t\t\tif(op==1)\n\t\t\t{\n\t\t\t\tnw+=x;\n\t\t\t}\n\t\t\telse nw+=n-x;\n\t\t}\n\t\tnw=(nw%n+n)%n;\n\t\tif(!f) cout << ans0[nw] << \"\\n\";\n\t\telse cout << ans1[nw] << \"\\n\";\n\t}\n/*\tcout << cal() << \"\\n\";\n\tint q;\n\tcin >> q;\n\twhile(q--)\n\t{\n\t\tint op,x;\n\t\tcin >> op;\n\t\tif(op==3) reverse(a+1,a+n+1);\n\t\telse\n\t\t{\n\t\t\tcin >> x;\n\t\t\tif(op==1) x=n-x;\n\t\t\tint b[1005]={};\n\t\t\tfor(int i=1;i<=n;i++)\n\t\t\t{\n\t\t\t\tif(i+x<=n) b[i+x]=a[i];\n\t\t\t\telse b[i+x-n]=a[i];\n\t\t\t}\n\t\t\tfor(int i=1;i<=n;i++) a[i]=b[i];\n\t\t}\n\t//\tfor(int i=1;i<=n;i++) cout << a[i] << \" \";\n\t//\tcout << \"\\n\";\n\t//\tcout << cal() << \"\\n\";\n\t}*/\n\t\n}\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint T=1;\n//\tcin >> T;\n\twhile(T--) mermermer();\n\treturn 0;\n}\n//bu pa kun nan!!!"], "input": "", "output": "", "tags": ["brute force", "math"], "dificulty": "2500", "interactive": false}