{
    "link": "https://codeforces.com//contest/424/problem/B",
    "problemId": "8841",
    "problem_idx": "B",
    "shortId": "424B",
    "contest_number": "424",
    "problem_submissions": {
        "D": [
            6467465,
            6468586,
            6468437,
            6471959,
            6471829,
            6468691,
            6468869,
            6467987,
            6469186,
            6469164,
            6468850,
            6468690,
            6469089,
            6472200,
            6472173,
            6469491,
            6468201,
            6469445,
            6468946,
            6470668,
            6470648
        ],
        "B": [
            6465143,
            6465456,
            6465043,
            6464913,
            6464966,
            6468705,
            6465228,
            6464961,
            6466059,
            6465849,
            6465782,
            6467158,
            6465289,
            6469422,
            6465084,
            6465026,
            6464523,
            6464586,
            6464947,
            6465071
        ],
        "C": [
            6464612,
            6464680,
            6466885,
            6466816,
            6466600,
            6466756,
            6466254,
            6466363,
            6467123,
            6466142,
            6467334,
            6467704,
            7360874,
            6469401,
            6471708,
            6464542,
            6465234,
            6465523,
            6465757,
            6465709
        ],
        "A": [
            6463928,
            6465862,
            6463956,
            6464239,
            6464063,
            6464156,
            6464137,
            6464377,
            6467414,
            6468789,
            6467791,
            6466667,
            6464430,
            6469471,
            6464203,
            6463882,
            6463888,
            6463886,
            6464224,
            6464098
        ]
    },
    "name": "B. Megacity",
    "statement": "The administration of the Tomsk Region firmly believes that it\u2019s time to\r\nbecome a megacity (that is, get population of one million). Instead of\r\nimproving the demographic situation, they decided to achieve its goal by\r\nexpanding the boundaries of the city.The city of Tomsk can be\r\nrepresented as point on the plane with coordinates (; ). The city is\r\nsurrounded with other locations, the -th one has coordinates (, ) with\r\nthe population of people. You can widen the city boundaries to a circle\r\nof radius . In such case all locations inside the circle and on its\r\nborder are included into the city.Your goal is to write a program that\r\nwill determine the minimum radius , to which is necessary to expand the\r\nboundaries of Tomsk, so that it becomes a megacity.\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <set>\n#include <map>\nusing namespace std;\n\n#define forint(i, a, b) for(int i=(int)(a); i<=(int)(b); ++i)\n#define forintdown(i, a, b) for(int i=(int)(a); i>=(int)(b); --i)\n#define forn(i, n) forint(i, 0, (n)-1)\n#define forndown(i, n) forintdown(i, (n)-1, 0)\n#define fillchar(a, x) memset(a, x, sizeof(a))\ntypedef long long LL;\ntypedef pair<int,int> PII;\ntypedef vector<int> VI;\ntypedef vector<LL> VL;\ntypedef vector<PII> VPI;\n#define MP make_pair\n#define PB push_back\n#define fi first\n#define se second\n\nint main() {\n\tVPI a; int n, s;\n\tscanf(\"%d%d\", &n,&s); s=1000000-s;\n\tforn(i, n) {\n\t\tint x, y, t; scanf(\"%d%d%d\",&x,&y,&t);\n\t\ta.PB(MP(x*x+y*y, t));\n\t}\n\tsort(a.begin(), a.end());\n\tsize_t cur=0; int ct=0; int ans=0;\n\twhile(ct<s && cur<a.size()) {\n\t\tct+=a[cur].se;\n\t\tans=a[cur].fi;\n\t\t++cur;\n\t}\n\tif(ct<s) printf(\"-1\\n\"); else printf(\"%.9lf\\n\", sqrt(double(ans)));\n\n\t\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Megacity.json",
    "editorial_link": "https://codeforces.com//blog/entry/11944",
    "editorial": "We can sort all the cities by their distance to the Tomsk city . After\r\nthat we are to find the smallest index for which the total population .\r\nIn such case the answer is . We can sort all cities in and find the\r\nvalue of in . Limits for allow sorting or any other solution.\r\n"
}