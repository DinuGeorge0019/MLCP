{
    "link": "https://codeforces.com//contest/1686/problem/E",
    "problemId": "1410462",
    "problem_idx": "E",
    "shortId": "1686E",
    "contest_number": "1686",
    "problem_submissions": {
        "E": [
            158466498,
            158623961,
            158493366,
            158653522
        ],
        "D": [
            158444604,
            158453399,
            158441005,
            158438618,
            158439368,
            158439942,
            158445018,
            158445760,
            158448365,
            158448646,
            158449006,
            158469820,
            158446506,
            158447775,
            158452792,
            158451110,
            158442777,
            158454124,
            158449945
        ],
        "C": [
            158421583,
            158419071,
            158419875,
            158426051,
            158425982,
            158428799,
            158424090,
            158428548,
            158428460,
            158427814,
            158485768,
            158427612,
            158427723,
            158430277,
            158423379,
            158427100,
            158433344,
            158424816,
            158432867
        ],
        "B": [
            158414448,
            158465960,
            158415549,
            158416857,
            158416742,
            158416745,
            158416637,
            158415727,
            158418974,
            158421168,
            158416305,
            158416075,
            158419159,
            158417410,
            158421561,
            158416494,
            158417640,
            158416669
        ],
        "A": [
            158414054,
            158464909,
            158414306,
            158414224,
            158414816,
            158414086,
            158414216,
            158419141,
            158416490,
            158414220,
            158414605,
            158414130,
            158415003,
            158415457,
            158417192,
            158414417,
            158414385,
            158414321
        ],
        "F": [
            158464234
        ]
    },
    "name": "E. Bring Balance",
    "statement": "Alina has a bracket sequence s of length 2n, consisting of n opening\r\nbrackets and n closing brackets . As she likes balance, she wants to\r\nturn this bracket sequence into a balanced bracket sequence.In one\r\noperation, she can reverse any substring of s.What\u2019s the smallest number\r\nof operations that she needs to turn s into a balanced bracket sequence?\r\nIt can be shown that it\u2019s always possible in at most n operations.As a\r\nreminder, a sequence of brackets is called balanced if one can turn it\r\ninto a valid math expression by adding characters and . For example,\r\nsequences , , and are balanced, while , , and are not.\r\n",
    "solutions": [
        "/********************************************************************************************************************\n*                                                                                                                   *\n*   lmqzzz : ILS 21 - 24                                                                                            *\n*                                                                                                                   *\n*                                                                                                                   *\n*       lllllll                                                                                                     *\n*       l:::::l                                                                                                     *\n*       l:::::l                                                                                                     *\n*       l:::::l                                                                                                     *\n*        l::::l    mmmmmmm    mmmmmmm      qqqqqqqqq   qqqqqzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz    *\n*        l::::l  mm:::::::m  m:::::::mm   q:::::::::qqq::::qz:::::::::::::::zz:::::::::::::::zz:::::::::::::::z     *\n*        l::::l m::::::::::mm::::::::::m q:::::::::::::::::qz::::::::::::::z z::::::::::::::z z::::::::::::::z      *\n*        l::::l m::::::::::::::::::::::mq::::::qqqqq::::::qqzzzzzzzz::::::z  zzzzzzzz::::::z  zzzzzzzz::::::z       *\n*        l::::l m:::::mmm::::::mmm:::::mq:::::q     q:::::q       z::::::z         z::::::z         z::::::z        *\n*        l::::l m::::m   m::::m   m::::mq:::::q     q:::::q      z::::::z         z::::::z         z::::::z         *\n*        l::::l m::::m   m::::m   m::::mq:::::q     q:::::q     z::::::z         z::::::z         z::::::z          *\n*        l::::l m::::m   m::::m   m::::mq::::::q    q:::::q    z::::::z         z::::::z         z::::::z           *\n*       l::::::lm::::m   m::::m   m::::mq:::::::qqqqq:::::q   z::::::zzzzzzzz  z::::::zzzzzzzz  z::::::zzzzzzzz     *\n*       l::::::lm::::m   m::::m   m::::m q::::::::::::::::q  z::::::::::::::z z::::::::::::::z z::::::::::::::z     *\n*       l::::::lm::::m   m::::m   m::::m  qq::::::::::::::q z:::::::::::::::zz:::::::::::::::zz:::::::::::::::z     *\n*       llllllllmmmmmm   mmmmmm   mmmmmm    qqqqqqqq::::::qzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz     *\n*                                                   q:::::q                                                         *\n*                                                   q:::::q                                                         *\n*                                                  q:::::::q                                                        *\n*                                                  q:::::::q                                                        *\n*                                                  q:::::::q                                                        *\n*                                                  qqqqqqqqq                                                        *\n*                                                                                                                   *\n********************************************************************************************************************/\n\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define          int    long long\n\n#define           fi    first\n#define           se    second\n#define           pb    push_back\n#define           ep    emplace\n#define           eb    emplace_back\n#define           lb    lower_bound\n#define           ub    upper_bound\n#define       all(x)    x.begin(), x.end()\n#define      rall(x)    x.rbegin(), x.rend()\n#define   uniquev(v)    v.resize(unique(all(v)) - v.begin())\n#define     mem(f,x)    memset(f , x , sizeof(f))\n#define        sz(x)    (int32_t)(x).size()\n#define   rep(i,a,b)    for(int i = a ; i <= b ; i++)\n#define  repp(i,a,b)    for(int i = a ; i < b ; i++)\n#define   per(i,a,b)    for(int i = a ; i >= b ; i--)\n#define  perr(i,a,b)    for(int i = a ; i > b ; i--)\n#define          mxx    *max_element\n#define          mnn    *min_element\n#define    cntbit(x)    __builtin_popcountll(x)\n#define      MASK(x)    ( 1ll << (x) )\n#define          Yes    cout << \"Yes\"\n#define          YES    cout << \"YES\"\n#define           No    cout << \"No\"\n#define           NO    cout << \"NO\"\n#define           AA    cout << \"Alice\"\n#define           BB    cout << \"Bob\"\n\ntemplate <typename T> inline void read (T &x) { bool b = 0; char c; while (!isdigit (c = getchar()) && c != '-'); if (c == '-') { c = getchar(); b = 1; } x = c - 48; while (isdigit(c = getchar())) {x = x * 10 + (c - 48); } if (b) { x=-x; } }\ntemplate <typename T> inline T min(const T &a, const T &b, const T &c) { return min(a, min(b, c)); }\ntemplate <typename T> inline T max(const T &a, const T &b, const T &c) { return max(a, max(b, c)); }\ntemplate <typename T, typename U> inline void mini(T &a, const U &b) { if(a > b) a = b; }\ntemplate <typename T, typename U> inline void maxi(T &a, const U &b) { if(a < b) a = b; }\n\ntypedef           long double    ld;\ntypedef             long long    ll;\ntypedef       const long long    cll;\ntypedef             const int    cint;\ntypedef        pair<int, int>    ii;\ntypedef  tuple<int, int, int>    iii;\ntypedef         pair<ii, int>    piii;\ntypedef         pair<int, ii>    ipii;\ntypedef         pair<ll, int>    li;\ntypedef          pair<ll, ll>    pll;\ntypedef           vector<int>    vi;\ntypedef            vector<ll>    vll;\ntypedef            vector<vi>    vvi;\ntypedef           vector<vll>    vvl;\ntypedef            vector<ii>    vii;\ntypedef           vector<iii>    viii;\ntypedef           vector<vii>    vvii;\ntypedef           vector<vii>    vvii;\ntypedef         array<int, 3>    ar3;\ntypedef         array<int, 4>    ar4;\ntypedef         array<int, 5>    ar5;\n\nconstexpr   long double PI  =  acos( -1 );\nconstexpr  long double eps  =  1e-9;\nconstexpr     int32_t base  =  277;\nconstexpr     int16_t dr[]  =  {1, 0, -1, 0};\nconstexpr     int16_t dc[]  =  {0, -1, 0, 1};\nconstexpr      int64_t MOD  =  1e9 + 7;\nconstexpr     int32_t MAXN  =  1e6 + 10;\n\nint a[MAXN];\nint b[MAXN];\n\nvoid solve()\n{\n    int n;\n    cin >> n;\n    n *= 2;\n    string s;\n    cin >> s;\n    s = '_' + s;\n    vi top;\n    int mx1 = 0, mx2 = 0, cur = 0;\n    int id1 = 0, id2 = n + 1, id = 0;\n    rep(i, 1, n)\n    {\n        if(s[i] == '(')\n            cur++;\n        else cur--;\n        if(mx1 < cur)\n        {\n            mx1 = cur;\n            id1 = i;\n        }\n        if(cur < 0)\n            break;\n        if(i == n)\n        {\n            cout << 0;\n            return;\n        }\n    }\n    cur = 0;\n    per(i, n, 1)\n    {\n        if(s[i] == ')')\n            cur++;\n        else cur--;\n        if(mx2 < cur)\n        {\n            mx2 = cur;\n            id2 = i;\n        }\n        if(cur < 0)\n            break;\n    }\n    int mx = 0;\n    cur = 0;\n    rep(i, 1, n)\n    {\n        if(s[i] == '(')\n            cur++;\n        else cur--;\n//        cout << cur << ' ' ;\n        if(mx < cur)\n        {\n            mx = cur;\n            id = i;\n        }\n    }\n    if(mx1 + mx2 >= mx)\n    {\n        cout << 1 << '\\n';\n        cout << id1 + 1 << ' ' << id2 - 1;\n//        reverse(s.begin() + id1 + 1, s.begin() + id2);\n//        cout << '\\n' << s;\n        return;\n    }\n    else cout << 2 << '\\n';\n//    cout << mx << ' ' ;\n    cout << id1 + 1<< ' ' << id << '\\n' << id + 1 << ' ' << id2 - 1;\n//    reverse(s.begin() + id1 + 1, s.begin() + id + 1);\n//    reverse(s.begin() + id + 1, s.begin() + id2);\n//    cout << '\\n' << s;\n\n}\nvoid init()\n{\n\n}\n\n/// TASK\n/// -----------------------------\n#define TASK \"C\"\n///------------------------------\n\nvoid gentest()\n{\n    if (fopen(TASK \".inp\", \"r\"))\n        freopen(TASK \".inp\",\"w\",stdout);\n    srand(time(0));\n    int n = 1000;\n    cout << n << '\\n';\n    rep(i, 1, n)\n    {\n        string s = \"\";\n        int x = rand() % 50 + 1;\n        rep(j, 1, x) s +='(', s+=')';\n        cout << x << '\\n';\n        random_shuffle(all(s));\n        cout << s << '\\n';\n    }\n    ///\n}\nint32_t main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    if (fopen(TASK \".inp\", \"r\")) {\n        freopen(TASK \".inp\", \"r\", stdin);\n        freopen(TASK \".out\", \"w\", stdout);\n    }\n//    gentest();\n//    return 0;\n//    init();\n    int32_t TT = 1;\n    cin >> TT;\n    for(int32_t TTT = 1 ; TTT <= TT ; TTT++)\n    {\n//        cout << TTT << ' ' ;\n        solve();\n        cout << '\\n';\n    }\n\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Bring Balance.json",
    "editorial_link": "https://codeforces.com//blog/entry/103198",
    "editorial": "Let's denote ( by 1\n and ) by ?1\n. Then we need to achieve a sequence in which all prefix sums are nonnegative.\n\nLet our sequence be a1,a2,\u0085,a2n\n, and denote prefi=a1+a2+\u0085+ai\n for each 0?i?2n\n.\n\nKey observation: It's always possible to get a balanced sequence in at most 2\n operations.\n\nProof: Let 0?i?2n\n be the index for which the value of prefi\n is the largest (if there are several such i\n, choose any). Let's reverse segments a[1:i]\n and a[i+1:2n]\n, getting sequence ai,ai?1,\u0085,a1,a2n,a2n?1,\u0085,ai+1\n.\n\nIt's easy to show that this sequence is balanced. ai+ai?1+\u0085+aj=prefi?prefj?1?0\n for any j?i\n, and aj+aj?1+\u0085+ai+1=prefj?prefi?0\n for any j?i\n, so ai+ai?1+\u0085+ai+a2n+\u0085+aj+1=?(aj+aj?1+\u0085+ai+1)?0\n for any j?i\n. So, all prefix sums are nonnegative, as desired.\n\nIt remains to check if we can make our sequence balanced in less than 2\n operations.\n\nChecking if 0\n operations are enough is trivial: just check if the initial sequence is balanced. Now, let's check if we can make the sequence (which initially isn't balanced) balanced in exactly one operation.\n\nLet l\n be the smallest index for which prefl<0\n, and r\n be the largest such index. Suppose that we will reverse the segment a[L:R]\n. Clearly, L?l\n, as otherwise, we would have a negative prefix sum. Similarly R>r\n. After reversing, we need to worry only about the i\n-th prefix sum for each i\n from L\n to R?1\n, all others will be nonnegative.\n\nThe i\n-th prefix sum for such i\n will be equal to prefL?1+(prefR?prefR+L?1?i)\n. So, segment [L,R]\n will be good iff prefL?1+prefR?prefi\n for all L?1?i?R\n.\n\nIt's easy to show that if any such segment [L,R]\n works, then also the segment [L1,R1]\n works, where L1\n is the index from [0,l]\n for which prefL1\n is the largest, and R1\n is the index from [r+1,2n]\n for which prefR1\n is the largest. Indeed, suppose that there is some L1?i?R1\n such that prefL1+prefR1<prefi\n. If i?l\n, then prefi<prefL1\n, contradiction. If i>r\n, then prefi<prefR1\n, contradiction. If l<i?r\n, then i\n is inside any such segment [L,R]\n, and prefi>prefL+prefR\n for any choice of L,R\n.\n\nSo, it's enough to choose segment [L1,R1]\n and to check if the sequence becomes balanced after reversing it."
}