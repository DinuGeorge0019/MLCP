{
    "link": "https://codeforces.com//contest/289/problem/A",
    "problemId": "2796",
    "problem_idx": "A",
    "shortId": "289A",
    "contest_number": "289",
    "problem_submissions": {
        "E": [
            3459146,
            3463369,
            3460609,
            3460604,
            3462555,
            3461006,
            3461728,
            3461588,
            3461307,
            3460025,
            3462334,
            3462779,
            3463498,
            3460536,
            3463551,
            3464172,
            3462631,
            3462960
        ],
        "C": [
            3456054,
            3456066,
            3455021,
            3459797,
            3456042,
            3453824,
            3456655,
            3457204,
            3455279,
            3456988,
            3457381,
            3458050,
            3457221,
            3457801,
            3454599,
            3456362,
            3455735,
            3456889
        ],
        "D": [
            3455963,
            3460496,
            3459068,
            3458621,
            3459481,
            3457268,
            3459857,
            3459925,
            3458097,
            3462947,
            3458331,
            3459472,
            3461935,
            3462472,
            3461241,
            3459422,
            3461116,
            3460679
        ],
        "B": [
            3455203,
            3455368,
            3453821,
            3457116,
            3455086,
            3458732,
            3455817,
            3455593,
            3459615,
            3455651,
            3454891,
            3455252,
            3455908,
            3456410,
            3456449,
            3455178,
            3457543,
            3454105
        ],
        "A": [
            3453433,
            3454495,
            3453333,
            3454660,
            3453910,
            3459883,
            3453757,
            3454123,
            3463162,
            3453754,
            3453562,
            3453866,
            3458954,
            3453377,
            3453432,
            3456188,
            3456399
        ]
    },
    "name": "A. Polo the Penguin and Segments ",
    "statement": "Little penguin Polo adores integer segments, that is, pairs of integers\r\n. He has a set that consists of integer segments: . We know that no two\r\nsegments of this set intersect. In one move Polo can either widen any\r\nsegment of the set 1 unit to the left or 1 unit to the right, that is\r\ntransform to either segment , or to segment .The of a set of segments\r\nthat consists of segments is the number of integers , such that there is\r\ninteger , for which the following inequality holds, .Find the minimum\r\nnumber of moves needed to make the value of the set of Polo\u2019s segments\r\ndivisible by .\r\n",
    "solutions": [
        "#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,m,i,x,y,z;\nint main()\n{\n\tcin>>n>>m;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tcin>>x>>y;\n\t\tz+=y-x+1;\n\t}\n\tcout<<(m-z%m)%m<<endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Polo the Penguin and Segments .json",
    "editorial_link": "https://codeforces.com//blog/entry/7241",
    "editorial": "Solution. First of all, we need to count, how many integers are inside given segments at the beginning. Since they don't intersect and even touch, no integer point can belong to more than one segment at the same time. This mans that starting value of segments is .\n\nIf k divides p, then answer is 0 \u0097 we don't need to do anything, it's already done. But if it's not true, we need to know the minimal number of turns to make k divisor of p. Since we can in single turn increase p by 1 (by decreasing the left point of the leftmost segment), this number is equal to .\n\nNote. Note that just output  is not enough: you need to pay attention for case when , or just output ."
}