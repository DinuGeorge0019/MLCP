{
    "link": "https://codeforces.com//contest/996/problem/E",
    "problemId": "193043",
    "problem_idx": "E",
    "shortId": "996E",
    "contest_number": "996",
    "problem_submissions": {
        "C": [
            39627866,
            39619892,
            39663122,
            39635644,
            39635514,
            39621729,
            39625213,
            39617610,
            39627654,
            39639597,
            39620065,
            39624419,
            39628361,
            39621383
        ],
        "E": [
            39622528,
            39625892,
            39626142,
            39626461,
            39630340,
            39627947,
            39621279,
            39648976,
            39621379,
            39617847,
            39617247,
            39629372,
            39626830,
            39626277,
            39620519,
            39625082,
            39630792,
            39630657,
            39627444
        ],
        "F": [
            39618149,
            39627463,
            39624083,
            39623440,
            39625991,
            39622590,
            39645060,
            39644923,
            39643152,
            39624393,
            39628645,
            39620875,
            39622547
        ],
        "D": [
            39614039,
            39615645,
            39614752,
            39612465,
            39614292,
            39615532,
            39615370,
            39619789,
            39614020,
            39613398,
            39619029,
            39613995,
            39617466,
            39615083,
            39617177,
            39614282,
            39614211,
            39623029,
            39613607
        ],
        "B": [
            39612182,
            39610834,
            39613274,
            39611405,
            39611472,
            39612956,
            39611898,
            39611921,
            39611837,
            39637946,
            39611976,
            39611899,
            39613467,
            39613241,
            39615456,
            39611398,
            39611815,
            39611277,
            39611220
        ],
        "A": [
            39608251,
            39608322,
            39612243,
            39608277,
            39608558,
            39609369,
            39608857,
            39608654,
            39608250,
            39608366,
            39610360,
            39608845,
            39611018,
            39608238,
            39608982,
            39608778,
            39608497,
            39608486,
            39608249
        ]
    },
    "name": "E. Leaving the Bar",
    "statement": "For a vector\r\nvec{v} = (x, y), define |v| =\r\nsqrt{x^2 + y^2}.Allen had a bit too much to drink at the bar, which is\r\nat the origin. There are n vectors\r\nvec{v_1},\r\nvec{v_2},\r\ncdots,\r\nvec{v_n}. Allen will make n moves. As Allen’s sense of direction is\r\nimpaired, during the i-th move he will either move in the direction\r\nvec{v_i} or -\r\nvec{v_i}. In other words, if his position is currently p = (x, y), he\r\nwill either move to p +\r\nvec{v_i} or p -\r\nvec{v_i}.Allen doesn’t want to wander too far from home (which happens\r\nto also be the bar). You need to help him figure out a sequence of moves\r\n(a sequence of signs for the vectors) such that his final position p\r\nsatisfies |p|\r\nle 1.5\r\ncdot 10^6 so that he can stay safe.\r\n",
    "solutions": [
        "#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <cstdio>\n#include <string>\n#include <stdlib.h>\n#include <set>\n#include <vector>\n#include <list>\n#include <algorithm>\n#include <regex>\n#include <math.h>\n#include <map>\n#include <iterator>\n#include <limits>\n#include <numeric>\n#include <bitset>\n#include <unordered_map>\n#include <unordered_set>\n#include <iomanip>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <array>\n#include <valarray>\n#include <complex>\n#include <random>\n\nusing namespace std;\n\ntypedef int integer;\ntypedef array<int, 2> hv;\n#define double long double\n#define int long long\n#define make(type, x) type x; cin>>x\n#define make2(type, x, y) type x, y; cin>>x>>y\n#define make3(type, x, y, z) type x, y, z; cin>>x>>y>>z\n#define make4(type, x, y, z, q) type x, y, z, q; cin>>x>>y>>z>>q\n#define ALL(x) (x).begin(), (x).end()\n#define FORIT(p) for(auto it = p.begin(); it != p.end(); it++)\n#define FOR(b) for(int i = 0; i <(b); ++i)\n#define VI vector<int>\n#define VVI vector<vector<int>>\n#define PII pair<int, int>\n#define PPII pair<PII, int>\n#define M7 1000000007\n#define M9 1000000009\n\n\n\n\nvoid Solve() {\n\tmake(int, n);\n\tvector<PPII> a(n);\n\tVI ans(n);\n\tFOR(n) {\n\t\tcin >> a[i].first.first >> a[i].first.second;\n\t\ta[i].second = i;\n\t\tif (a[i].first.first < 0) {\n\t\t\ta[i].first.first = -a[i].first.first;\n\t\t\ta[i].first.second = -a[i].first.second;\n\t\t\tans[i] ^= 1;\n\t\t}\n\t}\n\tsort(ALL(a), [](PPII a, PPII b) {return a.first.second*b.first.first < a.first.first * b.first.second; });\n\tint x = a[0].first.first, y = a[0].first.second;\n\tfor (int i = 1; i < n; ++i) {\n\t\tint x1 = x - a[i].first.first, y1 = y - a[i].first.second;\n\t\tint x2 = x + a[i].first.first, y2 = y + a[i].first.second;\n\t\tif (x1*x1 + y1 * y1 < x2*x2 + y2 * y2) {\n\t\t\tans[a[i].second] ^= 1;\n\t\t\tx = x1, y = y1;\n\t\t}\n\t\telse {\n\t\t\tx = x2, y = y2;\n\t\t}\n\t}\n\tFOR(n) {\n\t\tcout << (ans[i] ? -1 : 1) << ' ';\n\t}\n}\n\n\n\n\nsigned main() {\n\tios_base::sync_with_stdio(0);\n\tcin.tie();\n#if  _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n\tSolve();\n\twhile (!cin.eof()) {\n\t\tstring s = \"_\";\n\t\tdo getline(cin, s);\n\t\twhile (!cin.eof() && !s.empty());\n\t\tif (cin.eof()) return 0;\n\t\tFOR(3) cout << endl;\n\t\tSolve();\n\t}\n#else\n\tSolve();\n#endif\n\treturn 0;\n\t}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "geometry",
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Leaving the Bar.json",
    "editorial_link": "https://codeforces.com//blog/entry/60217",
    "editorial": "We first prove a claim which will help us significantly. The claim is that among any three vectors v1?,v2?,v3?\n of lengths at most r\n, then some sum vi?+vj?\n or difference vi??vj?\n has at length at most r\n.\n\nDraw a circle with radius r\n centered at the origin. If we plot the vectors v1?,v2?,v3?,?v1?,?v2?,?v3?\n from the origin, two of these will lie in the same 60?\n sector. Any two points in this sector will have distance at most r\n.\n\nTherefore, as long as there are at least 3\n vectors, two of them can be combined and the input constraints will still be satisfied. In the final step, we can combine two vectors of length at most r\n into one of length at most 2?r\n.\n\nImplementation can be done in a number of ways: for example, constructing a binary tree with the input vectors as leaves, or maintaining sets of signed vectors and merging small sets to large sets. These approaches can take O(n)\n or O(nlogn)\n.",
    "hint": []
}