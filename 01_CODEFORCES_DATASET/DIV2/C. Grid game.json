{
    "link": "https://codeforces.com//contest/1104/problem/C",
    "problemId": "286142",
    "problem_idx": "C",
    "shortId": "1104C",
    "contest_number": "1104",
    "problem_submissions": {
        "E": [
            48758453,
            48757745,
            48860407,
            48894452
        ],
        "D": [
            48749288,
            48751393,
            48739522,
            48739394,
            48740563,
            48754038,
            48739408,
            48740821,
            48748481,
            48742803,
            48738301,
            48739495,
            48742984,
            48743793,
            48784753,
            48777626,
            48748805,
            48747430,
            48746053,
            48743794,
            48744017
        ],
        "B": [
            48730862,
            48734922,
            48725853,
            48727408,
            48724591,
            48727896,
            48729302,
            48727214,
            48728799,
            48726973,
            48729023,
            48725831,
            48730076,
            48728780,
            48725458,
            48730157,
            48728034,
            48724532,
            48732794
        ],
        "C": [
            48740971,
            48728632,
            48731211,
            48727173,
            48731021,
            48734041,
            48734825,
            48733419,
            48733357,
            48732320,
            48729298,
            48733894,
            48732918,
            48730070,
            48735185,
            48732353,
            48732560,
            48733524
        ],
        "A": [
            48730201,
            48723824,
            48724179,
            48723533,
            48724165,
            48726185,
            48724880,
            48724445,
            48724599,
            48730100,
            48723532,
            48725656,
            48724536,
            48723661,
            48725183,
            48724389,
            48723526,
            48730308
        ]
    },
    "name": "C. Grid game",
    "statement": "You are given a 4x4 grid. You play a game there is a sequence of tiles,\r\neach of them is either 2x1 or 1x2. Your task is to consequently place\r\nall tiles from the given sequence in the grid. When tile is placed, each\r\ncell which is located in fully occupied row or column is deleted (cells\r\nare deleted at the same time independently). You can place tile in the\r\ngrid at any position, the only condition is that tiles (and tile parts)\r\nshould not overlap. Your goal is to proceed all given figures and avoid\r\ncrossing at any time.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\nusing namespace std;\n#define N 1111\nchar t[N];\nint main() {\n    scanf(\"%s\", t+1);\n    int len = strlen(t+1);\n    int state = 0;//0x1表示有竖，0x2表示有横着\n    for (int i = 1; i <= len; ++i) {\n        int ty = t[i] == '0';\n        //竖的左上角，横着的右下角\n        if (t[i] == '0') {\n            if (state & 0x1) {\n                printf(\"3 1\\n\");\n            }\n            else\n                printf(\"1 1\\n\");\n            state ^= 0x1;\n        }\n        else {\n            if (state & 0x2) {\n                printf(\"4 1\\n\");\n            }\n            else\n                printf(\"4 3\\n\");\n            state ^= 0x2;\n        }\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Grid game.json",
    "editorial_link": "https://codeforces.com//blog/entry/64722",
    "editorial": "One possible solution is to place vertical tiles into lower-left corner\r\nand place horizontal tiles into upper-right corner.If some tile comes,\r\nbut there is already a tile of the same type, than we will place the new\r\ntile into upper-left corner. So both tiles will be cleared and only\r\nthem.\r\n",
    "hint": []
}