{
    "link": "https://codeforces.com//contest/996/problem/F",
    "problemId": "193044",
    "problem_idx": "F",
    "shortId": "996F",
    "contest_number": "996",
    "problem_submissions": {
        "C": [
            39627866,
            39619892,
            39663122,
            39635644,
            39635514,
            39621729,
            39625213,
            39617610,
            39627654,
            39639597,
            39620065,
            39624419,
            39628361,
            39621383
        ],
        "E": [
            39622528,
            39625892,
            39626142,
            39626461,
            39630340,
            39627947,
            39621279,
            39648976,
            39621379,
            39617847,
            39617247,
            39629372,
            39626830,
            39626277,
            39620519,
            39625082,
            39630792,
            39630657,
            39627444
        ],
        "F": [
            39618149,
            39627463,
            39624083,
            39623440,
            39625991,
            39622590,
            39645060,
            39644923,
            39643152,
            39624393,
            39628645,
            39620875,
            39622547
        ],
        "D": [
            39614039,
            39615645,
            39614752,
            39612465,
            39614292,
            39615532,
            39615370,
            39619789,
            39614020,
            39613398,
            39619029,
            39613995,
            39617466,
            39615083,
            39617177,
            39614282,
            39614211,
            39623029,
            39613607
        ],
        "B": [
            39612182,
            39610834,
            39613274,
            39611405,
            39611472,
            39612956,
            39611898,
            39611921,
            39611837,
            39637946,
            39611976,
            39611899,
            39613467,
            39613241,
            39615456,
            39611398,
            39611815,
            39611277,
            39611220
        ],
        "A": [
            39608251,
            39608322,
            39612243,
            39608277,
            39608558,
            39609369,
            39608857,
            39608654,
            39608250,
            39608366,
            39610360,
            39608845,
            39611018,
            39608238,
            39608982,
            39608778,
            39608497,
            39608486,
            39608249
        ]
    },
    "name": "F. Game",
    "statement": "Allen and Bessie are playing a simple number game. They both know a\r\nfunction f:\r\n{0, 1\r\n}^n\r\nto\r\nmathbb{R}, i. e. the function takes n binary arguments and returns a\r\nreal value. At the start of the game, the variables x_1, x_2,\r\ndots, x_n are all set to -1. Each round, with equal probability, one of\r\nAllen or Bessie gets to make a move. A move consists of picking an i\r\nsuch that x_i = -1 and either setting x_i\r\nto 0 or x_i\r\nto 1.After n rounds all variables are set, and the game value resolves\r\nto f(x_1, x_2,\r\ndots, x_n). Allen wants to maximize the game value, and Bessie wants to\r\nminimize it.Your goal is to help Allen and Bessie find the expected game\r\nvalue! They will play r+1 times though, so between each game, exactly\r\none value of f changes. In other words, between rounds i and i+1 for 1\r\nle i\r\nle r, f(z_1,\r\ndots, z_n)\r\nto g_i for some (z_1,\r\ndots, z_n)\r\nin\r\n{0, 1\r\n}^n. You are to find the expected game value in the beginning and after\r\neach change.\r\n",
    "solutions": [
        "#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <cstdio>\n#include <string>\n#include <stdlib.h>\n#include <set>\n#include <vector>\n#include <list>\n#include <algorithm>\n#include <regex>\n#include <math.h>\n#include <map>\n#include <iterator>\n#include <limits>\n#include <numeric>\n#include <bitset>\n#include <unordered_map>\n#include <unordered_set>\n#include <iomanip>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <array>\n#include <valarray>\n#include <complex>\n#include <random>\n\nusing namespace std;\n\ntypedef int integer;\ntypedef array<int, 2> hv;\n#define double long double\n#define int long long\n#define make(type, x) type x; cin>>x\n#define make2(type, x, y) type x, y; cin>>x>>y\n#define make3(type, x, y, z) type x, y, z; cin>>x>>y>>z\n#define make4(type, x, y, z, q) type x, y, z, q; cin>>x>>y>>z>>q\n#define ALL(x) (x).begin(), (x).end()\n#define FORIT(p) for(auto it = p.begin(); it != p.end(); it++)\n#define FOR(b) for(int i = 0; i <(b); ++i)\n#define VI vector<int>\n#define VVI vector<vector<int>>\n#define PII pair<int, int>\n#define PPII pair<PII, int>\n#define M7 1000000007\n#define M9 1000000009\n\n\n\n\nvoid Solve() {\n\tint n, q;\n\tscanf(\"%I64d%I64d\", &n, &q);\n\tVI a(1<<n);\n\tFOR(1 << n) scanf(\"%I64d\", &a[i]);\n\tdouble sm = 0;\n\tFOR(a.size()) sm += a[i];\n\tprintf(\"%10.10lf\\n\", (sm / (1 << n)));\n\tFOR(q) {\n\t\tint j, val;\n\t\tscanf(\"%I64d%I64d\", &j, &val);\n\t\tsm += val - a[j];\n\t\ta[j] = val;\n\t\tprintf(\"%10.10lf\\n\", (sm / (1 << n)));\n\t}\n\n\n}\n\n\n\n\nsigned main() {\n\tios_base::sync_with_stdio(0);\n\tcin.tie();\n#if  _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n\tSolve();\n\twhile (!cin.eof()) {\n\t\tstring s = \"_\";\n\t\tdo getline(cin, s);\n\t\twhile (!cin.eof() && !s.empty());\n\t\tif (cin.eof()) return 0;\n\t\tFOR(3) cout << endl;\n\t\tSolve();\n\t}\n#else\n\tSolve();\n#endif\n\treturn 0;\n\t}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/60217",
    "editorial": "One can show by induction that the expected value of the game is E[f]=2?n?x?{0,1}nf(x)\n.\n\nConsider the first turn. For notation, let vi,0\n be the expected value of the game when xi\n is set to 0\n, and let vi,1\n be the expected value of the game when xi\n is set to 1\n. By induction, it is easy to see that vi,0+vi,12=E[f].\n\nConsider Allen's strategy. If it is Allen's turn, he will set xs=t\n, where 0?s<n,0?t?1\n are such that vs,t\n is maximal. As vi,0+vi,12=E[f]\n for all i\n, it is clear that vs,1?t\n is actually minimal among all the vi,j\n. This means that Bessie would have chosen to set xs=1?t\n if it were her turn. Therefore, the expected game value is vs,t+vs,1?t2=E[f].",
    "hint": []
}