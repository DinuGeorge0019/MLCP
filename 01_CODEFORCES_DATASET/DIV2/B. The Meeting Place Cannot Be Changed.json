{
    "link": "https://codeforces.com//contest/782/problem/B",
    "problemId": "96956",
    "problem_idx": "B",
    "shortId": "782B",
    "contest_number": "782",
    "problem_submissions": {
        "B": [
            25267905,
            25250113,
            25247221,
            25250057,
            25249960,
            25260592,
            25250810,
            25250250,
            25247987,
            25248996,
            25252120,
            25252630,
            25250336,
            25258914,
            25255792,
            25254407,
            25252511,
            25252408,
            25251554,
            25264621,
            25253624
        ],
        "E": [
            25257921,
            25262484,
            25258744,
            25260005,
            25259671,
            25259859,
            25263675,
            25263558,
            25261219,
            25263312,
            25264852,
            25262648,
            25263111,
            25263112,
            25265502,
            25264818,
            25264138,
            25263813,
            25263236,
            25499887,
            25266724,
            25260260,
            25256767
        ],
        "D": [
            25255317,
            25254040,
            25254587,
            25256934,
            25261275,
            25263628,
            25259016,
            25257085,
            25258676,
            25258895,
            25257929,
            25259738,
            25253164,
            25260236,
            25257532,
            25259424,
            25260675,
            25259499,
            25261948,
            25267588
        ],
        "C": [
            25252879,
            25249891,
            25251779,
            25251734,
            25260562,
            25253017,
            25252465,
            25250777,
            25252022,
            25254042,
            25255189,
            25253477,
            25255602,
            25254511,
            25256655,
            25255363,
            25254268,
            25254004,
            25250050,
            25250430
        ],
        "A": [
            25247630,
            25246175,
            25246521,
            25247338,
            25259975,
            25247530,
            25246345,
            25246130,
            25246627,
            25246669,
            25247634,
            25246833,
            25257300,
            25246231,
            25249989,
            25247211,
            25250337,
            25247505,
            25500110,
            25251276,
            25246111
        ],
        "F": [
            25264803,
            25787036,
            25277978
        ]
    },
    "name": "B. The Meeting Place Cannot Be Changed",
    "statement": "The main road in Bytecity is a straight line from south to north.\r\nConveniently, there are coordinates measured in meters from the\r\nsouthernmost building in north direction.At some points on the road\r\nthere are friends, and -th of them is standing at the point meters and\r\ncan move with any speed no greater than meters per second in any of the\r\ntwo directions along the road: south or north.You are to compute the\r\nminimum time needed to gather all the friends at some point on the road.\r\nNote that the point they meet at doesn\u2019t need to have integer\r\ncoordinate.\r\n",
    "solutions": [
        "#include<cstdio>\n\nint n, x[60004], v[60004];\nconst double eps = 1e-9;\ndouble l, r;\n\ndouble max (double x, double y) {\n\treturn x > y ? x : y;\n}\n\ndouble min (double x, double y) {\n\treturn x < y ? x : y;\n}\n\nbool check(double y) {\n\tdouble b = -2e9, t = 2e9;\n\tfor (int i = 0; i < n; i++) {\n\t\tb = max(b, x[i] - v[i] * y);\n\t\tt = min(t, x[i] + v[i] * y);\n\t}\n\treturn b <= t;\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) scanf(\"%d\", &x[i]);\n\tfor (int i = 0; i < n; i++) scanf(\"%d\", &v[i]);\n\tfor (l = 0, r = 1e9; r - l > eps; ) {\n\t\tdouble mid = (l + r) / 2;\n\t\tif (check(mid)) r = mid;\n\t\telse l = mid;\n\t}\n\tprintf(\"%.12lf\\n\", (l + r) / 2);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "ternary search"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. The Meeting Place Cannot Be Changed.json",
    "editorial_link": "https://codeforces.com//blog/entry/50854",
    "editorial": "We will apply binary search to solve this problem. Inside the binary\r\nsearch we have to check if it is possible to meet within seconds. In\r\nthis time, -th friend can get anywhere within the segment . For the\r\nmeeting to be possible, there must be a point common to all these\r\nsegments, that is, their intersection must be non-empty.An easy way to\r\nintersect a number of segments , ..., is to compute and . If , then is\r\nthe intersection, otherwise, the intersection is empty.Complexity: time\r\nand memory. Here is the required relative precision.\r\n"
}