{
    "link": "https://codeforces.com//contest/2020/problem/D",
    "problemId": "2912455",
    "problem_idx": "D",
    "shortId": "2020D",
    "contest_number": "2020",
    "problem_submissions": {
        "F": [
            283654781,
            283655384,
            283653019,
            284812010,
            284342422
        ],
        "E": [
            283601053,
            283622277,
            283581328,
            283585589,
            283577511,
            283592572,
            283593005,
            283598500,
            283604766,
            283607067,
            283586822,
            283606206,
            283606082,
            283604966,
            283606881,
            283605803,
            284236238,
            284236223,
            283607016,
            283606859,
            283610252,
            283604942
        ],
        "D": [
            283587438,
            283588481,
            283592593,
            283573905,
            283573809,
            283577852,
            283585317,
            283583897,
            283586760,
            283584637,
            283572139,
            283590684,
            283585043,
            283588345,
            283571960,
            283592544,
            283591323,
            283585990,
            283588589,
            283589632
        ],
        "C": [
            283581157,
            283572675,
            283596795,
            283564752,
            283564525,
            283566373,
            283563157,
            283567449,
            283568512,
            283569775,
            283602587,
            283572456,
            283574521,
            283572581,
            283587896,
            283569964,
            283580076,
            283578040,
            283575463,
            283575417
        ],
        "B": [
            283571512,
            283580920,
            283593819,
            283558272,
            283566033,
            283559192,
            283560269,
            283566846,
            283561344,
            283561669,
            283575968,
            283566810,
            283563128,
            283562164,
            283561716,
            283562347,
            283565083,
            283563622,
            283567830,
            283566097
        ],
        "A": [
            283557781,
            283582998,
            283556780,
            283558386,
            283561649,
            283556987,
            283567215,
            283556859,
            283557220,
            283558113,
            283559136,
            283557475,
            283556847,
            283558472,
            283559470,
            283556985,
            283557885,
            283556894,
            283558118
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/134516",
    "editorial": "The main idea is to take advantage of the low\nupper bound of and apply the Disjoint Set Union.We will consider , which\ndenotes the number of ranges that contain the node in connection by the\ntriplets/ranges with as and is not , and , which denotes the node that\nrepresents an overall connected component of which node is part of for\nnow.The size of both and is .We will maintain two other arrays, and ,\nwhich store the number of triplets with as and , respectively, and with\nas , to help us maintain the beginning and end of ranges.We will now\napply Disjoint Set Union. For each th triplet, we assume will be the\nparent node of the Set created by , + , ..., .The transitions of are as\nfollows: 1) if (max of ): for all , are the same as , just with some\npossible changes. These changes are due to being the start or the end of\nsome triplet with as So, let us start with as . If is non-zero, then\nperform a union operation (of DSU) between the node and , increment by ,\nand assign as . This unites the ranges over the node.2) if (max of ): we\ndo the same as above; rather than doing for all we would restrict\nourselves with from to . The net time complexity = updation of value by\nand + union operations due to union of with over all + incrementing\nvalues (by ) + copying values = (in worst case) = .\n",
    "name": "D. Connect the Dots",
    "statement": "To play the game, Alice draws a straight line and marks n points on it,\r\nindexed from 1 to n. Initially, there are no arcs between the points, so\r\nthey are all disjoint. After that, Alice performs m operations of the\r\nfollowing type: She picks three integers a_i, d_i (1\r\nle d_i\r\nle 10), and k_i. She selects points a_i, a_i+d_i, a_i+2d_i, a_i+3d_i,\r\nldots, a_i+k_i\r\ncdot d_i and connects each pair of these points with arcs. After\r\nperforming all m operations, she wants to know the number of connected\r\ncomponents^\r\ndagger these points form. Please help her find this number.^\r\ndagger Two points are said to be in one connected component if there is\r\na path between them via several (possibly zero) arcs and other points.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;int f[200020];int z;int F(int x){\treturn f[x] != x ? f[x] = F(f[x]) : x;}void U(int x, int y){\tx = F(x);\ty = F(y);\tif (x != y)\t{\t\tz--;\t\tf[x] = y;\t}}int b[11][200020];int main(){\tint t;\tcin >> t;\tfor (int tt = 0; tt < t; tt++)\t{\t\tint n, m;\t\tcin >> n >> m;\t\tfor (int i = 0; i < n + 5; i++)\t\t{\t\t\tf[i] = i;\t\t\tfor (int d = 0; d < 11; d++)\t\t\t{\t\t\t\tb[d][i] = 0;\t\t\t}\t\t}\t\tz = n;\t\tfor (int i = 0; i < m; i++)\t\t{\t\t\tint a, d, k;\t\t\tcin >> a >> d >> k;\t\t\tb[d][a]++;\t\t\tb[d][a + d * k]--;\t\t}\t\tfor (int d = 1; d <= 10; d++)\t\t{\t\t\tfor (int i = 1; i <= d; i++)\t\t\t{\t\t\t\tint s = 0;\t\t\t\tfor (int j = i; j <= n; j += d)\t\t\t\t{\t\t\t\t\ts += b[d][j];\t\t\t\t\tif (s > 0)\t\t\t\t\t{\t\t\t\t\t\tU(j, j + d);\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\tcout << z << endl;\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "dsu",
        "graphs",
        "math",
        "trees"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Connect the Dots.json",
    "hint": []
}