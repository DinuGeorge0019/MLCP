{
    "link": "https://codeforces.com//contest/1700/problem/B",
    "problemId": "1433683",
    "problem_idx": "B",
    "shortId": "1700B",
    "contest_number": "1700",
    "problem_submissions": {
        "F": [
            161204184,
            161175037,
            161206125,
            161212939,
            161208920,
            161208613,
            161221499,
            161209546
        ],
        "E": [
            161198687,
            161196286,
            161355967,
            161718414,
            161625123,
            161210058,
            161186427,
            161205675,
            161211460,
            161212251,
            161209815,
            161226432,
            161215179,
            161212687,
            161209759,
            161208133,
            161212427
        ],
        "D": [
            161181899,
            161187142,
            161172748,
            161191235,
            161182477,
            161193166,
            161184771,
            161194388,
            161383056,
            161196489,
            161188119,
            161188891,
            161183798,
            161190373,
            161201766,
            161189358,
            161191653,
            161196390,
            161376237,
            161189700,
            161191427
        ],
        "C": [
            161179311,
            161183541,
            161180380,
            161184212,
            161718390,
            161184885,
            161181511,
            161178526,
            161188654,
            161193034,
            161183225,
            161183002,
            161175389,
            161193124,
            161191878,
            161177816,
            161183179,
            161187003,
            161183522,
            161177845
        ],
        "B": [
            161174411,
            161180612,
            161180415,
            161180363,
            161174680,
            161179087,
            161174700,
            161180026,
            161190959,
            161175925,
            161173974,
            161173339,
            161174147,
            161181560,
            161181382,
            161172925,
            161174110
        ],
        "A": [
            161167944,
            161176736,
            161168168,
            161168440,
            161176515,
            161168925,
            161168213,
            161168654,
            161187609,
            161168766,
            161168663,
            161168483,
            161168047,
            161169513,
            161168007,
            161168296,
            161173279,
            161168814,
            161167994
        ]
    },
    "name": "B. Palindromic Numbers ",
    "statement": "During a daily walk Alina noticed a long number written on the ground.\r\nNow Alina wants to find some positive number of same length without\r\nleading zeroes, such that the sum of these two numbers is a palindrome.\r\nRecall that a number is called a palindrome, if it reads the same right\r\nto left and left to right. For example, numbers 121, 66, 98989 are\r\npalindromes, and 103, 239, 1241 are not palindromes.Alina understands\r\nthat a valid number always exist. Help her find one!\r\n",
    "solutions": [
        "/*\n\n_/      _/       _/_/_/      _/      _/    _/           _/_/_/_/_/\n _/    _/      _/      _/     _/    _/     _/           _/\n  _/  _/      _/               _/  _/      _/           _/\n   _/_/       _/                 _/        _/           _/_/_/_/\n  _/  _/      _/                 _/        _/           _/\n _/    _/      _/      _/        _/        _/           _/\n_/      _/       _/_/_/          _/        _/_/_/_/_/   _/_/_/_/_/\n\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define lc(x) ((x) << 1)\n#define rc(x) ((x) << 1 | 1)\n#define ru(i, l, r) for (int i = (l); i <= (r); i++)\n#define rd(i, r, l) for (int i = (r); i >= (l); i--)\n#define mid ((l + r) >> 1)\nusing namespace std;\ninline int read()\n{\n\tint x = 0, w = 0; char ch = getchar();\n\twhile(!isdigit(ch)) {w |= ch == '-'; ch = getchar();}\n\twhile(isdigit(ch)) {x = x * 10 + ch - '0'; ch = getchar();}\n\treturn w ? -x : x;\n}\nchar s[100005];\nint t[100005];\nvoid solve()\n{\n\tint n = read();\n\tscanf(\"%s\", s + 1);\n\tif(s[1] != '9')\n\t{\n\t\tru(i, 1, n)\n\t\t{\n\t\t\tputchar('0' + ('9' - s[i]));\n\t\t}\n\t\tputchar('\\n');\n\t\treturn;\n\t}\n\tint now = 0;\n\trd(i, n, 1)\n\t{\n\t\tt[i] = 1 - now - (s[i] - '0');\n\t\tnow = 0;\n\t\tif(t[i] < 0) t[i] += 10, now = 1;\n\t}\n\tru(i, 1, n) printf(\"%d\", t[i]);\n\tprintf(\"\\n\");\n}\nint main()\n{\n\tint T = read(); while(T--) solve(); \n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Palindromic Numbers .json",
    "editorial_link": "https://codeforces.com//blog/entry/103978",
    "editorial": "Let X be the number in input. Consider two cases: first digit of X is 9\r\nand not 9.If the first digit of input number is not 9, we can simply\r\noutput 9999...999 ( digits) - X. If the first digit is 9, we can output\r\n111...1111 ( digits) - X. It is easy to show that this number will be\r\nexactly -digit.To simplify implementation, we can first find\r\n9999...999 - X by subtracting all digits of X from 9, and than if this\r\nnumber is not -digit, add 111...1111 - 9999...999 = 11111...1112 to\r\nit.Overall complexity will be .\r\n"
}