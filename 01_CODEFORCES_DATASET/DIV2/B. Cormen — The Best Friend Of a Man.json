{
    "link": "https://codeforces.com//contest/732/problem/B",
    "problemId": "76072",
    "problem_idx": "B",
    "shortId": "732B",
    "contest_number": "732",
    "problem_submissions": {
        "E": [
            21538888,
            21537779,
            21537129,
            21537499,
            21538134,
            21538715,
            21544444,
            21539734,
            21540059,
            21536661,
            21540840,
            21542039,
            21534910,
            21538735,
            21535519,
            21536958,
            21540398,
            21538120,
            21542707
        ],
        "F": [
            21537120,
            21540142,
            21542965,
            21544806,
            21544597,
            21545399,
            21540042,
            21543034,
            21545483,
            21656308,
            21554885
        ],
        "D": [
            21532629,
            21525539,
            21530620,
            21528537,
            21533913,
            21534989,
            21534469,
            21531559,
            21536597,
            21530734,
            21531936,
            21535213,
            21537946,
            21531246,
            21536546,
            21534126,
            21532973,
            21532309,
            21534225
        ],
        "C": [
            21530647,
            21529152,
            21528463,
            21531507,
            21530354,
            21530901,
            21532584,
            21527470,
            21533687,
            21527417,
            21527627,
            21531693,
            21526633,
            21526154,
            21527731,
            21528874,
            21530241,
            21527402,
            21526262
        ],
        "B": [
            21523702,
            21526949,
            21525416,
            21523386,
            21525291,
            21525800,
            21523178,
            21524106,
            21531342,
            21523932,
            21525092,
            21525450,
            21524463,
            21523658,
            21524734,
            21525994,
            21523984,
            21522251,
            21523311
        ],
        "A": [
            21522134,
            21538223,
            21523250,
            21522010,
            21522393,
            21523229,
            21521947,
            21521953,
            21522096,
            21522038,
            21522617,
            21523179,
            21522061,
            21522531,
            21523191,
            21523859,
            21522155,
            21528156,
            21521893
        ]
    },
    "name": "B. Cormen — The Best Friend Of a Man",
    "statement": "Recently a dog was bought for Polycarp. The dog’s name is Cormen. Now\r\nPolycarp has a lot of troubles. For example, Cormen likes going for a\r\nwalk. Empirically Polycarp learned that the dog needs at least walks for\r\nany two consecutive days in order to feel good. For example, if and\r\nyesterday Polycarp went for a walk with Cormen times, today he has to go\r\nfor a walk at least times. Polycarp analysed all his affairs over the\r\nnext days and made a sequence of integers , where is the number of times\r\nPolycarp will walk with the dog on the -th day while doing all his\r\naffairs (for example, he has to go to a shop, throw out the trash,\r\netc.).Help Polycarp determine the minimum number of walks he needs to do\r\nadditionaly in the next days so that Cormen will feel good during all\r\nthe days. You can assume that on the day before the first day and on the\r\nday after the -th day Polycarp will go for a walk with Cormen exactly\r\ntimes. Write a program that will find the minumum number of additional\r\nwalks and the appropriate schedule the sequence of integers (), where\r\nmeans the total number of walks with the dog on the -th day.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#include <map>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <complex>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\nint n , K , a[505] , b[505];\n\nint main(){\n    cin >> n >> K;\n    rep(i,0,n) cin >> a[i];\n    int add = 0;\n    rep(i,1,n){\n        int sum = a[i-1] + a[i];\n        if(sum < K) a[i] += K - sum , add += K - sum;\n    }\n    cout << add << endl;\n    rep(i,0,n) cout << a[i] << \" \\n\"[i+1==n];\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Cormen — The Best Friend Of a Man.json",
    "editorial_link": "https://codeforces.com//blog/entry/47890",
    "editorial": "If we donât make enough walks during days and , itâs better to make an\r\nadditional walk on day because it also counts as a walk during days and\r\n(and if we walk one more time on day , it wonât help us in the future).\r\nSo we can start iterating from the second day (\"=indexed). We will add\r\nwalks to the day (and to our answer), so Cormen has enough walks during\r\ndays and . After we have iterated through all days, we can print the\r\nanswer. Time complexity: .\r\n",
    "hint": []
}