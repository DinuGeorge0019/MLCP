{
    "link": "https://codeforces.com//contest/735/problem/A",
    "problemId": "82046",
    "problem_idx": "A",
    "shortId": "735A",
    "contest_number": "735",
    "problem_submissions": {
        "E": [
            22551909
        ],
        "D": [
            22544646,
            22538932,
            22538494,
            22533130,
            22538839,
            22534703,
            22542520,
            22538073,
            22538552,
            22544184,
            22540518,
            22540226,
            22540566,
            22541948,
            22536512,
            22543846,
            22534272,
            22543891,
            22542284,
            22535111
        ],
        "B": [
            22537273,
            22532854,
            22534320,
            22538199,
            22533929,
            22532194,
            22539115,
            22533382,
            22535165,
            22534258,
            22533972,
            22533579,
            22533796,
            22532602,
            22539678,
            22534871,
            22532255,
            22533784,
            22536534,
            22532104
        ],
        "C": [
            22534384,
            22535405,
            22546614,
            22545073,
            22541931,
            22538563,
            22536243,
            22534983,
            22543290,
            22541842,
            22536128,
            22536857,
            22538655,
            22536562,
            22534861,
            22538350,
            22539201,
            22542576,
            22543288,
            22543269
        ],
        "A": [
            22532849,
            22530580,
            22530636,
            22535838,
            22530703,
            22530451,
            22531034,
            22531009,
            22531797,
            22531370,
            22530550,
            22530672,
            22530851,
            22530651,
            22530865,
            22531281,
            22530612,
            22530842,
            22530502
        ]
    },
    "name": "A. Ostap and Grasshopper",
    "statement": "On the way to Rio de Janeiro Ostap kills time playing with a grasshopper\r\nhe took with him in a special box. Ostap builds a line of length such\r\nthat some cells of this line are empty and some contain obstacles. Then,\r\nhe places his grasshopper to one of the empty cells and a small insect\r\nin another empty cell. The grasshopper wants to eat the insect.Ostap\r\nknows that grasshopper is able to jump to any empty cell that is cells\r\naway from the current (to the left or to the right). Note that it\r\ndoesnâ€™t matter whether intermediate cells are empty or not as the\r\ngrasshopper makes a jump over them. For example, if the grasshopper can\r\njump to a neighboring cell only, and if the grasshopper can jump over a\r\nsingle cell.Your goal is to determine whether there is a sequence of\r\njumps such that grasshopper will get from his initial position to the\r\ncell with an insect.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define task \"DBG\"\n\nusing namespace std;\n\nint main() {\n#ifndef ONLINE_JUDGE\n  assert(freopen(task\".INP\", \"r\", stdin));\n  assert(freopen(task\".OUT\", \"w\", stdout));\n#endif // ONLINE_JUDGE\n\n  string s;\n  int n, k; cin >> n >> k;\n  cin >> s;\n\n  s = \"+\" + s;\n  int g = 0, t = 0;\n  for (int i = 1; i <= n; i++)\n    if (s[i] == 'G') g = i;\n    else if (s[i] == 'T') t = i;\n\n  if (g > t) swap(g, t);\n  while (g < t){\n    g += k;\n    if (s[g] == '#') return cout << \"NO\", 0;\n  }\n\n  if (g != t) return cout << \"NO\", 0;\n\n  return cout << \"YES\", 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Ostap and Grasshopper.json",
    "editorial_link": "https://codeforces.com//blog/entry/48659",
    "editorial": "Problem on programming technique. You have to find at which positions\r\nare grasshoper and insect. If k does not divide the difference of\r\nposition, then answer is NO. Otherwise we have to check positions pos+k,\r\npos+2k, ..., where pos is the minimal poisiton of grasshoper and insect.\r\nIf somewhere is an obstacle, then answer is NO, otherwise the answer is\r\nYES.\r\n",
    "hint": []
}