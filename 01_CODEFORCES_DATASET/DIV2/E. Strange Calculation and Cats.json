{"link": "https://codeforces.com//contest/593/problem/E", "problemId": "40050", "problem_idx": "E", "shortId": "593E", "contest_number": "593", "problem_submissions": {"E": [14074831, 14071839, 14069012, 14112263, 14101227, 14078183, 14073295, 14073367], "D": [14071251, 14067776, 14071547, 14071080, 14071834, 14069627, 14072451, 14072921, 14072768, 14072117, 14072979, 14072065, 14072780, 14073132, 14073238], "B": [14065295, 14080270, 14065853, 14065770, 14066413, 14066282, 14075373, 14072184, 14066079, 14066654, 14066024, 14067374, 14064950, 14066946, 14073180, 14067257, 14066769, 14067908, 14066629], "A": [14064191, 14073716, 14064213, 14064573, 14064399, 14064679, 14064276, 14064487, 14064593, 14064652, 14065927, 14064315, 14065183, 14065251, 14065732, 14064991, 14065641, 14065343], "C": [14105964, 14078413, 14072751]}, "name": "E. Strange Calculation and Cats", "statement": "Gosha\u2019s universe is a table consisting of rows and columns. Both the\r\nrows and columns are numbered with consecutive integers starting with .\r\nWe will use to denote a cell located in the row and column .Gosha is\r\noften invited somewhere. Every time he gets an invitation, he first\r\ncalculates the number of ways to get to this place, and only then he\r\ngoes. Gosha\u2019s house is located in the cell .At any moment of time, Gosha\r\nmoves from the cell he is currently located in to a cell adjacent to it\r\n(two cells are adjacent if they share a common side). Of course, the\r\nmovement is possible only if such a cell exists, i.e. Gosha will not go\r\nbeyond the boundaries of the table. Thus, from the cell he is able to\r\nmake a move to one of the cells , , , . Also, Ghosha can skip a move and\r\nstay in the current cell .Besides the love of strange calculations,\r\nGosha is allergic to cats, so he never goes to the cell that has a cat\r\nin it. Gosha knows exactly where and when he will be invited and the\r\nschedule of cats travelling along the table. Formally, he has records,\r\nthe -th of them has one of the following forms: , , , Gosha is invited\r\nto come to cell at the moment of time . It is guaranteed that there is\r\nno cat inside cell at this moment of time. , , , at the moment a cat\r\nappears in cell . It is guaranteed that no other cat is located in this\r\ncell at that moment of time. , , , at the moment a cat leaves cell . It\r\nis guaranteed that there is cat located in the cell . Gosha plans to\r\naccept only one invitation, but he has not yet decided, which particular\r\none. In order to make this decision, he asks you to calculate for each\r\nof the invitations the number of ways to get to the cell at the moment .\r\nFor every invitation, assume that Gosha he starts moving from cell at\r\nthe moment .Moving between two neighboring cells takes Gosha exactly one\r\nunit of tim. In particular, this means that Gosha can come into the cell\r\nonly if a cat sitting in it leaves the moment when Gosha begins his\r\nmovement from the neighboring cell, and if none of the cats comes to the\r\ncell at the time when Gosha is in it.Two ways to go from cell to cell at\r\ntime are considered distinct if for at least one moment of time from to\r\nGosha\u2019s positions are distinct for the two ways at this moment. Note,\r\nthat during this travel Gosha is allowed to visit both and multiple\r\ntimes. Since the number of ways can be quite large, print it modulo .\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\ntemplate<typename T> struct matrix {\n    int N;\n    vector<T> dat;\n\n    matrix<T> (int _N, T fill = T(0), T diag = T(0)) {\n        N = _N;\n        dat.resize(N * N, fill);\n\n        for (int i = 0; i < N; i++)\n            (*this)(i, i) = diag;\n    }\n\n    T& operator()(int i, int j) {\n        return dat[N * i + j];\n    }\n\n    matrix<T> operator *(matrix<T> &b){\n        matrix<T> r(N);\n\n        for(int i=0; i<N; i++)\n            for(int j=0; j<N; j++)\n                for(int k=0; k<N; k++)\n                    r(i, j) = r(i, j) + (*this)(i, k) * b(k, j);\n\n        return r;\n    }\n\n    matrix<T> pow(ll expo){\n        if(!expo) return matrix<T>(N, T(0), T(1));\n        matrix<T> r = (*this * *this).pow(expo/2);\n        return expo&1 ? r * *this : r;\n    }\n\n    friend ostream& operator<<(ostream &os, matrix<T> &m){\n        os << \"{\";\n        for(int i=0; i<m.N; i++){\n            if(i) os << \"},\\n \";\n            os << \"{\";\n            for(int j=0; j<m.N; j++){\n                if(j) os << \", \";\n                os << setw(10) << m(i, j) << setw(0);\n            }\n        }\n        return os << \"}}\";\n    }\n};\n\nconst int MOD = 1e9 + 7;\n\nstruct mll {\n    int val;\n    mll(int _val = 0) {\n        val = _val % MOD;\n        if (val < 0) val += MOD;\n    }\n\n    mll operator+(const mll &o) {\n        return mll((val + o.val) % MOD);\n    }\n\n    mll operator*(const mll &o) {\n        return mll((val * 1ll * o.val) % MOD);\n    }\n\n    friend ostream& operator<<(ostream &os, mll &m) {\n        return os << m.val;\n    }\n};\n\nint N, M, Q;\nbool cat[20][20];\n\nint dir[5][2] = {{0, 0}, {-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\nbool go(int i, int j) {\n    if (i < 0 || j < 0 || i >= N || j >= M) return false;\n    return !cat[i][j];\n}\n\nvoid advance(matrix<mll> &cur, int steps) {\n    matrix<mll> mul(N * M);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < M; j++) {\n            if (!go(i, j)) continue;\n            for (int d = 0; d < 5; d++) {\n                int ii = i + dir[d][0];\n                int jj = j + dir[d][1];\n\n                if (!go(ii, jj)) continue;\n                mul(i * M + j, ii * M + jj).val++;\n            }\n        }\n    }\n\n    mul = mul.pow(steps);\n    cur = cur * mul;\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0), cout.precision(15);\n\n    cin >> N >> M >> Q;\n\n    matrix<mll> ans(N * M, mll(0), mll(1));\n\n    int CT = 1;\n\n    int T, X, Y, TM;\n    for (int i = 0; i < Q; i++) {\n        cin >> T >> X >> Y >> TM;\n        X--, Y--;\n\n        // now handle the query\n        if (T == 1) {\n            advance(ans, TM - CT);\n            cout << ans(0, X * M + Y) << \"\\n\";\n            CT = TM;\n        } else {\n            advance(ans, TM - CT);\n            if (T == 2) cat[X][Y] = true;\n            else cat[X][Y] = false;\n            CT = TM;\n        }\n    }\n}\n\n"], "input": "", "output": "", "tags": ["dp", "matrices"], "dificulty": "2400", "interactive": false}