{
    "link": "https://codeforces.com//contest/907/problem/A",
    "problemId": "140849",
    "problem_idx": "A",
    "shortId": "907A",
    "contest_number": "907",
    "problem_submissions": {
        "A": [
            33575410,
            33562373,
            33540675,
            33541958,
            33569551,
            33540657,
            33540926,
            33554400,
            33543519,
            33543455,
            33545359,
            33546723,
            33543893,
            33544746,
            33541852,
            33545259,
            33542765,
            33544738,
            33545990
        ],
        "E": [
            33569336,
            33565777,
            33581296,
            33581269,
            33579404,
            33566284,
            33569922,
            33629468,
            33568809,
            33566385,
            33570242,
            33565403,
            33570350
        ],
        "D": [
            33565126,
            33562641,
            33581688,
            33581260,
            33565908,
            33566346,
            33568422,
            33569754,
            33570678
        ],
        "C": [
            33549830,
            33551329,
            33554149,
            33567015,
            33549957,
            33554343,
            33567823,
            33552808,
            33554965,
            33557383,
            33556644,
            33558626,
            33561202,
            33556067,
            33558273,
            33556336,
            33558166,
            33556124
        ],
        "B": [
            33544318,
            33546636,
            33559945,
            33562988,
            33544727,
            33549069,
            33570043,
            33548318,
            33549618,
            33552052,
            33550884,
            33550827,
            33550979,
            33551429,
            33553199,
            33549528,
            33551065,
            33549896
        ],
        "F": [
            33567143,
            33554423,
            33558532,
            40494408
        ]
    },
    "name": "A. Masha and Bears",
    "statement": "A family consisting of father bear, mother bear and son bear owns three\r\ncars. Father bear can climb into the largest car and he likes it. Also,\r\nmother bear can climb into the middle car and she likes it. Moreover,\r\nson bear can climb into the smallest car and he likes it. It\u2019s known\r\nthat the largest car is strictly larger than the middle car, and the\r\nmiddle car is strictly larger than the smallest car. Masha came to test\r\nthese cars. She could climb into all cars, but she liked only the\r\nsmallest car. It\u2019s known that a character with size can climb into some\r\ncar with size if and only if , he or she likes it if and only if he can\r\nclimb into this car and .You are given sizes of bears and Masha. Find\r\nout some possible integer non-negative sizes of cars.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define _USE_MATH_DEFINES\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int,int> pii;\ntypedef complex<ld> pt;\ntypedef vector<pt> pol;\n#define nl '\\n'\n\n///* advent of code\ntypedef istringstream iss;\n#define pb push_back\n#define ins insert\n#define multiset mset\n#define getl(A) getline(cin, A)\n//*/\n\nconst ll INF = 0x3f3f3f3f;\nconst ll MOD = 1e9+7;\nconst ld EPS = 1e-9;\n\n\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0);\n\n\tint a, b, c, d;\n\tcin >> a >> b >> c >> d;\n\tfor (int i = 1; i <= 200; i++) {\n\t\tfor (int j = 1; j < i; j++) {\n\t\t\tfor (int k = 1; k < i; k++) {\n\t\t\t\tif (a <= i and i <= 2*a and b <= j and j <= 2*b and c <= k and k <= 2*c\n\t\t\t\t\t\tand d <= k and k <= 2*d and j > 2*d) {\n\t\t\t\t\tcout << i << nl;\n\t\t\t\t\tcout << j << nl;\n\t\t\t\t\tcout << k << nl;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tcout << -1 << nl;\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Masha and Bears.json",
    "editorial_link": "https://codeforces.com//blog/entry/56601",
    "editorial": "Sizes of cars should satisfy the following constraints: in -th car,\r\nMasha and corresponding bear are able to get into, so size of the car\r\nshould not be less than ; each bear likes its car, so size of -th car is\r\nno more than ; Masha doesn\u00e2\u0080\u0099t like first two cars, then their sizes are\r\nmore than ; Masha likes last car, so it\u00e2\u0080\u0099s size is not more than ; Sizes\r\nof cars are strictly ordered. It means that size of father\u00e2\u0080\u0099s car is\r\nstrictly more than size of mother\u00e2\u0080\u0099s one, and size of mother\u00e2\u0080\u0099s car is\r\nstrictly more than son\u00e2\u0080\u0099s car. Sizes of bears don\u00e2\u0080\u0099t exceed 100; then,\r\nsizes of cars does not exceed 200, and there are only possible variants\r\nof sizes of cars. In given constraints, one can just go through all\r\npossible triples of sizes and check if each of them satisfies the\r\nconstrains above or not.\r\n"
}