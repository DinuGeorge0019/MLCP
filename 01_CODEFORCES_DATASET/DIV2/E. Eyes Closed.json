{
    "link": "https://codeforces.com//contest/895/problem/E",
    "problemId": "136058",
    "problem_idx": "E",
    "shortId": "895E",
    "contest_number": "895",
    "problem_submissions": {
        "B": [
            32688468,
            32699862,
            32678233,
            32693050,
            32686509,
            32685665,
            32686167,
            32677480,
            32679593,
            32679598,
            32678660,
            32679991,
            32682934,
            32679855,
            32677931,
            32686786,
            32693881,
            32679230,
            32679053
        ],
        "A": [
            32686687,
            32676253,
            32692247,
            32687355,
            32675778,
            32681798,
            32679509,
            32675934,
            32676147,
            32676898,
            32676014,
            32676714,
            32676536,
            32676059,
            32675756,
            32675820,
            32681275,
            32675999,
            32675924,
            32676186
        ],
        "E": [
            32685470,
            32693933,
            32688720,
            32686566,
            32794358,
            32794273,
            32732458,
            32681330,
            34740059,
            32691274,
            32699769,
            32720207,
            32720179,
            32720088,
            32698361,
            32698258,
            32698305
        ],
        "D": [
            32681888,
            32681308,
            32690694,
            32686236,
            32685937,
            32689479,
            32691053,
            32781770,
            32686848,
            32691934,
            32691134,
            32690110,
            32688741,
            32690589,
            32685060,
            32692013
        ],
        "C": [
            32678196,
            32689081,
            32683426,
            32681542,
            32680606,
            32690938,
            32678815,
            32682493,
            32687456,
            32690603,
            32685722,
            32686946,
            32686892,
            32689317,
            32680568,
            32678934,
            32808410,
            32685463,
            32687263,
            32681038
        ]
    },
    "name": "E. Eyes Closed",
    "statement": "Vasya and Petya were tired of studying so they decided to play a game.\r\nBefore the game begins Vasya looks at array consisting of integers. As\r\nsoon as he remembers all elements of the game begins. Vasya closes his\r\neyes and Petya does actions of one of two types: Petya says 4 integers\r\nboundaries of two non-intersecting segments. After that he swaps one\r\nrandom element from the segment with another random element from the\r\nsegment. Petya asks Vasya the sum of the elements of in the\r\nsegment.Vasya is a mathematician so he answers Petya the mathematical\r\nexpectation of the sum of the elements in the segment.Your task is to\r\nwrite a program which will answer the second type questions as Vasya\r\nwould do it. In other words your program should print the mathematical\r\nexpectation of the sum of the elements of in the segment for every\r\nsecond type query.\r\n",
    "solutions": [
        "#include\"bits/stdc++.h\"\n\n\n#define PB push_back\n#define PF push_front\n#define LB lower_bound\n#define UB upper_bound\n#define fr(x) freopen(x,\"r\",stdin)\n#define fw(x) freopen(x,\"w\",stdout)\n#define iout(x) printf(\"%d\\n\",x)\n#define lout(x) printf(\"%lld\\n\",x)\n#define REP(x,l,u) for(int x = (l);x<=(u);x++)\n#define RREP(x,l,u) for(int x = (l);x>=(u);x--)\n#define mst(x,a) memset(x,a,sizeof(x))\n#define PII pair<int,int>\n#define PLL pair<ll,ll>\n#define MP make_pair\n#define se second\n#define fi first\n#define dbg(x) cout<<#x<<\" = \"<<(x)<<endl;\n#define sz(x) ((int)x.size())\n#define cl(x) x.clear()\n\ntypedef  long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ld;\nusing namespace std;\n\nconst int maxn = 100010;\nconst int mod = 1e9+7;\nconst int MAX = 1000000010;\nconst double eps = 1e-6;\nconst double PI = acos(-1);\n\ntemplate<typename T> inline void read(T &x){\nx=0;T f=1;char ch;do{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');do x=x*10+ch-'0',ch=getchar();while(ch<='9'&&ch>='0');x*=f;\n}\n\ntemplate<typename A,typename B> inline void read(A&x,B&y){read(x);read(y);}\ntemplate<typename A,typename B,typename C> inline void read(A&x,B&y,C&z){read(x);read(y);read(z);}\ntemplate<typename A,typename B,typename C,typename D> inline void read(A&x,B&y,C&z,D&w){read(x);read(y);read(z);read(w);}\ntemplate<typename A,typename B> inline A fexp(A x,B p){A ans=1;for(;p;p>>=1,x=1LL*x*x%mod)if(p&1)ans=1LL*ans*x%mod;return ans;}\ntemplate<typename A,typename B> inline A fexp(A x,B p,A mo){A ans=1;for(;p;p>>=1,x=1LL*x*x%mo)if(p&1)ans=1LL*ans*x%mo;return ans;}\n\nint n,m;\n\ndouble A[maxn];\n\nstruct Node{\n\tint l,r;\n\tdouble sm,bjc,bjj;\n}T[maxn<<2];\n\nvoid pushup(int i){T[i].sm=T[i<<1].sm+T[i<<1|1].sm;}\n\nvoid mul(int i,double x){\n\tT[i].sm*=x;T[i].bjc*=x;T[i].bjj*=x;\n}\n\nvoid add(int i,double x){\n\tT[i].sm+=x*(T[i].r-T[i].l+1);T[i].bjj+=x;\n}\n\nvoid pushdown(int i){\n\tmul(i<<1,T[i].bjc);mul(i<<1|1,T[i].bjc);T[i].bjc=1;\n\tadd(i<<1,T[i].bjj);add(i<<1|1,T[i].bjj);T[i].bjj=0;\n}\n\nvoid build(int i,int l,int r){\n\tT[i].l=l;T[i].r=r;T[i].bjc=1;\n\tif(l==r){\n\t\tT[i].sm=A[l];\n\t\treturn;\n\t}\n\tint M=l+r>>1;\n\tbuild(i<<1,l,M);build(i<<1|1,M+1,r);\n\tpushup(i);\n}\n\ndouble query(int i,int l,int r){\n\tif(l<=T[i].l&&T[i].r<=r)return T[i].sm;\n\tint M=T[i].l+T[i].r>>1;double ans=0;\n\tpushdown(i);\n\tif(l<=M)ans+=query(i<<1,l,r);if(r>M)ans+=query(i<<1|1,l,r);\n\treturn ans;\n}\n\nvoid add(int i,int l,int r,double x){\n\tif(l<=T[i].l&&T[i].r<=r){\n\t\tadd(i,x);\n\t\treturn;\n\t}\n\tint M=T[i].l+T[i].r>>1;\n\tpushdown(i);\n\tif(l<=M)add(i<<1,l,r,x);if(r>M)add(i<<1|1,l,r,x);\n\tpushup(i);\n}\n\n\nvoid mul(int i,int l,int r,double x){\n\tif(l<=T[i].l&&T[i].r<=r){\n\t\tmul(i,x);\n\t\treturn;\n\t}\n\tint M=T[i].l+T[i].r>>1;\n\tpushdown(i);\n\tif(l<=M)mul(i<<1,l,r,x);if(r>M)mul(i<<1|1,l,r,x);\n\tpushup(i);\n}\n\nint main(){\n\tread(n,m);\n\tREP(i,1,n)scanf(\"%lf\",&A[i]);\n\tbuild(1,1,n);\n\twhile(m--){\n\t\tint tp;read(tp);\n\t\tif(tp==1){\n\t\t\tint l1,r1,l2,r2;read(l1,r1,l2,r2);\n\t\t\tdouble sm1=0,sm2=0;\n\t\t\tsm1=query(1,l1,r1);\n\t\t\tsm2=query(1,l2,r2);\n\t\t\tmul(1,l1,r1,(double)(r1-l1)/(r1-l1+1));\n\t\t\tmul(1,l2,r2,(double)(r2-l2)/(r2-l2+1));\n\t\t\tadd(1,l1,r1,sm2/(r2-l2+1)/(r1-l1+1));\n\t\t\tadd(1,l2,r2,sm1/(r2-l2+1)/(r1-l1+1));\n\t\t}\n\t\telse{\n\t\t\tint l,r;read(l,r);\n\t\t\tprintf(\"%.10lf\\n\",query(1,l,r));\n\t\t}\n//\t\tREP(i,1,n)printf(\"%.3lf \",A[i]);\n\t}\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "probabilities"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Eyes Closed.json",
    "editorial_link": "https://codeforces.com//blog/entry/56028",
    "editorial": "For each position we need to maintain mathematical expectation of the\r\nvalue on it. Initially, for position , it is . Let\u00e2\u0080\u0099s process the query\r\nof the first type. Each number from the interval remains on its place\r\nwith probability . The probability that it will be replaced by a number\r\nfrom is . The mathematical expectation of the number to which it will be\r\nreplaced is the arithmetic mean of sum of the mathematical expectation\r\nof numbers in , let it be . Then, to update the expectation of a number\r\nfrom , we need to multiply it by and add to it. That is, the query of\r\nthe first type is reduced to the query multiplying all the numbers in a\r\nsegment and adding to them a number. To process the second type query,\r\nyou must find the sum of the numbers in the segment. All these queries\r\ncan be processed with the help of segment tree. Time complexity Solution\r\nArpa\u00e2\u0080\u0099s solution\r\n"
}