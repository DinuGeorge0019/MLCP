{
    "link": "https://codeforces.com//contest/1659/problem/A",
    "problemId": "1371411",
    "problem_idx": "A",
    "shortId": "1659A",
    "contest_number": "1659",
    "problem_submissions": {
        "E": [
            153913573,
            153929614,
            153928927,
            153922832,
            153919141,
            153972138,
            153926923,
            153927092,
            153929319,
            153932903,
            153930192,
            153930364,
            153930632,
            153931626,
            153929090,
            153932497,
            153927674,
            153932539,
            153931108,
            153930225
        ],
        "D": [
            153912412,
            153905719,
            153910339,
            153913081,
            153925687,
            153914747,
            153914843,
            153917030,
            153914214,
            153914225,
            153916202,
            153914923,
            153911260,
            153911942,
            153919382,
            153913809,
            153916530,
            153910597,
            153914778,
            153923066
        ],
        "B": [
            153899189,
            153895163,
            153894044,
            153901045,
            153896660,
            153905534,
            153895509,
            153894100,
            153894393,
            153894053,
            153896780,
            153900091,
            153895296,
            153893292,
            153896323,
            153897272,
            153895755,
            153896012,
            153922971,
            153892638
        ],
        "C": [
            153893804,
            153899081,
            153898923,
            153904670,
            153899860,
            153895491,
            153906966,
            153902317,
            153904388,
            153898598,
            153905688,
            153905657,
            153901854,
            153898683,
            153904460,
            153903103,
            153900333,
            153901824,
            153895900,
            153899518
        ],
        "A": [
            153892134,
            153890875,
            153890881,
            153898852,
            153891639,
            153899777,
            153891702,
            153891302,
            153890852,
            153890890,
            153891590,
            153893681,
            153891282,
            153890712,
            153890944,
            153892901,
            153890725,
            153890838,
            153891604,
            153890839
        ],
        "F": [
            153937865
        ]
    },
    "name": "A. Red Versus Blue",
    "statement": "Team Red and Team Blue competed in a competitive FPS. Their match was\r\nstreamed around the world. They played a series of n matches.In the end,\r\nit turned out Team Red won r times and Team Blue won b times. Team Blue\r\nwas less skilled than Team Red, so b was than r.You missed the stream\r\nsince you overslept, but you think that the match must have been neck\r\nand neck since so many people watched it. So you imagine a string of\r\nlength n where the i-th character denotes who won the i-th match it is\r\nif Team Red won or if Team Blue won. You imagine the string was such\r\nthat the number of times a team was . For example, in the series of\r\nmatches , Team Red won 3 times in a row, which is the maximum.You must\r\nfind a string satisfying the above conditions. If there are multiple\r\nanswers, print any.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 10;\nint T, n, a, b;\nint main()\n{\n\tios::sync_with_stdio(0);\n\tcin >> T;\n\twhile(T--){\n\t\tcin >> n >> a >> b;\n\t\tint tims = a % (b + 1);\n\t\tfor(int i = 1; i <= tims; ++i){\n\t\t\tfor(int j = 1; j <= (a / (b + 1)) + 1; ++j) cout << \"R\";\n\t\t\tcout << \"B\";\n\t\t}\n\t\tfor(int i = tims + 1; i <= b + 1; ++i){\n\t\t\tfor(int j = 1; j <= a / (b + 1); ++j) cout << \"R\";\n\t\t\tif(i != b + 1) cout << \"B\";\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Red Versus Blue.json",
    "editorial_link": "https://codeforces.com//blog/entry/100938",
    "editorial": "We have \u00e2\u0080\u0099s which divide the string into regions and we have to place the\r\n\u00e2\u0080\u0099s in these regions. By the strong form of the pigeonhole principle, at\r\nleast one region must have at least \u00e2\u0080\u0099s. This gives us a lower bound on\r\nthe answer.Now, we will construct a string whose answer is exactly equal\r\nto the lower bound.We place the \u00e2\u0080\u0099s so that they are not adjacent. Then\r\nwe equally distribute the \u00e2\u0080\u0099s in the regions.Let and .We place \u00e2\u0080\u0099s in each\r\nregion and an extra in any regions. Hence, our answer for the\r\nconstruction is , which is equal to the lower bound.Importantly, , so\r\nnone of the \u00e2\u0080\u0099s will be consecutive.Time complexity: .\r\n"
}