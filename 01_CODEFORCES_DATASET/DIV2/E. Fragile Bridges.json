{
    "link": "https://codeforces.com//contest/202/problem/E",
    "problemId": "1464",
    "problem_idx": "E",
    "shortId": "202E",
    "contest_number": "202",
    "problem_submissions": {
        "D": [
            1844313,
            1842311,
            1841979,
            1843395,
            1842912,
            1842950,
            1842562,
            1842138,
            1840497,
            1843444,
            1843135
        ],
        "E": [
            1843349,
            1841002,
            1841817,
            1843089
        ],
        "C": [
            1841155,
            1839729,
            1840113,
            1840755,
            1841271,
            1841797,
            1841819,
            1842476,
            1840829,
            1842962,
            1840554,
            1841522,
            1842232,
            1841398,
            1840867
        ],
        "B": [
            1840403,
            1843403,
            1840044,
            1839954,
            1840486,
            1839533,
            1840191,
            1840994,
            1839874,
            1842121
        ],
        "A": [
            1838706,
            1838919,
            1839372,
            1838770,
            1838876,
            1838669,
            1839147,
            1841443,
            1839411,
            1838689,
            1838642,
            1838754,
            1838807,
            1838635,
            1838833,
            1838650
        ]
    },
    "name": "E. Fragile Bridges",
    "statement": "You are playing a video game and you have just reached the bonus level,\r\nwhere the only possible goal is to score as many points as possible.\r\nBeing a perfectionist, you\u2019ve decided that you won\u2019t leave this level\r\nuntil you\u2019ve gained the maximum possible number of points there.The\r\nbonus level consists of small platforms placed in a line and numbered\r\nfrom to from left to right and () bridges connecting adjacent platforms.\r\nThe bridges between the platforms are very fragile, and for each bridge\r\nthe number of times one can pass this bridge from one of its ends to the\r\nother before it collapses forever is known in advance.The player\u2019s\r\nactions are as follows. First, he selects one of the platforms to be the\r\nstarting position for his hero. After that the player can freely move\r\nthe hero across the platforms moving by the undestroyed bridges. As soon\r\nas the hero finds himself on a platform with no undestroyed bridge\r\nattached to it, the level is automatically ended. The number of points\r\nscored by the player at the end of the level is calculated as the number\r\nof transitions made by the hero between the platforms. Note that if the\r\nhero started moving by a certain bridge, he has to continue moving in\r\nthe same direction until he is on a platform.Find how many points you\r\nneed to score to be sure that nobody will beat your record, and move to\r\nthe next level with a quiet heart.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cctype>\n#include <ctime>\n#include <iostream>\n#include <sstream>\n#include <algorithm>\n#include <functional>\n#include <string>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n\nusing namespace std;\n\n#ifndef LEEWINGS_DEBUG\n#define LEEWINGS_DEBUG 0\n#endif\n\n#define debug(x) if (LEEWINGS_DEBUG) cerr << #x << \" = \" << (x) << endl\n\n#define debug_line(a, n) do {                                                \\\n    if (LEEWINGS_DEBUG) {                                                             \\\n        cerr << #a << \"[\" << #n << \"]:\" << endl;                             \\\n        for (int i = 0; i < (n); i++) cerr << (a)[i] << \" \";                 \\\n        cerr << endl;                                                        \\\n    }                                                                        \\\n} while (0)\n\n#define debug_mat(a, n, m) do {                                              \\\n    if (LEEWINGS_DEBUG) {                                                             \\\n        cerr << #a << \"[\" << #n << \"][\" << #m \"]:\" << endl;                  \\\n        for (int i = 0; i < (n); i++) {                                      \\\n            for (int j = 0; j < (m); j++) cerr << (a)[i][j] << \" \";          \\\n            cerr << endl;                                                    \\\n        }                                                                    \\\n    }                                                                        \\\n} while(0)\n\ntypedef pair<int, int> pii;\ntypedef vector<int>::const_iterator vci;\ntypedef map<int, int>::const_iterator mci;\n\nconst int INF = 0x3f3f3f3f;\nconst long long LLINF = 0x3f3f3f3f3f3f3f3fll;\nconst double DINF = 1.0/0.0f;\nconst double pi = acos(-1.0);\nconst double eps = 1e-8;\nconst int MOD = 1000000007;\n\ninline int LC(int x) { return x << 1; }\ninline int RC(int x) { return (x << 1) | 1; }\ninline bool eq0(double x) { return fabs(x) < eps; }\ninline bool eq(double x, double y) { return fabs(x - y) < eps; }\ninline bool ls(double x, double y) { return x + eps < y; }\ninline bool gr(double x, double y) { return x - eps > y; }\ninline bool greq(double x, double y) { return x + eps >= y; }\ninline bool lseq(double x, double y) { return x - eps <= y; }\ninline double fmax(double x, double y) { return gr(x, y) ? x : y; }\ninline double fmin(double x, double y) { return ls(x, y) ? x : y; }\n\ntemplate<class T> inline T sqr(T x) { return x * x; }\n\nconst int MAXN = 100010;\nlong long a[MAXN];\nlong long lr[MAXN], lnr[MAXN];\nlong long rr[MAXN], rnr[MAXN];\n\nint main()\n{\n    int n;\n    cin >> n;\n    for (int i = 0; i < n - 1; i++) cin >> a[i];\n\n    for (int i = 1; i <= n; i++) {\n        if (a[i - 1] > 1) {\n            lr[i] = lr[i - 1] + a[i - 1];\n            if (a[i - 1] & 1) lr[i]--;\n        }\n        if (a[i - 1] > 0) {\n            lnr[i] = lnr[i - 1] + a[i - 1];\n            if (!(a[i - 1] & 1)) lnr[i]--;\n        }\n        lnr[i] = max(lnr[i], lr[i]);\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        if (a[i] > 1) {\n            rr[i] = rr[i + 1] + a[i];\n            if (a[i] & 1) rr[i]--;\n        }\n        if (a[i] > 0) {\n            rnr[i] = rnr[i + 1] + a[i];\n            if (!(a[i] & 1)) rnr[i]--;\n        }\n        rnr[i] = max(rnr[i], rr[i]);\n    }\n\n    long long ans = 0;\n    for (int i = 0; i <= n; i++) {\n        ans = max(ans, lr[i] + rr[i]);\n        ans = max(ans, lr[i] + rnr[i]);\n        ans = max(ans, rr[i] + lnr[i]);\n    }\n    cout << ans << endl;\n\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Fragile Bridges.json",
    "editorial_link": "https://codeforces.com/blog/entry/4808",
    "editorial": "There are a few different ways to solve this problem, the editorial contains one of them.\n\nFor any solution the following fact is useful. Suppose the sought path starts on platform i and ends on platform j (i???j, if that's not the case, we can reverse the path). Then all bridges between platforms i and j will be passed through an odd number of times, and all other bridges will be passed through an even number of times.\n\nLet's find the maximum length of a path with its ends on platforms i and j. To do that, let's find the following auxiliary values for each platform: lefti -- the maximum length of a path starting and ending on platform i and passing only through bridges to the left of platform i; rightj -- similarly for bridges to the right of platform j. Also for each bridge define oddi as the largest odd number not larger than ai, and for each platform define sumOddi as the sum of oddj for all bridges to the left of platform i.\n\nThen the maximum length of a path with its ends on platforms i and j is equal to lefti?+?rightj?+?(sumOddj?-?sumOddi), or, which is the same, (rightj?+?sumOddj)?+?(lefti?-?sumOddi).\n\nNow we can find the pair (i,?j) for which this value is the largest in linear time. Let's loop over j. From the formula it's obvious that we should find such i???j that (lefti?-?sumOddi) is the largest. If we loop over j from 1 to n, we can maintain the largest value of this expression for all i???j and recalculate it when moving to the next j, comparing (leftj?-?sumOddj) with the current maximum and possibly updating this maximum. This way for each j we have to check only one value of i and not all i???j.\n\nThe last thing to show is how to find all lefti quickly (all rightj can be found similarly). Clearly left1?=?0, then we'll calculate lefti using lefti?-?1. Note that when ai?-?1?=?1, we have lefti?=?0 as after passing the bridge to platform (i?-?1) this bridge will collapse and it will be impossible to return to platform i. If ai?-?1?>?1, then lefti?=?lefti?-?1?+?eveni?-?1, where eveni?-?1 is the largest even number not larger than ai?-?1. Indeed, we can move to platform (i?-?1), then move along the path corresponding to lefti?-?1, and then move along the bridge between platforms (i?-?1) and i until the limit on the number of transitions is less than 2 (finishing on platform i)."
}