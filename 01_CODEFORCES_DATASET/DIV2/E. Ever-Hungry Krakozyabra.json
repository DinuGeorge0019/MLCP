{
    "link": "https://codeforces.com//contest/834/problem/E",
    "problemId": "116228",
    "problem_idx": "E",
    "shortId": "834E",
    "contest_number": "834",
    "problem_submissions": {
        "A": [
            29008155,
            28994281,
            28993223,
            28993383,
            28993299,
            28998453,
            28993114,
            29004117,
            28996516,
            28993649,
            28993425,
            28992926,
            28993510,
            28995590,
            28994499,
            28992928,
            28997910,
            28993023,
            28993758,
            28994961
        ],
        "B": [
            29006607,
            28994310,
            28996695,
            28995339,
            28995566,
            28997950,
            28994742,
            29001213,
            28994365,
            28997334,
            28993196,
            28996141,
            28998138,
            28998574,
            28996986,
            28993597,
            29001178,
            28994781,
            28995788,
            28998348
        ],
        "D": [
            29003125,
            29012205,
            29010300,
            29010636,
            29106415,
            29106137,
            29011585,
            29009751,
            29011863,
            29014000,
            29030352,
            29012705,
            29015197,
            29012485,
            29012573,
            29017014,
            29013068,
            29016244,
            29027664,
            29015960,
            29015461,
            29013386,
            32498451,
            29017312,
            29015875
        ],
        "C": [
            28993611,
            28993624,
            29000277,
            29001499,
            29003185,
            29003274,
            29002460,
            28995797,
            29001808,
            29003104,
            29004949,
            29000425,
            29000467,
            29008986,
            29000566,
            29367098,
            29002153,
            29002279,
            29005747,
            29003864,
            29006871
        ],
        "E": [
            29044757,
            29044567
        ]
    },
    "name": "E. Ever-Hungry Krakozyabra",
    "statement": "Recently, a wild Krakozyabra appeared at Jelly Castle. It is, truth to\r\nbe said, always eager to have something for dinner.Its favorite meal is\r\nnatural numbers (typically served with honey sauce), or, to be more\r\nprecise, the zeros in their corresponding decimal representations. As\r\nfor other digits, Krakozyabra dislikes them; moreover, they often cause\r\nit indigestion! So, as a necessary precaution, Krakozyabra prefers to\r\nsort the digits of a number in non-descending order before proceeding to\r\nfeast. Then, the leading zeros of the resulting number are eaten and the\r\nremaining part is discarded as an .For example, if Krakozyabra is to\r\nhave the number for dinner, its would be the number .Slastyona is not\r\nreally fond of the idea of Krakozyabra living in her castle. Hovewer,\r\nher natural hospitality prevents her from leaving her guest without\r\nfood. Slastyona has a range of natural numbers from to , which she is\r\ngoing to feed the guest with. Help her determine how many distinct are\r\ngoing to be discarded by Krakozyabra by the end of the dinner.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n// nichijou\n#define REP(i,a,b) for (int i(a), _B(b); i < _B; ++i)\n#define RP(i,n) REP(i,0,n)\n#define PER(i,a,b) for(int i((a)-1), _B(b); i >= _B; --i)\n#define PR(i,n) PER(i,n,0)\n#define REP1(i,a,b) REP(i,a,(b)+1)\n#define RP1(i,n) REP1(i,1,n)\n#define PER1(i,a,b) PER(i,(a)+1,b)\n#define PR1(i,n) PER1(i,n,1)\n#define DO(n) REP(__i,0,n)\ntemplate<typename T>\nvoid cmax(T & a, T b) {a = max(a, b);}\ntemplate<typename T>\nvoid cmin(T & a, T b) {a = min(a, b);}\n\n// data type\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef pair<ll,ll> pll;\n#define F first\n#define S second\n\n// STL container\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\n#define SZ(a) ((int)a.size())\n#define ALL(a) a.begin(), a.end()\n#define CLR(a) a.clear()\n#define BK(a) (a.back())\n#define FT(a) (a.front())\n#define DB(a) a.pop_back()\n#define DF(a) a.pop_front()\n#define PB push_back\n#define EB emplace_back\n\n/* I gave you my heart and then you turned around. */\nvoid _BG(const char * s) {}\ntemplate<typename T, typename ... TT>\nvoid _BG(const char * s,T a, TT...b)\n{\n\tfor (int c = 0; *s && (c || *s != ','); ++s) {\n\t\tcerr<<*s;\n\t\tswitch (*s) {\n\t\tcase '(':\n\t\tcase '[':\n\t\tcase '{':\n\t\t\t++c;\n\t\t\tbreak;\n\t\tcase ')':\n\t\tcase ']':\n\t\tcase '}':\n\t\t\t--c;\n\t\t\tbreak;\n\t\t}\n\t}\n\tcerr<<\" = \"<<a;\n\tif (*s) {\n\t\tcerr<<\", \";\n\t\t_BG(++s,b...);\n\t} else\n\t\tcerr<<endl;\n}\n#define BG(...) do { \\\n\tcerr << __PRETTY_FUNCTION__ << ':' << __LINE__ << \": \"; \\\n\t_BG(#__VA_ARGS__,__VA_ARGS__); \\\n} while(0)\n\n/* Reading input is now 20% cooler! */\nbool RD(void) {return true;}\nbool RD(char & a) {return scanf(\" %c\", &a) == 1;}\nbool RD(char * a) {return scanf(\"%s\", a) == 1;}\nbool RD(double & a) {return scanf(\"%lf\", &a) == 1;}\nbool RD(int & a) {return scanf(\"%d\", &a) == 1;}\nbool RD(ll & a) {return scanf(\"%lld\", &a) == 1;}\n\ntemplate<typename T, typename ... TT>\nbool RD(T & a, TT & ...  b) {return RD(a) && RD(b...);}\n\n/* Do princesses dream of magic sheep? */\n#define RI(a) int a; RD(a)\n#define RII(a,b) RI(a); RI(b)\n#define RIII(a,b,c) RI(a); RII(b,c)\n#define RIIII(a,b,c,d) RI(a); RIII(b,c,d)\n\n/* For it's time for you to fulfill your output. */\nvoid PT(const char a) {putchar(a);}\nvoid PT(const char * a) {fputs(a, stdout);}\nvoid PT(char * a) {fputs(a, stdout);}\nvoid PT(const double a) {printf(\"%.16f\", a);}\nvoid PT(const int a) {printf(\"%d\", a);}\nvoid PT(const ll a) {printf(\"%lld\", a);}\n\n/* The line will last forever! */\ntemplate<char sep = ' ',char end = '\\n'>\nvoid PL(void) {if (end) PT(end);}\ntemplate<char sep = ' ',char end = '\\n',typename T, typename ... TT>\nvoid PL(const T a, const TT ...  b) {PT(a); if (sizeof...(b) && sep) PT(sep); PL<sep,end>(b...);}\n\n/* Good Luck && Have Fun ! */\nstring l,r,t;\nint a[10], ans = 0;\nbool ok()\n{\n\tREP(i,l[0]+1,r[0])\n\t\tif (a[i])\n\t\t\treturn 1;\n\tif (a[r[0]]) {\n\t\t--a[r[0]];\n\t\tt.clear();\n\t\tt.PB(r[0]);\n\t\tRP(i,10)\n\t\t\tRP(j,a[i])\n\t\t\t\tt.PB(i);\n\t\t++a[r[0]];\n\t\tif (t <= r)\n\t\t\treturn 1;\n\t}\n\tif (a[l[0]]) {\n\t\t--a[l[0]];\n\t\tt.clear();\n\t\tt.PB(l[0]);\n\t\tPR(i,10)\n\t\t\tRP(j,a[i])\n\t\t\tt.PB(i);\n\t\t++a[l[0]];\n\t\tif (t >= l)\n\t\t\treturn 1;\n\t}\n\treturn 0;\n}\nvoid dfs(int s,int i)\n{\n\tif (i == 9) {\n\t\ta[i] = s;\n\t\tans += ok();\n\t\treturn;\n\t}\n\tfor (a[i] = 0; a[i] <= s; ++a[i])\n\t\tdfs(s - a[i], i + 1);\n}\nint main()\n{\n\tcin >> l >> r;\n\tif (l == r) {\n\t\tcout << \"1\\n\";\n\t\treturn 0;\n\t}\n\treverse(ALL(l));\n\treverse(ALL(r));\n\twhile (SZ(l) < SZ(r))\n\t\tl.PB('0');\n\tfor (;BK(l) == BK(r); DB(l), DB(r));\n\tfor (auto & x : l) x -= '0';\n\tfor (auto & x : r) x -= '0';\n\treverse(ALL(l));\n\treverse(ALL(r));\n\tdfs(r.size(),0);\n\tcout << ans << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Ever-Hungry Krakozyabra.json",
    "editorial_link": "https://codeforces.com//blog/entry/53567",
    "editorial": null
}