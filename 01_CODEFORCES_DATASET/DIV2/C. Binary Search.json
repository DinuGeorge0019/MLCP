{
    "link": "https://codeforces.com//contest/1436/problem/C",
    "problemId": "772598",
    "problem_idx": "C",
    "shortId": "1436C",
    "contest_number": "1436",
    "problem_submissions": {
        "D": [
            244333966,
            96574214,
            96571456,
            96558532,
            96571048,
            96571994,
            96563376,
            96571151,
            96576643,
            96574299,
            96567342,
            96567085,
            96573866,
            96576086,
            96577575,
            96562284,
            96570394,
            96578043,
            96575753
        ],
        "F": [
            240918218,
            96566504,
            96572912,
            96753174
        ],
        "E": [
            96592979,
            96584648,
            96574218,
            96584890,
            96586188,
            96585819,
            96587447,
            96587153,
            96585609,
            96587917,
            96588463,
            96591240,
            96584846,
            96586193,
            96587617,
            96587454,
            96590850,
            96588483,
            96583371
        ],
        "C": [
            96570072,
            96563215,
            96588737,
            96565809,
            96564790,
            96575488,
            96583604,
            96564799,
            96558226,
            96553282,
            96572718,
            96560930,
            96568810,
            96563409,
            96560716,
            96573151,
            96560791,
            96559882,
            96576285
        ],
        "B": [
            96563722,
            96545744,
            96546426,
            96547973,
            96548924,
            96541502,
            96573998,
            96558603,
            96548113,
            96541622,
            96546010,
            96548513,
            96563296,
            96545652,
            96541454,
            96544953,
            96544692,
            96543086,
            96559069
        ],
        "A": [
            96538154,
            96541957,
            96536078,
            96536651,
            96535505,
            96535718,
            96541514,
            96539181,
            96535535,
            96535532,
            96537279,
            96538197,
            96541879,
            96569353,
            96561847,
            96535411,
            96538782,
            96535867,
            96538910
        ]
    },
    "name": "C. Binary Search",
    "statement": "Andrey thinks he is truly a successful developer, but in reality he\r\ndidn’t know about the binary search algorithm until recently. After\r\nreading some literature Andrey understood that this algorithm allows to\r\nquickly find a certain number x in an array. For an array a indexed from\r\nzero, and an integer x the pseudocode of the algorithm is as follows:\r\nNote that the elements of the array are indexed from zero, and the\r\ndivision is done in integers (rounding down).Andrey read that the\r\nalgorithm only works if the array is sorted. However, he found this\r\nstatement untrue, because there certainly exist unsorted arrays for\r\nwhich the algorithm find x!Andrey wants to write a letter to the book\r\nauthors, but before doing that he must consider the permutations of size\r\nn such that the algorithm finds x in them. A permutation of size n is an\r\narray consisting of n distinct integers between 1 and n in arbitrary\r\norder.Help Andrey and find the number of permutations of size n which\r\ncontain x at position pos and for which the given implementation of the\r\nbinary search algorithm finds x (returns true). As the result may be\r\nextremely large, print the remainder of its division by 10^9+7.\r\n",
    "solutions": [
        "//#pragma GCC optimize(\"Ofast\",\"unroll-loops\",\"omit-frame-pointer\",\"inline\") //Optimization flags\n//#pragma GCC option(\"arch=native\",\"tune=native\",\"no-zero-upper\") //Enable AVX\n//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\n\n#include <bits/stdc++.h>\n\n#ifdef LOCAL\n#include \"debug-template.hpp\"\n#endif\n\nusing namespace std;\n\n#ifdef LOCAL\n#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n#else\n#define debug(...) 42\n#endif\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0);\n\tint n, x, pos; cin >> n >> x >> pos;\n\tvector<int> a(n, -1);\n\tint l = 0, r = n;\n\twhile (l < r) {\n\t\tint mid = l + r >> 1;\n\t\tif (mid <= pos) {\n\t\t\tl = mid + 1;\n\t\t\ta[mid] = 0;\n\t\t} else {\n\t\t\tr = mid;\n\t\t\ta[mid] = 1;\n\t\t}\n\t}\n\tint c0 = 0, c1 = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (i == pos) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (a[i] == 1) {\n\t\t\tc1++;\n\t\t}\n\t\tif (a[i] == 0) {\n\t\t\tc0++;\n\t\t}\n\t}\n\tconst int P = 1e9 + 7;\n\tint ans = 1;\n\tfor (int i = x - 1; i >= x - c0; i--) {\n\t\tans = ans * 1LL * i % P;\n\t}\n\tfor (int i = n - x; i >= n - x - c1 + 1; i--) {\n\t\tans = ans * 1LL * i % P;\n\t}\n\tfor (int i = 1; i <= n - c0 - c1 - 1; i++) {\n\t\tans = ans * 1LL * i % P;\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Binary Search.json",
    "editorial_link": "https://codeforces.com//blog/entry/84024",
    "editorial": "Letâs simulate a binary search algorithm. Initially, we have the\r\nrequired position . For the next position in the binary search, we can\r\ndetermine exactly whether the next number at this position should be\r\ngreater or less than . For all other positions, the values can be\r\neiteher greater or less than . As a result of the simulation of the\r\nalgorithm, we have positions at which numbers must be greater than and\r\npositions at which numbers must be less than . Let the large numbers be\r\n, and the smaller ones . Now letâs count the number of ways to place\r\nlarge numbers in positions using the formula .Letâs calculate in a\r\nsimilar way for smaller numbers, and the product of the resulting\r\nresults will be the answer to the problem.\r\n",
    "hint": []
}