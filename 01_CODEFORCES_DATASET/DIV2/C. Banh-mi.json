{"link": "https://codeforces.com//contest/1062/problem/C", "problemId": "254596", "problem_idx": "C", "shortId": "1062C", "contest_number": "1062", "problem_submissions": {"E": [45734560, 45726248, 45732249, 45733619, 45730195, 45731475, 45731239, 45726325, 45734429, 45732687, 45728510, 45736860, 45736172, 45733982, 45737130, 45738771, 45733014, 45736808, 45722467, 45738588], "D": [45726634, 45730736, 45724741, 45725065, 45723696, 45724136, 45725257, 45730810, 45727060, 45726669, 45731523, 45727302, 45728487, 45722718, 45726364, 45726645, 45723445, 45727784, 45736639, 45727419], "C": [45721626, 45717978, 45722013, 45722920, 45725107, 45723347, 45723217, 45731817, 45722296, 45725538, 45721997, 45722995, 45721715, 45726048, 45722887, 45716980, 45725662, 45723495, 45730894, 45720161], "B": [45719368, 45728287, 45719414, 45719514, 45718037, 45718991, 45720410, 45716157, 45718932, 45720927, 45719221, 45719468, 45718546, 45719917, 45718393, 45721972, 45719490, 45718006, 45726769, 45717530], "A": [45714856, 45714050, 45715684, 45718665, 45717504, 45716696, 45714768, 45714213, 45714103, 45715993, 45714126, 45714813, 45714920, 45732371, 45714819, 45723775, 45732706, 45719793, 45724251, 45714073], "F": [45751027, 45989276, 46585917]}, "name": "C. Banh-mi", "statement": "JATC loves Banh-mi (a Vietnamese food). His affection for Banh-mi is so\r\nmuch that he always has it for breakfast. This morning, as usual, he\r\nbuys a Banh-mi and decides to enjoy it in a special way.First, he splits\r\nthe Banh-mi into n parts, places them on a row and numbers them from 1\r\nthrough n. For each part i, he defines the of the part as x_i\r\nin\r\n{0, 1\r\n}. JATC\u2019s going to eat those parts one by one. At each step, he chooses\r\narbitrary remaining part and eats it. Suppose that part is the i-th part\r\nthen his of the Banh-mi will increase by x_i and the deliciousness of\r\nall the remaining parts will also increase by x_i. The initial enjoyment\r\nof JATC is equal to 0.For example, suppose the deliciousness of 3 parts\r\nare [0, 1, 0]. If JATC eats the second part then his enjoyment will\r\nbecome 1 and the deliciousness of remaining parts will become [1,\r\n_, 1]. Next, if he eats the first part then his enjoyment will become 2\r\nand the remaining parts will become [\r\n_,\r\n_, 2]. After eating the last part, JATC\u2019s enjoyment will become\r\n4.However, JATC doesn\u2019t want to eat all the parts but to save some for\r\nlater. He gives you q queries, each of them consisting of two integers\r\nl_i and r_i. For each query, you have to let him know what is the\r\nmaximum enjoyment he can get if he eats all the parts with indices in\r\nthe range [l_i, r_i] in some order.All the queries are independent of\r\neach other. Since the answer to the query could be very large, print it\r\nmodulo 10^9+7.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\nconst ll mod = 1000000007;\n\nint a[100006];\nint pre[100006];\n\nll ppow(ll a,ll n) {\n\tll ret=1,now=a;\n\twhile (n) {\n\t\tif (n&1) {\n\t\t\tret = (ret*now)%mod;\n\t\t}\n\t\tnow = (now*now)%mod;\n\t\tn >>=1;\n\t}\n\treturn ret;\n}\n\nint main () {\n\tios::sync_with_stdio(0); cin.tie(0);\n\tint n,q;\n\tcin >> n >> q;\n\tstring s;\n\tcin >> s;\n\tfor (int i=1;i<=n;++i) {\n\t\tchar c = s[i-1];\n\t\tif (c == '0') a[i] = 0;\n\t\telse a[i] = 1;\n\t\tpre[i] = pre[i-1] + a[i];\n\t}\n\twhile (q--) {\n\t\tint l,r;\n\t\tcin >> l >> r;\n\t\tlong long _1 = pre[r] - pre[l-1],len = r-l+1;\n\t\tcout << ( (ppow(2,_1)-1) + (ppow(2,_1)-1)*(ppow(2,len-_1)-1) )%mod << endl;\n\t}\n}\n"], "input": "", "output": "", "tags": ["greedy", "implementation", "math"], "dificulty": "1600", "interactive": false}