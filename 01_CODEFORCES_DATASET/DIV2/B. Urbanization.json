{
    "link": "https://codeforces.com//contest/735/problem/B",
    "problemId": "82047",
    "problem_idx": "B",
    "shortId": "735B",
    "contest_number": "735",
    "problem_submissions": {
        "E": [
            22551909
        ],
        "D": [
            22544646,
            22538932,
            22538494,
            22533130,
            22538839,
            22534703,
            22542520,
            22538073,
            22538552,
            22544184,
            22540518,
            22540226,
            22540566,
            22541948,
            22536512,
            22543846,
            22534272,
            22543891,
            22542284,
            22535111
        ],
        "B": [
            22537273,
            22532854,
            22534320,
            22538199,
            22533929,
            22532194,
            22539115,
            22533382,
            22535165,
            22534258,
            22533972,
            22533579,
            22533796,
            22532602,
            22539678,
            22534871,
            22532255,
            22533784,
            22536534,
            22532104
        ],
        "C": [
            22534384,
            22535405,
            22546614,
            22545073,
            22541931,
            22538563,
            22536243,
            22534983,
            22543290,
            22541842,
            22536128,
            22536857,
            22538655,
            22536562,
            22534861,
            22538350,
            22539201,
            22542576,
            22543288,
            22543269
        ],
        "A": [
            22532849,
            22530580,
            22530636,
            22535838,
            22530703,
            22530451,
            22531034,
            22531009,
            22531797,
            22531370,
            22530550,
            22530672,
            22530851,
            22530651,
            22530865,
            22531281,
            22530612,
            22530842,
            22530502
        ]
    },
    "name": "B. Urbanization",
    "statement": "Local authorities have heard a lot about combinatorial abilities of\r\nOstap Bender so they decided to ask his help in the question of\r\nurbanization. There are people who plan to move to the cities. The\r\nwealth of the of them is equal to . Authorities plan to build two\r\ncities, first for people and second for people. Of course, each of\r\ncandidates can settle in only one of the cities. Thus, first some subset\r\nof candidates of size settle in the first city and then some subset of\r\nsize is chosen among the remaining candidates and the move to the second\r\ncity. All other candidates receive an official refuse and go back\r\nhome.To make the statistic of local region look better in the eyes of\r\ntheir bosses, local authorities decided to pick subsets of candidates in\r\nsuch a way that of wealth of people in each of the cities is as large as\r\npossible. Arithmetic mean of wealth in one city is the sum of wealth\r\namong all its residents divided by the number of them ( or depending on\r\nthe city). The division should be done in real numbers without any\r\nrounding.Please, help authorities find the optimal way to pick residents\r\nfor two cities.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define task \"DBG\"\n\nusing namespace std;\n\nconst int N = 100001;\n\ntypedef long long ll;\n\nll a[N], ans;\nint n, n1, n2;\ndouble res;\n\nint main() {\n#ifndef ONLINE_JUDGE\n  assert(freopen(task\".INP\", \"r\", stdin));\n  assert(freopen(task\".OUT\", \"w\", stdout));\n#endif // ONLINE_JUDGE\n\n  cin >> n >> n1 >> n2;\n  for (int i = 1; i <= n; i++) cin >> a[i];\n  sort(a + 1, a + n + 1);\n\n  if (n1 > n2) swap(n1, n2);\n  for (int j = 1; j <= n1; j++) ans += a[n--];\n\n  res = (double) ans / n1;\n  ans = 0;\n\n  for (int j = 1; j <= n2; j++) ans += a[n--];\n  res += (double) ans / n2;\n\n  printf(\"%.8f\", res);\n\n  return 0;\n}\n\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "number theory",
        "sortings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Urbanization.json",
    "editorial_link": "https://codeforces.com//blog/entry/48659",
    "editorial": "First of all, note that n1+n2 chosen ones should be people with top\r\n(n1+n2) coeficients. Secondly, if the person with intelegence C will be\r\nin the first city then he will contribute to our overall IQ with C/n1\r\npoints. So, if n1<n2, then top-n1 ratings should be in the small city\r\nand the top-n2 from others in the big city.\r\n",
    "hint": []
}