{
    "link": "https://codeforces.com//contest/1121/problem/D",
    "problemId": "306950",
    "problem_idx": "D",
    "shortId": "1121D",
    "contest_number": "1121",
    "problem_submissions": {
        "D": [
            50758250,
            50758015,
            50749128,
            50747632,
            50785617,
            50754149,
            50754700,
            50755682
        ],
        "E": [
            50757916,
            50764324
        ],
        "F": [
            50745381,
            50750604,
            50753091,
            50749617,
            50753700,
            50750259,
            50754814,
            50754495,
            50760298,
            50761256,
            50756002,
            50755635,
            50755816,
            50755833,
            50755580,
            50757571,
            50755934
        ],
        "C": [
            50743029,
            50746539,
            50749003,
            50753301,
            50747698,
            50753219,
            50747567,
            50743419,
            50747905,
            50747562,
            50753852,
            50753022,
            50751877,
            50749086,
            50748818,
            50753336,
            50747068
        ],
        "B": [
            50741461,
            50741819,
            50743532,
            50743792,
            50743537,
            50751011,
            50741449,
            50742306,
            50748477,
            50742402,
            50750467,
            50743138,
            50747985,
            50747123,
            50743911,
            50743533,
            50747184,
            50742809
        ],
        "A": [
            50741269,
            50741274,
            50741426,
            50741433,
            50742538,
            50742625,
            50742751,
            50741659,
            50741596,
            50741572,
            50751688,
            50741748,
            50743041,
            50748198,
            50742474,
            50741733,
            50743780,
            50741312
        ]
    },
    "name": "D. Diana and Liana",
    "statement": "At the first holiday in spring, the town Shortriver traditionally\r\nconducts a flower festival. Townsfolk wear traditional wreaths during\r\nthese festivals. Each wreath contains exactly k flowers.The work\r\nmaterial for the wreaths for all n citizens of Shortriver is cut from\r\nthe longest flowered liana that grew in the town that year. Liana is a\r\nsequence a_1, a_2, ..., a_m, where a_i is an integer that denotes the\r\ntype of flower at the position i. This year the liana is very long (m\r\nge n\r\ncdot k), and that means every citizen will get a wreath.Very soon the\r\nliana will be inserted into a special cutting machine in order to make\r\nwork material for wreaths. The machine works in a simple manner: it cuts\r\nk flowers from the beginning of the liana, then another k flowers and so\r\non. Each such piece of k flowers is called a workpiece. The machine\r\nworks until there are less than k flowers on the liana.Diana has found a\r\nweaving schematic for the most beautiful wreath imaginable. In order to\r\nweave it, k flowers must contain flowers of types b_1, b_2, ..., b_s,\r\nwhile other can be of any type. If a type appears in this sequence\r\nseveral times, there should be at least that many flowers of that type\r\nas the number of occurrences of this flower in the sequence. The order\r\nof the flowers in a workpiece does not matter.Diana has a chance to\r\nremove some flowers from the liana before it is inserted into the\r\ncutting machine. She can remove flowers from any part of the liana\r\nwithout breaking liana into pieces. If Diana removes too many flowers,\r\nit may happen so that some of the citizens do not get a wreath. Could\r\nsome flowers be removed from the liana so that at least one workpiece\r\nwould conform to the schematic and machine would still be able to create\r\nat least n workpieces?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>                                                                                                                                                                                                                                                                                             //YaMeshok\n\nusing namespace std;\n\nint m, k, n, s;\nint a[1000001];\n\nint b[1000001];\n\nint used[1000001], was[1000001];\n\nint f(int j){\n\tfor(int i = 1; i <= j; i++){\n\t\twas[a[i]]++;\n\t}\n\tfor(int i = 1; i <= s; i++){\n\t\tif(used[b[i]] > was[b[i]]) return 0;\n\t}\n\treturn 1;\n}\n\nint main(){\n    #ifdef DIAS\n        freopen(\"input.txt\", \"r\", stdin);\n        //freopen(\"output.txt\", \"w\", stdout);\n    #elif NAME \n    \tfreopen(fn\".in\", \"r\", stdin);\n    \tfreopen(fn\".out\", \"w\", stdout);\n    #endif\n    cin >> m >> k >> n >> s;\n    for(int i = 1; i <= m; i++){\n    \tcin >> a[i];\n    }\n    for(int i = 1; i <= s; i++){\n   \t\tcin >> b[i];\n   \t\tused[b[i]] ++;\t\n    }\n    for(int i = 1; i <= m; i++){\n    \tif(!used[a[i]]) used[a[i]] = -1000000;\n    }\n    int l = 1, r = 1;\n   \tint L = k, R = m;\n\twhile(R - L > 1){\n\t\tint mid = (L + R) / 2;\n\t\tfor(int i = 1; i <= m; i++){\n\t\t\twas[a[i]] = 0;\n\t\t}\n\t\tif(f(mid)){\n\t\t\tR = mid;\n\t\t}\n\t\telse{\n\t\t\tL = mid;\n\t\t}\n\t}\n\n\tfor(int i = 1; i <= m; i++){\n\t\twas[a[i]] = 0;\n\t}\n\n\tif(f(R)){\n\t\tr = R;\n\t}\n\tfor(int i = 1; i <= m; i++){\n\t\twas[a[i]] = 0;\n\t}\n\tif(f(L)){\n\t\t r = L;\n\t}\n\tfor(int i = 1; i <= m; i++){\n\t\twas[a[i]] = 0;\n\t}\n\tif(!f(m)){\n\t\tcout << -1;\n\t\treturn 0;\t\t\n\t}\n\tfor(int i = 1; i <= m; i++){\n\t\twas[a[i]] = 0;\n\t}\n\tfor(int i = 1; i <= r; i++) was[a[i]] ++;\n\tfor( ; r <= m; r++){\n\t\tint x = (l - 1) - ((l - 1) / k * k) + max(0, (r - l + 1) - k);\n\t\tif(x <= m - n * k){\n\t\t\tcout << x << endl;\n\t\t\tfor(int i = 1; i <= (l - 1) - ((l - 1) / k * k); i++){\n\t\t\t\tcout << l - i << ' '; \n\t\t\t}\n\t\t\tint cnt = 0;\n\t\t\tx -= (l - 1) - ((l - 1) / k * k); \n\t\t\tfor(int i = l; i <= r; i++){\n\t\t\t \tif(cnt == x) break;\n\t\t\t \tif(was[a[i]] > used[a[i]]){\n\t\t\t \t\twas[a[i]] --;\n\t\t\t \t\tcout << i << ' ';\n\t\t\t \t\tcnt ++;\n\t\t\t \t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\twas[a[r + 1]] ++;\n\t\twhile(l < r + 1 && used[a[l]] < was[a[l]]) was[a[l]] --, l++;\n\t}\n\tcout << -1;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "two pointers"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Diana and Liana.json",
    "editorial_link": "https://codeforces.com//blog/entry/65679",
    "editorial": "First of all, let's learn how to check if a perfect wreath can be obtained from the subsegment [l,r]\n of our liana (that is, if we can remove some flowers so that the remaining ones on [l,r]\n represent a perfect wreath, and this whole wreath will be cut). First, the number of other wreaths must be n?1\n, so the inequality ?l?1k??k+?m?rk??k?n?1\n must hold. Second, the segment [l,r]\n has to contain flowers of all required types. Finally, r?l+1\n must be at least k\n. One can see that these conditions also guarantee that [l,r]\n can become a cut perfect wreath.\n\nNow let's find for every l\n the minimal possible r\n for which the second condition holds. It can be done with the two pointers technique: if we iterate for all l\n from 1\n to m\n then this r\n cannot become less than it was, and it's easy to update all counts and the number of insufficient flowers types both when increase l\n and r\n.\n\nSo what remains is to find out if there is any l\n such that the segment [l,max(r,l+k?1)]\n satisfies the first requirement, and if it does, then print some flowers before l\n which we delete (we must ensure that what remains before l\n is divisible by k\n and does not exceed (n?1)k\n) and some flowers from [l,r]\n we delete (without breaking the conditions). It's not necessary to delete anything after r\n, though."
}