{
    "link": "https://codeforces.com//contest/1763/problem/F",
    "problemId": "1701409",
    "problem_idx": "F",
    "shortId": "1763F",
    "contest_number": "1763",
    "problem_submissions": {
        "C": [
            186020491,
            186014618,
            185970901,
            185991875,
            185997685,
            185982190,
            185984673,
            185981496,
            186009097,
            185973602,
            185981183,
            185984898,
            185981738,
            185976906,
            185977465
        ],
        "E": [
            185998794,
            185987416,
            185979003,
            185992302,
            186002492,
            185989056,
            185993894,
            186011236,
            186008232,
            186008161,
            185976627,
            185996244,
            185993843,
            185994524,
            185987330,
            185983728,
            186014244,
            186001030
        ],
        "D": [
            185995867,
            185980597,
            185999397,
            185984870,
            186005387,
            185985568,
            186006095,
            185982650,
            186022836,
            186016207,
            186014411,
            186000359,
            186003392,
            186001911,
            185991399,
            185982901,
            185988475,
            185988930,
            185993150,
            185994062
        ],
        "F": [
            185990818,
            186680252,
            186011772,
            186580963
        ],
        "B": [
            185964960,
            185964863,
            185976136,
            185966519,
            185970293,
            185964032,
            185970337,
            185968669,
            185966545,
            185964632,
            185967215,
            185968457,
            185964010,
            185967589,
            185966627,
            185963830,
            185965988,
            185967114,
            185965147
        ],
        "A": [
            185961159,
            185960941,
            185963086,
            185960882,
            185963700,
            185960926,
            185963152,
            185960960,
            185961563,
            185960964,
            185961279,
            185962189,
            185960916,
            185963432,
            185961791,
            185961037,
            185961928,
            185961021,
            185961325
        ]
    },
    "name": "F. Edge Queries",
    "statement": "You are given an undirected, connected graph of n nodes and m edges. All\r\nnodes u of the graph satisfy the following: Let S_u be the set of\r\nvertices in the longest simple cycle starting and ending at u. Let C_u\r\nbe the union of the sets of vertices in any simple cycle starting and\r\nending at u. S_u = C_u. You need to answer q queries.For each query, you\r\nwill be given node a and node b. Out of all the edges that belong to any\r\nsimple path from a to b, count the number of edges such that if you\r\nremove that edge, a and b are reachable from each other.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define ls u<<1\n#define rs u<<1|1\n#define mm(x) memset(x,0,sizeof(x))\nusing namespace std;\nint read()\n{\n  int a=0;int f=0;char p=getchar();\n  while(!isdigit(p)){f|=p=='-';p=getchar();}\n  while(isdigit(p)){a=(a<<3)+(a<<1)+(p^48);p=getchar();}\n  return f?-a:a;\n}\nconst int INF=998244353;\nconst int P=998244353;\nconst int N=1e6+5;\nint T;\nint n,m,q;\nvector<int >G1[N],G2[N];\nint ff[N];\nint dfn[N],low[N],cnt;\nint val[N];\nint sval[N];\nint sum;\nint t[N],top;\nvoid tarjan(int u)\n{\n  t[++top]=u;\n  dfn[u]=low[u]=++cnt;\n  for(auto v:G1[u])\n  {\n    if(!dfn[v])\n    {\n      tarjan(v);\n      low[u]=min(low[u],low[v]);\n      if(low[v]==dfn[u])\n      {\n        ++sum;\n        for(int x=0;x!=v;--top)\n        {\n          x=t[top];\n          G2[x].push_back(n+sum);\n          G2[n+sum].push_back(x);\n          //cout<<\"- \"<<n+sum<<\" \"<<x<<endl;\n        }\n        G2[u].push_back(n+sum);\n        G2[n+sum].push_back(u);\n        ff[n+sum]=u;\n        //cout<<\"- \"<<n+sum<<\" \"<<u<<endl;\n      }\n    }\n    else  low[u]=min(low[u],dfn[v]);\n  }\n}\nint bz[N][20];\nint dep[N];\nvoid dfs(int u,int fa)\n{\n  bz[u][0]=fa;  dep[u]=dep[fa]+1;\n  for(int k=1;k<20;++k) bz[u][k]=bz[bz[u][k-1]][k-1];\n  for(auto v:G2[u])\n  {\n    if(v==fa) continue;\n    dfs(v,u);\n  }\n}\nint lca(int x,int y)\n{\n  if(dep[x]<dep[y]) swap(x,y);\n  for(int k=19;k>=0;--k)\n    if(dep[bz[x][k]]>=dep[y]) x=bz[x][k];\n  if(x==y)  return x;\n  for(int k=19;k>=0;--k)\n    if(bz[x][k]!=bz[y][k])  x=bz[x][k],y=bz[y][k];\n  return bz[x][0];\n}\nvoid dfsv(int u,int fa,int S)\n{\n  S+=val[u];  sval[u]=S;\n  for(auto v:G2[u])\n  {\n    if(v==fa) continue;\n    dfsv(v,u,S);\n  }\n}\nint main()\n{\n  n=read(); m=read();\n  for(int i=1;i<=m;++i)\n  {\n    int x=read();\n    int y=read();\n    G1[x].push_back(y);\n    G1[y].push_back(x);\n  }\n  tarjan(1);\n  dfs(1,0);\n  for(int u=1;u<=n;++u)\n  {\n    for(auto v:G1[u])\n    {\n      int L=lca(u,v);\n      if(dep[u]+dep[v]==dep[L]+dep[L]+2)\n      {\n        int pos=L;\n        if(L==u)  pos=bz[v][0];\n        if(L==v)  pos=bz[u][0];\n        if(G2[pos].size()==2) continue;\n        val[pos]++;\n        //cout<<\"--- \"<<u<<\" \"<<v<<\" \"<<L<<\" \"<<pos<<\" \"<<endl;\n      }\n    }\n  }\n  dfsv(1,0,0);\n  q=read();\n  while(q--)\n  {\n    int x=read();\n    int y=read();\n    int z=lca(x,y);\n    printf(\"%d\\n\",(sval[x]+sval[y]-sval[z]-sval[z]+val[z])/2);\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dfs and similar",
        "dp",
        "dsu",
        "graphs",
        "trees"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Edge Queries.json",
    "editorial_link": "https://codeforces.com//blog/entry/110278",
    "editorial": "AnswerA graph with bridges connecting components with a hamiltonian\r\ncycle.\r\n"
}