{"link": "https://codeforces.com//contest/1937/problem/D", "problemId": "2503242", "problem_idx": "D", "shortId": "1937D", "contest_number": "1937", "problem_submissions": {"E": [250576191, 250576177, 248956893, 248968788, 248957297, 248966672, 249441680, 249396118, 248946403, 248968676, 250133778], "D": [248945664, 248934669, 248940205, 248942769, 248942389, 248945370, 250100307, 248949877, 248955428, 248958358, 248955920, 248959000, 248953793, 248954441, 248955304, 248954744, 248950479, 248956622], "C": [248925723, 248918003, 248945269, 248925093, 248927475, 248916202, 248925097, 248924482, 248928585, 248926397, 248923906, 248930862, 248927119, 248930899, 248930534, 249020336, 248929752, 248931403, 248935918, 248933256], "B": [248910702, 248909576, 248913624, 248915352, 248915231, 248904510, 248914972, 248915980, 248915024, 248914144, 248910066, 248915252, 248914074, 248914693, 248914679, 249015802, 248915248, 248914394, 248908476, 248910261], "A": [248903051, 248903069, 248903106, 248903549, 248904708, 248903046, 248903582, 248903569, 248903261, 248903372, 248905387, 248903521, 248905435, 248904180, 248904557, 248904753, 248904311, 248904712, 248903327], "F": [250203263]}, "name": "D. Pinball", "statement": "There is a one-dimensional grid of length n. The i-th cell of the grid\r\ncontains a character s_i, which is either \u201d or \u201d.When a pinball is\r\nplaced on one of the cells, it moves according to the following rules:\r\nIf the pinball is on the i-th cell and s_i is \u201d, the pinball moves one\r\ncell to the left in the next second. If s_i is \u201d, it moves one cell to\r\nthe right. After the pinball has moved, the character s_i is inverted\r\n(i. e. if s_i used to be \u201d, it becomes \u201d, and vice versa). The pinball\r\nstops moving when it leaves the grid: either from the left border or\r\nfrom the right one. You need to answer n queries. In the i-th query, a\r\npinball will be placed on the i-th cell. Note that we always place a\r\npinball on the initial grid.For each query, calculate how many seconds\r\nit takes the pinball to leave the grid. It can be shown that the pinball\r\nwill always leave the grid within a finite number of steps.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\n#define x first\n#define y second\n#define int long long\n#define mp(x, y) make_pair(x, y)\n#define eb(...) emplace_back(__VA_ARGS__)\n#define fro(i, x, y) for(int i = (x); i <= (y); i++)\n#define pre(i, x, y) for(int i = (x); i >= (y); i--)\ninline void JYFILE19();\n\ntypedef int64_t i64;\ntypedef pair<int, int> PII;\n\nbool ST;\nconst int N = 1e6 + 10;\n\nint n, m, a[N];\n\ninline void solve() {\n  cin >> n; string s; cin >> s;\n  fro(i, 1, n) {\n    if(s[i - 1] == '<') a[i] = 0;\n    if(s[i - 1] == '>') a[i] = 1;\n  }\n  vector<int> q2, q3;\n  auto ask1 = [&](int l, int r) {\n    if(l > r) return 0ll;\n    return q2[r] - (l ? q2[l - 1] : 0);\n  };\n  auto ask2 = [&](int l, int r) {\n    if(l > r) return 0ll;\n    return q3[r] - (l ? q3[l - 1] : 0);\n  };\n  fro(i, 1, n)\n    if(a[i] == 0) q3.push_back(i * 2);\n  for (int i = 1; i < q3.size(); i++) q3[i] += q3[i - 1];\n  for (int i = 1, it2 = 0, len = q3.size(); i <= n; i++) {\n    int ans = 0, it1 = q2.size(), le = len - it2;\n    if(a[i] == 1) {\n    // cout << i << \" \" << it1 << \" \" << it2 << \" \" << len << \" \" << le << endl;\n      if(it1 < le) {\n        ans += i - 0;\n        if(it1) ans += 2 * i * it1 - q2[it1 - 1];\n        ans += ask2(it2, it2 + it1) - 2 * i * (it1 + 1);\n        // cout << \" :: \" << ask2(it2, it2 + it1) << \"\\n\";\n      }\n      else {\n        ans += n + 1 - i;\n        ans += 2 * i * le - ask1(it1 - le, it1 - 1);\n        ans += ask2(it2, len - 1) - 2 * i * le;\n      }\n      q2.eb(i * 2);\n      if(it1) q2.back() += q2[it1 - 1];\n    }\n    else {\n      it2++, le--;\n      if(it1 > le) {\n        ans += n + 1 - i;\n        ans += 2 * i * (le + 1) - ask1(it1 - le - 1, it1 - 1);\n        ans += ask2(it2, len - 1) - 2 * i * le;\n      }\n      else {\n        ans += i - 0;\n        if(it1) ans += 2 * i * it1 - q2[it1 - 1];\n        ans += ask2(it2, it2 + it1 - 1) - 2 * i * it1;\n      }\n    }\n    cout << ans << \" \";\n  }\n  cout << \"\\n\";\n  fill(a + 1, a + n + 1, 0);\n}\n\nsigned main() {\n  JYFILE19();\n  int t; cin >> t;\n  while(t--) solve();\n  return 0;\n}\nbool ED;\ninline void JYFILE19() {\n  // freopen(\"\", \"r\", stdin);\n  // freopen(\"\", \"w\", stdout);\n  ios::sync_with_stdio(0), cin.tie(0);\n  double MIB = fabs((&ED-&ST)/1048576.), LIM = 125;\n  cerr << \"MEMORY: \" << MIB << endl, assert(MIB<=LIM);\n}"], "input": "", "output": "", "tags": ["binary search", "data structures", "implementation", "two pointers"], "dificulty": "2000", "interactive": false}