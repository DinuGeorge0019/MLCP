{
    "link": "https://codeforces.com//contest/1111/problem/C",
    "problemId": "292519",
    "problem_idx": "C",
    "shortId": "1111C",
    "contest_number": "1111",
    "problem_submissions": {
        "D": [
            49422912,
            49426608,
            49445983,
            49428765,
            49430406,
            49429665,
            49436958
        ],
        "C": [
            49409497,
            49410558,
            49410163,
            49418920,
            49410172,
            49413606,
            49411915,
            49417203,
            49413501,
            49413738,
            49417020,
            49443919,
            49443886,
            49417049,
            49414103,
            49415090,
            49412459,
            49414253,
            49415380,
            49421248,
            49439899,
            49413981
        ],
        "B": [
            49406849,
            49405440,
            49407099,
            49408763,
            49406563,
            49408463,
            49406490,
            49408964,
            49408646,
            49408980,
            49405550,
            49418102,
            49454731,
            49438417,
            49408744,
            49409042,
            49407957,
            49421603,
            49407686,
            49409374,
            49409345
        ],
        "A": [
            49402871,
            49402831,
            49403748,
            49403927,
            49403205,
            49402975,
            49402985,
            49410269,
            49405415,
            49404207,
            49402972,
            49402894,
            49402944,
            49404497,
            49403455,
            49404512,
            49404416,
            49403696,
            49403984
        ],
        "E": [
            49501912
        ]
    },
    "name": "C. Creative Snap",
    "statement": "Thanos wants to destroy the avengers base, but he needs to destroy the\r\navengers along with their base.Let we represent their base with an\r\narray, where each position can be occupied by many avengers, but one\r\navenger can occupy only one position. Length of their base is a perfect\r\npower of 2. Thanos wants to destroy the base using minimum power. He\r\nstarts with the whole base and in one step he can do either of\r\nfollowing: if the current length is at least 2, divide the base into 2\r\nequal halves and destroy them separately, or burn the current base. If\r\nit contains no avenger in it, it takes A amount of power, otherwise it\r\ntakes his B\r\ncdot n_a\r\ncdot l amount of power, where n_a is the number of avengers and l is the\r\nlength of the current base. Output the minimum power needed by Thanos to\r\ndestroy the avengers\u2019 base.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n \n#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n#define endl \"\\n\"\n#define ll long long\n\nint n, k, a, b;\n\nll dfs(int l, int r, vector<int> &c) {\n\tif(!c.size()) {\n\t\treturn a;\n\t}\n\tll a1=(ll)b*(r-l+1)*c.size();\n\tif(l<r) {\n\t\tint m=(l+r)/2;\n\t\tvector<int> d, e;\n\t\tfor(int ci : c) {\n\t\t\tif(ci<=m)\n\t\t\t\td.push_back(ci);\n\t\t\telse\n\t\t\t\te.push_back(ci);\n\t\t}\n\t\ta1=min(dfs(l, m, d)+dfs(m+1, r, e), a1);\n\t}\n\treturn a1;\n}\n\nint32_t main()\n{\n\tIOS;\n\tcin >> n >> k >> a >> b;\n\tvector<int> c(k);\n\tfor(int i=0; i<k; ++i)\n\t\tcin >> c[i], --c[i];\n\tcout << dfs(0, (1<<n)-1, c);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "divide and conquer",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Creative Snap.json",
    "editorial_link": "https://codeforces.com//blog/entry/64989",
    "editorial": "Make a recursive function rec() where l and r are start and end indexes\r\nof subarray to be considered. Start with and . If there is no avenger in\r\nl to r return A (power consumed). Else either power consumed to burn it\r\ndirectly is (where x is number of avengers in l to r and len is length\r\nof array () ) or by dividing the array is the result of recursion() +\r\nrecursion() where . Return the minimum power consumed. If l is equal to\r\nr then do not go into recursion further, return power consumed according\r\nto first operation. One thing is remaining, the value of x, given l and\r\nr. Sort the array containing indices of avengers and then find positions\r\nof l and r in that array using binary search. Difference is positions of\r\nl and r in array will give x. Time Complexity : . Explanation : Reaching\r\nany subarray will take maximum of n operations and we can have maximum k\r\nsubarrays (each having one avenger), it will take . time needed for\r\nbinary search (calculating x). So net complexity is .\r\n"
}