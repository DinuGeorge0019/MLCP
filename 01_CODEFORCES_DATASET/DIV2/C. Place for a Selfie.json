{
    "link": "https://codeforces.com//contest/1805/problem/C",
    "problemId": "1861353",
    "problem_idx": "C",
    "shortId": "1805C",
    "contest_number": "1805",
    "problem_submissions": {
        "F1": [
            200439106,
            200443524,
            200424069,
            200446588,
            200467490,
            200437348,
            200464508,
            200464351,
            200463340,
            209038123,
            200557576,
            200463298
        ],
        "C": [
            200413348,
            200408313,
            200430286,
            200414727,
            200402344,
            200408784,
            200395896,
            200428904,
            200404720,
            200402863,
            200404086,
            200425916,
            200413389,
            200409508,
            200408670,
            200409948,
            200401611,
            200399297,
            200403669
        ],
        "B": [
            200409525,
            200389992,
            200432442,
            200395023,
            200391231,
            200403848,
            200389421,
            200391233,
            200390818,
            200392560,
            200392816,
            200391784,
            200391655,
            200392657,
            200391007,
            200395691,
            200393122,
            200390776,
            200392459
        ],
        "A": [
            200408080,
            200387988,
            200433504,
            200390983,
            200388843,
            200402551,
            200387906,
            200388117,
            200387935,
            200388566,
            200388387,
            200388650,
            200388558,
            200388007,
            200388011,
            200389948,
            200389103,
            200388194,
            200388689
        ],
        "D": [
            200406761,
            200528793,
            200401484,
            200399149,
            200420505,
            200419712,
            200416986,
            200406203,
            200414310,
            200416697,
            200410720,
            200413945,
            200420475,
            200409512,
            200419982,
            200414162,
            200411839,
            200411433,
            200405601,
            200415016
        ],
        "E": [
            200397032,
            200427084,
            200411961,
            200433750,
            200593267,
            200592726,
            200467387,
            200400294,
            200428962,
            200409350,
            200426292,
            200428409,
            200434434,
            200414709,
            200432234,
            214976359,
            200427846,
            200430477,
            200431439,
            200435575,
            200437915,
            200434896
        ],
        "F2": [
            200479147,
            200478731,
            200478432,
            200478085,
            200477991,
            200477963,
            200476470,
            200447442,
            209038798
        ]
    },
    "name": "C. Place for a Selfie",
    "statement": "The universe is a coordinate plane. There are n space highways, each of\r\nwhich is a straight line y=kx passing through the origin (0, 0). Also,\r\nthere are m asteroid belts on the plane, which we represent as open\r\nupwards parabolas, i. e. graphs of functions y=ax^2+bx+c, where a >\r\n0.You want to photograph each parabola. To do this, for each parabola\r\nyou need to choose a line that does not intersect this parabola and does\r\nnot touch it. You can select the same line for different parabolas.\r\nPlease find such a line for each parabola, or determine that there is no\r\nsuch line.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define DEBUG\n#define int long long\n#define y1 vbjksfvnbhjaukjliksfmgnj\nconstexpr int inf=1000000007;\nconstexpr long long INF=4000000000000000000;\n//constexpr long long mod=1000000007;\nconstexpr double eps=1e-9;\ninline void YORN(bool f)\n{\n\tif(f)\n\t\tputs(\"YES\");\n\telse\n\t\tputs(\"NO\");\n}\ninline void yorn(bool f)\n{\n\tif(f)\n\t\tputs(\"yes\");\n\telse\n\t\tputs(\"no\");\n}\ninline void Yorn(bool f)\n{\n\tif(f)\n\t\tputs(\"Yes\");\n\telse\n\t\tputs(\"No\");\n}\ninline void judgeoutput(bool f,string s1,string s2)\n{\n\tif(f)\n\t\tcout<<s1<<endl;\n\telse\n\t\tcout<<s2<<endl;\n}\nconstexpr int ___S1=1<<20;\nchar ___buf1[___S1],*___l1,*___r1;\n#define getchar() ((___l1==___r1&&(___r1=(___l1=___buf1)+fread(___buf1,1,___S1,stdin)),___l1!=___r1)?*___l1++:EOF)\ntemplate<typename T=int>inline T read()\n{\n\tT x=0,y=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')\n\t\t\ty=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x*y;\n}\nconstexpr int ___S2=1<<20;\nchar ___buf2[___S2],*___l2=___buf2,*___r2=___buf2+___S2;\n#define putchar(c) (___l2==___r2&&(fwrite(___buf2,1,___S2,stdout),___r2=(___l2=___buf2)+___S2),*___l2++=(c))\nint ___st[22];\ntemplate<typename T>inline void write(T x)\n{\n\tif(x<0)\n\t\tputchar('-'),x=-x;\n\tint tp=0;\n\tdo\n\t\t___st[++tp]=x%10,x/=10;\n\twhile(x);\n\twhile(tp)\n\t\tputchar(___st[tp--]+'0');\n//\tputchar('\\n');\n}\ninline void fre()\n{\n\tfreopen(\".in\",\"r\",stdin);\n\tfreopen(\".out\",\"w\",stdout);\n}\nint k[100005];\nvoid work()\n{\n\tint n,m;\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\t\tcin>>k[i];\n\tsort(k+1,k+n+1);\n\twhile(m--)\n\t{\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\tint p=lower_bound(k+1,k+n+1,b)-k,k=::k[p];\n\t\tif(p<=n&&(b-k)*(b-k)-4*a*c<0)\n\t\t\tcout<<\"Yes\\n\"<<k<<endl;\n\t\telse\n\t\t{\n\t\t\tp--,k=::k[p];\n\t\t\tif(p&&(b-k)*(b-k)-4*a*c<0)\n\t\t\t\tcout<<\"Yes\\n\"<<k<<endl;\n\t\t\telse\n\t\t\t\tcout<<\"NO\"<<endl;\n\t\t}\n\t}\n\tcout<<endl;\n}\ninline void cases()\n{\n\tint T;\n\tcin>>T;\n\twhile(T--)\n\t\twork();\n}\nsigned main()\n{\n//\tfre();\n\tcases();\n//\twork();\n\tfwrite(___buf2,1,___l2-___buf2,stdout);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "geometry",
        "math"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Place for a Selfie.json",
    "editorial_link": "https://codeforces.com//blog/entry/114644",
    "editorial": "Let\u00e2\u0080\u0099s find the answers for the parabolas one at a time. Suppose we are\r\ngiven a parabola and a line . Then their difference is the parabola . In\r\norder for the line and the parabola not to intersect, the difference\r\nmust never equal , that is, the parabola must have no roots. And this is\r\ntrue only when the discriminant is less than , that is, . In this case,\r\nand are given to us, and we need to choose . .Now let us have a list of\r\nstraight line coefficients sorted in increasing order. We need to check\r\nif there is a coefficient that belongs to . To do this, check the\r\nsmallest number greater than , and the largest number less than . If one\r\nof these numbers satisfies the condition, then we have found the answer.\r\nIf not, then there are definitely no suitable coefficients, because we\r\ntook closest coefficients to the center of the segment.Note that in this\r\nsolution, we don\u00e2\u0080\u0099t need to use non-integer numbers, which is good for\r\nboth the time and the absence of errors due to precision.\r\n"
}