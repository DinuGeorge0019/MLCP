{
    "link": "https://codeforces.com//contest/811/problem/C",
    "problemId": "107531",
    "problem_idx": "C",
    "shortId": "811C",
    "contest_number": "811",
    "problem_submissions": {
        "E": [
            27384705,
            106269730,
            27384523,
            27384734,
            27377479,
            27382245,
            27387921,
            27385994,
            27378312,
            27417485,
            27383230,
            27385468,
            27379502,
            27382190,
            27381400,
            27383006
        ],
        "D": [
            27379365,
            27381500,
            27381222,
            27386537,
            27382445,
            27381225,
            27382121,
            27382035,
            27384111,
            27380209,
            27384960,
            27386244,
            27384575,
            27385712,
            27381029,
            27382189,
            27383952
        ],
        "C": [
            27375763,
            27376427,
            27377289,
            27382636,
            27375842,
            27378042,
            27373086,
            27379255,
            27377375,
            27374603,
            27380152,
            27380818,
            27378127,
            27376964,
            27376298,
            27380327,
            27375518,
            27379100,
            27378177,
            27379352
        ],
        "B": [
            27372900,
            27372650,
            27375003,
            27380196,
            27375149,
            27373634,
            27384935,
            27374432,
            27374563,
            27374805,
            27389142,
            27372946,
            27375127,
            27378423,
            27372846,
            27373956,
            27374358
        ],
        "A": [
            27371146,
            27371406,
            27372004,
            27371481,
            27372708,
            27371377,
            27372619,
            27371210,
            27371813,
            27371396,
            27371888,
            27371519,
            27371189,
            27371592,
            27371623,
            27372374,
            27385878,
            27371337,
            27371714,
            27372067
        ]
    },
    "name": "C. Vladik and Memorable Trip",
    "statement": "Vladik often travels by trains. He remembered some of his trips\r\nespecially well and I would like to tell you about one of these\r\ntrips:Vladik is at initial train station, and now people (including\r\nVladik) want to get on the train. They are already lined up in some\r\norder, and for each of them the city code is known (the code of the city\r\nin which they are going to).Train chief selects some number of disjoint\r\nsegments of the original sequence of people (covering entire sequence by\r\nsegments is ). People who are in the same segment will be in the same\r\ntrain carriage. The segments are selected in such way that if at least\r\none person travels to the city , then all people who are going to city\r\nshould be in the same railway carriage. This means that they can t\r\nbelong to different segments. Note, that all people who travel to the\r\ncity , either go to it and in the same railway carriage, or do not go\r\nanywhere at all.Comfort of a train trip with people on segment from\r\nposition to position is equal to of all distinct codes of cities for\r\npeople on the segment from position to position . operation also known\r\nas exclusive .Total comfort of a train trip is equal to sum of comfort\r\nfor each segment.Help Vladik to know maximal possible total comfort.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define rep(i,j,k) for((i)=(j);(i)<=(k);++i)\n#define per(i,j,k) for((i)=(j);(i)>=(k);--i)\nusing namespace std;\ntypedef long long ll;\ninline void cmin(int &x,int y){if(y<x)x=y;}\ninline void cmax(int &x,int y){if(y>x)x=y;}\nconst int N = 1000006;\nint a[N],fir[N],last[N],dp[N],vis[N],sum,n,i,j,now;\nint inline read(){\n\tchar ch=getchar();int z=0,f=1;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){z=z*10+ch-'0';ch=getchar();}\n\treturn z*f;\n}\nint main(){\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tn=read();rep(i,1,n)a[i]=read();\n\trep(i,1,n){\n\t\tif(!fir[a[i]]) fir[a[i]] = i;\n\t\tlast[a[i]] = i;\n\t}\n\trep(i,1,n)\n\t\tif(last[a[i]] != i) dp[i] = dp[i - 1];\n\t\telse{\n\t\t\tdp[i] = dp[i - 1];\n\t\t\trep(j,0,5000) vis[j] = 0;\n\t\t\tnow = i; bool fl = 1; sum = 0;\n\t\t\tper(j,i,1){\n\t\t\t\tif(!vis[a[j]]){\n\t\t\t\t\tif(last[a[j]] != j){fl = 0; break;}\n\t\t\t\t\tvis[a[j]] = 1;\n\t\t\t\t\tcmin(now , fir[a[j]]);\n\t\t\t\t\tsum ^= a[j];\n\t\t\t\t}\n\t\t\t\tif(j == now) break;\n\t\t\t}\n\t\t\tif(fl) cmax(dp[i] , dp[now - 1] + sum);\n\t\t}\n\tprintf(\"%d\\n\",dp[n]);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "implementation"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Vladik and Memorable Trip.json",
    "editorial_link": "https://codeforces.com//blog/entry/52228",
    "editorial": "Let\u00e2\u0080\u0099s precalc for each it\u00e2\u0080\u0099s and it\u00e2\u0080\u0099s leftmost and rightmost occurrences\r\nin the array respectively. Now for each range we can check, if it can be\r\na separate train carriage, just checking for each , that and are also in\r\nthis range.Now let\u00e2\u0080\u0099s define as the answer to the problem for first\r\npeople. To update we can make two transitions: Assume, that there was\r\nsuch train carriage, that finished at position . Then iterate it\u00e2\u0080\u0099s start\r\nfrom right to left, also maintaining maximal , minimal and xor of\r\ndistinct codes . If current range is ok for forming the train carriage,\r\nupdate with value . If there wasn\u00e2\u0080\u0099t such train carriage, then last\r\nelement didn\u00e2\u0080\u0099t belong to any train carriage, so we can update with value\r\n.\r\n"
}