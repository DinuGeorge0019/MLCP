{"link": "https://codeforces.com//contest/1395/problem/F", "problemId": "697394", "problem_idx": "F", "shortId": "1395F", "contest_number": "1395", "problem_submissions": {"E": [89703350, 89708810, 89714112, 89712317, 89710869, 89721292, 89717279, 89724356, 89790658, 89720352, 89754109, 89972468, 89742493], "D": [89680583, 89688575, 89687431, 89686132, 89714959, 89699868, 89694770, 89698961, 89690630, 89691297, 89679330, 89689190, 89686103, 89687862, 89691233, 89685139, 89691247, 89695821, 89694043, 89690135], "C": [89667862, 89671025, 89670163, 89676747, 89709040, 89680699, 89672427, 89678496, 89680762, 89680781, 89671144, 89671940, 89675222, 89675842, 89668159, 89667746, 89679969, 89674140, 89676822, 89680839], "B": [89662013, 89665422, 89664182, 89669305, 89705735, 89669721, 89665457, 89671085, 89672065, 89669758, 89663771, 89663206, 89664323, 89667048, 89663548, 89692219, 89670175, 89666811, 89668290, 89675614], "A": [89659448, 89659999, 89659595, 89659674, 89701947, 89663005, 89660051, 89663077, 89666442, 89661809, 89659697, 89659449, 89659558, 89661691, 89659464, 89660991, 89660634, 89661384, 89662258, 89660765], "F": [89730004, 89698501, 89836189, 89729687]}, "name": "F. Boboniu and String", "statement": "Boboniu defines as a string s of characters \u2019B\u2019 and \u2019N\u2019.You can perform\r\nthe following operations on the BN-string s: Remove a character of s.\r\nRemove a substring \"\" or \"\" of s. Add a character \u2019B\u2019 or \u2019N\u2019 to the end\r\nof s. Add a string \"\" or \"\" to the end of s. Note that a string a is a\r\nof a string b if a can be obtained from b by deletion of several\r\n(possibly, zero or all) characters from the beginning and several\r\n(possibly, zero or all) characters from the end.Boboniu thinks that\r\nBN-strings s and t are if and only if: |s|=|t|. There exists a\r\npermutation p_1, p_2,\r\nldots, p_{|s|} such that for all i (1\r\nle i\r\nle |s|), s_{p_i}=t_i. Boboniu also defines\r\ntext{dist}(s,t), the between s and t, as the minimum number of\r\noperations that makes s to t.Now Boboniu gives you n non-empty\r\nBN-strings s_1,s_2,\r\nldots, s_n and asks you to find a BN-string t such that the maximum\r\ndistance to string s is minimized, i.e. you need to minimize\r\nmax_{i=1}^n\r\ntext{dist}(s_i,t).\r\n", "solutions": ["#include<set>\n#include<cstdio>\n#include<vector>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a;i<=b;++i)\n#define PII pair<int,int>\nconst int N=5e5+5,inf=1e9+7;\nusing namespace std;\nchar s[N];\nbool flag;\nint n,ansa,ansb,a[N],b[N];\nint Ll,Lr,Rl,Rr;\nstruct node{int a,b;}c[N];\nbool cmp(node a,node b){return a.a<b.a;}\nvoid putll(node a,int val,int mid){\n\tint x=a.b-mid;\n\tLl=max(Ll,x);\n}\nvoid putlr(node a,int val,int mid){\n\tint x=a.b+mid-a.a;\n\tLr=min(Lr,x);\n}\nvoid putrl(node a,int val,int mid){\n\tint x=a.b-mid-a.a;\n\tRl=max(Rl,x);\n}\nvoid putrr(node a,int val,int mid){\n\tint x=a.b+mid;\n\tRr=min(Rr,x);\n}\nvoid update(int i){\n\tint l=0,r=inf;\n\tl=max(l,Ll);\n\tl=max(l,Rl+i);\n\tr=min(r,Lr+i);\n\tr=min(r,Rr);\n\tif(l<=r&&(i+r)>0){flag=true;ansa=i;ansb=r;}\n}\nbool chk(int k){\n\tLl=-inf,Rl=-inf,Lr=inf,Rr=inf;\n\tint lx=0,rx=inf;\n\trep(i,1,n)c[i].a=a[i],c[i].b=b[i];\n\trep(i,1,n)lx=max(lx,c[i].a-k),rx=min(rx,c[i].a+k);\n\tsort(c+1,c+n+1,cmp);\n\trep(i,1,n)putll(c[i],1,k),putlr(c[i],1,k);\n\tint top=1;\n\tflag=false;\n\trep(i,lx,rx){\n\t\tfor(;top<=n&&c[top].a<=i;++top)\n\t\t\tputrl(c[top],1,k),putrr(c[top],1,k);\n\t\tupdate(i);\n\t}\n\treturn flag;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tint mxa=0,mxb=0;\n\trep(i,1,n){\n\t\tscanf(\"%s\",s+1);\n\t\tint sz=strlen(s+1);\n\t\ta[i]=b[i]=0;\n\t\trep(j,1,sz)if(s[j]=='N')++a[i];else ++b[i];\n\t\tmxa=max(mxa,a[i]);mxb=max(mxb,b[i]);\n\t}\n\tint res=inf,l=0,r=mxa+mxb;\n\tfor(;l<=r;){\n\t\tint mid=(l+r)/2;\n\t\tif(chk(mid))res=mid,r=mid-1;else l=mid+1;\n\t}\n\tprintf(\"%d\\n\",res);\n\trep(i,1,ansa)putchar('N');rep(i,1,ansb)putchar('B');puts(\"\");\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["binary search", "geometry", "strings"], "dificulty": "2600", "interactive": false}