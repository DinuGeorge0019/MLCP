{
    "link": "https://codeforces.com//contest/374/problem/D",
    "problemId": "4193",
    "problem_idx": "D",
    "shortId": "374D",
    "contest_number": "374",
    "problem_submissions": {
        "A": [
            5465863,
            5461833,
            5466158,
            5464911,
            5466997,
            5469706,
            5473574,
            5469853,
            5468623,
            5465633,
            5469265,
            5462265
        ],
        "D": [
            5462696,
            5467904,
            5464786,
            5464934,
            5468604,
            5465912,
            5467230,
            5466682,
            5468095,
            5465960,
            5466161
        ],
        "B": [
            5468995,
            5469225,
            5467607,
            5470212,
            5468275,
            5468375,
            5461857,
            5462807,
            5463190,
            5462540,
            5462778,
            5463491,
            5467629
        ],
        "C": [
            5466406,
            5463399,
            5462344,
            5464302,
            5463648,
            5464974,
            5464693,
            5465386,
            5470035,
            5465614,
            5465245,
            5466097,
            5466366
        ],
        "E": [
            5470049,
            5469975
        ]
    },
    "name": "D. Inna and Sequence ",
    "statement": "Dima\u2019s spent much time thinking what present to give to Inna and gave\r\nher an empty sequence . Now they want to fill sequence with numbers zero\r\nand one. For that, they decided to play an amusing game. Before the game\r\nbegins, Dima chooses integers . Then Inna and Dima start playing, that\r\nis, adding numbers to sequence . Each new number they choose is added to\r\nthe end of the sequence. At some moments of time Dima feels that the\r\ngame is going to end too soon (and he wants to play with Inna as long as\r\npossible), so he hits a table hard with his fist. At that the -th, -th,\r\n-th, , -th numbers from the beginning simultaneously fall out of the\r\nsequence (the sequence gets numbers less). Here is such maximum number\r\nthat value doesn\u2019t exceed the current length of the sequence. If number\r\nis larger than the current length of , then nothing falls out of the\r\nsequence.You are given the chronological sequence of events in the game.\r\nEach event is either adding a number to the end of sequence or Dima\u2019s\r\nhit on the table. Calculate the sequence after all these events happen.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <utility>\n#include <set>\n#include <map>\n\n#define reset(a , b) memset(a , b , sizeof(a))\n\nusing namespace std;\n\nconst int INF = 1000000007;\nconst int N = 5001000;\n\nint l[N] , h[N] , leaf[N] , node[N] , a[N] , cur;\nint  n , m , cmd[N] , nb , b[N];\n\nvoid build(int r , int low , int high ){\n    l[r] = low; h[r] = high;\n    if (low == high) {\n        leaf[low] = r;\n        return;\n    }\n    int mid = (low + high) / 2;\n    build(r*2,low,mid);\n    build(r*2+1,mid+1,high);\n}\n\nvoid update(int i , int val) {\n    i = leaf[i];\n    node[i] = val;\n    while (i > 1){\n        i /= 2;\n        node[i] = node[i * 2] + node[i * 2 + 1];\n    }\n}\n\nint Find(int r , int val) {\n    if (l[r] == h[r]) return l[r];\n    if (node[r*2] >= val)\n        return Find(r*2 , val);\n    else\n        return Find(r * 2 + 1 , val - node[r*2]);\n}\n\nint main() {\n    //freopen(\"input.in\" , \"r\" , stdin);\n    //freopen(\"output.out\" , \"w\" , stdout);\n\n    cin >> m >> n;\n    for (int i = 1 ; i <= n ; i++)\n        scanf(\"%d\" , &a[i]);\n    build(1 , 1 , 1000001);\n\n    for (int i = 1 ; i <= m ; i++){\n        scanf(\"%d\" , &cmd[i]);\n        if (cmd[i] == 1 || cmd[i] == 0)\n            update(i , 1),cur++;\n\n        if (cmd[i] == -1){\n            nb = 0;\n            for (int j = 1 ; j <= n ; j++){\n                if (a[j] > cur) break;\n                b[++nb] = Find(1 , a[j]);\n                //update(id , 0);\n            }\n            for (int j = 1 ; j <= nb ; j++)\n                update(b[j] , 0);\n            cur -= nb;\n        }\n    }\n    bool OK = true;\n    for (int i = 1 ; i <= m ; i++){\n        int j = leaf[i];\n        if (node[j] != 0){\n            printf(\"%d\", cmd[i]);\n            OK = false;\n        }\n    }\n    if (OK) {\n        cout << \"Poor stack!\" << endl;\n        return 0;\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "dp",
        "trees"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Inna and Sequence .json",
    "editorial_link": "https://codeforces.com//blog/entry/10018",
    "editorial": "Lets note that not more than numbers, thus it will be not more than\r\ndropings. We will run this process using data structure Segment Tree\r\n(you can use another structures). Lets calculate the number of numbers\r\nin current segment. When the number is added we should simply go down\r\nfrom the root to the leaf and increase value for each segment on the way\r\nby 1. Deletetion vice versa. If there is enough numbers in the left\r\nsubtree we should go into the right one, othervise into the left one.\r\nDon\u00e2\u0080\u0099t forget to shift the position by decreasing on as all numbers are\r\ndroped immidiately. And don\u00e2\u0080\u0099t forget to break the cycle as soon as you\r\nreach first such that there is no number to be droped out from it.\r\n"
}