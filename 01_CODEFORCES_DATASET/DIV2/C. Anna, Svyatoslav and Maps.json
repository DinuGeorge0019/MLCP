{"link": "https://codeforces.com//contest/1204/problem/C", "problemId": "392653", "problem_idx": "C", "shortId": "1204C", "contest_number": "1204", "problem_submissions": {"D2": [59171473, 59176959, 59165503, 59172424, 59176173, 59167492, 59164905, 59176155, 59178992, 59169931, 59176960, 59169864, 59178242, 59178029, 59169582, 59172809, 59169123, 59168999, 59171305, 59170057], "D1": [59169891, 59176544, 59165271, 59172261, 59176126, 59167259, 59164656, 59176100, 59163490, 59168508, 59176724, 59170026, 59178274, 59177894, 59169407, 59172673, 59169296, 59168747, 59167871, 59169828], "E": [59165621, 59159508, 59171204, 59167827, 59161848, 59176920, 59177089, 59166777, 59176127, 59177175, 59172161, 59177722, 59170117, 59171712, 59177233, 59179201, 59180220, 59178891, 59180477, 59178723], "C": [59151501, 59163669, 59158012, 59149471, 59166332, 59152299, 59160440, 59156718, 59160290, 59156826, 59162942, 59160646, 59158205, 59161710, 59162530, 59157292, 59158762, 59160352, 59157314, 59162180], "B": [59144349, 59150576, 59146764, 59144554, 59146379, 59145028, 59149730, 59146608, 59146122, 59145946, 59147391, 59146291, 59146819, 59146767, 59151379, 59145774, 59147183, 59147977, 59149695, 59149226], "A": [59141665, 59142146, 59141563, 59142710, 59143581, 59145777, 59144224, 59142379, 59143868, 59142387, 59143522, 59143089, 59147328, 59153631, 59142559, 59141790, 59142894, 59147085, 59146105]}, "name": "C. Anna, Svyatoslav and Maps", "statement": "You are given a directed unweighted graph without loops with n vertexes\r\nand a path in it (that path is not necessary simple) given by a sequence\r\np_1, p_2,\r\nldots, p_m of m vertexes; for each 1\r\nleq i < m there is an arc from p_i to p_{i+1}.Define the sequence v_1,\r\nv_2,\r\nldots, v_k of k vertexes as , if v is a subsequence of p, v_1 = p_1, v_k\r\n= p_m, and p is one of the shortest paths passing through the vertexes\r\nv_1,\r\nldots, v_k in that order.A sequence a is a subsequence of a sequence b\r\nif a can be obtained from b by deletion of several (possibly, zero or\r\nall) elements. It is obvious that the sequence p is good but your task\r\nis to find the good subsequence.If there are multiple shortest good\r\nsubsequences, output any of them.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nint n;\nbool board[102][102];\nint dist[102][102];\nint k;\nint arr[1000002];\nint DP[1000002];\nint mark[102];\nint recent[1000002];\n\nvoid track(int x){\n    if(!x) return;\n    track(recent[x]);\n    printf(\"%d \", arr[x]);\n}\n\nint main(){\n    scanf(\"%d\", &n);\n    for(int i=1; i<=n; i++){\n        for(int j=1; j<=n; j++){\n            scanf(\"%1d\", &board[i][j]);\n            dist[i][j] = board[i][j];\n            if(!board[i][j]) dist[i][j] = 1000;\n        }\n    }\n\n    for(int i=1; i<=n; i++){\n        for(int j=1; j<=n; j++){\n            for(int k=1; k<=n; k++){\n                if(dist[k][j] > dist[k][i] + dist[i][j] && dist[k][i] != 1000 && dist[i][j] != 1000){\n                    dist[k][j] = dist[k][i] + dist[i][j];\n                }\n            }\n        }\n    }\n\n    scanf(\"%d\", &k);\n    for(int i=1; i<=k; i++) scanf(\"%d\", &arr[i]), DP[i] = 1e6+2;\n\n    DP[1] = 1;\n    for(int i=1; i<=k; i++){\n        for(int j=1; j<=n; j++){\n            if(arr[i] == j) continue;\n            if(!mark[j]) continue;\n            if(dist[j][arr[i]] == 1000 || dist[j][arr[i]] < i-mark[j]) continue;\n            if(DP[i] > DP[mark[j]]+1){\n                DP[i] = DP[mark[j]]+1;\n                recent[i] = mark[j];\n            }\n        }\n//        printf(\"%d: %d\\n\", i, DP[i]);\n        mark[arr[i]] = i;\n    }\n\n    printf(\"%d\\n\", DP[k]);\n    track(k);\n}\n"], "input": "", "output": "", "tags": ["dp", "graphs", "greedy", "shortest paths"], "dificulty": "1700", "interactive": false}