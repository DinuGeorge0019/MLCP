{
    "link": "https://codeforces.com//contest/448/problem/D",
    "problemId": "11519",
    "problem_idx": "D",
    "shortId": "448D",
    "contest_number": "448",
    "problem_submissions": {
        "B": [
            7132360,
            7126812,
            7131705,
            7128126,
            7126975,
            7130368,
            7133849,
            7126556,
            7137379,
            7128333,
            7127308,
            7138326,
            7127246,
            7126908,
            7126783,
            7127446,
            7129637
        ],
        "A": [
            7131281,
            7124641,
            7124604,
            7125918,
            7124627,
            7138197,
            7130895,
            7124806,
            7126069,
            7130700,
            7124540,
            7137566,
            7124981,
            7125197,
            7124518,
            7124798,
            7124709
        ],
        "E": [
            7130571,
            7134588,
            7144432,
            7133164,
            7135434,
            7135739,
            7134555,
            7135492,
            7137501,
            7137792,
            7136520,
            7138444,
            7137089,
            7135078,
            7144128,
            7138750
        ],
        "C": [
            7127523,
            7128095,
            7131570,
            7129889,
            7129858,
            7136406,
            7126752,
            7135156,
            7136170,
            7132158,
            7130231,
            7128623,
            7134636,
            7130788,
            7130040,
            7131300,
            7133349,
            7129026
        ],
        "D": [
            7125339,
            7129364,
            7128228,
            7132669,
            7131873,
            7129212,
            7129065,
            7128867,
            7128240,
            7130235,
            7125766,
            7129601,
            7132488,
            7131074,
            7132807,
            7131262,
            7131953,
            7129050,
            7133299
        ]
    },
    "name": "D. Multiplication Table",
    "statement": "Bizon the Champion isnâ€™t just charming, he also is very smart.While some\r\nof us were learning the multiplication table, Bizon the Champion had fun\r\nin his own manner. Bizon the Champion painted an multiplication table,\r\nwhere the element on the intersection of the -th row and -th column\r\nequals (the rows and columns of the table are numbered starting from 1).\r\nThen he was asked: what number in the table is the -th largest number?\r\nBizon the Champion always answered correctly and immediately. Can you\r\nrepeat his success?Consider the given multiplication table. If you write\r\nout all numbers from the table in the non-decreasing order, then the -th\r\nnumber you write out is called the -th largest number.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#define N 500010\n#define int64 long long\n#define For(i,x,y) for (i=x;i<=y;i++)\nusing namespace std;\nint i,j,k,n,m;\nint64 K;\ninline bool ju(int64 x) {\n\tint i;\n\tint64 s=0;\n\tFor(i,1,n) s+=min(0ll+m,x/i);\n\treturn s>=K;\n}\nint main() {\n\tscanf(\"%d%d%I64d\",&n,&m,&K);\n\tint64 l=1,r=1ll*n*m,mid;\n\tfor (;l<=r;) {\n\t\tmid=(l+r)/2;\n\t\tif (ju(mid)) r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%I64d\\n\",r+1);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Multiplication Table.json",
    "editorial_link": "https://codeforces.com//blog/entry/13042",
    "editorial": "Solution is binary search by answer. We need to find\nlargest such that amount of numbers from table, least than , is strictly\nless than . To calculate this count we sum counts from rows. In th row\nthere will be . Total complexity is .\n",
    "hint": []
}