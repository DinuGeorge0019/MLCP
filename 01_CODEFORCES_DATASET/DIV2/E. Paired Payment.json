{"link": "https://codeforces.com//contest/1486/problem/E", "problemId": "897794", "problem_idx": "E", "shortId": "1486E", "contest_number": "1486", "problem_submissions": {"F": [107822308, 107853234, 107892513, 107856479, 107858609, 107818883, 107863062, 107864151, 107861898, 107852447], "C2": [107807571, 107798543, 107798512, 107824454, 107833215, 107807829, 107808299, 107893894, 107831280, 107798206, 107803513, 107805796, 107796329, 107802055, 107801594, 107810753, 107807623, 107804366, 107800246, 107794787], "C1": [107807442, 107798262, 107798783, 107806766, 107826187, 107799740, 107808102, 107806459, 107804345, 107798724, 107803748, 107805504, 107796790, 107802993, 107801883, 107810564, 107806537, 107804166, 107800475, 107795337], "E": [107800531, 107809228, 107835383, 107836319, 107858202, 107831953, 107841935, 107828250, 107866676, 107815626, 107818145, 107822115, 107819777, 107823506, 107819582, 107793061, 107821827, 107818526, 107827724, 107835623], "D": [107794075, 107802130, 107818757, 107810014, 107838771, 107823356, 107812461, 107800692, 107835785, 107804842, 107809012, 107812317, 107808246, 107810696, 107812569, 107833103, 107812854, 107810102, 107818249, 107811436], "B": [107789021, 107789484, 107787615, 107791480, 107795217, 107789100, 107788278, 107793717, 107792766, 107788662, 107787061, 107791923, 107801559, 107790818, 107784811, 107802492, 107792788, 107796149, 107790292, 107785066], "A": [107783058, 107787485, 107782747, 107783451, 107784857, 107784942, 107784010, 107783293, 107785695, 107784794, 107783365, 107784072, 107790054, 107785033, 107793025, 107799971, 107782733, 107782509, 107783469, 107782641]}, "name": "E. Paired Payment", "statement": "There are n cities and m bidirectional roads in the country. The roads\r\nin the country form an undirected weighted graph. The graph . Each road\r\nhas it\u2019s own parameter w. You can travel through the roads, but the\r\ngovernment made a new law: you can only go through two roads at a time\r\n(go from city a to city b and then from city b to city c) and you will\r\nhave to pay (w_{ab} + w_{bc})^2 money to go through those roads. Find\r\nout whether it is possible to travel from city 1 to every other city t\r\nand what\u2019s the minimum amount of money you need to get from 1 to t.\r\n", "solutions": ["//#pragma GCC target(\"avx,avx2\")\t\n#include<bits/stdc++.h>\n//#include<immintrin.h>\nusing namespace std;\n\ntemplate <typename T> void chmin(T&x,const T &y)\n{\n\tif(x>y)x=y;\n}\ntemplate <typename T> void chmax(T &x,const T &y)\n{\n\tif(x<y)x=y;\n}\ntypedef int64_t s64;\ntypedef uint64_t u64;\ntypedef uint32_t u32;\ntypedef pair<int,int> pii;\n#define rep(i,l,r) for(int i=l;i<=r;++i)\n#define per(i,r,l) for(int i=r;i>=l;--i)\n#define rep0(i,l,r) for(int i=l;i<r;++i)\n#define gc (c=getchar())\nchar readc()\n{\n\tchar c;\n\twhile(isspace(gc));\n\treturn c;\n}\nint read()\n{\n\tchar c;\n\twhile(gc<'-');\n\tif(c=='-')\n\t{\n\t\tint x=gc-'0';\n\t\twhile(gc>='0')x=x*10+c-'0';\n\t\treturn -x;\n\t}\n\tint x=c-'0';\n\twhile(gc>='0')x=x*10+c-'0';\n\treturn x;\n}\n#undef gc\n\nconst int N=1e5+5,L=50+5;\ns64 g[N][L];\nvector<pii>lk[N];\n\nint main()\n{\n#ifdef LOCAL\n\tfreopen(\"1.in\",\"r\",stdin);//freopen(\"1.out\",\"w\",stdout);\n#endif\t\n\tint n,m;\n\tcin>>n>>m;\n\twhile(m--)\n\t{\n\t\tint x=read(),y=read(),w=read();\n\t\tlk[x].push_back({y,w});\n\t\tlk[y].push_back({x,w});\n\t}\n\trep(i,1,n)\n\trep(j,0,50)g[i][j]=1e18;\n\tg[1][0]=0;\n\tpriority_queue<pair<s64,int>> heap;\n\theap.push({0,1*L});\n\twhile(!heap.empty())\n\t{\n\t\tauto pr=heap.top();heap.pop();\n\t\ts64 d=-pr.first;\n\t\tint x=pr.second;\n\t\tint j=x%L;x/=L;\n\t\tif(d!=g[x][j])continue;\n\t\tfor(auto e:lk[x])\n\t\t{\n\t\t\tint y,w;\n\t\t\ttie(y,w)=e;\n\t\t\ts64 d1=j?(j+w)*(j+w):0;\n\t\t\td1+=d;\n\t\t\tint j1=j?0:w;\n\t\t\tif(g[y][j1]>d1)\n\t\t\t{\n\t\t\t\tg[y][j1]=d1;\n\t\t\t\theap.push({-d1,y*L+j1});\n\t\t\t}\n\t\t}\n\t}\n\trep(i,1,n)\n\t\tprintf(\"%lld \",g[i][0]==1e18?-1:g[i][0]);\n}\n"], "input": "", "output": "", "tags": ["binary search", "brute force", "constructive algorithms", "dp", "flows", "graphs", "shortest paths"], "dificulty": "2200", "interactive": false}