{"link": "https://codeforces.com//contest/1059/problem/E", "problemId": "231524", "problem_idx": "E", "shortId": "1059E", "contest_number": "1059", "problem_submissions": {"E": [43850610, 43851338, 43852878, 43848837, 43853144, 43855920, 43856643, 43856517, 43856676, 43844566, 43875705, 43858710, 43857544, 43858408, 43857949, 43853507, 43841184, 43946408, 43878430, 43860192, 43860410], "D": [43845001, 43847172, 43843271, 43852595, 43840300, 43843480, 43849616, 43848573, 43850624, 43860600, 43864131, 43850779, 43852200, 43852176, 43848226, 43859577, 43859230, 43853350, 43847642], "C": [43838609, 43839900, 43837168, 43838921, 43842651, 43838187, 43838191, 43838874, 43844737, 43839410, 43839682, 43840549, 43840977, 43843893, 43840186, 43848301, 43845385, 43844454], "B": [43834668, 43836105, 43835391, 43835023, 43836495, 43834373, 43835428, 43835653, 43837072, 43836994, 43835151, 43835423, 43837125, 43836780, 43836839, 43846140, 43840557, 43840737], "A": [43832663, 43832671, 43832804, 43832508, 43832734, 43832337, 43832703, 43832409, 43833757, 43832301, 43841198, 43833068, 43832428, 43832441, 43832459, 43842369, 43835008, 43840123]}, "name": "E. Split the Tree", "statement": "You are given a rooted tree on n vertices, its root is the vertex\r\nnumber 1. The i-th vertex contains a number w_i. Split it into the\r\nminimum possible number of vertical paths in such a way that each path\r\ncontains no more than L vertices and the sum of integers w_i on each\r\npath does not exceed S. Each vertex should belong to exactly one path.A\r\nvertical path is a sequence of vertices v_1, v_2,\r\nldots, v_k where v_i (i\r\nge 2) is the parent of v_{i - 1}.\r\n", "solutions": ["#pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(3)\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n#pragma GCC target(\"sse3\",\"sse2\",\"sse\")\n#pragma GCC target(\"avx\",\"sse4\",\"sse4.1\",\"sse4.2\",\"ssse3\")\n#pragma GCC target(\"f16c\")\n#pragma GCC optimize(\"inline\",\"fast-math\",\"unroll-loops\",\"no-stack-protector\")\n#pragma GCC diagnostic error \"-fwhole-program\"\n#pragma GCC diagnostic error \"-fcse-skip-blocks\"\n#pragma GCC diagnostic error \"-funsafe-loop-optimizations\"\n#pragma GCC diagnostic error \"-std=c++14\"\n#include \"bits/stdc++.h\"\n//#include \"ext/pb_ds/tree_policy.hpp\"\n//#include \"ext/pb_ds/assoc_container.hpp\"\n#define PB push_back\n#define PF push_front\n#define LB lower_bound\n#define UB upper_bound\n#define fr(x) freopen(x,\"r\",stdin)\n#define fw(x) freopen(x,\"w\",stdout)\n#define iout(x) printf(\"%d\\n\",x)\n#define lout(x) printf(\"%lld\\n\",x)\n#define REP(x,l,u) for(ll x = l;x<u;x++)\n#define RREP(x,l,u) for(ll x = l;x>=u;x--)\n#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())\n#define mst(x,a) memset(x,a,sizeof(x))\n#define all(a) a.begin(),a.end()\n#define PII pair<int,int>\n#define PLL pair<ll,ll>\n#define MP make_pair\n#define sqr(x) ((x)*(x))\n#define lowbit(x) (x&(-x))\n#define lson (ind<<1)\n#define rson (ind<<1|1)\n#define se second\n#define fi first\n#define dbg(x) cerr<<#x<<\" = \"<<(x)<<endl;\n#define sz(x) ((int)x.size())\n#define EX0 exit(0);\n\ntypedef  long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ld;\nusing namespace std;\ntypedef vector<ll> VLL;\ntypedef vector<int> VI;\nconst int block_size = 320;\ntypedef complex<ll> point;\nconst ll mod = 1e9+7;\nconst ll inf = 1e9+7;\nconst ld eps = 1e-9;\nconst db PI = atan(1)*4;\ntemplate<typename T>\ninline int sign(const T&a) {\n    if(a<0)return -1;\n    if(a>0)return 1;\n    return 0;\n}\n\ntemplate<typename T,typename S>inline bool upmin(T&a,const S&b){return a>b?a=b,1:0;}\ntemplate<typename T,typename S>inline bool upmax(T&a,const S&b){return a<b?a=b,1:0;}\n\ntemplate<typename T> inline void in(T &x) {\n    x = 0;\n    T f = 1;\n    char ch = getchar();\n    while (!isdigit(ch)) {\n        if (ch == '-') f = -1;\n        ch = getchar();\n    }\n    while (isdigit(ch))  {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    x *= f;\n}\n\nll twop(int x) {\n    return 1LL<<x;\n}\n\ntemplate<typename A,typename B > inline void in(A&x,B&y) {\n    in(x);\n    in(y);\n}\ntemplate<typename A,typename B,typename C>inline void in(A&x,B&y,C&z) {\n    in(x);\n    in(y);\n    in(z);\n}\ntemplate<typename A,typename B,typename C,typename D> inline void in(A&x,B&y,C&z,D&d) {\n    in(x);\n    in(y);\n    in(z);\n    in(d);\n}\nll gcd(ll a,ll b){return b==0?a:gcd(b,a%b);}\nnamespace SOLVE {\n    void main(){\n    }\n}\n\ntemplate<int maxn,typename NUM>\nstruct BIT {\n    NUM s[maxn];\n    \n    void init() {\n        mst(s, 0);\n    }\n    BIT() {\n        init();\n    }\n    \n    void update(int a,NUM value) {\n        a++;\n        while(a<maxn) {\n            s[a]+=value;\n            a+=lowbit(a);\n        }\n    }\n    \n    NUM query(int a) {\n        NUM ans = 0;\n        a++;\n        while(a) {\n            ans+=s[a];\n            a-=lowbit(a);\n        }\n        return ans;\n    }\n    NUM query(int a,int b) {\n        if(b<a)return 0;\n        return query(b)-query(a-1);\n    }\n};\nll n,l,s;\nll weight[100010];\nll par[100010];\n\nBIT<200010, ll>tree;\nnamespace HLD {\n    //0\u4e0d\u80fd\u88ab\u4f7f\u7528\n    struct edge {\n        int to;\n        edge(int x):to(x){}\n    };\n    \n    const int root = 1;\n    const int maxn = 200010;\n    vector<edge>adj[maxn];\n    int dfnToID[maxn],dfn[maxn],head[maxn],fa[maxn],dep[maxn],size[maxn],heavy[maxn],r[maxn],cnt = 1;\n    ll sum[maxn];\n    void firstDfs(int cur,int _fa) {\n        sum[cur] = weight[cur] + sum[_fa];\n        dep[cur] = dep[_fa]+1;\n        size[cur]=1;\n        fa[cur] = _fa;\n        for(auto e:adj[cur]) {\n            if(e.to!=_fa) {\n                firstDfs(e.to,cur);\n                size[cur]+=size[e.to];\n            }\n        }\n        int heavyChild = 0;\n        for(auto e:adj[cur]) {\n            if(e.to!=_fa) {\n                if(size[e.to]>size[heavyChild]) {\n                    heavyChild = e.to;\n                }\n            }\n        }\n        heavy[cur] = heavyChild;\n    }\n    \n    \n    void secondDfs(int cur,int _fa) {\n        if(cur!=heavy[_fa]) {\n            head[cur] = cur;\n        } else {\n            head[cur] = head[_fa];\n        }\n        dfn[cur] = cnt++;\n        r[cur] = dfn[cur];\n        dfnToID[dfn[cur]] = cur;\n        if(!heavy[cur])return;\n        secondDfs(heavy[cur],cur);\n        r[cur] = r[heavy[cur]];\n        for(auto e:adj[cur]) {\n            if(e.to==_fa||e.to==heavy[cur])continue;\n            secondDfs(e.to,cur);\n            r[cur] = r[e.to];\n        }\n    }\n    void init() {\n        firstDfs(root,0);\n        secondDfs(root,0);\n    }\n    \n    int kthFather(int k,int cur) {\n        while(k) {\n            if(head[cur] == cur) {\n                k--;\n                cur = fa[head[cur]];\n            } else {\n                if(dep[cur]-dep[head[cur]]<=k) {\n                    k-=dep[cur]-dep[head[cur]];\n                    cur = head[cur];\n                } else {\n                    return dfnToID[dfn[cur]-k];\n                }\n            }\n        }\n        return cur;\n    }\n    int LCA(int u,int v) {\n        while(head[u]!=head[v]) {\n            if(dep[head[u]]>dep[head[v]])swap(u,v);\n            v = fa[head[v]];\n        }\n        if(dep[u]<dep[v])return u;\n        return v;\n    }\n    \n    int dis(int u,int v){\n        return dep[u]+dep[v]-2*dep[LCA(u, v)];\n    }\n    void add(int low,int high){\n        while(head[low]!=head[high]){\n            tree.update(dfn[head[low]], 1);\n            tree.update(dfn[low]+1, -1);\n            low = fa[head[low]];\n        }\n        tree.update(dfn[high], 1);\n        tree.update(dfn[low]+1, -1);\n    }\n    \n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    fr(\"/Users/zhangqingchuan/Desktop/cp/cp/input.txt\");\n    fw(\"/Users/zhangqingchuan/Desktop/cp/cp/output.txt\");\n#endif\n    \n    \n    \n    \n    in(n,l,s);\n    REP(i,1,n+1){in(weight[i]);if(weight[i]>s){\n        \n        cout<<-1;return 0;\n    }}\n    REP(i,2,n+1)in(par[i]);\n    REP(i,2,n+1){\n        HLD::adj[par[i]].push_back(HLD::edge(i));\n    }\n    HLD::init();\n    ll ans = 0;\n    RREP(i,n,1){\n        if(tree.query(HLD::dfn[i]) > 0)continue;\n        ans++;\n        int ll = 0,rr = l-1;\n        upmin(rr, HLD::dep[i]-1);\n//        dbg(rr);\n        while(ll<rr){\n            int mid = (ll+rr)/2+1;\n            int father = HLD::kthFather(mid, i);\n            if(HLD::sum[i]-HLD::sum[father]+weight[father] <= s){\n                ll = mid;\n            }else{\n                rr = mid-1;\n            }\n        }\n        int father = HLD::kthFather(ll, i);\n//        dbg(father);\n        HLD::add(i, father);\n    }\n    \n    \n    \n    \n    \n    \n    cout<<ans;\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "data structures", "dp", "greedy", "trees"], "dificulty": "2400", "interactive": false}