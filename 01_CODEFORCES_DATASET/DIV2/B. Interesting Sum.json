{
    "link": "https://codeforces.com//contest/1720/problem/B",
    "problemId": "1512383",
    "problem_idx": "B",
    "shortId": "1720B",
    "contest_number": "1720",
    "problem_submissions": {
        "E": [
            168846777,
            168840544,
            168827050,
            168859240,
            168862248,
            168861844,
            168862010,
            168825889,
            168916027,
            168877554,
            168901697,
            168883239
        ],
        "D2": [
            168835694,
            168850679,
            168839552,
            168830934,
            168845483,
            168843478,
            168832795,
            168821250,
            168836283,
            168852109,
            168831844,
            168842245,
            168839190,
            168846298,
            168842200,
            168837729,
            168842524
        ],
        "D1": [
            168824858,
            168826632,
            168839665,
            168830830,
            168827889,
            168830140,
            168824710,
            168836162,
            168821401,
            168836396,
            168823758,
            168831963,
            168842466,
            168825766,
            168831343,
            168842031,
            168837590,
            168842611
        ],
        "C": [
            168811322,
            168813329,
            168842584,
            168815215,
            168819795,
            168819474,
            168819456,
            168850754,
            168812287,
            168814430,
            168814760,
            168822741,
            168815241,
            168811935,
            168821777,
            168817839,
            168814181,
            168823921,
            168820025
        ],
        "A": [
            168809810,
            168807059,
            168846238,
            168808208,
            168810706,
            168809379,
            168807927,
            168854111,
            168807247,
            168807149,
            168808346,
            168808021,
            168807215,
            168848108,
            168807353,
            168808693,
            168807411,
            168807295,
            168808471
        ],
        "B": [
            168807225,
            168807985,
            168844246,
            168809736,
            168814160,
            168814167,
            168862630,
            168852491,
            168808670,
            168808487,
            168810496,
            168816414,
            168815954,
            168809438,
            168816039,
            168810273,
            168810419,
            168815510,
            168813227
        ]
    },
    "name": "B. Interesting Sum",
    "statement": "You are given an array a that contains n integers. You can choose any\r\nproper subsegment a_l, a_{l + 1},\r\nldots, a_r of this array, meaning you can choose any two integers 1\r\nle l\r\nle r\r\nle n, where r - l + 1 < n. We define the of a given subsegment as the\r\nvalue of the following expression:\r\nmax(a_{1}, a_{2},\r\nldots, a_{l-1}, a_{r+1}, a_{r+2},\r\nldots, a_{n}) -\r\nmin(a_{1}, a_{2},\r\nldots, a_{l-1}, a_{r+1}, a_{r+2},\r\nldots, a_{n}) +\r\nmax(a_{l},\r\nldots, a_{r}) -\r\nmin(a_{l},\r\nldots, a_{r}).Please find the maximum beauty among all proper\r\nsubsegments.\r\n",
    "solutions": [
        "//这回只花了114514min就打完了。\n//真好。记得多手造几组。ACM拍什么拍。 \n#include \"bits/stdc++.h\"\nusing namespace std;\ntemplate<typename typC,typename typD> istream &operator>>(istream &cin,pair<typC,typD> &a) { return cin>>a.first>>a.second; }\ntemplate<typename typC> istream &operator>>(istream &cin,vector<typC> &a) { for (auto &x:a) cin>>x; return cin; }\ntemplate<typename typC,typename typD> ostream &operator<<(ostream &cout,const pair<typC,typD> &a) { return cout<<a.first<<' '<<a.second; }\ntemplate<typename typC,typename typD> ostream &operator<<(ostream &cout,const vector<pair<typC,typD>> &a) { for (auto &x:a) cout<<x<<'\\n'; return cout; }\ntemplate<typename typC> ostream &operator<<(ostream &cout,const vector<typC> &a) { int n=a.size(); if (!n) return cout; cout<<a[0]; for (int i=1; i<n; i++) cout<<' '<<a[i]; return cout; }\ntemplate<typename typC> bool cmin(typC &x,const typC &y) { if (x>y) { x=y; return 1; } return 0; }\ntemplate<typename typC> bool cmax(typC &x,const typC &y) { if (x<y) { x=y; return 1; } return 0; }\n#if !defined(ONLINE_JUDGE)&&defined(LOCAL)\n#include \"my_header\\debug.h\"\n#else\n#define dbg(...) ;\n#define dbgn(...) ;\n#endif\ntypedef unsigned int ui;\ntypedef long long ll;\n#define all(x) (x).begin(),(x).end()\n// void inc(ui &x,const ui &y) { if ((x+=y)>=p) x-=p; }\n// void dec(ui &x,const ui &y) { if ((x+=p-y)>=p) x-=p; }\nconst int N=1e6+5;\nint main()\n{\n\tios::sync_with_stdio(0); cin.tie(0);\n\tcout<<setiosflags(ios::fixed)<<setprecision(15);\n\tint T; cin>>T;\n\twhile (T--)\n\t{\n\t\tint n,m,i,j;\n\t\tcin>>n;\n\t\tvector<int> a(n);\n\t\tcin>>a;\n\t\tsort(all(a));\n\t\tcout<<a[n-1]+a[n-2]-a[1]-a[0]<<'\\n';\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Interesting Sum.json",
    "editorial_link": "https://codeforces.com//blog/entry/106136",
    "editorial": "SolutionObviously, answer does not exceed , where are two maximum values\r\nin the array, and are two minimum values. Letâs find a segment, such as\r\nthis is true. For that we will look at all positions containing or ()\r\nand all positions containing or (). After that we choose a pair , , such\r\nas is minimum possible. Complexity:\r\n",
    "hint": []
}