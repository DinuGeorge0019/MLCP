{
    "link": "https://codeforces.com//contest/445/problem/E",
    "problemId": "11259",
    "problem_idx": "E",
    "shortId": "445E",
    "contest_number": "445",
    "problem_submissions": {
        "E": [
            7031344,
            7029564,
            7031729,
            7068922,
            7035909,
            7034442,
            7033387
        ],
        "C": [
            7025323,
            7027971,
            7026637,
            7030980,
            7028071,
            7028481,
            7024658,
            7025212,
            7025034,
            7025214,
            7025763,
            7024802,
            7023869,
            7024049,
            7023827,
            7026131,
            7026431
        ],
        "B": [
            7022932,
            7022406,
            7022331,
            7024786,
            7025216,
            7025923,
            7030833,
            7024955,
            7022701,
            7022564,
            7022789,
            7023593,
            7023467,
            7022262,
            7022269,
            7022887,
            7024673,
            7023418,
            7023287
        ],
        "A": [
            7021792,
            7021809,
            7021708,
            7022060,
            7022326,
            7021941,
            7023928,
            7023130,
            7021718,
            7021716,
            7021763,
            7021740,
            7021975,
            7024184,
            7027019,
            7027895,
            7025904,
            7022028,
            7021858
        ],
        "D": [
            7026779,
            7029902,
            7028957,
            7032143,
            7031896,
            7053884,
            7033436
        ]
    },
    "name": "E. DZY Loves Colors",
    "statement": "On a colorful day, DZY gets a colorful ribbon, which consists of units\r\n(they are numbered from to from left to right). The color of the -th\r\nunit of the ribbon is at first. It is colorful enough, but we still\r\nconsider that the colorfulness of each unit is at first.DZY loves\r\npainting, we know. He takes up a paintbrush with color and uses it to\r\ndraw a line on the ribbon. In such a case some contiguous units are\r\npainted. Imagine that the color of unit currently is . When it is\r\npainted by this paintbrush, the color of the unit becomes , and the\r\ncolorfulness of the unit increases by .DZY wants to perform operations,\r\neach operation can be one of the following: Paint all the units with\r\nnumbers between and (both inclusive) with color . Ask the sum of\r\ncolorfulness of the units between and (both inclusive). Can you help\r\nDZY?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\nconst double pi=acos (-1.0);\nconst double eps=1e-8 ;\n//const ll INF=(_I64_MAX)/2;\n//#pragma comment(linker, \"/STACK:102400000,102400000\")\nconst int inf=0x3f3f3f3f ;\n#define maxx(a) memset(a, 0x3f, sizeof(a))\n#define zero(a) memset(a, 0, sizeof(a))\n#define FILL(a,b) memset(a, b, sizeof(a))\n#define REP(i,a,b) for(i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n#define srep(i,n) for(i = 1;i <= n;i ++)\n#define snuke(c,itr) for( __typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n#define MP make_pair\n#define fi first\n#define se second\ntypedef pair <int, int> PII;\ntypedef pair <ll, ll> PX;\n#define M ((l+r)>>1)\n#define lc (o<<1)\n#define rc (lc|1)\n#define srep(i,n) for(i = 1;i <= n; i ++)\ntypedef long long ll;\n\n\nconst int N = 100000 * 4 + 11;\n\nll k[N],add[N];\nint n,m;\nint x,y,z;\nll ans;\n\n\nvoid pushdown(int l,int r,int o)\n{\n     add[lc] += add[o];\n     add[rc] += add[o];\n     add[o] = 0;\n}\nvoid maintain(int l,int r,int o)\n{\n     int mid = M;\n     if(r > l)\n          k[o] = k[lc] + add[lc] * (mid - l + 1) + k[rc] + add[rc] * (r - mid);\n}\nvoid update(int l,int r,int o)\n{\n     if(x <= l && r <= y){\n          add[o] += z;\n          return;\n     }\n     pushdown(l,r,o);\n     int mid = M;\n     if(x <= mid) update(l,mid,lc);\n     if(y > mid) update(mid + 1,r,rc);\n     maintain(l,r,o);\n}\nvoid query(int l,int r,int o)\n{\n     //ac += add[o];\n     if(x <= l && r <= y) ans += k[o] + add[o] * (r - l + 1);\n     else{\n          pushdown(l,r,o);\n          int mid = M;\n          if(x <= mid) query(l,mid,lc);\n          if(y > mid) query(mid+1,r,rc);\n          maintain(l,r,o);\n     }\n}\n\n\nint C[N];\n\n\nvoid build(int l,int r,int o)\n{\n     if(l == r) {\n         C[o] = l;\n         return;\n     }\n     C[o] = -1;\n     int mid =M;\n     build(l,mid,lc) ;\n     build(mid+1,r,rc);\n}\nint x2,y2,z2;\nvoid update2(int l,int r,int o)\n{\n    int mid = M;\n     if(x2 <= l && r <= y2){\n         if (C[o] != -1) {\n             z = abs(z2 - C[o]);\n             x = l;\n             y = r;\n             update(1,n,1);\n             C[o] = z2;\n         }\n         else{\n             update2(l,mid,lc);\n             update2(mid + 1,r,rc);\n             C[o] = z2;\n         }\n\n         return;\n     }\n     if (C[o] != -1) {\n         C[lc] = C[rc] = C[o];\n         C[o] = -1;\n     }\n     if(x2 <= mid) update2(l,mid,lc);\n     if(y2 > mid) update2(mid + 1,r,rc);\n}\n\n\nint main ()\n{\n#ifdef LOCAL\n     freopen(\"in.txt\" ,\"r\", stdin);\n     // freopen (\"out.txt\",\"w\",stdout);\n#endif\n\n\n     cin>>n>>m;\n     int i,j;\n     int t,a,b,c;\n\n     build(1,n,1);\n\n     while(m--) {\n         scanf(\"%d\",&t);\n         if (t == 1) {\n             scanf(\"%d%d%d\",&a,&b,&c);\n             x2 = a;\n             y2 = b;\n             z2 = c;\n             update2(1,n,1);\n         }\n         else{\n             scanf(\"%d%d\",&a,&b);\n             x = a;\n             y= b;\n             ans = 0;\n             query(1,n,1);\n             printf(\"%I64d\\n\",ans);\n         }\n     }\n\n\n\n     return 0 ;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. DZY Loves Colors.json",
    "editorial_link": "https://codeforces.com//blog/entry/12959",
    "editorial": "The only thing you need to notice is that if there are many continuous units with the same uppermost color, just merge them in one big unit. Every time painting continuous units, such big units will only increase by at most 3. Then you can use STL set to solve it. But anyway, a segment tree is useful enough"
}