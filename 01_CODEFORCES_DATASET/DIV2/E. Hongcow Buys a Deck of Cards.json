{"link": "https://codeforces.com//contest/745/problem/E", "problemId": "85238", "problem_idx": "E", "shortId": "745E", "contest_number": "745", "problem_submissions": {"D": [23063628, 23061434, 23062278, 23062946, 23063952, 23062953, 23063684, 23065227, 23067508, 23064054, 23066325, 23064778, 23065417, 23065640, 23065940, 23064035, 23066189, 23064933, 23065850], "C": [23058754, 23056208, 23058146, 23057537, 23056194, 23058075, 23057431, 23056700, 23056696, 23059037, 23057208, 23057100, 23059888, 23057785, 23058711, 23057786, 23057804, 23058775, 23060465, 23060269], "B": [23054534, 23053936, 23055906, 23053616, 23057561, 59539483, 23055581, 23054327, 23058797, 23055722, 23054071, 23052962, 23055965, 23054973, 23055010, 23060679, 23060284, 23055704, 23055472, 23055306], "A": [23052643, 23052117, 23054108, 23052198, 23052470, 23052835, 23052386, 23052148, 23052356, 23052891, 23052103, 23052050, 23052345, 23052453, 23052723, 23054138, 23052447, 23052434], "E": [23177019, 25241753, 23067030, 23140409]}, "name": "E. Hongcow Buys a Deck of Cards", "statement": "One day, Hongcow goes to the store and sees a brand new deck of special\r\ncards. Each individual card is either red or blue. He decides he wants\r\nto buy them immediately. To do this, he needs to play a game with the\r\nowner of the store.This game takes some number of turns to complete. On\r\na turn, Hongcow may do one of two things: Collect tokens. Hongcow\r\ncollects red token blue token by choosing this option (thus, tokens in\r\ntotal per one operation). Buy a card. Hongcow chooses some card and\r\nspends tokens to purchase it as specified below. The -th card requires\r\nred resources and blue resources. Suppose Hongcow currently has red\r\ncards and blue cards. Then, the -th card will require Hongcow to spend\r\nred tokens, and blue tokens. Note, only tokens disappear, but the cards\r\nstay with Hongcow forever. Each card can be bought only once.Given a\r\ndescription of the cards and their costs determine the minimum number of\r\nturns Hongcow needs to purchase all cards.\r\n", "solutions": ["#include <fstream>\n#include <stdio.h>\n#include <iostream>\n#include <string>\n#include <complex>\n#include <math.h>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <cassert>\n#include <set>\n#include <vector>\n#include <map>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <algorithm>\n#include <bitset>\n#include <list>\n\nusing namespace std;\n\n#define x first\n#define y second\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(), (a).end()\n#define rall(a) (a).rbegin(), (a).rend()\n#define sz(a) int((a).size())\n#define sqr(x) ((x)*(x))\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define NAME \"array\"\n\n\n#define y0 sdkfaslhagaklsldk\n#define y1 aasdfasdfasdf\n#define yn askfhwqriuperikldjk\n#define j1 assdgsdgasghsf\n#define tm sdfjahlfasfh\n#define lr asgasgashqt\n#define free afdshjioeyqtw\n#define next qpowityqwopqw\n\ntypedef unsigned int unt;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double ld;\ntypedef pair < int, int > pii;\ntypedef pair < ll, ll > pll;\n\nconst ll MOD = 1e9 + 7;\nconst int INF = 2e9;\nconst ll INF64 = 3e18;\nconst ld EPS = 1e-9;\nconst ld PI = acos(-1);\nconst ll MD = 1551513443;\nconst ll T = 25923;\nconst int N = 100001;\nconst int M = 16;\nconst bool DEBUG = 1;\n\nint n, r[M], b[M], dp[1 << M][M * M + 1][2];\npii z[1 << M];\nchar color[M];\n\nint main() {\n    cin >> n;\n    int s0 = 0, s1 = 0;\n    forn(i, n) {\n        cin >> color[i] >> r[i] >> b[i];\n        s0 += max(0, r[i] - n);\n        r[i] = min(r[i], n);\n        s1 += max(0, b[i] - n);\n        b[i] = min(b[i], n);\n    }\n    forn(mask, (1 << n))\n        forn(i, n)\n            if (mask & (1 << i)) {\n                if (color[i] == 'R')\n                    z[mask].x++;\n                else\n                    z[mask].y++;\n            }\n    forn(i, (1 << n))\n        forn(j, n * n + 1)\n            forn(t, 2)\n                dp[i][j][t] = INF;\n    dp[0][0][0] = dp[0][0][1] = 0;\n    forn(mask, (1 << n))\n        forn(u, n * n + 1)\n            forn(t, 2)\n                if (dp[mask][u][t] != INF) {\n                    forn(i, n)\n                        if (!(mask & (1 << i))) {\n                            int new_mask = mask + (1 << i), xx = 0, yy = 0;\n                            if (t == 0)\n                                xx = u;\n                            else\n                                yy = u;\n                            int x = max(0, r[i] - z[mask].x), y = max(0, b[i] - z[mask].y);\n                            xx -= x; yy -= y;\n                            int q = -min(xx, yy);\n                            xx += q; yy += q;\n                            if (yy == 0)\n                                dp[new_mask][xx][0] = min(dp[new_mask][xx][0], dp[mask][u][t] + q);\n                            else\n                                dp[new_mask][yy][1] = min(dp[new_mask][yy][1], dp[mask][u][t] + q);\n                        }\n                }\n    int ans = INF, mask = (1 << n) - 1;\n    forn(u, n * n + 1)\n        forn(t, 2)\n            if (dp[mask][u][t] != INF) {\n            int xx = 0, yy = 0;\n            if (t == 0)\n                xx = u;\n            else\n                yy = u;\n            ans = min(ans, max(max(0, s0 - xx), max(0, s1 - yy)) + dp[mask][u][t]);\n        }\n    cout << ans + n << endl;\n    return 0;\n}\n\n\n/*\n\n5 1 2 3 4 5\n\n\n*/"], "input": "", "output": "", "tags": ["dp"], "dificulty": "2400", "interactive": false}