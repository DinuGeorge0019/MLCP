{
    "link": "https://codeforces.com//contest/1589/problem/E",
    "problemId": "1186200",
    "problem_idx": "E",
    "shortId": "1589E",
    "contest_number": "1589",
    "problem_submissions": {
        "F": [
            135392401,
            135383659,
            135613163,
            136073664,
            136061292
        ],
        "A": [
            135375124,
            135343090,
            135343827,
            135343075,
            135344151,
            135347290,
            135347165,
            135342903,
            135346750,
            135343453,
            135344492,
            135344059,
            135383305,
            135346270,
            135343510,
            135389951,
            135347174,
            135344135,
            135344697,
            135345131
        ],
        "B": [
            135373165,
            135350018,
            135350022,
            135361256,
            135347559,
            135355629,
            135351622,
            135348865,
            135351792,
            135350073,
            135347389,
            135345202,
            135388137,
            135356455,
            135347142,
            135353182,
            135350595,
            135348956,
            135346782
        ],
        "E": [
            135366850,
            135380426,
            135378894,
            135377065,
            135387081,
            135379118,
            135387473,
            135388354,
            135387609,
            135390750,
            135374822,
            135380067,
            135366481,
            135412322,
            135387828,
            135373661,
            135373029,
            135375843
        ],
        "D": [
            135353894,
            135387455,
            135356345,
            135358960,
            135370454,
            135364511,
            135368677,
            135363277,
            135359493,
            135367483,
            135392033,
            135389301,
            135377180,
            135364477,
            135360697,
            135371907,
            135375411,
            135482600
        ],
        "C": [
            135344934,
            135351797,
            135347327,
            135352110,
            135350833,
            135347466,
            135354024,
            135346228,
            135353727,
            135346489,
            135352889,
            135347193,
            135347207,
            135347187,
            135349483,
            135346265,
            135355770,
            135353671,
            135357934,
            135349393
        ]
    },
    "name": "E. Game with Stones",
    "statement": "Bob decided to take a break from calculus homework and designed a game\r\nfor himself. The game is played on a sequence of piles of stones, which\r\ncan be described with a sequence of integers s_1,\r\nldots, s_k, where s_i is the number of stones in the i-th pile. On each\r\nturn, Bob picks a pair of non-empty adjacent piles i and i+1 and takes\r\none stone from each. If a pile becomes empty, its adjacent piles . The\r\ngame ends when Bob can’t make turns anymore. Bob considers himself a\r\nwinner if at the end all piles are empty.We consider a sequence of piles\r\nif Bob can start with it and win with some sequence of moves.You are\r\ngiven a sequence a_1,\r\nldots, a_n, count the number of subsegments of a that describe a winning\r\nsequence of piles. In other words find the number of segments [l, r] (1\r\nleq l\r\nleq r\r\nleq n), such that the sequence a_l, a_{l+1},\r\nldots, a_r is winning.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nint read() {\n\tint x=0,f=1;char c=getchar();\n\twhile(c>'9'||c<'0') {if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9') {x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=3e5+5;\nint n,a[N];\nmap<int,int>F;\nvoid eraseL(int mx) {//删去小与mx的 \n\twhile(!F.empty()) {\n\t\tauto it=F.begin();\n\t\tif(it->first<mx)F.erase(it);\n\t\telse break;\n\t}\n}\nvoid eraseR(int mn) {//删去大于mn的 \n\twhile(!F.empty()) {\n\t\tauto it=F.end();--it;\n\t\tif(it->first>mn)F.erase(it);\n\t\telse break;\n\t}\n}\nlong long ans;\nvoid work() {\n\tn=read();\n\tfor(int i=1;i<=n;++i)a[i]=read();\n\tint sum=0;\n\tF.clear();++F[0];ans=0;\n\tfor(int i=1;i<=n;++i) {\n\t\tif(i&1)sum+=a[i];\n\t\telse sum-=a[i];\n\t\tans+=F[sum];\n\t\tif(i<n) {\n\t\t\tif(i&1)eraseL(sum-a[i+1]);\n\t\t\telse eraseR(sum+a[i+1]);\n\t\t}\n\t\t++F[sum];\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\nmain() {\n\tint T=read();\n\twhile(T--)work();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "games",
        "greedy"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Game with Stones.json",
    "editorial_link": "https://codeforces.com//blog/entry/96953",
    "editorial": "This game has greedy strategy: look at first pile, all its stones have to be matched with stones from next pile, because it is its only adjacent pile. If pile is non-empty and there are no next pile, or next pile is smaller than current, Bob loses. Otherwise, Bob makes current pile empty, and remove corresponding number of stones from next pile. Now Bob plays the same game as if had one pile less, we can remove first pile without changing game. Bob wins if at the moment he reduced game to one pile it's already empty.\n\nNow let's iteratively define array c\n, where ci\n  number of stones left in the i\n-th after removing 1,,i?1\n piles, according to greedy strategy. Let c0=0\n, then ci=ai?ci?1\n.\n\nIf array contains only positive numbers, then it means that Bob is able to remove piles all the way over. Otherwise, let t\n be the first moment with ct<0\n, this means that Bob was able to remove piles until he meet t\n-th pile and ct?1>at\n happened, so Bob loses. To check that last pile is empty, we need to check if cn=0\n.\n\nSo we have criteria of winning subsequence: ci?0\n for all i\n, cn=0\n.\n\nLet's expand recursive notation of ci\n: ci=ai?ai?1+ai?2?+(?1)i?1?a1\n.\n\nWe will solve problem separately for different l\n  left bound of subsegment. Let's define sequence al:=al,al+1an\n, ali=al+i?1\n. It has similar array cl\n. We will find first position of negative number in cl\n t\n (clt<0\n). And then count how may zeros are on prefix [1\n, t?1\n]. This will give us number of winning subsegemtns with form [l,r]\n, sum over all l\n will give us answer for the problem.\n\nNote, that cli=ali?ali?1++(?1)i?1?al1=al+i?1?al+i?2++(?1)i?1?al=cl+i?1+(?1)i?1?cl?1\n.\n\nNote, that cli<0\n if and only if cl+i?1<(?1)i?1?cl?1\n. Let's divide problem by parity of indexes. Now to find first position of negative number in cl\n we should find first position of \"number less than x\" on suffix of c\n. This can be done many ways, for example, by descending through segment tree (segment tree for each parity).\n\nNote, that cli=0\n, if and only if cl+i?1=(?1)i?1?cl?1\n. Same division of problem by parity. Now to count number of zeros on subsegment of cl\n we should count number of \"equals to x\" on subsegment of c\n. This can be done by storing all positions of each ci\n in some container (one for each parity) and binnary search.",
    "hint": []
}