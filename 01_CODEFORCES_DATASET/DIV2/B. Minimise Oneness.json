{
    "link": "https://codeforces.com//contest/2030/problem/B",
    "problemId": "2962989",
    "problem_idx": "B",
    "shortId": "2030B",
    "contest_number": "2030",
    "problem_submissions": {
        "D": [
            286870605,
            286870097,
            286766067,
            286743790,
            286749704,
            286752517,
            286743540,
            286763694,
            286769489,
            286762215,
            286755968,
            286807582,
            286774479,
            286755264,
            286748829,
            286762354,
            286767397,
            286766307,
            286775817,
            286773805,
            286867460,
            286806694,
            286757030
        ],
        "C": [
            286860734,
            286764785,
            286775512,
            286732737,
            286735870,
            286731279,
            286736529,
            286759035,
            286741312,
            286740209,
            286770332,
            286732276,
            286730948,
            286749099,
            286748589,
            286737019,
            286738816,
            286732618,
            286746919,
            286735952,
            286744382
        ],
        "B": [
            286858184,
            286726117,
            286721582,
            286722000,
            286722997,
            286722179,
            286731090,
            286742656,
            286728669,
            286721456,
            286721616,
            286722634,
            286723485,
            286723817,
            286722712,
            286723090,
            286725291,
            286719819,
            286727047,
            286721215,
            286722880
        ],
        "A": [
            286857205,
            286716570,
            286716508,
            286717068,
            286716187,
            286716722,
            286727391,
            286716522,
            286715165,
            286715628,
            286715445,
            286716659,
            286717260,
            286715083,
            286717340,
            286715258,
            286718621,
            286715888,
            286722488,
            286715834,
            286716388
        ],
        "G1": [
            286855127,
            286854605,
            287072911,
            286866647
        ],
        "F": [
            286768609,
            286793091,
            286802410,
            286804764,
            286807723,
            286808203,
            286799478,
            286806636,
            286814242,
            286786481,
            286811066,
            286813827,
            286813676,
            286816754,
            286814190,
            286813606,
            286813682,
            286795825,
            286808765,
            286817519
        ],
        "E": [
            286766337,
            286759349,
            286779444,
            286786742,
            286788454,
            286791781,
            286783999,
            286800776,
            286780259,
            286764648,
            286793854,
            286792948,
            286789703,
            286779768,
            286799721,
            286794191,
            286791806,
            286816988,
            286786381,
            286789315
        ],
        "G2": [
            287138384
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135218",
    "editorial": "Problem Credits: Proof_by_QED Analysis: Proof_by_QED Solution\r\nObservation: is odd.Proof: is the set of all non-empty subsets of ,\r\nwhich is , which is odd. The sum and difference of two integers has the\r\nsame parity, so is always odd.By including exactly one in the string ,\r\nwe can make and , or by the multiplication principle. Clearly, this is\r\nthe best we can do. So, we print out any string with exactly one .\r\n",
    "name": "B. Minimise Oneness",
    "statement": "For an arbitrary binary string t^{\r\ntext{ }}, let f(t) be the number of non-empty subsequences^{\r\ntext{ }} of t that contain only\r\nmathtt{0}, and let g(t) be the number of non-empty subsequences of t\r\nthat contain at least one\r\nmathtt{1}. Note that for f(t) and for g(t), each subsequence is counted\r\nas many times as it appears in t. E.g., f(\r\nmathtt{000}) = 7, g(\r\nmathtt{100}) = 4.We define the of the binary string t to be |f(t)-g(t)|,\r\nwhere for an arbitrary integer z, |z| represents the absolute value of\r\nz.You are given a positive integer n. Find a binary string s of length n\r\nsuch that its is as small as possible. If there are multiple strings,\r\nyou can print any of them.^{\r\ntext{ }}A binary string is a string that only consists of characters\r\ntexttt{0} and\r\ntexttt{1}.^{\r\ntext{ }}A sequence a is a subsequence of a sequence b if a can be\r\nobtained from b by the deletion of several (possibly, zero or all)\r\nelements. For example, subsequences of\r\nmathtt{1011101} are\r\nmathtt{0},\r\nmathtt{1},\r\nmathtt{11111},\r\nmathtt{0111}, but not\r\nmathtt{000} nor\r\nmathtt{11100}.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"using namespace std;using ll = long long;using vi = vector<int>; #define endl '\\n'#define pb emplace_back#define sz(x) (int)(x).size()#define all(x) (x).begin(), (x).end()#define make_unique(x) sort(all(x)), x.resize(unique(all(x)) - begin(x))#define debug(x) cerr << \"[\" << __LINE__ << \"] \"#x\" = \" << (x) << endl int a[1005]; void solve() {\t\tint n;\t\tcin >> n;\tfor (int i = 0; i < n - 1; i ++) cout << '0';\tcout << \"1\\n\";  }int main() {#ifndef ONLINE_JUDGE\tfreopen(\"in.txt\", \"r\", stdin);//\tfreopen(\"out.txt\", \"w\", stdout);#endif \tios::sync_with_stdio(0); cin.tie(0); cout.tie(0); \tint tc = 1;\tcin >> tc;\twhile (tc --) solve(); \treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "constructive algorithms",
        "games",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Minimise Oneness.json",
    "hint": []
}