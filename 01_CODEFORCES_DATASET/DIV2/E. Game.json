{
    "link": "https://codeforces.com//contest/278/problem/E",
    "problemId": "2666",
    "problem_idx": "E",
    "shortId": "278E",
    "contest_number": "278",
    "problem_submissions": {
        "E": [
            3219867,
            3221986
        ],
        "D": [
            3213238,
            3215279,
            3216086,
            3217208,
            3217668
        ],
        "C": [
            3211852,
            3213120,
            3213066,
            3214325,
            3215111,
            3212693,
            3210225,
            3210914,
            3210903,
            3213534,
            3212483,
            3211475,
            3213044,
            3211593
        ],
        "B": [
            3210694,
            3210904,
            3211477,
            3211274,
            3210417,
            3210722,
            3209006,
            3209446,
            3209860,
            3210543,
            3209941,
            3210339,
            3210819,
            3210425
        ],
        "A": [
            3208889,
            3209118,
            3208502,
            3208248,
            3208401,
            3209996,
            3208190,
            3208215,
            3208219,
            3208450,
            3208293,
            3208373,
            3208970,
            3208304
        ]
    },
    "name": "E. Game",
    "statement": "Two players play the following game. Initially, the players have a knife\r\nand a rectangular sheet of paper, divided into equal square grid cells\r\nof unit size. The players make moves in turn, the player who canâ€™t make\r\na move loses. In one move, a player can take the knife and cut the paper\r\nalong any segment of the grid line (not necessarily from border to\r\nborder). The part of the paper, that touches the knife at least once, is\r\nconsidered cut. There is one limit not to turn the game into an infinite\r\ncycle: each move has to cut the paper, that is the knife has to touch\r\nthe part of the paper that is not cut before.Obviously, the game ends\r\nwhen the entire sheet is cut into blocks. During the game, the pieces of\r\nthe sheet are not allowed to move. It is also prohibited to cut along\r\nthe border. The coordinates of the ends of each cut must be integers.You\r\nare given an piece of paper, somebody has already made cuts there. Your\r\ntask is to determine who will win if the players start to play on this\r\nsheet. You can consider that both players play optimally well. If the\r\nfirst player wins, you also need to find the winning first move.\r\n",
    "solutions": [
        "#include <vector>\n#include <string>\n#include <algorithm>\n#include <list>\n#include <set>\n#include <queue>\n#include <stack>\n#include <sstream>\n#include <numeric>\n#include <functional>\n#include <utility>\n#include <bitset>\n#include <iostream>\n#include <map>\n#include <cstring>\n#include <cstdio>\n#include <stdint.h>\n#include <cstdarg>\n#include <cstdio>\n#include <cassert>\nusing namespace std;\n\n#define maxn 100010\n\nint n, m, k, sx, sy;\nint x1[maxn], x2[maxn], y1[maxn], y2[maxn];\nint qx[maxn], qy[maxn];\nvector <pair<int, int> > px, py;\n\nbool cmpx(int i, int j)\n{\n    if (x1[i] != x1[j])\n        return x1[i] < x1[j];\n    else if (y1[i] != y1[j])\n        return y1[i] < y1[j];\n    else\n        return y2[i] > y2[j];\n}\n\nbool cmpy(int i, int j)\n{\n    if (y1[i] != y1[j])\n        return y1[i] < y1[j];\n    else if (x1[i] != x1[j])\n        return x1[i] < x1[j];\n    else\n        return x2[i] > x2[j];\n}\n\nint min_x()\n{\n    for (int i = 1, j = 0; i < n; ++ i)\n    {\n        for (; j < sx; ++ j)\n            if (x1[qx[j]] >= i)\n                break;\n        if (j == sx)\n            return i;\n        if (x1[qx[j]] > i)\n            return i;\n    }\n    return 1;\n}\n\nint min_y()\n{\n    for (int i = 1, j = 0; i < m; ++ i)\n    {\n        for (; j < sy; ++ j)\n            if (y1[qy[j]] >= i)\n                break;\n        if (j == sy)\n            return i;\n        if (y1[qy[j]] > i)\n            return i;\n    }\n    return 1;\n}\n\nint len(int i)\n{\n    return x2[i] + y2[i] - x1[i] - y1[i];\n}\n\nvoid solve_x(int LEN, int x)\n{\n    for (int i = 0; i < sx; ++ i)\n        if (x1[qx[i]] == x)\n            if (y1[qx[i]] <= LEN)\n                LEN += (len(qx[i]));\n    printf(\"%d %d %d %d\\n\", x, LEN, x, m);\n}\n\nvoid solve_y(int LEN, int y)\n{\n    for (int i = 0; i < sy; ++ i)\n        if (y1[qy[i]] == y)\n            if (x1[qy[i]] <= LEN)\n                LEN += (len(qy[i]));\n    printf(\"%d %d %d %d\\n\", LEN, y, n, y);\n}\n\nint main()\n{\n//    freopen(\"input.txt\", \"r\", stdin);\n//    freopen(\"output.txt\", \"w\", stdout);\n    \n    scanf(\"%d %d %d\", & n, & m, & k);\n    for (int i = 0; i < k; ++ i)\n    {\n        scanf(\"%d %d %d %d\", x1 + i, y1 + i, x2 + i, y2 + i);\n        if (x1[i] + y1[i] > x2[i] + y2[i])\n        {\n            swap(x1[i], x2[i]);\n            swap(y1[i], y2[i]);\n        }\n    }\n    sx = 0;\n    sy = 0;\n    for (int i = 0; i < k; ++ i)\n        if (x1[i] == x2[i])\n            qx[sx ++] = i;\n        else\n            qy[sy ++] = i;\n    sort(qx, qx + sx, cmpx);\n    sort(qy, qy + sy, cmpy);\n\n    int now;\n    if (sx != 0)\n    {\n        now = 0;\n        for (int i = 1; i < sx; ++ i)\n            if (x1[qx[i]] == x1[qx[now]] && y1[qx[i]] <= y2[qx[now]])\n            {\n                y2[qx[now]] = max(y2[qx[now]], y2[qx[i]]);\n            }\n            else\n            {\n                qx[++ now] = qx[i];\n            }\n        sx = now + 1;\n    }\n    \n    if (sy != 0)\n    {\n        now = 0;\n        for (int i = 1; i < sy; ++ i)\n            if (y1[qy[i]] == y1[qy[now]] && x1[qy[i]] <= x2[qy[now]])\n            {\n                x2[qy[now]] = max(x2[qy[now]], x2[qy[i]]);\n            }\n            else\n            {\n                qy[++ now] = qy[i];\n            }\n        sy = now + 1;\n    }\n\n    if (sx != 0)\n    {\n        now = len(qx[0]);\n        for (int i = 1; i < sx; ++ i)\n            if (x1[qx[i]] == x1[qx[i - 1]])\n            {\n                now += len(qx[i]);\n            }\n            else\n            {\n                px.push_back(make_pair(m - now, x1[qx[i - 1]]));\n                now = len(qx[i]);\n            }\n        px.push_back(make_pair(m - now, x1[qx[sx - 1]]));\n    }\n    if ((n - 1 - px.size()) % 2)\n        px.push_back(make_pair(m, min_x()));\n            \n    if (sy > 0)\n    {\n        now = len(qy[0]);\n        for (int i = 1; i < sy; ++ i)\n            if (y1[qy[i]] == y1[qy[i - 1]])\n            {\n                now += len(qy[i]);\n            }\n            else\n            {\n                py.push_back(make_pair(n - now, y1[qy[i - 1]]));\n                now = len(qy[i]);\n            }\n        py.push_back(make_pair(n - now, y1[qy[sy - 1]]));\n    }\n    if ((m - 1 - py.size()) % 2)\n        py.push_back(make_pair(n, min_y()));\n    \n    int _xor_ = 0;\n    for (int i = 0; i < px.size(); ++ i)\n        _xor_ = (_xor_ ^ px[i].first);\n    for (int i = 0; i < py.size(); ++ i)\n        _xor_ = (_xor_ ^ py[i].first);        \n    \n    if (_xor_ == 0)\n    {\n        printf(\"SECOND\\n\");\n    }\n    else\n    {\n        printf(\"FIRST\\n\");\n        int key;\n        for (key = (1 << 30); (key & _xor_) == 0; key = key / 2)\n            ;\n        for (int i = 0; i < px.size(); ++ i)\n            if (px[i].first & key)\n            {\n                solve_x(px[i].first ^ _xor_, px[i].second);\n                return 0;\n            }\n        for (int i = 0; i < py.size(); ++ i)\n            if (py[i].first & key)\n            {\n                solve_y(py[i].first ^ _xor_, py[i].second);\n                return 0;\n            }        \n    }    \n}\n\n\n// 1:1\n// 2:2\n// 1 1: \n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/6815",
    "editorial": "At first, notice that horizontal and vertical cuts are independent. Consider a single horizontal line. It contains m unit segments. And in any game state it's always possible to decrease the number of uncut units as the player wants. Imagine, that she starts growing a segment from a border, increasing it's length by 1 at a time. Each time the total uncut length decreases by either 0 or 1. In the end it obviously reaches 0.\n\nThe same holds for vertical lines as well. So if there are no initial cuts, the game is a nim with n?-?1 piles of m stones and m?-?1 piles of n stones. Could be solved with simple formula.\n\nInitial k cuts should be just a technical difficulty. For any vertical/horizontal line, which contains at least one of the cuts, it's pile size should be decreased by the total length of all segments on this line.\n\nHow to make a first move in nim: let res is the result of state (grundy function), and ai is the size of the i-th pile. Then the result of the game without i-th pile is . We want to replace ai with some x, so that . Obviously, the only possible . The resulting solution: find a pile for which , and decrease it downto .",
    "hint": []
}