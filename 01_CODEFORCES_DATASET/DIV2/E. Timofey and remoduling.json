{"link": "https://codeforces.com//contest/764/problem/E", "problemId": "91418", "problem_idx": "E", "shortId": "764E", "contest_number": "764", "problem_submissions": {"D": [24382753, 24383563, 24382081, 24374931, 24375041, 24375093, 24373708, 24376744, 24377867, 24377929, 24378185, 24376005, 24379286, 24378043, 24377942, 24377157, 24380370, 24374162], "E": [24380405, 24382432, 24384524, 24420260], "C": [24376879, 24379112, 24375507, 24370485, 24371412, 24372508, 24373003, 24373881, 24373841, 24372549, 24373871, 24374797, 24374793, 24376282, 24375770, 24375553, 24373514, 24380277], "B": [24369314, 24368165, 24369397, 24368034, 24366949, 24368393, 24369703, 24368061, 24367890, 24369939, 24368308, 24367782, 24370026, 24368365, 24368260, 24372318, 24368539, 24372008], "A": [24367006, 24365605, 24367841, 24366813, 24366252, 24365584, 24365987, 24365600, 24366244, 24365380, 24366762, 24365531, 24366184, 24365911, 24365534, 24366078, 24366527, 24365842]}, "name": "E. Timofey and remoduling", "statement": "Little Timofey likes integers a lot. Unfortunately, he is very young and\r\ncan\u2019t work with very big integers, so he does all the operations modulo\r\nhis favorite prime . Also, Timofey likes to look for arithmetical\r\nprogressions everywhere.One of his birthday presents was a sequence of\r\nintegers . Timofey wants to know whether he can rearrange the elements\r\nof the sequence so that is will be an arithmetical progression modulo ,\r\nor not.Arithmetical progression modulo of length with first element and\r\ndifference is sequence of integers , each taken modulo .\r\n", "solutions": ["//It is made by ljh2000\n#include <iostream>\n#include <cstdlib>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <ctime>\n#include <vector>\n#include <queue>\n#include <map>\n#include <set>\n#include <string>\n#include <complex>\nusing namespace std;\ntypedef long long LL;\ninline void getint(int &x);\nconst int MAXN=1000111;\nint n,m,G,a[MAXN],x[MAXN],y[MAXN],z[MAXN],t[MAXN];\nmap<int,int>mp_cc;\ninline int rrandd(){ return (rand()<<15^rand())&(~0u>>1); }\ninline int gcd(const int &a,const int &b){ return b?gcd(b,a%b):a; }\ninline void getint(int &x){\n\tchar c;\n\twhile(c=getchar(),c<'0'||c>'9');\n\tx=c-'0'; \n\twhile(c=getchar(),c>='0'&&c<='9')\n\t\tx=x*10+c-'0';\n}\n\ninline void init() {\n\tgetint(n),getint(m); G=n; x[0]=n;\n\tfor(int i=1;i<=m;i++) {\n\t\tgetint(x[i]);\n\t}\n\tsort(x+1,x+m+1);\n\tfor(int i=1;i<=m;i++) G=gcd(G,x[i]-x[1]);\n\tif(m==1) { printf(\"%d 1\\n\",x[1]); exit(0); }\n\tif(m==n/G) { printf(\"%d %d\\n\",x[1],G); exit(0); }\n\tfor(int i=1;i<=m;i++) a[i]=x[i]/G;\n}\n\ninline int work(int *x,int n,int m,int ljhtimes=0) {\n\tif(ljhtimes>40)\n\t\treturn -1;\n\t//have \n\tif(m<=50) {\n\t\tmp_cc.clear();\n\t\tfor(int i=1;i<=m;i++) {\n\t\t\tfor(int j=1;j<=m;j++) {\n\t\t\t\tif(i!=j)\n\t\t\t\t{\n\t\t\t\t\tint d;\n\t\t\t\t\td=(x[i]-x[j]+n)%n;\n\t\t\t\t\tif(gcd(d,n)==1 && ++mp_cc[d]==m-1) return d;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t//ACtimes\n\tif(m==n-1)return 1; int w=x[rrandd()%m+1],my=0,mz=0,mt=0;\n\tif(w*2<n) {\n\t\tfor(int i=1;i<=m;i++) {\n\t\t\tif(w*2-x[i]<0) y[++my]=w*2-x[i]+n;\n\t\t\telse z[++mz]=w*2-x[i];\n\t\t}\n\t}\n\telse {\n\t\tfor(int i=1;i<=m;i++) {\n\t\t\tif(w*2-x[i]<n)\n\t\t\t\ty[++my]=w*2-x[i];\n\t\t\telse \n\t\t\t\tz[++mz]=w*2-x[i]-n;\n\t\t}\n\t}\n\t//end\n\tint i=1; int j=my; int k=mz;\n\tfor(;i<=m;i++)\t{\n\t\twhile(j && y[j]<x[i]) j--;\n\t\twhile(k && z[k]<x[i]) k--;\n\t\tif( (!j||x[i]!=y[j]) && (!k||x[i]!=z[k]) )\n\t\t\tt[++mt]=x[i];\n\t}\n\t/*for(int i=1,j=my,k=mz;i<=m;i++)\t{\n\t\twhile(j && y[j]<x[i]) j--;\n\t\twhile(k && z[k]<x[i]) k--;\n\t\tif( (!j||x[i]!=y[j]) && (!k||x[i]!=z[k]) )\n\t\t\tt[++mt]=x[i];\n\t}*/\n\tif(mt>1) { memcpy(x,t,mt+1<<2); return work(x,n,mt,ljhtimes+1); }\n\treturn work(x,n,m,ljhtimes+1);\n}\n\ninline void ljh2000_work(){\n\tinit();  int d=work(a,n/G,m); if(d==-1) { puts(\"-1\"); return; } \n\td*=G; int s=x[1],ljhAK=0;\n\tfor(int i=1;i<=m;i++) if(!binary_search(x+1,x+m+1,(x[i]+d)%n)) { ljhAK++; s=x[i]; }\n\tif(ljhAK<=1) printf(\"%d %d\\n\",s,(n-d)%n);\n\telse puts(\"-1\");\n}\n\nint main()\n{\n\tljh2000_work();\n\treturn 0;\n}\n\n\n"], "input": "", "output": "", "tags": [], "dificulty": "2600", "interactive": false}