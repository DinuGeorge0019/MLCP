{"link": "https://codeforces.com//contest/1316/problem/F", "problemId": "552825", "problem_idx": "F", "shortId": "1316F", "contest_number": "1316", "problem_submissions": {"F": [72472310, 72461023, 73149710, 76233934, 76759743, 72468426], "D": [72446577, 72435880, 72446350, 72433935, 72552354, 72445851, 72441671, 72440731, 72441946, 72448620, 72449884, 72443275, 72430235, 72442450, 72455002, 72438222, 72450604, 72450271, 72453451, 72444636, 72446410], "E": [72439852, 72445012, 72437670, 72448064, 72552368, 72441953, 72444842, 72445763, 72447311, 72441940, 72445222, 72448678, 72435875, 72451508, 72441755, 72436908, 72445710, 72444493, 72446787, 72453158, 72452797], "C": [72433832, 72430966, 72433288, 72428640, 72552344, 72432747, 72431625, 72434362, 72434375, 72433220, 72429941, 72438552, 72442079, 72433103, 72430036, 72452619, 72434221, 72436747, 72434315, 72436157, 72435969], "B": [72429931, 72429194, 72429286, 72432383, 72552325, 72429081, 72434265, 72430795, 72431025, 72431357, 72428379, 72429255, 72460222, 72429093, 72433129, 72438863, 72431653, 72431631, 72430316, 72431406, 72429986], "A": [72421838, 72421944, 72423224, 72422468, 72552315, 72422813, 72422138, 72421848, 72423996, 72421816, 72422254, 72422463, 72428261, 72422024, 72422458, 72422846, 72422294, 72426353, 72423021, 72422856, 72423629]}, "name": "F. Battalion Strength", "statement": "There are n officers in the Army of Byteland. Each officer has some\r\npower associated with him. The power of the i-th officer is denoted by\r\np_{i}. As the war is fast approaching, the General would like to know\r\nthe strength of the army.The strength of an army is calculated in a\r\nstrange way in Byteland. The General selects a random subset of officers\r\nfrom these n officers and calls this subset a battalion.(All 2^n subsets\r\nof the n officers can be chosen equally likely, including empty subset\r\nand the subset of all officers).The strength of a battalion is\r\ncalculated in the following way:Let the powers of the chosen officers be\r\na_{1},a_{2},\r\nldots,a_{k}, where a_1\r\nle a_2\r\nle\r\ndots\r\nle a_k. The strength of this battalion is equal to a_1a_2 + a_2a_3 +\r\ndots + a_{k-1}a_k. (If the size of Battalion is\r\nleq 1, then the strength of this battalion is 0).The strength of the\r\narmy is equal to the expected value of the strength of the battalion.As\r\nthe war is really long, the powers of officers may change. Precisely,\r\nthere will be q changes. Each one of the form i x indicating that p_{i}\r\nis changed to x.You need to find the strength of the army initially and\r\nafter each of these q updates.Note that the changes are permanent.The\r\nstrength should be found by modulo 10^{9}+7. Formally, let M=10^{9}+7.\r\nIt can be shown that the answer can be expressed as an irreducible\r\nfraction p/q, where p and q are integers and q\r\nnot\r\nequiv 0\r\nbmod M). Output the integer equal to p\r\ncdot q^{-1}\r\nbmod M. In other words, output such an integer x that 0\r\nleq x < M and x q\r\nequiv p\r\nbmod M).\r\n", "solutions": ["#include <bits/stdc++.h>\n \nusing namespace std;\n \nconst int mod = (int )(1e9) + 7;\nint rev2;\nmt19937 rnd(998244353);\nstruct dx {\n\tint sz;\n\tint d, d2, d22;\n\tdx() {}\n\tdx(int sz, int d, int d2, int d22) : sz(sz), d(d), d2(d2), d22(d22) {}\n \n};\n \nstruct node{\n\tnode* son[2];\n\tdx x;\n\tint w;\n\tpair<int, int> d, mx;\n};\nnode STK[2000001], *head = STK;\nnode* root;\nint rev[600001];\nint n;\n \nnode* NewNode(pair<int, int> d) {\n\tnode* p = ++ head;\n\tp -> w = rnd();\n\tp -> d = d;\n\tp -> mx = d;\n\tp -> x = dx(1, 0, 1LL * rev2 * d.first % mod, 1LL * rev2 * d.first % mod);\n\treturn p;\n}\ndx operator + (const dx& p1, const dx& p2) {\n\tdx p;\n\tp.sz = p1.sz + p2.sz;\n\tp.d2 = (1LL * p1.d2 * rev[p2.sz] % mod + p2.d2) % mod; \n\tp.d22 = (p1.d22 + 1LL * rev[p1.sz] * p2.d22 % mod) % mod;\n\tp.d = (p1.d + p2.d + 1LL * p1.d2 * p2.d22) % mod;\n\treturn p;\n}\n \nvoid update(node* p) {\n\tp -> x = dx(1, 0, 1LL * rev2 * (p -> d).first % mod, 1LL * rev2 * (p ->d).first %  mod);\n\tp -> mx = p -> d;\n\tif (p -> son[0]) {\n\t\tp -> x = p -> son[0] -> x + p -> x;\n\t\tp -> mx = max(p -> mx, p -> son[0] -> mx);\n\t}\n\tif (p -> son[1]) {\n\t\tp -> x = p -> x + p -> son[1] -> x;\n\t\tp -> mx = max(p -> mx, p -> son[1] -> mx);\n\t}\n}\n \nnode* Merge(node* a, node* b) {\n\tif (!a) return b;\n\tif (!b) return a;\n\tif (a -> w > b -> w) {\n\t\ta -> son[1] = Merge(a -> son[1], b);\n\t\tupdate(a);\n\t}\n\telse {\n\t\tb -> son[0] = Merge(a, b -> son[0]);\n\t\tupdate(b);\n\t}\n\treturn a -> w > b -> w ? a : b;\n}\n \npair<node*, node*> Split(node* a, pair<int, int> rk) {\n\tpair<node*, node*> tmp;\n\tif (!a) return make_pair((node*)(0), (node*)(0));\n\tpair<int, int> leftsum = a -> son[0] ? max(a -> son[0] -> mx, a -> d) : a -> d;\n\tif (leftsum < rk) {\n\t\ttmp = Split(a -> son[1], rk);\n\t\ta -> son[1] = tmp.first;\n\t\tupdate(a);\n\t\treturn make_pair(a, tmp.second);\n\t}\n\telse {\n\t\ttmp = Split(a -> son[0], rk);\n\t\ta -> son[0] = tmp.second;\n\t\tupdate(a);\n\t\treturn make_pair(tmp.first, a);\n\t}\n}\npair<int, int> b[600001];\nint a[600001];\nint ksm(int x, int y) {\n\tint sum = 1;\n\tfor (; y; y >>= 1) {\n\t\tif (y & 1) sum = 1LL * sum * x % mod;\n\t\tx = 1LL * x * x % mod;\n\t}\n\treturn sum;\n}\n \nvoid gapprint(node* p) {\n\tprintf(\"%d %d\\n\", (p ->d).first, (p ->d).second);\n\tif (p -> son[0]) gapprint(p -> son[0]);\n\tif (p -> son[1]) gapprint(p -> son[1]);\n}\n \nint main( ) {\n\tint x, y, q;\n\tscanf(\"%d\", &n);\n\trev2 = ksm(2, mod - 2);\n\trev[0] = 1;\n\tfor (int i = 1; i <= n; i ++)\n\t\trev[i] = 1LL * rev[i - 1] * rev2 % mod;\n \n \n\tfor (int i = 1; i <= n; i ++) {\n\t\tscanf(\"%d\", &a[i]);\n\t\tb[i] = make_pair(a[i], i);\n\t}\n\tsort(b + 1, b + 1 + n);\n\troot = 0;\n\tfor (int i = 1; i <= n; i ++) {\n\t\tnode* tmp = NewNode(b[i]);\n\t\troot = Merge(root, tmp);\n\t}\n \n\tscanf(\"%d\", &q);\n \n\tprintf(\"%d\\n\", (root -> x).d);\n\twhile (q --) {\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tpair<node*, node*> l = Split(root, make_pair(a[x], x));\n\t\tpair<node*, node*> r = Split(l.second, make_pair(a[x], x + 1));\n\t\troot = Merge(l.first, r.second);\n\t\t\n\t\ta[x] = y;\n\t\tl = Split(root, make_pair(a[x], x + 1));\n\t\tnode* tmp = NewNode(make_pair(a[x], x));\n\t\troot = Merge(l.first, Merge(tmp, l.second));\n\t\tprintf(\"%d\\n\", (root -> x).d);\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures", "divide and conquer", "probabilities"], "dificulty": "2800", "interactive": false}