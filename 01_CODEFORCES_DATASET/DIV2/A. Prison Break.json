{
    "link": "https://codeforces.com//contest/1484/problem/A",
    "problemId": "931264",
    "problem_idx": "A",
    "shortId": "1484A",
    "contest_number": "1484",
    "problem_submissions": {
        "F": [
            110657532,
            110661405,
            110668413,
            110665063,
            110667584,
            110693226,
            110689740,
            110699242,
            110689519,
            110729936
        ],
        "E": [
            110652520,
            110652573,
            110656142,
            110659865,
            110659655,
            110638421,
            110657125,
            110656123,
            110656364,
            110659863,
            110649695,
            110648134,
            110661585,
            110638998,
            110667069,
            110662656,
            110665042,
            110662940,
            110667246,
            110664847
        ],
        "D": [
            110648415,
            110645978,
            110649799,
            110651144,
            110649241,
            110642542,
            110646537,
            110651979,
            110643535,
            110649770,
            110657613,
            110654803,
            110657052,
            110642182,
            110653908,
            110653309,
            110651762,
            110658162,
            110653592,
            110654689
        ],
        "C": [
            110640873,
            110642187,
            110633376,
            110636572,
            110644279,
            110636058,
            110637281,
            110637639,
            110639537,
            110639114,
            110634672,
            110661474,
            110641726,
            110639210,
            110640003,
            110642952,
            110644966,
            110648405,
            110643573,
            110647774
        ],
        "B": [
            110632955,
            110638515,
            110644328,
            110642323,
            110639199,
            110633637,
            110635087,
            110632899,
            110632555,
            110636089,
            110632943,
            110635814,
            110637169,
            110730778,
            110636805,
            110637796,
            110637626,
            110638325,
            110638006,
            110641086
        ],
        "A": [
            110627328,
            110628878,
            110637469,
            110632147,
            110630333,
            110627835,
            110626002,
            110626585,
            110625791,
            110627648,
            110626340,
            110627768,
            110629720,
            110626163,
            110628247,
            110631925,
            110627992,
            110627111,
            110625876,
            110626130
        ]
    },
    "name": "A. Prison Break",
    "statement": "Michael is accused of violating the social distancing rules and creating\r\na risk of spreading coronavirus. He is now sent to prison. Luckily,\r\nMichael knows exactly what the prison looks like from the inside,\r\nespecially since itâ€™s very simple.The prison can be represented as a\r\nrectangle a\r\ntimes b which is divided into ab cells, each representing a prison cell,\r\ncommon sides being the walls between cells, and sides on the perimeter\r\nbeing the walls leading to freedom. Before sentencing, Michael can ask\r\nhis friends among the prison employees to make (very well hidden) holes\r\nin some of the walls (including walls between cells and the outermost\r\nwalls). Michael wants to be able to get out of the prison after this, no\r\nmatter which cell he is placed in. However, he also wants to break as\r\nfew walls as possible.Your task is to find out the smallest number of\r\nwalls to be broken so that there is a path to the outside from every\r\ncell after this.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define R register\n#define N 1000201\n\nint main(){\n\tR int T;\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tR int n,m;\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tprintf(\"%d\\n\",n*m);\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Prison Break.json",
    "editorial_link": "https://codeforces.com//blog/entry/88963",
    "editorial": "Each broken wall increases the number of connected regions of the plane at most by one. Since in the end every single cell must be in the same region as the outside of the prison, there has to be only one connected region, hence the answer is at least nm\n (because there were nm+1\n connected regions at the beginning).\n\nTo achieve the answer, one can, for example, break the upper wall in every cell.",
    "hint": []
}