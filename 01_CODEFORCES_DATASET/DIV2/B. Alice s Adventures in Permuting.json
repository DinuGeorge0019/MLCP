{
    "link": "https://codeforces.com//contest/2028/problem/B",
    "problemId": "3015766",
    "problem_idx": "B",
    "shortId": "2028B",
    "contest_number": "2028",
    "problem_submissions": {
        "F": [
            290935691,
            290949712,
            290955148,
            290955187,
            290957184,
            292391424
        ],
        "E": [
            290922245,
            290922480,
            290920424,
            290927233,
            290924245,
            290933073,
            290931752,
            290929839,
            290930222,
            290933477,
            290938776,
            290925205,
            290935230,
            290939685,
            290935948,
            290940043,
            290940956,
            290939742,
            290941596
        ],
        "D": [
            290914114,
            290910753,
            290911155,
            290918762,
            290914432,
            290916818,
            290919264,
            290917594,
            290919639,
            290918811,
            290925900,
            290936103,
            290915690,
            290926820,
            290971789,
            290922189,
            290916679,
            290927684,
            290928018,
            290925322
        ],
        "C": [
            290904384,
            290896368,
            290900564,
            290905625,
            290896283,
            290906809,
            290893283,
            290905680,
            290908077,
            290905220,
            290900117,
            290902591,
            290910230,
            290901329,
            290904962,
            290902731,
            290903557,
            290906063,
            290905134
        ],
        "B": [
            290895606,
            290891907,
            290894947,
            290900151,
            290892659,
            290894607,
            290903522,
            290896362,
            290901510,
            290898064,
            290894885,
            290895319,
            290897887,
            290896070,
            290896548,
            290895196,
            290898108,
            290896215
        ],
        "A": [
            290889080,
            290888110,
            290888845,
            290888449,
            290888344,
            290888834,
            290895010,
            290888416,
            290888296,
            290888948,
            290888415,
            290888738,
            290892035,
            290889212,
            290888467,
            290903576,
            290888326,
            290888321,
            290889167
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136096",
    "editorial": "Suppose that . Then, if , the answer is ; if or , the answer is ; and\r\notherwise, it is (for example, consider , in which case we will end up\r\nwith and the last two steps alternate)Otherwise, since has distinct\r\nelements, we claim that the answer is , where is the number of elements\r\nin already present in the array. Equivalently, it is the number of steps\r\nuntil since we always preserve the distinctness of the elements of .So,\r\nwe want to find the maximum such that . This happens exactly when . The\r\nexpected complexity is per testcase.\r\n",
    "name": "B. Alice s Adventures in Permuting",
    "statement": "Alice mixed up the words transmutation and permutation! She has an array\r\na specified via three integers n, b, c: the array a has length n and is\r\ngiven via a_i = b\r\ncdot (i - 1) + c for 1\r\nle i\r\nle n. For example, if n=3, b=2, and c=1, then a=[2\r\ncdot 0 + 1, 2\r\ncdot 1 + 1, 2\r\ncdot 2 + 1] = [1, 3, 5].Now, Alice really enjoys permutations of [0,\r\nldots, n-1]^{\r\ntext{ }} and would like to transform a into a permutation. In one\r\noperation, Alice replaces the maximum element of a with the\r\noperatorname{MEX}^{\r\ntext{ }} of a. If there are multiple maximum elements in a, Alice\r\nchooses the leftmost one to replace.Can you help Alice figure out how\r\nmany operations she has to do for a to become a permutation for the\r\nfirst time? If it is impossible, you should report it.^{\r\ntext{ }}A permutation of length n is an array consisting of n distinct\r\nintegers from 0 to n-1 in arbitrary order. For example, [1,2,0,4,3] is a\r\npermutation, but [0,1,1] is not a permutation (1 appears twice in the\r\narray), and [0,2,3] is also not a permutation (n=3 but there is 3 in the\r\narray).^{\r\ntext{ }}The\r\noperatorname{MEX} of an array is the smallest non-negative integer that\r\ndoes not belong to the array. For example, the\r\noperatorname{MEX} of [0, 3, 1, 3] is 2 and the\r\noperatorname{MEX} of [5] is 0.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>//#pragma GCC optimize(\"Ofast,no-stack-protector,unroll-loops,fast-math\")//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native\")#define ll long long#define ull unsigned long long#define lll __int128#define pc __builtin_popcount#define pr pair<int,int>#define pb push_back#define mp make_pair#define x first#define y second#define lb(x) x&-xusing namespace std;mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());ll rint(ll l,ll r){return uniform_int_distribution<ll>(l,r)(rnd);}//const int maxn=;void read(ll &X){\tX=0;\tchar cr=getchar();\twhile(cr<'0'||cr>'9') cr=getchar();\twhile(cr>='0'&&cr<='9') X=(X<<3)+(X<<1)+(cr^48),cr=getchar();}ll T,n,b,c;//4 2 1//1357//1350 1320int main(){//\tfreopen(\".in\",\"r\",stdin);//\tfreopen(\".out\",\"w\",stdout);\tread(T);\twhile(T--)\t{\t\tread(n),read(b),read(c);\t\tif(!b)\t\t{\t\t\tif(c>=n) printf(\"%lld\\n\",n);\t\t\telse if(c>=n-2) printf(\"%lld\\n\",n-1);\t\t\telse printf(\"-1\\n\");\t\t}\t\telse\t\t{\t\t\t//c c+b c+2b;\t\t\t//kb<=n-c-1\t\t\tif(c<=n-1) printf(\"%lld\\n\",n-(n-c-1)/b-1);\t\t\telse printf(\"%lld\\n\",n);\t\t}\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation",
        "math"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Alice s Adventures in Permuting.json"
}