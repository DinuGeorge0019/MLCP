{
    "link": "https://codeforces.com//contest/435/problem/D",
    "problemId": "9911",
    "problem_idx": "D",
    "shortId": "435D",
    "contest_number": "435",
    "problem_submissions": {
        "D": [
            6747211,
            6748926,
            6748870,
            6749244,
            6749267,
            6749555,
            6750451,
            6750474,
            6750773,
            6750608,
            6749630,
            6749229,
            6750042,
            6750327,
            6750912,
            6750822,
            6749853,
            6749690,
            6751146
        ],
        "C": [
            6744948,
            6744969,
            6752395,
            6746173,
            6746535,
            6745384,
            6746890,
            6745689,
            6745344,
            6746116,
            6747240,
            6747721,
            6745948,
            6745784,
            6747231,
            6747354,
            6745897,
            6747543,
            6745255,
            6744189
        ],
        "B": [
            6743176,
            6742784,
            6743725,
            6746058,
            6744812,
            6743216,
            6743831,
            6743565,
            6743560,
            6745917,
            6743627,
            6748909,
            6745181,
            6744428,
            6745029,
            6745253,
            6749581,
            6747847
        ],
        "A": [
            6741556,
            6741154,
            6741740,
            6746603,
            6742626,
            6741223,
            6741194,
            6742017,
            6741345,
            6742582,
            6744122,
            6741228,
            6742721,
            6741593,
            6742043,
            6744026,
            6743936,
            6741314
        ],
        "E": [
            6752027,
            6760318
        ]
    },
    "name": "D. Special Grid",
    "statement": "You are given an grid, some of its nodes are black, the others are\r\nwhite. Moreover, itâ€™s not an ordinary grid each unit square of the grid\r\nhas painted diagonals.The figure below is an example of such grid of\r\nsize . Four nodes of this grid are black, the other nodes are white.\r\nYour task is to count the number of such triangles on the given grid\r\nthat: the corners match the white nodes, and the area is positive; all\r\nsides go along the grid lines (horizontal, vertical or diagonal); no\r\nside contains black nodes.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint n, m;\nchar s[410][410];\nint sumu[410][410], suml[410][410], sumha[410][410], sumxi[410][410];\nint px[10], py[10];\n\nint cal(int x1, int y1, int x2, int y2) {\n    if (x1 == x2) {\n        return abs(suml[x1][y1] - suml[x2][y2]);\n    } else if (y1 == y2) {\n        return abs(sumu[x1][y1] - sumu[x2][y2]);\n    } else if ((x2 - x1) * (y2 - y1) > 0) {\n        return abs(sumha[x1][y1] - sumha[x2][y2]);\n    } else {\n        return abs(sumxi[x1][y1] - sumxi[x2][y2]);\n    }\n}\n\nbool ck(int x, int y) {\n    if (x < 0 || x >= n || y < 0 || y >= m) return false;\n    if (s[x][y] != '0') return false;\n    px[2] = x; py[2] = y;\n    for (int i = 0; i < 3; i++) {\n        for (int j = i + 1; j < 3; j++) {\n            if (cal(px[i], py[i], px[j], py[j]) != 0) return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%s\", s[i]);\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            sumu[i][j] = s[i][j] - '0';\n            if (i > 0) sumu[i][j] += sumu[i - 1][j];\n\n            suml[i][j] = s[i][j] - '0';\n            if (j > 0) suml[i][j] += suml[i][j - 1];\n\n            sumha[i][j] = s[i][j] - '0';\n            if (i > 0 && j > 0) sumha[i][j] += sumha[i - 1][j - 1];\n\n            sumxi[i][j] = s[i][j] - '0';\n            if (i > 0 && j + 1 < m) sumxi[i][j] += sumxi[i - 1][j + 1];\n        }\n    }\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            for (int k = j + 1; k < m; k++) {\n                int id1 = s[i][j] - '0';\n                int id2 = s[i][k] - '0';\n                if (id1 || id2) continue;\n                px[0] = i; py[0] = j;\n                px[1] = i; py[1] = k;\n                if ((k - j) % 2 == 0) {\n                    int tx1 = i - (k - j) / 2, ty1 = j + (k - j) / 2;\n                    int tx2 = tx1 + (k - j), ty2 = ty1;\n\n                    if (ck(tx1, ty1)) ans++;\n                    if (ck(tx2, ty2)) ans++;\n                }\n                if (ck(i - (k - j), j)) ans++;\n                if (ck(i + (k - j), j)) ans++;\n                if (ck(i - (k - j), k)) ans++;\n                if (ck(i + (k - j), k)) ans++;\n                //printf(\"%d %d %d\\n\", j, k, ans);\n            }\n        }\n        //printf(\"ans = %d\\n\", ans);\n    }\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                int id1 = s[j][i] - '0', id2 = s[k][i] - '0';\n                px[0] = j; py[0] = i;\n                px[1] = k; py[1] = i;\n                if (id1 || id2) continue;\n                if ((k - j) % 2 == 0) {\n                    int tx1 = i - (k - j) / 2, ty1 = j + (k - j) / 2;\n                    int tx2 = tx1 + (k - j), ty2 = ty1;\n\n                    if (ck(ty1, tx1)) ans++;\n                    if (ck(ty2, tx2)) ans++;\n                }\n            }\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "greedy"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Special Grid.json",
    "editorial_link": "https://codeforces.com//blog/entry/12479",
    "editorial": "Values and are not so large, so the solution with complexity should\r\npass. It means that you should consider all triangles and check all\r\nconditions in . To make this check you should precalc arrays of partial\r\nsums on all diagonals, rows and columns. After that you could check,\r\nthat there is no black nodes on the side using one sum-query. Some hints\r\nabout this problem and the implementation:\r\n",
    "hint": []
}