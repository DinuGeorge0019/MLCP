{
    "link": "https://codeforces.com//contest/828/problem/A",
    "problemId": "113851",
    "problem_idx": "A",
    "shortId": "828A",
    "contest_number": "828",
    "problem_submissions": {
        "A": [
            28460309,
            28447412,
            28433654,
            28431619,
            28432255,
            28431175,
            28432122,
            28431834,
            28432270,
            28431560,
            28438332,
            28431659,
            28431601,
            28431041,
            28431462,
            28431315,
            28448076,
            28431218,
            28431027
        ],
        "F": [
            28448238,
            28470827,
            28472010,
            30446292,
            32054149
        ],
        "E": [
            28442480,
            28440989,
            28445030,
            28444433,
            28441533,
            28446059,
            28447307,
            28490530,
            28447795,
            28447314,
            28449259,
            28447763,
            28449409,
            28448527,
            28448262
        ],
        "D": [
            28439191,
            28443487,
            28440542,
            28439312,
            28444576,
            28440699,
            28440733,
            28440504,
            28444280,
            28446082,
            28441981,
            28439597,
            28441709,
            28443017,
            28442903,
            28439094,
            28443722,
            28448787,
            28443893
        ],
        "C": [
            28435698,
            28435500,
            28439027,
            28435829,
            28437161,
            28436717,
            28438157,
            28436695,
            28443065,
            28454126,
            28453810,
            28440499,
            28438924,
            28437102,
            28438928,
            28438895,
            28436411,
            28440043,
            28437230,
            28439797,
            28439825,
            28439032
        ],
        "B": [
            28433895,
            28433617,
            28434962,
            28433706,
            28433707,
            28434566,
            28434207,
            28434454,
            28435513,
            28435599,
            28434805,
            28433677,
            28435479,
            28434438,
            28432799,
            28434943,
            28434343,
            28435242,
            28433224,
            28433253
        ]
    },
    "name": "A. Restaurant Tables",
    "statement": "In a small restaurant there are tables for one person and tables for two\r\npersons. It it known that groups of people come today, each consisting\r\nof one or two people. If a group consist of one person, it is seated at\r\na vacant one-seater table. If there are none of them, it is seated at a\r\nvacant two-seater table. If there are none of them, it is seated at a\r\ntwo-seater table occupied by single person. If there are still none of\r\nthem, the restaurant denies service to this group.If a group consist of\r\ntwo people, it is seated at a vacant two-seater table. If there are none\r\nof them, the restaurant denies service to this group.You are given a\r\nchronological order of groups coming. You are to determine the total\r\nnumber of people the restaurant denies service to.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nint n,a,b,c=0,ans=0;\nint main(){\n\tscanf(\"%d%d%d\",&n,&a,&b);\n\tfor(int i=0,x;i<n;++i){\n\t\tscanf(\"%d\",&x);\n\t\tif(x==1){\n\t\t\tif(a)--a;\n\t\t\telse if(b)--b,++c;\n\t\t\telse if(c)--c;\n\t\t\telse ++ans;\n\t\t}else{\n\t\t\tif(b)--b;\n\t\t\telse ans+=2;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Restaurant Tables.json",
    "editorial_link": "https://codeforces.com//blog/entry/53268",
    "editorial": "We need to store three values: the number of free tables for one person,\r\nthe number of free tables for two persons and the number of tables for\r\ntwo persons occupied by single person.If the next group consisting of\r\npersons and there are no free tables for two persons (i. e. ) the\r\nrestaurant denies service to this group and we need to add to the\r\nanswer. In the other case, we need subtract one from and move to the\r\nnext group.If the next group consisting of person and there is free\r\ntable for one person (i. e. ) we need to subtract one from and move to\r\nthe next group. In the other case, if there is free table for two\r\npersons you need to put person for this table, subtract one from and add\r\none to . If there are no free tables but we need to subtract one form .\r\nIf no one from the described conditions did not met the restaurant\r\ndenies service to this group consisting of one person and we need to add\r\none to the answer and move to the next group.\r\n",
    "hint": []
}