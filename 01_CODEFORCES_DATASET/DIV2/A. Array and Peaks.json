{
    "link": "https://codeforces.com//contest/1513/problem/A",
    "problemId": "954478",
    "problem_idx": "A",
    "shortId": "1513A",
    "contest_number": "1513",
    "problem_submissions": {
        "F": [
            112704242,
            112708449,
            112692430,
            112693367,
            112715319,
            112703491,
            112694811,
            127489679,
            112714894,
            112706130
        ],
        "E": [
            112694829,
            112692532,
            112741611,
            112740521,
            112688817,
            112693970,
            112694924,
            112695544,
            112697383,
            112699670,
            112696818,
            112699923,
            112700793
        ],
        "D": [
            112684276,
            112682550,
            112679745,
            112679949,
            112677500,
            112683697,
            112682474,
            112682520,
            113011471,
            113011359,
            113011120,
            113011016,
            113009370,
            112680944,
            112706307,
            112684078,
            112683480,
            112687888,
            112686211,
            112688484,
            112694241
        ],
        "C": [
            112675074,
            112673956,
            112673377,
            112672093,
            112671463,
            112675182,
            112671664,
            112676030,
            112671692,
            112674449,
            112673953,
            112672990,
            112673437,
            112678260,
            112672998,
            112674969
        ],
        "B": [
            112671476,
            112670228,
            112670172,
            112670205,
            112668144,
            112670061,
            112665513,
            112670183,
            112667846,
            112669295,
            112667797,
            112667641,
            112669249,
            112668199,
            112668800,
            112667109
        ],
        "A": [
            112663904,
            112665049,
            112664695,
            112668785,
            112662814,
            112664430,
            112662730,
            112664013,
            112662970,
            112664151,
            112662873,
            112663063,
            112663560,
            112664683,
            112663477,
            112662816
        ]
    },
    "name": "A. Array and Peaks",
    "statement": "A sequence of n integers is called a permutation if it contains all\r\nintegers from 1 to n exactly once.Given two integers n and k, construct\r\na permutation a of numbers from 1 to n which has k peaks. An index i of\r\nan array a of size n is said to be a peak if 1 < i < n and a_i\r\ngt a_{i-1} and a_i\r\ngt a_{i+1}. If such permutation is not possible, then print -1.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <set>\nusing namespace std;\nconst int N = 110;\nint ans[N];\nvoid solve() {\n    int n, k;\n    scanf(\"%d%d\", &n, &k);\n    for (int i = 0; i < n; ++i) ans[i] = 0;\n    if (k > (n - 1) / 2) {\n        puts(\"-1\");\n        return;\n    }\n    int cnt = 1;\n    for (int i = 0; i < 2 * k + 1; i += 2) ans[i] = cnt++;\n    for (int i = 0; i < n; ++i) if (!ans[i]) ans[i] = cnt++;\n    for (int i = 0; i < n; ++i) {\n        printf(\"%d \", ans[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n#ifdef FLOWMASTER\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    int t;\n    scanf(\"%d\", &t);\n    for (int i = 0; i < t; ++i) solve();\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Array and Peaks.json",
    "editorial_link": "https://codeforces.com//blog/entry/89550",
    "editorial": "There are many ways to solve this problem. The key idea is we try to use\r\nthe first largest elements from to to construct the peaks. So try\r\nconstructing the array like this: . For this answer to be possible which\r\nmeans . If this is not the case we output .\r\n",
    "hint": []
}