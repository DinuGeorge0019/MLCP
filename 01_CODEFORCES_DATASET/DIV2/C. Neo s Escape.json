{
    "link": "https://codeforces.com//contest/2108/problem/C",
    "problemId": "3362875",
    "problem_idx": "C",
    "shortId": "2108C",
    "contest_number": "2108",
    "problem_submissions": {
        "F": [
            318074076,
            318053056,
            317979016,
            318049609
        ],
        "E": [
            318006093,
            318008858,
            318200795,
            318048861,
            317993756,
            318024876,
            318050412,
            318276432,
            318147145,
            318024521
        ],
        "D": [
            317992477,
            317998675,
            319182607,
            317974400,
            321240302,
            317977258,
            317980895,
            317988260,
            317993109,
            317993702,
            317988454,
            317989488,
            317995058,
            317996633,
            317997808,
            317997816
        ],
        "B": [
            317976080,
            317965188,
            317963351,
            317965896,
            317963448,
            318001512,
            317970540,
            317966965,
            317963770,
            317963355,
            317972547,
            317967881,
            317968086,
            317964661,
            317966671,
            317966562
        ],
        "C": [
            317971653,
            317968542,
            317966737,
            318055757,
            317968604,
            317966809,
            317989087,
            317975119,
            317971049,
            317970883,
            317968958,
            317966636,
            317975399,
            317977731,
            317971385,
            317972596,
            317970612,
            317972254
        ],
        "A": [
            317959967,
            317960152,
            317960238,
            317962142,
            317960060,
            317963735,
            317962697,
            317960613,
            317959940,
            317959918,
            317964465,
            317960821,
            317962779,
            317960858,
            317960520,
            317959969
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/142512",
    "editorial": "SolutionNote that consecutive buttons with the same weight do not affect\r\nthe result, so we will keep only one of them in such sequences.In the\r\nresulting array, we find peaks (local maxima elements that are strictly\r\ngreater than both of their neighbors). The number of such peaks is the\r\nanswer, because: Each peak is separated from others by smaller elements.\r\nTherefore, the only way to reach a peak is by creating a clone there. If\r\na button was visited, we can return to it. Any element other than a peak\r\ncan be reached from a larger neighbor, since we have already visited it.\r\nThus, creating clones in all other elements is not necessary.Complexity:\r\n",
    "name": "C. Neo s Escape",
    "statement": "Neo wants to escape from the Matrix. In front of him are n buttons\r\narranged in a row. Each button has a weight given by an integer: a_1,\r\na_2,\r\nldots, a_n.Neo is immobilized, but he can create and move clones. This\r\nmeans he can perform an unlimited number of actions of the following two\r\ntypes in any order: Create a clone in front of a specific button. Move\r\nan existing clone one position to the left or right. As soon as a clone\r\nis in front of another button that has not yet been pressed regardless\r\nof whether he was created or moved he presses it. If the button has\r\nalready been pressed, a clone does nothing buttons can only be pressed\r\nonce.For Neo to escape, he needs to press the buttons in such an order\r\nthat the sequence of their weights is that is, if b_1, b_2,\r\nldots, b_n are the weights of the buttons in the order they are pressed,\r\nthen it must hold that b_1\r\ngeq b_2\r\ngeq\r\ncdots\r\ngeq b_n.Your task is to determine the minimum number of clones that Neo\r\nneeds to create in order to press all the buttons in a valid order.\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "data structures",
        "dp",
        "dsu",
        "graphs",
        "greedy",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Neo s Escape.json",
    "hint": []
}