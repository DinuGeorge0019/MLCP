{"link": "https://codeforces.com//contest/1730/problem/C", "problemId": "1555171", "problem_idx": "C", "shortId": "1730C", "contest_number": "1730", "problem_submissions": {"F": [173481312, 173482867, 173478875, 173582676], "D": [173464501, 173463845, 173492235, 173460042, 173462224, 173461894, 173462011, 173463683, 173464123, 173466252, 173465903, 173465820, 173472784, 173476685, 173475004, 173471558, 173472223], "C": [173450456, 173450157, 173457042, 173452649, 173450776, 173453445, 173454802, 173455629, 173456866, 173446752, 173444646, 173455631, 173457312, 173447641, 173447077, 173451017, 173452623, 173453329], "B": [173445492, 173444904, 173458756, 173449524, 173445632, 173448108, 173451808, 173449142, 173453555, 173457120, 173455134, 173451905, 173454521, 173452227, 173444715, 173446889, 173447944, 173446921], "A": [173439407, 173438936, 173438879, 173443820, 173439220, 173439980, 173443156, 173443507, 173445064, 173455369, 173446952, 173439340, 173447666, 173440064, 173438737, 173441530, 173439874, 173440797], "E": [173564584, 173477480, 173568880]}, "name": "C. Minimum Notation", "statement": "You have a string s consisting of digits from 0 to 9 inclusive. You can\r\nperform the following operation any (possibly zero) number of times: You\r\ncan choose a position i and delete a digit d on the i-th position. Then\r\ninsert the digit\r\nmin{(d + 1, 9)} on any position (at the beginning, at the end or in\r\nbetween any two adjacent digits). What is the lexicographically smallest\r\nstring you can get by performing these operations?A string a is\r\nlexicographically smaller than a string b of the same length if and only\r\nif the following holds: in the first position where a and b differ, the\r\nstring a has a smaller digit than the corresponding digit in b.\r\n", "solutions": ["#pragma GCC optimize(\"Ofast\",\"unroll-loops\",\"omit-frame-pointer\",\"inline\") //Optimization flags\n#pragma GCC option(\"arch=native\",\"tune=native\",\"no-zero-upper\") //Enable AVX\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2\")\n#include<bits/stdc++.h>\n//#include<ext/pb_ds/assoc_container.hpp>\nusing namespace std;\n//using namespace __gnu_pbds;\nconst int inf=0x3f3f3f3f;\nconst double eps=1e-6;\nconst int mod=1e9+7;\ntypedef long long ll;\n#ifndef LOCAL\n#define cerr if(0)cout\n#define eprintf(...) 0\n#else\n#define eprintf(...) fprintf(stderr, __VA_ARGS__)\n#endif\ninline string getstr(string &s,int l,int r){string ret=\"\";for(int i=l;i<=r;i++)ret.push_back(s[i]);return ret;}\nint modpow(int x,int y,int md=mod){int ret=1;do{if(y&1)ret=(ll)ret*x%md;x=(ll)x*x%md;}while(y>>=1);return ret;}\ninline int Rand(){return rand()*32768+rand();}\nstring s;\nint t,n,cnt[200005][10];\nint main(){\n\tcin>>t;\n\twhile(t--){\n\t\tcin>>s;n=s.size();s=\" \"+s;\n\t\tmemset(cnt[n+1],0,sizeof cnt[n+1]);\n\t\tfor(int i=n;i>=1;i--){\n\t\t\tmemcpy(cnt[i],cnt[i+1],sizeof cnt[i]);\n\t\t\tcnt[i][s[i]-'0']++;\n\t\t}\n\t\tint pos=0;\n\t\tmap<int,int>cc;\n\t\tstring ans=\"\";\n\t\tfor(int i=1;i<=n;i++){\n\t\t\twhile(pos<=9&&!cnt[i][pos])pos++;\n\t\t\twhile(!cc.empty()&&cc.begin()->first+1<=pos){\n\t\t\t\tans+=('0'+min(9,cc.begin()->first+1));\n\t\t\t\tcc.begin()->second--;\n\t\t\t\tif(cc.begin()->second==0)cc.erase(cc.begin());\n\t\t\t}\n\t\t\tif(s[i]-'0'!=pos)cc[s[i]-'0']++;\n\t\t\telse ans+=s[i];\n\t\t}\n\t\tfor(auto p:cc)for(int j=0;j<p.second;j++)ans.push_back('0'+min(9,p.first+1));\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures", "greedy", "math", "sortings"], "dificulty": "1200", "interactive": false}