{
    "link": "https://codeforces.com//contest/1592/problem/E",
    "problemId": "1129223",
    "problem_idx": "E",
    "shortId": "1592E",
    "contest_number": "1592",
    "problem_submissions": {
        "F2": [
            130713058,
            130745405,
            130752812,
            130700115,
            130719186,
            130720967,
            130722508,
            130857743,
            130747284
        ],
        "F1": [
            130708913,
            130716472,
            130712966,
            130690640,
            130721286,
            130704100,
            130714549,
            130712433,
            130713697,
            130851358,
            130725206,
            130716184
        ],
        "E": [
            130702698,
            130695073,
            130712585,
            130690161,
            130713929,
            130713176,
            130705621,
            130689937,
            130710720,
            130851028,
            130710139,
            130712353,
            130705313,
            130701661,
            130698871,
            130698929,
            130696498
        ],
        "D": [
            130686766,
            130712124,
            130687989,
            130703162,
            130719297,
            130699331,
            130692683,
            130699442,
            130699159,
            130850999,
            130702540,
            130701084,
            130699463,
            130712566,
            130716938,
            130713876,
            130700116
        ],
        "C": [
            130673756,
            130678234,
            130691078,
            130722241,
            130692718,
            130685086,
            130684627,
            130684454,
            130695547,
            130686901,
            130682234,
            130850976,
            130687343,
            130686079,
            130680261,
            130693322,
            130682408,
            130683213,
            130708723,
            130704235
        ],
        "B": [
            130668341,
            130668419,
            130669045,
            130704250,
            130680256,
            130671878,
            130678194,
            130668270,
            130665664,
            130670263,
            130668846,
            130676770,
            130673397,
            130708534,
            130677615,
            130673769,
            130685667,
            130666906
        ],
        "A": [
            130663321,
            130663779,
            130671236,
            130667562,
            130676197,
            130664558,
            130674304,
            130663697,
            130663364,
            130664358,
            130664439,
            130664164,
            130666634,
            130663540,
            130663720,
            130665536,
            130664639,
            130664321,
            130671799
        ]
    },
    "name": "E. Bored Bakry",
    "statement": "Bakry got bored of solving problems related to xor, so he asked you to\r\nsolve this problem for him.You are given an array a of n integers [a_1,\r\na_2,\r\nldots, a_n].Let\u2019s call a subarray a_{l}, a_{l+1}, a_{l+2},\r\nldots, a_r if a_l\r\n,\r\n&\r\n, a_{l+1}\r\n,\r\n&\r\n, a_{l+2}\r\n,\r\nldots\r\n,\r\n&\r\n, a_r > a_l\r\noplus a_{l+1}\r\noplus a_{l+2}\r\nldots\r\noplus a_r, where\r\noplus denotes the bitwise XOR operation and\r\n& denotes the bitwise AND operation.Find the length of the longest good\r\nsubarray of a, or determine that no such subarray exists.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define rep(i,n) for (int i=1;i<=(n);i++)\nusing namespace std;\nconst int mod1=998244353,mod2=19491001;\nint n,a[1000005],b[1000005],ans;\nint f[1048585];\nint sf[1048585],sg[1048585];\nint cnt[1048585];\nint pos[1048585][2];\n/*void mul(int num)\n{\n\tfor(int i=0;i<num;i++)\n\t{\n\t\tsf[i]=1ll*sf[i]*f[i]%mod1;\n\t\tsg[i]=1ll*sg[i]*f[i]%mod2;\n\t}\n}\nbool check(int num,int ss)\n{\n\tint f0=0,g0=0;\n\tfor(int i=0;i<num;i++)\n\t{\n\t\tif(cnt[i&ss]&1)\n\t\t{\n\t\t\t(f0-=sf[i])%=mod1;\n\t\t\t(g0-=sg[i])%=mod2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t(f0+=sf[i])%=mod1;\n\t\t\t(g0+=sg[i])%=mod2;\n\t\t}\n\t}\n\treturn f0!=0||g0!=0;\n}*/\nvoid calc(int x)\n{\n\tmemset(pos,0,sizeof(pos));\n\tint lst=0;pos[b[0]][0]=1; \n\trep(i,n)\n\t{\n\t\tif((a[i]>>x)&1)\n\t\t{\n\t\t\tif(pos[(b[i]>>(x+1))][i&1])\n\t\t\t{\n\t\t\t\tans=max(ans,i-pos[(b[i]>>(x+1))][i&1]+1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int j=lst;j<i;j++)\n\t\t\t{\n\t\t\t\tpos[(b[j]>>(x+1))][j&1]=0;\n\t\t\t}\n\t\t\tlst=i;\n\t\t}\n\t\tif(!pos[(b[i]>>(x+1))][i&1]) pos[(b[i]>>(x+1))][i&1]=i+1;\n\t}\n\t\n}\nvoid solve()\n{\n\tfor(int i=0;i<(1<<20);i++) cnt[i]=__builtin_popcount(i);\n\tcin>>n;rep(i,n)(cin>>a[i]),b[i]=b[i-1]^a[i];\n\tfor(int i=0;i<20;i++) calc(i);\n\tcout<<ans<<endl;\n}\nint main()\n{\n\tsolve();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "greedy",
        "math",
        "two pointers"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Bored Bakry.json",
    "editorial_link": "https://codeforces.com//blog/entry/95583",
    "editorial": "Let denotes the bitwise and of the elements in subarray in the array and\r\ndenotes the bitwise xor of the elements in subarray in the array.If\r\nsubarray length is odd then it can\u00e2\u0080\u0099t be a good subarray because is a\r\nsubmask of since every bit in occurs odd times so it will be set in .If\r\nsubarray length is even then every bit in will be unset in so we only\r\ncare about the most significant bit in .Let\u00e2\u0080\u0099s solve for every bit ,\r\nLet\u00e2\u0080\u0099s call bit important bit if . For every in the array, We need to\r\nfind the minimum such that is even, is set in and all the important bits\r\nare unset in .Since we only care about the important bits, We can make a\r\nprefix array where is the prefix xor till the index considering only the\r\nimportant bits.So for every , we need to find the minimum that satisfy\r\nthese conditions: - is even. - is set in all elements in subarray . -\r\nxor . which can be solved easily in .\r\n"
}