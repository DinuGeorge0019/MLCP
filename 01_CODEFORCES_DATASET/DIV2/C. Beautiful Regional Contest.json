{
    "link": "https://codeforces.com//contest/1265/problem/C",
    "problemId": "486710",
    "problem_idx": "C",
    "shortId": "1265C",
    "contest_number": "1265",
    "problem_submissions": {
        "F": [
            66347509,
            66356863,
            66557730,
            66442620,
            66596419
        ],
        "D": [
            66340623,
            66367551,
            66338719,
            66334115,
            66337781,
            66335412,
            66337141,
            66346278,
            66339422,
            66338547,
            66341148,
            66339217,
            66340066,
            66341959,
            66331621,
            66342018,
            66346489,
            66340801,
            66342356,
            66342319,
            66343587
        ],
        "E": [
            66334163,
            66342621,
            66338591,
            66341637,
            66343875,
            66343996,
            66335345,
            66344209,
            66345114,
            66344975,
            66347923,
            66349901,
            66349558,
            66353633,
            66348910,
            66344231,
            66352728,
            66349177,
            66344898,
            66345749
        ],
        "C": [
            66327706,
            66330775,
            66334663,
            66328752,
            66329873,
            66333663,
            66331630,
            66332247,
            66329421,
            66334491,
            66334922,
            66330433,
            66331509,
            66336687,
            66333340,
            66334139,
            66330672,
            66335469,
            66331275,
            66338262
        ],
        "B": [
            66327279,
            66324231,
            66324702,
            66323571,
            66323717,
            66325187,
            66324433,
            66325466,
            66331477,
            66327697,
            66323823,
            66325202,
            66325641,
            66327180,
            66324867,
            66325852,
            66324365,
            66328628,
            66324650,
            66332154
        ],
        "A": [
            66323436,
            66367023,
            66322763,
            66325795,
            66322545,
            66322720,
            66322849,
            66322611,
            66322846,
            66324460,
            66323395,
            66326356,
            66322526,
            66323577,
            66323841,
            66322634,
            66323094,
            66322910,
            66325754,
            66323461,
            66323023
        ]
    },
    "name": "C. Beautiful Regional Contest",
    "statement": "So the Beautiful Regional Contest (BeRC) has come to an end! n students\r\ntook part in the contest. The final standings are already known: the\r\nparticipant in the i-th place solved p_i problems. Since the\r\nparticipants are primarily sorted by the number of solved problems, then\r\np_1\r\nge p_2\r\nge\r\ndots\r\nge p_n.Help the jury distribute the gold, silver and bronze medals. Let\r\ntheir numbers be g, s and b, respectively. Here is a list of\r\nrequirements from the rules, which all must be satisfied: for each of\r\nthe three types of medals, at least one medal must be awarded (that is,\r\ng>0, s>0 and b>0); the number of gold medals must be strictly less than\r\nthe number of silver and the number of bronze (that is, g<s and g<b, but\r\nthere are no requirements between s and b); each gold medalist must\r\nsolve strictly more problems than any awarded with a silver medal; each\r\nsilver medalist must solve strictly more problems than any awarded a\r\nbronze medal; each bronze medalist must solve strictly more problems\r\nthan any participant not awarded a medal; the total number of medalists\r\ng+s+b should not exceed half of all participants (for example, if n=21,\r\nthen you can award a maximum of 10 participants, and if n=26, then you\r\ncan award a maximum of 13 participants). The jury wants to reward with\r\nmedals the total number participants (i.e. to maximize g+s+b) so that\r\nall of the items listed above are fulfilled. Help the jury find such a\r\nway to award medals.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nint a[400005];\nint sum[400005];\nint n,m;\nvoid solve(int w){\n\tif(w==0) {printf(\"0 0 0\\n\");return ;}\n\tint u=sum[1],tot=0,psum=0,ans;\n\tfor(int i=2;i<=w;i++){\n\t\tpsum+=sum[i];\n\t\tif(psum>u){\n\t\t\ttot++;\n\t\t\tif(tot==1) ans=i;\n\t\t\tpsum=0;\n\t\t}\n\t}\n\tif(tot<2) {printf(\"0 0 0\\n\");return ;}\n\n\tprintf(\"%d \",sum[1]);\n\tu=0;for(int i=2;i<=ans;i++) u+=sum[i];\n\tprintf(\"%d \",u);\n\tu=0;for(int i=ans+1;i<=w;i++) u+=sum[i];\n\tprintf(\"%d\\n\",u);\n}\nint main(){\n\tint x,T;\nscanf(\"%d\",&T);\nwhile(T--){\n\tscanf(\"%d\",&n);a[0]=-1;m=0;\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&x);\n\t\tif(x!=a[m]) {a[++m]=x;sum[m]=1;} \n\t\telse sum[m]++;\n\t}\n\tint psum=0;\n\tfor(int i=1;i<=m;i++){\n\t\tif(2*(psum+sum[i])>n){\n\t\t\tsolve(i-1);\n\t\t\tbreak;\n\t\t}\t\n\t\tpsum+=sum[i]; \n\t}\n}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Beautiful Regional Contest.json",
    "editorial_link": "https://codeforces.com//blog/entry/71995",
    "editorial": "To solve this problem, we have to make the following observations: All\r\nparticipants who solved the same number of problems must be either not\r\nawarded at all or all are awarded a same type of medal. All awarded\r\nparticipants are the first participants. They can be proved based on the\r\nrules that the number of problems solved by a gold medalist > ones\r\nsolved by a silver medalist > ones solved by a bronze medalist > ones\r\nsolved by un-awarded participants.Suppose we have an optimal solution\r\nwith gold medals, silver medals and bronze medals where is maximized. We\r\ncan make the followings changes that resulted in another valid (and\r\nstill optimal) solution: Only keep gold medalist who solved most\r\nproblem. For others, we change their medal types from gold to silver.\r\nAfter this change, is unchanged and other rules are still satisfied.\r\nSimilarly, only keep a minimized number of silver medalist who solved\r\nmost problems among all silver medalist and the number of kept silver\r\nmust strictly larger than the number gold medals. For others, we change\r\ntheir medal types from silver to bronze. After this changed, is\r\nunchanged and other rules are still satisfied. Therefore, there exists\r\nan optimal solution where: is minimized then is minimized next. We can\r\ndetermine them greedily. When and are fixed, should be maximized such\r\nthat all rules are still satisfied.Time complexity:\r\n"
}