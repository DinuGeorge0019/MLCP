{
    "link": "https://codeforces.com//contest/1894/problem/C",
    "problemId": "2312800",
    "problem_idx": "C",
    "shortId": "1894C",
    "contest_number": "1894",
    "problem_submissions": {
        "E": [
            231780542,
            231780764,
            231783721,
            231789834,
            231788705,
            231788269,
            231784914,
            231788986,
            231801971,
            231786358,
            231788036,
            231815440,
            231786637,
            231808858,
            231789692,
            231801877,
            231817632,
            231801951
        ],
        "D": [
            231763745,
            231766056,
            231762523,
            231754895,
            231759834,
            231769389,
            231770188,
            231758327,
            231760530,
            231775160,
            231770452,
            231759047,
            231773241,
            231762950,
            231774799,
            231763275,
            231763670,
            231771730
        ],
        "C": [
            231756298,
            231755831,
            231757004,
            231877074,
            231770559,
            231763470,
            231760236,
            231765769,
            231774024,
            231754920,
            231758557,
            231758057,
            231762243,
            231765459,
            231756919,
            231760340,
            231755946,
            231756421,
            231763397
        ],
        "A": [
            231751883,
            231747419,
            231747509,
            231747329,
            231751165,
            231747346,
            231747376,
            231747139,
            231747693,
            231747813,
            231746849,
            231749093,
            231749182,
            231746695,
            231748186,
            231747273,
            231747195,
            231746971
        ],
        "B": [
            231748751,
            231750138,
            231749611,
            231749322,
            231755477,
            231750451,
            231753159,
            231749369,
            231750440,
            231749706,
            231748963,
            231754750,
            231753097,
            231749553,
            231754197,
            231749717,
            231750764,
            231754291
        ]
    },
    "name": "C. Anonymous Informant",
    "statement": "You are given an array b_1, b_2,\r\nldots, b_n.An anonymous informant has told you that the array b was\r\nobtained as follows: initially, there existed an array a_1, a_2,\r\nldots, a_n, after which the following two-component operation was\r\nperformed k times: A fixed point^{\r\ndagger} x of the array a was chosen. Then, the array a was cyclically\r\nshifted to the left^{\r\nddagger} exactly x times.As a result of k such operations, the array\r\nb_1, b_2,\r\nldots, b_n was obtained. You want to check if the words of the anonymous\r\ninformant can be true or if they are guaranteed to be false.^{\r\ndagger}A number x is called a fixed point of the array a_1, a_2,\r\nldots, a_n if 1\r\nleq x\r\nleq n and a_x = x.^{\r\nddagger}A cyclic left shift of the array a_1, a_2,\r\nldots, a_n is the array a_2,\r\nldots, a_n, a_1.\r\n",
    "solutions": [
        "#include <iostream>\n#include <unordered_set>\nusing namespace std;\n\nint n, k;\nint b[200010];\nbool vis[200010];\n\nvoid solve() {\n    cin >> n >> k;\n    for (int i = 1; i <= n; i++) {\n        cin >> b[i];\n    }\n    for (int i = 1; i <= n; i++) {\n        vis[i] = false;\n    }\n\n    unordered_set<int> s;\n    int cur = n;\n    bool ok = true;\n    for (int i = 1; i <= k; i++) {\n        if (b[cur] <= n) {\n            if (vis[cur]) {\n                break;\n            } else {\n                vis[cur] = true;\n            }\n            cur = ((cur - b[cur]) % n + n) % n;\n            if (cur == 0) { cur = n; }\n        } else {\n            ok = false;\n            break;\n        }\n    }\n\n    cout << (ok ? \"Yes\\n\" : \"No\\n\");\n}\n\nint main() {\n#ifdef ONLINE_JUDGE\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n#endif\n\n    int t;\n    cin >> t;\n    for (int i = 1; i <= t; i++) {\n        solve();\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "graphs",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Anonymous Informant.json",
    "editorial_link": "https://codeforces.com//blog/entry/122074",
    "editorial": "The key idea is that after applying an operation with the number x\n, the last element of the resulting array will be equal to x\n. Since after x\n cyclic shifts, the array [a1,a2,,an]\n will become [ax+1,,an,a1,,ax]\n, and ax=x\n, as x\n was a fixed point of the array a\n.\n\nFrom this idea, we can deduce that the operation can always be undone in at most one way: we need to look at the last element (an\n), and if an>n\n, it is not possible to undo the operation. Otherwise, we need to cyclically shift the array to the right an\n times.\n\nTherefore, the solution to the problem will be to undo the operation on the array by 1\n step k\n times. If at any point it becomes impossible to undo the operation, the answer is \"No\". Otherwise, the answer is \"Yes\".\n\nTo avoid explicitly shifting the array, we can store a variable s\n representing the index of the initial element, indicating that the current array is equal to [as,as+1,,an,a1,,as?1]\n. When cyclically shifting the array to the right by x\n, s\n decreases by x\n, initially s=1\n.\n\nAlso, since k\n in the problem can be up to 109\n, simulating k\n undo operations would be very time-consuming. However, we can notice that if we manage to undo the operation n\n times without breaking anything, we have entered a cycle. Therefore, if we successfully undo the operation n\n times, the answer is definitely \"Yes\". In other words, it was sufficient to do k = min(k, n).",
    "hint": []
}