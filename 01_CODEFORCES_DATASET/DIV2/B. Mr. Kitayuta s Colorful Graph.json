{
    "link": "https://codeforces.com//contest/505/problem/B",
    "problemId": "20816",
    "problem_idx": "B",
    "shortId": "505B",
    "contest_number": "505",
    "problem_submissions": {
        "C": [
            9462976,
            9461898,
            9459707,
            9460323,
            9475230,
            9461474,
            9461128,
            9460598,
            9463476,
            9462889,
            9462051,
            9463671,
            9462825,
            9465572,
            9465481,
            9462466,
            9464504,
            9463286,
            9463626,
            9462651,
            9461631
        ],
        "D": [
            9460671,
            9463777,
            9464008,
            9474989,
            9464501,
            9744902
        ],
        "B": [
            9456425,
            9457631,
            9456673,
            22609961,
            9456565,
            9458361,
            9457629,
            9458613,
            9458858,
            9457628,
            9457194,
            9457755,
            9457863,
            9458685,
            9458451,
            9458743,
            9457349,
            9458774,
            9459522,
            9459663,
            9461689
        ],
        "A": [
            9456096,
            9456444,
            9456105,
            9456129,
            9456125,
            9456286,
            9457000,
            9456383,
            9456164,
            9456547,
            9456739,
            9457117,
            9457263,
            9456225,
            9456374,
            9456854,
            9456408,
            9460374,
            9456267
        ]
    },
    "name": "B. Mr. Kitayuta s Colorful Graph",
    "statement": "Mr. Kitayuta has just bought an undirected graph consisting of vertices\r\nand edges. The vertices of the graph are numbered from 1 to . Each edge,\r\nnamely edge , has a color , connecting vertex and .Mr. Kitayuta wants\r\nyou to process the following queries.In the -th query, he gives you two\r\nintegers and .Find the number of the colors that satisfy the following\r\ncondition: the edges of that color connect vertex and vertex directly or\r\nindirectly.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<vector>\nusing namespace std;\nvector<pair<int,int> >connexion[200];\nint N,M;\nbool visited[200];\nvoid dfs(int s,int c)\n{\n\tif(visited[s]) return;\n\tvisited[s]=true;\n\tfor(int i=0;i<connexion[s].size();i++)\n\t\tif(connexion[s][i].second==c)\n\t\t\tdfs(connexion[s][i].first,c);\n\treturn;\n}\nint main()\n{\n\tscanf(\"%d%d\",&N,&M);\n\tfor(int i=0;i<M;i++)\n\t{\n\t\tint x,y,t;\n\t\tscanf(\"%d%d%d\",&x,&y,&t);\n\t\tx--;y--;\n\t\tconnexion[x].push_back(make_pair(y,t));\n\t\tconnexion[y].push_back(make_pair(x,t));\n\t}\n\tint Q;\n\tscanf(\"%d\",&Q);\n\twhile(Q--)\n\t{\n\t\tint s,e;\n\t\tscanf(\"%d%d\",&s,&e);\n\t\ts--;e--;\n\t\tint cnt=0;\n\t\tfor(int i=1;i<=M;i++)\n\t\t{\n\t\t\tfor(int i=0;i<N;i++) visited[i]=false;\n\t\t\tdfs(s,i);\n\t\t\tcnt+=visited[e];\n\t\t}\n\t\tprintf(\"%d\\n\",cnt);\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "dsu",
        "graphs"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Mr. Kitayuta s Colorful Graph.json",
    "editorial_link": "https://codeforces.com/blog/entry/15889",
    "editorial": "[Problem] Given an undirected graph whose edges are painted in colors,\r\nprocess the queries of the following form: (Problem by hogloid) Since\r\nneither the graph nor the number of queries is too large, for each query\r\nyou can simply count the number of the \"good\" colors (the colors that\r\nsatisfies the condition) by checking if each color is \"good\". To do\r\nthat, you can perform Depth First Search (or Breadth First Search) and\r\nverify whether you can reach from traversing only the edges of that\r\ncolor. If you prefer using Union-Find, it will also do the job. The\r\nwriter\u00e2\u0080\u0099s code (DFS, C++)The writer\u00e2\u0080\u0099s code (Union-Find, C++)\r\n"
}