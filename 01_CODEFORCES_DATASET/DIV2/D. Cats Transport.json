{"link": "https://codeforces.com//contest/312/problem/D", "problemId": "3076", "problem_idx": "D", "shortId": "312D", "contest_number": "312", "problem_submissions": {"E": [3778375], "C": [3774702, 3773864, 3774792, 3774689, 3776105, 3773907, 3773846, 3775050, 3773635, 3774279, 3774399, 3773754, 3775215, 3774292, 3774384], "B": [3773077, 3774557, 3779474, 3775117, 3773571, 3772833, 3772990, 3773895, 3772721, 3773544, 3773209, 3774498, 3773503, 3773699], "A": [3772354, 3772684, 3772223, 3772222, 3772433, 3772649, 3772082, 3772196, 3772425, 3772220, 3772483, 3773026], "D": [3778537, 3783020]}, "name": "D. Cats Transport", "statement": "Zxr960115 is owner of a large farm. He feeds cute cats and employs\r\nfeeders. There\u2019s a straight road across the farm and hills along the\r\nroad, numbered from 1 to from left to right. The distance between hill\r\nand is meters. The feeders live in hill 1.One day, the cats went out to\r\nplay. Cat went on a trip to hill , finished its trip at time , and then\r\nwaited at hill for a feeder. The feeders must take all the cats. Each\r\nfeeder goes straightly from hill 1 to without waiting at a hill and\r\ntakes all the cats at each hill away. Feeders walk at a speed of 1 meter\r\nper unit time and are strong enough to take as many cats as they\r\nwant.For example, suppose we have two hills and one cat that finished\r\nits trip at time 3 at hill 2 . Then if the feeder leaves hill 1 at time\r\n2 or at time 3, he can take this cat, but if he leaves hill 1 at time 1\r\nhe can\u2019t take it. If the feeder leaves hill 1 at time 2, the cat waits\r\nhim for 0 time units, if the feeder leaves hill 1 at time 3, the cat\r\nwaits him for 1 time units.Your task is to schedule the time leaving\r\nfrom hill 1 for each feeder so that the sum of the waiting time of all\r\ncats is minimized.\r\n", "solutions": ["#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\n\nconst int MAXN = 101000, MAXP = 105;\ntypedef long long LL;\n\nint n, m, p, d[MAXN], h[MAXN], t[MAXN], s[MAXN];\nint head[MAXP], tail[MAXP], que[MAXP][MAXN];\nLL f[MAXN][MAXP], sum[MAXN];\n\nvoid Insert(int id, int i)\n{\n\twhile (head[id] < tail[id] && \n\t\t(LL)(f[que[id][tail[id] - 1]][id] + sum[que[id][tail[id] - 1]] - f[que[id][tail[id]]][id] - sum[que[id][tail[id]]]) * (que[id][tail[id]] - i) >=\n\t\t(LL)(f[que[id][tail[id]]][id] + sum[que[id][tail[id]]] - f[i][id] - sum[i]) * (que[id][tail[id] - 1] - que[id][tail[id]]))\n\t\t\t--tail[id];\n\tque[id][++tail[id]] = i;\n}\nint Get(int i, int id)\n{\n//\tcout << head[id] << \" \" << tail[id] << \" \" << id << endl;\n//\tfor (int j = head[id]; j <= tail[id]; ++j)\n//\t\tcout << que[id][j] << \" \";\n//\tcout << endl;\n\twhile (head[id] < tail[id] && f[que[id][head[id]]][id] + sum[que[id][head[id]]] - f[que[id][head[id] + 1]][id] - sum[que[id][head[id] + 1]] > (LL)(que[id][head[id]] - que[id][head[id] + 1]) * s[i])\n\t\t++head[id];\n\treturn que[id][head[id]];\n}\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"input.txt\", \"r\", stdin), freopen(\"output.txt\", \"w\", stdout);\n#endif\n\tscanf(\"%d%d%d\", &n, &m, &p);\n\tfor (int i = 2; i <= n; ++i)\n\t\tscanf(\"%d\", &d[i]),\n\t\td[i] += d[i - 1];\n\tfor (int i = 1; i <= m; ++i)\n\t\tscanf(\"%d%d\", &h[i], &t[i]),\n\t\ts[i] = t[i] - d[h[i]];\n\tsort(s + 1, s + m + 1);\n\tfor (int i = 1; i <= m; ++i)\n\t\tsum[i] = sum[i - 1] + s[i];//, cout << s[i] << endl;\n\tfor (int i = 1; i <= m; ++i)\n\t\tfor (int j = 1; j <= p; ++j)\n\t\t{\n\t\t\tint k = Get(i, j - 1);\n//\t\t\tcout << k << endl;\n\t\t\tf[i][j] = f[k][j - 1] + (LL)(i - k) * s[i] - (LL)(sum[i] - sum[k]);\n\t\t\tInsert(j, i);\n//\t\t\tcout << i << \" \" << j << \" \" << f[i][j] << endl;\n\t\t}\n\tcout << f[m][p] << endl;\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["dp"], "dificulty": "2400", "interactive": false}