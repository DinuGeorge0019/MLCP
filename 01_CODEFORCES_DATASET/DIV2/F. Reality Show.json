{
    "link": "https://codeforces.com//contest/1323/problem/F",
    "problemId": "555655",
    "problem_idx": "F",
    "shortId": "1323F",
    "contest_number": "1323",
    "problem_submissions": {
        "E": [
            72646123,
            72653285,
            72643665,
            72638538,
            72651824,
            72641452,
            73215564,
            74923998,
            74923708,
            73375083
        ],
        "D": [
            72641565,
            72643228,
            72648719,
            72647003,
            72657000,
            72637909,
            72646207,
            72643501,
            72637563,
            72646014,
            72647579,
            72648996,
            72648307,
            72652014,
            72649186,
            72646691,
            72649030,
            72650695,
            72651530
        ],
        "B": [
            72636401,
            72633103,
            72651379,
            72658721,
            72640042,
            72636596,
            72635014,
            72632358,
            72634390,
            72641816,
            72634710,
            72636519,
            72636057,
            72635279,
            72633123,
            72635193,
            72638653,
            72635061,
            72634039,
            72635382
        ],
        "A": [
            72633163,
            72628485,
            72649551,
            72644013,
            72634218,
            72632880,
            72629084,
            72628191,
            72629890,
            72628412,
            72628653,
            72634993,
            72629129,
            72628869,
            72628314,
            72629285,
            72631475,
            72629827,
            72628727,
            72629930
        ],
        "C": [
            72632322,
            72637080,
            72632032,
            72656932,
            72642708,
            72635949,
            72629179,
            72635274,
            72637583,
            72643824,
            72637576,
            72633880,
            72637844,
            72637960,
            72635809,
            72640203,
            72642430,
            72637773,
            72640096,
            72637917
        ],
        "F": [
            72957747
        ]
    },
    "name": "F. Reality Show",
    "statement": "A popular reality show is recruiting a new cast for the third season! n\r\ncandidates numbered from 1 to n have been interviewed. The candidate i\r\nhas aggressiveness level l_i, and recruiting this candidate will cost\r\nthe show s_i roubles.The show host reviewes applications of all\r\ncandidates from i=1 to i=n by increasing of their indices, and for each\r\nof them she decides whether to recruit this candidate or not. If\r\naggressiveness level of the candidate i is strictly higher than that of\r\nany candidates, then the candidate i will definitely be rejected.\r\nOtherwise the host may accept or reject this candidate at her own\r\ndiscretion. The host wants to choose the cast so that to maximize the\r\ntotal .The show makes revenue as follows. For each aggressiveness level\r\nv a corresponding profitability value c_v is specified, which can be\r\npositive as well as negative. All recruited participants enter the stage\r\none by one by increasing of their indices. When the participant i enters\r\nthe stage, events proceed as follows: The show makes c_{l_i} roubles,\r\nwhere l_i is initial aggressiveness level of the participant i. If there\r\nare two participants with the same aggressiveness level on stage, they\r\nimmediately start a fight. The outcome of this is: the defeated\r\nparticipant is hospitalized and leaves the show. aggressiveness level of\r\nthe victorious participant is increased by one, and the show makes c_t\r\nroubles, where t is the new aggressiveness level. The fights continue\r\nuntil all participants on stage have distinct aggressiveness levels. It\r\nis allowed to select an empty set of participants (to choose neither of\r\nthe candidates).The host wants to recruit the cast so that the total\r\nprofit is maximized. The profit is calculated as the total revenue from\r\nthe events on stage, less the total expenses to recruit all accepted\r\nparticipants (that is, their total s_i). Help the host to make the show\r\nas profitable as possible.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n \nusing namespace std;\nconst int MAXN = 4000 + 10;\n//错误笔记:数组开小了\nconst int MAXM = 1e4 + 10;\nconst int INF = 0x3f3f3f3f;\nint f[MAXN][MAXN], c[MAXM], n, m;\nstruct rec{int l, s;}a[MAXN];\nbool comp(rec x, rec y){ return x.l < y.l;};\nint l[MAXN], s[MAXN];\ninline void init(void){\n    scanf(\"%d%d\", &n, &m);\n    for(register int i = n; i >= 1; -- i) scanf(\"%d\", &l[i]);\n    for(register int i = n; i >= 1; -- i) scanf(\"%d\", &s[i]);\n    for(register int i = 1; i <= n + m; ++ i) scanf(\"%d\", &c[i]);\n}   \n \ninline void work(void){\n    for(register int i = 1; i <= n + m; ++ i)\n        for(register int j = 0; j <= n; ++ j) f[i][j] = -INF;\n    for(register int i = 0; i <= n + m; ++ i) f[i][0] = 0;\n    for(register int i = 1; i <= n; ++ i){\n        for(int j = n; j >= 1; -- j) f[l[i]][j] = max(f[l[i]][j], f[l[i]][j - 1] + c[l[i]] - s[i]);\n        for(int j = l[i], k = n; j < n + m; ++ j, k >>= 1)\n            for(int p = 0; p <= k; ++ p) f[j + 1][p / 2] = max(f[j + 1][p / 2], f[j][p] + (p / 2) * c[j + 1]);\n    }\n    printf(\"%d\", f[n + m][0]);\n}\n \nint main(){\n    init(); work();\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "dp",
        "dp"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Reality Show.json",
    "editorial_link": "https://codeforces.com//blog/entry/74148",
    "editorial": "First of all, we will notice that the order of entering doesn't affect the answer.\n\nLet's reverse the sequence. We will add people in the non-decreasing order. Let's use dynamic programming: dp[i][k][cnt]\n is the answer if we processed first i\n candidates with the maximum value less or equal k\n and total number of people who will reach lj=k\n is cnt?n\n.\n\nHow we should change values of dp\n when we go from k\n to k+1\n? dp[i][k+1][cnt/2]?dp[i][k][cnt]+(cnt/2)?ck+1\n\nBut how dp\n changes when we take i\n-th element? dp[i+1][ai][cnt]?dp[i][ai][cnt?1]+si\n\nAfter adding i\n-th element we also should change dp[i+1][>ai]\n. But every next lay will change less: n+?n2?+?n4?+?n8?+=O(n+m)\n.\n\nIt clear, that we can remove first parameter of dp\n and finally get the asymptotics O(n(n+m))\n.",
    "hint": []
}