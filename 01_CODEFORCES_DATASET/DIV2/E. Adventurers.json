{
    "link": "https://codeforces.com//contest/2047/problem/E",
    "problemId": "3064637",
    "problem_idx": "E",
    "shortId": "2047E",
    "contest_number": "2047",
    "problem_submissions": {
        "F": [
            294576018
        ],
        "D": [
            294556181,
            294550999,
            294551362,
            294549113,
            294552457,
            294549132,
            294545443,
            294545413,
            294553157,
            294554253,
            294547704,
            294545194,
            294551491,
            294546981,
            294545215,
            294554235,
            294551596,
            294555080,
            294553722
        ],
        "E": [
            294553658,
            294561058,
            294564356,
            294560884,
            294607752,
            294607657,
            294607423,
            294566840,
            294564602,
            294566710,
            294567902,
            294566502,
            294566942,
            294570129,
            294573472,
            294575252,
            294574930,
            294577351,
            294571682,
            294573929,
            294572766,
            294572872
        ],
        "C": [
            294537935,
            294544794,
            294543033,
            294543024,
            294539849,
            294544621,
            294540793,
            294540644,
            294546521,
            294548997,
            294552751,
            294541180,
            294538453,
            294540477,
            294539426,
            294541750,
            294543785,
            294533886,
            294545247
        ],
        "B": [
            294536414,
            294542160,
            294535717,
            294539853,
            294536380,
            294540106,
            294537951,
            294533781,
            294538848,
            294537306,
            294538421,
            294536540,
            294535134,
            294536248,
            294536341,
            294535891,
            294535533,
            294543631,
            294541462
        ],
        "A": [
            294533410,
            294535816,
            294532913,
            294532916,
            294533402,
            294535536,
            294533238,
            294535567,
            294533545,
            294533451,
            294534370,
            294533884,
            294532708,
            294533038,
            294533136,
            294533187,
            294540270,
            294536728,
            294532860
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136908",
    "editorial": "The first idea is to notice, that each element is moved to the back at most once. Indeed, if we fix a subset of elements that we ever move to the back, we can perform the operation once on each of them in any order we like, and that becomes their final order with the smallest possible increase. The optimal order is, of course, the increasing order. The question is how to select this subset of elements to move to the back.\n\nSince we need the lexicographically smallest array, we're looking for some greedy approach that chooses the smallest possible element on the next position one by one, left to right.\n\nWhat's the smallest number our resulting array can start with? Of course, the minimum. That means, all the elements in front of the minimum have to be moved to the back and be increased by one.\nWhat's the smallest number we can have on the second place, given that we have the minimum in the first positions? Either the smallest element to the right of the minimum, or the smallest element among those already moved to the back.\n...\nAnalysing this approach, we see that as we go left to right, we keep picking elements from the suffix minima sequence, and keep growing the set of elements we have to move to the right to ''extract'' this sequence from the initial array. At one point, the next smallest element comes not from the suffix minima sequence, but from the pile of integers we move to the right. At this point, all the remaining elements have to be moved to the right once (that is, increased by 1\n), and then listed in sorted order.\n\nSo, the answer is always several first elements of the suffix minima sequence, starting from the global minimum, and then all other elements, increased by 1\n and sorted in increased order. To find the point where we switch from the suffix minima sequence to the moved elements, it is convenient to precomute the minima, and keep a set of those elements we already move to the right.",
    "name": "E. Adventurers",
    "statement": "Once, four Roman merchants met in a Roman mansion to discuss their\r\ntrading plans. They faced the following problem: they traded the same\r\ntype of goods, and if they traded in the same city, they would\r\ninevitably incur losses. They decided to divide up the cities between\r\nthem where they would trade.The map of Rome can be represented in this\r\nproblem as a plane with certain points marked the cities of the Roman\r\nEmpire.The merchants decided to choose a certain (x_0, y_0). Then, in a\r\ncity with coordinates (x_i, y_i), the first merchant sells goods if x_0\r\nle x_i and y_0\r\nle y_i; the second merchant sells goods if x_0 > x_i and y_0\r\nle y_i; the third merchant sells goods if x_0\r\nle x_i and y_0 > y_i; the fourth merchant sells goods if x_0 > x_i and\r\ny_0 > y_i. The merchants want to choose (x_0, y_0) in such a way as to\r\nthat any of them gets (i. e., as fair as possible). Please find such a\r\npoint for them.\r\n",
    "solutions": [
        "#pragma GCC optimize(\"-Ofast\",\"-funroll-all-loops\",\"-ffast-math\")#pragma GCC optimize(\"inline\",\"fast-math\",\"unroll-loops\",\"no-stack-protector\")//#pragma GCC target(\"avx,avx2,sse,sse2,sse3,ssse3,sse4,abm,popcnt,mmx\")#include <bits/stdc++.h>using namespace std;#define endl '\\n' mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());mt19937_64 rng64(chrono::steady_clock::now().time_since_epoch().count()); int rnd(int a, int b) {\treturn rng() % (b - a + 1) + a;} string to_string(string s) { return s; }template <typename T> string to_string(T v) {  bool first = true;  string res = \"[\";  for (const auto &x : v) {    if (!first)      res += \", \";    first = false;    res += to_string(x);  }  res += \"]\";  return res;} void dbg_out() { cerr << endl; }template <typename Head, typename... Tail> void dbg_out(Head H, Tail... T) {  cerr << ' ' << to_string(H);  dbg_out(T...);} #define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__) template<class T> inline void chkmin(T& x, T y) { if (y < x) x = y; }template<class T> inline void chkmax(T& x, T y) { if (y > x) x = y; } using i64 = long long;using u64 = unsigned long long;using u32 = unsigned;using pi = pair<int, int>; const i64 INF = 1e18;const int oo = 1e9;const int mod = 1e9 + 7;const int MX = 100005; template <class T>struct BinaryIndexedTree{\tint n;\tvector<T> bit;\tBinaryIndexedTree(void) : n(0) { }\tBinaryIndexedTree(int n) {\t\tresize(n);\t}\tvoid resize(const int & n) {\t\tthis->n = n;\t\tbit.clear();\t\tbit.resize(n, 0);\t}\tvoid add(const int & x, const T & d) {\t\tfor (int i = x + 1; i <= n; i += i & -i) \t\t\tbit[i - 1] += d;\t}\tT sum(const int & x) { // [0, x)\t\tT ans = 0;\t\tfor (int i = x; i > 0; i -= i & -i) ans += bit[i - 1];\t\treturn ans;\t}\tT RangeSum(int l, int r) { // [l, r)\t\treturn sum(r) - sum(l);\t}\tint lower_bound(T s) {\t\tint ans = 0, k = 0, b = 0;\t\tfor (; (1 << k) <= n; k ++) ;\t\tfor (k --; k >= 0; k --) {\t\t\tb = 1 << k;\t\t\tif (ans + b <= n && bit[ans + b - 1] < s) {\t\t\t\tans ^= b;\t\t\t\ts -= bit[ans - 1];\t\t\t}\t\t}\t\treturn ans;\t}\tint upper_bound(T s) {\t\tint ans = 0, k = 0, b = 0;\t\tfor (; (1 << k) <= n; k ++);\t\tfor (k --; k >= 0; k --) {\t\t\tb = 1 << k;\t\t\tif (ans + b <= n && bit[ans + b - 1] <= s) {\t\t\t\tans ^= b;\t\t\t\ts -= bit[ans - 1];\t\t\t}\t\t}\t\treturn ans;\t}}; void solve() {\tint n; cin >> n;\tvector<pi> a(n);\tvector<int> vx, vy;\tfor (int i = 0; i < n; i++) {\t\tcin >> a[i].first >> a[i].second;\t\t\tvx.push_back(a[i].first);\t\tvy.push_back(a[i].second);\t}\tsort(vx.begin(), vx.end()); vx.erase(unique(vx.begin(), vx.end()), vx.end());\tsort(vy.begin(), vy.end()); vy.erase(unique(vy.begin(), vy.end()), vy.end());\tvector<vector<int>> con(vx.size());\tfor (int i = 0; i < n; i++) {\t\ta[i].first = lower_bound(vx.begin(), vx.end(), a[i].first) - vx.begin();\t\ta[i].second = lower_bound(vy.begin(), vy.end(), a[i].second) - vy.begin();\t\t\tcon[a[i].first].push_back(i);\t}\t\tpi ans = pi(0, 0);\tauto can = [&] (int m) -> bool {\t\tif (m == 0) return true;\t\tint sy = vy.size(), sx = vx.size();\t\tvector<pi> pre(sx);\t\t{\t\t\tBinaryIndexedTree<int> bt(sy + 10), ibt(sy + 10);\t\t\tfor (int x = 0; x < sx; x++) {\t\t\t\tfor (auto i : con[x]) {\t\t\t\t\tbt.add(a[i].second, 1);\t\t\t\t\tibt.add(sy - 1 - a[i].second, 1);\t\t\t\t}\t\t\t\tint dp = bt.lower_bound(m);\t\t\t\tint up = sy - 1 - ibt.lower_bound(m);\t\t\t\tpre[x] = pi(dp, up - 1);\t\t\t}\t\t}\t\t{\t\t\tBinaryIndexedTree<int> bt(sy + 10), ibt(sy + 10);\t\t\tfor (int x = sx - 1; x >= 1; x --) {\t\t\t\tfor (auto i : con[x]) {\t\t\t\t\tbt.add(a[i].second, 1);\t\t\t\t\tibt.add(sy - 1 - a[i].second, 1);\t\t\t\t}\t\t\t\tint dp = bt.lower_bound(m);\t\t\t\tint up = sy - 1 - ibt.lower_bound(m);\t\t\t\tup --;\t\t\t\tif (dp <= up) {\t\t\t\t\tint dd = pre[x - 1].first, uu = pre[x - 1].second;\t\t\t\t\tif (dd > up || dp > uu || dd > uu) continue;\t\t\t\t\tvector<int> ct(sy);\t\t\t\t\tfor (int i = dd; i <= uu; i++) ct[i] ++;\t\t\t\t\tfor (int i = dp; i <= up; i++) ct[i] ++;\t\t\t\t\tfor (int i = 0; i < sy; i++) {\t\t\t\t\t\tif (ct[i] == 2) {\t\t\t\t\t\t\tans = pi(vx[x - 1], vy[i]);\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\treturn true;\t\t\t\t}\t\t\t}\t\t}\t\treturn false;\t};\t\tint st = 0, en = n / 4;\twhile (en - st > 1) {\t\tint md = st + en >> 1;\t\tif (can(md)) st = md;\t\telse en = md - 1;\t\t}\tif (can(en)) st = en;\tcout << st << \"\\n\";\tcout << ans.first + 1 << ' ' << ans.second + 1 << \"\\n\";} int main() {#ifndef ONLINE_JUDGE\tfreopen(\"in.txt\", \"r\", stdin);//\tfreopen(\"out.txt\", \"w\", stdout);#endif \tios::sync_with_stdio(0);\tcin.tie(0); cout.tie(0); \tint Tc = 1;\tcin >> Tc;\twhile (Tc --) {\t\tsolve();\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "flows",
        "greedy",
        "implementation"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Adventurers.json",
    "hint": []
}