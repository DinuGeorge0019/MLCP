{
    "link": "https://codeforces.com//contest/761/problem/F",
    "problemId": "90963",
    "problem_idx": "F",
    "shortId": "761F",
    "contest_number": "761",
    "problem_submissions": {
        "E": [
            24312697,
            24311709,
            24310168,
            24311976,
            24311188,
            24315381,
            24312128,
            24315134,
            24315757,
            24315051,
            24311586,
            24318302,
            24316465,
            24310698,
            24314080,
            24317203,
            24314720,
            24307483,
            24315644,
            24308867
        ],
        "D": [
            24308080,
            24302806,
            24306764,
            24303840,
            24312711,
            24310952,
            24308712,
            24308632,
            24304486,
            24318361,
            24305083,
            24314765,
            24313344,
            24306662,
            24308564,
            24311519,
            24304640,
            24301778,
            24312201,
            24302140
        ],
        "C": [
            24304705,
            24303281,
            24303086,
            24315151,
            24314006,
            24300409,
            24305328,
            24308132,
            24307670,
            24308073,
            24301179,
            24311655,
            24307103,
            24301133,
            24303312,
            24299854,
            24299226,
            24307641,
            24303935
        ],
        "A": [
            24296943,
            24297317,
            24293268,
            24295355,
            24314899,
            24301549,
            24295024,
            24293258,
            24293478,
            24294436,
            24294254,
            24298618,
            24301924,
            24304008,
            24305575,
            24293046,
            24297813
        ],
        "B": [
            24295947,
            24297573,
            24299480,
            24314233,
            24314669,
            24296673,
            24301229,
            24303624,
            24311945,
            24304611,
            24297096,
            24300811,
            24301955,
            24297423,
            24296616,
            24298776,
            24296843,
            24310580,
            24301114,
            24295172
        ],
        "F": [
            24322841,
            24309197,
            24319670
        ]
    },
    "name": "F. Dasha and Photos",
    "statement": "Dasha decided to have a rest after solving the problem and began to look\r\nphotos from previous competitions.Let\u2019s call photos as the matrix with\r\nthe size , which consists of lowercase English letters.Some photos\r\nespecially interested her, because they can be received from\r\nphoto-template by painting a rectangular area in a certain color. Let\u2019s\r\ncall such photos special. More formally the -th special photo is\r\nreceived from the photo-template by replacing all characters on some\r\nrectangle with upper left corner of the cell with coordinates and lower\r\nright corner in the cell with coordinates to the symbol .Dasha asks you\r\nto find the special photo so that the total distance from it to all\r\nother special photos is minimum. And calculate this distance.Determine\r\nthe distance between two photos as the sum of distances between all\r\ncorresponding letters. The distance between two letters is the\r\ndifference module of their positions in the alphabet. For example, the\r\ndistance between letters \u201d and \u201d equals , because the letter \u201d is the\r\n8-th in the alphabet, the letter \u201d is the 13-th.\r\n",
    "solutions": [
        "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstdio>\n#include<cstdlib>\n#include<queue>\n#include<utility>\n#include<string>\nusing namespace std;\n\ntypedef long long int lint;\n\nconst int MAX_N = 300005;\nconst lint INF = 1e9;\n\nint W, H, N;\nchar state[1005][1005];\nlint acc[1005][1005][26];\nint a[MAX_N], b[MAX_N], c[MAX_N], d[MAX_N]; char e[MAX_N];\nlint diff[1005][1005][26], diff_org[1005][1005];\n\nint main() {\n\n    scanf(\"%d%d%d\", &H, &W, &N);\n    for(int i = 0; i < H; i++) {\n        scanf(\"%s\", state[i]);\n    }\n    for(int i = 1; i <= N; i++) {\n        char dummy;\n        scanf(\"%d%d%d%d%c%c\", &a[i], &b[i], &c[i], &d[i], &dummy, &e[i]);\n        a[i]--; b[i]--; c[i]--; d[i]--;\n        acc[a[i]][b[i]][e[i] - 'a']++;\n        acc[c[i] + 1][b[i]][e[i] - 'a']--;\n        acc[a[i]][d[i] + 1][e[i] - 'a']--;\n        acc[c[i] + 1][d[i] + 1][e[i] - 'a']++;\n    }\n    for(int i = 0; i < H; i++) {\n        for(int j = 0; j < W; j++) {\n            for(int k = 0; k < 26; k++) {\n                acc[i][j][k] += (i > 0 ? acc[i-1][j][k] : 0) + (j > 0 ? acc[i][j-1][k] : 0) - (i > 0 && j > 0 ? acc[i-1][j-1][k] : 0);\n            }\n        }\n    }\n    for(int i = 0; i < H; i++) {\n        for(int j = 0; j < W; j++) {\n            int sum = 0;\n            for(int k = 0; k < 26; k++) sum += acc[i][j][k];\n            acc[i][j][state[i][j] - 'a'] += (N - sum);\n        }\n    }\n    for(int i = 0; i < H; i++) {\n        for(int j = 0; j < W; j++) {\n            for(int k = 0; k < 26; k++) {\n                diff_org[i][j] += acc[i][j][k] * abs( k - (state[i][j] - 'a') );\n            }\n            lint sum = 0LL, lval = 0LL, rval = 0LL;\n            for(int k = 0; k < 26; k++) {\n                sum += acc[i][j][k] * (k + 1);\n                rval += acc[i][j][k];\n            }\n            for(int k = 0; k < 26; k++) {\n                sum += lval - rval;\n                lval += acc[i][j][k]; rval -= acc[i][j][k];\n                diff[i][j][k] = sum;\n            }\n        }\n    }\n    for(int i = 0; i < H; i++) {\n        for(int j = 0; j < W; j++) {\n            diff_org[i][j] += ( i > 0 ? diff_org[i-1][j] : 0 ) + ( j > 0 ? diff_org[i][j-1] : 0 ) - ( i > 0 && j > 0 ? diff_org[i-1][j-1] : 0 );\n            for(int k = 0; k < 26; k++) {\n                diff[i][j][k] += ( i > 0 ? diff[i-1][j][k] : 0 ) + ( j > 0 ? diff[i][j-1][k] : 0 ) - ( i > 0 && j > 0 ? diff[i-1][j-1][k] : 0 );\n            }\n        }\n    }\n\n    lint ret = 1e15;\n    for(int i = 1; i <= N; i++) {\n        lint val = diff_org[H - 1][W - 1]\n            - diff_org[c[i]][d[i]] + ( a[i] > 0 ? diff_org[a[i] - 1][d[i]] : 0 ) + ( b[i] > 0 ? diff_org[c[i]][b[i] - 1] : 0 ) - ( a[i] > 0 && b[i] > 0 ? diff_org[a[i] - 1][b[i] - 1] : 0 )\n            + diff[c[i]][d[i]][e[i] - 'a'] - ( a[i] > 0 ? diff[a[i] - 1][d[i]][e[i] - 'a'] : 0 ) - ( b[i] > 0 ? diff[c[i]][b[i] - 1][e[i] - 'a'] : 0 ) + ( a[i] > 0 && b[i] > 0 ? diff[a[i] - 1][b[i] - 1][e[i] - 'a'] : 0 );\n        ret = min(ret, val);\n    }\n    printf(\"%lld\\n\", ret);\n\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "implementation"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Dasha and Photos.json",
    "editorial_link": "https://codeforces.com//blog/entry/50179",
    "editorial": "Let special photo be the matrix, made by changing subrectangle in the\r\ninitial, and changed submatrix changed subrectangle itself. Firsly,\r\nlet\u00e2\u0080\u0099s calculate the number of special photos, in which cell (x, y)\r\nbelongs to changed submatrix, such that cell (x, y) contains character .\r\nIt can be done using addition on submatrix in offline. Then, using\r\narray, let\u00e2\u0080\u0099s compute sum of the distances from all photos to initial, in\r\ncell (x, y): . Let ( sum of the distances from all photos to initial on\r\nsubmatrix . Let the number of special photos, in which cell (x, y)\r\ncontains character . Then calculate, similarly to , sums . Now, using\r\ndp\u00e2\u0080\u0099s alltogether, we can count for some special photo sum of the\r\ndistances to all other photos : for all cells, except changed submarix,\r\nfind the distance using and inclusion-exclusion method in . For the\r\ncells in changed submatrix, let\u00e2\u0080\u0099s iterate the character and find the\r\nanswer for it similarly.\r\n"
}