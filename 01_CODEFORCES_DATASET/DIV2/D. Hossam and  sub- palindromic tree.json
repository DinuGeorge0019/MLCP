{"link": "https://codeforces.com//contest/1771/problem/D", "problemId": "1688880", "problem_idx": "D", "shortId": "1771D", "contest_number": "1771", "problem_submissions": {"E": [184786252, 184768319, 184791269, 184791695, 184799239, 184789827, 184804872, 184797015, 184779796, 184780579, 184774488, 184784737, 184789324, 184905669], "F": [184767458, 184789428, 184776697, 184780762, 184768498, 184799203, 184750590, 184788854, 184819486, 184733731, 184782224, 184765553, 184837754, 184787637, 184786087, 184781451, 186375922, 184885288, 184793012], "D": [184754420, 184746285, 184751879, 184767199, 184796187, 184770689, 184788363, 184741723, 184762124, 184781810, 184734475, 184771306, 184784877, 184767214, 184757752, 184754682, 184762986, 184732202, 184885253, 184786038], "C": [184742304, 184730753, 184731670, 184750562, 184746404, 184744176, 184732056, 186784755, 186783506, 185248092, 184831291, 184725362, 184737633, 184749397, 184807012, 184806808, 184806589, 184806495, 184750795, 184733621, 184739758, 184731026, 184753323, 184736577, 184746147, 184753799, 184885221, 184836201, 184744786, 184740528], "B": [184723301, 184725456, 184722508, 184735259, 184724915, 184727876, 184722523, 184720717, 184727802, 184728402, 184761586, 184727553, 184722898, 184733183, 184726202, 184743742, 184729968, 184744730, 184885179, 184732333], "A": [184718639, 184717667, 184718126, 184729979, 184719322, 184720803, 184717674, 184717800, 184721090, 184719864, 184753140, 184718839, 184717731, 184725439, 184718841, 184718297, 184718595, 184738977, 184885137, 184718315]}, "name": "D. Hossam and  sub- palindromic tree", "statement": "Hossam has an unweighted tree G with letters in vertices.Hossam defines\r\ns(v,\r\n, u) as a string that is obtained by writing down all the letters on the\r\nunique simple path from the vertex v to the vertex u in the tree G.A\r\nstring a is a of a string s if a can be obtained from s by deletion of\r\nseveral (possibly, zero) letters. For example, \"\", \"\", and \"\" are\r\nsubsequences of \"\", while \"\" and \"\" are not.A is a string that reads the\r\nsame from left to right and from right to left. For example, \"\" is a\r\npalindrome, but \"\" is not.Hossam defines a of a string s as a\r\nsubsequence of s, that is a palindrome. For example, \"\", \"\" and \"\" are\r\nsub-palindromes of the string \"\", but \"\" and \"\" are not.Hossam defines a\r\nof a string s as a sub-palindrome of s, which has the maximal length\r\namong all sub-palindromes of s. For example, \"\" has only one maximal\r\nsub-palindrome \"\". But it may also be that the string has several\r\nmaximum sub-palindromes: the string \"\" has 4 maximum\r\nsub-palindromes.Help Hossam find the length of the longest maximal\r\nsub-palindrome among all s(v,\r\n, u) in the tree G.\r\n", "solutions": ["#include <bits/stdc++.h>\n\n#define ll long long\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define sz(x) (int)(x).size()\nusing namespace std;\n\n// \u0432\u043f\u0440\u0430\u0432\u043e, \u0432\u043d\u0438\u0437, \u0432\u043b\u0435\u0432\u043e, \u0432\u0432\u0435\u0440\u0445\nint dx[] = {0, 1, 0, -1};\nint dy[] = {1, 0, -1, 0};\n\n// \u0445\u043e\u0434 \u043a\u043e\u043d\u0435\u043c\n//int dx[] = {-2, -1, 1, 2, 2, 1, -1, -2};\n//int dy[] = {1, 2, 2, 1, -1, -2, -2, -1};\n\nmt19937 rnd(chrono::system_clock::now().time_since_epoch().count());\nmt19937_64 rnd64(chrono::system_clock::now().time_since_epoch().count());\nint rndInteger (int l, int r) {\n    return uniform_int_distribution<int> (l, r)(rnd);\n}\n\nconst int MOD = (int) 998244353;\nconst int N = (int) 2e3 + 7;\nint dp[N][N];\n\nint n;\nstring s;\nvector<int> g[N];\nvector<int> path;\nint ans;\nint root;\n\nint calc(int l, int r) {\n    if(l > r) return 0;\n\n    int u = path[l], v = path[r];\n    if(u == v) {\n        return 1;\n    }\n    int &res = dp[u][v];\n    if(res != -1) {\n        return res;\n    }\n\n    res = max(calc(l + 1, r), calc(l, r - 1));\n\n    if(s[u] == s[v]) {\n        res = max(res, calc(l + 1, r - 1) + 2);\n    }\n    return res;\n}\n\nvoid dfs(int v, int par = -1) {\n    path.push_back(v);\n    bool leaf = true;\n\n    for (auto to : g[v]) {\n        if(to == par)\n            continue;\n        dfs(to, v);\n        leaf = false;\n    }\n\n    if(leaf) {\n        ans = max(ans, calc(0, sz(path) - 1));\n    }\n\n    path.pop_back();\n}\n\nvoid solve() {\n    cin >> n >> s;\n    s = '#' + s;\n    for (int i = 1; i < n; ++i) {\n        int x, y;\n        cin >> x >> y;\n        g[x].push_back(y);\n        g[y].push_back(x);\n    }\n\n    for (int i = 1; i <= n; ++i) {\n        fill(dp[i] + 1, dp[i] + n + 1, -1);\n    }\n    ans = 1;\n    for (int v = 1; v <= n; ++v) if(sz(g[v]) == 1) {\n        dfs(v);\n    }\n    cout << ans << '\\n';\n    for (int i = 1; i <= n; ++i) g[i].clear();\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n\n    int T;\n    cin >> T;\n    while(T--) {\n        solve();\n    }\n    \n\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "data structures", "dfs and similar", "dp", "strings", "trees"], "dificulty": "2100", "interactive": false}