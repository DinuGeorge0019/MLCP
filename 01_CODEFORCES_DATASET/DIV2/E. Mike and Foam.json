{"link": "https://codeforces.com//contest/548/problem/E", "problemId": "28338", "problem_idx": "E", "shortId": "548E", "contest_number": "548", "problem_submissions": {"E": [11306177, 11300638, 11307838, 11312023, 12063940], "D": [11287347, 11284454, 11307050, 11295837, 11293058, 11292109, 11291768, 11293958, 11295314, 11296359, 11296862, 11312125, 11312114, 11295294, 11299561, 11298190, 11299140], "B": [11283910, 11292107, 11285437, 11284167, 11285339, 11282855, 11284031, 11284968, 11283769, 11283694, 11284532, 11281775, 11284852, 11283998, 11287449, 11285797], "A": [11281793, 11288525, 11281865, 11282109, 11282041, 11281571, 11281901, 11282199, 11281600, 11281849, 11281629, 11283057, 11282079, 11281644, 11282404, 11282517], "C": [11331087, 11335466, 11312098, 11299604]}, "name": "E. Mike and Foam", "statement": "Mike is a bartender at Rico\u2019s bar. At Rico\u2019s, they put beer glasses in a\r\nspecial shelf. There are kinds of beer at Rico\u2019s numbered from to . -th\r\nkind of beer has milliliters of foam on it. Maxim is Mike\u2019s boss. Today\r\nhe told Mike to perform queries. Initially the shelf is empty. In each\r\nrequest, Maxim gives him a number . If beer number is already in the\r\nshelf, then Mike should remove it from the shelf, otherwise he should\r\nput it in the shelf.After each query, Mike should tell him the score of\r\nthe shelf. Bears are geeks. So they think that the score of a shelf is\r\nthe number of pairs of glasses in the shelf such that and where is the\r\ngreatest common divisor of numbers and .Mike is tired. So he asked you\r\nto help him in performing these requests.\r\n", "solutions": ["#include <bits/stdc++.h>\n#include <ext/algorithm>\n#include <ext/numeric>\n\nusing namespace std;\nusing namespace __gnu_cxx;\n\n#define ALL(c) c.begin(), c.end()\n#define SZ(x) ((int)(x).size())\n#define PB push_back\n#define MP make_pair\n#define DB(a) cerr << #a << \" = \" << (a) << endl;\n#define OUT( a , n ) for( int J = 0; J < (n); J++ )cout<< (a)[J] << \" \\n\"[J == (n) - 1 ]\n#define WAIT cout << flush , system(\"PAUSE\");\n#define lowbit(x) ((x) & (-x))\n#define CONTAINS(a, x) ((a).find(x) != (a).end())\n#define endl '\\n'\n\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\n\nconst int MAXN = 6e5+100;\n\nint p[MAXN];\n\nint primes[MAXN], pri;\nint s[MAXN], q , n;\nbool mk[MAXN];\nll dp[MAXN];\nint on;\n\nvoid put(int idx)\n{\n    \n    int val = s[idx];\n    for( int i = 1; i * i <= val; i++ )\n    {\n        if( val % i == 0)\n        {\n            if(i * i != val)\n            {\n                dp[i]++;\n                dp[val / i]++;              \n            }\n            else \n                dp[i]++;            \n        }\n    }\n}\n\nvoid remove( int idx )\n{\n    int val = s[idx];\n    for( int i = 1; i * i <= val; i++ )\n    {\n        if( val % i == 0)\n        {\n            if(i * i != val)\n            {\n                dp[i]--;\n                dp[val / i]--;\n            }\n            else \n                dp[i]--;\n        }\n    }\n}\n\nint divs[MAXN], it ;\n\nll calc( int idx )\n{\n    it = 0;\n    \n    int val = s[idx];\n    int kk = val;\n    for( int i = 0; primes[i] * primes[i] <= val && i < pri; i++ )\n    {\n        int pp = primes[i];\n        if( val % pp == 0)\n        {\n            divs[it++] = pp;\n            while(val % pp == 0)\n                val /= pp;\n        }\n    }\n    if( val > 1)\n        divs[it++] = val;\n    \n    \n    \n    ll res = 0;\n    for( int mask = 1; mask < (1 << it); mask++ )\n    {\n        int count = __builtin_popcount(mask);\n        int val = 1;\n        for( int i = 0; i < it; i++ )\n        {\n            if((mask & (1 << i)) > 0)\n            {\n                val = val * divs[i];\n            }\n        }\n        \n        if( count & 1 )     \n            res += dp[val];\n        else res -= dp[val];        \n    }\n    \n    return on - res;\n}\n\nint main()\n{\n    ios::sync_with_stdio( 0 );\n    cin.tie( 0 );   \n    \n    int root = sqrt(MAXN);\n    \n    for( int i = 2; i <= root; i++ )\n    {\n        if(!p[i])\n        for( int j = i * i; j < MAXN; j += i)\n            p[j] = true;\n    }\n    \n    for( int i = 2; i < MAXN; i++ )\n        if(!p[i])\n            primes[pri++] = i;\n        \n    \n    cin >> n >> q;\n    \n    for( int i = 1; i <= n; i++ )\n        cin >> s[i];\n                \n    ll res = 0, idx;\n    for(; q; q-- )\n    {\n        cin >> idx;\n        \n        if(mk[idx])     \n        {           \n            remove(idx);            \n            on--;       \n            \n            ll add =  calc(idx);\n            res -= add; \n            \n            mk[idx] = false;\n        }\n        else\n        {           \n            ll add =  calc(idx);            \n            res += add;         \n            on++;\n            put(idx);           \n            mk[idx] = true;         \n        }       \n        cout << res << endl;\n    }\n    return 0;\n}"], "input": "", "output": "", "tags": ["combinatorics", "dp", "math", "number theory"], "dificulty": "2300", "interactive": false}