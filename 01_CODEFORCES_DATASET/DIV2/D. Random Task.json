{"link": "https://codeforces.com//contest/431/problem/D", "problemId": "9655", "problem_idx": "D", "shortId": "431D", "contest_number": "431", "problem_submissions": {"D": [6672598, 6676181, 6673450, 6673470, 6674088, 6674095, 6674295, 6674808, 6675923, 6675071, 6674830, 6674866, 6674901, 6674478, 6674991, 6674414], "E": [6671267, 6673725, 6713420, 6713416, 6713362, 6676446, 6676376, 6675447, 6675215], "C": [6671164, 6669924, 6671428, 6670548, 6670647, 6671004, 6671098, 6672117, 6672492, 6671804, 6670661, 6670538, 6670152, 6671790, 6670929, 6672251, 6671397, 6672712], "B": [6669392, 6669162, 6669814, 6669821, 6669379, 6669661, 6669742, 6670279, 6669311, 6670384, 6669700, 6669887, 6671526, 6670362, 6670035, 6670413, 6670132, 6671672], "A": [6668772, 6668067, 6668159, 6668040, 6668001, 6668140, 6668106, 6668437, 6668090, 6669605, 6668154, 6669148, 6670613, 6668347, 6668448, 6668920, 6668602, 6670229]}, "name": "D. Random Task", "statement": "One day, after a difficult lecture a diligent student Sasha saw a\r\ngraffitied desk in the classroom. She came closer and read: \"Find such\r\npositive integer , that among numbers , , ..., there are exactly numbers\r\nwhich binary representation contains exactly digits one\".The girl got\r\ninterested in the task and she asked you to help her solve it. Sasha\r\nknows that you are afraid of large numbers, so she guaranteed that there\r\nis an answer that doesn\u2019t exceed .\r\n", "solutions": ["#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nlong long l,r,mid,ans,m,k;\nlong long dp[70][70][2],x[70];\nlong long find(long long now){\n    int len=0;\n    for (;now;){len++; x[len]=now%2; now=now/2;}\n    memset(dp,0x00,sizeof dp);\n    dp[len][1][1]=1;\n    for (int i=len-1;i;i--)\n        for (int j=1;j<=len;j++){\n            dp[i][j][0]=dp[i+1][j-1][0]+dp[i+1][j][0];\n            if (x[i]==1){\n                dp[i][j][0]+=dp[i+1][j][1]; dp[i][j][1]=dp[i+1][j-1][1];\n            } else dp[i][j][1]=dp[i+1][j][1];\n        }\n    long long ans=dp[1][k][0]+dp[1][k][1];// if (kk==5) cout<<ans<<endl;\n    memset(dp,0x00,sizeof dp);\n    if (len==1) return ans;\n    dp[1][1][0]=1; if (k==1) ans++;\n    for (int i=2;i<len;i++){\n        for (int j=1;j<=len;j++)\n            dp[i][j][0]=dp[i-1][j][0]+dp[i-1][j-1][0];\n        ans+=dp[i][k][0];\n    }\n    return ans;\n}\nint main(){\n    scanf(\"%I64d%I64d\",&m,&k);\n    l=1; r=1e18+1;\n    while (l<r){\n        mid=l+r>>1;\n        long long num=find(mid*2)-find(mid); //cout<<mid<<\" \"<<num<<endl;\n        if (num<m) l=mid+1; else {r=mid; ans=mid;}\n    }\n    cout<<ans<<endl;\n}\n            "], "input": "", "output": "", "tags": ["binary search", "bitmasks", "combinatorics", "dp", "math"], "dificulty": "2100", "interactive": false}