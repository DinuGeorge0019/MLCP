{
    "link": "https://codeforces.com//contest/1747/problem/C",
    "problemId": "1620660",
    "problem_idx": "C",
    "shortId": "1747C",
    "contest_number": "1747",
    "problem_submissions": {
        "E": [
            179486870,
            179253920,
            179273440,
            179260537,
            179225386,
            179271971,
            179283076,
            179281826,
            179282297,
            186348217,
            179284673,
            179245931
        ],
        "D": [
            179486860,
            179233757,
            179222054,
            179228487,
            179238738,
            179241063,
            179241183,
            179224057,
            179264449,
            179259728,
            179260831,
            179237890,
            179236308,
            180743238,
            179237732,
            179232676,
            179243502,
            179244572,
            179246464,
            179243020,
            179246798,
            179249877
        ],
        "C": [
            179486839,
            179213479,
            179208855,
            179232874,
            179261125,
            179235210,
            179222140,
            179238001,
            179214781,
            179211570,
            179268241,
            179214460,
            179214791,
            179205118,
            179213034,
            179214071,
            179222975,
            179219181,
            179217125,
            179223792,
            179216359
        ],
        "B": [
            179486831,
            179205385,
            179204232,
            179234016,
            179257195,
            179206841,
            179210631,
            179225692,
            179213313,
            179206192,
            179275964,
            179205986,
            179209442,
            179215191,
            179207056,
            179208301,
            179209222,
            179210943,
            179209630,
            179208432,
            179211946
        ],
        "A": [
            179486823,
            179200411,
            179199751,
            179235050,
            179240090,
            179202014,
            179204980,
            179199923,
            179202535,
            179200360,
            179277442,
            179199925,
            179203286,
            179208363,
            179199780,
            179200477,
            179203571,
            179204793,
            179201814,
            179200654,
            179202827
        ]
    },
    "name": "C. Swap Game",
    "statement": "Alice and Bob are playing a game on an array a of n positive integers.\r\nAlice and Bob make alternating moves with Alice going first.In his/her\r\nturn, the player makes the following move: If a_1 = 0, the player loses\r\nthe game, otherwise: Player chooses some i with 2\r\nle i\r\nle n. Then player decreases the value of a_1 by 1 and swaps a_1 with\r\na_i. Determine the winner of the game if both players play optimally.\r\n",
    "solutions": [
        "// LUOGU_RID: 93003026\n/*\nわんわん……わんだほーいっ☆\nWonderhoy!\n*/\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef double DB;\nchar buf[1<<21],*p1=buf,*p2=buf;\n#define getchar() (p1==p2 && (p2=(p1=buf)+fread(buf,1,1<<18,stdin),p1==p2)?EOF:*p1++)\nint read()\n{\n\tint x=0;\n\tchar c=getchar();\n\twhile(c<'0' || c>'9')\tc=getchar();\n\twhile(c>='0' && c<='9')\tx=(x<<1)+(x<<3)+(c^'0'),c=getchar();\n\treturn x;\n}\nvoid write(int x)\n{\n\tif(x>9)\twrite(x/10);\n\tputchar(x%10+'0');\n}\nconst int MOD=998244353;\ninline int Add(int u,int v){return u+v>=MOD?u+v-MOD:u+v;}\ninline int Sub(int u,int v){return u-v>=0?u-v:u-v+MOD;}\ninline int Mul(int u,int v){return LL(u)*LL(v)%MOD;}\ninline int add(int &u,int v){return u=Add(u,v);}\ninline int sub(int &u,int v){return u=Sub(u,v);}\ninline int mul(int &u,int v){return u=Mul(u,v);}\nint QuickPow(int x,int p=MOD-2)\n{\n\tint ans=1,base=x;\n\twhile(p)\n\t{\n\t\tif(p&1)\tmul(ans,base);\n\t\tmul(base,base);\n\t\tp>>=1;\n\t}\n\treturn ans;\n}\nvoid Solve();\nint main(){\n\tint T=read();\n\twhile(T-->0)\tSolve();\n\treturn 0;\n}\nint n,a[100005];\nvoid Solve()\n{\n\tn=read();\n\tfor(int i=1;i<=n;++i)\ta[i]=read();\n\tint f=1e9,g=1e9;\n\tfor(int i=2;i<=n;++i)\n\t{\n\t\tif(a[i]<=f)\tg=f,f=a[i];\n\t\telse if(a[i]<=g)\tg=a[i];\n\t}\n\tint p=f,q=min(a[1]-1,g);\n\tputs(p<=q?\"Alice\":\"Bob\");\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Swap Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/108782",
    "editorial": "Case 1: a1>min(a)\n\nAlice\n can force the Bob\n to always decrease the minimum element by always choosing minimum element of a\n in her turn. Where as Bob\n can not do much, all other elements he would swap with would be greater than or equal to min(a)\n. Even if there exists multiple minimums in a\n, In first move Alice\n would decrease from a1\n, hence in this case Alice\n would always win.\n\nCase 2: a1=min(a)\n\nIn this case optimal startegy for Bob\n would be to always chhose minimum element of the array, which is a1\n. Alice\n would always be swapping the element greater than a1\n in her turn, hence in the case Bob\n would always win",
    "hint": [
        "Hint 1 Divide problem into two different cases. When and when .",
        "Hint 2 You do not need more hints to solve the problem."
    ]
}