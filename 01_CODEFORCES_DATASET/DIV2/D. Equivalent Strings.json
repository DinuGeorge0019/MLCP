{
    "link": "https://codeforces.com//contest/560/problem/D",
    "problemId": "31956",
    "problem_idx": "D",
    "shortId": "560D",
    "contest_number": "560",
    "problem_submissions": {
        "E": [
            12181314,
            12181454,
            12176455,
            12191515,
            27897729,
            12220479,
            12223057,
            12198112,
            12197784
        ],
        "D": [
            12176988,
            12173417,
            12184797,
            12171285,
            12174903,
            12171851,
            12175271,
            12175100,
            12171832,
            12176403,
            12545866,
            12172755,
            12170360,
            12176803,
            12175499,
            12176746,
            12176672,
            12176886,
            12175224,
            12176471
        ],
        "C": [
            12173418,
            12170958,
            12169024,
            12169130,
            12171468,
            12168005,
            12169958,
            12171636,
            12175268,
            12170205,
            12166791,
            12175779,
            12170596,
            12171530,
            12170301,
            12171676,
            12172737,
            12172160,
            12172611
        ],
        "B": [
            12166586,
            12170401,
            12166753,
            12166908,
            12167772,
            12166787,
            12167175,
            12168191,
            12167188,
            12165775,
            12175964,
            12165865,
            12167390,
            12169323,
            12167704,
            12168803,
            12167427,
            12168269,
            12168924
        ],
        "A": [
            12164875,
            12165324,
            12164911,
            12164741,
            12164812,
            12165009,
            12167558,
            12165824,
            12164606,
            12166596,
            12174689,
            12164836,
            12164796,
            12165378,
            12165156,
            12165311,
            12164941,
            12166328,
            12166259
        ]
    },
    "name": "D. Equivalent Strings",
    "statement": "Today on a lecture about strings Gerald learned a new definition of\r\nstring equivalency. Two strings and of equal length are called in one of\r\nthe two cases: They are equal. If we split string into two halves of the\r\nsame size and , and string into two halves of the same size and , then\r\none of the following is correct: is equivalent to , and is equivalent to\r\nis equivalent to , and is equivalent to As a home task, the teacher gave\r\ntwo strings to his students and asked to determine if they are\r\nequivalent.Gerald has already completed this home task. Now it\u2019s your\r\nturn!\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstring>\n\nusing namespace std;\n\nchar A[200010];\nchar B[200010];\n\nvoid fun(char C[], int N) {\n    if(N % 2 == 0) {\n        int nN = N/2;\n        fun(C,nN);\n        fun(C+nN,nN);\n        if(strncmp(C,C+nN,nN) > 0) for(int i=0;i<nN;i++) swap(C[i],C[nN+i]);\n    }\n}\n\nint main() {\n    cin >> A >> B;\n    int N = strlen(A);\n    fun(A,N);\n    fun(B,N);\n    if(strncmp(A,B,N) == 0) cout << \"YES\" << endl;\n    else cout << \"NO\" << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "hashing",
        "implementation",
        "strings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Equivalent Strings.json",
    "editorial_link": "https://codeforces.com//blog/entry/19237",
    "editorial": "Let us note that \"equivalence\" described in the statements is actually\r\nequivalence relation, it is reflexively, simmetrically and transitive.\r\nIt is meant that set of all string is splits to equivalence classes.\r\nLet\u00e2\u0080\u0099s find lexicographic minimal strings what is equivalent to first and\r\nto second given string. And then check if its are equals. It is remain\r\nfind the lexicographic minimal strings what is equivalent to given. For\r\ninstance we can do it such a way: Every recursive call time works is\r\n(where is length of strings) and string splitten by two twice smaller\r\nstrings. Therefore time of work this function is , where is length of\r\nstrings.\r\n"
}