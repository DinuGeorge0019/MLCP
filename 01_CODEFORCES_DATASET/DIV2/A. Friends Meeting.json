{
    "link": "https://codeforces.com//contest/931/problem/A",
    "problemId": "162263",
    "problem_idx": "A",
    "shortId": "931A",
    "contest_number": "931",
    "problem_submissions": {
        "F": [
            35940104,
            35941465,
            35943287,
            35941080,
            35942331,
            35943653,
            35947276,
            35943719,
            35948347,
            35944673,
            35940779,
            35944545,
            35939029,
            35944604,
            35941239,
            35940667,
            35943276,
            35942053,
            35941638
        ],
        "E": [
            35935873,
            35937949,
            35939388,
            35938861,
            35938615,
            35938585,
            35938306,
            35937388,
            35944915,
            35945452,
            35936046,
            35942168,
            35938423,
            35939249,
            35936882,
            35938436
        ],
        "C": [
            35932593,
            35935542,
            35932202,
            35935230,
            35934264,
            35936847,
            35933533,
            35934506,
            35935861,
            35934976,
            35935354,
            35943273,
            35946878,
            35947399,
            35947162
        ],
        "D": [
            35930635,
            35933077,
            35934832,
            35933775,
            35935452,
            35929853,
            35935211,
            35931557,
            35934131,
            35930406,
            35933242,
            35937131,
            35943429,
            35935627,
            35932316,
            35932452
        ],
        "B": [
            35929535,
            35929870,
            35928517,
            35928303,
            35929389,
            35931362,
            35930323,
            35930011,
            35929776,
            35928105,
            35928031,
            35931499,
            35930328,
            35928842,
            35930448,
            35928972
        ],
        "A": [
            35926848,
            35929929,
            35926934,
            35926799,
            35927905,
            35929233,
            35927305,
            35927514,
            35926795,
            35926930,
            35926789,
            35928102,
            35927117,
            35926792,
            35928368,
            35926987
        ]
    },
    "name": "A. Friends Meeting",
    "statement": "Two friends are on the coordinate axis in points with integer\r\ncoordinates. One of them is in the point , another one is in the point .\r\nEach of the friends can move by one along the line in any direction\r\nunlimited number of times. When a friend moves, the tiredness of a\r\nfriend changes according to the following rules: the first move\r\nincreases the tiredness by , the second move increases the tiredness by\r\n, the third by and so on. For example, if a friend moves first to the\r\nleft, then to the right (returning to the same point), and then again to\r\nthe left his tiredness becomes equal to .The friends want to meet in a\r\ninteger point. Determine the minimum total tiredness they should gain,\r\nif they meet in the same point.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tint a,b;\n\tcin >> a >> b;\n\tint x = min(a,b);\n\tint y = max(a,b);\n\tint ans = 0;\n\tint i = 0;\n\tint j = 0;\n\twhile(x != y) {\n\t\tif(i == j) {\n\t\t\tx++;\n\t\t\tans += ++i;\n\t\t}\n\t\telse {\n\t\t\ty--;\n\t\t\tans += ++j;\n\t\t}\n\t}\n\tcout << ans << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Friends Meeting.json",
    "editorial_link": "https://codeforces.com//blog/entry/58177",
    "editorial": "Initially, we need to understand the following fact. Since the number of\r\nteams in each round is even, should be a power of two.We will solve the\r\nproblem for the 0-indexing commands, so we decrease the given and on\r\none.For each round we will determine the number of the match, in which\r\nthe teams with initial numbers and will play. The command will play in\r\nthe match number , and the command will play in the match number .If ,\r\nthen these teams will play in the same match, and we need to print the\r\nnumber of the current round as an answer. If the number of remaining\r\nteams equals to two this will be the final match of the tournament.If\r\nthe match numbers not equal we consider the next round. In this case,\r\nthe number of command becomes and the number of number becomes . The\r\nnumber of teams which will go to the next round is . This process is\r\nalways finite, because sooner or later will remain only teams and in\r\nthis round will be only one match the final match of the tournament.\r\n",
    "hint": []
}