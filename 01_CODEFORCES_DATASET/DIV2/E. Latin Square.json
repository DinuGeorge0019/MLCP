{
    "link": "https://codeforces.com//contest/1459/problem/E",
    "problemId": "837952",
    "problem_idx": "E",
    "shortId": "1459E",
    "contest_number": "1459",
    "problem_submissions": {
        "C": [
            101746653,
            101722886,
            101730123,
            101721760,
            101730712,
            101728008,
            101731166,
            101730952,
            101740001,
            101726009,
            101726762,
            101728277,
            101727158,
            101729187,
            101723361,
            101723810,
            101728376,
            101726644,
            101732897,
            101727240
        ],
        "E": [
            101738323,
            101839753,
            102232354,
            101778763
        ],
        "D": [
            101727682,
            101736410,
            101735995,
            101740518,
            101738063,
            101735219,
            101739686,
            101738152,
            101733975,
            101740963,
            101743516,
            101745649,
            101741362,
            101744865,
            101740597,
            101748885,
            101751093,
            101741581,
            101747404,
            101748856
        ],
        "B": [
            101727154,
            101727768,
            101730156,
            101728078,
            101737211,
            101728162,
            101729594,
            101812219,
            101721826,
            101733013,
            101722434,
            101734872,
            101735665,
            101845089,
            101726205,
            101744534,
            101734571,
            101725649,
            101745878,
            101729907,
            101738583
        ],
        "A": [
            101719213,
            101723947,
            101718569,
            101719365,
            101718481,
            101720960,
            101718492,
            101812211,
            101718737,
            101720191,
            101718915,
            101722560,
            101731743,
            101845090,
            101719378,
            101727785,
            101719966,
            101719274,
            101731147,
            101726149,
            101719284
        ],
        "F": [
            101844942
        ]
    },
    "name": "E. Latin Square",
    "statement": "You are given a square matrix of size n. Every row and every column of\r\nthis matrix is a permutation of 1, 2,\r\nldots, n. Let a_{i, j} be the element at the intersection of i-th row\r\nand j-th column for every 1\r\nleq i, j\r\nleq n. Rows are numbered 1,\r\nldots, n top to bottom, and columns are numbered 1,\r\nldots, n left to right.There are six types of operations: : cyclically\r\nshift all columns to the right, formally, set the value of each a_{i, j}\r\nto a_{i, ((j - 2)\r\nbmod n) + 1}; : cyclically shift all columns to the left, formally, set\r\nthe value of each a_{i, j} to a_{i, (j\r\nbmod n) + 1}; : cyclically shift all rows down, formally, set the value\r\nof each a_{i, j} to a_{((i - 2)\r\nbmod n) + 1, j}; : cyclically shift all rows up, formally, set the value\r\nof each a_{i, j} to a_{(i\r\nbmod n) + 1, j}; : replace the permutation read left to right in each\r\nrow with its inverse. : replace the permutation read top to bottom in\r\neach column with its inverse. Inverse of a permutation p_1, p_2,\r\nldots, p_n is a permutation q_1, q_2,\r\nldots, q_n, such that p_{q_i} = i for every 1\r\nleq i\r\nleq n.One can see that after any sequence of operations every row and\r\nevery column of the matrix will still be a permutation of 1, 2,\r\nldots, n.Given the initial matrix description, you should process m\r\noperations and output the final matrix.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/trie_policy.hpp>\n#include <ext/rope>\n\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimization(\"unroll-loops, no-stack-protector\")\n#pragma GCC target(\"avx,avx2,fma\")\n\nusing namespace std;\nusing namespace __gnu_pbds;\nusing namespace __gnu_cxx;\n\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\n#define fi first\n#define se second\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\n#define gcd __gcd\n#define fastio ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)\n#define rep(i, n) for (int i=0; i<(n); i++)\n#define rep1(i, n) for (int i=1; i<=(n); i++)\n#define all(x) (x).begin(), (x).end()\n#define rall(x) (x).rbegin(), (x).rend()\n#define endl \"\\n\"\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned uint;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef vector<int> vi;\ntypedef vector<vector<int>> vvi;\ntypedef vector<ll> vll;\ntypedef vector<vector<ll>> vvll;\ntypedef vector<bool> vb;\ntypedef vector<vector<bool>> vvb;\ntemplate<typename T, typename cmp = less<T>>\nusing ordered_set=tree<T, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;\ntypedef trie<string, null_type, trie_string_access_traits<>, pat_trie_tag, trie_prefix_search_node_update> pref_trie;\n\nint32_t main() {\n    fastio;\n    int T; cin>>T;\n    while(T--) {\n        int n, _; cin>>n>>_;\n        vector<array<int, 3>> a;\n        rep(i, n) rep(j, n) {\n            int x; cin>>x;\n            a.pb({i, j, --x});\n        }\n        auto inc = [&n](int& x) mutable {x++; if(x==n) x=0;};\n        auto dec = [&n](int& x) mutable {if(x==0) x=n; x--;};\n        pii x={0, 0}, y={1, 0}, z={2, 0};\n        string q; cin>>q;\n        for(char t: q) {\n            switch(t) {\n                case 'D':\n                    inc(x.se);\n                    break;\n                case 'U':\n                    dec(x.se);\n                    break;\n                case 'L':\n                    dec(y.se);\n                    break;\n                case 'R':\n                    inc(y.se);\n                    break;\n                case 'C':\n                    swap(x, z);\n                    break;\n                case 'I':\n                    swap(y, z);\n                    break;\n                default:\n                    assert(0);\n                    break;\n                }\n        }\n        vvi ans(n, vi(n));\n        for(auto& v: a) {\n            ans[(v[x.fi]+x.se)%n][(v[y.fi]+y.se)%n]=(v[z.fi]+z.se)%n;\n        }\n        rep(i, n) rep(j, n) cout<<ans[i][j]+1<<\" \\n\"[j+1==n];\n        cout<<endl;\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "matrices"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Latin Square.json",
    "editorial_link": "https://codeforces.com//blog/entry/85750",
    "editorial": "For convenience, letâs assume that all row and column indices, as well\r\nas matrix values, are from instead for .If only shift operations were\r\npresent, we could solve the problem in linear time: just maintain where\r\nthe top left corner ends up after all the shifts, and then the matrix\r\ncan be easily reconstructed (if this is not immediately clear to you,\r\ntake a moment and think how this should be done). For the inverse\r\noperations, the approach is going to be similar, but weâll need a\r\ndifferent way to look at the matrix. Instead of the matrix, letâs think\r\nabout the set of all triples . Imagining a set of points in 3D, where\r\nare and coordinates in the horizontal plance, and is the height is a\r\ngood mental picture.Shift operations apply and to all points. We can\r\nthink of this as a translation of the entire 3D space, with some looping\r\nat the borders. Instead of the given points, letâs keep track of where\r\nthe point is located after the operations are done; itâs just as easy as\r\nin two-dimensional version from before.Now letâs introduce the inverses.\r\nConsider, say, a row inverse operation, and all the points , where ,\r\nthat have the same row index . As an example, suppose that the top (-th)\r\nrow of the matrix contains numbers . The entries in the row correspond\r\nto points , , , . The inverse permutation to this row is , thus the new\r\nset of points should be , , , . In general, if there is currently a\r\npoint in the set, then after the inverse there must be a point . Thus,\r\nthe entire operation may be summarized as \"swap the second and third\r\ncoordinates\". Similarly, the column inverse is \"swap the first and third\r\ncoordinates\". Again, we think of this transformation applied to the\r\nentire 3D space: this can be seen as a mirror reflection with respect to\r\nor plane.How does this affect our \"keep track of \" approach? It is easy\r\nto update its position: just swap respective coordinates. However, we\r\nnow need to care about how the answer is reconstructed, since, say, the\r\npoint not necessarily ends up one step to the right of . Thus, in\r\naddition, letâs keep track of how the , , are permuted after all\r\noperations. Shifts do not affect them, but inverses swap two of them,\r\ndepending on which coordinates where swapped.We are almost done, we just\r\nneed to reconstruct the answer at the end. If we had an initially given\r\npoint , where will it end up? If the origin ends up at a position\r\nrepresented as a vector , then ends up at , where are permuted\r\naccordingly. Once we have the result , all we need is to put into ,\r\nwhere is the answer matrix.This results, once again, in a linear time\r\nsolution. This explanation could have been much shorter with some\r\nlinear-algebraic machinery (basically each transformation =\r\nmultiplication by a certain matrix), but I chose to leave it as\r\nelementary ( simple!) as possible.\r\n",
    "hint": []
}