{"link": "https://codeforces.com//contest/1244/problem/E", "problemId": "438884", "problem_idx": "E", "shortId": "1244E", "contest_number": "1244", "problem_submissions": {"E": [62487832, 62480584, 62471612, 62475861, 62486535, 62479379, 62488595, 62479897, 62486004, 62494290, 62482838, 62489756, 62484611, 62499649, 62484119, 62485010, 62484457, 62485159, 62483197], "D": [62485326, 62477683, 62472795, 62474275, 62479070, 62488986, 62484645, 62476151, 62481028, 62481710, 62472497, 62492732, 62480440, 62477599, 62480225, 62481677, 62477177, 62480820, 62477275], "G": [62480107, 62491796, 62483655, 62495208, 62499859, 62498484, 62497339, 62483129, 62500589, 62490894, 62499284, 62480915, 62501144, 62496112, 62574872, 62510517], "F": [62476907, 62486766, 62497660, 62497231, 62492999, 62493234, 62492928, 62488841, 62496876, 62489625, 62495061, 62486153, 62494792, 62489424, 62493134, 62492962, 62496077, 62497856, 62496551], "C": [62471680, 62473970, 62477877, 62474334, 62473816, 62473208, 62512963, 62473668, 62477041, 62495125, 62513108, 62474572, 62476360, 62471677, 62473875, 62478860], "B": [62467959, 62468158, 62464148, 62469867, 62471265, 62468289, 62470934, 62468364, 62468024, 62466207, 62466240, 62496223, 62469290, 62471104, 62469292, 62469059, 62467915, 62469090, 62470225], "A": [62466123, 62464793, 62464086, 62466602, 62465923, 62464447, 62464989, 62659829, 62464905, 62464254, 62465585, 62464807, 62497112, 62464806, 62468732, 62464268, 62464707, 62464160, 62464768, 62464533]}, "name": "E. Minimizing Difference", "statement": "You are given a sequence a_1, a_2,\r\ndots, a_n consisting of n integers.You may perform the following\r\noperation on this sequence: choose any element and either increase or\r\ndecrease it by one.Calculate the minimum possible difference between the\r\nmaximum element and the minimum element in the sequence, if you can\r\nperform the aforementioned operation k times.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nll n, k;\nll a[100010];\nint l, r;\nvoid done() {\n\tputs(\"0\");\n\texit(0);\n}\nvoid move_left() {\n\twhile(1) {\n\t\tif(l == r) done();\n\t\tif(a[l] != a[l + 1]) break;\n\t\tl++;\n\t}\n}\nvoid move_right(){\n\twhile(1) {\n\t\tif(r == l) done();\n\t\tif(a[r] != a[r - 1]) break;\n\t\tr--;\n\t}\n}\nint main() {\n\tcin >> n >> k;\n\tfor(int i = 0; i < n; i++) {\n\t\tcin >> a[i];\n\t}\n\tsort(a, a + n);\n\tl = 0;\n\tr = n - 1;\n\twhile(k > 0) {\n\t\tmove_left();\n\t\tmove_right();\n\t\tint lc = l + 1;\n\t\tint rc = n - r;\n\t\tif(lc < rc) {\n\t\t\tll c = a[l + 1] - a[l];\n\t\t\tif(k < c * lc){\n\t\t\t\ta[0] += k / lc;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tk -= c * lc;\n\t\t\ta[0] = a[l] = a[l + 1];\n\t\t}\n\t\telse{\n\t\t\tll c = a[r] - a[r - 1];\n\t\t\tif(k < c * rc){\n\t\t\t\ta[n - 1] -= k / rc;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tk -= c * rc;\n\t\t\ta[n - 1] = a[r] = a[r - 1];\n\t\t}\n\t}\n\tcout << (a[n - 1] - a[0]) << endl;\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["binary search", "constructive algorithms", "greedy", "sortings", "ternary search", "two pointers"], "dificulty": "2000", "interactive": false}