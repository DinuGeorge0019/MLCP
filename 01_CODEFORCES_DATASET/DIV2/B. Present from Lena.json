{"link": "https://codeforces.com//contest/118/problem/B", "problemId": "618", "problem_idx": "B", "shortId": "118B", "contest_number": "118", "problem_submissions": {"E": [744037, 745078, 744813, 745388, 745323, 745867, 745436, 743649, 746938, 747382, 916949, 916937, 745101, 744662, 746262, 745809, 747461, 745823, 746138], "D": [743430, 743260, 743613, 743901, 743105, 744593, 742112, 744619, 744423, 745827, 743409, 746775, 745410, 743985, 744866, 743911, 743861, 744184, 744358, 744533], "C": [743075, 741949, 742890, 743396, 742360, 743301, 743646, 747932, 743990, 743060, 744985, 747243, 742852, 748623, 744300, 747942, 746584], "B": [741723, 743683, 741482, 741838, 741312, 741497, 746089, 742393, 742319, 741483, 742136, 741733, 740956, 741809, 742820, 742009, 741676, 741556, 742466, 742218], "A": [741066, 743899, 740889, 741247, 744792, 740920, 740962, 741172, 741019, 740916, 741008, 741288, 741140, 741579, 741121, 741180, 741200, 741119]}, "name": "B. Present from Lena", "statement": "Vasya\u2019s birthday is approaching and Lena decided to sew a patterned\r\nhandkerchief to him as a present. Lena chose digits from to as the\r\npattern. The digits will form a rhombus. The largest digit should be\r\nlocated in the centre. The digits should decrease as they approach the\r\nedges. For example, for the handkerchief pattern should look like that:\r\n0 0 1 0 0 1 2 1 0 0 1 2 3 2 1 0 0 1 2 3 4 3 2 1 00 1 2 3 4 5 4 3 2 1 0 0\r\n1 2 3 4 3 2 1 0 0 1 2 3 2 1 0 0 1 2 1 0 0 1 0 0Your task is to determine\r\nthe way the handkerchief will look like by the given .\r\n", "solutions": ["#include <iostream>\n#include <fstream>\n#include <cstdio>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n#include <string>\n#include <map>\n#include <cstring>\n\nusing namespace std;\n\n#define NextLine() { char c = getchar(); while (c != 10 && c != EOF) { c = getchar(); } }\n\nint n;\n\nvoid Load()\n{\n    cin >> n;\n}\n\nint res[30][30];\n\nvoid Solve()\n{\n    memset(res, 0xFF, sizeof(res));\n    int i, j;\n    for (i = 0; i <= n; i++)\n    {\n        int lj, rj;\n        lj = rj = n;\n        j = i;\n        while (j >= 0)\n        {\n            res[i][lj] = res[i][rj] = j;\n            j--;\n            lj--;\n            rj++;\n        }\n    }\n    int pos = n + 1;\n    for (i = n - 1; i >= 0; i--)\n    {\n        int lj, rj;\n        lj = rj = n;\n        j = i;\n        while (j >= 0)\n        {\n            res[pos][lj] = res[pos][rj] = j;\n            j--;\n            lj--;\n            rj++;\n        }\n        pos++;\n    }\n    for (i = 0; i < 2 * n + 1; i++)\n    {\n        int lst = 2 * n + 1;\n        while (res[i][lst] == -1) lst--;\n        for (j = 0; j <= lst; j++)\n        {\n            if (res[i][j] == -1) cout << \" \";\n            else cout << res[i][j];\n            if (j != lst) cout << \" \";\n        }\n        cout << \"\\n\";\n    }\n}\n\nint main()\n{\n    Load();\n    Solve();\n    return 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "implementation"], "dificulty": "1000", "interactive": false}