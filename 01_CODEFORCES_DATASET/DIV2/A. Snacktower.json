{
    "link": "https://codeforces.com//contest/767/problem/A",
    "problemId": "94680",
    "problem_idx": "A",
    "shortId": "767A",
    "contest_number": "767",
    "problem_submissions": {
        "E": [
            24773688,
            24758593,
            24766542,
            24771366,
            24781051,
            24771141,
            24779799,
            24793086,
            24815876,
            24813453,
            24777026
        ],
        "D": [
            24763626,
            24761005,
            24762891,
            24764024,
            24762582,
            24766354,
            24757953,
            24768943,
            24767743,
            24772654,
            24771704,
            24762285,
            24776438,
            24769130,
            24767445,
            24768099,
            24766844,
            24758983,
            24768020,
            24763075,
            24760035
        ],
        "C": [
            24761320,
            24765332,
            24760448,
            24761283,
            24759373,
            24763235,
            24759987,
            24766222,
            24769355,
            24767653,
            24765828,
            24761673,
            24774191,
            24769625,
            24760821,
            24762590,
            24762307,
            24759906,
            24765569
        ],
        "B": [
            24759162,
            24783957,
            24766261,
            24758310,
            24773199,
            24761589,
            24765216,
            24759680,
            24761807,
            24765169,
            24760359,
            24760779,
            24771356,
            24771320,
            24788532
        ],
        "A": [
            24756659,
            24769945,
            24755736,
            24756082,
            24755178,
            24755290,
            24755126,
            24755429,
            24755320,
            24755950,
            24755426,
            24755130,
            24770401,
            24755414,
            24755517,
            24761778,
            24755322,
            24757132,
            24755145,
            24761825
        ]
    },
    "name": "A. Snacktower",
    "statement": "According to an old legeng, a long time ago Ankh-Morpork residents did\r\nsomething wrong to miss Fortune, and she cursed them. She said that at\r\nsome time snacks of distinct sizes will fall on the city, and the\r\nresidents should build a Snacktower of them by placing snacks one on\r\nanother. Of course, big snacks should be at the bottom of the tower,\r\nwhile small snacks should be at the top.Years passed, and once different\r\nsnacks started to fall onto the city, and the residents began to build\r\nthe Snacktower. However, they faced some troubles. Each day exactly one\r\nsnack fell onto the city, but their order was strange. So, at some days\r\nthe residents weren\u2019t able to put the new stack on the top of the\r\nSnacktower: they had to wait until all the bigger snacks fell. Of\r\ncourse, in order to not to anger miss Fortune again, the residents\r\nplaced each snack on the top of the tower immediately as they could do\r\nit.Write a program that models the behavior of Ankh-Morpork residents.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nint n,m;\nbool a[111111];\nint main(){\n\tscanf(\"%d\",&n);\n\tm = n;\n\tfor(int i=1; i<=n; i++){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\ta[x] = true;\n\t\tbool isFirst = true;\n\t\twhile(a[m]){\n\t\t\tif(!isFirst)printf(\" \");\n\t\t\tprintf(\"%d\",m);\n\t\t\tm--;\n\t\t\tisFirst = false;\n\t\t}\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Snacktower.json",
    "editorial_link": "https://codeforces.com//blog/entry/50498",
    "editorial": "It is enough to do what is written in the statements. You can maintain\r\nan array , and mark in it which snacks has already fallen, and which\r\nhasn\u00e2\u0080\u0099t. Create another variable which tracks the next snack which should\r\nbe put on the top. Let\u00e2\u0080\u0099s proceed with the integers in the input one by\r\none. After reading next integer, mark it in the array and go from to the\r\nfirst snack which is not marked. Print all integers which we passed by.\r\n"
}