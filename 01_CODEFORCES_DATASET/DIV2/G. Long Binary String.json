{
    "link": "https://codeforces.com//contest/1698/problem/G",
    "problemId": "1443732",
    "problem_idx": "G",
    "shortId": "1698G",
    "contest_number": "1698",
    "problem_submissions": {
        "F": [
            162124470,
            162134445,
            162141749,
            162152934,
            177654064,
            216084662,
            162196377,
            162139942,
            162355602,
            162159626,
            162690820
        ],
        "E": [
            162087630,
            162097353,
            162109816,
            162103301,
            162126529,
            162103867,
            162097541,
            162101116,
            162109117,
            162107378,
            162110311,
            162151314,
            162112938,
            162118264,
            162120819,
            162122603,
            162129047,
            162116428,
            162113567,
            162115753
        ],
        "D": [
            162072106,
            162078971,
            162084618,
            162091663,
            162091608,
            162080384,
            162079742,
            162083927,
            162089597,
            162090503,
            162089228,
            162119224,
            162090409,
            162087036,
            162090706,
            162084921,
            162084389,
            162101274,
            162089309,
            162089923
        ],
        "C": [
            162065641,
            162067112,
            162066151,
            162070233,
            162081538,
            162071658,
            162069982,
            162072714,
            162074007,
            162068223,
            162076542,
            162110420,
            162075987,
            162073114,
            162072860,
            162074806,
            162073708,
            162075609,
            162078161,
            162072891
        ],
        "B": [
            162059543,
            162058156,
            162059458,
            162060292,
            162065675,
            162061709,
            162057759,
            162058869,
            162063379,
            162060397,
            162060756,
            162115063,
            162060812,
            162061896,
            162062035,
            162068563,
            162064118,
            162063059,
            162062265,
            162061711
        ],
        "A": [
            162055540,
            162055455,
            162055545,
            162055770,
            162057397,
            162055986,
            162055221,
            162055288,
            162058360,
            162055918,
            162055534,
            162055768,
            162055783,
            162057223,
            162056112,
            162055836,
            162057629,
            162055832,
            162056104,
            162055773
        ],
        "G": [
            162150291,
            162713012
        ]
    },
    "name": "G. Long Binary String",
    "statement": "There is a binary string t of length 10^{100}, and initally all of its\r\nbits are\r\ntexttt{0}. You are given a binary string s, and perform the following\r\noperation some times: Select some substring of t, and replace it with\r\nits XOR with s.^\r\ndagger After several operations, the string t has exactly two bits\r\ntexttt{1}; that is, there are exactly two distinct indices p and q such\r\nthat the p-th and q-th bits of t are\r\ntexttt{1}, and the rest of the bits are\r\ntexttt{0}. Find the lexicographically largest^\r\nddagger string t satisfying these constraints, or report that no such\r\nstring exists.^\r\ndagger Formally, choose an index i such that 0\r\nleq i\r\nleq 10^{100}-|s|. For all 1\r\nleq j\r\nleq |s|, if s_j =\r\ntexttt{1}, then toggle t_{i+j}. That is, if t_{i+j}=\r\ntexttt{0}, set t_{i+j}=\r\ntexttt{1}. Otherwise if t_{i+j}=\r\ntexttt{1}, set t_{i+j}=\r\ntexttt{0}.^\r\nddagger A binary string a is lexicographically larger than a binary\r\nstring b of the same length if in the first position where a and b\r\ndiffer, the string a has a bit\r\ntexttt{1} and the corresponding bit in b is\r\ntexttt{0}.\r\n",
    "solutions": [
        "/*\n * Y.HOLICS\n * Digital Single Upcoming!\n */\n#include <bits/stdc++.h>\nusing namespace std;\n\nunsigned __int128 atoi128(const string &s);\nstring i128toa(const unsigned __int128 &k);\n\nstruct poly {\n    int c;\n    unsigned __int128 coef;\n\n    poly() {\n        coef = 0;\n        c = 0;\n    }\n\n    poly(int c_) {\n        coef = 0;\n        c = c_ & 1;\n    }\n\n    poly(const unsigned __int128 &coef_) {\n        c = (int)(coef_ & 1);\n        coef = coef_ >> 1;\n    }\n\n    poly(const unsigned __int128 &coef_, const int &c_) {\n        coef = coef_;\n        c = c_ & 1;\n    }\n\n    inline bool is_zero() const {\n        return coef == 0 && c == 0;\n    }\n\n    inline int deg() const {\n        if (coef == 0) return 0;\n        unsigned long long fb = (unsigned long long)(coef >> 64);\n        unsigned long long lb = (unsigned long long)(coef & -1LL);\n        // debug(\"%llu\\n\", fb);\n        return fb ? 128 - __builtin_clzll(fb) : 64 - __builtin_clzll(lb);\n    }\n\n    poly der() const {\n        poly res;\n        int d = deg();\n        for (int i = 1; i < d; i++) {\n            if (!(i & 1) && (coef >> i & 1)) res.coef ^= ((unsigned __int128)1) << (i - 1);\n        }\n        res.c = (int)(coef & 1);\n        return res;\n    }\n\n    inline poly operator<<(const int &k) const {\n        return k ? poly((coef << 1 | c) << (k - 1), 0) : *this;\n    }\n\n    inline poly operator+(const poly &p) const {\n        return poly(coef ^ p.coef, c ^ p.c);\n    }\n\n    inline poly operator-(const poly &p) const {\n        return poly(coef ^ p.coef, c ^ p.c);\n    }\n\n    inline poly &operator+=(const poly &p) {\n        coef ^= p.coef;\n        c ^= p.c;\n        return *this;\n    }\n\n    poly operator*(const poly &p) const {\n        poly res;\n        int d = deg();\n        res.c = c & p.c;\n        if (c) res.coef ^= p.coef;\n        if (p.c) res.coef ^= coef;\n        for (int i = 0; i < d; i++) {\n            if (coef >> i & 1) {\n                res.coef ^= p.coef << (i + 1);\n            }\n        }\n        return res;\n    }\n\n    poly operator%(const poly &p) const {\n        if (is_zero() || deg() < p.deg()) return *this;\n        poly q;\n        poly r = *this;\n        while (true) {\n            int d = r.deg(), pd = p.deg();\n            if (r.is_zero() || d < pd) return r;\n            int fd = d - pd;\n            if (fd) q.coef ^= ((unsigned __int128)1) << (fd - 1);\n            else q.c ^= 1;\n            r = *this + q * p;\n        }\n    }\n\n    poly operator/(const poly &p) const {\n        if (is_zero() || deg() < p.deg()) return poly();\n        poly q;\n        poly r = *this;\n        while (true) {\n            int d = r.deg(), pd = p.deg();\n            if (r.is_zero() || d < pd) return q;\n            int fd = d - pd;\n            if (fd) q.coef ^= ((unsigned __int128)1) << (fd - 1);\n            else q.c ^= 1;\n            r = *this + q * p;\n        }\n    }\n\n    poly sqrt() const {\n        poly res;\n        res.c = c;\n        int d = deg();\n        for (int i = 0; i < d; i++) {\n            if (coef >> i & 1) {\n                if (!(i & 1)) assert(0);\n                res.coef ^= ((unsigned __int128)1) << (i >> 1);\n            }\n        }\n        return res;\n    }\n\n    poly sq() const {\n        poly res;\n        res.c = c;\n        int d = deg();\n        for (int i = 0; i < d; i++) {\n            res.coef ^= (coef >> i & 1) << (i << 1 | 1);\n        }\n        return res;\n    }\n};\n\nostream &operator<<(ostream &os, const unsigned __int128 &k) {\n    return os << i128toa(k);\n}\n\nstruct vec {\n    unsigned __int128 entry;\n\n    vec() {\n        entry = 0;\n    }\n\n    inline int dot(const vec &v) const {\n        unsigned __int128 tmp = entry & v.entry;\n        unsigned long long fb = (unsigned long long)(tmp >> 64);\n        unsigned long long lb = (unsigned long long)(tmp & -1LL);\n        return (__builtin_popcountll(fb) + __builtin_popcountll(lb)) & 1;\n    }\n\n    vec operator+(const vec &v) const {\n        vec res;\n        res.entry = entry ^ v.entry;\n        return res;\n    }\n\n    int ffs() const {\n        if (entry == 0) return 0;\n        unsigned long long fb = (unsigned long long)(entry >> 64);\n        unsigned long long lb = (unsigned long long)(entry & -1LL);\n        return lb ? __builtin_ffsll(lb) : 64 + __builtin_ffsll(fb);\n    }\n};\n\nvec p2v(const poly &p) {\n    vec v;\n    v.entry = p.coef << 1;\n    v.entry |= p.c;\n    return v;\n}\n\npoly v2p(const vec &v) {\n    poly p;\n    p.c = v.entry & 1;\n    p.coef = v.entry >> 1;\n    // cerr << p << '\\n';\n    return p;\n}\n\nstruct mat {\n    vector<vec> row;\n\n    mat(int n) {\n        row = vector<vec>(n);\n    }\n\n    vec operator*(const vec &v) const {\n        vec res;\n        int n = (int)row.size();\n        for (int i = 0; i < n; i++) {\n            res.entry ^= ((unsigned __int128)row[i].dot(v)) << i;\n        }\n        return res;\n    }\n\n    mat transpose() const {\n        int n = (int)row.size();\n        mat res(n);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                res.row[i].entry ^= (row[j].entry >> i & 1) << j;\n            }\n        }\n        return res;\n    }\n\n    mat operator*(const mat &m) const {\n        int n = (int)row.size();\n        mat res(n);\n        mat t = m.transpose();\n        for (int i = 0; i < n; i++) {\n            res.row[i] = t * row[i];\n        }\n        return res;\n    }\n\n    mat operator+(const mat &m) const {\n        int n = (int)row.size();\n        mat res(n);\n        for (int i = 0; i < n; i++) {\n            res.row[i].entry = row[i].entry ^ m.row[i].entry;\n        }\n        return res;\n    }\n\n    mat &operator+=(const mat &m) {\n        int n = (int)row.size();\n        for (int i = 0; i < n; i++) {\n            row[i].entry ^= m.row[i].entry;\n        }\n        return *this;\n    }\n\n    poly min_poly() const {\n        // TODO\n        int n = (int)row.size();\n        mat m(n);\n        for (int i = 0; i < n; i++) {\n            m.row[i].entry = ((unsigned __int128)1) << i;\n        }\n        vector<mat> vm;\n        vector<poly> vp;\n        vm.push_back(m);\n        vp.push_back(poly(1));\n        for (int i = 1; i <= n; i++) {\n            vm.push_back(vm.back() * *this);\n            vp.push_back(vp.back() << 1);\n        }\n        for (int i = 0; i < n; i++) {\n            int rb = 0, ri = 0;\n            for (ri = 0; ri < n; ri++) {\n                rb = vm[i].row[ri].ffs();\n                if (rb) break;\n            }\n            if (rb) {\n                rb--;\n                for (int j = i + 1; j <= n; j++) {\n                    if (vm[j].row[ri].entry >> rb & 1) {\n                        vm[j] += vm[i];\n                        vp[j] += vp[i];\n                    }\n                }\n            } else return vp[i];\n        }\n        return vp[n];\n    }\n};\n\nunsigned __int128 atoi128(const string &s) {\n    unsigned __int128 res = 0;\n    int n = (int)s.size();\n    for (int i = 0; i < n; i++) {\n        res *= 10;\n        res += s[i] - '0';\n    }\n    return res;\n}\n\nstring i128toa(const unsigned __int128 &k) {\n    if (k == 0) return \"0\";\n    unsigned __int128 k_ = k;\n    string s;\n    while (k_) {\n        s.push_back(k_ % 10 + '0');\n        k_ /= 10;\n    }\n    reverse(s.begin(), s.end());\n    return s;\n}\n\npoly gcd(const poly &p, const poly &q) {\n    return q.is_zero() ? p : gcd(q, p % q);\n}\n\nunsigned __int128 gcd128(const unsigned __int128 &a, const unsigned __int128 &b) {\n    return b == 0 ? a : gcd128(b, a % b);\n}\n\nvector<pair<poly, int>> sff(const poly &p) {\n    vector<pair<poly, int>> res;\n    poly c = gcd(p, p.der());\n    poly w = p / c;\n    int i = 1;\n    while (w.deg() >= 1 || w.c != 1) {\n        poly y = gcd(w, c);\n        poly fac = w / y;\n        if (fac.deg() >= 1) res.emplace_back(fac, i);\n        w = y;\n        c = c / y;\n        i++;\n    }\n    if (c.deg() >= 1 || c.c != 1) {\n        c = c.sqrt();\n        auto rr = sff(c);\n        for (auto &p : rr) {\n            res.emplace_back(p.first, p.second * 2);\n        }\n    }\n    return res;\n}\n\nvector<pair<poly, int>> ddf(const poly &p) {\n    // p is square-free\n    int i = 1;\n    vector<pair<poly, int>> res;\n    poly f = p;\n    int d;\n    while ((d = f.deg()) >= 2 * i) {\n        mat m(d);\n        poly one(1);\n        poly x = one << 1;\n        vector<poly> tmp;\n        tmp.push_back((x << (d - 1)) + f);\n        for (int j = d + 1; j < 2 * d; j++) {\n            tmp.push_back((tmp.back() << 1) % f);\n        }\n        for (int j = 0; j < d; j++) {\n            if (j * 2 < d) m.row[j] = p2v(one << (j * 2));\n            else m.row[j] = p2v(tmp[j * 2 - d]);\n        }\n        m = m.transpose();\n        vec vx = p2v(x);\n        for (int j = 0; j < i; j++) {\n            vx = m * vx;\n        }\n        poly g = gcd(f, v2p(vx) + x);\n        if (g.coef != 0 || g.c != 1) {\n            res.emplace_back(g, i);\n            f = f / g;\n        }\n        i++;\n    }\n    if (f.coef != 0 || f.c != 1) {\n        res.emplace_back(f, d);\n    }\n    if (res.empty()) res.emplace_back(f, 1);\n    return res;\n}\n\nvector<pair<string, int>> wolf[135];\nvector<pair<unsigned __int128, int>> gs[135];\n\nvoid init() {\n    wolf[1] = {};\n    wolf[2] = {{\"3\", 1}};\n    wolf[3] = {{\"7\", 1}};\n    wolf[4] = {{\"3\", 1}, {\"5\", 1}};\n    wolf[5] = {{\"31\", 1}};\n    wolf[6] = {{\"3\", 2}, {\"7\", 1}};\n    wolf[7] = {{\"127\", 1}};\n    wolf[8] = {{\"3\", 1}, {\"5\", 1}, {\"17\", 1}};\n    wolf[9] = {{\"7\", 1}, {\"73\", 1}};\n    wolf[10] = {{\"3\", 1}, {\"11\", 1}, {\"31\", 1}};\n    wolf[11] = {{\"23\", 1}, {\"89\", 1}};\n    wolf[12] = {{\"3\", 2}, {\"5\", 1}, {\"7\", 1}, {\"13\", 1}};\n    wolf[13] = {{\"8191\", 1}};\n    wolf[14] = {{\"3\", 1}, {\"43\", 1}, {\"127\", 1}};\n    wolf[15] = {{\"7\", 1}, {\"31\", 1}, {\"151\", 1}};\n    wolf[16] = {{\"3\", 1}, {\"5\", 1}, {\"17\", 1}, {\"257\", 1}};\n    wolf[17] = {{\"131071\", 1}};\n    wolf[18] = {{\"3\", 3}, {\"7\", 1}, {\"19\", 1}, {\"73\", 1}};\n    wolf[19] = {{\"524287\", 1}};\n    wolf[20] = {{\"3\", 1}, {\"5\", 2}, {\"11\", 1}, {\"31\", 1}, {\"41\", 1}};\n    wolf[21] = {{\"7\", 2}, {\"127\", 1}, {\"337\", 1}};\n    wolf[22] = {{\"3\", 1}, {\"23\", 1}, {\"89\", 1}, {\"683\", 1}};\n    wolf[23] = {{\"47\", 1}, {\"178481\", 1}};\n    wolf[24] = {{\"3\", 2}, {\"5\", 1}, {\"7\", 1}, {\"13\", 1}, {\"17\", 1}, {\"241\", 1}};\n    wolf[25] = {{\"31\", 1}, {\"601\", 1}, {\"1801\", 1}};\n    wolf[26] = {{\"3\", 1}, {\"2731\", 1}, {\"8191\", 1}};\n    wolf[27] = {{\"7\", 1}, {\"73\", 1}, {\"262657\", 1}};\n    wolf[28] = {{\"3\", 1}, {\"5\", 1}, {\"29\", 1}, {\"43\", 1}, {\"113\", 1}, {\"127\", 1}};\n    wolf[29] = {{\"233\", 1}, {\"1103\", 1}, {\"2089\", 1}};\n    wolf[30] = {{\"3\", 2}, {\"7\", 1}, {\"11\", 1}, {\"31\", 1}, {\"151\", 1}, {\"331\", 1}};\n    wolf[31] = {{\"2147483647\", 1}};\n    wolf[32] = {{\"3\", 1}, {\"5\", 1}, {\"17\", 1}, {\"257\", 1}, {\"65537\", 1}};\n    wolf[33] = {{\"7\", 1}, {\"23\", 1}, {\"89\", 1}, {\"599479\", 1}};\n    wolf[34] = {{\"3\", 1}, {\"43691\", 1}, {\"131071\", 1}};\n    wolf[35] = {{\"31\", 1}, {\"71\", 1}, {\"127\", 1}, {\"122921\", 1}};\n    wolf[36] = {{\"3\", 3}, {\"5\", 1}, {\"7\", 1}, {\"13\", 1}, {\"19\", 1}, {\"37\", 1}, {\"73\", 1}, {\"109\", 1}};\n    wolf[37] = {{\"223\", 1}, {\"616318177\", 1}};\n    wolf[38] = {{\"3\", 1}, {\"174763\", 1}, {\"524287\", 1}};\n    wolf[39] = {{\"7\", 1}, {\"79\", 1}, {\"8191\", 1}, {\"121369\", 1}};\n    wolf[40] = {{\"3\", 1}, {\"5\", 2}, {\"11\", 1}, {\"17\", 1}, {\"31\", 1}, {\"41\", 1}, {\"61681\", 1}};\n    wolf[41] = {{\"13367\", 1}, {\"164511353\", 1}};\n    wolf[42] = {{\"3\", 2}, {\"7\", 2}, {\"43\", 1}, {\"127\", 1}, {\"337\", 1}, {\"5419\", 1}};\n    wolf[43] = {{\"431\", 1}, {\"9719\", 1}, {\"2099863\", 1}};\n    wolf[44] = {{\"3\", 1}, {\"5\", 1}, {\"23\", 1}, {\"89\", 1}, {\"397\", 1}, {\"683\", 1}, {\"2113\", 1}};\n    wolf[45] = {{\"7\", 1}, {\"31\", 1}, {\"73\", 1}, {\"151\", 1}, {\"631\", 1}, {\"23311\", 1}};\n    wolf[46] = {{\"3\", 1}, {\"47\", 1}, {\"178481\", 1}, {\"2796203\", 1}};\n    wolf[47] = {{\"2351\", 1}, {\"4513\", 1}, {\"13264529\", 1}};\n    wolf[48] = {{\"3\", 2}, {\"5\", 1}, {\"7\", 1}, {\"13\", 1}, {\"17\", 1}, {\"97\", 1}, {\"241\", 1}, {\"257\", 1}, {\"673\", 1}};\n    wolf[49] = {{\"127\", 1}, {\"4432676798593\", 1}};\n    wolf[50] = {{\"3\", 1}, {\"11\", 1}, {\"31\", 1}, {\"251\", 1}, {\"601\", 1}, {\"1801\", 1}, {\"4051\", 1}};\n    wolf[51] = {{\"7\", 1}, {\"103\", 1}, {\"2143\", 1}, {\"11119\", 1}, {\"131071\", 1}};\n    wolf[52] = {{\"3\", 1}, {\"5\", 1}, {\"53\", 1}, {\"157\", 1}, {\"1613\", 1}, {\"2731\", 1}, {\"8191\", 1}};\n    wolf[53] = {{\"6361\", 1}, {\"69431\", 1}, {\"20394401\", 1}};\n    wolf[54] = {{\"3\", 4}, {\"7\", 1}, {\"19\", 1}, {\"73\", 1}, {\"87211\", 1}, {\"262657\", 1}};\n    wolf[55] = {{\"23\", 1}, {\"31\", 1}, {\"89\", 1}, {\"881\", 1}, {\"3191\", 1}, {\"201961\", 1}};\n    wolf[56] = {{\"3\", 1}, {\"5\", 1}, {\"17\", 1}, {\"29\", 1}, {\"43\", 1}, {\"113\", 1}, {\"127\", 1}, {\"15790321\", 1}};\n    wolf[57] = {{\"7\", 1}, {\"32377\", 1}, {\"524287\", 1}, {\"1212847\", 1}};\n    wolf[58] = {{\"3\", 1}, {\"59\", 1}, {\"233\", 1}, {\"1103\", 1}, {\"2089\", 1}, {\"3033169\", 1}};\n    wolf[59] = {{\"179951\", 1}, {\"3203431780337\", 1}};\n    wolf[60] = {{\"3\", 2}, {\"5\", 2}, {\"7\", 1}, {\"11\", 1}, {\"13\", 1}, {\"31\", 1}, {\"41\", 1}, {\"61\", 1}, {\"151\", 1}, {\"331\", 1}, {\"1321\", 1}};\n    wolf[61] = {{\"2305843009213693951\", 1}};\n    wolf[62] = {{\"3\", 1}, {\"715827883\", 1}, {\"2147483647\", 1}};\n    wolf[63] = {{\"7\", 2}, {\"73\", 1}, {\"127\", 1}, {\"337\", 1}, {\"92737\", 1}, {\"649657\", 1}};\n    wolf[64] = {{\"3\", 1}, {\"5\", 1}, {\"17\", 1}, {\"257\", 1}, {\"641\", 1}, {\"65537\", 1}, {\"6700417\", 1}};\n    wolf[65] = {{\"31\", 1}, {\"8191\", 1}, {\"145295143558111\", 1}};\n    wolf[66] = {{\"3\", 2}, {\"7\", 1}, {\"23\", 1}, {\"67\", 1}, {\"89\", 1}, {\"683\", 1}, {\"20857\", 1}, {\"599479\", 1}};\n    wolf[67] = {{\"193707721\", 1}, {\"761838257287\", 1}};\n    wolf[68] = {{\"3\", 1}, {\"5\", 1}, {\"137\", 1}, {\"953\", 1}, {\"26317\", 1}, {\"43691\", 1}, {\"131071\", 1}};\n    wolf[69] = {{\"7\", 1}, {\"47\", 1}, {\"178481\", 1}, {\"10052678938039\", 1}};\n    wolf[70] = {{\"3\", 1}, {\"11\", 1}, {\"31\", 1}, {\"43\", 1}, {\"71\", 1}, {\"127\", 1}, {\"281\", 1}, {\"86171\", 1}, {\"122921\", 1}};\n    wolf[71] = {{\"228479\", 1}, {\"48544121\", 1}, {\"212885833\", 1}};\n    wolf[72] = {{\"3\", 3}, {\"5\", 1}, {\"7\", 1}, {\"13\", 1}, {\"17\", 1}, {\"19\", 1}, {\"37\", 1}, {\"73\", 1}, {\"109\", 1}, {\"241\", 1}, {\"433\", 1}, {\"38737\", 1}};\n    wolf[73] = {{\"439\", 1}, {\"2298041\", 1}, {\"9361973132609\", 1}};\n    wolf[74] = {{\"3\", 1}, {\"223\", 1}, {\"1777\", 1}, {\"25781083\", 1}, {\"616318177\", 1}};\n    wolf[75] = {{\"7\", 1}, {\"31\", 1}, {\"151\", 1}, {\"601\", 1}, {\"1801\", 1}, {\"100801\", 1}, {\"10567201\", 1}};\n    wolf[76] = {{\"3\", 1}, {\"5\", 1}, {\"229\", 1}, {\"457\", 1}, {\"174763\", 1}, {\"524287\", 1}, {\"525313\", 1}};\n    wolf[77] = {{\"23\", 1}, {\"89\", 1}, {\"127\", 1}, {\"581283643249112959\", 1}};\n    wolf[78] = {{\"3\", 2}, {\"7\", 1}, {\"79\", 1}, {\"2731\", 1}, {\"8191\", 1}, {\"121369\", 1}, {\"22366891\", 1}};\n    wolf[79] = {{\"2687\", 1}, {\"202029703\", 1}, {\"1113491139767\", 1}};\n    wolf[80] = {{\"3\", 1}, {\"5\", 2}, {\"11\", 1}, {\"17\", 1}, {\"31\", 1}, {\"41\", 1}, {\"257\", 1}, {\"61681\", 1}, {\"4278255361\", 1}};\n    wolf[81] = {{\"7\", 1}, {\"73\", 1}, {\"2593\", 1}, {\"71119\", 1}, {\"262657\", 1}, {\"97685839\", 1}};\n    wolf[82] = {{\"3\", 1}, {\"83\", 1}, {\"13367\", 1}, {\"164511353\", 1}, {\"8831418697\", 1}};\n    wolf[83] = {{\"167\", 1}, {\"57912614113275649087721\", 1}};\n    wolf[84] = {{\"3\", 2}, {\"5\", 1}, {\"7\", 2}, {\"13\", 1}, {\"29\", 1}, {\"43\", 1}, {\"113\", 1}, {\"127\", 1}, {\"337\", 1}, {\"1429\", 1}, {\"5419\", 1}, {\"14449\", 1}};\n    wolf[85] = {{\"31\", 1}, {\"131071\", 1}, {\"9520972806333758431\", 1}};\n    wolf[86] = {{\"3\", 1}, {\"431\", 1}, {\"9719\", 1}, {\"2099863\", 1}, {\"2932031007403\", 1}};\n    wolf[87] = {{\"7\", 1}, {\"233\", 1}, {\"1103\", 1}, {\"2089\", 1}, {\"4177\", 1}, {\"9857737155463\", 1}};\n    wolf[88] = {{\"3\", 1}, {\"5\", 1}, {\"17\", 1}, {\"23\", 1}, {\"89\", 1}, {\"353\", 1}, {\"397\", 1}, {\"683\", 1}, {\"2113\", 1}, {\"2931542417\", 1}};\n    wolf[89] = {{\"618970019642690137449562111\", 1}};\n    wolf[90] = {{\"3\", 3}, {\"7\", 1}, {\"11\", 1}, {\"19\", 1}, {\"31\", 1}, {\"73\", 1}, {\"151\", 1}, {\"331\", 1}, {\"631\", 1}, {\"23311\", 1}, {\"18837001\", 1}};\n    wolf[91] = {{\"127\", 1}, {\"911\", 1}, {\"8191\", 1}, {\"112901153\", 1}, {\"23140471537\", 1}};\n    wolf[92] = {{\"3\", 1}, {\"5\", 1}, {\"47\", 1}, {\"277\", 1}, {\"1013\", 1}, {\"1657\", 1}, {\"30269\", 1}, {\"178481\", 1}, {\"2796203\", 1}};\n    wolf[93] = {{\"7\", 1}, {\"2147483647\", 1}, {\"658812288653553079\", 1}};\n    wolf[94] = {{\"3\", 1}, {\"283\", 1}, {\"2351\", 1}, {\"4513\", 1}, {\"13264529\", 1}, {\"165768537521\", 1}};\n    wolf[95] = {{\"31\", 1}, {\"191\", 1}, {\"524287\", 1}, {\"420778751\", 1}, {\"30327152671\", 1}};\n    wolf[96] = {{\"3\", 2}, {\"5\", 1}, {\"7\", 1}, {\"13\", 1}, {\"17\", 1}, {\"97\", 1}, {\"193\", 1}, {\"241\", 1}, {\"257\", 1}, {\"673\", 1}, {\"65537\", 1}, {\"22253377\", 1}};\n    wolf[97] = {{\"11447\", 1}, {\"13842607235828485645766393\", 1}};\n    wolf[98] = {{\"3\", 1}, {\"43\", 1}, {\"127\", 1}, {\"4363953127297\", 1}, {\"4432676798593\", 1}};\n    wolf[99] = {{\"7\", 1}, {\"23\", 1}, {\"73\", 1}, {\"89\", 1}, {\"199\", 1}, {\"153649\", 1}, {\"599479\", 1}, {\"33057806959\", 1}};\n    wolf[100] = {{\"3\", 1}, {\"5\", 3}, {\"11\", 1}, {\"31\", 1}, {\"41\", 1}, {\"101\", 1}, {\"251\", 1}, {\"601\", 1}, {\"1801\", 1}, {\"4051\", 1}, {\"8101\", 1}, {\"268501\", 1}};\n    wolf[101] = {{\"7432339208719\", 1}, {\"341117531003194129\", 1}};\n    wolf[102] = {{\"3\", 2}, {\"7\", 1}, {\"103\", 1}, {\"307\", 1}, {\"2143\", 1}, {\"2857\", 1}, {\"6529\", 1}, {\"11119\", 1}, {\"43691\", 1}, {\"131071\", 1}};\n    wolf[103] = {{\"2550183799\", 1}, {\"3976656429941438590393\", 1}};\n    wolf[104] = {{\"3\", 1}, {\"5\", 1}, {\"17\", 1}, {\"53\", 1}, {\"157\", 1}, {\"1613\", 1}, {\"2731\", 1}, {\"8191\", 1}, {\"858001\", 1}, {\"308761441\", 1}};\n    wolf[105] = {{\"7\", 2}, {\"31\", 1}, {\"71\", 1}, {\"127\", 1}, {\"151\", 1}, {\"337\", 1}, {\"29191\", 1}, {\"106681\", 1}, {\"122921\", 1}, {\"152041\", 1}};\n    wolf[106] = {{\"3\", 1}, {\"107\", 1}, {\"6361\", 1}, {\"69431\", 1}, {\"20394401\", 1}, {\"28059810762433\", 1}};\n    wolf[107] = {{\"162259276829213363391578010288127\", 1}};\n    wolf[108] = {{\"3\", 4}, {\"5\", 1}, {\"7\", 1}, {\"13\", 1}, {\"19\", 1}, {\"37\", 1}, {\"73\", 1}, {\"109\", 1}, {\"87211\", 1}, {\"246241\", 1}, {\"262657\", 1}, {\"279073\", 1}};\n    wolf[109] = {{\"745988807\", 1}, {\"870035986098720987332873\", 1}};\n    wolf[110] = {{\"3\", 1}, {\"11\", 2}, {\"23\", 1}, {\"31\", 1}, {\"89\", 1}, {\"683\", 1}, {\"881\", 1}, {\"2971\", 1}, {\"3191\", 1}, {\"201961\", 1}, {\"48912491\", 1}};\n    wolf[111] = {{\"7\", 1}, {\"223\", 1}, {\"321679\", 1}, {\"26295457\", 1}, {\"319020217\", 1}, {\"616318177\", 1}};\n    wolf[112] = {{\"3\", 1}, {\"5\", 1}, {\"17\", 1}, {\"29\", 1}, {\"43\", 1}, {\"113\", 1}, {\"127\", 1}, {\"257\", 1}, {\"5153\", 1}, {\"15790321\", 1}, {\"54410972897\", 1}};\n    wolf[113] = {{\"3391\", 1}, {\"23279\", 1}, {\"65993\", 1}, {\"1868569\", 1}, {\"1066818132868207\", 1}};\n    wolf[114] = {{\"3\", 2}, {\"7\", 1}, {\"571\", 1}, {\"32377\", 1}, {\"174763\", 1}, {\"524287\", 1}, {\"1212847\", 1}, {\"160465489\", 1}};\n    wolf[115] = {{\"31\", 1}, {\"47\", 1}, {\"14951\", 1}, {\"178481\", 1}, {\"4036961\", 1}, {\"2646507710984041\", 1}};\n    wolf[116] = {{\"3\", 1}, {\"5\", 1}, {\"59\", 1}, {\"233\", 1}, {\"1103\", 1}, {\"2089\", 1}, {\"3033169\", 1}, {\"107367629\", 1}, {\"536903681\", 1}};\n    wolf[117] = {{\"7\", 1}, {\"73\", 1}, {\"79\", 1}, {\"937\", 1}, {\"6553\", 1}, {\"8191\", 1}, {\"86113\", 1}, {\"121369\", 1}, {\"7830118297\", 1}};\n    wolf[118] = {{\"3\", 1}, {\"2833\", 1}, {\"37171\", 1}, {\"179951\", 1}, {\"1824726041\", 1}, {\"3203431780337\", 1}};\n    wolf[119] = {{\"127\", 1}, {\"239\", 1}, {\"20231\", 1}, {\"131071\", 1}, {\"62983048367\", 1}, {\"131105292137\", 1}};\n    wolf[120] = {{\"3\", 2}, {\"5\", 2}, {\"7\", 1}, {\"11\", 1}, {\"13\", 1}, {\"17\", 1}, {\"31\", 1}, {\"41\", 1}, {\"61\", 1}, {\"151\", 1}, {\"241\", 1}, {\"331\", 1}, {\"1321\", 1}, {\"61681\", 1}, {\"4562284561\", 1}};\n    wolf[121] = {{\"23\", 1}, {\"89\", 1}, {\"727\", 1}, {\"1786393878363164227858270210279\", 1}};\n    wolf[122] = {{\"3\", 1}, {\"768614336404564651\", 1}, {\"2305843009213693951\", 1}};\n    wolf[123] = {{\"7\", 1}, {\"13367\", 1}, {\"3887047\", 1}, {\"164511353\", 1}, {\"177722253954175633\", 1}};\n    wolf[124] = {{\"3\", 1}, {\"5\", 1}, {\"5581\", 1}, {\"8681\", 1}, {\"49477\", 1}, {\"384773\", 1}, {\"715827883\", 1}, {\"2147483647\", 1}};\n    wolf[125] = {{\"31\", 1}, {\"601\", 1}, {\"1801\", 1}, {\"269089806001\", 1}, {\"4710883168879506001\", 1}};\n    wolf[126] = {{\"3\", 3}, {\"7\", 2}, {\"19\", 1}, {\"43\", 1}, {\"73\", 1}, {\"127\", 1}, {\"337\", 1}, {\"5419\", 1}, {\"92737\", 1}, {\"649657\", 1}, {\"77158673929\", 1}};\n    wolf[127] = {{\"170141183460469231731687303715884105727\", 1}};\n    wolf[128] = {{\"3\", 1}, {\"5\", 1}, {\"17\", 1}, {\"257\", 1}, {\"641\", 1}, {\"65537\", 1}, {\"274177\", 1}, {\"6700417\", 1}, {\"67280421310721\", 1}};\n\n    for (int i = 1; i <= 128; i++) {\n        for (auto &p : wolf[i]) {\n            gs[i].emplace_back(atoi128(p.first), p.second);\n        }\n    }\n}\n\nbool order_test(const poly &f, const unsigned __int128 &k) {\n    int d = f.deg();\n    mat m(d);\n    poly one(1);\n    poly x = one << 1;\n    vector<poly> tmp;\n    tmp.push_back((x << (d - 1)) + f);\n    for (int j = d + 1; j < 2 * d; j++) {\n        tmp.push_back((tmp.back() << 1) % f);\n    }\n    for (int j = 0; j < d; j++) {\n        if (j * 2 < d) m.row[j] = p2v(one << (j * 2));\n        else m.row[j] = p2v(tmp[j * 2 - d]);\n    }\n    m = m.transpose();\n    vec vx = p2v(one);\n    for (int i = 127; i >= 0; i--) {\n        vx = m * vx;\n        if (k >> i & 1) {\n            vx = p2v((v2p(vx) << 1) % f);\n        }\n    }\n    poly r = v2p(vx) + 1;\n    return r.is_zero();\n}\n\nunsigned __int128 find_order(const poly &f, int d) {\n    unsigned __int128 k = d < 128 ? (((unsigned __int128)1) << d) - 1 : ~(unsigned __int128)0;\n    // cerr << \"Fuck\" << \" \" << k << endl;\n    for (auto &p : gs[d]) {\n        for (int i = 0; i < p.second; i++) {\n        \t// cerr << p.first << endl;\n            if (order_test(f, k / p.first)) {\n                k /= p.first;\n            } else break;\n        }\n    }\n    return k;\n}\n\nunsigned __int128 psolve(poly p) {\n    // cerr << p << '\\n';\n    poly x = poly(1) << 1;\n    int dummy = 0;\n    while ((p % x).is_zero()) {\n        dummy++;\n        p = p / x;\n    }\n    auto fac = sff(p);\n    int mx = 0;\n    poly sfp(1);\n    for (auto &cc : fac) {\n        mx = max(mx, cc.second);\n        sfp = sfp * cc.first;\n    }\n    int multiplier = 1;\n    while (mx > multiplier) {\n        multiplier <<= 1;\n    }\n    auto fin = ddf(sfp);\n    unsigned __int128 ans = 1;\n    for (auto &cc : fin) {\n        unsigned __int128 k = find_order(cc.first, cc.second);\n        ans = ans / gcd128(ans, k) * k;\n    }\n    ans *= multiplier;\n    if (ans == ~(unsigned __int128)0) {\n    \tcout << \"340282366920938463463374607431768211456\\n\";\n    \texit(0);\n    }\n    return ans + max(dummy, 1);\n}\n\nunsigned __int128 solve(const mat &m) {\n    return psolve(m.min_poly());\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tinit();\n\tstring s;\n\tcin >> s;\n\tint fc = -1;\n\tint n = (int)s.size();\n\tfor (int i = 0; i < n; i++) {\n\t\tif (s[i] == '1') {\n\t\t\tfc = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (fc == -1) {\n\t\tcout << \"-1\\n\";\n\t\treturn 0;\n\t}\n\ts = s.substr(fc);\n\tunsigned __int128 coef = 0;\n\tfor (int i = 0; i < n - fc; i++) {\n\t\tif (s[i] == '1') {\n\t\t\tcoef |= (((unsigned __int128)1) << i);\n\t\t}\n\t}\n\t// cerr << coef << endl;\n\tcout << fc + 1 << \" \" << psolve(poly(coef)) + (unsigned __int128)fc << \"\\n\";\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "math",
        "matrices",
        "meet-in-the-middle",
        "number theory"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\G. Long Binary String.json",
    "editorial_link": "https://codeforces.com//blog/entry/104310",
    "editorial": "Ignore leading zeroes of . We can add them back at the end.Let\u00e2\u0080\u0099s view\r\nthe string as a polynomial in . Then in an operation we can multiply by\r\nany monomial for some , so after some number of operations we can\r\nmultiply by some other polynomial .At the end, we have a string with two\r\nflipped bits. We can in fact make the first character equal to by\r\nfinding the smallest such that . Such a exists, because the constant\r\nterm of is and is arbitrary. Rewrite this as . Now it\u00e2\u0080\u0099s clear that the\r\nanswer is a divisor of the order of in .We can use polynomial factoring\r\nalgorithms or baby-step-giant-step and meet in the middle. The time\r\ncomplexity is or .\r\n"
}