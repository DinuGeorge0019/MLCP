{
    "link": "https://codeforces.com//contest/1629/problem/F1",
    "problemId": "1270555",
    "problem_idx": "F1",
    "shortId": "1629F1",
    "contest_number": "1629",
    "problem_submissions": {
        "E": [
            143691687,
            143672752,
            143687137,
            143663655,
            143674506,
            143679445,
            143862635,
            143682492,
            143680665,
            143680424,
            143685684,
            143684891,
            143753002,
            143685619,
            143692185,
            143689230,
            143685863,
            143687115,
            143695099,
            143693974
        ],
        "F2": [
            143688718,
            143726329,
            143690987
        ],
        "F1": [
            143676123,
            143697164,
            143692998,
            143741879,
            143678223,
            143750588,
            143750365
        ],
        "D": [
            143667461,
            143661533,
            143674891,
            143656107,
            143648676,
            143665361,
            143663909,
            143668220,
            143661278,
            143662732,
            143656926,
            143668180,
            143668746,
            143665526,
            143669234,
            143667378,
            143676861,
            143663591,
            143664123
        ],
        "C": [
            143651046,
            143647499,
            143659885,
            143651714,
            143662268,
            143651456,
            143647120,
            143654421,
            143646086,
            143650221,
            143697555,
            143656282,
            143655178,
            143644392,
            143657665,
            143654804,
            143651022,
            143650097,
            143652583
        ],
        "B": [
            143642034,
            143637040,
            143638720,
            143651837,
            143664772,
            143638989,
            143637268,
            143641201,
            143638312,
            143634980,
            143632383,
            143644246,
            143635339,
            143635326,
            143637617,
            143639992,
            143639371,
            143640785,
            143642627
        ],
        "A": [
            143633916,
            143631168,
            143632391,
            143651906,
            143666062,
            143631304,
            143631044,
            143630886,
            143631218,
            143630607,
            143639841,
            143633922,
            143630487,
            143630572,
            143630653,
            143631188,
            143630505,
            143635250,
            143635282
        ]
    },
    "name": "F1. Game on Sum  Easy Version ",
    "statement": "Alice and Bob are given the numbers n, m and k, and play a game as\r\nfollows:The game has a score that Alice tries to maximize, and Bob tries\r\nto minimize. The score is initially 0. The game consists of n turns.\r\nEach turn, Alice picks a number from 0 to k (inclusive) which Bob either\r\nadds to or subtracts from the score of the game. But throughout the\r\ngame, Bob has to choose to add at least m out of the n turns.Bob gets to\r\nknow which number Alice picked before deciding whether to add or\r\nsubtract the number from the score, and Alice gets to know whether Bob\r\nadded or subtracted the number for the previous turn before picking the\r\nnumber for the current turn (except on the first turn since there was no\r\nprevious turn).If Alice and Bob play optimally, what will the final\r\nscore of the game be?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define mod 1000000007\nll read() {\n\tll x=0,f=1;char ch=getchar();\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') f=-1;\n\tfor(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n\treturn x*f;\n}\nint T;\nll n,m,k;\nint id(char s1,char s2) {\n\treturn (s1-'a')*30+s2-'a';\n}\nint id2(char s1,char s2,char s3){\n\treturn (s1-'a')*30*30+(s2-'a')*30+s3;\n}\nll f[2020][2020];\nint main() {\n\tscanf(\"%d\",&T);\n\twhile(T--) {\n\t\tscanf(\"%lld%lld%lld\",&n,&m,&k);\n\t\tll inv=500000004;\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tf[i][0]=0;f[i][i]=k*i%mod;\n\t\t\tfor(int j=1;j<=m;j++) {\n\t\t\t\tif(j>=i) break;\n\t\t\t\tf[i][j]=(f[i-1][j-1]+f[i-1][j])*inv%mod;\n\t\t\t}\n\t\t}\n\t\tcout<<f[n][m]<<'\\n';\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "games"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F1. Game on Sum  Easy Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/99276",
    "editorial": "What is the answer for n=2\n, m=1\n?\n\nLet's call the number Alice picks on the first turn x\n.\n\nIf x\n is small, Bob can add it, and then Alice will have to pick 0\n on the last turn since Bob will definitely subtract it from the score if it isn't 0\n, meaning the score ends up being x\n.\n\nIf Alice picks a big number, Bob can subtract it. Then Alice will pick the biggest number she can on the last turn, ending up with a score of k?x\n.\n\nSince Bob tries to minimize the score of the game, Alice should pick an x\n such that it maximizes the value of min(x,k?x)\n. x\n and k?x\n are both linear (straight line) functions on x\n. The x\n value that maximizes the minimum of two lines is their intersection. The intersection of the lines x\n and k?x\n is at x=k/2\n. So Alice should pick x=k/2\n in the optimal game where n=2\n, m=1\n.\n\nTo generalize the solution to arbitrary n\n and m\n, we can use DP. Let DP[i][j]\n what the score would be if n=i\n, m=j\n.\n\nOur base cases will be\n\nDP[i][0]=0\n since if Bob doesn't have to add anything, Alice has to always pick 0\n.\nDP[i][i]=i?k\n since if Bob always has to add, Alice can just pick k\n every time.\nWhen Bob adds to the score, the rest of the game will be the same as a game with 1\n fewer turns and 1\n fewer forced adds, except the game score is offset by Alice's number. When Bob subtracts from the score, the rest of the game will be the same as a game with 1\n fewer turns except the game score is offset by negative Alice's number.\n\nBob will take the minimum of these, so the DP\n transition will be\n\nDP[i][j]=min(DP[i?1][j?1]+x,DP[i?1][j]?x)\n for x\n that maximizes this value.\n\nThis is the same problem as the n=2\n case resulting in the intersection between lines. The score at this intersection simplifies nicely to DP[i][j]=(DP[i?1][j?1]+DP[i?1][j])/2\n\nThis O(n?m)\n solution is fast enough to pass the easy version of this problem.",
    "hint": []
}