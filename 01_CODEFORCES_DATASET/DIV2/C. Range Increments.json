{"link": "https://codeforces.com//contest/174/problem/C", "problemId": "1098", "problem_idx": "C", "shortId": "174C", "contest_number": "174", "problem_submissions": {"B": [1503930, 1499525, 1499538, 1500205, 1499258, 1499768, 1501357, 1499457, 1503985, 1505557, 1499961, 1499234, 1500331], "D": [1503363, 1501621, 1502127, 1503092, 1503245, 1503411, 1501894, 1503085, 1501903, 1500001, 1503531, 1501616, 1502373, 1502070, 1502395, 1502564, 1503108], "C": [1503107, 1508292, 1501371, 1501282, 1500969, 1500926, 1499876, 1501802, 1501230, 1502044, 1502361, 1504842, 1501563, 1501111, 1501734, 1502012], "A": [1501910, 1498466, 1498355, 1498723, 1498298, 1498576, 1498366, 1498300, 1498312, 1502389, 1498657, 1498399, 1498335, 1498390, 1499307, 1498408, 1498327, 1498514], "E": [1499649, 1502782, 1505549, 1505680, 1505679, 1505670, 1505552]}, "name": "C. Range Increments", "statement": "Polycarpus is an amateur programmer. Now he is analyzing a friend\u2019s\r\nprogram. He has already found there the function , that adds to each\r\nelement of some array for all indexes in the segment . In other words,\r\nthis function does the following: function rangeIncrement(l, r) for i :=\r\nl .. r do a[i] = a[i] + 1Polycarpus knows the state of the array after a\r\nseries of function calls. He wants to determine the minimum number of\r\nfunction calls that lead to such state. In addition, he wants to find\r\nwhat function calls are needed in this case. It is guaranteed that the\r\nrequired number of calls does not exceed .Before calls of function all\r\narray elements equal zero.\r\n", "solutions": ["#include<iostream>\n#include<cstdio>\n#include <string>\n#include<set>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<list>\nusing namespace std;\n\nint n, a[100000];\nvector<int> L, R;\n\nstruct tt\n{\n    int l, r;\n};\nlist<tt> Q;\n\nint main()\n{\n    #ifndef ONLINE_JUDGE\n        freopen(\"input.txt\", \"rt\", stdin);\n        freopen(\"output.txt\", \"wt\", stdout);\n    #endif\n\n    cin >> n;\n    for (int i = 0; i < n; i++)\n        cin >> a[i];\n\n    int inc = 0, d = 0;\n    for (int i = 0; i < n; i++)\n        if (inc != a[i])\n            if (inc < a[i])\n            {\n                for (int j = 0; j < a[i] - inc; j++)\n                {\n\n                    tt g;\n                    g.l = i;\n                    Q.push_back(g);         \n                }\n                inc = a[i]; \n            }\n            else\n            {\n                for (int j = 0; j < inc - a[i]; j++)\n                {\n                    tt k = Q.back();\n                    Q.pop_back();\n\n                    k.r = i - 1;\n\n                    L.push_back(k.l);\n                    R.push_back(k.r);\n                }\n                inc = a[i];\n            }\n\n    \n    while (!Q.empty())\n    {\n        tt k = Q.front();\n        Q.pop_front();\n        k.r = n - 1;\n\n        L.push_back(k.l);\n        R.push_back(k.r);\n    }\n\n\n    cout << L.size() << endl;\n    for (int i = 0; i < L.size(); i++)\n        cout << L[i] + 1 << \" \" << R[i] + 1 << endl;    \n}"], "input": "", "output": "", "tags": ["data structures", "greedy"], "dificulty": "1800", "interactive": false}