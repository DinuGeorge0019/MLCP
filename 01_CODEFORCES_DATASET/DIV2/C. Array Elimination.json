{
    "link": "https://codeforces.com//contest/1602/problem/C",
    "problemId": "1157772",
    "problem_idx": "C",
    "shortId": "1602C",
    "contest_number": "1602",
    "problem_submissions": {
        "E": [
            133032006,
            133003754,
            133004259,
            133007498,
            133009354,
            133008986,
            133015586,
            133014296,
            133019189,
            133016251,
            133023043,
            133017173,
            133017654,
            133031118,
            133031771,
            133023126,
            133023444,
            133026607,
            133071046,
            133071006,
            133023246,
            133026124
        ],
        "F": [
            133014631,
            133053467,
            133059590,
            133053314,
            133051962,
            133051828,
            133051273,
            133051246,
            133050986,
            133051444,
            133058927,
            154906935,
            133202717
        ],
        "D": [
            133005341,
            132997744,
            132998965,
            133002435,
            132995700,
            132999302,
            133001008,
            133003621,
            133003659,
            132999008,
            132999274,
            133007130,
            133055379,
            133006665,
            133001448,
            133002893,
            133007904,
            133005768,
            133005590,
            133006243,
            133009816
        ],
        "C": [
            132998504,
            132991987,
            132994038,
            132995401,
            132990761,
            132993753,
            132991630,
            132994468,
            132994573,
            133000658,
            132992001,
            132996442,
            132999119,
            132991525,
            132995757,
            132998190,
            132996165,
            132996191,
            132994329,
            132993830
        ],
        "B": [
            132991874,
            132990242,
            132989322,
            132992468,
            132988801,
            132988045,
            132989355,
            132992898,
            148604097,
            132990867,
            133003212,
            132988289,
            133227165,
            132993306,
            133064818,
            132995361,
            132995328,
            132993153,
            132995379,
            132997555,
            132991609,
            132992280,
            132992140
        ],
        "A": [
            132986686,
            132984939,
            132985573,
            132990670,
            132984472,
            132986995,
            132984659,
            132987933,
            148604079,
            132986349,
            132985981,
            132984656,
            133227226,
            132987663,
            132991514,
            132988125,
            132988425,
            132989208,
            132984538,
            132986551,
            132985450,
            132984595
        ]
    },
    "name": "C. Array Elimination",
    "statement": "You are given array a_1, a_2,\r\nldots, a_n, consisting of non-negative integers.Let\u2019s define operation\r\nof \"elimination\" with integer parameter k (1\r\nleq k\r\nleq n) as follows: Choose k distinct array indices 1\r\nleq i_1 < i_2 <\r\nldots < i_k\r\nle n. Calculate x = a_{i_1} \u00a0\r\n& \u00a0 a_{i_2} \u00a0\r\n& \u00a0\r\nldots \u00a0\r\n& \u00a0 a_{i_k}, where\r\n& denotes the bitwise AND operation (notes section contains formal\r\ndefinition). Subtract x from each of a_{i_1}, a_{i_2},\r\nldots, a_{i_k}; all other elements remain untouched. Find all possible\r\nvalues of k, such that it\u2019s possible to make all elements of array a\r\nequal to 0 using a finite number of elimination operations with\r\nparameter k. It can be proven that exists at least one possible k for\r\nany array a.Note that you .\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nint read()\n{\n\tint ret=0;bool f=0;char c=getchar();\n\twhile(c>'9'||c<'0')f|=(c=='-'),c=getchar();\n\twhile(c>='0'&&c<='9')ret=(ret<<3)+(ret<<1)+(c^48),c=getchar();\n\treturn f?-ret:ret;\n}\nint T;\nconst int maxn=2e5+5;\nconst int maxm=30;\nint n,a[maxn];\nint cnt[maxm];\nint main()\n{\n\tT=read();\n\twhile(T--)\n\t{\n\t\tgenerate_n(a+1,n=read(),read);\n\t\tfor(int i=0;i<30;i++)cnt[i]=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=0;j<30;j++)if((a[i]>>j)&1)cnt[j]++;\n\t\tint d=0;\n\t\tfor(int i=0;i<30;i++)d=__gcd(d,cnt[i]);\n\t\tif(!d)for(int i=1;i<=n;i++)printf(\"%d \",i);\n\t\telse for(int i=1;i<=d;i++)if(d%i==0)printf(\"%d \",i);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "math",
        "number theory"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Array Elimination.json",
    "editorial_link": "https://codeforces.com//blog/entry/95865",
    "editorial": "Let's note, that in one destruction for any bit i\n (0?i<30\n) we either change all k\n-th non-zero bits into zero bits, or nothing changes. So, the number of i\n-th non-zero bits in the array either decreases by k\n or doesn't change. In the end, all these numbers will be equal to 0\n. So, to be able to destruct the array, the number of i\n-th non-zero bits in the array should be divisible by k\n for all bits i\n.\n\nLet's prove, that it is enough to destruct the array. Let's make operations with non-zero AND, while we can make them. In the end, there is at least one non-zero element, if we have not destructed the array. So, there is at least one bit i\n, for which the number of i\n-th non-zero bits in the array is non-zero, so this number is at least k\n (because it is divisible by k\n). So we can select k\n numbers with i\n-th non-zero bit to the next operation and make the new destruction, which is impossible.\n\nSo the resulting solution is: for each bit i\n (0?i<30\n) let's find the number of array's elements with non-zero i\n-th bit. Let's find all common divisors k\n (1?k?n\n) of these numbers.\n\nTime complexity is O(nlogC)\n, where C=109\n  \u0097 upper limit on all numbers in the array."
}