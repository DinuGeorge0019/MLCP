{
    "link": "https://codeforces.com//contest/1397/problem/B",
    "problemId": "712380",
    "problem_idx": "B",
    "shortId": "1397B",
    "contest_number": "1397",
    "problem_submissions": {
        "E": [
            91394076,
            91394865,
            91408844,
            91416677,
            91414871,
            91407127,
            91402357,
            91407934,
            91417811,
            91413475,
            91412250,
            91419091,
            91378476,
            91418930,
            91419994,
            91417519,
            91458404,
            91417294,
            91409334
        ],
        "D": [
            91372186,
            91372582,
            91379493,
            91372345,
            91376314,
            91383935,
            91383522,
            91392204,
            91382650,
            91385007,
            91393978,
            91368671,
            91385270,
            91368010,
            91395370,
            91397954,
            91372182
        ],
        "C": [
            91363525,
            91369524,
            91374646,
            91368197,
            91364426,
            91371771,
            91377426,
            91373604,
            91367966,
            91376255,
            91377856,
            91409632,
            91401708,
            91394202,
            91379664,
            91386652,
            91367805,
            91370718
        ],
        "B": [
            91361168,
            91362660,
            91362581,
            91360878,
            91374582,
            91380823,
            91370909,
            91365176,
            91359546,
            91369350,
            91367433,
            91374994,
            91454186,
            91372042,
            91383116,
            91365692,
            103511310,
            91389732,
            91359483,
            91364179
        ],
        "A": [
            91350972,
            91351778,
            91350895,
            91353022,
            91367161,
            91353583,
            91358678,
            91362352,
            91350856,
            91360209,
            91369795,
            91350959,
            91386649,
            91455005,
            91454161,
            91357607,
            91352696,
            91350850,
            91354043,
            91352491,
            91360679
        ]
    },
    "name": "B. Power Sequence",
    "statement": "Let\u2019s call a list of positive integers a_0, a_1, ..., a_{n-1} a if there\r\nis a positive integer c, so that for every 0\r\nle i\r\nle n-1 then a_i = c^i.Given a list of n positive integers a_0, a_1, ...,\r\na_{n-1}, you are allowed to: Reorder the list (i.e. pick a permutation p\r\nof\r\n{0,1,...,n - 1\r\n} and change a_i to a_{p_i}), then Do the following operation any number\r\nof times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e.\r\nincrement or decrement a_i by 1) with a cost of 1. Find the minimum cost\r\nto transform a_0, a_1, ..., a_{n-1} into a power sequence.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst long long int INF = (long long)1e15;\n\nint N;\nint arr[101010];\n\n__int128 abds(__int128 x)\n{\n    if(x>0) return x;\n    return -x;\n}\n\nint main()\n{\n    cin >> N;\n    for(int i=0; i<N; ++i)\n        cin >> arr[i];\n    sort(arr, arr+N);\n    __int128 ans = INF;\n    int cmax;\n    if(N == 3) cmax = (int)1e7;\n    else cmax = (int)1e7/N;\n    for(int c=1; c<=cmax; ++c)\n    {\n        __int128 loc = 0;\n        __int128 v = 1;\n        for(int i=0; i<N; ++i)\n        {\n            loc += abds(arr[i]-v);\n            if(loc > ans) break;\n            v *= c;\n        }\n        if(ans>loc) ans = loc;\n    }\n    cout << (long long)ans << endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "math",
        "number theory",
        "sortings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Power Sequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/82142",
    "editorial": "Let denote a rectangle with opposite corners and . For convenience,\r\nassume and .Let\u00e2\u0080\u0099s try solving the problem if coordinates are in range .\r\nWe could easily do this by coordinates compression.First, let\u00e2\u0080\u0099s look at\r\nthe problem with fixed. We define to be the smallest integer such that\r\nand is a rectangle (If there is no such integer, let ). It can be proven\r\nthat is non-decreasing, i.e. if , then .Now, let\u00e2\u0080\u0099s see how changes when\r\nwe iterate over a fixed . It is hard to add points to the set, so we\r\nwill try to support deleting points operation. For point , we have the\r\nfollowing definitions:Let set . Let with the largest .Let set . Let with\r\nthe smallest .(Note that or might represent empty set).With these two\r\nfunctions, we could see how changes after we delete point . It looks\r\nsomething like this: For every such that ;We could support this\r\noperation using segment tree with lazy propagation. The total time\r\ncomplexity is .\r\n"
}