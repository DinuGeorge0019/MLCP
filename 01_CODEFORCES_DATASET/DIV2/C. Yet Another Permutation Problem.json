{
    "link": "https://codeforces.com//contest/1858/problem/C",
    "problemId": "2166168",
    "problem_idx": "C",
    "shortId": "1858C",
    "contest_number": "1858",
    "problem_submissions": {
        "E1": [
            218971675,
            218948691,
            218950036,
            218981081,
            218981577,
            218982148,
            219044099,
            218987081,
            218959071,
            219043079,
            218997113,
            218975893,
            218978028,
            218974432,
            218978584,
            218984712,
            218984251,
            219051896,
            218984058,
            218985452,
            218989668,
            218998871,
            218971815
        ],
        "E2": [
            218971226,
            218946559,
            218949779,
            219003260,
            218981396,
            218982111,
            218983780,
            219043918,
            218987338,
            219043124,
            218997698,
            218975689,
            218977856,
            219035037,
            219051939,
            218998573
        ],
        "D": [
            218958822,
            218970595,
            218957970,
            218958903,
            218949856,
            218961365,
            218967040,
            218972943,
            219043010,
            218960726,
            218998607,
            218989664,
            218961840,
            218965618,
            218966574,
            218969464,
            218974328,
            218972414,
            218969139,
            218981714,
            218991387
        ],
        "C": [
            218944984,
            218929618,
            218962105,
            218928296,
            218926980,
            218941771,
            218950307,
            218944949,
            219042947,
            218946392,
            218934108,
            218941439,
            218951937,
            218933349,
            218935592,
            218942151,
            218948522,
            218948262,
            218943920,
            218947281,
            218951547
        ],
        "B": [
            218935374,
            218982876,
            218965626,
            218941114,
            218939372,
            218933262,
            218946217,
            218938100,
            219042924,
            218940019,
            218950811,
            218937233,
            218946328,
            218943500,
            218950259,
            218936903,
            218940772,
            218941478,
            218938583,
            218962280,
            218941262
        ],
        "A": [
            218918372,
            218920879,
            218959798,
            218918668,
            218919313,
            218918787,
            218926715,
            218920787,
            219043052,
            219042898,
            218921173,
            218920067,
            218918574,
            218919674,
            218918423,
            218919655,
            218919188,
            218922439,
            218922802,
            218918900,
            218943440,
            218921894
        ]
    },
    "name": "C. Yet Another Permutation Problem",
    "statement": "Alex got a new game called \"GCD permutations\" as a birthday present.\r\nEach round of this game proceeds as follows: First, Alex chooses a\r\npermutation^{\r\ndagger} a_1, a_2,\r\nldots, a_n of integers from 1 to n. Then, for each i from 1 to n, an\r\ninteger d_i =\r\ngcd(a_i, a_{(i\r\nbmod n) + 1}) is calculated. The of the round is the number of distinct\r\nnumbers among d_1, d_2,\r\nldots, d_n. Alex has already played several rounds so he decided to find\r\na permutation a_1, a_2,\r\nldots, a_n such that its score is as large as possible.Recall that\r\ngcd(x, y) denotes the greatest common divisor (GCD) of numbers x and y,\r\nand x\r\nbmod y denotes the remainder of dividing x by y.^{\r\ndagger}A permutation of length n is an array consisting of n distinct\r\nintegers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray), and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray).\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\n#ifdef LOCAL\n#include \"debug.h\"\n#else\n#define debug(...)\n#endif\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.exceptions(cin.failbit);\n  cin.tie(NULL);\n  int t;\n  cin >> t;\n  while (t--) {\n    int n;\n    cin >> n;\n    vector<vector<int>> g(n + 1);\n    for (int i = 1; i * 2 <= n; i++) {\n      g[i].push_back(i * 2);\n      g[i * 2].push_back(i);\n    }\n    vector<int> p;\n    vector<int> on(n + 1, 1);\n    for (int i = 1; i <= n; i++) {\n      if (g[i].empty()) {\n        on[i] = 0;\n        p.push_back(i);\n      } else if (on[i] && g[i].size() == 1) {\n        int prev = i;\n        int j = g[i][0];\n        p.push_back(i);\n        on[i] = 0;\n        while (g[j].size() == 2) {\n          on[j] = 0;\n          int nxt = g[j][0] ^ g[j][1] ^ prev;\n          p.push_back(j);\n          prev = j;\n          j = nxt;\n        }\n        on[j] = 0;\n        p.push_back(j);\n      }\n    }\n    assert(p.size() == n);\n    for (int i = 0; i < n; i++) cout << p[i] << \" \\n\"[i == n - 1];\n    // set<int> dis;\n    // for (int i = 0; i < n; i++) dis.insert(gcd(p[i], p[(i + 1) % n]));\n    // debug(dis.size());\n  }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Yet Another Permutation Problem.json",
    "editorial_link": "https://codeforces.com//blog/entry/119398",
    "editorial": "It is impossible to get : otherwise, at least one of the numbers in\r\nwould be divisible by and would be greater than at the same time, so it\r\nwould be at least , which is greater than . Therefore, the maximum\r\npossible score is no more than . Actually, we can always get a score\r\nequal to .How do we get such score? Letâs set . After that, we put the\r\npowers of less or equal sequentially. Then we put and powers of\r\nmultiplied by , then and so on (for example, for , we will get an array\r\n). Then, for each number , the next number will be . Their will be\r\nexactly , so there will be a pair of adjacent elements of with greatest\r\ncommon divisor equal to for all .\r\n",
    "hint": []
}