{"link": "https://codeforces.com//contest/90/problem/D", "problemId": "475", "problem_idx": "D", "shortId": "90D", "contest_number": "90", "problem_submissions": {"D": [493304, 492173, 495112], "E": [491947, 491395, 492859, 493324, 492706, 491386, 492076, 492909], "C": [490592, 490305, 490472, 490789, 491674, 491498, 490958, 490747, 493104, 491269, 491109, 491086, 492585], "A": [489446, 490943, 489486, 489158, 489519, 489735, 489052, 489077, 489315, 495095, 489065, 489180, 489120, 489179, 489552], "B": [489045, 490681, 489097, 490102, 490088, 490248, 489492, 489514, 490023, 489439, 489372, 489797, 489627, 489746, 4597999, 490550]}, "name": "D. Widget Library", "statement": "Vasya writes his own library for building graphical user interface.\r\nVasya called his creation (). One of the interesting aspects of this\r\nlibrary is that widgets are packed in each other. A widget is some\r\nelement of graphical interface. Each widget has width and height, and\r\noccupies some rectangle on the screen. Any widget in Vasya\u2019s library is\r\nof type . For simplicity we will identify the widget and its type. Types\r\nand are derivatives of type , so they also are types . Widgets and are\r\nspecial. They can store other widgets. Both those widgets can use the\r\nmethod to pack directly in itself some other widget. Widgets of types\r\nand can store several other widgets, even several equal widgets they\r\nwill simply appear several times. As a result of using the method only\r\nthe link to the packed widget is saved, that is when the packed widget\r\nis changed, its image in the widget, into which it is packed, will also\r\nchange. We shall assume that the widget is packed in the widget if there\r\nexists a chain of widgets , , for which is packed directly to for any .\r\nIn Vasya\u2019s library the situation when the widget is packed in the widget\r\n(that is, in itself) is not allowed. If you try to pack the widgets into\r\neach other in this manner immediately results in an error.Also, the\r\nwidgets and have parameters and , which are determined by the methods\r\nand respectively. By default both of these options equal . The picture\r\nabove shows how the widgets are packed into and . At that and\r\nautomatically change their size depending on the size of packed widgets.\r\nAs for and , they only differ in that in the widgets are packed\r\nhorizontally and in vertically. The parameter sets the distance between\r\nadjacent widgets, and a frame around all packed widgets of the desired\r\nwidth. Packed widgets are placed exactly in the order in which the\r\nmethod was called for them. If within or there are no packed widgets,\r\ntheir sizes are equal to , regardless of the options and . The\r\nconstruction of all the widgets is performed using a scripting language\r\n. The description of the language can be found in the input data. For\r\nthe final verification of the code Vasya asks you to write a program\r\nthat calculates the sizes of all the widgets on the source code in the\r\nlanguage of .\r\n", "solutions": ["#include <algorithm>\n#include <cctype>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <deque>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <utility>\n#include <vector>\nusing namespace std;\n\n#define size(x) int((x).size())\n#define foreach(i,c) for(typeof((c).begin()) i=(c).begin();i!=(c).end();i++)\ntypedef long long I64; typedef unsigned long long U64;\nconst double EPS=1e-12;\nconst int INF=999999999;\ntypedef vector<int> VI;\ntypedef vector<string> VS;\n\nstruct Widget {\n  int type;\n  string name;\n  I64 w,h;\n  int border,space;\n  VI next;\n};\n\nint na;\nWidget a[100];\nmap<string, int> id;\nbool flag[100];\n\nint pbuf;\nchar buf[1000],buf2[1000];\n\nstring ReadTo(char c) {\n  int i;\n  for(i=pbuf;buf[i]!=c;++i);\n  string res;\n  for(int j=pbuf;j<i;++j) res+=buf[j];\n  pbuf=i+1;\n  return res;\n}\n\nvoid Go(int x) {\n  if(flag[x]) return;\n  flag[x]=1;\n  if(a[x].type==0) return;\n\n  a[x].w=a[x].h=0;\n  if(a[x].next.empty()) return;\n\n  foreach(i,a[x].next) {\n    Go(*i);\n    if(a[x].type==2) {\n      a[x].h+=a[*i].h;\n      a[x].h+=a[x].space;\n      a[x].w=max(a[x].w,a[*i].w);\n    } else {\n      a[x].w+=a[*i].w;\n      a[x].w+=a[x].space;\n      a[x].h=max(a[x].h,a[*i].h);\n    }\n  }\n  if(a[x].type==2) {\n    a[x].h-=a[x].space;\n  } else {\n    a[x].w-=a[x].space;\n  }\n  a[x].w+=a[x].border*2;\n  a[x].h+=a[x].border*2;\n}\n\nvoid Com() {\n  memset(flag,0,sizeof(flag));\n  for(int i=0;i<na;++i) Go(i);\n}\n\nvoid Pack(int p,int q) {\n//  vector<int>::iterator i=find(a[p].next.begin(),a[p].next.end(),q);\n//  if(i!=a[p].next.end()) a[p].next.erase(i);\n  a[p].next.push_back(q);\n  Com();\n}\n\nvoid Solve() {\n  int T;\n  string s;\n\n  scanf(\"%d\",&T);\n  fgets(buf,sizeof(buf),stdin);\n\n  na=0;\n  while(T--) {\n    fgets(buf,sizeof(buf),stdin);\n    pbuf=0;\n    if(buf[0]=='W') {\n      ReadTo(' ');\n      s=ReadTo('(');\n\n  //    printf(\"%s\\n\",s.c_str());\n\n      int w,h;\n      sscanf(buf+pbuf,\"%d,%d\",&w,&h);\n      \n      a[na].name=s;\n      a[na].type=0;\n      id[s]=na;\n      a[na].w=w,a[na].h=h;\n      a[na].border=a[na].space=0;\n      a[na].next.clear();\n      ++na;\n    } else if(buf[0]=='V' || buf[0]=='H') {\n      if(buf[0]=='H') a[na].type=1; else a[na].type=2;\n      ReadTo(' ');\n      sscanf(buf+pbuf,\"%s\",buf2);\n      s=buf2;\n\n      a[na].name=s;\n      id[s]=na;\n      a[na].w=a[na].h=0;\n      a[na].border=a[na].space=0;\n      a[na].next.clear();\n      ++na;\n    } else {\n      s=ReadTo('.');\n      int id1=id[s];\n\n      s=ReadTo('(');\n      if(s[0]=='p') {\n        s=ReadTo(')');\n        int id2=id[s];\n        Pack(id1,id2);\n      } else if(s[4]=='b') {\n        sscanf(buf+pbuf,\"%d\",&a[id1].border);\n        Com();\n      } else {\n        sscanf(buf+pbuf,\"%d\",&a[id1].space);\n        Com();\n      }\n    }\n  }\n}\n\nvoid Output() {\n  foreach(i,id) {\n    const Widget& p=a[i->second];\n    printf(\"%s %I64d %I64d\\n\",p.name.c_str(),p.w,p.h);\n//    printf(\"%s %lld %lld\\n\",p.name.c_str(),p.w,p.h);\n  }\n}\n\nint main() {\n  Solve();\n  Output();\n\n  return 0;\n}\n"], "input": "", "output": "", "tags": [], "dificulty": "2300", "interactive": false}