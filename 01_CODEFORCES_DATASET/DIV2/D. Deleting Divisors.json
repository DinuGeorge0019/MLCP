{
    "link": "https://codeforces.com//contest/1537/problem/D",
    "problemId": "1020035",
    "problem_idx": "D",
    "shortId": "1537D",
    "contest_number": "1537",
    "problem_submissions": {
        "F": [
            119857657,
            119865425,
            119870905,
            119869709,
            119878489,
            119841761,
            119876881,
            119827052,
            119888747,
            119879106,
            119880915,
            119859997,
            119866305,
            119891935,
            119902585,
            119888207,
            119905201
        ],
        "E2": [
            119835892,
            119833759,
            119835378,
            119850866,
            119864462,
            119850270,
            119848823,
            119846727,
            119864146,
            119866899,
            119862789,
            119890309,
            119915102,
            119899495,
            119871715,
            119862744,
            119873692,
            119862189
        ],
        "E1": [
            119835645,
            119833327,
            119834682,
            119850640,
            119850149,
            119850091,
            119849196,
            119847381,
            119863846,
            119866683,
            119861833,
            119862580,
            119843723,
            119853461,
            119862505,
            119872582,
            119862557
        ],
        "C": [
            119829240,
            119814686,
            119839941,
            119823683,
            119824487,
            119855572,
            119826402,
            119863416,
            119822210,
            119816816,
            119835116,
            119830407,
            119824166,
            119824127,
            119821757,
            119820808,
            119828361
        ],
        "D": [
            119827244,
            119843258,
            119855094,
            119838364,
            119835110,
            119859731,
            119840938,
            119859070,
            119842821,
            119845056,
            119849019,
            119838171,
            119834738,
            119848959,
            119837547,
            119830929,
            119842836
        ],
        "B": [
            119806043,
            119808907,
            119822215,
            119810718,
            119813042,
            119826639,
            119819938,
            119868704,
            119815398,
            119811429,
            119818874,
            119840047,
            119815192,
            119806896,
            119810508,
            119848797,
            119816830
        ],
        "A": [
            119804349,
            119804485,
            119818462,
            119804932,
            119804259,
            119830936,
            119816677,
            119871286,
            119815557,
            119804275,
            119808687,
            119804663,
            119806484,
            119804635,
            119804555,
            119843057,
            119806262
        ]
    },
    "name": "D. Deleting Divisors",
    "statement": "Alice and Bob are playing a game. They start with a positive integer n\r\nand take alternating turns doing operations on it. Each turn a player\r\ncan subtract from n one of its divisors that isn\u2019t 1 or n. The player\r\nwho cannot make a move on his/her turn loses. Alice always moves\r\nfirst.Note that they subtract a divisor of the number in each turn.You\r\nare asked to find out who will win the game if both players play\r\noptimally.\r\n",
    "solutions": [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <set>\n#include <queue>\n#include <random>\n#include \"map\"\ntypedef double ld;\ntypedef long long ll;\n#define int long long\n#define all(x) x.begin(), x.end()\nusing namespace std;\nvoid solve() {\n    int n;\n    cin >> n;\n    int b2 = 2;\n    while (b2 < n)\n        b2 *= 4;\n    if (b2 == n) {\n        cout << \"Bob\\n\";\n        return;\n    }\n    if (n % 2 == 1) {\n        cout << \"Bob\\n\";\n    } else {\n        cout << \"Alice\\n\";\n    }\n}\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    int q;\n    cin >> q;\n    while (q--) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "math",
        "number theory"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Deleting Divisors.json",
    "editorial_link": "https://codeforces.com//blog/entry/91381",
    "editorial": "Let\u00e2\u0080\u0099s consider cases for this problem:1) n is odd2) n is even, and is\r\nnot a power of 3) n is a power of If is odd, the only move is to\r\nsubtract an odd divisor (since all the divisors are odd). Doing this, we\r\nwill obtain an even number that is not a power of (case 2). If is the\r\ndivisor of , then must also be divisible by , and since is odd, cannot\r\nbe a power of .If is even and is not a power of , it means that has an\r\nodd divisor. By subtracting this odd divisor, we will obtain is odd(case\r\n1). Now let\u00e2\u0080\u0099s show that subtracting an odd divisor every move results in\r\na win. Primes are losing since the only move you can make on them is\r\nsubtracting the entire number, which results in and a loss. Since every\r\nprime is odd or a power of 2, it works to give the other player an odd\r\nnumber because it will either be a prime(the other player loses), or\r\nthey will make a move and give you another even number that is not a\r\npower of 2. You can continue this process because you will never land on\r\na losing number and because the game must end after a finite number of\r\nmoves, your opponent must always lose.So we proved that odd numbers are\r\nlosing and even numbers that are not powers of are winning.What if is a\r\npower of ? You can do two things in one move, halve or make n an even\r\nnumber that is not a power of (we proved that this is a winning position\r\nfor the other player). The only optimal move is to halve , making it\r\nanother power of . The players continue like this until one gets , which\r\nis a prime number, so it\u00e2\u0080\u0099s losing. If is even, Alice wins, otherwise Bob\r\nwins.\r\n"
}