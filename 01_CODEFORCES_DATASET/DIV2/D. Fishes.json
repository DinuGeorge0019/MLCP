{
    "link": "https://codeforces.com//contest/912/problem/D",
    "problemId": "144442",
    "problem_idx": "D",
    "shortId": "912D",
    "contest_number": "912",
    "problem_submissions": {
        "C": [
            33939960,
            33939332
        ],
        "E": [
            33937258,
            33933701,
            33945198,
            33942310,
            33943413,
            33944965,
            33944500,
            33944708,
            33947180,
            33947146,
            76791617,
            33941858,
            33941491
        ],
        "D": [
            33929983,
            33936192,
            33941962,
            33932459,
            33932813,
            33939373,
            33937374,
            33934352,
            33940764,
            33937493,
            33943638,
            33931105,
            33939804,
            33934462,
            33942378,
            33953796,
            33937778,
            33936199
        ],
        "B": [
            33924135,
            33925821,
            33925186,
            33924566,
            33925991,
            33928269,
            33929796,
            33936643,
            33929453,
            33927572,
            33926977,
            33926561,
            33926317,
            33935518,
            33928188,
            33928933,
            33930630,
            33931743
        ],
        "A": [
            33923797,
            33924106,
            33923840,
            33926847,
            33924254,
            33926307,
            33927750,
            33935324,
            33926290,
            33928561,
            33923877,
            33925336,
            33924071,
            33924047,
            33923947,
            33924293,
            33926054,
            33925244,
            33930321
        ]
    },
    "name": "D. Fishes",
    "statement": "While Grisha was celebrating New Year with Ded Moroz, Misha gifted Sasha\r\na small rectangular pond of size , divided into cells of size ,\r\ninhabited by tiny evil fishes (no more than one fish per cell, otherwise\r\nthey’ll strife!).The gift bundle also includes a square scoop of size ,\r\ndesigned for fishing. If the lower-left corner of the scoop-net is\r\nlocated at cell , all fishes inside the square get caught. Note that the\r\nscoop-net should lie completely inside the pond when used.Unfortunately,\r\nSasha is not that skilled in fishing and hence throws the scoop\r\nrandomly. In order to not frustrate Sasha, Misha decided to release\r\nfishes into the empty pond in such a way that the expected value of the\r\nnumber of caught fishes is as high as possible. Help Misha! In other\r\nwords, put fishes in the pond into distinct cells in such a way that\r\nwhen the scoop-net is placed into a random position among possible\r\npositions, the average number of caught fishes is as high as possible.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<algorithm>\n#include<map>\n#include<queue>\nusing namespace std;\nint n, m, r;\nmap<int, int>Map[101000];\nint GetX(int a) {\n\treturn min(min(a, n + 1 - a), min(r, n + 1 - r));\n}\nint GetY(int a) {\n\treturn min(min(a, m + 1 - a), min(r, m + 1 - r));\n}\nstruct point {\n\tint x, y;\n\tbool operator <(const point &p)const {\n\t\treturn 1ll*GetX(x)*GetY(y) < 1ll*GetX(p.x)*GetY(p.y);\n\t}\n};\npriority_queue<point>PQ;\nint K, dx[4] = { 1,0,-1,0 }, dy[4] = { 0,1,0,-1 };\ndouble res;\nvoid Calc(point a) {\n\tint xx = GetX(a.x);\n\tint yy = GetY(a.y);\n\tres += 1.0*xx/(n-r+1)*yy/(m-r+1);\n}\nint main() {\n\tint i, j;\n\tscanf(\"%d%d%d%d\", &n, &m, &r, &K);\n\tMap[(n + 1) / 2][(m + 1) / 2] = 1;\n\tPQ.push({ (n+1) / 2,(m+1) / 2 });\n\tfor (i = 0; i < K; i++) {\n\t\tpoint tp = PQ.top();\n\t\tPQ.pop();\n\t\tCalc(tp);\n\t\tfor (j = 0; j < 4; j++) {\n\t\t\tint x = tp.x + dx[j], y = tp.y + dy[j];\n\t\t\tif (x<1 || x>n || y<1 || y>m || Map[x].count(y))continue;\n\t\t\tMap[x][y] = 1;\n\t\t\tPQ.push({ x,y });\n\t\t}\n\t}\n\tprintf(\"%.10f\\n\", res);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "graphs",
        "greedy",
        "probabilities",
        "shortest paths"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Fishes.json",
    "editorial_link": "https://codeforces.com//blog/entry/56920",
    "editorial": "Letâs solve a simplified problem first. Assume we know all fishesâ\r\npositions (-indexed). Denote as the amount of fish that is inside a\r\nscoop with lower-left angle located at . Then the expected value is\r\nequal to: Itâs quite obvious that straightforward computation will\r\nresult into time. However, we can invert the problem and calculate for\r\neach fish how many scoops it is covered by. is given by the following\r\nformula: Letâs get back to and transform it into: In other words, in\r\norder to maximize the expected value we have to choose best values among\r\npossibilities.From now on there are several approaches. Imagine weâre\r\nconsidering , i.e. with a fixed coordinate . Note that in this case is\r\n-convex, i.e. itâs non-decreasing until some point, and after\r\nnon-increasing. Moreover, it always reaches its maximum at . Denote the\r\npoints to the left of this one , and to the right (inclusive) .The rest\r\nof the solution looks as follows: initially we put points into the set,\r\ntwo per each -coordinate, one for and one for . On each step we take the\r\npoint with maximum value of and replace it with its left or right\r\nneighbour (depending on which part it was from: means that the\r\nsubstitute will be to the left, to the right).Complexity: . Letâs\r\nenhance the contemplations from the previous paragraph. Notice that is\r\nconvex by both values. Then we can take ) as the starting point and\r\nlaunch a breadth-first search with a priority queue, erasing the most\r\nsignificant point according to from the queue and checking all of its\r\nyet unvisited neighbours in a -connected area.Complexity: with a greater\r\nconstant compared with solution one.\r\n",
    "hint": []
}