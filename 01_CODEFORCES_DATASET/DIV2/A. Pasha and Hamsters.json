{"link": "https://codeforces.com//contest/421/problem/A", "problemId": "8693", "problem_idx": "A", "shortId": "421A", "contest_number": "421", "problem_submissions": {"D": [6443401, 6444205, 6444726, 6446063, 6446478, 6446284, 6446050, 6444829, 6454312, 6446753, 6445453, 6450944, 6450576, 6450561, 6443659, 6449123, 6444238, 6451898, 6452897, 6444608], "E": [6445907, 6454320, 6451461, 6451356], "B": [6441973, 6441563, 6441704, 6441641, 6441800, 6442174, 6441468, 6441877, 6442830, 6440426, 6441645, 6441812, 6441558, 6441555, 6441997, 6441532, 6442176, 6442193], "A": [6440466, 6440550, 6440945, 6440732, 6440837, 6440790, 6440596, 6440584, 6445521, 6440258, 6440321, 6440470, 6440634, 6440611, 6440374, 6440525, 6440392, 6440664], "C": [6445332, 6444054, 6443650, 6444031, 6444561, 6446258, 6444406, 6445050, 6443582, 6444686, 6444343, 6444298, 6443933, 6444277, 6449346]}, "name": "A. Pasha and Hamsters", "statement": "Pasha has two hamsters: Arthur and Alexander. Pasha put apples in front\r\nof them. Pasha knows which apples Arthur likes. Similarly, Pasha knows\r\nwhich apples Alexander likes. Pasha doesn\u2019t want any conflict between\r\nthe hamsters (as they may like the same apple), so he decided to\r\ndistribute the apples between the hamsters on his own. He is going to\r\ngive some apples to Arthur and some apples to Alexander. It doesn\u2019t\r\nmatter how many apples each hamster gets but it is important that each\r\nhamster gets only the apples he likes. It is possible that somebody\r\ndoesn\u2019t get any apples.Help Pasha distribute all the apples between the\r\nhamsters. Note that Pasha wants to distribute all the apples, not just\r\nsome of them.\r\n", "solutions": ["#include<iostream>\n#include<cstdlib>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<set>\n#include<map>\n\n#define ms(x) memset(x,0,sizeof(x)) \n#define For(a,b,c) for(int a = b ; a <= c ; a ++ )\n#define int64 long long \n#define real long double\n#define SZ size()\n\nint getint(){\n    char ch = getchar() ; int ret = 0 ; bool flag = true ; \n    while(( ch < '0' || ch > '9' ) && ch != '-' ) ch = getchar() ; \n    if( ch == '-' ) flag = false , ch = getchar() ; \n    while( ch >= '0' && ch <= '9' ) ret = ret * 10 + ch - '0' , ch = getchar() ;  \n    return flag ? ret : - ret ; \n}\n\nusing namespace std ; \n\nint v[200] , n , a , b , x ; \n\nint main(){\n\n     \n   cin >> n >> a >> b ; \n   for(int i = 1 ; i <= a ; i ++ ) cin >> x , v[x] = 1 ; \n   for(int i = 1 ; i <= b ; i ++ ) cin >> x , v[x] = 2 ; \n   \n   for(int i = 1 ; i <= n ; i ++ ) cout << v[i] << ' ' ;  \n   return 0 ; \n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "implementation"], "dificulty": "800", "interactive": false}