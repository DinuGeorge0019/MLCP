{
    "link": "https://codeforces.com//contest/1088/problem/C",
    "problemId": "265513",
    "problem_idx": "C",
    "shortId": "1088C",
    "contest_number": "1088",
    "problem_submissions": {
        "E": [
            46613818,
            46607141,
            46622308,
            46615414,
            46615340,
            46613967,
            46615252,
            46616546,
            46614495,
            46614700,
            46614606,
            46614754,
            46614788,
            46616179,
            46615460,
            46618581,
            46617501,
            46617370,
            46614755,
            46616173,
            46613969
        ],
        "D": [
            46606352,
            46614493,
            46605224,
            46604678,
            46601623,
            46606254,
            46607253,
            46607426,
            46610831,
            46610433,
            46609743,
            46607835,
            46609488,
            46611474,
            46605699,
            46607479,
            46607462,
            46610178,
            46612056,
            46614466
        ],
        "C": [
            46599870,
            46601168,
            46596733,
            46596413,
            46608489,
            46598333,
            46599765,
            46596362,
            46601546,
            46599406,
            46601980,
            46598703,
            46596638,
            46598616,
            46598412,
            46594224,
            46598573,
            46596310,
            46600636,
            46598721
        ],
        "B": [
            46592520,
            46594336,
            46592669,
            46592597,
            46593347,
            46594184,
            46593000,
            46591239,
            46592041,
            46594521,
            46593534,
            46592218,
            46591250,
            46592164,
            46592604,
            46591755,
            46592804,
            46591647,
            46593144,
            46598081
        ],
        "A": [
            46589019,
            46591880,
            46588772,
            46590862,
            46589318,
            46592306,
            46588857,
            46588804,
            46589750,
            46594413,
            46591038,
            46589043,
            46589388,
            46588963,
            46589855,
            46588950,
            46589641,
            46588846,
            46589211,
            46597672
        ],
        "F": [
            46647126,
            46717273
        ]
    },
    "name": "C. Ehab and a 2-operation task",
    "statement": "You\u2019re given an array a of length n. You can perform the following\r\noperations on it: choose an index i (1\r\nle i\r\nle n), an integer x (0\r\nle x\r\nle 10^6), and replace a_j with a_j+x for all (1\r\nle j\r\nle i), which means add x to all the elements in the prefix ending at i.\r\nchoose an index i (1\r\nle i\r\nle n), an integer x (1\r\nle x\r\nle 10^6), and replace a_j with a_j\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#define _ << \" _ \" <<\n#define TRACE(x) cout << #x << \" = \" << x << endl\n\ntypedef long long ll;\n\n\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n\n    ll n, a[2010];\n    cin >> n;\n    for (int i = 0; i < n; i++) cin >> a[i];\n\n    cout << n + 1 << \"\\n\";\n\n    for (int i = n - 1; i >= 0; i--) {\n        ll b = (ll)i - a[i] % n + n;\n        cout << \"1 \" << i + 1 << \" \" << b << \"\\n\";\n        for (int j = 0; j < i; j++) a[j] += b;\n    }\n\n    cout << \"2 \" << n << \" \" << n;\n\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Ehab and a 2-operation task.json",
    "editorial_link": "https://codeforces.com//blog/entry/63656",
    "editorial": "First solution, n adds and 1 mod\nFirst, let's make ai?=?x?*?n?+?i (for some x). Then, let's mod the whole array with n (making ai?=?i). If the \"add update\" changed one index, we can just add i?+?n?-?ai%n to index i. The problem is, if we make ai?=?x?*?n?+?i, then update an index j?>?i, ai will be ruined. Just start from the back of the array!"
}