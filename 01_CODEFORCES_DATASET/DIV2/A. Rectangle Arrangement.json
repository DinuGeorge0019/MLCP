{
    "link": "https://codeforces.com//contest/2027/problem/A",
    "problemId": "2980649",
    "problem_idx": "A",
    "shortId": "2027A",
    "contest_number": "2027",
    "problem_submissions": {
        "E1": [
            288173465
        ],
        "C": [
            288155049,
            288120759,
            288122093,
            288125570,
            288127321,
            288123494,
            288123556,
            288122333,
            288123755,
            288125169,
            288121427,
            288117465,
            288125690,
            288124584,
            288121786,
            288127829,
            288125975,
            288124342
        ],
        "B": [
            288142255,
            288115334,
            288114511,
            288119086,
            288120877,
            288116135,
            288118059,
            288116134,
            288116952,
            288118306,
            288116355,
            288118112,
            288118023,
            288118240,
            288114959,
            288119841,
            288117994,
            288116831
        ],
        "D1": [
            288128564,
            288128933,
            288128524,
            288131968,
            288133129,
            288135744,
            288132103,
            288131863,
            288129253,
            288133201,
            288129398,
            288141909,
            288136583,
            288131627,
            288137428,
            288134171,
            288136755,
            288139102
        ],
        "D2": [
            288128086,
            288140616,
            288241523,
            288145908,
            288142238,
            288141377,
            288147849,
            288144735,
            288148268,
            288155865,
            288150156,
            288152683,
            288141628,
            288150384,
            288157699,
            288150265,
            288151809,
            288152365,
            288146843
        ],
        "A": [
            288116848,
            288110808,
            288111033,
            288112146,
            288115964,
            288110952,
            288112831,
            288111212,
            288110889,
            288110825,
            288111627,
            288112681,
            288110645,
            288110604,
            288114987,
            288112466,
            288110744
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135558",
    "editorial": "We must minimize the perimeter, and an obvious way to attempt this is to\r\nmaximize the overlap. To achieve this, we can place each stamp such that\r\nthe lower left corner of each stamp is at the same position, like shown\r\nin the sample explanation.Now, we can observe that the perimeter of this\r\nshape is determined solely by the maximum height and width of any stamp,\r\nand these values cannot be reduced further. Therefore, the answer is\r\n.Furthermore, it\u00e2\u0080\u0099s true that any arrangement of stamps which are fully\r\nenclosed in an outer rectangular area of by will yield the same\r\nperimeter.\r\n",
    "name": "A. Rectangle Arrangement",
    "statement": "You are coloring an infinite square grid, in which all cells are\r\ninitially white. To do this, you are given n stamps. Each stamp is a\r\nrectangle of width w_i and height h_i.You will use stamp exactly to\r\ncolor a rectangle of the same size as the stamp on the grid in black.\r\nYou cannot rotate the stamp, and for each cell, the stamp must either\r\ncover it fully or not cover it at all. You can use the stamp at any\r\nposition on the grid, even if some or all of the cells covered by the\r\nstamping area are already black.What is the minimum sum of the of the\r\nconnected regions of black squares you can obtain after all the stamps\r\nhave been used?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#ifdef LOCAL#define TASK \"test\"#else#define TASK \"test\"#endifusing namespace std;\u00a0#define int long long\u00a0int n;\u00a0void solve() {    cin >> n;    int w = 0, h = 0;    while (n--) {        int x, y;        cin >> x >> y;        w = max(w, x); h = max(h, y);    }     cout << 2 * (w + h) << '\\n';}\u00a0signed main() {    if (fopen(TASK\".inp\", \"r\")) {        freopen(TASK\".inp\", \"r\", stdin);        freopen(TASK\".out\", \"w\", stdout);    }    if (fopen(TASK\".err\", \"r\")) {        freopen(TASK\".err\", \"w\", stderr);    }    ios::sync_with_stdio(false);    cin.tie(nullptr);    int T;    cin >> T;    while (T--) {        solve();    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Rectangle Arrangement.json"
}