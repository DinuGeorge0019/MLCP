{
    "link": "https://codeforces.com//contest/1313/problem/B",
    "problemId": "546721",
    "problem_idx": "B",
    "shortId": "1313B",
    "contest_number": "1313",
    "problem_submissions": {
        "E": [
            71681170,
            71676206,
            71701918,
            71678634,
            71684245
        ],
        "D": [
            71668784,
            71676711,
            71679066,
            71902295,
            71669382,
            71676113,
            71676282,
            71682897,
            71682850,
            71684110,
            71683951,
            71679478,
            71685695,
            71684314,
            71693014,
            71684216,
            71672133,
            71677829,
            71681283
        ],
        "C1": [
            71659792,
            71665149,
            71664308,
            71663397,
            71902274,
            71657100,
            71662551,
            71666875,
            71662026,
            71660339,
            71665119,
            71670647,
            71661830,
            71671471,
            71673887,
            71666482,
            71663477,
            71673192,
            71664658,
            71659547,
            71660235
        ],
        "C2": [
            71659727,
            71665106,
            71664225,
            71663324,
            71902282,
            71657182,
            71679705,
            71666789,
            71661927,
            71660290,
            71665068,
            71670595,
            71672508,
            71671524,
            71673974,
            71666543,
            71663428,
            71673118,
            71664615,
            71659474,
            71664008
        ],
        "B": [
            71658438,
            71660532,
            71661422,
            71660555,
            71902225,
            71683862,
            71659255,
            71661835,
            71671081,
            71672434,
            71661140,
            71675335,
            71666293,
            71666358,
            71674883,
            71661144,
            71675700,
            71667622
        ],
        "A": [
            71654494,
            71655402,
            71656261,
            71655976,
            71902195,
            71678655,
            71654489,
            71655616,
            71656192,
            71666785,
            71655624,
            71657167,
            71655162,
            71654706,
            71657644,
            71657443,
            71657488,
            71654829,
            71654475,
            71655371,
            71655189
        ]
    },
    "name": "B. Different Rules",
    "statement": "Nikolay has only recently started in competitive programming, but\r\nalready qualified to the finals of one prestigious olympiad. There going\r\nto be n participants, one of whom is Nikolay. Like any good olympiad, it\r\nconsists of two rounds. Tired of the traditional rules, in which the\r\nparticipant who solved the largest number of problems wins, the\r\norganizers came up with different rules.Suppose in the first round\r\nparticipant A took x-th place and in the second round y-th place. Then\r\nthe total score of the participant A is sum x + y. The overall place of\r\nthe participant A is the number of participants (including A) having\r\ntheir total score less than or equal to the total score of A. Note, that\r\nsome participants may end up having a common overall place. It is also\r\nimportant to note, that in both the first and the second round there\r\nwere no two participants tying at a common place. In other words, for\r\nevery i from 1 to n participant took i-th place in first round and\r\nparticipant took i-th place in second round.Right after the end of the\r\nOlympiad, Nikolay was informed that he got x-th place in first round and\r\ny-th place in the second round. Nikolay doesn\u2019t know the results of\r\nother participants, yet he wonders what is the minimum and maximum place\r\nhe can take, if we consider the most favorable and unfavorable outcome\r\nfor him. Please help Nikolay to find the answer to this question.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\ntypedef long long ll;\nll gi(){\n\tll x=0,f=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch))f^=ch=='-',ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-'0',ch=getchar();\n\treturn f?x:-x;\n}\nint main(){\n#ifdef LOCAL\n\tfreopen(\"in.in\",\"r\",stdin);\n\t//freopen(\"out.out\",\"w\",stdout);\n#endif\n\tint T=gi();\n\twhile(T--){\n\t\tint n=gi(),x=gi(),y=gi();\n\t\tif(x>y)std::swap(x,y);\n\t\tprintf(\"%d %d\\n\",std::min(n,std::max(1,x+y-n+1)),std::max(1,n+1-std::max(1,(n+1-x)+(n+1-y)-n)));\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Different Rules.json",
    "editorial_link": "https://codeforces.com//blog/entry/74146",
    "editorial": "Without loss of generality, assume that . For convenience, we will\r\nnumber the participants from 1 to in the order of their places in the\r\nfirst round. Thus, the participant we are interested in is the\r\nparticipant .First we can prove the formula: First case: . It can be\r\nshown that participant can achieve first place in the Olympics. In order\r\nto do this, the following example can be built: -th participant () takes\r\n-th place in the second round (sum ) -th participant takes -th place in\r\nthe second round (sum ) -th participant () takes -th place in the second\r\nround (sum ) -th participant takes -th place in the second round (sum )\r\n-th participant () takes -th place in the second round (sum ) The\r\nillustration below explains this example Second case: Consider the\r\nparticipant with the number (). They will receive no more than in total\r\n(because is the maximum place in the second round they can take), that\r\nis guaranteed to overtake the main character. Thus we can\u00e2\u0080\u0099t achieve any\r\nplace better than . For this assessment, an example below is given: -th\r\nparticipant takes -th place in the second round (sum ) -th participant\r\ntakes -th place in the second round (sum ) -th participant takes the\r\ny-th place in the second round (sum ) -th participant takes -th place in\r\nthe second round (sum ) -th participant takes -th place in the second\r\nround (sum ) The illustration below explains this example Third case: ;\r\nThen the participant with the number () will receive no more than in\r\ntotal, that is guaranteed to overtake the main character. That is, we\r\ncan\u00e2\u0080\u0099t take places better than . For this assessment, we give an example\r\nbelow: Participant takes -th place, overtaking Participant takes -th\r\nplace, overtaking Participant () takes -th placeA separate case: , then\r\nthe outcome is obviousThe formula for the minimum place is proved. The\r\nformula for the maximum place will be proven in the same way:We prove\r\nthe formula: First case: . Then we can give an example in which we will\r\ntake the last place: -th participant () takes -th place in the second\r\nround (sum ) -th participant () takes -th place in the second round (sum\r\n) Second case: Consider a participant with the number (). They are\r\nguaranteed to be overtaken by (main character) So the main character can\r\nnot take any place worse than : -th participant () takes ()-th place in\r\nthe second round (sum ) -th participant () takes ()-th place in the\r\nsecond round (sum )Thus, the problem was reduced to the problem of\r\noutput of two numbers\r\n"
}