{
    "link": "https://codeforces.com//contest/2013/problem/E",
    "problemId": "2890590",
    "problem_idx": "E",
    "shortId": "2013E",
    "contest_number": "2013",
    "problem_submissions": {
        "F1": [
            282085508,
            282091649,
            282097681,
            282062964,
            282097010,
            282094496,
            282096102,
            282130493,
            282100468,
            282110907,
            282110226,
            282977558
        ],
        "E": [
            282061833,
            282080813,
            282051849,
            282086247,
            282037391,
            282057195,
            282050812,
            282047875,
            282387310,
            282046660,
            282057981,
            282053861,
            282054405,
            282061649,
            282089310,
            282054594,
            282061765,
            282060270,
            282065503,
            282063375
        ],
        "D": [
            282053393,
            282148584,
            282052109,
            282042335,
            282076655,
            282080799,
            282065676,
            282079143,
            282037385,
            282054240,
            282041005,
            282045620,
            282047474,
            282043487,
            282073249,
            282022525,
            282048467,
            282042436,
            282046096,
            282048201
        ],
        "C": [
            282036735,
            282027206,
            282070402,
            282021424,
            282027464,
            282026938,
            282063555,
            282026144,
            282031663,
            282027005,
            282037319,
            282027256,
            282027279,
            282046717,
            282066980,
            282036015,
            282031256,
            282038898,
            282038980
        ],
        "B": [
            282022099,
            282013728,
            282015453,
            282011770,
            282018552,
            282009811,
            282027915,
            282017479,
            282013009,
            282018195,
            282019086,
            282010905,
            282014462,
            282037982,
            282022835,
            282017402,
            282018955,
            282018976,
            282023313
        ],
        "A": [
            282014277,
            282006421,
            282026971,
            282006385,
            282008034,
            282005836,
            282006296,
            282008704,
            282006066,
            282010046,
            282006523,
            282005614,
            282006702,
            282035715,
            282023370,
            282007442,
            282014269,
            282005794,
            282006570
        ]
    },
    "editorial_link": "https://codeforces.com/blog/entry/134170",
    "editorial": "Let be the greatest common divisor of the array . We will divide\neach element by , and at the end, simply multiply the result by .Now,\nconsider the following greedy algorithm. We will start with an initially\nempty array and add to the end of array the element that minimizes the\nGCD with the already existing array . It can be observed that the will\nreach 1 in at most 10 iterations. After that, the remaining elements can\nbe added in any order. ProofLet be the minimum possible GCD for the\ncurrent prefix of array , and let be the optimal answer such that . In\nthis case, we can first place , and then write the sequence in the same\norder. The answer will not worsen, since .Total time complexty: .\n",
    "name": "E. Prefix GCD",
    "statement": "Since Mansur is tired of making legends, there will be no legends for\r\nthis task.You are given an array of positive integer numbers a_1, a_2,\r\nldots, a_n. The elements of the array can be rearranged in any order.\r\nYou need to find the smallest possible value of the expression\r\ngcd(a_1) +\r\ngcd(a_1, a_2) +\r\nldots +\r\ngcd(a_1, a_2,\r\nldots, a_n), where\r\ngcd(a_1, a_2,\r\nldots, a_n) denotes the greatest common divisor (GCD) of a_1, a_2,\r\nldots, a_n.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std; typedef long long ll;using vi = vector<int>;using vvi = vector<vector<int>>;using vll = vector<ll>;using vvll = vector<vector<ll>>; #define all(x) x.begin(), x.end()#define ckmin(a,b) a = min(a,b)#define ckmax(a,b) a = max(a,b) void solve() {    int N;    cin >> N;    vll A(N);    for (int i=0;i<N;i++) cin >> A[i];     ll g = A[0];    for (int i=1;i<N;i++) g = gcd(g, A[i]);     for (int i=0;i<N;i++) A[i] /= g;    sort(all(A));     ll ans = A[0];    vi used(N, 0);    used[0] = 1;    ll cur = A[0];    ll left = N-1;    while (cur > 1) {        int bestind = -1;        ll bestval = cur;        for (int i=0;i<N;i++) {            if (used[i]) continue;            if (gcd(cur, A[i]) < bestval) {                bestval = gcd(cur, A[i]);                bestind = i;            }        }         ans += bestval;        cur = bestval;        used[bestind] = 1;        left--;    }    ans += left;    ans *= g;    cout << ans << \"\\n\";} int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(NULL);     int T;    cin >> T;    for (int t=0;t<T;t++) solve();     return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Prefix GCD.json",
    "hint": []
}