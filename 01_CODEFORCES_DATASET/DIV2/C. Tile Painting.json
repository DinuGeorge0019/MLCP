{"link": "https://codeforces.com//contest/1243/problem/C", "problemId": "461414", "problem_idx": "C", "shortId": "1243C", "contest_number": "1243", "problem_submissions": {"E": [64413060, 64469730, 64408846, 64417229, 64399200, 64470547, 64416699, 64442944], "D": [64391286, 64397713, 64431742, 64397869, 64387912, 64386733, 64389402, 64387675, 64408229, 64380388, 64396146, 64395794, 64394593, 64392997, 64394432, 64400786, 64397002, 64396496, 64397563, 64397111, 64393509], "C": [64384895, 64387481, 64390976, 64405340, 64382337, 64385693, 64385929, 64394275, 64434799, 64386198, 64382497, 64383809, 64377823, 64389605, 64376790, 64385883, 64378335, 64383814, 64387181, 64382731, 64387786], "B2": [64382237, 64381285, 64379711, 64392921, 64382257, 64380535, 64394999, 64387075, 64388632, 64389667, 64386828, 64401152, 64379896, 64404188, 64390999, 64383775, 64439469, 64397436, 64400046], "B1": [64376943, 64376875, 64382975, 64410900, 64376252, 64375532, 64376537, 64399066, 64383882, 64379534, 64379185, 64385521, 64377760, 64384722, 64375586, 64377602, 64378450, 64377183, 64379613, 64377830], "A": [64373589, 64373694, 64408041, 64373563, 64373607, 64373538, 64381662, 64378360, 64376936, 64374179, 64380404, 64373751, 64374463, 64373629, 64373483, 64374884, 64373477, 64375133, 64374905]}, "name": "C. Tile Painting", "statement": "Ujan has been lazy lately, but now has decided to bring his yard to good\r\nshape. First, he decided to paint the path from his house to the\r\ngate.The path consists of n consecutive tiles, numbered from 1 to n.\r\nUjan will paint each tile in some color. He will consider the path if\r\nfor any two tiles with numbers i and j, such that |j - i| is a divisor\r\nof n greater than 1, they have the same color. Formally, the colors of\r\ntwo tiles with numbers i and j should be the same if |i-j| > 1 and n\r\nbmod |i-j| = 0 (where x\r\nbmod y is the remainder when dividing x by y).Ujan wants to brighten up\r\nspace. What is the maximum number of different colors that Ujan can use,\r\nso that the path is aesthetic?\r\n", "solutions": ["#include <bits/stdc++.h>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\ntypedef long long   ll;\ntypedef long double ld;\n\n#define all(x)  (x).begin(), (x).end()\n#define sz(x)   (x).size()\n#define pb      push_back\n#define mp      make_pair\n#define fr      first\n#define sc      second\n\nll n;\nvoid input() {\n    cin >> n;\n}\n\nvoid solve() {\n    ll dv = 2, sq = sqrtl(n) + 1;\n    while(dv <= sq) {\n        if (n % dv == 0) {\n            break;\n        }\n        dv++;\n    }\n    if (n % dv != 0) {\n        cout << n << endl;\n        return;\n    }\n    ll lft = n;\n    while(lft % dv == 0) {\n        lft /= dv;\n    }\n    if (lft == 1) {\n        cout << dv << endl;\n    }\n    else {\n        cout << 1 << endl;\n    }\n}\n\nint main() {\n    int testcases = 1;\n    // scanf(\"%d\", &testcases);\n    while(testcases--) {\n        input();\n        solve();\n    }\n    return 0;\n}"], "input": "", "output": "", "tags": ["number theory"], "dificulty": "1500", "interactive": false}