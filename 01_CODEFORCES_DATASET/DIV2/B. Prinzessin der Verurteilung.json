{
    "link": "https://codeforces.com//contest/1536/problem/B",
    "problemId": "1007470",
    "problem_idx": "B",
    "shortId": "1536B",
    "contest_number": "1536",
    "problem_submissions": {
        "E": [
            118631124,
            118614939,
            118616967,
            118624386,
            118627719,
            118635620,
            118636863,
            118621534,
            118623141,
            118619496,
            118630371,
            118626916,
            118634340,
            118635235,
            118626014,
            118625912,
            118631232,
            118724771,
            118637508,
            118632134,
            118634841
        ],
        "F": [
            118625791,
            118638866,
            118613437,
            118637695,
            118644936,
            118650446,
            118647459,
            118663966,
            118711352,
            118653882,
            118654218,
            118882357
        ],
        "C": [
            118608971,
            118600883,
            118628209,
            118608554,
            118608052,
            118619465,
            118622898,
            118607847,
            118602584,
            118598176,
            118609484,
            118609006,
            118618271,
            118606277,
            118606392,
            118620701,
            118612692,
            118724743,
            118612675,
            118612583,
            118612872
        ],
        "D": [
            118608031,
            118607288,
            118623947,
            118617513,
            118619773,
            118632284,
            118632215,
            118614859,
            118617552,
            118601113,
            118616452,
            118622152,
            118614133,
            118620886,
            118617343,
            118616486,
            118624441,
            118724752,
            118620219,
            118627264,
            118625159
        ],
        "B": [
            118602956,
            118599083,
            118634218,
            118612957,
            118602526,
            118613641,
            118606813,
            118602130,
            118599340,
            118630482,
            118605942,
            118604400,
            118601413,
            118601634,
            118600081,
            118601184,
            118602824,
            118724734,
            118602945,
            118605239,
            118604772
        ],
        "A": [
            118598232,
            118597991,
            118635775,
            118598107,
            118598184,
            118601999,
            118598235,
            118599189,
            118598143,
            118622748,
            118598451,
            118598128,
            118598114,
            118598284,
            118598026,
            118597979,
            118598563,
            118724715,
            118598620,
            118599178,
            118598920
        ]
    },
    "name": "B. Prinzessin der Verurteilung",
    "statement": "It is no surprise Fischl speaks with a strange choice of words. However,\r\nthis time, not even Oz, her raven friend, can interpret her expressions!\r\nMaybe you can help us understand what this young princess is saying?You\r\nare given a string of n lowercase Latin letters, the word that Fischl\r\njust spoke. You think that the MEX of this string may help you find the\r\nmeaning behind this message. The MEX of the string is defined as the\r\nshortest string that appear as a contiguous substring in the input. If\r\nmultiple strings exist, the lexicographically smallest one is considered\r\nthe MEX. Note that the empty substring does NOT count as a valid MEX.A\r\nstring a is lexicographically smaller than a string b if and only if one\r\nof the following holds: a is a prefix of b, but a\r\nne b; in the first position where a and b differ, the string a has a\r\nletter that appears earlier in the alphabet than the corresponding\r\nletter in b. A string a is a substring of a string b if a can be\r\nobtained from b by deletion of several (possibly, zero or all)\r\ncharacters from the beginning and several (possibly, zero or all)\r\ncharacters from the end.Find out what the MEX of the string is!\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1005;\nint n,bk[50005],t[N];\nchar s[N];\nint read()\n{\n\tint res=0,fl=0; char a=getchar();\n\twhile(a<'0'||a>'9') fl|=a=='-',a=getchar();\n\twhile(a>='0'&&a<='9') res=res*10+a-'0',a=getchar();\n\treturn fl? -res:res;\n}\nint main()\n{\n\tint i,j,li,tt=read();\n\twhile(tt--)\n\t{\n\t\tn=read(),scanf(\"%s\",s+1),memset(bk,0,sizeof(bk));\n\t\tfor(i=1;i<=n;i++) t[i]=s[i]-'a'+1;\n\t\tfor(i=1;i<=n;i++) bk[t[i]]=1,i>1&&(bk[t[i-1]*29+t[i]]=1),i>2&&(bk[t[i-2]*29*29+t[i-1]*29+t[i]]=1);\n\t\tint fl=1;\n\t\tfor(i=0;i<=26&&fl;i++)\n\t\t\tfor(j=!!i;j<=26&fl;j++)\n\t\t\t\tfor(li=1;li<=26&&fl;li++)\n\t\t\t\t\tif(!bk[i*29*29+j*29+li]) i&&(cout<<char(i+'a'-1),0),j&&(cout<<char(j+'a'-1),0),cout<<char(li+'a'-1),fl=0,cout<<'\\n';\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "strings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Prinzessin der Verurteilung.json",
    "editorial_link": "https://codeforces.com//blog/entry/91520",
    "editorial": "SolutionLet s brute force check all substrings of length <= 3 and print\r\nthe lexicographically smallest one that doesn t appear as a substring in\r\nthe input. We can guarantee that we will come across the answer due to\r\nthe pigeonhole principle. There are at most possible substrings of\r\nlength 3 or shorter in the input. There exist total substrings of length\r\n3 or shorter. It is impossible for the input to contain all substrings,\r\nas for .Final runtime looks something like or depending on how you\r\nimplement substring checking.\r\n",
    "hint": [
        "Hint 1 Pigeonhole principle",
        "Hint 2 What is the longest the answer can be?"
    ]
}