{"link": "https://codeforces.com//contest/1201/problem/C", "problemId": "383826", "problem_idx": "C", "shortId": "1201C", "contest_number": "1201", "problem_submissions": {"D": [58282984, 58285276, 58288662, 58287120, 58288428, 58288088, 58287196, 58286940, 58293709, 58290148, 58292701, 58291902, 58289292, 58289457, 58289281, 58288685, 58285856, 58292531], "C": [58274262, 58275378, 58275429, 116632449, 116631019, 58275062, 58276963, 58278514, 58276803, 58277770, 58276940, 58274085, 58273643, 58275528, 58274524, 58274700, 58277775, 58274570, 58271303, 58273056], "B": [58271978, 58270841, 58272256, 58272912, 58273123, 58271671, 58271261, 58275291, 58272166, 58271760, 58271053, 58271553, 58271578, 58272097, 58275948, 58271369, 58278712, 58274589], "A": [58270131, 58270185, 58270752, 58271799, 58270882, 58270392, 58270232, 58273480, 58270504, 58270476, 58308382, 58270298, 58270453, 58270435, 58270635, 58270730, 58270229, 58270187, 58276880], "E1": [58306902, 58388117, 58386937], "E2": [58306808]}, "name": "C. Maximum Median", "statement": "You are given an array a of n integers, where n is odd. You can make the\r\nfollowing operation with it: Choose one of the elements of the array\r\n(for example a_i) and increase it by 1 (that is, replace it with a_i +\r\n1). You want to make the median of the array the largest possible using\r\nat most k operations.The median of the odd-sized array is the middle\r\nelement after the array is sorted in non-decreasing order. For example,\r\nthe median of the array [1, 5, 2, 3, 5] is 3.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 2e5 + 5;\nint a[maxn];\n\nint main() {\n    int n, k; scanf(\"%d%d\", &n, &k);\n    for (int i = 0; i < n; ++i) scanf(\"%d\", &a[i]);\n    sort(a, a + n);\n\n    auto check = [&](int dt) {\n        long long sum = dt;\n        int p = a[n / 2] + dt;\n        for (int i = n / 2 + 1; i < n; ++i) {\n            if (a[i] < p) sum += p - a[i];\n        }\n        return sum <= k;\n    };\n\n    int ans = 0;\n    for (int d = 30; d >= 0; --d) {\n        if (ans + (1 << d) > k) continue;\n        if (check(ans + (1 << d))) ans += (1 << d);\n    }\n    printf(\"%d\\n\", a[n / 2] + ans);\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "greedy", "math", "sortings"], "dificulty": "1400", "interactive": false}