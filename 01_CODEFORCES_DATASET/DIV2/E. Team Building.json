{
    "link": "https://codeforces.com//contest/1316/problem/E",
    "problemId": "552824",
    "problem_idx": "E",
    "shortId": "1316E",
    "contest_number": "1316",
    "problem_submissions": {
        "F": [
            72472310,
            72461023,
            73149710,
            76233934,
            76759743,
            72468426
        ],
        "D": [
            72446577,
            72435880,
            72446350,
            72433935,
            72552354,
            72445851,
            72441671,
            72440731,
            72441946,
            72448620,
            72449884,
            72443275,
            72430235,
            72442450,
            72455002,
            72438222,
            72450604,
            72450271,
            72453451,
            72444636,
            72446410
        ],
        "E": [
            72439852,
            72445012,
            72437670,
            72448064,
            72552368,
            72441953,
            72444842,
            72445763,
            72447311,
            72441940,
            72445222,
            72448678,
            72435875,
            72451508,
            72441755,
            72436908,
            72445710,
            72444493,
            72446787,
            72453158,
            72452797
        ],
        "C": [
            72433832,
            72430966,
            72433288,
            72428640,
            72552344,
            72432747,
            72431625,
            72434362,
            72434375,
            72433220,
            72429941,
            72438552,
            72442079,
            72433103,
            72430036,
            72452619,
            72434221,
            72436747,
            72434315,
            72436157,
            72435969
        ],
        "B": [
            72429931,
            72429194,
            72429286,
            72432383,
            72552325,
            72429081,
            72434265,
            72430795,
            72431025,
            72431357,
            72428379,
            72429255,
            72460222,
            72429093,
            72433129,
            72438863,
            72431653,
            72431631,
            72430316,
            72431406,
            72429986
        ],
        "A": [
            72421838,
            72421944,
            72423224,
            72422468,
            72552315,
            72422813,
            72422138,
            72421848,
            72423996,
            72421816,
            72422254,
            72422463,
            72428261,
            72422024,
            72422458,
            72422846,
            72422294,
            72426353,
            72423021,
            72422856,
            72423629
        ]
    },
    "name": "E. Team Building",
    "statement": "Alice, the president of club FCB, wants to build a team for the new\r\nvolleyball tournament. The team should consist of p players playing in p\r\ndifferent positions. She also recognizes the importance of audience\r\nsupport, so she wants to select k people as part of the audience.There\r\nare n people in Byteland. Alice needs to select exactly p players, one\r\nfor each position, and exactly k members of the audience from this pool\r\nof n people. Her ultimate goal is to maximize the total strength of the\r\nclub.The i-th of the n persons has an integer a_{i} associated with him\r\nthe strength he adds to the club if he is selected as a member of the\r\naudience.For each person i and for each position j, Alice knows s_{i, j}\r\nthe strength added by the i-th person to the club if he is selected to\r\nplay in the j-th position.Each person can be selected at most once as a\r\nplayer or a member of the audience. You have to choose exactly one\r\nplayer for each position.Since Alice is busy, she needs you to help her\r\nfind the maximum possible strength of the club that can be achieved by\r\nan optimal choice of players and the audience.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\nvoid upd(long long& a, long long b) {\n\ta = max(a, b);\n}\nint bx[10001];\nint a[200001];\nint s[200001][8];\nlong long f[100005][130];\nint n, p, k;\nint b[100005];\nbool cmp(const int& x, const int& y) {\n\treturn a[x] < a[y];\n}\n\n\nint main( ) {\n\tscanf(\"%d %d %d\", &n, &p, &k);\n\tfor (int i = 1; i <= n; i ++)\n\t\tscanf(\"%d\", &a[i]);\n\tfor (int i = 1; i <= n; i ++)\n\t\tfor (int j = 1; j <= p; j ++)\n\t\t\tscanf(\"%d\", &s[i][j]);\n\tfor (int i = 1; i <= n; i ++) b[i] = i;\t\n\tsort(b + 1, b + 1 + n, cmp);\n\treverse(b + 1, b + 1 + n);\n\t\n\tfor (int i = 1; i < (1 << p); i ++)\n\t\tbx[i] = bx[i - (i & -i)] + 1;\n\tlong long ans = 0;\n\tfor (int r = 0; r <= n; ++ r)\n\t\tfor (int S = 0; S < (1 << p); ++ S)\n\t\t\tf[r][S] = -0x3f3f3f3f3f3f3f3fLL;\n\tf[0][0] = 0;\n\tfor (int r = 1; r <= n; ++ r) {\n\t\tfor (int S = 0; S < (1 << p); ++ S) {\n\t\t\tfor (int j = 1; j <= p; j ++) {\n\t\t\t\tif ((S >> (j - 1)) & 1) continue;\n\t\t\t\tint i = b[r];\n\t\t\t\tupd(f[r][S | (1 << (j - 1))], f[r - 1][S] + s[i][j]);\n\t\t\t}\n\t\t\tint N = r - 1 - bx[S];\n\t\t\tif (N < k) upd(f[r][S], f[r - 1][S] + a[b[r]]);\n\t\t\telse upd(f[r][S], f[r - 1][S]);\n\t\t}\n\t}\n\tfor (int r = 1; r <= n; ++ r) \n\t\tfor (int S = 0; S < (1 << p); ++ S) {\n\t\t\tans = max(ans, f[r][S]);\n\t\t}\n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "dp",
        "greedy",
        "sortings"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Team Building.json",
    "editorial_link": "https://codeforces.com//blog/entry/74493",
    "editorial": "Idea is DP(bitmask)First sort the people in non-increasing order of .let\r\n= maximum strength of the club if we choose players from , mask tells us\r\nabout the positions in the team which have been covered. Don\u00e2\u0080\u0099t worry\r\nabout the audience part as of now, we will see how it is handled during\r\ntransitions. initial state.Lets try to find If the -th person is chosen\r\nto play in -th position, .If we don\u00e2\u0080\u0099t choose as a player, then we can\r\ntake him as an audience member or not take him at all. I claim that if\r\nthe no. of audience members chosen till now < , then we must select as\r\nan audience member , We can prove this. If we don\u00e2\u0080\u0099t select as audience,\r\nwe will need to select some (), strength in that case will include but\r\nnot , but as , it is always better to select .We now need to know how\r\nmany audience members have been selected for state .let be the no. of\r\npersons who have not been selected as players, then = - no. of set bits\r\nin mask.By the above logic, we can say that if , we have chosen already\r\nk audience members.So, the solution becomes:if , then (2), else (2), You\r\nneed to choose maximum of and as . would be the answer to our\r\nquestion.Time Complexity : .\r\n"
}