{"link": "https://codeforces.com//contest/916/problem/C", "problemId": "148026", "problem_idx": "C", "shortId": "916C", "contest_number": "916", "problem_submissions": {"D": [34326007, 34322565, 34563169, 34324237, 34325530, 34324573, 34324098, 34325922, 34326213], "E": [34322258, 34325502, 34323285, 34321851, 34318358, 34324148, 34325404, 34326324], "C": [34310995, 34313571, 34311523, 34309797, 34318416, 34314936, 34314832, 34312668, 34312494, 34311976, 34311906, 34316835, 34313644, 34314417, 34316195, 34307237, 34308290, 34307428, 34311584, 34315270], "A": [34305522, 34305848, 34306019, 34311849, 34318455, 34305611, 34307081, 34305645, 34305601, 34305829, 34305615, 34306758, 34307093, 34306724, 34305983, 34307982, 34313895, 34310913, 34305897, 34305681], "B": [34321729, 34337379, 34311562, 34312817, 34317165, 34316891, 34316674]}, "name": "C. Jamie and Interesting Graph", "statement": "Jamie has recently found undirected weighted graphs with the following\r\nproperties very : The graph is connected and contains exactly vertices\r\nand edges. All edge weights are integers and are in range inclusive. The\r\nlength of shortest path from to is a prime number. The sum of edges\u2019\r\nweights in the minimum spanning tree (MST) of the graph is a prime\r\nnumber. The graph contains no loops or multi-edges. If you are not\r\nfamiliar with some terms from the statement you can find definitions of\r\nthem in notes section. Help Jamie construct any graph with given number\r\nof vertices and edges that is !\r\n", "solutions": ["#include <algorithm>\n#include <iostream>\n#include <cassert>\n#include <climits>\n#include <cstdlib>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n\nusing namespace std;\n\nint q,i,j,k,n,m,y,z,c,mx2,t,s;\nint a,b,p,A,B,H[100005];\nint x = 384437;\nint main(){\n    cin >> n >> m;\n\n    cout << x << ' ' << x << endl;\n\n    for(i=1 ; i<n-1 ; i++)\n        cout << i << ' ' << i+1 << ' ' << 1 << endl;\n\n    cout << i << ' ' << i+1 << ' ' << x-(n-2) << endl;\n\n    m -= n-1;\n\n    for(i=1 ; i<=n ; i++){\n        for(j=i+2 ; j<=n and m; j++){\n            m--;\n            cout << i << ' ' << j << ' ' << 100000000 << endl;\n        }\n    }\n\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "graphs", "shortest paths"], "dificulty": "1600", "interactive": false}