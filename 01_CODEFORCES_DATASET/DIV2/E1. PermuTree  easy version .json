{
    "link": "https://codeforces.com//contest/1856/problem/E1",
    "problemId": "2145356",
    "problem_idx": "E1",
    "shortId": "1856E1",
    "contest_number": "1856",
    "problem_submissions": {
        "E2": [
            217327108,
            217341724,
            217337731,
            217337437,
            217412216,
            217338400,
            217336393,
            217345459,
            217391033,
            217321012,
            217492472,
            217488570,
            217325278,
            217439292,
            217437989,
            217363475,
            217446369,
            217445127,
            217406790
        ],
        "D": [
            217299783,
            217294842,
            217318244,
            217319013,
            217306383,
            217302272,
            217316304,
            217332681,
            217344634,
            217306374,
            217314009,
            217314765,
            217312837,
            217302425,
            217303810,
            217314415,
            217312870,
            217318456,
            217300443,
            217400494,
            217316669
        ],
        "E1": [
            217289515,
            217306137,
            217300615,
            217308752,
            217314014,
            217319703,
            217297854,
            217321288,
            217321307,
            217290094,
            217290570,
            217296889,
            217296429,
            217312238,
            217311348,
            217286339,
            217297816,
            217298120,
            217312665,
            217400516,
            217300470
        ],
        "C": [
            217279950,
            217281231,
            217291934,
            217287003,
            217296034,
            217283292,
            217292390,
            217290232,
            217308894,
            217275596,
            217275048,
            217281202,
            217279491,
            217289317,
            217288630,
            217298170,
            217285184,
            217287913,
            217284586,
            217400474,
            217290893
        ],
        "B": [
            217269320,
            217271397,
            217269501,
            217272164,
            217281399,
            217274759,
            217266730,
            217267264,
            217269590,
            217284481,
            217268556,
            217268444,
            217267764,
            217270460,
            217268264,
            217272318,
            217272448,
            217269161,
            217271865,
            217400507,
            217272774
        ],
        "A": [
            217264730,
            217266241,
            217264910,
            217266955,
            217265330,
            217267424,
            217264736,
            217264718,
            217265900,
            217267758,
            217264795,
            217265478,
            217264842,
            217265458,
            217264741,
            217264735,
            217265053,
            217264661,
            217265267,
            217400456,
            217266136
        ]
    },
    "name": "E1. PermuTree  easy version ",
    "statement": "You are given a tree with n vertices rooted at vertex 1.For some\r\npermutation^\r\ndagger a of length n, let f(a) be the number of pairs of vertices (u, v)\r\nsuch that a_u < a_{\r\noperatorname{lca}(u, v)} < a_v. Here,\r\noperatorname{lca}(u,v) denotes the lowest common ancestor of vertices u\r\nand v.Find the maximum possible value of f(a) over all permutations a of\r\nlength n.^\r\ndagger A permutation of length n is an array consisting of n distinct\r\nintegers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray), and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define ld long double\n#define ll long long int\n#define st first\n#define nd second\n#define pb push_back\n#define pii pair<int,int>\n#define mp make_pair\n\nusing namespace std;\n\nconst int N = 5005;\nvector<int> adj[N];\nbool can[N][N];\nint sz[N];\nint n;\n\nvoid dfs(int v, int p = -1){\n    for(int x : adj[v]){\n        if(x != p){\n            dfs(x, v);\n            sz[v] += sz[x];\n        }\n    }\n    sz[v] += 1;\n    int pref = 0;\n    can[v][0] = true;\n    for(int x : adj[v]){\n        if(x == p) continue;\n        pref += sz[x];\n        for(int s=pref;s>=sz[x];s--){\n            can[v][s] |= can[v][s - sz[x]];\n        }\n    }\n\n}\n\nvoid solve(){\n    cin >> n;\n    for(int i=2;i<=n;i++){\n        int x; cin >> x;\n        adj[x].pb(i);\n        adj[i].pb(x);\n    }\n    dfs(1);\n    ll ans = 0;\n    for(int i=1;i<=n;i++){\n        ll close = 0;\n        int d = 1e9;\n        int s = sz[i] - 1;\n        for(int j=0;j<=s;j++){\n            if(can[i][j] && abs(j - s / 2) < d){\n                d = abs(j - s / 2);\n                close = j;\n            }\n        }\n        ans += close * (s - close);\n    }\n    cout << ans << \"\\n\";\n}\n\nint main(){\n    ios_base::sync_with_stdio(0); cin.tie(0);\n\n    int tt = 1;\n    // cin >> tt;\n    while(tt--) solve();\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "trees"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E1. PermuTree  easy version .json",
    "editorial_link": "https://codeforces.com//blog/entry/119058",
    "editorial": "Let\u00e2\u0080\u0099s consider the subproblem of maximizing the number of suitable pairs\r\nfor some fixed . Then, we want to maximize the number of pairs such that\r\nand and are in different subtrees of . So for each subtree of , we only\r\ncare about the number of vertices with and about the number of vertices\r\nwith .Suppose vertex has subtrees and the -th of them has vertices in it\r\nand vertices less with . We will prove later that a suitable permutation\r\nexists for all possible correct values of (that is ).Then, the total\r\nnumber of suitable pairs (and the value we are trying to maximize) is\r\nequal to: .Let be the maximum possible number of suitable pairs such\r\nthat and lie in the first subtrees and ( for all ). Also define . Then:\r\nfor . for and . In the statement above: The limits for are because: must\r\nhold, must hold. is the number of suitable pairs in the first subtrees.\r\nis the number of suitable pairs where lies in the -th subtree and lies\r\nin the first subtrees. is the number of suitable pairs where lies in the\r\n-th subtree and lies in the first subtrees. The maximum possible number\r\nof suitable pairs is equal to .Let\u00e2\u0080\u0099s calculate the complexity of this\r\ndynamic programming subproblem. To do that, it\u00e2\u0080\u0099s easier to consider\r\niterating over and then iterating over all suitable values of . Then,\r\nfrom the condition we get values of , and from the condition we get\r\nsuitable values of for each . Taking into account that the array has\r\nvalues, adding everything up, the number of \"operations\" we get is equal\r\nto:Returning to the original problem, let\u00e2\u0080\u0099s solve the subproblem for\r\neach from to and add up the results. This is the upper bound on the\r\nanswer, and we will prove a bit later that a suitable permutation\r\nexists.Let\u00e2\u0080\u0099s change our notation a bit: is the number of subtrees of\r\nvertex . is the size of the -th subtree of vertex . is equal to . is the\r\nnumber of vertices in the -th subtree for which . Adding up the number\r\nof \"operations\" for all subproblems, we get: Consider an undirected\r\ngraph with vertices where there are initially no edges. You can think of\r\nthe value of as the number of edges added between each vertex of the\r\nfirst subtrees of and the -th subtree of . Since each pair of accounts\r\nfor a unique set of edges of size , the sum can be bounded above by ,\r\nthe maximum number of unique edges in a graph with vertices:So we get a\r\ncomplexity of .You can read more about this complexity analysis in\r\nsection 7 of this Codeforces blog. We solve independently for each value\r\nof and add up the answers to get an upper bound for . We will prove by\r\nconstructing that this bound is achievable.Let be a function that takes\r\na vertex and a set of integers , assigns some value from to , and then\r\ncalls for all children of (direct descendants), where the sets do not\r\nintersect and their union is equal to .How it works: Let be the children\r\nof vertex and initially be empty sets. Suppose that for vertex it is\r\noptimal to have the values of be equal to respectively. For each from to\r\n, take the smallest values from , remove them from , and add them to the\r\nset . Set to the smallest value in and remove it from the set. For each\r\nfrom to , take the smallest values from , remove them from , and add\r\nthem to the set . For each from to , call . Calling constructs an\r\noptimal permutation for the given tree.Complexity: Note: you can change\r\nto and iterate from to . This improves the memory usage, but does not\r\nchange the time complexity.\r\n"
}