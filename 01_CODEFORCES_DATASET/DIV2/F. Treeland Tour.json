{
    "link": "https://codeforces.com//contest/490/problem/F",
    "problemId": "17900",
    "problem_idx": "F",
    "shortId": "490F",
    "contest_number": "490",
    "problem_submissions": {
        "F": [
            8817515,
            8819985,
            8842361,
            8817338,
            8817935,
            8817635,
            8855350,
            8819845,
            8823757,
            8823458,
            8821739,
            8820145
        ],
        "E": [
            8815308,
            8814782,
            8815162,
            8819489,
            8815467,
            8822097,
            8817785,
            8817507,
            8817956,
            8818730,
            8821845,
            8820184,
            8819671,
            8820855,
            8817217,
            8822605,
            8820689
        ],
        "D": [
            8813861,
            8818202,
            8817853,
            8814442,
            8820510,
            8816678,
            8814870,
            8815149,
            8814552,
            8815859,
            8816515,
            8814018,
            8816647,
            8817008,
            8816236,
            8820552,
            8814405,
            8814971,
            8817626,
            8817113
        ],
        "C": [
            8812444,
            8815662,
            8813217,
            8812979,
            8814331,
            8811719,
            8813130,
            8812621,
            8821924,
            8813827,
            8814389,
            8812560,
            8812032,
            8814787,
            8814945,
            8814699,
            8813034,
            8813032,
            8813495,
            8815850
        ],
        "B": [
            8811804,
            8812050,
            8811800,
            8811893,
            8812411,
            8813404,
            8812022,
            8811615,
            8813128,
            8812542,
            8812723,
            8811783,
            8814873,
            8813230,
            8813299,
            8812788,
            8811816,
            8811980,
            8812324,
            8813904
        ],
        "A": [
            8810238,
            8810285,
            8810322,
            8810378,
            8810319,
            8812020,
            8810257,
            8810233,
            8811808,
            8810284,
            8810467,
            8810179,
            8810618,
            8811059,
            8810734,
            8811110,
            8810293,
            8810358,
            8810190,
            8811062
        ]
    },
    "name": "F. Treeland Tour",
    "statement": "The \"Road Accident\" band is planning an unprecedented tour around\r\nTreeland. The RA fans are looking forward to the event and making bets\r\non how many concerts their favorite group will have.Treeland consists of\r\ncities, some pairs of cities are connected by bidirectional roads.\r\nOverall the country has roads. We know that it is possible to get to any\r\ncity from any other one. The cities are numbered by integers from 1 to .\r\nFor every city we know its value the number of people in it.We know that\r\nthe band will travel along some path, having concerts in cities along\r\nthe path. The band\u2019s path will not pass one city twice, each time they\r\nmove to the city that hasn\u2019t been previously visited. Thus, the\r\nmusicians will travel along some path (without visiting any city twice)\r\nand in some (not necessarily all) cities along the way they will have\r\nconcerts.The band plans to gather all the big stadiums and concert halls\r\nduring the tour, so every time they will perform in a city which\r\npopulation is than the population of the previously visited city. In\r\nother words, the sequence of population in the cities where the concerts\r\nwill be held is .In a recent interview with the leader of the \"road\r\naccident\" band promised to the fans that the band will in the largest\r\npossible number of cities! Thus the band will travel along some chain of\r\ncities of Treeland and have concerts in some of these cities, so that\r\nthe population number will increase, and the number of concerts will be\r\nthe largest possible.The fans of Treeland are frantically trying to\r\nfigure out how many concerts the group will have in Treeland. Looks like\r\nthey can\u2019t manage without some help from a real programmer! Help the\r\nfans find the sought number of concerts.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <cmath>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nstruct node{\n     node *next;\n     int where;\n} *first[10001], a[100001];\n\nint ans, l, v[10001], dist[10001], n, c[10001], f[10001], len;\nbool b[6001];\n\ninline void makelist(int x, int y){\n     a[++l].where = y;\n     a[l].next = first[x];\n     first[x] = &a[l];\n}\n\ninline void soso(int now){\n     b[now] = true;\n     if (!len || v[now] > f[len]) \n     {\n          f[++len] = v[now];\n          ans = max(ans, len); \n          for (node *x = first[now]; x; x = x->next) \n               if (!b[x->where]) soso(x->where);\n          --len;\n     }\n     else\n     {\n          int Left = 0, Right = len, Mid = (Left + Right) >> 1;\n          for (; Left + 1 < Right; Mid = (Left + Right) >> 1)\n               if (v[now] > f[Mid]) Left = Mid;\n               else Right = Mid;\n          if (v[now] < f[Right]) \n          {\n               int dhh = f[Right];\n               f[Right] = v[now];\n               for (node *x = first[now]; x; x = x->next) \n                    if (!b[x->where]) soso(x->where);\n               f[Right] = dhh;\n          }\n          else\n               for (node *x = first[now]; x; x = x->next) \n                    if (!b[x->where]) soso(x->where);\n     }\n}         \n          \nint main(){\n    // freopen(\"f.in\", \"r\", stdin);\n    // freopen(\"f.out\", \"w\", stdout);\n     scanf(\"%d\", &n);\n     for (int i = 1; i <= n; i++) scanf(\"%d\", &v[i]);\n     memset(first, 0, sizeof(first)); l = 0;\n     for (int i = 1; i < n; i++)\n     {\n          int x, y;\n          scanf(\"%d%d\", &x, &y);\n          makelist(x, y); makelist(y, x);\n     }\n     ans = 0;\n     for (int i = 1; i <= n; i++)\n     {\n          memset(b, false, sizeof(b));\n          len = 0; \n          soso(i);\n     }\n     printf(\"%d\\n\", ans);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dfs and similar",
        "dp",
        "trees"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Treeland Tour.json",
    "editorial_link": "https://codeforces.com//blog/entry/14849",
    "editorial": "The problem is generalization of finding maximal increasing subsequence\r\nin array, so it probably can be solved using dynamic programming. We\r\nwill cal dynamic , the state is directed edge in tree. Value means the\r\nmaximum number of vertices where the band will have concerts on some\r\nsimple path ended in vertex going through vertex . Also the concert in\r\nvertex must be certainly. To calc we should consider all such edges that\r\nthere is simple path started in , going through , and ended in . These\r\nedges can be found using dfs from vertex which is not going through\r\nvertex . All edges used by dfs should be reoriented. So if then . The\r\nsolution needs time and memory. The memory could be if you get indexes\r\nof directed edges without two-dimensional array.\r\n"
}