{
    "link": "https://codeforces.com//contest/454/problem/C",
    "problemId": "11930",
    "problem_idx": "C",
    "shortId": "454C",
    "contest_number": "454",
    "problem_submissions": {
        "E": [
            7317497
        ],
        "D": [
            7315165,
            7316655,
            7315850,
            7316966,
            7316988,
            7316976,
            7317778,
            7318354,
            7318456,
            7317666,
            7317555,
            7318543,
            7319222,
            7318726,
            7317841,
            7320896,
            7320849,
            7319120,
            7319784,
            7318403,
            7318794
        ],
        "C": [
            7312738,
            7311706,
            7313880,
            7309986,
            7311157,
            7313294,
            7311115,
            7311374,
            7312788,
            7314689,
            7313048,
            7310594,
            7313465,
            7311432,
            7315295,
            7315016,
            7313938,
            7313281,
            7316560
        ],
        "B": [
            7309947,
            7310409,
            7311046,
            7311468,
            7312031,
            7310861,
            7312086,
            7311916,
            7309623,
            7310693,
            7312314,
            7312987,
            7310239,
            7313802,
            7311790,
            7310408,
            7312163,
            7311161,
            7312424
        ],
        "A": [
            7308622,
            7310283,
            7309770,
            7312107,
            7308641,
            7308657,
            7312828,
            7309446,
            7308673,
            7309245,
            7309405,
            7313814,
            7308860,
            7311907,
            7309469,
            7311125,
            7309147,
            7309374,
            7309615
        ]
    },
    "name": "C. Little Pony and Expected Maximum",
    "statement": "Twilight Sparkle was playing Ludo with her friends Rainbow Dash, Apple\r\nJack and Flutter Shy. But she kept losing. Having returned to the\r\ncastle, Twilight Sparkle became interested in the dice that were used in\r\nthe game.The dice has faces: the first face of the dice contains a dot,\r\nthe second one contains two dots, and so on, the -th face contains dots.\r\nTwilight Sparkle is sure that when the dice is tossed, each face appears\r\nwith probability . Also she knows that each toss is independent from\r\nothers. Help her to calculate the expected maximum number of dots she\r\ncould get after tossing the dice times.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <ctime>\n\n#define inf 0x3f3f3f3f\n#define Inf 0x3FFFFFFFFFFFFFFFLL\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define Rep(i, n) for (int i = 1; i <= (n); ++i)\n#define clr(x, a) memset(x, (a), sizeof x)\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n\tint m, n; scanf(\"%d%d\", &m, &n);\n\tdouble ret = 0;\n\tdouble t = 1;\n\tfor (int i = m; i >= 1; --i) {\n\t\tt -= pow(1.0 * (i - 1) / m, n);\n\t\tret += t * i;\n\t\tt = pow(1.0 * (i - 1) / m, n);\n\t}\n\tprintf(\"%.10lf\\n\", ret);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math",
        "probabilities"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Little Pony and Expected Maximum.json",
    "editorial_link": "https://codeforces.com//blog/entry/13190",
    "editorial": "Brief description:\nCalculate the expected maximum number after tossing a m faces dice n times.\n\nAnalysis:\nTake m = 6, n = 2 as a instance.\n\n6 6 6 6 6 6\n5 5 5 5 5 6\n4 4 4 4 5 6\n3 3 3 4 5 6\n2 2 3 4 5 6\n1 2 3 4 5 6\nEnumerate the maximum number, the distribution will be a n-dimensional super-cube with m-length-side. Each layer will be a large cube minus a smaller cube. So we have:\n\n\nCalculate in may cause overflow, we could move the divisor into the sum and calculate (i?/?m)n instead."
}