{
    "link": "https://codeforces.com//contest/137/problem/C",
    "problemId": "723",
    "problem_idx": "C",
    "shortId": "137C",
    "contest_number": "137",
    "problem_submissions": {
        "D": [
            960005,
            960083,
            960407,
            960822,
            960978,
            959728,
            959647,
            960244,
            961785,
            961204,
            960009,
            960173,
            960331,
            960318,
            961322,
            961503,
            960958,
            959450,
            961108
        ],
        "E": [
            959375,
            960769,
            959788,
            959842,
            960438,
            960606,
            961308,
            961259,
            960542,
            960298,
            961524,
            961740,
            961358,
            961405,
            960518,
            960604,
            961543,
            962797,
            961827
        ],
        "A": [
            958154,
            958315,
            957467,
            957359,
            957636,
            957482,
            957504,
            957682,
            957763,
            958206,
            957614,
            957505,
            957814,
            957699,
            957800,
            958834,
            957616,
            957354,
            958655
        ],
        "B": [
            957805,
            957908,
            957895,
            957576,
            958020,
            957753,
            957706,
            958045,
            958039,
            958890,
            957997,
            957845,
            958326,
            958171,
            958572,
            959109,
            958403,
            957499,
            958442
        ],
        "C": [
            957396,
            957611,
            958395,
            958193,
            958567,
            958319,
            958191,
            958994,
            962691,
            962687,
            958717,
            959395,
            958900,
            958213,
            959117,
            959359,
            959315,
            960063,
            959720,
            957783,
            958064
        ]
    },
    "name": "C. History",
    "statement": "Polycarpus likes studying at school a lot and he is always diligent\r\nabout his homework. Polycarpus has never had any problems with natural\r\nsciences as his great-great-grandfather was the great physicist\r\nSeinstein. On the other hand though, Polycarpus has never had an easy\r\ntime with history.Everybody knows that the World history encompasses\r\nexactly events: the -th event had continued from the year to the year\r\ninclusive (). Polycarpus easily learned the dates when each of events\r\nstarted and ended (Polycarpus inherited excellent memory from his\r\ngreat-great-granddad). But the teacher gave him a more complicated task:\r\nPolycaprus should know when all events began and ended and he should\r\nalso find out for each event whether it includes another event.\r\nPolycarpus’ teacher thinks that an event includes an event if and . Your\r\ntask is simpler: find the number of events that are included in some\r\nother event.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int,int> PII;\n\nint n;\nPII a[100000];\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++) scanf(\"%d%d\",&a[i].first,&a[i].second);\n    sort(a,a+n);\n    int far=0,ans=0;\n    for(int i=0;i<n;i++){\n        if(a[i].second<=far) ans++;\n        far=max(far,a[i].second);\n    }\n    printf(\"%d\\n\",ans);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "sortings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. History.json",
    "editorial_link": "https://codeforces.com//blog/entry/3318",
    "editorial": "Denote a[i], b[i] - ends of the i-th event. Letâs sort pairs (a[i],\r\nb[i]) by a[i] and iterate over all pairs. Denote rg the maximal b[i]\r\nfrom already processed. If current b[i] < rg than we must increment\r\nanswer by one. If b[i] > rg than we must assign rg by b[i]. The\r\ncomplexity is O(n logn).\r\n",
    "hint": []
}