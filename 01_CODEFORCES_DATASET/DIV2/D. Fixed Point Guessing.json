{
    "link": "https://codeforces.com//contest/1698/problem/D",
    "problemId": "1443729",
    "problem_idx": "D",
    "shortId": "1698D",
    "contest_number": "1698",
    "problem_submissions": {
        "F": [
            162124470,
            162134445,
            162141749,
            162152934,
            177654064,
            216084662,
            162196377,
            162139942,
            162355602,
            162159626,
            162690820
        ],
        "E": [
            162087630,
            162097353,
            162109816,
            162103301,
            162126529,
            162103867,
            162097541,
            162101116,
            162109117,
            162107378,
            162110311,
            162151314,
            162112938,
            162118264,
            162120819,
            162122603,
            162129047,
            162116428,
            162113567,
            162115753
        ],
        "D": [
            162072106,
            162078971,
            162084618,
            162091663,
            162091608,
            162080384,
            162079742,
            162083927,
            162089597,
            162090503,
            162089228,
            162119224,
            162090409,
            162087036,
            162090706,
            162084921,
            162084389,
            162101274,
            162089309,
            162089923
        ],
        "C": [
            162065641,
            162067112,
            162066151,
            162070233,
            162081538,
            162071658,
            162069982,
            162072714,
            162074007,
            162068223,
            162076542,
            162110420,
            162075987,
            162073114,
            162072860,
            162074806,
            162073708,
            162075609,
            162078161,
            162072891
        ],
        "B": [
            162059543,
            162058156,
            162059458,
            162060292,
            162065675,
            162061709,
            162057759,
            162058869,
            162063379,
            162060397,
            162060756,
            162115063,
            162060812,
            162061896,
            162062035,
            162068563,
            162064118,
            162063059,
            162062265,
            162061711
        ],
        "A": [
            162055540,
            162055455,
            162055545,
            162055770,
            162057397,
            162055986,
            162055221,
            162055288,
            162058360,
            162055918,
            162055534,
            162055768,
            162055783,
            162057223,
            162056112,
            162055836,
            162057629,
            162055832,
            162056104,
            162055773
        ],
        "G": [
            162150291,
            162713012
        ]
    },
    "name": "D. Fixed Point Guessing",
    "statement": "Initially, there is an array a = [1, 2,\r\nldots, n], where n is an odd positive integer. The jury has selected\r\nfrac{n-1}{2} pairs of elements, and then the elements in those pairs are\r\nswapped. For example, if a=[1,2,3,4,5], and the pairs 1\r\nleftrightarrow 4 and 3\r\nleftrightarrow 5 are swapped, then the resulting array is [4, 2, 5, 1,\r\n3]. As a result of these swaps, exactly one element will not change\r\nposition. You need to find this element.To do this, you can ask several\r\nqueries. In each query, you can pick two integers l and r (1\r\nleq l\r\nleq r\r\nleq n). In return, you will be given the elements of the subarray [a_l,\r\na_{l + 1},\r\ndots, a_r] . Find the element which did not change position. You can\r\nmake at most\r\nmathbf{15} queries.The array a is fixed before the interaction and does\r\nnot change after your queries.Recall that an array b is a subarray of\r\nthe array a if b can be obtained from a by deletion of several\r\n(possibly, zero or all) elements from the beginning and several\r\n(possibly, zero or all) elements from the end.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nint T,n,k,tot,fl,j,l,i,a[1000005];\nint ask(int l,int r){\n\tcout<<\"? \"<<l<<\" \"<<r<<'\\n';cout.flush(); \n\tint tot=0,cnt=0;\n\tfor(int i=l;i<=r;++i){\n\t\tcin>>a[++tot];\n\t\tif(a[tot]>r||a[tot]<l)++cnt;\n\t}\n\treturn (r-l+1-cnt)&1;\n}\nvoid solve(int l,int r){\n\tif(l==r){\n\t\tcout<<\"! \"<<l<<\"\\n\";cout.flush();return ;\n\t}\n\tint mid=(l+r>>1);\n\tint fl=ask(l,mid);\n\tif(fl)return solve(l,mid);\n\telse return solve(mid+1,r);\n}\nint t;\nint main(){\n\tcin>>t;\n\twhile(t--){\n\t\tcin>>n;\n\t\tsolve(1,n);\n\t}\n} "
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "interactive"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Fixed Point Guessing.json",
    "editorial_link": "https://codeforces.com//blog/entry/104310",
    "editorial": "Note that , which is less than the number of queries. If we can answer a\r\nquestion of the form \"given a subarray, does it contain the fixed\r\npoint?\", then we can binary search on this subarray until we find the\r\nfixed point.Given a subarray , letâs count the number of such that . We\r\nclaim that if this count is odd, then the subarray contains the fixed\r\npoint; otherwise, it does not.First, letâs show that each swapped pair\r\neither increases the count by or by . Suppose that are swapped (that is,\r\nand ). If is in the range from to , then (since ), so is also in the\r\nrange from to . Similarly, if is not in the range, then neither is . So\r\nthis pair either increases the count by or .Contrarily, the fixed point\r\nincreases the count by if it is not in the range and if it is. So we can\r\nsimply look at the parity of the number of elements satisfying the\r\ncondition, and run our binary search.The time complexity is .\r\n",
    "hint": [
        "Hint Binary search."
    ]
}