{
    "link": "https://codeforces.com//contest/476/problem/B",
    "problemId": "15274",
    "problem_idx": "B",
    "shortId": "476B",
    "contest_number": "476",
    "problem_submissions": {
        "E": [
            8204672,
            8203397,
            8207038,
            8211617
        ],
        "D": [
            8197947,
            8191751,
            8202943,
            8195927,
            8196039,
            8197811,
            8197369,
            8217545,
            8199329,
            8200501,
            8205151,
            8199419,
            8198018,
            8200566,
            8201223,
            8198122,
            8201729
        ],
        "C": [
            8188264,
            8188407,
            8188998,
            8189052,
            8201842,
            8185141,
            8195789,
            8189091,
            8193525,
            8196914,
            8196369,
            8196594,
            8195818,
            8195843,
            8196937,
            8193815
        ],
        "B": [
            8185985,
            8208310,
            8204785,
            8187126,
            8185874,
            8187135,
            8188697,
            8188022,
            8185704,
            8186819,
            8186804,
            8188777,
            8187192,
            8187477,
            8187062,
            8187450,
            8187242
        ],
        "A": [
            8184534,
            8184021,
            8184248,
            8184018,
            8184166,
            8186376,
            8185191,
            8184038,
            8184338,
            8184268,
            8185458,
            8184887,
            8184306,
            8184110,
            8184903,
            8184310
        ]
    },
    "name": "B. Dreamoon and WiFi",
    "statement": "Dreamoon is standing at the position on a number line. Drazil is sending\r\na list of commands through Wi-Fi to Dreamoon’s smartphone and Dreamoon\r\nfollows them.Each command is one of the following two types: Go 1 unit\r\ntowards the positive direction, denoted as Go 1 unit towards the\r\nnegative direction, denoted as But the Wi-Fi condition is so poor that\r\nDreamoon’s smartphone reports some of the commands can’t be recognized\r\nand Dreamoon knows that some of them might even be wrong though\r\nsuccessfully recognized. Dreamoon decides to follow every recognized\r\ncommand and toss a fair coin to decide those unrecognized ones (that\r\nmeans, he moves to the unit to the negative or positive direction with\r\nthe same probability ). You are given an original list of commands sent\r\nby Drazil and list received by Dreamoon. What is the probability that\r\nDreamoon ends in the position originally supposed to be final by\r\nDrazil’s commands?\r\n",
    "solutions": [
        "//BISM ILLAHHIRRAHMANNI RRAHIM\n\n#include <cassert>\n#include <cctype>\n#include <climits>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <string>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <iterator>\n#include <utility>\nusing namespace std;\n\ntemplate< class T > T _abs(T n) { return (n < 0 ? -n : n); }\ntemplate< class T > T _max(T a, T b) { return (!(a < b) ? a : b); }\ntemplate< class T > T _min(T a, T b) { return (a < b ? a : b); }\ntemplate< class T > T sq(T x) { return x * x; }\n\n#define ALL(p) p.begin(),p.end()\n#define MP(x, y) make_pair(x, y)\n#define SET(p) memset(p, -1, sizeof(p))\n#define CLR(p) memset(p, 0, sizeof(p))\n#define MEM(p, v) memset(p, v, sizeof(p))\n#define CPY(d, s) memcpy(d, s, sizeof(s))\n#define READ(f) freopen(f, \"r\", stdin)\n#define WRITE(f) freopen(f, \"w\", stdout)\n#define SZ(c) (int)c.size()\n#define PB(x) push_back(x)\n#define ff first\n#define ss second\n#define i64 long long\n#define ld long double\n#define pii pair< int, int >\n#define psi pair< string, int >\n#define vi vector< int >\n\nconst double EPS = 1e-9;\nconst int INF = 0x7f7f7f7f;\nchar ln[130];\n\ndouble dfs(int p,int cr,int tg) {\n    if(!ln[p]) return cr==tg;\n    if(ln[p]=='+') return dfs(p+1,cr+1,tg);\n    if(ln[p]=='-') return dfs(p+1,cr-1,tg);\n    return 0.5*(dfs(p+1,cr-1,tg)+dfs(p+1,cr+1,tg));\n}\n\n\nint main() {\n    //READ(\"in.txt\");\n    //WRITE(\"out.txt\");\n    cin>>ln;\n    int i,t=0;\n    for(i=0;ln[i];i++) {\n        if(ln[i]=='+') t++;\n        else t--;\n    }\n    cin>>ln;\n    printf(\"%.10lf\\n\",dfs(0,0,t));\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "combinatorics",
        "dp",
        "math",
        "probabilities"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Dreamoon and WiFi.json",
    "editorial_link": "https://codeforces.com//blog/entry/14256",
    "editorial": "The order of moves won't change the final position, so we can move all '?'s to the end of the string.\nWe have the following information:\n1. the correct final position\n2. the position that Dreamoon will be before all '?'s\n3. the number of '?'s\nWe can infer that the distance and direction dreamoon still needs to move in the '?' part from 1. and 2., and furthur translate that to how many +1s and -1s dreamoon will need to move.\nWhat's left is a combinatorial problem, the probability would be .\nSo we can compute that formula within O(n) time assuming n is the length of commands, but since N is small so we can brute force every possible choice of '?' with some recursive or dfs like search in O(2n) time complexity.\nNote that the problem asks for a precision of 10?-?9, so one should output to 11 decimal places or more.\ntime complexity: O(n), assuming n is the length of commands.",
    "hint": []
}