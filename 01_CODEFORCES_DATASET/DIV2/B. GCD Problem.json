{
    "link": "https://codeforces.com//contest/1617/problem/B",
    "problemId": "1229931",
    "problem_idx": "B",
    "shortId": "1617B",
    "contest_number": "1617",
    "problem_submissions": {
        "D2": [
            139528258,
            139511137,
            139522542,
            139519708,
            139520670,
            139523783,
            139518761,
            139530052,
            139554537,
            139536292,
            139522659,
            139517981,
            139512155,
            139519772,
            139538893,
            139543913,
            139531998
        ],
        "E": [
            139517842,
            139538424,
            139497648,
            139535975,
            139534847,
            139545980,
            139543568,
            139544780,
            139542416,
            139541142,
            139546720,
            139613086,
            139612916
        ],
        "D1": [
            139501429,
            139511244,
            139522629,
            139519806,
            139515622,
            139513160,
            139518872,
            139525357,
            139508478,
            139513182,
            139525031,
            139501096,
            139517883,
            139503934,
            139519698,
            139505351,
            139502672,
            139513862
        ],
        "C": [
            139489946,
            139490132,
            139526014,
            139489601,
            139500619,
            139496413,
            139508980,
            139499423,
            139495044,
            139500428,
            139504938,
            139495573,
            139492326,
            139510250,
            139491535,
            139494498,
            139495193,
            139495421
        ],
        "B": [
            139486471,
            139485548,
            139527692,
            139491898,
            139493048,
            139490679,
            139500877,
            139490165,
            139489596,
            139492975,
            139498385,
            139485704,
            139488427,
            139502448,
            139486742,
            139489499,
            139488312,
            139490271
        ],
        "A": [
            139485264,
            139485036,
            139530317,
            139495566,
            139490417,
            139485662,
            139494269,
            139485815,
            139485225,
            139486039,
            139485608,
            139487143,
            139485767,
            139485406,
            139485431,
            139485561,
            139486024,
            139485975
        ]
    },
    "name": "B. GCD Problem",
    "statement": "Given a positive integer n. Find three positive integers a, b, c such\r\nthat a + b + c = n and\r\noperatorname{gcd}(a, b) = c, where\r\noperatorname{gcd}(x, y) denotes the greatest common divisor (GCD) of\r\nintegers x and y.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nusing LL = long long;\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\tint t;\n\tfor (cin >> t; t; t -= 1) {\n\t\t[](){\n\t\t\tint n;\n\t\t\tcin >> n;\n\t\t\tfor (int i = 2; i <= n; i += 1)\n\t\t\t\tif (gcd(n - i - 1, i) == 1) {\n\t\t\t\t\tcout << i << \" \" << n - 1 - i << \" 1\\n\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t}();\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. GCD Problem.json",
    "editorial_link": "https://codeforces.com//blog/entry/97920",
    "editorial": "SolutionKey observation: there always exists a solution with under the\r\ngiven constraints. We set because there is no solution when or .Solution\r\n1: Brute force from and calculate the value of (), then check whether .\r\nIt works, because you will find a prime number such that does not divide\r\n.Solution 2: Randomly choose and calculate (). Repeating that for enough\r\ntimes will eventually get you a pair of () such that .Solution 3:\r\nConstructive solution. When , output (). When , output (). When , output\r\n().\r\n",
    "hint": [
        "Hint There must exist a solution for under the given constraints."
    ]
}