{
    "link": "https://codeforces.com//contest/1890/problem/C",
    "problemId": "2253928",
    "problem_idx": "C",
    "shortId": "1890C",
    "contest_number": "1890",
    "problem_submissions": {
        "E2": [
            230243672,
            230240480,
            230297470,
            230254767,
            230258587,
            230244180,
            230254845,
            230249864,
            230263075,
            230246186
        ],
        "E1": [
            230239375,
            230240649,
            230254904,
            230258446,
            230244551,
            230252707,
            230254758,
            230249708,
            230262781,
            230215711,
            230246708,
            230241675,
            230236999,
            230227194,
            230225604,
            230238862,
            230234772,
            230232052,
            230239219
        ],
        "C": [
            230215281,
            230206393,
            230208934,
            230208092,
            230206406,
            230204020,
            230204003,
            230208271,
            230220692,
            230199138,
            230200556,
            230196035,
            230205630,
            230204581,
            230205712,
            230207645,
            230206074,
            230200943
        ],
        "D": [
            230200794,
            230211914,
            230214420,
            230213956,
            230250838,
            230215130,
            230243357,
            230434274,
            230253613,
            230238740,
            230207739,
            230228283,
            230207522,
            230211617,
            230214234,
            230212438,
            230213769,
            230217205,
            230221587,
            230210557
        ],
        "B": [
            230187228,
            230188639,
            230191975,
            230193314,
            230189140,
            230192487,
            230190081,
            230430791,
            230190255,
            230203446,
            230188113,
            230219697,
            230186542,
            230187036,
            230191039,
            230188308,
            230187745,
            230188740,
            230190731,
            230189120
        ],
        "A": [
            230183445,
            230183838,
            230195995,
            230187748,
            230183292,
            230186367,
            230183250,
            230430735,
            230183529,
            230188990,
            230184115,
            230213790,
            230183853,
            230183272,
            230185989,
            230183632,
            230183856,
            230183304,
            230184663,
            230511197,
            230183134
        ],
        "F": [
            230416243,
            230223460,
            232061512,
            232061382,
            232061156,
            230258558,
            230434262,
            230438215
        ]
    },
    "name": "C. Qingshan Loves Strings 2",
    "statement": "Qingshan has a string s which only contains\r\ntexttt{0} and\r\ntexttt{1}.A string a of length k is good if and only if a_i\r\nne a_{k-i+1} for all i=1,2,\r\nldots,k. For example,\r\ntexttt{10},\r\ntexttt{1010},\r\ntexttt{111000} are good, while\r\ntexttt{11},\r\ntexttt{101},\r\ntexttt{001},\r\ntexttt{001100} are not good.Qingshan wants to make s good. To do this,\r\nshe can do the following operation 300 times (possibly, zero): insert\r\ntexttt{01} to any position of s (getting a new s). Please tell Qingshan\r\nif it is possible to make s good. If it is possible, print a sequence of\r\noperations that makes s good.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define il inline\nusing namespace std;\nconst int maxn=510;\nil int read(){\n\tint x=0;\n\tchar c=getchar();\n\tfor(;!(c>='0'&&c<='9');c=getchar());\n\tfor(;c>='0'&&c<='9';c=getchar())\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\treturn x;\n}\nint T,n;\nchar c[maxn];\nvector<int>v;\nint ans[maxn],cnt;\nint main(){\n\tT=read();\n\twhile(T--){\n\t\tn=read();\n\t\tv.clear(),cnt=0;\n\t\tscanf(\"%s\",c+1);\n\t\tif(n&1){\n\t\t\tprintf(\"-1\\n\");\n\t\t\tcontinue;\n\t\t}v.push_back(0);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tv.push_back(c[i]-'0');\n\t\tv.push_back(0);\n\t\tint mid=n/2,l=1,r=n;\n\t\twhile(cnt<=300){\n\t\t\tif(l>r) break;\n\t\t\tif(v[l]&&v[r]){\n\t\t\t\tans[++cnt]=l-1;\n\t\t\t\tv.insert(v.begin()+l,1);\n\t\t\t\tv.insert(v.begin()+l,0);\n\t\t\t\tl++,r++;\n\t\t\t}\n\t\t\telse if(!v[l]&&!v[r]){\n\t\t\t\tans[++cnt]=r;\n\t\t\t\tv.insert(v.begin()+r+1,1);\n\t\t\t\tv.insert(v.begin()+r+1,0);\n\t\t\t\tl++,r++;\n\t\t\t}\n\t\t\telse l++,r--;\n\t\t}\n\t\tif(cnt>300){\n\t\t\tprintf(\"-1\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"%d\\n\",cnt);\n\t\tfor(int i=1;i<=cnt;i++)\n\t\t\tprintf(\"%d \",ans[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation",
        "two pointers"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Qingshan Loves Strings 2.json",
    "editorial_link": "https://codeforces.com//blog/entry/121813",
    "editorial": "First, there is no solution when the number of 0's and 1's are different.\n\nOtherwise, the construction follows:\n\nIf the s1?sn\n now, we can ignore s1\n and sn\n, and consider s2..n?1\n as a new s\n. If s\n is empty, the algorithm ends.\n\nNow s1=sn\n. If they are 1, insert 01 to the front; otherwise, insert 01 to the end. Look at this example:\n\n\"110010\"\n\"1001\"\n\"011001\"\n\"1100\"\n\"10\"\n\"\"\nThis operation is actually equivalent to moving the last 1 to the front or moving the first 0 to the end. For example, in step 2 to 4 above, we succeed moving the last 1 to the front. So in the worst case, every character in the string are moved, and we need n\n moves.\n\nActually, we don't need n\n moves but n/2\n moves. Because for the 0 and 1 deleted in the same operation, at most one of them need to be moved.\n\nTime complexity O(n)\n."
}