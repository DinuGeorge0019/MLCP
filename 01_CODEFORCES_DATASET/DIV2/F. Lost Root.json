{"link": "https://codeforces.com//contest/1061/problem/F", "problemId": "259562", "problem_idx": "F", "shortId": "1061F", "contest_number": "1061", "problem_submissions": {"F": [46080533, 46078741, 46083363, 46090966, 46090449, 46083565, 46085799, 46083880, 46078551, 46109412, 46086044, 46084393, 46085497, 46085674, 46086595, 46085522, 46079186, 46086667, 46084268, 46086192, 46099697, 46099461, 46088106], "D": [46072013, 46076677, 46075957, 46074341, 46074354, 46074232, 46074411, 46085044, 46076314, 46078869, 46075590, 46078204, 46076173, 46079731, 46078000, 46081859, 46079963, 46085405, 46080982, 46080058], "C": [46069182, 46071750, 46070967, 46071622, 46071185, 46071619, 46071683, 46072269, 46072643, 46074534, 46072699, 46073691, 46071278, 46072896, 46072959, 46081505, 46074501, 46073620, 46077745, 46075063], "B": [46068385, 46070705, 46068805, 46070395, 46069936, 46070540, 46069425, 46071160, 46070196, 46071645, 46073407, 46071478, 46069267, 46070628, 46070940, 46073987, 46071263, 46069667, 46073266, 46069912], "A": [46065105, 46064815, 46065437, 46065157, 46065204, 46064909, 46064831, 46065487, 46067926, 46065498, 46065297, 46066800, 46065131, 46066394, 46065152, 46064816, 46065082, 46065378, 46071171, 46064958], "E": [46080824, 46089783, 46087601, 142313241, 46115374]}, "name": "F. Lost Root", "statement": "The graph is called if it is connected and has no cycles. Suppose the\r\ntree is rooted at some vertex. Then tree is called to be perfect k-ary\r\ntree if each vertex is either a leaf (has no children) or has exactly k\r\nchildren. Also, in perfect k-ary tree all leafs must have same depth.For\r\nexample, the picture below illustrates perfect binary tree with 15\r\nvertices:There is a perfect k-ary tree with n nodes. The nodes are\r\nlabeled with distinct integers from 1 to n, however you don\u2019t know how\r\nnodes are labelled. Still, you want to find the label of the root of the\r\ntree.You are allowed to make at most 60\r\ncdot n queries of the following type: \"\", the query returns \"\" if node\r\nwith label b lies on the path from a to c and \"\" otherwise. Both a and c\r\nare considered to be lying on the path from a to c.When you are ready to\r\nreport the root of the tree, print \"\", where s is the label of the root\r\nof the tree. It is possible to report the root only once and this query\r\nis not counted towards limit of 60\r\ncdot n queries.\r\n", "solutions": ["#include <bits/stdc++.h>\n#define eb emplace_back\n#define sz(V) ((int)(V).size())\n#define INF (0x3f3f3f3f)\n#define INFLL (0x3f3f3f3f3f3f3f3fll)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<int, ll> pil;\ntypedef pair<ll, int> pli;\n\nmt19937 mt_rand(time(0));\nint rd(int s, int e) { return mt_rand() % (e-s+1) + s; }\n\nmap<int, bool> MP[1505];\n\nbool ask(int a, int b, int c) {\n\tif(a == c) {\n\t\tif(a != b) return false;\n\t\treturn true;\n\t}\n\tif(a == b) return true;\n\tif(b == c) return true;\n\tif(a > c) swap(a, c);\n\n\tauto it = MP[a].find(b << 12 | c);\n\tif(MP[a].end() != it) return it -> second;\n\n\tprintf(\"? %d %d %d\\n\", a, b, c);\n\tfflush(stdout);\n\tchar str[10];\n\tscanf(\" %s\", str);\n\tbool ret = 'Y' == str[0];\n\n\tMP[a][b << 12 | c] = ret;\n\treturn ret;\n}\nvoid answer(int ret) {\n\tprintf(\"! %d\\n\", ret);\n\tfflush(stdout);\n\texit(0);\n}\n\nint N, K, D;\n\nvoid f(int a, vector<int> V, int k) {\n\tif(sz(V) == 1) {\n\t\tprintf(\"! %d\\n\", V[0]);\n\t\tfflush(stdout);\n\t\texit(0);\n\t}\n\n\tshuffle(V.begin(), V.end(), mt_rand);\n\n\tvector<int> VA, VB;\n\tfor(int i = 1, n = sz(V); i < n; i++) {\n\t\t(ask(a, V[i], V[0]) ? VA : VB).eb(V[i]);\n\t}\n\n\tif(sz(VA) == k) {\n\t\tanswer(V[0]);\n\t}\n\n\tif(sz(VA) > k) {\n\t\tf(a, VA, k);\n\t} else {\n\t\tf(a, VB, k - sz(VA) - 1);\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\", &N, &K);\n\tfor(int sum = 0, t = 1;;) {\n\t\tsum += t;\n\t\tif(sum == N) break;\n\t\tD++;\n\t\tt *= K;\n\t}\n\n\tfor(;;) {\n\t\tint a = 0, b = 0;\n\t\tfor(; a == b;) {\n\t\t\ta = rd(1, N);\n\t\t\tb = rd(1, N);\n\t\t}\n\n\t\tvector<int> V;\n\t\tfor(int i = 1; i <= N; i++) {\n\t\t\tif(i == a || i == b) continue;\n\t\t\tif(ask(a, i, b)) V.eb(i);\n\t\t\tif(sz(V) == 2*D - 1) break;\n\t\t}\n\n\t\tif(sz(V) != 2*D - 1) continue;\n\n\t\tf(a, V, D - 1);\n\t}\n\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["interactive", "probabilities"], "dificulty": "2400", "interactive": false}