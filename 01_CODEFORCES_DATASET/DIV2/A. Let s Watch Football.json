{
    "link": "https://codeforces.com//contest/195/problem/A",
    "problemId": "1419",
    "problem_idx": "A",
    "shortId": "195A",
    "contest_number": "195",
    "problem_submissions": {
        "E": [
            1777341,
            1777807,
            1780602,
            1778882,
            1779695,
            1778939,
            1778079,
            1779584,
            1779643,
            1780676,
            1779994,
            1779882,
            1781688
        ],
        "D": [
            1776612,
            1777077,
            1778398,
            1777210,
            1777366,
            1777818,
            1778286,
            1778743,
            1779250,
            1776789,
            1779690,
            1779525,
            1779340,
            1779758
        ],
        "C": [
            1776366,
            1778703,
            1777228,
            1786363,
            1778918,
            1777720,
            1778071,
            1778134,
            1779053,
            1780725,
            1777787,
            1778730,
            1778503,
            1778557
        ],
        "B": [
            1775818,
            1776287,
            1776244,
            1776178,
            1776166,
            1776316,
            1776212,
            1776715,
            1776133,
            1776660,
            1776543,
            1776189,
            1776717,
            1777992,
            1776246,
            1777021,
            1776348,
            1776593
        ],
        "A": [
            1775640,
            1775659,
            1775647,
            1775756,
            1775776,
            1775645,
            1775901,
            1776042,
            1775714,
            1776301,
            1775707,
            1775754,
            1776172,
            1777471,
            1775841,
            1775942,
            1776937,
            1775764
        ]
    },
    "name": "A. Let s Watch Football",
    "statement": "Valeric and Valerko missed the last Euro football game, so they decided\r\nto watch the game\u2019s key moments on the Net. They want to start watching\r\nas soon as possible but the connection speed is too low. If they turn on\r\nthe video right now, it will \"hang up\" as the size of data to watch per\r\nsecond will be more than the size of downloaded data per second.The guys\r\nwant to watch the whole video without any pauses, so they have to wait\r\nsome number of seconds for a part of the video to download. After this\r\nnumber of seconds passes, they can start watching. Waiting for the whole\r\nvideo to download isn\u2019t necessary as the video can download after the\r\nguys started to watch.Let\u2019s suppose that video\u2019s length is seconds and\r\nValeric and Valerko wait seconds before the watching. Then for any\r\nmoment of time , , the following condition must fulfill: the size of\r\ndata received in seconds is not less than the size of data needed to\r\nwatch seconds of the video.Of course, the guys want to wait as little as\r\npossible, so your task is to find the minimum integer number of seconds\r\nto wait before turning the video on. The guys must watch the video\r\nwithout pauses.\r\n",
    "solutions": [
        "#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <cstddef>\n#include <algorithm>\n#include <utility>\n#include <iterator>\n#include <numeric>\n#include <list>\n#include <complex>\n#include <cstdio>\n#include <climits>\n#include <iostream>\n#include <fstream>\n\n/*** TEMPLATE CODE STARTS HERE ***/\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef long long ll;\ntypedef complex<double> pnt;\ntypedef pair<int, int> pii;\n\n#define RA(x) (x).begin(), (x).end()\n#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)\n#define SZ(x) ((int) (x).size())\n\ntemplate<class T>\nvoid splitstr(const string &s, vector<T> &out)\n{\n    istringstream in(s);\n    out.clear();\n    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));\n}\n\ntemplate<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }\n\nstatic void redirect(int argc, const char **argv)\n{\n    if (argc > 1)\n    {\n        static filebuf f;\n        f.open(argv[1], ios::in);\n        cin.rdbuf(&f);\n        if (!cin)\n        {\n            cerr << \"Failed to open '\" << argv[1] << \"'\" << endl;\n            exit(1);\n        }\n    }\n\n    if (argc > 2)\n    {\n        static filebuf f;\n        f.open(argv[2], ios::out | ios::trunc);\n        cout.rdbuf(&f);\n        if (!cout)\n        {\n            cerr << \"Failed to open '\" << argv[2] << \"'\" << endl;\n        }\n    }\n}\n\n/*** TEMPLATE CODE ENDS HERE */\n\nint main(int argc, const char **argv)\n{\n    redirect(argc, argv);\n\n    ll A, B, C;\n    cin >> A >> B >> C;\n    ll data = C * A;\n    ll down_time = (data + B - 1) / B;\n    ll t = max(0LL, down_time - C);\n    cout << t << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Let s Watch Football.json",
    "editorial_link": "https://codeforces.com//blog/entry/4699",
    "editorial": "The whole video will be downloaded in seconds. In this problem you can\r\nchoose every as an answer. To fulfill coditions of the problem it is\r\nenough to check the condition at the moment of time t0 = all.\r\n"
}