{
    "link": "https://codeforces.com//contest/285/problem/D",
    "problemId": "2758",
    "problem_idx": "D",
    "shortId": "285D",
    "contest_number": "285",
    "problem_submissions": {
        "D": [
            3371037,
            3370625,
            3370823,
            3372478,
            3371850,
            3371021,
            3371148,
            3371736,
            3371740,
            3371775,
            3371705,
            3372534,
            3374253,
            3372500,
            3373167,
            3372249,
            3372418,
            3372090,
            3372165
        ],
        "B": [
            3367282,
            3367078,
            3367096,
            3368120,
            3368239,
            3368103,
            3368574,
            3367927,
            3366943,
            3368403,
            3368966,
            3366597,
            3368435,
            3368190,
            3370454,
            3368505,
            3368759,
            3368536,
            3367749
        ],
        "C": [
            3366599,
            3367784,
            3367644,
            3367061,
            3368999,
            3366839,
            3367511,
            3367173,
            3368036,
            3367341,
            3367574,
            3367042,
            3367218,
            3366730,
            3369795,
            3367285,
            3366926,
            3366924,
            3368674
        ],
        "A": [
            3366089,
            3366128,
            3366162,
            3369207,
            3366707,
            3366322,
            3366804,
            3366259,
            3366105,
            3366337,
            3366390,
            3366085,
            3366579,
            3366287,
            3370052,
            3366946,
            3366410,
            3366150,
            3366484
        ]
    },
    "name": "D. Permutation Sum",
    "statement": "Petya decided to introduce the sum operation on the set of permutations\r\nof length . Let’s assume that we are given two permutations of length :\r\nand . Petya calls the sum of permutations and such permutation of length\r\n, where .Operation means taking the remainder after dividing number by\r\nnumber .Obviously, not for all permutations and exists permutation that\r\nis sum of and . That’s why Petya got sad and asked you to do the\r\nfollowing: given , count the number of such pairs of permutations and of\r\nlength , that exists permutation that is sum of and . The pair of\r\npermutations and the pair of permutations are considered distinct\r\npairs.As the answer can be rather large, print the remainder after\r\ndividing it by ().\r\n",
    "solutions": [
        "#include<vector>\n#include<list>\n#include<map>\n#include<set>\n#include<deque>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<algorithm>\n#include<functional>\n#include<numeric>\n#include<utility>\n#include<iostream>\n#include<sstream>\n#include<iomanip>\n#include<cmath>\n#include<cstdlib>\n#include<cctype>\n#include<string>\n#include<cstring>\n#include<cstdio>\n#include<ctime>\n#include<climits>\n#include<complex>\n#include<cassert>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define sz(x) (int)((x).size())\n#define all(x) x.begin(),x.end()\n#define clr(x) memset((x),0,sizeof(x))\n#define cdp(x) memset((x),-1,sizeof(x))\n#define rep(i,n) for (i=0;i<n;i++)\n#define Rep(i,a,b) for (i=a;i<=b;i++)\n#define ff(i,x) for (i=start[x];i!=-1;i=a[i].next)\n#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)\nusing namespace std;\nconst double eps=1e-8;\nconst double pi=acos(-1.0);\nint dblcmp(double d){if (fabs(d)<eps)return 0;return d>eps?1:-1;}\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\ntypedef vector<pii> vpi;\nconst ll mod=1000000007LL;\nll a[]={1, 3, 15, 133, 2025, 37851, 1030367, 36362925};\nint n;\nint main()\n{\n    int i,j,k;\n    cin>>n;\n    if (n%2==0)\n    {\n        puts(\"0\");\n        return 0;\n    }\n    int p=(n+1)/2-1;\n    ll x=a[p];\n    for (i=1;i<=n;i++)\n    {\n        x*=(ll)i;\n        x%=mod;\n    }\n    cout<<x<<endl;\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "combinatorics",
        "dp",
        "implementation",
        "meet-in-the-middle"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Permutation Sum.json",
    "editorial_link": "https://codeforces.com//blog/entry/7093",
    "editorial": "For a start, describe bruteforce solution. Firstly, we will always\r\nassume, that is identity permutation, that is . In this case, the answer\r\nshould be multiplied by . Or in other way your bruteforce will not be\r\ncounted. Secondly, using our bruteforce we can see, that for even the\r\nanswer is . What do you also need to get accepted? First case is to\r\ncalculate answers for all on your computer and write them in constant\r\narray. In other words you can make precalc. Second case is to make you\r\nsolution faster. The soltuion using meet-in-the-middle idea works fast\r\nfor . If you remember that for even answer is then you can get accepted\r\nusing such solution. But other simple bruteforces and dynamic\r\nprogrammings on maps work slower than seconds.\r\n",
    "hint": []
}