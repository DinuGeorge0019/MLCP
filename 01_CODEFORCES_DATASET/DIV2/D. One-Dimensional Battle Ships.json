{
    "link": "https://codeforces.com//contest/567/problem/D",
    "problemId": "32463",
    "problem_idx": "D",
    "shortId": "567D",
    "contest_number": "567",
    "problem_submissions": {
        "E": [
            12368419,
            12374631,
            12397425,
            12788088,
            12389152,
            12406146
        ],
        "D": [
            12361936,
            12364905,
            12366026,
            12367144,
            12362999,
            12362187,
            12362197,
            12363830,
            12363930,
            12363691,
            12364368,
            12363078,
            12362951,
            12369923,
            12364411,
            12364518,
            12365344,
            12364031,
            12364332
        ],
        "C": [
            12358359,
            12361761,
            12364757,
            12364566,
            12375712,
            12357726,
            12357396,
            12357507,
            12355472,
            12358430,
            12360526,
            12359721,
            12359102,
            12360618,
            12360834,
            12358973,
            12358889,
            12361330
        ],
        "B": [
            12356896,
            12358133,
            12362101,
            12361060,
            12355833,
            12356064,
            12358845,
            12355641,
            12356983,
            12356330,
            12357412,
            12355553,
            12354653,
            12356634,
            12358468,
            12356890,
            12356104,
            12359549
        ],
        "A": [
            12353500,
            12353898,
            12359353,
            12355278,
            12353802,
            12353454,
            12354645,
            12353575,
            12353588,
            12353804,
            12354250,
            12353515,
            12353505,
            12353940,
            12356166,
            12354753,
            12353585,
            12355460
        ],
        "F": [
            12373751,
            12373972,
            12370851,
            12374943
        ]
    },
    "name": "D. One-Dimensional Battle Ships",
    "statement": "Alice and Bob love playing one-dimensional battle ships. They play on\r\nthe field in the form of a line consisting of square cells (that is, on\r\na table).At the beginning of the game Alice puts ships on the field\r\nwithout telling their positions to Bob. Each ship looks as a rectangle\r\n(that is, it occupies a sequence of consecutive squares of the field).\r\nThe ships cannot intersect and even touch each other.After that Bob\r\nmakes a sequence of \"shots\". He names cells of the field and Alice\r\neither says that the cell is empty (\"miss\"), or that the cell belongs to\r\nsome ship (\"hit\").But here\u2019s the problem! Alice like to cheat. May be\r\nthat is why she responds to each Bob\u2019s move with a \"miss\". Help Bob\r\ncatch Alice cheating find Bob\u2019s first move, such that after it you can\r\nbe sure that Alice cheated.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <set>\n#include <map>\n#include <queue>\n#include <ctime>\n\n#define pb push_back\n#define ll long long\n#define mp make_pair\n#define f first\n#define s second\n#define pii pair < int, int >\n#define ull unsigned long long\n#define pll pair < ll, ll >\n#define forit(s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it ++)\n#define all(s) s.begin(), s.end()\n\nconst int inf = (1ll << 31) - 1;\nconst int maxn = (int) 1e5 + 10;\n\nusing namespace std;\n\nset < int > S;\nint n, k, a, m;\nint sum;\nint dp[200200];\n\nint calc(int len){\n    if(len < a) return 0;\n    int &res = dp[len];\n    if( res != -1) return res;\n    res = calc(len - a - 1) + 1;\n    return res;\n}\n\nint main () {\n    #ifdef LOCAL\n    freopen (\"a.in\", \"r\", stdin);\n    freopen (\"a.out\", \"w\", stdout);\n    #endif\n    scanf(\"%d %d %d\\n%d\\n\", &n, &k, &a, &m);\n    memset(dp, -1, sizeof dp);\n    sum = calc(n);\n    S.insert(0);\n    S.insert(n + 1);\n    for(int i = 0, x; i < m; ++i){\n        scanf(\"%d\", &x);\n        set < int > :: iterator it = S.lower_bound(x);\n        int r = *it;\n        it--;\n        int l = *it;\n        sum -= calc( r - l - 1);\n        sum += calc( r - x - 1);\n        sum += calc( x - l - 1);\n        if(sum < k){\n            cout << i + 1 << endl;\n            return 0;\n        }\n        S.insert(x);\n    }\n    cout << -1 << endl;\n\n\n\n\n    #ifdef LOCAL\n    cerr << 1.0 * clock() / CLOCKS_PER_SEC << \" s.\\n\";\n    #endif\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "greedy",
        "sortings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. One-Dimensional Battle Ships.json",
    "editorial_link": "https://codeforces.com//blog/entry/19604",
    "editorial": "First, we should understand when the game ends. It will happen when on\r\nthe -sized board it will be impossible to place ships of size . For\r\nsegment with length we could count the maximum number of ships with size\r\nthat could be placed on it. Each ship occupies cells, except the last\r\nship. Thus, for segment with length the formula will look like (we add\r\n\"fictive\" cell to cells to consider the last ship cell). This way, for\r\nsegment the formula should be . For solving the problem we should store\r\nall the segments which has no \u00e2\u0080\u009dfree\u00e2\u0080\u009d cells (none of them was shooted).\r\nOne could use () for that purpose. This way, before the shooting, there\r\nwill be only one segment . Also we will store current maximum number of\r\nships we could place on a board. Before the shooting it is equal to .\r\nWith every shoot in cell we should find the segment containing shooted\r\ncell (let it be ), we should update segment set. First, we should delete\r\nsegment. It means we should decrease current maximum number of ships by\r\nand delete it from the set. Next, we need to add segments and to the set\r\n(they may not be correct, so you may need to add only one segments or do\r\nnot add segments at all) and update the maximum number of ships\r\nproperly. We should process shoots one by one, and when the maximum\r\nnumber of ships will become lesser than , we must output the answer. If\r\nthat never happen, output . Author solution\r\n"
}