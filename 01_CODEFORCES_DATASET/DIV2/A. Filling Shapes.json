{
    "link": "https://codeforces.com//contest/1182/problem/A",
    "problemId": "356986",
    "problem_idx": "A",
    "shortId": "1182A",
    "contest_number": "1182",
    "problem_submissions": {
        "D": [
            55455650,
            55586970,
            55459316,
            55455659,
            55458949,
            55453924,
            55478512,
            55482188,
            55498428,
            55481213,
            55567538,
            55453786
        ],
        "E": [
            55450747,
            55461164,
            55449899,
            55449075,
            55460684,
            55454104,
            55453180,
            55453677,
            55453916,
            55451090,
            55454249,
            55453623,
            55476218,
            55446106,
            55449885,
            55454784,
            55483027,
            55456083,
            55457367,
            55456526
        ],
        "A": [
            55445533,
            55434238,
            55434241,
            55436061,
            55434955,
            55434411,
            55437033,
            55434181,
            55435131,
            55435071,
            55434914,
            55434583,
            55476206,
            55434538,
            55436427,
            55434458,
            55434180,
            55434233,
            55434292,
            55434474
        ],
        "B": [
            55445010,
            55437924,
            55440985,
            55440064,
            55439189,
            55438618,
            55443275,
            55439911,
            55437513,
            55438913,
            55441336,
            55438725,
            55438778,
            55476210,
            55439290,
            55442014,
            55440569,
            55438740,
            55438330,
            55438657,
            55438254
        ],
        "C": [
            55442056,
            55444294,
            55448723,
            55461519,
            55444763,
            55447324,
            55449390,
            55446594,
            55444945,
            55447149,
            55449216,
            55447861,
            55449136,
            55476215,
            55459225,
            55455453,
            55447166,
            55483042,
            55444199,
            55447099,
            55446909,
            55445149
        ],
        "F": [
            55479857
        ]
    },
    "name": "A. Filling Shapes",
    "statement": "You have a given integer n. Find the number of ways to fill all 3\r\ntimes n tiles with the shape described in the picture below. Upon\r\nfilling, no empty spaces are allowed. Shapes cannot overlap. This\r\npicture describes when n = 4. The left one is the shape and the right\r\none is 3\r\ntimes n tiles.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<pii> vpii;\ntypedef map<int,int> mii;\n#define itr iterator\n\n\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%lld\\n\",n&1?0:(1ll<<n/2));\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Filling Shapes.json",
    "editorial_link": "https://codeforces.com//blog/entry/67614",
    "editorial": "If you want to have no empty spaces on tiles, you should fill leftmost\r\nbottom tile. Then you have only 2 choices; Both cases force you to group\r\nleftmost tiles and fill. By this fact, we should group each tiles and\r\nfill independently. So the answer is if is odd, then the answer is\r\n(impossible), otherwise, the answer is .Time complexity is with bit\r\noperation or with iteration.\r\n"
}