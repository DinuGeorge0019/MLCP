{
    "link": "https://codeforces.com//contest/141/problem/E",
    "problemId": "749",
    "problem_idx": "E",
    "shortId": "141E",
    "contest_number": "141",
    "problem_submissions": {
        "D": [
            1025243,
            1022766,
            1022505,
            1022637,
            1022105,
            1022584,
            1047488,
            1023184,
            1044430
        ],
        "E": [
            1021955,
            1021949,
            1679914,
            1679889,
            1679868,
            1025484
        ],
        "C": [
            1020295,
            1020537,
            1020738,
            1019845,
            1021214,
            1023402,
            1019630,
            1020831,
            1019576,
            1019514,
            1020109,
            1019778,
            1019345,
            1020372,
            1020912,
            1020409,
            1020232,
            1020654,
            1020722
        ],
        "B": [
            1019192,
            1022517,
            1019188,
            1018654,
            1019147,
            1018859,
            1024115,
            1019030,
            1018785,
            1020350,
            1018726,
            1019903,
            1019068,
            1018867,
            1019239,
            1019023,
            1019215,
            1019103
        ],
        "A": [
            1018140,
            1022790,
            1017901,
            1019131,
            1018196,
            1017610,
            17012370,
            1017739,
            1018174,
            1017967,
            1018258,
            1017762,
            1017651,
            1018509,
            1018016,
            1017685,
            1018122,
            1017780,
            1017862,
            1018064
        ]
    },
    "name": "E. Clearing Up",
    "statement": "After Santa Claus and his assistant Elf delivered all the presents and\r\nmade all the wishes come true, they returned to the North Pole and found\r\nout that it is all covered with snow. Both of them were quite tired and\r\nthey decided only to remove the snow from the roads connecting huts. The\r\nNorth Pole has huts connected with roads. One can go along the roads in\r\nboth directions. The Elf offered to split: Santa Claus will clear up the\r\nwide roads and the Elf will tread out the narrow roads. For each road\r\nthey decided who will clear it: Santa Claus or the Elf. To minimize the\r\nefforts they decided to clear the road so as to fulfill both those\r\nconditions: between any two huts should exist along the cleared roads;\r\nSanta Claus and the Elf should clear the same number of roads. At this\r\npoint Santa Claus and his assistant Elf wondered which roads should they\r\nclear up?\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\n#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <iostream>\n#include <sstream>\n#include <algorithm>\n#include <iterator>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair< int, int > PRII;\ntypedef pair< double ,double > PRDD;\ntypedef vector< string > VS;\ntypedef vector< int > VI;\n\n#define Size(a) ((int)a.size())\n#define sqr(x) ((x)*(x))\n#define lowbit(x) ((x)&(-(x)))\n\n#define x first\n#define y second\n#define p_b push_back\n#define m_p make_pair\n#define oo 1000000000\n#define eps 1e-12\nconst double pi = acos(-1.0);\n\n#define maxn 1000 + 10\n#define maxm 100000 + 10\n\nint n,m,m1 = 0,m2 = 0;\nint e1[maxm][3],e2[maxm][3],used[maxm];\nint fa[maxn];\n\nint getfa( int i ) { return fa[i] == i ? i : fa[i] = getfa(fa[i]); }\n\nint main()\n{\n    int i,u,v,t = 0;\n\tchar ch;\n    \n\tscanf(\"%d%d\",&n,&m);\n\tfor( i = 1 ; i <= m ; ++i )\n\t\t{\n\t\t\tscanf(\"%d%d %c\",&u,&v,&ch);\n\t\t\tif( ch == 'S' )\n\t\t\t\t++m1, e1[m1][0] = u, e1[m1][1] = v, e1[m1][2] = i;\n\t\t\tif( ch == 'M' )\n\t\t\t\t++m2, e2[m2][0] = u, e2[m2][1] = v, e2[m2][2] = i;\n\t\t}\n\n\tif( !(n & 1) || m1 < (n-1)/2 || m2 < (n-1)/2 )\n\t\tprintf(\"-1\\n\");\n\telse\n\t\t{\n\t\t\tfor( i = 1 ; i <= n ; ++i )\n\t\t\t\tfa[i] = i;\n\t\t\tfor( i = 1 ; i <= m1 ; ++i )\n\t\t\t\t{\n\t\t\t\t\tu = getfa(e1[i][0]);\n\t\t\t\t\tv = getfa(e1[i][1]);\n\t\t\t\t\tfa[u] = v;\n\t\t\t\t}\n\t\t\tfor( i = 1 ; i <= m2 ; ++i )\n\t\t\t\t{\n\t\t\t\t\tu = getfa(e2[i][0]);\n\t\t\t\t\tv = getfa(e2[i][1]);\n\t\t\t\t\tif( u != v )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t++t;\n\t\t\t\t\t\t\tfa[u] = v;\n\t\t\t\t\t\t\tused[e2[i][2]] = i;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tif( t > (n-1)/2 )\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfor( i = 1 ; i <= n ; ++i )\n\t\t\t\t\t\tfa[i] = i;\n\t\t\t\t\tfor( i = 1 ; i <= m ; ++i )\n\t\t\t\t\t\tif( used[i] )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tu = getfa(e2[used[i]][0]);\n\t\t\t\t\t\t\t\tv = getfa(e2[used[i]][1]);\n\t\t\t\t\t\t\t\tfa[u] = v;\n\t\t\t\t\t\t\t}\n\t\t\t\t\tfor( i = 1 ; i <= m2 ; ++i )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tu = getfa(e2[i][0]);\n\t\t\t\t\t\t\tv = getfa(e2[i][1]);\n\t\t\t\t\t\t\tif( u != v && t < (n-1)/2 )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t++t;\n\t\t\t\t\t\t\t\t\tfa[u] = v;\n\t\t\t\t\t\t\t\t\tused[e2[i][2]] = i;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\tif( t < (n-1)/2 )\n\t\t\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor( i = 1 ; i <= m1 ; ++i )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tu = getfa(e1[i][0]);\n\t\t\t\t\t\t\t\t\tv = getfa(e1[i][1]);\n\t\t\t\t\t\t\t\t\tif( u != v )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t++t;\n\t\t\t\t\t\t\t\t\t\t\tfa[u] = v;\n\t\t\t\t\t\t\t\t\t\t\tused[e1[i][2]] = i;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif( t < n-1 )\n\t\t\t\t\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprintf(\"%d\\n\",t);\n\t\t\t\t\t\t\t\t\tfor( i = 1 ; i <= m ; ++i )\n\t\t\t\t\t\t\t\t\t\tif( used[i] )\n\t\t\t\t\t\t\t\t\t\t\tprintf(\"%d%c\",i,--t?' ':'\\n');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dp",
        "dsu",
        "graphs"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Clearing Up.json",
    "editorial_link": "https://codeforces.com//blog/entry/3571",
    "editorial": "In this problem we must find the minimum spanning tree, in which the half of edges are marked with letter 'S'.\n\nThere are  n?-?1 edges in this tree, because of it if n is even then the answer is \"-1\".\n\nLet's delete from the given graph all S-edges. And there are cnt components in obtained graph. For making this graph be connected we must add cnt?-?1 edges or more, that's why if cnt?-?1?>?(n?-?1)?/?2 the answer is \"-1\". Then we find cnt?-?1 S-edges, that we must add to the graph, so that it become connected. If cnt?-?1?<?(n?-?1)?/?2 then we will try to add in this set of edges another S-edges, so that the S-edges don't make circle. We must do all of this analogically to Kruskal's algorithm of finding a minimum spanning tree. If we could get a set of S-edges of (n?-?1)?/?2 elements, that there are exactly cnt?-?1 edges and no S-circles, then the answer exists, Then we must add to this set (n?-?1)?/?2 M-edges, that forms with our set of edges the minimum spanning tree, it must be done analogically with Kruskal's algorithm."
}