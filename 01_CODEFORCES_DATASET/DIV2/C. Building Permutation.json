{
    "link": "https://codeforces.com//contest/285/problem/C",
    "problemId": "2757",
    "problem_idx": "C",
    "shortId": "285C",
    "contest_number": "285",
    "problem_submissions": {
        "D": [
            3371037,
            3370625,
            3370823,
            3372478,
            3371850,
            3371021,
            3371148,
            3371736,
            3371740,
            3371775,
            3371705,
            3372534,
            3374253,
            3372500,
            3373167,
            3372249,
            3372418,
            3372090,
            3372165
        ],
        "B": [
            3367282,
            3367078,
            3367096,
            3368120,
            3368239,
            3368103,
            3368574,
            3367927,
            3366943,
            3368403,
            3368966,
            3366597,
            3368435,
            3368190,
            3370454,
            3368505,
            3368759,
            3368536,
            3367749
        ],
        "C": [
            3366599,
            3367784,
            3367644,
            3367061,
            3368999,
            3366839,
            3367511,
            3367173,
            3368036,
            3367341,
            3367574,
            3367042,
            3367218,
            3366730,
            3369795,
            3367285,
            3366926,
            3366924,
            3368674
        ],
        "A": [
            3366089,
            3366128,
            3366162,
            3369207,
            3366707,
            3366322,
            3366804,
            3366259,
            3366105,
            3366337,
            3366390,
            3366085,
            3366579,
            3366287,
            3370052,
            3366946,
            3366410,
            3366150,
            3366484
        ]
    },
    "name": "C. Building Permutation",
    "statement": "You have a sequence of integers . In one move, you are allowed to\r\ndecrease or increase any number by one. Count the minimum number of\r\nmoves, needed to build a permutation from this sequence.\r\n",
    "solutions": [
        "#include<vector>\n#include<list>\n#include<map>\n#include<set>\n#include<deque>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<algorithm>\n#include<functional>\n#include<numeric>\n#include<utility>\n#include<iostream>\n#include<sstream>\n#include<iomanip>\n#include<cmath>\n#include<cstdlib>\n#include<cctype>\n#include<string>\n#include<cstring>\n#include<cstdio>\n#include<ctime>\n#include<climits>\n#include<complex>\n#include<cassert>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define sz(x) (int)((x).size())\n#define all(x) x.begin(),x.end()\n#define clr(x) memset((x),0,sizeof(x))\n#define cdp(x) memset((x),-1,sizeof(x))\n#define rep(i,n) for (i=0;i<n;i++)\n#define Rep(i,a,b) for (i=a;i<=b;i++)\n#define ff(i,x) for (i=start[x];i!=-1;i=a[i].next)\n#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)\nusing namespace std;\nconst double eps=1e-8;\nconst double pi=acos(-1.0);\nint dblcmp(double d){if (fabs(d)<eps)return 0;return d>eps?1:-1;}\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\ntypedef vector<pii> vpi;\nint n,a[311111];\nint main()\n{\n\tint i,j,k;\n\tcin>>n;\n\tfor (i=0;i<n;i++)cin>>a[i];\n\tsort(a,a+n);\n\tll ans=0;\n\tfor (i=0;i<n;i++)\n\t{\n\t\tans+=(ll)abs(i+1-a[i]);\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Building Permutation.json",
    "editorial_link": "https://codeforces.com//blog/entry/7093",
    "editorial": "The solution of the problem is rather simple. Sort all integers and then\r\nmake from integer integer , from integer integer and so on. So, integer\r\nadds to the answer the value . The answer should be count in 64-bit\r\ntype. You can simply guess why such solution is correct.\r\n"
}