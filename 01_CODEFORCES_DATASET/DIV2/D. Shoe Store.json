{
    "link": "https://codeforces.com//contest/166/problem/D",
    "problemId": "1042",
    "problem_idx": "D",
    "shortId": "166D",
    "contest_number": "166",
    "problem_submissions": {
        "D": [
            1396659,
            1395820,
            1401592,
            1396051,
            1397210
        ],
        "B": [
            1395005,
            1394804,
            1392115,
            1394417,
            1395521,
            1396164,
            1392917,
            1395627,
            1396717,
            1394631,
            1395100,
            1394589,
            1396975,
            1397293
        ],
        "C": [
            1392257,
            1391396,
            1392030,
            1393877,
            1393945,
            1392242,
            1390459,
            1391422,
            1391954,
            1395935,
            1394755,
            1392498,
            1394730,
            1392841,
            1393241,
            1392725
        ],
        "E": [
            1390755,
            1392062,
            1391036,
            1395303,
            1394970,
            1391365,
            1391505,
            1392099,
            1390858,
            1394891,
            1391571,
            1391330,
            1391965,
            1393022,
            1397588,
            1391462,
            1390747
        ],
        "A": [
            1389902,
            1389901,
            1390096,
            1390092,
            1390420,
            1390228,
            1392273,
            1389894,
            1390237,
            1390485,
            1391136,
            1389957,
            1390738,
            1389907,
            1389972,
            1389815,
            1389969
        ]
    },
    "name": "D. Shoe Store",
    "statement": "The warehouse in your shop has shoe pairs. Each pair is characterized by\r\ntwo integers: its price and its size . We know that on this very day all\r\nnumbers are different, that is, there is no more than one pair of each\r\nsize.The shop has customers who came at the same time. The customer\r\nnumber has money and the size of his feet equals . The customer number\r\ncan buy the pair number , if , and also if or ; that is, it is necessary\r\nthat he has enough money to pay for the shoes. It is also necessary that\r\nthe size of his feet equals to or is less by than the size of the shoes\r\nhe chooses.Your task is to sell some customers pairs of shoes (a pair\r\nper person) so as to maximize the sum of the sold pairs that is, the\r\nprofit. It is guaranteed that each customer buys no more than one pair\r\nand each pair will be bought by no more than one customer.\r\n",
    "solutions": [
        "#pragma comment(linker, \"/stack:64000000\")\n#include <algorithm>\n#include <iostream>\n#include <cassert>\n#include <climits>\n#include <utility>\n#include <cstdlib>\n#include <cstdio>\n#include <cstring>\n#include <memory.h>\n#include <vector>\n#include <bitset>\n#include <string>\n#include <deque>\n#include <queue>\n#include <ctime>\n#include <set>\n#include <map>\n#include <deque>\n#include <stack>\n#include <cmath>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)\n#define for1(i, n) for (int i = 1; i <= int(n); i++)\n#define fore(i, l, r) for (int i = int(l); i < int(r); i++)\n#define all(a) (a).begin(), (a).end()\n#define sz(a) int((a).size())\n#define pb push_back\n#define pii pair <int, int>\n#define vi vector <int>\n#define mp make_pair\n\ntemplate <typename X> inline X abs (const X &a) {return a < 0? -a: a;}\ntemplate <typename X> inline X sqr (const X &a) {return a * a;}\n\nconst int INF = INT_MAX / 2;\nconst ll INF64 = LLONG_MAX / 2LL;\nconst ld EPS = 1E-9, PI = 3.1415926535897932384626433832795;\n\nconst int N = 2 * 100 * 1000 + 13;\n\nstruct obj\n{\n    int cost, size, num;\n    obj(){}\n    obj (int cost, int size, int num): cost (cost), size (size), num (num) {}\n};\n\ninline bool cmpSize (const obj &a, const obj &b)\n{\n    return a.size < b.size;\n}\n\ninline bool cmpCost(const obj &a, const obj &b)\n{\n    return a.cost > b.cost;\n}\n\nvector <int> g[N];\nint mt[N];\nbool used[N];\n\nbool khun (int v)\n{\n    if (used[v])\n        return false;\n\n    used[v] = true;\n    forn (i, sz (g[v]))\n    {\n        int to = g[v][i];\n        if (mt[to] == -1 || khun (mt[to]))\n        {\n            mt[to] = v;\n            return true;\n        }\n    }\n\n    return false;\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.txt\", \"rt\", stdin);\n    freopen(\"output.txt\", \"wt\", stdout);\n#endif\n\n    int n, m;\n    obj a[N], b[N];\n\n    ll cost[N];\n    \n    cin >> n;\n    forn (i, n)\n    {\n        scanf (\"%d%d\", &a[i].cost, &a[i].size);\n        a[i].num = i;\n        cost[i] = a[i].cost;\n    }\n\n    sort (a, a + n, cmpSize);\n\n    cin >> m;\n    forn (i, m)\n    {\n        scanf (\"%d%d\", &b[i].cost, &b[i].size);\n        b[i].num = i;\n    }   \n\n    forn (i, m)\n    {\n        int idx = int (lower_bound (a, a + n, obj (-1, b[i].size, -1), cmpSize) - a);\n        \n        while (a[idx].size == b[i].size || a[idx].size == b[i].size + 1)\n        {\n            if (a[idx].cost <= b[i].cost)\n                g[a[idx].num].pb (b[i].num);\n\n            idx++;\n        }\n    }\n\n    sort (a, a + n, cmpCost);\n\n    memset (mt, -1, sizeof mt);\n\n    forn (i, n)\n    {\n        memset (used, false, sizeof used);\n        khun (a[i].num);\n    }\n\n    ll ans = 0LL;\n    vector <pii> res;\n\n    forn (i, m)\n    {\n        if (mt[i] == -1)\n            continue;\n\n        ans += cost[mt[i]];\n        res.pb (mp (i, mt[i]));\n    }\n\n    cout << ans << endl;\n    cout << sz (res) << endl;\n\n    forn (i, sz (res))\n        printf (\"%d %d\\n\", res[i].first + 1, res[i].second + 1);\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "graph matchings",
        "greedy",
        "sortings",
        "two pointers"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Shoe Store.json",
    "editorial_link": "https://codeforces.com//blog/entry/4173",
    "editorial": "Let\u00e2\u0080\u0099s sort the people by decreasing of shoes size. Observe that when\r\nconsidering the -th man we are interested in no more than 2 pairs of\r\nshoes: with size and . It allows solving with dynamics. The state will\r\nbe (the number of first unconsidered man , is pair of shoes with size\r\navailable, is pair of shoes with size + 1 available). You have 3\r\noptions: leave the -th man without shoes or sell him a pair of shoes of\r\none of suitable size (if available).\r\n"
}