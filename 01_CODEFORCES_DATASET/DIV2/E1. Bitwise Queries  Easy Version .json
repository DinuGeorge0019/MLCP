{
    "link": "https://codeforces.com//contest/1451/problem/E1",
    "problemId": "804801",
    "problem_idx": "E1",
    "shortId": "1451E1",
    "contest_number": "1451",
    "problem_submissions": {
        "E2": [
            99164666,
            99162733,
            99165925,
            99161646,
            99162275,
            99166708,
            99177844,
            99187045,
            99171193,
            99180740,
            99166779,
            99593065,
            99167139,
            99212094,
            99180750,
            99167382,
            99164289,
            99170306,
            99166489,
            99174952,
            99170046
        ],
        "F": [
            99157323,
            99174334,
            99172211,
            99171897,
            99169968,
            99159796,
            99185696,
            99185913,
            99161260,
            99186126,
            101852088,
            99331616,
            99277099,
            99194656
        ],
        "E1": [
            99152747,
            99148819,
            99166585,
            99161270,
            99161762,
            99166831,
            99177296,
            99186671,
            99171561,
            99180543,
            99167295,
            99166954,
            99212099,
            99162460,
            99166940,
            99164739,
            99169616,
            99166777,
            99174556,
            99160048
        ],
        "B": [
            99139927,
            99129712,
            99127148,
            99131588,
            99133196,
            99173277,
            99136243,
            99144900,
            99179324,
            99132526,
            99124656,
            99134309,
            99211443,
            99138683,
            99129420,
            99135350,
            99127140,
            99142430,
            99125493,
            99136003
        ],
        "C": [
            99137455,
            99134588,
            99132257,
            99139076,
            99140138,
            99171814,
            99145789,
            99142052,
            99183664,
            99140696,
            99133474,
            99140223,
            99211399,
            99130542,
            99135361,
            99140699,
            99137433,
            99148880,
            99132285,
            99139620
        ],
        "D": [
            99133620,
            99140832,
            99142901,
            99155332,
            99185292,
            99169795,
            99166634,
            99139104,
            99176250,
            99168173,
            99147779,
            99144152,
            99212069,
            99141953,
            99149299,
            99150791,
            99154805,
            99153259,
            99147140,
            99162814
        ],
        "A": [
            99120654,
            99120423,
            99121791,
            99121810,
            99124507,
            99174166,
            99122054,
            99147895,
            99180245,
            99124534,
            99120454,
            99123326,
            99211324,
            99120847,
            99120693,
            99131959,
            99121501,
            99120866,
            99121109,
            99120621
        ]
    },
    "name": "E1. Bitwise Queries  Easy Version ",
    "statement": "Ridbit has a hidden array a of n integers which he wants Ashish to\r\nguess. Note that n is a . Ashish is allowed to ask three different types\r\nof queries. They are of the form i j: ask for the bitwise AND of\r\nelements a_i and a_j (1\r\nleq i, j\r\nle n, i\r\nneq j) i j: ask for the bitwise OR of elements a_i and a_j (1\r\nleq i, j\r\nle n, i\r\nneq j) i j: ask for the bitwise XOR of elements a_i and a_j (1\r\nleq i, j\r\nle n, i\r\nneq j) Can you help Ashish guess the elements of the array?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<ll,ll> ii;\ntypedef vector<int> vi;\n\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n\n#define unrequited_love ios_base::sync_with_stdio(0);cin.tie(0);\n\nint a[(1<<17)+1];\n\nint xr(int i, int j)\n{\n\ti++; j++;\n\tcout<<\"XOR \"<<i<<' '<<j<<'\\n';\n\tfflush(stdout);\n\tint x; cin>>x; \n\tif(x==-1) exit(0);\n\treturn x;\n}\n\nint ad(int i, int j)\n{\n\ti++; j++;\n\tcout<<\"AND \"<<i<<' '<<j<<'\\n';\n\tfflush(stdout);\n\tint x; cin>>x;\n\tif(x==-1) exit(0);\n\treturn x;\n}\n\nint o(int i, int j)\n{\n\ti++; j++;\n\tcout<<\"OR \"<<i<<' '<<j<<'\\n';\n\tfflush(stdout);\n\tint x; cin>>x; \n\tif(x==-1) exit(0);\n\treturn x;\n}\n\nint O[5][5];\n\nint main()\n{\n\tint n; cin>>n;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\ta[i]=xr(0,i);\n\t}\n\tfor(int i=0;i<3;i++)\n\t{\n\t\tfor(int j=i+1;j<3;j++)\n\t\t{\n\t\t\tO[i][j]=O[j][i]=o(i,j);\n\t\t}\n\t}\n\tfor(int i=0;i<n;i++) //try all possibilties\n\t{\n\t\tint b[3] = {};\n\t\tb[0]=i;\n\t\tb[1]=a[1]^b[0];\n\t\tb[2]=a[2]^b[0];\n\t\tint pos=1;\n\t\tfor(int j=0;j<3;j++)\n\t\t{\n\t\t\tfor(int k=j+1;k<3;k++)\n\t\t\t{\n\t\t\t\tif((b[j]|b[k])!=O[j][k])\n\t\t\t\t{\n\t\t\t\t\tpos=0; break;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\tif(!pos) break;\n\t\t}\n\t\tif(pos)\n\t\t{\n\t\t\tcout<<\"! \";\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t{\n\t\t\t\tcout<<(a[j]^i);\n\t\t\t\tif(j+1<n) cout<<' ';\n\t\t\t}\n\t\t\tcout<<'\\n'; fflush(stdout); return 0;\n\t\t}\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "interactive",
        "math"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E1. Bitwise Queries  Easy Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/84885",
    "editorial": "Pick and distinct and find , and by querying their XOR and AND values (\r\nqueries). This is a system of linear equation with three equations and\r\nthree variables and thus us a unique solution.Solving it you get the\r\nvalues of , , and . You can then get the remaining values using more\r\nqueries. This uses a total of queries. Realize that ( ) ( ) to reduce\r\nthe number of initial queries from to , for a total of queries.Lets take\r\na look at the properties of the 3 operations we have, specifically what\r\ninformation we can recover from it. AND - lossy in information about\r\nbits that are on, cant be used to recover the values OR - lossy in\r\ninformation about bits that are off, cant be used to recover the values\r\nXOR - lossless, a (a b) gives us b again.So clearly xor operations are\r\ngoing to be the core of recovering the values. If we can find one of the\r\nvalues, we can find the remaining values using xor queries.Lets try to\r\nthink about this for a operation for which we know how to obtain the\r\nindividual values - addition. If we had , and , we could just solve the\r\nthree linear equations to obtain the answer. If the -th bit is off in\r\nboth the numbers, xor and addition both give 0. If the -th bit is on in\r\nexactly oneof the numbers, xor and addition will both give . But what\r\nabout if the -th bit is on in the both the numbers? Then addition\r\ncontributes to the answer while xor contributes 0. Is there some way to\r\nrecover this value? Well if -th bit is on in the both the numbers, the\r\nAND will contribute to the answer. So we can realize that can be\r\nrewritten as (a ) + (a b).So now if we just choose positions , and , we\r\ncan obtain , and using XOR and AND operations. Furthermore we can\r\nrealize that is just ( ) ( ), so we can save one more operation.Now\r\nsolving the above simultaneous equations, we get = . Now for , is just (\r\n). We already calculated and for the previous step, and can calculate\r\nthe remaining xor values in steps.So in total we use exactly = queries,\r\nwhich is enough to get AC.\r\n"
}