{
    "link": "https://codeforces.com//contest/1186/problem/D",
    "problemId": "364217",
    "problem_idx": "D",
    "shortId": "1186D",
    "contest_number": "1186",
    "problem_submissions": {
        "F": [
            56216938,
            56221830,
            56221641,
            56218857,
            56211953,
            58409345,
            56299282,
            56213956,
            56210718,
            56211243,
            56212157,
            56210745,
            56214646,
            56218371,
            56217250,
            56211887,
            56220407,
            56219870
        ],
        "E": [
            56211447,
            56208778,
            56218701,
            56208813,
            58409358,
            56275284,
            56222796,
            56249700,
            56215465,
            56216547,
            56237690,
            56250633,
            56250552,
            56216656,
            56220314
        ],
        "D": [
            56200749,
            56201695,
            56206642,
            56211181,
            56202747,
            56201586,
            56205150,
            56206151,
            56203320,
            56252310,
            56249710,
            56202028,
            56208820,
            56205852,
            56200883,
            56207730,
            56204717,
            56257061,
            56203062,
            56206927,
            56205301,
            56202759
        ],
        "C": [
            56199249,
            56199765,
            56204054,
            56222663,
            56199984,
            56199510,
            56203530,
            56202685,
            56205514,
            56200910,
            56249725,
            56199768,
            56206169,
            56202363,
            56198182,
            56204569,
            56218666,
            56537912,
            56199932,
            56203944,
            56202070,
            56199969
        ],
        "A": [
            56196758,
            56193054,
            56194739,
            56209279,
            56193033,
            56192921,
            56196291,
            56192487,
            56193111,
            56249716,
            56195272,
            56199424,
            56197233,
            56193792,
            56192618,
            56195433,
            56193194,
            56192578,
            56193852,
            56194487
        ]
    },
    "name": "D. Vus the Cossack and Numbers",
    "statement": "Vus the Cossack has n real numbers a_i. It is known that the sum of all\r\nnumbers is equal to 0. He wants to choose a sequence b the size of which\r\nis n such that the sum of all numbers is 0 and each b_i is either\r\nlfloor a_i\r\nrfloor or\r\nlceil a_i\r\nrceil. In other words, b_i equals a_i rounded up or down. It is not\r\nnecessary to round to the nearest integer.For example, if a = [4.58413,\r\n1.22491, -2.10517, -3.70387], then b can be equal, for example, to [4,\r\n2, -2, -4]. Note that if a_i is an integer, then there is no difference\r\nbetween\r\nlfloor a_i\r\nrfloor and\r\nlceil a_i\r\nrceil, b_i will always be equal to a_i.Help Vus the Cossack find such\r\nsequence!\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdlib>\n#include <cstdio>\n#include <cstring>\n#include <cctype>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long ll;\nconst int MAXN=100005;\nconst double eps=1e-9;\n\nint n,a[MAXN];\nbool cc[MAXN];\n\nint main()\n{\n    #ifndef ONLINE_JUDGE\n    //freopen(\"code.in\",\"r\",stdin);\n    //freopen(\"code.out\",\"w\",stdout);\n    #endif\n    ll sum=0;\n    double x;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n    \tcin>>x;\n    \ta[i]=floor(x);\n    \tif(x-a[i]<=eps)cc[i]=1;\n    \tsum+=a[i];\n    }\n    for(int i=1;i<=n;i++)\n\t\tif(sum<0 && !cc[i]){printf(\"%d\\n\",a[i]+1);++sum;}\n\t\telse printf(\"%d\\n\",a[i]);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Vus the Cossack and Numbers.json",
    "editorial_link": "https://codeforces.com/blog/entry/68027",
    "editorial": "At first step we should floor all the elements of the array. Then we\r\niterate through the array and do the following: If sum of all the\r\nelements of array is equal to , then the algorithm stops. If the decimal\r\npart of was not equal to , then we assign Increase and repeat step 1.If\r\nyou are interested why this works, here is the proof:Every element of\r\nthe initial array can be expressed as . It is obvious that .Sum of all\r\nelements of array equals to , it means that: From equations above we can\r\nsee that is an integer. Every , and that means is smaller than number of\r\nelements that were floored, so we will always be able to achieve zero\r\nsum of array by adding to some of the numbers that were initially\r\nfloored.\r\n"
}