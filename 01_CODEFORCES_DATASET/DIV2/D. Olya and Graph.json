{"link": "https://codeforces.com//contest/305/problem/D", "problemId": "3009", "problem_idx": "D", "shortId": "305D", "contest_number": "305", "problem_submissions": {"A": [3743947, 3742003, 3738237, 3741973, 3743789, 3738630, 3746146, 3738359, 3738236, 3744732, 3739637, 3742465, 3737309, 3742105, 3736988, 3737540], "B": [3742919, 3738335, 3737895, 3738111, 3743327, 3736944, 3739543, 3740227, 3738192, 3744577, 3738563], "C": [3742188, 3739255, 3740066, 3739103, 3742647, 3740551, 3737297, 3744156, 3736706, 3738323, 3738124, 3738406, 3742683, 3739670, 3738219, 3742469, 3739915], "D": [3741403, 6159506, 3821844, 3746061, 3744660, 3745182, 3743300, 3747615], "E": [3738483, 3741561, 6006201, 3743278, 3743310, 3741203, 3762743, 3747416, 3743624, 3742904, 3751978]}, "name": "D. Olya and Graph", "statement": "Olya has got a directed non-weighted graph, consisting of vertexes and\r\nedges. We will consider that the graph vertexes are indexed from 1 to in\r\nsome manner. Then for any graph edge that goes from vertex to vertex the\r\nfollowing inequation holds: .Now Olya wonders, how many ways there are\r\nto add an arbitrary (possibly zero) number of edges to the graph so as\r\nthe following conditions were met: You can reach vertexes number from\r\nany vertex number . For any graph edge going from vertex to vertex the\r\nfollowing inequation fulfills: . There is at most one edge between any\r\ntwo vertexes. The shortest distance between the pair of vertexes , for\r\nwhich holds, equals edges. The shortest distance between the pair of\r\nvertexes , for which holds, equals either or edges. We will consider two\r\nways , if there is the pair of vertexes , such that first resulting\r\ngraph has an edge from to and the second one doesn\u2019t have it.Help Olya.\r\nAs the required number of ways can be rather large, print it modulo .\r\n", "solutions": ["/*\n* Problem: \n* Author: Leo Yu\n* Time: \n* State: SOLVED\n* Memo: \n*/\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <iostream>\n#include <algorithm>\n#include <ctime>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef long long LL;\ninline int\tread()\n{\n\tint x = 0; char ch = getchar(); bool positive = 1;\n\tfor (; ch < '0' || ch > '9'; ch = getchar())\tif (ch == '-')  positive = 0;\n\tfor (; ch >= '0' && ch <= '9'; ch = getchar())\tx = x * 10 + ch - '0';\n\treturn positive ? x : -x;\n}\n#define link Link\n\nconst int MOD = 1000000007;\nint N, M, K;\nbool\ta[1000006];\nint power[1000006];\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"a.in\", \"r\", stdin);\n\tfreopen(\"a.out\", \"w\", stdout);\n#endif\n\n\tpower[0] = 1;\n\tfor (int i = 1; i <= 1000000; ++ i)\tpower[i] = power[i - 1] * 2 % MOD;\n\tN = read(), M = read(), K = read();\n\tint mi = N + 1, ma = 0, tot = 0;\n\tfor (int i = 1; i <= M; ++ i)\n\t{\n\t\tint x = read(), y = read();\n\t\tif (y - x == 1)\tcontinue;\n\t\tif (y - x != K + 1)\treturn printf(\"0\\n\"), 0;\n\t\tmi = min(x, mi);\n\t\tma = max(x, ma);\n\t\ttot ++;\n\t}\n\tif (ma >= mi + K + 1)\n\t\treturn printf(\"0\\n\"), 0;\n\tif (mi == N + 1)\n\t{\n\t\tint ans = 1;\n\t\tfor (int i = 1; i + K + 1 <= N; ++ i)\n\t\t\tans = (ans + power[min(K, N - i - K - 1)]) % MOD;\n\t\tcout << ans << endl;\n\t\treturn 0;\n\t}\n\tint ans = 0;\n\tfor (int i = 1; i < mi; ++ i)\tif (i + K + 1 > ma)\n\t\tans = (ans + power[min(K, N - i - K - 1) - tot]) % MOD;\n\tans = (ans + power[min(K, N - mi - K - 1) - tot + 1]) % MOD;\n\tcout << ans << endl;\n\n\treturn 0;\n}\n\n"], "input": "", "output": "", "tags": ["combinatorics", "math"], "dificulty": "2200", "interactive": false}