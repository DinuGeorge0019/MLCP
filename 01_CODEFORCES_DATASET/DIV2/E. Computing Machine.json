{
    "link": "https://codeforces.com//contest/1978/problem/E",
    "problemId": "2700159",
    "problem_idx": "E",
    "shortId": "1978E",
    "contest_number": "1978",
    "problem_submissions": {
        "F": [
            266015924,
            266018575,
            266024125,
            266033740,
            266028083,
            266027710,
            266028585,
            266024095,
            266036440,
            266033576,
            266029665,
            266036412,
            266041436,
            266041844,
            266041967,
            266882750,
            266351108,
            266110975,
            266088026,
            266087920,
            266023524,
            266033401,
            266035217,
            266036624
        ],
        "E": [
            266000524,
            266001801,
            266009793,
            266004105,
            266012414,
            266016063,
            266008012,
            266015249,
            266006615,
            266014173,
            266017400,
            266020084,
            266012817,
            266011255,
            266015571,
            266032339,
            266012543,
            266023085,
            266019516
        ],
        "D": [
            265990967,
            265994660,
            265992821,
            265990827,
            266000702,
            266003653,
            265990714,
            266008157,
            265992101,
            265998993,
            266001887,
            266000172,
            266003373,
            265994305,
            266006281,
            266003246,
            266004799,
            266008989
        ],
        "C": [
            265985379,
            265985354,
            265985444,
            265986444,
            265986598,
            265993956,
            265998241,
            265999992,
            265986085,
            265988153,
            265994441,
            265990408,
            265984296,
            265987378,
            265999490,
            265992981,
            265996795,
            266000530
        ],
        "B": [
            265978142,
            265979065,
            265980009,
            265978941,
            265978322,
            265980965,
            265981356,
            265979492,
            265980232,
            265978357,
            265984882,
            265979643,
            265979302,
            265980231,
            265980858,
            265979553,
            265982486,
            265984445
        ],
        "A": [
            265974530,
            265975393,
            265974727,
            265975783,
            265974454,
            265975693,
            265975843,
            265974877,
            265974450,
            265974422,
            265984603,
            265974317,
            265974305,
            265975484,
            265974419,
            265975133,
            265977387,
            265984150
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/130527",
    "editorial": "Notice that it is advantageous to perform only operations of the first\r\ntype first, and then only operations of the second type. Perform all\r\npossible operations of the first type on the string and save it in .\r\nPerform all possible operations of the second type on the string , using\r\n, and save it in . Calculate the prefix sums on the string . Let be the\r\nlength of the query range. The answer to queries with small length\r\nranges () can be computed by simulating the proposed process. For longer\r\nstrings, it can be guaranteed that in the string with the maximum number\r\nof characters, will match the characters , their count can be found\r\nusing prefix sums. Separately check if , , , can become .\r\n",
    "name": "E. Computing Machine",
    "statement": "Sasha has two binary strings s and t of the same length n, consisting of\r\nthe characters and .There is also a computing machine that can perform\r\ntwo types of operations on binary strings a and b of the same length k:\r\nIf a_{i} = a_{i + 2} = , then you can assign b_{i + 1} := (1\r\nle i\r\nle k - 2). If b_{i} = b_{i + 2} = , then you can assign a_{i + 1} := (1\r\nle i\r\nle k - 2). Sasha became interested in the following: if we consider the\r\nstring a=s_ls_{l+1}\r\nldots s_r and the string b=t_lt_{l+1}\r\nldots t_r, what is the maximum number of characters in the string a that\r\ncan be obtained using the computing machine. Since Sasha is very curious\r\nbut lazy, it is up to you to answer this question for several pairs\r\n(l_i, r_i) that interest him.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>using namespace std;#define ll long long#define MP make_pairmt19937 rnd(time(0));const int MAXN=2e5+5;int n,q,ans[MAXN],lst[MAXN];char s[MAXN],t[MAXN],ss[MAXN];vector<pair<int,int> > vec[MAXN];struct BIT{int a[MAXN];void init(){for(int i=0;i<=n;i++)a[i]=0;}void add(int x,int d){while(x<=n)a[x]+=d,x+=(x&-x);return;}int ask(int x){int r=0;while(x)r+=a[x],x-=(x&-x);return r;}}T;void solve(){\tcin>>n>>(s+1)>>(t+1);\tfor(int i=1;i<=n;i++) ss[i]=s[i],vec[i].clear();\tT.init();\tcin>>q;\tfor(int i=1;i<=q;i++){\t\tint l,r;cin>>l>>r;\t\tvec[r].push_back(MP(l,i));\t}\tfor(int i=1;i<=n;i++){\t\tif(ss[i]=='1') T.add(i,1);\t\tif(t[i]=='1') lst[i]=i;\t\tif(i>=3&&t[i]=='1'&&t[i-2]=='1'&&ss[i-1]=='0'){\t\t\tss[i-1]='1';\t\t\tT.add(lst[i-2],1);\t\t}\t\tif(i>=3&&s[i]=='0'&&s[i-2]=='0'&&t[i-1]=='0'){\t\t\tt[i-1]='1';lst[i-1]=i-2;\t\t\tif(i>=4&&t[i-3]=='1'&&ss[i-2]=='0'){\t\t\t\tss[i-2]=1;\t\t\t\tT.add(lst[i-3],1);\t\t\t}\t\t}\t\tfor(auto it:vec[i]) ans[it.second]=T.ask(n)-T.ask(it.first-1);\t}\tfor(int i=1;i<=q;i++) cout<<ans[i]<<'\\n';}int main(){\tios::sync_with_stdio(false);\t// freopen(\"Otomachi_Una.in\",\"r\",stdin);\t// freopen(\"Otomachi_Una.out\",\"w\",stdout);\tint _;cin>>_;\twhile(_--) solve();\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "greedy",
        "implementation"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Computing Machine.json",
    "hint": []
}