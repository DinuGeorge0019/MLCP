{
    "link": "https://codeforces.com//contest/320/problem/E",
    "problemId": "3254",
    "problem_idx": "E",
    "shortId": "320E",
    "contest_number": "320",
    "problem_submissions": {
        "E": [
            3947787,
            3947991,
            3950460,
            3950423,
            3950804,
            3966579,
            3964196,
            3952271
        ],
        "D": [
            3945386,
            3948801,
            3947835,
            3948803,
            3948306,
            3946600,
            3946788,
            3946323,
            3947962,
            3948204,
            3949156,
            3949185,
            3948762,
            3950341,
            3948763,
            3948830,
            3949570,
            3949588,
            3948736
        ],
        "C": [
            3944304,
            3946570,
            3945118,
            3946127,
            3947195,
            3945029,
            3945376,
            3944923,
            3946219,
            3946207,
            3946206,
            3946330,
            3946413,
            3944056,
            3946806,
            3947161,
            3946298,
            3946947
        ],
        "B": [
            3943587,
            3943527,
            3944238,
            3945074,
            3946102,
            3943469,
            3943701,
            3946193,
            3944211,
            3944838,
            3944825,
            3944402,
            3943607,
            3945327,
            3945105,
            3945231,
            3944216,
            3944488,
            3945725
        ],
        "A": [
            3942664,
            3942547,
            3943263,
            3943194,
            3942602,
            3942567,
            3942605,
            3944414,
            3942943,
            3942965,
            3942610,
            3942731,
            3942604,
            3944341,
            3942932,
            3943709,
            3942746,
            3943368
        ]
    },
    "name": "E. Kalila and Dimna in the Logging Industry",
    "statement": "Kalila and Dimna are two jackals living in a huge jungle. One day they\r\ndecided to join a logging factory in order to make money. The manager of\r\nlogging factory wants them to go to the jungle and cut trees with\r\nheights . They bought a chain saw from a shop. Each time they use the\r\nchain saw on the tree number , they can decrease the height of this tree\r\nby one unit. Each time that Kalila and Dimna use the chain saw, they\r\nneed to recharge it. Cost of charging depends on the id of the trees\r\nwhich have been cut completely (a tree is cut completely if its height\r\nequal to 0). If the maximum id of a tree which has been cut completely\r\nis (the tree that have height in the beginning), then the cost of\r\ncharging the chain saw would be . If no tree is cut completely, Kalila\r\nand Dimna cannot charge the chain saw. The chainsaw is charged in the\r\nbeginning. We know that for each < , and and also and . Kalila and Dimna\r\nwant to cut all the trees completely, with minimum cost. They want you\r\nto help them! Will you?\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<fstream>\n#include<map>\n#include<ctime>\n#include<set>\n#include<queue>\n#include<cmath>\n#include<vector>\n#include<bitset>\n#include<functional>\n#define x first\n#define y second\n#define mp make_pair\n#define pb push_back\n#define REP(i,l,r) for((i)=(l);(i)<=(r);++(i))\n#define REP2(i,l,r) for((i)=(l);(i)!=(r);++(i))\nusing namespace std;\n\ntypedef long long LL;\ntypedef double ld;\n\nconst int MAX=100000+10;\n\nint n;\nLL a[MAX];\nLL b[MAX];\nLL sum[MAX];\nLL f[MAX];\nLL qa[MAX],qb[MAX],head,top;\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"input.txt\",\"r\",stdin);freopen(\"output.txt\",\"w\",stdout);\n#endif\n\tint i;\n\tscanf(\"%d\",&n);\n\tREP(i,1,n)\n\t{\n\t\tcin>>a[i];\n\t\tsum[i]=sum[i-1]+a[i];\n\t}\n\tREP(i,1,n)\n\t\tcin>>b[i];\n\tmemset(f,-1,sizeof f);\n\t//f[i]=f[j]+a[i]*b[j];\n\t//f[i]=a*x+b a\u9012\u51cf\n\t//a1*x+b1<a2*x+b2\n\t//x<(b2-b1)/(a1-a2)\n\tf[1]=0;\n\tqa[++top]=b[1];\n\tqb[top]=0;\n\thead=1;\n\tREP(i,2,n)\n\t{\n\t\tLL x=a[i];\n\t\twhile(head+1<=top && qa[head]*x+qb[head]>qa[head+1]*x+qb[head+1])\n\t\t\t++head;\n\t\tf[i]=min(qa[head]*x+qb[head],a[n]*b[1]);\n\t\twhile(top>=head+1 && ld(qa[top]-qa[top-1])/(qb[top]-qb[top-1])>ld(b[i]-qa[top])/(f[i]-qb[top]))\n\t\t\t--top;\n\t\tqa[++top]=b[i];\n\t\tqb[top]=f[i];\n\t}\n\tcout<<f[n]<<endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Kalila and Dimna in the Logging Industry.json",
    "editorial_link": "https://codeforces.com//blog/entry/8166",
    "editorial": "This problem is equal to finding the minimum cost to cut the last tree completely. Because any cutting operation can be done with no cost afterward. Let dpi be the minimum cost to cut the i-th tree completely. It's easy to figure out that we can calculate dpi if we know the index of the last tree which has been cut completely (j-th tree). Knowing this dpi would be equal to dpj?+?bjai. So dpi?=?minj?=?1..i?-?1(dpj?+?bjai).\n\nUsing the above information the problem has an easy dynamic programming solution in O(n2). There's a known method which can be used to improve recursive relations with similar form. It's called Convex Hull Trick."
}