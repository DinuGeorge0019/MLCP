{
    "link": "https://codeforces.com//contest/1369/problem/D",
    "problemId": "651258",
    "problem_idx": "D",
    "shortId": "1369D",
    "contest_number": "1369",
    "problem_submissions": {
        "F": [
            84805615,
            84815422,
            84821788,
            84848209,
            84808586,
            84845078,
            84819664,
            84809525
        ],
        "E": [
            84783653,
            84794541,
            84777094,
            84792178,
            84796407,
            84799473,
            84847985,
            84794191,
            84802657,
            84799608,
            84843231,
            84798901,
            84802992,
            84803891,
            84799522,
            84803293,
            84803734,
            84801605
        ],
        "D": [
            84774757,
            84783341,
            84767385,
            84777566,
            84781335,
            84780403,
            84783178,
            84780507,
            84786495,
            84784013,
            84784219,
            84785925,
            84784946,
            84790889,
            84787139,
            84785887,
            84796956,
            84790843
        ],
        "C": [
            84764211,
            84776491,
            85764231,
            85764174,
            84784880,
            84769031,
            84773069,
            84769214,
            84772926,
            84766954,
            84773427,
            84767072,
            84773264,
            84775000,
            84772759,
            84772359,
            84919485,
            84776351,
            84771759,
            84772941,
            84776880
        ],
        "B": [
            84758680,
            84760470,
            84777367,
            84762433,
            84762003,
            84761770,
            84766923,
            84760439,
            84763340,
            84761080,
            84766453,
            84765969,
            84767231,
            84765006,
            84759974,
            84762031,
            84767553,
            84769489
        ],
        "A": [
            84750967,
            84766185,
            84750778,
            84752543,
            84752490,
            84752217,
            84767956,
            84750544,
            84755659,
            84751856,
            84756195,
            84753655,
            84751015,
            84749918,
            84749358,
            84749254,
            84751162,
            84756777
        ]
    },
    "name": "D. TediousLee",
    "statement": "Let’s define a (RDB) of level n as a rooted tree constructed as\r\ndescribed below.A rooted dead bush of level 1 is a single vertex. To\r\nconstruct an RDB of level i we, at first, construct an RDB of level i-1,\r\nthen for each vertex u: if u has no children then we will add a single\r\nchild to it; if u has one child then we will add two children to it; if\r\nu has more than one child, then we will skip it. Let’s define a as a\r\nrooted tree with four vertices: one root vertex (called also as center)\r\nwith three children. It looks like a claw: Lee has a Rooted Dead Bush of\r\nlevel n. Initially, all vertices of his RDB are green.In one move, he\r\ncan choose a claw in his RDB, if all vertices in the claw are and all\r\nvertices of the claw are children of its center, then he colors the\r\nclaw’s vertices in yellow.He’d like to know the maximum number of yellow\r\nvertices he can achieve. Since the answer might be very large, print it\r\nmodulo 10^9+7.\r\n",
    "solutions": [
        "// You may love a girl deeply\n// but you can't express in it more than 7-8 inches...\n#include <bits/stdc++.h>\n\n#define pb push_back\n#define F first\n#define S second\n#define all(ass) ass.begin(), ass.end()\nusing namespace std;\n\ntypedef long long ll;\ntypedef string str;\ntypedef pair<ll, ll> pll;\n\nconst ll Mod = 1000000007;\nconst ll N = 2e6 + 85;\nconst ll Inf = 1e18;\nconst ll Log = 69;\n\nll dp[N];\nll dp2[N];\nll dp3[N];\nint main(){\n\tios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\tfor(int i = 3; i < N; i++){\n\t\tdp[i] = dp2[i - 1] + 2 * dp2[i - 2] + 4;\n\t\tdp2[i] = dp3[i - 1] + 2 * dp3[i - 2];\n\t\t//if(dp2[i] > dp[i]) cout << i <<'\\n';\n\t\t//cout << dp[i] << ' ' << dp2[i] << '\\n';\n\t\tif(i % 3 == 2) dp3[i] = dp2[i];\n\t\telse dp3[i] = dp[i];\n\t\t//dp3[i] = max(dp[i], dp2[i]);\n\t\t//if(dp2[i] > dp[i]) cout << i << '\\n';\n\t\tdp3[i] %= Mod;\n\t\tdp[i] %= Mod;\n\t\tdp2[i] %= Mod;\n\t}\n\t//return 0;\n\tll t;\n\tcin >> t;\n\tfor(int i = 0; i < t; i++){\n\t\tll n;\n\t\tcin >> n;\n\t\tcout << dp3[n] << '\\n';\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "graphs",
        "greedy",
        "math",
        "trees"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. TediousLee.json",
    "editorial_link": "https://codeforces.com//blog/entry/79235",
    "editorial": ":First realize that a RDB of level is consisted of a vertex (the root of\r\nthe RDB of level ) connected to the roots of two RDBs of level and a RDB\r\nof level . Now define equal to the answer for a RDB of level . Also\r\ndefine equal to if Lee can achieve yellow vertices in a RDB of level\r\nsuch that the root is green, and otherwise. Itâs easy to see that is\r\nequal to either or . If both and are equal to , then we can color the\r\nclaw rooted at the root of the RDB, then and . Also if either or is\r\nequal to then and .\r\n",
    "hint": []
}