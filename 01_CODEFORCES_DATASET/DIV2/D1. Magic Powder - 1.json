{
    "link": "https://codeforces.com//contest/670/problem/D1",
    "problemId": "59597",
    "problem_idx": "D1",
    "shortId": "670D1",
    "contest_number": "670",
    "problem_submissions": {
        "F": [
            17735920,
            17741947,
            17739838,
            17742147,
            17741489,
            17740480,
            17741509,
            17743043,
            17743802,
            17744174,
            17746158,
            17745379,
            17739547,
            17746721,
            17747076,
            17746214,
            17747355
        ],
        "E": [
            17730040,
            17731049,
            17733744,
            17731207,
            17733203,
            17735292,
            17734256,
            17735578,
            17734020,
            17735429,
            17736141,
            17737288,
            17746918,
            17736320,
            17739029,
            17736027,
            17737111
        ],
        "D2": [
            17725965,
            17728400,
            17727768,
            17728149,
            17727724,
            17733032,
            17727187,
            17728319,
            17727989,
            17724612,
            17728413,
            17731488,
            17730289,
            17730390,
            17731393,
            17765595,
            17733213
        ],
        "D1": [
            17725487,
            17728299,
            17727727,
            17728284,
            17727707,
            17732932,
            17727240,
            17728389,
            17728203,
            17724671,
            17728521,
            17731440,
            17730058,
            17729637,
            17731489,
            17727320,
            17732424
        ],
        "C": [
            17723024,
            17725897,
            17729270,
            17725892,
            17727606,
            17730842,
            17728142,
            17726419,
            17724258,
            17726720,
            17725246,
            17726826,
            17726494,
            17725465,
            17727248,
            17724877,
            17734108
        ],
        "B": [
            17721571,
            17724028,
            17723559,
            17722726,
            17722823,
            17729499,
            17722138,
            17722709,
            17722944,
            17727742,
            17722740,
            17724595,
            17723615,
            17722288,
            17723917,
            17722833,
            17723125
        ],
        "A": [
            17720663,
            17721845,
            17721356,
            17721364,
            17721787,
            17728607,
            17720913,
            17721102,
            17720788,
            17729012,
            17721057,
            17721708,
            17721392,
            17721888,
            17720937,
            17721414
        ]
    },
    "name": "D1. Magic Powder - 1",
    "statement": "Waking up in the morning, Apollinaria decided to bake cookies. To bake\r\none cookie, she needs ingredients, and for each ingredient she knows the\r\nvalue how many grams of this ingredient one needs to bake a cookie. To\r\nprepare one cookie Apollinaria needs to use all ingredients.Apollinaria\r\nhas gram of the -th ingredient. Also she has grams of a magic powder.\r\nEach gram of magic powder can be turned to exactly gram of any of the\r\ningredients and can be used for baking cookies.Your task is to determine\r\nthe maximum number of cookies, which Apollinaria is able to bake using\r\nthe ingredients that she has and the magic powder.\r\n",
    "solutions": [
        "#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <fstream>\n#include <cstdlib>\n#include <numeric>\n#include <iomanip>\n#include <cstdio>\n#include <cstring>\n#include <cassert>\n#include <vector>\n#include <math.h>\n#include <queue>\n#include <stack>\n#include <ctime>\n#include <set>\n#include <map>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n\ntemplate <typename T>\nT nextInt() {\n    T x = 0, p = 1;\n    char ch;\n    do { ch = getchar(); } while(ch <= ' ');\n    if (ch == '-') {\n        p = -1;\n        ch = getchar();\n    }\n    while(ch >= '0' && ch <= '9') {\n        x = x * 10 + (ch - '0');\n        ch = getchar();\n    }\n    return x * p;\n}\n\nconst int maxN = (int)1e5 + 10;\nconst int maxL = 17;\nconst int INF = (int)1e9;\nconst int mod = (int)1e9 + 7;\nconst ll LLINF = (ll)1e18;\n\n    int n, k;\n    vector <int> a, b;\n\nbool can(ll x) {\n    ll need = 0;\n    for (int i = 0; i < n; ++i) {\n        need += max(0LL, a[i] * 1LL * x - b[i]);\n        if (need >k) return false;\n    }\n    return need <= k;\n}\n\nint main() {\n\n  //  freopen(\"input.txt\", \"r\", stdin);\n  //  freopen(\"output.txt\", \"w\", stdout);\n    ios_base::sync_with_stdio(0);\n    cin >> n >> k;\n    a.resize(n);\n    b.resize(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    for (int i = 0; i < n; ++i) {\n        cin >> b[i];\n    }\n\n    ll l = 0, r = 4LL * INF;\n    for (int iter = 0; iter < 50; ++iter) {\n        ll m = (l + r) / 2;\n        if (can(m)) {\n            l = m;\n        } else {\n            r = m;\n        }\n    }\n    cout << l << '\\n';\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D1. Magic Powder - 1.json",
    "editorial_link": "https://codeforces.com//blog/entry/44715",
    "editorial": "This problem with small constraints can be solved in the following way.\r\nLetâs bake cookies one by one until it is possible. For every new cookie\r\nletâs calculate how many grams of the magic powder we need to bake it.\r\nFor this letâs brute all ingredients and for the ingredient number if\r\nletâs make , else letâs make and . When we bruted all ingredients if\r\nthan we canât bake more cookies. Else letâs make and go to bake new\r\ncookie.\r\n",
    "hint": []
}