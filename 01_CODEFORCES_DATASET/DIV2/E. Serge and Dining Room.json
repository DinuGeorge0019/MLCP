{"link": "https://codeforces.com//contest/1180/problem/E", "problemId": "361553", "problem_idx": "E", "shortId": "1180E", "contest_number": "1180", "problem_submissions": {"E": [55893859, 55894752, 55901354, 55899227, 55899601, 55901958, 55925264, 55926068, 55925665, 55901489, 233719923, 56137984], "D": [55886120, 55888146, 55895366, 55891739, 55901351, 55888912, 55886961, 55887441, 55889700, 55885693, 55885046, 55888982, 55895413, 55887827, 55888865, 55887449, 55890050, 55889347, 55889337, 55889598], "B": [55883680, 55881669, 55882390, 55902887, 55885746, 55928231, 55877920, 55878680, 55879245, 55879265, 55878648, 55878842, 55880598, 55879213, 55878902, 55880179, 55880226, 55880939, 55879031, 55878699], "C": [55881632, 55883944, 55885637, 55882803, 55884870, 55882898, 55883039, 55882359, 55884046, 55883397, 55882537, 55907439, 55883279, 55883175, 55884337, 55884299, 55883318, 55885078, 55882396, 55882286], "A": [55875261, 55875247, 55875638, 55875332, 55875345, 55875222, 55875465, 55875376, 55875312, 55875276, 55875257, 55875199, 55876007, 55875234, 55875346, 55875606, 55877781, 55876574, 55875619, 55875756]}, "name": "E. Serge and Dining Room", "statement": "Serge came to the school dining room and discovered that there is a big\r\nqueue here. There are m pupils in the queue. He\u2019s not sure now if he\r\nwants to wait until the queue will clear, so he wants to know which dish\r\nhe will receive if he does. As Serge is very tired, he asks you to\r\ncompute it instead of him.Initially there are n dishes with costs a_1,\r\na_2,\r\nldots, a_n. As you already know, there are the queue of m pupils who\r\nhave b_1,\r\nldots, b_m togrogs respectively (pupils are enumerated by queue order,\r\ni.e the first pupil in the queue has b_1 togrogs and the last one has\r\nb_m togrogs)Pupils think that the most expensive dish is the most\r\ndelicious one, so every pupil just buys the most expensive dish for\r\nwhich he has money (every dish has a single copy, so when a pupil has\r\nbought it nobody can buy it later), and if a pupil doesn\u2019t have money\r\nfor any dish, he just leaves the queue (so brutal capitalism...)But\r\nmoney isn\u2019t a problem at all for Serge, so Serge is buying the most\r\nexpensive dish if there is at least one remaining.Moreover, Serge\u2019s\r\nschool has a very unstable economic situation and the costs of some\r\ndishes or number of togrogs of some pupils can change. More formally,\r\nyou must process q queries: change a_i to x. It means that the price of\r\nthe i-th dish becomes x togrogs. change b_i to x. It means that the i-th\r\npupil in the queue has x togrogs now. Nobody leaves the queue during\r\nthose queries because a saleswoman is late.After every query, you must\r\ntell Serge price of the dish which he will buy if he has waited until\r\nthe queue is clear, or -1 if there are no dishes at this point,\r\naccording to rules described above.\r\n", "solutions": ["//#pragma comment(linker, \"/stack:200000000\")\n//#pragma GCC optimize(\"Ofast\")\n//#pragma GCC optimize(3)\n//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n//#pragma GCC target(\"sse3\",\"sse2\",\"sse\")\n//#pragma GCC target(\"avx\",\"sse4\",\"sse4.1\",\"sse4.2\",\"ssse3\")\n//#pragma GCC target(\"f16c\")\n//#pragma GCC optimize(\"inline\",\"fast-math\",\"unroll-loops\",\"no-stack-protector\")\n//#pragma GCC diagnostic error \"-fwhole-program\"\n//#pragma GCC diagnostic error \"-fcse-skip-blocks\"\n//#pragma GCC diagnostic error \"-funsafe-loop-optimizations\"\n//#pragma GCC diagnostic error \"-std=c++14\"\n#include \"bits/stdc++.h\"\n//#include \"ext/pb_ds/tree_policy.hpp\"\n//#include \"ext/pb_ds/assoc_container.hpp\"\n#define PB push_back\n#define PF push_front\n#define LB lower_bound\n#define UB upper_bound\n#define fr(x) freopen(x,\"r\",stdin)\n#define fw(x) freopen(x,\"w\",stdout)\n#define iout(x) printf(\"%d\\n\",x)\n#define lout(x) printf(\"%lld\\n\",x)\n#define REP(x,l,u) for(ll x = l;x<u;x++)\n#define RREP(x,l,u) for(ll x = l;x>=u;x--)\n#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())\n#define mst(x,a) memset(x,a,sizeof(x))\n#define all(a) begin(a),end(a)\n#define PII pair<int,int>\n#define PLL pair<ll,ll>\n#define MP make_pair\n#define lowbit(x) ((x)&(-(x)))\n#define lson (ind<<1)\n#define rson (ind<<1|1)\n#define se second\n#define fi first\n#define sz(x) ((int)x.size())\n#define EX0 exit(0);\n\ntypedef  long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ld;\nusing namespace std;\ntypedef vector<ll> VLL;\ntypedef vector<int> VI;\nconst int block_size = 320;\ntypedef complex<ll> point;\nconst ll mod = 1e9+7;\nconst ll inf = 1e9+7;\nconst ld eps = 1e-9;\nconst db PI = atan(1)*4;\ntemplate<typename T>\ninline int sign(const T&a) {if(a<0)return -1;if(a>0)return 1;return 0;}\nstring to_string(string s) {return '\"' + s + '\"';}string to_string(const char* s) {return to_string((string) s);}string to_string(bool b) {return (b ? \"true\" : \"false\");}template <typename A, typename B>string to_string(pair<A, B> p) {return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\";}template <typename A>string to_string(A v) {bool first = true;string res = \"{\";for (const auto &x : v) {if (!first) {res += \", \";}first = false;res += to_string(x);}res += \"}\";return res;}void debug_out() { cerr << endl; }template <typename Head, typename... Tail>void debug_out(Head H, Tail... T) {cerr << \" \" << to_string(H);debug_out(T...);}\n\n#ifndef ONLINE_JUDGE\n#define dbg(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n#else\n#define dbg(...) {}\n#endif\n\ntemplate<typename T,typename S>inline bool upmin(T&a,const S&b){return a>b?a=b,1:0;}\ntemplate<typename T,typename S>inline bool upmax(T&a,const S&b){return a<b?a=b,1:0;}\n\ntemplate<typename T> inline void in(T &x) {x = 0;T f = 1;char ch = getchar();while (!isdigit(ch)) {if (ch == '-') f = -1;ch = getchar();}while (isdigit(ch))  {x = x * 10 + ch - '0';ch = getchar();}x *= f;}\nll twop(int x) {return 1LL<<x;}\ntemplate<typename T>T MOD(T a, T m){a %= m;if (a < 0)a += m;return a;}\ntemplate<typename T>T inverse(T a, T m){a = MOD(a, m);if (a <= 1)return a;return MOD((1 - inverse(m, a) * m) / a, m);}template<typename A,typename B > inline void in(A&x,B&y) {in(x);in(y);}\ntemplate<typename A,typename B,typename C>inline void in(A&x,B&y,C&z) {in(x);in(y);in(z);}\ntemplate<typename A,typename B,typename C,typename D> inline void in(A&x,B&y,C&z,D&d) {in(x);in(y);in(z);in(d);}\ntemplate <typename T>T sqr(T x){return x*x;}\nll gcd(ll a,ll b){while(b!=0){a%=b;swap(a,b);}return a;}\nll fast(ll a,ll b,ll mod){ll ans = 1;while(b){if(b&1){b--;ans = ans * a % mod;}else{a = a * a % mod;b/=2;}}return ans%mod;}\n\n\n\nnamespace SOLVE {\n    const ll maxn = 300010;\n    ll s[maxn],b[maxn],val[1000010];\n    struct SegTree{\n        static const int maxn = 1000010;\n        \n        struct node{\n            int l,r;\n            int min_pref,sum;\n        };\n        \n        node no[maxn*4];\n        void push_up(int ind){\n            no[ind].min_pref = min(no[lson].min_pref+no[rson].sum, no[rson].min_pref);\n            no[ind].sum = no[lson].sum + no[rson].sum;\n        }\n        void push_down(int ind){\n        }\n        void build(int l,int r,int ind){\n            no[ind].l = l;\n            no[ind].r = r;\n            if(l == r){\n                no[ind].min_pref = val[l];\n                no[ind].sum = val[l];\n            }else{\n                int mid = (l+r)/2;\n                build(l,mid,lson);\n                build(mid+1,r,rson);\n                push_up(ind);\n            }\n        }\n        void update(int l,int r,int ind,int val){\n            if(l>no[ind].r || r<no[ind].l)return;\n            if(l<=no[ind].l && no[ind].r <= r){\n                no[ind].sum+=val;\n                no[ind].min_pref+=val;\n            }else{\n                push_down(ind);\n                update(l,r,lson,val);\n                update(l,r,rson,val);\n                push_up(ind);\n            }\n        }\n        void query(int ind,int& ans,int sum){\n            if(no[ind].l == no[ind].r){\n                ans = no[ind].l;\n                return;\n            }\n            if(no[rson].min_pref + sum < 0){\n                query(rson, ans, sum);\n            }else{\n                query(lson, ans, sum+no[rson].sum);\n            }\n        }\n    };\n    \n    SegTree tree;\n\n    void main(){\n        ll n,m,q;\n        in(n,m);\n        REP(i,1,n+1){\n            in(s[i]);\n            val[s[i]]--;\n        }\n        REP(i,1,m+1){\n            in(b[i]);\n            val[b[i]]++;\n        }\n        in(q);\n        tree.build(1, 1000000, 1);\n        while (q--) {\n            ll t,ind,val;\n            in(t,ind,val);\n            if(t == 1){\n                tree.update(s[ind], s[ind], 1, 1);\n                s[ind] = val;\n                tree.update(s[ind], s[ind], 1, -1);\n            }else{\n                tree.update(b[ind], b[ind], 1, -1);\n                b[ind] = val;\n                tree.update(b[ind], b[ind], 1, 1);\n            }\n            if(tree.no[1].min_pref >= 0){\n                puts(\"-1\");\n            }else{\n                int ans = -1;\n                tree.query(1, ans, 0);\n                iout(ans);\n            }\n//            REP(i,1,n+1)cout<<s[i]<<\" \";\n//            cout<<endl;\n//            REP(i,1,m+1)cout<<b[i]<<\" \";\n//            cout<<endl;\n        }\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n}\n\n\nsigned main() {\n#ifndef ONLINE_JUDGE\n    fr(\"/Users/zhangqingchuan/Desktop/cp/cp/input.txt\");\n    fw(\"/Users/zhangqingchuan/Desktop/cp/cp/output.txt\");\n#endif\n    \n    \n    \n    \n    \n    int t = 1;\n//    in(t);\n    while(t--){\n        SOLVE::main();\n\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n//    clock_t st = clock();\n//    while(clock() - st < 3.0 * CLOCKS_PER_SEC){\n//\n//    }\n    \n    \n    \n    \n    \n    \n    return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "math"], "dificulty": "2200", "interactive": false}