{"link": "https://codeforces.com//contest/909/problem/E", "problemId": "142271", "problem_idx": "E", "shortId": "909E", "contest_number": "909", "problem_submissions": {"D": [33703562, 33684475, 33687934, 33679960, 33681845, 33678239, 33681778, 33682813, 33684628, 33683979, 33684264, 33683734, 33682267, 33684172, 33684972, 33684951, 37837707, 33689232, 33685173], "C": [33702243, 33685781, 33688791, 33678737, 33677527, 33680778, 33679730, 33677867, 33678218, 33679090, 33681226, 33679711, 33679799, 33678914, 33682105, 33681294, 33679526, 33680909], "F": [33682616, 33683222, 33692268, 33694692, 33695944], "E": [33680057, 33686075, 33684461, 33682298, 33685101, 33681929, 33683773, 33684555, 33682566, 33680995, 33686514, 33687842, 33689439, 33687234, 33687184, 33690952, 33683720, 33689497], "B": [33678984, 33689620, 33681003, 33675642, 33677938, 33674594, 33675218, 33675981, 33675928, 33676067, 33676981, 33677469, 33675490, 33680062, 33675898, 33676219, 33677187], "A": [33675962, 33690137, 33674036, 33674451, 33674005, 33674337, 33674208, 33673945, 33674163, 33674088, 33674166, 33675518, 33673927, 33674572, 33673981, 33673915, 33676471]}, "name": "E. Coprocessor", "statement": "You are given a program you want to execute as a set of tasks organized\r\nin a dependency graph. The dependency graph is a directed acyclic graph:\r\neach task can depend on results of one or several other tasks, and there\r\nare no directed circular dependencies between tasks. A task can only be\r\nexecuted if all tasks it depends on have already completed.Some of the\r\ntasks in the graph can only be executed on a coprocessor, and the rest\r\ncan only be executed on the main processor. In one coprocessor call you\r\ncan send it a set of tasks which can only be executed on it. For each\r\ntask of the set, all tasks on which it depends must be either already\r\ncompleted or be included in the set. The main processor starts the\r\nprogram execution and gets the results of tasks executed on the\r\ncoprocessor automatically.Find the minimal number of coprocessor calls\r\nwhich are necessary to execute the given program.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace program\n{\n\tconst int MAXN = 100000;\n\tint n, m, tot, Deg[MAXN + 10], E[MAXN + 10];\n\tvector<int> R[MAXN + 10];\n\tqueue<int> Q0, Q1;\n\n\tvoid work()\n\t{\n\t\ttot = 0;\n\t\tscanf(\"%d%d\", &n, &m);\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tscanf(\"%d\", &E[i]);\n\t\tmemset(Deg, 0, sizeof(int) * n);\n\t\twhile(m--)\n\t\t{\n\t\t\tint u, v;\n\t\t\tscanf(\"%d%d\", &u, &v);\n\t\t\tR[v].push_back(u);\n\t\t\tDeg[u]++;\n\t\t}\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tif(!Deg[i])\n\t\t\t{\n\t\t\t\tif(!E[i])\n\t\t\t\t\tQ0.push(i);\n\t\t\t\telse\n\t\t\t\t\tQ1.push(i);\n\t\t\t}\n\t\twhile(!Q0.empty() || !Q1.empty())\n\t\t{\n\t\t\tint f = 0;\n\t\t\twhile(!Q0.empty())\n\t\t\t{\n\t\t\t\tint u = Q0.front();\n\t\t\t\tQ0.pop();\n\t\t\t\tfor(vector<int>::iterator p = R[u].begin(); p != R[u].end(); p++)\n\t\t\t\t{\n\t\t\t\t\tint v = *p;\n\t\t\t\t\tif(!--Deg[v])\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!E[v])\n\t\t\t\t\t\t\tQ0.push(v);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tQ1.push(v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(!Q1.empty())\n\t\t\t{\n\t\t\t\tf = 1;\n\t\t\t\tint u = Q1.front();\n\t\t\t\tQ1.pop();\n\t\t\t\tfor(vector<int>::iterator p = R[u].begin(); p != R[u].end(); p++)\n\t\t\t\t{\n\t\t\t\t\tint v = *p;\n\t\t\t\t\tif(!--Deg[v])\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!E[v])\n\t\t\t\t\t\t\tQ0.push(v);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tQ1.push(v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttot += f;\n\t\t}\n\t\tprintf(\"%d\\n\", tot);\n\t}\n}\n\nint main()\n{\n\tprogram::work();\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["dfs and similar", "dp", "graphs", "greedy"], "dificulty": "1900", "interactive": false}