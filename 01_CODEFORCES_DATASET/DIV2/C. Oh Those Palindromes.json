{
    "link": "https://codeforces.com//contest/1064/problem/C",
    "problemId": "236969",
    "problem_idx": "C",
    "shortId": "1064C",
    "contest_number": "1064",
    "problem_submissions": {
        "B": [
            44655610,
            44296972,
            44293144,
            44292773,
            44293812,
            44293718,
            44293000,
            44344754,
            44293975,
            44295190,
            44293365,
            44295370,
            44302868,
            44293963,
            44294620,
            44294475,
            44296374,
            44298406,
            44294385,
            44297171,
            44295746
        ],
        "A": [
            44655603,
            44292257,
            44291327,
            44291231,
            44292052,
            44291980,
            44291181,
            44344735,
            44291813,
            44291934,
            44291290,
            44294068,
            44291371,
            44291185,
            44291129,
            44291644,
            44291587,
            44296995,
            44291676,
            44291601,
            44292439
        ],
        "D": [
            44310987,
            44300224,
            44301769,
            44303356,
            44301800,
            44301521,
            44299632,
            44306110,
            44302195,
            44302177,
            44301311,
            44302882,
            44301868,
            44302023,
            44303439,
            44302526,
            44302660,
            44306757,
            44303670
        ],
        "E": [
            44303702,
            44306444,
            44305605,
            44306133,
            44308351,
            44308131,
            44310963,
            44309275,
            44308545,
            44310866,
            44307847,
            44308332,
            44308689,
            44308749,
            44307609,
            44306211,
            44309665,
            44312766,
            44308919
        ],
        "C": [
            44293719,
            44294513,
            44294217,
            44296068,
            44295654,
            44294557,
            44296176,
            44300122,
            44295991,
            44293129,
            44296152,
            44295799,
            44321133,
            44296946,
            44298909,
            44297762,
            44299676,
            44296772,
            44300478,
            44298201
        ],
        "F": [
            44354268
        ]
    },
    "name": "C. Oh Those Palindromes",
    "statement": "A non-empty string is called , if it reads the same from the left to the\r\nright and from the right to the left. For example, \"\", \"\", and \"\" are\r\npalindromes, while \"\" and \"\" are not.A string is called a of another\r\nstring, if it can be obtained from that string by dropping some\r\n(possibly zero) number of characters from the beginning and from the end\r\nof it. For example, \"\", \"\", and \"\" are substrings of the string \"\",\r\nwhile \"\" and \"\" are not.Letâ€™s define a of the string as the number of\r\nits substrings that are palindromes. For example, the palindromic count\r\nof the string \"\" is 6 because all its substrings are palindromes, and\r\nthe palindromic count of the string \"\" is 3 because only its substrings\r\nof length 1 are palindromes.You are given a string s. You can\r\narbitrarily rearrange its characters. You goal is to obtain a string\r\nwith the maximum possible value of palindromic count.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nchar s[100010];\n\nint main()\n{\n    int n;\n    cin>>n>>s;\n    sort(s,s+n);\n    cout<<s<<endl;\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Oh Those Palindromes.json",
    "editorial_link": "https://codeforces.com//blog/entry/62455",
    "editorial": "One possible solution is just to sort the string.\n\nWhy so?\n\nNote that each palindrome have equal character at their ends. Suppose this character is c\n with x\n number of occurences. Then there are at most x(x+1)/2\n palindromes with this character.\n\nSo we have a clear upper bound on answer. It is easy to see, that the sorted string fulfills that bound and hence it is the optimal answer.",
    "hint": []
}