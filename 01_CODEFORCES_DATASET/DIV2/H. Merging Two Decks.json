{"link": "https://codeforces.com//contest/234/problem/H", "problemId": "1962", "problem_idx": "H", "shortId": "234H", "contest_number": "234", "problem_submissions": {"H": [2367539, 2367451, 2368150, 2370396, 2370658, 2370962, 2366548, 2371136, 2368724, 2371319, 2371738, 2371707, 2371633, 2371399, 2372543, 2371466, 2371579, 2370616, 2372517, 2371242, 2370000, 2369494, 2368027], "G": [2366778, 2367963, 2367273, 2366003, 2367337, 2369442, 2365464, 2370198, 2369038, 2367019, 2369795, 2369869, 2370563, 2370624, 2371914, 2369303, 2370831, 2369435, 2366860, 2367459], "F": [2366410, 2365209, 2366625, 2364676, 2368686, 2368593, 2367997, 2368802, 2370008, 2369667, 2368790, 2368840, 2370409, 2370044, 2370035, 2371269, 2370102, 2371604, 2369327, 2367672, 2365739], "E": [2365219, 2368827, 2365948, 2367641, 2365791, 2366952, 2369059, 2367661, 2366539, 2369676, 2368181, 2368719, 2368819, 2368874, 2372171, 2364796, 2371458, 2372485], "D": [2364321, 2365862, 2364413, 2367581, 2370064, 2365410, 2370417, 2366504, 2366761, 2365880, 2367326, 2366556, 2367362, 2367609, 2371380, 2368228, 2369174, 2367730, 2365306, 2365279], "C": [2363257, 2362903, 2363465, 2365238, 2363763, 2363410, 2364436, 2363868, 2364379, 2364135, 2363776, 2364604, 2364795, 2363038, 2364919, 2364126, 2370085, 2371849, 2363438], "B": [2362948, 2363065, 2363029, 2363437, 2363118, 2363011, 2362872, 2362890, 2362859, 2363131, 2363285, 2363584, 2364047, 2362778, 2364119, 2362767, 2369079, 2371817, 2363262], "A": [2362806, 2363229, 2362850, 2362910, 2362820, 2362807, 2363375, 2363964, 2363091, 2364949, 2362894, 2362906, 2363355, 2366630, 2363699, 2368520, 2368676, 2371574, 2363053]}, "name": "H. Merging Two Decks", "statement": "There are two decks of cards lying on the table in front of you, some\r\ncards in these decks lay face up, some of them lay face down. You want\r\nto merge them into one deck in which each card is face down. You\u2019re\r\ngoing to do it in two stages.The first stage is to merge the two decks\r\nin such a way that the relative order of the cards from the same deck\r\ndoesn\u2019t change. That is, for any two different cards and in one deck, if\r\ncard lies above card , then after the merge card must also be above card\r\n.The second stage is performed on the deck that resulted from the first\r\nstage. At this stage, the executed operation is the turning operation.\r\nIn one turn you can take a few of the top cards, turn all of them, and\r\nput them back. Thus, each of the taken cards gets turned and the order\r\nof these cards is reversed. That is, the card that was on the bottom\r\nbefore the turn, will be on top after it.Your task is to make sure that\r\nall the cards are lying face down. Find such an order of merging cards\r\nin the first stage and the sequence of turning operations in the second\r\nstage, that make all the cards lie face down, and the number of turns is\r\nminimum.\r\n", "solutions": ["#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<string>\n#include<iostream>\n#include<sstream>\n\nusing namespace std;\n\nconst int maxn = 200000 + 50;\n\nint N, M, n, m;\nint a[maxn], b[maxn];\n\nint ans[maxn];\nint q[maxn];\n\nint main() {\n\tfreopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n\n\tscanf(\"%d\", &n);\n\tfor(int i=1; i<=n; i++) {\n\t\tscanf(\"%d\", &a[i]);\n\t}\n\tscanf(\"%d\", &m);\n\tfor(int i=1; i<=m; i++) {\n\t\tscanf(\"%d\", &b[i]);\n\t}\n\n\tN = n; M = m;\n\n\tint cnt = 0, now = 0;\n\twhile(n || m) {\n\t\twhile(n>0 && a[n] == now) {\n\t\t\tans[cnt++] = n;\n\t\t\tn--;\n\t\t}\n\t\twhile(m>0 && b[m] == now) {\n\t\t\tans[cnt++] = N + m;\n\t\t\tm--;\n\t\t}\n\t\tnow ^= 1;\n\t}\n\n\treverse(ans, ans+cnt); ans[cnt] = 0;\n\tfor(int i=0; i<cnt; i++) {\n\t\tprintf(\"%d\", ans[i]);\n\t\tif(i == cnt-1) printf(\"\\n\");\n\t\telse printf(\" \");\n\t}\n\n\tfor(int i=0; i<cnt; i++) {\n\t\tif(ans[i] > N) q[i] = b[ans[i] - N];\n\t\telse q[i] = a[ans[i]];\n\t}\n\n\tint res = 0;\n\tfor(int i=0; i<cnt; i++) {\n\t\tif(q[i] != q[i+1]) res++;\n\t}\n\tprintf(\"%d\\n\", res);\n\tbool first = true;\n\tfor(int i=0; i<cnt; i++) {\n\t\tif(q[i] != q[i+1]) {\n\t\t\tif(first) first = false;\n\t\t\telse printf(\" \");\n\t\t\tprintf(\"%d\", i+1);\n\t\t}\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy"], "dificulty": "2000", "interactive": false}