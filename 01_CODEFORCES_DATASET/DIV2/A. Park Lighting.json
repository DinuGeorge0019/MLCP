{
    "link": "https://codeforces.com//contest/1358/problem/A",
    "problemId": "630275",
    "problem_idx": "A",
    "shortId": "1358A",
    "contest_number": "1358",
    "problem_submissions": {
        "A": [
            81620245,
            81480420,
            81480612,
            81480397,
            81480359,
            81480467,
            81482408,
            81480978,
            81483693,
            81481176,
            81481249,
            81480468,
            81481050,
            81480725,
            81480917,
            81482628,
            81486951,
            92936660,
            81490429,
            81481121,
            81482901
        ],
        "B": [
            81620220,
            81482491,
            81492096,
            81483797,
            81489848,
            81487033,
            81486874,
            81486697,
            81490338,
            81487051,
            81486247,
            81483724,
            81497864,
            81487382,
            81488926,
            81493163,
            81491431,
            81489879,
            81485018,
            81495301
        ],
        "C": [
            81620191,
            81486723,
            81496245,
            81493700,
            81488612,
            81493172,
            81499005,
            81495501,
            81496996,
            81496974,
            81500972,
            81490527,
            81490630,
            81502941,
            81499388,
            81501230,
            81498487,
            81501924,
            81492445,
            81488275
        ],
        "D": [
            81620172,
            81495934,
            81509733,
            81505892,
            81500534,
            81507831,
            81509665,
            81506130,
            81511830,
            81510707,
            81513684,
            81511927,
            81510294,
            81510451,
            81513883,
            81514506,
            81510412,
            81512029,
            81504276,
            81514742
        ],
        "E": [
            81620156,
            81517050,
            81519733,
            81518214,
            81524639,
            164155905,
            81522702,
            81522902,
            81522151,
            81525693,
            81527065,
            81524408,
            81527151,
            81529704,
            81528088,
            81526351,
            81527385,
            81530473,
            81528982,
            81538269,
            81532727
        ],
        "F": [
            81620132,
            81539358,
            81693390,
            81570956,
            81570691,
            81537746,
            81550859,
            164160232,
            81580050,
            81553047
        ]
    },
    "name": "A. Park Lighting",
    "statement": "Due to the coronavirus pandemic, city authorities obligated citizens to\r\nkeep a social distance. The mayor of the city Semyon wants to light up\r\nGluharniki park so that people could see each other even at night to\r\nkeep the social distance.The park is a rectangular table with n rows and\r\nm columns, where the cells of the table are squares, and the boundaries\r\nbetween the cells are streets. External borders are also streets. Every\r\nstreet has length 1. For example, park with n=m=2 has 12 streets.You\r\nwere assigned to develop a plan for lighting the park. You can put\r\nlanterns in the middle of the streets. The lamp lights two squares near\r\nit (or only one square if it stands on the border of the park). Semyon\r\nwants to spend the least possible amount of money on lighting but also\r\nwants people throughout the park to keep a social distance. So he asks\r\nyou to find the minimum number of lanterns that are required to light\r\nall the squares.\r\n",
    "solutions": [
        "// Author : PinkRabbit\n#include<bits/stdc++.h>\nusing namespace std;\n#define F(i,a,b) for(int i=a;i<=(b);++i)\n#define F2(i,a,b) for(int i=a;i<(b);++i)\n#define dF(i,a,b) for(int i=a;i>=(b);--i)\n#define debug(...) fprintf(stderr,__VA_ARGS__)\n#define Debug debug(\"Passing [%s] in LINE %d\\n\",__FUNCTION__,__LINE__)\n#define MN 300005\n#define MM 600005\n#define ll long long\n#define mod 998244353\n#define inf 0x3f3f3f3f\n#define infll 0x3f3f3f3f3f3f3f3f\ntypedef pair<int,int> pii;\n#define pb push_back\n#define mkp make_pair\n#define fi first\n#define se second\ninline int qpow(int b,ll e,int m=mod){int a=1;for(;e;e>>=1,b=(ll)b*b%m)if(e&1)a=(ll)a*b%m;return a;}\nint n,m,q,k;\nint a[MN],b[MN],f[MN],g[MN];\nvector<int>G[MN];\nint h[MN],nxt[MM],to[MM],tot;\ninline void ins(int x,int y){nxt[++tot]=h[x];to[tot]=y;h[x]=tot;}\nint main(){int tests=1;scanf(\"%d\",&tests);\nwhile(tests--){\n\tscanf(\"%d%d\",&n,&m);\n\tprintf(\"%d\\n\",(n*m-1)/2+1);\n}\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Park Lighting.json",
    "editorial_link": "https://codeforces.com//blog/entry/77869",
    "editorial": "Note that if at least one of the sides is even, the square can be\r\ndivided into pairs of neighbors and the answer is . If both sides are\r\nodd, we can first light up a part of the park. Then weâll still have the\r\npart . We can light it up with lanterns. Then the total number of the\r\nlanterns is .Note that both cases can be combined into one formula: .The\r\noverall compexity is per test.\r\n",
    "hint": []
}