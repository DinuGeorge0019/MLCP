{"link": "https://codeforces.com//contest/146/problem/B", "problemId": "841", "problem_idx": "B", "shortId": "146B", "contest_number": "146", "problem_submissions": {"E": [1107649, 1106940, 1107025, 1106110, 1104912, 1106705, 1109524, 1109375], "D": [1105309, 1104675, 1105945, 1107976, 1106326, 1106073, 1105205, 1106349, 1104562, 1105428, 1106336, 1105647, 1104691, 1106147, 1106016, 1105646, 1105960], "C": [1102780, 1104080, 1102877, 1102469, 1102797, 1103007, 1102279, 1103376, 1102389, 1103154, 1102564, 1102512, 1103182, 1102102, 1103314, 1102745, 1102381, 1103228], "B": [1102298, 1104365, 1102361, 1102000, 1102441, 1102529, 1101911, 1102170, 1101819, 1102472, 1102060, 1102101, 1102285, 1105411, 1102661, 1102358, 1103722, 1102489], "A": [1101303, 1104909, 1101580, 1101222, 1102090, 1101773, 1101311, 1101481, 1102909, 1101618, 1101388, 1101178, 1101582, 1101659, 1101533, 1101613, 1103048, 1101789]}, "name": "B. Lucky Mask", "statement": "Petya calls a of a positive integer the number that is obtained after\r\nsuccessive writing of all lucky digits of number from the left to the\r\nright. For example, the mask of number is number , the mask of is , the\r\nmask of is . Obviously, mask of any number is always a lucky\r\nnumber.Petya has two numbers an arbitrary integer and a lucky number .\r\nHelp him find the minimum number such that the mask of number equals .\r\n", "solutions": ["#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nconst int\tMAX_N\t= 20;\n\nint\t\tA, B;\n\nvoid Init()\n{\n\tcin >> A >> B;\n\tint tmp = 0;\n\twhile (B) {\n\t\ttmp = tmp * 10 + B % 10;\n\t\tB = B / 10;\n\t}\n\tB = tmp;\n}\n\nint Check(int x)\n{\n\tint tmp = x, ans = 0;\n\twhile (tmp) {\n\t\tif (tmp % 10 == 7 || tmp % 10 == 4) \n\t\t\tans = ans * 10 + tmp % 10;\n\t\ttmp /= 10;\n\t}\n\treturn ans == B;\n}\n\nint Solve()\n{\n\tint tmp = A + 1;\n\twhile (true) {\n\t\tif (Check(tmp)) return tmp;\n\t\t++ tmp;\n\t}\n}\n\nint main()\n{\n\tInit();\n\tcout << Solve() << endl;\n\t//system(\"pause\");\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "implementation"], "dificulty": "1300", "interactive": false}