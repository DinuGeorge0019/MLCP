{
    "link": "https://codeforces.com//contest/1917/problem/B",
    "problemId": "2396144",
    "problem_idx": "B",
    "shortId": "1917B",
    "contest_number": "1917",
    "problem_submissions": {
        "F": [
            238733616,
            238732449,
            238722650,
            238747708,
            238719236,
            238789557,
            238737024,
            238776133,
            238801763,
            238731647,
            239022549,
            238871907,
            238842440,
            239033126,
            238722153,
            238742411
        ],
        "E": [
            238721862,
            238726116,
            238727431,
            238737036,
            238700760,
            238738779,
            238770928,
            238719511,
            238730269,
            238724820,
            238713406,
            238730340,
            238732710,
            238724485,
            238737682
        ],
        "D": [
            238707805,
            238694785,
            238712512,
            238715225,
            238727535,
            238700990,
            238706030,
            238714969,
            238715935,
            238715986,
            238715678,
            238715941,
            238738577,
            238719803,
            238709527,
            238707807
        ],
        "C": [
            238697529,
            238700737,
            238690241,
            238696341,
            238701325,
            238711284,
            238686628,
            238710402,
            238697578,
            238703582,
            238693431,
            238697956,
            238702600,
            238708773,
            238700119,
            238694618,
            238692698,
            238693118
        ],
        "B": [
            238682533,
            238681807,
            238679080,
            238680525,
            238688332,
            238704922,
            238688891,
            238681860,
            238681830,
            238685486,
            238678116,
            238683453,
            238695119,
            238690853,
            238683129,
            238686944,
            238685014,
            238679989
        ],
        "A": [
            238678969,
            238676634,
            238676579,
            238676658,
            238681375,
            238702133,
            238676697,
            238677114,
            238676598,
            238677433,
            238676559,
            238676795,
            238690754,
            238695279,
            238676668,
            238682718,
            238676593,
            238676877
        ]
    },
    "name": "B. Erase First or Second Letter",
    "statement": "You are given a string s of length n. Let\u2019s define two operations you\r\ncan apply on the string: remove the first character of the string;\r\nremove the second character of the string. Your task is to find the\r\nnumber of distinct strings that can be generated by applying the given\r\noperations on the initial string any number of times (possibly zero), in\r\nany order.\r\n",
    "solutions": [
        "#include<iostream>\n#include<vector>\n#include<set>\n#include<algorithm>\n#include<cstring>\n#include<random>\n#include<ctime>\nusing namespace std;\nconst int maxn=100005;\nint T,n,tg[30];\nchar str[maxn];\nsigned main(){\n\tios::sync_with_stdio(false);cin.tie(0);\n\tcin>>T;\n\twhile(T--){\n\t\tcin>>n>>str+1;\n\t\tfor(int i=0;i<26;++i)tg[i]=0;\n\t\tint ans=0,num=0;\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tif((++tg[str[i]-'a'])==1)++num;\n\t\t\tans+=num;\n\t\t}\n\t\tcout<<ans<<'\\n';\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "data structures",
        "dp",
        "strings"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Erase First or Second Letter.json",
    "editorial_link": "https://codeforces.com//blog/entry/123721",
    "editorial": "SolutionLet\u00e2\u0080\u0099s first see, that applying the second operation and then the\r\nfirst is equivalent to applying the first operation twice. In the former\r\ncase the string will become , and in the latter case: . As we are\r\nconcerned with only the number of distinct resulting strings, let\u00e2\u0080\u0099s\r\nassume that the second operation is never done before the first\r\noperation. This means we do first operations (possibly zero) and then\r\nsecond operations (possibly zero).Let\u00e2\u0080\u0099s now find the result of applying\r\nof the first and then of the second operations. It\u00e2\u0080\u0099s easy to see, that\r\nthe result is .The only remaining question is in which cases two\r\nsequences of operations such that the first operation always comes\r\nbefore the second result in the same string. Consider for the pair, the\r\nresulting string is the same as for the pair. We can see that , because\r\nthe number of erased letters should be the same to get strings of the\r\nsame length. Next, as those are the first letters of two resulting equal\r\nstrings. It\u00e2\u0080\u0099s easy to see that these conditions are also sufficient for\r\nthe result to be the same string.If after applying the first operation\r\ntimes the first letter is not its first occurrence, then any subsequent\r\nresult could have been achieved by less operations of the first type by\r\nremoving first character until reaching that letter and then by removing\r\nthe second character until we reach operations in total. This means we\r\nneed to consider using the second operation only at the first occurrence\r\nof the letter.The final solution can look like this: for each letter\r\nfind it\u00e2\u0080\u0099s first occurrence. If the letter is found, any number of second\r\ntype operations lead to a different result. Thus we can just calculate\r\nthe number of second operations that is valid and add that to the\r\nanswer.\r\n"
}