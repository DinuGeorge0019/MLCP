{
    "link": "https://codeforces.com//contest/1088/problem/D",
    "problemId": "265514",
    "problem_idx": "D",
    "shortId": "1088D",
    "contest_number": "1088",
    "problem_submissions": {
        "E": [
            46613818,
            46607141,
            46622308,
            46615414,
            46615340,
            46613967,
            46615252,
            46616546,
            46614495,
            46614700,
            46614606,
            46614754,
            46614788,
            46616179,
            46615460,
            46618581,
            46617501,
            46617370,
            46614755,
            46616173,
            46613969
        ],
        "D": [
            46606352,
            46614493,
            46605224,
            46604678,
            46601623,
            46606254,
            46607253,
            46607426,
            46610831,
            46610433,
            46609743,
            46607835,
            46609488,
            46611474,
            46605699,
            46607479,
            46607462,
            46610178,
            46612056,
            46614466
        ],
        "C": [
            46599870,
            46601168,
            46596733,
            46596413,
            46608489,
            46598333,
            46599765,
            46596362,
            46601546,
            46599406,
            46601980,
            46598703,
            46596638,
            46598616,
            46598412,
            46594224,
            46598573,
            46596310,
            46600636,
            46598721
        ],
        "B": [
            46592520,
            46594336,
            46592669,
            46592597,
            46593347,
            46594184,
            46593000,
            46591239,
            46592041,
            46594521,
            46593534,
            46592218,
            46591250,
            46592164,
            46592604,
            46591755,
            46592804,
            46591647,
            46593144,
            46598081
        ],
        "A": [
            46589019,
            46591880,
            46588772,
            46590862,
            46589318,
            46592306,
            46588857,
            46588804,
            46589750,
            46594413,
            46591038,
            46589043,
            46589388,
            46588963,
            46589855,
            46588950,
            46589641,
            46588846,
            46589211,
            46597672
        ],
        "F": [
            46647126,
            46717273
        ]
    },
    "name": "D. Ehab and another another xor problem",
    "statement": "Ehab plays a game with Laggy. Ehab has 2 hidden integers (a,b). Laggy\r\ncan ask a pair of integers (c,d) and Ehab will reply with: 1 if a\r\noplus c>b\r\noplus d. 0 if a\r\noplus c=b\r\noplus d. -1 if a\r\noplus c<b\r\noplus d. Operation a\r\noplus b is the bitwise-xor operation of two numbers a and b.Laggy should\r\nguess (a,b) with . You\u2019ll play this game. You\u2019re Laggy and the\r\ninteractor is Ehab.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#define _ << \" _ \" <<\n#define TRACE(x) cout << #x << \" = \" << x << endl\n\ntypedef long long ll;\n\nint query(int a, int b) {\n    cout << \"? \" << a << \" \" << b << endl;\n    int ans;\n    cin >> ans;\n    return ans;\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    \n    int a = 0, b = 0;\n\n    bool is_a = query(0, 0) == 1;\n\n    for (int i = 29; i >= 0; i--) {\n        int p = query(a, b | (1 << i));\n        int q = query(a | (1 << i), b);\n\n        if (p == -1 && q == 1) {\n            a |= 0 << i;\n            b |= 0 << i;\n        } else if (p == 1 && q == -1) {\n            a |= 1 << i;\n            b |= 1 << i;\n        } else {\n            if (is_a) a |= 1 << i;\n            else b |= 1 << i;\n\n            is_a = p == 1;\n        }\n    }\n\n    cout << \"! \" << a << \" \" << b << endl;\n\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "implementation",
        "interactive"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Ehab and another another xor problem.json",
    "editorial_link": "https://codeforces.com//blog/entry/63656",
    "editorial": "This problem is particularly hard to explain :/ I recommend the\r\nsimulation. Let\u00e2\u0080\u0099s build and bit by bit from the most significant to the\r\nleast significant (assume they\u00e2\u0080\u0099re stored in and ). Then, at the step,\r\nand have all bits from the most significant to the set to 0. Notice that\r\nwhether is greater or less than is judged by the most significant bit in\r\nwhich they differ (the one that has 1 is bigger). Let\u00e2\u0080\u0099s query with and .\r\nand can only differ in the bit (or a bit less significant). Now, if the\r\nresults of the queries are different, and have the same value in this\r\nbit, and this value can be determined by the answer of respective\r\nqueries (1 if the second query\u00e2\u0080\u0099s answer is 1, 0 otherwise). If the\r\nqueries give the same result, and must differ in this bit. How to know\r\nwhich of them has a 1 and which has a 0? We know that the greater\r\nbetween them (after setting the processed bits to 0) has a 1 and the\r\nother has a 0. The trick is to keep track of the greater between them.\r\nBefore all queries, we send to know the greater. Every time they differ\r\nin a bit, the greater may change. It\u00e2\u0080\u0099ll simply change to the answer of\r\nthe 2 queries we sent! In other words, we know when we sent the queries\r\nthat after making and equal in this bit, some other bit became the most\r\nsignificant bit in which they differ. Also, we know who has a 1 in this\r\nbit (the greater in this query). Thus, we\u00e2\u0080\u0099ll keep the answer of this\r\nquery for the future, so when this bit comes, we don\u00e2\u0080\u0099t need additional\r\nqueries. Simulation for an exampleLet\u00e2\u0080\u0099s simulate for and .In the first\r\nquery, we\u00e2\u0080\u0099ll send to know that .In the second query, we\u00e2\u0080\u0099ll send (the\r\nanswer is -1) and (the answer is 1). Since the answers differ, this bit\r\nhas the same value for and . Since the answer to the second query is 1,\r\nthey both have a 1. Now, .In the third query, we\u00e2\u0080\u0099ll send (the answer is\r\n-1) and (the answer is -1). Since the answers are the same, and differ\r\nin this bit. Since is currently the greater, has a 1 and has a 0. Now,\r\nthe greater is (the next time 2 bits differ, will have a 1). Also, and\r\n.In the last query, we\u00e2\u0080\u0099ll send (the answer is 0) and (the answer is 0).\r\nSince the answers are the same, and differ in this bit. Since is\r\ncurrently greater, has a 1. Now, and and we\u00e2\u0080\u0099re done :D\r\n"
}