{"link": "https://codeforces.com//contest/47/problem/E", "problemId": "249", "problem_idx": "E", "shortId": "47E", "contest_number": "47", "problem_submissions": {"D": [214688, 214567, 214462, 214130, 214246, 214591, 214548, 214594, 215160, 214627, 214695, 277771, 214789, 214819, 214988, 214911], "C": [214531, 214800, 214769, 214564, 214632], "B": [214196, 213937, 213787, 213575, 213695, 213642, 213745, 213667, 214199, 213907, 213980, 213392, 213596, 213886, 213586, 214343], "A": [213976, 213112, 213127, 213092, 213168, 213253, 213260, 213161, 213129, 213524, 213232, 213065, 213046, 213145, 213105, 213370], "E": [215233]}, "name": "E. Cannon", "statement": "Bertown is under siege! The attackers have blocked all the ways out and\r\ntheir cannon is bombarding the city. Fortunately, Berland intelligence\r\nmanaged to intercept the enemies\u2019 shooting plan. Let\u2019s introduce the\r\nCartesian system of coordinates, the origin of which coincides with the\r\ncannon\u2019s position, the axis is directed rightwards in the city\u2019s\r\ndirection, the axis is directed upwards (to the sky). The cannon will\r\nmake more shots. The cannon balls\u2019 initial speeds are the same in all\r\nthe shots and are equal to , so that every shot is characterized by only\r\none number which represents the angle at which the cannon fires. Due to\r\nthe cannon\u2019s technical peculiarities this angle does not exceed angles\r\n(). We disregard the cannon sizes and consider the firing made from the\r\npoint .The balls fly according to the known physical laws of a body\r\nthrown towards the horizon at an angle: Think of the acceleration of\r\ngravity as equal to .Bertown defends walls. The -th wall is represented\r\nas a vertical segment . When a ball hits a wall, it gets stuck in it and\r\ndoesn\u2019t fly on. If a ball doesn\u2019t hit any wall it falls on the ground ()\r\nand stops. If the ball exactly hits the point , it is considered stuck.\r\nYour task is to find for each ball the coordinates of the point where it\r\nwill be located in the end.\r\n", "solutions": ["#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n\n#define maxn (100005)\n\nusing namespace std;\n\nstruct wall{\n    double x,y;\n}g[maxn],ans[maxn];\n\nstruct shell{\n    double alpha;\n    int ord;\n}f[maxn];\n\nint n,m;\ndouble v;\n\nconst double G=9.8,eps=1e-8;\n\nbool cmp(wall a,wall b){\n    return a.x<b.x;\n}\n\nbool cmp1(shell a,shell b) {\n    return a.alpha<b.alpha;\n}\n\nvoid init(){\n    scanf(\"%d%lf\",&n,&v);\n    for (int i=1;i<=n;i++) {\n        scanf(\"%lf\",&f[i].alpha);\n        f[i].ord=i;\n    }\n    \n    scanf(\"%d\",&m);\n    for (int i=1;i<=m;i++) scanf(\"%lf%lf\",&g[i].x,&g[i].y);\n    \n    sort(g+1,g+1+m,cmp);\n    sort(f+1,f+1+n,cmp1);\n}\n\nvoid work(){\n    int k=1;\n\n    for (int i=1;i<=n;i++) {\n        double vx=v*cos(f[i].alpha),vy=v*sin(f[i].alpha),t,h,ht=vy*2.0/G;;\n        bool flag=true;\n        \n        for (;k<=m;k++) {\n            t=g[k].x/vx;\n            if (ht<t) break;\n            \n            h=vy*t-0.5*G*t*t;\n            \n            if (h<=g[k].y) {\n                ans[f[i].ord].x=g[k].x;\n                ans[f[i].ord].y=h;\n                flag=false;\n                break;\n            }\n        }   \n        \n        if (flag) {\n            ans[f[i].ord].x=vx*ht;\n            ans[f[i].ord].y=0;\n        }\n    }\n    \n    for (int i=1;i<=n;i++) printf(\"%.10lf %.10f\\n\",ans[i].x,ans[i].y);\n}\n\nint main(){\n    init();\n    work();\n\n    return 0;\n}"], "input": "", "output": "", "tags": ["data structures", "geometry", "sortings"], "dificulty": "2200", "interactive": false}