{
    "link": "https://codeforces.com//contest/1459/problem/B",
    "problemId": "837949",
    "problem_idx": "B",
    "shortId": "1459B",
    "contest_number": "1459",
    "problem_submissions": {
        "C": [
            101746653,
            101722886,
            101730123,
            101721760,
            101730712,
            101728008,
            101731166,
            101730952,
            101740001,
            101726009,
            101726762,
            101728277,
            101727158,
            101729187,
            101723361,
            101723810,
            101728376,
            101726644,
            101732897,
            101727240
        ],
        "E": [
            101738323,
            101839753,
            102232354,
            101778763
        ],
        "D": [
            101727682,
            101736410,
            101735995,
            101740518,
            101738063,
            101735219,
            101739686,
            101738152,
            101733975,
            101740963,
            101743516,
            101745649,
            101741362,
            101744865,
            101740597,
            101748885,
            101751093,
            101741581,
            101747404,
            101748856
        ],
        "B": [
            101727154,
            101727768,
            101730156,
            101728078,
            101737211,
            101728162,
            101729594,
            101812219,
            101721826,
            101733013,
            101722434,
            101734872,
            101735665,
            101845089,
            101726205,
            101744534,
            101734571,
            101725649,
            101745878,
            101729907,
            101738583
        ],
        "A": [
            101719213,
            101723947,
            101718569,
            101719365,
            101718481,
            101720960,
            101718492,
            101812211,
            101718737,
            101720191,
            101718915,
            101722560,
            101731743,
            101845090,
            101719378,
            101727785,
            101719966,
            101719274,
            101731147,
            101726149,
            101719284
        ],
        "F": [
            101844942
        ]
    },
    "name": "B. Move and Turn",
    "statement": "A robot is standing at the origin of the infinite two-dimensional plane.\r\nEach second the robot moves exactly 1 meter in one of the four cardinal\r\ndirections: north, south, west, and east. For the first step the robot ,\r\nbut then at the end of every second it 90 degrees left or right with\r\nrespect to the direction it just moved in. For example, if the robot has\r\njust moved north or south, the next step it takes has to be either west\r\nor east, and vice versa.The robot makes n steps from its starting\r\nposition according to the rules above. How many different points can the\r\nrobot arrive to at the end? The final orientation of the robot can be\r\nignored.\r\n",
    "solutions": [
        "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<vector>\nusing namespace std;\n#define N 1000002\ntypedef long long ll;\nint n;\nint main()\n{\n\tscanf(\"%d\",&n);\n\tif(n&1)\n\t{\n\t\tn=(n+1)/2;\n\t\tll ans=n*(n+1)/2;\n\t\tprintf(\"%lld\\n\",ans*4);\n\t}\n\telse\n\t{\n\t\tprintf(\"%lld\\n\",1ll*(n/2+1)*(n/2+1));\n\t}\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Move and Turn.json",
    "editorial_link": "https://codeforces.com//blog/entry/85750",
    "editorial": "We will describe an formula solution. Some slower solutions were also\r\nallowed.First, consider the case when is even. Regardless of the initial\r\ndirection, we will make horizontal (west-east) steps and vertical\r\n(north-south) steps. Further, directions of horizontal and vertical\r\nsteps may be decided independently.If we have to make, say, horizontal\r\nsteps choosing left/right direction every time, there are possible\r\nhorizontal positions we can end up in. Indeed, all possible ways can be\r\ngrouped as follows: steps left, steps right: ; steps left, step right: ;\r\n... steps left, steps right: .Back in the case of even , since the\r\ndirections for vertical and horizontal steps can be chosen\r\nindependently, there are possible combinations of final and .Let\u00e2\u0080\u0099s now\r\nsay that is odd. If we start with a horizontal step, then in total we\r\nwill be making horizontal steps and vertical steps, thus the number of\r\ncombinations here is . A similar argument applies for when we start with\r\na vertical step. Finally, observe that it is impossible to reach the\r\nsame position starting with both vertical and horizontal step. This is\r\nbecause the parity of, say, the final horizontal position is the same as\r\nthe number of horizontal steps, thus it can not be the same after and\r\nhorizontal steps. Thus, in the odd case the answer is , where rounded\r\ndown.\r\n"
}