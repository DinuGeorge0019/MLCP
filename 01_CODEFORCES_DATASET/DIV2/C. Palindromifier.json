{
    "link": "https://codeforces.com//contest/1421/problem/C",
    "problemId": "763578",
    "problem_idx": "C",
    "shortId": "1421C",
    "contest_number": "1421",
    "problem_submissions": {
        "E": [
            95894390,
            95897364,
            95896435,
            95890539,
            95992885,
            96032464,
            95960888,
            95899400
        ],
        "D": [
            95871709,
            95861267,
            95879423,
            95894755,
            95871704,
            95872756,
            95872599,
            95874589,
            95875351,
            95876553,
            95875903,
            95874887,
            95874932,
            95876575,
            95875075,
            95872464,
            95875457,
            95901124,
            95900956,
            95877542
        ],
        "B": [
            95869646,
            95869234,
            95864293,
            95863175,
            95860152,
            95861589,
            95869345,
            95861607,
            95862906,
            95862340,
            95863307,
            95861094,
            95864173,
            95860695,
            95863889,
            95864493,
            95862062,
            95861398
        ],
        "C": [
            95868136,
            95871765,
            95866274,
            95868511,
            95867450,
            95867807,
            95865115,
            95865747,
            95867493,
            95867265,
            95868458,
            95867762,
            95869507,
            95869832,
            95870224,
            95865361,
            95865425,
            95869153
        ],
        "A": [
            95860954,
            95862603,
            95857167,
            95856436,
            95856303,
            95856722,
            95856474,
            95856404,
            95859234,
            95857052,
            95856721,
            95856373,
            95856800,
            95856207,
            95856312,
            95856260,
            95856810,
            95856671
        ]
    },
    "name": "C. Palindromifier",
    "statement": "Ringo found a string s of length n in his yellow submarine. The string\r\ncontains only lowercase letters from the English alphabet. As Ringo and\r\nhis friends love palindromes, he would like to turn the string s into a\r\npalindrome by applying two types of operations to the string. The first\r\noperation allows him to choose i (2\r\nle i\r\nle n-1) and to append the substring s_2s_3\r\nldots s_i (i - 1 characters) reversed to the front of s.The second\r\noperation allows him to choose i (2\r\nle i\r\nle n-1) and to append the substring s_i s_{i + 1}\r\nldots s_{n - 1} (n - i characters) reversed to the end of s.Note that\r\ncharacters in the string in this problem are indexed from 1.For example\r\nsuppose s=. If he performs the first operation with i=3 then he appends\r\nto the front of s and the result will be . Performing the second\r\noperation on the resulted string with i=5 will yield .Your task is to\r\nhelp Ringo make the entire string a palindrome by applying any of the\r\ntwo operations (in total) . It is guaranteed that under these\r\nconstraints there always is a solution. Also note you do not have to\r\nminimize neither the number of operations applied, nor the length of the\r\nresulting string, but they have to fit into the constraints.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nusing llint = long long;\n\ninline void err() { cerr << endl; }\n\ntemplate<typename hd, typename... tl> void err(hd a, tl... b) {\n#ifdef KH_CODE\n\tcerr << a << ' '; err(b...);\n#endif\n}\n\ntemplate<typename hd, typename tl> void chkmin(hd& a, tl b) {\n\tif(b < a) a = b;\n}\n\ntemplate<typename hd, typename tl> void chkmax(hd& a, tl b) {\n\tif(a < b) a = b;\n}\n\nstring s;\n\nint main() {\n#ifdef KH_CODE\n\tfreopen(\"in.txt\", \"r\", stdin);\n\tfreopen(\"out.txt\", \"w\", stdout);\n#endif\n\n\tios_base::sync_with_stdio(0);\n\t\n\tcin >> s;\n\tint n = s.length();\n\tcout << 3 << endl;\n\tcout << \"L \" << 2 << endl;\n\tcout << \"R \" << 2 << endl;\n\tcout << \"R \" << 2 * n - 1 << endl;\n\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "strings"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Palindromifier.json",
    "editorial_link": "https://codeforces.com//blog/entry/83761",
    "editorial": " SolutionThe operation above which\ntransformed into is very close, if only we couldâve somehow append to\nthe left. Turns out you can set that up, so from first append to the\nend, then you have . Now apply the operation from the hint on this\nstring and get . See why we added that first? We can now append it to\nthe front just like we wanted!. Do the operation and the job is\nfinished. Yep, amazingly just printing works!\n",
    "hint": [
        "Hint You're not allowed to just pick the whole string and append its reversed result to the front, but what's the next best thing? We're very close to the answer if we take the whole string except for a letter (so for we make )."
    ]
}