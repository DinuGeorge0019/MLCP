{
    "link": "https://codeforces.com//contest/1337/problem/F",
    "problemId": "594579",
    "problem_idx": "F",
    "shortId": "1337F",
    "contest_number": "1337",
    "problem_submissions": {
        "E": [
            76842870,
            76845509,
            76848463,
            76855120,
            76871772,
            76871576,
            76867010,
            76867076,
            76874436,
            76870671,
            76867604,
            76876698,
            76882617,
            76882550,
            76889050,
            76884760,
            76930491,
            76887431,
            76876593,
            76885516
        ],
        "D": [
            76829839,
            76837363,
            76835449,
            76841174,
            76843833,
            76850412,
            76855631,
            76849402,
            76850850,
            76854483,
            76859745,
            76849751,
            76850303,
            76854768,
            76849549,
            76853724,
            76852989,
            76862421,
            76861609
        ],
        "C": [
            76820484,
            76822812,
            76829351,
            76827518,
            76827629,
            76824463,
            76825343,
            76819564,
            76838456,
            76834820,
            76841486,
            76838012,
            76828806,
            76837386,
            76833609,
            76841320,
            76834504,
            76846500,
            76838445
        ],
        "B": [
            76811181,
            76812533,
            76809888,
            76812317,
            76817367,
            76813548,
            76832505,
            76825951,
            76816251,
            76822230,
            76831299,
            76814459,
            76817110,
            76822249,
            76830068,
            76818198,
            76823690,
            76820084
        ],
        "A": [
            76806546,
            76809169,
            76807699,
            76807193,
            76811060,
            76806430,
            76827568,
            76829567,
            76809786,
            76816500,
            76807750,
            76806611,
            76807034,
            76815382,
            76825211,
            76811951,
            76814300,
            76809280
        ],
        "F": [
            77132223
        ]
    },
    "name": "F. Yui and Mahjong Set",
    "statement": "Yui is a girl who enjoys playing Mahjong. She has a mysterious set which\r\nconsists of tiles (this set can be empty). Each tile has an integer\r\nvalue between 1 and n, and in the set have the same value. So the set\r\ncan contain at most n^2 tiles.You want to figure out which values are on\r\nthe tiles. But Yui is shy, she prefers to play a guessing game with\r\nyou.Let\u2019s call a set consisting of tiles if their values are the same.\r\nFor example,\r\n{2,\r\n,2,\r\n,2\r\n} is a triplet, but\r\n{2,\r\n,3,\r\n,3\r\n} is not.Let\u2019s call a set consisting of tiles if their values are\r\nconsecutive integers. For example,\r\n{2,\r\n,3,\r\n,4\r\n} is a straight, but\r\n{1,\r\n,3,\r\n,5\r\n} is not.At first, Yui gives you the number of triplet subsets and\r\nstraight subsets of the initial set respectively. After that, you can\r\ninsert a tile with an integer value between 1 and n into the set . Every\r\ntime you insert a tile, you will get the number of triplet subsets and\r\nstraight subsets of the current set as well.Note that two tiles with the\r\nsame value are treated different. In other words, in the set\r\n{1,\r\n,1,\r\n,2,\r\n,2,\r\n,3\r\n} you can find 4 subsets\r\n{1,\r\n,2,\r\n,3\r\n}.Try to guess the number of tiles in the initial set with value i for\r\nall integers i from 1 to n.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std ;\n\nconst int N = 110 ;\nint v1[N], v2[N] ;\nint pascal[N][3];\nint ans[N], cur[N] ;\n\nint main() {\n    int n, flag= 0  ;\n    cin >> n ;\n    cin >> v1[n] >> v2[n] ;\n    int na, nb ;\n    for ( int i = 0 ; i <= n ; ++i ) {\n          for ( int j = 0 ; j < min(i+1,3) ; ++j ) {\n               if ( i == j || j == 0 ) pascal[i][j] = 1 ;\n               else pascal[i][j] = pascal[i-1][j] + pascal[i-1][j-1] ;\n          }\n     }\n\n    for ( int i = n-1 ; i > 2 ; --i ) {\n        cout << \"+ \" << i << '\\n' ;\n        fflush(stdout) ;\n        cin >> v1[i] >> v2[i] ;\n    }\n\n    cout << \"+ 1\\n\" ;\n    fflush(stdout) ;\n    cin >> na >> nb ;\n    int fr=nb ;\n    if ( nb > v2[3] ) {\n        cout << \"+ 2\\n\" ;\n        fflush(stdout) ;\n        int a, b ;cin >> a>> b;\n        v2[2] = b ;\n        if ( a > na ) {\n            int dif = a-na;\n            for( int x = 0 ; ; ++x ) {\n               if ( pascal[x][2] == dif ) {\n                    ans[2] = x ; cur[2] = x+1 ;\n                    break ;\n               }\n            }\n        }\n        else ans[2] = 1, cur[2] = 2 ;\n        if ( na > v1[3] ) {\n            int dif = na-v1[3];\n            for( int x = 0 ; ; ++x ) {\n               if ( pascal[x][2] == dif ) {\n                    ans[1] = x ; cur[1] = x+1 ;\n                    break ;\n               }\n            }\n        }\n        na = a ; nb = b;\n        cout << \"+ 1\\n\" ;\n        fflush(stdout) ;\n        cin >> a >> b ;\n        if ( ans[1] == 0 ) {\n            if ( a > na ) ans[1] = 1, cur[1] = 3;\n            else ans[1] = 0, cur[1] = 2;\n        }\n        ans[3] = (b-nb) / cur[2] - 1 ;\n        cur[3] = ans[3] + 1 ;\n    }\n    else {\n        ans[2] = 0 ; cur[2] = 1;\n        cout << \"+ 2\\n\" ;\n        fflush(stdout) ;\n        cin >> v1[2] >> v2[2];\n\n        cout << \"+ 1\\n\" ;\n        fflush(stdout) ;\n        int a, b ; cin >> a >> b;\n        if ( na > v1[3] ) {\n            int dif = na-v1[3];\n            for( int x = 0 ; ; ++x ) {\n               if ( pascal[x][2] == dif ) {\n                    ans[1] = x ; cur[1] = x+2 ;\n                    break ;\n               }\n            }\n        }\n        else {\n            if ( a > v1[2] ) ans[1] = 1, cur[1] = 3;\n            else ans[1] = 0, cur[1] = 2;\n        }\n        ans[3] = (b-v2[2]) / cur[2] - 1 ;\n        cur[3] = ans[3] + 1 ;\n    }\n\n    cur[1] = ans[1] + 1; cur[2] = ans[2] ;\n    for ( int i = 4 ; i <= n ; ++i ) {\n        int v = v2[i-2];\n        v -= cur[i-4] * cur[i-3] ;\n        v -= cur[i-3] * cur[i-1] ;\n        ans[i] = (v - (i-2==2?fr:v2[i-1])) / cur[i-1] - 1 ;\n//        cout << v << ' ' << v2[i-2] << ' ' << v2[i-1] << ' ' << cur[i-1] << ' ' << cur[i-2] << ' ' << cur[i-3] << ' ' << cur[i-4] << '\\n' ;\n        cur[i] = ans[i] + 1 ;\n        cur[i-2] = ans[i-2] ;\n        cur[1] = ans[1] ;\n    }\n    ans[n]++ ;\n    cout << \"! \" ;\n    for ( int i = 1 ; i <= n ; ++i ) cout << ans[i] << ' ' ;\n    cout << '\\n' ;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "interactive",
        "math"
    ],
    "dificulty": "3200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Yui and Mahjong Set.json",
    "editorial_link": "https://codeforces.com//blog/entry/76099",
    "editorial": "Suppose ci\n equals to the number of tiles in the current set with value i\n (before making a query).\n\nIf you insert a tile with value x\n:\n\nThe delta of triplet subsets is (cx2)\n. Once you're sure that cx?0\n holds, you can determine the exact value of cx\n.\nThe delta of straight subsets is cx?2cx?1+cx?1cx+1+cx+1cx+2\n. Once you've known the values of c1\u0085cx+1\n and you're sure that cx+1?0\n, you can determine the exact value of cx+2\n.\nLet's insert tiles with following values in order: n?1\n, n?2\n, \u0085\n, 3\n, 1\n, 2\n, 1\n.\n\nWe can easily get a1\n by the delta of triplet subsets since we insert tiles with value 1\n twice.\n\nConsider the delta of straight subsets when you insert the tile with value 1\n. It equals to a2(a3+1)\n for the first time and (a2+1)(a3+1)\n for the second time. Use subtraction to get a3\n, then use division to get a2\n. (The divisor is a3+1\n, which is non-zero)\n\nFinally, let do the following for each x\n from 2\n to n?2\n. We've known the values of a1\u0085ax+1\n. Since we've inserted a tile with value x+1\n before inserting x\n, we can use division to get ax+2\n by the delta of straight subsets and avoid dividing zero."
}