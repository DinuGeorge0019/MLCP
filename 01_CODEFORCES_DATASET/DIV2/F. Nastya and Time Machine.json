{
    "link": "https://codeforces.com//contest/1341/problem/F",
    "problemId": "599364",
    "problem_idx": "F",
    "shortId": "1341F",
    "contest_number": "1341",
    "problem_submissions": {
        "F": [
            77848250,
            77840090
        ],
        "E": [
            77821518,
            77899755,
            77823133,
            77824849,
            77837980,
            77849952,
            77843481,
            77845012,
            77851732,
            77844281,
            77827942,
            77845115
        ],
        "D": [
            77806595,
            77808901,
            77796444,
            77812229,
            77809547,
            77806349,
            77817033,
            77812671,
            77820011,
            77815726,
            77848086,
            77830454,
            77808246,
            77858849,
            77820964,
            77813001,
            77808174,
            77806131,
            77813874
        ],
        "C": [
            77795777,
            77791932,
            77784729,
            77779572,
            77803941,
            77795669,
            77798417,
            77792949,
            77801051,
            77799331,
            77784061,
            77803420,
            77789866,
            77799759,
            77790437,
            77791028,
            77788622,
            77785381
        ],
        "B": [
            77784814,
            77781931,
            77786979,
            77777635,
            77777444,
            77778027,
            77777282,
            77784813,
            77787430,
            77790189,
            77790670,
            77814054,
            77777959,
            77791325,
            77779844,
            77782238,
            77778289,
            77777782
        ],
        "A": [
            77769516,
            77770127,
            77769168,
            77771475,
            77770045,
            77769414,
            77769437,
            77772206,
            77772461,
            77778892,
            77770438,
            77804897,
            77769675,
            77775846,
            77769311,
            77769798,
            77769599,
            78093030,
            77769512
        ]
    },
    "name": "F. Nastya and Time Machine",
    "statement": "The map of the city where they live has a lot of squares, some of which\r\nare connected by roads. There is exactly one way between each pair of\r\nsquares which does not visit any vertex twice. It turns out that the\r\ngraph of the city is a tree.Denis is located at vertex 1 at the time 0.\r\nHe wants to visit every vertex at least once and get back as soon as\r\npossible.Denis can walk one road in 1 time. Unfortunately, the city is\r\nso large that it will take a very long time to visit all squares.\r\nTherefore, Denis took a desperate step. He pulled out his pocket time\r\nmachine, which he constructed in his basement. With its help, Denis can\r\nchange the time to any non-negative time, which is less than the current\r\ntime.But the time machine has one feature. If the hero finds himself in\r\nthe same place and at the same time twice, there will be an explosion of\r\nuniversal proportions and Nastya will stay unhappy. Therefore, Denis\r\nasks you to find him a route using a time machine that he will get\r\naround all squares and will return to the first and at the same time the\r\nmaximum time in which he visited any square will be minimal.Formally,\r\nDenis’s route can be represented as a sequence of pairs:\r\n{v_1, t_1\r\n},\r\n{v_2, t_2\r\n},\r\n{v_3, t_3\r\n},\r\nldots,\r\n{v_k, t_k\r\n}, where v_i is number of square, and t_i is time in which the boy is\r\nnow.The following conditions must be met: The route starts on square 1\r\nat time 0, i.e. v_1 = 1, t_1 = 0 and ends on the square 1, i.e. v_k = 1.\r\nAll transitions are divided into two types: Being in the square change\r\nthe time:\r\n{ v_i, t_i\r\n}\r\nto\r\n{ v_{i+1}, t_{i+1}\r\n} : v_{i+1} = v_i, 0\r\nleq t_{i+1} < t_i. Walk along one of the roads:\r\n{ v_i, t_i\r\n}\r\nto\r\n{ v_{i+1}, t_{i+1}\r\n}. Herewith, v_i and v_{i+1} are connected by road, and t_{i+1} = t_i +\r\n1 All pairs\r\n{ v_i, t_i\r\n} must be different. All squares are among v_1, v_2,\r\nldots, v_k. You need to find a route such that the maximum time in any\r\nsquare will be minimal, that is, the route for which\r\nmax{(t_1, t_2,\r\nldots, t_k)} will be the minimum possible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nstd::vector<int> edge[110000];\nstd::vector<std::pair<int, int>> ans;\n\nvoid dfs(int n, int t, int f) {\n    int tot;\n    if (f == -1) {\n        tot = edge[n].size();\n    } else {\n        tot = edge[n].size() - 1;\n    }\n    int l = 0, r = 0;\n    if (t - 1 <= tot) {\n        l = tot - (t - 1);\n    } else {\n        r = (t - 1) - tot;\n    }\n    int cnt = t, status = 0;\n    ans.push_back(std::make_pair(n, t));\n    for (int e : edge[n]) {\n        if (e != f) {\n            if (cnt == t + l && status == 0) {\n                ans.push_back(std::make_pair(n, r));\n                cnt = r; status = 1;\n            }\n            dfs(e, cnt + 1, n);\n            ans.push_back(std::make_pair(n, cnt + 1));\n            ++cnt;\n        }\n    }\n    if (cnt == t + l && status == 0) {\n        ans.push_back(std::make_pair(n, r));\n    }\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    for (int i = 0; i < N - 1; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        edge[u].push_back(v);\n        edge[v].push_back(u);\n    }\n    dfs(1, 0, -1);\n    printf(\"%d\\n\", (int) ans.size());\n    for (auto p : ans) {\n        printf(\"%d %d\\n\", p.first, p.second);\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Nastya and Time Machine.json",
    "editorial_link": "https://codeforces.com//blog/entry/76479",
    "editorial": "Lemma: The maximum time that Denis will visit will be at least Proof:\r\nconsider an arbitrary vertex . We will visit her times when we will\r\nbypass all her neighbors and another when we return to her ancestor. But\r\nwe canât go to vertex at 0 time. So, we need moments more than 0.We\r\nconstruct a graph traversal with a maximum time equal to . Let us now\r\nstand at at a time and has an un visited son . We want to go to , go\r\naround its entire subtree and return to at time . That is, the route\r\nwill be something like this: .Let , for we denote the th son of . If ,\r\nthen there are no problems, we will move back in time at the very end of\r\nthe route: .Otherwise, you have to go back in time in the middle of the\r\nroute (exactly when we get to T) so that after the last visit we will be\r\nin , that is: , where can be easily calculated by the number of not\r\nvisited sons.\r\n",
    "hint": []
}