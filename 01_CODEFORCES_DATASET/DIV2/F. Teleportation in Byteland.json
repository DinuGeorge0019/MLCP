{"link": "https://codeforces.com//contest/1859/problem/F", "problemId": "2156546", "problem_idx": "F", "shortId": "1859F", "contest_number": "1859", "problem_submissions": {"F": [218569170, 218581836, 218617250, 218736861, 218605159], "D": [218563678, 218527706, 218524461, 218541850, 218525597, 218533314, 218548787, 218533112, 218538546, 218539655, 218537786, 218535818, 218553386, 218535886, 218533896, 218537893, 218542381, 218547154, 218542928, 218544612], "C": [218525956, 218512705, 218513334, 218516401, 218517178, 218520064, 218534501, 218519799, 218514853, 218522631, 218518290, 218523903, 218538315, 218515860, 218520699, 218536075, 218518723, 218526393, 218525882, 218528439], "B": [218515214, 218505180, 218504011, 218503415, 218502676, 218525570, 218527334, 218505003, 218504876, 218514112, 218504039, 218506274, 218520756, 218506233, 218506628, 218509261, 218509278, 218510852, 218512080, 218508258], "E": [218512348, 218540759, 218543571, 218531440, 218546842, 218542828, 218514089, 218548356, 218551376, 218551561, 218551316, 218556871, 218531000, 218554570, 218561645, 218555675, 218563500, 218560618, 218560551, 218559090], "A": [218503604, 218499919, 218498316, 218498529, 218498173, 218498480, 218520556, 218498189, 218499252, 218502725, 218498470, 218499540, 218499799, 218500335, 218498354, 218508385, 218499358, 218498918, 218499379, 218503053]}, "name": "F. Teleportation in Byteland", "statement": "There are n cities in Byteland, some of which are connected by roads,\r\nwhich can be traversed in any direction. The i-th road has its own\r\nhardness parameter w_i. Time spent on traversing a road with its\r\nhardness equal to w_i is\r\nlceil\r\nfrac{w_i}{c}\r\nrceil, where c is the current driving skill.The travel network of\r\nByteland is a tree. In other words, between any pair of cities, there is\r\nexactly one path that passes through each city at most once.In some\r\ncities you can visit driving courses. A single course takes T time to\r\ncomplete, and after completing the course the driver\u2019s skill c is\r\nincreased by 2 times. Notice that the time T required to complete a\r\ncourse is the same in all cities, and courses can be completed in the\r\nsame city more than once.You need to answer the q queries: what is the\r\nminimum time it takes to get from the city a to city b if you start the\r\ntravelling with driving skill c = 1?\r\n", "solutions": ["#include <bits/stdc++.h>\n#define int long long\n#define double long double\nusing namespace std;\nstruct qry{\n\tint a,b;\n}p[100005];\nvector<pair<int,int>> vc[100005];\nint f[100005][18],clz[100005],len[100005],nlen[100005],dep[100005],minv1[100005][18],minv2[100005][18],tag,trn[100005],ans[100005],up[100005];\nvoid dfs0(int now,int fa){\n\tdep[now]=dep[fa]+1;\n\tf[now][0]=fa;\n\tfor(int i=1;i<=17;i++) f[now][i]=f[f[now][i-1]][i-1];\n\tfor(auto v:vc[now]){\n\t\tif(v.first==fa) continue;\n\t\tlen[v.first]=len[now]+v.second;\n\t\tup[v.first]=v.second;\n\t\tdfs0(v.first,now);\n\t}\n}\nint lca(int u,int v){\n\tif(dep[u]<dep[v]) swap(u,v);\n\tfor(int i=17;i>=0;i--) if(dep[f[u][i]]>=dep[v]) u=f[u][i];\n\tif(u==v) return u;\n\tfor(int i=17;i>=0;i--) if(f[u][i]!=f[v][i]) u=f[u][i],v=f[v][i];\n\treturn f[u][0];\n}\nint qlen(int u,int v){\n\tif(dep[u]<dep[v]) swap(u,v);\n\tint ans=0;\n\tfor(int i=17;i>=0;i--) if(dep[f[u][i]]>=dep[v]) ans+=len[u]-len[f[u][i]],u=f[u][i];\n\tif(u==v) return ans;\n\tfor(int i=17;i>=0;i--) if(f[u][i]!=f[v][i]) ans+=len[u]-len[f[u][i]]+len[v]-len[f[v][i]],u=f[u][i],v=f[v][i];\n\treturn ans+len[u]-len[f[u][0]]+len[v]-len[f[v][0]];\n}\nvoid dfs1(int now,int fa){\n\tclz[now]=1e18;\n\tif(trn[now]) clz[now]=0;\n\tfor(auto v:vc[now]){\n\t\tif(v.first==fa) continue;\n\t\tnlen[v.first]=nlen[now]+(v.second+(1<<tag)-1)/(1<<tag);\n\t\tdfs1(v.first,now);\n\t\tclz[now]=min(clz[now],clz[v.first]+v.second+(v.second+(1<<tag)-1)/(1<<tag));\n\t}\n}\nvoid dfs2(int now,int fa){\n\tfor(auto v:vc[now]){\n\t\tif(v.first==fa) continue;\n\t\tclz[v.first]=min(clz[v.first],clz[now]+v.second+(v.second+(1<<tag)-1)/(1<<tag));\n\t\tdfs2(v.first,now);\n\t}\n}\nvoid dfs3(int now,int fa){\n\tminv1[now][0]=min(clz[now]+up[now],clz[f[now][0]]+(up[now]+(1<<tag)-1)/(1<<tag)),minv2[now][0]=min(clz[now]+(up[now]+(1<<tag)-1)/(1<<tag),clz[f[now][0]]+up[now]);\n\tfor(int j=1;j<=17;j++){\n\t\tminv1[now][j]=min(minv1[now][j-1]+len[f[now][j-1]]-len[f[now][j]],minv1[f[now][j-1]][j-1]+nlen[now]-nlen[f[now][j-1]]);\n\t\tminv2[now][j]=min(minv2[now][j-1]+nlen[f[now][j-1]]-nlen[f[now][j]],minv2[f[now][j-1]][j-1]+len[now]-len[f[now][j-1]]);\n//\t\tif(j<=3) cout<<minv1[now][j]<<\" \"<<minv2[now][j]<<\"  \";\n\t}\n//\tcout<<now<<\"\\n\";\n\tfor(auto v:vc[now]){\n\t\tif(v.first==fa) continue;\n\t\tdfs3(v.first,now);\n\t} \n}\nsigned main(){\n    ios::sync_with_stdio(false);\n\tint t; cin>>t;\n\twhile(t--){\n\t\tint n,T; cin>>n>>T;\n\t\tfor(int i=1;i<=n;i++) vc[i].clear();\n\t\tfor(int i=1;i<n;i++){\n\t\t\tint u,v,w; cin>>u>>v>>w;\n\t\t\tvc[u].push_back(make_pair(v,w));\n\t\t\tvc[v].push_back(make_pair(u,w));\n\t\t}\n\t\tchar c; for(int i=1;i<=n;i++) cin>>c,trn[i]=(c=='1');\n\t\tdfs0(1,0);\n\t\tint q; cin>>q;\n\t\tfor(int i=1;i<=q;i++){\n\t\t\tcin>>p[i].a>>p[i].b;\n\t\t\tans[i]=qlen(p[i].a,p[i].b);\n\t\t}\n\t\tfor(tag=1;tag<=20;tag++){\n\t\t\tdfs1(1,0);\n\t\t\tdfs2(1,0);\n\t\t\tdfs3(1,0);\n\t\t\tfor(int i=1;i<=q;i++){\n\t\t\t\tint L=lca(p[i].a,p[i].b);\n\t\t\t\tint now;\n\t\t\t\tif(L==p[i].a){\n\t\t\t\t\tint mv1=1e18; now=p[i].b;\n\t\t\t\t\tfor(int j=17;j>=0;j--){\n\t\t\t\t\t\tif(dep[f[now][j]]>=dep[p[i].a]){\n\t\t\t\t\t\t\tmv1=min(mv1+len[now]-len[f[now][j]],minv1[now][j]+nlen[p[i].b]-nlen[now]);\n\t\t\t\t\t\t\tnow=f[now][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tans[i]=min(ans[i],mv1+T*tag);\n//\t\t\t\t\tcout<<mv1<<\"\\n\";\n\t\t\t\t}\n\t\t\t\telse if(L==p[i].b){\n\t\t\t\t\tint mv2=1e18; now=p[i].a;\n\t\t\t\t\tfor(int j=17;j>=0;j--){\n\t\t\t\t\t\tif(dep[f[now][j]]>=dep[p[i].b]){\n\t\t\t\t\t\t\tmv2=min(mv2+nlen[now]-nlen[f[now][j]],minv2[now][j]+len[p[i].a]-len[now]);\n\t\t\t\t\t\t\tnow=f[now][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tans[i]=min(ans[i],mv2+T*tag);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tint mv1=1e18; now=p[i].b;\n\t\t\t\t\tfor(int j=17;j>=0;j--){\n\t\t\t\t\t\tif(dep[f[now][j]]>=dep[L]){\n\t\t\t\t\t\t\tmv1=min(mv1+len[now]-len[f[now][j]],minv1[now][j]+nlen[p[i].b]-nlen[now]);\n\t\t\t\t\t\t\tnow=f[now][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tans[i]=min(ans[i],mv1+T*tag+len[p[i].a]-len[L]);\n\t\t\t\t\tint mv2=1e18; now=p[i].a;\n\t\t\t\t\tfor(int j=17;j>=0;j--){\n\t\t\t\t\t\tif(dep[f[now][j]]>=dep[L]){\n\t\t\t\t\t\t\tmv2=min(mv2+nlen[now]-nlen[f[now][j]],minv2[now][j]+len[p[i].a]-len[now]);\n\t\t\t\t\t\t\tnow=f[now][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n//\t\t\t\t\tcout<<mv1<<\" \"<<mv2<<\"\\n\";\n\t\t\t\t\tans[i]=min(ans[i],mv2+T*tag+nlen[p[i].b]-nlen[L]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=q;i++) cout<<ans[i]<<\"\\n\";\n\t}\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "dfs and similar", "divide and conquer", "graphs", "shortest paths", "trees"], "dificulty": "3200", "interactive": false}