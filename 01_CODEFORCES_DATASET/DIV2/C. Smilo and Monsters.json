{
    "link": "https://codeforces.com//contest/1891/problem/C",
    "problemId": "2296090",
    "problem_idx": "C",
    "shortId": "1891C",
    "contest_number": "1891",
    "problem_submissions": {
        "E": [
            230546323,
            230549698,
            230546568,
            230560113,
            230535473,
            230555886,
            230556588,
            230572665,
            230562765,
            230571525,
            230577549,
            230577437,
            230577312,
            230576387,
            230568654,
            230542621,
            230562980,
            230569462,
            230570942,
            230569058,
            230570276,
            230567059,
            230568509,
            230570393
        ],
        "D": [
            230534861,
            230532955,
            230530542,
            230539370,
            230549040,
            230536739,
            230534616,
            230532674,
            230544623,
            230533495,
            230543589,
            230549007,
            230547762,
            230544535,
            230536524,
            230537913,
            230537614,
            230536080,
            230540544,
            230539494
        ],
        "F": [
            230528098,
            230541255,
            230552010,
            230529998,
            230540710,
            230542715,
            230590093,
            230590013,
            230545702,
            230538147,
            251594037,
            230535448,
            230545719,
            230533122,
            230519163,
            230533480,
            230536870,
            230548382,
            230551293,
            230550179,
            230543750,
            230553764,
            230541029
        ],
        "C": [
            230517325,
            230519256,
            230521040,
            230519508,
            230552157,
            230529446,
            230519957,
            230521645,
            230529295,
            230521526,
            230527664,
            230555714,
            230523852,
            230528582,
            230522749,
            230531812,
            230530352,
            230518984,
            230520316,
            230536742
        ],
        "A": [
            230515478,
            230512076,
            230512426,
            230512477,
            230513749,
            230513572,
            230511745,
            230511922,
            230513704,
            230511875,
            230512212,
            230559679,
            230512242,
            230513480,
            230512561,
            230512123,
            230512943,
            230547595,
            230512205,
            230518051
        ],
        "B": [
            230513054,
            230513705,
            230515902,
            230515002,
            230527506,
            230517573,
            230513080,
            230513453,
            230518089,
            230513986,
            230515796,
            230558558,
            230539558,
            230516521,
            230515634,
            230516319,
            230517013,
            230552749,
            230513951,
            230522884
        ]
    },
    "name": "C. Smilo and Monsters",
    "statement": "A boy called Smilo is playing a new game! In the game, there are n\r\nhordes of monsters, and the i-th horde contains a_i monsters. The goal\r\nof the game is to destroy all the monsters. To do this, you have two\r\ntypes of attacks and a combo counter x, initially set to 0: The first\r\ntype: you choose a number i from 1 to n, such that there is at least one\r\nmonster left in the horde with the number i. Then, you kill one monster\r\nfrom horde number i, and the combo counter x increases by 1. The second\r\ntype: you choose a number i from 1 to n, such that there are at least x\r\nmonsters left in the horde with number i. Then, you use an ultimate\r\nattack and kill x monsters from the horde with number i. After that, x\r\nis reset to zero.Your task is to destroy all of the monsters, meaning\r\nthat there should be no monsters left in any of the hordes. Smilo wants\r\nto win as quickly as possible, so he wants to the minimum number of\r\nattacks required to win the game.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define int long long\n#define N 200005\nusing namespace std;\nint read(){\n\tint w=0,h=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')h=-h;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){w=w*10+ch-'0';ch=getchar();}\n\treturn w*h;\n}\nint n,sum,ans,a[N];\nvoid solve(){\n\tn=read();sum=ans=0;\n\tfor(int i=1;i<=n;i++)sum+=(a[i]=read());\n\tsort(a+1,a+n+1);sum>>=1;\n\tfor(int i=n;i>=1;i--)\n\t\tif(sum>=a[i])sum-=a[i],a[i]=0,ans++;\n\t\telse if(sum)a[i]-=sum,sum=0,ans++;\n\tfor(int i=1;i<=n;i++)ans+=a[i];\n\tprintf(\"%lld\\n\",ans);\n}\nsigned main(){\n\tint T=read();while(T--)solve();\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "greedy",
        "sortings",
        "two pointers"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Smilo and Monsters.json",
    "editorial_link": "https://codeforces.com//blog/entry/121876",
    "editorial": "Note that if the second operation were free, we would need operations to\r\nget rid of all the monsters. Indeed, when we kill one monster, we can\r\nkill a second monster for free with a second operation. But the second\r\noperation is not free. So we need to use the second operation as little\r\nas possible.To do this, we need to apply ultimates (second attack) on\r\nthe current largest horde by number of monsters, when the combo counter\r\nreaches the size of the largest horde. And we apply the first attack on\r\nthe smallest hordes. This is so because the combo counter allows us to\r\ndefeat monsters. But since we canât apply this operation on several\r\nhordes at once, we need to keep the number of hordes on which we apply\r\nthese attacks of the second type as small as possible. Then we can use\r\nthe greedy algorithm described above. Formally, we need to keep a sorted\r\narray and store two pointers: pointer to the smallest horde, to the\r\nlargest horde. Until is equal to : if after destroying all horde we\r\ncanât kill horde with ultimates, we destroy horde , increase pointer by\r\nand increase combo counter by []. Otherwise, hit the horde so many times\r\nthat the combo counter becomes []. Then apply a second attack on horde ,\r\nreduce horde âs counter by , reduce [], and nullify the combo counter.\r\nWhen becomes equal to , you just need to apply the first attack the\r\nright number of times to finish with ultimates (or not if [] ). Total\r\ncomplexity ().\r\n",
    "hint": []
}