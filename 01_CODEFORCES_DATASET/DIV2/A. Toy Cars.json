{
    "link": "https://codeforces.com//contest/545/problem/A",
    "problemId": "28034",
    "problem_idx": "A",
    "shortId": "545A",
    "contest_number": "545",
    "problem_submissions": {
        "E": [
            11152908,
            11157700,
            11157522,
            11156542,
            11161300,
            11156960,
            11158926,
            11159332,
            11158333,
            11161026,
            11158857,
            11159720,
            11174097,
            11173935,
            11160858,
            11161651,
            11159778,
            11161054,
            11160310,
            11161820,
            11163252
        ],
        "C": [
            11150440,
            11147958,
            11150824,
            11150276,
            11148970,
            11148884,
            11153300,
            11153422,
            11152117,
            11151008,
            11151654,
            11153299,
            11155654,
            11152365,
            11152087,
            11153750,
            11154873,
            11151525,
            11151659
        ],
        "D": [
            11148301,
            11149439,
            11148692,
            11151407,
            11150444,
            11147349,
            11150296,
            11170906,
            11151431,
            11154441,
            11153203,
            11155014,
            11154361,
            11150015,
            11154687,
            11154652,
            11154830,
            11154199,
            11153829,
            11150376
        ],
        "B": [
            11147493,
            11152440,
            11147604,
            11147721,
            11147256,
            11149962,
            11148762,
            11149882,
            11149290,
            11148961,
            11148519,
            11150280,
            11148361,
            11149006,
            11149406,
            11151773,
            11147710,
            11148107,
            11147713
        ],
        "A": [
            11146984,
            11151375,
            11147061,
            11147027,
            11146977,
            11151139,
            11147222,
            11147723,
            11147389,
            11147403,
            11160745,
            11149107,
            11147430,
            11147598,
            11148409,
            11148792,
            11148668,
            11147021,
            11147024
        ]
    },
    "name": "A. Toy Cars",
    "statement": "Little Susie, thanks to her older brother, likes to play with cars.\r\nToday she decided to set up a tournament between them. The process of a\r\ntournament is described in the next paragraph.There are toy cars. Each\r\npair collides. The result of a collision can be one of the following: no\r\ncar turned over, one car turned over, both cars turned over. A car is\r\ngood if it turned over in no collision. The results of the collisions\r\nare determined by an matrix : there is a number on the intersection of\r\nthe -th row and -th column that describes the result of the collision of\r\nthe -th and the -th car: : if this pair of cars never collided. occurs\r\nonly on the main diagonal of the matrix. : if no car turned over during\r\nthe collision. : if only the -th car turned over during the collision. :\r\nif only the -th car turned over during the collision. : if both cars\r\nturned over during the collision. Susie wants to find all the good cars.\r\nShe quickly determined which cars are good. Can you cope with the task?\r\n",
    "solutions": [
        "//In the name of God\n#include <bits/stdc++.h>\nusing namespace std;\nvector<int> ans;\nint main(){\n    int n;\n    cin >> n;\n    for(int i = 0; i < n;i++){\n        int f = 0;\n        for(int j = 0; j < n;j++){\n            int p;\n            cin >> p;\n            if(p == 1 || p == 3) f = 1;\n        }\n        if(!f) ans.push_back(i + 1);\n    }\n    cout << ans.size() << endl;\n    for(int i = 0; i < ans.size();i++) cout << ans[i] << ' ';\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Toy Cars.json",
    "editorial_link": "https://codeforces.com//blog/entry/17982",
    "editorial": "We can find all information about -th car collisions in the -th row of\r\nthe matrix . More specific, if there is at least one 1 or 3 at -th row,\r\nthen -th car isnât good (it was turned over in at least one collision).\r\nOtherwise, -th car is good. We just need to check this condition for\r\neach car.\r\n",
    "hint": []
}