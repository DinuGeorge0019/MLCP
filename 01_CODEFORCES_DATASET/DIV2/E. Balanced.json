{
    "link": "https://codeforces.com//contest/2032/problem/E",
    "problemId": "2994608",
    "problem_idx": "E",
    "shortId": "2032E",
    "contest_number": "2032",
    "problem_submissions": {
        "F": [
            289267915,
            289277706,
            289232912,
            289267377,
            291314197,
            289416021
        ],
        "E": [
            289238022,
            289262776,
            289255223,
            289258448,
            289250787,
            289260574,
            289261929,
            289227660,
            289263018,
            289263597,
            289263187,
            289266715,
            289259935,
            289271752,
            289266962,
            289268830,
            289269008,
            289265714
        ],
        "D": [
            289731015,
            289233613,
            289264637,
            289214258,
            289228700,
            289223391,
            289226883,
            289280487,
            289241431,
            289231526,
            289229626,
            289234786,
            289242007,
            289228890,
            289240630,
            289239305,
            289231442,
            289232355
        ],
        "B": [
            289203679,
            289271925,
            289191670,
            289200056,
            289196726,
            289200003,
            289197742,
            289196982,
            289194362,
            289197275,
            289201147,
            289202156,
            289199141,
            289200655,
            289202275,
            289195764
        ],
        "C": [
            289193496,
            289267532,
            289198910,
            289207633,
            289201326,
            289203591,
            289285062,
            289204577,
            289220034,
            289205439,
            289204433,
            289208681,
            289194187,
            289211250,
            289206397,
            289208627,
            289215203
        ],
        "A": [
            289187421,
            289273450,
            289186675,
            289187594,
            289186664,
            289189130,
            289187996,
            289189265,
            289187088,
            289189596,
            289187843,
            289188574,
            289187095,
            289189623,
            289187877,
            289187863
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/135622",
    "editorial": "To simplify this problem a little bit before starting, we will\r\ntemporarily allow \"negative\" operation: choose an index and increase by\r\n, by , and by . This is counted as operation on index . Should we get\r\nnegative elements in array in the end, we can normalize it just fine by\r\nsubtracting all with so that the final array is valid itâs trivial to\r\nprove that applying the same amount of operations in all indices does\r\nnot change the relative difference between any two values in the\r\narray.Imagine we have and array where ; i.e., a trench. This array\r\nalways has at least one solution: try to balance and by adding an amount\r\nof operation on either side based on their difference here we have\r\nsomething weâll denote as a \"balanced trench\", then add another amount\r\nof operations on index to balance them three, and due to the cyclic\r\nnature of .In fact, every array with , without regards to value\r\nintensity, can be thought of this form if is higher than both and , the\r\nact of \"raising\" is actually applying a negative amount of operations to\r\nindex .How to make a \"balanced trench\" for ?At least, we can balance and\r\nin the same fashion as we did for . Can we balance and without breaking\r\nthe balance we achieved between and ?Assuming we have an array .By\r\nlogic, we want to increase the value of index .Applying an operation to\r\nindex wonât do, as the new array would be . We are balancing the inner\r\nelements by sacrificing the outer ones.Applying an operation to index\r\nalso wonât do as it increases both sides.Applying an operation to index\r\nwill make the array become . By applying another operation to index ,\r\nweâll reach our desired goal with array .In fact, a series of operations\r\nin \"consecutive\" indices of the same parity would have this effect,\r\nregardless of how long that series is.To be precise, without loss of\r\ngenerality, a series of operations in indices , with , will increase and\r\nby , and all values with indices in range by .The catch here is that we\r\nmitigate unit of difference between sides with each operation series by\r\nadding just unit to the higher side, while the corresponding other would\r\nbe further beyond the lower side.If we aim to balance the sides from\r\noutwards to inwards, that exceeding will either fall into a\r\ndeeper-inwards layer, or the center of the array (since is odd), which\r\nwill not harm whatever we have achieved at first.Take an example with\r\narray . First, weâll balance index and index . We can simply apply\r\noperations to index . The new array would be . Then, weâll balance index\r\nand index . From index , weâll move to the left until it reaches index ,\r\nand apply operations for every steps. In other words, apply operations\r\nto index and operations to index . This array is now a balanced trench:\r\n. Now, achieving the desired array (weâll call it a \"plateau\") from a\r\nbalanced trench is easy: starting from the rightmost element of the left\r\nside before the center going leftwards, compare the value to its\r\nadjacent element to the right, and apply a corresponding amount of\r\noperations.Now, take the balanced trench we just acquired. First, weâll\r\ncheck index . Clearly, we want to rise index to close the unit gap, thus\r\nweâll apply operations to index . The new array will become . Then,\r\nweâll check index . Our objective is to decrease for all elements with\r\nindices in range . Using the similar operation series as discussed\r\nearlier, this can be done like this: apply operations to index , then\r\napply operations to index . The final array will be . That operation\r\nseries can be used here because the range of elements changing by units\r\nper series has an odd size, and since weâre growing the plateau from the\r\ncenter point outwards, its size is always odd as well. With this, the\r\nnon-normalized array will be .Implementing this method can be separated\r\ninto two separate steps: Step (creating the balanced trench): for each\r\npair of indices with difference , apply operations for each index of the\r\ncyclic range with step . Step (creating the plateau): for each pair of\r\nindices with difference , apply operations for each index of the range\r\nwith step . Some extra notes: Each step requires an independent\r\nprefix-sum structure to quickly maintain the operation updates. Notice\r\nthat the prefix sum here takes account of parity, since only the other\r\nindex in a range is updated, not every one of them. Remember that after\r\neach index considered, its value will alter based on the amount of\r\noperations just applied on it, so keep track of it properly. To avoid\r\nconfusion, itâs advised to apply the operations of step directly into\r\narray before proceeding with step . Remember to normalize array before\r\noutputting to get rid of negative values. Refer to the model solution\r\nfor more details. Time complexity: .\r\n",
    "name": "E. Balanced",
    "statement": "You are given a array a with n elements, where n is . In each operation,\r\nyou can do the following: Choose an index 1\r\nle i\r\nle n and increase a_{i - 1} by 1, a_i by 2, and a_{i + 1} by 1. The\r\nelement before the first element is the last element because this is a\r\ncyclic array. A cyclic array is called if all its elements are equal to\r\neach other.Find any sequence of operations to make this cyclic array\r\nbalanced or determine that it is impossible. Please note that you have\r\nto minimize the number of operations.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;int t, n;long long a[1000020];long long s[1000020];int main(){\tcin >> t;\tfor (int tt = 0; tt < t; tt++)\t{\t\tcin >> n;\t\tfor (int i = 0; i < n; i++)\t\t{\t\t\tcin >> a[i];\t\t}\t\tfor (int i = 0; i < 2 * n + 10; i++)\t\t{\t\t\ts[i] = 0;\t\t}\t\tfor (int i = 0; i < n - 1; i++)\t\t{\t\t\ts[i + 1] -= a[i];\t\t\ts[i + 2 + n] += a[i];\t\t\ta[i + 1] -= a[i];\t\t\ta[i] = 0;\t\t}\t\tfor (int i = 0; i < n - 1; i += 2)\t\t{\t\t\ts[i + 1] += a[n - 1];\t\t\ts[i + 2 + n] -= a[n - 1];\t\t}\t\tfor (int i = 0; i < 2 * n; i++)\t\t{\t\t\ts[i + 2] += s[i];\t\t}\t\tfor (int i = n; i < 2 * n; i++)\t\t{\t\t\ts[i % n] += s[i];\t\t}\t\tlong long mn = *min_element(s, s + n);\t\tfor (int i = 0; i < n; i++)\t\t{\t\t\ts[i] -= mn;\t\t\tprintf(\"%lld \", s[i]);\t\t}\t\tprintf(\"\\n\");\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Balanced.json",
    "hint": [
        "Hint #1 Why is odd? Does it imply anything of the availability of a solution?",
        "Hint #2 is trivial. Try to solve this problem if and .",
        "Hint #3 Try to solve this problem for any array with . Is there any way to solve this without going pass a state of (or or )?",
        "Hint #4 Assume that , and . Now refer to hint #2, can you see any similarity in the solution?",
        "Hint #5 Refer to hint #4. What would happen if we apply an operation to index and another to index ?",
        "Hint #6 For any array with , how would you convert it into the form stated in hint #4?",
        "Hint #7 Refer to hint #6. How would you make and ? Does the fact that is odd help in any way?",
        "Hint #8 Can you draw a generalized conclusion?"
    ]
}