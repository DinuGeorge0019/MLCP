{
    "link": "https://codeforces.com//contest/200/problem/D",
    "problemId": "1453",
    "problem_idx": "D",
    "shortId": "200D",
    "contest_number": "200",
    "problem_submissions": {
        "B": [
            1825841,
            1826464,
            1826083,
            1826275,
            1826382,
            1825859,
            1826268,
            1825884,
            1825868,
            1825906,
            1826093,
            1825853,
            1826140,
            1826219,
            1826016
        ],
        "D": [
            1827953,
            1827519,
            1828417,
            1827605,
            1827984,
            1827121,
            1828276,
            1828188,
            1828202,
            1828182,
            1828229,
            1828355,
            1828376,
            1828201
        ],
        "C": [
            1827310,
            1827007,
            1827388,
            1827250,
            1827071,
            1827751,
            1827110,
            1827499,
            1827231,
            1827512,
            1827236,
            1827297,
            1827317,
            1827455
        ],
        "E": [
            1831278,
            1831185,
            1829707
        ],
        "A": []
    },
    "name": "D. Programming Language",
    "statement": "Recently, Valery have come across an entirely new programming language.\r\nMost of all the language attracted him with template functions and\r\nprocedures. Let us remind you that templates are tools of a language,\r\ndesigned to encode generic algorithms, without reference to some\r\nparameters (e.g., data types, buffer sizes, default values).Valery\r\ndecided to examine template procedures in this language in more detail.\r\nThe description of a template procedure consists of the procedure name\r\nand the list of its parameter types. The generic type parameters can be\r\nused as parameters of template procedures.A procedure call consists of a\r\nprocedure name and a list of variable parameters. Letâ€™s call a procedure\r\nfor this call if the following conditions are fulfilled: its name equals\r\nto the name of the called procedure; the number of its parameters equals\r\nto the number of parameters of the procedure call; the types of\r\nvariables in the procedure call match the corresponding types of its\r\nparameters. The variable type matches the type of a parameter if the\r\nparameter has a generic type or the type of the variable and the\r\nparameter are the same. You are given a description of some set of\r\ntemplate procedures. You are also given a list of variables used in the\r\nprogram, as well as direct procedure calls that use the described\r\nvariables. For each call you need to count the number of procedures that\r\nare suitable for this call.\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<map>\n#include<vector>\n#include<string>\n#include<string.h>\n#include<utility>\nusing namespace std;\nmap<string,vector<vector<string> > > funcs;\nmap<string,string> type;\nchar s[1000];\nstring removeSp(char *s)\n{\n\tstring res;\n\tint l=strlen(s);\n\tfor(int i=0;i<l;i++)\n\t{\n\t\tif(s[i]!=' ')\n\t\t{\n\t\t\tres.push_back(s[i]);\n\t\t}\n\t}\n\treturn res;\n}\n\npair<string, vector<string> > parses(string s)\n{\n\tint idx=0;\n\tstring name=\"\";\n\tvector<string> types;\n\twhile(s[idx]!='(')\n\t{\n\t\tname.push_back(s[idx]);\n\t\t++idx;\n\t}\n\t++idx;\n\twhile(s[idx]!=')')\n\t{\n\t\tstring type=\"\";\n\t\twhile(s[idx]!=',' && s[idx]!=')')\n\t\t{\n\t\t\ttype.push_back(s[idx]);\n\t\t\t++idx;\n\t\t}\n\t\ttypes.push_back(type);\n\t\tif(s[idx]!=')')++idx;\n\t}\n\treturn make_pair(name,types);\n}\n\nvoid parsetype(string s)\n{\n   string Type=\"\";\n   string var=\"\";\n   int idx=0;\n   int L=s.length();\n   while(s[idx]==' ')++idx;\n   while(s[idx]!=' ')\n   {\n\t   Type.push_back(s[idx]);\n\t   ++idx;\n   }\n   while(s[idx]==' ')++idx;\n   while(idx!=L && s[idx]!=' ')\n   {\n\t   var.push_back(s[idx]);\n\t   ++idx;\n   }\n   type[var]=Type;\n}\nbool match(string &s1,string &s2)\n{\n\treturn s1==s2 || s2==\"T\";\n}\nbool matchV(vector<string> &V1,vector<string> &V2)\n{\n\tif(V1.size()!=V2.size())return false;\n\tfor(int i=0;i<V1.size();i++)\n\t{\n\t\tif(!match(type[V1[i]],V2[i]))return false;\n\t}\n\treturn true;\n}\nint calc (string name, vector<string> type)\n{\n\tvector<vector<string> > cur=funcs[name];\n\tint answ=0;\n\tfor(int i=0;i<cur.size();i++)\n\t{\n\t\tif(matchV(type,cur[i]))++answ;\n\t}\n\treturn answ;\n}\nint main()\n{\n  \n\tgets(s);\n\tint n;\n\tsscanf(s,\"%d\",&n);\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tgets(s);\n\t\n\t\tstring rs=removeSp(s);\n\t\tpair<string,vector<string> > newt =parses(rs.substr(4));\n\t\tfuncs[newt.first].push_back(newt.second);\n\t}\n\n\tgets(s);\n\tint m;\n\tsscanf(s,\"%d\",&m);\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tgets(s);\n\t\tparsetype(s);\n\t}\n\tint k;\n\tgets(s);\n\n\tsscanf(s,\"%d\",&k);\n\n\tfor(int i=0;i<k;i++)\n\t{\n\t\tgets(s);\n\t    string rs=removeSp(s);\n\t\tpair<string,vector<string> > newt =parses(rs);\n\t\tprintf(\"%d\\n\",calc(newt.first,newt.second));\n\n\t}\n\n\n\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "expression parsing",
        "implementation"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Programming Language.json",
    "editorial_link": "https://codeforces.com//blog/entry/4769",
    "editorial": "In this task were given the list of template functions. Each function\r\nhave its name and the list of types of arguments (also it can be used\r\nuniversal type). Also there were given set of variables and thier types,\r\nand some queries. Each query is function, which has name and list of\r\narguments. For each query you had to find, how many functions from the\r\ngiven list fit to the function from query. There fit means that\r\nfunctions have the same name, same number of arguments and types of all\r\narguments also equal. For solving this problem it is needed to implement\r\ncomparing of functions. Constrains gave the possibility to brute-force\r\nfunction from the given list and check if the names and arguments of\r\nfunctions are equal.\r\n",
    "hint": []
}