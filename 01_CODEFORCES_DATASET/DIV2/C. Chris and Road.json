{
    "link": "https://codeforces.com//contest/703/problem/C",
    "problemId": "67403",
    "problem_idx": "C",
    "shortId": "703C",
    "contest_number": "703",
    "problem_submissions": {
        "E": [
            19666489,
            19673872
        ],
        "B": [
            19626552,
            19623646,
            19623489,
            19622672,
            19623589,
            19622607,
            19630316,
            19626462,
            19622834,
            19627334,
            19621557,
            19624072,
            19622040,
            19636121,
            19621168,
            19623567,
            19627920,
            19622029,
            19622154,
            19622540
        ],
        "D": [
            19626399,
            19625673,
            19630973,
            19636020,
            19629091,
            19634472,
            19637884,
            19624772,
            19628022,
            19634609,
            19626277,
            19629769,
            19629743,
            19636886,
            19631115,
            19635175,
            19634015,
            19631464,
            19625267,
            19625595,
            19625868
        ],
        "C": [
            19623139,
            19633081,
            19627637,
            19624674,
            19630730,
            19625930,
            19632821,
            19631298,
            19627565,
            19632128,
            19636417,
            19634592,
            19629638,
            19625401,
            19632242,
            19634683,
            19635534
        ],
        "A": [
            19617844,
            19618704,
            19618318,
            19617935,
            19617774,
            19620750,
            19618191,
            19619005,
            19619467,
            19627709,
            19617913,
            19620674,
            19618195,
            19621709,
            19617804,
            19620263,
            19618582,
            19620732,
            19617828,
            19618666
        ]
    },
    "name": "C. Chris and Road",
    "statement": "And while Mishka is enjoying her trip...Chris is a little brown bear. No\r\none knows, where and when he met Mishka, but for a long time they are\r\ntogether (excluding her current trip). However, best friends are\r\nimportant too. John is Chris\u2019 best friend.Once walking with his friend,\r\nJohn gave Chris the following problem:At the infinite horizontal road of\r\nwidth , bounded by lines and , there is a bus moving, presented as a\r\nconvex polygon of vertices. The bus moves continuously with a constant\r\nspeed of in a straight line in direction of decreasing coordinates, thus\r\nin time of its points are changing. Formally, after time each of\r\ncoordinates of its points will be decreased by .There is a pedestrian in\r\nthe point , who can move only by a vertical pedestrian crossing,\r\npresented as a segment connecting points and with any speed not\r\nexceeding . Thus the pedestrian can move only in a straight line in any\r\ndirection with any speed not exceeding and not leaving the road borders.\r\nThe pedestrian can instantly change his speed, thus, for example, he can\r\nstop instantly.Please look at the sample note picture for better\r\nunderstanding.We consider the pedestrian is , if at any moment the point\r\nhe is located in lies the bus polygon (this means that if the point lies\r\non the polygon vertex or on its edge, the pedestrian is not hit by the\r\nbus).You are given the bus position at the moment . Please help Chris\r\ndetermine minimum amount of time the pedestrian needs to cross the road\r\nand reach the point and not to be hit by the bus.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define FZ(n) memset((n),0,sizeof(n))\n#define FMO(n) memset((n),-1,sizeof(n))\n#define MC(n,m) memcpy((n),(m),sizeof(n))\n#define F first\n#define S second\n#define MP make_pair\n#define PB push_back\n#define ALL(x) begin(x),end(x)\n#define IOS do { ios_base::sync_with_stdio(0);cin.tie(0); } while (0)\n#define SZ(x) ((int)(x).size())\n#ifndef OFFLINE\n    #define ONLINE_JUDGE\n#endif\n#ifdef ONLINE_JUDGE\n#define FILEIO(name) \\\n    do { \\\n        freopen(name\".in\", \"r\", stdin); \\\n        freopen(name\".out\", \"w\", stdout); \\\n    } while (0)\n#else\n    #define FILEIO(name) do { } while(0)\n#endif\n\n#define _TOKEN_CAT2(x, y) x ## y\n#define _TOKEN_CAT(x, y) _TOKEN_CAT2(x, y)\n#define _MACRO_OVERL3(_1, _2, _3, _N, ...) _N\n#define _RANGE1(a) int _TOKEN_CAT(_t, __LINE__)=0; _TOKEN_CAT(_t, __LINE__)<(a); (_TOKEN_CAT(_t, __LINE__))++\n#define _RANGE2(i, a) int (i)=0; (i)<(a); (i)++\n#define _RANGE3(i, a, b) int (i)=(a); (i)!=(b); (i)+=((b)>(a)?1:-1)\n#define loop(...) for (_MACRO_OVERL3(__VA_ARGS__, _RANGE3, _RANGE2, _RANGE1)(__VA_ARGS__))\n\n#ifdef OFFLINE\ntemplate<typename T>\nvoid _dump(const char* s, T&& head) { \n    cerr << s << \" = \" << head << \" <<\" << endl; \n}\n\ntemplate<typename T, typename... Args>\nvoid _dump(const char* s, T&& head, Args&&... tail) {\n    int c = 0;\n    while (*s!=',' || c!=0) {\n        if (*s=='(' || *s=='[' || *s=='{' || *s=='<') c++;\n        if (*s==')' || *s==']' || *s=='}' || *s=='>') c--;\n        cerr << *s++;\n    }\n    cerr << \" = \" << head << \", \";\n    _dump(s+1, tail...);\n}\n\n#define dump(...) do { \\\n    cerr << \"\\033[32m>> \" << __LINE__ << \": \" << __PRETTY_FUNCTION__ << endl; \\\n    cout << \"   \"; \\\n    _dump(#__VA_ARGS__, __VA_ARGS__); \\\n    cout << \"\\033[0m\"; \\\n} while (0)\n#else\n#define dump(...) \n#endif\n\n#define au auto\ntemplate<class T>\nusing vec = vector<T>;\n\ntemplate<typename Iter>\nostream& _IterOutput_(ostream &o, Iter b, Iter e, const string ss=\"\", const string se=\"\") {\n    o << ss;\n    for (auto it=b; it!=e; it++) o << (it==b ? \"\" : \", \") << *it;\n    return o << se;\n}\n\ntemplate<typename T1, typename T2>\nostream& operator << (ostream &o, const pair<T1, T2> &pair) {\n    return o << \"(\" << pair.F << \", \" << pair.S << \")\";\n}\n\ntemplate<typename T>\nostream& operator << (ostream &o, const vector<T> &vec) {\n    return _IterOutput_(o, ALL(vec), \"[\", \"]\");\n}\n\ntemplate<typename T>\nostream& operator << (ostream &o, const set<T> &st) {\n    return _IterOutput_(o, ALL(st), \"{\", \"}\");\n}\n\ntemplate<typename T, size_t N>\nostream& operator << (ostream &o, const array<T, N> &arr) {\n    return _IterOutput_(o, ALL(arr), \"|\", \"|\");\n}\n\ntemplate<typename T1, typename T2>\nostream& operator << (ostream &o, const map<T1, T2> &mp) {\n    o << \"{\";\n    for (auto it=mp.begin(); it!=mp.end(); it++) {\n        o << (it==mp.begin()?\"\":\", \") << it->F << \":\" << it->S;\n    }\n    o << \"}\";\n    return o;\n}\n\nvoid lucky_test() {\n    srand(time(NULL));\n    long long a = rand(), b = rand();\n    if ((a * 32768 + b) % 100000 == 0) {\n        cout << \"Not lucky\" << endl;\n        exit(0);\n    }\n}\n\nusing pdd = pair<double, double>;\n\nconst double INF = 1e15;\nint32_t main() {\n    IOS;\n    lucky_test();\n\n    int N;\n    double W, V, U;\n    cin >> N >> W >> V >> U;\n\n    double mt = INF, xt = 0.0;\n\n    for (int i=0; i<N; i++) {\n        double x, y;\n        cin >> x >> y;\n        \n        double t = x / V - y / U;\n        mt = min(t, mt);\n        xt = max(t, xt);\n    }\n\n    const double EPS = 1e-12;\n\n    cout << fixed << setprecision(10);\n    if (mt >= -EPS) {\n        cout << W / U << endl;\n    } else {\n        cout << W/U + xt << endl;\n    }\n\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "implementation"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Chris and Road.json",
    "editorial_link": "https://codeforces.com//blog/entry/46434",
    "editorial": "Imagine that the bus stands still and we move \"to the right\" with a\r\nconstant speed . Then it\u00e2\u0080\u0099s not hard to see that movement along the line\r\nis optimal, where time in which we begin our movement. In this way\r\nanswer is . If , then we start our movement immediately. In this case we\r\nneed to check that our line doesn\u00e2\u0080\u0099t intersect polygon (either we can\r\ncross the road in front of a bus, or the bus is gone). Otherwise we need\r\nto find such minimal that our line is tangent to the polygon. It can be\r\ndone with binary search. Complexity . Exercise: Solve this problem in .\r\n"
}