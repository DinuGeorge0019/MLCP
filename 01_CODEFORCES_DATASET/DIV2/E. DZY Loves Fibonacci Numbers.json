{
    "link": "https://codeforces.com//contest/447/problem/E",
    "problemId": "11398",
    "problem_idx": "E",
    "shortId": "447E",
    "contest_number": "447",
    "problem_submissions": {
        "E": [
            7084046,
            7087165,
            7086012,
            7107031,
            7088335
        ],
        "D": [
            7080732,
            7079815,
            7083822,
            7083834,
            7085600,
            7097008,
            7086688,
            7084686,
            7086053,
            7083895,
            7086461,
            7089129,
            7088930,
            7089222,
            7089284,
            7087016,
            7089423
        ],
        "C": [
            7078096,
            7076875,
            7077066,
            7078076,
            7077877,
            7079534,
            7081397,
            7082455,
            7080387,
            7085378,
            7082941,
            7079168,
            7082968,
            7081821,
            7082878,
            7082053,
            7087589,
            7079590
        ],
        "B": [
            7076707,
            7075254,
            7075472,
            7076218,
            7075554,
            7075342,
            7077508,
            7076837,
            7076067,
            7075642,
            7075896,
            7082177,
            7078872,
            7077244,
            7076799,
            7078894,
            7077501,
            7076959
        ],
        "A": [
            7074384,
            7074446,
            7074355,
            7074389,
            7074552,
            7074411,
            7075432,
            7075052,
            7074452,
            7074502,
            7074400,
            7080033,
            7075081,
            7075723,
            7074815,
            7076200,
            7075918,
            7075090
        ]
    },
    "name": "E. DZY Loves Fibonacci Numbers",
    "statement": "In mathematical terms, the sequence of Fibonacci numbers is defined by\r\nthe recurrence relation DZY loves Fibonacci numbers very much. Today DZY\r\ngives you an array consisting of integers: . Moreover, there are\r\nqueries, each query has one of the two types: Format of the query \"\". In\r\nreply to the query, you need to add to each element , where . Format of\r\nthe query \"\". In reply to the query you should output the value of\r\nmodulo . Help DZY reply to all the queries.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAXN 300015\n\n#define mo 1000000009LL\n\nchar ch;\n\nvoid read(int &x)\n{\n    x=0;\n    ch=getchar();\n    while (ch<=32) ch=getchar();\n    while (ch>32) x=x*10+ch-48,ch=getchar();\n}\n\nint a1[MAXN],a2[MAXN];\nint s1[MAXN],s2[MAXN];\n\nvoid pre()\n{\n    int i;\n    int a=1,b=0;\n    for (i=1;i<=300000+5;i++) {\n        a1[i]=a;a2[i]=b;\n        s1[i]=(s1[i-1]+a1[i])%mo;\n        s2[i]=(s2[i-1]+a2[i])%mo;\n        int c=(a+b)%mo;\n        a=b;b=c;\n    }\n}\n\nstruct data {\n    int a,b;\n    int sum(int x)\n    {\n        return (1LL*s1[x]*a+1LL*s2[x]*b)%mo;\n    }\n    data getx(int x)\n    {\n        return (data){(1LL*a1[x]*a+1LL*a2[x]*b)%mo,(1LL*a1[x+1]*a+1LL*a2[x+1]*b)%mo};\n    }\n};\n\ninline data operator +(const data &a,const data &b)\n{\n    return (data){(a.a+b.a)%mo,(a.b+b.b)%mo};\n}\n\nstruct tnode {\n    tnode *l,*r;\n    int sum;\n    data tag;\n} *tot, *root;\n\ntnode _tr[MAXN*2];\n\nvoid addtag(tnode *a,data tag,int size)\n{\n    a->sum=(a->sum+tag.sum(size))%mo;\n    a->tag=a->tag+tag;\n}\n\nvoid down(tnode *a,int mid,int mid1)\n{\n    addtag(a->l,a->tag,mid);\n    addtag(a->r,a->tag.getx(mid+1),mid1);\n    a->tag=(data){0,0};\n}\n\ntnode * build(int n)\n{\n    tnode *ret=++tot;\n    if (n==1) {\n        *ret=(tnode){NULL,NULL,0,(data){0,0}};\n        return ret;\n    } else {\n        int mid=n>>1;\n        *ret=(tnode){build(mid),build(n-mid),0,(data){0,0}};\n        return ret;\n    }\n}\n\nvoid __add(tnode *a,int l,int r,int size,data d)\n{\n    if (l==1 && r==size) {\n        a->sum=(a->sum+d.sum(size))%mo;\n        a->tag=a->tag+d;\n        return;\n    }\n    int mid=size>>1;\n    down(a,mid,size-mid);\n    if (r<=mid) {\n        __add(a->l,l,r,mid,d);\n    } else if (l>mid) {\n        __add(a->r,l-mid,r-mid,size-mid,d);\n    } else {\n        __add(a->l,l,mid,mid,d);\n        __add(a->r,1,r-mid,size-mid,d.getx(mid+1-l+1));\n    }\n    a->sum=(a->l->sum+a->r->sum)%mo;\n}\n\nint __que(tnode *a,int l,int r,int size)\n{\n    if (l==1 && r==size) {\n        return a->sum;\n    }\n    int mid=size>>1;\n    down(a,mid,size-mid);\n    if (r<=mid) {\n        return __que(a->l,l,r,mid);\n    } else if (l>mid) {\n        return __que(a->r,l-mid,r-mid,size-mid);\n    } else {\n        return (__que(a->l,l,mid,mid)+__que(a->r,1,r-mid,size-mid))%mo;\n    }\n}\n\nint n,q;\nint a[MAXN],s[MAXN];\n\nvoid add(int l,int r)\n{\n    __add(root,l,r,n,(data){1,1});\n}\n\nint _que(int l,int r)\n{\n    return __que(root,l,r,n);\n}\n\nint que(int l,int r)\n{\n    int ret=s[r]-s[l-1];\n    ret+=_que(l,r);\n    ret%=mo;\n    return (ret+mo)%mo;\n}\n\nint main()\n{\n    read(n);read(q);\n    int i;\n    for (i=1;i<=n;i++) {\n        read(a[i]);\n        s[i]=(s[i-1]+a[i])%mo;\n    }\n    pre();\n    tot=_tr;\n    root=build(n);\n    while (q--) {\n        int op,l,r;\n        read(op);read(l);read(r);\n        if (op==1) {\n            add(l,r);\n        } else {\n            printf(\"%d\\n\",que(l,r));\n        }\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "math"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. DZY Loves Fibonacci Numbers.json",
    "editorial_link": "https://codeforces.com//blog/entry/13036",
    "editorial": "As we know, \n\nFortunately, we find that \n\nSo, \n\nWith multiplicative inverse, we find,\n\n\n\n\n\n\n\nNow, \n\nAs you see, we can just maintain the sum of a Geometric progression \n\nThis is a simple problem which can be solved with segment tree in .",
    "hint": []
}