{
    "link": "https://codeforces.com//contest/1982/problem/D",
    "problemId": "2717389",
    "problem_idx": "D",
    "shortId": "1982D",
    "contest_number": "1982",
    "problem_submissions": {
        "F": [
            267371295,
            267368983,
            267386192,
            267383481,
            267392812,
            267381747,
            267380349,
            267448537,
            267389268,
            267391412,
            267465375,
            267464196,
            267398754,
            267397907,
            267394247,
            267400370,
            267398779,
            267402058,
            267403186,
            267394811,
            267400611,
            267395899,
            267401217
        ],
        "E": [
            267356282,
            267356215,
            267370786,
            267372088,
            267363741,
            267371679,
            267383797,
            267376185,
            267367589,
            267367768,
            267377973,
            267379190,
            267379180,
            267375802,
            267376857,
            267377392,
            267370644,
            267387467,
            267382680,
            267383608
        ],
        "D": [
            267346551,
            267374785,
            267348133,
            267346019,
            267349259,
            267353213,
            267344889,
            267351505,
            267357173,
            267352582,
            267348135,
            267356257,
            267354124,
            267361818,
            267348920,
            267361280,
            267376940,
            267358334,
            267368263,
            267363956
        ],
        "C": [
            267340189,
            267360218,
            267340523,
            267338463,
            267344601,
            267345277,
            267337376,
            267446413,
            267343870,
            267348671,
            267345336,
            267334950,
            267349986,
            267345653,
            267351831,
            267339030,
            267352675,
            267359528,
            267350804,
            267359049,
            267348772
        ],
        "B": [
            267337179,
            267335525,
            267333706,
            267334809,
            267331361,
            267341628,
            267345760,
            267336279,
            267343504,
            267333937,
            267331022,
            267335181,
            267340882,
            267340337,
            267334531,
            267343773,
            267346672,
            267347539,
            267353296,
            267342437
        ],
        "A": [
            267328525,
            267326985,
            267328071,
            267327102,
            267327552,
            267328303,
            267347395,
            267326942,
            267331875,
            267328032,
            267327692,
            267327319,
            267328382,
            267327600,
            267327418,
            267330803,
            267331257,
            267327782,
            267348137,
            267328398
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/130839",
    "editorial": "First, let\u00e2\u0080\u0099s calculate the current difference between the heights of\r\ndifferent types of mountains, denoted as .Then, for each submatrix of\r\nsize , we will calculate how the difference in the sums of heights of\r\ndifferent types of mountains changes. That is, for each submatrix, we\r\nwill calculate the difference in the number of zeros and ones in it, let\r\nthese values be and there will be . This can be done using\r\ntwo-dimensional prefix sums or a \"sliding window\".After that, formally\r\nwe can write the following equation:, where , , ..., are constants that\r\nNikita chose for a specific submatrix ( if we did not transform using\r\nthis submatrix). This is very similar to a Diophantine equation, in\r\nfact, it is, but with unknowns.What can be said about the existence of a\r\nsolution to this equation in integers? For this, it is sufficient that\r\nIt is worth mentioning that it is necessary to carefully handle the case\r\nwhen all , and also not to forget about the case when is initially equal\r\nto .In total, the solution is in\r\n",
    "name": "D. Beauty of the mountains",
    "statement": "Nikita loves mountains and has finally decided to visit the Berlyand\r\nmountain range! The range was so beautiful that Nikita decided to\r\ncapture it on a map. The map is a table of n rows and m columns, with\r\neach cell containing a non-negative integer representing the height of\r\nthe mountain.He also noticed that mountains come in two types: With\r\nsnowy caps. Without snowy caps. Nikita is a very pragmatic person. He\r\nwants the sum of the heights of the mountains with snowy caps to be\r\nequal to the sum of the heights of the mountains without them. He has\r\narranged with the mayor of Berlyand, Polikarp Polikarpovich, to allow\r\nhim to transform the landscape.Nikita can perform transformations on\r\nsubmatrices of size k\r\ntimes k as follows: he can add an integer constant c to the heights of\r\nthe mountains within this area, but the type of the mountain remains\r\nunchanged. Nikita can choose the constant c independently for each\r\ntransformation. .Before making the transformations, Nikita asks you to\r\nfind out if it is possible to achieve equality of the sums, or if it is\r\nimpossible. It doesn\u2019t matter at what cost, even if the mountains turn\r\ninto canyons and have negative heights.If only one type of mountain is\r\nrepresented on the map, then the sum of the heights of the other type of\r\nmountain is considered to be zero.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;\u00a0#define ar array#define sz(v) int(v.size())typedef long long ll;\u00a0const int mxN=500;int N,M,k;int a[mxN][mxN];int c[mxN][mxN], ps[mxN][mxN];\u00a0int qry(int i1, int j1, int i2, int j2) {    int x=ps[i2][j2];    if (i1) x-=ps[i1-1][j2];    if (j1) x-=ps[i2][j1-1];    if (i1&&j1) x+=ps[i1-1][j1-1];    return x;}\u00a0void solve() {    cin>>N>>M>>k;    for (int i=0; i<N; i++) for (int j=0; j<M; j++) cin>>a[i][j];    ll sum=0;    for (int i=0; i<N; i++) {        string s; cin>>s;        for (int j=0; j<M; j++) {            c[i][j]=s[j]=='1'?1:-1;            sum+=c[i][j]*a[i][j];            ps[i][j]=c[i][j];            if (i) ps[i][j]+=ps[i-1][j];            if (j) ps[i][j]+=ps[i][j-1];            if (i&&j) ps[i][j]-=ps[i-1][j-1];        }    }    sum=abs(sum);    int g=0;    for (int i=0; i<N-k+1; i++) for (int j=0; j<M-k+1; j++) {        int x = qry(i,j,i+k-1,j+k-1);        g=gcd(g,abs(x));    }    if (!sum) cout << \"YES\\n\";    else if (!g) cout << \"NO\\n\";    else cout<<(sum%g?\"NO\\n\":\"YES\\n\");}\u00a0int main() {    ios::sync_with_stdio(0); cin.tie(0);    int T=1;    cin>>T;    while (T--) solve();}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "implementation",
        "math",
        "number theory"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Beauty of the mountains.json"
}