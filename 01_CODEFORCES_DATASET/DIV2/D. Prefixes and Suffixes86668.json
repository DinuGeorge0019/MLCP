{
    "link": "https://codeforces.com//contest/432/problem/D",
    "problemId": "9481",
    "problem_idx": "D",
    "shortId": "432D",
    "contest_number": "432",
    "problem_submissions": {
        "E": [
            6629542,
            6629685,
            6787172,
            6630011,
            12011414
        ],
        "D": [
            6626923,
            6625069,
            6624242,
            6625615,
            6626784,
            6627500,
            6627213,
            6627749,
            6627433,
            6627095,
            6625919,
            6626790,
            6628329,
            6627888,
            6627861,
            6629346,
            6627908,
            6626789,
            6628335
        ],
        "C": [
            6625922,
            6627708,
            6628444,
            6625084,
            6625495,
            6625430,
            6626041,
            6625379,
            6626502,
            6627502,
            6628640,
            6628030,
            6625935,
            6625367,
            6626856,
            6633716,
            6626069,
            6624111,
            6627225,
            6629433,
            6627012
        ],
        "B": [
            6622630,
            6623369,
            6622464,
            6622520,
            6623124,
            6622829,
            6622983,
            6623645,
            6623780,
            6622660,
            6624201,
            6623167,
            6623125,
            6623134,
            6623267,
            6625795,
            6625412,
            6624139,
            6623117,
            6624747
        ],
        "A": [
            6621909,
            6622385,
            6621900,
            6621957,
            6622065,
            6621901,
            6621989,
            6622108,
            6622047,
            6623481,
            6622838,
            6622310,
            6621964,
            6622183,
            6624704,
            6623532,
            6624976,
            6622988,
            6621991,
            6621961
        ]
    },
    "name": "D. Prefixes and Suffixes",
    "statement": "You have a string , where is the length of string , and its -th\r\ncharacter. Let’s introduce several definitions: A substring of string is\r\nstring . The prefix of string of length is string . The suffix of string\r\nof length is string . Your task is, for any prefix of string which\r\nmatches a suffix of string , print the number of times it occurs in\r\nstring as a substring.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nint a, b, c;\nint m[100001];\nint z[100001];\nstring s;\nvector<pair<int, int> > ans;\n\nint main(){\n    cin >> s;\n    int n = 0;\n    int last = -1;\n    for(int i = 1; i < s.size(); ++i){\n      if(last > i) z[i] = min(z[i - n], last - i);\n      while(i + z[i] < s.size() && s[i + z[i]] == s[z[i]]) ++z[i];\n      if(i + z[i] > last) last = i + z[i], n = i;\n    }\n   // for(int i = 0; i < s.size(); ++i)\n    //  cout << z[i] << ' ';\n    z[0] = s.size();\n    for(int i = 0; i < s.size(); ++i) m[z[i]]++;\n    for(int i = s.size(); i > 0; --i)\n      m[i - 1] += m[i];\n    for(int i = 1; i <= s.size(); ++i){\n      if(z[s.size() - i] == i)\n\tans.push_back(make_pair(i, m[i]));\n    }\n    cout << ans.size() << \"\\n\";\n    for(int i = 0; i < ans.size(); ++i)\n      cout << ans[i].first << ' ' << ans[i].second << \"\\n\";\n  \n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "string suffix structures",
        "strings",
        "two pointers"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Prefixes and Suffixes86668.json",
    "editorial_link": "https://codeforces.com//blog/entry/12310",
    "editorial": "The problem could be solved using different algorithms with z and prefix\r\nfunctions. Letâs describe the solution with prefix function of string\r\n.Calc prefix function and create a tree where vertices integers from to\r\n, edges from to for every . The root of the tree is . For every vertex\r\ncalc the number of values that is . Then for every calc the sum all\r\nvalues for every in to subtree of . The general answer to the problem\r\nis: Find all lenghts of the prefixes which matches the suffixes these\r\nvalues are , , , ... For every such length the answer to the problem is\r\n.\r\n",
    "hint": []
}