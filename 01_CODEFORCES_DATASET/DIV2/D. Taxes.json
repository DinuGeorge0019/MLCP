{"link": "https://codeforces.com//contest/735/problem/D", "problemId": "82049", "problem_idx": "D", "shortId": "735D", "contest_number": "735", "problem_submissions": {"E": [22551909], "D": [22544646, 22538932, 22538494, 22533130, 22538839, 22534703, 22542520, 22538073, 22538552, 22544184, 22540518, 22540226, 22540566, 22541948, 22536512, 22543846, 22534272, 22543891, 22542284, 22535111], "B": [22537273, 22532854, 22534320, 22538199, 22533929, 22532194, 22539115, 22533382, 22535165, 22534258, 22533972, 22533579, 22533796, 22532602, 22539678, 22534871, 22532255, 22533784, 22536534, 22532104], "C": [22534384, 22535405, 22546614, 22545073, 22541931, 22538563, 22536243, 22534983, 22543290, 22541842, 22536128, 22536857, 22538655, 22536562, 22534861, 22538350, 22539201, 22542576, 22543288, 22543269], "A": [22532849, 22530580, 22530636, 22535838, 22530703, 22530451, 22531034, 22531009, 22531797, 22531370, 22530550, 22530672, 22530851, 22530651, 22530865, 22531281, 22530612, 22530842, 22530502]}, "name": "D. Taxes", "statement": "Mr. Funt now lives in a country with a very specific tax laws. The total\r\nincome of mr. Funt during this year is equal to () burles and the amount\r\nof tax he has to pay is calculated as the maximum divisor of (not equal\r\nto , of course). For example, if then Funt has to pay burles, while for\r\nhe needs to pay and if he pays only burle.As mr. Funt is a very\r\nopportunistic person he wants to cheat a bit. In particular, he wants to\r\nsplit the initial in several parts (here is arbitrary, even is allowed)\r\nand pay the taxes for each part separately. He can\u2019t make some part\r\nequal to because it will reveal him. So, the condition should hold for\r\nall from to .Ostap Bender wonders, how many money Funt has to pay (i.e.\r\nminimal) if he chooses and optimal way to split in parts.\r\n", "solutions": ["#include <bits/stdc++.h>\n\n#define task \"DBG\"\n\nusing namespace std;\n\nint n;\n\nbool isP(int n) {\n  for (int i = 2; i*i <= n; i++)\n    if (n % i == 0) return false;\n  return true;\n}\n\nint dp(int n) {\n  if (isP(n)) return 1;\n  if (!(n & 1)) return 2;\n  if (isP(n - 2)) return 2;\n  return 3;\n}\n\nint solve() {\n  if (n % 2 == 0) {\n    if (n == 2) return cout << \"1\", 0;\n    else cout << \"2\", 0;\n  }\n\n  int ans = 0;\n  for ( ; n; ) {\n    ans++;\n    for (int i = n; i >= 1; i--)\n      if (isP(i) && n - i != 1) {\n        n -= i;\n        break;\n      }\n  }\n\n  cout << ans;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n  assert(freopen(task\".INP\", \"r\", stdin));\n  assert(freopen(task\".OUT\", \"w\", stdout));\n#endif // ONLINE_JUDGE\n\n  ios_base::sync_with_stdio(0); cin.tie(NULL);\n\n  cin >> n;\n  return cout << dp(n), 0;\n}\n\n\n"], "input": "", "output": "", "tags": ["math", "number theory"], "dificulty": "1600", "interactive": false}