{
    "link": "https://codeforces.com//contest/1316/problem/A",
    "problemId": "552820",
    "problem_idx": "A",
    "shortId": "1316A",
    "contest_number": "1316",
    "problem_submissions": {
        "F": [
            72472310,
            72461023,
            73149710,
            76233934,
            76759743,
            72468426
        ],
        "D": [
            72446577,
            72435880,
            72446350,
            72433935,
            72552354,
            72445851,
            72441671,
            72440731,
            72441946,
            72448620,
            72449884,
            72443275,
            72430235,
            72442450,
            72455002,
            72438222,
            72450604,
            72450271,
            72453451,
            72444636,
            72446410
        ],
        "E": [
            72439852,
            72445012,
            72437670,
            72448064,
            72552368,
            72441953,
            72444842,
            72445763,
            72447311,
            72441940,
            72445222,
            72448678,
            72435875,
            72451508,
            72441755,
            72436908,
            72445710,
            72444493,
            72446787,
            72453158,
            72452797
        ],
        "C": [
            72433832,
            72430966,
            72433288,
            72428640,
            72552344,
            72432747,
            72431625,
            72434362,
            72434375,
            72433220,
            72429941,
            72438552,
            72442079,
            72433103,
            72430036,
            72452619,
            72434221,
            72436747,
            72434315,
            72436157,
            72435969
        ],
        "B": [
            72429931,
            72429194,
            72429286,
            72432383,
            72552325,
            72429081,
            72434265,
            72430795,
            72431025,
            72431357,
            72428379,
            72429255,
            72460222,
            72429093,
            72433129,
            72438863,
            72431653,
            72431631,
            72430316,
            72431406,
            72429986
        ],
        "A": [
            72421838,
            72421944,
            72423224,
            72422468,
            72552315,
            72422813,
            72422138,
            72421848,
            72423996,
            72421816,
            72422254,
            72422463,
            72428261,
            72422024,
            72422458,
            72422846,
            72422294,
            72426353,
            72423021,
            72422856,
            72423629
        ]
    },
    "name": "A. Grade Allocation",
    "statement": "n students are taking an exam. The highest possible score at this exam\r\nis m. Let a_{i} be the score of the i-th student. You have access to the\r\nschool database which stores the results of all students.You can change\r\neach student’s score as long as the following conditions are satisfied:\r\nAll scores are integers 0\r\nleq a_{i}\r\nleq m The average score of the class doesn’t change. You are student 1\r\nand you would like to maximize your own score.Find the highest possible\r\nscore you can assign to yourself such that all conditions are satisfied.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\nint t;\nint n, m, x;\nint main( ) {\n\tscanf(\"%d\", &t);\n\twhile (t --) {\n\t\tscanf(\"%d %d\", &n, &m);\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i ++) {\n\t\t\tscanf(\"%d\", &x);\n\t\t\tsum += x;\n\t\t}\n\t\tprintf(\"%d\\n\", min(sum, m));\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Grade Allocation.json",
    "editorial_link": "https://codeforces.com//blog/entry/74493",
    "editorial": "Since the average score of the class must remain same ,this means the\r\nsum of the scores of all students in the class must remain same. We want\r\nto maximize the score of the first student and since the minimum score\r\nof each student can be zero we can add the scores of the rest of\r\nstudents to the first student as long as his score is less than or equal\r\nto m. Therefore the answer is Time complexity : per testcase\r\n",
    "hint": []
}