{
    "link": "https://codeforces.com//contest/1973/problem/B",
    "problemId": "2652011",
    "problem_idx": "B",
    "shortId": "1973B",
    "contest_number": "1973",
    "problem_submissions": {
        "F": [
            261463251,
            261436494,
            261787514
        ],
        "D": [
            261394881,
            261402242,
            261380949,
            261382024,
            261382530,
            261387010,
            261390196,
            261382271,
            261387986,
            261384447,
            261402787,
            261386421,
            261427816,
            261407792,
            261395337,
            261376975,
            261379252,
            261380684,
            261382950
        ],
        "E": [
            261381347,
            261382046,
            261401618,
            261402013,
            261401999,
            261406109,
            261402299,
            261407866,
            261402896,
            261405986,
            261394102,
            261405366,
            261389878,
            261408472,
            261404774,
            261590660
        ],
        "C": [
            261360567,
            261360988,
            261363426,
            261364691,
            261354543,
            261360787,
            261363933,
            261369573,
            261365792,
            261367077,
            261359236,
            261367488,
            261357141,
            261374894,
            261387975,
            261359851,
            261363374,
            261357155
        ],
        "B": [
            261348324,
            261350288,
            261353838,
            261351331,
            261349040,
            261350145,
            261349881,
            261347862,
            261350513,
            261350776,
            261350235,
            261356753,
            261350384,
            261354721,
            261390204,
            261350344,
            261351974,
            261347066
        ],
        "A": [
            261346207,
            261346661,
            261348023,
            288952169,
            261346140,
            261346181,
            261346010,
            261346089,
            261345101,
            261344789,
            261344990,
            261346630,
            261346138,
            261346691,
            261348987,
            261391373,
            261346139,
            261346040,
            261349777
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129556",
    "editorial": "Definition:We will say that the array is -lonely if is true for any two\r\npositive integers . Let be the maximum value an element in array can\r\nhave.\r\n",
    "name": "B. Cat, Fox and the Lonely Array",
    "statement": "Today, Cat and Fox found an array a consisting of n non-negative\r\nintegers. Define the of a as the positive integer k (1\r\nle k\r\nle n) such that for any two positive integers i and j (1\r\nleq i, j\r\nleq n - k +1), the following holds: a_i | a_{i+1} |\r\nldots | a_{i+k-1} = a_j | a_{j+1} |\r\nldots | a_{j+k-1}, where x | y denotes the bitwise OR of x and y. In\r\nother words, for every k consecutive elements, their bitwise OR should\r\nbe the same. Note that the loneliness of a is well-defined, because for\r\nk = n the condition is satisfied.Cat and Fox want to know how lonely the\r\narray a is. Help them calculate the loneliness of the found array.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>using namespace std;int n,a[101000],t[20];bool chk(int e){    memset(t,0,sizeof(t));    int oz=-1;    for(int i=1;i<=n;i++){        for(int j=0;j<20;j++)if((a[i]>>j)&1)t[j]++;        if(i>e){for(int j=0;j<20;j++)if((a[i-e]>>j)&1)t[j]--;}        if(i>=e){            int z=0;            for(int j=0;j<20;j++)if(t[j])z|=(1<<j);            if(oz!=-1&&oz!=z)return 0;            oz=z;        }    }    return 1;}int main(){    int T;scanf(\"%d\",&T);while(T--){        scanf(\"%d\",&n);for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);        int l=1,r=n,jx=n;while(l<=r){            int mi=(l+r)>>1;            if(chk(mi))jx=mi,r=mi-1;            else l=mi+1;        }        printf(\"%d\\n\",jx);    }    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "bitmasks",
        "data structures",
        "greedy",
        "math",
        "two pointers"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Cat, Fox and the Lonely Array.json"
}