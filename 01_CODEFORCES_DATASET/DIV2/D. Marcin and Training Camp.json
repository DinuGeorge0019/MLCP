{
    "link": "https://codeforces.com//contest/1230/problem/D",
    "problemId": "419098",
    "problem_idx": "D",
    "shortId": "1230D",
    "contest_number": "1230",
    "problem_submissions": {
        "F": [
            61160420,
            61168761,
            61169473,
            61163448,
            61168484,
            61211410,
            61166190,
            61161224
        ],
        "E": [
            61148718,
            61161040,
            61146705,
            61151905,
            61156612,
            61143760,
            61134387,
            61160007,
            61147362,
            61152540,
            61143988,
            61157501,
            61156272,
            61146445,
            61139279,
            61157405,
            61162378
        ],
        "D": [
            61141780,
            61141760,
            61139292,
            61144818,
            61153245,
            61138124,
            61148103,
            61186591,
            61153749,
            61148878,
            61139116,
            61159398,
            61147761,
            61146515,
            61163213,
            61156688,
            61153790,
            61144523
        ],
        "C": [
            61128802,
            61146533,
            61172060,
            61167384,
            61149264,
            61133355,
            61139896,
            61137699,
            61129905,
            61146775,
            61146749,
            61137639,
            61130666,
            61128891,
            61133021,
            61163475,
            61147427,
            61133523
        ],
        "B": [
            61122260,
            61138928,
            61125100,
            61135886,
            61136151,
            61126292,
            61136826,
            61131007,
            61122773,
            61127439,
            61129919,
            61122576,
            61124319,
            61122348,
            62114936,
            61124404,
            61125885,
            61125887,
            61124264
        ],
        "A": [
            61120076,
            61128524,
            61121738,
            61130255,
            61122144,
            61123763,
            61140465,
            61128200,
            61120371,
            61124618,
            61133127,
            61121262,
            61120693,
            61119937,
            62114885,
            61126319,
            61122327,
            61122607,
            61120311
        ]
    },
    "name": "D. Marcin and Training Camp",
    "statement": "Marcin is a coach in his university. There are n students who want to\r\nattend a training camp. Marcin is a smart coach, so he wants to send\r\nonly the students that can work calmly with each other.Let\u2019s focus on\r\nthe students. They are indexed with integers from 1 to n. Each of them\r\ncan be described with two integers a_i and b_i; b_i is equal to the\r\nskill level of the i-th student (the higher, the better). Also, there\r\nare 60 known algorithms, which are numbered with integers from 0 to 59.\r\nIf the i-th student knows the j-th algorithm, then the j-th bit (2^j) is\r\nset in the binary representation of a_i. Otherwise, this bit is not\r\nset.Student x thinks that he is better than student y if and only if x\r\nknows some algorithm which y doesn\u2019t know. Note that two students can\r\nthink that they are better than each other. A group of students can work\r\ntogether calmly if no student in this group thinks that he is better\r\nthan everyone else in this group.Marcin wants to send a group of at\r\nleast two students which will work together calmly and will have the\r\nmaximum possible sum of the skill levels. What is this sum?\r\n",
    "solutions": [
        "// Words are flowing out like endless rain into a paper cup\n// They slither while they pass they slip away across the universe\n// Pools of sorrow, waves of joy are drifting through my open mind\n// Possessing and caressing me\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing LL = long long;\n\nnamespace _buff {\n\nconst size_t BUFF = 1 << 19;\nchar ibuf[BUFF], *ib = ibuf, *ie = ibuf;\nchar getc() {\n    if (ib == ie) {\n        ib = ibuf;\n        ie = ibuf + fread(ibuf, 1, BUFF, stdin);\n    }\n    return ib == ie ? -1 : *ib++;\n}\n\n}\n\nLL read() {\n    using namespace _buff;\n    LL ret = 0;\n    bool pos = true;\n    char c = getc();\n    for (; (c < '0' || c > '9') && c != '-'; c = getc()) {\n        assert(~c);\n    }\n    if (c == '-') {\n        pos = false;\n        c = getc();\n    }\n    for (; c >= '0' && c <= '9'; c = getc()) {\n        ret = (ret << 3) + (ret << 1) + (c ^ 48);\n    }\n    return pos ? ret : -ret;\n}\n\nconst size_t N = 7000 + 5;\n\nint n;\nLL a[N], b[N];\nbool ok[N], better[N][N];\nint cnt[N];\n\nint main() {\n    n = read();\n    generate_n(a, n, read);\n    generate_n(b, n, read);\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if ((a[i] & a[j]) != a[i]) {\n                cnt[i] += better[i][j] = true;\n            }\n        }\n        ok[i] = true;\n    }\n    LL ans = 0;\n    int cur = n - 1;\n    bool flag;\n    do {\n        flag = false;\n        for (int i = 0; i < n; ++i) {\n            if (ok[i] && cnt[i] == cur) {\n                flag = true;\n                ok[i] = false;\n                for (int j = 0; j < n; ++j) {\n                    if (better[j][i]) {\n                        --cnt[j];\n                    }\n                }\n                break;\n            }\n        }\n        --cur;\n    } while (flag);\n    int cnt = 0;\n    for (int i = 0; i < n; ++i) {\n        if (ok[i]) {\n            ans += b[i];\n            ++cnt;\n        }\n    }\n    if (cnt == 1) ans = 0;\n    cout << ans;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dfs and similar",
        "graphs",
        "greedy"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Marcin and Training Camp.json",
    "editorial_link": "https://codeforces.com//blog/entry/70008",
    "editorial": "If there are multiple people with the same set of skills (i.e., the same values of a\n), it's optimal to take each of them to the camp as they won't think they're better than everyone else.\n\nNow consider a person i\n which has a different set of skills than everyone else.\n\nIf they have a strictly smaller set of skills than someone already in the group, they can safely be included in the group.\nIf they don't, we can prove that they can't ever be included in the group.\nThis allows us to implement a simple O(n2)\n solution: first take all people that have an equal set of skills as someone else, and then include everyone else who has a strictly smaller set of skills than someone already in the group."
}