{
    "link": "https://codeforces.com//contest/1567/problem/D",
    "problemId": "1099176",
    "problem_idx": "D",
    "shortId": "1567D",
    "contest_number": "1567",
    "problem_submissions": {
        "C": [
            127974564,
            127939959,
            127954581,
            127964000,
            127952919,
            127944623,
            127939332,
            127964327,
            127943124,
            127968891,
            127947814,
            127940553,
            127945813,
            127964268,
            127942609,
            127947600,
            127945820,
            127938032,
            127948426,
            127964716
        ],
        "A": [
            127964852,
            127922278,
            127932015,
            127955526,
            127943035,
            127922628,
            127923688,
            127926840,
            127922694,
            127925712,
            127924423,
            127923731,
            127922858,
            127922205,
            127926705,
            127927113,
            127928956,
            127922373,
            127923105,
            127922692
        ],
        "B": [
            127964231,
            127928229,
            127928104,
            127960707,
            127944459,
            127929761,
            127931746,
            127932290,
            127933652,
            127938027,
            127928958,
            127942519,
            127932981,
            127927891,
            127934499,
            127937493,
            127935529,
            127926955,
            127935971,
            127930754
        ],
        "D": [
            127962995,
            127955193,
            127945755,
            127969042,
            127959015,
            127952114,
            127951882,
            127957740,
            127965163,
            127957338,
            127967067,
            128042803,
            127957487,
            127961796,
            127954276,
            127956523,
            127952133,
            127952975,
            127957557,
            127953745
        ],
        "E": [
            127956967,
            127950306,
            127967160,
            127953453,
            128966040,
            127974173,
            128003977,
            127960229,
            127963530,
            127951320,
            127958948,
            128021683,
            127976249,
            127963411,
            127950253,
            128042735,
            127964337,
            127947637,
            127967826,
            127965391,
            128541587,
            127968997,
            127966309,
            127964418,
            127961161
        ],
        "F": [
            127951988,
            127980467,
            127976901,
            127981608,
            127980938,
            128003888,
            128003811,
            128049440,
            127960253,
            128042163
        ]
    },
    "name": "D. Expression Evaluation Error",
    "statement": "On the board, Bob wrote n positive integers in base 10 with sum s (i. e.\r\nin decimal numeral system). Alice sees the board, but accidentally\r\ninterprets the numbers on the board as base-11 integers and adds them up\r\n(in base 11).What numbers should Bob write on the board, so Alice’s sum\r\nis as large as possible?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint pw[200];\nvoid solve() {\n\tint s, n;\n\tscanf(\"%d%d\", &s, &n);\n\tint s2 = s;\n\tvector<int> d;\n\tint cnt = 0;\n\twhile (s) {\n\t\tcnt += s % 10;\n\t\td.push_back(s % 10);\n\t\ts /= 10;\n\t}\n\twhile (cnt < n) {\n\t\tfor (int j = 1; j < d.size(); j++) {\n\t\t\tif (d[j] > 0) {\n\t\t\t\td[j] -= 1;\n\t\t\t\td[j - 1] += 10;\n\t\t\t\tcnt += 9;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvector<int> ans;\n\tfor (int j = 0; j < d.size(); j++) {\n\t\tfor (int k = 0; k < d[j]; k++)\n\t\t\tans.push_back(pw[j]);\n\t}\n\treverse(ans.begin(), ans.end());\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tprintf(\"%d \", ans[i]);\n\t\ts2 -= ans[i];\n\t}\n\tprintf(\"%d\\n\", s2);\n}\n\nint main() {\n\tpw[0] = 1;\n\tfor (int i = 1; i < 10; i++) pw[i] = pw[i - 1] * 10;\n\tint T;\n\tscanf(\"%d\", &T);\n\tfor (int i = 0; i < T; i++) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Expression Evaluation Error.json",
    "editorial_link": "https://codeforces.com//blog/entry/94581",
    "editorial": "Letâs greedily construct the largest possible sum for Alice, digit by\r\ndigit. That is, the leftmost position should have the largest value\r\npossible, then the second-leftmost position, and so on. The maximum\r\nvalue of the leftmost digit of Aliceâs sum is clearly equal to the\r\nleftmost digit of the number , since it cannot be larger. Similarly, the\r\nmaximum possible value for the second-leftmost digit in Aliceâs sum\r\ncannot be larger than the corresponding digit in , and so on. In\r\ngeneral, Aliceâs sum cannot be larger than the number when interpreted\r\nas a base-11 number.So how can we maintain the sum of when we express it\r\nas a sum of numbers? The idea is to split into a sum of powers of . For\r\nexample, if , and Bob writes down . Then Alice will not have any\r\ncarries, and so the answer will just be interpreted as a base-11\r\nnumber.But what if we need to write down more numbers than the sum of\r\nthe digits of ? Then, weâre forced to split a power ten into units. When\r\nwe split a power of , it can be seen that we should split the smallest\r\npower of that isnât (call it ) as and . We can check all powers of , and\r\nit can be shown that this is the best way to split.For example, if and ,\r\nthen we do the following process: to to to . If and , we do the\r\nfollowing process: to to . Note that, in this last case, splitting is\r\nbetter than splitting , since the sum of , and .Time complexity: if you\r\nlazily iterate over all currently split numbers, or if you use a\r\npriority queue.\r\n",
    "hint": []
}