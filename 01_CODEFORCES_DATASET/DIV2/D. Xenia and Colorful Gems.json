{
    "link": "https://codeforces.com//contest/1337/problem/D",
    "problemId": "594576",
    "problem_idx": "D",
    "shortId": "1337D",
    "contest_number": "1337",
    "problem_submissions": {
        "E": [
            76842870,
            76845509,
            76848463,
            76855120,
            76871772,
            76871576,
            76867010,
            76867076,
            76874436,
            76870671,
            76867604,
            76876698,
            76882617,
            76882550,
            76889050,
            76884760,
            76930491,
            76887431,
            76876593,
            76885516
        ],
        "D": [
            76829839,
            76837363,
            76835449,
            76841174,
            76843833,
            76850412,
            76855631,
            76849402,
            76850850,
            76854483,
            76859745,
            76849751,
            76850303,
            76854768,
            76849549,
            76853724,
            76852989,
            76862421,
            76861609
        ],
        "C": [
            76820484,
            76822812,
            76829351,
            76827518,
            76827629,
            76824463,
            76825343,
            76819564,
            76838456,
            76834820,
            76841486,
            76838012,
            76828806,
            76837386,
            76833609,
            76841320,
            76834504,
            76846500,
            76838445
        ],
        "B": [
            76811181,
            76812533,
            76809888,
            76812317,
            76817367,
            76813548,
            76832505,
            76825951,
            76816251,
            76822230,
            76831299,
            76814459,
            76817110,
            76822249,
            76830068,
            76818198,
            76823690,
            76820084
        ],
        "A": [
            76806546,
            76809169,
            76807699,
            76807193,
            76811060,
            76806430,
            76827568,
            76829567,
            76809786,
            76816500,
            76807750,
            76806611,
            76807034,
            76815382,
            76825211,
            76811951,
            76814300,
            76809280
        ],
        "F": [
            77132223
        ]
    },
    "name": "D. Xenia and Colorful Gems",
    "statement": "Xenia is a girl being born a noble. Due to the inflexibility and\r\nharshness of her family, Xenia has to find some ways to amuse herself.\r\nRecently Xenia has bought n_r red gems, n_g green gems and n_b blue\r\ngems. Each of the gems has a weight.Now, she is going to pick three\r\ngems.Xenia loves colorful things, so she will pick exactly one gem of\r\neach color.Xenia loves balance, so she will try to pick gems with little\r\ndifference in weight.Specifically, supposing the weights of the picked\r\ngems are x, y and z, Xenia wants to find the minimum value of\r\n(x-y)^2+(y-z)^2+(z-x)^2. As her dear friend, can you help her?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nlong long calc(long long x, long long y, long long z)\n{\n    return (x - y) * (x - y) + (y - z) * (y - z) + (z - x) * (z - x);\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n\n    int t;\n    cin >> t;\n    while(t--)\n    {\n        int n[3];\n        vector<int> v[3];\n        cin >> n[0] >> n[1] >> n[2];\n        for(int p = 0; p < 3; p++)\n        {\n            v[p].resize(n[p]);\n            for(int i = 0; i < n[p]; i++)\n                cin >> v[p][i];\n            sort(v[p].begin(), v[p].end());\n        }\n\n        long long ans = (long long)4e18 + 10;\n\n        for(int p1 = 0; p1 < 3; p1++)\n        {\n            for(int p2 = 0; p2 < 3; p2++)\n            {\n                for(int p3 = 0; p3 < 3; p3++)\n                {\n                    if(p1 == p2 || p2 == p3 || p3 == p1)\n                        continue;\n\n                    for(auto x: v[p1])\n                    {\n                        auto it1 = lower_bound(v[p2].begin(), v[p2].end(), x);\n                        auto it2 = upper_bound(v[p3].begin(), v[p3].end(), x);\n                        if(it1 != v[p2].end() && it2 != v[p3].begin())\n                        {\n                            int y = *it1;\n                            it2--;\n                            int z = *it2;\n                            ans = min(ans, calc(x, y, z));\n                        }\n                    }\n                }\n            }\n        }\n\n        cout << ans << \"\\n\";\n    }\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "implementation",
        "math",
        "sortings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Xenia and Colorful Gems.json",
    "editorial_link": "https://codeforces.com//blog/entry/76099",
    "editorial": "Once we read the first number (and know which set itâs coming from), the\r\ncases are possible while iterating over . Consider the array looks like\r\nthis in the beginning. Cases: This eventually goes over all possible\r\ntriplets, and every time we find a triplet, we find the best middle ()\r\nnumber using binary search. My submission: 76948887.\r\n",
    "hint": []
}