{
    "link": "https://codeforces.com//contest/1526/problem/B",
    "problemId": "998295",
    "problem_idx": "B",
    "shortId": "1526B",
    "contest_number": "1526",
    "problem_submissions": {
        "F": [
            117674501,
            117718090
        ],
        "E": [
            117641265,
            117622832,
            117632917,
            117655078,
            117650360,
            117639127,
            117655021,
            117622676,
            117655327,
            117632538,
            117657710,
            117639481,
            117666815,
            117667694,
            117675419,
            117641336,
            117667368,
            117663164,
            117676666,
            117665783
        ],
        "D": [
            117632533,
            117637660,
            117642436,
            117623173,
            117637988,
            117639630,
            117639808,
            117654338,
            117642482,
            117656737,
            117641555,
            117661726,
            117632865,
            117643854,
            117639700,
            117671596,
            117639266,
            117649770,
            117640101,
            117649235
        ],
        "C2": [
            117607723,
            117607154,
            117602271,
            117601746,
            117613546,
            117613022,
            117607432,
            117606655,
            117614092,
            117605064,
            117613264,
            117601205,
            117618975,
            117612210,
            117617886,
            117613492,
            117619366,
            117636680,
            117605737,
            117632479
        ],
        "C1": [
            117607362,
            117607834,
            117601722,
            117602159,
            117613090,
            117613322,
            117607889,
            117607044,
            117614454,
            117603816,
            117613790,
            117601639,
            117616576,
            117603874,
            117618238,
            117612867,
            117619659,
            117635895,
            117606026,
            117617120
        ],
        "B": [
            117601602,
            117610780,
            117595803,
            117598275,
            117596391,
            117609017,
            117598567,
            117600812,
            117600764,
            117618105,
            117599167,
            117612003,
            117600763,
            117595368,
            117595660,
            117608430,
            117600516,
            117617181,
            117613055,
            117606766
        ],
        "A": [
            117595740,
            117594587,
            117593757,
            117594246,
            117593849,
            117594075,
            117595264,
            117593810,
            117605058,
            117594287,
            117594338,
            117603759,
            117594059,
            117594193,
            117593995,
            117604884,
            117594125,
            117594212,
            117608105,
            117606903
        ]
    },
    "name": "B. I Hate 1111",
    "statement": "You are given an integer x. Can you make x by summing up some number of\r\n11, 111, 1111, 11111,\r\nldots? (You can use any number among them any number of times).For\r\ninstance, 33=11+11+11 144=111+11+11+11\r\n",
    "solutions": [
        "//#include <bits/stdc++.h>\n#include <iostream>\n#include <iomanip>\n#include <math.h>\n#include <cmath>\n#include <algorithm>\n#include <climits>\n#include <functional>\n#include <cstring>\n#include <string>\n#include <cstdlib>\n#include <ctime>\n#include <cstdio>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <map>\n#include <set>\n#include <bitset>\n#include <complex>\n//#include <ext/pb_ds/assoc_container.hpp>\n//#include <ext/pb_ds/tree_policy.hpp>\n#define itn int\n#define nit int\n#define ll long long\n#define ms multiset\n#define F(i,a,b) for(register int i=a,i##end=b;i<=i##end;++i)\n#define UF(i,a,b) for(register int i=a,i##end=b;i>=i##end;--i)\n#define re register\n#define ri re int\n#define il inline\n#define pii pair<int,int>\n#define cp complex<double>\n//#pra gma G CC opti mize(3)\nusing namespace std;\nusing std::bitset;\n//using namespace __gnu_pbds;\nconst double Pi=acos(-1);\nnamespace fastIO {\n\ttemplate<class T>\n\tinline void read(T &x) {\n\t\tx=0;\n\t\tbool fu=0;\n\t\tchar ch=0;\n\t\twhile(ch>'9'||ch<'0') {\n\t\t\tch=getchar();\n\t\t\tif(ch=='-')fu=1;\n\t\t}\n\t\twhile(ch<='9'&&ch>='0') x=(x*10-48+ch),ch=getchar();\n\t\tif(fu)x=-x;\n\t}\n\tinline int read() {\n\t\tint x=0;\n\t\tbool fu=0;\n\t\tchar ch=0;\n\t\twhile(ch>'9'||ch<'0') {\n\t\t\tch=getchar();\n\t\t\tif(ch=='-')fu=1;\n\t\t}\n\t\twhile(ch<='9'&&ch>='0') x=(x*10-48+ch),ch=getchar();\n\t\treturn fu?-x:x;\n\t}\n\ttemplate<class T,class... Args>\n\tinline void read(T& t,Args&... args) {\n\t\tread(t);\n\t\tread(args...);\n\t}\n\tchar _n_u_m_[40];\n\ttemplate<class T>\n\tinline void write(T x ) {\n\t\tif(x==0){\n\t\t\tputchar('0');\n\t\t\treturn;\n\t\t}\n\t\tT tmp = x > 0 ? x : -x ;\n\t\tif( x < 0 ) putchar('-') ;\n\t\tregister int cnt = 0 ;\n\t\twhile( tmp > 0 ) {\n\t\t\t_n_u_m_[ cnt ++ ] = tmp % 10 + '0' ;\n\t\t\ttmp /= 10 ;\n\t\t}\n\t\twhile( cnt > 0 ) putchar(_n_u_m_[ -- cnt ]) ;\n\t}\n\ttemplate<class T>\n\tinline void write(T x ,char ch) {\n\t\twrite(x);\n\t\tputchar(ch);\n\t}\n}\nusing namespace fastIO;\ninline bool check(int x){\n\tF(i,0,11){\n\t\tif(x>=111*i&&(x-111*i)%11==0)return 1;\n\t}return 0;\n}\nint main() {\nF(iakioi,1,read()){\n\tri x=read();\n\tif(check(x))puts(\"yes\");\n\telse puts(\"no\");\n}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "math",
        "number theory"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. I Hate 1111.json",
    "editorial_link": "https://codeforces.com//blog/entry/91195",
    "editorial": "Method 1Notice that and\nsimilarly . This implies that we can construct and all bigger numbers\nusing only and . So it suffices to check whether we can construct from\nand only.Suppose , where . Suppose , where . Then . So we can just brute\nforce all value of to check whether can be made.Method 2Since , by the\nChicken McNugget Theorem, all numbers greater than can be written as a\nsum of and . We can use brute force to find the answer to all values\nless than or equal to and answer yes for all other numbers.\n"
}