{
    "link": "https://codeforces.com//contest/1332/problem/E",
    "problemId": "578665",
    "problem_idx": "E",
    "shortId": "1332E",
    "contest_number": "1332",
    "problem_submissions": {
        "G": [
            74991585,
            75037266,
            77351427
        ],
        "F": [
            74972207,
            74968358,
            74971720,
            74973348,
            74978859,
            74982724,
            74982735,
            74986275,
            74983269,
            74987837,
            74986665,
            74991793,
            74983515,
            74979782,
            74972196,
            74981046,
            74990576,
            74985479,
            74988801,
            74990228
        ],
        "E": [
            74961161,
            74955523,
            74954162,
            74962710,
            74964351,
            74963597,
            74954423,
            74965477,
            74965579,
            74964400,
            74967235,
            74963711,
            74965887,
            74966494,
            74989155,
            74967207,
            74974070,
            74976881,
            74974061,
            74976693
        ],
        "D": [
            74952985,
            74945715,
            74946665,
            74947888,
            74950207,
            74948751,
            74939741,
            74946829,
            74947089,
            74946824,
            74948968,
            74945728,
            74948946,
            74959413,
            74956458,
            74959082,
            74952408,
            74962224,
            74953788,
            74952090
        ],
        "C": [
            74942005,
            74937624,
            74936343,
            74941037,
            74943187,
            74945247,
            74948388,
            74939023,
            74936776,
            74940250,
            74942517,
            74933392,
            74937059,
            74947682,
            74933984,
            74947387,
            74935824,
            74944324,
            74945827,
            74930594
        ],
        "B": [
            74937320,
            74934172,
            74933187,
            74935530,
            74936050,
            74936599,
            74943429,
            74933909,
            74931708,
            74932124,
            74935133,
            74939689,
            74933624,
            74939412,
            74938935,
            74936225,
            74945372,
            74938477,
            74936882,
            74941959
        ],
        "A": [
            74930167,
            74929341,
            74931394,
            74930114,
            74930077,
            74932449,
            74934529,
            74928977,
            74928761,
            74928547,
            74928820,
            74928500,
            74928970,
            74929648,
            74959446,
            74929583,
            74931416,
            74933421,
            74928735,
            74938510
        ]
    },
    "name": "E. Height All the Same",
    "statement": "Alice has got addicted to a game called Sirtet recently.In Sirtet,\r\nplayer is given an n\r\ntimes m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j).\r\nTwo cells are called adjacent if they share a side. Player can perform\r\nthe following operations: stack up one cube in two cells; stack up two\r\ncubes in one cell. Cubes mentioned above are identical in height.Here is\r\nan illustration of the game. States on the right are obtained by\r\nperforming one of the above operations on the state on the left, and\r\ngrey cubes are added due to the operation. Player\u2019s goal is to (i.e. so\r\nthat each cell has the same number of cubes in it) using above\r\noperations. Alice, however, has found out that on some starting grids\r\nshe may never reach the goal no matter what strategy she uses. Thus, she\r\nis wondering the number of initial grids such that L\r\nle a_{i,j}\r\nle R for all 1\r\nle i\r\nle n, 1\r\nle j\r\nle m; player can reach the goal using above operations. Please help\r\nAlice with it. Notice that the answer might be large, please output the\r\ndesired value modulo 998,244,353.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\ntypedef long long ll;\n\nconst int djq = 998244353;\n\nint n, m, L, R, c0, c1;\n\nstruct matrix\n{\n\tint n, m, a[2][2];\n\t\n\tmatrix() {}\n\tmatrix(int _n, int _m) :\n\t\tn(_n), m(_m) {memset(a, 0, sizeof(a));}\n\t\n\tfriend inline matrix operator * (matrix a, matrix b)\n\t{\n\t\tmatrix res = matrix(a.n, b.m);\n\t\tfor (int i = 0; i < a.n; i++) for (int j = 0; j < b.m; j++)\n\t\t\tfor (int k = 0; k < a.m; k++)\n\t\t\t\tres.a[i][j] = (1ll * a.a[i][k] * b.a[k][j] + res.a[i][j]) % djq;\n\t\treturn res;\n\t}\n\t\n\tfriend inline matrix operator ^ (matrix a, ll b)\n\t{\n\t\tmatrix res = matrix(a.n, a.m);\n\t\tfor (int i = 0; i < res.n; i++) res.a[i][i] = 1;\n\t\twhile (b)\n\t\t{\n\t\t\tif (b & 1) res = res * a;\n\t\t\ta = a * a;\n\t\t\tb >>= 1;\n\t\t}\n\t\treturn res;\n\t}\n} F, A;\n\nint main()\n{\n\tstd::cin >> n >> m >> L >> R;\n\tc0 = (R >> 1) - (L - 1 >> 1); c1 = (R + 1 >> 1) - (L >> 1);\n\tA = matrix(2, 2); F = matrix(2, 1);\n\tA.a[0][0] = A.a[1][1] = c0; A.a[1][0] = A.a[0][1] = c1;\n\tF.a[0][0] = 1;\n\tF = (A ^ 1ll * n * m) * F;\n\tif (n * m & 1) std::cout << (F.a[0][0] + F.a[1][0]) % djq << std::endl;\n\telse std::cout << F.a[0][0] << std::endl;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "constructive algorithms",
        "math",
        "matrices"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Height All the Same.json",
    "editorial_link": "https://codeforces.com//blog/entry/75432",
    "editorial": "The actual values in the cells don\u00e2\u0080\u0099t matter, only parity matters. Using\r\nthe second operation one can make all the values of same parity equal by\r\napplying it to the lowest value until done.That observation helps us to\r\nget rid of the second operation, let us only have the first one. Player\r\nis able to change parity of any pair of cells at the same time. For any\r\ngiven cell and cell , there exists a path from to , namely , such that\r\nand . Perform operation for adjacent cells and for all If is odd, player\r\ncan always reach the goal no matter what the initial state is. There are\r\ntwo cases: there is an even number of even cells or there is an even\r\nnumber of odd cells. Whichever of these holds, we can change all cells\r\nof that parity to the opposite one with the aforementioned operation,\r\nmaking all cells the same parity. If is even, and is even, player can\r\nreach the goal. Similar to the proof of Observation 3. Proof is omitted.\r\nIf is even and is odd, player can never reach the goal no matter what\r\nstrategies player takes. Note that applying the operation never changes\r\nthe parity of the number of cells of each parity (i.e. if we start with\r\nan odd number of odd cells and an odd number of even cells, they will\r\nboth be odd until the end). Thus, there is no way to make zero cells of\r\nsome parity.How does that help us to calculate the answer?The first case\r\n( is odd) is trivial, the answer is all grids. Let\u00e2\u0080\u0099s declare this as\r\nvalue.The second case ( is even) is harder. Me and pikmike have\r\ndifferent formulas to obtain it but the answer is the same.WLOG, let\u00e2\u0080\u0099s\r\nmove the range of values from to , let .Let\u00e2\u0080\u0099s find out the number of\r\nways to choose the grid such that the number of even cells is even and\r\n.Suppose that there are even numbers in , odds. Therefore, for any given\r\n, the number of ways to have exactly even numbers should be . Thus, the\r\ntotal answer should be , which should remind you of the Newton\r\nexpansion.Note that and .Adding those two formulas will get us exactly\r\nthe formula we were looking for but doubled. Thus, the answer is that\r\ndivided by .:There is a general solution to this kind of problems. Let\u00e2\u0080\u0099s\r\ntry to pair up each valid grid with exactly one invalid grid. Valid in\r\nour problem is such a grid that the number of even cells is even. If\r\nsuch a matching exists then the answer is exactly half of all grids\r\n.Let\u00e2\u0080\u0099s come up with some way to pair them up. For example, this works\r\nbut leaves us with two cases to handle.Let be odd. For each grid let\u00e2\u0080\u0099s\r\nreplace with . You can see that the parity changed, thus the number of\r\neven cells also changed its parity. So if the grid was invalid it became\r\nvalid and vice versa.For an even it\u00e2\u0080\u0099s slightly trickier but actually one\r\ncan show that almost all grids pair up with each other and only a single\r\ngrid remains unpaired. So we can add a fake grid and claim that the\r\nanswer is .The algorithm is the following. Find the first position such\r\nthat the value on it is not equal to . Replace it with . You can easily\r\nsee that only grid that consists of all numbers has no pair.\r\n"
}