{
    "link": "https://codeforces.com//contest/894/problem/C",
    "problemId": "134792",
    "problem_idx": "C",
    "shortId": "894C",
    "contest_number": "894",
    "problem_submissions": {
        "E": [
            32471307,
            32470808,
            32477653,
            32468892,
            32476378,
            32473286,
            32472749,
            32479578,
            32478798,
            32483759,
            32466869,
            32470695,
            32470873,
            32493311
        ],
        "C": [
            32467626,
            32472589,
            32462133,
            32463427,
            32461488,
            32465456,
            32463529,
            32464758,
            32463676,
            32464462,
            32469317,
            32465537,
            32470577,
            32468611,
            32464977,
            32465202,
            32462633,
            32464400
        ],
        "B": [
            32465947,
            32462718,
            32464339,
            32462164,
            32478784,
            32490475,
            32479651,
            32463872,
            32461816,
            32462196,
            32472670,
            32462354,
            32463630,
            32462716,
            32463341,
            32469382
        ],
        "D": [
            32464126,
            32467179,
            32469559,
            32463935,
            32469406,
            32468195,
            32470253,
            32466945,
            32470315,
            32471173,
            32471807,
            32476896,
            32473554,
            32474533,
            32473511
        ],
        "A": [
            32458491,
            32461795,
            32458601,
            32458521,
            32458627,
            32465359,
            32458507,
            32458624,
            32459097,
            32461613,
            32461662,
            32461348,
            32461278,
            32459033,
            32459890,
            32458837,
            32458739,
            32458734
        ]
    },
    "name": "C. Marco and GCD Sequence",
    "statement": "In a dream Marco met an elderly man with a pair of black glasses. The\r\nman told him the key to immortality and then disappeared with the wind\r\nof time.When he woke up, he only remembered that the key was a sequence\r\nof positive integers of some length , but forgot the exact sequence. Let\r\nthe elements of the sequence be . He remembered that he calculated for\r\nevery and put it into a set . here means the greatest common\r\ndivisor.Note that even if a number is put into the set twice or more, it\r\nonly appears once in the set.Now Marco gives you the set and asks you to\r\nhelp him figure out the initial sequence. If there are many solutions,\r\nprint any of them. It is also possible that there are no sequences that\r\nproduce the set , in this case print .\r\n",
    "solutions": [
        "#include <iostream>\n#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#include <time.h>\n#include <stdlib.h>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <algorithm>\n#include <sstream>\n#include <stack>\n#include <iomanip>\nusing namespace std;\n#define pb push_back\n#define mp make_pair\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntypedef double ld;\ntypedef vector<int> vi;\n#define fi first\n#define se second\n#define fe first\n#define FO(x) {freopen(#x\".in\",\"r\",stdin);freopen(#x\".out\",\"w\",stdout);}\n#define Edg int M=0,fst[SZ],vb[SZ],nxt[SZ];void ad_de(int a,int b){++M;nxt[M]=fst[a];fst[a]=M;vb[M]=b;}void adde(int a,int b){ad_de(a,b);ad_de(b,a);}\n#define Edgc int M=0,fst[SZ],vb[SZ],nxt[SZ],vc[SZ];void ad_de(int a,int b,int c){++M;nxt[M]=fst[a];fst[a]=M;vb[M]=b;vc[M]=c;}void adde(int a,int b,int c){ad_de(a,b,c);ad_de(b,a,c);}\n#define es(x,e) (int e=fst[x];e;e=nxt[e])\n#define esb(x,e,b) (int e=fst[x],b=vb[e];e;e=nxt[e],b=vb[e])\n#define SZ 666666\nint n,s[SZ],rs[SZ],rn=0;\nint main()\n{\n\tset<int> tmp,ip;\n\tcin>>n;\n\tfor(int i=1;i<=n;++i)\n\t\tcin>>s[i],ip.insert(s[i]);\n\trs[++rn]=s[1];\n\tfor(int i=1;i<=n;++i)\n\t\trs[++rn]=s[i],rs[++rn]=s[1];\n\tfor(int i=1;i<=rn;++i)\n\t{\n\t\tint g=0;\n\t\tfor(int j=i;j<=rn;++j)\n\t\t{\n\t\t\tif(i==j) g=rs[j]; else g=__gcd(g,rs[j]);\n\t\t\ttmp.insert(g);\n\t\t}\n\t}\n\tif(tmp!=ip)\n\t{\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}\n\tcout<<rn<<\"\\n\";\n\tfor(int i=1;i<=rn;++i) cout<<rs[i]<<\" \";\n\tcout<<\"\\n\";\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Marco and GCD Sequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/55884",
    "editorial": "If the minimum element isnât the gcd of the given set, the answer is .\r\nOtherwise, we can insert the minimum element between two consecutive\r\nelements of the set. And the length of the sequence is which satisfies\r\nthe constraints.\r\n",
    "hint": []
}