{
    "link": "https://codeforces.com//contest/231/problem/D",
    "problemId": "1909",
    "problem_idx": "D",
    "shortId": "231D",
    "contest_number": "231",
    "problem_submissions": {
        "E": [
            2315623,
            2318030,
            2317938,
            2318674,
            2318779,
            2317611,
            2320585,
            2319865,
            2321228,
            2699180
        ],
        "B": [
            2314265,
            2313607,
            2314034,
            2314278,
            2314068,
            2314153,
            2313828,
            2314473,
            2314118,
            2313793,
            2314083,
            2313846,
            2315002,
            2315695,
            2314096,
            2316200,
            2314037,
            2313902
        ],
        "C": [
            2313829,
            2314125,
            2314733,
            2315243,
            2315319,
            2313875,
            2315066,
            2315078,
            2314341,
            2315041,
            2314618,
            2314471,
            2313703,
            2314701,
            2313945,
            2315683,
            2314609
        ],
        "A": [
            2312031,
            2312037,
            2312506,
            2312986,
            2312060,
            2312377,
            2312848,
            2312030,
            2312702,
            2312166,
            2312096,
            2312665,
            2315132,
            2312576,
            2312184,
            2312109,
            2312683,
            2312307
        ],
        "D": [
            2315039,
            2315337,
            2315944,
            2316047,
            2314614,
            2314405,
            2315592,
            2316024,
            2314917,
            2314554,
            2314992,
            2313590,
            2314889,
            2315003,
            2314692,
            2314435,
            2315454
        ]
    },
    "name": "D. Magic Box",
    "statement": "One day Vasya was going home when he saw a box lying on the road. The\r\nbox can be represented as a rectangular parallelepiped. Vasya needed no\r\ntime to realize that the box is special, as all its edges are parallel\r\nto the coordinate axes, one of its vertices is at point , and the\r\nopposite one is at point . The six faces of the box contain some numbers\r\n, exactly one number right in the center of each face. The numbers are\r\nlocated on the box like that: number is written on the face that lies on\r\nthe ZOX plane; is written on the face, parallel to the plane from the\r\nprevious point; is written on the face that lies on the XOY plane; is\r\nwritten on the face, parallel to the plane from the previous point; is\r\nwritten on the face that lies on the YOZ plane; is written on the face,\r\nparallel to the plane from the previous point. At the moment Vasya is\r\nlooking at the box from point . Find the sum of numbers that Vasya sees.\r\nNote that all faces of the box are not transparent and Vasya can\u2019t see\r\nthe numbers through the box. The picture contains transparent faces just\r\nto make it easier to perceive. You can consider that if Vasya is looking\r\nfrom point, lying on the plane of some face, than he can not see the\r\nnumber that is written on this face. It is enough to see the center of a\r\nface to see the corresponding number for Vasya. Also note that Vasya\r\nalways reads correctly the numbers that he sees, independently of their\r\nrotation, angle and other factors (that is, for example, if Vasya sees\r\nsome , then he can\u2019t mistake this number for and so on).\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <ctime>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <numeric>\n#include <cassert>\nusing namespace std;\nstatic const double EPS = 1e-10;\ntypedef long long ll;\n#define rep(i,n) for(int i=0;i<n;i++)\n#define rev(i,n) for(int i=n-1;i>=0;i--)\n#define all(a) a.begin(),a.end()\n#define mp(a,b) make_pair(a,b)\n#define pb(a) push_back(a)\n#define SS stringstream\n#define DBG1(a) rep(_X,sz(a)){printf(\"%d \",a[_X]);}puts(\"\");\n#define DBG2(a) rep(_X,sz(a)){rep(_Y,sz(a[_X]))printf(\"%d \",a[_X][_Y]);puts(\"\");}\n#define bitcount(b) __builtin_popcount(b)\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n\n#define delete(a,n) a.erase(remove(all(a),n),a.end())\ntemplate<typename T, typename S> vector<T>& operator<<(vector<T>& a, S b) { a.push_back(b); return a; }\ntemplate<typename T> void operator>>(vector<T>& a, int b) {while(b--)if(!a.empty())a.pop_back();}\nbool isprime(int n){ if(n<2)return false;  for(int i=2;i*i<=n;i++)if(n%i==0)return false;  return true;} \nll b_pow(ll x,ll n){return n ? b_pow(x*x,n/2)*(n%2?x:1) : 1ll;}\nstring itos(int n){stringstream ss;ss << n;return ss.str();}\n\n\nint main(){\n    ios_base::sync_with_stdio(false);\n    ll x,y,z;\n    cin >> x >> y >> z;\n    ll x1,y1,z1;\n    cin >> x1 >> y1 >> z1;\n    ll v1,v2,v3,v4,v5,v6;\n    cin >> v1 >> v2 >> v3 >> v4 >> v5 >> v6;\n    ll c1,c2,c3,c4,c5,c6;\n    c1 = c2 = c3 = c4 = c5 = c6 = 1;\n    \n    if( x > x1 ) c6 = 1 , c5 = 0;\n    else if( x < 0 ) c6 = 0 , c5 = 1;\n    else c6 = 0 , c5 = 0;\n    \n    if( y > y1 ) c2 = 1 , c1 = 0;\n    else if( y < 0 ) c2 = 0 , c1 = 1;\n    else c2 = 0 , c1 = 0;\n    \n    if( z > z1 ) c4 = 1 , c3 = 0;\n    else if( z < 0 ) c4 = 0 , c3 = 1;\n    else c4 = 0 , c3 = 0;\n    \n    cout << c1 * v1 + c2 * v2 + c3 * v3 + c4 * v4 + c5 * v5 + c6 * v6 << endl;\n    \n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "geometry"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Magic Box.json",
    "editorial_link": "https://codeforces.com/blog/entry/5486",
    "editorial": "The main subtask of this problem is to check whether we can observe the\r\ncenter of face of parallelepiped from point . Let s see the case, when\r\nthe face belongs to plane . For performing all calculations in integer\r\nnumbers, multiply all coordinates by . Take the point and normal to\r\nplane, containing the fixed face, which is directed out of interior of\r\nparallelepiped, that is . Also take vector . If undirected angle between\r\nthis vectors is less than degrees, we can observe from . For checking\r\nthis we can use scalar product. If scalar product of and is strictly\r\ngreater than zero, than that angle is fitting.\r\n"
}