{
    "link": "https://codeforces.com//contest/1973/problem/D",
    "problemId": "2652013",
    "problem_idx": "D",
    "shortId": "1973D",
    "contest_number": "1973",
    "problem_submissions": {
        "F": [
            261463251,
            261436494,
            261787514
        ],
        "D": [
            261394881,
            261402242,
            261380949,
            261382024,
            261382530,
            261387010,
            261390196,
            261382271,
            261387986,
            261384447,
            261402787,
            261386421,
            261427816,
            261407792,
            261395337,
            261376975,
            261379252,
            261380684,
            261382950
        ],
        "E": [
            261381347,
            261382046,
            261401618,
            261402013,
            261401999,
            261406109,
            261402299,
            261407866,
            261402896,
            261405986,
            261394102,
            261405366,
            261389878,
            261408472,
            261404774,
            261590660
        ],
        "C": [
            261360567,
            261360988,
            261363426,
            261364691,
            261354543,
            261360787,
            261363933,
            261369573,
            261365792,
            261367077,
            261359236,
            261367488,
            261357141,
            261374894,
            261387975,
            261359851,
            261363374,
            261357155
        ],
        "B": [
            261348324,
            261350288,
            261353838,
            261351331,
            261349040,
            261350145,
            261349881,
            261347862,
            261350513,
            261350776,
            261350235,
            261356753,
            261350384,
            261354721,
            261390204,
            261350344,
            261351974,
            261347066
        ],
        "A": [
            261346207,
            261346661,
            261348023,
            288952169,
            261346140,
            261346181,
            261346010,
            261346089,
            261345101,
            261344789,
            261344990,
            261346630,
            261346138,
            261346691,
            261348987,
            261391373,
            261346139,
            261346040,
            261349777
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129556",
    "editorial": "Solution:Letâs denote maximum value in array as . Since the element with\r\nmaximum value will belong to some segment, then if exists, will be\r\ndivisible by . Obviously, canât be greater than , so now the candidates\r\nfor value of are .To find the value of we can query for each and will be\r\nequal to such , querying which will give as the answer.We can check each\r\nof possible values in queries, but that wouldnât fit in query\r\nlimit.Actually, since the length of each segment in partition will be\r\ngreater than or equal to , and there are exactly segments, we can get a\r\nsimple inequality (since sum of lengths of segments is exactly ), which\r\nmeans can not be greater than , so it is enough to check first\r\ncandidates for in queries each. Total number of queries used would be\r\nwhich doesnât exceed .Implementation in C++: 261999488\r\n",
    "name": "D. Cat, Fox and Maximum Array Split",
    "statement": "Fox gave Cat two positive integers n and k. She has a hidden array a_1,\r\nldots , a_n of length n, such that 1\r\nleq a_i\r\nleq n for every i. Now they are going to play the following game:For any\r\ntwo integers l, r such that 1\r\nleq l\r\nleq r\r\nleq n, define f(l, r) = (r - l + 1)\r\ncdot\r\nmax\r\nlimits_{x=l}^r a_x. In other words, f(l, r) is equal to the maximum of\r\nthe subarray a_l,\r\nldots, a_r multiplied by its size.Cat can ask Fox at most 2 n questions\r\nabout the array. He will tell her two integers l and x (1\r\nleq l\r\nleq n, 1\r\nleq x\r\nleq 10^9), and she will tell him one integer p as the answer the\r\nsmallest positive integer r such that f(l, r) = x, or n+1 if no such r\r\nexists.Now, Cat needs to find the largest value m such that there exists\r\na sequence c_1,\r\nldots, c_{k-1} such that 1\r\nleq c_1 <\r\nldots < c_{k-1} < n and f(1, c_1) = f(c_1 + 1, c_2) =\r\nldots = f(c_{k-1}+1, n) = m. If no such m exists, he should indicate\r\nthis and take -1 as the answer. Note that for k = 1, m is always equal\r\nto f(1, n).In other words, the goal is to find the largest m such that\r\nyou can split the array into exactly k subarrays (k is the constant\r\ngiven to you in the beginning of the interaction) so that all the\r\nsubarrays have the product of their length and their maximum equal to m,\r\nor determine that no such m exists. Every element should belong in\r\nexactly one of the subarrays.Cat doesn’t know what he should do, so he\r\nasked you to play the game for him.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>using namespace std;int n,m,M;int ask(int l,int r){    printf(\"? %d %d\\n\",l,r);fflush(stdout);    int x;scanf(\"%d\",&x);return x;}bool chk(int x){    int t=1,e=0;    while(t<=n){        int r=ask(t,x);        if(r==n+1)return 0;        t=r+1,e++;        if(e==m&&t<=n)return 0;    }    return e==m;}void sol(){    scanf(\"%d%d\",&n,&m);    M=0;    for(int i=1;i<=n;i++){        int z=ask(1,i*n);        if(z==n){M=i;break;}    }    assert(M);    for(int i=1;i<=n/m;i++)if(chk(M*i)){printf(\"! %d\\n\",M*i);fflush(stdout);int xx;scanf(\"%d\",&xx);return;}    printf(\"! -1\\n\");fflush(stdout);int xx;scanf(\"%d\",&xx);}int main(){    int T;scanf(\"%d\",&T);while(T--)sol();    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "interactive",
        "math"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Cat, Fox and Maximum Array Split.json",
    "hint": []
}