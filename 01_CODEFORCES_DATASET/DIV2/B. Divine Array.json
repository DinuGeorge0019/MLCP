{
    "link": "https://codeforces.com//contest/1602/problem/B",
    "problemId": "1157771",
    "problem_idx": "B",
    "shortId": "1602B",
    "contest_number": "1602",
    "problem_submissions": {
        "E": [
            133032006,
            133003754,
            133004259,
            133007498,
            133009354,
            133008986,
            133015586,
            133014296,
            133019189,
            133016251,
            133023043,
            133017173,
            133017654,
            133031118,
            133031771,
            133023126,
            133023444,
            133026607,
            133071046,
            133071006,
            133023246,
            133026124
        ],
        "F": [
            133014631,
            133053467,
            133059590,
            133053314,
            133051962,
            133051828,
            133051273,
            133051246,
            133050986,
            133051444,
            133058927,
            154906935,
            133202717
        ],
        "D": [
            133005341,
            132997744,
            132998965,
            133002435,
            132995700,
            132999302,
            133001008,
            133003621,
            133003659,
            132999008,
            132999274,
            133007130,
            133055379,
            133006665,
            133001448,
            133002893,
            133007904,
            133005768,
            133005590,
            133006243,
            133009816
        ],
        "C": [
            132998504,
            132991987,
            132994038,
            132995401,
            132990761,
            132993753,
            132991630,
            132994468,
            132994573,
            133000658,
            132992001,
            132996442,
            132999119,
            132991525,
            132995757,
            132998190,
            132996165,
            132996191,
            132994329,
            132993830
        ],
        "B": [
            132991874,
            132990242,
            132989322,
            132992468,
            132988801,
            132988045,
            132989355,
            132992898,
            148604097,
            132990867,
            133003212,
            132988289,
            133227165,
            132993306,
            133064818,
            132995361,
            132995328,
            132993153,
            132995379,
            132997555,
            132991609,
            132992280,
            132992140
        ],
        "A": [
            132986686,
            132984939,
            132985573,
            132990670,
            132984472,
            132986995,
            132984659,
            132987933,
            148604079,
            132986349,
            132985981,
            132984656,
            133227226,
            132987663,
            132991514,
            132988125,
            132988425,
            132989208,
            132984538,
            132986551,
            132985450,
            132984595
        ]
    },
    "name": "B. Divine Array",
    "statement": "Black is gifted with a Divine array a consisting of n (1\r\nle n\r\nle 2000) integers. Each position in a has an initial value. After\r\nshouting a curse over the array, it becomes angry and starts an\r\nunstoppable transformation.The transformation consists of infinite\r\nsteps. Array a changes at the i-th step in the following way: for every\r\nposition j, a_j becomes equal to the number of occurrences of a_j in a\r\nbefore starting this step.Here is an example to help you understand the\r\nprocess better: Initial array:2 1 1 4 3 1 2After the 1-st step:2 3 3 1 1\r\n3 2After the 2-nd step:2 3 3 2 2 3 2After the 3-rd step:4 3 3 4 4 3\r\n4...... In the initial array, we had two 2-s, three 1-s, only one 4 and\r\nonly one 3, so after the first step, each element became equal to the\r\nnumber of its occurrences in the initial array: all twos changed to 2,\r\nall ones changed to 3, four changed to 1 and three changed to 1.The\r\ntransformation steps continue .You have to process q queries: in each\r\nquery, Black is curious to know the value of a_x after the k-th step of\r\ntransformation.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nint read()\n{\n\tint ret=0;bool f=0;char c=getchar();\n\twhile(c>'9'||c<'0')f|=(c=='-'),c=getchar();\n\twhile(c>='0'&&c<='9')ret=(ret<<3)+(ret<<1)+(c^48),c=getchar();\n\treturn f?-ret:ret;\n}\nint T;\nconst int maxn=2e3+5;\nint n,q;\nint a[maxn][maxn];\nint cnt[maxn];\nint main()\n{\n\tT=read();\n\twhile(T--)\n\t{\n\t\tgenerate_n(a[0]+1,n=read(),read);\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=n;j++)cnt[a[i][j]]++;\n\t\t\tfor(int j=1;j<=n;j++)a[i+1][j]=cnt[a[i][j]];\n\t\t\tfor(int j=1;j<=n;j++)cnt[a[i][j]]--;\n\t\t}\n\t\tq=read();\n\t\twhile(q--)\n\t\t{\n\t\t\tint x=read(),k=min(n,read());\n\t\t\tprintf(\"%d\\n\",a[k][x]);\n\t\t}\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Divine Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/95865",
    "editorial": "It can be shown that after at most steps of transformation, array\r\nbecomes repetitive. There is even a better lower bound: it can be shown\r\nthat after at most steps becomes repetitive, so we use either of these\r\ntwo facts to simulate the process and answer the queries.\r\n",
    "hint": []
}