{
    "link": "https://codeforces.com//contest/1946/problem/A",
    "problemId": "2546661",
    "problem_idx": "A",
    "shortId": "1946A",
    "contest_number": "1946",
    "problem_submissions": {
        "F": [
            252778634,
            252785320,
            252786013,
            252792288,
            252797773,
            252760159,
            252805049,
            252802973,
            252797418,
            252804807,
            252802498,
            252803677,
            252806450,
            252799639,
            252798045,
            252805458,
            253149787,
            253149764,
            252804697,
            252968362,
            252967816,
            252967536,
            252967308,
            252806243,
            252801898,
            252945361
        ],
        "E": [
            252767893,
            252755066,
            252775649,
            252778497,
            252788255,
            252768645,
            252781620,
            252778378,
            252791272,
            252783666,
            252792255,
            252787037,
            252788438,
            252796123,
            252791048,
            252789043,
            253149820,
            252796931,
            252794065,
            252793295,
            252769537
        ],
        "D": [
            252762969,
            252760657,
            252762929,
            252773084,
            252775710,
            252791493,
            252768538,
            252788123,
            252780760,
            252772529,
            252780806,
            252771784,
            252771623,
            252765540,
            252785160,
            252771914,
            253149843,
            252783465,
            252776484,
            252789596,
            252761305
        ],
        "C": [
            252755980,
            252750182,
            252755510,
            252756532,
            252756457,
            252786638,
            252755577,
            252760887,
            252765082,
            252758814,
            252754307,
            252762090,
            252762611,
            252762199,
            252764272,
            252764206,
            253149881,
            252762872,
            252757806,
            252747947,
            252752185
        ],
        "B": [
            252751889,
            252748922,
            252750334,
            252750610,
            252747768,
            252788061,
            252749547,
            252752546,
            252752071,
            252751826,
            252749973,
            252750830,
            252751955,
            252750419,
            252760194,
            252752821,
            253149896,
            252756666,
            252745823,
            252761849,
            252754627
        ],
        "A": [
            252743735,
            252744280,
            252743830,
            252744601,
            252743817,
            252788730,
            252743641,
            252745268,
            252744800,
            252746033,
            252743616,
            252744372,
            252744103,
            252744348,
            252750764,
            252744631,
            253149908,
            252746630,
            252743684,
            252757716,
            252743737
        ]
    },
    "name": "A. Median of an Array",
    "statement": "You are given an array a of n integers.The of an array q_1, q_2,\r\nldots, q_k is the number p_{\r\nlceil\r\nfrac{k}{2}\r\nrceil}, where p is the array q sorted in non-decreasing order. For\r\nexample, the median of the array [9, 5, 1, 2, 6] is 5, as in the sorted\r\narray [1, 2, 5, 6, 9], the number at index\r\nlceil\r\nfrac{5}{2}\r\nrceil = 3 is 5, and the median of the array [9, 2, 8, 3] is 3, as in the\r\nsorted array [2, 3, 8, 9], the number at index\r\nlceil\r\nfrac{4}{2}\r\nrceil = 2 is 3.You are allowed to choose an integer i (1\r\nle i\r\nle n) and increase a_i by 1 in one operation.Your task is to find the\r\nminimum number of operations required to increase the median of the\r\narray.Note that the array a may not necessarily contain distinct\r\nnumbers.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define MP make_pair\nmt19937 rnd(time(0));\nconst int MAXN=2e5+5;\nint n,a[MAXN];\nvoid solve(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++) cin>>a[i];\n\tsort(a+1,a+n+1);\n\tint cnt=0;\n\tfor(int i=(n+1)/2;i<=n;i++) if(a[i]==a[(n+1)/2]) cnt++;\n\tcout<<cnt<<'\\n';\n}\nint main(){\n\tios::sync_with_stdio(false);\n\t// freopen(\"Otomachi_Una.in\",\"r\",stdin);\n\t// freopen(\"Otomachi_Una.out\",\"w\",stdout);\n\tint _;cin>>_;\n\twhile(_--) solve();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Median of an Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/127439",
    "editorial": "The median is defined as the number at index in the sorted array, so we\r\ncan sort the array and work with it.So, let\u00e2\u0080\u0099s start by sorting the array\r\nand finding the median in it, namely the number , let it be equal to .\r\nIn order for the median to increase, that is, to become at least , it is\r\nnecessary that there are at least numbers in the array greater than or\r\nequal to .Now let\u00e2\u0080\u0099s find the maximum index such that equals . Then we\r\nknow that there are currently numbers that are greater than or equal to\r\n(all such that ), which means that at least operations will be required.\r\nI claim that this estimate is always achievable, it is enough to apply\r\none operation to each index from to , because all the numbers under\r\nthese indices are equal to , so after applying the operations they will\r\nbecome equal to . And in the end, the number of numbers greater than or\r\nequal to will become equal to , which is what we need.\r\n"
}