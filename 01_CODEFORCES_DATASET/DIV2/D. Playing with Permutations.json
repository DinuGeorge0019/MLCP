{
    "link": "https://codeforces.com//contest/252/problem/D",
    "problemId": "2353",
    "problem_idx": "D",
    "shortId": "252D",
    "contest_number": "252",
    "problem_submissions": {
        "B": [
            2710060,
            2706628,
            2708313,
            2705063,
            2702778,
            2703423,
            2715482,
            2706557,
            2703833,
            2705102
        ],
        "D": [
            2707052,
            2709984,
            2706767,
            2709595,
            2711529,
            2710054,
            2708487,
            2707438,
            2708692,
            2709215,
            2706501,
            2709216
        ],
        "C": [
            2702661,
            2701836,
            2705668,
            2703665,
            2707566,
            2704785,
            2705259,
            2705065,
            2702929,
            2704890,
            2702757,
            2705646,
            2704360,
            2708601,
            2705908,
            2703255,
            2704699,
            2702535
        ],
        "A": [
            2701161,
            2709874,
            2701848,
            2700918,
            2701349,
            2700912,
            2701131,
            2701230,
            2700948,
            2701753,
            2703055,
            2700974,
            2713381,
            2703052,
            2702820,
            2702346,
            2700994,
            2701240,
            2701290
        ],
        "E": [
            2709470,
            2708307
        ]
    },
    "name": "D. Playing with Permutations",
    "statement": "Little Petya likes permutations a lot. Recently his mom has presented\r\nhim permutation of length .A of length is a sequence of integers , all\r\nintegers there are distinct. There is only one thing Petya likes more\r\nthan permutations: playing with little Masha. As it turns out, Masha\r\nalso has a permutation of length . Petya decided to get the same\r\npermutation, whatever the cost may be. For that, he devised a game with\r\nthe following rules: Before the beginning of the game Petya writes\r\npermutation on the blackboard. After that Petya makes exactly moves,\r\nwhich are described below. During a move Petya tosses a coin. If the\r\ncoin shows heads, he performs point 1, if the coin shows tails, he\r\nperforms point 2. Let’s assume that the board contains permutation at\r\nthe given moment. Then Petya removes the written permutation from the\r\nboard and writes another one instead: . In other words, Petya applies\r\npermutation (which he has got from his mother) to permutation . All\r\nactions are similar to point 1, except that Petya writes permutation on\r\nthe board, such that: for all from 1 to . In other words, Petya applies\r\na permutation that is inverse to to permutation . We know that after the\r\n-th move the board contained Masha’s permutation . Besides, we know that\r\nthroughout the game process Masha’s permutation before the -th move.\r\nNote that the game has exactly moves, that is, throughout the game the\r\ncoin was tossed exactly times.Your task is to determine whether the\r\ndescribed situation is possible or else state that Petya was mistaken\r\nsomewhere. See samples and notes to them for a better understanding.\r\n",
    "solutions": [
        "#include<iostream>\n#include<map>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<string.h>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#include<sstream>\n#define all(X) (X).begin(),(X).end()\n#define mem(X) memset(X,0,sizeof(X))\n#define debug_v(v) for(int db=0;db<(v).size();db++)cout<<v[db]<<','<<;cout<<endl;\n#define pqpush(pq,x,cmp) (pq).push_back(x);push_heap((pq).begin(),(pq).end(),cmp);\n#define pqpop(pq,cmp) pop_heap((pq).begin(),(pq).end(),cmp);(pq).pop_back();\n#define PB(x) push_back(x)\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int>::iterator iv;\ntypedef map<string,int>::iterator msii;\ntypedef map<int,int>::iterator miii;\ntypedef map<int,bool>::iterator mibi;\ntypedef map<string,bool>::iterator msbi;\ntypedef map<string,int> msi;\ntypedef map<int,int> mii;\ntypedef map<int,bool> mib;\ntypedef map<string,bool> msb;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\nint n,mx,t,h1,h2,h3,k,v[1000],vno[1000];\nvi q,s;\n\nbool check(vector<int>& ts, vi& s)\n{\n    for(int fh1=0;fh1<ts.size();fh1++)\n        if(ts[fh1]!=s[fh1])\n            return 0;\n    return 1;\n}\n\nvector<vi> vv;\n\n\nint main(){\n    while(~scanf(\"%d%d\",&n,&k))\n    {\n        q.clear();s.clear();\n        vector<int> iq(n,0);\n        \n        for(h1=0;h1<n;h1++)\n        {\n            scanf(\"%d\",&h2);h2--;\n            q.PB(h2);\n            iq[h2] = h1;\n        }\n        \n        vector<int> x(n,0);\n        for(h1=0;h1<n;h1++)\n        {\n            scanf(\"%d\",&h2);h2--;\n            s.PB(h2);\n            x[h1]=h1;\n        }\n        \n        if(check(x,s))\n        {\n            cout<<(k?\"NO\":\"YES\")<<endl;\n            continue;\n        }\n        \n        \n        if(check(q,s))\n        {\n            if(k==1)\n            {\n                cout<<\"YES\"<<endl;\n                continue;\n            }\n            if(check(iq,s))\n            {\n                cout<<\"NO\"<<endl;\n                continue;\n            }\n        }\n        \n        memset(v,-1,sizeof(v));\n        \n        vv.clear();\n        int vp = 0;\n        \n        for(h1=0;h1<n;h1++)\n        {\n            if(v[h1]==-1)\n            {\n                int no = 0;\n                vv.push_back(vector<int>());\n                \n                //cout<<\"S\";\n                \n                for(h2=h1;!~v[h2];h2=q[h2])\n                {\n                    v[h2] = vp;\n                    vv[vp].push_back(h2);\n                    //cout<<h2<<\"->\"<<no<<\" \";\n                    vno[h2] = no++;\n                    \n                }\n                //cout<<endl;\n                vp ++;\n            }\n        }\n        \n        bool ans=0;\n        \n        for(int kk = k; !ans&&kk>=0; kk-=2)\n        {\n            for(int xx=0;!ans&&xx<=kk;xx++)\n            {\n                // 2*xx - kk\n                \n                for(h1=0;h1<n;h1++)\n                {\n                    // vv[v[h1]][vno[h1]]\n                    x[h1] = vv[v[h1]][  (vno[h1] + xx+xx-kk+ vv[v[h1]].size()*200)%vv[v[h1]].size() ];\n                }\n                \n                if(check(x,s))\n                    ans = 1;\n            }\n        }\n        \n        cout<<(ans?\"YES\":\"NO\")<<endl;\n        \n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "implementation"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Playing with Permutations.json",
    "editorial_link": "https://codeforces.com//blog/entry/6054",
    "editorial": "First, we need to theck whether permutation s is the identity permutation. If it is, then the answer is \"NO\".\n\nNow we'll describe an algorithm which works in all cases except for one. We'll tell about this case later.\n\nLet's apply our permutation q until either the current permutation becomes equal to s or we make exactly k steps. If the current permutation is equal to s and we've made t steps before this happened, then we need to look at the parity of k?-?t. If this number is even, then we can select any two consequent permutations in the sequence and apply (k?-?t)?/?2 times the following two permutations in this order: q and inv(q), where inv(q) is the inversed permutation q. Actually, we don't need to build the sequence itself, it's enough to check only the parity of k?-?t. So, if it is even, then the answer is \"YES\".\n\nAnalogically, we can replace q with inv(q) and repeat described process again. If we still didn't print \"YES\", then the answer is \"NO\".\n\nThe algorithm we've just described works for all cases except for one: when the permutation q is equal to inv(q) and at the same time s is reachable within one step. In this case the answer is \"YES\" iff k?=?1.",
    "hint": []
}