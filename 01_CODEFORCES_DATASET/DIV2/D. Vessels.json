{"link": "https://codeforces.com//contest/371/problem/D", "problemId": "4154", "problem_idx": "D", "shortId": "371D", "contest_number": "371", "problem_submissions": {"E": [5386691, 5385652, 5387391, 5387322, 5390985, 5387784, 5383050, 5388200, 5387733, 5386214, 5386292, 5388053, 5385063, 5389504, 5394788, 5402945], "D": [5385132, 5387024, 5385113, 5383557, 5389960, 5384908, 5386335, 5385491, 5385734, 5387644, 5385157, 5390842, 5385613, 5388772, 5383171, 5383787, 5383978, 5383957], "C": [5383277, 5383807, 5383992, 5381888, 5382446, 5383936, 5383664, 5385279, 5384741, 5383042, 5382860, 5382943, 5382483, 5383152, 5382630, 5382839], "B": [5381953, 5382093, 5382443, 5385168, 5381736, 5388764, 5382596, 5382957, 5382638, 5388559, 5381967, 5382051, 5381711, 5381795, 5381475, 5381931], "A": [5381375, 5381309, 5381281, 5382547, 5381148, 5381302, 5382094, 5382203, 5381364, 5381179, 5388604, 5381203, 5381211, 5381180, 5381177, 5381327]}, "name": "D. Vessels", "statement": "There is a system of vessels arranged one above the other as shown in\r\nthe figure below. Assume that the vessels are numbered from 1 to , in\r\nthe order from the highest to the lowest, the volume of the -th vessel\r\nis liters. Initially, all the vessels are empty. In some vessels water\r\nis poured. All the water that overflows from the -th vessel goes to the\r\n-th one. The liquid that overflows from the -th vessel spills on the\r\nfloor.Your task is to simulate pouring water into the vessels. To do\r\nthis, you will need to handle two types of queries: Add liters of water\r\nto the -th vessel; Print the number of liters of water in the -th\r\nvessel. When you reply to the second request you can assume that all the\r\nwater poured up to this point, has already overflown between the\r\nvessels.\r\n", "solutions": ["#include <iostream>\n#include <fstream>\n#include <cstdio>\n#include <cassert>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <stack>\n#include <set>\n#include <string>\n#include <utility>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n#include <ctime>\n#include <vector>                              \nusing namespace std;\n#define fname \"\"\n#define ull unsigned long long\n#define ll long long\n#define INF 1000*1000*1000\n#define f first\n#define s second\n#define mp make_pair\n#define pb push_back\n#define sz size()\nconst int N = 200500;\n\nint t[4 * N], nn = 1;\n\nvoid upd(int v) {\n\tv += nn - 1;\n\tt[v] = 0;\n\tv >>= 1;\n\twhile (v) {\n\t\tt[v] = t[v + v] + t[v + v + 1];\n\t\tv >>= 1;\n\t}\n}\n\nint get(int l, int r) {\n\tint res = 0;\n\tl += nn - 1;\n\tr += nn - 1;\n\twhile (l < r) {\n\t\tif (l & 1) res += t[l], l++;\n\t\tif (!(r & 1)) res += t[r], r--;\n\t\tl >>= 1, r >>= 1;\n\t}\n\tif (l == r) res += t[l];\n\treturn res;\n}\n\nint n, a[N], b[N], l[N], r[N], m, type, x, p;\nint main ()\n{\n\t#ifndef ONLINE_JUDGE\n\tfreopen (fname\"in\",\"r\",stdin);\n\tfreopen (fname\"out\",\"w\",stdout);\n\t#endif\n\n\tscanf (\"%d\", &n);\n\t\n\twhile (nn < n) nn += nn;\n\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tscanf (\"%d\", &b[i]);\n\t\tt[i + nn - 1] = 1;\n\t}\n\tfor (int i = nn - 1; i > 0; -- i) t[i] = t[i + i] + t[i + i + 1];\n\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tif (i > 1) l[i] = i - 1;\n\t\tif (i < n) r[i] = i + 1;\n\t}\n\n\tscanf (\"%d\", &m);\n\n\tfor (int i = 1; i <= m; ++ i) {\n\t\tscanf (\"%d\", &type);\n\t\tif (type == 1) {\n\t\t\tscanf (\"%d%d\", &p, &x);\n\t\t\tint L = p, R = n, id = n + 1;\n\t\t\twhile (L <= R) {\n\t\t\t\tint mid = (L + R) >> 1;\n\t\t\t\tif (get(p, mid) >= 1) {\n\t\t\t\t\tid = min(id, mid);\n\t\t\t\t\tR = mid - 1;\n\t\t\t\t}\n\t\t\t\telse L = mid + 1;\n\t\t\t}\n\t\t\tif (id == n + 1) continue;\n\n\t\t\twhile (id > 0) {\n\t\t\t\tif (a[id] + x >= b[id]) {\n\t\t\t\t\tx -= (b[id] - a[id]);\n\t\t\t\t\ta[id] = b[id];\n\t\t\t\t\tupd(id);\n\t\t\t\t\tr[l[id]] = r[id];\n\t\t\t\t\tl[r[id]] = l[id];\n\t\t\t\t\tint nxt = r[id];\n\t\t\t\t\tl[id] = r[id] = 0;\n\t\t\t\t\tid = nxt;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ta[id] += x;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tscanf (\"%d\", &p);\n\t\t\tprintf(\"%d\\n\", a[p]);\n\t\t}\n\t}\n\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures", "dsu", "implementation", "trees"], "dificulty": "1800", "interactive": false}