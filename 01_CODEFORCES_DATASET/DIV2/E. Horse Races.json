{
    "link": "https://codeforces.com//contest/96/problem/E",
    "problemId": "506",
    "problem_idx": "E",
    "shortId": "96E",
    "contest_number": "96",
    "problem_submissions": {
        "D": [
            534437,
            533397,
            534757,
            533892,
            534722,
            533924,
            535007,
            534455,
            535371,
            535582,
            1340094,
            535409,
            536105,
            535958,
            536462,
            535699,
            536244,
            534952,
            535780
        ],
        "C": [
            533576,
            535455,
            533943,
            535724,
            534003,
            535218,
            533921,
            535345,
            534145,
            534193,
            1324061,
            534622,
            534572,
            534284,
            533457,
            534891,
            534268,
            536022,
            536585
        ],
        "B": [
            532361,
            532648,
            532721,
            532306,
            532777,
            533008,
            532873,
            532664,
            532849,
            532835,
            1323435,
            533673,
            532925,
            532981,
            532552,
            533453,
            533209,
            532979,
            533406
        ],
        "A": [
            531832,
            531866,
            532073,
            531842,
            532241,
            532281,
            531932,
            531924,
            532040,
            532100,
            1323214,
            532228,
            532023,
            532163,
            532006,
            532139,
            532108,
            532038,
            532404
        ],
        "E": [
            1340747
        ]
    },
    "name": "E. Horse Races",
    "statement": "Petya likes horse racing very much. Horses numbered from to take part in\r\nthe races. Petya wants to evaluate the probability of victory; for some\r\nreason, to do that he needs to know the amount of nearly lucky horsesâ€™\r\nnumbers. A number is an integer number that has at least two lucky\r\ndigits the distance between which does not exceed . Petya learned from\r\nsome of his mates from Lviv that lucky digits are digits and . The\r\ndistance between the digits is the absolute difference between their\r\npositions in the number of a horse. For example, if , then numbers , ,\r\nare nearly lucky and numbers , , are not.Petya prepared intervals and\r\ninvented number , common for all of them. Your task is to find how many\r\nnearly happy numbers there are in each of these segments. Since the\r\nanswers can be quite large, output them modulo ().\r\n",
    "solutions": [
        "//program 96E\n\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n\nusing namespace std;\n\nconst int Mod=1000000007;\nconst int C1[10]={0,0,0,0,0,1,1,1,2,2};\nconst int C2[10]={0,0,0,0,1,0,0,1,0,0};\nconst int C3[10]={0,1,2,3,4,4,5,6,6,7};\nconst int C4[10]={1,1,1,1,0,1,1,0,1,1};\n\nint Len,K;\nint A[1001];\nbool Flag[1001][1001];\nlong long Pow[1001],Sum[1001];\nlong long F[1001][1001];\n\nlong long Check(long long X)\n{\n  while(X<0)X+=Mod;\n  return X%Mod;\n}\n\nlong long DP(int X,int Last,bool Smaller)\n{\n  if(X<0)return 0;if(Last>K)Last=0;\n  if(Smaller&&Flag[X][Last])return F[X][Last];\n  if(Smaller)Flag[X][Last]=true;\n  long long Ans;int T=A[Len-1-X];\n  if(Smaller)\n    if(!Last)\n      Ans=DP(X-1,1,1)*2+DP(X-1,0,1)*8;\n    else\n      Ans=Pow[X]*2+DP(X-1,Last+1,1)*8;\n  else\n    if(!Last)\n      Ans=DP(X-1,1,1)*C1[T]+(C2[T]?(DP(X-1,1,0)*C2[T]):0)+DP(X-1,0,1)*C3[T]+(C4[T]?(DP(X-1,0,0)*C4[T]):0);\n    else\n      Ans=Pow[X]*C1[T]+(Sum[X]+1)*C2[T]+DP(X-1,Last+1,1)*C3[T]+(C4[T]?(DP(X-1,Last+1,0)*C4[T]):0);\n  return Smaller?(F[X][Last]=Check(Ans)):Check(Ans);\n}\n\nlong long Count(string S)\n{\n  Len=S.size();\n  for(int i=0;i<Len;i++)A[i]=S[i]-48;\n  Pow[0]=1;for(int i=1;i<Len;i++)Pow[i]=Check(Pow[i-1]*10);\n  Sum[0]=0;for(int i=1;i<Len;i++)Sum[i]=Check(Sum[i-1]+Pow[i-1]*A[Len-i]);\n  return DP(Len-1,0,false);\n}\n\nstring Minus(string S)\n{\n  int N=S.size(),P=N-1;\n  while(S[P]=='0')S[P--]='9';S[P]--;\n  if(S[0]=='0'&&S.size()>1){string T=S;S=\"\";for(int i=1;i<N;i++)S+=T[i];}\n  return S;\n}\n\nint main()\n{\n  int Test;cin>>Test>>K;\n  memset(Flag,0,sizeof(Flag));\n  while(Test--)\n    {\n      string LB,UB;cin>>LB>>UB;\n      cout<<Check(Count(UB)-Count(Minus(LB)))<<endl;\n    }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Horse Races.json",
    "editorial_link": "https://codeforces.com//blog/entry/2257",
    "editorial": null,
    "hint": []
}