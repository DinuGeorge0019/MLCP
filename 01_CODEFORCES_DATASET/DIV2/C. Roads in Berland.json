{"link": "https://codeforces.com//contest/25/problem/C", "problemId": "116", "problem_idx": "C", "shortId": "25C", "contest_number": "25", "problem_submissions": {"E": [108305, 107891, 108459, 109074, 109171, 109424, 109005, 109444, 109356, 110109, 109944], "D": [107815, 107231, 107893, 107939, 107979, 108143, 107913, 108468, 108112, 108146, 108477, 108033, 107622, 108937, 108395, 108185, 107746], "C": [107542, 107972, 107666, 109348, 109330, 109305, 109284, 107599, 107695, 109679, 107814, 107526, 108085, 109622, 107856, 107775, 108767, 108192, 107976, 107797, 107728, 107534], "B": [107003, 106875, 107055, 106850, 107367, 107390, 107161, 107267, 107320, 107286, 107129, 107361, 106975, 107251, 107517, 106925, 106908], "A": [106730, 106739, 106878, 106704, 106912, 107216, 106718, 106909, 107174, 107012, 106856, 106840, 106744, 106943, 106825, 106728, 106741]}, "name": "C. Roads in Berland", "statement": "There are cities numbered from 1 to in Berland. Some of them are\r\nconnected by two-way roads. Each road has its own length an integer\r\nnumber from 1 to 1000. It is known that from each city it is possible to\r\nget to any other city by existing roads. Also for each pair of cities it\r\nis known the shortest distance between them. Berland Government plans to\r\nbuild new roads. For each of the planned road it is known its length,\r\nand what cities it will connect. To control the correctness of the\r\nconstruction of new roads, after the opening of another road Berland\r\ngovernment wants to check the sum of the shortest distances between all\r\npairs of cities. Help them for a given matrix of shortest distances on\r\nthe old roads and plans of all new roads, find out how the sum of the\r\nshortest distances between all pairs of cities changes after\r\nconstruction of each road.\r\n", "solutions": ["#include <map>\n#include <set>\n#include <queue>\n#include <algorithm>\n#include <stdio.h>\n#include <math.h>\n#include <string>\n#include <list>\n#include <stack>\n#include <string.h>\n#include <stdlib.h>\n#include <vector>\n#include <utility>\n#include <list>\n#define INF 0x3fffffff\n\n\ntypedef long long ll;\n#define PII pair<int, int>\n#define PLL pair<ll, ll>\n#define PDD pair<double, double>\n#define PIL pair<int, ll>\n#define PLI pair<ll, int>\n#define PID pair<int, double>\n#define PDI pair<double, int>\n#define PLD pair<ll, double>\n#define PDL pair<double, ll>\n\n#define PQ(x) priority_queue< x >  //highest first\n#define PQR(x) priority_queue< x , vector< x > , greater < x > > //lowest first\n#define V(x) vector< x > \n#define L(x) list< x > \n#define MP make_pair\n#define PB push_back\n#define IT(x) for (typeof((x).begin()) it = (x).begin() ; it != (x).end() ; it++)\n#define IT2(x) for (typeof((x).begin()) it2 = (x).begin() ; it2 != (x).end() ; it2++)\n#define FOR(i, a, b) for (int i = (a) ; i< (b) ; i++)\n\nusing namespace std;\n\nint  n;\n#define MAX 305\nint dist[MAX][MAX];\n\nll sum;\n\nvoid add(int a, int b, int c)\n{\n  //  printf(\"%i %i %i %i %i\\n\", a, b, c, dist[a][b], c);\n  if (dist[a][b]<=c) return;\n\n  FOR(i,0,n) FOR(j,0,n)\n    if (dist[i][j] > dist[i][a] + c + dist[b][j])\n      {\n\tif (i<j) sum-=dist[i][j];\n\tdist[i][j]=dist[i][a] + c + dist[b][j];\n\t//\tprintf(\"%i %i now: %i\\n\",i,j,dist[i][j]);\n\tif (i<j) sum+=dist[i][j];\n      }\n}\n\nint main()\n{\n  scanf(\"%i \", &n);\n  sum=0;\n  FOR(i,0,n) FOR(j,0,n)\n    {\n      scanf(\"%i \", &dist[i][j]);\n      if (i<j) sum+=dist[i][j];\n    }\n  int m,a,b,c;\n  scanf(\"%i \", &m);\n  FOR(i,0,m)\n    {\n      scanf(\"%i %i %i \", &a, &b, &c);\n      a--;b--;\n      add(a,b,c);\n      add(b,a,c);\n      if (i) printf(\" \");\n      printf(\"%I64d\",sum);\n    }\n  printf(\"\\n\");\n  return 0;\n}\n\n"], "input": "", "output": "", "tags": ["graphs", "shortest paths"], "dificulty": "1900", "interactive": false}