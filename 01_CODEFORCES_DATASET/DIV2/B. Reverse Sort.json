{
    "link": "https://codeforces.com//contest/1605/problem/B",
    "problemId": "1182995",
    "problem_idx": "B",
    "shortId": "1605B",
    "contest_number": "1605",
    "problem_submissions": {
        "E": [
            135140556,
            135137170,
            135140149,
            135131162,
            135139425,
            135135884,
            135145750,
            135134170,
            135146319,
            135151738,
            135143897,
            135157772,
            135157112,
            135164572,
            135156916,
            135165811,
            135157373,
            135164912,
            135160322,
            135160455
        ],
        "D": [
            135123258,
            135121299,
            135126903,
            135118749,
            135131018,
            135121443,
            135128070,
            135130028,
            135134932,
            135133895,
            135133786,
            135133991,
            135133461,
            135131214,
            135138932,
            135135042,
            135138476,
            135132029,
            135132400,
            135148563
        ],
        "C": [
            135109471,
            135112911,
            135114732,
            135134429,
            135118955,
            135116544,
            135116248,
            135117340,
            135108363,
            135118939,
            135119487,
            135116822,
            135120064,
            135117077,
            135120474,
            135119518,
            135124633,
            135117200,
            135123222,
            135116741
        ],
        "B": [
            135104011,
            135105341,
            135106044,
            135104987,
            135108524,
            135104124,
            135112684,
            135116832,
            135113729,
            135109962,
            135123178,
            135110129,
            135109123,
            135109984,
            135111099,
            135109709,
            135119558,
            135106232,
            135120020,
            135107502
        ],
        "A": [
            135103035,
            135103047,
            135103241,
            135103076,
            135103421,
            135106303,
            135106513,
            135110580,
            135103745,
            135103393,
            135105600,
            135103522,
            135103862,
            135104535,
            135103487,
            135103484,
            135106186,
            135103066,
            135106006,
            135103429
        ]
    },
    "name": "B. Reverse Sort",
    "statement": "Ashish has a binary string s of length n that he wants to sort in\r\nnon-decreasing order.He can perform the following operation: Choose a\r\nsubsequence of any length such that its elements are in non-increasing\r\norder. Formally, choose any k such that 1\r\nleq k\r\nleq n and any sequence of k indices 1\r\nle i_1\r\nlt i_2\r\nlt\r\nldots\r\nlt i_k\r\nle n such that s_{i_1}\r\nge s_{i_2}\r\nge\r\nldots\r\nge s_{i_k}. Reverse this subsequence in-place. Formally, swap s_{i_1}\r\nwith s_{i_k}, swap s_{i_2} with s_{i_{k-1}},\r\nldots and swap s_{i_{\r\nlfloor k/2\r\nrfloor}} with s_{i_{\r\nlceil k/2\r\nrceil + 1}} (Here\r\nlfloor x\r\nrfloor denotes the largest integer not exceeding x, and\r\nlceil x\r\nrceil denotes the smallest integer not less than x) Find the minimum\r\nnumber of operations required to sort the string in non-decreasing\r\norder. It can be proven that it is always possible to sort the given\r\nbinary string in at most n operations.\r\n",
    "solutions": [
        "// Problem: B. Reverse Sort\n// Contest: Codeforces\n// URL: https://codeforces.com/contest/1605/problem/B\n// Memory Limit: 256 MB\n// Time Limit: 2000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n//And in that light,I find deliverance.\n#include<bits/stdc++.h>\n// #pragma GCC optimize(\"Ofast\")\n// #pragma GCC optimize(\"unroll-loops\")\n// #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\nusing namespace std;\n#define int long long\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nconst int p=998244353;\nint qp(int x,int y)\n{\n\tint res=1;\n\tfor(int t=x; y; y>>=1,t=t*t%p) if(y&1) res=res*t%p;\n\treturn res;\n}\nchar s[1000003];\nsigned main()\n{\n\tfor(int T=read();T--;)\n\t{\n\t\tint n=read();\n\t\tscanf(\"%s\",s+1);\n\t\tint c=0;\n\t\tfor(int i=1; i<=n; ++i) if(s[i]=='0') ++c;\n\t\tvector<int> v;\n\t\tfor(int i=1; i<=n; ++i) if(s[i]=='0')\n\t\t{\n\t\t\tif(i>c) v.push_back(i);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(i<=c) v.push_back(i);\n\t\t}\n\t\tif(!v.empty()) \n\t\t{\n\t\t\tputs(\"1\");\n\t\t\tprintf(\"%lld \",(int)v.size());\n\t\t\tfor(int i:v) printf(\"%lld \",i);\n\t\t\tputs(\"\");\n\t\t}\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Reverse Sort.json",
    "editorial_link": "https://codeforces.com//blog/entry/96866",
    "editorial": "Any binary string can be sorted in at most operation!Let the number of s\r\nin be and the number of s in be .The first positions of the final sorted\r\nstring will be and the remaining positions will be (since it is sorted\r\nin non-decreasing order).: For every that is in the first positions of ,\r\nthere is a that is in the last positions of (Why?).If the string is not\r\nalready sorted, in one operation pick the subsequence consisting of all\r\ns among the first positions of as well as all s among the last positions\r\nof . It can be shown that this will correctly sort the string since the\r\nnumber of such s and s are equal.:\r\n",
    "hint": [
        "Hint 1 What can you say about the number of $0$s and $1$s that are in positions where they should not be in the final string?",
        "Hint 2 What is the minimum number of operations required to sort the string given this relationship between the number of such $0$s and $1$s?"
    ]
}