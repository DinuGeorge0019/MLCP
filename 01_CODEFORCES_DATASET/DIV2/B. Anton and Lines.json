{
    "link": "https://codeforces.com//contest/593/problem/B",
    "problemId": "40048",
    "problem_idx": "B",
    "shortId": "593B",
    "contest_number": "593",
    "problem_submissions": {
        "E": [
            14074831,
            14071839,
            14069012,
            14112263,
            14101227,
            14078183,
            14073295,
            14073367
        ],
        "D": [
            14071251,
            14067776,
            14071547,
            14071080,
            14071834,
            14069627,
            14072451,
            14072921,
            14072768,
            14072117,
            14072979,
            14072065,
            14072780,
            14073132,
            14073238
        ],
        "B": [
            14065295,
            14080270,
            14065853,
            14065770,
            14066413,
            14066282,
            14075373,
            14072184,
            14066079,
            14066654,
            14066024,
            14067374,
            14064950,
            14066946,
            14073180,
            14067257,
            14066769,
            14067908,
            14066629
        ],
        "A": [
            14064191,
            14073716,
            14064213,
            14064573,
            14064399,
            14064679,
            14064276,
            14064487,
            14064593,
            14064652,
            14065927,
            14064315,
            14065183,
            14065251,
            14065732,
            14064991,
            14065641,
            14065343
        ],
        "C": [
            14105964,
            14078413,
            14072751
        ]
    },
    "name": "B. Anton and Lines",
    "statement": "The teacher gave Anton a large geometry homework, but he didn\u2019t do it\r\n(as usual) as he participated in a regular round on Codeforces. In the\r\ntask he was given a set of lines defined by the equations . It was\r\nnecessary to determine whether there is at least one point of\r\nintersection of two of these lines, that lays strictly inside the strip\r\nbetween . In other words, is it true that there are and , such that: ,\r\nthat is, point belongs to the line number ; , that is, point belongs to\r\nthe line number ; , that is, point lies inside the strip bounded by .\r\nYou can\u2019t leave Anton in trouble, can you? Write a program that solves\r\nthe given task.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN = 1e5 + 100;\n\nint N, X1, X2;\nint K[MAXN], B[MAXN];\n\nll calc(int i, ll X) {\n    return K[i] * X + B[i];\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0), cout.precision(15);\n\n    cin >> N;\n    cin >> X1 >> X2;\n\n    vector<int> o1(N), o2(N);\n\n    for (int i = 0; i < N; i++) {\n        cin >> K[i] >> B[i];\n        o1[i] = i;\n        o2[i] = i;\n    }\n\n    // sort by y-coordinate\n    sort(o1.begin(), o1.end(), [](int i, int j) {\n        ll Y1 = calc(i, X1);\n        ll Y2 = calc(j, X1);\n        if (Y1 != Y2) return Y1 < Y2;\n        return K[i] < K[j];\n    });\n\n    sort(o2.begin(), o2.end(), [](int i, int j) {\n        ll Y1 = calc(i, X2);\n        ll Y2 = calc(j, X2);\n        if (Y1 != Y2) return Y1 < Y2;\n        return K[i] > K[j];\n    });\n\n    bool same = true;\n    for (int i = 0; i < N; i++)\n        same &= o1[i] == o2[i];\n\n    if (same) cout << \"NO\\n\";\n    else cout << \"YES\\n\";\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "sortings"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Anton and Lines.json",
    "editorial_link": "https://codeforces.com//blog/entry/21406",
    "editorial": "Note that if s line intersects with the th in this band, and at th line\r\nis higher, at above would be th line. Sort by coordinate at , and .\r\nVerify that the order of lines in both cases is the same. If there is a\r\nline that its index in the former case does not coincide with the\r\nsecond, output Yes. In another case, derive No. The only thing that can\r\nstop us is the intersection at the borders, as in this case we dont know\r\nthe sorts order. Then add to our border small , and by subtract , and\r\nthe sort order is set uniquely. The overall complexity is\r\n"
}