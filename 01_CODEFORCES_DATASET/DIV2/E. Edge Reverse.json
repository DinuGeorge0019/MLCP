{
    "link": "https://codeforces.com//contest/1777/problem/E",
    "problemId": "1746205",
    "problem_idx": "E",
    "shortId": "1777E",
    "contest_number": "1777",
    "problem_submissions": {
        "F": [
            189999253,
            189998361,
            189995169,
            190011490,
            190011116,
            190013769,
            190004003,
            190169577,
            190021489,
            190008226,
            190022277,
            190024196,
            190001976,
            190021500,
            190024711,
            190004961,
            190022857,
            190022045,
            190022993,
            190023276
        ],
        "E": [
            189990969,
            189994239,
            190006715,
            190001929,
            190054762,
            190054746,
            190004086,
            189987917,
            190017805,
            190001567,
            190021800,
            189999439,
            190005213,
            190019127,
            190007828,
            190009522,
            190469875,
            190020733,
            190022555,
            190013627,
            190011832,
            190008524,
            190011505
        ],
        "D": [
            189985748,
            189986829,
            189987429,
            189993541,
            189993926,
            189998094,
            189993119,
            189991582,
            189993898,
            189993229,
            189996303,
            190011551,
            189999620,
            189998025,
            189985279,
            189989471,
            190001136,
            190003775,
            189995371
        ],
        "C": [
            189982736,
            189982649,
            189981053,
            189986400,
            189987697,
            189986317,
            189985767,
            189986390,
            189987035,
            189982802,
            189983463,
            189984656,
            189988557,
            189987620,
            190014819,
            189984186,
            189995951,
            189999181,
            189985198
        ],
        "B": [
            189976042,
            189976916,
            189975827,
            189979459,
            189978444,
            189990271,
            189980176,
            189980492,
            189982493,
            189987295,
            189978177,
            189974359,
            189977682,
            189978251,
            190006967,
            189977343,
            189982864,
            189993219,
            189987444
        ],
        "A": [
            189973782,
            189974189,
            189973729,
            189974335,
            189974674,
            189974171,
            189975493,
            189974143,
            189973720,
            189987925,
            189975596,
            189973718,
            189975380,
            189974227,
            189988175,
            189973870,
            189975652,
            189992324,
            189990668
        ]
    },
    "name": "E. Edge Reverse",
    "statement": "You will be given a weighted directed graph of n nodes and m directed\r\nedges, where the i-th edge has a weight of w_i (1\r\nle i\r\nle m).You need to reverse some edges of this graph so that there is at\r\nleast one node in the graph from which every other node is reachable.\r\nThe cost of these reversals is equal to the maximum weight of all\r\nreversed edges. If no edge reversal is required, assume the cost to be\r\n0.It is guaranteed that no self-loop or duplicate edge exists.Find the\r\nminimum cost required for completing the task. If there is no solution,\r\nprint a single integer -1.\r\n",
    "solutions": [
        "//\u8fd9\u56de\u53ea\u82b1\u4e86114514min\u5c31\u6253\u5b8c\u4e86\u3002\n//\u771f\u597d\u3002\u8bb0\u5f97\u591a\u624b\u9020\u51e0\u7ec4\u3002ACM\u62cd\u4ec0\u4e48\u62cd\u3002 \n#include \"bits/stdc++.h\"\nusing namespace std;\ntemplate<typename typC,typename typD> istream &operator>>(istream &cin,pair<typC,typD> &a) { return cin>>a.first>>a.second; }\ntemplate<typename typC> istream &operator>>(istream &cin,vector<typC> &a) { for (auto &x:a) cin>>x; return cin; }\ntemplate<typename typC,typename typD> ostream &operator<<(ostream &cout,const pair<typC,typD> &a) { return cout<<a.first<<' '<<a.second; }\ntemplate<typename typC,typename typD> ostream &operator<<(ostream &cout,const vector<pair<typC,typD>> &a) { for (auto &x:a) cout<<x<<'\\n'; return cout; }\ntemplate<typename typC> ostream &operator<<(ostream &cout,const vector<typC> &a) { int n=a.size(); if (!n) return cout; cout<<a[0]; for (int i=1; i<n; i++) cout<<' '<<a[i]; return cout; }\ntemplate<typename typC,typename typD> bool cmin(typC &x,const typD &y) { if (x>y) { x=y; return 1; } return 0; }\ntemplate<typename typC,typename typD> bool cmax(typC &x,const typD &y) { if (x<y) { x=y; return 1; } return 0; }\ntemplate<typename typC> vector<typC> range(typC l,typC r,typC step=1) { assert(step>0); int n=(r-l+step-1)/step,i; vector<typC> res(n); for (i=0; i<n; i++) res[i]=l+step*i; return res; }\n#if !defined(ONLINE_JUDGE)&&defined(LOCAL)\n#include \"my_header\\debug.h\"\n#else\n#define dbg(...) ;\n#define dbgn(...) ;\n#endif\ntypedef unsigned int ui;\ntypedef long long ll;\n#define all(x) (x).begin(),(x).end()\n// template<typename T1,typename T2> void inc(T1 &x,const T2 &y) { if ((x+=y)>=p) x-=p; }\n// template<typename T1,typename T2> void dec(T1 &x,const T2 &y) { if ((x+=p-y)>=p) x-=p; }\nconst int N=2e5+5;\nstruct union_set\n{\n\tvector<int> f;\n\tint n;\n\tunion_set() {}\n\tunion_set(int nn) :n(nn),f(nn+1)\n\t{\n\t\tiota(all(f),0);\n\t}\n\tint getf(int u) { return f[u]==u?u:f[u]=getf(f[u]); }\n\tvoid merge(int u,int v)\n\t{\n\t\tu=getf(u); v=getf(v);\n\t\tf[u]=v;\n\t}\n\tbool connected(int u,int v) { return getf(u)==getf(v); }\n};\nconst int inf=2e9;\nvector<int> e[N];\nint dfn[N],low[N],st[N],f[N],fs,tp,id;\nbool ed[N],rd[N];\nvoid tarjan(int u)\n{\n\tdfn[u]=low[u]=++id;\n\ted[u]=1; st[++tp]=u;\n\tfor (int v:e[u]) if (dfn[v])\n\t{\n\t\tif (ed[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\telse tarjan(v),low[u]=min(low[u],low[v]);\n\tif (dfn[u]==low[u])\n\t{\n\t\t++fs;\n\t\tdo\n\t\t{\n\t\t\tf[st[tp]]=fs;\n\t\t\ted[st[tp]]=0;\n\t\t} while (st[tp--]!=u);\n\t}\n}\nint main()\n{\n\tios::sync_with_stdio(0); cin.tie(0);\n\tcout<<fixed<<setprecision(15);\n\tint T; cin>>T;\n\twhile (T--)\n\t{\n\t\tint n,m,i,j;\n\t\tcin>>n>>m;\n\t\tvector<tuple<int,int,int>> edges(m);\n\t\tvector<int> val={0,inf};\n\t\tfor (auto &[u,v,w]:edges) cin>>u>>v>>w,val.push_back(w);\n\t\tsort(all(val));\n\t\tint l=0,r=val.size()-1;\n\t\twhile (l<r)\n\t\t{\n\t\t\tint mid=l+r>>1;\n\t\t\tauto ck=[&](int W)\n\t\t\t{\n\t\t\t\tunion_set s(n);\n\t\t\t\tfor (auto [u,v,w]:edges) if (w<=W) s.merge(u,v);\n\t\t\t\tfor (i=1; i<=n; i++) e[i].clear();\n\t\t\t\tfor (auto [u,v,w]:edges) if (w>W) e[s.getf(u)].push_back(s.getf(v));\n\t\t\t\tfor (i=1; i<=n; i++) dfn[i]=low[i]=st[i]=f[i]=rd[i]=ed[i]=0; fs=tp=id=0;\n\t\t\t\tfor (i=1; i<=n; i++) if (!dfn[i]&&s.f[i]==i) tarjan(i);\n\t\t\t\tfor (i=1; i<=n; i++) if (s.f[i]==i) for (int v:e[i]) if (f[i]!=f[v]) rd[f[v]]=1;\n\t\t\t\treturn count(rd+1,rd+fs+1,0)==1;\n\t\t\t};\n\t\t\tif (ck(val[mid])) r=mid; else l=mid+1;\n\t\t}\n\t\tif (val[l]==inf) val[l]=-1;\n\t\tcout<<val[l]<<'\\n';\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dfs and similar",
        "graphs",
        "trees"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Edge Reverse.json",
    "editorial_link": "https://codeforces.com//blog/entry/111729",
    "editorial": "If the cost for completing the task is , we can reverse any edge with\r\ncost . This is equivalent to making those edges bidirectional since when\r\nchecking for reachability, we only need to traverse an edge once, and we\r\ncan choose to reverse it or not, depending upon the need.We can apply a\r\nbinary search on the minimum cost and check if there exists at least one\r\nnode such that all nodes are reachable from it if all edges with cost\r\nless than or equal to the current cost become bidirectional.To check in\r\nlinear time if there exists such a suitable node, we will use a\r\nsuppressed version of the Kosa Raju algorithm. We condense the nodes\r\ninto Strongly Connected Components (SCCs) and perform a topological sort\r\non them. If there exists an SCC from which all SCCs are reachable, then\r\nthe first element in the topological sort will be that SCC (since in a\r\ntopological sort, an element can only reach elements coming after it).\r\nSo, we can choose any node from the first SCC in the topological sort\r\nand apply DFS to check if all the nodes are reachable from that node. If\r\nthey aren\u00e2\u0080\u0099t, we conclude it is impossible to complete the task with the\r\ncurrent cost.Overall time complexity:\r\n"
}