{
    "link": "https://codeforces.com//contest/197/problem/A",
    "problemId": "1429",
    "problem_idx": "A",
    "shortId": "197A",
    "contest_number": "197",
    "problem_submissions": {
        "E": [
            1791268,
            1802740,
            1802736,
            1795426
        ],
        "C": [
            1788910,
            1789269,
            1789264,
            1788938,
            1788924,
            1790933,
            1791154,
            1789450,
            1802730,
            1789405,
            1789447,
            1788838,
            1790005,
            1788746,
            1790181
        ],
        "B": [
            1788528,
            1788680,
            1789600,
            1788527,
            1790011,
            1789032,
            1788888,
            1788636,
            1788195,
            1802729,
            1788848,
            1790689,
            1795848,
            1788783,
            1791951,
            1789313
        ],
        "A": [
            1788079,
            1787820,
            1787632,
            1787687,
            1787891,
            1787887,
            1788039,
            1787844,
            1789322,
            1802727,
            1791494,
            1791478,
            1788291,
            1788862,
            1792369
        ],
        "D": [
            1790975,
            1793898,
            1793489,
            1794292,
            1794595,
            1794900,
            1792868,
            1794686,
            1795625,
            1795183,
            1792703,
            1794330,
            1795844,
            1794780,
            1795863
        ]
    },
    "name": "A. Plate Game",
    "statement": "You’ve got a rectangular table with length and width and the infinite\r\nnumber of plates of radius . Two players play the following game: they\r\ntake turns to put the plates on the table so that the plates don’t lie\r\non each other (but they can touch each other), and so that any point on\r\nany plate is located within the table’s border. During the game one\r\ncannot move the plates that already lie on the table. The player who\r\ncannot make another move loses. Determine which player wins, the one who\r\nmoves first or the one who moves second, provided that both players play\r\noptimally well.\r\n",
    "solutions": [
        "#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <cstddef>\n#include <algorithm>\n#include <utility>\n#include <iterator>\n#include <numeric>\n#include <list>\n#include <complex>\n#include <cstdio>\n#include <climits>\n#include <iostream>\n#include <fstream>\n\n/*** TEMPLATE CODE STARTS HERE ***/\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef long long ll;\ntypedef complex<double> pnt;\ntypedef pair<int, int> pii;\n\n#define RA(x) (x).begin(), (x).end()\n#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)\n#define SZ(x) ((int) (x).size())\n\ntemplate<class T>\nvoid splitstr(const string &s, vector<T> &out)\n{\n    istringstream in(s);\n    out.clear();\n    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));\n}\n\ntemplate<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }\n\nstatic void redirect(int argc, const char **argv)\n{\n    if (argc > 1)\n    {\n        static filebuf f;\n        f.open(argv[1], ios::in);\n        cin.rdbuf(&f);\n        if (!cin)\n        {\n            cerr << \"Failed to open '\" << argv[1] << \"'\" << endl;\n            exit(1);\n        }\n    }\n\n    if (argc > 2)\n    {\n        static filebuf f;\n        f.open(argv[2], ios::out | ios::trunc);\n        cout.rdbuf(&f);\n        if (!cout)\n        {\n            cerr << \"Failed to open '\" << argv[2] << \"'\" << endl;\n        }\n    }\n}\n\n/*** TEMPLATE CODE ENDS HERE */\n\nint main(int argc, const char **argv)\n{\n    redirect(argc, argv);\n\n    int A, B, R;\n    cin >> A >> B >> R;\n    R *= 2;\n    if (A < R || B < R)\n        cout << \"Second\\n\";\n    else\n        cout << \"First\\n\";\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "games",
        "math"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Plate Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/4717",
    "editorial": "If first player canât make first move (table is too small and plate\r\ndoesnât fit it, i.e. ), second player wins. Else first player wins.\r\nWinning strategy for first player: place first plate to the center of\r\ntable. After that he symmetrically reflects moves of second player with\r\nrespect to center of table. If second player has move, first player has\r\nsymmetrical move, too. If not, first player won.\r\n",
    "hint": []
}