{
    "link": "https://codeforces.com//contest/148/problem/B",
    "problemId": "880",
    "problem_idx": "B",
    "shortId": "148B",
    "contest_number": "148",
    "problem_submissions": {
        "D": [
            1139191,
            1138652,
            1138343,
            1139931,
            1138050,
            1141845,
            1137541,
            1139093,
            1141226,
            1140900,
            1138905,
            1138670,
            1137683
        ],
        "E": [
            1138985,
            1140513,
            1139519,
            1141488,
            1139717,
            1140284,
            1142221,
            1139946,
            1138873,
            1142635,
            1149309,
            1141182,
            1140316
        ],
        "B": [
            1135154,
            1135748,
            1135053,
            1135639,
            1140648,
            1135735,
            1134985,
            1135240,
            1135774,
            1138444,
            1134958,
            1134820,
            1135228
        ],
        "A": [
            1133841,
            1134314,
            1134164,
            1134213,
            1133731,
            1134661,
            1133747,
            1134454,
            1134132,
            1134262,
            1133778,
            1133823,
            1134119,
            1133907
        ],
        "C": [
            1137373,
            1136906,
            1137643,
            1136607,
            1138188,
            1140983,
            1141293,
            1140962,
            1139122,
            1136427,
            1137116,
            1136279
        ]
    },
    "name": "B. Escape",
    "statement": "The princess is going to escape the dragon’s cave, and she needs to plan\r\nit carefully.The princess runs at miles per hour, and the dragon flies\r\nat miles per hour. The dragon will discover the escape after hours and\r\nwill chase the princess immediately. Looks like there’s no chance to\r\nsuccess, but the princess noticed that the dragon is very greedy and not\r\ntoo smart. To delay him, the princess decides to borrow a couple of\r\nbijous from his treasury. Once the dragon overtakes the princess, she\r\nwill drop one bijou to distract him. In this case he will stop, pick up\r\nthe item, return to the cave and spend hours to straighten the things\r\nout in the treasury. Only after this will he resume the chase again from\r\nthe very beginning.The princess is going to run on the straight. The\r\ndistance between the cave and the king’s castle she’s aiming for is\r\nmiles. How many bijous will she need to take from the treasury to be\r\nable to reach the castle? If the dragon overtakes the princess at\r\nexactly the same moment she has reached the castle, we assume that she\r\nreached the castle before the dragon reached her, and doesn’t need an\r\nextra bijou to hold him off.\r\n",
    "solutions": [
        "#include<vector>\n#include<list>\n#include<map>\n#include<set>\n#include<deque>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<algorithm>\n#include<functional>\n#include<numeric>\n#include<utility>\n#include<iostream>\n#include<sstream>\n#include<iomanip>\n#include<cmath>\n#include<cstdlib>\n#include<cctype>\n#include<string>\n#include<cstring>\n#include<cstdio>\n#include<ctime>\n#include<climits>\n#include<complex>\n#include<cassert>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define sz(x) (int)((x).size())\n#define all(x) x.begin(),x.end()\n#define clr(x) memset((x),0,sizeof(x))\n#define cdp(x) memset((x),-1,sizeof(x))\n#define rep(i,n) for (i=0;i<n;i++)\n#define Rep(i,a,b) for (i=a;i<=b;i++)\n#define ff(i,x) for (i=start[x];i!=-1;i=a[i].next)\n#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)\nusing namespace std;\nconst double eps=1e-8;\nconst double pi=acos(-1.0);\nint dblcmp(double d){if (fabs(d)<eps)return 0;return d>eps?1:-1;}\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\ntypedef vector<pii> vpi;\nint main()\n{\n    int i,j,k;\n    double v1,v2,t,f,c;\n    cin>>v1>>v2>>t>>f>>c;\n    if (dblcmp(v1-v2)>=0)\n    {\n        puts(\"0\");\n        return 0;\n    }\n    double x=0,y=0;\n    int ans=0;\n    x+=v1*t;\n    while (dblcmp(x-c)<0)\n    {\n        double d=x-y;\n        double s=d/(v2-v1);\n        x+=v1*s;\n        y+=v2*s;\n        if (dblcmp(x-c)>=0)\n        {\n            printf(\"%d\\n\",ans);\n            return 0;\n        }\n        ans++;\n        x+=v1*(f+y/v2);\n        y=0;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n        "
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Escape.json",
    "editorial_link": "https://codeforces.com//blog/entry/3819",
    "editorial": "In this problem it was enough to simulate the sequence of events that\r\nhappen on the line between the cave and the castle. My solution focused\r\non two types of evens \"the dragon is in the cave and sets off after the\r\nprincess\" and \"the dragon and the princess are at the same coordinate\";\r\nin this case itâs enough to keep track of time and princessâ coordinate,\r\nno need to store dragonâs one. The first type of event happens for the\r\nfirst time at time T, when the princessâ coordinate is . If at this time\r\nshe has already reached the castle, no bijous are needed. Otherwise we\r\ncan start iterating. The time between events of first and second type\r\nequals the princessâ coordinate at the moment of first event, divided by\r\n. Adjust the princessâ coordinate by the distance she will cover during\r\nthis time and check whether she reached the castle again. If she didnât,\r\nsheâll need a bijou increment the number of bijous required. The second\r\npart of the loop processes the return of the dragon, i.e., the\r\ntransition from second type of event to the first one. The time between\r\nthe events equals princessâ new coordinate, divided by the dragonâs\r\nspeed, plus the time of straightening things out in the treasury. Adjust\r\nprincessâ coordinate again and return to the start of the loop (you\r\ndonât need to check whether the princess reached the castle at this\r\nstage, since it doesnât affect the return value). The complexity of the\r\nalgorithm can be estimated practically: the number of loop iterations\r\nwill be maximized when dragonâs speed and distance to the castle are\r\nmaximum, and the rest of parameters are minimum. This results in about\r\n150 bijous and the same number of iterations. Youâll also need to check\r\nfor the case separately the dragon can be old and fat and lazy, and he\r\nmight never catch up with the princess.\r\n",
    "hint": []
}