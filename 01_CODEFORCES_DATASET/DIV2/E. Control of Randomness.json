{
    "link": "https://codeforces.com//contest/2040/problem/E",
    "problemId": "3075499",
    "problem_idx": "E",
    "shortId": "2040E",
    "contest_number": "2040",
    "problem_submissions": {
        "E": [
            295634858,
            295598220,
            295603659,
            295602852,
            295609062,
            295608956,
            295609438,
            295613265,
            295617536,
            295622256,
            295615426,
            295623087,
            295613034,
            295632243,
            295615757,
            295623729,
            295822197,
            295614576,
            295629623,
            295677087,
            295677053,
            295616459,
            295615739
        ],
        "F": [
            295625297,
            295602948,
            295765575,
            295764437,
            295628810,
            295613638,
            295772184
        ],
        "C": [
            295613817,
            295578002,
            295582361,
            295582510,
            295585319,
            295585121,
            295589541,
            295584238,
            295583765,
            295584198,
            295582424,
            295585127,
            295590138,
            295581996,
            295587456,
            295580712,
            295586116,
            295581622,
            295590178,
            295583863
        ],
        "D": [
            295602955,
            295588244,
            295593423,
            295591690,
            295596226,
            295661257,
            295596632,
            295595711,
            295594858,
            295602270,
            295597697,
            295602059,
            295598368,
            295600419,
            295605426,
            295590011,
            295601199,
            295607620
        ],
        "B": [
            295586789,
            295590381,
            295574073,
            295576257,
            295574329,
            295574189,
            295580781,
            295572257,
            295573109,
            295573299,
            295575453,
            295572099,
            295577165,
            295593436,
            295571846,
            295572279,
            295571755,
            295574449,
            295577717,
            295572094
        ],
        "A": [
            295581636,
            295569030,
            295573127,
            295568276,
            295571294,
            295574905,
            295568027,
            295568114,
            295567840,
            295567999,
            295568293,
            295568412,
            295569901,
            295568913,
            295567935,
            295568054,
            295568783,
            295570941,
            295568578
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137074",
    "editorial": "To begin with, letâs solve it without queries and forced movements.\r\nLetâs consider the nature of the path. The current vertex has a parent\r\nof parent . Let there be an odd move now, and the robot will go to the\r\nparent of . If weâre lucky, itâll go to . Otherwise, it will go to the\r\nbrother of vertex . But this wonât change anything the next step the\r\nrobot will do the same thing again. For vertex and all its brothers, the\r\nanswer is the same. Let be the answer for vertex , and let be the number\r\nof brothers of vertex , including itself. Then , whence .We can see that\r\nour path consists of blocks of height the robot tries to overcome the\r\nnext block until it succeeds, and then proceeds to the next one.We are\r\nnow ready to answer the queries. Performing an operation is essentially\r\nskipping a block the robot will pass it on the first try, spending not\r\nactions on it, but . Therefore we will delete blocks with the largest\r\ngreedily. We will traverse the graph and store two sets of degrees of\r\nvertices on the path to the root one for vertices with odd depth, and\r\nthe other for vertices with even depth. We will answer requests offline.\r\nHaving detected a query, we will run through the first elements of the\r\ncorresponding set and subtract them.Asymptotics of the trivial\r\nimplementation, in which for each query we move up to the root, is\r\n.Asymptotics of a possible offline solution, where we will maintain sets\r\nof vertices while traversing the graph, is .\r\n",
    "name": "E. Control of Randomness",
    "statement": "You are given a tree with n vertices.Let’s place a robot in some vertex\r\nv\r\nne 1, and suppose we initially have p coins. Consider the following\r\nprocess, where in the i-th step (starting from i = 1): If i is odd, the\r\nrobot moves to an adjacent vertex in the direction of vertex 1; Else, i\r\nis even. You can either pay one coin (if there are some left) and then\r\nthe robot moves to an adjacent vertex in the direction of vertex 1, or\r\nnot pay, and then the robot moves to an adjacent vertex chosen . The\r\nprocess stops as soon as the robot reaches vertex 1. Let f(v, p) be the\r\nminimum possible expected number of steps in the process above if we\r\nspend our coins optimally.Answer q queries, in the i-th of which you\r\nhave to find the value of f(v_i, p_i), modulo^{\r\ntext{ }} 998\r\n,244\r\n,353.^{\r\ntext{ }} Formally, let M = 998\r\n,244\r\n,353. It can be shown that the answer can be expressed as an irreducible\r\nfraction\r\nfrac{p}{q}, where p and q are integers and q\r\nnot\r\nequiv 0\r\npmod{M}. Output the integer equal to p\r\ncdot q^{-1}\r\nbmod M. In other words, output such an integer x that 0\r\nle x < M and x\r\ncdot q\r\nequiv p\r\npmod{M}.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std; using ll = long long;using ld = long double;using pii = pair<int, int>;using pll = pair<ll, ll>;using vi = vector<int>;using vll = vector<ll>; constexpr int MOD = 998244353;constexpr int INF = 1e9;constexpr ll LINF = 1e18;constexpr ld EPS = 1e-9; #define fast_io() ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr)#define all(x) (x).begin(), (x).end()#define rall(x) (x).rbegin(), (x).rend()#define pb push_back#define eb emplace_back#define fi first#define se second#define sz(x) ((int)(x).size())#define dbg(x) cerr << #x << \" = \" << (x) << '\\n' struct Fraction {    ll num, den;}; ll gcd_ll(ll a, ll b) {    while (b) { ll t = a % b; a = b; b = t; }    return abs(a);} void reduce_fraction(Fraction &f) {    if (f.den < 0) { f.num = -f.num; f.den = -f.den; }    ll g = gcd_ll(abs(f.num), f.den);    f.num /= g; f.den /= g;} Fraction make_frac(ll x) {    return {x, 1};} Fraction add_frac(const Fraction &A, const Fraction &B) {    Fraction R = {A.num * B.den + B.num * A.den, A.den * B.den};    reduce_fraction(R);    return R;} Fraction add_int(const Fraction &A, ll k) {    Fraction R = {A.num + k * A.den, A.den};    reduce_fraction(R);    return R;} Fraction mul_int(const Fraction &A, ll k) {    Fraction R = {A.num * k, A.den};    reduce_fraction(R);    return R;} Fraction div_int(const Fraction &A, ll k) {    Fraction R = {A.num, A.den * k};    reduce_fraction(R);    return R;} bool less_frac(const Fraction &A, const Fraction &B) {    return (__int128)A.num * B.den < (__int128)B.num * A.den;} Fraction min_frac(const Fraction &A, const Fraction &B) {    return less_frac(A, B) ? A : B;} int modexp(int base, int exp) {    ll res = 1, cur = base;    while (exp > 0) {        if (exp & 1) res = res * cur % MOD;        cur = cur * cur % MOD;        exp >>= 1;    }    return res;} int invm(int x) {    return modexp(x, MOD - 2);} int frac_to_mod(const Fraction &F) {    ll N = F.num % MOD; if (N < 0) N += MOD;    ll D = F.den % MOD; if (D < 0) D += MOD;    return (N * invm(D)) % MOD;} static Fraction Eodd[2001][2001], Eeven[2001][2001];static int parent[2001], depth[2001], children_count[2001], deg[2001]; void solve() {    int n, Q;    cin >> n >> Q;    vector<vi> adj(n + 1);    for (int i = 0; i < n - 1; i++) {        int u, v;        cin >> u >> v;        adj[u].pb(v);        adj[v].pb(u);    }     for (int i = 1; i <= n; i++) {        parent[i] = 0; depth[i] = 0; children_count[i] = 0; deg[i] = sz(adj[i]);    }     queue<int> q;    q.push(1);    parent[1] = -1;    vi visited(n + 1, 0);    visited[1] = 1;    while (!q.empty()) {        int u = q.front(); q.pop();        for (auto w : adj[u]) {            if (!visited[w]) {                visited[w] = 1;                parent[w] = u;                depth[w] = depth[u] + 1;                q.push(w);            }        }    }     for (int u = 2; u <= n; u++) {        children_count[parent[u]]++;    }     vi order(n);    iota(all(order), 1);    sort(all(order), [&](int a, int b) { return depth[a] < depth[b]; });     for (int p = 0; p <= n; p++) {        Eodd[1][p] = {0, 1};        Eeven[1][p] = {0, 1};    }     for (auto u : order) {        if (u == 1) continue;        int par = parent[u], ccount = children_count[u];        for (int p = 0; p <= n; p++) {            Fraction not_pay = add_int(Eodd[par][p], deg[u] + ccount);            Fraction even_val = p == 0 ? not_pay : min_frac(add_int(Eodd[par][p - 1], 1), not_pay);            Eeven[u][p] = even_val;            Eodd[u][p] = add_int(Eeven[par][p], 1);        }    }     for (int i = 0; i < Q; i++) {        int v, p;        cin >> v >> p;        cout << frac_to_mod(Eodd[v][p]) << '\\n';    }} int main() {    fast_io();    int t = 1;    cin >> t;    while (t--) solve();    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dfs and similar",
        "dp",
        "graphs",
        "greedy",
        "math",
        "probabilities",
        "trees"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Control of Randomness.json",
    "hint": [
        "Hint However, it is not hard thanks to a recent blog ."
    ]
}