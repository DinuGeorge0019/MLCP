{
    "link": "https://codeforces.com//contest/570/problem/B",
    "problemId": "33017",
    "problem_idx": "B",
    "shortId": "570B",
    "contest_number": "570",
    "problem_submissions": {
        "A": [
            12511664,
            12494868,
            12495315,
            12495052,
            12498729,
            12495010,
            12494706,
            12495365,
            12494962,
            12496174,
            12494954,
            12502600,
            12496200,
            12496316,
            12506558,
            12502467,
            12495107,
            12496065,
            12498893,
            12498878
        ],
        "B": [
            12509887,
            12497298,
            12497382,
            12499467,
            12505096,
            12495563,
            12498176,
            12497892,
            12496695,
            12495228,
            12498861,
            12499890,
            12502905,
            12497610,
            12503032,
            12504155,
            12497913,
            12496421
        ],
        "E": [
            12508866,
            12514963,
            12515149,
            12513258,
            12512484,
            12512570,
            12514497,
            12512953,
            12509761,
            12511947,
            12514813
        ],
        "D": [
            12503406,
            12507923,
            12507699,
            12507537,
            12509874,
            12513189,
            12507259,
            12527819,
            12514569,
            12511515,
            12568414,
            12512833
        ],
        "C": [
            12498193,
            12507310,
            12502209,
            12498057,
            12501547,
            12500587,
            12501845,
            12503728,
            12502079,
            12505954,
            12509333,
            12499956,
            12503373,
            12503640,
            12501153,
            12511401,
            12502671,
            12506512,
            12510295,
            12502880
        ]
    },
    "name": "B. Simple Game",
    "statement": "One day Misha and Andrew were playing a very simple game. First, each\r\nplayer chooses an integer in the range from to . Letâ€™s assume that Misha\r\nchose number , and Andrew chose number .Then, by using a random\r\ngenerator they choose a random integer in the range between and (any\r\ninteger from to is chosen with the same probability), after which the\r\nwinner is the player, whose number was closer to . The boys agreed that\r\nif and are located on the same distance from , Misha wins.Andrew wants\r\nto win very much, so he asks you to help him. You know the number\r\nselected by Misha, and number . You need to determine which value of\r\nAndrew must choose, so that the probability of his victory is the\r\nhighest possible.More formally, you need to find such integer (), that\r\nthe probability that is maximal, where is the equiprobably chosen\r\ninteger from to (inclusive).\r\n",
    "solutions": [
        "#include <cstdio>\n\nint main() {\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    int ans;\n    if (n==1) {\n        ans=1;\n    } else if (m==1) {\n        ans=2;\n    } else if (m==n) {\n        ans=n-1;\n    } else if (m-1>=n-m) {\n        ans=m-1;\n    } else {\n        ans=m+1;\n    }\n    printf(\"%d\\n\",ans);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "games",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Simple Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/19770",
    "editorial": "Lets find which variant is interesting. For Andrew is no need a variant\r\nwherein because we can increase probability of victory if we will be\r\ncloser to m. Then we consider two variants, and . Probability of victory\r\nwill be for first variant and for second. We need to choose better\r\nvariant, also we must keep in mind case of . Solutions\r\n",
    "hint": []
}