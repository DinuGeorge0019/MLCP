{
    "link": "https://codeforces.com//contest/862/problem/B",
    "problemId": "123157",
    "problem_idx": "B",
    "shortId": "862B",
    "contest_number": "862",
    "problem_submissions": {
        "F": [
            30522146
        ],
        "E": [
            30515524,
            30514981,
            30514016,
            30514863,
            30521757,
            30513966,
            30514334,
            30520725,
            30516565,
            30519106,
            30520786,
            30520302,
            30519855,
            30521281,
            30521147,
            30521254,
            30521944,
            30521635,
            30520751
        ],
        "C": [
            30514106,
            30508600,
            30509568,
            30508140,
            30506918,
            30515950,
            30507825,
            30509973,
            30520060,
            30513375,
            30510462,
            30514508,
            30513811,
            30512130,
            30512019,
            30511796,
            30511858,
            30510871,
            30512321
        ],
        "D": [
            30510386,
            30511427,
            30518392,
            30512215,
            30515491,
            30512095,
            30520485,
            30514131,
            30513495,
            30515366,
            30516105,
            30512969,
            30517047,
            30515613,
            30516506,
            30516739,
            30517091,
            30515520
        ],
        "B": [
            30503649,
            30504269,
            30503848,
            30503359,
            30502486,
            30503263,
            30503865,
            30504630,
            30505338,
            30505127,
            30506532,
            30504918,
            30504595,
            30505318,
            30506615,
            30505351,
            30507736,
            30506138,
            30506809
        ],
        "A": [
            30502233,
            30502672,
            30502339,
            30502484,
            30502166,
            30502202,
            30502311,
            30502278,
            30502286,
            30502588,
            30504719,
            30504828,
            30502367,
            30502429,
            30504564,
            30502776,
            30503501,
            30505382
        ]
    },
    "name": "B. Mahmoud and Ehab and the bipartiteness",
    "statement": "Mahmoud and Ehab continue their adventures! As everybody in the evil\r\nland knows, Dr. Evil likes bipartite graphs, especially trees.A tree is\r\na connected acyclic graph. A bipartite graph is a graph, whose vertices\r\ncan be partitioned into sets in such a way, that for each edge that\r\nbelongs to the graph, and belong to different sets. You can find more\r\nformal definitions of a tree and a bipartite graph in the notes section\r\nbelow.Dr. Evil gave Mahmoud and Ehab a tree consisting of nodes and\r\nasked them to add edges to it in such a way, that the graph is still\r\nbipartite. Besides, after adding these edges the graph should be simple\r\n(doesn’t contain loops or multiple edges). What is the maximum number of\r\nedges they can add?A loop is an edge, which connects a node with itself.\r\nGraph doesn’t contain multiple edges when for each pair of nodes there\r\nis no more than one edge between them. .\r\n",
    "solutions": [
        "#include <cstdio>\n#include <vector>\nint head[100001], next[199999], to[199999], N, E, fa[100001], dep[100001], D;\nint main()\n{\n\tscanf(\"%d\", &N);\n\tfor (int i = 1, u, v; i < N; i++)\n\t{\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tnext[++E] = head[u], to[E] = v, head[u] = E;\n\t\tnext[++E] = head[v], to[E] = u, head[v] = E;\n\t}\n\tstatic int q[100001];\n\tint H = 0, T = 1, u;\n\tq[1] = 1;\n\twhile (H < T)\n\t\tfor (int e = head[u = q[++H]]; e; e = next[e])\n\t\t\tif (to[e] != fa[u])\n\t\t\t{\n\t\t\t\tfa[q[++T] = to[e]] = u;\n\t\t\t\tdep[to[e]] = dep[u] ^ 1;\n\t\t\t}\n\tfor (int i = 1; i <= N; i++)\n\t\tD += dep[i];\n\tprintf(\"%lld\\n\", (long long)D * (N - D) - N + 1);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs",
        "trees"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Mahmoud and Ehab and the bipartiteness.json",
    "editorial_link": "https://codeforces.com//blog/entry/54590",
    "editorial": "The tree itself is bipartite so we can run a dfs to partition the tree\r\ninto the 2 sets (called bicoloring), We canât add an edge between any 2\r\nnodes in the same set and we can add an edge between every 2 nodes in\r\ndifferent sets, so let the number of nodes in the left set be and the\r\nnumber of nodes in the right set be , The maximum number of edges that\r\ncan exist is , but edges already exist so the maximum number of edges to\r\nbe added is . Time complexity : . Solution link (me) :\r\nhttps://pastebin.com/w3bF7gKS . Solution link (mahmoudbadawy) :\r\nhttps://pastebin.com/PMpte7nC .\r\n",
    "hint": []
}