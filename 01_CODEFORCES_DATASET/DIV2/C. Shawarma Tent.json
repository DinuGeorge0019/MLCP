{
    "link": "https://codeforces.com//contest/1271/problem/C",
    "problemId": "495883",
    "problem_idx": "C",
    "shortId": "1271C",
    "contest_number": "1271",
    "problem_submissions": {
        "F": [
            66961825,
            67036286,
            66974278,
            66959941,
            67028258
        ],
        "D": [
            66955004,
            66954300,
            66950258,
            66955211,
            66955727,
            66954986,
            66956735,
            66957222,
            66956606,
            66952705,
            66951493,
            66952458,
            66958655,
            66958760,
            66959470,
            66951305,
            66951037,
            66961080,
            66953125
        ],
        "E": [
            66949374,
            66950284,
            66955194,
            66945323,
            66950426,
            66952357,
            66949869,
            66952893,
            66953188,
            66956256,
            66958878,
            66957745,
            66946179,
            66952300,
            66952751,
            66953634,
            66960610,
            66957983,
            66952356,
            66960241
        ],
        "C": [
            66945489,
            66944768,
            66945892,
            66949422,
            66948266,
            66947645,
            66944925,
            66945427,
            66944821,
            66946803,
            66944977,
            66945954,
            66962107,
            66945691,
            66947213,
            66947154,
            66945982,
            66945961,
            66946143,
            66945702
        ],
        "B": [
            66942838,
            66941728,
            66942682,
            66945965,
            66941748,
            66944405,
            66942218,
            66943112,
            66940283,
            66944697,
            66941782,
            66942898,
            66961125,
            66942570,
            66943103,
            66943908,
            66943600,
            66947332,
            66942421,
            66942779
        ],
        "A": [
            66938999,
            66939105,
            66938928,
            66942646,
            66939987,
            66939135,
            66939726,
            66939564,
            66938824,
            66939325,
            66939118,
            66940343,
            66960484,
            66938913,
            66939541,
            66940419,
            66940083,
            66938911,
            66938937,
            66942932
        ]
    },
    "name": "C. Shawarma Tent",
    "statement": "The map of the capital of Berland can be viewed on the infinite\r\ncoordinate plane. Each point with integer coordinates contains a\r\nbuilding, and there are streets connecting every building to four\r\nneighbouring buildings. All streets are parallel to the coordinate\r\naxes.The main school of the capital is located in (s_x, s_y). There are\r\nn students attending this school, the i-th of them lives in the house\r\nlocated in (x_i, y_i). It is possible that some students live in the\r\nsame house, but no student lives in (s_x, s_y).After classes end, each\r\nstudent walks from the school to his house along one of the shortest\r\npaths. So the distance the i-th student goes from the school to his\r\nhouse is |s_x - x_i| + |s_y - y_i|.The Provision Department of Berland\r\nhas decided to open a shawarma tent somewhere in the capital (at some\r\npoint with integer coordinates). It is considered that the i-th student\r\nwill buy a shawarma if at least one of the shortest paths from the\r\nschool to the i-th student\u2019s house goes through the point where the\r\nshawarma tent is located. It is forbidden to place the shawarma tent at\r\nthe point where the school is located, but the coordinates of the\r\nshawarma tent may coincide with the coordinates of the house of some\r\nstudent (or even multiple students).You want to find the maximum\r\npossible number of students buying shawarma and the optimal location for\r\nthe tent itself.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\nconst int N = 202;\n\nint n, sx, sy, x, y, cnt[4];\n\nint main() {\n\tios::sync_with_stdio(false), cin.tie(0);\n\tcin >> n >> sx >> sy;\n\twhile (n--) {\n\t\tcin >> x >> y;\n\t\tvector<int> a;\n\t\tif (x == sx)\n\t\t\tcnt[2 * (y > sy)]++;\n\t\telse if (y == sy)\n\t\t\tcnt[1 + 2 * (x < sx)]++;\n\t\telse {\n\t\t\tif (x < sx && y < sy)\n\t\t\t\tcnt[0]++, cnt[3]++;\n\t\t\telse if (x < sx && y > sy)\n\t\t\t\tcnt[3]++, cnt[2]++;\n\t\t\telse if (y < sy)\n\t\t\t\tcnt[0]++, cnt[1]++;\n\t\t\telse\n\t\t\t\tcnt[1]++, cnt[2]++;\n\t\t}\n\t}\n\tint dex = max_element(cnt, cnt + 4) - cnt;\n\tcout << cnt[dex] << '\\n';\n\tif (dex == 0)\n\t\tsy--;\n\telse if (dex == 1)\n\t\tsx++;\n\telse if (dex == 2)\n\t\tsy++;\n\telse\n\t\tsx--;\n\tcout << sx << ' ' << sy;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "geometry",
        "greedy",
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Shawarma Tent.json",
    "editorial_link": "https://codeforces.com/blog/entry/72247",
    "editorial": "Suppose that the point is the answer. If the distance between this point\r\nand the school is greater than , then there exists at least one point\r\nsuch that: the distance between and the school is exactly ; lies on the\r\nshortest path between the school and . Now we claim that the can also be\r\nthe optimal answer. That\u00e2\u0080\u0099s because, if there exists a shortest path from\r\nthe school to some point going through , the shortest path from to going\r\nthrough can be extended to become the shortest path to .So we only need\r\nto check four points adjacent to the school as possible answers. To\r\ncheck whether a point lies on the shortest path from to , we need to\r\nverify that and .\r\n"
}