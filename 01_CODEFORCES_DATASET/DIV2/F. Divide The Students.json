{"link": "https://codeforces.com//contest/1271/problem/F", "problemId": "495938", "problem_idx": "F", "shortId": "1271F", "contest_number": "1271", "problem_submissions": {"F": [66961825, 67036286, 66974278, 66959941, 67028258], "D": [66955004, 66954300, 66950258, 66955211, 66955727, 66954986, 66956735, 66957222, 66956606, 66952705, 66951493, 66952458, 66958655, 66958760, 66959470, 66951305, 66951037, 66961080, 66953125], "E": [66949374, 66950284, 66955194, 66945323, 66950426, 66952357, 66949869, 66952893, 66953188, 66956256, 66958878, 66957745, 66946179, 66952300, 66952751, 66953634, 66960610, 66957983, 66952356, 66960241], "C": [66945489, 66944768, 66945892, 66949422, 66948266, 66947645, 66944925, 66945427, 66944821, 66946803, 66944977, 66945954, 66962107, 66945691, 66947213, 66947154, 66945982, 66945961, 66946143, 66945702], "B": [66942838, 66941728, 66942682, 66945965, 66941748, 66944405, 66942218, 66943112, 66940283, 66944697, 66941782, 66942898, 66961125, 66942570, 66943103, 66943908, 66943600, 66947332, 66942421, 66942779], "A": [66938999, 66939105, 66938928, 66942646, 66939987, 66939135, 66939726, 66939564, 66938824, 66939325, 66939118, 66940343, 66960484, 66938913, 66939541, 66940419, 66940083, 66938911, 66938937, 66942932]}, "name": "F. Divide The Students", "statement": "Recently a lot of students were enrolled in Berland State University.\r\nAll students were divided into groups according to their education\r\nprogram. Some groups turned out to be too large to attend lessons in the\r\nsame auditorium, so these groups should be divided into two subgroups.\r\nYour task is to help divide the first-year students of the computer\r\nscience faculty.There are t new groups belonging to this faculty.\r\nStudents have to attend classes on three different subjects maths,\r\nprogramming and P. E. All classes are held in different places according\r\nto the subject maths classes are held in auditoriums, programming\r\nclasses are held in computer labs, and P. E. classes are held in\r\ngyms.Each group should be divided into two subgroups so that there is\r\nenough space in every auditorium, lab or gym for all students of the\r\nsubgroup. For the first subgroup of the i-th group, maths classes are\r\nheld in an auditorium with capacity of a_{i, 1} students; programming\r\nclasses are held in a lab that accomodates up to b_{i, 1} students; and\r\nP. E. classes are held in a gym having enough place for c_{i, 1}\r\nstudents. Analogically, the auditorium, lab and gym for the second\r\nsubgroup can accept no more than a_{i, 2}, b_{i, 2} and c_{i, 2}\r\nstudents, respectively.As usual, some students skip some classes. Each\r\nstudent considers some number of subjects (from 0 to 3) to be useless\r\nthat means, he skips all classes on these subjects (and attends all\r\nother classes). This data is given to you as follows the i-th group\r\nconsists of: d_{i, 1} students which attend all classes; d_{i, 2}\r\nstudents which attend all classes, except for P. E.; d_{i, 3} students\r\nwhich attend all classes, except for programming; d_{i, 4} students\r\nwhich attend only maths classes; d_{i, 5} students which attend all\r\nclasses, except for maths; d_{i, 6} students which attend only\r\nprogramming classes; d_{i, 7} students which attend only P. E. There is\r\none more type of students those who don\u2019t attend any classes at all (but\r\nthey, obviously, don\u2019t need any place in auditoriums, labs or gyms, so\r\nthe number of those students is insignificant in this problem).Your task\r\nis to divide each group into two subgroups so that every auditorium (or\r\nlab, or gym) assigned to each subgroup has enough place for all students\r\nfrom this subgroup attending the corresponding classes (if it is\r\npossible). Each student of the i-th group should belong to exactly one\r\nsubgroup of the i-th group; it is forbidden to move students between\r\ngroups.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\n\nconst int M = 2, N = 8;\n\nint t, a[M], b[M], c[M], A[M], B[M], C[M], d[N], D[N], ans[N];\n\nvoid input() {\n\tmemset(ans, 0, sizeof ans);\n\tcin >> a[0] >> b[0] >> c[0];\n\tcin >> a[1] >> b[1] >> c[1];\n\tfor (int i = 7; i; i--)\n\t\tcin >> d[i];\n}\n\nvoid solve() {\n\tfor (int i = 0; i <= d[5]; i++)\n\t\tfor (int j = 0; j <= d[6]; j++) {\n\t\t\tA[0] = a[0] - i - j;\n\t\t\tA[1] = a[1] - (d[5] - i) - (d[6] - j);\n\n\t\t\tB[0] = b[0] - j;\n\t\t\tB[1] = b[1] - (d[6] - j);\n\n\t\t\tC[0] = c[0] - i;\n\t\t\tC[1] = c[1] - (d[5] - i);\n\n\t\t\tif (min({A[0], A[1], B[0], B[1], C[0], C[1]}) < 0)\n\t\t\t\tcontinue;\n\n\t\t\tcopy(d, d + N, D);\n\t\t\tD[5] -= i;\n\t\t\tD[6] -= j;\n\t\t\tmemset(ans, 0, sizeof ans);\n\t\t\tans[5] = i;\n\t\t\tans[6] = j;\n\n\t\t\tif (A[0] < min(B[0], C[0])) {\n\t\t\t\tint x = min(D[3], min(B[0], C[0]) - A[0]);\n\t\t\t\tB[0] -= x;\n\t\t\t\tC[0] -= x;\n\t\t\t\tans[3] += x;\n\t\t\t\tD[3] -= x;\n\t\t\t}\n\t\t\tif (A[1] < min(B[1], C[1])) {\n\t\t\t\tint x = min(D[3], min(B[1], C[1]) - A[1]);\n\t\t\t\tB[1] -= x;\n\t\t\t\tC[1] -= x;\n\t\t\t\tD[3] -= x;\n\t\t\t}\n\t\t\tint x = min({A[0], B[0], C[0]}), y = min({A[1], B[1], C[1]});\n\t\t\tif (x + y < D[3] + D[7])\n\t\t\t\tcontinue;\n\n\t\t\tint z = min(D[7], x);\n\t\t\tans[7] += z;\n\t\t\tx -= z;\n\t\t\tA[0] -= z;\n\t\t\tB[0] -= z;\n\t\t\tC[0] -= z;\n\t\t\tD[7] -= z;\n\n\t\t\tz = D[7];\n\t\t\tA[1] -= z;\n\t\t\tB[1] -= z;\n\t\t\tC[1] -= z;\n\t\t\ty -= z;\n\n\t\t\tz = min(D[3], x);\n\t\t\tans[3] += z;\n\t\t\tB[0] -= z;\n\t\t\tC[0] -= z;\n\t\t\tD[3] -= z;\n\n\t\t\tz = D[3];\n\t\t\tB[1] -= z;\n\t\t\tC[1] -= z;\n\n\t\t\tcout << ans[7] << ' ' << j << ' ' << i << ' ' << min(D[4], A[0]) << ' ' << ans[3] << ' ' << min(D[2], B[0]) << ' ' << min(D[1], C[0]) << '\\n';\n\t\t\treturn;\n\t\t}\n\tcout << \"-1\\n\";\n}\n\nint Get(int x) {\n\tint cnt = 0;\n\tfor (int i = 1; i <= 7; i++)\n\t\tif (i & x)\n\t\t\tcnt += d[i];\n\treturn cnt;\n}\n\nvoid QUERY() {\n\tinput();\n\tif (Get(1) > c[0] + c[1] || Get(2) > b[0] + b[1] || Get(4) > a[0] + a[1]) {\n\t\tcout << \"-1\\n\";\n\t\treturn;\n\t}\n\tsolve();\n}\n\nint main() {\n\tios::sync_with_stdio(false), cin.tie(0);\n\tcin >> t;\n\twhile (t--)\n\t\tQUERY();\n}\n"], "input": "", "output": "", "tags": ["brute force"], "dificulty": "2700", "interactive": false}