{
    "link": "https://codeforces.com//contest/96/problem/D",
    "problemId": "505",
    "problem_idx": "D",
    "shortId": "96D",
    "contest_number": "96",
    "problem_submissions": {
        "D": [
            534437,
            533397,
            534757,
            533892,
            534722,
            533924,
            535007,
            534455,
            535371,
            535582,
            1340094,
            535409,
            536105,
            535958,
            536462,
            535699,
            536244,
            534952,
            535780
        ],
        "C": [
            533576,
            535455,
            533943,
            535724,
            534003,
            535218,
            533921,
            535345,
            534145,
            534193,
            1324061,
            534622,
            534572,
            534284,
            533457,
            534891,
            534268,
            536022,
            536585
        ],
        "B": [
            532361,
            532648,
            532721,
            532306,
            532777,
            533008,
            532873,
            532664,
            532849,
            532835,
            1323435,
            533673,
            532925,
            532981,
            532552,
            533453,
            533209,
            532979,
            533406
        ],
        "A": [
            531832,
            531866,
            532073,
            531842,
            532241,
            532281,
            531932,
            531924,
            532040,
            532100,
            1323214,
            532228,
            532023,
            532163,
            532006,
            532139,
            532108,
            532038,
            532404
        ],
        "E": [
            1340747
        ]
    },
    "name": "D. Volleyball",
    "statement": "Petya loves volleyball very much. One day he was running late for a\r\nvolleyball match. Petya hasn’t bought his own car yet, that’s why he had\r\nto take a taxi. The city has junctions, some of which are connected by\r\ntwo-way roads. The length of each road is defined by some positive\r\ninteger number of meters; the roads can have different lengths.Initially\r\neach junction has exactly one taxi standing there. The taxi driver from\r\nthe -th junction agrees to drive Petya (perhaps through several\r\nintermediate junctions) to some other junction if the travel distance is\r\nnot more than meters. Also, the cost of the ride doesn’t depend on the\r\ndistance and is equal to bourles. Taxis can’t stop in the middle of a\r\nroad. At the moment Petya is located on the junction and the volleyball\r\nstadium is on the junction . Determine the minimum amount of money Petya\r\nwill need to drive to the stadium.\r\n",
    "solutions": [
        "#include <cmath>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n\ntypedef\tlong long ll;\nstruct\tEDGE { int v, next; ll c; };\nEDGE\t\tw[20005];\nvector<int>\tque;\nll\t\tdist[1005], a[1005], b[1005];\nint\t\te[1005][1005], ww[1005];\nbool\t\tvisit[1005];\nint\t\tN, M, x, y, W = 1;\n\n\nvoid\tShortestPath(int s)\n{\n\tmemset(dist, 60, sizeof(dist)); dist[s] = 0;\n\tmemset(visit, 0, sizeof(visit)); visit[s] = 1;\n\tque.clear();\n\tque.push_back(s);\n\tfor (int fi = 0; fi < que.size(); ++ fi)\n\t{\n\t\tint\tu = que[fi];\n\t\tfor (int i = ww[u]; i; i = w[i].next)\n\t\t{\n\t\t\tint\tv = w[i].v;\n\t\t\tif (dist[v] <= dist[u] + w[i].c) continue;\n\t\t\tdist[v] = dist[u] + w[i].c;\n\t\t\tif (visit[v]) continue;\n\t\t\tvisit[v] = 1;\n\t\t\tque.push_back(v);\n\t\t}\n\t\tvisit[u] = 0;\n\t}\n\t\n\te[s][0] = 0;\n\tfor (int i = 1; i <= N; ++ i)\n\t\tif (i != s && dist[i] <= a[s]) e[s][++ e[s][0]] = i;\n}\n\n\nint\tmain()\n{\n//\tfreopen(\"D.in\", \"r\", stdin);\n//\tfreopen(\"D.out\", \"w\", stdout);\n\t\n\tcin >> N >> M;\n\tcin >> x >> y;\n\tfor (int i = 1, u, v; i <= M; ++ i)\n\t{\n\t\tll\tc;\n\t\tcin >> u >> v >> c;\n\t\tw[++ W].v = v; w[W].c = c; w[W].next = ww[u]; ww[u] = W;\n\t\tw[++ W].v = u; w[W].c = c; w[W].next = ww[v]; ww[v] = W;\n\t}\n\tfor (int i = 1; i <= N; ++ i) cin >> a[i] >> b[i];\n\tfor (int i = 1; i <= N; ++ i) ShortestPath(i);\n\t\n\tmemset(dist, 60, sizeof(dist)); dist[x] = 0;\n\tmemset(visit, 0, sizeof(visit)); visit[x] = 1;\n\tque.clear();\n\tque.push_back(x);\n\tfor (int fi = 0; fi < que.size(); ++ fi)\n\t{\n\t\tint\tu = que[fi];\n\t\tfor (int i = 1; i <= e[u][0]; ++ i)\n\t\t{\n\t\t\tint\tv = e[u][i];\n\t\t\tif (dist[v] <= dist[u] + b[u]) continue;\n\t\t\tdist[v] = dist[u] + b[u];\n\t\t\tif (visit[v]) continue;\n\t\t\tvisit[v] = 1;\n\t\t\tque.push_back(v);\n\t\t}\n\t\tvisit[u] = 0;\n\t}\n\t\n\tif (dist[y] > (1ll << 60)) dist[y] = -1;\n\tcout << dist[y] << endl;\n\t\t\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "shortest paths"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Volleyball.json",
    "editorial_link": "https://codeforces.com//blog/entry/2257",
    "editorial": "At first in this simple problem you need to find shortest path between all pair of junctions. That cant be done using O(N^3) algorithms, so you must use Dijkstra algorithm to find this in O(N*N*logN) time. Next part of this problem is to create new matrix, G[i][j] = C[i], if D[i][j] <= R[i], else G[i][j] = INF. Here D[i][j]  length of shortest path between I and j. So, result is shortest path between X and Y using matrix G. That can be done using simple Dijkstra algorithm.\n",
    "hint": []
}