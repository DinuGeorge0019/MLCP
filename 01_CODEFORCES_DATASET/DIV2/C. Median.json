{
    "link": "https://codeforces.com//contest/166/problem/C",
    "problemId": "1041",
    "problem_idx": "C",
    "shortId": "166C",
    "contest_number": "166",
    "problem_submissions": {
        "D": [
            1396659,
            1395820,
            1401592,
            1396051,
            1397210
        ],
        "B": [
            1395005,
            1394804,
            1392115,
            1394417,
            1395521,
            1396164,
            1392917,
            1395627,
            1396717,
            1394631,
            1395100,
            1394589,
            1396975,
            1397293
        ],
        "C": [
            1392257,
            1391396,
            1392030,
            1393877,
            1393945,
            1392242,
            1390459,
            1391422,
            1391954,
            1395935,
            1394755,
            1392498,
            1394730,
            1392841,
            1393241,
            1392725
        ],
        "E": [
            1390755,
            1392062,
            1391036,
            1395303,
            1394970,
            1391365,
            1391505,
            1392099,
            1390858,
            1394891,
            1391571,
            1391330,
            1391965,
            1393022,
            1397588,
            1391462,
            1390747
        ],
        "A": [
            1389902,
            1389901,
            1390096,
            1390092,
            1390420,
            1390228,
            1392273,
            1389894,
            1390237,
            1390485,
            1391136,
            1389957,
            1390738,
            1389907,
            1389972,
            1389815,
            1389969
        ]
    },
    "name": "C. Median",
    "statement": "A in an array with the length of is an element which occupies position\r\nnumber after we sort the elements in the non-decreasing order (the array\r\nelements are numbered starting with ). A median of an array is the\r\nnumber , and a median of array the number .We define an expression as\r\nthe integer part of dividing number by number .One day Vasya showed\r\nPetya an array consisting of integers and suggested finding the array\u2019s\r\nmedian. Petya didn\u2019t even look at the array and said that it equals .\r\nPetya is a very honest boy, so he decided to add several numbers to the\r\ngiven array so that the median of the resulting array would be equal to\r\n.Petya can add any integers from to to the array, including the same\r\nnumbers. Of course, he can add nothing to the array. If a number is\r\nadded multiple times, then we should consider it the number of times it\r\noccurs. It is not allowed to delete of change initial numbers of the\r\narray. While Petya is busy distracting Vasya, your task is to find the\r\nminimum number of elements he will need.\r\n",
    "solutions": [
        "#pragma comment(linker, \"/stack:64000000\")\n#include <algorithm>\n#include <iostream>\n#include <cassert>\n#include <climits>\n#include <utility>\n#include <cstdlib>\n#include <cstdio>\n#include <cstring>\n#include <memory.h>\n#include <vector>\n#include <bitset>\n#include <string>\n#include <deque>\n#include <queue>\n#include <ctime>\n#include <set>\n#include <map>\n#include <deque>\n#include <stack>\n#include <cmath>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)\n#define for1(i, n) for (int i = 1; i <= int(n); i++)\n#define fore(i, l, r) for (int i = int(l); i < int(r); i++)\n#define all(a) (a).begin(), (a).end()\n#define sz(a) int((a).size())\n#define pb push_back\n#define pii pair <int, int>\n#define vi vector <int>\n#define mp make_pair\n\ntemplate <typename X> inline X abs (const X &a) {return a < 0? -a: a;}\ntemplate <typename X> inline X sqr (const X &a) {return a * a;}\n\nconst int INF = INT_MAX / 2;\nconst ll INF64 = LLONG_MAX / 2LL;\nconst ld EPS = 1E-9, PI = 3.1415926535897932384626433832795;\n\nconst int N = 500 + 13;\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.txt\", \"rt\", stdin);\n    freopen(\"output.txt\", \"wt\", stdout);\n#endif\n\n    int n, x;\n    int a[N];\n    \n    cin >> n >> x;\n    forn (i, n)\n        cin >> a[i];\n\n    sort (a, a + n);\n\n    int val = a[(n - 1) / 2];\n\n    if (val == x)\n    {\n        cout << 0 << endl;\n        return 0;\n    }\n\n    int ans = 0;\n\n    if (x < val)\n    {\n        int pos = int (upper_bound (a, a + n, x) - a) - 1;\n\n        while (true)\n        {\n            if (pos == (n - 1) / 2)\n                break;\n\n            pos++;\n            ans++;\n            n++;\n        }\n    }\n    else\n    {\n        int pos = int (lower_bound (a, a + n, x) - a);\n\n        while (true)\n        {\n            if (pos == (n - 1) / 2)\n                break;\n\n            ans++;\n            n++;\n        }\n    }\n\n    cout << ans << endl;\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Median.json",
    "editorial_link": "https://codeforces.com//blog/entry/4173",
    "editorial": "If the initial array doesn\u00e2\u0080\u0099t contain number , than you definitely need\r\nto add it (that\u00e2\u0080\u0099s +1 to answer). Than do the following. While median is\r\nstrictly less than you need to increase it. Obviously the surest way to\r\nincrease the median is to add a maximal possible number (). Similarly\r\nwhile the median is strictly more than , add a number to the array.\r\nConstraints are small, so you can add the numbers one by one and\r\nrecalculate the median after every addition. Also there is a solution\r\nwithout any cases: while the median isn\u00e2\u0080\u0099t equal to , just add one more\r\nnumber to array.\r\n"
}