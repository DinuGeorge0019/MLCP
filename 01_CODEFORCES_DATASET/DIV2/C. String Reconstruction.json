{
    "link": "https://codeforces.com//contest/828/problem/C",
    "problemId": "113853",
    "problem_idx": "C",
    "shortId": "828C",
    "contest_number": "828",
    "problem_submissions": {
        "A": [
            28460309,
            28447412,
            28433654,
            28431619,
            28432255,
            28431175,
            28432122,
            28431834,
            28432270,
            28431560,
            28438332,
            28431659,
            28431601,
            28431041,
            28431462,
            28431315,
            28448076,
            28431218,
            28431027
        ],
        "F": [
            28448238,
            28470827,
            28472010,
            30446292,
            32054149
        ],
        "E": [
            28442480,
            28440989,
            28445030,
            28444433,
            28441533,
            28446059,
            28447307,
            28490530,
            28447795,
            28447314,
            28449259,
            28447763,
            28449409,
            28448527,
            28448262
        ],
        "D": [
            28439191,
            28443487,
            28440542,
            28439312,
            28444576,
            28440699,
            28440733,
            28440504,
            28444280,
            28446082,
            28441981,
            28439597,
            28441709,
            28443017,
            28442903,
            28439094,
            28443722,
            28448787,
            28443893
        ],
        "C": [
            28435698,
            28435500,
            28439027,
            28435829,
            28437161,
            28436717,
            28438157,
            28436695,
            28443065,
            28454126,
            28453810,
            28440499,
            28438924,
            28437102,
            28438928,
            28438895,
            28436411,
            28440043,
            28437230,
            28439797,
            28439825,
            28439032
        ],
        "B": [
            28433895,
            28433617,
            28434962,
            28433706,
            28433707,
            28434566,
            28434207,
            28434454,
            28435513,
            28435599,
            28434805,
            28433677,
            28435479,
            28434438,
            28432799,
            28434943,
            28434343,
            28435242,
            28433224,
            28433253
        ]
    },
    "name": "C. String Reconstruction",
    "statement": "Ivan had string consisting of small English letters. However, his friend\r\nJulia decided to make fun of him and hid the string . Ivan preferred\r\nmaking a new string to finding the old one. Ivan knows some information\r\nabout the string . Namely, he remembers, that string occurs in string at\r\nleast times or more, he also remembers exactly positions where the\r\nstring occurs in string : these positions are . He remembers such\r\nstrings .You are to reconstruct string such that it fits all the\r\ninformation Ivan remembers. Strings and string consist of small English\r\nletters only.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nint n,f[3000007],k,mx=0;\nchar s[3000007],s1[3000007];\nint gf(int x){\n\twhile(x!=f[x])x=f[x]=x[f][f];\n\treturn x;\n}\nint main(){\n\tfor(int i=1;i<=3000000;++i)f[i]=i;\n\tfor(scanf(\"%d\",&n);n;--n){\n\t\tscanf(\"%s%d\",s1,&k);\n\t\tint len=strlen(s1);\n\t\tfor(int x;k;--k){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tfor(int i=gf(x);i<x+len;i=f[i]=gf(i+1)){\n\t\t\t\ts[i]=s1[i-x];\n\t\t\t\tif(i>mx)mx=i;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=mx;++i)putchar(s[i]?s[i]:'a');puts(\"\");\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "sortings",
        "strings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. String Reconstruction.json",
    "editorial_link": "https://codeforces.com//blog/entry/53268",
    "editorial": "At first let's sort all given string by their positions and also determine the length of the answer string.\n\nAfter that fill the answer string with letters \"a\" because the answer string must be lexicographically minimal.\n\nLet's use variable prev Â— the minimal index of letter in the answer string which did not already processed. After that we need to iterate through the sorted strings. If the next string ends before prev we skip it. In the other case, we need to impose this string to the answer string beginning from necessary position and write down all letters beginning from prev or from the beginning of impose (depending on which of these values is greater). If the imposing of string ends in position endPos we need to make prev?=?endPos?+?1 and move to the next string.",
    "hint": []
}