{
    "link": "https://codeforces.com//contest/994/problem/C",
    "problemId": "190661",
    "problem_idx": "C",
    "shortId": "994C",
    "contest_number": "994",
    "problem_submissions": {
        "F": [
            39313692,
            39315581,
            95930723,
            39333904
        ],
        "D": [
            39298471,
            39300217,
            39307900,
            39306172,
            39303222,
            39306617,
            39330421,
            39308869,
            39310792,
            39309655,
            39306797,
            39316533,
            39305772,
            39310407,
            39314015,
            39300951,
            39309805,
            39302653,
            39303950,
            39306436
        ],
        "B": [
            39294915,
            39295275,
            39295676,
            39295849,
            39296984,
            39296665,
            39296958,
            39296174,
            39296249,
            39295589,
            39295750,
            39299723,
            39296783,
            39298775,
            39295093,
            39296348,
            39296369,
            39296067,
            39296627
        ],
        "A": [
            39292025,
            39292170,
            39292210,
            39296891,
            39292448,
            39292868,
            39293213,
            39292353,
            39294071,
            39292079,
            39292190,
            39292131,
            39292850,
            39293045,
            39292213,
            39293330,
            39292422,
            39292084
        ],
        "C": [
            39312207,
            39297429,
            39302694,
            39300203,
            39302994,
            39301715,
            39301431,
            39300472,
            39302324,
            39299468,
            39310028,
            39306138,
            39303929,
            39297727,
            39301261,
            39298603,
            39300542
        ],
        "E": [
            39305109,
            39304789,
            39310854,
            39313649,
            39313461,
            39330509,
            39311502,
            39313415,
            39314951,
            39309721,
            39313040,
            39314741,
            39315937,
            39307951
        ]
    },
    "name": "C. Two Squares",
    "statement": "You are given two squares, one with sides parallel to the coordinate\r\naxes, and another one with sides at 45 degrees to the coordinate axes.\r\nFind whether the two squares intersect.The interior of the square is\r\nconsidered to be part of the square, i.e. if one square is completely\r\ninside another, they intersect. If the two squares only share one common\r\npoint, they are also considered to intersect.\r\n",
    "solutions": [
        "// new day,new strength,new thougts\n#include<bits/stdc++.h>\n#define MP make_pair\n#define PB push_back\n#define PF push_front\n#define POB pop_back\n#define POF pop_front\n#define F first\n#define S second\n#define sz(c) (c).size()\n#define REP(i,n)  for(int i=0;i<n;i++)\n#define REPD(i,n) for(int i=n-1;i>=0;i--)\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define FORD(i,a,b) for(int i=a;i>=b;i--)\n#define all(s) (s).begin(),(s).end()\n#define bit(num,i) ((num>>i)&1)\n\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<ll,ll> pll;\n\nconst ll inf=4e18;\nconst ll maxn=2e5+10;\nconst ll mod=1e9+7;\n\n#pragma GCC Optimize(\"Ofast\")\n\npll a[4],b[4];\n\ninline ll t(ll x){\n\treturn x*x;\n}\ninline ll ds2(pll x,pll y){\n\treturn t(x.F-y.F)+t(x.S-y.S);\n}\ninline ll S2(pll x,pll y,pll z){\n\treturn abs((x.F*y.S)+(y.F*z.S)+(z.F*x.S)-(x.F*z.S)-(z.F*y.S)-(y.F*x.S));\n}\n\nbool inside1(pll p){\n\tll num1=0,num2=0;\n\tREP(i,4)\n\t\tnum1+=S2(a[i],a[(i+1)%4],p);\n\tnum2=(2*ds2(a[0],a[1]));\n\treturn (num1==num2);\n}\n\nbool inside2(pll p){\n\tll num1=0,num2=0;\n\tREP(i,4)\n\t\tnum1+=S2(b[i],b[(i+1)%4],p);\n\tnum2=(2*ds2(b[0],b[1]));\n\treturn (num1==num2);\n}\n\nint main(){\n\tREP(i,4)\n\t\tcin>>a[i].F>>a[i].S;\n\tREP(i,4)\n\t\tcin>>b[i].F>>b[i].S;\n\tREP(i,4){\n\t\tif(inside1(b[i])){\n\t\t\tcout<<\"YES\";\n\t\t\treturn 0;\n\t\t}\n\t}\n\tREP(i,4){\n\t\tif(inside2(a[i])){\n\t\t\tcout<<\"YES\";\n\t\t\treturn 0;\n\t\t}\n\t}\n\tpll p=MP(b[0].F+b[2].F,b[0].S+b[2].S);\n\tREP(i,4)\n\t\ta[i]=MP(2*a[i].F,2*a[i].S);\n\tif(inside1(p)){\n\t\tcout<<\"YES\";\n\t\treturn 0;\n\t}\n\tcout<<\"NO\";\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Two Squares.json",
    "editorial_link": "https://codeforces.com//blog/entry/60047",
    "editorial": "It can be shown that if two squares intersect, then at least for one of\r\nthe squares it is true that either one of its corners lies within the\r\nother square, or its center lies within the other square.It is very easy\r\nto check if any corner or the center of the square rotated by 45 degrees\r\nlies within the square with sides parallel to the axes.To check in the\r\nopposite directions in a similarly simple fashion, it is enough to\r\nrotate both squares by 45 degrees. To turn both squares by 45 degrees\r\n(with some scaling, which is OK) it is sufficient to replace each\r\ncoordinate with and each coordinate with .\r\n"
}