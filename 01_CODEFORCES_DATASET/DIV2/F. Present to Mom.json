{
    "link": "https://codeforces.com//contest/131/problem/F",
    "problemId": "697",
    "problem_idx": "F",
    "shortId": "131F",
    "contest_number": "131",
    "problem_submissions": {
        "F": [
            904424,
            898451,
            898852,
            898665,
            899656,
            42410750,
            900665,
            900877,
            900384,
            899648,
            900915,
            901359,
            897034,
            901848,
            900975,
            901375,
            897608,
            902336,
            895558,
            901701
        ],
        "E": [
            904422,
            896838,
            895727,
            896630,
            897281,
            42410343,
            898660,
            899049,
            899074,
            898552,
            899102,
            899404,
            899253,
            899170,
            899607,
            899696,
            899911,
            897321,
            900186,
            897365
        ],
        "D": [
            904420,
            894775,
            894348,
            894881,
            894791,
            896588,
            897021,
            897370,
            896846,
            897407,
            896897,
            908176,
            904628,
            901525,
            897622,
            897737,
            898418,
            894267,
            898476,
            898021,
            898664,
            894931
        ],
        "C": [
            904417,
            892960,
            891836,
            893412,
            892695,
            893493,
            894746,
            897077,
            895187,
            893806,
            894995,
            895988,
            896203,
            894856,
            902951,
            896937,
            892903
        ],
        "B": [
            904413,
            892343,
            898130,
            892434,
            891977,
            893039,
            892628,
            893632,
            891827,
            892784,
            894062,
            892290,
            894254,
            895376,
            891900,
            893592,
            894329,
            896307,
            891485
        ],
        "A": [
            904410,
            891551,
            891494,
            891758,
            891408,
            891725,
            892258,
            891411,
            891856,
            891608,
            892187,
            891595,
            893365,
            893186,
            891415,
            891922,
            891657,
            895179,
            892042
        ]
    },
    "name": "F. Present to Mom",
    "statement": "How many stars are there in the sky? A young programmer Polycarpus can’t\r\nget this question out of his head! He took a photo of the starry sky\r\nusing his digital camera and now he analyzes the resulting monochrome\r\ndigital picture. The picture is represented by a rectangular matrix\r\nconsisting of lines each containing characters. A character equals ”, if\r\nthe corresponding photo pixel is white and ”, if it is black.Polycarpus\r\nthinks that he has found a star on the photo if he finds a white pixel\r\nsurrounded by four side-neighboring pixels that are also white: 1 111 1\r\nPolycarpus whats to cut out a rectangular area from the photo and give\r\nhis mom as a present. This area should contain no less than stars. The\r\nstars can intersect, have shared white pixels on the photo. The boy will\r\ncut out the rectangular area so that its borders will be parallel to the\r\nsides of the photo and the cuts will go straight between the pixel\r\nborders.Now Polycarpus keeps wondering how many ways there are to cut an\r\narea out of the photo so that it met the conditions given above. Help\r\nPolycarpus find this number.\r\n",
    "solutions": [
        "#include <cstdio>\ntypedef long long ll;\nconst int c[5][2]={{-1,0},{1,0},{0,-1},{0,1},{0,0}};\nchar buf[510][510];\nint a[510][510],s[510][510];\ninline int calc(int x,int y)\n{\n    for (int i=0;i<5;i++)\n        if (buf[x+c[i][0]][y+c[i][1]]!='1')\n            return(0);\n    return(1);\n}\ninline int get(int x1,int y1,int x2,int y2)\n{\n    return(s[x2][y2]-s[x1-1][y2]-s[x2][y1-1]+s[x1-1][y1-1]);\n}\nint main()\n{\n    int n,m,K;\n    scanf(\"%d%d%d\",&n,&m,&K);\n    for (int i=1;i<=n;i++)\n        scanf(\"%s\",buf[i]+1);\n    for (int i=1;i<=n;i++)\n        for (int j=1;j<=m;j++)\n        {\n            a[i][j]=calc(i,j);\n            s[i][j]=s[i-1][j]+s[i][j-1]-s[i-1][j-1]+a[i][j];\n        }\n    ll ans=0;\n    for (int i=1;i<=n;i++)\n        for (int j=i+2;j<=n;j++)\n        {\n            if (get(i+1,2,j-1,m-1)<K)\n                continue;\n            int l=1;\n            for (int k=3;k<=m;k++)\n            {\n                while (l<=k && get(i+1,l+2,j-1,k-1)>=K)\n                    l++;\n                if (get(i+1,l+1,j-1,k-1)>=K)\n                    ans+=l;\n            }\n        }\n    printf(\"%I64d\\n\",ans);\n    return(0);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "two pointers"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Present to Mom.json",
    "editorial_link": "https://codeforces.com//blog/entry/3256",
    "editorial": "The main idea is to, for each pair of lines i1 and i2, count the ways you can form the rectangle using a sweep line-like algorithm. The idea is similar to the somewhat classic idea used for the problem that is, given an array of numbers, count how many contiguous sub arrays exists witch sum is equal or greater to some given k.\n\nLet's first of all identify all the points where a star can be found, in its \"starting\" position and \"finish\" position. These are the S and F position shown below.\n\n  1\nS1F\n  1\n\nFor each pair of lines i1 and i2 (i2 > i1) we will keep two indices (or pointers) j1 and j2 for the columns, with j2 > j1. During the algorithm, we will always analyze the rectangle formed by lines i1,i2 and columns j1,j2. Let's start with j1 = 0 and j2 = 2 (there won't be any star in the rectangle  i1,i2,0,(0 or 1) simply because a star won't fit in it). Let's then count the number of stars found in this rectangle. It will be equal to countfinish(i1+1,i2-1,j2), where countfinish(I1,I2,J) is the number of \"finish\"\npositions in the column J between the lines I1 and I2. If this number is equal or greater than k, this rectangle and all the rectangles (i1,i2,j1,j) for j >= j2 will be valid, so you need to sum m-j2 to the answer. Then, increment j1 and recalculate the numbers of stars in the rectangle. It will be equal to the previous number minus countstart(i1+1,i2-1,j1-1), (the definition of countstart() is analogous) since it's the number of starts that are \"lost\" when we move from j1-1 to j1. Check again if the new number is greater or equal than k and repeat the process until the number is less than k. Notice that j1 will always be less than j2, since a star needs 3 columns to exists.\n\nThen, increment j2 and, without changing the value of j1, repeat the process. Notice that this part of the algorithm will take O(m)*T time (where T is the time needed to calculate countstart and countfinish), since both j2 and j1 will \"walk\" in the columns only one time.\n\nA trick can be made to make T = O(1). For each column j, precompute an array countstart[j], where countstart[j][i] = countstart[j][i-1] + (1 if (i,j) is a \"starting\" position, 0 otherwise). To compute countstart(I1,I2,J), just use the formula countstart[J][I2] - countstart[J][I1-1], that gives the value in constant time. Do the same with countfinish.\n\nPrecomputing countstart and countfinish takes, for each column, O(n) time, so all the precomputing can be done in O(n*m) time. Since we use an O(m)*O(1) = O(m) time for O(n2) pairs of lines, the total time used for the algorithm is O(n*m) + O(n2*m) = O(n2*m). A bit high for n=m=500, but the time limit for this problem was higher than the usual too (5 seconds instead of 2).",
    "hint": []
}