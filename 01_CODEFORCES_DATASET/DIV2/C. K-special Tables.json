{
    "link": "https://codeforces.com//contest/625/problem/C",
    "problemId": "47620",
    "problem_idx": "C",
    "shortId": "625C",
    "contest_number": "625",
    "problem_submissions": {
        "A": [
            15862532,
            15857947,
            15876571,
            15855439,
            15854968,
            15864094,
            15858424,
            15856023,
            15854593,
            15857451,
            15867390,
            15864910,
            15864145,
            15855670,
            15865351,
            15855909,
            15858985
        ],
        "C": [
            15859987,
            15860059,
            15859028,
            15858635,
            15856468,
            15855858,
            15864305,
            15859115,
            15858835,
            15863377,
            15856997,
            15861752,
            15860335,
            15862294,
            15863440,
            15856688,
            15859967,
            15861999
        ],
        "B": [
            15857885,
            15855922,
            15856205,
            15856539,
            15855506,
            15859381,
            15862061,
            15857417,
            15856976,
            15860050,
            15856065,
            15859652,
            15858256,
            15862446,
            15861157,
            15858168,
            15860072
        ],
        "D": [
            15870519,
            15868010,
            15870886,
            15874880,
            15984533
        ],
        "E": [
            15983411
        ]
    },
    "name": "C. K-special Tables",
    "statement": "People do many crazy things to stand out in a crowd. Some of them dance,\r\nsome learn by heart rules of Russian language, some try to become an\r\noutstanding competitive programmers, while others collect funny math\r\nobjects.Alis is among these collectors. Right now she wants to get one\r\nof -special tables. In case you forget, the table is called -special if\r\nthe following three conditions are satisfied: every integer from to\r\nappears in the table exactly once; in each row numbers are situated in\r\nincreasing order; the sum of numbers in the -th column is maximum\r\npossible. Your goal is to help Alice and find at least one -special\r\ntable of size . Both rows and columns are numbered from to , with rows\r\nnumbered from top to bottom and columns numbered from left to right.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int mod = 1000000007;\nconst int inf = 1001001001;\n\nint n,k,a[1111][1111],q,ans;\n\nint main()\n{\n    //freopen(\"input.txt\", \"r\", stdin);\n    //freopen(\"output.txt\", \"w\", stdout);\n    ios_base::sync_with_stdio(0);\n\n    cin >> n >> k;\n    for (int i=1; i<=n; i++){\n        for (int j=1; j<k; j++){\n            q++;\n            a[i][j]=q;\n        }\n    }\n    for (int i=1; i<=n; i++){\n        for (int j=k; j<=n; j++){\n            q++;\n            if (j==k) ans+=q;\n            a[i][j]=q;\n        }\n    }\n    cout << ans << endl;\n    for (int i=1; i<=n; i++){\n        for (int j=1; j<=n; j++){\n            cout << a[i][j] << ' ';\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. K-special Tables.json",
    "editorial_link": "https://codeforces.com//blog/entry/23342",
    "editorial": "Lets fill our table\nrow by row greedily. We want to have maximal possible number on k-th\nplace in the first row. After it we need at least numbers greater than\nours, so its maximum value is . If we select it then we are fixing all\nnumbers after column in the first row from to . On the first lets put\nsmallest possible numbers . If we do the same thing in the second row\nthen in the beginning it will have numbers from to , and from -th\nposition maximum possible values from to . And so on we will fill all\nrows. With careful implementation we don\u00e2\u0080\u0099t need to store whole matrix\nand we need only memory. Our algorithm works in time.\n"
}