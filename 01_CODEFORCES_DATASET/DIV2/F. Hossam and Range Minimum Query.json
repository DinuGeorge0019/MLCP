{"link": "https://codeforces.com//contest/1771/problem/F", "problemId": "1688882", "problem_idx": "F", "shortId": "1771F", "contest_number": "1771", "problem_submissions": {"E": [184786252, 184768319, 184791269, 184791695, 184799239, 184789827, 184804872, 184797015, 184779796, 184780579, 184774488, 184784737, 184789324, 184905669], "F": [184767458, 184789428, 184776697, 184780762, 184768498, 184799203, 184750590, 184788854, 184819486, 184733731, 184782224, 184765553, 184837754, 184787637, 184786087, 184781451, 186375922, 184885288, 184793012], "D": [184754420, 184746285, 184751879, 184767199, 184796187, 184770689, 184788363, 184741723, 184762124, 184781810, 184734475, 184771306, 184784877, 184767214, 184757752, 184754682, 184762986, 184732202, 184885253, 184786038], "C": [184742304, 184730753, 184731670, 184750562, 184746404, 184744176, 184732056, 186784755, 186783506, 185248092, 184831291, 184725362, 184737633, 184749397, 184807012, 184806808, 184806589, 184806495, 184750795, 184733621, 184739758, 184731026, 184753323, 184736577, 184746147, 184753799, 184885221, 184836201, 184744786, 184740528], "B": [184723301, 184725456, 184722508, 184735259, 184724915, 184727876, 184722523, 184720717, 184727802, 184728402, 184761586, 184727553, 184722898, 184733183, 184726202, 184743742, 184729968, 184744730, 184885179, 184732333], "A": [184718639, 184717667, 184718126, 184729979, 184719322, 184720803, 184717674, 184717800, 184721090, 184719864, 184753140, 184718839, 184717731, 184725439, 184718841, 184718297, 184718595, 184738977, 184885137, 184718315]}, "name": "F. Hossam and Range Minimum Query", "statement": "Hossam gives you a sequence of integers a_1,\r\n, a_2,\r\n,\r\ndots,\r\n, a_n of length n. Moreover, he will give you q queries of type (l,\r\n, r). For each query, consider the elements a_l,\r\n, a_{l + 1},\r\n,\r\ndots,\r\n, a_r. Hossam wants to know the number in this sequence, such that it\r\noccurs in this sequence an number of times.You need to compute the\r\nanswer for each query before process the next query.\r\n", "solutions": ["#include <bits/stdc++.h>\n\n#define ll long long\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define sz(x) (int)(x).size()\nusing namespace std;\n\n// \u0432\u043f\u0440\u0430\u0432\u043e, \u0432\u043d\u0438\u0437, \u0432\u043b\u0435\u0432\u043e, \u0432\u0432\u0435\u0440\u0445\nint dx[] = {0, 1, 0, -1};\nint dy[] = {1, 0, -1, 0};\n\n// \u0445\u043e\u0434 \u043a\u043e\u043d\u0435\u043c\n//int dx[] = {-2, -1, 1, 2, 2, 1, -1, -2};\n//int dy[] = {1, 2, 2, 1, -1, -2, -2, -1};\n\nmt19937 rnd(chrono::system_clock::now().time_since_epoch().count());\nmt19937_64 rnd64(chrono::system_clock::now().time_since_epoch().count());\nll rndInteger (ll l, ll r) {\n    return uniform_int_distribution<ll> (l, r)(rnd64);\n}\n\nconst int MOD = (int) 998244353;\nconst int N = (int) 2e5 + 7;\nint n;\nint root[N];\nll t[N * 40];\nint L[N * 40];\nint R[N * 40];\nint ptr;\nvector<int> vals;\nll msk[N];\n\nint a[N];\n\nvoid upd(int &v, int _v, int p, int tl, int tr) {\n    v = ++ptr;\n\n    t[v] = t[_v];\n    L[v] = L[_v];\n    R[v] = R[_v];\n    t[v] ^= msk[p];\n\n    if(tl == tr) {\n        return;\n    }\n\n    int tm = (tl+tr) >> 1;\n    if(p <= tm) {\n        upd(L[v], L[_v], p, tl, tm);\n    } else {\n        upd(R[v], R[_v], p, tm+1, tr);\n    }\n}\n\nint query(int a, int b, int tl, int tr) {\n//    cout << \"here: \" << a << ' ' << b << ' ' << tl << ' ' << tr << endl;\n    if(tl == tr) {\n        if(t[a] == t[b])\n            return 0;\n        return vals[tl];\n    }\n//    cout << \"myleft: \" << t[L[a]] << ' ' << t[L[b]] << endl;\n    int tm = (tl+tr)>>1;\n    if(t[L[a]] != t[L[b]]) {\n        return query(L[a], L[b], tl, tm);\n    }\n//    cout << \"myright: \" << t[R[a]] << ' ' << t[R[b]] << endl;\n    return query(R[a], R[b], tm+1, tr);\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n    cin >> n;\n    for (int i = 1; i <= n; ++i) {\n        cin >> a[i];\n        vals.push_back(a[i]);\n        msk[i-1] = rndInteger(1, 2e18);\n    }\n    sort(vals.begin(), vals.end());\n    vals.resize(unique(vals.begin(), vals.end()) - vals.begin());\n\n    for (int i = 1; i <= n; ++i) {\n        a[i] = lower_bound(vals.begin(), vals.end(), a[i]) - vals.begin();\n\n        upd(root[i], root[i-1], a[i], 0, sz(vals) - 1);\n    }\n\n    int ans = 0;\n    int q;\n    cin >> q;\n    for(; q; --q) {\n        int l, r;\n        cin >> l >> r;\n        l ^= ans;\n        r ^= ans;\n        if(l > r) swap(l, r);\n\n        ans = query(root[r], root[l-1], 0, sz(vals) - 1);\n        cout << ans << '\\n';\n    }\n\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "bitmasks", "data structures", "hashing", "probabilities", "strings", "trees"], "dificulty": "2500", "interactive": false}