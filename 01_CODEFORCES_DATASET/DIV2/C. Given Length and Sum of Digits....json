{
    "link": "https://codeforces.com//contest/489/problem/C",
    "problemId": "17498",
    "problem_idx": "C",
    "shortId": "489C",
    "contest_number": "489",
    "problem_submissions": {
        "D": [
            13589038,
            8724316,
            8726296,
            8731189,
            8726766,
            8726894,
            8728465,
            8728477,
            8727759,
            8725875,
            8727494,
            8730275,
            8733738,
            8729954,
            8730137,
            8724674,
            8731839,
            8731752,
            8732051
        ],
        "C": [
            13588891,
            8721795,
            8727951,
            8723822,
            8724371,
            8723499,
            8726577,
            8723991,
            8722965,
            8723091,
            8724636,
            8726610,
            8730038,
            8726232,
            8725795,
            8724261,
            8722941,
            8722633,
            8723063
        ],
        "B": [
            13588813,
            8720541,
            8728807,
            8721401,
            8766675,
            8722756,
            8720717,
            8724885,
            8720855,
            8720680,
            8720515,
            8720936,
            8722566,
            8728071,
            8723662,
            8722124,
            8737370,
            8720146,
            8720599,
            8721787
        ],
        "A": [
            13588752,
            8742614,
            8729605,
            8720536,
            8720304,
            8719407,
            8720112,
            8719631,
            8724692,
            8719911,
            8719459,
            8720699,
            8726238,
            8722578,
            8720190,
            8721547,
            8726214,
            8726620,
            8726619
        ],
        "E": [
            8736947,
            11503343,
            8742532,
            8742434,
            8742318,
            8742303,
            8742271,
            8737226
        ],
        "F": [
            8731272,
            8723125,
            8728205,
            8732102,
            8733456,
            8733048,
            8733546,
            8733373,
            8736588,
            8734709,
            8733680,
            8724458,
            8733867,
            8734049,
            8727708,
            8736377,
            8736466,
            8736428
        ]
    },
    "name": "C. Given Length and Sum of Digits...",
    "statement": "You have a positive integer and a non-negative integer . Your task is to\r\nfind the smallest and the largest of the numbers that have length and\r\nsum of digits . The required numbers should be non-negative integers\r\nwritten in the decimal base without leading zeroes.\r\n",
    "solutions": [
        "#include<cstdio>\nusing namespace std;\nint arr[105];\nint main(){\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    if(n == 1 && m == 0)\n        puts(\"0 0\");\n    else if(m == 0 || 9 * n < m)\n        puts(\"-1 -1\");\n    else{\n        int tmp = m;\n        for(int i = 0 ; i < n ; i++){\n            if(tmp > 9) arr[i] = 9, tmp -= 9;\n            else arr[i] = tmp - 1 , tmp = 1;\n        }\n        arr[n-1]++;\n        for(int i = n-1 ; i >= 0 ; i--)\n            printf(\"%d\", arr[i]);\n        putchar(' ');\n        tmp = m;\n        int cnt = n;\n        while(cnt--){\n            if(tmp >= 9) printf(\"9\");\n            else if(tmp > 0) printf(\"%d\", tmp);\n            else putchar('0');\n            tmp -= 9;\n        }\n        puts(\"\");\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Given Length and Sum of Digits....json",
    "editorial_link": "https://codeforces.com//blog/entry/14741",
    "editorial": "There is a greedy approach to solve the problem. Just try first digit\r\nfrom lower values to higher (in subtask to minimize number) and check if\r\nit is possible to construct a tail in such a way that it satisfies rule\r\nabout length/sum. You can use a function âcan(m,s)â that answers if it\r\nis possible to construct a sequence of length with the sum of digits :\r\nUsing the function can(m,s) you can easily pick up answer\r\ndigit-by-digit. For the first part of problem (to minimize number) this\r\npart of code is: The equation (i > 0 || d > 0 || (m == 1 && d == 0)) is\r\nneeded to be careful with leading zeroes.\r\n",
    "hint": []
}