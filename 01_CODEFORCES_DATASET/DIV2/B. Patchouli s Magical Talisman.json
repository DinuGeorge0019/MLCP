{
    "link": "https://codeforces.com//contest/1688/problem/B",
    "problemId": "1419360",
    "problem_idx": "B",
    "shortId": "1688B",
    "contest_number": "1688",
    "problem_submissions": {
        "F": [
            159410825,
            159527472,
            159472113
        ],
        "C": [
            159404501,
            159365159,
            159366341,
            159373586,
            159362776,
            159370629,
            159370154,
            159369677,
            159381261,
            159374462,
            159381251,
            159381152,
            159372318,
            159366961,
            159376004,
            159380988,
            159381329,
            159386074
        ],
        "E": [
            159391189,
            159380776,
            159384621,
            159398500,
            159397765,
            159404212,
            159394358,
            159393997,
            159399468,
            159392431,
            159395743,
            159400327,
            159402238,
            159399827,
            159395270,
            159393471,
            159393150,
            159396147
        ],
        "B": [
            159388484,
            159355530,
            159354509,
            159357638,
            159355802,
            159358715,
            159358570,
            159355775,
            159357680,
            159365471,
            159355946,
            159360943,
            159358134,
            159356079,
            159356249,
            159358267,
            159364146,
            159357603
        ],
        "D": [
            159372838,
            159371621,
            159377503,
            159382209,
            159381068,
            159378580,
            159379984,
            159378382,
            159374943,
            159383837,
            159371975,
            159370185,
            159380593,
            159384944,
            159388687,
            159386205,
            159385205,
            159378922
        ],
        "A": [
            159357586,
            159352248,
            159352639,
            159352936,
            159353828,
            159354431,
            159354424,
            159352341,
            159352633,
            159353673,
            159352511,
            159354887,
            159354866,
            159352629,
            159352715,
            159358063,
            159357871,
            159353570
        ]
    },
    "name": "B. Patchouli s Magical Talisman",
    "statement": "She is skilled in all kinds of magics, and is keen on inventing new one.\r\nPatchouli is making a magical talisman. She initially has n magical\r\ntokens. Their magical power can be represented with integers a_1, a_2,\r\nldots, a_n. Patchouli may perform the following two operations on the\r\ntokens. Patchouli chooses two tokens, removes them, and creates a new\r\ntoken with magical power equal to the sum of the two chosen tokens.\r\nPatchouli chooses a token with an value of magical power x, removes it\r\nand creates a new token with magical power equal to\r\nfrac{x}{2}. Tokens are more effective when their magical powers are\r\nvalues. Please help Patchouli to find the minimum number of operations\r\nshe needs to make magical powers of all tokens values.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconstexpr int inf = 1e18;\nconstexpr int maxn = 2e5 + 5;\nconstexpr int mod = 998244353;\n\ninline void solve()\n{\n  int n; cin >> n;\n  vector<int> a(n);\n  for (int &x : a)\n    cin >> x;\n  int Min = 31, cnt = 0;\n  for (int x : a)\n  {\n    if (!(x & 1))\n    {\n      cnt ++;\n      int z = (int)__builtin_ctz(x);\n      if (z == 32)\n        z = 0;\n      Min = min(Min, z);\n    }\n  }\n  if (cnt == n)\n    cnt = Min - 1 + n;\n  cout << cnt << '\\n';\n}\n\nsigned main()\n{\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  int T; cin >> T;\n  while (T --)\n  solve();\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "greedy",
        "sortings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Patchouli s Magical Talisman.json",
    "editorial_link": "https://codeforces.com//blog/entry/103493",
    "editorial": "SolutionLet be the maximum integer satisfying .A greedy solution is to\r\nmake one integer odd integer, and plus it to other even integers. Let be\r\nthe answer of an sequence .We can find that: It can be shown that it is\r\nthe optimal strategy.We can prove that decreases by at most with one\r\noperation. For the first operation, assuming we choose and , let .\r\nObviously holds, so decreases by at most , and does not decrease. So\r\ndecreases by at most . For the second operation, assuming we choose . If\r\n, decreases by and remains unchanged. Otherwise does not change and\r\ndecreases by at most . So decreases by at most . We can draw a\r\nconclusion that decreases by at most after one operation. Since are odd\r\nintegers, the strategy is proved to be optimal.The time complexity is .\r\n",
    "hint": [
        "Hint1 What if there is at least one odd integer?",
        "Hint2 How to produce an odd integer?"
    ]
}