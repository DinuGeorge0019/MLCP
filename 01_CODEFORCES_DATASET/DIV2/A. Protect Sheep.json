{
    "link": "https://codeforces.com//contest/948/problem/A",
    "problemId": "164143",
    "problem_idx": "A",
    "shortId": "948A",
    "contest_number": "948",
    "problem_submissions": {
        "E": [
            36168620,
            36172204,
            36251405,
            36251326,
            36173384,
            36169252,
            36404487,
            36183304
        ],
        "D": [
            36163433,
            36167670,
            36167120,
            36164480,
            36164445,
            36162609,
            36165068,
            36162200,
            36164897,
            36162927,
            36164670,
            36161208,
            36169789,
            36165340,
            36163154,
            36157640,
            36165228,
            36165543,
            36161744,
            36165169
        ],
        "B": [
            36163096,
            36159675,
            36159702,
            36174211,
            36158845,
            36165864,
            36161702,
            36167381,
            36159372,
            36164193,
            36184907,
            36158822,
            36161863,
            36169531,
            36169227,
            36162688,
            36159710,
            36169741,
            36162780
        ],
        "C": [
            36159863,
            36162632,
            36162843,
            36159971,
            36160946,
            36158478,
            36159665,
            36159515,
            36161458,
            36161320,
            36162443,
            36163093,
            36159021,
            36158894,
            36174132,
            36201237,
            36164405,
            36159793,
            36161953,
            36158807,
            36162111
        ],
        "A": [
            36156394,
            36155837,
            36155755,
            36155535,
            36178220,
            36155392,
            36158997,
            36155227,
            36155148,
            36155311,
            36155229,
            36155259,
            36162558,
            36155502,
            36155114,
            36170875,
            36158967,
            36155326,
            36155358,
            36163726,
            36155813
        ]
    },
    "name": "A. Protect Sheep",
    "statement": "Bob is a farmer. He has a large pasture with many sheep. Recently, he\r\nhas lost some of them due to wolf attacks. He thus decided to place some\r\nshepherd dogs in such a way that all his sheep are protected.The pasture\r\nis a rectangle consisting of cells. Each cell is either empty, contains\r\na sheep, a wolf or a dog. Sheep and dogs always stay in place, but\r\nwolves can roam freely around the pasture, by repeatedly moving to the\r\nleft, right, up or down to a neighboring cell. When a wolf enters a cell\r\nwith a sheep, it consumes it. However, no wolf can enter a cell with a\r\ndog.Initially there are no dogs. Place dogs onto the pasture in such a\r\nway that no wolf can reach any sheep, or determine that it is\r\nimpossible. Note that since you have many dogs, you do need to minimize\r\ntheir number.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint R, C;\nchar a[510][510];\n\nint main() {\n    scanf(\"%d%d\",&R,&C);\n    for(int i = 0 ; i < R ; i++)\n        scanf(\" %s\",a[i]);\n    for(int i = 0 ; i < R ; i++) {\n        for(int j = 0 ; j < C ; j++) {\n            if(a[i][j] == 'S') {\n                if(i != 0) {\n                    if(a[i-1][j] == 'W') {\n                        printf(\"No\");\n                        return 0;\n                    }\n                    if(a[i-1][j] != 'S')\n                        a[i-1][j] = 'D';\n                }\n                if(j != 0) {\n                    if(a[i][j-1] == 'W') {\n                        printf(\"No\");\n                        return 0;\n                    }\n                    if(a[i][j-1] != 'S')\n                        a[i][j-1] = 'D';\n                }\n                if(i != R) {\n                    if(a[i+1][j] == 'W') {\n                        printf(\"No\");\n                        return 0;\n                    }\n                    if(a[i+1][j] != 'S')\n                        a[i+1][j] = 'D';\n                }\n                if(j != C) {\n                    if(a[i][j+1] == 'W') {\n                        printf(\"No\");\n                        return 0;\n                    }\n                    if(a[i][j+1] != 'S')\n                        a[i][j+1] = 'D';\n                }\n            }\n        }\n    }\n    puts(\"Yes\");\n    for(int i = 0 ; i < R; i++) {\n        for(int j = 0 ; j < C ; j++) {\n            printf(\"%c\",a[i][j]);\n        }\n        puts(\"\");\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dfs and similar",
        "graphs",
        "implementation"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Protect Sheep.json",
    "editorial_link": "https://codeforces.com//blog/entry/58286",
    "editorial": "Suppose that there is a wolf and a sheep in adjacent cells. It is\r\nobvious that in this case, the answer \"\" this particular wolf can always\r\nattack this sheep.Otherwise, the answer is always \"\". The simplest way\r\nof protecting all sheep is to place a dog in every empty cell. Then no\r\nwolf can move and all sheep are safe and happy.\r\n"
}