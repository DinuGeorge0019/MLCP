{
    "link": "https://codeforces.com//contest/2085/problem/D",
    "problemId": "3284099",
    "problem_idx": "D",
    "shortId": "2085D",
    "contest_number": "2085",
    "problem_submissions": {
        "F2": [
            311878898,
            311854121,
            312547828,
            313180465,
            312715525
        ],
        "F1": [
            311866129,
            311884163,
            311888744,
            311865797,
            311890721,
            311853454,
            311870055,
            311856458,
            311889685,
            312547788,
            312535060,
            311920736,
            311883283
        ],
        "D": [
            311854269,
            311840149,
            311846898,
            311849836,
            311841369,
            311813594,
            311831715,
            311864844,
            311834411,
            311845527,
            311845487,
            311842115,
            311851940
        ],
        "E": [
            311849828,
            311869915,
            311859328,
            311874708,
            311857458,
            311844963,
            311880401,
            311844941,
            311849085,
            311875928,
            311862172,
            311856416,
            311861319,
            311872692,
            311863088,
            311848201
        ],
        "B": [
            311824052,
            311815589,
            311817146,
            311836083,
            311819326,
            311808366,
            311842734,
            311823405,
            311881846,
            311854059,
            311819894,
            311821673,
            311824308,
            311814219,
            311816794,
            311819160
        ],
        "A": [
            311810733,
            311807971,
            311807466,
            311816690,
            311808218,
            311807487,
            311888447,
            311833731,
            311808956,
            311822473,
            311811561,
            311808040,
            311808284,
            311807791,
            311816294
        ],
        "C": [
            311807884,
            311821315,
            311839190,
            311828017,
            311827320,
            311810326,
            311887204,
            311816120,
            311830323,
            311880309,
            311851607,
            311814111,
            311825484,
            311838153,
            311826627,
            311836598,
            311830943
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/140933",
    "editorial": "SolutionNote that the last -th time taking a plate of sushi should be no\r\nlater than the -th minute. This constraint limits the time that a taking\r\naction can be performed. Therefore, we enumerate the minutes in\r\nchronological order, and greedily take the untaken plates delivered\r\nbefore with the greatest deliciousness when we reach a constraint, i.e.,\r\nthe current minute is the -th minute for a certain . The deliciousnesses\r\nof the untaken plates can be maintained by a heap. The total complexity\r\nis .\r\n",
    "name": "D. Serval and Kaitenzushi Buffet",
    "statement": "Serval has just found a Kaitenzushi buffet restaurant. Kaitenzushi means\r\nthat there is a conveyor belt in the restaurant, delivering plates of\r\nsushi in front of the customer, Serval.In this restaurant, each plate\r\ncontains exactly k pieces of sushi and the i-th plate has a d_i. Serval\r\nwill have a meal in this restaurant for n minutes, and within the n\r\nminutes, he must eat up the pieces of sushi he took from the belt.Denote\r\nthe counter for uneaten taken pieces of sushi as r. Initially, r=0. In\r\nthe i-th minute (1\r\nleq i\r\nleq n), only the i-th plate of sushi will be delivered in front of\r\nServal, and he can do of the following: Take the i-th plate of sushi\r\n(whose is d_i) from the belt, and r will be increased by k; Eat one\r\nuneaten piece of sushi that he took from the belt before, and r will be\r\ndecreased by 1. Note that you can do this only if r>0; Or, do nothing,\r\nand r will remain unchanged. Note that after the n minutes, the value of\r\nr be 0.Serval wants to maximize the sum of the of all the plates he\r\ntook. Help him find it out!\r\n",
    "solutions": [],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "graph matchings",
        "greedy"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Serval and Kaitenzushi Buffet.json",
    "hint": [
        "Hint 1 Do not go for DP.",
        "Hint 2 How many plates of sushi can be taken?",
        "Hint 3 What are the constraints on the time of taking plates of sushi?"
    ]
}