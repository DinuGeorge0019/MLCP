{
    "link": "https://codeforces.com//contest/116/problem/A",
    "problemId": "609",
    "problem_idx": "A",
    "shortId": "116A",
    "contest_number": "116",
    "problem_submissions": {
        "E": [
            700161,
            701799,
            701421,
            702282,
            700977,
            704488,
            701119
        ],
        "D": [
            699566,
            698442,
            699880,
            700164,
            701655,
            698834,
            699735,
            698841,
            698890,
            9443336,
            709309,
            699987,
            699816,
            700455,
            699803,
            699649,
            699931,
            699910
        ],
        "C": [
            698001,
            696869,
            697453,
            698296,
            698175,
            697132,
            696265,
            697608,
            697369,
            9442997,
            698325,
            697976,
            696978,
            697819,
            697685,
            698132,
            697395,
            698281
        ],
        "B": [
            697389,
            699259,
            696737,
            697208,
            697213,
            696507,
            697595,
            696839,
            696682,
            9442209,
            697385,
            697177,
            698196,
            696508,
            698380,
            697274,
            696601,
            696966
        ],
        "A": [
            696282,
            695857,
            695773,
            696139,
            695925,
            695792,
            696656,
            695824,
            695837,
            9442134,
            696797,
            695862,
            696053,
            695796,
            695742,
            696321,
            695753,
            695835
        ]
    },
    "name": "A. Tram",
    "statement": "Linear Kingdom has exactly one tram line. It has stops, numbered from to\r\nin the order of tram’s movement. At the -th stop passengers exit the\r\ntram, while passengers enter it. The tram is empty before it arrives at\r\nthe first stop. Also, when the tram arrives at the last stop, all\r\npassengers exit so that it becomes empty.Your task is to calculate the\r\ntram’s minimum capacity such that the number of people inside the tram\r\nat any time never exceeds this capacity. Note that at each stop all\r\nexiting passengers exit any entering passenger enters the tram.\r\n",
    "solutions": [
        "#include <list>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <sstream>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cfloat>\n#include <numeric>\n \nusing namespace std;\n \nconst int oo = 0x3f3f3f3f;\nconst double eps = 1e-9;\n \ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int, int> pii;\n \n#define sz(c) int((c).size())\n#define all(c) (c).begin(), (c).end()\n#define FOR(i,a,b) for (int i = (a); i < (b); i++)\n#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)\n#define FORIT(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)\n\n\n\nint main() {\n\tint N;\n\tcin >> N;\n\tint m = 0, akt = 0;\n\tFOR(i,0,N) {\n\t\tint a,b;\n\t\tcin >> a >> b;\n\t\takt += b-a;\n\t\tm = max(akt,m);\n\t}\n\tcout << m << endl;\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Tram.json",
    "editorial_link": "https://codeforces.com//blog/entry/2584",
    "editorial": "If we know the number of people inside the tram at all possible time,\r\nthen the answer is the maximum of such. We observe that the number of\r\npeople inside the tram changes only at tram stops. The conclusion is\r\nthat the answer will be the maximum of the number of people inside the\r\ntram directly before arriving at a particular stop and directly after\r\nleaving a particular stop (the more observant readers can notice that\r\nusing only one of these is sufficient). Itâs sufficiently easy to\r\ncalculate the number of people inside the tram directly before and after\r\nleaving a tram stop.\r\n",
    "hint": []
}