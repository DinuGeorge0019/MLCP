{"link": "https://codeforces.com//contest/248/problem/D", "problemId": "2268", "problem_idx": "D", "shortId": "248D", "contest_number": "248", "problem_submissions": {"E": [2649329, 2666555, 2670742], "C": [2647083, 2645782, 2644570, 2645026, 2644143, 2646018, 2646002, 2646393, 2645569, 2646511, 2646914, 2645391, 2646255, 2646251, 2646956, 2646183, 2647244, 2647055], "B": [2643322, 2643726, 2643149, 2643654, 2645176, 2645012, 2644994, 2643618, 2647620, 2643812, 2643918, 2646274, 2644810, 2644905, 2644568, 2644808, 2644058, 2644407], "A": [2642156, 2642135, 2642120, 2642490, 2642087, 2642114, 2642102, 2642090, 2642543, 2642959, 2642616, 2642092, 2642321, 2643225, 2643200, 2646252, 2642288, 2643406], "D": [2657603, 2671870]}, "name": "D. Sweets for Everyone ", "statement": "For he knew every Who down in Whoville beneath, Was busy now, hanging a\r\nmistletoe wreath. \"And they\u2019re hanging their stockings!\" he snarled with\r\na sneer, \"Tomorrow is Christmas! It\u2019s practically here!\"Dr. Suess, How\r\nThe Grinch Stole ChristmasChristmas celebrations are coming to Whoville.\r\nCindy Lou Who and her parents Lou Lou Who and Betty Lou Who decided to\r\ngive sweets to all people in their street. They decided to give the\r\nresidents of each house on the street, one kilogram of sweets. So they\r\nneed as many kilos of sweets as there are homes on their street.The\r\nstreet, where the Lou Who family lives can be represented as consecutive\r\nsections of equal length. You can go from any section to a neighbouring\r\none in one unit of time. Each of the sections is one of three types: an\r\nempty piece of land, a house or a shop. Cindy Lou and her family can buy\r\nsweets in a shop, but no more than one kilogram of sweets in one shop\r\n(the vendors care about the residents of Whoville not to overeat on\r\nsweets).After the Lou Who family leave their home, they will be on the\r\nfirst section of the road. To get to this section of the road, they also\r\nrequire one unit of time. We can assume that Cindy and her mom and dad\r\ncan carry an unlimited number of kilograms of sweets. Every time they\r\nare on a house section, they can give a kilogram of sweets to the\r\ninhabitants of the house, or they can simply move to another section. If\r\nthe family have already given sweets to the residents of a house, they\r\ncan\u2019t do it again. Similarly, if they are on the shop section, they can\r\neither buy a kilo of sweets in it or skip this shop. If they\u2019ve bought a\r\nkilo of sweets in a shop, the seller of the shop remembered them and the\r\nwon\u2019t sell them a single candy if they come again. The time to buy and\r\ngive sweets can be neglected. The Lou Whos do not want the people of any\r\nhouse to remain without food.The Lou Whos want to spend no more than\r\ntime units of time to give out sweets, as they really want to have\r\nenough time to prepare for the Christmas celebration. In order to have\r\ntime to give all the sweets, they may have to initially bring additional\r\nkilos of sweets.Cindy Lou wants to know the minimum number of kilos of\r\nsweets they need to take with them, to have time to give sweets to the\r\nresidents of each house in their street.Your task is to write a program\r\nthat will determine the minimum possible value of .\r\n", "solutions": ["#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <set>\n#include <string>\n#include <deque>\n#include <iomanip>\n#include <map>\n#include <cmath>\n\nusing namespace std;\nint n, t, c, d[555555], res=0, ll=-1;\n\nbool try_ans(int k) {\n    if (d[n-1]>k) return false;\n    int last=0, now=0, res, l2=-1;\n    vector<pair<int, int> > aa;\n    for (int i=0; i<n; i++) {\n        if (d[i]>k) {\n            l2=i;\n            if (!last) aa.push_back(make_pair(i, now));\n            last=1;\n            now+=2;\n        } else if (last==1) last=2, l2=i;\n        else last=0;\n    }\n    if (ll>l2) l2=ll;\n    res=now+l2+1;\n    for (int i=aa.size()-1; i>=0; i--)\n        if (2*l2+1-aa[i].first+aa[i].second<res)\n            res=2*l2+1-aa[i].first+aa[i].second;\n    return res<=t;\n}\n\nint ans(int max, int min) {\n    if (max==min) return min;\n    int mid=(max+min)/2;\n    bool a=try_ans(mid);\n    if (a) return ans(mid, min);\n    else return ans(max, mid+1);\n}\n\nint main()\n{\n    cin >> n >> t;\n    string str;\n    cin >> str;\n    int now = 0;\n    for (int i=0; i<n; i++) {\n        c=str[i];\n        if (c=='H')now++, ll=i;\n        if (c=='S')now--;\n        d[i]=now;\n        if (now>res)res=now;\n    }\n    if (ll+1>t) cout << -1;\n    else {\n        cout << ans(res, 0);\n    }\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["binary search", "greedy", "implementation"], "dificulty": "2300", "interactive": false}