{"link": "https://codeforces.com//contest/899/problem/F", "problemId": "139225", "problem_idx": "F", "shortId": "899F", "contest_number": "899", "problem_submissions": {"E": [33341966, 33340018, 33344607, 33341901, 33341539, 33344275, 33337380, 33342849, 33340726, 33347352, 33343799, 33343759, 33341387, 33344491, 33344757, 33341661, 33346130, 33338732], "C": [33340695, 33335345, 33336434, 33335120, 33335041, 33335499, 33334442, 33348052, 33335755, 33342632, 33337468, 33334609, 33334793, 33334208, 33335451, 33337214, 33334080, 33333085, 33333444, 33331734], "F": [33338461, 33343719, 33339590, 33345961, 33344150, 33347582, 33346148, 33345517, 33343018, 33342469, 33347771, 33346884, 33346523, 33344745, 33367339, 33341779, 33351995, 33344839, 33365793], "D": [33336515, 33337716, 33334973, 33338435, 33339737, 33338654, 33342392, 33336907, 33337363, 33345764, 33341905, 33342131, 33336716, 33359470, 33338983, 33337743, 33339386, 33340477, 33334813], "B": [33333018, 33334262, 33335995, 33336742, 33345182, 33334298, 33344445, 33333097, 33339162, 33346906, 33355091, 33333588, 33336070, 33332639, 33334734, 33332707, 33332034, 33335177, 33341675], "A": [33330877, 33331991, 33335753, 33330957, 33342381, 33331004, 33335366, 33331266, 33330748, 33330942, 33330958, 33330948, 33331773, 33330761, 33330943, 33331310, 33330809, 33330687, 33330860, 33341110]}, "name": "F. Letters Removing", "statement": "Petya has a string of length consisting of small and large English\r\nletters and digits.He performs operations. Each operation is described\r\nwith two integers and and a character : Petya removes from the string\r\nall characters on positions between and , inclusive. It\u2019s obvious that\r\nthe length of the string remains the same or decreases after each\r\noperation.Find how the string will look like after Petya performs all\r\noperations.\r\n", "solutions": ["#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<set>\nusing namespace std;\nconst int M=(int)2e5+5;\nset<int>st[128];\nset<int>::iterator it,it1;\nchar S[M],A[5];\nint n,m;\nint mark[M];\nint val[M*4];\nvoid build(int L,int R,int p){\n\tval[p]=R-L+1;\n\tif(L==R)return;\n\tint mid=(L+R)>>1;\n\tbuild(L,mid,p<<1),build(mid+1,R,p<<1|1);\n}\nvoid update(int L,int R,int p,int x){\n\tval[p]--;\n\tif(L==R)return;\n\tint mid=(L+R)>>1;\n\tif(mid>=x)update(L,mid,p<<1,x);\n\telse update(mid+1,R,p<<1|1,x);\n}\nint query(int L,int R,int p,int v){\n\tif(L==R)return L;\n\tint mid=(L+R)>>1;\n\tif(val[p<<1]>=v)return query(L,mid,p<<1,v);\n\telse return query(mid+1,R,p<<1|1,v-val[p<<1]);\n}\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tbuild(1,n,1);\n\tscanf(\"%s\",S+1);\n\tfor(int i=1;i<=n;i++)st[(int)S[i]].insert(i);\n\tfor(int i=1,l,r,x;i<=m;i++){\n\t\tscanf(\"%d %d\",&l,&r);\n\t\tl=query(1,n,1,l);\n\t\tr=query(1,n,1,r);\n\t\tscanf(\"%s\",A);\n\t\tx=A[0];\n\t\tfor(it=st[x].lower_bound(l);it!=st[x].end()&&(*it)<=r;){\n\t\t\tit1=it;\n\t\t\tupdate(1,n,1,(*it1));\n\t\t\tit++;\n\t\t\tst[x].erase(it1);\n\t\t}\n\t}\n\tfor(int i=0;i<128;i++)\n\t\tfor(it=st[i].begin();it!=st[i].end();it++)\n\t\t\tmark[(*it)]=1;\n\tfor(int i=1;i<=n;i++)\n\t\tif(mark[i])\n\t\t\tputchar(S[i]);\n\tputchar('\\n');\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "strings"], "dificulty": "2100", "interactive": false}