{
    "link": "https://codeforces.com//contest/606/problem/A",
    "problemId": "42712",
    "problem_idx": "A",
    "shortId": "606A",
    "contest_number": "606",
    "problem_submissions": {
        "E": [
            14725950,
            14727210,
            14727285,
            14729262,
            14730116,
            14751808,
            14744112
        ],
        "D": [
            14723234,
            14720930,
            14722869,
            14722527,
            14721927,
            14721746,
            14724535,
            14726175,
            14725267,
            14727123,
            14723529,
            14723141,
            14723054,
            14723150,
            14724111,
            14724621,
            14724261,
            14729733,
            14726510,
            14723588
        ],
        "C": [
            14720687,
            14718170,
            14720169,
            14719390,
            14718531,
            14725447,
            14722596,
            14730393,
            14718042,
            14720969,
            14719927,
            14719309,
            14718761,
            14720872,
            14720282,
            14719898,
            14721458,
            14724065,
            14721907,
            14718844
        ],
        "B": [
            14719527,
            14727489,
            14717796,
            14718524,
            14717743,
            14717859,
            14719198,
            14721650,
            14720720,
            14718805,
            14718705,
            14720039,
            14720141,
            14718565,
            14718498,
            14718858,
            14720719,
            14719695,
            14729480
        ],
        "A": [
            14716101,
            14721455,
            14715984,
            14715809,
            14716134,
            14715791,
            14715975,
            14739251,
            14715905,
            14717499,
            14716801,
            14716057,
            14715921,
            14715914,
            14715981,
            14716162,
            14716237,
            14717038,
            14716311,
            14716156
        ]
    },
    "name": "A. Magic Spheres",
    "statement": "Carl is a beginner magician. He has blue, violet and orange magic\r\nspheres. In one move he can transform two spheres into one sphere of any\r\nother color. To make a spell that has never been seen before, he needs\r\nat least blue, violet and orange spheres. Can he get them (possible, in\r\nmultiple actions)?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    //freopen(\"A.txt\", \"r\", stdin);\n    ios_base::sync_with_stdio(false);\n\n    int a, b, c, x, y, z;\n    cin >> a>>b>>c>>x>>y>>z;\n\n    int poz=max(a-x, 0)/2+max(b-y, 0)/2+max(c-z, 0)/2;\n    int neg=max(x-a, 0)+max(y-b, 0)+max(z-c, 0);\n\n    if (poz>=neg) {\n        cout << \"YES\"<<endl;\n    } else {\n        cout << \"NO\"<<endl;\n    }\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Magic Spheres.json",
    "editorial_link": "https://codeforces.com//blog/entry/22019",
    "editorial": "Let\u0092s count how many spheres of each type are lacking to the goal. We must do at least that many transformations. Let\u0092s count how many spheres of each type are extra relative to the goal. Each two extra spheres give us an opportunity to do one transformation. So to find out how many transformations can be done from the given type of spheres, one must look how many extra spheres there are, divide this number by 2 and round down. Let\u0092s sum all the opportunities of transformations from each type of spheres and all the lacks. If there are at least that many opportunities of transformations as the lacks, the answer is positive. Otherwise, it\u0092s negative."
}