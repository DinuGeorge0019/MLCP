{
    "link": "https://codeforces.com//contest/1567/problem/A",
    "problemId": "1099173",
    "problem_idx": "A",
    "shortId": "1567A",
    "contest_number": "1567",
    "problem_submissions": {
        "C": [
            127974564,
            127939959,
            127954581,
            127964000,
            127952919,
            127944623,
            127939332,
            127964327,
            127943124,
            127968891,
            127947814,
            127940553,
            127945813,
            127964268,
            127942609,
            127947600,
            127945820,
            127938032,
            127948426,
            127964716
        ],
        "A": [
            127964852,
            127922278,
            127932015,
            127955526,
            127943035,
            127922628,
            127923688,
            127926840,
            127922694,
            127925712,
            127924423,
            127923731,
            127922858,
            127922205,
            127926705,
            127927113,
            127928956,
            127922373,
            127923105,
            127922692
        ],
        "B": [
            127964231,
            127928229,
            127928104,
            127960707,
            127944459,
            127929761,
            127931746,
            127932290,
            127933652,
            127938027,
            127928958,
            127942519,
            127932981,
            127927891,
            127934499,
            127937493,
            127935529,
            127926955,
            127935971,
            127930754
        ],
        "D": [
            127962995,
            127955193,
            127945755,
            127969042,
            127959015,
            127952114,
            127951882,
            127957740,
            127965163,
            127957338,
            127967067,
            128042803,
            127957487,
            127961796,
            127954276,
            127956523,
            127952133,
            127952975,
            127957557,
            127953745
        ],
        "E": [
            127956967,
            127950306,
            127967160,
            127953453,
            128966040,
            127974173,
            128003977,
            127960229,
            127963530,
            127951320,
            127958948,
            128021683,
            127976249,
            127963411,
            127950253,
            128042735,
            127964337,
            127947637,
            127967826,
            127965391,
            128541587,
            127968997,
            127966309,
            127964418,
            127961161
        ],
        "F": [
            127951988,
            127980467,
            127976901,
            127981608,
            127980938,
            128003888,
            128003811,
            128049440,
            127960253,
            128042163
        ]
    },
    "name": "A. Domino Disaster",
    "statement": "Alice has a grid with 2 rows and n columns. She fully covers the grid\r\nusing n dominoes of size 1\r\ntimes 2 Alice may place them vertically or horizontally, and each cell\r\nshould be covered by exactly one domino.Now, she decided to show one row\r\nof the grid to Bob. Help Bob and figure out what the other row of the\r\ngrid looks like!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint n;\nchar s[111];\nvoid solve() {\n\tscanf(\"%d\", &n);\n\tscanf(\"%s\", s);\n\tfor (int i = 0; i < n; i++)\n\t\t\tif (s[i] == 'U') s[i] = 'D'; else if (s[i] == 'D') s[i] = 'U';\n\tputs(s);\n}\n\nint main() {\n\tint T;\n\tscanf(\"%d\", &T);\n\tfor (int i = 0; i < T; i++) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Domino Disaster.json",
    "editorial_link": "https://codeforces.com//blog/entry/94581",
    "editorial": "If there is a vertical domino (either U or D) in the current slot, then\r\nthe corresponding domino half in the other row must be a D or a U,\r\nrespectively. Otherwise, we can just fill the rest of the row with\r\ncopies of LR.Time complexity: .\r\n",
    "hint": []
}