{
    "link": "https://codeforces.com//contest/2013/problem/B",
    "problemId": "2890587",
    "problem_idx": "B",
    "shortId": "2013B",
    "contest_number": "2013",
    "problem_submissions": {
        "F1": [
            282085508,
            282091649,
            282097681,
            282062964,
            282097010,
            282094496,
            282096102,
            282130493,
            282100468,
            282110907,
            282110226,
            282977558
        ],
        "E": [
            282061833,
            282080813,
            282051849,
            282086247,
            282037391,
            282057195,
            282050812,
            282047875,
            282387310,
            282046660,
            282057981,
            282053861,
            282054405,
            282061649,
            282089310,
            282054594,
            282061765,
            282060270,
            282065503,
            282063375
        ],
        "D": [
            282053393,
            282148584,
            282052109,
            282042335,
            282076655,
            282080799,
            282065676,
            282079143,
            282037385,
            282054240,
            282041005,
            282045620,
            282047474,
            282043487,
            282073249,
            282022525,
            282048467,
            282042436,
            282046096,
            282048201
        ],
        "C": [
            282036735,
            282027206,
            282070402,
            282021424,
            282027464,
            282026938,
            282063555,
            282026144,
            282031663,
            282027005,
            282037319,
            282027256,
            282027279,
            282046717,
            282066980,
            282036015,
            282031256,
            282038898,
            282038980
        ],
        "B": [
            282022099,
            282013728,
            282015453,
            282011770,
            282018552,
            282009811,
            282027915,
            282017479,
            282013009,
            282018195,
            282019086,
            282010905,
            282014462,
            282037982,
            282022835,
            282017402,
            282018955,
            282018976,
            282023313
        ],
        "A": [
            282014277,
            282006421,
            282026971,
            282006385,
            282008034,
            282005836,
            282006296,
            282008704,
            282006066,
            282010046,
            282006523,
            282005614,
            282006702,
            282035715,
            282023370,
            282007442,
            282014269,
            282005794,
            282006570
        ]
    },
    "editorial_link": "https://codeforces.com/blog/entry/134170",
    "editorial": "SolutionIt can be noted that the value of will always be negative in the\r\nfinal result.Therefore, we can subtract the sum from , and then subtract\r\nfrom .Thus, the final sum will be . This value cannot be exceeded\r\nbecause will always be negative.\r\n",
    "name": "B. Battle for Survive",
    "statement": "Eralim, being the mafia boss, manages a group of n fighters. Fighter i\r\nhas a rating of a_i.Eralim arranges a tournament of n - 1 battles, in\r\neach of which two not yet eliminated fighters i and j () are chosen, and\r\nas a result of the battle, fighter i is eliminated from the tournament,\r\nand the rating of fighter j is reduced by the rating of fighter i. That\r\nis, a_j is decreased by a_i. Note that fighter j\u2019s rating can become\r\nnegative. The fighters indexes do not change.Eralim wants to know what\r\nmaximum rating the last remaining fighter can preserve if he chooses the\r\nbattles optimally.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;\u00a0typedef long long ll;using vi = vector<int>;using vvi = vector<vector<int>>;using vll = vector<ll>;using vvll = vector<vector<ll>>;\u00a0#define all(x) x.begin(), x.end()#define ckmin(a,b) a = min(a,b)#define ckmax(a,b) a = max(a,b)\u00a0void solve() {    int N;    cin >> N;        vll A(N);    for (int i=0;i<N;i++) cin >> A[i];\u00a0    ll ans = 0;    for (ll a : A) ans += a;    ans -= 2 * A[N-2];    cout << ans << \"\\n\";}\u00a0int main() {    std::ios::sync_with_stdio(false);    std::cin.tie(NULL);\u00a0    int T;    cin >> T;    for (int t=0;t<T;t++) solve();\u00a0\u00a0    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Battle for Survive.json"
}