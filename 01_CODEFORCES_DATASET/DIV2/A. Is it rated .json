{
    "link": "https://codeforces.com//contest/807/problem/A",
    "problemId": "105601",
    "problem_idx": "A",
    "shortId": "807A",
    "contest_number": "807",
    "problem_submissions": {
        "C": [
            26937367,
            26932679,
            26931824,
            26933954,
            26935002,
            26945243,
            26934673,
            26931916,
            26932051,
            26931857,
            26932221,
            26934137,
            26931106,
            26934955,
            26948034,
            26933750,
            26931179,
            26933734
        ],
        "E": [
            26937218,
            26941715,
            26942118,
            26943819,
            26944219,
            26940388,
            26942912,
            26974189,
            26945366,
            26938570,
            26939988,
            26940095
        ],
        "D": [
            26933616,
            26938470,
            26937308,
            26935937,
            26940795,
            26937188,
            26938367,
            26934356,
            26935620,
            26933949,
            26944682,
            26939881,
            26963824,
            26941895,
            26936251,
            26938625,
            26938681
        ],
        "B": [
            26929187,
            26930221,
            26930051,
            26930975,
            26931611,
            26930997,
            26945828,
            26929713,
            26931410,
            26929634,
            26929851,
            26931739,
            26929439,
            26931155,
            26930623,
            26932660,
            26928773,
            26928963
        ],
        "A": [
            26926738,
            26928269,
            26927513,
            26927911,
            81453119,
            81452755,
            26927099,
            26927720,
            26926862,
            26927495,
            26936234,
            26928013,
            26926637,
            26926993,
            26927122,
            26929273,
            26927007,
            26927862,
            26926641,
            26926659
        ],
        "F": [
            27349164
        ]
    },
    "name": "A. Is it rated ",
    "statement": "Here it is. The Ultimate Question of Competitive Programming,\r\nCodeforces, and Everything. And you are here to answer it.Another\r\nCodeforces round has been conducted. No two participants have the same\r\nnumber of points. For each participant, from the top to the bottom of\r\nthe standings, their rating before and after the round is known.It’s\r\nknown that if at least one participant’s rating has changed, then the\r\nround was rated for sure.It’s also known that if the round was rated and\r\na participant with lower rating took a better place in the standings\r\nthan a participant with higher rating, then at least one round\r\nparticipant’s rating has changed.In this problem, you should not make\r\nany other assumptions about the rating system.Determine if the current\r\nround is rated, unrated, or it’s impossible to determine whether it is\r\nrated of not.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nbool rated(vector<pair<int,int> > vec) {\n    for(int i=0;i<vec.size();i++) {\n        if(vec[i].first != vec[i].second) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool unrated(vector<pair<int,int> > vec) {\n    if(rated(vec)) {\n        return false;\n    }\n    for(int i=0;i<vec.size()-1;i++) {\n        if(vec[i].first < vec[i+1].first) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<pair<int,int> > vec(n);\n    for(int i=0;i<n;i++) {\n        cin >> vec[i].first >> vec[i].second;\n    }\n    if(rated(vec)) {\n        cout << \"rated\" << endl;\n    } else if(unrated(vec)) {\n        cout << \"unrated\" << endl;\n    } else {\n        cout << \"maybe\" << endl;\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "sortings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Is it rated .json",
    "editorial_link": "https://codeforces.com/blog/entry/51883",
    "editorial": "To solve this problem, you just had to read the problem statement\r\ncarefully. Looking through the explanations for the example cases was\r\npretty useful.How do we check if the round is rated for sure?The round\r\nis rated for sure if anyoneâs rating has changed, that is, if for some\r\n.How do we check if the round is unrated for sure?Given that all , the\r\nround is unrated for sure if for some we have . This can be checked\r\nusing two nested for-loops over and .: can you check the same using one\r\nfor-loop?How do we find that itâs impossible to determine if the round\r\nis rated or not?If none of the conditions from steps 1 and 2 is\r\nsatisfied, the answer is \"\".\r\n",
    "hint": []
}