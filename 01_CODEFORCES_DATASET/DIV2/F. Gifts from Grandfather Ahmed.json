{
    "link": "https://codeforces.com//contest/1798/problem/F",
    "problemId": "1849272",
    "problem_idx": "F",
    "shortId": "1798F",
    "contest_number": "1798",
    "problem_submissions": {
        "F": [
            199301449,
            199635259,
            199378902,
            199319392,
            199574998,
            200590796,
            199735470,
            201129046,
            199317594
        ],
        "E": [
            199292979,
            199351345,
            199287102,
            199284185,
            199288971,
            199287988,
            199287959,
            199291669,
            199576167,
            199283535,
            199289650,
            199290902,
            199290821,
            199293377,
            199290100,
            199289126,
            199294280,
            199294488,
            199296355,
            199291720,
            199292702,
            199291551
        ],
        "C": [
            199282234,
            199260342,
            199262167,
            199263273,
            199268067,
            199264515,
            199261766,
            199308981,
            199268218,
            199266685,
            199267420,
            199260005,
            199259528,
            199264427,
            199273339,
            199266427,
            199263028,
            199263300,
            199265190,
            199268521,
            199269803
        ],
        "D": [
            199278441,
            199265876,
            199269760,
            199267498,
            199271957,
            199278028,
            199268206,
            199270707,
            199275816,
            199273016,
            199267038,
            199269245,
            199274308,
            199265125,
            199274313,
            199269059,
            199272118,
            199273321,
            199275125,
            199279668
        ],
        "B": [
            199256261,
            199253517,
            199260386,
            199254659,
            199254149,
            199255531,
            199254513,
            199253333,
            199254612,
            199260900,
            199256259,
            199253472,
            199256316,
            199258434,
            199255694,
            199256525,
            199257662,
            199261042,
            199260517
        ],
        "A": [
            199251141,
            199251302,
            199252305,
            199251756,
            199251041,
            199252000,
            199251140,
            199251087,
            199251123,
            199252263,
            199256364,
            199250912,
            199252253,
            199253426,
            199251686,
            199251495,
            199253540,
            199253141,
            199252510
        ]
    },
    "name": "F. Gifts from Grandfather Ahmed",
    "statement": "Grandfather Ahmed\u2019s School has n+1 students. The students are divided\r\ninto k classes, and s_i students study in the i-th class. So, s_1 + s_2\r\n+\r\nldots + s_k = n+1.Due to the upcoming April Fools\u2019 Day, all students\r\nwill receive gifts!Grandfather Ahmed planned to order n+1 boxes of\r\ngifts. Each box can contain one or more gifts. He plans to distribute\r\nthe boxes between classes so that the following conditions are\r\nsatisfied: Class number i receives s_i boxes (so that each student can\r\nopen exactly one box). The total number of gifts in the boxes received\r\nby the i-th class should be a multiple of s_i (it should be possible to\r\nequally distribute the gifts among the s_i students of this class).\r\nUnfortunately, Grandfather Ahmed ordered only n boxes with gifts, the\r\ni-th of which contains a_i gifts.Ahmed has to buy the missing gift box,\r\nand the number of gifts in the box should be an integer between 1 and\r\n10^6. Help Ahmed to determine, how many gifts should the missing box\r\ncontain, and build a suitable distribution of boxes to classes, or\r\nreport that this is impossible.\r\n",
    "solutions": [
        "#pragma GCC optimization(\"O3\")\n#pragma GCC optimization(\"Ofast,unroll-loops\")\n \n#include <bits/stdc++.h>   \n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\nusing namespace __gnu_pbds;   \nusing namespace std;  \n#define ll long long  \nconst ll INF_MUL=1e13;\nconst ll INF_ADD=1e18;    \n#define pb push_back                 \n#define mp make_pair          \n#define nline \"\\n\"                           \n#define f first                                          \n#define s second                                             \n#define pll pair<ll,ll> \n#define all(x) x.begin(),x.end()     \n#define vl vector<ll>           \n#define vvl vector<vector<ll>>    \n#define vvvl vector<vector<vector<ll>>>          \n#ifndef ONLINE_JUDGE    \n#define debug(x) cerr<<#x<<\" \"; _print(x); cerr<<nline;\n#else\n#define debug(x);  \n#endif       \nvoid _print(ll x){cerr<<x;}  \nvoid _print(char x){cerr<<x;}   \nvoid _print(string x){cerr<<x;}    \nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());   \ntemplate<class T,class V> void _print(pair<T,V> p) {cerr<<\"{\"; _print(p.first);cerr<<\",\"; _print(p.second);cerr<<\"}\";}\ntemplate<class T>void _print(vector<T> v) {cerr<<\" [ \"; for (T i:v){_print(i);cerr<<\" \";}cerr<<\"]\";}\ntemplate<class T>void _print(set<T> v) {cerr<<\" [ \"; for (T i:v){_print(i); cerr<<\" \";}cerr<<\"]\";}\ntemplate<class T>void _print(multiset<T> v) {cerr<< \" [ \"; for (T i:v){_print(i);cerr<<\" \";}cerr<<\"]\";}\ntemplate<class T,class V>void _print(map<T, V> v) {cerr<<\" [ \"; for(auto i:v) {_print(i);cerr<<\" \";} cerr<<\"]\";} \ntypedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\ntypedef tree<ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;\ntypedef tree<pair<ll,ll>, null_type, less<pair<ll,ll>>, rb_tree_tag, tree_order_statistics_node_update> ordered_pset;\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nconst ll MOD=1e9+7;      \nconst ll MAX=200200;\nvoid solve(){   \n    ll n,k; cin>>n>>k;\n    vector<ll> a(n+5);\n    for(ll i=1;i<=n;i++){\n        cin>>a[i];\n    }\n    vector<ll> s(k+5,0);\n    for(ll i=1;i<=k;i++){\n        cin>>s[i];\n    }\n    vector<ll> skip(n+5,0);\n    vector<vector<ll>> ans;\n    ll already=0;\n    for(ll i=1;i<=k;i++){\n        ll len=s[i];\n        vector<vector<ll>> dp(len+5,vector<ll>(len+5,-1));\n        dp[0][0]=0;\n        for(ll pos=1;pos<=n;pos++){\n            if(skip[pos]){\n                continue;\n            }\n            for(ll freq=len-1;freq>=0;freq--){\n                for(ll rem=len-1;rem>=0;rem--){\n                    if(dp[freq][rem]==-1){\n                        continue; \n                    }\n                    if(dp[freq+1][(rem+a[pos])%len]!=-1){\n                        continue;\n                    }\n                    dp[freq+1][(rem+a[pos])%len]=pos; \n                }\n            }\n        }\n        vector<ll> now;\n        if(dp[len][0]!=-1){\n            ;\n        }\n        else{\n            assert(already==0); \n            for(ll rem=0;rem<len;rem++){\n                if(dp[len-1][rem]!=-1){\n                    dp[len][0]=n+1;\n                    a[n+1]=len-rem;\n                    break;  \n                }  \n            }\n            already=1;\n        }\n        ll rem=0;     \n        for(ll freq=len;freq>=1;freq--){\n            ll cur=dp[freq][rem];\n            now.push_back(a[cur]);\n            rem=(rem-a[cur])%len;\n            rem=(rem+len)%len;\n            skip[cur]=1;\n        }\n        ans.push_back(now);\n    }\n    cout<<a[n+1]<<nline;\n    for(auto it:ans){\n        for(auto i:it){\n            cout<<i<<\" \";\n        }\n        cout<<nline; \n    }\n    return;                                  \n}                                                   \nint main()                                                                                                \n{      \n    ios_base::sync_with_stdio(false);                          \n    cin.tie(NULL);    \n    #ifndef ONLINE_JUDGE                    \n    freopen(\"input.txt\", \"r\", stdin);                                              \n    freopen(\"output.txt\", \"w\", stdout);  \n    freopen(\"error.txt\", \"w\", stderr);                        \n    #endif                          \n    ll test_cases=1;               \n    //cin>>test_cases;\n    while(test_cases--){\n        solve();\n    } \n    cout<<fixed<<setprecision(10);\n    cerr<<\"Time:\"<<1000*((double)clock())/(double)CLOCKS_PER_SEC<<\"ms\\n\"; \n}  "
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "math",
        "number theory"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Gifts from Grandfather Ahmed.json",
    "editorial_link": "https://codeforces.com//blog/entry/114208",
    "editorial": "Incredible mathematical fact: from any integers, you can choose with a\r\nsum divisible by (Erd s Ginzburg Ziv theorem) The proof can be found in\r\nthe world wide Web. Brief idea: first prove for primes, and then prove\r\nthat if true for and , then true for .Sort the class sizes: . Let\u00e2\u0080\u0099s\r\ndistribute the available boxes into the first classes in order. Then\r\nconsidering the class, we have boxes at our disposal. , which means\r\nthere are at least boxes from which you can always allocate to send to\r\nthe class. And for the last class, we can add a box with the necessary\r\nnumber of gifts ourselves to ensure divisibility.The question remains\r\nhow to allocate numbers with a sum divisible by among numbers.\r\nRestrictions allow you to do this in a straight dynamics for . is it\r\npossible to choose among the first numbers so that their sum gives the\r\nremainder of by the required modulus. Restore of the answer is done by\r\nthe classical method.\r\n"
}