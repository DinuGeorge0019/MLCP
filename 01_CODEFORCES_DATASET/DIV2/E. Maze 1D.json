{"link": "https://codeforces.com//contest/404/problem/E", "problemId": "7292", "problem_idx": "E", "shortId": "404E", "contest_number": "404", "problem_submissions": {"B": [6081380, 6071583, 6070927, 6071339, 6070454, 6070614, 6072572, 6071620, 6071224, 6072980, 6072201, 6072080, 6071625, 6070557, 6072898, 6071106, 6072617, 6072939], "A": [6081009, 6068298, 6068430, 6069127, 6068593, 6068443, 6069041, 6068506, 6069739, 6068994, 6068641, 6068845, 6068699, 6071140, 6069542, 6069802, 6068288], "E": [6077708, 6078243, 6080273, 6089004, 6098326, 6095224, 6104347], "D": [6074157, 6076415, 6075648, 6078211, 6077330, 6077784, 6078940, 6079076, 6079336, 6078890, 6080135, 6077817, 6078043, 6080355, 6079190, 6077371], "C": [6072624, 6074366, 6073677, 6073792, 6072756, 6073958, 6074499, 6073931, 6073038, 6075180, 6075460, 6076470, 6074776, 6073618, 6075857, 6074780, 6076291, 6078785]}, "name": "E. Maze 1D", "statement": "Valera has a strip infinite in both directions and consisting of cells.\r\nThe cells are numbered by integers. The cell number has a robot.The\r\nrobot has instructions the sequence of moves that he must perform. In\r\none move, the robot moves one cell to the left or one cell to the right,\r\naccording to instructions. Before the robot starts moving, Valera puts\r\nobstacles in some cells of the strip, excluding cell number . If the\r\nrobot should go into the cell with an obstacle according the\r\ninstructions, it will skip this move.Also Valera indicates the finish\r\ncell in which the robot has to be after completing the entire\r\ninstructions. The finishing cell should be different from the starting\r\none. It is believed that the robot , if during the process of moving he\r\nvisited the finish cell exactly once at its last move. Moreover, the\r\nlatter move cannot be skipped.Let\u2019s assume that is the minimum number of\r\nobstacles that Valera must put to make the robot able to complete the\r\nentire sequence of instructions successfully and end up in some\r\nfinishing cell. You need to calculate in how many ways Valera can choose\r\nobstacles and the finishing cell so that the robot is able to complete\r\nthe instructions successfully.\r\n", "solutions": ["#include <map>\n#include <set>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n#include <bitset>\nusing namespace std;\n\n#define PB(x) push_back(x)\n#define MP(x, y) make_pair(x, y)\n#define lx x + x\n#define rx lx + 1\n#define ly y + y\n#define ry ly + 1\ntypedef long long LL;\n\nconst int N = 1000005;\nconst int M = 1005;\nconst int INF = 1e9 + 7;\nconst int MOD = 1e9 + 7;\nconst double eps = 1e-6;\ntypedef double DB;\n\nchar s[N];\nint n;\nbool check(int l){\n    int now = 0, mn = 0;\n    for (int i = 1; i <= n; i++)\n    if (s[i] == 'R'){\n        if (now + 1 < l) now += 1;\n    }else{\n        now--;\n        if (i != n) mn = min(mn, now);\n    }\n    return now < mn;\n}\nint Solve(){\n    int l = 1, r = n, ans = 0;\n    while (l <= r){\n        int mid = l + r >> 1;\n        if (check(mid)){\n            ans = mid;\n            l = mid + 1;\n        }else r = mid - 1;\n    }\n    return ans;\n}\nint main(){\n    scanf(\"%s\", s + 1);\n    n = strlen(s + 1);\n    int mx = 0, mn = 0, now = 0;\n    for (int i = 1; i <= n; i++)\n    if (s[i] == 'R'){\n        now++;\n        if (i != n) mx = max(mx, now);\n    }else{\n        now--;\n        if (i != n) mn = min(mn, now);\n    }\n    if (now > mx || now < mn){\n        puts(\"1\");\n        return 0;\n\n    }\n\n    int ans = Solve();\n    for (int i = 1; i <= n; i++)\n    if (s[i] == 'L') s[i] = 'R'; else s[i] = 'L';\n    ans += Solve();\n    cout << ans << endl;\n}\n"], "input": "", "output": "", "tags": ["binary search", "greedy", "implementation"], "dificulty": "2200", "interactive": false}