{
    "link": "https://codeforces.com//contest/1330/problem/B",
    "problemId": "582579",
    "problem_idx": "B",
    "shortId": "1330B",
    "contest_number": "1330",
    "problem_submissions": {
        "E": [
            75407483,
            75403686,
            75406825,
            75412857,
            75411514,
            75411404,
            75407783,
            75407274,
            75400418,
            75447922,
            75412935,
            75466280
        ],
        "D": [
            75391296,
            75385541,
            80644507,
            75388709,
            75387337,
            75393475,
            75395701,
            75385540,
            75376125,
            75379564,
            75382546,
            75380901,
            75384917,
            75382324,
            75380657,
            75388115,
            75386567,
            75461008,
            75388223,
            75387064
        ],
        "C": [
            75379279,
            75374912,
            75381565,
            75376079,
            75376451,
            75390556,
            75381440,
            75360964,
            75379654,
            75372629,
            75367460,
            75443397,
            75374056,
            75373762,
            75374173,
            220742361,
            75370741,
            75373514,
            75361682,
            75373297
        ],
        "B": [
            75362106,
            75368513,
            75363431,
            75362706,
            75364291,
            75378289,
            75379661,
            75360912,
            75356953,
            75360775,
            75363811,
            75360857,
            75361079,
            75359545,
            195278107,
            75360634,
            75361090,
            75371429,
            75361221
        ],
        "A": [
            75355521,
            75354244,
            75354217,
            75356116,
            75354591,
            75364896,
            75353923,
            75353902,
            75354562,
            75354818,
            75353692,
            75353618,
            75362319,
            179068881,
            75354934,
            75353839,
            75364875,
            75354143
        ]
    },
    "name": "B. Dreamoon Likes Permutations",
    "statement": "The sequence of m integers is called the if it contains all integers\r\nfrom 1 to m exactly once. The number m is called the length of the\r\npermutation.Dreamoon has two permutations p_1 and p_2 of non-zero\r\nlengths l_1 and l_2.Now Dreamoon concatenates these two permutations\r\ninto another sequence a of length l_1 + l_2. First l_1 elements of a is\r\nthe permutation p_1 and next l_2 elements of a is the permutation p_2.\r\nYou are given the sequence a, and you need to find two permutations p_1\r\nand p_2. If there are several possible ways to restore them, you should\r\nfind all of them. (Note that it is also possible that there will be no\r\nways.)\r\n",
    "solutions": [
        "#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint T,n,a[210000],tot,mx,ans;\nbool vis[210000],ok[210000],ok2[210000];\nint main(){\n\tscanf(\"%d\",&T);\n\twhile (T--){\n\t\tscanf(\"%d\",&n);\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tvis[i]=false;\n\t\t\tok[i]=false; ok2[i]=false;\n\t\t}\n\t\tfor (int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\t\ttot=0; mx=0;\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tif (vis[a[i]]) break;\n\t\t\tvis[a[i]]=true;\n\t\t\ttot++; mx=max(mx,a[i]);\n\t\t\tif (tot==mx) ok[i]=true;\n\t\t}\n\t\tfor (int i=1;i<=n;i++) vis[i]=false;\n\t\ttot=0; mx=0;\n\t\tfor (int i=n;i>=1;i--){\n\t\t\tif (vis[a[i]]) break;\n\t\t\tvis[a[i]]=true;\n\t\t\ttot++; mx=max(mx,a[i]);\n\t\t\tif (tot==mx) ok2[i]=true;\n\t\t}\n\t\tans=0;\n\t\tfor (int i=1;i<n;i++)\n\t\t\tif (ok[i]&&ok2[i+1]) ans++;\n\t\tprintf(\"%d\\n\",ans);\n\t\tfor (int i=1;i<n;i++)\n\t\t\tif (ok[i]&&ok2[i+1]) \n\t\t\t\tprintf(\"%d %d\\n\",i,n-i);\n\t}\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Dreamoon Likes Permutations.json",
    "editorial_link": "https://codeforces.com//blog/entry/75559",
    "editorial": "Let be the maximum value of all elements in . If you can recover the the\r\narray to two permutations abd , then must be . So there are at most two\r\ncase: 1. , 2. . We can check the two cases separately with time\r\ncomplexity . Please see the example code for detail.\r\n",
    "hint": []
}