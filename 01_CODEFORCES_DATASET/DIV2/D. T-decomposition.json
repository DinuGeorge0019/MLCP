{"link": "https://codeforces.com//contest/237/problem/D", "problemId": "2049", "problem_idx": "D", "shortId": "237D", "contest_number": "237", "problem_submissions": {"D": [2433036, 2432295, 2433500, 2432355, 2433903, 2433329, 2434102, 2434333, 2432248, 2432915, 2696259, 2434308], "E": [2431587, 2432589, 2431675, 2431055, 2432864, 2432954, 2431021, 2430681, 2431544, 2429287, 2431020, 2434055, 2432007, 2431656, 2432219, 2432671, 2432758], "C": [2430148, 2430407, 2429504, 2429737, 2429937, 2428700, 2428982, 2428966, 2427820, 2428219, 2429089, 2428238, 2428941, 2428553, 2429636, 2429650], "B": [2429161, 2428110, 2430688, 2429293, 2429097, 2430858, 2428364, 2428379, 2429868, 2430294, 2429444, 2430807, 2429497, 2429431, 2430215, 2428764, 2429093], "A": [2427471, 2426382, 2427215, 2426994, 2428604, 2426466, 2426659, 2426416, 2427387, 2426339, 2427186, 2426639, 2432021, 2427667, 2426349, 2427479]}, "name": "D. T-decomposition", "statement": "You\u2019ve got a undirected tree , consisting of nodes. Your task is to\r\nbuild an optimal T-decomposition for it. Let\u2019s define a T-decomposition\r\nas follows.Let\u2019s denote the set of all nodes as . Let\u2019s consider an\r\nundirected tree , whose nodes are some non-empty subsets of , we\u2019ll call\r\nthem . The tree is a T-decomposition of , if the following conditions\r\nholds: the union of all equals ; for any edge of tree exists the tree\r\nnode , containing both and ; if the nodes of the tree and contain the\r\nnode of the tree , then all nodes of the tree , lying on the path from\r\nto also contain node . So this condition is equivalent to the following:\r\nall nodes of the tree , that contain node of the tree , form a connected\r\nsubtree of tree . There are obviously many distinct trees , that are\r\nT-decompositions of the tree . For example, a T-decomposition is a tree\r\nthat consists of a single node, equal to set .Let\u2019s define the\r\ncardinality of node as the number of nodes in tree , containing in the\r\nnode. Let\u2019s choose the node with the maximum cardinality in . Let\u2019s\r\nassume that its cardinality equals . Then the weight of T-decomposition\r\nis value . The optimal T-decomposition is the one with the minimum\r\nweight.Your task is to find the optimal T-decomposition of the given\r\ntree that has the minimum number of nodes.\r\n", "solutions": ["#include <iostream>\n#include <stdio.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <memory.h>\n#include <cstring>\n#include <string>\n#include <string.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define down(i,b,a) for(int i=b;i>=a;i--)\n#define foredge(e,x) for(edge *e = x->first;e;e = e->next)\ntypedef long long ll;\nstruct point;struct edge;\nconst int maxn = 100000,geps = 1;\nstruct point{\n\tedge *first;\n}points[maxn+geps];\nstruct edge{\n\tedge *next;\n\tpoint *to;\n\tint ind;\n}edges[maxn*2+geps];int edgenum = -1;\nint a[maxn+geps],b[maxn+geps];\nvoid addedge(int _x,int _y,int ind){\n\tpoint *x = points+_x,*y = points+_y;\n\tedge *e = edges+(++edgenum);\n\te->ind = ind,e->to = y,e->next = x->first,x->first = e;\n}\nint n;\nvoid Init(){\n\tscanf(\"%d\",&n);\n\tint x,y;\n\trep(i,1,n-1){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\taddedge(x,y,i),addedge(y,x,i);\n\t\ta[i] = x,b[i] = y;\n\t}\n}\n\nvoid print(point *x){\n\tforedge(e,x)\n\t\tif(e->next) printf(\"%d %d\\n\",e->ind,e->next->ind);\n}\nvoid solve(){\n\tprintf(\"%d\\n\",n-1);\n\trep(i,1,n-1) printf(\"2 %d %d\\n\",a[i],b[i]);\n\trep(i,1,n) print(points+i);\n}\n\nint main(){\n\tInit();\n\tsolve();\n\t//system(\"pause\");\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["dfs and similar", "graphs", "greedy", "trees"], "dificulty": "2000", "interactive": false}