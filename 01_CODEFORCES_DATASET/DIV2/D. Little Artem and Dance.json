{
    "link": "https://codeforces.com//contest/669/problem/D",
    "problemId": "57068",
    "problem_idx": "D",
    "shortId": "669D",
    "contest_number": "669",
    "problem_submissions": {
        "E": [
            17491512,
            17491017,
            19750171,
            17501056,
            17493518,
            17492061,
            17493713,
            17493393,
            17493817,
            17492979,
            17493371,
            17493114,
            17495492,
            17494782,
            17494292,
            17495191,
            17493974,
            17493836,
            17494124
        ],
        "D": [
            17488668,
            17488489,
            17486897,
            17489357,
            17489309,
            17489532,
            17490586,
            17488952,
            17490577,
            17490565,
            17488280,
            17489742,
            18583027,
            18583013,
            17490428,
            17487352,
            17490248,
            17491103,
            17491769
        ],
        "C": [
            17485441,
            17485907,
            17484920,
            17487516,
            17486088,
            17486618,
            17486621,
            17484945,
            17488083,
            17486963,
            17486429,
            17487871,
            17486801,
            17486397,
            17488132,
            17485146,
            17486999
        ],
        "B": [
            17482906,
            17484441,
            17482918,
            17484173,
            17483561,
            17483294,
            17484370,
            17485567,
            17486297,
            17482984,
            17483079,
            17484306,
            17484088,
            17483002,
            17484517,
            17483240,
            17484521
        ],
        "A": [
            17481725,
            17483043,
            17482128,
            17482178,
            17481873,
            17482008,
            17481996,
            17485818,
            17482048,
            17481645,
            17481657,
            17481965,
            17482978,
            17481666,
            17483249,
            17481910,
            17482894
        ]
    },
    "name": "D. Little Artem and Dance",
    "statement": "Little Artem is fond of dancing. Most of all dances Artem likes rueda\r\nCuban dance that is danced by pairs of boys and girls forming a circle\r\nand dancing together.More detailed, there are pairs of boys and girls\r\nstanding in a circle. Initially, boy number dances with a girl number ,\r\nboy number dances with a girl number and so on. Girls are numbered in\r\nthe clockwise order. During the dance different moves are announced and\r\nall pairs perform this moves. While performing moves boys move along the\r\ncircle, while girls always stay at their initial position. For the\r\npurpose of this problem we consider two different types of moves: Value\r\nand some direction are announced, and all boys move positions in the\r\ncorresponding direction. Boys dancing with even-indexed girls swap\r\npositions with boys who are dancing with odd-indexed girls. That is the\r\none who was dancing with the girl swaps with the one who was dancing\r\nwith the girl number , while the one who was dancing with girl number\r\nswaps with the one who was dancing with the girl number and so one. Itâ€™s\r\nguaranteed that is even. Your task is to determine the final position of\r\neach boy.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define REP(i, n) for(int i = 0;i < n;++i)\n#define FOR(i, a, b) for(int i = a;i < b;++i)\n#define pb push_back\n#define X first\n#define Y second\nusing namespace std;\ntypedef long long int ll;\ntypedef pair<int, int> ii;\nconst int MAX = 1 << 20;\nint n, q;\nint shiftp, shiftn;\nint out[MAX];\n\nint main() {\n\tscanf(\"%d %d\", &n, &q);\n\tint curp = 0;\n\tint curn = 1;\n\tREP(i, q) {\n\t\tint t;\n\t\tscanf(\"%d\", &t);\n\t\tif(t == 1) {\n\t\t\tint x;\n\t\t\tscanf(\"%d\", &x);\n\t\t\tshiftp += x;\n\t\t\tshiftn += x;\n\t\t\tif(x % 2) {\n\t\t\t\tcurp = !curp;\n\t\t\t\tcurn = !curn;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(curp) --shiftp;\n\t\t\telse ++shiftp;\n\t\t\tif(curn) --shiftn;\n\t\t\telse ++shiftn;\n\t\t\tcurp = !curp;\n\t\t\tcurn = !curn;\n\t\t}\n\t\tshiftp %= n;\n\t\tshiftn %= n;\n\t}\n\tREP(i, n) {\n\t\tint pos = i;\n\t\tif(i % 2) pos += shiftn;\n\t\telse pos += shiftp;\n\t\tout[(pos + n) % n] = i + 1;\n\t}\n\tREP(i, n) printf(\"%d \", out[i]);\n\tprintf(\"\\n\");\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "implementation",
        "math"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Little Artem and Dance.json",
    "editorial_link": "https://codeforces.com//blog/entry/44538",
    "editorial": "The key in this problem is that order of all elements in odd positions and in even positions is the same. Let's say we have 2 arrays: [1, 3, 5, ...] and [2, 4, ...] (odd positions and even positions). Now if we call 2nd commands we just swap these 2 arrays, but order is the same. Obviously 1st command also keeps the order. By order I mean cyclic order (right neighbor is the same in cycle position).\n\nLet's just keep the position of 1st boy and 2nd boy. Now if we apply 1st operation we move it by X or -X. Second type of the query just swaps the positions. In the end we can construct the answer if we know positions of 1st and 2nd boys.",
    "hint": []
}