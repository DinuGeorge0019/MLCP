{"link": "https://codeforces.com//contest/168/problem/B", "problemId": "1056", "problem_idx": "B", "shortId": "168B", "contest_number": "168", "problem_submissions": {"B": [1428836, 1427139, 1426253, 1427986, 1430335, 1427853, 1424590, 1424980, 1424310], "D": [1426871, 1430554, 1429305, 1431245, 1429653, 1430817, 1430384, 1431850, 30408057], "C": [1425388, 1426092, 1431178, 1426649, 1431983, 1430173, 1426526, 1428307, 1425447, 1426498, 1426931], "A": [1423734, 1423629, 1423811, 1423781, 1424797, 1423644, 1423482, 1423449, 1423414, 1423417, 1423345], "E": [1436307]}, "name": "B. Wizards and Minimal Spell", "statement": "Let\u2019s dive into one of the most interesting areas of magic writing\r\nspells. Learning this exciting but challenging science is very\r\ntroublesome, so now you will not learn the magic words, but only get to\r\nknow the basic rules of writing spells.Each spell consists of several\r\nlines. The line, whose first non-space character is character \"\" is an\r\nand it is responsible for spell power. The remaining lines are common,\r\nand determine the effect of the spell.You came across the text of some\r\nspell. Spell was too long, so you cannot understand its meaning. So you\r\nwant to make it as short as possible without changing the meaning.The\r\nonly way to shorten a spell that you know is the removal of some spaces\r\nand line breaks. We know that when it comes to texts of spells, the\r\nspaces carry meaning only in the amplifying lines, so we should remove\r\nall spaces in other lines. Newlines also do not matter, unless any of\r\nthe two separated lines is amplifying. Thus, if two consecutive lines\r\nare not amplifying, they need to be joined into one (i.e. we should\r\nconcatenate the second line to the first one). Removing spaces in\r\namplifying lines and concatenating the amplifying lines to anything is\r\nforbidden.Note that empty lines must be processed just like all the\r\nothers: they must be joined to the adjacent non-amplifying lines, or\r\npreserved in the output, if they are surrounded with amplifying lines on\r\nboth sides (i.e. the line above it, if there is one, is amplifying, and\r\nthe line below it, if there is one, is amplifying too).For now those are\r\nthe only instructions for removing unnecessary characters that you have\r\nto follow (oh yes, a newline is a character, too).The input contains the\r\ntext of the spell, which should be reduced. Remove the extra characters\r\nand print the result to the output.\r\n", "solutions": ["#include<iostream>\n#include<string>\n#include<cstring>\n#include<cstdio>\n\nusing namespace std;\n\nint main() {\n\tstring keluar = \"\",s;\n\tbool last = false;\n\twhile (getline(cin,s)) {\n\t\tbool temu = false;\n\t\tfor (int i=0;i<s.length();++i) {\n\t\t\tif (s[i] != ' ') {\n\t\t\t\ttemu = (s[i] == '#');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (temu) {\n\t\t\tif (last) cout<<keluar<<endl;\n\t\t\tkeluar = \"\";\n\t\t\tcout<<s<<endl;\n\t\t\tlast = false;\n\t\t} else {\n\t\t\tlast = true;\n\t\t\tstring hasil = \"\";\n\t\t\tfor (int i=0;i<s.length();++i) {\n\t\t\t\tif (s[i] != ' ') hasil += s[i];\n\t\t\t}\n\t\t\tkeluar += hasil;\n\t\t}\n\t\t\n\t}\n\t\n\tif (last) cout<<keluar<<endl;\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["implementation", "strings"], "dificulty": "1700", "interactive": false}