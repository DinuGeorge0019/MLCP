{
    "link": "https://codeforces.com//contest/1087/problem/A",
    "problemId": "273645",
    "problem_idx": "A",
    "shortId": "1087A",
    "contest_number": "1087",
    "problem_submissions": {
        "E": [
            58252522,
            47419404,
            47425055,
            47427281,
            47427199,
            47427772,
            47427175,
            47429424,
            47427691,
            47428203,
            47426678,
            47429553,
            47424066,
            47442342,
            47431388
        ],
        "F": [
            47420077,
            47423866,
            47885139,
            47468746,
            47429059,
            47443089
        ],
        "D": [
            47418729,
            47408054,
            47412096,
            47414267,
            47413772,
            47414393,
            47411787,
            47412026,
            47410837,
            47416228,
            47416942,
            47404060,
            47424226,
            47415168,
            47411121,
            47421101,
            47407066,
            47410268,
            47411462,
            47409719
        ],
        "C": [
            47405054,
            47411233,
            47407822,
            47412155,
            47406359,
            47410875,
            47413841,
            47406249,
            47409638,
            47412893,
            47414989,
            47429784,
            47418255,
            47431334,
            47431242,
            47407433,
            47430615,
            47412255,
            47405671,
            47407818,
            47406818
        ],
        "B": [
            47401231,
            47412385,
            47401723,
            47403755,
            47401975,
            47403962,
            47406414,
            47402530,
            47402488,
            47401578,
            47406978,
            47400393,
            47407454,
            47402895,
            47400789,
            47403406,
            47402600,
            47400687,
            47402493,
            47402234
        ],
        "A": [
            47400159,
            47405287,
            47400196,
            47400342,
            47400796,
            47401502,
            47401673,
            47400758,
            47400490,
            47400180,
            47403017,
            47409819,
            47408382,
            47400648,
            47400053,
            47400839,
            47400496,
            47400902,
            47400447,
            47400696
        ]
    },
    "name": "A. Right-Left Cipher",
    "statement": "Polycarp loves ciphers. He has invented his own cipher called\r\nRight-Left.Right-Left cipher is used for strings. To encrypt the string\r\ns=s_{1}s_{2}\r\ndots s_{n} Polycarp uses the following algorithm: he writes down s_1, he\r\nappends the current word with s_2 (i.e. writes down s_2 to the right of\r\nthe current result), he prepends the current word with s_3 (i.e. writes\r\ndown s_3 to the left of the current result), he appends the current word\r\nwith s_4 (i.e. writes down s_4 to the right of the current result), he\r\nprepends the current word with s_5 (i.e. writes down s_5 to the left of\r\nthe current result), and so on for each position until the end of s. For\r\nexample, if s=\"\" the process is: \"\"\r\nto \"\"\r\nto \"\"\r\nto \"\"\r\nto \"\"\r\nto \"\". So the encrypted s=\"\" is \"\".Given string t the result of\r\nencryption of some string s. Your task is to decrypt it, i.e. find the\r\nstring s.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define ff first\n#define ss second\n#define all(X) begin(X), end(X)\nvector<vector<int>>dp,s;\nvector<int>x,sum;\nsigned main(){\n\tstring s,t = \"\";\n\tcin >> s;\n\tint n = s.size(),l = 0, r = n-1;\n\tfor(int i = 0; i < n; i++){\n\t\tif(n%2 == i%2)t += s[r--];\n\t\telse t += s[l++];\n\t}\n\treverse(all(t));\n\tcout << t << endl;\n} \n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Right-Left Cipher.json",
    "editorial_link": "https://codeforces.com//blog/entry/64078",
    "editorial": "You can simulate the process, maintaining the indices of characters of\r\nthe initial string. So, like this you can find the value of character of\r\nthe initial string.\r\n"
}