{
    "link": "https://codeforces.com//contest/777/problem/C",
    "problemId": "95271",
    "problem_idx": "C",
    "shortId": "777C",
    "contest_number": "777",
    "problem_submissions": {
        "A": [
            24966990,
            24969452,
            24968363,
            24961059,
            24970780,
            24961457,
            24961212,
            24964368,
            24961021,
            24961075,
            24961276,
            24968207,
            24961160,
            24961145,
            24961597,
            24961088,
            24961260,
            24961357,
            24961505
        ],
        "E": [
            24964879,
            24966304,
            24963804,
            24968582,
            24963318,
            24970420,
            24969486,
            24969542,
            24970873,
            24970390,
            24974213,
            24970580,
            24968519,
            24973982,
            24970975,
            24971187,
            24963290,
            24970842,
            24971523
        ],
        "B": [
            24964009,
            24967778,
            24967683,
            24963456,
            24969920,
            24963117,
            24963334,
            24963518,
            24962640,
            24962082,
            24964002,
            24966808,
            24963703,
            24964670,
            24963319,
            24962925,
            24965213,
            24963141,
            24964096
        ],
        "D": [
            24963351,
            24963866,
            24965089,
            24966596,
            24965947,
            24966910,
            24968904,
            24967595,
            24967923,
            24969584,
            24969186,
            24965258,
            24970085,
            24968109,
            24969127,
            24967832,
            24973541,
            24967166,
            24969092
        ],
        "C": [
            24962594,
            24962120,
            24965927,
            24965332,
            24967533,
            24965029,
            24965533,
            24961512,
            24966207,
            24962969,
            24966524,
            24962408,
            24965583,
            24963130,
            24965668,
            24964725,
            24967206,
            24965425,
            24966427
        ]
    },
    "name": "C. Alyona and Spreadsheet",
    "statement": "During the lesson small girl Alyona works with one famous spreadsheet\r\ncomputer program and learns how to edit tables.Now she has a table\r\nfilled with integers. The table consists of rows and columns. By we will\r\ndenote the integer located at the -th row and the -th column. We say\r\nthat the table is sorted in non-decreasing order in the column if for\r\nall from to .Teacher gave Alyona tasks. For each of the tasks two\r\nintegers and are given and Alyona has to answer the following question:\r\nif one keeps the rows from to inclusive and deletes all others, will the\r\ntable be sorted in non-decreasing order in at least one column?\r\nFormally, does there exist such that for all from to inclusive.Alyona is\r\ntoo small to deal with this task and asks you to help!\r\n",
    "solutions": [
        "#include <set>\n#include <map>\n#include <queue>\n#include <ctime>\n#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <cctype>\n#include <bitset>\n#include <cstring>\n#include <cstdlib>\n#include <utility>\n#include <iostream>\n#include <algorithm>\n#define REP(i,a,b) for(int i=(a);i<=(b);i++)\n#define PER(i,a,b) for(int i=(a);i>=(b);i--)\n#define RVC(i,S) for(int i=0;i<(S).size();i++)\n#define RAL(i,u) for(int i=fr[u];i!=-1;i=e[i].next)\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int,int> pii;\n     \ntemplate<class T> inline\nvoid read(T& num) {\n    bool start=false,neg=false;\n    char c;\n    num=0;\n    while((c=getchar())!=EOF) {\n        if(c=='-') start=neg=true;\n        else if(c>='0' && c<='9') {\n            start=true;\n            num=num*10+c-'0';\n        } else if(start) break;\n    }\n    if(neg) num=-num;\n}\n/*============ Header Template ============*/\n\nconst int maxn=(int)(1e5)+5;\nvector<int> a[maxn];\nint mi[maxn];\nint tmp[maxn];\n\nint main() {\n    int n,m;\n    read(n);read(m);\n    REP(i,1,n) {\n        a[i].push_back(0);\n        REP(j,1,m) {\n            int x;\n            read(x);\n            a[i].push_back(x);\n        }\n    }\n    int q;\n    read(q);\n    memset(mi,0x3f,sizeof(mi));\n    REP(j,1,m) {\n        int lst=1;\n        tmp[1]=1;\n        REP(i,2,n) {\n            if(a[i][j]<a[i-1][j]) lst=i;\n            tmp[i]=lst;\n        }\n        REP(i,1,n) mi[i]=min(mi[i],tmp[i]);\n    }\n    REP(i,1,q) {\n        int l,r;\n        read(l);read(r);\n        if(mi[r]<=l) {\n            printf(\"Yes\\n\");\n        } else {\n            printf(\"No\\n\");\n        }\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "dp",
        "greedy",
        "implementation",
        "two pointers"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Alyona and Spreadsheet.json",
    "editorial_link": "https://codeforces.com//blog/entry/50670",
    "editorial": "For each cell compute value equal to maximum , such that table is\r\nnon-decreasing in row if we keep only rows from to inclusive. This\r\nvalues can be computed in time using the following formulas: , if and ;\r\notherwise. To process the query we have to check whether there exists\r\nsuch that . We will answer this questions using by precomputing maximum\r\nvalues in each row .\r\n"
}