{"link": "https://codeforces.com//contest/1379/problem/D", "problemId": "676892", "problem_idx": "D", "shortId": "1379D", "contest_number": "1379", "problem_submissions": {"F2": [87337334], "F1": [87335742, 87339101, 87337260, 87346349, 87331786], "C": [87325904, 87311494, 87310672, 87300625, 87303708, 87304495, 87303918, 144460845, 87308563, 87299896, 87303811, 87316171, 87303179, 87308051, 87311612, 87310601, 87310579, 87310057, 87313129, 87307968, 87308536], "D": [87320979, 87326317, 87326054, 87310243, 87318999, 87323134, 87327442, 144461795, 87328150, 87328279, 87321031, 87333849, 87337374, 87336880, 87336733, 87324819, 87323673, 87326632, 87332039, 87324509], "B": [87292569, 87299875, 87297218, 87294683, 87294536, 87293871, 87299681, 144459626, 87295308, 87293115, 87290952, 87296663, 87291474, 87295427, 87292476, 87294398, 87295480, 87294133, 87302755, 87296827, 87299220], "A": [87289516, 87291821, 87290680, 87291117, 87290110, 87290710, 87290018, 144458741, 87289978, 87290066, 87289499, 87289644, 87295538, 87290013, 87289641, 87289754, 87291674, 87304051, 87290874, 87292316, 87291880]}, "name": "D. New Passenger Trams", "statement": "There are many freight trains departing from Kirnes planet every day.\r\nOne day on that planet consists of h hours, and each hour consists of m\r\nminutes, where m is an even number. Currently, there are n freight\r\ntrains, and they depart every day at the same time: i-th train departs\r\nat h_i hours and m_i minutes.The government decided to add passenger\r\ntrams as well: they plan to add a regular tram service with half-hour\r\nintervals. It means that the first tram of the day must depart at 0\r\nhours and t minutes, where 0\r\nle t < {m\r\nover 2}, the second tram departs m\r\nover 2 minutes after the first one and so on. This schedule allows\r\nexactly two passenger trams per hour, which is a great improvement.To\r\nallow passengers to board the tram safely, the tram must arrive k\r\nminutes before. During the time when passengers are boarding the tram,\r\nno freight train can depart from the planet. However, freight trains are\r\nallowed to depart at the very moment when the boarding starts, as well\r\nas at the moment when the passenger tram departs. Note that, if the\r\nfirst passenger tram departs at 0 hours and t minutes, where t < k, then\r\nthe freight trains can not depart during the last k - t minutes of the\r\nday. Unfortunately, it might not be possible to satisfy the requirements\r\nof the government without canceling some of the freight trains. Please\r\nhelp the government find the optimal value of t to minimize the number\r\nof canceled freight trains in case all passenger trams depart according\r\nto schedule.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define int long long\n\nsigned main() {\n\tint n, h, m, k;\n\tcin >> n >> h >> m >> k;\n\n\tvector<int> tm(n);\n\tfor(int i = 0; i < n; i++) {\n\t\tint hh, mm;\n\t\tcin >> hh >> mm;\n\t\ttm[i] = (hh * m + mm) % (m / 2);\n\t}\n\n\tvector<int> sorted = tm;\n\tsort(sorted.begin(), sorted.end());\n\n\tint ans = 1000000000LL;\n\tint bestt = 0;\n\n\tfor(int i = 0; i < sorted.size(); i++) {\n\t\tif(sorted[i] + k < m / 2) {\n\t\t\tint j = lower_bound(sorted.begin(), sorted.end(), sorted[i] + k) - sorted.begin();\n\t\t\tint cnt = j - i - 1;\n\t\t\tif(cnt < ans) {\n\t\t\t\tans = cnt;\n\t\t\t\tbestt = sorted[i];\n\t\t\t}\n\t\t} else {\n\t\t\tint j = lower_bound(sorted.begin(), sorted.end(), sorted[i] + k - m / 2) - sorted.begin();\n\t\t\tint cnt = (int)sorted.size() - i + j - 1;\n\t\t\tif(cnt < ans) {\n\t\t\t\tans = cnt;\n\t\t\t\tbestt = sorted[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tcout << ans << \" \" << (bestt + k) % (m / 2) << endl;\n\n\tint t = bestt;\n\tint cnt = 0;\n\tfor(int j = 0; j < tm.size(); j++) {\n\t\tint x = tm[j];\n\t\tif(t + k > m / 2) {\n\t\t\tif(x > t || x < t + k - m / 2) {\n\t\t\t\tcout << j + 1 << \" \";\n\t\t\t}\n\t\t} else {\n\t\t\tif(x > t && x < t + k) {\n\t\t\t\tcout << j + 1 << \" \";\n\t\t\t}\n\t\t}\n\t}\n\tcout << endl;\n\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["binary search", "brute force", "data structures", "sortings", "two pointers"], "dificulty": "2300", "interactive": false}