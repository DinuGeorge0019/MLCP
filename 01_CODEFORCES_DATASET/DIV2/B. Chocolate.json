{
    "link": "https://codeforces.com//contest/617/problem/B",
    "problemId": "46104",
    "problem_idx": "B",
    "shortId": "617B",
    "contest_number": "617",
    "problem_submissions": {
        "B": [
            15525292,
            15520241,
            15520782,
            15519093,
            15520541,
            15518993,
            15520816,
            15520328,
            15522323,
            15519740,
            15519199,
            15519236,
            15522269,
            15520061,
            15520921,
            15520553,
            15521134
        ],
        "E": [
            15524504,
            15533637,
            15536969,
            15529659,
            15535325,
            15529489,
            15527806,
            15532273,
            19715009,
            15542654,
            15534610,
            15534856,
            53538378,
            15532458
        ],
        "D": [
            15522122,
            15524102,
            15527458,
            15532675,
            15531424,
            15537486,
            15523234,
            15528078,
            15529838,
            15539257,
            15526873,
            15536074,
            15530391,
            15531537,
            15525866,
            15527771,
            15525195,
            15535593
        ],
        "A": [
            15518850,
            15516543,
            15516542,
            15517397,
            15516883,
            15518022,
            15517052,
            15517168,
            15516689,
            15517881,
            15517750,
            15516596,
            15516595,
            15516666,
            15516591,
            15517486,
            15517447,
            15518711
        ],
        "C": [
            15527346,
            15535776,
            15522904,
            15520819,
            15525590,
            15541637,
            15525965,
            15525876,
            15534504,
            15523565,
            15522950,
            15532930,
            15526671,
            15524426,
            15522962,
            15532766
        ]
    },
    "name": "B. Chocolate",
    "statement": "Bob loves everything sweet. His favorite chocolate bar consists of\r\npieces, each piece may contain a nut. Bob wants to break the bar of\r\nchocolate into multiple pieces so that each part would contain one nut\r\nand any break line goes between two adjacent pieces.You are asked to\r\ncalculate the number of ways he can do it. Two ways to break chocolate\r\nare considered distinct if one of them contains a break between some two\r\nadjacent pieces and the other one doesn\u2019t. Please note, that if Bob\r\ndoesn\u2019t make any breaks, all the bar will form one piece and it still\r\nhas to have exactly one nut.\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<iostream>\n#include<vector>\n#include<cmath>\n#include<algorithm>\n#include<memory.h>\n#include<map>\n#include<set>\n#include<queue>\n#include<list>\n#include<sstream>\n#include<cstring>\n#define mp make_pair\n#define pb push_back      \n#define F first\n#define S second\n#define SS stringstream\n#define sqr(x) ((x)*(x))\n#define m0(x) memset(x,0,sizeof(x))\n#define m1(x) memset(x,63,sizeof(x))\n#define CC(x) cout << (x) << endl\n#define pw(x) (1ll<<(x))\n#define buli(x) __builtin_popcountll(x)\n#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)\n#define M 1000000007\n#define N 222\n\n#define TASK \"1\"\n\nusing namespace std;\ntypedef pair<int,int> pt;\n\nlong long dp[N];\nint a[N];\n\nint main(){\n//  freopen(TASK\".in\",\"r\",stdin);   \n//  freopen(TASK\".out\",\"w\",stdout);\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) cin >> a[i];\n    dp[0] = 1;\n    for (int i = 1; i <= n; i++) {\n        int s = 0;\n        for (int j = i - 1; j >= 0; j--) {\n            s += a[j];\n            if (s == 1) {\n                dp[i] += dp[j];\n            }\n        }\n    }\n    cout << dp[n] << endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Chocolate.json",
    "editorial_link": "https://codeforces.com//blog/entry/22971",
    "editorial": "We are given array which contains only ones and zeroes. We must divide\r\nit on parts with only one 1. Tricky case: when array contains only\r\nzeroes answer equals to 0. In general. Between two adjacent ones we must\r\nhave only one separation. So, answer equals to product of values where\r\nis position of i-th one. Bonus: what\u00e2\u0080\u0099s the maximal possible answer for ?\r\nSolution 15550806\r\n"
}