{
    "link": "https://codeforces.com//contest/777/problem/A",
    "problemId": "95269",
    "problem_idx": "A",
    "shortId": "777A",
    "contest_number": "777",
    "problem_submissions": {
        "A": [
            24966990,
            24969452,
            24968363,
            24961059,
            24970780,
            24961457,
            24961212,
            24964368,
            24961021,
            24961075,
            24961276,
            24968207,
            24961160,
            24961145,
            24961597,
            24961088,
            24961260,
            24961357,
            24961505
        ],
        "E": [
            24964879,
            24966304,
            24963804,
            24968582,
            24963318,
            24970420,
            24969486,
            24969542,
            24970873,
            24970390,
            24974213,
            24970580,
            24968519,
            24973982,
            24970975,
            24971187,
            24963290,
            24970842,
            24971523
        ],
        "B": [
            24964009,
            24967778,
            24967683,
            24963456,
            24969920,
            24963117,
            24963334,
            24963518,
            24962640,
            24962082,
            24964002,
            24966808,
            24963703,
            24964670,
            24963319,
            24962925,
            24965213,
            24963141,
            24964096
        ],
        "D": [
            24963351,
            24963866,
            24965089,
            24966596,
            24965947,
            24966910,
            24968904,
            24967595,
            24967923,
            24969584,
            24969186,
            24965258,
            24970085,
            24968109,
            24969127,
            24967832,
            24973541,
            24967166,
            24969092
        ],
        "C": [
            24962594,
            24962120,
            24965927,
            24965332,
            24967533,
            24965029,
            24965533,
            24961512,
            24966207,
            24962969,
            24966524,
            24962408,
            24965583,
            24963130,
            24965668,
            24964725,
            24967206,
            24965425,
            24966427
        ]
    },
    "name": "A. Shell Game",
    "statement": "Bomboslav likes to look out of the window in his room and watch lads\r\noutside playing famous shell game. The game is played by two persons:\r\noperator and player. Operator takes three similar opaque shells and\r\nplaces a ball beneath one of them. Then he shuffles the shells by\r\nswapping some pairs and the player has to guess the current position of\r\nthe ball.Bomboslav noticed that guys are not very inventive, so the\r\noperator always swaps the left shell with the middle one during odd\r\nmoves (first, third, fifth, etc.) and always swaps the middle shell with\r\nthe right one during even moves (second, fourth, etc.).Letâ€™s number\r\nshells from to from left to right. Thus the left shell is assigned\r\nnumber , the middle shell is and the right shell is . Bomboslav has\r\nmissed the moment when the ball was placed beneath the shell, but he\r\nknows that exactly movements were made by the operator and the ball was\r\nunder shell at the end. Now he wonders, what was the initial position of\r\nthe ball?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define REP(i, a, b) for (register int i = a; i <= b; ++i)\n#define PER(i, a, b) for (register int i = a; i >= b; --i)\n#define RVC(i, S) for (int i = 0; i < S.size(); ++i)\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define debug(...) fprintf(stderr, __VA_ARGS__)\nusing namespace std;\n\ntypedef long long LL;\ntypedef vector<int> VI;\ntypedef pair<int, int> pii;\n\ninline LL read() {\n\tLL x = 0; int ch = getchar(), f = 1;\n\twhile (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}\n\twhile (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n\treturn x * f;\n}\n\nint main(){\n\tLL n = read() % 6;\n\tLL x = read();\n\tif (n == 1 && x == 1) cout << 0;\n\tif (n == 2 && x == 2) cout << 0;\n\tif (n == 3 && x == 2) cout << 0;\n\tif (n == 4 && x == 1) cout << 0;\n\tif (n == 5 && x == 0) cout << 0;\n\tif (n == 0 && x == 0) cout << 0;\n\n\tif (n == 1 && x == 0) cout << 1;\n\tif (n == 2 && x == 0) cout << 1;\n\tif (n == 3 && x == 1) cout << 1;\n\tif (n == 4 && x == 2) cout << 1;\n\tif (n == 5 && x == 2) cout << 1;\n\tif (n == 0 && x == 1) cout << 1;\n\t\n\tif (n == 1 && x == 2) cout << 2;\n\tif (n == 2 && x == 1) cout << 2;\n\tif (n == 3 && x == 0) cout << 2;\n\tif (n == 4 && x == 0) cout << 2;\n\tif (n == 5 && x == 1) cout << 2;\n\tif (n == 0 && x == 2) cout << 2;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation",
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Shell Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/50670",
    "editorial": "Fix the initial numeration of shells. Consider function to be the index\r\nof the shell located at position after moves. Thus, after movements all\r\nshells will get back to initial positions. To solve the problem we need\r\nto take modulo and simulate that number of moves.\r\n",
    "hint": []
}