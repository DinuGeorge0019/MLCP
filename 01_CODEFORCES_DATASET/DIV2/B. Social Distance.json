{
    "link": "https://codeforces.com//contest/1668/problem/B",
    "problemId": "1373075",
    "problem_idx": "B",
    "shortId": "1668B",
    "contest_number": "1668",
    "problem_submissions": {
        "E": [
            154123739,
            154125336,
            154119851,
            154113083,
            154126230,
            154111025,
            154118734,
            154118893,
            154116518
        ],
        "D": [
            154102065,
            154111480,
            154109461,
            154112828,
            154127256,
            154120568,
            154199100,
            154098507,
            154101292,
            154104775,
            154103929,
            154095552,
            154104771,
            154104638
        ],
        "C": [
            154084164,
            154089822,
            154082750,
            154086924,
            154096669,
            154097603,
            154087733,
            154089704,
            154084845,
            154091220,
            154093921,
            154082051,
            154082528,
            154089420,
            154085834,
            154089820,
            154100489,
            154080049,
            154081283
        ],
        "B": [
            154081285,
            154084224,
            154085663,
            154082020,
            154152941,
            154084489,
            154090124,
            154084331,
            154085985,
            154081983,
            154085223,
            154085348,
            154095598,
            154087105,
            154085147,
            154082318,
            154081788,
            154081908,
            154090843,
            154084167
        ],
        "A": [
            154079113,
            154080383,
            154079244,
            154078891,
            154152929,
            154079977,
            154085842,
            154079717,
            154081051,
            154079292,
            154081689,
            154080381,
            154089065,
            154090204,
            154080866,
            154080201,
            154079483,
            154080405,
            154087751,
            154079358
        ],
        "F": [
            154125193,
            154162167,
            154110277,
            154120657
        ]
    },
    "name": "B. Social Distance",
    "statement": "m chairs are arranged in a circle sequentially. The chairs are numbered\r\nfrom 0 to m-1. n people want to sit in these chairs. The i-th of them\r\nwants at least a[i] empty chairs both on his right and left side. More\r\nformally, if the i-th person sits in the j-th chair, then no one else\r\nshould sit in the following chairs: (j-a[i])\r\nbmod m, (j-a[i]+1)\r\nbmod m, ... (j+a[i]-1)\r\nbmod m, (j+a[i])\r\nbmod m.Decide if it is possible to sit down for all of them, under the\r\ngiven limitations.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n \nll i,j,k,n,m,t,a[1005000];\n\nint main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0);cout.tie(0);\n\tcin>>t;\n\twhile(t--){\n\t\tcin>>n>>m;\n\t\tm-=n;\n\t\tfor(i=1;i<=n;i++){\n\t\t\tcin>>a[i];\n\t\t\tm-=a[i];\n\t\t}\n\t\tsort(a+1,a+n+1);\n\t\tm-=a[n];\n\t\tm+=a[1];\n\t\tcout<<((m<0)?\"No\":\"Yes\")<<'\\n';\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Social Distance.json",
    "editorial_link": "https://codeforces.com//blog/entry/102013",
    "editorial": "SolutionIf there is no one between the -th and -th person then free\r\nchairs should be between them.So we should find a permutation of the\r\narray , when is minimal.We can assume that the array is non-decreasing\r\n(). For each () the largest elements from ( ... ) will appear in the\r\nformula at least times. Every element occurs in two segments, and we\r\nonly can count segments twice. So we get a lower bound for the number of\r\nfree chairs: .This lower bound is reachable for the empty chairs if the\r\npermutation of is sorted. Because , , ... , and .They also sit on\r\nchairs. If we add all of these, we get that the answer is YES if: .\r\n(={})\r\n"
}