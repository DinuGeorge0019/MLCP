{"link": "https://codeforces.com//contest/1075/problem/B", "problemId": "249093", "problem_idx": "B", "shortId": "1075B", "contest_number": "1075", "problem_submissions": {"E": [45299888, 45297843, 45298056, 45296633, 45301081, 45300957, 45302422, 45302929, 45304409, 45302659, 45300790, 45303365, 45303877, 45302733], "F": [45298415, 45299656, 45299363, 45302076, 45302275, 45461749, 45308311], "D": [45294336, 45295894, 45295657, 45296846, 45300767, 45296827, 45297943, 45298533, 45298945, 45296351, 45298646, 45300089, 45299323, 45303594, 45300962, 45300486, 45300898], "C": [45292132, 45292865, 45293959, 45292758, 45292492, 45294033, 45294912, 45294846, 45293224, 45293567, 45294312, 45292544, 45295364, 45296384, 45295997, 45298611, 45297798], "B": [45290077, 45290576, 45289458, 45290287, 45290460, 106466381, 45291592, 45291593, 45291426, 45290169, 45291447, 45291908, 45290506, 45291957, 45290127, 45292064, 45294213, 45290472], "A": [45288469, 45288515, 45288420, 45288453, 45288440, 45288973, 45289044, 45288964, 45288524, 45289234, 45289586, 45288591, 45289499, 45288557, 45289581, 45288705, 45288541]}, "name": "B. Taxi drivers and Lyft", "statement": "Palo Alto is an unusual city because it is an endless coordinate line.\r\nIt is also known for the office of Lyft Level 5.Lyft has become so\r\npopular so that it is now used by all m taxi drivers in the city, who\r\nevery day transport the rest of the city residents n riders.Each\r\nresident (including taxi drivers) of Palo-Alto lives in its unique\r\nlocation (there is no such pair of residents that their coordinates are\r\nthe same).The Lyft system is very clever: when a rider calls a taxi, his\r\ncall does not go to all taxi drivers, but only to the one that is the\r\nclosest to that person. If there are multiple ones with the same\r\ndistance, then to taxi driver with a smaller coordinate is selected.But\r\none morning the taxi drivers wondered: how many riders are there that\r\nwould call the given taxi driver if they were the first to order a taxi\r\non that day? In other words, you need to find for each taxi driver i the\r\nnumber a_{i} the number of riders that would call the i-th taxi driver\r\nwhen all drivers and riders are at their home?The taxi driver can\r\nneither transport himself nor other taxi drivers.\r\n", "solutions": ["#include <bits/stdc++.h>\n\n#define szv(V) ((int)(V).size())\n#define allv(V) ((V).begin(), ((V).end()))\n#define sortv(V) sort(allv(V))\n#define uniquev(V) (V).erase(unique(allv(V)), (V).end())\n#define compv(V) sortv(V), uniquev(V)\n#define fs first\n#define se second\n#define pb push_back\n#define eb emplace_back\n\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\nconst int mod = 1e9 + 7;\nconst ll inf = 4e18 + 5;\n\nll gcd(ll x, ll y) { while (y) x %= y, swap(x, y); return x; }\npll operator+(pll a, pll b) { return pll(a.fs + b.fs, a.se + b.se); }\npll operator-(pll a, pll b) { return pll(a.fs - b.fs, a.se - b.se); }\nll operator*(pll a, pll b) { return a.fs * b.se - a.se * b.fs; }\ntemplate <class T> int sign(T x) { return x < 0 ? -1 : x > 0 ? 1 : 0; }\nint ccw(pll a, pll b, pll c) { return sign((b - a) * (c - b)); }\ntemplate <class T> void setmin(T &x, T y) { if (x > y) x = y; }\ntemplate <class T> void setmax(T &x, T y) { if (x < y) x = y; }\ntemplate <class T> void addval(T &x, T y) { x += y; x %= mod; }\n\nint n, m;\nint X[200005];\nint T[200005];\nint L[200005];\nint R[200005];\nvector<int> taxi;\nint ans[200005];\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n    cin >> n >> m;\n    for (int i = 1; i <= n + m; i++) cin >> X[i];\n    for (int i = 1; i <= n + m; i++) cin >> T[i];\n    for (int i = 1; i <= n + m; i++) {\n        if (T[i]) taxi.push_back(X[i]);\n        else L[i] = szv(taxi) - 1;\n    }\n    for (int i = 1; i <= n + m; i++) {\n        if (T[i]) continue;\n        R[i] = lower_bound(taxi.begin(), taxi.end(), X[i]) - taxi.begin();\n        ll Ld = L[i] < 0 ? inf : X[i] - taxi[L[i]];\n        ll Rd = R[i] < szv(taxi) ? taxi[R[i]] - X[i] : inf;\n        if (Ld <= Rd) ans[L[i]]++;\n        else ans[R[i]]++;\n    }\n    for (int i = 0; i < m; i++) cout << ans[i] << ' ';\n    return 0;\n}"], "input": "", "output": "", "tags": ["implementation", "sortings"], "dificulty": "1200", "interactive": false}