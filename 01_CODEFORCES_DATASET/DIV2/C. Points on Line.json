{
    "link": "https://codeforces.com//contest/252/problem/C",
    "problemId": "2352",
    "problem_idx": "C",
    "shortId": "252C",
    "contest_number": "252",
    "problem_submissions": {
        "B": [
            2710060,
            2706628,
            2708313,
            2705063,
            2702778,
            2703423,
            2715482,
            2706557,
            2703833,
            2705102
        ],
        "D": [
            2707052,
            2709984,
            2706767,
            2709595,
            2711529,
            2710054,
            2708487,
            2707438,
            2708692,
            2709215,
            2706501,
            2709216
        ],
        "C": [
            2702661,
            2701836,
            2705668,
            2703665,
            2707566,
            2704785,
            2705259,
            2705065,
            2702929,
            2704890,
            2702757,
            2705646,
            2704360,
            2708601,
            2705908,
            2703255,
            2704699,
            2702535
        ],
        "A": [
            2701161,
            2709874,
            2701848,
            2700918,
            2701349,
            2700912,
            2701131,
            2701230,
            2700948,
            2701753,
            2703055,
            2700974,
            2713381,
            2703052,
            2702820,
            2702346,
            2700994,
            2701240,
            2701290
        ],
        "E": [
            2709470,
            2708307
        ]
    },
    "name": "C. Points on Line",
    "statement": "Little Petya likes points a lot. Recently his mom has presented him\r\npoints lying on the line . Now Petya is wondering in how many ways he\r\ncan choose three distinct points so that the distance between the two\r\nfarthest of them doesn\u2019t exceed .Note that the order of the points\r\ninside the group of three chosen points doesn\u2019t matter.\r\n",
    "solutions": [
        "#include<iostream>\n#include<map>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<string.h>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#include<sstream>\n#define all(X) (X).begin(),(X).end()\n#define mem(X) memset(X,0,sizeof(X))\n#define debug_v(v) for(int db=0;db<(v).size();db++)cout<<v[db]<<','<<;cout<<endl;\n#define pqpush(pq,x,cmp) (pq).push_back(x);push_heap((pq).begin(),(pq).end(),cmp);\n#define pqpop(pq,cmp) pop_heap((pq).begin(),(pq).end(),cmp);(pq).pop_back();\n#define PB(x) push_back(x)\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int>::iterator iv;\ntypedef map<string,int>::iterator msii;\ntypedef map<int,int>::iterator miii;\ntypedef map<int,bool>::iterator mibi;\ntypedef map<string,bool>::iterator msbi;\ntypedef map<string,int> msi;\ntypedef map<int,int> mii;\ntypedef map<int,bool> mib;\ntypedef map<string,bool> msb;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\n\nint n,mx,t,h1,h2,m1[100001],h3,d;\n\nll ans;\n\nint main(){\n    while(~scanf(\"%d\",&n))\n    {\n        scanf(\"%d\",&d);\n        for(h1=0;h1<n;h1++)\n        {\n            scanf(\"%d\",&m1[h1]);\n        }\n        //sort(m1,m1+n);\n        h2=0;\n        ans = 0;\n        for(h1=0;h1<n;h1++)\n        {\n            while(h2<n&&m1[h2]-m1[h1]<=d)h2++;\n            ll t = h2-h1-1;\n            if(t-1>0)\n            ans += t*(t-1)/2;\n        }\n        cout<<ans<<endl;\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "combinatorics",
        "two pointers"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Points on Line.json",
    "editorial_link": "https://codeforces.com//blog/entry/6054",
    "editorial": "Let's select the rightmost point of our triplet. In order to do this we can iterate over all points in ascending order of their X-coordinate. At the same time we'll maintain a pointer to the leftmost point which lays on the distance not greater than d from the current rightmost point. We can easily find out the number of points in the segment between two pointers, excluding the rightmost point. Let's call this number k. Then there exist exactly k?*?(k?-?1)?/?2 triplets of points with the fixed rightmost point. The only thing left is to sum up these values for all rightmost points.\n"
}