{"link": "https://codeforces.com//contest/219/problem/D", "problemId": "1615", "problem_idx": "D", "shortId": "219D", "contest_number": "219", "problem_submissions": {"E": [2056692, 2057598, 2059507, 2059313, 2058485, 2059875, 2060513, 2061809], "D": [2054476, 2056179, 2055432, 2056594, 2055868, 2055622, 2055003, 2054658, 2057835, 2054870, 2055878, 2057367, 2056847, 2058567, 2057046, 2057149, 2057027, 2055883, 2057861, 2055024], "C": [2053819, 2054931, 2054300, 2055466, 2059881, 2054433, 2054050, 2054365, 2056216, 2055640, 2054836, 2056204, 2055132, 2054423, 2055456, 2055579, 2055867, 2057241, 2056728, 2057355], "B": [2053118, 2053816, 2053245, 2053935, 2054094, 2053542, 2053200, 2053567, 2054115, 2053868, 2053799, 2054198, 2053471, 2055129, 2054481, 2054228, 2054209, 2054214, 2054824, 2055919], "A": [2052729, 2052827, 2052736, 2054458, 2053049, 2052760, 2052727, 2052921, 2052934, 2052917, 2052885, 2053077, 2052795, 2052871, 2052942, 2052755, 2053281, 2053122, 2053028, 2052909]}, "name": "D. Choosing Capital for Treeland", "statement": "The country Treeland consists of cities, some pairs of them are\r\nconnected with roads. Overall there are roads in the country. We know\r\nthat if we don\u2019t take the direction of the roads into consideration, we\r\ncan get from any city to any other one.The council of the elders has\r\nrecently decided to choose the capital of Treeland. Of course it should\r\nbe a city of this country. The council is supposed to meet in the\r\ncapital and regularly move from the capital to other cities (at this\r\nstage nobody is thinking about getting back to the capital from these\r\ncities). For that reason if city is chosen a capital, then all roads\r\nmust be oriented so that if we move along them, we can get from city to\r\nany other city. For that some roads may have to be inversed.Help the\r\nelders to choose the capital so that they have to inverse the minimum\r\nnumber of roads in the country.\r\n", "solutions": ["#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <sstream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cctype>\nusing namespace std;\n\n#define PB push_back\n#define MP make_pair\n\nconst double pi     =   acos(-1.0);\nconst double eps    =   1e-8;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef vector<int> VI;\ntypedef vector<string> VS;\n\nconst int maxn  =   200005;\n\nint f[maxn],g[maxn],n;\nvector<pair<int,int> > adj[maxn];\n\ninline void calc(int u,int fa)\n{\n    for (int i=0;i<adj[u].size();++i){\n        int v=adj[u][i].first,cost=adj[u][i].second;\n        if (v==fa) continue;\n        g[v]=g[u]-cost+(1-cost);\n        calc(v,u);\n    }\n}\n\ninline void dfs(int u,int fa)\n{\n    f[u]=0;\n    for (int i=0;i<adj[u].size();++i){\n        int v=adj[u][i].first,cost=adj[u][i].second;\n        if (v==fa) continue;\n//printf(\"%d %d\\n\",u,v);\n        dfs(v,u);\n        f[u]+=f[v]+cost;\n    }\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for (int i=1;i<n;++i){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        --a;--b;\n        adj[a].push_back(make_pair(b,0));\n        adj[b].push_back(make_pair(a,1));\n    }\n    \n    dfs(0,-1);\n    g[0]=f[0];\n    calc(0,-1);\n    int ans=*min_element(g,g+n);\n    printf(\"%d\\n\",ans);\n    for (int i=0;i<n;++i)\n    if (g[i]==ans){\n        printf(\"%d \",i+1);\n    }\n    \n    return 0;\n}\n"], "input": "", "output": "", "tags": ["dfs and similar", "dp", "graphs", "trees"], "dificulty": "1700", "interactive": false}