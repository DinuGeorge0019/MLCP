{
    "link": "https://codeforces.com//contest/1706/problem/A",
    "problemId": "1466351",
    "problem_idx": "A",
    "shortId": "1706A",
    "contest_number": "1706",
    "problem_submissions": {
        "D2": [
            164755947,
            164771403,
            164762268,
            164830322,
            164783821,
            164762155,
            164763660,
            167727726,
            164763512,
            164771385,
            164768987,
            164786591,
            165109549,
            164774482,
            164772244,
            164787948,
            164789501,
            164767866,
            164774049,
            164768972,
            164786019,
            164781366
        ],
        "D1": [
            164755812,
            164767814,
            164760721,
            164830311,
            164764715,
            164761873,
            164763978,
            167106725,
            164760911,
            164771592,
            164764309,
            164755426,
            164758751,
            164758461,
            164759026,
            164768432,
            164762506,
            164771653,
            164768895,
            164754659,
            164780135
        ],
        "E": [
            164750123,
            164754977,
            164771776,
            164830331,
            164760396,
            164775552,
            164750599,
            167106869,
            164780737,
            164776992,
            164776365,
            164769697,
            165109519,
            164782832,
            164784446,
            164777832,
            164745185,
            164783769,
            164782907,
            164785318,
            164774423,
            164765688
        ],
        "C": [
            164743602,
            164744687,
            164740571,
            164830300,
            164745917,
            164752415,
            164768743,
            167106646,
            167106607,
            164749531,
            164746963,
            164750898,
            164748957,
            164751304,
            164751822,
            164752230,
            164762906,
            164749665,
            164747043,
            164749516,
            164747945,
            164752780
        ],
        "B": [
            164740418,
            164739248,
            164748883,
            164830286,
            164740306,
            164748574,
            164773017,
            167106480,
            164740862,
            164740238,
            164743331,
            164741485,
            164741615,
            164739143,
            164740378,
            164753096,
            164741049,
            164740372,
            164742312,
            164741022,
            164745456
        ],
        "A": [
            164734517,
            164734482,
            164750605,
            164830274,
            164734645,
            164734321,
            164774887,
            167106382,
            164735301,
            164734871,
            164734669,
            164735191,
            164734536,
            164734449,
            164734493,
            164748128,
            164735346,
            164734733,
            164735598,
            164734982,
            164735759
        ]
    },
    "name": "A. Another String Minimization Problem",
    "statement": "You have a sequence a_1, a_2,\r\nldots, a_n of length n, consisting of integers between 1 and m. You also\r\nhave a string s, consisting of m characters .You are going to perform\r\nthe following n operations. At the i-th (1\r\nle i\r\nle n) operation, you replace either the a_i-th the (m + 1 - a_i)-th\r\ncharacter of s with . You can replace the character at any position\r\nmultiple times through the operations. Find the lexicographically\r\nsmallest string you can get after these operations.A string x is\r\nlexicographically smaller than a string y of the same length if and only\r\nif in the first position where x and y differ, the string x has a letter\r\nthat appears earlier in the alphabet than the corresponding letter in y.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate<typename T>\nvoid chmin(T& x, const T& y) {\n\tif (x > y) x = y;\n}\ntemplate<typename T>\nvoid chmax(T& x, const T& y) {\n\tif (x < y) x = y;\n}\ntypedef int64_t s64;\ntypedef uint64_t u64;\ntypedef uint32_t u32;\ntypedef pair<int, int> pii;\n#define rep(i, l, r) for (int i = l; i <= r; ++i)\n#define per(i, r, l) for (int i = r; i >= l; --i)\n#define rep0(i, l, r) for (int i = l; i < r; ++i)\n#define gc (c = getchar())\nchar readc() {\n\tchar c;\n\twhile (isspace(gc))\n\t\t;\n\treturn c;\n}\nint read() {\n\tchar c;\n\twhile (gc < '-')\n\t\t;\n\tif (c == '-') {\n\t\tint x = gc - '0';\n\t\twhile (gc >= '0') x = x * 10 + c - '0';\n\t\treturn -x;\n\t}\n\tint x = c - '0';\n\twhile (gc >= '0') x = x * 10 + c - '0';\n\treturn x;\n}\n#undef gc\n\nconst int N = 55;\n\nchar ans[N];\nint T, n, m;\n\nint main() {\n#ifdef local\n\tfreopen(\"1.in\", \"r\", stdin);\n#endif\n\tT = read();\n\twhile (T--) {\n\t\tn = read();\n\t\tm = read();\n\t\trep(i, 1, m) ans[i] = 'B';\n\t\trep(i, 1, n) {\n\t\t\tint a = read();\n\t\t\ta = min(a, m - a + 1);\n\t\t\tif (ans[a] == 'B')\n\t\t\t\tans[a] = 'A';\n\t\t\telse\n\t\t\t\tans[m - a + 1] = 'A';\n\t\t}\n\t\trep(i, 1, m) putchar(ans[i]);\n\t\tputchar('\\n');\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "2-sat",
        "constructive algorithms",
        "greedy",
        "string suffix structures",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Another String Minimization Problem.json",
    "editorial_link": "https://codeforces.com//blog/entry/105008",
    "editorial": "Let\u00e2\u0080\u0099s iterate through the elements of . For convenience, we\u00e2\u0080\u0099ll make . If\r\nthe -th character of is not currently , then we should replace it.\r\nOtherwise, we replace the -th character. This is because if we have the\r\nchoice between replacing two characters, replacing the one with the\r\nsmaller index will result in a lexicographically smaller\r\nstring.Alternatively, we can keep track of how many times either or\r\nappears in for each . If they appear times, neither of these indices in\r\ncan become . If they appear time, it is optimal to set the -th character\r\nto , since this will produce a lexicographically smaller string.\r\nOtherwise, they appear at least times, and it is possible to set both\r\nthe -th and -th character to .\r\n"
}