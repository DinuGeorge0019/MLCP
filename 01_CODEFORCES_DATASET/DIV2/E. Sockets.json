{
    "link": "https://codeforces.com//contest/732/problem/E",
    "problemId": "76075",
    "problem_idx": "E",
    "shortId": "732E",
    "contest_number": "732",
    "problem_submissions": {
        "E": [
            21538888,
            21537779,
            21537129,
            21537499,
            21538134,
            21538715,
            21544444,
            21539734,
            21540059,
            21536661,
            21540840,
            21542039,
            21534910,
            21538735,
            21535519,
            21536958,
            21540398,
            21538120,
            21542707
        ],
        "F": [
            21537120,
            21540142,
            21542965,
            21544806,
            21544597,
            21545399,
            21540042,
            21543034,
            21545483,
            21656308,
            21554885
        ],
        "D": [
            21532629,
            21525539,
            21530620,
            21528537,
            21533913,
            21534989,
            21534469,
            21531559,
            21536597,
            21530734,
            21531936,
            21535213,
            21537946,
            21531246,
            21536546,
            21534126,
            21532973,
            21532309,
            21534225
        ],
        "C": [
            21530647,
            21529152,
            21528463,
            21531507,
            21530354,
            21530901,
            21532584,
            21527470,
            21533687,
            21527417,
            21527627,
            21531693,
            21526633,
            21526154,
            21527731,
            21528874,
            21530241,
            21527402,
            21526262
        ],
        "B": [
            21523702,
            21526949,
            21525416,
            21523386,
            21525291,
            21525800,
            21523178,
            21524106,
            21531342,
            21523932,
            21525092,
            21525450,
            21524463,
            21523658,
            21524734,
            21525994,
            21523984,
            21522251,
            21523311
        ],
        "A": [
            21522134,
            21538223,
            21523250,
            21522010,
            21522393,
            21523229,
            21521947,
            21521953,
            21522096,
            21522038,
            21522617,
            21523179,
            21522061,
            21522531,
            21523191,
            21523859,
            21522155,
            21528156,
            21521893
        ]
    },
    "name": "E. Sockets",
    "statement": "The ICM ACPC World Finals is coming! Unfortunately, the organizers of\r\nthe competition were so busy preparing tasks that totally missed an\r\nimportant technical point the organization of electricity supplement for\r\nall the participants workstations.There are computers for participants,\r\nthe -th of which has power equal to positive integer . At the same time\r\nthere are sockets available, the -th of which has power euqal to\r\npositive integer . It is possible to connect the -th computer to the -th\r\nsocket if and only if their powers are the same: . It is allowed to\r\nconnect no more than one computer to one socket. Thus, if the powers of\r\nall computers and sockets are distinct, then no computer can be\r\nconnected to any of the sockets. In order to fix the situation professor\r\nPuch Williams urgently ordered a wagon of adapters power splitters. Each\r\nadapter has one plug and one socket with a voltage divider between them.\r\nAfter plugging an adapter to a socket with power , the power on the\r\nadapter\u2019s socket becomes equal to , it means that it is equal to the\r\nsocket\u2019s power divided by two with rounding up, for example and .Each\r\nadapter can be used only once. It is possible to connect several\r\nadapters in a chain plugging the first to a socket. For example, if two\r\nadapters are plugged one after enother to a socket with power , it\r\nbecomes possible to connect one computer with power to this socket.The\r\norganizers should install adapters so that it will be possible to supply\r\nwith electricity the maximum number of computers at the same time. If\r\nthere are several possible connection configurations, they want to find\r\nthe one that uses the minimum number of adapters to connect\r\ncomputers.Help organizers calculate the maximum number of connected\r\ncomputers and the minimum number of adapters needed for this.The wagon\r\nof adapters contains enough of them to do the task. It is guaranteed\r\nthat it\u2019s possible to connect at least one computer.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#include <map>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <complex>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\nconst int N = 202020;\nint p[N] , s[N] , n , m;\nint b[N] , to[N] , times[N];\nmap<int,queue<int> > Mp;\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    rep(i,1,n+1) scanf(\"%d\",p + i) , Mp[p[i]].push(i);\n    rep(i,1,m+1) scanf(\"%d\",s + i);\n    rep(i,1,m+1) b[i] = i;\n    sort(b+1,b+m+1,[&](int x,int y){return s[x]<s[y];});\n    int cc = 0 , aa = 0;\n    rep(i,1,m+1){\n        int c = b[i] , x = s[c];\n        for(int i=0;x;i++){\n            if(Mp.count(x)){\n                queue<int>&t = Mp[x];\n                to[t.front()] = c;\n                times[c] = i;\n                cc += i;\n                aa++;\n                t.pop();\n                if(sz(t) == 0) Mp.erase(x);\n                break;\n            }\n            if(x == 1) break;\n            x = (x + 1) / 2;\n        }\n    }\n    printf(\"%d %d\\n\",aa,cc);\n    rep(i,1,m+1) printf(\"%d%c\",times[i],\" \\n\"[i==m]);\n    rep(i,1,n+1) printf(\"%d%c\",to[i],\" \\n\"[i==n]);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Sockets.json",
    "editorial_link": "https://codeforces.com//blog/entry/47890",
    "editorial": "Firstly, we need to sort both arrays (with computers and with sockets)\r\nin non-descending order (also we need to sustain their indices to print\r\nthe answer). Then we iterate on the value until it reaches the logarithm\r\nof the maximum value in (or until it reaches 31). For each value of we\r\niterate on computers in non-descending order, also we maintain the index\r\nof the most suitable socket (let\u00e2\u0080\u0099s call this index ). If socket number\r\nis already used or if its power is less than current computer\u00e2\u0080\u0099s\r\nrequirement, we increase . If our current socket\u00e2\u0080\u0099s power matches current\r\ncomputer\u00e2\u0080\u0099s requirement, then we connect this computer with current\r\nsocket. Each iteration connects the largest possible number of computers\r\nand sockets. After each iteration we install adapters on all non\"=used\r\nsockets: . After all iterations we print the answer. Time complexity: ,\r\nwhere is the maximum power of socket.\r\n"
}