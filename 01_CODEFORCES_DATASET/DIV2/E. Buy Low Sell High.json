{
    "link": "https://codeforces.com//contest/867/problem/E",
    "problemId": "125351",
    "problem_idx": "E",
    "shortId": "867E",
    "contest_number": "867",
    "problem_submissions": {
        "D": [
            30884718,
            30969715,
            30908906
        ],
        "E": [
            30880295,
            30879986,
            30881111,
            30877764,
            30881335,
            30882295,
            30883343,
            30879932,
            30880853,
            30885039,
            30883442,
            30879026,
            30879346,
            30878760,
            30879361,
            30879208,
            30881707,
            30881486,
            30883064
        ],
        "C": [
            30879669,
            30878960,
            30878088,
            30883610,
            30879422,
            30877573,
            30877883,
            30885041,
            30885195,
            30880421,
            30881172
        ],
        "B": [
            30876237,
            30876507,
            30875069,
            30876283,
            30877011,
            30875260,
            30875540,
            30874844,
            30874882,
            30876892,
            30881931,
            30874579,
            30875739,
            30876833,
            30876524,
            30876752,
            30874913,
            30878747,
            30875046
        ],
        "A": [
            30873015,
            30872603,
            30873110,
            30873218,
            30872680,
            30873140,
            30873066,
            30873137,
            30873548,
            30875168,
            30873452,
            30872738,
            30874021,
            30872548,
            30873686,
            30873869,
            30872699,
            30874649,
            30873108
        ]
    },
    "name": "E. Buy Low Sell High",
    "statement": "You can perfectly predict the price of a certain stock for the next\r\ndays. You would like to profit on this knowledge, but only want to\r\ntransact one share of stock per day. That is, each day you will either\r\nbuy one share, sell one share, or do nothing. Initially you own zero\r\nshares, and you cannot sell shares when you donâ€™t own any. At the end of\r\nthe days you would like to again own zero shares, but want to have as\r\nmuch money as possible.\r\n",
    "solutions": [
        "#define _CRT_SECURE_NO_WARNINGS\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <cstdio>\n#include <cmath>\n#include <map>\n#include <set>\n#include <utility>\n#include <stack>\n#include <cstring>\n#include <bitset>\n#include <deque>\n#include <string>\n#include <list>\n#include <cstdlib>\nusing namespace std;\nconst int inf = 0x3f3f3f3f;\nconst int maxn = 300000 + 100;\ntypedef long long ll;\ntypedef long double ld;\nmultiset<int> st;\nint n, tmp;\nint main()\n{\n\twhile (~scanf(\"%d\", &n))\n\t{\n\t\tst.clear();\n\t\tll ans = 0;\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tscanf(\"%d\",&tmp);\n\t\t\tif (!st.empty() && *st.begin() < tmp)\n\t\t\t{\n\t\t\t\tans += (ll)(tmp - *st.begin());\n\t\t\t\tst.erase(st.begin());\n\t\t\t\tst.insert(tmp);\n\t\t\t\tst.insert(tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tst.insert(tmp);\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Buy Low Sell High.json",
    "editorial_link": "https://codeforces.com//blog/entry/54888",
    "editorial": "Let's introduce the idea of options to the problem. Instead of having to buy stock when it is at a given price, each day you gain the option to buy a share at that days price, which you can exercise at any time in the future. This way we only need to exercise an option in order to sell it, and we never need to \"hold\" any stock.\n\nEach day, 2 things happen. First, we get one more option. Second, if there is some option whose price is lower than today's price, we can be sure that we're going to exercise that option. What we don't know is when it's best to sell that option. However, we don't need to know when the best time is to sell - we can just sell it now, but give ourselves the option to buy it back at the price we just sold it for.\n\nOptions can be stored in a heap since we only ever care about the cheapest one. Running time .",
    "hint": []
}