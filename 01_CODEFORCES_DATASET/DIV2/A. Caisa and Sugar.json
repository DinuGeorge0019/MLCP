{
    "link": "https://codeforces.com//contest/463/problem/A",
    "problemId": "13409",
    "problem_idx": "A",
    "shortId": "463A",
    "contest_number": "463",
    "problem_submissions": {
        "E": [
            7638960,
            7637193,
            7682816,
            7638248,
            7639853,
            7638211,
            7637973,
            7639823,
            7643707,
            7637460,
            7639583,
            7639708,
            7646111,
            7680392
        ],
        "D": [
            7633516,
            7634297,
            7633801,
            7632252,
            7635569,
            7633746,
            7635006,
            7633676,
            7631296,
            7637376,
            7629043,
            7638633,
            7636946,
            7634549,
            7632611,
            7631941,
            7635806,
            7635047,
            7633827
        ],
        "A": [
            7632250,
            7626691,
            7626688,
            7627018,
            7627107,
            7626706,
            7644040,
            7631576,
            7626744,
            7634237,
            7634275,
            7626965,
            7627191,
            7627423,
            7627095,
            7627639,
            7628035,
            7635333
        ],
        "B": [
            7630537,
            7627110,
            7627719,
            7627619,
            7629633,
            7628175,
            7631202,
            7629983,
            7627256,
            7633605,
            7632837,
            7629106,
            7628563,
            7629250,
            7629192,
            7628955,
            7630266,
            7636050
        ],
        "C": [
            7628696,
            7632900,
            7632098,
            7629603,
            7634187,
            7640208,
            7633142,
            7628662,
            7678669,
            7631060,
            7637636,
            7632929,
            7631029,
            7638701,
            7635241,
            7632886,
            7633425,
            7630271
        ]
    },
    "name": "A. Caisa and Sugar",
    "statement": "Caisa is going to have a party and he needs to buy the ingredients for a\r\nbig chocolate cake. For that he is going to the biggest supermarket in\r\ntown.Unfortunately, he has just dollars for sugar. But that’s not a\r\nreason to be sad, because there are types of sugar in the supermarket,\r\nmaybe he able to buy one. But that’s not all. The supermarket has very\r\nunusual exchange politics: instead of cents the sellers give sweets to a\r\nbuyer as a change. Of course, the number of given sweets always doesn’t\r\nexceed , because each seller maximizes the number of dollars in the\r\nchange ( cents can be replaced with a dollar).Caisa wants to buy only\r\none type of sugar, also he wants to maximize the number of sweets in the\r\nchange. What is the maximum number of sweets he can get? Note, that\r\nCaisa doesn’t want to minimize the cost of the sugar, he only wants to\r\nget maximum number of sweets as change.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <set>\n#include <string>\n#include <functional>\n\ntypedef long long lld;\n\nconst int N = 100 + 5;\n\nint n,s,A[N],B[N];\n\nint main() {\n    scanf(\"%d%d\",&n,&s);\n    int answer = -1;\n    for (int i = 0; i < n; ++ i) {\n        scanf(\"%d%d\",A+i,B+i);\n        int need = A[i] + (B[i]>0);\n        if (s < need) continue;\n        if (B[i]==0) {\n            answer = std::max(answer,0);\n        } else {\n            int value = 100 - B[i];\n            answer = std::max(answer,value);\n        }\n    }\n    printf(\"%d\\n\",answer);\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Caisa and Sugar.json",
    "editorial_link": "https://codeforces.com/blog/entry/13631",
    "editorial": " This is a simple implementation problem.",
    "hint": []
}