{
    "link": "https://codeforces.com//contest/1084/problem/C",
    "problemId": "268417",
    "problem_idx": "C",
    "shortId": "1084C",
    "contest_number": "1084",
    "problem_submissions": {
        "E": [
            46871140,
            46872149,
            46875669,
            46875724,
            46874048,
            46872086,
            46872648,
            46877520,
            46878278,
            46874461,
            46878594,
            46878417,
            46876583,
            46878192,
            46874895,
            46876700,
            46877996,
            46876441,
            46873571,
            46873367
        ],
        "D": [
            46865692,
            46866251,
            46867303,
            46864932,
            46866831,
            46870175,
            46871027,
            46867359,
            46864028,
            46867931,
            46867474,
            46868146,
            46871839,
            46871054,
            46866346,
            46870635,
            46870859,
            46868272,
            46870701,
            46867072
        ],
        "C": [
            46862188,
            46862548,
            46862310,
            46864314,
            46859780,
            46865533,
            46863590,
            46862823,
            46859756,
            46864914,
            46865680,
            46864482,
            46863554,
            46862055,
            46865588,
            46867219,
            46865294,
            46862436,
            46861206,
            46862144
        ],
        "B": [
            46860593,
            46860115,
            46860565,
            46859288,
            46868191,
            46861225,
            46861292,
            46860596,
            46860732,
            46863777,
            46862311,
            46860318,
            46861810,
            46860088,
            46859027,
            46862964,
            46862212,
            46860437,
            46875865,
            46882320
        ],
        "A": [
            46860045,
            46859437,
            46859480,
            46861802,
            46870580,
            46859672,
            46860117,
            46859399,
            46861955,
            46862963,
            46861395,
            46859357,
            46859117,
            46859254,
            46859455,
            46860467,
            46859673,
            46859251,
            46859051,
            46859322
        ]
    },
    "name": "C. The Fair Nut and String",
    "statement": "The Fair Nut found a string s. The string consists of lowercase Latin\r\nletters. The Nut is a curious guy, so he wants to find the number of\r\nstrictly increasing sequences p_1, p_2,\r\nldots, p_k, such that: For each i (1\r\nleq i\r\nleq k), s_{p_i} = . For each i (1\r\nleq i < k), there is such j that p_i < j < p_{i + 1} and s_j = . The Nut\r\nis upset because he doesn\u2019t know how to find the number. Help him.This\r\nnumber should be calculated modulo 10^9 + 7.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> cd;\n\ntypedef pair<int, int> pi;\ntypedef pair<ll,ll> pl;\ntypedef pair<ld,ld> pd;\n\ntypedef vector<int> vi;\ntypedef vector<ld> vd;\ntypedef vector<ll> vl;\ntypedef vector<pi> vpi;\ntypedef vector<pl> vpl;\ntypedef vector<cd> vcd;\n\ntemplate <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;\n\n#define FOR(i, a, b) for (int i=a; i<(b); i++)\n#define F0R(i, a) for (int i=0; i<(a); i++)\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\n\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n\nconst int MOD = 1000000007;\nconst ll INF = 1e18;\nconst int MX = 100001;\n\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n\n    string str; cin >> str;\n\n    int N = str.length();\n    int dp[N+1]; F0R(i, N+1) dp[i] = 0;\n\n    int lastB = 0;\n    dp[0] = 1;\n    int sumDP[N+1];\n    F0R(i, N+1) sumDP[i] = 0;\n    sumDP[0] = 1;\n    F0R(i, N) {\n        if (str[i] == 'b') {\n            lastB = i+1;\n        }\n        if (str[i] == 'a') {\n            dp[i+1] = sumDP[lastB];\n        }\n        sumDP[i+1] = sumDP[i] + dp[i+1];\n        sumDP[i+1] = sumDP[i+1] % MOD;\n    }\n\n    cout << sumDP[N] - 1 << endl;\n\n    return 0;\n}\n\n// read the question correctly (ll vs int)\n// template by bqi343"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. The Fair Nut and String.json",
    "editorial_link": "https://codeforces.com/blog/entry/63753?locale=en",
    "editorial": "Firstly, let\u00e2\u0080\u0099s erase all symbols different from and . Then let\u00e2\u0080\u0099s split\r\nstring on blocks of consecutive symbols . Now we need to multiply all\r\nsizes of blocks increased by 1. It is an answer which also includes one\r\nempty subsequence, so we should just decrease it by one.\r\n"
}