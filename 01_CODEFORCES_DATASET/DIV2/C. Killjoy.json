{
    "link": "https://codeforces.com//contest/1419/problem/C",
    "problemId": "729809",
    "problem_idx": "C",
    "shortId": "1419C",
    "contest_number": "1419",
    "problem_submissions": {
        "F": [
            93295033,
            93295948,
            93577512,
            141950739,
            141949703,
            93333082
        ],
        "E": [
            93234753,
            93227212,
            93234200,
            93238693,
            93238493,
            93238433,
            93238275,
            93245697,
            93246537,
            93242848,
            93246826,
            93247065,
            93245207,
            93241549,
            93243538,
            93254913,
            93249479,
            93238516
        ],
        "D2": [
            93212522,
            93217506,
            93213686,
            93220590,
            93215812,
            93218918,
            93214966,
            93215328,
            93210409,
            93223664,
            93218002,
            93222549,
            93220767,
            93225667,
            93221756,
            93229039,
            93216049,
            93227118
        ],
        "D1": [
            93210697,
            93214622,
            93213970,
            93213840,
            93206345,
            93211719,
            93208773,
            93212321,
            93204619,
            93213170,
            93216390,
            93214097,
            93210302,
            93207013,
            93214684,
            93211970,
            93215865,
            93206978
        ],
        "C": [
            93207169,
            93210000,
            93209428,
            93210195,
            93217148,
            93208516,
            93207753,
            93214333,
            93218732,
            93213670,
            93211157,
            93218160,
            93211807,
            93211495,
            93209180,
            93205213,
            93217455
        ],
        "B": [
            93202581,
            93203801,
            93204920,
            93203314,
            93203851,
            93201764,
            93202768,
            93202454,
            93208579,
            93203844,
            93205640,
            93206433,
            93220603,
            93204341,
            93204189,
            93202311,
            93214207
        ],
        "A": [
            93200129,
            93200069,
            93200258,
            93200020,
            93200369,
            93204977,
            93200037,
            93200656,
            93201705,
            93200310,
            93200086,
            93201198,
            93200525,
            93199999,
            93201236,
            93200136,
            93200638
        ]
    },
    "name": "C. Killjoy",
    "statement": "A new agent called Killjoy invented a virus COVID-2069 that infects\r\naccounts on Codeforces. Each account has a rating, described by (it can\r\npossibly be negative or very large).Killjoy\u2019s account is already\r\ninfected and has a rating equal to x. Its rating is constant. There are\r\nn accounts except hers, numbered from 1 to n. The i-th account\u2019s initial\r\nrating is a_i. Any infected account (initially the only infected account\r\nis Killjoy\u2019s) instantly infects any uninfected account if their ratings\r\nare equal. This can happen at the beginning (before any rating changes)\r\nand after each contest. If an account is infected, it can not be\r\nhealed.Contests are regularly held on Codeforces. In each contest, any\r\nof these n accounts (including infected ones) can participate. Killjoy\r\ncan\u2019t participate. After each contest ratings are changed this way: each\r\nparticipant\u2019s rating is changed by an integer, but the sum of all\r\nchanges must be equal to zero. New ratings can be any integer.Find out\r\nthe minimal number of contests needed to infect all accounts. You can\r\nchoose which accounts will participate in each contest and how the\r\nratings will change.It can be proven that all accounts can be infected\r\nin some finite number of contests.\r\n",
    "solutions": [
        "#pragma GCC optimize(3)\n#pragma GCC optimize(2)\n#include<bits/stdc++.h>\n#define ll long long\n#define pb push_back\n#define mkp make_pair\n#define rint register int\n#define INF ((1 << 30) - 1)\n#define FI(n) FastIO::read(n)\n#define FO(n) FastIO::write(n)\n#define Pair pair < int, int >\n#define mst(a,b) memset(a,b,sizeof(a))\n#define foR(i, k, j) for(rint i = (k); i >= (j); i--)\n#define For(i, k, j) for(rint i = (k); i <= (j); i++)\n#define Foe(i, u) for(rint i = lst[u], v = e[i].v; i; i = e[i].nxt, v = e[i].v)\n#define IOS ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)\n#define file(s) freopen(s\".in\", \"r\", stdin); freopen(s\".out\", \"w\", stdout)\n//#define int long long\nconst int P = 1000000007; //\nusing namespace std;\ninline void ckmax(int &a, int b) {a = max(a, b);}\ninline void ckmin(int &a, int b) {a = min(a, b);}\ninline void mulmod(int &a, int b) {a = 1ll * a * b % P;}\ninline void addmod(int &a, int b) {int t = a + b; a = (t >= P ? t - P : t); }\ninline int ksm(int a, int b) {int ans=1; for(;b;b>>=1) {if(b&1) ans=1ll*ans*a%P;a=1ll*a*a%P;}return ans;}\ninline int inv(int a) {return ksm(a, P-2);}\n\ninline void printarray(int *a, int n) {For(i, 1, n) fprintf(stderr, \"%d \", a[i]); fprintf(stderr, \"\\n\");}\nnamespace FastIO {\n    const int SIZE=1<<16; char buf[SIZE], obuf[SIZE], str[64]; int bi=SIZE, bn=SIZE, opt;\n    int read(char *s) {\n        while (bn) {for (;bi<bn&&buf[bi]<=' ';bi++);if (bi<bn) break; bn=fread(buf,1,SIZE,stdin),bi=0;}\n        int sn=0;while (bn) {for (;bi<bn&&buf[bi]>' ';bi++) s[sn++]=buf[bi];if (bi<bn) break; bn=fread(buf,1,SIZE,stdin),bi=0;}s[sn]=0;return sn;\n    }\n    bool read(int& x) {if(x)x=0;int bf=0,n=read(str); if(!n) return 0; int i=0; if (str[i]=='-') bf=1,i=1; for(x=0;i<n;i++) x=x*10+str[i]-'0'; if(bf) x=-x; return 1;}\n    void write(int x) {\n        if(!x) obuf[opt++] = '0'; else {if(x<0) obuf[opt++]='-',x=-x;int sn=0; while(x)str[sn++]=x%10+'0',x/=10;for (int i=sn-1;i>=0;i--) obuf[opt++]=str[i];}\n        if (opt>=(SIZE>>1)){fwrite(obuf, 1, opt, stdout); opt=0;}\n    }\n    void write(char x) {obuf[opt++]=x;if (opt>=(SIZE>>1)){fwrite(obuf, 1, opt, stdout); opt=0;}}\n    void Fflush() { if (opt) fwrite(obuf, 1, opt, stdout); opt=0;}\n};\nconst int MAXN = 3e5 + 5;\nint n, a[MAXN], v;\nsigned main()\n{\n    #ifndef ONLINE_JUDGE\n        file(\"pro\");\n    #endif\n    int T; cin >> T;\n    while(T--) {\n\t\tcin >> n >> v; \n\t\tbool t1 = 1, t2 = 0;\n\t\tFor(i, 1, n) scanf(\"%d\", &a[i]), t1 &= (a[i] == v), t2 |= (a[i] == v);\n\t\tif(t1) printf(\"0\\n\");\n\t\telse {\n\t\t\tint res = 0; For(i, 1, n) res += a[i] - v;\n\t\t\tif(res == 0 || t2) printf(\"1\\n\");\n\t\t\telse printf(\"2\\n\");\n\t\t}\n\t\t\n\t}\n    return FastIO::Fflush(), 0;\n}\n/*\nThink twice :\nmod ?\nINF ?\nn = 1 ?\nlong long ?\nFastio::Fflush() ?\n\n*/\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Killjoy.json",
    "editorial_link": "https://codeforces.com//blog/entry/82817",
    "editorial": "If all accounts have the rating equal to then the answer is . Now let\u00e2\u0080\u0099s\r\nconsider other cases. Let\u00e2\u0080\u0099s try to make all ratings equal to in a single\r\ncontest. It\u00e2\u0080\u0099s possible only in two cases:1. If at least one account is\r\nalready infected we can infect all other accounts in a single contest.\r\nLet\u00e2\u0080\u0099s say that some account is already infected, then we can change all\r\nother accounts to except . Let\u00e2\u0080\u0099s say that summary changes are , then we\r\ncan decrease -th account\u00e2\u0080\u0099s rating by and every account will be infected\r\nwhile the summary changes will be equal to zero. So this will take only\r\ncontest.2. . In this case we can just make all ratings equal and the sum\r\nof all changes will be because of the equality, which means that we can\r\ninfect everyone in only contest.In all other cases the answer is . Let\u00e2\u0080\u0099s\r\nprove that. We can make the ratings of first accounts equal to after the\r\nfirst contest and the last account will have rating equal to so that the\r\nsum of rating changes is still equal to zero. After that first accounts\r\nare already infected and we can change the rating of the last account by\r\nso it\u00e2\u0080\u0099s equal to and we will decrease the rating of the first account by\r\nso that the sum of rating changes is still equal to zero. After such two\r\ncontests all accounts will be infected.\r\n"
}