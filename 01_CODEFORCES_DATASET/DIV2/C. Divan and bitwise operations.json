{
    "link": "https://codeforces.com//contest/1614/problem/C",
    "problemId": "1203040",
    "problem_idx": "C",
    "shortId": "1614C",
    "contest_number": "1614",
    "problem_submissions": {
        "E": [
            137009194,
            137014194,
            137015789,
            137016362,
            137020752,
            137014205,
            137015539,
            137026112,
            137010161,
            137029153,
            137038215,
            137034410,
            137034461,
            137034375,
            137033386,
            137036667,
            137032190,
            137023207,
            137075934,
            137032904,
            137024920
        ],
        "D2": [
            137001410,
            137005681,
            137003285,
            137009439,
            137006489,
            137047807,
            137022355,
            137022814,
            137011076,
            137025868,
            137009738,
            137014291,
            137016349,
            137021410,
            137017855,
            137020600,
            137016886,
            137022178,
            137031343,
            137075935,
            137024473,
            137042227
        ],
        "D1": [
            137001180,
            137005447,
            137003383,
            137009205,
            137000884,
            137017961,
            137020978,
            137011203,
            137016671,
            136998649,
            136997230,
            137016563,
            137017097,
            137017709,
            137018992,
            137012342,
            137016351,
            137013550,
            137075936,
            137024377,
            136998698
        ],
        "C": [
            136997379,
            136997240,
            136998807,
            137002096,
            137007050,
            137000530,
            137002694,
            137003666,
            137011162,
            136999430,
            136998165,
            137006807,
            137006775,
            137007934,
            137009951,
            137007247,
            137002109,
            137007391,
            137075939,
            137005239,
            136992992
        ],
        "B": [
            136992729,
            136995061,
            136994469,
            136996499,
            136993703,
            136995623,
            136996491,
            136996472,
            137013016,
            136993489,
            136992988,
            136997915,
            136998466,
            137001753,
            136996259,
            136997667,
            136996579,
            137035495,
            137075938,
            136994606,
            136992231
        ],
        "A": [
            136989831,
            136990477,
            136990196,
            136991523,
            136991743,
            136990642,
            136990416,
            136989822,
            137014012,
            136989949,
            136989975,
            136991659,
            136990728,
            136994950,
            136991062,
            136991074,
            136989905,
            136990672,
            137075940,
            136989947,
            136989765
        ]
    },
    "name": "C. Divan and bitwise operations",
    "statement": "Once analyzed a sequence a_1, a_2,\r\nldots, a_n consisting of n non-negative integers as follows. He\r\nconsidered each non-empty of the sequence a, computed the bitwise XOR of\r\nits elements and added up all the XORs, obtaining the of the sequence\r\na.A sequence c is a of a sequence d if c can be obtained from d by\r\ndeletion of several (possibly, zero or all) elements. For example, [1,\r\n, 2,\r\n, 3,\r\n, 4], [2,\r\n, 4], and [2] are subsequences of [1,\r\n, 2,\r\n, 3,\r\n, 4], but [4,\r\n, 3] and [0] are not. was very proud of his analysis, but now he lost\r\nthe sequence a, and also the coziness value! However, remembers the\r\nvalue of bitwise OR on m contiguous subsegments of the sequence a. It\r\nturns out that each element of the original sequence is contained in of\r\nthese m segments. asks you to help find the coziness of the sequence a\r\nusing the information he remembers. If several coziness values are\r\npossible, print any.As the result can be very large, print the value\r\nmodulo 10^9 + 7.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nconst int P = 1e9 + 7; int T , N , M;\n\nint main(){\n    ios::sync_with_stdio(0);\n\tfor(cin >> T ; T ; --T){\n\t\tcin >> N >> M; int v = 0; for(int j = 1 ; j <= M ; ++j){int x; cin >> x >> x >> x; v |= x;}\n\t\tint pw2 = 1; for(int j = 1 ; j < N ; ++j) pw2 = 2ll * pw2 % P;\n\t\tint sum = 0; for(int j = 0 ; j < 30 ; ++j) if(v >> j & 1) sum = (sum + (1ll << j) * pw2) % P;\n\t\tcout << sum << endl;\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "combinatorics",
        "constructive algorithms",
        "dp",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Divan and bitwise operations.json",
    "editorial_link": "https://codeforces.com//blog/entry/97283",
    "editorial": "Solution Let\u00e2\u0080\u0099s count for each bit how many times it will be included in\nthe answer.Let us now consider the -th bit. Note that if no number\ncontains the included -th bit, then such a bit will never be included in\nthe answer. Otherwise, each of the subsequences contains -th bit even or\nodd number of times. If a bit enters an even number of times, then we\nshould not count such a subsequence, because the bitwise exclusive OR\nfor this bit will be zero. If the bit enters an odd number of times,\nthen we must count such a subsequence, because the bitwise exclusive OR\nfor this bit will be equal to one.It is stated that the number of\nsubsequences in which the -th bit enters an odd number of times is equal\nto . Let\u00e2\u0080\u0099s prove it.Divide the numbers into two sets and . In the set\nthere will be numbers whose th bit is off, in the set there will be\nnumbers whose -th bit is on.Note that the numbers from the set do not\naffect the answer in any way, because . Thus, whichever subset of we\ntake, the -th bit will not change its parity. There will be in total of\nsuch subsets.Let if is even, or if is odd. In order for the -th bit to\nenter the subsequence an odd number of times, you need to take an odd\nnumber of elements from the set . This number is equal to .Thus, the -th\nbit is included in exactly subsequences, which was required to be\nproved.Then the solution to this problem turns out to be very simple:\nlet be equal to the bitwise OR of all elements of the sequence (or, the\nsame thing, bitwise OR of all given segments), then the answer will be\nequal to modulo .The resulting asymptotics in time: .\n"
}