{
    "link": "https://codeforces.com//contest/1436/problem/F",
    "problemId": "772601",
    "problem_idx": "F",
    "shortId": "1436F",
    "contest_number": "1436",
    "problem_submissions": {
        "D": [
            244333966,
            96574214,
            96571456,
            96558532,
            96571048,
            96571994,
            96563376,
            96571151,
            96576643,
            96574299,
            96567342,
            96567085,
            96573866,
            96576086,
            96577575,
            96562284,
            96570394,
            96578043,
            96575753
        ],
        "F": [
            240918218,
            96566504,
            96572912,
            96753174
        ],
        "E": [
            96592979,
            96584648,
            96574218,
            96584890,
            96586188,
            96585819,
            96587447,
            96587153,
            96585609,
            96587917,
            96588463,
            96591240,
            96584846,
            96586193,
            96587617,
            96587454,
            96590850,
            96588483,
            96583371
        ],
        "C": [
            96570072,
            96563215,
            96588737,
            96565809,
            96564790,
            96575488,
            96583604,
            96564799,
            96558226,
            96553282,
            96572718,
            96560930,
            96568810,
            96563409,
            96560716,
            96573151,
            96560791,
            96559882,
            96576285
        ],
        "B": [
            96563722,
            96545744,
            96546426,
            96547973,
            96548924,
            96541502,
            96573998,
            96558603,
            96548113,
            96541622,
            96546010,
            96548513,
            96563296,
            96545652,
            96541454,
            96544953,
            96544692,
            96543086,
            96559069
        ],
        "A": [
            96538154,
            96541957,
            96536078,
            96536651,
            96535505,
            96535718,
            96541514,
            96539181,
            96535535,
            96535532,
            96537279,
            96538197,
            96541879,
            96569353,
            96561847,
            96535411,
            96538782,
            96535867,
            96538910
        ]
    },
    "name": "F. Sum Over Subsets",
    "statement": "You are given a multiset S. Over all pairs of subsets A and B, such\r\nthat: B\r\nsubset A; |B| = |A| - 1; greatest common divisor of all elements in A is\r\nequal to one; find the sum of\r\nsum_{x\r\nin A}{x}\r\ncdot\r\nsum_{x\r\nin B}{x}, modulo 998\r\n,244\r\n,353.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#ifndef ONLINE_JUDGE\n#include <debug-template.hpp>\n#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n#else\n#define debug(...) 42\n#endif\n\ntemplate<int MOD>\nstruct ModInt {\n\tModInt() : ModInt(0) {}\n\ttemplate<class U> ModInt(const U& x) { val = (1LL * x % MOD + MOD) % MOD; }\n\tModInt(const ModInt& x) { val = static_cast<int>(x); }\n\ttemplate<class U> inline operator U() const { return static_cast<U>(val); }\n\tinline ModInt& operator=(const ModInt& x) { val = static_cast<int>(x); return *this; }\n\ttemplate<class U> inline ModInt& operator=(const U& x) { val = static_cast<int>(ModInt(x)); return *this; }\n\tinline ModInt& operator+=(const ModInt& x) { val = (val + static_cast<long long>(x)) % MOD; return *this; }\n\tinline ModInt& operator-=(const ModInt& x) { val = (val - static_cast<long long>(x) + MOD) % MOD; return *this; }\n\tinline ModInt& operator*=(const ModInt& x) { val = (val * static_cast<long long>(x)) % MOD; return *this; }\n\tinline ModInt& operator/=(const ModInt& x) { *this *= ~x; return *this; }\n\ttemplate<class U> inline ModInt& operator+=(const U& x) { *this += ModInt(x); return *this; }\n\ttemplate<class U> inline ModInt& operator-=(const U& x) { *this -= ModInt(x); return *this; }\n\ttemplate<class U> inline ModInt& operator*=(const U& x) { *this *= ModInt(x); return *this; }\n\ttemplate<class U> inline ModInt& operator/=(const U& x) { *this /= ModInt(x); return *this; }\n\tinline ModInt& operator++() { return *this += 1; }\n\tinline ModInt operator++(int) { ModInt tmp = *this; *this += 1; return tmp; }\n\tinline ModInt& operator--() { return *this -= 1; }\n\tinline ModInt operator--(int) { ModInt tmp = *this; *this -= 1; return tmp; }\n\tfriend inline ModInt operator+(const ModInt& x, const ModInt& y) { return ModInt(x) += y; }\n\tfriend inline ModInt operator-(const ModInt& x, const ModInt& y) { return ModInt(x) -= y; }\n\tfriend inline ModInt operator*(const ModInt& x, const ModInt& y) { return ModInt(x) *= y; }\n\tfriend inline ModInt operator/(const ModInt& x, const ModInt& y) { return ModInt(x) /= y; }\n\tfriend inline bool operator==(const ModInt& x, const ModInt& y) { return static_cast<int>(x) == static_cast<int>(y); };\n\tfriend inline bool operator!=(const ModInt& x, const ModInt& y) { return static_cast<int>(x) != static_cast<int>(y); };\n\tinline ModInt operator+() const { return ModInt(+val); }\n\tinline ModInt operator-() const { return ModInt(-val); }\n\tinline ModInt operator~() const { return Pow(MOD - 2); }\n\ttemplate<class U> friend inline ModInt operator+(const ModInt& x, const U& y) { return ModInt(x) += y; }\n\ttemplate<class U> friend inline ModInt operator-(const ModInt& x, const U& y) { return ModInt(x) -= y; }\n\ttemplate<class U> friend inline ModInt operator*(const ModInt& x, const U& y) { return ModInt(x) *= y; }\n\ttemplate<class U> friend inline ModInt operator/(const ModInt& x, const U& y) { return ModInt(x) /= y; }\n\ttemplate<class U> friend inline ModInt operator+(const U& x, const ModInt& y) { return ModInt(x) += y; }\n\ttemplate<class U> friend inline ModInt operator-(const U& x, const ModInt& y) { return ModInt(x) -= y; }\n\ttemplate<class U> friend inline ModInt operator*(const U& x, const ModInt& y) { return ModInt(x) *= y; }\n\ttemplate<class U> friend inline ModInt operator/(const U& x, const ModInt& y) { return ModInt(x) /= y; }\n\ttemplate<class U> friend inline bool operator==(const ModInt& x, const U& y) { return x == ModInt(y); };\n\ttemplate<class U> friend inline bool operator!=(const ModInt& x, const U& y) { return x != ModInt(y); };\n\ttemplate<class U> friend inline bool operator==(const U& x, const ModInt& y) { return ModInt(x) == y; };\n\ttemplate<class U> friend inline bool operator!=(const U& x, const ModInt& y) { return ModInt(x) != y; };\n\ttemplate<class U> friend inline U& operator<<(U& ost, const ModInt& y) { return ost << static_cast<int>(y); }\n\ttemplate<class U> friend inline U& operator>>(U& ist, ModInt& x) { int t; ist >> t; x = t; return ist; }\n\ttemplate<class U> friend inline U& operator+=(U& x, const ModInt& y) { x = static_cast<U>(x + y); return x; }\n\ttemplate<class U> friend inline U& operator-=(U& x, const ModInt& y) { x = static_cast<U>(x - y); return x; }\n\ttemplate<class U> friend inline U& operator*=(U& x, const ModInt& y) { x = static_cast<U>(x * y); return x; }\n\ttemplate<class U> friend inline U& operator/=(U& x, const ModInt& y) { x = static_cast<U>(x / y); return x; }\n\ttemplate<class U> inline ModInt Pow(U n) const {\n\t\tif (n < 0) return ~Pow(-n);\n\t\tModInt rlt = 1, tmp = *this;\n\t\twhile (n) {\n\t\t\tif (n & 1) rlt *= tmp;\n\t\t\ttmp *= tmp;\n\t\t\tn /= 2;\n\t\t}\n\t\treturn rlt;\n\t}\nprivate:\n\tint val;\n};\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0), cout.tie(0);\n\t\n\tusing mint = ModInt<998244353>;\n\tint M; cin >> M;\n\tvector<int> freq(100001);\n\tvector<mint> ans(100001);\n\twhile (M--) {\n\t\tint a; cin >> a;\n\t\tcin >> freq[a];\n\t}\n\tmint tp = 2;\n\tfor (int i = freq.size() - 1; i >= 1; i--) {\n\t\tlong long k = 0; mint s = 0, t = 0;\n\t\tfor (int j = i; j < freq.size(); j += i) {\n\t\t\tk += freq[j];\n\t\t\ts += freq[j] * mint(j);\n\t\t\tt += mint(j) * freq[j] * j;\n\t\t}\n\t\ts = (s * s - t);\n\t\t// a[i] * a[i] (k - 1) * 2 ^ (k - 2)\n\t\t// a[i] * a[j] k * 2 ^ (k - 2)\n\t\tans[i] = tp.Pow(k-3) * (s * k + t * (k - 1) * tp);\n\t\tfor (int j = i * 2; j < freq.size(); j += i) ans[i] -= ans[j];\n\t}\n\tcout << ans[1];\n\t\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math",
        "number theory"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Sum Over Subsets.json",
    "editorial_link": "https://codeforces.com//blog/entry/84024",
    "editorial": "Letâs calculate the required product of the sums for the sets, the\r\ngreatest common divisor of the elements of which is . First, letâs\r\nselect all the elements that are divisible by . To find only those sets\r\nwhose GCD is exactly , one can find the product of the sums for all\r\nsubsets and subtract the answers of all such that and divides without a\r\nremainder. To find the products of all subsets of a set of elements,\r\nconsider two cases: the product will be counted times. Each element in\r\nthe set can be removed and this will add the product . The number of\r\nelements and the number, select the rest of the subset ; the product\r\nwill be counted . The first term is similar to the example above. And\r\nthe second is obtained if is removed from the set - the number of ways\r\nto choose a subset of elements is . It is only to count the individual\r\nsums and for all elements that are divisible by . To do this, you can\r\nmaintain for already added numbers their number, sum, sum of squares of\r\nnumbers and pairwise sum of numbers. The answer to the problem will be .\r\n",
    "hint": []
}