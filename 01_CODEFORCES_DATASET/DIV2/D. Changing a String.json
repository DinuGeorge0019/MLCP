{"link": "https://codeforces.com//contest/56/problem/D", "problemId": "295", "problem_idx": "D", "shortId": "56D", "contest_number": "56", "problem_submissions": {"E": [258649, 275636, 258438, 257981, 258601, 259067, 259739], "D": [258330, 258098, 257671, 258532, 258585, 258647, 258137, 259765, 259114, 259097, 259090, 259087, 258433, 258859, 258531, 258403], "C": [257968, 257135, 257281, 257886, 258037, 257842, 257990, 257633, 257657, 257674, 257434, 257851, 257922, 257982], "B": [257322, 275541, 256897, 257039, 257245, 257159, 256958, 257543, 256938, 257029, 256950, 257096, 256939, 257185, 257167, 257332, 257174, 257484], "A": [256682, 258521, 256494, 256668, 256712, 256667, 256559, 256742, 256436, 256563, 256540, 256671, 258296, 256737, 256662, 256687, 256601, 256658]}, "name": "D. Changing a String", "statement": "There is a string , consisting of capital Latin letters. Let\u2019s denote\r\nits current length as . During one move it is allowed to apply one of\r\nthe following operations to it: insert a letter in the string in the\r\nposition (). The letter becomes the -th symbol of the string , at that\r\nthe letters shift aside and the length of the string increases by 1.\r\ndelete a character number () from the string . At that the letters shift\r\ntogether and the length of the string decreases by 1. the letter in the\r\nposition of the line is replaced by (). At that the length of the string\r\ndoes not change. Your task is to find in which minimal number of moves\r\none can get a string from an string. You should also find the sequence\r\nof actions leading to the required results.\r\n", "solutions": ["//#pragma comment(linker,\"/STACK:256000000\")\n\n#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <stdio.h>\n#include <string>\n#include <memory.h>\n\nusing namespace std;\n\n#define ldb long double\n#define LL long long\n#define nextline() {int c; while ((c = getchar()) != 10 && c != EOF);}\n\n#define PI 3.1415926535897932384626433832795\n#define EPS 1e-9\n\n#define sqr(x) ((x) * (x))\n#define ABS(a) ((a)<0?-(a):(a))\n#define EQ(a,b) (ABS((a)-(b))<EPS)\n\n#define all(a) a.begin(), a.end()\n#define two(i) (1 << (i))\n#define has(mask, i) ((((mask) & two(i)) == 0) ? false : true)\n\nconst int inf = 1000 * 1000 * 1000;\nconst LL inf64 = 1000LL * 1000LL * 1000LL * 1000LL * 1000LL * 1000LL;\n\n\n#define MAXN 1000\n\nstring a, b;\nint n, m;\nint dp[2000][2000];\nint wh[2000][2000];\n\nvoid Load()\n{\t\n\tcin >> a >> b;\n}\n\nint rec (int pos, int s)\n{\n\n\tif (s == n && pos == m)\n\t\treturn 0;\n\tif (s > n)\n\t\treturn inf;\n\n\tif (pos == m)\n\t{\n\t\tassert (n > s);\n\t\treturn n - s;\n\t}\n\tif (dp[pos][s] != -1)\n\t\treturn dp[pos][s];\n\n\tint cur = inf;\n\tint mn = inf;\n\tint w = -1;\n\n\tif (b[pos] == a[s])\n\t\tcur =  rec (pos + 1, s + 1);\n\tif (cur < mn)\n\t{\n\t\tmn = cur;\n\t\tw = 0;\n\t}\n\n\tcur = 1 + rec (pos, s + 1);\n\tif (cur < mn)\n\t{\n\t\tmn = cur;\n\t\tw = 1;\n\t}\n\n\tcur = 1 + rec (pos + 1, s + 1);\n\tif (cur < mn)\n\t{\n\t\tmn = cur;\n\t\tw = 2;\n\t}\n\tcur = 1 + rec (pos + 1, s);\n\tif (cur < mn)\n\t{\n\t\tmn = cur;\n\t\tw = 3;\n\t}\n\tdp[pos][s] = mn;\n\twh[pos][s] = w;\n\treturn mn;\n}\n\nvoid out (int pos, int s)\n{\n\tcerr << pos << \" \" << s << \" -> \" << wh[pos][s] << \"\\n\" ;\n\tif (s == n && m == pos)\n\t\treturn;\n\n\tif (pos == m)\n\t{\n\t\tfor (int i = 0; i < n - s; i++)\n\t\t\tprintf (\"DELETE %d\\n\", m + 1);\n\t\treturn;\n\t}\n\tif (wh[pos][s] == 0)\n\t\tout (pos + 1, s + 1);\n\tif (wh[pos][s] == 1)\n\t{\n\t\tprintf (\"DELETE %d\\n\", pos + 1);\n\t\tout (pos, s + 1);\n\t}\n\tif (wh[pos][s] == 2)\n\t{\n\t\tprintf (\"REPLACE %d %c\\n\", pos + 1, b[pos]);\n\t\tout (pos + 1, s + 1);\n\t}\n\tif (wh[pos][s] == 3)\n\t{\n\t\tprintf (\"INSERT %d %c\\n\" , pos + 1, b[pos]);\n\t\tout (pos + 1, s);\n\t}\n\n}\n\nvoid Solve()\n{\n\tn = a.size();\n\tm = b.size();\n\tmemset (dp, 0xFF, sizeof (dp));\n\tcout << rec (0, 0) << \"\\n\";\n\tout (0, 0);\n}\n                \nint main()\n{\n\t//ios_base::sync_with_stdio(0);\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in\", \"rt\", stdin);\n\tfreopen(\"out\", \"wt\", stdout);\n#endif\n\n\tLoad();\n\tSolve();\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["dp"], "dificulty": "2100", "interactive": false}