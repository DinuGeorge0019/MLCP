{
    "link": "https://codeforces.com//contest/703/problem/E",
    "problemId": "67405",
    "problem_idx": "E",
    "shortId": "703E",
    "contest_number": "703",
    "problem_submissions": {
        "E": [
            19666489,
            19673872
        ],
        "B": [
            19626552,
            19623646,
            19623489,
            19622672,
            19623589,
            19622607,
            19630316,
            19626462,
            19622834,
            19627334,
            19621557,
            19624072,
            19622040,
            19636121,
            19621168,
            19623567,
            19627920,
            19622029,
            19622154,
            19622540
        ],
        "D": [
            19626399,
            19625673,
            19630973,
            19636020,
            19629091,
            19634472,
            19637884,
            19624772,
            19628022,
            19634609,
            19626277,
            19629769,
            19629743,
            19636886,
            19631115,
            19635175,
            19634015,
            19631464,
            19625267,
            19625595,
            19625868
        ],
        "C": [
            19623139,
            19633081,
            19627637,
            19624674,
            19630730,
            19625930,
            19632821,
            19631298,
            19627565,
            19632128,
            19636417,
            19634592,
            19629638,
            19625401,
            19632242,
            19634683,
            19635534
        ],
        "A": [
            19617844,
            19618704,
            19618318,
            19617935,
            19617774,
            19620750,
            19618191,
            19619005,
            19619467,
            19627709,
            19617913,
            19620674,
            19618195,
            19621709,
            19617804,
            19620263,
            19618582,
            19620732,
            19617828,
            19618666
        ]
    },
    "name": "E. Mishka and Divisors",
    "statement": "After playing with her beautiful array, Mishka decided to learn some\r\nmath. After learning how to multiply, divide and what is divisibility,\r\nshe is now interested in solving the following problem.You are given\r\ninteger and array of integers. You are to find subsequence of array\r\nelements such that the product of its elements is divisible by and it\r\ncontains minimum possible number of elements.Formally, you are to find a\r\nsequence of indices such that is divisible by while is minimum possible\r\namong all such variants.If there are more than one such subsequences,\r\nyou should choose one among them, such that sum of its elements is\r\n.Mishka quickly solved this problem. Will you do so?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define FZ(n) memset((n),0,sizeof(n))\n#define FMO(n) memset((n),-1,sizeof(n))\n#define MC(n,m) memcpy((n),(m),sizeof(n))\n#define F first\n#define S second\n#define MP make_pair\n#define PB push_back\n#define ALL(x) begin(x),end(x)\n#define IOS do { ios_base::sync_with_stdio(0);cin.tie(0); } while (0)\n#define SZ(x) ((int)(x).size())\n#ifndef OFFLINE\n    #define ONLINE_JUDGE\n#endif\n#ifdef ONLINE_JUDGE\n#define FILEIO(name) \\\n    do { \\\n        freopen(name\".in\", \"r\", stdin); \\\n        freopen(name\".out\", \"w\", stdout); \\\n    } while (0)\n#else\n    #define FILEIO(name) do { } while(0)\n#endif\n\n#define _TOKEN_CAT2(x, y) x ## y\n#define _TOKEN_CAT(x, y) _TOKEN_CAT2(x, y)\n#define _MACRO_OVERL3(_1, _2, _3, _N, ...) _N\n#define _RANGE1(a) int _TOKEN_CAT(_t, __LINE__)=0; _TOKEN_CAT(_t, __LINE__)<(a); (_TOKEN_CAT(_t, __LINE__))++\n#define _RANGE2(i, a) int (i)=0; (i)<(a); (i)++\n#define _RANGE3(i, a, b) int (i)=(a); (i)!=(b); (i)+=((b)>(a)?1:-1)\n#define loop(...) for (_MACRO_OVERL3(__VA_ARGS__, _RANGE3, _RANGE2, _RANGE1)(__VA_ARGS__))\n\n#ifdef OFFLINE\ntemplate<typename T>\nvoid _dump(const char* s, T&& head) { \n    cerr << s << \" = \" << head << \" <<\" << endl; \n}\n\ntemplate<typename T, typename... Args>\nvoid _dump(const char* s, T&& head, Args&&... tail) {\n    int c = 0;\n    while (*s!=',' || c!=0) {\n        if (*s=='(' || *s=='[' || *s=='{' || *s=='<') c++;\n        if (*s==')' || *s==']' || *s=='}' || *s=='>') c--;\n        cerr << *s++;\n    }\n    cerr << \" = \" << head << \", \";\n    _dump(s+1, tail...);\n}\n\n#define dump(...) do { \\\n    cerr << \"\\033[32m>> \" << __LINE__ << \": \" << __PRETTY_FUNCTION__ << endl; \\\n    cout << \"   \"; \\\n    _dump(#__VA_ARGS__, __VA_ARGS__); \\\n    cout << \"\\033[0m\"; \\\n} while (0)\n#else\n#define dump(...) \n#endif\n\n#define au auto\ntemplate<class T>\nusing vec = vector<T>;\n\ntemplate<typename Iter>\nostream& _IterOutput_(ostream &o, Iter b, Iter e, const string ss=\"\", const string se=\"\") {\n    o << ss;\n    for (auto it=b; it!=e; it++) o << (it==b ? \"\" : \", \") << *it;\n    return o << se;\n}\n\ntemplate<typename T1, typename T2>\nostream& operator << (ostream &o, const pair<T1, T2> &pair) {\n    return o << \"(\" << pair.F << \", \" << pair.S << \")\";\n}\n\ntemplate<typename T>\nostream& operator << (ostream &o, const vector<T> &vec) {\n    return _IterOutput_(o, ALL(vec), \"[\", \"]\");\n}\n\ntemplate<typename T>\nostream& operator << (ostream &o, const set<T> &st) {\n    return _IterOutput_(o, ALL(st), \"{\", \"}\");\n}\n\ntemplate<typename T, size_t N>\nostream& operator << (ostream &o, const array<T, N> &arr) {\n    return _IterOutput_(o, ALL(arr), \"|\", \"|\");\n}\n\ntemplate<typename T1, typename T2>\nostream& operator << (ostream &o, const map<T1, T2> &mp) {\n    o << \"{\";\n    for (auto it=mp.begin(); it!=mp.end(); it++) {\n        o << (it==mp.begin()?\"\":\", \") << it->F << \":\" << it->S;\n    }\n    o << \"}\";\n    return o;\n}\n\nvoid lucky_test() {\n    srand(time(NULL));\n    long long a = rand(), b = rand();\n    if ((a * 32768 + b) % 100000 == 0) {\n        cout << \"Not lucky\" << endl;\n        exit(0);\n    }\n}\nusing ll = long long;\nvector<ll> fac, pf;\nint N;\nll K;\n\nconst int MV = 2e6;\nbool isp[MV];\nint wk[8888][100];\n\nll fm(ll x, ll y) {\n    \n    ll ans = 0, tp = x % K;\n    while (y) {\n        if (y & 1) {\n            ans += tp;\n            if (ans >= K) ans -= K;\n        }\n\n        tp += tp;\n        if (tp >= K) tp -= K;\n        y /= 2;\n    }\n    return ans;\n}\ninline int fid(ll x) {\n    return lower_bound(ALL(fac), x) - fac.begin();\n}\n\nstatic void pre() {\n    fill(isp, isp+MV, 1);\n    isp[0] = isp[1] = 0;\n    for (int i=2; i<MV; i++) {\n        if (isp[i]) {\n            for (int j=i+i; j<MV; j+=i) isp[j] = 0;\n        }\n    }\n\n    ll kk = K;\n    for (ll i=1; i*i<=K; i++) {\n        if (K % i == 0) {\n            ll t = K/i;\n            fac.PB(t);\n            if (t != i)\n                fac.PB(i);\n\n            if (isp[i]) {\n                pf.PB(i);\n                while (kk % i == 0) {\n                    kk /= i;\n                }\n            }\n        }\n    }\n    if (kk != 1) pf.PB(kk);\n    sort(ALL(fac));\n    sort(ALL(pf));\n    //cout << fac << ' ' << pf << endl;\n\n    for (int i=0; i<SZ(fac); i++) {\n        ll v = fac[i];\n        for (int j=0; j<SZ(pf); j++) {\n            ll u = pf[j];\n            ll z = __gcd(fm(v, u), K);\n            wk[i][j] = fid(z);\n            //cout << wk[i][j] << ' ';\n        }\n        //cout << endl;\n    }\n}\n\nconst int MN = 1111;\nconst int MF = 7777;\nconst ll INF = 1e18;\nconst int inf = 1e9;\nusing pii = pair<int, ll>;\npii dp[MN][MF];\nint bk[MN][MF];\n\n\n\npii operator + (const pii &p1, const pii &p2) {\n    return {p1.F+p2.F, p1.S+p2.S};\n}\n\nint32_t main() {\n    IOS;\n    lucky_test();\n    cin >> N >> K;\n    if (K == 1) {\n        ll mn = INF, mi;\n        for (int i=0; i<N; i++) {\n            ll x; cin >> x;\n            if (mn > x) {\n                mn = x;\n                mi = i;\n            }\n        }\n        cout << \"1\\n\" << mi+1 << endl;\n        return 0;\n    }\n    //cout << K << endl;\n    pre();\n    assert(fac[0] == 1);\n    assert(fac.back() == K);\n    for (int _=0; _<=N; _++) {\n        for (int i=0; i<SZ(fac)+5; i++) {\n            dp[_][i] = {inf, INF};\n            bk[_][i] = -1;\n        }\n    }\n    dp[0][0] = {0, 0};\n    \n    int Z = SZ(fac);\n    //cout << Z << endl;\n        //for (int j=0; j<Z; j++) {\n            //cout << dp[0][j] << ' ';\n        //}\n        //cout << endl;\n\n    for (int i=0; i<N; i++) {\n        ll x; cin >> x;\n        int he = i+1;\n        for (int j=0; j<Z; j++) {\n            if (dp[i][j] < dp[he][j]) {\n                dp[he][j] = dp[i][j];\n                bk[he][j] = j;\n                //if (he == N and j == Z-1) {\n                    //cout << i << ' ' << j << endl;\n                //}\n            }\n\n            int p = j;\n            ll y = x;\n            for (int q=0; q<SZ(pf); q++) {\n                ll pm = pf[q];\n                while (y % pm == 0) {\n                    //cout << p << ' ' << q << \"walk\" << endl;\n                    p = wk[p][q];\n                    //cout << p << endl;\n                    y /= pm;\n                }\n            }\n            //cout << j << ' ' << x << ' ' << p << endl;\n            if (dp[i][j] + pii(1, x) < dp[he][p]) {\n                dp[he][p] = dp[i][j] + pii(1, x);\n                bk[he][p] = j;\n                //if (he == N and p == Z-1) {\n                    //cout << i << ' ' << j << endl;\n                    //cout << dp[i][j] << endl;\n                //}\n            }\n\n        }\n\n        //for (int j=0; j<Z; j++) {\n            //cout << bk[he][j] << ' ';\n        //}\n        //cout << endl;\n    }\n\n    if (dp[N][Z-1].F >= inf) {\n        cout << -1 << endl;\n        return 0;\n    }\n    int bi = Z-1;\n    vector<int> ans;\n\n    int pos = N;\n    while (pos) {\n        int nx = bk[pos][bi];\n        if (nx != bi) {\n            ans.PB(pos);\n        }\n        bi = nx;\n        pos --;\n    }\n\n    reverse(ALL(ans));\n    cout << SZ(ans) << endl;\n    for (auto x: ans) cout << x << ' ';\n    cout << endl;\n\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "number theory"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Mishka and Divisors.json",
    "editorial_link": "https://codeforces.com//blog/entry/46434",
    "editorial": "Let\u00e2\u0080\u0099s use dp to solve this problem. Suppose is the minimal number of\r\nelements on prefix of size , that their product is divisible by . It\u00e2\u0080\u0099s\r\neasy to see that . That is so because it\u00e2\u0080\u0099s optimal to take as much\r\ndivisors of as possible. Answer . Let\u00e2\u0080\u0099s imrove our solution. Notice,\r\nthat as we should use only divisors of (which in the worst case would be\r\n6720). As for , we can easily find it in , where number of primes in\r\ndecomposition of . We also need to renumber our divisors according to\r\ntheir prime decomposition. To get AC in this problem you had to optimize\r\ndescribed dp and add minimization of used elements\u00e2\u0080\u0099 sum. Final\r\ncomplexity . Solution\r\n"
}